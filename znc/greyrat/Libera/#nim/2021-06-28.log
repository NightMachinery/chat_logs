[00:01:03] *** Quits: sagax (~sagax@213.138.71.146) (Remote host closed the connection)
[00:06:07] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:26:17] <fn> <11ForumUpdaterBot99> New thread by Masiarek2: Print Unicode names e.g 'SPACE', 'NO-BREAK SPACE', HORIZONTAL TAB , see https://forum.nim-lang.org/t/8164
[00:41:38] *** Joins: foufoutos (~foufoutos@2a02:214c:8018:a300::a30)
[00:42:17] *** foufoutos is now known as lightspot21
[00:42:47] *** Quits: lightspot21 (~foufoutos@2a02:214c:8018:a300::a30) (Client Quit)
[00:43:02] *** Joins: lightspot21 (~lightspot@2a02:214c:8018:a300::a30)
[00:51:20] *** Joins: Kioshi (~Kioshi@212.32.254.123)
[00:51:49] *** Quits: Kioshi (~Kioshi@212.32.254.123) (Client Quit)
[01:13:36] *** Joins: pro (~pro@user/pro)
[01:38:32] <pro> when are we going to test windows builds
[01:39:08] <pro> because we can't really support windows if every build is flagged by windows defender
[01:41:30] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[01:42:33] *** Joins: pro (~pro@user/pro)
[01:44:04] <FromDiscord> <Elegantbeef> They did test 1.4.8 to try to get that to stop happening, but it's pretty hard to manage when you arent exactly told "Hey this is what's causing the flag" 😛
[01:45:36] <pro> I have no antivirus and can't download binary from chrome
[01:46:41] <FromDiscord> <Elegantbeef> Well you can usually tell AV and browsers "I know best", but if you cannot, you can try building from source
[01:46:59] <FromDiscord> <willyboar> this is a cool idea for a nim project
[01:47:10] <FromDiscord> <Elegantbeef> Bypassing antivirus checks? 😛
[01:47:18] <FromDiscord> <willyboar> lol
[01:47:54] <pro> how was this event called yesterday
[01:48:10] <pro> on yt
[01:48:13] <FromDiscord> <willyboar> nimconf?
[01:48:20] <pro> yeah nimconf
[01:48:32] <pro> some projects are really really good
[01:49:14] <FromDiscord> <willyboar> agree
[01:49:22] <pro> some are not that good though :)
[01:49:36] <pro> but yeah, it's nice that we have a conf
[01:49:47] <FromDiscord> <willyboar> personaly i keep an eye on nicoru
[01:50:07] <FromDiscord> <willyboar> despite the fact i dont use containers
[01:50:10] <FromDiscord> <willyboar> 😛
[02:04:42] <fn> <11ForumUpdaterBot99> New thread by Stbalbach: Include a file variably, see https://forum.nim-lang.org/t/8165
[02:27:08] <FromDiscord> <tomck> Hello↵How can I generate a nnkTripleStrLit node in a macro? There is no corresponding `newLit` proc and I can't access the `kind` field of `NimNode`
[02:27:37] <FromDiscord> <tomck> a 'triple string lit' is a string like `"""hello↵world"""`
[02:34:07] <FromDiscord> <tomck> sent a code paste, see https://play.nim-lang.org/#ix=3rjD
[02:36:37] *** Joins: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-72a8-a910-7a6a-987d.res6.spectrum.com)
[02:36:54] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[02:37:19] <PersonMcGuy> Hello all. Quick question, is there an equivalent to javascript's setInterval?
[02:38:59] *** Quits: lightspot21 (~lightspot@2a02:214c:8018:a300::a30) (Quit: leaving)
[02:40:33] <FromDiscord> <tomck> PersonMcGuy: You probably want to look into setting up an async event loop before you could get something like setInterval running, nim is a bit lower level than javascript so it doesn't set it up by default↵↵You could try looking at the asyncdispatch module
[02:41:42] <PersonMcGuy> @tomck Ah, okay, I figured as much, but if there was an easy way out, I wanted to take it lol. Thank you for your help.
[02:41:48] <FromDiscord> <tomck> Once you have that setup, you can `await` on a `sleepAsync` call https://nim-lang.org/docs/asyncdispatch.html#sleepAsync
[02:48:16] <FromDiscord> <Bung> you can use addTimer in asyncdispatch module
[02:49:54] <FromDiscord> <exithead> Is "seq[seq.maxIndex]" the correct way to access the last element in a seq?
[02:50:18] <FromDiscord> <Bung> you can use `^1`
[02:50:24] <PersonMcGuy> @bung that's perfect!
[02:51:31] <PersonMcGuy> also you could use seq[seq.high]
[03:08:48] <FromDiscord> <j-james> What are pointers used for in Nim?
[03:09:02] <FromDiscord> <Elegantbeef> C interop and when you need them
[03:27:48] <fn> <10bung99> is nim generated dll really in used ? I face kinds of errors
[03:39:29] *** Quits: max22- (~maxime@2a01cb0883359800eb523c6de7225c57.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:49:49] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3rjO
[03:51:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3rjP
[03:51:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3rjQ
[03:54:17] <FromDiscord> <Elegantbeef> Ah nvm thought that'd just work, but nope i'm a numpty
[05:27:29] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:43:07] <FromDiscord> <Hi02Hi> is `object of Foo[bool]` possible?
[05:54:16] <FromDiscord> <leorize> yes
[05:54:40] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[06:05:37] <FromDiscord> <Bung> @leorize does nim generated dll supposed to work ? I tried differient compile flags , it will raise differient errors
[06:06:16] <FromDiscord> <leorize> they do work on linux atleast
[06:06:19] <FromDiscord> <leorize> what are you trying to do?
[06:09:13] <FromDiscord> <Bung> I compiled dll to be a theme then use its render procs render html, with just `--app:lib` I always get nil access in loop , well, the place may differient. am sure all items in sequence are not nil.
[06:09:52] <FromDiscord> <leorize> can I see the code?
[06:10:42] *** Quits: PersonMcGuy (~PersonMcG@2603-8080-700a-3700-72a8-a910-7a6a-987d.res6.spectrum.com) (Quit: Client closed)
[06:11:45] <FromDiscord> <Bung> https://github.com/bung87/crown_ui/blob/82788573515b5450b57514ed51b0de3a9dee5c86/src/crown_ui/generator.nim#L467
[06:13:01] <FromDiscord> <Bung> the main proc I point to my local blog source, It can use `example` directory, but that case it runs without problem.
[06:15:57] <FromDiscord> <leorize> what's the target for the library?
[06:16:05] <FromDiscord> <leorize> to be linked with something else or to be loaded as a plugin?
[06:16:34] <FromDiscord> <Bung> load as theme system
[06:17:12] <FromDiscord> <leorize> loaded as a plugin?
[06:17:29] <FromDiscord> <Bung> yeah .
[06:17:53] <FromDiscord> <leorize> can I see the loader and how the loaded library is used?
[06:18:33] <FromDiscord> <Bung> `# const exampleDir = currentSourcePath.parentDir.parentDir.parentDir / "example"` you can uncomment this line
[06:19:06] <mst> this may be a stupid question but I'm not sure where I'd look - I can see how to build a C-loadable shared library from nim code but is it possible to have -two- shared libraries loaded into the same C program and have them share an ORC ?
[06:19:25] <FromDiscord> <leorize> `-d:useNimRtl` is your friend here
[06:19:42] <FromDiscord> <leorize> alternatively `-d:useMalloc` also works
[06:19:58] <mst> hrm?
[06:20:18] <mst> sorry, was that to Bung or to me, can't tell
[06:20:23] <mst> too ignorant just yet :/
[06:20:32] <FromDiscord> <leorize> orc is not a stack-scanning garbage collector
[06:20:45] <FromDiscord> <leorize> it's more of a destructor-based one
[06:20:52] <mst> I know it's not, it's an optimised implementation of the recycler paper
[06:21:01] <FromDiscord> <leorize> so as long as you share the memory allocator between the two libraries, it should work
[06:21:20] <FromDiscord> <leorize> `-d:useMalloc` is a good way since you will share the memory allocator with the C program too
[06:21:42] <mst> yeah, it's how to get the ORC cycle-breaking code shared that I was pondering
[06:22:05] <FromDiscord> <leorize> `-d:useNimRtl` would be what you're looking for
[06:22:11] <FromDiscord> <leorize> but that option is extremely experimental
[06:22:32] <mst> ah, so that creates a shared library for the runtime that both can link against?
[06:22:36] <FromDiscord> <Bung> I tried all flags you suggested and tried change gc
[06:23:16] <mst> extremely experimental is fine, a big reason I came to nim is that I wanted a recycler based refcounting gc
[06:23:36] <FromDiscord> <leorize> see that for generating nimrtl
[06:23:50] <FromDiscord> <leorize> @Bung\: I need to see the code where you load the compiled plugin
[06:23:55] <mst> I can totally live with sharp edges that I might have to patch, it's still a huge improvement over trying to implement the entire bastard thing myself
[06:24:48] * mst was seriously considering a full recycler implementation in rust before realising nim existed
[06:24:59] <FromDiscord> <Bung> it's in `build` proc  from line 514:`let libTheme = loadLib(themePath)` to 534: `unloadLib(libTheme)`
[06:25:45] <mst> leorize, thank you
[06:26:47] <FromDiscord> <leorize> @Bung\: first, you need nimrtl
[06:27:14] <FromDiscord> <leorize> secondly, you're exporting a procedure with `cdecl` but you're calling it with `stdcall`
[06:28:00] <FromDiscord> <leorize> you might find shashlick's plugins handy for this\: https://github.com/genotrance/plugins
[06:28:02] <fn> <12R2D299> 4GitHub: 7"Plugin system for Nim"
[06:35:35] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:47] <FromDiscord> <Bung> `-d:useNimRtl` I get compile time error.
[06:38:39] <FromDiscord> <Bung> without `stdcall` symbol can't be casted.
[06:39:31] <FromDiscord> <Bung> I dont quite get the idea of plugins package, it only has apis document..
[06:43:58] <FromDiscord> <leorize> plugins let you do the exact thing that you're doing
[06:44:04] <FromDiscord> <leorize> more structured, of course
[06:44:10] <FromDiscord> <leorize> change it to `cdecl`↵(@Bung)
[06:44:53] <FromDiscord> <leorize> since the two heaps are not shared
[06:44:53] <FromDiscord> <leorize> if you can't `-d:useNimRtl`, then I'd say passing memory between your program and the plugin is very dangerous
[06:51:12] <FromDiscord> <Bung> sent a long message, see http://ix.io/3rkh
[06:51:59] <FromDiscord> <Bung> when use `-d:useNimRtl` , highlite module problem ?
[06:54:00] <FromDiscord> <leorize> looks so to me
[06:54:14] <FromDiscord> <leorize> `--gc:orc -d:useMalloc` is a viable alternative
[06:54:37] <FromDiscord> <ajusa> Any ways around the fact that you can't name two fields the same thing in  variant objects?
[06:55:15] <FromDiscord> <ajusa> I know there's an open RFC, but should I just prefix the kind or something like that to the field name so that they don't clash?
[06:55:33] <mst> ajusa, use different names for the fields and use a virtual method to have the same name for usage?
[06:56:08] <FromDiscord> <Bung> with `--gc:orc -d:useMalloc` it even acess ref object's string field became nil.
[06:57:51] <FromDiscord> <Bung> I thought with `--app:lib` every thing works fine, the fact is not that easy.
[06:57:51] <FromDiscord> <ajusa> In reply to @mst "<@102899813149855744>, use different names": oooh good idea
[06:58:51] <mst> I wasn't intending to be condescending, the 'virtual method' part was the reason I mentioned it ;)
[06:59:16] <mst> (I mean, I do totally manage to be condescending unintentionally sometimes, but I was hoping this wasn't one of them)
[06:59:30] <FromDiscord> <ajusa> No no I legitimately think it's a good idea, thanks for the advice. It didn't occur to me at all
[07:00:39] <FromDiscord> <leorize> yea, its one of the lesser tested features↵(@Bung)
[07:00:49] <mst> the way it quoted only included the "use different names" part of what I'd said so I wanted to check :D
[07:01:17] <mst> but esp. given Nim's ability to have setter methods that work with = I -think- you can end up with something pretty clean
[07:01:54] <mst> (I have a lot of experience in multiple languages of painting myself into a corner and having to get creative to escape ;)
[07:03:01] <FromDiscord> <Bung> @leorize Thanks let me know that! I spend whole day with no clue.
[07:04:23] <FromDiscord> <leorize> @ajusa\: you might want to give https://github.com/nim-lang/RFCs/issues/368 a bump
[07:09:12] <FromDiscord> <Bung> I looked plugins module, it seems it do hot reload module , version files, call dll proc with string arg, so if my dll's proc params are all serialized , things could be simpler ?
[07:14:18] *** Joins: jkl (~jkl@user/jkl)
[07:25:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[07:27:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:44:30] *** Joins: Guest3434 (~Guest34@42-3-27-144.static.netvigator.com)
[07:44:38] *** Quits: Guest3434 (~Guest34@42-3-27-144.static.netvigator.com) (Client Quit)
[08:13:07] <FromDiscord> <@bracketmaster-5a708063d73408ce4> can I define a variable in nim that can only take on values between 0 and 5 inclusive?
[08:17:24] <FromDiscord> <@bracketmaster-5a708063d73408ce4> I seem to have been able to do this some time ago
[08:20:51] <FromDiscord> <leorize> [BracketMaster (Yehowshua Immanuel)](https://matrix.to/#/@bracketmaster-5a708063d73408ce4f8ad7ee:gitter.im)\: yes, use the range type
[08:21:50] *** Quits: federico3 (~quassel@163.172.164.163) (Changing host)
[08:21:50] *** Joins: federico3 (~quassel@debian/federico)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:50:40] <FromDiscord> <stu002> Can more experienced nimsters comment on trying to associate a type in a concept, as per here: https://forum.nim-lang.org/t/8161
[08:51:33] <FromDiscord> <Elegantbeef> Ah sorry you had the fun experience of that one response
[08:53:22] <FromDiscord> <Elegantbeef> What's the point of the Epsilon type?
[08:53:22] <FromDiscord> <Elegantbeef> Basically a wild card?
[09:15:07] <FromDiscord> <stu002> In this case it's a relative error term for the "equality" test. So comparing f64's could use something other than f64 for the epsilon term.
[09:15:37] <FromDiscord> <stu002> But I can see completely different usages of concepts where some kind of "associated" type is very handy
[09:16:28] <FromDiscord> <stu002> Template concepts I think will work, but seems a wrong-ish use of the template type
[09:20:12] <FromDiscord> <ElegantBeef> Ah well the bridge is being comically slow, so you may want to look at the devel concepts, also they're generics 😄
[09:20:24] <FromDiscord> <ElegantBeef> like this is the modern concept method https://media.discordapp.net/attachments/371759389889003532/858932321640906752/unknown.png
[09:20:59] <FromDiscord> <ElegantBeef> I dont know if the old generics have a way to say "This parameter slot can be any of these types"
[09:21:34] <FromDiscord> <ElegantBeef> old concepts
[09:35:52] <FromDiscord> <Rika> Concept with generic T
[09:35:54] <FromDiscord> <Rika> Probably
[09:51:46] <FromDiscord> <stu002> In reply to @ElegantBeef "I dont know if": Very nice!  Will try that out right now
[09:52:55] <FromDiscord> <stu002> Are the "new style" concepts a Nim V2.x feature or could appear in a 1.x release?
[09:54:25] <FromDiscord> <Elegantbeef> They're in `devel` right now and will probably be released with 1.6 afaik
[09:55:13] <FromDiscord> <stu002> Am I right in saying the new style concepts don't have concept refinement, i.e. a "type T is ParentConcept" clause allowed?
[09:56:50] <FromDiscord> <Elegantbeef> Dont know if they do, hopefully some remnants of the old style since it seems new style are limited in some regards
[09:57:22] <FromDiscord> <Elegantbeef> old style stay\
[09:58:11] <FromDiscord> <stu002> I was going off comments in Github for that observation, I'd better actually implement some tests myself first
[09:58:27] <FromDiscord> <Rika> In reply to @stu002 "Am I right in": It’s not recommended per the new concept RFC
[09:59:18] <FromDiscord> <stu002> In reply to @Rika "It’s not recommended per": That could be a big problem for me and for Nim libraries like "Emmy". Sigh.
[09:59:48] <FromDiscord> <Rika> You can still do it just not supposedly inside another concept
[10:00:26] <FromDiscord> <stu002> In reply to @Rika "You can still do": Interesting, are there more examples of the new style concepts somewhere?
[10:04:38] <FromDiscord> <stu002> I'd be very happy with `type NumTest = concept of Something` if that came about.
[10:05:26] <FromDiscord> <Elegantbeef> What'd that do
[10:06:22] <FromDiscord> <Elegantbeef> You could do that with macros if i understand the implication of "This needs all conditions of X"
[10:06:51] <FromDiscord> <stu002> I haven't thought this through but as an alternative to the old style `...type T` and `T is Something` in the concept body.
[10:09:07] <FromDiscord> <stu002> I don't have enough experience with Nim to know how macros would work out in practice as a work-around, but wouldn't we end up with hundreds of slightly different concept refinement macros--one for each library?
[10:11:57] <FromDiscord> <stu002> My use of concepts is very similar to the use here: https://github.com/andreaferretti/emmy/blob/master/emmy/structures.nim
[10:12:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3rkV
[10:12:59] <FromDiscord> <stu002> In reply to @Elegantbeef "Well the idea i": That's neat too.
[10:14:21] <FromDiscord> <Elegantbeef> I truthfully havent used concepts much so only have some brief theoretical knowledge of them 😀
[10:16:26] <FromDiscord> <stu002> I'm sure there's a very good reason the new concepts don't include refinement (as generics can do), but have too little Nim experience to judge
[10:24:20] *** Joins: Guest31 (~Guest31@2600:1700:e680:25d0:2d2e:f84c:a1ce:7aa8)
[10:25:48] *** Quits: Guest31 (~Guest31@2600:1700:e680:25d0:2d2e:f84c:a1ce:7aa8) (Client Quit)
[10:32:38] <FromDiscord> <Rika> Why can’t you make a type that says “concept and concept and concept”
[10:32:55] <FromDiscord> <Rika> Aka what you want except the concepts themselves do not restrict
[10:37:45] <FromDiscord> <impbox [ftsf]> concepts seemed like a cool concept, but i've only used them a little
[10:48:07] <FromDiscord> <Rika> I always treated it as a way to do static duck typing
[11:01:19] <FromDiscord> <haxscramper> @mratsim at nim conf you talked about status providing some sort of support for nimble development (approximately `19:14` in the talk). Can you talk about that more - from what I can understand you are aiming to improve nimble features that status needs, correct?
[11:25:44] <FromDiscord> <impbox [ftsf]> is there a way to force sending content-length with a zero length body post with httpclient?
[11:25:58] <FromDiscord> <impbox [ftsf]> remote server is returning 411 Length Required
[11:27:30] <FromDiscord> <Rika> Does putting it in the sent headers not work? I forgot if you could manually force headers though
[11:29:13] <FromDiscord> <impbox [ftsf]> I tried including it in the headers argument to `request`
[11:30:16] <FromDiscord> <Rika> How did it go?
[11:30:29] <FromDiscord> <Rika> Wait that’s a dumb question
[11:30:55] <FromDiscord> <Rika> Are you sure the server accepts an empty post?
[11:31:51] <FromDiscord> <impbox [ftsf]> yep, was previously working too
[11:32:15] <FromDiscord> <impbox [ftsf]> hmm wonder if i can fix it by reverting nim version
[11:44:27] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3rlh
[11:44:29] <FromDiscord> <impbox [ftsf]> so content-length is being sent
[11:44:39] *** Joins: PMunch (~PMunch@178.74.36.198)
[11:44:39] <FromDiscord> <impbox [ftsf]> so maybe it's the remote server that's wrong
[11:45:05] <FromDiscord> <impbox [ftsf]> maybe expecting "Content-Length" instead of "content-length"
[11:48:35] <FromDiscord> <Rika> So a noncompliant server lol
[11:48:57] <FromDiscord> <impbox [ftsf]> could be... i can only speculate so far, will try and narrow it down
[11:50:45] <FromDiscord> <impbox [ftsf]> nope, same issue with Content-Length: 0
[11:50:46] *** Quits: PMunch (~PMunch@178.74.36.198) (Ping timeout: 252 seconds)
[11:52:43] <FromDiscord> <impbox [ftsf]> ok.. i just realised it's totally unrelated. sorry ~_~
[11:52:52] <FromDiscord> <impbox [ftsf]> i'm setting headers where i'm supposed to set body content
[11:55:51] <FromDiscord> <Rika> Lol
[11:56:04] <FromDiscord> <impbox [ftsf]> I'm certain it used to work so confused
[11:56:12] <FromDiscord> <Rika> Good thing it’s resolved now though
[12:02:04] <FromDiscord> <impbox [ftsf]> I haven't managed to resolve it, but oh well. I don't think nim is the problem here
[12:02:28] <FromDiscord> <Rika> Check with another language if you want to truly make sure lol
[12:02:40] <FromDiscord> <impbox [ftsf]> good idea
[12:03:10] *** Joins: PMunch (~PMunch@178.74.36.198)
[12:10:41] <FromDiscord> <impbox [ftsf]> hmm it return 200 via python
[12:12:45] <FromDiscord> <Rika> Maybe analyse the difference between the requests sent by both
[12:13:03] <FromDiscord> <impbox [ftsf]> yep, that's my next step, a bit harder since it's https
[12:13:34] <FromDiscord> <Rika> Can’t you make a dummy server to send the request to
[12:14:08] <FromDiscord> <impbox [ftsf]> yeah I guess I can! I guess the reponse doesn't matter since I just want to compare what's being sent
[12:14:12] <fn> <11ForumUpdaterBot99> New thread by Alexeypetrushin: Why other templates stop working if the T -> Option[T] converter defined?, see https://forum.nim-lang.org/t/8166
[12:14:19] <FromDiscord> <impbox [ftsf]> thanks for rubber ducking, my brain is tired today
[12:15:31] <FromDiscord> <Rika> It’s fine
[12:16:36] <FromDiscord> <Avatarfighter> o/ Rika how are you 😄
[12:16:58] <FromDiscord> <Rika> I’ve been stressed for weeks
[12:17:29] <FromDiscord> <Avatarfighter> What about ?
[12:17:50] <FromDiscord> <Rika> I’ll talk about it in #offtopic since it’s not very related
[12:18:12] <FromDiscord> <Avatarfighter> 👍
[12:23:07] <PMunch> Is there a way to see the live comments for the NimConf videos?
[12:23:36] <PMunch> Can we get coloured nicks for the FromDiscord bot as well?
[12:23:54] <PMunch> Should be a really simple copy/paste from the freenode/libera bridga
[12:27:53] <FromDiscord> <Avatarfighter> Live comments as in the chat ?
[12:28:36] <FromDiscord> <Avatarfighter> You should be able to maximize the chat box on the right by clicking on it and then changing it from "Top chat replay" -> "Live chat replay" to see what people were talking about
[12:29:38] <FromDiscord> <saem> [Araq (Andreas Rumpf)](https://matrix.to/#/@araq-560408fc0fc9f982beb1b5e2:gitter.im) I enjoyed the Zen of Nim talk, quite a bit.
[12:30:25] <FromDiscord> <hamidb80> In reply to @saem "[Araq (Andreas Rumpf)](https://matrix.to/#/@araq-56": quite a bit.?
[12:31:30] <FromDiscord> <saem> More than the typical programming talk on YouTube.
[12:31:52] <PMunch> @Avatarfighter, chat box on the right?
[12:32:54] <FromDiscord> <Avatarfighter> PMunch: there should be a little box that says "Show chat replay" on the right above the playlist of nimconf
[12:32:55] <PMunch> Ah right, I found it :)
[12:33:13] <PMunch> I mean that is some horrible UX right there
[12:33:17] <FromDiscord> <Avatarfighter> yeah it is
[12:33:26] <PMunch> Why isn't it with the other chat?! :P
[12:33:31] <FromDiscord> <Avatarfighter> right lol
[12:33:43] <FromDiscord> <Avatarfighter> make sure you switch it from "Top chat replay" to "Live chat replay"
[12:34:16] <fn> <11ForumUpdaterBot99> New thread by Lecale: Execute process without waiting for the result, see https://forum.nim-lang.org/t/8167
[12:39:50] <FromDiscord> <saem> Anyhow, bunch of interesting points. I understand they're meant to be taken together, yet the structured programming one stood out. I'm wondering if I'm currently reading between the lines but you leak towards structured concurrency approaches as well?
[12:41:03] <FromDiscord> <impbox [ftsf]> Interesting, comparing nim http request to python's requests: python doesn't lowercase the header names, sends Content-Length: 0 as the last header before the body, maybe that's significant
[12:43:39] <FromDiscord> <impbox [ftsf]>  https://media.discordapp.net/attachments/371759389889003532/858983467843584010/unknown.png
[12:44:13] <FromDiscord> <Avatarfighter> I'm really surprised you need to send Content-Length with no payload, that doesn't comply with the http spec
[12:45:30] <FromDiscord> <Avatarfighter> oh nevermind I read the spec wring
[12:45:32] <FromDiscord> <Avatarfighter> (edit) "wring" => "wrong"
[12:45:42] <FromDiscord> <Avatarfighter> I thought you had specified a Transfer-Encoding
[12:46:55] <FromDiscord> <stu002> In reply to @Rika "I always treated it": In other languages it's a kind of ad-hoc polymorphism and I found it a very natural way to think about some problem domains, e.g. abstract algebra. In that domain I can create functions that deal with (say) a Group, knowing that I'll also have the capabilities of a Monoid as every group is a Monoid (with extra capabilities).
[12:48:45] <FromDiscord> <saem> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/858979943677034531): Araq (Andreas Rumpf) I enjoyed the Zen of Nim talk quite a bit.
[12:50:07] *** Joins: max22- (~maxime@2a01cb0883359800a978a7fae6bb2f1a.ipv6.abo.wanadoo.fr)
[12:50:58] <FromDiscord> <impbox [ftsf]> ok, fixed the issue! the x-secretkey was being read from a file and included a newline which was getting included in the header text which broke up the headers
[12:51:16] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3rlF
[12:51:20] <FromDiscord> <impbox [ftsf]> so the headers after the newline didn't get read by the server
[12:53:02] <FromDiscord> <saem> That was also my hope with concepts, well a compiler time variety that wouldn't necessary play seamlessly with dynamic linking as a fair compromise, but alas they seem to be moving further away from that with the newer version. It's been a while since I really dug in.↵(@stu002)
[12:53:03] <FromDiscord> <Elegantbeef> Insert my normal "Strings were a mistake" comment here
[13:02:28] <FromDiscord> <mratsim> In reply to @haxscramper "<@!570268431522201601> at nim conf": We had someone hired part-time to work on developer toolings, including nimble but iirc they got busy and we are looking for a new person.
[13:03:54] <FromDiscord> <haxscramper> In reply to @mratsim "We had someone hired": For full-time nimble development? Also, are these points still relevant: https://gitter.im/nim-lang/Nim?at=5c990b3d2fb6800d807ca70a
[13:05:20] <FromDiscord> <mratsim> In reply to @haxscramper "For full-time nimble development?": documentation and vscode as well: https://github.com/nim-lang/RFCs/issues/300
[13:06:08] <FromDiscord> <mratsim> In reply to @haxscramper "For full-time nimble development?": maybe not, some of them still are but we can rediscuss the objectives
[13:32:13] <FromDiscord> <haxscramper> In reply to @mratsim "We had someone hired": From what I read on your job postings etc. you are mostly looking for people with rust/Cxx/Go development experience, correct? What do you think about idea of "just copy cargo for nim?"
[13:32:47] <FromDiscord> <haxscramper> Or at least a meaningful subset of features
[13:35:00] <FromDiscord> <mratsim> In reply to @haxscramper "From what I read": Would work for us I think.
[13:45:46] <FromDiscord> <Rika> What features are you guys thinking of copying
[13:47:45] <FromDiscord> <haxscramper> package features, build/development/package-specific confgurations
[13:48:10] <FromDiscord> <haxscramper> centralized with support for custom registries and fallback to git repositories
[13:49:41] <FromDiscord> <haxscramper> generali desig
[13:49:43] <FromDiscord> <haxscramper> (edit) "desig" => "design"
[13:49:48] <FromDiscord> <Clonkk> reproducible builds, lockfile, dependencies resolution, way of deploying source, binary, shared library, third parties shared libaries from the package manager
[13:50:02] <FromDiscord> <Clonkk> That would be my go-to list for package manage features
[13:50:21] <FromDiscord> <haxscramper> I'm mostly talkint about not reinventing the wheel and instead just copying cargo design decisions
[13:50:51] <FromDiscord> <haxscramper> where it makes sense
[13:52:17] <FromDiscord> <Rika> `package features`? the specific configs are nice yes
[13:52:27] <FromDiscord> <Clonkk> Rust is only based on atoml file if I'm not mistkaen ?
[13:52:31] <FromDiscord> <haxscramper> correct
[13:52:40] <FromDiscord> <haxscramper> Though they have support for build scripts
[13:52:58] <FromDiscord> <haxscramper> In nimble it is somewhat more complicated
[13:53:10] <FromDiscord> <Clonkk> Yeah because having a way to script some stuff can be useful. Maybe we could take some inspiration from Groovy as well
[13:53:14] <FromDiscord> <Rika> In reply to @SneakyBaguette "reproducible builds, lockfile, dependencies": lock file would be nice, better dep. res. is being worked on already i believe
[13:53:15] <FromDiscord> <Clonkk> Just some thoughts
[13:53:37] <FromDiscord> <Rika> im not really one to use a language's package manager to install binaries
[13:55:09] <FromDiscord> <Clonkk> If oyu have a package that wraps a library, you may end up needing to download / rebuild the third_party library usig a specific versions / compile time options. In this situations, having a scripting language in PM can really shines
[13:55:50] <FromDiscord> <ElegantBeef> Yea it does seem so, so i guess i'm here now
[13:56:25] <FromDiscord> <haxscramper> In reply to @Rika "lock file would be": no, I don't think it is
[13:56:26] <FromDiscord> <ElegantBeef> Matrix bridge dieded
[13:56:57] *** Quits: max22- (~maxime@2a01cb0883359800a978a7fae6bb2f1a.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[14:01:19] <FromDiscord> <Rika> it aint? huh
[14:02:02] <FromDiscord> <haxscramper> at one of the dev meetings araq briefly mentioned he wrote sat solver that can be used for nimble. I think
[14:02:02] <FromDiscord> <ElegantBeef> Well third party dependencies are just terrible for any automated build like you have a few options if the package doesnt exist, check the system package manger, clone the repo then build it from a script, all of which depends on the OS or even just distribution 😄
[14:02:04] <FromDiscord> <haxscramper> that's all
[14:06:10] <FromDiscord> <Clonkk> In reply to @ElegantBeef "Well third party dependencies": It's because third parties can be terrible and non-standard that you need a scripting language ^^
[14:06:46] <FromDiscord> <ElegantBeef> Are we talking about third party system libraries?
[14:06:55] <FromDiscord> <Clonkk> Not necessarily "system"
[14:07:33] <FromDiscord> <Rika> even given a scripting language its terrible is it not
[14:07:44] <FromDiscord> <ElegantBeef> Well there are so many ways to source them
[14:08:39] <FromDiscord> <ElegantBeef> Like think about just sdl2, you can fetch the .dll for windows easily, but now fetch it on linux, oh you now have to figure out what package manager the user uses then send the install for that specific one to sdl2, then if they're using an obscure one you have to clone the repo and build the project 😄
[14:09:01] <FromDiscord> <Clonkk> For example, the FFTW3 wrapper uses some specific compile options to have threads capabilities. The OS package manager do not offer a package with the options I want.↵Since I can't distribute a third_parties libraries that is specific to a Nimble package, the only solution is to ask the user to compile it themselves (which isn't robust and may break other package on their system that uses FFTW with different options)
[14:09:20] <FromDiscord> <Clonkk> So ideally, there would need to be a way to tell Nimble that X package depends on X third_parties
[14:09:35] <FromDiscord> <ElegantBeef> Sure that's doable but i dont see how you can safely manage a build of that package
[14:09:42] <FromDiscord> <Rika> its nontrivial
[14:09:48] <FromDiscord> <Clonkk> It's not trivial at all
[14:11:02] <FromDiscord> <Clonkk> But the more libraries I wrap, the more I want something like it 😄
[14:11:14] <FromDiscord> <ElegantBeef> But it's a logistical nightmare 😄
[14:12:13] <FromDiscord> <Clonkk> Realistically, having a "lib" folders where you can tell nimble to install shared libraries would be enough
[14:12:23] <FromDiscord> <Clonkk> (edit) "enough" => "~~enough~~ a start"
[14:13:07] <FromDiscord> <ElegantBeef> Wonder the licensing implications of that
[14:13:46] <FromDiscord> <ElegantBeef> I'm tired and silly
[14:15:18] <FromDiscord> <Clonkk> In reply to @ElegantBeef "Wonder the licensing implications": Licensing is complicated when you get down non-obvious case tbh
[14:16:03] <FromDiscord> <ElegantBeef> But as hax did point out most nimble packages can be resolved using simple comparison on the parsed semver versions, and i atleast had a single depth version of that in nimble, though it's a dumb impl since it doesnt do anything but the packaged deps and first level children 😄
[14:19:25] <FromDiscord> <haxscramper> I don't think it is necessary to manage external package versions from nimble
[14:19:52] <FromDiscord> <haxscramper> Whoever writes wrapper for external library can just manage versions appropriately
[14:20:19] <FromDiscord> <haxscramper> Like a lot of system packages don't follow semver
[14:21:13] <FromDiscord> <ElegantBeef> Yea it's just hell out in the real world 😄
[14:21:28] <FromDiscord> <ElegantBeef> Every versioning for itself
[14:23:43] <FromDiscord> <haxscramper> `Versions of TeX are numbered by adding additional digits of pi, because Knuth doesn't want to add new features: it's supposed to be stable and only bug-fixed, so the idea is it's approaching a limit.`
[14:23:45] <FromDiscord> <haxscramper> `> pdfTeX 3.141592653-2.6-1.40.22 (TeX Live 2021/Arch Linux)`
[14:23:55] <FromDiscord> <haxscramper> god, please no
[14:25:31] <FromDiscord> <Clonkk> In reply to @haxscramper "Whoever writes wrapper for": Yes, that's probably the most pragmatic solution
[14:57:54] <FromDiscord> <bolino> Hi there!
[14:58:02] <FromDiscord> <bolino> Hi there!
[14:58:15] <PMunch> Haha, such a troll versioning :P
[14:58:29] <PMunch> And hi @bolino
[15:02:01] <FromDiscord> <bolino> sent a long message, see http://ix.io/3rmA
[15:02:24] <FromDiscord> <bolino> (edit) "http://ix.io/3rmA" => "https://paste.rs/1RG"
[15:02:32] <FromDiscord> <bolino> (I'm pretty new to Nim, please excuse the newbieness)
[15:04:04] <PMunch> For that you need a static variable
[15:04:44] <PMunch> const colorsCorrespondance = parseJson(staticRead("data/colors.json"))
[15:04:47] <PMunch> Something like that
[15:06:02] <FromDiscord> <zetashift> If I have a string `data` how to I get the pointer from that? `data.addr` returns a `<ptr string>` but I need a `pointer` type
[15:06:58] <PMunch> cast[pointer](data[0].addr)
[15:07:39] <PMunch> data[0].addr if you want the pointer to the actual string data. data.addr if you want a pointer to the string object that contains the length, capacity, and reference to the string data
[15:07:51] <FromDiscord> <Avatarfighter> In reply to @PMunch "const colorsCorrespondance = parseJson(staticRead("": oh woah that works ?
[15:08:04] <PMunch> I think so
[15:08:04] <FromDiscord> <Rika> why wouldnt it...
[15:08:23] <FromDiscord> <Avatarfighter> well i don't know I didn't think I could read a file during compiletime 🤷‍♂️
[15:09:05] <PMunch> Oh, that part definitely works :)
[15:09:15] <PMunch> staticRead can read files during compile-time
[15:09:43] <PMunch> Hmm, but I got this error when I tried it: Error: invalid type: 'JsonNode' for const
[15:10:33] <PMunch> Ah right..
[15:11:17] <PMunch> It would work if you parsed it in a macro or something, and used it on compile-time. But you can't read the data in, and store it as pre-parsed JSON in the binary. But you could staticRead the JSON data as a string, and then parse it on runtime
[15:11:25] <FromDiscord> <bolino> thanks @PMunch , will have a look and try!
[15:13:33] <FromDiscord> <bolino> so if I understand correctly, something like:
[15:14:04] <FromDiscord> <bolino> let colorsCorrespondanceStrin: string = staticRead("data/colors.json")
[15:14:31] <FromDiscord> <bolino> (edit) "let" => "`let" | "staticRead("data/colors.json")" => "staticRead("data/colors.json")`"
[15:14:47] <FromDiscord> <bolino> (edit) "colorsCorrespondanceStrin:" => "colorsCorrespondanceString:"
[15:15:51] *** Joins: max22- (~maxime@2a01cb0883359800de426dbe800e42de.ipv6.abo.wanadoo.fr)
[15:16:40] <FromDiscord> <bolino> ...and then parsing
[15:16:59] <FromDiscord> <Rika> not let, const
[15:17:04] <FromDiscord> <bolino> const
[15:18:17] <PMunch> Could use let as well
[15:18:23] <PMunch> Might even be better
[15:19:06] <PMunch> staticRead already reads the data into your program and basically turns your code into `let colorsCorrespondanceString = "<full content of the file>"`
[15:20:03] <PMunch> `const` in Nim would make that compiled completely away (at least it used to, I think there were some optimisations about this recently). So if you used the string twice in your program it would be pasted twice, which would double the size.
[15:21:06] <PMunch> But if you're just doing `parseJson(colorsCorrespondanceString)` as the first thing in your program and never use that variable again it would be the same.
[15:22:36] <PMunch> Oh wait, you can't do let there..
[15:22:38] <PMunch> My bad :P
[15:23:56] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[15:25:09] *** Joins: xet7 (~xet7@user/xet7)
[15:25:25] <PMunch> http://ix.io/3rmO <- Something like this is what you need to do
[15:26:54] *** Joins: arkurious (~arkurious@user/arkurious)
[15:36:56] <FromDiscord> <bolino> Works like a charm! Thanks for the help
[15:38:39] <PMunch> No problem :)
[15:39:52] <FromDiscord> <bolino> One side question: would that impact the performances if the const is in the proc? SInce the scope is not the same
[15:39:59] <FromDiscord> <bolino> (edit) "SInce" => "Since"
[15:40:28] <PMunch> Shouldn't matter much
[15:41:47] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[15:42:15] <PMunch> Like this works just fine, and shouldn't matter for performance: http://ix.io/3rmU
[15:46:32] <FromDiscord> <bolino> Just wondering if it's rebuilded each time it's run
[15:46:54] <FromDiscord> <bolino> can put the const in global scope in case
[15:47:24] <FromDiscord> <bolino> Anyway it's just for my personal Nim culture!
[16:01:48] <PMunch> It will run the parsing each time it's run, just
[16:01:53] <PMunch> s/just/yes
[16:02:39] <PMunch> Not sure how I managed to mistype that :P
[16:03:56] <PMunch> You can use the global pragma though to avoid the variable being in the global scope, but still being stored and initialised once: https://nim-lang.org/docs/manual.html#pragmas-global-pragma
[16:18:49] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:00] <FromDiscord> <mvanbergen> <@&371760044473319454> <@&371760044473319454> <@&371760044473319454>
[16:19:00] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:01] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:02] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:03] <FromDiscord> <mvanbergen> <@&371760044473319454> <@&371760044473319454>
[16:19:03] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:04] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:04] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:05] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:06] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:10] <FromDiscord> <mvanbergen> <@&371760044473319454> <@&371760044473319454>
[16:19:10] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:11] <FromDiscord> <mvanbergen> <@&371760044473319454> <@&371760044473319454>
[16:19:12] <FromDiscord> <mvanbergen> <@&371760044473319454> <@&371760044473319454> v
[16:19:12] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:12] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:13] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:13] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:14] <FromDiscord> <mvanbergen> <@&371760044473319454>
[16:19:14] <FromDiscord> <mvanbergen> v
[16:31:07] <supakeen> Are you ok?
[16:31:34] <supakeen> How this looks in IRC: https://bpa.st/raw/PK2A ;)
[16:34:45] <PMunch> I think that was just a spammer..
[16:35:13] <PMunch> Those v's are probably from trying to do "Ctrl+V, Enter" as fast as possible
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:40:30] <FromDiscord> <Bung> is there any guidelines rewrite nim program to none gc version ?
[16:41:56] <FromDiscord> <konsumlamm> ~~don't~~
[16:45:59] <FromDiscord> <Bung> I haven't seen a real example that does not use gc
[16:59:38] <FromDiscord> <mratsim> In reply to @Bung "I haven't seen a": Weave and constantine don't use the GC
[17:03:06] <FromDiscord> <Bung> @mratsim Thanks! I'll take a look at Weave
[17:05:14] <fn> <11ForumUpdaterBot99> New thread by LemongrabThree: Cast Procedure to GC-Safe: expression cannot be cast to proc (){.closure, gcsafe.}, see https://forum.nim-lang.org/t/8168
[17:10:03] <FromDiscord> <dom96> In reply to @haxscramper "<@!570268431522201601> at nim conf": the lock files PR is already that
[17:11:20] <FromDiscord> <dom96> In reply to @impbox "yep, that's my next": `curl -v` is your friend here (it shows the data it sends :))
[17:15:22] <FromDiscord> <dom96> In reply to @impbox "so it looked like": this looks like a bug in Nim, please report it if you haven't already. We should either error or remove the newlines so header values can't mess up what is sent.
[17:21:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[17:21:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:28:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[17:30:56] *** Quits: max22- (~maxime@2a01cb0883359800de426dbe800e42de.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[17:31:17] *** Joins: Guest87 (~Guest87@c-73-212-207-38.hsd1.md.comcast.net)
[17:32:58] <FromDiscord> <mratsim> In reply to @Bung "<@!570268431522201601> Thanks! I'll take": Basically Weave has it's own memory pool
[17:33:06] <FromDiscord> <mratsim> (edit) "it's" => "its"
[17:33:22] <FromDiscord> <impbox [ftsf]> hmm yeah I'm not sure if it's a bug in nim, but definitely a gotcha, I'm not sure everyone would want the overhead of the checks, but it could certainly catch some user issues
[17:33:22] <FromDiscord> <mratsim> and I alloc/free manually
[17:33:40] <FromDiscord> <impbox [ftsf]> I wonder if other http libraries do newline checks for header data
[17:36:46] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:37:50] *** Joins: ss (~ss@c-73-212-207-38.hsd1.md.comcast.net)
[17:40:44] <FromDiscord> <dom96> the overhead is minimal and can be done as an assert
[17:40:48] <FromDiscord> <dom96> (edit) "and" => "but"
[17:40:59] *** Quits: Guest87 (~Guest87@c-73-212-207-38.hsd1.md.comcast.net) (Quit: Client closed)
[17:46:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[17:47:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:56:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[17:57:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:58:02] *** Joins: max22- (~maxime@2a01cb0883359800ce2a08768cca3746.ipv6.abo.wanadoo.fr)
[17:59:18] <FromDiscord> <Bung> @mratsim I see, that's more advanced topic.
[18:02:43] *** Quits: aeverr (~deodex@ai126162220090.56.access-internet.ne.jp) (Ping timeout: 246 seconds)
[18:06:10] <FromDiscord> <mratsim> In reply to @Bung "<@!570268431522201601> I see, that's": the short version is use alloc/alloc0/allocShared and dealloc/freeShared
[18:06:41] <FromDiscord> <mratsim> another one is "import system/ansi_c" and use c_malloc / c_calloc and c_free
[18:06:57] <FromDiscord> <mratsim> the short version will not use the GC but will use Nim memory allocator.
[18:07:03] <FromDiscord> <mratsim> the second is plain C
[18:13:03] *** Joins: Schnouki (~schnouki@user/schnouki)
[18:14:59] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3rnn
[18:22:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[18:22:28] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:24:27] *** Joins: aeverr (~deodex@ai126162220090.56.access-internet.ne.jp)
[18:25:06] <FromDiscord> <haxscramper> Maybe "this month in nim" should include PR/RFC highlights
[18:26:16] <FromDiscord> <haxscramper> So community could have a general idea of where the project is heading without having to dig though layers of github issues, cross-referenced RFCs and code comments
[18:27:05] <FromDiscord> <dom96> I think a milestone will already do that
[18:27:50] <FromDiscord> <haxscramper> In reply to @dom96 "I think a milestone": https://github.com/nim-lang/Nim/milestones?direction=asc&sort=count&state=open this?
[18:27:52] <FromDiscord> <konsumlamm> is it possible to make something "package-private" or something, so that it's available in other modules of the same package, but the package doesn't export it?
[18:28:00] <FromDiscord> <konsumlamm> preferably without using `include`
[18:28:00] <FromDiscord> <haxscramper> Last updated four months ago
[18:28:06] <FromDiscord> <haxscramper> For 1.4.0
[18:28:14] <FromDiscord> <dom96> In reply to @haxscramper "https://github.com/nim-lang/Nim/milestones?directio": yep, something like this
[18:28:16] <FromDiscord> <konsumlamm> ye, the milestones aren't really up to date
[18:28:48] <FromDiscord> <haxscramper> They don't have enough community engagement and they just feel like a slightly cleaned up github issues.
[18:29:12] <FromDiscord> <haxscramper> I'm talking more about concrete article, that say "we are here, working on these thingsx
[18:29:15] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 268 seconds)
[18:29:18] <FromDiscord> <haxscramper> (edit) "thingsx" => "things""
[18:29:20] <FromDiscord> <dom96> If we keep them updated and link to them from the readme I think it will work quite well
[18:29:32] <FromDiscord> <dom96> writing an article is even harder
[18:29:40] <FromDiscord> <dom96> and is even less likely to be kept up to date
[18:29:53] <FromDiscord> <dom96> but maybe we can try that too to encourage contributions
[18:30:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:30:56] <FromDiscord> <haxscramper> In reply to @dom96 "and is even less": It doesn't have to be kept up to date. Just say what happened this month. Or write about current state of most wanted features like concepts, IC, lockfiles
[18:31:24] <FromDiscord> <haxscramper> Like a release note. You write it once and then don't update because it is done
[18:33:25] <FromDiscord> <haxscramper> In reply to @haxscramper "I don't think just": Or these kind of things
[18:34:07] <FromDiscord> <haxscramper> When karax was moved to another organization @willyboar made a forum posts about that
[18:34:17] <FromDiscord> <haxscramper> I think that was them at least
[18:34:20] <FromDiscord> <Bung> Can simply add todo list section to readme or create a pined issue list all todos.
[18:34:42] <FromDiscord> <haxscramper> So what? People would just have to dig through all issues again
[18:35:02] <FromDiscord> <haxscramper> To figure out what is going on. Better not do anything then, as it is not much better.
[18:35:53] <FromDiscord> <Bung> it's much better than current state.
[18:36:26] <FromDiscord> <haxscramper> There can be dozens of comemnts on each issue and RFC that express different opinions
[18:36:51] <FromDiscord> <Bung> the current state is like "hey , I want contribute to nimble , what I can do?" , answers "none"
[18:37:05] <FromDiscord> <haxscramper> This is a different thing
[18:37:46] <FromDiscord> <haxscramper> Im not talking about making it simpler to contribute, I'm talking about illuminating current state of the project
[18:38:04] <FromDiscord> <haxscramper> These two can and should be done separately in my opinion
[18:40:00] <FromDiscord> <Bung> "dozens of comemnts" can be sumarize to one sentence, some are features like other language's package manager have. just like features: 1:xxx, 2:xxx
[18:41:14] <FromDiscord> <haxscramper> Whatever. I'm not talking about this.
[18:42:06] <FromDiscord> <haxscramper> Not exactly. Having to go through issues is just one side of the problem as I see it. Though it is not really a problem per se
[18:42:14] <FromDiscord> <haxscramper> Not a technical one
[18:42:26] *** Quits: ss (~ss@c-73-212-207-38.hsd1.md.comcast.net) (Quit: Leaving)
[18:42:34] <FromDiscord> <haxscramper> So maybe not worth the bother in the end.
[18:43:13] <FromDiscord> <willyboar> In reply to @haxscramper "When karax was moved": Not me. It was @ajusa
[18:43:44] <FromDiscord> <haxscramper> Alright, sorry for wrong ping then. But anyway, that is a good illustration of what I'm talking about
[18:43:47] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[18:44:26] <FromDiscord> <willyboar> Do you want nimble to move to a separate org?
[18:44:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[18:45:32] <FromDiscord> <haxscramper> No, as I said earlier I don't think it makes any meaningful difference.
[18:46:03] *** Gustavo6046_ is now known as Gustavo6046
[18:46:48] <FromDiscord> <Bung> it's form of contributors, but the fact is no much contributors.
[18:47:18] <FromDiscord> <haxscramper> In reply to @haxscramper "No, as I said": Don't have any concrete arguments against it though, just personal opinion
[18:47:54] <FromDiscord> <dom96> In reply to @haxscramper "It doesn't have to": well, you still need to write the monthly post 🙂
[18:49:04] <FromDiscord> <dom96> Having a milestone that says "This is what we want to get done" will already make things better IMO
[18:49:19] <FromDiscord> <dom96> Nimble to separate org too hah
[18:49:45] <FromDiscord> <willyboar> Why not both milestone and article
[18:49:55] <FromDiscord> <haxscramper> because it requires more effort
[18:50:31] <FromDiscord> <dom96> Maybe we can do quarterly updates. I doubt we'll get enough done in a month, but it depends on the community
[18:50:36] <FromDiscord> <haxscramper> And the problem with this kind of things is - only compiler developers really know what is going on, and they have more important things to do
[18:50:40] <FromDiscord> <dom96> Certainly someone from the community could write the blog post too
[18:51:16] <FromDiscord> <Bung> why not add a blog to nimble.directory ?
[18:51:31] <FromDiscord> <haxscramper> We already have nim blog on the webside
[18:51:33] <FromDiscord> <haxscramper> (edit) "webside" => "website"
[18:51:50] <FromDiscord> <dom96> yeah
[18:52:14] <FromDiscord> <willyboar> Nimble.directory is a personal project not official
[18:52:28] <FromDiscord> <dom96> that too
[18:53:23] *** Joins: rockcavera (~rc@192.12.113.196)
[18:53:23] *** Quits: rockcavera (~rc@192.12.113.196) (Changing host)
[18:53:23] *** Joins: rockcavera (~rc@user/rockcavera)
[18:53:51] <FromDiscord> <Bung> ok. maybe write a article "the bad parts of nimble" will attract people take more effort to nimble.
[18:54:00] <FromDiscord> <dom96> lol
[18:54:13] <FromDiscord> <Bung> 😆
[18:55:04] <FromDiscord> <haxscramper> In reply to @Bung "ok. maybe write a": I'm writing and RFC about that
[18:55:07] <FromDiscord> <haxscramper> now
[18:55:30] <FromDiscord> <Bung> yeah , the title should be "bold"
[18:55:44] <FromDiscord> <dom96> The title should be "A future vision for Nimble" 🙂
[18:55:47] <FromDiscord> <konsumlamm> ok, so i came to the conclusion that `include` is a horrible idea
[18:55:56] <FromDiscord> <haxscramper> I want to test/review lockfiles PR and test viability of centralized version storage
[18:56:06] <FromDiscord> <haxscramper> latter one idk how it is called exactly
[18:56:18] <FromDiscord> <willyboar> You can create a new repo - new-nimble - and call people to open issues
[18:56:18] <FromDiscord> <dom96> yeah, not sure what you mean by "centralised version storage"
[18:56:23] <FromDiscord> <haxscramper> database of requirements for all versions of all packages
[18:56:38] <FromDiscord> <haxscramper> Just quick test of how hard would it be to do this
[18:56:41] <FromDiscord> <willyboar> And add a to-do list or whatever in the readme
[18:56:55] <FromDiscord> <haxscramper> Same with #890 where I parsed all packages that existed at the time and showed some numbers
[18:57:03] <FromDiscord> <dom96> In reply to @willyboar "You can create a": We already have a repo for issues, let's not
[18:57:04] <FromDiscord> <haxscramper> that were relevant at the time
[18:57:20] <FromDiscord> <dom96> Ahh, a centralised package repo
[18:57:28] <FromDiscord> <haxscramper> In reply to @willyboar "You can create a": can we just work with what we got now? Now new issues, no new repos
[18:58:16] <FromDiscord> <dom96> We could write an RFC for just the centralised package repo concept
[18:58:25] <FromDiscord> <haxscramper> In reply to @dom96 "Ahh, a centralised package": yeah, basically I want to add a proof-of-concept implemnentation to the RFC. Not a fully implementation, just an example
[18:58:42] <FromDiscord> <haxscramper> In reply to @dom96 "We could write an": I expect my RFC to be taken apart and discussed separately at some point
[18:59:05] <FromDiscord> <haxscramper> For now I just want to have a centralized starting point for discussion
[18:59:16] <FromDiscord> <dom96> sure, I only fear that we will have too much discussion
[18:59:42] <FromDiscord> <haxscramper> there is a lot of issues to unpack, so I'm afraid that can't be really avoided
[18:59:53] <FromDiscord> <willyboar> Personally I loved to see an official package hosting similar to rubygems
[18:59:56] <FromDiscord> <haxscramper> People have accumulated a lot of requests here and there
[19:00:03] <FromDiscord> <willyboar> Semi off topic
[19:00:11] <FromDiscord> <haxscramper> this is on topic of dependency resolution
[19:00:30] <FromDiscord> <dom96> @haxscramper consider being ruthless about prioritisation
[19:00:36] <FromDiscord> <dom96> i.e. not discussing every single thing
[19:01:42] <FromDiscord> <haxscramper> Alright, do I choose to focus on dependency resolution and centralized repo or support for task-level dependencies and package features?
[19:01:46] <FromDiscord> <haxscramper> I can't decide
[19:01:49] <FromDiscord> <dom96> also love how the Nim v2 milestone was created in 2018 lol
[19:02:15] <FromDiscord> <gerwy> what does `ordinal type expected` means?
[19:02:29] <FromDiscord> <dom96> task-level deps is IMO a _relatively_ minor feature that doesn't need discussion
[19:02:38] <FromDiscord> <dom96> we already know how it should work
[19:02:46] <FromDiscord> <gerwy> i have a const that is float and i multiply it with an int (im scaling something down)↵so what should i do with it?
[19:03:41] <FromDiscord> <konsumlamm> In reply to @Life Sucks "what does `ordinal type": that it expected an ordinal type, something like an `int` or an enum
[19:03:52] <FromDiscord> <konsumlamm> In reply to @Life Sucks "i have a const": convert the int to a float
[19:04:36] <FromDiscord> <haxscramper> In reply to @dom96 "task-level deps is IMO": what about package features then?
[19:05:06] <FromDiscord> <dom96> what package features? 🙂
[19:05:12] <FromDiscord> <haxscramper> Or moving from I-need-full-compiler-to-read-manifest
[19:05:46] <FromDiscord> <haxscramper> Or long list of general usability issues
[19:06:42] <FromDiscord> <gerwy> In reply to @konsumlamm "convert the int to": Oh okay fixed the issue,  I really should know that you can't make array the size of float
[19:07:24] <FromDiscord> <haxscramper> array with a size "`0.4 of int`"
[19:07:55] <FromDiscord> <haxscramper> !eval echo sizeof(int).float()  0.4
[19:07:58] <NimBot> Compile failed: /usercode/in.nim(1, 26) Error: invalid token:  (\29)
[19:09:56] <FromDiscord> <Bung> I've create one for inspiration . https://github.com/bung87/The-bad-parts-of-nimble
[19:09:59] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[19:11:42] <FromDiscord> <haxscramper> In reply to @Bung "yeah , the title": speaking of which - I dont' want to start a flame war
[19:12:11] <FromDiscord> <Avatarfighter> Does nimble support upgrading project dependencies all at once ?
[19:12:20] <FromDiscord> <haxscramper> no, I don't think it does
[19:12:44] <FromDiscord> <Bung> it's just for attracting people.
[19:13:07] <FromDiscord> <haxscramper> I don't like attracting people with clickbaits
[19:13:20] <FromDiscord> <dom96> In reply to @haxscramper "Or moving from I-need-full-compiler-to-read-manifes": that might have sailed, I see plenty of packages doing crazy things in their metadata 🙂
[19:13:53] <FromDiscord> <haxscramper> well, my personal opinion on that one is - "can you just f-ing stop?"
[19:13:59] <FromDiscord> <haxscramper> and I need two things
[19:14:00] <FromDiscord> <haxscramper> three
[19:14:06] <FromDiscord> <haxscramper> name, version and requirements
[19:14:34] <FromDiscord> <haxscramper> you can do any number of `staticRead()` for anything else, thats your problem, but manifest must be self-contained
[19:14:55] <FromDiscord> <haxscramper> otherwise it is not possible to build any centalized package repo.
[19:15:06] <FromDiscord> <haxscramper> I've seen package whose version depends on evaluation date
[19:15:29] <FromDiscord> <haxscramper> I mean sure, yeah, but we can't account for every little insanity people have put in their `.nimble` file
[19:15:31] <FromDiscord> <dom96> it is possible
[19:15:56] <FromDiscord> <dom96> evaluate the .nimble file on publish and store the metadata statically
[19:16:12] <FromDiscord> <dom96> I would say we only want to store tagged versions anyway
[19:16:27] <PMunch> Has anyone made a generic bezier curve/spline thing in Nim?
[19:16:50] <FromDiscord> <dom96> PMunch: pretty sure Pixie supports this
[19:17:21] <PMunch> Sure, but I need to be able to give an X and get a Y out of it
[19:18:20] <PMunch> Basically I want to create something like this: https://www.theinsidetips.com/wp-content/uploads/2020/04/Curves_01.jpg
[19:18:43] <PMunch> But I need to be able to read out the colours along the line
[19:20:22] <PMunch> I guess I could use the tween algorithms in SDLGamelib
[19:26:22] <FromDiscord> <InventorMatt> PMunch: depends on how generic of a spine you want. a bit ago I started work on translating nurbspy to nim but I still have a bit to go on that
[19:49:49] <FromDiscord> <alehander42> wow 20 notifs
[19:58:36] <FromDiscord> <Bung> long time no see @alehander42
[20:00:37] <FromDiscord> <clyybber> In reply to @alehander42 "wow 20 notifs": yeah, a spammer :/
[20:01:05] <FromDiscord> <alehander42> @Bung ah hey!
[20:01:08] <FromDiscord> <Avatarfighter> o/ alehander 😄
[20:01:30] <FromDiscord> <alehander42> hey @Avatarfighter  happy to see you
[20:01:49] <FromDiscord> <alehander42> yes, 20 notifs really make you jump a bit
[20:01:51] <FromDiscord> <Avatarfighter> Me too 🙂 how have you been ?
[20:02:10] <FromDiscord> <alehander42> fine, some rest, some work 😄
[20:02:35] <FromDiscord> <Bung> sounds good
[20:02:47] <FromDiscord> <alehander42> what's new with you
[20:02:55] <FromDiscord> <alehander42> guys
[20:03:18] <FromDiscord> <Avatarfighter> Nothing too new with me, wrote a killer bot using async and I'm very happy with its scaleability
[20:03:33] <FromDiscord> <alehander42> what does it kill
[20:03:37] <FromDiscord> <alehander42> killing sounds bad!
[20:03:38] <FromDiscord> <Bung> writting a web framework and a static site generator.
[20:03:48] <FromDiscord> <Avatarfighter> scalps products :p
[20:04:10] <FromDiscord> <alehander42> @Bung ah very cool
[20:04:16] <FromDiscord> <Avatarfighter> ^
[20:04:45] <FromDiscord> <alehander42> @Avatarfighter hm, sounds unethical 😦 i am not familiar with those kinds of products enough
[20:05:56] <FromDiscord> <Avatarfighter> It is a little unethical yeah, sadly the product I want is already heavily scalped, not doing GPUs/HDDs though it's a bit of a niche market
[20:06:23] <FromDiscord> <Avatarfighter> (edit) "it's" => "the stuff I'm doing is"
[20:07:57] <FromDiscord> <alehander42> 😦 I hope there is an ethical exit of this
[20:08:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:09:36] *** Quits: PMunch (~PMunch@178.74.36.198) (Quit: leaving)
[20:10:37] <FromDiscord> <Avatarfighter> Yeah I'm only testing my software not actually buying it
[20:10:41] <FromDiscord> <Avatarfighter> it's fun
[20:14:44] <FromDiscord> <alehander42> otherwise i keep on debugging my stuff as well
[20:15:03] <FromDiscord> <alehander42> worked on some experiments, but still mostly trying to learn/todo there
[20:18:38] <FromDiscord> <alehander42> wow there was a nimconf again
[20:18:40] <FromDiscord> <alehander42> didn't know
[20:18:51] <FromDiscord> <dom96> hah, nice to see you back alehander42 🙂
[20:21:37] <FromDiscord> <clyybber> In reply to @dom96 "hah, nice to see": thank the spammer :D :D
[20:22:52] <FromDiscord> <Sabena Sema> how does nim do compile time floating point functions?
[20:23:23] <FromDiscord> <Sabena Sema> if I compile nim with msvc x86 (which uses x87 for floating point) and use `math.sin(x)` at compile time do I get the x87 results?
[20:23:29] <FromDiscord> <Sabena Sema> even when targeting some other arch
[20:23:43] <FromDiscord> <Sabena Sema> bagh I'll just test
[20:23:56] <FromDiscord> <clyybber> it uses those that were used when compiling the compiler
[20:45:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:54:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:59:49] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:16:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[21:30:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:39:51] <FromDiscord> <timotheecour> currently, both float32 and float64 are operated on using float64 ("mostly"); for simplicity's sake, but it comes with caveats
[22:40:05] <FromDiscord> <timotheecour> (edit) "currently, ... both" 03added "in VM,"
[22:55:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 265 seconds)
[23:02:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:02:58] <fn> <11ForumUpdaterBot99> New thread by Alexeypetrushin: Is there a way to build better Nim DSL for plotting?, see https://forum.nim-lang.org/t/8169
[23:07:04] *** Joins: SebastianM (~seba@user/sebastianm)
[23:24:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:31] <FromDiscord> <OffenseTeacher> Hey guys, I am trying to send a post request using Nim's httpclient while being proxy aware. There is an example here that shows how to get the os proxy url from env variables (Linux only): https://nim-lang.org/docs/httpclient.html#proxy↵Any idea how to do it for Windows ? There are no env variable that holds proxy information afaik
[23:25:00] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:29:40] <fn> <10bung99> can you use git cli ? 
[23:30:55] <fn> <10bung99> use git cii is easy solution , you can just export https_proxy=
[23:32:24] <fn> <10bung99> or you may use .nims putEnv("https_proxy",yourproxy)
[23:38:59] <FromDiscord> <arnetheduck> In reply to @haxscramper "<@!570268431522201601> at nim conf": we're sponsoring the work to bring lock files to nimble, among other things -  we're also looking to hire someone to help work with nim tooling on a more regular bases
[23:39:00] <FromDiscord> <OffenseTeacher> I don't know if the target system will have git cli installed. I think I have found a solution: read from registry:↵[HCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings]↵ProxyServer=xxx.xxx.xxx.xxx:yyyy (REG_SZ)↵ProxyEnable= (REG_DWORD)
[23:39:19] <FromDiscord> <arnetheduck> (edit) "bases" => "basis"
[23:39:23] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:39:48] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:40:13] *** Joins: Guest92 (~Guest92@sas08013.nat.sas.com)
[23:41:22] *** Quits: Guest92 (~Guest92@sas08013.nat.sas.com) (Client Quit)
[23:42:07] <FromDiscord> <arnetheduck> In reply to @haxscramper "I mean sure, yeah,": the insanity is having a non-declarative project description, sucks for making any kind of tooling
[23:46:11] <fn> <10bung99> @OffenseTeacher I dont think the httpclient looking up to registry
[23:48:04] <FromDiscord> <dom96> In reply to @arnetheduck "the insanity is having": with great power comes great responsibility 🙂
[23:48:16] <FromDiscord> <haxscramper> And great pain in the ass
[23:48:16] <FromDiscord> <OffenseTeacher> no but I can lookup the registry before using other ways
[23:48:43] <FromDiscord> <dom96> honestly though, I'm happy to revert to a declarative approach
[23:49:34] <FromDiscord> <dom96> One way we could compromise is by still allowing tasks
[23:49:53] <FromDiscord> <willyboar> @arnetheduck why don't you hire @dom96?
[23:50:09] <fn> <10bung99> haha
[23:50:16] <FromDiscord> <dom96> lol
[23:50:17] <FromDiscord> <arnetheduck> declarative formats tend to have extension points where you can plug in your non-declarative parts
[23:50:32] <FromDiscord> <arnetheduck> for one, he didn't apply 😉
[23:50:38] <FromDiscord> <haxscramper> In reply to @dom96 "honestly though, I'm happy": I think just enforcing declarative subset for some of the important metadata is fine
[23:50:46] <FromDiscord> <dom96> I've had plenty of Status recruiters trying to poach me ;P
[23:51:12] <FromDiscord> <haxscramper> So the only thing necessary IMO is that things like version = "1.2.2" didn't require code evaluation
[23:51:42] <FromDiscord> <dom96> In reply to @haxscramper "I think just enforcing": Sure, I'm all for it. But the main motivation for this feature was to enable `version` to be set from a Nim module lol
[23:51:48] <FromDiscord> <Rika> ~~only crazy people script the version number anyway~~
[23:51:59] <FromDiscord> <arnetheduck> Facebook and Status are a bit on the opposite ends of some spectra, as well, I guess
[23:52:08] <FromDiscord> <haxscramper> Using nim syntax and some simple, limited subset of a language (like boolean expressions for optional dependencies)
[23:52:43] <FromDiscord> <Rika> that would still require some rudimentary evaluation then
[23:52:55] <FromDiscord> <dom96> In reply to @arnetheduck "Facebook and Status are": In what way? I think they are actually very alike
[23:52:56] <FromDiscord> <haxscramper> Yeah, but not full compiler multi-pass
[23:53:18] <FromDiscord> <haxscramper> In reply to @dom96 "In what way? I": when defined(windows) is a reasonable thing to support and not particularly hard I think
[23:54:06] <FromDiscord> <haxscramper> (edit) 04removed "I think"
[23:54:12] <FromDiscord> <dom96> In reply to @haxscramper "when defined(windows) is a": hm, this would require some thought
[23:54:53] <FromDiscord> <Rika> it is, but i thought this was supposed to alleviate ease of parsing for tooling
[23:55:00] <FromDiscord> <haxscramper> Well, everything would require some thought, but if we only allow defined/and/or/not it would already be quite useful
[23:55:14] <FromDiscord> <haxscramper> In reply to @Rika "it is, but i": This is a tradeoff
[23:55:26] <FromDiscord> <haxscramper> I think staticRead for version is an abomination
[23:55:29] <FromDiscord> <dom96> Already leading to too much complexity IMO
[23:55:42] <FromDiscord> <dom96> once you start reimplementing certain Nim constructs you might as well go all the way
[23:55:52] <FromDiscord> <haxscramper> What is not "too much" while still supporting optional dependencies then?
[23:56:05] <FromDiscord> <dom96> anything that needs evaluation is too much
[23:56:24] <FromDiscord> <Rika> but that is needed for (custom) optional dependencies
[23:56:35] <fn> <10bung99> why not only allow static meta data 
[23:56:36] <FromDiscord> <haxscramper> Alright, so how do we get optional deps then? Or development dependency
[23:56:52] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[23:56:58] <FromDiscord> <haxscramper> In my case it would be like when defined(developmetMode)
[23:57:02] <FromDiscord> <Rika> In reply to @haxscramper "Alright, so how do": how other languages do it: offer it in a noncustom way
[23:57:07] <FromDiscord> <Rika> of course, that's not nim-like
[23:57:10] <FromDiscord> <dom96> development mode is probably better handled in the tasks
[23:57:20] <FromDiscord> <dom96> a `requires "..."` can mutate the dep list
[23:57:27] <FromDiscord> <dom96> (edit) "a `requires "..."` ... can" 03added "in a task"
[23:57:36] <FromDiscord> <dom96> task dev: ...
[23:57:40] <FromDiscord> <Rika> im just saying, you dont need evaluation for dev deps, but of course it's massively different from what we're all thinking when we think of dev deps
[23:58:09] <FromDiscord> <dom96> as for OS-specific deps, maybe we just don't support these? what's the trade off to doing this?
[23:58:24] <fn> <10bung99> you can just add a scope keyword , development, production  reserved.
[23:58:50] <FromDiscord> <haxscramper> In reply to @dom96 "as for OS-specific deps,": Every user of my software would have to figure out how to install requirements or I would have to write a post-install task
[23:58:58] <FromDiscord> <dom96> imagine Nimble getting a dependency graph: now you get different combinations of graphs per OS
[23:58:59] <FromDiscord> <haxscramper> This is an acceptable trade-off
[23:59:06] <FromDiscord> <haxscramper> So no worries here
[23:59:26] <FromDiscord> <dom96> well, I mean: you just include all the deps
[23:59:31] <FromDiscord> <dom96> even if they are windows-specific
[23:59:42] <FromDiscord> <dom96> I think you'd just end up installing some useless deps
[23:59:43] <FromDiscord> <Rika> doesnt npm handle os-specific deps
[23:59:53] <FromDiscord> <haxscramper> Even hybrid ones that would fail building on different os?
