[00:05:18] *** cacheyou- is now known as cacheyourdreams
[00:13:34] <jeaye> Here I am going the other direction. Thinking about writing a synchronous version of core.async.
[00:14:45] <jeaye> core.async really fucks with stack traces, so it could be nice to be able to switch to a sync version easily to be able to reason about things. Both with debugging and with things like flamegraphs.
[00:16:01] <jeaye> Para: Who needs green threads when you have go blocks?
[00:22:04] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[00:23:27] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 256 seconds)
[00:29:49] <sobel> am i going to keep ignoring all the increasingly lightweight thread models in favor of future-composed designs that don't need 10,000 threads to block at the same time?
[00:30:39] <sobel> seems like less blocking, rather than more efficient blocking, would be the winner here?
[00:30:53] <sobel> </dissident>
[00:31:29] <TimMc>  /me continues to add threads until he can run a Turing machine where each cell is a CPU core "marked" with a certain count of threads
[00:35:04] <Para> jeaye: mantle.sync
[00:37:21] <Para> In fact I'm going to take that name to a project of mine. Mantle, that is.
[00:38:08] <sobel> i hope Thorium is a subcomponent of Mantle :)
[00:39:54] <Para> Hmm, what is Thorium good for...
[00:40:27] <Para> "All known thorium isotopes are unstable. The most stable isotope, 232Th, has a half-life of 14.05 billion years, or about the age of the universe"
[00:40:43] <Para> Oh man can't use that then, such instability will certainly be our doom.
[00:41:44] *** Ekho- is now known as Ekho
[00:41:48] <sobel> fission, is my understanding of what it's good for
[00:42:46] <Para> ah, now I see why you mentioned it :) Learned something from Wikipedia.
[00:43:06] <Para> Gas lamps haven't really been a thing over here ever.
[00:43:28] <sobel> :) i only know about that aspect because of a story about some kid who isolated dangerous amounts of isotopes from smoke detectors, mantles, and some other sources...in his garage
[00:44:00] <Para> Atomic Boy Scout?
[00:44:25] <sobel> i think his chemistry was solid but his atomic physics was...more than askew
[00:45:06] <sobel> so he had a bunch of fairly purified stuff and he was pursuing cold fusion or something but the mess he made got detected by regular old radiation detection
[00:45:10] <sobel> been a while
[00:45:49] <Para> Cody's Lab on youtube used to have some Uranium related videos. Then he disappeared for a while and basically started posting again, all Uranium videos gone. Then after like two years he mentioned that yeah, the FBI raided his home because someone equated Uranium to terrorism and yayyyy.
[00:46:00] <sobel> d'oh.
[00:46:29] <Para> He's on some permanent watch list now, but he basically had to prove to FBI that he actually understands chemistry to be allowed to continue.
[00:46:34] <sobel> did he ostensibly have metallic uranium on his show!?
[00:47:20] <Para> here's someone's reupload of the video, it's about refining the stuff https://www.youtube.com/watch?v=wE2aP-pVLUg
[00:47:51] <Para> Thing is, his family has old mines and whatnot so he actually can literally mine for some of these things. He lives in Utah, I think?
[00:48:18] <sobel> yikes
[00:48:44] <Para> But yeah, he's not exactly a clean scientist, more of a farmer boy with university education - which he literally is and has :) So kind of entertaining but in slightly bushcraft wonky way.
[00:48:52] <Para> Nile Red is an actual chemist, his stuff is great.
[00:49:11] <sobel> i watch him on occasion
[00:49:26] <sobel> mostly i stick to astronomy and math
[00:49:53] <Frozenlock> Probably every 4-6 months, because he doesn't post videos more often. :-(
[00:50:44] <Para> He's got a Nile Red Shorts channel as well, probably as response to his main content taking so long to produce.
[00:51:09] <Frozenlock> Yeah but it's not the same thing.
[00:52:03] <Para> True, true.
[00:55:11] *** Joins: joe_colben (~joe____co@185.190.112.211)
[01:03:37] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[01:03:45] <TimMc> The uranium refining video had so many steps, and so many colors!
[01:03:50] <sobel> gah, he's recovering the uranium from his paper towels
[01:06:29] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:13d9:f7c3:c360:6946) (Ping timeout: 250 seconds)
[01:10:13] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[01:12:20] *** Quits: to-hu (~Thunderbi@p200300e9af441c00ac1896410d7ebddf.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:15:19] <TimMc> I guess the nice thing is that if you screw up and spill some, you can probably at least *find* it with the Geiger counter...
[01:16:44] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:17:04] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:21:39] <jeaye> Para: Was just gonna call it core.sync, out of sheer cleverness.
[01:23:23] <technomancy> core.blimey
[01:24:06] <selfsymmetric-mu> core.aasync
[01:24:06] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[01:24:11] <selfsymmetric-mu> Nope, yours is better.
[01:25:04] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:34:24] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:90f7:2d27:23f7:708f)
[01:36:12] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 250 seconds)
[01:36:57] <TimMc> sobel: I feel like some of his safety measures could have been better. :-/
[01:38:17] <TimMc> This is like the kind of janky stuff *I* do around the house.
[01:39:42] <v3ga1> so what are people using for routing, etc with clojurescript these days?  I remember a few years ago people would use bidi and pushy? I assume reitit is fine for routing, is pushy even needed?
[01:40:13] <TimMc> (except I'm not usually adding nitric acid to a nearly-full tube of uranium solution)
[01:40:26] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[01:40:41] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[01:43:12] <Para> v3ga1: bidi and pushy is what re-frame-template gives, reitit is an obvious one as well, beyond that I think everything else is kinda dead
[01:43:13] <sobel> his casualness about making his yellow flask overflow like that took me back
[01:43:24] <Para> sobel: yeah, that's Cody
[01:44:09] <v3ga1> Para: ok, reitit and pushy most likely.  Now to figure out what's what.
[01:44:39] *** v3ga1 is now known as v3gajerusalem
[01:48:54] *** Joins: lagash (lagash@lagash.shelltalk.net)
[02:03:55] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Remote host closed the connection)
[02:08:42] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[02:10:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[02:16:15] *** Joins: mrmr (~mrmr@user/mrmr)
[02:34:50] *** Joins: joe_colben (~joe____co@185.190.112.211)
[02:37:06] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[02:42:49] <jeaye> I use reitit on the back-end. Never used it on the front-end, but I really like how it's data all the way down.
[02:42:52] <jeaye> Same with malli.
[02:45:15] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:45:20] <jeaye> reitit's docs are pretty terrible though.
[02:54:45] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[03:00:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[03:11:37] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:90f7:2d27:23f7:708f) (Ping timeout: 240 seconds)
[03:18:13] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[04:24:26] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:56:14] *** Joins: matty_ma1 (~matt@185.226.144.22)
[05:11:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:16:32] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[05:25:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:56:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[06:00:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[06:08:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:12:40] *** Quits: matty_ma1 (~matt@185.226.144.22) (Ping timeout: 256 seconds)
[06:16:54] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[06:17:57] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[06:21:18] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[06:26:29] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[06:28:34] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[06:30:08] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (Client Quit)
[06:31:11] *** Joins: bailon (~gizzard@saturn.whatbox.ca)
[06:35:37] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 250 seconds)
[06:56:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:57:43] *** Joins: matty_ma1 (~matt@185.226.144.20)
[06:58:16] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (Ping timeout: 245 seconds)
[07:00:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:02:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:06:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:10:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:42:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247)
[07:55:21] *** Joins: mbuf (~Shakthi@122.174.222.201)
[08:24:24] *** Quits: matty_ma1 (~matt@185.226.144.20) (Ping timeout: 250 seconds)
[08:37:58] *** Joins: puchka (~marius@196.240.128.5)
[09:23:03] *** Joins: matty_ma1 (~matt@185.226.144.21)
[09:27:27] *** Quits: matty_ma1 (~matt@185.226.144.21) (Ping timeout: 256 seconds)
[09:28:32] *** Joins: malaclyps (~mala@user/malaclyps)
[09:28:35] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[09:41:12] *** Joins: struchu (~struchu@staticline-31-183-182-17.toya.net.pl)
[10:11:57] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:18:12] <Solid> This seems pretty stupid to ask but...  How do people refactor Clojure code?  In Haskell I would just make a change to some core type and then chase GHC until it's happy again---that obviously doesn't work here
[10:18:58] *** Joins: matty_ma1 (~matt@185.226.144.22)
[10:19:04] <opqdonut> the traditional way: write suitable tests, make sure they pass while refactoring
[10:19:10] <opqdonut> commit small steps
[10:23:42] *** Quits: matty_ma1 (~matt@185.226.144.22) (Ping timeout: 256 seconds)
[10:25:00] *** Joins: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw)
[10:37:07] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[10:37:22] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[10:37:55] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[10:38:51] *** Joins: justIrresolute (~justache@user/justache)
[10:48:08] *** Quits: shiranaihito (~textual@61-64-209-28-adsl-tpe.dynamic.so-net.net.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:02:22] *** Joins: shiranaihito (~textual@2001-b011-400b-b32c-1465-83e6-7550-fd0d.dynamic-ip6.hinet.net)
[11:07:04] <jeaye> Solid: Yep, tests. Combine that with spec or malli for run-time data contracts.
[11:07:27] <jeaye> That way you can know your functionality still works and data is the correct shape everywhere it needs to be.
[11:07:38] <jeaye> spec and malli instrumentation help a lot there.
[11:07:49] <jeaye> Bonus: you'll have tests
[11:14:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:15:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:21:38] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[11:24:40] *** Quits: puchka (~marius@196.240.128.5) (Ping timeout: 250 seconds)
[11:26:28] *** Joins: puchka (~marius@196.240.128.5)
[11:28:01] <Solid> Oh that looks interesting!  Though, both of these things basically look like "just add (refinement) typing to Clojure in an ad-hoc way" to me which...  At what point does it become easier to start out with a language that facilitates this kind of thing from the start?
[11:46:27] <wink> you will never persuade people who don't think "if it compiles, it works", so I guess there's no way out of it
[11:46:31] <jeaye> Solid: spec and malli are not about types. They're about data contracts. The two are similar, but not the same. For example, when you read some data from some external source, how do you know if it's the shape you want? Static typing isn't going to check that.
[11:46:36] <wink> I am always surprised why Haskell people are like that :D
[11:47:40] <Solid> wink: I really am trying---Clojure has been a lot of fun for me so please don't take these questions as some sort of "haha Haskell is much better" commentary; it's genuine interest
[11:48:21] <jeaye> Solid: run-time contracts can be much more robust than types, since they usually employ some actual Clojure code in the form of predicates. So you can achieve more than just "is this an int?", but instead, "is this an int within this range?" or "is this a map with specifically these keys?, but also this other thing when this other key is present?"
[11:48:27] <wink> Solid: no worries. I am just honestly surprised because I simply don't think type checks are enough, cf C++
[11:49:10] <jeaye> Solid: Dependent types can help achieve something like that, in some esoteric languages, but it's nothing as robust as predicates in the language itself. So, again, it's another vector on which run-time contracts and types differ.
[11:51:08] <jeaye> Solid: Clojure focuses on data. Philosophically, Clojure's approach to designing applications is just a bunch of data transformations. All of the core Clojure data transformation tools don't care much about the specific type; they just care about the general shape or behavior. This fits very well into why Clojure would prefer run-time contracts, which themselves employ rich data transformations,
[11:51:10] <jeaye> over static types.
[11:51:19] <Solid> jeaye: dependent types are quite strong, but something weaker like refinement types would also work, at least as far as I understood spec (perhaps I shouldn't have put this into parens).  It's true that this is still not a part of many languages, but it does exist (e.g. something called "Liquid Haskell" achieves this by essentially running an SMT solver at compile time :)
[11:51:22] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:52:28] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[11:52:36] *** Quits: shiranaihito (~textual@2001-b011-400b-b32c-1465-83e6-7550-fd0d.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:53:04] <jeaye> Clojure's focus on data is so prevelant that even the way that we describe the run-time contracts is using data (especially with malli).
[11:54:00] <jeaye> A contract is just a vector with some keywords and other vectors in it. [:map [:foo :int] [:bar :string]]
[11:54:23] <jeaye> Or [:and :int [:fn even?]]
[11:55:02] <jeaye> Very much fits into the whole homoiconicity motif. ;)
[11:56:18] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:56:29] <Solid> I'm not so sold about the "reading data from an external source" argument; you can't really process what you don't know and so you would need to make _some_ a priori assumptions about the data, which would then lend themselves to being formalised in some kind of type system (e.g. when you only care about a subset of the JSON that you get you can really only talk about these parts at the type
[11:56:30] <Solid> level)
[11:57:00] <Solid> But in general I think you're right that Clojure's design perhaps lends itself more towards this kind or runtime verification
[11:57:40] <Solid> I will definitely play around with these concepts more---perhaps it'll click at some point.  Definitely a big thanks for the explanation!
[12:06:15] *** Joins: shiranaihito (~textual@111-249-135-227.dynamic-ip.hinet.net)
[12:12:48] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:13:05] *** Quits: puchka (~marius@196.240.128.5) (Ping timeout: 256 seconds)
[12:13:53] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:19:54] *** Joins: puchka (~marius@196.240.128.5)
[12:21:00] *** Quits: joe_colben (~joe____co@185.190.112.211) (Ping timeout: 250 seconds)
[12:22:44] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[12:23:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[12:24:25] *** Quits: puchka (~marius@196.240.128.5) (Ping timeout: 256 seconds)
[12:25:21] *** Joins: puchka (~marius@165.73.242.61)
[12:34:27] *** Quits: puchka (~marius@165.73.242.61) (Ping timeout: 256 seconds)
[12:38:41] *** Joins: joe_colben (~joe____co@185.190.112.211)
[12:46:08] *** Joins: puchka (~marius@165.73.242.14)
[12:49:29] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Quit: WeeChat 3.3)
[12:50:53] *** Quits: puchka (~marius@165.73.242.14) (Ping timeout: 256 seconds)
[12:51:54] *** Joins: puchka (~marius@165.73.242.13)
[12:59:20] *** Joins: unyu (~pyon@user/pyon)
[13:00:54] *** Quits: shiranaihito (~textual@111-249-135-227.dynamic-ip.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:14:49] *** Joins: schmudde (~schmudde@2001:b07:ae6:7d19:dcd2:7d9d:ae3:e548)
[13:16:26] *** Joins: shiranaihito (~textual@2001-b011-400b-b32c-1465-83e6-7550-fd0d.dynamic-ip6.hinet.net)
[13:40:06] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:54:29] *** Quits: shiranaihito (~textual@2001-b011-400b-b32c-1465-83e6-7550-fd0d.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:20:31] *** Joins: matty_ma1 (~matt@185.226.144.20)
[14:23:29] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[14:23:49] *** Joins: joe_colben (~joe____co@185.190.112.211)
[14:24:56] *** Quits: matty_ma1 (~matt@185.226.144.20) (Ping timeout: 250 seconds)
[14:31:26] *** Quits: puchka (~marius@165.73.242.13) (Ping timeout: 250 seconds)
[14:41:36] *** Joins: puchka (~marius@165.73.242.13)
[14:46:57] *** Joins: schmudde1 (~schmudde@2001:b07:ae6:7d19:38b:bae1:5dc8:519b)
[14:49:38] *** Quits: schmudde (~schmudde@2001:b07:ae6:7d19:dcd2:7d9d:ae3:e548) (Ping timeout: 250 seconds)
[16:02:25] *** Joins: shem_ (~shem@saltus.discendum.com)
[16:03:10] *** Quits: shem_ (~shem@saltus.discendum.com) (Remote host closed the connection)
[16:03:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[16:06:49] *** Joins: paul_j (~user@67.26.169.217.in-addr.arpa)
[16:10:57] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:11:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[16:14:00] *** Joins: shiranaihito (~textual@2001-b011-4000-3a1a-e135-61fe-a98c-a9dd.dynamic-ip6.hinet.net)
[16:15:38] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[16:27:02] *** Joins: Guest17 (~Guest17@200.168.210.66)
[16:29:03] *** Quits: Duke- (~duke@198.20.115.180) (Ping timeout: 256 seconds)
[16:30:27] *** Joins: matty_ma1 (~matt@185.226.144.20)
[16:32:07] *** Quits: Guest17 (~Guest17@200.168.210.66) (Quit: Client closed)
[16:41:18] *** Joins: duke- (~duke@198.20.115.180)
[16:57:02] *** Quits: duke- (~duke@198.20.115.180) (Ping timeout: 250 seconds)
[16:58:17] *** Joins: duke- (~duke@198.20.115.180)
[16:59:29] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[17:13:16] *** Quits: schmudde1 (~schmudde@2001:b07:ae6:7d19:38b:bae1:5dc8:519b) (Ping timeout: 245 seconds)
[17:14:46] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[17:16:58] *** Quits: shiranaihito (~textual@2001-b011-4000-3a1a-e135-61fe-a98c-a9dd.dynamic-ip6.hinet.net) (Ping timeout: 250 seconds)
[17:32:45] *** Quits: struchu (~struchu@staticline-31-183-182-17.toya.net.pl) (Quit: WeeChat 3.3)
[17:33:39] *** Quits: matty_ma1 (~matt@185.226.144.20) (Ping timeout: 256 seconds)
[17:54:56] *** Joins: matty_ma1 (~matt@185.226.144.22)
[18:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[18:36:39] *** Joins: schmudde1 (~schmudde@2001:b07:ae6:7d19:97c9:62d:5015:ff73)
[18:38:13] *** Quits: puchka (~marius@165.73.242.13) (Quit: leaving)
[18:54:04] <TimMc> wink: I ended up primarily switching from Clojure (after about 10 years!) to Kotlin because I really missed types.
[18:54:28] <TimMc> It's definitely a tradeoff, though. I miss the REPL. :-(
[18:57:31] <ToxicFrog> I'm still holding out hope that core.typed will be useful someday
[19:07:01] <aphyr> same
[19:08:09] *** Joins: matty_ma2 (~matt@185.226.144.21)
[19:08:20] *** Quits: matty_ma1 (~matt@185.226.144.22) (Ping timeout: 250 seconds)
[19:09:20] <ToxicFrog> in the meantime I use schema
[19:09:57] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[19:14:31] *** Quits: matty_ma2 (~matt@185.226.144.21) (Ping timeout: 256 seconds)
[19:20:56] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[19:24:48] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[19:29:03] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[19:48:16] *** Joins: seschwar (~seschwar@user/seschwar)
[19:48:56] *** Quits: mbuf (~Shakthi@122.174.222.201) (Quit: Leaving)
[19:49:39] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:51:31] <aphyr> https://github.com/metosin/malli looks nice too--been meaning to try it out
[20:01:09] <TimMc> I think I noped out just as schema was starting to come into use. It's possible that I would have liked it.
[20:01:24] <TimMc> I'll have to give it a shot at some point.
[20:06:35] <aphyr> I used Schema in Maelstrom and it worked pretty nicely. https://github.com/jepsen-io/maelstrom/blob/main/src/maelstrom/workload/lin_kv.clj#L47-L55
[20:07:05] <aphyr> THat gets used to do validation, to generate friendly error messages when users send in non-conformant data, and also for automatic doc generation
[20:07:43] <aphyr> (e.g. https://github.com/jepsen-io/maelstrom/blob/main/doc/workloads.md#rpc-cas)
[20:19:23] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[20:19:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:21:14] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[20:22:21] *** Joins: jespada (~jespada@87.74.36.188)
[20:22:41] <technomancy> schema uses vars instead of spec's shadow namespace-land, right?
[20:23:57] <aphyr> Not even that--it's very much just "here's a spec, validate whatever you want"
[20:24:09] <aphyr> var system doesn't really come into it at all
[20:24:37] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[20:24:40] <aphyr> and it lets you have contradictory meanings for identical keywords, which is REALLY nice when you're dealing with two kinds of maps like {:id "foo"} and {:id 3}
[20:25:00] <aphyr> the spec insistence on A Keyword Has Exactly One Meaning Per Namespace is... frustrating
[20:25:30] <goodger> shadow namespace-land XD
[20:26:02] <goodger> I, uh, never got the idea of the whole ‘registration’ thing in spec
[20:27:27] <technomancy> huh, so it doesn't make you use vars, but since it uses first-class data unlike spec most people end up putting them in vars?
[20:27:46] <technomancy> goodger: it's the worst thing about spec by far
[20:28:20] <technomancy> it's like ... you know how coming from elisp/cl it's super great that clojure is a lisp-1 and you don't have to think about multiple namespaces? spec breaks that consistency.
[20:33:20] <aphyr> technomancy: (def Person {:id (s/int)}), yeah, that works fine
[20:33:37] <technomancy> love me some first-class data
[20:34:08] <aphyr> But yeah, exactly--the fact that it was Just Data meant instead of vars I could do my own registry for spec stuff and use it to generate docs etc
[20:38:48] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[20:42:35] <TimMc> ...sorry, I meant spec, not schema.
[20:42:39] <ToxicFrog> technomancy: yeah, schemas are first-class data (usually some shape of map); there's a convenience macro (defschema) which is just def + some extra metadata but there's no requirement that you use it, or store it in vars at all.
[20:42:53] <ToxicFrog> I do tend to store them in vars myself, though.
[20:45:04] <technomancy> I've made brief contributions to schema-using codebases but I've only used spec nontrivially
[20:52:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[20:53:59] *** Joins: matty_matt (~matt@129.222.239.110)
[20:58:04] *** Joins: puchka (~marius@165.73.240.45)
[21:00:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[21:11:46] *** Joins: matty_matt (~matt@129.222.239.110)
[21:13:57] *** Quits: puchka (~marius@165.73.240.45) (Ping timeout: 240 seconds)
[21:16:02] *** Joins: puchka (~marius@165.73.240.44)
[21:25:35] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:39] *** Quits: henry40408 (~henry4040@175.181.155.165) (Remote host closed the connection)
[21:30:48] *** Joins: ns12 (~ns12@user/ns12)
[21:31:05] *** Joins: henry40408 (~henry4040@175.181.155.165)
[21:37:19] *** Quits: puchka (~marius@165.73.240.44) (Ping timeout: 256 seconds)
[21:37:34] *** Joins: puchka (~marius@165.73.240.44)
[21:47:05] *** Joins: matty_matt (~matt@129.222.239.110)
[21:51:42] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[21:57:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[22:17:42] *** Joins: matty_matt (~matt@129.222.239.110)
[22:24:03] *** Quits: puchka (~marius@165.73.240.44) (Quit: leaving)
[22:28:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:48:01] *** Joins: joe_colben (~joe____co@185.190.112.211)
[23:01:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[23:04:48] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:07:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:08:32] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[23:14:37] *** Joins: matty_ma2 (~matt@185.226.144.22)
[23:17:47] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:18:57] *** Joins: matty_matt (~matt@129.222.239.110)
[23:28:40] *** Quits: Frozenlock (~user@modemcable251.64-203-24.mc.videotron.ca) (Remote host closed the connection)
[23:32:40] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 250 seconds)
[23:33:02] *** Joins: matty_matt (~matt@129.222.239.110)
[23:38:35] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:38:59] *** Joins: matty_matt (~matt@129.222.239.110)
[23:50:39] *** Quits: matty_ma2 (~matt@185.226.144.22) (Ping timeout: 256 seconds)
[23:52:12] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[23:53:17] *** Joins: matty_ma2 (~matt@185.226.144.20)
[23:54:21] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
