[00:00:16] *** Quits: friend (friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 250 seconds)
[00:01:14] <wroathe> Yeah, that's always a consideration. If you deploy your translations to the same web server that's serving your javascript though it becomes less of a concern.
[00:01:46] <wroathe> (becuase if HTTP requests for that content are failing your HTML and JS requests are probably also failing, in which case you've got a wholesale catastrophe on your hands)
[00:01:46] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:05:03] <DPA> The element (matrix) app I've opened in another tab sometimes fails to load translations after starting. Or rather, the browser has cached the page from the last session, so doesn't really reload it, thus not triggering loading the translations...
[00:06:53] <DPA> JS history states are awfull...
[00:07:10] <wroathe> Well, there can be a few causes for that. Just because a browser has cached a page doesn't mean it shouldn't still be executing the javascript on that page and fetching any translations
[00:15:04] <k4rt0ff3lch33t4h> This pattern when the full text is included: $t('Subscribe to our newsletter for all of the latest tips and tricks by clicking the link below');
[00:15:20] <k4rt0ff3lch33t4h> can it make any difference between the same content on different pages?
[00:15:24] <k4rt0ff3lch33t4h> i assume no?
[00:15:48] <k4rt0ff3lch33t4h> or is there any other mechanism to separate those contents?
[00:17:22] <k4rt0ff3lch33t4h> if no then that seems to me as another shortfall compared to ID based translations/formats
[00:17:46] <wroathe> k4rt0ff3lch33t4h: That's another consideration
[00:18:10] <GreenJello> you would probably deduplicate that with a component or constant
[00:18:15] <wroathe> k4rt0ff3lch33t4h: Unless you're translation framework somehow supports linking identical occurrences during the extraction phase they'll become independent keys
[00:18:40] <wroathe> That too
[00:18:49] <wroathe> GreenJello: Where do you stand on this?
[00:18:54] <DPA> I don't know about the js $t() stuff, but in C, gettext has contexts for that: https://www.gnu.org/software/gettext/manual/html_node/Contexts.html
[00:19:09] <GreenJello> undecided, largely due to lack of relevant experience
[00:20:14] <wroathe> DPA: I just did a quick skim of the overview in that manual after you mentioned it, and it looks like their merge tool marks newly unused translations as obsolete for the translators, which takes care of one of my concerns. I'll have to read up on whether format.js supports that or not.
[00:20:15] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[00:20:55] <wroathe> I just can't shake the feeling that keeping content stored in the components is a net negative, even if there's automated tooling to extract it
[00:20:57] <velix> k4rt0ff3lch33t4h: you seem German?
[00:21:11] <wroathe> Can't tell if insult or what
[00:21:14] <wroathe> :P
[00:21:52] <k4rt0ff3lch33t4h> velix: good guess. but I'm just a kartoffel. sorry. i'm not german.
[00:22:14] <velix> k4rt0ff3lch33t4h: I'm Half-Turk. I guess the Turk guys eat more potatoes than the German ;)
[00:23:35] <k4rt0ff3lch33t4h> :)
[00:24:44] <velix> I remember in a village in Turkey, 4 men peeling hundrets of potatoes to mix them into bread.
[00:25:07] <velix> Potatoe in bread is veeery good. Our german bread industry forgot about it :-(
[00:25:16] <k4rt0ff3lch33t4h> wroathe I would also consider that it's probably easier to port ID based translations to other translators.
[00:25:37] <k4rt0ff3lch33t4h> or even mix translation soruces.
[00:25:44] <wroathe> k4rt0ff3lch33t4h: Potentially.
[00:26:56] <wroathe> velix: It depends on what you mean by potatoe bread, but my ancestors have been consuming potato bread for generations. Lefse is the bomb.
[00:27:44] <velix> Sure, potato bread is fine. But even mixing some potatoe in the bread makes it better for the stomach and ... what's below? Sorry, I'm not native :)
[00:28:10] <velix> Sorry for offtopic :D
[00:29:28] <k4rt0ff3lch33t4h> also you lose the ability generate code like this at runtime $t(`terms.${isAccepted}`)
[00:30:29] <notchris> I'm hitting an api and getting back a string where the apostrophe is getting encoded somehow
[00:30:31] <wroathe> k4rt0ff3lch33t4h: Indeed. I'm sure there are considerations I'm missing, but so far I'm leaning towards thinking I was right :P
[00:30:36] <notchris> For example: brand&#8217;s
[00:30:40] <notchris> How can i parse that string
[00:32:43] <GreenJello> notchris, that's html entities encoding
[00:33:50] <wroathe> notchris: I'd probably use something like https://www.npmjs.com/package/html-entities
[00:34:13] <k4rt0ff3lch33t4h> it's also worth considering the inclusion of formatted text in the script like: { message: $t('kitten.baby') }.
[00:34:46] <wroathe> k4rt0ff3lch33t4h: Well, there would be no difference between IDs and text keys in that circumstance
[00:34:51] <notchris> Thank you GreenJello
[00:34:53] <notchris> and wroathe
[00:36:55] <k4rt0ff3lch33t4h> sorry then i probably missread something. i though that you should include the default texts liek this { message: $t('Small furry creature.') }
[00:37:30] <merpnderp> holy crap. So we've been working on this internal ERP in Vue + Node half off the books for a month. Finally got it to a point to show upper management. We didn't know if they'd be excited about getting to save millions on an ERP or fire us for doing unsanctioned work.
[00:37:33] *** Joins: silly_ (~silly@user/silly)
[00:37:36] <merpnderp> They were over joyed.
[00:37:37] <k4rt0ff3lch33t4h> ~
[00:37:41] <merpnderp> Told us to drop everything and work on it.
[00:37:53] <merpnderp> I get to do JS full time now!!!!
[00:38:08] <merpnderp> So frick'n pumped.
[00:39:08] <GreenJello> cool :-)
[00:39:48] <k4rt0ff3lch33t4h> ~
[00:40:42] <merpnderp> That ERP was going to cost half what our hospital cost. I knew they'd be excited, but they would not authorize any experimentation and didn't think we could get it done. So we got the framework done, and a few of the smaller apps. And now we get to work on fun stuff full time. Cloud 9.
[00:41:00] *** Quits: silly (~silly@user/silly) (Read error: Connection reset by peer)
[00:42:36] *** Joins: sillyslux__ (~silly@user/silly)
[00:45:07] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[00:46:09] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 252 seconds)
[00:47:29] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[00:47:59] *** Quits: slaughter (~s@75-172-41-172.tukw.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:48:29] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[00:50:00] *** Quits: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de) (Ping timeout: 252 seconds)
[00:50:51] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[00:51:35] *** Quits: onizu (uid373383@id-373383.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[00:52:30] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (Ping timeout: 264 seconds)
[00:57:04] *** Quits: FabioP (~fabio@151.31.93.232) (Read error: Connection reset by peer)
[00:57:49] *** Quits: k4rt0ff3lch33t4h (~k4rt0ff3l@178-164-189-247.pool.digikabel.hu) (Quit: leaving)
[00:58:26] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[01:02:42] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[01:03:10] *** Joins: silly_ (~silly@user/silly)
[01:04:29] <hmw[at]> What is the benefit of using a DocumentFragment over creating a const new_list (<UL>(, appending items and afterwards appending it to the DOM? I reckon, in this case, it should be equivalent?
[01:04:33] *** Joins: lmat (~lawsa@c-68-58-60-231.hsd1.in.comcast.net)
[01:05:22] <lmat> I am running a node script that imports a function from another script of mine. In order to have `import' in my script, I need to add "type":"module" to package.json.
[01:05:36] <lmat> That is done. Now my error is in the script I'm including "Cannot use import statement outside a module".
[01:06:06] *** Joins: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net)
[01:06:06] *** Quits: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net) (Changing host)
[01:06:06] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[01:06:09] <lmat> So I think the entrypoint script is being loaded as an ES6 "module", but the script IT'S importing is not being imported as an ES6 "module". How do I fix this?
[01:06:34] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 250 seconds)
[01:06:36] <hmw[at]> lmat: That error claims the importing script itself being not a module
[01:06:40] <lmat> Basically, I need to convert   import {whatever} from '../src/myfile.js';  to <script type="module" src="../src/myfile.js" /> or something like that.
[01:06:54] <hmw[at]> lmat: try something like const { ChatServer } = require( './chat_server.js' );
[01:06:59] <lmat> hmw[at]: That makes sense.
[01:07:22] <GreenJello> hmw[at], you could create a document fragment and then pass it to some other code that appends things to it, or have multiple top level elements that you later append (iirc)
[01:07:41] *** Joins: sillyslux__ (~silly@user/silly)
[01:07:54] <hmw[at]> Multiple top level elements seems to be a significant thing here. Thanks! GreenJello
[01:08:10] <lmat> hmw[at]: How do I get my script imported as a module?
[01:08:14] *** Joins: jazzy (~jaziz@2600:380:874b:26da:54d2:cacb:af5c:6b6c)
[01:08:59] <hmw[at]> lmat: I don't know node well enough to give a good answer. I only checked the one program I made with it, because I remembered, that I could not use import in node. Your main script should already be a module, I think. That error message is confusing to me.
[01:09:33] <GreenJello> lmat, type:module isn't great. I'd recommend using the .mjs file extension, which node always interprets as ESM
[01:09:42] <hmw[at]> uh
[01:09:55] <hmw[at]> I am using .js extensions and don't have that problem!?
[01:10:02] <lmat> GreenJello: I tried the .mjs business which goes well enough, but the script I'm importing needs to end in .js.
[01:10:41] <GreenJello> hmw[at], I think they're importing from a directory outside their package
[01:11:07] <lmat> GreenJello: Yes, they are!
[01:11:10] <hmw[at]> So my main program isn't a module to begin with?
[01:11:18] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 258 seconds)
[01:12:19] <lmat> hmw[at]: Dunno! Depends :-D Maybe "type":"module" is working for you?
[01:12:28] <hmw[at]> I am not using that
[01:12:53] <lmat> I've basically been looking for quite a while for `node --import-everything-as-a-module src/my_prog.js;'
[01:15:49] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[01:16:00] <hmw[at]> lmat: This is, what I came up with a year ago: https://paste.debian.net/1200447/ - note the main entry is bogus, chat_server.js no longer exists, but it runs all fine still
[01:16:19] <hmw[at]> lmat: beware, I don't know node, so this might contain mistakes. Add a few grains of salt.
[01:16:36] *** Quits: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be) (Quit: Lost the game...)
[01:16:58] *** Joins: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de)
[01:18:00] <hmw[at]> chat_server.js contains:  module.exports.ChatServer = function (new_web_socket) {
[01:18:26] <hmw[at]> lmat: ^
[01:19:03] <lmat> hmw[at]: This is not module code.
[01:19:26] <hmw[at]> You may well know more about it than I do. I don't understand why it isn't.
[01:19:33] <lmat> hmw[at]: ES6 modules would say   import os from 'os'; etc.
[01:19:55] <hmw[at]> I see
[01:20:17] <hmw[at]> That module.exports thing made me think it was a module tho
[01:20:17] <lmat> hmw[at]: And instead of module.exports.ChatServer = ...  export default function (new_web_socket) { ...
[01:20:30] <lmat> hmw[at]: Yup, tricky :-D That's the old-style module hack.
[01:21:14] <hmw[at]> I don't export a default function tho, just handing out that Server function
[01:21:49] <lmat> GreenJello: I added a script that changes all my files to `.mjs' but that fails because they import EACH OTHER. So I would have to ... use sed to rewrite the imports!?!? :'(
[01:22:02] * lmat gets a pint of ice cream and sits in the corner
[01:22:27] *** Quits: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de) (Ping timeout: 252 seconds)
[01:22:29] <hmw[at]> I'll watch you SEDate your code :)
[01:24:08] <lmat> haha!
[01:25:01] <lmat> hmw[at]: You know what's crazy.... this was working fine FROM node:16-alpine3.13  but I couldn't create a webgl context.
[01:25:23] <lmat> hmw[at]: I switched ti  FROM node16  (which is ubuntu-based) and it doesn't work anymore.
[01:26:26] <hmw[at]> I don't like to rely on code of other people. Things are changing far too quickly. We lost all stability
[01:26:33] *** Joins: silly_ (~silly@user/silly)
[01:27:04] <lmat> no kidding
[01:27:06] <hmw[at]> Nowadays the number of repos you can maintain is mostly limited by how many hours you can put in to keep things running :(
[01:27:28] <hmw[at]> I rather stick to C
[01:27:34] <hmw[at]> bad enough
[01:27:43] <gry> are you in the ##C channel here
[01:28:01] <gry> i mean #C
[01:28:17] <hmw[at]> no, I haven't done real work with C in the last 2 years. I was experimenting with JS, trying all the fancy HTML5 APIs
[01:29:44] <lmat> hmw[at]: Yeah, maintenance cost is for real. I use C++. I rarely need any packages besides standard library. Sometimes like ONE library for whatever it is I'm doing (PNG processing, matrix manipulation, etc.). None of this "1685 packages updated" business!!
[01:29:57] *** Parts: gry (~quassel@botters/gry) (gone)
[01:30:05] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 258 seconds)
[01:31:05] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[01:32:06] *** Joins: sillyslux__ (~silly@user/silly)
[01:33:04] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[01:33:24] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[01:34:08] <velix> Anyone from Germany in here? I have formulated a job description text and would like to test whether it is "appealing".
[01:34:36] *** Joins: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de)
[01:35:39] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 252 seconds)
[01:37:43] *** Joins: silly_ (~silly@user/silly)
[01:39:32] <lmat> GreenJello: hmw[at]: I think I figured it out. The other scripts that I'm importing "have" their own package.json. Apparently node reads the foreign package.json before importing. (!!!!11???!?) I needed to add "type":"module" to that foreign package.json. (!!?)
[01:39:44] * lmat assumes the fetal position, rocks back and forth, sucks thumb, plays with hair.
[01:39:56] *** Quits: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de) (Ping timeout: 250 seconds)
[01:39:59] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[01:41:39] <hmw[at]> lmat: That error message seems to be bogus then
[01:41:43] *** Quits: sillyslux__ (~silly@user/silly) (Ping timeout: 264 seconds)
[01:42:14] * lmat sigh
[01:42:55] <hmw[at]> weird opinions in #c
[01:43:08] *** Joins: entuland_ (~entuland@user/entuland)
[01:43:24] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 250 seconds)
[01:44:23] <lmat> hmw[at]: Just joined #c. :popcorn:
[01:46:12] <FightingFalcon> Can anyone debug my site in android?
[01:50:36] *** Quits: Deide (~Deide@user/deide) (Read error: Connection reset by peer)
[01:50:56] *** Joins: Deide (~Deide@217.155.19.23)
[01:50:56] *** Quits: Deide (~Deide@217.155.19.23) (Changing host)
[01:50:56] *** Joins: Deide (~Deide@user/deide)
[01:52:28] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[01:53:24] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:54:19] <wroathe> hmw[at]: You literally joined the channel and started telling people how they should live their lives without any context at all for the conversation. Don't be surprised if people react negatively to that.
[01:55:05] <hmw[at]> Oh, I didn't see any negativity, my fault. I didn't mean to be annoying, apologies!
[01:55:09] <hmw[at]> wroathe: ^
[01:55:42] <wroathe> All good
[01:56:07] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[01:57:59] *** Joins: daoumilseitek_ (~daoumilse@164.96.146.77.rev.sfr.net)
[01:58:44] <FightingFalcon> wroathe?
[01:59:01] <wroathe> FightingFalcon: What?
[01:59:25] <wroathe> FightingFalcon: https://developer.android.com/studio
[01:59:35] <FightingFalcon> My JS, automatically set the font size to fit in a div. It works fine everywhere. But in android, it also works. But if i click from another link to my page, it doesnt work.
[01:59:36] *** Quits: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net) (Ping timeout: 258 seconds)
[01:59:39] <wroathe> FightingFalcon: You can do it yourself. They ship an android emulator.
[01:59:52] <wroathe> FightingFalcon: You can pick your device and operating system version and debug away
[02:01:58] *** entuland_ is now known as entuland
[02:02:53] <hmw[at]> FightingFalcon: Sounds like you are calculating the size before the DOM was updated or something. You might try to do the font-sizing with a delay. Either in body.onload or using a timeout with time 0
[02:02:59] *** Joins: summersault (~summersau@179.177.255.163)
[02:03:18] *** Joins: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de)
[02:03:18] <FightingFalcon> hmw[at], yes  when i use timeout it works
[02:03:34] <FightingFalcon> But i do it after the window is LOADED
[02:03:52] <FightingFalcon> And isnt it weird that this only happens if i come from another link
[02:03:52] <FightingFalcon> ?
[02:04:39] <wroathe> FightingFalcon: Also, Chrome Dev Tools has some limited emulation capabilities if you click the devices button in the upper left corner and check out the emulation tab. I'm guessing your problem isn't specific to just Android.
[02:04:58] <hmw[at]> FightingFalcon: It does sound weird. That indicates, that something bogus might be going on. A live link as usual would help
[02:05:18] <FightingFalcon> https://www.ataturkanlatiyor.com/s1
[02:05:23] <FightingFalcon> try this page on android
[02:05:25] <entuland> it definitely is odd, the page shouldn't render differently depending on the way you reached it _unless_ you're explicitly doing something funky with the referrer, document fragments or the alike
[02:05:58] <FightingFalcon> go to page x, load it, and then load this.. you will see the content wont fit the window. and the reload the page and it works
[02:06:00] <hmw[at]> as if I had Android devices, FightingFalcon :) Well, I even might have a SBC with Android somewhere.
[02:06:36] <hmw[at]> `v
[02:06:51] <FightingFalcon> The bottom position of div is the same, but last p position is different, if the user comes from another site
[02:07:26] <hmw[at]> FightingFalcon: That meta description tag has an error. You should use " to quite the attributes, like in the other tags. The problem is that your description containst a '
[02:08:32] <FightingFalcon> yep let me change it
[02:08:41] <wroathe> FightingFalcon: You should prefer querySelector and querySelectorAll over getElementsByClassName, which I see you've used liberally in your script
[02:08:48] *** Quits: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de) (Ping timeout: 258 seconds)
[02:08:55] <wroathe> FightingFalcon: Unrelated to your current problem though
[02:09:59] <wroathe> FightingFalcon: Same for getElementsById. Use querySelector instead. Also, your button shouldn't have an ID, and it should be an actual <button> instead of a <div>
[02:10:33] *** Quits: summersault (~summersau@179.177.255.163) (Remote host closed the connection)
[02:10:40] <wroathe> FightingFalcon: You should prefer "const" and "let" over "var". It's been years since I think many of us have written the var keyword on purpose.
[02:11:10] <wroathe> FightingFalcon: You've made mainpage an async function, but you're not awaiting it or using the result in any way, and so there's no reason it should be an async function.
[02:11:14] *** Joins: tex (~super@user/dix)
[02:11:31] <hmw[at]> mainpage awaits things
[02:11:41] <FightingFalcon> it does?
[02:11:49] <wroathe> Oh, good catch
[02:11:52] <wroathe> FightingFalcon: Scratch that last point.
[02:12:32] <wroathe> FightingFalcon: Same for getElementsByTagName. These days querySelector/All is the preferred approach for querying the DOM.
[02:12:35] <hmw[at]> I would change  async function autosize() { await new Promise( (resolve, reject) => {    into    async function autosize() { return new Promise( (resolve, reject) => {   since you await it outside anyways
[02:13:01] <hmw[at]> uh into
[02:13:19] <hmw[at]> function autosize() { return Promise( (resolve, reject) => {    no need for it to be asnyc
[02:13:29] <hmw[at]> I don't see the problem yet, FightingFalcon
[02:14:16] <FightingFalcon> so, why does it happen?
[02:14:31] <FightingFalcon> thanks for nice tips wroathe and hwm4rgs
[02:14:35] <FightingFalcon> hmw[at]
[02:15:13] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[02:15:44] <hmw[at]> FightingFalcon: Always use parseInt with the second parameter (the base, 10 in your case). If there is a leading zero, it might get interpreted as octal and stuffs.
[02:17:20] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[02:17:38] <hmw[at]> oh that autosize is recursive
[02:18:17] <wroathe> FightingFalcon: Also, if those buttons are meant to be navigation links they should be <a> elements, and you should bind an event listener to a common ancestor that uses the href attribute on the link to determine where to navigate (if using pushState)
[02:18:45] <wroathe> FightingFalcon: This habit you've got of using <div>s for interaction elements is a nasty one that you need to break
[02:18:46] <hmw[at]> Let's not overload him :) FightingFalcon is a beginner
[02:18:54] <FightingFalcon> omg.... please calm down lol.
[02:19:05] <FightingFalcon> wroathe, it just looks cool :D
[02:19:06] <hmw[at]> The code has a few issues, but isn't too bad, FightingFalcon
[02:19:24] <FightingFalcon> thanks
[02:19:27] <wroathe> FightingFalcon: You can make it look cool with an <a>. The element type has nothing to do with the style.
[02:20:45] *** Quits: aexijh (~aexijh@bras-vprn-unvlon5573w-lp130-04-174-93-44-207.dsl.bell.ca) (Ping timeout: 245 seconds)
[02:21:11] <FightingFalcon> ok i will keep it in mind. thanks
[02:22:11] <hmw[at]> wroathe: except for native buttons. One can do <a href="link"><button>Text</button></a> though
[02:22:17] *** Quits: Baloo_ (~Baloo_@45.83.220.176) (Quit: Leaving)
[02:22:17] <hmw[at]> FightingFalcon: ^
[02:22:34] <FightingFalcon> i fixed the meta
[02:22:55] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[02:23:48] <hmw[at]> FightingFalcon: still not seeing anything. Your resize calculation is a bit too complicated for me to trace it mentally. I'd try to not use recursion to get to a cleaner solution
[02:23:53] <wroathe> hmw[at]: <a> cannot have descendant <button>s
[02:24:08] <wroathe> hmw[at]: https://html.spec.whatwg.org/dev/text-level-semantics.html#the-a-element
[02:24:09] <hmw[at]> FightingFalcon: also:    window.addEventListener( "load", mainpage );   - same effect but nicer perhaps
[02:24:34] <FightingFalcon> yes
[02:24:45] <hmw[at]> wroathe: That's a clear meh then.
[02:25:22] <hmw[at]> as in a disappointed meh on my parts
[02:26:33] <hmw[at]> FightingFalcon: Why is your autosize() using a Promise anyways? I don't see anything async in it.
[02:26:51] <hmw[at]> as in it is fully synchronous
[02:26:59] <FightingFalcon> because i dont want to TEXT to be visible before resizing finishes
[02:27:00] <FightingFalcon> setTimeout(function() { resolve(); }, 100);
[02:27:03] <FightingFalcon> this solved the issue
[02:27:33] <hmw[at]> You don't need the Promise, just call it in mainpage() as a normal function, and mainpage will pause until autosize() is done
[02:28:02] <FightingFalcon> so whats the point of async?
[02:28:11] <hmw[at]> there is no point in using async here
[02:28:26] <hmw[at]> You just said it yourself - you want it sync
[02:29:09] <hmw[at]> using a timeout should do the exact opposite - let it load and render, THEN resize !?
[02:29:31] <FightingFalcon> I dunno
[02:29:39] <FightingFalcon> this is the only thing that works
[02:29:48] <hmw[at]> nah
[02:30:00] <FightingFalcon> fillquote reloads the page
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:19] <FightingFalcon> fillquote loads the content
[02:30:22] <FightingFalcon> waits for 100ms
[02:30:26] <FightingFalcon> and autosize does its stuff
[02:30:38] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:30:41] <hmw[at]> So you need fill_quote().then( autosize );   or  await fillquoite()  or whatever
[02:31:12] <FightingFalcon> its already there
[02:31:24] <FightingFalcon>             await fillquote();
[02:31:24] <FightingFalcon>             await autosize();
[02:31:44] <hmw[at]> yeah, that second await is redundant.
[02:32:00] <hmw[at]> but it should not hurt either in this case
[02:32:17] <hmw[at]> heh I might have found it
[02:32:20] <entuland> FightingFalcon, your website is not supposed to work with JS off, correct?
[02:32:25] <FightingFalcon> yes
[02:32:33] <entuland> why such a decision?
[02:33:04] <hmw[at]> autosize awaits the promise. The promise handler may call autosize again, which waits for another promise. Perhaps it gets stuck in an endless loop
[02:33:26] <FightingFalcon> entuland, this is how it should work
[02:33:36] <FightingFalcon> hmw[at], this was happening before promises or async
[02:33:36] <entuland> I don't get _why_
[02:34:04] <entuland> if you had any functionality that required JS, I could understand it, such as a client side app of some sort that requires interaction
[02:34:15] <entuland> but for just content, you should be building your pages server side
[02:34:43] <hmw[at]> Hey, if it hasn't at least 7 CSS files and 2 different frameworks, it is not web design :)
[02:35:01] <entuland> it just feels like making your page less accessible and heavier on the client side for no reason whatsoever
[02:35:45] <entuland> and you may also be causing yourself more work than necessary
[02:36:21] <FightingFalcon> entuland, so i should do stuff with php instead of js?
[02:36:36] <entuland> no, you could use JS just fine on the server side if you wanted to
[02:36:44] <entuland> doesn't matter what you use
[02:36:49] <entuland> matters _where_ you use it
[02:37:03] <hmw[at]> The idea is to make the page with HTML/CSS only first, and then _add_ functionality that requires JS. Ideally the rest of your site works as static page, except for a few functions or special pages.
[02:37:05] <entuland> all of that page building should happen at the server side, simple as that
[02:37:08] *** Quits: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net) (Ping timeout: 250 seconds)
[02:37:18] *** Quits: eck0__ (~Android@mobile-166-173-61-29.mycingular.net) (Quit: -a- Connection Timed Out)
[02:37:22] <hmw[at]> the question was to switch over from client side script to server side, not the language entuland
[02:37:28] <FightingFalcon> i see
[02:37:31] *** Joins: eck0 (~Android@mobile-166-173-61-29.mycingular.net)
[02:37:50] <entuland> not sure I get your remark, hmw[at]
[02:38:13] <entuland> maybe you didn't want to address it at me but at FightingFalcon?
[02:38:20] <hmw[at]> FightingFalcon was asking, if he should replace his client side script stuff with a server side script. The language was not the issue.
[02:39:07] <entuland> well, it was badly posed, cause he specified the languages and not the "side"
[02:39:12] <hmw[at]> I would use client side scripts only, if things are actually dynamic. For instance, if that quote gets reloaded every 5 minutes or something
[02:39:48] <wroathe> FightingFalcon: It's a best practice with web development to build your page first using HTML and CSS and make it work in whatever limited sense it can work, and then to "enhance" the site with javascript. The reason I was focusing on your use of <div>s for interactive elements is because this is a pretty flagrant violation of that, and you'd end up with better and more robust code by following this
[02:39:54] <wroathe> practice I'm describing
[02:40:13] *** Joins: brian__ (~brian@cpe-72-134-207-141.natsow.res.rr.com)
[02:40:17] <FightingFalcon> wroathe, yes you are right.
[02:40:25] <FightingFalcon> this is my 2ns site, so im learning :/
[02:41:06] <FightingFalcon> nd*
[02:41:17] <entuland> you can take the chance to learn it better and move the page building where it belongs - preferably, only use JS for optional additional features / facilities
[02:41:47] <entuland> I mean only use JS on the client side for optional etc.
[02:42:02] <entuland> as mentioned, you can have JS running on the server side to build your pages just fine
[02:42:31] <FightingFalcon> ok, i will rebuild the site with this in mind
[02:42:37] <FightingFalcon> ie: fill the quote with php
[02:42:42] *** Parts: brian__ (~brian@cpe-72-134-207-141.natsow.res.rr.com) ()
[02:43:26] *** Joins: z3rOR0ne (~brian@cpe-72-134-207-141.natsow.res.rr.com)
[02:43:42] <entuland> sorry to be annoying, just to be clear: _all_ of your page building should be performed on the client side, and if you care about your website being useable without JS, test it with JS disabled
[02:43:56] <entuland> s/client/server
[02:43:59] <entuland> bad typo
[02:46:04] <wroathe> FightingFalcon: The terms you can read research further if you're interested at a later date are "semantic HTML" and "progressive enhancement".
[02:48:16] <FightingFalcon> OK
[02:48:17] <FightingFalcon> THANKS
[02:48:20] <FightingFalcon> thanks*
[02:50:26] *** Parts: z3rOR0ne (~brian@cpe-72-134-207-141.natsow.res.rr.com) ()
[02:51:27] <hmw[at]> wtf I can't download that android studio. Why does everything has to be JavaScript!?!? Make it an <a href> FFS
[02:51:44] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:410b:731a:6592:864d)
[02:52:12] <kek_> hi, I'm a bit confused. Why do I get undefined here https://jsconsole.com/?const%20array1%20%3D%20%5B%27a%27%2C%20%27b%27%2C%20%27c%27%5D%3B%0A%0Ax%20%3D%20array1.forEach%28element%20%3D%3E%20%7B%0A%09if%20%28element%20%3D%3D%3D%20%27b%27%29%0A%09%09return%20true%0A%7D%29%3B
[02:52:36] <wroathe> kek_: use array.find instead
[02:52:45] <kek_> ah I didn't read the docs properly
[02:52:49] <wroathe> kek_: array1.find(e => e === 'b');
[02:52:51] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Read error: Connection reset by peer)
[02:53:03] *** Joins: Codaraxis (~Codaraxis@89.45.7.142)
[02:54:30] <FightingFalcon> entuland, i have to start everything over and you are responsible :/
[02:55:46] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[02:56:19] <kek_> wroathe, hmm I need to make an example, I don't think that works like that
[02:56:29] <hmw[at]> What can it be? Sometimes I set EVERYTHING to allowed in umatrix, but some pages still crash on me
[02:56:50] <hmw[at]> Even disabling uMatrix sometimes does not help
[02:57:01] <entuland> eheheh
[02:57:04] <hmw[at]> (I am compiling that stupid thing from source now)
[02:57:18] <entuland> If I'm to be blamed for you doing the right thing, I'll take the blame
[02:57:33] <hmw[at]> Not blame. You are now RESPONSIBLE heheh
[02:57:33] <wroathe> n> const arr = ['a', 'b', 'c']; console.log(arr.find(s => s === 'b'));
[02:57:33] <jellobot> (okay) b
[02:57:38] <wroathe> kek_: ^
[02:57:52] <wroathe> n> const arr = ['a', 'b', 'c']; console.log(arr.find(s => s === 'd'));
[02:57:53] <jellobot> (okay) undefined
[02:58:31] <hmw[at]> n> const arr = ['a', 'b', 'b', 'b', 'c']; console.log(arr.find(s => s === 'b'));
[02:58:31] <jellobot> (okay) b
[02:58:39] <hmw[at]> oh it finds only the first
[02:58:48] <hmw[at]> I guess I was thinking "filter"
[02:58:50] <FightingFalcon> entuland, in my page, php gets data from database, store it as a JS variable. And then Javascript gets the data... It writes the quote, author name, date etc.. So doing this with php is a better way you say?
[02:59:10] <wroathe> kek_: If you're just trying to determine membership you want .some()
[02:59:27] <wroathe> n> const arr = ['a', 'b', 'c']; console.log(arr.some(s => s === 'b'));
[02:59:28] <jellobot> (okay) true
[02:59:31] <wroathe> n> const arr = ['a', 'b', 'c']; console.log(arr.some(s => s === 'd'));
[02:59:32] <jellobot> (okay) false
[02:59:59] <hmw[at]> FightingFalcon: <?php echo $database_query_result_without_the_extra_ajax; ?>
[03:00:13] <entuland> how do you even store in the database "as a JS variable"?
[03:00:32] <hmw[at]> <?php echo "const mystuff='...';" ?>
[03:00:33] <entuland> oh wait, I see what you meant, disregard my question
[03:00:36] <FightingFalcon> lol, echo <script> . $phpvariable
[03:00:48] <entuland> you should just output the data directly in your markup
[03:01:01] <hmw[at]> ^ and ^^
[03:01:13] *** Joins: xsperry (~as@user/xsperry)
[03:01:16] <kek_> I have a bunch of json files. Each file holds one json object. Each such json object has a property which is an array of more subobjects. Each subobject has a property "content" which is a string. I want to get all objects (i.e. all files) which contain a substring e.g. "foo". I thought about using filter to "loop" through the files but then I still have to loop through the subobjects for each file. That's where I used, wrongly,
[03:01:16] <kek_> forEach. I'm not sure if it's wise to use find instead.
[03:02:05] <entuland> kek_, depending on your data structure, there may not be a pre-baked system that will do the right thing
[03:02:26] <entuland> you may end up needing to implement a recursive search yourself
[03:02:47] <entuland> if you need more help please provide a fiddle with realistic data so that we know your data structure
[03:02:51] *** Quits: sheetjs (~sheetjs@pool-173-54-145-7.nwrknj.fios.verizon.net) (Remote host closed the connection)
[03:03:03] *** Joins: slaughter (~s@75-172-41-172.tukw.qwest.net)
[03:03:22] <kek_> entuland, the reason I think find() might be the wrong thing to use is simply because filter() expects true/false and not "somethign"/undefined.
[03:03:58] <kek_> also I dislike throwing data around unnessecarily :P yeah maybe I write it myself hm. Don't people use that lodash stuff for such kind of things?
[03:04:13] <wroathe> kek_: Can you share an example of the data and the desired output?
[03:04:23] <wroathe> kek_: you used the phrase "all objects" as a result, which implies filtering
[03:05:22] *** Joins: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de)
[03:06:18] <entuland> sorry, I'm really bad following word descriptions of data - seeing the actual data is far easier and faster
[03:06:35] <entuland> if you have sensitive data, just replace it with realistic dummy data
[03:06:51] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 272 seconds)
[03:07:21] <entuland> depending on the cases it could be far better to traverse and build another data structure containing only what you need instead of touching the original data
[03:07:37] <kek_> wroathe, https://github.com/paliapost/paliapost.github.io/tree/master/content/blueposts now I want to search for "hello" and find all files that contain "hello" (wheres only the content properties matter really) filtering worked great when I didn't  had an array of objects in a file but each object was its own file.
[03:08:29] <kek_> wroathe, the code works with find though it's slow but that's probably not find() nor filters() issue
[03:08:31] <entuland> are all of your JSON files consistent in their internal structure?
[03:09:09] <kek_> entuland, the amount of "subobjects" vary but overall you know: each "subobject" has a property content you want to filter for a substring
[03:10:11] *** Quits: iffraff (~quassel@2605:a601:aae0:4a00:8d7d:9bc:db53:8efe) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:10:12] <entuland> it's very hard to follow with the data presented like that
[03:10:18] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[03:10:24] <entuland> could you pick a couple files and format them?
[03:10:27] <kek_> so my issue was that I didn't read the docs of forEach properly (and honestly I'm just working with too many languages atm and confusing stuff). filter + forEach won't work sind forEach returns undefined all the time
[03:10:36] <entuland> I couldn't know which ones to pick to understand the variability of your input
[03:10:39] <rustyshackleford> production outages get your adrenaline going
[03:10:46] <kek_> entuland, ah yeah true, didn't remember that the files were unformatted
[03:10:48] *** Quits: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de) (Ping timeout: 252 seconds)
[03:10:58] <rustyshackleford> I'm either gonna get fired for this incident, or promoted for this incident response
[03:11:15] <entuland> rustyshackleford, context?
[03:11:29] <wroathe> kek_: Why won't filter work?
[03:11:48] <rustyshackleford> entuland: we had a license expire in a mobile app
[03:11:56] <wroathe> kek_: The point of filter is that you've got a set of objects you want to iterate through and apply a test to, and those that pass the test are returned in the result array, and those that don't are removed
[03:12:00] <kek_> wroathe, filter works but not if it's callback is forEach
[03:12:08] <rustyshackleford> entuland: long story short, shit stopped working
[03:12:12] <wroathe> kek_: Yeah, you wouldn't use forEach here
[03:12:16] <entuland> ouch, rustyshackleford
[03:12:37] <rustyshackleford> entuland: so on one hand, we fucked up for not knowing the license expiry date was today
[03:12:54] <kek_> entuland, https://bpa.st/ZGLA it's like that. Currently I don't filter when reading it. But as I said, filter + find works. I'll first try to improve performance a bit by doing other stuff and only at the end write my own thing.
[03:13:00] <rustyshackleford> last time this license was touched was 2 years ago, before any of us worked on this
[03:13:04] <rustyshackleford> so... now we know? haha
[03:13:28] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[03:13:36] <wroathe> kek_: Well, is the point of the inner test to determine if any of the objects in "messages" contain a specific property?
[03:13:58] <wroathe> kek_: If so, you probably want the outer loop to be a .filter() and the inner loop to be a .some()
[03:14:08] <kek_> wroathe, yeah, I use find to check "content" for a substring
[03:14:15] <kek_> wroathe, thanks, didn't know about some()
[03:14:31] *** Quits: daoumilseitek_ (~daoumilse@164.96.146.77.rev.sfr.net) (Quit: Leaving)
[03:14:45] <entuland> hope you manage to sort that out fast and well, rustyshackleford
[03:15:20] <kek_> wroathe, some() seems way more appropriate
[03:16:15] <entuland> also, just in case - why isn't this data in a relational database?
[03:18:19] <rustyshackleford> entuland: incident is resolved
[03:18:25] <entuland> cool
[03:18:43] <rustyshackleford> mobile apps have red tape to deploy
[03:18:54] <rustyshackleford> unlike websites which you can deploy pretty quickly
[03:20:31] *** Quits: slaughter (~s@75-172-41-172.tukw.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:21:48] *** Joins: slaughtr (~slaughter@europa.whatbox.ca)
[03:29:21] *** Joins: tccki_ (~tccki@box.webslate.co.nz)
[03:30:09] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[03:31:36] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[03:32:15] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 252 seconds)
[03:32:16] *** tccki_ is now known as tccki
[03:37:12] *** Quits: tex (~super@user/dix) (Ping timeout: 252 seconds)
[03:50:29] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[03:54:03] *** Quits: ariedro (~ariedro@user/ariedro) (Quit: WeeChat 3.1)
[03:57:39] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[04:05:58] *** Quits: peteyboy1 (~peteyboy1@95.169.229.12) (Ping timeout: 250 seconds)
[04:29:35] *** Joins: leduyquang753 (~leduyquan@27.73.61.122)
[04:30:18] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:30:38] *** Quits: cthulchu (~Cthulchu@195.66.198.226) (Ping timeout: 258 seconds)
[04:37:48] *** Joins: chao (~stenno@user/stenno)
[04:39:07] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 272 seconds)
[04:40:38] *** Joins: Batzy (~Batzy12@user/batzy)
[04:40:50] <Batzy> Does anyone know what channel might be good to ask questions about emberjs?
[04:42:20] <entuland> can't tell, there doesn't seem to be a specific channel for it, there is #web and #webdev, not sure if it fits here
[04:43:22] <entuland> we've discussed plenty of non-vanilla-js stuff so I guess it may be okay to ask
[04:43:35] <entuland> worst case we'll get reprimanded and you won't get any reply :P
[04:45:06] <entuland> there is also ##programming which has about 400 users as of right now
[04:46:41] <Batzy> well ill just ask my question here then. Has anyone set up a client side app (any js framework but ember.js preferred) that does authentication with Steam via openid connect?
[04:52:07] <Batzy> oh nvm steam uses openid 2
[04:52:08] <Batzy> wtf
[04:52:45] *** Quits: Deide (~Deide@user/deide) (Quit: Seeee yaaaa)
[04:54:56] *** Joins: fef (~thedawn@user/thedawn)
[04:58:30] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[04:59:14] *** Joins: zacts (~zak@user/zacts)
[05:00:33] <wroathe> Batzy: I don't know about Ember of Stream, but I've worked with OpenID Connect before a couple of times.
[05:01:10] <Batzy> wroathe it looks like steam doesnt do openid connect
[05:01:12] <Batzy> only openid 2.0
[05:01:21] <Batzy> and i have no idea if openid 2.0 does purely client-side auth
[05:01:31] <Batzy> i know openid connect can via like pkce
[05:04:34] *** Joins: cantelope (~cantelope@173-27-116-255.client.mchsi.com)
[05:08:29] *** nepeat_ is now known as nepeat
[05:10:29] *** Quits: zacts (~zak@user/zacts) (Ping timeout: 245 seconds)
[05:11:14] *** Joins: gry (~quassel@botters/gry)
[05:13:16] *** Parts: gry (~quassel@botters/gry) ()
[05:14:52] *** Joins: zacts (~zak@user/zacts)
[05:17:14] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.0 - https://znc.in)
[05:17:30] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[05:18:37] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:410b:731a:6592:864d) (Read error: No route to host)
[05:23:03] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:23:45] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:28:46] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:37:39] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 252 seconds)
[05:54:01] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.1)
[05:54:30] *** Quits: zacts (~zak@user/zacts) (Quit: bbl)
[05:55:34] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[05:58:46] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[06:01:58] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Remote host closed the connection)
[06:03:51] *** Joins: Betal (~Beta@user/betal)
[06:04:47] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[06:06:28] *** Joins: nifl (~niflce@user/niflce)
[06:09:00] *** Quits: niflce (~niflce@user/niflce) (Ping timeout: 252 seconds)
[06:17:58] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[06:22:12] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:410b:731a:6592:864d)
[06:22:17] <kek_> hi I currently use text.replace(query, '<span class=\'highlight\'>' + query + '</span>')  to highlight stuff. Now that is case sensitive. I want it to be case insensitive but it shouldn't alter sensitivity of the text.
[06:26:35] *** Joins: gunny (~gunny@60-241-207-242.tpgi.com.au)
[06:26:53] *** Quits: gunny (~gunny@60-241-207-242.tpgi.com.au) (Client Quit)
[06:26:59] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[06:33:13] *** Joins: CookE[] (~thedawn@user/thedawn)
[06:34:15] <wroathe> kek_: If the query is a valid regex you can do something like text.replace(new RegExp(query, 'i'), ...
[06:34:40] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[06:35:40] <kek_> wroathe, yeah I can't really figure out how. I want to highlight stuff case sensitive.. So "hello Hello" is the string and I want to highlight "he" then both "he" and "He" should be highlighted.
[06:35:59] *** Joins: xse_ (~xse@user/xse)
[06:36:30] <wroathe> kek_: Well, I think I just told you, didn't I?
[06:36:30] *** Quits: xse (~xse@user/xse) (Ping timeout: 252 seconds)
[06:36:39] <kek_> I guess I would have to first make the string lower case, find the index of the chars and then replace in original/insert
[06:36:56] <kek_> wroathe, no idea because I can't see how I should do that.
[06:37:40] <kek_> hmm gonna play around, maybe I'm just too tired and it's simple ^^
[06:37:42] <wroathe> n> const query = 'he'; 'hello Hello'.replaceAll(new RegExp(query, 'i'), `<foo>${query}</foo>`);
[06:37:43] <jellobot> (fail) TypeError: String.prototype.replaceAll called with a non-global RegExp argument
[06:37:50] <wroathe> n> const query = 'he'; 'hello Hello'.replaceAll(new RegExp(query, 'ig'), `<foo>${query}</foo>`);
[06:37:51] <jellobot> (okay) '<foo>he</foo>llo <foo>he</foo>llo'
[06:38:03] <wroathe> kek_: ^ isn't that it?
[06:38:16] <kek_> nope, I want '<foo>he</foo>llo <foo>He</foo>llo
[06:38:17] <wroathe> Or do you want to preserve case in the output?
[06:38:19] <wroathe> Ah
[06:38:30] <wroathe> Then that requires the alternate form
[06:38:34] <kek_> wroathe, preserve is the word, yeah!
[06:39:21] <wroathe> n> const query = 'he'; 'hello Hello'.replaceAll('he', s => `<foo>${s}</foo>`);
[06:39:21] <jellobot> (okay) '<foo>he</foo>llo Hello'
[06:39:42] <wroathe> n> const query = 'he'; 'hello Hello'.replaceAll(new RegExp(query, 'gi'), s => `<foo>${s}</foo>`);
[06:39:42] <jellobot> (okay) '<foo>he</foo>llo <foo>He</foo>llo'
[06:39:49] <wroathe> kek_: Like that?
[06:40:15] <kek_> wroathe, so gi instead of ig?
[06:40:22] <wroathe> Order doesn't matter. They're flags.
[06:40:29] <wroathe> The difference is in that second parameter
[06:40:37] <wroathe> The so-called "replacer function"
[06:40:42] <kek_> ah
[06:41:30] <kek_> I see yeah that's great. you do need that replacer function?
[06:41:55] <wroathe> Well, yeah. It receives the matched substring as the first parameter
[06:42:03] <wroathe> Which is what lets you preserve case
[06:42:55] <wroathe> See the docs for replaceAll for more information
[06:51:40] <kek_> wroathe, could it be that one can't rely on the existence of replaceAll()? thanks btw, I'll check out the docs
[06:51:54] <wroathe> kek_: Why would you think that?
[06:52:20] <wroathe> kek_: It's part of the javascript standard: https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.replaceall
[06:53:08] <wroathe> kek_: So any implementation that didn't include String.prototype.replaceAll wouldn't be a conforming javascript implementation
[06:53:35] <jaawerth> looks like it's only at 86.5% utilization https://caniuse.com/mdn-javascript_builtins_string_replaceall
[06:54:51] <kek_> wroathe, I've read on several ocasions that people believe JS doesn't have that. Furthermore I just keep getting undefined for replaceAll() and third: I think the above regex doesn't need it no?
[06:55:17] <kek_> I think the g flag does the All part for us no?
[06:55:19] <wroathe> Huh. No idea when replaceAll was added
[06:55:38] <wroathe> core-js apparently has a polyfill for it
[06:55:41] <jaawerth> but if you're passing a regex, you can still just use .replace, just make it a global regex and it will replace all.
[06:55:57] <jaawerth> replaceAll is only really there so you can do it with a string as the first arg rather than a regex
[06:56:15] <jaawerth> kek_: oh you said it - yes, correct re: g flag
[06:57:11] <wroathe> Is there a table that marks these features based on their ES version?
[06:57:21] <wroathe> caniuse doesn't seem to indicate when replaceAll was added
[06:57:25] <jaawerth> !kangax
[06:57:25] <jellobot> jaawerth, ES5,ES6/ES2015,ES2016-ES2020 (ES2015 was formerly known as ES6) and proposal support tables: http://kangax.github.io/compat-table/
[06:57:36] <jaawerth> I think it's under !compat too
[06:57:45] <wroathe> Thanks
[06:57:54] <jaawerth> but caniuse is better for accounting for platform usage
[06:58:56] <kek_> thanks a lot for all the help!
[06:59:36] <jaawerth> kek_: also in this case insteadof the replacer function you could make the second arg '<foo>$&</foo>' and it will also preserve case
[06:59:50] <wroathe> Oh, apparently replaceAll was 2021
[06:59:58] <jaawerth> you'd only really need a function if you need to do something dynamic or something that the string replacers don't have a $-based pattern for
[07:00:56] <wroathe> I always forget about those reference variables
[07:02:14] *** Quits: gehn (~gehn@109.201.152.168) (Remote host closed the connection)
[07:02:14] <wroathe> jaawerth: It kind of feels like the standard should have kind of note next to each standard library routine that indicates what version it was added in
[07:02:34] *** Joins: gehn (~gehn@109.201.152.178)
[07:03:00] <wroathe> jaawerth: I don't see anywhere in the standard that indicates that it's 2021, and the MDN docs don't mention that at all
[07:15:46] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 250 seconds)
[07:17:12] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[07:24:17] <jaawerth> usually they do mention which draft it started in but yeah it seems to be missing probably because it's the current draft, but they should still call it 2021
[07:24:28] <jaawerth> (MDN, I mean)
[07:24:32] <jaawerth> you could submit a PR ;-)
[07:25:12] <jaawerth> re the spec, I agree. it could get pretty cluttered like that but they could include annotations in the markup that can be turned on and off or something, so you'd have the spec and then an annotated version of the spec
[07:27:39] *** Joins: Guest74 (~Guest74@170.81.202.20)
[07:30:03] *** Joins: realtime (~realtime@177.18.185.16)
[07:30:12] *** Quits: realtime (~realtime@177.18.185.16) (Remote host closed the connection)
[07:31:55] *** Joins: realtime (~realtime@177.18.185.16)
[07:33:01] *** Quits: Guest74 (~Guest74@170.81.202.20) (Quit: Client closed)
[07:33:26] *** Quits: realtime (~realtime@177.18.185.16) (Client Quit)
[07:33:49] *** Joins: realtime (~realtime@177.18.185.16)
[07:38:51] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[07:40:23] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:410b:731a:6592:864d) (Remote host closed the connection)
[07:44:41] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Remote host closed the connection)
[07:44:59] *** Joins: Codaraxis (~Codaraxis@89.45.7.142)
[07:58:39] *** Joins: Rockwood (~Rocky@106.198.208.101)
[08:05:44] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[08:16:00] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 250 seconds)
[08:17:42] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[08:20:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 245 seconds)
[08:21:24] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 258 seconds)
[08:22:37] <sed> Hi can someone help me convert this javascript code to python? https://webxtutor.com/counterfeit-currency-ext-Jss74taRM8LwhlePGdCF
[08:23:57] *** Joins: mikkel (~mike@208.110.120.167)
[08:24:13] *** Joins: silly (~silly@user/silly)
[08:24:21] <ljharb> wroathe: https://npmjs.com/string.prototype.replaceall
[08:24:24] <ljharb> oops, they left
[08:24:44] <ljharb> (also, it's a living standard, so the "edition" doesn't matter)
[08:25:06] <Rockwood> i hate  dead ends :D
[08:25:13] *** Quits: CookE[] (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[08:28:42] *** Joins: ferdna (~ferdna@user/ferdna)
[08:30:46] *** Quits: realtime (~realtime@177.18.185.16) (Quit: Leaving)
[08:31:25] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:31:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:33:24] <sed> or can someone at least comment each line and tell me what it is doing
[08:33:39] *** Quits: silly (~silly@user/silly) (Ping timeout: 252 seconds)
[08:36:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[08:36:34] *** Quits: chovy (~chovy@75-55-138-167.lightspeed.mtryca.sbcglobal.net) (Ping timeout: 272 seconds)
[08:53:51] *** Quits: Rockwood (~Rocky@106.198.208.101) (Read error: Connection reset by peer)
[08:54:13] *** Joins: tccki_ (~tccki@2406:e001:2:5a00:250:56ff:fe9e:8795)
[08:54:13] *** Joins: niflce (~niflce@user/niflce)
[08:54:24] *** Joins: xse__ (~xse@user/xse)
[08:54:31] *** Joins: dodobrain_ (~dodobrain@exchange.mipac.com.au)
[08:55:20] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Killed (NickServ (GHOST command used by dodobrain_!~dodobrain@exchange.mipac.com.au)))
[08:55:40] *** Joins: g00fy5 (~g00fy@user/g00fy)
[08:55:51] *** Joins: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net)
[08:56:02] *** Joins: c4ntelope (~cantelope@173-27-116-255.client.mchsi.com)
[08:56:28] *** Joins: alystair2 (~alystair@user/alystair)
[08:57:59] *** Joins: markgrad_ (~markgrady@204.246.246.254)
[08:58:03] *** Joins: doc|home (~doc@user/doc)
[08:59:15] *** Joins: Beta (~Beta@user/betal)
[08:59:32] *** Joins: iomari892 (~iomari891@105.112.138.38)
[09:00:56] *** Joins: BUSY (~BUSY@user/busy)
[09:02:21] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:02:26] *** Parts: dodobrain_ (~dodobrain@exchange.mipac.com.au) ()
[09:03:58] *** Quits: xse_ (~xse@user/xse) (*.net *.split)
[09:03:58] *** Quits: nifl (~niflce@user/niflce) (*.net *.split)
[09:03:58] *** Quits: Betal (~Beta@user/betal) (*.net *.split)
[09:03:58] *** Quits: cantelope (~cantelope@173-27-116-255.client.mchsi.com) (*.net *.split)
[09:03:58] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[09:03:58] *** Quits: leduyquang753 (~leduyquan@27.73.61.122) (*.net *.split)
[09:03:58] *** Quits: tccki (~tccki@box.webslate.co.nz) (*.net *.split)
[09:03:58] *** Quits: xsperry (~as@user/xsperry) (*.net *.split)
[09:03:58] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (*.net *.split)
[09:03:58] *** Quits: alystair (~alystair@user/alystair) (*.net *.split)
[09:03:58] *** Quits: g00fy (~g00fy@user/g00fy) (*.net *.split)
[09:03:58] *** Quits: markgrady (~markgrady@204.246.246.254) (*.net *.split)
[09:03:58] *** Quits: doc (~doc@user/doc) (*.net *.split)
[09:03:58] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[09:03:58] *** tccki_ is now known as tccki
[09:03:59] *** g00fy5 is now known as g00fy
[09:05:00] *** Joins: leduyquang753 (~leduyquan@27.73.61.122)
[09:05:15] <jaawerth> ljharb: in this case it's relevant information in that it being es2021 would have been a flag to take a peek at CIU
[09:06:20] *** Parts: leduyquang753 (~leduyquan@27.73.61.122) ()
[09:06:53] *** Joins: leduyquang753 (~leduyquan@27.73.61.122)
[09:08:30] *** Quits: leduyquang753 (~leduyquan@27.73.61.122) (Changing host)
[09:08:30] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[09:11:40] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[09:16:58] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[09:17:11] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Remote host closed the connection)
[09:32:04] *** Quits: markgrad_ (~markgrady@204.246.246.254) (Remote host closed the connection)
[09:33:13] *** Joins: markgrady (~markgrady@204.246.246.254)
[09:49:56] <ljharb> jaawerth: you always need to; age doesn’t dictate implementation, or even correctness.
[10:01:58] *** Joins: crazyhorse18 (~crazyhors@220-244-196-30.tpgi.com.au)
[10:06:27] *** Joins: realies (~realies@user/realies)
[10:09:52] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:23:50] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 250 seconds)
[10:24:40] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[10:26:52] *** Joins: Codaraxis_ (~Codaraxis@89.45.7.142)
[10:27:20] *** Quits: Codaraxis (~Codaraxis@89.45.7.142) (Read error: Connection reset by peer)
[10:27:25] *** Joins: ondrejsynacek3 (~ondrejsyn@217.11.241.69)
[10:30:15] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[10:30:15] *** Quits: ondrejsynacek2 (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[10:32:31] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[10:32:56] *** Joins: name_ (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[10:34:39] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 245 seconds)
[10:44:42] <dodobrain> ljharb, hey can i spin up a local npm server ?
[10:45:44] <dodobrain> oh, sorry wrong channel, but my question still remains.
[10:46:18] *** Joins: jazzy2 (~jaziz@172.58.38.134)
[10:48:49] *** Quits: jazzy (~jaziz@2600:380:874b:26da:54d2:cacb:af5c:6b6c) (Ping timeout: 245 seconds)
[10:49:18] *** Joins: jazzy3 (~jaziz@2600:380:4547:d128:a1e2:2a56:7617:ad7e)
[10:52:09] *** Quits: name_ (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 244 seconds)
[10:53:18] *** Quits: jazzy2 (~jaziz@172.58.38.134) (Ping timeout: 250 seconds)
[11:00:33] *** Joins: dunkeln (~dunkeln@94.129.65.28)
[11:01:55] <hax> you can point to local or github repos in package.json, if that helps
[11:02:41] *** Joins: gnux (~notadevel@cpe-70-95-57-162.san.res.rr.com)
[11:04:46] <hax> you can upload to npm, and if you pay npm you can keep them private.
[11:08:04] *** Joins: tex (~super@user/dix)
[11:08:57] *** Quits: ondrejsynacek3 (~ondrejsyn@217.11.241.69) (Quit: WeeChat 3.1)
[11:11:45] <dodobrain> hax, i'm looking to set up a local "registry" (thats the name i was missing)
[11:11:59] <dodobrain> looks like there a few projects with verdaccio is one of the more popular ones
[11:13:49] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 245 seconds)
[11:15:02] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[11:25:14] *** Quits: crazyhorse18 (~crazyhors@220-244-196-30.tpgi.com.au) (Remote host closed the connection)
[11:25:25] *** Quits: dunkeln (~dunkeln@94.129.65.28) (Quit: leaving)
[11:28:24] *** Quits: alystair2 (~alystair@user/alystair) (Ping timeout: 250 seconds)
[11:38:17] *** Joins: mexen (uid495612@user/mexen)
[11:38:45] *** Quits: kmh (~kmh@p200300df5f2f6b008df4c6dd9f18a0d7.dip0.t-ipconnect.de) (Quit: Leaving)
[11:42:49] *** Joins: kmh (~kmh@p200300df5f2f6b00618497f9f416d927.dip0.t-ipconnect.de)
[11:42:52] *** o is now known as niko
[11:45:45] *** Joins: fef (~thedawn@user/thedawn)
[11:49:26] *** Joins: chao (~stenno@user/stenno)
[11:56:00] *** Quits: shantaram (shan@user/shan) (Quit: https://shantaram.xyz)
[12:00:58] *** Joins: undefined_bob (~undefined@gateway/tor-sasl/undefinedbob/x-54028283)
[12:01:23] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[12:01:46] *** Quits: rexar89 (~alexi5@208.83.82.238) (Ping timeout: 250 seconds)
[12:04:44] *** Joins: shan (shan@user/shan)
[12:05:52] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[12:06:28] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[12:10:10] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 244 seconds)
[12:15:40] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[12:17:09] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[12:17:11] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[12:20:48] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[12:20:53] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:23:17] *** Joins: fef (~thedawn@user/thedawn)
[12:23:46] *** Quits: undefined_bob (~undefined@gateway/tor-sasl/undefinedbob/x-54028283) (Remote host closed the connection)
[12:24:10] *** Joins: undefined_bob (~undefined@gateway/tor-sasl/undefinedbob/x-54028283)
[12:27:19] *** Quits: calcmandan (~quassel@user/calcmandan) (Quit: No Ping reply in 180 seconds.)
[12:27:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[12:28:27] *** Joins: calcmandan (~quassel@user/calcmandan)
[12:35:08] *** Joins: jonifen (~jonifen@user/jonifen)
[12:37:27] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:47:31] *** Quits: Beta (~Beta@user/betal) (Quit: WeeChat 3.1)
[12:49:37] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi)
[12:50:30] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[12:51:38] *** Joins: daoumilseitek (~daoumilse@164.96.146.77.rev.sfr.net)
[12:58:24] *** Joins: RougeR (~rougex250@user/rouger)
[13:03:38] *** Joins: xsperry (~as@user/xsperry)
[13:05:10] *** Quits: niflce (~niflce@user/niflce) (Quit: WeeChat 3.1)
[13:05:18] *** Quits: AurlienPierre[m] (~aurelienp@2001:470:69fc:105::1685) (Read error: Connection reset by peer)
[13:05:20] *** Quits: repo[m] (~repo@user/repo) (Read error: Connection reset by peer)
[13:05:20] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (Read error: Connection reset by peer)
[13:05:20] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (Read error: Connection reset by peer)
[13:05:20] *** Quits: nicoty[m] (~nicoty@user/nicoty) (Read error: Connection reset by peer)
[13:05:20] *** Quits: Guest7881 (~willpitte@2001:470:69fc:105::1bf) (Read error: Connection reset by peer)
[13:05:21] *** Joins: niflce (~niflce@user/niflce)
[13:06:03] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[13:07:09] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[13:07:10] *** Joins: nicoty[m] (~nicoty@user/nicoty)
[13:07:17] *** Joins: repo[m] (~repo@user/repo)
[13:07:21] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[13:07:21] *** Joins: AurlienPierre[m] (~aurelienp@2001:470:69fc:105::1685)
[13:07:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[13:08:38] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[13:09:13] *** WillPittenger is now known as Guest5448
[13:09:18] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[13:09:47] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[13:10:22] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[13:11:01] *** Joins: fef (~thedawn@user/thedawn)
[13:25:19] *** Joins: Naan (~Naan@user/naan)
[13:29:11] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[13:29:48] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[13:32:19] *** Quits: RougeR (~rougex250@user/rouger) (Quit: Leaving)
[13:39:01] <FightingFalcon> When i make a post request to php file, the php file echos the result like this: "<p>results are here</p>"
[13:39:13] <FightingFalcon> However i couldnt find a way to get this plain response back
[13:42:45] *** Quits: gnux (~notadevel@cpe-70-95-57-162.san.res.rr.com) (Ping timeout: 252 seconds)
[13:52:53] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[13:53:27] *** Joins: Naan (~Naan@user/naan)
[13:53:34] *** Parts: hwm4rgs (~hwm4rgs@user/hwm4rgs) (Bye.)
[13:55:10] *** Joins: rexar89 (~alexi5@208.83.82.238)
[13:55:24] *** Joins: Naan` (~Naan@user/naan)
[13:56:39] *** Quits: undefined_bob (~undefined@gateway/tor-sasl/undefinedbob/x-54028283) (Changing host)
[13:56:39] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[13:58:59] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 272 seconds)
[14:00:33] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:00:45] *** Quits: nepeat (~nepeat@79.110.170.62) (Ping timeout: 245 seconds)
[14:01:33] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[14:05:27] *** Quits: sausajez_ (uid501562@id-501562.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[14:10:41] *** Joins: nepeat (~nepeat@79.110.170.62)
[14:10:48] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi)
[14:19:39] <jwpapi> https://www.irccloud.com/pastebin/mhAtMbu0/
[14:19:56] <jwpapi> I think I forgot some basics.   I have a function that generates me a list, later based on event listeners that list might need to be regenerated. At the moment I’m solving it like this. But I have a strong suspicion this is not best practice: https://www.irccloud.com/pastebin/LrOdzdCe/
[14:20:54] <jwpapi> I can make it a function, however I don’t want it to run every single time I’m asking for this list
[14:30:36] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 252 seconds)
[14:30:50] *** Joins: peteyboy1 (~peteyboy1@95.169.229.12)
[14:37:55] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[14:37:57] *** Joins: abraham (~abraham@173.239.198.148)
[14:46:16] *** Joins: dan01 (~dan01@2a02:2f09:3c0c:6500:5886:e944:35f2:62f1)
[14:46:38] *** Quits: deltab_ (~deltab@95.154.230.49) (Ping timeout: 252 seconds)
[14:46:56] *** Quits: abraham (~abraham@173.239.198.148) (Quit: Textual IRC Client: www.textualapp.com)
[14:48:04] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[14:48:10] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[14:50:04] *** Jigsy` is now known as Jigsy
[14:50:15] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:50:55] *** Joins: cthulchu (~Cthulchu@195.66.198.226)
[14:51:32] *** Joins: Naan` (~Naan@user/naan)
[14:53:15] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[14:53:27] *** Joins: entuland (~entuland@user/entuland)
[14:53:41] *** Joins: Jigsy (~Jigsy@user/jigsy)
[14:55:38] *** Joins: deltab (~deltab@95.154.230.49)
[15:00:40] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[15:01:22] *** Joins: fef (~thedawn@user/thedawn)
[15:04:40] <nedbat> i want to make a javascript object and associate it with a div. can i use data attributes for this? The examples I'm finding show string data, not objects.
[15:05:04] <DnzAtWrk> I'm fairly sure data attributes are text
[15:05:32] <DnzAtWrk> you can pass the object through events if you need some events on the div
[15:05:41] <DnzAtWrk> you can associate the div with an object using an id
[15:05:53] <DnzAtWrk> like data-id="object 1"
[15:06:10] <nedbat> DnzAtWrk: do you have an example of how passing obejcts through events would work? for example, multiple draggable divs, each with a full JS object
[15:06:10] <DnzAtWrk> new Map([["object 1", object]]);
[15:06:25] <DnzAtWrk> let me check
[15:07:09] <DPA> You can also just add a property of your own to the dom node, or use the dom node as key to a global (Weak)Map.
[15:07:50] <DnzAtWrk> I don't remember anymore. I thought events had a place for custom objects
[15:08:19] <DnzAtWrk> could just bind the callback to the object
[15:08:21] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[15:08:25] <DnzAtWrk> and use this
[15:08:45] <DPA> With custom events, you can set the detail: field https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
[15:10:04] *** Quits: niko (~niko@libera/staff/niko) (Remote host closed the connection)
[15:10:43] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:10:46] *** Joins: niko (~niko@libera/staff/niko)
[15:10:55] <nedbat> i understand how to use a map from ids to objects to make it work. I thought there might be something more direct.
[15:11:10] <DnzAtWrk> sadly no
[15:11:12] <nedbat> DPA: i don't think i want custom events, do I?  i need to handle mouse down, move, up.
[15:11:26] <Dorward> Data attributes can only hold strings because they are attributes.
[15:11:45] <nedbat> Dorward: right, that makes sense.
[15:11:58] <nedbat> my divs will have unique id's already, so I can just use those.
[15:12:45] <Dorward> You can store object data by converting them to JSON. Obviously that will give you identical but new objects when you parse the JSON.
[15:14:37] *** Quits: chao (~stenno@user/stenno) (Ping timeout: 244 seconds)
[15:14:48] <nedbat> Dorward: thanks, that's an option to keep in mind
[15:19:04] *** Joins: chao (~stenno@user/stenno)
[15:20:40] *** Quits: realies (~realies@user/realies) (Ping timeout: 250 seconds)
[15:21:04] <peteyboy1> react-redux? redux-toolkit? zustand? recoil? context? ugh?
[15:21:35] *** Joins: realies (~realies@user/realies)
[15:25:35] *** Joins: fef (~thedawn@user/thedawn)
[15:29:21] <FightingFalcon> style="visibility: visible; font-size: 20px;"
[15:29:30] <FightingFalcon> How can you remove font-size inline style with js?
[15:31:05] <FightingFalcon> .removeProperty("font-size"); ?
[15:33:24] *** Joins: entuland_ (~entuland@user/entuland)
[15:33:51] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[15:35:23] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:35:30] <DnzAtWrk> or set it to empty string
[15:35:53] *** Joins: fef (~thedawn@user/thedawn)
[15:36:03] <DnzAtWrk> removeProperty is better
[15:36:26] *** entuland_ is now known as entuland
[15:41:38] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[15:41:40] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[15:42:18] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[15:44:00] *** Joins: benjamin1 (benjamin1@gateway/vpn/airvpn/benjamin1)
[15:44:07] *** Joins: thiras (~thiras@user/thiras)
[15:49:04] *** Joins: ef (~thedawn@user/thedawn)
[15:49:08] *** jazzy3 is now known as jaziz
[15:49:14] *** jaziz is now known as jazzy
[15:49:28] *** ef is now known as Guest2519
[15:50:21] *** Quits: Guest2519 (~thedawn@user/thedawn) (Remote host closed the connection)
[15:51:35] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 245 seconds)
[15:52:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[15:54:56] *** Joins: Jasen (~jasen@113.50.48.167)
[15:55:33] *** Quits: Jasen (~jasen@113.50.48.167) (Client Quit)
[15:57:19] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[15:59:34] *** Quits: fiend (friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 244 seconds)
[15:59:51] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[16:00:33] *** niflce is now known as Guest532
[16:00:33] *** Quits: Guest532 (~niflce@user/niflce) (Killed (sodium.libera.chat (Nickname regained by services)))
[16:00:34] *** Quits: benjamin1 (benjamin1@gateway/vpn/airvpn/benjamin1) (Quit: Leaving)
[16:00:57] *** Joins: Guest532 (~niflce@user/niflce)
[16:02:05] *** Joins: pavonia (~user@user/siracusa)
[16:02:19] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[16:03:52] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:09:34] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[16:12:18] *** Joins: naan (~Naan@user/naan)
[16:15:40] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[16:16:24] *** Quits: Naan` (~Naan@user/naan) (Ping timeout: 268 seconds)
[16:23:06] *** Joins: summersault (~summersau@179.177.255.163)
[16:27:09] *** Joins: Axy (~Axy@user/axy)
[16:30:26] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[16:31:01] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[16:32:51] *** Quits: naan (~Naan@user/naan) (Ping timeout: 245 seconds)
[16:33:28] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 250 seconds)
[16:34:26] *** Joins: Axy (~Axy@user/axy)
[16:34:49] *** Joins: de-facto (~de-facto@user/de-facto)
[16:40:48] *** Joins: naan (~Naan@user/naan)
[16:40:58] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[16:43:02] <DPA> I basically never set any inline styles. I only add and remove classes, and define them in a css file.
[16:43:13] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 272 seconds)
[16:43:26] *** Quits: cthulchu (~Cthulchu@195.66.198.226) (Ping timeout: 250 seconds)
[16:44:05] *** Joins: Axy (~Axy@user/axy)
[16:49:10] *** Joins: makara (~sol@196.61.111.63)
[16:49:33] <makara> hi. im trying to send a http.post using axios, but I can't seem to import it
[16:50:19] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 268 seconds)
[16:51:01] <makara> i did 'yarn add axios' and in the code `import axios from 'axios';` but when i do `k6 run script.js` i get "The moduleSpecifier "axios" has no scheme but we will try to resolve it as remote module."
[16:51:16] *** Joins: Axy (~Axy@user/axy)
[16:51:31] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[16:56:49] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[16:57:21] *** Joins: Jigsy (~Jigsy@user/jigsy)
[16:58:13] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:03:25] *** Quits: summersault (~summersau@179.177.255.163) (Remote host closed the connection)
[17:03:46] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[17:03:55] *** Joins: zebrag (~chris@user/zebrag)
[17:06:28] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[17:07:09] *** Quits: jazzy (~jaziz@2600:380:4547:d128:a1e2:2a56:7617:ad7e) (Ping timeout: 245 seconds)
[17:10:19] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[17:13:16] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[17:15:23] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[17:16:17] *** Parts: c4ntelope (~cantelope@173-27-116-255.client.mchsi.com) ()
[17:22:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:25:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi)
[17:29:54] *** xse__ is now known as xse
[17:32:57] *** naan is now known as Naan
[17:33:45] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 252 seconds)
[17:36:11] <theskillwithin> mornin'
[17:39:56] *** Quits: realies (~realies@user/realies) (Ping timeout: 245 seconds)
[17:42:01] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[17:49:28] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:55:13] *** Joins: realies (~realies@user/realies)
[17:57:25] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[18:00:37] *** Quits: dan01 (~dan01@2a02:2f09:3c0c:6500:5886:e944:35f2:62f1) (Ping timeout: 268 seconds)
[18:01:01] *** Quits: metadaemon (~metadaemo@user/metadaemon) (Read error: Connection reset by peer)
[18:01:46] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[18:02:24] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[18:04:03] *** Joins: dan01 (~dan01@2a02:2f09:3c0c:6500:5886:e944:35f2:62f1)
[18:09:13] *** Joins: odium (~rrr@172.58.220.145)
[18:10:34] *** odium is now known as rrr
[18:11:55] *** Joins: Cata (~Cata@user/cata)
[18:12:19] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[18:16:36] *** Quits: rexar89 (~alexi5@208.83.82.238) (Ping timeout: 250 seconds)
[18:19:59] *** Quits: rrr (~rrr@172.58.220.145) (Remote host closed the connection)
[18:20:29] *** Joins: rrr (~rrr@172.58.220.145)
[18:20:33] *** Quits: rrr (~rrr@172.58.220.145) (Remote host closed the connection)
[18:21:48] *** Joins: cthulchu (~Cthulchu@195.66.198.226)
[18:25:09] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[18:30:09] *** Joins: jellobot3 (~jellobot@104.248.16.142)
[18:30:10] *** ChanServ sets mode: +v jellobot3
[18:30:10] *** Quits: jellobot (~jellobot@104.248.16.142) (Killed (tin.libera.chat (Nickname regained by services)))
[18:30:10] *** jellobot3 is now known as jellobot
[18:30:18] *** Joins: thekingofbandit2 (thekingofb@thunix.net)
[18:31:46] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi)
[18:31:47] *** Joins: cthulchu_ (~Cthulchu@195.66.198.226)
[18:31:49] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:31:57] *** Joins: hacks (~hax@69.165.175.67)
[18:31:57] *** Quits: hacks (~hax@69.165.175.67) (Changing host)
[18:31:57] *** Joins: hacks (~hax@user/hax)
[18:32:08] *** Joins: thiras_ (~thiras@user/thiras)
[18:32:26] *** Joins: tomjwatson9 (~tomjwatso@220.red-83-42-216.dynamicip.rima-tde.net)
[18:32:30] *** Joins: bin4ry3 (~bin4ry@128.199.135.148)
[18:32:31] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[18:32:41] *** Joins: ryzendapgh (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[18:33:10] *** Joins: Kira (~k_sze@mail2.kalunite.net)
[18:33:26] *** Joins: Emil_ (emil@emil.fi)
[18:34:14] *** Joins: dslegends1 (~dslegends@user/dslegends)
[18:34:22] *** Joins: zopsi_ (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[18:34:29] *** Joins: GreenJello_ (~GreenJell@user/greenjello)
[18:34:29] *** ChanServ sets mode: +o GreenJello_
[18:34:38] *** Joins: Iolo_ (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[18:34:52] *** Joins: qwedfg_ (~qwedfg@194.177.28.161)
[18:34:59] *** Joins: mikebald_ (~mikebald@159.203.185.106)
[18:35:01] *** Joins: Stx (stx@libera/staff/stx)
[18:35:02] *** Joins: Slade- (~user@user/slade)
[18:35:05] *** Joins: KevinX_ (~KevinX@73.156.244.126)
[18:35:08] *** Joins: Talon_ (~Talon@172.77.119.69)
[18:35:25] *** Joins: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[18:35:26] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[18:35:56] *** Joins: bynx (~bynx@fw.rry.vaskywire.net)
[18:36:20] *** Joins: jamesmar1inez (~keinbock@37.44.247.165)
[18:36:32] *** Joins: unCork (~Cork@user/cork)
[18:36:45] *** Joins: arthurpbs_ (~arthurpbs@168.121.98.3)
[18:36:57] *** Joins: a1paca_ (~a1paca@user/a1paca)
[18:37:15] *** Quits: shailangsa (~shailangs@host86-186-177-181.range86-186.btcentralplus.com) (Killed (NickServ (GHOST command used by Shailangsa_)))
[18:37:37] *** Joins: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi)
[18:38:00] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[18:38:15] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[18:40:00] *** Joins: Batzy1 (~Batzy12@c-73-41-22-243.hsd1.ca.comcast.net)
[18:40:04] *** Joins: HaMsTeRs (~HaMsTeRs@210.3.201.132)
[18:40:33] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[18:40:34] *** Quits: cthulchu (~Cthulchu@195.66.198.226) (*.net *.split)
[18:40:34] *** Quits: realies (~realies@user/realies) (*.net *.split)
[18:40:34] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (*.net *.split)
[18:40:34] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[18:40:34] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[18:40:34] *** Quits: AciD` (~fu@user/acid/x-5205451) (*.net *.split)
[18:40:34] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[18:40:34] *** Quits: thekingofbandit (~thekingof@user/thekingofbandit) (*.net *.split)
[18:40:34] *** Quits: Talon (~Talon@172.77.119.69) (*.net *.split)
[18:40:34] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[18:40:34] *** Quits: GreenJello (~GreenJell@user/greenjello) (*.net *.split)
[18:40:34] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[18:40:34] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[18:40:34] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (*.net *.split)
[18:40:34] *** Quits: tomjwatson (~tomjwatso@220.red-83-42-216.dynamicip.rima-tde.net) (*.net *.split)
[18:40:34] *** Quits: hax (~hax@user/hax) (*.net *.split)
[18:40:34] *** Quits: dslegends (~dslegends@user/dslegends) (*.net *.split)
[18:40:34] *** Quits: mikebald (~mikebald@159.203.185.106) (*.net *.split)
[18:40:34] *** Quits: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (*.net *.split)
[18:40:34] *** Quits: arthurpbs (~arthurpbs@168.121.98.3) (*.net *.split)
[18:40:34] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[18:40:34] *** Quits: jamesmartinez (~keinbock@37.44.247.165) (*.net *.split)
[18:40:34] *** Quits: Batzy (~Batzy12@user/batzy) (*.net *.split)
[18:40:35] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[18:40:35] *** Quits: lucerne (~thelounge@ip202.ip-51-178-215.eu) (*.net *.split)
[18:40:35] *** Quits: Slade (~user@user/slade) (*.net *.split)
[18:40:35] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (*.net *.split)
[18:40:35] *** Quits: zopsi (~zopsi@irc.dir.ac) (*.net *.split)
[18:40:35] *** bin4ry3 is now known as bin4ry
[18:40:36] *** unCork is now known as Cork
[18:40:36] *** Iolo_ is now known as Iolo
[18:41:12] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[18:41:24] *** Joins: AciD` (~fu@user/acid/x-5205451)
[18:44:02] *** Joins: enoq (~enoq@194-208-146-143.lampert.tv)
[18:45:24] *** chao is now known as stenno
[18:45:29] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[18:46:43] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[18:46:54] *** Quits: Codaraxis_ (~Codaraxis@89.45.7.142) (Remote host closed the connection)
[18:46:59] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[18:48:58] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[18:50:43] *** Joins: niko (~niko@libera/staff/niko)
[18:51:24] *** Joins: realies (~realies@user/realies)
[18:51:43] *** Joins: summersault (~summersau@179.177.255.163)
[18:51:51] *** Joins: comatory (~ondrejsyn@cz7.datarail.eu)
[18:55:05] *** Emil_ is now known as Emil
[19:00:36] *** Quits: gehn (~gehn@109.201.152.178) (Quit: Leaving)
[19:00:41] *** Joins: shailangsa (~shailangs@host86-186-177-181.range86-186.btcentralplus.com)
[19:05:45] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:08:15] *** Quits: KevinX_ (~KevinX@73.156.244.126) (Ping timeout: 272 seconds)
[19:08:17] *** Joins: gehn (~gehn@109.201.152.161)
[19:09:54] *** Joins: Spring (~Spring@user/spring)
[19:11:53] *** Joins: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca)
[19:12:35] *** Quits: Spring (~Spring@user/spring) (Client Quit)
[19:12:36] *** Quits: cthulchu_ (~Cthulchu@195.66.198.226) (Read error: Connection reset by peer)
[19:12:53] *** Joins: rexar89 (~alexi5@208.83.82.238)
[19:12:55] *** Joins: cthulchu_ (~Cthulchu@195.66.198.226)
[19:13:07] <bancroft> I'm very rusty in JS, and I have a project comming up that will require typescript. Does anyone have any recommendations to get back up-to-speed quickly?
[19:16:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:16:24] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[19:18:25] <gehn> !books
[19:18:26] <jellobot> gehn, !eloquent (http://eloquentjavascript.net), !ydkjs (https://github.com/getify/You-Dont-Know-JS), JavaScript: The Definitive Guide by David Flanagan, High Performance JavaScript by Nicholas C. Zakas, Effective JavaScript by David Herman, Functional JavaScript by Michael Fogus, Programming JavaScript Applications by Eric Elliott.
[19:18:34] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:18:45] <enoq> the TS docs are very good and short
[19:19:02] <enoq> won't save you from the many bad parts
[19:19:28] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[19:20:04] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:22:51] <bancroft> gehn: thanks!
[19:23:00] <bancroft> enoq: ah ok, thanks for that too!
[19:23:20] <enoq> bancroft: in general you can't quickly learn JS properly
[19:23:53] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 272 seconds)
[19:24:24] <enoq> transition from JS to TS should be quicker though
[19:24:31] *** Joins: stenno (~stenno@user/stenno)
[19:24:38] <enoq> similarly to how going from Java to Kotlin will be quick
[19:25:25] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:25:38] <bancroft> I just don't use JS/TS anymore at all. I just do go/python
[19:26:21] <bancroft> I got to review/re-learn everything
[19:26:58] *** Joins: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net)
[19:27:08] <enoq> backend or frontend?
[19:28:06] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 250 seconds)
[19:28:32] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[19:29:09] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Quit: ZNC - https://znc.in)
[19:29:14] <Swahili> Q: I have a container element that has overflow-x set to scroll; I'd like to scroll programmatically (e2e testing sort of thing), but for my surprise when I do element.scrollTo(xValue, 0) it doesn't scroll. Any hints why?
[19:29:38] <bancroft> enoq: backend, and with pulumi (I know I can write pulumi project in Go, but I don't have a choice here)
[19:29:49] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[19:30:17] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[19:31:40] <enoq> Swahili: afaik the last time I tried that there were issues with supplying the correct coordinates
[19:31:54] <enoq> so that it uses the correct offset
[19:32:29] <Swahili> enoq: thanks for looking! I thought I've done this in the past. I tested element.scrollTo|scroll|scrollLeft|scrollRight
[19:32:30] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[19:32:58] <Swahili> sanity check, the container (that has the overflowX scroll) is the element in element.scrollTo
[19:33:48] <enoq> there's also https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView btw
[19:36:37] <wroathe> Swahili: If you're e2e testing consider using a webdriver implementation instead. The problem with doing it via Javascript in the same runtime is that most of the programmatic APIs you'd use for interaction don't trigger events like user interaction does, and interaction doesn't take into account how content is layered in the viewport (or whether or not it's visible)
[19:37:14] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:37:17] <Swahili> wroathe: yeh, I'm using playwright (pupeteer), but before I write the test, testing in the browser
[19:37:22] <Swahili> enoq: tks for the tip
[19:37:24] *** Joins: onosendi (~onosendi@user/onosendi)
[19:37:34] *** Joins: stenno (~stenno@user/stenno)
[19:37:58] *** Quits: cthulchu_ (~Cthulchu@195.66.198.226) (Ping timeout: 265 seconds)
[19:39:21] <enoq> incidentally I'm also looking into cypress atm since google decided to abandon protractor
[19:39:25] *** Joins: KevinX__ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[19:39:27] *** Quits: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Read error: Connection reset by peer)
[19:41:21] <Swahili> enoq: I find playwright great!
[19:41:45] <Swahili> easy to setup, free, good docs, simple, use it with jest, not much config, problem solved :)
[19:41:46] *** Quits: qwedfg_ (~qwedfg@194.177.28.161) (Quit: ZNC - https://znc.in)
[19:42:22] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 268 seconds)
[19:42:23] <Swahili> ok so, the scrollTo does work when I tested outside my project, so nevermind! it's something there, not related with the actual scrollto stuff
[19:42:47] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[19:43:07] *** Joins: happymeal` (~happymeal@75-28-166-198.lightspeed.tukrga.sbcglobal.net)
[19:43:10] *** Joins: peteyboy_ (~peteyboy1@95.169.229.12)
[19:43:19] *** Joins: wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:43:23] *** Joins: xse_ (~xse@user/xse)
[19:43:39] <Swahili> (it didn't work because I was targeting the child element, which I named data-scrollable) :~D sorry
[19:43:45] *** Joins: bancroft_ (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca)
[19:44:19] *** Quits: pavonia (~user@user/siracusa) (Read error: Connection reset by peer)
[19:44:20] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[19:44:32] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[19:45:43] <enoq> great that you were able to fix it :)
[19:45:48] *** Joins: jonifen` (~jonifen@user/jonifen)
[19:46:04] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 268 seconds)
[19:46:05] *** Quits: wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Client Quit)
[19:46:40] *** Joins: pavonia (~user@user/siracusa)
[19:46:51] *** Joins: abirkill- (snoopy@d207-216-233-23.bchsia.telus.net)
[19:46:57] *** Joins: g00fy8 (~g00fy@user/g00fy)
[19:47:24] *** Quits: makara (~sol@196.61.111.63) (Ping timeout: 252 seconds)
[19:47:49] *** Joins: wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:47:49] <Swahili> enoq: what do you think of playwright? had a look? playwright.dev
[19:47:50] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[19:47:51] *** Joins: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:47:51] *** Quits: kshockey (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:47:51] *** Joins: kshockey (~kyshoc@user/kyshoc)
[19:47:55] *** Joins: SpydarOO7 (~spydar007@user/spydar007)
[19:48:09] *** Joins: Icycle (~icedream@hzn-b.serverkomplex.de)
[19:48:29] <enoq> seems like another wrapper on top of webdriver
[19:48:44] *** Joins: doc|work (~doc@user/doc)
[19:48:48] *** Joins: stenno (~stenno@user/stenno)
[19:48:56] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[19:49:06] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[19:49:06] *** qwedfg is now known as qwedfg_
[19:49:23] <enoq> and I suppose you use the pupeteer backend which I don't think works for firefox yet
[19:49:25] *** qwedfg_ is now known as qwedfg
[19:50:20] <wroathe_> Interesting. It looks like playwright doesn't use the webdriver protocol
[19:50:42] *** Joins: Crassus (~Crassus@user/crassus)
[19:50:49] <wroathe_> And if this is the new popular e2e testing solution that pretty much dooms that standardization effort
[19:51:02] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (Killed (NickServ (GHOST command used by pizzaiolo)))
[19:51:04] *** pizzaiolo is now known as pizza
[19:51:10] <enoq> cypress is yet another mechanism
[19:51:29] <enoq> that basically just runs directly on the page and iframes the test site
[19:51:59] <Swahili> enoq: wroathe_: its https://chromedevtools.github.io/devtools-protocol/
[19:52:12] *** Quits: summersault (~summersau@179.177.255.163) (Remote host closed the connection)
[19:52:33] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:52:47] <Swahili> wroathe_: it's not yet the most popular, most ppl I chat to don;t know about it, but the experience I have is great
[19:54:03] <wroathe_> It's just architecturally interesting. My guess would be that the designers of the devtools protocol didn't initially build it with browser automation in mind. Whomever built playwright saw an opportunity there
[19:54:43] *** Joins: ryt_ (~arewhytea@185.38.142.75)
[19:54:59] *** Quits: onosendi (~onosendi@user/onosendi) (*.net *.split)
[19:55:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (*.net *.split)
[19:55:05] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (*.net *.split)
[19:55:06] *** Quits: deviantfero (~deviantfe@190.150.27.58) (*.net *.split)
[19:55:09] *** Quits: bancroft (~bancroft@bras-base-mtrlpq3015w-grc-11-70-55-136-62.dsl.bell.ca) (*.net *.split)
[19:55:12] *** Quits: peteyboy1 (~peteyboy1@95.169.229.12) (*.net *.split)
[19:55:14] *** Quits: jonifen (~jonifen@user/jonifen) (*.net *.split)
[19:55:14] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (*.net *.split)
[19:55:14] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (*.net *.split)
[19:55:16] *** Quits: doc|home (~doc@user/doc) (*.net *.split)
[19:55:20] *** Quits: g00fy (~g00fy@user/g00fy) (*.net *.split)
[19:55:21] *** Quits: xse (~xse@user/xse) (*.net *.split)
[19:55:24] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[19:55:24] *** Quits: kyshoc (~kyshoc@user/kyshoc) (*.net *.split)
[19:55:25] *** Quits: eck0 (~Android@mobile-166-173-61-29.mycingular.net) (*.net *.split)
[19:55:25] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[19:55:26] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[19:55:26] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) (*.net *.split)
[19:55:26] *** Quits: abirkill (snoopy@d207-216-233-23.bchsia.telus.net) (*.net *.split)
[19:55:26] *** Quits: asd (~noname@user/asd) (*.net *.split)
[19:55:28] *** Quits: happymeal (~happymeal@user/happymeal) (*.net *.split)
[19:55:29] *** Quits: ryt (~arewhytea@185.38.142.75) (*.net *.split)
[19:55:30] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[19:55:33] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[19:55:33] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[19:55:33] *** abirkill- is now known as abirkill
[19:55:33] *** g00fy8 is now known as g00fy
[19:55:33] *** SpydarOO7 is now known as Spydar007
[19:55:33] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[19:55:33] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[19:55:33] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:55:33] *** Joins: asd (~noname@user/asd)
[19:56:39] *** wroathe_ is now known as wroathe
[19:57:48] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[19:57:49] <wroathe> In other news it's starting to get disorienting to switch between JS, TS, Flow, Node.js and Browsers when reviewing code in other people's projects
[19:57:54] <Swahili> wroathe_: that makes sense, as there are other use cases for playwright, that are not necessarily e2e testing.
[19:58:11] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[19:59:03] *** Joins: eck0 (~Android@mobile-166-173-61-29.mycingular.net)
[19:59:05] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[19:59:16] <wroathe> Swahili: Yeah, browsers have been iterating on https://www.w3.org/TR/webdriver/ for some time, which is another protocol that browsers run a server for. It's what Selenium and such run on.
[19:59:41] <wroathe> Swahili: I'm sure there's some internal politics between the various standards groups on what the path forward for browser automation is
[19:59:48] <wroathe> I didn't expect devtools to be used for this purpose
[20:00:41] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 265 seconds)
[20:00:54] <Swahili> nice :)
[20:02:12] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[20:02:26] *** Joins: Stx (stx@libera/staff/stx)
[20:02:30] *** Joins: onosendi (~onosendi@user/onosendi)
[20:02:33] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[20:02:47] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[20:02:57] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[20:04:39] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Client Quit)
[20:08:06] *** Quits: DnzAtWrkV2 (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:12:36] *** Parts: Batzy1 (~Batzy12@c-73-41-22-243.hsd1.ca.comcast.net) ()
[20:15:11] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[20:18:35] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:19:29] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:19:55] *** Joins: cthulchu_ (~Cthulchu@195.66.198.226)
[20:20:20] *** Joins: dan1001 (~dan01@2a02:2f09:3c0c:6500:d91d:92ac:702d:1e42)
[20:24:51] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[20:24:53] *** Quits: dan01 (~dan01@2a02:2f09:3c0c:6500:5886:e944:35f2:62f1) (Ping timeout: 272 seconds)
[20:25:50] *** Joins: dan_the_man (~dan01@2a02:2f09:3c0c:6500:114:7d5d:6425:e0)
[20:26:57] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[20:28:39] *** Quits: bynx (~bynx@fw.rry.vaskywire.net) (Quit: leaving)
[20:29:42] *** Quits: dan1001 (~dan01@2a02:2f09:3c0c:6500:d91d:92ac:702d:1e42) (Ping timeout: 264 seconds)
[20:30:03] *** Joins: dan01 (~dan01@84.232.150.25)
[20:31:20] *** Quits: dan01 (~dan01@84.232.150.25) (Read error: Connection reset by peer)
[20:32:19] *** Quits: dan_the_man (~dan01@2a02:2f09:3c0c:6500:114:7d5d:6425:e0) (Ping timeout: 268 seconds)
[20:33:13] *** Joins: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net)
[20:33:14] *** Joins: fef (~thedawn@user/thedawn)
[20:34:02] *** Quits: rawgreaze (~rawgreaze@c-73-89-208-53.hsd1.ma.comcast.net) (Changing host)
[20:34:02] *** Joins: rawgreaze (~rawgreaze@user/rawgreaze)
[20:34:47] *** Quits: cthulchu_ (~Cthulchu@195.66.198.226) (Ping timeout: 268 seconds)
[20:45:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:46:11] *** Quits: jess (~jess@libera/staff/jess) ()
[20:46:41] *** Joins: Baloo_ (~Baloo_@45.83.220.183)
[20:46:46] *** Joins: Rockwood (~Rocky@223.225.80.135)
[20:47:31] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Read error: Connection reset by peer)
[20:47:31] *** Joins: silly (~silly@user/silly)
[20:48:08] *** Joins: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de)
[20:50:44] *** GreenJello_ is now known as GreenJello
[20:50:59] *** Joins: Buttercat (~Buttercat@user/buttercat)
[20:51:45] *** Joins: devslash (~devslash@185.38.14.150)
[20:52:00] <devslash> Why doesnt this code work ? https://pastebin.com/APKmQqxp
[20:52:24] *** Joins: stenno (~stenno@user/stenno)
[20:52:27] *** Quits: HaMsTeRs (~HaMsTeRs@210.3.201.132) (Quit: Leaving)
[20:52:34] <Buttercat> any reason why I'm getting a type error for a function returning a promise that is exported and accessed from 2 other files? In one file it works and produces a result
[20:52:54] <wroathe> devslash: Because classes and IDs aren't the same thing
[20:53:04] <devslash> ?
[20:53:07] <devslash> what do you mean
[20:53:19] <wroathe> devslash: You're using classList.add to add a _class_ to the element, and you're trying to select it by _id_
[20:53:31] <wroathe> devslash: If you want it to be an id do div.id = 'StatusUpdate' instead
[20:54:10] <wroathe> devslash: Or better yet, don't use IDs for something like this. IDs are meant to be globally unique on the page.
[20:54:18] <devslash> it will be
[20:54:28] <devslash> because theres only going to be a single element
[20:54:50] <comatory> Buttercat: What does the type error exactly says?
[20:55:01] <wroathe> devslash: Then it's fine. It's still usually best to not make the assumption that that will always be true.
[20:55:12] <devslash> why not ?
[20:55:26] <devslash> this is my web page so I know that it will....
[20:55:27] <Rockwood> o/
[20:55:39] <wroathe> devslash: Ok. Carry on then.
[20:55:40] <Buttercat> comatory: It says functionName is not a function
[20:55:41] <Rockwood> dammit beers today lol
[20:56:02] <Rockwood> i drunk 13 beers
[20:56:05] <Rockwood> lol
[20:56:43] <comatory> Buttercat: double check that you are importing it the same way in those 2 files. It might be possible you have mispelled something and it's undefined or something like that.
[20:57:00] *** Joins: CookE[] (~thedawn@user/thedawn)
[20:57:16] <comatory> Buttercat: you are  exporting just a function right? You are not executing the function and the nexporting it or something like that?
[20:57:38] <Rockwood> ljharb, lol
[20:57:46] <comatory> Buttercat: anyway, feel free to upload a Gist of those three files and I can have a look at it.
[20:58:03] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:58:24] *** Quits: fbandov (~fbandov@ip5f5bd179.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:58:27] <Buttercat> comatory: yes, just exporting the function, accessing it in the same fashion in both places
[20:59:07] *** Quits: jonifen` (~jonifen@user/jonifen) (Quit: Leaving)
[20:59:57] <Rockwood> lol
[21:00:15] <comatory> Buttercat: This error means it's really not a function, that means the property name is something else. Tips for debugging: Try commenting the imports of those two files to see if it only happens in one file. Other way I can think of is to use old-fashioned `console.log` to see what it actually is. Maybe sth like `console.log(typeof functionName)` and see what you get.
[21:00:22] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[21:00:33] *** Quits: CookE[] (~thedawn@user/thedawn) (Remote host closed the connection)
[21:01:50] <Rockwood> Buttercat, lol dammit whiskey name :P
[21:02:18] <Rockwood> ljharb, there?
[21:02:22] <Buttercat> comatory: weird, it shows as undefined when logging it
[21:02:53] <Rockwood> undefined means death of anything
[21:03:00] <comatory> Buttercat: That is weird because if you try calling undefined as function it should tell you undefined is not a function.
[21:03:40] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:04:18] *** Parts: AurlienPierre[m] (~aurelienp@2001:470:69fc:105::1685) ()
[21:04:27] <Buttercat> comatory: could it be due to some circular dependency?
[21:04:28] <GreenJello> Buttercat, it's either a simple mistake, or you have a circular dependency
[21:04:33] <comatory> Buttercat: Did you check your import paths? Are you really pointing at the particular file. Because if you're not using TypeScript and just plain JS with CommonJS modules, you won't get any warnings. So accessing `const { aFunction } = require('../somwhere')` can be undefined if either `aFunction` is not exported from the file (or mispelled) or perhaps the file does not exist.
[21:05:59] *** Joins: FightingFalcon (~sdasavcsg@user/fightingfalcon)
[21:06:05] *** Joins: alystair (~alystair@user/alystair)
[21:07:16] <comatory> Buttercat: Does the problem happen if you create a fresh file, put just a single function there and import it in those two files. Just create a dummy function that does `console.log` and see if the problem persists.
[21:07:32] *** Parts: nedbat (~nedbat@python/psf/nedbat) (Textual IRC Client: www.textualapp.com)
[21:08:03] *** Joins: P1RATEZ (piratez@cpe98524ab27125-cm98524ab27123.cpe.net.cable.rogers.com)
[21:08:51] *** Joins: KevinX (~KevinX@73.156.246.178)
[21:09:48] <FightingFalcon> Do you have to use promise for async functions?
[21:10:01] <wroathe> Hmm, I just found out about the redux toolkit. Back when I used Redux I actively avoided some of the recommendations they're making in this. For one, redux-thunk seemed like unnecessary complexity and a violation of the single responsibility principle
[21:10:05] <comatory> FightingFalcon: No, you can use callbacks.
[21:10:17] <FightingFalcon> they are old fashioned?
[21:11:35] <comatory> FightingFalcon: I'm pretty sure that somewhere below async/await lies implementation made of callbacks :) Well yeah they were something that was used before because promises did not exist but you can do everything with callbacks that you can do with promises. Promises are just nicer way to deal with asynchronous code.
[21:11:38] <Buttercat> comatory: I found the problem, it was indeed a circular dependency
[21:11:42] *** Quits: KevinX__ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[21:12:01] <comatory> Buttercat: Yeah that happened to me few times too.
[21:12:10] <FightingFalcon> comatory may i show you a code and you correct it? its very simple only a few lines. im just trying to understand
[21:12:23] <Buttercat> GreenJello: you were on the right track
[21:12:48] <comatory> FightingFalcon: If you're quick enough to post it I can try. I'm on a train and getting of soon.
[21:13:34] <wroathe> And the jury is out for me on this "slices" feature too. I understand the desire for encapsulation, but that seems like it has the potential downside of encouraging duplication and reducing code-reuse between reducers
[21:14:17] <FightingFalcon> https://paste.debian.net/1200574/
[21:14:55] <wroathe> It seems like it's giving ground on a strong and unique architectural approach to people who want the global "store" atom to actually be a tree of atoms, or a wholesale model framework
[21:15:19] <wroathe> immer is pretty neat though
[21:15:37] <comatory> FightingFalcon: your `hello` function does not return a promise. Functions with async should be returning promises.
[21:16:04] <FightingFalcon> so i have to include new promise ? right. will you please correct it in a second?
[21:16:06] <ljharb> Rockwood: ?
[21:16:12] <wroathe> FightingFalcon: I literally explained why that wasn't working to you yesterday
[21:16:21] <wroathe> FightingFalcon: And so did DPA
[21:16:22] <FightingFalcon> wroathe, I DONT UNDERSTAND!
[21:16:45] <Rockwood> ljharb, cheers but you can't hold glasses :D
[21:16:54] <wroathe> FightingFalcon: That's because you refuse to put in the work to read. You'd rather force as many strangers as it takes to try explaining it until you get it.
[21:16:56] <comatory> FightingFalcon: And you are also not calling the `hello` function.
[21:17:24] <FightingFalcon> wroathe, all those links you gave me are for advanced users
[21:17:29] <comatory> FightingFalcon: https://paste.debian.net/1200576/
[21:17:44] <wroathe> FightingFalcon: No, they're not. Eloquent JS will teach you the language from the ground up
[21:17:56] <comatory> FightingFalcon: start here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises
[21:18:02] <wroathe> FightingFalcon: https://eloquentjavascript.net/ See (Part 1: Language)
[21:18:03] <FightingFalcon> thanks
[21:18:38] <wroathe> FightingFalcon: Hell, the second paragraph of the first chapter explains what a value is. How is that advanced?
[21:18:49] <wroathe> Err, second section I should say.
[21:18:55] <comatory> FightingFalcon: I think it's good to start out with callbacks and `setTimeout` and then move on to promises. Callbacks are not special, they are jast argument that is a function.
[21:18:58] <FightingFalcon> wroathe, im talking about aync programming
[21:19:16] *** Joins: cthulchu_ (~Cthulchu@195.66.198.226)
[21:19:24] <wroathe> FightingFalcon: Indeed. If you want to learn about async programming, read the chapter on async programming. async programming is an "advanced" feature
[21:19:28] <FightingFalcon> im trying to understand what the hell async programming is and it suddenly hops to () =>, thens, this's and stuff
[21:20:04] <FightingFalcon> There was a guide, i read, which said async and await does what promises do. so i thought you dont need to use it
[21:20:18] *** Quits: Rockwood (~Rocky@223.225.80.135) (Quit: The Time is Over)
[21:20:20] <wroathe> FightingFalcon: Well, that book isn't the only resource on async programming. There are tens or maybe even hundreds of thousands on them.
[21:20:54] <wroathe> FightingFalcon: Hell, this chapter https://eloquentjavascript.net/11_async.html explains what async programming is from the ground up.
[21:21:04] <comatory> FightingFalcon: This is reimplementation of your example with simple callback https://paste.debian.net/1200577/
[21:21:49] <comatory> FightingFalcon: You sound like you should read some basics again. () => is just a shorthand for `function() {}`
[21:21:51] <FightingFalcon> I was reading it, it suddenly proceeded to advaned crow civilization
[21:22:01] <FightingFalcon> comatory, wait i will show you
[21:22:29] <comatory> FightingFalcon: `async` and `await` is just a nice way of using promises. You can use promises without them by calling `promise.then(...`) on them.
[21:22:35] <FightingFalcon> https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial
[21:22:52] <FightingFalcon> comatory, but you "must" use promises even with async and await right?
[21:23:06] <FightingFalcon> look at this tutorial wroathe, how is that simple?
[21:23:38] <comatory> FightingFalcon: It's not hard if you understand Promise API and concept of passing functions as arguments.
[21:23:57] <FightingFalcon> comatory, since yesterday i have a better grasp
[21:23:57] *** Joins: CookE[] (~thedawn@user/thedawn)
[21:23:58] <wroathe> FightingFalcon: You're trying to learn an advanced concept with a beginners understanding of the language
[21:24:09] <wroathe> FightingFalcon: You will not understand, at all, until you build on the fundamentals
[21:24:27] <FightingFalcon> wroathe, because i needed it in my site
[21:24:48] <comatory> FightingFalcon: So maybe you need to go back a little bit. Start with simple functions. Pass other functions and arguments. Learn what anonymous functions are. From then on read and experiment with `setTimeout` and `setInterval`. After that read about Promise API. And in the end, learn what `async/await` does. You will understand it my firend.
[21:24:58] <wroathe> FightingFalcon: Then just use callbacks until you have time to commit to building a foundation
[21:25:03] *** Quits: Guest532 (~niflce@user/niflce) (Read error: Connection reset by peer)
[21:25:11] <wroathe> FightingFalcon: And quit taking on jobs before you know what you're doing.
[21:25:18] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[21:25:21] <FightingFalcon> wroathe, its NOT a job. My personal web site
[21:25:24] <FightingFalcon> thanks comatory
[21:25:26] <comatory> FightingFalcon: You have to be patient. If you just start hacking and throwing something on your site without understanding, it will only frustrate you more.
[21:25:54] <eN_Joy> trying to figure how this bow-tie graph is generated: https://www.similarweb.com/website/6park.com/#referrals
[21:25:55] <wroathe> FightingFalcon: Well, if it's your personal site you're not under any deadline constraints, and so you've got all of the time in the world to build a foundation that will help you understand
[21:26:05] <FightingFalcon> yes
[21:26:24] *** Quits: cthulchu_ (~Cthulchu@195.66.198.226) (Ping timeout: 252 seconds)
[21:26:41] <wroathe> FightingFalcon: You should commit to reading Eloquent JS from cover to cover.
[21:27:08] <eN_Joy> i believe the script at work is this: (minified js) https://www.similarweb.com/scripts/bundles/result-websites.js?version=20210608.0.0000000
[21:27:30] <FightingFalcon> wroathe, i guess so
[21:27:42] <wroathe> FightingFalcon: Most of us read multiple books on our languages of choice while working.
[21:28:18] <FightingFalcon> im just impatient :/
[21:28:23] <eN_Joy> and the source is here: https://github.com/metaloha/jQuery.awesomeCloud.plugin/blob/master/jquery.awesomeCloud-0.2.js but I am pulling my hair to figure how eventually the graph is generated, can some shed lights? thanks
[21:28:39] <wroathe> FightingFalcon: Well, you're not making any progress, and so your impatience is doing you a disservice.
[21:28:44] <wroathe> FightingFalcon: Slow and steady wins the race
[21:28:51] <FightingFalcon> yes
[21:28:51] <comatory> FightingFalcon: Start with 1. Functions (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions) 2. Callbacks (https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) 3. Arrow functions (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) 4. setTimeout and setInterval, skip `requestAnimationFrame` just read about the two
[21:28:53] <comatory> (https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals) 5. Promise API (https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises) and (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) 6. async/await (https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)
[21:29:06] <wroathe> comatory: You're not helping
[21:29:07] <FightingFalcon> comatory, wow thanks a lot
[21:29:56] <comatory> wroathe: How come? MDN is pretty good resource.
[21:30:07] <FightingFalcon> please
[21:30:11] <FightingFalcon> dont argue because of me.
[21:30:16] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[21:30:54] *** Quits: happymeal` (~happymeal@75-28-166-198.lightspeed.tukrga.sbcglobal.net) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[21:30:58] *** Quits: CookE[] (~thedawn@user/thedawn) (Quit: Leaving)
[21:31:13] *** Joins: happymeal (~happymeal@user/happymeal)
[21:31:15] *** Joins: fef (~thedawn@user/thedawn)
[21:32:42] <comatory> FightingFalcon: you're welcome. I wish you best luck and patience.
[21:32:48] <FightingFalcon> thanks
[21:34:15] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[21:34:27] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Quit: leaving)
[21:39:41] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 252 seconds)
[21:40:46] *** Quits: OnkelTem (~OnkelTem@user/onkeltem) (Ping timeout: 268 seconds)
[21:41:34] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (*.net *.split)
[21:42:23] <DPA> n> [1,,,,,2]
[21:42:24] <jellobot> (okay) [ 1, <4 empty items>, 2 ]
[21:42:38] *** Joins: OnkelTem (~OnkelTem@user/onkeltem)
[21:42:56] *** Quits: comatory (~ondrejsyn@cz7.datarail.eu) (Ping timeout: 264 seconds)
[21:44:21] <DPA> I just had a bug because of this and it took me a while to figure out. Why would anyone do this to a language!?!
[21:44:38] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[21:45:41] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[21:46:06] *** Joins: Betal (~Beta@user/betal)
[21:47:11] <ljharb> DPA: do what
[21:47:38] <ljharb> DPA: sparse arrays are bad, sure, but it’s pretty hard to create them by accident. if you’re using eslint with a common config it’ll warn on that.
[21:49:55] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 265 seconds)
[21:50:23] <DPA> Allowing multiple , and make it different from a single one.
[21:50:23] <DPA> Sometimes when I just need to do something simple, I type it up in a .html file, with no additional tooling.
[21:51:32] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[21:51:43] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[21:52:08] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[21:52:44] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[21:55:27] *** Joins: cthulchu_ (~Cthulchu@195.66.198.226)
[22:01:50] *** LSD is now known as acidsys
[22:02:47] *** acidsys is now known as l1b3ra
[22:03:02] *** l1b3ra is now known as acidsys
[22:03:24] *** Joins: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5)
[22:03:29] *** Quits: fbandov (~fbandov@2a02:8109:b6c0:ae7c:98a:984d:cc78:dff5) (Client Quit)
[22:12:27] <FightingFalcon> https://paste.debian.net/1200583/
[22:12:40] <FightingFalcon> please someone tell me WHY this code not working
[22:13:12] *** Quits: enoq (~enoq@194-208-146-143.lampert.tv) (Quit: enoq)
[22:18:29] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[22:21:11] <gehn> FightingFalcon, because that's not how promises work
[22:21:17] <gehn> also scope
[22:21:35] <FightingFalcon> gehn, but it says async functions always return a promise?
[22:21:58] <gehn> hello is not returning anything
[22:22:05] <gehn> yet you're treating it as if it does
[22:22:06] <slaughtr> let hmm = await hello(); - hello() is not an async function or returning anything
[22:22:18] <FightingFalcon>  return Promise.resolve("Hello"); ?
[22:22:23] <FightingFalcon> what this?
[22:22:29] <slaughtr> That's returning from the callback inside of setTimeout()
[22:22:41] <gehn> yes, not returning from hello
[22:22:51] <gehn> like I mentioned: scope
[22:23:06] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[22:23:06] <FightingFalcon> do i have to include new Promise ?
[22:23:25] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[22:24:01] <slaughtr> https://paste.debian.net/1200586/ - i believe this does what you expect
[22:24:26] <FightingFalcon> WHAT I DONT UNDERSTAND IS...
[22:24:40] <FightingFalcon> if async function always returns a promise, why do i have to create a new promise?
[22:25:03] <gehn> FightingFalcon, https://paste.debian.net/1200588/
[22:25:06] <slaughtr> ...because hello() is not an async function
[22:25:14] <gehn> ^
[22:25:29] <gehn> making a function async doesn't mean it'll return a promise that is of any use
[22:25:33] <gehn> just that it will return a promise
[22:25:48] <FightingFalcon> ah wait my bad
[22:25:54] <FightingFalcon> let me correct the code
[22:26:29] <gehn> probably better to think of it this way: a function must be declared async if you want to use await
[22:26:41] <gehn> rather than "async functions return promises", which they do
[22:27:51] <FightingFalcon> so you always have to create a new promise right?
[22:28:00] <gehn> no?
[22:28:23] <gehn> generally you use new Promise() when you have something that is asynchronous that does not use promises but you want to use promises
[22:28:29] <FightingFalcon> https://paste.debian.net/1200589/
[22:28:31] <gehn> setTimeout() for example is not a promise based API
[22:28:33] <FightingFalcon> check this code
[22:28:53] <gehn> so if you want to use a promise based API with setTimeout()  you need to create a promise
[22:28:56] <FightingFalcon> how come it doesnt wait until settimeout finishes, and then console.logs sssdddd ?
[22:29:13] <FightingFalcon> a
[22:29:14] <FightingFalcon> ah
[22:29:38] <gehn> yeah, await setTimeout() doesn't work and doesn't make sense
[22:29:46] <gehn> because setTimeout() does not return a promise, it's not promise based
[22:30:02] <gehn> the return value of set timeout is in fact useful, but it's not a promise
[22:30:02] *** Parts: jamesmar1inez (~keinbock@37.44.247.165) ()
[22:30:07] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[22:30:15] <FightingFalcon> i see
[22:30:25] <gehn> again, simply making a function async, or simply putting await on something doesn't mean it does what you wanted
[22:30:34] <FightingFalcon> Do you have to use async functions for a loop?
[22:30:44] *** Joins: makara (~sol@196.61.111.63)
[22:30:45] <gehn> it's probably better to learn promises in general before trying to learn async await
[22:30:59] <gehn> async await is effectively just syntactical sugar for promises
[22:31:11] *** Joins: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634)
[22:31:19] <gehn> you don't *have* to use async functions for anything, except if you want to use await
[22:31:27] <gehn> and you don't *have* to use await either
[22:31:34] <gehn> you can just use regular promises
[22:32:03] <gehn> so no, there's absolutely no connection between async functions and loops, not explicitly anyway
[22:32:54] <FightingFalcon> regular promises with .then ?
[22:36:17] *** Joins: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net)
[22:43:58] *** Joins: Naan (~Naan@user/naan)
[22:46:01] *** Joins: cactinoob (~cactinoob@adsl-64-237-237-9.prtc.net)
[22:46:04] <gehn> FightingFalcon, yes
[22:46:14] <FightingFalcon> https://paste.debian.net/1200590/
[22:46:34] <FightingFalcon> gehn check this please. in this example, js will wait until the loop finishes and then make the div visible right?
[22:47:05] <gehn> well, I would phrase it a bit differently, or think of it a bit differently
[22:47:25] <gehn> with synchronous code, the stack needs to empty
[22:47:35] <gehn> first stuff happens first, later stuff happens later
[22:47:47] *** Quits: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net) (Quit: Konversation terminated!)
[22:47:50] <gehn> first stuff must happen before later stuff because, well... that's just how most programming works
[22:48:16] <gehn> so yes, you could anthropomorphize the loop and say that the loop "waits", but that's not how I would think of it
[22:48:35] <FightingFalcon> So async programming is only necessary when you fetch something from somewhere else and need to wait for its result?
[22:48:50] *** Joins: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net)
[22:48:54] <gehn> it's necessary when some interface or action is asynchronous
[22:48:59] <gehn> some are, some aren't
[22:49:12] <gehn> node.js for example generally has both synchronous and asynchronous versions of many if not most functions
[22:50:36] <FightingFalcon> ok
[22:52:59] *** Quits: P1RATEZ (piratez@cpe98524ab27125-cm98524ab27123.cpe.net.cable.rogers.com) (Quit: if u've got swollen feet from sitting too long, get rid of that build up fluid...congestive heart failure imminent...)
[22:55:07] *** Joins: kakashiAL (~kakashi@ip-37-201-199-1.hsi13.unitymediagroup.de)
[22:57:22] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.1)
[22:59:27] *** Joins: sheetjs (~sheetjs@pool-173-54-145-7.nwrknj.fios.verizon.net)
[23:00:00] *** Quits: Buttercat (~Buttercat@user/buttercat) (Quit: Leaving.)
[23:01:26] *** Quits: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net) (Quit: Konversation terminated!)
[23:07:35] *** Quits: summersault (~summersau@2804:7f0:3886:c810:2130:6db7:5dde:9634) (Remote host closed the connection)
[23:08:37] *** Joins: Deide (~Deide@wire.desu.ga)
[23:08:37] *** Quits: Deide (~Deide@wire.desu.ga) (Changing host)
[23:08:37] *** Joins: Deide (~Deide@user/deide)
[23:09:33] *** Joins: chonkbit (~chonkbit@23-121-181-62.lightspeed.lsvlky.sbcglobal.net)
[23:12:05] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[23:12:10] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[23:12:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 252 seconds)
[23:13:56] *** hacks is now known as hax
[23:14:42] *** Quits: sheetjs (~sheetjs@pool-173-54-145-7.nwrknj.fios.verizon.net) (Remote host closed the connection)
[23:21:39] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[23:23:17] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[23:27:33] *** Quits: Swahili (~Swahili@cpc153693-lewi20-2-0-cust508.2-4.cable.virginm.net) (Ping timeout: 265 seconds)
[23:28:23] *** Joins: summersault (~summersau@179.177.255.163)
[23:30:12] *** Joins: saikub (saikub@saikub.fig.ircnow.org)
[23:34:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:34:53] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) ()
[23:34:53] <hendursaga> How do I combine lodash's FP style with ES modules? As in:   import { map, uniqBy, etc... } from "lodash-es"  but with functional programming support too.
[23:35:36] <hendursaga> Do I just add fp to the list, like { fp, map, etc.. } ?
[23:36:00] <hendursaga> Would the order matter at all??
[23:40:05] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[23:41:05] <hendursaga> https://github.com/lodash/lodash/issues/5107 suggests lodash-es hasn't been merged yet, but https://github.com/lodash/lodash/issues/4366#issuecomment-511485328 says that should be closed next major version..
[23:45:46] <GreenJello> hendursaga, is this for frontend or server code?
[23:45:57] *** ChanServ sets mode: -o GreenJello
[23:46:54] <hendursaga> GreenJello: I'm using Node
[23:49:50] <GreenJello> node's built in esm/commonjs interop isn't great, so you'd probably need to either use require for this dep, or import lodash from 'lodash/fp'; const { map } = lodash
[23:50:30] <GreenJello> unless they have a build of lodash fp that uses ESM natively
[23:50:44] <hendursaga> That, I'm not sure of
[23:51:28] <hendursaga> Meh, I guess I'm not using lodash enough to really want FP.. idk
[23:52:41] <GreenJello> if you're not using typescript, I'd very much avoid lodash/fp anyway
[23:53:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:53:24] <systemfault> And if you're using typescript, I'd very much avoid lodash/fp anyway...
[23:53:45] <GreenJello> if you are using TS, I'd consider it a valid preference that I don't share
[23:54:13] <systemfault> TS has its own FP libs taking advantage of its type system.
[23:54:26] <GreenJello> that's a good point
[23:55:02] <hendursaga> oh, I am using TS...
[23:55:18] <hendursaga> systemfault: such as?
[23:55:37] <systemfault> fp-ts, effect-ts... optics libs like monocles.. etc
[23:56:19] <hendursaga> so use them along with lodash or..?
[23:57:21] <systemfault> You would see a considerable overlap... and the lodash-based solutions would be inferior.
[23:57:31] <systemfault> But I imagine you could use both.
[23:58:21] <hendursaga> fair enough, I'll look into it, thanks
