[00:00:15] <geekosaur> I think something like HLS can do so. it'd be harder for ghci, which isn't very good at showing you the type of part of an expression
[00:01:13] <haskelln00b2> ic thx I've heard about HLS but don't know much about it ; I'll queue it up
[00:02:01] <haskelln00b2> so I'm trying to adapt what you showed ot write an equation like (id - round) . sqrt . fromIntegral
[00:02:13] <geekosaur> it'd an editor plugin that does things like telling you the type of something you point at
[00:02:29] <haskelln00b2> ah good to know thx
[00:04:46] <geekosaur> @let instance (Applicative t, Num a) => Num (t a) where (+) = liftA2 (+); (-) = liftA2 (-); (*) = liftA2 (*); negate = fmap negate; abs = fmap abs; signum = fmap signum; fromInteger = pure . fromInteger
[00:04:47] <lambdabot>  Defined.
[00:04:51] <geekosaur> :t (id - round) . sqrt . fromIntegral
[00:04:51] <lambdabot> (RealFrac c, Floating c, Integral c, Integral a) => a -> c
[00:06:33] <haskelln00b2> interesting thank you - so, "Num (t a)" instead of "Num (t->a)" ?
[00:06:52] <geekosaur> for any Applicative t, yes
[00:07:02] <geekosaur> functions have an Applicative instance. so do lists
[00:07:02] <haskelln00b2> oh i c
[00:07:35] <geekosaur> this btw is impossible to solve, because while there's no way to express it in the typesystem, you can't have a number which is both Floating (or RealFrac) and Integral
[00:08:06] <geekosaur> :t round
[00:08:06] <lambdabot> (RealFrac a, Integral b) => a -> b
[00:08:34] <geekosaur> :t fromIntegral (id - round) . sqrt . fromIntegral
[00:08:34] <lambdabot> error:
[00:08:35] <lambdabot>     • Could not deduce (Integral (a0 -> a0))
[00:08:35] <lambdabot>         arising from a use of ‘fromIntegral’
[00:08:49] <geekosaur> mm, right, didn't push the instancedown that far
[00:09:21] <geekosaur> :t (id - (fromIntegral . round)) . sqrt . fromIntegral
[00:09:22] <lambdabot> (RealFrac c, Floating c, Integral a) => a -> c
[00:09:31] <geekosaur> that one can exist
[00:09:44] <haskelln00b2> but I can force type it?
[00:09:55] <haskelln00b2> if I decorate it?
[00:10:16] <geekosaur> :t (id - round) . sqrt . fromIntegral
[00:10:16] <lambdabot> (RealFrac c, Floating c, Integral c, Integral a) => a -> c
[00:10:48] <haskelln00b2> :t fromIntegral . (id - round) . sqrt . fromIntegral
[00:10:49] <lambdabot> error:
[00:10:49] <lambdabot>     • Could not deduce (Integral a0)
[00:10:49] <lambdabot>         arising from a use of ‘fromIntegral’
[00:10:53] <geekosaur> you can describe the type. the problem is you need a type which simultaneously is a fraction (RealFrac) and is not a fraction (Integral)
[00:10:58] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[00:11:33] <geekosaur> you can't describe that incompatibility in Haskell's type system
[00:11:34] <haskelln00b2> so I need i2f.round
[00:11:46] <haskelln00b2> in (id - round)
[00:12:22] <geekosaur> right, which is why I added the extra fromIntegral
[00:12:29] <geekosaur> :t (id - (fromIntegral . round)) . sqrt . fromIntegral
[00:12:30] <lambdabot> (RealFrac c, Floating c, Integral a) => a -> c
[00:12:37] <haskelln00b2> ic
[00:12:53] <geekosaur> (RealFrac and Floating are compatible, unlike RealFrac and Integral)
[00:13:39] <haskelln00b2> ah - first time seeing all of these types , will need to internalize...
[00:14:05] <haskelln00b2> but thanks for the pointers
[00:14:22] <haskelln00b2> I'm doing this in complete isolation so it's pretty amazing to have this chat
[00:14:46] <geekosaur> learning the Num hierarchy will help you
[00:14:54] <geekosaur> @where Typeclassopedia
[00:14:54] <lambdabot> http://www.haskell.org/haskellwiki/Typeclassopedia
[00:15:12] <geekosaur> this page shows you the relationships between all the standard Haskell typeclasses
[00:15:28] <haskelln00b2> got it
[00:17:09] <geekosaur> I will also the Num hierarchy has nothing to do with how mathematicians classify numbers / numeric operations; it's all about making it more convenient to work with numbers the way one might expect
[00:17:28] <geekosaur> > 4 + 5.0 -- would be a type error otherwise
[00:17:30] <lambdabot>  9.0
[00:17:46] <haskelln00b2> sure makes sense
[00:20:27] <haskelln00b2> I guess typeclassopedia doesn't have the Num hierarchy , but I guess it's here : https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html#t:Num
[00:20:45] <geekosaur> old versions of SML/NJ required you to use different operators for integer vs. floating point addition, for example
[00:21:14] <geekosaur> becuase it (a) doesn't have typeclasses (b) went with a more mathematically inclined description of numbers
[00:21:32] <geekosaur> so you had to keep track of the type and use + or +. as appropriate
[00:23:35] <haskelln00b2> is there a general way to represent rings?  so, say, polynomial rings using a base ring or fields?  I see that there are some "alternative numeric preludes" but they don't seem super common.
[00:25:03] <haskelln00b2> for example, I see https://hackage.haskell.org/package/modular-arithmetic
[00:25:28] <haskelln00b2> but it's specific to modular arithmetic as opposed to treating it as an instance of a more general ring structure
[00:31:02] <geekosaur> I don't know to be honest. probably someone has written one but that's getting somewhat outside my level of math
[00:31:21] <geekosaur> (we're not all math PhDs; I'm a retired sysadmin)
[00:31:22] <haskelln00b2> ic thx I'll look
[00:31:46] <haskelln00b2> ok I won't assume math Ph.D.s all around :)
[00:33:21] <haskelln00b2> back to your instance declaration though, my ghci isn't liking it :     • Illegal instance declaration for ‘Num (t a)’
[00:42:35] <geekosaur> might need an extension
[00:44:18] <haskelln00b2> ic so {-# LANGUAGE FlexibleInstances #-}
[00:44:18] <haskelln00b2> import Control.Applicative (liftA2)
[00:44:19] <haskelln00b2> make it ok
[00:45:01] <geekosaur> right, I was figuring FlexibleInstances but it doesn't appear to be turned on in yahb
[00:45:05] <geekosaur> \yet it accepts it
[00:45:16] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:46:24] <haskelln00b2> :doc FlexibleInstances
[00:46:33] <haskelln00b2> :doc import
[00:46:37] <haskelln00b2> > :doc import
[00:46:38] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[00:47:04] <haskelln00b2> % :doc import
[00:47:05] <yahb> haskelln00b2: ; <interactive>:1:1: error: parse error on input `import'
[00:47:17] <haskelln00b2> % :doc FlexibleInstances
[00:47:17] <yahb> haskelln00b2: <has no documentation>
[00:47:34] <geekosaur> I think doc is currently limited to functions/operators
[00:47:43] <haskelln00b2> % :doc +
[00:47:44] <yahb> haskelln00b2: <has no documentation>
[00:47:48] <haskelln00b2> % :doc (+)
[00:47:48] <yahb> haskelln00b2: <has no documentation>
[00:47:53] <haskelln00b2> % :doc map
[00:47:54] <yahb> haskelln00b2:  \(\mathcal{O}(n)\). 'map' @f xs@ is the list obtained by applying @f@ to; each element of @xs@, i.e.,; > map f [x1, x2, ..., xn] == [f x1, f x2, ..., f xn]; > map f [x1, x2, ...] == [f x1, f x2, ...]; >>> map (+1) [1, 2, 3]; [2,3,4]
[00:48:02] <haskelln00b2> ic
[00:48:29] <haskelln00b2> % :show imports
[00:48:30] <yahb> haskelln00b2: import Control.Applicative; import Control.Arrow; import Control.Concurrent; import Control.Concurrent.Chan; import Control.Concurrent.MVar; import Control.Concurrent.STM; import Control.Concurrent.STM.TChan; import Control.Concurrent.STM.TVar; import Control.Comonad.Store; import Control.Exception; import Control.Exception.Lens; import Control.Monad; import Control.Monad.Cont; import Control.Monad.Except; impo
[00:48:34] <geekosaur> probably needs the fat interface files feature that's coming up in 9.4 to do docs for typeclass methods
[00:48:46] <geekosaur> you can use %% to have it pastebin the output
[00:49:04] <haskelln00b2> fancy
[00:49:34] <haskelln00b2> %% :t fromIntegral
[00:49:35] <yahb> haskelln00b2: http://qp.mniip.com/y/47
[00:50:24] <haskelln00b2> % :showi language
[00:50:24] <yahb> haskelln00b2: base language is: Haskell2010; with the following modifiers:; -XBangPatterns; -XNoCUSKs; -XConstrainedClassMethods; -XConstraintKinds; -XDataKinds; -XNoDatatypeContexts; -XDefaultSignatures; -XDeriveAnyClass; -XDeriveDataTypeable; -XDeriveFoldable; -XDeriveFunctor; -XDeriveGeneric; -XDeriveLift; -XDeriveTraversable; -XDerivingStrategies; -XDerivingVia; -XDisambiguateRecordFields;
[00:50:56] <haskelln00b2> % :show prog
[00:50:56] <yahb> haskelln00b2: "<interactive>"
[00:51:05] <haskelln00b2> % :show editor
[00:51:05] <yahb> haskelln00b2: ""
[00:51:40] <haskelln00b2> I guess it doesn't have a way to tell you the version of ghci it's using
[00:52:22] <haskelln00b2> % :help
[00:52:22] <yahb> haskelln00b2:  Commands available from the prompt:; <statement> evaluate/run <statement>; : repeat last command; :{\n ..lines.. \n:}\n multiline command; :add [*]<module> ... add module(s) to the current target set; :browse[!] [[*]<mod>] display the names defined by module <mod>; (!: more details; *: all top-le
[00:52:31] <haskelln00b2> % :info
[00:52:31] <yahb> haskelln00b2: syntax: ':i <thing-you-want-info-about>'
[00:54:04] <geekosaur> % :show version
[00:54:04] <yahb> geekosaur: syntax: :show [args | prog | editor | stop | imports | modules | bindings | linker | breaks | context | packages | paths | language | targets]
[00:54:46] <haskelln00b2> is there a way to unify the two instance declarations?  seems a bit heavyweight to repeat it for various type combinations.  although I guess that goes to your earlier point about type sepcificity.
[00:57:08] <geekosaur> which instance declarations?
[00:57:29] <geekosaur> % System.Info.compilerVersion
[00:57:29] <yahb> geekosaur: Version {versionBranch = [9,0], versionTags = []}
[00:58:32] <haskelln00b2> nice - looks like I'm on geekosaur: Version {versionBranch = [9,0], versionTags = []}
[00:58:41] <haskelln00b2> oops 8,6
[00:58:58] <geekosaur> for the two I entered, the second one *is* the unified one
[00:59:22] <geekosaur> it supports any Applicative including functions
[00:59:34] <haskelln00b2> oh
[00:59:38] <haskelln00b2> let me try it
[01:00:11] <geekosaur> @let instance (Applicative t, Num a) => Num (t a) where (+) = liftA2 (+); (-) = liftA2 (-); (*) = liftA2 (*); negate = fmap negate; abs = fmap abs; signum = fmap signum; fromInteger = pure . fromInteger
[01:00:12] <lambdabot>  /sandbox/tmp/.L.hs:152:10: error:
[01:00:12] <lambdabot>      Duplicate instance declarations:
[01:00:12] <lambdabot>        instance [safe] (Applicative t, Num a) => Num (t a)
[01:00:20] <geekosaur> oh right, already reloaded it
[01:00:32] <geekosaur> % (sin^2 + cos^2) 3
[01:00:33] <yahb> geekosaur: ; <interactive>:15:1: error:; * No instance for (Num (Double -> Double)) arising from a use of `it'; (maybe you haven't applied a function to enough arguments?); * In the first argument of `print', namely `it'; In a stmt of an interactive GHCi command: print it
[01:00:47] <haskelln00b2> oh you're right
[01:00:59] <haskelln00b2> I got confused somewhere in my .hs
[01:01:04] <haskelln00b2> that's great
[01:01:14] <geekosaur> oh, put it in the wrong bot
[01:01:25] <geekosaur> > (sin^2 + cos^2) 3
[01:01:26] <lambdabot>  0.9999999999999999
[01:02:13] <geekosaur> which is actually (sin² x + cos² x = 1), or as close as IEEE floating point gets to it
[01:03:58] <haskelln00b2> :t sin
[01:03:58] <lambdabot> Floating a => a -> a
[01:04:04] <haskelln00b2> :t sin^2
[01:04:06] <lambdabot> Floating a => a -> a
[01:04:14] <haskelln00b2> :k ^
[01:04:15] <lambdabot> error: Operator applied to too few arguments: ^
[01:04:25] <haskelln00b2> :t ^2
[01:04:26] <lambdabot> error: parse error on input ‘^’
[01:04:29] <haskelln00b2> :k ^2
[01:04:30] <geekosaur> :t (^)
[01:04:30] <lambdabot> error: Operator applied to too few arguments: ^
[01:04:31] <lambdabot> (Integral b, Num a) => a -> b -> a
[01:05:04] <haskelln00b2> :t sin^2 + cos^2
[01:05:04] <geekosaur> we actually have 3 power operators with different restrictions
[01:05:05] <lambdabot> Floating a => a -> a
[01:05:33] <haskelln00b2> can I get ghci to print the type of ^ in some way?
[01:05:43] <geekosaur> I just showed it
[01:05:46] <geekosaur> :t (^)
[01:05:46] <lambdabot> (Integral b, Num a) => a -> b -> a
[01:06:00] <haskelln00b2> but then I'm confused how it gets applied to sin
[01:06:03] <haskelln00b2> :t sin
[01:06:04] <lambdabot> Floating a => a -> a
[01:06:04] <geekosaur> you need to wrap an operator in parentheses for most things
[01:06:41] <geekosaur> that's the Applicative instance for functions, then the Num instance for Applicatives that I defined
[01:07:12] *** Quits: Guest4339 (~julm@revolt129.abo.ilico.org) (Quit: leaving)
[01:07:32] *** Joins: julm (~julm@user/julm)
[01:07:45] <geekosaur> sin^2 acts like \x -> sin x ^ 2
[01:07:49] <haskelln00b2> hmm - I'm still not there yet :)
[01:07:57] <haskelln00b2> :t sin
[01:07:58] <lambdabot> Floating a => a -> a
[01:08:02] <haskelln00b2> :t (^)
[01:08:03] <lambdabot> (Integral b, Num a) => a -> b -> a
[01:08:11] <geekosaur> sin^2 + cos^2 acts like \x -> sin x ^ 2 + cos x ^ 2
[01:08:34] <haskelln00b2> I see that's the outcome
[01:08:39] <haskelln00b2> but I don't understand the mechanism
[01:08:45] <geekosaur> this comes from all the liftA2-s
[01:08:53] <geekosaur> in the instance definition
[01:09:24] <haskelln00b2> so is (^2) the Applicative in this case?
[01:10:41] <haskelln00b2> liftA2 :: (a -> b -> c) -> f a -> f b -> f c
[01:11:50] <haskelln00b2> well, I think it might be getting to the point where I need to turn in.  not sure I"m processing at this hour (in my timezone).
[01:12:03] <geekosaur> don't feel too bad, this is fairly tricky
[01:12:05] <haskelln00b2> thanks again for all the help.  this has been super useful and much appreciated.  I'll work thorugh.
[01:12:39] <haskelln00b2> all the best and hope to bump into you again at some point.
[01:12:42] <geekosaur> you need to work through how the Num and Applicative instances interact to figure out what'sgoing on
[01:13:08] <haskelln00b2> yeah will try to take it step by step with the various hierarchies pulled up so I can trace each application.
[01:13:21] <haskelln00b2> I see that there's a debugger too, perhaps that will help.
[01:13:57] <haskelln00b2> good night! (/day/afternoon/etc)
[01:14:00] <geekosaur> you may also find the ghc-vis package helpful
[01:14:22] <geekosaur> load it into ghci and have it show you how things are being evaluated
[01:28:15] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[01:33:29] *** Quits: haskelln00b2 (~haskelln0@94.177.118.126) (Quit: Client closed)
[02:17:37] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44)
[02:19:21] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44) (Client Quit)
[02:41:30] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[03:15:58] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[03:44:43] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[03:45:06] *** Joins: Kaipi (~Kaiepi@156.34.47.253)
[03:55:44] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44)
[04:18:01] *** Joins: liz_ (~liz@81.92.203.102)
[04:20:27] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Ping timeout: 252 seconds)
[04:25:00] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[04:25:17] *** Quits: liz_ (~liz@81.92.203.102) (Quit: Leaving)
[04:27:17] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[04:38:24] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:47:42] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[05:13:01] *** Joins: benin (~benin@183.82.26.94)
[05:17:00] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[05:41:23] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[05:46:25] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:48:17] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::45ee) (Ping timeout: 240 seconds)
[06:30:01] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:31:26] *** Joins: sander (~sander@user/sander)
[07:06:07] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Read error: Connection reset by peer)
[07:19:00] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44)
[07:42:30] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[07:59:40] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:cd54:b207:d3aa:c763)
[08:02:36] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:19c8:2a3e:4c40:5c44) (Ping timeout: 240 seconds)
[08:17:26] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[08:19:20] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[08:19:20] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 272 seconds)
[08:36:45] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:d2a9:cd54:b207:d3aa:c763) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:37:30] *** Joins: da39a3ee5e6b4b0d (~textual@67.23.55.162)
[08:46:03] *** Quits: da39a3ee5e6b4b0d (~textual@67.23.55.162) (Ping timeout: 256 seconds)
[08:49:20] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:cd54:b207:d3aa:c763)
[10:18:07] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[10:43:05] *** Joins: coot (~coot@213.134.190.95)
[10:47:32] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[11:20:39] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Quit: Leaving)
[11:29:27] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d2a9:cd54:b207:d3aa:c763) (Quit: Textual IRC Client: www.textualapp.com)
[11:35:00] *** Joins: haskelln00b (~haskelln0@94.177.118.146)
[11:45:28] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[11:57:28] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[11:57:53] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[12:19:41] *** Quits: haskelln00b (~haskelln0@94.177.118.146) (Ping timeout: 256 seconds)
[12:31:42] *** Joins: haskelln00b (~haskelln0@94.177.118.42)
[12:49:46] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[12:55:21] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:f55f:4f24:3a75:f78c)
[13:41:45] *** Joins: Midjak (~Midjak@82.66.147.146)
[13:45:22] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[13:45:23] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[13:50:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[13:51:37] *** Joins: hololeap (~hololeap@user/hololeap)
[14:23:21] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[14:54:15] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:f55f:4f24:3a75:f78c) (Quit: WeeChat 3.4)
[15:08:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:18:15] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[15:43:24] *** Quits: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[15:43:33] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 252 seconds)
[15:49:58] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[15:54:46] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:21:03] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[16:36:57] *** Quits: haskelln00b (~haskelln0@94.177.118.42) (Ping timeout: 256 seconds)
[16:55:24] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[17:27:35] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[17:28:40] *** Joins: zaquest (~notzaques@5.130.79.72)
[17:45:45] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:57:29] *** Joins: boborygmy (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:57:29] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:02:55] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[18:08:05] *** Joins: romesrf (~romes@198.177.63.94.rev.vodafone.pt)
[18:43:04] *** Joins: alt-romes (~romes@198.177.63.94.rev.vodafone.pt)
[18:44:46] *** Quits: romesrf (~romes@198.177.63.94.rev.vodafone.pt) (Ping timeout: 256 seconds)
[18:54:17] *** Quits: alt-romes (~romes@198.177.63.94.rev.vodafone.pt) (Ping timeout: 240 seconds)
[19:37:12] *** Joins: alt-romes (~romes@2001:8a0:6d13:9700:3d91:207e:6db1:ade)
[19:43:58] *** Joins: haskelln00b (~haskelln0@94.177.118.146)
[20:05:59] *** Quits: haskelln00b (~haskelln0@94.177.118.146) (Quit: Client closed)
[20:19:25] *** alt-romes is now known as romesrf
[20:37:32] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[20:46:51] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[20:53:43] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[21:04:14] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[21:09:28] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[21:46:32] *** Quits: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Ping timeout: 240 seconds)
[21:48:20] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:50:10] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:56:36] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:3d91:207e:6db1:ade) (Ping timeout: 240 seconds)
[22:02:22] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:5925:9a0c:3d64:35e6)
[22:08:00] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:5925:9a0c:3d64:35e6) (Ping timeout: 252 seconds)
[22:12:48] *** Joins: romesrf (~romes@2001:8a0:6d13:9700:5925:9a0c:3d64:35e6)
[22:18:26] *** Quits: romesrf (~romes@2001:8a0:6d13:9700:5925:9a0c:3d64:35e6) (Quit: WeeChat 3.4)
[22:26:31] *** Quits: adamcstephens (~m-2jewo5@129.153.21.50) (Remote host closed the connection)
[22:26:43] *** Joins: adamcstephens (~m-2jewo5@129.153.21.50)
[22:52:44] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[23:04:55] *** Joins: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl)
[23:39:34] *** Quits: merijn (~merijn@c-001-001-005.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
