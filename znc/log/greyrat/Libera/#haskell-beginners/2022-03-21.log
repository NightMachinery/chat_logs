[00:05:33] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[00:22:41] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[00:42:58] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[00:56:08] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[00:58:06] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: Connection closed)
[00:59:13] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[02:07:07] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:36:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[02:55:46] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 245 seconds)
[03:07:08] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[03:46:01] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[04:13:45] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[04:30:56] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:32:37] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[05:07:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:11:06] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:03:17] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:04:26] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 252 seconds)
[07:37:27] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[07:50:59] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[08:00:03] *** Quits: boborygmy__ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[08:01:41] *** Joins: boborygmy__ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[08:22:21] *** Quits: boborygmy__ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[08:32:56] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[08:33:55] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Ping timeout: 240 seconds)
[08:36:05] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:37:24] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[10:33:50] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[10:36:12] *** Joins: coot (~coot@213.134.190.95)
[11:08:11] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[11:42:01] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:59:53] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:28:10] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[12:30:09] *** Quits: Tarknce[m] (~incetarik@2001:470:69fc:105::1:bccb) (Quit: You have been kicked for being idle)
[12:52:02] *** Joins: coot (~coot@213.134.190.95)
[13:07:50] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[13:09:26] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[13:09:26] *** Joins: boborygmy__ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[13:18:57] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[13:21:21] *** Quits: boborygmy__ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[13:28:20] *** Joins: Pickchea (~private@user/pickchea)
[13:38:11] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[13:45:44] *** Joins: benin (~benin@183.82.26.94)
[13:51:25] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[14:38:34] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[15:40:24] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[15:41:19] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[15:42:38] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:01:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[16:13:53] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 252 seconds)
[16:15:51] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:16:41] *** Quits: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[16:25:33] *** Joins: boxscape_ (~boxscape_@134.171.45.198)
[16:28:37] *** Joins: boborygmy_ (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[16:58:42] *** Quits: boxscape_ (~boxscape_@134.171.45.198) (Ping timeout: 260 seconds)
[17:19:50] *** Joins: coot (~coot@213.134.190.95)
[17:30:10] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[18:46:46] *** Quits: dextaa (~DV@user/dextaa) (Quit: Ping timeout (120 seconds))
[18:47:11] *** Joins: dextaa (~DV@user/dextaa)
[18:50:00] *** Joins: karim (~karim@41.238.138.163)
[18:54:55] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[18:55:15] *** Joins: karim (~karim@41.238.138.163)
[19:05:30] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Ping timeout: 252 seconds)
[19:20:12] *** Quits: polyphem_ (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17) (Ping timeout: 240 seconds)
[19:28:03] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[19:29:48] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[19:31:17] *** Joins: polyphem (~rod@2a02:810d:840:8754:224e:f6ff:fe5e:bc17)
[19:36:58] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Read error: Connection reset by peer)
[19:40:05] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[19:58:03] *** Joins: Pickchea (~private@user/pickchea)
[20:19:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[20:20:53] *** Joins: hololeap (~hololeap@user/hololeap)
[20:25:02] *** Joins: vicfred (~vicfred@user/vicfred)
[20:25:23] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[20:36:47] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:55:54] *** Joins: lunand (~lunand@2a02:2149:8841:c400:9476:ae16:b9bd:afdf)
[21:00:02] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:05:01] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:14:20] *** Quits: lunand (~lunand@2a02:2149:8841:c400:9476:ae16:b9bd:afdf) (Quit: Client closed)
[21:32:00] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:33:16] *** Quits: benin (~benin@183.82.26.94) (Quit: The Lounge - https://thelounge.chat)
[21:42:44] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[21:42:55] *** Joins: karim (~karim@41.238.138.163)
[22:04:23] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[22:06:56] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[22:17:06] *** Joins: albertus (~albertus@dynamic-077-179-167-251.77.179.pool.telefonica.de)
[22:20:31] <albertus> I'm reading Haskell in Depth (Manning) and got somewhat stuck trying to understand the Reader monad from Control.Monad.Reader, and especially the MonadReader typeclass. what is "Monad m => MonadReader r m | m -> r"? what is this "m -> r" thing? The book says something with GHC extension FunctionalDependencies. any hint where I could read an introduction to that? and the book also says Reader
[22:20:37] <albertus> is not a monad, but "Reader r" is
[22:26:36] <albertus> what is MonadReader, and why does it need another monad "m", which would uniquely determine the payload type "r"?
[22:37:32] <geekosaur> https://downloads.haskell.org/ghc/9.0.2/docs/html/users_guide/exts/functional_dependencies.html and https://wiki.haskell.org/Functional_dependencies
[22:37:57] <geekosaur> "m -> r" means the choice of "m" determines the type of "r"
[22:40:28] <geekosaur> MonadReader allows the same code to be used for simple Reader, the ReaderT monad transformer, the RWS monad, and the RWST monad transformer. (Reader r is defined as ReaderT r Identity, where Identity is the trivial monad, and likewise for RWS with RWST.)
[22:43:16] <albertus> that sounds like a good forward-pointer embedding the topic in something "to be learned", thanks. and I guess it might be worth for me to take the time and read the paper by Mark P. Jones referenced in the User
[22:43:20] <albertus> 's guide
[22:43:28] <geekosaur> it's also used to allow Reader behavior to be "inherited" by other monad transformers, so for example we can have `newtype X a = StateT XState (ReaderT XConf) a` (where `XState` is writable state and `XConf` is read-only configuration) and then derive `MonadReader XConf` for X rather than have to know you have to use `lift` twice to reach the ReaderT
[22:44:58] <geekosaur> (and likewise derive `MonadState XState` so you don't have to know how many times to `lift` to reach that)
[22:46:02] <geekosaur> the hard part of understanding Reader is Reader itself, not this stuff :) it'sa bit mind-bending to realize that functions can be used that way
[22:47:00] <albertus> I guess I start appreciaiting that in chapter 6 on Monad Transformers, after the current chapter 5 :) so basically, for grokking "Reader", the "MonadReader r m" instance of "Reader r" is having "m = Reader r"... now on to wrapping my head around the type of "ask :: m r" - seems it is "(Reader r) r" then
[22:47:03] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[22:49:06] <albertus> starting to make sense in my head. carrying around something that can be read means being in the context (in the monad) of a "Reader of something", and "ask" returns that something while still being in that context
[22:49:06] <geekosaur> no, m is the same m as in MonadReader r m
[22:49:26] <geekosaur> hm, no, you had that right
[22:49:31] <geekosaur> yes
[22:50:01] <geekosaur> and if you unwrap the Reader you find that you're just accessing a function argument
[22:50:11] <geekosaur> @unmtl Reader r a
[22:50:11] <lambdabot> r -> a
[22:50:49] <geekosaur> that is, a value of type Reader r a is simply a function type r -> a
[22:51:05] <geekosaur> @unmtl ReaderT r m a
[22:51:05] <lambdabot> r -> m a
[22:53:27] <albertus> that's quite a nice bridge of thought. "Reader r" is a monad, and a value in that context is just a function retuning that value if I provide the thing that the context makes accessible inside itself
[22:54:21] <geekosaur> yes
[22:55:01] <albertus> you know your definitions are good if there are such sensible identities
[22:55:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[22:57:16] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[22:57:52] <geekosaur> sorry, my netwoprk glitches occasionally
[23:00:50] <albertus> so.... the Monad instance of Reader r is derived implicitly from some definition of ReaderT (which I might not yet be able to understand)? so there is no explicit implementation of >>= for Reader r, but it works anyway?
[23:02:28] <geekosaur> actually ReaderT itself is pretty trivial: newtype ReaderT r m a = ReaderT { runReaderT :: r -> m a }
[23:03:55] *** Joins: Pickchea (~private@user/pickchea)
[23:04:16] <albertus> hmm... I really like the mental challenges I get from Haskell seeming to be "magic" until I learn yet another twist (one order higher), when all of sudden it will fall into place in front of me
[23:04:29] <geekosaur> so the "function" runReaderT is actually just a named field that extracts the function
[23:06:49] <albertus> that carries a fascinating beauty. and I appreciate the type inference making so much sense and functionality (meaning "useful stuff") out of so little definition
[23:08:19] <geekosaur> and there's an explicit definition of >>= for ReaderT, but not for Reader (since Reader r is literally ReaderT r Identity, so it uses the >>= from ReaderT)
[23:09:17] <geekosaur> m >>= f runs m, then runs the result on f, thereby chaining the computation f together with m
[23:09:44] <albertus> that sounds like a generic description of any >>=
[23:13:04] <geekosaur> https://downloads.haskell.org/ghc/8.10.7/docs/html/libraries/transformers-0.5.6.2/src/Control-Monad-Trans-Reader.html#instance%20Monad%20(ReaderT%20r%20m)
[23:13:17] <geekosaur> it pretty much is, yes
[23:13:26] <geekosaur> but how exactly you do that differs for each monad
[23:15:32] <albertus> that's something I think I understood (finally when realizing IO is not special because it's a monad, i.e., monads are really just the contexts that know how to incorporate a function to transform their contained values)
[23:16:13] <albertus> s/incorporate/take in/
[23:16:40] <geekosaur> right
[23:16:52] <geekosaur> IO is a monad solely to support automatic sequencing
[23:17:05] <geekosaur> otherwise, it's special because it's IO
[23:17:23] <geekosaur> the *real* brain-warping monads are the list monad and Cont
[23:19:41] <albertus> hmm... so for list, I would have naively thought something along the lines of "isn't `map` just the same as >>=?"
[23:20:53] <albertus> but it must be more than that
[23:21:37] <geekosaur> it's onlly a little more than that, actually
[23:21:43] <geekosaur> it's map + concat
[23:22:05] <albertus> thinking of monads as being contexts for "a value" not for "several values" - so the list monad must incorporate a way of treating "multiple values" as just one value
[23:22:32] <geekosaur> which gets you very close to how a monad is mathematically defined: map is what haskell calls fmap, and concat is what haskell calls join
[23:22:42] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:23:44] *** Joins: karim (~karim@41.238.138.163)
[23:24:42] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:25:19] <albertus> great! thanks for the facilitation :) I think I can understand my current chapter on "Reader" with that sorted out :)
[23:27:15] *** Joins: karim (~karim@41.238.138.163)
[23:28:42] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:29:14] *** Joins: karim (~karim@41.238.138.163)
[23:30:12] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:32:32] *** Joins: karim (~karim@41.238.138.163)
[23:32:42] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:35:17] *** Joins: karim (~karim@41.238.138.163)
[23:36:12] *** Quits: karim (~karim@41.238.138.163) (Remote host closed the connection)
[23:36:37] *** Joins: karim (~karim@41.238.138.163)
[23:41:25] *** Quits: karim (~karim@41.238.138.163) (Ping timeout: 240 seconds)
