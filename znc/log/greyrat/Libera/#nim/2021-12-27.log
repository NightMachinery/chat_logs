[00:12:07] <FromDiscord> <yledu> hi↵I don't know if it's the right channel to ask :
[00:12:42] <FromDiscord> <yledu> I've downloaded nim using choosenim on my mac, everything compiled fine and all, but trying some examples `import random fails`
[00:13:37] <FromDiscord> <yledu> It tells me "cannot open random"
[00:15:27] <FromDiscord> <yledu> Some random is in math I found out, but not rand() for example which is used in the nim by example
[00:16:36] <FromDiscord> <Yardanico> In reply to @yledu "Some random is in": can you show all of your code ?
[00:17:09] <FromDiscord> <yledu> sent a code paste, see https://play.nim-lang.org/#ix=3JBr
[00:17:34] <FromDiscord> <yledu> taken from https://nim-by-example.github.io/if_else_while/
[00:19:41] <FromDiscord> <yledu> I must have a path problem, but I did follow all instructions there:↵https://nim-lang.org/install_unix.html↵with choosenim
[00:26:29] *** Quits: ozzz (~oz@46.49.41.80) (Remote host closed the connection)
[00:29:10] <FromDiscord> <yledu> any idea ?
[00:56:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:03:22] *** Joins: ozzz (~oz@46.49.41.80)
[01:04:27] <FromDiscord> <Elegantbeef> `nim -v`?
[01:04:27] <FromDiscord> <Elegantbeef> Can you elaborate i dont quite follow?↵(@sOkam!)
[01:07:08] <FromDiscord> <Elegantbeef> Are you asking why use macros to generate the code from the json?
[01:07:34] <FromDiscord> <evoalg> In reply to @yledu "any idea ?": one thing you could try and remove choosenim (`rm -fr ~/.config/nim/`) and install nim via brew?
[01:07:46] <FromDiscord> <evoalg> (edit) "and" => "is"
[01:08:48] <FromDiscord> <evoalg> brew for mac has the latest nim version (1.6.2)
[01:08:49] <FromDiscord> <Elegantbeef> Or just check your nim version and make sure it's modern
[01:09:29] <FromDiscord> <Elegantbeef> Given that i jump around versions i'm a bit biased against system installed packages
[01:09:46] <FromDiscord> <evoalg> oh yea do `nim -v` first like beef said @yledu
[01:09:46] <FromDiscord> <TryAngle> In reply to @Solitude "works on playground https://play.nim-lang.org/#ix=3": hmmm... sus 😳
[01:09:48] <FromDiscord> <Elegantbeef> So after playing with the iterator macros, evo likey?
[01:10:37] <FromDiscord> <Elegantbeef> try running with a broken compiler
[01:10:41] <FromDiscord> <Elegantbeef> shame on try
[01:18:15] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3JBH
[01:19:05] <FromDiscord> <Elegantbeef> You dont really need to of course
[01:19:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JBI
[01:19:50] <FromDiscord> <Elegantbeef> So yea it's probably 100% useless
[01:20:21] <FromDiscord> <Elegantbeef> I have ideas that make me go "Hey this would solve X" then realize "hey that's dumb"
[01:20:52] <FromDiscord> <Elegantbeef> What i actually want to do but cannot reason how is chaining iterators
[01:21:14] <FromDiscord> <evoalg> hehe ... I am learning the right way to do things by test all this stuff, which is awesome
[01:21:35] <FromDiscord> <Elegantbeef> so like `for x in filter(map(a, x  10),  x >= 100)`
[01:21:55] <FromDiscord> <evoalg> yea chaining iterators would be so awesome, and that's what attracts people to functional programing I think?
[01:22:17] <FromDiscord> <Elegantbeef> which i guess could be achieved by doing `for x in chain(a.map(x  10).filter(x >= 10))`
[01:22:48] <FromDiscord> <TryAngle> In reply to @Elegantbeef "shame on try": literally reinstalled nim XD https://media.discordapp.net/attachments/371759389889003532/924781821965766697/unknown.png
[01:23:33] <FromDiscord> <Elegantbeef> Really though i just need to reason how to poop out the iterators in such a way that iterators are inlined at `yield` points
[01:23:41] <FromDiscord> <sOkam!> In reply to @Elegantbeef "Can you elaborate i": I get that macros create a desired AST, but I don't get why "a bunch of procedures" will need custom restructuring of the AST↵In my current understanding, the godot api is just a bunch of procedures/types that need some "mapping", so that they exist in nim syntax↵What I don't know is how is the AST related to that, if the ast is used for creating new custom structures (like the walrus o
[01:23:46] <FromDiscord> <Elegantbeef> Which isnt that difficult just gets complicate
[01:24:15] <FromDiscord> <Elegantbeef> Ok so the reason is say you want to do `SomeNode` which inherits `Node`
[01:24:29] <FromDiscord> <Elegantbeef> You need to know in Nim the methods and fields `Node` has and have them map to the GD native code
[01:24:35] <FromDiscord> <Elegantbeef> This way you can properly write code for godot
[01:25:05] <FromDiscord> <Elegantbeef> What's' the entire module Try?
[01:25:18] <FromDiscord> <TryAngle> @Solitude @ElegantBeef I think I found the issue now maybe?
[01:26:01] <FromDiscord> <TryAngle> Calling it in NNFS project works↵calling it from the library I'm developing and testing in another does not
[01:26:03] <FromDiscord> <Elegantbeef> You had T somewhereelse in the module?
[01:27:27] <FromDiscord> <Elegantbeef> Also AST isnt for custom structures
[01:27:34] <FromDiscord> <Elegantbeef> AST is legitimately everything you write
[01:27:47] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JBL
[01:28:15] <FromDiscord> <Elegantbeef> It's a VarSection with an identDef of `"a", emptyNode(), 100`
[01:30:29] <FromDiscord> <TryAngle> hmmm maybe its an issue with nimble devlop and generics withhin templates?
[01:30:53] <FromDiscord> <Elegantbeef> That doesnt make any sense really
[01:31:31] <FromDiscord> <TryAngle> test it make a project add this template & proc there, nimble develop it and call it from another project
[01:31:44] <FromDiscord> <TryAngle> when I create it in the same project it works
[01:32:13] <FromDiscord> <sOkam!> @ElegantBeef About the architecture. How does nim code actually interact with the original code?↵Is it some type of translation on compile timer or smth? or how does it work, roughly?
[01:32:28] <FromDiscord> <sOkam!> (edit) "timer" => "time"
[01:32:50] <FromDiscord> <Elegantbeef> You use the C code in the header and do everything required to let Godot know about your "classes"
[01:33:23] <FromDiscord> <Elegantbeef> Do you have the link for the godot extension repo
[01:33:31] <FromDiscord> <sOkam!> ye, its godot-headers
[01:33:32] <FromDiscord> <Elegantbeef> I dont have it on hand atm
[01:33:42] <FromDiscord> <Elegantbeef> Thanks
[01:33:49] <FromDiscord> <sOkam!> https://github.com/godotengine/godot-headers
[01:34:02] <FromDiscord> <sOkam!> Master is the gdextension branch
[01:34:12] <FromDiscord> <Elegantbeef> https://github.com/godotengine/godot-headers/blob/master/godot/gdnative_interface.h#L447-L454
[01:34:20] <FromDiscord> <Elegantbeef> these are percisely how you let it know
[01:34:50] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[01:36:29] <FromDiscord> <sOkam!> Ok. So you interact with those functions to let C know about nim procs↵But how does the interaction work?
[01:36:59] <FromDiscord> <sOkam!> I understand that that interaction is what I'm going to be designing... so that's what my Q is about mainly
[01:37:32] <FromDiscord> <sOkam!> Trying to design the model for what the generator is going to actually be doing... but kinda lost
[01:37:41] <FromDiscord> <sOkam!> (edit) "model" => "model/architecture"
[01:37:57] <FromDiscord> <Elegantbeef> If you want an example compile a `godot-nim` project with `--expandMacro:gdobj` to see what it does
[01:38:32] <FromDiscord> <sOkam!> you mean a godot game project?
[01:38:57] <FromDiscord> <Elegantbeef> Works fine here @TryAngle
[01:38:58] <FromDiscord> <Elegantbeef> It wont be the same for Godot extensions of course but it's atleast the basic idea
[01:39:14] <FromDiscord> <sOkam!> or just compiling the godot-nim bindings themselves?
[01:39:20] <FromDiscord> <Elegantbeef> Yea
[01:39:42] <FromDiscord> <Elegantbeef> You emit a bunch of top level instructions that subscribe the code to the godot environment
[01:39:58] <FromDiscord> <Elegantbeef> Yea using a godot game project that uses the `gdobj` example
[01:40:06] <FromDiscord> <Elegantbeef> `gdobj` macro\
[01:40:21] <FromDiscord> <Shiba> so my hello world program compiles in 3s with d:release
[01:40:32] <FromDiscord> <Shiba> can i optimiz it further
[01:40:38] <FromDiscord> <Shiba> (edit) "optimiz" => "optimize"
[01:40:46] <FromDiscord> <Yardanico> use clang, also consequent compilations are faster
[01:40:47] <FromDiscord> <frankzig> Are you guys aware of bucket queue implementations for Nim?↵Heapqueue is perfect for most intents, I need approximate priority handling in order to reduce that LogN complexity
[01:43:53] <FromDiscord> <frankzig> In reply to @Shiba "so my hello world": Joking: Yes, enable LTO, it will compile slower but run faster ;)
[01:43:57] <FromDiscord> <Shiba> In reply to @Yardanico "use clang, also consequent": ?? sorry can you explain "consequent compilations" and how i can use it😅
[01:44:24] <FromDiscord> <Yardanico> if you compile again and only change some code nim won't recompile all C files
[01:44:58] <FromDiscord> <Elegantbeef> yardanico mean subsequent compilations
[01:45:09] <FromDiscord> <Shiba> but i only have one fille with "echo "hello world"" andit's still 3s
[01:45:16] <FromDiscord> <Shiba> (edit) "andit's" => "and it's"
[01:45:21] <FromDiscord> <Shiba> wow
[01:45:24] <FromDiscord> <Yardanico> well you gotta deal with that
[01:45:28] <FromDiscord> <Yardanico> get a faster CPU :))
[01:45:35] <FromDiscord> <Yardanico> things should improve with IC
[01:45:50] <FromDiscord> <Elegantbeef> You could also use TCC if it's the c compiler but it's not as optimized code
[01:46:13] <FromDiscord> <frankzig> It cannot be avoided, on the other hand, it does scaly as badly as other languages, so longer scripts still compile in reasonable time
[01:46:24] <FromDiscord> <frankzig> (edit) "does" => "doesnt"
[01:46:25] <FromDiscord> <Shiba> In reply to @Elegantbeef "You could also use": i have it ,but idk how
[01:46:33] <FromDiscord> <Elegantbeef> `--cc:tcc`
[01:46:38] <FromDiscord> <Elegantbeef> On \nix atleast
[01:46:45] <FromDiscord> <Elegantbeef> On windows i think there is more of a setup
[01:47:03] <FromDiscord> <Yardanico> also @Shiba this only speeds up the C compilation part
[01:47:09] <FromDiscord> <Yardanico> it doesn't change the speed of the nim compilation part
[01:47:18] <FromDiscord> <Yardanico> so if you run your compile command more than 1 time and it's still 3s - that's nim time
[01:47:20] <FromDiscord> <Yardanico> not C compiler time
[01:47:36] <FromDiscord> <yledu> @evoalg @ElegantBeef Thanks ! it allowed me to see that I had the wrong nim version, a very old one from 2014! I then used `choosenim show path` and that gave me the right path to add to my .bash_profile
[01:48:01] <FromDiscord> <evoalg> nice!
[01:48:42] <FromDiscord> <sOkam!> @ElegantBeef Is this not exactly what I would be coding?↵https://github.com/pragmagic/godot-nim/blob/master/godot/godotapigen.nim
[01:48:54] <FromDiscord> <Shiba> In reply to @Yardanico "not C compiler time": i wonder why embeded languages like lua run super fast , maube because they don't compile
[01:49:04] <FromDiscord> <Yardanico> In reply to @Shiba "i wonder why embeded": not "maybe", that's exactly the reason :D
[01:49:06] <FromDiscord> <Shiba> (edit) "maube" => "maybe"
[01:49:13] <FromDiscord> <Yardanico> and the term you're looking for is "interpreted"
[01:49:18] <FromDiscord> <sOkam!> Ofc, adapting to gdextension... but seems like most of the work should be done there? possibly? or am I missing something big
[01:49:50] <FromDiscord> <Elegantbeef> Nope you're mostly right
[01:50:24] <FromDiscord> <Elegantbeef> They didnt document the code much though so it's a slog to try to understand
[01:58:00] <FromDiscord> <sOkam!> Good news is they were already binding with a json file, so at least that's similar 🤷‍♂️
[01:58:17] <FromDiscord> <sOkam!> I really thought it was done with an autowrapper
[02:00:37] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3JBU
[02:01:07] <FromDiscord> <Elegantbeef> Most interpreted languages are not statically typed so a good type system 😛
[02:01:25] <FromDiscord> <evoalg> what beef said!
[02:02:22] <FromDiscord> <Shiba> In reply to @evoalg "a short program that": do all imported scripts compile
[02:02:30] <FromDiscord> <Shiba> (edit) "In reply to @evoalg "a short program that": do all imported scripts compile ... " 03added "in one time"
[02:02:49] <FromDiscord> <Shiba> (edit) "In reply to @evoalg "a short program that": do all imported scripts compile in ... one" 03added "all running scripts in"
[02:03:42] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[02:03:55] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[02:04:12] <FromDiscord> <Shiba> idk if that makes sense
[02:04:14] <FromDiscord> <evoalg> you mean when you do something like "import random" in your nim source file? ... it will import the random source (but only the part you actually use!) and will compile that along with your nim code (I belive)
[02:04:23] <FromDiscord> <Elegantbeef> It presently imports the entire file and semantically checks it all
[02:04:36] <FromDiscord> <Elegantbeef> Lazysem is a think that is being looked at, which will only look at what you actively use
[02:04:43] <FromDiscord> <Elegantbeef> "is a thing"
[02:05:14] <FromDiscord> <Shiba> not a problem since all of my programs are written in one file
[02:05:29] <FromDiscord> <Shiba> (edit) "file" => "file😜"
[02:05:33] <FromDiscord> <KatrinaKitten> Is there a way to call a proc which is stored as a property on an object? Trying to just do `object.property(params)` gives an error `identifier expected, but found 'object.property'`.
[02:06:13] <FromDiscord> <Elegantbeef> That's how you d oit
[02:06:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JBW
[02:07:54] <FromDiscord> <KatrinaKitten> Hmm... is it possibly an issue with the fact that the property is declared `var`? If so, is there a way to work around that?
[02:08:09] <FromDiscord> <Elegantbeef> What?
[02:09:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JBX
[02:09:29] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3JBY
[02:09:44] <FromDiscord> <KatrinaKitten> (edit) "https://play.nim-lang.org/#ix=3JBY" => "https://play.nim-lang.org/#ix=3JC0"
[02:10:11] <FromDiscord> <Solitude> var shouldnt be there
[02:10:43] <FromDiscord> <KatrinaKitten> It needs to be there, the proc can be `nil` and needs to be changeable. I'm doing a manual `nil` check directly before the call in my actual code.
[02:10:47] <FromDiscord> <Elegantbeef> indeed
[02:10:57] <FromDiscord> <Solitude> .
[02:10:57] <FromDiscord> <Elegantbeef> `var proc` isnt a type deef
[02:11:04] <FromDiscord> <Elegantbeef> remove `var` from your object definition
[02:11:23] <FromDiscord> <Elegantbeef> field mutability depends on object mutabillity
[02:11:57] <FromDiscord> <KatrinaKitten> So why was the error nothing related to "hey idiot, don't use `var` there"?
[02:12:02] <FromDiscord> <KatrinaKitten> Just removing it results in `'parser1.body' cannot be assigned to`
[02:12:06] <FromDiscord> <KatrinaKitten> (edit) "Just removing it results in `'parser1.body' cannot be assigned to` ... " 03added "from elsewhere."
[02:12:21] <FromDiscord> <Solitude> declare your p with var
[02:12:42] <FromDiscord> <Solitude> https://nim-lang.github.io/Nim/tut1.html#the-var-statement
[02:12:55] <FromDiscord> <Elegantbeef> methinks the views has escaped the flags
[02:13:10] <FromDiscord> <Elegantbeef> Cause `var T` should error without `--experimental:views`
[02:13:27] <FromDiscord> <KatrinaKitten> In reply to @Solitude "declare your p with": That isn't really an option, this is an API thing. It's intended to be essentially an invisible replacement, it shouldn't rely on the user declaring with `var`.
[02:14:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JC1
[02:14:36] <FromDiscord> <Solitude> In reply to @KatrinaKitten "That isn't really an": make your type a ref. your code doesnt do what you think ti does
[02:15:02] <FromDiscord> <Solitude> or make a better api
[02:15:09] <FromDiscord> <Elegantbeef> Indeed `var T` in a type definition is for views, and apparently a fix has leaked into views disabled
[02:15:32] <FromDiscord> <Elegantbeef> Weirder even that `var T` compiles in 1.0
[02:15:32] <FromDiscord> <Shiba> can you acces memory?
[02:15:35] <FromDiscord> <Elegantbeef> So the hell is going on
[02:15:41] <FromDiscord> <Solitude> no, you should use rust for that
[02:16:09] <FromDiscord> <Elegantbeef> Depends what you mean by access memory
[02:17:48] <FromDiscord> <Shiba> accessing by modifiying variables adresses and vallues in hex ...
[02:18:07] <FromDiscord> <Elegantbeef> It's a system language so yes you have that control
[03:11:06] <FromDiscord> <evoalg> @ElegantBeef when you did `b = "\10\20\30\40"` ... what is that sort of string?
[03:11:33] <FromDiscord> <Elegantbeef> It's a normal string
[03:11:58] <FromDiscord> <Elegantbeef> `\number` is a char escape that equates to `char(theByte)`
[03:12:22] <FromDiscord> <Elegantbeef> So the 10th ascii character is written, then the 20th, 30th ...
[03:14:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JCc
[03:14:23] <FromDiscord> <Elegantbeef> This is just getting silly
[03:15:21] <FromDiscord> <evoalg> I'll have a play 😉
[03:15:36] <FromDiscord> <Elegantbeef> Lol it's not pushed yet
[03:15:42] <FromDiscord> <Elegantbeef> I'm still questioning if it makes any sense
[03:15:49] <FromDiscord> <evoalg> ahh true
[03:16:10] <FromDiscord> <evoalg> zip and zipIter are the same thing except I use zipIter in a for loop right?
[03:16:39] <FromDiscord> <Elegantbeef> Well "same"
[03:16:46] <FromDiscord> <Elegantbeef> They're vastly different implementations
[03:16:59] <FromDiscord> <evoalg> I can pass the same args?
[03:17:13] <FromDiscord> <Elegantbeef> Yea
[03:17:51] <FromDiscord> <evoalg> I guess I can use slicerator zip in the for loop but zipIter is more efficient
[03:23:08] <FromDiscord> <Elegantbeef> Neither are overly performant if you have a fixed size collection
[03:23:11] <FromDiscord> <Spook> nigga
[03:23:21] <FromDiscord> <Spook> semen
[03:23:21] <FromDiscord> <Spook> semen
[03:23:22] <FromDiscord> <Spook> semen
[03:23:22] <FromDiscord> <Spook> semen
[03:23:23] <FromDiscord> <Spook> semen
[03:23:25] <FromDiscord> <moggo> fucking niggers
[03:23:31] <FromDiscord> <moggo> niger ngien
[03:23:32] <FromDiscord> <moggo> gengeingeigeg
[03:23:33] <FromDiscord> <moggo> egegemg
[03:23:33] <FromDiscord> <moggo> enege
[03:23:34] <FromDiscord> <moggo> nge
[03:23:34] <FromDiscord> <moggo> ng
[03:23:34] <FromDiscord> <moggo> eng
[03:23:51] <FromDiscord> <Spook> https://tenor.com/view/redo-of-healer-redo-of-a-healer-redo-of-the-healer-anime-anime-girl-gif-20602961
[03:23:53] <FromDiscord> <ElegantBeef> <@&371760044473319454>
[03:24:10] <FromDiscord> <moggo>  https://media.discordapp.net/attachments/371759389889003532/924812361859207168/2Q.png
[03:24:10] <FromDiscord> <Yardanico> thanks
[03:24:12] <FromDiscord> <moggo>  https://media.discordapp.net/attachments/371759389889003532/924812370419777596/2Q.png
[03:24:12] <FromDiscord> <moggo>  https://media.discordapp.net/attachments/371759389889003532/924812371904577536/2Q.png
[03:24:45] <FromDiscord> <Elegantbeef> Probably should also delete it from matrix since apparently image uploads deletion dont propagate
[03:26:07] <FromDiscord> <evoalg> beef are you on discord as well as matrix?
[03:26:14] <FromDiscord> <Elegantbeef> I am
[03:26:22] <FromDiscord> <Elegantbeef> Cant ping moderators from here 😛
[03:27:08] <FromDiscord> <Elegantbeef> Useless speed increase code
[03:27:09] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JCg
[03:27:11] <FromDiscord> <Yardanico> i'm not an admin in here
[03:29:41] <FromDiscord> <retkid> so im running something i barely have enough memory for
[03:29:54] <FromDiscord> <retkid> i have it on a while true loop
[03:30:04] <FromDiscord> <retkid> heres hoping every iteration it can return to 0 memory usage
[03:30:14] <FromDiscord> <retkid> otherwise this will get very annoying
[03:30:16] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:22] <FromDiscord> <Yardanico> use ORC then
[03:30:31] <FromDiscord> <Yardanico> and be very careful with code that does allocations
[03:30:41] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:45] <FromDiscord> <Yardanico> and if you have cyclic types, do GC_fullCollect() each iteration with ORC
[03:30:55] <FromDiscord> <retkid> its not efficiency problem its a scale problem
[03:30:57] <FromDiscord> <Yardanico> granted GC_fullCollect() will also probably work if you use refc
[03:31:03] <FromDiscord> <Yardanico> In reply to @retkid "its not efficiency problem": buy more ram
[03:31:12] <FromDiscord> <retkid> i has no monies
[03:31:42] <FromDiscord> <retkid> actually i compiled with -mm:arc and now it uses like half the ram
[03:31:43] <FromDiscord> <retkid> nice
[03:31:55] <FromDiscord> <Yardanico> just be careful with arc
[03:31:59] <FromDiscord> <Yardanico> if you have any cyclic types they'll leak
[03:32:12] <FromDiscord> <Yardanico> so --mm:orc is a bit better if you're not 100% sure you don't have cycles
[03:32:26] <FromDiscord> <retkid> cylic types?
[03:32:32] <FromDiscord> <retkid> like
[03:32:47] <FromDiscord> <Yardanico> cyclic
[03:32:49] <FromDiscord> <retkid> a type made up of other types which are made up of other types?
[03:32:51] <FromDiscord> <Yardanico> no
[03:33:12] <FromDiscord> <Yardanico> now you have a cycle
[03:33:14] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JCk
[03:33:30] <FromDiscord> <Yardanico> and under ARC it'll leak (granted, in this simple example the compiler will warn you about the cycle)
[03:33:31] <FromDiscord> <retkid> yea i dont have that
[03:33:40] <FromDiscord> <Yardanico> well you should be sure the libs you use don't have that
[03:33:47] <FromDiscord> <Yardanico> also if you use async you must use orc
[03:34:00] <FromDiscord> <retkid> no async here
[03:34:06] <FromDiscord> <retkid> only thtrading
[03:34:23] <FromDiscord> <retkid> also yea damn, i hit max mem and it died :(
[03:34:34] <FromDiscord> <retkid> (edit) "thtrading" => "threading"
[03:34:42] <FromDiscord> <retkid> welp
[03:34:42] <FromDiscord> <Yardanico> as i said, maybe try to optimize memory usage?
[03:34:49] <FromDiscord> <Yardanico> e.g. `{.packed.}` for types, etc
[03:34:53] <FromDiscord> <Yardanico> i can't say anything without the code
[03:35:13] <FromDiscord> <retkid> theres stuff i can do, like pass strings instead of sequences and optimize for that but ugh
[03:35:26] <FromDiscord> <retkid> i'look for obvious problems
[03:36:05] <FromDiscord> <retkid> running 1 is fine, but running 500 at the same time causes problems
[03:36:39] <FromDiscord> <Yardanico> run 480
[03:36:57] <FromDiscord> <Yardanico> also I surely hope you're not using threads for http requests
[03:37:08] <FromDiscord> <retkid> I did that before!
[03:37:10] <FromDiscord> <retkid> bad idea
[03:37:26] <FromDiscord> <retkid> stuff breaks
[03:37:30] <FromDiscord> <retkid> this is just math
[03:37:33] <FromDiscord> <retkid> (edit) "this is just math ... " 03added "and generations"
[03:40:07] <FromDiscord> <retkid> wow arc really did completely slash the memory usage
[03:40:31] <FromDiscord> <retkid> i might be able to run 2000 now
[03:42:09] <FromDiscord> <retkid> when i run with danger i keep getting out of memory, from some pointers i have passing around?
[03:54:34] <NimEventer> New thread by Xioren: Proper way to open and close async files?, see https://forum.nim-lang.org/t/8744
[04:00:33] <FromDiscord> <KatrinaKitten> Curious, is there a simple way to include the source of another proc as a `runnableExamples`?
[05:15:14] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:29:12] <FromDiscord> <Ricky Spanish> is it fine to host custom builds of nim on github using github actions/releases? i want a binary version of nim for mac that i can include in my ci system
[05:29:16] <FromDiscord> <geekrelief> In reply to @KatrinaKitten "Curious, is there a": That sounds like a job for a macro.
[05:34:39] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3JCL
[05:41:30] <FromDiscord> <Elegantbeef> Only issue with that geek is it doesnt emit `echo "foo world"` in the docs 😛
[05:41:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JCN
[05:43:34] <FromDiscord> <geekrelief> good point 🙂 lol
[05:44:13] <FromDiscord> <geekrelief> I guess you need to wrap the output
[05:44:35] <FromDiscord> <Elegantbeef> Replace all syms that are `nskParam` with `nnkIdent`
[05:48:00] *** Joins: drewr (~drew@user/drewr)
[05:51:57] <FromDiscord> <geekrelief> In reply to @Elegantbeef "Replace all syms that": Can you elaborate on that?
[05:52:08] <FromDiscord> <Elegantbeef> I'll provide an example
[05:52:48] <FromDiscord> <KatrinaKitten> It's nbd in the end, I ended up wanting to make some adjustments to the example anyway, so an automated solution wouldn't do as well as copy paste.
[05:52:59] <FromDiscord> <KatrinaKitten> Would be pretty neat to figure out how tough.
[05:53:05] <FromDiscord> <KatrinaKitten> (edit) "tough." => "though."
[05:54:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[05:55:04] <FromDiscord> <geekrelief> In reply to @KatrinaKitten "Would be pretty neat": no worries, figuring this out would be useful for me too
[05:55:39] <FromDiscord> <geekrelief> I noticed my tests and runnableExamples  are basically the same thing.
[05:59:24] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3JCT
[06:01:20] <FromDiscord> <Elegantbeef> If you want to make it into a runnable example you'd want to emit a `call runnableExample` and put the result as the second parameter
[06:04:27] <FromDiscord> <geekrelief> thx, I need to tease this apart.
[06:07:12] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3JCX
[06:07:14] <FromDiscord> <Elegantbeef> There we go
[06:07:16] <FromDiscord> <geekrelief> are we supposed to run your example with nim doc?
[06:07:18] <FromDiscord> <geekrelief> ok..
[06:07:19] <FromDiscord> <Elegantbeef> my silly way of dispatching this stuff
[06:07:32] <FromDiscord> <Elegantbeef> I mean if you use nimdoc you'll see the runnable example
[06:07:49] <FromDiscord> <Elegantbeef> The issue is without this new code is you'll get `getBody(foo)` in the runnable example
[06:07:52] <FromDiscord> <Elegantbeef> not `echo a`
[06:07:53] <FromDiscord> <geekrelief> the point of runnableExamples is to have the example in the docs right?
[06:08:00] <FromDiscord> <Elegantbeef> Yes
[06:08:05] <FromDiscord> <geekrelief> right
[06:08:24] <FromDiscord> <Elegantbeef> If you do it the way you did the macro wont be expanded for obvious reason
[06:08:30] <FromDiscord> <geekrelief> yeah 🙂
[06:09:12] <FromDiscord> <Elegantbeef> And yes i love myself some `distinct void`
[06:09:49] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3JCY
[06:09:53] <FromDiscord> <Elegantbeef> Well y ea
[06:10:02] <FromDiscord> <Elegantbeef> do `foo.getBody(AsRunnableExample)`
[06:11:06] <FromDiscord> <geekrelief> ah ok, I didn't read the code.. I see the if check in getBody now
[06:11:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:14:56] <FromDiscord> <geekrelief> hmm where do I put that `foo.getBody(AsRunnableExample)`?
[06:15:22] <FromDiscord> <Elegantbeef> Does it not work as a main statement?
[06:15:56] <FromDiscord> <geekrelief> nope
[06:16:38] <FromDiscord> <Elegantbeef> Guess we cannot programatically add runnable examples
[06:16:49] <FromDiscord> <geekrelief> I put `foo.getBody(AsRunnableExample)` at the bottom and ran `nim doc getBody.nim` and I don't see the example
[06:17:22] <FromDiscord> <Elegantbeef> I'm guessing nimdoc doesnt expand macros before looking for the examples
[06:19:47] <FromDiscord> <Elegantbeef> Which i guess makes sense given how runnableExamples arent apart of the ast
[06:19:48] <FromDiscord> <geekrelief> weird it seems like this should be possible...
[06:19:54] <FromDiscord> <geekrelief> yeah.. it is magic
[06:20:14] <FromDiscord> <geekrelief> well that kinda sucks.. 🙂
[06:21:49] <FromDiscord> <Elegantbeef> I dont think it should be too hard to make work, but i need to think about it for a minute
[06:21:49] <FromDiscord> <geekrelief> Can you explain what was the idea behind replace nnkSym and nskParam with ident?
[06:22:00] <FromDiscord> <geekrelief> (edit) "replace" => "replacing"
[06:22:15] <FromDiscord> <Elegantbeef> If you dont replace it the `a` refers to the proc you got it from's `a`
[06:22:32] <FromDiscord> <Elegantbeef> So if you did `echo a` it'd error
[06:22:43] <FromDiscord> <Elegantbeef> Since `a` isnt in this scope and isnt a global varaible
[06:22:46] <FromDiscord> <Elegantbeef> variable\
[06:23:36] <FromDiscord> <geekrelief> ok gotcha thanks
[06:23:39] <FromDiscord> <Elegantbeef> Eitherway i'd say check if there is an issue for this runnable example thing and if not make one
[06:24:50] <FromDiscord> <Elegantbeef> I'd say all code not inside a `runnableExample` call just needs to be expanded
[06:42:46] *** Joins: rockcavera (~rc@192.12.112.193)
[06:42:46] *** Quits: rockcavera (~rc@192.12.112.193) (Changing host)
[06:42:46] *** Joins: rockcavera (~rc@user/rockcavera)
[06:51:26] <FromDiscord> <geekrelief> @KatrinaKitten I was thinking my test code and `runnableExamples` are similar, but from reading about opinions of `runnableExamples` usage on the forum it's probably not a good a idea to put all your tests in there.  So I was wondering where your code is coming from?
[06:53:59] <FromDiscord> <Elegantbeef> Oh this conversation
[06:54:46] <FromDiscord> <Elegantbeef> Tests are not examples, tests should ensure functionality and intentionally attempt to break code. Examples should ensure the information they're attempting to portray is accurate
[06:54:48] <FromDiscord> <Elegantbeef> Atleast that's my view
[07:08:39] <FromDiscord> <Rika> Tests can be examples
[07:10:27] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[07:12:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:31:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:34:35] <FromDiscord> <KatrinaKitten> I would say that examples can be tests, but they shouldn't be your only tests, and tests typically shouldn't be examples.
[07:35:09] <FromDiscord> <KatrinaKitten> In reply to @geekrelief "<@!204718116020682753> I was thinking": In this case I was wanting to use the implementation of one proc in my library's API as the example for another. Nothing really to do with tests specifically 🙂
[07:35:58] <FromDiscord> <KatrinaKitten> (edit) "examples." => "examples for the reasons Beef mentioned."
[09:07:06] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:39:36] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (Ping timeout: 276 seconds)
[10:42:04] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[10:48:03] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (Ping timeout: 276 seconds)
[11:02:45] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:03:56] <FromDiscord> <ValorZard> @KatrinaKitten what ARE your characters
[11:04:39] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[11:18:08] <FromDiscord> <KatrinaKitten> Hahaha, tyvm for asking ^^ Specifically D&D characters, if you want I can ramble a bit in #offtopic
[12:01:53] <FromDiscord> <glyh (Lyhokia)> Hello, I'm trying to convert Nim's grammar to a tree-sitter grammar, and I encounter this\:
[12:02:59] <FromDiscord> <glyh (Lyhokia)> sent a code paste, see https://play.nim-lang.org/#ix=3JDK
[12:04:57] <FromDiscord> <Elegantbeef> I dont know grammars but which part are you asking about?
[12:05:25] <FromDiscord> <glyh (Lyhokia)> the last symbol `\`, it means a ordered choice, but it doesn't have a branch following it
[12:05:59] <FromDiscord> <Elegantbeef> It looks like a typo, but i could be wrong
[12:06:01] <FromDiscord> <glyh (Lyhokia)> also, I don't understand the operator `\`, does this mean `-` (i.e. the except operator ) from EBNF?
[12:06:26] <FromDiscord> <glyh (Lyhokia)> @elegantbeef\:matrix.org  Do you know who should I ask for these? Thanks a lot \:)
[12:06:44] <FromDiscord> <Elegantbeef> There is the internals chat
[12:07:35] <FromDiscord> <Elegantbeef> I do think the grammar for the cast is wrong with the `/` since like you said no choice after and also semantically there is no more information needed
[12:08:10] <FromDiscord> <glyh (Lyhokia)> Thanks XD
[12:09:20] <FromDiscord> <Elegantbeef> Cant say much about the `\` since i cannot read this well enough
[12:12:05] <FromDiscord> <glyh (Lyhokia)> Maybe I can ask someone else, yet, thanks for answering me.
[12:20:04] <NimEventer> New thread by Lyhokia: Questions on Nim's grammar, see https://forum.nim-lang.org/t/8745
[12:29:19] <FromDiscord> <sOkam!> @ElegantBeef Do you know how I could find information about whether this object is fine for gdextension, or if I need to modify it? https://media.discordapp.net/attachments/371759389889003532/924949553864650802/unknown.png
[12:31:45] <FromDiscord> <Elegantbeef> I mean you need to look at the json + C code to figure that out
[12:32:13] <FromDiscord> <Elegantbeef> Afaict that just holds information for generation so it doesnt matter that much
[12:33:29] <FromDiscord> <Elegantbeef> Especially since the json node now holds all that information afaik
[12:34:47] <FromDiscord> <sOkam!> whats an "offset"? https://media.discordapp.net/attachments/371759389889003532/924950932301688852/unknown.png
[12:35:01] <FromDiscord> <Elegantbeef> The object's layout
[12:35:14] <FromDiscord> <sOkam!> which means...
[12:35:22] <FromDiscord> <Elegantbeef> offsets are byte offsets from the "Start" of the object
[12:36:08] <FromDiscord> <sOkam!> kk. so `y` is 8bytes ahead of `x` in the Vector2 type, right?
[12:36:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JDS
[12:37:01] <FromDiscord> <Elegantbeef> The offset is important for interop and assurances that your declaration matches theirs
[12:37:11] <FromDiscord> <sOkam!> Is it necessary to do something with that manually, or is that done automatically by the compiler?
[12:37:25] <FromDiscord> <sOkam!> In reply to @Elegantbeef "The offset is important": ah ic
[12:37:42] <FromDiscord> <Elegantbeef> You shouldnt need to assuming the types match
[12:38:37] <FromDiscord> <sOkam!> Good point, they might not. Didn't even cross my mind 🤔
[12:39:14] <FromDiscord> <sOkam!> How do you define an offset for a type in nim?
[12:39:48] <FromDiscord> <Elegantbeef> I dont think you can
[12:39:55] <FromDiscord> <Elegantbeef> I might be wrong
[12:46:07] <FromDiscord> <Elegantbeef> I figure as long as the types match it should be fine
[12:46:13] <FromDiscord> <Elegantbeef> But i've been wrong before ;D
[12:49:47] <FromDiscord> <sOkam!> Oh, this looks SO much more approachable when nested this way 👀 https://media.discordapp.net/attachments/371759389889003532/924954704352542720/unknown.png
[12:50:38] <FromDiscord> <sOkam!> (edit) "nested" => "folded"
[13:00:22] <FromDiscord> <sOkam!> What's the difference between these?↵I get the 32bit vs 64bit option... but why the double? 🤔 https://media.discordapp.net/attachments/371759389889003532/924957369727868948/unknown.png
[14:28:58] <FromDiscord> <TryAngle> If a project is published on nimble, how would the update process look like?
[14:43:58] <FromDiscord> <Yardanico> just do your changes
[14:44:04] <FromDiscord> <Yardanico> and then tag a new release and bump the version in the nimble file
[14:44:07] <FromDiscord> <Yardanico> that's the proper way
[14:45:41] *** Joins: xet7 (~xet7@user/xet7)
[15:29:46] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:fd22:304c:4846:f013)
[15:31:57] <FromDiscord> <TryAngle> In reply to @Yardanico "that's the proper way": and then git commit + push it and the library will automatically be updated for existing nimble projects?
[15:32:19] <FromDiscord> <Yardanico> maybe you misunderstood how nimble works?
[15:32:35] <FromDiscord> <Yardanico> yes, you just git commit your changes, then when you're ready to publish a release you bump the nimble ver and tag a new git release
[15:32:43] <FromDiscord> <Yardanico> and then if users reinstall the package again it'll update
[15:32:49] <FromDiscord> <Yardanico> or if they specify a newer version in dependencies
[15:32:53] <FromDiscord> <Yardanico> (edit) "dependencies" => "requires"
[15:32:59] <FromDiscord> <Yardanico> nimble doesn't autoupdate
[15:33:44] <FromDiscord> <TryAngle> I see but I don't need to do like ↵nimble publish again after it's initial publish?↵that's actually pretty cool, full git driven 😳
[15:33:51] <FromDiscord> <Yardanico> nonono
[15:33:54] <FromDiscord> <Yardanico> you don't need "nimble publish"
[15:34:01] <FromDiscord> <Yardanico> that's for publishing packages, not updating them
[15:34:12] <FromDiscord> <Yardanico> bumping nimble ver is just changing the version number in the .nimble file
[15:34:15] <FromDiscord> <Yardanico> and tags are a git feature
[15:34:41] <FromDiscord> <TryAngle> thanks 👍↵pretty cool
[15:55:06] *** Joins: neceve (~quassel@2.26.93.228)
[15:56:59] <FromDiscord> <auxym> is there a way to break early from an iterator? `return` is not allowed?
[16:03:07] <FromDiscord> <konsumlamm> `break`?
[16:03:21] <FromDiscord> <Yardanico> In reply to @auxym "is there a way": that's because iterators are inline by default
[16:03:24] <FromDiscord> <Yardanico> their code is just inlined
[16:03:39] <FromDiscord> <Yardanico> so you can't exactly "return" from an inline iterator
[16:03:50] <FromDiscord> <Solitude> In reply to @auxym "is there a way": thats hella cringe, but you can workaround by wrapping body of iterator in named block and using named break
[16:08:37] <FromDiscord> <auxym> I was thinking something like this actuallly, but return/break aren't allowed: https://play.nim-lang.org/
[16:08:44] <FromDiscord> <auxym> oops
[16:09:00] <FromDiscord> <auxym> https://play.nim-lang.org/#ix=3JEB
[16:13:15] <FromDiscord> <Solitude> your iterator has no return type
[16:13:41] <FromDiscord> <Yardanico> @auxym
[16:13:46] <FromDiscord> <Yardanico> as solitude said
[16:13:49] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JEC
[16:14:55] <FromDiscord> <auxym> oh yeah, I get it now. I think I'll do something else 😄
[16:16:56] <FromDiscord> <aschwarz> sent a long message, see http://ix.io/3JEE
[16:18:22] <FromDiscord> <Yardanico> you're using something from os at compile time
[16:18:31] <FromDiscord> <Yardanico> check your `const`, macros, `compileTime` procs
[16:18:40] <FromDiscord> <Yardanico> maybe you have a call to some OS routine in there left by accident
[16:18:59] <FromDiscord> <Yardanico> in nim `const` means that a variable is decided at compile-time, it doesn't change the scope
[16:19:13] <FromDiscord> <Yardanico> (edit) "in nim `const` means that a variable is decided at compile-time, it doesn't change the scope ... " 03added "rules in any way"
[16:23:41] <FromDiscord> <aschwarz> thank you, found it
[17:05:57] *** Joins: rockcavera (~rc@192.12.112.193)
[17:05:57] *** Quits: rockcavera (~rc@192.12.112.193) (Changing host)
[17:05:57] *** Joins: rockcavera (~rc@user/rockcavera)
[17:30:09] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3JEY
[17:30:30] <FromDiscord> <eyecon> But I get `Error: type mismatch: got <Table[aocscratch.Charpair, system.int], typedesc[Charpair], int>` in the body of `[]`
[17:30:34] <FromDiscord> <eyecon> Any ideas?
[17:31:35] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3JF3
[17:32:06] *** Joins: drewr (~drew@user/drewr)
[17:34:19] *** Joins: arkurious (~arkurious@user/arkurious)
[17:38:56] <FromDiscord> <eyecon> Got it
[17:39:06] <FromDiscord> <eyecon> Sorry
[17:39:20] <FromDiscord> <eyecon> I put `A` instead of `key`
[17:40:00] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[17:42:14] *** Joins: sagax (~sagax_nb@user/sagax)
[17:44:28] <FromDiscord> <sOkam!> Total noob Q, but don't seem to understand the manual about it.↵What should I use as the input of `random.rand( ... )`?↵The manual also says that I need to call `random.randomize()` once. But do I need to do something with the output of that one? is that the value I need to feed to rand()?
[17:45:33] <FromDiscord> <sOkam!> (edit) ")`?↵The" => ")` if I want to simulate the behavior of python's random()?↵The"
[17:46:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[17:55:17] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[18:03:57] *** Joins: drewr (~drew@user/drewr)
[18:12:23] *** Joins: xet7_ (~xet7@user/xet7)
[18:12:40] <FromDiscord> <yledu> randomize is what is needed to start a pseudo random sequence, it "seeds" the sequence. Then rand(n) THEN gives you a random value between 0 and n : if you give it a float, it gives you a float, if you give it an int, it gives you an int, etc. (overloading)
[18:14:02] <FromDiscord> <yledu> @sOkam! I'm a noob too there, but it turns out I tried rand early on.
[18:14:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[18:15:42] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 260 seconds)
[18:24:42] *** tinystoat is now known as tinytoast
[18:34:07] <FromDiscord> <yledu> What makes it difficult to remove forward declaration in Nim ? It looks like a dirty workaround, but perhaps is it necessary because of some other feature of Nim ?
[18:43:50] *** Joins: drewr (~drew@user/drewr)
[18:46:41] *** Quits: xet7_ (~xet7@user/xet7) (Quit: Leaving)
[18:47:39] *** Joins: neurocyte0132889 (~neurocyte@IP-092119008132.dynamic.medianet-world.de)
[18:47:39] *** Quits: neurocyte0132889 (~neurocyte@IP-092119008132.dynamic.medianet-world.de) (Changing host)
[18:47:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:50:41] *** Quits: anadahz (~user@gateway/tor-sasl/anadahz) (Remote host closed the connection)
[18:56:16] <FromDiscord> <eyecon> Recursive types?
[18:56:44] <FromDiscord> <eyecon> Just guessing
[18:56:51] *** Joins: anadahz (~user@gateway/tor-sasl/anadahz)
[18:58:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[19:00:21] <FromDiscord> <haxscramper> recursive procs
[19:00:37] <FromDiscord> <haxscramper> also compiler is a single-pass IIRC
[19:01:04] <FromDiscord> <haxscramper> Meaning it processes the file from top to bottom in one go
[19:04:11] *** Joins: drewr (~drew@user/drewr)
[19:09:22] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 260 seconds)
[19:13:13] *** Joins: perro (~perro@072-191-245-069.res.spectrum.com)
[19:58:46] <FromDiscord> <TryAngle> what is the difference between a proc and a function?↵I've read this impure vs pure thingy with haskell(which I never used so this is new for me still) and as far as I understand impure functions (procs) can have sideeffects / undefined behaviour etc. while pure functions can be assumed to be safe.↵So should I always try to make my proc a function if possible? What is the pragma {. noSideEffects.} is this the same?
[20:04:42] <FromDiscord> <Rika> Functions can still have unsafe behaviour, it just has to be pure unsafe behaviour lol
[20:09:01] <FromDiscord> <TryAngle> lol
[20:22:06] <FromDiscord> <Solitude> In reply to @TryAngle "what is the difference": function cant access non-const variable outside of its scope
[20:27:09] <FromDiscord> <Yardanico> also it can't modify any non-`var` arguments unless they're ref
[20:27:18] <FromDiscord> <Yardanico> and with strictFunc it can't modify ref too
[20:27:26] <FromDiscord> <Yardanico> (unless you pass it as `var`)
[20:27:34] <FromDiscord> <krisppurg> sent a long message, see http://ix.io/3JGd
[20:37:09] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3JGj
[20:37:47] <FromDiscord> <TryAngle> and I get the `Error: type expected, but got: T`
[20:39:07] <FromDiscord> <0ffh> If a converter is used on a literal or constant, will it be done at compile time or is it purely a runtime operation?
[20:39:28] <FromDiscord> <TryAngle> (edit) "T`" => "T`↵So this seems to be a bug with module rexports, contained in templates???"
[20:40:48] <FromDiscord> <krisppurg> In reply to @krisppurg "Hey guys, I have": also cc: @treeform (sorry for ping)
[20:42:30] <FromDiscord> <Solitude> In reply to @0ffh "If a *converter* is": its runtime
[20:43:25] <NimEventer> New thread by Samsamros: Error installing nimlsp, and getting the neovim plugin to work, see https://forum.nim-lang.org/t/8747
[20:43:25] <FromDiscord> <Solitude> would be nice if they supported {.compiletime.} but its easier to just avoid them
[20:43:43] <FromDiscord> <0ffh> In reply to @Solitude "would be nice if": Okay, thanks, I'll do that!
[20:44:38] <FromDiscord> <Solitude> you cant even overload them with `static`...
[20:46:13] <FromDiscord> <TryAngle> In reply to @Solitude "you cant even overload": wait so writing a converter for↵[static[int], T] is not possible 😳 ?
[20:46:29] <FromDiscord> <TryAngle> or do u do just [I, T] then?
[20:50:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[20:51:09] <FromDiscord> <Solitude> its not possible to write a converter
[20:51:13] <FromDiscord> <Solitude> do not try it
[20:54:13] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[20:56:26] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[21:15:54] <FromDiscord> <MD> Is there a performance decrease when wrapping a C library and using it in Nim?
[21:16:53] <FromDiscord> <Yardanico> if you just use the bindings the "raw" way without any higher-level Nim functions, then generally no
[21:18:49] <FromDiscord> <MD> Nice, thanks!
[21:27:50] <FromDiscord> <frankzig> ?
[21:27:52] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3JGz
[21:28:05] <FromDiscord> <Shiba> i hope i can get better at nim since i t's my first time using space like language and iam totaly new to the syntax  and the whole libaries wrapping process is hard to understand
[21:29:09] <FromDiscord> <Shiba> i also finished nim basics🥳
[21:32:26] <FromDiscord> <Yardanico> In reply to @frankzig "is it possible to": yes, but not like this
[21:32:42] <FromDiscord> <Yardanico> hmm
[21:32:54] <FromDiscord> <Yardanico> not sure how to do it so that you it looks like `obj.test[]` and you get `obj` in `[]`
[21:33:00] <FromDiscord> <Yardanico> (edit) 04removed "you"
[21:39:11] <FromDiscord> <Shiba> @Yardanico when you said nim compiler keeps compiled scripts and compiles only modified ones , is that a thing you enable
[21:40:17] <FromDiscord> <Yardanico> no, it's enabled by default
[21:40:25] <FromDiscord> <Yardanico> the compiled C files are cached, so they're not recompiled if they didn't change
[21:59:54] <FromDiscord> <frankzig> In reply to @Yardanico "not sure how to": I have an object with a weird representation, I would like to let users pretend it is a common object made of arrays and stuff
[22:00:06] <FromDiscord> <frankzig> but maybe this kind of stuff cannot be done...
[22:01:05] <FromDiscord> <Yardanico> In reply to @frankzig "but maybe this kind": i think you can do it if you override the . operator
[22:01:07] <FromDiscord> <Yardanico> maybe
[22:01:31] <FromDiscord> <frankzig> ah... didnt know I could do that
[22:02:08] <FromDiscord> <Yardanico> https://nim-lang.org/docs/manual_experimental.html#special-operators-dot-operators
[22:03:42] <FromDiscord> <frankzig> that doesnt look like it would compose with []
[22:04:46] <FromDiscord> <Yardanico> why so?
[22:04:49] <FromDiscord> <Yardanico> lemme try
[22:07:21] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3JGK
[22:07:38] <FromDiscord> <Yardanico> i mean i know another way that'll work 100%, but it's very very dirty
[22:07:44] <FromDiscord> <Yardanico> so i'll try the cleaner way first :)
[22:08:20] <FromDiscord> <frankzig> In reply to @Yardanico "so i'll try the": Ohhh thank you <3, dirty or clean, I'll be happy anyway
[22:11:34] <FromDiscord> <Yardanico> In reply to @frankzig "Ohhh thank you <3,": yeah this is a bit less dirty and with dotOperators:
[22:11:41] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JGL
[22:11:57] <FromDiscord> <Yardanico> this is using another hidden array, but you probably get the idea
[22:12:08] <FromDiscord> <Yardanico> but with setters it might be a bit complicated
[22:12:15] <FromDiscord> <Yardanico> hmm this is not exactly what you want, yeah
[22:14:29] <FromDiscord> <Yardanico> i'll experiment some more
[22:14:55] <FromDiscord> <Yardanico> ahh right
[22:18:32] <FromDiscord> <Yardanico> @frankzig it's simpler than I thought, but yeah:
[22:18:50] <FromDiscord> <Yardanico> lemme try to fix that
[22:18:52] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JGQ
[22:20:04] <FromDiscord> <Yardanico> @frankzig can you show more examples of how you think it should work?
[22:20:09] <FromDiscord> <Yardanico> usage examples i mean
[22:23:23] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3JGT
[22:23:55] <FromDiscord> <frankzig> this is what I want to build
[22:31:16] <FromDiscord> <Shiba> what does those values mean https://media.discordapp.net/attachments/371759389889003532/925101037491220511/Capture.PNG
[22:32:04] <FromDiscord> <Yardanico> how many lines the nim compiler compiled, how long it took, and how much memory did the nim compiler use
[22:32:58] <FromDiscord> <Shiba> that aloot for a one line hello world program
[22:33:27] <FromDiscord> <Yardanico> no
[22:33:29] <FromDiscord> <Shiba> i guess if i can get an ssd , i can boost the compile time
[22:33:29] <FromDiscord> <Yardanico> it's fine
[22:33:35] <FromDiscord> <Yardanico> that of course
[22:37:48] <FromDiscord> <Yardanico> @frankzig one big problem is that I don't know how to do it without `ref` - it's used here so the state is saved with []= and the likes
[22:37:58] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3JGY
[22:38:03] <FromDiscord> <Yardanico> and yes maybe there's a much better way of doing this
[22:38:52] <FromDiscord> <Yardanico> you can remove the `when` in [] and []= since it's only `hall` with 1 index and `rooms` with 2 indexes, so nim will call different procedures nonetheless
[22:40:03] <FromDiscord> <Yardanico> wait maybe I can simplify it
[22:40:23] <FromDiscord> <Yardanico> or not
[22:40:43] <FromDiscord> <Yardanico> i mean you can probably make a macro that'll allow doing all of this without overhead
[22:46:39] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3JH0
[22:47:24] <FromDiscord> <treeform> I added this code: https://github.com/treeform/jsony/commit/11df6999829a0fa51af353182d35613c9afbf39f
[22:47:35] <FromDiscord> <treeform> so if you update to most recent jsony you don't even need a parseHook
[22:54:58] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:fd22:304c:4846:f013) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:55:34] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3JH1
[22:56:42] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3JH2
[22:58:47] <FromDiscord> <Yardanico> there might a better way, i just wrote how one of the ways of how to make it work
[22:59:23] <FromDiscord> <haxscramper> @Rika, @Yardanico and other people who asked about nimskull matrix/discord space - we have finally merged code of conduct & related guidelines, so if you are interested we are open at https://matrix.to/#/#nimworks:envs.net
[23:00:07] <FromDiscord> <treeform> In reply to @krisppurg "also cc: <@!107140179025735680> (sorry": This is how I would do it: https://gist.github.com/treeform/2b1a1ba7a35ad3166cdb2dab663236c4
[23:01:10] <FromDiscord> <haxscramper> I think on matrix side it was [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz)
[23:21:37] <FromDiscord> <planetis> i think =sink .error is ignored
[23:22:05] <FromDiscord> <Yardanico> maybe it didn't sink?
[23:23:01] <FromDiscord> <planetis> no i also did =copy .error
[23:23:13] <FromDiscord> <planetis> and used move explicitly
[23:28:31] *** Joins: xet7 (~xet7@user/xet7)
[23:29:42] <FromDiscord> <planetis> https://play.nim-lang.org/#ix=3JHb
[23:31:30] <FromDiscord> <Yardanico> @planetis as I Said
[23:31:32] <FromDiscord> <Yardanico> (edit) "Said" => "said"
[23:31:36] <FromDiscord> <Yardanico> in this case your sink and copy do not trigger
[23:31:42] <FromDiscord> <Yardanico> i changed error to echo and compiled with arc
[23:31:45] <FromDiscord> <Yardanico> and nothing got printed out
[23:33:59] <FromDiscord> <planetis> why they don't?
[23:34:37] <FromDiscord> <planetis> move the var g1 = g line above the g.tick and it doesn't compile
[23:34:54] <FromDiscord> <planetis> g.update
[23:35:28] <FromDiscord> <Yardanico> yes, and what is the issue here?
[23:38:44] <FromDiscord> <planetis> the compiler should prevent assignments `var g1 = g` code from compiling
[23:39:08] <FromDiscord> <planetis> it used to work that way before if i am not mistaken
[23:40:19] <FromDiscord> <Yardanico> but it prevents them now too
[23:40:31] <FromDiscord> <Yardanico> in your original code snippet g2 was probably just not compiled at all
[23:40:53] <FromDiscord> <Yardanico> if you move `  var g2 = g` above g.update() as you said it doesn't compile
[23:40:57] <FromDiscord> <krisppurg> In reply to @treeform "very strange code, you": Wheres the parsing json twice?↵↵The reason why I did ($data) is because when making a discord api http request I parse string as json as long as the content type is application json and with gateway same principle. So it would be pretty long rewriting from json to jsony. I'd rather finish the jsony rewrite with objects first then either possibly rewrite.
[23:41:17] <FromDiscord> <Yardanico> In reply to @krisppurg "Wheres the parsing json": ($data).fromJson(Activity)
[23:41:29] <FromDiscord> <Yardanico> you take data which is JsonNode, convert it to string, then parse to a json
[23:41:52] <FromDiscord> <krisppurg> In reply to @treeform "Jsony already handles options,": This was temporary btw when there was the tuple bug I updated it
[23:42:55] <NimEventer> New post on r/nim by Halpmeppl: Difference between ref and a var inside proc definition, see https://reddit.com/r/nim/comments/rpw5xf/difference_between_ref_and_a_var_inside_proc/
[23:43:58] <FromDiscord> <planetis> did I messed up the assert?↵(@Yardanico)
[23:44:12] <FromDiscord> <Yardanico> ???
[23:44:18] <FromDiscord> <planetis> ...nah it's okay
[23:44:37] <FromDiscord> <Yardanico> in your code you did `  var g2 = g`
[23:44:41] <FromDiscord> <Yardanico> followed by echo hello
[23:44:46] <FromDiscord> <Yardanico> so that probably just didn't get compiled it
[23:44:53] <FromDiscord> <Yardanico> because it doesn't change the program's logic it's fine
[23:45:33] <FromDiscord> <planetis> well expandarc shows its there
[23:46:12] <FromDiscord> <Yardanico> well expandArc is Nim side
[23:46:17] <FromDiscord> <Yardanico> before the backend
[23:46:47] <FromDiscord> <tbrekalo> Is there a way to create distinct type from `uint64` and borrow all of its functionality while not rewriting operators using borrow pragma
[23:47:05] <FromDiscord> <planetis> i messed up the assert message 🤣
[23:47:12] <FromDiscord> <tbrekalo> I saw the example on manual page but it's not quite clear to me how to make it work
[23:48:15] <FromDiscord> <TryAngle> https://github.com/TriedAngle/trymisc/blob/88dd4d97994c9c81b551615a00221a24461e12d8/src/trymisc/math/utils.nim#L3↵hmmm the moment I move the imports `salgebra` or `algebra` above the `template implProc()` ↵I get the following error when `salgebra` is above the template:  `Error: the 'T' modifier can be used only with imported types`↵and this one when both or `algebra` is above: `Error: type expected, but got: T`
[23:48:58] <FromDiscord> <tbrekalo> I really do have to write all those templates by hand?↵↵https://nim-lang.org/docs/manual.html#types-distinct-type ?
[23:49:09] <FromDiscord> <TryAngle> (edit) "https://github.com/TriedAngle/trymisc/blob/88dd4d97994c9c81b551615a00221a24461e12d8/src/trymisc/math/utils.nim#L3↵hmmm the moment I move the imports `salgebra` or `algebra` above the `template implProc()` ↵I get the following error when `salgebra` is above the template:  `Error: the 'T' modifier can be used only with imported types`↵and this one when both or `algebra` is above: `Error: type expected, but got: T`" => "sent 
[23:49:18] <FromDiscord> <TryAngle> (edit) "http://ix.io/3JHh" => "http://ix.io/3JHi"
[23:50:28] <FromDiscord> <planetis> @Yardanico compiling with v1 shows a compile error, it broke at 1.2.0
[23:50:55] <FromDiscord> <Yardanico> can you show the code that fails for you?
[23:53:13] <FromDiscord> <planetis> the same one\: https://play.nim-lang.org/#ix=3JHb
[23:58:06] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[23:58:32] *** Joins: Colt (~Colt@user/colt)
