[00:05:18] <Josh_2> Huh I think that worked
[00:05:22] <Josh_2> thanks etimmons
[00:05:43] <Josh_2> now I have to fix the "Couldn't load #P"/usr/share/common-lisp/source/cl-asdf/asdf.asd"
[00:05:58] <etimmons> Yep! The fact that it was in `/usr/local/` is what made me suspect that.
[00:06:48] <etimmons> Seems like the library got placed in the folder without updating the linker cache.
[00:15:13] <borodust> wows, latest sbcl is built against glibc 2.28 and ubuntu lts uses 2.27 T_T
[00:15:29] <Josh_2> https://plaster.tymoon.eu/view/2618#2618
[00:16:38] <Josh_2> Should I just move the contents of my /usr/share/common-lisp.. to this vps?
[00:17:35] <Josh_2> hmm I seem to have cl-asdf and cl-launch in share/common-lisp/source I wonder if that was my package manager
[00:18:10] <Josh_2> yep
[00:19:20] <etimmons> borodust: now that bullseye is out, it wouldn't surprise me if it starts using 2.31 soon.
[00:22:22] <borodust> i'm glad roswell maintainers put effort to build many binaries
[00:22:36] <borodust> they actually have sbcl built against 2.10 glibc
[00:22:58] <borodust> ❤️
[00:23:28] <borodust> okay, almost got it :D ❤
[00:30:46] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:33:10] <Josh_2> if I want to use slynk on a remote server within my lisp image, should I ql:quickload it when my image is loaded?
[00:34:58] <Josh_2> I have tried both ql:quickload and just having it as a dependency and neither work
[00:37:47] *** Joins: Everything (~Everythin@37.115.210.35)
[00:41:47] <borodust> i think you need manually start it
[00:41:56] <borodust> slynk:start-server or smth like that
[00:42:18] <Josh_2> I have (ql:quickload :slynk) in the function that is called when my image starts, however I keep getting the same stupid error
[00:42:44] <Josh_2> https://plaster.tymoon.eu/view/2619#2619
[00:45:09] *** Joins: Bike (~Bike@71.69.170.70)
[00:45:09] *** ChanServ sets mode: +o Bike
[00:46:29] <Josh_2> hmm
[00:53:01] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[00:57:02] <Josh_2> I've had this stupid problem before and I cannot remember how I fixed it
[00:57:04] <Josh_2> :angry:
[00:58:01] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[00:58:20] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[01:04:40] *** Quits: VincentVega (~user@212.241.16.210) (Read error: Connection reset by peer)
[01:06:47] <Josh_2> Slynk has to be added as a dependency in my project if I want to have slynk:create-server in my startup function, but when it is added its causing my lisp image to look for a .fasl that was compiled on my machine.. not the machine that its being deployed on
[01:12:51] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[01:13:02] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Quit: WeeChat 3.1)
[01:13:16] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[01:13:23] *** Joins: montxero (~user@149.167.149.74)
[01:13:52] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:19:47] <Josh_2> now I dont know why I can run ql:quickload :slynk on my old vps within my dumped image, but I can't on my new one :'(
[01:22:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:24:24] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:24:33] <Josh_2> just checked the irc logs looking for where I was complaining about this last time, ofcourse I wrote "I got it to work!" and never said how...
[01:24:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:25:20] *** Lord_of_Life_ is now known as Lord_of_Life
[01:30:22] *** Quits: cosimone (~user@93-44-185-14.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[01:32:20] <Josh_2> noice
[01:32:32] <Josh_2> I got it to work, just to spite my future self I should not explain how
[01:33:11] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[01:33:15] <Josh_2> oh wait
[01:42:41] <lisp123> Josh_2: I know the feeling, better write it down now! (as much as you feel you will remember for next time...surely it can't happen again...been there, done that :P)
[01:44:40] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:50:42] *** Joins: avodonosov (~avodonoso@46.53.240.182)
[01:50:51] *** Quits: pve (~pve@178-55-146-184.bb.dnainternet.fi) (Quit: leaving)
[01:52:51] <Josh_2> Well my future self obviously sensed me about to spite myself, turns out I had not fixed it I was looking at the wrong vps...
[02:05:10] *** Quits: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de) (Read error: Connection reset by peer)
[02:05:21] *** Joins: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de)
[02:08:54] <Josh_2> okay I actually did fix it, what a PITA
[02:09:35] <Josh_2> for my future self, to fix it you have to create a user on the VPS with the same name as whatever name you use to create the image, then you have to copy your ~/quicklisp into that users home directory.
[02:10:59] <Josh_2> sly has to be within local-projects.
[02:23:03] <Josh_2> you also have to copy the content of .cache/common-lisp from that user to the user you want.. you know it would probably be best to just use the same username on your home and remote machine
[02:24:10] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 240 seconds)
[02:27:34] *** Quits: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de) (Read error: Connection reset by peer)
[02:27:52] *** Joins: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de)
[02:32:44] *** Quits: gaqwas (~john@dynamic-095-115-101-038.95.115.pool.telefonica.de) (Remote host closed the connection)
[02:39:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:40:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:44:06] *** Quits: frgo (~frgo@p200300deef0cee00e1934af888849c62.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:44:34] *** Joins: frgo (~frgo@p200300deef0cee00e1934af888849c62.dip0.t-ipconnect.de)
[02:45:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:47:22] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Read error: Connection reset by peer)
[02:47:42] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[02:55:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:05:13] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[03:05:53] *** Quits: Guest12 (~Guest12@72.64.1.179) (Ping timeout: 256 seconds)
[03:16:04] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[03:16:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:16:39] *** Joins: montxero (~user@149.167.149.74)
[03:33:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[03:35:31] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[03:41:08] *** Joins: cjb (~cjb@user/cjb)
[03:42:23] *** Joins: dra_ (~dra@2a04:4540:640e:9b00:149e:23ae:c2d3:52a7)
[03:45:02] *** Quits: dra (~dra@2a04:4540:6405:600:149e:23ae:c2d3:52a7) (Ping timeout: 256 seconds)
[03:52:57] *** Quits: dra_ (~dra@2a04:4540:640e:9b00:149e:23ae:c2d3:52a7) (Quit: Leaving)
[03:53:08] *** Joins: dra (~dra@2a04:4540:640e:9b00:149e:23ae:c2d3:52a7)
[04:10:33] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[04:10:43] *** Joins: Bike (~Bike@71.69.170.70)
[04:10:43] *** ChanServ sets mode: +o Bike
[04:10:47] *** Joins: montxero (~user@149.167.149.74)
[04:12:08] *** Quits: dra (~dra@2a04:4540:640e:9b00:149e:23ae:c2d3:52a7) (Quit: Leaving)
[04:13:25] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[04:31:22] *** Joins: akoana (~ah@user/akoana)
[04:49:01] *** Quits: avodonosov (~avodonoso@46.53.240.182) (Ping timeout: 256 seconds)
[05:07:12] *** Quits: random-nick (~random-ni@87.116.179.72) (Ping timeout: 256 seconds)
[05:13:20] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[05:23:22] *** Joins: robin (~robin@user/terpri)
[05:30:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:31:48] *** Quits: molson_ (~michael@2001-48F8-704A-CA1-0-0-75F-1007-static.midco.net) (Quit: Leaving)
[05:32:37] *** Joins: avodonosov (~avodonoso@46.53.240.182)
[05:35:32] *** Joins: molson (~michael@2001-48F8-704A-CA1-0-0-75F-1007-static.midco.net)
[05:38:40] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Quit: leaving)
[05:39:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[05:39:14] *** Quits: avodonosov (~avodonoso@46.53.240.182) (Quit: Client closed)
[05:39:15] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[06:11:07] <Josh_2> swapping to my new VPS has cut about half a second off of load times, this is lisp related because its a common lisp application :P
[06:19:28] <Josh_2> for context thats about 25% faster
[06:43:09] <hayley> How many times are you reloading things?
[06:50:08] *** Quits: brettgilio (~brettgili@137.184.3.255) (Quit: The Lounge - https://thelounge.chat)
[06:51:05] *** Joins: brettgilio (~brettgili@137.184.3.255)
[06:58:53] *** Joins: khrbt (~znc@user/khrbt)
[07:04:38] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Remote host closed the connection)
[07:15:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:18:31] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:29:14] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[07:29:29] *** Joins: montxero (~user@149.167.149.74)
[07:34:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[07:35:24] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[07:37:17] <beach> Good morning everyone!
[07:40:46] *** Quits: semz (~none@user/semz) (Ping timeout: 256 seconds)
[07:45:33] <elderK> Moin beach :)
[07:58:17] *** Joins: semz (~none@user/semz)
[08:02:11] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[08:05:24] *** Joins: robin (~robin@user/terpri)
[08:33:56] *** Joins: Skyfire (~pyon@user/pyon)
[08:39:32] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[08:39:48] *** Joins: montxero (~user@149.167.149.74)
[08:48:34] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:53:46] *** Joins: JoshYoshi (~user@143.244.54.2)
[08:53:52] *** Quits: JoshYoshi (~user@143.244.54.2) (Remote host closed the connection)
[08:55:52] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 252 seconds)
[09:01:19] *** Joins: Zianic (~12602@user/zianic)
[09:20:27] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:22:49] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[09:25:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:29:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:30:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[09:33:32] <susam> Good morning, beach!
[09:36:01] *** Joins: igemnace (~ian@user/igemnace)
[09:36:53] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:38:45] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[09:46:02] *** Joins: shka (~herr@109.231.62.239)
[09:50:47] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[09:56:07] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[10:12:40] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[10:15:40] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:22:50] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[10:23:06] *** Joins: montxero (~user@149.167.149.74)
[10:31:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 256 seconds)
[10:32:03] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:32:25] *** Parts: akoana (~ah@user/akoana) ()
[10:36:10] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 240 seconds)
[10:37:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:37:30] *** Joins: heisig (~heisig@46.183.103.8)
[10:42:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:42:20] *** Joins: amb007 (~a_bakic@131.149.22.93.rev.sfr.net)
[10:48:53] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:56:52] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[10:57:13] *** Joins: khrbt (~znc@user/khrbt)
[10:58:28] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[11:00:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:02:55] *** Quits: heisig (~heisig@46.183.103.8) (Ping timeout: 252 seconds)
[11:06:17] *** Quits: amb007 (~a_bakic@131.149.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[11:07:08] *** Joins: amb007 (~a_bakic@47.14.23.93.rev.sfr.net)
[11:12:59] *** Joins: heisig (~heisig@46.183.103.8)
[11:22:49] *** Joins: gaqwas (~john@dynamic-095-115-144-131.95.115.pool.telefonica.de)
[11:23:24] *** Joins: Skyfire (~pyon@user/pyon)
[11:37:38] *** Quits: amb007 (~a_bakic@47.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:37:43] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[11:37:56] *** Joins: pve (~pve@178-55-87-118.bb.dnainternet.fi)
[11:38:51] *** Joins: amb007 (~a_bakic@47.14.23.93.rev.sfr.net)
[11:40:52] *** Quits: amb007 (~a_bakic@47.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:40:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:42:08] *** Quits: heisig (~heisig@46.183.103.8) (Remote host closed the connection)
[11:42:31] *** Joins: heisig (~heisig@46.183.103.8)
[11:44:08] *** Quits: heisig (~heisig@46.183.103.8) (Read error: Connection reset by peer)
[11:44:39] *** Joins: heisig (~heisig@46.183.103.8)
[11:46:29] <mfiano> Am I correct in that most-specific-last ordering in only valid in conforming CL for simple method combinations, not standard?
[11:46:35] *** Joins: cosimone (~user@151.14.38.15)
[11:46:48] <mfiano> I am assuming as such since standard accepts no arguments for the :method-combination argument
[11:49:41] *** Quits: heisig (~heisig@46.183.103.8) (Remote host closed the connection)
[11:50:04] *** Joins: heisig (~heisig@46.183.103.8)
[12:02:42] <beach> Right, the standard method combination takes no arguments.
[12:04:01] <flip214> mfiano: the standard method combination is most-specific-first -- or do I understand your questions wrong?
[12:04:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[12:05:14] *** Joins: treflip (~user@95.79.32.99)
[12:10:57] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 245 seconds)
[12:17:45] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Remote host closed the connection)
[12:24:16] *** Quits: heisig (~heisig@46.183.103.8) (Quit: Leaving)
[12:36:37] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:41:24] *** Joins: Th30n (~Th30n@cpe-188-252-158-18.zg5.cable.xnet.hr)
[12:43:32] *** Joins: dra (~dra@2a04:4540:640e:9b00:5a7:7a68:df84:eb4e)
[12:45:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[12:46:15] *** Joins: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4)
[12:48:24] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:48:47] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 240 seconds)
[12:50:01] *** Joins: amb007 (~a_bakic@15.14.23.93.rev.sfr.net)
[12:50:01] *** Quits: amb007 (~a_bakic@15.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:50:17] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:51:13] *** Joins: asarch (~asarch@2806:10ae:7:cd38:e79:474b:45fd:bc28)
[12:51:14] *** Quits: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4) (Quit: Leaving)
[12:59:38] *** Quits: asarch (~asarch@2806:10ae:7:cd38:e79:474b:45fd:bc28) (Quit: Leaving)
[12:59:39] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:04:35] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[13:13:17] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[13:21:55] *** Joins: vats (~vats@180.149.226.8)
[13:36:34] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Quit: Leaving)
[13:42:42] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[13:48:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:57] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[13:50:38] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[13:50:54] *** Joins: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de)
[13:54:58] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:57:34] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 250 seconds)
[14:06:20] <lukego> Hey, on the topic of Quicklisp/CLPM, am I crazy to think it would be nice to be able to specify a distribution via a criteria? The latest versions of all packages, except for these versions that are pinned, and on which these patches apply cleanly, such that test.lisp runs to completion?
[14:06:25] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Quit: Leaving)
[14:07:30] <lukego> For example I write a test.lisp that loads my own application and runs its smoke tests, as the ultimate acceptance criteria, and I specify a few private patches or pinned versions that I need for stuff that's not compatible with upstreams, and then the package manager gets to work finding the latest package versions from Quicklisp/CLPM that will work.
[14:08:47] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[14:10:40] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Client Quit)
[14:11:16] <lukego> This would help me e.g. that I need at least three versions of McCLIM depending on context i.e. the CLIME branch for working on my own application, the mainline branch for reference, and the scytym branch for running e.g. SBCL-IR-VISUALIZER. and, for the latter two versions, I need one or two trivial patches applied to make it run on my local NixOS environment which I've been too lazy to upstream.
[14:12:00] * lukego looks at Qlot...
[14:13:56] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[14:23:24] *** Joins: dvush (~dvush@185.205.44.230)
[14:28:41] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Quit: Leaving)
[14:29:11] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[14:29:37] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Client Quit)
[14:31:37] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[14:37:32] *** Quits: dvush (~dvush@185.205.44.230) (Quit: Client closed)
[14:41:04] *** Joins: dvush (~dvush@185.205.44.230)
[14:41:18] *** Quits: dvush (~dvush@185.205.44.230) (Client Quit)
[14:42:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:44:09] *** Quits: frgo (~frgo@p200300deef0cee00e1934af888849c62.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:44:36] *** Joins: frgo (~frgo@p200300deef0cee00e1eeb850b2f64327.dip0.t-ipconnect.de)
[14:51:14] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:51:48] *** Joins: amb007 (~a_bakic@31.14.23.93.rev.sfr.net)
[14:59:51] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[15:04:55] *** Quits: amb007 (~a_bakic@31.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:05:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:07:03] *** Joins: VincentVega (~user@212.241.16.248)
[15:10:05] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[15:10:27] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[15:15:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:16:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:16:55] *** Joins: amb007 (~a_bakic@31.14.23.93.rev.sfr.net)
[15:16:55] *** Quits: amb007 (~a_bakic@31.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:17:13] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:20:31] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[15:20:47] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[15:26:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:32:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:34:05] *** Joins: random-nick (~random-ni@87.116.180.118)
[15:39:00] <jackdaniel> when you stare at the qlot, the qlot also gazes at you
[15:41:05] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[15:51:15] * Cymew pokes Qlot with his foot, quicking stepping backwards just to be sure
[15:53:21] *** Quits: VincentVega (~user@212.241.16.248) (Quit: ERC (IRC client for Emacs 27.2))
[16:03:17] *** Quits: silasfox (~sbv@2001-4dd1-68e2-0-286d-7bf4-8223-de6a.ipv6dyn.netcologne.de) (Ping timeout: 252 seconds)
[16:05:12] *** Joins: silasfox (~sbv@xdsl-84-44-182-29.nc.de)
[16:13:11] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Read error: Connection reset by peer)
[16:15:25] *** Joins: cranium (~cranium@user/cranium)
[16:27:53] *** Quits: cosimone (~user@151.14.38.15) (Remote host closed the connection)
[16:47:50] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:50:45] <mfiano> lukego: That's exactly what I use CLPM for
[16:58:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:03:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:13:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:18:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[17:25:20] <lukego> mfiano: Good to know!
[17:25:59] <mfiano> Eric is pretty active on the Matrix channel if you have any questions.
[17:26:20] * lukego looks up what Matrix is..
[17:27:57] <jackdaniel> it is a federated im (not much unlike jabber)
[17:30:54] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:54] *** ChanServ sets mode: +o Bike
[17:30:58] <lotuseater> you can take the blue or the red pill
[17:31:59] <hayley> "And the ones that Mother gives you, don't do anything at all... "
[17:36:48] *** Joins: shka (~herr@109.231.62.239)
[17:37:33] *** Joins: makomo (~makomo@user/makomo)
[17:51:30] *** Quits: gko (~user@user/gko) (Remote host closed the connection)
[17:52:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:57:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:59:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:09:36] *** Joins: gko (~user@user/gko)
[18:09:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:10:18] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:18:50] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:19:56] *** Joins: amb007 (~a_bakic@31.14.23.93.rev.sfr.net)
[18:19:56] *** Quits: amb007 (~a_bakic@31.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[18:20:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:30:04] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 252 seconds)
[18:32:02] *** Joins: Everything (~Everythin@37.115.210.35)
[18:32:30] <etimmons> lukego: I'm also happy to chat on IRC :)
[18:33:27] <etimmons> I don't think CLPM (nor Qlot) do exactly what you want, but are pretty close.
[18:34:29] <etimmons> CLPM doesn't apply patches, but it does let you use any git repo so you can apply your patches in a fork and then use that repo.
[18:34:34] <lukego> :-). I still haven't quite looked at CLPM yet, just feeling around for what problems each thing solves. for me I'm interested in the problem above ^ and also somehow having a read-write relationship with my dependencies i.e. easy way to fix problems in them directly instead of making workarounds in application code. I often end up doing 'git clone' and linking into ~/quicklisp/local-projects but then I'm kinda on my own.
[18:35:15] <etimmons> I can see a way to apply arbitrary patches without forking, but it'll require some other features that are in progress for CLPM.
[18:35:22] <lukego> The behavior that sounds attractive to me, at least, would be to fetch the main sources from upstream repo A and fetch a patch from private repo B. and complain or backtrack when the patch doesn't apply.
[18:36:01] <lukego> but in a perfect world there would be a lighter-weight solution that also works for projects that I haven't forked on github. not sure how though really.
[18:37:16] <etimmons> For the "such that test.lisp runs to completion" part, you'd have to script that yourself. I'd imagine it'd be a series of update calls (updating individual deps), testing the result, and rolling back to the older version if it fails.
[18:38:55] <etimmons> But the search space for that is potentially very large, so I only see it working if there's very little backtracking required.
[18:40:36] <lukego> yeah. I think something dumb would be appropriate, e.g. only considering the last 2-3 quicklisp releases of versions, or only considering versions between a known-working baseline verses newer versions
[18:41:07] <etimmons> I really want to make the read-write relationship with your deps smoother. CLPM has some features for that, but they're not the easiest to use. I think the next thing I've got planned in that area is a `hack` command that will automatically clone a dep for you and configure the bundle to use that clone for your local development.
[18:41:23] <lukego> and maybe that whole approach is overkill anyway. I just have a feeling of resistance to manually maintaining separate dependency trees for different projects, but that might actually not be much work
[18:42:05] <lukego> would it be unreasonable to always clone, and the hack comment just e.g. fetches history and maybe adds a writable remote?
[18:42:39] <etimmons> Ideally, `hack` would default to a project's upstream git repo. But that information isn't always easily available, so it'll be pretty much required to manually specify the repo to use for quite a while.
[18:42:58] <lukego> Generally when I `M-.' into a dependency I'd like to have some Git information available. I'm very often doing reflexively running Emacs commands for 'git blame' or 'git log' and being complained that the source is not in a git checkout.
[18:44:09] <etimmons> Oh, that's something I hadn't considered before. Right now, CLPM strips the repo when it installs something from git.
[18:44:43] <etimmons> But I guess it wouldn't be too hard to check out a working tree that just points to the bare repo CLPM has cloned locally....
[18:44:57] * etimmons goes to record this in an issue
[18:45:02] <lukego> I also have a layer of Nix *shudder* over all this that I have to contend with somehow, but that's a separate problem perhaps, and maybe Nix is becoming more trouble than it's worth in this context.
[18:45:32] *** Joins: jpsa (~user@c-va-c3ef24d846-78-1.tingfiber.com)
[18:45:44] <etimmons> That might also solve some other problems we discussed here yesterday regarding submodules and LFS
[18:45:48] *** Quits: Th30n (~Th30n@cpe-188-252-158-18.zg5.cable.xnet.hr) (Quit: WeeChat 3.2)
[18:45:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:46:03] <lukego> btw Julia has a nice bit of community infrastructure which is a bot that builds binaries for all the C/FFI dependency code and seems to do it in a neat way such that it all links together coherently and doesn't hit whatever random libraries are installed system-wide on the machine.
[18:47:21] <lukego> I assume that works well because it successfully installs on NixOS, which is the exactly the distro that breaks all kinds of binary distribution mechanisms, since it doesn't have any of the usual directories like /usr or /lib where people expect to find stuff.
[18:48:03] <etimmons> I'll have to look at that (but doubt I'll have the bandwidth to do much toward replicating it).
[18:49:14] <lukego> *nod* just mentioning it because it's the first time I saw such a thing.
[18:49:53] <lukego> (I'm not really sure how this normally works with Quicklisp, stuff has mostly worked for me provided I install a few C libraries when needed, and I do that easily enough with Nix)
[18:50:00] <etimmons> Honestly, I've been planning to stay far away from managing FFI deps... I've had the misfortune of using Python's Anaconda a few times (which attempts to do similar things) and have walked away scarred each time
[18:51:01] <lukego> yeah it seems like you have already bitten off plenty enough for one person anyway :)
[18:52:33] <Shinmera> I'm biting into that lemon myself
[18:52:53] <Shinmera> Well, not quite yet, but in some capacity in the future once the basis of Forge is done.
[18:53:34] <etimmons> Nice, I've been meaning to ask you about Forge
[18:54:02] <Shinmera> Some of its goals coincide with CLPM so I've been wanting to ask you, as well :)
[18:54:42] <lukego> btw this is the script that I use to setup my Lisp image at the moment. it depends on ql2nix which (IIRC) snapshots software versions by keeping track of everything that asdf/quicklisp installs. So this script just drives the front-end process of making that happen. https://gist.github.com/lukego/966e722cef988246882413a7dc4c6948
[18:55:05] <etimmons> I couldn't tell from the description and bits of code I looked at if it's aiming to be an ASDF alternative, or also take on typical "package manager" like tasks as well
[18:55:37] <Shinmera> It won't do fetching of packages and such. I feel that's an external task.
[18:56:03] <Shinmera> But it will be a build system in the very general sense of 'a thing that performs a set of steps to achieve a desired result' :v
[18:56:55] <Shinmera> At an advanced stage having package fetching integrated would be useful, to automate distributed building, for instance.
[18:57:25] <lukego> I'm idly wondering who would do what if CLPM catches on. for example, if I want to run SBCL-IR-VISUALIZER, would I as the user write a dependency description file for that? Or ideally would application developers distribute those? and if the latter would they compose e.g. with each other and my own when stitching a multi-application image together? and would that get so messy we miss the Quicklisp days of one unified dist?
[19:00:16] <etimmons> Cool. CLPM purposefully tries to stay far away from actually building the code. It just computes a grounded set of releases that satisfy some constraints, throws things in the right places, and then configures a build system (only ASDF at the moment) to find the things it's installed.
[19:00:34] <Shinmera> Right.
[19:01:35] <Shinmera> There's a lot of reasons why I'm building Forge, and one of them is so people can actually have multiple versions of a project 'visible' to the build system at once, and thus finally start writing version constraints into their deps.
[19:01:46] <lukego> that sounds kinda nice for me, since I have a bespoke build system based on nix already, and often end up fighting with other systems that have a build system integrated e.g. rust/julia/etc.
[19:01:49] <etimmons> What got me curious about Forge was that it seemed to have some constraint resolution logic as well. Is that so it can natively support multiple versions of a project?
[19:01:59] <Shinmera> :)
[19:02:05] <etimmons> ah, you answered my question as I wrote it :)
[19:02:24] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:02:46] <Shinmera> Similar to CLPM I also want forge to be out-of-process, only sending commands to the client to do compilation/loading, to avoid poisoning the host with adjacent crap only needed to build things.
[19:03:25] <etimmons> I don't know if you've seen, but rpg and I are aiming to expand ASDF's version constraint language in the next release.
[19:03:29] <Shinmera> Another reason I want this is so I can cleanly deploy things and then load Forge later to do building on a deployed machine. My use-case being mods for Kandria.
[19:03:41] <Shinmera> I have not seen, no
[19:05:53] <Shinmera> As mentioned previously, I've been trying to wrap my brain around constraint resolution for some weeks now. I still don't have a solution I like.
[19:06:20] *** Parts: jpsa (~user@c-va-c3ef24d846-78-1.tingfiber.com) (ERC (IRC client for Emacs 28.0.50))
[19:06:29] <etimmons> Nice! I like that out of process model (obviously). Do you have any general purpose libraries made (or planned) for that communication? I'm starting to get to the point where I'd love to wrap up things like reporting error conditions between processes into a library. My current approach is a little ad-hoc
[19:06:53] <Shinmera> I've started on that in the Forge repo.
[19:06:58] <Shinmera> Nothing done or tested yet, though.
[19:06:58] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:07:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:07:02] <etimmons> I'll have to check the logs, I think I missed seeing anything about constraint resolution.
[19:09:15] <etimmons> lukego: I'm very hesitent to have CLPM's bundles compose. I think that's a one way ticket to madness. But mfiano has convinced me of the need to have some process that can examine the clpmfiles of your dependencies and suggest modifications to your project's clpmfile
[19:09:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[19:09:47] <etimmons> Like "hey, your dependency is using a fork of blah, would you like to use the same fork?"
[19:11:40] <etimmons> My ideal scenario is that directives to check out dependencies from git are only for use in development. When you release a version of your project, it should depend only on dependencies that have been released and your .asd file contains all the appropriate version constraints
[19:13:12] <etimmons> But that starts to get into the question of how do you release projects. I'm not sure of the reddit/IRC overlap, but I posted some thoughts on that yesterday
[19:13:27] <etimmons> https://www.timmons.dev/posts/toward-a-new-cl-project-index.html
[19:15:59] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Remote host closed the connection)
[19:16:35] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[19:17:57] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:24:00] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[19:39:58] *** Joins: robin (~robin@user/terpri)
[19:46:43] <lukego> etimmons: I've been clicking around a bunch of links but I haven't stumbled on an actual concrete project file yet
[19:47:34] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:48:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:48:41] <lukego> I'm wondering how it compares with the output of ql2nix (https://github.com/SquircleSpace/ql2nix), which for my application looks like this: https://gist.github.com/lukego/ac2d656b9f007340258284905894b967
[19:49:42] <lukego> I suppose that the natural way for me to interact with CLPM would be to use it to generate that file in the gist. I wonder if it would have all the information? Currently that data is generated by running quicklisp and hooking ASDF.
[19:50:34] <lukego> ... or maybe ql2nix would just work with CLPM i.e. do the same ASDF-hooking to generate that data but via CLPM instead of Quicklisp.
[19:50:54] <etimmons> Yeah... writing concise documentation may not be my forte
[19:51:01] <etimmons> Here's an example clpmfile: https://gitlab.com/daewok/asdf-release-ops/-/blob/master/clpmfile
[19:51:10] <etimmons> And the corresponding lock: https://gitlab.com/daewok/asdf-release-ops/-/blob/master/clpmfile.lock
[19:51:48] <etimmons> It doesn't seem to have all the same information, but comparable.
[19:52:35] <etimmons> Like I don't save the URL because I assume that can be gotten from the project index
[19:53:04] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[19:53:09] <etimmons> So the lock file only needs to pin to an (index, project, release) tuple
[19:53:40] <lukego> I'll have to let the gears in my brain turn a bit to understand what makes sense in my context. I'm a bit of a funny case since I'm already using the nix stuff that most nobody else uses. also the main practical issue I have with quicklisp is just that my ~/quicklisp/local-projects is just filling up with stale checkouts over time and causing me to drift away from the actual current quicklisp diff... but maybe the solution is
[19:53:40] <lukego> that I need to more actively upstream stuff
[19:54:54] <etimmons> Yeah, CLPM can only help with that so much I feel. Upstreaming is definitely the preferred long term solution
[19:56:49] <lukego> maybe also a software maturity thing. I'm mostly just hacking away in my home directory and wanting to avoid dependency hell. if I were shipping releases I'd be much more concerned about specific details and being accountable for the whole dist.
[19:57:35] <lukego> I can see that e.g. Shinmera would not want to accidentally pick up a new version of some binary blob that then crashes everyone's computers when they do a Steam update, etc.
[19:58:35] <Shinmera> lukego: My specific use case at the moment is for mods to specify constraints on game versions (and other mod versions).
[19:59:00] <Shinmera> lukego: I already control binaries separately pretty strictly myself, but yeah, that would be another use case later down the line I suppose.
[19:59:26] <Shinmera> Though generally I'm in the camp of "update as soon as possible rather than locking versions"
[20:00:09] <lukego> yeah. I like to keep up to date too, but like to avoid "hey this was working yesterday i have no idea what changed since then"
[20:00:17] <Shinmera> Right.
[20:01:09] <etimmons> I have some Gitlab CI jobs that run occasionally run `clpm bundle update -y` then run my system's tests.
[20:01:15] <Shinmera> Another reason why I want to make Forge is to have deterministic plan generation. Meaning Forge has a full separation between a 'planner' and an 'executor'. The plan does not take inventory of local files or anything, meaning you can deterministically ensure that your build operation will do the same things it would have done before. The executor then takes care of avoiding unnecessary steps.
[20:01:38] <etimmons> Helps me notice breakage, but also lets me always have a known working version
[20:02:05] <lukego> Shinmera: Have you read the Nix thesis? Sounds potentially related and it's one of the cleverest designs I know fwiw. https://edolstra.github.io/pubs/phd-thesis.pdf
[20:02:14] <Shinmera> I have not
[20:02:30] <Shinmera> I'll make sure to read it though, thanks
[20:03:09] <lukego> They basically have a declarative description of "the build" - in their case including everything from the kernel to the C compiler to lib to X fonts - and then separately they execute on that build, in practice getting like 99.99% cache hits on the binaries, in a safe and disicplined way.
[20:03:29] <Shinmera> Right. That's the same thing I'm going for, then.
[20:04:06] <lukego> I know you don't like calling out to separate processes but there are a few misguided souls doing using Nix for Lisp stuff. I'd be happy to chat baout it :)
[20:04:34] <Shinmera> I'll shoot you a question if I have one :)
[20:04:36] <lukego> also from the perspective that if there is a better solution than nix i'd like to know about it...
[20:06:06] <lukego> but by far the biggest complication with Nix is just getting that declarative description of the system. sometimes it can be written by hand, sometimes it can be generated from suitable metadata, and often you need to actually run separate package managers (e.g. quicklisp) with a bunch of instrumentation to derive a declarative model from an operational one :)
[20:08:53] *** Joins: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca)
[20:09:16] <lukego> and this varies too. for Lisp I am personally running the instrumented tooling to capture the dependencies that I need. but for e.g. C, Emacs packages, R packages, Python packages, Haskell packages, the distro metadata is already upstream in Nix so you can just name the package you want and it knows how to get them.
[20:09:41] <lukego> (and has its own machinery for e.g. overriding versions and applying patches and stuff)
[20:12:17] <lukego> Oh, it would be cool if CLPM would be a vehicle for getting similarly good package definitions upstream into distros like Nix/debian/etc
[20:12:33] <lukego> (he says, not wanting to know -anything- about how other distros do their packaging)
[20:13:03] <etimmons> Getting that declarative specification from ASDF is a pain. It's both amazing and terrible that loading an .asd file can result in arbitrary code execution.
[20:13:10] <Shinmera> lukego: I have no idea about the process of nix package description, and I'm quite far away from a 'surface syntax' for Forge. I'm currently concentrating only on the internal protocol that descsribes objects and operations. Conceivably you could write an extension to Forge to generate the required components, rather than having to emit a description file.
[20:13:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 256 seconds)
[20:14:14] <Shinmera> Or perhaps an extension could provide a syntax so simple that the only thing you'd have to put into a description would be "(project :via extension)" or something.
[20:14:40] *** Joins: makomo (~makomo@user/makomo)
[20:14:56] *** Joins: makomo_ (~makomo@user/makomo)
[20:15:27] <etimmons> CLPM does have an experimental interface to print that sort of dependency information. It's pretty trivial for simple systems, but in order to work for systems with :defsystem-depends-on or direct calls to asdf:load-system it requires actually installing those dependencies.
[20:16:02] <etimmons> But that part is split out into a separate library (not on QL) yet
[20:16:18] <etimmons> s/) yet/ yet)/
[20:16:36] <lukego> etimmons: that's another quirk with Nix. the actual build happens inside a locked-down sandbox with no network access and a minimal chroot. but that's the step after the messy bit that does the instrumentation to figure out what sources etc that sandbox needs to be populated wiht.
[20:17:08] <etimmons> And is fairly independent from CLPM, so you could install those dependencies using Nix, QL, whatevs
[20:17:53] <etimmons> https://gitlab.common-lisp.net/clpm/asdf-system-groveler
[20:18:10] <etimmons> If you're interested in it, I can add some actual documentation and examples of how to use it
[20:20:03] <lukego> I need to ponder a bit about my "read/write" problem. maybe there's a simple hack available e.g. automatically install two copies of the source, so that I can hack away on the code I see with `M-.' and still be able to do simple operations like diff/revert/upgrade
[20:20:13] <lukego> but if that means reinventing git it's probably on the wrong track..
[20:20:34] <Shinmera> etimmons: interesting. I wrote a static groveller a while back: https://github.com/Shirakumo/dist/blob/2./asdf.lisp
[20:23:27] <etimmons> Shinmera: Nice. I might have gone that route if I had known about eclector at the time.
[20:24:08] <etimmons> But I'm pretty happy with what I've got now, especially since it's robust to people doing crazy customizations of their system class.
[20:24:33] <etimmons> But it can be much slower
[20:25:00] <etimmons> Especially if something like ironclad is dragged in via a :defsystem-depends-on
[20:34:22] <lukego> what makes ironclad slow?
[20:36:06] <Shinmera> compiling it takes a lotta time.
[20:36:07] <mfiano> It does a lot of compile time generation
[20:41:10] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 240 seconds)
[20:41:19] *** Joins: amb007 (~a_bakic@63.14.23.93.rev.sfr.net)
[20:42:26] <lukego> is that down to openssl? would a binary cache of the needed foreign code solve that problem? (and is this in scope for Forge?)
[20:43:14] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[20:44:06] <mfiano> No, it doesn't depend on SSL. It generates a buncha LUTs and such
[20:45:42] <lukego> ah
[20:46:10] <lukego> binary cache of FASLs might be getting a bit silly
[20:47:10] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 240 seconds)
[20:47:30] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[20:49:14] *** Quits: tyson2 (~user@toroon12-3096782677.sdsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[20:53:56] <lukego> okay, it sounds like the problem that's most important to me, that has the fewest other people scratching their heads about right now, is the read/write aspect i.e. how do I smoothly make local hacks and asynchronously upstream them without making too much of a mess.
[21:10:32] *** Quits: amb007 (~a_bakic@63.14.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[21:11:19] *** Joins: amb007 (~a_bakic@14.12.23.93.rev.sfr.net)
[21:17:53] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 252 seconds)
[21:22:49] *** Quits: les (znc@user/les) (Quit: Adios)
[21:23:01] *** Joins: les (znc@user/les)
[21:23:13] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[21:23:48] *** Joins: Skyfire (~pyon@user/pyon)
[21:32:05] *** Quits: amb007 (~a_bakic@14.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:32:16] *** Joins: amb007 (~a_bakic@14.12.23.93.rev.sfr.net)
[21:32:44] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[21:33:38] *** Quits: amb007 (~a_bakic@14.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:33:43] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[21:34:29] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:47:39] *** Joins: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com)
[21:53:28] *** Joins: utis (~utis@vpn-client339.uio.no)
[21:55:04] *** Joins: lisp123 (~lisp123@45.86.202.65)
[22:03:04] *** Joins: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[22:03:15] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:06:10] *** Quits: lisp123 (~lisp123@45.86.202.65) (Ping timeout: 240 seconds)
[22:29:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:32:27] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[22:33:38] *** Quits: tyson2 (~user@cpea84e3fd00d93-cma84e3fd00d90.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[22:36:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[22:45:36] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[22:48:58] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:59:42] *** Joins: khrbt (~znc@user/khrbt)
[23:05:14] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:09:32] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[23:10:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:15:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[23:16:34] *** Quits: utis (~utis@vpn-client339.uio.no) (Ping timeout: 240 seconds)
[23:18:40] *** Joins: utis (~utis@84.208.165.160)
[23:20:43] *** Joins: char (~charles@2600:1700:59e0:bc90:8cad:7d7a:1072:feef)
[23:20:57] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[23:21:33] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:31:22] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[23:33:53] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[23:34:16] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[23:38:42] <cranium> lukego: just to make it clear, you have heard of guix, right? Nix but with guile instead of its own language. Tho I have no idea which of the two is more advanced, but would bet on Nix
[23:40:45] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:45:27] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:49:49] *** Joins: dre (~dre@2001:8003:c932:c301:693b:b827:4df9:b3e4)
[23:58:58] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b016:723d:fc9f:63a9:639e:eb87)
