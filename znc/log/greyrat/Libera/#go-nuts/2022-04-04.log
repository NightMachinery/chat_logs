[00:00:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[00:02:27] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[00:11:19] *** Quits: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net) (Ping timeout: 260 seconds)
[00:12:13] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:15:02] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[00:16:09] *** Joins: kakysha_ (~kakysha@user/kakysha)
[00:18:42] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Remote host closed the connection)
[00:20:18] *** Joins: yonson_ (~yonson@2600:8801:d900::1962)
[00:20:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:20:24] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a)
[00:21:33] *** Quits: yonson (~yonson@2600:8801:d900::1962) (Ping timeout: 260 seconds)
[00:21:51] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d960:d98a:f624:8ef) (Ping timeout: 256 seconds)
[00:25:19] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[00:36:59] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[00:38:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:42:13] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[00:42:33] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[00:44:57] *** Joins: some14u (~textual@94-226-101-117.access.telenet.be)
[00:45:52] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f750:a200:f9d1:c665:a064:ac5a) (Ping timeout: 260 seconds)
[00:48:04] *** Quits: some14u (~textual@94-226-101-117.access.telenet.be) (Client Quit)
[00:48:26] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[00:48:27] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[00:48:27] *** Joins: resamvi (~resamvi@user/resamvi)
[00:50:57] *** Joins: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de)
[00:52:51] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[00:53:30] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[00:54:14] *** Joins: some14u (~textual@ptr-1mko9qul8c3oxij0voi.18120a2.ip6.access.telenet.be)
[00:56:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[00:59:19] *** Quits: some14u (~textual@ptr-1mko9qul8c3oxij0voi.18120a2.ip6.access.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:55] *** Quits: kakysha_ (~kakysha@user/kakysha) (Read error: Connection reset by peer)
[01:01:01] *** Joins: kakysha (~kakysha@user/kakysha)
[01:03:41] *** Joins: kakysha_ (~kakysha@user/kakysha)
[01:06:13] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 240 seconds)
[01:11:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:13:33] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:13:43] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[01:17:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[01:26:07] *** Quits: rek2 (~ReK2@user/rek2) (Quit: WeeChat 3.5)
[01:33:02] <Teckla> Is the web server in the standard Go library "production grade"?  Could it be safely, reliably, and robustly used as an Internet-facing web server?
[01:37:08] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:39:40] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[01:39:41] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[01:39:41] *** Joins: resamvi (~resamvi@user/resamvi)
[01:40:25] <b0nn> Teckla: this comes up from time to time, AIUI Google uses it in prod for some services
[01:41:36] <foobaz> i've used it in production too, directly talking to users, it works great
[01:41:48] <foobaz> only problems i had were in my own code, not go's
[01:43:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[01:43:54] <Teckla> OK, thanks b0nn and foobaz
[01:44:23] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[01:45:04] *** Quits: belphegor666 (~satan@user/belphegor666) (Read error: Connection reset by peer)
[01:46:54] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:51:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[01:53:38] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[01:56:59] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 246 seconds)
[01:59:44] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:02:52] *** Quits: rolo (~error@ip1f12fb7c.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.4.1)
[02:03:46] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.5)
[02:04:13] *** Joins: kakysha_ (~kakysha@user/kakysha)
[02:16:55] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[02:21:58] *** Joins: treeford (~charleste@user/treeford)
[02:22:52] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[02:22:53] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:25:23] *** Quits: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:26:44] *** Joins: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de)
[02:26:46] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[02:26:55] *** Quits: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:28:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:28:02] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[02:28:03] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[02:28:03] *** Joins: resamvi (~resamvi@user/resamvi)
[02:31:17] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 256 seconds)
[02:31:19] *** Quits: greyfoxit (~greyfoxit@217.15.63.249) (Ping timeout: 260 seconds)
[02:31:50] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[02:32:13] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[02:40:08] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Quit: Leaving)
[02:41:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:48:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[02:50:23] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[02:53:15] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:54:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:55:45] *** Quits: yelnah (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[02:55:55] *** Joins: yelnah (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7)
[02:59:48] <dostoyevsky2> Can one get a mutex on a context?  So that would be similar to Java's synchronized `process(c *SomeContext) { synchronized(c) { } }' ... I could imagine using a sync.Map to emulate a synchronized() but it's going to be much less efficient than in Java
[03:00:26] <dostoyevsky2> Not even sure if one could store a mutex in a sync.Map
[03:00:27] <lazyreader> why would you need a synchronized context like that?
[03:00:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:01:17] <dostoyevsky2> lazyreader: I am interposing some C calls... there might be multiple threads accessing my code
[03:01:51] <dostoyevsky2> And using a global lock, ala Python GIL or the like ... that's going to be very inefficient
[03:01:59] <lazyreader> ok, but what in the context are you worried about having collide?
[03:02:06] <lazyreader> you can't write to the values map
[03:03:26] <lazyreader> (context.WithValue returns a copy of the context)
[03:03:48] <dostoyevsky2> Context here is just some c struct...
[03:03:49] <bpalmer> it's possible to pass around the result of a var mu = new(sync.Mutex) ; ctx = context.WithValue(ctx, "mu", mu)
[03:03:59] <lazyreader> oh wait, it's not a context.Context
[03:04:12] <lazyreader> it's just some random struct?
[03:04:25] <dostoyevsky2> I don't have thread-local storage, like the libc has...
[03:04:37] <DHowett> q
[03:04:48] <DHowett> er, sorry.
[03:05:15] <bpalmer> dostoyevsky2: so you might have multiple C threads calling back into go?
[03:05:16] <lazyreader> if you're trying to manage access to shared memory, you have to manage that access explicitly, yes
[03:05:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[03:08:42] <dostoyevsky2> hmmm... maybe I should just use gettid() and then use that value to get the thread id...
[03:09:38] <dostoyevsky2> bpalmer: yeah...  and I need extra structs for certain c structs.. so I have to keep track of which thread did make which calls
[03:11:22] <dostoyevsky2> so the context would be the gettid() as it's always C calling Go, and C only knows threads... but I'd need then to find the correct mutex, which I'd store in a sync.Map ... which still uses a global Mutex but that would be very quick
[03:15:48] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[03:15:51] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[03:15:52] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[03:15:52] *** Joins: resamvi (~resamvi@user/resamvi)
[03:16:44] <dostoyevsky2> Or just using c mutexes with https://en.cppreference.com/w/c/thread/thread_local
[03:19:20] *** Quits: inr (~a@c-4543e555.040-159-73746f16.bbcust.telenor.se) (Ping timeout: 272 seconds)
[03:20:37] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[03:22:55] *** Quits: c10l (~c10l@user/c10l) (Quit: See ya! o/)
[03:24:05] *** Joins: c10l (~c10l@user/c10l)
[03:24:11] *** Quits: mpldr (~mpldr@user/mpldr) (Quit: WeeChat 3.5)
[03:29:08] *** Joins: BrunoFontes (~bruno@2a02:c207:2026:6264::1)
[03:29:21] *** Joins: rawrrr (uid540880@id-540880.lymington.irccloud.com)
[03:30:15] *** Joins: rcernin (~rcernin@101.189.129.123)
[03:32:17] *** Quits: adip (~adip@deu228.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[03:33:02] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[03:34:09] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[03:34:17] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:34:31] *** Quits: Dennis_ (uid548341@id-548341.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:39:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[03:57:12] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[03:57:43] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Max SendQ exceeded)
[03:58:23] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[03:58:50] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Max SendQ exceeded)
[03:59:18] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:02:06] *** Joins: inr (~a@c-4543e555.040-159-73746f16.bbcust.telenor.se)
[04:06:17] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[04:06:17] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[04:06:17] *** Joins: resamvi (~resamvi@user/resamvi)
[04:06:19] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[04:07:39] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[04:08:45] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 256 seconds)
[04:09:47] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[04:10:47] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[04:11:18] *** Joins: rcernin (~rcernin@101.189.129.123)
[04:24:42] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:29:48] *** Joins: treeford (~charleste@user/treeford)
[04:34:15] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[04:38:20] *** Joins: zacts (~zacts@user/zacts)
[04:38:39] <zacts> hi does Go compile into a single binary?
[04:38:53] <zacts> like can I use it for command line tools that compile into a single binary?
[04:39:08] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[04:39:40] <b0nn> It compiles to an architecture/OS targetted binary (there are also lib  builds but that's aside from what you are asking for)
[04:40:18] *** Joins: prologic (~prologic@mail.mills.io)
[04:40:29] <b0nn> So, if you want to build for Linux on an AMD 64, you tell it to build a binary for that, if you want to build for Windows on i386 you tell it to build for that
[04:40:40] <prologic> Any hints on what I can do to resolve an issue where a unit test passes if you run it explicitly with go test -run ... but fails when you run all tests at once with go test . ?
[04:40:56] <prologic> e.g: https://ci.mills.io/prologic/msgbus/48/1/2
[04:41:01] <b0nn> prologic: it's depending on state from other tests?
[04:41:09] <prologic> imposisble
[04:41:17] <bpalmer> zacts is gone, btw
[04:41:23] <prologic> b0nn see PR here https://git.mills.io/prologic/msgbus/pulls/34
[04:41:23] <b0nn> oh, my mistake you already know the answer
[04:41:35] <prologic> I say impossible becuase if that's true, then os.MkdirTemp() has a bug
[04:41:39] <prologic> and is returning the same tempo dir :/
[04:42:00] <prologic> b0nn sorry I just can't read/type fast enough due to my vision impairment
[04:42:05] <prologic> sorry for sounding blunt :)
[04:42:17] <prologic> you are right I could be doing exactly this stupid thing but it seems unlikely
[04:42:37] * prologic re-reads the code
[04:42:49] <prologic> Q: Is it possible for os.MkdirTemp() to return the same dir?
[04:45:15] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[04:45:36] <prologic> this is bizzare I can't see how this test depends on prior state at all
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:33] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 260 seconds)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:39] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[04:48:08] *** Quits: antranigv (~antranigv@37.252.78.252) (Ping timeout: 260 seconds)
[04:48:19] *** Joins: antranigv_ (~antranigv@37.252.78.252)
[04:49:06] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[04:51:32] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[04:51:46] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Client Quit)
[04:52:51] <prologic> I'm stumped, every test is setup with their own wal log dir
[04:52:59] <prologic> so no test should depend on another
[04:54:25] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:55:36] <prologic> > Multiple programs or goroutines calling MkdirTemp simultaneously will not choose the same directory.
[04:55:38] <prologic> So no
[04:55:41] <prologic> hmmm
[04:57:13] *** Joins: resamvi (~resamvi@user/resamvi)
[05:01:35] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[05:07:55] *** Joins: zacts (~zacts@user/zacts)
[05:09:37] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:16:41] <prologic> b0nn OMG!
[05:16:44] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:16:51] <prologic> I do have some inter-depdnecy on some test state
[05:16:54] <prologic> But not what you expect
[05:17:02] <prologic> somehow some optinos in a struct are being shared
[05:17:16] <prologic> Now I have to go figure out how da fuq that's happenning :D
[05:17:56] *** Joins: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[05:21:12] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[05:21:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[05:22:55] <prologic> b0nn bingo I'm an idiot
[05:22:59] <prologic> I was copying a struct :D
[05:26:57] *** Quits: antranigv_ (~antranigv@37.252.78.252) (Ping timeout: 256 seconds)
[05:27:15] *** Joins: antranigv (~antranigv@37.252.78.252)
[05:27:17] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[05:27:31] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[05:30:55] <prologic> b0nn I apologize for my silliness :D
[05:31:06] <prologic> How does one copy a struct anyway? :D
[05:31:19] <prologic> I avoided it altogether by just having a function return a new one
[05:46:30] *** Joins: resamvi (~resamvi@user/resamvi)
[05:47:30] *** Joins: neurocyte86144 (~neurocyte@IP-045010063124.dynamic.medianet-world.de)
[05:47:31] *** Quits: neurocyte86144 (~neurocyte@IP-045010063124.dynamic.medianet-world.de) (Changing host)
[05:47:31] *** Joins: neurocyte86144 (~neurocyte@user/neurocyte)
[05:49:37] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:49:37] *** neurocyte86144 is now known as neurocyte8614
[05:50:36] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[05:52:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:57:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[06:11:32] *** Joins: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[06:17:44] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[06:24:05] *** Joins: rcernin (~rcernin@101.189.129.123)
[06:25:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:26:48] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 272 seconds)
[06:29:59] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[06:31:11] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[06:32:10] *** Joins: zaz\ (~zaz@poneybl.eu)
[06:33:01] *** Joins: morph (~morph@31.134.240.145)
[06:33:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:34:52] *** Quits: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp) (Remote host closed the connection)
[06:36:41] *** Joins: noboruma (~noboruma@202-189-221-251.tokyo.fdn.vectant.ne.jp)
[06:36:48] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[06:36:48] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[06:36:48] *** Joins: resamvi (~resamvi@user/resamvi)
[06:38:30] *** Joins: irontom (~user@69.174.103.168)
[06:41:17] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[06:41:35] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:46:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[06:47:28] *** Quits: irontom (~user@69.174.103.168) (Remote host closed the connection)
[06:48:21] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:53:33] *** Quits: morph (~morph@31.134.240.145) (Ping timeout: 260 seconds)
[06:55:19] *** Joins: morph (~morph@31.134.240.145)
[06:57:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:00:26] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[07:02:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[07:03:51] *** Joins: rcernin (~rcernin@101.189.129.123)
[07:07:10] *** Joins: moog_ (~moog@107.126.53.66)
[07:09:34] *** Quits: moog__ (~moog@98.97.85.156) (Ping timeout: 260 seconds)
[07:09:53] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[07:11:26] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[07:11:58] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:13:39] *** Quits: moog_ (~moog@107.126.53.66) (Ping timeout: 260 seconds)
[07:14:05] *** Joins: moog (~moog@98.97.85.156)
[07:18:18] *** Joins: JPT (~jpt@classified.name)
[07:22:45] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:23:42] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:25:51] *** Quits: prologic (~prologic@mail.mills.io) (Quit: ZNC - https://znc.in)
[07:26:24] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[07:26:24] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[07:26:24] *** Joins: resamvi (~resamvi@user/resamvi)
[07:26:45] *** Joins: prologic (~prologic@mail.mills.io)
[07:27:32] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:7011:ff02:34b7:42a1)
[07:28:55] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[07:30:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[07:30:57] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[07:33:05] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:7011:ff02:34b7:42a1) (Ping timeout: 256 seconds)
[07:36:32] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:39:24] *** Quits: morph (~morph@31.134.240.145) (Quit: leaving)
[07:41:51] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[07:44:52] <b0nn> heh, you're ok, we're all a bit snappy at times, and I'm glad you found the bug
[07:45:56] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Client Quit)
[07:47:08] <prologic> thanks :)
[07:48:22] *** Joins: treeford (~charleste@user/treeford)
[07:50:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:52:28] *** Quits: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (Ping timeout: 260 seconds)
[07:52:51] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[07:55:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[07:58:57] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:59:46] *** Joins: favadi (~favadi@2001:ee0:4081:6914:dc0f:7886:2653:eb92)
[07:59:56] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[08:00:38] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 246 seconds)
[08:01:41] *** Quits: khyr0n__ (~khyr0n@2806:2f0:9260:cb2d:5fd:1a5c:dad0:bb92) (Quit: Leaving)
[08:04:37] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[08:11:03] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[08:11:32] <mizzunet> What are some good resources to learn Go?
[08:13:58] <prologic> I recommend Go by Example
[08:14:07] <prologic> If you have a background in other langauges
[08:14:59] <prologic> You can also read my favour gist https://gist.github.com/prologic/5f6afe9c1b98016ca278f4d507e65510
[08:14:59] <prologic> :D
[08:15:06] <prologic> But warning it is a bit shallow
[08:15:16] <prologic> Read it + Go by Examples and you'll be good
[08:15:32] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[08:15:32] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[08:15:32] *** Joins: resamvi (~resamvi@user/resamvi)
[08:15:44] <mizzunet> Cool
[08:17:58] *** Joins: KekS (~KekSi@dynamic-077-180-084-156.77.180.pool.telefonica.de)
[08:19:49] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[08:21:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:21:44] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:22:04] *** Quits: KekSi (~KekSi@77.189.144.30) (Ping timeout: 272 seconds)
[08:25:19] <seebs> i wasn't super happy with Go By Example, I liked The Go Programming Language, and honestly one of the best starting places is just the Go Tour.
[08:25:34] <seebs> It's a very small and simple language, so it's pretty practical to do the tour and just start coding.
[08:26:41] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[08:26:48] <prologic> Oh the Go Tour is great too
[08:26:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[08:27:43] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:37:51] *** Quits: rawley_ (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:37:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:40:16] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01)
[08:45:42] *** Joins: zacts (~zacts@user/zacts)
[08:46:14] <mizzunet> 👍️
[08:47:10] <mizzunet> Is it normal to take compiling more than 10 minutes for a simple GTK exmple code?
[08:49:49] <mizzunet> This file https://github.com/gotk3/gotk3-examples/blob/master/gtk-examples/addremove/addremove.go
[08:49:53] <seebs> stuff that includes cgo can take ridiculous amounts of time for first compiles before the cache gets there
[08:50:00] <seebs> cgo is still gonna be insanely slow
[08:50:04] <seebs> because C compilation is slow
[08:51:39] <mizzunet> Oh
[08:52:09] *** Joins: hanzo (uid532183@user/hanzo)
[08:52:50] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[08:55:39] <mizzunet> Has to got to compile this cgo for each of those gtk example?
[08:56:16] <mizzunet> Or the other compilations can make use of cache
[08:56:18] <mizzunet> ?
[08:58:21] <prologic> mizzunet I reocmmend you look at GIO https://gioui.org/
[08:58:26] <prologic> over GTK and having to pull in CGO
[08:59:39] <mizzunet> Nice
[09:00:21] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[09:00:22] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[09:00:22] *** Joins: resamvi (~resamvi@user/resamvi)
[09:04:43] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[09:09:34] *** Joins: zacts (~zacts@user/zacts)
[09:22:55] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[09:22:56] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[09:22:56] *** Joins: resamvi (~resamvi@user/resamvi)
[09:23:57] *** Quits: PuercoPop (~user@191.98.159.174) (Remote host closed the connection)
[09:36:58] *** Quits: resamvi (~resamvi@user/resamvi) (Quit: resamvi)
[09:37:16] *** Quits: prologic (~prologic@mail.mills.io) (Quit: ZNC - https://znc.in)
[09:37:28] *** Joins: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk)
[09:38:00] *** Joins: prologic (~prologic@mail.mills.io)
[09:39:22] *** Quits: favadi (~favadi@2001:ee0:4081:6914:dc0f:7886:2653:eb92) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:43:59] *** Joins: favadi (~favadi@2001:ee0:4081:6914:1d4d:d1da:d234:eef0)
[09:44:03] *** Joins: mncheck (~mncheck@193.224.205.254)
[09:46:12] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Remote host closed the connection)
[09:48:33] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[09:50:09] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[09:51:02] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 260 seconds)
[09:53:02] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[10:01:57] *** Quits: yelnah (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7) (Ping timeout: 260 seconds)
[10:02:59] *** Joins: yelnah (~felix@2001:44b8:30d8:2cd:6f0:21ff:fe3c:d4d7)
[10:09:35] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 260 seconds)
[10:10:46] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:11:20] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[10:19:05] *** Joins: idstam_ (~Thunderbi@185.176.247.4)
[10:22:01] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:25:07] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:25:34] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[10:26:19] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:26:50] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:28:36] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:29:36] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[10:29:48] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[10:29:48] *** Joins: belphegor666 (~satan@user/belphegor666)
[10:41:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:41:23] *** Quits: idstam (~idstam@185.176.247.4) (Quit: WeeChat 3.3)
[10:41:23] *** idstam_ is now known as idstam
[10:44:58] *** Joins: adip (~adip@deu228.neoplus.adsl.tpnet.pl)
[10:48:41] *** Joins: mpldr (~mpldr@user/mpldr)
[10:52:37] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:53:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[10:54:36] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[11:06:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:09:27] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[11:09:27] *** Quits: MrElendig (~Urist@archlinux/op/MrElendig) (*.net *.split)
[11:09:27] *** Quits: mpldr_ (01c29e3a1d@user/mpldr) (*.net *.split)
[11:09:27] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (*.net *.split)
[11:09:27] *** Quits: mrtazz (~mrtazz@portal.unwiredcouch.com) (*.net *.split)
[11:09:27] *** Quits: seds (sid492514@user/seds) (*.net *.split)
[11:09:27] *** Quits: ek0 (~vincent@2a01cb0003457d005bff511cba75fdd2.ipv6.abo.wanadoo.fr) (*.net *.split)
[11:09:27] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (*.net *.split)
[11:09:27] *** Quits: marlinc (~marlinc@user/marlinc) (*.net *.split)
[11:09:27] *** Quits: rewt (~default@user/rewt) (*.net *.split)
[11:09:27] *** Quits: Guest3081 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (*.net *.split)
[11:09:27] *** Quits: gildarts (16abab341f@user/gildarts) (*.net *.split)
[11:09:27] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[11:09:27] *** Quits: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com) (*.net *.split)
[11:09:27] *** Quits: borrougagnou_alt (~borrougag@91.134.153.132) (*.net *.split)
[11:09:27] *** Quits: be3uykpy (~ubuntu@141.144.233.89) (*.net *.split)
[11:09:27] *** Quits: Louis_ (~Louis@my-hostna.me) (*.net *.split)
[11:09:27] *** Quits: dasrael (~rabbit@user/dasrael) (*.net *.split)
[11:09:27] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (*.net *.split)
[11:09:27] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (*.net *.split)
[11:09:27] *** Quits: tofran55 (~tofran@bl15-47-228.dsl.telepac.pt) (*.net *.split)
[11:09:27] *** Quits: jay_wild (~very@138.68.15.221) (*.net *.split)
[11:09:27] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[11:09:27] *** Quits: notepad72 (~notepad@129.159.46.243) (*.net *.split)
[11:09:27] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[11:09:27] *** Quits: jlaffaye_ (~jlaffaye@user/jlaffaye) (*.net *.split)
[11:09:27] *** Quits: omnihil_ (hermes@camel.ethereal.net) (*.net *.split)
[11:09:27] *** Quits: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr) (*.net *.split)
[11:09:27] *** Quits: sgarciapdx (~serge@irc.shork.io) (*.net *.split)
[11:09:27] *** Quits: egy (egy@tilde.team) (*.net *.split)
[11:09:27] *** Quits: iivvoo (~l@m3r.nl) (*.net *.split)
[11:09:27] *** Quits: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de) (*.net *.split)
[11:09:27] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[11:09:27] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[11:09:27] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (*.net *.split)
[11:09:27] *** Quits: void09 (~void@150.230.21.57) (*.net *.split)
[11:09:27] *** Quits: clee (~clee@209.198.135.112) (*.net *.split)
[11:09:27] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[11:09:28] *** Quits: avery (sid501608@id-501608.uxbridge.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: Balooga (sid407689@id-407689.lymington.irccloud.com) (*.net *.split)
[11:09:28] *** Quits: catbeard (~noise@user/catbeard) (*.net *.split)
[11:09:28] *** Quits: chimeracoder_ (sid230642@2a03:5180:f:1::3:84f2) (*.net *.split)
[11:09:28] *** Quits: syg_ (~syg@flamebot.net) (*.net *.split)
[11:09:28] *** Quits: Pokey (~pokey@spikeyCactus/hoosky) (*.net *.split)
[11:09:28] *** Rhvs is now known as Rhys
[11:09:35] *** Joins: gildarts (16abab341f@user/gildarts)
[11:09:37] *** Joins: syg (~syg@flamebot.net)
[11:09:37] *** Joins: mpldr_ (01c29e3a1d@user/mpldr)
[11:09:40] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[11:09:42] *** Joins: jlaffaye (~jlaffaye@ns517217.ip-158-69-27.net)
[11:09:49] *** Joins: ek0 (~vincent@2a01cb0003457d005bff511cba75fdd2.ipv6.abo.wanadoo.fr)
[11:09:52] *** Quits: jlaffaye (~jlaffaye@ns517217.ip-158-69-27.net) (Changing host)
[11:09:52] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[11:09:53] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[11:09:55] *** Joins: Wessie (~Wessie@static.226.41.47.78.clients.your-server.de)
[11:09:58] *** Joins: borrougagnou (~borrougag@91.134.153.132)
[11:10:02] *** Joins: chimeracoder_ (sid230642@2a03:5180:f:1::3:84f2)
[11:10:05] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[11:10:09] *** Joins: omnihil (~hermes@72.52.96.202)
[11:10:09] *** Joins: Pokey (~pokey@spikeyCactus/hoosky)
[11:10:09] *** Joins: jeromenerf (~jerome@176.149.34.153)
[11:10:11] *** Joins: opcode (~opcode@2604:5800:0:1f::2)
[11:10:22] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[11:10:23] *** Joins: rewt (~default@user/rewt)
[11:10:32] *** Joins: Balooga (sid407689@2a03:5180:f:2::6:3889)
[11:10:32] *** Joins: Louis (~Louis@my-hostna.me)
[11:10:34] *** Joins: seds (sid492514@2a03:5180:f:1::7:83e2)
[11:10:39] *** Joins: avery (sid501608@2a03:5180:f:5::7:a768)
[11:10:44] *** Quits: seds (sid492514@2a03:5180:f:1::7:83e2) (Changing host)
[11:10:44] *** Joins: seds (sid492514@user/seds)
[11:10:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[11:10:59] *** Joins: iivvoo (~l@m3r.nl)
[11:11:01] *** Joins: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com)
[11:11:04] *** Quits: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com) (Changing host)
[11:11:04] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[11:11:06] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[11:11:08] *** Joins: mrtazz (~mrtazz@portal.unwiredcouch.com)
[11:11:10] *** Joins: marlinc (~marlinc@user/marlinc)
[11:11:13] *** Joins: RayS (~raysl@sdf1.xen.prgmr.com)
[11:11:14] *** Joins: void09 (~void@150.230.21.57)
[11:11:18] *** Joins: catbeard (~noise@user/catbeard)
[11:11:28] *** Joins: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com)
[11:11:34] *** Joins: be3uykpy (~ubuntu@141.144.233.89)
[11:11:35] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[11:13:11] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[11:13:11] *** Quits: chilversc (~chilversc@user/chilversc) (*.net *.split)
[11:13:11] *** Quits: Ugrastil277 (~Ugrastil@89.40.112.204) (*.net *.split)
[11:13:11] *** Quits: moto (~moto@user/moto) (*.net *.split)
[11:13:11] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[11:13:11] *** Quits: summonner (~summonner@188.24.18.149) (*.net *.split)
[11:13:11] *** Quits: benji (~benji@user/benji) (*.net *.split)
[11:13:11] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[11:13:11] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[11:13:11] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (*.net *.split)
[11:13:11] *** Quits: grantbow (~grantbow@tatooine.princessleia.com) (*.net *.split)
[11:13:12] *** Quits: kermit4 (sid393220@id-393220.helmsley.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: dale (~dale@user/dale) (*.net *.split)
[11:13:12] *** Quits: mattikus (sid161707@user/mattikus) (*.net *.split)
[11:13:12] *** Quits: lebster (sid17131@id-17131.hampstead.irccloud.com) (*.net *.split)
[11:13:12] *** Quits: psil (~krwlisp@karatefylla.nu) (*.net *.split)
[11:13:12] *** Quits: mdel (~mdel@user/mdel) (*.net *.split)
[11:13:12] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (*.net *.split)
[11:13:12] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[11:13:12] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[11:13:12] *** Quits: DHowett (~dustin@kaus.howett.net) (*.net *.split)
[11:13:12] *** Quits: nickster (~nickster@67.207.91.6) (*.net *.split)
[11:13:12] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:13:12] *** Quits: GinjaNinja32 (~nyx@thanatos.gn32.uk) (*.net *.split)
[11:13:20] *** Joins: dale (dale@user/dale)
[11:13:20] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[11:13:22] *** Joins: GinjaNinja32 (~nyx@thanatos.gn32.uk)
[11:13:22] *** Joins: grantbow (~grantbow@50.116.30.199)
[11:13:24] *** Joins: DHowett (~dustin@kaus.howett.net)
[11:13:26] *** Joins: Ugrastil277 (~Ugrastil@89.40.112.204)
[11:13:27] *** Joins: moto (~moto@user/moto)
[11:13:32] *** Joins: kermit4 (sid393220@id-393220.helmsley.irccloud.com)
[11:13:32] *** Joins: lebster (sid17131@id-17131.hampstead.irccloud.com)
[11:13:32] *** Joins: mattikus (sid161707@user/mattikus)
[11:13:39] *** Joins: summonner (~summonner@188.24.18.149)
[11:13:45] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[11:13:47] *** Joins: psil (~krwlisp@karatefylla.nu)
[11:13:51] *** Joins: chilversc (~chilversc@user/chilversc)
[11:13:56] *** Joins: zkanda (~zkanda@box.makean.art)
[11:13:57] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[11:14:03] *** Joins: nickster (~nickster@67.207.91.6)
[11:14:03] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[11:14:04] *** Joins: mdel (~mdel@user/mdel)
[11:14:04] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[11:14:04] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[11:14:05] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:14:08] *** Joins: benji (~benji@user/benji)
[11:14:15] *** Joins: deepy (deepy@user/deepy)
[11:14:45] *** Joins: jay_wild (~very@138.68.15.221)
[11:14:46] *** Joins: clee (~clee@tali.t0k.org)
[11:14:51] *** Joins: koolazer (~koo@user/koolazer)
[11:15:54] *** Joins: greyfoxit (~greyfoxit@217.15.62.33)
[11:21:18] *** Quits: zaz\ (~zaz@poneybl.eu) (Ping timeout: 272 seconds)
[11:24:07] *** Joins: zaz\ (~zaz@poneybl.eu)
[11:24:22] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[11:24:24] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:24:38] *** Joins: treeford (~charleste@user/treeford)
[11:28:19] *** Joins: egy (egy@tilde.team)
[11:28:53] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[11:32:03] *** Joins: habamax (~habamax@user/habamax)
[11:34:56] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:37:46] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (Ping timeout: 272 seconds)
[11:40:20] *** Joins: Moebius (~Moebius@89.28.122.14)
[11:40:22] *** Joins: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se)
[11:40:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:42:58] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:45:33] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[11:47:16] *** Joins: shka (~herr@109.231.3.55)
[11:48:04] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[11:52:45] *** Quits: lungaro (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Remote host closed the connection)
[11:53:04] *** Joins: lungaro (~sig@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[11:54:16] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[11:58:00] *** Joins: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca)
[12:05:38] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Ping timeout: 272 seconds)
[12:15:35] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:16:26] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:18:33] *** Quits: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca) (Quit: Konversation terminated!)
[12:18:50] *** Joins: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca)
[12:19:17] *** Quits: misuto (~misuto@h-155-4-73-21.A192.priv.bahnhof.se) (Ping timeout: 246 seconds)
[12:21:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[12:24:35] *** Joins: fef (~thedawn@user/thedawn)
[12:26:09] *** Quits: xsteadfastx (~marv@94.31.99.245) (Quit: WeeChat 3.4)
[12:26:33] *** Joins: xsteadfastx (~marv@94.31.99.245)
[12:37:24] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:38:28] *** Joins: Batzy (~quassel@user/batzy)
[12:38:29] *** Quits: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca) (Quit: Konversation terminated!)
[12:43:59] *** Joins: rendar (~rendar@user/rendar)
[12:50:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[12:52:40] *** Quits: summonner (~summonner@188.24.18.149) (Quit: Leaving)
[12:52:47] *** Joins: fling (~fling@user/fling)
[13:00:18] *** Quits: favadi (~favadi@2001:ee0:4081:6914:1d4d:d1da:d234:eef0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:00:36] *** Quits: zwr (~zwr@2804:d45:b966:fb00:855e:197b:3580:2fd7) (Ping timeout: 240 seconds)
[13:01:27] *** Joins: zwr (~zwr@2804:d45:b966:fb00:85c1:b367:ef69:3db5)
[13:07:42] *** Joins: favadi (~favadi@2001:ee0:4081:6914:1092:3801:21dd:5670)
[13:09:41] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[13:10:51] *** Joins: ricci (~ricci@31.187.110.131)
[13:13:39] *** Quits: xsteadfastx (~marv@94.31.99.245) (Quit: WeeChat 3.4.1)
[13:15:38] *** Joins: moog_ (~moog@98.97.86.172)
[13:16:05] *** Joins: xsteadfastx (~marv@94.31.99.245)
[13:16:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:16:37] *** Quits: xsteadfastx (~marv@94.31.99.245) (Client Quit)
[13:17:44] *** Joins: xsteadfastx (~marv@94.31.99.245)
[13:18:33] *** Quits: moog (~moog@98.97.85.156) (Ping timeout: 260 seconds)
[13:19:53] *** Joins: ramblebamble (~ramblebam@82.119.187.226)
[13:24:11] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[13:25:45] *** Joins: kakysha_ (~kakysha@user/kakysha)
[13:27:39] *** Joins: moog__ (~moog@98.97.83.116)
[13:27:46] *** Quits: xsteadfastx (~marv@94.31.99.245) (Quit: WeeChat 3.4.1)
[13:28:05] *** Joins: xsteadfastx (~marv@94.31.99.245)
[13:30:47] *** Quits: moog_ (~moog@98.97.86.172) (Ping timeout: 268 seconds)
[13:33:47] *** Joins: misuto (~misuto@h-37-123-159-114.A192.priv.bahnhof.se)
[13:34:53] *** Quits: moog__ (~moog@98.97.83.116) (Ping timeout: 260 seconds)
[13:39:11] <rendar> go run will build the go code into an effective system binary (like ELF?) or will it just compile into a intermediate bytecode, or will it just run interpreting the text code?
[13:39:30] <rendar> i ask this, because i noticed a slight ~400ms delay while typing 'go run'
[13:39:36] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[13:44:24] <fizzie> It does the same thing as `go build` and then runs the resulting binary.
[13:45:00] <rendar> i see
[13:45:17] <rendar> i can't explain this little delay then, build+./calling_executable hasn't it
[13:47:38] <ricci> did you delete the old binary before measuring build+./exec time?
[13:48:57] <fizzie> And are you passing exactly the same package specifier to both? (E.g., not a package name to build but a list of .go files to run?)
[13:48:57] <rendar> ricci, no need, because go run didn't produce any binary in the current directory, like build did
[13:49:24] <rendar> fizzie, its just an hello world program, literally 3 lines of code
[13:49:59] *** Joins: roped (~shadow@user/roped)
[13:50:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 248 seconds)
[13:51:58] <roped> I would like to attempt packaging certain Go software for a Linux distro, but I don't even have hello world level programming experience in Go. Are there any general docs that I should read (regarding packaging stuff rather than programming), before I start searching randomly for solutions to details I don't understand?
[13:52:53] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:53:24] <ricci> rendar: if you never built it before `go run`, the delay might be because the compilation was not cached yet
[13:53:59] <rendar> i see
[13:54:28] <rendar> another thing, why `ldd go_executable` tells me that my compiled program isn't dynamic importing any library?
[13:54:40] <fizzie> Because it's not?
[13:54:58] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[13:55:45] <fizzie> Go builds static binaries by default, when you're not using any packages that involve Cgo.
[13:56:25] <ricci> roped: if your question is about packaging, then ask to the disto channel, not here
[13:56:26] <rendar> i see
[13:57:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:00:35] <roped> ricci, I mentioned packaging for context. I know how to package certain non-Go software. My questions are Go related. But since I know pretty much nada about Go, I'd like to read some docs first, I just don't know which ones
[14:00:37] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[14:02:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[14:03:30] *** Quits: _xor (~xor@74.215.232.169) (Quit: bbl)
[14:03:31] <fizzie> IME, distributions tend to approach packaging Go-based software in idiosyncratic ways. For example, requiring you to build using dependencies from their own repositories. There's only so much you can get from learning out how people "usually" do it.
[14:05:38] <fizzie> Anyway, out of the official documentation, https://go.dev/doc/code is probably closest to being about "packaging".
[14:06:38] <fizzie> And of course https://go.dev/ref/mod but that's got absolutely _everything_ in it, so isn't the most approachable page in the world.
[14:08:05] *** Quits: Nex8192_ (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[14:09:25] <roped> fizzie, you're quite close, for example, while Go may fetch source code from the internet during build/install process, the package build scripts in my distro are prohibited to do that, so I must learn at least how to instruct Go to fetch source code tarballs from a local path. Things like these I'm willing to learn
[14:10:38] <ikke> This is not trivial to do
[14:10:59] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[14:11:04] <fizzie> One distribution (I forget which one, someone was here with questions) at least does it by using the "deprecated" (well, sort of) GOPATH-style mode of development.
[14:11:23] <ikke> maybe go workspaces would make this easier
[14:11:45] <fizzie> (The behaviour you still get by setting GO111MODULE=off, but it's unclear for how long.)
[14:12:16] <ikke> also vendored modules
[14:12:44] <roped> I know none of these words you're saying, hence I asked for something very basic to start with :D
[14:12:55] <ricci> roped: look at how it's done for other packages in the same distro
[14:13:00] <fizzie> If your distribution of choice already packages some Go software, it's worth checking if they've come up with a standard process rather than inventing your own though.
[14:13:46] <roped> that's part of my plan as well, but I really want to learn some basic stuff on my own, before I "cheat" by looking into other build scripts
[14:14:26] <b0nn> was it suse?
[14:14:57] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:15:43] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Ping timeout: 260 seconds)
[14:16:16] <fizzie> roped: Thing is, it's a (relatively, anyway) unusual thing to do, so "beginner" documentation doesn't tend to cover it, because it assumes you want to do the normal thing of letting Go's build system figure out where to find dependencies.
[14:17:41] <roped> fizzie, while we're at it, what are the optional ways of getting Go software then? hope for binary packages provided by software developers and hope that they work?
[14:18:20] *** Quits: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk) (Quit: WeeChat 3.5)
[14:18:23] <b0nn> https://en.opensuse.org/openSUSE:Packaging_Go
[14:18:24] <fizzie> Vendoring is described at https://go.dev/ref/mod#vendoring at any rate.
[14:19:06] <roped> also, maybe I'm old fashioned, but I'm not happy about the idea about the Go build system deciding that it shall go online to download stuff while not providing an easy way to tell it to get the stuff from a local path
[14:19:22] <roped> I'm the master of my computer, not Go! :D
[14:19:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[14:19:40] *** Joins: rcernin (~rcernin@101.189.129.123)
[14:20:17] <fizzie> I don't know if people usually provide binary packages of Go programs (outside the context of a distribution). More often than not, they expect you to install Go, and then tell you to `go install ...`, which will fetch the sources and build them.
[14:20:31] <fizzie> Fair enough, but that's still the "default".
[14:20:43] *** Joins: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk)
[14:22:13] <roped> fizzie, since, as I said, I'm pretty much Go illiterate, I admit I may be wrong, but the idea of Go willing to go online to download stuff by default and not caring that I - the human - would prefer it to fetch the data from my hard drive, instinctively makes me want to scream "centralization!" inside
[14:22:41] <roped> and if I get to wear my tinfoil hat, also scream "lock-in! Google conspiracy!" :-)
[14:23:18] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[14:23:25] <fizzie> Well, it's easy to tell it to not fetch from a Google server but the original repositories, at least, if that helps you feel any better.
[14:24:01] <roped> fizzie, no, I meant Google as in Google being involved in this design choice
[14:24:18] <roped> however, I've got three links already, so it's time to read
[14:24:22] <roped> thank you very much
[14:27:32] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:27:52] *** Quits: favadi (~favadi@2001:ee0:4081:6914:1092:3801:21dd:5670) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:28:39] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[14:30:42] <fizzie> FWIW, I don't think it's a particularly unusual default. As a non-proficient user of npm for Node/JS, Cabal for Haskell and RubyGems for Ruby, I certainly couldn't tell you how to make those not go online, even though I'm sure it's possible. And I think that's the same in Cargo for Rust. It's maybe more uncommon to have it so clearly part of the language rather than a separate system, though.
[14:30:45] *** Quits: roped (~shadow@user/roped) (Quit: Leaving)
[14:36:29] <ricci> actually it's not part of the language, it's a convention of the go tools
[14:37:57] *** Joins: MrElendig (~Urist@archlinux/op/MrElendig)
[14:39:19] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:40:41] *** MrElendig is now known as pantsu
[14:43:33] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 268 seconds)
[14:47:15] <xzr> it's quite common to use artifactory or something as a repository proxy for "elevated" security environments, meaning you'd point your package managers to download from the "proxy" and you'll take care of the packages that the proxy has manually
[14:47:53] <xzr> not sure if that fits your use case but it sounds like it addresses your concern
[14:48:38] *** Joins: zacts (~zacts@user/zacts)
[14:56:07] *** Joins: jw4 (~jw4@user/jw4)
[14:58:12] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:58:53] <fizzie> Yeah, I shouldn't have said "language", but anyway the fact that it's part of the same toolchain/distribution as the compiler, rather than an (at least nominally) separate system.
[15:00:49] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 268 seconds)
[15:00:54] *** Joins: treeford (~charleste@user/treeford)
[15:01:43] *** Joins: jw4 (~jw4@user/jw4)
[15:03:36] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[15:04:08] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[15:05:11] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[15:06:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:07:29] <rendar> ricci, running go run multiple times shows a little delay every time, so it's not the cache
[15:07:35] *** Joins: favadi (~favadi@2001:ee0:4081:6914:b4b8:b6ed:140c:b302)
[15:10:14] <rendar> uhm, why in `var y, x = 23, "hello"` x will be "hello" and y will be 23?
[15:11:29] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 248 seconds)
[15:14:27] <xzr> what would you expect them to be :p
[15:14:51] <xzr> y, x = 23, hello
[15:17:23] *** Joins: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de)
[15:20:15] <ricci> rendar: how do you measure the time? on my machine go build && ./exec is a bit slower than go run
[15:20:22] <rendar> uhm, i expected y to be zero value, and x "hello"
[15:21:04] <rendar> sorry nevermind, i misread that
[15:21:39] <rendar> ricci, ok, strange
[15:23:22] *** Joins: kakysha_ (~kakysha@user/kakysha)
[15:25:41] *** Joins: kakysha (~kakysha@user/kakysha)
[15:27:58] *** Quits: greyfoxit (~greyfoxit@217.15.62.33) (Ping timeout: 260 seconds)
[15:28:01] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 248 seconds)
[15:28:34] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 268 seconds)
[15:29:52] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[15:30:30] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:36:09] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[15:37:05] *** Joins: chenqisu12 (~chenqisu1@183.217.202.44)
[15:39:51] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 256 seconds)
[15:41:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:43:09] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:45:06] *** Joins: moog (~moog@98.97.85.106)
[15:45:27] *** Joins: greyfoxit (~greyfoxit@217.15.63.249)
[15:46:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[15:48:56] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[15:49:03] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[15:50:02] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[15:51:34] <A_Dragon> https://goplay.tools/snippet/Lr2f0f7uTNp appears to work fine for me - oh alright
[15:52:02] <A_Dragon> also compiletime is weird, some things are ahed and so on, as for why the exec is a bit slower, maybe memory |
[15:52:06] <A_Dragon> cache stuff
[15:52:35] <ikke> oh nice, goplay.tools
[15:52:44] <A_Dragon> go run is gonna have the binary already at least somewhat loaded into memory and then exec it, whereas go build is gonna write the binary to disk, and so on
[15:53:00] <A_Dragon> ikke: like goplay.space but with monaco (the backend that powers VSCode)
[15:53:01] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[15:53:34] <A_Dragon> you can also set it to run code in wasm on your browser instead
[15:56:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:57:24] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[16:00:01] *** Joins: Midjak (~Midjak@82.66.147.146)
[16:04:49] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 248 seconds)
[16:05:05] *** Joins: noonien (~noonien@user/noonien)
[16:06:36] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[16:07:33] *** Joins: awmv (~awmv@2a02:1210:18ef:bb00:68c3:27ec:a7f5:e305)
[16:08:13] <chilversc> Are there integer based versions of the math functions? such as ilog2?
[16:11:05] <fizzie> Not generally, no. Though for that, "math/bits".LeadingZeros is sorta related.
[16:11:26] <A_Dragon> the math thing really annoys me >.>
[16:11:45] <A_Dragon> I cant tell you the number of times Ive written func Min(a, b int) int
[16:11:46] <chilversc> I was wondering if one of these math/bits functions was effectively equivelent to ilog2
[16:13:02] <fizzie> LeadingZeros is, if you subtract the result from "math/bits".UintSize. And with a different treatment of 0.
[16:13:53] <A_Dragon> I wonder if Min will become func Min[T constraints.Numeric](a, b T) T at some point
[16:14:07] <A_Dragon> that shouldnt have any slowdown issues IIRC
[16:14:58] <chilversc> Looks like bits.Len is what I want, LeadingZeros is just defined as UintSize - Len(x)
[16:15:12] <fizzie> Oh, there's that too, yeah.
[16:15:25] <fizzie> (It didn't have the name I was expecting.)
[16:15:51] <chilversc> yup, that was what was throwing me, as in the kernel code they use the name ilog2 for that function
[16:16:36] *** Quits: greyfoxit (~greyfoxit@217.15.63.249) (Remote host closed the connection)
[16:17:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:18:23] <chilversc> seems like I also have to subtract 1 from len https://go.dev/play/p/TXyi8-utFHe
[16:21:42] <chilversc> except if the value == 0, just to be awkward
[16:21:57] <fizzie> If the value == 0, log2 isn't defined.
[16:22:18] <fizzie> (Mathematically speaking, I mean. I'm sure an ilog2 function might still have a definition for it.)
[16:22:50] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[16:23:29] <chilversc> yeah, the ilog2 function in the kernel just starts at 0 and increments the counter until 1 << i >= v, so for 0 ilog2 will return 0
[16:24:37] <fizzie> I think strictly speaking bits.Len(value | 1) - 1 will work, but it's a little tricky-looking.
[16:25:05] <fizzie> (Setting the least significant bit won't affect the "width" of any other value except 0.)
[16:26:29] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:31:30] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:36:43] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[16:42:44] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:48:44] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 272 seconds)
[16:50:51] *** Joins: Atque (~Atque@user/atque)
[16:52:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:52:14] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[16:55:35] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[16:57:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[16:59:21] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[17:01:03] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[17:01:38] *** Joins: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com)
[17:01:49] *** Quits: favadi (~favadi@2001:ee0:4081:6914:b4b8:b6ed:140c:b302) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:05:49] *** Joins: ricci (~ricci@31.187.110.131)
[17:08:46] *** Joins: andlabs (~andlabs@172.102.12.69)
[17:15:57] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 260 seconds)
[17:22:09] *** Joins: favadi (~favadi@2001:ee0:4081:6914:150a:69:b924:d81d)
[17:26:18] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Quit: Leaving)
[17:29:08] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[17:29:55] *** Joins: Atque (~Atque@user/atque)
[17:32:53] *** Quits: chenqisu12 (~chenqisu1@183.217.202.44) (Ping timeout: 246 seconds)
[17:38:47] *** Joins: llorllale (~llorllale@198.98.119.85)
[17:39:52] *** Joins: whaley (~whaley@58.sub-174-247-4.myvzw.com)
[17:39:52] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 260 seconds)
[17:39:53] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[17:40:47] *** Rhys is now known as Guest4124
[17:40:47] *** Quits: Guest4124 (Rhys@help.lux.melted.me) (Killed (tantalum.libera.chat (Nickname regained by services)))
[17:41:01] *** Joins: Rhvs (Rhys@help.lux.melted.me)
[17:41:38] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[17:42:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:45:08] *** Quits: favadi (~favadi@2001:ee0:4081:6914:150a:69:b924:d81d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:47:30] *** Joins: treeford (~charleste@user/treeford)
[17:59:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:59:39] *** Joins: arkurious (~arkurious@user/arkurious)
[17:59:48] *** Quits: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk) (Quit: WeeChat 3.5)
[18:04:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 248 seconds)
[18:04:57] *** Joins: favadi (~favadi@2001:ee0:4081:6914:6d64:7204:ba68:25cc)
[18:08:51] *** Joins: daesu (~oriain@112.171.3.4)
[18:10:32] <aLeSD[m]> how could I create a valid http.Response for my tests ?
[18:10:56] <aLeSD[m]> I got always a nil exception because of defer response.Body.Close()
[18:14:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:14:40] <aLeSD[m]> or could you suggest me an implementation of io.ReadCloser to use there ?
[18:17:58] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[18:18:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:18:23] *** Quits: andlabs (~andlabs@172.102.12.69) (Ping timeout: 260 seconds)
[18:18:23] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[18:21:14] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 268 seconds)
[18:21:33] *** Joins: andlabs (~andlabs@2605:ef80:8088:9315:398f:63db:ed74:5efa)
[18:23:00] *** Joins: kakysha (~kakysha@user/kakysha)
[18:23:29] <fizzie> aLeSD[m]: io.NopCloser(bytes.NewReader(...)) is a reasonable io.ReadCloser if you just want a hunk of bytes in that form.
[18:23:51] <aLeSD[m]> thanks
[18:24:13] *** Quits: favadi (~favadi@2001:ee0:4081:6914:6d64:7204:ba68:25cc) (Ping timeout: 250 seconds)
[18:24:27] *** Joins: zacts (~zacts@user/zacts)
[18:27:56] *** Quits: andlabs (~andlabs@2605:ef80:8088:9315:398f:63db:ed74:5efa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:28:20] <fizzie> FWIW, io.NopCloser is also what "net/http/httptest".NewRequest wraps the request body into, if it's not a ReadCloser already. But that package doesn't have a similar convenience method for making up responses. (It does have a server for more end-to-end style tests though.)
[18:28:40] *** Quits: whaley (~whaley@58.sub-174-247-4.myvzw.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[18:30:58] *** Quits: cstls (~ruiner@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Quit: out)
[18:34:50] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[18:37:29] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[18:38:04] *** Joins: schaeffer_ (~schaeffer@user/schaeffer)
[18:38:15] *** Quits: schaeffer (~schaeffer@user/schaeffer) (Ping timeout: 260 seconds)
[18:40:17] *** Quits: daesu (~oriain@112.171.3.4) (Quit: Leaving)
[18:47:00] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[18:47:57] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[18:49:03] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[18:49:56] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[18:52:48] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[18:52:56] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[18:55:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:55:14] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[18:55:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[18:56:46] *** Joins: fling (~fling@user/fling)
[19:00:05] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 268 seconds)
[19:00:20] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:03:01] *** Quits: awmv (~awmv@2a02:1210:18ef:bb00:68c3:27ec:a7f5:e305) (Quit: Client closed)
[19:04:14] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[19:04:34] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:08:59] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:7d01:f543:2197:9eec)
[19:11:38] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:11:44] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:12:21] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[19:13:06] *** Joins: v9fk (~quassel@user/v9fk1yn3nu)
[19:22:04] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[19:22:15] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[19:23:51] *** Joins: todo75 (~todo75@user/todo75)
[19:25:45] *** Joins: khyr0n (~khyr0n@2806:2f0:9260:cb2d:5fd:1a5c:dad0:bb92)
[19:29:42] <chilversc> when using channels as signals, is there a way to specify that the channel only supports read and close, to avoid anyone accidently trying to write to the channel?
[19:30:57] *** Joins: treeford (~charleste@user/treeford)
[19:32:45] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 256 seconds)
[19:35:23] *** Joins: fspax (~fspax@46.148.141.211)
[19:36:21] <fizzie> I don't think so. I mean, there's the directional channel types; a `<-chan struct{}` you can only receive from, while a `chan<- struct{}` you can either send to or close, but I don't think there's exactly what you ask.
[19:36:54] <chilversc> yeah, I sort of want the reverse, only read, or close as there's going to be multiple threads that can close the channel so writing isn't safe
[19:37:11] <chilversc> writing would also be an error since its a blocking channel and doesn't expect an actual data
[19:37:39] <fizzie> Well, you could always wrap the channel up in a struct with just the methods that you want it to have.
[19:38:21] <chilversc> yeah, though that then loses the nice simplicity of; type signal chan struct{} ... s := make(signal) :)
[19:39:01] <fizzie> I guess a "problem" is that in order to use it in a select statement, you also need to make a method that returns the underlying channel, meaning it's a leaky abstraction.
[19:39:19] <chilversc> yup
[19:39:22] *** Joins: todo75 (~todo75@user/todo75)
[19:39:40] <chilversc> though the method would just return a <-chan struct{}, the same as Context.Done()
[19:39:52] *** Quits: v9fk (~quassel@user/v9fk1yn3nu) (Quit: Goodbye!)
[19:40:07] <chilversc> not that it helps since all these types are in the same package, so there's no real hiding :)
[19:40:27] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:40:46] <fizzie> TBH I kind of feel like nobody would really go around trying to write a `struct{}{}` into a `chan struct{}` without understanding how it's actually used, since it isn't like it has a "natural" meaning. But maybe that's too optimistic.
[19:41:09] <chilversc> yeah, I'm also going to say the type name "signal" is a give away
[19:42:58] <chilversc> though I do wish go chose a different way to indicate public/private, I do hate that my code is a wierd mix of cases
[19:46:26] *** Quits: ramblebamble (~ramblebam@82.119.187.226) (Quit: WeeChat 3.5)
[19:48:48] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 260 seconds)
[19:49:30] *** Joins: sabry (~sabry@197.37.228.236)
[19:50:33] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 260 seconds)
[19:50:33] *** Joins: todo75 (~todo75@user/todo75)
[19:59:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[20:00:02] *** Joins: hackers (~self@user/hackers)
[20:00:13] *** Joins: The_Loko (~The_Loko@79.116.41.227)
[20:00:54] *** Joins: fling (~fling@user/fling)
[20:01:52] *** hackers is now known as remote
[20:09:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:11:24] *** Quits: matoro (~matoro@matoro.tk) (Changing host)
[20:11:24] *** Joins: matoro (~matoro@user/matoro)
[20:11:53] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[20:13:13] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a12:e9dd:8499:105b:c2)
[20:14:01] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[20:16:33] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:7d01:f543:2197:9eec) (Ping timeout: 248 seconds)
[20:17:06] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[20:17:09] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[20:19:39] *** Quits: sevenever (~seven@user/sevenever) (Ping timeout: 265 seconds)
[20:20:35] *** Joins: sevenever (~seven@user/sevenever)
[20:23:26] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 272 seconds)
[20:23:54] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:25:51] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:25:56] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[20:26:43] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 260 seconds)
[20:27:27] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[20:27:42] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[20:28:05] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[20:29:27] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[20:32:38] *** Quits: todo75 (~todo75@user/todo75) (Remote host closed the connection)
[20:33:22] *** Joins: todo75 (~todo75@user/todo75)
[20:34:13] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:34:57] *** Joins: treeford (~charleste@user/treeford)
[20:39:14] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[20:40:20] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:42:22] *** Joins: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net)
[20:43:24] *** Joins: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca)
[20:50:02] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[20:50:44] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[20:50:51] *** Joins: independent56 (~independe@2.25.26.98)
[20:53:17] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[20:54:58] *** Joins: sabry (~sabry@197.37.228.236)
[20:59:01] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:00:38] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a12:e9dd:8499:105b:c2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:00:39] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:00:58] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:e9dd:8499:105b:c2)
[21:02:07] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:80b4:37b:3fb6:164f:722e)
[21:02:47] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:03:04] *** Joins: fling (~fling@user/fling)
[21:04:39] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 268 seconds)
[21:08:29] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[21:09:18] *** Quits: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a) (Ping timeout: 260 seconds)
[21:11:50] *** Joins: treeford (~charleste@user/treeford)
[21:15:14] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[21:15:42] *** Quits: sabry (~sabry@197.37.228.236) (Quit: Client closed)
[21:16:48] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[21:16:48] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[21:16:48] *** Joins: nortoh (~nortoh@user/nortoh)
[21:29:21] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Quit: !be back soon)
[21:30:14] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[21:36:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[21:41:23] *** Quits: borrougagnou (~borrougag@91.134.153.132) (Remote host closed the connection)
[21:48:15] *** Joins: adamtajti (~adamtajti@catv-176-63-164-65.catv.fixed.vodafone.hu)
[21:48:33] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1)
[21:53:25] *** Quits: mvaldron (~mvaldron@dhcp-108-168-21-47.cable.user.start.ca) (Quit: Konversation terminated!)
[22:01:47] *** Quits: anessen9765 (~Anessen97@host-87-9-169-73.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[22:17:30] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[22:17:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:26:50] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[22:26:59] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:e9dd:8499:105b:c2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:27:00] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:27:21] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:e9dd:8499:105b:c2)
[22:29:32] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[22:32:00] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[22:32:23] *** Joins: jw4_ (~jw4@user/jw4)
[22:33:15] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[22:33:45] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[22:34:05] *** Quits: adamtajti (~adamtajti@catv-176-63-164-65.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[22:35:25] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:42:09] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 248 seconds)
[22:43:18] *** Joins: treeford (~charleste@user/treeford)
[22:43:37] *** Joins: todo75 (~todo75@user/todo75)
[22:44:43] *** Joins: adamtajti (~adamtajti@catv-176-63-164-65.catv.fixed.vodafone.hu)
[22:47:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:50:13] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[22:59:16] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:21:05] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 248 seconds)
[23:23:39] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Quit: ZNC 1.8.2 - https://znc.in)
[23:24:53] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:25:19] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[23:28:29] *** Quits: Moebius (~Moebius@89.28.122.14) (Quit: What doesn't kill us makes us stranger...)
[23:29:55] *** Quits: jw4_ (~jw4@user/jw4) (Quit: leaving)
[23:30:48] *** Joins: nimprodel (~nimprodel@94.131.133.177)
[23:31:46] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:33:11] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:34:22] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:35:08] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:35:14] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Remote host closed the connection)
[23:36:58] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[23:37:57] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[23:38:12] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[23:38:12] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[23:38:12] *** Joins: tane (~tane@user/tane)
[23:39:08] *** Quits: nimprodel (~nimprodel@94.131.133.177) (Ping timeout: 272 seconds)
[23:43:10] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[23:52:23] *** Joins: resamvi (~resamvi@smtp.jacob-computer.de)
[23:52:23] *** Quits: resamvi (~resamvi@smtp.jacob-computer.de) (Changing host)
[23:52:23] *** Joins: resamvi (~resamvi@user/resamvi)
[23:52:34] <sweb> how can i define : var ...interface{} and inject interfaces into it ?
[23:53:07] <rendar> i can't get why i can assign with bot var and :=, what is the purpose of := if i can use var? brevity?
[23:57:52] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:58:39] *** Joins: zacts (~zacts@user/zacts)
[23:58:50] *** Joins: neurocyte86144 (~neurocyte@IP-045010063124.dynamic.medianet-world.de)
[23:58:50] *** Quits: neurocyte86144 (~neurocyte@IP-045010063124.dynamic.medianet-world.de) (Changing host)
[23:58:50] *** Joins: neurocyte86144 (~neurocyte@user/neurocyte)
[23:58:59] *** Joins: independent_ (~independe@2.25.26.98)
