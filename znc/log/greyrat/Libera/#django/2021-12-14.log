[00:04:53] *** Quits: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br) (Remote host closed the connection)
[00:11:04] *** Joins: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br)
[00:32:37] *** Quits: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br) (Ping timeout: 268 seconds)
[00:57:56] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[01:23:47] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 252 seconds)
[01:24:55] *** Joins: lucascastro (~lucascast@192-140-51-187.static.oncabo.net.br)
[01:26:39] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[01:29:33] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Remote host closed the connection)
[01:29:51] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[01:41:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[01:43:39] *** Joins: fikran (~fikran@user/fikran)
[01:47:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 268 seconds)
[01:52:15] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:52:34] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 260 seconds)
[01:54:51] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[01:55:29] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[01:57:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[02:08:29] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:17:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:15] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[02:34:36] *** Joins: Atque (~Atque@user/atque)
[02:43:50] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[02:49:10] *** Joins: orzel (~orzel@2a01:e0a:df:6ba0:2ef0:5dff:fed8:622d)
[02:50:16] <orzel> Hi. Django settings allow you to add your own settings. Is there a way to check if a given setting is set ? something like "'AAA' in settings" or settings.exists('AA') ?
[02:50:39] <orzel> settings is actually a django.conf.LazySettings, and from the interactive shell i can't find anything obvious
[02:51:58] <orzel> (nor in the documentation)
[02:56:00] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[02:59:51] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:01:13] *** Quits: kostkon_ (~androirc@ppp-94-66-131-50.home.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[03:10:40] <moldy> orzel: it depends on what exactly you mean by "set"
[03:11:21] <moldy> orzel: `from django.conf import settings; settings.FOO # is set to a truthy value?; hasattr(settings, "FOO"); # is it set at all?`
[03:14:33] <orzel> moldy: ah, hasattr works on LazySettings. That's what I was looking for. perfect. Thanks a lot !
[03:18:29] *** Quits: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 268 seconds)
[03:30:06] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 260 seconds)
[03:38:29] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[03:50:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:53:00] *** Joins: fikran (~fikran@user/fikran)
[03:53:00] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[03:53:17] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:14:08] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:22:52] *** Joins: yanchai (~yanchai@222.127.97.162)
[04:24:25] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[04:24:27] *** Joins: theprophet (~theprophe@85.114.228.184)
[04:30:35] *** Joins: cliluw (~cliluw@47.147.73.223)
[04:35:58] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:37:27] *** Quits: iomari891 (~iomari891@102.91.5.185) (Ping timeout: 250 seconds)
[04:58:47] <FunkyBob> orzel: getattr / hasattr
[05:20:08] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:22:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:26:14] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:27:26] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[05:39:11] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[05:43:07] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[05:48:28] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:48:28] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[05:52:26] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:52:26] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[05:52:56] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[05:53:02] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[05:53:26] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:56:12] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[05:56:30] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[05:56:32] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Client Quit)
[06:00:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[06:02:20] *** Joins: fikran (~fikran@user/fikran)
[06:18:30] *** Joins: djapo (~archangel@user/djapo)
[06:19:16] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[06:20:35] *** Joins: djapo (~archangel@user/djapo)
[06:24:51] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[06:42:51] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:46:00] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[06:49:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[06:49:51] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[06:50:07] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[07:13:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:27:05] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:29:02] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[07:52:20] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[07:53:03] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:53:34] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:56:06] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[07:59:32] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[07:59:47] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[08:03:49] <yanchai> hi guys
[08:04:13] <yanchai> is there a way in returning the pk of a foreignkey isntead of string?
[08:04:41] <yanchai> def __str__(self, obj): return self.foreignkey.pk
[08:04:43] <yanchai> ?
[08:09:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:10:26] <pembo13> yanchai, well __str__ should always return a string, but you want `self.foreignfield_id`
[08:10:39] <pembo13> foreignfield being the actual field name
[08:11:00] <pembo13> also, i don't think __str__ takes an `obj` parameter
[08:11:22] <pembo13> yanchai, might be useful to explain the problem you're trying to solve
[08:11:40] *** Joins: fikran (~fikran@user/fikran)
[08:13:20] <yanchai> yah sorry it __str__(self): was the correct one i mistyped it
[08:13:47] <yanchai> pembo13: yeah thanks
[08:14:02] <pembo13> you're welcome
[08:14:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[08:14:43] <yanchai> whats the function name for pk instead of __str__?
[08:15:09] <pembo13> i don't believe there is such a built-in function
[08:15:43] <yanchai> so if i am to return pk instead of __str__ should i use a custom function name instead?
[08:16:09] <pembo13> yanchai, sure... curious as to why you need a function for that
[08:16:53] <yanchai> pembo13: i wanted to show the pk instead of object each time i create
[08:18:07] <pembo13> yanchai, `def __str__(self): return '{}'.format(self.id)`
[08:18:32] <yanchai> lets say i have a model which has a foreignkey user and ok thanks
[08:18:53] <pembo13> yanchai, it's entirely to you what you return in that string
[08:19:19] <pembo13> the pk, an fk, a formatted combo, just needs to be a string
[08:19:53] *** Joins: djapo (~archangel@user/djapo)
[08:22:07] *** Quits: sreve (~quassel@p4ff449b5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:22:46] *** Joins: sreve (~quassel@p4ff446c2.dip0.t-ipconnect.de)
[08:37:40] <yanchai> pembo13: what if i want to return an int instead of str?
[08:38:59] <yanchai> ok got it! thanks mate hahaha
[08:44:02] <pembo13> yanchai, returning an int instead of a str would kind of defeat the purpose of __str__
[08:44:20] <pembo13> but, it's your code... feel free to attempt
[08:46:48] <yanchai> pembo13: if __str__ for string whats for int
[08:46:49] <yanchai> ?
[08:47:26] <yanchai> if i dont put any function in my model it returns 'object 1 created' so i want the id to display instead of objects
[08:48:12] <pembo13> yanchai, looks like __int__ exists
[08:48:27] <pembo13> yanchai, https://www.tutorialsteacher.com/python/magic-methods-in-python
[08:48:42] <pembo13> yanchai, you can display the ID without returning an int
[08:49:08] <yanchai> oh ok thanks mate
[08:49:32] <pembo13> `10` is an int `"10"` is a string
[08:49:43] <pembo13> you're welcome
[08:50:44] <yanchai> __int__ doesnt work mate it returns Model object(1) was added successfully
[08:51:15] <pembo13> yanchai, __int__ is the int equivalent to __str__
[08:51:35] <pembo13> yanchai, i was just answering your question about what's for int
[08:51:45] <pembo13> in this specific context, we only care about __str__
[08:52:00] <pembo13> so you'll want to return a numeric string
[08:52:14] <yanchai> ok
[08:52:22] <yanchai> understood thanks mate
[08:55:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:58:39] <pembo13> you're welcome yanchai
[09:18:33] *** Joins: audiocat (~audio@user/audio)
[09:27:03] *** Quits: lucascastro (~lucascast@192-140-51-187.static.oncabo.net.br) (Ping timeout: 252 seconds)
[09:38:52] *** Joins: mattil (~mattil@83.145.199.6)
[09:41:21] *** Quits: mattil (~mattil@83.145.199.6) (Read error: Connection reset by peer)
[09:41:33] *** Joins: mattil (~mattil@83.145.199.6)
[09:49:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:00:15] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[10:06:14] *** Joins: djapo (~archangel@user/djapo)
[10:13:14] *** Quits: mattil (~mattil@83.145.199.6) (Read error: Connection reset by peer)
[10:17:29] *** Quits: pembo13 (~pembo13@47.196.95.206) (Quit: Leaving)
[10:19:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[10:21:00] *** Joins: fikran (~fikran@user/fikran)
[10:42:05] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[10:43:01] *** Quits: explore (uid233125@id-233125.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:45:27] *** Joins: luigibu (~luigi@80.30.201.209)
[10:47:43] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 252 seconds)
[11:15:22] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 260 seconds)
[11:16:09] *** Joins: mattil (~mattil@83.145.199.6)
[11:16:34] *** Quits: mattil (~mattil@83.145.199.6) (Remote host closed the connection)
[11:17:47] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[11:20:43] *** Joins: mattil (~mattil@83.145.199.6)
[11:21:21] *** Joins: slav0nic (slav0nic@python.su)
[11:21:34] *** Quits: mattil (~mattil@83.145.199.6) (Remote host closed the connection)
[11:29:10] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:245f:fa81:fe66:b6df)
[11:29:53] *** Quits: audiocat (~audio@user/audio) (Ping timeout: 252 seconds)
[11:49:40] *** Joins: ubernost1um (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[11:52:15] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 252 seconds)
[11:54:18] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[11:56:11] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[11:56:54] *** Joins: SteveR (~SteveR@192.146.154.3)
[12:00:21] *** Joins: djapo (~archangel@user/djapo)
[12:09:23] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[12:23:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:23:12] *** ChanServ sets mode: +v EvilDMP
[12:26:41] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:27:14] *** Joins: rusrushal13 (~rusrushal@2401:4900:4474:dafc:300c:6dfd:44bd:f59)
[12:28:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[12:28:34] *** Parts: yanchai (~yanchai@222.127.97.162) ()
[12:30:20] *** Joins: fikran (~fikran@user/fikran)
[12:33:01] *** Quits: goutly (~gitly@185.69.144.142) (Ping timeout: 250 seconds)
[12:35:03] *** Joins: goutly (~gitly@148.252.133.169)
[12:41:44] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:42:02] *** Quits: goutly (~gitly@148.252.133.169) (Ping timeout: 240 seconds)
[12:44:27] *** Joins: goutly (~gitly@148.252.133.169)
[12:45:50] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Remote host closed the connection)
[12:46:14] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[12:46:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[12:49:40] *** Quits: djapo (~archangel@user/djapo) (Read error: Connection reset by peer)
[12:53:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:53:00] *** ChanServ sets mode: +v EvilDMP
[13:02:53] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:04:53] *** Joins: luigibu (~luigi@80.30.201.209)
[13:08:35] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[13:08:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[13:09:17] *** Joins: rwb (~augh@theguntretort.com)
[13:09:25] *** Joins: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net)
[13:09:56] *** Joins: MaioroiaM (kg289@django/moderator/doismellburning)
[13:09:56] *** ChanServ sets mode: +v MaioroiaM
[13:10:20] *** Joins: doc|home (~doc@user/doc)
[13:10:45] *** Server sets mode: +cnrt 
[13:11:07] *** Joins: jjhoo_ (~jahakala@user/jjhoo)
[13:12:41] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:14:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:14:52] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[13:14:52] *** Joins: luigibu (~luigi@80.30.201.209)
[13:16:13] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:16:44] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[13:16:44] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (*.net *.split)
[13:16:44] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (*.net *.split)
[13:16:44] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (*.net *.split)
[13:16:44] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (*.net *.split)
[13:16:44] *** Quits: tubogram (~tubogram@user/tubogram) (*.net *.split)
[13:16:44] *** Quits: darkstardevx (~darkstard@50.39.115.145) (*.net *.split)
[13:16:44] *** Quits: jgee (~jgee@186.80.49.20) (*.net *.split)
[13:16:44] *** Quits: pidroid (~pidroid@user/pidroid) (*.net *.split)
[13:16:44] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[13:16:44] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[13:16:44] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[13:16:45] *** Quits: doc (~doc@user/doc) (*.net *.split)
[13:16:45] *** Quits: DLange (~DLange@about/linux/staff/DLange) (*.net *.split)
[13:16:45] *** Quits: dang`r`us (~eismann@pg.afoo.at) (*.net *.split)
[13:16:45] *** Quits: dodo (~dodo@user/dodo) (*.net *.split)
[13:16:45] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[13:16:45] *** Quits: mfisher (mfisher@shell.themfishers.com) (*.net *.split)
[13:16:45] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[13:16:45] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[13:16:45] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[13:16:45] *** Quits: SpecialK (~toor@django/moderator/doismellburning) (*.net *.split)
[13:16:45] *** Quits: tetrahedron (~derelict@user/derelict) (*.net *.split)
[13:16:46] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[13:16:46] *** tubogram4 is now known as tubogram
[13:16:46] *** slavfox_ is now known as slavfox
[13:16:46] *** jgee1 is now known as jgee
[13:19:24] *** Joins: frankp (~pbayle@80.0.65.55)
[13:21:51] *** Joins: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net)
[13:21:51] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[13:21:51] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[13:21:51] *** Joins: ST47 (~ST47@wikimedia/st47)
[13:21:51] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[13:21:51] *** Joins: dang`r`us (~eismann@pg.afoo.at)
[13:22:43] *** Joins: djapo (~archangel@user/djapo)
[13:23:20] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[13:27:25] *** dodo__ is now known as dodo
[13:45:24] *** Quits: djapo (~archangel@user/djapo) (Remote host closed the connection)
[13:46:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[13:46:20] *** ChanServ sets mode: +v EvilDMP
[13:46:32] *** Joins: djapo (~archangel@user/djapo)
[13:58:01] *** jjhoo_ is now known as jjhoo
[14:27:23] *** Quits: rusrushal13 (~rusrushal@2401:4900:4474:dafc:300c:6dfd:44bd:f59) (Ping timeout: 256 seconds)
[14:27:31] *** Joins: schinckel (uid38120@id-38120.ilkley.irccloud.com)
[14:32:04] *** Joins: beuys (~beuys@user/beuys)
[14:33:38] *** Joins: Atque (~Atque@user/atque)
[14:37:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[14:39:40] *** Joins: fikran (~fikran@user/fikran)
[14:48:29] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[14:49:42] <pycode1> hello! can i instead data doing something similar to INSERT INTO MyTable SELECT (....) ? so run the job in postgresql instead of returning the records and create transactions
[14:50:04] *** Joins: luigibu (~luigi@80.30.201.209)
[14:52:53] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[14:54:32] *** Joins: rusrushal13 (~rusrushal@2401:4900:4474:dafc:300c:6dfd:44bd:f59)
[14:57:39] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:57:51] *** Joins: lucascastro (~lucascast@192-140-51-187.static.oncabo.net.br)
[15:00:39] *** Joins: pidroid (~pidroid@user/pidroid)
[15:04:44] <Atque> pycode1: Threads?
[15:06:38] *** Joins: xkuru (~xkuru@user/xkuru)
[15:09:13] <FunkyBob> pycode1: you want to copy data within the DB?
[15:09:59] <beuys> FunkyBob: I think he is asking how to send queries to the DB.
[15:10:31] <beuys> Without going through an ORM abstraction.
[15:10:39] <Rikem> raw
[15:10:49] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[15:11:06] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[15:11:28] <Rikem> oh, or avoid the ORM altogether - https://docs.djangoproject.com/en/4.0/topics/db/sql/#executing-custom-sql-directly
[15:11:45] <beuys> Rikem: What would be a full line of Python that sends - say - "SELECT * FROM mytable" to the DB?
[15:11:51] <FunkyBob> yeah, well
[15:11:55] <FunkyBob> none of us knows for sure
[15:12:06] <FunkyBob> however they specifically showed an INSERT INTO .. SELECT
[15:12:13] <FunkyBob> and said "run the job in postgresql"
[15:12:29] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:245f:fa81:fe66:b6df) (Ping timeout: 265 seconds)
[15:12:31] <FunkyBob> I think they're trying to copy within without having to pull data back to python land first
[15:12:37] <FunkyBob> now we won't know
[15:13:55] <beuys> Looks like this is it: from django.db import connection; connection.cursor().execute("SELECT * FROM mytable"); data=connection.cursor().fetchAll();
[15:14:26] *** Joins: thiras (~thiras@user/thiras)
[15:14:54] <Rikem> yeah something like that I think
[15:15:20] <beuys> Oh, maybe not.
[15:15:32] <beuys> I have the feeling connection.cursor() returns a new connection every time.
[15:15:35] <beuys> So you have to cache it:
[15:15:56] <beuys> Looks like this is it: from django.db import connection; c=connection.cursor(); c.execute("SELECT * FROM mytable"); data=c.fetchAll();
[15:16:20] <Rikem> https://dpaste.org/H7FB
[15:17:07] <beuys> Rikem: Yes, thats another way. Is there a benefit of "with connection.cursor() as c" over "c=connection.cursor()"?
[15:18:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[15:19:41] <Rikem> I think it handles exceptions
[15:23:04] <FunkyBob> it closes the cursor for you when it exits the with block
[15:24:49] <beuys> FunkyBob: Otherwise the cursor variable will stay around until garbage collection deletes it?
[15:26:43] <FunkyBob> something like that
[15:28:16] <beuys> Ok
[15:28:18] *** Quits: beuys (~beuys@user/beuys) (Quit: leaving)
[15:36:00] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-55fc-484e-a347-decf.res6.spectrum.com)
[15:41:23] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-55fc-484e-a347-decf.res6.spectrum.com) (Quit: Client closed)
[15:50:21] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:54:20] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:6676:4b8d:285c:1812)
[16:04:51] *** Quits: rusrushal13 (~rusrushal@2401:4900:4474:dafc:300c:6dfd:44bd:f59) (Ping timeout: 256 seconds)
[16:05:15] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:05:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:12:20] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:15:20] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:6676:4b8d:285c:1812) (Ping timeout: 252 seconds)
[16:16:56] *** Joins: luigibu (~luigi@80.30.201.209)
[16:24:16] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:26:05] *** Joins: luigibu (~luigi@80.30.201.209)
[16:27:04] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[16:31:04] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:31:33] <timdiels> Hi, I've integrated django with a bokeh server by calling django.setup() in the main bokeh thread, there's a separate thread I use for DB access. At the start reverse() will give me the right prefix from FORCE_SCRIPT_NAME, but somewhere along the way it seems to forget about it and reverse() no longer adds a prefix. I wouldn't expect bokeh to mess with django setup/settings, it doesn't really have a
[16:31:39] <timdiels> dependency on it.
[16:32:27] <timdiels> At the start being when the bokeh app session is created and later being when I render a template
[16:33:48] <timdiels> Calling django setup() again before rendering the template does result in correct urls
[16:35:59] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:37:07] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[16:37:21] *** Joins: dkliban_ (~dkliban@99-3-68-61.lightspeed.rlghnc.sbcglobal.net)
[16:39:10] *** Joins: luigibu (~luigi@80.30.201.209)
[16:47:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:49:00] *** Joins: fikran (~fikran@user/fikran)
[16:49:08] <timdiels> It boils down to this, I'll probably have to ask bokeh about this one https://dpaste.org/J6Np
[16:57:17] <nbjoerg> mew cursor shouldn't createa a new connection
[16:57:57] <apollo13> nbjoerg: it only does when there is none yet
[16:58:06] <nbjoerg> right
[16:58:07] <apollo13> connections are thread local
[16:58:32] <nbjoerg> of course, if there is no connection, one has to be established first
[16:58:34] <apollo13> timdiels: add_next_tick_callback runs in another thread?
[16:58:53] <apollo13> timdiels: script prefix is thread local in django (because it can be changed and whatnot)
[16:59:57] <apollo13> timdiels: look at the source code of django.setup() and all will become clear :)
[17:02:01] *** Joins: dez (uid92154@user/dez)
[17:02:44] *** Joins: theprophet (~theprophe@85.114.228.184)
[17:02:56] <timdiels> apollo13: add_next_tick_callback uses asyncio, it's all on the same thread; I even logged the thread id for my sanity but somehow each time it forgets about the prefix despite being on the same thread
[17:03:12] <apollo13> timdiels: as far as django is concerned it is not the same thread
[17:03:26] <apollo13> django's "thread locals" are asyncio aware
[17:04:40] <apollo13> namely we use https://github.com/django/asgiref/blob/main/asgiref/local.py
[17:12:57] *** Joins: pycode1 (~pycode3@2001:b07:5d28:551:a38a:f44a:285:6416)
[17:22:59] <timdiels> apollo13: So it's local to the asyncio Task. Indeed, there is a task and id(task) differs
[17:23:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:23:43] <timdiels> apollo13: Am I allowed to call setup() again or should I use set_script_prefix directly?
[17:23:49] <apollo13> I'd do the later
[17:23:57] <apollo13> .setup() per se is process wide
[17:25:36] <timdiels> apollo13: ok, thanks!
[17:42:44] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:50:51] *** Joins: mfisher (mfisher@shell.themfishers.com)
[17:51:45] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:54:13] *** Quits: theprophet (~theprophe@85.114.228.184) (Ping timeout: 256 seconds)
[18:03:12] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[18:26:30] *** Joins: theprophet (~theprophe@85.114.228.184)
[18:34:36] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[18:35:21] <pycode1> Hello
[18:35:39] <pycode1> i need to create a command that import some data, the data is coming from different parts
[18:35:46] <pycode1> api, csv etc
[18:36:13] <pycode1> is better to create one command for type or add some parameter like --csv=file  or  --api=name
[18:36:15] <pycode1> ?
[18:37:10] *** Joins: luigibu (~luigi@80.30.201.209)
[18:41:19] <frankp> pycode1: is the incoming data similar regardless of the import method?
[18:41:45] <frankp> you might find tere's a lot of code shared for handling the different cases
[18:42:08] <frankp> that would be an argument for passing a parameter
[18:45:12] <pycode1> frankp, i need to import prices, so those prices could come from a csv
[18:45:20] <pycode1> or from an api service
[18:45:45] <pycode1> so for each i need to get the data manipulate it a little bit and the save it to db
[18:47:00] <frankp> in general i'd look at separating the interface specifics and pre-processing from any common data handling you do once you have it imported
[18:47:36] <frankp> on the Dont Repeat Yourself principle
[18:49:12] <pycode1> for the csv import it is very easy i just need to load the file and start inserting data with transactions, so it is very easy...for the API yes the endopoints from different services could work differently so i need to deal with their system and then get data
[18:53:57] <frankp> being called away. gtg
[18:56:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:58:19] *** Joins: fikran (~fikran@user/fikran)
[19:23:59] *** Quits: pipapipapibo (~w@c-73-221-241-101.hsd1.wa.comcast.net) (Remote host closed the connection)
[19:27:53] *** Quits: timdiels (~user@78-22-205-207.access.telenet.be) (Quit: leaving)
[19:28:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:29:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:29:09] *** ChanServ sets mode: +v EvilDMP
[19:31:38] *** Joins: iomari891 (~iomari891@197.210.52.156)
[19:37:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[19:38:57] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[19:39:40] *** Joins: fikran (~fikran@user/fikran)
[19:40:32] *** Joins: mad_moses (~mad_moses@2a02:6d40:2348:4601:648f:8c9c:8349:628)
[19:40:36] <mad_moses> Hi
[19:40:37] *** Joins: luigibu (~luigi@80.30.201.209)
[19:41:42] <mad_moses> I wrote a rest endpoint to change the password of a user. If the olduser passwort is wrong, the server returns HTTP_428_PRECONDITION_REQUIRED right now. Which will stop the client working because it is a 4xx error.
[19:42:12] <mad_moses> Now I am wondering if this is badly implemented in the client or the wrong error code on server side. Should I return a 4xx error in this case or 2xx?
[19:45:09] *** Quits: luigibu (~luigi@80.30.201.209) (Client Quit)
[19:46:46] *** Joins: luigibu (~luigi@80.30.201.209)
[19:47:32] *** Quits: lucascastro (~lucascast@192-140-51-187.static.oncabo.net.br) (Ping timeout: 240 seconds)
[19:51:47] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:07:16] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:08:52] *** Joins: luigibu (~luigi@80.30.201.209)
[20:11:00] *** Joins: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br)
[20:15:09] *** Joins: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208)
[20:15:41] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 252 seconds)
[20:15:57] *** Joins: cliluw (~cliluw@47.147.73.223)
[20:16:15] *** Quits: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208) (Client Quit)
[20:16:27] *** Joins: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208)
[20:16:32] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 240 seconds)
[20:16:48] *** Quits: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208) (Remote host closed the connection)
[20:17:00] *** Joins: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208)
[20:21:35] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[20:30:37] *** Quits: rusrushal13 (~rusrushal@2401:4900:4479:edc:d530:eb7f:ee29:208) (Ping timeout: 256 seconds)
[20:30:51] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:33:32] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Read error: Connection reset by peer)
[20:53:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:56:19] *** Joins: xkuru (~xkuru@user/xkuru)
[21:02:57] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[21:02:57] <beastDivision> if you don't control the client consuming the codes you send it, you have to work within the context of the client. in either case there a million http codes that exist and are likely the "proper" ones to use, but still no one uses them. a lot of clients expect something like permision denied error in this case
[21:05:15] <ktosiek[m]> I tend to only use 400 for all expected errors (like form validation), plus 200/201 for success.
[21:12:29] *** Joins: theprophet (~theprophe@85.114.228.184)
[21:13:40] <moldy> mad_moses: if this is an API client (not a traditional browser), 4xx seems appropriate
[21:14:10] <moldy> if the password is wrong, 403 or 400 seems good
[21:14:36] <moldy> 428 is an odd choice
[21:16:54] *** Joins: djapo (~archangel@user/djapo)
[21:20:26] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[21:21:28] <amanjhalmat12> Hello all,
[21:21:51] <amanjhalmat12> I'm just start learning Django last two weeks
[21:22:12] <amanjhalmat12> I finished official doc tutorial
[21:22:35] <amanjhalmat12> now I wanna create new project with multiple models
[21:22:47] <amanjhalmat12> and relations between them
[21:23:03] <amanjhalmat12> there is any good tutorial
[21:23:20] <amanjhalmat12> ?
[21:23:56] <dodo> amanjhalmat12: i just went on with the official docs after the tutorial
[21:24:37] <amanjhalmat12> oh
[21:25:03] <dodo> for relationships between models see foreignkey, manytomany etc
[21:25:40] <dodo> amanjhalmat12: the djangogirls tutorial is supposedly good, not sure though if it covers more advanced topics than the official
[21:26:02] <amanjhalmat12> lol
[21:26:17] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Quit: beastDivision)
[21:26:21] <amanjhalmat12> great thats good idea i did same for ruby on rails
[21:26:31] *** Joins: bambanxx (~bambanx@2800:150:106:1061:6159:c74b:9d0c:4022)
[21:26:44] <amanjhalmat12> i will try with docs again thank you so much]
[21:26:52] <amanjhalmat12> :)
[21:26:52] <mad_moses> moldy: thank you for your input.
[21:27:02] <dodo> amanjhalmat12: i hope it works for you too :)
[21:27:13] <dodo> amanjhalmat12: you can also just ask in here when you're stuck
[21:27:56] *** Joins: beastDivision (~beastDivi@user/beastdivision)
[21:27:59] <amanjhalmat12> yeah I will thank you so much for that I really appreciate :)
[21:28:36] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:30:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:07] *** Quits: frankp (~pbayle@80.0.65.55) (Quit: Leaving)
[21:32:10] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:32:10] *** ChanServ sets mode: +v EvilDMP
[21:33:43] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[21:35:16] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Quit: Leaving)
[21:35:46] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[21:35:57] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[21:37:26] *** Joins: djapo (~archangel@user/djapo)
[21:38:19] *** Quits: bambanxx (~bambanx@2800:150:106:1061:6159:c74b:9d0c:4022) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:40:48] *** Joins: bambanxx (~bambanx@2800:150:106:1061:6159:c74b:9d0c:4022)
[21:47:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:47:13] *** Joins: Camilo (~hugh@host-92-1-126-125.as13285.net)
[21:48:00] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[21:48:21] <Camilo> Having a hard time posting a foreign key to the rest framework with a serializer using depth=1.
[21:48:59] *** Joins: fikran (~fikran@user/fikran)
[21:49:37] <Camilo> I have buildings, and the buildings have customers. But when I try to create a new buiding and pass the id of an existing customer it complains that I didn't give a customers name
[21:50:13] <Camilo> since I don't want to create a new customer, it shouldn't care that there is no customer name. I don't understand why this error happens
[21:51:02] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:56:59] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[22:00:15] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[22:08:29] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:08:56] *** Joins: pepper (~pepper@user/pepper)
[22:09:18] *** Joins: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net)
[22:17:18] *** Joins: Guest4 (~Guest4@71.169.151.98)
[22:20:37] <pycode1> is bulk_create using a transaction?
[22:21:12] <Camilo> any reason why "id" wouldnt pass validation in a serializer?
[22:21:47] <pycode1> no it is using the transaction
[22:26:38] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[22:34:03] *** Quits: pycode1 (~pycode3@2001:b07:5d28:551:a38a:f44a:285:6416) (Ping timeout: 250 seconds)
[22:39:21] *** Joins: slav0nic (slav0nic@python.su)
[22:43:07] *** Quits: Guest4 (~Guest4@71.169.151.98) (Quit: Client closed)
[22:53:04] *** Joins: djapo (~archangel@user/djapo)
[22:59:59] *** Quits: amanjhalmat12 (~amanjhalm@212.237.123.164) (Quit: Client closed)
[23:00:17] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[23:19:49] *** Joins: jmd (~user@de.cellform.com)
[23:26:59] *** Quits: gopar (~gopar@c-67-164-79-22.hsd1.ca.comcast.net) ()
[23:28:59] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[23:40:52] *** Quits: bambanxx (~bambanx@2800:150:106:1061:6159:c74b:9d0c:4022) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:40:55] *** Joins: aleksandr (~aleksandr@ip-de42.d-net.kiev.ua)
[23:41:12] *** Quits: aleksandr (~aleksandr@ip-de42.d-net.kiev.ua) (Client Quit)
[23:44:43] *** Joins: amanjhalmat12 (~amanjhalm@212.237.123.164)
[23:46:01] *** Joins: bambanxx (~bambanx@2800:150:106:1061:6159:c74b:9d0c:4022)
[23:49:58] *** Joins: zaphod_b (~zaphod_b@78.196.147.27)
[23:50:33] <zaphod_b> hiya folks
[23:50:35] <zaphod_b> just wanted to share a little mishap I have with django on fedora
[23:51:02] <zaphod_b> I run django with nginx and uwsgi - as per the doc here https://www.guguweb.com/2019/11/13/django-nginx-deploy-your-django-project-on-a-production-server/
[23:51:50] <zaphod_b> turns out that the uwsgi-plugin-python3 rpm is no longer maintained by fedora, and it has been withdrawn from fedora35 altogether
[23:52:33] <zaphod_b> so bottom line is, it looks like I'm going to have to either build that plugin myself, or find a replacement
[23:55:50] *** Joins: Atque (~Atque@user/atque)
[23:56:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[23:58:11] <zaphod_b> https://bugzilla.redhat.com/show_bug.cgi?id=1935875
[23:58:11] *** Quits: lucascastro (~lucascast@45-167-143-6.netfacil.inf.br) (Read error: Connection reset by peer)
[23:58:11] <zaphod_b> basically, the maintainer stopped caring about this package, and no one stepped up to take over
[23:58:19] *** Joins: fikran (~fikran@user/fikran)
[23:58:50] <zaphod_b> I thought maybe you guys might be able to propose alternatives ?
