[00:12:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:13:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[00:16:38] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:24:05] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[00:24:05] *** Quits: herlocksholmes (~herlocksh@x-node.gq) (Quit: Leaving...)
[00:29:00] *** Joins: herlocksholmes (~herlocksh@x-node.gq)
[00:29:13] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:29:24] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:31:14] *** Quits: mingus (~jan-magnu@auth-147-15.anyconnect.uib.no) (Ping timeout: 260 seconds)
[00:32:21] *** Joins: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[00:33:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:35:48] <lisp123> pjb: Thanks again for https://termbin.com/y8zs (saving partial images), I'm working through it and it will take some time as they are advanced topics, but its going to be super useful for dynamic programming
[00:39:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[00:39:50] *** Joins: guthur (~guthur@149.167.145.129)
[00:40:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:43:04] *** Inline_ is now known as Inline
[00:46:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:46:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:47:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:52:44] <shka> good evening
[00:52:53] *** Joins: cjb (~cjbayliss@user/cjb)
[00:53:11] <shka> anybody knows how can i generate flamegraphs from sprof using recent version of sbcl?
[00:53:34] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[00:53:58] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[00:58:04] *** Quits: cjb (~cjbayliss@user/cjb) ()
[01:01:03] *** Joins: cjb (~cjbayliss@user/cjb)
[01:12:09] *** Quits: nature (~nature@45.32.235.173) (Remote host closed the connection)
[01:12:27] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:75fe:5286:8331:3c65)
[01:15:42] *** Joins: nature (~nature@45.32.235.173)
[01:22:34] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 244 seconds)
[01:30:05] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 256 seconds)
[01:30:09] <mfiano> scymtym has a McCLIM system for that
[01:30:22] <mfiano> It requires his McCLIM fork iirc
[01:43:02] <shka> mmm
[01:43:19] <shka> any form of visualization would be helpful here, really
[01:45:23] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[01:45:30] *** Joins: dre (~dre@2001:8003:c932:c301:9f9c:b84c:cb51:c83)
[01:45:35] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[01:52:51] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:57:45] *** Quits: pve (~pve@37-136-97-160.rev.dnainternet.fi) (Quit: leaving)
[02:04:07] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:07:06] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[02:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:10:14] *** Joins: igemnace (~ian@user/igemnace)
[02:14:25] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[02:15:26] *** Joins: lagash (lagash@lagash.freeirc.org)
[02:17:24] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4) (Ping timeout: 260 seconds)
[02:24:29] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[02:27:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[02:29:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[02:30:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[02:33:55] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[02:41:55] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[02:43:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:44:10] *** Joins: pjb (~pjb@user/pjb)
[02:48:26] *** Quits: random-nick (~random-ni@87.116.176.55) (Ping timeout: 245 seconds)
[02:50:55] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[02:51:04] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[02:57:46] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[02:58:29] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Ping timeout: 256 seconds)
[02:59:47] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[03:07:38] *** Joins: jealousmonk (~user@2804:431:e7c4:7f35:7769:1f33:9572:c142)
[03:10:22] <White_Flame> not sure if it's in the scrollback, but why is there a symbol-plist instead of a symbol-alist?
[03:11:31] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[03:13:38] <edgar-rft> White_Flame: historical reasons, plists are older than alists
[03:13:40] <pjb> White_Flame: obviously, for historical reasons.
[03:13:53] <White_Flame> edgar-rft: huh
[03:14:19] <White_Flame> pjb: obviously, hence the question being about what the historical reasons are :-P
[03:14:20] <pjb> White_Flame: in LISP 1.5, symbols were implemented using a plist.
[03:15:00] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[03:15:45] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[03:17:01] *** Quits: Jing_ (~textual@2604:a840:3::1033) (Remote host closed the connection)
[03:17:50] *** Joins: Jing (~textual@2604:a840:3::1033)
[03:21:09] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 256 seconds)
[03:22:26] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:31:29] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:75fe:5286:8331:3c65) (Remote host closed the connection)
[03:33:58] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[03:34:38] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[03:54:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[03:54:42] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:56:00] *** Lord_of_Life_ is now known as Lord_of_Life
[04:06:23] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 264 seconds)
[04:09:36] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7e94:3856:5140:4361) (Ping timeout: 268 seconds)
[04:15:43] *** Joins: psi[m] (~psikdeorg@2001:470:69fc:105::948f)
[04:16:11] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[04:20:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[04:22:19] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[04:24:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[04:24:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:32:33] *** Joins: notzmv (~zmv@user/notzmv)
[04:37:35] *** Quits: holycow (~rtaylor@69.172.184.139) (Quit: leaving)
[04:37:40] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:39:19] *** Parts: psi[m] (~psikdeorg@2001:470:69fc:105::948f) ()
[04:39:34] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[04:41:11] <jcowan> But variable bindings were implemented with alists, so they are the same age.
[04:44:44] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[04:51:18] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[04:55:50] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 268 seconds)
[05:09:38] *** Joins: john__ (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de)
[05:11:54] *** Joins: karlosz (~karlosz@47.151.136.69)
[05:12:13] *** Quits: gaqwas (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Ping timeout: 256 seconds)
[05:12:45] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[05:12:52] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:13:33] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[05:25:15] *** Joins: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no)
[05:26:05] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:32:38] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Ping timeout: 244 seconds)
[05:35:44] *** Quits: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no) (Ping timeout: 244 seconds)
[05:41:00] *** Joins: namasteaks (~pinklocal@75.172.55.0)
[05:44:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 245 seconds)
[06:09:51] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: alanz (sid110616@2a03:5180:f:5::1:b018) (Ping timeout: 268 seconds)
[06:10:27] *** Quits: jmercouris (sid438340@2a03:5180:f:4::6:b044) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: gendl (sid100083@2a03:5180:f:4::1:86f3) (Ping timeout: 268 seconds)
[06:10:28] *** Quits: servytor (uid525486@2a03:5180:f:4::8:4ae) (Ping timeout: 268 seconds)
[06:10:35] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 264 seconds)
[06:10:35] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:11:21] *** Joins: hubvu (sid495858@user/hubvu)
[06:11:42] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:12:13] *** Joins: splittist (sid17737@tinside.irccloud.com)
[06:12:19] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Ping timeout: 268 seconds)
[06:12:21] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[06:12:40] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:12:47] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[06:12:52] *** Joins: gendl (sid100083@hampstead.irccloud.com)
[06:14:23] *** Joins: IUSR (sid348938@hampstead.irccloud.com)
[06:16:40] *** Joins: elderK (uid205007@helmsley.irccloud.com)
[06:21:03] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:21:04] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Read error: Connection reset by peer)
[06:22:08] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[06:22:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[06:23:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[06:23:03] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[06:24:42] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[06:25:05] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[06:26:03] *** Joins: jmercouris (sid438340@hampstead.irccloud.com)
[06:34:30] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[06:35:28] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:36:55] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[06:39:35] *** Joins: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97)
[06:40:50] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Ping timeout: 260 seconds)
[06:44:14] *** Quits: jealousmonk (~user@2804:431:e7c4:7f35:7769:1f33:9572:c142) (Quit: ERC (IRC client for Emacs 27.1))
[06:46:32] *** Joins: dec0d3r__ (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[06:48:05] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[06:48:41] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[06:49:18] *** Quits: dec0d3r_ (~dec0d3r@2001:8004:1d82:1a0f:1d6f:e820:a0ed:ee97) (Ping timeout: 268 seconds)
[06:49:35] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:50:09] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:51:30] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[06:52:41] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[06:54:32] *** Joins: gaqwas (~john@dynamic-095-115-018-130.95.115.pool.telefonica.de)
[06:56:20] *** Quits: john__ (~john@dynamic-077-009-115-046.77.9.pool.telefonica.de) (Ping timeout: 244 seconds)
[06:59:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[07:00:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[07:00:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:00:46] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[07:00:54] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[07:07:54] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 260 seconds)
[07:17:47] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 264 seconds)
[07:18:38] *** Joins: karlosz (~karlosz@47.151.136.69)
[07:22:34] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:23:24] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[07:30:42] <beach> Good morning everyone!
[07:31:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[07:31:59] *** Quits: elderK (uid205007@helmsley.irccloud.com) (Ping timeout: 244 seconds)
[07:31:59] *** Quits: gendl (sid100083@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[07:32:11] *** Quits: conjunctive (sid433686@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:32:11] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[07:32:11] *** Quits: splittist (sid17737@tinside.irccloud.com) (Ping timeout: 256 seconds)
[07:32:14] *** Quits: dbotton (sid492350@lymington.irccloud.com) (Ping timeout: 260 seconds)
[07:32:28] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (Ping timeout: 268 seconds)
[07:32:28] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:32:28] *** Quits: jsatk (sid304796@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:32:40] *** Quits: victor (sid208353@user/victor) (Ping timeout: 260 seconds)
[07:32:45] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:32:45] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[07:32:52] *** Quits: travv0 (sid293381@user/travv0) (Ping timeout: 260 seconds)
[07:32:59] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[07:33:05] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 268 seconds)
[07:33:16] *** Joins: aartaka (~aartaka@5.1.53.225)
[07:33:19] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:19] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[07:33:24] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[07:33:26] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[07:33:38] *** Quits: hubvu (sid495858@user/hubvu) (Ping timeout: 260 seconds)
[07:33:51] *** Quits: griffinmb (sid410590@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[07:33:51] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[07:33:53] *** Quits: IUSR (sid348938@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:53] *** Quits: d_run (sid83858@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[07:33:54] *** Joins: gendl (sid100083@id-100083.hampstead.irccloud.com)
[07:34:08] *** Joins: victor (sid208353@user/victor)
[07:34:12] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[07:34:26] *** Joins: IUSR (sid348938@2a03:5180:f:4::5:530a)
[07:34:27] *** Joins: jsatk (sid304796@id-304796.helmsley.irccloud.com)
[07:34:28] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[07:34:31] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[07:34:37] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[07:34:41] *** Joins: jmercouris (sid438340@id-438340.hampstead.irccloud.com)
[07:34:45] *** Joins: d_run (sid83858@id-83858.hampstead.irccloud.com)
[07:34:45] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[07:34:47] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[07:34:49] *** Joins: ullbeking (sid5364@user/ullbeking)
[07:36:04] *** Joins: hubvu (sid495858@user/hubvu)
[07:36:35] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[07:36:35] *** ChanServ sets mode: +o pl
[07:36:47] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:39:44] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 244 seconds)
[07:39:47] *** Joins: Bike (~Bike@71.69.170.70)
[07:39:47] *** ChanServ sets mode: +o Bike
[07:39:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:47:48] *** Joins: travv0 (sid293381@user/travv0)
[07:50:00] *** Joins: semz (~none@user/semz)
[08:11:31] *** Joins: asarch (~asarch@2806:10ae:7:3e44:4264:8c36:e9e3:2cd7)
[08:13:44] *** Quits: namasteaks (~pinklocal@75.172.55.0) (Read error: Connection reset by peer)
[08:15:18] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[08:15:27] *** Quits: cjb (~cjbayliss@user/cjb) ()
[08:16:35] *** Joins: tales74 (~tales74@116-251-60-165.pool.activ8me.net.au)
[08:18:04] <asarch> With (g-signal-connect the-button "click" (lambda (msg) (declare (ignore msg)) (format t "Hello!~%"))), every time the user clicks on the button, you get the message "Hello!".
[08:18:39] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[08:18:46] <tales74> Hi, I'd like to know if SBCL has something like Lispworks' find-object-size.
[08:19:30] <tales74> http://www.lispworks.com/documentation/lw51/LWRM/html/lwref-211.htm
[08:21:09] <asarch> So, if you had an array of ten buttons (let's say from 0 to 9) with (loop for x from 0 to 9 do (g-signal-connect … (lambda (msg) … (foo x)))) you could call (foo) with the correct number value like: (foo 0) … (foo 9)
[08:21:55] <asarch> However, it only uses the 10 value for that: Hello!: 10 … Hello!: 10
[08:22:16] <asarch> Why is that?
[08:22:44] <beach> asarch: Because you are using the same x every time.  LOOP is not required to create a new lexical variable in each iterations.
[08:23:10] <beach> asarch: Try (loop for x... do (let ((x x)) (g-signal...)))
[08:23:10] <tales74> Working out the size of objects seems to require that I know information about how SBCL constructs instances like how it's done here: https://stackoverflow.com/questions/12230499/memory-usage-by-objects-in-common-lisp/12234856#12234856
[08:23:34] <asarch> Even if I do (foo (format nil "~d" x))
[08:24:50] <beach> asarch: Did you see my answer?
[08:25:42] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::32f3)
[08:27:08] <beach> tales74: You may want to ask in #sbcl.
[08:28:09] <Bike> tales74: sb-ext:primitive-object-size
[08:30:14] <asarch> Bingo!
[08:30:16] <asarch> Thank you!
[08:30:23] <asarch> Thank you very much beach :-)
[08:30:25] <beach> Sure.
[08:34:12] <asarch> If I load a file and it is loading the ~60% of the file and something is wrong and I select "0: [ABORT   ] Abort loading file …", what happen with this 60%? Is it keep or the evaluator discards it?
[08:35:31] <beach> If it is a source file, then top-level forms in the first 60% are evaluated.
[08:36:45] <asarch> I see
[08:36:58] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:42:34] <tales74> beach: Bike: Thank you!
[08:48:43] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:49:47] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[08:55:46] *** Quits: Jing (~textual@2604:a840:3::1033) (Remote host closed the connection)
[08:56:20] *** Joins: Jing (~textual@2604:a840:3::1033)
[08:59:10] <beach> tales74: Sure, good luck!
[09:13:54] *** Parts: tales74 (~tales74@116-251-60-165.pool.activ8me.net.au) ()
[09:32:10] *** Quits: dre (~dre@2001:8003:c932:c301:9f9c:b84c:cb51:c83) (Remote host closed the connection)
[09:34:59] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (*.net *.split)
[09:34:59] *** Quits: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[09:34:59] *** Quits: les (znc@user/les) (*.net *.split)
[09:34:59] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[09:34:59] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (*.net *.split)
[09:35:13] *** Joins: les (znc@user/les)
[09:35:18] *** Joins: froggey (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[09:35:26] *** Joins: luis (~luis@lisp/luis)
[09:35:28] *** ChanServ sets mode: +o luis
[09:35:29] *** Joins: mikko (~mikko@2a02:7b40:d418:6a61::1)
[09:35:53] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[09:38:24] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[09:42:53] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (*.net *.split)
[09:42:53] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (*.net *.split)
[09:42:53] *** Quits: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) (*.net *.split)
[09:42:53] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[09:42:53] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[09:42:54] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[09:42:54] *** Quits: light (~light@user/light) (*.net *.split)
[09:42:54] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[09:42:54] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:42:54] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[09:42:54] *** Quits: skn (~znc@sec.nimmagadda.net) (*.net *.split)
[09:42:54] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[09:43:05] *** Joins: ck_ (~ck@plskthx.org)
[09:43:05] *** Joins: light (~light@user/light)
[09:43:06] *** Joins: zagura (~zagura@user/zagura)
[09:43:23] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[09:43:29] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:43:31] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[09:43:39] *** Joins: skn (~znc@sec.nimmagadda.net)
[09:43:41] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[09:44:08] *** Joins: jfb4 (~jfb4@178.62.2.68)
[09:45:06] *** Joins: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no)
[09:45:32] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[09:47:35] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[09:49:42] *** Joins: Alfr (~Alfr@user/alfr)
[09:55:22] <pillton> What would you call the macro F where (macroexpand '(F place)) is (lambda (#:var) (push #:var place))?
[09:56:58] <beach> PUSHER maybe?
[09:57:47] *** Quits: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no) (Ping timeout: 250 seconds)
[09:58:00] *** Joins: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4)
[10:01:13] *** Joins: VincentVega (~user@212.241.25.80)
[10:02:59] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[10:06:58] <pillton> beach: Thanks.
[10:07:14] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:07:50] <guthur> pillton is that just something for learning?
[10:07:57] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[10:08:45] *** Joins: pve (~pve@178-55-33-240.bb.dnainternet.fi)
[10:09:13] <guthur> because it feels like `(defun F (place) (lambda (x) (push x place)))` would be more appropriate
[10:09:35] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Remote host closed the connection)
[10:09:47] *** Joins: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d)
[10:10:09] <beach> guthur: Places are not first-class objects in Common Lisp.
[10:10:22] <pillton> No it isn't for learning. I was going to add it to a library of combinators (though I think this macro isn't really a combinator).
[10:10:59] <pillton> guthur: Consider (let ((x nil)) (map nil (F x) '(1 2 3 4))).
[10:11:09] <beach> guthur: That function would just modify the variable in the argument.
[10:11:40] <beach> pillton: Nice use case.
[10:13:01] <guthur> beach ok, fair. Apologies my bad pillton
[10:14:07] <pillton> No dramas. It is why I am asking the question. Part of me thinks "place" or the suffix "f" should be in the name to warn the reader.
[10:15:34] <beach> I guess PLACE-PUSHER would fulfill that requirement, but PUSHER already suggests that a place is involved.
[10:16:14] *** Joins: dre (~dre@2001:8003:c932:c301:a62b:d5d5:737b:8c68)
[10:16:49] <pillton> It works with APPENDER and NCONCER too. NCONCER is funny.
[10:17:20] <beach> Sure is.
[10:21:22] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[10:21:49] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[10:22:16] *** Quits: dec0d3r__ (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:32:16] *** Joins: spiaggia (~user@2a01:cb19:150:3400:b4a7:953f:32f2:9bb)
[10:32:32] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:35:58] *** Joins: pjb (~pjb@user/pjb)
[10:47:08] <spiaggia> In "Let over Lambda" page 28, isn't that an error to quote the lambda expression inside a FUNCTION special form?
[10:48:00] <spiaggia> This book uses CLISP as I recall.  Maybe CLISP accepts it this way?
[10:49:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 260 seconds)
[10:49:51] *** Joins: amb007 (~a_bakic@80.132.22.93.rev.sfr.net)
[10:50:48] <White_Flame> like what, (function '(lambda () 3))?
[10:51:19] <spiaggia> (function '(lambda (x) (+ 1 x))) to be precise.
[10:52:01] <White_Flame> yeah, sbcl certainly doesn't like it.  I wonder if it's undefined or illegal behavior
[10:53:04] <spiaggia> I don't think I have ever seen any remarks about it, which would make it illegal.  But then, I could have missed something.
[10:53:42] <White_Flame> it doesn't explicitly say that the NAME parameter of the FUNCTION special form is unevaluated, but it's hard to justify the quote being reasonable there I'd think
[10:54:05] <spiaggia> Yeah, this is the first time I see something like this.
[10:55:19] <pillton> clhs 1.4.4.3
[10:55:20] <specbot> The ``Arguments and Values'' Section of a Dictionary Entry: http://www.lispworks.com/reference/HyperSpec/Body/01_ddc.htm
[10:55:30] <pillton> "For special operators and macros, their arguments are not evaluated unless it is explicitly stated in their descriptions that they are evaluated."
[10:55:35] <White_Flame> CLISP doesn't accept (function '(lambda () 3)), so it might be a typo in the book
[10:55:42] <White_Flame> ah, k
[10:56:25] <spiaggia> Thanks.  Yes, a typo then.  But a strange one,  I would have thought the same text to be used for testing and for typesetting,
[10:56:49] <pillton> I doubt it.
[10:57:23] <spiaggia> Hmm.  That's the way I write books. :)
[10:59:30] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:59:40] <pillton> What do you use to do literate programming? I hated it the last time I tried it. Version control is a pain. Sharing "the code" with others.
[11:00:15] <pillton> (I have to go. I'll check the logs tomorrow.)
[11:00:20] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[11:07:34] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:07:40] <spiaggia> I really should start that "book reviews" web page I have threatened to start in the past.  It seems every time I open a book using Common Lisp, I find tons of errors.
[11:07:50] *** Quits: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[11:08:28] <rotateq> spiaggia: which one for example?
[11:09:25] <spiaggia> Right now I am reading "Let over Lambda", and it is not too bad, but there are still many errors.  But in the past, I started reading "Land of Lisp" and it is very badly written.
[11:09:34] <rotateq> ah this one
[11:10:01] <rotateq> hm why do you think so? i mean beside the "tons of errors"
[11:10:23] <spiaggia> That's irritating enough that I get upset reading it.
[11:10:44] <rotateq> but that's then about YOU :)
[11:10:48] <spiaggia> It is strange to me that it was allowed to be published in this state,
[11:11:27] <spiaggia> rotateq: I hardly ever consider myself unique.  If it irritates me, I am convinced there are lots of others out there who share those feelings.
[11:12:17] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:5:5375:e160:e4a4)
[11:12:48] <spiaggia> "Land of Lisp" is a book meant for newbies, and it is full of incorrect terminology.  That's sending a very bad message to those newbies.
[11:15:13] *** Joins: asarch_ (~asarch@2806:10ae:7:5871:344d:9263:3f2d:f5fd)
[11:17:09] *** Quits: Jing (~textual@2604:a840:3::1033) (Quit: Textual IRC Client: www.textualapp.com)
[11:17:22] *** Joins: Jing (~textual@2604:a840:3::1033)
[11:17:44] *** Quits: Jing (~textual@2604:a840:3::1033) (Client Quit)
[11:17:59] *** Joins: Jing (~textual@2604:a840:3::1033)
[11:18:02] *** Quits: asarch (~asarch@2806:10ae:7:3e44:4264:8c36:e9e3:2cd7) (Ping timeout: 260 seconds)
[11:18:59] *** Quits: Jing (~textual@2604:a840:3::1033) (Client Quit)
[11:19:14] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[11:22:25] *** Quits: gaqwas (~john@dynamic-095-115-018-130.95.115.pool.telefonica.de) (Ping timeout: 244 seconds)
[11:25:40] <Cymew> Is it? I read it ages ago and I do not remember getting stuck on weird terminology.
[11:26:53] <spiaggia> I don't have the book handy, but I remember that it uses "command" and I think also "statement" when it means "form", and it is not even consistent.
[11:26:54] <rotateq> it's a not too technical resource, cause programming is also about fun
[11:27:24] <spiaggia> Still, there is no excuse for teaching incorrect and inconsistent terminology.
[11:27:48] <spiaggia> It doesn't hurt anyone to do it right.  It doesn't make it more fun to be incorrect.
[11:28:01] <Cymew> I would not say calling a form a "statement" is incorrect.
[11:29:00] <spiaggia> There are only a few places where the standard uses that terminology, and I can remember only one of them now, and that's in the TAGBODY form.
[11:29:30] <spiaggia> Basically, it is used to mean a form that is not evaluated for its return value(s).
[11:29:48] <spiaggia> So if the value of a form is needed, I consider it incorrect to call it a "statement".
[11:30:09] <Cymew> It might be a bit colloquial, but if you think deviating from the terms in the standard,  I think you are way to harsh in your judgement.
[11:30:10] <spiaggia> Also, the use of "statement" this way is consistent with how other languages use it.
[11:30:54] <spiaggia> Cymew: Then I prefer being harsh when it comes to published books, especially those meant for newbies.
[11:31:23] <Cymew> s/terms in the standard/terms in the standard is all wrong/
[11:32:20] <spiaggia> Anyway, that's just one point of a large number.  I'll start the page and show it when I have made some progress.
[11:32:31] *** Joins: VincentV` (~user@212.241.25.80)
[11:32:59] <Cymew> Please do. It could be quite useful, even if I personally think you are wrong about how to write newbie friendly texts.
[11:33:33] <spiaggia> So you think it is a good thing to be inconsistent in such texts?  What would the purpose be?
[11:33:42] <spiaggia> Like I said, it doesn't make it more fun that way.
[11:33:47] *** Quits: VincentVega (~user@212.241.25.80) (Ping timeout: 244 seconds)
[11:35:10] <Cymew> Inconsistencies are bad, but I see nothing wrong with colloquialism. Stricly following the terminology in a standard is not something of a goal in itself.
[11:35:58] <spiaggia> If you say so,
[11:36:00] <spiaggia> .
[11:38:29] * spiaggia is again allowed to enter his office, so he will abandon his Italian alter ego now.
[11:38:33] *** Parts: spiaggia (~user@2a01:cb19:150:3400:b4a7:953f:32f2:9bb) (ERC Version 5.3 (IRC client for Emacs))
[11:38:58] <rotateq> :)
[11:40:25] <Cymew> Ah, so you have different nicks depending on location?
[11:40:27] *** Quits: amb007 (~a_bakic@80.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:40:52] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:41:02] <Cymew> Personally I use the same nick with _ in front or suchlike. Makes it easier to see that it's the same person.
[11:41:59] *** Quits: asarch_ (~asarch@2806:10ae:7:5871:344d:9263:3f2d:f5fd) (Quit: Leaving)
[11:44:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[11:45:16] <beach> I think it's more fun to use different languages.
[11:45:33] <beach> My nicks are not meant for newbies.
[11:46:42] <Cymew> You seem to have a conflicted relationship to newbies.
[11:47:49] <Cymew> But, I suppor the idea of using more languages online. We should not always assume the world runs on English.
[11:47:58] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:3854:9ecf:d1a:a062)
[11:50:18] <beach> I care deeply about newbies, and I feel sorry for them when authors confuse them by inconsistent and incorrect terminology.  I am often a newbie myself with respect to many topics, and I much prefer to be presented with consistent and correct terminology.
[11:50:19] <beach> And, again, I rarely consider myself unique, so I am sure many others feel the same.  Also, again, using consistent and correct terminology doesn't hurt any others.
[11:52:02] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:3854:9ecf:d1a:a062) (Ping timeout: 240 seconds)
[11:52:49] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[11:55:33] *** Joins: frgo (~frgo@185.144.83.11)
[11:58:50] *** Joins: random-nick (~random-ni@87.116.176.55)
[12:00:26] *** Joins: BottomType (~BottomTyp@31.217.246.214)
[12:00:51] <hayley> I barely slept last night, as the specification for the last assignment (which was due yesterday) at university was poorly worded, and I was told that my solution was not allowed two days ago. After asking again, I was told that it was allowed. Can't say I enjoyed it.
[12:01:31] <hayley> (Any poor wording on my behalf is clearly due to a lack of sleep.)
[12:05:21] <lisp123w> Writing well and precise always is better. But its a considerably challenging task
[12:07:03] <lisp123w> I used to just type stuff out, but as I got more (hopefully?) experienced in Lisp, I'm much more cautious on writing anything. Ignorance was bliss in the early days. I have quite a few notes on Macros but its been 1.5 months and nowhere close to a reasonable article
[12:07:11] <beach> Sure, but that's why there are reviewers.  For example, Apress has hired experienced Common Lisp programmers to review their Lisp books.
[12:07:43] <beach> Clearly, Land of Lisp was not reviewed by an experienced Common Lisp programmer, if it was reviewed at all.
[12:07:56] <lisp123w> No, I'm agreeing with you on why using 'form' and 'statement' correctly matters (even subliminally). Just noting its quite a hard process
[12:09:34] <beach> Of course.  Writing books requires training and experience, in addition to reviewers.  But it seems that many people don't think so and just go ahead and write any crap.
[12:09:56] <beach> I guess, that's just like programming now that I think about it.
[12:10:43] *** Joins: OlCe (~user@amontsouris-652-1-130-32.w92-151.abo.wanadoo.fr)
[12:12:36] <lisp123w> I guess. Boils down to Human Nature, 'if it gets the job done (today) its good enough'
[12:13:15] <rotateq> There are many crap books from newer times, eg those with "Learn FOO in 24 hours".
[12:14:03] <lisp123w> rotateq: Especially on the internet. First page of google is terrible
[12:15:53] <rotateq> and it blends especially young people in terms of understanding vs just using something (Dunning-Kruger effect)
[12:18:01] <lisp123w> I imagine it would. Hopefully there is a counter movement the other way
[12:18:48] <lisp123w> I do think Land Of Lisp has great cartoons and is a lot of 'fun', I have never read the book but it has certainly energized many people into Lisp
[12:19:10] <lisp123w> Perhaps worth a second edition correcting some of the items
[12:29:05] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:36:49] <beach> This is a start: http://metamodular.com/Books/land-of-lisp.html and I will later insert it into a proper page of book reviews in the hierarchy.
[12:37:32] <beach> I didn't start taking notes until chapter 3, so maybe I need to re-read the book from the start.
[12:38:03] *** Joins: hirez (~hirez@104.128.237.40)
[12:38:51] <beach> Cymew: No need for you to read it.  You won't agree with anything and I already know it.
[12:39:01] <guthur> that pg 35 one is bizarre, how would one make the leap to data/code reader? maybe some weird concept of macros?
[12:39:34] <beach> The book is full of that kind of stuff.
[12:40:31] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (Ping timeout: 245 seconds)
[12:41:31] <beach> I was trained as a scientist and as an engineer, and I was taught to be much more careful with terminology, so as to make life easier for people reading my stuff.  Clearly the author didn't receive such training, or didn't pay attention when it happened.
[12:59:30] <shka> land-of-lisp has some charm :-)
[13:06:25] <beach> http://metamodular.com/Books/land-of-lisp.html now has a few more items.  Check out what the author wrote on page 40.
[13:07:03] <beach> This kind of stuff is not "charming" at all.
[13:08:16] <rotateq> but the comics are
[13:08:17] <hayley> Ouch!
[13:09:09] <hayley> I don't think the printer could even print (PORK . (BEEF . (CHICKEN . ()))) or something of the sort.
[13:09:40] <hayley> clhs 22.1.3.5
[13:09:41] <specbot> Printing Lists and Conses: http://www.lispworks.com/reference/HyperSpec/Body/22_ace.htm
[13:09:47] <beach> Though that would at least show that the evaluator was working correctly.
[13:10:58] <rotateq> now I get hungry but 2h till lunch :)
[13:14:04] <hayley> I suppose that statement _could_ be read (with very large granules of salt) to mean "the REPL of a Lisp system could print a form which constructs the resulting object from evaluation, and the resulting output would still be useful." From memory, the Racket printer does print '(pork beef chicken), though I don't see the point in it.
[13:14:16] <hayley> Otherwise, it's very ridiculous.
[13:15:31] <hayley> (Maybe someone should implement CDR coding, so that the diagram on page 38 that beach described would be even more inaccurate.)
[13:18:18] <beach> Anyway, I hope I am beginning to show why I think this book is very badly written.  Notice that there is on the average more than one problem per page on the pages I have reviewed so far.
[13:20:29] <shka> well, regardless
[13:20:46] <shka> i am still in need of sbcl profiles visualization
[13:21:24] <shka> some other profiler would be fine as well
[13:21:47] <shka> but i need really need either call graph or flamegraph
[13:21:56] <shka> flamegraph preferred
[13:22:17] <shka> some tips please?
[13:22:43] <jackdaniel> " Page 39. "(cons 'chicken ())". This use of the empty list is in direct violation of section 1.4.1.4.4 of the Common Lisp standard. " seems to hint, that it is the violation of the standard (i.e not a valid form), but 1.4.1.4.4 is about conventions as hints to the human reader
[13:23:19] <jackdaniel> in other words it is bad style, but it is not wrong (unlike other statements pointed out on that page)
[13:24:17] <beach> Fair enough.  I'll clarify.
[13:25:10] <jackdaniel> conventions listed in 1.4 are conventions used in the standard, not something that could be violated elsewhere
[13:25:30] <jackdaniel> I haven't read land of lisp, but a few people I've talked with had some warm remarks about it
[13:25:42] <jackdaniel> and a sharp criticism that it uses clisp afair
[13:25:57] <beach> Fixed.
[13:33:06] <shka> jackdaniel: i have a question regarding https://gitlab.common-lisp.net/dkochmanski/metering
[13:35:08] <shka> so i think that chrome/chromium has some way to visualize flamegraphs, as shown here https://github.com/TeMPOraL/tracer
[13:35:19] <Cymew> beach: Thanks for the link. Looks good. Good resource.
[13:36:46] <shka> and I think that it would be possible to produce json for the chrome to visualize, from metering
[13:37:21] <beach> Cymew: Thanks.
[13:37:52] <shka> jackdaniel: but I need some kind of interface to access collected samples
[13:38:43] <pve> Hi, I have a class I currently call "document-store" that supports operations like saving, deleting and looking up documents (also a class). I have other kinds of "stores" too, each associated with a class whose instances the store knows how to deal with (save, delete, look up). My question is: is there an established name for the kind of objects that come out of these stores? I've seen the term "protocol
[13:38:49] <pve> class", but I'm not sure if it's applicable here.
[13:39:30] <pve> oh, sorry about the line break, wonder how that happened..
[13:39:52] <shka> jackdaniel: could you please demonstrate how to get access to sampling events?
[13:41:12] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[13:42:31] *** Joins: MumblyFoo (MumblyFoo@47-223-60-37.tyrmcmtk04.res.dyn.suddenlink.net)
[13:44:45] <beach> pve: Yes, a "protocol class" is a class that is specified as being part of a protocol, together is functions (often generic) that may take instances of such a class as arguments.  Sometimes the protocol class is not meant to be instantiated directly, because it is merely the root of some hierarchy of classes that are meant to be instantiated.
[13:45:03] <beach> together *with functions
[13:47:45] <pve> beach: Aha! Yeah, I'm trying to come up with a superclass name for the "document" class. The superclass of "document-store" is just "store".
[13:48:16] <pve> and also to make it easier to refer to these classes in comments etc
[13:48:39] *** Parts: engblom (~foo@user/engblom) ()
[13:49:17] <pve> but it sounds like "protocol class" could work here
[13:52:51] <pve> hmm, could "instances of protocol classes" be called simply "protocol instances" or "protocol objects"?
[13:53:12] *** Joins: notzmv (~zmv@user/notzmv)
[13:55:12] <beach> Not really.  Subclasses of protocol classes may not be protocol classes, like if client code subclasses a protocol class.  But an instance of such a subclass is still an instance of the protocol class.
[13:56:02] <beach> And if you mean a "direct" (or is it "immediate") instance, then typically no such instance should exist if the protocol class is not meant to be instantiated, which is typically the case.
[13:57:14] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:00:16] <beach> Oops, the "Acknowledgments" of "Land of Lisp" names a reviewer.  I guess I should send my link to that person.
[14:02:35] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 244 seconds)
[14:02:36] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[14:02:47] <pve> beach: Ok, thanks. I guess I have to think about this a bit more.
[14:03:09] <beach> Sure.  Good luck!
[14:05:16] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:05:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:16:42] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:17:39] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[14:25:36] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[14:27:06] *** Joins: s-liao (~s-liao@101.86.103.113)
[14:34:31] <jackdaniel> shka: there are no sampling events, metering collects aggregate time / cons
[14:35:43] *** Quits: frgo (~frgo@185.144.83.11) (Remote host closed the connection)
[14:36:05] <shka> will I be able to gather caller and form a stack?
[14:36:16] <shka> this would be required for making a flamegraph
[14:36:37] <jackdaniel> no, I don't think that metering as it is now is suitable for this
[14:36:54] <shka> oh :(
[14:37:10] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[14:37:12] <jackdaniel> you may hack things around of course, but you'll need to code necessary stuff yourself
[14:38:14] <jackdaniel> metering works by encapsulating the monitored function, so technically you may inject any code you want (the overhead is estimated) -- unless the function is inlined of course
[14:38:41] <shka> yeah, got it
[14:39:23] *** Joins: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae)
[14:41:58] <phantomics> Hey, just ran into a really weird problem you can see in this paste: https://dpaste.com/9W8UV6S3T
[14:42:18] <phantomics> I tried defining a function to run a bunch of April tests, it takes incredibly long to compile, 70-80secs
[14:42:43] <phantomics> But if I just have the macro expand to run those tests, it takes only a couple seconds to compile
[14:43:20] <shka> jackdaniel: thanks for hints
[14:43:28] <jackdaniel> sure
[14:43:31] <phantomics> I have another function that runs the main set of tests for April and it takes a fraction of a second to compile, and it has ~976 tests as opposed to ~220 in this test set that's taking a long time
[14:43:58] <phantomics> Does anyone have an idea why a defun would take so long to compile compared to just running things after macroexpansion?
[14:44:17] <shka> perhaps it is running in interpreted mode?
[14:44:22] <hayley> I suspect the latter uses the interpreter of SBCL, whereas the former invokes the compiler.
[14:44:29] <jackdaniel> "just running things" may be minimally compiled
[14:44:40] <jackdaniel> while normal compilation could go through multiple passes
[14:44:43] <hayley> Look at the number of "forms interpreted" for either.
[14:44:48] <jackdaniel> minimal compilation /= interpretation
[14:45:05] <jackdaniel> afaik sbcl doesn't have the interpreter (at least enabled by default)
[14:45:22] <phantomics> For the slow one: 6 forms interpreted, for the fast one: 1,170 forms interpreted
[14:46:42] <phantomics> So perhaps the defun is recompiling every function referenced in each April invocation?
[14:47:28] <hayley> I spotted #+SB-EVAL and #+SB-FASTEVAL forms going from EVAL -> SB-IMPL::EVAL-IN-LEXENV
[14:47:28] <jackdaniel> try calling May ,) what is "April"?
[14:48:01] <shka> April is APL implementation for common lisp
[14:48:02] <phantomics> April is my APL compiler, it generates Lisp code
[14:48:30] <hayley> But, without SB-EVAL or SB-FASTEVAL SBCL falls back to compiling.
[14:48:44] <shka> i think that the defun somehow triggers compiling april to CL, while progn form simply runs april interpreter
[14:48:49] <shka> that is my best guess
[14:49:04] <phantomics> So maybe all the functions referenced in the compiled code are all recompiled for every single test, I could see that causing the delay
[14:49:20] <shka> phantomics: disclaimer, i am not familiar with inner workings of April
[14:49:42] <hayley> That said, I have neither in my local-target-features.lisp-expr, so I don't know.
[14:49:58] <phantomics> April's workings shouldn't be that important, it works as a macro that takes a string and outputs a Lisp form
[14:50:11] <hayley> But the interpreter does handle PROGN specially, so it might avoid super-linear stuff in the SBCL compiler.
[14:51:21] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:51:56] <phantomics> Hmm, it occurs to me that the main test set that compiles quickly is invoked using a macro, not a function
[14:53:01] <phantomics> I'll try generating a macro to use in invoking the tests
[14:53:13] *** Joins: paule32_ (~paule32@user/paule32)
[14:53:20] <phantomics> But if that's the case, something is causing April to make function compilation extremely slow
[14:56:19] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[14:56:29] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 268 seconds)
[14:56:56] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[14:59:23] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:59:26] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Client Quit)
[15:00:00] *** Joins: igemnace (~ian@user/igemnace)
[15:00:18] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[15:00:46] <Lycurgus> is it me or is roswell sorta bungled?
[15:05:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:06:08] <jackdaniel> Lycurgus: I've used it briefly around 2y ago and then I could affirm that it is. I don't know how much better it is now though
[15:06:40] <Lycurgus> >:
[15:07:11] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[15:07:27] *** Joins: amb007 (~a_bakic@80.132.22.93.rev.sfr.net)
[15:08:59] <Lycurgus> this also is not my first go but some pkgs I want to use depend on it so thought I'd give it another try
[15:09:20] <Lycurgus> instead gonna pass on them pkgs
[15:10:25] <Lycurgus> other langs can do this don't see why they couldn
[15:10:43] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[15:12:07] <Lycurgus> pass or rework
[15:15:18] <phantomics> Defining it as a macro doesn't make the compilation any faster, and produces some strange bugs
[15:16:13] <phantomics> And I'm using a standard SBCL, so if the interpreter is disabled I doubt it's being interpreted
[15:16:14] *** Quits: amb007 (~a_bakic@80.132.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:16:40] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:18:10] <hayley> It might not be interpreting entirely, but casual inspection suggests that SBCL might be compiling each form in the PROGN form separately.
[15:19:43] <hayley> This would presumably reduce the size of forms to compile, and thus any super-linear algorithms used in the compiler would not be as slow. (From my own observation, I think there are some algorithms which are super-linear in runtime.)
[15:19:50] *** Joins: rogersm (~rogersm@90.166.177.48)
[15:22:37] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[15:24:50] <shka> jackdaniel: i may actually do what you recommended eventually, because lack of portable flamegraph (or flamegraphs, period) is seriously annoying
[15:25:38] <shka> should such code be merged into metrics or is it out of scope?
[15:26:54] <jackdaniel> I think that you should make a separate project. I've only fixed some issues and ported the system to today implementations; I consider the project finished
[15:27:19] <jackdaniel> (on my part)
[15:27:20] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:3854:9ecf:d1a:a062)
[15:27:24] <shka> jackdaniel: got it
[15:27:51] <shka> but it is nice to have place to start regardless
[15:29:18] <phantomics> hayley: strange thing is, all the invocations in the main test set are also inside a progn, and that takes no time to compile. So the cause for the compile time is mystifying.
[15:30:19] <jackdaniel> when forms are inside the function then the compiler may i.e analyze whether some local functions doesn't escape the invocation dynamic extent
[15:30:27] <jackdaniel> and jazz like that
[15:30:34] <hayley> To my knowledge, it compiles A, then compiles B, then C, rather than compiling (progn A B C)
[15:30:41] <phantomics> Also, the April code in most of those tests is super simple, basically just "call this function on a few values." Some of the referenced functions are quite complex, but those were already compiled. Is there a reason that compiling code that references certain functions would cause those functions to be recompiled?
[15:30:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:31:32] <hayley> Do you inline any functions?
[15:31:48] <phantomics> Ok, so it may be analyzing the functions to check whether they affect dynamic vars is what you're saying
[15:32:32] <phantomics> In the test code there are a few inline functions, but they're all quite simple
[15:32:56] <phantomics> Now the other thing occurring to me is that the demo test sets I'm working on are compiling outside the main April package
[15:33:26] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:3854:9ecf:d1a:a062) (Ping timeout: 245 seconds)
[15:33:33] <phantomics> They use functions from the April package to process values and call functions that are defined in another package. I don't know if that could be related
[15:34:21] <phantomics> Although all April code interacts with packages outside the main April package, since April creates dedicated packages to use as its workspaces
[15:36:46] *** Joins: pjb (~pjb@user/pjb)
[15:36:58] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:37:38] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:39:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[15:49:12] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[15:49:56] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:51:09] *** Joins: heisig (~heisig@131.188.6.20)
[15:58:07] *** Joins: kadir (~kadir@78.178.105.36)
[16:00:32] *** Joins: didi (~user@user/didi)
[16:05:08] <didi> I want to define a SETF method that works like GETHASH in (incf (gethash key table 42)), i.e., I can pass a default value that will be used if no key already exists. I can define a SETF method like (defmethod (setf method) (new-value ... &optional default) ...), but the issue is that I don't use the variable `default' in my SETF method, so I have to ignore it with (declare (ignore default)). Is there another way to define a SETF method
[16:05:08] <didi> so I don't need to ignore the variable `default'?
[16:07:05] <hayley> Why doesn't (incf (gethash key table 42)) work again?
[16:07:13] <shka> it does
[16:07:15] <didi> hayley: It does.
[16:07:43] <shka> didi: simply use ignore, it is fine
[16:07:54] <didi> shka: Oh, OK. Thanks.
[16:08:02] <didi> I thought I was doing something wrong.
[16:14:34] *** Quits: enzuru (~user@ool-45750508.dyn.optonline.net) (Remote host closed the connection)
[16:14:47] *** Joins: enzuru (~user@ool-45750508.dyn.optonline.net)
[16:14:53] <phantomics> Nah, sometimes arguments are present that you don't need in which case you can ignore them, especially when doing things with macros
[16:15:29] *** Quits: guthur (~guthur@149.167.145.129) (Quit: Client closed)
[16:18:50] * didi nods
[16:27:47] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[16:33:00] *** Parts: kadir (~kadir@78.178.105.36) (WeeChat 3.3)
[16:33:55] *** Quits: Posterdati (~posterdat@host-87-3-210-39.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[16:38:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:40:48] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:43:45] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:47:35] *** Joins: Posterdati (~posterdat@host-80-183-118-167.business.telecomitalia.it)
[16:51:14] <Jing> Hi, I encountered a problem with a package which is not available via Quicklisp: I downloaded the package cl-https-everywhere from GitHub, and then in the REPL I loaded it with asdf:load-asd. And then I try it call "(cl-https-everywhere:rewrite-uri ...)" the debugger said "Undefined function REWRITE-URI called with arguments ("...")". So I was wondering that what caused it?
[16:52:19] <Jing> I also called `use-package`
[16:52:33] <jackdaniel> Jing: are you certain that rewrite-uri is a function defined in the package cl-https-everywhere ?
[16:52:38] *** Quits: didi (~user@user/didi) (Ping timeout: 260 seconds)
[16:53:10] <Jing> @jackdaniel Yes: https://github.com/ruricolist/cl-https-everywhere/blob/master/package.lisp
[16:53:36] <Jing> It's the only function that this package exports
[16:53:38] <jackdaniel> ah, load-as
[16:53:42] <jackdaniel> load-asd doesn't load the system
[16:53:45] <jackdaniel> it loads only its definition
[16:54:11] <jackdaniel> try (asdf:load-system "cl-https-everywhere")
[16:54:27] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[16:54:52] <jackdaniel> mind that the link that you gave contains only the package definition - what I see there is that rewrite-uri is indeed an exported symbol, but nothing about whether it is a function
[16:55:16] <jackdaniel> rewrite-uri is defined here: https://github.com/ruricolist/cl-https-everywhere/blob/master/rewrite.lisp#L27
[16:55:24] <jackdaniel> (indeed, in said package)
[16:56:20] <jackdaniel> what is somewhat puzzling is that you've typed (cl-https-everywhere:whatever) before loading the system and it did not complain that the package doesn't exist (and it doesn't exist because you haven't loaded the system)
[16:58:21] <Jing> I think I may have try `(load XXX.lisp)` some time before
[16:58:26] <Jing> I am still trying your solution
[17:03:19] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[17:05:37] *** Joins: Jing_ (~hedgehog@2604:a840:3::1033)
[17:05:38] *** Quits: Jing (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[17:06:53] <Jing_> @jackdaniel Thank you. I think it's working now. So to summarize, one should `asdf:load-system` with packages downloaded online in the REPL?
[17:09:20] <jackdaniel> the word package may be a bit misleading
[17:09:48] <jackdaniel> a "package" in common lisp is something like a namespace, a "system" in common lisp is like a library
[17:10:37] <jackdaniel> the usual term "package manager" in linux or in languages like python probably gave you that impression
[17:10:44] *** Joins: nature (~nature@45.32.235.173)
[17:10:58] <jackdaniel> a "common lisp" equivalent would be a "system manager"
[17:11:38] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:cfc:4250:3de5:1a9b) (Quit: Konversation terminated!)
[17:13:32] <Jing_> Thanks. So in REPL I should use the term "system", but in `defpackage` when I use `:use` or `:import` I should treat it like a namespace?
[17:13:34] *** Joins: s-liao33 (~s-liao@101.86.103.113)
[17:13:38] *** Quits: s-liao33 (~s-liao@101.86.103.113) (Client Quit)
[17:13:56] *** Joins: s-liao61 (~s-liao@101.86.103.113)
[17:14:21] <jackdaniel> in the file foobar.asd you have a form defsystem
[17:14:36] *** Quits: s-liao61 (~s-liao@101.86.103.113) (Client Quit)
[17:14:44] <jackdaniel> this defines a library (something you load with asdf or with quicklisp)
[17:14:46] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[17:14:57] *** Joins: s-liao (~s-liao@101.86.103.113)
[17:15:27] <jackdaniel> in packages.lisp you may see (defpackage foobar …), that means that a package is created - you may use it in your program etc
[17:15:43] <jackdaniel> systems and packages are different entities. you may have multiple packages in one system
[17:15:43] *** Joins: Guest55 (~Guest55@093105011126.gdansk.vectranet.pl)
[17:15:58] *** Quits: Guest55 (~Guest55@093105011126.gdansk.vectranet.pl) (Client Quit)
[17:16:18] <jackdaniel> (and it is not uncommon that a system has a different name than a package)
[17:18:05] <jackdaniel> I know that this sounds like a mess and I wouldn't argue hard that it isn't - it is a frequent point of confusion for people learning common lisp
[17:19:46] <Jing_> You are right, I didn't notice "defsystem" in the asd
[17:19:52] <Jing_> Thank you for the clarification
[17:20:34] <jackdaniel> sure
[17:21:54] <jcowan> rotateq: On the other hand, Teach Yourself Scheme In Fixnum Days is excellent.  Of course, that's a bit longer than 24 hours.
[17:23:49] <jackdaniel> I take that it is easier to learn scheme on 8-bit chip then
[17:24:05] <jackdaniel> if we tag with 2 bits then it should take little more than 2 months
[17:24:24] *** Joins: Bike (~Bike@71.69.170.70)
[17:24:24] *** ChanServ sets mode: +o Bike
[17:24:32] *** Quits: heisig (~heisig@131.188.6.20) (Ping timeout: 240 seconds)
[17:25:16] <jackdaniel> and here I am, considering this joke funny ,)
[17:26:36] * jcowan chuckles
[17:28:23] <jcowan> The Scheme-79 chip had 32 bits: 24 bit value, 7 bit type, 1 mark bit.  It's the direct ancestor of MIT Scheme, which even has a "microcode" directory, and is why the minimum size of a fixnum is 24 bits.
[17:28:45] *** Quits: nature (~nature@45.32.235.173) (Quit: Lost terminal)
[17:33:02] *** Quits: OlCe (~user@amontsouris-652-1-130-32.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:33:04] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:42:43] *** Joins: heisig (~heisig@131.188.6.20)
[17:42:48] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Quit: Leaving)
[17:43:37] <shka> jackdaniel: it was a pretty funny
[17:43:40] <shka> joke
[17:44:34] <jackdaniel> tell me more, most of these gems encounter a deafening silence :)
[17:50:32] <shka> well, i usually visit this channel only when i am having problems with CL and I am looking for help
[17:50:42] <shka> so...
[17:58:24] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[18:00:56] *** Joins: s-liao (~s-liao@101.86.103.113)
[18:02:12] *** Joins: OlCe` (~user@lfbn-nic-1-526-60.w90-118.abo.wanadoo.fr)
[18:04:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:04:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:07:18] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c5a4:eaf2:add7:ad94)
[18:08:41] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[18:21:42] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:24:57] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Quit: ERC (IRC client for Emacs 26.3))
[18:33:50] *** Quits: BottomType (~BottomTyp@31.217.246.214) (Quit: Client closed)
[18:36:53] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[18:38:13] *** Quits: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae) (Ping timeout: 250 seconds)
[18:38:46] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:44:47] *** Quits: heisig (~heisig@131.188.6.20) (Read error: Connection reset by peer)
[18:46:48] *** Joins: nature (~nature@45.32.235.173)
[18:55:43] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:57:21] <jackdaniel> I have a constant session for the very same reason
[19:03:23] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[19:07:07] *** Joins: frgo (~frgo@185.144.83.11)
[19:09:36] *** Joins: ym (~ym@217.107.106.229)
[19:17:01] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[19:17:14] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 244 seconds)
[19:23:26] *** Quits: utis (~utis@vpn-client105.uio.no) (Ping timeout: 260 seconds)
[19:31:54] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[19:33:14] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:33:24] *** Joins: X-Scale` (~ARM@46.50.3.203)
[19:35:17] *** X-Scale` is now known as X-Scale
[19:38:05] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[19:40:55] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Quit: Leaving)
[19:43:17] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:46:25] *** Joins: Oladon (~olad@98.43.81.226)
[19:49:45] *** Quits: frgo (~frgo@185.144.83.11) (Remote host closed the connection)
[19:50:06] *** Joins: utis (~utis@84.208.165.160)
[19:50:13] *** Joins: mingus_ (~jan-magnu@auth-147-53.anyconnect.uib.no)
[19:50:15] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:a0cb:a0d:33d8:39ff)
[19:50:42] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:a0cb:a0d:33d8:39ff) (Remote host closed the connection)
[19:51:57] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:a0cb:a0d:33d8:39ff)
[19:53:31] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:a0cb:a0d:33d8:39ff) (Remote host closed the connection)
[19:57:14] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[19:57:27] *** Quits: Jing_ (~hedgehog@2604:a840:3::1033) (Remote host closed the connection)
[19:58:04] *** Joins: Jing (~hedgehog@2604:a840:3::1033)
[20:01:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:09:00] *** Joins: Bike (~Bike@71.69.170.70)
[20:09:00] *** ChanServ sets mode: +o Bike
[20:22:33] *** Quits: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[20:22:46] *** Joins: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae)
[20:26:08] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:30:27] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:43:43] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c5a4:eaf2:add7:ad94) (Remote host closed the connection)
[20:44:45] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2e5d:c24e:9b07:51fd)
[20:48:54] <Guest74> Is there any reason to choose a single float over a double besides ease of writing?
[20:49:22] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:49:48] <jackdaniel> some implementations make a single float immediate value on 64bit
[20:50:16] <jackdaniel> double float wouldn't fit in 60 bits
[20:50:46] <Guest74> interesting, any idea which implementations or anyway to find that out within the system?
[20:50:54] <jackdaniel> of course sufficiently haha compiler will do unboxed operations when it has enough type information
[20:50:57] <jackdaniel> s/haha/smart/
[20:51:26] <jackdaniel> surely ccl, not sure about cmucl, sbcl - I think, ecl - planned
[20:52:11] <Guest74> Don't you wish people could give time as a present?
[20:52:35] * edgar-rft will write sufficiently haha code from now on only
[20:52:35] <jackdaniel> as a parent - I certainly do ,)
[20:53:40] <Guest74> and if I'm already dealing with doubles I'm guessing it's best to keep everything as doubles instead of converting to singles?
[20:54:21] <jackdaniel> I'd keep them without specifics and manipulate default-float-type for the reader
[20:55:36] *** Joins: Catie (~user@user/catie)
[20:56:03] <Guest74> interesting, I'll try that out.
[20:58:43] <Guest74> I'm trying to decide whether to have my colour interpolators work on singles or doubles.  Though not sure that will change anything about them being slow as ass.
[21:00:57] <jackdaniel> use fixnums
[21:01:23] <Guest74> for passing in a t between 0 and 1?
[21:02:13] <jackdaniel> scale it to some reasonably big integer
[21:02:18] <jackdaniel> but oh well, whatever suits you
[21:02:43] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Quit: Connection closed)
[21:04:52] <Guest74> I have no position on how to do it.  Except having to accept values from other libraries that are between 0 and 1, whether single or double.
[21:04:57] <White_Flame> how many operations do your color operations go through that floating point error is a concern?
[21:05:26] <White_Flame> single-floats are 7-8 digits of precision, 10-bit color is barely 4 digits
[21:05:48] <Guest74> I'm not sure it is a concern yet, haven't done any tests for that.  But dealing mainly with 16bit colours.
[21:05:51] <White_Flame> and 16-big color is just 5
[21:05:57] <White_Flame> *bit
[21:05:58] <Guest74> mainly concerned with speed.
[21:06:17] <White_Flame> on sbcl?
[21:06:21] <Guest74> yes
[21:06:25] <Guest74> mainly
[21:06:39] <Guest74> i mean, i should probably consider other implementations.
[21:06:57] <White_Flame> ok, well then just using specialized arrays will probably get you most of the way, as type inference should keep all intermediate operations in a known numeric type
[21:07:10] <White_Flame> sbcl is basically fastest on the block (though slow compilation time)
[21:07:56] <Guest74> specialized arrays? like lookup tables?
[21:08:11] <White_Flame> (make-array ... :element-type 'single-float) will specialize the array to hold unboxed single floats
[21:08:17] <White_Flame> in sbcl
[21:09:08] <White_Flame> and then again, accesses to that array will spread type information to your math, which should easily feed optimization
[21:09:50] <Guest74> I might be dumb, i'm not understanding.
[21:10:16] <White_Flame> if you don't specialize the array, on a 64-bit machine, then the type of each entry of the array is T (ie, holds anything).  Entries in the array must have type tags to distinguish what they are
[21:10:34] <White_Flame> if you specialize the array, then they can hold literal smaller integers & floats without any per-element tagging
[21:10:37] <Guest74> but why am i putting floats in an array?
[21:10:56] <White_Flame> where are your colors coming from?
[21:11:00] <White_Flame> images? palettes? etc
[21:11:12] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[21:11:20] <Guest74> my colours are 16bit integers
[21:11:50] <White_Flame> from where?  your program only works on 1 color that the user inputs?
[21:11:51] <Guest74> of however many channels.
[21:13:27] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[21:17:15] <White_Flame> also, even with just a single color, if you have 4 channel color, that's 4 values, and would be reasonable in an array
[21:17:40] <White_Flame> if you make a struct with type specified slot, I don't believe it specializes it in the same way as arrays
[21:17:44] <White_Flame> or class
[21:19:54] <Guest74> I should probably clarify that the value between 0 and 1 I am accepting or using from/for other libraries is the t value for interpolation.
[21:20:10] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:20:35] *** Joins: Bike (~Bike@71.69.170.70)
[21:20:35] *** ChanServ sets mode: +o Bike
[21:20:44] <White_Flame> if you're splitting up your images/palettes/channels into separate functions handling only indiviudal numbers, then the iteration & function call overhead is probably going to be larger than any access styles
[21:21:00] <White_Flame> if you're talking about optimizing this, then you need to handle values in streaming batch
[21:21:18] <Guest74> colours are in specialized arrays of 16bit integers of however many channels.
[21:22:34] <White_Flame> so you're never storing the floats that you work with, but do int -> float processing -> int?
[21:22:35] <Guest74> granted sometimes i have to deal with 8bit.  but pretty much all colour operations are 16bit.
[21:22:57] <Guest74> yup
[21:23:29] <White_Flame> I might be oldschool in thinking, but handling 16 bit int values on a 64 bit machine, I wonder if fixed point operations would be faster than float
[21:23:45] <White_Flame> however, I think in modern processors, the FPU might be faster than the ALU chain for some things
[21:25:23] <Guest74> I think the consensus is, or was, that 16bit ints are better for color accuracy for multiple operations.
[21:26:06] <Guest74> though that point is moot if changing to different colour spaces.
[21:26:11] <White_Flame> in your case, assuming your transformations are contained within a single function body, the intermediate values might just stay in registers and never hit memory anyway, regarding float sizes
[21:26:56] <White_Flame> whether you'd want single or float depends on how much error accumulation you have
[21:27:45] *** Joins: scymtym_ (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[21:27:59] <Guest74> I was mainly wondering if one was more performant than the other, then I would just make palette interpolators work with that.
[21:28:57] <Guest74> I'm actually not too concerned with accuracy in the palette interpolators because they do dumb interpolation to match other scientific visualization tools that do dumb interpolation.
[21:28:57] *** Quits: scymtym (~user@2001:638:504:20e0:a511:8858:bc9:9aae) (Ping timeout: 250 seconds)
[21:29:56] <White_Flame> double is probably slower than float, but given the pipelining width and very wide acceleration they have, who knows.  It'll be a per-CPU performance characteristic
[21:30:21] <White_Flame> in corroboration with how your specific code happens to push it
[21:31:47] <Guest74> welp, I guess I'll just do the usual and implement both and set the fastest as default.
[21:33:14] <Guest74> probably try jd's idea since that seems interesting.
[21:33:19] <Guest74> as well
[21:33:42] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:33:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:34:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:34:38] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:36:43] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[21:37:26] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
[21:38:55] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:39:12] *** Joins: amb007 (~a_bakic@96.132.22.93.rev.sfr.net)
[21:40:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:47:16] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[21:48:36] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:50:10] *** Quits: amb007 (~a_bakic@96.132.22.93.rev.sfr.net) (Ping timeout: 244 seconds)
[21:50:39] *** Joins: amb007 (~a_bakic@236.133.22.93.rev.sfr.net)
[21:51:02] *** Joins: hobo_ (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[21:51:29] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 268 seconds)
[21:52:38] *** Quits: Alfr (~Alfr@user/alfr) (Killed (iridium.libera.chat (Nickname regained by services)))
[21:52:43] *** Joins: Alfr (~Alfr@user/alfr)
[21:53:41] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[21:54:49] *** Quits: amb007 (~a_bakic@236.133.22.93.rev.sfr.net) (Ping timeout: 244 seconds)
[21:55:07] *** Joins: amb007 (~a_bakic@14.38.22.93.rev.sfr.net)
[21:58:28] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:59:02] *** Quits: amb007 (~a_bakic@14.38.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[21:59:46] *** Joins: amb007 (~a_bakic@31.135.22.93.rev.sfr.net)
[22:03:32] <shka> double-floats often need to be boxed
[22:04:27] <Guest74> about the ears?
[22:06:29] *** Joins: hobo (~hobo@69.218.33.204)
[22:06:35] *** Quits: hobo_ (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Read error: Connection reset by peer)
[22:16:59] <shka> Guest74: i mean, that's what jackdaniel meant about the bit size
[22:17:52] <shka> in practice, on the SBCL double-floats can be handled efficiently, but you will gonna need type declarations and plenty of inlines
[22:18:15] <Guest74> I was just making a jd joke.
[22:19:22] <shka> oh, ok
[22:20:03] <shka> and yeah, at least on ryzen, on the older version of sbcl double-floats could be actually faster then single-floats
[22:20:37] <Guest74> I think the initial response confirms I was successful.
[22:21:28] <Guest74> newer sbcl have slower doubles or faster singles?
[22:24:37] <shka> i don't know, but i was benchmarking like 2 years ago to say the least
[22:25:52] <shka> this still may the case, i don't know
[22:26:10] <Guest74> that's almost how long I've been out of it.  just started recovering from covid.
[22:26:30] <Guest74> So i've forgotten lots of stuff.
[22:26:48] <shka> sorry to hear that
[22:28:54] <Guest74> thanks, it's certainly been an experience.  Glad to be able to think enough to start coding again.
[22:36:09] *** Quits: amb007 (~a_bakic@31.135.22.93.rev.sfr.net) (Ping timeout: 244 seconds)
[22:37:20] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:39:03] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:53:39] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[22:56:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:57:36] *** Joins: Guest9216 (~Guest92@178-78-205-86.customers.ownit.se)
[22:59:12] *** Joins: cosimone (~user@93-34-133-23.ip49.fastwebnet.it)
[23:00:13] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:01:54] *** Quits: VincentV` (~user@212.241.25.80) (Read error: Connection reset by peer)
[23:02:13] *** Quits: Guest9216 (~Guest92@178-78-205-86.customers.ownit.se) (Client Quit)
[23:05:48] <mfiano> There is a reason cricket uses doubles, if that's what you're asking
[23:05:53] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[23:06:02] <mfiano> There is a reason cricket uses doubles, if that's what you're asking
[23:06:22] *** Joins: akoana (~ah@user/akoana)
[23:07:11] *** Quits: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net) (Quit: WeeChat 3.3)
[23:07:23] <mfiano> You will run out of bits very quickly with single floats when procedurally generating terrain down to a usable scale.
[23:07:45] *** Joins: Bike (~Bike@71.69.170.70)
[23:07:45] *** ChanServ sets mode: +o Bike
[23:08:03] <mfiano> iirc if you use doubles you could model a planet and scale in down to centimeter without data loss
[23:09:38] <Guest74> that's a good reason.
[23:09:50] <mfiano> cricket doesn't use doubles really either...well it does, but it changes the range
[23:09:56] *** Quits: rain3 (~rain3___@2a02:2f09:d10a:400:9e2f:eb47:e2ae:761d) (Ping timeout: 250 seconds)
[23:09:58] <mfiano> it uses 60 bit doubles
[23:10:14] <Guest74> but was mainly only concerned about mapping to colours for now.
[23:10:17] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[23:10:23] <mfiano> because the extra bits are almost meaningless and we didn't want to box them
[23:10:34] <mfiano> cricket already efficiently maps to colors
[23:10:47] <mfiano> it supports interpolating color gradient maps
[23:10:59] <mfiano> this is in the docs
[23:11:11] <Guest74> yes, i saw.  I had a more general solution, which is not very efficient.
[23:12:05] <Guest74> but was easy to implement. but now I'm thinking of changing it seeing how badly it did with cricket stuff.
[23:18:52] *** Joins: asarch (~asarch@2806:10ae:7:2cca:f61b:4cfd:2d42:1782)
[23:19:08] *** Joins: BottomType (~BottomTyp@31.217.246.214)
[23:19:34] <mfiano> If you use crickets image map instead of your own do-pixels, it batches the scanlines on multiple threads
[23:21:32] *** Quits: ym (~ym@217.107.106.229) (Ping timeout: 240 seconds)
[23:22:33] <Guest74> I'm not sure how that would work with clx.  but in general I'm looking for a general solution for all my visualization use cases.
[23:23:17] <Guest74> So sometimes colours need to be accessed by things like symbols.
[23:25:00] <asarch> If I have this: https://pastebin.com/NxuuMFzE
[23:25:09] <asarch> How could I inspect the value of a variable?
[23:26:32] <Guest74> I'm actually wondering if your approach would work as well for that case, or strings, etc...
[23:26:42] <Catie> asarch: You're in the debugger?
[23:27:01] <Guest74> though anything probably has to be better than constant hashing of a hash table.
[23:27:22] <asarch> I have those options
[23:27:55] <Catie> In the SBCL debugger, you can evaluate arbitrary code just like in the REPL proper
[23:28:09] <Catie> As long as the variable you want to inspect is in scope you can inspect it
[23:28:44] <Catie> You can view a backtrace by evaluating BACKTRACE
[23:29:08] <Catie> And you can move around stack frames with UP, DOWN, and FRAME <n> where n is the frame number you want
[23:29:24] <Catie> LIST-LOCALS will show you variables local to the current frame
[23:30:39] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[23:35:26] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[23:35:40] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[23:37:37] <asarch> Bingo!
[23:37:40] <asarch> Thank you!
[23:37:45] <asarch> Thank you very much Catie :-)
[23:38:18] <Catie> Any time! The debugger can be pretty opaque at times
[23:40:57] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:44:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:46:32] *** Parts: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz) ()
[23:46:41] *** Joins: yodudd (fbf95cc8f1@mail.nobodyhasthe.biz)
[23:48:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[23:50:08] <asarch> I see
[23:50:40] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92)
[23:50:41] <asarch> It was a misplaced ), it was at the end of the expression and it should be for the first argument of the function
[23:51:31] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 250 seconds)
[23:52:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:52:50] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[23:53:17] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:30f5:9848:95e4:c61b)
[23:55:42] *** Quits: euandreh (~euandreh@2804:14c:65c9:5161:2115:7c1d:3a3c:1b92) (Quit: WeeChat 3.3)
[23:56:43] *** Quits: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net) (Remote host closed the connection)
[23:57:17] *** Quits: asarch (~asarch@2806:10ae:7:2cca:f61b:4cfd:2d42:1782) (Quit: Leaving)
[23:57:36] *** Joins: Devon (~devon@pool-108-28-172-103.washdc.fios.verizon.net)
