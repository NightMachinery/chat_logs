[00:00:47] *** Joins: makomo_ (~makomo@user/makomo)
[00:00:52] <_death> in any case, at least SBCL's make-hash-table supports user-defined test/hash functions.. (documentation 'make-hash-table 'function)
[00:01:24] <Psybur> Ah I didnt think to see if sbcl had some special sauce. Nice
[00:05:35] <_death> it seems strange to me that you talk about "scale" here.. what is the path length with big datasets?
[00:06:58] <_death> and why do you think that'll be a bottleneck
[00:07:28] <Psybur> https://www.hackerrank.com/challenges/coin-change/problem
[00:08:04] <Psybur> Actually, this part of the problem might not even be the bottleneck youre right heh
[00:08:08] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:08:50] *** Joins: raeda (~raeda@72.49.219.33)
[00:12:09] <Psybur> Actually I think it is the bottleneck, the part where I make all possible paths finishes quick
[00:12:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:13:29] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[00:15:40] <mfiano> A "hash set" is a nested hash table, with the inner table having self-evaluating keys
[00:16:41] <Psybur> Yeah Ive got that worked out, now just trying to see how sbcl implements its hash function for lists, wondering if I have to override just :test or both the hash function and :test
[00:17:11] <_death> it's better to just use a 2d array there
[00:17:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:19:43] <mfiano> Psybur: the hash function is not an option in standard CL
[00:19:57] <mfiano> You would need a portability library for that
[00:21:56] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Remote host closed the connection)
[00:22:02] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[00:22:12] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[00:23:16] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:23:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[00:24:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:27:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:28:22] <jmercouris> let's say I print an object, and I get something like #<DEMETER::RSS-FEED {100BC74913}>
[00:28:27] <jmercouris> is there ANY WAY to inspect that object?
[00:28:31] <jmercouris> it is not highlighted red in slime
[00:28:44] <jmercouris> but surely I can do something with the 100BC74913?
[00:30:46] <Josh_2> slynk-mrepl:copy-to-repl-in-emacs ?
[00:31:00] <Josh_2> Or break and copy it manually
[00:32:13] <jmercouris> maybe
[00:32:30] <mfiano> That requires the user to edit their Emacs configuration, since it is a security hazard
[00:32:48] <Josh_2> Sure but you can setq it in scratch just for that session
[00:33:05] <mfiano> They didn't specify if they were writing a library
[00:33:13] <mfiano> or an application
[00:34:00] <Josh_2> Ima guess that jmercouris is hacking on nyxt
[00:34:13] <White_Flame> jmercouris: you can set a variable to that object instead of printing it, then it should be more "live"
[00:34:30] <White_Flame> and if you need a series of values, push to a variable
[00:34:37] <mfiano> Then their best option is Clouseau
[00:34:58] <jmercouris> I guess I could set a variable
[00:35:06] <White_Flame> also, no you can't do anything with the 100BC74913 reliably, as GC might have happened in the meantime and moved it
[00:35:08] <jmercouris> yeah, I'll probably push to a list
[00:35:52] <jmercouris> thanks for the input
[00:36:08] <White_Flame> another option, since this likely isn't a return value, is setting a breakpoint
[00:37:03] <White_Flame> especially as you can surround that break with conditionals
[00:37:22] <mfiano> If you BREAK after printing, the debugger should have a stack frame that you can click on the local rss feed object
[00:37:45] <mfiano> print may not even be necessary, if the object is already a local
[00:37:46] <pjb> jmercouris: (inspect (print object0)
[00:37:49] <pjb> jmercouris: (inspect (print object))
[00:38:47] <pjb> jmercouris: you can walk all the data that you can access, until you find an object that prints with the same identifier. Then you could assume it's the same object.
[00:39:36] <pjb> jmercouris: however, a general solution to this problem is not possible, if you don't have the source of all the code you've loaded in the image: there's no standard way to walk the slots of a structure.
[00:40:26] <jmercouris> I have the source...!
[00:43:54] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[00:48:51] <pjb> Then with the source, you can loop over the accessors of structures.
[00:49:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:49:52] <Josh_2> I have 8 packages or so that have a few conflicting external symbols, however in every case the conflicting symbol is a method, whats the best way to resolve this?
[00:49:54] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:52:12] *** Lord_of_Life_ is now known as Lord_of_Life
[00:52:46] <mfiano> By not using :USE
[00:53:11] <mfiano> That is a code smell in my opinion. Use PLNs
[00:53:18] <Josh_2> PLN?
[00:53:29] <mfiano> package-local nicknames extension
[00:53:33] <Josh_2> I see
[00:54:08] <Josh_2> Obviously I just want to use :use, that was my design intention considering its just a bunch of API calls
[00:54:08] *** Quits: pve (~pve@37-33-64-6.bb.dnainternet.fi) (Quit: leaving)
[00:54:18] *** Joins: pve (~pve@37-33-64-6.bb.dnainternet.fi)
[00:54:18] *** Quits: pve (~pve@37-33-64-6.bb.dnainternet.fi) (Client Quit)
[00:55:01] <mfiano> That is really a bad style.
[00:55:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:55:32] <mfiano> Ignoring your issue, it also makes code much harder to understand, and code is read much more often than it is written.
[00:55:46] <mfiano> I actually refuse to read code that uses :USE
[00:56:13] <mfiano> (besides (:use :cl))
[00:56:38] <copec> I actually only picked up on that point like six months ago with my own stuff
[00:57:05] <copec> lone programmers are slow on the up-take :-P
[00:57:11] <Josh_2> well why would I want to go through an manually import every function and method that are just a bunch of API calls?
[00:57:24] <mfiano> You don't import anything
[00:57:25] <copec> Use the package:symbol
[00:57:27] <etimmons> Speaking of PLN, anyone know if there's been an attempt to get it into CMUCL?
[00:58:03] <Josh_2> Well I could use the package:symbol but I am trying to just create a single package that contains all of the API calls which are each divided into their own packages
[00:58:14] <copec> https://lispcookbook.github.io/cl-cookbook/packages.html#package-local-nicknames-pln
[00:58:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:58:42] <mfiano> That is orthogonal
[00:58:52] <Josh_2> So the user (me) would just import from that one package rather than the 10 various packages
[00:59:02] <mfiano> Still orthogonal
[00:59:47] <Josh_2> Yeh still full of right angles
[00:59:51] <copec> (It's the same issue whether importing or using pln's)
[01:00:14] <copec> you use pln's in your one package to rule them all, and you use pln's in the packages that use that
[01:00:25] <Josh_2> alright
[01:00:29] <Josh_2> i'll look into pln
[01:01:25] <copec> also, pln maps external package to internal nickname, so it makes it easier to swap dependencies
[01:01:40] <mfiano> Yes
[01:02:19] <jmercouris> I have a function that writes to a stream, is there a handy little macro I can use to write that stream to a string?
[01:03:22] <jmercouris> read-stream-content-into-string
[01:03:26] <jmercouris> finally remembered
[01:03:35] <mfiano> (alexandria:read-stream-content-into-string)
[01:03:38] <mfiano> yes
[01:03:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:04:47] <mfiano> By the way, can I get any of you Lispers to partake in this little experiment? https://www.reddit.com/r/lisp/comments/q2esnh/share_your_bookshelfves/?
[01:05:05] <Josh_2> get-output-stream-string ?
[01:05:06] *** Quits: NeoCron (~NeoCron@p200300c4cf16e40089f16fffa0577f49.dip0.t-ipconnect.de) (Quit: Leaving)
[01:05:27] *** Joins: NeoCron (~NeoCron@p200300c4cf16e40089f16fffa0577f49.dip0.t-ipconnect.de)
[01:05:39] <Josh_2> mfiano: not a chance I'm gonna do that
[01:06:33] <mfiano> That's fine. Not everyone has a nice library.
[01:06:41] <jmercouris> Ay yai yai 11
[01:08:06] <copec> mfiano, are you @lukego? I'm @copecog, my bookshelves are packed up because I had to move my office out to move another room in so that another room can be reconstructed from flooding
[01:08:07] <copec> heh
[01:08:16] <mfiano> copec: No
[01:08:56] <mfiano> But that's unfortunate. Take your time, the thread might still be active when you can
[01:11:52] <jmercouris> I give up for now, cl prevalence is not doing so well for me today
[01:12:38] <Josh_2> I have a nice library :smirk: lots of lisp books
[01:13:42] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:21:46] *** Quits: patrice (~patrice@2603:301c:604:2a00:497b:b585:b1cb:7915) (Ping timeout: 245 seconds)
[01:23:38] <Psybur> Dang, even after realizing I can ignore paths where the next element is < the current one, and not even have to deduplicate paths this way, its taking forever to walk all the paths
[01:32:23] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:47:39] *** Quits: patrice__ (~patrice@2603:301c:604:2a00:f255:29f2:c2a4:cea8) (Quit: Leaving)
[01:54:41] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 245 seconds)
[01:59:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:07:02] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 265 seconds)
[02:12:06] *** Quits: frgo (~frgo@p200300deef0cee0031f0804abc79a7d2.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:12:36] *** Joins: frgo (~frgo@p200300deef0cee0031f0804abc79a7d2.dip0.t-ipconnect.de)
[02:27:17] <_death> Psybur: for what it's worth, I used a 2d array containing hash-tables, and a canonical key
[02:28:38] <Psybur> _death, I actually just figured out a way without having to worry about keeping track of paths, I figured out some optimizations you can use by sorting the coin denominations and not having to use lesser denominations when starting with higher ones
[02:28:56] <Psybur> It can find 7 billion combos in under a second now
[02:31:36] <_death> no doubt there are more sophisticated ways to solve it
[02:32:01] *** Joins: igemnace (~ian@user/igemnace)
[02:36:09] *** Quits: NeoCron (~NeoCron@p200300c4cf16e40089f16fffa0577f49.dip0.t-ipconnect.de) (Quit: Leaving)
[02:36:25] <Psybur> _death, here is my solution https://github.com/jrciii/hackerrank/blob/master/coin-change.lisp
[02:37:17] *** Joins: akoana (~ah@user/akoana)
[02:37:42] <Psybur> Took me a day to figure out the skipping lesser coins optimization heh (make-change remain (remove-if (lambda (x) (< x coin)) values))
[02:38:09] <mfiano> Psybur: You should _never_ define a special variable without earmufs.
[02:38:37] <mfiano> The consequences could be disastrous, since a lexical variable cannot shadow a special variable.
[02:39:01] <Psybur> Ah crap whoops, yeah I usually remember to add **, I realize I forgot with the first 2 vars
[02:39:11] <Psybur> I remembered after that heh
[02:40:43] <mfiano> Also all of those globals are needless, since they are state consumed by a single function and don't even need to be passed around
[02:40:48] <mfiano> At the very least, use a closure
[02:41:45] <mfiano> global variables that aren't used as dynamic variables make it hard to understand a program
[02:42:06] <Psybur> Got it
[02:42:35] <_death> I remember SICP had this problem btw
[02:43:12] <mfiano> Otherwise, good work. I see this is your first CL repository, so congrats
[02:43:26] <mfiano> I don't have time to make any algorithm-specific comments
[02:46:02] <mfiano> _death: Too many/useless globals? I actually never read that
[02:46:24] <_death> https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2
[02:46:36] <_death> Example: Counting change
[02:47:00] <mfiano> Oh
[02:48:12] <mfiano> I know some other Lisp book had it as well. Not sure if it was PCL of Clojure for the Brave and True
[02:48:30] <mfiano> s/of/or/
[02:49:12] <Psybur> Ok, fixed my code https://github.com/jrciii/hackerrank/blob/master/coin-change.lisp
[02:49:48] <Psybur> I found this problem by searching for dynamic programming problems on hacker rank, and checking if there was a CL environment for the problem
[02:55:09] <Psybur> The way the book handles denominations is pretty confusing. I think its easier to think of it as a list. But the way they did it as a function is probably more efficient
[02:56:58] <Psybur> Solving DP problems is giving me nightmares of my CS course in college heh The teacher had an auto grader and you got 3 tries to get it right or you got a 0 for the assignment
[02:58:20] <Psybur> I almost got a 0 for the capstone of the coding assignments for the whole program, some DP problem involving maze traversal. Had to be coded in C++. Good times.
[03:01:36] <_death> right, it would have been clearer to have it as a list in descending order.. then you'd just have (defun cc (amount coins) (cond ((= amount 0) 1) ((or (< amount 0) (null coins)) 0) (t (+ (cc amount (rest coins)) (cc (- amount (car coins)) coins)))))
[03:04:16] <_death> btw your solution seems to differ, (make-change 100 '(50 25 10 5 1)) => 40749
[03:04:33] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 265 seconds)
[03:07:04] <Psybur> hmm it passed the tests on the site, ill check this case out
[03:07:55] <_death> good luck.. sleepytime
[03:08:06] <Psybur> _death, did you try with the coins in asc order?
[03:08:29] <Psybur> My alg depends on that
[03:09:43] <copec> mfiano, The thing I'm finding myself do more is just to incorporate the alias package into the naming scheme, but I'm not sure how to. For instance, I wrote a package that does basic sets
[03:10:27] <copec> If I have set-p in the package, and I use a pln so it is just set, then when I use set:set-p it makes me want to rename it to something so it looks nice
[03:10:43] <copec> for instance I have set:union set:symm-diff etc.
[03:11:17] <copec> set:-p
[03:11:23] <copec> heh
[03:12:54] <copec> set:being-p
[03:15:24] *** Quits: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84) (Quit: rcirc on GNU Emacs 27.2)
[03:19:31] <Xach> copec: did you see the HTML generation library with a package name of <?
[03:19:52] <Xach> and functions like p>, ul>, etc.
[03:19:55] <mfiano> copec: I find that pretty foolish. PLNs are local to the package consuming the API. They can differ between your package and a user's package. Additionally, that would make renaming packages very tedious.
[03:20:23] <Xach> (maybe it was macros or syntax, but the trick was stuff like <:p>, <:b>, etc.
[03:20:26] <Xach> ))))
[03:20:38] <copec> ^That's funny
[03:21:23] <Xach> i also smiled at the function with a full symbol name of (iso:8859 ...)
[03:21:53] <Psybur> _death, I get 292. My code reads from stdin then sorts the denoms, then calls the make-change function with it.
[03:22:19] <copec> mfiano, I assume the internal name is going to remain the same, that if I were to change the package name I would just change the :local-nicknames
[03:23:51] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[03:27:51] <copec> Which library is it Xach? My search skills are failing me
[03:28:07] <mfiano> My point was an operator name should be self-documenting. THe PLN "SET" may already be used by the user, and so they would now have to either update all their 'set:' prefices so they can use 'set:' for your API, or choose something else. The former is more work to adopt your work. The latter may not be more readable, and code should always be readable.
[03:29:05] <mfiano> This is just my (probably unpopular) opinion, though.
[03:30:13] <copec> If I wrote something that someone else might use I would probably do that
[03:30:25] <Xach> copec: i don't remember, sorry.
[03:30:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 245 seconds)
[03:30:33] <Xach> it's hard to google that syntax, too
[03:30:41] <mfiano> I am also against names like SETH in Psybur's code, because it is not very descriptive of what it does.
[03:31:12] <mfiano> Most Lispers value descriptive names for variables and operators, unlike users of most other languages.
[03:35:01] <copec> Yeah, I generally do that, I'm just experimenting with incorporating part of the description into the pln for my programs consuming my own api
[03:40:34] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 250 seconds)
[03:45:11] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[04:05:29] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[04:12:54] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[04:20:20] <Psybur> mfiano, noted
[04:24:02] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[04:27:07] *** Joins: patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net)
[04:44:52] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[05:10:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:19:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[05:21:15] <Psybur> mfiano, fixed https://github.com/jrciii/hackerrank/blob/master/coin-change.lisp
[05:23:05] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[05:23:28] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[05:26:21] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[05:33:42] *** Joins: Oddity (Oddity@user/oddity)
[05:47:28] <Psybur> _death, so the order of the denominations actually doesnt matter, and I still get 292.
[05:51:41] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[05:59:25] *** Parts: akoana (~ah@user/akoana) (Leaving)
[06:00:34] *** Quits: prxq_ (~quassel@dynamic-077-012-169-187.77.12.pool.telefonica.de) (Ping timeout: 252 seconds)
[06:00:38] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[06:00:43] *** Joins: prxq (~quassel@x4db5b5a2.dyn.telefonica.de)
[06:19:11] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[06:19:13] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:27:53] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Quit: ERC (IRC client for Emacs 27.1))
[06:29:29] *** Quits: gaqwas (~john@dynamic-077-004-075-231.77.4.pool.telefonica.de) (Ping timeout: 265 seconds)
[06:29:33] *** Joins: srhm (~srhm@user/srhm)
[06:29:46] *** Joins: gaqwas (~john@dynamic-077-009-090-094.77.9.pool.telefonica.de)
[06:31:09] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:31:31] <beach> Good morning everyone!
[06:34:26] <beach> Josh_2: There is an interesting way of doing what you want that I don't think anyone pointed out.  You make an API package that contains only exported symbols, and no code has (in-package <that-API-package>).  Instead, each your 8 different code packages either :USE the API package or (better) use package local nicknames, so that API symbols are referred to as API:symbol.
[06:35:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:35:55] <beach> Josh_2: CLIM requires this organization in the specification, and that's where I learned it.  So I copied it for SICL, but for SICL, I just (:USE #:COMMON-LISP) since the API is that of Common Lisp.
[06:37:22] <Josh_2> Wait so this is like an inverse?
[06:37:39] <beach> Yes, very strange at first, but also the best way of doing it.
[06:37:41] <Josh_2> Each of my api would not export but instead use a package that exports the symbols it actually uses?
[06:38:03] <beach> Yes, exactly.
[06:38:17] <Josh_2> Okay, I'll give that a shot
[06:38:18] <Josh_2> Thanks
[06:39:18] <beach> Sure.
[06:46:15] <akater[m]> Is there a deep reason why Common Lisp doesn't support `(setf (if test place-1 place-2) value)`?
[06:47:28] <beach> Probably that it would make SETF arbitrarily complicated.
[06:50:50] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[06:56:28] <GreaseMonkey> that would be quite an awful thing to implement
[06:57:37] <GreaseMonkey> well ok, maybe not so horrible if one were to extend setf to expand macros
[06:57:44] <beach> Exactly.  Imagine (setf (let ((x ...)) (if ... place-1 place-2)) ...)
[06:59:02] <GreaseMonkey> unless one were to do macro expansions inside of setf, you'd be stuck with having to support it as (funcall #'(setf if) new test place-1 place-2)
[07:01:56] <beach> I think perhaps akater[m] imagines that places are first-class objects in Common Lisp, which is a common mistake.
[07:10:24] <Josh_2> beach: that worked thanks :)
[07:11:02] <beach> Josh_2: Sure.  Spread the word!  This is the best way!
[07:11:11] *** Quits: semz (~none@user/semz) (Ping timeout: 265 seconds)
[07:11:25] <beach> Most people seem to not think about that possibility, and most people haven't read the CLIM specification. :)
[07:12:27] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[07:14:23] <akater[m]> beach: > Imagine (setf (let ..) ..)
[07:14:23] <akater[m]> Does having expander for if implies there has to be an expander for (setf let)?
[07:15:14] <beach> akater[m]: No, but I can imagine someone like you wanting that later, and then someone who wants it for every special operator.
[07:15:38] <beach> akater[m]: And there would be no particular reason to allow for IF and not for the others.
[07:16:05] <beach> In fact, that is probably how the reasoning went that did not include it in the standard.
[07:18:15] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[07:19:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[07:23:32] *** Joins: semz (~none@user/semz)
[07:27:02] <akater[m]> I didn't say I want it.  It's just that Elisp has it, and it's convenient.
[07:28:33] <beach> I see.  Well the situation is very different.  Elisp does not have a standard to conform to, so it can do whatever it pleases.  When a standard is written, a lot of thought has to go into deciding what to include, what to exclude, and why.
[07:29:40] <beach> And you asked why the Common Lisp standard does not include it, so I was guessing that a lot of thought was given, and that the conclusion was that if IF were supported, then so should the other special operators.
[07:32:43] <beach> Also, given the usual complaints we see here about the standard, usually from newbies, I imagined a host of complaints of the type "I can do (setf (if ...) ...) but not (setf (let (..)...)), why does the standard not allow that?"
[07:34:12] *** Quits: patrice (~patrice@50-248-121-94-static.hfc.comcastbusiness.net) (Quit: Leaving)
[07:42:01] *** Joins: winning-luser (~wl@2601:8c1:181:1340::1b9c)
[07:45:07] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[07:54:29] <dieggsy> Is it possible to iterate over only symbols in the current package ? I thought do-symbols did this, but I guess it iterates over inherited too ?
[07:57:00] <mfiano> How is the compiler supposed to know what you mean by "in"?
[07:57:12] <mfiano> You would have to tell it to look for internal symbols yourself
[07:57:41] <mfiano> See FIND-SYMBOL
[07:58:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:06:04] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[08:06:16] <dieggsy> mfiano: ...huh, I found with-package-iterator, which appears to do what I want
[08:06:23] <mfiano> dieggsy: do-symbols is general in that it locates accessible symbols. It doesn't care if they are internal or inherited. If you want one of those, then put a test in the body form to filter them.
[08:06:53] <mfiano> (when (find-symbol (symbol-name x)) (print x)) or something
[08:06:57] <mfiano> err
[08:07:17] <mfiano> (when (eq :internal (nth-value 1 (find-symbol (symbol-name x)))) (print x)) or something
[08:09:43] <mfiano> yes that does work: (do-symbols (x) (when (eq :internal (nth-value 1 (find-symbol (symbol-name x)))) (print x)))
[08:09:52] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:16:10] <mfiano> Sorry that is wrong
[08:16:29] <mfiano> You want to check whether a symbol is either internal or external
[08:16:47] <dieggsy> mfiano: i think http://clhs.lisp.se/Body/m_w_pkg_.htm plus a loop is what i'm going with
[08:16:50] <mfiano> Implementations are allowed to add more accessibility types, so don't check for "not inherited"
[08:17:27] <dieggsy> if i specify :internal and :external with that macro, it seems to avoid inherited symbols
[08:17:42] <mfiano> Sure that is one way. Probably simpler and less code to use do-symbols
[08:19:16] <mfiano> The second example on that page gives the exact code you are looking for
[08:19:48] <mfiano> Looking at it, I think my do-symbols form (modified as per my instructions) is simpler and easier to understand
[08:24:12] <mfiano> dieggsy: Compare the second example in that hyperspec with: https://gist.github.com/mfiano/3f133048a0f042002ecbd2b7b246669a
[08:25:36] <dieggsy> Hm, I might prefer the package iterator anyway. But I appreciate your help! Now I understand better how do-symbols works
[08:26:09] <mfiano> Yes, the important bit is there are multiple types of "accessibility
[08:26:11] <mfiano> "
[08:26:19] <mfiano> and the implementation is free to extend that definition
[08:26:37] <mfiano> In your case, you wanted 2 of the 3 standard types
[08:27:36] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[08:31:00] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[08:33:05] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[08:36:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[09:06:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[09:30:30] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[09:38:49] *** Joins: makomo (~makomo@user/makomo)
[09:39:20] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[09:47:38] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:07:12] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[10:08:26] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[10:11:59] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[10:12:38] *** Joins: amb007 (~a_bakic@187.37.22.93.rev.sfr.net)
[10:14:26] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:18:35] *** Joins: pve (~pve@188-67-158-96.bb.dnainternet.fi)
[10:19:33] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[10:21:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[10:22:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:33:41] *** Joins: selwyn (~selwyn@user/selwyn)
[10:36:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[10:38:47] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[10:38:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:42:24] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 265 seconds)
[10:44:29] *** Quits: amb007 (~a_bakic@187.37.22.93.rev.sfr.net) (Ping timeout: 245 seconds)
[10:45:13] *** Joins: amb007 (~a_bakic@218.14.23.93.rev.sfr.net)
[10:45:52] *** Joins: notzmv (~zmv@user/notzmv)
[10:47:12] *** kakuhen_ is now known as kakuhen
[10:48:23] *** Joins: cranium (~cranium@user/cranium)
[10:54:26] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[10:56:06] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[11:00:45] *** Joins: Th30n (~Th30n@cpe-94-253-167-165.zg.cable.xnet.hr)
[11:04:38] *** Quits: amb007 (~a_bakic@218.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:06:02] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:18:13] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[11:30:09] <pve> Hi! Does anyone know of a utility that will take an asdf system (or asd file) and produce a "loader" lisp file containing '(load "/some/lib/foo.fasl") (load "/some/other/lib/bar.fasl") ... (load /my-system/app.fasl")'?
[11:30:36] <pve> I.e. a file I could load without having to load a userinit file (that includes asdf and quicklisp init stuff)
[11:32:51] <beach> pve: I don't know of anything existing, but I programmed ASDF to "load" files into a SICL first-class global environment, and it wasn't that hard.
[11:33:34] <beach> You may want to study this code: https://github.com/robert-strandh/SICL/blob/master/Code/Boot/asdf-programming.lisp
[11:33:42] <pve> beach: so getting a list of fasl files in the correct order shouldn't be that hard?
[11:33:48] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[11:34:32] <jackdaniel> pve: you will need to hack into the 'plan' object I think
[11:34:33] <beach> No harder than the code on that page I would think.  Probably easier.
[11:34:45] <pve> beach: ok thanks, I'll check it out
[11:34:46] <jackdaniel> afair asdf constructs the plan for an operation and then executes it
[11:35:30] <pve> jackdaniel: aha, I'll try it out
[11:35:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:09] <mfiano> You can also take a look at POIU which extends ASDF with a new plan.
[11:36:24] <mfiano> plan strategy?
[11:36:37] <mfiano> I don't know the asdf vocabulary very well.
[11:36:58] <pve> I'd like to have a light-weight alternative to saving a core, which sometimes feels too heavy for a simple, tiny utility
[11:37:22] <pve> and this kind of loader file would suit me (and my ancient workstation) fine
[11:37:35] <mfiano> You might want to look into CLPM.
[11:37:57] <pve> mfiano: hmm that's a new one for me
[11:38:20] <mfiano> It is very nice. #clpm then for questions.
[11:38:35] <pve> alright, thanks
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:46:09] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 245 seconds)
[11:49:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[11:52:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[11:52:33] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Remote host closed the connection)
[11:53:45] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[11:58:59] <pjb> pve: asdf can do that itself.
[11:59:26] <pve> pjb: do you mean the "concatenate" ops?
[11:59:59] <pjb> Yes. Search for the various "monolithic" ops
[12:00:04] <pjb> in the ASDF Manual.
[12:00:46] <pve> ok, I had some vague idea that those existed, but never really used them
[12:01:21] <pjb> compile-bundle-op will create a single fasl file for each of the systems needed
[12:01:40] <pjb> monolithic-compile-bundle-op will create a single fasl file for the target system and all its dependencies, so you can deliver your entire application as a single fasl.
[12:10:58] *** Joins: cosimone (~user@151.14.38.15)
[12:20:49] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:23:16] *** Joins: brettgilio7 (~brettgili@x-node.gq)
[12:24:27] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 240 seconds)
[12:24:28] *** brettgilio7 is now known as brettgilio
[12:25:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:26:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:28:35] *** Joins: makomo_ (~makomo@user/makomo)
[12:31:11] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[12:44:33] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (Remote host closed the connection)
[12:44:53] *** Joins: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de)
[12:47:00] <pve> Here is my first attempt, it *seems* to do what I want :)
[12:47:02] <pve> https://github.com/pve1/make-system-loader/blob/master/make-system-loader.lisp
[12:48:05] <pve> It gives me a loader file that successfully loads with sbcl --script (quite quickly, too)
[12:48:20] <beach> Congratulations!
[12:48:21] <pve> (I decided to try to make this for the exercise)
[12:49:24] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[13:19:56] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:23:22] *** Joins: xaotuk (~sasha@89.110.231.41)
[13:54:13] <pve> CL doesn't specify that concatenating fasls must work, does it?
[13:59:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[13:59:54] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 245 seconds)
[14:01:03] *** Joins: amb007 (~a_bakic@250.14.23.93.rev.sfr.net)
[14:12:08] *** Quits: frgo (~frgo@p200300deef0cee0031f0804abc79a7d2.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:12:08] *** Quits: amb007 (~a_bakic@250.14.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:12:25] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:12:35] *** Joins: frgo (~frgo@p200300deef0cee0031f0804abc79a7d2.dip0.t-ipconnect.de)
[14:12:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:15:53] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:19:02] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[14:19:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:26:15] <pjb> pve: no, it does not. It says nothing about that.  But it's nice that it works with some implementations.
[14:34:45] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:35:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:37:42] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[14:38:39] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 245 seconds)
[14:40:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:40:35] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[14:44:39] <pve> pjb: Yeah, I kinda guessed it didn't. It is a nice feature.
[14:48:22] <pve> I also appreciate that SBCL makes fasls executable, which means I can compile my "loader" file and easily run it from ~/bin without a shell wrapper
[14:51:19] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[15:00:01] <phantomics> Hi, a question. I'm working on a system where data is stored in nested plists. I want to be able to set a "current path" creating a context where assignment operations will implicitly happen inside the nested plist corresponding to that path
[15:00:05] <phantomics> Here is an example
[15:00:50] <phantomics> (defvar pl '(:a 1 :b 2 :c (:d 1 :e 2 :f (:g 1 :h 2)))) ; sample list
[15:01:12] <phantomics> (set-path pl :c :f) ; the path is set
[15:01:37] <phantomics> (path-set :i 3) ; element assigned
[15:02:17] <phantomics> pl → (:a 1 :b 2 :c (:d 1 :e 2 :f (:g 1 :h 2 :i 3))) ; the element is added at the end of the 'pl :c :f' path
[15:03:48] <phantomics> Any advise on the most expedient way to make something like this work? I've been looking at rather complicated methods of wrapping variable references in macros
[15:07:13] <jackdaniel> I gather that path-set accesses some dynamic context because it doesn't take the result of set-path as an argument?
[15:15:00] <Nilby> phantomics:  I'm not sure about expedient, but I might make a dynamic var, e.g. *plist-path*, and a (with-path (pl) …) macro which sets it to the sublist, and make sure that path-set updates the *plist-path* when it has to change the first cons, but otherwise is mostly (setf (getf … Maybe that's what you've done already?
[15:18:02] <phantomics> That's more or less what I've done
[15:18:03] <Nilby> or rather (with-path (pl &rest path …). set-path could work, as long as you're okay with the scoping, nestability, etc.
[15:18:23] <phantomics> jackdaniel: correct that (path-set) accesses the content of the dynamic var set in (set-path)
[15:21:28] <Nilby> When I made such a thing, I was lazy and just used full path accessors.
[15:22:57] <Nilby> Of course concurrent mutators could be trouble as usual.
[15:24:22] *** Quits: cranium (~cranium@user/cranium) (Read error: Connection reset by peer)
[15:25:02] *** Joins: cranium (~cranium@user/cranium)
[15:25:36] <Nilby> I guess if you were very concerned about speed, you could have a path cache or something.
[15:27:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:27:59] <xaotuk> phantomics: Try something like this, sorry for adding an additional parameter of path plist. https://pastebin.com/011EmyQ9
[15:28:57] <xaotuk> Looks like a school homework.
[15:29:21] <beach> xaotuk: You need to work on your indentation.
[15:29:41] <beach> ... and your variable naming.
[15:31:01] <xaotuk> beach: Thank you, I'll have a deep meditation on that.
[15:31:24] <pjb> phantomics: instead of using a global variable, I would encapsulate that abstraction in a CLOS object.
[15:31:24] <beach> I suggest using the right tools rather than meditation.
[15:31:30] <pjb> phantomics: the problem you have without a CLOS object, is that there are no list in lisp, no a-list, no p-list.  There are only cons cells.
[15:31:36] <pjb> phantomics: (class-of '(:a 1 :b 2)) #| --> #<built-in-class cons> |#
[15:31:43] <pjb> phantomics: so: (defclass p-tree-with-path () ((ptree :initarg :ptree :reader ptree) (path :accessor path)))
[15:32:25] <phantomics> Ok, so the storage format would be a custom object instead of a generic plist?
[15:32:49] <pjb> phantomics: the object would just be a wrapper, you could still use a plist inside (a ptree, since it's a plist of plist).
[15:33:01] *** Quits: pjb (~pjb@user/pjb) (Quit: ERC (IRC client for Emacs 27.2))
[15:33:01] <phantomics> Ok
[15:33:19] *** Joins: pjb (~pjb@user/pjb)
[15:33:33] <xaotuk> phantomics: Tell me if it worked for you.
[15:33:56] <phantomics> I'm writing for output from a compiler, so the Nilby approach is more or less what I'm doing, since I can wrap all variable references with a macro that applies the path if present
[15:34:55] <phantomics> pjb: the main problem with using an object is that I want the ptree objects I create to be easily usable outside of the context where they're created, for instance converting them to and from JSON
[15:35:45] <jackdaniel> (defun to-json (object) (to-json (ptree object))) ;?
[15:35:53] <phantomics> But I have control over how any references to variables are formatted, so I can just wrap their references in a macro that implements the list logic
[15:35:59] <jackdaniel> s/defun/defmethod/ etc
[15:36:28] <phantomics> jackdaniel you can certainly do that, but it creates an extra step to remember for someone receiving output from the system
[15:36:54] <pjb> phantomics: (ptree wrapper) -> (:a 1 …)
[15:37:00] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Ping timeout: 260 seconds)
[15:38:15] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[15:38:41] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[15:39:43] <jackdaniel> phantomics: if you want to export to json you need to call /something/ even on a plist
[15:40:14] <jackdaniel> so if that something recognizes your class object then you are set, do I miss something? user doesn't care
[15:41:36] <phantomics> The JSON converters take plists, so to convert from the object to a plist you need an extra step
[15:42:36] <jackdaniel> then tell users to call (phantomics-json-converter-with-extra-sauce …) instead of an operator you don't have control over
[15:48:01] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[15:58:47] *** Joins: NeoCron (~NeoCron@p200300c4cf18cd00433f901d5cf4f3d0.dip0.t-ipconnect.de)
[16:03:18] *** Joins: tfeb (~tfb@88.98.95.237)
[16:03:50] *** Joins: igemnace (~ian@user/igemnace)
[16:05:05] <phantomics> I could do that, but it adds a degree of inflexibility for not much gain as far as I can see. The user may want to use a variety of JSON converters, which they can but with more steps. I'll implement the system as I've been planning and if there are significant roadblocks I'll look into wrapping the plists in objects
[16:05:41] *** Joins: random-nick (~random-ni@87.116.183.117)
[16:07:36] <pjb> phantomics: actually, using a clos object has the advantage, even for client code, to be able to dispatch on in client methods.
[16:08:22] <pjb> phantomics: if the client receives data from different libraries and it's all just cons cells, he cannot define methods dispatching on them. But if the different libraries return objects of different classes, then methods can be written.
[16:08:31] <phantomics> Right, I can configure it to intelligently handle certain types of interaction
[16:08:51] <pjb> Just provide a simple method to return the plist, and you have the best of both worlds.
[16:09:01] <phantomics> That's an interesting point
[16:09:38] <pjb> If we could subclass cons, that'd be the best…
[16:09:39] <phantomics> I was mulling over what kind of plists to use, because I typically use keywords as the keys but in that case importing arbitrary JSON creates an opportunity for a type of DOS attack
[16:10:18] <phantomics> Where the attacker sends JSON with tons of unique keys that gobble memory when they are instantiated in the keyword package
[16:10:25] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[16:10:28] *** Joins: patrice (~patrice@2603:301c:604:2a00:978:548c:bb05:9859)
[16:11:06] *** Joins: makomo_ (~makomo@user/makomo)
[16:11:11] <tfeb> I'd intern things like that somewhere you csn drop them...
[16:11:24] <phantomics> But I could create classes to wrap different types of plists which could be identified as less secure (and faster) and more secure (suitable for environments with arbitrary input)
[16:12:37] <tfeb> ... or just make a package and then delete it (or remove all its symbols) which is as fast as using keywords but slets you nuke them
[16:13:02] <pjb> I would say that json data is not lisp data, so it'd require its own specific data types.   You can still provide a lisp API to access the JSON DOM eg. (json-get json-dict :my-key)  even if internally, the json-dict doesn't use keywords (but, eg strings) for keys. string= is there for something.
[16:13:33] <pjb> but a (json-dict-keys json-dict) --> (list of strings)
[16:19:37] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[16:23:46] <phantomics> Make a specific type for JSON? Could work, could clear up some of the ambiguities in how things like nil, {} and [] are converted
[16:24:06] <phantomics> But that's probably a longer-range project
[16:25:05] <phantomics> Creating a package for JSON import would work if I'm working on the JSON data within a limited context, for instance if I import a JSON object, extract certain things from it and then I'm finished with it
[16:26:21] <phantomics> If I may want to keep the object around a while and its lifespan is more open-ended the package solution may not work as well
[16:27:30] <phantomics> The safest solution would probably be to use strings as keys: ("a" 1 "b" 2) but comparing the strings is O(n)
[16:30:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:31:32] *** Joins: Bike (~Glossina@71.69.170.70)
[16:31:32] *** ChanServ sets mode: +o Bike
[16:40:06] *** Quits: xaotuk (~sasha@89.110.231.41) (Ping timeout: 245 seconds)
[16:47:48] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[16:54:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 252 seconds)
[17:00:11] *** Joins: xaotuk (~sasha@net70-35-245-109.mbb.telenor.rs)
[17:07:12] *** Joins: srhm (~srhm@user/srhm)
[17:07:42] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:09:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:09:46] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:12:28] *** Quits: Th30n (~Th30n@cpe-94-253-167-165.zg.cable.xnet.hr) (Quit: WeeChat 3.3)
[17:14:01] *** Joins: makomo_ (~makomo@user/makomo)
[17:17:17] *** Quits: pve (~pve@188-67-158-96.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[17:22:00] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[17:28:29] *** Joins: pve (~pve@37-136-64-105.rev.dnainternet.fi)
[17:30:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[17:31:39] *** Quits: xaotuk (~sasha@net70-35-245-109.mbb.telenor.rs) (Ping timeout: 265 seconds)
[17:33:27] *** Joins: xaotuk (~sasha@net216-37-245-109.mbb.telenor.rs)
[17:34:00] *** Quits: cosimone (~user@151.14.38.15) (Quit: ERC (IRC client for Emacs 27.1))
[17:42:13] *** Joins: Cymew (~ante@host-217-213-140-42.mobileonline.telia.com)
[17:43:55] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[17:51:35] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[17:53:46] <pjb> phantomics: comparing string is actually quite fast in general.  Only when the strings are equal does it go to O(n). In general, they don't have the same size, so the characters are even not compared, or they mismatch early.
[17:53:52] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[17:54:11] *** Joins: makomo_ (~makomo@user/makomo)
[17:54:51] <phantomics> Right, the n is the number of characters to read until there is no match
[17:55:21] <phantomics> But comparing "string" to "string" is still O(6) vs O(1) for symbol comparison
[17:56:07] <phantomics> And I guess they'll mismatch at O(1) for different length strings, that's a good point
[17:56:10] <gin> is there a LOOP COLLECT trick that will collect only unique values? like (loop for x in '(10 20 30 10 10 20 20 30 30) unique-collect x) => (10 20 30) ?
[17:56:40] <pjb> gin: (loop for x in (remove-duplicates '(10 20 30 10 10 20 20 30 30)) collect x) ;-)
[17:57:17] <gin> pjb: thanks
[17:57:47] <phantomics> You don't even need to use the loop in that case correct? (remove-duplicates) alone gets what you want
[17:58:08] <pjb> indeed. let's assume there's some more processing.
[17:59:19] <gin> yes, I am getting those values from some processing, so I will use remove-duplicates on what (loop ...) returns.
[18:03:12] *** Quits: xaotuk (~sasha@net216-37-245-109.mbb.telenor.rs) (Ping timeout: 265 seconds)
[18:04:16] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 245 seconds)
[18:05:27] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[18:07:33] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[18:31:41] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[18:35:56] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[18:42:24] *** Quits: Cymew (~ante@host-217-213-140-42.mobileonline.telia.com) (Ping timeout: 245 seconds)
[18:45:00] *** Joins: johnjay (~pi@192.142.100.50)
[18:45:21] <johnjay> when I download something with quicklisp is it literally download source files?
[18:45:25] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[18:45:39] <johnjay> and then interpreting them from the ~/quicklisp folder?
[18:46:33] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Remote host closed the connection)
[18:47:26] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[18:50:06] *** Joins: makomo (~makomo@user/makomo)
[18:51:33] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Remote host closed the connection)
[18:51:55] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[18:52:22] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[18:54:23] <etimmons> johnjay: It is downloading source files. What happens then is up to you/your implementation, but for the most part they're compiled and then loaded.
[18:55:07] <johnjay> sbcl
[18:55:18] <johnjay> but i'm also trying to install and use CCL since I tried to install something in sbcl and it didn't work
[18:55:29] <johnjay> and the github page suggested CCL as an alternative
[18:55:47] <johnjay> it was using something called ros as well, i didn't get how ros is different from quicklisp
[18:55:56] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241) (Ping timeout: 245 seconds)
[18:57:01] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[19:19:16] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[19:29:41] *** Joins: makomo_ (~makomo@user/makomo)
[19:32:55] *** Joins: jealousm` (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[19:32:59] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Read error: Connection reset by peer)
[19:33:42] *** jealousm` is now known as jealousmonk
[19:37:12] *** Joins: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net)
[19:38:25] *** Quits: pok (~pok@user/pok) (Ping timeout: 252 seconds)
[19:39:06] *** Joins: pok (~pok@castor.klingenberg.no)
[19:39:06] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[19:39:06] *** Joins: pok (~pok@user/pok)
[19:46:21] *** Quits: pok (~pok@user/pok) (Ping timeout: 245 seconds)
[19:46:28] *** Joins: pok (~pok@castor.klingenberg.no)
[19:46:29] *** Quits: pok (~pok@castor.klingenberg.no) (Changing host)
[19:46:29] *** Joins: pok (~pok@user/pok)
[19:46:35] *** Quits: karlosz (~karlosz@135-180-102-220.fiber.dynamic.sonic.net) (Quit: karlosz)
[19:46:37] *** Quits: NeoCron (~NeoCron@p200300c4cf18cd00433f901d5cf4f3d0.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:47:40] *** Quits: frgo (~frgo@p200300deef0cee0031f0804abc79a7d2.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:48:09] *** Quits: dbotton (sid492350@lymington.irccloud.com) (Read error: Connection reset by peer)
[19:48:10] *** Joins: frgo (~frgo@p200300deef0cee00d17979c22d881345.dip0.t-ipconnect.de)
[19:48:18] *** Joins: dbotton (sid492350@id-492350.lymington.irccloud.com)
[19:48:49] *** Quits: utis_ (~utis@84.208.165.160) (Ping timeout: 252 seconds)
[19:49:15] *** Joins: NeoCron (~NeoCron@p200300c4cf18cd00433f901d5cf4f3d0.dip0.t-ipconnect.de)
[19:50:18] *** Quits: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[19:50:29] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 264 seconds)
[19:50:35] *** Quits: gabc (~gabc@user/gabc) (Ping timeout: 246 seconds)
[19:51:47] *** Quits: anddam (~anddam@user/anddam) (Ping timeout: 250 seconds)
[19:51:55] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[19:51:57] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 260 seconds)
[19:51:57] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Ping timeout: 260 seconds)
[19:51:58] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Ping timeout: 260 seconds)
[19:51:58] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 260 seconds)
[19:52:30] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Ping timeout: 260 seconds)
[19:53:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 245 seconds)
[19:54:41] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[20:02:32] *** Joins: d4ryus (~d4ryus@ppp-188-174-80-12.dynamic.mnet-online.de)
[20:02:54] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:03:29] *** Joins: amb007 (~a_bakic@234.14.23.93.rev.sfr.net)
[20:04:53] *** Joins: hisacro (~OBSD@my.displ.nl)
[20:06:58] *** Joins: gabc (~gabc@user/gabc)
[20:08:07] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[20:08:31] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[20:09:18] *** Joins: utis (~utis@84.208.165.160)
[20:11:32] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[20:13:01] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:df6f:9927:833b:d516) (Ping timeout: 245 seconds)
[20:14:36] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[20:15:14] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[20:18:06] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[20:22:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:22:24] *** Quits: amb007 (~a_bakic@234.14.23.93.rev.sfr.net) (Ping timeout: 265 seconds)
[20:22:41] *** Joins: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net)
[20:23:38] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[20:23:45] *** Joins: amb007 (~a_bakic@185.36.22.93.rev.sfr.net)
[20:23:48] <jmercouris> johnjay: ROS installs versions of Lisp
[20:23:55] <jmercouris> johnjay: Quicklisp installs Lisp libraries
[20:24:25] <jmercouris> johnjay: so, you might install CCL, SBCL, CLASP, etc with ROS
[20:24:41] <jmercouris> johnjay: and then you would use Quicklisp to install Alexandria, Serapeum, etc
[20:36:23] <pjb> cesarum
[20:45:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:46:25] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 2.9)
[20:53:08] *** Joins: selwyn (~selwyn@user/selwyn)
[20:54:26] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:23c9:ac71:30ff:298a)
[20:55:43] *** Joins: xaotuk (~sasha@89.110.231.41)
[20:59:36] <johnjay> jmercouris: i tried to install ccl with it but it gave an error about QL not being present so i gave up
[21:00:12] <johnjay> i was able to download and bootstrap and compile CCL from source i think. not sure what to do next
[21:02:52] *** Quits: amb007 (~a_bakic@185.36.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:04:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:04:54] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[21:10:19] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[21:11:25] *** Quits: winning-luser (~wl@2601:8c1:181:1340::1b9c) (Quit: Leaving)
[21:15:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:16:01] *** Quits: bwestbro (~user@quantum2.chem.olemiss.edu) (Remote host closed the connection)
[21:16:52] *** Joins: Skyfire (~pyon@user/pyon)
[21:17:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d)
[21:20:10] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:23c9:ac71:30ff:298a) (Ping timeout: 252 seconds)
[21:24:04] <pjb> johnjay: ccl doesn't need quicklisp to be installed! 1- install ccl, 2- install ql, 3- have fun.
[21:24:29] <johnjay> i know but that's what ros said
[21:24:34] <johnjay> i don't know how to use ros
[21:24:45] <johnjay> next i need to figure out how to get quicklisp into CCL
[21:25:17] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4) (Remote host closed the connection)
[21:26:08] <johnjay> apparently doing that (rebuild-ccl :full t) updated the lx86cl64 file to 1.12.1
[21:26:24] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:ae30:e39b:f4a:15d4)
[21:40:20] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[21:40:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:40:59] *** Joins: srhm (~srhm@user/srhm)
[21:41:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[21:41:10] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:5184:d9b4:8abc:7eae)
[21:43:26] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[21:46:09] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:54:00] *** Joins: anddam (~anddam@user/anddam)
[22:11:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:13:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:23:43] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 265 seconds)
[22:24:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:25:28] *** Joins: zazzerino (~user@2600:1700:6004:8470::49)
[22:26:20] <saltrocklamp[m]> i'm watching the atlanta funcprog study group talk on screamer - this is wild stuff
[22:27:11] <saltrocklamp[m]> i'm only about 30 minutes into the video so far, but i'm curious if anyone here has used this in a practical project & what they used it for
[22:27:50] <saltrocklamp[m]> it looks like it could be useful for certain kinds of simulation projects
[22:29:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:40:06] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[22:41:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:89dc:6a58:9f2a:ff3d) (Ping timeout: 260 seconds)
[22:42:44] *** Joins: johnjay (~pi@192.142.100.50)
[22:43:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:44:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:46:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:49:58] <patrice> saltrocklamp[m]: you have link for the video?
[22:51:57] <saltrocklamp[m]> https://www.youtube.com/watch?v=z7V5BL6W3CA
[22:52:30] <patrice> thanks!
[22:57:30] <lisp123> How much 'better' is SBCL vs. CMUCL apart from the build process?
[22:58:39] <hendursaga> lisp123: SBCL has one less letter to their name
[22:58:59] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[22:59:00] <lisp123> hendursaga: But CMUCL has https://www.cons.org as a domain ;-)
[22:59:07] <White_Flame> how active has CMUCL been?
[22:59:30] <lisp123> White_Flame: From what I can see its well maintained
[23:04:44] <patrice> saltrocklamp[m]: that talk about screamer reminds me of that talk from Gerald Jay Sussman about flexible systems: https://www.youtube.com/watch?v=cblhgNUoX9M
[23:06:55] <patrice> very interesting stuff, didn't know there was a CL library dedicated to exactly that
[23:10:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:14:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:28:11] <lisp123> Anybody got CMUCL working on MacOS? Getting an error because its an i386 executable
[23:35:01] <lisp123> Ah well, guess I shouldn't have upgraded to Catalina: https://gitlab.common-lisp.net/cmucl/cmucl/-/issues/75 --> CMUCL only works on older versions of MacOS
[23:36:06] <lisp123> minion: registration, please?
[23:36:07] <minion> The URL https://gitlab.common-lisp.net/users/sign_up?secret=1489e6dc will be valid until 20:15 UTC.
[23:41:24] *** Joins: tfeb (~tfb@88.98.95.237)
[23:45:05] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[23:45:45] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 265 seconds)
[23:49:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:50:09] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[23:53:38] *** Joins: Oddity (Oddity@user/oddity)
[23:56:35] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:56:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
