[00:02:07] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[00:11:16] *** Quits: sonny88 (~sonny@bras-base-london1483w-grc-39-65-95-42-44.dsl.bell.ca) (Quit: Client closed)
[00:16:16] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[00:19:12] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:20:28] *** Joins: badkins (~badkins@136.56.92.199)
[00:25:23] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[00:40:18] *** Joins: badkins (~badkins@136.56.92.199)
[00:40:26] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:09:32] *** Joins: taylan (~taylan@user/taylan)
[01:09:54] <amazigh> maybe a linter would be good thing?
[01:14:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:16:54] *** Joins: X-Scale (~ARM@25.55.43.5.rev.vodafone.pt)
[01:22:27] <wasamasa> a scheme linter?
[01:22:42] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:87a:5320:dfe8:b9a8)
[01:24:48] <wasamasa> if someone were to make one, I bet it would fail in the conception phase because nobody can agree how exclusion rules should work
[01:25:33] <wasamasa> the JS/python/ruby ones use magic comments, but this isn't considered good enough: https://srfi.schemers.org/srfi-220/srfi-220.html
[01:25:42] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:26:13] <wasamasa> > Whether magic comments are a horrible aesthetic blemish or an acceptable trade-off to embed external syntax into a programming language.
[01:28:04] <sham1> Magic comments are not good at all
[01:30:16] <wasamasa> go on
[01:31:35] <sham1> Need I elaborate?
[01:32:20] <sham1> Well, one thing I could say is an alternative. Run the linter within the interpreter you load the code to, and instead of special magic comments one could use magic macros
[01:33:32] <wasamasa> (magic-comment "content")
[01:33:38] <wasamasa> a dramatic improvement
[01:34:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:36:30] *** Joins: aeth (~aeth@user/aeth)
[01:42:44] <sham1> Well it is, it looks more natural
[01:45:37] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:87a:5320:dfe8:b9a8) (Quit: Leaving)
[01:46:01] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:87a:5320:dfe8:b9a8)
[01:50:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[01:50:37] *** Joins: klovett_ (~klovett@107.115.32.2)
[01:51:52] <Zipheir> How are magic comments related to linting?
[01:51:55] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[02:00:53] *** Joins: m455 (~m455@user/m455)
[02:44:08] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[02:44:36] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:55a5:e5ff:533e:cb0f)
[02:54:14] <pi0> https://dpaste.org/oBpW not sure why when i call it (my-summarize-tail '(1 (2 3) 4)) it gives me 9
[02:54:18] <pi0> and not 10
[02:56:30] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[02:59:13] <fizzie> You're forgetting whatever's already counted in `n` in the (list? (car ls)) case.
[03:01:19] <fizzie> Try substitution to see what's happening: (my-summarize-tail '(1 (2 3) 4)) => (my-summarize '(1 (2 3) 4) 0) => (my-summarize '((2 3) 4) 1) => (+ (my-summarize-tail '(2 3)) (my-summarize-tail '(4))) => (+ 5 4) => 9. Skipping a few steps.
[03:05:20] <fizzie> You might consider combining the list and non-list cases together, and having the only difference between them be which number you add to the accumulator: https://0x0.st/-hV_.txt
[03:09:52] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:10:29] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:10:44] <pi0> i noticed i should of used first
[03:14:03] <pi0> i think i see the issue
[03:14:19] <pi0> i should have car instead of cdr 
[03:14:23] <pi0> and that did it
[03:16:11] <fizzie> Uh. There's no single `cdr` in your code that you could change to `car` to fix it.
[03:18:14] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:33:57] *** Joins: winning-luser (~c@2601:8c1:80:70d0::756)
[03:39:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e520:1a5d:a0b:fffb) (Ping timeout: 252 seconds)
[03:42:14] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:42:52] *** Joins: badkins (~badkins@136.56.92.199)
[03:43:25] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:47:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[03:53:44] *** Joins: badkins (~badkins@136.56.92.199)
[03:55:26] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[03:57:50] <pi0> yes!! :D
[04:01:04] <pi0> fizzie: why is it that https://dpaste.org/GzKx (sort-length '((1 3 4)(2 4 6 6)(2 4 5 6 7 8))) works but (sort-length '(3 5 1 4 -1) does not work
[04:03:15] <Zipheir> The elements aren't lists?
[04:03:34] <Zipheir> What's the type of sort-length?
[04:08:03] <Zipheir> (length 3) is ill-typed and thus meaningless.
[04:09:50] <pi0> Zipheir: i think i am understanding what you mean
[04:09:57] <pi0> what i have is to sort elements 
[04:10:12] <pi0> but what i need is to sort lists
[04:10:53] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:87a:5320:dfe8:b9a8) (Ping timeout: 252 seconds)
[04:10:59] *** Joins: wnklmnn_ (~wnklmnn@2a02:908:4e2:9740:ea12:94c4:ecfe:d4d)
[04:12:22] *** Parts: pony (sid524992@smol/hors) ()
[04:12:28] <pi0> Zipheir: can you explain why its elements 
[04:12:31] <pi0> or what makes it elements
[04:14:00] <Zipheir> pi0: sort sorts the elements of a list.  If you (sort lis f) and f expects to compare objects of type t, then lis must be a list of ts.  Does that make sense?
[04:14:28] <Zipheir> (lambda (x y) (> (length x) (length y))) is only well
[04:14:30] <Zipheir> Oops.
[04:14:45] <Zipheir> ... only well-defined if x and y are lists.
[04:15:03] <Zipheir> So sort-length sorts lists whose elements are lists.
[04:15:27] <Zipheir> (By "elements of a list" I just mean the "things in the list")
[04:17:35] <Zipheir> Even though Scheme doesn't have a static type system, I find it helps to state what the types of things are before firing them at the REPL.
[04:19:20] <pi0> had to read it over twice
[04:19:30] <pi0> i think i am getting it
[04:19:47] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[04:22:06] <pi0> if i am understanding this i am sorting the wrong type expected 
[04:22:14] <pi0> if that what you mean
[04:23:14] <pi0> if the prompt states that "Sort by length of lists in descending order"
[04:23:22] <pi0> then it needs to be of type lists
[04:23:23] <pi0> right
[04:24:40] <Zipheir> Yes.
[04:25:20] <Zipheir> Which just means you can't use the same function to sort lists of integers and lists of lists of integers.
[04:27:33] <Zipheir> (Unless one goes the hyper-weakly-typed way of Perl and makes procedures work on absolutely anything...)
[04:33:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[04:34:46] *** Joins: livoreno (~livoreno@user/notzmv)
[04:49:00] <pi0> oh  hmmm
[04:52:58] *** Quits: wnklmnn_ (~wnklmnn@2a02:908:4e2:9740:ea12:94c4:ecfe:d4d) (Quit: Leaving)
[05:00:18] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:06:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[05:09:09] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:16:55] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:17:53] *** Joins: badkins (~badkins@136.56.92.199)
[05:22:45] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:28:08] *** Joins: livoreno (~livoreno@user/notzmv)
[05:32:08] *** Joins: notzmv (~zmv@user/notzmv)
[05:44:01] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[05:49:20] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[06:14:27] *** Quits: jao (~jao@45.152.183.54) (Ping timeout: 252 seconds)
[06:29:37] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[06:30:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:31:19] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[06:31:37] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[06:37:33] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[07:12:35] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[07:13:19] <pi0> how sure how this can be made to reverse order? https://dpaste.org/X1Qt
[07:15:24] *** Joins: badkins (~badkins@136.56.92.199)
[07:20:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[07:21:01] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:35:44] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[07:39:10] <ns12> jcowan: Regarding https://github.com/johnwcowan/r7rs-work/blob/master/ImplementationSupport.md I think you edited the wrong line. Gambit still does not support R7RS-small, but Guile now does support R7RS-small.
[07:39:41] <ns12> Also, for MIT Scheme, what does "libraries unreleased" mean?
[07:41:08] <jcowan> The R7RS library not yet released
[07:47:25] <jcowan> fixed; added syntax-rules missing from Gambit
[07:49:20] <ns12> jcowan: Doesn't MIT Scheme include R7RS-small libraries? https://www.gnu.org/software/mit-scheme/documentation/stable/mit-scheme-ref/R7RS.html
[07:52:02] <jcowan> I think "All names are bound in the MIT/GNU Scheme global environment" means that there are no library environments.
[07:53:29] <pi0> can someone help me 
[07:53:37] <pi0> trying to create a list in decesending order
[07:55:12] *** Joins: mononote (~mononote@user/mononote)
[07:59:33] <jcowan> pi0: https://srfi.schemers.org/srfi-132/ lets you sort lists in arbitrary ordar, but be sure to read the specs firsts.
[08:00:10] <pi0> is there an insert eq in drracket
[08:13:18] *** Joins: klovett (~klovett@107.115.32.2)
[08:17:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 252 seconds)
[08:18:25] *** Joins: opalvaults (~user@75-172-37-173.tukw.qwest.net)
[08:26:50] *** Joins: seninha (~seninha@user/seninha)
[08:28:09] *** Joins: klovett_ (~klovett@107.115.32.2)
[08:31:27] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[08:50:58] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:51:25] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:18:30] *** Joins: badkins (~badkins@136.56.92.199)
[09:23:01] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[09:25:30] <pi0> https://dpaste.org/xb2z
[09:25:49] <pi0> what is the necessity of 1?
[09:26:01] <pi0> what does that do
[09:28:51] <Zipheir> Looks like an error.
[09:29:22] *** Joins: shawnw (~shawn_w@2601:600:9b7f:d7f0:d0d6:6bc9:6acf:eb7e)
[09:29:42] <Zipheir> pi0: Can you supply the value that it's supposed to be?
[09:34:32] *** Joins: s-liao (~s-liao@101.86.99.70)
[09:45:56] <Zipheir> pi0: I think it would help you a lot to indent your functions consistently.  You might skim through http://www.sigwinch.xyz/misc/riastradh-lisp-style.txt for an outline of more or less mainstream Lisp style.
[09:54:41] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[09:55:33] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[10:03:04] <mdhughes> foldl applies a 2-arg proc to the first value and then each value of the lists… So you might not want 1 there.
[10:05:21] <mdhughes> It really helps to just read the docs for each function in the spec. Almost all questions are answered that way!
[10:05:42] <mdhughes> https://schemers.org/Documents/Standards/
[10:06:17] *** Joins: notzmv (~zmv@user/notzmv)
[10:07:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:09:15] *** Joins: seninha (~seninha@user/seninha)
[10:29:21] <ns12> jcowan: Thank you for the fixes.
[11:19:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[11:27:13] *** Parts: pi0 (~default@user/pi0) ()
[11:32:44] <wasamasa> Zipheir: have you ever used a linter for <insert popular programming language> and tried to suppress a false positive warning?
[11:33:01] <wasamasa> Zipheir: magic comments are how you do that, with the exception of java perhaps (they have annotations)
[11:52:03] <amazigh> The linter I had in mind is about portability issues
[11:52:19] <amazigh> but I guess I need more pratice before I can create one
[11:56:00] <amazigh> At this time, I have 4 failures out of 8, the failures are chicken, cyclone, mit, and gerbil, tha latter I can fix
[11:56:19] <amazigh> 4 failures and 8 success
[11:56:53] <amazigh> even if I had to delete test files, because the test runner can't special case scheme implementations
[11:58:25] <amazigh> even with the deleted files It Works
[11:58:38] <wasamasa> what is a linter about portability issues written in?
[11:58:46] <wasamasa> a portable language dialect?
[11:58:50] <amazigh> yes
[11:58:53] <wasamasa> I see an issue with that
[11:59:00] <wasamasa> the linter itself would malfunction :D
[11:59:18] <amazigh> Malfunction! Need input!
[11:59:20] <amazigh> :D
[12:00:20] <jcowan> I think that is why the original lint(1) program was abandoned in favor of better compiler warnings
[12:00:25] <wasamasa> no, I believe that this would jeopardize your mission
[12:00:36] <amazigh> https://yewtu.be/WnTKllDbu5o
[12:01:26] <amazigh> what is the difference between compiler warnings and a linter?
[12:05:42] <wasamasa> the compiler warnings don't require you to install a janky tool
[12:05:52] <wasamasa> you just use your existing one
[12:06:10] <wasamasa> tends to be reliable, too
[12:06:15] <jcowan> https://man.cat-v.org/unix_7th/1/lint is the relevant man page
[12:08:17] <jcowan> http://tack.sourceforge.net/olddocs/lint.pdf is a paper by the author
[12:08:40] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:09:22] * amazigh reading
[12:10:05] <jcowan> that's someone else's paper
[12:10:47] <jcowan> http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=2057D708B1EBBD74A47BC4950B2556DD?doi=10.1.1.56.1841&rep=rep1&type=pdf is by the original author
[12:10:48] <rudybot> https://teensy.info/f7Xu7B9wNo
[12:10:58] <mdhughes> Now you have a janky lint tool inside your compiler where you can't get to it!
[12:11:56] <mdhughes> I use jslint a lot, and changing the config to fit my style, and magic comments are the only way to stay sane with it. But it beats having a "real compiler".
[12:16:56] <mdhughes> One major advantage of having a separate lint is it can be run much faster than most compilers. So, say, your editor runs it every time you save.
[12:19:19] <wasamasa> imagine if jslint required you to use some magic syntax instead of comments
[12:19:35] <wasamasa> would that be acceptable?
[12:22:53] <jcowan> the original V7 linter ran slower than the compiler
[12:23:29] <jcowan> Bell Labs compilers have always run lightning fast though, not like gcc
[12:24:56] <jcowan> In conclusion, it appears that the general notion of having two programs is a good one. The compiler concentrates on quickly and accurately turning the program text into bits which can be run; lint concentrates on issues of portability, style, and efficiency. Lint can afford to be wrong, since incorrectness and over-conservatism are merely annoying, not fatal. The compiler can be fast since it knows that lint will cover its flanks.
[12:26:10] <amazigh> ^
[12:26:53] <amazigh> mdhughes: I rarely use a linter with Other Language, I was wondering what kind of errors jslint catch?
[12:27:24] <amazigh> With Other Language I used to rely on a style linter only, but I do not anymore
[12:28:57] <mdhughes> Quite a lot of stuff. The ones I get a lot are block-scoped vars shadowing each other. Missing declarations for vars, which usually means I missed an import.
[12:29:45] <mdhughes> wasamasa: What kind of magic syntax? And baking the linter's controls into the language seems like a bad idea.
[12:30:20] <wasamasa> sham1 suggested that magic comments should be shunned in favor of a special macro
[12:30:37] <wasamasa> so I'm trying to imagine what if other languages went that route
[12:30:48] <mdhughes> If it's something like Java/Python @ignorebugs decorators, that's maybe OK. But Scheme has no such concept, and it wouldn't even make sense.
[12:31:06] <wasamasa> JS could actually do that thanks to the community embracing compilers
[12:31:54] <amazigh> Maybe typescript does that 
[12:32:53] <mdhughes> JS used to be mostly structured like Java, everything's in declared functions. But now like half my code is ()=>{} lambdas, and a decorator would be hard to attach to it.
[12:35:29] *** Joins: klovett (~klovett@107.115.32.2)
[12:35:35] * amazigh blowing steam, trying to understand where best to spend his time
[12:37:37] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[12:39:55] *** Joins: klovett_ (~klovett@107.115.32.2)
[12:42:20] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[12:43:58] *** Joins: klovett (~klovett@107.115.32.2)
[12:45:23] <amazigh> another question, what scheme do you consider active outside the following: chez, chibi, chicken, cyclone, gambit, gauche, gerbil, guile, loko, mit, racket, sagittarius?
[12:45:49] <amazigh> what scheme would be missing according and worth testing?
[12:46:01] <amazigh> R567RS
[12:46:25] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[12:46:32] *** Joins: klovett__ (~klovett@107.115.32.2)
[12:46:51] <sham1> That's a lot of revisions
[12:47:36] <amazigh> it is missing: kawa, stklos
[12:48:10] * amazigh looking at https://github.com/johnwcowan/r7rs-work/blob/18c8f0f9372dd0578aed7dbca96dca9c7e73c75a/ImplementationSupport.md
[12:48:10] <rudybot> https://teensy.info/d9KJGGW7nn
[12:48:27] <wasamasa> I find it funny you'd include loko, but not kawa
[12:48:30] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[12:48:44] <wasamasa> just because it's someone's new project?
[12:49:06] <amazigh> I want to include kawa, just did not come to it yet
[12:49:52] *** Joins: rgherdt (~rgherdt@ip5f5af420.dynamic.kabel-deutschland.de)
[12:49:55] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:918b:ecd9:869:3108)
[12:49:56] <amazigh> maybe ironscheme
[12:53:10] *** Joins: klovett (~klovett@107.115.32.2)
[12:53:49] *** Quits: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net) (Ping timeout: 256 seconds)
[12:53:54] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:55:03] *** Joins: klovett_ (~klovett@107.115.32.2)
[12:55:31] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[12:56:44] *** Joins: klovett__ (~klovett@107.115.32.2)
[12:56:46] <amazigh> What is still only an R5RS implementation that is active?
[12:57:45] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[12:59:13] *** Joins: klovett (~klovett@107.115.32.2)
[12:59:29] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[13:00:48] *** Joins: klovett_ (~klovett@107.115.32.2)
[13:01:05] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[13:01:54] *** Joins: klovett__ (~klovett@107.115.32.2)
[13:03:07] *** Joins: klovett___ (~klovett@107.115.32.2)
[13:03:39] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[13:05:09] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[13:05:09] <amazigh> S7 is R4RS :|
[13:06:17] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[13:15:13] *** Joins: klovett (~klovett@107.115.32.2)
[13:16:19] *** Joins: klovett_ (~klovett@107.115.32.2)
[13:18:45] *** Quits: klovett___ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[13:19:47] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[13:39:30] <amazigh> There is PR Chez side to add some kind of oop on top of R6RS records: https://github.com/cisco/ChezScheme/blob/72759db83a41f757b84c60683d2595ec1f4b2ea8/s/record-defn.ss
[13:43:04] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[13:50:16] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:59:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[14:15:30] *** Joins: taylan2 (~taylan@user/taylan)
[14:15:59] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 256 seconds)
[14:17:44] <dpk> heresy, etc https://wiki.dpk.io/if-we-could-do-scheme-again.html
[14:21:56] *** Joins: klovett (~klovett@107.115.32.2)
[14:24:29] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[14:27:46] *** Joins: klovett_ (~klovett@107.115.32.2)
[14:29:00] *** Joins: klovett__ (~klovett@107.115.32.2)
[14:31:27] *** Joins: klovett___ (~klovett@107.115.32.2)
[14:31:29] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[14:32:25] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[14:33:29] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[14:33:42] *** Joins: klovett (~klovett@107.115.32.2)
[14:35:49] *** Quits: klovett___ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[14:36:04] *** Joins: klovett_ (~klovett@107.115.32.2)
[14:37:06] *** Joins: klovett__ (~klovett@107.115.32.2)
[14:38:15] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[14:38:41] *** Joins: klovett (~klovett@107.115.32.2)
[14:40:27] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[14:40:43] *** Joins: klovett_ (~klovett@107.115.32.2)
[14:41:37] *** Joins: klovett___ (~klovett@107.115.32.2)
[14:41:55] <sham1> Speaking of heresy: "I would do away with cond and just have n-ary if." And what would be the real difference between that and cond
[14:41:58] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[14:42:13] <sham1> Except making the arms of the expressions harder to see
[14:42:19] *** Joins: jao (~jao@45.152.183.62)
[14:43:12] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[14:43:59] *** Joins: klovett (~klovett@107.115.32.2)
[14:44:03] <sham1> In all honesty, I'd rather remove the `if` in that kind of a radical shift and just leave conf
[14:44:05] <sham1> cond*
[14:44:18] *** Joins: badkins (~badkins@136.56.92.199)
[14:45:13] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[14:46:17] *** Quits: klovett___ (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[14:47:28] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[14:48:31] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[14:50:40] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:52:17] *** Joins: klovett_ (~klovett@107.115.32.2)
[14:55:05] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[14:55:54] <amazigh> gamma for the win!
[14:59:29] <amazigh> there is also scheme comparator three-ways if
[15:00:16] *** Joins: X-Scale` (~ARM@92.250.98.59)
[15:02:28] *** Quits: X-Scale (~ARM@25.55.43.5.rev.vodafone.pt) (Ping timeout: 260 seconds)
[15:02:28] *** X-Scale` is now known as X-Scale
[15:02:31] *** Joins: klovett (~klovett@107.115.32.2)
[15:03:34] *** Joins: klovett__ (~klovett@107.115.32.2)
[15:04:27] *** Joins: klovett___ (~klovett@107.115.32.2)
[15:06:15] <mdhughes> Yeah, I much prefer cond for chains of evaluation. And anyone who suggests using begin/progn at the start of every multi-line block is a madman.
[15:06:25] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[15:06:59] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[15:07:57] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[15:10:48] <dpk> that's mad*woman* to you
[15:10:54] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:10:59] <dpk> i would also accept ‘crazy cat lady’ were it not for my allergies
[15:11:17] <Franciman> what about promad?
[15:12:12] <Franciman> or promenade for the more idylliac inclined of us
[15:18:12] <mdhughes> madperson, sorry.
[15:23:32] <amazigh> Franciman: x')
[15:35:06] *** Quits: klovett___ (~klovett@107.115.32.2) (Quit: ZZZzzz…)
[15:43:23] *** Quits: winning-luser (~c@2601:8c1:80:70d0::756) (Remote host closed the connection)
[15:53:54] <ns12> Macros should be removed from all Lisps.
[15:54:17] <wasamasa> weren't you the one asking why nobody is using the IEEE standard?
[15:54:31] <ns12> wasamasa: Yes.
[15:54:45] <wasamasa> no offense, but I suggest you learn scheme proper before making such claims
[15:55:13] <wasamasa> I remember someone saying the quote shorthand should be removed
[15:55:32] <wasamasa> some months later that person actually tried to write scheme and discovered quote shorthand exists for a reason, it's painful otherwise, lol
[15:56:00] <ns12> I am reading the Scheme standards one by one. Are there any other historical documents I should read? Maybe something to convince me about the value of having macros?
[15:56:42] <ns12> Well, I have already written an R5RS Scheme implementation.
[15:56:44] <dpk> if someone could write a RABBIT-type proof of concept of compiling Kernel-style fexprs to efficient machine code, i would agree that we'd be better off with them
[15:56:51] <dpk> instead of macros
[15:57:51] <ns12> I still can't see the use of macros. So if you have some historical document that I can read, I will be happy to read it to understand the use to macros.
[15:59:13] <ns12> wasamasa: "I suggest you learn scheme proper before making such claims" - How should I learn "scheme proper"?
[15:59:31] <wasamasa> solve problems with scheme
[15:59:38] <wasamasa> learn to think in terms of scheme
[16:01:03] <wasamasa> you'll eventually get the hang of idioms and pain points
[16:02:08] <ns12> wasamasa: Will that make me appreciate macros? I am asking because I have already implemented Scheme three times and it still doesn't click.
[16:02:16] <wasamasa> uhh
[16:02:32] <wasamasa> you're telling me you've implemented syntax-rules/-case three times?
[16:02:33] <sham1> Well maybe not Scheme specifically but macrology comes up quite often in the Lisp family
[16:02:39] <wasamasa> and you didn't use it at all?
[16:02:39] <sham1> I suppose the best would be to just go to the original source
[16:02:49] <wasamasa> like, you didn't implement other core stuff in terms of it?
[16:03:44] <wasamasa> you'd rather implement core macros such as when/unless by special-casing them in your interpreter or implementing fexprs and relying on eval?
[16:04:07] <ns12> Well, I can totally understand the use of macros for implementing the language (e.g. cond, let, let*, letrec, letrec*, etc.), but I don't see the use of exposing such facilities to the user.
[16:04:27] <wasamasa> I don't buy that at all
[16:04:42] <Oxyd> There isn't that many core forms in Scheme, so simply implementing them all directly in the interpreter and saving yourself the time implementing a hygienic expander is probably way easier.
[16:05:31] <ns12> I have never implemented syntax-case (perhaps I should try). Only syntax-rules.
[16:05:32] <Oxyd> It's when you write a macro that does something specific to whatever program you're writing that would never make sense as a part of the language that macros come to their element.
[16:05:39] <wasamasa> yeah
[16:05:49] <wasamasa> now imagine if the scheme standard had been authoritarian about that
[16:05:54] <wasamasa> "No, we won't let you do that"
[16:07:13] <dpk> in terms of primitive special forms, iirc psyntax expands Scheme code to only lambda, define (with identifier as first argument), set!, quote, begin, and if
[16:08:23] <wasamasa> I'd even argue that the lisp thing to do is exposing things to the user
[16:08:45] <wasamasa> consider the dual nature of symbols and identifiers
[16:08:57] <wasamasa> or lists and application
[16:10:57] *** Quits: sdu (~doo@185.44.146.165) (Read error: Connection reset by peer)
[16:12:04] <ns12> Okay, I will think about this a bit more. I still have much to learn. Thanks.
[16:13:03] <wasamasa> in terms of implementation, it totally makes sense to do that
[16:13:10] <wasamasa> in terms of ease of understanding, not so much
[16:15:02] <ns12> Speaking of Scheme macros, is it possible to define anaphoric macros using syntax-rules? For example, aif, awhen, aand, acond, etc. https://wiki.c2.com/?AnaphoricLispMacros
[16:15:10] <dpk> jein
[16:15:29] <dpk> not in plain syntax-rules; yes if you also provide syntax parameters
[16:16:05] <dpk> (or if you let the user explicitly say what they want the name of the anaphoric variable to be, which i don't think is what you were asking)
[16:16:48] <ns12> "yes if you also provide syntax parameters" - What does that mean?
[16:18:03] <dpk> https://srfi.schemers.org/srfi-139/srfi-139.html
[16:18:43] <dpk> or the original paper describing the concept: http://scheme2011.ucombinator.org/papers/Barzilay2011.pdf
[16:19:17] <ns12> Thanks.
[16:42:11] <ns12> When R7RS-small says that a result is unspecified, does it mean that it can return any value? e.g. Can (if #f #f) return 123?
[16:44:30] <dpk> yes
[16:44:47] <dpk> though most implementations keep a special void object around to return from such expressions
[16:46:51] <ns12> Why didn't R7RS-small specify a special void/undefined/unspecific object?
[16:48:14] <AndrewYu> Hard question that exists in many programming languages
[16:48:17] <dpk> firstly, it allows implementations to return #f instead, or to return the value from a set! or whatever, as an implementation-specific extension
[16:48:54] <dpk> secondly, it allows optimizing implementations to simply leave any registers etc containing return values untouched from whatever they were previously
[16:49:02] <dpk> even if that might leak
[17:00:18] <amazigh> re mit-scheme, does the following error means that I can not use define inside lambda: ;Definition may not be used as an expression: #[defn-item 12 #[uninterned-symbol 13 loop] #[expr-item 14]]
[17:01:19] <amazigh> dpk: what RABBIT-type proof-of-concept?
[17:02:39] <amazigh> ns12: btw I fixed the pb with mit, but like presented above, there is more problems :D
[17:02:52] *** Joins: s-liao (~s-liao@101.86.99.70)
[17:04:48] <amazigh> I tried with a small example program, I can use define in definition position. I guess mit is not my style :p
[17:07:14] *** Joins: badkins (~badkins@136.56.92.199)
[17:10:55] <amazigh> re RABBIT is https://dl.acm.org/doi/book/10.5555/889478, but I am not sure what is specific about RABBIT as software artifact.
[17:12:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[17:14:50] <dpk> yes, correct
[17:14:53] <dpk> read the abstract ;-)
[17:15:14] <dpk> and note that it was very innovative to do this in 1978
[17:17:37] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:22:51] <amazigh> imo, if one can double the speed of SINK, it would be already good.
[17:23:34] <amazigh> I already read that paper, and read now the abstract again, I am not sure what is innovative in the delivrable except the lexically scoped thing
[17:30:45] *** Joins: seninha (~seninha@user/seninha)
[17:30:52] *** Joins: Inline (~Inline@aftr-37-201-241-16.unity-media.net)
[17:47:38] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 252 seconds)
[17:47:50] *** Joins: badkins (~badkins@136.56.92.199)
[18:06:56] <dpk> yes, lexical scope and continuation-passing style
[18:07:57] <dpk> demonstrating that an efficient Scheme compiler was possible
[18:10:47] <mdhughes> "Converting postscript file page 282 of 1" GG Preview.
[18:12:20] <mdhughes> Oh Cthulhu it's a PS, of images of the rendered document, scanned in crooked? Is there normal text/PDF/PS of this?
[18:15:14] <dpk> i don't think they had TeX at MIT yet in 1978
[18:16:20] <mdhughes> troff dates to 1972-ish, and runoff is '60s.
[18:17:03] <dpk> i don't think they had Unix at MIT in 1978, either
[18:17:21] <mdhughes> runoff was multics! It's more than one of whatever Unix is!
[18:17:47] <dpk> i'm not sure what typesetter they had for ITS, if any
[18:18:12] <mdhughes> Maybe they could've borrowed a Wang.
[18:18:55] <mdhughes> Ah, good old SCHEME with its familiar LABELS primitive.
[18:19:50] <mdhughes> (yes, I know it's equivalent to letrec)
[18:20:23] * mdhughes is AFK getting things winterized.
[18:24:29] *** Joins: civodul (~user@guix/contributor/civodul)
[18:42:45] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[18:43:27] *** Quits: m455 (~m455@user/m455) (Ping timeout: 256 seconds)
[18:47:14] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[18:48:09] *** Joins: madage (~madage@user/madage)
[18:59:19] *** Quits: shawnw (~shawn_w@2601:600:9b7f:d7f0:d0d6:6bc9:6acf:eb7e) (Ping timeout: 252 seconds)
[19:01:10] *** Quits: Inline (~Inline@aftr-37-201-241-16.unity-media.net) (Read error: Connection reset by peer)
[19:01:17] *** Joins: Inline (~Inline@aftr-37-201-241-16.unity-media.net)
[19:07:44] *** Quits: Inline (~Inline@aftr-37-201-241-16.unity-media.net) (Read error: Connection reset by peer)
[19:08:03] *** Joins: Inline (~Inline@aftr-37-201-241-16.unity-media.net)
[19:16:21] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:17:08] *** Joins: badkins (~badkins@136.56.92.199)
[19:21:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[19:38:08] *** Quits: Inline (~Inline@aftr-37-201-241-16.unity-media.net) (Remote host closed the connection)
[19:40:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:51:05] <hiruji> ITS had a typesetter. 
[19:51:06] <hiruji> I forgot what it was called though 
[19:53:58] *** Joins: mononote (~mononote@user/mononote)
[19:58:15] *** hiruji is now known as aeka
[19:59:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[20:05:51] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[20:06:31] *** Joins: [deleted] (~livoreno@user/notzmv)
[20:10:05] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[20:39:02] <mdhughes> Looking at RABBIT some more, I like CATCH as a simpler let/cc. We should have that.
[20:54:34] *** Joins: ManDay (~manday@user/manday)
[21:10:58] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[21:21:04] <mdhughes> I'm getting dizzy tilting my head over to read this. Maybe if I angle my monitor up…
[21:26:29] <sham1> But we have catch don't we?
[21:26:37] <sham1> Or something like that
[21:26:51] <sham1> Although to me CATCH sounds more like delimited continuations
[21:32:31] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Remote host closed the connection)
[21:34:44] *** Joins: klovett (~klovett@107.115.32.2)
[21:37:54] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[21:42:26] *** Joins: klovett_ (~klovett@107.115.32.2)
[21:45:55] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[21:46:20] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:48:43] *** Joins: klovett (~klovett@107.115.32.2)
[21:49:11] *** Joins: badkins (~badkins@136.56.92.199)
[21:50:49] <amazigh> is there anything missing in R7RS to build a REPL outside https://srfi.schemers.org/srfi-205/?
[21:50:57] <amazigh> s/outside/except/
[21:51:17] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[21:53:51] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[21:58:49] *** Joins: klovett_ (~klovett@107.115.32.2)
[22:00:44] *** Joins: klovett__ (~klovett@107.115.32.2)
[22:00:47] <dpk> depends how good you want the REPL to be
[22:01:34] <dpk> if you can rely on an external program like Emacs or rlwrap for line editing, you can make do with just (read)
[22:02:21] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[22:02:33] <amazigh> ty
[22:03:05] <amazigh> Regarding Linux distribution, outside guix, nixos, fedora, debian, ubuntu, what other distro schemers like to use?
[22:03:13] <amazigh> I think they are Arch users and gentoo users around?
[22:03:30] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 268 seconds)
[22:06:09] <dpk> module introspection of some kind would be a benefit for a serious REPL, and R7RS doesn't have that (yet)
[22:06:17] <dpk> so you can have autocomplete
[22:11:58] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c5dd:3e79:954e:8ffa)
[22:11:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c5dd:3e79:954e:8ffa) (Changing host)
[22:11:59] *** Joins: skapata (~Skapata@user/skapata)
[22:14:01] <Zipheir> amazigh: Alpine for me.
[22:14:24] <amazigh> ok
[22:16:35] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 252 seconds)
[22:17:56] <amazigh> I am trying to come with a strategy to e.g. specify the upstream release `util-linux`, then translate that into the actual whatever the distro split the package, and then somethign... profit!!1 but linking upstream release to distro package is... difficult.
[22:18:39] <amazigh> so I think will just do somekind of n-ary-if
[22:19:37] <amazigh> (somekind of meta-package management system)
[22:21:05] <amazigh> Another approach would be capability-based: Given the distro MUD at version X.Y, I want `ncdu` command => you need package A, B, C
[22:21:34] <amazigh> or even parsing the headers, I need function a, b, c etc... resolve the actual package and version.
[22:21:41] <amazigh> It is cool to dream.
[22:22:04] *** Joins: m455 (~m455@user/m455)
[22:22:46] <amazigh> btw we fixed mit and chicken (with a subset of the original test suite).
[22:25:16] <amazigh> there is around 250 tests that are green
[22:25:24] <amazigh> on 11 schemes
[22:25:40] <amazigh> I mean 10, I need to fix guile.
[22:31:49] *** Joins: klovett (~klovett@107.115.32.2)
[22:32:29] *** Joins: klovett_ (~klovett@107.115.32.2)
[22:33:27] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[22:33:47] *** Joins: evdubs_ (~evdubs@user/evdubs)
[22:34:01] *** Quits: evdubs (~evdubs@user/evdubs) (Remote host closed the connection)
[22:34:07] *** Joins: klovett__ (~klovett@107.115.32.2)
[22:36:21] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[22:36:45] *** Quits: klovett_ (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[22:37:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:39:18] *** Joins: klovett (~klovett@107.115.32.2)
[22:43:09] *** Quits: klovett__ (~klovett@107.115.32.2) (Ping timeout: 256 seconds)
[23:03:11] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[23:21:07] *** Quits: klovett (~klovett@107.115.32.2) (Ping timeout: 252 seconds)
[23:26:06] *** Joins: badkins (~badkins@136.56.92.199)
[23:31:01] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 252 seconds)
[23:45:04] *** Joins: badkins (~badkins@136.56.92.199)
[23:57:09] *** Joins: skeemer (~skeemer@h-178-174-193-227.NA.cust.bahnhof.se)
[23:59:05] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[23:59:51] <skeemer> hello all while i am learning some functional programming i was wondering  how do functional programmers approach this problem ?  https://stackoverflow.com/questions/35463711/how-to-pass-down-multiple-parameter-through-several-functions
