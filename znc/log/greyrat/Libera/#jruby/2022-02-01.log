[00:11:55] <headius> byteit101 enebo: update on google search indexing of wiki...
[00:12:08] <headius> it does now appear to be indexing some of the wiki but the majority of pages are still excluded
[00:12:42] <enebo[m]> headius: do you know why?
[00:13:01] <headius> "Excluded by ‘noindex’ tag"
[00:13:20] <headius> this is after closing edits from non-committers, which at least allowed it to start indexing some of it
[00:14:41] <headius> I'm not sure what is causing most pages to be "noindex"
[00:14:42] <headius> this one is not, but why?
[00:14:43] <headius> https://github.com/jruby/jruby/wiki/JRubyCommandLineParameters
[00:17:14] <enebo[m]> Do we not reference that from the root of the wiki?
[00:17:59] <enebo[m]> yeah I cannot see if i search from top page
[00:18:08] <headius> yeah it is not there
[00:18:21] <enebo[m]> it would show up if we did show more on the right hand side but that must then go retrieve those pages
[00:18:37] <headius> 33 pages are still blocked by robots.txt
[00:18:56] <headius> I may need to request another reindex in case this was not completely federated
[00:19:14] <headius> this list of results has the feel of an incomplete transition to indexable
[00:21:24] <headius> I just noticed all the pages that were indexed are still in mediawiki format, maybe
[00:22:12] <headius> ok nevermind, that's not the case
[00:22:34] <headius> yeah I'm going to submit for reindex to be sure, since at least some pages are indexing now but I have no explanation why others are not
[00:27:23] <headius> yeah noindex is coming back in the response from Github so I suspect this switched over halfway through indexing
[00:28:08] <enebo[m]> time heals all wounds
[00:36:53] <headius> I checked the headers for some pages Google said are `noindex` and I don't see that in the headers
[00:36:56] <headius> so we'll see how another reindexing request goes
[00:42:53] <headius> byteit101: JI specs fail the same way on master so that is not your doing
[01:14:55] <headius> enebo kares here's a stab at fixing the RubyArray#collect problem: https://github.com/jruby/jruby/pull/7056
[01:16:36] <headius> the migration path for 9.3.0 through 9.3.3 is probably to use #collect19 instead, since that changed behavior in the same way but did not change signature
[01:16:46] <headius> it was deprecated in 9.3 so this would be transitional
[01:17:13] <headius> my error was in blindly replacing #collect with #collect19 without noticing the return types change
[01:17:39] <headius> there's not a lot of good options here with those bad revs
[01:22:12] <headius> added a comment spelling that out
[01:32:49] <headius> enebo: I noticed today the Ruby GSoC folks are starting to talk about 2022 so I think we should talk about it for this year
[01:33:00] <headius> we might be able to get one or two ideas in if there are some good ones added here: https://github.com/rubygsoc/rubygsoc/wiki/Ideas-List-(2022)
[01:33:19] <headius> porting some common, not-too-crazy gems would be good
[01:36:47] <headius> ok  I think I've covered my tasks for the day
[01:36:48] <headius> ttfn
[02:21:42] <enebo[m]>  headius https://github.com/jruby/jruby/actions/runs/1773150600
[02:22:09] <enebo[m]> test:mri:core:jit starts to OOME at start after this
[02:22:36] <headius> Hmm I saw that somewhere else too just now
[02:22:44] <headius> Might be the test update
[02:23:08] <enebo[m]> on HEAD I also noticed I have a lot of "--dev5" option not recognized but I do not see that on CI
[02:23:41] <enebo[m]> If I run the mspec command direclly I see to not be seeing it...so I will try and figure that out
[02:24:04] <enebo[m]> Open3.popen3 executes a process with a pipe to read stderr FAILED
[02:24:04] <enebo[m]> Expected 
[02:24:04] <enebo[m]> "jruby: unknown option --dev5
[02:24:42] <enebo[m]> It would be funny if the bash script was strangely forgiving on matching --dev
[02:25:00] <enebo[m]> but if that was true I would expect this on CI
[02:49:20] <enebo[m]> ./bin/jruby.bash -Xbacktrace.style=mri -J-ea -J-Djruby.launch.inproc=false -J-Djruby.compile.mode=OFF -J-Djruby.jit.threshold=20 -J-Djruby.jit.max=-1 -J-Djruby.objectspace.enabled=true -J-Djruby.thread.pool.enabled=false -J-Djruby.reflection=false -e 1
[02:49:38] <enebo[m]> If I run this I get: jruby: invalid extended option backtrace.style=mri0 (-X will list valid options)
[02:49:54] <enebo[m]> If I subtract some more I will get different error or it will work
[02:50:36] <enebo[m]> It is like something is getting evaluated and some data is incomplete?  so It does something which appends a number onto the string
[02:50:45] <enebo[m]> anyways I will be on tomorrow
[02:51:59] <headius> I'll have a look tonight if I get a chance
[03:46:10] <headius> yeah I think this is something wrong in the sh
[04:02:07] <byteit101[m]> headius: "Bikeshedding mostly." (re the name of the configuration)
[04:02:07] <byteit101[m]> I strongly disagree that it's bikeshedding. This is the one way users will interact with this functionality, and it's important to design the API correctly now so that we don't have to worry about fixing it later when people are actually using it.
[04:02:59] <byteit101[m]> I think it's right to fret over the name a bit
[04:03:20] <byteit101[m]> I'll put my reasoning in the PR
[04:10:14] <headius> enebo: it was a shell bug... referencing command line args past $9 without appropriate quoting
[04:10:49] <headius> so -Xbacktrace.style=mri (arg 1) was re-passed for $10 and $11 as ${1}0 and ${1}1 🤪
[04:11:27] <headius> byteit101: fair enough... like matz says, names are important
[04:11:38] <headius> I just don't want to seem petty about it
[04:11:44] <byteit101[m]> Not at all
[04:11:46] <headius> we get once chance to pick a name 😀
[04:11:49] <headius> one
[04:15:56] <byteit101[m]> And we can discuss trying to pull the reified bits out of RubyClass, but as I discovered when I did the concrete extension, it's so tightly coupled that you end up having to pass lots of parameters around everywhere like the old (replaced) concrete extension code, and inner classes made it much simpler from that point of view
[04:16:14] <headius> yeah I get that so I didn't want to press the issue too hard
[04:16:28] <headius> we should prefer private when possible for internals, but if it's not possible right now then it's not possible
[04:17:11] <headius> it is kinda sorta RubyClass functionality, just Java visibility and encapsulation makes it hard for us to break it up into multiple classes
[04:17:36] <byteit101[m]> Yes, also it has to be public enough to be called by ruby code (class.rb)
[04:18:39] <byteit101[m]> I moved those two methods to vartablemanager, but had to make both public now as they must call each other and are in different packages
[04:18:57] <byteit101[m]> I wish Java had C# partial classes
[04:19:26] <byteit101[m]> I also wished several times for C++ "friend" scoping :-D
[04:25:25] <headius> yeah modules are supposed to help this but there's still nothing on the granularity of "friend"
[04:26:08] <byteit101[m]> > Java can't be your friend
[04:26:08] <byteit101[m]> :-(
[04:29:35] <headius> hah
[04:40:59] <byteit101[m]> headius: added comment about my naming ideas
[04:44:13] <headius> that weird shell script error is fixed by mrnoname's PR
[04:44:16] <headius> OOM is now visible
[04:46:44] *** Quits: adam12 (~adam12@about/ruby/adam12) (Quit: Ping timeout (120 seconds))
[04:47:27] <headius> byteit101: ok
[04:48:00] *** Joins: adam12 (~adam12@about/ruby/adam12)
[04:49:42] <headius> these failures are all over the place
[04:49:51] <headius> spec:compiler core dumped on 8 and 11, that should never happen
[04:50:15] <byteit101[m]> !!!
[04:51:10] <byteit101[m]> Trying to clean up the JRubyFX working dir I have, and one question I have is: "is rubyobj. going to ever change or should I try to hide it?"
[04:51:54] <headius> it will probably change
[04:52:14] <headius> we will want to emit that stuff under a JRuby-controlled package for module support, or else make it configurable to a known package
[04:52:47] <headius> in any case I just threw that prefix at it so no classes would end up in the default package
[04:53:39] <byteit101[m]> Hmm, ok
[04:55:23] <byteit101[m]> Ignoring the ruby module/package issues here then, would you mind reviewing this classloader to see if you can see any flaws that would matter? (This is for JRubyFX): https://gist.github.com/byteit101/0c72c4b57212dbd778b6a6e41f0389f4
[04:58:13] <headius> according to ClassLoader docs you should only need to override findClass
[04:58:30] <headius> this is a black art though and I am never sure about the rules
[04:58:44] <headius> https://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#findClass(java.lang.String)
[04:59:23] <byteit101[m]> I had issues with that, fxmlloader only calls loadClass
[04:59:29] <headius> of course it does
[04:59:41] <headius> hmm docs say that should call findClass though
[04:59:42] <byteit101[m]> The black art of it is why I wanted more eyes on it though
[05:00:32] <headius> do you have an example error that results when it fails to load?
[05:00:48] <byteit101[m]> can make one real quick
[05:01:53] <headius> // If still not found, then invoke findClass in order
[05:01:53] <headius> // to find the class.
[05:01:53] <headius> long t1 = System.nanoTime();
[05:01:53] <headius> c = findClass(name);
[05:02:08] <headius> that's from java.lang.ClassLoader.loadClass, after it fails to get a class from parent
[05:03:33] <byteit101[m]> Wait which type of error do you want? if I remove findclass? or if I try to load "dsfjkladsfjkdsfajkladsf"? or both?
[05:03:45] <headius> if you remove loadClass
[05:05:16] <byteit101[m]> Well I'll be that works. Unsure what I did to cause it to error back then to make  me add both
[05:05:35] <headius> nice
[05:05:51] <headius> it seems fine to me albeit a little terrifying to see ClassLoader extended from Ruby
[05:05:58] <headius> but that's what we're here for
[05:06:03] <byteit101[m]> :-D
[05:06:08] <byteit101[m]> no wait wrong emoji
[05:06:36] <headius> 🐙
[05:08:49] <byteit101[m]> aw drat it's a slack icon, not an emoji I was thinking of. Oh well, here's close: 😈
[05:09:18] <byteit101[m]> Oh one question is: should the else going to the jruby classloader call load class or find class?
[05:15:20] <byteit101[m]> Oh I know why I started with loadClass: all the chaining class loader examples I saw only override loadClass
[05:15:37] <headius> yeah I think they are wrong
[05:15:53] <headius> black art
[05:16:22] <headius> I think the only reason to override loadClass is if you do not want to search parents
[05:16:33] <headius> so they may be shortcutting that or intentionally preventing it
[05:20:34] <byteit101[m]> Ah
[05:20:51] <byteit101[m]> Should my findClass call the jruby findClass or loadClass?
[05:22:12] <byteit101[m]> oh wait...
[05:23:48] <byteit101[m]> I should use the new super support
[05:25:08] <byteit101[m]> I like that better (see updated gist)
[05:25:45] <byteit101[m]> a new question, though, is should become_java! be idempotent? currently it's not
[05:37:39] <headius> OOM looks like a new Enumerator::Lazy test
[05:37:57] <headius> byteit101: probably
[05:38:12] <headius> it is a known issue but people probably shouldn't be loading this stuff in parallel either
[05:38:29] <headius> actually, definitel
[05:38:30] <headius> y
[05:39:02] <headius> there are some rules about concurrent classloading that we should consider too... though I think without specifying that the classloader is concurrency-safe it won't be used to load more than one class at a time
[05:40:00] <headius> ugh, you know you've got a memory leak when ever other process on the system has been paged out
[05:41:09] <byteit101[m]> yes I saw you had to do some registering, so though I was safe
[05:41:29] <headius> yeah probably fine in that regard then
[05:42:42] <headius> enebo: OOM is in TestEnumerator#test_lazy_chain, I will exclude and file a bug
[05:42:49] <headius> after I confirm that the suite can finish
[05:43:19] <headius> weirdly I would have expected it to be a thread starvation on an Enumerator test
[05:45:11] <byteit101[m]> Is there a "self" module at the root level? something that is `::` but with a java-acceptable name?
[05:49:18] <headius> for the default package?
[05:49:33] <headius> not sure what you mean by root level
[05:49:53] <byteit101[m]> ::Foo == Something::Foo
[05:50:02] <headius> ah no there is not
[05:50:12] <byteit101[m]> Object may be usable for my purposes
[05:50:13] <headius> Object maybe would work ok
[05:50:16] <headius> yeah
[05:50:28] <headius> I guess that is it
[05:50:41] <headius> ::Foo logic grabs Object and looks up from there
[05:50:42] <byteit101[m]> but Iam not sure how I feel about <?import Object.* ?> in fxml
[05:54:38] <byteit101[m]> Oh that's disturbing to look at: finding class Object.My$Module$TestClass
[05:58:02] <headius> we will want to reconsider the use of $ in the future too because it messes with tools that think that means inner classes
[05:58:28] <headius> it is fine at JVM level but e.g. javap and jdb treat it like it should be a dotted inner class and it is not
[05:58:37] <headius> on the to-do list somewhere
[06:00:49] <headius> enebo: with that one test excluded test:mri:core completes with 401 failures, 149 errors
[06:00:57] <headius> new tests pulled in a bunch of extra failures obviously
[06:01:23] <headius> interesting to note how few new failures have come from spec updates... 3.1 is not really in there yet
[06:01:54] <headius> ruby-core committers still generally add to the test/unit suite ☹️
[06:03:28] <headius> ugh what did we do now dependabot
[06:03:48] <byteit101[m]> Oh this is coming from java, I have to deal with it
[06:04:14] <headius> bleh just integration tests using old puma, rake, bouncycastle
[06:05:02] <byteit101[m]> headius: just pushed cleaned up ivar integration to my fork of jrubyfx https://github.com/byteit101/JRubyFXML/
[06:06:27] <byteit101[m]> fxml_loader is as I mentioned this morning, the place to look
[06:06:31] <headius> cool! I see some nasty code got deleted
[06:06:33] <byteit101[m]> *fxml_helper
[06:06:44] <byteit101[m]> don't worry, lots of nasty code stayed :-D
[06:06:48] <byteit101[m]> but yes
[06:06:51] <headius> hah we're getting there
[06:07:23] <byteit101[m]> 197 of the last file (module) is where the $ is "used"
[06:07:31] <byteit101[m]>          return a.constantize_by(/[.$]/).tap{|x| x.become_java!}.java_class
[06:09:05] <byteit101[m]> enebo: ^ ivar jrubyfx integration commit (using current PR, likely will change)
[06:09:16] <byteit101[m]> still some things I want to fix before 2.0 is released though
[08:08:38] <headius> CI looking better now
[08:09:10] <headius> hmm rake spec:ji running for 1h24m seems ungood
[13:41:37] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Ping timeout: 240 seconds)
[13:42:34] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[14:17:21] *** Quits: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039) (Ping timeout: 250 seconds)
[14:30:32] *** Joins: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039)
[14:31:52] *** Joins: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e)
[15:03:37] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: ssaschaa[m] (~ssaschaam@2001:470:69fc:105::1:605e) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: kroth_lookout[m] (~krothmatr@2001:470:69fc:105::1:8372) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: katafrakt[m] (~katafrakt@2001:470:69fc:105::1:41ff) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: jamesgecko[m] (~jamesgeck@2001:470:69fc:105::30e6) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: Albertico[m] (~albertico@2001:470:69fc:105::1:3a89) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: rdubya[m] (~rdubyamat@2001:470:69fc:105::1:7649) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: daveg_lookout[m] (~daveglook@2001:470:69fc:105::1:8374) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: jtarvydas[m] (~jtarvydas@2001:470:69fc:105::1:8387) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: MattWelke[m] (~mattwelke@2001:470:69fc:105::1:34bb) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: kovyrin[m] (~kovyrinma@2001:470:69fc:105::1:6d6c) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: andreimaxim[m] (~andreimax@2001:470:69fc:105::1:6099) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: nilsding (~nilsding@user/nilsding) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: marcheiligers[m] (~marcheili@2001:470:69fc:105::1:5286) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e) (Quit: Bridge terminating on SIGTERM)
[15:11:15] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[15:17:42] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Remote host closed the connection)
[15:30:51] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[15:32:43] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Remote host closed the connection)
[15:38:18] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[15:54:47] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[15:54:47] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[15:54:47] *** Joins: subbu[m] (~subbu@user/subbu)
[15:54:47] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[15:54:59] *** Joins: Albertico[m] (~albertico@2001:470:69fc:105::1:3a89)
[15:54:59] *** Joins: kroth_lookout[m] (~krothmatr@2001:470:69fc:105::1:8372)
[15:54:59] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[15:54:59] *** Joins: daveg_lookout[m] (~daveglook@2001:470:69fc:105::1:8374)
[15:54:59] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[15:54:59] *** Joins: katafrakt[m] (~katafrakt@2001:470:69fc:105::1:41ff)
[15:54:59] *** Joins: rdubya[m] (~rdubyamat@2001:470:69fc:105::1:7649)
[15:54:59] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[15:54:59] *** Joins: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e)
[15:54:59] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[15:54:59] *** Joins: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78)
[15:54:59] *** Joins: MattWelke[m] (~mattwelke@2001:470:69fc:105::1:34bb)
[15:54:59] *** Joins: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039)
[15:54:59] *** Joins: marcheiligers[m] (~marcheili@2001:470:69fc:105::1:5286)
[15:54:59] *** Joins: kovyrin[m] (~kovyrinma@2001:470:69fc:105::1:6d6c)
[15:54:59] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[15:54:59] *** Joins: jamesgecko[m] (~jamesgeck@2001:470:69fc:105::30e6)
[15:55:00] *** Joins: ssaschaa[m] (~ssaschaam@2001:470:69fc:105::1:605e)
[15:55:00] *** Joins: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904)
[15:55:00] *** Joins: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c)
[15:55:01] *** Joins: andreimaxim[m] (~andreimax@2001:470:69fc:105::1:6099)
[15:55:01] *** Joins: jtarvydas[m] (~jtarvydas@2001:470:69fc:105::1:8387)
[15:55:01] *** Joins: nilsding (~nilsding@user/nilsding)
[15:55:01] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[16:04:49] *** Quits: subbu[m] (~subbu@user/subbu) (Quit: Client limit exceeded: 20000)
[16:05:46] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Quit: Client limit exceeded: 20000)
[16:06:36] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Quit: Client limit exceeded: 20000)
[16:10:34] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Client limit exceeded: 20000)
[16:10:42] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Quit: Client limit exceeded: 20000)
[17:52:09] <headius> good morning!
[18:06:47] <headius> ahorek: I've pushed the baseline GHA workflow to jcodings and will add the Java 11 build like in your workflow... you can then rebase and the PRs should switch over
[18:07:09] <headius> there's one failure in TestCP51932ToCP50220 that has probably been there for a while
[18:11:28] <headius> ahorek: I cherry-picked your workflow to master
[18:11:50] <headius> rebase and we'll see how things look on the PRs
[18:16:23] <headius> basshelal: looking at your January PRs for jnr-ffi now
[18:16:41] <headius> all generally look great
[18:21:12] <headius> everything merged, the test changes and documentation updates look great, thank you!
[18:22:13] <headius> it occurred to me we could hook up the Apple M1 instance we're using for JRuby testing to also test jnr-*, since that's pretty critical to M1 support... I will try to do that today
[18:22:17] <headius> as in try to do it right now
[18:23:55] <headius> hmm looks like runners can be shared across an organization but not outside that org
[18:24:14] <headius> I may be able to just run a second instance for jnr-* and since those tests are pretty clean it shouldn't interfere with JRuby CI
[18:28:13] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[18:28:13] <enebo[m]> headius: did you push that SNAPSHOT for master of JRuby?
[18:28:18] <enebo[m]> I don't think it will fix tons of tests but it will fix a handful
[19:01:01] <headius> snapshot?
[19:01:08] <headius> enebo: what do you mean
[19:01:34] <enebo[m]> of jcodings to pick up new encodings
[19:01:53] <enebo[m]> CESU-6 and new uniciode stuff
[19:01:59] <headius> oh no, I have not because ahorek PRs are not merged
[19:02:12] <headius> I can do a release once those are in and tests are passing
[19:02:35] <enebo[m]> ok
[19:03:29] <enebo[m]> https://twitter.com/tom_enebo/status/1488532721324417035?s=20&t=3FAwJKWta0v8OxGSwB9NXw
[19:03:42] <enebo[m]> Does this strike anyone as really odd?
[19:03:43] <headius> basshelal: success, we have CI on Apple M1 for jnr-ffi
[19:04:02] <enebo[m]> Is Web3 actually real and even if it is...Could there really be this much interest?
[19:04:34] <enebo[m]> Also Railsconf CFP is up
[19:04:44] <headius> indeed it is, Feb 28 deadline
[19:04:58] <enebo[m]> I don't hold high hopes I will be travelling in May
[19:05:17] <headius> yeah I didn't think so, but I am willing
[19:05:34] <enebo[m]> We shall see how the world turns I guess
[19:05:50] <headius> I will need help putting it together, but the talks are only 30 min
[19:06:10] <headius> not sure if that includes Q&A or if that is punted to online forum
[19:13:44] <enebo[m]> This would be like old times since it is over my birthday like in the old days
[19:14:12] <headius> lopex: hey bud hope you are staying safe and health out there... there's a few PRs to jcodings from ahorek that you might be able to assist with
[19:14:33] <enebo[m]> lopex: Go lopex Go!
[19:14:44] <headius> enebo: and Portland! I haven't been back since the last time I did OSCON I think
[19:15:09] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
[19:15:10] <lopex[m]> yeah, I've seen it
[19:15:25] <enebo[m]> headius: yeah railsconf at the same time and place.  Nostalgic.  Only that pesky pandemic which will not be over by then
[19:15:32] <headius> lopex: how have you been? I may be in your general region this summer
[19:15:51] <enebo[m]> It could be much better though.  I long for the days of 2 cases per 100k
[19:15:51] <headius> enebo: here's hoping for an Extra Action Band half-time show
[19:49:21] <basshelal[m]> headius: Holy crap, the day my phone decides to not send me notifications smh
[19:49:21] <basshelal[m]> This is excellent news regarding Apple M1! Let's go for more I say! GNU/Linux aarch64 and Windows x86_64 too, GitHub actions has both I believe
[19:49:21] <basshelal[m]> Also excellent that you merged the test PRs, this will really help me improve the upcoming tests much better since I won't have to worry about merge conflicts and other git complexities and what-not
[19:49:21] <basshelal[m]> Thanks a lot for this, this is a huge step for JNR, more to come!
[20:21:40] <headius> yeah linux/arm64 for sure and whatever else we can get working in GHA
[20:27:53] <headius> ahorek: merged everything except the escape PR that has a mystery failure
[20:28:14] <headius> after my meeting I will have a look at that and the existing failure on master
[20:32:41] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[20:32:41] <ahorek[m]> hey headius thanks, that mystery failure is the same as testXMLWithCharref, which started to fail after a unicode tables update (unrelated to my other changes)
[20:36:49] <ahorek[m]> the test is for https://bugs.ruby-lang.org/issues/16922 which I thought could break it, but it doesn't seem to be the case.
[21:27:57] <headius> enebo: io-wait is rebased, hopefully merged today
[22:07:29] <enebo[m]> coolio
