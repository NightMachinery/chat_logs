[00:00:17] *** Joins: dre (~dre@2001:8003:c932:c301:154c:d733:7b9b:7bcb)
[00:00:26] <rotateq> hi dre :)
[00:02:32] *** Joins: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de)
[00:06:29] <theothornhill> Can someone help me understand this a little better? What is the shl for, and how does that relate to the line below? That's line 10-11
[00:06:31] <theothornhill> https://paste.sr.ht/~theo/ac3c9763fd52823a8853eeb61d8bc10a2d7265d4
[00:06:58] <phoe> theothornhill: fixnums in SBCL are represented shifted left one bit
[00:07:20] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[00:07:49] <phoe> as for CMOVO, no idea
[00:08:16] <dre> hey rotateq :D
[00:08:23] <theothornhill> the conditional move should relate to whether it's a 1/0 in line 10
[00:08:37] <dre> i got the common lisp client merged into nvim-conjure if there's still nvim users here.
[00:09:00] <phoe> nice!
[00:09:25] <theothornhill> phoe: but how does that work, though? 7, or 0111 is 1110 suddenly?
[00:13:23] <Bike> yeah, 7 as a tagged immediate will be 00001110.
[00:13:55] <theothornhill> Thanks, is that the term for it? Tagged immediate?
[00:14:25] <Bike> yeah. "immediate" because it's in a register or something instead of memory. and "tag" is the end 0. non-fixnums have different tags.
[00:15:21] <theothornhill> Ah, right. That tg represents the type, then?
[00:15:31] <theothornhill> s/tg/tag
[00:15:54] <Bike> yes. zero is used as a tag since it has the convenient property that you can add and subtract tagged fixnums without untagging or retagging.
[00:16:14] <Bike> since obviously 7 << 1 + 7 << 1 = 14 << 1
[00:16:24] *** Quits: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de) (Remote host closed the connection)
[00:17:05] <Bike> not immediately sure what the conditional move is for, tho.
[00:17:57] <theothornhill> Yeah, because then the number will end in zero, so the condition will always be false, no?
[00:17:58] <Bike> i guess probably some sb32 times itself is a bignum, and it's a check to return that in that case?
[00:18:31] <theothornhill> Yeah, maybe, but i set safety 0 and speed 3, so probably that will fail if we overflow?
[00:19:50] <Bike> ok, yeah, i got it
[00:20:11] <Bike> -2147483648 is the only (signed-byte 32) that, squared, is not a fixnum
[00:20:43] <Bike> so, if the imul overflows, num must have been -2147483648, so the cmov arranges to return the bignum 4611686018427387904
[00:20:57] *** Joins: parjanya (~esb@177.32.12.221)
[00:21:28] <Bike> if you put in some non-(signed-byte 32), since you have safety 0, it will just return that bignum anyway
[00:22:10] <theothornhill> yeah! that's what I see as well, here
[00:22:54] <theothornhill> Right, and that bignum is (1+ most-positive-fixnum)
[00:24:17] <rotateq> theothornhill: be careful declaring (optimize (safety 0)) when full moon is, the loopus is out for hunt
[00:24:49] <theothornhill> So it's a conditional check for overflow that checks whether the shift left destroys the tag?
[00:25:17] <theothornhill> rotateq: I always go (optimize (safety 0) (debug 3) (speed 0))
[00:26:00] *** Inline__ is now known as Inline
[00:26:00] <rotateq> don't do that now! optimizations are not of strong interest for first
[00:26:24] <semz> not sure if this declaration is a typo or a joke
[00:26:28] <rotateq> maybe better learning things themselves before thinking about such things
[00:26:52] <rotateq> semz: yeah same thought here
[00:27:25] <theothornhill> :)
[00:27:32] <rotateq> in 'Common Lisp Recipes' edi clearly says the three steps of optimizing "1. don't do it. 2. don't do it. 3. don't do it (yet)"
[00:27:50] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:28:10] <rotateq> so much money and time always wasted every day in the world with directly think about over-optimizations sacrifycing other stuff
[00:28:34] <theothornhill> 4. do it when you want to look at the disassembly and compare with other things through godbolt
[00:29:10] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[00:29:32] <theothornhill> And I'd also like to get a feel for _how_ the disassembly looks, intuitively, I mean.
[00:30:07] <rotateq> shouldn't you more care really learning CL seriously?
[00:30:17] <rotateq> in your own interest
[00:30:46] <rotateq> just to beware you from pitfalls and thoughts i had in the past
[00:31:07] <theothornhill> what is really learning cl seriously?
[00:31:18] <rotateq> freeing your mind
[00:31:23] <theothornhill> from
[00:31:32] <rotateq> those other stuff?
[00:31:47] <theothornhill> what other stuff?
[00:32:00] <rotateq> this disassembly for example
[00:32:09] <rotateq> all very implementation dependent
[00:32:38] <theothornhill> yes, of course, but I learned something today
[00:32:40] <rotateq> or I'm just wrong. can someone back me up here please?
[00:32:45] <rotateq> good!
[00:32:54] <rotateq> and what?
[00:32:54] <phoe> analyzing disassemblies might be important, depending on what you do and what you are optimzing
[00:33:16] <rotateq> yes phoe of course, didn't doubt it. but for that one has to be able to read it
[00:33:40] <phoe> and a question about reading and understanding disassembly seems to be exactly what theothornhill posted up there
[00:33:45] <theothornhill> hehe, you are not wrong, and I agree with you.  The reason I'm doing this now is that I don't want to code in C to learn about x86
[00:34:05] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:34:18] <rotateq> no don't get me wrong, have high respect for everyone who is able to
[00:34:39] <theothornhill> but?
[00:34:48] <rotateq> yes theothornhill, you could usee CL as a "meta-level" for doing assembly
[00:34:56] <rotateq> but what? nothing
[00:35:23] <theothornhill> ok:)
[00:35:57] <semz> theothornhill: In case you meant (optimize (safety 0) (debug 0) (speed 3)) instead of the rather bizarre (safety 0) (debug 3), please don't, especially in public interfaces let alone everywhere. It's not the "make Lisp fast" button, it's the "make Lisp segfault on minor mistakes" button.
[00:36:23] <theothornhill> semz: hehe, don't worry.  It was a joke
[00:36:35] <semz> phew
[00:36:44] <rotateq> theothornhill: good to have you on board! and we need many point of views indeed
[00:37:06] <theothornhill> thanks :)
[00:37:15] <rotateq> so now i can sleep today :)
[00:37:59] <theothornhill> I like how you get afraid seeing stupid things on the internet
[00:38:16] <rotateq> don't say 'stupid', maybe 'different' :)
[00:38:31] <theothornhill> hehe, ok
[00:39:47] <Bike> "So it's a conditional check for overflow that checks whether the shift left destroys the tag?" a shift left isn't going to destroy the tag, since a zero bit will be shifted in
[00:40:10] <Bike> however if the imul returns a high enough number, the most significant bit will be set, and that will be shifted out by the shl, causing overflow
[00:40:11] <theothornhill> rotateq: but yeah, I think looking at the internals is very interesting.  Implementation dependent or not.  That's why I like lisp.  You can choose your abstraction level at any time, and noone (apart from irc, perhaps) will judge :P
[00:41:04] <pjb> Bike: it's not so obvious that  7 << 1 + 7 << 1 = 14 << 1  in C.  AFAICS, it depends on sizeof(int) and CHARBITS, and it expects some consistency between the undefined behavior of << and of +, which is nowhere guaranteed, since we're talking of undefined behavior of two different operators.
[00:42:13] <frodef> Is there any semi-standard (library) function that flips the args of a binary function?
[00:42:19] <pjb> Bike: you'd have to say, "assuming a CHARBITS and sizeof(int) big enough, â€¦".
[00:42:43] <phoe> frodef:
[00:42:45] <phoe> clhs complement
[00:42:45] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_comple.htm
[00:42:55] <pjb> frodef: I don't know of any library gathereing this kind of functions. I've proposed to newbies to write one several times.  Cf. Baker's functional paper.
[00:43:06] <Bike> assuming you mean like haskell flip, no
[00:43:11] <pjb> frodef: (lambda (f) (lambda (y x) (funcall f x y)))
[00:43:20] <phoe> oh, not a boolean flip
[00:43:23] <frodef> right
[00:43:24] <phoe> sorry
[00:43:35] <semz> pjb: int has a minimum range. C isn't THAT useless.
[00:43:49] <pjb> semz: right :-)
[00:43:51] <semz> It's surprisingly low though, 2^15 - 1 max iirc
[00:44:06] * rotateq flips
[00:44:51] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 256 seconds)
[00:46:14] <theothornhill> pjb: offtopic now, but isn't 7 << 1 + 7 << 1' '7 << (1 + 7) << 1' in implicit precedence?
[00:46:46] <pjb> theothornhill: yes, I think you're right, too.
[00:46:58] <Bike> luckily, this question is completely irrelevant to the point i was trying to make
[00:47:02] <rotateq> can i have it in ASH expressions? :/
[00:47:10] <pjb> I always fully parenthese my C expressions..
[00:47:22] <theothornhill> Bike: hehe yeah, sorry
[00:47:24] <Bike> (= (+ (ash 7 1) (ash 7 1)) (ash 14 1))
[00:47:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:47:35] <pjb> (= (ash 14 1) (+ (ash 7 1) (ash 7 1))) ; guaranteed.
[00:48:01] <rotateq> thanks
[00:48:33] <rotateq> pjb: as c-macros need all those parentheses. a bit ironic
[00:49:09] <Bike> before coming in with a pedantic criticism, just ask yourself: does this actually matter? am i improving the clarity of this conversation by making this point, or just making it that much more obscure for no good reason?
[00:49:10] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[00:49:43] <Bike> also, maybe don't do it if the criticism doesn't even apply within the irrelevant circumstances, as per the C minimum size
[00:50:38] <theothornhill> Sorry if I offended you. Thanks for your help. I was just trying to understand.
[00:51:22] <Bike> you're not the one i'm complaining about
[00:53:26] <rotateq> ok sry, wasn't intended like that
[00:53:51] *** ChanServ sets mode: -o Bike
[00:54:04] <theothornhill> Well, you'd be happy to know that (square most-positive-fixnum) returns that constant, and. (square (1- most-positive-fixnum)) returns 4
[00:55:14] <theothornhill> Both of which are clearly crazy results.  Seeing how safety is 0 in this case, I guess all bets are off and bogus values are preferred?
[00:55:20] <Bike> just to be perfectly clear, i am not talking about anyone but pjb
[00:55:20] <phoe> yes
[00:55:35] <phoe> if you have safety 0, then unicorns are allowed to happen and *will* happen
[00:55:55] <theothornhill> Great, my daugther loves unicorns
[00:56:08] <Bike> and yes generally speaking you should not use safety 0 for this reason
[00:56:19] <Bike> you might get segfaults, or worse, like in this case, silent and incorrect results
[00:56:19] <phoe> can be anything from an error through silently returning invalid values all the way into trashing your heap and/or stack
[00:56:31] <phoe> unicorns are somewhere on that spectrum, i just have no idea where
[00:57:04] <theothornhill> Well, you'd have to run enough code with safety 0 to find them.  I seems noone dares
[00:57:09] <rotateq> oh hmm
[00:58:11] <phoe> theothornhill: actually
[00:58:18] <phoe> (ql:quickload :jsown) or (ql:quickload :jonathan)
[00:58:26] <phoe> that's two json parsers that dare, both sorta popular
[00:58:42] <theothornhill> Oh great news!
[00:59:30] <phoe> there's a reason why I have two sb-ext:restrict-compiler-policy calls in my rc file - one for safety 3, the other for debug 3
[00:59:49] <mfiano> ^
[01:00:01] <EdLangley[m]> Or, you could live life on the edge and restrict-compiler-policy to safety 0
[01:00:43] <phoe> (optimize (everything 0))
[01:00:50] <mfiano> I think that edge is not really there and you are falling to your doom, you just haven't realized it yet, like Wile. E. Coyote.
[01:03:08] <theothornhill> rotateq: see? It's learning in doing stupid things :)
[01:03:08] <pjb> Bike: I just like to poke fun at C.
[01:03:42] <phoe> I share the sentiment but it's a wee bit off topic on #commonlisp
[01:03:43] <rotateq> theothornhill: I can just do stupid and unuseful stuff :) and of course asking dumb questions
[01:03:48] <semz> (safety 0) doesn't really do all that much outside of special situations (where you're better of with a (locally (declare ...) ...)) anyway, it's usually some 10%
[01:04:02] <semz> at most
[01:04:14] <semz> array heavy stuff is the exception ime
[01:05:36] <rotateq> i often wrap classes where slot-types shall be explicitely checked (and not just having it for kind/part of documentation) with (locally (declare (optimize (safety 3))) ...)
[01:05:56] <theothornhill> Bike: the clc in that disassembly though.  I read somewhere sometime that that was for extra values as in (values 'foo 'bar). Why isn't that removed in compilation when the function makes to calls to values?  If I'm correct, that is
[01:06:08] <rotateq> or defining more precise checks in {initialize,allocate}-instance :after
[01:06:46] <theothornhill> s/makes to/makes no
[01:06:55] <phoe> AFAIK CLC is called if a function only returns one value
[01:06:59] <Alfr> Though (safety 0) sometimes is useful, e.g. when trying to match the disassemble output with the code I wrote.
[01:07:03] <Bike> theothornhill: it still needs to indicate to the caller that exactly one value was returned. as explained in http://www.sbcl.org/sbcl-internals/Unknown_002dValues-Returns.html#Unknown_002dValues-Returns this is indicated by clearing the carry flag.
[01:07:12] <Bike> this is done by*
[01:07:32] <Bike> (this is an "unknown values" return because the caller knows nothing about this function)
[01:10:58] <theothornhill> Bike: thanks!  Interestingly it seems to me from reading this, that returning more than three values might be slower, since it involves the stack, but <= 3 values does not.
[01:11:52] <Bike> probably, but also the caller's code might be a little slower with multiple values versus one, since it has to do a little more to determine the number of values
[01:12:33] <theothornhill> Makes sense
[01:13:05] <Bike> it can get subtle. if the caller is expecting some number of values, due to a type declaration or whatever, that might be a little more optimized. i don't know.
[01:14:23] <theothornhill> My guess is that if performance would be that important you'd probably not return multiple values at all, or not use lisp in the first place
[01:15:01] <Bike> well, this probably won't be a bottleneck anyway, compared to boxing floats or something
[01:15:12] <theothornhill> yeah
[01:24:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:32:56] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net) (Ping timeout: 250 seconds)
[01:37:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:45:35] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f2:194d:cb9:cc5e:e1e1:b058)
[01:48:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:48:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:57:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:59:50] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:00:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:03:03] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f2:194d:cb9:cc5e:e1e1:b058) (Read error: Network is unreachable)
[02:03:06] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a8db:9189:8a89:f75c)
[02:09:05] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[02:13:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:14:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:21:02] <masinter> the franz PDF of dpANS converts to HTML OK. I imagine it would be better to start w'ith the tex
[02:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:24:47] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:31:21] <Xach> There were at some point like 5 efforts to process the dpANS tex sources
[02:32:22] <mfiano> At some point, but at all points, likely higher (I never even mentioned mine publicly)
[02:34:35] *** Quits: pve (~pve@178-55-100-139.bb.dnainternet.fi) (Quit: leaving)
[02:40:09] <masinter> https://interlisp.org/cl-ansi-standard-draft-w-sidebar.html
[02:40:37] <masinter> I'll probably rename it
[02:42:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:42:57] *** Joins: parjanya (~esb@177.32.12.221)
[02:49:12] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[02:49:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:50:35] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) ()
[02:51:06] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[02:51:25] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) (Client Quit)
[02:51:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:56:29] *** Joins: jpl01 (~user@2001:16b8:4901:fe00:f644:7c5e:b17b:4bc)
[03:03:18] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 256 seconds)
[03:03:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:04:56] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:05:40] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[03:05:46] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[03:06:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:06:30] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[03:22:48] <mzan> theothornhill: eh, if you came from C, (signed-byte 32) is "error-prone". You had to change mentality.
[03:23:07] <mzan> It is not a phisical 32 bit value.
[03:23:48] <mzan> You are saying to Lisp that you want to manage numbers with a range of (- 0 (ash 1 31)) to (ash 1 31)
[03:24:06] <mzan> Every Lisp implementation can manage these numbers internally in different formats.
[03:24:31] <mzan> For example usually in SBCL, in 64 bit platforms the last 3 bits of a number are used as tag.
[03:24:53] <mzan> So you can manage as a single word number only numbers with 61 bits.
[03:25:43] <mzan> For example with this formula you can discover the tag bits used in your platform
[03:25:44] <mzan> (defconstant +max-bits+ (- (max (integer-length most-positive-fixnum) (integer-length most-negative-fixnum)) 1)
[03:25:44] <mzan>   "After these bits, native numbers are not any more nice inside CL run-time, because they will be big numbers.
[03:25:44] <mzan> I subtract 1 bit for avoiding problems with signed fixnum. This is not optimal, but for this code example, good enoxgh.")
[03:26:05] <mzan> This work for fixnum. I don't know how to adapt for (signed-byte 32)
[03:26:44] <mzan> In CL it is the contrary of C. You don't think to number formats. The CL will change numeric format automatically if it discover an overflow during calculations.
[03:26:49] <mzan> So results will be always exacts.
[03:26:55] <mzan> Exacts, but sometime a little slower.
[03:27:12] <mzan> Only in the end, if you want very fast code, then you can starting optimizing the code.
[03:28:41] *** Joins: igemnace (~ian@user/igemnace)
[03:32:35] <White_Flame> (ackchyually, 64-bit SBCL supports 63-bit fixnuns, which is kinda cool)
[03:34:08] <mzan> ah sorry yes
[03:34:09] <mzan> (max (integer-length most-positive-fixnum) (integer-length most-negative-fixnum))
[03:34:24] <mzan> returns 62 bit. So 62 bit of content and 1 bit for the sign = 63 bit.
[03:34:57] *** Joins: ski (~ski@remote11.chalmers.se)
[03:35:27] *** Joins: vats (~vats@180.149.226.41)
[03:38:24] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a8db:9189:8a89:f75c) (Remote host closed the connection)
[03:39:00] *** Joins: Oladon (~olad@98.43.81.226)
[03:40:21] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[03:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:41:52] *** Joins: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de)
[03:42:43] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:50:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:57:57] *** Quits: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:58:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:10:27] <moon-child> mzan: two's-complement is not sign-and-magnitude
[04:14:22] <moon-child> NB. spec note sez: 'Regardless of the sign of integer, its value can be represented in signed binary two's-complement form in a field whose width in bits is no smaller than (+ (integer-length integer) 1).'
[04:15:14] <Bike> yeah, but integer-length plus one should work anyway.
[04:15:57] *** Joins: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de)
[04:17:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:18:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:21:53] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:24:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:24:51] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:25:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:28:22] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:29:26] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[04:33:47] *** Quits: gaqwas (~john@dynamic-095-114-116-030.95.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:34:59] *** Joins: occ (~occ@user/occ)
[04:36:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:44:18] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:48:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:49:10] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[04:49:27] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:51:15] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:54:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:00:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[05:01:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:05:49] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[05:08:21] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[05:08:35] *** Joins: parjanya (~esb@177.32.12.221)
[05:15:14] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[05:17:15] *** Joins: notzmv (~zmv@user/notzmv)
[05:17:28] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[05:17:58] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:35:02] *** Joins: notzmv (~zmv@user/notzmv)
[05:40:27] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:45:47] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:d57f:4bb8:924b:5be3)
[05:59:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:05:44] *** Quits: jpl01 (~user@2001:16b8:4901:fe00:f644:7c5e:b17b:4bc) (Remote host closed the connection)
[06:12:26] *** Quits: vats (~vats@180.149.226.41) (Ping timeout: 250 seconds)
[06:13:04] *** Joins: jeosol (~jeosol@user/jeosol)
[06:13:31] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[06:24:11] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:56:20] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[06:58:35] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:d57f:4bb8:924b:5be3) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:59:10] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[07:10:50] *** Quits: gko` (~user@2400:8902::f03c:91ff:fe70:e605) (Quit: ERC (IRC client for Emacs 27.2))
[07:11:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:11:37] *** Joins: gko (~user@user/gko)
[07:12:27] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[07:12:57] <lisp123> beach: Congratulations on the latest paper (ELS) and also retirement! Hopefully many more new papers under the banner of 'Unaffiliated' ;)
[07:13:01] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[07:14:14] <lisp123> There were a few referring to the Draft Standards - here is a copy of the HTML https://mr.gy/ansi-common-lisp/
[07:20:02] <beach> lisp123: The paper has not even been submitted yet, so congratulations in that domain shall have to wait until the referees have given their opinion.
[07:20:58] <lisp123> beach: Ah sorry, it is early here so my brain is a bit fuzzy
[07:26:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[07:27:56] *** Joins: pillton (~user@115-64-139-176.static.tpgi.com.au)
[07:30:15] <beach> Oh, and.... Good morning everyone!
[07:31:01] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:455b:c754:d1e5:81c5)
[07:34:13] *** Joins: parjanya (~esb@177.32.12.221)
[07:36:53] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:455b:c754:d1e5:81c5) (Ping timeout: 268 seconds)
[07:40:50] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[07:42:00] <|smlckz|> how can i do biwise right shift?
[07:42:10] <Bike> (ash whatever -howmuch)
[07:43:09] <|smlckz|> :o how long did it take for you to type that?
[07:43:26] <Bike> 1870 ms
[07:43:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[07:49:48] <|smlckz|> hmm, how else can i convert a number to a list of its digits in base 2 (e.g. 11 -> '(1 0 1 1)) in a way faster or simpler than converting to and from string?
[07:50:15] <|smlckz|> s/faster or//
[07:50:46] *** Quits: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93) (Quit: ERC (IRC client for Emacs 27.1))
[08:06:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:09:05] *** Joins: occ (~occ@user/occ)
[08:10:21] <dre> |smlckz|, that reminds me of aoc, let me check...
[08:10:59] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[08:11:09] *** Quits: copec (~copec@schrodbox.unaen.org) (Quit: checkity check out.)
[08:11:28] *** Joins: copec (~copec@schrodbox.unaen.org)
[08:11:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Read error: Connection reset by peer)
[08:11:40] <dre> oh sorry that was other way around.. binary to number is just through (parse-integer :radix 2)
[08:11:52] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:11:54] <EdLangley[m]> |smlckz|: I think there's a way to convert a number to a bit vector
[08:12:30] <EdLangley[m]> Hmm, I might be thinking of the bit-smasher system
[08:22:03] *** Joins: semz_ (~semz@user/semz)
[08:24:36] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:26:37] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[08:28:22] *** semz_ is now known as semz
[08:31:44] <Bike> well, if you're consing up a list it's probably not going to be fast regardless, but the most straightforward way might be something like (loop for i below (integer-length num) collect (ldb (byte 1 i) num)))
[08:33:07] <|smlckz|> is there list compare functions (like equal) for less than and greater than operations?
[08:34:41] <Bike> if the lists are the same length, you can use cl:every
[08:34:48] <Bike> (every #'< '(1 2 3) '(4 7 9)) => T
[08:35:25] <moon-child> I was assuming lexicographic comparison
[08:35:28] <Bike> if you're comparing lists of binary digits, you can do way faster, though
[08:35:36] <moon-child> such that e.g. (1 1 2) is less than (1 1 3)
[08:37:06] <Bike> if you have nonnegative integers a and b, and want to check that all binary digits of a are less than or equal to those of b, you can do (zerop (logandc2 a b))
[08:41:04] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:48:00] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:54:14] *** Joins: Guest1436 (~Guest14@2405:201:3003:8024:348e:466c:a606:1eb8)
[09:57:11] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:58:54] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[09:59:51] *** Joins: parjanya (~esb@177.32.12.221)
[10:02:21] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:c8cd:ea83:c8cd:4ca3)
[10:02:54] *** Guest1436 is now known as spongebob
[10:03:16] *** spongebob is now known as bobbybob
[10:06:36] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[10:10:01] *** Quits: bobbybob (~Guest14@2405:201:3003:8024:348e:466c:a606:1eb8) (Quit: Client closed)
[10:11:42] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[10:13:23] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[10:21:32] *** Joins: occ (~occ@user/occ)
[10:27:14] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[10:27:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:35:35] *** Joins: occ (~occ@user/occ)
[10:39:10] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[10:41:17] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:48:53] *** Joins: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:7e02:e8e6:233b:383c)
[10:53:58] <frodef> 'morn
[11:03:42] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:10:33] <beach> Hello frodef.
[11:14:11] <beach> frodef: So have you completely given up on Movitz?
[11:14:29] <beach> I am asking because you seem to be doing web stuff instead.
[11:15:21] <frodef> beach: Well, given up in the sense that 32-bit is pretty much dead, yes.
[11:15:43] <beach> Well, I was expecting a Movitz-64.
[11:16:25] <frodef> beach: I haven't given up on that, but can't really prioritize it at the moment.
[11:16:39] <beach> I see.
[11:17:06] <ecraven> how do I best deal with binary data in CL? I'd like some way to read an entire file into an array, then access differently-sized integers at certain offsets (unsigned-16le, signed-32be, and so on). what functions should I look at here?
[11:18:28] <phoe> lisp-binary comes to mind, and so does nibbles
[11:18:53] <phoe> although lisp-binary reads into objects rather than just arrays
[11:19:08] <phoe> so nibbles will be a better fit
[11:22:35] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:24:46] *** Joins: simendsjo (~user@84.211.91.241)
[11:26:32] <foxfromabyss> Any advice on which websocket library should I use for a websocket client?
[11:26:33] <foxfromabyss> I've managed to find `websocket-driver` which mysteriously gets a connection closed instantly and I am not sure how to debug that
[11:26:33] <foxfromabyss> and `usocket`, where I would have to reimplement `wss` myself on top of TCP streams :(
[11:38:19] *** Joins: frgo (~frgo@2a01:1e8:c003:9306:e4cd:b4e3:a46b:480)
[11:42:32] *** Quits: frgo (~frgo@2a01:1e8:c003:9306:e4cd:b4e3:a46b:480) (Ping timeout: 240 seconds)
[11:42:48] <mgl> About two years I got websocket-driver to work for some toy stuff.
[11:43:05] <mzan> ecraven: I'm not an expert, but I would try with something like
[11:43:06] <mzan> (let* ((file-size (...))
[11:43:06] <mzan>        (buffer  (make-array file-size :adjustable nil :element-type 'bit)))
[11:43:06] <mzan>    (read-sequence buffer s))
[11:43:06] <mzan>  
[11:43:43] <mzan> "s" is the input stream of the file
[11:44:27] <ecraven> how would I then access data from that array?
[11:46:23] *** Joins: shka (~herr@109.231.0.226)
[11:47:04] <phoe> bit-smasher could help
[11:47:45] <mzan> ecraven: I don't know. But I'm sure that "read-sequence" is very very fast, and that CL supports bitvectors in an efficient way.
[11:49:11] <mzan> If you specify the element type, and that it is not adjustable, the array becomes something similar to a C array.
[11:49:31] <mzan> (in case the element type has known fixed size)
[11:49:55] *** Joins: gaqwas (~john@dynamic-095-118-114-073.95.118.pool.telefonica.de)
[11:54:50] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[11:57:37] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:58:48] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[11:58:48] *** karlosz_ is now known as karlosz
[12:01:35] *** Joins: pve (~pve@178-55-48-98.bb.dnainternet.fi)
[12:03:21] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:13:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:22:24] *** Joins: foxfromabyss3 (~foxfromab@2a01:c22:b09c:4000:8c4d:e91b:d61d:c14d)
[12:25:29] *** Joins: parjanya (~esb@177.32.12.221)
[12:26:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:26:23] *** Quits: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:7e02:e8e6:233b:383c) (Ping timeout: 256 seconds)
[12:30:01] <EdLangley[m]> foxfromabyss: I've been using websocket-driver for a couple years now without any issues
[12:30:06] *** Quits: shinohai[m] (~shinohaim@2001:470:69fc:105::1:55ef) (Quit: You have been kicked for being idle)
[12:30:52] <foxfromabyss3> I see, thanks
[12:30:52] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[12:36:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[12:37:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:37:40] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[12:37:54] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[12:40:43] <jdz> mzan: Pretty sure operating with octets instead of bits is way more ergonomic in CL.
[12:41:05] <jdz> Given an array.
[12:41:20] *** Joins: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:8c4d:e91b:d61d:c14d)
[12:41:53] <jdz> Reduces the number of "operations" by a factor of 8.
[12:42:12] <moon-child> there are bitarrays
[12:42:16] <moon-child> and bignums
[12:45:05] *** Quits: foxfromabyss3 (~foxfromab@2a01:c22:b09c:4000:8c4d:e91b:d61d:c14d) (Ping timeout: 256 seconds)
[12:51:36] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:51:53] *** Joins: frgo (~frgo@2a01:1e8:c003:9306:e4cd:b4e3:a46b:480)
[12:53:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[12:53:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:59:15] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[13:11:44] *** Quits: occ (~occ@user/occ) (Ping timeout: 268 seconds)
[13:18:36] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl)
[13:24:48] *** Quits: frgo (~frgo@2a01:1e8:c003:9306:e4cd:b4e3:a46b:480) (Remote host closed the connection)
[13:24:55] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[13:28:47] *** Joins: frgo (~frgo@62-210-205-16.rev.poneytelecom.eu)
[13:33:25] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[13:34:58] <nij-> I run `/usr/local/bin/sbcl` in root, eval (asdf:?), and gets the error "Package ASDF does not exist.". However, running the same sbcl as the normal user doesn't have this problem - asdf is loaded automatically. Why?..
[13:35:37] <flip214> nij-: perhaps your user ~/.sbclrc has a (require :asdf)
[13:36:56] <nij-> Oh. It seems quicklisp/setup.lisp does that favor for my user.
[13:38:08] <nij-> Well, I don't want to have quicklisp for root. What's the minimal way for the sbcl to find where asdf is?
[13:38:19] <nij-> I suppose on archlinux asdf comes with sbcl.
[13:38:57] *** Quits: frgo (~frgo@62-210-205-16.rev.poneytelecom.eu) (Ping timeout: 240 seconds)
[13:41:53] <flip214> nij-: SBCL has ASDF as a contrib - so the (require :asdf) should be enough to load ASDF.
[13:42:20] <flip214> then you can use asdf:*central-registry* to define where to load systems from
[13:42:39] <flip214> https://asdf.common-lisp.dev/asdf/Configuring-ASDF-to-find-your-systems-_002d_002d_002d-old-style.html
[13:43:07] <nij-> Indeed! Thanks :)
[13:44:53] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[13:50:11] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:35da:7bb3:e3f8:3a44)
[13:50:32] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[13:51:03] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[13:59:08] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[14:01:11] <EdLangley[m]> You can also load systems manually with (asdf:load-asd "/absolute/path/to/system.asd")
[14:01:30] <EdLangley[m]> I do this a lot with systems I've cloned from git
[14:07:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[14:07:24] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2c0a:4451:b68c:ba77)
[14:09:45] *** Quits: utis (~utis@84.208.160.26) (Remote host closed the connection)
[14:13:10] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:13:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:16:08] *** Lord_of_Life_ is now known as Lord_of_Life
[14:32:04] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[14:39:26] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:44:57] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[14:51:10] *** Joins: parjanya (~esb@177.32.12.221)
[14:54:37] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[14:55:17] *** Joins: kevingal (~quassel@2001:770:c0:401:4573:51f6:5384:5305)
[14:57:57] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[15:04:42] <theothornhill>  mzan: thanks :) Yes, this wasn't really about optimizing any code, I just like too peek inside the box.
[15:05:03] *** Quits: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:8c4d:e91b:d61d:c14d) (Ping timeout: 256 seconds)
[15:05:24] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:493b:6ac0:af6e:1637)
[15:07:55] *** Quits: pillton (~user@115-64-139-176.static.tpgi.com.au) (Remote host closed the connection)
[15:09:31] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:2c0a:4451:b68c:ba77) (Ping timeout: 268 seconds)
[15:18:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:20:10] *** Quits: dre (~dre@2001:8003:c932:c301:154c:d733:7b9b:7bcb) (Ping timeout: 250 seconds)
[15:32:02] *** Joins: dre (~dre@2001:8003:c932:c301:6ef3:5315:93ef:2b0a)
[15:33:34] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:493b:6ac0:af6e:1637) (Ping timeout: 268 seconds)
[15:34:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:37:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:493b:6ac0:af6e:1637)
[15:47:33] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Ping timeout: 276 seconds)
[15:50:05] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[15:57:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:00:14] <rotateq> Hm how about the capabilities of CL in dealing with floats at "low level"? At one point in TAoCP Knuth says most languages don't offer much. but may be also more implementation dependent
[16:02:04] <rotateq> not that I'm a big fan of doing everything with floats :) symbolic computing benefits from having exact integers and realtions on them
[16:05:55] <phoe> low level, as in?
[16:05:59] <phoe> a sequence of bits?
[16:07:17] <rotateq> yes I think he means that
[16:07:39] <rotateq> or that maybe "floats" come mostly as kind of black boxes
[16:07:41] <moon-child> rotateq: depending on your needs.  INTEGER-DECODE-FLOAT may be sufficient.  Or crap, in which case there is a portability librar
[16:07:43] <moon-child> y
[16:08:08] <rotateq> yes thanks moon-child, i've seen it lately, but didn't use it till now :)
[16:08:54] <rotateq> trivial-floats
[16:09:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:10:01] <rotateq> phoe: "The most programming languages nowadays don't give programmers much possibilities to manipulate floating point numbers."
[16:10:34] <rotateq> in the end, an integer and a float can have same bits. the interpretation counts
[16:10:41] *** Joins: gw1 (g-w1@2600:3c03::f03c:92ff:fe2f:c92f)
[16:11:22] <moon-child> I disagree
[16:11:39] <rotateq> yes you like to disagree
[16:11:40] <moon-child> 'integer' and 'float' are distinct objects interactible according to distinct interfaces
[16:11:50] <moon-child> that they may be represented the same way is an implementation detail
[16:11:53] <moon-child> rotateq: so sue me :)
[16:11:56] <rotateq> i meant at hardware level
[16:12:13] <moon-child> eh
[16:12:20] <moon-child> float and int ops go to different execution ports
[16:12:20] <rotateq> no moon-child, just an observation :)
[16:12:41] <moon-child> in many cases also different registers
[16:12:56] <rotateq> so then sue me, as I'm not wise enough with the topic yet and made such dumb comment ^^
[16:13:07] <rotateq> but good to know, thank you :)
[16:14:42] <rotateq> i meant it more on the level, a message with maybe the same containment, but differently interpreted in different contexts
[16:14:43] <phoe> standard CL won't help you because floats and integers are of different types and the standard does not make any assumptions even whether IEEE-754 is used
[16:14:54] <phoe> only implementation-dependent stuff is left for you
[16:15:04] <rotateq> oki phoe :)
[16:15:55] <rotateq> i think that's good that the standard enslaves itself not to IEEE (or does it at other points? .. now i look how old this IEEE thingy is)
[16:16:37] <rotateq> as in, that a byte is just standardised at most hardware nowadays to 8bit, but that doesn't mean it's a must
[16:16:56] <phoe> there's the question of standards versus de facto standards
[16:17:11] <rotateq> yes
[16:17:41] <phoe> hot take: all contemporary architectures that matter use 8-bit bytes and IEEE-754 floats and either 32 or 64 bits as machine word sizes
[16:17:46] <rotateq> "oh, your standard doesn't have regexes or unicode defined?"
[16:18:11] <phoe> cool take: it's possible to not care too much and have generic support for everything, and then have implementation-specific optimized code for fast paths
[16:18:12] <rotateq> yes and that's okay, but also more special purpose then
[16:18:23] <rotateq> :)
[16:18:38] <rotateq> okay, IEEE is from 1963
[16:18:47] <phoe> the latter is the CL way and also why arrays of (unsigned-byte 8) or (... 16) or (... 32) or (... 64) can get special treatment
[16:18:59] <rotateq> but even this can make big mistakes in defining "standards"
[16:19:12] <phoe> unlike e.g. arrays of (... 36) which would perhaps be optimizable on 6-bits-per-byte architectures
[16:19:52] <rotateq> as in the MIX machine by Knuth :)
[16:20:09] <rotateq> but okay, it's polyunsaturated
[16:24:11] <Alfr> rotateq, ieee 754's first version was from 1985.
[16:24:41] <rotateq> Alfr: okay yes for this 754, i looked up when they formed as an organization
[16:25:08] <rotateq> so even 754 after CLtL1 :D
[16:25:43] <Alfr> rotateq, and you should be able to test for it by checking for :ieee-floating-point in *FEATURES*.
[16:26:05] <phoe> ;; latest CCL release has a bug in this regard
[16:26:07] <rotateq> oh right, I've seen this one indirectly from time to time
[16:26:40] <Alfr> phoe, they finally abandoned ieee754 for greener pastures? :)
[16:27:07] <rotateq> yesterday i loaded sb-simd by heisig, now i just have to learn how to use when i need it ^^ and then i pushed of course :sb-simd to *features* too
[16:27:40] <Alfr> rotateq, it's one of the few things in *FEATURES* the spec defines.
[16:27:52] <phoe> Alfr: no, the feature is missing
[16:28:02] <rotateq> okay can you show me where then?
[16:28:06] <rotateq> oh hm.
[16:29:15] <rotateq> in a nice talk by John Hughes about using property testing in automotive he has a funny line with "And with quickcheck we found 200 bugs in some of the applied IEEE standards."
[16:30:24] <Alfr> phoe, CCL found bugs in the FP implementations on all supported platforms, thus don't claim conformance to 754 anymore. ;)
[16:30:29] <Alfr> phoe, just kidding.
[16:30:34] <rotateq> hm which keywords does the spec even clearly says must be in *features*? maybe :ansi-cl, :common-lisp, ...
[16:31:33] <Alfr> clhs *features*
[16:31:34] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_featur.htm
[16:31:38] <Alfr> rotateq, ^
[16:39:33] *** Joins: gamaliel (~gamaliel@24.171.221.75)
[16:43:50] *** Quits: gamaliel (~gamaliel@24.171.221.75) (Client Quit)
[16:46:54] *** Joins: occ (~occ@user/occ)
[16:57:30] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[16:57:30] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Excess Flood)
[16:59:37] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[17:02:06] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[17:02:29] <rotateq> thanks Alfr :( [i was busy in kitchen cleaning]
[17:02:48] <rotateq> okay, that was too obvious :D
[17:06:57] *** Joins: occ (~occ@user/occ)
[17:10:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[17:11:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:12:50] *** Quits: dre (~dre@2001:8003:c932:c301:6ef3:5315:93ef:2b0a) (Ping timeout: 250 seconds)
[17:16:45] *** Joins: parjanya (~esb@177.32.12.221)
[17:18:47] <rotateq> lel here's a presentation where they claim the ANSI CL standard is from 2004
[17:22:45] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[17:25:33] *** Joins: dre (~dre@2001:8003:c932:c301:5559:1784:a76e:c418)
[17:30:39] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:39] *** ChanServ sets mode: +o Bike
[17:43:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:44:55] <rotateq> so i sent an email and requested an issue as it's a university course about robot programming :)
[17:51:21] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[17:55:16] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[17:55:18] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[18:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:04:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:17:23] *** Joins: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93)
[18:29:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:31:22] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[18:34:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:36:06] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:36:21] *** Quits: jealousmonk (~user@2804:431:e7c4:f875:847b:37db:2997:bc93) (Remote host closed the connection)
[18:36:36] *** Joins: jealousmonk (~user@2804:431:e7c4:f875:45b7:bdab:9c03:331c)
[18:47:56] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:49:24] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Remote host closed the connection)
[18:53:36] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[18:57:15] *** Parts: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Leaving)
[18:58:38] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[18:59:39] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[18:59:45] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:00:32] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Client Quit)
[19:09:56] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:13:32] *** Quits: dre (~dre@2001:8003:c932:c301:5559:1784:a76e:c418) (Ping timeout: 240 seconds)
[19:18:27] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[19:20:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:20:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:21:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:21:11] *** Quits: gin (~gin@user/gin) (Ping timeout: 256 seconds)
[19:21:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:21:32] *** Joins: gin (~gin@user/gin)
[19:21:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:24:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:25:16] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[19:25:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:25:48] *** Joins: dre (~dre@2001:8003:c932:c301:f51b:a6a3:7655:7551)
[19:35:37] <mfiano> What would be a decent way to check if two lists of integers, both of length N, have every element approximately equal to each, with an absolute tolerance +/- M ?
[19:36:19] <mfiano> I could write this a million ways, but just trying to get a second opinion.
[19:36:21] <Bike> do you mean comparing elementwise, or something else? i'm not sure what "every approximately equal to each" means
[19:36:26] <mfiano> Elementwise yes
[19:36:54] <Bike> i would just do (every (lambda (n1 n2) (< (abs (- n1 n2)) m)) l1 l2)
[19:37:08] <pjb> mfiano: sort both lists, and compare the sorted lists element by element.
[19:37:42] <mfiano> Order is very important, and I'm not sure what sorting accomplishes here.
[19:37:42] <pjb> so indeed: (every (lambda (n1 n2) (< (abs (- n1 n2)) m)) (sort l1 '<=) (sort l2 '<=))
[19:38:06] <pjb> modulo every stops at the shortest list, and you want lists of the same length.
[19:38:32] <mfiano> Umm
[19:38:38] <pjb> Oh, elementwise. So no sorting.
[19:40:07] <mfiano> Ok, let me see. I'm not yet sure if I want to use EVERY. It's unclear still if I need to find out the position they differ.
[19:40:19] <mfiano> I will experiment with this though for now, thanks.
[19:40:38] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:c8cd:ea83:c8cd:4ca3) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:40:54] <semz> could use (not (some (lambda (n1 n2) (>= ...)))) instead, which is easily changeable to position-if
[19:42:07] <Bike> if you need the position, (mismatch l1 l2 :test (lambda ...))
[19:42:28] <mfiano> Yeah mismatch is one of my favorite least used functions :)
[19:42:43] <Bike> i don't think i have ever used it.
[19:42:54] <semz> I didn't know it existed lol
[19:42:57] <mfiano> I have, like twice in 15 years, where it was perfect.
[19:46:58] <mfiano> Hmm this won't do, and also is not quite correct somehow.
[19:47:47] <Bike> what is incorrect?
[19:47:55] <mfiano> I will make a paste, one moment
[19:52:31] <mfiano> Bike: https://gist.github.com/mfiano/03ce3ecd67c60dba55faa49a91c7b6ae
[19:54:17] <mfiano> edited, small typo
[19:55:12] <Bike> just as well, i don't really know what any of this means
[19:55:21] <semz> it'd have to be <= not <, no?
[19:55:44] <semz> I was under the impression that you're comparing integers
[19:56:18] <mfiano> semz: Yes, with <= it works, and yes, integers.
[19:56:52] <mfiano> However, when a failure occurs, I don't want to see NIL is not T...so some slight fiddling is needed still.
[19:58:54] <mfiano> Oh, apparently, I'm dumb.
[19:59:04] <mfiano> I don't need this tolerance testing after all, it seems.
[19:59:20] <mfiano> But it will likely come in useful for some of the slightly lossy conversions to be tested later.
[19:59:29] <mfiano> Apparently that TRUNCATE by #xFF is wrong.
[19:59:55] <mfiano> #xFF and #x101 give off-by-one errors sometimes, but #x100 is always correct.
[20:00:08] <mfiano> I guess I just don't know how to bit twiddle
[20:00:14] *** Joins: spiaggia (~user@109.190.253.16)
[20:01:32] *** Quits: jealousmonk (~user@2804:431:e7c4:f875:45b7:bdab:9c03:331c) (Remote host closed the connection)
[20:01:32] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f2:194d:493b:6ac0:af6e:1637) (Read error: Connection reset by peer)
[20:01:34] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[20:01:42] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:02:10] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[20:02:11] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:31da:f492:e26b:89fa)
[20:06:05] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:819d:3b6a:9a6f:c60e)
[20:07:50] *** Quits: spiaggia (~user@109.190.253.16) (Ping timeout: 256 seconds)
[20:08:00] <Guest74> you're converting 16bit to 8bit?Â  for lossy just shift right?
[20:08:28] <Guest74> truncate will also not get you correct rounding if you're trying to be correct.
[20:08:32] <mfiano> Not entirely a bitwise conversion.
[20:09:15] <Guest74> sorry, i dont understand what that means.
[20:09:20] <White_Flame> truncating is probably more correct
[20:09:22] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:09:34] <White_Flame> ffff => ff.ff rounds to 100.00 which is out of range
[20:09:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:10:25] <Guest74> (truncate #xffef 257) gives 254 when should be 255
[20:10:57] <White_Flame> yeah, a 257 divisor is probably not correct
[20:11:09] <White_Flame> at least without rounding fixup
[20:11:14] <mfiano> It should be 256
[20:11:23] <White_Flame> no, you don't want 256
[20:11:39] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[20:11:41] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:31da:f492:e26b:89fa) (Ping timeout: 268 seconds)
[20:11:49] <Guest74> 257 is pretty standard.
[20:11:51] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[20:11:59] <mfiano> 255 and 257 give an off-by-one error ocassionally for me. Just tried 1 million random colors with 256 and it always works :shrug:
[20:12:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:12:57] <White_Flame> I would do right shift by 8 and truncate the lower bits
[20:13:15] <White_Flame> think about scaling up by multiplying by 257
[20:13:31] <White_Flame> the lower bits are generate above 0.5 without rounding up the upper bits
[20:13:40] <Guest74> (truncate #x100 256) gives 1, with 257 it gives 0.Â  You want integers between 0-255 or 1-256?
[20:13:53] <White_Flame> eg, if #xf0 scales up to #xf0f0, then rounding to #xf1 is not correct
[20:15:16] <mfiano> Why not?
[20:15:23] <mfiano> (truncate (* #xf0 257) 256) ; => #xf0
[20:17:04] <White_Flame> right, that's correct.  although ash is "cheaper" and IMO more clear than truncate
[20:17:17] <Guest74> ash will keep white but not black.
[20:17:30] <White_Flame> what do you mean?
[20:18:26] <Guest74> or maybe it's the other way around.Â  You will lose either pure white or pure black.
[20:18:47] <White_Flame> I don't think so
[20:18:54] <Guest74> trying to find my notes when I surveyed what most graphics packages were doing,
[20:18:57] <White_Flame> this is going round trip from 8bit to 16bit back to 8bit
[20:19:24] <White_Flame> since the lower 8 bits of the 16 bit values are constructed, they should only hit the high 8 bits if they actaully overflow into it, and rounding will add artificial change
[20:20:43] <White_Flame> if you start with 16 bit values where the lower bits are meaningful, then that's another story
[20:21:09] <Guest74> yeah, i work in 16bit for most things.
[20:21:41] <Guest74> which is how it should be imo
[20:23:27] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[20:23:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:24:11] <Guest74> round trip colour space conversions using 8bit with most formulae can lose upto 70% of your information depending on space you're converting to.
[20:25:09] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Remote host closed the connection)
[20:26:35] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[20:28:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:29:37] *** Joins: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:94c3:2af7:d8a3:e7b7)
[20:31:22] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:31da:f492:e26b:89fa)
[20:31:45] <Guest74> mfiano: what are you working on now?Â  I seem to recall there was quite a good colourspace library out there.
[20:31:51] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f2:194d:7058:4772:5881:e06)
[20:32:04] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Read error: Connection reset by peer)
[20:32:15] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f2:194d:7058:4772:5881:e06) (Read error: No route to host)
[20:32:23] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f2:194d:e0c8:18f6:f07a:a6a9)
[20:32:55] <mfiano> A private special purpose tool that requires some rather opinionated low-level choices.
[20:33:25] <White_Flame> still porting from Go code?
[20:33:51] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:34:08] <mfiano> Not really porting. Used it as one of several sources.
[20:34:15] *** Joins: Josh_2 (~user@37.25.47.130)
[20:34:37] <Josh_2> Hello
[20:36:21] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:31da:f492:e26b:89fa) (Ping timeout: 268 seconds)
[20:39:27] *** Joins: Catie (~user@user/catie)
[20:39:57] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 240 seconds)
[20:45:17] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[20:45:23] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[20:46:13] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f9:d1b2:e0c8:18f6:f07a:a6a9)
[20:49:55] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f2:194d:e0c8:18f6:f07a:a6a9) (Ping timeout: 268 seconds)
[20:50:50] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:819d:3b6a:9a6f:c60e) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:54:25] *** Joins: spiaggia (~user@141-160-190-109.dsl.ovh.fr)
[20:54:49] *** ChanServ sets mode: -o Bike
[20:56:03] *** Joins: IPmonger (~IPmonger@172.58.206.212)
[20:56:17] *** Quits: IPmonger (~IPmonger@172.58.206.212) (Remote host closed the connection)
[21:00:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:01:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[21:02:31] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[21:06:24] <Guest74> So I'm writing a surface protocol. surfaces being things that can be drawn/displayed to, so far have networked x11, renderx11, linux framebuffer, rasters.Â  And wondering if I should separate some things out into a separate protocol and what would it be called.Â  I have things like VISIBLE?,LOCATION and MOVE(or parent which i'm thinking of adding)
[21:06:25] <Guest74> which don't really apply to things like pixmaps or textures. Should I separate those out or just specify what get's returned if a gf doesn't apply to that type of surface?
[21:08:33] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:09:59] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:10:18] *** Quits: dre (~dre@2001:8003:c932:c301:f51b:a6a3:7655:7551) (Ping timeout: 250 seconds)
[21:16:50] *** Joins: varjagg (~user@ti0040a400-5479.bb.online.no)
[21:22:15] <Josh_2> Maybe
[21:22:30] *** Joins: dre (~dre@2001:8003:c932:c301:ce6d:d9b0:21ac:1ee2)
[21:25:19] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:27:27] <Guest74> though i guess surfaces like pdf can return a pathname for location.
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:09] *** varjagg is now known as varjag
[21:30:57] *** Joins: ns12 (~ns12@user/ns12)
[21:31:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f9:d1b2:e0c8:18f6:f07a:a6a9) (Read error: Connection reset by peer)
[21:37:57] *** Quits: spiaggia (~user@141-160-190-109.dsl.ovh.fr) (Ping timeout: 240 seconds)
[21:41:20] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[21:42:49] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[21:47:30] *** Joins: amb007 (~a_bakic@6.42.131.77.rev.sfr.net)
[21:54:13] *** Quits: amb007 (~a_bakic@6.42.131.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:55:25] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:01:17] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Quit: The Lounge - https://thelounge.chat)
[22:01:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:03:10] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 250 seconds)
[22:03:45] *** Joins: alvaro121 (~aa@201.230.126.66)
[22:04:35] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[22:05:08] *** Joins: jealousmonk (~user@2804:431:e7c4:f875:45b7:bdab:9c03:331c)
[22:11:29] *** Quits: kevingal (~quassel@2001:770:c0:401:4573:51f6:5384:5305) (Remote host closed the connection)
[22:12:04] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:dcfe:cbe2:37e2:8eb3)
[22:12:48] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f9:d1b2:c1db:1bd4:b840:144f)
[22:13:25] *** Quits: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:94c3:2af7:d8a3:e7b7) (Quit: Client closed)
[22:15:02] *** Joins: jeosol (~jeosol@user/jeosol)
[22:15:11] <jeosol> Good morning all!
[22:16:27] <jeosol> Looking into message queues. Has any one used the cl-rabbit or cl-bunny libraries (based on rabbitmq)
[22:16:52] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:dcfe:cbe2:37e2:8eb3) (Ping timeout: 268 seconds)
[22:30:26] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f9:d1b2:c1db:1bd4:b840:144f) (Ping timeout: 268 seconds)
[22:37:37] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:39:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:41:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[22:45:37] *** Joins: foxfromabyss (~foxfromab@2a01:c22:b09c:4000:94c3:2af7:d8a3:e7b7)
[22:46:03] <foxfromabyss> how do I supply `or` as an argument to `reduce`? SBCL says it's a macro and not a function :/  do i have to create a wrapper function?
[22:46:32] <phoe> foxfromabyss: #'some
[22:47:08] <phoe> (list (some #'oddp '(0 2 4 6 8)) (some #'oddp '(0 2 5 6 8))) ;=> (NIL T)
[22:48:02] <moon-child> that seems different though?
[22:48:22] <moon-child> I would assume an or-reduction would return the first non-nil element of a list, or nil if there were none
[22:48:52] <phoe> oh, so you want the first non-nil element
[22:49:05] <yitzi> some can bail, but reduce can't
[22:49:27] <phoe> (lambda (x y) (or x y)) should work, but what yitzi said
[22:49:46] <phoe> (loop for x in list when x return x)
[22:49:50] <foxfromabyss> I want to iterate over `(list t nil t nil..)`
[22:49:52] <foxfromabyss> if that helps
[22:49:59] <moon-child> phoe: (loop for x in list thereis x)
[22:50:03] <EdLangley[m]> You technically can bail early from reduce
[22:50:09] <phoe> moon-child: will that return X, or just a boolean?
[22:50:13] <moon-child> return x
[22:50:20] <phoe> TIL
[22:50:21] <EdLangley[m]> Using THROW/CATCH or RETURN-FROM
[22:50:28] <moon-child> (loop for x in '(nil 2 5) thereis x) #| --> 2 |#
[22:50:48] <foxfromabyss> that's a lot of different solutions :D  thanks!
[22:50:53] <moon-child> :)
[22:50:53] <yitzi> Well, technically you can bail from just about anything with that.
[22:52:13] *** Joins: jealousm` (~user@2804:431:e7c5:b4ca:dccb:e22a:5205:2a4e)
[22:53:52] *** Quits: jealousmonk (~user@2804:431:e7c4:f875:45b7:bdab:9c03:331c) (Ping timeout: 268 seconds)
[22:59:31] *** Joins: nature (~nature@45.32.235.173)
[23:00:36] *** jealousm` is now known as jealousmonk
[23:04:07] *** Quits: jealousmonk (~user@2804:431:e7c5:b4ca:dccb:e22a:5205:2a4e) (Quit: ERC (IRC client for Emacs 27.1))
[23:04:12] <phoe> here we go
[23:04:15] <phoe> https://www.reddit.com/r/Common_Lisp/comments/s8r075/forever_stable_branch/?
[23:04:35] *** Joins: jealousmonk (~user@2804:431:e7c5:b4ca:dccb:e22a:5205:2a4e)
[23:05:14] *** Quits: gaqwas (~john@dynamic-095-118-114-073.95.118.pool.telefonica.de) (Remote host closed the connection)
[23:13:20] <dbotton> If there a way given: (deftype text-direction-type () '(member :ltr :rtl :inherit)) - is there a way to get access to that member list given the type text-direction-type?
[23:13:48] <Bike> not in the standard. some implementations provide something, like sb-ext:typexpand.
[23:15:41] <jackdaniel> dbotton: alterntively you may write your macro (defenum â€¦) that registers elements in a hash table keyed with the enum name
[23:16:04] <jackdaniel> you may define a function to access the hash table if you want to be very fancy
[23:21:32] <dbotton> In this case I still want the type to be a type, I just want to introspect for use in my builder and other places.
[23:22:04] <jackdaniel> yes, the macro would expand to (progn (deftype â€¦) (setf (gethash â€¦) â€¦))
[23:22:05] <sm2n> phoe: s/"will be maintained/"will be maintained"/
[23:22:45] <dbotton> thanks
[23:23:20] <phoe> sm2n: thanks, fixing
[23:27:47] *** Quits: jealousmonk (~user@2804:431:e7c5:b4ca:dccb:e22a:5205:2a4e) (Ping timeout: 268 seconds)
[23:31:43] *** Quits: mepy (~mepy@62.98.26.19) (Remote host closed the connection)
[23:33:39] *** Joins: mepy (~mepy@62.98.26.19)
[23:34:31] *** Joins: jealousmonk (~user@2804:431:e7c5:c29d:f611:a6e4:135a:8b29)
[23:37:32] <yitzi> phoe: In order have quicklisp take over distributing ASDF, clpm would have to also. I don't think it currently overwrites the distribution's ASDF since I see comments in the CLPM repo about dealing with ECL's ASDF fork.
[23:38:14] <etimmons> yitzi: That's already on my "must have" list for the next version of CLPM
[23:38:18] <phoe> yitzi: I guess that sounds doable - such a QL script would basically be "call to Drakma, put a file in the proper place on the filesystem, adjust the RC file"
[23:38:33] <phoe> plus a bit of ASDF glue
[23:38:46] <phoe> so I guess it is doable, especially if etimmons agrees
[23:39:15] <etimmons> I saw the writing on the wall a while ago that we needed a better way to distribute ASDF
[23:39:36] <yitzi> etimmons: Well, of course since CLPM is awesome. I have been running it on SBCL for about two months. Kudos.
[23:39:52] <etimmons> I haven't thought about it from QL's perspective, but from what I've seen so far in phoe's post what he suggests seems reasonable
[23:40:04] <etimmons> And I'd be happy to help support it from the ASDF side as much as I can
[23:40:13] <etimmons> yitzi: Thanks :)
[23:41:37] <phoe> I mean, I could try hacking together such a thing in a day I guess - just gimme a location where I can pull different versions of asdf.lisp from
[23:42:03] <phoe> and that would run without ASDF or Quicklisp, just depend on (find-package :drakma) returning non-NIL
[23:42:20] <phoe> possibly even that could be adaptable to use ql-http if we are crazy enough to propose adding it to quicklisp-client itself as a contrib
[23:42:28] <phoe> but then, these are just ideas
[23:44:37] <yitzi> Personally, I think the long term solution is CLPM since it is more modular. That is not to take a single thing away from the amazing accomplish of Xach, though.
[23:44:51] <etimmons> phoe: We should probably add a request for a file listing all ASDF versions to the ASDF issue tracker. Maybe adding it to https://gitlab.common-lisp.net/asdf/asdf/-/issues/93
[23:45:14] <EdLangley[m]> Does CLPM have a lisp interface I can use for installing libraries?
[23:45:15] <phoe> etimmons: please do so, my brain is fried
[23:45:16] <EdLangley[m]> without restarting my repl
[23:45:42] <yitzi> Ed Langley: yes, and you can wire it into require if you want.
[23:45:57] <etimmons> phoe: Another sticky point might be http(s)... AFAIK, the canonical place where ASDF is served from supports only https
[23:46:04] <EdLangley[m]> Is it pure lisp, or does it have a FFI component?
[23:46:36] <phoe> etimmons: fixable QL-style, grab a http-only host and sign the releases
[23:46:49] <phoe> but that's already implementation details
[23:47:03] <etimmons> EdLangley[m]: there are two parts to CLPM. One that lives in your dev image (if you want) and one that runs as a separate process
[23:47:16] <etimmons> The separate process has some CFFI to deal with https
[23:47:29] <etimmons> but the dev image piece is pure common lisp
[23:47:56] <etimmons> and offloads most of the heavy work to the other process
[23:48:01] <EdLangley[m]> Do I have to use the separate process?
[23:48:07] <EdLangley[m]> I like how QL is entirely inside my lisp image
[23:49:18] <etimmons> yes
[23:49:28] <EdLangley[m]> Cool
[23:49:55] <etimmons> It might be possible to make it all work in your lisp image, but that hasn't been my focus since I wanted to be able to freely use dependencies in that other process
[23:50:00] <EdLangley[m]> My goal is to never have to use a unix shell when working on a lisp project
[23:50:45] <EdLangley[m]> So, for example, I've been writing little utility functions to clone git repositories and list the systems they contain
[23:51:03] <etimmons> CLPM wants to support that. Definitely some pain points in the process still, but I also do not want you to have to drop to the shell
[23:51:34] <EdLangley[m]> One thing I really like is being able to dump an image with QL in it and still use it
[23:52:01] <etimmons> I'm planning to give a Common Lisp Meeting about it at some point in the next couple months (ideally after I have v0.5 mostly ready, which will support versioning ASDF)
[23:52:10] <phoe> *Online Lisp Meeting
[23:52:14] <phoe> but, yes, gimme
[23:52:17] <etimmons> d'oh. Thanks
[23:52:18] <phoe> gimme precious video content
[23:52:44] <EdLangley[m]> I also think the "you don't get to pick the version of your dependencies" part of QL is its best feature
[23:52:47] <EdLangley[m]> I'm really tired of the dependency hell version bounds enables
[23:53:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731) (Ping timeout: 240 seconds)
[23:54:09] <etimmons> You can emulate that if you update frequently. If version bounds also become more widespread, I'd implement a CLPM feature to ignore them
[23:54:38] <EdLangley[m]> The problem is hitting a critical mass of people who rely on their version bounds for correctness.
[23:55:04] <etimmons> My typical way of working these days to pin my deps for development. Then my CI runs on a ~weekly basis to update everything, run the tests, and open an MR for me
[23:55:23] <EdLangley[m]> I'm updating JS deps at work, ...
[23:55:30] <etimmons> If there's a new failure, I can keep working with known good deps while I get a fix upstream or fix my code
[23:55:41] <etimmons> But for the most part, there's no new failure and I just hit "merge"
[23:55:54] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[23:56:08] <EdLangley[m]> Yeah, I think pinning for CI is good
[23:56:08] <EdLangley[m]> The problem, for me, is specifying versions in the system definition
[23:56:37] <EdLangley[m]> Anyways, I like languages that make breaking backwards-compatibility painful
[23:57:11] <EdLangley[m]> And would rather people fork and rename their own projects rather than break compatibility
[23:57:14] <EdLangley[m]> Because, then I have a fixed target if I want to fork it myself
[23:58:58] <etimmons> I really like the idea of versioned packages to do that
[23:59:20] <etimmons> (like what alexandria is doing)
[23:59:33] <EdLangley[m]> Yeah
[23:59:48] <EdLangley[m]> I think system versions are a bad idea because we have better ways of accomplishing this
