[00:07:28] <enebo[m]> we shall see how this goes...afk a little bit
[00:07:32] <enebo[m]> https://github.com/jruby/jruby/pull/6837
[00:14:06] <headius> https://twitter.com/headius/status/1438227049051795457
[00:14:09] <headius> like and subscribe
[01:32:02] <enebo[m]> ok the Nothing.java did somehow make it into a jar :(
[02:22:13] <headius> Ah figures
[04:36:26] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[04:36:44] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[06:57:50] *** Quits: lopex (uid4272@id-4272.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[08:47:11] <headius> enebo: my two issues should be fixed and merged to master
[08:47:25] <headius> we are on the release 0.1.0 so that differs from the 2.6.8 hacked version, but I have filed all the appropriate bugs for that
[08:47:34] <headius> er of ostruct
[09:51:36] *** Joins: sagax (~sagax_nb@user/sagax)
[19:12:55] <headius> good morning
[19:24:07] <headius> I don't think ruby-core is going to change anything
[19:40:05] <headius> basshelal: I have released jnr-ffi 2.2.7 with just the ASM update
[20:02:27] <enebo[m]> bleh this is pretty annoying
[20:02:55] <headius> whats up
[20:03:03] <enebo[m]> I just tried putting org/jruby/Nothing.java into shaded source and then reverted but then realized it is merely because the compiler is assuming Java 1.6
[20:03:30] <enebo[m]> So that hack might work but how do I change that in pom.rb.  
[20:03:48] <enebo[m]> core does it but then it basically explicitly has execute_goals
[20:04:46] <headius> why do we need a java source in there? The Sonatype page made it sound like a README would be sufficient
[20:04:54] <enebo[m]> here is an example of the error: https://app.travis-ci.com/github/jruby/jruby/jobs/537846544
[20:05:08] <enebo[m]> we need it because we need a javadocs.jar for complete to see
[20:05:21] <enebo[m]> sources is fine with the readme-like stuff
[20:05:32] <headius> perhaps we could put a bogus package with a package-info.html in it?
[20:05:59] <headius> I see the module error, is that what you mean?
[20:06:05] <enebo[m]> please add one and see because I definitely hate the notion of putting a bogus .class into our jar
[20:06:16] <headius> agreed
[20:06:18] <enebo[m]> the module error I think is partially from the previous error
[20:06:28] <enebo[m]> where it cannot compile Nothing.java
[20:06:59] <headius> ok
[20:07:15] <enebo[m]> at least I think the module error is because it aborted making core
[20:07:18] <headius> yeah it should be set to Java 8 at least
[20:07:54] <headius> how do I repro this to test package info?
[20:07:58] <headius> oh just like CI perhaps
[20:08:20] <headius> actually... -Prelease?
[20:08:26] <headius> confirm that produces a javadoc jar?
[20:08:27] <enebo[m]> well I have been doing a full release to sonatype
[20:08:40] <enebo[m]> Actually I can just try this since Iam already doing this frequently
[20:09:03] <enebo[m]> maybe...I did something earlier where it made something but it was empty and it then aborted from that
[20:09:17] <enebo[m]> don't recall if that was sources or javadocs
[20:09:52] <headius> https://www.baeldung.com/java-package-info
[20:10:00] <headius> hate to admit but I have never made one myself
[20:10:03] <enebo[m]> so maybe org.jruby.sonatype/package-info.html
[20:10:36] <headius> package-info.java
[20:10:48] <headius> yeah I don't have any strong opinion about the name
[20:11:19] <enebo[m]> ah .java but if I do that it may try compiling it
[20:11:19] <headius> org.jruby.doc or javadoc or core or shaded?
[20:11:35] <headius> well it doesn't actually compile, only in javadoc
[20:11:51] <enebo[m]> hopefulyl then maven compiler ignores it
[20:11:59] <headius> it should, it has been around forever
[20:12:15] <enebo[m]> ok well I can try it
[20:12:25] <headius> oh you mean for purposes of java 1.6 vs 8
[20:12:29] <headius> yeah good question
[20:12:57] <headius> and you don't want to add a compile plugin config because it isn't really compiling anything
[20:13:41] <enebo[m]> I haven't added anything but it will run all the default phases
[20:16:32] <enebo[m]> just trying with older package-info.html
[20:17:27] <headius> ok I got confused because all the articles talk about .java now
[20:17:32] <headius> yes html would be the safer option
[20:17:43] <enebo[m]> I believe we should get help with maven and hopefully kristian because I am not sure if anyone else understands the pom.rm -> xml syntax
[20:18:01] <enebo[m]> but if this works then great for releasing
[20:26:23] <headius> yeah I am willing to spend a few days to a week after 9.3 settles to try to make some sense out of this
[20:26:28] <headius> I don't think we can rely on mkristian for help
[21:13:01] <headius> enebo: did that work?
[21:35:53] <enebo[m]> headius: nope.  mvn ran to completion but sonatype close failed
[21:36:05] <enebo[m]> "Missing: no javadoc jar found in folder '/org/jruby/jruby-core/9.3.0.0'"
[21:36:44] <enebo[m]> I think the right solution for this problem is to set shadedSource location which may then also generate javadocs
[21:37:02] <enebo[m]> It was the first thing I readabout when I was trying to figure this out so maybe I will circle back to it
[21:53:57] <headius> sonuva
[21:54:11] <headius> yeah I guess just do that then
[21:54:25] <headius> if that works then it will include our sources and javadocs and we can be done with this
[21:54:46] <enebo[m]> just do that...easier said than done but it makes sense that a shaded artifact could still have docs with shaded substitutions
[23:44:31] <headius> enebo: I think we need to spend time on deoptimization before finishing inlining
[23:44:47] <headius> if we could deoptimize we could optimistically assume all method calls don't need frame and a lot of code would be much faster
[23:45:11] <headius> this ostruct alias thing has just got me thinking again about how to lazily allocate frames and scopes
[23:46:05] <enebo[m]> yeah I suppose since it is different code they can be in any order
[23:46:15] <headius> lazy frame allocation would be a big last mile for our optimizations
[23:46:31] <enebo[m]> how many methods conditionally need a frame field vs always needing one
[23:46:31] <headius> inlining blocks being the last last mile
[23:46:35] <headius> (or splitting/specialization which is the same thing)
[23:47:08] <headius> the biggest offender of framing is [] because of String#[] doing $~ stuff
[23:47:12] <enebo[m]> yeah and $_
[23:47:18] <headius> alternatively figuring out a way to lazily prep $~ would be a monster gain
[23:47:36] <headius> I don't know of a way to do that without enter/exit frame marking somewhere though
[23:48:02] <enebo[m]> I like the notion of deopting since it needs to happen to get literal blocks inlining without basically emitting a guard which kills opts results
[23:48:05] <enebo[m]> kills is strong
[23:48:16] <headius> a frame depth counter would work but I dunno how much it saves us over just pushing and popping frame the way we already do
[23:48:29] <enebo[m]> but it makes our passes not work since we have two paths 
[23:48:30] <headius> the back and forth to TC is the main hit
[23:49:03] <headius> if we could do it lazily somehow then we'd just have a special call site that lazily preps $~ if needed and no frames would be forced
[23:49:20] <headius> so that might be an easier pill to swallow but full deopt would solve it and everything else
[23:50:18] <enebo[m]> the over cost of deopt is more expensive as a general opt than lazy one-off too but I am not so worried about that
[23:51:57] <headius> in theory branching from JIT without frame to Full with frame should be a one to one match but there is a bunch of state to carry over
[23:52:55] <headius> so it would be throwing a deopt exception that captures all locals and an IP and the catch block invalidates the jitted method and calls into interpreter with those locals and IP
[23:53:17] <headius> all live locals at the point of call would need to be passed into the call site
[23:55:25] <enebo[m]> yeah all locals and all temps and a map of temps which have been removed back to what values they should be
[23:56:32] <headius> yeah I am including temps when I say locals... all live variables at that point in their slots
[23:57:11] <headius> with indy some of this metadata could be included without adding bytecode but the values themselves would have to be pushed into the call
[23:58:38] <headius> i.e. we encode a call to [] as []{slot1, slot4}(arg1, arg2, arg3, temp1, temp4)
[23:58:52] <headius> this is similar to how we'd encode kwargs, really
[23:59:26] <headius> FWIW I do try to detect whether [] is being used with a literal non-regexp but if it's an opaque variable I cannot tell
[23:59:46] <headius> like if you do str[5] I do not mark it as frame-aware
