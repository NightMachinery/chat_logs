[00:41:37] *** Quits: ardon (~user@user/ardon) (Ping timeout: 240 seconds)
[00:43:43] *** Quits: rotateq (~user@185.66.193.48) (Ping timeout: 256 seconds)
[01:07:03] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:26:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[01:26:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:34:56] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 245 seconds)
[01:36:42] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:48:53] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[01:50:01] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:50:56] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:55:50] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:57:39] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[01:59:26] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Max SendQ exceeded)
[02:02:50] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[02:17:17] <qhong> completion in the M-x prompt seems really dumb, anyone have any idea why?
[02:17:41] <qhong> I glimpsed at prompter/filter.lisp and seems that it's using a decent metric
[02:25:54] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[02:26:21] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[02:30:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:19c3:7b50:512d:d28) (Ping timeout: 240 seconds)
[02:46:41] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[02:48:07] *** Quits: aeka` (~aeka@2606:9580:100:c:8757:8ee:ec9c:991c) (Ping timeout: 250 seconds)
[02:52:51] *** Joins: aeka (~aeka@pool-100-4-208-71.albyny.fios.verizon.net)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:44] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[03:20:41] *** Joins: taiju (~taiju@240b:253:ec40:2400:fc1c:4577:fe:d2)
[03:41:14] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[03:43:34] <jmercouris> qhong: dumb in which sense?
[03:44:00] <jmercouris> There’s lots of ways to tweak the fuzzy completion, we certainly don’t have the best one :-D
[03:50:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[04:01:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:08:46] <qhong> jmercouris: e.g. if I type in switchbuffer, switch-buffer appear very behind
[04:09:05] <jmercouris> Ah I see
[04:09:17] <jmercouris> That is a problem indeed
[04:10:53] <qhong> I now regain some sanity and took a second look at substring-norm, it's actually quite naive.
[04:17:18] <qhong> Maybe we could take a look at helm-score-candidate-for-pattern? It's not that complex and reasonably good in practice. What's currently in filter.lisp looks promising (the single symbol mk-string-metrics:norm-damerau-levenshtein gives me faith), but I don't quite understand its behavior yet
[04:20:31] <qhong> ah I think I get it, because currently Nyxt split the input with space first
[04:27:33] <qhong> AFAIU, the problem is
[04:27:34] <qhong> 1. substring-norm is kinda adhoc, and need to type spaces to get reasonable result
[04:27:34] <qhong> 2. DL-distance is in principle very good, however there's a fatal issue: it is a symmetric metric that also allows *deletion* operation
[04:30:07] <qhong> 3. Seems that command prompt give similar weight to both command name and docstring, this basically makes any command with (a few) occurrence of "buffer" in docstring outscores switch-buffer
[04:30:35] <qhong> and because DL distance allow deletion, not mentioning "switch" at all doesn't really hurt their score that much
[04:49:17] *** Quits: taiju (~taiju@240b:253:ec40:2400:fc1c:4577:fe:d2) (Ping timeout: 240 seconds)
[04:50:12] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:55:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 240 seconds)
[04:56:32] *** Joins: taiju (~taiju@240b:253:ec40:2400:fc1c:4577:fe:d2)
[05:02:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:fc1c:4577:fe:d2) (Ping timeout: 240 seconds)
[05:05:46] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[06:26:43] <qhong> Two more questions:
[06:26:43] <qhong> 1. Is there a way to highlight matched portion?
[06:26:43] <qhong> 2. I think fuzzy search as typically used in search engines and used in Emacs is fundamentally different -- the former is expected to correct error (like single character substitution), while the latter is expected to improve efficiency. Do you have a clear idea which direction Nyxt should go? If we agree that we actually want the latter, I could provide an implementation
[06:42:58] <jmercouris> qhong: no, matched portion is not yet highlighted
[06:43:01] <jmercouris> I would like such a feature though
[06:44:13] <jmercouris> qhong: I'm not certain about your second question
[06:44:20] <jmercouris> I don't know which is the right way to go
[06:48:52] <jmercouris> new version of Demeter is now available: https://nyxt.atlas.engineer/article/demeter-release-0.1.0.org
[06:54:45] <qhong> Also maybe we should weight matches in command name and docstring differently, but not sure what's the right way to do it
[07:00:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[07:40:17] <jmercouris> Computing a score for weighing things is complex
[07:40:25] <jmercouris> I thought about adding learning into this process
[07:40:33] <jmercouris> And I will actually, just not certain how yet
[07:55:34] <qhong> maybe just copy what Emacs did?
[08:03:43] <jmercouris> Maybe
[08:24:55] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[08:35:07] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 268 seconds)
[10:24:24] <qhong> jmercouris: I just hacked this simple score function into nyxt, it works very well for me https://gist.github.com/BlueFlo0d/c50465260545391ed8f34607771a9ea8
[10:24:28] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[10:25:20] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:26:39] <qhong> It's not a proper "fuzzy search engine", but it basically replicate the behavior for emacs flex completion style, which is very efficient for someone who is used to it. I think it's useful for Nyxt but not sure how exactly we should proceed. Try to refine it more and provide as the new default? or try to give several options...?
[10:28:11] <qhong> I'd advise against fancy learning, at least in "efficiency oriented" fuzzy matcher, because it makes the user harder to grasp and internalize its behavior
[10:34:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:49:16] <Jing> qhong: I was working on filter.lisp and related things some days ago. I have thought about improving fuzzy matching as well, but didn't do much research. I was hoping some third-party library would be helpful
[10:56:49] <qhong> Alternatively, some very simple and intuitive algorithm may turns out actually good. helm's scoring function is 30 lines of Elisp and I see people are satisfied with it. My gist above is even simpler and works very well for myself. We probably need more data points other than myself though. Can people give it a try and generate some comments?
[10:57:56] <qhong> If it does seem promising, one easy improvement would be to add word splitting and it would hopefully do mostly as well as helm
[11:01:16] *** Quits: gdd1 (~gdd@129.199.146.230) (Ping timeout: 268 seconds)
[11:02:32] <Jing> thanks I will look into helm. I also looked at sly's
[11:03:47] <qhong> and although it sounds like I
[11:04:09] <qhong> 'm overselling an incomplete stuff, plz give the gist above a try if possible, it will be very helpful input for me
[11:27:27] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[11:30:37] <qhong> jmercouris: as for highlighting, I think the canonical solution would be to allow passing a DOM node rather than a string into prompter. It will also allow all other cool things like arbitrary media in the ibuffer. Not sure it's easy to do in the current architecture though.
[11:31:16] <qhong> And maybe in general, functions should pass around DOMs instead strings for display. Otherwise it's still living in the shadow of Emacs
[11:34:48] *** Joins: ano (~ano@user/ano)
[12:10:51] *** Quits: Jing (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[12:11:29] *** Joins: Jing (~hedgehog@125.105.142.62)
[12:19:36] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[12:30:42] *** Joins: shka (~herr@109.231.0.226)
[12:54:32] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:56:09] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[12:57:32] *** Quits: Jing (~hedgehog@125.105.142.62) (Read error: Connection reset by peer)
[13:03:01] *** Quits: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb) (Remote host closed the connection)
[13:03:32] *** Joins: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb)
[14:03:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[14:31:22] *** Joins: tekakutli (~user@201.141.29.30)
[14:47:43] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[14:59:21] <Kabouik> 07:58 qhong: I'd advise against fancy learning, at least in "efficiency oriented" fuzzy matcher, because it makes the user harder to grasp and internalize its behavior > As a simple user, I can confirm I tend to be reluctant about learning because it's often obscure and makes it hard for the user to learn how the application will actually react to the same input. See for instance text prediction in smartphones, I don't use them because I have a
[14:59:21] <Kabouik> hardware keyboard on my phone, but I remember that when I did, I felt that I was more often trying to tame or correct the prediction than the opposite. Maybe it was a biased thought, because I'm sure prediction did help more often than not, but still a frustrating one.
[15:00:08] <Kabouik> Also not sure if learning and giving increasing weight to Nyxt commands often used would be relevant, because it would make rarely used commands harder to find, and would impact discoverability
[15:00:51] <edgarvincent[m]> Could anyone send the URL for qhong gist? I think their message didn't get through the Matrix bridge... Thanks!
[15:01:00] <Kabouik> https://gist.github.com/BlueFlo0d/c50465260545391ed8f34607771a9ea8
[15:01:04] <edgarvincent[m]> qhong's gist*
[15:01:10] <edgarvincent[m]> Merci Kabouik!
[15:01:32] <Kabouik> I might try it too
[15:04:50] <Kabouik> I'm not sure where is flex.lisp though, can't find it in the source dir
[15:28:06] <qhong> ah sry the filename is just a confusing place holder, you can eval this file anywhere and it will override score-suggestion-string. The relevant stuff is in libraries/prompter/filter.lisp
[15:59:41] <edgarvincent[m]> Sorry, can't test ATM, I'm getting the libsoup error again :(
[16:08:05] <Kabouik> Would `(nyxt::load-lisp "~/.config/nyxt/base/flex.lisp")` in my init.lisp work qhong? I didn't see an error but not sure if it works, searching "switchbuffer" still shows switch-buffer in 5th position. The 4 first matches are switch-buffer-somethingelse.
[16:11:41] *** Quits: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb) (Remote host closed the connection)
[16:12:08] *** Joins: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb)
[16:16:55] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[16:37:24] *** Quits: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb) (Ping timeout: 276 seconds)
[16:38:48] *** Joins: geyaeb (~geyaeb@gateway/tor-sasl/geyaeb)
[17:20:12] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:29:52] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[17:38:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:48:21] <edgarvincent[m]> Ah, it does seem to work here. Searching for `describef` returns `describe-function` as the first candidate. Typing the same string with Nyxt's version of `score-suggestion-string` doesn't seem to return `describe-function` at all - or maybe it is far down the list.
[17:49:29] <edgarvincent[m]> qhong: As far as I'm concerned, your code does seem to work better. I had indeed noticed that issue with spaces in prompt-buffer completions.
[17:50:03] <edgarvincent[m]> Kabouik: Can you try evaluating the snippet in Sly/Slime?
[19:14:09] *** Joins: toon_ (~toon_@gateway/tor-sasl/toon/x-19766060)
[19:48:24] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[19:51:54] *** Joins: ano (~ano@user/ano)
[20:05:37] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:17:38] <Kabouik> Just did the same test as you with describef and I got the same result edgarvincent[m], so it must work with loading the fil in init.lisp.
[20:21:02] <edgarvincent[m]> Kabouik: Yes, I suppose it should work if you load the file.
[21:02:46] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[21:04:04] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[21:22:51] *** Quits: tekakutli (~user@201.141.29.30) (Ping timeout: 245 seconds)
[23:01:16] <qhong> thanks for the feedback! and it should work even if you just type in e.g. just swbuf, and desf, like what I usually like to do in Emacs
[23:01:55] <qhong> edgarvincent[m]: can u give an example of problem with space? thanks.
[23:06:08] <qhong> Kabouik: seems that this problem is a little bit harder to cope with. Because Nyxt currently concat everything altogether as a single string to pass to fuzzy filter, so we probably don't have the option of simply give short answer higher ranks...
[23:08:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:08:57] <qhong> looking at helm, the score function give switch-buffer-next and switch-buffer the same score too, but the sorting function do this:
[23:09:14] <qhong> If PRESERVE-TIE-ORDER is nil, ties in scores are sorted by length of the candidates.
[23:13:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:14:26] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:42:29] *** Joins: tekakutli (~user@201.141.29.30)
[23:46:04] <edgarvincent[m]> qhong: I don't remember any example from my day-to-day usage, sorry. And now Nyxt doesn't launch anymore, so I can't do any further testing.
[23:46:49] <qhong> oops, rip :(
[23:48:15] <qhong> Ah, so you mean problem of space with their current algorithm. Then I have encounterd a few examples myself already.
[23:50:28] <qhong> I also added an updated score function flex2.lisp to the gist, which would give shorter candidates higher rank (so, switch-buffer shows up the first)
[23:56:26] <edgarvincent[m]> Yes. From the little I tried, your algorithm seems better to me.
[23:56:42] <edgarvincent[m]> Ah, that's a good idea.
