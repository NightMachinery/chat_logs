[00:02:04] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: Quit.)
[00:03:11] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[00:14:55] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:17:02] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:19:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[00:24:35] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 252 seconds)
[00:26:07] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Quit: Quit)
[00:26:26] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:26:43] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[00:28:07] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Client Quit)
[00:28:21] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[00:29:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:31:09] *** Joins: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144)
[00:32:46] *** Quits: smartin (~Thunderbi@88.135.18.171) (Remote host closed the connection)
[00:33:04] *** Joins: smartin (~Thunderbi@88.135.18.171)
[00:37:11] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[00:41:17] <CarloWood> Can you check if a template type is in a given namespace?  That is n::T would be ok if that namespace is n, but n::m::T is not OK when that namespace is n.
[00:43:17] <CarloWood> Even better would be if I can make the namespace in which a template is generate depend on the template parameters, so it can be found with ADL.
[00:43:21] *** Joins: Viewday110 (~Viewday@user/viewday)
[00:43:27] <CarloWood> is generated*
[00:44:35] <CarloWood> Aka:  template<typename T> NAMESPACEOF(T)::operator<<(std::ostream&, T const&);
[00:44:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:44:52] *** Viewday110 is now known as Viewday11
[00:44:52] <RPNX> jellie: already answered?
[00:45:49] <RPNX> CarloWood: possibly but I can't imagine why you would wanna do that.
[00:46:40] <RPNX> Sounds quite... bizzare
[00:47:15] <CarloWood> {} namespace n {} template<typename T> std::ostream& n::operator<<(std::ostream&, T const&) { return os << "ok"; }
[00:47:15] <geordi> error: 'ostream& n::operator<<(ostream&, const T&)' should have been declared inside 'n'
[00:47:20] <CarloWood> I guess not.
[00:47:20] <RPNX> hacky would be the right word too
[00:48:04] <RPNX> you can check if a class has a given member
[00:48:18] <RPNX> namespaces... not really...?
[00:48:23] <RPNX> kinda sorts
[00:49:07] <RPNX> typename can't be checked for in a namespace but
[00:49:38] <RPNX> if you add a helper function per namespace you could use adl
[00:55:12] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4)
[00:55:12] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4) (Changing host)
[00:55:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:55:19] <CarloWood> I'll make a wandbox example for the Real Case - you can also see why I need it.
[00:56:14] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[00:56:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:59:00] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[00:59:39] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[00:59:39] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[00:59:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[00:59:55] <CarloWood> RPNX: here is the case that has no problem: https://wandbox.org/permlink/6nCAnPCoji4DBz7D
[01:00:18] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[01:00:18] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[01:00:18] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:00:44] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:00:57] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[01:00:57] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[01:00:57] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[01:00:57] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[01:01:20] <RPNX> Don't overload operators unless you own at least one of the two types
[01:01:48] <CarloWood> This also works: https://wandbox.org/permlink/3yQA50I3U5DbqVqC
[01:04:50] <cart_man> Is using a conditional variable ok for a makeshift jittery timer?
[01:05:24] <CarloWood> This runs into problems: https://wandbox.org/permlink/iRgIvGE8N6a3oyfE
[01:07:18] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[01:07:48] <CarloWood> This can be fixed by adding the first template also to namespace N, although then we can't print B anymore from outside namespace N: https://wandbox.org/permlink/9HfoXmpsnYwKHMnu
[01:11:28] <CarloWood> And the final case (that I'm facing now): https://wandbox.org/permlink/MYeQlXb8hrgjt8I8
[01:11:51] <CarloWood> Printing of std::vector<N::B> stopped working when trying to print that from namespace N.
[01:11:57] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[01:12:08] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c090:f547:35ff:6299)
[01:12:08] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c090:f547:35ff:6299) (Changing host)
[01:12:08] *** Joins: skapata (~Skapata@user/skapata)
[01:12:10] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:12:12] *** Joins: bindu (~bindu@user/bindu)
[01:12:12] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:12:22] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:12:28] *** Joins: Atque (~Atque@user/atque)
[01:12:44] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:13:34] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:13:41] *** Joins: teepee (~teepee@openscad/teepee)
[01:13:51] <CarloWood> Now I can get THAT to work: https://wandbox.org/permlink/lwvYIA1yOb7wGeWH
[01:14:06] <CarloWood> by adding the operator<<(vector) also to namespace N :/
[01:15:02] <CarloWood> So, this is all bull - I rather just generate the operator<<'s in the namespace of their arguments, for ADL to work. But I don't know what T is... so I have to define the operator<<'s in every namespace to get the "right one", also using ADL.
[01:15:48] <CarloWood> RPNX: hence my question (Re: <RPNX> CarloWood: possibly but I can't imagine why you would wanna do that.)
[01:16:12] *** Joins: spithash (~spithash@user/spithash)
[01:17:06] <cart_man> Or is the Conditional Variables generally not great timers?
[01:17:48] <NyB> cart_man: you might want to look into how e.g. media players deal with this problem - it can get very complicated very fast
[01:19:39] <NyB> in the end of the day, unless you have real-time support from the kernel you can't really go below 1ms very reliably, and even then there are limits
[01:19:57] <cbreak> cart_man: CV aren't timers at all
[01:20:09] <cbreak> they're used for thread communication / synchronization
[01:20:19] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f986:1faa:a6d6:f8a1) (Ping timeout: 252 seconds)
[01:21:00] <cart_man> cbreak: Yea but I saw they have wait_for()  and then you can use std::chrono time in it and also check a var
[01:21:17] <cbreak> they're still not timers.
[01:21:41] <CarloWood> cart_man: if you don't care about the 20 to 50 microsecond delay you can use them.
[01:21:41] <cbreak> mutexes also have timeouts
[01:21:57] <cbreak> so does select, and a bunch of other blocking calls
[01:22:08] <cart_man> CarloWood: what about Useconds?
[01:22:10] <cbreak> but the timeouts usually don't have timing guarantees
[01:22:24] <cart_man> cbreak: Yea it can have jitters I dont mind that
[01:22:32] <CarloWood> Useconds?
[01:22:33] <cbreak> cart_man: why don't you just wait then?
[01:22:51] *** Quits: rendar_ (~rendar@user/rendar) (Quit: Leaving)
[01:23:00] <cbreak> https://en.cppreference.com/w/cpp/thread/sleep_until
[01:23:09] <cbreak> there's also a sleep_for
[01:23:26] <CarloWood> cart_man: maybe this is of interest to you (a SO question I once wrote): https://stackoverflow.com/questions/48936591/is-the-performance-of-notify-one-really-this-bad
[01:23:42] *** f0xb4t_ is now known as f0xb4t
[01:23:45] <cart_man> cbreak: I am trying to do a wait_for()  certain secs. At the moment there is another thread that has a timer in it that goes cv.notify_one() ... but if I do cv.wait_for() ... its basically the same thing with one thread
[01:24:05] <cbreak> both seem dumb.
[01:24:27] <cbreak> if you're fine with blocking your current thread, then just use sleep_XXX
[01:25:05] <cbreak> if you're not fine blocking, then you can't use either. You'll have to use some form of polling / busy-looping or an event loop that abstracts this away
[01:25:09] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[01:25:29] <cbreak> also, there are platform specific things, like apple's kqueue / gcd timers
[01:27:23] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:27:28] <cart_man> cbreak: I recalled thinking about sleep but can not think as to why I never used it. hmmm .. it will come back to me.
[01:27:34] <cart_man> CarloWood: Damn almost 4 years ago
[01:27:34] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:27:34] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:28:46] <CarloWood> wait_for of condition variables is not what you think it seems.
[01:29:06] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:29:32] <cart_man> CarloWood: Yea I just thought I saw something somwhere to that way. But that is a good thing I asked on here first
[01:29:36] <cart_man> Rather than waisting time
[01:32:06] <CarloWood> I base my (high performance) timers on the hardware POSIX timer... but even then you can't get much accuracy. It costs around 50 microseconds to wake up a thread to begin with and then there is the scheduling that NyB mentioned before makes it all very unreliable unless you use a real time kernel.
[01:32:19] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:32:58] <cbreak> if you want precise timers, don't relinquish control to the kernel.
[01:33:11] <CarloWood> So, it depends what you want.. if you want to measure how many clock cycles something takes, you'd use a difference approach then when you want to sleep 300 ms.
[01:33:25] <cbreak> but that's obviously expensive, unless you somehow can keep the CPU under your control, but sleep it
[01:33:32] <cbreak> (like on some embedded things)
[01:35:10] <CarloWood> The hardest is sub millisecond but still a considerable amount of clocks (say, more than 1 microsecond). In that case you can't go to sleep (aka, relinquish control to the kernel) but the chance that kernel just stops you is getting pretty large. You'd have to disable interrupts and/or tell the schedular that you want real time priority and then spin.
[01:35:49] <cbreak> CarloWood: or you just run on some platform where you are the kernel :)
[01:39:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:29] *** ChanServ sets mode: +v npaperbot
[01:39:31] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:39:54] *** Joins: proller (~p@80.240.216.69)
[01:39:57] *** Joins: troller (~p@80.240.216.69)
[01:42:33] *** Joins: rendar (~rendar@user/rendar)
[01:48:08] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[01:49:51] *** A_Dragon is now known as Festive_Dragon
[01:52:47] *** Quits: zz (~filler@a4.inai.de) (Remote host closed the connection)
[01:56:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:57:25] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:57:57] *** Joins: anyone (~filler@a4.inai.de)
[02:00:33] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:05:09] *** Joins: chozorho (~chozorho@2601:146:300:c30::fa0f)
[02:05:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[02:13:49] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660054c133af83911778.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[02:15:30] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[02:16:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[02:16:34] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 260 seconds)
[02:16:40] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:21:13] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[02:21:34] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4)
[02:21:35] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:6de:b517:ee89:c5f4) (Changing host)
[02:21:35] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:29:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 268 seconds)
[02:29:44] *** Joins: proller (~p@2a02:6b8:b081:8830::1:25)
[02:30:06] *** Joins: troller (~p@2a02:6b8:b081:8830::1:25)
[02:32:46] *** Quits: pizdets_ (~pizdets@183.182.110.89) (Ping timeout: 250 seconds)
[02:33:44] *** Joins: pizdets (~pizdets@183.182.110.248)
[02:34:52] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 268 seconds)
[02:43:30] *** Joins: Viewday118 (~Viewday@user/viewday)
[02:45:34] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:45:34] *** Viewday118 is now known as Viewday11
[02:48:26] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:48:53] *** Quits: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:50:56] *** Joins: john99 (~john99@170.246.103.34.bc.googleusercontent.com)
[02:51:14] <john99> exist something similar to cmp_int in c++ < 17
[02:51:16] <john99> hi
[02:51:26] <john99> its a question
[02:51:59] <john99> or function (greater_equal) is similar to cmp_gerater_equal?
[02:54:39] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:55:59] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:05:50] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[03:06:40] *** Quits: dudek (~dudek@185.150.236.103) (Quit: Leaving)
[03:09:28] *** Joins: Brainium (~brainium@user/brainium)
[03:12:21] <RandomReader> I don't think so, those are new specifically for the signed/unsigned checks
[03:16:44] *** Quits: badquanta (~badquanta@nova-046-182-187-181.nat.novanet.is) (Remote host closed the connection)
[03:19:14] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[03:19:41] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[03:25:03] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a660079c904040e2843ac.ipv6.abo.wanadoo.fr)
[03:28:21] *** Joins: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs)
[03:30:24] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:33:33] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:41:16] <yates_home> TinoDidriksen: if the "X" delimiter is not specified in R"X(\document{article})X", then do the double-quotes become the delimiters?
[03:42:18] <yates_home> (sorry for taking so long to respond, the wife's "assemble my new exercise bike" command came just after i asked this morning)
[03:43:51] <yates_home> << R"X(\document{article})X"
[03:43:52] <geordi> \document{article}
[03:44:08] <yates_home> << R"X(\document{"article"})X"
[03:44:09] <geordi> \document{"article"}
[03:44:11] <TinoDidriksen> R"()" is the syntax. You can put anything, or nothing, in the X's place. That's just to have a more unique delimiter.
[03:44:23] <yates_home> << R"(\document{"article"})X"
[03:44:23] <geordi> error: unterminated raw string
[03:44:32] <TinoDidriksen> << Rbunny"(\document{article})bunny"
[03:44:32] <geordi> error: 'Rbunny' was not declared in this scope
[03:44:46] <TinoDidriksen> << R"bunny(\document{article})bunny"
[03:44:46] <geordi> \document{article}
[03:45:04] <TinoDidriksen> << R"(\document{article})"
[03:45:05] <geordi> \document{article}
[03:45:12] <TinoDidriksen> Lots of options.
[03:45:15] <yates_home> ok, thanks
[03:45:36] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[03:45:59] <PJBoy> << R"document{}(\document{article})document{}"
[03:45:59] <geordi> \document{article}
[03:46:06] <yates_home> so what is the delimiter if nothing is specified?
[03:46:09] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:47:09] <TinoDidriksen> << R"(thingy)bob)"
[03:47:10] <geordi> thingy)bob
[03:47:11] <yates_home> it looks like it's """
[03:47:24] <anyone> you can't specify "nothing"
[03:48:33] <PJBoy> the string terminates on )delim"
[03:48:40] <yates_home> let me rephrase: if you specify R"(blah)", what is the delimiter?
[03:48:42] <PJBoy> if you don't specify a delim then it terminates on )"
[03:48:45] <TinoDidriksen> With nothing, then it's )"
[03:48:55] <yates_home> ok right.
[03:49:13] <TinoDidriksen> Which is still pretty good, but if you have strings containing )" then you need an X.
[03:49:35] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[03:52:33] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[03:54:06] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4)
[03:55:23] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:57:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4) (Ping timeout: 268 seconds)
[04:04:12] *** Joins: seninha (~seninha@user/seninha)
[04:11:22] *** Joins: siwica (~user@149-185-142-46.pool.kielnet.net)
[04:13:24] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[04:14:32] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[04:16:08] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:16:24] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[04:17:15] *** Quits: geli (~gelignite@55d43f19.access.ecotel.net) (Quit: Stay safe!)
[04:20:12] <siwica> I am having a class with a private std::unordered_map member variable. I initialize the map with some values (known at compile time) in the constructor and subsequently only need to modify references of the map values in place. Nothing ever gets deleted nor inserted into the map subsequently. I am using a map since it allows me to loop over all keys/values, otherwise I could probably use a bunch of member variables. Is there a
[04:20:12] <siwica> datastructure that is more suitable for my needs and lets me get rid of the run-time bounds checking when accessing an element?
[04:20:14] *** Quits: proller (~p@2a02:6b8:b081:8830::1:25) (Ping timeout: 260 seconds)
[04:20:21] *** Quits: troller (~p@2a02:6b8:b081:8830::1:25) (Ping timeout: 252 seconds)
[04:22:58] <siwica> What is the common pattern for having a bunch of related objects (number and type known at compile time) that I want to loop over at run-time and want to give a name?
[04:23:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:24:18] *** Tobbi__ is now known as Tobbi
[04:27:45] <anyone> std::array<std::pair<std::string, T>, N> comes to mind
[04:27:59] <anyone> (or even char[]/const char* if they're fixed too)
[04:31:40] <siwica> anyone: What I would like to have is a compile-time check when accessing an element. If I try to access a key not in the map the program should ideally not compile rather than having to deal with that at run time.
[04:32:20] <anyone> Then it's variables.
[04:32:40] <anyone> struct allmystuff { T appl, bnna, orng, etc; };
[04:33:37] <anyone> struct ams { union { struct { T a,b,o; }; struct T arraybynumber[3]; }; }; if you want index-based iteration
[04:33:40] <anyone> ontop.
[04:33:54] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 268 seconds)
[04:34:32] <siwica> Ok, interesting pattern for the index-based iteration
[04:34:58] <RandomReader> that union is UB, so not an option
[04:35:45] <anyone> RandomReader: where specifically would UB occur?
[04:35:45] <RandomReader> in general, compile time checking is going to be based on types or names, it's not something that translates directly to data, which is considered dynamic and mutable
[04:36:09] <RandomReader> but based on the description, why aren't the keys just variable names?
[04:37:47] <siwica> RandomReader: It's a.) for readability reasons since I would like to express the concept of some variables sort of belonging together and b.) for having a container to loop over
[04:38:31] <RandomReader> anyone - in general, type punning is not allowed .. in particular, C++ carves out an exception for union members that have a common initial sequence, but an array object is not one of those things: https://eel.is/c++draft/class.union.general#2  https://eel.is/c++draft/class.mem.general#23
[04:38:50] <RandomReader> note this is significantly different from C
[04:38:53] <siwica> RandomReader: I could also declare a bunch of member variables and define some container in the constructor. But I thought there would be some more expressive way of doing so.
[04:39:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[04:39:17] <anyone> siwica: the traditional way would be to just  T x[3]; and specify the indices with enum names
[04:39:23] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:39:29] <anyone> e.g. enum { K_APPL, K_BNNA, K_ORNG, };
[04:40:21] <anyone> not a variable name, but an identifier which, when spelled wrongly, generally raises a compile error as desired.
[04:41:24] <siwica> anyone: Ok, sure. But nobody would prevent somebody from compiling code with `auto y = x[42]` in that case.
[04:41:47] <siwica> Ok, I am wrong....
[04:42:10] <siwica> Yeah, probably thats a better solution.
[04:42:45] <anyone> well that's where std::array may come in
[04:43:11] <anyone> not sure if it helps against overrunning
[04:43:25] *** Joins: Viewday118 (~Viewday@user/viewday)
[04:43:53] <siwica> Yeah, I don't know if std::array has a compile-time overrun check
[04:44:10] <RandomReader> in general that can't be a thing, since the index is dynamic
[04:45:00] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:45:00] *** Viewday118 is now known as Viewday11
[04:45:13] *** Joins: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[04:45:14] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Read error: No route to host)
[04:45:18] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[04:45:32] <anyone> well, the though is, if the argument is constexpr (and if we could test for constexpr)..
[04:45:34] <siwica> I don't have that much experience in C++, but would that be a case for a constexpr std::array?
[04:45:36] *** Quits: chozorho (~chozorho@2601:146:300:c30::fa0f) (Ping timeout: 268 seconds)
[04:45:39] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:45:58] <RandomReader> no, because that's not what constexpr does
[04:46:26] <RandomReader> constexpr is for expressing something that *can* be computed at compile time in some cases, it doesn't *enforce* much of anything
[04:46:32] <anyone> something something templates
[04:46:37] <RandomReader> plus you already mentioned you want to modify the values
[04:46:48] <anyone> the T wants to be modified, not the index AIUI
[04:47:07] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[04:47:22] <RandomReader> right, but that means any access is already not in a constant-expression context :P
[04:47:26] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[04:47:51] <anyone> template<typename T, size_t N, size_t Z> T &myaccessor(std::array<T,N> &a){static_assert(N==Z);} myaccessor<K_APPL>(somearray); /* unfinished thought */
[04:48:16] <anyone> Z<N
[04:48:31] *** Joins: proller (~p@2a02:6b8:b081:8802::1:14)
[04:48:39] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Client Quit)
[04:49:24] <RandomReader> in terms of existing constructs, that could be using std::get<N> on a std::array, but it's the same general problem of needing to use that pattern, it's not enforced
[04:49:33] *** Joins: siwica` (~user@108-185-142-46.pool.kielnet.net)
[04:50:05] <RandomReader> could create a wrapper for the array and only expose a template function that just turns around and uses std::get I suppose
[04:50:44] <RandomReader> make the wrapper use the enum type directly and there'd be no bare integers in the interface
[04:50:45] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:51:09] *** Quits: siwica (~user@149-185-142-46.pool.kielnet.net) (Ping timeout: 252 seconds)
[04:51:23] <RandomReader> I'm not sure I fully understand the use case though, given the desire to loop
[04:51:41] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[04:51:58] <siwica`> RandomReader: Thank you! This is something I will consider.
[04:52:52] <RandomReader> sigh, that should be "function template", I still make that mistake...
[04:54:35] <RandomReader> what form do the keys need to be in when you loop?
[04:57:00] <siwica`> RandomReader: What do you mean by "form"?
[04:57:03] <RandomReader> and are you on C++20, or earlier?
[04:57:12] <siwica`> Yes, C++ 20.
[04:57:16] <siwica`> Luckily :)
[04:57:18] <RandomReader> like do the keys need to be integers, strings, ...
[04:57:36] <RandomReader> during the loop as opposed to code
[04:57:56] <siwica`> I does not matter actually. I would prefer an enum class I think.
[04:58:43] <anyone> is it always looping over all elements, or is it possible it just does a subset of the array?
[04:58:47] <RandomReader> frozen's constinit use-case might be an option then: https://github.com/serge-sans-paille/frozen/
[04:59:06] <siwica`> anyone: Only all elements.
[04:59:08] <RandomReader> (they only had constexpr last time I checked, meaning immutable values, otherwise I would have suggested it earlier)
[04:59:50] <RandomReader> I think you'd still need a patter like enum to get compile-time key checks, but worth a look at least
[04:59:55] <RandomReader> pattern*
[05:00:04] <siwica`> RandomReader: Ah, thank you. I will check it out. That looks promising.
[05:00:21] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:01:12] <anyone> well if enum class is all you need and all iterations are exactly [0..N), I don't see how one could one overrun with an operator[]
[05:02:31] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[05:02:47] *** Joins: Enitin (~Enitin@82.102.22.85)
[05:03:31] <siwica`> anyone: Maybe somebody will reduce the size of the array in the future without removing the corresponding element from the enum. As far as I understand that would not be detected at compile-time with the std::array approach.
[05:05:23] <RandomReader> ...oh, no, I don't think frozen would quite get there .. without being constexpr, there's no lookup path that'd be compile-time checked
[05:07:12] <RandomReader> so not quite good enough, a wrapper template using enum seems like the closest option so far
[05:07:23] *** Joins: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca)
[05:08:48] <RandomReader> and yeah, there's still that disconnect between enum and array .. hmm
[05:10:24] <anyone> siwica`: https://stackoverflow.com/questions/159006/max-and-min-values-in-a-c-enum
[05:10:59] <anyone> basically, a sentinel name gets you there most of the way (together with a static assert on the array size vs. sentinel)
[05:11:42] <anyone> that should help against array size reduction while the enum has too many indices (members?)
[05:14:07] <siwica`> Ok, I think I will figure something out with your tipps. Thank's a lot for your input!
[05:16:00] <Alipha> siwica`: yeah, I'd just have a little wrapper around an array with a get member function that takes an enum. And begin and end member functions.
[05:16:31] *** Joins: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144)
[05:17:13] <CarloWood> Does *std::set<>::insert()::first always return a const_reference? As opposed to a copy of the element.
[05:17:44] <CarloWood> According to https://en.cppreference.com/w/cpp/container/set/insert it returns an iterator - that is weird in itself I think :/.  Why not a const_iterator?
[05:19:28] <RandomReader> what would "first" be?
[05:19:39] <CarloWood> iterator
[05:20:11] <RandomReader> oh you're talking about the pair return for insert(), not the iterator return?
[05:20:12] <CarloWood> I use: std::pair<iterator,bool> insert( const value_type& value );
[05:20:55] <CarloWood> Then the returned value has an iterator that is described (if at all) as "Constant LegacyBidirectionalIterator to value_type"
[05:21:31] <CarloWood> where LegacyBidirectionalIterator is described as "The type It satisfies LegacyForwardIterator"
[05:21:37] <RandomReader> ok, then yes, it'll be a const T&
[05:21:58] <CarloWood> And LegacyForwardIterator says: If a LegacyForwardIterator it originates from a Container, then it's value_type is the same as the container's, so dereferencing (*it) obtains the container's value_type.
[05:22:13] <CarloWood> That sounds like it is not a reference, but a copy (by value)
[05:23:02] <RandomReader> all it describes is the iterator's value_type, not operator*
[05:23:06] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[05:23:17] <CarloWood> Also, why an iterator? Doesn't then *iter resolve to a  value_type&  (no const) ?
[05:23:33] <RandomReader> no, see the Requirements section directly below it
[05:24:18] <RandomReader> (given that we already know the iterator has a const qualifier on it, from the std::set spec)
[05:25:59] <RandomReader> hm, that const behavior seems inconsistent with the InputIterator page, I wonder if this is cppreference missing things
[05:26:37] <CarloWood> I must be blind, because I don't see the const, nor that *iterator returns a reference :/
[05:27:33] *** Quits: Dizidentu (~aresg@modemcable105.134-19-135.mc.videotron.ca) (Ping timeout: 250 seconds)
[05:28:15] <CarloWood> { std::set<int> s; cout << TYPE(s::value_type); }
[05:28:15] <geordi> error: 's' is not a class, namespace, or enumeration
[05:28:30] <CarloWood> { cout << TYPE(std::set<int>::value_type); }
[05:28:30] <geordi> error: expected primary-expression before ')' token
[05:28:46] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:28:52] <CarloWood> what?
[05:29:27] <CarloWood> { std::set<int>::value_type v; v = 42; }
[05:29:27] <geordi>  
[05:29:40] <RandomReader> use TYPE() when it's an expression, TYPE<> when it's a typename
[05:29:41] <CarloWood> I am going to assume that value_type is not const.
[05:29:49] <CarloWood> oh
[05:30:07] <CarloWood> { cout << TYPE<std::set<int>::value_type>(); }
[05:30:07] <geordi> error: no matching function for call to 'TYPE<set<int>::value_type>()'
[05:30:15] <CarloWood> { cout << TYPE<std::set<int>::value_type>; }
[05:30:16] <geordi> int
[05:30:51] <CarloWood> { cout << TYPE<std::set<int>::iterator>; }
[05:30:52] <geordi> _Safe_iterator<_Rb_tree_const_iterator<int>, set<int>, bidirectional_iterator_tag>
[05:31:12] <CarloWood> { cout << TYPE<std::set<int>::const_iterator>; }
[05:31:13] <geordi> Same output.
[05:31:14] <john99> yates_home, ty
[05:31:31] *** Joins: CaCode_ (~CaCode@user/cacode)
[05:31:57] *** Quits: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:32:00] <RandomReader> << TYPE< iterator_traits< set<int>::iterator >::reference >
[05:32:01] <geordi> const int&
[05:32:55] <CarloWood> { set<int> s; auto res = s.insert(42); cout << TYPE(*res.first); }
[05:32:55] <geordi> lvalue const int
[05:33:00] <CarloWood> ugh
[05:33:06] <CarloWood> NOT a reference
[05:33:19] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:33:29] <RandomReader> expression, won't show a reference
[05:33:47] <RandomReader> { set<int> s; auto res = s.insert(42); cout << TYPE<decltype(*res.first)>; }
[05:33:48] <geordi> const int&
[05:33:51] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[05:34:16] <CarloWood> k - lets call that "as expected". But imho then cppreference is wrong.
[05:35:19] <RandomReader> how so? https://en.cppreference.com/w/cpp/named_req/ForwardIterator#:~:text=const%20T%26%20otherwise%20(It%20is%20constant)   and it has *i++ returning the reference type below
[05:35:37] <CarloWood> That is *i++ not *i
[05:36:08] <RandomReader> that expression is covered by InputIterator, which also returns reference
[05:36:09] <CarloWood> It says that *i returns value_type.
[05:36:16] <RandomReader> where?
[05:37:02] <CarloWood> Top of https://en.cppreference.com/w/cpp/named_req/ForwardIterator
[05:37:03] <RandomReader> the intro line is english prose describing how the value_type is the same, it's not the Requirements section detailing the return type
[05:37:09] <CarloWood> If a LegacyForwardIterator it originates from a Container, then it's value_type is the same as the container's, so dereferencing (*it) obtains the container's value_type.
[05:37:22] <RandomReader> which is true, the result of the expression is the same value_type
[05:37:38] <CarloWood> No, it is value_type const&
[05:38:03] <RandomReader> it's not specifying the requirement of the return type
[05:38:25] <RandomReader> I mean it's a wiki, you can change it if you want, but I have no problem reading that as the english prose it is, not a specification
[05:38:27] <CarloWood> Plus we are now looking at something shared with vector, in which case *it returns a value_type& - not a const one.
[05:39:18] <RandomReader> yes, because the iterator is not const-qualified
[05:39:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:30] *** ChanServ sets mode: +v npaperbot
[05:39:33] *** Joins: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144)
[05:39:37] <RandomReader> in vector's case, I mean
[05:39:44] <RandomReader> set is specific about it being const-qualified
[05:39:47] <CarloWood> Nor is it in the std::set case.
[05:40:15] <RandomReader> yes it is, you pasted that line yourself
[05:40:20] <CarloWood> huh
[05:41:08] <RandomReader> I am curious why cppreference has the const qualification for ForwardIterator and not InputIterator though, still trying to see if that's a difference in the standard too
[05:41:28] <RandomReader> for describing the iterator's reference type I mean, and therefore the return of operator*
[05:41:40] <CarloWood> We agree this information must be on the std::set page right? Because as soon as you click on a LegacyBidirectionalIterator link - you get info that also holds for a vector.
[05:42:03] <RandomReader> ranges has made this a massive pain to look up
[05:42:08] <CarloWood> Then std::set::insert says it returns a std::pair<iterator, bool>, not a const_iterator.
[05:42:19] <RandomReader> const_iterator and iterator are two distinct types
[05:42:27] <RandomReader> std::set is specific that its iterator type is also const-qualified
[05:42:29] <CarloWood> So.. the ONLY place where this might be included is then this one line:
[05:42:33] <CarloWood> iterator	Constant LegacyBidirectionalIterator to value_type
[05:42:35] <RandomReader> as in, "const iterator", not "const_iterator"
[05:42:42] <RandomReader> yes
[05:43:04] <CarloWood> A constant iterator doesn't derefence to a const reference.
[05:43:14] <RandomReader> it does
[05:43:41] <RandomReader> at least for ForwardIterator, according to cppreference
[05:43:54] *** Quits: Gamah (~quassel@gamah.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:44:31] *** Joins: Gamah (~quassel@gamah.net)
[05:45:47] <CarloWood> { std::vector<int> v(1); std::vector<int>::iterator it = v.begin(); f(it); } void f(const std::vector<int>::iterator& constant_iterator) { cout << TYPE<decltype(*constant_iterator)>; }
[05:45:48] <geordi> int&
[05:45:56] <CarloWood> no const.
[05:46:48] <CarloWood> I saw that Constant, but disgarded it as obviously having no influence on the dereferenced type
[05:47:57] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[05:48:03] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c94c:7b63:2f85:a7d)
[05:48:03] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c94c:7b63:2f85:a7d) (Changing host)
[05:48:03] *** Joins: skapata (~Skapata@user/skapata)
[05:48:15] <RandomReader> ...seems to be a difference in the standard too... base iterator requirements set up the reference traits type: https://timsong-cpp.github.io/cppwp/n4659/iterator.requirements.general#13
[05:48:54] <RandomReader> InputIterator creates the requirement that operator* return that type: https://timsong-cpp.github.io/cppwp/n4659/input.iterators
[05:49:28] <RandomReader> ForwardIterator adds the requirement that the reference type reflect const: https://timsong-cpp.github.io/cppwp/n4659/forward.iterators#1.3
[05:50:30] <RandomReader> (and container requirements say std::set's iterator needs to be Forward)
[05:52:46] <RandomReader> hah, no, that's the wrong link in the standard .. silly
[05:53:17] <RandomReader> std::set's actually has to be Bidirectional, via associative container requirements: https://eel.is/c++draft/associative.reqmts.general#6
[05:54:23] <CarloWood> Ok
[05:54:25] <CarloWood> But
[05:54:44] <RandomReader> Bidirectional meets all Forward requirements, RandomAccess meets all Bidirectional requirements, so that actually makes geordi's vector non-compliant
[05:54:55] <RandomReader> unless there's some other exception buried in here
[05:55:00] <CarloWood> The phrase "constant iterators" in that section MEANS "if you dereference the iterator you get a const_reference"
[05:55:53] <CarloWood> And that info is lacking on cppreference... Anyway, it's not that important :/.  I just needed to be sure that a reference was returned, and not a value_type by value :p
[05:55:54] <RandomReader> which section?
[05:56:03] <RandomReader> iterator traits don't have const_reference
[05:56:07] <CarloWood> https://eel.is/c++draft/associative.reqmts.general#6
[05:56:20] <CarloWood> "both iterator and const_­iterator are constant iterators"
[05:57:07] <CarloWood> I think the use of 'Constant' on cppref's std::set page is highly confusing :/... but I suppose they mean this with it.
[05:57:08] <RandomReader> oh, yeah .. that ends up being implied in the roundabout way, because the iterator has the same value_type as the container
[05:57:29] <RandomReader> so the container's const_reference would in fact be the same thing
[05:59:14] <RandomReader> heh, I hadn't thought about the potential consequences to overloads, via the notes: https://en.cppreference.com/w/cpp/container/set#Notes
[05:59:46] <RandomReader> this is a messy set of definitions, even if it is consistent
[06:01:22] <Eelis> that [associative.reqmts.general]#6 should have a reference to http://eel.is/c++draft/iterator.requirements#def:constant_iterator for its use of "constant iterator"
[06:01:35] <Eelis> so a bug in the spec
[06:02:26] *** Quits: proller (~p@2a02:6b8:b081:8802::1:14) (Ping timeout: 260 seconds)
[06:05:12] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[06:07:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:09:38] *** Quits: darkstarx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:11:27] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[06:13:45] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:16:16] *** Joins: llh (~llh@user/llh)
[06:18:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:51e0:bfac:805b:c7c4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:20:00] *** Quits: AmR (~AmREiSa@156.207.199.106) (Quit: Konversation terminated!)
[06:21:07] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:22:44] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[06:22:46] <Tech_8> sup
[06:33:25] *** Quits: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[06:34:34] *** Parts: Tech_8 (~Tech_8@24.51.61.131) ()
[06:37:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 268 seconds)
[06:43:19] *** Joins: Viewday114 (~Viewday@user/viewday)
[06:44:52] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:44:52] *** Viewday114 is now known as Viewday11
[06:48:02] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:49:01] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:49:28] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:50:06] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:50:29] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:50:47] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:52:57] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[06:54:07] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[06:56:23] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Quit: Konversation terminated!)
[06:57:59] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:58:12] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[06:58:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[06:59:18] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[06:59:52] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[07:01:01] *** Joins: Dreg (~Dreg@fr33project.org)
[07:08:03] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 268 seconds)
[07:09:24] *** Joins: CormacAttack (~mac@144.62.50.200)
[07:09:37] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[07:13:50] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a660079c904040e2843ac.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[07:14:39] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[07:16:49] *** Quits: john99 (~john99@170.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[07:17:35] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:19:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:31:24] *** Quits: Pook (~Pook@2001:8a0:f996:1400:a8a9:c01e:9b5:8604) (Quit: Leaving)
[07:33:00] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[07:48:21] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:49:15] *** Quits: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[07:55:52] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[07:57:32] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[07:57:42] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:02:32] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[08:06:52] *** Joins: Hawker (~pi@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net)
[08:06:52] *** Quits: Hawker (~pi@drmons0544w-47-55-147-54.dhcp-dynamic.fibreop.ns.bellaliant.net) (Changing host)
[08:06:52] *** Joins: Hawker (~pi@user/hawker)
[08:09:07] *** Quits: CormacAttack (~mac@144.62.50.200) (Quit: WeeChat 3.3)
[08:11:39] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[08:14:39] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[08:14:39] *** Quits: Hawker (~pi@user/hawker) (Quit: leaving)
[08:14:55] *** Joins: Hawker (~pi@user/hawker)
[08:18:22] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[08:20:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:20:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[08:20:27] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[08:23:03] *** Quits: causative (~halberd@user/causative) (Ping timeout: 250 seconds)
[08:24:34] *** Quits: Hawker (~pi@user/hawker) (Quit: Lost terminal)
[08:24:38] *** Joins: causative (~halberd@user/causative)
[08:26:23] *** Quits: rahl (~rahl@102.114.217.249) (Ping timeout: 252 seconds)
[08:26:26] *** Joins: Hawker (~pi@user/hawker)
[08:26:37] <MrMobius> can i overload pointer dereferencing?
[08:27:26] <imMute> yes
[08:28:28] *** Joins: rahl (~rahl@102.114.15.234)
[08:30:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:719f:b1db:e5b1:8e4a) (Ping timeout: 240 seconds)
[08:33:38] *** Quits: Hawker (~pi@user/hawker) (Quit: leaving)
[08:34:01] *** Joins: Hawker (~pi@user/hawker)
[08:38:33] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[08:43:44] *** Joins: Viewday111 (~Viewday@user/viewday)
[08:44:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[08:44:45] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[08:44:45] *** Viewday111 is now known as Viewday11
[08:46:02] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[08:46:41] *** Joins: frost (~frost@user/frost)
[08:48:37] *** Quits: rgrinberg (~textual@2806:101e:7:6946:301f:4093:a99:4144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:49:12] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[08:53:18] <RandomReader> well, you can define a type with your own unary operator*
[08:53:20] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[08:53:48] <RandomReader> you can't modify operators on the built-in types
[08:55:58] <RandomReader> https://en.cppreference.com/w/cpp/language/operators collects them all
[08:59:00] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 256 seconds)
[08:59:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[09:04:27] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[09:08:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:10:25] *** Joins: caramel (~caramel@user/caramel)
[09:15:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:20:52] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:26:48] *** Quits: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de) (Ping timeout: 268 seconds)
[09:29:37] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:30:53] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:31:19] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:34:31] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[09:36:17] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:37:24] *** Joins: supernova (~quassel@2405:9800:ba11:6207:85ce:3956:d0d0:b7e7)
[09:37:26] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:37:53] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:39:23] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:31] *** ChanServ sets mode: +v npaperbot
[09:55:08] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:56:10] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[09:57:56] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:03:41] *** Joins: rgrinberg (~textual@187.223.209.106)
[10:13:09] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[10:14:36] *** Quits: Guest45 (~Guest45@217.155.41.132) (Quit: Client closed)
[10:15:01] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[10:18:35] *** Quits: supernova (~quassel@2405:9800:ba11:6207:85ce:3956:d0d0:b7e7) (Ping timeout: 252 seconds)
[10:35:50] *** Joins: supernova (~quassel@2405:9800:ba11:6207:f7b1:60e7:840d:ac1c)
[10:44:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:44:59] *** Joins: frost (~frost@user/frost)
[10:46:49] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[10:49:46] <ville> http://www.eelis.net/c++draft/class.bit#1.sentence-11 are they trying to say that it's not defined whether struct aa { unsigned x : 1; } x goes to the high or low bit?
[10:50:42] <ville> ok poor choice of words. not high/low as in 1 or 0, but rather most-significant or least-significant
[11:03:19] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[11:07:05] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:08:02] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:10:17] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[11:10:36] <ville> system v abi specification does no better. "bit fields are allocated right to left" as if there was only one way to write down a sequence of bits...
[11:11:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:12:51] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[11:16:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 240 seconds)
[11:18:07] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:25:01] <smallville7123> how do i insert a string into a map?
[11:25:36] <smallville7123> https://gist.github.com/mgood7123/59df44ea843fd7eacf5e7c04a8a936a9
[11:26:51] <smallville7123> std::map<std::string, std::string> definitions; std::string tmp;
[11:27:19] <smallville7123> error: cannot increment value of type 'std::__1::basic_string<char>'              :less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >::insert<std::__1::basic_string<char> >' requested here
[11:27:31] *** Quits: supernova (~quassel@2405:9800:ba11:6207:f7b1:60e7:840d:ac1c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:27:46] <smallville7123> note: in instantiation of function template specialization 'std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >::insert<std::__1::basic_string<char> >' requested here       *
[11:28:50] <ville> !give smallville7123 testcase
[11:28:51] <nolyc> smallville7123: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[11:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:31:50] *** Joins: fbiagent__ (~fbiagent@user/fbiagent)
[11:32:10] <smallville7123> https://wandbox.org/permlink/PFboh0zP6s16Zwzu
[11:33:59] *** Joins: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad)
[11:34:19] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 265 seconds)
[11:34:32] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[11:34:51] <RandomReader> ville - as far as I know, yes ... and it'd be the same order the shift operators use (high bits on the left)
[11:35:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[11:35:52] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:40:41] *** Joins: kek_1 (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007f.v6.ethz.ch)
[11:40:49] <smallville7123> apparently insert requires an std::pair of specified type instead of seperate elements of specified type
[11:41:01] <smallville7123> https://www.geeksforgeeks.org/how-to-insert-data-in-the-map-of-strings/
[11:41:15] <b_jonas> smallville7123: try to pass only one argument to the insert member function, a pair. you rarely want to use the two-argumen version of insert, and it does not take a key and a value.
[11:41:21] <b_jonas> ok I'm slow
[11:41:28] <ville> smallville7123: you should really rely on reference documentation like cppreference.com. it'll tell you
[11:41:55] <smallville7123> i just assumed that insert takes a T1 and T2 directly
[11:42:04] *** Quits: kek_ (~kek_@2a02:168:200f:1f10:dcde:2774:1301:baad) (Read error: Connection reset by peer)
[11:42:11] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 252 seconds)
[11:42:43] <ville> RandomReader: http://www.eelis.net/c++draft/intro.memory#1.sentence-3 first they bother to define these terms and then not use them later on...
[11:42:43] *** Joins: kek_2 (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007e.v6.ethz.ch)
[11:42:43] *** kek_2 is now known as kek_
[11:44:33] <ville> but i can't find a definition that high-order bit is "on the left"
[11:44:59] *** Quits: kek_1 (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007f.v6.ethz.ch) (Ping timeout: 250 seconds)
[11:45:21] <kek_> ville, isn't that just depended on whatever endian your system uses? (I'm no pro)
[11:45:54] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 260 seconds)
[11:46:44] <ville> endianess is commonly about bytes not bits
[11:46:49] <ent58> even within a byte, the specification of where it goes can be LSB or MSB
[11:46:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[11:47:05] <ent58> but ville, is this about a new bitfield-thing?
[11:47:13] *** Joins: caramel (~caramel@user/caramel)
[11:47:39] <ville> no, just plain-old old bitfields. had to look some things up and got sidetracked
[11:49:00] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[11:51:21] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 252 seconds)
[11:54:15] <ville> what is the new bitfield thing?
[11:54:31] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:54:46] <ville> can't recall a wg21 paper about bitfields in recent times
[11:55:02] <ent58> I heard about some change to the way bitfields work in an upcoming standard but no, I'm not referring to anything specific
[11:55:19] <ent58> I was wondering if you were
[11:55:30] <ent58> I've always found bitfields....lacking
[11:56:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:57:05] <ent58> something something std::bitset
[11:57:17] <ent58> and then std::vector<bool>
[11:57:20] <ent58> ;-;
[11:58:23] <smallville7123> welp i got #define implemented in my preprocessor
[11:58:24] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007e.v6.ethz.ch) (Read error: Connection reset by peer)
[11:59:09] *** Joins: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007e.v6.ethz.ch)
[12:05:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:08:14] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[12:09:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[12:09:31] <smallville7123> 8 more directives to go :(
[12:12:21] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[12:12:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[12:12:54] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:13:55] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:14:34] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[12:17:00] *** Joins: magla (~gelignite@55d4a165.access.ecotel.net)
[12:19:36] *** Joins: rendar (~rendar@user/rendar)
[12:23:49] *** Joins: robod34 (Username@79.113.195.239)
[12:25:31] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (Ping timeout: 250 seconds)
[12:27:25] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:30:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:32:26] *** Joins: Guest45 (~Guest45@217.155.41.132)
[12:32:31] *** Joins: Burgundy (~yomon@79.115.213.171)
[12:32:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:33:41] *** Quits: Guest45 (~Guest45@217.155.41.132) (Client Quit)
[12:36:33] <izabera> https://godbolt.org/z/z7d6j6eKd   why is gcc complaining here when clang does not?
[12:36:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[12:36:36] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:37:17] <izabera> what's the right way to write something like that?
[12:37:57] *** Joins: kek_1 (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-006a.v6.ethz.ch)
[12:38:01] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-007e.v6.ethz.ch) (Read error: Connection reset by peer)
[12:38:30] <ville> izabera: just have a regular function?
[12:38:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:39:12] <izabera> but why is that wrong
[12:42:16] <ville> i am guessing this could hint at it: http://www.eelis.net/c++draft/class.mem#general-5
[12:43:55] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[12:44:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:44:28] <ville> no that's not it
[12:45:32] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[12:46:10] *** kek_1 is now known as kek_
[12:47:02] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-006a.v6.ethz.ch) (Quit: Leaving)
[12:47:25] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[12:49:28] *** Joins: supernova (~quassel@2405:9800:ba11:6207:413e:a25b:15b7:ec15)
[12:49:39] <ville> oh well beats me, g++ is alright if you stick it outside the class
[12:50:14] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a06f:10d1:179a:1cf6)
[12:50:14] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a06f:10d1:179a:1cf6) (Changing host)
[12:50:14] *** Joins: skapata (~Skapata@user/skapata)
[12:50:40] <ville> http://www.eelis.net/c++draft/temp.expl.spec#3 seems to suggest it's alright
[12:51:13] <izabera> https://godbolt.org/z/n4Mbxn3f1   i think i'm going with something like this in the end but i still would like to understand.  thanks for your help ville
[12:55:20] *** Joins: the_lanetly_052_ (~the_lanet@185.30.91.11)
[12:56:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[12:59:11] <ville> probably worth asking #gcc
[12:59:33] <ville> quickly tried searching their bugzilla but didn't seem to be able to produce anything relevant
[13:00:26] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:01:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 260 seconds)
[13:02:28] <ent58> that reminds me, I should poke #gcc about figuring out whether the feature I want to implement is even doable as a plugin
[13:02:54] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[13:03:14] <RandomReader> I think it's https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85282
[13:04:41] <RandomReader> [cwg727] is a DR that they apparently haven't implemented yet
[13:04:41] <npaperbot> CWG727: In-class explicit specializations (Status: C++17, Submitter: Faisal Vali, Date: 5 October, 2008) <https://wg21.link/cwg727>
[13:06:20] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[13:07:08] <RandomReader> ville - I inferred it, I'm not finding a direct reference in C++ either
[13:07:24] <RandomReader> some of the specific System V specs are more explicit about it: https://refspecs.linuxfoundation.org/ELF/ppc64/PPC-elf64abi.html#BITFIELD
[13:07:35] <ville> yeah just poor technical writing
[13:07:48] *** Joins: CaCode (~CaCode@user/cacode)
[13:08:12] <RandomReader> and C11 is also more consistent, referring to high-order/low-order all over, including the shift spec
[13:08:27] <RandomReader> I'm guessing this is editorial work that C++ just never picked up
[13:10:53] <ville> yeah that's the right(-to-left) way to do it
[13:15:30] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[13:18:39] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[13:30:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[13:30:35] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[13:30:35] *** Joins: Teukka (~teukka@user/Teukka)
[13:33:50] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[13:34:06] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[13:34:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 250 seconds)
[13:39:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:27] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:39:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:32] *** ChanServ sets mode: +v npaperbot
[13:41:55] *** Joins: proller (~p@80.240.216.69)
[13:46:29] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 252 seconds)
[13:53:00] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:56:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[13:56:36] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:56:58] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:02:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:02:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:08:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[14:10:09] *** Joins: Pajus_ (~Pajus@user/pajus)
[14:11:05] *** Joins: plastico (~plastico@neomutt/plastico)
[14:12:36] *** Quits: Pajus_ (~Pajus@user/pajus) (Client Quit)
[14:24:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1c1:ac3d:59ba:4a9e)
[14:28:48] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 256 seconds)
[14:31:29] *** Joins: Yruama (~Yruama@2a01:cb15:8139:9400:8634:97ff:fe6e:86ac)
[14:35:39] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:39:18] *** Joins: letto (~letto@188.26.158.104)
[14:40:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 252 seconds)
[14:42:15] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:46:32] *** Joins: Viewday118 (~Viewday@user/viewday)
[14:47:23] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:48:04] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:48:04] *** Viewday118 is now known as Viewday11
[14:53:38] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[14:54:03] *** Joins: CaCode_ (~CaCode@user/cacode)
[14:55:02] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 240 seconds)
[14:56:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:58:10] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 260 seconds)
[14:59:23] *** Joins: xkuru (~xkuru@user/xkuru)
[15:02:48] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (Ping timeout: 256 seconds)
[15:05:43] *** Joins: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[15:09:02] *** Joins: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de)
[15:13:28] *** Joins: Brainium (~brainium@user/brainium)
[15:18:02] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:30:02] *** Joins: PJBoy (~PJBoy@2a00:23c7:8302:b301:38ba:b4a2:a211:909d)
[15:30:02] *** Quits: PJBoy (~PJBoy@2a00:23c7:8302:b301:38ba:b4a2:a211:909d) (Changing host)
[15:30:02] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:30:25] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[15:30:31] *** Joins: pulse (~pulse@user/pulse)
[15:35:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[15:50:50] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[16:08:05] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a660068458e108cbf62c7.ipv6.abo.wanadoo.fr)
[16:09:48] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a660050f36c7348367737.ipv6.abo.wanadoo.fr)
[16:12:35] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a660068458e108cbf62c7.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:12:47] *** Quits: TastyWiener95 (~uhhh3@user/tastywiener95) (Ping timeout: 252 seconds)
[16:21:21] *** Joins: andreasbuhr (~quassel@p548dd563.dip0.t-ipconnect.de)
[16:21:39] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:24:28] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Read error: Connection reset by peer)
[16:24:58] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:26:56] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.3)
[16:31:21] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[16:35:52] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[16:38:03] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[16:39:46] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Quit: Leaving)
[16:40:03] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[16:43:37] *** Joins: Viewday115 (~Viewday@user/viewday)
[16:43:43] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[16:43:43] *** Viewday115 is now known as Viewday11
[16:46:53] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 252 seconds)
[17:01:22] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:02:21] *** Joins: polyrob (~rob@user/polyrob)
[17:06:45] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[17:09:52] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:15:25] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:17:06] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:17:12] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (Quit: WeeChat 3.0)
[17:27:29] *** Joins: Pook (~Pook@2001:8a0:f996:1400:9050:6222:2b58:2d8b)
[17:32:26] *** Joins: ctrl-huangyq (~ctrl-huan@101.33.32.200)
[17:32:37] *** Quits: ctrl-huangyq (~ctrl-huan@101.33.32.200) (Client Quit)
[17:39:24] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:32] *** ChanServ sets mode: +v npaperbot
[17:41:46] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[17:42:03] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:44:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:45:22] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:47:03] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[17:50:32] *** Quits: mattallmill (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:54:14] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[17:59:01] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:02:30] *** Joins: seninha (~seninha@user/seninha)
[18:07:29] <Alipha> smallville7123: if c++17, use std::map's try_emplace instead of insert. It's a nicer api and likely often faster: https://wandbox.org/permlink/PFboh0zP6s16Zwzu
[18:13:29] <smallville7123> :)
[18:13:33] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:19:17] *** Joins: aniketgm (~Aniket@49.36.107.79)
[18:21:33] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.73)
[18:23:02] *** Quits: the_lanetly_052_ (~the_lanet@185.30.91.11) (Ping timeout: 260 seconds)
[18:26:33] *** Joins: templar (~Administr@95.76.1.228)
[18:27:08] *** Quits: templar (~Administr@95.76.1.228) (Client Quit)
[18:35:07] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[18:41:18] *** Joins: aniketgm (~Aniket@49.36.107.79)
[18:43:21] *** Joins: Viewday112 (~Viewday@user/viewday)
[18:43:40] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Ping timeout: 268 seconds)
[18:45:30] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[18:45:31] *** Viewday112 is now known as Viewday11
[18:46:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:46:07] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Ping timeout: 268 seconds)
[18:46:13] *** Joins: Betal (~Betal@user/betal)
[18:46:51] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3)
[18:47:43] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:53:06] *** Joins: lupulo (~lupulo_@128.red-83-35-42.dynamicip.rima-tde.net)
[18:54:04] *** Joins: Guest45 (~Guest45@217.155.41.132)
[19:00:32] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:00:40] *** Joins: siwica`` (~user@p200300f6171fdc005c21ce988404f96a.dip0.t-ipconnect.de)
[19:00:41] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:00:59] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[19:01:11] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87)
[19:01:12] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:fed8:2ce3:834b:de87) (Changing host)
[19:01:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:02:04] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:02:33] *** Quits: siwica` (~user@108-185-142-46.pool.kielnet.net) (Ping timeout: 252 seconds)
[19:02:39] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:02:51] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Remote host closed the connection)
[19:03:14] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:03:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[19:04:20] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:05:33] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:06:29] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[19:09:03] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[19:10:17] *** Joins: evlc (~evlc@l37-193-63-15.novotelecom.ru)
[19:20:49] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:29:22] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-4114-c3a8-f0dd-f3a3.inf6.spectrum.com) (Read error: Connection reset by peer)
[19:30:07] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3)
[19:35:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[19:39:07] <gaze___> Suppose I’m making a binding generator. Suppose I generate bindings to call a function. How do I ensure that, if I generate incorrect bindings, it will fail to compile.
[19:39:18] <gaze___> Absolutely no implicit casting, narrowing, widening.
[19:39:38] <gaze___> I think I want to static assert that the decltypes match or something.
[19:41:15] *** Quits: TomyLobo (~TomyLobo@p200300e80f0f270028cf74be77922ac0.dip0.t-ipconnect.de) (Quit: Leaving)
[19:41:54] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[19:43:41] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:43:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:44:42] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[19:48:49] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[19:50:46] <ville> bidning generator for what? if it's just slinging bytes into untyped buffers and shipping those off then sort of hard to get any kind of compile time error to happen there
[19:52:08] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[19:56:28] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[19:56:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:59:00] *** Quits: supernova (~quassel@2405:9800:ba11:6207:413e:a25b:15b7:ec15) (Quit: No Ping reply in 180 seconds.)
[19:59:04] <gaze___> I want to statically assert that the signature of a function is what I think it is.
[20:00:06] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[20:00:07] *** Joins: supernova (~quassel@2405:9800:ba11:6207:7a0d:5a67:9b8e:22f2)
[20:01:04] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[20:01:14] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[20:01:46] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[20:01:47] <gaze___> I write a signature “(char **, double, double, int)” and the return type.
[20:01:58] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:02:17] <gaze___> And I static assert that this is the signature of some function with NO COERCION
[20:04:08] <Oxyd> Where do you get that function from? If through a pointer to function, then that already does what you want.
[20:08:00] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:08:02] *** Joins: Munnu (~timo@81-197-121-241.elisa-laajakaista.fi)
[20:08:59] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[20:09:47] *** Quits: evlc (~evlc@l37-193-63-15.novotelecom.ru) (Quit: WeeChat 3.3)
[20:16:25] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Read error: No route to host)
[20:16:28] *** Joins: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:19:13] *** Quits: supernova (~quassel@2405:9800:ba11:6207:7a0d:5a67:9b8e:22f2) (Quit: No Ping reply in 180 seconds.)
[20:19:31] *** Quits: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Client Quit)
[20:19:48] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Read error: Connection reset by peer)
[20:20:11] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[20:20:20] *** Joins: supernova (~quassel@2405:9800:ba11:6207:3f7c:e6d9:860d:2551)
[20:24:39] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3) (Read error: Connection reset by peer)
[20:25:24] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:4114:c3a8:f0dd:f3a3)
[20:33:51] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:52:01] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:52:25] <gaze___> I think function pointers can coerce.
[20:54:51] <Oxyd> What coercions can they do?
[20:56:47] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:57:05] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[21:04:35] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[21:10:56] *** Joins: slidercrank (~slidercra@user/slidercrank)
[21:12:48] *** Joins: mib (~mib@cpc91222-cmbg18-2-0-cust108.5-4.cable.virginm.net)
[21:16:16] <gaze___> Any standard coercion. Widening and narrowing and all these things.
[21:16:49] <Oxyd> geordi: void f(void (*)(int)) { } void g(short) { } int main() { f(&g); }
[21:16:50] <geordi> error: invalid conversion from 'void (*)(short int)' to 'void (*)(int)'
[21:16:52] <Oxyd> That sounds false.
[21:17:08] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:17:57] <gaze___> Oh hmmm. Yeah I suppose you can’t coerce the function pointer type.
[21:18:02] <gaze___> That’ll do!
[21:18:09] <gaze___> Thanks
[21:18:50] *** Joins: jaakkos (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[21:22:52] <jaakkos> What's the deal with std::map<>::extract() and pointers/refs to the encapsulated key/value of the extracted node? Can they be used or not (why not)?
[21:23:32] <jaakkos> Say I do 'auto* my_p = my_map["foo"]; auto node = my_map.extract("foo");'. Is my_p still valid?
[21:23:51] <jaakkos> https://en.cppreference.com/w/cpp/container/map/extract says "In either case, no elements are copied or moved" (so why would it invalidate?)
[21:24:06] <jaakkos> But it also says "Pointers and references to the extracted element remain valid, but cannot be used while element is owned by a node handle", why?
[21:24:29] <jaakkos> Also https://en.cppreference.com/w/cpp/container/node_handle says Pointers and references to an element that are obtained while it is owned by a node handle are invalidated if the element is successfully inserted into a container.
[21:24:47] <jaakkos> ... why? If key/value was not copied.
[21:25:33] <jaakkos> The snippet above was supposed to read: 'auto* my_p = &my_map["foo"]; auto node = my_map.extract("foo");'
[21:27:08] <jaakkos> (and question remains, is access via my_p still valid after extract?)
[21:27:23] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 252 seconds)
[21:30:12] <jaakkos> Specifically in my case I would really like if 'my_p' was guaranteed to equal '&(node.mapped())'
[21:30:56] *** Joins: gdd (~gdd@129.199.146.230)
[21:39:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:33] *** ChanServ sets mode: +v npaperbot
[21:39:58] *** Joins: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs)
[21:40:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[21:45:01] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.162)
[21:46:51] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.73) (Read error: Connection reset by peer)
[21:50:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[21:51:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:55:02] *** Joins: smach (~savio@177.12.40.244)
[21:57:45] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[22:03:41] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:05:34] <ville> jaakkos: i am not sure if the standard really ever specifies an actual node handle type...
[22:06:27] <jaakkos> Essentially the same question is asked here it seems https://stackoverflow.com/questions/53209889/rationale-of-restrictive-rules-for-extract-and-re-insert-with-map
[22:08:21] *** Joins: jkaye (~jkaye@pool-96-234-204-169.bltmmd.fios.verizon.net)
[22:09:19] <ville> jaakkos: as far as why it's ub i don't know. seems odd.
[22:12:51] *** Quits: jkaye (~jkaye@pool-96-234-204-169.bltmmd.fios.verizon.net) (Ping timeout: 252 seconds)
[22:14:02] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.162) (Ping timeout: 260 seconds)
[22:15:47] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Ping timeout: 268 seconds)
[22:18:45] <jaakkos> Yeah, like, there's my object I've stored earlier, and I know it still exists, hasn't been copied/moved, but somehow pointer to it is no longer valid o_O
[22:19:30] <ville> apparently might have something to do with going from pair<K const, V> to pair<K, V>... but i don't quite follow the wording then
[22:20:21] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[22:20:36] <ville> if it gets placement new on top and http://www.eelis.net/c++draft/associative.reqmts#general-10.sentence-1 claims pointers remain valid, wouldn't pointer lifetime-end zap make then invalid...
[22:21:03] <jaakkos> It makes me wonder also if there is confusion with pair<K const, V>* vs. just K*, V*
[22:22:17] <ville> the K* or V* you had into a subobject of a pair<K const, V> would become invalid if the enclosing pair was placement new-ed on top?
[22:22:52] <ville> but i am misunderstanding something here anyways, the standard claims the pointers would remain valid
[22:24:37] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:38d0:a1a2:5189:934b)
[22:25:14] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b1c1:ac3d:59ba:4a9e) (Ping timeout: 260 seconds)
[22:25:50] <ville> wait. how does a node handle contain a _copy_ of an allocator?
[22:26:34] *** Joins: aniketgm (~Aniket@49.36.107.79)
[22:26:34] <jaakkos> Placement new: but reallocating/relocating the pair should violate the idea of not moving/copying the enclosed item which I thought was the idea in node handles
[22:27:09] <ville> [p0083]
[22:27:09] <npaperbot> P0083R3: [Library Evolution] Splicing Maps and Sets (Revision 5) <https://wg21.link/p0083r3> (by Alan Talbot, Jonathan Wakely, Howard Hinnant, James Dennett) (2016-06-24) (Related: https://wg21.link/lwg2743)
[22:27:57] <ville> that's still the latest. ok there's bunch of stuff i can't figure out based on that paper. how do you copy an allocator?
[22:31:14] <jaakkos> Hehe, haven't dealt with allocators much at all. In reality at this point I have given up the idea of calling .extract() and dealing with .find(), .erase() and other things known to work :D
[22:33:11] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:34:37] <jaakkos> Other than this UB hassle I rather liked the API of .extract() and node handles, including the call to .empty() on those.
[22:39:07] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:42:07] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[22:42:23] *** Joins: aniketgm (~Aniket@49.36.107.79)
[22:43:36] <ville> jaakkos: go to the paper above and to the "undefined behaviour" section
[22:46:40] <ville> so basically they are saying "magic" and that's that
[22:48:28] *** Quits: smach (~savio@177.12.40.244) (Ping timeout: 268 seconds)
[22:50:17] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[22:51:24] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[22:52:02] <jaakkos> Can't quite see why it would lead to invalidation of eg. pointer to mapped value (or even const pointer to mapped key), but I guess better be safe than sorry.
[22:52:27] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:53:12] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:03:25] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[23:07:23] *** Joins: rgrinberg (~textual@187.223.209.106)
[23:09:20] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[23:14:32] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[23:19:30] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:19:33] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:26:36] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[23:27:01] *** Joins: caramel (~caramel@user/caramel)
[23:27:59] *** Parts: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Leaving)
[23:33:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[23:34:21] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:38:29] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[23:43:06] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:43:30] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:44:14] *** Quits: Guest45 (~Guest45@217.155.41.132) (Quit: Client closed)
[23:44:56] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:45:25] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:46:15] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:51:09] *** Quits: rajkosto (~rajkosto@93-86-152-52.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[23:56:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:59:36] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
