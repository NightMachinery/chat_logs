[00:00:01] <pl> and as much as "digital" is made of analog components, the programming model is generally superior
[00:00:24] <selwyn> it's hard for me to understand the 80s hype around it, because it seems to me that it was dropping off even then
[00:02:04] <selwyn> analog computing is similar to quantum computing on the surface but fundamentally extremely different
[00:02:21] <selwyn> you can't do error correction on analog computers, which should rule out it being programmable
[00:03:59] <pl> selwyn: 80s?
[00:04:09] <pl> they were dead by 1970s at most...
[00:04:11] <selwyn> iiuc there was excitement about analog computing at that time
[00:04:20] <pl> selwyn: sounds very, very niche
[00:04:32] <selwyn> perhaps i am mixing it up with bubble memories or sth
[00:08:21] *** Joins: dra (~dra@2a04:4540:640f:9200:2802:54b:562e:ea7c)
[00:08:25] <dra> Hello!
[00:09:47] *** Quits: shka (~herr@83.175.151.96) (Ping timeout: 260 seconds)
[00:21:25] <hayley> gilberth: https://www.reddit.com/r/ProgrammerDadJokes/comments/qfrzaa/what_does_x11_become_when_you_rotate_the_display/
[00:21:26] -ixelp- What does X11 become when you rotate the display by 90 degrees? : ProgrammerDadJokes
[00:23:28] <selwyn> the nuclear funding model doesn't look that good
[00:24:16] <pl> what nuclear funding model?
[00:25:21] <selwyn> current uk strategy 'regulated asset base'
[00:29:52] <selwyn> idea is that consumers fund part of the development through taxes to make it more attractive to institutional investors
[00:30:31] <selwyn> but they won't want to take on a project which is likely to have escalating costs
[00:51:04] *** Quits: dra (~dra@2a04:4540:640f:9200:2802:54b:562e:ea7c) (Quit: Leaving)
[01:00:11] <gilberth> hayley: Heah? An X rotated by \pi over two still is an X.
[01:00:27] <hayley> X axis, Y axis
[01:01:00] <gilberth> The other 90Â° would give me the Z axis.
[01:01:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[01:02:18] <hayley> Where would else could I post my article? Did Twitter and Reddit to no avail.
[01:02:20] <gilberth> And don't get me started. Would I have time, I would fix X11 and/or propose the Y window system. But I guess that name is taken.
[01:03:40] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:04:45] <gilberth> Meanwhile I try to learn git. This makes me wanting to have CVS back. ;)
[01:06:47] <hayley> Someone told me to let it go, but I still maintain that this is worse than whatever the hell Selling Lisp By The Pound was about. 
[01:07:56] <gilberth> I don't get you.
[01:08:39] <hayley> I was told to stop bothering with "The poverty of post-open source", but it seems important to me.
[01:09:26] <gilberth> Well, too many things seem to be important for you. You still want to change the world, don't you?
[01:09:56] <hayley> Seems like it.
[01:10:22] <gilberth> That'll pass.
[01:10:40] <selwyn> lol
[01:11:26] <hayley> We seem to be the only people entertaining the idea that programming is actually quite fun, and the best software is developed by the people who want it, rather than trying to explain it to someone else.
[01:12:32] <gilberth> Well, the language wars are the same today as they were 30 years ago. Nothing changed.
[01:12:56] <gilberth> hayley: Of course is programming fun. Would I do that otherwise?
[01:13:33] <hayley> gilberth: Probably not. But most people seem to think it is not, or that they think only they find it enjoyable.
[01:14:03] <gilberth> hayley: Who says that programming is not enjoyable?
[01:14:26] <hayley> I can think of a few.
[01:15:25] <gilberth> Then get new friends. ;)
[01:15:59] * hayley still wishes that she wrote people should quit their jobs instead of dreaming up shitty organisations, if they don't like their jobs.
[01:16:00] <hayley> They're not my friends, but I know they exist.
[01:16:05] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:16:27] <gilberth> Rather tell me what it takes to have a current clang.
[01:16:42] * selwyn tries to think if he finds programming enjoyable or not
[01:17:03] <selwyn> basically yes
[01:17:39] <hayley> I got in trouble with my ex for making fun of someone who said "computers were a mistake" even.
[01:18:56] <hayley> .oO( Yeah, I was in the right, absolutely in the right, I certainly was in the right... )
[01:19:15] <hayley> gilberth: Compile from source? lol
[01:19:41] <gilberth> hayley: What other options do I have?
[01:20:13] <gilberth> And lately I begin to ditch any package managers and rather build straight from the source.
[01:21:10] <gilberth> ok. I need a new CMake and Python says the llvm documentation. I'll start there.
[01:23:18] <hayley> But, OTOH if I'm to believe what I say, then it doesn't matter how many people for that shit, because they just won't be able to get anything done.
[01:24:59] <hayley> But I don't want to rely on that, because, having experience of being able to do nothing even when putting the effort in, it's not very pleasant.
[01:25:01] <gilberth> I wonder if a 64 core machine would speed up compiling.
[01:26:34] <hayley> Probably. You got one?
[01:26:59] * hayley uses 1 mutator core and 63 GC cores
[01:27:33] <selwyn> do any implementations beside clasp have parallel compilation?
[01:27:44] <gilberth> Though 28s for building Python is fair.
[01:27:57] <gilberth> hayley: I don't believe I would have use for that many cores.
[01:29:37] <hayley> SBCL does, but you need a parallel build system (e.g. POIU)
[01:31:21] <hayley> gilberth: I wrote some AVX code to lookup page numbers in a "Bloom filter", and it scans at about 5.5GB/s/core. Should work pretty well.
[01:32:27] <hayley> (It's not exactly a Bloom filter, but rather two bitmaps encoding which page numbers are being moved, with a separate bitmap per hash.)
[01:32:30] <gilberth> In general I believe GC work should be scheduled for idle times. Can we do that?
[01:33:05] <gilberth> Hugh?! CMake takes longer to build than Python. But it seems to be C++.
[01:33:26] <hayley> Yes, IIRC Java can do that now even.
[01:34:21] <hayley> https://www.eclipse.org/openj9/docs/xxidletuninggconidle/ OpenJ9, but IIRC HotSpot has something like that.
[01:34:22] -ixelp- -XX:[+|-]IdleTuningGcOnIdle -
[01:35:32] <gilberth> How did the line noise get there?
[01:37:08] <hayley> Oh, here it is for HotSpot https://openjdk.java.net/jeps/346
[01:37:09] -ixelp- JEP 346: Promptly Return Unused Committed Memory from G1
[01:38:58] <gilberth> CMake is still building. What does take it so long?
[01:39:20] <hayley> Huh, apparently IBM hardware allows for a read barrier in hardware.
[01:39:41] <gilberth> Nice.
[01:40:10] <hayley> "Guarded storage facility"
[01:41:22] <hayley> Apparently Go does periodic GC, but I couldn't find anything about trying to GC when idle. And I read an article which was quite hell-bent on reducing allocation rates, lol
[01:41:58] <hayley> Must suck to not have generational GC, but then the write barrier would be too slow.
[01:45:13] <hayley> "Stack allocation is cheap, heap allocation is expensive." lmao
[01:45:45] <gilberth> ok. How to tell CMake to use gcc-11.1 instead of gcc-4.9.2, which it complains about?
[01:45:58] * hayley thinks
[01:45:59] <White_Flame> well, stack allocation is just as cheap, but stack deallocation is much faster
[01:46:11] <hayley> IIRC cmake knows CFLAGS, so try CC?
[01:46:29] <gilberth> CC is not working.
[01:46:40] <hayley> Yes, but heap allocation shouldn't be that bad, and woe on you for not doing optimistic stack allocation too.
[01:47:33] <gilberth> Unfortunately gcc-11.1 is called gcc-11.1 otherwise I could just switch the $PATH
[01:48:12] <gilberth> I could try a link farm, but that is an utter mess which I want to avoid.
[01:48:13] <hayley> Symlinks?
[01:48:27] <selwyn>  there's no cmake without fire
[01:49:24] <hayley> "Stack allocation is an implementation issue, not a language issue" "That sign won't stop me, cause I can't read!"
[01:55:24] <gilberth> ok. I typed 'make', it's building llvm. Wish me luck.
[01:56:01] * selwyn clasp flashbacks
[01:56:43] <selwyn> couldn't get my head around the latest llvm requirements, hopefully it will be clearer when 1.0 is released
[01:56:48] <gilberth> Ah. failed. That was quick.
[01:57:23] <gilberth> And no error message otherwise. Terrific. And now?
[01:57:35] * hayley uploaded an image: (117KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/tVOUJfGLUnIgYGORzzODfxjW/stack-allocation.jpg >
[01:57:59] <hayley> I could theoretically also do a Rust version, but it'd be a pain to get the crab to fit.
[02:00:25] <GreaseMonkey> sure you can, you just declare the crab as unsafe
[02:00:32] <hayley> There is also "deep stack allocation" where the allocation site picks the right frame to allocate in: http://130.203.136.95/viewdoc/download?doi=10.1.1.25.3325&rep=rep1&type=pdf
[02:00:42] <hayley> Yes, idk how I got the IP address either.
[02:03:08] *** Joins: makomo (~makomo@user/makomo)
[02:04:23] <hayley> Apparently deep stack allocation sucks though, and they only do static analysis, which is the opposite of the point.
[02:06:00] <gilberth> This build process somehow is broken. The error message suggest my libstdc++ is not up to date. But it is and came with gcc-11.1, maybe that is too new?
[02:08:15] <hayley> OTOH the trick of normal optimistic stack allocation is that you find the right stack frame for an object when it escapes, then patch the allocation point to heap allocate for later. So, allocating on another frame obfuscates where the allocation point is.
[02:08:59] <hayley> But, given we have an apparently way faster stack, maybe it wouldn't hurt to have another pointer to the allocation point for each object.
[02:09:08] <GreaseMonkey> this is hinting at the idea that one should always allocate onto the heap if something can escape
[02:09:18] <GreaseMonkey> although then again it'd have to be a GC'd heap
[02:09:31] <White_Flame> what if it escapes the heap?
[02:10:11] <White_Flame> end up in a wild pointer chase
[02:10:38] <hayley> Then your GC is broken.
[02:11:10] <hayley> GreaseMonkey: But then e.g. MAPCAR always heap allocates unless you inline it. It'd be less of a win.
[02:12:03] <GreaseMonkey> for C specifically an alternative would be "if a pointer to somewhere in a scope gets stored somewhere that isn't readily deallocated by the time one leaves the scope, that's an error", perhaps
[02:12:09] <hayley> Baker does static analysis with a "return value optimisation", where the callee tells the caller if it will use any return values, and if it's just used for IF (so just pass down one bit).
[02:12:20] <hayley> This ain't C though.
[02:12:28] <GreaseMonkey> and by error, we're talking about C so it's a warning, but you should always be using -Wall -Wextra -Werror anyway
[02:12:50] <GreaseMonkey> at least for development, for just building the damn thing w/o developing on it -Werror tends to break builds
[02:15:18] <hayley> Another question is how you're supposed to allocate onto a stack frame that isn't the hottest one, even if you use a different data stack.
[02:17:31] <hayley> The paper does address that, and suggests to use a ring buffer of extra stack "frames".
[02:22:21] <hayley> But then the X <= Y write barrier won't work for a ring buffer.
[02:22:33] <gilberth> Well, it would be nice if it could be decided in runtime, if something escapes or not. By prime example is CHECK-TYPE.
[02:25:19] <Catie> Help me see if I'm understanding this correctly: if an object isn't reachable after returning from frame N, then the space for it will be allocated along with frame N but not used until further down on the call stack when it's initialized?
[02:25:24] <gilberth> 56% it says.
[02:25:41] <Catie> Sorry, in regard to "deep stack allocation"
[02:25:46] <hayley> The problem is that handling escaping requires you to scan some part of the stack, so you really try to bias towards either heap allocation or stack. 
[02:26:49] <hayley> It'll be allocated and initialized in the function which allocates, but it'll be stored in frame N. 
[02:28:06] <Catie> hayley: my understanding of stack allocation is that it's done by decrementing the stack pointer. Wouldn't the stack pointer already be well below frame N by the time the object is used? Or am I missing something about how stack allocation would work in this scenario?
[02:29:33] <hayley> If it's not reachable after returning from frame N, then it's only going to be used before returning from frame N.
[02:30:51] <gilberth> You could tell by the direction pointers point. Almost.
[02:31:13] * hayley gets confused with stacks because the x86-64 grows by decrementing addresses.
[02:31:19] <Catie> Right yeah, I'm just not sure what you mean by how it could be allocated deeper in the call stack but be physically in frame N. Like wouldn't the process of creating the space on the stack have to happen well before the point of initialization if it's lower down on the stack?
[02:31:41] <Catie> Yeah sorry, the terminology is pretty backwards, and I'm not super confident that I've been consistent about "higher" vs. "lower"
[02:31:44] <gilberth> hayley: Which stack doesn't? They all grow downwards.
[02:32:04] <hayley> Yes, this is why they have to reserve some space in a ring buffer to serve as extra "stack" space.
[02:32:35] <gilberth> Why does the direction matter here?
[02:32:53] <Catie> Shucks okay, thank you!
[02:33:22] <hayley> It doesn't, it just makes "higher" and "lower" weird.
[02:33:57] <hayley> I like using the MPS terminology with the "hot" end and the "cold" end, but then I hurt my head handling stack frames for SICL.
[02:48:44] <gilberth> Build done.
[02:50:12] <gilberth> But no clang?
[02:53:45] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[02:56:43] <hayley> https://www.youtube.com/watch?v=Uwn9ph14K5A
[02:56:44] -ixelp- Johann Sebastian Bach "Prelude in C Major" on a Roland MC-202, SH-101, TR-606 â Data Cassette - YouTube
[02:57:05] <gilberth> C Major?
[02:57:42] <hayley> Yes.
[02:59:04] <gilberth> How much is such a 64 core machine anyway?
[02:59:51] <hayley> The average rustc machine was like â¬5500 EUR IIRC
[03:00:04] <gilberth> ouch
[03:00:35] <gilberth> The average SICL hacker machine is what?
[03:00:38] <hayley> I couldn't imagine using that as a desktop, admittedly. As a server/thin client system with the price split between friends, sure.
[03:00:53] <hayley> That OCTO mini PC I linked a few days ago.
[03:01:26] <gilberth> Well, my cousin agreed I could place a decent machine in the basement and run network up here.
[03:01:31] <hayley> Depending on the model, 4 to 8 cores IIRC. And I think beach said it was about â¬550
[03:01:52] <gilberth> Which is 1/10 a Rust machine then.
[03:02:48] <hayley> Yes.
[03:02:58] <hayley> Though SICL is still probably faster to bootstrap.
[03:03:59] <hayley> "Well, this morning was fun.  From Bleujour, I ordered an OCTO with 32GB of memory, 500GB of SSD, and a processor with 4 cores.  I also ordered an OCTO N4000 for my (admittedly small) family, and two USB C to DVI cables for my old monitors.  All that for a little more than 1kâ¬."
[03:04:19] <hayley> So, two machines and some cables for â¬1000. 
[03:05:56] *** Quits: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[03:06:11] <hayley> Though the website says such a configuration is â¬929. Maybe it was on sale then.
[03:06:25] *** Quits: gilberth (~gilberth@p5492d7b6.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:10:37] *** Joins: gilberth_ (~gilbert@dynamic-095-112-195-251.95.112.pool.telefonica.de)
[03:10:37] *** ChanServ sets mode: +o gilberth_
[03:11:03] <gilberth_> Hmm. Building clang crashed my machine, it seems. :-(
[03:11:22] <hayley> Congratulations!
[03:11:27] <gilberth_> So much for that.
[03:11:51] <hayley> Apparently the CPU alone sets you back like â¬4200.
[03:12:28] <gilberth_> I am doomed now.
[03:12:30] <hayley> Oh, the machine was â¬6,654 with tax apparently.
[03:13:01] <gilberth_> I need to find someone to power cycle that machine and boot it again.
[03:14:33] <gilberth_> And: How did that happen?
[03:19:26] <hayley> gilberth_: I count â¬7288 for a 64 core machine with 128GB of RAM, 2TB SSD and a more expensive GPU than the one I have.
[03:21:09] <gilberth_> hayley: Would you be so kind and leave country for a free uni, a free house, and a more liberal society? Only condition: reboot that damn machine.
[03:21:28] <hayley> Lockdown is still a thing.
[03:21:40] <hayley> And I don't have the energy to handle transferring study credit again.
[03:21:50] <gilberth_> Fair enough.
[03:30:55] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[03:31:50] * hayley is informed that the author of Post-Open Source read The Poverty Of and panics quietly.
[03:31:52] <gilberth_> It's there again. False alarm. The internet appears to have been been lost. *sigh*
[03:32:16] <gilberth_> hayley: So, no need for you to come over, sorry.
[03:32:26] <hayley> Damn.
[03:32:48] <hayley> https://twitter.com/Transhumanian/status/1453149947285573636 A worse trolley problem
[03:33:09] <gilberth_> Anyhow, such a 64 core machine sure is nice. But I'd rather invest in disks and RAM, RAM, and more RAM.
[03:34:02] <hayley> Someone asked if they should ask what the author thinks. But I can already guess the answer, given the accusations I make.
[03:38:49] <hayley> It's quite likely that I sound like another free software lunatic, given that I have good things to say about the lack of organisation and the idea that many people could program without investing too heavily into it. 
[03:47:02] <hayley> Apparently they didn't understand the points made, and I didn't understand theirs.
[03:50:25] *** Joins: jeko (~user@user/jeko)
[03:51:46] *** Quits: gilberth_ (~gilbert@dynamic-095-112-195-251.95.112.pool.telefonica.de) (Ping timeout: 260 seconds)
[03:57:55] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[03:57:55] *** ChanServ sets mode: +o gilberth
[03:58:58] <gilberth> Oh dear. I was away again. :(
[04:00:23] <hayley> https://www.youtube.com/watch?v=lnGD8RI0kGQ
[04:02:28] <gilberth> Now, when I try to build profile support, that doesn't work somehow. I get an error complaining about -fPIC missing.
[04:05:30] *** Joins: ixelp (~ixelp@p5b157756.dip0.t-ipconnect.de)
[04:05:30] *** ChanServ sets mode: +o ixelp
[04:05:32] * hayley is sick, has a sore arm from the second needle, and is under stress.
[04:05:56] <hayley> At least I performed average on the last maths quiz. Cs get degrees and all. 
[04:06:39] <gilberth> There is this C again!
[04:09:31] <hayley> https://www.youtube.com/watch?v=nDXHtFw6Gm8
[04:09:31] -ixelp- Bela Lugosi Is Dead (Live @ Hammersmith Palais, London) - YouTube
[04:10:38] <hayley> Apparently they read "free software" to mean the FSF definition, and thought they misread, but I actually meant that, since roughly no one has used a different definition before.
[04:12:02] <gilberth> Well, the FSF has a monopoly on the term 'free'. My 'free' is not theirs.
[04:12:25] <hayley> Are you convinced of anything by my article? Though I suppose you don't have much to be convinced of.
[04:12:28] * pl looks at prices of fast 128 core machine
[04:12:57] <gilberth> pl: The machine shown was a 64 core machine.
[04:13:04] <gilberth> hayley: Which one?
[04:13:10] <hayley> 64 cores, 128 threads.
[04:13:14] <hayley> gilberth: "The poverty of post-open source"
[04:13:30] <gilberth> Have I read it?
[04:13:36] <hayley> Yes.
[04:14:13] <hayley> You said you wanted an argument for how hacking hard things doesn't really require a monetary bribe, and I said it seemed more obvious than anything else.
[04:14:31] <hayley> https://applied-langua.ge/posts/the-poverty-of-post-open-source.html ring a bell?
[04:14:37] <gilberth> Yep.
[04:16:26] <hayley> What I think I said (TL/DR) was that hiding source materials makes programming hard, so few people do it, so you have an excuse to hide more stuff as no one would use it, that programming is probably desirable for more people, and that the "organisation" done with FOSS is actually pretty close to optimal.
[04:16:35] <gilberth> Hmm? A make -j12 fails, while make [no -j] does sth?
[04:17:05] <hayley> I've heard of some Makefiles which only work with -j1, or better yet, complain on higher -j since no one fixed them.
[04:17:36] <gilberth> I am talking about llvm/clang. Do people really build that with -j1?
[04:17:52] <gilberth> How many hours should I wait?
[04:17:52] <Catie> I have, but only by accident
[04:18:00] <Catie> It took most of a day
[04:18:21] <Catie> A waking day, anyway
[04:18:49] <hayley> IIRC when I tried -j12, it would swap too hard.
[04:19:17] <gilberth> My initial llvm build took like 35min and building clang another 20 or so. Now I try to add PGO and this doesn't seem to work right. Perhaps I build from scratch?
[04:19:49] <gilberth> hayley: With how much RAM?
[04:20:03] <hayley> 16GB
[04:21:29] <gilberth> I have twice that much.
[04:22:39] <gilberth> But "slow" disks, having a high -j makes the machine do some work, while others wait for the disk. I used to use -j even on single core machines in ancient times.
[04:23:49] <gilberth> And isn't -fPIC the default these days?
[04:24:08] * hayley shrugs
[04:25:43] <gilberth> When I pass -fPIC as CFLAGS that is ignored. That's terrific.
[04:26:17] * gilberth tries building clang with the new clang.
[04:26:45] <hayley> So now I am having a conversation with someone in both rooms as proxy. /me is too sick to bother
[04:27:05] <gilberth> Doesn't work.
[04:30:34] <hayley> https://www.youtube.com/watch?v=Zc-SUX5FDIo
[04:30:35] -ixelp- You Are In My Vision (Remastered) - YouTube
[04:31:03] <gilberth> As proxy? Do you relay messages?
[04:31:27] <hayley> Seems I got confused, and got the claim about monetary requirements from someone else doing a completely different thing. But, still no good if I have to ask for sources for every damn library I want to use.
[04:31:27] <hayley> Someone else did.
[04:32:09] <gilberth> It's silly to need to ask for sources.
[04:33:12] <hayley> And it doesn't actually achieve anything. If the aim is to keep the code out of the hands of corporations, well, I can't exactly clear someone as definitely not fronting for a corporation.
[04:34:38] <hayley> But I probably should at least make the edit to say someone else said that, but gating is roughly about as bad still. 
[04:36:14] <hayley> (You might think, "well, sue them?" but apparently the legal system is hopeless according to them. So, good luck with enforcing that too.)
[04:40:00] <hayley> So I'd write something like "Another instance of squaring social circles is the ___ development process. Whereas the barrier there was technical, the barrier here is monetary. ... But the problem does not lay in monetary requirements, it lays in having to ask and wait for sources..."
[04:49:48] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[04:59:21] <gilberth> It's about power and control. But, hayley, why do you care?
[05:06:12] <hayley> Because a lot of the stuff I do is predicated on the idea that programming is actually fun, and people should do it as a means of self-expression and to help them reason about things.
[05:09:29] <gilberth> lol. I can't build clang a second time.
[05:09:57] <hayley> Sure, it's about power, but such a statement on its own is useless for figuring how to undo power. Hence why I have a go at the original ending which says "it's all capitalism's fault" - there are more interesting reasons, and having such a shallow answer keeps you open to the same bullshit with a different name.
[05:11:12] <gilberth> undefined reference to std::cout? Really?
[05:11:35] <hayley> lol
[05:11:41] <hayley> No #include <stdio>?
[05:14:03] <hayley> Hooray, I got full marks for my Python code to compute a correlation coefficient. The rest of the results were still mediocre. Oh well.
[05:14:07] <gilberth> Whatever that is called in C++.
[05:14:46] <gilberth> But, hayley, why was that building initially and not now?
[05:14:48] * hayley thought about the purpose of clearing in the shower.
[05:15:08] <hayley> gilberth: How would I know? I only studied introductory C++.
[05:15:50] <gilberth> Do I sound like a C++ hacker?
[05:15:54] <hayley> While it is hard to encode anything serious into a license, I suppose you can still sue someone for distributing the software to their corporation, if you only said that the someone could use it.
[05:15:56] <hayley> No?
[05:16:13] <gilberth> I need coffee.
[05:17:34] <hayley> The other question is: how do you find about someone redistributing the code further? If you're giving it out with permission, do they have to credit you anywhere? If they're going to steal code off you, why would they bother with attribution still?
[05:19:14] <hayley> gilberth: Arguably, having users is important for a compiler writer, so dispelling the notion that it's all bad is important.
[05:22:52] <gilberth> Well, you can't steal from me to begin with.
[05:23:17] <hayley> Amusingly that also comes up. Someone said that "open source puts code at risk of theft" - how do you steal it exactly?
[05:26:23] <hayley> Still, not as bad as them saying that it is a security risk, which implies that you have no security at all.
[05:28:10] <hayley> .oO( Surely this is Conway's law in action: crappy organisation with poor excuses for anything produces crappy software with poor excuses for anything? )
[05:28:53] <gilberth> It fails to link. This is hilarious.
[05:30:06] <hayley> Why do you need a new clang again?
[05:33:33] <gilberth> I want to see if -mbmi does sth. I have clang-6 on my fast machine and it produces slower code than gcc-11 to begin with. On the mac it's clang-10 or sth, and there it is the reverse.
[05:33:43] <hayley> I see.
[05:35:25] * hayley uploaded an image: (644KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/MqZKVSJXKzCMaUpbWzxVKrRY/evil-robert-strandh.jpg >
[05:38:15] <gilberth> hayley: It's quite a difference. I am 13ns/cycle with clang and PGO and a mere 18ns/cycle with gcc-11.2 on the slow machine. Sth around that.
[05:38:32] <hayley> A fair few of the extension instructions seem to suck these days. Like the SSSE3(?) string search instructions are worthless.
[05:38:47] <gilberth> It's 7ns/cycle on the fast machine with gcc-11 and 10ns/cycle with clang-6 on the fast machine.
[05:38:52] <hayley> SSE4.2 rather
[05:39:47] <hayley> http://0x80.pl/articles/simd-strfind.html#x64-computers PCMPESTRM is the one to make fun of - it's slower than serial strstr!
[05:39:47] -ixelp- SIMD-friendly algorithms for substring searching
[05:40:39] <gilberth> Yes, this happens all the time, you need to be careful with those CISCy instructions.
[05:41:50] <gilberth> E.g. there is bound checking instruction which would raise an exception. I believe its called BOUND, and it's slow.
[05:43:50] <gilberth> hayley: Where is my coffee? I am waiting. Service once was better here, may I talk to the manager?
[05:44:03] * hayley pours the coffee
[05:44:11] <hayley> I thought that was dave0's job
[05:44:28] <gilberth> He is staff now?
[05:44:34] * gilberth sips.
[05:46:45] <gilberth> clang/llvm is a random generator of build fails. I am not made for such things.
[06:03:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:05:00] <hayley> There is also a water pipe leak at home again.
[06:05:11] <gilberth> Again?
[06:05:22] <hayley> Yes.
[06:05:44] <gilberth> In the house?
[06:06:23] <hayley> Today has been pretty shit. I'm still in pain, someone gave my article to who it's critiquing for no reason, and now there's no damn water.
[06:06:26] *** Joins: vats (~vats@103.158.91.165)
[06:06:30] <hayley> Last time it was down the driveway, as the pipe goes that way.
[06:07:33] <gilberth> Ok. setting CXX to g++ instead of gcc seems to help. My bad. We'll see.
[06:07:52] <hayley> Yes, that tends to help.
[06:08:11] <gilberth> hayley: Then, I suggest, you get a new day, this one appears to be faultly. Ask for a refund.
[06:08:35] <gilberth> failed again. Do I give up?
[06:20:36] <gilberth> Can't we make all those cores optimizing our software while idle? And could that be shared between machines?
[06:20:59] <hayley> https://www.youtube.com/watch?v=jDRdEwVZEUY
[06:20:59] -ixelp- administrator gaming - YouTube
[06:21:18] <gilberth> Imagine all those millions of CLOSOS users using their machines to optimize code together.
[06:21:51] <hayley> The former is called a JIT, the latter poses more security issues than it's worth.
[06:22:08] <gilberth> Security? How so?
[06:22:18] <hayley> You get code from an untrusted source?
[06:23:10] <gilberth> No. I just would pass sth like "Consider to inline FOO for X being an (integer 0 255), here is my profiling information."
[06:23:15] <hayley> Anything below the AST in Cleavir is unsafe. And I don't think the interesting parts to optimise are necessarily the same between users, if they have different usage patterns.
[06:23:49] <hayley> Else, such analysis tends to converge quickly.
[06:24:13] <gilberth> I mean that is like theorem proving or playing chess. It's not about the algorithms alone, but also about heuristics, what to open code in the hope that a lot of IFs go away.
[06:25:58] * hayley watched a video about functional-but-in-place stuff and how C++ was faster than their language, and their language was faster than Java, Haskell, Go, etc...
[06:26:12] <gilberth> In theory the C compile could be my CADR microcode compiler. It has all the information to do that, when I put the microcode itself in the code as ucw_t ucode[] = { ... };
[06:26:43] <hayley> One bug is that the Haskell, Java, Go, ... GCs assume multiple threads and thus have to use atomics, but C++ shared_ptr isn't thread safe, and I have no idea what their language does.
[06:27:30] <hayley> Atomics cause serialisation on x86-64, even when the current core owns all the cache lines involved IIRC.
[06:27:34] <gilberth> How is that a bug?
[06:27:50] <hayley> It's not a fair comparison if one does atomics for automatic memory management and the other doesn't.
[06:28:33] <gilberth> Can it be really automatic, when I don't use atomics? I'd say: no.
[06:29:27] <hayley> Hm, no, C++ shared_ptr does use atomics to change the refcount.
[06:30:00] <gilberth> Ah, it's reference counting? So no GC.
[06:30:10] <hayley> Right.
[06:32:25] <gilberth> Meanwhile I contemplate how many cores, how many ram, how much disk space and whether that should be disks or flash, I should get.
[06:34:00] <hayley> I can't remember if x86-64 only gives you sequentially consistent atomics, or if it was something else.
[06:34:21] <gilberth> You're the expert here.
[06:35:24] <hayley> I don't know much about weaker consistency models, only SC for shared memory and eventual consistency for distributed systems.
[06:35:33] <hayley> x86-64 has "total store ordering" at least.
[06:37:45] <hayley> TL/DR atomics are always slower than not on x86-64. But e.g. on the Apple M1 they have weaker atomics and don't have to give up OOO for atomics in single-threaded programs.
[06:39:06] <gilberth> So within a chip one core does not know that it is the sole "owner" of some cached data?
[06:39:14] <hayley> https://www.youtube.com/watch?v=faL1oUbUcPg
[06:39:15] -ixelp- 18. Nine Inch Nails - Down In The Park (featuring Gary Numan) : [ after all is said and done ] - YouTube
[06:39:15] <moon-child> x86 has non-temporal loads/stores
[06:39:27] <moon-child> but you have to ask for it
[06:40:00] <hayley> It does, but AIUI it still establishes a barrier.
[06:40:07] <hayley> I never got non-temporal loads/stores.
[06:42:31] <hayley> Didn't like the rest of the presentation, admittedly. Like how apparently LLVM is magically faster than any other compiler (tell that to the Clasp developers). But I am biased as I prefer tracing GC and explicit mutation.
[06:44:25] <gilberth> Well if llvm doesn't build, it can't be faster.
[06:47:13] <hayley> And apparently every time they try to tell LLVM about the lack of aliasing in Rust, it does something dumb. So much for that.
[06:48:06] <moon-child> I have heard gcc internal structure is not great; but as a user, it has always been better than llvm for me
[06:48:11] <hayley> T'was https://youtu.be/vzfy4EKwG_Y FYI
[06:48:11] -ixelp- "Outperforming Imperative with Pure Functional Languages" by Richard Feldman - YouTube
[06:48:46] <moon-child> (better diagnostics, better compile time, easier to build, etc)
[06:48:51] <moon-child> probably the only good redhat product
[06:49:08] <hayley> And then I can complain about how the stuff I do with FP tends to be non-linear, and so the in-place optimisations would never happen.
[06:49:27] <hayley> ....and didn't Baker do linear logic quicksort 30 years ago?
[06:49:51] <moon-child> yes, and ats has boasted similarly for past decade or so
[06:50:17] <gilberth> Well, I don't know about the internals of gcc. All I know is that writing a new backend is rather easy.
[06:51:01] <hayley> https://plover.com/~mjd/misc/hbaker-archive/LQsort.html
[06:51:09] <gilberth> The only downside is, that there is no libgcc written in C.
[06:52:07] <hayley> That one's closer to 2x faster than the inbuilt SORT, but I found SBCL's inbuilt SORT to be pretty mediocre.
[07:16:23] <hayley> But, e.g. DFA generation from derivatives is almost functional (bar putting memoisation information in slots of RE objects), but very non-linear, as we do structure sharing to terminate.
[07:18:26] <gilberth> It still complains about -fPIC and is not accepting my CFLAGS. Do I need to rebuild and/or configure my gcc to have that as default?
[07:19:13] <hayley> Maybe you need to bootstrap from a newer compiler for some stupid reason?
[07:19:41] <gilberth> hayley: gcc-11.1 is pretty new. Latest is gcc-11.2
[07:19:50] <hayley> Point made.
[07:20:44] <gilberth> I have no idea. It might be that -fPIC is the default with most distributions. idk.
[07:21:27] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:27:27] <gilberth> I play dirty now. I say mv gcc-11.1 gcc-11.1-real ; emacs gcc-11.1 ; #! /bin/sh \n exec /opt/gcc-11.1.0/bin/gcc-11.1-real -fPIC "$@" c-x c-s c-x c-c ; chmod a+rx gcc-11.1 --- let's see.
[07:27:58] * hayley hits the lid on a container with a spanner until it decides to open again.
[07:28:00] <hayley> This worked somehow.
[07:28:19] <gilberth> ?
[07:28:54] <hayley> Yes, the spout uses a rotating mechanism and refused to turn.
[07:30:15] <hayley> Something like https://www.youtube.com/watch?v=NnW1AUKT2eQ
[07:30:16] -ixelp- Meet the Engineer TV meme - YouTube
[07:34:03] * hayley puts https://www.youtube.com/watch?v=IJr61z44m6c on jukebox again
[07:34:12] *** Joins: semz (~none@user/semz)
[07:35:52] <gilberth> * ixelp still misses ACTION messages.
[07:38:20] <gilberth> I remember reading that at least with macOS -fPIC is the default.
[07:43:43] *** Quits: jeko (~user@user/jeko) (Remote host closed the connection)
[07:48:10] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[07:49:41] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[07:56:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:57:14] <dave0> maw
[08:01:00] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Quit: Leaving)
[08:04:37] <gilberth> Hello dave0! hayley thinks you are staff now.
[08:05:49] <dave0> hey gilberth 
[08:06:08] <dave0> cool! how much do i get paid?
[08:06:55] <gilberth> We're cheap, sorry.
[08:07:10] <dave0> what about benefits?
[08:07:50] <gilberth> Benefits? Free advice about RE->DFA conversion and coffee, of course.
[08:08:22] <gilberth> I could also offer some free B32 consulting.
[08:08:23] <dave0> coffee? sold!
[08:09:02] <dave0> gilberth: i like your B32 ISA
[08:09:04] <gilberth> hayley will prepare one for you. HAYlEY!
[08:09:33] <gilberth> dave0: I too, it's so pretty primitive.
[08:09:55] <dave0> "freshen your coffee, hun?"
[08:10:51] <gilberth> That's too non-CS English for me.
[08:12:13] <gilberth> I believe I will be lost when I would need to communicate to normal people.
[08:53:06] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:05:25] <hayley> What am I preparing? The coffee?
[09:15:16] <gilberth> What else?
[09:15:47] * hayley pours the coffee C[_]/~
[09:16:32] <gilberth> Oh no! Oh no! No, no, no! Another "C".
[09:17:08] <gilberth> See C is everywhere.
[09:17:49] <gilberth> I wonder, whether I also should go with updated binutils? But then: What is so hard about linking?
[09:19:44] <dave0> oh i haven't brought out the colourful coffee cups for ages
[09:20:00] <dave0> C4(___)~ C8(___)~ C3(___)~ C2(___)~
[09:20:07] <dave0> they're mugs
[09:20:18] <dave0> C4[_]~ C8[_]~ C3[_]~ C2[_]~
[09:20:23] <dave0> that's the cups
[09:20:29] <Qwnavery> https://www.youtube.com/watch?v=769z-UAM3Dc
[09:20:30] -ixelp- Cider Road - YouTube
[09:20:56] <Qwnavery> dave0: :O cawfeeee
[09:22:07] * Qwnavery should make a .c program that is just scrolling rainbow cawfee cups
[09:22:41] <gilberth> Will the program also look like that?
[09:23:08] <Qwnavery> like donut.c?
[09:23:29] <gilberth> What does it do?
[09:23:47] <Qwnavery> donut.c generates a spinny donut, the source is a donut. hehehe
[09:24:05] <gilberth> Yeah, like that.
[09:24:12] <Qwnavery> https://github.com/limiteci/donut.c
[09:24:13] -ixelp- GitHub - limiteci/donut.c: A donut-shaped C code that outputs a 3D spinning donut
[09:24:51] <Qwnavery> make a spinny rainbow cawfee cup from source that looks like a cawfee cup?
[09:24:51] <gilberth> Nice.
[09:25:20] <gilberth> Qwnavery: that was my idea.
[09:25:46] <gilberth> To complement the donut.
[09:25:49] <Qwnavery> good luck lool
[09:26:52] <Qwnavery> Honestly a full on ascii demoscene would be cool too
[09:27:24] <Qwnavery> scrolling rainbow coffee cups on the top and bottom while the coffee cup spins in the middle
[09:28:16] <Qwnavery> every now and then the text "CAWFEE CAT!" or "CAWFEE TIME!" will cycle through the scrolling bars lol
[09:33:37] <gilberth> Hmm, a coffee cup is a more complicate shape than a donut.
[09:33:50] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:34:11] <hayley> https://www.youtube.com/watch?v=HXIw1BvfEQ8
[09:34:12] -ixelp- No Fun - YouTube
[09:38:45] <moon-child> gilberth: a coffee cup is topologically a donut
[09:54:06] <dave0> the handle is the donut hole :-)
[09:55:20] <White_Flame> unless it's not a closed loop handle
[09:55:24] <hayley> https://www.youtube.com/watch?v=WlFVPnGEb8o
[09:55:25] -ixelp- Building an ULTRA-BRIGHT water-cooled TV... - YouTube
[09:55:32] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[10:03:08] <gilberth> moon-child: Sure, but not for rendering.
[10:05:18] <gilberth> But a simple cylindrical cup with a [cut] donut shaped handle, should be too difficult. I wonder if raytracing would be an option :-)
[10:05:52] <gilberth> The should cast a shadow.
[10:06:02] <gilberth> * The handle
[10:06:11] <Qwnavery> moon-child: a klein bottle is topolgically a flat plane :)
[10:16:33] <hayley> (make-instance 'sicl-random:https://www.youtube.com/watch?v=7OT4NlUugLE)
[10:16:34] -ixelp- Random (Live 79) - YouTube
[10:16:41] <Qwnavery> what do you guys think of this? https://www.bogodyne.com/
[10:18:04] <hayley> Another OS for olde Lisp machines?
[10:18:42] * hayley uses circular cons cells with maths symbol as logo, prepares to sue
[10:19:14] <hayley> The original SVG dates to June 22, 2019 here. But I guess sadly theirs is older ):
[10:26:15] <Qwnavery> if lisp machines are the pursuits of a mad hacker, then mad I must be.
[10:31:24] <gilberth> Well, we have 2021 by now. And don't see what a Lisp machine could do, what we don't have already.
[10:32:40] <hayley> "Oh God, don't do that, please don't do that!" - Cliff Click on interpreting JVM bytecode in hardware
[10:33:32] <gilberth> Heh.
[10:34:26] <hayley> https://www.youtube.com/watch?v=TYIl6n_SRCI
[10:34:27] -ixelp- The Kinks - Sunny Afternoon (Official Audio) - YouTube
[10:34:34] <gilberth> The CADR was doing it in software, so it's safe. :-)
[10:34:46] <hayley> It is still 27Â°C, so I call it a sunny afternoon.
[10:36:00] <gilberth> And we don't have that space constraints anymore.
[10:37:01] <gilberth> Any machine of today can happily run CMUCL, which is pretty large.
[10:37:50] <gilberth> CLISP was 1.5MB, Allegro 4.3MB and CMUCL 20MB. In the 90s.
[10:39:05] <Qwnavery> My arguement is not space, but rather complexity.
[10:39:34] <gilberth> Which complexity?
[10:39:43] <Qwnavery> The complexity of scaled systems.
[10:40:11] <Qwnavery> I.e. servers, distributed computing, datacenters etc.
[10:40:40] <gilberth> And? I fear I don't quite get what you are after.
[10:40:58] <Qwnavery> being able to hotswap hardware is already a thing, but I believe it could be enhanced with lisp hardware.
[10:41:53] <Qwnavery> There's also the matter of security. Being entirely memory safe from the hardware level up means that you can theoretically write an uncrackable system. It'd take direct hardware access to do so.
[10:41:56] <gilberth> How would a lisp hardware help? And the CADR is no Lisp hardware.
[10:42:18] <Qwnavery> I'd like to make my own from the ground up.
[10:42:35] <gilberth> Well, there is (declare (optimize (safety 0)))
[10:43:19] <gilberth> And when you talk about Lisp machines: areas = manual memory management and a host of primitives which are not safe.
[10:44:42] <gilberth> Qwnavery: Go ahead then.
[10:44:58] <Qwnavery> I have a lot to learn, I know. Consider me a madman if you will, but I have a vision to create a modern lisp machine. 
[10:45:46] <Qwnavery> Completely open source from the hardware up.
[10:47:34] <Qwnavery> That means all the HDL code would be free for anyone to manufacture or modify. Under the condition that the core code remains free. Yes GPL, I'm aware of controversy but I see it as the only way to ensure security.
[10:48:13] <gilberth> Will there be real hardware or would this be another byte code interpreter?
[10:48:25] <Qwnavery> Real hardware.
[10:48:35] <shka> this was kinda done :-)
[10:48:44] * Qwnavery shudders at the thought of JVM
[10:49:05] <Qwnavery> shka: D: what? when, where, how?
[10:49:19] <shka> https://hackaday.com/tag/lisp-machine/
[10:49:26] * Qwnavery shakes fist at the 10th rule
[10:49:41] <shka> microlisp, but hey!
[10:49:47] <shka> it's something which you can actually buy
[10:50:03] <shka> Lisperati1000
[10:51:17] <Qwnavery> o_O
[10:51:27] <Qwnavery> good.
[10:51:31] <shka> as for the actually hardware optimized for lisp, the era of that is long gone
[10:52:01] <Qwnavery> competition is always healthy.
[10:52:06] <Qwnavery> :>
[10:52:10] <shka> the last of something in that ilk was azul hardware, but even they moved to intel and linux by now
[10:52:24] <shka> it is not always healthy, but whatever
[10:53:23] <shka> for instance, here we see free market competition in the domain of the electric lines https://i.pinimg.com/564x/c4/aa/71/c4aa71765711e7a58aa19890a5ad4813.jpg
[10:53:34] <selwyn> which city?
[10:53:38] <shka> new york
[10:53:49] <Qwnavery> D: ok point made..
[10:54:36] <shka> same happens currently in the space, with multiple internet providers trying to make a global reach
[10:55:55] <Qwnavery> Well. I want lisp and I want it to run on hardware. I understand your reasons for discouragement, but I'm too far gone. Sometimes older is better, and I don't want this to be lost to history even if it's destined to be.
[10:56:47] <shka> uh, then maybe run that https://old.reddit.com/r/lisp/comments/i1d5pr/mezzano_demo_5_on_real_hardware/
[10:56:48] -ixelp- Mezzano Demo 5 on real hardware : lisp
[10:56:48] <selwyn> or railway lines https://cdn.discordapp.com/attachments/873281830856577044/902820514177875968/unknown.png
[10:56:50] <shka> if you have to 
[10:57:00] <moon-child> gilberth: any lisp implementation involves a host of primitives which are not safe
[10:57:20] <moon-child> with hardware support, you may have less likelihood of misusing those primitives in software
[10:59:41] <Qwnavery> Ultimately. It's a form of escapism. I don't have to think about all the crap going on in the world if I can focus myself on one thing.
[11:00:11] <Qwnavery> A goal where all my cumulative knowledge bears it's fruit.
[11:01:32] <Qwnavery> As a public statement. I will have my first hardware prototype in 2026. Hold me to that.
[11:01:47] <hayley> Qwnavery: You could also make sure to never expose unsafe operations to the user language, but reserve it for supervisor software. This would be not worse than having to verify your microcode.
[11:02:34] <hayley> As a public statement, I will have a Micro-Utena VM running a full message-passing OO Lisp on stock hardware in 2023. Provided that we come up with a VM to implement. And it'll be damn fast.
[11:03:21] <moon-child> it seems to me it is better to do both: verify ucode to guard against compiler bugs.  However this is problematic if you want the compiler to be able to emit code that the verifier cannot verify
[11:04:10] <hayley> Well, you can't "peephole optimize" microcode, but you can if some of the complexity is moved into software.
[11:04:45] <Qwnavery> hm
[11:06:39] <Qwnavery> There's so many aspects to a problem like this. I want this design to be the iPhone of the next generation.
[11:06:48] <hayley> "damn fast" would be, say, within 10Ã of C++, which I would consider somewhat non-trivial with pure message passing and first-class activation records.
[11:07:30] <Qwnavery> I will not say much more, as is pure speculation.
[11:07:33] <moon-child> As a public statement: by 2053, I will probably have accomplished none of my long-term goals.  Hold me to that!
[11:11:48] <Qwnavery> hayley: I've got the Utena draft spec downloaded, I should really have a read.
[11:12:26] <hayley> It's currently not up to date with what Gnuxie and I have been thinking, and very incomplete. Don't stress yourself.
[11:14:52] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:16:24] <Qwnavery> hayley: highly recommend using a design framework if you don't already. It's something you can use to critically evaluate design choices and look at things a new light. http://www.creatingminds.org/book/htiaa.htm is what I would recommend. There are various other things like Dieter Rams' 10 Principles of good design and sustainable design etc. But this takes the cake for a solid framework that
[11:16:27] <Qwnavery> can be utilized in teams.
[11:17:24] <Qwnavery> 'solid' is an oxymoron here :P
[11:31:54] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[11:35:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:18] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[12:08:28] <Gnuxie> yeah don't read utena spec it's not finished and wrong and also all my explanations are probably wrong but if they weren't it would have meant i learned nothing
[12:12:21] <shka> utena?
[12:12:26] <shka> is that anime reference?
[12:12:55] <moon-child> I assume so
[12:13:05] <moon-child> there was also a comic book made, but it was not any good
[12:19:51] <selwyn> personally, i am hoping to leave university some time this decade, or at least before i die :D
[12:22:14] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[12:23:13] <hayley> https://www.youtube.com/watch?v=TqTFDK3Xiss
[12:23:13] -ixelp- A Saucerful Of Secrets (Live At Pompeii 2016 Remix) - YouTube
[12:23:28] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[12:29:14] <Gnuxie> yes it is named after the anime for reasons that won't be stated explicitly cos that's just too insulting to certain institutions
[12:30:21] <White_Flame> revolutionary grill george foreman
[12:39:14] <moon-child> what's wrong with insulting institutions?
[12:39:30] <White_Flame> they insult too much
[12:39:56] <White_Flame> (who makes an institution for insulting anyway?)
[12:43:39] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:47:19] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.3)
[13:19:45] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e802:1ead:adfa:ae30)
[13:29:58] <shka> https://www.youtube.com/watch?v=xpAvcGcEc0k 
[13:29:59] -ixelp- Argument - YouTube
[13:32:12] <selwyn> lol
[13:32:37] *** Joins: OlCe (~user@lfbn-nic-1-394-237.w90-116.abo.wanadoo.fr)
[13:33:52] <shka> they surely have insulting professional as well
[13:34:01] <shka> though it may be abuse
[13:34:57] <selwyn> this is my favourite argument https://www.youtube.com/watch?v=EAT6gE5esrI
[13:34:58] -ixelp- Drunk Guy trying to put on pants - YouTube
[13:36:00] <selwyn> respect to the cameraman for not laughing out loud
[13:37:09] <dave0> selwyn: hahahaha this is awesome
[14:07:41] *** Joins: random-nick (~random-ni@87.116.183.63)
[14:42:18] *** Quits: random-nick (~random-ni@87.116.183.63) (*.net *.split)
[14:42:18] *** Quits: vats (~vats@103.158.91.165) (*.net *.split)
[14:42:18] *** Quits: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de) (*.net *.split)
[14:42:18] *** Quits: micro (~micro@user/micro) (*.net *.split)
[14:42:18] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[14:42:18] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[14:42:18] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[14:42:18] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[14:42:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[14:42:19] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[14:42:40] *** Joins: vats (~vats@103.158.91.165)
[14:44:34] * hayley uploaded an image: (38KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/warDqZmtYVnXHolohhAldjoE/cliff-click.png >
[14:45:30] *** Joins: random-nick (~random-ni@87.116.183.63)
[14:45:30] *** Joins: gilberth (~gilberth@p5b157756.dip0.t-ipconnect.de)
[14:45:30] *** Joins: micro (~micro@user/micro)
[14:45:30] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[14:45:30] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[14:45:30] *** Joins: sm2n (~sm2n@user/sm2n)
[14:45:30] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[14:45:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:45:30] *** Joins: Oddity (Oddity@user/oddity)
[14:45:30] *** erbium.libera.chat sets mode: +o gilberth
[15:13:54] *** Quits: minion (~minion@common-lisp.net) (Killed (NickServ (GHOST command used by minion1)))
[15:14:28] *** Joins: minion (~minion@common-lisp.net)
[15:15:15] *** Joins: jmercouris_ (sid438340@id-438340.hampstead.irccloud.com)
[15:15:15] *** Joins: malaclyps (~mala@user/malaclyps)
[15:15:20] *** Joins: taeaad_ (~taeaad@user/taeaad)
[15:15:29] *** Joins: sham1_ (~sham1@212-146-44-107.aboa.net)
[15:18:00] *** Joins: SAL9000_ (~SAL9000@shirakumo/sal9000)
[15:18:20] *** Joins: dave69 (~davezero@069.d.003.ncl.iprimus.net.au)
[15:18:27] *** Joins: Mandus_ (~aasmundo@0.51-175-33.customer.lyse.net)
[15:18:34] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Killed (NickServ (GHOST command used by dave69)))
[15:18:38] *** dave69 is now known as dave0
[15:19:30] <gilberth> Ok. For building llvm/clang: Build without compiler-rt at first, but with libcxx. Make sure you also have up to date binutils, which I didn't have and the build didn't test for that. Then build compiler-rt separately using the fresh clang.
[15:20:39] * hayley writes regular expression compiler
[15:20:55] * hayley still can't do non trivial uses of regular expressions
[15:21:32] <dave0> [Hh]i [Hh]ayley
[15:21:38] <gilberth> For statistics: Rare build time (not fiddle time) was 67min for llvm, clang, clang-tools, compiler-rt, libcxx, libcxxabi, lld, and lldb.
[15:22:00] * hayley uploaded an image: (120KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rBypZPepoUERACPOmPNvYRZu/i-told-you-about-locks.jpeg >
[15:22:11] <gilberth> hayley: Don't you have a RE compiler all the time.
[15:22:27] *** Quits: vats (~vats@103.158.91.165) (*.net *.split)
[15:22:27] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[15:22:27] *** Quits: mala (~mala@user/malaclyps) (*.net *.split)
[15:22:27] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[15:22:27] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[15:22:27] *** Quits: APic (apic@apic.name) (*.net *.split)
[15:22:27] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (*.net *.split)
[15:22:27] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[15:22:27] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[15:22:27] *** Quits: jmercouris (sid438340@hampstead.irccloud.com) (*.net *.split)
[15:22:30] *** jmercouris_ is now known as jmercouris
[15:22:53] <hayley> Stop stuttering!
[15:23:03] * hayley has enough of stuttering in temporal logic
[15:23:17] *** Joins: vats (~vats@103.158.91.165)
[15:23:18] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:23:28] <hayley> Yes, though I struggle to answer some practical questions.
[15:28:45] *** Joins: APic (apic@apic.name)
[15:28:52] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[15:29:02] <mfiano> Morning. Entering day 6
[15:29:51] <mfiano> Coding in elisp for the last few days has been weird. I've heard of non-deterministic programming before, but this is on a new level ;)
[15:30:55] <gilberth> Coding elisp makes you want to cry. Or yell. Take your pick.
[15:33:22] <shka> eh, it aint that bad
[15:33:27] <shka> it works for emacs
[15:33:39] <shka> would not want to use it for anything else
[15:35:23] * hayley uploaded an image: (424KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/rDivXJILmZDiwuAIhWTygTHq/average-saa-enjoyer.png >
[15:35:41] <hayley> I did have some fun discussion though. Apparently Drew DeVault thinks SKI combinators are Lisp.
[15:37:38] <hayley> Also: "All software sucks, by arbitrary definition this is obviously proportional to LOC, QED" "If it's QED would you provide a proof in Cow?" "You want _more_ software for a five line proof?"
[15:42:53] <hayley> Coq, not Cow dammit
[15:48:42] <contrapunctus> gilberth, mfiano: why's Elisp so much more troublesome for you than Common Lisp? ð¤ I mean, Elisp has been my gateway to interactive development and Common Lisp...
[15:49:22] <selwyn> wonder if elisp is responsible for false stereotypes of lisp
[15:49:36] <mfiano> I would need to write a book to answer that, but 1 word; namespaces.
[15:49:54] <contrapunctus> Hm...
[15:50:25] <selwyn> i.e. interpreted and slow
[15:50:38] <selwyn> (i am aware of gccemacs)
[15:51:20] <contrapunctus> mfiano: you might like nameless-mode - it mitigates the extra typing and the verbosity, and works with any Elisp code.
[15:53:10] <contrapunctus> (It hides the package prefixes, and offers a command to insert the prefix of the current package.)
[15:53:17] <mfiano> I do not like code that hides code. Code is the single source of truth
[15:53:54] <mfiano> There are no package prefixes. A package in Emacs is a collection of libraries, which in turn are a collection of features.
[15:54:21] <mfiano> Nothing to do with packages in Common Lisp, which you are referring to. There is no convention for prefixes to disambiguate your symbols.
[15:56:01] * hayley uploaded an image: (131KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RcdhAhGQuqSjNpEcsBtjGYkb/233535b34be26d29.jpg >
[15:56:02] <contrapunctus> mfiano: I'm talking about _Elisp_ package prefixes...take a look at the nameless README, perhaps it'll better clarify what it does - https://github.com/Malabarba/Nameless
[15:56:03] -ixelp- GitHub - Malabarba/Nameless: Less is more. Hide package namespace in your emacs-lisp code
[15:56:28] <contrapunctus> Hey, it's hayley 's favorite software motto ð ^
[15:56:43] <mfiano> contrapunctus: I know you are. What I'm saying is that they don't exist. It is only by convention, and there are several conventions as to what the prefix should be delimited by.
[15:57:07] <mfiano> Prefices do not stop clobbering anyway
[15:57:17] <mfiano> Real namespaces (CL packages) do
[15:57:19] * hayley calls the doctor to treat contrapunctus's terminal boredom
[15:57:35] <contrapunctus> hayley: wahaha~!
[15:59:34] <contrapunctus> mfiano: ah, yes...I've seen nameless mention alternative prefix conventions (IIRC it has some knobs to help with them), but I've never had to deal with them myself ð¤ anyway, I hoped it would make Elisp a little more tolerable whenever you do use it ð
[16:01:00] <contrapunctus> hayley: I found this today. Figured you'd like it. ð https://drewdevault.com/2020/01/04/Slow.html
[16:14:16] <mfiano> hayley: I've been semi-trolling #emacs with Robert Strandh quotes
[16:15:59] <mfiano> about professionals refusing to use a language with an independent standard, and how people go to great trouble to avoid learning Common Lisp, etc, to have fun, and naturally the discussion diverges to ECMA and C++ 
[16:19:20] <semz> Why C++?
[16:19:53] <mfiano> When ignorant people here 'standard' it's one of two languages that come to mind.
[16:20:02] <mfiano> hear*
[16:20:27] <semz> wtf
[16:21:51] <mfiano> So naturally they draw parallels to that clusterfuck and the whole point goes over their head.
[16:22:26] <mfiano> Sometimes I think we are living in the Idiocracy movie.
[16:22:30] <semz> Actually maybe not so wtf after all, what other popular languages are even standardized? C obviously but I'll count that as half mentioned because of C++. Does Java have a standard?
[16:22:49] <selwyn> think the jvm has a spec
[16:22:58] <semz> popular meaning "randomly picked programmer has decent chance to know it"
[16:25:19] <mfiano> The sadtruth is most programmers can't program. Java developers are hired in hoards to pound away at the boilerplate and are much more expendable. The Mythical Man Month would be a good read for most project leads.
[16:25:50] <mfiano> and they all come straight out of "boot camp"
[16:26:26] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 265 seconds)
[16:35:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:50:27] <dave0> nite all
[16:50:32] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:52:00] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e802:1ead:adfa:ae30) (Ping timeout: 260 seconds)
[16:52:45] *** Joins: vats (~vats@103.158.91.165)
[17:11:08] *** sham1_ is now known as sham1
[17:19:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2de6:953c:45b8:6cf0)
[17:20:51] *** Quits: Alfr (~Alfr@user/alfr) (Read error: Connection reset by peer)
[17:22:30] *** Joins: Alfr (~Alfr@user/alfr)
[17:45:15] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[17:50:18] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:50:31] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 260 seconds)
[18:05:04] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[18:06:04] *** Joins: robin (~robin@user/terpri)
[18:10:36] *** Quits: robin (~robin@user/terpri) (Ping timeout: 258 seconds)
[18:16:26] *** SAL9000_ is now known as SAL9000
[18:16:47] *** Joins: robin (~robin@user/terpri)
[18:32:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[18:33:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:38:16] <mfiano> English question
[18:38:57] <mfiano> First, the plural of "prefix" is "prefixes" or sometimes "prefices", right?
[18:39:10] *** Joins: raeda (~raeda@72.49.219.33)
[18:43:32] <Catie> I don't know that I've ever heard "prefices", but I've definitely heard "prefixes"
[18:44:06] <mfiano> Prefices is definitely a recognized word.
[18:44:14] <mfiano> Now, is it correct to also use "suffices" as the plural of "suffix", since "suffice" is an entirely different word, as in "suffice to say..."?
[18:45:12] <Catie> It would be correct, but I think you'd be pretty likely to confuse people with it, for exactly the reason you described
[18:46:05] <mfiano> I couldn't find any evidence of it even being correct for the latter.
[18:46:19] <mfiano> But yes, I agree it would be confusing if it even was.
[18:46:27] <Catie> I'd just go with "suffixes"
[18:47:24] <Catie> But really, correctness in a natural language is defined by the people who speak it. As long as you're able to get your point across, I'd argue that it's "correct"
[18:49:06] <mfiano> This is true. And yet we overload terms in CS all the time, especially "overload" :)
[18:49:14] <mfiano> Context is king
[18:50:15] <Catie> If you'd like someone to proofread what you're writing, I'd be more than happy to!
[18:50:47] <selwyn> in english you have to be very careful to draw inferences from the existence of similar words
[18:51:19] <mfiano> It was just an idle thought. I was extending a bit of code I didn't write where they had used "prefices" for a variable name, and my code works with the opposite end :)
[18:51:20] <selwyn> the classic example is 'goose vs. geese' compared to 'moose vs. mooses'
[18:51:26] <Alfr> mfiano, don't mention it in the presence of gilberth, recently he's complaining that parsing C is context sensitive. ;)
[18:51:29] <selwyn> but there is actually a legit reason for this, which i forget
[18:51:43] <selwyn> alfr: hahaha
[18:52:40] <Alfr> selwyn, there's a reason why CFGs are usually considered relatively nice.
[18:53:02] <mfiano> I hate those meeces to pieces
[18:53:15] <selwyn> this kind of thing often catches out anti-american language snobs. for example, they correct 'ize' to 'ise', but they overcorrect a lot of the time and simply make mistakes
[18:53:15] * mfiano now feels old
[18:53:49] <selwyn> 'ize' is occasionally sourced from ancient greek, for which there is no compelling reason to render it as anything except with a 'z'
[18:53:54] <selwyn> *anything other
[18:53:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[18:54:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Remote host closed the connection)
[18:54:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:54:37] *** Joins: makomo (~makomo@user/makomo)
[18:58:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2de6:953c:45b8:6cf0) (Ping timeout: 264 seconds)
[19:58:09] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[19:58:47] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:04:18] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[20:05:15] <clothespin> when I look at my other friends I realize my programming is an obsession
[20:05:43] <clothespin> then I start to wonder if that's strange
[20:05:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[20:05:51] <clothespin> then I come here
[20:06:09] <clothespin> and I realize obsession is not so bad
[20:08:01] <mfiano> same
[20:08:17] <mfiano> i often ignore my friends in favor of programming
[20:09:09] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:28:15] <shka> fun fact
[20:28:34] <shka> on aliexpress, most of the PC cases are in the mini-itx form factor
[20:28:42] <shka> they really want the computer to be small
[20:43:08] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[20:47:53] <pjb> Alfr: it's well known that C syntax is context sensitive (and C++ even more so).
[20:49:12] <pjb> shka:  a lot of people live in cramped small flats.
[20:49:25] <selwyn> shka: look who's talking
[20:49:31] <selwyn> you bought a mini itx dishwasher :o
[20:49:37] <shka> no
[20:49:44] <shka> just a narrow one
[20:49:50] <shka> but hey, it is different
[20:49:50] <pjb> That said, if you have an empty garage, nothing prevents you to buy a mainframe.
[20:49:55] <shka> i am living on my own 
[20:50:12] <shka> at this point i am certified to be forever alone
[20:50:27] <pjb> https://www.youtube.com/watch?v=wJyiHsfJLEI
[20:50:28] -ixelp- The "Mainframe Kid" - YouTube
[20:50:41] <shka> and 3 days a week i eat one meal 
[20:50:50] <shka> i simply don't need large dish washer 
[20:51:07] <Alfr> pjb, my intent was only to point out the discrepancy of mfiano cheering about and gilberth complaining about the same thing.
[20:51:09] <selwyn> you won't be forever alone
[20:51:29] <shka> lol, this does not sound right 
[20:51:35] <selwyn> well, ok lol
[20:51:45] <selwyn> dishwashers are too big anyway
[20:51:57] <selwyn> takes up the size of a washing machine and you have to have one of those
[20:52:04] <shka> seriously though, i am 33 years old
[20:52:30] <shka> the last time i had sex i even kissed was 10 years ago
[20:52:42] <shka> i am pretty much forever alone :P
[20:56:35] <shka> honestly, even the idea of having relationship does not sound all that appealing to me 
[20:58:09] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[20:58:35] *** Quits: X-Scale (~ARM@31.22.167.71) (Ping timeout: 264 seconds)
[20:59:39] *** X-Scale` is now known as X-Scale
[21:02:36] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[21:03:40] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:04:51] <pjb> Alfr: well, we don't have a good mathematical theory of context sensitive languages, because of the semantic aspects and possibly turing completeness.  So context sensitive languages are generally frowned upon in some circlesâ¦
[21:05:23] <pjb> But it doesn't really matter, since anyways, after the syntactic phase, you will have semantic phases.
[21:05:26] <copec> hayley, write an interface that maps a BBS to an active voxel facade in minecraft
[21:17:51] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:27:58] <contrapunctus> shka: _sad high-five_
[21:33:41] <shka> contrapunctus: https://www.youtube.com/watch?v=1zszD_-xM2w
[21:33:41] -ixelp- Bojack Horseman S3 EP5 "Everybody loves you! But nobody likes you..." Clip - YouTube
[21:35:31] <contrapunctus> shka: enough already x-P
[21:35:48] <shka> no, we are going even deeper
[21:38:34] <shka> https://www.youtube.com/watch?v=uzO-gCJZmm4
[21:38:34] -ixelp- Michael Hudson - on Future of the Dollar - YouTube
[21:39:28] <shka> and that's what us was doing in the last decade
[21:39:39] <selwyn> good speaker
[21:50:15] <contrapunctus> shka: https://www.youtube.com/watch?v=l7TONauJGfc
[21:50:16] -ixelp- NVC Marshall Rosenberg - San Francisco Workshop - FULL ENGLISH SUBTITLES TRANSCRIPTION - YouTube
[21:51:35] <shka> not sure how i should interpret this
[21:51:37] <contrapunctus> shka: something that helped me stave off depression and suicidal thoughts, arising from being in the same situation. Also very entertaining.
[21:53:04] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: Aurora_v_kosmose)
[21:53:17] <shka> oh, i am not depressed
[21:53:28] * mfiano wonders why the Dingbats Unicode block contains many different arrow glyphs, but all of them pointing rightward. Is there some reflection compose I'm not aware of? The arrows in the Arrows block are not right for what I need. Sigh.
[21:55:41] <contrapunctus> shka: I see it as being similar to Lisp - it can be seen as "weird". But it's also a lot of fun. And also rather eye-opening.
[21:57:10] <shka> maybe someday
[22:04:34] <selwyn> https://www.youtube.com/watch?v=2fqZ3prPofQ
[22:04:34] -ixelp- making a two-faced CPU ð­ #shorts - YouTube
[22:13:04] <selwyn> can't concentrate sigh
[22:41:08] *** Joins: rogersm (~rogersm@90.166.177.48)
[22:44:40] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:46:46] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 245 seconds)
[22:47:34] *** Joins: X-Scale` (~ARM@31.22.203.65)
[22:48:38] *** X-Scale` is now known as X-Scale
[23:20:56] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:47:20] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[23:47:25] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
