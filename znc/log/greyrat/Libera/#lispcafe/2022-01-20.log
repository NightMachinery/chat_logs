[00:01:05] <epony> cardio after your 55th birthday is called infarctio
[00:01:39] <epony> by the time you're 50 irc3 will be almost production ready
[00:03:44] <pl> ck_: reminded me of this https://youtu.be/fhQrFBQV7tk 
[00:03:44] -ixelp- St. Elmo's Fire 05 - Threes, Rev. 1.1 [HQ] - YouTube
[00:04:09] <edgar-rft> epony: I was 50 already 6 years ago
[00:05:42] <epony> good for you, do you like Bach or Mozart?
[00:06:27] <edgar-rft> none of both
[00:06:39] <epony> doesn't matter, no more cardio for you!
[00:07:25] <edgar-rft> where's my irc3 you promised me?
[00:07:35] <epony> there are many famous people on facebook ;-)
[00:09:47] <epony> emacs does not even have proper multiprocess.. so is quite behind UNIX / MULTICS
[00:10:27] <epony> hope at least LISP in JVM has some processes and such you know, OS like capabilities
[00:10:47] <shka> pl: hey man
[00:10:52] <epony> the modern CPUs should not be an impediment any more.. but time is running fast
[00:10:59] <epony> this year 56 next year 65
[00:11:14] <pl> Ya man
[00:12:05] <epony> so presumably irc3 was production ready in 2010 JIT for the mobile epoch.. something went wrong
[00:12:30] <epony> in 2004, 64bit computing caught the web in surprise
[00:13:55] <epony> (it's a thing since 2000 in commodity computing and at least 4 years earlier on boutique alt-computing WS markets)
[00:16:25] <epony> https://en.wikipedia.org/wiki/64-bit_computing#64-bit_address_timeline see ARM is only 20 years in the past
[00:16:51] <epony> technically 10 years after commodity computing ;-)
[00:19:14] *** Joins: ln43 (~ln43@user/ln43)
[00:19:30] <epony> irc is stuck in 1990 (32bit epoch pre-GUI) and most successful in 1996-2004 (32bit epoch GUI prime time)
[00:21:42] <ln43> yes, time is running fast
[00:22:08] <shka> pl: i was wondering if you are going with your enterprise idea
[00:22:36] <pl> Slowly going forward 
[00:23:01] <pl> Need to build user interface for admin panel 
[00:23:13] <shka> using lisp for that? :-)
[00:23:31] <shka> or even better clog
[00:23:35] <pl> Why do you think I'm reading reblocks docs? :-D
[00:24:32] <epony> https://en.wikipedia.org/wiki/History_of_operating_systems#Rise_of_virtualization
[00:24:42] <shka> i didn't knew that you do
[00:25:06] <shka> i heard good things about the weblocks
[00:25:13] <shka> but never gave it a shot
[00:25:58] <epony> JVMOS when? ;-)
[00:26:00] *** Inline__ is now known as Inline
[00:26:38] <shka> partly because, i must admit, i am not thrilled by vision of working on web stuff
[00:27:31] <shka> but i intend to give clog a shot
[00:32:30] <epony> https://en.wikipedia.org/wiki/Inferno_(operating_system)#Design_principles
[00:41:23] <pl> Well, reblocks is a huge rewrite of weblocks 
[00:41:30] <pl> For example, no more CPS 
[00:41:37] <shka> no?
[00:41:44] <pl> Haven't looked much at CLOG yet 
[00:41:53] <shka> i was under impression that CPS was the main thing in weblocks
[00:42:05] <pl> shka: no, CPS also plays havoc with stateless nature of HTTP 
[00:42:14] <pl> Works better client side in JS
[00:42:43] <shka> mmm, yeah
[00:43:05] <shka> also, i think that CPS enough is not even expressive enough honestly 
[00:45:56] <shka> i state this, because CPS can be used to implement lazy sequence, but how this is ever enough?
[00:48:06] <aeth> sm2n: https://ircv3.net/specs/client-tags/react
[00:48:07] -ixelp- `react` client tag - IRCv3
[00:48:39] <aeth> unsurprisingly, irccloud supports it
[00:48:48] <sm2n> aeth: thanks i hate it
[00:52:39] <pl> shka: well, CPS Web apps on where CPS is on backend quickly hit issues of needing sticky sessions and shit 
[00:53:39] <aeth> sm2n: that didn't need to be a line when it could just be a reaction
[00:54:00] <sm2n> aeth: you will not commoditize my snark
[00:54:14] <shka> pl: would make sense for websockets app, like in clog but still... meh
[00:54:49] <pl> shka: even with websockets, you get the question of what happens on reconnect 
[00:54:58] <shka> good point
[00:56:05] <pl> So reblocks keeps to doing complex UI in Lisp, but throws out CPS 
[00:57:50] <hayley> Should I ask Cliff if he can run the Coffee Compiler Club somewhat later, so it'll only be 5:30 instead of 5 in the morning or something? 
[00:57:54] <shka> i will consider using reblocks instead of clog for my next project
[00:58:04] <shka> but i think that clog is a better fit actually 
[01:02:18] <pl> shka: it all depends on your goals 
[01:06:27] <shka> well, i am working on a matchmaking demo for counter-strike
[01:06:59] <shka> web part is a throw away, it will be replaced by something written by real programmers
[01:13:18] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[01:23:47] *** Joins: ln43 (~ln43@user/ln43)
[01:24:20] <drakonis> hmm, how similar reblocks is to something like phoenix?
[01:24:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:24:41] <drakonis> or am i thinking of a different framework here?
[01:32:56] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1021-static.midco.net) (Ping timeout: 250 seconds)
[01:33:45] <drakonis> https://github.com/interactive-ssr ah its this one.
[01:33:46] -ixelp- ISSR · GitHub
[01:37:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:59:50] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[02:03:06] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:a8db:9189:8a89:f75c)
[02:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:42:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[02:49:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:05:46] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[03:06:28] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:16:59] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[03:35:55] *** Joins: vats (~vats@180.149.226.41)
[03:38:24] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a8db:9189:8a89:f75c) (Remote host closed the connection)
[03:40:21] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[03:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:50:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:58:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:17:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:18:37] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:24:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:29:26] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 256 seconds)
[04:36:12] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[04:51:15] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:54:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:00:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[05:01:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:13:40] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[05:14:09] <hayley> https://twitter.com/pcwalton/status/1483948305973334016 but ripgrep is slow. How is that better
[05:15:19] * moon-child makes a grepper that shells out to rustc and then dlopens an so
[05:16:26] <semz> "shells out to rustc" there goes the performance
[05:16:34] *** Joins: notzmv (~zmv@user/notzmv)
[05:17:28] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[05:34:18] *** Joins: notzmv (~zmv@user/notzmv)
[05:36:34] <hayley> semz: use WASM then
[05:38:05] <moon-child> ._.
[05:39:36] * semz creates the electron-grep repo
[05:40:18] <hayley> Now with only 70% of the vulnerabilities of running native code!!1!
[05:44:42] <semz> Just make the tower of Babel tall enough and the hackers won't ever be able to stack enough exploits to reach the bare metal. gg ez, shipping info for the Turing award in my PMs
[05:48:42] <hayley> I meant that the same use after free and such are still possible in the WASM heap. It literally doesn't help to avoid native code.
[06:12:26] *** Quits: vats (~vats@180.149.226.41) (Ping timeout: 250 seconds)
[06:13:31] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[06:31:35] <hayley> But you will break even calling rustc...eventually. OMRN takes around 10ms for reasonable REs to compile, whereas a NFA interpreting engine only takes 10-100μs usually.
[06:59:10] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[07:02:22] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:02:42] <dave0> maw
[07:06:31] <hayley> maw
[07:08:52] <dave0> hi hayley 
[07:09:07] <dave0> how's things?
[07:11:13] <hayley> Could be better. Had to take mother to the doctors.
[07:11:40] <dave0> oh :-( i hope she is alright
[07:11:44] *** Joins: gko (~user@user/gko)
[07:24:58] <mfiano> White_Flame, moon-child, or hayley (I forget who exactly, you've all been super helpful): The code you helped me with a few days ago turned up many errors in my unit tests. I think this is because of needing sign-extension, but not sure. I heavily commented this and removed all modular arithmetic etc to make it as close to the source _syntax_ as possible, and go from there. If you could help, I'd
[07:24:59] <mfiano> be very thankful. I've been trying to reconstruct this function for a while: https://gist.github.com/mfiano/57ba0f5a3c559bef15fe7ed8eeb80c95
[07:25:00] -ixelp- ycbcr.lisp · GitHub
[07:26:11] * moon-child wonders why firefox can't seem to track selection offsets properly
[07:26:46] <moon-child> mfiano: have you tried switching the go code to use the simplified version rather than the bit twiddling?  Maybe they got it wrong
[07:27:07] <mfiano> I get completely different results for that too
[07:27:28] <mfiano> I think the problem is sign-extension needs to happen somewhere, but I could be wrong
[07:35:33] <mfiano> My gut tells me that since CB1 and CR1 can be negative, the multipliers are intended to make it wrap around to "least-negative-uint32" for r,g,b
[07:35:41] <mfiano> I don't know how to express that yet
[07:36:41] <mfiano> err
[07:36:45] <moon-child> thing is they don't seem to wrap in your testcase
[07:36:48] <mfiano> "last-negative-int32"
[07:37:11] <moon-child> ^ is LOGNOT?
[07:37:27] <mfiano> Right, I am not doing any modular arithmetic because I only know how to do unsigned wrap-around with logand or ldb
[07:38:00] <moon-child> I mean, the magnitudes of cb1 and cr1 are not large enough that they would wrap around under modular arithmetic
[07:38:11] <mfiano> ^ is bitwise or for binary, and bitwise not for unary
[07:38:51] <moon-child> binary ^ is or, not xor?
[07:39:14] <mfiano> the latter, sorry
[07:39:34] <mfiano> Well then, I urge you try try to modify it back to using their bit twiddling method to get the result in my test case
[07:40:04] <mfiano> I have tried a lot, and I am clearly missing something. Maybe wrong operator precedense assumptions or smth
[07:40:53] <mfiano> and if you need more test cases: https://i.lisp.cl/bLPiSG.png
[07:46:50] <moon-child> hm, first stab seems to work
[07:47:42] <mfiano> o.O
[07:47:45] <mfiano> I get very close
[07:48:37] <moon-child> mfiano: https://0x0.st/ooPf.txt
[07:49:32] <mfiano> Hmm lemme see
[07:52:31] <mfiano> Sure enough, it was an operator precedence issue
[07:52:40] <mfiano> I transposed lognot/logand :/
[07:52:54] <mfiano> Thanks.
[08:07:04] * White_Flame reads and doesn't actually see anything described of what it did wrong :-P
[08:07:07] <White_Flame> but at least it's fixed now?
[08:08:03] <mfiano> It returned all #xffff values :)
[08:08:15] <mfiano> But yes, it is, thanks anyway
[08:11:09] *** Quits: copec (~copec@schrodbox.unaen.org) (Quit: checkity check out.)
[08:11:28] *** Joins: copec (~copec@schrodbox.unaen.org)
[08:22:03] *** Joins: semz_ (~semz@user/semz)
[08:24:36] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:28:22] *** semz_ is now known as semz
[08:57:09] <hayley> So far the only critique of TPOPOS has been that someone thought beach thought too highly of "perfection-oriented students" in The Psychology of Learning.
[09:02:14] <hayley> https://mstdn.io/@cy/107652989703468644
[09:02:15] -ixelp- Cy: "@nodefunallowed@mas.to It's a very good article, …" - Mastodon
[09:13:28] <hayley> ...IIRC it was mostly the part where beach observed that performance-oriented students would try to discredit the perfection-oriented students' knowledge that I found most interesting; when it seemed that the people on the other side of the wall were almost deliberately giving bad advice. Too much of a conspiracy theory to say it was really deliberate, but the effect is the same.
[09:15:29] <hayley> "Other people having other knowledge might require learning to keep up with performance, and learning, as we pointed out, increases the risk of failure. One possibility for [performance-oriented] people is to discredit other people's knowledge. If done well, it would eliminate the need for the extra effort to learn, which would fit very well with their objectives"
[09:15:32] <hayley> "if programming was easier, and if it was even enjoyable, [...] there would be no need for the more rigid forms of organisation that its proponents promote. By repeating the lie that programming is essentially hard, people can be convinced that they need rigid forms of organisation to get things done"
[09:22:58] <White_Flame> that's a good quote
[09:23:37] <White_Flame> has a lot of meaning in business dev, too
[09:24:19] * hayley shouldn't ask which one. Probably beach's quote.
[09:24:37] <hayley> I just think the two conclusions made are pretty similar.
[09:25:23] <White_Flame> the last quote
[09:25:36] <White_Flame> but it's also a very symmetric issue, both undermining each other
[09:25:36] <hayley> o.o
[09:25:39] <White_Flame> it's all about priorities
[09:26:21] <hayley> Right.
[09:26:35] <White_Flame> the whole "programming is hard" meme, IMO, is about bad organization, and unqualified people never getting the training/apprenticeship/etc to actually become qualified
[09:26:48] <White_Flame> it's not technically "hard" as they think, but people are just thrown to the wolves
[09:26:50] * hayley nods
[09:27:06] <White_Flame> and get into a bad pattern of copy/paste programming
[09:27:42] <White_Flame> everything outside of a copy/paste solution or included library call becomes "hard"
[09:28:02] <hayley> It cracked me up at first when someone seriously argued that open source prevented security-by-obscurity (and that is bad for open source).
[09:28:38] <White_Flame> lol
[09:28:48] <White_Flame> that certainly sounds like a business-type
[09:28:59] <hayley> https://applied-langua.ge/posts/the-poverty-of-post-open-source.html C-f "The first instance we encountered was"
[09:29:01] -ixelp- The poverty of "post-open source" - what to do about the Left's foray into intellectual property
[09:29:07] <hayley> Nope, this is totally an anti-capitalist group.
[09:29:44] <White_Flame> doesn't really matter.  the same business-minded greed stilll runs rampant there
[09:29:51] <hayley> Or I can just quote it, actually: "ACSL recognizes that the copyleft requirement of open source can be a drain on limited resources, **can expose sensitive or secure information,** and can put software at risk of theft."
[09:30:29] <White_Flame> heh, I wonder how they define "theft" there
[09:30:29] <White_Flame> "theft of software" particularly
[09:30:43] <hayley> Also funny to ponder how you are supposed to steal open source software. I guess you can "forget" to include the obligatory MIT/BSD "hayley made this btw" line, and "forget" to provide a copy of sources for GPL...
[09:31:57] <White_Flame> but again, the whole "donut steel!" thing is a business mindedness
[09:32:02] <hayley> But, yeah, one of the points is that these "cooperative" things sound an awful lot like plain old capitalism and proprietary software.
[09:32:14] <White_Flame> I don't know what ancap views on possession in general, but I hope it's pretty negative on IP
[09:32:26] <hayley> I'm pretty sure it is.
[09:32:40] <White_Flame> and that's "oh no software theft" is a pro-IP stance
[09:34:03] <hayley> In the end the "poverty" is that the usual approach to free software/open source is the most useful for doing much outside capitalism.
[09:36:50] <White_Flame> if related to "theft from the commons", free software can't be "taken away" when used by others, and it ends up being yet another "piracy is theft!" mentality
[09:37:03] <White_Flame> eg, copying is not theft
[09:38:01] <hayley> My favourite recent idiot trend is the idea of having no license, and having everyone pirate your software. You'll promise only to sue companies, of course.
[09:38:46] <hayley> ...as in, someone actually tells people to pirate. Legal suicide to download such software to me - I wouldn't trust it.
[09:38:57] <White_Flame> the "trust me" license, used by untrustworthy people everywhere
[09:40:01] <hayley> Can't say I know any good reasons to trust someone with that, either. You can't gain anything from it, except the software (which is hit or miss of course).
[09:41:39] <hayley> https://www.youtube.com/watch?v=opiUajt1_S0 Bill Bruford has been scavenging from his VHS collection apparently.
[09:41:40] -ixelp- King Crimson in concert 29th September 1982 , Munich, Germany. - YouTube
[09:49:01] <White_Flame> the whole "only programmers can change code, so freedoms don't matter" is also exactly the same as the people against the right to repair movement
[09:49:19] <White_Flame> because not everybody is qualified to repair/modify hardware
[09:50:52] <White_Flame> the point is that it is an explicitly permitted behavior, and that when one qualified person somewhere does it, it is an available benefit to everybody
[09:51:13] <White_Flame> and that one group can correct the technical mistakes of others
[09:51:39] <hayley> Now that you mentioned it. But I was thinking of the vicious cycle of "only programmers program, so freedoms don't matter" -> freedoms don't matter, no sources to play with -> few people program -> "only programmers program..."
[09:53:07] <White_Flame> yep, I'm just drawing extra parallels from the problems
[09:54:04] <White_Flame> and would also add on that before the 1980s or so, the user of a computer was intended to know how to command it
[09:54:19] <White_Flame> not just defer all commanding to applications
[09:55:59] <White_Flame> and that lack of user expectation, or even path to knowledge, really ticks me off
[09:56:41] <hayley> Unrelated: some conversation like "Sometimes Lisp is as fast as C." "Maybe it is because of LISP’s S-Expression syntax [...] which is rather close to how compilers represent internally submitted source code of more common computer languages at several stages of the compilation process while lowering it down to machine code and optimizing it"
[09:56:44] <hayley> Hmm...no.
[09:57:11] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:57:28] <hayley> Unless a data-flow graph or SSA is now just nested lists....yeah, no.
[09:58:12] <hayley> You can tell this person knows what they are talking about, because they write Lisp all upper case.
[10:05:57] <aeth> (PRINT 'AGREED)
[10:07:00] <aeth> tbf, that could just be old knowledge
[10:07:05] <White_Flame> wow, that's so much faster than printf("agreed"); !
[10:08:30] <aeth> back when compilers were less sophisticated and Lisp was LISP and, really, the MACROEXPAND probably _was_ close to the DISASSEMBLE
[10:08:56] <ck_> White_Flame: semicolons take quadruple time
[10:09:04] <hayley> "C is basicaly an assembler" Can I get at the carry flag from C yet?
[10:09:09] <ck_> pl: nice song, didn't know it before, thanks!
[10:09:18] <aeth> excluding the GC, non-Scheme Lisp is quite low-level (Scheme has this weird continuation thing)
[10:09:39] <White_Flame> hayley: or, "Can I dedicate a program-wide register in C?"
[10:09:47] <aeth> and write in s-expressions and you just trivialized the parser, which is like 2/3 of a compilers class afaik
[10:10:05] <White_Flame> or "Can I set the stack pointer in C?"
[10:10:08] <White_Flame> etc etc etc
[10:10:30] <hayley> gilberth and I use the CL compiler as a portable assembler, still.
[10:11:17] <hayley> And you can actually call the CL compiler at runtime, without pulling in a library.
[10:11:22] <aeth> I mean, the difference between a high level language that can be described as "quite low-level" and an actually low level language is just registers and stuff, which can probably be handled in a fairly naive way fairly quickly with macros and stuff
[10:11:36] <aeth> (might have an issue if your LET is too long, though)
[10:11:42] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[10:11:52] <hayley> aeth: global value numbering goes brrrr
[10:12:45] <aeth> when you do asm in a class you spend a lot of time on boilerplate that I'm sure even modern assemblers have you write-once-then-turn-into-a-macro, which Lisp just makes easier
[10:13:13] <aeth> especially the function boilerplate
[10:13:34] <aeth> jump there, do like 5 steps, then actually do the function, then restore the state, then jump back
[10:13:39] <aeth> iirc
[10:13:45] <aeth> I think that's x86.
[10:14:04] <aeth> I had to do x86 in one class (actual programming) and then MIPS (but only on paper?) in another iirc.
[10:14:09] <hayley> Yes, you make your stack frame, and spill the callee-saves registers too.
[10:14:41] <aeth> hayley: right, right, give it a few years and you'll just remember it as "do a few boilerplate steps", which if you're using a language with macros is all you need to remember
[10:14:59] <hayley> Broke: "If you CL code is as fast as your C code you didn't spend enough time on your C code."
[10:15:09] <aeth> certain stack stuff, certain register stuff, do it in the right order and in exactly the right way or else
[10:15:14] <hayley> Woke: "12 times faster than C [with Java code] just means you haven't started optimising." - Doug Lea
[10:15:32] *** Joins: ln43 (~ln43@user/ln43)
[10:15:35] <hayley> Bespoke: "30 times faster than Rust regex just means you haven't started optimising." - me
[10:15:46] <ln43> Good morning
[10:16:38] <aeth> Bespoke: C wins benchmarks because it has hand-tuned SIMD and that's what the benchmarks test for. Do the same. Write your own BLAS.
[10:17:57] <hayley> I already SIMD the hot loops though.
[10:18:09] <aeth> you have to overengineer it
[10:18:19] * hayley wants to go to the coffee compiler club to get ideas on how to work with a history flag for "SIMD this" or not, because SIMD is slower for short loops. 
[10:18:43] <aeth> everyone knows that the only way to judge anything is by matrix multiplication performance because it's easy to benchmark
[10:18:50] <hayley> :<
[10:19:15] <aeth> I guess regex with SIMD is close
[10:19:27] <hayley> Well, no one knows how to measure allocating a binary tree apparently. "Just use callgrind!" Sure, and what if you have a good allocator which inlines the allocation code?
[10:19:36] <hayley> i.e. https://v.redd.it/zqqpy8635kc81
[10:19:38] -ixelp- SAVE-LISP-AND-DIE Hard : LispMemes
[10:20:40] <aeth> anyway, it's not good enough to hand-tune specific functions... you must hand-tune general libraries to then call to hand-tune specific functions
[10:22:16] <hayley> I guess I still have to write a optimisation guide though, because my compiler sadly is not magic. "Don't use bounded repetitions if you can, because you'll make your Lisp compiler (and then your i-cache) sad." 
[10:22:34] <hayley> ...and that's about it, honestly. The only real problem I have.
[10:24:36] <hayley> "If you really want it to go fast, buy me a new CPU so that I can see if this crap still works with a 256-bit ALU." That might help too.
[10:26:27] <hayley> Otherwise, you've gotta be pretty clever to write a hand-written scanner that will outperform one-more-re-nightmare these days.
[10:26:36] <aeth> "If you really want this language to go fast, write a CPU designed to run it fast."
[10:26:59] <aeth> s/write/design/
[10:27:33] <aeth> If your s-expressions become Verilog or VHDL etc, then you don't write, you design
[10:27:47] <hayley> Hardware-accelerated regex is funny, but apparently suffers from "it falls over if you don't have constant prefixes" syndrome, like many software engines.
[10:28:02] <hayley> (sauce: <https://twitter.com/geofflangdale/status/1481155159648780291>)
[10:28:27] <aeth> Come on, this can be fixed with buzzwords.
[10:28:29] <aeth> FPGA. Machine learning.
[10:29:18] <aeth> heh, close enough. third tweet says Mellanox
[10:29:18] <hayley> Needs more metaverse blockchain AI
[10:29:47] <hayley> Might as well do the 2022 COVID quiz^Wtraining module for university now.
[10:29:57] <hayley> "Error code: SSL_ERROR_NO_CYPHER_OVERLAP" My favourite!
[10:31:09] <hayley> But if I change the https to a http, it works.
[10:36:15] <hayley> Funny that there are three independent tracking systems of sorts. First, the government one. Then the student access cards. Then using the wireless transceivers to figure out proximity.
[10:39:10] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:46:23] *** Joins: shka (~herr@109.231.0.226)
[11:47:56] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[12:17:07] <contrapunctus> New examples of document creation for the word processor, with the earlier numeric IDs removed... https://paste.rs/FgN
[12:17:30] <contrapunctus> (cc moon-child ^)
[12:19:17] <moon-child> contrapunctus: what is the difference between a 'node' and a 'layout'?
[12:19:30] <moon-child> shouldn't a layout just be a type of node?
[12:19:54] <contrapunctus> moon-child: nodes are contents and containers. layout is nodes arranged into a hierarchy.
[12:20:27] <moon-child> what's the difference between a layout and a container?
[12:21:27] <contrapunctus> (contents, such as text or images; containers, such as sections, paragraphs, emphasized text, URLs, source code blocks, ...)
[12:23:46] <contrapunctus> moon-child: a node is like a variable - by itself, it signifies the possibility that it may be used. The layout is akin to the program using a variable's value for something.
[12:26:33] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[12:28:57] <contrapunctus> The idea is to be able to have different layouts of the same content, if desired, as well as reusing the same content multiple times in the same layout.
[12:29:58] <moon-child> I am convinced that nobody has even _tried_ to select text in firefox
[12:30:14] <moon-child> contrapunctus: what if I want to reuse the same layout multiple times?  I still don't see why this needs to be special-cased
[12:31:45] <moon-child> whelp, it's broken in chrome too, though differently
[12:34:01] <contrapunctus> moon-child: I suppose layouts could contain other layouts, to support that...but that's kind of like embedding an entire LaTeX document in another LaTeX document (rather than reusing variables from one in the other)...what design do you suggest, then?
[12:35:11] <moon-child> I would simply make a layout another type of node, no special cases
[12:35:40] <moon-child> sharing can be accomplished by sharing; just refer to a node from multiple places
[12:47:34] <hayley> https://www.theguardian.com/australia-news/2022/jan/20/scott-morrison-proposal-to-allow-under-18s-to-drive-forklifts-catches-states-by-surprise
[12:47:34] -ixelp- Scott Morrison proposal to allow under-18s to drive forklifts catches states by surprise | Australia news | The Guardian
[12:48:32] <selwyn> truly an anglo nation
[12:50:24] <contrapunctus> moon-child: hm...pretty confused.
[12:52:51] <contrapunctus> moon-child: it does seem more elegant to have layouts as nodes.
[12:54:47] <selwyn> hayley: the hot dog stand industry will be hit hard by competition for underpaid teen labour
[12:56:04] <selwyn> fascism in our times
[12:56:29] <contrapunctus> moon-child: on the other hand, it might be breaking the distinction between content and structure that I've been aiming for.
[13:01:25] <contrapunctus> But reusing layouts in other layouts definitely sounds like something I'll try to implement.
[13:24:55] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[13:47:32] <moon-child> I: 'Unix is dynamically typed, and under unix, the compiler is a first-class file that operates on first-class files.  However, the underlying data structures used by the compiler are not files, and you would not have a very fun time if you tried to write a compiler that worked in terms of files.  So unix is stratified'
[13:47:41] <moon-child> some dude: 'ok, but let me tell you why that's actually a good thing'
[13:55:31] <contrapunctus> moon-child: link?
[13:55:57] <hayley> "That is, if you have 100K lines of Common Lisp, 100K lines of Racket, and 100K lines of Clojure, then the only real way to compose them is with byte streams" Who said I wanted to compose them?
[13:56:51] <hayley> "You have to write glue and adapters, but it's possible -- unlike in highly typed systems where you get O(M x N) code explosions." What's the difference?
[13:58:25] <hayley> "then you're limited to solutions that don't map very well to hardware, e.g. something like a Lisp machine." From what I've heard, a Lisp machine handled paging a lot better than any Linux box I've used ever did. But, granted, you can probably hear that lispms are used by unicorns and fart rainbows.
[13:58:47] <moon-child> indeed
[13:59:00] <hayley> contrapunctus: https://www.reddit.com/r/ProgrammingLanguages/comments/s7shox/why_static_languages_suffer_from_complexity/htdm5ns/ I expect?
[13:59:01] -ixelp- Why Static Languages Suffer From Complexity : ProgrammingLanguages
[13:59:02] <moon-child> add that 'map to hardware' is a misnomer
[13:59:08] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[13:59:34] <moon-child> contrapunctus: ^
[13:59:38] <hayley> "map to hardware"? Why do I have to write _builtin_clz(blah) [a GCC extension?] to count leading zeroes, whereas in CL I have INTEGER-LENGTH?
[14:00:29] <hayley> (Not exactly the same operation, sure, but y'know.)
[14:02:08] <Duuqnd> Sometimes it becomes painfully obvious that C was meant for a PDP-11
[14:02:44] <hayley> Duuqnd: https://queue.acm.org/detail.cfm?id=3212479
[14:03:38] <hayley> "The Clang compiler, including the relevant parts of LLVM, is around 2 million lines of code. Even just counting the analysis and transform passes required to make C run quickly adds up to almost 200,000 lines" So much for C mapping to hardware, if Clang/LLVM is larger than all of SBCL, with contribs and all :)
[14:04:24] <Duuqnd> I think the only reason people still think C is low-level is because it's painful and (with popular compilers) fast
[14:04:26] <hayley> (Not that I believe SBCL produces code of similar quality to LLVM, still.)
[14:05:12] <moon-child> maybe a more apt comparison is tcc, at 10kloc for the core code generator, with ur-scheme, at 1.6kloc for the whole thing
[14:05:26] <moon-child> and I bet you the latter generates better code
[14:05:58] <moon-child> (though how much of that is due to increased expressivity in the implementation language, who knows)
[14:06:11] <hayley> (FWIW it seems that the bait-y "what to do about the Left's foray into intellectual property" suffix on the title of my article has drawn some attention, at least compared to my attempts to announce it prior. idk)
[14:06:31] <contrapunctus> hayley, moon-child: someone tell oilshell about https://news.ycombinator.com/item?id=8860680
[14:06:32] -ixelp- Here is Alan Kay from a talk that was just on HN today. https://www.youtube.com/... | Hacker News
[14:07:21] <hayley> "we've got things back-asswards today"
[14:07:58] <moon-child> meh I don't buy that argument
[14:08:12] <hayley> "What you really want to do is to define your software system *first* — define it in the way that makes it the most runnable, most comprehensible — and then you want be able to build whatever hardware is needed, and build it in a timely fashion to run that software." I have complained about VM specifications on this basis.
[14:08:24] <moon-child> he says 'it was possible in the 70's at Xerox Parc with microcode'.  Well, then isn't your role as a ucode-writer the same as that of an ordinaray application-writer wrt a cpu these days?
[14:08:32] <hayley> contrapunctus: moon-child Baker-posted already
[14:08:43] <moon-child> and really, even if you are building your own cpu, you have physics to contend with--same problem
[14:09:06] <moon-child> the benefits and drawbacks of vertical integration vs specialization are, I think, broadly understood
[14:09:35] * hayley just wants Smalltalk on a RISC 2
[14:09:51] <moon-child> and in order for society to scale, it has broadly needed to tend towards specialization
[14:12:38] <hayley> But I can attest that it is very painful to write a compiler for the x86-64. Moreso if you want to write a good compiler.
[14:13:10] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:13:19] <moon-child> indeed
[14:13:56] <hayley> hayley's list of easy things: threads
[14:14:11] <moon-child> well, I think I can use e-graphs to generate nice memory operands.  Good because I can do good local rewrites easily, but wasn't surer of how to generate optimal code over larger scales
[14:14:12] <hayley> hayley's list of hard things: compiling, SIMD, everything else
[14:14:20] <moon-child> but still not sure exactly what to do about register allocation constraints
[14:14:27] <moon-child> (if I ever pick up my c compiler again...)
[14:15:09] <hayley> https://www.youtube.com/watch?v=-S4fE6kycGg
[14:15:09] -ixelp- Fully Unwrapped - McDonald's Fries - YouTube
[14:15:17] <Gnuxie> i know nothing about CPUs by i hope someone who actually and really does can say C is physically a pita 
[14:15:45] <Gnuxie> but*
[14:18:15] <moon-child> hmm, page mappings are annoying
[14:19:13] <Gnuxie> actually have a habit of saying "I know nothing" when i actually probably do 
[14:19:23] <Gnuxie> know something 
[14:19:32] <hayley> " You're not going to link them together ... and that also exposes the fact that Racket and Clojure bottom out at a bunch of C code anyway. I think Common Lisp does to some extent as well."
[14:19:37] * hayley imitates wrong buzzer again.
[14:20:16] <hayley> That's not how language specifications work. Does the HyperSpec say "thou shall use C to implement the GC"?
[14:20:19] <Gnuxie> wdym i can't just put everything in static vectors? 
[14:20:22] <ck_> I also know nothing would you like to form a club
[14:20:33] <hayley> TIL beach is violating the HyperSpec majorly
[14:20:47] <moon-child> ;o
[14:20:50] <moon-child> *BONK*
[14:20:57] <moon-child> go to spec jail
[14:21:00] <Gnuxie> ck_: yes, but i don't know anything about clubs 
[14:21:01] <hayley> https://i.redd.it/kfueo0n1be871.jpg
[14:21:02] <moon-child> really puts the c in common lisp
[14:21:37] <ck_> Gnuxie: then how do you know that the answer is yes?
[14:21:45] <hayley> https://i.redd.it/h10tg0qbd0b51.jpg
[14:22:55] <Gnuxie> ck_: I'm somewhat of a club goer myself
[14:23:18] <ck_> nice
[14:23:21] <hayley> I wonder how many programs can actually benefit from staging/compiling on the fly/whatever. Probably not CRUD web applications, of course. (Unless your page dispatch uses a regex engine, maybe...)
[14:24:03] <hayley> My main ideas for "Lisp _faster than_ C" are either allocation-heavy stuff, for whatever reason, or anything with staging.
[14:24:18] <hayley> As we have COMPILE you can implement a JIT without any libraries.
[14:24:49] <shka> lisp_faster_than_c ideas are also mainly old
[14:25:19] <shka> C compilers started to employ crazy level of optimization since then
[14:25:35] <hayley> You can't compile out an interpretation step, unless you are PyPy.
[14:25:50] <moon-child> can't I be pypy?
[14:26:57] <shka> apparently can't be pypy as a lisp
[14:27:15] <moon-child> iirc beach's argument is that c programs cannot be both modular and performant.  So lisp is faster than c at implementing a given degree of modularity
[14:27:36] <shka> he has a point there
[14:28:26] <hayley> If you really want to be, I guess.
[14:28:26] <hayley> But you'd need more magic to do that in C.
[14:30:57] <hayley> Nonetheless I meant that a C compiler is not PyPy, and will not optimise out your interpreter by magic. So appropriate use of COMPILE can make CL faster than C. Please see the most recent one-more-re-nightmare shitpost for evidence.
[14:31:46] <shka> i personally think that CL is performant ENOUGH to do most of stuff you need performance for
[14:33:12] <hayley> I personally think that OMRN is too performant for interesting regular expressions. Now you have nothing to un-slow down to make performance improvements when work is slow. ):
[14:35:06] <hayley> Maybe gloating too much, but I haven't written many programs that churn through 9 Gchar/s or so. Only programs that write programs that churn through that many.
[14:37:31] <selwyn> although people claim to care about performance they often settle for python/js/whatever
[14:37:37] <selwyn> so they don't care about performance
[14:37:56] <selwyn> an overrated concern
[14:38:13] <hayley> selwyn: "write the fast parts in C!!!1"
[14:38:16] <contrapunctus> moon-child: specialization makes things fragile, incidentally.
[14:38:45] <moon-child> (I will note that I recently had to move pointers in c in order to make a particular interface sufficiently modular and usable)
[14:38:50] <selwyn> hayley: thing is that in python world that is mostly a meme anyway
[14:39:01] <selwyn> not every python weenie can write c
[14:39:26] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:39:28] <moon-child> selwyn: numpy is popular though
[14:39:42] <moon-child> selwyn: and take the opposite tack: lua is very commonly embedded in c++ game engines
[14:39:42] <hayley> You have posted interpreter, prepare to lose factor 10 performance
[14:40:32] <selwyn> i don't have much lua experience but it seems to be a scripting language that is used in the correct way
[14:40:47] <selwyn> whereas in python people often try to implement serious stuff in it
[14:41:30] <selwyn> a result is that the high level/low level distinction (which was always a bit tenuous imo) breaks down completely
[14:42:11] <selwyn> it is besides the point that you have numpy, if there is an interpreted bottleneck ruining your performance
[14:42:23] <moon-child> what is the high level/low level distinction?
[14:42:31] <Duuqnd> I've written some code in Lua which was embedded in a game and it wasn't really a pleasant experience. Beats using C++ and recompiling the whole game for every change though.
[14:43:05] <hayley> moon-child: Ousterhout shits his pants and calls it a dichotomy
[14:43:06] <selwyn> well, simply the idea that you can factor out high level logic from low level numerical code
[14:43:16] <hayley> ...or that
[14:44:49] <selwyn> an encounter with this is what convinced me to never look back from common lisp, actually
[14:44:57] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[14:45:08] <selwyn> i suppose i could write about it but i suspect i would be preaching to the converted
[14:46:08] <hayley> Sometimes the converted are just in name though.
[14:46:21] <selwyn> i feel that algorithms don't fit neatly at all into the high level low level distinction
[14:46:26] <selwyn> and algorithms are important
[14:47:38] <hayley> "We examine some observations related to how humans seem to underestimate the cost-effectiveness of learning simple things."
[14:47:43] <hayley> I think beach is an alien
[14:48:07] <selwyn> or a robot?
[14:48:11] <selwyn> sounds like sth data would say
[14:48:19] <hayley> or a furry?
[14:49:10] <selwyn> https://www.youtube.com/watch?v=rERApU26PcA
[14:49:11] -ixelp- Data uses most secure code ever Star Trek TNG (Blu Ray HD) - YouTube
[14:49:14] <selwyn> beach entering a password
[14:50:41] <shka> NATO phonetic alphabet kept in use in TNG :D
[14:51:33] <selwyn> wonder if picard would be too patriotic to use it
[14:53:01] <contrapunctus> I wonder how one might avoid stratification in a layered system 🤔
[14:53:20] <shka> you can't 
[14:53:29] <shka> that's the drawback of purely layered system
[14:54:15] <contrapunctus> Oh. So why is stratification disliked?
[14:54:37] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[14:55:11] <selwyn> it adds a great layer of complexity
[14:55:17] *** Joins: kevingal (~quassel@2001:770:c0:401:4573:51f6:5384:5305)
[14:55:17] <moon-child> it inhibits composition
[14:55:19] <selwyn> you now have to think about python/c interop
[14:55:32] <moon-child> I cannot directly compose a component of the lower layer with the upper one 
[14:55:46] <contrapunctus> Ah...
[14:56:12] <shka> that's why good software has layers, but only limited number of layers
[14:56:46] <selwyn> shka: https://www.youtube.com/watch?v=GZpcwKEIRCI
[14:56:46] -ixelp- Ogres are like Onions - YouTube
[14:57:01] <shka> selwyn: yes, yes, i know
[14:57:14] <shka> anyway
[14:57:50] <shka> the ideal situation is for layer to be completely self contained... and it often can be 
[14:58:23] <shka> but in practice, you often have to think about the details
[14:58:35] <shka> good example would be considering your operating system
[14:58:53] * hayley looks. What operating system?
[14:59:04] <shka> "This is supposed to work on windows, so threads are not that cheap"
[14:59:13] <contrapunctus> selwyn: "I DON'T CARE...what everyone likes." — Lispers
[14:59:20] <contrapunctus> 😏
[14:59:41] <shka> dunno, i expected Lisp Ramsey 
[14:59:55] <selwyn> contrapunctus: can't hear you, i am cosy over here in my swamp
[15:00:21] <selwyn> shrek as lisp mascot?
[15:00:21] <hayley> THIS STRUCTURE IS SO FUCKING RAW
[15:00:48] <selwyn> i don't know what role donkey could have
[15:01:33] <shka> Puts python between slices of bread STUPID SANDWICH
[15:01:41] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Remote host closed the connection)
[15:01:41] <selwyn> i think blas is a good example of the system working
[15:01:44] <selwyn> shka: lol
[15:02:05] <contrapunctus> selwyn: Donkey could represent people asking about new CL standard 🙃
[15:02:14] <selwyn> most of the time you just want the best performance on a linear algebra operation you can get
[15:02:24] <selwyn> and you can rely on the blas nerds for that
[15:02:39] <hayley> .oO(Are the arrays linear objects with linear algebra?)
[15:02:43] <shka> selwyn: yeah, but that's because this is low level, blas does not care, it operates on mathematical concepts
[15:02:49] <moon-child> selwyn: I wanna fusion though
[15:03:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[15:03:21] <moon-child> no kernel is an island
[15:03:22] <selwyn> i mean
[15:03:29] <shka> but when layers start to demonstrate application logic then it becomes harder
[15:03:33] <selwyn> yes
[15:03:49] <hayley> https://www.youtube.com/watch?v=FPNjQ4JWr9U
[15:03:50] -ixelp- Islands - YouTube
[15:03:59] <selwyn> and i think blas works for that reason
[15:04:41] <selwyn> i don't mind cffi'ing out to other things if they are stable, predictable and do the job well
[15:04:41] <moon-child> (I also wanna superoptimizer but I don't think I'm going to get it, so perhaps I shouldn't complain)
[15:04:50] <selwyn> fusion? like of tensors?
[15:04:55] <contrapunctus> shka: «but in practice, you often have to think about the details» so basically leaky abstractions? 🤔
[15:05:01] <shka> contrapunctus: yes
[15:05:11] <hayley> Like (map a (map b x)) == (map (compose a b) x) I think.
[15:05:13] <shka> that's why beach advocates protocol to be minimal and complete
[15:05:17] <moon-child> selwyn: yes.  Given f(g(x)), I want generated code to be an optimized version of f∘g(x)
[15:05:23] <moon-child> hayley: yeah
[15:05:35] <shka> and if you can do that, it mostly reduces problems you have to deal with 
[15:06:21] <shka> in other words, you are trying to build system of concepts like mathematics already has 
[15:06:32] <shka> but that's difficult 
[15:07:04] <pl> selwyn: life is better when you have COM 
[15:07:13] <moon-child> pl: ._.
[15:07:18] <shka> i attempted to do that in statistical-learning, and i think that i did fairly good job, but it is still not ideal
[15:07:34] <selwyn> alien win32 technology
[15:07:41] <moon-child> mathematics has the advantage that it does not have to deal with the real world
[15:07:50] <selwyn> yes.jpg
[15:08:24] <shka> selwyn: win32 actually ha some impressive API design, especially for a time
[15:08:51] <selwyn> i used com to set up some direct x opengl interop for vr
[15:09:05] <selwyn> i enjoyed it tbh
[15:09:10] <selwyn> but it was weird
[15:09:18] <shka> because it is old
[15:09:24] <selwyn> the docs are excellent
[15:10:10] <selwyn> you could have some metaclass magic to expose com objects in common lisp
[15:10:22] <Duuqnd> Windows seems to have fewer of the completely baffling problems that Unix does, but makes up for it by being at least 45% duct tape.
[15:10:23] <selwyn> i suppose you have to scrape enough stuff from the c headers
[15:10:28] <selwyn> but i think it can be done
[15:18:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:19:40] <pl> Duuqnd: it got that by being language agnostic unlike unix
[15:25:12] <hayley> I also have a suspicion that hiding data layout from the programmer could help with optimising for bandwidth somehow.
[15:25:38] <hayley> Scott McKay told me that he made a Lisp implementation for the PDP-11, which would try its best to fit cons cells into 16 bits.
[15:26:00] <hayley> If you can JIT clever data layouts, as well as accessor code...
[15:26:54] <hayley> I might bring it up in the Coffee Compiler Club, if there's a way to compress any ol' objects in memory. If not, I'll have to invent it.
[15:26:57] <moon-child> chris lattner's phd thesis was about that, iirc
[15:27:20] <moon-child> and: oftentimes when apl is often faster than c it is because it uses smaller integers, promoting only at need
[15:27:25] * hayley asked about what she can do about the CCC being 5 in the morning, with no response.
[15:28:05] <Alfr> hayley, go to bed early? ;)
[15:28:32] <hayley> Ah yes, compressed OOPs
[15:28:32] <hayley> "Second, we describe an aggressive technique, Automatic Pointer Compression, which reduces the size of pointers on 64-bit targets to 32-bits or less, increasing effective cache capacity and memory bandwidth for pointer-intensive programs."
[15:28:51] <hayley> Alfr: Well. I want to be up late to see my European friends, up early to see Americans at the compiler club, and up normal for Australian shit.
[15:29:16] <moon-child> 'This thesis presents a new class of techniques named “Macroscopic Data Structure Analyses and Optimizations”, which is a new approach to the problem of analyzing and optimizing pointer-intensive programs. Instead of analyzing individual load/store operations or structure definitions, this approach identifies, analyzes, and transforms entire memory structures as a unit'
[15:29:53] <Alfr> hayley, we'll need to invent longer days, but just for you?
[15:33:20] <hayley> Remember when LLVM was supposed to be used for JITting or something?
[15:33:26] <moon-child> lol
[15:33:44] <moon-child> didn't webkit experiment with llvm briefly?
[15:34:25] <moon-child> (I think julia still uses llvm, and bad problems with startup time and cache invalidation)
[15:35:19] <selwyn> clasp is admirably pushing this concept to the extreme
[15:35:24] <selwyn> no idea how it is going
[15:35:33] <moon-child> well, clasp doesn't care about startup time, right?
[15:35:45] <selwyn> last i heard they had a contact at llvm who was in charge of the orc jit
[15:36:09] <selwyn> clasp startup time is around 5 seconds with quicklisp for me
[15:36:17] * moon-child wonders if cl<->c++ interop wouldn't be better served by something like iota
[15:36:19] <selwyn> which is highly comparable with abcl on my machine
[15:36:39] <selwyn> they did some real magic
[15:36:57] * selwyn is old enough to remember when clasp took a day to build and ten minutes to startup
[15:38:53] <hayley> But I'd go as aggressive as possible, coming up with compressed shapes at runtime. Of course, there's the question of invalidating unusable layouts between multiple threads, which I haven't seen handled before.
[15:39:31] <hayley> e.g. you optimistically decide something is a float array, and then the program decides to store a string. Now you need to deoptimize to an untyped array. Oops.
[15:39:56] <moon-child> well, that particular case is not so hard
[15:40:00] <moon-child> I think pypy does that
[15:40:04] <hayley> There was also heap compression in Java for mobile phones, btw.
[15:40:16] <hayley> PyPy is single threaded though. So is V8 AIUI
[15:40:40] <moon-child> hmm?  Afaik one of the draws of pypy over cpython, aside from performance, is no gil
[15:41:39] <moon-child> but anyway I think a write barrier solves that particular problem
[15:42:01] <moon-child> if you try to write to an object while I am upgrading it, then you fail and update your pointer
[15:42:45] <hayley> AIUI PyPy cannot run on multiple cores still.
[15:43:21] <hayley> Then how do I get another thread to detect it? The check and write have to be one atomic unit.
[15:45:26] * hayley is off to bed, so it will have to be a rhetorical question.
[15:53:32] <dave0> nite hayley 
[15:54:22] <selwyn> this journal accepts microsoft word as a submission format
[15:57:18] <gilberth> What is that journey about?
[16:09:02] <selwyn> physics
[16:09:16] <selwyn> (general purpose)
[16:09:46] <selwyn> my paper is probably too long, and my thesis is probably too short
[16:09:48] <selwyn> typical
[16:10:02] <gilberth> Ouch. I was expecting something like gender blah. For using Word that is. :-)
[16:10:23] <gilberth> selwyn: So what is your plan? Write more or write less?
[16:14:06] <selwyn> i suppose both at the same time
[16:14:12] <selwyn> though i have to take care not to confuse the two :)
[16:14:51] <selwyn> more seriously, i will forget about the paper for the moment and add a bunch of stuff to the thesis
[16:15:01] <selwyn> happily, i identified a bunch of stuff that needs improving
[16:17:56] <selwyn> shka: i don't know if you know this guy, he does the meme simulations but by hand
[16:18:10] <selwyn> https://www.youtube.com/watch?v=ibkf6YdGK2Y
[16:18:11] -ixelp- Could UK military prevent India from taking control over Indian Ocean? - YouTube
[16:24:44] <shka> selwyn: thanks, i learned more about Indian Navy then I would ever want to know
[16:25:03] <sham1> TL;DW
[16:25:26] <shka> i like boxes on historia civilis 
[16:25:37] <shka> boxes fighting each other
[16:25:41] <sham1> Yeah, the squares are nice
[16:26:01] <shka> https://www.youtube.com/watch?v=Idw_3WnIqnc
[16:26:02] -ixelp- The Battle of the Granicus (334 B.C.E.) - YouTube
[16:26:28] <selwyn> i always thought they were envelopes not boxes
[16:26:42] <shka> no, they are https://en.wikipedia.org/wiki/NATO_Joint_Military_Symbology
[16:27:43] <selwyn> much standardisation
[16:27:48] <shka> but this is not ideal system because, for instance there is no way to display wehrmacht jaeger unit
[16:28:17] <shka> which is not a problem for modern NATO, but is a problem for youtubers :P
[16:29:11] <shka> historia civilis just needs grunts and horses 
[16:34:13] <shka> HC uses artillery symbol for archers
[16:34:17] <shka> makes sense :P
[16:35:56] <sham1> Artillery of the day. And it's not like catapults were used that much in battles Vs sieges.
[16:41:10] <selwyn> are tanks cavalry?
[16:51:57] <shka> selwyn: depends, tanks can be used by cavalry, but in practice only US Army employs tanks in the cavalry role
[16:52:10] <shka> well, contemporary 
[16:52:40] <shka> currently cavalry is consider in other countries to be just light scouting units, so no need for tanks
[16:53:06] <shka> historically UK had this concept of cavalry tank during world war II
[16:54:30] <sham1> I suppose that tanks can be used for doing similar stuff to cavalry, although I suppose motorized infantry might work better
[16:54:54] <shka> sham1: nah, tank is for fighting units
[16:55:06] <sham1> I gues
[16:55:32] <shka> but the main point is: cavalry is not a weapon, it is a role 
[16:55:38] <shka> a mission
[16:56:05] <shka> and outside of US it's mission does not require tanks
[16:57:10] <pl> Tank recon still happens everywhere 
[16:57:38] <pl> And tank units are sometimes used as equivalent of heavy independent cavalry 
[16:57:54] <pl> (something introduced, I believe, by Wehrmacht in WW2) 
[16:58:10] <shka> pl: yeah, it is just that the modern "cavalry" is not that
[16:58:38] <pl> Certain kinds of vehicles that straddle the line between APC/IFV/light rank are used specifically for scouting, too 
[16:58:48] <selwyn> tank recon huh
[16:58:50] <pl> shka: cavalry is problematic term, yeah 
[16:58:53] <selwyn> but they are not quiet
[16:59:03] * selwyn doesn't understand armying
[16:59:04] <pl> selwyn: not all recon has to be quiet 
[16:59:22] <shka> selwyn: can be fast, has night vision and IR, has communication
[16:59:35] <shka> it is not IDEAL but it can be done
[16:59:54] <pl> Note that all the way to the edge of missile era, *NAVAL* scouting was done by cruisers 
[17:00:12] <shka> and if someone decides to shot it with 20mm or something like that it is not a big deal
[17:00:37] <shka> pl: because cruisers were supposed to be fast 
[17:00:48] <pl> There's also the term "reconnaissance in force", where you take a fighting group and run through potentially contested territory, prepared for fast battle or retreat 
[17:00:52] <pl> shka: actually nope 
[17:01:08] <pl> If it was speed, it would be destroyer job 
[17:01:47] <shka> anyway, tanks are very useful, flexible tools
[17:01:58] <pl> The name "cruiser" comes from "capable of independent cruise", i.e. Long distance operations combined with having enough on hand to work all kinds of roles 
[17:02:30] <pl> Whereas lìne of battle ships (guess where battleship came from?) weren't really supposed to be used outside of battle line 
[17:02:59] <sham1> Named appropriately
[17:03:32] <pl> So a cruiser is in the middle - it's got the range, it's got speed, it's got a punch, and most importantly it's got space for command and its supports 
[17:04:16] <pl> That's, ofc, the predominant culturally British model of looking at it 
[17:04:34] <pl> Things get funky when you translate certain names 
[17:04:38] <pl> For example, Kirov 
[17:05:05] <pl> Which is closest thing to battleship built since 1980s
[17:05:14] <shka> kirov is what in the west would be called "arsenal ship" concept?
[17:05:18] <pl> Nope 
[17:05:43] <shka> no? it sounds superficially similar
[17:05:59] <shka> naval missile platform 
[17:06:10] <pl> It's however refered often as "battlecruiser" because it kinda made people think "nothing with that amount of firepower can be left as just cruiser" 
[17:06:57] <pl> shka: arsenal ship idea iirc went for packing the ship chock full of missiles in simplified way, not much more than floating firing barge that's self moving 
[17:07:24] <shka> hmm, sounds like something that i would design
[17:07:30] * shka is a simple person
[17:08:34] <pl> Kirov packs less missiles than USN 1995 arsenal ship, but is also flagship capable, equipped for all kinds of roles, and has tendency of saying "nice Nimitz/Iwoa you got there, would be a shame if something happened to it" 
[17:08:46] <pl> *Iowa 
[17:09:35] <pl> Soviet designation for Kirov was "heavy guided missile cruiser" 
[17:09:48] <pl> But then, Akula was also "heavy cruiser" XD
[17:10:07] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[17:10:36] <shka> Russian nomenclature is traditionally weird
[17:15:17] <pl> it's more that they do not meticulously keep to old british one
[17:15:40] <pl> shka: btw, what kind of library for Snowflake in CL would you like?
[17:15:44] <pl> I mean, what kind of API? :)
[17:15:54] <shka> that's a good question
[17:16:30] <shka> well, personally i have to deal with a timeline data
[17:16:35] <shka> and a lot of it
[17:16:52] <shka> because counter-strike is like that
[17:17:49] <shka> pl: does that help? i would have to think deeply about this 
[17:18:02] <pl> not much, but I'm tempted to sit down and write one
[17:18:12] <pl> the sql-like parts can be probably done quickly
[17:18:20] <pl> but iirc there's a dataframe-like api too
[17:18:59] <shka> well, my is is that my problem is the best described as a long vector of heterogeneous objects 
[17:19:05] <shka> *my issue
[17:19:20] <shka> and that's pretty unusual as far as databases go
[17:20:32] <shka> and simply using snowflake for SQL is not that great honestly
[17:20:32] <pl> how heterogenous?
[17:21:10] <shka> well, it is either event like "grenade throw" or change to the state of one of the players active in the game
[17:21:39] <shka> so it is very heterogeneous 
[17:22:21] <shka> currently we use PG for that, it works, but it was not my choice
[17:22:26] <shka> i simply follow established path
[17:22:41] <shka> and i am trying to press PG into service, really
[17:23:43] <pl> shka: hmmm, have you tried subclassing in PG?
[17:23:50] <contrapunctus> hayley, moon-child: strangely...isn't that post _really_ about what language is available at runtime vs at compile time? Not sure that was really covered in the comments...
[17:24:20] <shka> pl: no, i don't even know what you mean
[17:24:44] <shka> https://www.postgresql.org/docs/9.1/tutorial-inheritance.html this?
[17:24:45] -ixelp- PostgreSQL: Documentation: 9.1: Inheritance
[17:25:01] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 256 seconds)
[17:28:40] <pl> shka: yes
[17:28:54] <pl> postgress is OORDBMS, which is something people sometimes forget ;)
[17:29:33] <pl> so you specialize inherited tables (possibly also partitioning them as well)
[17:33:22] *** Joins: elflng (~elflng@5.28.137.182)
[17:34:57] <shka> pl: yeah, got it, sadly my problem is slightly different, and honestly not even well suited for SQL
[17:35:36] <shka> I essentially do pattern matching on a whole match to extract some events
[17:35:55] <shka> and SQL simply is not for that
[17:37:37] <shka> i even designed pattern matching language for sequences, but just for fun
[17:40:38] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[17:46:33] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Ping timeout: 256 seconds)
[18:00:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:04:56] <selwyn> https://pointersgonewild.files.wordpress.com/2022/01/internet-fad.jpeg
[18:10:30] <ck_> Researchers and Experts from the Virtual Society Project were wrong? inconceivable
[18:14:21] <selwyn> how could the daily mail be wrong
[18:18:54] <ck_> something something 640k
[18:41:50] <phoe> 66kB, I guess I am done
[18:42:01] <phoe> waiting for final reviews and I'll publish it today evening
[18:52:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:53:32] <shka> pl: i have kubernetes question 
[18:55:04] <pl> shka: shoot 
[18:56:39] <ck_> oh god, you too?
[18:56:53] <ck_> k8s is like purgatory, I hope after this round I never have to do that again
[18:57:27] <shka> i want to know how i know that my docker container is on VM node that is getting evicted by azure
[18:58:01] <shka> i can't find this on azure documentation
[18:59:25] <pl> shka: hmmm, that's hard 
[18:59:41] <pl> What is the consumer of that information? 
[19:00:25] <shka> well, i have a process that pushes data into database, i simply need to switch status of master record to "evicted" or something like that
[19:00:35] <shka> but i must know in that process that it is about to get down
[19:00:47] <pl> Generally if your pod is going to be killed you're not going to get the reason, but you will get specific signals 
[19:01:49] <shka> that's fine, but I need to know what kind of signal i should expect
[19:01:54] <shka> so i can handle it
[19:04:02] <pl> SIGTERM is going to be sent first, you can set grace period to have more time to do housekeeping 
[19:04:08] <pl> Plus there's https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#handler-v1-core
[19:04:42] <pl> Which let's you declare a preStop hook that can execute a command, or do a TCP send or http request 
[19:05:11] <pl> Life cycle hooks also include postStart 
[19:05:52] <shka> great
[19:06:01] <shka> i can handle sigterm, no problem
[19:06:02] <shka> thanks
[19:06:53] * pl loves working with k8s btw 
[19:18:44] <ck_> how?
[19:18:58] <ck_> I mean
[19:19:27] <ck_> interaction: \n interrogative: \n verbalSequence: \n - how?
[19:19:47] <ck_> oops forgot apiVersion, now you can't interpret what I mean
[19:20:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:25:16] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[19:25:20] * gilberth has trouble with TELNET TIMING-MARKs.
[19:27:48] <gilberth> I have troubling understanding it, but it basically is like CLEAR-INPUT, which is nice.
[19:29:01] <gilberth> trouble, rather.
[19:31:53] <gilberth> One party can send a "DO TIMING-MARK" saying "La, la, I won't listen to you." I am supposed to send a "WILL TIMING-MARK" to be heard again. However, I may want and need to send a "WILL TIMING-MARK" just in case without having seen a "DO TIMING-MARK" before.
[19:33:31] <gilberth> This comes up with interrupts and I just send a WILL TM. I want to brush up by 20yo Telnet daemon for CL and thought I could clean it up.
[19:37:19] <shka> pl: how long is that grace period?
[19:37:57] <pl> It's configurable in pod spec 
[19:38:05] <shka> good
[19:38:18] <pl> Default is 30 seconds 
[19:38:28] <pl> Operator can bypass it, though 
[19:38:46] <pl> (sending SIGKILL immediately 
[19:41:43] <ck_> pl: my question was serious, how do you enjoy it? it's  so  much  indirection it boggles the mind. mine anyway.
[19:42:10] <shka> yeah, makes sense
[19:42:28] <ck_> and then after all the yaml parties, when a pod is just in CrashLoopBackoff and didn't ever log anything you need to get the divining rod to find out what caused it
[19:43:28] <pl> Cki don't use Yaml when I can (mostly I use it because other want it, it's purely optional) 
[19:44:16] <pl> Also, k8s has very simple design that iteratively builds from small simple components to bigger elements, plus some of the stuff is essential complexity of the topic space 
[19:44:50] <pl> Comparatively, I have to apply much less effort when dealing with k8s than more traditional setups 
[19:45:17] <ck_> I see, thanks for the insight -- also, do you input tab as ctrl+i?
[19:45:45] <pl> Rarely ;-)
[19:46:08] <ck_> just wanted to know where "Cki" came from
[19:46:19] <pl> Ahhh 
[19:46:22] <pl> Didn't notice the typo 
[19:46:29] <pl> I'm on mobile phone right now 
[19:46:39] <ck_> respect
[19:47:39] <ck_> what's the alternative to yaml you use? toml? or do you just run kubectl commands to build up your deployments
[19:47:40] <pl> As for k8s - I will fully admit that I suspect modern teaching materials for it suck worse than ancient pre-1.0 stuff 
[19:57:01] <selwyn> i think many teaching materials are getting worse
[19:57:33] <selwyn> return to manuals and proper tutorials
[20:09:22] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:13:16] <pl> With k8s, there's I fear a difference in scope, kind of 
[20:13:37] <pl> Old stuff for early adopters went at it from Pod upwards 
[20:13:42] <pl> Explaining why
[20:15:05] <selwyn> pod?
[20:34:14] <ck_> selwyn: the lowest-level granularity for kubernetes, think "a running docker container"
[20:37:34] <ck_> "deploy with confidence" -- https://image.slidesharecdn.com/kubernetesoverview-deployyourappwithconfidence-webversion-180502083406/95/kubernetes-overview-deploy-your-app-with-confidence-28-638.jpg?cb=1525250665
[20:37:40] <ck_> I like "seceret" best
[20:39:27] *** Joins: Catie (~user@user/catie)
[20:43:34] <ck_> pl: if you still have a link to some of that older documentation I'd be very interested in finding out what the story is
[20:50:06] <shka> pl: what happens when it is not just container getting evicted but the whole node is getting down because of azure?
[20:51:07] <shka> the whole vm is getting evicted to premium users
[20:51:37] <shka> i am talking about spot virtual machines
[20:52:36] <shka> fucking azure docs
[20:53:12] <shka> try finding the basic stuff in there, like "what actually happens when you are evicted" i dare you
[21:04:16] <pl> shka: presumably (I don't use Azure) the node is first cordoned then pods are evicted, which gives you the same behaviour we just discussed unless something yanks the cord 
[21:05:06] <shka> pl: oh, this is just golden
[21:05:30] <pl> Cordoned = no new pods can be scheduled 
[21:06:19] <shka> pl: there is API you are supposed to poll for like every second and it will tell you if you are getting evicted in the next 30 seconds
[21:06:44] <shka> which is just... not cool
[21:06:45] <pl> selwyn: pod is the smallest runnable thing in k8s, composed of multiple containers, and sharing name spaces (network, IPC, pid, etc) 
[21:06:52] <pl> shka: very uncool 
[21:07:36] <shka> but whatever, i just added sigterm handler, so terminating the process from the server is not a problem
[21:07:41] <pl> selwyn: closest relation in normal hosting would be a complete docker host = one pod, if all pods used same IP etc 
[21:08:04] <shka> i just need to know when i need to terminate
[21:08:33] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[21:12:56] <pl> ck_: as for alternative to Yaml - kubernetes API natively talks json and protobufs, and what I like to do is to programmatically generate manifests - or call the API directly (this is also common in the form of "building an operator") 
[21:13:31] <pl> ck_: k8s api is very, very simple at its core, to the point that someone recently extracted just the apiserver machinery out to run other projects on top 
[21:21:41] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:23:45] <pl> ck_: also, that slide you linked is straight up hilariously bad, IMO
[21:23:55] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[21:24:11] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:25:02] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[21:26:03] <ck_> pl: yes, I picked it for that reason
[21:26:25] <ck_> it expresses how I felt when confronted with that garden of nomenclature at the beginning
[21:26:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[21:26:46] <ck_> "all I want is my container running somewhere and expose a port, what's an 'ingress'? 'service'? 'secret'?"
[21:27:00] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:29:01] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:29:24] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:33:27] <pl> ck_: IMO it's best to start at what is pod, how it runs, then talk about how controllers work... and suddenly you start to grok how higher layers compose things on lower layer to get what you need, when you need
[21:35:42] <pl> Pods and services are also where the most hairy stuff happens
[21:42:02] <pl> (as they are the lowest API before interaction with real world problems start)
[21:45:55] <ck_> maybe I should read a book on this instead of hoping to skirt around it forever
[21:45:58] <ck_> thanks for the motivation
[21:54:25] <pl> ck_: you might want to look into some oldest papers that were less tutorials and more directed at people on more advanced level to explain the idea - if only because it might show a more sensible view of the fundamentals
[21:55:19] <pl> when I learnt to use k8s, the first hosted offering was just recently provided (GKE), Deployments and Ingress were hot new stuff that just went to beta
[22:07:25] <ck_> okay, will do!
[22:11:29] *** Quits: kevingal (~quassel@2001:770:c0:401:4573:51f6:5384:5305) (Remote host closed the connection)
[23:06:30] <phoe> https://www.reddit.com/r/Common_Lisp/comments/s8r075/forever_stable_branch/
[23:06:31] <phoe> here we go
[23:06:31] -ixelp- Forever Stable Branch : Common_Lisp
[23:14:41] <ck_> can I read it without feeling too bad to sleep afterwards?
[23:18:04] <hayley> https://www.youtube.com/watch?v=-gXVy89pDbM
[23:18:04] -ixelp- Sparks - Equator - 11/27/1976 - Capitol Theatre - YouTube
[23:18:44] <hayley> Cliff to I: "No problem, people show up late all the time.  Can I ask what is your interest in compilers?"
[23:52:26] <phoe> ck_: yes
[23:53:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731) (Ping timeout: 240 seconds)
[23:55:54] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
