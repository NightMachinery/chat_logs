[08:37:03] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[08:41:34] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 265 seconds)
[08:49:51] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Quit: leaving)
[08:50:04] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[09:02:07] *** Quits: eddof13 (~textual@187.246.227.157) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:04:17] *** Joins: shka (~herr@109.231.62.239)
[09:28:48] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:32:06] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[09:37:48] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[09:42:41] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[09:43:39] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:58:26] *** Quits: cjb (~cjb@user/cjb) ()
[10:07:06] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de) (Quit: WeeChat 3.1)
[10:13:54] *** Joins: derwolf (~quassel@81.161.232.13)
[10:14:42] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 240 seconds)
[10:15:11] *** Joins: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06)
[10:21:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:22:00] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:25:33] *** Joins: ibinderwolf (~irc@81.161.232.13)
[10:28:22] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[10:28:38] *** Joins: raeda (~raeda@72.49.219.33)
[10:28:52] *** Quits: derwolf (~quassel@81.161.232.13) (Ping timeout: 265 seconds)
[10:30:42] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[10:31:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:34:01] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[10:37:34] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[10:39:00] *** Joins: amb007 (~a_bakic@249.196.204.77.rev.sfr.net)
[10:39:24] *** Joins: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de)
[10:42:25] *** Quits: amb007 (~a_bakic@249.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[10:45:39] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:01:22] *** Joins: leeb (~leeb@KD111239153143.au-net.ne.jp)
[11:04:29] *** Quits: leeb_ (~leeb@KD111239158072.au-net.ne.jp) (Ping timeout: 258 seconds)
[11:12:34] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[11:13:26] *** Joins: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net)
[11:18:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:18:44] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:24:23] *** Joins: pve (~pve@37-136-219-103.rev.dnainternet.fi)
[11:24:27] *** Joins: selwyn (~selwyn@user/selwyn)
[11:25:57] *** Quits: elf_fortrez (~elf_fortr@adsl-64-237-239-58.prtc.net) (Quit: Client closed)
[11:26:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[11:26:46] *** Joins: amb007 (~a_bakic@249.196.204.77.rev.sfr.net)
[11:26:46] *** Quits: amb007 (~a_bakic@249.196.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[11:26:58] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:33:07] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[11:33:38] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:36:02] *** Quits: prxq_ (~quassel@x4db91f0f.dyn.telefonica.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:37:38] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[11:37:48] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:45:40] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:47:21] <phoe> good morning
[11:47:24] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[11:48:06] <beach> Hello phoe[12:07:38] <rdrg109> Good morning
[12:07:48] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[12:09:33] <beach> Hello rdrg109.
[12:12:00] <beach> rdrg109: Do you have any particular reason for using GNU CLISP over other implementations?
[12:15:17] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[12:16:16] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[12:24:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806) (Ping timeout: 252 seconds)
[12:26:10] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:4812:3940:14e1:1806)
[12:31:06] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[12:33:20] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[12:33:32] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[12:35:22] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[12:36:25] *** Joins: ibinderwolf__ (~irc@81.161.232.13)
[12:36:28] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 265 seconds)
[12:39:10] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 258 seconds)
[12:39:58] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:46:10] *** Joins: ibinderwolf (~irc@81.161.232.13)
[12:48:56] *** Quits: ibinderwolf__ (~irc@81.161.232.13) (Ping timeout: 252 seconds)
[12:51:21] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:56:13] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[12:59:12] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 252 seconds)
[13:01:00] *** Joins: ibinderwolf (~irc@81.161.232.13)
[13:02:52] *** Quits: ibinderwolf_ (~irc@81.161.232.13) (Ping timeout: 252 seconds)
[13:03:06] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[13:07:14] *** Joins: ibinderwolf_ (~irc@81.161.232.13)
[13:08:32] *** Joins: Tomte (~th@p200300db9f189400a5d997f8a02aa4cb.dip0.t-ipconnect.de)
[13:10:13] *** Quits: ibinderwolf (~irc@81.161.232.13) (Ping timeout: 258 seconds)
[13:26:24] *** Quits: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se) (Remote host closed the connection)
[13:26:47] *** Joins: Duuqnd (~duuqnd@89-253-114-156.customers.ownit.se)
[13:27:29] <susam> Hello rdrg109
[13:29:46] <susam> By the way, I still keep CLISP around because (1) nostalgia (2) testing out if some implementation-dependent behaviour behaves differently with CLISP. That is, SBCL as the primary implementation and CLISP to test out my programs to weed out any bad habits of writing implementation-dependent code.
[13:43:35] <beach> Sounds like a good idea.
[13:43:56] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[13:45:03] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[13:49:38] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ed41:f1c:aac7:22ec)
[14:01:17] <kakuhen> I like to test on CCL just to weed out sbcl-specific code
[14:01:42] <kakuhen> i became really angry when doing this for a certain cl project because a bunch of really really simple functions that reinvented already-existing functions in the CL spec were using sbcl extensions
[14:03:25] <kakuhen> but after patching out that mess... i am now just angry at one thing: every CL implementation seems to have its own posix interface and export symbols for errors and signals, but neither uiop nor osicat-posix have decided to have wrappers for this
[14:04:21] <susam> kakuhen: Any example you can remember? I am trying to understand why a function in CL spec would use sbcl extension and even if it did why it would matter as long as it conforms to the spec.
[14:05:09] <kakuhen> (defun get-decoded-system-time () (decode-universal-time (+ (encode-universal-time 0 0 0 1 1 1970 0) (sb-posix:time))))
[14:05:17] <phoe> I mean (defun foo () #+sbcl ... #-sbcl ...) is reasonable
[14:05:18] <phoe> oh
[14:05:19] <kakuhen> take out a pencil and paper and write out what's actually going on in this function
[14:05:21] <phoe> that sucks
[14:05:25] <kakuhen> you'll realize it's essentially computing y-x+x
[14:05:34] <kakuhen> also the CL spec already has a function for this: get-decoded-time
[14:05:38] <phoe> yes
[14:06:21] <kakuhen> remember when I came in here asking about sbcl-specific macros?
[14:06:28] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[14:06:45] <kakuhen> the macro i was dealing with was the result of some guy who took a perfectly fine macro using CFFI and decided "hmm let me just write out the pure sb-alien calls instead"
[14:07:08] <kakuhen> lots of stuff that originally used bordeaux threads for no reason were rewritten to just use sb-thread
[14:07:20] <kakuhen> i dont get what motivates to do this ;_;
[14:08:44] <susam> kakuhen: Where did you pick the get-decoded-system-time code from?
[14:09:11] <kakuhen> stumpwm -- a tiling window manager written entirely in common lisp
[14:09:22] <kakuhen> i've been writing a set of patches in order to bring *at least* CCL support back, and hopefully expand portability
[14:09:23] <susam> kakuhen: get-decoded-system-time is not the CL spec, is it? Only get-decoded-time is.
[14:09:47] <phoe> https://github.com/stumpwm/stumpwm/blob/7fe59c00810b35843139194525db444a2c26aa72/time.lisp#L126-L128
[14:09:51] <phoe> oh shit
[14:09:59] <kakuhen> susam: the behavior of the function I posted is identical to get-decoded-time
[14:10:00] <phoe> this effectively makes stumpwm SBCL-only
[14:10:04] <susam> kakuhen: Okay. I think I get your point now.  You meant that another software tool (stumpwm, in this case) decided to rely on SBCL ext instead of the spec. Problematic, of course. I see what you mean.
[14:10:35] <kakuhen> yeah, I don't mind what phoe suggested earlier, that is, (defun foo () #+sbcl ... #-sbcl ...)
[14:10:50] <kakuhen> obviously not everything can be portable across implementations
[14:10:56] <phoe> but come on
[14:11:08] <kakuhen> but in this case it's a mixture of, I guess oversight(?) on some committers parts, and then people deciding to just force sbcl hard deps
[14:11:44] <kakuhen> i havent sent my patches yet because I am waiting till I can get stump running fine on CCL, and then I will essentially send the maintainers every single patch
[14:12:05] <kakuhen> that way they are a bit more open to the idea of changing things for sake of portability
[14:12:30] <kakuhen> no point fixing that time function when there's still a dozen other sbcl-specific code left to patch; etc etc
[14:12:39] <phoe> git grep "sb-" | wc -l ;; gives me 65 lines for stumpwm
[14:12:51] <phoe> this means that stumpwm has heavy SBCL dependencies
[14:13:02] <kakuhen> i managed to bring it down to the 30s with my patches
[14:13:13] <kakuhen> the number is staying positive only because it DOES make sense in some scenarios to use sbcl extensions
[14:13:21] <phoe> https://github.com/stumpwm/stumpwm/pull/351/files
[14:13:27] <phoe> and it seems that this was purposeful
[14:13:33] <kakuhen> o yeah
[14:13:39] <kakuhen> i ran git blame on a lot of dubious lines
[14:13:47] *** Joins: heisig (~heisig@p57942813.dip0.t-ipconnect.de)
[14:13:50] <kakuhen> and I found a bunch of stuff by some Javier guy to intentionally rewrite things to be sbcl-specific
[14:14:12] <phoe> there is an explicit #-sbcl (error "This lisp implementation is not supported.") in the code, so
[14:14:21] <kakuhen> if you look at the commits from javier
[14:14:35] <kakuhen> you'll see a bunch of "portable" code just get deleted and they leave the #+sbcl line remaining
[14:14:45] <kakuhen> kinda funny but also a bit frustrating to see heh
[14:15:05] <phoe> the only thing I can do about it is nerd raging
[14:15:09] <kakuhen> stump used to run a lot of major CL implementations but recently became SBCL-only.
[14:15:16] <phoe> so I think I instead won't do anything
[14:15:25] <kakuhen> oh the sbcl-specific stuff being forced in isn't the only problem
[14:15:32] <kakuhen> i also found extraneous declare's being used throughout the code
[14:15:55] <kakuhen> but yeah -- im still in the process of patching the main io loop so that it works on CCL
[14:16:22] <loke[m]> The main loop was the biggest reason why they went to SBCL
[14:16:31] <phoe> loke[m]: why?
[14:16:35] <loke[m]> The other implementations we