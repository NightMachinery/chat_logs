[00:04:31] *** Joins: pulse_ (~pulse@user/pulse)
[00:07:37] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[00:10:31] *** pulse_ is now known as pulse
[00:15:00] *** Joins: badone (~badone@209.132.189.136)
[00:20:45] *** Joins: cq-work (~Z_Lund@user/cq-work)
[00:25:48] <LordKalma> wtf is going on
[00:26:15] <LordKalma> makefiles? embrace cmake
[00:30:26] <Alipha> cnomake, hearnomake, speaknomake
[00:31:37] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[00:32:08] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[00:32:32] <LordKalma> !grab Alipha
[00:32:32] <nolyc> LordKalma: The operation succeeded.
[00:33:44] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[00:34:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:41:45] *** lmat_ is now known as lmat
[00:43:46] *** Joins: paule32_ (~paule32@user/paule32)
[00:46:15] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 244 seconds)
[00:53:50] <lmat> Raziel: We were talking about my super-cool packet-forming algorithm yesterday ( kalven was, too and RandomReader was nay-saying :-P) I think I got it worked out, but it's not pretty! I found a few more requirements while I was working on it. The entrypoint to the algorithm is here: https://sourceforge.net/p/caylus-bot/code/ci/master/tree/src/util.cpp#l719 and the tests are
[00:53:56] <lmat> https://sourceforge.net/p/caylus-bot/code/ci/master/tree/src/test/utils.cpp#l121
[00:55:37] <Raziel> apparently sourceforge's cert is fucked so I can't look. v:
[00:55:39] <kalven> can't view the page, getting a 404 (and invalid cert)
[00:56:07] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[00:56:18] <lmat> I wound up using a recursive algorithm that 1. gets all packets from the current set of goods, then 2. for each of those, take those goods out of the bunch and do it again (adding another packet)
[00:56:29] <lmat> It's going very slow for me, but it is working...no 404, no cert errors: https://imgur.com/YHmLzSh.png
[00:56:45] <very_sneaky_> heh. the sourceforge cert expired on 24/09?
[00:56:46] <lmat> I guess I should find a new source code provider. Sourceforge seems to be having problems more often than not :(
[00:56:48] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[00:56:49] <Raziel> weird
[00:56:52] <very_sneaky_> that's weird, that's like 2 months old
[00:56:56] <Raziel> but, yes, github is the shit nowadays
[00:57:00] <Raziel> so maybe use that
[00:57:13] <very_sneaky_> or gitlab if you're libre and don't like the idea of copilot
[00:57:19] <lmat> Raziel: I don't use any Microsoft products and don't intend to at this point ;-)
[00:57:32] <very_sneaky_> gitlab it is :P
[00:57:35] <Raziel> lmat, I deal with similar algorithms in the context of monte carlo simulations and outcome precomputation and stuff
[00:57:53] <lmat> very_sneaky_: never heard of copilot!
[00:58:09] <Raziel> and yes, that kind of stuff is generally very slow and intensive
[00:58:14] <very_sneaky_> lmat: https://copilot.github.com/
[00:58:22] <lmat> very_sneaky_: yeah, reading :-o
[00:58:50] <lmat> Raziel: I'm working on creating an AI for a board game to try to identify effective strategies. I don't think it's going to work though...the more I code the more I see how large a branching factor there is!
[00:58:58] <lmat> Raziel: No wonder I'm always scratching my head when playing the game!
[00:59:25] <Raziel> lmat, this is why you normally want to precompute things like that and then just use the precomputed maps and such
[00:59:46] <lmat> Raziel: I'm thinking that monte carlo isn't going to be useful because it's too sparse (good strategies are often VERY exact...you don't get "close" I think in this game), and minimax probably won't work because a bredth-first search will be crazy.
[00:59:57] <LordKalma> sourceforge is good as dead
[01:00:01] <LordKalma> if you don't like github, use gitlab
[01:00:05] <Raziel> lmat, yes, monte carlo won't help much for "solving" something
[01:00:05] <LordKalma> gitlab is great actually
[01:00:18] <LordKalma> I even prefer it to github, but I have github pro, so, meh
[01:00:27] <lmat> Raziel: precompute...interesting. Another approach would be to have each AI help trim a minimax (bredth-first) search...
[01:00:32] <Raziel> it helps for seeing patterns and things like percentage cances of different outcomes, and normal distributions
[01:00:36] <lmat> Raziel: "won't help much for "solving"" excellent way to put it!
[01:00:38] <Raziel> chances*
[01:01:29] <lmat> LordKalma: I've been using a private gitlab installation for work. My only complaint is the separate namespaces for issues and merge_requests. It makes it harder to navigate using "manual" URL adjustments.
[01:02:06] <LordKalma> I think the gitlab UI ends up being more discoverable
[01:02:19] <LordKalma> the "wiki" portion for example is much less visible in github
[01:02:24] <LordKalma> while in gitlab is much more to the face
[01:02:50] <very_sneaky_> i wish we had gitlab at work
[01:02:54] <Raziel> I quite like bitbucket myself
[01:02:56] <very_sneaky_> atlassian suite is such a cludge
[01:03:05] <very_sneaky_> Raziel: *why*
[01:03:18] * imMute misses azure devops.
[01:03:27] <LordKalma> wuuuut? bitbucket is discount git{hub|lab}
[01:03:37] <Raziel> it works, it integrates nicely with the rest of the stuff, it's generally fast. idk, I just haven't really seen anything wrong with it :p
[01:03:39] <LordKalma> Qt uses Jira and Gerrit, which I don't understand :D
[01:03:50] <very_sneaky_> I've been going down the rabbit hole of configuration as code of ci tests using bamboo's yaml specs. it's been the worst
[01:03:53] <LordKalma> I was informed of the advantages of the contributing flow of gerrit
[01:04:00] <LordKalma> but I can0't look at that shit
[01:04:12] <lmat> Raziel: No, thanks, for that Atlassian bitbucket. I have worked with it a bit, and it's bad news. Comments in code reviews are really hard to get right...they sort of disappear sometimes and I can't find them at all, tracking changes between diffs (as developers update their branch, etc.) is a real pain, etc.
[01:04:23] <LordKalma> 3 websites: code.qt.io, bugreports.qt.io, and codereview.qt.io and a weird workflow
[01:04:24] <very_sneaky_> bitbucket is the best part of their offering tbf, but it lacks a lot of features that other git server providers provide
[01:04:33] <LordKalma> where you push to ref/to/dev or whatever
[01:04:40] <very_sneaky_> having said that i'm talking mostly about their server offerings not cloud offerings
[01:04:45] <Raziel> lmat, welp :p
[01:05:20] <lmat> Raziel: If you don't use that stuff, you're good to go ;-)
[01:06:20] <Raziel> I'll try gitlab too, it's free for self-hosting right?
[01:07:08] <lmat> Raziel: Yes, but the situation is a little weird. It's a gimped free version, so can't rightly be called Free Software. The gimped version is Free Software (or at least that's what I've heard insisted from many).
[01:07:09] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[01:07:19] <Raziel> how gimped are we talking? v:
[01:07:39] <lmat> Raziel: Not bad...some requirements are not possible for merge requests for instance...maybe there's a limit on users?
[01:08:00] <lmat> CI/CD enhancements on paid.
[01:08:37] <lmat> Raziel: "The gimped version is Free Software? What if someone contributes all the paid features?" Theoretically, I think that would be okay, and then the free version wouldn't be gimped anymore?
[01:08:43] <Raziel> also, atlassian discontinued their self-hosted version? wat d fak
[01:09:13] <anyone> the big issue with Atlassian is that they've cancelled the on-premise products
[01:09:14] <lmat> Raziel: I don't know anything about that...my old workplace (quit two years ago) was using that VERY HEAVILY...they'll be sad to hear it!
[01:09:28] <Raziel> anyone, yes, that's what I just said :p
[01:09:41] <Raziel> well their shit is a no-go now, so, I guess I'll *have* to try gitlab.
[01:10:16] <Raziel> "moving to a cloud future together" you can take your cloud and shove it where the sun don't shine yo
[01:10:18] <anyone> it's kinda ok, but soo many rough edges
[01:10:20] <lmat> I have a gitlab account, but liked the idea of having all my software on sourceforge. It gives me free white-beard points. But they're so unreliable...they probably have petabytes of code that they're trying to serve, and it really shows!
[01:10:25] <anyone> (gitlab)
[01:10:35] <lmat> Raziel: So you're going to self-host some gitlab?
[01:10:45] <anyone> gitlab totally broke cursor key navigation on Create Issue screen e.g.
[01:10:59] <lmat> anyone: like tabbing to different fields?
[01:11:06] <Raziel> lmat, probably, when I have the space and time to bother
[01:11:08] <lmat> I remember having to tab through all the formatting buttons or something ^_^
[01:11:14] <lmat> Raziel: :-D
[01:11:18] <anyone> lmat: more like - click anywhere in the html document to unfocus from some <input>, then (normally) use the curso rkey to scroll the page
[01:11:27] <lmat> Raziel: Give me the URL so I can create some repos ^_^
[01:11:45] <Raziel> lol
[01:11:46] <lmat> anyone: aaaahhh; yikes, that's broke!?
[01:11:58] <kalven> sourceforge sold out a long time ago
[01:12:07] <anyone> lmat: don't know don't care (too much). I'm just using git command-line as much as possible.
[01:12:13] <lmat> kalven: I thought they were trying to come back and get white-beard cred again...
[01:12:27] <LordKalma> what do you mean sold out?
[01:12:49] <lmat> anyone: I just opened the /-/issues/new page and a new issue fits all on one screen...no need to scroll ;-).  Can't create a gitlab issue from git command line ;-)
[01:13:04] <lmat> LordKalma: They started putting malware in some projects' offerings a while back.
[01:13:15] <LordKalma> ahh that installer bullshit?
[01:13:17] <LordKalma> I noticed yeah
[01:13:31] <anyone> maybe an update that was inserted into our gitlab system fixed cursor nav already. Will need to watch in the coming days.
[01:13:40] <lmat> LordKalma: Exactly. The whole time, I'm thinking, "Who uses installers!?... Ahh, Microsoft Windows users..."
[01:15:01] <LordKalma> hahah
[01:15:05] * LordKalma uses windows
[01:15:51] <lmat> :-D
[01:16:08] <LordKalma> https://i.gyazo.com/3ace82c046513bbf1a01e73a093c8293.png
[01:16:10] <lmat> When I tell my colleaguse to install something and I see them open up an internet search engine xD
[01:16:10] <LordKalma> just a while ago
[01:17:56] <lmat> LordKalma: Dude, clean up your console window :-D  'Nav' is defined but never used... delete it :-P   .catch(err=>console.error(err));     <tr key={i}><td>{i}</td> ....  Tell Microsoft you want a CoPilot refund :-P
[01:18:07] <LordKalma> hahaha in the meanwhile I removed them all
[01:18:17] <LordKalma> it's clean now
[01:18:24] <lmat> Sweet :-*
[01:19:07] <Raziel> I, too, use windows
[01:20:19] <lmat> LordKalma: I use vim in tmux is XFCE on archlinux https://imgur.com/SyOHYFu.png
[01:20:56] <LordKalma> looks good
[01:21:17] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[01:21:24] <lmat> Oh yeah, I didn't even remember that I'm actually using vim in tmux over SSH in XFCE on archlinux.   Oh yeah, I use xrandr-invert-colors, so the colors are all inverted from that...
[01:21:39] <lmat> LordKalma: When I was using Microsoft Windows, I used negativescreen to do something similar ;-)
[01:22:10] <LordKalma> I generally use white themes
[01:22:11] <LordKalma> sue me
[01:22:20] <Raziel> my lawyers will contact you shortly
[01:22:40] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[01:23:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 250 seconds)
[01:24:28] <Raziel> but yeah, I use visual studio in explorer.exe on windows 10 with dark theme. :p
[01:24:35] <pulse> In Vim for some reason if you change themes in the right order you get a completely unique theme
[01:25:03] <pulse> So now I do :colo GitHub and :colo PaperColor and get a nice light paper colored theme
[01:25:12] <pulse> (PaperColor is a dark theme)
[01:26:11] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 264 seconds)
[01:26:36] *** Joins: cq-work (~Z_Lund@user/cq-work)
[01:28:44] <pulse> Actually apparently there's a light version too https://github.com/NLKNguyen/papercolor-theme
[01:28:51] <pulse> Maybe it just does :colo Github first xD
[01:28:56] <pulse> Looks pretty much the same
[01:36:54] *** Quits: magla (~gelignite@55d416cc.access.ecotel.net) (Quit: Stay safe!)
[01:37:02] <johnny> Raziel, gitlab community is being used by major players, so it's probably fine for most people at least
[01:37:32] <Raziel> good to know
[01:37:51] <johnny> it's probably too much effort if you're just doing a small project here or there htough
[01:37:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:58] *** ChanServ sets mode: +v npaperbot
[01:38:55] <johnny> it's definitely suited to host a whole forge with different permisions, groups, and all that jazz.  it's not suited if you're just hosting your own projects
[01:40:13] <johnny> for that it's just easier to use the hosted versions
[01:46:47] *** Quits: pah_ (~pah@host-79-42-71-25.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[01:48:38] *** Joins: pah (~pah@user/pah)
[01:56:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:00:55] <lmat> LordKalma: I always use light themes. Because I hate dark on light. I hate it so much that I don't even tolerate the program or two that doesn't cooperate fully. All programs cooperate with light themes, then I invent in my display manager. 100% compliance (except the one-off website that decides they'll be cool with light on dark...grrr)
[02:01:33] <lmat> pulse: I don't know what you're talking about...vim has color profiles?
[02:01:41] <lmat> pulse: Colors are decided by the terminal emulator, no?
[02:01:43] <LordKalma> How do you watch a photo with your screen inverter?
[02:01:56] <LordKalma> A video, something
[02:01:58] <lmat> LordKalma: I uninvert :-D
[02:02:01] <LordKalma> Isn't all wrong?
[02:02:04] <LordKalma> Hahah fair
[02:02:10] <lmat> LordKalma: Oh yeah, it looks like total crap ;-)
[02:02:23] <LordKalma> Doesn't that burn your eyes instantly? When you uninvert
[02:02:28] <lmat> A little less distracting because pretty women look like aliens or zombies...
[02:03:07] <lmat> LordKalma: Meh...I close my eyes if necessary. I also do all my work in the unfinished space in my basement...no windows at all and often the lights are off, so yeah, burning the eyes is a legitimate concern!
[02:06:16] <anyone> program can override terminal emulator defaults
[02:07:13] <pulse> lmat, I use gVim, like a civilized person
[02:07:35] <pulse> And yes pretty sure colorschemes work in terminal anyway
[02:07:44] <pulse> At least on Linux, I think it works funny on Windows
[02:08:45] <anyone> you simply have to recognize that programs, when developers made their color decisions, made those decisions based upon the inherent brightness of the color as shown on sRGB monitors
[02:08:56] <anyone> that in turn limits the choices you can make afterwards
[02:09:11] *** Joins: Simplar (~Simplar@188.163.92.225)
[02:09:26] <anyone> e.g. midnight commander has this blue background (who doesn't...), which means that redefining "blue" to anything that's brighter than the usual blue makes it look like shit
[02:10:48] <anyone> in other words, if you do rotate colors, you need to do so via L*a*b color space or something
[02:11:12] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[02:13:46] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[02:15:26] *** Joins: great_taste (~great_tas@190.32.235.20)
[02:24:37] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[02:25:40] *** Joins: luizfrds (~Luiz@152.250.243.147)
[02:27:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:32:17] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[02:32:59] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[02:33:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:36:33] *** Quits: Fairy (~Fairy@2001:464a:4992:0:c5a4:9a37:ed3f:74d) (Ping timeout: 250 seconds)
[02:37:17] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[02:40:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[02:40:35] *** Quits: jkaye (~jkaye@2601:281:8300:7530:65b4:1325:4217:bff5) (Ping timeout: 264 seconds)
[02:41:11] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[02:43:26] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[02:43:39] *** Joins: pah (~pah@user/pah)
[02:46:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:52:17] *** Joins: Ameisen_ (~ameisen@137.184.136.18)
[02:55:13] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[02:55:20] *** Quits: Ameisen_ (~ameisen@137.184.136.18) (Client Quit)
[02:56:06] *** Joins: gggpkm (~gggpkm@125.33.82.254)
[02:59:14] *** Joins: Ameisen (~ameisen@137.184.136.18)
[03:01:24] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[03:03:08] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[03:05:12] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:16:25] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[03:19:32] *** Joins: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz)
[03:20:02] *** Quits: mIGu (~mig21@user/naur) (Quit: Quitting)
[03:21:14] *** Quits: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz) (Client Quit)
[03:21:33] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[03:22:11] *** Quits: proller (~p@2a02:6b8:b081:8017::1:22) (Ping timeout: 246 seconds)
[03:22:42] *** Joins: mIGu (~mig21@user/naur)
[03:27:48] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[03:28:26] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Ping timeout: 245 seconds)
[03:28:34] *** Quits: DSpider (~DSpider@82.79.237.28) (Quit: Leaving)
[03:30:25] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[03:32:21] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:33:46] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[03:35:07] *** Joins: proller (~p@2a02:6b8:b081:13::1:e)
[03:35:47] <Alipha> lmat: what board game?
[03:36:26] *** Joins: Fault (~Fault@152.70.112.168)
[03:36:54] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[03:40:35] *** Joins: teepee (~teepee@openscad/teepee)
[03:43:39] *** Quits: Guest4249 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:46:00] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[03:47:46] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:47:57] *** Joins: teepee (~teepee@openscad/teepee)
[03:50:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[03:51:51] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[03:52:24] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:53:31] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[03:53:48] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 244 seconds)
[03:54:05] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[03:54:10] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[03:54:32] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 268 seconds)
[03:54:50] *** Quits: Argorok (sid195487@hampstead.irccloud.com) (Ping timeout: 244 seconds)
[03:55:15] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 260 seconds)
[03:55:15] *** Quits: headline_ (sid102736@tinside.irccloud.com) (Ping timeout: 260 seconds)
[03:57:05] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 264 seconds)
[03:57:05] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 264 seconds)
[03:57:34] *** Joins: ferdna (~ferdna@user/ferdna)
[03:57:35] *** Quits: buhman (sid411355@user/buhman) (Read error: Connection reset by peer)
[03:57:35] *** Quits: nightstrike (uid487@2a03:5180:f:5::1e7) (Read error: Connection reset by peer)
[03:57:37] *** Quits: lhtseng (sid15322@2a03:5180:f:1::3bda) (Read error: Connection reset by peer)
[03:57:38] *** Quits: psb (sid500598@user/psb) (Read error: Connection reset by peer)
[03:57:38] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:57:39] *** Quits: leonardus (sid358597@id-358597.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:57:40] *** Quits: znemo (sid500529@id-500529.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:57:40] *** Quits: ullbeking (sid5364@user/ullbeking) (Read error: Connection reset by peer)
[03:57:41] *** Quits: NiKaN (sid385034@id-385034.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:57:41] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[04:07:04] *** Joins: cq-work (~Z_Lund@user/cq-work)
[04:09:28] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[04:10:22] *** Joins: Fault (~Fault@152.70.112.168)
[04:14:17] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[04:14:34] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[04:15:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:15:24] *** Joins: cq-work (~Z_Lund@user/cq-work)
[04:16:11] *** Joins: celphi (sid97751@user/celphi)
[04:20:21] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[04:20:47] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 264 seconds)
[04:22:51] *** Joins: celphi (sid97751@user/celphi)
[04:23:16] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[04:24:30] *** Joins: bjs (sid190364@user/bjs)
[04:24:31] *** Joins: psb (sid500598@user/psb)
[04:24:44] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[04:25:51] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[04:26:10] *** Joins: nojhan (uid443807@lymington.irccloud.com)
[04:31:21] *** Joins: Argorok (sid195487@hampstead.irccloud.com)
[04:31:27] *** Joins: computerquip (sid423484@user/computerquip)
[04:31:50] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[04:33:26] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[04:34:08] *** Joins: buhman (sid411355@user/buhman)
[04:34:33] *** Joins: Youmu (uid129469@user/condy)
[04:34:34] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[04:34:41] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[04:34:45] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[04:36:38] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:37:29] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[04:37:53] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:26] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:40:35] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[04:41:22] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[04:41:36] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[04:44:32] *** Joins: znemo (sid500529@uxbridge.irccloud.com)
[04:44:38] *** Joins: ullbeking (sid5364@user/ullbeking)
[04:51:50] *** Joins: headline_ (sid102736@tinside.irccloud.com)
[04:59:51] <lmat> Alipha: Caylus!
[05:00:05] <lmat> pulse: I use vim over SSH...gvim isn't really an option ;-)
[05:01:35] <anyone> the right way (for vim and emacs anyway) is to use SSH over vim.
[05:08:33] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4d21:33e0:266f:38f8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:18:04] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[05:18:50] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[05:21:09] *** Joins: johnny (~johnny@user/johnny)
[05:30:32] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[05:31:20] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[05:31:55] *** Joins: CaCode- (~CaCode@user/cacode)
[05:32:48] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[05:34:35] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[05:37:34] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2229:11af:500f:b39d)
[05:37:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:59] *** ChanServ sets mode: +v npaperbot
[05:40:57] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[05:41:46] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 245 seconds)
[05:48:40] *** Joins: gggpkm_ (~gggpkm@125.33.82.254)
[05:51:38] *** Quits: gggpkm (~gggpkm@125.33.82.254) (Ping timeout: 246 seconds)
[06:07:44] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 268 seconds)
[06:21:18] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[06:23:47] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:33:34] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:145:28b:ea41:3529) (Quit: Quit)
[06:41:23] *** Joins: smeso (~smeso@user/smeso)
[06:43:39] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[06:45:31] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:46:12] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[06:46:35] *** Quits: gggpkm_ (~gggpkm@125.33.82.254) (Ping timeout: 246 seconds)
[06:51:02] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 240 seconds)
[06:53:25] *** Joins: paule32__ (~paule32@user/paule32)
[06:55:28] *** Joins: paule32 (~paule32@user/paule32)
[06:56:32] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 240 seconds)
[06:57:04] *** Joins: Fairy (~Fairy@2001:464a:4992:0:151c:2e2b:3b8e:26b)
[06:58:14] *** Joins: paule32_ (~paule32@user/paule32)
[06:58:27] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 256 seconds)
[06:59:55] *** Joins: paule32__ (~paule32@user/paule32)
[07:01:51] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 256 seconds)
[07:02:49] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:03:41] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 264 seconds)
[07:05:15] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:05:31] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2229:11af:500f:b39d) (Ping timeout: 245 seconds)
[07:06:10] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[07:08:29] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Read error: Connection reset by peer)
[07:08:48] *** Joins: gggpkm__ (~gggpkm@60.10.194.43)
[07:09:13] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[07:11:15] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[07:17:00] *** renopt is now known as tner
[07:18:20] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[07:20:24] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:22:34] *** Quits: Brewster (~Brewster@user/brewster) (Remote host closed the connection)
[07:23:29] *** Joins: Brewster (~Brewster@185.145.156.241)
[07:24:11] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[07:27:30] *** Quits: gggpkm__ (~gggpkm@60.10.194.43) (Ping timeout: 260 seconds)
[07:35:02] *** Quits: proller (~p@2a02:6b8:b081:13::1:e) (Ping timeout: 240 seconds)
[07:35:13] *** Joins: gggpkm__ (~gggpkm@111.63.44.13)
[07:38:02] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[07:39:10] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[07:42:02] *** Quits: gggpkm__ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[07:45:43] *** Joins: AmR (~AmREiSa@156.199.86.69)
[07:51:59] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[07:52:20] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:52:35] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:56:18] *** Joins: pah_ (~pah@host-87-10-190-156.retail.telecomitalia.it)
[07:56:21] *** Quits: pah (~pah@user/pah) (Ping timeout: 250 seconds)
[07:57:37] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:01:21] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[08:21:41] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[08:26:20] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[08:32:43] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[08:35:55] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[08:46:22] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:46:52] *** Joins: frost (~frost@user/frost)
[08:52:07] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (Quit: ZNC 1.8.2 - https://znc.in)
[08:52:17] *** Joins: blackbeard420_ (~blackbear@45.33.85.133)
[08:53:26] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[09:16:37] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:17:33] *** Joins: Fault (~Fault@152.70.112.168)
[09:19:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:19:26] *** leonardus is now known as tago
[09:20:10] *** Joins: gggpkm_ (~gggpkm@111.63.44.13)
[09:23:27] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[09:30:18] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:30:31] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:32:22] *** Joins: gggpkm (~gggpkm@123.113.176.184)
[09:33:00] *** Quits: Fault (~Fault@152.70.112.168) (Quit: Quit.)
[09:33:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[09:33:30] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[09:33:41] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:34:02] *** Joins: Fault (~Fault@152.70.112.168)
[09:34:02] *** Quits: gggpkm_ (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[09:35:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[09:36:38] *** Joins: gggpkm_ (~gggpkm@123.113.182.69)
[09:36:53] *** Quits: gggpkm (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[09:37:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:37:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:00] *** ChanServ sets mode: +v npaperbot
[09:38:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:40:21] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[09:40:41] *** Joins: gggpkm__ (~gggpkm@123.113.176.184)
[09:41:18] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[09:43:28] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[09:43:51] *** Quits: gggpkm_ (~gggpkm@123.113.182.69) (Ping timeout: 245 seconds)
[09:45:22] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:46:55] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[09:53:18] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[09:57:42] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[09:58:38] *** Joins: gggpkm_ (~gggpkm@123.113.176.184)
[10:00:25] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[10:00:40] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[10:01:35] *** Quits: gggpkm__ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[10:03:19] *** Quits: gggpkm_ (~gggpkm@123.113.176.184) (Ping timeout: 250 seconds)
[10:04:42] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[10:07:18] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[10:07:43] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[10:08:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:10:09] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Client Quit)
[10:16:02] *** Quits: pah_ (~pah@host-87-10-190-156.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[10:18:42] *** Joins: gggpkm__ (~gggpkm@125.33.82.254)
[10:21:53] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[10:24:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:24:10] *** Joins: pah (~pah@user/pah)
[10:26:19] *** Joins: CaCode_ (~CaCode@user/cacode)
[10:29:11] *** Quits: pah (~pah@user/pah) (Ping timeout: 246 seconds)
[10:29:15] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[10:30:40] *** Joins: pah (~pah@user/pah)
[10:31:30] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[10:32:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:32:47] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:34:27] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[10:35:29] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[10:36:21] *** Joins: pah (~pah@user/pah)
[10:36:42] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[10:45:55] *** Joins: gggpkm (~gggpkm@111.63.44.13)
[10:47:02] *** Quits: gggpkm__ (~gggpkm@125.33.82.254) (Ping timeout: 246 seconds)
[10:50:34] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:145:28b:ea41:3529)
[10:50:47] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[10:54:38] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[10:54:38] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[10:55:15] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:56:34] *** Joins: pah_ (~pah@host-80-183-67-81.business.telecomitalia.it)
[10:58:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:145:28b:ea41:3529) (Quit: Quit)
[11:01:04] *** Joins: andreasbuhr (~quassel@p549db884.dip0.t-ipconnect.de)
[11:05:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:05:40] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[11:06:05] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:06:13] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[11:06:46] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:12:39] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:12:59] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 264 seconds)
[11:15:32] *** Quits: gggpkm (~gggpkm@111.63.44.13) (Ping timeout: 240 seconds)
[11:16:32] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:19:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:21:20] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[11:21:27] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:24:14] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[11:26:27] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:27:18] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:29:12] *** Joins: gggpkm__ (~gggpkm@123.113.191.141)
[11:32:43] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[11:35:03] *** Joins: dkdns (~dkdns@178.49.152.151)
[11:39:58] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:44:46] *** Joins: gggpkm_ (~gggpkm@60.10.194.43)
[11:46:38] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[11:47:35] *** Quits: gggpkm__ (~gggpkm@123.113.191.141) (Ping timeout: 246 seconds)
[11:48:28] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5ef:144b:750a:3781)
[11:50:02] *** Joins: CaCode (~CaCode@user/cacode)
[11:50:20] *** Quits: dkdns (~dkdns@178.49.152.151) (Ping timeout: 256 seconds)
[11:51:59] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[11:56:09] <comrad> i have a question about performance:
[11:56:35] <comrad> i tend to access a class property alot via a method like Connection.DeviceId() which is a std::string
[11:56:44] <comrad> i call this method like a dozen times
[11:57:09] <comrad> is it more effective to put the value into a local string and use that one or will the compile "cache" the value somehow?
[12:00:40] *** Joins: bobb_ (~bobb_@dslb-088-066-159-175.088.066.pools.vodafone-ip.de)
[12:01:28] <LordKalma> it's no 8:30 in the morning and I've already got an email inviting to review an article
[12:02:05] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[12:02:14] <LordKalma> comrad, I usually pull that stuff to a const auto id = Connection.DeviceId()
[12:02:20] <LordKalma> and then use it a lot
[12:02:30] <LordKalma> the compiler can't trim it out because the value might change
[12:02:36] <LordKalma> CONST helps with that
[12:02:37] <mitch0> comrad: if it is const std::string & DeviceId() const then it won't add any overhead. if it's std::string DeviceId() then it'll make a new copy every time (unless the compiler is extra smart)
[12:03:19] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 256 seconds)
[12:04:08] <LordKalma> yeah, that's why I usually put that on a const variable before the first use
[12:05:09] *** Joins: gggpkm__ (~gggpkm@123.113.191.141)
[12:05:24] <comrad> mitch0: you mean the function signature would be const std::string Connection::DeviceId() const?
[12:05:51] <computerquip> I'd probably question performance gains here in any case. Setup a benchmark if it really matters.
[12:05:58] <comrad> LordKalma: good point, thanks
[12:06:12] <LordKalma> computerquip, it's good semantics regardless
[12:06:26] <ville> mitch0: well... what is the "connection" thing to begin with. if that's reference to something the function received as an argument...
[12:06:29] <LordKalma> you make it clean you expect to use the same value
[12:06:45] <comrad> good intend is always a good measure
[12:06:50] <comrad> good code intend
[12:07:18] <ville> comrad: you can't optimize anything by asking irc. you optimize by implementing something. measuring its performance and then making changes directed by those measurements
[12:07:37] <comrad> ville: i ask to get a general understanding of it :)
[12:08:03] <ville> comrad: doesn't change the answer
[12:08:25] *** Quits: gggpkm_ (~gggpkm@60.10.194.43) (Ping timeout: 256 seconds)
[12:08:36] <LordKalma> ville is right, of course
[12:08:52] <ville> comrad: any possible code snippet you would show us on irc has so many unknowns for us that may or may not impact performance
[12:08:56] <comrad> the point was, that a function call is generally more expensive than using a value, so thats what the performance aspect would be
[12:09:21] <ville> comrad: it may or may not be. also it may or may not be in the noise of the whole system
[12:11:15] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[12:12:14] <ville> comrad: https://quuxplusone.github.io/blog/2021/11/09/pass-string-view-by-value/ may be a fun little article to demonstrate to you that you can't capture necessarily details in an out-of-context snippet
[12:12:36] <ville> if you look at the 3. elimate aliasing section for example
[12:12:55] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[12:14:16] <LordKalma> compilers are magic
[12:14:56] <computerquip> I dunno about that, they're just complicated. Things like cache locality can be tricky in general to get down but can have a huge impact.
[12:15:07] <computerquip> Regardless of how smart the compiler can be.
[12:15:08] <ville> comrad: but a reasonable answer is that a repeated member function is very unlikely to be _faster_ than function-local cached value
[12:15:44] <LordKalma> I'd still argue that caching a value in the function also makes for better semantics
[12:15:48] <comrad> ville: but it tends not to be a huge performance hog?
[12:16:04] <comrad> LordKalma: yeah, if that is the same and sure way to go i think i will prefer it that way
[12:16:20] <LordKalma> and it's a god practice because it gets you in the habit for when you're dealing with atomics and shared memory
[12:16:33] <ville> comrad: that's all relative what is "big" and what isn't. and that's why you need your system up so you can measure it
[12:16:47] <LordKalma> of course, with all the various asterisks my statement may have
[12:16:52] <LordKalma> C++ is made of nuance
[12:17:00] <LordKalma> comrad, well, another thing is rule 1
[12:17:02] <LordKalma> !rule 1
[12:17:03] <nolyc> Make things work. Profile. Make things fast. In this order.
[12:17:13] <comrad> ville: of course it is, but there may be some tendencies and in general things to avoid
[12:17:26] <LordKalma> 90% of the time you're micro optimizing things that aren't even on the hot path of your code
[12:17:28] <comrad> like passing by const reference is mostly a good thing to do
[12:18:05] <LordKalma> actually last couple months a lot of articles popped up about passing std::string by value :p
[12:18:25] <comrad> LordKalma: yeah i know that, this particular spot is in a high frequency point in the code
[12:18:42] <comrad> thats why i look into it on how to optimize it without destorying readability
[12:20:45] * computerquip likes aggregates and open-member varables for this reason.
[12:20:57] <ville> comrad: but does it show up in your profile timings in the top "10"?
[12:22:07] <johnny> nolyc, the way i heard it is.. make it work. make it right. make it fast
[12:22:09] <nolyc> johnny: Error: "the" is not a valid command.
[12:22:16] <johnny> oh.. lol
[12:22:18] <johnny> it's abot
[12:22:28] <johnny> so LordKalma .. that's the way i heard it :)
[12:24:57] <LordKalma> well, lots of people disagree with that, at various level of disagreement
[12:25:10] <LordKalma> some thing you shouldn't write junk code in the first place, so you don't write it twice
[12:25:14] <LordKalma> I kinda am on board with that
[12:25:33] <LordKalma> some reject completely that you don't write perfect code by the first time
[12:25:42] <LordKalma> which I think is too far
[12:25:54] <LordKalma> you should develop good API/boundary design on the first pass, imo
[12:25:59] <computerquip> Which is probably the mindset of most, especially in startups.
[12:26:03] <LordKalma> and then optimize each individual bit on the second pass
[12:26:38] <johnny> i think it depends on if you really know what you're building
[12:26:46] <johnny> you don't always know up front
[12:26:47] <LordKalma> sometimes you don't
[12:26:52] <comrad> i only optimize things that are slow
[12:26:55] <LordKalma> but you should do that on a paper and pen
[12:26:59] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[12:27:06] <comrad> thanks folks for all the insights
[12:27:20] <johnny> i don't think it means just jump right into coding without ANy thought whatsoever though.
[12:27:50] <LordKalma> Alan Talbot says that the most elegant code is the most efficient code "by definition"
[12:28:00] <LordKalma> not sure i agree completely, but I get where he's coming from
[12:28:03] <johnny> what sense does that make?
[12:28:18] <johnny> that makes no sense , especially in a language like C++ :(
[12:28:23] <LordKalma> of course that weird SIMD functions aren't "elegant"
[12:28:29] <computerquip> Depends on what aspect of efficient I guess.
[12:28:43] <LordKalma> but you totally feel when you look at clean code that it's just beautiful and runs like hell
[12:28:52] <LordKalma> spagetty trash won't be efficient
[12:29:57] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:68d8)
[12:30:11] <comrad> performant code is useless if you cannot read it anymore
[12:30:13] <johnny> the thing about making it beautiful and it running like hell, is that you can easily fix that, but you can't as easily go in reverse
[12:30:23] <LordKalma> https://www.youtube.com/watch?v=EovBkh9wDnM
[12:30:28] <LordKalma> watch the talk if you want :)
[12:30:34] <computerquip> Reminds me of the linker that dlang used to have.
[12:30:36] <LordKalma> it's actually a great talk and everything makes sense in his context
[12:30:39] <johnny> i think about this from dealing with rdbms and indexes
[12:30:45] <computerquip> Made in hand-written multi-threaded x86 assembly
[12:30:49] <AmR> I need big help with regex
[12:30:49] *** Joins: CaCode_ (~CaCode@user/cacode)
[12:30:50] <johnny> and designing your db with everything normalized to the third normal form
[12:31:04] <LordKalma> the story in the beginning is amazing
[12:31:06] <johnny> but it might actually perform terrible, so then you start actually duplicating data
[12:31:14] <LordKalma> AmR, https://regexr.com/
[12:31:40] <johnny> make sure to pick the the right vocabulary tho.. as in.. ecmascript if it's C++
[12:32:13] <LordKalma> ecmascript? JS?
[12:32:28] <AmR> I try to write that " (\\bbegin.transaction.*;|\\bcommit.*;|\\/\\*(.|\\r\\n|\\r|\\n)*?\\*\\/|^--.*\\n|\\t|\\r\\n|\\r|\\n) " and now I have " (/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*) ". I try mix that But I can't.
[12:33:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 250 seconds)
[12:34:02] *** Quits: chozorho (~chozorho@2601:146:300:c30::685f) (Ping timeout: 240 seconds)
[12:34:32] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[12:34:54] *** pah_ is now known as pa
[12:34:55] *** Quits: pa (~pah@host-80-183-67-81.business.telecomitalia.it) (Changing host)
[12:34:55] *** Joins: pa (~pah@user/pah)
[12:35:05] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[12:35:07] <johnny> are you sure you should regexxing that?
[12:35:18] *** Joins: chozorho (~chozorho@2601:146:300:c30::685f)
[12:35:21] <johnny> isn't there a sql parser you can use that actually uses the sql grammar?
[12:35:36] <johnny> i'd really recommend not regexxing it if you can avoid t
[12:36:33] <rouji> careful with those toothpicks
[12:36:39] <AmR> johnny: Can you tell me about good one ?
[12:37:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:37:41] <comrad> if you have 10 problems and try to solve it by regex, you then have 10 problems and a regex. ;)
[12:37:41] <LordKalma> https://i.gyazo.com/ddad7002524c5ae4453cf9154dcf59a5.png
[12:37:43] <LordKalma> it was this slide!
[12:38:02] <comrad> LordKalma: the type of regex is ecmascript, it has nothing to do with JS
[12:38:16] <LordKalma> ah you meant the type of regex
[12:38:17] <LordKalma> sorry
[12:38:33] <comrad> the dialect so to speak
[12:39:01] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[12:39:45] <LordKalma> I hate regex engines that don't have look-head and negative look ahead
[12:39:46] <LordKalma> it's so useful
[12:40:08] <LordKalma> SO useful it's part of my clang-format: https://github.com/ruilvo/aether_dsp/blob/master/.clang-format#L18
[12:40:54] *** Joins: bjs (sid190364@user/bjs)
[12:41:03] <johnny> AmR, i don't know what's good in C++ land. i have experience with this from totally different languages
[12:41:46] <johnny> a quick google showed me this, but i do'nt know if a) it's any good b) it fits your needs https://github.com/hyrise/sql-parser/blob/master/docs/basic-usage.md
[12:42:20] <johnny> it looks like it might, but you'd really have to read more than i'm gonna spend reading :)
[12:44:19] <LordKalma> a good way to search for c++ packaages is looking on conan and vcpkg indexes
[12:45:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[12:48:09] <johnny> i got lucky and didn't even have to do that. just a simple web search found that one
[12:49:53] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[12:50:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[12:57:09] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[12:57:47] <AmR> I will try to test it.
[12:58:22] <ville> LordKalma: using terms like "clean" and whatnot is just nonsense to begin with. there is no hard definition or nothing being measured
[12:58:40] <LordKalma> true
[12:59:15] <ville> LordKalma: these are terms snakeoil salesmen use to sell whatever garbage they are peddling
[12:59:35] <PJBoy> I have clean snakeoil if you want it
[13:01:25] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[13:01:26] <PJBoy> I think "clean" is approximately the opposite of "hacky"
[13:02:36] <cbreak> PJBoy: the real snake oil defends against smelly code and anti-patterns!
[13:02:46] <ville> just no. just don't give terms like that any room to exist
[13:03:32] <PJBoy> look, eventually consumers get bored of "clean" snakeoil
[13:03:44] <PJBoy> I need to peddle different varieties
[13:03:48] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:03:49] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[13:03:57] <PJBoy> keep things interesting
[13:04:07] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[13:06:52] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[13:07:14] *** Joins: gggpkm_ (~gggpkm@123.113.177.194)
[13:08:34] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:09:31] *** Joins: gggpkm (~gggpkm@123.113.186.135)
[13:10:24] *** Quits: gggpkm (~gggpkm@123.113.186.135) (Remote host closed the connection)
[13:10:32] *** Quits: gggpkm__ (~gggpkm@123.113.191.141) (Ping timeout: 246 seconds)
[13:10:56] *** Joins: gggpkm (~gggpkm@123.113.186.135)
[13:11:25] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:05] *** Quits: gggpkm_ (~gggpkm@123.113.177.194) (Ping timeout: 264 seconds)
[13:14:54] <LordKalma> The "correct" code changes every two years anyway
[13:15:02] <LordKalma> remember data-driven design?
[13:15:06] <LordKalma> that came as fast as it went
[13:15:17] <LordKalma> turns out people like their objects and not arrays of properties
[13:15:57] <cbreak> LordKalma: depends
[13:16:05] <cbreak> I still do a lot of data driven design in ML
[13:16:51] <cbreak> image processing, video processing, all kinds of bulk data processing is data oriented
[13:18:46] <Haohmaru> i do unplanned design
[13:19:04] <Haohmaru> or maybe it's spontaneous design
[13:19:17] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 264 seconds)
[13:20:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[13:20:33] <cbreak> a.k.a. test-driven-design or user-request-driven-design :/
[13:21:21] <Haohmaru> "it-compiles-driven-design"
[13:22:16] <Haohmaru> on 8bit MCUs you can't just splosh $whatever, you better mind your data usage
[13:22:49] <johnny> LordKalma, it's like functional programing though.. some stuff just takes awhile to take hold.. even after the initial fad dies
[13:22:54] <johnny> or initial hype does raher
[13:23:31] <johnny> sometimes programmers just aren't ready yet.. including me.. to go whole hog
[13:23:41] <LordKalma>  the proble, with everything
[13:23:51] <LordKalma> is when the "gods" bring a new hammer, EVERYTHING ought to be nails
[13:23:54] <johnny> so instead, we slowly get there, by including functional techniques in other languages, so people getused to it
[13:24:01] <LordKalma> like, OF COURSE DDD has its place
[13:24:06] <LordKalma> but its place is NOT all places
[13:24:33] <johnny> well that's just lik the whole thing where you kubernetes and container orchestration gets used by tons of people who DO NOT NEED IT
[13:24:37] <johnny> it's all about scale and context
[13:24:45] <johnny> and microservices in general
[13:26:48] *** Joins: karliss (~karliss@78.84.128.185)
[13:27:20] <LordKalma> I like containers because I can mess with shit on my VPS withotu breaking it :D
[13:32:04] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[13:33:56] <johnny> well that's certainly a good usage of containers
[13:35:09] <LordKalma> https://github.com/ruilvo/radioamadorismo-website writing a website with django+react+postgres+docker :)
[13:35:09] <cbreak> I use them to build crap on legacy centos7 while being able to work on normal ubuntu
[13:35:27] <PJBoy> woah cmake has a `foreach`
[13:35:28] <cbreak> I write websites with html.
[13:35:40] <LordKalma> that's so 1999
[13:35:46] <LordKalma> PJBoy, sure it does
[13:35:49] <cbreak> PJBoy: cmake has all kinds of weirdly semanticed text processing thingies
[13:35:50] <LordKalma> with several pitfals
[13:35:58] <PJBoy> any notable ones?
[13:36:05] <LordKalma> yes, give me a sec
[13:36:17] <LordKalma> https://github.com/FFTW/fftw3/commit/d738232235af6c96bc4a28b07fc867c000696245
[13:36:19] <LordKalma> this one
[13:36:34] <LordKalma> https://github.com/FFTW/fftw3/pull/232
[13:36:52] <PJBoy> > one needs to delete the loop variable both in cache and locally for it to work
[13:36:53] <PJBoy> hmmm
[13:37:10] <LordKalma> yeah
[13:37:14] <LordKalma> thing is, I don0't know why
[13:37:17] <TinoDidriksen> One should use a loop variable that won't be cached...
[13:37:24] <LordKalma> yeah
[13:37:28] <LordKalma> it's a bug THEY introduced
[13:37:32] <LordKalma> and I just hotfixed
[13:37:39] <PJBoy> I wish those diffs provided more lines of context
[13:37:44] <cbreak> why would a loop variable be cached anyway? :(
[13:37:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:01] *** ChanServ sets mode: +v npaperbot
[13:38:29] <TinoDidriksen> Variables are cached per their name ALL_UPPER is cached. Starting with _ or lower-case won't be.
[13:38:55] <PJBoy> I don't understand these foreach
[13:39:07] <TinoDidriksen> PJBoy, https://github.com/GrammarSoft/cg3/blob/main/CMakeLists.txt#L81 then.
[13:39:31] <LordKalma> yeah, in regular usage it's fine
[13:39:32] <PJBoy> HAVE_SSE for example isn't a loop variable
[13:39:35] <LordKalma> TinoDidriksen, I didn't know that
[13:39:36] <PJBoy> as far as I can tell
[13:39:48] <LordKalma> variables are cached if uppercase? never read about that
[13:39:58] <LordKalma> the loop variable is FLAG
[13:39:59] <PJBoy> are the `IN LISTS` tokens completely unnecessary then?
[13:40:01] <PJBoy> interesting
[13:40:32] <PJBoy> thanks Tino :)
[13:40:44] <LordKalma> TinoDidriksen, I don't think that's true
[13:41:02] <cbreak> I think variables you set via CACHE are cached
[13:41:08] <cbreak> as well as option() variables
[13:41:17] <LordKalma> yes
[13:41:19] <LordKalma> only thsoe, afaik
[13:41:25] *** Quits: gggpkm (~gggpkm@123.113.186.135) (Remote host closed the connection)
[13:41:35] <LordKalma> the problem is this
[13:41:35] <LordKalma> https://cmake.org/cmake/help/latest/module/CheckCCompilerFlag.html
[13:41:38] <LordKalma>  Stores the result in an internal cache entry named <var>.
[13:42:05] <cbreak> I have a bunch of variables like pybind11_INCLUDE_DIRS:INTERNAL=/usr/include;/usr/include/python3.9 in my cache files
[13:42:08] <TinoDidriksen> Ah, right. That's what I worked around.
[13:42:09] <LordKalma> so apparently unset (HAVE_SSE CACHE) would be enough, but I don't remember why I had to remove the regular one too
[13:42:11] *** Joins: pah (~pah@user/pah)
[13:42:18] *** Joins: gggpkm (~gggpkm@60.10.194.43)
[13:42:42] *** Quits: pa (~pah@user/pah) (Ping timeout: 260 seconds)
[13:42:54] *** Quits: gggpkm (~gggpkm@60.10.194.43) (Remote host closed the connection)
[13:42:59] <TinoDidriksen> I have CHECK_CXX_COMPILER_FLAG write into a unique variable per tested flag, which eliminates var reuse.
[13:43:07] <LordKalma> " If CACHE is present then the variable is removed from the cache instead of the current scope."
[13:43:12] <LordKalma> I think this may be the problem
[13:43:15] <LordKalma> (that's for UNSET)
[13:43:16] <PJBoy> what's the problem with that check_c_compiler_flag thing?
[13:43:22] <LordKalma> no "problem"
[13:43:28] <LordKalma> check_c_compiler_flag writes CACHE variables
[13:43:29] <PJBoy> it stores the result to a cache var
[13:43:31] <PJBoy> right
[13:43:36] <LordKalma> which used at the same time as a local variable on a loop
[13:43:42] <LordKalma> caused havoc it seems
[13:43:49] <LordKalma> beucause of
[13:43:53] <LordKalma> https://cmake.org/cmake/help/latest/command/unset.html
[13:44:15] <cbreak> chose better local variable names then :)
[13:44:26] <cbreak> cmake doesn't have namespaces, or scoping, so...
[13:44:35] <cbreak> (well, not much scoping at least)
[13:44:36] <TinoDidriksen> Do what I did. Works much better. No need to unset anything.
[13:44:42] <LordKalma> yes
[13:44:57] <PJBoy> concatenation with the flag name
[13:45:00] <LordKalma> I always use the RESULT_${test_var} syntax
[13:45:07] <PJBoy> where the flag name is normalised to be identifier compatible
[13:45:22] <LordKalma> but as you can expect, I wasn't going to re-write FFTWs cmake
[13:45:22] <PJBoy> it works, but I hate it
[13:45:26] <LordKalma> which they seem to not use anyway
[13:45:35] <LordKalma> they use autotools, looking at their git log
[13:45:47] <LordKalma> I had to fix it because conan would take my patch if I PRed it upstream too
[13:45:50] <LordKalma> which is fair
[13:46:44] <PJBoy> so you're leaving those C compiler flag results in cache, right?
[13:47:01] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[13:47:04] *** Joins: pah_ (~pah@host-95-248-162-59.retail.telecomitalia.it)
[13:47:06] <LordKalma> yes, and you should
[13:47:19] <LordKalma> the CACHE in cmake actually does something most people do not take advantage of
[13:47:33] <LordKalma> CMakeCache.txt is actually someyhing you're encouraged to edit
[13:47:39] <LordKalma> to change options after generating
[13:47:52] <PJBoy> would you ever want to edit those flags though
[13:48:12] <PJBoy> or would it just be noise in the list of cache variables
[13:48:21] <LordKalma> to affect your build
[13:48:29] <LordKalma> CMakeCache.txt does actually affect your build
[13:48:38] <PJBoy> yeah I know what you're saying
[13:48:56] <PJBoy> they're called cache variables, but they're really just persistent editable variables
[13:49:06] <PJBoy> with gui support :D
[13:49:12] <LordKalma> yeah
[13:49:35] <LordKalma> for example, you can have "option(BUILD_EXTRAS OFF)"
[13:49:37] <LordKalma> and you configure cmake
[13:49:40] <LordKalma> then set it on
[13:49:41] <PJBoy> but for this specific instance
[13:49:41] <LordKalma> and reconfigure
[13:49:49] <PJBoy> would you want to cache those compiler support flags?
[13:49:49] <LordKalma> QtCreator is aactually great with that
[13:50:29] <PJBoy> seems a little odd to me that check_c_compiler_flag goes straight into cache
[13:50:32] <LordKalma> well, i guess the argment could be you could try to build witthout them with the flick of a button
[13:51:08] <PJBoy> you end up running this foreach loop anyway though right?
[13:51:17] <PJBoy> cmake won't know that the compiler hasn't changed
[13:51:25] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[13:51:39] <LordKalma> consecutive runs of cmake don't do checks
[13:51:54] <LordKalma> the consecutive runs will make check_c_compiler_flag a no op
[13:51:59] <LordKalma> if the cache variable is already set
[13:52:00] <LordKalma> (probably)
[13:52:02] <PJBoy> ok so it actually is using the cache as a cache here
[13:52:09] <LordKalma> I'd guess that yeah
[13:52:38] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[13:52:38] <PJBoy> ok cool
[13:52:47] <PJBoy> so what did we learn about unsetting loop variables
[13:53:03] <PJBoy> it still seems to me that HAVE_SSE wasn't a loop variable
[13:53:08] <PJBoy> FLAG is the loop variable, right?
[13:53:12] <LordKalma> right
[13:53:24] <LordKalma> so the bug was some funky stuff about reusing cache variables where you shouldn't
[13:53:43] <LordKalma> https://i.gyazo.com/256a23a813a9cf272f0fa25f263f4715.mp4 // Using Cache variables in Qt creator, this case an option() I created
[13:54:23] <LordKalma> if you notice in the right
[13:54:40] <LordKalma> it first says "checking for working CXX compiler"
[13:54:47] <LordKalma> but when i "apply changes" it didn't do that
[13:56:49] <PJBoy> oh ok
[13:57:12] <PJBoy> so is it a case of check_c_compiler_flag doing nothing because HAVE_SSE is set in cache
[13:57:26] <PJBoy> and so HAVE_SSE in the if statement is always empty, because it's a local
[13:57:32] <PJBoy> so SSE_FLAG never gets set?
[13:57:35] <PJBoy> (etc)
[13:58:31] <LordKalma> what was happening was actually different
[13:58:39] <LordKalma> it just tested the first flaag
[13:58:45] <LordKalma> so the gcc version of the flag
[13:58:55] <LordKalma> never tested the msvc flag
[13:59:31] <LordKalma> meaning that check_c_compiler_flag was seeing a flag ...
[13:59:37] <LordKalma> so idk
[13:59:51] <LordKalma> lemme ask in the slack if they know why the bug happens
[14:00:14] <PJBoy> still sounds like HAVE_SSE was set in cache
[14:00:20] <PJBoy> I guess by the first iteration of the foreach
[14:00:29] <PJBoy> so the second iteration's check_c_compiler_flag NOP'd
[14:00:55] <PJBoy> Tino's solution is starting to look pretty good
[14:01:55] *** Joins: CaCode- (~CaCode@user/cacode)
[14:04:18] <LordKalma> what I do is change the logic
[14:04:21] <LordKalma> I do
[14:04:35] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 256 seconds)
[14:05:01] <LordKalma> if(MSVC) set(SSE_TEST_FLAG "/arch:SSE") else() set(SSE_TEST_FLAG "-msse") end() check_c_compiler_flag (${SSE_TEST_FLAG} HAVE_SSE)
[14:05:13] <LordKalma> endif() but sure
[14:05:44] <PJBoy> can that be moved into a function?
[14:05:47] <PJBoy> I forget if cmake has those
[14:05:50] <LordKalma> tyou can put all set(<ARCH>_TEST_FLAG ...) inside the same if
[14:05:55] <LordKalma> cmake has both functions AND macros
[14:06:15] <PJBoy> well that's what I'm used to I suppose :)
[14:06:30] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[14:07:57] *** Joins: pah (~pah@user/pah)
[14:07:59] *** Quits: pah_ (~pah@host-95-248-162-59.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[14:10:33] <LordKalma> https://gist.github.com/ruilvo/ff1fc425fa2164aba31c130ee71140e5
[14:10:34] <LordKalma> this
[14:11:01] *** Joins: ambasta (~ambasta@89.46.62.147)
[14:11:19] *** Joins: CaCode_ (~CaCode@user/cacode)
[14:12:37] <ambasta> Is there a more efficient way to perform value |= (x << (8 - y)) >> (5 + z)
[14:12:57] <LordKalma> if there is your compiler will do it for you
[14:12:59] <PJBoy> that honestly seems fine
[14:13:12] <ambasta> Aight, thanks!
[14:14:03] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[14:14:11] <PJBoy> assuming any truncation there is intentional
[14:14:17] *** Quits: CaCode- (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[14:14:21] <ambasta> Yep
[14:14:34] <ambasta> All variables are uint8_t
[14:14:54] <LordKalma> https://godbolt.org/z/xjxzTq5WE
[14:14:58] <LordKalma> looks pretty good actually
[14:15:02] <PJBoy> oh be careful about y = 0 then
[14:15:06] *** Quits: pah (~pah@user/pah) (Ping timeout: 245 seconds)
[14:15:11] <PJBoy> it's actually UB to shift a 8-bit type by 8
[14:15:13] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[14:15:23] <onizu> hi, I have an std::map like this: https://paste.gg/p/anonymous/0abc8451f4084e49b9786ec233e74ba9  ... but when I try to get mapQtyTypeName[QtyType::Area]  , I get only "Area ()" , the function GetCalcUnitStr_Area() doesn't populate.. But when I call that func elsewhere, I get the value. Why is it not returning the value in the std::map()?
[14:15:44] <LordKalma> with uint https://godbolt.org/z/WbTa5odhT
[14:15:59] *** Joins: pah (~pah@user/pah)
[14:16:30] <PJBoy> looks even better if you don't need to assign back to x
[14:16:32] <ambasta> PJBoy, z is guaranteed to be < 3
[14:16:46] <PJBoy> that's good
[14:16:54] <PJBoy> what about y > 0?
[14:17:35] <PJBoy> how much do you wanna bet that clang adds a hundred vector instructions?
[14:17:39] <ambasta> uint8_t, so 8<=y<0
[14:17:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 246 seconds)
[14:17:53] <LordKalma> no
[14:18:03] <LordKalma> 8<y<=0
[14:18:04] <LordKalma> ;)
[14:18:14] <ambasta> Heh
[14:18:28] <LordKalma> anyway, since you're shifting left and then right
[14:18:32] <ambasta> I mean y is guaranteed to be <= 8 and > 0
[14:18:36] <LordKalma> perhaps it would be ideal to join the operands
[14:18:39] <LordKalma> ah ok, cool
[14:18:43] <PJBoy> bah clang has good codegen
[14:19:05] <PJBoy> I dare say it's better than GCC's
[14:19:07] <LordKalma> 10 lines, not bad
[14:19:26] <LordKalma> clang's codegen is literally the expression
[14:19:29] *** Stryykert is now known as Stryyker
[14:19:31] <LordKalma> load 8, substract y
[14:19:38] <PJBoy> 7 lines in this version https://godbolt.org/z/zGrWKEMP4
[14:19:42] <ambasta> LordKalma, wdym by joining operands?
[14:19:49] <LordKalma> shift, load 5, add z,e tc
[14:19:50] <TinoDidriksen> Different codegen, but not measurably better last anyone checked. Sometimes better, sometimes worse, comes out about even.
[14:19:53] <LordKalma> it's literally the expression
[14:20:15] <PJBoy> clang's using smaller registers
[14:20:32] *** Quits: pah (~pah@user/pah) (Ping timeout: 240 seconds)
[14:20:35] <PJBoy> which I imagine ends up performing marginally better
[14:20:50] <LordKalma> tino's point is that it averages to be about the same
[14:20:50] *** Joins: pah_ (~pah@host-87-7-10-38.retail.telecomitalia.it)
[14:21:16] <PJBoy> well intel have taken a liking to clang for their ICC
[14:21:27] <PJBoy> I think that's a good sign
[14:21:48] <PJBoy> not that I would ever dream of appealing to authority
[14:22:05] <LordKalma> https://godbolt.org/z/Gs4Pjjc18
[14:22:13] <TinoDidriksen> I expect that's more due to the license. It's open source they can build on without virality.
[14:22:27] <PJBoy> that's a good point actually
[14:23:08] <PJBoy> I wish godbolt still worked on my firefox :(
[14:23:26] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:23:32] <LordKalma> it works on my firefox?!
[14:23:39] <PJBoy> I'm on ancient firefox
[14:23:41] <LordKalma> which is up to date
[14:23:41] <LordKalma> ah
[14:24:02] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[14:24:04] <PJBoy> at some point this year, it lost the ability to use the compiler selection dropdown menu
[14:25:08] <TinoDidriksen> Even more ancient than ESR? I stick with ESR and that was recently updated to v91, which took some userChrome.css changes to feel usable.
[14:25:22] <PJBoy> I'm on 56.0.2
[14:25:36] <PJBoy> the latest version before the extension system got revamped
[14:25:54] <PJBoy> basically the modern day equivalent to IE6
[14:26:24] <TinoDidriksen> Sounds like you should switch to https://palemoon.org/
[14:26:51] <PJBoy> this is the first I'm hearing of this
[14:27:06] <PJBoy> I'm gonna try it immediately
[14:27:40] <TinoDidriksen> It's that old codebase, but more maintained.
[14:29:24] <anyone> yeah godbolt since a while has had problems with ff78
[14:30:02] <anyone> . . . can I interest you [insert meme image here] in a  locally-running compiler & disassembler?
[14:30:33] <PJBoy> they have a fork of chatzilla too
[14:30:35] <PJBoy> this is great
[14:30:48] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[14:30:53] <PJBoy> github doesn't work on pale moon though haha
[14:31:16] <PJBoy> but godbolt does
[14:31:53] <TinoDidriksen> Weird that something would break in Pale Moon if it worked in FF56.
[14:32:04] <PJBoy> github is also broken in FF56
[14:32:08] <TinoDidriksen> Ah
[14:32:16] <anyone> stupid javascript dependency :(
[14:32:31] * LordKalma hides
[14:32:32] <PJBoy> so so far it's objectively better than my FF56
[14:32:55] <LordKalma> I have FF94
[14:32:55] <PJBoy> and it means I can update firefox
[14:32:57] <LordKalma> what's wrong with it?
[14:33:20] <LordKalma> we'll all be using chrome next year :D
[14:33:25] <PJBoy> http://chatzilla.hacksrus.com/ ;)
[14:33:26] <LordKalma> and not only on vscode haha
[14:33:33] <PJBoy> > With the release of Firefox 57 (Firefox Quantum), it is no longer possible for ChatZilla to work as an extension in Firefox
[14:33:44] <PJBoy> and that was the last time I ever updated firefox
[14:33:57] <LordKalma> yeah the limitations of web extensions are... oh well
[14:34:00] <cbreak> I recommend updating firefox
[14:34:00] <ambasta> If I want to loop n times, but don't need a variable in the loop block, should I be using [[maybe_unused]] i.e. for ([[maybe_unused]]auto idx: iota(0, n)) { ... }
[14:34:10] <cbreak> you will get a lot of security fixes
[14:34:10] <johnny> i wouldn't trust palemoon myself
[14:34:23] <PJBoy> my firefox doesn't need security
[14:34:30] <cbreak> ambasta: why bother?
[14:34:34] <PJBoy> I only click the links that people post in IRC
[14:34:45] <PJBoy> which is basically just documentation and paste sites
[14:34:46] <anyone> ambasta: for (size_t idx = 0; idx < n; ++n) { ...? }
[14:35:18] <LordKalma> no
[14:35:19] <anyone> well that went wrong. anyway, you still get a local variable, but I guess we did fine in the past 30 years.
[14:35:26] <LordKalma> the compiler will see that you don't need it
[14:35:27] <TinoDidriksen> Using range-for simply for repetition is definitely weird. Just use a normal for loop.
[14:35:29] <cbreak> PJBoy: http://malware.download.ru ? :D
[14:35:41] <ambasta> cbreak, Just read the docs.. it seems its only for compiler warnings
[14:35:45] <PJBoy> nah that's not https, I better avoid it :p
[14:35:55] <LordKalma> https://downloadmoreram.com/
[14:35:56] <cbreak> ambasta: yes.
[14:39:24] <PJBoy> { ranges::for_each(views::iota(0, 4), [](auto) { cout << '.'; }); }
[14:39:24] <geordi> ....
[14:39:38] <PJBoy> there's your no-named-loop-variable loop
[14:39:47] <TinoDidriksen> ...but why.
[14:40:02] <PJBoy> to make it abundantly clear that there's no loop variable required for the logic of the loop
[14:40:14] <PJBoy> but mostly for shits and giggles
[14:41:27] <PJBoy> is single underscore a reserved identifier?
[14:41:27] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[14:41:34] <LordKalma> I wonder the codegen on that crap
[14:41:50] <LordKalma> everybody knows _ means "discarded variable"
[14:41:53] <PJBoy> I know it has involvement with gettext and potentially pattern matching
[14:41:55] <LordKalma> or translation function
[14:42:03] <LordKalma> I HATE IT when they use _() for the translation function
[14:42:06] <PJBoy> ikr
[14:42:21] <PJBoy> such a waste of a token
[14:43:06] <PJBoy> (though I've never actually seen it in practice)
[14:43:12] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[14:43:21] <cbreak> the translate function uses tr()
[14:43:27] <cbreak> (in qt)
[14:43:44] <PJBoy> what if you wanted to do matrix transpose? :/
[14:44:01] <LordKalma> cbreak, actually Qt has 3 of them iirc
[14:44:17] <PJBoy> or define an HTML table row
[14:44:49] <cbreak> PJBoy: it's overloadable
[14:44:59] <cbreak> and since it's a member function, also easily hidable
[14:45:35] <PJBoy> :)
[14:45:39] <PJBoy> this is why we use C++
[14:45:41] *** Quits: pah_ (~pah@host-87-7-10-38.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[14:45:48] <PJBoy> imagine using a language that didn't have overloading
[14:45:53] <LordKalma> it's available as both
[14:46:03] <LordKalma> (free function and memeber)
[14:46:15] * PJBoy glares at python
[14:46:35] <LordKalma> python has monkey patching
[14:46:37] <LordKalma> kmuch better
[14:46:46] <LordKalma> hahahaha
[14:46:49] <LordKalma>  /s
[14:47:45] <PJBoy> monkey patching is just mocking interfaces right?
[14:48:04] <PJBoy> that thing that my workplace loves to do for unit tests
[14:48:13] <LordKalma> it's when you def print() over python's print
[14:48:41] <LordKalma> https://stackoverflow.com/questions/5626193/what-is-monkey-patching
[14:48:44] <PJBoy> I'll take that as a yes
[14:48:47] <PJBoy> yeah I was reading that
[14:49:09] <LordKalma> SomeClass.speak = speak is a classic
[14:49:12] <PJBoy> tldr it's a stubbing method
[14:49:19] <LordKalma> once I did soemthing like that
[14:49:32] <LordKalma> I had TQDM to get a TUI progress bar
[14:49:41] <LordKalma> but I had crap with print statements running that ruined the thing
[14:49:49] <LordKalma> I monkeypatched print inside a context manager
[14:49:59] <LordKalma> to divert to tqdm's own tqdm-safe print
[14:50:11] <LordKalma> anad then restore state when the context manager exited
[14:50:26] *** Joins: pah_ (~pah@host-79-16-195-87.retail.telecomitalia.it)
[14:50:30] <PJBoy> oh python
[14:50:33] <anyone> well _ is used as a macro, not as a (post-processing) identifier
[14:50:39] <PJBoy> when will people stop hacking you
[14:51:02] <LordKalma> python gets what it deserves
[14:51:08] <anyone> Also, since _ has been in (ab)use for so long and there appear to be relatively few problems with it, from where I stand
[14:51:17] <anyone> , it can't be all that bad.
[14:51:34] <LordKalma> _ is so universal that pylint doesn't complain about unused if you call something _
[14:51:50] <PJBoy> in python underscore is super idiomatic
[14:52:00] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[14:52:04] <PJBoy> it might even have some semantics
[14:52:20] <LordKalma> relevant, _ = (a,b,c,d,e)
[14:52:24] <LordKalma> oh I mean
[14:52:28] <PJBoy> yeah it does have semantics
[14:52:28] <LordKalma> relevant, *_ = (a,b,c,d,e)
[14:52:37] <PJBoy> because _ is the last calculation result in the REPL
[14:52:49] <cbreak> that probably also works with *XXX
[14:52:56] <LordKalma> of course it does
[14:53:02] <PJBoy> for the purpose of an unnamed variable in C++, I'd go with whatever pattern matching tells me to go for
[14:53:03] <LordKalma> but with *_ pylint doesn't give a fuck
[14:53:10] <LordKalma> it KNOWS you want do discard that crap
[14:53:16] <LordKalma> *to
[14:53:41] <onizu> hi, I have an std::map like this: https://paste.gg/p/anonymous/0abc8451f4084e49b9786ec233e74ba9  ... but when I try to get mapQtyTypeName[QtyType::Area]  , I get only "Area ()" , the function GetCalcUnitStr_Area() doesn't populate.. But when I call that func elsewhere, I get the value. Why is it not returning the value in the std::map()?
[14:54:05] <PJBoy> relevant https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
[14:54:19] <LordKalma> PJBoy, have you seen the code of my django/react/pgsql/docker project?
[14:54:38] <PJBoy> please no
[14:54:40] <LordKalma> onizu, 404 on that paste
[14:54:53] <LordKalma> PJBoy, https://github.com/ruilvo/radioamadorismo-website
[14:55:38] <onizu> sorry, plz see this: https://paste.gg/p/anonymous/c88d98a4b39846dbbad4aec8d3363072
[14:55:56] <LordKalma> PJBoy, https://github.com/ruilvo/radioamadorismo-website/blob/master/backend/repeaters/models.py this is where the fun is at
[14:56:00] <PJBoy> I'll never forgive python for `if __name__ == "__main__":`
[14:56:06] <onizu> @LordKalma
[14:57:48] <LordKalma> what's the return type of Helpers::GetCalcUnitStr_Area() ?
[14:57:51] <PJBoy> so you're saying `Helpers::GetCalcUnitStr_Area()` doesn't work
[14:57:53] <onizu> does an std::map() get set once it's called and doesn't reload it's members later when we try to access it?
[14:58:25] <ville> onizu: doesn't parse
[14:58:29] <onizu> PJBoy: that works when I check it independently, but doesn't in std::map
[14:58:51] <onizu> LordKalma: it's GS::UniString
[14:58:59] <PJBoy> so it only doesn't work when you call it that first time
[14:59:16] <LordKalma> And does that type have overloads with + for char literals?
[14:59:18] <PJBoy> I'd be inclined to put a breakpoint inside that function
[14:59:25] <onizu> it works always when called not-within-the-map
[14:59:26] <PJBoy> *string literals
[14:59:35] <LordKalma> They said it works elsewhere
[14:59:41] <PJBoy> I know
[14:59:42] <LordKalma> I think it's a problem with the composition
[14:59:45] <PJBoy> all the more reason to add the breakpoint
[14:59:56] <onizu> I did use the debugger, but this library doesn't show values.. just memory addresses and ascii codes
[15:00:02] <PJBoy> if I had to guess, I'd say this is being done during program startup
[15:00:10] <PJBoy> and Helpers::GetCalcUnitStr_Area probably depends on some globals or something
[15:01:56] <onizu> PJBoy: but this map is called only later . but I'm not sure if it gets called when its header is included and at that time the function doesn't return the string... and later when I access the map, I think it does not call that function again and just uses the previously set value
[15:02:21] <PJBoy> the function will be called when the map is constructed
[15:02:43] <PJBoy> and it looks like a namespace scope variable, meaning on startup
[15:02:44] <onizu> does an std::map() not call any function that is set as its member, when the map is accessed later?
[15:02:50] <onizu> ok
[15:03:40] <onizu> so it's not a good idea to include functions in a map's members
[15:04:05] <LordKalma> I would recomend it haha
[15:04:07] <PJBoy> { map<int, string> m{{0, get_string_0()}, {1, get_string_1()}}; } string get_string_0() { BARK; return "00"; } string get_string_1() { BARK; return "01"; }
[15:04:08] <geordi> get_string_0() get_string_1()
[15:04:17] <PJBoy> no need to access the map to get those functions called
[15:04:18] <LordKalma> wouldn't
[15:04:31] <PJBoy> they're called in order to initialise the map in the first place
[15:05:55] * PJBoy is setting up VS code + clangd now
[15:06:17] <LordKalma> PJBoy, don't install the official c++ extension then
[15:06:26] <PJBoy> oh ok
[15:06:44] <PJBoy> do I want anything other than clangd?
[15:06:55] <LordKalma> perhps soem cmake stuff?
[15:06:57] <LordKalma> https://github.com/ruilvo/aether_dsp/blob/master/CMakeLists.txt#L51
[15:07:03] <LordKalma> btw I use this to help me in my projects
[15:07:08] <LordKalma> want a dump of my setup?
[15:07:18] <PJBoy> absolutely
[15:08:23] <PJBoy> is that copying of the compile commands really needed?
[15:08:34] <PJBoy> can't I just point clangd / VS code to the right place?
[15:08:38] <onizu> LordKalma: k
[15:08:44] <LordKalma> perhaps you can, don't remember
[15:08:47] <LordKalma> https://gist.github.com/ruilvo/b7b9ba4dc04ecdd27b66235d3071ab58
[15:08:53] <LordKalma> extensions and my settings.json
[15:09:10] <PJBoy> cheers
[15:09:19] <PJBoy> you know
[15:09:24] <PJBoy> > James-Yu.latex-workshop
[15:09:37] *** Quits: karliss (~karliss@78.84.128.185) (Quit: Leaving)
[15:09:39] <PJBoy> sometimes I feel the inexplicable need to clear my browser history after a day of development
[15:09:42] <LordKalma> what about it?
[15:09:54] <PJBoy> latex workshop sounds like a fetish scene
[15:10:27] <PJBoy> are you using VS code on windows?
[15:10:41] <onizu> I am
[15:10:43] <LordKalma> Yes
[15:10:48] <PJBoy> I'm using it on linux if that makes any difference
[15:11:05] <LordKalma> Not really
[15:11:16] <onizu> that github link had "open in vscode" and then there was an option to open vscode in the browser.. cool
[15:11:18] <LordKalma> Just don't copy my paths and shell settings haha
[15:11:33] <PJBoy> ofc
[15:11:36] <LordKalma> onizu: yoi can open ANY repo on vscode
[15:11:43] <LordKalma> Press the . Key
[15:11:55] <onizu> on the github page?
[15:11:59] <LordKalma> Yes
[15:12:15] <onizu> wow
[15:12:20] <onizu> nice
[15:12:35] <LordKalma> Great for searching files
[15:12:52] <onizu> what about saving edits?
[15:13:00] <LordKalma> Never tried it
[15:13:02] *** Quits: pah_ (~pah@host-79-16-195-87.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[15:13:17] <LordKalma> I guess if you commit them?
[15:13:28] <onizu> yea, it marked the files as 'modified'
[15:13:46] <PJBoy> how am I expected to choose between GCC and clang when using cmake?
[15:13:59] <LordKalma> Using the cmake extension?
[15:14:06] <PJBoy> I mean in say
[15:14:06] <LordKalma> There's a think to select the kit
[15:14:08] <PJBoy> the terminal
[15:14:12] <PJBoy> VS code aside
[15:14:12] <LordKalma> Ah
[15:14:39] <LordKalma> the good way is with a cmake toolchain file
[15:14:47] <LordKalma> setting CC and CCX works, but use a toolchain file
[15:14:49] <onizu> there was some option in Ctrl+Shift+P
[15:15:23] <LordKalma> onizu, "<PJBoy> VS code aside"
[15:15:36] <onizu> ok
[15:15:49] <PJBoy> looking at the docs
[15:16:14] *** Joins: pah (~pah@user/pah)
[15:16:14] <LordKalma> PJBoy, in the msot simple file, you set CMAKE_CXX_COMPILER CMAKE_C_COMPILER
[15:16:41] <LordKalma> https://stackoverflow.com/questions/54539682/how-to-set-up-cmake-to-cross-compile-with-clang-for-arm-embedded-on-windows
[15:16:44] <LordKalma> something like this
[15:16:52] <LordKalma> but setting CC and CCX env also works
[15:17:33] <PJBoy> you know
[15:17:40] <PJBoy> that question doesn't give me much optimism haha
[15:18:04] <LordKalma> How do you set the tollchain with makefiles?
[15:18:10] <LordKalma> You set the environment variables
[15:18:14] <LordKalma> You can do that with cmake
[15:18:18] <LordKalma> Or use tollchain files
[15:18:30] <LordKalma> The cmake extension for vscode from Microsoft helps with that
[15:18:45] <PJBoy> ah maybe I'll grab that
[15:19:04] <LordKalma> I think it's on my list
[15:19:18] <LordKalma> I don't use it much because I prefer doing it on qt creator
[15:19:32] <LordKalma> The twxs one is syntax highlighting
[15:19:35] <onizu> you can set toolchain in settings.json in .vscode
[15:19:39] <LordKalma> The Microsoft one is the tooling
[15:19:54] <LordKalma> onizu: the extension features are great for just changing compiler
[15:19:59] <LordKalma> Even has auto detection
[15:20:23] <PJBoy> I'm not doing cross compiling, so this seems a bit over the top
[15:20:30] <PJBoy> the SO answer that is
[15:20:40] <onizu> { "cmake.configureSettings" : { "-DCMAKE_TOOLCHAIN_FILE": "path/to/vcpkg.cmake" } for example
[15:20:40] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[15:21:06] <onizu> LordKalma: yea, I use the select-kit option
[15:21:08] <PJBoy> alright I'm gonna put a pin in that one
[15:22:10] <onizu> LordKalma: yes, it detected the visual studio compilers installed
[15:23:16] <PJBoy> ugh
[15:24:17] <LordKalma> You should stream yourself on twitch trying to setup this stuff so people scream you divergent things
[15:24:54] <PJBoy> I think VMware removed the ability to share the clipboard
[15:25:29] <PJBoy> I wish I could
[15:25:32] <PJBoy> but this is work shit
[15:26:23] <onizu> virtualbox?
[15:26:39] <PJBoy> we have inexplicable issues with virtualbox
[15:27:03] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:28:37] <LordKalma> You need a package installed for clipboard and easy mouse ad keyboard sharing
[15:28:45] <LordKalma> It's installable in the menu
[15:28:55] <LordKalma> Also, do you have ssh to hat machine?
[15:29:00] <PJBoy> yeah
[15:29:07] <LordKalma> Just use vscode on your physical and use the ssh to server into the vm
[15:29:15] <LordKalma> Much better experience
[15:29:25] <PJBoy> sounds like a plan
[15:29:31] <PJBoy> thanks for the tip
[15:29:31] <onizu> 'remote explorer' extension
[15:29:42] <LordKalma> No I rally mean the ssh extension
[15:29:43] <onizu> nice idea
[15:29:47] <LordKalma> So you use vscode in server mode
[15:29:48] <onizu> ok
[15:29:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:30:19] <LordKalma> basically vscode on the physical machine becomes a visual shell
[15:30:23] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[15:30:24] <LordKalma> to a server that actually runs on the vm
[15:30:27] <LordKalma> extensions are on the vm
[15:30:30] <LordKalma> all runs on the vm
[15:30:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:30:36] <LordKalma> you just edit on a confortable environment
[15:30:47] <LordKalma> https://code.visualstudio.com/docs/remote/ssh
[15:30:54] <onizu> will that make the compiler installed on the host available to vscode?
[15:30:59] <PJBoy> would I need to install e.g. clangd locally?
[15:31:03] <LordKalma> no
[15:31:06] <PJBoy> neat
[15:31:08] <LordKalma> vscode runs on the vm
[15:31:11] <LordKalma> all runs on the vm
[15:31:17] <LordKalma> only the UI host runs on the physical
[15:31:18] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[15:31:23] <onizu> interesting
[15:31:29] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:33:09] <LordKalma> PJBoy, you need openssh on tbe host though
[15:33:13] <LordKalma> it's available from a powershell command
[15:33:29] <PJBoy> host meaning the VM?
[15:33:40] <LordKalma> no sorry
[15:33:43] <LordKalma> your machine
[15:34:03] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[15:34:16] <PJBoy> I'll let VS code complain at me first
[15:34:19] <LordKalma> https://code.visualstudio.com/docs/remote/troubleshooting#_installing-a-supported-ssh-client
[15:34:27] <LordKalma> aka https://docs.microsoft.com/pt-pt/windows-server/administration/openssh/openssh_install_firstuse
[15:34:47] <LordKalma> sorry for the pt link, didn't notice
[15:39:19] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[15:40:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:40:50] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:43:10] <PJBoy> allegedly pt
[15:43:12] <PJBoy> all I see is English
[15:45:21] <Haohmaru> your sunglasses have English-tinted filters
[15:46:32] <onizu> it auto-translates it seems
[15:46:46] <onizu> hi Haohmaru
[15:47:10] <Haohmaru> o hai
[15:48:45] *** paule32__ is now known as paule32
[15:51:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:51:33] * PJBoy sighs
[15:51:41] <PJBoy> seem to be having trouble compiling openssl with clang
[15:51:46] <PJBoy> why is life so hard
[15:52:16] * PJBoy turns on verbose
[15:52:34] <PJBoy> bah, now it works
[15:52:37] <PJBoy> what the hell man
[15:53:46] *** Quits: bobb_ (~bobb_@dslb-088-066-159-175.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[15:54:43] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[15:56:26] <PJBoy> ok I think it just took a really long time
[15:56:36] <PJBoy> and it's compiling with gcc, which is probably sensible
[15:59:19] <Haohmaru> wow, gigantic moth in here.. i soaked it with 99% isopropanol >:)
[16:00:06] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:00:49] * Haohmaru killed one bug today
[16:11:29] *** Joins: proller (~p@2a02:6b8:0:40c:c71a:d9be:c391:990b)
[16:21:22] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[16:22:25] <smallville7123> https://gist.github.com/mgood7123/ef93b87be434a1e347fe81a407afd913 is this correct for a Degree class?
[16:22:46] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[16:22:59] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[16:23:45] <PJBoy> LordKalma, why am I avoiding the official c++ extension ?
[16:23:54] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[16:23:58] <PJBoy> because clangd renders it useless?
[16:24:04] *** Joins: Guest92 (~Guest92@68.132.78.81)
[16:24:21] <PJBoy> wow subtracting in a loop
[16:24:28] *** LordKalma_ is now known as LordKalma
[16:24:34] <Haohmaru> wrapping into normal range
[16:24:39] <LordKalma> useless and incomptabile
[16:24:46] <PJBoy> ok cool
[16:25:09] <Haohmaru> i do that kind of stuff with v /= 360.f; v -= floorf(v); v *= 360.f;
[16:25:24] <PJBoy> :/
[16:25:34] <PJBoy> try `value %= 360;`
[16:25:46] <PJBoy> bah they're fucking floats
[16:25:55] <PJBoy> `value = remainder(value, 360);`
[16:25:59] <PJBoy> or whatever it is
[16:26:12] <PJBoy> either remainder or fmod
[16:26:25] <Haohmaru> sure..
[16:26:44] <Haohmaru> << fmodf(-60.f, 360.f);
[16:26:45] <geordi> -60
[16:27:00] <Haohmaru> << fmodf(360.f, -60.f);
[16:27:01] <geordi> 0
[16:27:08] <Haohmaru> how dafuq does that work even
[16:27:37] <urdh> wdym, that makes perfect sense
[16:27:43] <PJBoy> 360 = -6 * -60 + 0
[16:27:50] <PJBoy> hence the 0 result
[16:28:13] <PJBoy> -60 = 360 * 0 + -60
[16:28:16] <PJBoy> hence the -60 result
[16:28:18] <Haohmaru> { float v = -60.f; v /= 360.f; v -= floorf(v); v *= 360.f; cout << v; }
[16:28:19] <geordi> 300
[16:28:40] <PJBoy> well
[16:28:46] <PJBoy> hopefully the compiler can figure out that loop
[16:28:54] <PJBoy> smallville7123, is 360.0 itself an acceptable value?
[16:29:12] <Haohmaru> that should be equal to 0.f i'd think
[16:30:23] <urdh> << remainderf(-60.f, 360.f), remainderf(360.f, -60.f);
[16:30:24] <geordi> -60, 0
[16:30:34] <urdh> what is the point of those functions tho
[16:31:05] <PJBoy> to do remainder calculations
[16:31:07] <PJBoy> for floats
[16:31:17] <urdh> as opposed to fmodf, which does...?
[16:31:21] <Haohmaru> no idea about these functions, but i know what he wants to achieve with these while loops, i've done it like that too, but i tend to just use the floor() method
[16:31:27] <PJBoy> remainder and fmod are slightly different
[16:31:44] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[16:31:46] <PJBoy> I have to look up the difference every time
[16:31:47] <urdh> in way literally three people on earth care about, i imagine
[16:31:52] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[16:33:34] <PJBoy> << remainder(5, 3), fmod(5, 3)
[16:33:35] <geordi> -1, 2
[16:34:01] <PJBoy> fmod is the one that acts like integer modulo
[16:34:32] <urdh> fair enough
[16:34:36] <urdh> Haohmaru: I think something along the lines of { auto y = fmod(x, max); x = (y < 0.0F) ? max + y : y; } would be more clear as far as intent goes
[16:34:40] <PJBoy> remainder tries to give you the closest to zero value
[16:35:01] <urdh> and I bet the loops is difficult to magic away without -ffast-math
[16:35:16] <urdh> jfc what is wrong with my `s` key today
[16:35:41] <Haohmaru> urdh what's this i can't tell
[16:38:15] <PJBoy> it's a function I like to call pmod
[16:38:52] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[16:39:19] <PJBoy> you want to get the number x into the range 0..max-1, fmod gets it into the range -max+1..max-1, and you fix it if it's negative
[16:39:23] <Haohmaru> { float x = -60.f; constexpr float max = 360.f; auto y = fmod(x, max); x = (y < 0.f ? max + y : y); cout << x; }
[16:39:24] *** Quits: LordKalma_ (~LordKalma@server.ruilvo.com) (Ping timeout: 250 seconds)
[16:39:24] <geordi> 300
[16:39:41] <Haohmaru> well, it seems to work on first sight *shrug*
[16:40:41] <Haohmaru> obviously when 360.0 is a known constant you can change the division to a multiplication with the reciprocal
[16:41:07] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[16:41:12] <anyone> and depending on how const everything else is, the compiler may fold it altogether
[16:41:36] <Haohmaru> i was talking about my floor() version
[16:42:12] <urdh> https://godbolt.org/z/xYhvvjjhY
[16:42:30] <Haohmaru> if you keep the value in the 0.f to 1.f range (like i do in most of my usages) then you end up with only the v -= floorf(v);
[16:42:31] <urdh> fwiw your floor() version introduces errors
[16:42:46] <Haohmaru> yes, for huge values of v it will
[16:42:57] <Haohmaru> thus you shall try to not let v grow much
[16:43:01] <urdh> if -700 is huge then sure
[16:43:09] <urdh> but that's only twice the range or so
[16:43:32] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:43:41] <Haohmaru> urdh i mostly use this for "phase" in oscillators, where the phase is always in range 0 to 1
[16:44:28] <urdh> and it gets even worse with -ffast-math: https://godbolt.org/z/9bGqa6h88
[16:44:54] <urdh> but yeah sure if you're careful about the range and/or the error is too small to matter then it's probably fine
[16:45:18] <Haohmaru> uh, floor() on floats?
[16:45:32] <Haohmaru> and fmod() too
[16:46:04] <urdh> yes?
[16:46:05] <smallville7123> https://gist.github.com/mgood7123/a74e519be1867ded5429c6b9f7572ed7 is this correct for a Degree class?
[16:46:11] <urdh> c++ has overloading, you know'
[16:46:18] <Haohmaru> oh, std::floor()
[16:46:22] <Haohmaru> well okay then
[16:48:47] <Haohmaru> smallville7123 we've been.. discussing your degrees.. if you didn't notice
[16:50:00] <smallville7123> sorry, i was busy implementing all the basic operators for the Degree class
[16:50:28] <smallville7123> eg + += ++ - -= -- * *= / /=
[16:51:56] <Haohmaru> is 360.f a valid value?
[16:52:12] <Haohmaru> or do you want it wrapped to 0.f
[16:53:12] <anyone> using Degree = unsigned int; /* first-degree, second-degree, third-degree (e.g. felonies) */
[16:53:14] <smallville7123> i wrap it to 0
[16:53:32] <smallville7123> anyone: lol
[16:53:33] <Haohmaru> btw, maybe you could've made this a template class and put the "360.f" constant as a non-type template argument
[16:53:47] <Haohmaru> then you could make other flavors of this
[16:54:29] <anyone> enum class Degree { highschool, college, ba, ma, phd }; /* good luck finding a sensible operator*, operator/ for that */
[16:55:39] <PJBoy> LordKalma, the remote development thing isn't showing my remote extensions ;_;
[16:56:51] <smallville7123> how do i compute the degree i need to rotate by in order to get to my target degree?
[16:56:52] <Haohmaru> also, since this "wrapping" is expensive, i often prefer to explicitly control when/where it shall happen, when doing operations on such things (like oscillator phase)
[16:57:12] <Haohmaru> in your case you're doing it in set() and it seems set() is being used all over the place
[16:57:12] <smallville7123> eg if my current degree is 5 and my target degree is 2 or 83
[16:57:35] <interop_madness> degrees should be [0f,360f) in my opinion
[16:57:44] <Haohmaru> bias the current value and do the maths there
[16:58:12] <smallville7123> Haohmaru: how?
[16:58:20] <Haohmaru> by adding offset
[16:58:21] <LordKalma> PJBoy, how so?
[16:58:26] <smallville7123> would currentDegree - 360.0f work?
[16:58:38] <PJBoy> I have clangd installed on my remote
[16:58:46] <PJBoy> but on host it shows no extensions installed on remote
[16:58:53] <smallville7123> would currentDegree += targetDegree - 360.0f work?  *
[16:58:54] <LordKalma> after you connect to a remote vscode server, you have to install everything again/sincronize your settings
[16:58:59] <LordKalma> sure, you have to install the clangd extgension
[16:59:13] <PJBoy> but I thought you said I didn't have to install those extensions on host
[16:59:19] <Haohmaru> smallville7123 so if v==2, and it needs to turn into 83, you wanna know how much rotation is needed, which is gonna be +81 in this case, right?
[16:59:27] <LordKalma> when you click install they are being installed on the server :)
[16:59:38] <LordKalma> when you have the green thing on the bottom lleft saying an IP
[16:59:44] <LordKalma> you're installing on the binaries on the server
[16:59:46] <smallville7123> eg assuming glRotatef which cannot accept negative degrees, only positive between 0 and 359 (assumably wraps at >= 360)
[17:00:10] <bv> smallville7123, I suggest returning a value modulo ("%") 360.  But, depending on the use of the Degree class the range may be best left to the caller.
[17:00:16] <LordKalma> I think you misunderstood how this works. vscode when you are on remote development sends a clean installation of vscode server to the hosting machine
[17:00:22] <LordKalma> and then your vscode is just a UI interface
[17:00:33] <LordKalma> you need to install stuff on said remote server instance
[17:00:36] <LordKalma> like the extensions
[17:00:44] <Haohmaru> smallville7123 huh, no idea about gl anything, you're not allowed to rotate by negative degrees?!
[17:00:45] <LordKalma> nothing to do with vscode installed on the remote machine
[17:00:46] <smallville7123> << (5 += (83 - 360))
[17:00:46] <geordi> error: lvalue required as left operand of assignment
[17:00:56] <smallville7123> << 5 + (83 - 360)
[17:00:56] <geordi> -272
[17:01:05] <smallville7123> << 5 + (5 + (83 - 360))
[17:01:05] <geordi> -267
[17:01:14] <smallville7123> << 5 - (5 + (83 - 360))
[17:01:15] <geordi> 277
[17:01:24] <smallville7123> rip
[17:01:34] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[17:01:38] <bv> << (83 - 5) % 360
[17:01:38] <geordi> 78
[17:01:39] <Haohmaru> subtract your current value from the wanted value and then wrap the result
[17:01:50] <Haohmaru> maybe you might have to add bias before that
[17:02:38] <bv> << (83 - 365) % 360
[17:02:39] <geordi> -282
[17:02:47] <bv> that needs bias to bring it positive
[17:03:47] <smallville7123> << 5 + (-(5 + (83 - 360)))
[17:03:47] <geordi> 277
[17:04:23] * smallville7123 joins math
[17:05:39] <Haohmaru> { float c = 5.f; float x = 83.f; c += 360.f; c = wrap(x - c); cout << c; } float wrap(float v) { v /= 360.f; v -= floorf(v); return v * 360.f; }
[17:05:40] <geordi> 78
[17:06:53] <Haohmaru> hm, the bias doesn't seem to change things, my mathz has gotten 5 layers of dust
[17:08:01] <Haohmaru> what's the "right" result here? is it 78?
[17:08:09] <PJBoy> LordKalma, oh they're different VS code installations on remote?
[17:08:12] <PJBoy> interesting
[17:08:42] <PJBoy> also kind of a nuisance
[17:09:08] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 260 seconds)
[17:10:36] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[17:10:59] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Ping timeout: 246 seconds)
[17:11:01] *** Quits: headline_ (sid102736@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:11:01] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 256 seconds)
[17:11:02] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[17:11:16] *** Quits: nojhan (uid443807@lymington.irccloud.com) (Ping timeout: 268 seconds)
[17:11:18] *** Quits: Bodger1234_ (sid503511@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[17:11:28] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[17:11:47] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:47] *** Quits: greyblue9 (sid500829@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[17:11:53] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 268 seconds)
[17:12:23] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 264 seconds)
[17:12:25] *** Joins: znemo_ (sid500529@uxbridge.irccloud.com)
[17:12:41] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[17:12:43] *** Quits: znemo (sid500529@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: nightstrike (uid487@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** Quits: tago (sid358597@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:12:43] *** znemo_ is now known as znemo
[17:12:52] *** Joins: psb_ (sid500598@id-500598.ilkley.irccloud.com)
[17:12:59] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[17:12:59] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 264 seconds)
[17:13:03] *** Joins: kristjansson_ (sid126207@2a03:5180:f::1:ecff)
[17:13:03] *** Joins: greyblue9 (sid500829@2a03:5180:f:3::7:a45d)
[17:13:06] *** Joins: nightstrike (uid487@2a03:5180:f:5::1e7)
[17:13:07] *** Quits: Argorok (sid195487@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[17:13:07] *** Quits: psb (sid500598@user/psb) (Ping timeout: 268 seconds)
[17:13:07] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 268 seconds)
[17:13:08] *** Joins: bjs (sid190364@2a03:5180:f:1::2:e79c)
[17:13:08] *** Joins: Bodger1234_ (sid503511@2a03:5180:f:5::7:aed7)
[17:13:11] *** Joins: computerquip (sid423484@2a03:5180:f:2::6:763c)
[17:13:18] *** Joins: ullbeking (sid5364@user/ullbeking)
[17:13:24] *** Quits: bjs (sid190364@2a03:5180:f:1::2:e79c) (Changing host)
[17:13:24] *** Joins: bjs (sid190364@user/bjs)
[17:13:28] *** Quits: computerquip (sid423484@2a03:5180:f:2::6:763c) (Changing host)
[17:13:28] *** Joins: computerquip (sid423484@user/computerquip)
[17:13:28] <LordKalma> Yes they are
[17:13:53] *** Joins: celphi (sid97751@5.254.36.58)
[17:13:55] *** Joins: Youmu (uid129469@uxbridge.irccloud.com)
[17:13:56] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[17:14:04] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[17:14:08] *** Joins: headline_ (sid102736@id-102736.tinside.irccloud.com)
[17:14:11] *** Joins: tago (sid358597@tinside.irccloud.com)
[17:14:21] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[17:14:22] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[17:14:22] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[17:14:31] *** Joins: buhman (sid411355@id-411355.tinside.irccloud.com)
[17:14:33] *** Quits: celphi (sid97751@5.254.36.58) (Changing host)
[17:14:33] *** Joins: celphi (sid97751@user/celphi)
[17:14:33] *** Quits: Youmu (uid129469@uxbridge.irccloud.com) (Changing host)
[17:14:33] *** Joins: Youmu (uid129469@user/condy)
[17:15:11] *** Quits: buhman (sid411355@id-411355.tinside.irccloud.com) (Changing host)
[17:15:11] *** Joins: buhman (sid411355@user/buhman)
[17:15:49] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:16:05] *** Joins: CaCode (~CaCode@user/cacode)
[17:16:44] <PJBoy> do I need a JSON debugger??
[17:17:42] <Haohmaru> you need less bugs in your JSON
[17:17:50] <PJBoy> I'm surprised how unintuitive I'm finding all this
[17:17:55] <rpav> json debugger? a linter/reformatter might be handy but
[17:17:58] <Haohmaru> what are you doing?
[17:18:01] <rpav> ^
[17:18:21] <PJBoy> oh I see what triggered that question
[17:18:23] <rpav> https://jsonlint.com/ <- pretty useful for testing basic snips but online obvs
[17:18:27] <PJBoy> I had the compile_commands.json open
[17:18:32] <PJBoy> and I pressed "run"
[17:18:34] <Haohmaru> convert your JSON to something else that has something-else-ish debuggers ;P~
[17:18:42] <PJBoy> and VS code was like "oh, you want a JSON debugger then?"
[17:19:11] <PJBoy> atm I'm working my way into figuring out how to compile this project
[17:19:22] <PJBoy> and how to get clangd to acknowledge that I have a C++ project open
[17:19:30] <anyone> Let a chef do it.
[17:19:50] <rpav> vscode should just sortof work if compile_commands.json is in the root of the source iirc
[17:19:54] <anyone> Put program into compiler. Run compiler. Put object code into file. :D
[17:20:02] <rpav> unfortunately vscode layers a metric ton of its own bullshit on the process
[17:20:07] <PJBoy> yeah I'll have to create the symlink then
[17:20:17] <PJBoy> I tried just opening the build directory
[17:20:24] <PJBoy> hoping there would be a .. directory
[17:20:52] <PJBoy> but now I'm struggling with the task of closing this directory and opening a different one
[17:21:35] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[17:21:35] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[17:21:42] <PJBoy> I'm not convinced it's possible...
[17:21:55] *** Joins: CaCode (~CaCode@user/cacode)
[17:21:56] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[17:22:13] <Haohmaru> you're basically fighting with your IDE?
[17:22:27] <PJBoy> ah right click the empty space and "remove directory from workspace"
[17:22:29] <PJBoy> yeah
[17:23:08] <PJBoy> VS Code strikes me as a very like
[17:23:20] <PJBoy> neo Microsoft design
[17:23:54] <PJBoy> vague grey icons instead of icons with text and colour
[17:24:11] <Haohmaru> must be the modern flat design
[17:24:14] <urdh> but color hurts your eyes
[17:24:17] <PJBoy> questionable context menus
[17:24:30] <urdh> everything should be dark and low contrast
[17:24:36] <Haohmaru> urdh you must hate rainbows then
[17:25:48] <PJBoy> ok now we're getting somewhere
[17:25:54] <PJBoy> I officially have red squiggles
[17:26:02] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:3471:ef4b:ebc8:3b49) (Ping timeout: 246 seconds)
[17:26:11] <Haohmaru> don't tell me that's spellcheck
[17:26:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:26:39] <urdh> Haohmaru: yeah give me overcast instead pls
[17:26:45] *** Joins: CaCode_ (~CaCode@user/cacode)
[17:26:51] <urdh> (also vscode spellcheck squiggles are blue, IIC)
[17:26:56] <lmat> very_sneaky_: Raziel: anyone: johnny: There's another gotcha (rough edge) in gitlab that I actually encounter regularly. Just remembered it when I hit it just now! The merge request review features are really quite good: you can comment on the merge request as a whole either as a simple comment or as a comment that requires a response. The latter creates an "unresolved thread". You can also comment on
[17:27:02] <lmat> individual lines of code and that creates "unresolved threads". This is all great. The problem is: you can pick which kind of comment you're going to put on the merge request at large ONCE: before any comments are placed on the merge request (either at large or on particular lines of diff). Once you've picked, all future comments are that same style, and you can't change old comments.
[17:27:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[17:27:07] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:28:00] <urdh> lmat: pretty sure you can change the comment type for new comments at any time?
[17:28:17] <lmat> So, I am reviewing a merge request, find several things in the diff and comment on them. Then, I go to do some "manual" integration testing and notice some problem, but I don't know what line of diff caused it (or maybe no particular line of diff caused it) so I want to make an "at large" comment. Unfortunately, by this point, since I've already created diff comments, I'm stuck with the "regular
[17:28:23] <lmat> comments" (not "unresolved thread").
[17:28:24] <urdh> also, you can "convert" comments to unresolved threads by commenting on the comment, but you can't go the other direction
[17:28:26] <lmat> urdh: checking.
[17:29:16] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[17:29:47] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[17:30:26] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438) (Quit: Konversation terminated!)
[17:30:47] *** Joins: Leo_V (~Leo@216.154.50.172)
[17:31:09] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:31:23] <urdh> lmat: https://docs.gitlab.com/ee/user/discussions/#create-a-thread-without-replying-to-a-comment (and the heading immediately preceding that one)
[17:32:30] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[17:33:32] *** Quits: Leone (~Leo@45.72.233.136) (Ping timeout: 240 seconds)
[17:33:41] <lmat> Here's the whole saga: Before I've typed into the "comment at large" box, here's how it looks: https://imgur.com/96mwUOA.png, then after typing: https://imgur.com/gI0zlKH.png. When typing up a comment on a diff, it looks like this: https://imgur.com/ygG1R3w.png and after clicking "Start a Review": https://i.imgur.com/aaXSEcn.png. After having started a review, "comment at large" looks like this:
[17:33:47] <lmat> https://i.imgur.com/6GZD2eD.png (notice, you can't change the "comment at large" type to "thread" at this point!), and after typing, https://imgur.com/qDqMHFV.png.
[17:34:35] <urdh> wat
[17:34:39] <lmat> urdh: The link you gave doesn't address the situation of "I have already commented on the diff". It is this situation in particular about which I care.
[17:34:49] <urdh> I don't recognize that second view at all
[17:35:29] <urdh> in all Gitlab systems I've worked with, I get that first "Comment" button with an arrow next to it whether there's comments on the diff or not
[17:35:50] <urdh> are you running some plugin or setting that would alter that behavior perhaps?
[17:36:00] <lmat> urdh: To which screen shot are you referring? The second screenshot has the arrow next to it.
[17:36:17] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Quit: Shutdown)
[17:36:26] <urdh> by "second view" I mean the one with an "add to review" button
[17:37:13] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[17:37:45] <lmat> urdh: Gotcha. reproduction instructions:  in the merge request, click "Changes", click the "comment" button next to one of the line numbers, type a comment and click "Start a review", click Overview (to go back to the merge request at large), scroll to the bottom and behold the comment box is different!
[17:37:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:01] *** ChanServ sets mode: +v npaperbot
[17:38:13] <lmat> I hit this in 60%-70% of the code reviews I do!
[17:38:30] <urdh> yeah I don't have a gitlab instance handy, but this looks like a gitlab feature I'm not familiar with
[17:38:34] <lmat> urdh: I seriously doubt we have any plugins at all, much less ones that would change that particular feature.
[17:38:42] <urdh> does https://docs.gitlab.com/ee/user/project/merge_requests/reviews/ help?
[17:39:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[17:39:38] <lmat> urdh: "I don't recognize that second view at all" It's right here in your link!! Just under "Add a new comment"!
[17:40:54] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:40:57] <lmat> I think the workaround for my case (since I ALWAYS want an "unresolved thread" when I comment at large) would be to remember: First thing, go change the comment type at the bottom of the "comment at large" part, THEN proceed with the review.
[17:41:10] <lmat> Well, gee, I've gone to all this trouble, I may as well create a bug report now :shrug:
[17:41:15] <urdh> it's not in the first link if that's the one you're referring to, and the second link (like I said) discusses a feature I'm not familiar with
[17:41:56] <lmat> Right, the second link: https://docs.gitlab.com/ee/user/project/merge_requests/reviews/ under "Add a new comment" shows a "comment at large" input where you can't change the comment type: you're stuck with whatever you got.
[17:42:53] <urdh> right
[17:43:38] *** Joins: kylese (~kylese@p5dd8ba77.dip0.t-ipconnect.de)
[17:43:41] <PJBoy> LordKalma, I don't see a debugger in your list of extensions
[17:44:31] <urdh> lmat: without knowing, my interpretation would be that "Add to review" there creates a discussion thread associated with the ongoing review, "Add comment now" adds a non-thread comment, and that the use case "add a discussion thread that isn't part of the ongoing review" isn't supported
[17:44:56] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[17:44:56] <urdh> caveats, just guessing, i have no idea what i'm talking about, etc.
[17:45:55] <lmat> urdh: "Add to review" there (in the "Overview" page) actually creates a non-thread comment UNLESS you have created a "thread" comment before starting a review.
[17:46:03] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[17:46:22] *** Quits: bjs (sid190364@user/bjs) (Killed (gold.libera.chat (Nickname regained by services)))
[17:46:22] <lmat> Gitlab really is great. The collaboration features are really mature. I think that's why this one rough edge chafes so badly :-D
[17:46:27] <urdh> yeah that sounds dumb
[17:46:31] <lpapp> hi, do you see any issues with specifying the default value of a method parameter map to {} instead of something like std::map<std::string, std::string>()?
[17:46:35] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 264 seconds)
[17:46:38] <LordKalma> PJBoy: vscode has a basic debugger
[17:46:45] <LordKalma> You might need the official extension for that
[17:46:46] *** Quits: znemo (sid500529@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[17:46:53] <LordKalma> (you can have both)
[17:46:53] <lmat> urdh: Okay, writing a feature request :-D
[17:46:59] <PJBoy> ok
[17:47:02] <lmat> urdh: (I don't think this counts as a bug report....)
[17:47:06] <PJBoy> do you not do any debugging?
[17:47:09] <LordKalma> Both the official and clangd. You can only use for linting
[17:47:19] <LordKalma> I use qt creator for both building and debugging
[17:47:27] <LordKalma> I don't even use the Microsoft cmake extensions
[17:47:40] <PJBoy> ah right
[17:47:47] *** Quits: nightstrike (uid487@2a03:5180:f:5::1e7) (Ping timeout: 264 seconds)
[17:47:51] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[17:48:02] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 240 seconds)
[17:48:02] *** Quits: kristjansson_ (sid126207@2a03:5180:f::1:ecff) (Ping timeout: 240 seconds)
[17:48:18] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[17:48:23] *** Quits: computerquip (sid423484@user/computerquip) (Ping timeout: 264 seconds)
[17:48:25] *** Quits: lhtseng (sid15322@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[17:48:25] *** Quits: tago (sid358597@tinside.irccloud.com) (Ping timeout: 256 seconds)
[17:48:32] *** Quits: headline_ (sid102736@id-102736.tinside.irccloud.com) (Ping timeout: 240 seconds)
[17:48:38] *** Quits: Youmu (uid129469@user/condy) (Ping timeout: 260 seconds)
[17:48:41] <lmat> urdh: Separately, it's not possible to "Start a review" with a comment on the "Overview" page. This isn't as egregious.
[17:48:44] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 250 seconds)
[17:48:46] *** Quits: Guest92 (~Guest92@68.132.78.81) (Quit: Client closed)
[17:49:01] <PJBoy> looking at an extension closes my file???
[17:49:02] *** Quits: greyblue9 (sid500829@2a03:5180:f:3::7:a45d) (Ping timeout: 240 seconds)
[17:49:09] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 250 seconds)
[17:49:10] *** Quits: psb_ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 250 seconds)
[17:49:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 264 seconds)
[17:49:34] <PJBoy> blurgh, double click vs single click
[17:49:35] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:49:35] *** Quits: Bodger1234_ (sid503511@2a03:5180:f:5::7:aed7) (Ping timeout: 264 seconds)
[17:50:30] <LordKalma> PJBoy: you can set kde to use double click
[17:52:00] <lpapp> I take silence as no :-P
[17:52:16] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[17:52:45] *** Joins: buhman (sid411355@user/buhman)
[17:52:48] *** Joins: Youmu (uid129469@user/condy)
[17:52:56] *** Joins: onizu (uid373383@uxbridge.irccloud.com)
[17:53:10] *** Joins: Argorok (sid195487@hampstead.irccloud.com)
[17:53:15] <PJBoy> KDE?
[17:53:25] *** Joins: xkuru (~xkuru@user/xkuru)
[17:53:46] <LordKalma> Nevermind
[17:53:48] <rpav> lpapp: imo you should generally specify default values as ={}
[17:53:56] <lpapp> great, thanks.
[17:54:00] <rpav> lpapp: for parameters .. unless you have something very specific in mind, or the class is stupid
[17:54:04] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[17:54:06] <lpapp> PJBoy: I do not take KDE as silence or silence as KDE
[17:54:09] <rpav> or for anything else for tha tmatter
[17:54:21] *** Joins: Bodger1234_ (sid503511@uxbridge.irccloud.com)
[17:54:24] *** Joins: ullbeking (sid5364@user/ullbeking)
[17:54:38] *** Joins: nightstrike (uid487@uxbridge.irccloud.com)
[17:54:38] *** Joins: nojhan (uid443807@lymington.irccloud.com)
[17:54:51] *** Joins: lhtseng (sid15322@helmsley.irccloud.com)
[17:56:14] <urdh> PJBoy: you can disable that double-click behavior if you want to, there's a setting called "Enable preview" under Workbench>Editor
[17:56:27] <PJBoy> thanks
[17:56:49] <lpapp> rpav: thanks
[17:58:11] <LordKalma> Middle click also open a file permanently
[17:58:27] <LordKalma> Basically when you see the file name in italic means it's just on preview
[17:59:02] <LordKalma> Many things take you of preview. Pretending to drag the file tab. Middle click on the file. Saving, editing
[17:59:16] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:59:39] <rpav> it's pretty bad ui design though
[17:59:54] <rpav> they should have like a "Preview" dotted line frame around the whole window or something
[18:00:13] <LordKalma> Only the italic name is quite subtle yeah
[18:00:19] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[18:00:54] *** Joins: celphi (sid97751@user/celphi)
[18:01:21] <Alipha> <comrad> you mean the function signature would be const std::string Connection::DeviceId() const? -- you missed the &. The & is the important part, the part that avoids a copy: `const std::string& Connection::DeviceId() const`
[18:01:22] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[18:02:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[18:02:30] *** Quits: CaCode_ (~CaCode@user/cacode) (Quit: Leaving)
[18:03:01] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:04:17] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 256 seconds)
[18:04:17] *** Joins: headline_ (sid102736@tinside.irccloud.com)
[18:04:24] *** Joins: greyblue9 (sid500829@ilkley.irccloud.com)
[18:04:28] *** Joins: znemo (sid500529@uxbridge.irccloud.com)
[18:04:29] *** Joins: tago (sid358597@tinside.irccloud.com)
[18:04:52] *** Joins: computerquip (sid423484@user/computerquip)
[18:06:55] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325) (Ping timeout: 250 seconds)
[18:09:04] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[18:11:13] <lmat> urdh: Did it. https://gitlab.com/gitlab-org/gitlab/-/issues/345508
[18:11:28] <lmat> I've had enough bug reporting for the month.
[18:14:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c59:2f73:735:a325)
[18:14:25] *** Joins: bjs (sid190364@user/bjs)
[18:14:47] *** Joins: psb_ (sid500598@ilkley.irccloud.com)
[18:17:48] *** Joins: zoneu (~zoneu@user/zoneu)
[18:33:16] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:36:13] <PJBoy> rage towards VS Code increasing >:(
[18:42:58] <m_ben> ecilpse FTW :P
[18:43:23] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:44:49] <PJBoy> I'm tempted to try the visual studio linux SSH thing
[18:45:04] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[18:45:07] <Raziel> this is how they get you!
[18:45:10] <Raziel> (to pay for CLion)
[18:45:31] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:46:28] <PJBoy> not on your life
[18:47:32] <rpav> clion is pretty nifty if you can't deal with emacs/vim
[18:47:54] <PJBoy> not being free is a dealbreaker
[18:48:21] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[18:49:10] <PJBoy> although I have heard good things about it
[18:49:16] <urdh> it's not *that* expensive, either
[18:49:28] <rpav> yea i mean if you're making money writing code it's not really a huge expense
[18:49:51] <urdh> i probably pay more for things i use way less than I would CLion
[18:49:54] *** Quits: zoneu (~zoneu@user/zoneu) (Remote host closed the connection)
[18:49:59] <rpav> otoh i switched to emacs and have 95% of the functionality if 5% of the glitz ;)
[18:50:02] <rpav> also it's way snappier
[18:50:16] <m_ben> damn €199, wasn't it like 99 a few years agon?
[18:50:21] <m_ben> s/agon/ago
[18:50:24] <rpav> m_ben: click individual license
[18:50:27] *** Joins: zoneu (~zoneu@user/zoneu)
[18:50:32] <urdh> that said, i also wouldn't pay for it :/
[18:50:47] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 264 seconds)
[18:50:54] <rpav> $89/first year, $71/second year, $53/onward
[18:50:57] *** Joins: pulse (~pulse@user/pulse)
[18:51:00] <rpav> https://www.jetbrains.com/clion/buy/#personal
[18:51:22] <rpav> iirc that's cheaper than it was; i think when i was usiung it it was like $99/85/75 or something but it's been a bit
[18:51:22] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[18:51:54] <urdh> paying for things feels like such a commitment ;)
[18:51:59] *** Parts: zoneu (~zoneu@user/zoneu) ()
[18:52:03] <rpav> but yeah, i use emacs now because it's faster and i can customize the fuck out of it with zero effort
[18:52:33] <rpav> yeah i just bought a house tell me about it 🤣
[18:54:29] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[18:54:59] *** Joins: artok (~azo@mobile-access-5d6aa9-118.dhcp.inet.fi)
[18:55:01] <LordKalma> PJBoy: whats frustrating you? Haha
[18:55:15] *** Quits: tago (sid358597@tinside.irccloud.com) ()
[18:56:03] *** Joins: leonardus (sid358597@tinside.irccloud.com)
[18:57:36] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[19:01:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:01:42] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[19:03:34] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:04:33] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[19:07:10] <cbreak> PJBoy: visual studio code has that, it's nice
[19:07:24] <cbreak> the main problem with it is that it's one of those stupid web browser programs
[19:07:29] <cbreak> so performance sucks a bit
[19:09:45] *** pah is now known as pa
[19:16:38] <rpav> i think the irony is that there are various UI restrictions as a result of using electron for "better UI"
[19:16:45] <rpav> clearly the multi-window thing but
[19:17:27] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:20:16] *** Joins: magla (~gelignite@55d4f4a1.access.ecotel.net)
[19:20:32] *** Quits: chozorho (~chozorho@2601:146:300:c30::685f) (Ping timeout: 240 seconds)
[19:20:54] *** Joins: chozorho (~chozorho@2601:146:300:c30::685f)
[19:24:22] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[19:28:15] <PJBoy> I'm just constantly fighting it
[19:28:22] <PJBoy> it's gonna take some getting used to
[19:28:26] *** Quits: dld (~dld@2601:197:600:1210:1d51:fa28:794f:615f) (Ping timeout: 245 seconds)
[19:28:46] <PJBoy> I hate how I have to hover the mouse over icons to find out what they do, instead of having text labels
[19:29:15] <PJBoy> the refresh command Ctrl+R isn't in the menu
[19:29:17] *** Quits: cq-work (~Z_Lund@user/cq-work) (Read error: Connection reset by peer)
[19:29:25] <PJBoy> and the way it works is completely bizarre
[19:29:52] <PJBoy> it sometimes shows me a dropdown menu of these unrelated files
[19:30:28] <PJBoy> I could find a way to undo the VS Code CMake config thing
[19:30:31] <PJBoy> *couldn't
[19:31:02] <PJBoy> and even uninstalling VS Code and reinstalling it didn't do anything
[19:31:13] <PJBoy> which means their uninstaller doesn't remove settings, which sucks
[19:31:21] <PJBoy> I deleted the "Code" directory in %APPDATA%
[19:31:25] <PJBoy> but that didn't work
[19:31:38] <PJBoy> it had saved extension stuff in my user directory
[19:33:01] *** Quits: chozorho (~chozorho@2601:146:300:c30::685f) (Ping timeout: 245 seconds)
[19:39:16] *** Quits: kylese (~kylese@p5dd8ba77.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:39:20] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:41:23] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[19:44:19] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[19:46:41] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[19:47:22] <mitch0> PJBoy: have you tried qt-creator?
[19:47:39] <Haohmaru> cue the tea
[19:49:44] <Haohmaru> the M$ VSCode thing is electron too?
[19:49:49] *** Joins: cq-work (~Z_Lund@user/cq-work)
[19:50:38] <Haohmaru> !fact
[19:50:39] *** Joins: pah (~pah@user/pah)
[19:50:39] <nolyc> Haohmaru: An escape sequence specifies a single character.
[19:50:40] <urdh> it's all electron
[19:50:41] <Raziel> yes it is
[19:50:47] <Haohmaru> eww
[19:50:49] *** Quits: pa (~pah@user/pah) (Ping timeout: 256 seconds)
[19:50:55] <Haohmaru> PJBoy uninstall it immediately
[19:51:06] <Haohmaru> get a sane IDE
[19:51:29] <Raziel> what did we do wrong to deserve electron?
[19:51:34] <Raziel> is it Qt's fault? it must be Qt's fault
[19:52:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:52:21] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:dd45:f936:4091:3407)
[19:52:21] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:dd45:f936:4091:3407) (Changing host)
[19:52:21] *** Joins: skapata (~Skapata@user/skapata)
[19:52:33] *** edro is now known as edr
[19:52:39] <Haohmaru> we didn't, your average mortal user bought latest gaming-grade PC and that's good enough to run an webbrowser-based calculator "program"
[19:52:57] <PJBoy> eh it's for work
[19:53:12] <Haohmaru> my condolences
[19:53:13] <PJBoy> VS Code seems promising enough
[19:54:00] <Raziel> Haohmaru, except even those PCs aren't really "good enough" for electron. it gets sluggish on absolutely anything.
[19:54:39] <Haohmaru> Raziel that is "good enough for ONE instance of a basic calculator app" and you better not have much else going on at the same time on the machine
[19:55:29] <kalven> just get more ram, peasant
[19:55:32] <Haohmaru> and i thought an IDE written in java is "heavy"
[19:55:42] * Haohmaru steals kalven's RAM
[19:55:55] *** Quits: pah (~pah@user/pah) (Ping timeout: 256 seconds)
[19:56:15] <Raziel> kalven, it doesn't even use the fekkin ram. it just sits there being slow, like the stronk doge vs weak doge meme.
[19:56:18] *** Joins: pah_ (~pah@host-87-1-12-252.retail.telecomitalia.it)
[19:56:24] <Raziel> Client: HexChat 2.16.0 • OS: Microsoft Windows 10 Enterprise (x64) • CPU: AMD Ryzen 9 5950X 16-Core Processor             (3.40GHz) • Memory: 127.9 GiB Total (91.3 GiB Free) • Storage: 20.0 TiB / 20.0 TiB (23.5 GiB Free) • VGA: NVIDIA GeForce RTX 3090 • Uptime: 1d 0h 10m 55s
[19:56:26] <urdh> i mean, if you can't run two electron apps at the same time you really need to get rid of that 90s laptop
[19:56:42] <urdh> it's still not nearly as bad as eclipse
[19:56:45] <Haohmaru> wowz, 16-core
[19:56:56] <Haohmaru> is that 128GB ram?!
[19:57:12] <Raziel> yes. lol
[19:57:32] <Haohmaru> i call this gaming-grade
[19:57:38] <jessicara> half the cores, half the ram, bit less than half the storage, and like half-size gpu
[19:57:49] <jessicara> is what i have lol
[19:58:00] <Raziel> this is more "workstation grade but I'm too poor to buy actual workstation platforms"
[19:58:23] <Haohmaru> at home my best PC is core2quad with 8GB ram
[19:58:31] <urdh> Raziel: more to the point, wtf are you filling those 20TiB of disk with?
[19:58:45] <Raziel> urdh, porn, what else
[19:58:51] <Haohmaru> urdh different gcc toolchains ;P~
[19:58:57] <urdh> lol
[19:58:58] <urdh> twice
[19:59:15] <anyone> minus the porn, it's just 770G and comfortably fits only a hand-sized SSD
[19:59:18] <urdh> do they even sell computers with 8GiB RAM anymore?
[19:59:26] <Raziel> I do have a thing for datahoarding I suppose. :p
[19:59:42] <anyone> urdh: you'd be surprised about how low you can go
[19:59:44] <Haohmaru> Raziel this is actually 4x 2GB sticks
[19:59:58] <Raziel> I've seen many low and mid range laptops still do 8gb
[20:00:02] <Haohmaru> ehm, i meant urdh
[20:00:37] <Haohmaru> urdh technically i didn't buy it, it was a gift
[20:01:19] <Haohmaru> i did stuff more RAM into it tho (it had 4GB), and a gpu because the built-in couldn't run my CAD properly due to silly opengl
[20:01:41] <Raziel> intel igpus and opengl, name a more iconic duo
[20:01:56] <Haohmaru> got some silly amd gpu which does the job fine
[20:02:17] <anyone> everything in the 300EUR range is 4g ish
[20:02:18] <Haohmaru> radeon r5 250 or some such
[20:02:35] <Raziel> if I tell my platform to run openGL, it runs fine on anything except intel igpus. if I tell it to run on dx11, it runs fine on intel igpus too.
[20:02:37] <Raziel> sadface.
[20:02:41] <Haohmaru> it's not a laptop btw, it's a "dell optiplex" tiny form-factor thing
[20:03:11] <Haohmaru> Raziel that machine has only one OS on it and it's debian
[20:03:18] <Raziel> and I'm not even using any fancy newer glsl shaders or anything
[20:03:22] <Haohmaru> so f*ck directx directly ;P~
[20:03:47] <Raziel> Haohmaru, well this is why I can run this shit on anything from dx9 to 12, opengl and es to vulkan!
[20:04:34] <Raziel> and metal too, I guess, not that I ever had anything to try that out on
[20:05:48] <Haohmaru> hm, also, when the www gets crippled with uber heavy content and sh*t, your average mortal user sees "hm, the internetz is loading slow.. but i have fast internetz, what's going on?" and someone says "it must be your PC then" .. so.. you have to upgrade the PC to run silly www on it
[20:05:58] <Raziel> directx does run faster on windows than opengl, usually, and even more so if you're using context switching for multi-window stuff
[20:06:12] *** Joins: paul424 (~tom@ip-5-172-233-227.multi.internet.cyfrowypolsat.pl)
[20:06:18] <Haohmaru> thus from that point it's easy to put a www-like "program" in the hands of this user and he won't notice anything
[20:06:43] <Haohmaru> he doesn't know that www is "slow" and properly built apps can be "much faster"
[20:06:56] <Haohmaru> thus an electron-based crap is equally slow as the www
[20:07:10] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[20:07:15] <Haohmaru> so things seem in some weird equilibrium and the conclusion is "you need a faster PC"
[20:07:52] <paul424> Do you know what I have found out ? For large classes say Foo.cpp and Foo.h where you have multiply dependencies you SHOULD have Foo.h splitted into several header files, but people are two weak between ears and prepare only one big Foo.h. Am I right ?
[20:08:28] <Haohmaru> do you include all those .h files in the cpp?
[20:08:45] <Raziel> why SHOULD you have the .h split?
[20:08:52] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[20:10:02] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 260 seconds)
[20:10:18] <imMute> If the class is large enough that the header file for it should be split, then it should be broken down into smaller classes most likely.
[20:11:23] <Haohmaru> if you have a single .cpp which include either one big .h, or a number of smaller .h files, there should be not much difference at the end, since during compilation those headers get copy/pasted into the cpp by the preprocessor so it should end up the same
[20:11:27] <Haohmaru> roughly
[20:11:40] <paul424> imMute++
[20:11:58] <paul424> Haohmaru, just think about smaller pieces being dependencies to other *.cpp
[20:12:12] <Haohmaru> then sure
[20:12:50] <Raziel> I do that sometimes, with an h for logic, one for states and state machines, one for assets and asset management... but mine aren't really in classes, they're just in namespaces
[20:12:52] <Haohmaru> altho you could still write it as a single .h and use preprocessor #ifdef stuff to turn off chunks of it
[20:12:56] <Haohmaru> maybe that's ugly tho
[20:13:44] <Haohmaru> now, i'll be having huge .hpp files as part of my "device" .hpp generator
[20:14:15] <Haohmaru> for now i generate a single .hpp and it ends up huge, but i've been considering the option to split it into multiple ones
[20:15:11] <Raziel> if you're trying to do header-only stuff then separating also becomes more important to avoid cyclic shit
[20:16:07] <Haohmaru> Raziel it's device definitions for cortex-M MCUs
[20:16:18] <Raziel> fuuuun
[20:16:19] <Haohmaru> definitions for the registers, peripherals, etc..
[20:16:29] <Haohmaru> so it gets huge
[20:17:10] <Haohmaru> several tens of thosands of lines
[20:17:30] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:b80b:fa5c:c6a4:6438)
[20:18:09] <paul424> cortex-M MCUs what are those ?
[20:18:27] <paul424> rocket science ?
[20:18:48] <Haohmaru> paul424 small black things with metal pins on them
[20:19:03] *** Joins: kylese (~kylese@p5dd8ba77.dip0.t-ipconnect.de)
[20:19:12] <paul424> ahh amulets
[20:22:29] *** Joins: iftheraincomes (~iftherain@2804:14d:5c5b:9352:c17f:76a8:a52b:d028)
[20:22:46] *** Joins: chris64 (~chris@user/chris64)
[20:22:46] *** Quits: chris64 (~chris@user/chris64) (Client Quit)
[20:23:00] <Haohmaru> paul424 this one for example: https://www.microchip.com/en-us/product/ATSAME54N20A
[20:24:04] <paul424> I see
[20:25:53] <Haohmaru> this is "slightly" different than your typical Ryzen cpu
[20:26:21] *** Quits: iftheraincomes (~iftherain@2804:14d:5c5b:9352:c17f:76a8:a52b:d028) (Client Quit)
[20:26:48] <paul424> Haohmaru, how do you know I have ryzen !?! :D
[20:27:03] <Haohmaru> my crystal ball told me
[20:28:48] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:29:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:30:59] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[20:31:22] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[20:33:53] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[20:35:39] <Haohmaru> !fact
[20:35:40] <nolyc> Haohmaru: The inline specifier shall not appear on a block scope declaration.
[20:36:16] *** Quits: onizu (uid373383@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:38:42] <lmat> urdh: Just had that comment-with-thread problem again...forgot to change to "Start Thread" before writing diff comments :facepalm:  I added the comment, then added a reply then deleted the repy. Now it's a comment with thread :-D
[20:42:32] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:42:47] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[20:47:25] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:49:13] *** Joins: RoKenn (~RoKenn@2001:a61:35bf:6201:a961:e155:272:3356)
[20:49:14] *** Quits: RoKenn (~RoKenn@2001:a61:35bf:6201:a961:e155:272:3356) (Changing host)
[20:49:14] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:50:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:54:19] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:54:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:145:28b:ea41:3529)
[20:55:01] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:55:28] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[21:00:05] *** Quits: proller (~p@2a02:6b8:0:40c:c71a:d9be:c391:990b) (Ping timeout: 264 seconds)
[21:01:02] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 240 seconds)
[21:03:34] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[21:08:59] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 246 seconds)
[21:15:23] *** Joins: dld (~dld@73.61.8.16)
[21:21:20] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[21:22:16] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[21:22:45] *** Joins: wnbeser (~wnbeser@91-156-52-156.elisa-laajakaista.fi)
[21:23:02] <Alipha> <PJBoy> it's actually UB to shift a 8-bit type by 8 -- It's not possible to shift an 8-bit value because it's promoted to int first, which is at least 16 bits, right?
[21:23:23] * PJBoy checks
[21:23:34] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[21:24:27] <PJBoy> > greater or equal to the number of bits in the promoted left operand
[21:24:59] <PJBoy> so yeah that's fine as it turns out
[21:25:30] <PJBoy> I'm almost surprised
[21:28:15] *** Joins: chozorho (~chozorho@2601:146:300:c30::685f)
[21:29:24] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[21:31:22] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:33:32] *** Joins: Deneb (~johnch@117.111.189.80.dyn.plus.net)
[21:34:33] *** Quits: andreasbuhr (~quassel@p549db884.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:37:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:01] *** ChanServ sets mode: +v npaperbot
[21:46:29] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:52:51] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:53:05] *** Quits: X-Scale (~ARM@31.22.202.101) (Ping timeout: 246 seconds)
[21:54:51] *** X-Scale` is now known as X-Scale
[21:55:30] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[21:55:45] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:56:35] *** Quits: dld (~dld@73.61.8.16) (Ping timeout: 250 seconds)
[22:00:30] *** Joins: Simplar (~Simplar@188.163.92.225)
[22:00:42] <Simplar> Hey guys
[22:02:34] <Simplar> https://wandbox.org/permlink/s57UJyf6ZrqkSimr Please give me a good explanation on why is it hanging
[22:02:50] <Simplar> I need that to work on gcc 8.2, and... what... what is that
[22:04:24] <rpav> because you didn't initialize n
[22:04:39] <rpav> err nm i can read
[22:04:48] <PJBoy> it just takes forever to multiply numbers that large
[22:04:59] <Simplar> Is there anything more efficient than this?
[22:05:00] <rpav> you did however give it a really giant `n` and if that's actually arbitrarily-large ints, it's going to take a long time
[22:05:40] <rpav> are you sure you really need this? nearly no-one deals in numbers that big, and rarely concretely then
[22:05:44] <PJBoy> AFAIK there's no quick way to calculate 100500!
[22:05:47] <rpav> ^
[22:05:58] <PJBoy> hell even printing the result would take a while
[22:06:08] <kalven> you're asking it to compute a number that is in the billions of digits
[22:06:15] <PJBoy> << lgamma(100500)
[22:06:16] <geordi> 1.05705e+06
[22:06:20] <PJBoy> only a million
[22:06:24] <rpav> i'm not sure we have capacity to store the result, where does factorial start to outclass our current computational limits?
[22:06:28] <Raziel> what was it, 21! was the biggest that fits in uint64?
[22:06:34] <Simplar> rpav: pretty sure
[22:06:38] <PJBoy> IIRC yeah
[22:06:55] <Simplar> how about a deque?
[22:07:01] <Simplar> than stores things digit by digit
[22:07:10] <Simplar> and uses long division to get itself manipulated
[22:07:14] <PJBoy> could always call out to wolfram alpha https://www.wolframalpha.com/input/?i=100500%21
[22:07:31] <kalven> why do you think that cpp_int is inefficient for your needs?
[22:07:47] <Simplar> I don't really want to use boostlib tbh
[22:07:51] <Simplar> That's why
[22:08:05] <Raziel> you're not getting the result of that anyway
[22:08:14] <Raziel> I mean, if you insist and have enough time and ram, you miiiight
[22:08:16] <Raziel> but, why
[22:08:18] <rpav> that's smaller than i thought it'd be but i'm not really familiar with factorial results
[22:09:02] <Simplar> > 1018! has more than 10¹⁹ digits in decimal, and is 5.8352×10^19 bits long, or 6633850TB ~ 6793062435GB. Do you really have that much memory to store the result? That's not counting the temporary memory for calculations.
[22:09:05] <Simplar> ....holy.
[22:09:07] <rpav> i think if you have to calculate that kind of thing you probably want to write custom code, and probably look up more efficient ways to calculate it, or at least that's where i'd start, having no clue myself
[22:09:11] <Simplar> (it meant 10^18)
[22:09:54] <Simplar> what if I'll limit that int to 10k?
[22:10:17] <Raziel> lol
[22:10:19] <PJBoy> well when you think about it, 100500! is less than 100500^100500, which is kinda like 100000^100500 = 10^(5 * 100500)
[22:10:32] <PJBoy> so half a million digits ish
[22:10:53] *** Joins: proller (~p@2a02:6b8:b081:8831::1:1d)
[22:11:02] <Raziel> Simplar, you can limit it to whatever you think is suitable
[22:11:05] <Simplar> I've just input 10000
[22:11:06] <Simplar> and gosh
[22:11:10] <Simplar> that's huge number
[22:11:34] <Raziel> the question is, what kind of numbers do you actually need to work with?
[22:11:34] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[22:14:15] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[22:14:23] <Simplar> Raziel: natural numbers 1 to 10000 inclusive
[22:15:22] <Raziel> well, then, sure. I mean this clearly works with 10000
[22:15:31] <Raziel> and it would work with higher numbers too, assuming you have the time and memory
[22:17:58] <Raziel> also, <Simplar> > 1018! has more than 10¹⁹ digits in decimal
[22:18:02] <Raziel> that sounds incorrect
[22:18:15] <rpav> "assuming you have time and memory" is the programmer equivalent of "assuming a spherical cow"
[22:18:18] <Raziel> it has 2622 digits
[22:18:55] <Raziel> which is polite enough to work with
[22:19:07] <PJBoy> << lgamma(1018-1)
[22:19:07] <geordi> 6022.79
[22:19:10] <Raziel> 10000! has 35660 which is also hardly that big of a deal
[22:19:31] <PJBoy> oh I'm forgetting to scale
[22:19:34] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[22:20:47] <Raziel> 100000! would have around 457k digits
[22:21:10] <Raziel> which... gets less polite but still workable on modern hardware >_>
[22:21:36] <Raziel> stored properly that'd be less than a mb
[22:21:48] <PJBoy> << lgamma(1018+1) / log(10)
[22:21:48] <geordi> 2621.68
[22:21:52] <PJBoy> there's the calculation
[22:21:53] <rpav> how would 457k digits be more than 457k (bytes)
[22:22:09] <rpav> i mean hte calculation would use at least 3x that, but
[22:22:24] <Raziel> rpav, I guess if you do something stupid like a deque of something bigger than uint8 to store each digit :p
[22:22:33] <rpav> oh yeah also wtf was lgamma and how does that apply to this ;)
[22:22:52] <rpav> Raziel: ah definitely
[22:23:01] <PJBoy> lgamma(x) is ln((x-1)!)
[22:23:17] <PJBoy> and log10(x) is the number of decimal digits needs to represent it
[22:23:27] <rpav> though i mean, 457k .. blockwise as some (reasonably small) constant factor ought to be pretty close
[22:23:30] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[22:23:34] <PJBoy> the division rescales ln to log10
[22:23:45] <Raziel> Simplar, so yeah, you should be able to work with even n=100k, but the operation will definitely take a while
[22:24:06] <rpav> PJBoy: weird, i feel like that's a super specific thing, but i'm definitely not a math person
[22:24:08] <Raziel> I'd test it locally but I dun have boost. :p
[22:24:29] <PJBoy> yeah I dunno what lgamma is useful for
[22:24:29] <Raziel> lemme see, is boost mp header-only
[22:24:30] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:24:47] <PJBoy> for when you work with factorials probably
[22:25:51] <PJBoy> so statistics I guess
[22:29:18] <Raziel> dammit boost stop being so fat
[22:29:31] <kalven> boost.electron
[22:29:36] <Raziel> no
[22:29:38] <Raziel> absolutely haram
[22:29:56] <kalven> std::electron?
[22:30:08] <kalven> there was a proposal...
[22:30:26] * PJBoy downs a shot
[22:30:32] <rpav> std::web_view<std::web_view::electron>
[22:30:39] <rpav> because we have to support edge, safari, etc
[22:31:01] <rpav> (well, webkit, chromium, ..)
[22:32:02] <rpav> this is basically what neutralinojs does, and it's actually sortof the best thing, out of a lot of bad options
[22:32:14] *** Joins: nshire (~Neal@user/nshire)
[22:35:35] *** Parts: paule32 (~paule32@user/paule32) (Leaving)
[22:35:38] <Raziel> Simplar, computing 100000! using that takes 1091ms on my machine, and has a peak use of about 2MB of RAM
[22:35:43] <Raziel> so, yeah. not that bad.
[22:37:25] <PJBoy> << lgamma(DBL_MAX/1000) / log(10)
[22:37:25] <geordi> 5.47974e+307
[22:37:44] <PJBoy> try calculating (DBL_MAX/1000)! :p
[22:38:21] <Raziel> ...as double?
[22:38:26] <PJBoy> it's only a googol^3 digits
[22:38:38] <PJBoy> as an arbitrary precision int ofc
[22:38:47] <Raziel> oof
[22:39:08] <Raziel> << DBL_MAX / 1000
[22:39:09] <geordi> 1.79769e+305
[22:39:26] <Raziel> not very polite >:
[22:41:27] <PJBoy> (we recall that there are only 10^78 to 10^82 atoms in the universe)
[22:44:12] <Raziel> PJBoy, I am attempting to do it. it just grew to 5MB. send help.
[22:44:13] <Raziel> :p
[22:46:24] <Raziel> this really isn't very exciting. it's still at 5MB.
[22:49:16] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:50:32] <Raziel> PJBoy, I feel like it'll be faster to stop this and implement a parallel computation instead
[22:50:35] <Raziel> >_>
[22:50:52] <rpav> i don't think you can calculate factorial in paralle
[22:50:53] <rpav> l
[22:51:23] <PJBoy> you can parallelise multiplication
[22:51:26] <rpav> unless there's some way different way to implement it, every next value depends on the prior result
[22:51:27] <Raziel> why not? contiguous memory of all factors 1 to n, then divide and conquer mul across the array
[22:51:44] <PJBoy> or that yeah
[22:51:49] <rpav> that doesn't get you very far
[22:52:08] <Raziel> it did just grow again, to 19MB this time
[22:52:14] <Raziel> but still. slooooow.
[22:52:23] <PJBoy> factorial's actually extremely parallelisable
[22:52:34] *** Joins: pulse (~pulse@user/pulse)
[22:52:39] <PJBoy> but yeah, you'd only get a 16 core boost or whatever
[22:52:46] <PJBoy> or however many your graphics card has
[22:53:20] <Raziel> the graphics card has about 10 thousand, so, that could be a decent boost :p
[22:54:00] *** Quits: Deneb (~johnch@117.111.189.80.dyn.plus.net) (Quit: Leaving)
[22:54:47] <rpav> ah i see there are a lot more interesting algorithms
[22:55:32] <Raziel> not sure what to use to get multiprecision on cuda tho
[22:56:03] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:58:46] <ville> (monoid means parallelism)
[22:59:52] <PJBoy> set up an unreal engine project, link boost into it, put it through emscripten, that'll give you a webasm that you can put into an Electron host, which after putting into a docker, can be run as a collection of microservices on AWS
[23:00:03] <sprout> I never got along with that guy,  monoid
[23:00:32] <PJBoy> then you just get your GPU to ask AWS for digits of the multiprecision
[23:00:41] <ville> sprout: you probably did, but perhaps you meant monad?
[23:00:55] <rpav> i'm not sure that would qualify for being a microservice, but i mean the rest might be possible ;)
[23:01:11] <sprout> nah,  monad is swell.  talks a bit too much about himself,  that's all
[23:01:19] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[23:02:36] <rpav> PJBoy: you could invent a new cryptocurrency, factcoin, which was mined by calculating larger and larger factorials, and then with enough PR you could just reference the blockchain
[23:03:10] <PJBoy> factcoin has the right kind of name to swindle the right wing crowd
[23:03:16] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[23:03:24] *** Quits: wnbeser (~wnbeser@91-156-52-156.elisa-laajakaista.fi) (Quit: Leaving)
[23:03:38] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[23:04:07] <PJBoy> I found out recently that some people are calling the blockchain "web 3.0" now
[23:04:32] <rpav> hilarious
[23:04:37] <Simplar> Pffffft actually.
[23:04:39] <rpav> i thought web 3.0 was already a thing at some point
[23:04:43] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[23:04:44] <Simplar> https://wandbox.org/permlink/QrqCXaQSKmOR2S8M why do i have segmentation fault?
[23:04:44] <PJBoy> last I heard about web 3.0 it was supposed to be all about machine learning and wolfram alpha and stuff
[23:04:49] <Simplar> the code seems correct
[23:05:00] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Remote host closed the connection)
[23:05:28] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[23:05:32] <Raziel> Simplar, is it time?
[23:05:34] <Raziel> I think it's time
[23:05:39] <Raziel> time for you to learn how to use a debugger
[23:05:40] <Raziel> :p
[23:05:58] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Remote host closed the connection)
[23:06:21] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[23:06:49] <Simplar> Raziel: what is that thing XD
[23:07:03] <Raziel> hehhhehe
[23:08:28] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[23:09:31] <Simplar> Raziel: eh, oh
[23:09:35] <Simplar> It was MAX not set well
[23:11:02] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Remote host closed the connection)
[23:29:03] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:29:53] *** pah_ is now known as pa
[23:29:53] *** Quits: pa (~pah@host-87-1-12-252.retail.telecomitalia.it) (Changing host)
[23:29:53] *** Joins: pa (~pah@user/pah)
[23:29:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:31:18] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:31:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:31:29] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Remote host closed the connection)
[23:32:53] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:34:32] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[23:37:06] *** Joins: gehn (~gehn@user/gehn)
[23:44:15] *** Joins: pah (~pah@user/pah)
[23:45:19] *** Quits: pa (~pah@user/pah) (Ping timeout: 268 seconds)
[23:52:06] *** Quits: pah (~pah@user/pah) (Ping timeout: 268 seconds)
[23:52:07] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[23:52:40] *** Joins: pah_ (~pah@host-95-247-113-253.retail.telecomitalia.it)
[23:53:16] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[23:53:57] *** Quits: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net) (Ping timeout: 268 seconds)
[23:57:55] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
