[00:00:26] *** Quits: paul424 (~tom@ip-37-248-159-73.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:02:27] <bob_x2> im surprised how many types describes stdtypes section of the documentation
[00:02:38] <bob_x2> is not it the biggest section of the documentation ?
[00:03:23] <bob_x2> and im new in python. maybe for starters here should be recommended to pay more attention to some specific types than reading and learning all the 35 (i found so) different type descriptions
[00:03:56] <bob_x2> python seems general purpose language. and my tasks are not comprehensive with complex language features
[00:04:03] *** Parts: riv (river@tilde.team/user/river) (WeeChat 3.3)
[00:04:12] <bob_x2> but i need to dig into python in short term so very appreciated any advice here
[00:04:25] *** Joins: noarb (~noarb@user/noarb)
[00:04:33] <mefistofeles> bob_x2: can you point to the exact part of the documentation you are referring to?
[00:05:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:05:15] <bob_x2> its library/stdtypes.txt file in the official documentation
[00:06:16] <cluelessperson> bob_x2, like what? :)
[00:06:26] <cluelessperson> bob_x2, I'm happy to help you out too. :)
[00:06:28] <mefistofeles> bob_x2: ok, I understand. I think that this library/API doc is more of a reference resource than a learning one, specially for newcomers
[00:06:51] <mefistofeles> bob_x2: I think if you are new you are expected to start with something like the tutorial at https://docs.python.org/3/tutorial/index.html
[00:06:56] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:07:10] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:07:28] <aphysically> jinsun_: ah yeah, mypy does complain about name redefinition using the docs suggestion for singledispatch names
[00:07:29] <aphysically> src/pyffstream/ffmpeg.py:623: error: Name "_" already defined on line 619
[00:07:36] <aphysically> can just give them unique names, I guess
[00:08:01] <bob_x2> well, actually i already have assigned an issue in my small project and my goal is not to do tutorials but solve some my real project problem. and i wanted to dig into some details of language in my spare time and solve the problem in some kind of predictable time manner
[00:08:30] <mefistofeles> bob_x2: ok, fair enough
[00:08:31] <bob_x2> cluelessperson: thanks :) your help is very appreciated too . with full heart
[00:08:49] *** Quits: dece (~dece@dece.space) (Quit: Quit)
[00:09:08] *** Joins: minip (~minip@user/minip)
[00:09:13] <mefistofeles> bob_x2: what I'm saying is that the tutorial already covers the most common types you want to emphasize, the stdtypes documentation doesn't need to do that, imho
[00:09:33] <bob_x2> yeah you right . i have to do some . no doubt
[00:10:20] *** Joins: dece (~dece@dece.space)
[00:10:24] *** Quits: gentlinux (~gentlinux@2a02:8108:1880:294:3787:9d9d:a422:6d07) (Quit: WeeChat 2.3)
[00:10:29] <mefistofeles> that said, of course, there is always room for improvement in Python, and probably the documentation is one of the best candidates for that
[00:10:54] <aphysically> you can also stack register functions in singledispatch to support multiple types, but the type hint version of register doesn't seem to understand unions
[00:11:14] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[00:12:40] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[00:13:58] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[00:14:26] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[00:16:57] *** Joins: Celeo (~Celeo@user/celeo)
[00:17:10] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:17:21] *** Joins: eem (~eem@user/eem)
[00:17:25] *** Joins: rsx (~dummy@ppp-188-174-145-233.dynamic.mnet-online.de)
[00:17:26] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:40b4:bbb9:fb62:9f97) (Quit: Textual IRC Client: www.textualapp.com)
[00:17:40] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[00:17:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:19:52] *** Joins: fikran (~fikran@user/fikran)
[00:19:53] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[00:21:27] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[00:21:28] *** Joins: rushi (~rushi@2401:4900:1f2e:39cb:e1ab:e59c:1b13:f227)
[00:23:01] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[00:23:01] *** Joins: elkclone (~elkclone@user/elkclone)
[00:23:03] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[00:23:11] *** Joins: LiftLeft (~LiftLeft@154.21.114.38)
[00:24:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[00:24:56] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:25:22] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6844-6dda-c97d-34cb.res6.spectrum.com) (Read error: Connection reset by peer)
[00:27:17] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[00:28:09] *** Joins: nomic (~nomic@185.192.69.207)
[00:29:42] *** Parts: lpapp_ (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[00:29:55] *** Joins: newpy (~newpy@206.168.231.90)
[00:30:20] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Quit: *evaporates*)
[00:30:38] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[00:31:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:31:40] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f)
[00:32:44] *** Quits: demirok (~bell@user/demirok) (Quit: Leaving.)
[00:33:09] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 268 seconds)
[00:33:24] *** Quits: ubert (~Thunderbi@178.115.76.58.wireless.dyn.drei.com) (Remote host closed the connection)
[00:33:29] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[00:33:37] <newpy> I've noticed if I use pyplot.plot() for one figure and then pyplot.plot() for another figure, there is some residual data finding its way into the second figure, how do we "clear" the plot after saving the first figure?
[00:35:19] *** Quits: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78) (Quit: ZNC 1.7.2+deb3~bpo9+1 - https://znc.in)
[00:35:53] <newpy> I think I found it, plt.clf()
[00:35:55] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:4650:ff51:8883:bb1) (Ping timeout: 252 seconds)
[00:36:38] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:37:15] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[00:37:59] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[00:38:03] *** Quits: rsx (~dummy@ppp-188-174-145-233.dynamic.mnet-online.de) (Quit: rsx)
[00:38:44] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[00:39:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:40:18] <InPhase> newpy: Are you starting a new one with plt.figure() ?
[00:40:35] <newpy> InPhase, no is that what I should be doing?
[00:40:37] <InPhase> Yes.
[00:40:46] *** Joins: CygniX (~CygniX@2605:6400:30:fdc6:68:f4:4e:78)
[00:41:11] <jinsun_> aphysically: yeah will have to keep unique names there to satisfy mypy, or just run mypy with `--allow-redefinition`
[00:41:21] <aphysically> unique names isn't the worst in the world
[00:41:21] <InPhase> newpy: If you want to be very rigorous, plt.close() at the end.
[00:42:08] <InPhase> newpy: I minimize thinking and errors with these:  https://bpa.st/7G2Q
[00:42:31] *** Joins: d00gy (~d00gy@user/d00gy)
[00:42:41] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 264 seconds)
[00:42:50] <jinsun_> aphysically: that generic example is a bit weird, usually you define generic with TypeVar
[00:43:05] <aphysically> it's the same if I do it with TypeVar
[00:43:22] <aphysically> AnyStr = TypeVar("AnyStr", str, bytes)
[00:43:34] <aphysically> I tried replicating it with my own TypeVar with a different name and got the same result
[00:43:39] *** Joins: zebrag (~chris@user/zebrag)
[00:44:17] <aphysically> I'm still quite confused there, no idea what's going on
[00:44:59] *** Joins: golden_ticket (~jrand@156.146.46.161)
[00:46:21] <golden_ticket> I tried to write an iterative version of a recursive function. Can someone tell me how close I am or how to fix it? recursive: https://pastebin.com/EiHE65ic iterative: https://pastebin.com/xqmHSW7j
[00:46:22] <infobob> https://bpaste.net/PYDQ (repasted for golden_ticket)
[00:46:28] <jinsun_> aphysically: ah ok AnyStr is already typevar, I somehow never noticed, then it was fine
[00:46:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:47:21] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:47:52] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Quit: *evaporates*)
[00:48:36] <aphysically> yeah I'm still debugging that and how I somehow managed to have some weird behavior with my vimrc >.>
[00:49:07] *** Quits: nergar (~quassel@177.225.147.106) (Ping timeout: 252 seconds)
[00:50:43] *** Quits: ali1234 (~al@user/ali1234) (Quit: Leaving.)
[00:50:45] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[00:51:11] *** Joins: ali1234 (~al@user/ali1234)
[00:53:21] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:44] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 252 seconds)
[00:55:38] <aphysically> well solved the vim one, back to generics
[00:55:41] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:9de6:7cb1:acca:d016) (Read error: Connection reset by peer)
[00:56:28] <aphysically> I'm sorta rewriting that class anyway (context manager time maybe), but I want to figure the generic stuff out first
[01:00:11] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[01:01:07] <aphysically> jinsun_: I went ahead and posted it in the typing gitter for good measure as mypy docs said that's where people hang out https://gitter.im/python/typing?at=6158b2c638377967f42dba74
[01:01:25] <jinsun_> aphysically: yup seems like a mypy bug, reveal_type shows the right thing for the original thing that mypy says it cannot determine
[01:01:31] <jinsun_> and pyright doesn't complain
[01:02:02] <jinsun_> can be fixed with some asserts, bug ugly
[01:03:38] *** Quits: koziad (~koz@user/koziad/x-1285628) (Quit: The Lounge - https://thelounge.chat)
[01:03:56] <jinsun_> s/bug/but
[01:04:10] <jinsun_> maybe bug was fine too :D
[01:04:28] <aphysically> yeah I'd rather keep it as str than insert the asserts everywhere since I'm not (yet) using the bytes path
[01:04:59] <aphysically> but if it's a bug I should be a good citizen and report upstream, although this is so weird that I'm not super excited about turning it into a minimal example
[01:05:07] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[01:06:14] *** Joins: mwd5650 (~mwd5650@162.154.217.34)
[01:06:22] <aphysically> (the stuff mypy says it can't determine are completely unrelated to the str->AnyStr conversion in principle)
[01:07:58] *** Joins: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com)
[01:09:43] <jinsun_> seems like walrus is also a cause of the break
[01:10:15] <jinsun_> the exception part is fixed by simply doing the assignment normally and checking in the next line
[01:10:52] *** Joins: millido (~millido@84.210.150.128)
[01:11:06] <aphysically> huh, the readline walrus is harder to remove though
[01:11:40] <jinsun_> and the f part can be fixed without asserts by declaring it before the with block as `f: typing.TextIO`
[01:11:55] <jinsun_> not ideal but less ugly than asserts
[01:11:58] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[01:12:26] <jinsun_> aphysically: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=09fb275aa9aba8e12a30fdd3b0f431ba
[01:12:56] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Quit: *evaporates*)
[01:13:07] <aphysically> yeah, that's acceptable amount of workaroundness I guess, the exception walrus was questionable anyway
[01:14:55] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[01:15:01] <jinsun_> probably f can be fixed with the removal of walrus too, but that one is a bit more annoying
[01:15:46] <aphysically> I'm not sure if mypy playground "latest" means git or .910
[01:16:00] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[01:16:46] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[01:16:46] *** Joins: beterraba (~lucas@109.171.244.80)
[01:16:57] *** Quits: beterraba (~lucas@109.171.244.80) (Quit: WeeChat 2.8)
[01:17:14] <jinsun_> aphysically: okay not that annoying, and f also works without predeclaring if you don't use walrus https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=74d15a4f12af4614f99f900b05236a6c
[01:17:58] <jinsun_> so somehow mypy breaks down with walrus + generics
[01:18:49] *** Server sets mode: +Ccnrtf #python-unregistered
[01:18:58] <aphysically> apparently
[01:19:22] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[01:19:23] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[01:23:09] <aphysically> jinsun_: I'll take a break and see if someone (upstream dev?) has any comments on gitter in the next hour or so and otherwise just file the problem with the example as-is as an issue on github I think
[01:23:57] <aphysically> I might spend a little time paring out extra code but not a lot cause I don't know what part of the generic thing is tripping up mypy
[01:25:25] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[01:25:54] <millido> Hi, I am confused about bytes, from the docs I am reading that bytes is a sequence of integers 2^8, BUT when I am reading a socket I don't get what I expect. Why does `sys.stdout.buffer.write(s.recv(1))` print the ascii interpretation of the byte? Is there any good ways to print the actual data
[01:27:49] <InPhase> millido: b'Hello'.hex(' ')
[01:28:45] *** Joins: beterraba (~beterraba@109.171.244.80)
[01:30:43] * aphysically visits mypy github
[01:30:46] <aphysically> https://i.imgur.com/WC9ocun.png
[01:30:58] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:32:01] *** Quits: beterraba (~beterraba@109.171.244.80) (Client Quit)
[01:32:19] *** Joins: beterraba (~beterraba@109.171.244.80)
[01:32:37] *** Quits: beterraba (~beterraba@109.171.244.80) (Client Quit)
[01:33:29] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[01:33:52] *** Joins: jinsun (~quassel@user/jinsun)
[01:33:57] <millido> InPhase: aha, that works. Thank you
[01:35:11] <aphysically> jinsun_: I think I found it? https://github.com/python/mypy/issues/9743
[01:36:06] *** Quits: willcl_ark_ (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 260 seconds)
[01:36:34] *** Joins: beterraba (~beterraba@109.171.244.80)
[01:36:37] *** Quits: beterraba (~beterraba@109.171.244.80) (Client Quit)
[01:36:47] *** Joins: Xano (~Xano@2a00:23c4:4200:a00:4b3f:b31f:ec72:827)
[01:36:56] *** Joins: beterraba (~beterraba@109.171.244.80)
[01:37:12] <jinsun> aphysically: ah then too bad
[01:37:53] <jinsun> ya seems like the exact issue you have
[01:38:39] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[01:38:39] <jinsun> making any of the first 3 conditions makes it go away
[01:38:57] <jinsun> we can try with the 4th thing also
[01:39:11] <jinsun> use some other TypeVar instead of AnyStr
[01:39:58] <aphysically> I don't know if bound=Union[str,bytes] would even be different (so it could be a suitable workaround)
[01:40:28] <aphysically> why would anything be a subtype of Union[str,bytes] but not a subtype of str or bytes individually
[01:40:36] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:41:29] <Xano> I'm trying to get the type hinting right for a class that implements __getitem__(), where keys are types, and values instances of those types: https://pastebin.com/tdLTpVyR
[01:41:30] <infobob> https://bpaste.net/YSOQ (repasted for Xano)
[01:41:50] <Xano> My IDE does not seem to be able to parse this and provide autocompletion so I'm wondering if these hints are correct
[01:41:58] <aphysically> jinsun: what an outrageously specific bug
[01:42:08] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 246 seconds)
[01:42:12] *** Joins: bukata (~lev@user/bukata)
[01:42:24] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[01:42:26] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:42:57] <aphysically> surely the actual underlying bug must be something this manifestation doesn't make very obvious
[01:43:24] <jinsun> aphysically: and too bad that it is already reported, so it is already looked at and not fixed
[01:43:31] *** lukedashjr is now known as luke-jr
[01:44:12] <aphysically> yes, but it may be worth me commenting to at least point out the bug showed up organically for at least someone
[01:44:27] <aphysically> ...and the issue probably isn't easy to search for
[01:44:52] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[01:45:23] *** Joins: califax (~califax@user/califx)
[01:45:46] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 252 seconds)
[01:45:48] <aphysically> the mypy repository doesn't seem very committed to a one-issue-per-bug/topic/issue philosophy
[01:46:44] <jinsun> mention this one in the gitter chat too, maybe someone will be more interested after seeing this weird combo
[01:46:45] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[01:47:23] <aphysically> yeah might as well
[01:47:53] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[01:48:08] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[01:48:21] *** Joins: califax (~califax@user/califx)
[01:48:29] <jinsun> maybe not too committed, but I have seen many issues closed because an already exising issue says the same thing, and here your problem is almost same, so don't really see a point in a new issue
[01:48:50] *** Quits: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com) (Quit: jarthur)
[01:50:43] <aphysically> and it's a bit rude if you already know it's a dupe, I think
[01:51:00] <jinsun> yeah
[01:51:23] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[01:51:28] <jinsun> you can just "me too" with your own examples in the same issue
[01:53:08] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:53:11] *** Quits: Akuli (~Akuli@87-94-109-81.bb.dnainternet.fi) (Quit: Leaving)
[01:57:42] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:57:43] <jinsun> Xano: do you want that getitem for the class or the instance of the class?
[01:59:21] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[02:00:04] *** Quits: mwd5650 (~mwd5650@162.154.217.34) (Quit: Leaving)
[02:00:05] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 264 seconds)
[02:00:12] <aphysically> right now my code fails for one reason or another with most of the other type checkers
[02:00:30] <aphysically> mostly because I'm using the new | annotation from future and not everything plays nice with it yet
[02:00:44] <millido> Why does "bytes([1, 2, 3, 4])[1:2].hex()" return "02", shouldn't that give "02 03"?
[02:00:47] <aphysically> and one failed hard on typeddict I think
[02:00:51] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:01:00] <aphysically> but hopefully the union support will come around soon when 3.10 starts getting used
[02:02:41] <jinsun> millido: you want `bytes([1, 2, 3, 4])[1:3].hex()` probably, although that won't have space in between
[02:03:15] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Client Quit)
[02:03:30] <grym> millido: slices are half-closed
[02:03:44] <millido> jinsun: you are right, my brain didn't understand why the second index was non-inclusive ':P
[02:04:39] *** Joins: emacspenguin (~emacspeng@c-73-126-162-47.hsd1.ma.comcast.net)
[02:06:23] <millido> grym: what do you mean by half-closed?
[02:06:31] *** Joins: Betal (~Betal@user/betal)
[02:06:48] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[02:07:06] *** Quits: beterraba (~beterraba@109.171.244.80) (Ping timeout: 250 seconds)
[02:07:08] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[02:07:36] <jinsun> the start is included in slice, but the end is not
[02:07:37] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:07:49] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[02:08:19] *** Quits: y1n (~y1n@178.115.54.79.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[02:10:16] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[02:11:28] *** Joins: akaWolf (~akaWolf@akawolf.org)
[02:11:56] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67)
[02:12:27] *** Joins: nomic (~nomic@185.192.69.207)
[02:15:01] *** Quits: rushi (~rushi@2401:4900:1f2e:39cb:e1ab:e59c:1b13:f227) (Ping timeout: 252 seconds)
[02:16:04] *** Quits: emacspenguin (~emacspeng@c-73-126-162-47.hsd1.ma.comcast.net) (Quit: WeeChat 3.2.1)
[02:16:46] *** Quits: golden_ticket (~jrand@156.146.46.161) (Quit: Leaving)
[02:16:54] <aphysically> okay https://github.com/python/mypy/issues/9743#issuecomment-932830044 and left an update on gitter too
[02:19:04] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f) (Ping timeout: 256 seconds)
[02:19:23] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[02:20:35] <aphysically> this will become my second most followed python ecosystem bug (for now)
[02:20:53] <aphysically> until I find something else that annoys me, I guess
[02:21:20] <jinsun> what was the first?
[02:21:50] *** Joins: y1n (~y1n@77.119.216.4.wireless.dyn.drei.com)
[02:22:00] <aphysically> a race condition in the rich library (the CLI one)
[02:22:08] <aphysically> mostly because it's driving me nuts
[02:23:55] <Xano> jinsun, getitem takes the class and returns an instance of that class
[02:24:00] <aphysically> typing still kinda new in Python but 3.10 does a lot for a few of the weirder cases (typeguards, paramspec), and also union ofc
[02:24:42] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[02:26:14] <Xano> jinsun, And all classes subclass Foo
[02:26:38] <jinsun> Xano: yes, but will iyou write `Foos[some_type]` or will it be `x = Foos(); x[some_type]` ?
[02:27:18] <Xano> jinsun, Ah I understand you now. Foos must be instantiated
[02:27:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[02:27:45] <Xano> It's a collection, essentially
[02:28:09] *** Quits: moog (~moog@107.77.244.136) (Quit: Leaving)
[02:28:32] <jinsun> Xano: but if you instantiate it, then x will have to be some concrete type like Foo[str], then only str will be allowed in the getitem by type checkers
[02:28:35] *** Quits: Techcable (~Techcable@168.235.93.147) (Quit: ZNC - https://znc.in)
[02:29:09] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:29:12] *** Joins: fikran (~fikran@user/fikran)
[02:29:55] <Xano> jinsun, I guess so. Is there a way to do what I want? To indicate a relation between a parameter and return type?
[02:30:26] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Remote host closed the connection)
[02:30:30] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 250 seconds)
[02:30:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:30:52] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:31:22] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:56] <aphysically> only if you don't use walrus operators
[02:32:08] <aphysically> (this is (mostly) sarcasm)
[02:32:26] <aphysically> :D
[02:33:31] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[02:33:51] <jinsun> Xano: well TypeVar is one way, but actually not really clear what you want, maybe just having one type allowed would be fine if it is a collection?
[02:34:11] <Xano> It's not a collection in the sense that all values are of the same time
[02:34:24] <Xano> Keys are all Foo subclasses, and values are instances of the keys
[02:34:57] <Xano> So if I do `x = Foos(); x[Apple]`, this yields an Apple instance
[02:35:01] *** Joins: vimart (~vimart@185.69.144.102)
[02:35:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:35:47] <Xano> But, `x = Foos(); assert isinstance(x[Apple], Apple); assert isinstance(x[Banana], Banana);`
[02:36:16] <aphysically> is this a covariance/contravariance issue?
[02:37:15] <Xano> I don't think so? It's about indicating that the return value is an instance of the type of one of the parameters
[02:39:11] <Xano> I mean there is, but that's not what I have difficulty expressing
[02:39:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:39:32] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:39:35] <jinsun> hmm so it is a collection but you want heterogeneous, nott sure if you can have that, annotating as homogeneous one will be easy, Foo -> Foo, but then you will have to cast to the exact type when you use it
[02:39:47] *** Joins: pycurious (~Adium@user/pycurious)
[02:40:18] <aphysically> will it only have apples or only oranges or whatever? or can apples and oranges be in same collection Xano
[02:41:01] <Xano> Apples and oranges can be in the same collection. But one at most of each
[02:41:01] *** Quits: FreEm1nD (~freemindm@mail.guarapari.store) (Remote host closed the connection)
[02:41:19] <Xano> Zero or one of each
[02:43:33] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:44:04] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[02:44:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:45:12] *** Joins: rushi (~rushi@2401:4900:1f2e:39cb:e1ab:e59c:1b13:f227)
[02:45:22] <jinsun> Xano: well you can make the class itself the collection with `__class_getitem__`, https://mypy-play.net/?mypy=latest&python=3.10&flags=strict
[02:45:48] <jinsun> Xano: but it will a bit weird usage of that feature, and discouraged in the docs https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__
[02:46:11] *** Joins: Wulf (~Wulf@user/wulf)
[02:46:16] <jinsun> Xano: oops forgot the gist https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=9ad696bac4898f842b1e9cbb5ad96955
[02:48:04] <Xano> jinsun, Yeah I see how that's not recommended :D
[02:48:20] <Xano> Still, thanks for reminding me of __class_getitem__ though
[02:48:50] <jinsun> yeah actually it already trips up mypy there
[02:49:03] *** Joins: pluri (~pluri@user/pluri)
[02:49:12] <jinsun> I though the type will be `Foo`,  but it was `def () -> Foo`
[02:50:07] <aphysically> Xano: wait, I think you don't want a generic class do you?
[02:50:09] <jinsun> s/though/thought
[02:50:22] <aphysically> you don't want the resolution to apples to belong to the class if the class can have things other than apples
[02:50:25] <aphysically> that should be a separate typevar
[02:51:32] <pluri> is this a good way to use the try/except pattern? is it necessary to include the except clause, even tho I raise the exception inside the try clause? https://bpa.st/5LVA
[02:51:59] <pluri> also, can I accomplish the same without the try/except pattern at all, and instead simply including the raise instruction?
[02:52:02] <jinsun> aphysically: oh ya just not making the class generic will work probably https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=9ad696bac4898f842b1e9cbb5ad96955
[02:52:10] <jinsun> Xano: ^
[02:52:15] <Xano> aphysically, The class itself isn't generic (so my class declaration might well be wrong)
[02:52:23] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[02:52:28] *** Quits: rushi (~rushi@2401:4900:1f2e:39cb:e1ab:e59c:1b13:f227) ()
[02:52:32] <tpr> pluri: why would you like to do that? re-raising without doing anything special with the exception that is
[02:52:39] <aphysically> or you can have it generic (if you need it for another reason), just don't use the generic typevar as the typevar of the method
[02:52:46] <aphysically> make a new one
[02:52:51] <jinsun> Xano: oops wrong gist https://mypy-play.net/?mypy=latest&python=3.10&flags=strict&gist=1d155d73d31569a1944bc93007a3486c
[02:53:35] <energizer> pluri: also, raise a different exception, not `Exception`, that's too general
[02:53:42] <pluri> tpr no particular reason, I just assumed it was the correct approach
[02:54:07] <aphysically> jinsun: what a coincidence someone came in asking about generics and generic classes the same day I spent the morning making sure I understood it (:
[02:54:22] <jinsun> yeah :D
[02:54:39] <Xano> OH GRMBL
[02:54:51] <jinsun> Xano: basically just don't make your class generic, just make the getitem generic, then you get what you want
[02:55:04] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:55:07] <tpr> pluri: you can simply raise the exception and let the caller to handle it, adding a separate layer of try-except doesn't help here and just complicates the code
[02:55:25] <Xano> jinsun, aphysically So I realized I had tried that and it didn't work. Digging a bit further it was another type hint that was wrong and I retrieved the Foos from a thus improperly typed instance attribute
[02:55:40] <pluri> so raising without a try/except pattern still halts the function and returns the exception to the caller? tpr
[02:55:51] <Xano> Wow, that was a silly error.
[02:56:11] <tpr> pluri: also as energizer mentioned, you should raise a more explicit exception than the base class exception, in this specific case that would/could be ValueError
[02:56:16] <Xano> aphysically, jinsun THanks for running me through this process! Despite the cause being so simple, I learned a few new things from you:)
[02:56:22] *** Joins: Samian (~Sami@user/samian)
[02:56:24] <tpr> pluri: yes
[02:56:28] <pluri> thanks tpr
[02:56:35] <tpr> pluri: exceptions will "bubble up" until someone catches them
[02:56:46] <pluri> great
[02:56:52] *** Joins: reset (~reset@user/reset)
[02:57:09] <tpr> the general case does that, there are exceptions when using asyncio event loops & threading etc. which are not relevant in your use case
[02:58:05] <aphysically> no problem :)
[02:59:17] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f)
[02:59:46] <stewie925> this is driving me nuts, I don't understand the instruction - https://www.hackerrank.com/challenges/flipping-the-matrix/problem
[02:59:54] *** Quits: manti7 (~manti7@185.107.94.249) (Quit: WeeChat 3.1)
[03:02:22] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[03:03:07] *** Noisytoot is now known as GPLv3
[03:06:04] <cluelessperson> Question, since sets aren't ordered, I'm thinking to use a dictionary simply with value of None, that sane?
[03:07:00] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:07:01] <tar_xvf> dictionarys are not ordered either
[03:07:15] <BtbN> they guarantee insertion order at least
[03:08:22] <tar_xvf> i did not know that, thanks BtbN
[03:08:57] <jinsun> why do you want ordered sets though? and why not list?
[03:09:25] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[03:10:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[03:10:34] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:10:46] <energizer> tar_xvf: dict is ordered in python 3
[03:11:04] <tar_xvf> dang i did not know that, sorry guys.
[03:11:05] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[03:11:13] <jinsun> python 3.7+
[03:11:23] <jinsun> and cpython 3.6
[03:11:25] <jinsun> not before that
[03:12:55] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f) (Quit: Client closed)
[03:13:04] <rannnn8888> Hey i make query and its take like a 6-8 sec to response i have index in the DB like this order Symbol,timestamp,Fllll,team,stats this the def query how i can make its faster :X ? https://bpa.st/LJJA
[03:13:19] *** Quits: bukata (~lev@user/bukata) (Ping timeout: 252 seconds)
[03:14:07] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[03:14:27] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[03:14:50] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:16:10] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[03:16:54] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[03:17:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[03:18:36] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Quit: dalan6236)
[03:19:16] *** Joins: dalan6236 (~dalan@110-175-157-10.tpgi.com.au)
[03:20:47] *** Quits: unbuggedware (~unbuggedw@2602:fe90:300:1a2::40e1:8aec) (Ping timeout: 240 seconds)
[03:20:52] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[03:21:26] *** Joins: clonebaby (~persephon@modemcable052.109-176-173.mc.videotron.ca)
[03:22:00] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[03:22:02] <clonebaby> hi peeps, I'm looking for recommendations for a python module that can render graphs in the terminal
[03:22:03] *** Joins: unbuggedware (~unbuggedw@2602:fe90:300:1a2::40e1:8aec)
[03:22:11] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[03:23:38] <clonebaby> need to visualize some data
[03:24:00] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[03:24:14] <energizer> clonebaby: most terminals can't display images very well
[03:24:34] <ali1234> graphs or charts?
[03:25:06] *** Joins: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com)
[03:25:14] <ali1234> i mean you don't need to be able to display images to render a bar chart
[03:25:22] <energizer> i think those are synonyms?
[03:25:33] <ali1234> i've certainly seen some very nice looking ones don't on the terminal
[03:25:42] *** Quits: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com) (Client Quit)
[03:25:55] <ali1234> graphs and charts are sometimes the same. but there's also the mathematical type of graph... with nodes and edges
[03:26:04] <ali1234> so sometimes they are not the same
[03:27:02] <clonebaby> I'm going to start some simple bar charts to visualize the data
[03:27:28] <energizer> https://github.com/mkaz/termgraph
[03:27:33] <jinsun> termplotlib looking good, https://github.com/nschloe/termplotlib
[03:27:34] *** Joins: pycurious (~Adium@user/pycurious)
[03:29:23] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:6047:4a86:f8b1:d9a8) (Quit: aac)
[03:30:03] *** Quits: waxfire (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:15] *** Joins: waxfire (~waxfire@65.119.2.240)
[03:30:26] <ali1234> rannnn8888: use a limit on the query instead of extracting every result and slicing the first 10 in python
[03:30:39] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[03:31:50] <ali1234> in raw SQL it would just be "LIMIT 10". whatever library you are using should have an equivalent
[03:31:57] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:57] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[03:32:07] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:32:35] <rannnn8888> ali1234 how u mean limit ? can example ? i try something like this :X https://bpa.st/WBWQ
[03:32:36] <clonebaby> I like the bar charts that task-warrior displays, is that written in python?
[03:32:43] *** Joins: brabrax (~brabrax@user/brabrax)
[03:33:01] <rannnn8888> the order by and the count take long time
[03:33:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[03:33:31] *** Joins: CodePoint (~CodePoint@193.27.13.236)
[03:33:43] *** vinleod is now known as vdamewood
[03:34:49] <energizer> clonebaby: https://github.com/GothenburgBitFactory/taskwarrior
[03:34:57] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[03:36:00] *** Joins: califax (~califax@user/califx)
[03:37:25] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[03:37:48] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[03:38:00] *** Joins: vimart (~vimart@185.69.144.102)
[03:42:05] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Read error: Connection reset by peer)
[03:44:21] *** Joins: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com)
[03:45:31] *** Joins: asgas (~asgas@c-24-30-27-91.hsd1.ga.comcast.net)
[03:46:11] <asgas> I can use python 2/3 to interface with a C/C++ library correct? Like have python 2 or 3 use a dll/so dynamic library?
[03:46:31] <meejah> asgas: yes
[03:46:47] <meejah> asgas: the usual advice is "use cffi"
[03:47:51] <asgas> What if I want to use said C/C++ code with pyqt5?
[03:48:22] *** Quits: flokuehn (~flokuehn@i5e86b305.versanet.de) (Ping timeout: 252 seconds)
[03:49:41] <BtbN> Interfacing with arbitrary C++ code from Python could be quite painful though. If it's even possible.
[03:50:26] *** Joins: flokuehn (~flokuehn@mue-88-130-54-212.dsl.tropolys.de)
[03:51:20] <asgas> Which would be less painful for a GUI for a C library: Pyqt5 or using C++ with qt5 directly?
[03:52:26] <meejah> for Qt, the python and c++ apis are "pretty similar" .. so probably the latter? (considering e.g. "building it and shipping it" too)
[03:53:50] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:54:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:54:55] <BtbN> Adding python into that mix seems redundant
[03:55:04] <BtbN> you need to wrap two libraries, instead of none
[03:55:40] *** Joins: Macuser (~Macuser@216.30.159.201)
[03:58:22] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[03:58:30] <InPhase> asgas: If you're writing an interface for something largely in C, using C++ instead and using Qt directly is likely to be more straightforward.
[03:59:10] *** Joins: pycurious (~Adium@user/pycurious)
[03:59:32] <asgas> Fair enough InPhase
[04:00:15] <InPhase> asgas: If you're already planning a Python interface wrapper for it, maybe you'd consider a different decision.  The gui code would end up pretty similar though, so there is no reason to work at uniting the two languages just to make the gui.
[04:03:13] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:03:38] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Quit: fail)
[04:03:41] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[04:04:26] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[04:04:58] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[04:05:59] *** Quits: asgas (~asgas@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[04:09:20] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[04:09:20] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[04:10:44] *** GPLv3 is now known as Noisytoot
[04:11:22] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[04:12:20] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:12:34] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[04:16:59] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:17:44] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:18:10] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:19:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:21:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:21:45] *** Quits: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com) (Quit: jarthur)
[04:23:16] *** Joins: pycurious (~Adium@user/pycurious)
[04:24:01] *** Joins: byte4byte (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net)
[04:26:16] *** Joins: vicfred (~vicfred@user/vicfred)
[04:26:31] *** Quits: CodePoint (~CodePoint@193.27.13.236) (Quit: CodePoint)
[04:27:58] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[04:29:05] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[04:29:27] *** Joins: pycurious (~Adium@user/pycurious)
[04:29:51] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[04:30:59] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:33:14] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:33:26] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[04:34:17] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[04:35:47] *** Joins: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net)
[04:36:04] *** Parts: iryd (~jamesm@c-174-56-254-152.hsd1.ga.comcast.net) ()
[04:36:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:37:41] *** Joins: vlm (~vlm@user/vlm)
[04:38:32] *** Joins: fikran (~fikran@user/fikran)
[04:39:43] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[04:41:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[04:41:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:42:34] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[04:45:34] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:45:58] *** Joins: NeuroWinter (~neuro@107.172.219.235)
[04:49:59] *** Joins: califax- (~califax@user/califx)
[04:50:03] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:50:56] *** Joins: semeion (~semeion@user/semeion)
[04:52:17] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 264 seconds)
[04:52:30] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:52:53] *** brabrax_ is now known as brabrax
[04:53:36] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:53:37] *** califax- is now known as califax
[04:55:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[04:57:53] *** Joins: RoadrunnerWMC (~Roadrunne@46.101.129.38)
[04:58:15] *** Joins: pycurious (~Adium@user/pycurious)
[04:58:18] *** Quits: reasonman (~brandon@cpe-24-28-68-153.austin.res.rr.com) (Remote host closed the connection)
[05:02:33] *** Parts: MTecknology (~Mike@user/mtecknology) (You saw me, but now you don't.)
[05:03:48] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:05:02] *** Quits: linux-phaedrus (~linux-sis@104.36.253.60) (Quit: Leaving)
[05:06:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:07:30] *** Joins: SteveD3 (~nope@107.147.183.220)
[05:14:18] *** Joins: dez (uid92154@user/dez)
[05:15:26] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2.1)
[05:16:08] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:16:50] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[05:17:09] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[05:17:41] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[05:18:35] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5)
[05:20:32] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[05:20:55] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[05:21:17] *** Quits: nanook (~nanook@137.184.134.238) (Quit: The Lounge - https://thelounge.chat)
[05:22:24] *** Joins: Macuser (~Macuser@216.30.159.201)
[05:23:01] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5) (Ping timeout: 252 seconds)
[05:23:34] *** Joins: Lewky (~Lewky@146.70.50.98)
[05:24:04] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 252 seconds)
[05:24:53] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5)
[05:25:18] *** Joins: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com)
[05:25:37] *** Joins: xiongxin (~quassel@119.123.103.10)
[05:26:08] <RoadrunnerWMC> I'm having some trouble with codecs.iterdecode(), I can't get it to do anything useful no matter what type of input I give it
[05:26:53] <RoadrunnerWMC> If you give it a bytes, it throws a TypeError, so I think it's supposed to take an iterable of bytes objects instead
[05:27:32] <RoadrunnerWMC> ...never mind, I figured it out, sorry
[05:28:06] <InPhase> *hold up rubber duck*
[05:28:09] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5) (Remote host closed the connection)
[05:28:22] <RoadrunnerWMC> (I forgot that you have to do bytes([x]) and not bytes(x) to convert an int to bytes)
[05:28:23] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[05:28:23] <RoadrunnerWMC> Yeah :)
[05:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[05:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:33:01] *** Quits: Lewky (~Lewky@146.70.50.98) (Ping timeout: 252 seconds)
[05:34:56] *** Joins: Lewky (~Lewky@146.70.50.10)
[05:35:35] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:38:58] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[05:39:08] *** Quits: jarthur (~jarthur@cpe-70-114-141-26.austin.res.rr.com) (Quit: jarthur)
[05:40:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:44:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:46:59] *** Joins: gggp (~textual@60.10.194.45)
[05:48:30] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[05:50:29] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[05:53:19] <Soni> when you `raise FooError` in an `except BarError`, does `FooError` gain `BarError`'s value and traceback and stuff?
[05:54:39] <leduyquang753> If FooError doesn't extend BarError then no.
[05:54:52] <leduyquang753> The exception won't get caught.
[05:55:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:56:43] *** Joins: sbrown (~sbrown@66.44.16.44)
[05:57:46] *** Quits: drew (~drew@user/drew) (Read error: Connection reset by peer)
[05:58:42] *** Joins: drew (~drew@user/drew)
[05:59:16] <nedbat> Soni: the new exception is chained to the old one
[06:00:13] <Soni> how do you make a class?
[06:01:09] *** Joins: pycurious (~Adium@user/pycurious)
[06:01:14] <leduyquang753> Learn about declaring a class.
[06:01:28] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[06:01:45] <leduyquang753> The first question, I just realized I misread that one.
[06:02:07] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:02:24] <Soni> at runt... oh yeah you can just do that
[06:03:10] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9027:b6b5:d361:d3bb) (Read error: Connection reset by peer)
[06:03:39] *** Joins: Fiji (~Fiji@user/fiji)
[06:04:17] *** Joins: korg815 (~korg815@user/korg815)
[06:04:28] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[06:05:05] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[06:05:23] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:05:30] *** Quits: korg815 (~korg815@user/korg815) (Client Quit)
[06:05:54] *** Joins: korg815 (~korg815@user/korg815)
[06:06:06] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[06:07:55] <nedbat> Soni: i don't understand your last message
[06:09:01] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:09:27] <Soni> nedbat: we may have found a way to implement antichecked exceptions
[06:09:37] <Soni> it is awful
[06:10:01] <InPhase> Soni: Do I want to know what an antichecked exception is supposed to be?
[06:12:42] <BrenBarn> is this what you were talking about on python-ideas?
[06:13:00] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:15:43] *** Joins: c4017__ (~c4017@2604:3d08:747f:7c90:7441:2bf3:2c2c:6e49)
[06:16:48] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[06:18:10] *** Quits: bn_work (uid268505@id-268505.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[06:18:15] *** Joins: holms (~macpro@in-84-15-183-194.bitemobile.lt)
[06:19:21] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:19:43] *** Quits: c4017_ (~c4017@2604:3d08:747f:7c90:6970:bd0b:559e:756f) (Ping timeout: 268 seconds)
[06:21:18] <nedbat> soni doesn't seem interested in discussing the topics they start.  kind of rude, but there it is.
[06:21:45] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:21:59] <hexology> i was just discussing checked exceptions in the python discord today
[06:22:00] <Soni> nedbat: we're fine with discussing them, we're not fine with arguing about them
[06:22:07] <Soni> (which is what usually ends up happening)
[06:22:44] <nedbat> Soni: yes, that's usually what happens.  i recommend not starting the topic then.
[06:22:47] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:ec33:16de:d800:56f6)
[06:22:55] <hexology> bolton on checked exceptions in python would be really hard in general because _so many_ things can raise runtime exceptions
[06:22:56] <aac> why can't i do if elem not in list: ?
[06:23:06] <nedbat> aac: you can.  show us what happened.
[06:23:57] <aac> nvermind it was another error
[06:24:09] <hexology> you'd need some kind of special `typing.wont_raise(TypeError, foo(x, y, z))` thing that is analogous to `typing.cast()`
[06:25:17] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:25:35] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:26:10] <aac> glad you said that..saved me a lot of problems :⁾
[06:26:12] <Soni> hexology: checked exceptions suck anyway
[06:26:29] <hexology> i have been using them in nim, i like it for the most part
[06:26:29] <Soni> but yes uh, this idea kind of works... but it's missing something...
[06:27:18] <hexology> one thing i would also like (which is much more tractable) is two subclasses of NoReturn: AlwaysRaises and RunsForever
[06:27:21] <Soni> how do you mess with __cause__/__context__ for fun?
[06:27:24] <nedbat> Soni: you're talking about a thing you don't want to talk about again
[06:27:52] <Soni> "checked exceptions" but it's because your function is actively checking that you actually intended to throw them.
[06:27:57] <Soni> so, antichecked exceptions
[06:28:06] <Soni> because that's the reverse of checked exceptions
[06:28:31] *** Quits: gcells (gcells@user/gcells) (Quit: WeeChat 3.2)
[06:28:34] <Soni> anyway this mostly works but uh
[06:29:03] <Soni> how do you make `raise` raise without messing with __cause__/__context__/etc?
[06:29:49] <Soni> what does `raise` do, in addition to raising?
[06:30:06] <hexology> i think a standalone `raise` without any arguments will re-raise the currently-handled exception mostly as-is
[06:30:11] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:30:24] <Soni> well that won't work in this case
[06:30:28] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[06:30:30] <Soni> and this is in a context manager
[06:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[06:31:00] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[06:31:02] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:31:31] *** Quits: drew (~drew@user/drew) (Read error: Connection reset by peer)
[06:32:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:32:31] *** Joins: drew (~drew@user/drew)
[06:32:54] <hexology> maybe there is wisdom in the docs: https://docs.python.org/3/reference/simple_stmts.html#raise . for example, i already learned that you can write `raise TypeError` and it will be turned into `raise TypeError()`
[06:33:26] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[06:33:30] *** Joins: MTecknology (~Mike@user/mtecknology)
[06:33:57] <hexology> yep, it's in there
[06:34:03] <hexology> `raise <expr> from None`
[06:34:14] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:34:16] <hexology> that suppresses __context__
[06:35:09] <Soni> but how do you keep it from changing the __context__
[06:35:19] <hexology> oh, if there already is a context?
[06:35:21] *** Joins: blei (~blei@209.201.38.106)
[06:35:24] <Soni> yeah
[06:35:39] <blei> hi, can __new__ access self?
[06:36:05] <nedbat> blei: __new__ isn't an instance method, it's a class method.  it's also really rare to write __new__ methods at all
[06:36:40] <hexology> blei: `__new__` is expected to create and return an instance. so the new instance that you create *is* "self", it just isn't called "self" yet
[06:36:45] <nedbat> blei: what do you want to do in __new__?
[06:36:46] <blei> i have an idea regarding the __new__ method. I am using Brython which is a compliant Python implementation in the browser. I think the class should return a Promise. i was thinking of trying to use __new__ for this
[06:37:05] <nedbat> blei: why not use a function instead of a class?
[06:37:28] <hexology> if the reason is "because i want to do async i/o upon instantiation", consider _not_ doing that
[06:37:30] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[06:37:34] <energizer> how is brython related to your question blei?
[06:37:40] <hexology> (consider not doing i/o upon instantiation at all)
[06:37:45] <blei> the browser is funny. if i do myvar = myClass() then i can't promise chain on that itself
[06:38:24] <hexology> because it doesn't make sense to?
[06:38:25] <MTecknology> I'm struggling a bit with docutils. https://dpaste.com/8JTJ5URPS  that test on line 31 shows that I'm definitely reaching that point as many times as I expect; however, I wind up with only one row in the table (with correct data in the correct columns).
[06:38:39] <energizer> blei: usually creating an object doesn't do I/O
[06:38:48] <MTecknology> It seems like this is one of those things that should be too simple to screw up, but I managed.
[06:38:53] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[06:39:15] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[06:40:13] <pycurious> MTecknology: row = nodes.row() —> row = copy.deepcopy(nodes.row()) perhaps?
[06:40:13] <blei> energizer imagine a class that represents remote hardware, such as an EC2 instance or Redshift database. Redshift() instantiates your cluster, and returns a promise
[06:40:39] <aphysically> I don't know, I don't like using explicitly bound generic classes if we don't know why it's breaking mypy so I'd rather avoid them and any other weird bugs until whatever problems are fixed jinsun
[06:40:53] <aphysically> the bug is just a tad too weird to inspire confidence in generic classes
[06:40:58] <pycurious> MTecknology: also tbody.extend([row]) —> tbody.extend([rows]) perhaps?
[06:41:00] <nedbat> blei: i think the idea is that you can create the object doing no IO, and then a .create() method would do the IO
[06:41:39] <hexology> Soni: i don't think that's possible, given that the runtime itself is what messes with __context__, after the exception-raising process has moved beyond the control of the programmer
[06:41:55] <hexology> at least, that's my impression of the docs
[06:42:03] <energizer> blei: or don't have a public constructor and only provide a function
[06:42:10] <aphysically> (in particular, it's not obvious that it's a particular edge case that's failing and that bound generic classes aren't just broken in general somehow under the hood)
[06:42:20] *** Joins: KombuchaKip (~kip@192.252.230.5)
[06:42:21] <pycurious> MTecknology: does that make sense at all?
[06:42:25] <MTecknology> pycurious: HAH! PERFECT!!! s/[row]/rows/
[06:42:28] * MTecknology hugs
[06:42:39] *** Joins: noarb (~noarb@user/noarb)
[06:43:04] <aphysically> I can replace typevars without specifying what they're bound to and make a replacement comment with what they should be bound to and link to a tracking bug or something maybe? jinsun (in the code itself)
[06:43:15] <energizer> i'm not sure what happens if you do `async def __new__()`
[06:43:35] <pycurious> MTecknology: You are most welcome. :) Glad I could help.
[06:43:45] <aphysically> like FixedAnyStr = TypeVar("FixedAnyStr")  # binding this is broken in mypy https://blah.com
[06:43:47] *** Quits: Dotz0cat (~Dotz0cat@h27.174.40.162.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[06:43:48] <hexology> maybe it just returns a coroutine? that'd be kind of clever/tricky (albeit bad design)
[06:44:04] <hexology> Soni: another option is to have a global dict stashed away somewhere that keeps a mapping between exceptions' object ids and their original contexts, so that you can query or restore those contexts later somehow. but i don't think you can stop the __context__ from being changed in the first place
[06:44:07] *** Joins: Dotz0cat (~Dotz0cat@h228.253.19.98.static.ip.windstream.net)
[06:44:27] <MTecknology> pycurious: What a coincidence, I'm quite happy as well!!   :D
[06:44:56] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8402:fbcb:cf37:fd68)
[06:44:59] *** Quits: EGH (~EGH@185.25.195.104) (Ping timeout: 250 seconds)
[06:45:10] <blei> if you do async def __new__ it could contain a Future. you can then wrap this future in a Promise when you instantiate the class
[06:45:22] <hexology> yes... but why
[06:45:28] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[06:45:43] <pycurious> I've a question for you. I'm running tornado - and my web app takes around 10 seconds on this line: tornado.ioloop.IOLoop.current().start() - which is basically a asyncio eventloop start I think - I'm at a loss on how to debug this. The profilers I've tried won't go inside that asyncio eventloop. PDB doesn't like the forked process. Any ideas on how to debug this, or what could be wrong?
[06:45:44] <blei> well because it's not valid to instantiate your class if it does any real work
[06:46:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:46:07] <hexology> pycurious: you're doing this _inside_ your app somewhere?
[06:46:23] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[06:46:23] <hexology> or are you seeing a long startup time with a 10 second delay at that line?
[06:47:13] <blei> however in order for __new__ to return anything interesting, it'd need to access self, at least according to my current implementation. i have not used new (or many dunder methods) before i only see access to cls
[06:47:23] <pycurious> hexology: I'm binding to 4 ports, running 4 processes and then starting IOLoop.current().start() in each process.
[06:47:40] <pycurious> everything works after 10 seconds
[06:47:52] *** Joins: fikran (~fikran@user/fikran)
[06:47:53] *** Joins: lethu (~lethu@user/lethu)
[06:49:14] <aphysically> jinsun: I would say never use walrus operators with type checking instead, but I have too much regex in my code to commit to that :P
[06:50:27] <hexology> pycurious: that certainly doesn't seem like it should take 10 seconds in total
[06:50:30] <blei> I can share my code
[06:50:36] <blei> https://gcdn.pbrd.co/images/FiUi9uRmDqk9.png
[06:50:52] <hexology> blei: can you share that as text, and not as a screenshot? use https://bpa.st/
[06:51:00] <blei> i can't
[06:51:25] <hexology> also i strongly suggest that doing "interesting" things in __new__ is explicitly an anti-pattern and code smell
[06:51:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:51:56] <hexology> and i already explained how to "access self" in __new__: you are supposed to *create* the thing that will eventually become "self", ergo you should just create it and then you can do whatever you want to it
[06:51:59] <Soni> heh
[06:52:06] <Soni> figured out how to do it
[06:52:10] <hexology> how?
[06:52:41] <blei> you said people hardly ever do anything with __new__. sounds like it is under-explored. code-smell is not a real thing BTW, just something offensive you read on the internet
[06:52:58] <hexology> no, it's something i smell in bad code
[06:53:09] <hexology> and yes, i see the problem right here: move the ec2 and describeInstances stuff to a separate method that isn't __init__
[06:53:10] <blei> well, my code is awesome.
[06:53:26] <hexology> doing i/o in __init__ is stinky and doing it in __new__ is even stinkier
[06:53:32] <blei> however, i'd like to refactor it more. in particular, this object should provide a nice interface to the promise it returns
[06:53:47] <blei> see, that's just offensive. you should be learning new patterns from my code. patterns which I invented.
[06:53:51] <pycurious> how do you debug asyncio eventloop problems - whats taking it so long to start? how do i profile that code?
[06:54:03] <hexology> so did you come here to show off your unsung genius or ask for advice?
[06:54:21] <blei> not to be insulted that's for sure
[06:54:23] <hexology> my advice is simple: instead of Bastion().then().then(), do Bastion().setUp().then().then()
[06:54:29] <Soni> hexology: with _hack(desired_context): raise exc
[06:55:11] <blei> hexology i'm thinking that doesn't make sense. here's why - it's invalid to do b = Bastion() without doing b.then, because you'll never know when you can use b unless it's part of a promise chain
[06:55:16] <pycurious> nedbat: In case you have time - any thoughts on my problem by any chance? Would love to hear your thoughts on it. Thanks.
[06:56:17] <hexology> blei: that's fine, although i think your is_bastion_running() method should help take care of it. you can also do what nedbat suggested and make a newBastion() function that sidesteps the issue
[06:56:54] <hexology> pycurious: is it still slow if you run it in the main process without the 4 subprocesses?
[06:57:51] <pycurious> hexology: http_server.start(num_processes=1) — even this takes 10 seconds
[06:58:32] *** Quits: emerent (~quassel@p200300cd57485570ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:58:44] <pycurious> but the actual time spent happens here - tornado.ioloop.IOLoop.current().start()
[06:59:08] <aphysically> jinsun: as bad as it is I might just redefine AnyStr itself to TypeVar("AnyStr"), then it's easy to change if mypy is ever fixed
[06:59:14] *** Joins: aknot (~aknot@2603:900a:1503:17bb:e9c4:1cd2:d8e2:66ca)
[06:59:27] <aphysically> (just delete the redefinition)
[06:59:58] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Ping timeout: 260 seconds)
[07:00:21] <aphysically> that keeps as much code as correct as possible for the benefit of working type checkers, i.e. if I just comment it out
[07:00:32] *** Quits: drew (~drew@user/drew) (Read error: Connection reset by peer)
[07:00:43] *** Joins: drew` (~drew@user/drew)
[07:00:53] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:01:05] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[07:01:07] *** drew` is now known as drew
[07:01:24] <MTecknology> Am I looking in the wrong place for documentation? I'm trying to learn how to correctly use docutils.nodes and I keep running into things like this - https://docutils.sourceforge.io/docs/ref/doctree.html#reference
[07:01:46] *** Joins: emerent (~quassel@p54a3e5dc.dip0.t-ipconnect.de)
[07:02:05] <energizer> i think the number of people who understand docutils is pretty small
[07:02:10] <hexology> pycurious: it might be helpful to share your code, because that certainly doesn't happen in my tornado apps..
[07:02:46] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 260 seconds)
[07:02:58] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[07:03:01] <MTecknology> It's definitely an interesting beast
[07:03:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[07:04:06] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[07:04:32] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[07:04:49] <pycurious> hexology: its a large project  - and i cant share it unfortunately. But I'd appreciate if you have any ideas or pointers on how to get profile/debug information on the asyncio eventloop? How do i know what blocking it?
[07:05:12] <sbrown> MTecknology: unfortunately you're looking in the right place, I wish docutils had better docs
[07:05:52] <MTecknology> bummer... maybe I'll have to get frustrated enough to try to help fix that
[07:06:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:06:59] <blei> it's true; as the code is written you could call b = Bastion() and then later b.wait_for_bastion(None).
[07:07:15] <blei> however, what about the concept of a Singleton. there is one and only one bastion. b = Bastion() is your bastion
[07:07:34] <MTecknology> I /finally/ finished building a sphinx-doc extension that lets me keep an "inventory" of hosts like this https://dpaste.com/5YRW6TLFL and then spit it out in documents with `.. hostlist:: <group> <svclvl>`.
[07:08:23] <MTecknology> The column widths are even nicer than when left to the simple table builder.  All that's left is to figure out enough docutils to wrap one of these fields in a link.
[07:08:50] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Ping timeout: 260 seconds)
[07:08:55] <sbrown> MTecknology: Nice. I found my way to the docutils docs when I was working on an extension too ... ended up just browsing the source repository of docutils and sphinx to get what I needed.
[07:09:04] <MTecknology> The equivalent of   f'<a href="{url}">{hostname}</a>'
[07:09:23] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:09:26] <MTecknology> lol, that's pretty much what I've been doing
[07:10:17] <MTecknology> I still need to look up and learn/understand that  def Foo(string: str) -> int:  syntax
[07:11:54] <sbrown> MTecknology: https://docs.python.org/3/library/typing.html
[07:12:12] <sbrown> The sentence under the first code example spells it out.
[07:12:28] <blei> the python docs actually discuss overriding __new__ in the case that you wanted a Singleton https://www.python.org/download/releases/2.2/descrintro/#__new__
[07:12:34] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3d14-a85d-f173-86d5.res6.spectrum.com)
[07:13:31] <blei> that's a heck of a coincidence. i barely remember singletons from C++. but it makes sense, if you want a class to instantiate a reference to a remote object, it's a 'singleton'
[07:13:54] <MTecknology> "Subtypes are accepted as arguments." ... headdesk, I instantly understand why "just try it" wasn't working.
[07:14:15] *** Joins: desophos (~desophos@2601:249:1680:a570:9495:66ea:ccc2:b869)
[07:14:22] *** Parts: SteveD3 (~nope@107.147.183.220) ()
[07:15:03] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:16:16] <blei> since modules are singletons i could refactor to a module instead of a class
[07:16:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[07:16:23] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[07:17:12] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[07:19:07] <sbrown> MTecknology: Reminds me of the saying: "A week in the lab can save you an hour in the library."
[07:19:59] <blei> https://en.wikipedia.org/wiki/Generation_effect
[07:20:37] <desophos> if i use mock.patch and then launch a new python subprocess, does the mock.patch still apply in that subprocess? if not, how can i patch attributes in a subprocess?
[07:20:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[07:21:22] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[07:21:39] <desophos> (i'm asking because i tried and it didn't work, so i wanted to know if i'm just doing something wrong)
[07:22:50] <MTecknology> sbrown: lol, a good thing to remember, yeah... which is why I tend to go do documentation first, especially when documenting documentation. Unfortunately, I'm finding documenting this documentation to be a bit of a documentation challenge because the documentation of the documentation tools is lacking a bit of documentation. Fortunately, ... I'll knock it off now. :P
[07:23:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:23:24] <blei> just reimplement pandoc using literate programming with esperanto and assembler
[07:23:26] <MTecknology> In this case, it was a quick <I wonder if?> <nope... this is for later learning>
[07:23:28] <sbrown> MTecknology: I'm with you.
[07:24:08] <MTecknology> Did you ever get into the whole RSTStateMachine thing?
[07:24:34] <MTecknology> RSTReaderStateMachine* ?
[07:25:17] <MTecknology> That's about the point where I realized I'm in way over my head and 100% looking in the wrong spot for my answer. :P
[07:25:37] *** Quits: LiftLeft (~LiftLeft@154.21.114.38) (Ping timeout: 252 seconds)
[07:26:43] <pycurious> supakeen: ping
[07:27:10] *** Joins: rsrx (~rsrx@202.58.196.207)
[07:27:12] *** Joins: OPK (~OPK@user/opk)
[07:29:08] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[07:29:26] <sbrown> MTecknology: I did not. I traced down the bits I needed to make a custom directive extension with autodoc support and that was about it.
[07:30:34] <blei> what happens if you provide grex with every python file ever written
[07:30:44] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[07:31:05] *** Joins: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:90f7:f04:5e22:ef89)
[07:31:13] *** Joins: djhankb (~djhankb@208.113.164.68)
[07:31:49] *** Quits: rsrx (~rsrx@202.58.196.207) (Ping timeout: 252 seconds)
[07:34:34] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[07:34:46] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:ec33:16de:d800:56f6) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:58] <MTecknology> Wooo! I made a link!
[07:37:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:37:37] <MTecknology> https://dpaste.com/3R3TX8B5A
[07:39:54] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[07:41:29] <sbrown> MTecknology: That's generated from Sphinx directives?
[07:42:25] *** Joins: erica5 (~erica@user/erica)
[07:42:30] *** Joins: comerijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:42:41] *** Joins: khrbt (~znc@user/khrbt)
[07:43:02] *** Joins: Warped (~Warped@user/warped)
[07:43:23] *** Joins: themill_ (~stuart@debian/stuart)
[07:43:28] *** Joins: Maikel8 (~Maikel@130.61.63.136)
[07:43:32] *** Joins: tudor_ (~tudor@tomka.hu)
[07:43:41] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[07:43:42] *** Joins: feoh7 (~feoh@137.184.104.30)
[07:43:56] *** Joins: Anarchic` (~Anarchic@getlegit.co.uk)
[07:44:11] *** Joins: majors_ (~majors@user/majors)
[07:44:22] *** Joins: luva4 (~luva@5.180.62.230)
[07:44:24] *** Joins: Mathisen_ (mathisen@about/windows/staff/mathisen)
[07:44:29] *** Joins: Trashlord__ (~trash@user/trashlord)
[07:44:35] *** Joins: gerty5 (~gerty@user/gerty)
[07:44:46] *** Joins: pmcnabb0 (~pmcnabb@user/pmcnabb)
[07:44:56] *** Joins: sunyibo_ (~dorsch@5.2.75.229)
[07:45:05] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[07:45:05] *** Joins: argoneus (~argoneus@argoneus.com)
[07:45:07] *** Joins: neolem0 (~neolem@gueuti.fr)
[07:45:12] *** Joins: Trieste_ (T@user/pilgrim)
[07:45:18] *** Joins: fluter- (~fluter@user/fluter)
[07:45:22] *** Joins: trench_ (trench@user/trench)
[07:45:27] *** Joins: rud0lf- (rud0lf@user/rud0lf)
[07:45:28] *** Joins: notevil_ (~notevil@user/notevil)
[07:45:31] *** Joins: comruminoAlt (~comrumino@li87-103.members.linode.com)
[07:45:34] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[07:45:35] *** Joins: nedbat_ (~nedbat@python/psf/nedbat)
[07:45:36] *** Joins: Phase_ (~phase@user/phase)
[07:45:37] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[07:45:39] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[07:45:41] *** Joins: dstein64- (~dstein64@dannyadam.com)
[07:45:45] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[07:45:54] *** Joins: catdog2 (~quassel@2001:470:50f7:cdcd::cd1)
[07:45:55] *** Joins: cluelessperson_ (~cluelessp@user/cluelessperson)
[07:45:58] *** Joins: tofran4 (~tofran@37.189.158.134)
[07:45:59] *** Quits: Trashlord (~trash@user/trashlord) (Killed (NickServ (GHOST command used by Trashlord__)))
[07:45:59] *** Joins: Retr0id5 (~Retr0id@user/retr0id)
[07:46:06] *** Trashlord__ is now known as Trashlord
[07:46:09] *** Joins: llua` (~llua@zsh/developer/llua)
[07:46:10] *** Joins: jramsay (~lack@user/lack)
[07:46:10] *** Joins: _0az30 (~az0@user/az0)
[07:46:12] *** Joins: shlomif (~shlomif@87.68.240.138.adsl.012.net.il)
[07:46:16] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[07:46:27] *** Joins: Milos_ (~Milos@user/milos)
[07:46:28] *** Joins: encukou (quassel@nat-pool-brq-t.redhat.com)
[07:46:32] *** Joins: bdeshi- (~bdeshi@bdeshi.space)
[07:46:35] *** Joins: KSaunder1on (~user@142.93.152.208)
[07:46:36] *** Joins: Dotz0cat_ (~Dotz0cat@h228.253.19.98.static.ip.windstream.net)
[07:46:36] *** Joins: gegensch1in (~james@ec2-52-91-126-104.compute-1.amazonaws.com)
[07:46:43] *** Joins: botfather (~botfather@shell2.dds.nl)
[07:46:43] *** Joins: Koffa_ (jkohvakk@user/koffa)
[07:46:46] *** Joins: kcrk_ (~kcrk@user/kcrk)
[07:46:49] *** Joins: dthpulse_ (~quassel@podciarou.sk)
[07:46:50] *** Joins: lucifero (~satan@user/belphegor666)
[07:46:50] *** Joins: randall_ (~randall@user/randall)
[07:46:50] *** Joins: loworder1it (~dave@s0106e81cba1736ea.ss.shawcable.net)
[07:46:52] *** Joins: supakeen_ (~user@python/site-packages/supakeen)
[07:46:53] *** Joins: wolfdale2 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[07:46:56] *** Joins: greknod27 (~grek@120.88.171.98)
[07:46:58] *** Joins: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net)
[07:47:00] *** Joins: NeilHanlon (~kneel@rockylinux/infra/neil)
[07:47:02] *** Joins: sabet- (~sabet@user/sabet)
[07:47:03] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:47:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (cadmium.libera.chat (Nickname regained by services)))
[07:47:03] *** finn_elija is now known as FinnElija
[07:47:08] *** Joins: ikwyl6_ (~ikwyl6@2.58.44.226)
[07:47:09] *** Joins: akaWolf1_ (~akaWolf@akawolf.org)
[07:47:10] *** Joins: thnee1 (~thnee@h-85-24-144-199.A328.priv.bahnhof.se)
[07:47:12] *** Joins: oldguy2 (~oldguy@user/oldguy)
[07:47:13] *** Joins: Henry151_ (~bishop@user/henry151)
[07:47:20] *** Joins: thm_ (~thomas@fedora/thm)
[07:47:20] *** Joins: trashbird3 (~trashbird@user/trashbird)
[07:47:27] *** Joins: mrtnt_ (~Martin@2001:ad0:1:1:da9e:f3ff:fe4a:8dd0)
[07:47:30] *** Joins: MTeck (~Mike@user/mtecknology)
[07:47:32] *** Jigsy` is now known as Jigsy
[07:47:34] *** Joins: wils (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[07:47:34] *** Joins: tar_xvf_ (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:47:34] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[07:47:34] *** Joins: visl (visl@user/visl)
[07:47:53] *** Joins: operationa1 (~operation@imgonnaf.art)
[07:47:53] *** Joins: Russell- (russell@bnc4free/staff/russell)
[07:47:53] *** Joins: Celelibi_ (celelibi@user/celelibi)
[07:47:53] *** Quits: holms (~macpro@in-84-15-183-194.bitemobile.lt) (Quit: WeeChat 3.3)
[07:47:53] *** Joins: justache0 (~justache@user/justache)
[07:49:08] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[07:50:38] *** Quits: wolfdale2 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Client Quit)
[07:50:38] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 252 seconds)
[07:50:38] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 252 seconds)
[07:51:28] *** Quits: Maikel8 (~Maikel@130.61.63.136) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: nbao (~nbao@187.20.181.193) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: sandb0y (~pirate@user/sandb0y) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[07:51:40] *** Quits: jramsay (~lack@user/lack) (Quit: No Ping reply in 180 seconds.)
[07:51:40] *** Quits: feoh7 (~feoh@137.184.104.30) (Quit: Ping timeout (120 seconds))
[07:51:50] *** Quits: dulanic (~dulanic@47.187.144.163) (Read error: Connection reset by peer)
[07:51:50] *** Quits: vicfred (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[07:51:50] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[07:51:50] *** Quits: Mathisen_ (mathisen@about/windows/staff/mathisen) (Quit: ZNC 1.8.2 - https://znc.in)
[07:51:50] *** Quits: shodan45 (~quassel@107.161.22.155) (Remote host closed the connection)
[07:51:51] *** Quits: argoneus (~argoneus@argoneus.com) (Read error: Connection reset by peer)
[07:52:01] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Read error: Connection reset by peer)
[07:52:01] *** Quits: thm_ (~thomas@fedora/thm) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: akaWolf1_ (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: Henry151_ (~bishop@user/henry151) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: bdeshi- (~bdeshi@bdeshi.space) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: cluelessperson_ (~cluelessp@user/cluelessperson) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: dstein64- (~dstein64@dannyadam.com) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: erica5 (~erica@user/erica) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[07:52:01] *** Quits: mdw (~root@159.65.86.163) (Ping timeout: 252 seconds)
[07:52:11] *** Quits: Dotz0cat_ (~Dotz0cat@h228.253.19.98.static.ip.windstream.net) (Read error: Connection reset by peer)
[07:52:27] *** Quits: chowmein__ (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[07:52:34] *** Quits: tar_xvf_ (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: loworder1it (~dave@s0106e81cba1736ea.ss.shawcable.net) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: justache0 (~justache@user/justache) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: Trieste_ (T@user/pilgrim) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: neolem0 (~neolem@gueuti.fr) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[07:52:34] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 252 seconds)
[07:52:44] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Read error: Connection reset by peer)
[07:52:57] *** Joins: erry_ (~erry@errietta.me)
[07:52:57] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[07:52:57] *** Joins: whaley_ (~whaley@159.65.32.34)
[07:52:58] *** Joins: LuKaRo (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de)
[07:52:58] *** Joins: thiras_ (~thiras@user/thiras)
[07:52:58] *** Joins: dfch_ (~dfch@user/dfch)
[07:52:58] *** Joins: nomic2 (~nomic@185.192.69.207)
[07:52:58] *** Joins: Maikel6 (~Maikel@130.61.63.136)
[07:52:58] *** Joins: wolfdale1 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[07:52:58] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[07:52:58] *** Joins: baltazaar (~baltazar@92-249-212-113.pool.digikabel.hu)
[07:52:58] *** Joins: neolem2 (~neolem@gueuti.fr)
[07:52:58] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[07:52:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (*.net *.split)
[07:52:58] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[07:52:58] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (*.net *.split)
[07:52:58] *** Quits: Dotz0cat (~Dotz0cat@h228.253.19.98.static.ip.windstream.net) (*.net *.split)
[07:52:58] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[07:52:58] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[07:52:58] *** Quits: jbe (~hellother@lysator/root/jbe) (*.net *.split)
[07:52:58] *** Quits: WarpedAI (~Warped@user/warped) (*.net *.split)
[07:52:59] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[07:52:59] *** Quits: MercilessDeth (~brad@136.49.61.2) (*.net *.split)
[07:52:59] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (*.net *.split)
[07:52:59] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (*.net *.split)
[07:52:59] *** Quits: erica (~erica@user/erica) (*.net *.split)
[07:52:59] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[07:52:59] *** Quits: Maikel (~Maikel@130.61.63.136) (*.net *.split)
[07:52:59] *** Quits: Phase (~phase@user/phase) (*.net *.split)
[07:52:59] *** Quits: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net) (*.net *.split)
[07:52:59] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (*.net *.split)
[07:52:59] *** Quits: greknod2 (~grek@120.88.171.98) (*.net *.split)
[07:52:59] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (*.net *.split)
[07:52:59] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[07:52:59] *** Quits: dthpulse (~quassel@podciarou.sk) (*.net *.split)
[07:52:59] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[07:52:59] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[07:52:59] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[07:52:59] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[07:52:59] *** Quits: randall (~randall@user/randall) (*.net *.split)
[07:52:59] *** Quits: justache (~justache@user/justache) (*.net *.split)
[07:52:59] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (*.net *.split)
[07:52:59] *** Quits: thm (~thomas@fedora/thm) (*.net *.split)
[07:52:59] *** Quits: TFKyle (~kyle@64.201.205.70) (*.net *.split)
[07:52:59] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[07:52:59] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[07:52:59] *** Quits: tudor (~tudor@tomka.hu) (*.net *.split)
[07:52:59] *** Quits: neil (~kneel@rockylinux/infra/neil) (*.net *.split)
[07:52:59] *** Quits: mjh4386_ (~mjh4386@165.22.53.231) (*.net *.split)
[07:52:59] *** Quits: erry (~erry@errietta.me) (*.net *.split)
[07:52:59] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[07:52:59] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[07:52:59] *** Quits: visl_ (visl@user/visl) (*.net *.split)
[07:52:59] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[07:52:59] *** Quits: oldguy1 (~oldguy@user/oldguy) (*.net *.split)
[07:52:59] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[07:52:59] *** Quits: fjmorazan_ (~quassel@user/fjmorazan) (*.net *.split)
[07:52:59] *** Quits: botfathe1 (~botfather@shell2.dds.nl) (*.net *.split)
[07:52:59] *** Quits: encukou_ (quassel@nat-pool-brq-t.redhat.com) (*.net *.split)
[07:52:59] *** Quits: roguelazer_ (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[07:52:59] *** Quits: trench (trench@user/trench) (*.net *.split)
[07:52:59] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[07:52:59] *** Quits: baltazar (~baltazar@92-249-212-113.pool.digikabel.hu) (*.net *.split)
[07:52:59] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[07:52:59] *** Quits: luva (~luva@5.180.62.230) (*.net *.split)
[07:52:59] *** Quits: gerty (~gerty@user/gerty) (*.net *.split)
[07:52:59] *** Quits: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me) (*.net *.split)
[07:52:59] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (*.net *.split)
[07:52:59] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[07:52:59] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[07:52:59] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[07:52:59] *** Quits: LuKaRo_ (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de) (*.net *.split)
[07:52:59] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (*.net *.split)
[07:52:59] *** Quits: rookie101 (~rookie@207.154.204.166) (*.net *.split)
[07:52:59] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[07:52:59] *** Quits: Juhaz (juhaz@hilla.kapsi.fi) (*.net *.split)
[07:52:59] *** Quits: Scotteh (~Scotteh@user/scotteh) (*.net *.split)
[07:52:59] *** Quits: _0az3 (~az0@user/az0) (*.net *.split)
[07:52:59] *** Quits: Russell (russell@bnc4free/staff/russell) (*.net *.split)
[07:52:59] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (*.net *.split)
[07:52:59] *** Quits: belphegor666 (~satan@user/belphegor666) (*.net *.split)
[07:52:59] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[07:52:59] *** Quits: zegalch (~zegalch@178.128.75.133) (*.net *.split)
[07:52:59] *** Quits: enrh (~enrh@user/enrh) (*.net *.split)
[07:52:59] *** Quits: kcrk (~kcrk@user/kcrk) (*.net *.split)
[07:52:59] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[07:52:59] *** Quits: utunbu_ (~utunbu@user/utunbu) (*.net *.split)
[07:52:59] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[07:52:59] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[07:52:59] *** Quits: ikwyl6 (~ikwyl6@2.58.44.226) (*.net *.split)
[07:53:00] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[07:53:00] *** Quits: streety (~streety@li761-24.members.linode.com) (*.net *.split)
[07:53:00] *** Quits: rud0lf (rud0lf@user/rud0lf) (*.net *.split)
[07:53:00] *** Quits: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com) (*.net *.split)
[07:53:00] *** Quits: catdog (~quassel@birdperson.tuxzone.org) (*.net *.split)
[07:53:00] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[07:53:00] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[07:53:00] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[07:53:00] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[07:53:00] *** Quits: ST47 (~ST47@wikimedia/st47) (*.net *.split)
[07:53:00] *** Quits: gegenschein (~james@ec2-52-91-126-104.compute-1.amazonaws.com) (*.net *.split)
[07:53:00] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[07:53:00] *** Quits: lack (~lack@user/lack) (*.net *.split)
[07:53:00] *** Quits: neolem (~neolem@gueuti.fr) (*.net *.split)
[07:53:00] *** Quits: argoneus7 (~argoneus@argoneus.com) (*.net *.split)
[07:53:00] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[07:53:00] *** Quits: J` (~J@user/j/x-4069704) (*.net *.split)
[07:53:00] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[07:53:00] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (*.net *.split)
[07:53:00] *** Quits: Trieste (T@user/pilgrim) (*.net *.split)
[07:53:00] *** Quits: bdeshi (~bdeshi@bdeshi.space) (*.net *.split)
[07:53:00] *** Quits: FergusL (~freenode4@user/fergusl) (*.net *.split)
[07:53:00] *** Quits: DocMors (~DocMors@web.crypticity.net) (*.net *.split)
[07:53:00] *** Quits: dfg (~dfg@user/dfg) (*.net *.split)
[07:53:00] *** Quits: thnee (~thnee@h-85-24-144-199.A328.priv.bahnhof.se) (*.net *.split)
[07:53:00] *** Quits: mrtnt (~Martin@martint.data.ee) (*.net *.split)
[07:53:00] *** Quits: sunyibo (~dorsch@5.2.75.229) (*.net *.split)
[07:53:00] *** Quits: feoh (~feoh@137.184.104.30) (*.net *.split)
[07:53:00] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (*.net *.split)
[07:53:00] *** Quits: majors (~majors@user/majors) (*.net *.split)
[07:53:00] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (*.net *.split)
[07:53:00] *** Quits: whaley (~whaley@159.65.32.34) (*.net *.split)
[07:53:00] *** Quits: sud (~sud@user/sud) (*.net *.split)
[07:53:00] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[07:53:00] *** Quits: _0ne (~one@user/0ne/x-2101768) (*.net *.split)
[07:53:00] *** Quits: marienz (~marienz@libera/staff/marienz) (*.net *.split)
[07:53:00] *** Quits: OliverUK (~opashley@70.138.105.34.bc.googleusercontent.com) (*.net *.split)
[07:53:00] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[07:53:00] *** Quits: KSaunderson (~user@142.93.152.208) (*.net *.split)
[07:53:00] *** Quits: MTecknology (~Mike@user/mtecknology) (*.net *.split)
[07:53:00] *** Quits: Buliarous (~gypsydang@185.207.166.57) (*.net *.split)
[07:53:00] *** Quits: Pilate (~pilate@pilate.io) (*.net *.split)
[07:53:00] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[07:53:00] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[07:53:00] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[07:53:00] *** rud0lf- is now known as rud0lf
[07:53:00] *** neolem2 is now known as neolem
[07:53:00] *** Quits: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net) (Client Quit)
[07:53:00] *** gerty5 is now known as gerty
[07:53:00] *** Retr0id5 is now known as Retr0id
[07:53:00] *** wolfdale1 is now known as wolfdale
[07:53:00] *** NeilHanlon is now known as neil
[07:53:00] *** greknod27 is now known as greknod2
[07:53:00] *** tofran4 is now known as tofran
[07:53:00] *** Maikel6 is now known as Maikel
[07:53:00] *** luva4 is now known as luva
[07:53:00] *** trashbird3 is now known as trashbird
[07:53:00] *** pmcnabb0 is now known as pmcnabb
[07:53:00] *** baltazaar is now known as baltazar
[07:53:00] *** scoobydoob is now known as scoobydoo
[07:53:00] *** Joins: vicfred_ (~vicfred@user/vicfred)
[07:53:00] *** Joins: jbe (~hellother@lysator/root/jbe)
[07:53:00] *** Joins: millido_ (~millido@84.210.150.128)
[07:53:00] *** Joins: dulanic5 (~dulanic@47.187.144.163)
[07:53:00] *** Milos_ is now known as Milos
[07:53:00] *** Joins: N3X15_ (~nexis@mail.nexisonline.net)
[07:53:01] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[07:53:01] *** Joins: zegalch (~zegalch@178.128.75.133)
[07:53:01] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[07:53:01] *** Russell- is now known as Russell
[07:53:01] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[07:53:01] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[07:53:01] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[07:53:01] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[07:53:01] *** Joins: Trieste (T@user/pilgrim)
[07:53:01] *** Joins: Armen6 (~Armen@armen138.com)
[07:53:01] *** Joins: ravish0007_ (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[07:53:01] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[07:53:01] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[07:53:01] *** Joins: Scotteh (~Scotteh@user/scotteh)
[07:53:01] *** Joins: utunbu_ (~utunbu@user/utunbu)
[07:53:01] *** Joins: nbao_ (~nbao@187.20.181.193)
[07:53:01] *** Joins: ammar2 (admin@i.diddled.with.the.opers.so.they.klined.me)
[07:53:01] *** N3X15_ is now known as N3X15
[07:53:01] *** dulanic5 is now known as dulanic
[07:53:01] *** Joins: feoh (~feoh@137.184.104.30)
[07:53:01] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[07:53:01] *** Joins: dstein64 (~dstein64@dannyadam.com)
[07:53:01] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[07:53:01] *** _0az30 is now known as _0az3
[07:53:01] *** slavfox_ is now known as slavfox
[07:53:01] *** Joins: enrh (~enrh@user/enrh)
[07:53:01] *** Joins: srhm (~srhm@user/srhm)
[07:53:01] *** Joins: fikran (~fikran@user/fikran)
[07:53:01] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[07:53:01] *** llua` is now known as llua
[07:53:01] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[07:53:01] *** Joins: lack (~lack@user/lack)
[07:53:01] *** cryocaustik7 is now known as cryocaustik
[07:53:01] *** Joins: thm (~thomas@fedora/thm)
[07:53:02] *** Joins: Henry151 (~bishop@user/henry151)
[07:53:07] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[07:53:07] *** Quits: Roey (~Roey@user/Roey) (Ping timeout: 252 seconds)
[07:53:07] *** Quits: Armen (~Armen@armen138.com) (Ping timeout: 252 seconds)
[07:53:07] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[07:53:07] *** Armen6 is now known as Armen
[07:53:10] *** Joins: akaWolf (~akaWolf@akawolf.org)
[07:53:10] *** Joins: shodan45 (~quassel@107.161.22.155)
[07:53:11] *** Koffa_ is now known as Koffa
[07:53:17] *** Joins: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca)
[07:53:23] *** Joins: Dotz0cat (~Dotz0cat@h228.253.19.98.static.ip.windstream.net)
[07:53:27] *** Joins: Roey (~Roey@user/Roey)
[07:53:31] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:53:34] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[07:53:37] *** Joins: sandb0y (~pirate@user/sandb0y)
[07:53:40] *** Quits: nomic (~nomic@185.192.69.207) (Ping timeout: 252 seconds)
[07:53:40] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 252 seconds)
[07:53:42] *** Joins: fbiagent__ (~fbiagent@user/fbiagent)
[07:54:02] *** Joins: sud (~sud@user/sud)
[07:54:03] *** Joins: mdw (~root@159.65.86.163)
[07:54:16] *** Joins: f- (~fluter@user/fluter)
[07:54:17] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[07:54:31] *** Quits: blei (~blei@209.201.38.106) (Quit: Client closed)
[07:54:41] *** Joins: Fiji_ (~Fiji@user/fiji)
[07:54:46] *** Quits: markcerv (~markcerv3@c-24-5-22-21.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:54:48] *** Joins: p3lim6 (~p3lim@ti0006q161-0896.bb.online.no)
[07:54:48] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[07:54:49] *** Quits: nedbat_ (~nedbat@python/psf/nedbat) (Ping timeout: 252 seconds)
[07:54:50] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 252 seconds)
[07:54:50] *** Quits: oz4ga (~tim@93.90.4.233) (Ping timeout: 252 seconds)
[07:55:07] *** Quits: Jigsy (~Jigsy@user/jigsy) (Killed (NickServ (GHOST command used by Jigsy`)))
[07:55:09] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[07:55:12] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[07:55:13] *** Joins: Jigsy` (~Jigsy@user/jigsy)
[07:55:26] *** Joins: rud01f4 (rud0lf@user/rud0lf)
[07:55:30] *** Joins: stoneware3 (~stoneware@user/stoneware)
[07:55:35] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[07:55:41] *** Joins: dxrt_ (~dxrt@user/dxrt)
[07:55:42] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[07:55:46] *** Joins: pmcnabb6 (~pmcnabb@user/pmcnabb)
[07:55:57] *** Joins: southey (~foxtrot@user/foxtrot)
[07:56:02] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[07:56:08] *** Joins: Mrbungle6661 (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67)
[07:56:20] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[07:56:21] *** Joins: kenoba (~kenoba@user/kenoba)
[07:56:23] *** Joins: de-facto_ (~de-facto@user/de-facto)
[07:56:33] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[07:56:38] *** Joins: cation21 (cation@user/cation)
[07:56:42] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[07:56:44] *** Joins: ross_ (sid305269@user/ross)
[07:56:44] *** Joins: themill (~stuart@debian/stuart)
[07:56:50] *** Joins: chilvers1 (~chilversc@user/chilversc)
[07:56:51] *** Joins: dharrigan_ (~dharrigan@user/dharrigan)
[07:56:56] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[07:57:01] *** Joins: Trashlord__ (~trash@user/trashlord)
[07:57:06] *** Jigsy` is now known as Jigsy
[07:57:13] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[07:57:21] *** Joins: m33k_ (dexter@user/m33k)
[07:57:21] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[07:57:21] <MTeck> oh, crud.... now I have to go back to converting this documentation, which I've now reduced to data entry.
[07:57:23] *** Joins: Cyp_ (~cyp@213.237.87.7)
[07:57:30] *** Joins: neltraus_ (~neltraus@2a03:4000:6:4589::4800)
[07:57:31] *** Joins: marienz (~marienz@libera/staff/marienz)
[07:57:34] *** Joins: _0ne (~one@user/0ne/x-2101768)
[07:57:42] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[07:57:47] *** Quits: p3lim (~p3lim@ti0006q161-0896.bb.online.no) (Read error: Connection reset by peer)
[07:57:48] *** p3lim6 is now known as p3lim
[07:57:51] *** Quits: ross (sid305269@user/ross) (Ping timeout: 252 seconds)
[07:57:51] *** Quits: kmikita (uid461814@id-461814.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[07:57:51] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Read error: Connection reset by peer)
[07:57:51] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67) (Remote host closed the connection)
[07:57:51] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (Read error: Connection reset by peer)
[07:57:52] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: dxrt (~dxrt@user/dxrt) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: fury (uid193779@id-193779.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: chilversc (~chilversc@user/chilversc) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: dale (dale@user/dale) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Ping timeout: 252 seconds)
[07:57:52] *** Quits: df_data (sid466269@id-466269.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[07:57:52] *** dxrt_ is now known as dxrt
[07:57:52] *** ross_ is now known as ross
[07:57:54] *** shlomif is now known as rindolf
[07:57:57] *** Joins: runelind_ (~runelind@user/runelind)
[07:58:01] *** Quits: Trashlord (~trash@user/trashlord) (Killed (NickServ (GHOST command used by Trashlord__)))
[07:58:03] *** Trashlord__ is now known as Trashlord
[07:58:03] *** Joins: devcpu_ (~rusty@d50-92-229-34.bchsia.telus.net)
[07:58:04] *** Joins: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net)
[07:58:07] *** Joins: lericson_ (~lericson@user/lericson)
[07:58:15] *** Joins: gerty9 (~gerty@user/gerty)
[07:58:16] *** Joins: dale (dale@user/dale)
[07:58:22] *** Joins: y1n-v1 (~y1n@77.119.216.4.wireless.dyn.drei.com)
[07:58:23] *** Joins: vinnix_ (~vinnix@user/vinnix)
[07:58:24] *** Quits: mirai (~mirai@2001:bc8:630:161::1) (Quit: See you soon)
[07:58:24] *** Quits: catdog2 (~quassel@2001:470:50f7:cdcd::cd1) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: comruminoAlt (~comrumino@li87-103.members.linode.com) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: fluter- (~fluter@user/fluter) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:8402:fbcb:cf37:fd68) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: jasiek (~jps@kuweta.sanepid.org) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: vinnix (~vinnix@user/vinnix) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: murr4y (ali@user/murr4y) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: andreas3- (andreas303@ip227.orange.bnc4free.com) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: gerty (~gerty@user/gerty) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: y1n (~y1n@77.119.216.4.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:f0a1:150f:f8e0:b6c0) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: renrelkha_ (~renrelkha@user/renrelkha) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: lericson (~lericson@user/lericson) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 252 seconds)
[07:58:24] *** Quits: ouemt (~quassel@user/ouemt) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: rud01f (rud0lf@user/rud0lf) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: m33k (dexter@user/m33k) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: Phase_ (~phase@user/phase) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: Lewky (~Lewky@146.70.50.10) (Ping timeout: 252 seconds)
[07:58:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:58:25] *** gerty9 is now known as gerty
[07:58:25] *** stoneware3 is now known as stoneware
[07:58:25] *** rud01f4 is now known as rud01f
[07:58:25] *** pmcnabb6 is now known as pmcnabb
[07:58:28] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: Cyp (~cyp@213.237.87.7) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: robyndrake (~robyndrak@user/robyndrake) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: Chex (~Chex@user/chex) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: braxas (sid508886@id-508886.lymington.irccloud.com) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: Darkfoe (sid402081@id-402081.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: deever (~fips@105-59-178-139-pool.fiber.fcom.ch) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: MikachuPi (~Mikachu@2001:bc8:47a8:559::1) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: neltraus (~neltraus@supernova.neltraus.de) (Quit: Zzzzzz...)
[07:58:28] *** Quits: themill_ (~stuart@debian/stuart) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: kenoba1 (~kenoba@user/kenoba) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: mattmcc (~matt@li807-33.members.linode.com) (Ping timeout: 252 seconds)
[07:58:28] *** Quits: josh_h (sid301834@id-301834.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[07:58:29] *** Quits: hwrd (sid64402@2a03:5180:f:2::fb92) (Ping timeout: 252 seconds)
[07:58:29] *** dharrigan_ is now known as dharrigan
[07:58:29] *** Joins: TFKyle (~kyle@64.201.205.70)
[07:58:33] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Quit: No Ping reply in 180 seconds.)
[07:58:34] *** Quits: wereii (~wereii@2a03:3b40:fe:4f::1) (Read error: Connection reset by peer)
[07:58:40] *** Quits: Anarchic` (~Anarchic@getlegit.co.uk) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu) (Ping timeout: 252 seconds)
[07:58:40] *** Quits: Papa (~papa@user/papa) (Ping timeout: 252 seconds)
[07:58:40] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[07:58:40] *** Joins: ouemt (~quassel@user/ouemt)
[07:58:43] *** Joins: fury (uid193779@id-193779.helmsley.irccloud.com)
[07:58:44] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[07:58:46] *** Joins: Papa_ (~papa@user/papa)
[07:58:47] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[07:58:47] *** Joins: jiffe (~jiffe@mail.nsab.us)
[07:58:49] *** Joins: luva (~luva@5.180.62.230)
[07:58:51] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[07:58:51] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Ping timeout: 276 seconds)
[07:58:52] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[07:58:54] *** Quits: runelind (~runelind@user/runelind) (Read error: Connection reset by peer)
[07:59:02] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:8402:fbcb:cf37:fd68)
[07:59:05] *** Joins: MikachuPi (~Mikachu@2001:bc8:47a8:559::1)
[07:59:06] *** Joins: ST47 (~ST47@wikimedia/st47)
[07:59:08] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[07:59:13] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[07:59:13] *** Joins: Phase (~phase@user/phase)
[07:59:13] *** Quits: Maikel (~Maikel@130.61.63.136) (Ping timeout: 252 seconds)
[07:59:13] *** Quits: tudor_ (~tudor@tomka.hu) (Ping timeout: 252 seconds)
[07:59:13] *** Quits: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:90f7:f04:5e22:ef89) (Ping timeout: 252 seconds)
[07:59:13] *** Quits: guntbert (~yesitsme@user/guntbert) (Ping timeout: 252 seconds)
[07:59:15] *** de-facto_ is now known as de-facto
[07:59:21] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[07:59:23] *** Joins: rookie101 (~rookie@207.154.204.166)
[07:59:29] *** Joins: Lewky (~Lewky@146.70.50.10)
[07:59:33] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[07:59:35] *** Joins: Maikel (~Maikel@130.61.63.136)
[07:59:39] *** Quits: sbrown (~sbrown@66.44.16.44) (Quit: Leaving)
[07:59:39] *** Joins: justache (~justache@user/justache)
[07:59:41] *** Gustavo6046_ is now known as Gustavo6046
[07:59:46] *** Quits: upekkha (~Advanced@2a01:4f8:1c0c:49df::1) (Ping timeout: 252 seconds)
[07:59:46] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (Ping timeout: 252 seconds)
[07:59:46] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 252 seconds)
[07:59:46] *** Quits: asix (~Anders@user/asix) (Ping timeout: 252 seconds)
[07:59:46] *** Quits: wintrmute (~wintrmute@bit.pappanaka.com) (Ping timeout: 252 seconds)
[07:59:47] *** Joins: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net)
[07:59:48] *** Quits: Awoobis (A_D@libera/staff/dragon) (Killed (NickServ (GHOST command used by A_Dragon)))
[07:59:53] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[07:59:54] *** A_Dragon is now known as Awoobis
[07:59:56] *** Joins: upekkha (~Advanced@2a01:4f8:1c0c:49df::1)
[07:59:56] *** Joins: josh_h (sid301834@id-301834.helmsley.irccloud.com)
[07:59:57] *** Joins: guntbert (~yesitsme@user/guntbert)
[08:00:01] *** Joins: wintrmute (~wintrmute@bit.pappanaka.com)
[08:00:02] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[08:00:03] *** cation21 is now known as cation
[08:00:03] *** Joins: tudor (~tudor@tomka.hu)
[08:00:05] *** Joins: Falcon|1 (andreas@user/falcon/x-0540249)
[08:00:07] *** Quits: AhmedAmerican (sid470527@id-470527.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:00:07] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Ping timeout: 252 seconds)
[08:00:19] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 252 seconds)
[08:00:19] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[08:00:19] *** Quits: WhyNotHugo (sid269118@id-269118.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[08:00:24] *** Quits: nicksloan (sid195124@user/nicksloan) (Ping timeout: 252 seconds)
[08:00:30] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[08:00:40] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[08:00:52] *** Joins: AhmedAmerican (sid470527@id-470527.ilkley.irccloud.com)
[08:01:06] *** Joins: CrypticS_ (~CrypticS_@user/crypticsquared)
[08:01:09] *** Celelibi_ is now known as Celelibi
[08:01:30] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[08:01:30] *** Joins: nicksloan (sid195124@user/nicksloan)
[08:01:32] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[08:01:35] *** Joins: dalan62369 (~dalan@110-175-157-10.tpgi.com.au)
[08:01:41] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[08:01:50] *** Joins: SuperL4g (~akulbe@user/superlag)
[08:01:50] *** Joins: wereii_ (~wereii@2a03:3b40:fe:4f::1)
[08:01:55] *** Joins: Allegretto (~allegrett@84-236-85-140.pool.digikabel.hu)
[08:01:56] *** Quits: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: Ping timeout (120 seconds))
[08:01:58] *** Joins: hwrd (sid64402@id-64402.lymington.irccloud.com)
[08:02:14] *** Joins: Cienisty0 (Cienisty@user/cienisty)
[08:02:14] *** Quits: Cienisty (Cienisty@user/cienisty) (Killed (platinum.libera.chat (Nickname regained by services)))
[08:02:14] *** Cienisty0 is now known as Cienisty
[08:02:19] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[08:02:20] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[08:02:26] *** Joins: mirai (~mirai@2001:bc8:630:161::1)
[08:02:42] *** Joins: Gaurhoth_ (sid75085@id-75085.ilkley.irccloud.com)
[08:02:57] *** Joins: rexbinary_ (~rexbinary@user/rexbinary)
[08:03:09] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[08:03:22] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[08:03:22] *** Quits: bfortified (~bfortifie@172.83.243.94) (Ping timeout: 252 seconds)
[08:03:22] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: xheimlich (~xheimlich@179.218.1.150) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: Gaurhoth (sid75085@id-75085.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: purplex (~purplex@user/purplex) (Ping timeout: 252 seconds)
[08:03:23] *** Quits: arti (~arti@2001:bb8:4008:2020::f) (Ping timeout: 252 seconds)
[08:03:23] *** rexbinary_ is now known as rexbinary
[08:03:23] *** Gaurhoth_ is now known as Gaurhoth
[08:03:32] *** Joins: purplex_ (~purplex@user/purplex)
[08:03:33] *** Joins: WhyNotHugo (sid269118@id-269118.hampstead.irccloud.com)
[08:03:37] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Ping timeout: 252 seconds)
[08:03:37] *** Quits: pie_ (~pie_bnc@user/pie/x-2818909) (Ping timeout: 252 seconds)
[08:03:37] *** Quits: theocrite (~theo@april/member/theocrite) (Ping timeout: 252 seconds)
[08:03:37] *** Quits: P1ro (~quassel@user/p1ro) (Read error: Connection reset by peer)
[08:03:37] *** dalan62369 is now known as dalan6236
[08:03:51] *** Joins: pie_ (~pie_bnc@user/pie/x-2818909)
[08:03:52] *** Joins: gutt_ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[08:04:01] *** Joins: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com)
[08:04:10] *** Quits: clarjon_1 (~clarjon1@user/clarjon1) (Ping timeout: 252 seconds)
[08:04:14] *** Joins: arti (~arti@2001:bb8:4008:2020::f)
[08:04:32] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[08:04:51] *** Joins: P1ro (~quassel@user/p1ro)
[08:05:08] *** Joins: Mr_bungle6661 (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67)
[08:05:30] *** Joins: vicfred__ (~vicfred@user/vicfred)
[08:05:49] *** Joins: jinsun__ (~quassel@user/jinsun)
[08:05:52] *** Joins: Fiji- (~Fiji@user/fiji)
[08:06:01] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[08:06:27] *** Joins: kostkon_ (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[08:06:41] *** Joins: portalrat_ (~portalrat@user/portalrat)
[08:06:45] *** Joins: thm_ (~thomas@fedora/thm)
[08:06:46] *** Joins: Armen6 (~Armen@armen138.com)
[08:06:49] *** Joins: spenat (~spenat@c-1125235c.012-6-62726f1.bbcust.telenor.se)
[08:06:50] *** Joins: c4017_ (~c4017@2604:3d08:747f:7c90:7441:2bf3:2c2c:6e49)
[08:06:51] *** Joins: jancoow9 (~jancoow@user/jancoow)
[08:07:13] *** Joins: erica (~erica@user/erica)
[08:07:14] *** Quits: vicfred_ (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[08:07:14] *** Quits: portalrat (~portalrat@user/portalrat) (Remote host closed the connection)
[08:07:14] *** Quits: thm (~thomas@fedora/thm) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: c4017__ (~c4017@2604:3d08:747f:7c90:7441:2bf3:2c2c:6e49) (Read error: Connection reset by peer)
[08:07:14] *** Quits: zegalch (~zegalch@178.128.75.133) (Quit: Ping timeout (120 seconds))
[08:07:14] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[08:07:14] *** Quits: seednode (~seednode@user/seednode) (Quit: Ping timeout (120 seconds))
[08:07:14] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[08:07:14] *** Quits: Armen (~Armen@armen138.com) (Read error: Connection reset by peer)
[08:07:14] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: _xor (~xor@74.215.232.67) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: gutt__ (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 252 seconds)
[08:07:14] *** Quits: decartes_ (sid240036@id-240036.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[08:07:14] *** Armen6 is now known as Armen
[08:07:20] *** Joins: seednode1 (~seednode@user/seednode)
[08:07:22] *** Joins: Bode_Cleu (~Code_Bleu@user/code-bleu/x-6939963)
[08:07:24] *** Joins: _xor (~xor@74.215.232.67)
[08:07:33] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[08:07:35] *** Quits: Mrbungle6661 (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67) (Ping timeout: 252 seconds)
[08:07:35] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[08:07:35] *** Quits: ikwyl6_ (~ikwyl6@2.58.44.226) (Ping timeout: 252 seconds)
[08:07:35] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[08:07:35] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 252 seconds)
[08:07:35] *** Quits: Alexer- (~alexer@alexer.net) (Ping timeout: 252 seconds)
[08:07:35] *** jancoow9 is now known as jancoow
[08:07:48] *** Joins: Alexer (~alexer@alexer.net)
[08:07:50] *** Joins: zegalch (~zegalch@178.128.75.133)
[08:07:50] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[08:07:58] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[08:08:00] *** Joins: ikwyl6_ (~ikwyl6@2.58.44.226)
[08:08:05] *** Joins: pavelow (~pavelow@opticalchimp.com)
[08:08:08] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[08:08:08] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 252 seconds)
[08:08:09] *** Quits: pavelow_ (~pavelow@opticalchimp.com) (Ping timeout: 252 seconds)
[08:08:17] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:08:21] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[08:08:28] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[08:08:28] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[08:08:28] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-3d14-a85d-f173-86d5.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[08:08:32] *** Joins: srhm (~srhm@user/srhm)
[08:08:51] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[08:08:51] *** Quits: Henry151 (~bishop@user/henry151) (Ping timeout: 252 seconds)
[08:08:52] *** Quits: vancz (~vancz@user/vancz) (Ping timeout: 252 seconds)
[08:09:06] *** Joins: Henry151 (~bishop@user/henry151)
[08:09:14] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[08:09:14] *** Quits: lack (~lack@user/lack) (Ping timeout: 252 seconds)
[08:09:14] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 252 seconds)
[08:09:26] *** Joins: r0bby (r0bby@user/r0bby)
[08:09:35] *** Joins: antsomers (~thiras@user/thiras)
[08:09:40] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[08:09:45] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:09:51] *** Joins: lethu (~lethu@user/lethu)
[08:09:56] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:09:57] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:c0d5:7aa3:c04a:b9ef)
[08:10:01] *** Joins: dulanic (~dulanic@47.187.144.163)
[08:10:10] *** Joins: jasiek (~jps@kuweta.sanepid.org)
[08:10:14] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[08:10:14] *** Quits: LuKaRo (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:10:22] *** Quits: voidcat (~voidcat@user/voidcat) (Ping timeout: 252 seconds)
[08:10:25] *** Joins: kmikita (uid461814@id-461814.helmsley.irccloud.com)
[08:10:38] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[08:10:40] *** Joins: LuKaRo_ (~LuKaRo@p4fc32be7.dip0.t-ipconnect.de)
[08:10:54] *** Joins: voidcat (~voidcat@user/voidcat)
[08:11:09] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[08:11:09] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[08:11:09] *** Quits: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46) (Ping timeout: 252 seconds)
[08:11:09] *** Quits: mindlesstux (sid18072@id-18072.lymington.irccloud.com) (Ping timeout: 252 seconds)
[08:11:09] *** Quits: zoid (~zoid@user/taxationistheft) (Read error: Connection reset by peer)
[08:11:15] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Read error: Connection reset by peer)
[08:11:15] *** cryocaustik7 is now known as cryocaustik
[08:11:16] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:11:16] *** Quits: comerijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:11:17] <Soni> when is RuntimeError not RuntimeError?
[08:11:25] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6) (Remote host closed the connection)
[08:11:26] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[08:11:26] *** Quits: sabet- (~sabet@user/sabet) (Ping timeout: 252 seconds)
[08:11:26] *** Quits: KSaunder1on (~user@142.93.152.208) (Ping timeout: 252 seconds)
[08:11:27] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[08:11:34] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[08:11:39] *** Joins: sabet (~sabet@user/sabet)
[08:11:42] *** Quits: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com) (Remote host closed the connection)
[08:11:44] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6)
[08:11:59] *** Quits: sud (~sud@user/sud) (Ping timeout: 252 seconds)
[08:11:59] *** Quits: thiras_ (~thiras@user/thiras) (Ping timeout: 252 seconds)
[08:11:59] *** Quits: odrling (~odrling@korone.aidoru.agency) (Ping timeout: 252 seconds)
[08:11:59] *** Quits: t2mkn (~t2mkn@user/t2mkn) (Ping timeout: 252 seconds)
[08:12:01] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:12:05] *** Joins: chowmein__ (~chowmeine@user/chowmeined)
[08:12:08] *** Joins: odrling (~odrling@korone.aidoru.agency)
[08:12:12] *** Joins: Masklin_Gurder (~joel@89-233-200-127.cust.bredband2.com)
[08:12:32] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:12:35] *** Joins: Trieste (T@user/pilgrim)
[08:12:40] *** Joins: KSaunderson (~user@142.93.152.208)
[08:12:59] *** Joins: lack (~lack@user/lack)
[08:13:38] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Ping timeout: 252 seconds)
[08:13:45] *** Joins: zoid (~zoid@user/taxationistheft)
[08:14:07] *** Joins: mindlesstux (sid18072@id-18072.lymington.irccloud.com)
[08:14:35] *** Joins: sud (~sud@user/sud)
[08:14:42] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[08:14:46] *** Joins: darkstarx (~darkstard@2601:1c2:300:c8a0::f2b6)
[08:15:08] *** Joins: greatgatsby__ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[08:15:14] *** Joins: luva7 (~luva@5.180.62.230)
[08:15:17] *** Joins: vancz (~vancz@user/vancz)
[08:15:54] *** Quits: greatgatsby_ (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Read error: Connection reset by peer)
[08:16:08] *** Joins: sbrown (~Srain@66.44.16.44)
[08:16:16] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 252 seconds)
[08:16:16] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[08:16:16] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (Ping timeout: 252 seconds)
[08:16:25] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[08:16:26] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 252 seconds)
[08:16:35] *** Joins: noarb (~noarb@user/noarb)
[08:16:49] *** Quits: luva (~luva@5.180.62.230) (Ping timeout: 252 seconds)
[08:16:49] *** Quits: deepy (deepy@user/deepy) (Ping timeout: 252 seconds)
[08:16:49] *** luva7 is now known as luva
[08:17:05] *** Quits: rdvn (~rdvn@user/rdvn) (Ping timeout: 252 seconds)
[08:17:05] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[08:17:06] *** Joins: `rdvn (~rdvn@user/rdvn)
[08:17:14] *** Joins: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net)
[08:17:22] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[08:17:22] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[08:17:22] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Ping timeout: 252 seconds)
[08:17:38] *** Joins: oisota8 (~oisota@user/oisota)
[08:17:40] *** Quits: dostoyev1ky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[08:17:43] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[08:17:51] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[08:17:52] *** Joins: asix (~Anders@user/asix)
[08:17:55] *** Joins: deepy (deepy@user/deepy)
[08:17:57] *** Parts: sbrown (~Srain@66.44.16.44) ()
[08:18:04] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::f2b6) (Ping timeout: 252 seconds)
[08:18:04] *** Quits: gitly (~gitly@85.255.232.78) (Ping timeout: 252 seconds)
[08:18:04] *** Quits: dreamer (~dreamer@user/dreamer) (Ping timeout: 252 seconds)
[08:18:11] *** Joins: hendry (~hendry@210.23.22.2)
[08:18:38] *** Quits: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name) (Ping timeout: 252 seconds)
[08:18:54] *** Joins: Roedy- (Roedy@user/roedy)
[08:19:01] *** Joins: Trieste (T@user/pilgrim)
[08:19:01] *** Quits: oisota (~oisota@user/oisota) (Ping timeout: 252 seconds)
[08:19:01] *** Quits: bdeferme1 (~bdeferme@i.ctrl86.com) (Ping timeout: 252 seconds)
[08:19:01] *** oisota8 is now known as oisota
[08:19:03] *** Joins: dreamer (~dreamer@user/dreamer)
[08:19:23] *** Joins: matjst (~matjst@180.252.119.175)
[08:19:34] *** Quits: Roedy (Roedy@user/roedy) (Ping timeout: 252 seconds)
[08:19:34] *** Quits: tanner (~tanner@tilde.town) (Ping timeout: 252 seconds)
[08:19:58] *** Joins: tanner (~tanner@tilde.town)
[08:20:01] *** Joins: gitly (~gitly@85.255.232.78)
[08:20:44] *** Joins: semeion (~semeion@user/semeion)
[08:20:55] *** Joins: upsala (~zcb@185.213.155.160)
[08:21:05] *** Joins: bdeferme1 (~bdeferme@i.ctrl86.com)
[08:21:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 252 seconds)
[08:21:52] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[08:21:55] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[08:22:02] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[08:23:09] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[08:23:27] *** Joins: pycurious (~Adium@user/pycurious)
[08:23:27] *** Quits: pycurious (~Adium@user/pycurious) (Client Quit)
[08:23:40] *** Joins: pycurious (~Adium@user/pycurious)
[08:23:49] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[08:27:22] *** Joins: alex11 (~alex11@user/alex11)
[08:27:56] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[08:28:11] *** Quits: Fiji- (~Fiji@user/fiji) (Quit: Leaving)
[08:30:04] *** Quits: emerent (~quassel@p54a3e5dc.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:30:30] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[08:31:10] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:47] *** Joins: alissa (ryan@hashbang/bdfl)
[08:31:49] *** Joins: asdfasdf (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[08:31:50] *** Joins: Peng__ (~mnordhoff@ultimate1.mnrd.us)
[08:31:58] *** Joins: kcrk (~kcrk@user/kcrk)
[08:33:30] *** Joins: emerent (~quassel@p54a3e5dc.dip0.t-ipconnect.de)
[08:33:31] *** Quits: daddy (~ryan@hashbang/bdfl) (Ping timeout: 252 seconds)
[08:33:31] *** Quits: fpc (~fpc@user/fpc) (Ping timeout: 252 seconds)
[08:33:31] *** Quits: kcrk_ (~kcrk@user/kcrk) (Ping timeout: 252 seconds)
[08:33:31] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (Ping timeout: 252 seconds)
[08:33:31] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Read error: Connection reset by peer)
[08:33:46] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:33:58] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[08:36:02] *** Joins: xa0s (xa0s@freeshell.org)
[08:36:11] *** Quits: neltraus_ (~neltraus@2a03:4000:6:4589::4800) (Ping timeout: 252 seconds)
[08:38:45] <Soni> so here's the cursed implementation https://bpa.st/JQWQ
[08:39:09] *** Joins: megared (~jj@user/megared)
[08:39:27] *** Quits: nbao_ (~nbao@187.20.181.193) (Quit: leaving)
[08:41:50] *** Quits: millido_ (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[08:42:45] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[08:46:48] *** Joins: millido (~millido@84.210.150.128)
[08:46:56] *** Quits: megared (~jj@user/megared) ()
[08:48:30] *** nomic2 is now known as nomic
[08:48:40] <MTeck> interesting
[08:49:31] <MTeck> I feel like I did that in the past, but now that I'm trying to remember it may have been error-type responses rather than actual exceptions.
[08:50:58] *** Quits: aknot (~aknot@2603:900a:1503:17bb:e9c4:1cd2:d8e2:66ca) (Ping timeout: 250 seconds)
[08:53:44] *** Joins: pycurious (~Adium@user/pycurious)
[08:54:06] *** Joins: node1 (~node1@user/node1)
[08:54:40] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[08:55:24] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[08:56:32] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:59:07] *** f- is now known as fluter
[09:02:25] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:03:54] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:07:04] *** Quits: Mr_bungle6661 (~MrBungle@2604:3d08:1788:dc00:2d9d:e2a1:6899:8e67) (Read error: Connection reset by peer)
[09:14:32] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[09:18:58] *** Quits: mepholic (~mepholic@flux.hxx.in) (Ping timeout: 252 seconds)
[09:19:56] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[09:20:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:20:15] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[09:21:33] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[09:22:33] <aphysically> jinsun_: nevermind that doesn't work "src/pyffstream/ffmpeg.py:834: error: Type variable "AnyStr" not valid as type argument value for "Popen""
[09:23:28] <aphysically> i.e. redefining AnyStr=TypeVar("AnyStr")
[09:24:44] *** Quits: matjst (~matjst@180.252.119.175) (Quit: Connection closed)
[09:24:53] <aphysically> yeah I'm just gonna avoid typing it correctly for now, I don't want to keep fighting that mypy bug every time it comes up during a rewrite
[09:26:07] *** Quits: nicode (~nic@2607:f2c0:951b:700:ecad:ba72:bd8f:42ec) (Ping timeout: 240 seconds)
[09:26:55] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[09:26:56] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:27:25] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[09:29:11] <jinsun__> aphysically: yeah without the bounds it will be like object, not usable in most places
[09:29:29] <aphysically> it doesn't work with bound=Union[str,bytes] either fwiw
[09:29:33] *** jinsun__ is now known as jinsun
[09:29:37] <aphysically> (it doesn't have the bug, it just complains)
[09:29:44] <aphysically> (that it can't be used)
[09:30:43] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[09:30:55] *** Joins: meph (~mepholic@flux.hxx.in)
[09:31:13] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:31:21] <jinsun> yes, I tried that earlier, not sure if that also counts as a bug or ther is some reason for this behavior
[09:32:05] <aphysically> can I make mypy ignore an entire class? :P
[09:32:32] *** Quits: _xor (~xor@74.215.232.67) (Quit: brb)
[09:33:38] *** Joins: WhizzWr (Whizz@s-o-m-e.h-o-s-t.name)
[09:33:53] <jinsun> I personally ould have gone with don't use walrus inside generic class with TypeVar without bounds :D
[09:34:28] <aphysically> I admit that's not awful in this case, only the readline is less readable from it
[09:35:21] <jinsun> yeaf readline is the good use of walrus there
[09:35:32] *** Joins: pycurious (~Adium@user/pycurious)
[09:36:25] <aphysically> that and regex I've found useful
[09:36:35] <aphysically> I walrus set the match result
[09:36:59] <aphysically> mostly in other cases I avoid the walrus/or it's not really that useful anyway
[09:37:01] <jinsun> yea regex was the main example used in the PEP
[09:37:52] <aphysically> I want to rewrite that class structure to use a context manager
[09:38:35] <aphysically> that class is a helper class for monitoring the progress output from an ffmpeg encode, which is someone complicated since you need to monitor the progress update in packets on a separate tcp socket while reading the output that I may (or may not) need to process as well
[09:38:45] <aphysically> plus saving recent output to dump to terminal in case of error
[09:38:50] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[09:39:01] <aphysically> and I do it like 6 different times, so the class is actually pretty useful
[09:39:20] <aphysically> but it probably is a good case of a context manager that manages setting up the socket and cleaning up things
[09:39:28] <aphysically> instead of an explicit entry class like I'm doing now
[09:39:34] <aphysically> entry method rather
[09:39:51] <aphysically> s/someone/somewhat/
[09:40:03] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 250 seconds)
[09:40:42] <jinsun> you can put # type: ignore[has-type] at the top of the file for stopping mypy complaints about cannot determine type
[09:41:24] <jinsun> but then things that depend on those variables will be silently converting to Any, which will be bad
[09:41:39] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Quit: Leaving)
[09:41:54] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[09:42:12] <aphysically> yeah avoiding walrus probably really is the best solution
[09:42:30] <jinsun> so still not using walrus+generic is the better option yes
[09:42:36] *** Quits: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f) (Remote host closed the connection)
[09:43:18] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[09:45:19] *** Joins: rendar (~rendar@user/rendar)
[09:45:34] <aphysically> all right you've convinced me, I'll give up fighting it and do that tomorrow :P
[09:46:24] *** Joins: _xor (~xor@74.215.232.67)
[09:46:32] *** Quits: _xor (~xor@74.215.232.67) (Client Quit)
[09:46:35] *** Quits: seednode1 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:47:11] *** Joins: seednode1 (~seednode@user/seednode)
[09:47:42] *** Joins: alzgh (~alzgh@user/alzgh)
[09:48:23] <aphysically> for now I sleep, cheers
[09:50:46] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[09:51:08] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[09:56:50] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 250 seconds)
[09:57:19] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[09:58:54] *** Joins: simplicity (~yti@user/simplicity)
[09:59:25] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[09:59:39] *** Joins: xcm (~xcm@user/xcm)
[10:00:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:00:51] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[10:02:29] *** Joins: fikran (~fikran@user/fikran)
[10:05:23] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[10:07:06] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:07:09] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:07:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:08:33] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:4574:6842:1c0b:15a2)
[10:09:33] *** Joins: Skyfire (~pyon@user/pyon)
[10:09:43] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[10:10:25] *** Joins: semeion (~semeion@user/semeion)
[10:12:35] *** Joins: manti7 (~manti7@185.107.94.249)
[10:13:57] *** Quits: desophos (~desophos@2601:249:1680:a570:9495:66ea:ccc2:b869) (Quit: Leaving)
[10:14:16] *** Joins: sbrown (~sbrown@66.44.16.44)
[10:14:44] *** Joins: greedom (~greedom@2001:16b8:3256:4300:b81b:1409:f445:8a8d)
[10:16:35] *** Joins: _xor (~xor@74.215.232.67)
[10:17:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 245 seconds)
[10:19:43] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5) (Quit: Client closed)
[10:22:56] *** Joins: fdan (~fdan@103.215.168.1)
[10:23:33] <fdan> hi there
[10:23:51] <fdan> i am trying to get the ip addresses from the logs
[10:23:53] <fdan> https://dpaste.org/Ksmf
[10:23:58] <fdan> this is what i have tried
[10:24:17] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Remote host closed the connection)
[10:24:47] *** Parts: sbrown (~sbrown@66.44.16.44) (Leaving)
[10:26:08] *** Joins: streety_ (~streety@li761-24.members.linode.com)
[10:27:16] *** Quits: xiongxin (~quassel@119.123.103.10) (Ping timeout: 252 seconds)
[10:28:53] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 264 seconds)
[10:29:38] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[10:30:10] <Wulf> fdan: 404
[10:30:34] <Wulf> fdan: perhaps don't use dpaste.
[10:30:54] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[10:31:08] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[10:31:10] <fdan> https://bpa.st/743A Wulf
[10:31:30] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:32:14] *** Joins: vimart (~vimart@185.69.144.102)
[10:32:20] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[10:32:26] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[10:32:26] <Wulf> fdan: okay, and what's the result?
[10:32:41] <fdan> Wulf 80.91.33.13
[10:32:55] <Wulf> fdan: great! Now what's wrong?
[10:33:59] *** Joins: Keira (~k@lulzsec.co.uk)
[10:35:11] *** Joins: pycurious (~Adium@user/pycurious)
[10:37:41] *** Quits: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch) (Quit: Leaving)
[10:39:44] *** Quits: jeho2 (~jehoshaph@user/jehoshaphat) (Ping timeout: 250 seconds)
[10:41:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:41:28] *** Quits: jazzy (~jaziz@2600:380:8479:d098:94a6:146f:5840:e64b) (Ping timeout: 252 seconds)
[10:42:36] *** Joins: jay-m126 (~jay-m@154.72.161.223)
[10:44:09] <fdan> there are lot of other lines
[10:44:18] <fdan> other ips are not getting scraped
[10:44:42] <fdan> i used re.compile(r'\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}')
[10:45:09] <fdan> which is fine, but 0.9.7.9 and few more are getting picked up Wulf
[10:45:19] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[10:45:44] <Wulf> fdan: and where does this 0.9.7.9 come from?
[10:46:30] <Wulf> IPv4 addresses shouldn't start with 0. For some reason they're reserved.
[10:47:01] <fdan> L20, 24 - at the end
[10:47:28] <Repiphany> 0.0.0.0
[10:47:41] <Wulf> fdan: perhaps you should only consider addresses at the start of a line
[10:48:01] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[10:48:08] <fdan> yes i would have used line.split()[0]
[10:48:16] <fdan> but i wanted to know what was wrong with my regex
[10:48:22] <Wulf> fdan: In regex, start of line is "^". But you might need a flag for re.finditer
[10:49:35] *** Quits: apteryx (~maxim@dsl-154-64.b2b2c.ca) (Ping timeout: 260 seconds)
[10:49:37] <Wulf> actually, flag should be given to re.compile
[10:49:50] <fdan> which flag?
[10:50:05] <jinsun> re.MULTILINE
[10:50:38] <jinsun> you can give flag to finiter too
[10:50:51] <jinsun> s/finiter/finditer
[10:51:09] <Wulf> jinsun: not when using re.compile
[10:51:44] <jinsun> ah okay re.compile was already used before
[10:52:04] *** purplex_ is now known as purplex
[10:52:13] <jinsun> then yes will have to give the flag to compile
[10:53:57] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:54:13] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[10:56:27] *** Quits: y1n-v1 (~y1n@77.119.216.4.wireless.dyn.drei.com) (Ping timeout: 240 seconds)
[11:00:42] *** Joins: semeion (~semeion@user/semeion)
[11:03:13] *** Joins: apteryx (~maxim@dsl-153-117.b2b2c.ca)
[11:04:11] *** Joins: defiant (~defiant@user/defiant)
[11:06:43] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:14:45] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:15:18] *** Joins: Deknos (~someone@user/menace)
[11:16:16] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[11:17:14] *** Joins: rememberYou (~someone@user/rememberyou)
[11:18:40] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[11:22:05] *** Joins: kosh (~kosh@user/kosh)
[11:24:19] *** Joins: pycurious (~Adium@user/pycurious)
[11:25:38] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[11:25:39] *** Joins: xiongxin (~quassel@113.116.33.66)
[11:26:01] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:26:03] *** Joins: srhm (~srhm@user/srhm)
[11:26:25] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[11:28:26] *** Quits: xa0s (xa0s@freeshell.org) (Quit: leaving)
[11:30:23] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:29] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Read error: Connection reset by peer)
[11:31:53] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:31:54] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[11:32:23] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[11:33:14] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[11:34:57] *** Joins: immediate (~immediate@139.179.217.118)
[11:35:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[11:35:58] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[11:37:08] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:4574:6842:1c0b:15a2) (Ping timeout: 252 seconds)
[11:37:20] *** Joins: pycurious (~Adium@user/pycurious)
[11:37:33] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[11:37:44] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:f850:5d42:ec83:a36d)
[11:37:50] <fdan> from a json file, could you tell me a way to get the value from the key we specify recursively
[11:37:52] <fdan> is it possible
[11:38:37] *** Parts: immediate (~immediate@139.179.217.118) ()
[11:38:43] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:17] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:41:47] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[11:42:09] <Wulf> fdan: it probably is. Provide an example json file, key and expected result.
[11:42:28] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[11:42:29] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[11:44:30] *** Joins: eem (~eem@user/eem)
[11:45:19] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[11:47:49] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[11:49:35] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[11:53:05] *** Joins: oz4ga (~tim@93.90.4.233)
[11:54:04] *** Quits: jay-m126 (~jay-m@154.72.161.223) (Ping timeout: 252 seconds)
[11:55:10] *** Joins: jay-m126 (~jay-m@129.0.77.218)
[11:56:38] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[12:03:28] *** Quits: greedom (~greedom@2001:16b8:3256:4300:b81b:1409:f445:8a8d) (Remote host closed the connection)
[12:04:15] *** Joins: greedom (~greedom@2001:16b8:3256:4300:b81b:1409:f445:8a8d)
[12:05:40] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:05:45] *** supakeen_ is now known as supakeen
[12:08:04] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[12:08:52] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[12:09:29] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[12:11:49] *** Joins: fikran (~fikran@user/fikran)
[12:12:31] *** Joins: pycurious (~Adium@user/pycurious)
[12:13:14] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[12:13:58] *** Quits: fdan (~fdan@103.215.168.1) (Quit: Client closed)
[12:17:09] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[12:17:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:28:50] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[12:31:05] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:33:10] *** thm_ is now known as thm
[12:33:54] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:36:48] *** Joins: EGH (~EGH@185.25.195.104)
[12:36:53] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[12:37:40] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[12:37:51] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[12:38:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:38:47] *** Quits: Xano (~Xano@2a00:23c4:4200:a00:4b3f:b31f:ec72:827) (Ping timeout: 240 seconds)
[12:39:40] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[12:39:49] *** Joins: Payam (~Payam@138.106.57.132)
[12:44:07] *** Joins: somlis (~somlis@user/somlis)
[12:44:11] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[12:44:23] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[12:45:09] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[12:45:13] *** Joins: pycurious (~Adium@user/pycurious)
[12:45:28] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[12:45:46] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[12:46:16] *** Joins: murr4y (ali@user/murr4y)
[12:46:26] *** Quits: flokuehn (~flokuehn@mue-88-130-54-212.dsl.tropolys.de) (Ping timeout: 252 seconds)
[12:47:24] *** Joins: han-solo (~hanish@user/han-solo)
[12:49:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:51:59] *** Joins: vimart (~vimart@185.69.144.102)
[12:52:40] *** Joins: semeion (~semeion@user/semeion)
[12:54:04] *** Joins: P1ro_ (~quassel@user/p1ro)
[12:54:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[12:55:04] *** Quits: P1ro (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[12:55:24] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:55:37] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[13:02:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:03:19] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[13:04:45] *** Joins: slav0nic (slav0nic@python.su)
[13:05:16] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:05:50] *** Joins: vimart (~vimart@185.69.144.102)
[13:07:00] *** Quits: han-solo (~hanish@user/han-solo) (Quit: Lost terminal)
[13:08:18] *** Joins: han-solo (~hanish@user/han-solo)
[13:09:05] *** Joins: pycurious (~Adium@user/pycurious)
[13:10:51] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:29] *** Joins: sekiro (~Guest33@125-85.iitb.ac.in)
[13:11:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:11:34] *** Quits: jay-m126 (~jay-m@129.0.77.218) (Ping timeout: 252 seconds)
[13:11:54] <sekiro> https://codait.github.io/spark-bench/users-guide/spark-submit-config/
[13:12:13] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[13:12:23] <sekiro> is this a standard .conf format? because i cant seem to find any parser that works with this in python
[13:13:18] *** Joins: flokuehn (~flokuehn@mue-88-130-54-248.dsl.tropolys.de)
[13:13:49] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:16:12] *** Joins: JibStyle (~user@154.21.20.43)
[13:18:20] <sekiro> or will i need to make my own parser for this?
[13:19:22] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[13:21:26] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:23:43] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[13:25:19] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[13:25:19] *** Joins: SteveR (~SteveR@103.215.168.1)
[13:26:25] <SteveR> could someone help me with the working snippet
[13:26:27] <SteveR> this is my try
[13:26:28] <SteveR> https://dpaste.org/ZG1u
[13:26:45] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[13:26:46] <SteveR> i want to recursively go over the json and find the values for the key i give
[13:28:57] <flower_> why is the result empty here?
[13:28:59] <flower_> http://paste.debian.net/1214161/
[13:29:11] <flower_> while in bash: command -v ardour
[13:29:25] <flower_> gives me /usr/bin/ardour as output
[13:30:12] <pr100> SteveR: you're not dealing the case where the data is an array
[13:30:42] <pr100> oh wait - my mistake
[13:30:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:40] *** Joins: P1ro (~quassel@user/p1ro)
[13:31:52] <MTeck> SteveR: "".join([ for this task seems odd
[13:32:18] <MTeck> perhaps break out what those lines are actually doing first?
[13:33:08] <SteveR> whats wrong with "".join
[13:33:14] <SteveR> can you share your solution
[13:33:35] <SteveR> the other problem here is lets say if there is 2 keys of same name, it returns only for the first value
[13:33:58] <flower_> output = subprocess.run(["command", "-v", "ardour"], capture_output=True, text=True, shell=True)
[13:34:35] <flower_> why is output empty? command -v ardour returns: /usr/bin/ardour, in bash
[13:34:43] *** Quits: P1ro_ (~quassel@user/p1ro) (Ping timeout: 252 seconds)
[13:34:50] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[13:35:31] <jinsun> try "command -v ardour" instead of giiving the list
[13:36:29] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[13:36:42] <flower_> jinsun, that works, hm but why
[13:36:44] <jinsun> flower_: when shell=True, pass args as string https://docs.python.org/3/library/subprocess.html#subprocess.Popen
[13:36:52] <flower_> ah
[13:36:56] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (Remote host closed the connection)
[13:37:18] <flower_> merci
[13:37:56] *** Joins: semeion (~semeion@user/semeion)
[13:38:19] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[13:39:18] <flower_> I'm also wonder wondering how to 'catch' multiple outputs in a list. For instance, 'ls' gives a certain output, but 'ls -a' gives a extra column with output. How store them separately?
[13:40:23] <flower_> colum0, column2 = subprocess.run(.....
[13:41:22] *** Joins: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81)
[13:42:12] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[13:42:22] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[13:42:51] <pr100> SteveR: you just need `json_find(cc, "phone") - atm you're passing the string `c`, not the parsed dictionary (the name json_find is really a misnomer as it's really expectting the parsed obect)
[13:43:32] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[13:44:07] <jinsun> flower_: can't do that, you get the entire output as string, will have to do the split manually, something like `for line in output.splitlines(): a, b, c = line.split()`
[13:44:12] *** Joins: bronsen (~bronsen@2a04:d480:0:1::3)
[13:44:40] <sekiro> pr100 +1
[13:44:41] <flower_> jinsun, I see, thx
[13:45:22] <han-solo> don't parse the output of ls :)
[13:45:58] <han-solo> also, i'm curious why you are using `command` builtin
[13:46:11] *** Joins: VaniaPy (~VaniaPy@o3s1xd.static.otenet.gr)
[13:46:13] <jinsun> oh yes both these examples that you gave can be done with python stdlib stuff
[13:46:26] <jinsun> shutil, os.path, pathlib
[13:48:58] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[13:51:01] *** Joins: jay-m126 (~jay-m@129.0.77.218)
[13:52:04] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:52:33] *** Joins: kcrk (~kcrk@user/kcrk)
[13:52:52] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[13:54:54] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[13:56:07] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[13:57:14] *** Joins: txtsd (~txtsd@user/txtsd)
[13:58:46] *** Joins: pycurious (~Adium@user/pycurious)
[13:59:56] *** Joins: VaniaPy95 (~VaniaPy@o3s1xd.static.otenet.gr)
[14:00:21] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Remote host closed the connection)
[14:00:44] *** Quits: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81) (Quit: Leaving)
[14:01:13] *** Joins: vimart (~vimart@185.69.144.102)
[14:01:23] *** Joins: phylaz (~phylaz@92.221.176.219)
[14:02:16] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[14:03:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:03:42] <VaniaPy95> How can i convert a unixtime string to python datetime?
[14:05:14] <han-solo> `datetime.datetime.fromtimestamp` ?
[14:05:41] <tr4ck3ur> import time; time.ctime(1633257254.691699)
[14:05:53] <han-solo> might need to convert the time to integer
[14:06:23] <tr4ck3ur> oh datetime, not string
[14:09:14] *** Quits: VaniaPy95 (~VaniaPy@o3s1xd.static.otenet.gr) (Quit: Ping timeout (120 seconds))
[14:09:14] *** Quits: VaniaPy (~VaniaPy@o3s1xd.static.otenet.gr) (Quit: Ping timeout (120 seconds))
[14:09:52] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[14:11:34] *** Joins: txtsd (~txtsd@user/txtsd)
[14:13:31] *** Joins: Hypothesis (~Nobodyok@74.220.134.129)
[14:17:22] <flower_> jinsun, isn't that the nice thing of unix? One task one tool? Using pythons subprocess to make use of those unix tools? command -v is the recommended method on Linux to check if a application is in PATH
[14:18:09] <jinsun> not when using python
[14:18:19] *** Joins: sagax (~sagax_nb@user/sagax)
[14:18:35] <flower_> why not?
[14:18:51] <jinsun> in python there is shutil.which
[14:19:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[14:19:23] *** Joins: VaniaPy (~VaniaPy@o3s1xd.static.otenet.gr)
[14:19:26] <jinsun> calling python libraries and C extensions will be much nicer and faster than running subprocess
[14:19:40] <VaniaPy>  Thu Apr 12 03:00:00 56131
[14:19:40] <VaniaPy>  56131 :D
[14:20:02] <han-solo> maybe your timstamp have milliseconds :p
[14:20:05] <han-solo> so /1000
[14:20:20] <VaniaPy> oh ok! :D  ty
[14:21:09] *** Joins: fikran (~fikran@user/fikran)
[14:23:11] *** Joins: pycurious (~Adium@user/pycurious)
[14:23:44] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:24:38] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[14:25:19] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[14:25:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:26:30] *** Joins: magla (~gelignite@55d4c259.access.ecotel.net)
[14:27:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:28:56] *** Joins: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81)
[14:29:11] *** Joins: Mach (~mach@2a02:2f09:d304:6f00::738)
[14:30:52] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:26] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:45] *** Quits: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81) (Quit: Leaving)
[14:32:00] *** Joins: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81)
[14:33:03] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[14:33:55] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[14:34:19] *** Joins: athar_ (~alphasier@2405:201:e:4d:54b2:81:22a0:df81)
[14:34:21] *** Quits: alphasierra (~alphasier@2405:201:e:4d:54b2:81:22a0:df81) (Client Quit)
[14:35:23] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Quit: Leaving)
[14:36:31] *** Quits: hakeem (~hakeem@user/hakeem) (Quit: Remote host closed the connection)
[14:37:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:37:28] *** Joins: mboehn (mathias@hh1.nuxis.org)
[14:38:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Client Quit)
[14:40:12] *** athar_ is now known as athar
[14:40:24] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:40:31] *** Joins: vimart (~vimart@148.252.128.162)
[14:44:38] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:44:39] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[14:46:18] *** Joins: xiongxin (~quassel@113.116.33.66)
[14:49:16] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:53:00] *** Joins: rapier (~marcos@170.233.159.1)
[14:54:15] <rapier> why do I get errors like NameError: name 'guess' is not defined ?  >>  https://bpa.st/MQQA
[14:54:28] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[14:54:34] <rapier> but the variable guess was define in while loop
[14:54:41] <rapier> defined*
[14:54:53] <han-solo> but what if it didn't go inside the `while loop`
[14:55:01] <han-solo> then it's like it can't find it, no ?
[14:55:11] *** Quits: VaniaPy (~VaniaPy@o3s1xd.static.otenet.gr) (Quit: Connection closed)
[14:55:16] *** Joins: pycurious (~Adium@user/pycurious)
[14:55:50] <han-solo> set `guess = None` at the top or something
[14:56:45] *** Quits: Hypothesis (~Nobodyok@74.220.134.129) (Remote host closed the connection)
[14:57:01] <han-solo> and since `valid_guess = False` on line 3, it will never get inside the `while loop`
[14:57:43] *** Quits: jay-m126 (~jay-m@129.0.77.218) (Ping timeout: 252 seconds)
[14:58:39] <rapier> thank you, i hadn't see that
[14:58:41] <rapier> i fixed
[14:59:38] <rapier> i'm coding the hangman
[14:59:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[15:00:50] *** Quits: greedom (~greedom@2001:16b8:3256:4300:b81b:1409:f445:8a8d) (Remote host closed the connection)
[15:01:39] *** vinnix_ is now known as vinnix
[15:03:03] *** Joins: softwarewolf (~software@user/softwarewolf)
[15:05:35] *** Joins: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net)
[15:05:46] *** Joins: jackrabbitslim (~jrs@user/jackrabbitslim)
[15:06:51] *** Joins: gustik (~gustik@2a01:c844:2411:2d20:922e:5225:fa8f:b211)
[15:06:58] *** Quits: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net) (Client Quit)
[15:07:43] *** Joins: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net)
[15:12:29] *** Quits: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net) (Quit: Leaving...)
[15:12:50] *** Quits: JibStyle (~user@154.21.20.43) (Quit: update)
[15:14:50] *** Quits: sekiro (~Guest33@125-85.iitb.ac.in) (Ping timeout: 256 seconds)
[15:15:33] *** Joins: JibStyle (~user@154.21.20.43)
[15:15:43] *** Quits: bookworm (~bookworm@neomutt/bookworm) (Read error: Connection reset by peer)
[15:16:21] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[15:18:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:19:03] <vimart> rapier: good. Stay happy and keep coding
[15:20:27] <rapier> thank you, vimart
[15:20:57] *** Joins: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net)
[15:21:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:22:22] <Soni> what's the easiest way to get a publishable package from a .py?
[15:23:04] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[15:23:20] <Swayze> do you want to publish your own code?
[15:23:47] <vimart> Soni: I think cx_Freeze
[15:24:25] <vimart> Soni: you can create executable on Linux, Windows and I do believe that macOS as well.
[15:24:38] <bjs> Soni: it depends what you mean by "publishable package"
[15:25:03] <bjs> Soni: if you just want people to be able to `pip install` it, then you'd put it on pypi
[15:25:33] <bjs> and e.g. make a setup.py  (or whatever newer method you prefer)
[15:27:19] *** Joins: pycurious (~Adium@user/pycurious)
[15:28:53] <Soni> what's the fastest, lowest-effort way to get it on pypi?
[15:28:54] <Soni> (that's "whatever newer method [we] prefer" btw :p)
[15:29:20] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[15:29:22] <Swayze> tons of guides on how to do that on google
[15:30:02] <bjs> Soni: https://packaging.python.org/tutorials/packaging-projects/
[15:30:20] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[15:30:33] <Soni> bjs: this doesn't feel lowest-effort
[15:31:01] <bjs> Soni: I did ask if you wanted people to be able to `pip install` it,  and what you meant by "publishable"
[15:31:06] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:17] <bjs> Soni: you can obviously just put your .py file on your website/github and tell people "copy/paste"
[15:31:17] <bjs> :P
[15:31:37] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:38] <Soni> bjs: rust has this `cargo new` thing and then you sign up to crates.io and just `cargo publish`
[15:31:52] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[15:32:11] <bjs> Soni: sure
[15:32:20] <Soni> anything equivalent in python?
[15:33:07] <jinsun> Soni: https://flit.readthedocs.io/en/latest/ ?
[15:33:11] <bjs> Soni: yes
[15:35:19] *** Joins: SteveR (~SteveR@103.215.168.1)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:15] *** Joins: han-solo (~hanish@user/han-solo)
[15:39:35] *** Joins: pro_z_ (~pro_z@37.214.79.2)
[15:40:02] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:40:21] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[15:41:41] *** Joins: gggp (~textual@60.10.23.162)
[15:41:45] *** Joins: todda7 (~torstein@69.red-2-138-78.dynamicip.rima-tde.net)
[15:42:28] *** Joins: pycurious (~Adium@user/pycurious)
[15:42:33] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[15:42:43] *** Quits: JibStyle (~user@154.21.20.43) (Remote host closed the connection)
[15:44:28] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[15:44:29] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[15:45:37] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Read error: Connection reset by peer)
[15:46:03] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:46:12] *** Quits: Mach (~mach@2a02:2f09:d304:6f00::738) (Quit: q)
[15:46:31] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[15:47:52] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[15:48:32] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[15:48:55] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Remote host closed the connection)
[15:49:22] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[15:50:19] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[15:50:26] *** Quits: mvdev_836 (~mvdev_836@35.215.0.109.rev.sfr.net) (Remote host closed the connection)
[15:51:11] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[15:51:29] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:51:45] *** Joins: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net)
[15:53:06] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[15:53:33] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[15:56:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[15:57:26] *** Joins: semeion (~semeion@user/semeion)
[15:57:49] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 245 seconds)
[15:59:11] <rapier> guys, i'd like to see the hangman code with the best practices of programming. Is there some sort of website I can see the code?
[15:59:17] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[16:02:38] <Soni> hmm...
[16:03:17] <Soni> we have a class WrappedError(Exception): with a def __init__(self, exc=None): and a self.value = exc (and also print(exc) while at it)
[16:03:51] <rapier> ?
[16:03:56] <Soni> when we do WrappedError(TypeError), the print prints None?
[16:06:01] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:06:05] *** Quits: Dotz0cat (~Dotz0cat@h228.253.19.98.static.ip.windstream.net) (Ping timeout: 264 seconds)
[16:06:26] *** Joins: Dotz0cat (~Dotz0cat@h176.88.187.173.dynamic.ip.windstream.net)
[16:07:51] <Soni> oh nvm we're calling the wrong thing
[16:12:01] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[16:12:28] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:13:07] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[16:14:53] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:17:10] *** Joins: Naan (~naan@user/naan)
[16:18:02] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Quit: ZNC - https://znc.in)
[16:19:18] *** Joins: y1n-v1 (~y1n@178.115.69.127.wireless.dyn.drei.com)
[16:23:07] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[16:23:40] *** Joins: upsala (~zcb@185.213.155.160)
[16:25:22] *** erry_ is now known as erry
[16:25:43] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[16:28:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:29:47] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[16:29:58] *** Joins: pycurious (~Adium@user/pycurious)
[16:30:08] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:30:29] *** Joins: fikran (~fikran@user/fikran)
[16:31:14] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[16:33:28] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[16:34:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[16:35:16] *** Quits: lethu (~lethu@user/lethu) (Quit: Leaving)
[16:35:44] *** Joins: lethu (~lethu@user/lethu)
[16:36:51] *** Quits: rapier (~marcos@170.233.159.1) (Read error: Connection reset by peer)
[16:39:34] *** Quits: ska (~ska@user/ska) (Ping timeout: 260 seconds)
[16:40:19] *** Joins: ska (~ska@user/ska)
[16:40:37] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[16:41:33] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:43:21] <braxas> how do I properly add typing anotation to this: https://github.com/iafork/rdflib/blob/iwana-20210912T2356/rdflib/graph.py#L356: store = property(__get_store)
[16:43:40] <braxas> store: Store = property(__get_store) does not work
[16:43:56] <braxas> I guess I can switch to @property syntax
[16:47:08] *** Quits: magla (~gelignite@55d4c259.access.ecotel.net) (Quit: Stay safe!)
[16:49:37] *** Joins: arinov (~arinov@213.194.126.155)
[16:50:43] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[16:50:59] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[16:51:00] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[16:51:11] *** Joins: arinov (~arinov@213.194.126.155)
[16:51:27] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[16:51:39] *** Joins: arinov (~arinov@213.194.126.155)
[16:51:58] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[16:52:09] *** Joins: arinov (~arinov@213.194.126.155)
[16:52:18] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[16:52:30] *** Joins: arinov (~arinov@213.194.126.155)
[16:52:41] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[16:54:13] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:56:38] <Soni> how do you use flit publish?
[16:56:53] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:57:41] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[17:02:46] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:03:38] *** Joins: pycurious (~Adium@user/pycurious)
[17:04:46] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[17:04:58] *** Joins: xiongxin (~quassel@119.123.103.95)
[17:05:03] *** Quits: vimart (~vimart@148.252.128.162) (Quit: WeeChat 2.8)
[17:07:49] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[17:08:51] *** Joins: CodePoint (~CodePoint@96.44.189.108)
[17:08:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 250 seconds)
[17:08:57] *** Joins: lapno (~lapno@eor83.neoplus.adsl.tpnet.pl)
[17:09:47] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[17:10:58] *** Quits: OPK (~OPK@user/opk) (Ping timeout: 252 seconds)
[17:11:12] *** Quits: CodePoint (~CodePoint@96.44.189.108) (Client Quit)
[17:12:32] *** Joins: monkey_ (~user@190.104.116.134)
[17:17:59] <Soni> nvm figured out how to solve the keyring issues
[17:18:53] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:19:44] *** Quits: iflema (~ian@user/iflema) (Remote host closed the connection)
[17:21:18] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:2c9b:f76e:5983:7b1c)
[17:21:57] <transhumanist> HI! anyone know how to fix the following error on ubuntu 16.04  sys.stderr.write(f"ERROR: {exc}") with python pip3 have python 3.5 installed as the default
[17:23:44] *** Joins: elena (~elena@31.173.85.129)
[17:23:55] *** elena is now known as elena_Re
[17:24:00] *** elena_Re is now known as elena_re
[17:24:26] *** Joins: magla (~gelignite@55d4c259.access.ecotel.net)
[17:25:18] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[17:25:20] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[17:25:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:25:48] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[17:26:19] <han-solo> transhumanist: did you run `pip3` or just `pip` ?
[17:26:44] *** Joins: pycurious (~Adium@user/pycurious)
[17:27:06] <Peng> Weren't f strings added in a later version of Python?
[17:27:45] <han-solo> er, doesn't matter, f strings are 3.6+
[17:27:51] <han-solo> ah yes
[17:28:22] <The-Compiler> transhumanist: upgrade to a newer Ubuntu or install a newer Python (e.g. via the deadsnakes PPA or pyenv)
[17:28:26] <transhumanist> either one
[17:28:29] <transhumanist> does the same thing
[17:28:35] <transhumanist> pyenv
[17:28:44] <transhumanist> I can try again with whatever directions you wish
[17:28:45] <Peng> or use an older version of pip3~
[17:28:57] <han-solo> https://github.com/pypa/pip/issues/9500#issuecomment-766321416
[17:29:01] <transhumanist> ok thanks
[17:29:07] *** Quits: JibStyle (~user@c-71-198-134-61.hsd1.ca.comcast.net) (Quit: ERC (IRC client for Emacs 27.2))
[17:29:46] <transhumanist> so it says to upgrade to  python 3.6 got direcitions for ubuntu 16.04
[17:29:58] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (Ping timeout: 265 seconds)
[17:30:13] *** Joins: Karatusba (~jamer05@user/karatsuba)
[17:30:55] <transhumanist> this is of course the problem with old crap can never find good directions :-)
[17:31:09] *** Joins: LiftLeft (~LiftLeft@154.21.28.63)
[17:31:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[17:31:35] *** ikwyl6_ is now known as ikwyl6
[17:31:41] <han-solo> i feel like ubuntu 16.x is old
[17:31:50] <Peng> It is old
[17:31:56] <han-solo> mm
[17:32:08] <Peng> It's 2005 years old!
[17:32:19] <han-solo> yikes
[17:32:37] <transhumanist> I need it for old element analysis NN software
[17:32:43] <transhumanist> cant get it running on newer version
[17:32:54] *** Quits: elena_re (~elena@31.173.85.129) (Quit: WeeChat 3.2)
[17:33:01] *** Quits: Karatusba (~jamer05@user/karatsuba) (Client Quit)
[17:33:32] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[17:34:12] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Read error: Connection reset by peer)
[17:34:28] *** Quits: todda7 (~torstein@69.red-2-138-78.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[17:36:42] *** Joins: velix (~velix@user/velix)
[17:37:58] *** Joins: desophos (~desophos@2601:249:1680:a570:9495:66ea:ccc2:b869)
[17:38:15] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-44.range86-160.btcentralplus.com)
[17:38:21] <velix> I want to crop the solid colored border of an image and get the dimensions, which were cropped. Shall I go for numpy or PIL?
[17:38:31] *** Quits: aslicedbanjo (~aslicedba@host86-160-16-44.range86-160.btcentralplus.com) (Client Quit)
[17:39:12] <velix> crop / trim
[17:39:29] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-44.range86-160.btcentralplus.com)
[17:39:34] *** Joins: mei (~mei@user/mei)
[17:39:35] <desophos> if i use mock.patch and then launch a new python subprocess, does the mock.patch still apply in that subprocess? if not, how can i patch attributes in a subprocess? (i'm asking because i tried and it didn't work, so i wanted to know if i'm just doing something wrong)
[17:43:23] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-f5a6-aeaa-f048-ebe3.res6.spectrum.com)
[17:45:30] <velix> okay, no job for Python: "\site-packages\PIL\Image.py:2575: DecompressionBomb Warning: Image size (156250000 pixels) exceeds limit of 89478485 pixels, could be decompression bomb DOS attack. DecompressionBombWarning)" :D
[17:46:28] *** Joins: pycurious (~Adium@user/pycurious)
[17:47:16] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[17:48:49] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[17:52:05] *** Joins: arinov (~arinov@31.142.12.211)
[17:52:52] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:52:52] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[17:54:32] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:56:43] <Julian> desophos: patch from within the subprocess
[17:56:51] <Julian> desophos: how exactly to do so depends what you launched as the subprocess
[17:57:10] <Julian> desophos: but in general the whole point of (sub)processes is to isolate state :)
[17:57:53] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[17:59:13] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[17:59:19] *** Joins: FluffyMask (~masque@user/fluffymask)
[17:59:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[18:00:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[18:01:24] *** Joins: Leonarbro__ (~Leonet@user/leonarbro)
[18:01:37] <desophos> Julian: thanks!
[18:02:01] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[18:02:53] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[18:03:09] *** Joins: ledtc (~ledtc@c-f8aa70d5.014-57-6c756e3.bbcust.telenor.se)
[18:03:30] *** Leonarbro__ is now known as Leonarbro
[18:04:50] *** Joins: elena (~elena@31.173.85.129)
[18:04:54] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[18:05:45] *** elena is now known as elena_re
[18:05:47] <ledtc> Hey anyone  ever run Flask on two network interfaces ?
[18:06:10] <ledtc> Because my server on 0.0.0.0 will not awnser on the second interface
[18:06:32] *** Quits: elena_re (~elena@31.173.85.129) (Client Quit)
[18:06:37] *** Joins: palasso (~palasso@user/palasso)
[18:08:30] *** Joins: nomic (~nomic@185.192.69.207)
[18:09:44] <pycurious> ledtc: try uwsgi
[18:12:26] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[18:15:46] *** Quits: Helle (~helle@80-100-16-232.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:16:02] *** Joins: Helle (~helle@80-100-16-232.ip.xs4all.nl)
[18:16:15] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[18:19:23] *** Parts: velix (~velix@user/velix) (Leaving)
[18:20:42] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[18:23:27] *** Joins: kosh (~kosh@user/kosh)
[18:23:58] <transhumanist> ok thanks in advance, how do I get rid of pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
[18:24:10] <transhumanist> ssl seems to be installed
[18:24:52] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[18:24:57] <TingPing> yo don't install ssl, python is built with it
[18:25:08] <transhumanist> so a manual python build
[18:25:12] <transhumanist> ok
[18:25:49] *** Joins: Auron (Auron956@user/auron)
[18:25:58] *** Quits: aslicedbanjo (~aslicedba@host86-160-16-44.range86-160.btcentralplus.com) (Quit: Leaving.)
[18:26:00] <TingPing> I can't imagine how you got python without it
[18:27:54] <transhumanist> ubuntu 16.04
[18:28:47] <TingPing> well it will obviously have ssl support, maybe you are just encountering certificate issues or something
[18:29:13] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[18:29:19] <transhumanist> dont know its the only link i have found for ubuntu 16.04 on wsl2
[18:29:34] <transhumanist> could be hacked up for all I know
[18:30:28] <TingPing> Just upgrade your distro. wsl2 supports many versions of many distros
[18:30:41] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[18:31:11] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:36:05] *** Joins: mattmcc (~matt@li807-33.members.linode.com)
[18:36:54] *** Joins: Pilate (~pilate@pilate.io)
[18:36:55] <Naan> is there a rule of thumb for how long to sleep between requests when webscraping? I'm adopting this code https://github.com/40Cakes/New-World-Server-Status-Scraper/blob/master/server_status.py and adding schedule and was going to run it every 1-5 seconds?
[18:37:42] <pycurious> Is there any way to speed this -> import matplotlib.pyplot as plt
[18:37:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[18:37:50] <grym> pycurious: no
[18:38:04] *** Quits: lapno (~lapno@eor83.neoplus.adsl.tpnet.pl) (Quit: Leaving)
[18:39:20] *** Joins: jay-m126 (~jay-m@129.0.77.218)
[18:39:49] *** Joins: fikran (~fikran@user/fikran)
[18:39:52] <pycurious> grym: Perhaps do all the time taking imports in a thread?
[18:40:34] <grym> pycurious: no
[18:41:50] *** Joins: stealth[] (~stealth]@34-72-142-46.pool.kielnet.net)
[18:41:59] <TingPing> pycurious: the best you can do is import it as early as possible in your process, so it won't block anything later once blocking matters
[18:42:44] <grym> or isolate your plotting code in a module you only import at the end
[18:43:23] <pycurious> I'm trying to start my webserver fast, and it needs that import - which is taking time.
[18:44:22] <TingPing> without modifying the library, the import just takes how long the import takes. You can do things to avoid importing multiple times like longer running processes, or moving that modules usage to a different process
[18:44:59] <grym> pycurious: the last thing i care about for a webserver is startup time
[18:45:14] <grym> i'm going to start it once, it'll take however long it takes, and then it's going to run for a week
[18:45:17] <grym> whatever
[18:48:29] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[18:50:25] <pycurious> grym: In my case it switches on when the user logs in. So I have to care about the import time.
[18:50:42] *** Joins: Guest56 (~Guest56@bzq-84-110-62-22.red.bezeqint.net)
[18:52:02] <Guest56> Hi, I would like to use some metaclass(?) to wraps some functions and log some timing, some of the functions may be sync or async, there is anything prepared for that? (a known package)? Thanks!
[18:52:50] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (Client Quit)
[18:52:54] *** Joins: mvdev_836 (~mvdev_836@user/mvdev-836/x-7776380)
[18:53:01] <grym> pycurious: i log in about once a month
[18:53:06] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[18:53:40] *** Quits: arinov (~arinov@31.142.12.211) (Ping timeout: 252 seconds)
[18:53:43] <phy1729> Guest56: you probably want a decorator; a quick search points to https://pypi.org/project/logging-decorator/ but I haven't used it
[18:53:49] <pycurious> If I deploy my webserver using 4 processes - do i 1) supervisor 2) systemctl 3) docker 4 processes?
[18:54:42] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (Client Quit)
[18:56:00] *** Joins: eem (~eem@user/eem)
[18:57:04] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[18:57:07] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Remote host closed the connection)
[18:57:38] <TingPing> pycurious: it sounds like a systemd service makes sense, since its tied to user sessions
[18:58:22] *** Joins: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net)
[18:59:05] *** Parts: d33tah (~d33tah@2a03:b0c0:3:d0::14d2:c001) (WeeChat 2.8)
[18:59:08] *** Joins: d33tah (~d33tah@2a03:b0c0:3:d0::14d2:c001)
[18:59:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[19:01:46] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[19:02:19] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:03:02] *** Joins: joshisanonymous (~joshisano@155-186-193-040.res.spectrum.com)
[19:04:06] <pycurious> When deploying a flask application on multiple ports - does it make sense to spin separate docker containers on each port?
[19:05:21] <TingPing> if having a security boundry is important, otherwise probably not
[19:07:05] <ramblebamble> pycurious, I would also add that either security or separation of logic/data must play a role, if the ports are hosting the same application, with the same data there is no point in separate containers
[19:07:18] <ramblebamble> in fact, there is no point in seperate ports TBH
[19:07:30] <pycurious> ramblebamble: agreed! Thanks
[19:07:53] <pycurious> ramblebamble: The separate ports are for 4 processes - since python can't do GIL
[19:10:15] <ramblebamble> pycurious, why use 4 processes with different ports, what about threading? or load balancing
[19:10:49] <ramblebamble> ok load balancing would require differnet ports and processes, if done on the network side, but you could resort to IPC
[19:10:53] *** Quits: Guest56 (~Guest56@bzq-84-110-62-22.red.bezeqint.net) (Quit: Client closed)
[19:11:15] <pycurious> ramblebamble: google GIL
[19:11:38] <grym> there exist async webservers
[19:11:39] <pycurious> I'm using threading
[19:11:56] *** Joins: gusto (~Augustus@109.255.100.54)
[19:11:58] <pycurious> grym: I'm using asyncio.
[19:12:26] <grym> pycurious: and flask :/
[19:12:43] <pycurious> grym: tornado and flask depending on what i need
[19:13:33] <pycurious> grym: One of the problems I have is the asyncio_loop.run_forever() takes 10 seconds before my rest api in tornado starts to serve data. I'm not sure how to debug this. I switched on debug flag, I tried PDB and profiler - no luck so far
[19:16:17] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:16:49] <ramblebamble> pycurious, you said cannot do GIL, you ment has GIL? also you could use not 4 but 5 processes, one for the port and the others to process the requests handled via queues and IPC
[19:18:31] *** Joins: gggp (~textual@60.10.23.162)
[19:18:38] *** Joins: Macuser (~Macuser@216.30.159.201)
[19:18:38] <pycurious> ramblebamble: I'm using 4 ports and 4 processes - since 1 port + 1process is not enough for my load
[19:22:17] *** Quits: Joel (~jjshoe@user/joel) (Ping timeout: 264 seconds)
[19:22:25] <ramblebamble> I understand, but from what you told us, the bottle-neck is the processing of the requests, NOT the handling of the requests. If all process A does is pass requests to the next process, it is still able to handle a high load, of course the problem that arises is managing network-state in that application while the request is processed in another process
[19:22:39] *** Joins: gareppa (~gareppa@user/gareppa)
[19:22:39] *** Quits: jay-m126 (~jay-m@129.0.77.218) (Read error: Connection reset by peer)
[19:23:07] *** Joins: NeoCore (~neocore@89.40.183.217)
[19:23:35] *** Joins: sbrown2 (~sbrown@66.44.16.44)
[19:23:37] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:24:42] *** Quits: antsomers (~thiras@user/thiras) (Quit: Leaving)
[19:25:54] <rakoon> I am profiling some asyncio code that does a bunch of requests then saves to db and without the semaphore of 10 is slower! I dont get why
[19:25:55] *** Joins: cdown (~cdown@163.114.131.1)
[19:26:22] <rakoon> The asyncio semaphore basically tells to run X amount of coroutines at a time, right?
[19:26:49] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[19:27:03] *** Joins: thiras (~thiras@user/thiras)
[19:27:22] *** Quits: mvdev_836 (~mvdev_836@user/mvdev-836/x-7776380) (Ping timeout: 252 seconds)
[19:27:27] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[19:27:48] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:28:02] *** Joins: jay-m126 (~jay-m@154.72.160.202)
[19:28:53] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[19:29:04] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[19:29:46] <pycurious> rakoon: In my case, the asyncio.run_forever() takes 10 seconds before the rest api starts to serve. Any ideas how to debug that?
[19:29:53] <jan6> hello, kinda wondering, is there a way to have a decorator inside a class, refer to the class's "self"?
[19:30:00] *** Quits: xiongxin (~quassel@119.123.103.95) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:30:22] *** Joins: vodkra (~vodkra@user/vodkra)
[19:31:10] <rakoon> pycurious: what do u mean i dont really understand :|
[19:32:27] <rakoon> pycurious: im not expert but in case u didnt know you can turn on some asyncio logs with PYTHONASYNCIODEBUG=1
[19:32:48] <transhumanist> 6 hours to get python working right on ubuntu 16.04 what a freaking mess
[19:33:09] <grym> transhumanist: legacy deploys be like that
[19:33:14] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:33:16] *** Quits: jay-m126 (~jay-m@154.72.160.202) (Ping timeout: 252 seconds)
[19:33:48] *** Joins: grooverman (~grooverma@177.95.12.14)
[19:34:31] <transhumanist> its still got some quirks but at least its working for my use case
[19:35:10] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[19:35:12] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[19:35:28] <aphysically> speaking of, 3.10 almost released :)
[19:35:31] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[19:36:00] <grym> i've got a few things pinned to 3.7
[19:36:04] <grym> but otherwise...
[19:37:49] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[19:38:23] *** Quits: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net) (Quit: Leaving)
[19:39:02] *** Quits: joshisanonymous (~joshisano@155-186-193-040.res.spectrum.com) (Quit: Leaving)
[19:42:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[19:44:08] *** Joins: d3sync (~d3sync@62.1.158.148)
[19:45:24] *** Server sets mode: +Ccnrtf #python-unregistered
[19:45:39] *** Parts: jan6 (jan6@tilde.team/user/jan6) (WeeChat 3.2)
[19:46:17] *** kostkon_ is now known as kostkon
[19:46:31] *** Joins: gggp (~textual@60.10.23.162)
[19:47:54] *** vegii_ is now known as vegii
[19:48:06] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[19:48:39] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 245 seconds)
[19:49:32] <rakoon> pycurious: do u want to share code? (btw with the PYTHONASYNCIODEBUG=1 or asyncio.run(debug=True) they are the same, the code runs a lot slower)
[19:50:14] <rakoon> pycurious: it writes them in stdout you should have seen them :|
[19:50:52] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[19:51:08] <pycurious> pycurious: I dont see much output there - does that mean that asyncio is not calling any callbacks in the loop?
[19:51:18] *** Quits: vodkra (~vodkra@user/vodkra) (Remote host closed the connection)
[19:51:44] <rakoon> pycurious: u said it takes 10 seconds so something is slow i guess in other words it seems that it calls something :)
[19:52:02] *** Joins: jazzy (~jaziz@2600:380:8571:702f:1cbc:304:51f8:c200)
[19:52:05] <rakoon> (i should have put a comma (,) in "i guess,")
[19:53:14] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 245 seconds)
[19:53:29] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Quit: Leaving)
[19:53:38] <grym> i have a few webservices that come up fast, but the first POST takes like 30 seconds
[19:54:08] <grym> because an `import` is dragging in about 800MB of data from disk
[19:54:18] <grym> after that, it's snappy
[19:54:32] <rakoon> grym: put it in a thread :D
[19:54:49] <grym> rakoon: oh there's a TPE in there no fear
[19:54:58] <rakoon> whats that
[19:55:03] <grym> threadpool executor
[19:55:06] <rakoon> oh
[19:55:42] <grym> anyway, you can defer imports to first call instead of at startup, which is sometimes nicer
[19:55:51] <grym> and sometimes it doesn't matter
[19:56:16] <pycurious> grym: In my case, the user has to login, which means the rest apis have to be running - which is what is taking time for me.
[19:56:49] <pycurious> grym: In my case nginx keeps getting connection to upstream errors, till 10 seconds
[19:56:55] <grym> "user login" and "webservice" having anything to do with one another just confuses me a bit
[19:57:16] <rakoon> pycurious: i am using pyinstrument to profile my code maybe u want to check it out it might show u where the time is being taken
[19:57:25] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[19:58:54] <pycurious> rakoon: "Profiling code inside a Docker container can cause some strange results," from pyinstrument - will give it a try
[19:59:19] <rakoon> pycurious: oh ok i wasnt aware u were running it inside docker :|
[19:59:39] <pycurious> grym: My tornado server runs "asyncio.run_forever()" - and my user in the browser can't access this server for about 10 seconds after that (user -> nginx -> tornado+async)
[20:01:12] <transhumanist> hi. once again thanks for answers. I am getting the following error after installing python 3.8 or python 3.9 and setting it as the default with venv python3.9', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1. when trying to create a venv
[20:01:41] <pycurious> ramblebamble: The docker question of running 4 containers for 4 ports - if you dont do that and do that in one container, isnt restarting them when they die - has to be written by the user? (unless of course all 4 die - then docker-compose would restart it )
[20:01:43] *** Joins: vodkra (~vodkra@user/vodkra)
[20:02:40] <grym> transhumanist: you mean `python3.9 -m venv`, surely
[20:03:05] <grym> transhumanist: or are you speaking of `pyenv`
[20:03:39] <ramblebamble> pycurious, ok, that makes sense, don't really care to handle this type of problem if not necessary, but you could share a fifo via volume and have IPC run through there and then the docker-containers would just be handled as expected, alternatively use s.th. like rabbitMQ or zeromq or SQS
[20:03:47] <ramblebamble> but hey as long as it works :)
[20:04:14] <sbrown2> transhumanist: Are you using Debian or a derived distro like Ubuntu?
[20:04:23] <transhumanist> hmm let me check
[20:04:27] <transhumanist> Ubuntu 16.04
[20:05:20] <sbrown2> transhumanist: So, I don't know if this will help, but you can try to `sudo apt install python3.6-venv` and then try to make a venv
[20:05:24] <transhumanist> python3.9 -m venv Elem   << exact command
[20:05:41] <transhumanist> it is installed but it doesnt seem to see it I think
[20:06:12] <sbrown2> transhumanist: Debian and Debian based distros come with a minimal Python install that omits certain packages from the Standard Library (what I would consider a broken Python install)
[20:06:43] <ramblebamble> pycurious, here is a configuration for IPC between docker-containers https://stackoverflow.com/questions/44029035/ipc-communication-between-docker-containers
[20:07:02] <ramblebamble> it is a capability with then linux namespaces  you can control
[20:07:30] <grym> transhumanist: i'm going to see if i can install 3.9 in 16.04
[20:07:41] <sbrown2> transhumanist: so it's common to need to install python3.6-venv and python3.6-pip to get the tools that Python developers expect to see
[20:07:57] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[20:08:35] *** Joins: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea)
[20:08:46] <grym> sbrown2: transhumanist is shooting for 3.9
[20:09:09] <desophos> i'm trying to mock some functions that my Kivy app imports, but telenium starts the app in a subprocess with only the app object exposed. i've tried patching before telenium launches, after telenium launches, and having the telenium server `exec` patches in the running app, but none of these worked. i would appreciate any advice on how to go about mocking these imports
[20:09:15] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[20:09:16] *** Quits: devcpu_ (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[20:09:27] <sbrown2> grym: I saw that ... was just going to mention ... `sudo apt install python3.9-venv` for 3.9, yeah
[20:09:32] *** Quits: athar (~alphasier@2405:201:e:4d:54b2:81:22a0:df81) (Read error: Connection reset by peer)
[20:09:36] <grym> sbrown2: it's not going to be in 16.04's repo
[20:09:39] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[20:09:42] <transhumanist> wierdly it now takes like 2 minutes but it returns with no error
[20:09:50] <sbrown2> grym: ahh, good point
[20:10:01] <grym> sbrown2: the usual options are deadsnakes and pyenv
[20:10:07] <grym> i'm trying pyenv in a docker container right now
[20:10:37] <grym> they should rename deadsnakes to chapman, or something
[20:10:38] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[20:12:13] <grym> transhumanist: pyenv works fine on 16.04
[20:12:27] <grym> i'm runnign 3.9.7 there
[20:12:53] <transhumanist> wierd, I have no idea as I said it was the only source i could find for 16.04 on wsl2
[20:13:03] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Quit: walrus_man)
[20:13:09] *** Quits: Ninja3047 (~Ninja3047@3047.ninja) (Quit: bye)
[20:14:07] *** Joins: Ninja3047 (~Ninja3047@3047.ninja)
[20:14:10] <grym> transhumanist: https://bpa.st/PE4A
[20:14:16] <transhumanist> I will have to try a docker container if this donest work
[20:14:16] <grym> works fine
[20:14:32] <grym> (from docker pull ubuntu:16.04 )
[20:14:48] <transhumanist> thank you very much, seems to work now it just takes like 2 minutes to install the venv for some reason
[20:15:08] <transhumanist> ah I guess I should have started with docker 2 hours ago
[20:15:51] *** Joins: han-solo (~hanish@user/han-solo)
[20:19:08] *** Joins: slee (~slee@user/slee)
[20:19:31] *** Joins: KombuchaKip (~kip@192.252.230.5)
[20:19:45] *** SuperL4g is now known as SuperLag
[20:21:10] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 252 seconds)
[20:23:13] <gloomy> Hi, I have a simple script that uses subprocess.run(["foo","arg1","arg2"]). When I run that script as `python myscript.py` it works, but when i execute it in a jupyter notebook it fails with "FileNotFoundError - no such file or directory foo" . Why is that?
[20:24:10] *** Joins: geli (~gelignite@55d44612.access.ecotel.net)
[20:24:16] <slee> hi, messing with python/json for the first time..i have a json file with album names..i'm trying to have pyton loop through the file and grab just the album title name, but i can't seem to figure out how to do it...here's an image of the json: https://i.imgur.com/Wa5EDFO.png
[20:24:17] <gloomy> I found some related answers on stackoverflow saying I need to set `shell=True` when calling subprocess.run in order to do path resolution, but why would it work when it's called as a normal script?
[20:24:58] <slee> sorry, all names of albums
[20:25:18] <ramblebamble> gloomy subprocess/threads have a history of being troublesome with IPython and Jupyter-Notebooks
[20:25:35] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:25:36] <ramblebamble> srz processes, threads should work fine
[20:26:02] <gloomy> ramblebamble: ah, good to know, thanks
[20:26:04] <ChrisWarrick> gloomy: the $PATH might be different between jupyter and python
[20:26:07] *** Peng__ is now known as Peng_
[20:26:18] <ChrisWarrick> gloomy: how do you run jupyter? where is `foo` located?
[20:26:40] *** Quits: magla (~gelignite@55d4c259.access.ecotel.net) (Ping timeout: 252 seconds)
[20:26:43] <gloomy> ChrisWarrick: yeah but if it was true that shell=True is needed to do path resolution, that shouldn't matter... ?
[20:26:48] <sbrown2> gloomy: have you confirmed that the Jupyter instance and your terminal instance are using the same working directory?
[20:26:49] <ChrisWarrick> gloomy: it’s not true
[20:27:00] <ChrisWarrick> gloomy: shell=True is not necessary and should ~never be used
[20:27:17] <ramblebamble> what does shell=True do anyways?
[20:27:31] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[20:28:05] <ChrisWarrick> ramblebamble: it runs your command with sh -c
[20:28:06] *** Joins: jellyknight (~gelignite@55d48808.access.ecotel.net)
[20:28:10] <gloomy> eh, need to take a call, be back later.thanks for the tips
[20:28:26] <ChrisWarrick> ramblebamble: it might let you do shell stuff (eg. pipes), but it’s also insecure if you have user-provided arguments
[20:28:36] <ramblebamble> ahh nice
[20:28:39] <ChrisWarrick> ramblebamble: not nice
[20:28:49] <ChrisWarrick> ramblebamble: you can do pipes/redirections from python, so you don’t need shell=True for anything
[20:29:21] <ramblebamble> good to know thanks, yes not nice, I agree, less is sometimes more, and I am reminded that not knowing me means irony is not automatically detected ;)
[20:30:31] *** Quits: geli (~gelignite@55d44612.access.ecotel.net) (Ping timeout: 252 seconds)
[20:30:39] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:30:45] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[20:32:27] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[20:32:27] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[20:33:15] *** Joins: brabrax (~brabrax@user/brabrax)
[20:34:20] *** Joins: califax (~califax@user/califx)
[20:35:45] <greyblue9> on Windows I think it ends up passed as one string anyways, but just to the one process at least
[20:37:08] *** notevil_ is now known as NOTevil
[20:38:15] *** Joins: gggpkm (~gggpkm@188.119.64.181)
[20:38:39] *** Quits: pro_z_ (~pro_z@37.214.79.2) (Ping timeout: 245 seconds)
[20:38:47] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[20:39:19] *** Joins: just-me (~just-me@46.196.247.120)
[20:39:20] *** Joins: pro_z (~pro_z@37.214.40.135)
[20:39:35] <just-me> Hello guys, I almost finished the anagram game, I just need to figure out how to shuffle the word.
[20:39:44] <just-me> Just ussing random.shuffle doesn't work for some reason
[20:39:53] <just-me> https://bpa.st/5SUA
[20:40:12] <desophos> slee, what have you tried?
[20:40:34] *** Quits: cashew (~cashugh@user/cashew) (Quit: bye)
[20:40:59] <just-me> I tried using shuffling in place and assigning it into a variable
[20:41:25] <just-me> I get why assigning it to a variable doesn't work but using it in place produces the same error
[20:43:12] <desophos> sorry, that was addressed to slee -- just-me, are you printing the question? it looks like you don't print it at all
[20:43:12] <han-solo> just-me: why do you need to shuffle it ?
[20:43:34] <han-solo> you just need a random answer/question pair right ?
[20:43:48] <just-me> Question and hint
[20:44:03] <just-me> I can grab a random question just fine, I can't shuffle it though
[20:44:03] <han-solo> right
[20:44:29] <han-solo> but you don't need to shuffle it. You already have a random pair using the `random.choice`, no ?
[20:44:47] <desophos> it's shuffled because it's anagrams
[20:44:50] <han-solo> but you need to do that inside the `while True` loop
[20:44:55] <just-me> No, word by default is a normal word. It needs to be shuffled.
[20:45:08] <just-me> I tried it, it didn't make a difference.
[20:45:20] <han-solo> `while True:...hint, question = choice(question_material);...`
[20:45:34] <han-solo> oh, you need to shuffle the hint word too ?
[20:45:51] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[20:47:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[20:48:08] <just-me> Nah, hint is a description of the word.
[20:48:20] <just-me> It wouldn't be very useful if it is shuffled
[20:49:09] *** Joins: fikran (~fikran@user/fikran)
[20:49:44] <han-solo> right
[20:49:46] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[20:50:01] *** Joins: califax (~califax@user/califx)
[20:50:16] <desophos> just-me, strings are immutable sequences so they can't be shuffled in place
[20:50:35] <just-me> Can I throw it to a list?
[20:50:40] <just-me> Would that work?
[20:51:02] <desophos> according to the docs: "To shuffle an immutable sequence and return a new shuffled list, use sample(x, k=len(x)) instead."
[20:51:30] <just-me> ...sample(x, k=len(x))?
[20:51:35] *** Joins: rolo (~rolo@2a02:8108:8d80:7aa4:f8f8:6f11:edf1:1565)
[20:52:27] <desophos> i think it would be simpler to do what you said
[20:52:40] *** Quits: monkey_ (~user@190.104.116.134) (Read error: Connection reset by peer)
[20:52:41] *** Quits: just-me (~just-me@46.196.247.120) (Remote host closed the connection)
[20:53:38] *** Joins: just-me (~just-me@46.196.247.120)
[20:53:49] <han-solo> 11:19 < han-solo> `while True:...hint, question = choice(question_material);...` # this was for running the game again, ignore
[20:53:52] <thm> a='hello'; print(''.join(random.sample(a, k=len(a))))
[20:54:02] <just-me> Sorry, I had a network error.
[20:54:06] <just-me> Did I miss anything?
[20:54:50] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 252 seconds)
[20:55:11] <just-me> Can random.shuffle() be used to shuffle lists?
[20:55:32] <ledtc> just-me You want to get back one list shuffled ?
[20:55:37] <desophos> yes; you could create a variable with question[0] converted to a list and shuffle that
[20:55:57] *** Joins: fr_sleepy (~fr_sleepy@209.94.138.128)
[20:56:03] <just-me> Ok I can try that
[20:56:29] <ledtc> just-me What do you want to get returned ?
[20:56:30] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[20:56:42] <just-me> shuffled word
[20:56:57] <just-me> I will take the randomly choosen word, split it and make it a list
[20:57:02] <desophos> you'll probably want to convert it back to a string afterward
[20:57:03] *** Joins: arinov (~arinov@213.194.126.155)
[20:57:12] <just-me> shuffle the list, and convert it back to a string
[20:57:14] *** Joins: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[20:57:21] <just-me> And practice to type faster :D
[20:57:25] <thm> a='hello world'; a=list(a); random.shuffle(a); print(''.join(a))   that's more complicated imho than the sample() version
[20:57:47] *** Joins: Azin (~Azin@user/azin)
[20:57:59] *** Joins: realies (~realies@user/realies)
[20:58:00] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[20:58:01] <ledtc> just-me https://stackoverflow.com/questions/22161075/how-to-scramble-the-words-in-a-sentence-python
[20:58:26] <ledtc> key thing being the foo = list(word)
[20:58:29] <malvin> you see random.shuffle() how does tjay]
[20:58:35] <malvin> *that work
[20:58:57] <malvin> have you read all about returne
[20:59:13] <just-me> No, I didn't need return yet
[20:59:14] <malvin> is it effecting the var pr outputting
[20:59:20] <han-solo> just-me: https://bpa.st/SRIQ
[21:00:09] <malvin> hint most of re
[21:00:34] <malvin> *them return the random output i think sorry for typos
[21:01:16] <ledtc> just-me https://bpa.st/JEDA
[21:01:24] <just-me> han-solo, that's not anagram works
[21:01:28] <ledtc> Or thats not what youre looking for ?
[21:01:52] <han-solo> just-me: yeah, i didn't get exactly where to use that
[21:02:02] <slee> desophos, https://pastebin.com/e6ipga57
[21:02:03] <infobob> https://bpaste.net/FH4A (repasted for slee)
[21:02:05] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[21:02:05] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (Remote host closed the connection)
[21:02:07] <malvin> a=random.shuffle(a)
[21:02:14] <just-me> ledtc, that's really cool, thanks :)
[21:02:17] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[21:02:17] *** Quits: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de) (Remote host closed the connection)
[21:02:23] <desophos> think of it this way: you have a tray of muffins. `shuffle` moves them around to different places in the same tray, while `sample` bakes a new tray of all the same muffins in different places
[21:02:28] *** Joins: elmcrest (~elmcrest@static.48.211.217.95.clients.your-server.de)
[21:02:45] <han-solo> just-me: what would be the provided to the user, and what would be input expected from the user
[21:02:47] <desophos> `k` in `sample` is how many muffins to bake for the new tray
[21:02:49] <just-me> han-solo, hints are not used yet, they are supposed to be printed after the scrambled word to give the player an idea of what it could be
[21:03:19] <ledtc> just-me Come on bro, its the top stackoverflow result on google. Google stuff before you ask please. "scramble word python"
[21:04:05] <han-solo> just-me: Okay, so the user get a question, and what else
[21:04:41] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (Quit: fail)
[21:04:44] <desophos> slee, what error are you getting?
[21:05:01] <just-me> Wait give me a sec
[21:05:11] <malvin> ah ty desophos
[21:05:22] <slee> desophos,     print('Album: ' + data[x]['album']['title'])
[21:05:23] <slee> TypeError: list indices must be integers or slices, not dict
[21:05:50] *** Joins: Narrat (~omnius@p200300df5f398fc106ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:06:05] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[21:06:15] *** Joins: node1 (~node1@user/node1)
[21:06:20] <malvin> what is x
[21:06:23] <desophos> slee: right, so that tells you that `x` is a dict, which means `data` is a list of dicts
[21:06:40] <desophos> `x` is each item in data, not each index
[21:06:51] <slee> ah
[21:06:55] <ledtc> yeah and thats one deep multi-dimensional Dictionary
[21:07:06] <slee> so a 2nd 'for' loop of each x?
[21:07:07] <desophos> so you can just use `x` instead of `data[x]` in this case
[21:07:22] *** Quits: rolo (~rolo@2a02:8108:8d80:7aa4:f8f8:6f11:edf1:1565) (Ping timeout: 252 seconds)
[21:07:40] <desophos> (although i'd recommend using a more descriptive name)
[21:07:58] *** Quits: jeho2 (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[21:08:03] <ledtc> cant you skip X and keep album in data ? like albums['album']['title']
[21:08:08] *** Joins: Buttersnot (~IceChat9@206.75.168.175)
[21:08:09] <just-me> Ok shuffling works! Thank you ledtc :D thank you all of you for being very patient :)
[21:08:21] <just-me> Now I can leave you alone :) bye
[21:08:22] *** Quits: just-me (~just-me@46.196.247.120) (Quit: Leaving)
[21:08:47] <desophos> in the for loop, `x` is the 1st dictionary in the list, then the 2nd, etc.
[21:08:59] <ledtc> desophos Sure, but why ?
[21:09:30] <desophos> ledtc, `data` is a list of dicts
[21:09:54] <desophos> i'm assuming this is from an api
[21:09:55] <ledtc> desophos okey, doing json stuff ?
[21:10:18] <desophos> yep, looks like it
[21:10:19] *** Joins: Mike00 (~Mike00@2601:40d:8000:7eb0:3995:7486:15d9:4587)
[21:10:35] <ledtc> desophos got link for api ? and what was the problem again xd
[21:10:41] *** Joins: korg815 (~korg815@user/korg815)
[21:10:45] *** Joins: BUSY (~BUSY@user/busy)
[21:10:49] <desophos> it's slee's question, not mine
[21:10:56] <desophos> i was answering lol
[21:11:05] *** Joins: iNKa (~NoBody@user/brocker)
[21:11:16] <ledtc> desophos Ohh lol.  I am such an asset to the team.
[21:11:20] <desophos> :P
[21:11:37] *** iNKa is now known as Brocker
[21:11:59] <Buttersnot> Hi Peeps, new to python, but not new to programming in general. I have a list of strings called mList. I am iterating through that list (for item in mList) and I'm trying to verify that the item starts with a specific substring. If I use "startswith" it works fine, as long  as there is no spaces at
[21:11:59] <Buttersnot> the beginning of item, which at times, there are.
[21:11:59] <Buttersnot>  Is there a way to combine strip and startswith ?  I tried item.strip.startswith(searchstring) but that doesn't work. Any suggestion?
[21:12:40] <desophos> Buttersnot, try item.strip().startswith(...)
[21:12:40] <bjs> Buttersnot: you need to call it.   item.strip().startswith(...)
[21:12:45] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[21:13:18] <Buttersnot> ohh I was so close! LOL!
[21:14:02] <Buttersnot> Works perfectly, thank you guys!
[21:14:28] <desophos> item.strip.startswith tries to look up startswith on strip on item, which fails because item.strip doesn't have an attribute called startswith
[21:14:34] <ledtc> Buttersnot I guess you would logically, like to augment the string before you look at it.
[21:15:08] <Buttersnot> "augment the string" ? What does that mean?
[21:15:19] <ledtc> Doing changes to it
[21:17:58] *** Joins: monkey_ (~user@190.104.116.134)
[21:19:28] *** Quits: ska (~ska@user/ska) (Ping timeout: 252 seconds)
[21:20:22] *** Joins: paul424 (~tom@ip-31-0-127-184.multi.internet.cyfrowypolsat.pl)
[21:21:29] *** Joins: MercilessDeth (~brad@136.49.61.2)
[21:21:41] *** Quits: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea) (Quit: subho)
[21:23:02] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[21:23:03] *** Joins: thiras (~thiras@user/thiras)
[21:23:31] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[21:25:04] <slee> desophos, i tried this, but still fails
[21:25:06] <slee>     for x in data:
[21:25:07] <slee>         print('Album: ' + x['album']['title'])
[21:25:13] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[21:25:13] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[21:25:49] <slee> KeyError: 'album'        but album is the first in each x, not sure why it errors
[21:26:06] *** Joins: califax (~califax@user/califx)
[21:26:23] <desophos> slee: hmm, does it fail right away or does it print some lines first?
[21:26:30] *** Joins: brabrax (~brabrax@user/brabrax)
[21:26:34] <slee> instant
[21:27:13] <altendky> i went and added a print of a log to the end of a pytest fixture (post-yield) because i wanted it to print that log info out with the test.  but...  being a fixture that may or may not get torn down with a specific test due to scope, this both doesn't work and doesn't make sense.  is there a better way to do this than having the fixture provide a context manage to be used in the test (thereby forcing you to remember that extra
[21:27:13] <altendky> step and indent another level)?  it doesn't have to be a print, i just want the log information readily available for review in the pytest output, at least for failures.
[21:27:17] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[21:27:25] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:28:21] <desophos> slee: hmm... without seeing the data, i can't be sure what the issue is. i would try debugging, for example `print('album' in x)` or other ways to make sure your assumptions about the data are correct
[21:28:25] <altendky> slee: add `print(repr(x))` right before the failing line
[21:28:34] <desophos> yeah, that too
[21:29:22] *** Quits: gggpkm (~gggpkm@188.119.64.181) (Ping timeout: 252 seconds)
[21:29:34] *** Quits: Mike00 (~Mike00@2601:40d:8000:7eb0:3995:7486:15d9:4587) (Quit: Client closed)
[21:29:41] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:30:36] <slee> altendky, desophos..ok, i see the error now, the very first x doesn't have album, so it fails...how can i tell it to continue on error?
[21:30:50] <slee> tr: ?
[21:30:53] <slee> try;
[21:30:58] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:31:03] <desophos> yes, you could use try/except
[21:31:07] <ledtc> if !album ?
[21:31:57] *** Joins: ska (~ska@user/ska)
[21:32:15] <slee> finally...try/except is working
[21:32:16] *** Quits: asix (~Anders@user/asix) (Quit: leaving)
[21:32:40] <altendky> slee: sometimes `album = x.get("album"); if album is None: continue` reads nicely
[21:32:55] <slee> ok, i'm sure i can get the rest...thanks for the help desophos, altendky
[21:33:09] <slee> i'll try that as well...thanks again
[21:33:23] <desophos> you're welcome!
[21:33:43] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37)
[21:33:46] *** Quits: Narrat (~omnius@p200300df5f398fc106ea56fffe2e7cdc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[21:34:19] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[21:35:24] <desophos> altendky, what are you logging? is it fixture info or a specific test?
[21:35:25] <ledtc> slee  Its bad practice to use try/except with out handling the except. sort of like the "its fine" meme.
[21:35:29] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[21:36:28] <slee> except: this = 'works' > for what i'm needing to do, this will suffice
[21:36:29] <altendky> desophos: the fixture starts some service processes that log to a file.  the tests request the fixture and then do stuff that may result in log entries.  when the test fails i would like to easily see the log so i can check for helpful entries there.
[21:36:48] <altendky> slee: don't bare `except:` or you will be lost when you make any other error
[21:36:56] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:f1b6:8be2:de1e:2db8) (Quit: Leaving)
[21:37:12] <altendky> slee: at least `except KeyError:`.
[21:37:16] <ledtc> slee Yeah like altendky said. it will work for every other error as well.
[21:37:26] <slee> noted
[21:37:41] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:40:46] <desophos> altendky, oh ok! you could mock/redirect the log output if having the file isn't important
[21:40:47] *** Joins: Akuli (~Akuli@82-203-166-27.bb.dnainternet.fi)
[21:41:42] <altendky> desophos: it is written to by the other processes, not the tests.  the tests makes a network request to the processes the fixture sets up.  and yes, it would be much nicer if this were all in the test process itself (it is async), but i'm not there yet.
[21:41:59] *** Joins: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea)
[21:42:11] <altendky> and i can get access to the file, i'm just looking for a tidy way to associate its content with the failed test in the pytest output
[21:42:19] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:42:21] <altendky> (including pycharm grouping it)
[21:42:30] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[21:42:31] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[21:43:19] *** Joins: brabrax (~brabrax@user/brabrax)
[21:43:30] *** Joins: califax (~califax@user/califx)
[21:43:51] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[21:45:05] *** Joins: nergar (~quassel@177.225.147.106)
[21:46:03] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:46:09] *** Joins: fluffyballoon (~user@131.93.208.196)
[21:47:44] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:48:45] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:48:57] *** Joins: Mattiaslndstrm (~Mattiasln@94.191.152.37.mobile.tre.se)
[21:49:18] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[21:50:24] *** Quits: nergar (~quassel@177.225.147.106) (Remote host closed the connection)
[21:50:27] <desophos> altendky, does this help? https://stackoverflow.com/a/28201810
[21:50:33] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[21:54:12] *** Joins: Narrat (~omnius@p200300df5f0e906306ea56fffe2e7cdc.dip0.t-ipconnect.de)
[21:54:15] *** Quits: vicfred__ (~vicfred@user/vicfred) (Quit: Leaving)
[21:55:18] <altendky> desophos: i don't think it quite does, but following to the docs there's reference to `TestReport`.  i should probably read up on that and see how you can inject stuff and how it is output.
[21:55:19] *** Parts: fluffyballoon (~user@131.93.208.196) (ERC (IRC client for Emacs 26.1))
[22:00:18] *** Joins: wilk (~wilk@user/wilk)
[22:02:29] *** Joins: Macuser (~Macuser@216.30.159.201)
[22:03:37] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-3171-5bf3-53f0-51fc.res6.spectrum.com)
[22:05:02] *** Joins: arthem (~rehmat@user/arthem)
[22:05:06] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2) (Remote host closed the connection)
[22:05:14] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-3171-5bf3-53f0-51fc.res6.spectrum.com) (Client Quit)
[22:05:20] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:1205:1bfb:1994:f4d2)
[22:08:34] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[22:08:34] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:09:30] *** Joins: califax (~califax@user/califx)
[22:09:53] *** Joins: brabrax (~brabrax@user/brabrax)
[22:10:32] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:10:34] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[22:16:40] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[22:17:05] *** MTeck is now known as MTecknology
[22:17:16] *** Joins: sodaa (~soda5n4pn@2001:470:69fc:105::1:ae4)
[22:17:20] <rakoon> Is asyncio.gather slower than await each async request func?
[22:18:22] *** Joins: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch)
[22:18:38] <altendky> rakoon: mostly it does another thing.  i don't know if there would be a universal answer to which is faster.
[22:19:22] *** Quits: Mattiaslndstrm (~Mattiasln@94.191.152.37.mobile.tre.se) (Ping timeout: 252 seconds)
[22:19:24] <rakoon> altendky: can u please give me some more info cause I have no idea why im getting slow results. What is the other thing?
[22:20:12] <rakoon> altendky: so it is happening to others it is not only me?
[22:20:23] *** Parts: sodaa (~soda5n4pn@2001:470:69fc:105::1:ae4) ()
[22:20:58] <paul424> Hello, I am collecting simple entry questions like fizz buzz; or displaying the multiplication table ... any other ideas ? for teenagers  who might have happen some programming knowledge .... hmmm
[22:21:06] <altendky> rakoon: gather is a way to wait for a bunch of results.  it is unlikely to be a major performance problem if you are trying to collect a bunch of results.  would you like to share what you are doing and what you observe that you dislike?
[22:22:00] <deniska> paul424: "Guess a number" game is a typical hello world I try in a new language
[22:22:11] <paul424> deniska++
[22:23:18] <rakoon> altendky: i have users and for each user i do 6-7 requests. I do gather(process_user() for user in users). Now inside process_user i tested await each request and tried to gather(request for request in requests) and this is slower overall.
[22:24:36] <rakoon> altendky: I am testing 500 users and the await does 13 seconds overall and gathering does 15.5 seconds
[22:24:52] *** Quits: arthem (~rehmat@user/arthem) (Ping timeout: 252 seconds)
[22:25:08] <altendky> rakoon: maybe you need something more akin to `gather(request() for user in users for request in requests)` such that they are all actually concurrent.
[22:25:10] *** Joins: Ivii (~Ivyy@2001:a61:1329:3e01:2142:ac7e:1013:d974)
[22:25:15] <ramblebamble> paul424, have a look at the rosetta code page
[22:25:27] <altendky> rakoon: also, sometimes sharing the actual code helps
[22:25:46] <rakoon> altendky: yeah im not sure if i gather outside the users and for each user i gather again, i dont know if that would be making it slow
[22:26:01] <rakoon> altendky: i know im sorry i cant :/
[22:26:21] <rakoon> i just wanted to know in general if there is some sort of known issue or something
[22:26:47] <altendky> rakoon: you consistently get, over many runs of each interlaced together, exactly 13.0 and 15.5 seconds?
[22:27:22] <rakoon> altendky: not "exactly" but it is always a bit slower around 2 second
[22:28:39] <rakoon> in profiling the time spent in requests is just a bit slower like 0.1 seconds which is fine but the overall time changes and im thinking maybe for example the nested gathering it is adding overhead or something
[22:28:55] <altendky> rakoon: i don't know offhand, but i don't know that i would.  10% difference makes me think it's something in how your code is procesing stuff.
[22:29:54] <rakoon> altendky: i know it is difficult if u dont see the code ill keep debugging it and see. I might come back with some code next time
[22:30:07] *** Quits: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea) (Quit: subho)
[22:30:44] *** Quits: maveonair (~maveonair@77-58-52-124.dclient.hispeed.ch) (Quit: maveonair)
[22:30:47] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2.1)
[22:30:58] *** Quits: pro_z (~pro_z@37.214.40.135) (Ping timeout: 252 seconds)
[22:32:51] *** Joins: Samian (~Sami@user/samian)
[22:33:05] *** Joins: newpy (~newpy@206.168.231.90)
[22:33:10] *** Joins: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea)
[22:33:32] *** Quits: subho (~subho@2405:201:9001:a805:2587:3d2f:c530:98ea) (Client Quit)
[22:34:15] <pycurious> how do i async wait for a redis variable to change to True from False? Preferably without spending resources? (mostly IPC communication problem)
[22:34:41] *** Joins: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[22:35:49] *** Roedy- is now known as Roedy
[22:36:53] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:37:12] <deniska> pycurious: if instead of a variable you can use a list, you can BLPOP from it. Or use a pubsub mechanism
[22:38:37] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 252 seconds)
[22:41:25] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[22:42:38] *** Quits: ATAD (~ATAD@user/atad) (Ping timeout: 260 seconds)
[22:44:12] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[22:44:20] *** Quits: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net) (Quit: WeeChat 3.2)
[22:45:07] *** Quits: Hazza (~Haxxa@122-199-44-5.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:43] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[22:46:34] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 245 seconds)
[22:47:22] *** Joins: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com)
[22:49:17] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[22:49:31] *** Joins: nomic (~nomic@185.192.69.207)
[22:50:08] *** Quits: Buttersnot (~IceChat9@206.75.168.175) (Quit: Clap on! , Clap off! Clap@#&$NO CARRIER)
[22:50:35] *** Joins: ATAD (~ATAD@user/atad)
[22:53:12] *** Quits: stealth[] (~stealth]@34-72-142-46.pool.kielnet.net) (Read error: Connection reset by peer)
[22:54:24] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:54:57] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[22:55:31] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[22:56:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[22:58:17] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[22:58:29] *** Joins: fikran (~fikran@user/fikran)
[22:58:31] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[22:58:59] *** Quits: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46) (Remote host closed the connection)
[23:02:02] *** Joins: common (~common@user/common)
[23:02:15] <common> hey guys i am trying to write a bitcoin address generator in python. i am using python 3 and am having some trouble converting from my verifying key to a public key in hex
[23:02:27] <common> https://pastebin.com/AjnpfQ1W
[23:02:28] <infobob> https://bpaste.net/TFXA (repasted for common)
[23:02:35] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[23:02:37] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[23:02:46] <common> here is my code, i keep getting errors trying to get my strings to hex
[23:02:55] <common> any help would be appreciated
[23:03:08] *** Joins: kostkon (~kostkon@2a02:587:a104:3da6:4d6c:40e6:f58:8e46)
[23:04:20] <common> ive tried using .hex() but get str object has no attribute for hex
[23:04:21] <KirkMcDonald> common: What sort of object is `vk`?
[23:04:25] <KirkMcDonald> Ah, a string.
[23:04:33] <KirkMcDonald> But a string containing what?
[23:04:54] <common> i think it is just VerifyingKey object, im using ecdsa library
[23:05:01] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 252 seconds)
[23:05:02] <KirkMcDonald> I am not familiar with this library.
[23:05:12] <common> its retruning this as the string
[23:05:12] <common> b'\x04VerifyingKey.from_string(b\'\\x03i\\x8ep\\xd2\\xcc\\xbd\\x87"\\xc8\\n[~\\x83iN\\xb8\\xd9\\xbf\\x9de\\xe30\\x04\\x1c\\xffMq\\xaaA\\xfev\\x12\', SECP256k1, sha1)
[23:05:34] <common> that is with my '\04' appended as a prefix
[23:06:21] <KirkMcDonald> common: Yeah, you don't want str(vk), then.
[23:06:26] <common> ive even tried converting my string to an int and converting to hex that way but get a different error
[23:06:41] <KirkMcDonald> common: Looking at the library's documentation, it looks like vk.to_string() is a thing?
[23:06:42] <common> something about the base im using
[23:06:59] <KirkMcDonald> It has some other methods, too.
[23:07:08] <common> oh okay i must be able to use that .tostring.. so thats a method on that object but .toString cant normally be used in python correct
[23:07:30] <KirkMcDonald> It's a thing if the class defines a method by that name.
[23:07:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:08:25] *** Quits: Ivii (~Ivyy@2001:a61:1329:3e01:2142:ac7e:1013:d974) (Remote host closed the connection)
[23:10:15] <common> gotcha i am definitley on the right path now. thank you guys i guess when im using an object that i dont know i should look at the methods in that class
[23:10:19] <common> thank you guys!
[23:11:07] *** Joins: extropiator (~extropiat@user/extropiator)
[23:12:34] *** Quits: Azin (~Azin@user/azin) (Quit: Leaving...)
[23:15:19] *** Joins: CodePoint (~BitShift@2600:1700:3070:3790:f57a:5a6:d99c:8853)
[23:15:50] <sveinse> I know py2.7 is EOL, but may I ask how I can get a package which has installed itself into C:\Python27\lib\site-packages into a virtualenv from the same py? py2's pip has no record of it
[23:16:09] *** Quits: Dotz0cat (~Dotz0cat@h176.88.187.173.dynamic.ip.windstream.net) (Ping timeout: 245 seconds)
[23:17:32] *** Quits: CodePoint (~BitShift@2600:1700:3070:3790:f57a:5a6:d99c:8853) (Client Quit)
[23:18:45] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:18:59] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[23:19:54] *** Quits: paul424 (~tom@ip-31-0-127-184.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:20:25] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 252 seconds)
[23:21:53] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[23:22:27] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[23:22:43] *** Joins: Warped (~Warped@user/warped)
[23:23:18] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[23:23:58] <altendky> sveinse: the minimal but maybe useful amount would be to copy the directory to the env's `site-packages/`.  maybe the pypi name is different than the import name or it was installed from a git repo?
[23:24:36] <altendky> sveinse: or if your last comment means you get a no distribution message from `pip install` but maybe pypi actually has it, they could have gotten the metadata wrong when converting to py3.  maybe you'd like to share the import package name?
[23:25:08] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[23:25:47] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[23:25:49] <sveinse> altendky: It is installed via an ancient python (windows) installer which doesn't use pip and it injects itself into site-packages. It worked by manually copying that package into my virtualenv
[23:26:19] <sveinse> altendky: sure, it's wx
[23:27:48] <sveinse> I'm porting some ancient (2004-ish) py2 package to py3. But before I dive into the fun py3 stuff, I need a running validator in 2.7, so I had to dig up my forgotten py2 skills :D
[23:28:05] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:29:03] *** Joins: golden_ticket (~jrand@pool-71-114-43-42.washdc.fios.verizon.net)
[23:29:25] <sveinse> But the package has some strageness. It uses gnosis, which is a introspection and XML library which does pickle of XML via py objects, so its littered with eval and exec....
[23:29:29] <golden_ticket> I'm looking for a library that allows me to use cluster computing, and share global variables. Does anyone have any suggestions?
[23:30:22] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[23:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[23:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:59] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[23:32:19] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[23:33:05] *** Quits: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net) (Read error: Connection reset by peer)
[23:33:16] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:36:22] *** Joins: somazero (~steve@2600:8805:b00:28::16f2)
[23:39:20] *** Quits: somazero (~steve@2600:8805:b00:28::16f2) (Quit: WeeChat 3.0)
[23:39:35] *** Joins: steve (~steve@2600:8805:b00:28::16f2)
[23:39:35] *** Quits: steve (~steve@2600:8805:b00:28::16f2) (Client Quit)
[23:39:37] <aphysically> I guess another option if I want to keep my code as close to the correct typing as possible is to set AnyStr = typing.Any, then use AnyStr like normal but without setting the class as generic
[23:39:50] <aphysically> this ruins the type checking and isn't really as good as avoiding walrus though
[23:40:08] *** Joins: steve (~steve@2600:8805:b00:28::16f2)
[23:40:16] <aphysically> I did confirm it doesn't work on mypy git as well
[23:40:54] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[23:41:13] <sveinse> I notice that futurize is changing `if a in mydict.keys()` into `if a in list(mydict.keys())`. Is this a py2 thing or a general py3 thing? In py3 context, wouldn't the if test just iterate the keys() iterator and test for membership and then done? Why go by list?
[23:41:37] *** Quits: steve (~steve@2600:8805:b00:28::16f2) (Client Quit)
[23:42:09] *** Joins: somazero (~somazero@2600:8805:b00:28::16f2)
[23:42:15] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:42:28] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[23:42:42] <energizer> sveinse: it's because your py2 code might have assumed the keys were a list
[23:42:43] *** Joins: prs (~Priyanshu@2409:4063:6d0c:b492::7208:8108)
[23:42:58] <sveinse> energizer: perfect, thanks
[23:43:08] *** Joins: Dotz0cat (~Dotz0cat@h71.246.19.98.static.ip.windstream.net)
[23:43:39] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[23:44:33] *** Joins: adhawkins (~adhawkins@user/adhawkins)
[23:45:02] <adhawkins> I have an array of dicts each of which contains a dict containing another dict. It's possible that not all of these levels will exist.
[23:45:26] <adhawkins> Is there an 'easy' way to refer to an entry in the lowest level dict without checking that the correct entry appears in the top level, the next level, and the one after that etc...
[23:46:28] *** Joins: ElPresidente (~ElPreside@108-74-113-129.lightspeed.tukrga.sbcglobal.net)
[23:47:16] <sbrown2> adhawkins: You could use a try/except, assume it's there and handle except KeyError if it's not
[23:47:18] <adhawkins> I have 'self.config['episodeinfo']['guid']['size'] and I want to read the 'size' value
[23:47:52] <adhawkins> That sounds like a plan sbrown2, is that the 'best' way to do it?
[23:48:04] *** Joins: TMan459 (~TMan459@068-187-099-141.res.spectrum.com)
[23:49:53] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[23:50:35] <sbrown2> adhawkins: It's often acceptable. In your implementation, do you think the 'size' lookup will succeed more often than it fails?
[23:50:43] *** Quits: y1n-v1 (~y1n@178.115.69.127.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[23:50:56] <altendky> sveinse: lovely.  i think they've gotten to the point now at least that they have wheels for everything, maybe.  (but yeah, that doesn't help with py2 or an old version)
[23:50:57] *** Joins: CodePoint (~BitShift@96.47.237.21)
[23:51:02] *** Quits: CodePoint (~BitShift@96.47.237.21) (Remote host closed the connection)
[23:51:19] <ledtc> sbrown2 whats the problem with self.config['episodeinfo']['guid']['size'] ?
[23:51:24] <ledtc> to long or what ?
[23:52:05] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:52:16] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[23:52:41] <sbrown2> ledtc: I don't think I implied there was a problem. Wrong user?
[23:52:49] *** Quits: desophos (~desophos@2601:249:1680:a570:9495:66ea:ccc2:b869) (Quit: Leaving)
[23:53:11] *** Quits: Lewky (~Lewky@146.70.50.10) (Ping timeout: 246 seconds)
[23:53:13] *** Quits: golden_ticket (~jrand@pool-71-114-43-42.washdc.fios.verizon.net) (Quit: Leaving)
[23:53:30] <ledtc> adhawkins whats the problem with self.config['episodeinfo']['guid']['size'] ?
[23:53:30] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[23:53:54] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:53:55] *** Joins: Lewky (~Lewky@146.70.50.10)
[23:55:40] <adhawkins> ledtc: I might not have created those keys yet, so the value won't exist.
[23:56:06] <adhawkins> For example, self.config might not have an entry for 'episodeinfo', and that might not have an entry for 'guid', and that might not have an entry for 'size'
[23:56:10] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[23:56:31] <ledtc> adhawkins So what the logic you want to happend in that case ?
[23:56:41] <adhawkins> It assume the value is zero say.
[23:57:24] *** operationa1 is now known as operational
[23:57:48] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[23:58:23] <adhawkins> So something like this: https://paste.debian.net/1214225/
[23:58:38] *** Joins: JanC (~janc@user/janc)
[23:59:05] <ledtc> "It assume the value is zero say" huh  ?
[23:59:25] <adhawkins> If the key doesn't exist, the code should assume the key *did* exist, with a value of zero.
[23:59:36] <adhawkins> Much like the paste I sent (if I've done it right!)
