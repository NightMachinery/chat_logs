[00:02:30] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:02:31] *** Quits: plantman2 (~plantman@2601:405:4680:1b0::2) (Quit: Leaving)
[00:03:46] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[00:03:56] *** Joins: plantman (~plantman@2601:405:4680:1b0::2)
[00:04:23] *** Quits: extern (~archer@213.137.65.201) (Quit: WeeChat 3.3)
[00:05:59] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:06:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[00:07:26] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 268 seconds)
[00:09:07] *** Joins: monkey_ (~user@190.104.116.153)
[00:11:34] <Kit> valgrind is super unhelpful
[00:11:38] <Kit> https://penis.observer/DDi_D.png
[00:11:45] <Kit> i cant understand this
[00:11:58] <Kit> (this is compiled with -g too)
[00:12:53] <Kit> is this just something fucky with android or something else cuz it works fine on debian
[00:14:31] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:16:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:17:08] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Remote host closed the connection)
[00:20:26] <kurahaupo> Kit: Do you think you could paste the text instead of an image? (And how about using a paste site that doesn't have a prurient  domain name.)
[00:21:06] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[00:21:18] *** justache is now known as justBOOMER
[00:22:05] *** Joins: maxxe (~maxxe@user/maxxe)
[00:23:37] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:ede1:63e1:1b15:d52)
[00:23:37] *** Quits: Thedarkb1 (~Thedarkb@2001:bb6:b403:e042:eefd:c6c7:bba0:4cad) (Read error: Connection reset by peer)
[00:23:38] *** Joins: Thedarkb (~Thedarkb@86-42-4-182-dynamic.agg3.kny.prp-wtd.eircom.net)
[00:24:08] <kurahaupo> Kit: when you say "works fine on Debian" do you mean that valgrind doesn't report any issues on Debian?
[00:24:18] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:f400:3641:c976:8741) (Read error: Connection reset by peer)
[00:24:30] <Kit> oh sorry for the delay
[00:24:32] <Kit> uh
[00:24:58] <Kit> by "works fine" i mean it prints an understandable error
[00:25:25] <Kit> its been doing this every time ive used valgrind via termux
[00:25:53] <Kit> havent tried it on debian with this specofoc program tho
[00:26:04] <Kit> but uea
[00:26:05] <nitrix> Kit, https://i.imgur.com/d0zTq1N.png
[00:26:32] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:27:38] *** Parts: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (WeeChat 3.3)
[00:27:59] <cousteau> Kit: that looks like some sort of error / core dump
[00:28:04] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[00:28:12] <tk> Kit: looks like C++
[00:28:26] <kurahaupo> ugh, friggin imgur. I hate being subjected to ads
[00:28:42] <tk> kurahaupo: We value your privacy.
[00:28:59] <cousteau> kurahaupo: that's just an image though... do you get ads with that link?
[00:29:10] <nitrix> kurahaupo, How are you getting an ad to a hotlinked image?
[00:29:15] <cousteau> what's an ad?
[00:29:49] <kurahaupo> cousteau: imgur looks at the browser ID, and if it thinks it's mobile, it doesn't send the raw image (even with an image link) it seems the whole page
[00:29:58] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[00:29:59] <Kit> tk its C
[00:30:03] <Kit> alsp
[00:30:06] <tk> Kit: the error is coming from a C++ library
[00:30:07] <cousteau> kurahaupo: oh right.  Yeah, imgur does that
[00:30:09] <Kit> oh
[00:30:13] <tk> or something which mangles symbols
[00:30:17] <Kit> ohhh
[00:30:21] <kurahaupo> hence f*ck imgur
[00:30:21] <tk> but it looks like probably C++ mangling
[00:30:22] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[00:30:34] <tk> could be wrong though
[00:30:36] <nitrix> kurahaupo, Ah yep. Tried it in the emulator, their mobile experience seems much worse.
[00:30:37] <Kit> but the thing is that i cant find a `main`
[00:30:46] <kurahaupo> Kit: Did you compile C using a C++ compiler?
[00:30:46] <Kit> its stack trace is like
[00:30:48] <tk> Kit: could be a separate thread
[00:30:54] <cousteau> kurahaupo: I used to browse it in my tablet, in desktop mode, because in mobile mode everything was capped
[00:30:59] <Kit> kurahaupo: no i used gcc
[00:31:00] <tk> or maybe this is some java FFI weird nonsense
[00:31:03] <cousteau> until it decided to stop working in desktop mode
[00:31:08] <cousteau> now I no longer use it
[00:31:11] <tk> no, it says char_traits, definitely C++ code
[00:31:12] <Kit> tk: i domt think im using multi threads
[00:31:23] <tk> Kit: check by running in gdb
[00:31:30] <cousteau> kurahaupo: anyway... uBlock Origin maybe?
[00:31:33] <tk> it will tell you if threads are spawned (libraries can spawn threads too)
[00:31:44] <tk> cousteau: it probably won't work on a phone
[00:31:53] <cousteau> it works on firefox for android
[00:32:03] <kurahaupo> Kit: The stack trace doesn't even show "main", which means the error occurred during construction of static objects
[00:32:11] <cousteau> and AdGuard works on Safari for iOS
[00:32:19] <Kit> Pointer tag for 0x5555559f78 was truncated.
[00:32:21] <Kit> Program received signal SIGABRT, Aborted.
[00:32:23] <kurahaupo> what's iOS?
[00:32:23] <Kit> 0x0000007fbe22930c in abort () from /apex/com.android.runtime/lib64/bionic/libc.so
[00:32:27] <tk> I think I might be using AdGuard then (on safari on iOS on my work phone)
[00:32:30] <Kit> this is what gdb prints
[00:32:42] <tk> Kit: and bt prints?
[00:33:02] <kurahaupo> cousteau: Never mind ad blocking, I just want to get raw images without a surrounding page
[00:33:05] <cousteau> (to be clear, I'm not blaming kurahaupo for getting ads, just suggesting workarounds)
[00:33:06] <Kit> whats bt
[00:33:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:33:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:33:11] *** Joins: wroathe (~wroathe@user/wroathe)
[00:33:15] <tk> I think what kurahaupo says seems more plausible
[00:33:22] <tk> that it's some error in a constructor
[00:33:27] <tk> what IS at the bottom of the BT btw?
[00:33:45] <Kit> wht is a bt
[00:33:47] <Kit> oh
[00:33:48] <tk> backtrace
[00:33:51] <Kit> yea
[00:33:53] <Kit> uh
[00:33:55] <Kit> hold on
[00:34:10] <Maxdamantus> Kit: my first guess would be that a string is missing a '\0'
[00:34:12] <Kit> #0  0x0000007fbe22930c in abort () from /apex/com.android.runtime/lib64/bionic/libc.so
[00:34:14] <Kit> #1  0x0000007fbe216f14 in realloc () from /apex/com.android.runtime/lib64/bionic/libc.so
[00:34:16] <Kit> #2  0x000000555555768c in loadchars (path=0x5555555da3 "training.csv") at ./20.c:150
[00:34:17] <tk> hmm __dl__start is a symbol in the linker
[00:34:18] <Kit> #3  0x0000005555557924 in main () at ./20.c:194
[00:34:20] <cousteau> maybe paste it on a pasting site instead of an image hosting site
[00:34:20] <nitrix> Careful.
[00:34:21] <tk> I get it now
[00:34:22] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:34:23] <HisShadow_> uh oh
[00:34:24] <tk> the linker is crashing
[00:34:30] <tk> what the fuck?
[00:34:41] <kurahaupo> there's a call to "read_binary_config" 
[00:35:00] <kurahaupo> tk: probably code compiled with incompatible options
[00:35:06] <Kit> the full error imma try to post somehow
[00:35:10] <cousteau> or well, do that, which apparently won't auto-ban you with only 4 lines
[00:35:17] <tk> look Kit do us a favour and send us the actual backtrace from valgrind in text format?
[00:35:30] <tk> cousteau: it won't auto-ban you with interleaving messages iirc
[00:35:32] <tk> or something like that
[00:35:42] <nitrix> 4 lines is the exact trigger. They get a warning in PM, next line is the +q.
[00:35:46] <Kit> how do i redir stderr to a pipe
[00:35:46] <tk> at least not the early-1-minute-auto-ban 
[00:35:52] <cousteau> <command> | nc termbin.com 9999
[00:35:58] *** Joins: dutch (~DutchIngr@user/dutch)
[00:35:59] <tk> Kit: 2>&1 |
[00:36:04] <tk> redir it to stdout first
[00:36:12] <cousteau> <command> 2>&1 | nc termbin.com 9999
[00:36:14] *** Quits: i336 (~i336@101.163.143.173) (Ping timeout: 260 seconds)
[00:36:23] <cousteau> will paste the output of <command> directly on termbin.com and give you a share link
[00:36:24] <cousteau> no ads
[00:36:28] <Kit> https://0x0.st/-7ln.txt
[00:36:53] <cousteau> that works too
[00:37:15] *** Quits: acerbic (~acerbic@cs-xdata-50-86-48-149.cspire.com) (Ping timeout: 250 seconds)
[00:37:57] <tk> Kit: i think those might just be false positives from valgrind regarding your linker doing weird things
[00:38:00] <tk> but who knows
[00:38:01] *** Joins: i336 (~i336@101.175.1.240)
[00:38:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:38:20] <Kit> yeah but where are the true positives
[00:38:31] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[00:38:38] <tk> also, valgrind is crashing?
[00:38:54] <Kit> yea i think
[00:39:24] *** Joins: Ox151 (~user@user/ox151)
[00:39:29] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[00:40:36] <tk> found some references online referring to this crash as a valgrind bug
[00:40:45] <tk> realistically I think valgrind crashing is a valgrind bug
[00:40:55] <tk> since it should be able to not-crash irrespective of how broken your code is
[00:41:11] <tk> the potential-false-positives from __dl_ it may be possible to safely ignore
[00:41:19] <tk> I don't think valgrind is getting far enough to actually trigger YOUR bug
[00:41:39] <tk> you may be able to solve this by getting valgrind to ignore erorrs coming from /apex/com.android.runtime/bin/linker64
[00:41:45] <tk> it would be worth trying
[00:42:59] <Ox151> hello, I am trying to make my own tail program. from what i gathered you can SEEK_END to the file and go back some number of blocks. I see from man inode that block size is 512. So I am wondering how I can correlate line numbers from the end of a file using block sizes. Ive tried lseek(fd, -(10 * 512), SEEK_END) to get 10 blocks from the ends of the file representing lines, but that gives too many lines and not the desired 10.
[00:43:00] *** Quits: alch (~alch@151.44.66.156) (Read error: Connection reset by peer)
[00:43:08] *** Quits: imp (~imp@192-141-191-227.alternativaip.net.br) (Read error: Connection reset by peer)
[00:43:45] <tk> 0x151: so ... I'm not sure what you expected ... obviously a file is allowed to have as many characters per line as it wants
[00:44:20] <tk> 0x151: you're also going to have to handle cases where SEEK_END doesn't work (since you may be getting passed something which can't be seeked)
[00:44:58] <tk> 0x151: you can SEEK_END and read a chunk and then seek further back until you get just 10 lines.
[00:45:43] <tk> if you've already gotten more than 10 lines, you just cut things short
[00:45:45] <nitrix> Ox151, SEEK_END isn't required to be supported on binary streams, and for text streams you ought to use SEEK_SET of a value previously obtained with ftell.
[00:46:20] <nitrix> The "portable" way is with fstat and possibly additional processing of the content.
[00:47:19] <Ox151> tk: thank you for reply, with incramentally seeking backwards, is there anything from preventing line chopping? I am just trying to wrap my head around getting full line reliably. and i understand there is other cases that have to be checked initally i am trying to get it working on a large file that has many lines instead of one that might have only a few or only 1 or 0.
[00:47:23] *** Joins: alch (~alch@151.68.48.4)
[00:48:13] *** tombobcat is now known as selikolg
[00:48:18] <nitrix> Well, you have to search for a \0 delimiter. Whether it's you or another library, someone has got to do it. Files don't know about lines.
[00:48:19] <tk> 0x151: you're going to have to seek backwards until you have more than 10 lines because obviously you can't know that you haven't seeked into the middle of a line.
[00:48:38] <nitrix> Err, \n or \r\n in your case.
[00:48:42] <tk> 0x151: make sure you write the non-seek fallback first though
[00:49:03] <tk> makes writing a quick testcase easier if you have something known to test against
[00:50:28] <Ox151> thank you tk nitrix that helps
[00:50:39] *** Joins: evocatus (~evocatus@213.193.2.105)
[00:51:01] <nitrix> You can use fstat to get the file size, then seek to the end, read chunks of a fixed size, search backwards for delimiters in those chunks you've read, continue until you have seen 10 delimiters.
[00:51:19] <nitrix> You now have the offset of where the last 10 lines begin. Do whatever you want after that.
[00:51:30] *** Quits: selikolg (~tombobcat@178.62.2.76) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:51:47] *** Joins: selikolg (~selikolg@178.62.2.76)
[00:52:27] <nitrix> You'll probably want <= 9 delimiters, to cover the scenario where there are less lines and also when the last line isn't line-terminated, etc.
[00:54:34] <tk> if the last line isn't terminated you could take the posix approach and just pretend the file doesn't exist
[00:56:09] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[00:56:14] *** Joins: Libero (~Libero@77.49.77.131.dsl.dyn.forthnet.gr)
[00:59:00] *** Joins: Macuser (~Macuser@2600:1003:b45e:2f7f:59ee:3b4c:2039:46eb)
[01:00:59] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:03:30] <Maxdamantus> Without trying it or looking at any documentation, intuitively I'd expect an unterminated line to not be considered a line by `tail`.
[01:03:58] <Maxdamantus> so it should print it in any case, without counting it as one of the desired lines.
[01:04:40] <Kit> is github down or smth i cant seem to push to it
[01:04:45] <Maxdamantus> Yes.
[01:04:49] <Maxdamantus> https://www.githubstatus.com/
[01:04:59] <Kit> fucccckkkkk
[01:05:19] * pragma- squints at github actions.
[01:06:59] <Kit> how long do you think the outage would be
[01:08:23] *** Joins: rgrinberg (~textual@200.5.63.76)
[01:08:39] <Kit> oop its back now
[01:08:45] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:9d34:9ef:e98a:2cbe) (Read error: Connection reset by peer)
[01:10:31] <pragma-> it amazes me that github freely lets anybody run actions. 
[01:10:35] <Maxdamantus> Hmm.. apparently neither coreutils' nor busybox's `tail` implementation works in the way I'd expect. Yuck.
[01:11:41] <Maxdamantus> `wc` works the way I expect, and `tail` is inconsistent with that. So you can do `tail -10 | wc -l` and get `9`
[01:11:52] <Kit> dammit its down again
[01:12:38] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[01:12:42] <nomagno> Good thing I switched my project hosting to Gitea literally this week
[01:13:01] <Kit> wait no
[01:13:04] <Kit> its on again
[01:13:07] <Kit> lol
[01:13:08] <Maxdamantus> ,sh (seq 1 20; echo -n nope) | tail -10 | wc -l
[01:13:09] <candide> Maxdamantus: 9
[01:13:17] <Kit> just long enough to push
[01:13:25] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[01:14:57] *** Quits: pert (~pert@fsf/member/pert) (Ping timeout: 250 seconds)
[01:16:27] *** Quits: [SyntaxError] (~user@user/syntaxerror/x-9308191) (Quit: see you soon)
[01:18:42] <nomagno> Hosting C on github is non-portable to implementations that don't have internet connection libc functions! This is karma
[01:21:25] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:24:37] <ioxzev1z> Maxdamantus, why exactly does that give 9?
[01:24:54] <ioxzev1z> Is it beacuse of some end-of-line technicality or what?
[01:25:12] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[01:25:41] <Maxdamantus> ioxzev1z: it's because they treat the unterminated line as a special case in `tail`: https://github.com/coreutils/coreutils/blob/master/src/tail.c#L567
[01:26:07] *** Joins: Red_ (~Red@97.109-247-81.customer.lyse.net)
[01:26:17] <ioxzev1z> Ah
[01:26:36] <Maxdamantus> Seems like it's been there since the original coreutils `tail` implementation in 1992, but it seems illogical to me (and as demonstrated, inconsistent with `wc`)
[01:26:37] <ioxzev1z> Surely it should check for '\n' or '\0', not just the former
[01:26:48] <Maxdamantus> No. It shouldn't have it as a special case.
[01:27:03] <Maxdamantus> so `tail -0` should always return whatever bytes are after the last '\n' in a file.
[01:27:25] *** candide sets mode: -o candide
[01:27:27] <Maxdamantus> just as `tail -1` returns whatever bytes are after the penultimate '\n' in a file.
[01:27:39] <ioxzev1z> oic
[01:29:02] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[01:29:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:29:18] *** Quits: Red (~Red@97.109-247-81.customer.lyse.net) (Ping timeout: 256 seconds)
[01:34:20] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 260 seconds)
[01:34:25] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:35:10] <riv> Which is better? https://ideone.com/VvSycX https://ideone.com/Ddj2qf
[01:35:20] <riv> I changed line 9
[01:35:37] <riv> I'm putting money with cents into floats and checking if the number is exactly representable
[01:36:00] <riv> they give different results 76 and 24 not representable
[01:36:45] *** Quits: Macuser (~Macuser@2600:1003:b45e:2f7f:59ee:3b4c:2039:46eb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:37:42] <BtbN> Don't put money into floats. Ever.
[01:37:44] <nitrix> Better at doing what, representing money? Neither. You don't use floating pointer numbers for that.
[01:37:50] <trenka> float for money? :)))
[01:38:50] <Maxdamantus> riv: it's not a very good test, because most of those numbers are not representable.
[01:39:14] <riv> Maxdamantus: that is what i'm trying to count
[01:39:29] <nitrix> When precision is required, you want types with fixed precision or an arbitrary precision library.
[01:39:45] <Maxdamantus> riv: you're undercounting due to rounding errors that happen to get you back to where you started.
[01:39:57] <riv> Maxdamantus: in both versions?
[01:40:49] <Maxdamantus> riv: yes.
[01:40:56] <riv> thanks
[01:41:16] <riv> How would I correctly check representability of a number with cents?
[01:41:18] <Maxdamantus> riv: eg, .02 is also not representable in floats (assuming IEEE-754, which is probably used)
[01:41:28] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[01:42:15] <SymbioticFemale> what is a "CR" and a "LF"? reference: "EVBUFFER_EOL_CRLF_STRICTAn EOL is a CR followed by an LF."
[01:43:17] <nitrix> CR is a carriage return, aka the \r character, while LF is a line feed character, aka the \n character.
[01:43:30] <SymbioticFemale> ah, thanks
[01:43:51] <nitrix> Here they define EOL (and end of line) as CRLF, aka \r\n.
[01:45:26] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[01:46:56] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:47:00] <Maxdamantus> riv: maybe gcd(cents, 100)%2 == 0
[01:47:18] <riv> I see. avoid float entirely. thanks!
[01:47:47] <Maxdamantus> (that should determine representability)
[01:47:54] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Client Quit)
[01:47:56] <nitrix> SymbioticFemale, (The names are from the ASCII character table: https://cs.smu.ca/~porter/csc/ref/asciifull.gif)
[01:48:15] <riv> Maxdamantus: hmm does this always work even when c is large?
[01:49:26] <Maxdamantus> riv: should do, but you should be able to just use `cents%100` anyway.
[01:50:39] <riv> i was worried about how the precision of floats is worse as floats get larger
[01:50:52] <SymbioticFemale> nitrix: useful. thanks.
[01:51:22] <Maxdamantus> riv: my formula is based on integers. The number of cents should be an integer.
[01:51:38] <edk> floats can't represent arbitrarily large numbers of cents, though
[01:51:46] <Maxdamantus> riv: it's testing whether it could be divided by 100 then represented as a binary float.
[01:51:59] <riv> yeah, it makes sense to me
[01:53:59] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:55:40] <Maxdamantus> Note that it's not a matter of precision, but just the fact that many numbers in decimal are recurring in binary.
[01:56:10] <Maxdamantus> So just as decimal can't represent 1/3 with a finite number of digits, binary can't represent 1/10 with a finite number of bits.
[01:56:14] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:57:01] <edk> binary can't represent 1/3 either, though, and gcd(30, 100) % 2 == 0
[01:59:02] *** Quits: rcf (rcf@iceland.sdf.org) (Ping timeout: 268 seconds)
[02:01:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:01:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:01:14] *** Joins: wroathe (~wroathe@user/wroathe)
[02:01:42] *** Joins: rgrinberg (~textual@200.5.63.76)
[02:02:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:02:55] *** Joins: vmcs (~vmcs@194.135.153.243)
[02:03:22] <edk> you need to check if x/100 = a/b in lowest terms has a power of 2 b, i think?
[02:06:47] <Maxdamantus> Oh yeah, I guess that's not the gcd.
[02:07:07] *** Quits: aesin (~aesin@81.211.127.107) (Remote host closed the connection)
[02:07:21] *** Joins: aesin (~aesin@81.211.127.107)
[02:07:26] *** Quits: vmcs (~vmcs@194.135.153.243) (Ping timeout: 245 seconds)
[02:08:10] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[02:09:09] <Maxdamantus> Have to continuously divide both the numerator and denominator by the gcd. /me doesn't think about these things very often.
[02:11:23] *** Quits: AmR (~AmREiSa@102.47.62.197) (Ping timeout: 268 seconds)
[02:11:44] <Maxdamantus> actually, that still doesn't work, because that just gives you b=10 for 3/10, and 10%2 == 0
[02:12:44] *** Joins: Betal (~Betal@user/betal)
[02:12:51] <edk> i think you just divide by the gcd then check if it's a power of 2 once, which you can probably do with some bitwise trick like x & (x - 1) == 0
[02:13:43] <Maxdamantus> Ah right, yeah, that makes sense.
[02:18:46] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[02:23:59] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[02:26:25] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:30:57] *** Quits: magla (~gelignite@55d49b41.access.ecotel.net) (Quit: Stay safe!)
[02:31:11] *** Joins: rgrinberg (~textual@200.5.63.76)
[02:32:44] *** Quits: Darkcoal (~user@143.92.183.8) (Quit: Darkcoal)
[02:32:46] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 256 seconds)
[02:34:02] *** Joins: pizdets (~pizdets@183.182.110.66)
[02:34:15] *** Quits: pizdets_ (~pizdets@183.182.110.72) (Ping timeout: 250 seconds)
[02:34:26] *** Quits: begriffs (~begriffs@user/begriffs) (Read error: Connection reset by peer)
[02:34:43] *** Joins: begriffs (~begriffs@user/begriffs)
[02:35:27] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[02:36:55] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[02:37:43] *** Joins: lovelace (~Elspeth@2.24.23.175)
[02:38:57] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-241.cspire.com)
[02:39:28] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:40:41] *** Joins: bruda (~bruda@172.58.60.77)
[02:43:11] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:44:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[02:44:49] *** Joins: Atque (~Atque@user/atque)
[02:45:25] *** Joins: nbits (~nbits@user/nbits)
[02:46:34] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[02:47:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:50:22] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[02:51:44] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[02:53:03] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:54:17] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:55:55] *** Quits: chomwitt (~chomwitt@94.69.34.153) (Ping timeout: 250 seconds)
[02:58:46] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:02:02] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Ping timeout: 240 seconds)
[03:02:48] *** Joins: Guest63 (~Guest63@lfbn-mar-1-35-bdcst.w86-229.abo.wanadoo.fr)
[03:03:16] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[03:05:27] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:07:15] *** Quits: Akuli (~Akuli@82-203-162-197.bb.dnainternet.fi) (Quit: Akuli)
[03:07:49] *** Quits: Guest63 (~Guest63@lfbn-mar-1-35-bdcst.w86-229.abo.wanadoo.fr) (Quit: Client closed)
[03:12:52] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[03:14:04] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[03:14:55] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[03:15:55] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[03:16:07] *** Quits: i336 (~i336@101.175.1.240) (Ping timeout: 268 seconds)
[03:16:14] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[03:17:43] *** Joins: i336 (~i336@101.163.233.45)
[03:20:16] *** Joins: jojo (uid529260@id-529260.uxbridge.irccloud.com)
[03:21:03] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:22:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[03:24:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:26:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[03:27:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:28:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[03:30:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:30:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:30:36] *** Joins: wroathe (~wroathe@user/wroathe)
[03:31:09] *** Joins: u0_a391 (~u0_a391@2600:380:4010:9ecd:99d3:265c:7759:660c)
[03:31:57] *** Joins: u0_a3911 (~u0_a391@2600:380:5e1f:bc98:cad4:dee7:ecfe:6ae4)
[03:32:52] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[03:34:37] *** Quits: Kit (~u0_a391@2600:380:4010:9ecd:3510:caf4:c6b2:3a25) (Ping timeout: 268 seconds)
[03:35:24] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:35:40] *** Quits: u0_a391 (~u0_a391@2600:380:4010:9ecd:99d3:265c:7759:660c) (Ping timeout: 260 seconds)
[03:37:34] *** Joins: rcf (rcf@iceland.sdf.org)
[03:41:18] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[03:44:42] *** Joins: cousteau (~cousteau@user/cousteau)
[03:45:26] *** Joins: u0_a3912 (~u0_a391@2600:380:5e1f:89de:e8e7:9163:308a:704a)
[03:45:28] *** Quits: mahmutov_ (~mahmutov@5.176.45.191) (Ping timeout: 260 seconds)
[03:46:16] *** Joins: u0_a3913 (~u0_a391@2603-6010-a141-6fa3-e8e7-9163-308a-704a.res6.spectrum.com)
[03:47:52] *** Joins: u0_a3914 (~u0_a391@2600:380:5e1f:bc98:5a02:221f:c5b0:1695)
[03:48:02] *** Quits: superdupond (~Kev@2a01cb0400149f0088f7e1844cc11bd7.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[03:48:56] *** Joins: u0_a391 (~u0_a391@2600:380:5e1f:bc98:5efe:4f7d:a535:6a76)
[03:48:58] *** Quits: u0_a3911 (~u0_a391@2600:380:5e1f:bc98:cad4:dee7:ecfe:6ae4) (Ping timeout: 260 seconds)
[03:49:54] *** Quits: u0_a3912 (~u0_a391@2600:380:5e1f:89de:e8e7:9163:308a:704a) (Ping timeout: 260 seconds)
[03:51:46] *** Quits: u0_a3913 (~u0_a391@2603-6010-a141-6fa3-e8e7-9163-308a-704a.res6.spectrum.com) (Ping timeout: 260 seconds)
[03:52:42] *** Quits: u0_a3914 (~u0_a391@2600:380:5e1f:bc98:5a02:221f:c5b0:1695) (Ping timeout: 260 seconds)
[03:53:51] *** Joins: monkey_ (~user@190.104.116.153)
[03:56:23] *** Joins: u0_a3911 (~u0_a391@2603-6010-a141-6fa3-e8e7-9163-308a-704a.res6.spectrum.com)
[03:56:24] *** Joins: reticuli (~reticuli@user/reticuli)
[03:59:14] *** Quits: u0_a391 (~u0_a391@2600:380:5e1f:bc98:5efe:4f7d:a535:6a76) (Ping timeout: 260 seconds)
[04:01:15] *** Joins: chenqisu1 (~03cia7d@183.217.200.156)
[04:01:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:03:00] *** Joins: Wulf (~Wulf@user/wulf)
[04:10:18] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[04:12:46] *** Joins: quartz (~quartz@user/quartz)
[04:15:49] *** Quits: bch_x (~bch@S01069050ca2cbf63.ok.shawcable.net) (Remote host closed the connection)
[04:15:57] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[04:16:09] *** Joins: bch_x (~bch@S01069050ca2cbf63.ok.shawcable.net)
[04:18:59] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[04:22:03] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[04:22:49] *** Quits: phax (~phax@user/phax) (Remote host closed the connection)
[04:27:45] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[04:33:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:36:39] *** Joins: ferdna (~ferdna@user/ferdna)
[04:37:52] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:38:40] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[04:39:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:39:38] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:40:05] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[04:43:13] *** Joins: rgrinberg (~textual@200.5.63.76)
[04:45:59] *** Quits: alch (~alch@151.68.48.4) (Ping timeout: 250 seconds)
[04:47:29] *** Quits: nbits (~nbits@user/nbits) (Remote host closed the connection)
[04:47:32] *** Quits: Libero (~Libero@77.49.77.131.dsl.dyn.forthnet.gr) (Quit: Leaving)
[04:47:50] *** Joins: alch (~alch@151.68.77.170)
[04:48:47] *** Joins: vmcs (~vmcs@194.135.153.243)
[04:51:11] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.3)
[04:53:16] *** Quits: vmcs (~vmcs@194.135.153.243) (Ping timeout: 245 seconds)
[04:54:08] *** Joins: arinov (~arinov@213.194.126.155)
[05:00:56] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:01:13] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[05:01:33] *** Quits: bruda (~bruda@172.58.60.77) (Quit: another productive day. Yay cold winters.)
[05:04:38] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 256 seconds)
[05:05:16] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[05:06:00] *** Quits: i336 (~i336@101.163.233.45) (Quit: leaving)
[05:06:27] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:06:55] <floatcomplex> BtbN: and if you must, don't bring a banana aboard
[05:09:02] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[05:12:13] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[05:14:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[05:14:33] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:16:42] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[05:17:03] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:a978:3601:cbb2:ebf5)
[05:17:03] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:a978:3601:cbb2:ebf5) (Changing host)
[05:17:03] *** Joins: skapate (~Skapata@user/skapata)
[05:17:32] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[05:18:23] *** fluter- is now known as fluter
[05:22:57] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[05:25:41] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[05:27:40] *** Quits: reticuli (~reticuli@user/reticuli) (Ping timeout: 260 seconds)
[05:30:29] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:30:44] *** Joins: nicholaus04 (~nicholaus@172.58.22.198)
[05:38:51] *** Quits: kerala (~liberapoo@117.199.4.32) (Ping timeout: 260 seconds)
[05:39:57] *** Joins: kerala (~liberapoo@117.199.3.168)
[05:40:37] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[05:41:19] *** Quits: kerala (~liberapoo@117.199.3.168) (Read error: Connection reset by peer)
[05:41:24] *** Joins: midhun_ (~liberapoo@117.199.3.168)
[05:41:49] <superstar64> so `qsort` doesn't have to quick sort right? are there any c libraries that implement algorithms other then quicksort?
[05:43:07] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[05:43:42] <pnbeast> Yes.
[05:44:12] <superstar64> can you name any?
[05:46:32] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Ping timeout: 240 seconds)
[05:47:10] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[05:47:50] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 268 seconds)
[05:48:06] <pnbeast> superstar64, I can suggest "libc qsort implementation", handed to a search engine, will turn up results that might interest you.
[05:48:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[05:48:27] *** u0_a3911 is now known as Kit-ten
[05:48:32] <Kit-ten> bogo sort
[05:49:26] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 265 seconds)
[05:51:54] <HisShadow_> uclibc-ng seems to do shell sort...ugh
[05:52:11] *** Quits: midhun_ (~liberapoo@117.199.3.168) (Ping timeout: 256 seconds)
[05:54:18] *** Joins: kerala (~liberapoo@117.199.5.249)
[05:54:47] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[05:54:53] *** Quits: cousteau (~cousteau@user/cousteau) (Ping timeout: 250 seconds)
[05:55:02] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[05:55:50] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:56:03] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:56:27] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:00:27] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[06:00:58] <cehteh> shellsort isnt that bad, not the fastest but iirc it can be simply implemented in place and has no odd behavior against some corner case datasets
[06:01:33] *** Joins: cousteau (~cousteau@user/cousteau)
[06:02:52] *** Quits: cousteau (~cousteau@user/cousteau) (Client Quit)
[06:05:13] *** Quits: kerala (~liberapoo@117.199.5.249) (Ping timeout: 256 seconds)
[06:05:23] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:05:32] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:06:42] *** Joins: kerala (~liberapoo@117.199.5.29)
[06:10:48] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[06:21:08] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 256 seconds)
[06:25:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:28:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:29:22] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[06:34:02] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:52:16] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:36] *** Joins: reticuli (~reticuli@user/reticuli)
[06:54:09] *** Quits: reticuli (~reticuli@user/reticuli) (Client Quit)
[07:01:27] *** Quits: samir (~azureuser@20.97.234.198) (Ping timeout: 265 seconds)
[07:05:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:07:47] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:08:01] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[07:14:24] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[07:15:43] *** Joins: gargus (~user@114.198.29.250)
[07:22:39] *** Joins: rgrinberg (~textual@200.5.63.76)
[07:27:05] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Remote host closed the connection)
[07:28:01] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[07:28:20] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[07:29:41] *** Joins: llh (~llh@user/llh)
[07:29:56] *** Quits: rahl (~rahl@102.114.182.116) (Ping timeout: 245 seconds)
[07:32:08] *** Joins: rahl (~rahl@102.114.191.128)
[07:33:33] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Remote host closed the connection)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:56] *** Joins: samir (~azureuser@user/samir)
[07:42:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[07:44:25] *** Quits: ckdCreations (~ckdCreati@147.55.133.138) (Read error: Connection reset by peer)
[07:44:59] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[07:46:24] *** Joins: simon323 (~simon323@2409:8a34:467:2730:4c9f:507a:8efc:4a7)
[07:46:31] *** Joins: Enitin (~Enitin@82.102.22.84)
[07:49:26] *** Joins: ckdCreations (~ckdCreati@147.55.130.36)
[07:50:14] *** ^tinyweasel^ is now known as tinyweasel
[07:50:37] *** tinyweasel is now known as ^tinyweasel^
[07:57:47] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Read error: Connection reset by peer)
[08:16:11] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:16:38] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[08:16:54] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:17:51] *** Quits: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net) (Quit: Leaving)
[08:23:54] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:28:46] *** Joins: HiddenHyde (~HiddenHyd@user/hidden-hyde/x-6930285)
[08:30:10] *** justBOOMER is now known as justache
[08:43:22] *** Quits: alch (~alch@151.68.77.170) (Read error: Connection reset by peer)
[08:45:59] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[08:46:57] *** Quits: HiddenHyde (~HiddenHyd@user/hidden-hyde/x-6930285) (Quit: Leaving)
[08:47:10] *** Joins: alch (~alch@151.34.85.240)
[08:58:15] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:58:39] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[09:02:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:02:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:03:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[09:03:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:05:19] *** Quits: rainmanjam (~rainmanja@216.161.85.62) (Remote host closed the connection)
[09:05:30] *** Joins: reumeth (~reumeth@user/reumeth)
[09:05:51] *** Joins: rainmanjam (~rainmanja@216.161.85.62)
[09:07:07] *** Joins: pulse (~pulse@user/pulse)
[09:07:37] *** Joins: vmcs (~vmcs@194.135.153.243)
[09:12:16] *** Quits: vmcs (~vmcs@194.135.153.243) (Ping timeout: 256 seconds)
[09:12:33] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 268 seconds)
[09:12:40] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:14:45] *** Quits: rainmanjam (~rainmanja@216.161.85.62) (Remote host closed the connection)
[09:15:17] *** Joins: rainmanjam (~rainmanja@216.161.85.62)
[09:15:24] *** Joins: nahcetan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[09:15:28] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[09:15:44] *** Quits: rainmanjam (~rainmanja@216.161.85.62) (Remote host closed the connection)
[09:16:15] *** Joins: rainmanjam (~rainmanja@216.161.85.62)
[09:17:04] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:17:50] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[09:23:30] *** Quits: rainmanjam (~rainmanja@216.161.85.62) (Remote host closed the connection)
[09:24:01] *** Joins: rainmanjam (~rainmanja@216.161.85.62)
[09:31:31] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:31:52] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:40:22] *** Quits: kurahaupo (~kurahaupo@pa49-195-32-17.pa.nsw.optusnet.com.au) (Ping timeout: 260 seconds)
[09:43:01] <floatcomplex> do they give a rationale for using that instead of quicksort
[09:45:20] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:683d:c166:e848:5a1f) (Quit: ZNC 1.8.2 - https://znc.in)
[09:45:33] *** Joins: Albright (~Albright@149.28.13.173)
[09:46:15] *** Joins: vmcs (~vmcs@194.135.153.243)
[09:49:51] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[09:50:11] *** Joins: nostart (~nostar@45.14.195.105)
[09:52:47] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 250 seconds)
[09:53:08] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: Lost terminal)
[09:55:06] *** Quits: vmcs (~vmcs@194.135.153.243) (Ping timeout: 268 seconds)
[09:56:04] *** Quits: nostart (~nostar@45.14.195.105) (Quit: Leaving)
[09:56:52] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[09:57:33] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[10:01:08] *** Quits: chenqisu1 (~03cia7d@183.217.200.156) (Ping timeout: 260 seconds)
[10:01:10] *** Joins: vmcs (~vmcs@194.135.153.243)
[10:01:27] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:04:01] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[10:08:08] *** Joins: llh (~llh@user/llh)
[10:11:12] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[10:14:19] *** Joins: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[10:15:47] *** Joins: chenqisu1 (~03cia7d@183.217.200.156)
[10:16:46] *** Quits: neocron (~NeoCron@p200300c4cf3f7e00320b69bf1a44e74d.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:19:17] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:19:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 265 seconds)
[10:21:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:26:47] *** Joins: nostar (~nostar@45.14.195.105)
[10:27:48] *** Quits: trisk (~trisk@2601:196:4700:1fa5:8:20ff:fe3e:890e) (Ping timeout: 268 seconds)
[10:30:37] *** Quits: vmcs (~vmcs@194.135.153.243) (Read error: Connection reset by peer)
[10:31:23] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[10:32:02] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:35:30] *** Joins: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com)
[10:36:49] *** Quits: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[10:37:18] *** Joins: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com)
[10:37:24] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:39:42] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[10:44:44] *** Quits: simon323 (~simon323@2409:8a34:467:2730:4c9f:507a:8efc:4a7) (Quit: simon323)
[10:45:58] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:46:24] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[10:50:19] *** Joins: Atque (~Atque@user/atque)
[10:51:25] *** Quits: Atque (~Atque@user/atque) (Client Quit)
[10:51:28] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[10:53:41] *** Quits: MrFantastik (~f@cpe-69-204-101-67.buffalo.res.rr.com) (Quit: Leaving)
[10:55:04] *** Joins: chenbin (~user@183.208.58.148)
[10:57:08] *** Quits: rahl (~rahl@102.114.191.128) (Ping timeout: 260 seconds)
[10:57:38] *** Quits: chenbin (~user@183.208.58.148) (Remote host closed the connection)
[10:58:38] *** Joins: rahl (~rahl@102.114.20.36)
[10:59:02] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.243) (Ping timeout: 240 seconds)
[11:00:05] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[11:00:48] *** Joins: chenbin (~user@183.208.58.148)
[11:01:01] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[11:04:33] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[11:10:04] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[11:25:41] *** Quits: mongrel (uid508343@id-508343.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[11:25:52] *** Parts: chenbin (~user@183.208.58.148) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[11:31:20] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:31:56] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[11:32:01] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:34:31] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[11:35:55] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:37:51] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[11:40:18] *** Joins: mahmutov_ (~mahmutov@5.176.45.191)
[11:47:18] *** Joins: Libero (~Libero@77.49.77.131.dsl.dyn.forthnet.gr)
[11:47:42] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[11:48:10] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[11:49:14] *** Joins: cool2077 (~cool333@bzq-79-176-139-177.red.bezeqint.net)
[11:50:19] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[11:52:38] *** Quits: cool6502 (~cool333@bzq-79-176-139-177.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:53:16] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[11:54:02] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 240 seconds)
[11:54:26] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[11:55:07] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:55:08] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[11:57:44] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[12:02:53] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[12:03:00] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:04:05] *** Quits: chenqisu1 (~03cia7d@183.217.200.156) (Ping timeout: 250 seconds)
[12:04:21] *** Joins: jsmolic (~quassel@gentoo/developer/jsmolic)
[12:04:30] *** Joins: jetchisel (jetchisel@user/jetchisel)
[12:05:40] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[12:06:13] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[12:07:20] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[12:08:12] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[12:12:33] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[12:14:15] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[12:14:44] *** Joins: Atque (~Atque@user/atque)
[12:16:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[12:17:17] *** Red_ is now known as Red
[12:22:45] *** Joins: Pentode (~Pentode@mobile-166-171-57-43.mycingular.net)
[12:24:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:25:20] *** Joins: mrig (~AdiIRC@user/mrig)
[12:28:30] *** Quits: mahmutov_ (~mahmutov@5.176.45.191) (Quit: WeeChat 3.1)
[12:29:42] *** Joins: mahmutov (~mahmutov@5.176.45.191)
[12:30:06] *** Quits: kaji (~kajiryoji@2001:470:69fc:105::405b) (Quit: You have been kicked for being idle)
[12:33:41] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[12:33:41] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (Read error: Connection reset by peer)
[12:33:50] *** Joins: Triskelios (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[12:33:55] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[12:34:33] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:35:14] *** Joins: vcx (~a@130.204.19.191)
[12:35:28] *** Quits: Triskelios (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Remote host closed the connection)
[12:36:07] *** Joins: arminweigl (~arminweig@sourcehut/user/arminweigl)
[12:36:58] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[12:37:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:40:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[12:42:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[12:43:16] *** Quits: alch (~alch@151.34.85.240) (Read error: Connection reset by peer)
[12:44:56] *** Quits: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Ping timeout: 265 seconds)
[12:46:36] *** Joins: kdc (~kdc@196.211.197.159)
[12:47:32] *** Joins: alch (~alch@151.68.41.167)
[12:49:09] *** Quits: kerala (~liberapoo@117.199.5.29) (Ping timeout: 250 seconds)
[12:49:19] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[12:49:36] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[12:49:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:51:23] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Remote host closed the connection)
[12:52:58] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[12:55:09] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[12:59:24] *** Quits: vcx (~a@130.204.19.191) (Quit: Leaving)
[13:00:07] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[13:00:46] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[13:01:13] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[13:01:16] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[13:04:34] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[13:08:06] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[13:09:12] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[13:11:12] *** Joins: bindu (~bindu@user/bindu)
[13:12:00] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 265 seconds)
[13:12:46] *** Joins: aradesh (~aradesh@user/aradesh)
[13:16:20] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[13:17:50] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[13:18:34] *** Joins: pulse (~pulse@user/pulse)
[13:23:23] *** Quits: Libero (~Libero@77.49.77.131.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[13:23:46] *** Joins: Libero (~Libero@77.49.77.131.dsl.dyn.forthnet.gr)
[13:26:20] *** mendel_munkis is now known as munkis
[13:30:20] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:30:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:31:28] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:31:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Remote host closed the connection)
[13:32:24] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[13:34:01] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[13:35:22] *** Joins: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[13:36:20] *** Joins: Viewday112 (~Viewday@user/viewday)
[13:36:24] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: sdfgsdfg)
[13:37:40] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:37:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:37:47] *** Viewday112 is now known as Viewday11
[13:39:32] *** Quits: rahl (~rahl@102.114.20.36) (Ping timeout: 240 seconds)
[13:40:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:41:28] *** Joins: earnest (~earnest@user/earnestly)
[13:42:10] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[13:43:18] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:43:37] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[13:45:06] *** Joins: jailop_ (~jailop@ool-944bb915.dyn.optonline.net)
[13:45:43] *** Joins: lleo (~leo@188-206-64-151.mobile.kpn.net)
[13:46:20] *** Joins: aliosablack (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374)
[13:46:20] *** Quits: chomwitt (~chomwitt@2a02:587:dc16:f200:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[13:46:49] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[13:48:13] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[13:48:30] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[13:49:02] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:49:23] *** Joins: meator (~meator@user/meator)
[13:51:38] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[13:56:02] *** Quits: reset (~reset@user/reset) (Quit: reset)
[14:03:17] *** Quits: lleo (~leo@188-206-64-151.mobile.kpn.net) (Quit: Leaving)
[14:04:10] *** Joins: Guest77 (~Guest77@102.79-160-184.customer.lyse.net)
[14:04:40] *** Guest77 is now known as Jamy2
[14:05:10] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[14:05:32] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:08:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:08:25] *** Joins: Enitin (~Enitin@82.102.22.86)
[14:10:29] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[14:10:31] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[14:10:50] *** Joins: plastico (~plastico@neomutt/plastico)
[14:11:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:18:02] *** Joins: AmR (~AmREiSa@102.47.62.197)
[14:18:27] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:19:33] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[14:22:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[14:23:10] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:25:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[14:26:43] <Jamy2> Hi! I'm starting out with C#, and have gotten stuck with something that I just can't figure out. I have a class method, IsDone(), that's passed as a reference into a list a list of "callbacks" that's periodically called. The problem is that the method always just returns the initial value of _isDone, it doesn't pick up that it has been changed. Any
[14:26:43] <Jamy2> idea what's causing it? https://pastebin.com/yLe6Qc8Z
[14:27:31] <Nearrexa> Jamy2: This is not a C# channel. Try #csharp
[14:27:43] <Jamy2> ah, sorry. Thanks. :)
[14:27:51] <Nearrexa> It's fine.
[14:29:31] *** Joins: arinov (~arinov@213.194.126.155)
[14:30:48] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:31:37] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[14:31:57] *** Joins: slidercrank (~slidercra@user/slidercrank)
[14:32:50] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:32:52] *** Quits: arinov (~arinov@213.194.126.155) (Client Quit)
[14:33:02] *** Joins: arinov (~arinov@213.194.126.155)
[14:33:10] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[14:33:35] *** Joins: csrf (~csrf@user/csrf)
[14:33:36] *** Joins: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa)
[14:33:40] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-241.cspire.com) (Read error: Connection reset by peer)
[14:34:29] *** Joins: noord (~noord@user/noord)
[14:35:54] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[14:43:04] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:45:34] <rcf> Many people assume IRC channels are just backwards it seems 
[14:46:29] <rcf> Though now I want to fork C# into #C fir maximum confusion 
[14:49:34] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-241.cspire.com)
[14:53:13] *** Quits: maxxe (~maxxe@user/maxxe) (Quit: off. bbl.)
[14:56:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[14:56:24] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[14:56:56] <VincentValentine> is this a channel for discussion c, c# and #c
[14:57:04] *** Quits: Jamy2 (~Guest77@102.79-160-184.customer.lyse.net) (Quit: Client closed)
[14:59:13] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Remote host closed the connection)
[14:59:42] <riv> https://multun.net/obscure-c-features.html
[15:01:12] <floatcomplex> riv: wtf "return assert"
[15:01:12] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[15:04:17] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[15:05:32] *** Quits: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[15:05:50] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:07:35] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (Ping timeout: 264 seconds)
[15:10:50] *** Quits: Phil-Work (~phil@62.3.100.20) (Ping timeout: 268 seconds)
[15:17:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:20:36] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[15:21:58] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:22:15] *** Quits: mahmutov (~mahmutov@5.176.45.191) (Ping timeout: 256 seconds)
[15:22:34] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[15:25:01] *** Quits: Nearrexa (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[15:25:19] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[15:26:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[15:28:09] *** Joins: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e)
[15:28:47] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[15:31:28] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[15:33:01] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 256 seconds)
[15:33:08] *** Quits: jailop_ (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 265 seconds)
[15:34:15] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:35:10] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:00] *** Joins: vmcs (~vmcs@194.135.154.78)
[15:38:27] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[15:41:09] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[15:41:16] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:42:39] *** Quits: vmcs (~vmcs@194.135.154.78) (Ping timeout: 256 seconds)
[15:43:40] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:46:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 265 seconds)
[15:49:11] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[15:49:36] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[15:53:02] *** Joins: Guest49 (~Guest49@2a02:2455:5a0:da00:dac4:97ff:fedd:37ee)
[15:53:19] *** Quits: Guest49 (~Guest49@2a02:2455:5a0:da00:dac4:97ff:fedd:37ee) (Client Quit)
[15:55:41] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[15:59:26] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:02:33] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[16:03:25] *** Joins: kerala (~liberapoo@117.199.5.29)
[16:05:13] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[16:10:14] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[16:10:40] *** Quits: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e) (Ping timeout: 268 seconds)
[16:14:06] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[16:16:39] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[16:20:15] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:21:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[16:23:37] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:25:29] *** Joins: Rounin (~david@84.212.130.215)
[16:25:46] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 245 seconds)
[16:30:44] *** Joins: simon323 (~simon323@2409:8a34:467:2730:d569:7251:6fe0:7108)
[16:32:45] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 265 seconds)
[16:33:01] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[16:34:20] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[16:38:01] *** Joins: Burgundy (~yomon@79.115.213.171)
[16:38:45] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 256 seconds)
[16:39:06] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[16:40:11] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[16:42:43] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[16:42:47] *** Quits: alch (~alch@151.68.41.167) (Read error: Connection reset by peer)
[16:42:49] *** Joins: midhun_ (~liberapoo@59.92.160.151)
[16:44:46] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[16:45:33] *** Quits: kerala (~liberapoo@117.199.5.29) (Ping timeout: 256 seconds)
[16:46:27] *** Joins: Satin (uid193953@id-193953.ilkley.irccloud.com)
[16:47:18] *** Joins: Jama2 (~Jama2@102.79-160-184.customer.lyse.net)
[16:47:54] *** Joins: alch (~alch@151.34.94.92)
[16:47:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:48:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:48:23] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[16:48:27] *** Quits: Jama2 (~Jama2@102.79-160-184.customer.lyse.net) (Client Quit)
[16:48:29] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[16:48:57] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[16:49:12] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[16:49:38] *** Joins: CoderCharmander (~CoderChar@20014C4C1256300085DECD4F21A717FC.catv.pool.telekom.hu)
[16:50:11] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[16:50:32] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[16:51:32] *** Joins: Guest77 (~Guest77@102.79-160-184.customer.lyse.net)
[16:51:54] *** Guest77 is now known as Jamy2
[16:52:43] *** Joins: superdupond (~Kev@2a01cb0400149f001ce1d826eeffaa92.ipv6.abo.wanadoo.fr)
[16:54:27] *** Quits: useretail_ (~useretail@185.132.19.151) (Read error: Connection reset by peer)
[16:54:32] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:54:34] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[16:55:41] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 268 seconds)
[17:04:32] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[17:04:40] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[17:04:53] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[17:07:01] *** Quits: geeknix (~pi@2001:e68:5432:a8eb:1412:d7e8:3be:6abd) (Ping timeout: 245 seconds)
[17:08:13] *** Joins: scarce (~scarce@2a05:f480:2000:1325::)
[17:08:14] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[17:08:47] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[17:14:38] *** Joins: shivesh (~shivesh@user/shivesh)
[17:18:20] *** Joins: chenqisu1 (~03cia7d@183.217.200.156)
[17:19:40] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[17:20:26] *** Joins: geeknix (~pi@2001:e68:5432:abd2:b9e4:e37d:3d09:4004)
[17:21:24] *** Joins: arinov (~arinov@213.194.126.155)
[17:23:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:24:22] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[17:26:21] *** Quits: chenqisu1 (~03cia7d@183.217.200.156) (Ping timeout: 256 seconds)
[17:26:34] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 260 seconds)
[17:27:57] *** Joins: chenqisu1 (~03cia7d@183.217.200.156)
[17:28:03] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[17:28:17] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:29:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:30:16] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[17:31:17] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:31:18] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[17:32:23] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[17:33:10] *** Quits: chenqisu1 (~03cia7d@183.217.200.156) (Ping timeout: 265 seconds)
[17:34:47] *** Quits: gargus (~user@114.198.29.250) (Quit: Leaving)
[17:37:11] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Remote host closed the connection)
[17:38:03] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[17:38:13] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 268 seconds)
[17:38:41] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[17:38:50] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[17:39:30] *** Joins: luizfrds (~Luiz@152.250.243.147)
[17:39:31] *** Joins: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d)
[17:39:33] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:40:00] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:41:29] *** Joins: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa)
[17:45:27] *** Joins: DutchIngraham (~DutchIngr@user/dutch)
[17:45:33] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com) (Remote host closed the connection)
[17:46:30] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[17:46:36] *** Quits: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d) (Ping timeout: 245 seconds)
[17:48:35] *** Joins: meator (~meator@user/meator)
[17:48:39] *** Joins: akahs (~Shaka@user/shaka)
[17:49:23] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[17:49:35] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[17:50:00] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[17:50:18] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[17:51:40] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[17:51:47] *** Quits: Nearrexa_ (~nearrexa@gateway/tor-sasl/nearrexa) (Quit: Nearrexa_)
[17:51:51] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[17:52:17] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:31] *** Joins: nyah (~nyah@94.6.71.219)
[17:52:49] *** Joins: Enitin (~Enitin@82.102.22.85)
[17:53:05] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:53:39] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:54:24] *** Joins: roman_ (~roman@mob-194-230-147-119.cgn.sunrise.net)
[17:54:25] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:54:42] <nomagno> VicentValentine: Only for discurrion of C
[17:56:02] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[17:56:35] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:56:53] *** Joins: jailop_ (~jailop@ool-944bb915.dyn.optonline.net)
[17:57:20] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[17:59:02] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:59:55] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[18:01:51] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[18:03:27] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[18:03:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[18:04:36] *** Joins: mahmutov (~mahmutov@5.176.45.191)
[18:08:11] *** Joins: arminweigl_ (~arminweig@sourcehut/user/arminweigl)
[18:09:03] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[18:09:12] *** Joins: Dreg- (~Dreg@fr33project.org)
[18:09:25] *** Quits: arminweigl (~arminweig@sourcehut/user/arminweigl) (Ping timeout: 256 seconds)
[18:09:25] *** arminweigl_ is now known as arminweigl
[18:12:57] *** Joins: cousteau (~cousteau@user/cousteau)
[18:13:54] *** Joins: Klinda (~superleag@user/klinda)
[18:15:23] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[18:17:01] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Ping timeout: 245 seconds)
[18:18:54] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.78)
[18:19:03] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Ping timeout: 256 seconds)
[18:19:22] <dacav> riv: righ... saw that.  Every now and then there's a post like that.  But yeah, return assert made my day
[18:19:22] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: see ya l8tr (i.a.))
[18:28:54] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.78) (Read error: Connection reset by peer)
[18:29:02] *** Joins: the_lanetly_052 (~the_lanet@194.135.154.78)
[18:35:46] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[18:35:50] *** Quits: mahmutov (~mahmutov@5.176.45.191) (Ping timeout: 265 seconds)
[18:36:02] *** Joins: mahmutov (~mahmutov@37.155.33.70)
[18:36:49] *** cvmn is now known as caveman
[18:43:07] *** Joins: Hercules (~Hercules@user/hercules)
[18:43:21] *** Joins: ayko-chan (~ayko-chan@178.132.170.105)
[18:46:36] <floatcomplex> teaching people about duff's device in tones other than "people also used to think bloodletting was useful" is the bigger issue
[18:46:46] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[18:47:46] *** Joins: fmsd (~no@41.141.50.222)
[18:47:57] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[18:48:20] *** Quits: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net) (Client Quit)
[18:48:35] *** Joins: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e)
[18:50:10] <cousteau> floatcomplex: I just googled that and I hate it.
[18:50:29] <cousteau> duff's device, not bloodletting
[18:53:32] *** Joins: ThatLinuxGuy (~Srain@1.146.130.72)
[18:54:03] <cousteau> anyway, wouldn't modern compilers optimize loops directly without having to do that horrible thing?  I can see how that horrible thing would be beneficial if compilers didn't optimize that, but I would imagine, or rather, hope, that they are smart enough to unroll loops as needed
[18:54:22] <cousteau> (and I suppose that back in the day they didn't)
[18:55:06] <dacav> meh, these articles are often noobish at most.  It's like a random javascript developer woke up this morning, learned some C, and decided to pose as badass expert
[18:55:19] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 268 seconds)
[18:55:34] <dacav> follows up $I_just_learned_rust_and_think_everything_else_should_be_rewritten and says "oh lol, such a stupid language"
[18:55:47] <ThatLinuxGuy> Or someone who read some old book and thought they foulnd some lost technique
[18:55:55] <dacav> Or that, lol
[18:57:02] <dacav> That's by the way the reason why I stopped doing technical blog entries: it's all about posing these days
[18:57:04] *** Joins: rahl (~rahl@102.114.121.175)
[18:57:14] <dacav> I don't want to be part of that
[18:57:47] <fmsd> are you guys talking about those pseudo security "experts"
[18:58:02] <dacav> fmsd: yesssss?
[18:58:35] <fmsd> cool
[18:59:23] <dacav> those who end up with a 5TB executable full of random libraries from github, I mean
[18:59:48] <noord> why are js devs everywhere, it is like a plague
[18:59:56] *** Quits: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e) (Ping timeout: 245 seconds)
[19:00:04] <fmsd> "random libraries from github" you just described every nodejs program
[19:00:53] *** Joins: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e)
[19:00:57] <cousteau> apparently people just realized that security is important after a******s worldwide started doing evil (it seems that years of "hey this is potentially dangerous" wasn't enough and they needed real life examples)
[19:01:00] <cousteau> so now there's interest
[19:01:06] <cousteau> and interest creates "experts"
[19:01:14] <dacav> I was more thinking about those who end up with a blob that can't be fixed by system upgrades
[19:01:19] <dacav> but yeah, that fits too
[19:03:17] *** Quits: fmsd (~no@41.141.50.222) (Remote host closed the connection)
[19:03:38] *** Joins: fmsd (~no@41.141.50.222)
[19:06:39] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:06:39] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:06:39] *** Joins: wroathe (~wroathe@user/wroathe)
[19:07:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:21b5:6102:9e2a:a3f9)
[19:07:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:21b5:6102:9e2a:a3f9) (Changing host)
[19:07:13] *** Joins: skapata (~Skapata@user/skapata)
[19:08:55] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[19:11:22] <floatcomplex> cousteau: they do
[19:11:27] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[19:11:31] *** Quits: simon323 (~simon323@2409:8a34:467:2730:d569:7251:6fe0:7108) (Quit: simon323)
[19:11:50] <cousteau> good
[19:11:56] <floatcomplex> (optimize loops in the absence of duff's, that is)
[19:12:17] <cousteau> (yeah figured this wasn't about the security experts)
[19:12:40] <cousteau> although that probably requires the dev to be aware of the implications, use restrict when needed, etc
[19:14:06] *** Joins: rgrinberg (~textual@201.191.195.226)
[19:17:04] *** Quits: rgrinberg (~textual@201.191.195.226) (Read error: Connection reset by peer)
[19:18:44] *** Quits: trisk (~trisk@2601:196:4700:106e:8:20ff:fe3e:890e) (Ping timeout: 268 seconds)
[19:19:01] *** Joins: p0g0 (~p0g0@64.45.183.0)
[19:20:11] <riv> can libgmp convert a float to an exact number?
[19:20:44] <cousteau> I don't know what libgmp does but that doesn't sound possible to me...
[19:20:54] *** Joins: trisk (~trisk@c-73-253-10-38.hsd1.ma.comcast.net)
[19:21:10] *** Quits: ThatLinuxGuy (~Srain@1.146.130.72) (Read error: Connection reset by peer)
[19:21:14] <cousteau> (unless you mean "if the float representation is already exact")
[19:21:37] <riv> floats are all rational numbers I think
[19:21:41] <riv> except for NaN
[19:21:55] *** Joins: monkey_ (~user@190.104.116.153)
[19:21:57] <cousteau> kinda, but not all rational numbers are floats
[19:22:12] *** Quits: jailop_ (~jailop@ool-944bb915.dyn.optonline.net) (Quit: leaving)
[19:22:16] <cousteau> floats are rational numbers whose denominator is a power of 2
[19:22:27] <cousteau> 2/3 or 0.1 aren't exact floats
[19:22:58] <riv> true
[19:23:19] <riv> although I think not every rational which has denominator a power of 2 is a float either
[19:23:33] <riv> like when you get larger.. there's less accuracy after the .
[19:23:47] <cousteau> exactly (no pun intended)
[19:24:05] <cousteau> and going back from an approximate float reprsentation to an exact fraction representation isn't possible, unless you know some limits about the denominator
[19:26:26] <cousteau> For example, say you have the number 0.333333 (in a system with decimal floats rather than binary).  Is that 1/3, or 333333/1000000?
[19:26:43] <riv> 333333/1000000
[19:27:21] <cousteau> I mean, technically yes, but 1.0/3.0 is also going to give you 0.333333 in that system, and is a more likely fraction
[19:27:51] <cousteau> (assuming this system only stores 6 sig figs)
[19:28:57] <cousteau> also you mentioned "exact numbers" in general, not just fractions, so I don't know if you meant fractions or any computable number such as π or sqrt(2)
[19:29:56] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[19:31:36] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 245 seconds)
[19:33:28] *** Joins: elkalamar (~elkalamar@81.203.68.150.dyn.user.ono.com)
[19:36:43] *** Joins: ThatLinuxGuy (~Srain@1.146.144.213)
[19:37:29] *** Joins: elkalamar_ (~elkalamar@81.203.68.150.dyn.user.ono.com)
[19:39:09] *** Joins: Sadale (~Sadale@user/sadale)
[19:39:34] *** Quits: elkalamar (~elkalamar@81.203.68.150.dyn.user.ono.com) (Ping timeout: 256 seconds)
[19:39:36] *** Joins: th1 (~th@test.secomondo.dk)
[19:40:32] <cousteau> so... my point is that there's no way to exactly represent a number that has been converted to float, because that conversion will have caused loss of information
[19:41:12] <riv> it's starting out as a float in my case
[19:42:10] <cousteau> and, getting pedantic, floats are not exact real numbers, but ranges of real numbers.  For example, 0.333333 represents the range 0.3333325 .. 0.3333335, since any real number in that range would have been converted to "0.333333" in the system I described.
[19:42:23] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:42:32] <riv> I think a float represents an exact rational number
[19:42:45] <cousteau> Other than that, I guess you can convert a float to a GMP exact number (and assume the loss of precision)
[19:43:11] <riv> the inverse image of conversion from a real number to a float would be an interval
[19:43:14] <cousteau> just like how you can convert a float to a double, and it'll just make up the precision
[19:43:29] <riv> I couldn't find a GMP function that does this
[19:43:34] <cousteau> weird
[19:43:47] <riv> but i neve really used gmp so I could just have overlooked it
[19:43:47] *** Quits: ayko-chan (~ayko-chan@178.132.170.105) (Remote host closed the connection)
[19:44:27] *** Joins: Viewday11 (~Viewday@user/viewday)
[19:44:42] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[19:44:42] *** Quits: ckdCreations (~ckdCreati@147.55.130.36) (Read error: Connection reset by peer)
[19:46:08] *** Quits: magla (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[19:46:38] *** Joins: magla (~gelignite@55d4f645.access.ecotel.net)
[19:48:35] *** Quits: elkalamar_ (~elkalamar@81.203.68.150.dyn.user.ono.com) (Ping timeout: 256 seconds)
[19:48:37] <cousteau> riv: what's an "exact number" btw?  I see mpz_t (arbitrary precision integer), mpq_t (rational), and mpf_t (floating point with a fixed precision exponent)
[19:50:02] *** Joins: ckdCreations (~ckdCreati@147.55.133.131)
[19:50:09] <cousteau> I suppose converting a float/double to mpf_t is trivial; furthermore, there's probably a "subtype" of mpf_t that has identical precision to a float
[19:50:17] <riv> I think i would need ptq_t in this case
[19:50:23] <riv> mpq_t *
[19:50:42] <riv> because i want it as a ratio of integers
[19:51:06] <fizzie> It can be pretty big. Since you don't get to encode the exponent... in an exponential way.
[19:51:23] <cousteau> as for converting from float to mpq_t, there might be no function for that due to the idea that a float conceptually represents a range of real numbers rather than a single one (unlike integers, which are supposed to represent exact values, not the +/-0.5 range surrounding the integer)
[19:51:32] <fizzie> I mean, for an IEEE double it's still not more than ~1000 bits. But still.
[19:51:56] <cousteau> fizzie: I mean, you *could*
[19:52:11] <riv> oh thats true O_O
[19:52:15] <riv> never thought of that
[19:52:56] <fizzie> And "floats represents ranges" is just one way of looking at it, not any sort of fundamental truth. The floating-point model of the standard defines a specific value each float represents.
[19:53:01] *** Joins: rgrinberg (~textual@201.191.195.226)
[19:53:41] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 245 seconds)
[19:53:51] <cousteau> well yeah, when I said that floats can be seen as representing a range I meant they *could* be seen that way, but that might not be the only way to see it, as fizzie said
[19:53:51] <floatcomplex> floats are fuzzy. if you need some harder truths out of your floats, chances are you are doing something fragile
[19:54:00] <cousteau> it's just the concept I've seen most often
[19:54:09] <fizzie> I imagine `frexp` would come in handy for going from a float to its rational counterpart.
[19:54:24] <fizzie> But yeah, I don't think there's a built-in function.
[19:54:46] <fizzie> (In GMP. I feel like Haskell has one, for example.)
[19:54:51] *** Joins: ntwk (~ntwk@user/ntwk)
[19:55:38] <cousteau> floatcomplex: well yeah, there are libraries that can represent π *exactly* -- symbolic arith libs.  Not too useful for getting "actual numbers", but nice for abstract math.
[19:58:42] <floatcomplex> yeah, i meant more like if you have to define the "correct" behaviour of your code to be what you get when you compile it with a certain C implementation with certain flags for certain target hardware, then your math is probably ill conditioned and nobody should trust the results overmuch even on the "blessed" combination
[19:59:27] <cousteau> yeah that's true.  "ill conditioned" is a concept I'd like to see mentioned more often.
[20:00:06] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[20:01:02] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:01:44] <floatcomplex> trapping math implementations, which afaik are unavoidable if strictly implementing ieee 754, are one of the most irresponsible ideas reduced to practice in the history of computing
[20:01:44] <cousteau> I remember this one guy at my electronics lab who invented a way to compress image data, with no mathematical background at all, so the compression algorithm was very efficient and "worked fine in Matlab", but was very bad for realistic examples with less precision because it was awfully ill conditioned.
[20:01:52] *** Quits: Satin (uid193953@id-193953.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[20:02:07] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:02:12] <cousteau> he didn't care to make enough tests about its ill conditioning and just published the thing
[20:02:50] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 265 seconds)
[20:04:00] *** Joins: random-nick (~random-ni@87.116.180.220)
[20:04:28] <fizzie> Yeah, Haskell `toRational 0.1` gives the rational 3602879701896397/36028797018963968.
[20:04:39] <floatcomplex> i think the majority of matlab users have stockholm syndrome
[20:04:42] <cousteau> riv: back to your point, maybe there is a function to convert from float to mpf_t, and there might be another one for converting from mpf_t to mpq_t, or you could probably make your own rather easily
[20:04:46] *** Quits: rgrinberg (~textual@201.191.195.226) (Ping timeout: 260 seconds)
[20:05:02] <fizzie> And 1/44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304 for the smallest positive normal double. ;)
[20:05:34] <riv> wow!
[20:05:38] <cousteau> or you could use some of the FLT_* constants defined in limits.h (I think) to do that directly
[20:06:40] <cousteau> fizzie: I want you to be aware that that piece of information is virtually useless :P I jus see a salad of numbers and don't get any useful info from it other than "it's rather small"
[20:07:08] <cousteau> ,cc log2(44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304.0)
[20:07:12] <candide> cousteau: Success (no output).
[20:07:20] <cousteau> I am such an idiot
[20:07:26] <cousteau> ,qalc log2(44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304.0)
[20:07:27] <candide> cousteau: log2(44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304.0) = 1022
[20:07:34] <cousteau> cool
[20:07:58] <fizzie> Yeah, the exponent range is from -1022 to +1023, I think.
[20:08:59] <cousteau> I've never understood why it goes from -1022 to +1023 (or from -126 to +127) and not from -1023 to +1022
[20:09:13] <cousteau> 1.0f should be 0x40000000, not 0x3F800000
[20:09:25] <fizzie> To expand a little, what I was thinking of when I mentioned `frexp` was basically: use that to decompose the float into a (fraction, exponent) pair, do a bit of shuffling to convert that fraction into a n/2**53 rational (where n is an integer), use mpq_set_si to initialize an mpq_t that exactly represents the fraction, and then mpq_mul_2exp to scale it by the exponent.
[20:09:27] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:09:49] <cousteau> that way you would encode "magnitude is greater than 1" on a single bit
[20:10:05] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 265 seconds)
[20:11:04] <cousteau> riv: what fizzie said would work.  Or maybe you can just work your way using FLT_* constants
[20:11:18] <cousteau> (or DBL_ or maybe LDBL_)
[20:12:01] <cousteau> I think FLT_RADIX and FLT_MANT_DIG give you most of the info you need
[20:12:46] <cousteau> ,cc printf("%d %d", DBL_RADIX, DBL_MANT_DIG)
[20:12:47] <candide> cousteau: error: 'DBL_RADIX' undeclared; did you mean 'DBL_DIG'?
[20:12:56] <cousteau> ah
[20:13:02] <cousteau> ,cc printf("%d %d", FLT_RADIX, DBL_MANT_DIG)
[20:13:06] <candide> cousteau: 2 53
[20:14:45] <cousteau> or just divide it by DBL_EPSILON... I think you'll find most of the constants in ,{c11 5.2.4.2.2p11} quite useful.
[20:14:46] <candide> http://www.iso-9899.info/n1570.html#5.2.4.2.2p11 [Characteristics of floating types <float.h>] The values given in the following list shall be replaced by constant expressions with implementation-defined values that are greater or equal in magnitude (absolute value) to those shown, with the same sign: -- radix of exponent representation, b FLT_RADIX 2 -- number of base-FLT_RADIX digits in the floating-poi... <truncated; https://0x0.st/-7nc.txt>
[20:15:59] <cousteau> Plus ,{7.12.6.4} as fizzie suggested
[20:16:06] *** Quits: ThatLinuxGuy (~Srain@1.146.144.213) (Remote host closed the connection)
[20:16:10] <cousteau> ,c11 7.12.6.4
[20:16:11] <candide> http://www.iso-9899.info/n1570.html#7.12.6.4 [The frexp functions] 1 #include <math.h> double frexp(double value, i​nt *exp); float frexpf(float value, i​nt *exp); long double frexpl(long double value, i​nt *exp); Description 2 The frexp functions break a floating-point number into a normalized fraction and an integral power of 2. They store the integer in the i​nt object pointed to by exp. Return... <truncated; https://0x0.st/-7nA.txt>
[20:16:36] <cousteau> floatcomplex: re: stockholm syndrome... yes
[20:17:01] <fizzie> ,cc -lgmp -lm #include <math.h> #include <gmp.h> int e; double fr = frexp(0.1, &e); long num = fr * 9007199254740992; mpq_t q; mpq_init(q); mpq_set_si(q, num, 9007199254740992); if (e < 0) mpq_div_2exp(q, q, -e); else mpq_mul_2exp(q, q, e); mpq_out_str(stdout, 10, q);
[20:17:04] <candide> fizzie: 3602879701896397/36028797018963968
[20:17:05] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[20:17:09] <cousteau> people definitely use it too much like it's great to use even for cases where it clearly sucks
[20:17:12] <fizzie> There we go, same results as from Haskell toRational.
[20:17:39] <cousteau> there you have it, the 36...97/36...968 number you had before :)
[20:19:03] <fizzie> It will probably get a little tricky if `long` type has less bits than the `double` type has in mantissa, because mpq_set_si takes a `long`, and I don't see any variants with bigger integer types.
[20:19:55] *** Joins: masterbuilder (~user@user/masterbuilder)
[20:21:03] <fizzie> Also spent a few minutes wondering why I was getting "overflow in mpz type" errors from mpz_mul_2exp, turns out it takes the exponent as an unsigned type (mp_bitcnt_t), so I was passing some rather large number instead of -3. (Needs mpq_div_2exp for negative exponents.)
[20:21:47] *** Joins: seninha (~seninha@user/seninha)
[20:23:22] <cousteau> ,cc double x=0.1; double p, q; int e; p = frexp(x, &e); q = pow(2, -e); p /= DBL_EPSILON; q /= DBL_EPSILON; long long P=p, Q=q; printf("%g = %lld/%lld", x, P, Q);
[20:23:24] <candide> cousteau: 0.1 = 3602879701896397/36028797018963968
[20:23:33] <cousteau> guess that would work too?
[20:24:01] *** Joins: quartz (~quartz@user/quartz)
[20:24:28] <cousteau> fizzie: well, long is going to have more bits than double's mantisa in x86_64
[20:24:39] <cousteau> but in x86... oops
[20:25:33] *** Quits: jailop (~jailop@ool-944bb915.dyn.optonline.net) (Ping timeout: 265 seconds)
[20:25:33] <cousteau> my solution differs from yours basically in the lack of GMP because I don't know how to use GMP so I left it as an exercise for the reader
[20:28:14] *** Quits: nostar (~nostar@45.14.195.105) (Quit: Leaving)
[20:31:06] <fizzie> ,cc -lgmp -lm #include <float.h> #include <math.h> #include <gmp.h> int e; double fr = frexp(DBL_MIN, &e); long num = fr * 9007199254740992; mpq_t q; mpq_init(q); mpq_set_si(q, num, 9007199254740992); if (e < 0) mpq_div_2exp(q, q, -e); else mpq_mul_2exp(q, q, e); mpq_out_str(stdout, 10, q); // just checking
[20:31:08] <candide> fizzie: 1/44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304
[20:32:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[20:32:35] <pragma-> what a great bot. just needs a bit more polish.
[20:32:55] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[20:33:12] <quartz> Who designed the bot?
[20:33:25] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[20:33:25] *** Joins: dohtem (uid524096@user/dohtem)
[20:33:55] <pragma-> I cobbled it together. Designed would be too strong a word.
[20:34:16] <pragma-> It was organically adapted and extended as new features were sought.
[20:34:47] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[20:37:05] <quartz> So it runs on a dedicated server somewhere? LIke a raspberry pi?
[20:39:31] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:40:54] <pragma-> I sometimes fantasize about doing a complete rewrite with all the current features known and familiar. But who am I kidding? It's a large complex bot with a lot of amazing features that I don't want to reimplement.
[20:40:59] <cousteau> It is a damn fine bot
[20:41:20] * pragma- hugs cousteau
[20:41:20] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:41:25] <pragma-> cousteau: you are a damn fine human
[20:41:52] <cousteau> well I can't compile, run and debug C as efficiently as candide
[20:42:03] <candide> c​ousteau, Yeah, right.
[20:42:22] <cousteau> sheesh candide, no need to smear it on my face
[20:43:19] *** Quits: alch (~alch@151.34.94.92) (Read error: Connection reset by peer)
[20:43:42] *** Quits: fmsd (~no@41.141.50.222) (Remote host closed the connection)
[20:44:05] *** Joins: fmsd (~no@41.141.50.222)
[20:44:08] <pragma-> An English teacher was giving a lesson. "In English, a double negative forms a positive. In some languages, such as Russian, a double negative is still a negative. However, there are no languages wherein a double positive can form a negative."
[20:44:17] <pragma-> From the back of the classroom, a voice piped up: "Yeah, right!"
[20:44:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[20:45:07] <cousteau> that's because of sarcasm
[20:45:13] <cousteau> I assume that candide applied double sarcasm
[20:45:49] *** Joins: sheb (~sheb@31.223.228.71)
[20:47:16] *** Joins: alch (~alch@151.34.91.204)
[20:50:00] *** Quits: Inline (~Inline@2a02:908:1252:7a80::1) (Ping timeout: 268 seconds)
[20:50:22] *** Joins: reumeth (~reumeth@user/reumeth)
[20:51:14] *** Quits: Hercules (~Hercules@user/hercules) (Quit: Leaving)
[20:51:23] *** Joins: terminalpusher (~terminalp@2a01:586:2941:1:aeef:4407:c895:665b)
[20:52:57] <cousteau> I'm reading https://en.wikipedia.org/wiki/Decimal32_floating-point_format#Representation_of_decimal32_values and looking at how complicated this decimal format representation is.  Back in the day, I found out that the minimum number of bits theoretically needed to represent all floats strictly required by the C standard was exactly 27, with very little room for extra representations; however, the encoding was an absolute mess.  I've since wondered why the C 
[20:52:57] <cousteau> standard chose the limits it did for floats/doubles, and if it had to do with that (if there was already a machine that represented floats that way), or if there was another motivation.
[20:53:05] <pragma-> It's always fun when a new feature or design change opens up exciting new realms of possibilities by making it easier to write more advanced features. Like, in the beginning a certain feature would be unthinkable. But after a few API iterations, you notice that you now have some useful functions that make the original unthinkable feature possible -- nay, sometimes outright simple -- to write.
[20:53:40] <pragma-> I love those moments.
[20:54:17] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:55:06] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[20:56:26] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:57:08] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[20:57:12] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[20:57:26] *** Joins: trampel (~trampel@2601:602:9c00:921:374f:879a:3d1:4894)
[21:00:19] <leonardus> are ld and gcc intercompatible across versions? in other words, can I use a newer gcc with an older version of ld?
[21:01:06] *** Quits: SymbioticFemale (~Symbiotic@gateway/tor-sasl/symbioticfemale) (Ping timeout: 276 seconds)
[21:02:34] <cousteau> this sort of tool usually has compatibility with previous versions (even regarding "intermediate files generated with a previous version are still supported on a newer one, and vice versa"), but I would ask in #gcc or ##workingset to make sure
[21:03:20] <cousteau> specially since gcc and ld are from different projects (GCC vs binutils), so I don't think they follow strictly the same version scheme
[21:03:41] *** Joins: gproto23_ (~gproto23@user/gproto23)
[21:03:54] <cousteau> although gcc might expect certain features in ld that are only available in a new version, but that's probably only if you enable a certain flag that is usually off
[21:04:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 265 seconds)
[21:04:51] <leonardus> cousteau: Thanks
[21:06:25] <cousteau> or was it the library that was a separate project?  I never remember
[21:06:56] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[21:07:32] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[21:08:18] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:09:05] *** Quits: jojo (uid529260@id-529260.uxbridge.irccloud.com) ()
[21:09:20] <cousteau> I think the GNU compiler toolchain = GCC (compiler collection) + binutils (linker, assembler, and elf generation) + glibc (standard C library)
[21:09:54] <cousteau> ...oh, and apparently also GNU make and friends
[21:10:00] <cousteau> https://en.wikipedia.org/wiki/GNU_toolchain
[21:11:33] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[21:14:00] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:14:22] <cousteau> fizzie: just realized that frexp() assumes powers of 2, and thus will only work exactly if FLT_RADIX = 2
[21:16:11] *** Quits: VincentValentine (~VincentVa@PPPoE-78-29-90-102.san.ru) (Ping timeout: 245 seconds)
[21:16:21] *** Joins: mrig (~mrig@user/mrig)
[21:18:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:18:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:20:25] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:23:16] *** Joins: Akuli (~Akuli@82-203-160-25.bb.dnainternet.fi)
[21:24:49] <veltas> I don't think LD has changed that much, maybe something to do with 64-bit would break in older LD?
[21:27:23] <cousteau> well, there are new features being added, stuff like -flto that needs support from both the compiler and the linker, etc
[21:27:51] <cousteau> I don't know how much of that stuff is "if you can implement it, do it; otherwise, just ignore it" or if it will only work with a specific version of the linker
[21:30:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:30:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:30:14] *** Joins: wroathe (~wroathe@user/wroathe)
[21:31:38] *** Joins: Burgundy (~yomon@79.115.213.171)
[21:32:34] *** Joins: Betal (~Betal@user/betal)
[21:34:34] *** Joins: monkey_ (~user@190.104.116.153)
[21:40:23] *** Joins: jailop (~jailop@172.58.225.101)
[21:42:35] *** Quits: the_lanetly_052 (~the_lanet@194.135.154.78) (Ping timeout: 250 seconds)
[21:43:10] *** Joins: vmcs (~vmcs@194.135.154.78)
[21:47:01] *** Quits: jailop (~jailop@172.58.225.101) (Ping timeout: 245 seconds)
[21:47:27] *** Joins: strajder (~strajder@user/strajder)
[21:49:01] *** Quits: trampel (~trampel@2601:602:9c00:921:374f:879a:3d1:4894) (Quit: Leaving)
[21:52:38] *** Quits: gproto23_ (~gproto23@user/gproto23) (Quit: Leaving)
[21:52:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[21:54:03] *** Joins: jailop (~jailop@172.58.225.101)
[21:58:19] *** Joins: rayen (~rayen@197.15.125.89)
[21:59:11] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[22:01:15] *** Quits: Telvana (~capo@user/telvana) (Quit: ZNC 1.9.x-git-156-ac57c0e5 - https://znc.in)
[22:02:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:04:09] *** Joins: zalt__ (~zalt@user/zalt)
[22:04:37] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[22:07:58] *** Quits: jailop (~jailop@172.58.225.101) (Ping timeout: 260 seconds)
[22:11:55] *** Joins: Telvana (~capo@user/telvana)
[22:13:56] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:16:06] *** Joins: pert (~pert@fsf/member/pert)
[22:23:10] *** Joins: Inline (~Inline@aftr-37-201-240-2.unity-media.net)
[22:23:53] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[22:23:53] *** Quits: zalt__ (~zalt@user/zalt) (Read error: Connection reset by peer)
[22:24:46] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[22:24:59] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[22:25:07] *** Joins: de-facto (~de-facto@user/de-facto)
[22:25:46] *** Quits: rahl (~rahl@102.114.121.175) (Ping timeout: 245 seconds)
[22:27:40] *** Joins: rahl (~rahl@102.114.10.241)
[22:28:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[22:32:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:32:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:32:34] *** Joins: wroathe (~wroathe@user/wroathe)
[22:35:37] *** Joins: garbu (~q@108.180.39.84)
[22:37:43] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Remote host closed the connection)
[22:40:23] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[22:43:28] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:45:06] *** Quits: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:14] *** Joins: chr1 (~chr@mail.alfaorigo.dk)
[22:47:10] *** Joins: Haxxa (~Haxxa@202-63-76-96.ip4.superloop.com)
[22:49:30] *** Quits: chr1 (~chr@mail.alfaorigo.dk) (Client Quit)
[22:53:02] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[22:54:30] <fmsd> strlen that ignores an amount of \0 characters
[22:54:44] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[22:55:13] *** Joins: seninha (~seninha@user/seninha)
[22:56:17] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Quit: Leaving)
[22:59:15] <pragma-> dogs that like cats
[22:59:26] *** Joins: Xeroine (~Xeroine@user/xeroine)
[22:59:31] *** Quits: vmcs (~vmcs@194.135.154.78) (Ping timeout: 245 seconds)
[22:59:41] <pragma-> sandwiches without bread
[22:59:47] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:00:05] <earnest> a cereal called soup
[23:00:19] <earnest> tomatoes in fruit salad
[23:01:38] <nitrix> Mhh...
[23:02:56] <twkm> fmsd: there's no string type, string is a data format so give me the length of what isn't formatted correctly isn't something you can expect.  c also doesn't track how many elements of an array (bytes of storage) have been used so you need to track that if that's something you need.
[23:03:15] <nitrix> ,cc size_t strlen_skip(const char *str, size_t skip) { size_t result = 0; while (skip--) { size_t len = strlen(str); result += len + 1; str += len + 1; } return result + strlen(str); } int main(void) { size_t len = strlen_skip("hello\0world\0!", 2); printf("%zu", len); }
[23:03:18] <candide> nitrix: 13
[23:03:28] *** glider_ is now known as glider
[23:03:43] <nitrix> I'm assuming you would count the skipped \0's, but not the last one?
[23:03:46] <pragma-> Kind of hard to skip \0. If there is no \0 after the ones you've skipped, you've got problems.
[23:04:20] *** Joins: stefanos82 (~stefanos8@93-18-225.netrun.cytanet.com.cy)
[23:04:27] <nitrix> You've got problems if you don't have \0 either way, strlen wants a string, so strlen_skip would need to be a "string" as well.
[23:04:33] <earnest> reinvent netstrings
[23:05:47] <twkm> or vstr or ...
[23:06:14] *** Quits: stefanos82 (~stefanos8@93-18-225.netrun.cytanet.com.cy) (Client Quit)
[23:06:54] <nitrix> I never considered that point of view but I guess "abc\0def" is also a string? It is a contiguous sequence of characters and it is nul-terminated.
[23:07:35] <earnest> Better to just forget the concept of a 'string' at all.  C understands something called a cstring, and those are defined in a specific format, that's all
[23:07:43] <twkm> but how many null characters.
[23:07:46] <nitrix> I wont work with any of the library utilities because it has substrings and it'll short-circuit them, but the bigger whole kinda meets the definition too.
[23:07:54] <earnest> If it's not a C string, then functions expecting cstrings are not going to behave as expected, it's that simple
[23:08:07] <twkm> s/cstring/string/g
[23:08:11] <nitrix> earnest, you're confused.
[23:08:36] <nitrix> ,c11 7.1.1p1
[23:08:37] <candide> http://www.iso-9899.info/n1570.html#7.1.1p1 [Definitions of terms] A string is a contiguous sequence of characters terminated by and including the first null character. The term multibyte string is sometimes used instead to emphasize special processing given to multibyte characters contained in the string or to avoid confusion with a wide string. A pointer to a string is a pointer to its initial (lowest a... <truncated; https://0x0.st/-Yz2.txt>
[23:08:43] <earnest> I'd ban the string type
[23:09:03] <nitrix> The Standard's wording a lot better than the candide wording I'm used to.
[23:09:04] <earnest> As a concept (you can keep monoid)
[23:09:10] <nitrix> They explicitly mention _the first_
[23:09:18] <pragma-> ,c11 need not be a string
[23:09:20] <candide> http://www.iso-9899.info/n1570.html#6.4.5p6 [String literals] In translation phase 7, a byte or code of value zero is appended to each multibyte character sequence that results from a string literal or literals.78) The multibyte character sequence is then used to initialize an array of static storage duration and length just sufficient to contain the sequence. For character string literals, the array elem... <truncated; https://0x0.st/-75f.txt>
[23:09:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:09:54] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[23:09:54] <pragma-> ,c11 footnote.78
[23:09:54] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.78 A string literal need not be a string (see 7.1.1), because a null character may be embedded in it by a \0 escape sequence.
[23:09:57] * pragma- points.
[23:10:31] <pragma-> That line has always rubbed me wrong.
[23:10:33] <earnest> When is a string literal an array
[23:10:54] <pragma-> "foo" is already several strings to me. "foo", "oo", "o" and "".
[23:11:00] <pragma-> "foo\0bar" is just several more strings to me.
[23:11:03] <nitrix> pragma-, That actually bothers me. The deductive logic don't seem to work.
[23:11:15] <nitrix> Agreed.
[23:11:21] <earnest> pragma-: That's how you might think of it as a monoid
[23:11:46] <nitrix> A monoid? What the hell. What's the binary operator and the identity?
[23:11:55] <nitrix> Concat and '\0'?
[23:12:37] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[23:12:39] <nitrix> It probably is a monoid. I don't see how that's helping with C's definition.
[23:12:58] <earnest> nitrix: Is associative and has an identity, all 'strings' in programming languages are monoids generally
[23:13:10] *** Joins: bruda (~bruda@64.32.32.1)
[23:13:25] <nitrix> Sure. Then what insight does that give you?
[23:14:13] <earnest> nitrix: Nothing, monoid only came up in the context of deconstructing a string into its concatenated parts
[23:16:33] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 256 seconds)
[23:16:42] <nitrix> pragma-, I think I would've worded that string literal as beginning with a string, the whole cannot be considered a string though.
[23:16:46] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[23:17:02] *** Joins: jailop (~jailop@ool-944bb915.dyn.optonline.net)
[23:18:27] <pragma-> nitrix: But I can treat any part of it like a string.
[23:18:54] <pragma-> A pointer anywhere within "foo\0bar" still has the semantics of a string.
[23:18:55] <nitrix> Mhm. The disappointing part of the wording is with "be".
[23:20:31] <nitrix> Personally, I view "abc\0def" as a string, since the definition of a string is up to the null terminator, which it has, I would called that a string. The string being the "abc" part.
[23:20:45] *** Joins: Betal (~Betal@user/betal)
[23:21:44] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[23:23:09] <nitrix> Let me reword that. They claim the literal isn't a string because parts of it aren't included in the string, but I argue that because it has a least one string and would act like one (even if characters are omitted), it should be enough to say that string literals are strings.
[23:24:04] <pragma-> Yeah, I think _all_ string literals are strings. But not all strings are the entire string literal.
[23:24:24] <nitrix> Yep. I think we're on the same page.
[23:25:14] <nitrix> Good thing footnotes aren't normatives, I can keep living in my own world.
[23:25:27] <pragma-> That "non-normative" thing bothers me too.
[23:25:49] <pragma-> I highly value footnotes personally. They say informative things. 
[23:26:13] <cousteau> I would argue that the "a\0b" string literal is not a string, since the whole literal includes the 'b', but the string doesn't
[23:26:34] <cousteau> so it defines a string but it "is" not a string
[23:26:53] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[23:26:53] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[23:26:53] *** Joins: wroathe (~wroathe@user/wroathe)
[23:27:00] <nitrix> cousteau, You're siding with the standard and we understand that point of view.
[23:27:04] <pragma-> I can see what cousteau is saying but that's ripe for misinterpretation and ambiguity.
[23:28:16] <nitrix> The problem is how rigorous you are with "is" or "be". To me, if a superset meets to criteria for a subset, then it "is" the subset.
[23:28:28] <cousteau> ...then again, if you get super anal, "abc\0def" is already 8 strings, as I just realized that pragma- had already pointed out
[23:28:34] <nitrix> They want the superset and subset to match exactly for their "is"/"be".
[23:29:23] <ashafq> Is there a function in C standard library to swap arbitrary data structures?
[23:29:26] <nitrix> cousteau, Yes, but it's a bit more than that because string literals actually do begin with a valid string. You don't have to pick it somewhere in the middle, they are a valid strings on their own.
[23:30:04] <cousteau> on an entirely different semantic level, but:  int x[1];  would you say that x is an int?
[23:30:18] <nitrix> It wont be the full content of the literal, but you can use the literal everywhere a string is expected and it'd be valid.
[23:30:39] <floatcomplex> x is not an int
[23:31:16] <nitrix> cousteau, I see where you're going but that involves the type system. Strings aren't explained with types by the standard, they're data structures.
[23:31:16] <cousteau> floatcomplex: exactly, but the declaration of x creates an int (namely, x[0])
[23:31:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:31:50] <floatcomplex> yes
[23:32:38] <pragma-> It seems like we're all in agreement here.
[23:33:07] <cousteau> then again, I think my issue is with whether the string is an array of char or a pointer to char.  A string literal defines an array of char, containing as many chars as explicitly written plus a terminating null.  A pointer to char just points to the first character and it's up to you to figure out where the sequence ends
[23:33:35] <cousteau> but, of course, a string is neither a char* nor a char[].  It's a "character sequence", which is an abstract concept that doesn't have a type
[23:34:02] <nitrix> String (as defined by the standard), just needs to be contiguous and null-terminated. The char* or char[] or literal is irrelevant :/
[23:34:16] <nitrix> Mhm.
[23:34:46] * pragma- considers "A string literal may be a partial string, becdause a null character may be embedded in it."
[23:35:09] <cousteau> *may partially be a string
[23:35:15] <nitrix> They claim "abc\0def" is not a string because they're focusing on the whole, but "abc\0def" clearly is a string and can be used in every position where a string is expected and it itself match the criteria for being a string.
[23:35:23] <nitrix> It's a superset of a string. It should be considered a string.
[23:35:31] <pragma-> It most certainly is a string!
[23:35:47] <cousteau> it's... "not a string but it contains a string"?
[23:36:11] <cousteau> I mean if we get super pedantic, then no object is a string
[23:36:46] <nitrix> More like it's "always a string, but can be shortened".
[23:36:51] <nitrix> Yeah, what pragma wrote.
[23:36:54] <cousteau> and if we factor in that fact and consider "everything containing a string" to be "a string" then nitrix would be right
[23:38:09] <nitrix> struct example { char foo[100]; }; struct example *e = (struct example){ .foo = "Hello" }; // I'm not making the argument that `e` would be considered a string.
[23:38:21] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:38:23] <cousteau> I would say that   char *p = "abc\0def", r[] = "abc\0def";  p points to a string and r contains a string
[23:38:49] <cousteau> so, being consistent with that, the string literals (used as values) "abc" and "abc\0def" both contain strings
[23:38:50] *** Joins: rgrinberg (~textual@200.5.63.76)
[23:38:58] <nitrix> We're not even discussing points to or contains here.
[23:39:13] <floatcomplex> string theory: when people argue about whether things are strings or arrays of bytes, but nobody can form any testable hypotheses and it doesn't matter
[23:39:34] <cousteau> where's fstd when needed?
[23:41:14] <nitrix> "abc\0def" is this a contiguous sequence of characters? Yes. Is this null-terminated? Yes. It meets the criteria to be a string; the string is up and including the first null-character.
[23:41:35] <cousteau> So... I would interpret that footnote as meaning that the string literal doesn't equal a string, because it contains things that are not part of the string; so the string literal as a whole is not a string
[23:41:44] <nomagno> floatcomplex: Strings are always an abstraction over arrays of... You're right, it doesn't actually matter.
[23:41:55] <cousteau> the string it represents is 4 chars long, yet the string literal is 8 chars long
[23:42:16] <cousteau> and here I'm just defending the footnote, and not arguing with nitrix
[23:42:19] <pragma-> ,recall me pointer
[23:42:19] <candide> [23m24s ago] <p​ragma-> A pointer anywhere within "foo\0bar" still has the semantics of a string.
[23:42:22] <nitrix> cousteau, Mhm. Again, the problem is with their definition of "is", they want an exact match, the subset should be enough.
[23:42:25] <nomagno> It would be nice to have a way to know if a function wants a string or any char array
[23:42:32] <pragma-> wow, have we been going about this for almost 30 minutes now?
[23:43:06] <cousteau> nomagno: like, a manual page?
[23:43:14] *** Quits: mad_enz (~mad_enz@cpe00508b114c3e-cm788df7e75290.cpe.net.fido.ca) (Ping timeout: 256 seconds)
[23:43:26] <nitrix> Well, cousteau seemed like he had a new point of view from us, but they're just re-hashing through the same steps we did.
[23:43:45] <nitrix> I guess 30 minutes is plenty enough. I'll go shower.
[23:43:46] <nomagno> cousteau: Well, I meant more like a distinction embedded into the language itself
[23:43:46] *** Joins: VincentValentine (~VincentVa@79.126.106.250)
[23:44:38] <nomagno> I get strings are a subset of char arrays. But it is completely dumb to have feeding an unterminated char array to a libc function that expects a string be UB
[23:44:46] <cousteau> nitrix: sorry, I joined in the middle of the conversation so I might have missed the intensity of it
[23:44:47] *** Quits: rayen (~rayen@197.15.125.89) (Quit: WeeChat 3.3)
[23:45:20] <cousteau> nomagno: garbage goes in, garbage comes out
[23:45:56] <nomagno> The solution is probably to zero-initialize the char array if in doubt
[23:46:07] <nitrix> nomagno, String literals are guaranteed to be terminated, whether or not you inject another \0 in there.
[23:46:18] <floatcomplex> https://m.xkcd.com/171/
[23:46:19] <candide> Title of floatcomplex's link: xkcd: String Theory
[23:46:21] <nitrix> They are strings and should remain strings, even if they're shortened.
[23:46:38] <nitrix> It's impossible, in my book, for a string literal to not be a string.
[23:46:56] <nitrix> That Standard footnote took a different interpretation though.
[23:47:59] <nitrix> I think they had good intention to clarify a possible gotcha that people might run into and just overstepped with the wording.
[23:49:31] *** Quits: fmsd (~no@41.141.50.222) (Ping timeout: 265 seconds)
[23:49:42] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:50:35] <nitrix> pragma-, Here's an interesting question, what should be the correct semantic for strrchr("axa\0bxb", 'x')? The x with the aaa's or with the bbb's?
[23:51:15] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:51:17] <pragma-> How would strrchr even know that "bxb" exists?
[23:52:03] <pragma-> strrchr() doesn't have any magic to know where a string literal actually ends other than walking for the \0.
[23:52:22] <nitrix> Right. I guess it does illustrate other things we discussed but it's not quite the example I wanted. Let me see.
[23:52:42] <pragma-> Using sizeof instead of strlen is asking for trouble anyway.
[23:53:04] <pragma-> (if you're working with strings)
[23:53:16] <nitrix> Seems like all the string functions are perfectly fine with junk after.
[23:53:18] *** Quits: scarce (~scarce@2a05:f480:2000:1325::) (Changing host)
[23:53:18] *** Joins: scarce (~scarce@sourcehut/user/scarce)
[23:53:20] <pragma-> If you want to know the length of the string and not the size of the literal...
[23:53:33] <nitrix> Even strncmp don't look at only the n, they also check for \0.
[23:54:19] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[23:54:39] <pragma-> For the last 5 or so minutes I was considering what it would take to have a _String type. compile-time should only be a minor performance hit to ensure that _String objects contain a null byte somewhere in them. But run-time is a bit more annoying.
[23:56:12] <nitrix> Why is that? If you begin with the invariant that all _String are null-terminated, you can create string operations such that the terminator is always kept (you shift the responsibility onto the operators).
[23:56:43] <nitrix> If the user intentionally corrupts the string, that's on them.
[23:56:46] <pragma-> Because C is supposed to be blazingly blindingly fast, and run-time checks for valid strings everywhere slows things down a bit.
[23:57:13] <nitrix> You wouldn't check for '\0', you would just move the terminator when you change something length-wise.
[23:57:15] *** Quits: AmR (~AmREiSa@102.47.62.197) (Ping timeout: 265 seconds)
[23:57:21] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[23:57:27] <nitrix> By assuming it's where it needs to be.
[23:57:30] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[23:57:44] <nitrix> Basically how we already do things.
[23:57:45] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:59:41] <nitrix> strcat would allocate a.length + b.length + 1, copy from a, copy from b, add 
