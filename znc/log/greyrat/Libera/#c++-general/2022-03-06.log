[00:00:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:02:27] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167)
[00:04:13] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:05:11] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:08:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[00:15:25] *** Quits: smeso (~smeso@user/smeso) (Ping timeout: 256 seconds)
[00:16:40] *** Joins: smeso (~smeso@user/smeso)
[00:20:11] *** Quits: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de) (Quit: Leaving)
[00:20:37] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[00:21:28] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e)
[00:22:15] *** Joins: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de)
[00:24:13] *** Joins: Deneb (~johnch@128.82.159.143.dyn.plus.net)
[00:34:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:39:07] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[00:40:31] *** Quits: beanzilla (beanzilla@user/beanzilla) (Quit: ZNC 1.8.2 - https://znc.in)
[00:41:46] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167)
[00:44:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:45:06] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167) (Ping timeout: 260 seconds)
[00:47:10] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[00:48:35] <udet> I think in principle I get what a concept is meant to be... more or less. however I'm struggling to see, how this extends my toolset in a meaningful way. anyone having useful links or similar which could help me?
[00:49:07] <Friithian> it just forces a type to meet requirements to be used in a template
[00:49:27] <Friithian> for smaller, contained project? Eh, not the most useful
[00:50:12] <Friithian> but for a library or a massive project, it is much more likely to be useful by telling the programmar that they cannot put the type they're trying to into a template
[00:52:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[00:54:49] <ville> udet: perhaps one of the direct usages is controlling overload resolution
[00:54:57] <udet> hmm... I'd do a library making heavy use of templating. So yes I see, that it would be helpful for increasing precision and probably also debugging of compile time problems. what I miss is probably more the strategy to include this in design itself. I'd probably benefit from a set of examples to get a feeling for thinking it
[00:55:38] <Friithian> https://github.com/gunqqer/StreamDye/blob/master/StreamDye.hpp here is a semi-practical example I wrote a bit ago
[00:56:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[00:56:38] <ville> udet: a template<typename T> void f(T) is called an unconstrained template. it matches anything. just about. a concept may be used to constrain what it matches
[00:56:58] *** Joins: oilt^ (~oilt@50.232.121.75)
[00:57:23] *** Quits: paul424 (~tom@ip-5-172-235-17.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:59:14] <ville> udet: thus solving some ambiguity issues under certain circumstances. with arguably nicer syntax than trying to sfinae your way out of it
[01:00:02] <udet> oh, so probably I already use it... but somehow in a different way. so I already make use of requires() for overloading templates but like here https://gitlab.ralph.or.at/causal-rt/causal-cpp/-/blob/ralph/0000049/include/causal/core/aspect.hpp#L46-59
[01:00:58] <udet> I got to know it that way, basically searching for a way to overload templates. how does "concept" improve this?
[01:01:00] <ville> udet: also it could be sometimes difficult to express the result type of a function. so you get into the: auto f() -> /* what here? */ { ... } scenario. also there you can still shove a concept on it
[01:01:49] <ville> so at least there is a name on the return type, although it's not a concrete type per se, just indicating the kind of a type it'll return
[01:06:27] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[01:07:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:07:39] <udet> speaking only about the highlighted two function templates. I have a criteria deciding which of both overloads is to choose for which type
[01:10:43] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[01:15:50] *** Quits: jsbach (~jsbach@2a01:c22:a9b7:9200:14d9:e1e5:ba59:a11f) (Ping timeout: 250 seconds)
[01:16:08] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[01:16:45] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:20:42] *** Quits: Deneb (~johnch@128.82.159.143.dyn.plus.net) (Quit: Leaving)
[01:21:42] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e) (Quit: This computer has gone to sleep)
[01:23:14] <udet> ok, found a nice explanation which seems to be better understandable. it can do that, but it can also do kind of interface requiremens for templates... thats really nice
[01:25:33] <udet> since I moved from D to c++ I missed the possibility to do this efficiently without messing around with SFINAE. however, then there is one D feature I still miss... compiletime evaluation enabling me to evaluate if a certain statement would compile :-D
[01:27:41] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[01:31:48] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e)
[01:34:00] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e) (Client Quit)
[01:37:12] *** Quits: andreasbuhr (~quassel@p548dd8d5.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:42:24] *** Joins: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net)
[01:43:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:32] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:33] *** ChanServ sets mode: +v npaperbot
[01:44:51] *** Quits: rpnx (~rpnx@c-73-137-92-89.hsd1.ga.comcast.net) (Client Quit)
[01:45:00] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 240 seconds)
[01:52:55] *** Joins: c4017w__ (~c4017@209.52.68.8)
[01:53:35] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 240 seconds)
[01:55:19] *** Joins: markong (~kvirc@213.146.188.203)
[01:56:16] <ville> sfinae?
[01:56:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[01:56:42] *** Joins: gentooclimax (~gentoocli@2a02-8440-3141-9736-c805-f707-a5cc-8552.rev.sfr.net)
[01:59:48] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c5b5:e915:429b:2fcc)
[02:03:05] <RandomReader> he started looking at this stuff before Concepts
[02:05:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:08:34] *** Joins: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e)
[02:08:57] *** Quits: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e) (Client Quit)
[02:09:05] *** Joins: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e)
[02:10:22] *** Quits: oilt^ (~oilt@50.232.121.75) (Ping timeout: 272 seconds)
[02:10:31] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:10:36] *** Quits: gentooclimax (~gentoocli@2a02-8440-3141-9736-c805-f707-a5cc-8552.rev.sfr.net) (Ping timeout: 252 seconds)
[02:12:28] *** Joins: oilt^ (~oilt@50.232.121.75)
[02:13:35] *** Quits: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e) (Client Quit)
[02:16:32] *** Joins: proller (~p@80.240.216.69)
[02:16:39] *** Quits: proller (~p@80.240.216.69) (Remote host closed the connection)
[02:17:04] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[02:17:07] <shailangsa> does anybody know whether it's normal to perceive source code and code bases as improper and unconventional despite the owners of the source code following the best programming practices and making it easy to understand?
[02:19:33] *** Joins: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e)
[02:22:51] <Friithian> it entirely depeneds on the full context of well, all of what's going on
[02:26:46] *** Joins: proller (~p@80.240.216.69)
[02:28:02] <ville> sure. i am asking what prevents him from using sfinae to detect whether something compiles or not
[02:29:28] <RandomReader> ah
[02:31:43] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:32:19] <RandomReader> shailangsa - it's extremely common for people to not consider other perspectives, it's not like everyone agrees all the time
[02:32:42] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[02:33:56] <RandomReader> the key is separating out the opinions that are well-reasoned and often grounded in experience, from those based simply on the little knowledge available at this moment in time
[02:34:42] <ville> shailangsa: best programming practices according to whom?
[02:36:00] <shailangsa> projectts like Android, chromium released gy Google?
[02:36:40] <johnny> you should probably metnion the specific criticisms since those projects are so large
[02:36:59] <johnny> and practices to handle large codebases aren't necessarily the same as smaller ones
[02:38:09] <shailangsa> it seems with java why generics is used in some libraries the way they're used though
[02:38:40] <johnny> huh?
[02:39:14] <ville> shailangsa: you must realize that a reasonable engineer will make decissions based on their environment's requirements. so an engineer that made a choice in the enviornment such as android project might choose a very different answer in the context of say their personal project.
[02:39:25] <johnny> shailangsa, this is a C++ channel, so you should probably talking about C++
[02:40:43] <ville> shailangsa: let's say you're a very skilled individual, above average, so in your personal project you may choose some methodology that is considered "difficult", but in a larger project you might have to make choices that are more suited for the average or even the lowest common denominator
[02:41:15] <ville> shailangsa: conversely it's in fact poor engineering to just blindly copy the choices of one environment into a different environment
[02:42:46] <johnny> shailangsa, as an addendum to what ville said, an entire programming language was created by google to help with average programmer suitability .. the go programming language
[02:43:31] <johnny> facebook did something similiar with hhvm to adapt to their existing php programmer base
[02:43:52] <johnny> they instead "fixed" the language
[02:43:59] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[02:45:13] *** Joins: proller (~p@2a02:6b8:b081:8010::1:20)
[02:45:50] <johnny> ville, this particular uhmm "cargo cult"  is an interesting and long standing issue with programmers of all stripes
[02:46:38] <johnny> i am not so great the actual practice of programming, but at least i learned that one
[02:47:49] <ville> it's natural behaviour of meatbags. copying what they see others do and not get killed while doing it
[02:48:45] *** Quits: emerent (~quassel@p200300cd570c2158ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:49:17] *** Joins: emerent (~quassel@p200300cd5743c315ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:53:39] *** Joins: c4017w_ (~c4017@209.52.68.8)
[02:54:34] <Alipha> { f(vector<int>()); f(vector<char*>()); } void f(auto v) { if constexpr(requires() { v.push_back(5); }) { cout << "compiles. "; } else { cout << "not."; }} // udet, "evaluate if a certain statement would compile"
[02:54:35] <geordi> compiles. not.
[02:56:07] *** Joins: notevil (~notevil@user/notevil)
[02:56:13] *** Quits: notevil (~notevil@user/notevil) (Remote host closed the connection)
[02:56:48] *** Joins: notevil (~notevil@user/notevil)
[02:57:14] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[02:58:23] <johnny> is geordi's source available?
[02:58:55] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[02:59:02] <RandomReader> https://github.com/Eelis/geordi
[02:59:14] <johnny> ville. i'm asking about how you chose which one to copy from. not the copying :)
[03:06:58] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:09:14] *** Joins: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:479d:899:a3ae:fe9d)
[03:09:38] *** CodeMouse92 is now known as Guest5228
[03:13:38] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:00] *** Guest5228 is now known as CodeMouse92
[03:19:13] *** Quits: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:479d:899:a3ae:fe9d) (Changing host)
[03:19:13] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[03:20:17] *** Joins: ymwm_ (~yingmanwu@27.153.164.97)
[03:30:33] *** Joins: KombuchaKip (~kip@192.252.230.5)
[03:35:54] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[03:36:36] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[03:43:07] *** Joins: blackout69 (~blackout6@37.183.230.121)
[03:48:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[03:48:45] *** Joins: ivan_wagner (~ivan_wagn@185.65.135.175)
[03:51:04] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[03:54:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[03:57:51] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[03:59:39] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[04:00:23] <ivan_wagner> hey, how am I supposed to write constructor for object indexing test declared as: REQUIRE_THROWS(value["a"]); ?? where value is an object initialized as: const Value value{1};
[04:00:45] *** Quits: rpnx_ (~rpnx@2601:c9:c000:5425:41e1:9aa6:909:754e) (Quit: Leaving)
[04:02:52] <very_sneaky> ivan_wagner: can you create a code snippet of your desired behaviour? having trouble working out what you want
[04:03:17] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[04:03:21] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c5b5:e915:429b:2fcc) (Ping timeout: 252 seconds)
[04:03:37] <very_sneaky> ivan_wagner: https://godbolt.org/
[04:06:48] <ivan_wagner> very_sneaky, unfortunately I don't know what's the desired behaviour, I'm trying to accomplish test cases for my assignment and this one I got stuck on. It's named "Index Value". Here is the structure: const Value value{1};
[04:06:48] <ivan_wagner> REQUIRE_THROWS(value[0]);
[04:06:48] <ivan_wagner> where Value only holds one attribute of int.
[04:07:38] <ivan_wagner> so far I think that I am supposed to forbid operator[] overload, yet again I'm not sure so I'm asking here for help
[04:07:46] <very_sneaky> okay, so the task is to create a class definition for an indexable object?
[04:09:21] <very_sneaky> er, ensure that a class is not indexable*
[04:09:57] <Alipha> ivan_wagner: what test framework are you using?
[04:10:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:11:36] <ivan_wagner> ok, so emacs helped me to figure out what is expected to be done: no viable overloaded operator[] for type const Value
[04:12:33] <ivan_wagner> Alipha, doctest https://github.com/doctest/doctest
[04:17:03] <very_sneaky> if you delete the operator[], you'll get compile issues - my guess is implement the operator and throw an exception inside
[04:22:15] <very_sneaky> ivan_wagner: this was my interpretation of what your desired behaviour: https://godbolt.org/z/efcW8T8TM
[04:24:45] <ivan_wagner> very_sneaky, Value& operator[](Value Integer &); when I declare it like this the error inside editor still persists. Yes, you interpreted it well
[04:25:15] <ivan_wagner> **I meant: Value& operator[](const Value &);
[04:25:24] <very_sneaky> ivan_wagner: you'll need to provide a definition that throws an exception, i think
[04:39:20] <ivan_wagner> very_sneaky, finally. I have come up with the correct declaration for it
[04:50:16] *** Quits: ymwm_ (~yingmanwu@27.153.164.97) (Remote host closed the connection)
[04:50:34] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[04:50:42] *** Joins: ymwm_ (~yingmanwu@27.153.164.97)
[04:54:16] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[04:55:05] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:55:08] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[04:56:30] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:58:34] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[05:03:21] <very_sneaky> ivan_wagner: definition* the declaration is what you already had
[05:04:43] <ivan_wagner> very_sneaky, well the declaration of mentioned overload wasn't perfect, the parameter had to be an int instead of reference to Object
[05:06:24] <very_sneaky> yup. probably better to go for size_t over int to avoid the issues associated with signedness - indices can't be negative
[05:08:09] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[05:11:54] <very_sneaky> ivan_wagner: if you haven't seen it, cppreference has some good examples: https://en.cppreference.com/w/cpp/language/operators
[05:13:09] <ivan_wagner> very_sneaky, been there, seen that, felt bad about my lack of understanding C++
[05:29:40] *** Quits: ymwm_ (~yingmanwu@27.153.164.97) (Ping timeout: 256 seconds)
[05:33:44] *** Joins: geli (~gelignite@55d44ff4.access.ecotel.net)
[05:36:00] *** Joins: ymwm_ (~yingmanwu@27.153.164.97)
[05:36:42] *** Quits: magla (~gelignite@55d44f73.access.ecotel.net) (Ping timeout: 250 seconds)
[05:43:25] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:35] *** ChanServ sets mode: +v npaperbot
[05:43:51] *** Quits: proller (~p@2a02:6b8:b081:8010::1:20) (Ping timeout: 256 seconds)
[05:50:32] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Read error: Connection reset by peer)
[05:51:41] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[05:53:07] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:55:48] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:59:08] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:04:04] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[06:04:21] *** Joins: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net)
[06:06:34] *** Quits: geli (~gelignite@55d44ff4.access.ecotel.net) (Quit: Stay safe!)
[06:09:29] *** Joins: darkbit (~db@136.158.8.67)
[06:10:37] <nightstrike> is a cuda .cu file compiled with nvcc c or c++?
[06:18:55] *** Joins: Inline__ (~Inline@p200300cd473dda00d9049d80a70df8bf.dip0.t-ipconnect.de)
[06:21:16] *** Quits: MBrod208 (MBrod208@pool-72-94-148-71.phlapa.fios.verizon.net) (Remote host closed the connection)
[06:21:49] *** Quits: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:23:03] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[06:29:24] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:33:08] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[06:33:42] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[06:34:47] *** Joins: noarb (~noarb@user/noarb)
[06:35:47] *** Joins: xkuru (~xkuru@user/xkuru)
[06:38:52] *** Quits: noarb (~noarb@user/noarb) (Remote host closed the connection)
[06:39:12] *** Joins: noarb (~noarb@user/noarb)
[06:43:02] <ivan_wagner> nightstrike, c++ nad openvc library
[06:46:58] <nightstrike> ivan_wagner: so does that mean that it's compatible with g++'s ABI?
[06:48:40] <nightstrike> I have always been told not to mix c++ object code between compilers, and that icc, etc mangle names differently to prevent linking mixed abis that would otherwise break
[06:52:01] <ivan_wagner> nightstrike, here is a lil makefile on how it might be used
[06:52:04] <ivan_wagner> https://pastebin.com/uXiDC8w7
[06:52:44] <nightstrike> ivan_wagner: ok, but I wasn't really asking about lbopencv
[06:53:10] <nightstrike> I was asking about ABI compatibilty with linking nvcc-compiled classes with g++-compiled classes
[06:53:51] <nightstrike> they appear to link, which implies that nvcc is mangling the same way as g++, which I guess implies that nVidia thinks their ABI is compatible?
[06:54:03] <ivan_wagner> well opencv itself is written in c++ as well..
[06:56:05] <nightstrike> I don't see where opencv is relevant, maybe I'm missing something here
[06:56:18] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:56:36] <nightstrike> I was asking originally if the cu file was interpretted as c or c++... I see now that by default, it thinks that it's c++, which is fine... but that leads me to question ABI compatibility
[06:57:01] <nightstrike> do I need to, for instance, use C calling conventions for any boundary between a .cu file and a .cpp?
[06:59:15] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9dbb:4095:47d4:20f0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:00:26] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[07:01:31] <ivan_wagner> you need to use function prototypes to start the program inside main (cpp) and then make it do the magic through .cu file code on your nvidia card
[07:01:51] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dd8:2efd:65ad:4167) (Quit: Quit)
[07:03:10] <ivan_wagner> nightstrike, at least that's how I did it
[07:15:00] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[07:23:52] *** Joins: adeliktas0 (~adeliktas@i59F5FA8E.versanet.de)
[07:25:28] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:26:24] *** Quits: adeliktas (~adeliktas@i59F5F4FC.versanet.de) (Ping timeout: 272 seconds)
[07:26:25] *** adeliktas0 is now known as adeliktas
[07:27:56] *** Quits: ivan_wagner (~ivan_wagn@185.65.135.175) (Quit: Leaving)
[07:57:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:00:24] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:12:25] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:14:47] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:23:03] *** Quits: johnny (~johnny@user/johnny) (Quit: Leaving)
[08:23:42] *** Joins: johnny (~johnny@user/johnny)
[08:48:01] *** Quits: emerent (~quassel@p200300cd5743c315ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:48:17] *** Joins: emerent (~quassel@p200300cd5743c34aba27ebfffed28a59.dip0.t-ipconnect.de)
[08:49:27] <very_sneaky> does anybody do any profiling in their devops pipeline? automated performance benchmarks?
[08:57:33] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:01:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[09:07:18] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[09:07:40] *** Joins: epony (epony@user/epony)
[09:12:32] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:21:40] *** Quits: epony (epony@user/epony) (Remote host closed the connection)
[09:40:45] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:42:57] <nightstrike> I work in an environment where typical profiling tools don't work
[09:43:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:33] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:33] *** ChanServ sets mode: +v npaperbot
[09:44:11] <ent58> nightstrike: that sounds exciting
[09:44:38] <nightstrike> it keeps me entertained :)
[09:44:53] <nightstrike> anyway, I was just trying to answer very_sneaky
[09:45:22] <very_sneaky> nightstrike: don't work in what way?
[09:45:26] <ent58> Oh, gotcha.
[09:45:46] <nightstrike> very_sneaky: in a Heisenburg way, mostl
[09:45:56] *** Joins: xkuru (~xkuru@user/xkuru)
[09:46:13] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:46:36] <very_sneaky> so what kind of profiling do you do then?
[09:47:00] <very_sneaky> i've just been trying to research automated performance benchmarking/measurement, seems to be almost nothing out there - pretty surprised about that
[09:47:21] <nightstrike> like, for instance, consider some code that has to drain data from an FPGA's fifo that's filling at a several MHz rate.  Most profiling tools will inject sampling points that will disrupt that flow beyond the couple microsecond tolerance that's available, such that the fifo overflows and the program encounters fatal errors
[09:47:47] <ent58> measurement collapses functionality
[09:47:49] <ent58> ha
[09:47:55] <nightstrike> very_sneaky: look into profile guided optimization.  If you can make it work for your project, it's 1) effective, and 2) can be included in your CI
[09:48:48] <very_sneaky> nightstrike: cheers for the search term
[09:49:14] <very_sneaky> i guess with that kind of thing you can only really use matadata in your metrics
[09:49:36] <nightstrike> What I wind up having to do is write my own tools (or purchase expensive proprietary ones)
[09:49:55] <nightstrike> it makes gdb a pain, too
[09:50:13] <nightstrike> you can't easily step through a program to debug timing issues
[09:50:18] <very_sneaky> this just sounds like "use a static analyzer"?
[09:50:22] <InPhase> nightstrike: 15 years ago I was fighting with code that has to drain data from an FPGA fifo that was filling at a several MHz rate, and I had to do it on Windows.  It was a serious pain because if you ever did something like move a window, the top-priority gui thread would takeover the cpu and the fifo would overflow.
[09:50:40] <nightstrike> very_sneaky: I do crank up the warnings to catch as much as possible
[09:50:56] <very_sneaky> gotcha - i've already got plans to include static analysis in my CI
[09:51:02] <nightstrike> InPhase: LabView, per chance?
[09:51:10] <InPhase> nightstrike: No, C++.
[09:51:33] <InPhase> nightstrike: It's the OS itself that set those unchangeable prioritizations.
[09:51:59] <nightstrike> ah, I just figured that if there was a vendor that made an API for talking to an FPGA on Windows, that National Instruments is about the only one that would do it circa 2005
[09:52:01] *** Joins: epony (epony@user/epony)
[09:52:25] <InPhase> nightstrike: Well yeah, I had to write my own driver from scratch.  That took a while...
[09:53:19] <nightstrike> I try to stay away from all things labview, but when we do tackle the harder problems, we run into the annoying features of the windows realtime scheduler
[09:53:21] <InPhase> And I was there writing matching microcontroller code.
[09:53:48] <nightstrike> so I assume you hit those same annoyances, like the fact that it's basically unusable :)
[09:53:55] <InPhase> I tried it later in a different setup with LabVIEW, but that was much worse.
[09:54:23] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:54:32] <nightstrike> very_sneaky: careful with static analyzers.  Warnings are generally reasonable, but tools like lint go way overboard
[09:54:41] <nightstrike> compiler warnings*
[09:55:42] <nightstrike> InPhase: labview makes everything worse :)
[09:55:51] <nightstrike> but I guess the guis are pretty
[09:55:58] <very_sneaky> yeah, there's an art to tuning which warnings are on and off
[09:56:05] <lh_mouse> no linux GUIs are much worse than Windows.
[09:56:06] <very_sneaky> i want it for at least the core guidelines
[09:56:12] <nightstrike> -Wall -Wextra :P
[09:56:14] <lh_mouse> neither is better than the other.
[09:56:54] <very_sneaky> but modernise largely seems good as well - i've had clang-tidy suggest things like loop unrolling already which is positive. Ideally clang-tidy will be integrated with dev environments, but it's probably good to have a ci task to pick up on this kind of thing as well
[09:56:56] <InPhase> nightstrike: LabVIEW's solution to the problem was to massively buffer the data it couldn't acquire.  I'd sometimes do an acquisition, then wait 15 extra minutes for the LabVIEW code to finish processing it and catch up to real time.  At least my C++ code was displaying the results as they happened.
[09:56:56] <nightstrike> lh_mouse: labview is primarily a windows tool
[09:57:38] <nightstrike> very_sneaky: if a compiler wants you to manually unroll your loop, it's a bad compiler :)
[09:58:00] <nightstrike> InPhase: 15 *minutes*?
[09:58:11] <InPhase> nightstrike: Well it was a lot of data.
[09:58:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:58:42] <InPhase> nightstrike: That was many gigabytes, in the 2009 era.
[09:58:45] <lh_mouse> nightstrike, are you the NightStrike from mingw-w64?
[09:58:50] <nightstrike> lh_mouse: I am
[09:58:57] <lh_mouse> oh nice to see you here. XD
[09:59:00] <nightstrike> howdy :)
[09:59:20] <lh_mouse> I am wondering why you aren't in #mingw-w64 .
[09:59:27] <nightstrike> I am
[09:59:34] <very_sneaky> nightstrike: talking about clang-tidy - i think this is what it was complaining about: https://clang.llvm.org/extra/clang-tidy/checks/altera-unroll-loops.html
[09:59:35] <nightstrike> oh, I guess not on libera
[09:59:55] <nightstrike> fixed
[10:00:13] <lh_mouse> :)
[10:02:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[10:03:10] <nightstrike> very_sneaky: neat.  This is where I wish gcc did better.  It's such a good compiler, it just needs to tell you more about what's happening.  The opt-info interface or whatever it is now isn't too user friendly
[10:04:21] <nightstrike> sadly, I will never be qualified enough to work on improvements like that
[10:04:38] <nightstrike> The most I can do is run a testsuite now and again, and bug people about bugs :)
[10:05:01] <very_sneaky> the whole clang-tools suite is pretty elite
[10:09:00] <very_sneaky> i'm wondering if there's a sane way to integrate perf/gprof/callgrind into a ci pipeline, it seems like getting the insights out of them is pretty manual, and without an already established integration it means writing my own thing to track performance historically to track improvements and regressions
[10:12:44] <johnny> the answer is *probably* ?
[10:13:06] <johnny> i've seen it for js projects only really though
[10:14:02] <johnny> seems like it'd be a good idea to search for github actions integration even if you don't use github
[10:14:24] <johnny> that way you can see how it can integrate in a similar was as code coverage utilities do
[10:18:46] <nightstrike> "typedef cudaStream_t cudaStream_t" << um...... what?
[10:19:00] <nightstrike> typedef int int?
[10:19:26] <nightstrike> I feel dumber each day
[10:21:28] <johnny> sure it's not some conditional based on some macro?
[10:22:04] <johnny> that would be my default assumption whenever seeing something like that
[10:22:38] <johnny> although i guess i'd usually see it as something with the macro in the typedef itself
[10:41:59] <nightstrike> no idea
[10:51:43] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[10:51:44] <nightstrike> https://godbolt.org/z/1voeKWW3P  How do I have a lambda that can accept any kind of pointer, but also '0' as a literal?
[10:51:52] <lpapp> looks like the boost channel is silent.
[10:52:20] <lpapp> asked my boost question there yesterday without answer :P
[10:53:30] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:54:15] <nightstrike> maybe auto lambda = []<typename T>(T t){
[10:56:18] <nightstrike> or maybe combining that with a constexpr on some kind of constraint
[10:58:18] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 260 seconds)
[10:59:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:01:51] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:02:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:02:31] <nightstrike> that worked
[11:03:09] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[11:04:11] *** Joins: Raziel (~Raziel@user/raziel)
[11:06:58] *** Joins: c4017_ (~c4017@S0106c0943583f893.vf.shawcable.net)
[11:09:48] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:85a0:c944:c308:3afa) (Ping timeout: 240 seconds)
[11:18:07] <very_sneaky> on the other hand, there are also benchmarking libraries. maybe they would ease the process
[11:24:50] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:27:53] <lpapp> anyone using QtCreator here on Windows?
[11:29:49] *** Joins: ville (~ville@user/ville)
[11:29:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:33:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[11:34:12] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[11:34:27] <Alipha> nightstrike: just [&](auto a) {
[11:49:37] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:59:18] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:02:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[12:02:56] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[12:05:10] *** Joins: paul424 (~tom@ip-5-172-235-218.multi.internet.cyfrowypolsat.pl)
[12:08:19] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[12:08:40] *** Joins: DSpider (~DSpider@82.79.237.49)
[12:08:40] *** Quits: DSpider (~DSpider@82.79.237.49) (Client Quit)
[12:11:01] *** Joins: epony (epony@user/epony)
[12:17:31] *** Joins: gentooclimax (~gentoocli@2a02-8440-3341-46ef-7e63-048d-9a39-2c6f.rev.sfr.net)
[12:19:20] *** Joins: robod34 (Username@79.113.243.73)
[12:22:04] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[12:38:36] *** Joins: blackout69 (~blackout6@37.183.230.121)
[12:39:46] *** gentooclimax is now known as climax
[12:43:48] *** climax is now known as gentooclimax
[12:52:00] <paul424> Hello, there is intricatly designed vision system for Opendungeons, which prevents me from seeing what's on the hovering map ....
[12:52:09] <paul424> How do I analyze that vision system , any ideas ?
[12:52:23] <paul424> by vision system I mean it traces which tile is granted vision to which seat/player ...
[12:52:31] <paul424> any tips/hints   ?
[12:53:40] <ville> no idea what opendungeos is, but: https://www.redblobgames.com this guy has some related stuff to 2d maps
[12:55:05] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:55:12] <paul424> ville, this : https://www.youtube.com/watch?v=NDXyYSlV4Ho
[13:00:01] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:03:24] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:03:49] *** gentooclimax is now known as climax
[13:07:04] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:15dc:e22a:9981:6e85)
[13:07:28] *** climax is now known as gentooclimax
[13:25:12] *** gentooclimax is now known as climax
[13:29:16] *** climax is now known as gentooclimax
[13:30:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:32:28] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:33:00] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:33:45] *** Quits: gentooclimax (~gentoocli@2a02-8440-3341-46ef-7e63-048d-9a39-2c6f.rev.sfr.net) (Quit: Konversation terminated!)
[13:34:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:43:26] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:34] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:34] *** ChanServ sets mode: +v npaperbot
[13:46:19] *** Joins: ivii (~ivan@user/ivii)
[13:50:42] <paul424> oki so I have container like     std::vector<Seat*> mSeatsWithVisionNotified; How do I trace with gdb every modification of it ?
[13:53:37] <cbreak> you could put breakpoints everywhere you modify it.
[13:53:40] <very_sneaky> paul424: `watch mSeatsWithVisionNotified`
[13:53:52] <cbreak> watchpoints work with memory addresses
[13:53:56] <cbreak> not with whole containers
[13:54:05] <paul424> very_sneaky, Is this enough ? would it work , yeah cbreak right
[13:54:12] <cbreak> you'd have to watch the whole storage memory of the container, but even that wouldn't work reliably since it can reallocate
[13:54:15] <very_sneaky> ah, so you could watch individual elements but not the container cbreak?
[13:54:28] <cbreak> very_sneaky: yes. Within limits I think
[13:55:34] <cbreak> I'm not sure if there are limits to the amount of memory you can watch / number of watch points you can have, but you'd also have to track the internal pointers in the vector and manually add new watch points on reallocation
[13:55:52] <cbreak> probably easier to just wrap the vector in a custom class and put breakpoints / logging everywhere
[13:56:04] <paul424> cbreak, yeah oki thanks :)
[14:00:42] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:01:07] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:01:33] <very_sneaky> is there a level of competence that you can get to with gdb, where if you had invested a similar amount of time into other debugging tools (such as those available in visual studio), you can debug more productively?
[14:01:50] <very_sneaky> obviously a subjective question, curious as to what the cost/benefit analysis looks like though
[14:04:12] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:05:40] <ville> plain gdb? doubt it. the 99% task fo viewing the values of locals is already so much worse in plain gdb that it's hard to recover from that cost
[14:06:50] <very_sneaky> `info locals` not descriptive enough?
[14:07:29] <very_sneaky> i'm barely functional with gdb - though, it feels a lot like what learning vim was like when i went through that process
[14:07:30] <ville> ok, now iterate over that 50+ times
[14:07:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[14:07:56] <ville> compared to some other fronted where you could just hold "step" key down and watch the locals window show the values automatically
[14:08:07] <very_sneaky> hm, okay.
[14:08:17] <very_sneaky> yeah i guess that's true
[14:08:24] <ville> the functionality is there, it just sucks to use
[14:08:45] <very_sneaky> i'm reading the headlines of some of its advanced functionality which seems pretty cool
[14:09:24] <ville> now of course no debugger i know of has functionality to say graph the value of a local over last N steps and so on
[14:09:38] <very_sneaky> reverse execution seems pretty good
[14:09:44] <ville> which would be actually useful. but we can't have good tools
[14:09:53] <very_sneaky> that would actually solve a lot of the pain points i have with vs
[14:10:40] <very_sneaky> plotting variable values does seem like it would be useful
[14:10:49] <very_sneaky> perhaps meaningless for some data types though
[14:10:58] <very_sneaky> but for numerical good
[14:11:57] <very_sneaky> hold the phones
[14:12:00] <very_sneaky> ville: https://pypi.org/project/gdbplotlib/
[14:12:51] <very_sneaky> hasn't seen any work in a couple of years though
[14:13:16] <very_sneaky> it does look pretty cool though
[14:13:45] <ville> i can't see the images on their web page
[14:14:19] <very_sneaky> i think their readme is just imported from the github, probably can't access relative path to image files: https://github.com/X-Neon/gdbplotlib
[14:14:23] <ville> and yes there has been attempts at it, but it's really basic stuff that should come out of the box
[14:14:55] *** Joins: plastico (~plastico@neomutt/plastico)
[14:16:41] <ville> as far as gdb from the command line goes learn to use it to a "certain level", but after that look elsewhere to do your daily debugging with
[14:17:01] <very_sneaky> is that for productivity reasons?
[14:17:06] <ville> but everything sucks as far as debuggers go. at least on linux
[14:17:13] <ville> yes
[14:17:48] <very_sneaky> i've been using gdb with termdebug in vim, which improves the experience _a little bit_ - not a heap better than the tui that comes with gdb
[14:18:03] <very_sneaky> but that is vims weakest point, ability to debug easily with it
[14:18:11] <ville> eventually you'll be forced to fire up the command line gdb directly when whatever frontend you're using for it refuses to function. as in doesn't expose the functionality, crashes and so on
[14:18:25] <ville> but you'll likely narrow it down faster with that nicer frontend
[14:18:49] <very_sneaky> have you had experience with lldb? i don't have a good feel for the differences between it and gdb
[14:18:58] <very_sneaky> aside from the fact that it's obviously part of the llvm suite
[14:19:02] <ville> it's same shit, different names of commands
[14:19:49] <ville> shouldn't be your first-choice interface to debugging. use something else until that something else does what they always do: fuck up
[14:20:20] <very_sneaky> i think i'll try to use them from the command line for education reasons
[14:20:53] <very_sneaky> i think i don't have a good enough knowledge about what the tools _can_ do that i just don't consider what the best tool for the job is
[14:21:09] <very_sneaky> atm i hit every nail with the "breakpoint and log" hammer
[14:21:41] <very_sneaky> i was bitterly disappointed with visual studios profiling tools though - sampling wasn't very useful to me
[14:21:49] <very_sneaky> at least in the few instances i've needed to profile
[14:22:23] <ville> like i said get to a "certain level" for the command line. it doesn't matter whether it's gdb or lldb
[14:23:29] <ville> sometimes you may even have to switch to the otherone as the one you're used to refuses to show some location properly
[14:24:05] <ville> but those problems are ore frequent with whatever graphical frontends on top of either one of the command line debuggers
[14:24:50] <very_sneaky> yeah gotcha
[14:24:53] <very_sneaky> alright, fair enough
[14:27:12] <very_sneaky> i was just looking to see if i can find a list of feature requests for gdb, and found that they're using mailing lists for project communication
[14:28:10] <very_sneaky> i'm not sure there's anything more that turns me off about a project than mailing lists - i find them so difficult to navigate or use to get a feel for what's being worked on/future direction
[14:29:14] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[14:30:12] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[14:30:17] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[14:35:41] <very_sneaky> one of the benefits espoused for gdb is the utility of macros, so that you can programmatically debug things in a certain way. i wonder how much utility that would have in practice - when i'm debugging i'm usually not sure what i'm looking for. i guess if it was a multi-threaded program and i'd narrowed the problem down enough it could be useful
[14:39:38] *** Quits: paul424 (~tom@ip-5-172-235-218.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[14:44:40] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 272 seconds)
[14:47:30] *** Joins: Burgundy (~NA@86.121.143.206)
[14:49:06] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[14:49:19] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[14:50:25] *** Joins: lxsameer (lxsameer@user/lxsameer)
[14:56:14] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) ()
[15:01:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:02:37] <xkoncek> what is the big deal with alloca / variable length local arrays?
[15:03:22] *** Joins: magla (~gelignite@55d44ff4.access.ecotel.net)
[15:04:36] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[15:05:50] *** Joins: Salongbasi (~Salongbas@user/Salongbasi)
[15:06:11] <xkoncek> from what i have been digging around, people seem to advise against using it
[15:08:23] *** Joins: v4mp (~v4mp@user/v4mp)
[15:08:35] *** Parts: Salongbasi (~Salongbas@user/Salongbasi) ()
[15:14:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:21:15] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:21:40] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[15:40:36] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[15:40:53] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[15:47:16] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[15:51:41] <ville> no* way to detect failures
[15:52:32] <ville> not that you do much better on linux on most distros by default using alloc
[15:52:41] <ville> err malloc
[15:53:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[15:54:51] *** Joins: proller (~p@80.240.216.69)
[15:57:11] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:01:18] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[16:02:04] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:02:06] *** Joins: markong (~kvirc@213.146.188.203)
[16:04:00] <xkoncek> well, i can work with a constant-sized buffer, what is some 256 or 512 bytes on stack anyway?
[16:04:02] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[16:04:12] <xkoncek> even if i would only need like 40
[16:05:18] *** Parts: blackout69 (~blackout6@37.183.230.121) ()
[16:05:28] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:13:55] *** Joins: proller (~p@2a02:6b8:b081:31::1:27)
[16:17:01] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:24:44] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 272 seconds)
[16:34:02] *** Joins: ymwm__ (~yingmanwu@27.153.167.245)
[16:36:46] *** Quits: ymwm_ (~yingmanwu@27.153.164.97) (Ping timeout: 272 seconds)
[16:36:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[16:40:10] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[16:41:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:41:53] <foobaz212> hey, I'm trying to understand how to implement 1 to many schema, per this answer https://stackoverflow.com/a/36631276/7212809 There's one thing I don't understand: in the "Inventory" table, why is "Item" the primary key? I thought primary keys are supposed to be unique - surely there could be duplicate items?
[16:42:22] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:43:05] *** Joins: pulse (~pulse@user/pulse)
[16:46:36] *** Joins: evangeline (~Eleanor@178.79.105.181)
[16:47:11] <ville> umm, it's just an example and they've picked that the name is a unique identifier
[16:48:39] <ville> you could have setup so that the name+vendor_id is unique combination. that is any one vendor can't have more than one item with the same name. different vendors can have items with same name
[16:49:46] <foobaz212> makes sense thank you
[16:59:11] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[17:01:28] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:02:41] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:02:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:06:21] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:16:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[17:16:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:21:07] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:26:04] <foobaz212> I have a question about this simple 1-many table: https://pastebin.com/zVakeWhi I have posted my quesition in the comments for better context, but I don't understand how you can referencec an id that doesn't exist
[17:26:35] <foobaz212> when I run this on sql fiddle, it works fine...I was expecting it to throw an error saying "5" book _id doesn't exist, or something
[17:26:35] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:29:21] *** Joins: markong (~kvirc@213.146.188.203)
[17:31:41] *** Joins: jsbach (~jsbach@2a01:c22:35f9:d600:5e51:5873:87b:9224)
[17:35:06] *** Quits: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com) (Remote host closed the connection)
[17:39:16] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:43:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:35] *** ChanServ sets mode: +v npaperbot
[17:50:13] <ville> it depends on the particular database
[17:59:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[17:59:24] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[18:03:29] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:06:59] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[18:09:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:11:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:16:26] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[18:28:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[18:43:26] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[18:44:50] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[18:47:36] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d96f:789:dcb9:a5e6)
[18:47:36] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d96f:789:dcb9:a5e6) (Changing host)
[18:47:36] *** Joins: skapata (~Skapata@user/skapata)
[18:56:51] *** Joins: shailangsa (~shailangs@host86-186-133-59.range86-186.btcentralplus.com)
[18:57:35] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:58:59] *** Joins: blackout69 (~blackout6@37.183.230.121)
[19:02:38] *** Joins: ferdna (~ferdna@user/ferdna)
[19:04:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:07:56] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[19:13:50] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[19:15:46] *** Quits: oilt^ (~oilt@50.232.121.75) (Ping timeout: 245 seconds)
[19:16:11] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:19:53] *** Joins: paul424 (~tom@ip-5-172-236-92.multi.internet.cyfrowypolsat.pl)
[19:26:11] *** Joins: oilt^ (~oilt@50.232.121.75)
[19:26:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:34:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:43:15] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[19:50:50] *** Joins: CodeMouse92 (~CodeMouse@2600:6c46:6000:97b:3b86:53ab:52ef:1ea9)
[19:51:14] *** CodeMouse92 is now known as Guest6719
[19:54:05] *** Quits: Guest6719 (~CodeMouse@2600:6c46:6000:97b:3b86:53ab:52ef:1ea9) (Client Quit)
[19:55:29] *** Joins: rond_ (~rond_@90.251.109.52)
[19:57:02] <rond_> Hi! I'm using clion debugger and I want to step into a function. However, "step into" evaluates arguments first which is very annoying for me. Example:   `step into f(g())` would go to `g()` first, but I'd like to go directly into `f()`. So what I want to "step into the most outer function in the current line". Any idea how to achieve this?
[19:57:53] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:04:06] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:d94a:5af7:3b65:8539)
[20:04:47] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[20:04:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:05:05] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[20:07:49] *** Quits: Fairy (~Fairy@2001:464a:4992:0:6105:d368:45f9:802f) (Ping timeout: 240 seconds)
[20:08:34] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[20:08:41] *** Quits: blackout69 (~blackout6@37.183.230.121) (Quit: Leaving.)
[20:12:36] *** Quits: oilt^ (~oilt@50.232.121.75) (Remote host closed the connection)
[20:15:08] <ville> rond_: unfortunately: "by writing your own debugger"
[20:15:49] <ville> or at least "debugger front end"
[20:19:24] <ville> in the meanwhile learn the keyboard shortcuts for the debugger controls and whatever maps to "finish", which steps out of the current stack frame. so once step into takes you to g() you immeditately hit "finish", and then "step into" again
[20:23:35] <rond_> ville is there a finish in Clion though? Would you say it's the same as "step out"?
[20:23:46] <rond_> probably, hm
[20:24:12] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a)
[20:24:12] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a) (Changing host)
[20:24:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:29:45] <ville> yes, and "step out" is a far more sensinble name. no idea why gdb calls it finish. i guess "finish the current stack frame"
[20:31:23] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:35:11] *** Joins: ivii (~ivan@user/ivii)
[20:37:19] <rond_> it works, thanks!
[20:37:47] <rond_> (why step out requires "Shift + F8" instead of one key though :(
[20:38:12] *** flooded is now known as _flood
[20:44:14] <xkoncek> i keep wondering whether in my dynamic loader wrapper, i should throw an exception when dlsym fails or return a shared_ptr pointing to null
[20:44:57] <xkoncek> in the latter case i lose the error message that would be reported by dlerror
[20:47:36] <rond_> is shared_ptr poiniting to null well-agreed solution to problems?
[20:47:43] <rond_> sounds weird
[20:47:56] <rond_> std::optional could be better
[20:49:04] <xkoncek> same as with regular pointers
[20:50:24] <rond_> still prefer std::optional
[20:50:37] <rond_> jk, ignore me
[20:50:50] <rond_> such discussions lead to nowhere
[20:52:07] *** Joins: Burgundy (~NA@86.121.143.206)
[20:59:13] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[20:59:34] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a)
[20:59:34] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a) (Changing host)
[20:59:34] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:59:43] *** Quits: darkbit (~db@136.158.8.67) (Read error: Connection reset by peer)
[21:03:13] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:05:09] *** Joins: lxsameer (lxsameer@user/lxsameer)
[21:05:25] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:09:06] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[21:11:18] <xkoncek> shared_ptr can even point to a different owner
[21:12:30] <ville> rond_: most ides allow you to rebind keys
[21:12:56] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:15:54] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[21:16:28] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a)
[21:16:28] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:e14:9ac6:4d4a:62a) (Changing host)
[21:16:28] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:17:13] <xkoncek> just have 2 overloads, like get / get_if
[21:19:52] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[21:36:53] *** Joins: xkuru (~xkuru@user/xkuru)
[21:39:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:41:47] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[21:43:27] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:36] *** ChanServ sets mode: +v npaperbot
[21:47:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:e4ff:83e1:d0cb:eb4e)
[21:50:34] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:52:27] *** Joins: lxsameer (lxsameer@user/lxsameer)
[22:02:56] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[22:04:46] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[22:05:56] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[22:06:09] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:07:38] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[22:09:31] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:13:41] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 245 seconds)
[22:18:40] *** Inline__ is now known as Inline
[22:18:43] *** Joins: mike18 (~geri@71-220-52-187.mpls.qwest.net)
[22:18:57] <mike18> hi
[22:19:59] <Alipha> mike18: hi
[22:21:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:27:55] *** Joins: skapata (~Skapata@user/skapata)
[22:28:14] <mike18> Alipha: how would you design the following? https://gist.github.com/Arnold1/a1de1817a6d8a878a793746155e90aa6
[22:28:37] <mike18> do i really need a graph for that or can i use unordered_map with unordered_set for that?
[22:33:03] <Alipha> mike18: unordered_map<string, unordered_set<string>> would work fine. Note you could instead use unordered_multimap<string, string>
[22:33:32] <mike18> whats the advantage of implementing a graph here?
[22:33:35] <mike18> speed?
[22:34:06] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[22:37:10] *** Joins: lispy (~lispy@user/lispy)
[22:37:51] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:38:33] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[22:39:05] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[22:44:11] <mike18> how can multimap find key, value?
[22:44:50] *** Joins: pulse (~pulse@user/pulse)
[22:44:59] <mike18> in unordered_map<string, unordered_set<string>> foo; i can do: foo["key"].find("value") ...
[22:45:32] <Alipha> mike18: you'd use std::unordered_multimap::equal_range instead of find
[22:46:56] <mike18> and than i can call find on that?
[22:47:27] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::43)
[22:47:37] <mike18> there could be multiple values for the key ... will i need to iterate all of them?
[22:48:11] <Alipha> mike18: it returns a pair of iterators that you can over to get all the values
[22:48:42] <mike18> but in case of unordered_set i can call find
[22:48:51] <mike18> which is O(1)
[22:49:00] <mike18> for unordered_map<string, unordered_set<string>>
[22:49:37] <BurumaSerafuku> ew
[22:49:41] <BurumaSerafuku> map to a set
[22:49:42] <BurumaSerafuku> why?
[22:49:51] <mike18> unordered
[22:50:02] <Alipha> I'm not sure why you'd be calling find on the unordered_set. You'd want to iterate over the set to get all the dependencies
[22:50:53] <mike18> Alipha: i add a new dependency i need to check if it already existss
[22:51:01] <BurumaSerafuku> every time I see such weird combinations, a coding smell arises
[22:51:58] <Alipha> And you'd actually want two unordered_map<string, unordered_set<string>> (or unordered_multimap<string, string>). One to map the dependencies and one to map the what's dependent on, I'd think
[22:52:36] <mike18> here is what i wrote so far: https://gist.github.com/Arnold1/bf34652d235c8d49749521c40881fd18#file-competitive-coding-cpp
[22:53:36] <mike18> Alipha: whats the advantage if i implement a graph instead of unordered_map ... ?
[22:56:14] <Alipha> mike18: it may be a little more efficient. Though the advantage of using *an exisiting* graph library is that a bunch of the code is already written for you. I'm not sure if there's a huge advantage to writing a graph yourself, if this is just throwaway work
[22:56:32] <mike18> ok
[22:58:19] <Alipha> mike18: maybe unordered_map<string, unordered_set<string>> is better
[22:58:31] <Alipha> Than multimap
[22:59:37] <Alipha> Another idea is std::set<edge> where edge is struct { std::string from, to; }
[23:00:29] <BurumaSerafuku> boost::graph ?
[23:00:49] <mike18> why set?
[23:03:24] <Alipha> If you order the edges so that all equal `from`s are next to each other, then you can use std::set::equal_range with transparent comparators to easily get all the dependencies of `from`
[23:04:26] <Alipha> mike18: considering you've already written a bunch of code using unordered_map<string, unordered_set<string>>, you might as well just continue on that path. Especially since I'm not even sure if any of my suggestions are actually better.
[23:04:55] <mike18> my question was more like if graph speed up that code
[23:05:14] <mike18> but graph to implement is more complex and all the memory management etc
[23:05:22] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e4ff:83e1:d0cb:eb4e) (Quit: Quit)
[23:05:54] <Alipha> A graph is probably faster but probably not that much faster
[23:06:24] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:06:43] <mike18> also more lines of code right
[23:10:06] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[23:11:26] <Alipha> Yeah
[23:12:07] *** Joins: andreasbuhr (~quassel@p548dd961.dip0.t-ipconnect.de)
[23:17:16] *** Quits: paul424 (~tom@ip-5-172-236-92.multi.internet.cyfrowypolsat.pl) (Ping timeout: 256 seconds)
[23:23:57] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:26:14] *** rwb is now known as rb
[23:26:32] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[23:33:24] *** Quits: lmat (~Lmat@c-73-102-193-68.hsd1.in.comcast.net) (Remote host closed the connection)
[23:39:52] <ashafq> ,, static constexpr std::string FOO{"foobar"};
[23:40:09] <ashafq> << static constexpr std::string FOO{"foobar"}; cout << FOO;
[23:40:09] <geordi> error: 'cout' does not name a type
[23:40:43] <ashafq> << FOO;  static constexpr std::string FOO{"foobar"};
[23:40:43] <geordi> error: 'string{string::_Alloc_hider{((char*)(& FOO.string::<anonymous>.string::<unnamed union>::_M_local_buf))}, 6, string::<unnamed union>{char [16]{'f', 'o', 'o', 'b', 'a', 'r', 0}}}' is not a constant expression
[23:40:53] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[23:40:54] <ashafq> Why?
[23:48:58] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[23:49:37] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
