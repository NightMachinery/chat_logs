[00:00:43] *** Joins: kn1003855 (~kn100@wireguard/tunneler/kn100)
[00:03:41] *** Joins: kn10038557 (~kn100@wireguard/tunneler/kn100)
[00:04:08] *** Quits: kn100385 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:04:50] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[00:05:24] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 272 seconds)
[00:05:49] *** Joins: mrig (~mrig@user/mrig)
[00:06:40] *** Quits: kn1003855 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:07:52] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[00:08:22] *** Joins: kn100385570 (~kn100@wireguard/tunneler/kn100)
[00:10:46] *** Quits: foobaz212 (~foobaz212@52.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[00:11:06] *** Quits: kn10038557 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:11:14] *** Joins: kn1003855702 (~kn100@wireguard/tunneler/kn100)
[00:14:12] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[00:14:16] *** Quits: kn100385570 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:15:47] *** Joins: kn10038557026 (~kn100@wireguard/tunneler/kn100)
[00:16:53] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[00:18:04] *** Joins: kn100385570262 (~kn100@wireguard/tunneler/kn100)
[00:18:42] *** Quits: kn1003855702 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:20:36] *** Quits: kn10038557026 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:20:43] *** kn100385570262 is now known as kn10038557026
[00:23:46] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[00:25:03] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[00:25:12] *** Joins: kn100385570262 (~kn100@wireguard/tunneler/kn100)
[00:26:56] *** Quits: kn10038557026 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:29:55] *** Joins: kn1003855702625 (~kn100@wireguard/tunneler/kn100)
[00:32:00] *** Quits: kn100385570262 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 272 seconds)
[00:32:01] *** kn1003855702625 is now known as kn100385570262
[00:33:50] *** Joins: independent56 (~independe@85.255.236.75)
[00:34:25] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[00:36:23] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1005) (Quit: ZNC 1.8.2 - https://znc.in)
[00:42:27] *** Joins: kn1003855702625 (~kn100@wireguard/tunneler/kn100)
[00:44:00] *** Quits: kn100385570262 (~kn100@wireguard/tunneler/kn100) (Ping timeout: 252 seconds)
[00:49:38] *** Quits: kn1003855702625 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[00:55:06] *** Joins: independent_ (~independe@185.69.144.230)
[00:55:59] *** Quits: independent56 (~independe@85.255.236.75) (Ping timeout: 258 seconds)
[01:01:08] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Ping timeout: 272 seconds)
[01:02:09] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Ping timeout: 252 seconds)
[01:02:30] *** Quits: moduletux (~dhollinge@ip68-13-48-63.om.om.cox.net) (Read error: Connection reset by peer)
[01:03:28] *** Joins: muirrum (~muirrum@gilwell.devcara.com)
[01:03:29] *** Quits: muirrum (~muirrum@gilwell.devcara.com) (Changing host)
[01:03:29] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[01:04:01] *** Quits: independent_ (~independe@185.69.144.230) (Remote host closed the connection)
[01:04:25] *** Joins: independent_ (~independe@185.69.144.230)
[01:06:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 272 seconds)
[01:09:51] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 252 seconds)
[01:14:23] <b0nn> noonien: The race detector doesn't build when cross compiling because of C libs, which I *think* points to issues when fiddling with the c params and using -race as well
[01:14:57] <b0nn> That is, I would expect the -race detector to have issues whenever people fiddle with the c parameters when building
[01:14:59] <noonien> hmm, i'm not cross compiling in this case
[01:15:25] <b0nn> You might get a better response from the mailing list
[01:15:39] <noonien> not building with -buildmode=c-shared doesn't seem to introduce this issue
[01:17:08] *** Quits: dza (~dza@user/dza) (Read error: Connection reset by peer)
[01:19:05] *** Joins: Torr (~Torr@user/torr)
[01:19:09] *** Joins: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de)
[01:20:11] *** Joins: dr0n (~dr0n@94.11.23.235)
[01:23:59] *** Quits: v0lta (~dkmueller@2a01:c22:7a07:3100:54ce:2c9:e7b8:c1d0) (Quit: WeeChat 3.2)
[01:25:12] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 272 seconds)
[01:30:40] *** Quits: independent_ (~independe@185.69.144.230) (Remote host closed the connection)
[01:31:03] *** Joins: independent_ (~independe@185.69.144.230)
[01:32:49] *** Joins: nperez (~nperez@86-93-223-59.fixed.kpn.net)
[01:39:29] *** Joins: noxim (~noxim@user/noxim)
[01:40:32] *** Joins: dza (~dza@user/dza)
[01:41:46] *** Joins: shka (~herr@109.231.62.239)
[01:43:52] *** Quits: noxim (~noxim@user/noxim) (Ping timeout: 246 seconds)
[01:44:06] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 265 seconds)
[01:46:42] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[01:47:50] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 256 seconds)
[01:50:01] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Changing host)
[01:50:01] *** Joins: fikran (~fikran@user/fikran)
[01:51:06] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 252 seconds)
[01:53:02] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Quit: Client closed)
[01:53:15] *** Quits: brooks (~bswinnert@containers.neptunenetworks.org) (Quit: Ping timeout (120 seconds))
[01:53:15] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[01:53:51] *** Joins: Torr (~Torr@user/torr)
[01:57:16] *** Quits: independent_ (~independe@185.69.144.230) (Remote host closed the connection)
[01:57:33] *** Joins: independent_ (~independe@185.69.144.230)
[01:58:34] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[02:00:34] <b0nn> looking at GDPR compliance, was signing up for Cookiebot, for some reason I looked through the T&C and they'd hidden deep in there that the plans are limited to 250k requests
[02:00:48] <b0nn> ugh, sorry this is for a diff window
[02:03:58] *** Joins: chewyDog (~chewyDog@172.77.44.236)
[02:04:07] *** Parts: chewyDog (~chewyDog@172.77.44.236) ()
[02:06:12] *** Joins: brooks (~bswinnert@containers.neptunenetworks.org)
[02:06:49] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 265 seconds)
[02:07:15] *** Quits: rootbox (~rootbox@ip-109-91-177-197.hsi12.unitymediagroup.de) (Quit: rootbox)
[02:07:17] *** Joins: Torr (~Torr@user/torr)
[02:14:11] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 258 seconds)
[02:18:34] *** Quits: Arahael (~arahael@203-206-93-248.tpgi.com.au) (Ping timeout: 240 seconds)
[02:20:31] *** Joins: Arahael (~arahael@14-200-228-14.tpgi.com.au)
[02:21:14] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:24:54] *** MrElendig is now known as lb9di
[02:25:58] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[02:30:01] *** Quits: revolve (~u0_a227@82-132-245-79.dab.02.net) (Read error: Connection reset by peer)
[02:30:02] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[02:30:11] *** Joins: kodah (~kodah@user/kodah)
[02:30:46] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[02:32:10] <kodah> i kinda wish i was a cookie bot, that sounds like a nice life
[02:32:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[02:33:08] <pl> b0nn: the best question to ask is if you even need them
[02:34:19] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[02:40:34] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[02:41:21] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:47:05] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[02:47:12] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Client Quit)
[02:47:21] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[02:48:06] *** Quits: jackneill (~jackneill@20014C4E1816020007CFC08131EA12BC.dsl.pool.telekom.hu) (Ping timeout: 272 seconds)
[02:48:15] <b0nn> pl: heh, we're trading in 4 markets that have cookie legilsation to deal with, and I think we have some cookies that users need to be informed about
[02:48:32] <b0nn> (disclaimer I'm still new to the job, and to cookie management in general)
[02:48:47] <b0nn> kodah: bot or monster?
[02:48:56] <pl> b0nn: I just find it a great chance to figure out which bits are truly required
[02:49:23] <pl> though there might be tension, usually with marketing and sometimes with surveillance^W data science teams
[02:49:52] <b0nn> Yeah, am too new to be able to make that decision
[02:49:59] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:51:00] <pl> OTOH, you might just have the new perspective that is needed to make a review ;)
[02:53:52] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 272 seconds)
[02:54:18] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[02:55:12] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[02:55:50] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[02:56:35] <b0nn> heh - I've already ruffled enough feathers ;)
[03:07:47] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:11:09] *** Joins: revolve (~u0_a227@82-132-245-79.dab.02.net)
[03:11:23] *** Joins: kodah (~kodah@user/kodah)
[03:11:32] <kodah> b0nn: i mean, both
[03:17:48] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca) (Remote host closed the connection)
[03:24:34] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Quit: Client closed)
[03:24:48] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[03:29:55] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[03:30:14] *** Quits: independent_ (~independe@185.69.144.230) (Remote host closed the connection)
[03:30:38] *** Joins: independent_ (~independe@185.69.144.230)
[03:31:35] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:07] *** Joins: jsrnop (~mark@user/jsrnop)
[03:41:25] *** Joins: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca)
[03:48:12] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.2)
[03:48:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[03:59:15] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[04:01:32] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:03:52] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[04:04:10] *** Quits: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[04:06:46] *** Parts: eti (~eti@2a07:abc4::1:26e) ()
[04:10:22] *** Joins: noxim (~noxim@user/noxim)
[04:13:24] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 258 seconds)
[04:13:49] *** Joins: dansan (~daniel@75.81.148.51)
[04:14:33] *** Quits: revolve (~u0_a227@82-132-245-79.dab.02.net) (Ping timeout: 258 seconds)
[04:15:19] *** Quits: dansan (~daniel@75.81.148.51) (Client Quit)
[04:15:19] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[04:15:36] *** Joins: c10l (~c10l@89.34.167.207)
[04:15:47] *** Joins: dansan (~daniel@75.81.148.51)
[04:16:29] *** Joins: revolve (~u0_a227@82-132-246-132.dab.02.net)
[04:16:55] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:5893:5530:e8e9:98f1) (Quit: WeeChat 3.2)
[04:26:43] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:28:38] *** Joins: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net)
[04:32:40] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[04:33:16] *** Quits: foobaz212 (~foobaz212@32.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[04:35:24] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[04:37:45] *** Quits: independent_ (~independe@185.69.144.230) (Ping timeout: 252 seconds)
[04:40:11] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[04:40:46] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:42:10] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[04:43:35] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[04:44:28] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:04:15] *** Joins: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b)
[05:23:22] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[05:30:43] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[05:30:46] *** Quits: haliucinas (~haliucina@5.20.153.21) (Read error: Connection reset by peer)
[05:31:30] *** Joins: darkapex (~darkapex@user/darkapex)
[05:32:50] *** Quits: LiftLeft (~LiftLeft@191.96.150.140) (Ping timeout: 272 seconds)
[05:36:02] *** Joins: haliucinas (~haliucina@5.20.153.21)
[05:36:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:44:40] *** Joins: califax- (~califax@user/califx)
[05:46:18] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Ping timeout: 240 seconds)
[05:47:41] *** Quits: califax (~califax@user/califx) (Ping timeout: 244 seconds)
[05:47:42] *** califax- is now known as califax
[05:48:07] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[06:00:41] <blinux> I'm and hearing some say that closures are the generics of Go and others saying to use interfaces, and now I'm hearing generics will be added. So, I'm wondering if anyone knows if that will make those other approches no longer optimal?
[06:02:36] *** Quits: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net) (Ping timeout: 272 seconds)
[06:13:52] *** Joins: kiril (~kiril@85.91.153.163)
[06:15:46] <foobaz> blinux: closures, generics, and interfaces all have different use cases, and each is the best solution to its own set of problems
[06:16:06] *** Joins: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca)
[06:16:25] <blinux> Ok, yes
[06:16:36] <foobaz> honestly if you have any experience with these language features you should already know that
[06:18:45] *** Joins: gggp_ (~gggp@123.113.184.133)
[06:20:08] *** Quits: gggp_ (~gggp@123.113.184.133) (Read error: Connection reset by peer)
[06:20:32] *** Joins: gggp_ (~gggp@123.113.184.133)
[06:32:48] *** Quits: smuxki (~smuxki@2804:14d:baa0:85c6:fc50:c13b:aef7:fa2b) (Quit: quit)
[06:34:46] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[06:35:50] *** Joins: darkapex (~darkapex@user/darkapex)
[06:39:31] *** Joins: oxum (~oxum@106.203.221.241)
[06:40:38] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[06:40:49] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[06:44:12] *** Joins: oxum (~oxum@106.203.221.241)
[06:45:13] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[06:47:23] *** Quits: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[06:48:03] *** Joins: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com)
[06:48:28] *** Joins: arahael1 (~arahael@124-150-74-227.tpgi.com.au)
[06:48:46] *** Quits: Arahael (~arahael@14-200-228-14.tpgi.com.au) (Ping timeout: 272 seconds)
[06:51:22] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[06:51:41] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[06:52:36] *** Joins: oxum (~oxum@106.203.221.241)
[06:52:49] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[06:53:37] *** Quits: t0xicCode (~t0xicCode@user/t0xiccode) (Quit: ZNC - https://znc.in)
[06:57:37] *** Joins: t0xicCode (~t0xicCode@user/t0xiccode)
[06:58:05] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[06:58:25] *** Joins: oxum (~oxum@106.203.221.241)
[06:58:45] *** Joins: LiftLeft (~LiftLeft@154.16.192.57)
[07:12:01] *** Quits: JPT (~jpt@classified.name) (Quit: Hoppla!)
[07:13:45] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[07:14:10] *** Joins: oxum (~oxum@106.203.221.241)
[07:14:25] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[07:15:01] *** Joins: oxum (~oxum@106.203.221.241)
[07:16:20] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:19:52] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[07:21:24] *** Joins: JPT (~jpt@classified.name)
[07:22:11] *** Joins: oxum (~oxum@106.203.221.241)
[07:31:45] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a953:dec7:8375:3a9f)
[07:58:53] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:02:55] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[08:14:22] *** Parts: vaillancourtmax (~vaillanco@modemcable251.6-83-70.mc.videotron.ca) ()
[08:17:25] *** Joins: oxum (~oxum@106.203.221.241)
[08:22:34] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[08:35:52] *** Quits: LiftLeft (~LiftLeft@154.16.192.57) (Ping timeout: 272 seconds)
[08:41:44] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[08:47:01] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[08:52:51] *** Quits: alrs_ (alrs@tilde.team) (Remote host closed the connection)
[08:52:58] *** Quits: edgy (egy@tilde.team) (Quit: ZNC 1.8.1 - https://znc.in)
[08:53:03] *** Quits: drwasabi (drwasabi@tilde.team) (Quit: WeeChat 3.1)
[08:58:12] *** Joins: egy (egy@tilde.team)
[09:00:12] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[09:00:49] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[09:02:04] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[09:03:03] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[09:07:23] *** arahael1 is now known as Arahael
[09:13:51] *** Joins: LiftLeft (~LiftLeft@37.19.198.39)
[09:24:02] *** Quits: hgl- (hgl@67.230.181.248.16clouds.com) (Quit: Bye)
[09:24:47] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[09:41:19] *** Joins: Snyp (~rksht@49.207.200.32)
[09:59:41] *** Joins: oxum (~oxum@106.203.221.241)
[10:01:49] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[10:03:22] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[10:03:34] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[10:04:50] *** Quits: LiftLeft (~LiftLeft@37.19.198.39) (Ping timeout: 265 seconds)
[10:05:38] *** Joins: shka (~herr@109.231.62.239)
[10:07:12] *** Joins: oxum (~oxum@106.203.221.241)
[10:07:27] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[10:07:39] *** Joins: oxum (~oxum@106.203.221.241)
[10:10:33] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 276 seconds)
[10:10:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:12:25] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[10:17:26] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[10:24:16] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:26:27] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:38:42] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[10:40:32] *** Quits: ofh (~felix@2001:44b8:30c4:f9:6f0:21ff:fe3c:d4d7) (Ping timeout: 245 seconds)
[10:43:22] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[10:43:37] *** Joins: yelnah (~felix@14-202-3-220.tpgi.com.au)
[10:44:24] *** Quits: revolve (~u0_a227@82-132-246-132.dab.02.net) (Ping timeout: 258 seconds)
[10:45:04] *** Quits: src (~src@user/src) (Ping timeout: 272 seconds)
[10:45:14] *** Joins: mrig (~mrig@user/mrig)
[10:48:07] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[10:48:52] *** Joins: revolve (~u0_a227@82-132-247-114.dab.02.net)
[10:49:23] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:51:36] *** Joins: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de)
[10:53:57] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[10:54:01] *** Joins: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[10:54:03] *** Quits: Snyp (~rksht@49.207.200.32) (Quit: WeeChat 3.2)
[10:55:07] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:7dd6:d4bf:1a58:f4b5)
[10:55:50] *** Quits: yelnah (~felix@14-202-3-220.tpgi.com.au) (Ping timeout: 272 seconds)
[10:56:15] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:7dd6:d4bf:1a58:f4b5) (Client Quit)
[11:03:22] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Quit: WeeChat 3.2)
[11:05:12] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[11:09:01] *** Joins: xsteadfastx (~marv@94.31.100.46)
[11:09:32] *** Joins: snappy (~snappy@user/snappy)
[11:09:42] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[11:10:29] <snappy> Will go with generics make it easier to implement a deep copy of an object? The versions I've seen either use reflect or go encoding/decoding.
[11:11:11] *** Joins: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it)
[11:11:19] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[11:14:25] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[11:15:55] *** Quits: xsteadfastx (~marv@94.31.100.46) (Quit: WeeChat 3.2)
[11:17:37] *** Joins: xsteadfastx (~marv@94.31.100.46)
[11:28:31] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:31:33] *** Joins: sysh (~sysh@212.237.182.120)
[11:34:21] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:35:03] *** Quits: carlavilla (~carlavill@2a0c:5a84:3508:600:221:6bff:fe3b:cee4) (Ping timeout: 276 seconds)
[11:38:45] <b0nn> generics is, under the hood, much like a type switch - which iskind of like a reflect
[11:39:03] <b0nn> so, the answer is.. kind of
[11:39:35] <b0nn> where the generics will take some of the reflection away from you, the developer, but, the reality is that it's still happening
[11:40:54] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[11:41:49] *** Joins: oxum (~oxum@106.203.221.241)
[11:47:08] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[11:48:37] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:52:06] *** Quits: hgl (hgl@67.230.181.248.16clouds.com) (Quit: Bye)
[11:52:19] *** Joins: hgl (hgl@67.230.181.248.16clouds.com)
[11:56:26] *** Joins: oxum (~oxum@106.203.221.241)
[11:58:46] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[12:00:31] *** gggp_ is now known as gggp
[12:04:33] *** Joins: LiftLeft (~LiftLeft@154.16.192.67)
[12:05:04] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:06:33] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[12:07:52] *** Joins: oxum (~oxum@106.203.221.241)
[12:13:06] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[12:14:43] *** Joins: sizeof_void34 (~Thunderbi@109.252.75.112)
[12:15:19] *** Joins: yelnah (~felix@2001:44b8:30c2:d8:6f0:21ff:fe3c:d4d7)
[12:15:21] *** Quits: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 252 seconds)
[12:17:08] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[12:18:06] *** Quits: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de) (Ping timeout: 252 seconds)
[12:25:31] *** Joins: Xjs (~jannis@user/xjs)
[12:26:05] *** Joins: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de)
[12:27:39] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[12:27:42] *** Joins: independent56 (~independe@148.252.129.172)
[12:29:18] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 256 seconds)
[12:31:01] *** Joins: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[12:38:06] *** Quits: Guest90_ (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 276 seconds)
[12:38:35] *** Joins: sa_ (~sa@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7)
[12:39:00] *** Quits: theoceaniscool (~theoceani@119.12.233.178) (Ping timeout: 272 seconds)
[12:39:47] *** Joins: oxum (~oxum@106.203.221.241)
[12:41:11] *** Quits: oxum (~oxum@106.203.221.241) (Remote host closed the connection)
[12:44:55] *** Quits: sa_ (~sa@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7) (Quit: sa_)
[12:45:16] *** Joins: oxum (~oxum@106.203.221.241)
[12:45:19] *** Joins: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7)
[12:45:40] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[12:45:57] *** Quits: LiftLeft (~LiftLeft@154.16.192.67) (Ping timeout: 245 seconds)
[12:46:11] *** Joins: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net)
[12:48:34] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:7dd6:d4bf:1a58:f4b5)
[12:49:37] *** Quits: gggp (~gggp@123.113.184.133) (Read error: Connection reset by peer)
[12:50:14] <nevivurn> b0nn: do you mean that it's doing runtime reflection under the hood? that's unexpected.
[12:51:06] *** Quits: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7) (Quit: enkodr)
[12:51:29] *** Joins: theoceaniscool (~theoceani@119.12.233.178)
[12:51:38] *** Joins: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7)
[12:53:18] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 252 seconds)
[12:53:57] *** Joins: gggp (~gggp@123.113.179.243)
[12:56:41] *** Quits: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7) (Quit: enkodr)
[13:00:58] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[13:01:12] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[13:01:15] *** Joins: enkodr (~sa@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7)
[13:05:17] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:7dd6:d4bf:1a58:f4b5) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[13:07:25] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[13:08:27] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[13:10:26] *** Quits: gggp (~gggp@123.113.179.243) (Read error: Connection reset by peer)
[13:18:10] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:18:23] *** Quits: enkodr (~sa@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7) (Quit: WeeChat 3.2)
[13:18:40] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:18:49] *** Joins: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7)
[13:18:59] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[13:20:34] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[13:25:12] *** Quits: independent56 (~independe@148.252.129.172) (Read error: Connection reset by peer)
[13:25:41] <sztanpet> encoding and decoding? yea, also the fmt package and friends all use reflection currently
[13:28:34] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[13:29:54] *** Joins: independent56 (~independe@148.252.129.172)
[13:33:22] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Ping timeout: 240 seconds)
[13:34:10] *** Joins: fossdd (~fossdd@sourcehut/user/fossdd)
[13:34:38] *** Joins: sshow_ (~sshow@host004.hackeriet.no)
[13:35:20] *** Joins: gggp (~gggp@123.113.179.243)
[13:35:59] *** Quits: sshow_ (~sshow@host004.hackeriet.no) (Client Quit)
[13:36:31] *** Quits: gggp (~gggp@123.113.179.243) (Read error: Connection reset by peer)
[13:43:35] *** Joins: Guest4629 (~hentai@firmware.endpoint.users.absolutely.mooo.com)
[13:43:36] *** Quits: Guest4629 (~hentai@firmware.endpoint.users.absolutely.mooo.com) (Changing host)
[13:43:36] *** Joins: Guest4629 (~hentai@user/hentai)
[13:43:52] <nevivurn> I meant generics
[13:45:04] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[13:45:52] *** Quits: fossdd (~fossdd@sourcehut/user/fossdd) (Remote host closed the connection)
[13:46:10] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:46:25] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[13:46:27] *** Joins: mickey (~user@user/mickey)
[13:46:39] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[13:46:50] *** Quits: hentai (~hentai@user/hentai) (Ping timeout: 272 seconds)
[13:50:36] *** Joins: mei (~mei@user/mei)
[13:51:52] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[13:56:54] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[13:59:36] <b0nn> nevivurn: If you pass a function an object of some type, and the runtime doesn't know what that type is in advance, it has to do some sort of calculation on what that type is, and how to treat it
[14:00:39] <b0nn> Generics says, at compile time, this is the list of types a function will accept, but, under the hood what it's doing is compiling multiple functions, one for each type that it supports
[14:01:12] <b0nn> And at runtime it determines which of those functions to use based on the type it has been given (which it has to calculate)
[14:02:26] <b0nn> The only other way to do it is for every call of a function, the type has to be known, so that the call is to the correct version of the function
[14:04:01] <sztanpet> the expectations is for generics to not have a performance difference as opposed to writing the same functionality without using generics, reflection would make it slower
[14:05:33] <b0nn> There's going to be a perf difference, and a binary size difference
[14:06:43] *** Joins: oxum (~oxum@106.203.221.241)
[14:12:08] <b0nn> Although, if Go spent more time compiling, there'd be room for optimisations made in the runtime that would negate the perf hit (and, in fact, improve th runtime performance of Go in general), however that idea has been against RSC' and Pike's ethos and hopes for Go
[14:12:10] *** Quits: oxum (~oxum@106.203.221.241) (Ping timeout: 272 seconds)
[14:12:31] *** Joins: jespada (~jespada@90.254.247.46)
[14:13:26] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Quit: Client closed)
[14:13:41] *** Joins: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net)
[14:14:01] * b0nn pines for an optimising compiler to be bolted onto Go's compiler such that, like Rust, there's a fast "debug" build, and a longer to compile, but faster to run "prod" build (IIRC gcc has levels of optimisation when compiling)
[14:14:42] *** Quits: mei (~mei@user/mei) (Ping timeout: 272 seconds)
[14:19:46] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 272 seconds)
[14:20:18] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Ping timeout: 240 seconds)
[14:22:11] *** Joins: gggp (~gggp@60.10.194.46)
[14:22:19] *** Quits: foobaz212 (~foobaz212@51.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[14:22:41] *** Joins: Xjs (~jannis@user/xjs)
[14:25:09] *** Quits: Guest90 (~textual@119-18-1-87.771201.syd.nbn.aussiebb.net) (Ping timeout: 252 seconds)
[14:31:32] *** Quits: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[14:33:26] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[14:36:03] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[14:36:21] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:36:32] *** Joins: darkapex (~darkapex@user/darkapex)
[14:37:06] *** Joins: gggp_ (~gggp@123.113.185.191)
[14:40:20] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 265 seconds)
[14:40:52] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[14:45:53] <A_Dragon> nevivurn: "runtime reflection under the hood" is essentially how the entire stdlib works :P
[14:46:04] <A_Dragon> fmt does it, json definitely does it, xml does, csv
[14:46:36] <A_Dragon> b0nn: gccgo -O3 and just the standard compiler didnt have any real speedups for me IIRC
[14:47:07] <b0nn> There are (I looked it up) at least 8 levels, 9 if you count the OSX variant
[14:47:26] <A_Dragon> as I understand it 3 is the "here be dragons" starting point
[14:47:43] <A_Dragon> after that it might just break something or sit and remove your while true loops and such
[14:47:50] <b0nn> https://stackoverflow.com/questions/1778538/how-many-gcc-optimization-levels-are-there
[14:48:37] <A_Dragon> lol size optimisation wont happen for go, we statically compile everything :D
[14:48:57] *** Joins: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[14:49:23] <b0nn> I want speed optimising compilation options (static linking is what attracts me to Go)
[14:49:49] <A_Dragon> the compiler does currently do some
[14:50:10] <A_Dragon> there are fastpaths for stuff like copy(someByteSlice, someString) and so on
[14:50:15] <b0nn> Jesus, you're serious?
[14:50:28] <A_Dragon> hmm?
[14:50:28] <b0nn> I want multiple passes
[14:50:35] <A_Dragon> ¯\_(ツ)_/¯
[14:50:37] <A_Dragon> make an issue :P
[14:50:44] <b0nn> I have a better idea
[14:51:17] *** Joins: nfx (~nfx@2a02:a210:2042:1200:9eb6:d0ff:fef4:1cf7)
[14:51:34] <b0nn> Once I finish reading this book (Making an Interpreter), then the companion compiler, then a book on creating optimising compilers I shall start a  side project
[14:51:51] <b0nn> When I say better, it's not yet optimised though ;)
[14:52:29] *** Joins: independent_ (~independe@148.252.129.172)
[14:53:11] *** Quits: independent56 (~independe@148.252.129.172) (Ping timeout: 258 seconds)
[14:53:18] *** Quits: nfx (~nfx@2a02:a210:2042:1200:9eb6:d0ff:fef4:1cf7) (Quit: Client closed)
[14:53:24] *** Joins: gebn (~george@user/gebn)
[14:54:11] <A_Dragon> lol
[14:54:29] <A_Dragon> I honestly have no idea how optimizing compilers work
[14:54:35] <A_Dragon> black magic and pattern recog, I guess
[14:54:52] *** Joins: ph8 (~ph8|3@user/ph8)
[14:54:58] <A_Dragon> and reducing things, to faster, simpler components, and then passing over those to reduce further, and so on
[14:54:59] <b0nn> I'll let you know once i have read the three books
[14:55:04] <A_Dragon> lol
[14:55:23] <ph8> Hi everyone! I've written a bit of Go in my time and very much enjoy it. As a result of that I've had a project foisted upon me and I'm hoping for a little assistance
[14:55:36] <A_Dragon> oh?
[14:55:48] <A_Dragon> (or alternatively, whats your question? :D)
[14:55:59] <b0nn> I started the interpreter book in Feb, had to put it aside because stuff, then read some more in June, but then had to stop again, and am close to reading a bit more
[14:56:00] <ph8> I've got an old Go project that doesn't compile anymore, it would appear a dependency's dependency has been renamed, i'll paste the error in a second. Upgrading is hard, but something I plan to do, it would be really handy for a number of reasons to have the old one compiling though - can anyone see a way to get around this build error?:
[14:56:06] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:56:39] <b0nn> vendoring
[14:56:44] <A_Dragon> ^
[14:57:12] <ph8> go get: github.com/codegangsta/cli@none updating to
[14:57:13] <ph8> 	github.com/codegangsta/cli@v1.22.5: parsing go.mod:
[14:57:13] <ph8> 	module declares its path as: github.com/urfave/cli
[14:57:13] <ph8> 	        but was required as: github.com/codegangsta/cli
[14:57:30] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Client Quit)
[14:57:41] <A_Dragon> is this a dep of a dep or just a dep?
[14:57:44] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:57:47] <b0nn> modules strikes again
[14:57:50] <ph8> So the project's old enough to be using Glide
[14:58:05] <ph8> and this isn't mentioned in the `glide.yaml`
[14:58:19] <ph8> or the `glide.lock`
[14:58:23] <A_Dragon> go.mod ?
[14:58:37] <ph8> There's no go.mod in the project, although it would appear some of the deps have a go.mod
[14:58:47] <A_Dragon> must be one of theirs
[14:58:53] <A_Dragon> create a go.mod for the project?
[14:59:05] <ph8> do you think maybe i need to fix versions for deps that don't have fixed versions in the glide.yaml? Fixing them to an old version?
[14:59:29] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Client Quit)
[14:59:30] <ph8> @A_Dragon, is that likely to be as simple as `go mod init` -> profit? :-D
[14:59:43] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[14:59:44] <A_Dragon> `go mod init your.package.path`
[14:59:51] <A_Dragon> followed by `go mod tidy` to fetch deps
[15:00:11] <b0nn> he'll be on $GOPATH so go mod init is enough
[15:01:00] <ph8> oo it copied things from glide.lock, smart
[15:01:28] <A_Dragon> doubt it copied, I dont remember if it does or not when migrating
[15:01:33] <A_Dragon> but either way, thats a start
[15:01:36] <A_Dragon> see if it compiles now
[15:01:37] <ph8> it said `go: copying requirements from glide.lock
[15:01:37] <ph8> `
[15:01:41] <A_Dragon> ah okay
[15:01:44] <A_Dragon> still run a tidy
[15:01:54] <b0nn> no sh*t :o
[15:01:54] <ph8> go: warning: "all" matched no packages
[15:02:10] <A_Dragon> you have an import called all?
[15:02:49] <ph8> It's an old copy of postgres-operator - so I only know what I've read so far ;-) This is great that you think this is the right direction to go in though, I'll have a try at following this through
[15:03:18] <A_Dragon> essentially the way I'd go about this get the existing version up to a module level
[15:03:25] <A_Dragon> then use a replace directive to get it compiling
[15:03:33] <A_Dragon> and possibly use vendoring if needed
[15:04:03] <ph8> Many thanks
[15:06:28] <ph8> The release I'm on is one major version before postgres-operator added go.mod themselves, so i've pinched the go.mod and build scripts from the next major release and am trying to work back from there :-)
[15:06:45] <A_Dragon> good luck
[15:16:53] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[15:18:26] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[15:20:28] *** Joins: c10l (~c10l@89.34.167.207)
[15:22:08] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 256 seconds)
[15:27:45] *** Quits: enkodr (~enkodr@2001:818:e6b1:d100:61c2:387c:d0d4:4fb7) (Remote host closed the connection)
[15:27:54] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[15:29:49] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[15:30:00] *** Quits: gggp_ (~gggp@123.113.185.191) (Read error: Connection reset by peer)
[15:35:05] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[15:35:21] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[15:40:56] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[15:41:01] *** Joins: gggp (~gggp@60.10.23.170)
[15:41:10] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[15:42:07] *** Joins: gggp_ (~gggp@123.113.179.243)
[15:42:16] *** Joins: whaley (~whaley@066-169-090-170.res.spectrum.com)
[15:45:42] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[15:52:13] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[15:52:33] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[16:19:08] *** Joins: gggp__ (~gggp@60.10.23.170)
[16:22:38] *** Quits: gggp_ (~gggp@123.113.179.243) (Ping timeout: 272 seconds)
[16:23:11] *** Joins: simoneb (~simone@user/simoneb)
[16:23:46] *** Joins: gggp (~gggp@123.113.188.14)
[16:24:08] *** Quits: ph8 (~ph8|3@user/ph8) (Quit: Leaving)
[16:25:12] <simoneb> can anybody point me to an example of error handling, e.g. os.stat() returns a PathError according to docs, how do I check if the error is "file not found", as opposed to something else?
[16:26:10] *** Quits: gggp__ (~gggp@60.10.23.170) (Ping timeout: 256 seconds)
[16:26:42] *** Joins: Ergo^ (~ergo@91.238.59.144)
[16:27:26] <simoneb> I've searched with google but all examples I've found only check if error is != nil and not much else?
[16:28:22] *** Joins: LiftLeft (~LiftLeft@37.19.198.36)
[16:29:15] *** Quits: independent_ (~independe@148.252.129.172) (Remote host closed the connection)
[16:29:24] <shiroyasha> simoneb: os.IsNotExist
[16:29:34] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[16:29:40] *** Joins: independent_ (~independe@148.252.129.172)
[16:29:48] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[16:36:06] *** Joins: oxum (~oxum@136.185.158.73)
[16:36:16] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[16:36:40] <fizzie> simoneb:  The example for Errors.Is happens to be specifically for "file does not exist": https://pkg.go.dev/errors#example-Is
[16:36:54] <fizzie> s/Errors/errors/
[16:36:58] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[16:38:59] <fizzie> (The os.IsNotExist function "predates errors.Is. It only supports errors returned by the os package. New code should use errors.Is(err, os.ErrNotExist)." Except that's arguably out of date as well, since os.ErrNotExist is now just an alias for fs.ErrNotExist.)
[16:41:38] *** Quits: oxum (~oxum@136.185.158.73) (Ping timeout: 272 seconds)
[16:46:07] *** Joins: gggp_ (~gggp@60.10.194.46)
[16:48:20] <A_Dragon> just, please ensure that you dont !errors.Is(os.NotExist ...)
[16:48:28] <A_Dragon> trap for new people, that doesnt do what you expect it does
[16:49:52] *** Quits: gggp (~gggp@123.113.188.14) (Ping timeout: 272 seconds)
[16:51:45] *** Joins: frost (~frost@59.71.241.179)
[16:53:24] *** Joins: Torr (~Torr@user/torr)
[16:53:58] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[16:54:12] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[16:54:49] *** Joins: holgersson (~quassel@user/holgersson)
[16:54:55] *** Quits: holgersson (~quassel@user/holgersson) (Client Quit)
[16:56:01] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.2)
[16:56:38] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[16:57:07] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 265 seconds)
[16:58:12] *** Joins: holgersson (~quassel@user/holgersson)
[16:59:28] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[16:59:34] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:06:28] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[17:06:52] <shiroyasha> fizzie: Huh, TIL `errors.Is` deprecates those functions, but makes sense in retrospect.
[17:10:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:10:49] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[17:14:16] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[17:14:33] *** Quits: revolve (~u0_a227@82-132-247-114.dab.02.net) (Ping timeout: 252 seconds)
[17:16:21] *** Quits: gggp_ (~gggp@60.10.194.46) (Read error: Connection reset by peer)
[17:16:24] *** Joins: revolve (~u0_a227@82-132-247-153.dab.02.net)
[17:17:19] <bookworm> A_Dragon: does exactly what's on the tin, not sure how you'd consider that a trap to be honest.
[17:17:33] <A_Dragon> bookworm: it does exactly what it should
[17:17:55] <A_Dragon> however `!errors.Is(os.NotExist` != the file exists
[17:18:27] <bookworm> no it's a different error then (you should still check for null)
[17:18:32] *** Joins: gggp (~gggp@60.10.23.170)
[17:18:35] <A_Dragon> exactly.
[17:18:50] <bookworm> I just consider that an easy mistake to make is all
[17:18:56] <bookworm> not*
[17:19:08] <A_Dragon> so, we;'re arguing the same point :D
[17:20:00] *** Quits: independent_ (~independe@148.252.129.172) (Ping timeout: 258 seconds)
[17:20:21] *** Joins: yoonkn (~user@175.197.208.79)
[17:21:24] *** Joins: independent_ (~independe@148.252.129.172)
[17:22:18] *** Quits: LiftLeft (~LiftLeft@37.19.198.36) (Ping timeout: 258 seconds)
[17:24:38] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[17:24:42] *** Joins: oxum (~oxum@122.172.39.197)
[17:24:52] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[17:25:09] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[17:26:16] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:27:39] *** Joins: gggp_ (~gggp@123.113.188.14)
[17:29:46] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 272 seconds)
[17:30:03] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-7.dsl.bell.ca)
[17:30:16] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[17:30:44] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[17:35:09] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[17:35:21] *** Quits: gggp_ (~gggp@123.113.188.14) (Read error: Connection reset by peer)
[17:35:44] *** Joins: gggp_ (~gggp@60.10.23.170)
[17:36:36] *** Quits: Kaivo (~Kaivo@user/kaivo) (Remote host closed the connection)
[17:37:22] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[17:37:41] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[17:37:45] *** Quits: independent_ (~independe@148.252.129.172) (Ping timeout: 276 seconds)
[17:39:03] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[17:43:06] *** Joins: Kaivo (~Kaivo@user/kaivo)
[17:43:53] <simoneb> so to my understanding, there isn't a simple construct to check if a certain error is of a certain type (with the possible exception of `switch x.(type)`). For example in Python I would create subclasses of the generic Error class, and then use try/catch or check for the class type. In Golang I believe my best approach would be to define integer constants (e.g. const condition1, const condition2 etc) and then return one of these values, or maybe define an en
[17:45:00] <simoneb> *for functions I'm writing myself, obviously
[17:45:36] *** Joins: Torr_ (~Torr@user/torr)
[17:45:36] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 272 seconds)
[17:46:22] *** Joins: vsantana (~Thunderbi@fttx-177136148172.usr.predialnet.com.br)
[17:47:07] *** Joins: independent_ (~independe@148.252.129.172)
[17:49:08] <fizzie> No, you should use `errors.Is`.
[17:49:39] <fizzie> https://blog.golang.org/go1.13-errors
[17:50:11] <bpalmer> or errors.As
[17:50:17] *** Quits: frost (~frost@59.71.241.179) (Quit: Ping timeout (120 seconds))
[17:51:44] *** Quits: independent_ (~independe@148.252.129.172) (Read error: Connection reset by peer)
[17:51:47] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[17:51:47] <fizzie> Or that. In particular, that's the recommended practice over comparing (with ==) against *specific* `error` variables/constants exported by a package, because that convention does not allow the package to include extra context.
[17:52:01] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[17:52:43] *** Joins: src (~src@user/src)
[17:53:07] *** Joins: independent_ (~independe@148.252.129.172)
[17:58:58] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[17:59:33] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[18:02:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 244 seconds)
[18:06:28] *** Joins: frost (~frost@59.71.241.179)
[18:06:30] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[18:10:23] *** Quits: frost (~frost@59.71.241.179) (Client Quit)
[18:10:26] *** Joins: nyah (~nyah@90.221.186.180)
[18:14:44] *** Quits: independent_ (~independe@148.252.129.172) (Ping timeout: 272 seconds)
[18:16:20] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[18:16:34] *** Joins: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net)
[18:16:58] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:18:01] <rbn> one might argue that your functions shouldn't return a very diverse set of errors. if there are many different ones, the function might be to big :)
[18:18:48] *** Joins: independent56 (~independe@148.252.129.172)
[18:20:29] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Client Quit)
[18:20:34] *** Quits: whaley (~whaley@066-169-090-170.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:21:36] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:23:03] <nevivurn> A_Dragon: re: stdlib being runtime reflection, yes, but this is the language itself having runtime reflection
[18:23:08] *** Joins: independent_ (~independe@148.252.129.172)
[18:23:33] <nevivurn> I feel like that would be at a similar level as if append() was doing reflection underneath.
[18:23:55] <A_Dragon> append doesn't
[18:23:58] <A_Dragon> thats compiletime
[18:24:00] <A_Dragon> so is make
[18:24:02] <nevivurn> yeah, that's my point.
[18:24:03] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[18:24:22] <A_Dragon> as for generics, I'm not entirely sure which path they're taking
[18:24:36] <A_Dragon> the path of a glorified type switch is the smallest codewise but not the fastest
[18:24:47] *** Quits: independent56 (~independe@148.252.129.172) (Ping timeout: 258 seconds)
[18:24:48] <nevivurn> Yeah, I skimmed the proposal doc, but not much on specifics on implementation. I guess we'll see once 1.18 rolls around
[18:24:57] <A_Dragon> code generation is an option, but its slow compiletime wise and bloats binaries
[18:24:59] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:a953:dec7:8375:3a9f) (Quit: WeeChat 3.2)
[18:25:07] <A_Dragon> yeah I believe the actual internal impl isn't decided as of yet
[18:25:14] <A_Dragon> it definitely was not decided in there
[18:25:29] <A_Dragon> I would prefer to not use runtime reflection or codegen if possible
[18:25:36] <A_Dragon> but I don't think theres a simple option otherwise
[18:26:52] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Ping timeout: 256 seconds)
[18:27:13] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[18:29:26] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:31:17] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[18:36:04] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[18:38:50] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:38:58] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[18:41:51] <eric_hill> I'm trying to line up a Javascript ed25519 signature verification against sigs built with Go.  ed25519.GenerateKey produces a 32 bit public key and a 64 bit private key.  The JS library I'm using complains that the private key should be 32 bits.  Which one is right?
[18:43:11] *** Joins: khyr0n_ (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297)
[18:44:30] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297) (Ping timeout: 268 seconds)
[18:44:46] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297) (Read error: Connection reset by peer)
[18:45:00] *** Joins: khyr0n_ (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297)
[18:46:04] *** Joins: vsantana1 (~Thunderbi@2804:214:829f:90cb:e099:bfb1:282a:3746)
[18:46:45] *** Joins: oxum (~oxum@122.172.39.197)
[18:47:30] <eric_hill> *byte
[18:48:18] *** Quits: vsantana (~Thunderbi@fttx-177136148172.usr.predialnet.com.br) (Ping timeout: 272 seconds)
[18:48:19] *** vsantana1 is now known as vsantana
[18:50:59] *** gggp_ is now known as gggp
[18:51:08] <gggp> Does go not need generics
[18:51:09] <f8l12> eric_hill, the doc says "However, unlike RFC 8032's formulation, this package's private key representation includes a public key suffix to make multiple signing operations with the same key more efficient."
[18:52:06] <eric_hill> f8l12: argh, that's probably it.  Thanks, missed that line in the docs.
[18:52:06] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 272 seconds)
[18:53:33] <f8l12> you might be able to just do privateKey[:32]
[18:55:06] <siXy> Much safer to use the priv.Seed() method
[18:55:38] *** Quits: independent_ (~independe@148.252.129.172) (Ping timeout: 252 seconds)
[18:55:56] *** Quits: nyah (~nyah@90.221.186.180) (Quit: leaving)
[18:56:01] <siXy> (but the result should be identical, it's just less prone to fat-fingering or confusing people)
[18:57:45] *** Joins: vsantana1 (~Thunderbi@fttx-177136148221.usr.predialnet.com.br)
[18:57:53] *** Quits: sysh (~sysh@212.237.182.120) (Ping timeout: 250 seconds)
[19:00:07] *** Quits: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de) (Read error: Connection reset by peer)
[19:00:29] *** Joins: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de)
[19:01:21] *** Quits: vsantana (~Thunderbi@2804:214:829f:90cb:e099:bfb1:282a:3746) (Ping timeout: 250 seconds)
[19:01:21] *** vsantana1 is now known as vsantana
[19:01:35] *** Joins: enkodr (~Srain@210.203.60.94.rev.vodafone.pt)
[19:05:03] <f8l12> ah, missed that siXy
[19:07:08] *** Quits: hikhvar79607380 (~thelounge@dynamic-077-012-120-007.77.12.pool.telefonica.de) (Ping timeout: 265 seconds)
[19:07:16] <eric_hill> thanks to both of you.  Seed() does indeed give me the bits I'm looking for.  Now to go argue with Javascript.  Eww.
[19:12:48] *** Joins: arcatech (~arcatech@user/arcatech)
[19:13:23] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:13:42] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[19:29:00] <iivvoo> I just noticed someone is using `this` for all their receiver names, e.g. `func (this *command) Foo() { this.that }` - I find it rather weird. How is this generally looked at?
[19:29:13] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[19:29:47] <sztanpet> it simply signifies that the user is coming from a different language and wants to shoehorn in the idiom
[19:31:06] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[19:32:21] <sztanpet> go has a different naming scheme, not adhering to it is not "evil", this as a variable name is not special and yes, its weird, it just says you dont care about the naming conventions
[19:32:35] *** Joins: thing (~thing@user/thing)
[19:33:37] <sztanpet> see https://github.com/golang/go/wiki/CodeReviewComments#receiver-names
[19:34:55] *** Joins: oxum (~oxum@122.172.39.197)
[19:35:05] <iivvoo> oh, that's a useful reference, thanks. Yeah this person seems to know a lot of languages and I can only judge theur python and golang skills, and they don't look very pythonic-golang...ic?
[19:35:15] <siXy> It's a bit of a warning sign though. We get a lot of folks in here absolutely determined to try write go as if it were java, javascript, etc and their code is always terrible.
[19:35:41] <iivvoo> exactly and I'm looking for those warning sign and this specific one caught my eye
[19:36:16] <iivvoo> just like a bare try: .. except: .. in python would
[19:40:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:40:58] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 240 seconds)
[19:41:43] <f8l12> say i initialize a db object in TestMain, how would you go passing it to the other tests?
[19:42:37] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[19:42:51] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[19:44:18] <siXy> f8l12: for this specific case, a global in the test package is probably good enough
[19:45:03] <f8l12> alright
[19:45:07] <f8l12> thanks
[19:46:10] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:48:10] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[19:48:18] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[19:52:23] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:53:44] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[19:57:39] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[19:58:22] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[19:59:43] <simoneb> even "this" is a little unpythonic, it is common practice to use "self" afaik
[20:01:09] *** Joins: gggp_ (~gggp@111.193.85.86)
[20:04:04] *** Quits: gggp (~gggp@60.10.23.170) (Ping timeout: 258 seconds)
[20:04:09] *** Joins: gggp__ (~gggp@123.113.188.14)
[20:05:40] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[20:07:15] <iivvoo> yeah sure, you're mixing two things now. Using anything other than self to reference the current instance in python is just weird
[20:07:30] <iivvoo> and, as I understand now, so is using "this" (or self, for that matter) in golang
[20:07:33] *** Quits: gggp_ (~gggp@111.193.85.86) (Ping timeout: 265 seconds)
[20:10:23] *** Quits: dante443 (~dante443@99-88-166-99.lightspeed.milwwi.sbcglobal.net) (Ping timeout: 255 seconds)
[20:16:04] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[20:16:20] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[20:16:34] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[20:17:45] *** Joins: solar_sea (~solar_sea@user/solar-sea/x-3088627)
[20:17:49] <tuskkk____> Anyone knows good resources where you can pair up with mentors? (around programming, oss, software engineering)
[20:18:40] *** Joins: mei (~mei@user/mei)
[20:19:50] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:20:08] *** Joins: mickey (~user@user/mickey)
[20:21:46] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[20:22:02] *** Joins: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[20:23:18] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[20:23:55] *** Quits: mei (~mei@user/mei) (Quit: mei)
[20:27:33] <icy> tuskkk____: have you tried exercism.io?
[20:29:10] <icy> i'm doing a ParseGlob() over a bunch of html templates, and when i try executing against one, i see: template: no template "templates/foo.html" associated with template "bar.html". what does this mean?
[20:30:37] <Tv_> icy: the bar.html template is trying to call a template by that name, which wasn't found
[20:32:05] <icy> Tv_: that's odd. there's no reference to any template at all.
[20:32:16] <Tv_> i doubt that a computer invented that on its own
[20:33:01] <icy> lol
[20:33:41] *** Quits: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it) (Remote host closed the connection)
[20:33:52] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[20:34:48] <icy> this is baffling.
[20:44:12] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[20:44:58] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[20:51:10] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[20:52:42] *** Quits: stmuk__ (~steve@15.43.187.81.in-addr.arpa) (Quit: WeeChat 2.9)
[20:53:16] <eric_hill> could be worse. Been trying to figure out why a boolean is always true in js. Turns out it's a promise. Man I hate js.
[20:53:22] <icy> ahh figured it out. so ParseGlob returns a template with the base name. i was passing the full path of the template file in t.ExecuteTemplate().
[20:53:44] <icy> eric_hill: lol
[20:55:12] <bpalmer> I'm surprised a promise is assumed to be true.
[20:55:39] *** Quits: vsantana (~Thunderbi@fttx-177136148221.usr.predialnet.com.br) (Ping timeout: 252 seconds)
[20:55:49] <eric_hill> let valid = someCallThatReturnsAPromise(); if (valid) is always true, because the promise is THERE.
[20:55:58] <ikke> bpalmer: probably an object that coerces to true
[20:56:00] <eric_hill> Lack of type safety.
[20:56:19] <eric_hill> if (valid) should say, hey dummy, this isn't a boolean.
[20:56:26] <f8l12> const valid = await someCallThatReturnsAPromise()
[20:56:42] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 240 seconds)
[20:57:01] <eric_hill> await only works in async functions.  someCallThatReturnsAPromise().then(function(valid) { ... });
[20:57:07] <f8l12> yeah
[20:57:10] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297) (Quit: Leaving)
[20:57:13] <Tv_> bpalmer: on the average, everything is true in javascript
[20:57:22] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:ecb1:1979:68d6:902:2297)
[20:57:22] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:57:34] <Tv_> non-true things are only the few specific values
[20:57:44] <eric_hill> js == evil.  I'm still eagerly awaiting WASI/WASM yummy goodness so I can avoid js and go native Go
[20:57:57] <Tv_> eric_hill: fwiw i'm writing rust and building wasm...
[20:58:24] <Tv_> the resulting wasm gotten that way, so far, has been *tiny*
[20:59:31] <eric_hill> Go wasm is comparatively HUGE.  TinyGo isn't bad, but far less functional.  Can you do rust restful calls inside wasm?
[21:00:40] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 272 seconds)
[21:00:44] <Tv_> eric_hill: you mean make outgoing http requests? they wrap the browser fetch api, like every wasm thing ever
[21:01:15] <Tv_> (my primary experiment is 100% websockets at that level, so i don't remember details of regular requests)
[21:03:36] <eric_hill> figures.  Still waiting on wasi.  They need to push that down the road.
[21:04:47] *** Joins: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net)
[21:06:34] *** Joins: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255)
[21:08:40] <Tv_> i mean, for browser use, there's fundamentally no alternative than wrapping the browser APIs, WASI just means they're "dummy syscalls" instead of "call this javascript function for me", standardizing what the invoker of the wasm module looks like
[21:09:07] <Tv_> from the point of view of the application code built to run inside the wasm sandbox, i doubt anything changes
[21:09:37] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 258 seconds)
[21:09:37] <Tv_> that is, there exists a higher-level wrapper anyway
[21:12:13] *** Joins: oxum (~oxum@122.172.39.197)
[21:17:46] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 272 seconds)
[21:21:35] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[21:24:09] *** Joins: mei (~mei@user/mei)
[21:30:56] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[21:31:16] *** Joins: mickey (~user@user/mickey)
[21:32:56] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[21:34:13] *** Joins: y04nn (~y04nn@91.193.4.154)
[21:34:53] *** Joins: independent_ (~independe@85.255.234.93)
[21:35:56] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[21:38:30] *** gggp__ is now known as gggp
[21:38:33] <gggp> different package must be in diff folder .right?
[21:39:42] <ikke> yes
[21:39:54] <ikke> each file in the same dir must have the same package name
[21:41:42] <gggp> 1
[21:42:35] <gggp> go is smart
[21:45:22] *** Joins: oxum (~oxum@122.172.39.197)
[21:46:21] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[21:46:36] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[21:48:32] *** Joins: xsteadfastx (~marv@94.31.100.46)
[21:49:46] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 240 seconds)
[21:50:01] *** Quits: independent_ (~independe@85.255.234.93) (Ping timeout: 265 seconds)
[21:52:52] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:53:37] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:54:37] *** Joins: independent_ (~independe@85.255.234.93)
[21:55:37] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[21:55:39] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Read error: No route to host)
[21:57:33] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[22:15:36] *** Quits: independent_ (~independe@85.255.234.93) (Remote host closed the connection)
[22:15:39] *** Joins: independent__ (~independe@85.255.234.93)
[22:24:15] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[22:24:55] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[22:25:07] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[22:25:46] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 240 seconds)
[22:25:49] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:25:51] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[22:28:50] <fizzie> ...except for tests, where there's sometime a convention to use a separate package name for `_test.go` files, so that you're testing the externally visible interface without access to package internals.
[22:29:31] <fizzie> ...and except when you're building Go code with something like Bazel, in which case packages are defined by explicit build targets rather than implicitly via directories.
[22:32:50] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[22:35:05] <Tv_> the latter is just that bazel doesn't use `go build` (afaik), but the lower-level `go tool compile` etc
[22:35:18] <Tv_> if you don't use $FOO, behavior of $FOO does not apply
[22:36:03] *** Joins: oxum (~oxum@122.172.39.197)
[22:36:29] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[22:39:43] <fizzie> Well, sure, but `go build` wasn't explicitly mentioned in the original question either.
[22:40:44] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 272 seconds)
[22:43:46] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[22:46:26] *** Quits: independent__ (~independe@85.255.234.93) (Ping timeout: 272 seconds)
[22:49:14] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[22:49:28] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[22:49:54] *** Quits: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255) (Ping timeout: 240 seconds)
[22:51:15] *** Joins: oxum (~oxum@122.172.39.197)
[22:51:55] *** Joins: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255)
[22:54:47] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:d9b1:b39d:bc79:20f8)
[22:55:48] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 258 seconds)
[22:55:53] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:d9b1:b39d:bc79:20f8) (Client Quit)
[22:56:36] *** Quits: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255) (Ping timeout: 256 seconds)
[22:58:28] *** Quits: gggp (~gggp@123.113.188.14) (Ping timeout: 272 seconds)
[22:58:49] *** Quits: sizeof_void34 (~Thunderbi@109.252.75.112) (Quit: sizeof_void34)
[23:01:33] *** Joins: independent__ (~independe@85.255.234.93)
[23:10:18] *** Quits: independent__ (~independe@85.255.234.93) (Ping timeout: 240 seconds)
[23:11:39] *** Joins: independent__ (~independe@85.255.234.93)
[23:14:27] *** Joins: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255)
[23:14:45] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Quit: Client closed)
[23:14:58] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[23:15:58] *** Joins: oxum (~oxum@122.172.39.197)
[23:20:29] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[23:20:40] *** Joins: independent_ (~independe@85.255.234.93)
[23:20:48] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[23:20:51] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 252 seconds)
[23:22:22] *** Quits: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net) (Ping timeout: 246 seconds)
[23:23:03] *** Quits: independent__ (~independe@85.255.234.93) (Ping timeout: 252 seconds)
[23:24:10] *** Joins: independent__ (~independe@85.255.234.93)
[23:26:59] *** Quits: independent_ (~independe@85.255.234.93) (Ping timeout: 250 seconds)
[23:29:09] *** Joins: foobaz212 (~foobaz212@11.188.159.143.dyn.plus.net)
[23:32:02] *** Quits: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255) (Ping timeout: 272 seconds)
[23:38:22] *** Quits: y04nn (~y04nn@91.193.4.154) (Ping timeout: 272 seconds)
[23:41:21] *** Quits: c10l (~c10l@89.34.167.207) (Quit: Ping timeout (120 seconds))
[23:41:37] *** Joins: c10l (~c10l@89.34.167.207)
[23:42:23] <foobaz> on friday i discussed an idea i had for CSRF protection
[23:42:37] <foobaz> i wrote the code to implement my idea, if anyone is interested it's at https://github.com/foobaz/csrf
[23:43:26] *** Joins: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255)
[23:44:28] *** Quits: revolve (~u0_a227@82-132-247-153.dab.02.net) (Read error: Connection reset by peer)
[23:46:24] *** Joins: revolve (~u0_a227@82-132-247-46.dab.02.net)
[23:49:08] *** Quits: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255) (Ping timeout: 272 seconds)
[23:49:24] *** Quits: independent__ (~independe@85.255.234.93) (Ping timeout: 265 seconds)
[23:49:46] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 272 seconds)
[23:50:23] *** Joins: c10l (~c10l@89.34.167.207)
[23:51:08] *** Joins: v0lta (~dkmueller@2a01:c23:c5d2:1900:a01f:5215:ecd9:b255)
[23:53:09] *** Joins: independent__ (~independe@85.255.234.93)
[23:54:23] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[23:54:35] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[23:58:01] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:29ac:7035:9d99:95e9) (Ping timeout: 272 seconds)
