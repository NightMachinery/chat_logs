[00:00:18] <FromDiscord> <Rika> In reply to @tk "So the zero-functional thing": you can semi-safely assume libraries conform to semver
[00:00:27] <FromDiscord> <Rika> but that's kinda a whole can o worms so
[00:06:06] <FromDiscord> <IsaacPaul> In reply to @Rika "toSeq reads the whole": I assumed map, fold, ect all took and outputted an iterator xD
[00:06:23] <FromDiscord> <IsaacPaul> which honestly makes the most sense to me
[00:07:48] <tk> I wonder what it would take to create a non-template-based lazy "pipe" library or something
[00:08:09] <FromDiscord> <IsaacPaul> https://github.com/def-/nim-iterutils like this?
[00:09:05] <tk> I guess
[00:09:10] <tk> I think this looks about right
[00:09:35] <FromDiscord> <Rika> In reply to @IsaacPaul "I assumed map, fold,": it could make sense yes
[00:09:56] <FromDiscord> <Rika> In reply to @tk "I wonder what it": you can make your own by returning closure iterators
[00:10:09] <FromDiscord> <Rika> theyre p.much ad hoc laziness
[00:10:26] <FromDiscord> <Rika> like, thunks are basically single-yield closure iterators
[00:11:05] <tk> thunks?
[00:11:13] <FromDiscord> <Rika> uh
[00:11:15] <FromDiscord> <Rika> lazy values
[00:11:25] <tk> I didn't realise you could return iterators, or that they could be closures
[00:11:26] <FromDiscord> <Rika> theyre called thunks from what i know
[00:11:39] <FromDiscord> <Rika> https://en.wikipedia.org/wiki/Thunk
[00:12:20] <tk> ah, I've written code like this a million times but never knew what it was called
[00:12:27] <FromDiscord> <Rika> you can return closure iterators only, inline iterators are, well, inlined
[00:12:32] <tk> Also, I've heard of thunks before but never associated them to this
[00:12:51] <tk> interesting
[00:12:57] <FromDiscord> <Rika> thunks can also be first class functions, but those are less fun
[00:13:21] <FromDiscord> <Rika> if you need lazy single-values, first class functions. if you need lazy containers, closure iterators
[00:13:47] <FromDiscord> <Yardanico> apparently with https://zen.su/posts/amalgamating-nim-programs/ compiling with `--gc:arc -d:useMalloc --os:any -d:posix -d:noSignalHandler --panics:on -d:danger` the total C code size is under 1K lines, and most of that is just copypaste from normal C stdlib headers
[00:13:56] <FromDiscord> <Yardanico> need to update the article a bit though
[00:20:09] <FromDiscord> <Yardanico> https://gist.github.com/Yardanico/bd66fe0599a0db0a43965467cfebd75f
[00:20:27] <FromDiscord> <Yardanico> that's the resulting C code from all those flags for `echo "Hello, world!"` :)
[00:21:00] *** Quits: beshr (~beshr@user/beshr) (Remote host closed the connection)
[00:28:55] <FromDiscord> <Yardanico> after removing cruft that's already in the C lib it's 450 loc :))
[00:34:36] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[00:48:26] <nisstyre> does anyone here use https://github.com/elcritch/nesper ? I tried it yesterday and got GCC errors when I tried to build the example :(
[00:48:35] <nisstyre> esp-idf worked fine though
[00:48:58] <nisstyre> might file an issue but I'm not sure if it's maintained actively anymore
[00:49:11] <nisstyre> or maybe I need a different compiler
[00:49:21] <tk> okay, I have one more question, I don't understand what is happening here: http://ix.io/3F5W - this code when executed with foo containing the lines 1, 2, and 3 will print 6 and then 0
[00:50:14] <tk> since I am "calling" the iterator every time in sum I would have expected it to re-open the file
[00:50:29] <tk> now coincidentally, this is actualy the behaviour I wanted, but not the one I expected
[00:52:31] <tk> Like I would have expected that putting f in the scope of numfile_iterator instead of it would have achieved this result
[00:52:33] <FromDiscord> <Yardanico> In reply to @tk "since I am "calling"": it's a closure iterator, so it remembers its state which means it'll only open the file once
[00:53:02] <tk> but then if you have a to-level closure iterator will it also remember its state?
[00:53:06] <tk> let me check
[00:53:15] <FromDiscord> <Yardanico> if it's a closure iterator - yes, of course
[00:53:29] <FromDiscord> <Yardanico> if it's a normal iterator - no, because normal iterators are always inlined
[00:54:57] <FromDiscord> <Elegantbeef> Is this where i shill my `asClosure` macro? 😛
[00:55:16] <FromDiscord> <Yardanico> write a `asGoodCode` macro please
[00:56:27] <FromDiscord> <Elegantbeef> The only way to write good code is to not write code at all
[00:56:28] <tk> https://play.nim-lang.org/ - okay, so in this case it doesn't do the same thing
[00:56:31] <tk> er
[00:56:35] <tk> let me actually paste a link to something
[00:56:36] <FromDiscord> <Elegantbeef> So the `asGoodCode` would just `quit(1)`
[00:56:45] <tk> https://play.nim-lang.org/#ix=3F5Z - there
[00:56:47] <FromDiscord> <Yardanico> In reply to @Elegantbeef "So the `asGoodCode` would": but 1 is a bad exit code!
[00:57:03] <FromDiscord> <Yardanico> @tk in this case you're not using the same closure iterator
[00:57:04] <FromDiscord> <Elegantbeef> Exactly
[00:57:22] <FromDiscord> <Yardanico> in your previous example it was one closure iterator because you instantiated it with  ` let it = numfile_iterator("foo")`
[00:57:27] <tk> Yardanico: how so?
[00:57:34] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F60
[00:57:42] <FromDiscord> <Elegantbeef> `it` instantiates a new iterator
[00:57:47] <nisstyre> tk: in your example I would expect it to exhaust the iterator the first time
[00:57:58] <FromDiscord> <Elegantbeef> It's not global it's stored with that instantiation of the iterator
[00:58:21] <FromDiscord> <Yardanico> @nisstyre no, it passes a fresh instantiated iterator each time to sum_it so it'll output 6 each time
[00:58:22] <tk> that is unusual, where is this behaviour that mentioning a closure iterator "instantiates" it documented?
[00:58:37] <tk> and coincidentally, why doesn't "mentioning" the variable also do the same thing?
[00:58:51] <nisstyre> Yardanico: yeah it's probably a bias coming from python land
[00:58:53] <FromDiscord> <Yardanico> because you're not "mentioning" the variable
[00:58:58] <FromDiscord> <Yardanico> you're mentioning the iterator itself
[00:59:01] <nisstyre> I think the Nim way is better
[00:59:35] <tk> okay so what is the type of an iterator before it is assigned to an "iterator" typed variable (or returned as an "iterator" typed result?)
[00:59:44] <tk> does it have some special different type?
[01:00:02] <FromDiscord> <Yardanico> no, it's the same, but you're instantiating a new iterator each time you reference it
[01:00:22] <FromDiscord> <Elegantbeef> "Mentioning" the variable behaves differently since the state is attached to `a`
[01:00:28] <tk> right but as I said, in that case I don't get why referencing the reference doesn't do the same thing
[01:00:41] <FromDiscord> <Elegantbeef> `var a = it` instantiates the environment(state) and a pointer to iterator
[01:00:43] <FromDiscord> <Yardanico> because you're saving the state in a variable then
[01:00:50] <tk> right, so the type IS different
[01:00:58] <FromDiscord> <Yardanico> no?
[01:01:00] <FromDiscord> <Elegantbeef> No the type is the same
[01:01:03] <FromDiscord> <Elegantbeef> The value is different
[01:01:10] <tk> how can something of the same type behave differently in two identical contexts?
[01:01:14] <FromDiscord> <Yardanico> ???
[01:01:34] <FromDiscord> <Elegantbeef> Cause you're making an Lvalue inside `sumIt` vs passing an LValue in
[01:01:55] <nisstyre> I think maybe the confusion is over closures, not iterators...
[01:02:06] <nisstyre> f is part of the closure state
[01:02:07] <FromDiscord> <Elegantbeef> when you do `sumIt(it)` i instantiates a new environment and makes an lvalue to pass to the procedure, so after the call is done there is no leaked state
[01:02:18] <FromDiscord> <Elegantbeef> You seem to want a globalized state for every closure iterator
[01:02:28] <tk> I don't _want_ anything
[01:02:33] <tk> I am simply trying to understand the behaviour
[01:02:42] <FromDiscord> <Yardanico> well, we already explained it I think
[01:03:41] <FromDiscord> <Elegantbeef> Closures need to store the state(where they are and data they're capturing), and the pointer to the procedure, as such when you do `it` that information is instantiated, when not assigned to a variable it's only used temporarily, when assigned to a variable it's persistent with that variable
[01:04:14] <FromDiscord> <Yardanico> also, take a look at this @tk https://play.nim-lang.org/#ix=3F64
[01:04:32] <FromDiscord> <Yardanico> should it behave the same in both cases?
[01:04:34] <nisstyre> Elegantbeef: traditionally it's all the free variables that go into the closure environment
[01:04:47] <nisstyre> but it's not clear here IMO
[01:05:00] <nisstyre> it's slightly different from the traditional closure in e.g. lisp
[01:05:13] <tk> the type of a is _different_ from the type of getVal
[01:05:17] <FromDiscord> <Elegantbeef> Yea think my `asClosure` makes it a bit less silly 😀
[01:05:30] <FromDiscord> <Yardanico> In reply to @tk "the type of a": no
[01:05:30] <FromDiscord> <Elegantbeef> No they're not, they're both Data
[01:05:43] <tk> How is an un-called function "Data"?
[01:05:46] <tk> it's a func
[01:05:49] <FromDiscord> <Yardanico> it is a called function though
[01:06:07] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/tests/test1.nim#L57-L84 doesnt have any confusion of "what's caputed" 😛
[01:06:09] <FromDiscord> <Yardanico> and with closure iterators you instantiate it by mentioning it without a call
[01:06:23] <tk> right, so what's the type of the thing you mention?
[01:06:29] <FromDiscord> <Yardanico> In reply to @tk "right, so what's the": which one?
[01:06:30] <nisstyre> what is asClosure supposed to do?
[01:06:45] <FromDiscord> <Elegantbeef> As closure takes an inline iterator and converts it to a closure
[01:06:48] <tk> if you mention "it" in a vacuum, without "instantiating it" what is its type?
[01:06:54] <nisstyre> ah interesting
[01:06:59] <FromDiscord> <Yardanico> In reply to @tk "if you mention "it"": the type of the iterator itself
[01:07:04] <FromDiscord> <Yardanico> nim has `typeof`
[01:07:04] <FromDiscord> <Elegantbeef> `iterator() {.closure.}`
[01:07:09] <FromDiscord> <Yardanico> just do `echo typeof(myVar)`
[01:07:16] <tk> right, but if I do typeof(it) it will just instantiate it before passing it to typeof no?
[01:07:29] <FromDiscord> <Elegantbeef> No typeof is compiile time only
[01:07:45] <FromDiscord> <Elegantbeef> It types the expression, it doesnt do any instantiating
[01:07:50] <tk> okay, so in this case I get the same type
[01:08:11] <FromDiscord> <Elegantbeef> It looks at the expression and goes "hey this is the symbol of `myVar` which is `iterator() {.closure.}`
[01:08:36] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[01:08:46] <tk> so my point is, if they're symbols of the same type, why are they treated differently, what distinguishes them?
[01:09:08] <FromDiscord> <Elegantbeef> One is stored in a variable
[01:09:14] <FromDiscord> <Elegantbeef> So state persists
[01:09:41] <tk> this is unusual, so a thing stored in a variable is distinct from the same thing as-such ?
[01:09:48] <tk> as in, it's treated differently?
[01:10:08] <nisstyre> I'm guessing (but would be curious to know exactly how) that the compiler does some sort of "lambda lifting" type thing where it gets a set of all the variables in the closure function body
[01:10:13] <FromDiscord> <Elegantbeef> The only odd thing here is that `it` instantiates a value at runtime
[01:10:13] <nisstyre> and then adds them to a struct or something
[01:10:42] <FromDiscord> <Elegantbeef> You're right nisstyre
[01:10:43] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/intern.html#code-generation-for-closures
[01:10:47] <tk> okay, so then I guess my next question is, is it possible to avoid instantiating `it` ?
[01:10:52] <FromDiscord> <Elegantbeef> This is more of "how stuff works" at a lower level, but might help tk
[01:10:53] <tk> and pass `it` as-such?
[01:10:57] <nisstyre> thanks for the link
[01:11:21] <tk> let's say I wanted to create a function which returns an un-instantiated closure iterator
[01:11:28] <tk> which I can then instantiate as many times as I want
[01:11:44] <FromDiscord> <Elegantbeef> Isnt that what you already have
[01:11:54] <tk> well no, not with numfile_iterator
[01:12:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/hck
[01:12:39] <tk> I don't understand
[01:13:34] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F68 doesnt this just work?
[01:13:34] <tk> also, if this is the case, why do iterators require () in for loops? or can I do it without the () ?
[01:13:47] <tk> That's not he code I wanted to make work :p
[01:13:53] <tk> I sent it earlier, let me re-send it
[01:13:58] <tk> http://ix.io/3F5W
[01:14:00] <FromDiscord> <Elegantbeef> But doesnt the same logic apply?
[01:14:03] <tk> no
[01:14:19] <tk> unles... you are suggesting I take it OUT of the function
[01:14:23] <tk> I guess that makes sense
[01:15:26] <tk> hmm... no, that doesn't work
[01:15:33] <tk> I can't pass it arguments then
[01:17:55] <FromDiscord> <Elegantbeef> perhaps https://play.nim-lang.org/#ix=3F69
[01:18:08] <FromDiscord> <Elegantbeef> instead of passing in `it` in the calls down there you could pass `numFile`
[01:18:19] <tk> I would say that this is not elegant
[01:18:23] <FromDiscord> <Elegantbeef> The thing to note is closures without that factory require manually passing state every time
[01:18:34] <tk> I don't want the function which receives the iterator to have to care about knowing what to call the iterator with
[01:18:39] <FromDiscord> <Elegantbeef> You're right, that's why i'd suggest using `asClosure`
[01:18:49] <FromDiscord> <Elegantbeef> Write an inline iterator, then do `asClosure(yourInlineIterator)`
[01:19:09] <tk> let's see
[01:19:28] <tk> where is asClosure documented?
[01:19:45] <FromDiscord> <Yardanico> it's made by Elegantbeef :)
[01:19:49] <FromDiscord> <Elegantbeef> It's apart of my slicerator package, not in stdlib
[01:19:52] <tk> oh
[01:20:37] <tk> and... where would I find that?
[01:20:46] <FromDiscord> <Yardanico> beef linked it above - https://github.com/beef331/slicerator
[01:20:49] <tk> ah
[01:20:55] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator
[01:21:12] <FromDiscord> <Elegantbeef> It's not properly documented but there are examples in `tests/test1`
[01:21:27] <tk> one moment
[01:22:01] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F6a but yea it'd look like this
[01:22:24] <tk> can I put parentheses around the string? or at least a space in front of it?
[01:22:26] <FromDiscord> <Elegantbeef> Using it a lot would probably make compile time atrocious since i dont cache iterators yet though i probably should
[01:22:46] <FromDiscord> <Elegantbeef> Of course that's just one method of calling with a string
[01:22:51] <tk> do I have to call asClosure twice if I want to process the same file twice?
[01:23:35] <FromDiscord> <Elegantbeef> Hmm i havent used iterators much, so i dont know if there is a way to reset an iterator
[01:23:54] <nisstyre> why can't you just use a non-closure iterator
[01:24:04] <tk> because I can't pass it to the function
[01:24:10] <nisstyre> convert to seq?
[01:24:14] <FromDiscord> <Elegantbeef> They could use a non closure one if they made their `sum` a template and used `iterable[T]`
[01:24:25] <nisstyre> yeah or that
[01:24:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F6c
[01:25:02] <tk> in any case, the goal was just to avoid having to pass the filename twice
[01:25:05] <FromDiscord> <Elegantbeef> That'd accept both closure and inlines
[01:25:20] <tk> I basically want something which generates an iterator which I can repeatedly iterate over to access the same file
[01:26:16] <tk> or heck, it would be okay if I had a partial... hmm... maybe another layer of functions will solve this problem
[01:26:18] <tk> let me try something
[01:28:17] <FromDiscord> <Elegantbeef> I might be able to make a reset macro/template
[01:28:58] <tk> okay, now I'm even more lost as to why THIS doesn't work...
[01:29:02] <tk> let me make a code snippet
[01:30:18] <tk> http://ix.io/3F6e - what am I misunderstanding here?
[01:31:00] <tk> I would have expected the closure returned by numfile_iterator to return a fresh instance of the iterator every time it's called
[01:31:54] <tk> wow
[01:32:18] <nisstyre> probably it shares the same environment
[01:32:20] <tk> I got an unhandled exception in ccgtypes.nim, let me try in the latest nim
[01:32:23] <nisstyre> or maybe not, idk
[01:33:10] <tk> I should have found this bug on my other computer
[01:33:23] <tk> then I wouldn't have to wait minutes for a build
[01:35:27] <tk> the only problem is that ccgtypes.nim is in the ccg part of nim which I completely failed to follow the last time I tried to debug a nim compiler issue.
[01:35:40] <tk> the only other nim bug I have looked at was in the standard library which was much easier to figure out
[01:35:47] <FromDiscord> <Elegantbeef> Yea cgen is very obtuse
[01:36:01] <FromDiscord> <Elegantbeef> The only stuff i can reasonably follow is sem stuffs
[01:36:49] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F6i well reset is implemented, no clue if that helps you any
[01:38:45] <tk> I actually found the compiler bug while writing a nim function to convert camelCase into snake_case (in a way which ensures that the identifiers still match) with the intention of installing that function inside nimls so that I got snake_case tab completion. As part of my test suite I was using nim_ident_normalize and found that it was broken for empty inputs. At the end of the day I managed to
[01:38:47] <tk> successfuly hack nimls to return snake case everywhere.
[01:38:58] <tk> (... still compiling ...)
[01:39:27] <FromDiscord> <Yardanico> In reply to @tk "I actually found the": there is a nim function like taht btw
[01:39:32] <FromDiscord> <Yardanico> (edit) "taht" => "that"
[01:39:44] <tk> there's a nim function to do the opposite IIRC
[01:39:53] <tk> not to go from camel to snake case
[01:40:08] <FromDiscord> <Yardanico> ah right didn't see you want snake_case
[01:40:14] <tk> of course
[01:40:17] <tk> it's the superior choice
[01:40:24] <FromDiscord> <Elegantbeef> It's ok yard you dont expect people to program wrong
[01:40:25] <tk> as well as 3 space indent
[01:40:32] <FromDiscord> <Yardanico> yeah yeah :)
[01:40:47] <FromDiscord> <Yardanico> @tk take a look at https://github.com/Yardanico/nuglifier too, it's the superior choice too
[01:40:54] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/6497
[01:41:02] <FromDiscord> <Yardanico> https://raw.githubusercontent.com/Yardanico/nuglifier/master/example_output/example_case.nim example output (compiles and runs)
[01:41:11] <tk> seems awful
[01:41:23] <FromDiscord> <Yardanico> almost as bad as 3-space idents /s
[01:41:42] <tk> I personally struggle to read camelCase and find 2 space indent incredibly difficult to follow so nim being agnostic on these issues means I can happily use it.
[01:41:49] <FromDiscord> <Yardanico> yeah that's fine
[01:41:59] <FromDiscord> <Elegantbeef> It's always odd to see people follow star a package i link and have 0 clue who the fuck they are 😀
[01:42:00] <tk> aha! the compilation has finished!
[01:42:05] <FromDiscord> <Elegantbeef> Lurkers all around me
[01:43:32] <tk> okay, I have a bona-fide compiler bug, now to check if anyone else has reported it and if not, make a minimal reproducer, report it and then try (and probably fail) to fix it
[01:44:22] <FromDiscord> <Elegantbeef> If you get a min repro i can try to help you debug/fix it
[01:44:41] <FromDiscord> <Elegantbeef> I'm not overly competent on the cgen side like i said, tend to stick to semantics
[02:15:41] <FromDiscord> <Zoom> Actually, tk makes a good point. It's not obvious how to make an iterator factory in vanilla Nim.
[02:15:56] <FromDiscord> <Zoom> At least to me it isn't
[02:19:56] <FromDiscord> <evoalg> I was reading that Zen of Nim article and I realized that I tend to program in a very unstructured way, with lots of returns in a proc, and lots of continues & breaks in a loop, and I'm already in love with doing that lol ... it gives me flexibility and power, and also saves on indenting in loops, but yea I guess I'm not letting the compiler reason about my code, and yea I admit I tend to think of returns as a "goto"
[02:20:22] <tk> Elegantbeef: it's fine, I'll try alone for a while, I like doing things like this
[02:27:44] <FromDiscord> <Elegantbeef> Yea this is why i think something like `asClosure` and `rest` need to be more first class
[02:28:14] <FromDiscord> <Elegantbeef> And yea evo Nim gives a ton of functionality to get away from typical silly code you see in other language
[02:28:19] <FromDiscord> <Elegantbeef> reset\ of course
[02:29:06] <FromDiscord> <Elegantbeef> Like you dont need to declare a result variable, you dont need to use return in most procedures between `break` named blocks and result
[02:30:07] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F6s
[02:31:37] <FromDiscord> <evoalg> my initial reaction is to save a line by doing `return true` under the if
[02:31:46] <FromDiscord> <Yardanico> lol
[02:32:10] <FromDiscord> <Elegantbeef> That's up to you of course
[02:32:16] <FromDiscord> <evoalg> I know I'm bad
[02:32:27] <FromDiscord> <Elegantbeef> Nah it's preference
[02:32:31] <tk> can someone remind me what I need to invoke koch with to get it to compile and run a program with a freshly compiled nim?
[02:32:46] <FromDiscord> <Elegantbeef> `./koch temp c ./yourprogram.nim`
[02:32:48] <tk> thanks
[02:32:49] <krux02_> ./koch temp c -r myfile
[02:33:15] <FromDiscord> <Elegantbeef> Krux waits in the shadows to strike!
[02:33:19] <FromDiscord> <Zoom> If my nesting gets out of hand it usually means it's time to separate a subroutine.An early return for a rare condition is fine, but if you rely on this and have many, maybe you should flip your perspective\: Write a function and think about it from the end to the beginning. What conditions should you satisfy on returning a desired result? Then untangle the concept into more specific steps. Hope it makes sense.↵(@evoalg)
[02:33:39] <FromDiscord> <Elegantbeef> Yea early returns I've grown to dislike
[02:33:56] <FromDiscord> <Elegantbeef> Though nim's standard 2 indentation hides nested ifs
[02:34:12] <FromDiscord> <Elegantbeef> "It's not that deep it's only 10 characters in"
[02:37:29] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F6y
[02:37:39] <FromDiscord> <Elegantbeef> I hate everything you stand for 😛
[02:39:05] <FromDiscord> <Yardanico> In reply to @Zoom "Nah. That's the proper": pls stop trolling thanx
[02:39:20] <FromDiscord> <Elegantbeef> You're not my real mom!
[02:40:58] <tk> okay, well, I have no idea
[02:41:34] <FromDiscord> <Zoom> I stand by the opinion we really should be able to write some form of `iterable[T]` instead of an openArray in my example and not have to make `contains` a template.
[02:41:55] <FromDiscord> <Elegantbeef> Well i agree zoom, so who're you arguing with
[02:42:08] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3F6C
[02:42:23] <FromDiscord> <Elegantbeef> It's also dumb you cannot implictly pass an open array to an `iterable[T]`
[02:42:29] <FromDiscord> <evoalg> with nots of nesting, this can greatly save indentations for me
[02:42:54] <FromDiscord> <Elegantbeef> It's really up to you on that one, i prefer `if not item.isBad` since it shows the logic flow and not the anti-logic flow
[02:43:11] <FromDiscord> <Zoom> With the heavens, it seems. I don't like the fact those issues make me repeat the same things every time I start going to this channel.
[02:43:47] <FromDiscord> <Elegantbeef> It's the same idea, but one explicitly states intent, the other requires reasoning it from the code
[02:44:20] <FromDiscord> <evoalg> ok ... I'm giving nim a good go, because one of the reasons is that it will improve my sloppy coding in general 😉
[02:44:30] <FromDiscord> <Elegantbeef> I looked at it Zoom and iterable was intentionally made as such, and thanks to implict conversions failing when you do `iterable[int] or openArray[int]` they're ptetty much useless
[02:44:38] <FromDiscord> <Elegantbeef> pretty\
[02:45:10] <FromDiscord> <Elegantbeef> In my view they have a good goal, but have failed miserably to meet the mark
[02:46:37] <FromDiscord> <Elegantbeef> There is this RFC that remedies them a bit, but still not ideal they need to be in a template https://github.com/nim-lang/RFCs/issues/397
[02:49:14] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[02:51:44] <FromDiscord> <Elegantbeef> I'd also argue that `var a = someThing.items` should be implictly converted to a closure
[02:52:16] <FromDiscord> <Elegantbeef> But i guess that's what we have `asClosure` for now 😛
[02:57:59] <FromDiscord> <evoalg> to use asClosure, I just have to remember to use the `()` with the variable right? Second question, I can't use it to turn toSeq into an iterator right?
[02:58:17] <FromDiscord> <Elegantbeef> Nope `toSeq` isnt an iterator
[02:58:45] <FromDiscord> <Elegantbeef> I mean you can but it doesnt make any sense as it's just `yourCollection.yourIterator`
[02:58:59] <FromDiscord> <Elegantbeef> You shouldnt need the `()`
[02:59:15] <FromDiscord> <Elegantbeef> Sadly `reset` only works if called in the declaration scope
[03:00:26] <FromDiscord> <sealmove> hey can't I use the `nim` command to compile many files at once?
[03:00:58] <FromDiscord> <Elegantbeef> It compiles the source module and all of it's dependancies, i dont think you can do multiple files at once
[03:01:05] <FromDiscord> <Elegantbeef> multiple source modules\
[03:02:10] <FromDiscord> <sealmove> yeah I see :
[03:02:14] <FromDiscord> <sealmove> (edit) ":" => ":|"
[03:02:24] <FromDiscord> <Yardanico> any reason you want that?
[03:05:38] <FromDiscord> <sealmove> ok I'll try to explain
[03:06:20] <FromDiscord> <sealmove> in my project i generate nim source code programmatically (with Scala)
[03:06:34] <FromDiscord> <sealmove> and I need to test if the generated nim source files can compile
[03:06:48] <FromDiscord> <sealmove> and distinguish which ones do compile and which don't
[03:07:11] <FromDiscord> <sealmove> the other members have written a tool in ruby to do this. it's somewhat language-agnostic
[03:07:18] <FromDiscord> <sealmove> so I am trying to make a subclass for nim
[03:07:21] <FromDiscord> <Yardanico> i mean, why not just call nim separately for each file? the thing is - how would you expect it to behave with multiple files?
[03:07:32] <FromDiscord> <Yardanico> because in most languages passing multiple files to a compiler means compiling them together
[03:08:23] <FromDiscord> <Yardanico> it's a valid usecase, but for me it feels like that feature will add more complexity without any big gain (since you can just call nim multiple times)
[03:08:33] <FromDiscord> <sealmove> sent a code paste, see https://play.nim-lang.org/#ix=3F6D
[03:08:33] <FromDiscord> <Yardanico> nim also has --compileOnly to check if the _nim_ code compiles
[03:08:49] <FromDiscord> <sealmove> yes I wanted to ask about this
[03:09:01] <FromDiscord> <sealmove> what does it mean?
[03:09:05] <FromDiscord> <Yardanico> https://nim-lang.org/docs/nimc.html
[03:09:09] <FromDiscord> <Yardanico> "compile Nim files only; do not assemble or link"
[03:09:21] <FromDiscord> <Yardanico> nim has a lot of useful flags, give that page a read :)
[03:09:25] <FromDiscord> <sealmove> very good, this will be very useful
[03:21:38] <FromDiscord> <sealmove> btw Yardanico fun fact...
[03:21:55] <FromDiscord> <sealmove> the only reason I must do this is because Travis CI now charges based on time used
[03:22:05] <FromDiscord> <sealmove> https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing
[03:22:16] <FromDiscord> <sealmove> you probably know already
[03:22:58] <FromDiscord> <sealmove> currently I am using `testify` which is a crap tool I wrote some years ago https://github.com/sealmove/testify
[03:24:25] <FromDiscord> <sealmove> I don't know if using their ruby tool instead of `testify` will make a difference, but at least I'll follow their convention and remove `testify` as an extra dependency
[03:25:32] <FromDiscord> <sealmove> here is the _does-it-build? tool_ https://github.com/kaitai-io/kaitai_struct_tests/tree/master/builder
[03:33:55] <tk> I present: https://github.com/nim-lang/Nim/issues/19153 - the weird bug I found
[03:34:08] <tk> if someone can come up with a better issue title, that would be great.
[03:36:18] <tk> hmm, adding more type annotations fixes it
[03:36:21] <tk> interesting
[03:39:09] <FromDiscord> <Elegantbeef> `iterator` and `proc` are type classes so that's probably the issue
[03:39:18] <FromDiscord> <Elegantbeef> It doesnt fill them in and it errors due to it
[03:39:56] <FromDiscord> <Elegantbeef> It should be `iterator(): int` and `proc f(): iterator(): int`
[03:40:59] <tk> ah, I think I found another weird bug, but this one doesn't crash the compiler, let me show you and you can tell me what you think ...
[03:43:08] <tk> Elegantbeef: http://ix.io/3F6N this prints <> and crashes (because there is no such file)
[03:43:20] <tk> I assume filename should be getting captured there but isn't
[03:43:39] <tk> if you put the entire iterator INSIDE the func you get what I wanted to begin with
[03:47:41] <tk> (which I think may be what as_closure does but I didn't investigate it)
[03:48:19] <FromDiscord> <Elegantbeef> Yea that's pretty much what it does afaict
[03:48:19] <FromDiscord> <brainproxy> I've started using nimlsp with Emacs, very nice experience so far! One thing I noticed is that nimlsp doesn't seem to honor `nim.cfg` in current/parent directories. Is that a known thing?
[03:49:00] <FromDiscord> <brainproxy> (edit) "current/parent" => "a source's directory / its parent"
[03:54:40] <tk> https://play.nim-lang.org/#ix=3F6Q - here's a concise example
[04:00:16] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Quit: Leaving)
[04:22:13] *** Quits: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:23:08] *** Joins: sagax (~sagax_nb@user/sagax)
[04:37:49] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[04:43:21] <FromDiscord> <d-static> Any books for nim?
[04:47:19] *** Joins: audiophile_ (~audiophil@user/audiophile)
[04:48:52] <FromDiscord> <Elegantbeef> There is "nim in action" and http://ssalewski.de/nimprogramming.html though the latter isnt a published book
[05:06:32] <FromDiscord> <evoalg> There's a sale on for this book at the moment: https://www.manning.com/books/nim-in-action
[05:23:17] *** Joins: Guest36 (~Guest36@2601:680:8380:8f90::e4b5)
[05:23:43] *** Quits: Guest36 (~Guest36@2601:680:8380:8f90::e4b5) (Client Quit)
[05:38:15] <NimEventer> New post on r/nim by vanyle_: A Nim plugin for Sublime Text, see https://reddit.com/r/nim/comments/quwoar/a_nim_plugin_for_sublime_text/
[05:58:58] <FromDiscord> <evoalg> Coming form python, as I'm getting used to Nim's typed variables, maybe I'm now transitioning from cursing them to liking them ... one of my proc's returns a string, but I was trying to assign it to an int variable, and  the nvim plugin changed the color catching it immediately, which meant I noticed the bug straight away. Might have taken me ages of debugging in python.
[05:59:35] <FromDiscord> <Elegantbeef> Yep static typing is fantastic
[06:00:51] <FromDiscord> <evoalg> I'm impressed that I didn't even need to compile it to catch the error
[06:01:24] <FromDiscord> <Elegantbeef> Well it 'compiled' 😛
[06:02:09] <FromDiscord> <evoalg> the nvim syntax highlighting changed straight away though, it wasn't compiling it right?
[06:02:34] <FromDiscord> <Elegantbeef> Well the file is semantically checked so somewhat compiled
[06:02:59] <FromDiscord> <evoalg> ah I see what you mean
[06:03:00] <FromDiscord> <Elegantbeef> It's like a super lazy compile, no code is generated but it's semantically analysed which is like half of compiling
[06:18:31] <FromDiscord> <evoalg> Why would a stream be used on a string instead of using a for loop? I'm trying to understand what the std streams module is good for, as I saw some code where it was used on a string.
[06:19:26] <FromDiscord> <Elegantbeef> steams only loads a segment into memory at once, so it's more memory efficient, and for large files the only way to do it
[06:19:55] <FromDiscord> <Elegantbeef> If you have a 30gb file and 3gb of ram you're not going to be able to read the entire file, so you want to stream it in, process it and stream it out
[06:20:11] <FromDiscord> <evoalg> true!
[06:20:41] <FromDiscord> <Elegantbeef> There is the caveat of "your swap might be large enough" but if you want performance you've lost the battle
[06:20:55] <FromDiscord> <evoalg> makes sense
[06:22:38] <FromDiscord> <evoalg> but what about doing `for line in "myBigFile.txt".lines:` ? is that mem efficient?
[06:23:52] <FromDiscord> <Elegantbeef> It seems to read each line to a string and yields it so probably
[06:24:01] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/version-1-6/lib/system/io.nim#L901 the source button lets you see all manner of fun
[06:24:32] <FromDiscord> <evoalg> ah thank you!
[06:26:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:32:32] *** Joins: rockcavera (~rc@192.12.114.204)
[06:32:32] *** Quits: rockcavera (~rc@192.12.114.204) (Changing host)
[06:32:32] *** Joins: rockcavera (~rc@user/rockcavera)
[06:51:51] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[07:08:42] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:01] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[07:37:02] <FromDiscord> <brainproxy> sent a long message, see http://ix.io/3F7r
[07:37:58] *** Joins: xet7 (~xet7@user/xet7)
[07:39:45] <FromDiscord> <Elegantbeef> I dont think there is a drop down, but yea this has been a thing for a while
[07:41:48] <FromDiscord> <brainproxy> 🤦‍♂️
[09:12:01] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[09:40:01] <FromDiscord> <evoalg> Maybe the way I'm doing this the best way, maybe not ... it took me the longest time to get the table I wanted: https://play.nim-lang.org/#ix=3F7P ... I'm so slow
[09:58:32] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 265 seconds)
[10:00:03] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[10:46:08] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[11:21:29] <FromDiscord> <Rika> Naively replacing " might be wrong depending on use case
[11:33:45] *** Joins: tiorock (~rc@192.12.112.227)
[11:33:45] *** Quits: tiorock (~rc@192.12.112.227) (Changing host)
[11:33:45] *** Joins: tiorock (~rc@user/rockcavera)
[11:33:45] *** rockcavera is now known as Guest2078
[11:33:45] *** Quits: Guest2078 (~rc@user/rockcavera) (Killed (strontium.libera.chat (Nickname regained by services)))
[11:33:45] *** tiorock is now known as rockcavera
[11:53:11] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 264 seconds)
[11:59:55] *** Joins: joshbaptiste (~josh@192.210.151.34)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[12:18:21] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[12:18:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:26:00] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8c
[12:30:21] <FromDiscord> <Rika> What do you mean
[12:31:05] <FromDiscord> <Rika> Also I don’t know why you’re returning a proc either
[12:35:15] <FromDiscord> <Zoom> I mean I'd like to take `f` outside of the parent proc.↵And what should I return in your opinion?↵(@Rika)
[12:35:38] <FromDiscord> <Rika> I mean I don’t know what reasons you’re doing certain things for
[12:36:15] <FromDiscord> <Rika> If you want to somehow modify f then the proc should instead be a macro or whatever, I would be led to believe
[12:39:02] <FromDiscord> <Zoom> `f` is a regular procedure, it can take arguments, why use macro?
[12:44:59] <FromDiscord> <Rika> I’m not sure what you mean it’s probably just an understanding issue
[12:45:08] <FromDiscord> <Rika> If you just want to add an argument then that’s all you need to do
[12:45:37] <FromDiscord> <Rika> Add an argument to f (and the return type) and then now when you call the factory the returned proc will need an argument as well
[12:46:38] *** Joins: PMunch (~PMunch@user/pmunch)
[12:53:54] <FromDiscord> <Zoom> Well, thank you very much, this helps a lot. I would never have come to this solution without you.↵(@Rika)
[12:54:29] <FromDiscord> <Rika> If you’re being sarcastic then I do not know what you mean
[12:54:37] <FromDiscord> <Rika> And you are not helping
[12:54:57] <FromDiscord> <Rika> So feel free to ask again once you want to help
[12:55:59] <FromDiscord> <Zoom> Do you want me to walk you through the code in question? What is it you don't understand?
[12:56:29] <FromDiscord> <Rika> I don’t care
[12:57:15] <PMunch> @Zoom, had a look through the log and I'm not entirely certain what you want to do either
[12:57:24] <FromDiscord> <Zoom> I return a proc because this is what the parent proc does\: returns procedures. If it returned iterators Nim would treat the results as iters, leading to errors such as\:↵` type mismatch: got <int>`
[12:57:36] <FromDiscord> <Rika> No shit
[12:57:52] <PMunch> @Rika, no need for that..
[12:58:07] <FromDiscord> <Elegantbeef> Well the confrontation either way is less than needed
[12:58:10] <FromDiscord> <Rika> I can’t be nice to some fuckhead who thinks I can read minds
[12:58:21] <FromDiscord> <Zoom> If it's so clear to you, why did you ask me why a few minutes ago?↵(@Rika)
[12:58:27] <PMunch> @Rika, again, no need for language like that
[12:58:40] <FromDiscord> <Elegantbeef> Eh to be fair pmunch zoom was very sarcastic
[12:58:51] <FromDiscord> <Elegantbeef> Both need to go sit in time out and think about what they did
[12:59:09] <FromDiscord> <Rika> You help him
[12:59:10] <PMunch> True, but just because someone else is rude doesn't mean you have to
[12:59:19] <PMunch> I'm trying..
[12:59:32] <FromDiscord> <Rika> Of course but it’s not realistic to take everything every time
[12:59:39] <FromDiscord> <Rika> There’s gonna be a limit to each person
[12:59:49] <FromDiscord> <Schelz> Cry ?
[13:00:08] <FromDiscord> <Rika> What do you mean now
[13:00:21] <PMunch> But instead of being rude back just go do something else *shrugs*
[13:00:33] <FromDiscord> <Elegantbeef> I swear if the next comment isnt about the problem at hand i'll finally snap!
[13:00:38] <PMunch> Anyway @Zoom, what are you trying to do
[13:00:55] <PMunch> You have a procedure that returns a procedure which returns an iterator
[13:01:24] <PMunch> But your procedure is called iterFactory, so why not just return an iter+
[13:01:33] <PMunch> ?*
[13:01:46] <FromDiscord> <Rika> Perhaps some other code takes in the proc that returns an iterator
[13:01:49] <FromDiscord> <Zoom> I don't like being talked in a condescending manner when a person ignores the question you ask and dismisses the issue because they don't understand the intent.
[13:01:56] <FromDiscord> <Rika> And the factory is just adhoc uh
[13:01:59] <FromDiscord> <Rika> What’s it called
[13:02:07] <PMunch> No one does, but lets get back to your problem
[13:02:15] <FromDiscord> <Rika> I don’t know the think they do with functions in Haskell
[13:02:19] <FromDiscord> <Elegantbeef> The pissing contest is very much not needed
[13:02:20] <FromDiscord> <Rika> Partial functions something something
[13:03:02] <FromDiscord> <Zoom> Because it either doesn't work or I don't know how to do it (notate the types probably) properly.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:03:07] <FromDiscord> <Rika> Well what now, do you want help or do you want to continue shitting on me
[13:03:38] <FromDiscord> <Rika> We don’t know what your whole code is so we can’t infer what you want exactly
[13:04:41] <PMunch> @Zoom, but what are you actually trying to do?
[13:05:09] <PMunch> @Rika, again with the harsh language. Please try to keep it civil
[13:05:15] <FromDiscord> <Zoom> No one shitted on you, look through the log. I'd like you to ignore the questions you're not interested in or those coming from people with deficiencies, whom I am, according to your evaluation.↵(@Rika)
[13:05:30] <FromDiscord> <Rika> What now? I didn’t call him anything, I’m asking if he wants to keep on being rude to me
[13:05:38] <PMunch> And @Zoom, stop engaging with him and tell me what you're trying to achieve so I can actually help you..
[13:05:44] <FromDiscord> <Elegantbeef> The easiest solution is to just drop it
[13:05:52] <FromDiscord> <Elegantbeef> Go paint a happy tree or something
[13:06:00] <PMunch> Exactly!
[13:06:04] <FromDiscord> <Rika> I’m not even trying to be rude this time
[13:06:15] <FromDiscord> <Rika> I’m not even mad anymore what now
[13:06:40] <PMunch> Well saying to someone that they're shitting on you isn't particularly polite. And it's certainly not Nim-related..
[13:06:57] <FromDiscord> <Rika> As if it’s polite to be the one doing it
[13:07:12] <FromDiscord> <Rika> Whatever
[13:07:27] <PMunch> @Zoom, could you please tell me what you're trying to achieve. What bigger picture is his factory going to fit into, and why doesn't the snippet you have now work in that scenario
[13:07:31] <FromDiscord> <Rika> I really don’t get what’s up with you guys
[13:08:02] <PMunch> @Rika, we're just trying to help someone in the Nim channel asking Nim questions
[13:08:08] <FromDiscord> <Elegantbeef> Nothing much, how bout you?
[13:08:22] <FromDiscord> <Rika> Apparently y’all think I’m still mad or whatever
[13:08:33] <PMunch> Nope, you don't seem mad now :)
[13:08:36] <FromDiscord> <Rika> What now, am I the next one to be banned
[13:08:42] <FromDiscord> <Rika> Can’t wait
[13:08:43] <PMunch> Not at all
[13:08:56] <FromDiscord> <Rika> Prolly should do it preemptively myself
[13:09:05] <PMunch> We don't ban people for having emotions
[13:09:06] <FromDiscord> <Schelz> Lame
[13:09:18] <FromDiscord> <Elegantbeef> So that iterator factory huh
[13:09:20] <PMunch> I know it says bot over my name, but I'm actually also human :P
[13:09:33] <FromDiscord> <Elegantbeef> That's yet to be decided pmunch
[13:09:37] <FromDiscord> <Rika> Again I assume it’s just some sort of partial function application
[13:09:47] <FromDiscord> <Schelz> How did you got the not tag ?
[13:09:53] <FromDiscord> <Schelz> (edit) "not" => "bot"
[13:09:54] <PMunch> Haha :P Just don't spill liquid around me and we're good @Elegantbeef 
[13:10:01] <FromDiscord> <Rika> He makes a factory to get a function with no parameters but now he just wants the function straight
[13:10:09] <FromDiscord> <Rika> It’s an assumption
[13:10:13] <FromDiscord> <Zoom> I was just experimenting with the piece of code tk showed here last night. He wanted to produce new iterators from a procedure which takes some args for those iters to use on initialization.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:10:15] <PMunch> @Schelz, because I'm on IRC and my messages are relayed to Discord
[13:11:56] <FromDiscord> <Zoom> If you return a straight iterator Nim treats it as one on invocation
[13:12:11] <FromDiscord> <Rika> Hm I don’t remember that being the case
[13:13:19] <PMunch> Something like this? https://play.nim-lang.org/#ix=3F8j
[13:14:10] <FromDiscord> <Rika> TFW can’t type code because on mobile
[13:14:24] <PMunch> Not with that attitude! :P
[13:14:30] <FromDiscord> <Rika> Also from last time I recall you can use closure iterator directly on for loops
[13:14:40] <PMunch> I've multiple times used the playground to type up Nim on mobile :P
[13:14:48] <PMunch> It's a massive pain in the ass, but it works
[13:14:53] <FromDiscord> <Rika> It takes significant time
[13:14:55] <FromDiscord> <Rika> Yeah
[13:16:04] <PMunch> You can do this can't you? https://play.nim-lang.org/#ix=3F8k
[13:16:23] <FromDiscord> <Rika> Yes
[13:16:29] <FromDiscord> <Elegantbeef> Cmon pmunch quit being  a sadomasochist with that iterator definition https://play.nim-lang.org/#ix=3F8l
[13:16:31] <FromDiscord> <Rika> That’s what I was just making lol
[13:16:37] <FromDiscord> <Rika> Again, time consuming
[13:16:56] <PMunch> https://play.nim-lang.org/#ix=3F8m
[13:17:23] <PMunch> @Elegantbeef, what was wrong with my iterator definition?
[13:17:37] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8n
[13:17:50] <PMunch> Too many parenthesis for you @Elegantbeef=
[13:17:58] <FromDiscord> <Rika> Oh
[13:18:12] <FromDiscord> <Rika> That’s because the it iterator is treated as an inline one I believe
[13:18:24] <FromDiscord> <Rika> You need to put the closure pragma on it too
[13:18:26] <FromDiscord> <Rika> Then it should work
[13:18:35] <FromDiscord> <Elegantbeef> Nope
[13:18:43] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F8o
[13:18:45] <FromDiscord> <Rika> So what is the issue
[13:19:10] <FromDiscord> <Rika> I just compiled what you sent and got an error lmfao
[13:19:31] <FromDiscord> <Rika> But it’s unrelated
[13:19:33] <FromDiscord> <Elegantbeef> I dropped the `myIter()` like a drongo
[13:20:00] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8q
[13:20:06] <PMunch> I don't see the problem @Zoom, seems to work just fine: https://play.nim-lang.org/#ix=3F8p
[13:20:18] <FromDiscord> <Rika> Maybe it’s to do with the consume parameter it’s type
[13:20:37] <FromDiscord> <Rika> Though it’s an implicit generic so
[13:20:38] <FromDiscord> <Rika> It should work
[13:20:40] <PMunch> @Zoom, well because you're taking an iterator() not an iterator(): int
[13:20:50] <FromDiscord> <Elegantbeef> Nope
[13:20:55] <FromDiscord> <Elegantbeef> `iterator` is a built in typeclass
[13:20:56] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F8r
[13:20:57] <FromDiscord> <Zoom> Doesn't matter↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:20:57] <FromDiscord> <Rika> Nope to who me?
[13:20:58] <FromDiscord> <Elegantbeef> Works just fine
[13:21:08] <FromDiscord> <Rika> Yeah it should just work
[13:21:15] <FromDiscord> <Rika> Do you see any possible areas for errors?
[13:21:21] <FromDiscord> <Rika> Might be unrelated to this part of code
[13:22:09] <FromDiscord> <Elegantbeef> Yea i dont know
[13:22:40] <PMunch> @Zoom, with a generic return type it works just fine: https://play.nim-lang.org/#ix=3F8s
[13:23:02] <PMunch> Of course that requires your generic type to have a `+` procedure defined
[13:23:15] <FromDiscord> <Elegantbeef> Pmunch really making it complex 😀
[13:23:38] <PMunch> Oh wait, is `iterator` an implicit generic?
[13:23:43] <FromDiscord> <Elegantbeef> `iterator` is a built in type class! It matches for any closure iterator!
[13:23:44] <FromDiscord> <Rika> Jesus that’s large
[13:23:44] <PMunch> I thought you just said it wasn't :P
[13:23:48] <PMunch> Aaah
[13:23:50] <FromDiscord> <Rika> See I told you
[13:23:57] <FromDiscord> <Rika> That’s why I asked if it was towards me
[13:24:27] <FromDiscord> <Elegantbeef> I mean i thought it was clear from the follow up
[13:24:40] <PMunch> I was busy writing my own code :P
[13:24:40] <FromDiscord> <Elegantbeef> Anyway i have to walk through 30cm of snow to take out garbage
[13:24:55] <PMunch> All our snow rained away two days ago :(
[13:25:14] *** Joins: pro (~pro@user/pro)
[13:25:21] <FromDiscord> <Rika> I’m thankful it’s not snowing yet
[13:25:34] <FromDiscord> <Rika> Not ready for metre deep snow yet
[13:25:44] <FromDiscord> <Rika> (Exaggeration)
[13:25:47] <FromDiscord> <Zoom> Ok, so one of the issues I was having is that `()` matter
[13:25:51] <FromDiscord> <Rika> I see
[13:25:56] <FromDiscord> <Rika> That makes sense yeah
[13:26:10] <FromDiscord> <Rika> Adding the parentheses makes it no longer an implicit generic I assume
[13:26:13] <FromDiscord> <Zoom> `iterator (): int{.closure.}` or `int`
[13:29:50] <FromDiscord> <Zoom> The other issue is that with returning an iterator and not a proc were' back at step one\: the factory isn't a factory if you need to pass the params on each invocation. If it's something large it's no bueno. That's what tk wanted.
[13:30:44] <FromDiscord> <Zoom> He wanted to instantiate a factory and use it repeatedly.
[13:30:58] <FromDiscord> <Zoom> That's why it returns a proc
[13:31:14] <FromDiscord> <Elegantbeef> I feel like the solution is just to make an object on instantiation that holds a single value, and the defaults
[13:31:40] <FromDiscord> <Rika> I honestly still don’t get the full picture of what he wants
[13:31:42] <FromDiscord> <Zoom> My initial question was simply how to extract the function from the body of that factory
[13:31:51] <FromDiscord> <Rika> Extract in what way?
[13:32:01] <FromDiscord> <Zoom> It doesn't matter! We discuss a piece of code in isolation.↵(@Rika)
[13:32:08] <FromDiscord> <Rika> Okay understood
[13:32:21] <FromDiscord> <Rika> What do you exactly mean when you say extract
[13:32:54] <FromDiscord> <Zoom> Extract our of the enclosing procedure.
[13:32:56] <tk> I basically want new_iterator = functools.partial(iterator, params...)
[13:33:13] <tk> where new_iterator can be used to instantiate and isn't already instantiated
[13:33:31] <FromDiscord> <Rika> You call the function and store the return type, now you have “fl
[13:33:36] <FromDiscord> <Rika> “F”, sorry typo
[13:34:28] <FromDiscord> <Rika> If you want to make iterators you then call f and use the return type
[13:34:43] <FromDiscord> <Rika> Being mindful that the returned iterators are stateful
[13:41:34] <FromDiscord> <Zoom> Ok, I think I know how to rephrase the issue. In the first example the returned procedure takes it's parameters from the enclosing context. If you extract the proc it now needs to take in an arg, but if I pass it, compiler treats it as an instantiation of that function
[13:41:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F8K
[13:41:46] <FromDiscord> <Zoom> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/910109833246670848): Ok, I think I know how to rephrase the issue. In the first example the returned procedure takes its parameters from the enclosing context. If you extract the proc it now needs to take in an arg, but if I pass it, compiler treats it as an instantiation of that function
[13:42:10] <FromDiscord> <Elegantbeef> It's not instantiating a new `it` on the next invocation of `a`
[13:42:12] <FromDiscord> <Rika> Beef because you’re calling f again which is returning a fresh iterator?
[13:42:14] <FromDiscord> <Zoom> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/910109833246670848): Ok, I think I know how to rephrase the issue. In the first example the returned procedure takes its parameters from the enclosing context. If you extract the proc it now needs to take in an arg, but if I pass it, compiler treats it as an invocation of that function
[13:42:27] <FromDiscord> <Elegantbeef> That's what you'd expect but no the iterator state is fucked
[13:42:38] <FromDiscord> <Rika> God someone replace the matrix bridge
[13:42:41] <FromDiscord> <Rika> It’s so fucked
[13:43:09] <FromDiscord> <Rika> Beef sounds like a bug now time for you to do what you always do
[13:43:09] <FromDiscord> <Elegantbeef> Ah nvm you're probably right
[13:43:10] <FromDiscord> <Rika> Half kidding
[13:43:16] <FromDiscord> <Rika> Oh lol
[13:45:08] <PMunch> @Zoom, so you want something like this? https://play.nim-lang.org/#ix=3F8L
[13:45:31] <PMunch> Create a factory with arguments, then call the factory without an argument and get fresh iterators of the same kind every time
[13:45:55] <FromDiscord> <Rika> Yeah I think the factory naming is kinda misleading
[13:46:12] <FromDiscord> <Rika> “Iterator factory” is actually an “iterator factory factory”
[13:46:13] <FromDiscord> <Zoom> I already got that in the first example↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:46:30] <tk> it's not an iterator factory, it's an iterator factory factory
[13:46:36] <tk> the iterator factory is what it returns
[13:46:46] <PMunch> No one buys hammers any more
[13:47:05] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F8O hmmm does this meet any criteria?
[13:47:20] <FromDiscord> <Elegantbeef> Using the iterator inline instantiates a new iterator every tick which causes badnews
[13:48:33] <FromDiscord> <Rika> Yup that’s what I said TK
[13:48:39] <FromDiscord> <Rika> PMunch nice
[13:48:40] <tk> at least it's not a an abstract singleton proxy factory bean
[13:48:46] <FromDiscord> <Rika> Welcome to Java hell I guess
[13:49:33] <tk> ah yea, the iterator thing, I found that bug yesterday (where it loops forever0
[13:49:36] <tk> I was confused too
[13:49:40] <PMunch> I'm still not sure why the last code snippet I shared isn't exactly what you want?
[13:49:40] <FromDiscord> <Rika> It’s not really a bug
[13:49:44] <tk> I wasn't sure if I had done something wrong or not
[13:49:47] <FromDiscord> <Rika> It’s just a confusing idea
[13:49:51] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8P
[13:49:57] <FromDiscord> <Rika> ?
[13:50:11] <FromDiscord> <Zoom> Now I want to take `f` out somehow↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:50:14] <FromDiscord> <Rika> You just changed the name? Or am I being blind
[13:50:17] <FromDiscord> <Elegantbeef> Yea tk i just threw a bunch of guesses at it until it stopped running
[13:50:19] <tk> Well yes, the abstract singleton proxy factory bean^W^W^W^Witerator factory factory IS what I want
[13:50:26] <tk> it's exactly what I came up with
[13:50:32] <PMunch> `result = proc (): iterator (): int`
[13:50:33] <tk> but the problem is that it's clunky
[13:50:39] <PMunch> Instead of proc f and then return f
[13:51:00] <PMunch> tk, well it's a clunky concept :P
[13:51:04] <tk> is it really?
[13:51:07] <tk> it's not clunky in python
[13:51:09] <PMunch> But you could always make a template or something out of it
[13:51:11] <FromDiscord> <Rika> ~~you can even omit the result = part~~
[13:51:23] <tk> right, the problem is having to call 50 times
[13:51:28] <tk> the syntax still confuses me
[13:51:28] <PMunch> tk, I mean it's a clunky OO pattern :P
[13:51:32] <tk> not really
[13:51:32] <FromDiscord> <Elegantbeef> tk i'm going to see if i can abstract this any using a macro tomorrow
[13:51:42] <tk> this has nothing to do with OO, it could be an entirely functional concept
[13:51:43] <PMunch> We typically don't do that in Nim
[13:51:56] <FromDiscord> <Elegantbeef> I do like the idea of a resetable closure
[13:51:57] <tk> in fact, I could write this in scheme with fewer parentheses
[13:52:01] <FromDiscord> <Rika> Beef you mean you’re gonna make a partial function applicator?
[13:52:08] <tk> (actually, don't quote me on that, I'm sure there will be more parentheses)
[13:52:10] <FromDiscord> <Elegantbeef> I dont speak french
[13:52:12] <tk> but it's just partial function application
[13:52:13] <FromDiscord> <Rika> Don’t we have that already
[13:52:16] <FromDiscord> <Rika> Yes
[13:52:18] <FromDiscord> <Zoom> Could you show it to me on the example I provided please?↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:52:23] <tk> and if iterators were just "functions" then it would work
[13:52:26] <tk> but it doesn't
[13:52:32] <PMunch> @Zoom, which one?
[13:52:44] <tk> now I get why iterators aren't "just functions™" but it doesn't mean that this should be entirely applicable to them
[13:53:06] <PMunch> Hmm, someone has to have written a partial function application library in Nim
[13:53:15] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8Q
[13:53:17] <PMunch> It's just a little bit of macro magic I believe
[13:53:34] <FromDiscord> <Elegantbeef> I wager as such, but i still dont speak french 😛
[13:53:35] <FromDiscord> <Zoom> Can you do it without macro?
[13:54:02] <tk> Zoom: I don't think you have to specify {.closure.} there explicitly, it's implicit since you're returning it to begin with
[13:54:06] <PMunch> @Zoom: https://play.nim-lang.org/#ix=3F8S
[13:54:11] <tk> at least that's how I justify it in my head
[13:54:19] <PMunch> Yes, it should be implicit
[13:54:25] <FromDiscord> <Elegantbeef> Indeed tk, iterators in typedefs are implicitly closures
[13:54:26] <FromDiscord> <Rika> Beef you better speak french
[13:54:37] <FromDiscord> <Elegantbeef> Nah i'm a terrible Canadian
[13:54:50] <FromDiscord> <Zoom> ? The function body is still inside.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[13:54:55] <FromDiscord> <Rika> Nah I’m pretty sure only those in Quebec actually speak french
[13:55:16] <tk> I like how in the process of trying to use nim to solve 2019 AOC I have found 2 weird compiler bugs and started an intense discussion about iterators
[13:55:19] <FromDiscord> <Elegantbeef> Quebec, NB, Alberta have sizeable francophones
[13:55:35] <FromDiscord> <Rika> I’m not from Canada I don’t know what NB means
[13:55:44] <FromDiscord> <Rika> New Banana
[13:55:53] <FromDiscord> <Elegantbeef> New Brunswick it's a province
[13:56:09] <FromDiscord> <Rika> Hey I got one word right
[13:56:25] <tk> that's a 50% success rate, otherwise known as a majority
[13:56:31] <FromDiscord> <Elegantbeef> Well the one bug isnt that weird
[13:56:37] <FromDiscord> <Rika> No a majority is 50%+1
[13:56:52] <FromDiscord> <Elegantbeef> Nim has multiple bugs using typeclasses as return types since not one bothers to check if that's the case
[13:57:16] <tk> Elegantbeef: Except for the fact that if you don't store it in a variable it doesn't break, and if you move the closure out of the function it doesn't break
[13:57:22] <tk> so it's kind of still weird
[13:57:33] <tk> but sure, it's a weird corner case
[13:57:43] <FromDiscord> <Elegantbeef> No i mean the using built in typeclass as return type error
[13:58:03] <tk> yeah, that's also the one I meant
[13:58:07] <tk> this is the other one https://github.com/nim-lang/Nim/issues/19154
[13:58:07] <FromDiscord> <Rika> What’s that error?
[13:58:11] <PMunch> @Zoom, wait you don't want the function body inside your function?
[13:58:19] <tk> Rika: https://github.com/nim-lang/Nim/issues/19153
[13:58:21] <PMunch> That's where function bodies are supposed to be..
[13:58:33] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/issues/19153 if you just check if the return type on `semProc` is a `tyBuiltInTypeClass` or `tyUserTypeClass` the error goes away
[13:59:02] <FromDiscord> <Elegantbeef> Araq says that typeclasses shouldnt be usable there or for variable instantiations, so it probably should be done
[13:59:45] <FromDiscord> <Zoom> Yep, that's literally what my first question today was.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[14:00:10] <FromDiscord> <Rika> So that’s what you mean by extract….
[14:01:02] <tk> No, that's not what I meant by extract
[14:01:08] <tk> or what zoom meant I don't thinl
[14:01:10] <FromDiscord> <Rika> No I mean zoom
[14:01:17] <FromDiscord> <Rika> Really?
[14:01:21] <tk> zoom meant what I meant because I think he's on the same page as me
[14:01:35] <tk> in any case
[14:01:44] <tk> I need to get back to work.
[14:01:48] <FromDiscord> <Zoom> You're overestimating me 😅↵(<@709044657232936960_tk=5b=49=52=43=5d>)
[14:01:49] <FromDiscord> <Rika> See you
[14:02:15] <tk> ah, so THAT's what the weird number thing is
[14:02:23] <tk> (<@709044657232936960_tk=5b=49=52=43=5d>) - it's a reference to an IRC user
[14:02:27] <tk> horrific
[14:02:37] <FromDiscord> <Rika> No a reference to a discord user
[14:02:46] <tk> But I don't exist on discord.
[14:02:53] <FromDiscord> <Rika> You do technically
[14:03:00] <tk> Wow, I feel mildly violated.
[14:03:07] <tk> For real though, I have to go.
[14:03:13] <FromDiscord> <Rika> It’s irc <> discord <> matrix
[14:04:09] <PMunch> Yeah those numbers aren't great..
[14:04:24] <PMunch> It also means I don't get pinged when you reply to me..
[14:04:33] <PMunch> Because that weird ID string doesn't contain my name
[14:04:45] <FromDiscord> <Elegantbeef> I mean who wants to talk to you anyway 😛
[14:04:59] <PMunch> Jokes on you, you're talking to me right now!
[14:05:18] <FromDiscord> <Elegantbeef> This cant be so!
[14:05:23] <FromDiscord> <Elegantbeef> I now go to sleep, so jokes on you
[14:05:44] <PMunch> Good night
[14:07:19] <FromDiscord> <Rika> Imagine sleeping
[14:07:28] <FromDiscord> <Rika> I just down my 5th cup of espresso
[14:13:27] <FromDiscord> <Zoom> Anyway, Rika might have been somewhat correct in his evaluation. I'm dumb.
[14:14:43] <FromDiscord> <Rika> Well let’s just say everything that just happened was a massive lump of miscommunication
[14:14:46] <FromDiscord> <Rika> Sorry
[14:14:54] <FromDiscord> <Zoom> sent a code paste, see https://play.nim-lang.org/#ix=3F8W
[14:17:55] <PMunch> I guess you could also make a template to easy the usage of this pattern
[14:18:01] <FromDiscord> <Zoom> I'm sorry too for being too mordant.↵(@Rika)
[14:18:08] <FromDiscord> <Rika> What does mordant mean
[14:18:14] <FromDiscord> <Rika> Lol okay wait I’ll search it
[14:18:27] <FromDiscord> <Rika> Oh
[14:21:33] <FromDiscord> <Zoom> Don't know how usable it is, but I think in some cases it would be preferable to `reset` macro magic by Beef.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[14:22:07] <PMunch> Maybe something like this: https://play.nim-lang.org/#ix=3F8Y
[14:22:59] <PMunch> A tiny bit of macro magic and you can even turn that into a pragma
[14:23:18] <PMunch> But that's left as an exercise for the reader
[14:23:26] <FromDiscord> <Zoom> That looks nice
[14:24:56] <FromDiscord> <retkid> hety
[14:24:57] <FromDiscord> <retkid> (edit) "hety" => "hey"
[14:25:02] <PMunch> Hello
[14:25:11] <FromDiscord> <retkid> it appears that writeFile is having problems writing a large amount of data
[14:25:24] <FromDiscord> <retkid> ie 8000 images in a json format with 260 mbs of t ext
[14:25:26] <FromDiscord> <retkid> (edit) "t ext" => "text"
[14:25:38] <FromDiscord> <retkid> is this expected behaviour
[14:26:06] <PMunch> Define problems
[14:26:09] <FromDiscord> <Rika> I mean that’s a lot of data
[14:26:11] <FromDiscord> <retkid> i should probably put those images into base 96 anyway
[14:26:25] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/910121117434396692/unknown.png
[14:26:33] <PMunch> You should probably not store those images as JSON :P
[14:26:41] <FromDiscord> <retkid> wellllll
[14:26:56] <FromDiscord> <retkid> its raw image data
[14:26:57] <FromDiscord> <retkid> (edit) "its raw image data ... " 03added "as a string"
[14:27:01] <FromDiscord> <retkid> in a class
[14:27:38] <PMunch> So save that as an image and put references to them in your JSON?
[14:27:50] <PMunch> JSON really isn't a good choice for binary data
[14:28:32] <FromDiscord> <retkid> but its more convenient to just query the server and get sent the data
[14:28:50] <FromDiscord> <retkid> im gonna encode it
[14:28:57] <FromDiscord> <retkid> it works fine with like 100 images
[14:29:06] <FromDiscord> <retkid> (edit) "100" => "1000"
[14:30:34] <PMunch> But you're going to be sending so much more data than you actually need to send :S
[14:30:59] <FromDiscord> <Rika> Is there a reason you use json
[14:31:09] <FromDiscord> <retkid> just because marshal
[14:31:18] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=
[14:33:54] <FromDiscord> <Rika> There are better formats you can use that are already implemented, just in other libraries
[14:33:58] <PMunch> Hmm, I have a program that is just sending and receiving DNS messages. It works perfectly fine for about 1500 queries, but then suddenly it stops working and just piles up memory until it crashes
[14:34:12] <PMunch> Up until that point memory usage is completely static
[14:34:16] <FromDiscord> <Rika> Debugger time I assume
[14:34:57] <PMunch> I mean I'm not even sure what to debug..
[14:35:13] <PMunch> It's just killed by zsh for consuming a lot of memory
[14:35:48] <PMunch> It also jumps from 12.5% CPU to 100% CPU
[14:35:55] <PMunch> Right before crashing
[14:37:48] <FromDiscord> <Rika> Yeah maybe step through the program or so
[14:38:01] <FromDiscord> <Rika> Wait I don’t think that would work well
[14:38:47] <FromDiscord> <retkid> In reply to @Rika "There are better formats": can you give me an example for a better format for seralization
[14:38:50] <FromDiscord> <retkid> (edit) "seralization" => "serialization"
[14:39:19] <FromDiscord> <retkid> i upgraded from Marshal but apparently↵ im still not a cool kid
[14:39:23] <FromDiscord> <retkid> (edit) "apparently↵" => "apparently"
[14:39:47] <FromDiscord> <enthus1ast> @retkid\: maybe msgpack is more efficient and quite the same convince
[14:40:07] <FromDiscord> <enthus1ast> But idk how well it packs binary data
[14:40:14] <FromDiscord> <retkid> I've added a base64 encoder
[14:40:17] <FromDiscord> <retkid> i thought it would be a pain
[14:40:22] <FromDiscord> <retkid> (edit) "i thought it would be a pain ... " 03added "but it seems really simple"
[14:40:27] <FromDiscord> <retkid> literally juse
[14:40:28] <FromDiscord> <retkid> (edit) "juse" => "just"
[14:40:30] <FromDiscord> <retkid> encode()
[14:40:37] <FromDiscord> <Rika> Message pack protocol buffers CBOR BSON etc
[14:41:04] <FromDiscord> <Rika> Is there a reason these images aren’t just hosted as images and have to be in json?
[14:41:34] <FromDiscord> <retkid> I think it'll just be more convenient and simple on the frontend
[14:41:51] <FromDiscord> <Rika> Convenient I don’t think so
[14:46:58] <FromDiscord> <retkid> In reply to @Rika "Convenient I don’t think": it'll literally be decodeURIComponent(escape(window.atob(img)));
[14:47:07] <PMunch> Remember you'd have to demarshal and rebuild the images in JS on the grontend..
[14:47:08] <FromDiscord> <retkid> (edit) "In reply to @Rika "Convenient I don’t think": it'll literally be decodeURIComponent(escape(window.atob(img)));" => "sent a code paste, see https://paste.rs/OV0"
[14:47:21] <FromDiscord> <retkid> In reply to @PMunch "Remember you'd have to": thats already done
[14:47:22] <PMunch> Instead of just creating an image tag with a url
[14:47:26] <FromDiscord> <Rika> And if you just hosted it normally you wouldn’t need to do any of this demarshalling
[14:47:34] <PMunch> And let the browser handle the heavy lifting
[14:47:59] <PMunch> Your site would be pretty slow if it's loading all that JavaScript and demarshalling it into images is my guess
[14:48:32] <FromDiscord> <retkid> i suppose you are right but im afraid I'll be pinging sites too many times if people use it and people will be on my ass
[14:48:45] <FromDiscord> <retkid> but
[14:48:49] <FromDiscord> <retkid> maybe im just paranoid
[14:48:55] <FromDiscord> <retkid> probably doesn't matter
[14:48:57] <FromDiscord> <Rika> You can cache it on your backend
[15:01:43] <FromDiscord> <PutoPie> how do i install nim on raspberry pi 4? I've downloaded nim-1.7.1-linux_arm64.tar.xz
[15:05:18] <FromDiscord> <Zoom> Why not use the one your disto package manager offers?↵(@PutoPie)
[15:06:32] <PMunch> Those tend to be quite out of date..
[15:07:47] <FromDiscord> <Zoom> But then you can compile choosenim
[15:14:15] <PMunch> Ah, so you want to use the built-in package to build choosenim then install Nim through choosenim and remove the distro package?
[15:14:22] <FromDiscord> <hmmm> boys if nim -v says Windows: i386 it measn I have the 32bit version of nim?
[15:14:52] <FromDiscord> <Schelz> I have a question I want to make a read request from a local webpage with nginx but I enabled auth so when i make a requst i have to login first with POST and i dont know how.
[15:15:57] <FromDiscord> <Schelz> For example ik that it would something like this http://user:passwd@192.168.0.185/Example
[15:16:18] <FromDiscord> <Schelz> (edit) "http://user:passwd@192.168.0.185/Example" => "http:/user:passwd@192.168.0.185/Example"
[15:23:55] <FromDiscord> <Yardanico> In reply to @Schelz "I have a question": that's usually basic authentication
[15:23:56] <FromDiscord> <hotdog> In reply to @Schelz "I have a question": You need to set a header
[15:24:06] <FromDiscord> <Yardanico> it's not in httpclient but it's pretty simple to do just by setting a header with correct values
[15:24:16] <FromDiscord> <hotdog> Yeah ^
[15:24:40] <FromDiscord> <hotdog> It'll be something like `Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==`
[15:24:53] <FromDiscord> <hotdog> With the correct details of course
[15:25:13] <FromDiscord> <Yardanico> yeah, @Schelz , Basic auth is just "login:password" base64-encoded
[15:27:44] <FromDiscord> <Rika> ~~please don’t use in prod~~
[15:28:20] <FromDiscord> <Yardanico> yeah basic auth is pretty outdated nowadays, and if you're not using https you're basically sending your login and password over the internet in cleartext
[15:30:15] <pro> but if you put nginx with tls infront ?
[15:30:31] <FromDiscord> <Yardanico> well I specifically said "not https"
[15:30:41] <FromDiscord> <Yardanico> with https headers are encrypted so only you and the server see them
[15:34:09] <FromDiscord> <Schelz> So i have to done it from nginx ?
[15:34:22] <FromDiscord> <Yardanico> @Schelz nonono, if you just need basic auth you just set a header with correct values
[15:34:44] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3F9e
[15:35:07] <FromDiscord> <Schelz> Perfect example thx
[15:35:15] <FromDiscord> <Yardanico> as others said above, basic authentication is just an `Authentication` header with `Basic ` and base64-encoded login<colon>password
[15:35:34] <FromDiscord> <Schelz> Got it know
[15:35:41] <FromDiscord> <Schelz> (edit) "know" => "now"
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:11] <FromDiscord> <Yardanico> mdn has quite a lot of docs for things like that, for example https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:44:41] <FromDiscord> <hmmm> hmm how can I tell choosenim I want the 64bit
[15:47:32] <FromDiscord> <PutoPie> sent a code paste, see https://play.nim-lang.org/#ix=3F9h
[15:48:36] <FromDiscord> <Yardanico> In reply to @PutoPie "I tried installing nim": any reason why you won't download the choosenim binary so you don't have to compile it yourself?
[15:48:43] <FromDiscord> <Yardanico> probably nim in your distro is very old
[15:50:32] <FromDiscord> <PutoPie> its 0.19.4 🤷‍♂️
[15:50:34] <FromDiscord> <Zoom> I've recently compiled choosenim on for 32bit on debian bullseye without issues.
[15:50:40] <FromDiscord> <Zoom> Yep, that's old
[15:51:53] <FromDiscord> <Yardanico> In reply to @PutoPie "its 0.19.4 🤷‍♂️": yes that is very old, so it's better if you download the choosenim binary
[15:52:05] <FromDiscord> <Yardanico> or download compiled nim 1.6 if you really want to compile choosenim yourself
[15:52:11] <FromDiscord> <Zoom> He's on arm, there's no binaries
[15:52:11] <FromDiscord> <Yardanico> also don't forget to uninstall your distro-installed nim
[15:52:13] <FromDiscord> <Yardanico> In reply to @Zoom "He's on arm, there's": there are
[15:53:13] <FromDiscord> <Yardanico> https://github.com/nim-lang/nightlies/releases/tag/latest-version-1-6
[15:53:21] <FromDiscord> <Yardanico> despite the "nightlies" name it's the build from the 1.6 branch
[15:53:29] <FromDiscord> <Yardanico> and there are binaries for amd64 and armv7l
[15:54:06] <FromDiscord> <hmmm> hmm apparently choosenim checks your installed mingw version and just decides "yea dude you will be fine with the 32bit"
[15:54:36] <FromDiscord> <hmmm> so I just went and grabbed the 64zip the primitive way and ran finish.exe
[15:54:37] <FromDiscord> <Yardanico> In reply to @Yardanico "and there are binaries": i meant arm64 and armv7l (if we're talking about arm)
[15:54:37] <FromDiscord> <Zoom> Wait, there aren't choosenim binaries.↵(@Yardanico)
[15:54:51] <FromDiscord> <Yardanico> In reply to @Zoom "Wait, there aren't choosenim": yes, but if he wants to compile choosenim he needs a recent nim anyway
[15:54:57] <FromDiscord> <PutoPie> yes i downloaded .tar.xz in github, now how do I install it on raspberry pi? Is there a way like on windows you can add the path of the .exe to the PATH then you can call .exe anywhere?
[15:55:01] <PMunch> You can also unzip and to `choosenim .` IIRC
[15:55:13] <FromDiscord> <Yardanico> In reply to @PutoPie "yes i downloaded .tar.xz": yes
[15:55:33] <NimEventer> New thread by JPLRouge: I made a publication, a job with MSGSHM, see https://forum.nim-lang.org/t/8633
[15:55:33] <FromDiscord> <Yardanico> you need unpack the archive and add the "bin" folder inside of it to your PATH
[16:00:04] <FromDiscord> <Zoom> I like how JPLRouge skips full stops in this post and then just puts a bunch of them to compensate.
[16:00:41] <FromDiscord> <PutoPie> In reply to @Yardanico "you need unpack the": i'll copy the contents of nim-1.7.1/bin to /bin?
[16:00:49] <FromDiscord> <Yardanico> nonono
[16:01:08] <FromDiscord> <Yardanico> you just uncompress the whole nim folder, move it anywhere you like, and add nim/bin folder to your PATH
[16:01:31] <FromDiscord> <Yardanico> so e.g. you can move your `nim-1.7.1` to `/home/myuser/nim/` and then add `/home/myuser/nim/bin` to PATH
[16:04:23] <FromDiscord> <PutoPie> oh I get it now,  i will have to add to evironment variable, thanks
[16:05:23] <PMunch> Well this was a dumb error.. My program kept crashing, turns out `readChar`, unlike all the other stream reading procedures return 0 as an EOF marker instead of throwing an IOException..
[16:06:36] <PMunch> @Zoom, that is certainly one way of doing it.. >_<
[16:42:34] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@45.131.36.116)
[16:45:46] *** Quits: neurocyte0132889 (~neurocyte@45.131.36.116) (Changing host)
[16:45:46] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:50:26] <FromDiscord> <dom96> In reply to @hmmm "hmm apparently choosenim checks": If you want 64bit why do you have a 32bit mingw in your PATH? 🙂
[16:50:58] <FromDiscord> <hmmm> that's a very intriguing question lol
[16:50:59] <FromDiscord> <dom96> But yeah. We should make choosenim ask
[16:51:02] <FromDiscord> <hmmm> I don't know!
[16:51:09] <FromDiscord> <hmmm> 😊
[16:51:16] <FromDiscord> <dom96> But then you run risk of mismatches
[16:51:46] <FromDiscord> <hmmm> the primitive way was well set imo, you grab the zip 64, and finish will set the PATHs and will also download the correct mingw
[16:51:58] <FromDiscord> <hmmm> choosenim should do the same maybe
[16:52:58] <FromDiscord> <dom96> You can run into a broken install though.
[16:53:12] <FromDiscord> <dom96> If your 32 bit gcc is in front of the installed one
[16:53:32] <FromDiscord> <hmmm> hmm, I guess I will need to clean the house a bit
[16:54:35] <FromDiscord> <hmmm> don't wtf is happening with my compilers tbh I have 2 mingw, 1 winbuilds, 1 msys64 laying around
[16:54:49] <FromDiscord> <hmmm> I guess it all works out? lol
[16:55:09] <FromDiscord> <Rika> Lmao
[17:02:06] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[17:07:30] <PMunch> Hmm, I'm still not entirely sure what's "legal" and not when it comes to ARC and threading..
[17:12:51] <FromDiscord> <dom96> Stop. You have committed an offence against the ARC of Nim
[17:13:15] <FromDiscord> <Clonkk> Try mixing that with sharing ref through channels so it's even more fun to debug↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[17:16:41] <PMunch> @Clonkk, oh I've got significantly more "sinister" plans :P
[17:16:56] <PMunch> Trying "steal" an iterator from one thread to another
[17:17:06] <PMunch> Without the first thread being involved at all
[17:17:23] <PMunch> Just copying the ref to the iterator from one thread to the other
[17:31:32] <FromDiscord> <tandy> [Elegantbeef](https://matrix.to/#/@elegantbeef:matrix.org)\: honorable mention in the readme https://gitlab.com/tandy1000/listenbrainz-nim
[17:34:41] <FromDiscord> <Yardanico> https://github.com/vanyle/SublimeNim
[17:34:57] <FromDiscord> <Yardanico> seems like a plugin based (at least syntax) on nimlime for st4
[17:35:11] <FromDiscord> <Yardanico> "Pull requests are not welcome. Fork this project if you want to add stuff. Open an issue if you have a problem." 😕
[17:37:48] <PMunch> Haha, that's a weird line to take :P
[17:39:26] <FromDiscord> <Yardanico> i mean it's nothing bad, it's up to everyone to decide how they want their repos to be :)
[17:39:31] <FromDiscord> <Yardanico> but yeah, kinda unusual
[17:40:38] <FromDiscord> <Recruit_main707> I guess they have plans already made
[17:44:21] <FromDiscord> <Clonkk> Well it must not be ready yet, I tried it it doesn't highlight syntax↵(@Yardanico)
[17:44:28] <FromDiscord> <Yardanico> huh? that's weird
[17:44:35] <FromDiscord> <Yardanico> it does highlight in the screenshot shown
[17:46:35] <FromDiscord> <Clonkk> Ah interesting
[17:46:45] <FromDiscord> <Clonkk> I had to dsiable NeoVintageous to get it to work
[17:46:50] <FromDiscord> <Clonkk> Then once I re-enabled it
[17:46:54] <FromDiscord> <Clonkk> It's fine
[17:58:03] *** Joins: arkurious (~arkurious@user/arkurious)
[18:44:15] <tk> Okay, I just want something like file.lines but where I control the separator to be something else. Am I supposed to provide Stream overloads for nxt and atom and use pscan or what?
[18:45:41] <tk> (i.e., I want to parse things out of a stream without necessarily reading the entirety of it all at once because it may be too large or potentially "infinite")
[18:48:12] <FromDiscord> <Clonkk> sent a code paste, see https://play.nim-lang.org/#ix=3FaG
[18:48:38] <FromDiscord> <Clonkk> Ah nvm, you just added "without reading the entire things" ^^
[19:27:31] <FromDiscord> <IsaacPaul> In reply to @tk "Okay, I just want": https://nim-lang.org/docs/memfiles.html↵the lines function allows you to specify a delimiter
[19:28:54] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[19:30:25] <FromDiscord> <IsaacPaul> This looks like it does exactly what you want to do.. but.. I was wrong before so 🤷‍♂️  😂
[19:33:03] <tk> yes, this looks promising
[19:34:28] <NimEventer> New post on r/nim by SamLovesNotion: How to create a 'then' macro which can be used instead of ':' in if statements?, see https://reddit.com/r/nim/comments/qvb2ub/how_to_create_a_then_macro_which_can_be_used/
[19:46:38] <FromDiscord> <Schelz> sent a long message, see http://ix.io/3FaZ
[19:47:01] <FromDiscord> <Schelz> (edit) "http://ix.io/3FaZ" => "http://ix.io/3Fb0"
[19:47:47] <FromDiscord> <Schelz> (edit) "http://ix.io/3Fb0" => "http://ix.io/3Fb1"
[19:48:20] <FromDiscord> <Schelz> (edit) "http://ix.io/3Fb1" => "http://ix.io/3Fb2"
[19:48:27] <FromDiscord> <Schelz> (edit) "http://ix.io/3Fb2" => "https://paste.rs/sZF"
[19:48:52] <tk> incidentally, the FromDiscord bot could just use ix.io's edit feature to edit an existing paste
[19:49:50] <FromDiscord> <enthus1ast> @Schelz\: what crashes and how (what error?)
[19:50:34] <FromDiscord> <Schelz> i compile it with nim c Test.nim
[19:51:12] <FromDiscord> <Schelz> its not printing any error at the compiling only when run the exe bump up console and close instantly
[19:51:55] <FromDiscord> <enthus1ast> Run it from a terminal so that it won't close immediately
[19:51:56] <FromDiscord> <Schelz> it could be from an arg ?
[19:52:35] <FromDiscord> <Schelz> the request was printed so fast that the console dont even had time to print it
[19:52:44] <FromDiscord> <Schelz> (edit) "print" => "see"
[19:52:48] <FromDiscord> <dom96> yeah, you need to run cmd.exe manually
[19:52:50] <FromDiscord> <Schelz> got it working from terminal
[19:52:53] <FromDiscord> <dom96> and then run your program from it
[19:52:55] <FromDiscord> <Schelz> thx
[19:53:06] <FromDiscord> <dom96> you can also use `nim c -r test.nim` to compile and run
[19:53:29] <FromDiscord> <Schelz> i forgot about that -r 😆
[19:54:23] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[19:59:24] <FromDiscord> <hmmm> very suspect
[20:00:21] *** Joins: audiophile_ (~audiophil@user/audiophile)
[20:01:21] <FromDiscord> <hmmm> if I call my program.nim exe in terminal it executes normally, if I change folder and call C:\Path\to\program.exe I get a io.nim(853) unhandled exception: cannot open: unrelatedfile.json
[20:04:42] <FromDiscord> <Recruit_main707> may you post the exact commands?
[20:08:58] <FromDiscord> <hmmm> well it shouldn't matter in theory, if it works inside the folder I don't see why it wouldn't outside the folder. I'm cleaning up a bit and see if I can reduce the bullshit
[20:10:29] <FromDiscord> <Recruit_main707> thats why i think you must be doing somrthing wrong when calling it
[20:11:04] <FromDiscord> <hmmm> I mean it's a path 🧐
[20:13:09] <FromDiscord> <Rika> thats how cwd works?
[20:14:43] <FromDiscord> <Rika> any "bare filenames" (in reality relative paths, ex. `filename.ext` or so) gets "translated by the os" into cwd / filename (absolute paths, `C:\...\filename.ext` or so)
[20:14:54] <FromDiscord> <Rika> at least that's the common behavior
[20:15:36] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[20:16:36] <FromDiscord> <hmmm> the path is fine if I change .exe to .nim it opens vscode with the file
[20:17:27] <FromDiscord> <Rika> i dont understand what the issue is now, more context is needed
[20:19:53] <FromDiscord> <hmmm> I can't even explain it lol it's just weird, it all started when I wanted to execute this shit with task scheduler. Ofc task scheduler can't. So I went to the rabbit hole and started scripting batch files that called the exes so I task schedule those, but then I discovered this weird shit that from outside the folder I cannot call the exe just won't run, while from inside it runs. I thought it had to do with elevated priviledge but it's not
[20:20:19] <mikko> sounds like you just have the wrong working directory
[20:20:27] <mikko> https://superuser.com/questions/396394/how-do-i-set-an-executables-working-directory-via-the-command-line-prior-to-ex
[20:21:04] <FromDiscord> <hmmm> hmm
[20:21:18] <FromDiscord> <Rika> pretty much as i said yeah but i thought you knew what cwd meant
[20:21:39] *** Joins: rockcavera (~rc@192.12.112.227)
[20:21:39] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[20:21:39] *** Joins: rockcavera (~rc@user/rockcavera)
[20:26:01] <FromDiscord> <hmmm> oh I see you need to tell terminal the working directory because he doesn't know
[20:36:18] <FromDiscord> <hmmm> yay it works, apparently the batch incantation is: start /d "C:\Path\To" program.exe
[20:36:24] *** Joins: u0_a185 (~u0_a185@2001:ce8:131:5f61:240b:ff95:9fa1:6caa)
[20:36:24] <FromDiscord> <hmmm> windows is weird as hell
[20:36:31] <FromDiscord> <hmmm> mikko :nim1:
[20:43:36] *** Quits: u0_a185 (~u0_a185@2001:ce8:131:5f61:240b:ff95:9fa1:6caa) (Quit: WeeChat 3.0.1)
[21:15:04] <NimEventer> New post on r/nim by SamLovesNotion: nimlsp is looking for system.nim file inside project directory [Neovim], see https://reddit.com/r/nim/comments/qvdeor/nimlsp_is_looking_for_systemnim_file_inside/
[21:17:50] *** Joins: audiophile_ (~audiophil@user/audiophile)
[21:38:41] *** Joins: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[22:09:55] <FromDiscord> <Schelz> Why is nimpy not working to install ? https://media.discordapp.net/attachments/371759389889003532/910237763369041991/unknown.png
[22:21:24] <NimEventer> New post on r/nim by SamLovesNotion: Where can I find the docs for Nim config files like `nim.cfg`, `xyx.nims` and `xyz.nimble`?, see https://reddit.com/r/nim/comments/qveyyf/where_can_i_find_the_docs_for_nim_config_files/
[22:29:26] <NimEventer> New post on r/nim by SamLovesNotion: Where can I find the docs for Nim .cfg config files like `nim.cfg`?, see https://reddit.com/r/nim/comments/qvf5o4/where_can_i_find_the_docs_for_nim_cfg_config/
[22:36:05] <FromDiscord> <hotdog> In reply to @Schelz "Why is nimpy not": What version of Nim?
[22:36:12] <FromDiscord> <hotdog> And what's the contents of that file?
[22:36:39] <FromDiscord> <Schelz> sent a long message, see http://ix.io/3FbL
[22:37:03] <FromDiscord> <Schelz> the version i think its v0.9.0
[22:37:10] <FromDiscord> <Schelz> im on rpi 4 so....
[22:46:43] <tk> is the 1.6 tag buildable?
[22:47:10] <FromDiscord> <dom96> In reply to @Schelz "the version i think": that's a very old version
[22:51:53] <FromDiscord> <Schelz> i just typed sudo apt install nim
[22:52:02] <FromDiscord> <Schelz> thats the version i got 😆
[22:53:33] <FromDiscord> <Schelz> try to get from the nim page the tar and install it manually
[22:53:39] <FromDiscord> <Schelz> (edit) 
[22:53:55] <FromDiscord> <reilly> In reply to @Schelz "i just typed sudo": Yes, sadly the apt version is quite out of date
[22:55:32] <FromDiscord> <Rika> Quite?
[22:55:56] <FromDiscord> <Rika> You’re saying that as if 0.9 isn’t over 15 versions old
[22:56:36] <FromDiscord> <reilly> Very out of date.
[22:56:37] <FromDiscord> <Rika> I don’t even think there is online documentation for 0.9
[22:58:08] <FromDiscord> <Schelz> Hahaa lol
[23:05:36] <FromDiscord> <dom96> https://nim-lang.org/blog/2012/09/23/version-090-released.html
[23:05:38] <FromDiscord> <dom96> 2021!
[23:05:43] <FromDiscord> <dom96> (edit) "2021!" => "2012!"
[23:06:28] <FromDiscord> <dom96> "Closures have been implemented." those were the days
[23:06:29] <FromDiscord> <Schelz> you actually find it lol
[23:09:23] <FromDiscord> <Schelz> well lets say i kinda got i work like i download the tar file and install the ./install.sh in the /usr/bin/nim but i get an error
[23:09:30] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/910252758190411807/unknown.png
[23:09:56] <FromDiscord> <Schelz> (edit) "i" => "it"
[23:13:27] <FromDiscord> <reilly> There's no distributed Nim build for Raspberry Pis afaik
[23:14:51] <FromDiscord> <reilly> In reply to @Schelz "well lets say i": Go to the "Source archive" section here (https://nim-lang.org/install_unix.html) and follow the instructions
[23:15:04] <FromDiscord> <reilly> You can build the Nim compiler yourself very easily :)
[23:16:40] <FromDiscord> <reilly> If you have any questions, don't hesitate to ask, I do this exact thing to run Nim on my own RPi
[23:18:57] <FromDiscord> <dom96> really need those arm nightlies 🙂
[23:19:37] <FromDiscord> <Schelz> In reply to @Schelz "": i already did it but want work like i said it gave me this error
[23:20:20] <FromDiscord> <reilly> Oops, forgot how to read, didn't get that bit
[23:20:50] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3FbS
[23:21:08] <FromDiscord> <Schelz> it tried with the pre-built thing, i try know with the source
[23:22:11] <FromDiscord> <reilly> Ah no, I understand what you mean now, gotcha
[23:22:26] <FromDiscord> <reilly> Yes, just compile from source, I guarantee that will work (but may take a minute!)
[23:30:20] <FromDiscord> <Schelz> Ok, while this beauty its installing, I have a question I try to compile a nim file as dll to import it in python using ctypes but when i load it it gives me this error https://media.discordapp.net/attachments/371759389889003532/910258001133322380/unknown.png
[23:30:42] <FromDiscord> <Schelz> its there any args that i missed ?
[23:31:06] <FromDiscord> <Schelz> i used nim c --threads:on --app:lib
[23:31:23] <FromDiscord> <dom96> note that on your RPi you might need to enable swap (otherwise your compilation will likely get killed)
[23:31:29] <FromDiscord> <dom96> (edit) "killed)" => "killed due to running out of memory)"
[23:32:46] <FromDiscord> <Recruit_main707> In reply to @Schelz "Ok, while this beauty": im not sure at all it should work, but you can try defining `DllMain` yourself and compiling with `--noMain`
[23:33:24] <FromDiscord> <Schelz> on or off ?
[23:33:55] <FromDiscord> <Recruit_main707> you dont need to specify on, its on by default
[23:34:35] <FromDiscord> <Recruit_main707> (if you are using .nims files, switch("noMain") works)
[23:34:44] <FromDiscord> <Schelz> its crashing even with --noMain:off
[23:35:19] <FromDiscord> <Recruit_main707> its been a while since i got my hands dirty with dlls and python
[23:36:11] <FromDiscord> <Schelz> cause I tried nimporter and nimpy and nothing worked out
[23:36:58] <FromDiscord> <Schelz> its keep throwing me this error https://media.discordapp.net/attachments/371759389889003532/910259669551972422/unknown.png
[23:43:33] <tk> okay, I think i have managed to package 1.6.0 for voidlinux, so this week at some point hopefully I will find the time to PR that against void-packages
[23:43:56] <tk> (the issue I was having is that 1.6.0 requires csources_v1 not csources)
