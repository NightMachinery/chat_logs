[00:05:52] *** Joins: rgrinberg (~textual@2806:101e:7:134:7829:bba6:44e3:4846)
[00:13:25] *** Joins: toulene (~toulene@user/toulene)
[00:16:17] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[00:16:17] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[00:16:17] *** Joins: tane (~tane@user/tane)
[00:17:21] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:23:53] *** Joins: sebonirc (~sebonirc@8.9.88.219)
[00:26:43] *** Quits: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[00:26:53] *** Joins: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[00:29:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:44:23] *** Quits: rv1sr (~rv1sr@user/rv1sr) ()
[00:45:26] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:46:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:46:31] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:47:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 268 seconds)
[01:10:06] *** Quits: HyLian_ (~meron@140.red-79-145-114.dynamicip.rima-tde.net) (Ping timeout: 250 seconds)
[01:10:41] *** Joins: HyLian (~meron@92.red-79-145-107.dynamicip.rima-tde.net)
[01:17:37] *** Quits: rgrinberg (~textual@2806:101e:7:134:7829:bba6:44e3:4846) (Ping timeout: 240 seconds)
[01:24:05] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:53:27] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:59:00] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[02:02:45] *** Quits: cols (~cols@artemis.spensley.net) (Quit: Leaving)
[02:04:25] *** Joins: cols (~cols@artemis.spensley.net)
[02:40:24] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[02:58:23] *** duck29 is now known as duck2
[02:58:36] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[03:02:51] *** Joins: rgrinberg (~textual@187.223.170.172)
[03:08:31] *** Quits: rgrinberg (~textual@187.223.170.172) (Ping timeout: 256 seconds)
[03:10:02] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2124:415d:55fd:1c0d)
[03:10:18] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[03:10:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:11:24] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Read error: Connection reset by peer)
[03:11:37] *** Quits: pusewic|away__ (sid2036@id-2036.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:38] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[03:11:39] *** Quits: nikki93 (sid200244@id-200244.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:11:39] *** Quits: dch (sid1310@couchdb/committer/dch) (Read error: Connection reset by peer)
[03:11:54] *** Quits: royo (~royo@user/royo) (Ping timeout: 252 seconds)
[03:11:54] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Read error: No route to host)
[03:11:55] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:55] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:11:56] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[03:11:59] *** Joins: pusewic|away__ (sid2036@id-2036.lymington.irccloud.com)
[03:12:03] *** Joins: dch (sid1310@couchdb/committer/dch)
[03:12:06] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[03:12:11] *** Joins: bw (sid2730@user/betawaffle)
[03:12:17] *** Joins: nikki93 (sid200244@id-200244.tinside.irccloud.com)
[03:12:19] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[03:12:25] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[03:12:34] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[03:14:06] *** Quits: coolshaurya (~coolshaur@2001:470:69fc:105::fac0) (Ping timeout: 252 seconds)
[03:14:06] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Ping timeout: 252 seconds)
[03:26:03] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:27:03] *** Joins: ndwk (~ndwk@cpe9050caba0913-cm9050caba0910.cpe.net.cable.rogers.com)
[03:27:03] *** Quits: ndwk (~ndwk@cpe9050caba0913-cm9050caba0910.cpe.net.cable.rogers.com) (Changing host)
[03:27:03] *** Joins: ndwk (~ndwk@user/ndwk)
[03:27:38] *** Joins: coolshaurya (~coolshaur@2001:470:69fc:105::fac0)
[03:29:50] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[03:30:35] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Quit: reboot)
[03:31:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:33:45] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:02:50] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2124:415d:55fd:1c0d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:56] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:08:14] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[04:19:49] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:68c7:1b9f:7d41:5e0d)
[04:23:50] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[04:30:01] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:42] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[04:45:13] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:19:31] *** Joins: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039)
[05:34:41] *** Quits: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:40] *** Joins: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039)
[05:38:25] *** Quits: ndwk (~ndwk@user/ndwk) ()
[05:38:42] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[05:39:35] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[06:01:21] *** Quits: thatcher (~thatcher@91.110.54.67) (Ping timeout: 256 seconds)
[06:01:42] *** Joins: thatcher (~thatcher@91.110.54.67)
[06:13:16] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[06:17:57] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:49:55] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[06:52:12] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[06:56:37] *** Joins: notzmv (~zmv@user/notzmv)
[07:06:30] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[07:28:22] *** Joins: royo (~royo@user/royo)
[07:36:36] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:68c7:1b9f:7d41:5e0d) (Ping timeout: 240 seconds)
[07:45:55] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[07:48:12] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 256 seconds)
[07:49:05] *** Quits: sebonirc (~sebonirc@8.9.88.219) (Quit: sebonirc)
[07:52:46] *** Joins: haze (~haze@user/haze)
[07:53:20] *** Joins: tomku (~tomku@user/tomku)
[08:20:11] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 256 seconds)
[08:23:08] *** Joins: livoreno (~livoreno@user/notzmv)
[08:59:12] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[09:01:22] *** Quits: jcmoyer (~jcmoyer@user/jcmoyer) (Ping timeout: 272 seconds)
[09:01:38] *** Joins: jcmoyer (~jcmoyer@user/jcmoyer)
[09:18:12] *** Quits: rgrinberg (~textual@2806:101e:7:134:88d:6cc4:143:3039) (Ping timeout: 240 seconds)
[09:20:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[09:26:07] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:40:08] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[09:47:51] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[09:48:12] *** Joins: bindu (~bindu@user/bindu)
[09:55:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:56:28] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 272 seconds)
[10:23:00] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[10:25:08] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[10:31:40] *** Quits: braewoods (~braewoods@user/braewoods) (Quit: WeeChat 2.8)
[10:54:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[10:54:26] *** Joins: braewoods (~braewoods@user/braewoods)
[10:56:31] *** Joins: masoudd (~masoudd@user/masoudd)
[11:13:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[11:14:41] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:cf1:8507:720a:c17) (Read error: Connection reset by peer)
[11:33:46] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[11:36:08] *** Joins: bgiannan (~bgiannan@2a01:4f8:141:1272::2)
[11:37:59] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:4c40:72d2:6947:5aae)
[11:51:17] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[11:57:00] *** Quits: rb (~augh@209.141.39.190) (Ping timeout: 240 seconds)
[12:04:06] *** Joins: rwb (~augh@alogs.space)
[12:11:41] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: Konversation terminated!)
[12:15:08] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[12:26:28] *** Joins: notzmv (~zmv@user/notzmv)
[12:36:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:46:02] *** Quits: nickersonm (~nickerson@ip98-185-211-111.sb.sd.cox.net) (Quit: 'Hydrogen is a light, odorless gas, which, given enough time, turns into people.' -Edward R. Harrison)
[12:50:09] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:53:34] *** Joins: lehmrob1337 (~rd7@p5dca86f0.dip0.t-ipconnect.de)
[12:55:04] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Ping timeout: 272 seconds)
[12:56:01] *** Quits: bfiedler (~bfiedler@2a0d:d740:107::3) (Ping timeout: 268 seconds)
[12:56:05] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a)
[12:56:16] *** Joins: bfiedler (~bfiedler@2a0d:d740:107::3)
[13:07:48] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[13:13:19] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2124:415d:55fd:1c0d)
[13:22:26] *** Quits: gawenr (~textual@2a01:e0a:21c:99a0:2124:415d:55fd:1c0d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:27:51] *** Joins: gawenr (~textual@2a01:e0a:21c:99a0:2124:415d:55fd:1c0d)
[13:36:38] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl)
[14:34:33] <tdmm> I want to wrap a slice type in a structure (so that methods can be defined), but because `[]T` and `[]const T` are obviously separate, I've defined two types, `Foo` and `MutFoo` (this also works well because all the mutating methods are only in `MutFoo`).  How can I make it as easy as possible to coerce a `MutFoo` into `Foo`?  My first thought had been to abuse `packed union`, but slices don't have a fixed memory layout.
[14:52:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[15:00:02] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7::4)
[15:04:35] <motiejus> why do you need coercion? (I am not sure you can do this, since they are separate types, but not an expert); I also once created `fn fooCreator(immutable: bool) type { return struct { ... }; }`, which does not separate between
[15:05:39] <motiejus> and the inner struct has `const Slice = if(immutalble) []const T else []T`; and use that.
[15:16:36] <tdmm> motiejus: I see what you're saying, but I have a method `is_eq(self: Foo, other: Foo) bool`, and it would ideally accept `Foo` or `MutFoo` as the second argument.  At the same time, using `anytype` (and going full-on duck typing) seems far too much.
[15:17:24] <motiejus> put `Self = @This()` at the beginning of the unnamed struct, and then use `Self` instead of `Foo`?
[15:22:21] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[15:23:08] <motiejus> i.e. `const Self = @This();` ; this is a usual pattern in stdlib. Take a look at, say, `array_list.zig`
[15:24:14] <motiejus> you would, however, still have the "mutable-only" elements on the immutable struct too. However, it's not too bad -- trying to use them on the immutable thing would raise a compile error (since you would be trying to mutate a const slice)
[15:24:20] <motiejus> s/elements/methods
[15:25:01] <tdmm> motiejus: you misunderstand; even with your anonymous struct solution, the `is_eq` method on `Foo` should be able to accept inputs of type `MutFoo` as well as those of `Foo`.
[15:25:40] <tdmm> and I'm not concerned about code replication: I'm happier duplicating the methods across `Foo` and `MutFoo`, which also removes the mutable-only methods from `Foo`.
[15:25:44] <plumeus> btw, what is `is_eq` and why doesn't `std.mem.eql` suffice for slices?
[15:26:25] <tdmm> plumeus: I'm defining a custom ASCII slice type, and `is_eq` is provided for consistency with `is_eq_woc` (woc = without case), which `std.mem.eql` cannot achieve
[15:27:34] <tdmm> also, `a.is_eq(b)` (or `a.is_eq_to(b)`, idc) is better, IMO, than `mem.eql(ascii.Char, a.raw, b.raw)`
[15:29:44] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[15:34:43] <motiejus> I think I now understand the problem; I can't come up with a way to achieve the API you are looking for without `anytype`. But maybe `is_eq` can accept a slice instead, and you'd call it `fooMut.is_eq(fooConst.items)`?
[15:35:19] <motiejus> i.e. `fn is_eq(self: *const Foo, items: []const T)`
[15:42:21] <tdmm> motiejus: yeah, it's a bit problematic.  I think I'm going to explicitly define Foo as extern struct { ptr: [*]const T, len: usize }, which allows the original `extern union` solution to work, while providing all the standard fields one expects.  I'll just add an `into_slice()` method to return a `[]const T`.
[15:43:04] *** Joins: Guest3830 (~Guest38@118.136.98.205)
[15:43:06] <tdmm> I just wish that []T had a well-defined memory layout.  I couldn't find any issues about it on GitHub.
[15:43:42] <motiejus> doesn't it? I somehow assumed it does: it's just a pointer and a length
[15:46:11] <tdmm> doesn't look like you can put it in an `extern struct`
[15:46:39] <tdmm> it is just a pointer and a length, but I think which one comes first is undefined
[15:46:55] *** Quits: Guest3830 (~Guest38@118.136.98.205) (Client Quit)
[15:48:16] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:49:05] <tdmm> ./test.zig:2:5: error: extern structs cannot contain fields of type '[]u8'
[15:51:00] <motiejus> not sure why you want a fixed memory layout for []T; do you want to store it in the both sides of the union?
[15:51:45] <tdmm> yeah, I wanted `const MutFoo = extern union { imm: Foo, raw: []T }` or something
[15:53:24] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a)
[15:54:31] *** Joins: arkurious (~arkurious@user/arkurious)
[16:03:19] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[16:20:00] *** Joins: eyepatchOwl_ (uid481934@id-481934.ilkley.irccloud.com)
[16:28:46] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[16:36:20] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[16:41:00] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[16:45:52] *** Quits: factor (~factor@c-73-68-120-166.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[16:46:36] *** Joins: factor (~factor@c-73-68-120-166.hsd1.ma.comcast.net)
[16:49:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[17:34:15] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[17:36:25] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[17:48:01] *** Joins: todo75 (~todo75@user/todo75)
[17:48:33] *** Quits: ncon (~ncon@wireguard/developer/ncon) (Ping timeout: 256 seconds)
[18:10:35] *** Joins: gwizon (~gwizon@ool-45798a25.dyn.optonline.net)
[18:21:27] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:37:02] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[18:39:50] *** Quits: lehmrob1337 (~rd7@p5dca86f0.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[18:40:12] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 240 seconds)
[18:40:22] *** Joins: lehmrob (~rd7@p5dca86f0.dip0.t-ipconnect.de)
[18:42:03] *** Joins: rgrinberg (~textual@2806:101e:7:134:894c:b2ae:6240:e2e3)
[18:42:13] *** Joins: nickersonm (~nickerson@ip98-185-211-111.sb.sd.cox.net)
[18:42:37] *** Quits: lehmrob (~rd7@p5dca86f0.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:46:13] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[18:50:33] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Client Quit)
[18:52:46] *** Quits: gwizon (~gwizon@ool-45798a25.dyn.optonline.net) (Quit: Lost terminal)
[18:55:40] *** Quits: rgrinberg (~textual@2806:101e:7:134:894c:b2ae:6240:e2e3) (Ping timeout: 250 seconds)
[19:08:40] *** Joins: todo75 (~todo75@user/todo75)
[19:31:14] *** Joins: phaleth (~user@user/phaleth)
[19:31:42] *** Joins: rgrinberg (~textual@200.68.132.168)
[19:41:29] *** Joins: masoudd (~masoudd@user/masoudd)
[19:42:08] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[19:42:19] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:46:36] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[19:55:22] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03) (Ping timeout: 260 seconds)
[19:57:45] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[19:57:45] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[19:58:12] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[19:59:10] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[20:04:22] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[20:07:39] *** Quits: rgrinberg (~textual@200.68.132.168) (Read error: Connection reset by peer)
[20:11:40] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03)
[20:18:51] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[20:19:53] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[20:20:01] *** Joins: rgrinberg (~textual@2806:101e:7:1518:e4af:523d:a092:a251)
[20:23:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:24:43] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Client Quit)
[20:25:02] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[20:30:17] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:1c1a:3fa2:4926:7c5a) (Ping timeout: 252 seconds)
[20:33:37] *** Quits: rgrinberg (~textual@2806:101e:7:1518:e4af:523d:a092:a251) (Ping timeout: 240 seconds)
[20:47:54] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[20:49:57] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:57:26] *** rwb is now known as rb
[21:04:03] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[21:13:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[21:23:33] *** Quits: keithhub (keithhub@navy.wthrd.com) (Quit: WeeChat 3.4)
[21:36:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:55:16] *** Joins: rgrinberg (~textual@2806:101e:7:1518:d4fd:b202:fa93:55e1)
[21:56:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[22:04:37] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:04:38] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 260 seconds)
[22:06:56] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-055.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[22:10:35] <motiejus> hi folks. Any plans to expose the linker and/or zig compiler via stdlib? I'd like to make a (highly-specialized) program that makes something like self-extracting archives
[22:13:39] *** Quits: rgrinberg (~textual@2806:101e:7:1518:d4fd:b202:fa93:55e1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:22:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:34:25] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:35:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:35:37] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[22:41:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a)
[22:51:34] <andrewrk> motiejus, I don't think so; it's tightly coupled to the compiler frontend
[22:51:46] <andrewrk> and intentionally so! that's how incremental compilation works
[22:52:17] <andrewrk> I would be open to reconsidering this later when things are more settled - and we would want to get Jakub's input of course
[22:57:09] <motiejus> Ack. I'll reconsider when/if zig becomes a library; for now I'll manually construct the elf :) thanks.
[22:58:28] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:58:54] <andrewrk> fwiw the compiler *is* structured like a library; you can see how the CLI only does arg parsing and then uses the compiler as a library - but it's not exposed via any kind of package. I'll think about doing that when we have a package manager
[23:02:26] <motiejus> thanks. That would be awesome to make a program that makes programs without zig installed. Also, there may be intetesting complications with things that are not in the library - glibc tool versions, header files, musl libc, etc
[23:03:26] <motiejus> Btw, when you say tight coupling with frontend - you mean `zig clang` et al? Or something more?
[23:03:51] <motiejus> (I mean the hidden subcommand)
[23:04:02] <luuk> For whatever it's worth; The linker still needs to work like a traditional linker as well. e.g. when you want to link object files together (perhaps constructed by a different compiler) into a binary. The problem we'd currently face is that most of our linker backends write directly to a file. The wasm linker for example, constructs the final binary in memory before writing it to a file. So in theory,
[23:04:04] <luuk> it could already serve as a library.
[23:06:51] <luuk> motiejus: It's tighly coupled in the way that the linker actually drives the backend, rather than semantic analysis. This means that the linker will tell the backend to lower function X, or decl Y.
[23:06:51] <motiejus> Ability to import a linker would be a significant step
[23:09:41] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[23:11:25] <andrewrk> luuk, ah I should have said will need to get Jakub *and* luuk's input :)
[23:12:28] <andrewrk> motiejus, when I say tight coupling with the frontend I mean the zig frontend. if you're curious, have a look at src/link.zig and some of the "API methods" that are in that File struct. these are how the frontend communicates with the linker all throughout compilation (and incremental updates)
[23:12:48] <luuk> Haha no worries :) (I learn a lot from my talks with Jakub)
[23:33:13] <andrewrk> luuk, nice progress on the wasm backend! looks like your latest PR increased the passing test count by a large amount
[23:34:15] <luuk> Thanks! I think a large portion is also due to the frontend getting more and more complete as well. Sometimes I do a rebase as suddenly see a few more tests passing without changing anything.
[23:34:44] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 250 seconds)
[23:35:38] <luuk> Really looking forward to getting linking with compiler-rt working. Not only will it seem super cool, but it will open up so many features/tests that will work.
[23:35:57] <cCCCCcccccCCc> andrewrk: I spent a moment looking at the linker, am I right in thinking stuff like '-z text' isn't unsupported, it's more like '-z text' is the default and you've added flags like '-z notext' to overrule that?
[23:36:24] <cCCCCcccccCCc> I've built like 20~ programs inside a chroot with Zig and am just trying to make sense of some of the results in the build logs.
[23:36:39] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[23:39:44] <andrewrk> cCCCCcccccCCc, status quo: for MachO we have a new linker; for ELF and COFF we use LLD. In all cases we parse linker flags on the CLI and then forward them to the linker backend. In the future we will have a mixture of LLD and self hosted linker for ELF and COFF, and then eventually LLD will be dropped
[23:40:16] <andrewrk> point being: so far we have added linker flags to the CLI on an as needed basis rather than following some spec, so it's a bit arbitrary which flags are handled or not at the CLI layer
[23:40:49] <andrewrk> and then for the cases where we use LLD it's just a matter of forwarding the flags. LLD does support -z text and -z notext but zig probably does not have the flags hooked up yet
[23:41:18] <cCCCCcccccCCc> Ah okay, so it's not that you're setting some of these things by default and only exposing flags to disable those defaults. They're just missing.
[23:41:21] <andrewrk> my other point here however is that it's not enough to just blindly forward linker flags to LLD; it's very intentional that zig has to understand what they mean because we are transitioning to our own linker
[23:41:40] <andrewrk> oops I also left out wasm here
[23:42:01] <andrewrk> also we already do have a self-hosted linker for elf, it's just not nearly as far along as macho
[23:42:21] <cCCCCcccccCCc> I've been trying to use Zig as the only system compiler, so I guess I'm hitting every single case related to the linker. 
[23:42:29] <andrewrk> yeah that makes sense
[23:42:41] <andrewrk> that's pretty cool though. if you stick with it you will help us get much more robust
[23:43:41] <andrewrk> this might be a good time to switch to a declarative system for linker flags (like we have for C compiler flags)
[23:44:17] <cCCCCcccccCCc> Yeah, I'm certainly interested in keeping with it. I worked around 10 years on Sabotage Linux and I've forked its codebase and rewrote it to accommodate Zig already. 
[23:44:59] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[23:45:13] <Earnest> mold is the new lld
[23:45:28] <andrewrk> mold is a really impressive project
[23:45:37] <andrewrk> but zig's self-hosted linker has one advantage that mold does not
[23:45:52] <cCCCCcccccCCc> Alright, so I guess I should sit tight at the moment. It doesn't sound like this one is contributor friendly since you guys have ideas on the linker already.
[23:46:40] <andrewrk> mold strictly takes objects as input, but zig's self hosted linker is tightly coupled with the compiler, allowing it to run in parallel with compilation. so there will be no linking step at all. when compilation finishes, everything is done
[23:46:47] *** Joins: xackus (~xackus@185.15.0.3)
[23:47:26] <andrewrk> cCCCCcccccCCc, if you're interested in contributing I think I could help clear that path for you
[23:47:51] <cCCCCcccccCCc> I'd be at least willing to try and possibly fail at getting musl compiling properly. 
[23:48:06] <Earnest> Yes, I suppose that makes sense.  compilers and linkers have been coallescing into the same machinary for a long time now; the once limitations which required it aren't so necessary anymore.  This is one thing that didn't stand the test of time
[23:49:44] <Earnest> (And I do appreciate that zig is only interested in fixing the bits which didn't pass the test of time rather than inventing anything new)
[23:49:50] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 256 seconds)
[23:53:08] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[23:55:29] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[23:55:47] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[23:57:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c02:a25c:4002:3d0a) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
