[00:00:05] <PJBoy> oh
[00:00:15] <rpav> what? you run itno the warning _every time_ you don't have a definitive return, what the fuck are you on about
[00:00:36] <PJBoy> yeah which is never outside of the switch construct
[00:00:42] <fiesh> rpav: https://godbolt.org/z/MhYo97eW7
[00:00:48] <rpav> fiesh: üëç
[00:00:57] <rpav> fiesh: nice i should definitely add that to my common flags
[00:00:59] <PJBoy> why would you ever not write a return statement otherwise?
[00:01:21] <rpav> PJBoy: um, it's pretty easy to forget a return in some case
[00:01:31] <PJBoy> and you're calling me bad a coding...
[00:01:34] <rpav> int foo() { if(..) { .. return x; } ... }
[00:01:51] <rpav> PJBoy: dude when you write thousands of lines of code, mistakes happen
[00:02:15] <PJBoy> not a missing return statement
[00:02:19] <rpav> like if you never have had this problem, you don't qualify as having worked on any serious amount of code
[00:02:34] <PJBoy> that's like forgetting to breathe
[00:02:46] <rpav> ok, massive credibility loss right there
[00:02:53] <fiesh> I'm not even sure though if having exaustive switch statements and then no return is a good idea to begin with... iirc enum classes always allow for other values in their enums
[00:03:04] <rpav> fiesh: another good point
[00:03:16] <rpav> fiesh: though a good linter will warn you didn't implement all your cases
[00:03:19] <PJBoy> generally you don't write non enumerator values into your enums though
[00:03:34] <rpav> PJBoy: do you actually write code?
[00:03:44] <fiesh> rpav: it's true, but it gives the false sense of security that "all cases" is guaranteed
[00:03:44] <rpav> like, commonly .. work on projects or anything
[00:03:54] <PJBoy> what, are you saying that's something you do?
[00:04:01] <PJBoy> I recommend against doing that
[00:04:03] <rpav> like, you realize code _develops_ and values _get added_ as things are developed right?
[00:04:16] <fiesh> PJBoy: yeah but reading serialized data or having a idiot call your function might already break that
[00:04:17] <kalven> I think you're talking about different things
[00:04:34] <PJBoy> you should error check serialised data at the point of deserialisation
[00:04:44] <rpav> fiesh: yeah i never count on "all cases" ;/
[00:05:15] <fiesh> rpav: I often do but have basically an assert(false) and then a reasonable behavior for release builds as the fallback
[00:05:51] <PJBoy> also rpav is never gonna call my functions :p
[00:06:14] <fiesh> plus I usually do a static_assert on an enum's size in places where all cases must be covered and it's not done in a nicer way, like it being a template parameter and requiring instantiation for all cases etc.
[00:06:42] <rpav> T f() { if(..) { .. return v; } return else_value; } is also a good idiom for avoiding errors, but in any serious amount of code you (or someone else on the team) are going to at some point forget a return down some code path, and having the compiler error there can save work down the road
[00:07:36] <PJBoy> my workplace takes a more extreme approach of only allowing return at a single point
[00:07:44] *** Joins: vnf (~vnf@85.174.194.51)
[00:07:47] <rpav> cases _removed_ that cause a fallthrough are another easy way to hit it
[00:08:02] <PJBoy> potentially prevents a plethora of "I forgot" errors
[00:08:21] <kalven> PJBoy: ouch
[00:08:30] <rpav> PJBoy: that's pretty dumb
[00:08:35] <PJBoy> yeah my thoughts too
[00:08:40] <rpav> and also invalidates your switch example :p
[00:08:47] <fiesh> the compiler reliably warns you on missing returns, and the super rare false positives... well just deal with them
[00:09:01] <rpav> fiesh: exactly .. thus -Werror=return-type
[00:09:12] <rpav> i have used that for a long time on a lot of stuff and never seen a false positive in practice
[00:09:14] * imMute doesn't understand why a missing return is even allowed...
[00:09:15] <fiesh> it's like complaining that if(a && b || c) is well-defined and might be correct... just add the parentheses nonetheless
[00:09:25] <fiesh> rpav: yeah or just -Werror in general ;-)
[00:09:27] <PJBoy> imMute, well like in the example I had
[00:09:27] <rpav> imMute: because technically, it's not computable
[00:09:31] <rpav> fiesh: hah
[00:09:38] <PJBoy> you'd just be adding dead code
[00:09:44] <rpav> fiesh: that's a bit extreme and has the same problem with 3rd-party and/or old/bad/etc code
[00:09:53] <rpav> fiesh: but in principle i don't disagree
[00:09:54] <PJBoy> some functions also don't return or always throw an exception instead
[00:10:28] <fiesh> rpav: ideally 3rd party libraries don't have the same level of warnings enabled if it's really necessary for them
[00:10:47] <fiesh> I think -Werror is the only meaningful way for a CI pipeline, or else you can basically disable warnings there anyway
[00:10:49] <rpav> ideally yes
[00:11:01] <fiesh> but sure, legacy often sucks
[00:11:09] <PJBoy> like after the switch in my example you could write `std::abort()` or `throw std::logic_error("bad enum")` or some such
[00:11:15] *** Joins: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[00:11:21] <PJBoy> or assert
[00:11:42] <PJBoy> but assert would make warnings in release build diverge from warnings in debug build
[00:11:53] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[00:11:57] <PJBoy> so that's not a good idea IMO
[00:12:06] <fiesh> PJBoy: which sounds a lot preferable to having a one-return-only policy ;-)
[00:12:14] <PJBoy> well
[00:12:19] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:12:29] <PJBoy> everything we've talked about so far I'd claim is better
[00:12:35] <rpav> one-return only is not really just not very good or right
[00:12:56] <rpav> like 90s legacy "good coding" practice or something
[00:13:03] <PJBoy> but considering the engineers I have to work with
[00:13:18] <PJBoy> I do think there would be "I forgot" bugs >_>
[00:13:28] <PJBoy> also the length of some of these functions
[00:13:33] <rpav> there are always going to be "i forgot" bugs; the point is finding them quickly
[00:13:39] <fiesh> PJBoy: seeing that an enum sucks compared to an `enum class` anyway, and said enum class is allowed to contain anything its underlying type can hold, you still think it's better to have code that runs into UB in case it does contain anything that isn't an enumeration value?
[00:13:40] <ville> PJBoy: not that uncommon to use values that don't have a named enum value. if you're using enums for the bits of a mask you'd still possibly choose to use the enum type as a function parameter type. helps guide anyone looking at the function signature in their editor's help popup for example
[00:14:46] <PJBoy> worth making a distinction between enums used for named constants and enums used for enumeration
[00:14:50] <rpav> what sucks is you can't specify integer bit size
[00:15:05] <rpav> enum Foo : int(2) { a, b, c, d; };
[00:15:10] <PJBoy> enums used for enumeration I'm quite happy to assume hold valid values
[00:15:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:38c1:e5a4:b065:9eb3) (Ping timeout: 260 seconds)
[00:15:26] <PJBoy> possibly I would add an assert at the start of the function to check this
[00:15:28] <fiesh> having forgotten an enum value in the switch statement is easily caught by the compiler and warned about...
[00:15:29] <ville> PJBoy: also helps when a function takes more than one where you can transpose the arguments otherwise if one was to use integer types
[00:15:46] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[00:16:17] <PJBoy> so enums as strong integer type aliases
[00:16:25] <PJBoy> that's another reasonable case
[00:18:05] <PJBoy> I guess that's the problem with enabling -fstrict-enums then
[00:18:13] *** Quits: vnf (~vnf@85.174.194.51) (Quit: Leaving)
[00:18:19] <ville> it's always fun to transpose the arguments to opengl or vulkan function call and ponder your life choices as the black screen mocks you
[00:18:47] <PJBoy> haven't run into a transposed arguments bug yet...
[00:18:57] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[00:19:09] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[00:19:14] <ville> to be fair vulkan validation layers are pretty darned good at catching stuff
[00:19:15] <rpav> which kind
[00:19:36] <rpav> there are so many interesting ways argument order can be broken
[00:20:25] <fiesh> transpose!?  like an actual transpose, or just mixing up their order?
[00:20:43] <ville> as in change positions
[00:21:36] <fiesh> clang-tidy has a warning for function signatures that have adjacent arguments that can be permuted
[00:22:09] <fiesh> which is kind of a nice idea, but it's not quite easy to existing code obviously.... and sometims it's ok, like x, y, z etc.
[00:22:29] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:651d:53eb:593e:72b6)
[00:22:29] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:651d:53eb:593e:72b6) (Changing host)
[00:22:29] *** Joins: skapata (~Skapata@user/skapata)
[00:22:41] <PJBoy> x/y/z is maybe ok
[00:22:47] <PJBoy> width/height also maybe ok
[00:23:18] *** Joins: Gvidon (~Gvidon@user/gvidon)
[00:24:19] <PJBoy> top/left/right/down though
[00:24:38] <PJBoy> that's an "always check the docs" right there
[00:25:25] <fiesh> or needle and haystack for std::search (and to make it even more confusing, the standard doesn't even call them that)
[00:25:40] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2d)
[00:25:50] <rpav> x,y,z should be pretty hard to mess up but this is where units would help a lot
[00:25:55] <PJBoy> yeah, I always have to check the docs for string's fill ctor too
[00:26:16] <fiesh> rpav: x, y, and z usually have the same unit though ;-)
[00:26:20] <rpav> like not for x,y,z (if you math wrong it's probably not element order, and there are reasons for transposing them even)
[00:26:24] <rpav> fiesh: right
[00:26:55] <rpav> errors there are likely not going to be solved by the compiler and probably are an obvious typo or some other thing you need to find, but
[00:27:30] <rpav> this is also where named parameters are superior in a lot of cases
[00:27:40] <rpav> (also not x,y,z, because no one wants to type that ;)
[00:27:55] <fiesh> well come to think of it, I basically don't write any (x, y, z) functions at all but always with a single 3d argument
[00:28:10] <rpav> oh well yeah
[00:28:11] <OnlineCop> Should a constructor take `const std::vector<Foo>& foos` or `std::vector<Foo> foos` and then `m_foos(std::move(foos))` ?
[00:28:23] <fiesh> OnlineCop: the latter
[00:28:24] <rpav> the only call you should make that's x,y,z is your local vec3() equivalent
[00:28:36] <fiesh> yeah
[00:28:46] <rpav> i hate APIs that pass structured data as separate elements
[00:28:55] <fiesh> agreed
[00:29:10] <rpav> (this is tangental to the rant that all functions should take a single structured data type)
[00:29:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[00:29:38] <rpav> (touching at the point that an f(x,y,z) would be equivalent to f(vec3))
[00:29:48] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[00:30:33] <fiesh> then you could bound the number of allowed returns by the number of function arguments, making the rule seem more involved than it actually is :-)
[00:30:43] <PJBoy> f(x,y,z) is faster though
[00:30:46] <Alipha> OnlineCop: the former always copies. the latter either does 2 moves (yay!) or a copy and a move (okay), depending upon if the caller moves the vector into the constructor or not
[00:30:51] <PJBoy> 'cause itanium ABI
[00:31:21] <fiesh> PJBoy: yeah that's true alas :-(
[00:32:06] <Alipha> OnlineCop: note that a move is basically free for std::vector
[00:32:31] <PJBoy> 4 loads from memory vs 0, oof https://godbolt.org/z/K5zxProbq
[00:32:48] <rpav> PJBoy: but it's not
[00:32:53] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3f:bc36:fa50:982) (Ping timeout: 260 seconds)
[00:32:57] <PJBoy> oh uh, only 2
[00:32:58] <ville> PJBoy: not just itanium. arm has funny ones as well
[00:33:00] <PJBoy> that's less bad
[00:33:27] * PJBoy checks ARM
[00:33:29] <rpav> or rather, they _should be equivalent_, ABI+language-wise (which is not the case in C++) and having them syntactically equivalent gives you the fastest-to-type on demand
[00:34:03] <PJBoy> 3 memory loads from ARM
[00:34:08] <PJBoy> tsk tsk
[00:34:11] <rpav> auto v3 = ...; f v3; /* as f(v3.x, v3.y, v3.z) sucks */
[00:34:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 246 seconds)
[00:34:17] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3f:bc36:fa50:982)
[00:34:20] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 260 seconds)
[00:34:35] <rpav> but f(1,1,1) if you want
[00:34:38] <ville> PJBoy: i suppose it's arm32 only, but you can't return a 2-integer wide struct in registers
[00:34:54] <PJBoy> yup I'm familiar with that limitation
[00:35:03] <rpav> though practically speaking it's possible that's not possible with a purely textual language
[00:35:10] <PJBoy> r0-r3 for arg passing and r0 for return
[00:35:13] <PJBoy> and stack otherwise
[00:35:52] <rpav> how a language chooses to pass values or structs is entirely up to the language, unless you need to interact with specific FFI/CABI calls
[00:36:16] <ville> rpav: if you are talking about slicing/destructuring an object then gcc has that optimization. it can generate functions for you that you didn't write
[00:36:21] <rpav> but, in that case you're importing/defining the call structure anyway so you can still do the right thing
[00:37:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[00:37:00] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:37:08] <ville> say you have a function: void f(aa x) { std::cout << x.x << std::endl; } then gcc could generate for you one that only took decltype(x.x) in
[00:38:01] <PJBoy> you mean in codegen only?
[00:38:10] <PJBoy> or like you'd be able to call `f(x.x)` and it would work
[00:38:26] <ville> right, you'll never see it
[00:38:42] <PJBoy> that's cool
[00:38:59] <PJBoy> is that via an attribute or flag?
[00:39:07] <PJBoy> or pragma maybe
[00:39:22] <ville> no idea. never investigate it. just remember it from release notes from years ago
[00:39:28] <ville> investigated
[00:39:36] <fiesh> PJBoy: how is that 4 loads vs. 0?  push/pop also are memory operations
[00:40:16] <PJBoy> ah true
[00:40:25] <fiesh> if any, the first one seems more efficient to me
[00:40:39] <fiesh> but of course one would have to benchmark to see what can be executed in parallel etc.
[00:40:57] <PJBoy> the second one obviously has better codegen
[00:41:04] <PJBoy> otherwise it would use the first one's codegen
[00:41:16] <PJBoy> the first one is the one with the ABI limitation
[00:41:24] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 240 seconds)
[00:41:26] <fiesh> that argument holds if the optimizer works perfectly ;-)
[00:41:37] <PJBoy> :D
[00:42:16] <PJBoy> it's stack memory in either case, so should be negligible memory fetch time
[00:43:20] <fiesh> with double, the advantage becomes more apparent
[00:43:32] <rpav> x86_64 uses a lot of registers
[00:43:33] *** Joins: urdh_ (~urdh@user/urdh)
[00:43:46] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 260 seconds)
[00:43:46] *** urdh_ is now known as urdh
[00:44:20] <rpav> that said it tends not to matter a lot if you're using a ton of inlined functions that take values anyway
[00:45:06] <PJBoy> with double it becomes 4 vs 3 memory operations?
[00:45:29] <PJBoy> with 4 being for the double arguments
[00:45:43] <PJBoy> ( https://godbolt.org/z/MTbccas9T )
[00:45:46] <fiesh> and in general the example is better if `external` was somethign visible to the compiler, so that it doesn't have to shift around registers to call again but can inline
[00:46:43] <fiesh> PJBoy: oh yeah lol, I miscounted
[00:47:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3f:bc36:fa50:982) (Quit: Textual IRC Client: www.textualapp.com)
[00:47:42] <fiesh> but of course that's only half the truth
[00:47:52] <fiesh> because for the arguments to be on the stack, the caller must push them first
[00:48:05] <fiesh> whereas in the first version, the caller saves that overhead as well
[00:48:14] <fiesh> ugh in the second I mean
[00:48:17] *** Quits: paul424 (~tom@ip-5-172-233-229.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:49:31] <fiesh> so summing it up: ideally put everything in one gigantic header file (maybe call it windows.h) and give the compiler the opportunity to see everything
[00:49:53] <kalven> or let LTO do its thing
[00:50:48] <PJBoy> but with the windows.h approach you can also speed up programs by defining min and max as macros
[00:51:01] <PJBoy> macros are quicker than functions
[00:51:04] <rpav> wtf doesn't fmt allow formatting non-void* pointers
[00:51:42] <Gvidon> PJBoy: pls, no üò•
[00:51:55] <PJBoy> it's true https://godbolt.org/z/oM6MTshe7
[00:52:03] <johnny> these inlinay hints are interesting
[00:52:06] <johnny> inlay*
[00:52:14] <PJBoy> the codegen for F has no memory ops whatsoever
[00:52:22] <johnny> i think i had them when i was playng with clion before
[00:52:38] <rpav> johnny: what is this
[00:53:12] <johnny> it's where it shows you the name of the parameter of the function when you're calling it like foo(bar: myVariable)
[00:53:21] <rpav> ah
[00:53:33] <Gvidon> PJBoy: I fear there might be people in this channel who don't understand you're joking
[00:54:15] <johnny> namespaced macros
[00:54:29] <johnny> STD::MIX
[00:54:33] <PJBoy> to anyone following my advice, please accept all the credit yourself, I'm perfectly humble
[00:54:36] <johnny> oh but :: are probably not valid
[00:55:27] <johnny> i meant MAX :(
[00:55:53] <johnny> but they would have done us a favor if it was WINDOWS_MAX or WIN32_MAX
[00:55:54] <PJBoy> yeah you can't namespace macros
[00:56:05] <johnny> yeah i know you can't
[00:56:15] <PJBoy> which is why setjmp and std::longjmp
[00:56:26] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[00:56:37] <johnny> i'm gonna go watch the std::longjmp event
[00:56:40] <PJBoy> dude windows would have done us a favour by using MAX
[00:56:45] <PJBoy> they macro'd `max`
[00:57:18] <Gvidon> And it was a total shitshow
[00:57:32] <PJBoy> it still is
[00:57:38] <johnny> the actual macro isn't important.. just that if it's specific to them, it should be prefixed
[00:58:00] <Gvidon> Probably. But I don't have to touch it anymore
[00:58:46] <PJBoy> windows having like 100,000 macros for its unicode/ansi compatibility thing also sucks
[00:59:18] <PJBoy> it's like `using namespace std;` * 100
[01:00:44] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4.1)
[01:01:50] <ville> PJBoy: well you can't not use that really. the global namespace poisoning is here to stay. forever
[01:02:21] <PJBoy> modules will save us
[01:02:33] <johnny> did C++ have namespacing from the beginning?
[01:02:51] <PJBoy> I can limit my windows poison to my windows modules
[01:02:52] <ville> what do you count as the beginning?
[01:03:04] <ville> certainly 1998
[01:03:05] <johnny> before ths standardization
[01:03:05] <Alipha> johnny: from the first official standard, c++98? yes
[01:03:44] <rpav> `f(T(*x), std::move(x))` // speaking of argument order errors
[01:03:47] <Alipha> <iostream.h> and such didn't have cout, cin, etc in std, iirc
[01:03:48] <johnny> if you don't know offhand, don't bother looking it up. it's not that important that i know
[01:03:56] <PJBoy> https://en.cppreference.com/w/cpp/language/history says they were introduced for Cfront 3.0
[01:04:07] <johnny> i said not to look it up :) hehe
[01:04:30] <johnny> that's some history though
[01:04:33] <PJBoy> I had already written half that message
[01:04:34] <PJBoy> <_<
[01:04:39] <johnny> well thanks buddy, i appreciate it
[01:04:39] <Alipha> >_>
[01:05:12] *** Joins: Rayke (rayke@user/rayke)
[01:05:18] <johnny> printf, you are no friend to me :(
[01:05:30] <PJBoy> then they went "hey Cfront is a terrible terrible name" and wrote C++ in 1998
[01:06:18] <johnny> well the consequence of that is that you can never look up freakin things by c++ alone .. i see cxx, c++, and cpp for various package names and things
[01:06:28] <johnny> like if i want the stdlib i gotta get libcxx here
[01:06:34] <PJBoy> and added global locale, IO streams and RTTI, all the stuff we love to talk about even to this day
[01:09:08] <rpav> C++, whose main feature is its lack of consistency
[01:09:17] <johnny> so who uses alternative extensions for regular C? every project i've seen just uses .c and .h
[01:09:27] <johnny> alternative file name extensions*
[01:09:37] <rpav> .C ;)
[01:09:40] <PJBoy> .C and .H if you count that
[01:09:45] <rpav> (which i've also seen used for c++)
[01:10:03] <PJBoy> IIRC GCC interprets those as C++
[01:10:10] <johnny> i've yet to see .c/.C for cpp, but certainly .h
[01:10:21] <rpav> no just .C, not .c
[01:10:24] <johnny> ah
[01:10:38] <johnny> well on windows it's the same thing anyways
[01:10:39] <PJBoy> I've seen a tonne of .cpp for C code
[01:10:52] <rpav> cpp is most prevalent though probably should have always been .c++
[01:11:08] <johnny> consumed by a c compiler? PJBoy
[01:11:22] *** Joins: AbleBacon_ (~AbleBacon@user/AbleBacon)
[01:11:26] <PJBoy> nope
[01:11:32] <PJBoy> <_<
[01:11:42] <Alipha> I use .ƒá
[01:11:45] <johnny> hah
[01:11:53] * imMute doesn't use extensions...
[01:11:57] <johnny> you folks are just a fountain of knowledge aren't ya
[01:12:09] <johnny> i appreciate it though
[01:12:11] <rpav> Alipha: does that have any relation to c++ though
[01:12:13] <imMute> and snark.  don't forget the snark.
[01:12:20] <rpav> Alipha: or are you meaing for C
[01:12:34] <PJBoy> yeah both linux and windows are fine with + in filepaths :/
[01:12:36] <johnny> too bad plus plus isn't a musicl related thing
[01:12:42] <PJBoy> why *don't* we use .c++
[01:12:53] <johnny> sorry i mean just a plus, not plus plus
[01:12:57] <rpav> because the first thing C++ established is that it was terrible at naming
[01:13:03] <PJBoy> oh right yeah
[01:13:08] <fiesh> C# is C sharp, and C++ is C snark
[01:13:10] <johnny> .c#
[01:13:19] <PJBoy> the # in C# isn't even a sharp
[01:13:25] <Shell> how about .cc
[01:13:26] * Shell ducks
[01:13:30] <johnny> .cc i've seen tons of
[01:13:34] <Shell> it's awful
[01:13:39] <Alipha> rpav: for c. i use .++ƒá for c++
[01:13:40] <rpav> well "c pound" doesn't have the same ring
[01:13:41] <Shell> I don't know why it came into use
[01:13:42] <PJBoy> sharps have vertical lines
[01:13:43] <Alipha> i'm polish
[01:13:46] <rpav> Alipha: :D
[01:13:54] <PJBoy> # has diagonal lines
[01:14:18] <rpav> # is purely horizontal/vertical for me
[01:14:23] <fiesh> it's C hash but pronounced Cash
[01:14:27] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Ping timeout: 256 seconds)
[01:14:29] <rpav> musical sharps are slightly diagonal
[01:14:55] <johnny> ya'll love to hate on JS, but perhaps out of all the popular languages, the problems (minus abi) are the closest to C++
[01:15:06] <Gvidon> C# is just a pun on C++ anyway. Four pluses instead of two
[01:15:06] <johnny> stuff you can't change but want to
[01:15:08] <PJBoy> all the sharps I see on google have two parallel vertical lines
[01:15:15] <fiesh> C‚ôØ
[01:15:19] <Shell> johnny: except for the fact that C++ people hate depending on libraries. :p
[01:15:23] <johnny> lol
[01:15:23] <PJBoy> and the octothropes tend to have parallel horizontal lines
[01:15:23] <rpav> i'm going to make a language and call it ‚ôÆE
[01:15:42] <rpav> PJBoy: well, yes, those are parallel; the "horizontal" bits are slightly diagonal
[01:15:43] <johnny> yeah i just meant the core language..
[01:16:07] <PJBoy> that's what I'd expect from a sharp
[01:16:37] <rpav> oh it depends on the font i guess, i see the "vertical" lines on numbersign is slightly diagonal in non-fixed
[01:16:39] <PJBoy> there's not too much of a requirement on # tbf
[01:16:39] <johnny> Shell, it's also similar to php in the stdlib way.. a poor stdlib that people didn't wanna deviate from since using external libs was too hard (until composer)
[01:16:54] * Shell nodnod.
[01:16:56] <PJBoy> for me they're four diagonal lines
[01:17:28] <rpav> "which language should I use? natural-E"
[01:17:41] <johnny> dude i only write unnatural-e
[01:17:53] <PJBoy> sounds accidental
[01:17:57] <rpav> üëªE
[01:18:07] <rpav> PJBoy wins the internet
[01:18:23] <PJBoy> ty ty
[01:18:32] <johnny> hey, ubt somebody wrote something and posted to r/cpp that i might actually use.. if it's reasonable
[01:19:05] <johnny> a cross platform ble (bluetooth low energy) library
[01:19:32] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[01:19:33] <johnny> the thing i'm doing now is quite the hack
[01:19:34] <rpav> why are platforms always so angry
[01:19:53] <johnny> it's not the platforms that are angry, it's us who are angry at having to deal with them
[01:20:05] <rpav> it's funny though, reddit used to be a pure cesspool, now it's like a cesspool with a reasonable amount of golden turds
[01:21:59] *** Quits: robod34 (Username@79.115.134.214) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:24:13] <johnny> i'm doing printf debugging :(
[01:26:38] <PJBoy> try debugging from log files
[01:26:53] <PJBoy> where the output is sometimes interleaved from multiple threads D:
[01:31:26] <rpav> threading is hell
[01:31:41] <rpav> i do a lot of print debugging though because with high volumes of output it's sortof the only way
[01:32:01] <Gvidon> Just add thread id to the logs
[01:32:20] <Gvidon> Not perfect, but makes it bearable
[01:32:26] <johnny> generally i namespace logs.. or let spdlog do the poor version of it via function names ;)
[01:32:33] *** Joins: ivii (~ivan@user/ivii)
[01:32:37] <johnny> that was nice to just let it use the function name and not thik about it
[01:32:52] <johnny> file::function:line
[01:33:05] <rpav> Gvidon: only helps if hte logging is already threadsafe enough to actually output full entries
[01:33:06] <johnny> that was the magic trick with std::source_location
[01:33:21] <johnny> i talked to you folks about that hack before
[01:33:30] <johnny> some of you*
[01:33:50] <johnny> relying on implicit conversion with the constructor
[01:33:53] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[01:34:45] <johnny> right now i'm not dealing with anything fancy in threading here.. it's just a loop that reads input from a gpio in
[01:34:46] <ville> also to important news to pass up: https://returntomonkeyisland.com
[01:35:10] <johnny> i didn't play many of those types of games, although i know they were pretty popular
[01:35:19] *** Joins: markong (~kvirc@213.146.188.203)
[01:35:51] <Gvidon> Didn't they make the remake of monkey island like years ago?
[01:35:52] <johnny> man, i build this bootloader from source with my own board definition file and it's better than the one it shipped with. that's kinda lame
[01:36:25] <johnny> their forked version (that they din't contribute upstream) doesn't have a nice blinky led to show it's in bootloader mode :(
[01:36:36] <johnny> it's goes with a slow fade in and out, so you know!
[01:37:35] <johnny> man.. and i saw their forked code and it's clear they didn't read the original on how to work around a problem like everybody lse did for their board defintions. they just commented out tons of code
[01:37:37] <ville> Gvidon: yes there were special editions with improved graphics and sounds, but same story/puzzles
[01:37:52] <johnny> soetimes i feel like a particularly bad programmer, but then i see that
[01:38:01] <ville> Gvidon: this is presumably a new story
[01:38:06] <Gvidon> Nice
[01:38:12] <johnny> i spent like 5 minutes with the codebase and i could get a feel for the conventions
[01:38:33] <Gvidon> These days every new adventure game is more than welcome. There aren't that many anymore :(
[01:41:31] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[01:43:31] <johnny> sounds ripe for a resurgence , since tons of folks haven't even played one
[01:47:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:53:35] <rpav> there are actaully quite a lot of new adventure games .. most not nearly as good as the old ones
[01:53:56] <rpav> though that assessment i guess is limited to the few i've played
[01:54:43] <rpav> all of telltale's stuff was shit though
[01:58:11] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 268 seconds)
[01:58:51] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[02:03:43] *** Joins: vin (~vin@user/crash)
[02:04:05] <vin> Hi, I am trying to compile c++ code using gcc because I wanted to use a custom glibc (I want __memmove_chk_avx512_no_vzeroupper) however I get an underfined reference error. I have tested this with c code and it works fine. Here is the command and ouput https://pastebin.com/raw/EgtV6Xtb
[02:13:15] *** Quits: jsbach (~jsbach@2a01:c23:6018:f800:6f6c:d942:12b0:84da) (Ping timeout: 260 seconds)
[02:16:23] <johnny> here i am wishing i used a different format :(
[02:17:20] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[02:19:04] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[02:19:17] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[02:37:53] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[02:38:32] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 246 seconds)
[02:43:17] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:44:35] *** Joins: badone (~badone@209.132.189.152)
[02:44:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:45:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:45:04] *** ChanServ sets mode: +v npaperbot
[02:45:10] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:45:31] *** AbleBacon_ is now known as AbleBacon
[02:47:21] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:58:59] *** Joins: Bracco (~Bracco@37.161.35.131)
[02:59:17] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:59:24] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:7d85:9901:c4f9:1225) (Ping timeout: 240 seconds)
[03:01:47] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:03:52] *** Quits: Bracco (~Bracco@37.161.35.131) (Quit: Leaving)
[03:06:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42)
[03:17:25] *** Quits: Guest69 (~Guest69@ip68-105-113-105.sd.sd.cox.net) (Ping timeout: 256 seconds)
[03:21:42] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[03:23:04] *** Joins: jkl (~jkl@user/jkl)
[03:25:16] *** Joins: Roughy (~mdaw45ns@user/roughy)
[03:46:33] *** Joins: seninha (~seninha@user/seninha)
[03:47:59] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[03:48:17] *** Joins: immibis (~hexchat@62.156.144.218)
[03:50:35] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[03:55:22] *** Joins: teepee (~teepee@openscad/teepee)
[04:04:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[04:07:05] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[04:18:02] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:19:45] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:04] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[04:31:03] *** Joins: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro)
[04:31:28] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[04:32:39] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:816b:2899:d068:2f42) (Quit: Quit)
[04:36:38] *** Joins: RazielZ (~Raziel@user/raziel)
[04:37:01] *** Joins: udet_ (~udet@ve603.venus.servdiscount-customer.com)
[04:37:29] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5322)))
[04:37:29] *** Joins: raekye3 (~raekye@creatifcubed.com)
[04:37:30] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[04:37:33] *** Quits: aosync (~aws@mx1.aosync.me) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[04:37:33] *** Quits: Dijky (~Dijky@user/dijky) (Ping timeout: 256 seconds)
[04:37:48] *** Joins: jancoow9 (~jancoow@user/jancoow)
[04:38:27] *** Joins: Dijky (~Dijky@user/dijky)
[04:38:54] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (Quit: No Ping reply in 180 seconds.)
[04:39:03] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Remote host closed the connection)
[04:39:05] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[04:39:15] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: raekye (~raekye@creatifcubed.com) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (Ping timeout: 256 seconds)
[04:39:15] *** raekye3 is now known as raekye
[04:39:15] *** jancoow9 is now known as jancoow
[04:39:19] *** Quits: Cyp_ (~cyp@213.237.84.236) (Read error: Connection reset by peer)
[04:39:27] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[04:39:43] *** Joins: Cyp_ (~cyp@213.237.84.236)
[04:39:49] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Ping timeout: 256 seconds)
[04:40:33] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[04:40:59] *** Joins: bdt (~bdt@2a01:799:39f:9d00:e65f:1ff:fe08:8a88)
[04:41:33] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:43:02] *** Joins: Maximus (~sevalecan@user/sevalecan)
[04:43:13] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: Soliton (soliton@wesnoth/developer/soliton) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: Aph3x-WL (~Aph3x@li616-175.members.linode.com) (Ping timeout: 256 seconds)
[04:43:13] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[04:43:37] *** Joins: ville (~ville@user/ville)
[04:43:47] *** Quits: sonic (~sonic@user/sonic) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[04:43:47] *** Maximus is now known as Sevalecan
[04:43:47] *** Quits: xisop (~xisop@bnull.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: v4mp (~v4mp@user/v4mp) ()
[04:43:55] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[04:44:11] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[04:44:16] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[04:44:21] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: veverak (~veverak@89.102.98.161) (Ping timeout: 256 seconds)
[04:44:54] *** Joins: Soliton (soliton@wesnoth/developer/soliton)
[04:45:37] *** Joins: xisop (~xisop@bnull.net)
[04:45:47] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[04:45:55] *** Joins: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[04:52:13] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[04:56:57] *** Joins: obiwahn (~heini@user/obiwahn)
[04:57:14] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[04:57:18] *** Joins: Aph3x-WL (~Aph3x@li616-175.members.linode.com)
[04:57:31] *** Joins: sonic (~sonic@user/sonic)
[05:01:06] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Killed (NickServ (GHOST command used by Friithian!gunqqer@friithian.dev)))
[05:01:19] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[05:05:52] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 260 seconds)
[05:11:22] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:12:52] <jbalint_> anybody able to comment on this sentence from Google style guide? > Because of historical accident, the C++ standard also uses unsigned integers to represent the size of containers - many members of the standards body believe this to be a mistake, but it is effectively impossible to fix at this point
[05:13:03] <jbalint_> I think... what is wrong with unsigned numbers?
[05:15:46] <Friithian> oh no, someone mentioned unsigned vs signed, this'll be fun to watch (some people have‚Ä¶ strong opinions)
[05:18:22] <johnny> isn't this about the integer overflow really?
[05:25:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:32:03] <kalven> the idea is that there are fewer surprises when you stick to signed numbers
[05:34:02] <jbalint_> it feels more explicit as a type declaration
[05:34:34] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[05:35:48] <computerquip> There's a wide range of issues from performance to usability
[05:37:12] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:40:17] <computerquip> My google skills are lacking today but basically, if you do ctr1.size() - ctr2.size(), one would think that the result could be negative.
[05:40:49] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz‚Ä¶)
[05:40:52] <computerquip> That's at least one example of the usability issues... there was a cpptalk about how signed integers tend to do better performance wise but I can't find it
[05:41:15] <jbalint_> ok, I'm interested in understanding the arguments, performance aside
[05:42:59] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a022:1434:f490:bc25)
[05:43:29] <ezzieyguywuf> is the size of the heap determined at compile-time? is it written into the binary somehow?
[05:43:41] <computerquip> Doubt it
[05:44:54] <ezzieyguywuf> drat, I meant to ask is the stack size determined at compile time
[05:45:29] <ezzieyguywuf> I always sort of assumed that the stack size was static, but now as I'm trying to support that assumption with research I'm not really finding anything definitive
[05:45:41] <jbalint_> look at ulimit. it's not static
[05:48:26] <Alipha> << 5u - 8u; // jbalint_
[05:48:27] <geordi> 4294967293
[05:48:54] <Alipha> << (-3 < 5)
[05:48:55] <geordi> true
[05:48:59] <Alipha> Oops
[05:49:05] <Alipha> << (-3 < 5u)
[05:49:06] <geordi> warning: comparison of integer expressions of different signedness: 'int' and 'unsigned int'
[05:49:19] <Alipha> geordi: -w << (-3 < 5u)
[05:49:19] <geordi> false
[05:51:01] <Alipha> { vector<int> v{4, 5, 6}; for(auto i = v.size(); i >= 0; --i) cout << v[i]; }
[05:51:02] <geordi> warning: comparison of unsigned expression in '>= 0' is always true
[05:51:54] <Alipha> I'm still an advocate for unsigned integers and size_t though :-/
[05:52:45] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[05:53:02] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:56:41] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Client Quit)
[05:58:28] <computerquip> getrlimit can fetch stack size but I doubt there's a marker in the executable that hard-determines that size
[05:59:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a022:1434:f490:bc25) (Quit: Quit)
[06:06:07] <Hello71> on Unix-like systems the stack size is set with setrlimit/ulimit
[06:06:21] <Hello71> er, jbalint_ already said that
[06:06:50] <Hello71> that's only for the main thread though. pthread stack sizes are implementation-defined
[06:10:43] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5324)))
[06:10:44] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[06:11:45] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[06:12:58] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 260 seconds)
[06:16:44] *** Joins: Inline__ (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de)
[06:17:52] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:19:00] *** Quits: Inline (~Inline@p200300cd47090700f6a7abc6bfc79784.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:30:02] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[06:30:26] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[06:33:26] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:37:53] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 248 seconds)
[06:38:24] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[06:38:58] *** Joins: acidtonic_ (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net)
[06:41:05] *** Quits: rouji (~rouji@x0.at) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: mathu (~matt@user/mathu) (Ping timeout: 256 seconds)
[06:41:32] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[06:41:39] *** Quits: naur (naur@user/naur) (Ping timeout: 256 seconds)
[06:41:39] *** Quits: acidtonic (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[06:41:39] *** Quits: malinus (~malinus@172.245.158.16) (Ping timeout: 256 seconds)
[06:42:42] *** Joins: mathu (~matt@user/mathu)
[06:42:58] *** Joins: klys (~mdasoh@show.op8.us)
[06:43:08] *** Joins: malinus (~malinus@172.245.158.16)
[06:43:14] *** Joins: naur (naur@user/naur)
[06:44:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:45:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:45:06] *** ChanServ sets mode: +v npaperbot
[06:47:09] *** Joins: aosync (~aws@mx1.aosync.me)
[06:47:35] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Ping timeout: 240 seconds)
[06:52:14] *** Joins: rouji (~rouji@x0.at)
[07:00:47] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Killed (NickServ (GHOST command used by Friithian!gunqqer@friithian.dev)))
[07:00:59] *** Joins: adeliktas6 (~adeliktas@i59F5F534.versanet.de)
[07:01:04] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[07:03:03] *** Quits: adeliktas (~adeliktas@i59F5F92F.versanet.de) (Ping timeout: 260 seconds)
[07:03:03] *** adeliktas6 is now known as adeliktas
[07:24:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:38:09] *** Joins: snake (~snake@user/snake)
[07:39:48] <snake> I want to demonstrate something in the bot
[07:39:58] <snake> can I PM the bot to get it right first?
[07:40:04] <snake> i dont remember the name of the bot
[07:40:22] <kalven> yes, you can pm geordi
[07:44:26] <snake> i can't figure it out lol
[07:44:38] <snake> i expect this to give 0 but im getting some garbage instead printf("time since now test: %d\n",(int) std::chrono::high_resolution_clock::now().time_since_epoch().count());
[07:44:56] <snake> am i using the wrong clock?
[07:47:23] <kalven> << std::chrono::high_resolution_clock::now().time_since_epoch().count()
[07:47:24] <geordi> 1649128644051230964
[07:48:06] <kalven> so that looks like nanoseconds since the epoch.
[07:48:48] <snake> ohh ok yeah i just need milliseconds
[07:49:59] <kalven> std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count()
[07:50:11] <kalven> << std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::high_resolution_clock::now().time_since_epoch()).count()
[07:50:12] <geordi> 1649128812113
[07:50:15] <kalven> it's so fucking wordy
[07:50:28] <snake> heh yeah but that seems high too, doesn't it?
[07:50:37] <kalven> no, why?
[07:50:53] <snake> i thought it was the time since now()
[07:51:14] <snake> or should i subtract by now() to get that?
[07:51:58] <kalven> what kind of value are you looking for? the code is giving you the number of milliseconds since the epoch (start of 1970)
[07:53:17] <snake> ok that makes sense now
[07:55:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:18] <snake> kalven, i need something like this https://docs.rs/time/0.2.2/time/struct.Instant.html#method.elapsed
[07:56:28] <snake> the amount of time elapsed since i created the object
[07:57:24] <kalven> so then you'll need to create a timepoint, store it away, then create a second one and subtract the first, that'll give you the duration between the two
[07:57:39] <johnny> genrally you take the now at a previous time and the now now and subtract from it, but you should save the the conversion to milliseconds until the end
[07:58:01] <johnny> yeah timepont is the thing you want indeed
[07:58:01] <snake> ok
[07:58:11] <snake> ok
[07:58:34] <johnny> of course my platform only gained std::chrono somewhat recently, so i still have some of the old ways around
[08:00:51] <jbalint_> s390?
[08:00:57] <snake> that did it, thanks everyone
[08:01:48] <johnny> lol no jbalint_ . it's embedded arm
[08:02:54] *** Joins: smeso (~smeso@user/smeso)
[08:02:58] <johnny> i guess recently is overstating it though. the stdlib bits were there probably before it was adopted. the real rpoblem was support across all 3 compilers iar, armcc, and gcc
[08:28:43] *** Quits: johnny (~johnny@user/johnny) (Read error: Connection reset by peer)
[08:38:22] *** Joins: jbalint (~jbalint@071-090-119-177.res.spectrum.com)
[08:39:31] *** Quits: jbalint_ (~jbalint@071-090-119-177.res.spectrum.com) (Ping timeout: 256 seconds)
[08:41:08] *** Joins: johnny (~johnny@user/johnny)
[09:02:36] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[09:08:47] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 246 seconds)
[09:11:40] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[09:11:42] *** Joins: jackblasted (~quassel@173.239.197.3)
[09:11:47] *** Joins: KombuchaKip (~kip@192.252.230.5)
[09:15:04] *** Joins: noarb (~noarb@user/noarb)
[09:24:08] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[09:31:41] *** Joins: Inline (~Inline@p4fedbc1e.dip0.t-ipconnect.de)
[09:33:48] *** gentooclimax is now known as climax
[09:34:13] *** Quits: Inline__ (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:39:12] *** climax is now known as gentooclimax
[09:54:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[09:56:17] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:58:14] <computerquip> duration_cast<ms>(hrc::now().time_since_epoch()).count()
[09:58:22] <computerquip> Doesn't have to be wordy
[10:02:05] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[10:04:55] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:13:06] <kalven> but it is
[10:14:36] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[10:14:41] *** Joins: calcul0n (~calcul0n@82.66.20.65)
[10:21:24] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[10:22:09] <lpapp> LordKalma: I posted the map comp solution here, albeit it will be neglected at the bottom :) https://stackoverflow.com/a/71746843/2682142
[10:23:05] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[10:23:25] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:23:36] <johnny> that still looks wordy to me
[10:27:21] <kalven> with abseil it'd be: ToInt64Milliseconds(Now() - UnixEpoch())
[10:28:20] <computerquip> I do think duration_cast is a bit weird... and .count() could probably be avoided
[10:33:31] <computerquip> ms elapsed(hrc::now().time_since_epoch())
[10:33:45] <computerquip> Herm...
[10:34:02] <johnny> .unix_time() or just .unix()
[10:34:35] <johnny> hmm. i haven't looked into abseil yet really
[10:35:12] <kalven> I mean.. we can debate about what std::chrono should look like, but the current API is pretty damn wordy (in my opinion)
[10:35:48] <computerquip> Well, duration_cast<ms>(hrc::now().time_since_epoch()).count() is within the constraints of the current API, just have to use a bunch of using directives which is arguably not much better.
[10:37:20] <computerquip> I feel like there was a reason for duration_cast but the more I look at it, the more disgusting it looks to me lol
[10:37:30] <computerquip> Oh well
[10:38:45] <kalven> duration_cast is there to make it obvious that you're potentially throwing away resolution
[10:40:15] <kalven> for example, it'll implicitly convert from seconds to milliseconds, but the reverse requires a csast
[10:44:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:45:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:45:07] *** ChanServ sets mode: +v npaperbot
[10:45:37] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[10:47:32] <computerquip> Yeah, that does seem reasonable.
[10:47:44] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[10:49:35] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[10:51:00] *** Quits: jackblasted (~quassel@173.239.197.3) (Ping timeout: 240 seconds)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:12:45] *** Joins: jsbach (~jsbach@2a01:c22:b00f:6a00:ac44:b596:cd28:d9c7)
[11:14:35] *** Quits: emerent (~quassel@p200300cd5743c3caba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:14:36] *** Joins: emerent_ (~quassel@p200300cd5743c37eba27ebfffed28a59.dip0.t-ipconnect.de)
[11:14:36] *** emerent_ is now known as emerent
[11:17:55] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[11:18:10] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:21:33] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[11:22:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:2c0c:4d27:84df:c44e)
[11:25:19] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[11:30:23] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[11:34:15] *** Joins: ivii (~ivan@user/ivii)
[11:36:05] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:39:02] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:2c0c:4d27:84df:c44e)
[11:39:19] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:2c0c:4d27:84df:c44e) (Quit: Quit)
[11:45:00] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[11:45:50] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[11:53:11] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[11:53:54] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:55:57] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[12:05:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:12:55] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[12:12:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[12:20:39] *** Joins: epony (epony@user/epony)
[12:27:40] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[12:28:28] *** Joins: robod34 (Username@79.115.134.214)
[12:31:16] *** Joins: paule32 (~paul@nat-91-137-17-30.net.encoline.de)
[12:31:16] *** Quits: paule32 (~paul@nat-91-137-17-30.net.encoline.de) (Changing host)
[12:31:16] *** Joins: paule32 (~paul@user/paule32)
[12:32:08] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 246 seconds)
[12:34:57] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:35:58] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:36:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[12:44:51] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[12:46:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Konversation terminated!)
[12:58:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:00:57] *** Joins: paule32_ (~paul@nat-91-137-28-25.net.encoline.de)
[13:00:58] *** Quits: paule32_ (~paul@nat-91-137-28-25.net.encoline.de) (Changing host)
[13:00:58] *** Joins: paule32_ (~paul@user/paule32)
[13:03:59] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 246 seconds)
[13:04:06] *** Joins: bobb_ (~bobb_@dslb-092-074-250-012.092.074.pools.vodafone-ip.de)
[13:05:42] *** Joins: sigma_ (~sigma@5.119.20.233)
[13:08:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:45] <LordKalma> !rq
[13:10:45] <nolyc> LordKalma: <ashafq> LordKalma: because sharing is caring üòâ it could be fun
[13:11:01] <LordKalma> I don't remember this
[13:11:51] <sigma_> hi, how can i load or write object from file. i normally i cant write object!? and i tried to play with template and ios but i dont know how? https://wandbox.org/permlink/TzJzST5J9yO3we6s
[13:13:12] *** Parts: m_ben (~m_ben@user/m-ben/x-7429725) (WeeChat 3.4.1)
[13:13:34] <Haohmaru> "object" from file?
[13:13:46] <sigma_> yes
[13:13:50] <sigma_> i can?
[13:13:56] <sigma_> like game?
[13:14:46] <sigma_> in google they are just convert data to const char* but this not good
[13:15:03] <Haohmaru> do you mean you wanna load some data from a file into memory.. maybe into a struct/class instance (object)
[13:15:09] <sigma_> yes
[13:15:36] <Haohmaru> well, there are probably like at least 983729283 different ways you can do that
[13:15:57] <sigma_> i work with json lib and act like object
[13:16:14] <sigma_> so like map
[13:16:16] <Haohmaru> so you already have a fileformat
[13:16:23] <sigma_> yes
[13:16:24] <Haohmaru> and possibly a parser
[13:16:32] <Haohmaru> what's the problem then?
[13:16:39] <Haohmaru> you gotta glue it up
[13:17:29] <sigma_> so what is parser and, i cant wirte like ofstream<< object
[13:18:03] <sigma_> that is problem
[13:18:34] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[13:21:21] <Haohmaru> well, as far as i can tell, you gotta basically make an exporter and an importer
[13:22:08] <sigma_> yes, exactly i tried
[13:22:39] <sigma_> i need just work with template?
[13:22:42] <Haohmaru> the simplest (and maybe not wisest) way to do it is to just write the mere "data" of your structs into a file (as binary data), and then read it back from the file
[13:23:04] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[13:23:07] <Haohmaru> but people tend to use better ways, like, using fileformats and more careful code
[13:23:22] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[13:23:34] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[13:26:06] <sigma_> binary data not work becuase invalid operands to binary expression ('std::fstream' (aka 'basic_fstream<char>') and 'test'), so i decide edit basic_fstream
[13:26:20] <Haohmaru> you wot
[13:28:36] <sigma_> is seems basic_fstream<char> just accept character?
[13:29:20] <Haohmaru> you don't *need* to fiddle with basic_fstream directly in order to write binary data
[13:29:45] <Haohmaru> you can just use fstream in binary mode
[13:30:08] <Haohmaru> but as i said, this is usually not a great idea
[13:31:43] <sigma_> yeh , i konw https://wandbox.org/permlink/GjpDTy5hz3Mf3ct2
[13:31:57] <Haohmaru> { MEH meh{5516, 9.7543f}; size_t i = 0; const uint8_t* p = reinterpret_cast<const uint8_t*>(&meh); while (i < sizeof(meh)) { cout << p[i]; ++i; } } struct MEH { short flag; float q; }
[13:31:57] <geordi> error: expected ';' after struct definition (fix known)
[13:31:58] <sigma_> but i got same error
[13:32:02] <Haohmaru> { MEH meh{5516, 9.7543f}; size_t i = 0; const uint8_t* p = reinterpret_cast<const uint8_t*>(&meh); while (i < sizeof(meh)) { cout << p[i]; ++i; } } struct MEH { short flag; float q; };
[13:32:03] <geordi> ÔøΩ[\NAK]6~ÔøΩ[\DC1][\FS]A
[13:32:15] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:32:48] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[13:34:34] <apollo13> hi there, if I have a template definition like this: https://gist.github.com/apollo13/396780d8f5062d44bda7219d5832234f and call it via selvector("", [](Row) -> std::string { return "";}) it cannot automatically deduce that I want the std::string variant as template type
[13:34:40] <Haohmaru> while it might work, it might also stop working properly when certain things change, so it's not reliable
[13:34:48] <apollo13> is there any chance I can get this working?
[13:35:18] <ville> !give apollo13 testcase
[13:35:19] <nolyc> apollo13: A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[13:35:33] <apollo13> oki doki, gimme a minute
[13:35:44] * Haohmaru starts the stopwatch
[13:35:50] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 246 seconds)
[13:35:53] <apollo13> haha, okay it will take more than that
[13:36:16] <Haohmaru> <stopwatch> I DON'T CARE
[13:36:32] <Haohmaru> the stopwatch has no soul
[13:36:44] <Haohmaru> no mercy
[13:37:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:38:42] * Haohmaru toggles nolyc
[13:38:44] <Haohmaru> !rq
[13:38:44] <nolyc> Haohmaru: <rpav> i mean let's all just go back to writing C and living in caves
[13:39:17] <apollo13> So this throws an error: https://godbolt.org/z/qsssW1E9j
[13:39:41] *** Quits: sigma_ (~sigma@5.119.20.233) (Quit: Konversation terminated!)
[13:39:51] <apollo13> and I am wondering if there is a way for the template deduction to realize that this lambda returns std::string without me having to call selvector explicitly with <std::string>
[13:40:13] <Haohmaru> there were these deduction guides
[13:40:24] <Haohmaru> but don't ask me how to.. x_x
[13:40:59] <ville> apollo13: is it particularly important that it takes std::function?
[13:41:18] <apollo13> ville: no, I just want to pass in a lambda, I have no clue what I should tell it that it takes
[13:42:02] <ville> just template that parameter then?
[13:42:24] *** Joins: paul424 (~tom@ip-5-172-237-67.multi.internet.cyfrowypolsat.pl)
[13:42:29] * apollo13 scratches head
[13:42:56] <apollo13> just template and hope it resolves correctly? let me try
[13:44:02] <ville> you've couple "problems" there. first is just getting the lambda passed in. the other is then making the correct kind of std::vector based on the return type of the callable thing
[13:45:21] <ville> so just templating the callable type solves the first. next you need to recover the return type from it somehow
[13:45:50] <apollo13> indeed that is what I am staring at now :D
[13:45:52] <ville> sometimes you don't particularly care and you can just auto your way out of having to write types very explicitly
[13:46:34] <apollo13> https://godbolt.org/z/dr46bPMGM not sure what to do here though, I somehow need to tell the compiler that ResultRow depends on the return value of Function
[13:46:57] <Haohmaru> this "auto" is beginning to remind me too strongly about the .bg word "takova"
[13:47:17] <Haohmaru> #define takova auto
[13:48:41] <apollo13> Oh I have an idea, let me try
[13:48:47] <ville> apollo13: you can write functions such as: auto f() { return 0; } in c++ these days. not even telling what the exact return type is
[13:52:12] <smallville7123> does casting a double to a float CONVERT the value or REINTERPERATE the value ?
[13:52:57] <ville> but then you're still left with the problem of what kind of vector based on the return type of the callable
[13:53:41] <Haohmaru> smallville7123 it converts it
[13:53:41] <apollo13> ville: yeah :&
[13:54:11] <smallville7123> alright
[13:54:33] <Haohmaru> smallville7123 float and double are the same format, same number of sign bits (1) but different number of mantissa and exponent bits
[13:54:49] <smallville7123> yea :)
[13:54:52] <Haohmaru> so a little bit-fiddling is involved
[13:55:01] <Haohmaru> but it's probably very fast
[13:56:01] <ville> apollo13: and you can do something like: decltype(f()) x;
[13:56:28] <apollo13> ville: yeah this is what I am trying https://godbolt.org/z/1jqePffKv -- but still needs a bit more I guess
[13:57:35] <ville> apollo13: decltype takes an expression like you were calling it
[13:58:12] <apollo13> guess I am to stupid
[14:00:52] <apollo13> slowly getting somewhere :)
[14:01:06] <ville> want to hack at it or want me to paste a possible solution?
[14:01:32] <apollo13> mhm no learning in there, I am slowly getting there, might get back to you in an hour or so? then I will take you up on it
[14:03:52] <apollo13> ville: so far this compiles https://godbolt.org/z/4feKW9Wc7 -- now I "just" need to add the vector, right?
[14:03:53] *** Quits: kkd (uid425746@id-425746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:06:02] <ville> apollo13: yes. it's somewhat unnecessary to do the return type for the selvector if it's short. same for the lamba
[14:06:48] <ville> err lambda
[14:09:08] <apollo13> ville: https://godbolt.org/z/KPrEPcz8c so this works, is this what you had intended?
[14:09:18] *** Joins: andreasbuhr (~quassel@p549dba7d.dip0.t-ipconnect.de)
[14:09:28] <apollo13> or can I make this even nicer
[14:09:45] <ville> apollo13: looks right i'd say
[14:09:52] <ville> for some value of right
[14:10:03] <apollo13> haha, for which value of wrong is it problematic?
[14:10:43] <ville> oh no, just stupid way of saying there are many was you could arrive at a working solution and rather pointless to argue which is right
[14:12:10] <apollo13> haha, well thank you for your help ville -- I learned a lot today I guess
[14:21:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Konversation terminated!)
[14:22:14] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:22:32] *** Parts: y0m0n (~NA@5-12-91-184.residential.rdsnet.ro) ()
[14:22:52] <PJBoy> LordKalma, weird question, should I care about the copyright of conan recipes?
[14:23:16] <PJBoy> like if I wanted to make a derivative recipe
[14:23:52] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:24:23] <apollo13> ville: any idea how much code that generates if used often? I mean that will be in many compilation units -- is that something to care about or just forget about it?
[14:24:44] <apollo13> On the other hand manually writing that out also generates that code, so‚Ä¶
[14:26:15] <PJBoy> concerned about instantiating that template a bunch of times will create bloat?
[14:26:29] <apollo13> at least wondering
[14:26:36] <apollo13> concerned might be to harsh a word
[14:26:55] <PJBoy> right, I think it's reasonable to be aware of that
[14:27:24] <PJBoy> the template at present is small enough that it might as well be inlined at every call site
[14:27:36] <PJBoy> in those cases I wouldn't worry
[14:28:14] <PJBoy> if your template was like 100 lines long, I'd consider trying to delegate some of the work to a non-template function if possible
[14:28:57] <PJBoy> if possible and sensible and if the template is instantiated with lots of different arguments
[14:29:29] <apollo13> I see, thanks
[14:29:41] <PJBoy> I think I have an example of this
[14:29:42] <apollo13> btw if I inline this, is there any chance the the compiler will also "unroll" that lambda?
[14:29:57] <PJBoy> yeah there's a chance of that
[14:30:09] <PJBoy> and all function templates are inline, so there's a good chance
[14:30:16] <ville> apollo13: sure it'll be expanded bunch of times, but then again i would not care about it just because i know that's happening. i'd care about it if i had an actual requirement that was violated as a result
[14:31:12] <ville> such as you're developring for an embedded platform and only have so many 0s and 1s
[14:31:16] <apollo13> haha, no
[14:38:58] *** Joins: seninha (~seninha@user/seninha)
[14:42:34] <PJBoy> apollo13, here's my example https://godbolt.org/z/aP17fGeaf
[14:43:03] <apollo13> :)
[14:43:26] <PJBoy> I have that template `merge` that takes a reference to an array for size n where n is a template parameter
[14:43:52] <PJBoy> and it delegates to the `merge` where n is a (runtime) function parameter instead
[14:44:30] <PJBoy> and if you glance at the ASM you'll see how `merge<int>` takes a fair amount of codegen by itself
[14:44:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:45:07] <PJBoy> so if I hadn't delegated, that codegen would appear three times for those calls with those three arrays in main
[14:45:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:45:07] *** ChanServ sets mode: +v npaperbot
[14:45:40] <LordKalma> npaperbot, search PR22303
[14:45:40] <npaperbot> Nothing found for: pr22303
[14:45:42] <apollo13> makes sense
[14:45:59] <ville> LordKalma: 22K?
[14:46:00] <PJBoy> instead you can see around line 137 that `merge(T(&a)[n])` just gets inlined cheaply to the calls to the delegated version
[14:46:28] <PJBoy> and I used to use this trick a lot
[14:46:33] <PJBoy> then std::span came out
[14:46:38] <ville> i know there have been a lot of "constexpr abc" papers but don't think they're quite at 22k yet
[14:46:47] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[14:46:48] <PJBoy> ahahaha
[14:52:17] <PJBoy> [p2303]
[14:52:17] <npaperbot> P2303R4: [SG22] Basic lambdas for C <https://wg21.link/p2303r4> (by Jens Gustedt) (2021-12-24) (Related: https://wg21.link/p2303r4/github)
[14:55:18] *** Joins: cart_man (~rynot@host-78-144-123-112.as13285.net)
[14:56:15] <PJBoy> I'm a bit jealous that they get typeof instead of decltype
[14:59:32] <LordKalma> << typeof(x); int x{};
[14:59:32] <geordi> error: 'typeof' was not declared in this scope; did you mean 'typedef'? (fix known)
[15:00:20] <LordKalma> hahaha i saw the syntax on the paper
[15:00:29] <LordKalma> haha you can't assign lambdas to a variable? have to use #define?
[15:00:30] <LordKalma> ffs
[15:01:49] <LordKalma> << typeid(x).nam(); int x{};
[15:01:49] <geordi> error: 'const class type_info' has no member named 'nam'; did you mean 'name'? (fix known)
[15:01:54] <LordKalma> << typeid(x).name(); int x{};
[15:01:55] <geordi> int
[15:09:12] <PJBoy> I had the impression you could assign lambdas to function pointers
[15:09:43] <PJBoy> yeah
[15:10:08] <PJBoy> or not
[15:10:20] <PJBoy> >  closures cannot be called recursively because they don‚Äôt even to function pointers
[15:10:34] <PJBoy> *don't even convert to
[15:11:14] <LordKalma> the example on page 9 is weird afg
[15:11:15] <LordKalma> af
[15:11:22] <LordKalma> comp = []( void const * A , void
[15:11:28] <LordKalma> but no type before comp
[15:11:35] <PJBoy> comp is a global
[15:11:39] <LordKalma> ah I saw that now
[15:11:51] <LordKalma> so they can be assigned to function pointers
[15:12:01] *** Quits: proller (~p@2a02:6b8:b081:1214::1:2d) (Ping timeout: 248 seconds)
[15:12:07] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[15:12:11] <PJBoy> confusion
[15:12:22] <LordKalma> Fuck C
[15:12:41] <Haohmaru> !grab LordKalma
[15:12:41] <nolyc> Haohmaru: The operation succeeded.
[15:13:00] <Haohmaru> * evidence collected
[15:13:18] <LordKalma>  I stand by it
[15:13:37] <PJBoy> I need to read the paper properly before I can claim that C's bad
[15:14:18] <LordKalma> C is bad without that paper in particular
[15:14:19] <LordKalma> !C
[15:14:20] <nolyc> C is an old byte processing language without templates, exceptions, namespaces, constructors/destructors (and therefore RAII), virtual function polymorphism, references, operator/function overloading, reusable standard generic containers, or explicitly named casts.
[15:14:48] <PJBoy> yeah so I dislike how all those things don't exist
[15:14:57] <PJBoy> but the more things they add, the happier I am
[15:15:26] <PJBoy> unless they add auto, then I'm less happy >_>
[15:16:09] *** Quits: cart_man (~rynot@host-78-144-123-112.as13285.net) (Ping timeout: 268 seconds)
[15:22:29] *** Joins: mushket[m] (~mushkettc@2001:470:69fc:105::1:eae6)
[15:22:36] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:2c0c:4d27:84df:c44e) (Quit: Quit)
[15:22:38] *** Joins: Guest56 (~Guest56@51.195.40.161)
[15:24:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[15:25:29] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[15:30:03] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 260 seconds)
[15:31:01] *** Quits: Guest56 (~Guest56@51.195.40.161) (Quit: Client closed)
[15:33:13] *** Joins: Guest56 (~Guest56@51.195.40.161)
[15:34:23] *** Quits: Guest56 (~Guest56@51.195.40.161) (Client Quit)
[15:36:09] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[15:41:50] <ville> out of that list i'd want none in c
[15:44:36] *** Quits: zoraj (~zoraj@vmi794994.contaboserver.net) (Read error: Connection reset by peer)
[15:45:07] <PJBoy> but you love namespaces
[15:45:12] <ville> PJBoy: auto is in
[15:45:13] *** Quits: paul424 (~tom@ip-5-172-237-67.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[15:45:25] <PJBoy> confirmed?
[15:45:38] <PJBoy> I saw it was referenced in that lambda paper as a follow up
[15:47:49] *** Quits: Khoyo (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[15:48:12] <ville> now that i think about it probably misread, but can't find the page
[15:48:15] <PJBoy> might have misread, because I can't find the bit
[15:48:16] *** Joins: zoraj (~zoraj@vmi794994.contaboserver.net)
[15:48:18] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:48:20] <PJBoy> <_<
[15:49:13] <ville> apparently they've final(?) vote in june/july
[15:50:12] <PJBoy> oh hey
[15:50:16] <PJBoy> [p1936]
[15:50:16] <npaperbot> P1936R0: [EWGI] Dependent Static Assertion <https://wg21.link/p1936r0> (by Ruslan Arutyunyan) (2019-10-07) (Related: https://wg21.link/p1936r0/github)
[15:50:18] <PJBoy> I want that
[15:50:29] *** Joins: jokoon (~eio@2a01:e0a:542:e160:70b6:eea:845c:cbe2)
[15:50:44] <PJBoy> I'll be mad if they accept std::dependent_false instead of that
[15:51:44] <ville> LordKalma: why is that paper bad in particular?
[15:51:56] <johnny> i mean i'm not particularly excited about operator overloading
[15:52:10] <johnny> it's tradeoffs all the way down though.. so
[15:52:54] <PJBoy> no one would use smart pointers if we didn't have operator overloading
[15:53:03] <PJBoy> or vector
[15:53:09] <ville> the defer feature, whcih is something you really want in c, is right no propped up on some kind of lambdas
[15:53:16] <ville> err right now
[15:54:32] <johnny> PJBoy, maybe it's a quesiton of how far you can go really
[15:55:00] <johnny> but i know i'm about to go far off into sleepyland
[15:55:09] <PJBoy> operator, is where I draw the line
[15:55:15] <ville> PJBoy: of course people would use vector. people already do that in c
[15:55:28] <ville> should say vector-like
[15:55:44] <PJBoy> I've never seen a vector-like in C
[15:55:46] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:56:29] <ville> dynamic array? plenty of those around
[15:56:59] <PJBoy> I've seen `T* data = malloc(n/*sizeof(T));` and using data
[15:57:16] <PJBoy> but not a version that's wrapped up in any way
[15:57:25] <PJBoy> I wrote a slash?!
[15:57:31] <PJBoy> you know what I mean
[15:59:06] *** Joins: markong (~kvirc@213.146.188.203)
[15:59:54] <ville> even quake from 96: https://github.com/id-Software/Quake/blob/master/QW/client/common.h#L37
[16:00:39] <ville> ok that's not strictly what vector is, but close enough to fool you hopefully
[16:01:01] <PJBoy> looks vector-esque to me
[16:01:50] <PJBoy> this code makes my eyes bleed
[16:02:18] <PJBoy> but yeah it's good to see
[16:02:39] <ville> quake's pretty easy source to follow
[16:09:11] <PJBoy> conan recipes confirmed MIT btw
[16:09:44] *** Quits: bobb_ (~bobb_@dslb-092-074-250-012.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[16:09:57] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[16:16:49] <ville> another reason not to use it
[16:16:50] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[16:17:05] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[16:17:08] *** Joins: verwirrt (~verwirrt@user/verwirrt)
[16:26:30] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Quit: Quit)
[16:26:42] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[16:27:08] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[16:27:12] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Client Quit)
[16:32:02] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[16:33:15] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:41] <very_sneaky> ville: what's wrong with MIT?
[16:34:57] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:36:48] *** Joins: proller (~p@93.158.190.218)
[16:36:50] <Haohmaru> !mit
[16:36:52] <nolyc> MillÔøΩ Istihbarat TeskilÔøΩti (MIT) (National Intelligence Organization) is the governmental intelligence organization of Turkey.
[16:36:54] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[16:41:52] *** Quits: proller (~p@93.158.190.218) (Ping timeout: 268 seconds)
[16:42:44] <ville> very_sneaky: it's not GPL. as a user of a device you've no recourse to to gain any resemblence of control of your device
[16:44:47] *** RazielZ is now known as Raziel
[16:47:25] <very_sneaky> gotcha.
[16:49:10] *** Quits: verwirrt (~verwirrt@user/verwirrt) (Quit: Leaving)
[16:52:56] *** Joins: proller (~p@2a02:6b8:0:408:a460:ef3c:f4ee:357e)
[16:56:30] *** Joins: bobb_ (~bobb_@dslb-092-074-250-012.092.074.pools.vodafone-ip.de)
[17:00:49] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Ping timeout: 248 seconds)
[17:04:33] *** Quits: andreasbuhr (~quassel@p549dba7d.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[17:04:53] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[17:04:58] *** Joins: andreasbuhr (~quassel@p549db8db.dip0.t-ipconnect.de)
[17:05:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:07:26] *** Quits: jokoon (~eio@2a01:e0a:542:e160:70b6:eea:845c:cbe2) (Quit: Leaving)
[17:40:43] *** Joins: Kakurady (~nekoyasha@2607:fea8:fe20:7f6b:26e8:8216:c86f:505f)
[17:43:12] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:44:34] *** Quits: Kakurady (~nekoyasha@2607:fea8:fe20:7f6b:26e8:8216:c86f:505f) (Client Quit)
[17:45:59] *** Joins: Kakurady (~nekoyasha@2607:fea8:fe20:7f6b:d417:13d7:14aa:13e5)
[17:46:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:46:36] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[17:49:28] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 260 seconds)
[17:55:38] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[17:58:29] *** gentooclimax is now known as climax
[18:03:56] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 246 seconds)
[18:06:29] <LordKalma> << alignof(long double)
[18:06:29] <geordi> 16
[18:07:47] *** Quits: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it) (Ping timeout: 246 seconds)
[18:08:21] *** climax is now known as gentooclimax
[18:08:51] <Haohmaru> << alignof(short double)
[18:08:51] <geordi> error: 'short' specified with 'double'
[18:09:02] <Haohmaru> how unfair
[18:18:07] *** Joins: kaph (~kaph@dynamic-adsl-78-12-162-98.clienti.tiscali.it)
[18:19:26] <urdh> that's called `float`
[18:21:51] *** gentooclimax is now known as climax
[18:22:26] <PJBoy> << alignof(double float)
[18:22:26] <geordi> error: two or more data types in declaration of 'type name'
[18:23:14] <LordKalma> dunno they prefered long double instead of extended
[18:23:35] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[18:24:24] <CarloWood> How can I get godbolt.org to show my functions? It optimizes them out completely...
[18:24:35] <PJBoy> give it external linkage
[18:24:55] <LordKalma> what do you mean show functions?
[18:25:02] <LordKalma> usually it shows functions
[18:25:15] <LordKalma> sometimes it trims out main completely because you write futile code
[18:25:21] <LordKalma> usually I make it depend on argc on something
[18:25:36] <CarloWood> I have only member functions of a template class...
[18:25:45] <CarloWood> Not sure how to add external linkage for that.
[18:25:52] <LordKalma> templates don't emit code
[18:25:58] <PJBoy> explicitly instantiate the class
[18:26:03] <LordKalma> ^
[18:26:11] *** Quits: vin (~vin@user/crash) (Quit: WeeChat 2.8)
[18:26:18] *** Quits: Inline (~Inline@p4fedbc1e.dip0.t-ipconnect.de) (Quit: Leaving)
[18:26:35] <PJBoy> or ideally just don't use a template
[18:26:56] <urdh> short float when tho
[18:26:58] <PJBoy> which obviously depends on the circumstances
[18:26:58] <CarloWood> Ok it works when I instantiate the class as a global - not when I do that inside main()
[18:27:12] <PJBoy> oh yeah that works too
[18:27:37] <PJBoy> your variable will have external linkage, so that's good enough
[18:27:45] *** Joins: Inline (~Inline@p200300cd470f5c00eeead6c89d51972a.dip0.t-ipconnect.de)
[18:28:01] <CarloWood> I am shocked about the enormous size of this function! https://godbolt.org/z/3457s3GaM
[18:28:19] <LordKalma> again, if you instanciate n object in main and don't use it "unpredictably" the compiler sees it's useless and give you xor eax eax ret
[18:28:22] <CarloWood> Oh wait damn
[18:28:27] <CarloWood> it inlined it inside main :/
[18:29:04] <ville> urdh: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1467r8.html
[18:29:21] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 248 seconds)
[18:29:33] <PJBoy> https://godbolt.org/z/c7rY4ae81 for non inlined version
[18:29:57] *** climax is now known as gentooclimax
[18:30:44] <ville> urdh: "short float" was rejected in 2018 though, not sure if you wished to have that name exactly or 16-bit float
[18:31:13] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:34:35] <PJBoy> also std::bit_width ftw https://godbolt.org/z/67WYYMzMa
[18:37:01] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 245 seconds)
[18:38:07] *** Joins: CodePoint (~CodePoint@2607:fb90:c6c:212b:db7:c3d6:d4e7:5a73)
[18:44:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:45:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:45:07] *** ChanServ sets mode: +v npaperbot
[18:47:22] *** Quits: ville (~ville@user/ville) (Quit: ville)
[18:49:08] *** Joins: ville (~ville@user/ville)
[18:50:30] *** Quits: nq (~nq@82.79.141.40) (Quit: Leaving)
[18:51:05] *** Joins: jackblasted (~quassel@173.239.197.215)
[18:53:03] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:54:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:57:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:00:05] *** Joins: [o (~istupy@2620:0:1003:206:58d2:8955:abdf:dd07)
[19:03:48] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[19:15:17] *** Joins: paul424 (~tom@ip-5-172-234-180.multi.internet.cyfrowypolsat.pl)
[19:16:17] <Haohmaru> a 16bit float can be useful
[19:16:52] <Haohmaru> i've done a ghetto version of that long long ago for audio, it worked fairly well
[19:17:08] <Haohmaru> (by truncating the lower 16 bits, huhuhu)
[19:20:12] <Alipha> i'm assuming short float was rejected because there's not cpu support for it?
[19:20:28] <Haohmaru> sure
[19:20:51] <Haohmaru> i mean they (CPU folks) should've maybe made a 16bit float
[19:23:07] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[19:23:11] <urdh> IEEE has one so why not
[19:23:18] <PJBoy> CPUs that don't support it can make short float = float
[19:23:33] <PJBoy> like how long double = double on MSVC
[19:23:55] <Alipha> That's true
[19:23:58] <Haohmaru> tbh i expected the float to completely f*ck up when you zero its lower 16 bits, but it.. sorta.. worked
[19:24:09] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:24:35] <ville> Alipha: there is cpu support
[19:25:31] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[19:26:03] <urdh> Haohmaru: meh, you're just discarding the low bits of the fraction so it's not that bad
[19:26:35] <urdh> and inf has an all-zero fraction part anyway
[19:26:42] <Haohmaru> i didn't plan it, i did the lowest effort thing.. i knew i definatelly need the sign bit, so i kept the whole upper half
[19:27:14] <urdh> i guess you could run into issues with NaN though depending on what implementations actually do with the fraction bits of those
[19:28:16] <Haohmaru> i used this for buffers in a delay line, where the operations are input*a+b*buf[i]
[19:28:40] <Haohmaru> so only the input could come in with surprising values, but i didn't care much
[19:29:10] <ville> Alipha: with memory speeds being what they are, just having storage for 16-bit float is a win, even if the calculations are done using 32-bit float intermedaries
[19:29:18] <ville> intermediaries
[19:30:15] <Haohmaru> yeah, that's what i was doing storing as 16bit, doing the maths as "float"
[19:30:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:32:13] *** Joins: sigma_ (~sigma@5.119.20.233)
[19:35:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:37:06] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Quit: Quit)
[19:45:37] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 248 seconds)
[19:48:49] *** Quits: CodePoint (~CodePoint@2607:fb90:c6c:212b:db7:c3d6:d4e7:5a73) (Ping timeout: 248 seconds)
[19:49:05] *** Joins: sigma__ (~sigma@2a01:5ec0:5818:f4db:d3dd:7b9c:f9c9:77cd)
[19:49:26] *** Quits: sigma_ (~sigma@5.119.20.233) (Ping timeout: 272 seconds)
[19:49:57] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[19:53:31] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[19:55:33] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:56:20] *** Joins: dld (~davidlowr@2601:180:204:17de:38c1:e5a4:b065:9eb3)
[19:57:06] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:58:12] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:00:26] *** Joins: ivii (~ivan@user/ivii)
[20:03:30] *** Joins: magla (~gelignite@d5363ac5.access.ecotel.net)
[20:04:31] *** Quits: dld (~davidlowr@2601:180:204:17de:38c1:e5a4:b065:9eb3) (Ping timeout: 245 seconds)
[20:04:34] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:06:39] *** Joins: dld (~davidlowr@2601:197:600:1210:38c1:e5a4:b065:9eb3)
[20:06:40] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:07:47] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[20:08:13] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[20:08:39] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[20:12:46] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[20:13:22] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:14:30] *** Joins: ivii (~ivan@user/ivii)
[20:19:49] *** Quits: magla (~gelignite@d5363ac5.access.ecotel.net) (Quit: Stay safe!)
[20:23:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:23:28] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[20:24:34] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:25:36] *** Joins: ivii (~ivan@user/ivii)
[20:26:43] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[20:33:28] <OnlineCop> When two vectors don't match in size, which exception is most appropriate to throw? `length_error` sounds good but the definition says it's more for exceeding its max size. `runtime_error` and `invalid_argument` seem a little too generic, but if that's typically what's used, I'm fine using it too.
[20:38:47] *** Quits: sigma__ (~sigma@2a01:5ec0:5818:f4db:d3dd:7b9c:f9c9:77cd) (Ping timeout: 260 seconds)
[20:40:00] *** Quits: bobb_ (~bobb_@dslb-092-074-250-012.092.074.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[20:41:59] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:308b:ddf6:8a2a:9b9f)
[20:41:59] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:308b:ddf6:8a2a:9b9f) (Changing host)
[20:41:59] *** Joins: skapata (~Skapata@user/skapata)
[20:42:21] *** Joins: ivii (~ivan@user/ivii)
[20:46:18] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:48:15] <ashafq> !rq
[20:48:15] <nolyc> ashafq: <Alipha> cnomake, hearnomake, speaknomake
[20:48:20] <ashafq> !rq
[20:48:21] <nolyc> ashafq: <Haohmaru> we're f*cked, didn't you know?
[20:48:32] <ashafq> What doe `rq` do again?
[20:48:43] <PJBoy> random quote
[20:48:43] <Haohmaru> random quote
[20:48:54] *** Joins: sigma__ (~sigma@5.120.244.114)
[20:48:57] *** Quits: sigma__ (~sigma@5.120.244.114) (Client Quit)
[20:49:04] <ashafq> How do I get "last message to me"?
[20:49:18] <Haohmaru> this is not what nolyc is about
[20:49:34] <Haohmaru> but there's logs
[20:49:36] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[20:49:54] <ashafq> üòû I forgot how to sort logs
[20:49:58] <PJBoy> OnlineCop, invalid_argument IMO
[20:50:54] <ashafq> OK, I figured it out üòä
[20:50:57] <LordKalma> just put an assert in there to avoid release build runtime performance penalties
[20:55:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[20:55:32] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[21:02:20] *** Joins: Minvera (~Minvera@user/Minvera)
[21:02:29] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:02:43] <Minvera> How can I filter out *Main* from $(OBJS)?
[21:04:37] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:04:56] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[21:06:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Client Quit)
[21:06:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[21:07:33] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf)
[21:07:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3c56:9606:87ba:fbbf) (Client Quit)
[21:14:44] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:18:08] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:21:56] *** Joins: xkuru (~xkuru@user/xkuru)
[21:36:25] <Minvera> nevermind, figured it out
[21:39:47] <rpav> fmtlib not erroring with too many parameters is a probem
[21:40:36] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Remote host closed the connection)
[21:41:09] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[21:45:43] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d) (Ping timeout: 260 seconds)
[21:57:08] <PJBoy> huh
[21:57:18] <PJBoy> none of std::deque's ctors are noexcept
[21:57:23] <PJBoy> including its move ctor
[21:58:00] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:acc1:c812:5653:51cd:362d)
[21:58:32] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[21:59:22] <rpav> :o
[21:59:27] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[22:00:28] *** Quits: Kakurady (~nekoyasha@2607:fea8:fe20:7f6b:d417:13d7:14aa:13e5) (Quit: Konversation terminated!)
[22:01:03] <PJBoy> same with std::list
[22:01:07] <ville> PJBoy: now's your chance. time to write a paper
[22:01:37] <PJBoy> man
[22:01:46] <PJBoy> that really would be the perfect entry level paper
[22:01:56] <rpav> must be oversight, how could that possibly not be noexcept
[22:02:47] <OnlineCop> Deque allocates fixed-width arrays within them. That could fail.
[22:03:10] <rpav> sure deque i mean list
[22:03:45] <fiesh> is a implementation bound to adhere to the ctor being not noexcept?  it would seem that at least it should have the liberty to mark it noexcept to be better than required
[22:03:49] <OnlineCop> Both single and double-linked?
[22:04:50] <PJBoy> implementations can add noexcept
[22:04:54] <PJBoy> (but not constexpr)
[22:05:25] <fiesh> then the benefit of having it in the standard seems very limited
[22:05:58] <PJBoy> as opposed to infinite benefit :p
[22:06:08] <fiesh> who knows, might even be disadvantageous in certain situations, even though I can't think of an example
[22:06:22] <rpav> but lacking noexcept in the standard means you can't depend on it
[22:06:23] <PJBoy> the move ctor in particular is the one I'd expect to be noexcept
[22:06:33] <fiesh> yeah that one's surprising
[22:08:08] <ville> "allows debug implementations... blah blah"
[22:15:33] *** Joins: meator (~meator@user/meator)
[22:17:03] <PJBoy> I see MS STL is allocating a node in std::list's default ctor
[22:17:16] <PJBoy> and hence doing it in std::list's move ctor
[22:19:08] <Alipha> which makes it not noexcept, so it's in violation of the standard?
[22:19:29] <Alipha> oh, i should have read more of the backlog
[22:19:31] <ville> Alipha: no. they are allowed to do it
[22:25:39] *** Joins: seninha (~seninha@user/seninha)
[22:32:14] <Alipha> OnlineCop: derive your own exception from invalid_argument
[22:36:25] *** Quits: proller (~p@2a02:6b8:0:408:a460:ef3c:f4ee:357e) (Remote host closed the connection)
[22:38:47] <PJBoy> this windows program is somehow ignoring my `> nul 2>&1`
[22:38:51] <PJBoy> how the hell do you do that
[22:42:49] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:45:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:45:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:45:08] *** ChanServ sets mode: +v npaperbot
[22:50:26] *** Joins: pulse (~pulse@user/pulse)
[22:54:02] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[23:04:32] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:07:35] <antto> PJBoy, i guess.. you toss the M$ OS and put linux on that thing
[23:07:53] <PJBoy> v_V
[23:10:07] <pulse> linux would be way better if it was windows
[23:10:52] <rpav> kids, so terrible at trolling
[23:17:35] *** gentooclimax is now known as climax
