[00:03:55] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[00:27:31] *** Quits: guido (~guido@host-95-234-249-204.retail.telecomitalia.it) (Read error: Connection reset by peer)
[00:29:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:46:44] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[00:51:18] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[00:54:36] *** Joins: Blondie101010 (~Blondie10@user/blondie101010)
[00:54:38] *** Quits: luva (~luva@159.48.53.250) (Ping timeout: 260 seconds)
[01:01:59] *** Joins: guido (~guido@host-95-234-249-204.retail.telecomitalia.it)
[01:05:43] *** Quits: genom (~g@37.214.51.176) (Remote host closed the connection)
[01:09:42] *** Joins: luva (~luva@159.48.53.254)
[01:13:47] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[01:26:50] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:34:35] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[01:38:54] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[01:48:04] *** Quits: guido (~guido@host-95-234-249-204.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[02:13:30] *** Quits: luva (~luva@159.48.53.254) (Ping timeout: 260 seconds)
[02:21:16] *** Joins: luva (~luva@159.48.53.254)
[02:21:49] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[02:26:40] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 268 seconds)
[02:40:21] *** Quits: magla (~gelignite@55d47dc5.access.ecotel.net) (Quit: Stay safe!)
[02:44:07] *** Joins: velix (~velix@user/velix)
[02:45:01] <velix> Can anyone recommend an AUTH library, which isn't connected to one of those huge frameworks? I think of using this, though it's not getting new features, but I think it's more-or-less feature complete and is widely in use: https://github.com/delight-im/PHP-Auth
[03:20:43] *** Joins: guzzlefry (~gus@user/guzzlefry)
[03:21:01] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:22:27] <guzzlefry> So I've got a Windows laptop. My usual development setup is Linux with docker-compose for managing all of the different project setups. I'm wondering if I should try Docker Desktop on Windows or just run a Linux VM on the Windows host. Anyone have experience with this?
[03:23:30] *** Quits: luva (~luva@159.48.53.254) (Ping timeout: 260 seconds)
[03:25:12] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[03:29:58] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[03:41:23] *** Joins: luva (~luva@159.48.53.254)
[03:42:20] <nekaii1> guzzlefry: docker + wsl has been a good experience for me
[03:42:56] <nekaii1> essentially it's the linux enviroment I'm used to, working on a windows machine
[03:43:26] *** nekaii1 is now known as nekaii
[03:45:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 264 seconds)
[03:48:08] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:56:56] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[03:57:12] <guzzlefry> nekaii: Don't suppose you're using PhpStorm with it?
[03:57:49] <nekaii> no, just vscode or vim
[03:59:24] *** Joins: Hiccup (cHoy@user/hiccup)
[04:01:42] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[04:01:56] <guzzlefry> ah I see. I'm hoping PhpStorm plays well with it.
[04:11:00] *** Quits: ms49434 (~ms49434@user/ms49434) (Quit: Leaving)
[04:25:25] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Remote host closed the connection)
[05:01:52] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:03:20] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[05:05:06] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[05:20:45] *** Joins: onichomp (~onichomp@2806:264:4404:8200:cc8b:bb77:5d86:ac91)
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:51] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[05:36:26] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[05:45:06] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:48:07] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Remote host closed the connection)
[05:48:32] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[06:10:25] *** Joins: vlm (~vlm@user/vlm)
[06:12:08] *** Parts: velix (~velix@user/velix) (Leaving)
[06:17:47] *** Quits: Hash (~stoned@is.coding.when.stoned.io) (Ping timeout: 264 seconds)
[06:18:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:20:59] *** Joins: The_Jag_ (~The_Jag@host-87-16-87-93.retail.telecomitalia.it)
[06:21:42] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[06:23:33] *** Quits: faktor (~factor@72.192.71.12) (Quit: Leaving)
[06:23:34] *** Quits: The_Jag (~The_Jag@host-82-56-115-92.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[06:29:17] *** Joins: Rockwood (~Rocky@user/rocky)
[06:34:23] *** Quits: onichomp (~onichomp@2806:264:4404:8200:cc8b:bb77:5d86:ac91) (Read error: Connection reset by peer)
[06:35:02] *** Joins: onichomp (~onichomp@2806:264:4404:8200:cc8b:bb77:5d86:ac91)
[06:35:27] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[06:40:22] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[07:23:20] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[07:24:43] *** Joins: Hash (~stoned@is.coding.when.stoned.io)
[07:27:36] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 245 seconds)
[07:33:57] *** Quits: darkstarx (~darkstard@2601:1c2:300:c8a0::6c32) (Quit: Leaving)
[07:33:59] *** Quits: luva (~luva@159.48.53.254) (Ping timeout: 264 seconds)
[07:41:56] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:43:49] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Remote host closed the connection)
[07:44:14] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[07:45:06] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 245 seconds)
[07:50:40] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[07:51:47] *** Joins: luva (~luva@159.48.53.251)
[07:54:47] *** Joins: kuku (~kuku@user/kuku)
[07:59:42] *** Joins: kuku01 (~kuku@user/kuku)
[08:01:46] *** Quits: kuku (~kuku@user/kuku) (Ping timeout: 245 seconds)
[08:10:02] *** Quits: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net) (Quit: dlundgren)
[08:10:31] *** Joins: kuku (~kuku@user/kuku)
[08:10:54] *** Quits: kuku01 (~kuku@user/kuku) (Ping timeout: 260 seconds)
[08:26:53] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[08:31:21] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 245 seconds)
[08:45:52] *** Quits: deksar (~deksar@user/deksar) (Quit: Going offline, see ya!)
[08:53:01] *** Quits: luva (~luva@159.48.53.251) (Ping timeout: 245 seconds)
[08:54:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:57:12] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:11:51] *** Joins: luva (~luva@159.48.53.252)
[09:13:56] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[09:18:34] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 260 seconds)
[09:24:12] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (*.net *.split)
[09:24:12] *** Quits: mishehu (~mishehu@mira001.eyepeeveesicks.shavedgoats.net) (*.net *.split)
[09:24:12] *** Quits: AnrDaemon (~ZNC@darkdragon-nln.starlink.ru) (*.net *.split)
[09:24:12] *** Quits: Robdgreat (~rob@user/robdgreat) (*.net *.split)
[09:24:12] *** Quits: mooz (~none@23.254.112.158) (*.net *.split)
[09:24:12] *** Quits: robertparkerx (~robertpar@user/robertparkerx) (*.net *.split)
[09:24:12] *** Quits: Beryllium (sid186414@lymington.irccloud.com) (*.net *.split)
[09:24:12] *** Quits: DrowningElysium (sid190788@user/drowningelysium) (*.net *.split)
[09:24:12] *** Quits: petris (sid19918@user/petris) (*.net *.split)
[09:24:12] *** Quits: monaco (~monaco@user/monaco) (*.net *.split)
[09:24:12] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[09:24:12] *** Quits: elycin (~elycin@ec2-54-163-129-255.compute-1.amazonaws.com) (*.net *.split)
[09:24:12] *** Quits: AMG (ghebo@user/amg) (*.net *.split)
[09:24:12] *** Quits: osxtra (~root@136.49.108.80) (*.net *.split)
[09:24:12] *** Quits: fakuve (~fakuve@192.210.243.250) (*.net *.split)
[09:24:12] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[09:24:12] *** Quits: Fleck (~fleck@user/fleck) (*.net *.split)
[09:24:12] *** Quits: jadew (~rcc@user/rcc) (*.net *.split)
[09:24:12] *** Quits: mjsir911 (~bnc@user/mjsir911) (*.net *.split)
[09:24:34] *** Joins: DrowningElysium (sid190788@user/drowningelysium)
[09:24:35] *** Joins: Robdgreat (~rob@user/robdgreat)
[09:24:57] <WishBoy> LOOOOL netsplited
[09:25:00] *** Joins: AnrDaemon (~ZNC@darkdragon-nln.starlink.ru)
[09:25:16] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[09:25:19] *** Joins: Fleck (~fleck@user/fleck)
[09:25:35] *** Joins: elycin (~elycin@ec2-54-163-129-255.compute-1.amazonaws.com)
[09:25:42] *** Joins: wyre (~wyre@user/wyre)
[09:25:44] *** Joins: tccki (~tccki@box.webslate.co.nz)
[09:26:16] *** Joins: mjsir911 (~bnc@user/mjsir911)
[09:29:24] *** Joins: mishehu (~mishehu@mira001.eyepeeveesicks.shavedgoats.net)
[09:29:33] *** Joins: mooz (~none@23.254.112.158)
[09:32:10] *** Quits: pmercado (~pmercado@190.22.183.232) (Ping timeout: 260 seconds)
[09:32:50] *** Quits: MelMalik (ellenor@vice-chairwoman.of.freenode.management) (*.net *.split)
[09:32:50] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[09:32:50] *** Quits: uhu (~uhu@2a01:4f9:c010:1087::2) (*.net *.split)
[09:32:50] *** Quits: sybariten (~jake@157.90.217.120) (*.net *.split)
[09:32:50] *** Quits: TinoDidriksen (~TinoDidri@tinodidriksen.com) (*.net *.split)
[09:32:50] *** Quits: Kristine (~quassel@user/kristine) (*.net *.split)
[09:32:50] *** Quits: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667) (*.net *.split)
[09:32:50] *** Quits: Woet (~me@irc.woet.me) (*.net *.split)
[09:32:50] *** Quits: couture (~couture@user/couture) (*.net *.split)
[09:32:58] *** Joins: TimWolla (~timwolla@2a01:4f8:150:6153:beef::6667)
[09:32:59] *** Joins: couture (~couture@user/couture)
[09:33:01] *** Joins: Kristine (~quassel@user/kristine)
[09:33:30] *** Joins: Woet (~me@irc.woet.me)
[09:33:43] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[09:37:55] *** Joins: guido (~guido@host-79-19-250-200.retail.telecomitalia.it)
[09:41:02] *** Quits: onichomp (~onichomp@2806:264:4404:8200:cc8b:bb77:5d86:ac91) (Quit: onichomp)
[09:42:21] *** Joins: MelanieMalik (ellenor@vice-chairwoman.of.freenode.management)
[09:42:30] *** Joins: TinoDidriksen (~TinoDidri@tinodidriksen.com)
[09:45:43] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[09:47:59] *** MelanieMalik is now known as MelMalik
[09:48:26] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[09:50:35] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 268 seconds)
[09:50:41] *** Joins: jetchisel (jetchisel@user/jetchisel)
[10:06:46] *** Quits: dbal (~dbal@2603:300c:b04:b100:7cd3:7d4a:87e2:d4e8) (Ping timeout: 245 seconds)
[10:12:42] *** Quits: luva (~luva@159.48.53.252) (Ping timeout: 260 seconds)
[10:18:56] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[10:27:54] *** Joins: luva (~luva@159.48.53.252)
[10:31:32] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[10:34:35] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[10:38:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[10:42:14] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[10:48:37] *** Joins: deksar (~deksar@user/deksar)
[10:54:21] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:55:10] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:55:37] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:20:06] *** Joins: magla (~gelignite@55d4d950.access.ecotel.net)
[11:22:14] *** Quits: luva (~luva@159.48.53.252) (Ping timeout: 260 seconds)
[11:29:42] *** Quits: entropy_ (~ent@user/entropy/x-9891564) (Remote host closed the connection)
[11:30:31] *** Joins: entropy_ (~ent@user/entropy/x-9891564)
[11:34:10] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 268 seconds)
[11:34:23] *** Joins: amcsi_ (~amcsi@2E8BA2D1.catv.pool.telekom.hu)
[11:38:26] *** Joins: luva (~luva@159.48.53.252)
[11:51:42] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 260 seconds)
[12:31:49] *** Joins: ms49434 (~ms49434@user/ms49434)
[12:36:27] *** Quits: luva (~luva@159.48.53.252) (Ping timeout: 268 seconds)
[12:49:13] *** Joins: Ionut (ionut@user/ionut)
[12:53:02] *** Quits: Albright (~Albright@2001:19f0:8001:ca4:c9c9:9450:c028:8dd0) (Quit: ZNC 1.8.2 - https://znc.in)
[12:53:15] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:1b5c:1bd6:918c:5122)
[12:53:37] *** Joins: luva (~luva@159.48.53.253)
[13:07:48] *** stenno is now known as stenno\OK
[13:11:24] *** Joins: vit (~vit@chello085216193138.chello.sk)
[13:30:58] *** Joins: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net)
[13:33:04] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:41:54] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[13:46:10] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510)
[13:52:22] *** Joins: Alex8532 (~Alex8532@user/alex8532)
[13:54:47] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec4e:a200:f885:1855:6fd4:8510) (Ping timeout: 268 seconds)
[13:55:23] *** Quits: luva (~luva@159.48.53.253) (Ping timeout: 268 seconds)
[13:56:36] *** Joins: AMG (ghebo@user/amg)
[14:13:46] *** Joins: luva (~luva@5.180.62.157)
[14:14:25] *** Quits: robert_ (~hellspawn@47.203.169.95) (Remote host closed the connection)
[14:18:05] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[14:19:01] <deksar> Hello there. Getting; "WARNING: [pool www] seems busy (you may need to increase pm.start_servers, or pm.min/max_spare_servers), spawning 32 children, there are 221 idle, and 331 total children" and finally; "WARNING: [pool www] server reached pm.max_children setting (350), consider raising it" - any idea to have a solution to this? pm.max_children = 350 - pm.start_servers = 275 - pm.min_spare_servers = 250 - pm.max_spare_servers = 300 , Server: 64 GB RAM.
[14:23:32] <biberu> deksar: did you check what kind of load it's under? any requests with long response times?
[14:30:44] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[14:32:10] *** Quits: Stanley (~stanley@d66-183-88-69.bchsia.telus.net) (Quit: ZNC - https://znc.in)
[14:54:59] *** Joins: Stanley (~stanley@d66-183-88-69.bchsia.telus.net)
[15:04:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:05:07] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:a435:c42a:d4dd:6465)
[15:05:18] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 260 seconds)
[15:07:15] <freeman_h> hi guys, I am using doctrine which uses pdo you can choose to use pdo or doctrine. In this question I am using pdo I just mentioned the doctrine part so no one asked xyz. Anyways I have this https://3v4l.org/XV3cE to generate multiple insert statements in the transactions however am getting this sql error SQLSTATE[HY000]: General error: 2014 Cannot execute queries while there are pending result sets. Consider unsetting the
[15:07:15] <freeman_h> previous PDOStatement or calling PDOStatement::closeCursor()
[15:14:38] *** Quits: luva (~luva@5.180.62.157) (Ping timeout: 260 seconds)
[15:19:58] *** Quits: Hiccup (cHoy@user/hiccup) (Remote host closed the connection)
[15:29:34] *** Joins: stenno\OK (~stenno@user/stenno)
[15:31:31] *** Quits: guido (~guido@host-79-19-250-200.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[15:31:49] *** Joins: guido (~guido@host-79-19-250-200.retail.telecomitalia.it)
[15:33:08] *** Joins: luva (~luva@5.180.62.157)
[15:37:30] <TinoDidriksen> freeman_h, you need to execute them immediately. Don't append.
[15:38:46] <freeman_h> TinoDidriksen, execute each insert statements?
[15:38:56] <freeman_h> one by one?
[15:39:00] <TinoDidriksen> Yes
[15:39:18] <freeman_h> oh wow
[15:39:39] <freeman_h> sometimes I need to insert around 3-3000 records
[15:40:00] <TinoDidriksen> So? Use a transaction.
[15:40:46] <freeman_h> I have
[15:40:48] <TinoDidriksen> You also only need to prepare a given insert once, then execute it as needed. So the prepares can be cached.
[15:41:47] <freeman_h> TinoDidriksen, 1 sec. the issue with that is that in my insert
[15:42:02] <freeman_h> the number of colums are not always the same
[15:42:07] <freeman_h> https://3v4l.org/XV3cE
[15:43:18] <TinoDidriksen> I know
[15:43:18] <freeman_h> so if the prepare is cache it will failed once the value is more than the number of columns
[15:43:27] <freeman_h> right?
[15:43:38] <TinoDidriksen> You can still cache each unique kind of insert.
[15:44:29] <TinoDidriksen> Basically, if (empty($cache[$sql])) { $cache[$sql] = prepare($sql); } $cache[$sql]->execute($vars);
[15:46:35] <freeman_h> abit confused TinoDidriksen with the above
[15:50:44] <TinoDidriksen> freeman_h, https://3v4l.org/hMul5
[15:51:08] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Remote host closed the connection)
[15:51:33] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[15:51:37] <TinoDidriksen> Oh right, and that str_repeat trick...just a sec.
[15:52:31] <TinoDidriksen> freeman_h, https://3v4l.org/1gQnj
[15:57:03] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[15:59:14] <freeman_h> TinoDidriksen, than you. thats genius :)
[16:01:35] <__adrian> freeman_h: i made an example to clarify my suggestions the other day but you'd already logged off: https://3v4l.org/V5PYV
[16:02:05] <__adrian> one statement, no variable-length parameter list
[16:03:13] <TinoDidriksen> That requires the code knowing the defaults. I don't like that.
[16:03:53] <stenno\OK> can't you give default values when you do destructuring assignment
[16:03:55] * stenno\OK TIAS
[16:03:57] <__adrian> the code _should_ know appropriate defaults
[16:04:12] <__adrian> the code's responsible for validation
[16:04:31] <TinoDidriksen> No, the DB is.
[16:04:36] <stenno\OK> Fatal error: Assignments can only happen to writable values in /in/ETAfb on line 3
[16:04:38] <freeman_h> __adrian, thank you and TinoDidriksen I think the should be way to get the default values from the entity class properties which reflects the columns
[16:05:06] <__adrian> freeman_h: yep, you definitely ought to.
[16:06:23] <freeman_h> __adrian, however one think i spot is that the columns always have to be in the same order in the array if I changed the array key value structure around this will break?
[16:06:24] <__adrian> tino: the db can only validate types, lengths, relations, etc.. it cannot know semantics in the way that your code does.
[16:06:43] <__adrian> freeman_h: no. that's why i used named params instead of ?
[16:06:55] <__adrian> though you could also sort the inputs.
[16:07:09] <freeman_h> __adrian, cheers
[16:07:26] <TinoDidriksen> True, but the exact type and default value is far below such semantics. That kind of validation should come much earlier - not at insertion time.
[16:07:55] <__adrian> actually... the way i eneded up using the DEFAULTS column, they're always in the right order anyway
[16:08:13] <__adrian> "That kind of validation should come much earlier"  agreed; just here for the example
[16:09:16] <__adrian> tino: also, if you _really_ don't want to deal with defaults, then default everything to null  ;)
[16:10:40] <TinoDidriksen> My code never knows about the DB defaults, but I do have defaults and rely on them when omitting a column.
[16:13:55] <__adrian> ok, there's the difference - i'm not talking about "sensible DB defaults." i'm talking about the data in your code.
[16:15:42] <__adrian> the data should be good _in your app code_ before you try to store it.
[16:16:28] <TinoDidriksen> The needed data, sure. If not all columns are needed, the omitted ones are omitted - they don't exist until a code path needs them, usually from a DB read.
[16:24:10] *** Quits: luva (~luva@5.180.62.157) (Ping timeout: 260 seconds)
[16:25:06] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 260 seconds)
[16:25:09] <freeman_h> TinoDidriksen, you have a good point also, if something is not given no need to assume and if an assumption is to be made, the code is likely wrong
[16:25:53] <TinoDidriksen> Sometimes you need a default up front.
[16:28:15] <TinoDidriksen> But objects can often live without all their data, because they're in a code path that will never read that data. Such as user creation - "last login time" and "times seen" is not going to be read until they actually log in.
[16:28:59] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[16:29:20] <TinoDidriksen> So at creation time, the DB defaults are fine. Code has no business filling in those values before insertion.
[16:29:21] *** Joins: luva (~luva@5.180.62.157)
[16:29:42] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:30:23] *** Joins: harpia (~harpia@2804:2aec:204:f500:4906:c4ad:bdbe:1b9d)
[16:33:35] *** Joins: stenno\OK (~stenno@user/stenno)
[16:43:38] *** Quits: fjmorazan_ (~quassel@user/fjmorazan) (Quit: fjmorazan_)
[16:44:13] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:47:02] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 260 seconds)
[17:04:16] <freeman_h>  public function __construct(ManagerRegistry $managerRegistry, $db = '', Settings $settings) production.ERROR: Required parameter $settings follows optional parameter $db just changed to php 8
[17:06:02] <freeman_h> if the a setting in php ini to ignore this type of error has its not really an error
[17:11:30] <biberu> it is an error though
[17:13:06] *** Joins: stenno\OK (~stenno@user/stenno)
[17:13:57] <biberu> freeman_h: it's saying that the $db parameter can be omitted, but then it's followed by other mandatory parameters, how is that going to be possible?
[17:15:42] <freeman_h> biberu, in php 8 its an error
[17:15:49] <freeman_h> works in other versions
[17:15:53] <biberu> it's a logical error
[17:16:02] <freeman_h> the funny thing is that $db=null works
[17:16:11] <freeman_h> just doesnt like an empty string
[17:16:54] <biberu> that should still yield a warning, and it leaves you with the same conundrum
[17:17:17] <freeman_h> doesnt
[17:17:38] <biberu> so how are you omitting it?
[17:17:40] <freeman_h> function foo(string $param_optional = null, $param_required) { not error
[17:17:47] <freeman_h> function foo(string $param_optional = '', $param_required) { error
[17:17:49] <biberu> turn on all warnings
[17:19:33] <biberu> i don't care if php literally suddenly says error or not, that code is broken, the only way for you to omit the parameter when it's followed by required parameters would be to always use named arguments, but since that's are a php 8 feature you can't have been using it
[17:20:36] <freeman_h> biberu, works still no warning hahaha
[17:20:52] <freeman_h> biberu, i get what you mean however we need it to be like this
[17:21:01] <biberu> you need it to be broken and nonsensical?
[17:21:18] <biberu> and you do get warnings for null too: https://3v4l.org/ZOtTT
[17:21:24] <freeman_h> because we have multiple database so we need $db to be null has doctrine will default to the default db
[17:21:30] <biberu> you just seem to be ignoring anything that doesn't slap you in the face
[17:21:48] <freeman_h> however sometimes we pass in $db to access the old db records
[17:22:26] <biberu> and how are you calling it in those cases?
[17:22:54] <freeman_h> until php comes out with what python has where by you can call a parmas and pass in the value this will works
[17:23:08] <freeman_h> not sure what the technical term is for it
[17:23:43] <biberu> you probably mean named arguments, php does have that
[17:24:36] <TinoDidriksen> Or pass in an array with named keys.
[17:25:04] <biberu> or a configuration object, for better checking and discovery of what's allowed
[17:25:15] <stenno\OK> imagine if the object destructuring assignment of php had default values
[17:25:26] <freeman_h> TinoDidriksen, this is a constructor so am letting the framework inject it
[17:25:39] <freeman_h> biberu, yes named argument :)
[17:25:55] <biberu> freeman_h: so you're never actually omitting the parameter? when why does it have a default?
[17:26:35] <TinoDidriksen> freeman_h, https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
[17:28:04] <freeman_h> so we have 4 databases, ones in a while something might need to access the the old database from like 23+ years when this thing does it will it will create a new instance of the class and the pass in the database name
[17:28:41] <biberu> ... so you're always passing in the database name
[17:28:42] <freeman_h> if a db name is not given it will result to default db which is the the most new one
[17:28:54] <biberu> how are you calling it without giving the name?
[17:28:54] <freeman_h> biberu, its handle by doctrine
[17:29:16] <biberu> sure, and it provides what value for that parameter?
[17:30:11] <freeman_h> in doctrine config you can list all your db the is a "default" when you call your repository class you can overwrite the default and give it something else if you do not overwrite it, it will use the default
[17:30:15] <freeman_h> if that make sense
[17:30:47] <biberu> freeman_h: https://3v4l.org/ZOtTT <- call that function while omitting $a
[17:31:18] <freeman_h> biberu, https://3v4l.org/cufMi
[17:32:33] <biberu> it's interesting that that doesn't error out immediately
[17:32:44] <biberu> but again, call it while omitting $a
[17:33:42] *** Quits: luva (~luva@5.180.62.157) (Ping timeout: 268 seconds)
[17:36:34] <biberu> freeman_h: any luck? :)
[17:38:13] <freeman_h> biberu, no error or warning
[17:38:34] <biberu> freeman_h: did you call it while omitting $a?
[17:40:21] <freeman_h> biberu, it will error but bare in mind i am doing this in a constructor and the framework I am using automatically injects the constructor arguments
[17:40:38] <freeman_h> when it does this, it does not error or show any warning
[17:41:11] <biberu> that's my point, you're always providing a value but yet you declared it to be optional and at the same time followed by more mandatory parameters
[17:41:20] *** Joins: luva (~luva@5.180.62.157)
[17:41:22] <biberu> it doesn't make sense
[17:42:02] *** Joins: zibby15 (~androirc@user/zibby15)
[17:44:28] <freeman_h> biberu, I get what you mean but has this is only happening in 1 repository class out of 789 we have, I am not going to lose sleep over it to be honest :)
[17:45:01] <biberu> just saying that it was a logical error even before 8 started checking for it
[17:45:01] <freeman_h> if i change it in 1 place. I have to go and change all the logic with chooses which db to use based on what is needed
[17:45:47] <biberu> why would you have to do that?
[17:48:26] <freeman_h> biberu, because of how it was written by whoever when it changed from 2 db to 3 and now we are on 4. Looks like it will be reviewed in 9 weeks times
[17:49:14] <biberu> i don't see how that is related at all
[17:49:21] *** Joins: hans_ (~hans@81.166.125.50.static.multigamer.no)
[17:50:30] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 260 seconds)
[17:50:32] <hans_> not sure how i managed to make a mess of this, https://3v4l.org/QugQn
[17:52:06] <biberu> hans_: var_export?
[17:53:17] <freeman_h> biberu, it hard to explain to be honest
[17:53:47] *** Quits: alien_lappy (~alien@user/alien) (Ping timeout: 264 seconds)
[18:01:53] <freeman_h> Hi just wondering if the is a php method which can get a method which called a method. e.g. https://3v4l.org/u7LoJ in the errorLog method is php method which can get the method which calls that method. for example if the bar method called the errorlog method without me passing in the method name, can i get the bar in errorLog
[18:02:15] <Koopz> that's a lot of "method"
[18:02:56] <__adrian> freeman_h: tl;dr: no. you can examine the stack trace, but in general, your function is broken if it has to know "who called me?"
[18:03:06] <__adrian> anything your function needs to know should be provided as an argument
[18:05:06] <hans_> reminds me of a disable_functions bypass with stacktrace :p
[18:05:42] <__adrian> freeman_h: a static analysis tool might be more helpful, if you're trying to find code paths
[18:06:10] <__adrian> mark the method @deprecated (or whatever annotation your tool uses) and it should warn you about methods trying to call it
[18:06:42] <Koopz> https://3v4l.org/YbK5v roast me for trying to write a sorting function with variable sort criteria
[18:07:05] <hans_> Koopz, where are you?
[18:07:28] <freeman_h> __adrian, :) thanks
[18:07:32] <Koopz> germany
[18:07:44] <Koopz> roast me like one of your german wursts
[18:08:04] <hans_> doh. (if it was UK i would complain about using usort instead of uksort)
[18:08:48] <hans_> what does array(???) <=> array(???)  do?
[18:09:18] <stenno\OK> spaceship operator
[18:09:19] <Koopz> spaceship operator returns 1, 0 or -1 depending on which side is "bigger"
[18:09:29] <__adrian> https://php.net/language.operators.comparison
[18:09:33] <hans_> yeah, but how does spaceship operator decide which array is bigger? array length?
[18:09:43] <__adrian> normal comparison rules
[18:10:08] <stenno\OK> see https://www.php.net/manual/en/language.operators.comparison.php#121907
[18:10:45] <Koopz> the problem with this whole thing is that i apply this on 16k rows loaded in the RAM but since it compiles those arrays based on sortCriteria on every single operation performance is ridiculously bad
[18:10:50] <__adrian> look at "Comparison with Various Types" table
[18:11:14] <__adrian> generally, avoid looking at user comments
[18:11:19] <hans_> Koopz, your use of spaceship operator on arrays is intentional, right?
[18:11:34] <Koopz> i could be faster if i *shudder* generate a sort function as string and then eval() it
[18:11:50] <Koopz> i stole the idea from some blog :P
[18:12:13] <__adrian> Koopz: "rows" as in, "database rows"?
[18:12:23] <Koopz> well i don't have an actual database
[18:12:39] <Koopz> it's json files that get loaded into a ReactPHP application
[18:14:25] <__adrian> you might look at using something like SplHeap instead of sorting the array
[18:16:55] <__adrian> generators also come to mind. not sure which would turn out better
[18:17:14] <__adrian> OR you could use a db instead of a json file  ;)
[18:17:37] <Koopz> are SplHeaps any faster than arrays?
[18:18:47] *** Parts: zibby15 (~androirc@user/zibby15) (AndroIRC)
[18:26:02] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 260 seconds)
[18:26:29] *** Joins: brachamh (~brachamh@user/brachamh)
[18:28:12] <__adrian> potentially faster at sorting. you'd have to check. the benefit would be going one line at a time rather than trying to sort the entire thing at once.
[18:32:49] *** Quits: harpia (~harpia@2804:2aec:204:f500:4906:c4ad:bdbe:1b9d) (Quit: harpia)
[18:34:06] *** Joins: genom (~g@37.214.51.176)
[18:35:35] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:41:03] <hans_> back in PHP5.x i saw a sorting routine being optimized by putting all the data in a SQLite db and having SQLite sort it instead of PHP, was something significantly faster than doing it in php.. guess the PHP sort had issues, but still
[18:43:03] <hans_> you'd think the overhead of creating a sqlite db, and inserting everything, and taking everything out again would be slower, buuut
[18:44:38] <__adrian> ...and if you write to sqlite instead of to a json file in the first place...  :)
[18:53:05] <TML> Well, PHP's sort and SQLite are optimized for completely different use-cases. So it's OK if one performs better than the other in a specific arena.
[18:58:14] *** Quits: genom (~g@37.214.51.176) (Ping timeout: 260 seconds)
[19:01:26] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[19:11:12] *** Quits: guido (~guido@host-79-19-250-200.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[19:19:11] <Koopz> *sigh* i suppose i'll check out SQLlite
[19:20:25] <Koopz> i can create the DB on startup and fill it, then delete it when i kill that ReactPHP app
[19:22:45] *** Joins: WishBoy (~WishBoy@user/wishboy)
[19:23:19] <TinoDidriksen> I would not expect SQLite sort to be faster since 7.x
[19:28:26] *** Joins: guido (~guido@host-79-19-250-200.retail.telecomitalia.it)
[19:30:16] <__adrian> if it's created+updated out of band and indexes are kept properly, then i'd still expect it to be faster
[19:30:23] <__adrian> but yes, depends
[19:32:16] <hans_> where is it getting 265725 from? https://3v4l.org/9vpZJ
[19:33:04] <TinoDidriksen> It simply returns <0, 0, or >0. The actual number < or > 0 is undefined.
[19:33:33] <stenno\OK> pragmatic
[19:33:54] <hans_> yeah but still.. is it comparing them using int32 or something? just kindof unexpected
[19:34:56] <TinoDidriksen> Dunno, but that's something you don't need to care about.
[19:36:29] <TinoDidriksen> hans_, https://github.com/php/php-src/blob/master/Zend/zend_operators.c#L2967
[19:36:53] <hans_> thanks
[19:37:32] <TinoDidriksen> Oh wait, this would be the true case. It's the retval from memcmp()
[19:37:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:38:24] <TinoDidriksen> So you'd have to refer to the C standard, which also simply says <0, 0, >0. So it comes down to the specific libc implementation.
[19:40:59] *** Joins: vonStinger (ceres@gateway/vpn/protonvpn/vonstinger)
[19:41:41] *** Quits: vonStinger (ceres@gateway/vpn/protonvpn/vonstinger) (Client Quit)
[19:43:11] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 246 seconds)
[19:44:46] *** Joins: uhu (~uhu@2a01:4f9:c010:1087::2)
[19:46:34] *** Quits: guido (~guido@host-79-19-250-200.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[19:56:12] *** Joins: guido (~guido@host-79-19-250-200.retail.telecomitalia.it)
[20:01:10] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 260 seconds)
[20:01:12] *** Joins: harpia (~harpia@143.208.84.235)
[20:02:05] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[20:03:41] <Koopz> working with SQLite3 throws me like 9 years back
[20:03:49] <Koopz> to the times where i hardcoded SQLs
[20:04:37] <Koopz> sure wish i could just pass an array to an insert method
[20:07:04] <__adrian> Koopz: if you're using Sqlite3, be aware PDO supports sqlite
[20:07:30] <Koopz> don't remember PDO having an "insert" method either
[20:08:03] <__adrian> it's like  $insert = $pdo->prepare("insert ..."); $insert->execute($data);
[20:09:32] <Koopz> and execute() quotes strings automatically?
[20:09:37] <Koopz> what about JSON support?
[20:13:34] <hans_> don't think SQLite have any native JSON suport, but don't quote me on that. can ofc store JSON as TEXT, ie $pdo->prepare("insert into tbl (json) values(:json)")->execute([":json"=>json_encode(...)]);
[20:15:09] <Koopz> https://www.sqlite.org/json1.html
[20:16:20] <hans_> ... hmm, well i'd be surprised if your average PHP installation have sqlite compiled with that json extension
[20:20:17] *** Joins: stenno\OK (~stenno@user/stenno)
[20:24:00] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[20:27:11] <Koopz> yeah looks like it did create the column as "text" instead of "json"
[20:27:33] <Koopz> instead of throwing an error at me because of an unknown datatype
[20:27:37] <Naktibalda> Koopz: what extension provides insert() method?
[20:27:54] <Koopz> not a single one to my knowledge :>
[20:28:35] <Koopz> do you happen to know a library that provides a querybuilder for SQLite? :>
[20:28:49] *** Joins: vonStinger (ceres@gateway/vpn/protonvpn/vonstinger)
[20:29:16] *** Quits: vonStinger (ceres@gateway/vpn/protonvpn/vonstinger) (Quit: WeeChat 3.3)
[20:29:25] <Koopz> oh nvm, doctrine actually supports it
[20:35:32] <__adrian> "Koopz> and execute() quotes strings automatically?"  NO; the sql needs to have parameter markers for the data you pass. e.g., INSERT into foo (bar) values (?);
[20:36:00] <__adrian> do not quote/escape data. ALWAYS use prepared statements and pass data via parameters.
[20:36:46] *** Quits: kuku (~kuku@user/kuku) (Remote host closed the connection)
[20:42:15] <__adrian> "Koopz> what about JSON support?" seems to work. if 3v4l has it, i'd expect that extension to be there by default https://3v4l.org/9q8h9
[20:42:26] *** Joins: Rockwood (~Rocky@user/rocky)
[20:43:04] <__adrian> note i don't believe that extension actually introduces a json type. just adds the functions.
[20:45:43] <Rockwood> __adrian, hi how are you sir?
[20:52:02] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:54:16] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[20:54:54] *** Joins: Rockwood (~Rocky@user/rocky)
[21:05:46] *** Quits: harpia (~harpia@143.208.84.235) (Quit: harpia)
[21:06:15] <hans_> speaking of native json type, that's something MySQL and MariaDB did differently, MariaDB just aliases JSON to TEXT, and don't even care to validate that what you put in there is actually JSON, while MySQL implemented an actual JSON datatype, and it does cause issues with apps using both MariaDB and MySQL
[21:07:53] <hans_> (also recall MySQL having better json performance than MariaDB, according to a MariaDB developer trying to justify implementation of an actual JSON datatype)
[21:09:07] <__adrian> mysql was initially like that also. maria has abandoned the "drop-in compatibility" feature at the point (i think since version 10).
[21:15:43] *** Joins: harpia (~harpia@2804:2aec:204:f500:4906:c4ad:bdbe:1b9d)
[21:16:36] *** Quits: guido (~guido@host-79-19-250-200.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[21:17:33] *** Quits: amcsi_ (~amcsi@2E8BA2D1.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[21:20:01] *** Quits: hans_ (~hans@81.166.125.50.static.multigamer.no) (Ping timeout: 268 seconds)
[21:20:38] *** Quits: harpia (~harpia@2804:2aec:204:f500:4906:c4ad:bdbe:1b9d) (Ping timeout: 268 seconds)
[21:23:11] <Sammitch> and either way, do not use JSON types to avoid normalizing your data. you will regret it.
[21:25:32] <Rockwood> are talking about store JSON format in DB directly
[21:29:53] *** Quits: stenno\OK (~stenno@user/stenno) (Ping timeout: 268 seconds)
[21:33:28] <__adrian> indeed... if your alternative is an EAV table, then JSON. but don't use it just because you don't want to write out a schema.
[21:34:35] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 264 seconds)
[21:35:21] <Albright> Damn, I think the most recent macOS release broke MacGDBp.
[21:37:30] <Rockwood> what is MacGDBp?
[21:39:51] <Albright> A GDB client which was useful for debugging Xdebug.
[21:41:44] <Rockwood> good night
[21:41:47] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:46:08] *** Joins: stenno (~stenno@user/stenno)
[21:50:27] <Albright> Installed VS Code… Jesus, it's garbage… how you people use this thing I'll never know… i think I installed a PHP debugging extension and set a breakpoint but it doesn't seem to be attaching to the process, hmm
[21:50:47] *** stenno is now known as stenno\OK
[21:54:34] *** Quits: Nekomander (~BadAdvice@user/badadvicecat) (Ping timeout: 260 seconds)
[22:09:51] <NoiseEee> i don't think VSCode is necessarily the PHP editor of choice
[22:10:09] <NoiseEee> though personally i've tried and put it back many times for other languages too :)
[22:11:28] <__adrian> the key to being happy with any IDE is low expectations
[22:13:32] *** Joins: guido (~guido@host-79-19-250-200.retail.telecomitalia.it)
[22:24:34] *** Joins: NakedKing (~NakedKing@user/nakedking)
[22:26:15] <Sammitch> my expectations are: 1. text editor. 2. syntax highlighting. 3. auto-indent/brace/quote functions that I'm not constantly fighting with, with "none" being a valid option. :P
[22:26:53] <__adrian> 4. reasonable ease of use
[22:27:15] <__adrian> but yep, beyond that, it's all either a bonus/unused/both
[22:29:15] <__adrian> i don't find myself needing to run xdebug often but last time i did it was via a standalone client. and i certainly won't ever use my ide to run git, that's some nonsense i've never understood
[22:31:30] <NoiseEee> that being said, if anyone has experienced TabNine w/ a jetbrains product....
[22:31:33] <NoiseEee> its pretty mindblowing
[22:32:22] <NoiseEee> i save hundreds (maybe ~ 1000 or so?) keystrokes a day
[22:32:26] <NoiseEee> but, offtopic ;)
[22:38:13] <da_wunder> btw that github autopilot is quite nice too
[22:38:33] <stenno\OK> is it really?
[22:39:59] <da_wunder> just used that for two days - but really I'm quite amazed about that
[22:40:22] <stenno\OK> neat
[22:47:49] *** Quits: guzzlefry (~gus@user/guzzlefry) (Quit: Konversation terminated!)
[22:54:35] <freeman_h> __adrian, can you help me please again have a raw update query like this like which gets prepared and then execute pdo style the issue I am having is that when it has this amount of ID it always locks the database and I get this mysql error SQLSTATE[HY000]: General error: 1205 Lock wait timeout exceeded; try restarting transaction this is an example of the query https://kopy.io/25KdC
[22:55:08] <freeman_h> ID are passed via an array an then imploded using php implode method
[23:02:19] <TinoDidriksen> Holy hell that's quite a query.
[23:03:19] <TinoDidriksen> I would not do that in a single query. Those sub-selects can be done before.
[23:03:42] <__adrian> heh
[23:04:01] <__adrian> i mean, performance on that - ask on #mysql
[23:05:12] <biberu> that looks like it could use some profiling and refactoring :)
[23:11:11] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: Depression is merely anger without enthusiasm)
[23:15:54] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:19:34] *** Server sets mode: +Ccnrtzf ##please-register
[23:22:20] <freeman_h> yeah it is quiet the query hahaha
[23:24:36] <freeman_h> TinoDidriksen, "sub select can be done before", I dont quiet get this
[23:25:49] <TinoDidriksen> You can split it into multiple queries and combine the data and build the final query in PHP. That's often faster as well.
[23:27:53] <Sammitch> the query planner often goes a very different route than you think it will for complex queries, and can result in queries being much less efficient than you might otherwise think
[23:28:52] <Sammitch> also your paste link doesn't work for me :/
[23:35:49] *** Quits: entropy_ (~ent@user/entropy/x-9891564) (Remote host closed the connection)
[23:36:27] *** Quits: guido (~guido@host-79-19-250-200.retail.telecomitalia.it) (Quit: WeeChat 3.3)
[23:36:38] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[23:36:52] *** Joins: entropy_ (~ent@user/entropy/x-9891564)
[23:37:05] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[23:38:09] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[23:38:26] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[23:39:19] <freeman_h> TinoDidriksen, i think i get what you mean it might be straight for me if i was not using left joins has i could use results from the arrays to elimate where the ID does not match
[23:40:41] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[23:40:49] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[23:44:38] *** Joins: sfields (~sfields@2605:a601:adea:7a00:5fcc:d1b3:a00e:11b8)
[23:46:35] <freeman_h> hmm TinoDidriksen i ran the query on dbeaver took 2mins and 35 seconds to run, however on php the times out hmmm
[23:46:36] *** Joins: zero (~z@user/zero)
[23:47:46] <zero> hi. i'm having truble installing php7.2 extensions. i have multiple versions of php and i think i messed something up when updating to ubuntu 20.04
[23:47:47] <__adrian> php might have a different timeout (or you might be spending more time building your sql) but php doesn't run your query - mysql does. php has zero impact on the actual execution of your query.
[23:48:04] <zero> trouble even
[23:50:02] <__adrian> zero: generally, remove and reinstall. if this is for dev environment(s), strongly recommend not using your desktop OS - use docker or a vm. finally, 7.2 is end of life - you should not be using it except to update legacy code in preparation for upgrading.
[23:50:36] <zero> __adrian: thanks
[23:51:58] <freeman_h> might explain why its taking to long, its updating 622,560 records
[23:54:26] *** Joins: Nekomander (~BadAdvice@user/badadvicecat)
[23:59:26] *** Joins: harpia (~harpia@2804:2aec:204:d500:9872:ddd6:959:57d4)
