[00:02:17] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:05:20] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[00:05:48] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[00:06:39] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[00:07:04] <pflanze> Hi. What is the initialization list for when attributes can also have initializers? Why `class Foo { Foo() : bar(baz) {} Bar bar; }` and not `class Foo { Foo() {} Bar bar = baz; }`?
[00:09:24] <pflanze> Ah, direct-initialization vs. copy-initialization (I found https://stackoverflow.com/questions/27352021/c11-member-initializer-list-vs-in-class-initializer)
[00:14:11] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: going to sleep (too late))
[00:15:24] <ville> the ctor-initializer has always been there, c++11 added default member initializer
[00:16:35] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 268 seconds)
[00:17:47] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[00:20:18] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[00:21:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:27:34] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:29:32] *** Joins: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr)
[00:31:09] *** Parts: winlundn (nick@2600:3c01::f03c:92ff:fe32:c297) (WeeChat 3.0.1)
[00:31:25] *** Joins: CormacAttack (~mac@144.62.50.200)
[00:32:21] *** Quits: smartin (~Thunderbi@88.135.18.171) (Remote host closed the connection)
[00:32:40] *** Joins: smartin (~Thunderbi@88.135.18.171)
[00:33:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:33:57] *** Joins: proller (~p@2a02:6b8:b081:16::1:37)
[00:37:05] *** Quits: paulf (~paulf@lfbn-lyo-1-397-34.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[00:44:05] *** Quits: pulse (~pulse@user/pulse) (Quit: My hovercraft is full of eels)
[00:45:26] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:48:31] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[00:49:13] *** Joins: rgrinberg (~textual@2806:101e:7:6946:9d9a:387a:2ded:2505)
[00:49:28] *** Joins: Betal (~Betal@user/betal)
[00:50:28] <Alipha> pflanze: `Bar bar = baz;` is just the default. it can be overridden. for instance, you might do: `class Foo { Foo() {} Foo(int value) : bar(value) {} Bar bar = baz; };`
[00:51:06] *** Quits: Pajus (~Pajus@user/pajus) (Ping timeout: 268 seconds)
[00:51:07] <pflanze> Sure, I was talking about cases where no constructor argument is used.
[00:51:39] <pflanze> Avoiding copy is a valid reason for using the initializer list anyway, I guess.
[00:52:47] <pflanze> (I'm still fuzzy about when move is used, vs. copy (wouldn't this be a case where move is used?), and how that's optimized.)
[00:52:55] *** Joins: Pajus (~Pajus@user/pajus)
[00:56:24] *** Joins: slidercrank (~slidercra@user/slidercrank)
[00:57:00] <ville> using the ctor-initializer is not about "avoid a copy" really
[00:57:51] <ville> semantically the ctor-initializer list is/was the only place where you could _initialize_ a member variable. x = 0; in ctor body is assigment
[00:58:54] <ville> even though it may end up producing the same assembly, the language rules still say they are different things: initialization and assignment and you may end up in a situation where you must initialize for code to compile
[00:59:00] *** Joins: pulse (~pulse@user/pulse)
[00:59:19] <Alipha> and if `baz` is not a constant, but instead something passed into Foo's constructor, you can't use the default initializer syntax anyway
[01:02:13] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[01:03:53] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:08:27] *** Quits: Cyp (~cyp@213.237.85.9) (Remote host closed the connection)
[01:08:54] *** Joins: Cyp (~cyp@213.237.85.9)
[01:13:17] <RandomReader> pflanze - it's just normal initialization rules, same as    T foo ...    where ... is the same expression you use either in the member initialization list, or the default member initializer
[01:13:44] <RandomReader> e.g. constructor() : member{v}     is the same as    T member{v}
[01:14:31] <RandomReader> so nothing unique here about moves, same rules as normal .. which admittedly aren't entirely simple to begin with, but at least they're not different here!
[01:14:45] *** Joins: dmenz (~dmenz@2804:14d:5cd4:5e94::1)
[01:16:50] *** Quits: AmR (~AmREiSa@156.207.199.106) (Quit: Konversation terminated!)
[01:18:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:19:45] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[01:29:12] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[01:30:15] *** Quits: magla (~gelignite@55d43df6.access.ecotel.net) (Quit: Stay safe!)
[01:30:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[01:31:15] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:31:19] *** Joins: vicfred (~vicfred@user/vicfred)
[01:33:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:35:17] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:39:25] *** Quits: Guest4008 (phoenix@sdf.org) (Changing host)
[01:39:25] *** Joins: Guest4008 (phoenix@user/phoenix)
[01:39:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:35] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:35] *** ChanServ sets mode: +v npaperbot
[01:39:37] *** Guest4008 is now known as phoenix
[01:43:21] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[01:44:39] *** Joins: spithash (~spithash@user/spithash)
[01:47:50] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Ping timeout: 268 seconds)
[01:52:14] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[01:52:15] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[01:57:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[02:01:46] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[02:02:15] *** Joins: Brainium (~brainium@user/brainium)
[02:09:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:10:17] *** Quits: smartin (~Thunderbi@88.135.18.171) (Quit: smartin)
[02:14:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[02:15:07] *** Quits: jkaye (~jkaye@2601:281:8300:7530:770c:7340:e88b:8722) (Ping timeout: 252 seconds)
[02:17:37] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:20:37] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:3b12:6706:4ee5:604d) (Quit: Leaving)
[02:22:13] *** Quits: CormacAttack (~mac@144.62.50.200) (Quit: WeeChat 3.3)
[02:29:47] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66006dab7ab0a7593362.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[02:32:42] *** Quits: pizdets_ (~pizdets@183.182.111.164) (Ping timeout: 250 seconds)
[02:33:23] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:33:46] *** Joins: pizdets (~pizdets@183.182.114.96)
[02:34:47] *** Joins: Atque (~Atque@user/atque)
[02:35:56] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 268 seconds)
[02:40:03] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:44:35] *** Quits: dmenz (~dmenz@2804:14d:5cd4:5e94::1) (Ping timeout: 268 seconds)
[02:47:02] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[02:47:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:56:00] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[02:56:22] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[02:56:34] *** Joins: nvmd (~nvmd@user/nvmd)
[02:56:53] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[02:58:01] *** Quits: rgrinberg (~textual@2806:101e:7:6946:9d9a:387a:2ded:2505) (Ping timeout: 252 seconds)
[02:59:51] *** Joins: slavfox (~slavfox@93.158.232.111)
[02:59:52] *** Joins: rgrinberg (~textual@2806:101e:7:6946:9d9a:387a:2ded:2505)
[03:01:14] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:29] <pflanze> RandomReader, ville, Alipha: I see, thanks!
[03:03:37] <pflanze> So it's the initializer expressions but with the argument variables of the constructor in context.
[03:04:06] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 265 seconds)
[03:04:48] <pflanze> (And not assignments as I was using.)
[03:10:29] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 252 seconds)
[03:10:29] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Ping timeout: 252 seconds)
[03:10:56] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[03:12:55] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[03:13:46] *** Joins: cpuid (~cpuid@co5.at)
[03:13:47] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[03:13:47] *** Joins: cpuid (~cpuid@user/cpuid)
[03:16:08] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[03:19:01] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[03:19:31] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[03:19:48] *** Joins: rvalue (~rvalue@user/rvalue)
[03:20:09] *** Joins: pflanze_ (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[03:22:48] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Ping timeout: 268 seconds)
[03:22:51] *** pflanze_ is now known as pflanze
[03:23:45] <pflanze> Fun, I didn't realize you could write things like "int x (42);"
[03:24:13] <pflanze> Would you welcome or refuse code I write like this if you review it?
[03:25:43] <Alipha> if they're not going to use =, people generally write "int x{42};" instead. i personally don't like either, but as long as you're consistent, i wouldn't complain
[03:25:54] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[03:27:04] <pflanze> Aha, { }. That also solves the question I was about to ask: that doing the "int x (42);" thing actually fails for members.
[03:27:14] <pflanze> It works as "int x {42};"
[03:29:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c9b:338b:bb4b:5779) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:32:23] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Quit: Leaving)
[03:32:42] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[03:34:22] *** Quits: andreasbuhr_ (~quassel@p549db835.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:35:23] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:37:16] *** Joins: chippy (~chippy@61.136.91.249)
[03:43:11] *** Joins: stonkey (~stonkey@user/stonkey)
[03:44:37] *** Quits: luca0N (~luca0N@nautilus.luca0n.com) (Ping timeout: 240 seconds)
[03:45:19] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 252 seconds)
[03:45:27] *** Joins: luca0N (~luca0N@nautilus.luca0n.com)
[03:45:51] *** luca0N is now known as Guest9894
[03:46:37] *** Quits: Beastie (~lcu@user/thebeastie) (Ping timeout: 240 seconds)
[03:49:04] *** Joins: Beastie (~lcu@user/thebeastie)
[03:50:06] *** Quits: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Read error: Connection reset by peer)
[03:50:34] *** Joins: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[03:52:49] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[03:54:14] *** Quits: stonkey (~stonkey@user/stonkey) (Quit: Leaving)
[03:55:36] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[03:55:59] <pflanze> Would you also accept "new std::string { s }" (over "new std::string (s)")?
[03:56:08] <pflanze> Or prefer?
[03:56:34] <pflanze> (Seems like C++ is fun that way.)
[03:56:39] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:56:59] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[03:59:18] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:04:38] *** Quits: Schrostfutz (~Schrostfu@55d4263e.access.ecotel.net) (Remote host closed the connection)
[04:05:49] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[04:07:23] <RandomReader> my preference in general is to use    auto var = ...   with one of 3 patterns:  T{} for a useful default, like "empty" or "zero";  T{...} for logically filling in a value, like entries in a container;  T(...) for logically generating the value from parameters, as if I were calling a function
[04:07:58] <RandomReader> I'll use the same patterns for the member initializer list, but type member initializers are just annoying all around since you can't use "auto" syntax anyway, so those I just wing it based on what I'm trying to do
[04:08:06] <RandomReader> which is usually "= something"
[04:08:31] <RandomReader> sometimes that means repeating,   T member = T(...)    but what can you do
[04:10:54] <RandomReader> that approach helps avoid subtleties with most vexing parse, default initialization of built-in types, and std::initializer_list vs other constructors
[04:11:18] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[04:13:22] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:14:48] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[04:17:11] <anyone> When would you have to write  T member = T(...)  outside of a class anyway?
[04:18:01] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[04:18:21] <RandomReader> that might come up for a default argument in a function declaration .. I have some vague idea that there's at least one other context where auto doesn't work?  but yeah in general it doesn't come up much
[04:20:06] *** Joins: Quacc (~youbuntoe@user/quacc)
[04:20:20] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[04:24:49] *** Quits: Quacc (~youbuntoe@user/quacc) (Client Quit)
[04:27:44] *** Joins: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net)
[04:28:01] <elb0w> Hi, I am looking to implement a SQL parser. Is ANTLR the best option?
[04:30:48] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[04:32:14] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[04:34:23] <anyone> unlikely
[04:35:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[04:36:22] <elb0w> good point, thanks
[04:36:27] <elb0w> :)
[04:37:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:37:43] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Read error: Connection reset by peer)
[04:38:10] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[04:47:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (lithium.libera.chat (Nickname regained by services)))
[04:47:09] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:48:04] *** PJBoy is now known as Guest7081
[04:48:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:52:14] *** Quits: Guest7081 (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[04:52:34] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:53:34] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[04:54:06] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[04:55:53] *** Joins: cation21 (cation@user/cation)
[04:57:12] *** Quits: cation (cation@user/cation) (Ping timeout: 265 seconds)
[04:59:17] *** cation21 is now known as cation
[05:00:38] *** Quits: proller (~p@2a02:6b8:b081:16::1:37) (Ping timeout: 260 seconds)
[05:02:30] *** Quits: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406) (Ping timeout: 260 seconds)
[05:03:51] *** Joins: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net)
[05:03:51] *** Quits: Alipha (~AliphaX@75-168-47-62.mpls.qwest.net) (Changing host)
[05:03:51] *** Joins: Alipha (~AliphaX@user/alipha)
[05:07:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[05:09:26] *** Joins: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406)
[05:11:19] *** Quits: rgrinberg (~textual@2806:101e:7:6946:9d9a:387a:2ded:2505) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:12:25] <RandomReader> #c++-general would be a better place to ask that
[05:14:05] *** Joins: proller (~p@80.240.216.69)
[05:19:15] *** Joins: hsdjkfhfshfsi (~SomeAdmin@104-181-157-226.lightspeed.austtx.sbcglobal.net)
[05:20:41] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:21:32] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[05:22:43] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[05:23:40] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[05:27:53] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[05:37:32] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[05:39:00] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[05:39:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:39] *** ChanServ sets mode: +v npaperbot
[05:39:47] *** Joins: pulse (~pulse@user/pulse)
[05:40:23] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[05:41:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:41:56] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:42:37] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:43:02] *** Quits: siwica``` (~user@p200300f61707ea0042d11fe39cc3c4a5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[05:43:13] *** Joins: siwica``` (~user@p200300f617036f0094c6a2e617a92118.dip0.t-ipconnect.de)
[05:43:23] *** Joins: cation21 (cation@user/cation)
[05:44:29] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[05:46:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[05:46:46] *** cation21 is now known as cation
[05:48:05] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:48:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[05:48:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:48:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[05:49:36] *** Quits: Pook (~Pook@2001:8a0:f996:1400:40d6:8818:5c54:e122) (Quit: Leaving)
[05:49:46] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:49:47] *** Joins: TheBeastie (~lcu@user/thebeastie)
[05:50:32] *** Quits: Beastie (~lcu@user/thebeastie) (Ping timeout: 240 seconds)
[05:51:00] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[05:52:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[05:53:48] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[05:55:55] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:06:44] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:14:28] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[06:14:43] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Read error: Connection reset by peer)
[06:15:40] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:24da:6c99:9324:ec4d)
[06:21:25] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[06:22:18] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[06:23:19] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:23:56] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[06:28:29] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 252 seconds)
[06:30:00] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[06:31:47] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[06:32:07] *** Joins: spithash (~spithash@user/spithash)
[06:35:15] *** Joins: millido (~millido@84.210.150.128)
[06:38:07] *** Joins: Guest48 (~Guest48@120.17.160.80)
[06:42:06] *** Quits: chippy (~chippy@61.136.91.249) (Remote host closed the connection)
[06:42:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:46:06] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[06:47:11] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[06:48:04] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[06:48:22] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[06:49:02] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Ping timeout: 256 seconds)
[06:49:36] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[06:51:46] *** Joins: rgrinberg (~textual@187.223.209.106)
[06:51:53] *** Joins: pflanze (~pflanze@2001:1a88:19e:4500:b247:dfc0:cca:1a0e)
[06:53:25] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[06:55:36] *** Quits: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net) (Read error: Connection reset by peer)
[06:56:24] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[06:57:13] *** Joins: lpotter (~quassel@180-150-104-92.b49668.bne.static.aussiebb.net)
[06:57:20] *** Parts: drew (~drew@user/drew) (WeeChat 3.2)
[06:57:37] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 250 seconds)
[06:59:59] *** Joins: ferdna (~ferdna@user/ferdna)
[07:03:18] *** Quits: Guest48 (~Guest48@120.17.160.80) (Quit: Client closed)
[07:05:18] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[07:11:18] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[07:20:41] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[07:32:30] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:e90a:754e:bb67:72c9)
[07:37:07] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[07:38:16] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:54:34] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[07:54:58] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:55:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:55] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[07:57:12] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:57:48] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:01:00] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:02:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:02:44] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[08:07:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:10:34] *** Quits: siwica``` (~user@p200300f617036f0094c6a2e617a92118.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:13:49] *** Quits: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net) (Ping timeout: 240 seconds)
[08:14:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[08:14:39] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:32:02] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[08:34:48] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[08:41:22] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:47:18] *** Joins: slidercrank (~slidercra@user/slidercrank)
[08:47:31] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[08:55:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:55:51] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:56:12] *** Quits: malloy (~jimery@116.30.222.36) (Ping timeout: 250 seconds)
[08:58:04] *** Joins: malloy (~jimery@116.30.222.36)
[09:14:13] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35dd:94ed:cb4d:1568)
[09:14:13] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35dd:94ed:cb4d:1568) (Changing host)
[09:14:13] *** Joins: skapata (~Skapata@user/skapata)
[09:14:21] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[09:21:10] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:35:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:39:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:36] *** ChanServ sets mode: +v npaperbot
[09:42:28] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:49:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:54:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:55:48] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:58:46] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[10:00:37] *** Joins: julien (~julien@17.128.136.88.rev.sfr.net)
[10:04:04] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[10:04:53] *** Joins: letto (~letto@188.26.158.104)
[10:15:58] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[10:16:27] *** Joins: Enitin (~Enitin@82.102.22.86)
[10:29:29] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[10:35:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:38:07] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:39:37] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:39:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[10:42:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:42:46] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:46:13] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:46:58] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:50:44] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:55:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9067:6b49:7f00:dbc9)
[10:56:28] *** Joins: neure (~TimoSuora@dzpyfpbyyyyyyyyyyyyyt-3.rev.dnainternet.fi)
[10:59:33] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:01:39] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[11:02:51] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[11:05:55] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[11:08:23] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:e90a:754e:bb67:72c9) (Quit: Leaving)
[11:10:07] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:11:17] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:12:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:14:47] *** Joins: aniketgm (~Aniket@49.36.107.79)
[11:14:48] *** Joins: the_lanetly_052_ (~the_lanet@185.30.88.200)
[11:21:36] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:23:46] *** Quits: rahl (~rahl@102.114.128.177) (Ping timeout: 260 seconds)
[11:24:02] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:24:39] *** Joins: rahl (~rahl@102.114.178.137)
[11:26:29] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[11:28:25] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[11:31:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[11:32:48] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[11:41:13] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:c2d:3f0b:27ac:be30)
[11:41:50] *** hackinghorn is now known as dave0smommy
[11:43:00] *** dave0smommy is now known as hackinghorn
[11:48:24] *** Quits: julien (~julien@17.128.136.88.rev.sfr.net) (Quit: Leaving)
[11:49:11] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[11:49:14] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[11:51:53] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[11:52:15] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Ping timeout: 252 seconds)
[11:55:31] *** Quits: aniketgm (~Aniket@49.36.107.79) (Read error: Connection reset by peer)
[11:58:28] *** Joins: aniketgm (~Aniket@49.36.107.79)
[12:05:14] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:05:36] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:06:28] *** Joins: rendar (~rendar@user/rendar)
[12:06:33] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[12:07:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:08:53] *** Quits: Spirit532 (~Spirit532@mm-44-47-84-93.mgts.dynamic.pppoe.byfly.by) (Killed (NickServ (GHOST command used by Spirit5327!~Spirit532@178.127.95.42)))
[12:08:54] *** Joins: Spirit532 (~Spirit532@178.127.95.42)
[12:13:34] <smallville7123> does a function-like macro act as an overloaded C++ function?
[12:14:16] <smallville7123> or does it just replace the entire C++ function and all overloads?
[12:16:20] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Read error: Connection reset by peer)
[12:17:00] <TinoDidriksen> Neither? It expands where it is used, like all other macros. So if it expands to a function, then that's what you get.
[12:17:34] <TinoDidriksen> Have to remember macros happen before C++ parsing.
[12:18:29] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[12:20:42] <smallville7123> so what if you have a C++ function and a function-like macro both with the same name?
[12:21:28] *** Joins: aLeSD (~aLeSD@139.47.114.114)
[12:21:35] <anyone> Then that will be pain. #define max.
[12:21:47] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[12:21:47] <TinoDidriksen> Again: Macros happen before C++ parsing.
[12:22:09] <TinoDidriksen> If a function name symbol matches a macro, then that macro will expand in that place.
[12:22:23] <smallville7123> ok
[12:22:35] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I'm out of here)
[12:22:52] *** Joins: robod34 (Username@79.113.195.239)
[12:22:53] * smallville7123 only has object-like macro's implemented :(
[12:23:09] <TinoDidriksen> Ideally you shouldn't have any macros.
[12:23:23] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:23:38] <smallville7123> how would i go about identifying a function-like macro given it can contain any number of params
[12:24:37] <TinoDidriksen> By its name?
[12:24:56] <TinoDidriksen> And by how it's used.
[12:25:34] <smallville7123> is a function-like macro expanded even if it is given an incorrect number of parameters
[12:26:01] <TinoDidriksen> That's something you can trivially test.
[12:26:16] <smallville7123> it is, right
[12:26:20] <smallville7123> ?
[12:26:32] <TinoDidriksen> { func(1); } \ #define func(a,b)
[12:26:32] <geordi> error: macro "func" requires 2 arguments, but only 1 given
[12:27:07] <smallville7123> :(
[12:27:27] <TinoDidriksen> ...would you want it to?
[12:27:38] <smallville7123> what would be a very simple way of implementing this?
[12:28:26] <TinoDidriksen> You can use va-args to simulate overloading macros, but why?
[12:28:34] <TinoDidriksen> Why are you using macros at all?
[12:28:48] <smallville7123> i dont want to overload macros
[12:29:33] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:29:43] <TinoDidriksen> If you want to expand even if there's missing arguments, that's effectively overloading.
[12:30:07] <smallville7123> im writing a C pre-processor for a custom language
[12:30:56] <TinoDidriksen> You can just re-use the C preprocessor.
[12:32:19] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:32:32] <smallville7123> isnt that usually embedded in gcc/g++ source
[12:33:19] *** Joins: andreasbuhr (~quassel@p549db084.dip0.t-ipconnect.de)
[12:33:59] <smallville7123> nvm
[12:34:10] <TinoDidriksen> Also, if you're adding code generation, adding the C/C++ preprocessor is not a good idea. That's one of the worst examples of macro/codegen.
[12:35:10] <smallville7123> im writing my own subset of the GLSL language which is based on a subset of C and included the C preprocessor
[12:35:15] <smallville7123> includes*
[12:35:41] <smallville7123> (tho not all GLSL versions mandate the C preprocessor according to the specs)
[12:35:53] *** Joins: msk (~msk@103.213.213.70)
[12:36:55] <smallville7123> but the versions im targeting require such so i need to implement it in order to obtain something that is more useful
[12:37:39] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:37:54] <anyone> The only reason I can think of that GLSL may want a preprocessor is because it's conceivable it might emit C/C++/etc. code that happens to have preproc statements that eventually need to be resolved.
[12:40:49] <smallville7123> the spec seems to justify this as:
[12:41:08] <smallville7123> â€¢ The extension mechanism relies on the preprocessor so this would need to be replaced.
[12:41:08] <smallville7123> â€¢ The #define, #ifdef, #ifndef, #elsif and #endif constructs are commonly used for managing different versions and for include guards.
[12:41:08] <smallville7123> â€¢ There is no template mechanism in GLSL ES so macros are often used instead.
[12:41:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:42:03] <smallville7123> in https://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf#%5B%7B%22num%22%3A710%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C115.2%2C399.9%2C0%5D
[12:43:25] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[12:43:40] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:48:57] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:54:25] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[12:56:16] *** Quits: aniketgm (~Aniket@49.36.107.79) (Quit: leaving)
[12:57:14] *** Joins: rgrinberg (~textual@187.223.209.106)
[12:58:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[13:05:15] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[13:08:35] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[13:08:55] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[13:09:10] *** Joins: pnill_ (~pnill@ip170.ip-54-39-37.net)
[13:09:18] *** Joins: rwb (~augh@theguntretort.com)
[13:09:22] *** Joins: cbreak_ (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:09:30] *** Joins: notevil_ (~notevil@user/notevil)
[13:09:42] *** Joins: gdarko (~me@dg.mk)
[13:09:49] *** Joins: hirish_ (~hirish@ip85.ip-137-74-20.eu)
[13:09:49] *** Joins: martiert_ (~martiert@ti0185q160-2775.bb.online.no)
[13:09:54] *** Joins: fflam_ (~mdt@ip72-220-60-77.sd.sd.cox.net)
[13:09:58] *** Joins: jzsinatr2 (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[13:09:58] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:06] *** Server sets mode: +Fcnt 
[13:10:18] *** Joins: asm_ (nop@asm.dj)
[13:10:20] *** Joins: Techcable_ (~Techcable@168.235.93.147)
[13:10:23] *** Joins: mattgirv_ (quassel@apps.fossgalaxy.com)
[13:10:37] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[13:10:43] *** Joins: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[13:10:43] *** Joins: ericP_ (~eric@jay.w3.org)
[13:11:12] *** Joins: jonbryan_ (~ea@user/jonbryan)
[13:11:18] *** Joins: tin- (~tin@209.250.245.227)
[13:11:18] *** Joins: mib1 (~mib@cpc91222-cmbg18-2-0-cust108.5-4.cable.virginm.net)
[13:11:22] *** Joins: gdd1 (~gdd@129.199.146.230)
[13:11:28] *** Joins: Adrinael_ (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[13:11:45] *** Joins: FlannelKing (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[13:12:10] *** Joins: nuala2 (~nuala@user/nuala)
[13:12:14] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[13:13:38] *** Joins: Tokamak_ (~Tokamak@172.58.191.87)
[13:14:11] *** Joins: Henry_The_Longsh (~Henry@46.101.4.181)
[13:14:26] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[13:15:28] *** Joins: smeso_ (~smeso@user/smeso)
[13:15:29] *** Quits: smeso (~smeso@user/smeso) (Killed (zirconium.libera.chat (Nickname regained by services)))
[13:15:29] *** smeso_ is now known as smeso
[13:15:47] *** Joins: michaeli1 (~michaelis@193.183.209.17)
[13:16:43] *** Quits: robod34 (Username@79.113.195.239) (*.net *.split)
[13:16:44] *** Quits: the_lanetly_052_ (~the_lanet@185.30.88.200) (*.net *.split)
[13:16:44] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[13:16:44] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[13:16:44] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[13:16:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (*.net *.split)
[13:16:44] *** Quits: Tokamak (~Tokamak@172.58.191.87) (*.net *.split)
[13:16:44] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (*.net *.split)
[13:16:44] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[13:16:44] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[13:16:44] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (*.net *.split)
[13:16:44] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[13:16:44] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[13:16:44] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[13:16:44] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (*.net *.split)
[13:16:44] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[13:16:44] *** Quits: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca) (*.net *.split)
[13:16:44] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[13:16:44] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[13:16:44] *** Quits: mib (~mib@cpc91222-cmbg18-2-0-cust108.5-4.cable.virginm.net) (*.net *.split)
[13:16:44] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[13:16:44] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[13:16:44] *** Quits: darkstardevx (~darkstard@50.39.115.145) (*.net *.split)
[13:16:44] *** Quits: Gamah (~quassel@gamah.net) (*.net *.split)
[13:16:44] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[13:16:44] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[13:16:44] *** Quits: kernelspace (~heisenbug@user/ad/x-9056428) (*.net *.split)
[13:16:44] *** Quits: nexgen (~nexgen@li614-178.members.linode.com) (*.net *.split)
[13:16:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[13:16:44] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[13:16:44] *** Quits: c4017w_ (~c4017@209.52.68.8) (*.net *.split)
[13:16:44] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[13:16:44] *** Quits: b_jonas (~x@catv-176-63-4-47.catv.broadband.hu) (*.net *.split)
[13:16:44] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[13:16:44] *** Quits: kapil (~kapil@o-k.website) (*.net *.split)
[13:16:44] *** Quits: pnill (~pnill@ip170.ip-54-39-37.net) (*.net *.split)
[13:16:44] *** Quits: pa (~pah@user/pah) (*.net *.split)
[13:16:44] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (*.net *.split)
[13:16:44] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (*.net *.split)
[13:16:44] *** Quits: montpol (montpol@fine.mouses.xyz) (*.net *.split)
[13:16:45] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[13:16:45] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (*.net *.split)
[13:16:45] *** Quits: martiert (~martiert@ti0185q160-2775.bb.online.no) (*.net *.split)
[13:16:45] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[13:16:45] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[13:16:45] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[13:16:45] *** Quits: jaakkos (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (*.net *.split)
[13:16:45] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[13:16:45] *** Quits: markmarkmark (~mark@user/markmarkmark) (*.net *.split)
[13:16:45] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[13:16:45] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (*.net *.split)
[13:16:45] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[13:16:45] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (*.net *.split)
[13:16:45] *** Quits: fabs (~fabs@wrls-249-137-11.wrls-client.fas.harvard.edu) (*.net *.split)
[13:16:45] *** Quits: Speakz (speakz@user/gadreel) (*.net *.split)
[13:16:45] *** Quits: tin (~tin@209.250.245.227) (*.net *.split)
[13:16:45] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[13:16:45] *** Quits: kfv (~kfv@mail.kfv.io) (*.net *.split)
[13:16:45] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[13:16:45] *** Quits: gdarko_ (~me@dg.mk) (*.net *.split)
[13:16:45] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[13:16:45] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[13:16:45] *** Quits: notevil (~notevil@user/notevil) (*.net *.split)
[13:16:45] *** Quits: ericP (~eric@jay.w3.org) (*.net *.split)
[13:16:45] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[13:16:45] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[13:16:45] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[13:16:46] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[13:16:46] *** Quits: a5m (~nop@asm.dj) (*.net *.split)
[13:16:46] *** Quits: zaratustra (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[13:16:46] *** Quits: Brocker (~NoBody@user/brocker) (*.net *.split)
[13:16:46] *** Quits: jonbryan (~ea@user/jonbryan) (*.net *.split)
[13:16:46] *** Quits: HenryTheLongshot (~Henry@46.101.4.181) (*.net *.split)
[13:16:46] *** slavfox_ is now known as slavfox
[13:16:46] *** polyrob_ is now known as polyrob
[13:16:56] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[13:21:05] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:21:08] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:21:22] *** Joins: slidercrank (~slidercra@user/slidercrank)
[13:21:52] *** Joins: robod34 (Username@79.113.195.239)
[13:21:52] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[13:21:52] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[13:21:52] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[13:21:52] *** Joins: sam113101 (~sam@modemcable229.128-202-24.mc.videotron.ca)
[13:21:52] *** Joins: Viewday11 (~Viewday@user/viewday)
[13:21:52] *** Joins: Gamah (~quassel@gamah.net)
[13:21:52] *** Joins: kernelspace (~heisenbug@user/ad/x-9056428)
[13:21:52] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[13:21:52] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[13:21:52] *** Joins: b_jonas (~x@catv-176-63-4-47.catv.broadband.hu)
[13:21:52] *** Joins: kapil (~kapil@o-k.website)
[13:21:52] *** Joins: pa (~pah@user/pah)
[13:21:52] *** Joins: Speakz (speakz@user/gadreel)
[13:21:52] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[13:21:52] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[13:21:52] *** Joins: montpol (montpol@fine.mouses.xyz)
[13:21:52] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[13:21:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[13:21:52] *** Joins: Trollmann (~Trollmann@user/trollmann)
[13:21:52] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[13:21:52] *** Joins: markmarkmark (~mark@user/markmarkmark)
[13:21:52] *** Joins: xisop (~xisop@bnull.net)
[13:21:52] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[13:22:30] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[13:22:57] *** Joins: Colt (~Colt@user/colt)
[13:24:21] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[13:24:58] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[13:26:30] *** Parts: jabroni (~mar1@209.58.172.83) ()
[13:26:40] *** Joins: nexgen (~nexgen@li614-178.members.linode.com)
[13:27:12] *** Adrinael_ is now known as Adrinael
[13:33:34] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:34:15] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[13:35:05] <pa> if i have a movable variable, can i make a shared pointer out of it using move constructor?
[13:35:53] <RandomReader> make_shared will work, if that's the question .. did you try it?
[13:36:22] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[13:36:53] <pa> nope, because i wasn't sure how to initialize the variable in the initialization list
[13:37:10] <pa> like member(make_shared<>(std::move(arg))) ?
[13:37:31] <RandomReader> if member is a shared_ptr, yes
[13:37:36] *** Joins: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com)
[13:37:36] *** Quits: PJBoy (~PJBoy@host31-48-117-179.range31-48.btcentralplus.com) (Changing host)
[13:37:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:39:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:37] *** ChanServ sets mode: +v npaperbot
[13:40:03] <pa> and is it possible to move from content of a shared pointer?
[13:40:21] <pa> like std::move(*memberptr)
[13:41:06] <RandomReader> I'm not getting the questions, what is it you think will go wrong / why are you not trying these if it's just about syntax?
[13:41:28] <RandomReader> aka I don't understand what you don't understand yet -- is it move semantics in general?
[13:42:41] <pa> i think i get that part
[13:42:52] <pa> but combined with shared pointers i never used before
[13:43:01] <RandomReader> same behavior as a regular pointer
[13:43:12] <RandomReader> you're not asking about the shared_ptr, you're asking about the object it's storing
[13:43:34] <RandomReader> and since you're accessing that object directly with *, same as a regular pointer, it behaves exactly the same: it's up to that object, not up to shared_ptr
[13:43:41] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:43:59] <RandomReader> shared_ptr is just a "container", basically
[13:44:45] <RandomReader> after you successfully move from it, shared_ptr will still be owning that object, and that object will be in whatever moved-from state it chooses to be in
[13:45:22] <RandomReader> and you'd probably just discard it at that point, possibly with: shared_ptr_member = nullptr;
[13:45:51] <RandomReader> or forget about it and let it be cleaned up later, whatever fits
[13:52:15] *** Joins: jiquiame (~gikiam@macaron.isomorphis.me)
[13:54:36] *** Joins: ko (~i.am@user/marlboro)
[13:54:57] *** Joins: s1b1 (~s1b1@user/s1b1)
[14:00:54] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:01:03] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[14:01:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[14:01:51] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:02:25] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[14:02:28] <pa> got it thanks
[14:02:48] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:04:43] *** Joins: seninha (~seninha@user/seninha)
[14:10:49] *** Joins: furrymcgee (~devuan@cgn-89-1-209-93.nc.de)
[14:11:32] *** Quits: iNKa (~NoBody@user/brocker) (Read error: Connection reset by peer)
[14:13:48] *** Joins: proller (~p@80.240.216.69)
[14:18:21] *** Joins: undephin3d (~undephin3@158.181.80.251)
[14:22:01] *** Quits: zoraj_ (~zoraj@209.126.81.159) (Read error: Connection reset by peer)
[14:22:06] <anyone> When vector<T> has to resize, what would it commonly do when one of the T(T&&) invocations throws?
[14:23:19] <PJBoy> it copies the elements if T(T&&) is not noexcept
[14:23:26] <PJBoy> unless there's no copy ctor
[14:23:43] <anyone> in which case... it just yolos it?
[14:24:08] <anyone> (I really remember seeing vector doing copies, but it does not prevent compilation when copyctor is e.g. deleted)
[14:24:47] <PJBoy> yup, "the effects are unspecified"
[14:24:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:25:07] *** Joins: zoraj (~zoraj@209.126.81.159)
[14:25:58] <anyone> that's pretty much the same as UB in this regard, isn't it
[14:26:41] <anyone> there seems to be little room inbetween undefined and defined-but-unspecified for good things to come out of
[14:28:14] <PJBoy> yeah I'm not sure if there's any real difference
[14:29:15] <PJBoy> except constexpr expressions aren't required to diagnose unspecified behaviour
[14:29:37] <PJBoy> but then this is in a stdlib function, so it wouldn't be diagnosed anyway
[14:32:13] <furrymcgee> it is not undefined behaviour, you can catch the exception and use the vector even if the state is unspecified
[14:33:03] <PJBoy> maybe?
[14:33:14] *** Parts: jiquiame (~gikiam@macaron.isomorphis.me) (WeeChat 3.0)
[14:33:20] *** Joins: Atque (~Atque@user/atque)
[14:33:21] <PJBoy> I'm not sure where it would be guaranteed that the vector isn't FUBAR
[14:37:30] <furrymcgee> there is a note in table 28 [tab:cpp17.moveconstructible]
[14:39:04] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[14:39:59] <PJBoy> don't think it has any bearing on vector being valid if one of its elements throws during move construction
[14:41:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[14:43:51] <anyone> take struct T{/*nomembers*/}; T(T&&){if(rand())throw whoops();}, then the T stays "valid" in terms of cpp17.moveconstructible and beyond, but it would still leave the vector in an unknown state (vector may have moved some elements already, and now it's aborting midway)
[14:44:09] <furrymcgee> what else do think is this note about? http://eel.is/c++draft//utility.requirements#tab:cpp17.moveconstructible-row-4-column-1-note-1
[14:45:38] *** Joins: NEYi (~NEYi@109.251.216.38)
[14:45:59] *** Quits: neure (~TimoSuora@dzpyfpbyyyyyyyyyyyyyt-3.rev.dnainternet.fi) (Quit: Leaving)
[14:47:57] <PJBoy> I think it's talking about the rv being valid
[14:48:07] <PJBoy> rv not being the vector
[14:48:58] <PJBoy> the library component vector has no additional requirements on rv in the case that a move ctor exception is thrown
[14:49:11] <PJBoy> so the note really doesn't mean anything in this context
[14:57:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[15:00:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[15:06:38] *** Joins: xkuru (~xkuru@user/xkuru)
[15:08:17] *** Joins: magla (~gelignite@55d41c14.access.ecotel.net)
[15:09:41] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 250 seconds)
[15:11:11] *** Quits: TastyWiener95 (~uhhh3@user/tastywiener95) (Ping timeout: 250 seconds)
[15:11:54] <furrymcgee> well, unspecified like any other constructor throwing an exception
[15:12:41] <PJBoy> vector makes provisions for the copy ctor throwing
[15:12:47] <PJBoy> just not the move ctor
[15:13:18] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:16:11] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[15:17:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[15:21:04] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:25:13] *** Quits: maxxe (~maxxe@user/maxxe) (Quit: off. bbl.)
[15:25:25] *** Quits: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406) (Ping timeout: 240 seconds)
[15:25:25] <ville> they should have just said element move ctors can't throw. i've yet to come across a type that would have a throwing move ctor
[15:25:30] *** Joins: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl)
[15:25:39] *** Joins: lz_ (l@gateway/vpn/protonvpn/lz/x-63480406)
[15:28:09] <furrymcgee> no I dont see any difference
[15:28:21] <PJBoy> any type that doesn't have a move ctor
[15:28:29] <PJBoy> like std::array
[15:29:15] <PJBoy> might have been a bad example...
[15:29:24] <PJBoy> but yeah any copy-only type
[15:29:40] *** Joins: reset (~reset@user/reset)
[15:29:47] <ville> but then that's copying
[15:29:54] <PJBoy> which is still moving
[15:29:58] <ville> you can't have it both ways...
[15:31:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[15:31:24] <CarloWood> Can I run over all elements of a container in reverse using for (auto element : ...) ?
[15:32:22] <CarloWood> Oh, nm.. I have a util for that
[15:32:24] <CarloWood> utils/reversed.h:12:// for (auto const& i : reversed({0,1,2,3,4,5}))
[15:32:37] <PJBoy> I guess they could say move ctors can't throw, but then what about aggregates?
[15:32:56] <PJBoy> where move construction may perform copy construction
[15:34:36] <PJBoy> probably they should have required vector's value_type to be nothrow move constructible or copy constructible
[15:40:29] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[15:41:42] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:42:09] *** Joins: pulse (~pulse@user/pulse)
[15:46:19] *** Quits: JohnMS_WORK (~kvirc@89-64-84-95.dynamic.chello.pl) (Ping timeout: 265 seconds)
[15:48:29] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[15:48:49] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Remote host closed the connection)
[15:49:22] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Quit: Leaving)
[15:49:31] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:49:41] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Client Quit)
[15:49:56] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[15:52:21] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 250 seconds)
[15:54:09] <PJBoy> ah emplace has this same issue
[15:54:37] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 252 seconds)
[15:55:01] *** Joins: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net)
[15:55:05] <PJBoy> oh that's just because of the implicit resize
[15:59:28] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[16:05:17] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e138:977f:7375:1046)
[16:05:17] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e138:977f:7375:1046) (Changing host)
[16:05:17] *** Joins: skapata (~Skapata@user/skapata)
[16:05:37] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[16:05:45] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:07:05] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[16:09:19] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:11:25] *** Quits: elb0w (~elb0w@pool-98-109-49-7.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[16:16:58] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[16:17:48] *** Joins: bauripalash (~bauripala@2401:4900:382a:515c:1:2:a29c:7fac)
[16:21:50] *** Quits: bauripalash (~bauripala@2401:4900:382a:515c:1:2:a29c:7fac) (Client Quit)
[16:28:39] <furrymcgee> they use some is_nothrow_move_constructible in the library
[16:31:19] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[16:32:10] *** Joins: tmm88 (~tmm88@user/tmm88)
[16:32:13] <tmm88> heyho
[16:32:24] <tmm88> https://gist.github.com/quantuumstudio/463cb8c5bc86e1d212990227c90eb1c8 can someone provide me intel on how to fix this
[16:32:27] <tmm88> ?
[16:32:29] <tmm88> cheers
[16:33:05] <PJBoy> might want to explain the problem there
[16:34:15] <PJBoy> without being given a problem, one fix would be to delete all the code and replace it with `int main() {}`
[16:37:36] <TinoDidriksen> tmm88, sizeof(pentatatonicScale) does not give the number of elements in the array. It returns the size in bytes of the whole array.
[16:40:49] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[16:40:49] *** Joins: proller (~p@2a02:6b8:0:51e:ad84:733b:9ab1:fc14)
[16:45:20] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:c2d:3f0b:27ac:be30) (Quit: Leaving)
[16:46:43] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[16:48:53] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[16:49:41] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:51:48] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[16:52:01] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[16:53:38] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[16:57:43] *** Joins: stonkey (~stonkey@user/stonkey)
[16:59:59] <tmm88> https://www.toptal.com/developers/hastebin/yuvanuxidi.cpp can you please help me to fix this? cheers
[17:00:15] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 252 seconds)
[17:00:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:00:51] <anyone> ugh, homework
[17:01:28] <tmm88> https://www.toptal.com/developers/hastebin/uxojuzimaj.cpp
[17:01:29] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:01:30] <tmm88> fixed
[17:02:07] <tmm88> and it's not homework, it's superimposed exercises in nodejs python and c++.
[17:02:17] <tmm88> i am not a software engineer
[17:02:26] <tmm88> neither a cs student
[17:02:37] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[17:02:47] <tmm88> i am just a passionate computer musician holding a masters in the field
[17:04:29] <PJBoy> not passionate enough to explain your problem though
[17:05:13] <tmm88> i don't need any additional help that's fixed
[17:05:51] * PJBoy nods
[17:05:58] <tmm88> i was just with difficulty mapping random array elements random script pause time and finally reading script arguments as i've not been doing c++ for ages
[17:06:08] <PJBoy> have you managed to get 0 as output?
[17:06:27] <tmm88> you have to pass in an argument
[17:06:34] <tmm88> 60 for instane
[17:06:36] <tmm88> instance
[17:06:52] <PJBoy> fair
[17:06:58] <tmm88> and then you can use this as a random step sequencer
[17:07:18] <PJBoy> I'm just concerned about that +1 where `%arrSize+1` is written
[17:07:21] <PJBoy> looks like a bug
[17:07:52] <PJBoy> seems like that 0 in pentatonicScale can never be access, and allows for the array to be read past its end
[17:07:54] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 268 seconds)
[17:08:34] <tmm88> it isn't from the moment this is working properly
[17:08:54] <tmm88> ok
[17:09:00] <tmm88> thanks a lot for your help
[17:09:13] <tmm88> wish you a great solstice, a merry christmas and a great 2022
[17:09:17] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[17:11:13] *** Joins: NEYi (~NEYi@109.251.216.38)
[17:13:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 250 seconds)
[17:14:58] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:23:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:32:31] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 252 seconds)
[17:34:11] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:39:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:38] *** ChanServ sets mode: +v npaperbot
[17:41:02] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:45:21] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:48:01] *** Joins: mattallmill_ (~mattallmi@ip68-103-132-187.ks.ok.cox.net)
[17:53:20] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:53:48] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:56:12] *** lh_mouse_ is now known as lh_mouse
[17:57:02] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:59:17] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[18:00:01] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[18:07:44] <CarloWood> Seriously?
[18:07:46] <CarloWood> /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/11.1.0/../../../../include/c++/11.1.0/ranges:3392:19: error: missing 'typename' prior to dependent type name 'iterator_traits<iterator_t<_Base>>::iterator_category'
[18:07:46] <CarloWood>             using _Cat = iterator_traits<iterator_t<_Base>>::iterator_category;
[18:08:24] <leduyquang753> Well yes.
[18:08:24] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Remote host closed the connection)
[18:08:56] <leduyquang753> It's an ambiguity so must be disambiguated.
[18:09:20] <CarloWood> So bug in clang
[18:09:36] <CarloWood> or in the ranges header file anyway
[18:10:45] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[18:11:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[18:12:13] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:15:53] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:16:50] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:16:52] <PJBoy> I suspect it's not needed in C++20
[18:18:48] <PJBoy> { Cat<vector<int>> cat; } template<typename T> using Cat = iterator_traits<ranges::iterator_t<T>>::iterator_category;
[18:18:48] <geordi>  
[18:18:49] <PJBoy> confirmed
[18:19:49] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[18:20:16] <PJBoy> yeah clang hasn't implemented P0634
[18:20:55] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[18:23:51] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[18:25:34] <pflanze> unordered_map wants a conversion, complains: "no known conversion for
[18:25:34] <pflanze>  argument 1 from â€˜Symbolâ€™ to â€˜const key_type&â€™ {aka â€˜const short unsigned int&â€™}"
[18:25:59] <pflanze> My questions: (1) why does it want an int type and then a reference on top?
[18:26:15] <pflanze> (2) how do I provide such a conversion?
[18:27:33] <Alipha> pflanze: how is your unordered_map defined?
[18:28:18] <Alipha> And a T will convert to a `const T&` just fine, so you don't need to worry about the reference (or const)
[18:28:20] <pflanze> Oh, I forgot to update that to use Symbol as the key
[18:29:14] <pflanze> OK, now I'm getting another message for the expected problem that it won't know how to store my custom Symbol type
[18:29:40] <pflanze> "use of deleted function â€˜std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::unordered_map() [with _Key = Symbol;..."
[18:29:50] *** Quits: frost (~frost@user/frost) (Ping timeout: 260 seconds)
[18:30:47] <pflanze> OK, seems I have to provide std::hash<Symbol>
[18:31:17] <Alipha> And Symbol needs a ==
[18:31:27] <pflanze> OK
[18:35:21] <pflanze> (I don't understand why std::hash is defined as a struct (https://en.cppreference.com/w/cpp/utility/hash).)
[18:36:01] <pflanze> (I was expecting a plain overloaded function.)
[18:37:11] <PJBoy> for holding state
[18:37:24] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[18:37:59] <pflanze> Ah. (So then somewhere the standard will have to define the life time of those.)
[18:38:20] <PJBoy> of note is the idea of using a lambda with captures as your hash object
[18:38:33] *** Quits: Tokamak_ (~Tokamak@172.58.191.87) (Ping timeout: 268 seconds)
[18:39:13] <pflanze> My head is spinning already, but if you've got a pointer I'll gladly bookmark that.
[18:39:29] <PJBoy> well, I haven't seen a hash function that actually needs any state yet
[18:39:50] <PJBoy> but it's not inconceivable
[18:40:09] <pflanze> May make sense for caching, yes.
[18:41:11] <pflanze> But, why is the hashing not just a method on Symbol? Then Symbol could hold the cache.
[18:41:18] <PJBoy> this example uses a lambda for the hash object https://en.cppreference.com/w/cpp/container/unordered_map/unordered_map
[18:41:25] <PJBoy> as option 3
[18:41:44] <PJBoy> well builtin types like ints can't be hashed via method
[18:42:00] <pflanze> Oh my, OK.
[18:42:21] <pflanze> But overloaded functions could.
[18:42:27] <PJBoy> yeah but they can't have state
[18:42:32] <pflanze> OK, fair enough.
[18:43:01] <PJBoy> figuring out the best way to do this kind of "customisation point" is still a hot topic FWIW
[18:43:34] <PJBoy> I'm surprised hash didn't end up being an ADL type thing
[18:43:40] <PJBoy> like size/begin etc
[18:44:00] <pflanze> I wonder if anyone ever reported needing a cache on a builtin type (that also wouldn't have been OK stored as a global).
[18:44:40] <PJBoy> the hash in question could be something generic that doesn't care about the specific type
[18:44:45] <Alipha> pflanze: what does your Symbol struct look like?
[18:44:57] <PJBoy> and hence would cover builtin types
[18:45:18] <pflanze> Alipha, it contains an integer type and a boolean.
[18:49:01] <pflanze> Ah, I can provide the hashing and equality types to the unordered_map template; I guess then I can at least save myself the head spin around template instantiation inside std.
[18:58:14] <pflanze> I'm getting "error: non-static const member â€˜const uint8_t Symbol::is_upperâ€™, cannot use default assignment operator" when trying to copy a Symbol. Why can it not copy an uint8_t?
[18:59:28] <GyrosGeier> the default operator= would overwrite all members in turn
[18:59:36] <GyrosGeier> this member is const, so it cannot be overwritten
[19:00:22] <pflanze> Oh my, but it's about copying the whole Symbol. I think of that as replacing it. And the slot holding the whole Symbol is not const.
[19:00:51] <GyrosGeier> you copy a whole symbol by copying its members, recursively
[19:00:57] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[19:01:07] <GyrosGeier> and you assign a while symbol by assigning its members, recursively
[19:01:18] <GyrosGeier> that's what the default copy constructor and assignment operator do
[19:01:41] <GyrosGeier> the default copy constructor has no problem, because the member is initialized as part of the initializer list
[19:01:47] <urdh> const members are generally very awkward
[19:01:50] <pflanze> Yes, I get that, it's just surprising, because I think of such a replacement as a wholesale thing, not on members.
[19:02:19] <urdh> you typically want to enforce that invariant implicitly instead, precisely for this reason
[19:03:06] <pflanze> I'm also surprised because I thought the default operation for copying structs is simply a memcpy, like in C.
[19:03:23] <urdh> only for trivially copyable types
[19:03:37] <GyrosGeier> you could define Symbol &Symbol::operator=(Symbol const &rhs) { void *memory = reinterpret_cast<void *>(this); this->~Symbol(); return *new(memory) Symbol(rhs); }
[19:03:38] *** Joins: EdFletcher (~PKD@user/edfletcher)
[19:03:42] <GyrosGeier> but that is wrong
[19:03:53] <GyrosGeier> I mean, it works, but it is wrong
[19:04:21] <pflanze> So, I don't use const then?
[19:04:25] <GyrosGeier> memcpy requires the destination to be non-const
[19:04:47] <urdh> yeah don't use const
[19:04:56] *** Joins: Enitin (~Enitin@82.102.22.86)
[19:05:18] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[19:05:20] <urdh> if it's important that the member does not change, it should be private and your member functions should just not change it
[19:08:05] <pflanze> GyrosGeier, memcpy would not have a problem here since the slot holding my Symbol is not const; only its members were.  Symbol a; const Symbol b { .. }; a = b; or memcpy(&a, &b, sizeof(Symbol))
[19:08:31] <pflanze> And I'm not sure but I thought C would allow the a = b just fine here.
[19:09:27] <pflanze> So I'm filing this in things to look out for when porting C to C++.
[19:09:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[19:11:00] *** Joins: nvmd (~nvmd@user/nvmd)
[19:12:48] <pflanze> Do people prefer the '&' with the type or the variable, "const Symbol &that" or "const Symbol& that", or is that just as undecided as with '*' in C?
[19:13:43] <TinoDidriksen> It's more aligned to the type, but not by much.
[19:14:40] <GyrosGeier> geordi, << TYPE(bar); int& foo, bar;
[19:14:40] <geordi> error: 'foo' declared as reference but not initialized
[19:15:01] <GyrosGeier> geordi, << TYPE(bar); int x = 1; int& foo = x, bar = x;
[19:15:01] <geordi> lvalue int
[19:15:15] <GyrosGeier> hmm
[19:15:19] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:15:28] <GyrosGeier> not sure if TYPE resolves references
[19:15:51] <GyrosGeier> geordi, << x; int x = 1; int& foo = x, bar = x; bar = 2;
[19:15:51] <geordi> error: 'bar' does not name a type
[19:15:59] <urdh> << TYPE(decltype(bar)); int x = 1; int& foo = x, bar = x;
[19:15:59] <geordi> error: expected primary-expression before 'decltype'
[19:16:00] <CodeMouse92> I've always preferred type alignment (https://dev.to/codemouse92/cc-pointer-alignment-style-a-justification-13po), but I also appreciate the counterpoint in the comments :)
[19:16:46] <GyrosGeier> geordi, { int x = 1; int& foo = x, bar = x; bar = 2; cout << x; }
[19:16:47] <geordi> 1
[19:17:04] <urdh> meh
[19:17:08] <GyrosGeier> geordi, { int x = 1; int &foo = x, &bar = x; bar = 2; cout << x; }
[19:17:09] <geordi> 2
[19:17:37] <GyrosGeier> that's why I write * and & next to the variable name
[19:17:51] <urdh> once you realize that the "declaring multiple variables" case is irrelevant, aligning with the type becomes a no-brainer tbh
[19:18:40] *** Joins: Brainium (~brainium@user/brainium)
[19:19:11] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[19:20:23] <urdh> pflanze: also fwiw the behavior is the same in C - https://godbolt.org/z/oWqz4nx5G
[19:21:34] <urdh> but yeah if you have a habit of explicitly memcpying everything all the time you'll have a bad time
[19:21:44] <pflanze> urdh, interesting, I wasn't aware of that; I guess I only used initialization by another struct, not assignment, in such cases.
[19:22:07] <BucetaRosa> IDK what was the last time I really had to use memcpy
[19:22:09] <urdh> copy construction works fine in both C and C++ even with const members
[19:22:16] <pflanze> I don't use memcpy, but semantically I thought C did memcpy.
[19:22:23] <BucetaRosa> semantically???
[19:22:26] <GyrosGeier> no
[19:22:26] <BucetaRosa> wth does that mean?
[19:22:38] <GyrosGeier> everyone just does recursive assignment
[19:22:52] <BucetaRosa> now we have memcpy semantics XD
[19:22:53] <GyrosGeier> and then the compiler goes and optimizes that to memcpy
[19:23:42] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:23:59] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[19:25:04] <GyrosGeier> one of the better examples of what optimizers do: https://godbolt.org/z/TsndjzMf1
[19:29:09] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:32:41] <pflanze> (BTW "Symbol b = a;" works fine in both C and C++, thus, this case is initialization not assignment, cool.)
[19:33:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[19:33:52] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-d19a-0c6c-5894-d106.inf6.spectrum.com)
[19:35:38] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:24da:6c99:9324:ec4d) (Ping timeout: 260 seconds)
[19:42:02] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-d19a-0c6c-5894-d106.inf6.spectrum.com) (Ping timeout: 240 seconds)
[19:42:14] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:5c2a:9eff:5b06:f93d)
[19:42:39] <furrymcgee> yes copy construction is initialization because it uses a initializer list for const members
[19:44:32] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 268 seconds)
[19:44:37] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:19fb:f913:df4e:b961)
[19:45:48] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[19:45:54] *** notevil_ is now known as notEVIL
[19:48:05] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:5c2a:9eff:5b06:f93d) (Ping timeout: 250 seconds)
[19:48:37] *** Quits: magla (~gelignite@55d41c14.access.ecotel.net) (Read error: Connection reset by peer)
[19:48:44] *** Joins: magla (~gelignite@55d41c14.access.ecotel.net)
[19:50:01] *** magla is now known as gelignite
[19:51:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:19fb:f913:df4e:b961) (Ping timeout: 260 seconds)
[19:53:19] *** Quits: baltazar (~baltazar@188-143-71-34.pool.digikabel.hu) (Ping timeout: 252 seconds)
[19:53:47] *** Quits: mitch0 (~mitch@188-143-71-34.pool.digikabel.hu) (Ping timeout: 265 seconds)
[19:55:09] *** Joins: baltazar (~baltazar@84-236-20-119.pool.digikabel.hu)
[19:55:37] *** Joins: mitch0 (~mitch@84-236-20-119.pool.digikabel.hu)
[19:56:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:58:00] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[20:00:29] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[20:04:18] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:04:38] *** Quits: Spirit532 (~Spirit532@178.127.95.42) (Changing host)
[20:04:38] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[20:11:40] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 268 seconds)
[20:12:31] *** Joins: caramel (~caramel@user/caramel)
[20:16:10] *** Quits: andreasbuhr (~quassel@p549db084.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:17:02] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 240 seconds)
[20:21:17] *** Joins: caramel (~caramel@user/caramel)
[20:25:35] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[20:32:02] *** Joins: gareppa (~gareppa@user/gareppa)
[20:34:27] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:42:42] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:43:02] *** Quits: useretail (~useretail@185.132.19.151) (Ping timeout: 240 seconds)
[20:49:43] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[20:51:07] *** Quits: SanT`aZClown (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[20:52:41] *** Joins: SanT`aZClown (~TaZ@user/taz/x-9470768)
[20:52:59] *** Joins: bebyx (~Thunderbi@user/bebyx)
[20:53:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[20:54:19] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[20:56:08] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 265 seconds)
[20:56:19] *** Joins: xkuru (~xkuru@user/xkuru)
[20:56:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:01:13] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:04:03] *** TheBeastie is now known as beastie
[21:05:43] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[21:10:37] *** Joins: fputs3 (~fputs@67.59.83.166)
[21:12:09] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 252 seconds)
[21:12:09] *** fputs3 is now known as fputs
[21:13:00] *** Quits: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Remote host closed the connection)
[21:13:23] *** Joins: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[21:22:15] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:74e9:183f:a719:d99e)
[21:22:19] *** Joins: JeffH (~JeffH@233.sub-174-198-143.myvzw.com)
[21:26:42] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 260 seconds)
[21:26:53] *** Quits: JeffH (~JeffH@233.sub-174-198-143.myvzw.com) (Remote host closed the connection)
[21:27:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:28:04] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[21:31:05] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[21:33:48] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[21:39:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:39] *** ChanServ sets mode: +v npaperbot
[21:42:16] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[21:43:33] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[21:46:18] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 260 seconds)
[21:46:49] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[21:46:53] *** Joins: the_lanetly_052_ (~the_lanet@194.135.167.29)
[21:48:38] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Client Quit)
[21:49:01] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.200) (Ping timeout: 240 seconds)
[21:49:02] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[21:49:56] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[21:51:56] *** Joins: Tokamak (~Tokamak@172.58.191.87)
[21:52:51] *** Joins: JeffH (~JeffH@233.sub-174-198-143.myvzw.com)
[21:53:04] *** Quits: JeffH (~JeffH@233.sub-174-198-143.myvzw.com) (Remote host closed the connection)
[21:59:32] *** Quits: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca) (Quit: WeeChat 3.2)
[22:00:11] *** Quits: proller (~p@2a02:6b8:0:51e:ad84:733b:9ab1:fc14) (Ping timeout: 252 seconds)
[22:01:06] *** Quits: Tokamak (~Tokamak@172.58.191.87) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:01:26] *** Quits: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net) (Ping timeout: 268 seconds)
[22:02:06] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:02:56] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:04:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:04:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:06:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:08:00] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[22:10:45] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:12:32] *** Quits: the_lanetly_052_ (~the_lanet@194.135.167.29) (Ping timeout: 240 seconds)
[22:19:56] *** Quits: irc-open-up (bounce@bounce.nastycode.com) (Ping timeout: 245 seconds)
[22:24:30] *** Joins: useretail (~useretail@185.132.19.151)
[22:25:55] *** Joins: useretail_ (~useretail@185.132.19.151)
[22:29:14] *** Quits: useretail (~useretail@185.132.19.151) (Ping timeout: 260 seconds)
[22:30:22] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[22:30:47] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[22:33:07] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[22:34:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:38:06] *** Joins: norias (~jaredm@c-98-219-195-163.hsd1.pa.comcast.net)
[22:39:00] *** eck is now known as cryptonull
[22:44:23] *** Joins: Betal (~Betal@user/betal)
[22:45:47] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:03:22] *** Joins: Pook (~Pook@2001:8a0:f996:1400:71fd:c83a:c1f3:231e)
[23:04:42] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 265 seconds)
[23:05:30] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:07:31] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[23:08:17] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600f9d318f80aec1179.ipv6.abo.wanadoo.fr)
[23:10:47] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:20:36] *** Joins: proller (~p@80.240.216.69)
[23:21:03] *** Joins: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[23:21:51] *** Quits: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Ping timeout: 256 seconds)
[23:29:47] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[23:31:55] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:34:02] *** Quits: useretail_ (~useretail@185.132.19.151) (Ping timeout: 240 seconds)
[23:38:11] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 250 seconds)
[23:39:12] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[23:39:59] *** Joins: useretail (~useretail@185.132.19.151)
[23:51:06] *** Quits: aLeSD (~aLeSD@139.47.114.114) (Ping timeout: 265 seconds)
[23:55:00] *** Joins: Atque (~Atque@user/atque)
