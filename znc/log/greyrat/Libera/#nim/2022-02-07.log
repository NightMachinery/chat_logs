[00:00:22] <PMunch> The first one was what I was looking for
[00:03:05] <PMunch> Hmm, not entirely sure why clang isn't able to read that one
[00:03:31] <PMunch> The line is `typedef int (*WebPWriterFunction)(const uint8_t* data, size_t data_size, const WebPPicture* picture);`
[00:05:23] <FromDiscord> <Phil> I'm on my way to Ubuntu 21.10 so I'll tell you afterwards if that helped or not
[00:11:54] <FromDiscord> <Elegantbeef> It seems iso is moving to futhark for wrapping webp?
[00:12:15] <FromDiscord> <Phil> Pretty much. Not that I got far so far mind you
[00:12:49] <FromDiscord> <Phil> I think atm it's getting wrapping with futhark to work in general
[00:13:14] <FromDiscord> <Phil> For weblibp anyway, given my clang was just so insanely out of date I'm jumping from 18.04 to 21.10
[00:13:25] <FromDiscord> <Elegantbeef> It's a relatively simple API like i said 😀
[00:13:46] <FromDiscord> <Phil> Generally yes
[00:13:53] <FromDiscord> <Phil> But I relatively quickly get open questions
[00:14:04] <FromDiscord> <Phil> Like "How do I translate uint8 to nim"
[00:14:10] <FromDiscord> <Elegantbeef> `uint8`
[00:14:24] <FromDiscord> <Phil> I need an emoji that blinks right now
[00:14:24] <FromDiscord> <Elegantbeef> webp uses fixed size types
[00:14:27] <FromDiscord> <Elegantbeef> You can use the Nim types in that case
[00:14:39] <FromDiscord> <Phil> What do you mean there's a uint
[00:14:49] <FromDiscord> <Elegantbeef> Nim has unsigned integers
[00:15:34] <FromDiscord> <Phil> I just... never tried. I though they were discouraged due to the easily unintended behaviour they can cause and thus everything is just int
[00:15:43] <FromDiscord> <Elegantbeef> Sure but this is cinterop
[00:15:45] <FromDiscord> <Phil> Thus didn't even know they were implemented
[00:15:47] <FromDiscord> <Elegantbeef> You need types that match
[00:16:09] <FromDiscord> <Phil> That makes sense I guess I just didn't think that far
[00:21:48] <FromDiscord> <that_dude> Is there a way I can easily suppress only these error messages? https://media.discordapp.net/attachments/371759389889003532/939986758995677264/unknown.png
[00:22:13] <FromDiscord> <Elegantbeef> Those arent error messages
[00:22:22] <FromDiscord> <Elegantbeef> you can do `--warning[HoleEnumConv]:off`
[00:22:47] <FromDiscord> <that_dude> True not errors, but kinda like warnings right
[00:22:49] <FromDiscord> <that_dude> Thanks!
[00:23:01] <FromDiscord> <that_dude> oh lol
[00:25:07] <FromDiscord> <Elegantbeef> You can also do it in code just for the import but i dont know how that works with generics
[00:25:46] <FromDiscord> <that_dude> How would I do that?
[00:26:08] <FromDiscord> <that_dude> Is it kinda like the way I put in experimental pragmas at the top?
[00:26:30] <FromDiscord> <Elegantbeef> `{.push warning[HoleEnumConv]: off.}` followed by a `{.pop.}` where you want it to end
[00:26:42] <FromDiscord> <that_dude> Thanks!
[00:34:25] <NimEventer> New thread by Ryback08: Strutils count function bug with non ascii table ?, see https://forum.nim-lang.org/t/8874
[00:36:37] <FromDiscord> <Arathanis> rip importing nimscript and qualifying the procs doesn't actually work, i guess ill just deal with all the errors in `.nims` files for now
[00:38:38] <FromDiscord> <Elegantbeef> What?
[00:39:01] <FromDiscord> <Arathanis> im on VS Code using the nims extension for sytax highlighting and the like
[00:39:16] <FromDiscord> <Arathanis> `config.nims` files report missing symbol errors all over the place
[00:39:22] <FromDiscord> <Arathanis> even though they execute just fine
[00:39:37] <FromDiscord> <Arathanis> seems to be unaware of the automatic imports when `config.nims` get executed
[00:40:05] <FromDiscord> <Elegantbeef> Think there was a fix for that in devel
[00:40:16] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OT5
[00:40:19] <FromDiscord> <Arathanis> for nimsuggest?
[00:40:29] <FromDiscord> <Arathanis> In reply to @Elegantbeef "Think there was a": for nimsuggest?
[00:40:50] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/pull/19444
[00:41:20] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/issues/19440 issue is here
[00:43:23] <FromDiscord> <Arathanis> ok cool so a fix is coming
[00:46:28] <FromDiscord> <Phil> Huh
[00:46:34] <FromDiscord> <Phil> Ubuntu 21.10 comes with clang 13
[00:49:33] <FromDiscord> <Arathanis> you can also almost always add dev / future ppa to ubunutu
[00:49:51] <FromDiscord> <Arathanis> its like 1 line, then you get lots of fully updated things
[00:51:03] <FromDiscord> <Phil> pmunch! Clang 13 was indeed the solution
[00:52:22] <FromDiscord> <Phil> Now to comprehend how on earth to use that API
[00:53:33] <FromDiscord> <Elegantbeef> Well you still need to get to link it 😛
[00:54:45] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OT9
[00:55:39] <FromDiscord> <Elegantbeef> But it doesnt link the library does it?
[00:56:28] <FromDiscord> <Phil> I have no comprehension of anything, so the answer to that lies with pmunch and you
[00:56:36] <FromDiscord> <Phil> My thought level so far is:
[00:57:02] <FromDiscord> <Elegantbeef> Well the header doesnt have the implementation so you need to do `{.link: "libweb.a".}` for \nix afaik
[00:57:03] <FromDiscord> <Phil> C --> C-like nim through futhark --> procs from me that call the C-like nim procs
[00:57:27] <FromDiscord> <Phil> Ah, that
[00:57:50] <FromDiscord> <Phil> I pass `--passL:'-lwebp'` , I was under the impression that gives the compiler the lib for dynamic linking
[00:58:05] <FromDiscord> <Elegantbeef> That'd be for static linking
[00:58:12] <FromDiscord> <Elegantbeef> Afaict this library is shipped only statically
[00:59:06] <FromDiscord> <Phil> sh....orts
[01:00:33] <FromDiscord> <xx_ns> what
[01:00:44] <FromDiscord> <xx_ns> what is the purpose of a library you can't link against
[01:01:16] <FromDiscord> <Elegantbeef> What?
[01:02:42] <FromDiscord> <xx_ns> I dunno, I literally just jumped in here
[01:02:59] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Quit: The Lounge - https://thelounge.chat)
[01:03:08] <FromDiscord> <Elegantbeef> We're talking about linking webp, it's shipped as a static library due to googles supreme intellect 😀
[01:03:10] <FromDiscord> <Elegantbeef> So they need to link it before using it
[01:05:03] <FromDiscord> <xx_ns> I always thought a static library is.. well, code, which is included in your project. You can still compile the library, export symbols and link against that
[01:05:23] <FromDiscord> <Elegantbeef> Well it's a library that needs to be linked statically
[01:05:36] <FromDiscord> <Elegantbeef> It has it's own format, and works similar to a dynamic library
[01:05:44] <FromDiscord> <Elegantbeef> The difference is it's inside your final binary
[01:07:07] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4003:8970:d961:ff06) (Quit: Textual IRC Client: www.textualapp.com)
[01:07:10] <FromDiscord> <noow> In reply to @Elegantbeef "We're talking about linking": if a webp vuln drops, all programs will be like recompiling aggressively
[01:07:46] <FromDiscord> <xx_ns> I'm not sure I follow. Static libraries (.a) can still be linked against
[01:07:57] <FromDiscord> <Elegantbeef> No one said they couldnt?
[01:08:02] <FromDiscord> <xx_ns> oh
[01:08:12] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[01:08:22] <FromDiscord> <xx_ns> misinterpreted then, sorry
[01:08:22] <FromDiscord> <Elegantbeef> Both libraries need to be linked, it's in the name afterall
[01:08:36] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[01:09:06] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OTe
[01:09:26] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3OTe" => "https://play.nim-lang.org/#ix=3OTf"
[01:09:27] <FromDiscord> <Elegantbeef> Anway you should be able to do `{.link: "libwebp.a".}`
[01:10:25] <FromDiscord> <Elegantbeef> Assuming the libwebp.a is next to your file i think
[01:10:41] <FromDiscord> <Phil> Was about to say whether it infers the files location or I have to give the path
[01:10:54] <FromDiscord> <Phil> .... Yeah it needs the path
[01:11:23] <FromDiscord> <Elegantbeef> Well there is no path for storing static libraries on linux
[01:11:31] <FromDiscord> <Elegantbeef> Dont know the best way to handle this anyway
[01:11:37] <FromDiscord> <Elegantbeef> I dont know if pmunch is still about
[01:11:39] <FromDiscord> <Elegantbeef> He probably knows
[01:12:28] <FromDiscord> <Phil> Oh wait, there is a dynamic version that you can install from the repo, libwebp-dev... that is just version 0.6 vs 1.2.2
[01:13:15] <FromDiscord> <Phil> 0.6.1-2.1, whatever that means
[01:14:34] <FromDiscord> <Waldecir Santos> can someone point me to a example for the use of `closure` pragma ?
[01:15:19] <FromDiscord> <Waldecir Santos> (edit) "a" => "an"
[01:15:36] <FromDiscord> <Elegantbeef> generally ime you dont use closure manually
[01:16:25] <FromDiscord> <Waldecir Santos> Sure, but I just want to understand how it works, and what are the usages for it
[01:16:30] <FromDiscord> <Elegantbeef> I guess except for iterators
[01:17:20] <FromDiscord> <noow> closures are functions with references to local variables outside the function body
[01:18:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OTj
[01:18:29] <FromDiscord> <Elegantbeef> Here is an example of what a closure iterator can do
[01:18:43] <FromDiscord> <Elegantbeef> They're first class iterators which means they can be stored
[01:18:53] <FromDiscord> <Elegantbeef> They also hold state which means you can use them like functions
[01:20:06] <FromDiscord> <noow> /unrelated is it possible to read the state of an iterator, like whether it's finished/dead or still has yields to do
[01:20:12] <FromDiscord> <Waldecir Santos> Sure but where `{.closure.}` pragma fits in it ?
[01:20:16] <FromDiscord> <Elegantbeef> functions that remember what's going on \
[01:20:32] <FromDiscord> <Elegantbeef> `iterator: int` is implicitly `iterator: int {.closure.}`
[01:20:49] <FromDiscord> <Elegantbeef> closure is implicitly applied to proc definitions and iterators
[01:21:14] <FromDiscord> <Waldecir Santos> Ohh I see, got it
[01:22:02] <FromDiscord> <Elegantbeef> https://github.com/beef331/goodwm/blob/58c67eca84a86aa9ded6c1d5362129b737ddde9a/src/goodwm/layouts.nim an example of why you might want to use closure iterators is something like this
[01:22:19] <FromDiscord> <Elegantbeef> It allows you to instantiate them with data then just work with that data as you go
[01:22:58] <FromDiscord> <Elegantbeef> Though i now have a `asClosure` macro i'd just use here to reduce the proc factory
[01:23:42] <FromDiscord> <Waldecir Santos> perfect, thank you
[01:24:45] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/tests/test1.nim#L73-L159 for more examples of what closures let you do
[01:25:22] <FromDiscord> <Elegantbeef> Ah i guess i have the unrelated "Range iters" test there ;D
[01:32:25] <FromDiscord> <Phil> If something in C blobbers about "returns the size of the compressed data" are they just talking about "this is a count of bytes" or "this is all the output bytes" ?
[01:33:38] <FromDiscord> <Phil> Is the documentation within the header file seriously all the API documentation you get for the individual procs?
[01:33:46] <FromDiscord> <Elegantbeef> the amount of bytes in the output data
[01:34:11] <FromDiscord> <Elegantbeef> Yes it is
[01:34:11] <FromDiscord> <Elegantbeef> What proc are you using?
[01:36:20] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OTn
[01:37:13] <FromDiscord> <Elegantbeef> stride is the distance between pixel data
[01:37:21] <FromDiscord> <Elegantbeef> if it's tightly packed data it'll be 0
[01:37:23] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3OTn" => "https://play.nim-lang.org/#ix=3OTo"
[01:37:38] <FromDiscord> <Elegantbeef> the `output` is a pointer to a int byte array the program will write to
[01:37:48] <FromDiscord> <Elegantbeef> This is a common way of C to operate
[01:38:58] <FromDiscord> <Elegantbeef> The reason stride exists is incase your pixel data is non contiguous so you can easily interact with this api
[01:39:12] <FromDiscord> <Elegantbeef> Aslong as your rgb data is next to it and next elements are the same distance apart
[01:40:14] <FromDiscord> <Phil> So for any person like me before I went down this rabbit hole I'll definitely want to use WebPEncodeRGB and whatever the proc is called that converts... I dunno, JPEG bytes from whatever they have into RGB together just so I can have a simple API proc of "convertJpegToWebP"
[01:42:37] <NimEventer> New thread by Mrgaturus: NPainter: progress report 2020 & 2021, see https://forum.nim-lang.org/t/8875
[01:44:00] <FromDiscord> <Elegantbeef> Ew using procedure name to dictate flow 😛
[01:44:04] <FromDiscord> <Elegantbeef> But yea
[01:45:57] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OTr
[01:47:13] <FromDiscord> <Phil> data is ptr seq[uint8]?
[01:47:30] <FromDiscord> <Elegantbeef> data is a `ptr uint8`
[01:47:46] <FromDiscord> <Elegantbeef> it's the address to the first element in your array
[01:47:51] <FromDiscord> <Phil> I may be interpreting this wrong
[01:47:52] <FromDiscord> <Phil> Ohhhh
[01:47:56] <FromDiscord> <Phil> That was what was confusing me
[01:48:07] <FromDiscord> <Phil> because the type is an array so why do I have a single uint8 there
[01:48:16] <FromDiscord> <noow> you can also cast it to ptr UncheckedArray[uint8]
[01:48:32] <FromDiscord> <Elegantbeef> Eh no point casting it here
[01:48:57] <FromDiscord> <noow> probably
[01:49:20] <FromDiscord> <Elegantbeef> A lot of C array passing is just pointer to the first element
[01:49:24] <FromDiscord> <Phil> why make the output width x height x 3? for rgb?
[01:49:38] <FromDiscord> <Elegantbeef> We know at max it'll be that size
[01:49:53] <FromDiscord> <noow> no alpha? 😛
[01:49:56] <FromDiscord> <Elegantbeef> There is some compression with webp but at max it will be the size of the image times 3 due to 0 compression
[01:50:25] <FromDiscord> <Phil> times 3 because full uint8 for individual values of r, g and b I assume
[01:50:36] <FromDiscord> <Phil> (edit) "times 3 because full uint8 for individual values of r, g and b ... I" 03added "for every pixel"
[01:50:39] <FromDiscord> <Elegantbeef> yes
[01:50:50] <FromDiscord> <Elegantbeef> That's just an assumption though
[01:50:54] <FromDiscord> <Elegantbeef> I should read the comment
[01:52:23] <FromDiscord> <Elegantbeef> Oh wait i'm wrong
[01:52:27] <FromDiscord> <Elegantbeef> You dont need the sequence
[01:52:35] <FromDiscord> <Elegantbeef> It allocates the data for you
[01:53:00] <FromDiscord> <Elegantbeef> So then after encoding you need to call `WebPFree(output)`
[01:53:44] <FromDiscord> <Phil> Don't I have to store the output somewhere first?
[01:54:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OTs
[01:54:06] <FromDiscord> <Elegantbeef> Then you can do whatever you want with that
[01:54:27] <FromDiscord> <Elegantbeef> Welcome to C where a `ptr ptr uint8` is actually a `ptr uint8[]`
[01:54:42] <FromDiscord> <Elegantbeef> Cause "fuck type safety"
[01:57:51] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OTw
[01:58:15] <FromDiscord> <Elegantbeef> Welcome to a type safe language
[01:58:35] <FromDiscord> <Elegantbeef> do `cast[ptr ptr uint8](output)`
[01:59:17] <FromDiscord> <Phil> How do I just... get the pointer from the data? I'd like for users of nim to not have to ever even see the ptr show up in the proc signature, so I'd like for them to hand me data and then I just specifically pass on the pointer to it
[01:59:38] <FromDiscord> <Elegantbeef> This is where wrapping the stuff idiomatically happens
[01:59:56] <FromDiscord> <Elegantbeef> you expose one that takes an `openArray[uint8]` then do `myOA[0].addr`
[02:00:22] <FromDiscord> <Elegantbeef> You will either have to return a pointer or copy it to a sequence for the return value
[02:00:33] <FromDiscord> <Phil> Ohhhh .addr is the proc that returns the pointer
[02:00:44] <FromDiscord> <Elegantbeef> Yes it's address
[02:00:53] <FromDiscord> <Elegantbeef> Much more clear than `&` methinks 😛
[02:01:16] <FromDiscord> <Phil> I fully agree
[02:04:17] <FromDiscord> <Phil> This is the kind of stuff that makes me believe you need to know C first to wrap C
[02:04:32] <FromDiscord> <Phil> I can't thank you enough for the explanations
[02:05:04] <FromDiscord> <Phil> That's more gotchas in the last hour than I've seen in JS since I started coding in it... and I'm not particularly a fan of JS
[02:05:34] <FromDiscord> <Elegantbeef> I dont know C
[02:05:48] <FromDiscord> <Phil> squints
[02:06:16] <FromDiscord> <Elegantbeef> I mean it's semantics of a manual allocated language 😛
[02:07:36] <FromDiscord> <Phil> to copy from UncheckedArray to a seq[uint8]
[02:07:48] <FromDiscord> <Phil> Do I just loop over the uncheckedArray or do we have some sort of copy operator ?
[02:08:11] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OTx
[02:12:40] <FromDiscord> <Phil> It is officially impossible for C to become obsolete fast enough
[02:12:52] <FromDiscord> <Elegantbeef> Zig and Odin are trying
[02:13:04] <FromDiscord> <Phil> They have to try harder if this is what sane people need to deal with
[02:13:18] <FromDiscord> <Elegantbeef> I mean C is the interop language
[02:13:31] <FromDiscord> <Elegantbeef> So this will happen even if no one used C directly
[02:16:43] <NimEventer> New thread by Aquachain: Get unicode codes of a string, see https://forum.nim-lang.org/t/8876
[02:23:48] <FromDiscord> <Phil> oh.... oh god... this isn't even the only lib I'll need. I need to also get stuff that converts from jpeg to rgb as that's not in the lib
[02:23:50] <FromDiscord> <Phil> Welp
[02:25:53] <FromDiscord> <Phil> Yeah I'm not delaing with that today. I'll keep what you said in mind. I'm writing myself notes of what I've learned so far and then head to bed
[02:26:00] <FromDiscord> <Phil> (edit) "delaing" => "dealing"
[02:28:36] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OTC
[02:28:53] <FromDiscord> <Phil> (edit) "https://play.nim-lang.org/#ix=3OTC" => "https://play.nim-lang.org/#ix=3OTD"
[02:29:31] <FromDiscord> <Elegantbeef> The fuck are you on about? 😀
[02:29:48] <FromDiscord> <Elegantbeef> the sequence is allocated to it's `len`
[02:30:05] <FromDiscord> <Elegantbeef> so we know for certain that `size` will fit inside the sequence
[02:30:16] <FromDiscord> <Phil> Ohhhhhhhhh right
[02:30:19] <PMunch> You're still having fun I see @Phil :P
[02:30:34] <FromDiscord> <Phil> In reply to @PMunch "You're still having fun": I have no idea how C dev survive
[02:30:40] <FromDiscord> <Phil> (edit) "dev" => "devs"
[02:30:56] <PMunch> It's not that bad once you get used to
[02:31:11] <FromDiscord> <Elegantbeef> Is stockholm nice this time of year?
[02:31:48] <PMunch> Once you get your head inside the machine, understand how everything works, then you sorta start to think about what the other languages are doing under the hood.
[02:31:51] <PMunch> Haha :P
[02:31:52] <FromDiscord> <Phil> So far every second word in C has been a gotcha
[02:32:11] <PMunch> It's a dense language, but if you think C is bad don't try Forth :P
[02:32:32] <PMunch> Someone crashed a spaceship because they mistook a , for a . in Forth
[02:32:39] <PMunch> Couple million dollars right out the window
[02:33:14] <FromDiscord> <Elegantbeef> Well C is a "simple" language
[02:33:23] <FromDiscord> <Elegantbeef> The simple means it doesnt have many mechanisms 😀
[02:33:52] <FromDiscord> <Elegantbeef> If only pascal won
[02:33:55] <FromDiscord> <Phil> Nim is my fourth language and with it I've got my bases covered. Nim for fun and performance, python for fun and ecosystem, Java to make money and JS/TS for web
[02:35:14] <PMunch> If only I could make money with Nim..
[02:35:39] <FromDiscord> <Elegantbeef> Dont you use Nim at your job you jester
[02:36:34] <FromDiscord> <Elegantbeef> Oh and pmunch this is my level editor now https://streamable.com/z3ny3a it's 100% more sensible now
[02:37:09] <PMunch> Well yes, but only when I manage to sneak it past management :P
[02:37:57] <PMunch> Wait, this is a new game?
[02:38:07] <PMunch> Looks really solid!
[02:38:19] <FromDiscord> <Elegantbeef> "New game"
[02:38:30] <FromDiscord> <Elegantbeef> It's a 2D project that i made forever ago
[02:38:52] <FromDiscord> <Elegantbeef> Ported it to 3D in november, then got back to it again recently
[02:39:22] <PMunch> Before the one you wrote in Nico which I can never remember the name of?
[02:39:31] <PMunch> But which I played waaay too much
[02:39:37] <FromDiscord> <Elegantbeef> Linerino
[02:39:42] <PMunch> That's the one!
[02:40:42] <FromDiscord> <Elegantbeef> Nah i made it after linerino but stopped working on it for whatever reason
[02:40:49] <FromDiscord> <Phil> Alright, heading to bed, have a good time you guys and thank you both very much for the support!
[02:41:16] <FromDiscord> <Elegantbeef> https://streamable.com/pj725f was the 2D version
[02:41:25] <FromDiscord> <Elegantbeef> No problem
[02:42:09] <FromDiscord> <Elegantbeef> Buh bye
[02:47:48] <PMunch> Oh yeah, I remember you sharing some screenshots of that
[02:48:02] <PMunch> The 3D version looks super tight though
[02:48:26] <PMunch> Sorry for the slow response, got stuck playing Linerino on the hardest difficulty (again)
[02:48:31] <PMunch> But I'm off to bed as well
[02:48:35] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:48:39] <FromDiscord> <Elegantbeef> Buh bye
[02:51:38] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 250 seconds)
[03:15:19] <FromDiscord> <noow> why does strtok modify its argument
[03:15:22] <FromDiscord> <noow> C 😭
[03:18:03] <FromDiscord> <noow> it's okay it's okay <string.h> is a what string manipulation libraries should look like
[03:29:08] <FromDiscord> <Yepoleb> C is cursed stuff
[03:30:24] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:49] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:32:53] <FromDiscord> <noow> i gotta get used to half the stdlib's being gotchas
[03:33:11] <FromDiscord> <noow> and to half of them modifying things i'm passing as arguments
[03:33:23] <FromDiscord> <noow> (edit) "and to half of them modifying things i'm passing as arguments ... " 03added "instead of returning values based on them"
[03:36:22] <FromDiscord> <Yepoleb> no just write your own functions that do things the sane way
[03:36:35] <FromDiscord> <Yepoleb> or copy them from somewhere
[04:07:05] <NimEventer> New thread by Nycto: Void as a type in a tuple, see https://forum.nim-lang.org/t/8877
[04:12:39] <FromDiscord> <Tuatarian> is there anything i can do about this?
[04:12:41] <FromDiscord> <Tuatarian> this code
[04:12:54] <FromDiscord> <Tuatarian> sent a code paste, see https://play.nim-lang.org/#ix=3OTY
[04:13:05] <FromDiscord> <Tuatarian> gives an internal error on 1.4.4
[04:13:10] <FromDiscord> <Tuatarian> `Error: internal error: proc has no result symbol`
[04:13:22] <FromDiscord> <Tuatarian> sorry forgot to include some stuff
[04:13:25] <FromDiscord> <Tuatarian> `C:\Program Files\nim-1.4.4\lib\pure\strutils.nim(517, 10) Error: internal error: proc has no result symbol`
[04:13:46] <FromDiscord> <Tuatarian> a more split version of the (I think) offending line is
[04:14:20] <FromDiscord> <Tuatarian> sent a code paste, see https://play.nim-lang.org/#ix=3OTZ
[04:14:38] <FromDiscord> <Tuatarian> also, I get this warning
[04:14:40] <FromDiscord> <Tuatarian> `d:\Scripts\Misc\Nim\Nim\games\sPuzPic\rayutils.nim(1, 67) Warning: imported and not used: 'sequtils' [UnusedImport]`
[04:14:47] <FromDiscord> <Tuatarian> even though I have very much used sequtils
[04:14:56] <FromDiscord> <Tuatarian> neither of these errors show up in vscode
[04:15:11] <FromDiscord> <Tuatarian> wasn't able to do the ./koch c thing, not sure how to
[04:19:31] <FromDiscord> <ynfle> @Tuatarian Can you share more of the code?
[04:24:53] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3OU0
[04:25:30] <FromDiscord> <ynfle> (edit) "https://play.nim-lang.org/#ix=3OU0" => "https://paste.rs/d2H"
[04:29:01] <FromDiscord> <Tuatarian> Didn't realize endswith existed, that's super useful
[04:29:12] <FromDiscord> <Tuatarian> I'll copy paste the whole file
[04:29:25] <FromDiscord> <Tuatarian> onto pasteofcode
[04:29:38] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OU2
[04:30:13] <FromDiscord> <Tuatarian> main.nim : https://paste.ofcode.org/tdSrfrZ4wAw6nSPgctSmiX
[04:30:47] <FromDiscord> <noow> try putting that strformat into its own var and using it
[04:30:58] <FromDiscord> <noow> does it still error
[04:32:39] <FromDiscord> <Tuatarian> In reply to @noow "this code compiles for": I get an IO error if I run that line in isolation
[04:33:20] <FromDiscord> <noow> but that's a runtime error, I thought we were talking about a compiler error
[04:33:43] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3OU6
[04:33:44] <FromDiscord> <Tuatarian> In reply to @noow "try putting that strformat": yes
[04:34:05] <FromDiscord> <Tuatarian> In reply to @ynfle "Just remove strformat and": the thing is appending another path
[04:34:25] <FromDiscord> <Tuatarian> can you do it like `"assets" / folders[i]`?
[04:34:31] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "can you do it": Ya
[04:34:32] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OU7
[04:34:41] <FromDiscord> <ynfle> Is `.path` a field?
[04:34:44] <FromDiscord> <Tuatarian> ok so then the internal error thing is from elsewhere
[04:34:45] <FromDiscord> <Tuatarian> yes
[04:35:00] <FromDiscord> <ynfle> If you comment out the line it compiles?
[04:35:01] <FromDiscord> <Tuatarian> walkdir gives a tuple of kind and path
[04:35:17] <FromDiscord> <Tuatarian> no
[04:35:28] <FromDiscord> <Tuatarian> ok so the error is elsewhere which is odd
[04:36:24] <FromDiscord> <Tuatarian> also, why is it saying that I didn't use sequtils?
[04:37:18] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "also, why is it": If it doesn't compile properly, so then import may not be used
[04:37:22] <FromDiscord> <Tuatarian> ok so the issue is in this function
[04:37:26] <FromDiscord> <noow> there's another line with sequtils in it
[04:37:29] <FromDiscord> <Tuatarian> sent a code paste, see https://play.nim-lang.org/#ix=3OU9
[04:37:34] <FromDiscord> <Tuatarian> I rewrote the split func to try to identify it
[04:37:47] <FromDiscord> <Tuatarian> it gives `internal error: proc has no result symbol`
[04:37:54] <FromDiscord> <Tuatarian> not really sure what to make of that
[04:38:13] <FromDiscord> <huantian> what is this function supposed to do
[04:38:17] <FromDiscord> <Tuatarian> split
[04:38:20] <FromDiscord> <Tuatarian> its the split iterator
[04:38:40] <FromDiscord> <Tuatarian> can confirm the variable being named result is not the issue, if I rename it the problem persists
[04:38:48] <FromDiscord> <huantian> wait why not just use split?
[04:39:01] <FromDiscord> <ynfle> Try compile with `--verbosity:2`
[04:39:10] <FromDiscord> <noow> is the `in` defined for strings?
[04:39:22] <FromDiscord> <Tuatarian> In reply to @huantian "wait why not just": I was using split initally but I copied it over to another file to try to find the issue more easily
[04:39:29] <FromDiscord> <Tuatarian> In reply to @noow "is the `in` defined": pretty sure
[04:39:36] <FromDiscord> <Tuatarian> almost 100% sure
[04:39:39] <FromDiscord> <ynfle> Not for char I don't think
[04:39:47] <FromDiscord> <Tuatarian> you can't do char in string?
[04:39:54] <FromDiscord> <Tuatarian> the regular split iterator causes the same issue btw
[04:40:00] <FromDiscord> <ynfle> Nver mind
[04:40:14] <FromDiscord> <Tuatarian> In reply to @ynfle "Try compile with `--verbosity:2`": same error
[04:40:29] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "same error": I know, but it may give more information
[04:40:37] <FromDiscord> <Tuatarian> it didn't I mean
[04:40:40] <FromDiscord> <Tuatarian> sorry I phrased that badly
[04:40:43] <FromDiscord> <Tuatarian> it gave the same error
[04:41:07] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OUa
[04:41:11] <FromDiscord> <Tuatarian> sent a code paste, see https://play.nim-lang.org/#ix=3OUb
[04:41:49] <FromDiscord> <Tuatarian> sent a code paste, see https://play.nim-lang.org/#ix=3OUc
[04:41:54] <FromDiscord> <Tuatarian> just copied it over to test
[04:42:25] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OUd
[04:42:42] <FromDiscord> <noow> wait maybe it's the combination of iterators with toSeq or something
[04:43:29] <FromDiscord> <huantian> I mean if you're using toSeq, just use the function version of split
[04:43:31] <FromDiscord> <noow> imgtxt[imgid].spsplit("&!&").pairs
[04:43:33] <FromDiscord> <noow> you're doing this
[04:43:49] <FromDiscord> <noow> lemme try including this as well in my small test
[04:43:57] <FromDiscord> <Tuatarian> In reply to @huantian "I mean if you're": there's a funciton version of split?
[04:44:04] <FromDiscord> <huantian> https://nim-lang.org/docs/strutils.html#split%2Cstring%2Cchar%2Cint
[04:44:10] <FromDiscord> <Tuatarian> also I changed the orignal line to use the proc version of readlines so no split there
[04:44:18] <FromDiscord> <Tuatarian> In reply to @huantian "https://nim-lang.org/docs/strutils.html#split%2Cstr": lmao I had no idea
[04:44:43] <FromDiscord> <noow> are you sure line 189 is possible to do?
[04:44:55] <FromDiscord> <Tuatarian> if shown?
[04:45:10] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OUe
[04:45:36] <FromDiscord> <Tuatarian> huh
[04:45:40] <FromDiscord> <Tuatarian> does that work for normal split?
[04:45:51] <FromDiscord> <Tuatarian> gives the same issue for me with normal split
[04:45:54] <FromDiscord> <Tuatarian> that's really weird
[04:46:34] <FromDiscord> <Tuatarian> ok the error disappears if I dont' use pairs here
[04:46:43] <FromDiscord> <noow> pairs is only defined for a few builtin types
[04:46:44] <FromDiscord> <noow> https://nim-lang.org/docs/iterators.html#pairs.i%2Ccstring
[04:46:51] <FromDiscord> <Tuatarian> placing inx outside the loop and incrementing it manually compiles fine
[04:46:52] <FromDiscord> <huantian> this works
[04:46:56] <FromDiscord> <huantian> sent a code paste, see https://play.nim-lang.org/#ix=3OUf
[04:47:14] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3OUg
[04:47:29] <FromDiscord> <huantian> actaully the .pairs is redundant
[04:47:37] <FromDiscord> <Tuatarian> ok so split needs to be function not iterator
[04:47:44] <FromDiscord> <Tuatarian> but if I put split there it assumes it's iterator not a function
[04:47:53] <FromDiscord> <Tuatarian> so you need to manually make it a seq instead of an iterator
[04:48:03] <FromDiscord> <Tuatarian> or just count the inx outside and not deal with pairs
[04:48:05] <FromDiscord> <noow> if split returns a seq you can also just iterate over seq's
[04:48:17] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3OUh
[04:49:15] <FromDiscord> <Tuatarian> so enumerate is kind of a generalization of pairs?
[04:49:38] <FromDiscord> <Tuatarian> or is it that enumerate takes an iterator?
[04:49:39] <FromDiscord> <noow> i think pairs guarantees that the index belongs to the value in case of things like tables?
[04:49:47] <FromDiscord> <noow> and pairs is used for data types
[04:50:05] <FromDiscord> <Tuatarian> oh I see
[04:50:06] <FromDiscord> <noow> (edit) "used" => "an iterator itself"
[04:50:11] <FromDiscord> <Tuatarian> and enumerate doesn't guarantee order necessarily
[04:50:12] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "so enumerate is kind": Ya
[04:50:23] <FromDiscord> <Tuatarian> ok thanks guys
[04:50:28] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "and enumerate doesn't guarantee": It should
[04:50:30] <FromDiscord> <Tuatarian> this was a gigantic help
[04:50:31] <FromDiscord> <noow> In reply to @iWonderAboutTuatara "and enumerate doesn't guarantee": i think enumerate keeps the order of the iterator passed?
[04:50:44] <FromDiscord> <Tuatarian> in the examples enumerate is enumerating over non iterator things also
[04:50:50] <FromDiscord> <ynfle> Did you issue get solved?
[04:50:54] <FromDiscord> <Tuatarian> yep
[04:50:57] <FromDiscord> <Tuatarian> compiling perfectly
[04:50:59] <FromDiscord> <ynfle> How?
[04:51:07] <FromDiscord> <Tuatarian> I removed pairs
[04:51:20] <FromDiscord> <noow> In reply to @iWonderAboutTuatara "in the examples enumerate": it's a macro though, so it should work for anything i think
[04:51:22] <FromDiscord> <Tuatarian> am counting inx manually, declared the var prior to the loop and increment each time
[04:51:42] <FromDiscord> <Tuatarian> In reply to @noow "it's a macro though,": yeah, if its loopable enumerate should work
[04:51:43] <FromDiscord> <ynfle> Please file a bug, internal errors, shouldn't exist
[04:52:00] <FromDiscord> <ynfle> Which pairs did you remove?
[04:52:24] <FromDiscord> <noow> https://paste.ofcode.org/tdSrfrZ4wAw6nSPgctSmiX line 189
[04:52:28] <FromDiscord> <Tuatarian> on line 191
[04:52:31] <FromDiscord> <Tuatarian> oh 189?
[04:52:37] <FromDiscord> <Tuatarian> ok it's different in my vscode
[04:52:42] <FromDiscord> <Tuatarian> not sure how to file a bug report
[04:52:52] <FromDiscord> <Tuatarian> it says to run the ./koch thing but I don't really know what to do for that
[04:53:17] <FromDiscord> <noow> that's for recompiling the compiler so it shows more info
[04:53:27] <FromDiscord> <Tuatarian> you have to import enumerate as std/enumerate
[04:53:31] <FromDiscord> <Tuatarian> you can't just do import enumerate
[04:53:32] <FromDiscord> <Tuatarian> that's strange
[04:53:34] <FromDiscord> <noow> but trying to reduce the issue to a small nim code that also doesn't compile with the same internal error should be enough probably
[04:53:57] <FromDiscord> <ynfle> @Tuatarian for the file extension stuff you can use this https://nim-lang.org/docs/os.html#splitFile%2Cstring
[04:54:25] <FromDiscord> <Tuatarian> it's recombining not separating
[04:54:29] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "not sure how to": Open an issue on https://github.com/nim-lang/Nim/issues with a minimal reproducible example
[04:54:35] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "it's recombining not separating": For the filtering?
[04:54:40] <FromDiscord> <Tuatarian> yeah
[04:54:50] <FromDiscord> <Tuatarian> &"assets/{folders[i]}"
[04:54:59] <FromDiscord> <Tuatarian> folders[i] is a directory in assets
[04:55:17] <FromDiscord> <ynfle> No I meant `filterIt(it.path[^4..^1] == ".imdat")`
[04:55:31] <FromDiscord> <ynfle> it.splitFile.ext
[04:55:42] <FromDiscord> <Tuatarian> does `walkDir(relative=false)` give paths relative to the file or like the system path?
[04:55:55] <FromDiscord> <Tuatarian> In reply to @ynfle "No I meant `filterIt(it.path[^4..^1]": oh I see, that's a good idea probably
[04:55:59] <FromDiscord> <huantian> In reply to @iWonderAboutTuatara "does `walkDir(relative=false)` give paths": > Walking is not recursive. If relative is true (default: false) the resulting path is shortened to be relative to dir.
[04:56:03] <FromDiscord> <Tuatarian> I think there's also an endsWith proc that I could use
[04:56:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[04:56:11] <FromDiscord> <noow> what nim version are you using?
[04:56:12] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "does `walkDir(relative=false)` give paths": Docs say `relative = true` makes the returned paths relative
[04:56:18] <FromDiscord> <Tuatarian> relative to the dir it starts walking from right?
[04:56:37] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "I think there's also": Ya. But may be easier. 🤷‍♂️ Whatever you want
[04:56:43] <FromDiscord> <ynfle> In reply to @noow "what nim version are": 1.4.4 from above errors
[04:56:52] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "relative to the dir": Probably not
[04:57:00] <FromDiscord> <huantian> In reply to @ynfle "Ya. But may be": I'd say splitfile is more explicit
[04:57:05] <FromDiscord> <noow> yeah it's fixed in latest nim
[04:57:06] <FromDiscord> <Tuatarian> ie if it starts walking in `assets/` then you'd  get, say, `assets/classic` as `classic`
[04:57:21] <FromDiscord> <Tuatarian> using 1.4.4.
[04:57:26] <FromDiscord> <noow> i could reproduce the bug in 1.4.4 by just trying to call .pairs on an iterator
[04:57:33] <FromDiscord> <noow> but in 1.6.2 it gives you a nice error message
[04:57:40] <FromDiscord> <ynfle> In reply to @noow "but in 1.6.2 it": 🥳
[04:57:42] <FromDiscord> <Tuatarian> is choosenim working on windows btw?
[04:57:46] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "is choosenim working on": Ya
[04:57:54] <FromDiscord> <Tuatarian> it was broken for the longest time
[04:58:54] <FromDiscord> <Tuatarian> epic
[04:59:08] <FromDiscord> <Tuatarian> so happy to not have to deal with changing PATH every time I want to update
[04:59:25] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "it was broken for": From this post https://forum.nim-lang.org/t/8839#57877 it seems like it does
[05:00:12] <FromDiscord> <Tuatarian> yeah it worked for me
[05:00:52] <FromDiscord> <Tuatarian> though... it did not update PATH
[05:00:52] <FromDiscord> <noow> In reply to @ynfle "From this post https://forum.nim-lang.org/t/8839#57": they used the wrong arg no? it wasn't choosenim not working
[05:01:05] <FromDiscord> <noow> it doesn't update PATH on linux either
[05:01:12] <FromDiscord> <Tuatarian> oh so I have to do it manually?
[05:01:22] <FromDiscord> <ynfle> In reply to @noow "they used the wrong": Right, but it seems that that was the only issue
[05:01:25] <FromDiscord> <Tuatarian> that was the most painful part of updating lmao
[05:01:25] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "oh so I have": No
[05:01:27] <FromDiscord> <noow> on linux I had to add ~/.nimble/bin to PATH manually once
[05:01:44] <FromDiscord> <noow> I don't know where choosenim puts things on win
[05:01:56] <FromDiscord> <huantian> yeah you just add `export PATH="$HOME/.nimble/bin:$PATH"` to your rc file
[05:02:18] <FromDiscord> <noow> I think they use a "environment variables" program to do that on windows, i'm not sure
[05:02:25] <FromDiscord> <noow> (edit) "they" => "people"
[05:04:06] <FromDiscord> <Tuatarian> I'm on windows atm
[05:04:19] <FromDiscord> <ynfle> Did choosenim work?
[05:04:28] <FromDiscord> <Tuatarian> it downloaded it but doesn't seem to have changed path
[05:04:44] <FromDiscord> <Tuatarian> export PATH="$HOME/.nimble/bin:$PATH
[05:04:47] <FromDiscord> <Tuatarian> I have this in path
[05:04:57] <FromDiscord> <Tuatarian> but it still calls nim 1.4.4 compiler
[05:05:54] <FromDiscord> <ynfle> What's in your `$HOME/.nimble` dir?
[05:06:16] <FromDiscord> <huantian> In reply to @iWonderAboutTuatara "export PATH="$HOME/.nimble/bin:$PATH": I don't thinkt this works on windows
[05:06:28] <FromDiscord> <noow> In reply to @iWonderAboutTuatara "export PATH="$HOME/.nimble/bin:$PATH": that was a bash command
[05:06:29] <FromDiscord> <huantian> you have to add the path to the folder where choosenim is installed at the end
[05:06:39] <FromDiscord> <Tuatarian> II copied this from the path environment vairable
[05:06:58] <FromDiscord> <Tuatarian> it shows in the thing as C:/Users/Admin/.nimble\bin
[05:07:07] <FromDiscord> <Tuatarian> where is choosenim installed?
[05:07:12] <FromDiscord> <noow> that is it
[05:08:21] <FromDiscord> <noow> also, you should remove the path to 1.4.4 from PATH
[05:08:42] <FromDiscord> <noow> or else if it comes before the .nimble/bin, it will resolve it to 1.4.4
[05:08:49] <FromDiscord> <Tuatarian> it's already not there
[05:09:18] <FromDiscord> <noow> is C:/Users/Admin/.nimble/bin (i'm not sure if you have to use backslashes or forward slashes) in your PATH?
[05:10:41] <FromDiscord> <Tuatarian> my old nim version was in programfiles
[05:10:52] <FromDiscord> <Tuatarian> having difficulty deleting it because something is using some files
[05:11:02] <FromDiscord> <noow> you don't need to delete the nim install
[05:11:07] <FromDiscord> <noow> it's enough to remove the path to it from PATH
[05:11:28] <FromDiscord> <Tuatarian> it's installed in `C:\Program Files\nim-1.4.4`
[05:11:37] <FromDiscord> <Tuatarian> which I don't think it's supposed to be in right?
[05:11:50] <FromDiscord> <noow> what is installed in there
[05:11:54] <FromDiscord> <ynfle> Just put choosenim before that in path
[05:11:56] <FromDiscord> <Tuatarian> Nim 1.4.4
[05:12:01] <FromDiscord> <Tuatarian> that's not in path at all
[05:12:05] <FromDiscord> <Tuatarian> but somehow cmd still calls it
[05:12:20] <FromDiscord> <Tuatarian> ok now it works
[05:12:28] <FromDiscord> <Tuatarian> should I be using i386 or amd64?
[05:12:31] <FromDiscord> <ynfle> 👍
[05:12:31] <FromDiscord> <noow> you need to close and reopen the cmd to get the updated PATH var
[05:12:42] <FromDiscord> <noow> amd64 if your windows is 64 bit
[05:12:44] <FromDiscord> <Tuatarian> I thought launching new guake windows from windows terminal counts
[05:12:45] <FromDiscord> <ynfle> In reply to @iWonderAboutTuatara "should I be using": Whatever you architechture is
[05:12:46] <FromDiscord> <Tuatarian> but apparently not
[05:12:56] <FromDiscord> <Tuatarian> I have intel 64
[05:13:09] <FromDiscord> <noow> then amd64
[05:13:37] <FromDiscord> <Tuatarian> how do I switch it?
[05:13:58] <FromDiscord> <noow> no idea how you set it
[05:14:12] <FromDiscord> <noow> did choosenim ask you?
[05:14:17] <FromDiscord> <Tuatarian> nope
[05:14:26] <FromDiscord> <ynfle> It should detech automatically
[05:14:31] <FromDiscord> <ynfle> (edit) "detech" => "detect"
[05:14:43] <FromDiscord> <Tuatarian> it seems to have botched something then
[05:14:48] <FromDiscord> <Tuatarian> my pc is definitely x64
[05:15:01] <FromDiscord> <noow> your windows install could be 32 bit
[05:15:04] <FromDiscord> <Tuatarian> I have i5 7400
[05:15:05] <FromDiscord> <Tuatarian> don't think so
[05:15:06] <FromDiscord> <Tuatarian> I
[05:15:13] <FromDiscord> <Tuatarian> I've run x64 executables and such before
[05:15:18] <FromDiscord> <noow> weird then
[05:15:20] <FromDiscord> <Tuatarian>  https://media.discordapp.net/attachments/371759389889003532/940060631699177492/unknown.png
[05:15:26] <FromDiscord> <Tuatarian> from dxdiag
[05:15:53] <FromDiscord> <noow> sorry no idea where you can change it, i don't think we have a 32 bit option on linux
[05:16:21] <FromDiscord> <ynfle> How do you know nim insallation is 32?
[05:16:49] <FromDiscord> <Tuatarian> when I run nim -v
[05:16:55] <FromDiscord> <Tuatarian> Nim Compiler Version 1.6.2 [Windows: i386]
[05:17:12] <FromDiscord> <Tuatarian> apparently I need to put mingw64 somewhere annd add it to path
[05:18:13] <FromDiscord> <Tuatarian> where do I even download mingw 64?
[05:18:58] <FromDiscord> <Tuatarian> https://www.mingw-w64.org/downloads/
[05:19:06] <FromDiscord> <Tuatarian> which one of these do I download?
[05:19:12] <FromDiscord> <noow> if it has to be in PATH, i'd guess anywhere as long as you add wherever it is to PATH
[05:19:33] <FromDiscord> <Tuatarian> lmao my question was even more basic
[05:19:43] <FromDiscord> <Tuatarian> like literally where do I download the files
[05:19:46] <FromDiscord> <Tuatarian> is it on choco?
[05:20:12] <FromDiscord> <noow> MingW-W64-builds i'd guess
[05:20:25] <FromDiscord> <huantian> <https://nim-lang.org/install_windows.html>
[05:20:29] <FromDiscord> <huantian> there are mingw64 installs here
[05:20:41] <FromDiscord> <noow> ah true ^
[05:22:08] <FromDiscord> <Tuatarian> thanks
[05:22:20] <FromDiscord> <Arathanis> How could you make a decorator that just adds a proc to a sequence of procs? Like handler registration.
[05:23:25] <FromDiscord> <Elegantbeef> https://github.com/beef331/nettyrpc/blob/master/src/nettyrpc.nim#L229-L250 shows one way
[05:23:28] <FromDiscord> <Elegantbeef> Depending on what you're doing it can be very simple
[05:24:19] <FromDiscord> <Arathanis> you have a usage example for it?
[05:24:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OUj
[05:25:46] <FromDiscord> <Arathanis> ohhhh ok so its being used as a pragma, does that pass the body of the proc to the macro?
[05:25:56] <FromDiscord> <Arathanis> or the whole proc?
[05:26:09] <FromDiscord> <Elegantbeef> It passes the whole proc
[05:27:01] <FromDiscord> <Arathanis> let me chew on this for a while
[05:27:01] <FromDiscord> <Arathanis> thank you
[05:27:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/LuD
[05:27:37] <FromDiscord> <Elegantbeef> Whoops
[05:28:23] <FromDiscord> <Tuatarian> In reply to @huantian "<https://nim-lang.org/install_windows.html>": worked perfectly, thank you
[05:28:28] <FromDiscord> <Tuatarian> had to swap around a bit to reinstall 1.6.2
[05:28:34] <FromDiscord> <Tuatarian> but after that I have the x64 version
[05:28:36] <FromDiscord> <Tuatarian> also hello beef!
[05:30:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OUl
[05:30:39] <FromDiscord> <Elegantbeef> There is a simple version of what my nettyrpc does
[05:30:51] <FromDiscord> <Elegantbeef> Hello tuatara
[05:33:46] <FromDiscord> <Elegantbeef> @Arathanis\: ^ if you left 😛
[05:34:28] <FromDiscord> <noow> sent a code paste, see https://play.nim-lang.org/#ix=3OUm
[05:34:35] <FromDiscord> <noow> and to compile time add them
[05:35:19] <FromDiscord> <noow> also, this means that anyone subscribing has to import the package where procTable and subscribe are defined right
[05:35:36] <FromDiscord> <Elegantbeef> Nop
[05:36:18] <FromDiscord> <Elegantbeef> `bindSym` means `procTable` can stay private
[05:50:20] <FromDiscord> <noow> cool
[05:55:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3OUn
[05:56:55] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[05:57:12] <FromDiscord> <noow> ahh cool
[05:57:18] <NimEventer> New Nimble package! audius - Audius is a simple client library for interacting with the Audius free API., see https://github.com/ceebeel/audius
[05:57:35] <FromDiscord> <noow> CacheSeq is something new to me
[05:59:44] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[06:00:13] <FromDiscord> <Elegantbeef> `macrocache` is a cross module cache for nim code, so you can use it to cheat 😀
[06:00:46] <FromDiscord> <Elegantbeef> you can subscribe from different modules then do `emitProcArr` and access procedures that are even hidden
[06:04:32] *** Joins: rockcavera (~rc@192.12.112.99)
[06:04:32] *** Quits: rockcavera (~rc@192.12.112.99) (Changing host)
[06:04:32] *** Joins: rockcavera (~rc@user/rockcavera)
[06:25:40] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:25:59] <FromDiscord> <noow> woah nice
[06:26:22] <FromDiscord> <noow> sounds like a great power with great responsibility
[07:57:22] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:09:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[10:40:06] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[10:48:17] *** Joins: PMunch (~PMunch@user/pmunch)
[11:39:24] <NimEventer> New thread by Kobi: Is there support for a network stream?, see https://forum.nim-lang.org/t/8878
[12:06:35] <NimEventer> New post on r/nim by mavavilj: Nim has made me passionate about programming again., see https://reddit.com/r/nim/comments/smlecb/nim_has_made_me_passionate_about_programming_again/
[13:34:44] <FromDiscord> <xx_ns> such a positive post
[13:34:54] <FromDiscord> <Hamid_Bluri> hey, how can i convert an `int` to `cuint` (uint32) ?
[13:35:29] <FromDiscord> <Elegantbeef> `cuint myInt`
[13:36:31] <FromDiscord> <Hamid_Bluri> thanks beef
[13:36:34] <FromDiscord> <Hamid_Bluri> you're my hero
[13:37:10] <FromDiscord> <Hamid_Bluri> did you get paid to be here and answer questions in community?
[13:37:16] <FromDiscord> <Hamid_Bluri> (edit) "did" => "do"
[13:37:50] <FromDiscord> <Elegantbeef> Nope
[13:39:38] <FromDiscord> <xx_ns> only in exposure
[13:39:54] <FromDiscord> <Elegantbeef> not that
[13:40:07] <FromDiscord> <Rika> thats lewd
[13:41:10] <FromDiscord> <Elegantbeef> thanks rika that's my go to joke about "exposure"
[13:42:00] <PMunch> @Hamid_Bluri, of course you can call that any way you like so `cuint(myInt)`, `cuint myInt`, or `myInt.cuint`
[13:42:24] <FromDiscord> <Elegantbeef> Pmunch you arent getting paid anymore than me, dont put in the extra effort 😛
[13:43:57] <PMunch> I get paid in peers, the more people I can help getting started with Nim the more people I have to discuss Nim with in the future :P
[13:44:11] <FromDiscord> <Elegantbeef> Like i said same payment
[13:44:25] <FromDiscord> <xx_ns> that's what i said
[13:44:27] <FromDiscord> <xx_ns> exposure
[13:44:37] <FromDiscord> <xx_ns> ... exposure of Nim to other people
[13:44:41] <FromDiscord> <Elegantbeef> No my pants stay on
[13:44:46] <FromDiscord> <xx_ns> have it your way
[14:17:28] <FromDiscord> <konsumlamm> In reply to @hamidb80 "hey, how can i": note that a `cuint` may not always be 32 bits (it's only guaranteed to be at least 16 bits)
[14:18:27] <FromDiscord> <konsumlamm> (and an `int` may not always fit in a `uint32`, at least on 32 bit platforms)
[14:47:37] <FromDiscord> <Phil> In reply to @Elegantbeef "`cuint myInt`": these c integer types are always only one letter away from an insult
[14:47:41] <FromDiscord> <Phil> That thought keeps me up during work
[14:53:26] <FromDiscord> <Rika> good, its not a good idea to sleep at work
[14:53:30] *** Joins: billypilgrim (~alex@cpc83657-brig20-2-0-cust303.3-3.cable.virginm.net)
[14:54:46] <FromDiscord> <Phil> Every line of code I don't write is one that can't be buggy
[14:56:28] <billypilgrim> Howdy nimsters
[14:56:41] <FromDiscord> <Phil> Chers
[14:56:43] <FromDiscord> <Phil> (edit) "Chers" => "Cheers"
[14:57:34] <billypilgrim> I'm busy hacking something together which calls a nimscript using the compiler/nimeval package
[14:57:59] <billypilgrim> But the problem is that the methods which are supposed to be present in nimscripts (e.g. cd, exec etc.) don't seem to work
[14:58:22] <billypilgrim> Even if I manually add "import nimscript" to the script, calling e.g. exec seems to just be a no-op
[14:58:45] <billypilgrim> Am I right in thinking I'd have to pick the compiler apart to get these builtin functions in my interpreter?
[15:03:03] <FromDiscord> <zidsal> It's simple let's make a nft of the nim logo and pay helpers in nft. To the moon!
[15:11:20] <PMunch> @billypilgrim, not sure if it would solve your problem. But have you tried doing it with nimscripter? https://github.com/beef331/nimscripter
[15:12:47] <PMunch> @Phil, haha, we should have a template in Nim `template cunt*(x: varargs[untyped]): untyped = {.error: "What the fuck did you just call me?!".}`
[15:13:02] <PMunch> So if you ever spell it wrong the compiler will seem mad at you
[15:13:11] <FromDiscord> <Phil> I support this RFC
[15:13:14] <FromDiscord> <Phil> Somebody call ARAQ
[15:13:18] <FromDiscord> <Phil> (edit) "ARAQ" => "Araq"
[15:13:23] <NimEventer> New post on r/nim by mavavilj: Any idiomatic ways to do R-style seq in Nim?, see https://reddit.com/r/nim/comments/smo9e7/any_idiomatic_ways_to_do_rstyle_seq_in_nim/
[15:14:45] <billypilgrim> @PMunch Thanks! That does look like it could be exactly what I'm looking for :-D
[15:22:25] *** Joins: rockcavera (~rc@192.12.112.99)
[15:22:25] *** Quits: rockcavera (~rc@192.12.112.99) (Changing host)
[15:22:25] *** Joins: rockcavera (~rc@user/rockcavera)
[15:25:57] *** Quits: billypilgrim (~alex@cpc83657-brig20-2-0-cust303.3-3.cable.virginm.net) (Quit: Konversation terminated!)
[15:27:21] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://paste.rs/Q7i
[15:30:40] <FromDiscord> <Phil> Defined just means the flag is set I think, so you need the flag value, hmmmm
[15:32:31] <FromDiscord> <Phil> I'm reasonably certain that pmunch recalls how to get a flags value
[15:33:04] <FromDiscord> <xflywind> In reply to @hamidb80 "how can I check": use `compileOption("threads")`
[15:33:18] <FromDiscord> <xflywind> (edit) "`compileOption("threads")`" => "`echo compileOption("threads")`"
[15:34:45] <FromDiscord> <Hamid_Bluri> thanks
[15:35:13] <FromDiscord> <Phil> The docs: https://nim-lang.org/docs/system.html#compileOption,string,string
[15:36:16] <PMunch> @Phil, I didn't remember and @xflywind answered by the time I had looked it up :P
[15:37:00] *** Joins: billypilgrim (~alex@cpc83657-brig20-2-0-cust303.3-3.cable.virginm.net)
[15:37:49] <FromDiscord> <Phil> Impossible!
[15:38:02] <billypilgrim> @PMunch: Hmm... after upgrading my nim to v1.6.2 I now get this message when trying to use nimscripter: "Error: cannot open file: compiler/nimeval"
[15:38:13] <billypilgrim> Does choosenim not install the compiler stuff by default?!
[15:39:55] <PMunch> Hmm, it should
[15:41:17] <FromDiscord> <ynfle> In reply to @billypilgrim "Does choosenim not install": It doesn't install the compiler nimble package. Try `nimble install compiler`
[15:43:20] <billypilgrim> Ohhh that did the trick. Thanks!
[15:49:05] <billypilgrim> Heh I'm still running up against my original problem where cd and exec etc. don't actually do anything 🤷
[15:55:10] <FromDiscord> <haolian9 (高浩亮)> is there an idomic way to tell whether a file is unix socket or not? like `pathlib.Path("path").is_socket()`;↵i am planning to use `posix_utils.stat`
[15:58:21] <PMunch> haolian9_(高浩亮), you do it the same way you would in C with Posix
[15:59:02] <PMunch> `var stat: Stat; discard fstat(myfile, stat); echo S_ISSOCK(stat.mode)`
[16:05:59] <FromDiscord> <haolian9 (高浩亮)> thanks, it's sad that i am not familiar with C↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[16:07:05] <PMunch> In general for the low-level Posix stuff you just do it with the low-level posix constructs. Knowing a little C helps, but it's not really required
[16:07:27] <FromDiscord> <Phil> I've only been exposed to C yesterday
[16:07:34] <FromDiscord> <Phil> The PTSD development has been steadily going since then
[16:10:23] <PMunch> Oh come on, it's not that bad
[16:11:30] <FromDiscord> <Phil> As far as I can tell, I can't safely distinguish between a pointer to a pointer to a single number and a pointer to a pointer of an array. Both go ptr ptr uint8 as far as I understood yesterday
[16:12:38] <FromDiscord> <Phil> Though why on earth I go ptr ptr has still not revealed itself to me
[16:13:57] <PMunch> Yes, in C an array is essentially just a pointer and the length is up to you to know.
[16:14:06] <PMunch> So `ptr int` and `int[]` is the same thing
[16:15:04] <PMunch> And `myIntArr[10]` is just shorthand for something like `cast[ptr int](cast[int](myIntArr.addr) + sizeof(int) * 10)[]`
[16:15:22] <PMunch> Of course you don't need that casting in C, because you can do arithmetic directly on pointers
[16:16:18] <PMunch> `ptr ptr` is generally used where we in Nim would use `var myObject` in a procedure call. You pass in the location of a pointer to something, and the procedure you call can then change the pointer you have for another one.
[16:18:47] <PMunch> So `int myInt; something(&myInt)` where `something(int* x)`, then `something` could change the integer behind the pointer and voila `myInt` has changed after your call. Since C returns everything by value by default this means you don't have to copy large object from the stack frame of `something` into the return field, and you don't have to `malloc` and `free` memory you got from a pointer.
[16:19:02] <PMunch> Not sure if that makes any sense :P
[16:26:44] <FromDiscord> <demotomohiro> `int` type also used to pass array of `int`. In that case, most of C functions have length parameter.
[16:27:11] <FromDiscord> <demotomohiro> And `int` can be used to pass array of pointer to int.
[16:27:43] <FromDiscord> <Rika> or the inverse
[16:27:48] <FromDiscord> <Rika> or could be double array
[16:27:56] <FromDiscord> <Rika> or could just be double pointer too
[16:28:04] <FromDiscord> <demotomohiro> So, you have to read refence or manual carefully to use C functions.
[16:28:38] <FromDiscord> <Rika> its not a great system but this is what you had to do when your computers had less ram than our current CPU has L3 cache
[16:28:53] <FromDiscord> <Rika> (im not sure if that exaggeration is true but i'd bet it is...)
[16:29:27] <FromDiscord> <Phil> With AMD L3 caches it is true for sure
[16:30:10] <FromDiscord> <Phil> They have triple digits L3 cache
[16:30:20] <FromDiscord> <Phil> (edit) "They have triple digits ... L3" 03added "MB"
[16:31:29] <FromDiscord> <Phil> They started out with RAM measured in KB
[16:32:16] <FromDiscord> <Phil> We have more L1 cache nowadays than the earliest computers had RAM total
[16:32:50] <PMunch> It's pretty crazy
[16:33:10] <PMunch> Also something which is fun about micro-controller programming. You have to basically fit your program into L1 cache
[16:33:29] <FromDiscord> <Phil> One of the things that was crazy for me to learn
[16:33:37] <FromDiscord> <Phil> And which I learned before I ever touched C or anything like it
[16:33:42] <FromDiscord> <Phil> It doesn't matter how shitty your algo is
[16:33:46] <FromDiscord> <Phil> If it fits in L1 cache it's fast
[16:34:09] <FromDiscord> <Phil> The sheer scale of difference that the effing cache makes is crazy
[16:34:29] <FromDiscord> <Phil> (edit) "It doesn't matter how shitty your algo is ... " 03added "(baring exponential complexity)"
[16:35:42] <FromDiscord> <demotomohiro> Modern CPU has large cache means modern memory is much slow compared to speed of CPU.
[16:38:02] <PMunch> https://i.stack.imgur.com/a7jWu.png
[16:38:19] <FromDiscord> <Rika> wow an L1 ref is half a ns??
[16:38:28] <FromDiscord> <Rika> thats honestly fucking insane
[16:38:30] <PMunch> You get about 200 L1 cache lookups for a single main memory reference
[16:39:46] <PMunch> Those are numbers from 2010 by the way, not sure if they've gotten faster or slower since then
[16:45:34] <FromDiscord> <congusbongus> probably about the same, we got more cores and faster interconnects since then
[16:45:43] <FromDiscord> <Phil> There's a pretty decent talk about the difference of caching to algo speed
[16:45:51] <FromDiscord> <Phil> I'll have to see if I can find it again
[16:47:11] <FromDiscord> <ynfle> In reply to @Isofruit "I'll have to see": I'd be interested in that. thanks
[16:49:00] <FromDiscord> <Phil> In reply to @ynfle "I'd be interested in": You're in luck! https://www.youtube.com/watch?v=WDIkqP4JbkE
[16:49:07] <FromDiscord> <Phil> Scott Meyers was the presenter
[16:50:07] <FromDiscord> <ynfle> In reply to @Isofruit "You're in luck! https://www.youtube.com/watch?v=WDI": Thanks
[16:50:10] <FromDiscord> <Phil> It starts with talking about Multithreading
[16:50:21] <FromDiscord> <Phil> And why it is to be taken with care and can be useless
[16:50:43] <FromDiscord> <Phil> And moves on to why smart optimization for caching can be a more powerful tool to speed up your algo then multithreading
[16:51:43] <FromDiscord> <Phil> Starting from 19:00 there's a nice visual representation of cache speeds
[16:53:07] <FromDiscord> <Phil> Though it's reoccurring so eh
[17:00:26] <FromDiscord> <Phil> God damn 2014 is now almost 8 years ago
[17:07:58] <FromDiscord> <Rika> haha shh
[17:14:12] <FromDiscord> <Phil> You've got no reason to act like this, you're barely 20!
[17:14:22] <FromDiscord> <Phil> You were tiny when Lotr came out!
[17:14:42] <FromDiscord> <Phil> Aaaaaaaaand now I feel old
[17:14:56] <FromDiscord> <Phil> (edit) 04removed "you're barely 20!"
[17:15:01] <FromDiscord> <Phil> (edit) "this," => "this"
[17:36:22] <FromDiscord> <Professor Actual Factual> sent a long message, see http://ix.io/3OWf
[17:36:52] <FromDiscord> <Rika> i mean
[17:36:58] <FromDiscord> <Rika> what does a benchmark really signify?
[17:37:32] <FromDiscord> <Rika> the speed of code right? so you're testing the implementation mainly, not really everything else, thats just external factors
[17:37:40] <FromDiscord> <Rika> did someone actually post something to hn?
[17:38:51] <FromDiscord> <Professor Actual Factual> I agree with you rika.↵Benchmarks mean very little in this context, but its usually get posted on forums and people can get a bit fanboyish there which i dislike. Lol.↵Ya check hn front page
[17:39:00] <FromDiscord> <Rika> i dont want to
[17:39:07] <FromDiscord> <Rika> i just wanted to know if someone did
[17:40:12] <FromDiscord> <Rika> i cant tell you if either of these are equivalent, but for the most part they seem like they are?
[17:41:09] <FromDiscord> <Rika> well whatever, i dont want to care
[17:41:50] <FromDiscord> <Professor Actual Factual> Ya i could spend time pointing out the mistakes, but i think your approach might be best about not giving the post attention
[17:42:08] <FromDiscord> <Rika> if you want to bring out the big guns maybe ask mratsim to disassemble the whole argument 😛
[17:42:13] <FromDiscord> <enthus1ast> can you share the hn post?
[17:42:53] <FromDiscord> <Rika> no
[17:42:58] <FromDiscord> <enthus1ast> kk
[17:42:59] <FromDiscord> <Rika> sharing it is not a good idea
[17:43:12] <FromDiscord> <Rika> hn has "safeguards" against those coming from a shared link
[17:43:49] <FromDiscord> <Professor Actual Factual> Its number 6 on front page rn. And as expected reading the comments people are confused about the results
[17:44:14] <FromDiscord> <enthus1ast> yeah the annual "my lang is faster than your's, since yours is just TRANSPILED" post
[17:44:54] <FromDiscord> <enthus1ast> i guess \:)
[17:45:54] <FromDiscord> <Rika> if you really want, just ask someone who knows both well
[17:46:02] <FromDiscord> <Rika> ive mentioned one person already
[17:46:46] <FromDiscord> <Rika> i really shouldnt have read this, i already have a lot on my plate so more stress is not ideal
[17:48:09] <FromDiscord> <Phil> For me it's a shame I'm not experienced enough yet to actually write "bollocks" and back it up with knowledge =/
[17:48:33] <FromDiscord> <Rika> i dont know rust enough to deliberate the differences
[17:48:47] <FromDiscord> <Rika> nor to dispel the statements being made
[17:49:09] <FromDiscord> <Professor Actual Factual> Im experienced with performance optimization in nim, but i do not want to bother because i do not like multi lang benchmarks that take themselves too seriously
[17:49:11] <FromDiscord> <Rika> then again any statements being made on nim only i could prolly do, then again stress 🙂
[17:49:29] <FromDiscord> <Rika> just upvote those that talk about "testing the code and not the language"
[17:49:38] <FromDiscord> <Rika> what does it mean to benchmark the language anyway?
[17:49:43] <FromDiscord> <Phil> But the entire ` Nim has runtime overhead whereas C and Rust do not. ` I'm not sure how far that is true, but even then I'd argue you can remove that overhead, you have the option
[17:49:49] <FromDiscord> <Rika> i could write horrible rust code and amazing nim code then bam easy
[17:50:16] <FromDiscord> <Rika> In reply to @Isofruit "But the entire `": runtime overhead like the GC
[17:50:24] <FromDiscord> <Rika> you can disable it of course
[17:50:28] <FromDiscord> <Phil> Yeah, afaik you can literally disable it
[17:50:31] <FromDiscord> <Rika> or turn ARC on, which is more in line with rust
[17:50:36] <FromDiscord> <Rika> so would be more """fair"""
[17:50:40] <FromDiscord> <Rika> whatever that would mean
[17:50:49] <FromDiscord> <Phil> At that point when you have a language that allows you literally anything
[17:50:54] <FromDiscord> <Phil> How fair is a comparison?
[17:51:01] <FromDiscord> <Rika> well yeah
[17:51:04] <FromDiscord> <Phil> I can go full C or not give a shit like in Python
[17:51:08] <FromDiscord> <Rika> how do you determine if something is fair or not
[17:51:18] <FromDiscord> <Rika> what are the rules of this game
[17:51:23] <FromDiscord> <Rika> they are ill defined
[17:51:26] <FromDiscord> <Rika> anyway
[17:51:50] <FromDiscord> <Phil> I agree, I was approaching it from the point that typically writing insanely complicated memory management code was either part of the language or not
[17:51:54] <FromDiscord> <enthus1ast> what runtime overhead btw?
[17:52:33] <FromDiscord> <Rika> gc
[17:52:37] <FromDiscord> <Phil> Nim is the only language I know (yeah, limited language knowledge on my head) that allows you to choose between both
[17:52:39] <FromDiscord> <Rika> thats technically overhead
[17:52:43] <FromDiscord> <enthus1ast> yea but with arc and orc?
[17:52:50] <FromDiscord> <Rika> i did mention that
[17:52:51] <FromDiscord> <enthus1ast> its the same as rust or?
[17:52:56] <FromDiscord> <Rika> not exactly for orc
[17:53:03] <FromDiscord> <Rika> not sure for arc but i think its close for arc
[17:53:09] <FromDiscord> <Rika> not exactly either but closer than orc
[17:53:15] <FromDiscord> <Rika> orc is more akin to rust with Rc()
[17:53:28] <FromDiscord> <Rika> i guess orc isnt needed for any of these cases though
[17:53:33] <FromDiscord> <Rika> guess -> assume
[17:53:39] <FromDiscord> <Rika> i didnt read into them too deeply
[17:53:44] <FromDiscord> <enthus1ast> yeah
[17:54:03] <FromDiscord> <Rika> again, what's fair game for this benchmark?
[17:54:07] <FromDiscord> <Rika> defaults?
[17:54:10] <FromDiscord> <Rika> code by beginners?
[17:54:14] <FromDiscord> <Rika> heavy optimisations?
[17:54:22] <FromDiscord> <Rika> as equal to each other as possible?
[17:54:32] <FromDiscord> <Rika> theyre all exclusive in one way from each other
[17:54:41] <FromDiscord> <Rika> and each combination is valid in some way as well
[17:54:48] <FromDiscord> <Rika> again, ill defined
[18:04:02] <FromDiscord> <Phil> This kinda reminds me of the time when I went on a masochistic googling spree on what SO thought about java speed
[18:04:23] <FromDiscord> <enthus1ast> slow EVERYONE knows this \:D
[18:04:56] <FromDiscord> <enthus1ast> (just kidding btw)
[18:04:58] <FromDiscord> <Rika> java is pretty w/e
[18:05:06] <FromDiscord> <Rika> the gc is still kinda fucked afaik
[18:05:18] <FromDiscord> <Rika> gotta swap it to some other kinda gc
[18:05:25] <FromDiscord> <Rika> otherwise i think its good
[18:05:35] <FromDiscord> <Rika> still, the caveats of it doesnt help
[18:07:30] <FromDiscord> <Phil> SO was pretty much "Java is super fast now, it's no longer bad"
[18:07:39] <FromDiscord> <Phil> Then you go to Stackexchange.softwaredesign
[18:08:04] <FromDiscord> <Phil> "Java has been time and time demonstrated to be fucked up in terms of performance and its GUI libraries are shite"
[18:09:55] <nrds> <02enyc99> ACTION meows
[18:09:59] <FromDiscord> <Phil> It was pretty entertaining
[18:12:24] <FromDiscord> <Phil> What I do not comprehend is that java has so much money behind them
[18:12:32] <FromDiscord> <Phil> Where is the fundamental flaw that just makes their GC suck?
[18:13:17] *** Joins: arkurious (~arkurious@user/arkurious)
[18:24:18] <FromDiscord> <--HA--> Is it generally ok to use the `defer` statement? I've been reading about some possible issues with it.
[18:31:11] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[18:45:21] <FromDiscord> <ynfle> In reply to @--HA-- "Is it generally ok": What are you using it for?
[18:46:38] <FromDiscord> <--HA--> Basically like in the example in the manual. Open a file, defer the close.
[18:47:56] <FromDiscord> <--HA--> But if it gets removed in the future I'd rather be using try/finally from the beginning I guess.
[18:49:22] <FromDiscord> <Goel> @Professor Actual Factual https://github.com/kostya/benchmarks
[18:52:46] <FromDiscord> <Goel> @Phil What about D's GC? I was tempted more then once to give it a try but reading their forum most of their complaints is about their old (80's) design of GC with bad performance and the main devs are not willing to change that, exactly the opposite of was is doing Nim (fortunatly). In my opinion of all the GC prog languages Nim is the most performant
[18:53:57] <FromDiscord> <Phil> In reply to @Goel "<@!180601887916163073> What about D's": Never researched anything about D whatsoever
[18:53:58] <FromDiscord> <Phil> Sorry
[18:54:31] <FromDiscord> <Phil> All I can tell you is that for some reason java manages to live up in performance in select singular cases
[18:54:50] <FromDiscord> <Phil> But then when it goes across the board suddenly performance drops back to mid levels as opposed to excellent
[18:57:12] <FromDiscord> <Waldecir Santos> Is it possible to define a type and set is values, I've tried this but no luck
[18:57:13] <FromDiscord> <Waldecir Santos>  https://media.discordapp.net/attachments/371759389889003532/940267462585360394/unknown.png
[19:01:05] <FromDiscord> <Rika> defaults? no(t yet)
[19:03:31] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[19:06:17] <FromDiscord> <Phil> Setting defaults on an object type you say
[19:06:27] <FromDiscord> <Phil> Allow me to introduce you to the holy package
[19:06:30] <FromDiscord> <Phil> The package to always include
[19:06:32] <FromDiscord> <Phil> Constructor
[19:07:17] <FromDiscord> <Phil> For I can not be bothered to write construction procs for 40 types with 10 fields each
[19:07:19] <FromDiscord> <Phil> https://github.com/beef331/constructor
[19:09:00] <FromDiscord> <Phil> Now with really dope flags so you can choose if you want to a) get the generated construction proc exported and b) get signature as new(t: typedesc[MyType]): as opposed to newMyType()
[19:09:54] <FromDiscord> <Waldecir Santos> haha nice
[19:10:43] *** Joins: rockcavera (~rc@192.12.112.99)
[19:10:43] *** Quits: rockcavera (~rc@192.12.112.99) (Changing host)
[19:10:43] *** Joins: rockcavera (~rc@user/rockcavera)
[19:11:08] <NimEventer> New thread by Didlybom: Hacker News discussion abou the recently discussed Rust vs Nim performance comparison, see https://forum.nim-lang.org/t/8879
[19:16:06] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[19:17:45] *** Joins: tiorock (~rc@192.12.112.99)
[19:17:45] *** Quits: tiorock (~rc@192.12.112.99) (Changing host)
[19:17:45] *** Joins: tiorock (~rc@user/rockcavera)
[19:17:45] *** rockcavera is now known as Guest1221
[19:17:45] *** tiorock is now known as rockcavera
[19:21:05] *** Quits: Guest1221 (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[19:32:59] <FromDiscord> <--HA--> Is it correct to create my own exception like this `type MyException = object of CatchableError`?
[19:46:05] <anddam> I installed nimgl package and opengl from https://github.com/nimgl/opengl , then tried tests/test.nim from https://github.com/nimgl/imgui and got "/home/anddam/Development/GUI/nimgl-imgui-git/src/imgui/impl_opengl.nim(11, 23) Error: cannot open file: nimgl/opengl"
[19:46:10] <anddam> what am I doing wrong?
[20:00:31] <FromDiscord> <Arathanis> sent a code paste, see https://play.nim-lang.org/#ix=3OXf
[20:09:38] <FromDiscord> <demotomohiro> @anddam Did you installed it with nimble?
[20:12:37] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:13:58] *** Joins: rockcavera (~rc@192.12.112.99)
[20:13:58] *** Quits: rockcavera (~rc@192.12.112.99) (Changing host)
[20:13:58] *** Joins: rockcavera (~rc@user/rockcavera)
[20:43:27] *** Joins: tiorock (~rc@192.12.112.99)
[20:43:27] *** Quits: tiorock (~rc@192.12.112.99) (Changing host)
[20:43:27] *** Joins: tiorock (~rc@user/rockcavera)
[20:43:27] *** rockcavera is now known as Guest1059
[20:43:27] *** Quits: Guest1059 (~rc@user/rockcavera) (Killed (zinc.libera.chat (Nickname regained by services)))
[20:43:27] *** tiorock is now known as rockcavera
[20:52:13] *** Joins: PMunch (~PMunch@user/pmunch)
[20:57:37] *** Joins: tiorock (~rc@192.12.112.99)
[20:57:37] *** Quits: tiorock (~rc@192.12.112.99) (Changing host)
[20:57:37] *** Joins: tiorock (~rc@user/rockcavera)
[20:57:37] *** rockcavera is now known as Guest566
[20:57:37] *** Quits: Guest566 (~rc@user/rockcavera) (Killed (tantalum.libera.chat (Nickname regained by services)))
[20:57:37] *** tiorock is now known as rockcavera
[21:16:48] <PMunch> My talk is now live: http://bofh.nikhef.nl/events/FOSDEM/2022/D.nim/nim_ngmicrocontrollers.webm
[21:24:44] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[21:25:49] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[21:32:26] <anddam> demotomohiro: yes I did
[21:32:42] <anddam> demotomohiro: "it" being nimgl/opengl right?
[21:32:54] <anddam> too bad I cannot tab-complete nicks carried from discord
[21:34:18] *** Quits: billypilgrim (~alex@cpc83657-brig20-2-0-cust303.3-3.cable.virginm.net) (Quit: Konversation terminated!)
[21:37:06] <PMunch> anddam, with a little bit of scripting magic you can ;)
[21:37:54] <PMunch> I have this in a script: http://ix.io/3OXI that I load into HexChat
[21:38:08] <PMunch> And it strips the FromDiscord names and uses those as the nick instead
[21:38:21] <PMunch> Which means I get the nice colours back, and that I can tab complete names :)
[21:38:23] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[21:38:51] <FromDiscord> <geekrelief> I'm using weave https://github.com/mratsim/weave while going through https://raytracing.github.io/books/RayTracingInOneWeekend.html  Is there a way to avoid having to put the `gcsafe` pragma all over my procs?
[21:51:04] <FromDiscord> <Phil> Unrelated sidenote as this just occurred to me as something that could be a pretty common need
[21:51:29] <FromDiscord> <Phil> Is there a "get" proc or sth like it for the variant field of object variants?
[21:51:40] <FromDiscord> <Phil> If not, has anyone ever made a mini lib for that?
[21:52:57] <FromDiscord> <vindaar> what would that look like in general? your variant object may have multiple fields in a single branch. And how do you deal with the different types (i.e. the return type of that get procedure) in general?
[21:53:16] <FromDiscord> <Phil> Ohhh fair, you can do more than just a single field definition
[21:53:21] <FromDiscord> <Phil> I was only considering my own usecases
[21:53:36] <FromDiscord> <Phil> I typically only do object variants where every case of an enum defines a single field
[21:54:31] <FromDiscord> <Phil> Which means you could have a template (return "untyped") that generates a switch statement over all enum possibilities to return the field defined for that kind
[21:54:45] <FromDiscord> <Phil> But as I'm writing this I'm realizing this sounds like macro stuff
[21:54:49] <FromDiscord> <vindaar> fair enough for that. I've written that kind of thing get thing before, but it always comes with constraints. So not sure how well that generalizes to be useful
[21:55:36] <FromDiscord> <Phil> I mean, I'd save like 50 lines of code... over the course of my project that spans several thousands but still !
[21:56:54] <FromDiscord> <Phil> ~~I wonder if beef wants to add constructors for object variants~~
[21:57:09] <FromDiscord> <Phil> (edit) "variants~~" => "variants to his constructor package~~"
[21:57:33] <FromDiscord> <vindaar> if you go the template route you just end up with your code in multiple branches. You can't return anything from that branch without a type conversion. In addition (in general) you have the problem that you cannot even force a type conversion as `T(foo)` in general↵(@Phil)
[21:57:52] <FromDiscord> <geekrelief> In reply to @geekrelief "I'm using weave https://github.com/mratsim/weave": nvm, I must be accessing a global somewhere.  Would macros affect the `gcsafe`ness of a proc?
[21:58:37] <FromDiscord> <Phil> Not in general, I've got tons of procs (I think) that have macros that are gcsafe. HOWEVER if the macro generates code that does an unsafe thing that'll naturally be unsafe
[21:58:49] <FromDiscord> <Phil> (edit) "that" => " andthat"
[21:58:53] <FromDiscord> <Phil> (edit) " andthat" => "and that"
[22:00:29] <FromDiscord> <geekrelief> right, I guess it'd be nice to have a better way to hunt down why the compiler thinks a proc is unsafe.
[22:00:41] <FromDiscord> <Phil> Actually, nevermind the "I think", I know that I have at least some macro usage that is in gcsafe procs
[22:00:51] <FromDiscord> <vindaar> this file is a good example of why it's hard to provide something really useful in general\:↵https://github.com/SciNim/Datamancer/blob/master/src/datamancer/column.nimVery few of these templates & procs that `case` could reasonably be confined into some generic "get" thing
[22:09:05] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3OXR
[22:11:01] <FromDiscord> <Tetralux> In reply to @Isofruit "I typically only do": Can you put the common stuff in the object type, rather that in case statement?
[22:11:42] <FromDiscord> <Phil> In reply to @Tetralux "Can you put the": I don't think I follow
[22:13:55] <FromDiscord> <Tetralux> sent a code paste, see https://play.nim-lang.org/#ix=3OXV
[22:14:08] <FromDiscord> <Tetralux> (edit) "https://play.nim-lang.org/#ix=3OXV" => "https://play.nim-lang.org/#ix=3OXW"
[22:15:11] <FromDiscord> <Phil> sent a code paste, see https://play.nim-lang.org/#ix=3OXX
[22:24:07] <FromDiscord> <demotomohiro> @anddam I think "nimgl/opengl" refer to the module in https://github.com/nimgl/nimgl.↵So I think you need to install it with `nimble install nimgl`.↵It contains opengl, imgui and glfw module.
[22:28:13] <anddam> demotomohiro: I installed both, one time opengl first then nimgl, the other time vice-versa 
[22:28:39] <anddam> I still do not understand the logic of having those "subpackages" not in nibmle as well, seems one could avoid collision (if any) with proper naming
[22:28:56] <anddam> or have package nimgl depends on other packages like imgui, opengl and glfw
[22:29:41] <anddam> oh PMunch left, I was going to do something like that as well
[22:29:51] <anddam> obviously not as structured and not in nim (yet)
[22:38:30] <FromDiscord> <demotomohiro> It seems NimGL provides OpenGL, Vulkan, imgui and glfw as one package for convinience. But each of them are maintained in separate repository.
[22:39:36] <anddam> yes, but those separate repository (whence I installed nimgl/imgui from) says they have to be installed using "nimble https://reponame" and this is the bit I do not understand
[22:39:38] <anddam> anyway
[22:39:54] <anddam> as long as I can make this work I am happy, I can grind the details of why things work later
[22:41:59] <FromDiscord> <Waldecir Santos> can someone share a good hands on tutorial about Macros ? I've checked some but still black magic to me and I'll need that for "simulating" how django declare models
[22:43:37] <anddam> I watched the "Nim nuggets" video, intereseting and all but I think I am missing the point of having (almost) all the language available at compile time
[22:44:06] <anddam> to me it seems just like moving execution to another context, and I miss the big advantage the speaker was trying to make
[22:44:06] <FromDiscord> <Waldecir Santos> This one https://www.youtube.com/watch?v=d2VRuZo2pdA&t=1301s ?
[22:44:25] <anddam> yep
[22:45:35] <NimEventer> New post on r/nim by obfuscate: Nim FOSDEM 2022 videos are up, see https://reddit.com/r/nim/comments/smy766/nim_fosdem_2022_videos_are_up/
[22:45:47] <FromDiscord> <Waldecir Santos> Thank you I will check, any other resource ?
[22:45:50] <anddam> I figure that makes the macro system powerful, and it allows the C++ interop he was talking about since you have templates
[22:46:09] <anddam> Waldecir Santos: are you asking me?
[22:46:36] <anddam> you got it wrong, I am the one making questions, I am almost at the newbiest level here
[22:46:57] <FromDiscord> <Waldecir Santos> I'm asking anyone, really.
[22:48:36] <FromDiscord> <Waldecir Santos> For me I'd like to mimic `python descriptors` in nim, and seems like macros are the answer but I'm not sure.
[22:48:51] <FromDiscord> <demotomohiro> Did you read https://dev.to/beef331/demystification-of-macros-in-nim-13n8
[22:48:58] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/tut3.html
[22:49:13] <FromDiscord> <Waldecir Santos> I did not, thank you looks awesome
[22:49:45] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/macros.html
[22:51:07] <FromDiscord> <Waldecir Santos> Yeah I checked that one, but like I said still seems like black magic, maybe the first link you share is what I need
[23:07:52] *** Quits: arkurious (~arkurious@user/arkurious) (*.net *.split)
[23:07:52] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[23:07:52] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (*.net *.split)
[23:07:52] *** Quits: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3) (*.net *.split)
[23:07:52] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[23:08:27] <FromDiscord> <Tetralux> In reply to @Isofruit "Yeah you can do": Maybe I misunderstood, but you mentioned about object variants with common data?
[23:09:05] <FromDiscord> <Phil> No common data, more there could be a common need
[23:09:27] <FromDiscord> <Phil> As in, it feels like a thing that could be generally useful in a lot of areas for a lot of people
[23:10:18] <FromDiscord> <Phil> To just have an object variant (where every kind defines a single field) and be able to get a "get" proc generated for it that just goes through every possible kind and returns the appropriate defined field
[23:12:04] <Amun-Ra> the first fosdem video is offline
[23:12:25] *** Joins: arkurious (~arkurious@user/arkurious)
[23:12:25] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[23:12:25] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[23:12:25] *** Joins: crem1 (~crem@2a02:169:160a:1:9b30:962e:76eb:4bb3)
[23:12:25] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[23:13:00] <FromDiscord> <Phil> Nuuuuu
[23:13:05] <FromDiscord> <Phil> Why?
[23:16:13] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Ping timeout: 250 seconds)
[23:16:14] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (Ping timeout: 240 seconds)
[23:16:42] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 260 seconds)
[23:16:43] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (Ping timeout: 260 seconds)
[23:47:45] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[23:53:42] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
