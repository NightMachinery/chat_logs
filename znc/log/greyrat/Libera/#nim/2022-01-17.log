[00:11:08] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[00:15:19] <yann-kaelig>  I'm pretty suprise that the size of Nim binary from a simple "Hello World!" is a lot bigger than C++ even after passing the option -d:release. 87K for Nim and 16K for C++
[00:17:58] <Amun-Ra> nim c -d=release --opt=size --passL=-s hello.nim && ls -lh hello
[00:18:00] <Amun-Ra> 35K
[00:18:26] <nrds> <06Prestige99> --gc:arc made it smaller on mine as well
[00:18:44] <Amun-Ra> right, 27K
[00:19:06] <nrds> <06Prestige99> 23k with danger
[00:35:32] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[00:37:53] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[00:43:10] <yann-kaelig> what type I have to use if I want something similary as double pi { 3.1415926 }; in Nim? 
[00:43:41] <yann-kaelig> I can not find something about that on the doc https://euantorano.gitbooks.io/nim-docs/content/syntax/variables.html
[00:44:22] <euantorano> yann-kaelig: that book is very old and nowhere near complete I‚Äôm afraid
[00:45:39] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[00:48:37] <euantorano> If you just want pi, try the math module: https://nim-lang.org/docs/math.html#PI
[00:49:53] <yann-kaelig> euantorano: not only pi, it was an example,  Iwas asking in fact about floating point
[00:50:53] <yann-kaelig> number
[00:50:59] <euantorano> Well float32 and float64 are built in
[00:51:13] <euantorano> There‚Äôs also the std/complex module too: https://nim-lang.org/docs/complex.html
[00:52:01] <euantorano> Float32 and 64 are defined in system: https://nim-lang.org/docs/system.html#float32
[00:53:57] <euantorano> So you can do things like this: https://play.nim-lang.org/#ix=3MuV
[01:02:22] <yann-kaelig> wouaou! Very nice. That was a very good idea to learn Nim with C++. I can see only in my simple cases how Nim is very interesting language, easy to write and to read + more other  complicated things I will discover in a future
[01:02:47] <FromDiscord> <‚Éü‚Éü> i found it very hard to read
[01:03:54] <FromDiscord> <evoalg> In reply to @yann-kaelig "I can not find": The docs / tutorials on the nim website are (should be) up to date
[01:05:47] <FromDiscord> <Yardanico> In reply to @yann-kaelig "I'm pretty suprise that": Have you tried striping the binary?
[01:06:36] <yann-kaelig> No, to be honest I just applied what the output of the compilation gives me , which is the -d:release option
[01:07:20] <FromDiscord> <evoalg> In reply to @Yardanico "Have you tried striping": How does one do this?
[01:07:53] <FromDiscord> <Yardanico> strip -s binary
[01:08:42] <FromDiscord> <Yardanico> In reply to @yann-kaelig "No, to be honest": fair enough, for a more direct comparison with C/C++ you can use -d:danger
[01:10:34] <FromDiscord> <demotomohiro> Nim do runtime checks in default. -d:danger option disable all runtime checks.
[01:12:24] <FromDiscord> <demotomohiro> I forget how to enable/disable runtime checks in C++. Maybe -DDEBUG to enable or -DNDEBUG to disabple runtime checks.
[01:12:32] <NimEventer> New thread by Boia01: Topfew - a Nim port of Tim Bray's logfile utility, see https://forum.nim-lang.org/t/8815
[01:14:26] <FromDiscord> <Elegantbeef> I mean i get 23kb without anything fancy
[01:14:26] <FromDiscord> <Elegantbeef> Ah sorry 32kvb
[01:14:27] <FromDiscord> <Elegantbeef> 32kb even, jeez i cannot type
[01:14:27] <FromDiscord> <Elegantbeef> `nim c -d:release --opt:size --gc:arc -d:lto ./test.nim`
[01:16:20] <FromDiscord> <Elegantbeef> Ah yes danger was how i got it down to 23kb üòõ
[01:26:14] <FromDiscord> <demotomohiro> On windows, compile `echo "Hello world"` with `nim c --mm:arc -d:lto -d:danger --opt:size test.nim` and `strip -s test.exe` result in 57,870 bytes.‚ÜµCompiling "std::cout << "Hello world\n"; with `g++ -O3 test.cpp` and `strip -s a.exe` result in 20,494 bytes.
[01:28:47] <FromDiscord> <demotomohiro> Calling `setConsoleOutputCP` and `setConsoleCP` makes Nim windows console program bigger?
[01:29:27] <FromDiscord> <evoalg> In reply to @Elegantbeef "`nim c -d:release --opt:size": what does `-d:lto` do, and is there a clang equivalent?
[01:30:26] <FromDiscord> <demotomohiro> LTO = Link Time Optimization
[01:31:12] <FromDiscord> <Elegantbeef> link time optimization
[01:31:23] <FromDiscord> <evoalg> thank you both
[01:31:25] <FromDiscord> <demotomohiro> Ask backend linker to optimize whole program
[01:31:33] <FromDiscord> <Elegantbeef> on clang you do `--passC:"-flto"`
[01:31:51] <FromDiscord> <Elegantbeef> Or `--passL:"-flto"` dont recall
[01:32:55] <FromDiscord> <mratsim> it's both
[01:33:14] <FromDiscord> <evoalg> thank you all!
[01:35:12] <FromDiscord> <Elegantbeef> Due to the generated Nim code LTO is very good for increasing optimizations both for size and performance
[01:35:46] <FromDiscord> <Elegantbeef> Matrix bridge i see is being slow
[01:36:20] <yann-kaelig> well, time to take a break, even if i want to go on :) Very friendly Nim community. Thank you all, cu later
[01:37:50] *** Parts: yann-kaelig (~yann-kael@static.235.1.76.144.clients.your-server.de) ()
[01:40:21] <FromDiscord> <demotomohiro> Even simple hello world program, Nim generate 4 .c files. I think that is why LTO is good for size and performance.
[01:40:43] <FromDiscord> <Elegantbeef> Indeed
[01:41:16] <FromDiscord> <Elegantbeef> That and i think how Nim compiles the code
[01:49:48] <FromDiscord> <ynfle> Beef, can you help me with some design stuff?
[01:50:00] <FromDiscord> <Elegantbeef> Perhaps
[01:52:10] <FromDiscord> <01> is nim worth my time learning, i'm mostly working with networks (rest apis) and frontend (angular)
[01:52:21] <FromDiscord> <01> or is it not exactly hot in the world of web
[01:52:44] <FromDiscord> <Elegantbeef> It's not really hot anywhere üòõ
[01:53:14] <FromDiscord> <01> was afraid so...
[01:53:18] <FromDiscord> <Hamid_Bluri> hey‚ÜµI found a wierd thing that i dont know how to explain‚Üµ‚Üµhttps://play.nim-lang.org/#ix=3Mv7
[01:53:44] <FromDiscord> <01> it has a lot of appealing features but if i'll never get to use it at work or uni, it kinda feels awful to invest time in it ; _ ;
[01:55:28] <FromDiscord> <Hamid_Bluri> In reply to @hamidb80 "hey I found a": beef, what title do you suggest for the this issue? üòï
[01:56:20] <FromDiscord> <Elegantbeef> Dont put the a insidie the scope
[01:57:49] <FromDiscord> <Elegantbeef> Can always use it for your personal stuff, not like using it is useless it can teach you a bunch üòõ‚Üµ(@01)
[01:59:00] <FromDiscord> <ynfle> I'm trying to go from json schema to nim test code. Most of the schema is well defined except for 2 main parts‚Üµ1. the input to the test routine‚Üµ2. the expected output‚ÜµI'm trying to come up with a way to extract the parts of input in to valid nim untyped ast stuff. The main issue having a way to return a JsonNode from a routine that will convert it to it's ast representation for input to the routine.
[01:59:29] <FromDiscord> <ynfle> I'm trying to come up with a way to return a json array such that it is `superquote`able
[01:59:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[02:00:13] <FromDiscord> <ynfle> In reply to @ynfle "I'm trying to go": Any ideas @ElegantBeef
[02:00:21] <FromDiscord> <ynfle> In reply to @hamidb80 "hey I found a": It's not an issue
[02:00:40] <FromDiscord> <ynfle> Macros and template are hygenic by default so they obscure the name to protect name clashes
[02:00:57] <FromDiscord> <Elegantbeef> No macros are not
[02:01:17] <FromDiscord> <Elegantbeef> The issue is that they do not return the body of the macro
[02:01:21] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @01 "it has a lot": I use Nim for personal projects because I like the feel, it's worth learning new languages just to get yourself exposure to things you wouldn't from uni or work.  That said, exclusively focusing on something like Nim early in your career is most likely a Bad Idea, as it's not super likely you're going to find jobs looking for Nim devs
[02:01:43] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Mva
[02:01:45] <FromDiscord> <ynfle> In reply to @Elegantbeef "The issue is that": I meant idents in name s
[02:02:04] <FromDiscord> <Elegantbeef> Macros do not gensym
[02:02:05] <FromDiscord> <Elegantbeef> You have to gensym manually
[02:02:33] <FromDiscord> <Hamid_Bluri> In reply to @ynfle "I meant idents in": look at the evaluated `def` constant in debug console‚Üµ‚Üµhttps://play.nim-lang.org/#ix=3Mv7
[02:02:43] <FromDiscord> <ynfle> In reply to @hamidb80 "look at the evaluated": Ya i realized sorry
[02:02:47] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Has anyone found/written a 'rich' (https://github.com/Textualize/rich) style lib for Nim? I'm familiar with std/colors and std/terminal, I'm just wondering if anyone's wrapped those in a higher-level sugar layer yet?
[02:02:49] <FromDiscord> <ynfle> In reply to @Elegantbeef "You have to gensym": Not in quote
[02:02:58] <FromDiscord> <Hamid_Bluri> for `proc` works fine
[02:03:05] <FromDiscord> <Elegantbeef> Even in quote
[02:03:11] <FromDiscord> <Hamid_Bluri> yeah
[02:03:14] <FromDiscord> <Hamid_Bluri> look https://play.nim-lang.org/#ix=3Mv7
[02:03:53] <FromDiscord> <Elegantbeef> The issue is you dont emit the code
[02:03:57] <FromDiscord> <Elegantbeef> So yes that's expected
[02:04:11] <FromDiscord> <Elegantbeef> Anyway ynfle can you give more of an example
[02:04:17] <FromDiscord> <Elegantbeef> I dont follow what you're after
[02:04:35] <FromDiscord> <ynfle> Ya one second
[02:09:48] <FromDiscord> <01> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "I use Nim for": I already have a job, it's not an issue
[02:10:04] <FromDiscord> <ynfle> In reply to @01 "I already have a": I just really enjoy programming in nim
[02:10:08] <FromDiscord> <ynfle> It's really fun
[02:10:16] <FromDiscord> <01> i can believe that
[02:10:31] <FromDiscord> <ynfle> That's worth it for me
[02:10:34] <FromDiscord> <01> i like the fact i can call procedures like regular functions, commands, or methods
[02:10:46] <FromDiscord> <01> and i also like the fact it has macros
[02:11:10] <FromDiscord> <ynfle> I've contributed to Exercism.io in nim but I don't use it for work or school unless it's just a small script or something like that for school
[02:11:26] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> If you've got a job then you should use stuff you're interested in outside of it then üôÇ :akkoShrug:
[02:11:58] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> mono-culturing yourself is a great way to burn out in one hell of a hurry, ask me how I know :/
[02:12:13] <FromDiscord> <01> i am not mono, more like 2
[02:12:25] <FromDiscord> <01> C# and TS are surely my strong points
[02:12:47] <FromDiscord> <01> neither of them can interop with python, or java though
[02:12:49] <FromDiscord> <ynfle> Nim's less OOP nature is very different and could broaden horizons
[02:12:56] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Let me rephrase, keep your work tech at work, use different stuff you're interested in outside of work
[02:13:09] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Thus, if you like Nim, use nim
[02:13:34] <FromDiscord> <01> I can't say if i like it, but i am highly interested in a language that'd dip into python and java interop
[02:13:49] <FromDiscord> <01> Nim and Julia are the only 2 i could find
[02:13:57] <FromDiscord> <ynfle> Java interop is a little harder though
[02:14:01] <FromDiscord> <01> mhm
[02:14:04] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> C# can interop with Python BTW, it's just a godawful mess which doesn't pay to figure out ü§£
[02:14:35] <FromDiscord> <01> so i can use numpy and arbitrary pip package with C#?
[02:15:04] <FromDiscord> <01> cause just executing a python "string" isn't what i deem sufficient üòÇ
[02:15:11] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Ok you mean interop in a different way from what I mean
[02:15:17] <FromDiscord> <01> yea
[02:15:26] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> I'm talking about taking the Python interpreter and embedding it
[02:15:34] <FromDiscord> <01> because if i dont get access to the ecosystem, it's not much of an interop
[02:15:44] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> with bi-directional data marshalling
[02:15:54] <FromDiscord> <01> by interop i imagine CLojure with Java
[02:15:57] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> (Something I've spent a lot of time on in the past)
[02:15:57] <FromDiscord> <01> Kotlin with Java
[02:16:13] <FromDiscord> <01> TypeScript with JavaScript (altho that's a stretch)
[02:16:43] <FromDiscord> <01> F# with .NET (nothing special)
[02:17:27] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In my experience, when people say interop they mean along API boundaries
[02:17:27] <FromDiscord> <01> actually the last one is hardly interop
[02:17:38] <FromDiscord> <01> yea
[02:17:44] <FromDiscord> <01> but that's not tapping into the ecosystem
[02:17:47] <FromDiscord> <01> that's more or less a niche
[02:17:47] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> That said, I don't have a good alternative term because my brain is pudding atm üôÇ
[02:18:13] <FromDiscord> <huantian> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "I'm talking about taking": Actually, how is IronPython, assuming that‚Äôs what you‚Äôre talking about
[02:18:20] <FromDiscord> <01> Kotlin for example has perfect interop with Java (JVM), so it actually gets the whole Maven central package library
[02:18:54] <FromDiscord> <01> Julia also allows to add python packages as far as i know
[02:18:56] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @huantian "Actually, how is IronPython,": I haven't touched IP in years TBH, I was more referring to actual embedding of Python's interpreter within a foreign process
[02:19:11] <FromDiscord> <huantian> Oh interesting, how does that even work
[02:19:19] <FromDiscord> <Hamid_Bluri> it just wierd üòï https://play.nim-lang.org/#ix=3Mvd
[02:19:21] <FromDiscord> <01> you asking for julia?
[02:19:32] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> The example most people would click with would probably be, embedding Python within a C++ engine for gamedev/engine work
[02:19:35] <FromDiscord> <Hamid_Bluri> (edit) "it" => "it's"
[02:19:39] <FromDiscord> <Elegantbeef> Again it's not weird hamid
[02:19:47] <FromDiscord> <Elegantbeef> You're not emitting code so what do you expect
[02:20:08] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3Mve
[02:20:23] <FromDiscord> <Hamid_Bluri> even though if i emit the code
[02:20:28] <FromDiscord> <Hamid_Bluri> the result is the same
[02:20:28] <FromDiscord> <01> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "The example most people": C interop isn't very special, just about every serious language has it
[02:20:40] <FromDiscord> <huantian> In reply to @01 "you asking for julia?": Kinda asking for both
[02:20:40] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Wasn't saying it was üôÇ
[02:21:00] <FromDiscord> <01> In reply to @huantian "Kinda asking for both": https://github.com/JuliaPy/PyCall.jl‚Üµjulia handles it with conda
[02:21:10] <FromDiscord> <Hamid_Bluri> sent a code paste, see https://play.nim-lang.org/#ix=3Mvf
[02:21:17] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> although C++ / Python interop _is_ somewhat special because of C++ vtables, and some other tripping hazzards
[02:21:24] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Read error: Connection reset by peer)
[02:21:56] <FromDiscord> <Hamid_Bluri> (edit) "https://play.nim-lang.org/#ix=3Mvf" => "https://play.nim-lang.org/#ix=3Mvg"
[02:22:22] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[02:22:34] <FromDiscord> <01> true
[02:22:43] <FromDiscord> <ynfle> In reply to @Elegantbeef "You're not emitting code": This should work https://play.nim-lang.org/#ix=3Mvh
[02:22:44] <FromDiscord> <huantian> In reply to @01 "https://github.com/JuliaPy/PyCall.jl julia handles ": Looks pretty neat
[02:23:05] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @huantian "Kinda asking for both": To overly simplify it, it involves running the Python interpreter within the address space of a containing program.  That allows the Python interpreter to communicate with and be communicated with by the containing program (assuming you're marshaling data structures to the appropriate types back and forth)
[02:23:18] <FromDiscord> <01> i guess a better way would be to just make a "killer language" that's able to instead compile to all the major ones: JS, Java, C, C#, Python
[02:23:31] <FromDiscord> <01> one language, all libraries, but in separate applications
[02:23:39] <FromDiscord> <01> would be more realistic
[02:23:48] <FromDiscord> <huantian> Relevant xkcd: https://xkcd.com/927/
[02:24:08] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[02:24:16] <FromDiscord> <01> there is actually a lot of languages that want to compile to "name X" and "JS"
[02:24:24] <FromDiscord> <01> clojure, kotlin, scala, F#
[02:24:26] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> There's a lot of potential for footguns in scenarios where you're trying to be everything to everyone
[02:24:38] <FromDiscord> <01> can you explain?
[02:24:59] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Example: Nim does compile down to JS, right?
[02:25:09] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> However there are limitations, some things simply will not work
[02:25:17] <FromDiscord> <01> yea, hence "trying"
[02:25:19] <FromDiscord> <Elegantbeef> And actually ynfle i'm wrong quote does gen sym
[02:25:19] <FromDiscord> <Elegantbeef> genast is better quote do
[02:25:20] <FromDiscord> <Elegantbeef> If you want to use quote you'd have to do `let a = ident"a"` and the same for `b` then inside quote you'd acc quote teh values
[02:25:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mvj
[02:25:27] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> And there are solid reasons behind why, and why they're left like that
[02:25:38] <FromDiscord> <huantian> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "To overly simplify it,": Hm interesting, I was looking at how viable python would be for unity game modding/scripting, ie for users to create python scripts which would allow them to mod the game
[02:25:45] <FromDiscord> <01> what are such reasons?
[02:25:52] <FromDiscord> <01> why is it in such poor shape?
[02:25:55] <FromDiscord> <Elegantbeef> No
[02:25:57] <FromDiscord> <Elegantbeef> `quote` gensyms
[02:26:25] <FromDiscord> <Elegantbeef> Jeez matrix bridge is being slooooow
[02:26:30] <FromDiscord> <01> especially in a macro language like nim, i don't see any reason why interop with java should be painstakign
[02:26:34] <FromDiscord> <ElegantBeef> I guess i'm in discord!
[02:26:34] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @huantian "Hm interesting, I was": I can tell you from personal experience that's a massive undertaking that even very experienced developers will generally shy away from
[02:26:39] <FromDiscord> <ynfle> Beef what's better code here or a gist  or something like that for my question
[02:26:55] <FromDiscord> <ynfle> In reply to @01 "especially in a macro": Because java
[02:26:59] <FromDiscord> <ElegantBeef> I need some example input and output logic
[02:27:15] <FromDiscord> <01> that's not a very thorough reason
[02:28:36] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @01 "why is it in": I'm not a good person to answer why Nim makes architecture choices around JS transpiles, I don't use that aspect of the language :D.  It's not that it's in poor shape either, it's that Araq and others have made design decisions that lead to things being implemented a certain way.  In other areas, 1:1 translation is actually impossible at this time.
[02:28:54] <FromDiscord> <ElegantBeef> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "However there are limitations,": What do you mean
[02:29:07] <FromDiscord> <01> i don't expect 1:1 translation
[02:29:10] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @ElegantBeef "What do you mean": That was directed at @01 üôÇ
[02:29:14] <FromDiscord> <ElegantBeef> Nim doesnt target the most recent ES, but it does work fine
[02:29:18] <FromDiscord> <01> you can have great development experience without 1:1
[02:29:21] <FromDiscord> <01> imo
[02:29:28] <FromDiscord> <ElegantBeef> You can interact with  any JS code afaik
[02:29:44] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3Mvk
[02:29:52] <FromDiscord> <ynfle> But input and expected can be any valid json
[02:30:26] <FromDiscord> <ElegantBeef> Well this is doable but might be a bit messy
[02:30:35] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Agreed, however to this day (at least as far as I know) certain features within Nim do not have 1:1 parity, or in some cases do not work with JS transpiling.  I was just trying to provide an example of why expanding the scope of transpile/interop doesn't always provide greater benefits
[02:30:36] <FromDiscord> <01> the C interop with nim i would consider pretty good (from what I've seen that is)
[02:30:43] *** Joins: l1x (uid1954@id-1954.tinside.irccloud.com)
[02:30:47] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Nim compiles to C natively
[02:30:53] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> So I'd say that's 100% üòâ
[02:30:58] <FromDiscord> <ElegantBeef> In reply to @ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠ "Agreed, however to this": Yea things like closure iterators do not work in JS land
[02:31:03] <FromDiscord> <01> this looks just about the best way possible https://media.discordapp.net/attachments/371759389889003532/932409140117110784/unknown.png
[02:31:04] <FromDiscord> <ElegantBeef> well closures in general
[02:31:09] <FromDiscord> <01> for a statically typed language that is
[02:31:20] <FromDiscord> <01> and i DO want myself all the static typing
[02:31:22] <FromDiscord> <01> üôÇ
[02:31:27] <l1x> hi ppl. could i used this (std/asynchttpserver) in an embedded environment? the board has 512M ram and a pretty good arm64 cpu
[02:31:57] <FromDiscord> <01> i guess a lot of it comes down to the fact C is also pretty dang simple
[02:32:13] <FromDiscord> <01> functions, structs... no weird classes interfaces properties or any nonesense like that
[02:32:33] <FromDiscord> <01> no dependency injection!! üò† I'm looking at you C#
[02:32:41] <FromDiscord> <ElegantBeef> So ynfle what i'd do parse the json file, then emit a call assuming `[]` is a sequence so you get that call out the end
[02:32:42] <FromDiscord> <01> DI pisses me off
[02:33:09] <FromDiscord> <ynfle> sent a code paste, see https://play.nim-lang.org/#ix=3Mvn
[02:33:09] <FromDiscord> <ElegantBeef> Hell no
[02:33:12] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> C is also the rail-gun of languages when it comes to the capability to cause massive amounts of damage if you're not very careful üòÑ
[02:33:23] <FromDiscord> <01> that is correct
[02:33:42] <FromDiscord> <ynfle> In reply to @ElegantBeef "Hell no": ?
[02:33:50] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> I wrote C and C++ for years, I'm immensely happy that languages like Rust and Nim are gaining steam
[02:34:06] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> So much less fuckery for me to keep track of day-to-day ü§£
[02:34:21] <FromDiscord> <01> i'm not interested in rust at all
[02:34:35] <FromDiscord> <01> the syntax was just awful when i tried it
[02:34:59] <FromDiscord> <01> it'd be great if someone could make me enthusiastic about it though
[02:35:23] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> I like what Rust stands for, not necessarily how it gets there üòâ
[02:35:36] <FromDiscord> <01> what does it stand for
[02:35:51] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> There's a reason my personal projects are in Nim, not rust, also why I'm in the Nim Discord, not Rust's
[02:36:20] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @01 "what does it stand": Safety
[02:36:26] <FromDiscord> <01> riiiight
[02:36:59] <FromDiscord> <01> memory safety i assume you mean
[02:37:08] <FromDiscord> <Isofruit> Fully support Benumbed's reasoning there.
[02:37:10] <FromDiscord> <Isofruit> It's not just that
[02:37:13] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> I mean that's one area
[02:37:21] <FromDiscord> <Isofruit> Options and Result force you a lot more to deal with every possible path your code can take
[02:37:31] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In general Rust forces you into patterns of programming that result in safer code
[02:37:32] <FromDiscord> <01> that's not unique to rust
[02:37:36] <FromDiscord> <01> Promises exist in JS
[02:38:07] <FromDiscord> <Isofruit> It isn't, but it is part of the larger pattern: Cover every eventuality consciouslyand do so while staying memory safe.
[02:38:10] <FromDiscord> <Isofruit> (edit) "consciouslyand" => "consciously and"
[02:38:11] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> In reply to @01 "Promises exist in JS": ü§¢ ü§£ :aniCry:
[02:38:31] <FromDiscord> <01> In reply to @Isofruit "It isn't, but it": well, it's partial at it
[02:38:37] <FromDiscord> <Isofruit> I don't think I see the connection of Promises to Option and Result
[02:38:50] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> <-- unfortunately writes JS for money, is very depressed about that
[02:39:13] <FromDiscord> <01> i can still get runtime error with rust if i write an index out of bounds, it's not like it forces me to write a case where it's out of bounds
[02:39:26] <FromDiscord> <01> it's all partial, just like in all langs
[02:39:29] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> I look at it this way, the more a compiler can do to keep me from doing stupid shit, and shipping stupid shit, the happier I am
[02:39:37] <FromDiscord> <01> i agree
[02:39:37] <FromDiscord> <ynfle> @ElegantBeef  any cleanish suggestions?
[02:39:40] <FromDiscord> <01> i totally agree with that
[02:39:45] <FromDiscord> <ElegantBeef> I'm making one now
[02:39:50] <FromDiscord> <01> as long as compiler can help me, it's great
[02:39:52] <FromDiscord> <ynfle> In reply to @ElegantBeef "I'm making one now": Oh wow! Thanks
[02:40:01] <FromDiscord> <01> and i want to offload as much as possible to the compiler to check
[02:40:16] <FromDiscord> <Isofruit> I think this might be a good offtopic debate
[02:40:21] <FromDiscord> <01> that's why I'm avid hater of python
[02:40:23] <FromDiscord> <01> sure
[02:40:28] <FromDiscord> <01> #offtopic  right?
[02:40:31] <FromDiscord> <Isofruit> Yeh
[02:40:36] <FromDiscord> <ùìëùìÆùì∑ùìæùì∂ùì´ùìÆùì≠> Yeah @Isofruit I think this is starting to spam main haha
[02:41:44] <FromDiscord> <ynfle> In reply to @ElegantBeef "So ynfle what i'd": input and expected can have different types (arrays and basic types) and there can be 0 or more inputs
[02:46:29] <FromDiscord> <Isofruit> erm... I'm starting to realize that implementing database connection pools may be a couple leagues outside of my skill level
[02:48:14] <FromDiscord> <Isofruit> Do we have gatabase for connection pooling and nothing else?
[02:48:42] <FromDiscord> <Isofruit> I've seen mratsim's post about weaver but that seems still a bit out of my wheelhouse
[02:49:51] <FromDiscord> <ElegantBeef> https://play.nim-lang.org/#ix=3Mvp here's the basis ynfle
[02:50:16] <FromDiscord> <ElegantBeef> You'll want to put conditionals around getting input/expected and also fill in the `convertToNimArg` and use it recursively
[02:51:29] <FromDiscord> <ElegantBeef> The nim playground got downgraded to 1.4.8 now which is why genast wont work there
[02:52:11] <FromDiscord> <ynfle> In reply to @ElegantBeef "The nim playground got": Why'd they do that?
[02:52:31] <FromDiscord> <ElegantBeef> I think pmunch had to fix it the otherday and it hasnt fetched the most recent versions again
[02:52:36] <FromDiscord> <ElegantBeef> It wasnt purposely done
[02:52:43] <FromDiscord> <ynfle> Ah ok
[02:52:46] <FromDiscord> <Elegantbeef> Hmm bridge seems back to speed
[02:53:25] <FromDiscord> <Elegantbeef> You can summon pmunch by saying his name three times i think
[02:53:38] <FromDiscord> <ynfle> Do I have to meditate first?
[02:53:43] <FromDiscord> <ynfle> Will he haunt me?
[02:54:13] <FromDiscord> <Elegantbeef> Anyway jokes aside does my solution work for you?
[02:54:24] <FromDiscord> <Elegantbeef> Not that i really see the benefit in using json for tests
[02:54:25] <arkanoid> I've a closed-source nim project that requires to link dynamically to an external LGPL nim project, what's the best approach to comply with this? In C I can use headers and then do the linking, but what's the way to go with nim?
[02:56:02] <FromDiscord> <Zed> With dynamic linking it's only a problem if you distribute the LGPL library
[03:02:09] <FromDiscord> <ynfle> In reply to @Elegantbeef "*Not that i really": Not my choice
[03:02:20] <FromDiscord> <ynfle> Working on tooling for the nim track for Exercism.org
[03:02:24] <FromDiscord> <ynfle> (edit) "Exercism.org" => "exercism.org"
[03:02:29] <FromDiscord> <ynfle> (edit) "exercism.org" => "https://exercism.org"
[03:02:41] <FromDiscord> <ynfle> In reply to @Elegantbeef "Anyway jokes aside does": Ya
[03:02:55] <FromDiscord> <ynfle> If it's an array inside an array I call it recursively?
[03:02:57] <FromDiscord> <Elegantbeef> Goood
[03:03:11] <FromDiscord> <Elegantbeef> I mean really you should just call the proc recursively regardless
[03:03:23] <FromDiscord> <ynfle> In reply to @Elegantbeef "I mean really you": Lol why?
[03:03:35] <FromDiscord> <Elegantbeef> To reduce redundant code
[03:04:00] <FromDiscord> <ynfle> üëç
[03:04:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mvr
[03:04:28] <FromDiscord> <Elegantbeef> Then you dispatch on the other kinds in the other case
[03:12:04] <arkanoid> Zed, the LGPL library is written in nim
[03:12:51] <FromDiscord> <ynfle> In reply to @ElegantBeef "https://play.nim-lang.org/#ix=3Mvp here's the basis": What's with `case` not have a `:` at the end before the `of` branches
[03:13:07] <FromDiscord> <Elegantbeef> You dont need `:` on case
[03:13:22] <FromDiscord> <Elegantbeef> The only reason that works is cause of reccases inside types
[03:13:23] <FromDiscord> <leorize> arkanoid\: you have to find another one, or fork the library so that it can be used as a dynamic library
[03:13:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Mvt
[03:13:59] <FromDiscord> <Elegantbeef> That's the only time you should do `case a:`
[03:14:21] <FromDiscord> <ynfle> In reply to @Elegantbeef "The only reason that": https://giphy.com/gifs/amine-mind-blown-mindblown-blowing-SACoDGYTvVNhZYNb5a
[03:14:31] <FromDiscord> <ynfle> I've been doing it wrong this whole time
[03:15:07] <FromDiscord> <Elegantbeef> Yep
[03:15:15] <FromDiscord> <Elegantbeef> You'll learn eventually
[03:15:32] <arkanoid> leorize, why forking? If this would be C I would compile the LGPL as .dll, include the headers in my closed source project and -lotherlgpl at linking phase. No need to fork
[03:16:58] <FromDiscord> <ynfle> In reply to @Elegantbeef "You'll learn eventually": What does that mean?
[03:17:09] <FromDiscord> <ynfle> That I'm doing everything wrong?
[03:17:11] <FromDiscord> <ynfle> Nooooooooo
[03:17:21] <FromDiscord> <Elegantbeef> You will learn eventually
[03:17:26] <FromDiscord> <usagii0> Just came across Nim. Is the native FFI for interoperability with C really good? (c++ I can understand there being more problems haha)
[03:17:40] <FromDiscord> <leorize> yes
[03:17:50] <FromDiscord> <usagii0> Good to hear!
[03:17:50] <FromDiscord> <leorize> arkanoid\: this is nim
[03:18:14] <FromDiscord> <Elegantbeef> It uses C as it's backend so if it had bad C FFI we'd be in trouble üòÄ
[03:18:16] <FromDiscord> <ynfle> In reply to @Elegantbeef "You will learn eventually": Learn what?
[03:18:32] <FromDiscord> <Elegantbeef> It was just a joke ynfle no need to look into it further
[03:18:33] <FromDiscord> <leorize> arkanoid\: the issue is that nim libraries must be prepared in order to be used as a dynamic library
[03:18:44] <FromDiscord> <ynfle> In reply to @Elegantbeef "It was just a": But I want to learn the beef ways
[03:18:52] <FromDiscord> <ynfle> Make my nim skills more beefy
[03:18:53] <arkanoid> so nim is technically not compatible with LGPL dynamic linking?
[03:19:08] <FromDiscord> <ynfle> Or take the form of a tree
[03:19:11] <FromDiscord> <ynfle> Either is fine
[03:19:14] <FromDiscord> <leorize> at the moment, yes
[03:20:35] <FromDiscord> <Elegantbeef> I mean it is but the library author has to support it
[03:20:52] <FromDiscord> <Elegantbeef> Or you fork it yourself
[03:22:18] <arkanoid> which changes do I have to implement to support it? I mean, do I have to wrap each function with importc?
[03:22:52] <FromDiscord> <Elegantbeef> https://github.com/treeform/genny you could also use this
[03:24:15] <arkanoid> thanks!
[03:26:56] <arkanoid> btw I was not aware of this linkage/licensing issue until today, it's difficult to consider nim closed-source friendly if LGPL nim libraries cannot be use as-is like you'd expect in other languages
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:38] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:30:41] <FromDiscord> <Elegantbeef> Correct me if i'm wrong but isnt the issue the same even in C?
[03:35:21] <arkanoid> Elegantbeef, no, you can use LGPL libraries inside closed source project, you just need to deliver LGPL'd source code. Dynamic linkage between closed source and LGPL one is suggested for this. To accomplish this, you include LGPL'd headers in closed source project and then dynamic link it
[03:36:13] <arkanoid> with nim there are no separate headers and implementation, your compiled nim code includes all the nim dependencies, no matter the license
[03:36:20] <FromDiscord> <Elegantbeef> I meant that even in C you need the library author to support it, otherwise you have to make the headers?
[03:36:58] <FromDiscord> <Elegantbeef> I mean Nim still has the same capabilities, the author just needs to support it afaict
[03:38:21] <arkanoid> yes but when writing C you generally write headers .h and .c files separately, the main reason is that you use your own .h inside the project itself
[03:39:12] <arkanoid> so the library naturally support delivering headers and compiled binaries separately, just like any package and package-dev in any linux distro
[03:40:24] <arkanoid> for example Qt is LGPL, you can link it dynamically with your closed source project, and deliver your project + sources of the linked Qt library
[03:40:39] <FromDiscord> <Elegantbeef> I mean get on the author is all i can say
[03:40:45] <FromDiscord> <Elegantbeef> Or do it yourself
[03:44:30] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:44:36] <arkanoid> I'm curious on the second approach
[03:49:06] <arkanoid> Actually, it's also important to find out if static linkage breaks the LGPL. It's a grey area apparently. If it is not, so using LGPL nim libraries into close-source nim projects should be possible, given that the original LGPL source (and possibly compiled .o) is delivered with it
[03:51:24] <arkanoid> the other interesting thing to consider here, is if nim cache folder constains generated .c/.o files that are independently build from each used lib, so I can separate closed and lgpl generated C and object files
[04:07:13] <arkanoid> Elegantbeef, I see that this problem is at least 6 years old https://news.ycombinator.com/item?id=8935842
[04:12:11] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[04:12:41] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[04:12:56] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[04:28:10] <FromDiscord> <auxym> Wait, unless I'm missing something, you can dynamically link in nim too, using `{.dynlib.}`. You do have to generate header-like proc definitions that work sort of like headers. Manually or with c2nim.
[04:32:59] *** Quits: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733) (Quit: bye)
[04:34:40] *** Joins: Mister_Magister (~Mister_Ma@user/mister-magister/x-2636733)
[04:45:02] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 240 seconds)
[04:45:10] <arkanoid> auxym, sure, but that's something you do when FFI with C/C++
[04:45:47] <arkanoid> question is when you have a LGPL nim library that needs to be fulfilled with a closed-source nim application
[04:46:45] <arkanoid> just by doing "import lgpllib" and compiling with default options, you're basically doing static linking from closed-source with lgpl, and that's ok
[04:47:09] <arkanoid> posting now in the forum to ask which options do I have
[04:52:16] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[04:53:32] <NimEventer> New thread by Giaco: How to dynamically link LGPL nim library to closed-source nim application?, see https://forum.nim-lang.org/t/8816
[04:57:12] <FromDiscord> <that_dude> sent a code paste, see https://paste.rs/vXh
[05:01:01] <FromDiscord> <Elegantbeef> does `runProc` return bool?
[05:02:13] <FromDiscord> <that_dude> yes
[05:03:15] *** Quits: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:03:38] <FromDiscord> <Elegantbeef> do `echo repr wrapedMeat` and see what the AST is
[05:07:15] <FromDiscord> <that_dude> Are you sure you want this? Because this was just part of the macro
[05:07:40] <FromDiscord> <Elegantbeef> I dont want it
[05:08:03] <FromDiscord> <that_dude> I think it expands to like 600+ lines iirc
[05:08:22] <FromDiscord> <Elegantbeef> How the hell does that little bit of code expand to 600 lines
[05:08:43] <FromDiscord> <that_dude>  https://media.discordapp.net/attachments/371759389889003532/932448816483938314/message.txt
[05:08:56] <FromDiscord> <that_dude> Not just the little bit
[05:09:16] <FromDiscord> <Elegantbeef> But it is just a little bit
[05:09:17] <FromDiscord> <that_dude> wrapped meat is basically the main part of the result
[05:09:27] <FromDiscord> <Elegantbeef> you literally create it there
[05:09:41] <FromDiscord> <Elegantbeef> put the echo write after the creation of the variable
[05:09:47] <FromDiscord> <that_dude> Good point
[05:10:29] <FromDiscord> <Elegantbeef> Side note why the hell are you using a template instead of a procedure for `inj_block-wrapper`
[05:10:56] <FromDiscord> <that_dude> because I was doing no calculations in there
[05:11:11] <FromDiscord> <that_dude> Wait
[05:11:39] <FromDiscord> <that_dude> fair point
[05:11:58] <FromDiscord> <that_dude> That said, I don't think it changes it too much rn. I'll write that down tho
[05:13:17] <FromDiscord> <that_dude> sent a code paste, see https://play.nim-lang.org/#ix=3MvW
[05:14:14] <FromDiscord> <Elegantbeef> That's not the `repr`
[05:14:30] <FromDiscord> <that_dude> not tree repr
[05:15:16] <FromDiscord> <that_dude> sent a code paste, see https://paste.rs/3ZQ
[05:15:28] <FromDiscord> <Elegantbeef> Well there you go
[05:15:32] <FromDiscord> <Elegantbeef> Your AST is 100% wrong
[05:16:16] <FromDiscord> <that_dude> Could you please elaborate? also I gtg for a bit so I'll read it then
[05:16:21] <FromDiscord> <Elegantbeef> You have an extra `inj_actions_default`
[05:16:50] <FromDiscord> <Elegantbeef> you're writing `if x: doThing() else: true; inj_actions_default.runProc()`
[05:17:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3MvZ
[05:17:34] <FromDiscord> <Elegantbeef> That's invalid AST
[05:17:44] <FromDiscord> <Elegantbeef> So it's going "hey true isnt handled"
[05:27:22] <FromDiscord> <leorize> lgpl only require you to allow relinking with different version of the same library
[05:27:31] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[05:28:19] <FromDiscord> <leorize> so yes, you technically can statically link lgpl stuff, as long as your program can be obtained as a collection of objects to be linked, but no one does so in practice
[05:33:16] <FromDiscord> <leorize> arkanoid ^
[05:34:04] <arkanoid> leorize, thanks but my question is how and if this is currently possible with nim
[05:36:04] <arkanoid> I mean, if I build a nim project, I end up with many object files in cache folder. I can pack them and upload them and that's ok. But if someone wants to replace one of those object file with a different one build from a modified version of the original LGPL nim code, would it work?
[05:46:47] <FromDiscord> <that_dude> Damn. Thanks
[05:51:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:54:40] *** Joins: neurocyte0917093 (~neurocyte@user/neurocyte)
[05:56:56] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:56:56] *** neurocyte0917093 is now known as neurocyte091709
[06:00:50] <arkanoid> I am testing custom finalizers using new(result,myFinalizer) with --gc:orc, but I see that some of my custom finalizers al called and some are not. If I do --expandArc:main I see that `=destroy`(objectWherecustomFinalizerIsNotCalled) and `destroy_1`(correctlyWorkingCustomFinalizer)
[06:01:18] <arkanoid> I'm checking that if works or not by echoing something in finalizer
[06:02:49] <arkanoid> what's the difference from `=destroy` and `destroy_1` ? why the second is working but the first is not my custom finalizer?
[06:04:43] <FromDiscord> <demotomohiro> Maybe finalizer is not much tested with orc or arc
[06:05:31] <FromDiscord> <demotomohiro> In arc/orc destructor seems better.
[06:10:29] <arkanoid> demotomohiro, I'm talking about creating objects with https://nim-lang.org/docs/system.html#new%2Cref.T%2Cproc%28ref.T%29
[06:13:10] <arkanoid> let me try to reduce this to a minimal test, I smell bug here
[06:27:31] <arkanoid> demotomohiro, possibly a problem when using forward declarations
[06:29:43] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:31:05] <arkanoid> just spotted an internal error
[06:50:49] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:00:29] <NimEventer> New thread by Giaco: Unexpected behavior when using custom finalizers + ARC/ORC + RootObj, see https://forum.nim-lang.org/t/8817
[07:47:47] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Mwk
[07:48:07] <FromDiscord> <Rika> well it says there no it doesnt
[07:48:16] <FromDiscord> <Rika> you could prollyg et it to work by derefing
[07:48:22] <FromDiscord> <Rika> refobj[].fieldPairs
[07:49:58] <FromDiscord> <ajusa> Ah wasn't sure if ref object counted as an object type, I'll try deferencing
[07:50:32] <FromDiscord> <Rika> they do not
[07:50:49] <FromDiscord> <Elegantbeef> Ref can be anything
[07:51:13] <FromDiscord> <Elegantbeef> `ref int` for instance isnt an object üòõ
[08:20:02] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:27:47] <arkanoid> why can't I declare a destructor for ref type?
[08:28:12] <arkanoid> Error: signature for '=destroy' must be proc[T: object](x: var T)
[08:33:22] <FromDiscord> <Elegantbeef> I dont recall why they cannot, but i do remember there was a workaround
[08:33:31] <FromDiscord> <Elegantbeef> I dont recall what that is either üòÄ
[08:36:33] <arkanoid> got my answer: https://forum.nim-lang.org/t/4132#25743
[08:37:45] <arkanoid> but now I am not sure if I should create non-ref type for each "ref type of RootObj" and declare `=destroy`, or I should stick with finalizer
[08:38:31] <FromDiscord> <Elegantbeef> You can also do the ugly way but yea
[08:40:38] <arkanoid> Elegantbeef: apparently the ugly way does not even work https://play.nim-lang.org/#ix=3Mwv
[08:41:38] <FromDiscord> <Elegantbeef> Are you using `arc/orc`?
[08:41:46] <arkanoid> (is it possible to compile with arc in play.nim-lang?)
[08:41:51] <arkanoid> yes, offline I'm using arc
[08:42:00] <FromDiscord> <Elegantbeef> No it's not
[08:42:49] <arkanoid> oh, wait, I was editing the wrong config.nims, now it works
[08:43:43] <arkanoid> it works also with refc + GC_fullCollect
[08:43:46] <FromDiscord> <Elegantbeef> If you dont want the `FooObj` approach you can do https://play.nim-lang.org/#ix=3Mwx
[08:44:24] <arkanoid> what a ninja trick!
[08:44:45] <FromDiscord> <huantian> is there a mod I can dm about possible scammers
[08:44:50] <arkanoid> btw, I think I've just found that finalizers are flawed
[08:45:14] <FromDiscord> <Elegantbeef> You can ping Yardanico, Pmunch, Impbox
[08:45:20] <FromDiscord> <huantian> kk
[09:01:37] <arkanoid> =destroy seems not called on parent objects
[09:02:32] <arkanoid> https://play.nim-lang.org/#ix=3MwA
[09:03:50] <FromDiscord> <Elegantbeef> Yea this makes sense
[09:04:11] <FromDiscord> <Elegantbeef> `object of FooObj` does not inherit anything but fields
[09:05:23] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3MwB
[09:06:07] <FromDiscord> <Elegantbeef> If you want to make it less tedious you could probably use https://github.com/beef331/oopsie s `super`
[09:08:08] <FromDiscord> <huantian> Yet another amazingly named package by beef
[09:08:27] <FromDiscord> <Elegantbeef> If i have any skill it's coming up with names
[09:08:46] <FromDiscord> <Elegantbeef> Someone had a chess + card game they wanted a name for and my first name was "deckmate"
[09:11:37] <arkanoid> what do you mean with "`object of FooObj` does not inherit anything but fields" ? How this imply not calling super destructor?
[09:12:12] <FromDiscord> <Elegantbeef> I dont know if it's a bug or intended but it's a distinct type
[09:12:26] <FromDiscord> <Elegantbeef> As such calling base procedures is an explicit operation unless there is an overload
[09:12:57] <FromDiscord> <Elegantbeef> Like if you remove the destroy for `BarObj` it outputs the `Foo` message
[09:14:15] <FromDiscord> <huantian> Wonder if making destroy a method works
[09:15:33] <arkanoid> yeah, I do confirm that removing destroy would execute the destroy of the parent class, but while that's working with =destroy, it is not with finalizers
[09:15:41] <FromDiscord> <Elegantbeef> Nah the issue i think is you're overloading or overridding destroy
[09:17:08] <FromDiscord> <Elegantbeef> I've never used a finalizer so no comment
[09:17:39] <arkanoid> check here, n = 2: https://play.nim-lang.org/#ix=3MwE
[09:18:10] <FromDiscord> <Elegantbeef> Yea of course it'd never call the other one
[09:18:14] <FromDiscord> <Elegantbeef> You afterall pass in the procedure in
[09:18:37] <arkanoid> is there another way to link a finalizer?
[09:18:46] <FromDiscord> <Elegantbeef> `proc new[T](a: var ref T; finalizer: proc (x: ref T) {.nimcall.})` the type def is this
[09:18:59] <FromDiscord> <Elegantbeef> Well you''d have to manually call the base
[09:19:05] <arkanoid> I'm not trying to be picky, I just need to find the correct way fo fix a lib while maintaining backward compatibility
[09:19:41] <FromDiscord> <Elegantbeef> Yea i understand i'm just explaining why it's behaving as it is
[09:19:48] <arkanoid> I've just found that finalizers won't work with forward declaraction
[09:19:58] <FromDiscord> <Elegantbeef> The finalizers dont even have to match name, hell they can be anonymous
[09:20:39] <FromDiscord> <Elegantbeef> They do
[09:20:52] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3MwF compiles fine
[09:23:15] <FromDiscord> <Elegantbeef> Anyway you slice it you'll have to call the base finalizers, you could make a `newFinalized` macro which propagates up seeing if there is a finalizer calling it if possible
[09:24:02] <FromDiscord> <Elegantbeef> Which isnt that complex thanks to super being able to get parent objects üôÇ
[09:33:34] <arkanoid> Elegantbeef, check here for example of internal error + silent skip finalize cases for ARC https://forum.nim-lang.org/t/8817
[09:33:47] <arkanoid> if you think is a bug, I should move it to new github issue
[09:35:18] *** Joins: DeluxeSk8rBird (~DeluxeSk8@27.125.241.140)
[09:35:28] <FromDiscord> <Elegantbeef> Where's the internal error?
[09:37:52] <FromDiscord> <Elegantbeef> I mean an internal error is always a bug
[09:38:12] <FromDiscord> <Elegantbeef> The compiler never should create an internal error with the exception of things like macros doing stupid things i'd guess
[09:40:05] <FromDiscord> <leorize> even that shouldn't create an internal error
[09:40:24] <FromDiscord> <Elegantbeef> Agreed, but it's the case where you can do the most fuckery
[09:40:53] <FromDiscord> <Elegantbeef> I more just mean it's a bit more acceptable for confuckery of macros to have an internal error versus non fancy user code
[09:41:05] <FromDiscord> <Elegantbeef> Like it's still an issue but it's a more understandabel
[09:41:39] <FromDiscord> <Elegantbeef> Peak beefism, incorrectly writing understandable
[09:44:16] <arkanoid> haha
[09:46:36] <arkanoid> well, here's the shortest version that goes internal error: https://play.nim-lang.org/#ix=3MwO
[09:46:53] <arkanoid> (with --gc:arc, it goes ok with refc)
[09:48:15] <FromDiscord> <Elegantbeef> Odd
[09:50:29] <arkanoid> and here another case where finalizer is not called: https://play.nim-lang.org/#ix=3MwP
[09:51:39] <FromDiscord> <Elegantbeef> The odd thing is this doesnt error https://play.nim-lang.org/#ix=3MwQ
[09:51:42] <FromDiscord> <Elegantbeef> So it's purely with relation to the finalizer magic
[09:54:36] <arkanoid> I'll add this to the list of things that are pushing my willing to use nim for large work project out of scope
[09:56:23] <FromDiscord> <Elegantbeef> I personally dont see why this is an issue but ok
[09:56:49] <FromDiscord> <Elegantbeef> Forward declaring the finalizer doesnt make any sense to me right now
[09:57:26] <arkanoid> Elegantbeef, I reached this bug why spending quite some time finding out why my nimqml based application was leaking, I ended up with this. It took many hours so yes, it is a problem
[09:59:13] <arkanoid> but silent skipping it is even worse, here the nimqml developer went the wrong way adding many leaks depending on the use of forwarding proc or not for finalizer https://github.com/filcuc/nimqml/commit/aaab5dbae4ae5c22d7aab67635f24c54a7f369f6#diff-1dc629e086d3454f1196ccfcc3f365fccc444ab3d70710bd3dd211b5221413b3
[09:59:16] *** Joins: Doraemon (~NeoCron@p200300c4cf146c0091a78f8614b30205.dip0.t-ipconnect.de)
[10:00:06] <FromDiscord> <Elegantbeef> "silent skipping"?
[10:01:00] <arkanoid> yes, like here https://play.nim-lang.org/#ix=3MwP
[10:01:39] <arkanoid> code compiles, works ok for refc, skips `delete` call completely with arc, this only when using forward proc
[10:01:45] <FromDiscord> <Elegantbeef> Of course it's an issue
[10:01:46] *** Quits: NeoCron (~NeoCron@p200300c4cf4baa00766f97a7a0c56948.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:01:57] <FromDiscord> <Elegantbeef> I dont get why anyone would forward declare these like this
[10:02:21] <arkanoid> https://github.com/filcuc/nimqml/blob/master/src/nimqml/private/constructors.nim
[10:03:33] <arkanoid> for example the nimqml dev preferred to include all the code instead of import, so he ended up with that software architecture https://github.com/filcuc/nimqml/blob/master/src/nimqml.nim
[10:03:54] <FromDiscord> <Elegantbeef> I see
[10:04:10] <FromDiscord> <Elegantbeef> I'll go back to my previous statement
[10:04:44] <FromDiscord> <Elegantbeef> It is indeed an issue that it doesnt work, but jesus this is some code
[10:06:08] <arkanoid> do you think that code smell?
[10:06:29] <arkanoid> I have no clue, I just think it is a C++ pattern
[10:06:32] <FromDiscord> <Elegantbeef> I think it very much isnt written in such a way to be easy to work with
[10:06:54] <FromDiscord> <Elegantbeef> Like https://github.com/filcuc/nimqml/blob/master/src/nimqml/private/qmetaobjectconnection.nim is the entire module
[10:07:35] <arkanoid> yes, he included everything in a single large nimqml file
[10:07:43] <arkanoid> I mean, no import, just include
[10:07:44] <FromDiscord> <Elegantbeef> Yea i know
[10:08:29] <FromDiscord> <Elegantbeef> Imo there isnt much reason to do what they did other than to be silly
[10:08:34] <arkanoid> the fact that status is using that lib made me say "hey should be good" but apparently I'm very good in spotting errors
[10:10:08] <FromDiscord> <Elegantbeef> The worst part about using include is it's so hard to get your bearings
[10:10:24] <FromDiscord> <Elegantbeef> You dont know what's exposed to you, you dont know where anything comes from unless you look at every module before you
[10:12:04] <FromDiscord> <Elegantbeef> Not that I dont have code that smells though
[10:17:47] <arkanoid> I think I want to refactor it all, point is how to maintain backward compatibility
[10:18:44] <FromDiscord> <Elegantbeef> `export`  goes brrr
[10:45:12] <arkanoid> :)
[10:49:08] <arkanoid> Elegantbeef, do you think I should open 2 issues for the 2 cases?
[10:50:04] <FromDiscord> <Elegantbeef> Probably
[10:50:11] <arkanoid> ok, thanks
[11:10:09] *** Joins: PMunch (~PMunch@user/pmunch)
[11:17:10] *** Quits: DeluxeSk8rBird (~DeluxeSk8@27.125.241.140) (Ping timeout: 250 seconds)
[11:22:03] *** Joins: pro (~pro@user/pro)
[11:27:52] *** Joins: DeluxeSk8rBird (~DeluxeSk8@27.125.241.163)
[11:31:19] *** Joins: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163)
[11:34:33] *** Quits: DeluxeSk8rBird (~DeluxeSk8@27.125.241.163) (Ping timeout: 256 seconds)
[12:09:53] <FromDiscord> <mratsim> In reply to @arkanoid "the fact that status": We're moving away from it to pure C++ for the UI layer.
[12:24:44] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:31:34] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[12:31:48] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Client Quit)
[12:31:56] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[12:35:36] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[13:04:39] *** Quits: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163) (Ping timeout: 256 seconds)
[13:08:23] *** Joins: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163)
[13:14:03] <PMunch> Any reason in particular @mratsim?
[13:21:28] *** Quits: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163) (Remote host closed the connection)
[13:21:43] *** Joins: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163)
[13:22:21] <NimEventer> New post on r/nim by vanyle_: Static analysis tool, see https://reddit.com/r/nim/comments/s60cx1/static_analysis_tool/
[13:22:52] <arkanoid> mratsim, I'm not sure if trusting NimQml and go with split C++/Nim. I'd like to avoid C++
[13:23:03] <arkanoid> s/and/or
[13:25:04] <FromDiscord> <mratsim> In reply to @PMunch "Any reason in particular": QT6 support required changing DOtherside and so taking other that lib maintenance.‚Üµ‚ÜµAlso it's hard enough to recruit designers frontend dev with QML and some C++. If we add Nim to the mix it gets really tough. And we need to be really agile on the UI layer since it's what users see first.
[13:26:05] <FromDiscord> <mratsim> Ah and also documentation. If we see weird things happening, we don't have to "how does that translate to Nim, is the issue Nim or really QT/QML"
[13:27:21] <arkanoid> makes sense. I've also read some of your code for desktop client, and I see that it's a lot of setup and delete due to nimqml design
[13:28:25] <PMunch> If only we had Futhark for C++ :P
[13:28:43] <PMunch> That should make Qt work the same as in C++
[13:29:35] *** Quits: DeluxeSk8rBird1 (~DeluxeSk8@27.125.241.163) (Ping timeout: 256 seconds)
[13:30:20] <arkanoid> PMunch: it would be wow
[13:31:15] <PMunch> Should work, but converting all the C++ concepts into Nim is going to require some work
[13:31:16] <arkanoid> have you seen my toy project where I wrap gdal library with futhark and load geographical data and draw it with Qt5 Map via nimqml?
[13:31:32] <PMunch> What? No I haven't seen that!
[13:32:23] <arkanoid> PMunch: https://github.com/arkanoid87/nimmap
[13:32:58] <arkanoid> actually is an exercise in learning how to properly use nimqml, I've been cherry picking bugs and leaks so far
[13:33:21] <arkanoid> but at the end it seems to be a nim bug, not a nimqml one
[13:49:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[13:52:36] <PMunch> Aha, so nlib/gdal is just the output of Futhark?
[14:26:00] <arkanoid> PMunch: yes, and I had to copy it from cache folder due to the vscode/nim check issue. Are you considering changing futhark for vscode users? Saem, autor of the nim version of vscode extension, seems not to agree with futhark using cache folder that way
[14:27:03] <PMunch> Why doesn't they agree that using the cache folder for cache files is a good idea?
[14:27:12] <PMunch> Sounds like a weird thing to oppose
[14:27:50] <PMunch> I guess I could throw in a flag you can put in your nim.cfg to look elsewhere for the cache
[14:29:42] <arkanoid> PMunch: https://github.com/saem/vscode-nim/issues/69
[14:47:06] <PMunch> Left a reply
[14:53:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[15:04:05] <NimEventer> New thread by Jarv: Using waitForExit when a timeout is given, on a process blocked by IO, see https://forum.nim-lang.org/t/8818
[15:37:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[16:35:45] <FromDiscord> <inv> How can I make prefetch in Nim ?
[16:35:56] <FromDiscord> <inv> (edit) "How can I make prefetch ... in" 03added "data from mem"
[16:37:25] <FromDiscord> <inv> (edit) "How can I make ... prefetch" 03added "manually"
[16:43:01] <szahid> Guys how to write this better? https://play.nim-lang.org/#ix=3MyO
[16:45:41] <FromDiscord> <Rika> First time I‚Äôve seen someone actually use my library wow lmao
[16:45:55] <FromDiscord> <Rika> What looks ugly to you right now?
[16:46:42] <szahid> Suru is yours ?
[16:47:47] <szahid> Nevermind. My script is very.. slow? i have problem with loop i think.
[16:47:51] <FromDiscord> <Isofruit> As somebody with no clue of what the code is supposed to do, do all the variables you declare with var actually have to be mutable? Or would let also do?
[16:49:12] <FromDiscord> <Isofruit> e.g. `url`, `response` and `r` look like they're only read from, as a personal preference thing I like to have only the things mutable that need to be mutable
[16:49:23] <FromDiscord> <Rika> From what I read only the client has to be var
[16:49:44] <FromDiscord> <Isofruit> errors also, afaik you can't add to a seq that isn't var
[16:49:46] <FromDiscord> <ynfle> Is there a way to inject a space in between code block with `nnkEmpty` or somthing like that for repr?
[16:52:22] <FromDiscord> <Rika> In reply to @ynfle "Is there a way": I don‚Äôt think so
[16:52:30] <FromDiscord> <Rika> In reply to @szahid "Suru is yours ?": Yup
[16:52:51] <FromDiscord> <Rika> In reply to @szahid "Nevermind. My script is": Maybe remove suru first, I‚Äôm skeptical of its performance right now
[16:53:47] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:6d6b:7ec9:9e7a:96c3) (Remote host closed the connection)
[16:54:30] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:3c25:ad98:c04c:c39d)
[16:56:12] <szahid> Rika. I dont know other ways to count speed of script. I think this is not problem with suru beacuse in python i have the same issue. 
[16:59:25] <FromDiscord> <Rika> I noticed this, you‚Äôre using wait for‚Ä¶
[17:00:02] <FromDiscord> <Rika> I‚Äôm a bit busy right now so if someone helps you while I am gone nice but I‚Äôll help you in a bit otherwise
[17:07:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[17:09:04] <FromDiscord> <Rika> Ah great ix decided to wipe my progress
[17:09:37] <szahid> :(
[17:13:58] <FromDiscord> <Rika> Second time my progress is wiped, how fun it is to program on a phone
[17:16:42] <PMunch> I really should make it so the playground doesn't blindly refresh if the ix paste fails..
[17:18:58] <FromDiscord> <Rika> I‚Äôm not sure if this compiles fine since the playground kills it, but I think it should
[17:19:00] <FromDiscord> <Rika> https://play.nim-lang.org/#ix=3Mz1
[17:19:30] <FromDiscord> <Rika> I shall go for a bit again
[17:20:26] <PMunch> @Rika, you wrote a progress bar that slows down performance? :P
[17:21:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:24:25] <FromDiscord> <Rika> In reply to @PMunch "<@259277943275126785>, you wrote a": I don‚Äôt think it‚Äôs possible to not?
[17:24:48] <FromDiscord> <Rika> Unless you somehow found 0 cycle instructions
[17:24:54] <PMunch> Well of course
[17:25:04] <PMunch> But one that slows it down more than is to be expected
[17:28:19] <FromDiscord> <Rika> No I‚Äôm just extremely not confident
[17:28:30] <FromDiscord> <Rika> It‚Äôs probably way better than tqdm
[17:29:11] <szahid> Rika.. What tha hell? form 3it/s to 1k it/s :D 
[17:30:35] <FromDiscord> <Isofruit> You just made a 300x performance jump?
[17:30:36] <FromDiscord> <Isofruit> Sounds nice
[17:31:22] <FromDiscord> <hmmm> i want to use rika sama stuff to, what does it do
[17:31:49] <FromDiscord> <Rika> In reply to @szahid "Rika.. What tha hell?": Measure runtime not the for loop
[17:32:06] <FromDiscord> <Rika> It does some extra things out of the measured loop
[17:32:41] <szahid> Rika... do you know some libs for that ?
[17:33:21] <FromDiscord> <Rika> Uh https://nim-lang.org/docs/monotimes.html
[17:47:32] <szahid> :D to much connection to server Connection refused
[17:47:38] *** Joins: Guest9 (~Guest9@65.49.222.79.16clouds.com)
[17:47:42] <szahid> from 10min to 17seconds :D
[17:47:45] <szahid> Nim <3
[17:48:09] *** Quits: Guest9 (~Guest9@65.49.222.79.16clouds.com) (Client Quit)
[17:48:23] <PMunch> Haha, that's the kind of speedup where you start to wonder if you did something wrong and your program just doesn't do anything anymore :P
[18:11:36] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[18:14:41] *** Joins: arkurious (~arkurious@user/arkurious)
[18:15:20] *** Joins: xet7 (~xet7@user/xet7)
[18:17:24] <FromDiscord> <Rika> well the issue with what he did was he didnt use async at all soooo
[18:17:51] <FromDiscord> <Rika> yeah the solution i gave might need some ratelimiting since you might be murdering a server if you had 1297751839741 url nodes
[18:18:08] <PMunch> Aah, good ol' async
[18:31:59] <FromDiscord> <inv> google did not help with Nim's prefetch üò¶
[18:32:29] <FromDiscord> <Rika> ?
[18:32:42] <FromDiscord> <inv> Can I add one C-line into Nim code somehow?
[18:32:46] <FromDiscord> <Rika> yeah sure
[18:32:54] <FromDiscord> <Rika> {.emit: "code".}
[18:33:03] <FromDiscord> <Rika> i think thats the syntax i forgot
[18:33:48] <FromDiscord> <inv> I wanted to test "builtin_prefetch"
[18:45:38] <FromDiscord> <exelotl> @inv since it's function-like you can probably just `importc` it
[18:46:10] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3MzD
[18:46:23] <FromDiscord> <exelotl> that's what I'd try ^
[18:49:54] <FromDiscord> <inv> Thank you. did not change anything in my case
[19:14:32] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[19:27:14] <FromDiscord> <Patitotective> I want `chr` to be `\n`, not `\`, How am I supposed to parse the string?‚Üµhttps://play.nim-lang.org/#ix=3MzP
[19:32:23] <FromDiscord> <Rika> remove the second \?
[19:32:25] <FromDiscord> <Rika> (edit) "\?" => "\\?"
[19:32:43] <FromDiscord> <Patitotective> I can't, that's how I'm getting the string
[19:32:52] <FromDiscord> <Rika> string replace
[19:33:23] <FromDiscord> <Rika> replace the escape code "\n" into the literal '\n'
[19:33:32] <FromDiscord> <Rika> manually i guess, i dont know of any procs that do such
[19:34:27] <FromDiscord> <Patitotective> what about https://nim-lang.org/docs/strutils.html#unescape%2Cstring%2Cstring%2Cstring ?
[19:35:19] <FromDiscord> <Rika> sounds good
[19:37:41] <FromDiscord> <Patitotective> but looking at `parseChar` source it does only get the char at the given index (by default 0), so it will never get `\n` since they're two characters üòï
[19:38:04] <FromDiscord> <Patitotective> https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/parseutils.nim#L245}
[19:38:12] <FromDiscord> <Patitotective> (edit) "https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/parseutils.nim#L245}" => "https://github.com/nim-lang/Nim/blob/version-1-6/lib/pure/parseutils.nim#L245"
[19:38:52] <FromDiscord> <Patitotective> (edit) "get" => "work with"
[19:40:33] <FromDiscord> <Rika> `str = unescape str` after str>
[19:40:34] <FromDiscord> <Rika> (edit) "str>" => "str?"
[19:45:02] <FromDiscord> <Rika> ah i get what you mean
[19:45:08] <FromDiscord> <Rika> ah no i dont
[19:45:09] <FromDiscord> <Patitotective> `unescape` requires `str` to have quotes around the actual string, anyways doesn't work that way either
[19:45:13] <FromDiscord> <Rika> it doesnt
[19:45:24] <FromDiscord> <Rika> unescape(str, "", "")
[19:45:37] <FromDiscord> <Rika> it doesnt seem to replace \n anyway though
[19:46:16] <FromDiscord> <enthus1ast> \\n cannot be in a char (on all systems) since sometimes its two chars
[19:46:22] *** Joins: rockcavera (~rc@192.12.112.202)
[19:46:22] *** Quits: rockcavera (~rc@192.12.112.202) (Changing host)
[19:46:22] *** Joins: rockcavera (~rc@user/rockcavera)
[19:47:13] <FromDiscord> <Patitotective> !eval echo '\n'
[19:47:16] <NimBot> ‚Üµ
[19:47:23] <FromDiscord> <Patitotective> but it does work
[19:48:39] <FromDiscord> <enthus1ast> ok, i meant \\p
[19:49:09] <FromDiscord> <enthus1ast> \\n is not correct for every system btw
[19:49:36] <FromDiscord> <enthus1ast> !eval echo '\\p'
[19:49:38] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: missing closing ' for character literal
[19:49:47] <FromDiscord> <enthus1ast> ok screw this
[19:50:48] <FromDiscord> <qb> https://play.nim-lang.org/#ix=3MA2
[19:51:21] <FromDiscord> <Rika> \n may not be correct for every system but that is out of scope
[19:51:51] <FromDiscord> <Patitotective> what i want is to parse an escaped character as `char` type https://nim-lang.org/docs/manual.html#lexical-analysis-character-literals
[19:52:01] <FromDiscord> <Rika> In reply to @qb "https://play.nim-lang.org/#ix=3MA2": use monotimes for benchmarking
[19:52:03] <FromDiscord> <Patitotective> \n was an example
[19:53:24] <FromDiscord> <Rika> @qb https://play.nim-lang.org/#ix=3MA3
[19:53:36] <FromDiscord> <Rika> ~~not sure where this is from btw, i dont know the context lol~~
[19:53:52] <FromDiscord> <qb> oh wow
[19:54:06] <FromDiscord> <qb> so the function is actually faster than casting
[19:54:32] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[19:54:44] <FromDiscord> <Rika> i wouldnt know why]
[19:56:18] <FromDiscord> <mratsim> In reply to @inv "Thank you. did not": prefetch doesn't help except when it does
[19:57:32] <FromDiscord> <mratsim> you need to optimize data locality first before prefetch helps
[19:57:33] <FromDiscord> <Rika> lmfao
[19:58:54] <FromDiscord> <mratsim> it also only helps when the processor cannot prefetch based on simple logic (i.e. the next item of a seq).
[19:59:08] <FromDiscord> <mratsim> So it might help with tree algorithms like https://github.com/numforge/laser/blob/e23b5d63f58441968188fb95e16862d1498bb845/benchmarks/random_sampling/fenwicktree.nim#L135-L137
[19:59:52] <FromDiscord> <mratsim> or more complex algo where you partition work and prefetching before jumping from partition to partition
[20:00:35] <FromDiscord> <mratsim> example: https://github.com/numforge/laser/blob/e23b5d63f58441968188fb95e16862d1498bb845/benchmarks/transpose/transpose_bench.nim#L293
[20:01:30] <FromDiscord> <mratsim> prefetch was a 10% perf improvement here
[20:02:23] <FromDiscord> <enthus1ast> saw a video lately that talked about execution speed changes based on the position in memory
[20:02:45] <FromDiscord> <enthus1ast> and the author gave a "location randomizer" application, to better benchmark withouth the location bias
[20:03:24] <FromDiscord> <ajusa> Hey mratsim, I was looking at taskpools and was confused by one of the non-goals: does it not support strings as an argument to the task?
[20:03:36] <FromDiscord> <mratsim> In reply to @enthus1ast "saw a video lately": that reminds me of the infamous fibonacci bench in the Nim forum that linked to some weird benchmark artifacts
[20:03:53] <FromDiscord> <mratsim> In reply to @ajusa "Hey mratsim, I was": only if you use arc/orc/boehm
[20:04:36] <FromDiscord> <mratsim> otherwise they are allocated on a thread-local heap and cannot be passed to threads without voodoo ceremony
[20:05:00] <FromDiscord> <ajusa> Ah okay, thanks for clarifying. Neat library, I'll be trying to use it soon!
[20:06:24] <FromDiscord> <mratsim> the voodoo ceremony: https://github.com/nim-lang/Nim/blob/devel/lib/system/channels_builtin.nim#L210-L229
[20:07:48] <FromDiscord> <Rika> In reply to @mratsim "that reminds me of": huh
[20:07:54] <FromDiscord> <Rika> interestiong
[20:09:41] <FromDiscord> <Patitotective> new question: how can i convert `"\\n"` into `"\n"`? https://play.nim-lang.org/#ix=3MA8
[20:09:50] <FromDiscord> <Patitotective> !eval echo repr "\n"
[20:09:54] <NimBot> 0x55ebd8f70870"\10"‚Üµ""
[20:10:33] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3MA8" => "https://play.nim-lang.org/#ix=3MAb"
[20:10:45] <FromDiscord> <Patitotective> `unescape` doesn't seem to be working
[20:11:04] <FromDiscord> <enthus1ast> i would just build a replacement table (on compile time)
[20:11:11] <FromDiscord> <mratsim> In reply to @Rika "interestiong": this one: https://forum.nim-lang.org/t/4253
[20:11:45] <FromDiscord> <enthus1ast> then iterate through your string look up the stuff, emit a new string
[20:12:52] <FromDiscord> <Patitotective> In reply to @enthus1ast "then iterate through your": can you give me an example?
[20:12:55] <FromDiscord> <Patitotective> (edit) "can" => "could"
[20:13:12] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[20:13:42] <FromDiscord> <enthus1ast> not now, i'm on the move sorry
[20:19:23] <FromDiscord> <mratsim> In reply to @enthus1ast "saw a video lately": @Rika https://easyperf.net/blog/2018/01/18/Code_alignment_issues and https://news.ycombinator.com/item?id=18092684
[20:19:38] <FromDiscord> <mratsim> and @enthus1ast
[20:19:47] <FromDiscord> <Rika> intriguing
[20:21:48] <FromDiscord> <Rika> holy shit man performance is such a fickle beast
[20:25:40] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[20:44:12] <FromDiscord> <enthus1ast> @Patitotective\: not what i though of initially, but maybe a simple multiReplace could also work here
[20:44:22] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3MAs
[20:45:53] <FromDiscord> <Patitotective> now is time to write all the two characters hex combinations o_o
[20:46:28] <FromDiscord> <enthus1ast> yes this is what i meant with macro, you could loop over all combinations and generate a proc that does this
[20:46:37] <FromDiscord> <enthus1ast> or loop and parse the hex
[20:50:32] <FromDiscord> <Tanguy> In reply to @enthus1ast "saw a video lately": Saw it too https://youtu.be/r-TLSBdHe1A
[20:51:08] <FromDiscord> <Tanguy> Good talk
[20:54:17] <FromDiscord> <Patitotective> In reply to @enthus1ast "yes this is what": but if I don't type `\00` manually i cannot get the actual value so i dont understand what that macrou would do
[21:02:13] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[21:02:44] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[21:07:31] *** Joins: pro (~pro@user/pro)
[21:11:58] <FromDiscord> <enthus1ast> Was working on an example
[21:12:09] <FromDiscord> <enthus1ast> (During trainride)
[21:12:25] <FromDiscord> <Patitotective> (im writing it manually hehe)
[21:12:35] <FromDiscord> <Patitotective> (edit) "hehe)" => "hehe, thanks anyways)"
[21:12:40] <FromDiscord> <enthus1ast> But it's not yet fully done and I have a thight schedule this evening
[21:12:55] <FromDiscord> <enthus1ast> Maybe I can post what I have
[21:13:03] <FromDiscord> <Patitotective> sure üôÉ
[21:24:13] <FromDiscord> <Patitotective> lol https://play.nim-lang.org/#ix=3MAJ
[21:26:59] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[21:34:27] <FromDiscord> <Szahid> when should i use proc with parentheses? https://play.nim-lang.org/#ix=3MAQ
[21:36:31] <FromDiscord> <mratsim> when you spot the Spanish Inquisition
[21:37:08] <FromDiscord> <mratsim> you also have `add(x, "Hello")` and `add x, "Hello"`
[21:37:19] <FromDiscord> <sigkill> sent a long message, see http://ix.io/3MAX
[21:37:34] <FromDiscord> <sigkill> How supported is compiling shared libraries for use in C/C++?
[21:38:37] <FromDiscord> <mratsim> The "garbage collector" is type dependent and implementation dependent.‚ÜµIf you don't use sequences, strings and ref types, there is no garbage to collect and you can't do pure manual memory management.
[21:39:55] <FromDiscord> <mratsim> the default garbage collector is refcounting with cycle detection via mark-and-sweep.‚Üµ‚ÜµYou can use --gc:arc for deterministic refcounting (with the compiler doing escape analysis to avoid inserting useless increment/decrement)
[21:39:59] <FromDiscord> <Szahid> @mratsim  Can I use it the way I want?
[21:40:05] <FromDiscord> <mratsim> In reply to @Szahid "<@570268431522201601>  Can I": sure.
[21:40:23] <arkanoid> "when you spot the Spanish Inquisition" hahaha
[21:41:55] <FromDiscord> <mratsim> In reply to @sigkill "Hey - i'm looking": That part is because the default garbage collector uses thread-local heaps and so memory has to be reclaimed from the thread that allocated it.‚Üµ‚ÜµFor your use-case, compile with --gc:arc or if you have cycle --gc:orc or if you don't use ref types --gc:destructors
[21:42:05] <FromDiscord> <mratsim> (edit) "In reply to @sigkill "Hey - i'm looking": That part is because the default garbage collector uses thread-local heaps and so memory has to be reclaimed from the thread that allocated it.‚Üµ‚ÜµFor your use-case, compile with --gc:arc or if you have cycle --gc:orc or if you don't use ref types ... --gc:destructors" 03added "at all"
[21:42:52] <FromDiscord> <mratsim> In reply to @sigkill "How supported is compiling": For the shared libs part, I think the gamedev channel use Nim as plugins the most, can't help on that part.
[21:43:52] <FromDiscord> <mratsim> basically once you compile with --app:lib, before calling Nim functions you need to call NimMain() to initialize some runtime stuff and that's all.
[21:44:47] <FromDiscord> <mratsim> I wonder if with --gc:destructors/--gc:none NimMain() is actually needed and for what.
[21:47:44] <FromDiscord> <mratsim> In reply to @sigkill "Hey - i'm looking": Also you can use Nim pretty much like C and switch to full manual memory management.‚Üµ‚ÜµThat's what I do here wit writing my own low-level memory pool: https://github.com/mratsim/weave/blob/master/weave/memory/memory_pools.nim
[21:49:49] <FromDiscord> <mratsim> On a side note, I've been having fun replacing CMake with Nim: https://github.com/numforge/agent-smith/blob/master/third_party/ale_build.nim‚Üµ‚ÜµAnd then calling the built stuff: https://github.com/numforge/agent-smith/blob/master/third_party/ale_wrap.nim
[21:53:49] <FromDiscord> <ajusa> In reply to @ajusa "Ah wasn't sure if": Hm, I might be doing something wrong but treeform somehow has this figured out in jsony, as far as filling in a ref object using fieldPairs
[21:55:25] <FromDiscord> <sigkill> ok - pinged the gamedev channel.
[21:58:12] <FromDiscord> <sigkill> In reply to @mratsim "On a side note,": lol this is neat
[21:59:01] <FromDiscord> <ajusa> In reply to @ajusa "Hm, I might be": figured this out differently from treeform, though I have no clue how well it works.
[22:01:14] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:17:13] <FromDiscord> <hmmm> In reply to @Szahid "when should i use": I always use parentheses üòÉ , I have an irrational fear things will crash and burn without them
[22:17:58] <FromDiscord> <leorize> still needed in case you import any module that have code to be run at top-level scope‚Üµ(@mratsim)
[22:24:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[22:34:56] *** Joins: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:35:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[22:38:12] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[23:12:36] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[23:14:23] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[23:16:30] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:40:56] <FromDiscord> <Patitotective> I was wondering which GUI library is a good choice for making not-so small applications? With active development and various widgets
[23:41:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4)
[23:45:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e9dc:9351:261d:7ec4) (Client Quit)
[23:47:18] <FromDiscord> <leorize> what platforms are you planning to run it on?
[23:49:06] <FromDiscord> <Patitotective> ubuntu and windows
[23:49:09] <FromDiscord> <Patitotective> (edit) "ubuntu" => "linux (ubuntu)"
[23:49:21] <FromDiscord> <Patitotective> mainly linux
[23:49:41] <FromDiscord> <leorize> wxwidgets and/or qml is gonna work for x-platform
[23:49:51] <FromDiscord> <leorize> gintro is great for linux
[23:50:28] *** Joins: dtomato (~dtomato@82-64-189-70.subs.proxad.net)
[23:51:21] <FromDiscord> <Patitotective> i was looking at https://github.com/yglukhov/nimx too but i guess the ones you are saying are in a stabler state
