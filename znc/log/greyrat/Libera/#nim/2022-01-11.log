[00:03:50] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 260 seconds)
[00:04:37] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[00:07:06] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LO2
[00:16:37] *** Quits: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net) (Ping timeout: 240 seconds)
[00:18:47] *** Joins: rlp10 (~rp@cpc77289-basf12-2-0-cust607.12-3.cable.virginm.net)
[00:27:43] *** Parts: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (WeeChat 3.4)
[00:31:42] <FromDiscord> <Elegantbeef> `unpack(a)` depends on runtime values so cannot be used like that afaik
[00:50:24] <arkanoid> I'm really quite stressed by the bad nim+vscode integration since I've started using nim. I've been escaping python due to lack of static typing, I ended up in a development environment where the ide complains hundred of errors and my code if scattered of red and yellow lines, but yet it compiles and runs correctly
[00:50:44] <FromDiscord> <Elegantbeef> Setup your vscode extension
[00:51:02] <FromDiscord> <Elegantbeef> Nimsuggest  doesnt do well with project recognition
[00:51:23] <FromDiscord> <Michal Maršálek> In reply to @ynfle "For some reason `[T;": @ElegantBeef did you see this?
[00:51:53] <FromDiscord> <Elegantbeef> No but i'm still working on a fix
[00:51:57] <FromDiscord> <Elegantbeef> I had it working but it broke something else
[00:53:09] <FromDiscord> <Michal Maršálek> Oh like improving the compiler to understand that syntax? You are a beast
[00:53:25] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[00:53:46] <FromDiscord> <Elegantbeef> Well it already understands it, it just doesnt propogate it
[00:54:25] <FromDiscord> <Elegantbeef> Meaning it hits the `static T` and doesnt evaluate it properly
[00:55:38] <FromDiscord> <Elegantbeef> But yea arkanoid if using saem's vscode extension set `"nim.project" : ["yourMain.nim"]` if you havent already
[00:55:49] <FromDiscord> <Elegantbeef> It should make it a much nicer experience
[00:56:39] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[00:58:04] <FromDiscord> <Michal Maršálek> In reply to @Michal58 "Hi, why is `nnkHiddenStdConv`": Would you be so kind and look also at this? 🙂
[00:58:11] <arkanoid> Elegantbeef, I'm already doing that, false positive and negatives are still scattered around like polka-dot
[00:58:44] <arkanoid> moreover it doesn't consider nim files in .cache/nim/myproject_d (like futhark wants)
[00:58:48] <FromDiscord> <Elegantbeef> hidden conversions are what the compiler does for converters or when it should convert to a tyep
[00:58:49] <FromDiscord> <Elegantbeef> Odd
[00:59:13] <FromDiscord> <Elegantbeef> Oh that might be a nimsuggest bug
[00:59:27] <FromDiscord> <Elegantbeef> I've never used futhark so i dont know
[01:00:09] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "hidden conversions are what": I see but why is the conversion happening?
[01:01:10] <FromDiscord> <Elegantbeef> int -\> Natural?
[01:02:04] <FromDiscord> <Michal Maršálek> nvm I'm dumb
[01:02:06] <FromDiscord> <Michal Maršálek> Thanks!
[01:09:52] <FromDiscord> <ajusa> can I manually iterate an iterator? Like iterator.next, can iterate, etc? I saw an RFC (the first RFC) but not sure what the state is now, four years later
[01:16:15] <FromDiscord> <Michal Maršálek> Why doesn't this work: https://play.nim-lang.org/#ix=3LOv
[01:18:50] <FromDiscord> <Michal Maršálek> This does work: https://play.nim-lang.org/#ix=3LOw
[01:18:57] <FromDiscord> <Michal Maršálek> Can `static` not be generic?
[01:24:03] <FromDiscord> <Michal Maršálek> This https://play.nim-lang.org/#ix=3LOz creates a different error: "cannot generate VM code for S". What does it mean?
[01:27:45] <FromDiscord> <Michal Maršálek> I actually need more something like this: https://play.nim-lang.org/#ix=3LOC
[01:28:16] <FromDiscord> <Elegantbeef> Closures only↵(@ajusa)
[01:28:23] <FromDiscord> <Elegantbeef> Inline iterators are basically templates
[01:29:04] <FromDiscord> <Elegantbeef> If you want to convert a inline to closure checkout https://github.com/beef331/slicerator/blob/master/tests/test1.nim#L71-L117
[01:30:21] <FromDiscord> <ajusa> In reply to @Elegantbeef "If you want to": Neat, thanks for the example! Guess I'm using slicerator as a dependency lol
[01:30:48] <FromDiscord> <Elegantbeef> Cheers there is also `asResettableClosure` if you want to be able to reset it to default 🙂
[01:31:49] <FromDiscord> <ajusa> is there is a peek option?
[01:32:01] <FromDiscord> <Elegantbeef> There is not
[01:32:25] <FromDiscord> <Elegantbeef> Iterators dont really support peak due to how they work
[01:32:30] <FromDiscord> <Elegantbeef> Atleast Nim's
[01:32:44] <FromDiscord> <ajusa> yeah, I might be too used to cpp's way of doing it
[01:32:50] <FromDiscord> <Elegantbeef> I could implement it though
[01:33:02] <FromDiscord> <kevin> Is there a simple way to prevent Winim pointer operator (`&`) from conflicting with Strformat's `&` formatting operator?
[01:33:16] <FromDiscord> <Elegantbeef> I think i could
[01:33:18] <FromDiscord> <ajusa> In reply to @Elegantbeef "I could implement it": That'd be amazing at least for the project I'm working on, and for iterators in general. I'd think you'd basically just call the iterator and cache the value
[01:33:25] <FromDiscord> <eyecon> In reply to @KatrinaKitten "Not exactly, it can": The empty separator seems to be not the issue, but makes sense; if in doubt I will take a look at the code and not further bother you with this as it's working with the `.join` - thanks again!
[01:34:27] <FromDiscord> <Elegantbeef> I mean `peek` should take a closure iterator, call it once returning the value but resetting the data back to what it was before
[01:34:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LOF
[01:35:26] <FromDiscord> <ajusa> Ah yeah, there's that option as well. I was thinking more call the iterator, save the value, and use that cached value for peek. I think mine would be faster, but yours requires less memory and is simpler to implement as well.
[01:36:03] <FromDiscord> <ajusa> But yes if you can implement that it would make my life a LOT easier
[01:36:37] <FromDiscord> <Elegantbeef> Yea will do it in a minute
[01:36:47] <FromDiscord> <Elegantbeef> Eventually i'll get slicerator onto the nimble registry
[01:37:32] <arkanoid> Elegantbeef, btw I suggest you to try futhark. I've wrapped all the C libs I've encoutered so far in less than 10 lines. It works so well that you actually don't need to make a separate package as polished wrapper, but you use it as-is
[01:37:36] <FromDiscord> <ajusa> I generally check out your Github, treeform, and disruptek on a weekly or so basis just to see the cool stuff lol, so it has been on my radar for a while
[01:38:04] <FromDiscord> <Elegantbeef> Why mine?
[01:38:10] <FromDiscord> <Elegantbeef> I never have anything cool
[01:40:46] <madprops> it's beefy stuff
[01:41:20] <FromDiscord> <ajusa> nah dude, you have some cool stuff. picostd-lib, the constructor helper, slicerator, sumtypes, and kashae are the ones I've either used or considered using
[01:43:49] <FromDiscord> <Elegantbeef> Well sumtypes is superceded by lerorize's union
[01:46:00] <FromDiscord> <ajusa> yeah, I use that instead now
[01:47:08] <FromDiscord> <Elegantbeef> `peek` has been added
[01:48:33] <FromDiscord> <Elegantbeef> There is an optimization to be done for `peek` but i dont feel like doing the low level op to do it 😀
[01:48:33] <FromDiscord> <ajusa> I am eternally grateful
[01:49:04] <FromDiscord> <Elegantbeef> Only copying the progress variable instead of the entire data to reduce memory consumption to the bare minium
[01:49:42] <FromDiscord> <Elegantbeef> But given that `rawEnv` does https://github.com/nim-lang/Nim/blob/version-1-6/lib/system.nim#L2451-L2458 i'm too lazy to presently do it
[01:49:52] <FromDiscord> <ajusa> manual iterators are honestly pretty useful for iterating over multiple lists IMO, especially streams (which is what I'm using it for). Fair enough lol
[01:51:01] <FromDiscord> <Elegantbeef> Guess it'd just be `result = ((NI) `x`.ClE_0)[1]` fetching that before and resetting it after
[01:51:11] <FromDiscord> <Elegantbeef> I think atleast i dont know
[01:51:18] <FromDiscord> <Elegantbeef> Hey it's what the package is meant for
[01:51:22] <FromDiscord> <Elegantbeef> Making iterators nicer
[01:56:01] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[01:59:24] <FromDiscord> <Elegantbeef> What do you mean?
[02:00:53] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:03:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[02:05:54] <FromDiscord> <ajusa> ?
[02:06:20] <FromDiscord> <Elegantbeef> @Michal Maršálek\: follow this for fun https://github.com/nim-lang/Nim/pull/19362  😀
[02:06:35] <FromDiscord> <Elegantbeef> > manual iterators
[02:07:42] <FromDiscord> <ajusa> Like iterators where you can advance and peek easily, not constrained to for loops
[02:07:50] <FromDiscord> <Elegantbeef> Ah
[02:08:05] <FromDiscord> <Elegantbeef> Streams are basically just iterators though
[02:09:53] <FromDiscord> <Elegantbeef> Really i could even make a `a.peek(array): int` which returns amount of elements got
[02:10:32] <FromDiscord> <Elegantbeef> But i think we're getting into where it makes sense to do the low level op to reduce memory usage
[02:11:26] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "<@431798919719288832>\: follow this for": What is  T: static T supposed to mean?
[02:11:52] <FromDiscord> <Elegantbeef> I didnt write that
[02:12:11] <FromDiscord> <Elegantbeef> That's `proc fun[T](a: static[T])`
[02:12:21] <FromDiscord> <Elegantbeef> It's a inferred static
[02:12:27] <FromDiscord> <Elegantbeef> For procedures which always worked apparently
[02:12:36] <FromDiscord> <Elegantbeef> It just doesnt work inside the proc generic params
[02:26:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:30:04] <FromDiscord> <Michal Maršálek> I was referring to `[T, Y: static T]` I would expect a semicolon there instead of the comma.
[02:30:07] <FromDiscord> <Elegantbeef> Well thanks ajusa you got me to have much cheaper resettable iterators
[02:30:31] <FromDiscord> <Elegantbeef> Didnt think about it earlier but i can just reset the state and it seems to work
[02:31:01] <FromDiscord> <Elegantbeef> That's invalid code
[02:31:01] <FromDiscord> <Elegantbeef> Where'd you see that?
[02:32:33] <FromDiscord> <Elegantbeef> That's like `[T: T]` it's illegal recursive code
[02:34:37] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "Where'd you see that?":  https://media.discordapp.net/attachments/371759389889003532/930235711070818344/Screenshot_20220111-000418.png
[02:35:18] <FromDiscord> <Elegantbeef> That's of course supposed to be `;`
[02:35:42] <FromDiscord> <Elegantbeef> Checked the entire PR for that in the comments but couldnt find it, forgot to check the PR comments 😀
[02:36:20] <FromDiscord> <Michal Maršálek> Sorry for not being clear about what I meant
[02:36:23] <FromDiscord> <Isofruit> Hmmm I wonder, can you turn space into a symbol for a proc?
[02:36:29] <FromDiscord> <Elegantbeef> It's fine
[02:36:33] <FromDiscord> <Elegantbeef> You can
[02:36:53] <FromDiscord> <Isofruit> That seems like a damn fine way to break your everything
[02:36:54] <FromDiscord> <Elegantbeef> Nvm
[02:36:59] <FromDiscord> <Elegantbeef> Nah
[02:37:03] <FromDiscord> <Isofruit> Awwww
[02:37:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LOS
[02:37:34] <FromDiscord> <Elegantbeef> you can accquote most characters so you can even have multiline variable names
[02:38:03] <FromDiscord> <Elegantbeef> Compiles
[02:38:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LOT
[02:38:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[02:39:54] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:40:49] <FromDiscord> <ajusa> > cheaper resettable iterators↵cool, I saw you updated the codebase as well 😄
[02:55:11] <adigitoleo> Is there a quick way to copy/unpack from a sequence to array?
[03:01:00] <FromDiscord> <IsaacPaul> In reply to @Elegantbeef "Well sumtypes is superceded": > lerorize's union↵what's this? google shows nothing.
[03:04:53] <FromDiscord> <Elegantbeef> This kids is why you use a similar name on chats as your github name
[03:04:55] <FromDiscord> <Elegantbeef> Fucking leroize
[03:04:57] <FromDiscord> <Elegantbeef> https://github.com/alaviss/union
[03:08:39] <FromDiscord> <Elegantbeef> It's basically what my `sumtypes` was aiming to be
[03:08:44] <FromDiscord> <Elegantbeef> Actually good and nice to use
[03:16:56] <FromDiscord> <IsaacPaul> Looks neat. I was just curious because I'm a fan of using sumtypes as a result.
[03:17:10] <FromDiscord> <IsaacPaul> (edit) "result." => "result for some procedures."
[03:18:00] <FromDiscord> <Elegantbeef> Yea Union is proper sumtypes
[03:18:00] <FromDiscord> <Elegantbeef> not my offbrand version 😀
[03:27:11] <FromDiscord> <ajusa> In reply to @Elegantbeef "Fucking leroize": This trips me up so much, legit thought leorize was a different person than alaviss
[03:27:24] <FromDiscord> <Elegantbeef> They're one in the same
[03:27:40] <FromDiscord> <ajusa> I was like huh, this guy works a lot on the stuff leorize talks about. How about that?
[03:28:19] <FromDiscord> <leorize> lol
[03:28:31] <FromDiscord> <Elegantbeef> This guy right here
[03:28:55] <FromDiscord> <Elegantbeef> Jus saying
[03:28:57] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/930249385449771058/image.png
[03:30:12] <FromDiscord> <Elegantbeef> Atleast cabboose has cabboose on his profile
[03:31:13] <FromDiscord> <ajusa> at least with Elegantbeef -> beef331 it's related, leorize and alaviss just have the letters i and l in common.
[03:31:50] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3LP2
[03:31:59] <FromDiscord> <leorize> lol
[03:32:03] <FromDiscord> <Elegantbeef> ajusa using hashsets
[03:32:10] <FromDiscord> <Elegantbeef> What an amateur
[03:32:19] <FromDiscord> <ajusa> what's the better way of doing this?
[03:32:21] <FromDiscord> <congusbongus> you should use lexicographical distance
[03:32:55] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LP3
[03:32:59] <FromDiscord> <Elegantbeef> or `echo l  a`
[03:33:11] <FromDiscord> <ajusa> huh setutils is a thing, didn't know that
[03:33:29] <FromDiscord> <Elegantbeef> You're welcome
[03:40:39] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:48:04] <NimEventer> New thread by Adigitoleo: Can I haz splat operator, see https://forum.nim-lang.org/t/8793
[04:09:37] *** Joins: Figworm (FiggyWitIt@user/figworm)
[04:12:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:29:03] <FromDiscord> <auxym> hm, `{.completeStruct.}` doesn't have any docs. anyone have info? Nim is telling me I need it for `sizeof` to work
[04:30:50] <FromDiscord> <Elegantbeef> You're attempting to use `sizeof` on a `incompleteStruct`
[04:33:18] <FromDiscord> <auxym> what's an incompleteStruct?
[04:33:28] <FromDiscord> <auxym> I mean it's complete enough for me;)
[04:33:32] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-incompletestruct-pragma
[04:34:56] <FromDiscord> <auxym> ok... but... why? Why would we not want the underlying c struct's size? And if not that, what does it use instead?
[04:35:22] <FromDiscord> <Elegantbeef> https://docs.microsoft.com/en-us/cpp/c-language/incomplete-types?view=msvc-170 i think this might help
[04:36:02] <FromDiscord> <evoalg> In reply to @adigitoleo "Is there a quick": From what I know there isn't a quick way (not like `toSeq` for seq's), as that question has been asked a few times. Since arrays have to be defined at compile time, it means that seq has to be known at compile time too, and so some guru's have given code snippets (eg a template) to convert a static seq to an array at compile time
[04:36:25] <FromDiscord> <auxym> I see, thanks. My C knowledge is somewhat barebones
[04:37:57] <adigitoleo> evoalg: Thanks, I thought about it some more and what I really want is probably some cleverer unpacking, hence the forum post.
[04:39:47] <FromDiscord> <Elegantbeef> https://github.com/haxscramper/hmatching supports unpacking
[04:40:16] <FromDiscord> <Elegantbeef> Unpacking in the compiler would be nicer, but we have packages so use them is my view
[04:41:43] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LPh
[04:42:13] <FromDiscord> <Elegantbeef> That relies on runtime values
[04:42:13] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LPh" => "https://play.nim-lang.org/#ix=3LPj"
[04:42:15] <FromDiscord> <Elegantbeef> Like i said it'll not be possible
[04:42:44] <FromDiscord> <leorize> you can't magically assign a variable like that unfortunately
[04:42:50] <FromDiscord> <Patitotective> hmm
[04:42:52] <FromDiscord> <leorize> do you have a sample code that you want to achieve?
[04:43:02] <FromDiscord> <Patitotective> Yes, wait a sec
[04:43:18] <FromDiscord> <Elegantbeef> That's how you should do it
[04:43:18] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LPk
[04:43:30] <FromDiscord> <Elegantbeef> Wait union does have unpack now cant remember if that was a fever dream
[04:43:45] <FromDiscord> <Patitotective> In reply to @Elegantbeef "Wait union does have": yes, they have
[04:45:28] <FromDiscord> <Patitotective> In reply to @leorize "do you have a": The thing is that I have a `OrderedTable[string, PTableTypes]` and when I access a certain key, it's type is `PTableTypes`, which means all of it's defined procedures won't work, so I'm not sure what should I do, because it would be a pain if you needed to write `talbe[key] as tyoe`
[04:45:45] <FromDiscord> <Patitotective> (edit) "`PTableTypes`," => "`PTableTypes` (a union),"
[04:45:56] <FromDiscord> <Patitotective> (edit) "`talbe[key]" => "`table[key]" | "tyoe`" => "type`"
[04:46:45] <FromDiscord> <Patitotective> Should I share my code?
[04:47:34] <FromDiscord> <leorize> sure
[04:52:06] <FromDiscord> <leorize> not that what you are asking is impossible, but more that it is not very... nice to do, nor will it be very efficient
[04:52:21] <FromDiscord> <leorize> there are several ways, all depending on the context that you want to achieve this
[04:53:49] <FromDiscord> <Patitotective> https://play.nim-lang.org/#ix=3LPm
[04:54:12] <FromDiscord> <Patitotective> What would you recommend then? I cannot stop thinking on python hehe
[04:55:56] <nrds> <06Prestige99> I recommend stop thinking of python :P
[04:56:21] <FromDiscord> <leorize> wow I didn't know that union could do self-referencing types
[04:56:57] <FromDiscord> <Patitotective> In reply to @leorize "wow I didn't know": not sure if thats good or not
[04:57:07] <FromDiscord> <Patitotective> In reply to @nrds "<Prestige> I recommend stop": intersting
[04:57:10] <FromDiscord> <Patitotective> (edit) "intersting" => "interesting"
[04:57:15] <FromDiscord> <Elegantbeef> I'm surprised it even works
[04:57:41] <FromDiscord> <Elegantbeef> That means `PTableTypes` is typed?
[04:57:48] <FromDiscord> <leorize> it is kind of a piece of art
[04:58:30] <FromDiscord> <leorize> yea, it is possible to refer to self within the type declaration context
[04:58:52] <FromDiscord> <Patitotective> https://tenor.com/view/interesting-gif-21942309
[04:59:16] <FromDiscord> <leorize> so from what I can tell you are trying to create a configuration table, right?
[04:59:28] <FromDiscord> <Patitotective> yes
[04:59:58] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LPn
[05:00:15] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[05:00:45] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[05:00:48] <FromDiscord> <leorize> your first problem is that your code is wrong \:p
[05:00:55] <FromDiscord> <Patitotective> where?
[05:01:14] <FromDiscord> <leorize> your `%` operator
[05:01:20] <FromDiscord> <leorize> it doesn't create a table
[05:01:30] <FromDiscord> <Patitotective> yeaa....
[05:01:46] <FromDiscord> <Patitotective> let me try to fix it
[05:01:47] <FromDiscord> <Patitotective> hehe
[05:01:48] <FromDiscord> <Patitotective> why is there no _hehe_ sticker?
[05:01:53] <FromDiscord> <Patitotective> (edit) "why is there no ... _hehe_" 03added "a"
[05:03:50] <FromDiscord> <Patitotective> https://play.nim-lang.org/#ix=3LPo
[05:04:16] <FromDiscord> <Patitotective> Now it does create a table if a table constructor is found, otherwise returns a `PTableTypes` union
[05:09:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:10:13] <FromDiscord> <leorize> at the moment you'll have to make do with this then\: https://play.nim-lang.org/#ix=3LPp
[05:11:15] <FromDiscord> <leorize> the reason is simply that unions are not mutation-friendly
[05:11:45] <FromDiscord> <leorize> esp when placed in a container, because I can't make Nim infer mutation condition for them
[05:12:41] <FromDiscord> <Patitotective> hmm, maybe nim is not ready for _NiPrefs_ (probably im the one thats not)
[05:12:47] <FromDiscord> <Patitotective> thanks anyways
[05:12:48] <FromDiscord> <Patitotective> 🙃
[05:14:18] <FromDiscord> <leorize> JsonNode is much better for the kind of work you are doing here
[05:15:07] <FromDiscord> <leorize> mainly because it is packed with utility for container situations (and it is a container as well)
[05:15:44] <FromDiscord> <Elegantbeef> JsonNode style data structures handle stuff like this much easier
[05:15:57] <FromDiscord> <Elegantbeef> You can make your own version with more types to support what you need
[05:16:12] <FromDiscord> <Elegantbeef> But it seems like jsonNode is fine
[05:16:28] <FromDiscord> <Elegantbeef> Oh and leorize i have a PR for that static typedef issue 😀
[05:16:29] <FromDiscord> <Patitotective> I saw json's code, but it looked like you needed to do `table[key].getInt`, which seems disgusting to me↵but i will try it too lol
[05:16:48] <FromDiscord> <Patitotective> (edit) "`table[key].getInt`," => "`table[key].getType`,"
[05:16:51] <FromDiscord> <leorize> it's not like union will let you get away with that
[05:16:53] <FromDiscord> <Elegantbeef> I mean Nim is statically typed you'll need something like that regardless
[05:17:18] <FromDiscord> <Elegantbeef> you cannot just magically make a variable set to the internal of a variable that depends on runtime information
[05:17:37] <FromDiscord> <Elegantbeef> You can simulate it with macros, but you cannot evet just do `var a = table[key]` and expect `a` to be a variable type
[05:18:50] <FromDiscord> <Patitotective> the problem is that json does only reads and writes (i think), niprefs is supposed to offer a dynamic table interface (updates the file in real time)
[05:19:46] <FromDiscord> <Elegantbeef> Make your own type based off the json file that saves on modification
[05:19:50] <FromDiscord> <leorize> jsonnode is just a data structure
[05:19:56] <FromDiscord> <leorize> how you use that structure is up to you
[05:20:11] <FromDiscord> <leorize> you can `distinct` it, too
[05:20:48] <FromDiscord> <Elegantbeef> Possibly better to distinct it
[05:22:02] <FromDiscord> <leorize> though I'll say that this data structure wastes a lot of memory
[05:22:27] <FromDiscord> <Patitotective> In reply to @leorize "though I'll say that": any recommendation?
[05:22:48] <FromDiscord> <Patitotective> i'm reading about distinct, but seems like the same problem, i gotta define all procedures for the types
[05:23:23] <FromDiscord> <leorize> you can use converter to basically borrow everything
[05:24:13] <FromDiscord> <Patitotective> could you share a minimal code to start from? i'm a bit lost he he
[05:25:35] <FromDiscord> <leorize> https://play.nim-lang.org/#ix=3LPr
[05:26:05] <FromDiscord> <leorize> with this you have access to all JsonNode stuff, but JsonNode stuff can't go the reverse way
[05:33:50] <FromDiscord> <leorize> you'd have to figure out the access pattern of your structure and optimize for that, pretty much↵(@Patitotective)
[05:33:56] <FromDiscord> <leorize> there is an entire book about it\: https://dataorienteddesign.com/dodbook/
[05:34:06] <FromDiscord> <leorize> but if you are lazy like me, use this\: https://github.com/araq/packedjson \:P
[05:38:21] <adigitoleo> Any tips on how to get a string into a File, so I can use it as a small mock for testing?
[05:38:43] <FromDiscord> <leorize> `writeFile`?
[05:50:44] <adigitoleo> can't get it directly into `File` without hitting disk? Just curious
[05:51:06] <FromDiscord> <Elegantbeef> You could use a memorymapped file from `std/memfiles`
[05:51:24] <FromDiscord> <Elegantbeef> Normal files propagate to disk, memorymapped files are in memory
[05:51:37] <adigitoleo> noice
[05:58:03] *** Joins: neurocyte09175 (~neurocyte@user/neurocyte)
[05:58:13] <FromDiscord> <Elegantbeef> Depending on what you're doing a `Stream` might be a better general purpose
[06:00:15] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:00:15] *** neurocyte09175 is now known as neurocyte0917
[06:12:02] <FromDiscord> <IsaacPaul> Anyone know if tables/hashsets work well with open arrays ? I wanna try to avoid copying some of these strings, but also provided lookup tables.
[06:12:41] <FromDiscord> <Elegantbeef> In what way?
[06:12:57] <FromDiscord> <Elegantbeef> Can you use openArray as a value inside one? Not without views
[06:13:07] <FromDiscord> <Elegantbeef> Capturing `openArray` is unsafe
[06:13:22] <FromDiscord> <IsaacPaul> Ah ok
[06:15:00] <FromDiscord> <Elegantbeef> you can use `ref T`
[06:20:22] <FromDiscord> <evoalg> In reply to @Elegantbeef "You could use a": just curious ... what are these used for? If I want data in mem I'd have them in the usual containers ... why would I want it to act like a file?
[06:20:45] <FromDiscord> <Elegantbeef> You can use memfiles for inter process communication
[06:20:57] <FromDiscord> <Elegantbeef> Where your OS thinks it's a file but it's just in memory
[06:21:00] <FromDiscord> <evoalg> ohhhhhh!
[06:23:51] <FromDiscord> <IsaacPaul> In reply to @Elegantbeef "you can use `ref": I'm just writing some helper classes to save me a few keystrokes.↵https://gist.github.com/izackp/984899f956b8dda6709d8d187be99beb I was kinda (overly) concerned about memory usage with the additional indexes.
[06:24:59] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3LPG
[06:26:39] <FromDiscord> <IsaacPaul> hmm that seems iffy tho..
[06:31:02] <FromDiscord> <Elegantbeef> What's iffy about it?
[06:31:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LPJ
[06:31:23] <FromDiscord> <Elegantbeef> Or even `type StringRef = distinct ref string` so you are the function that makes them
[06:32:13] <FromDiscord> <Elegantbeef> The former probably is fine though
[06:32:57] <FromDiscord> <Elegantbeef> You can make a `proc asRef(s: sink string): ref string = new result; result[] = s` to make life easier so you can do `asRef"Hello"` or `s.asRef`
[06:34:31] <FromDiscord> <Elegantbeef> As long as the ref string isnt nil it's basically identical to what you're doing with normal strings
[06:38:56] <FromDiscord> <IsaacPaul> I think the iffy part is that I don't know how to make string == StringByRef so lookup tables work correctly with both lol.
[06:40:27] <FromDiscord> <Elegantbeef> You use the hash for the string
[06:40:45] <FromDiscord> <Elegantbeef> so `proc hash(x: StringRef): Hash = hash(x[])`
[06:41:30] <FromDiscord> <Elegantbeef> Which means you might need to make a generic disinct table that's `Table[hash, T]`
[06:42:55] <FromDiscord> <Elegantbeef> There is also https://nim-lang.org/docs/strtabs.html though it's probably not memory efficient
[06:43:09] <FromDiscord> <Elegantbeef> By the way you do know with `orc/arc` if you dont use the string after adding it to a table it's moved and not copied?
[06:43:14] <FromDiscord> <Elegantbeef> So it's a non allocating operation
[06:44:12] <adigitoleo> how do I use private procs from my package when I'm testing? Is there some alternate import syntax for that?
[06:44:34] <adigitoleo> by testing I mean unit tests in tests/foo.nim
[06:44:38] <FromDiscord> <Elegantbeef> The first thing is "you should test non public API" but the second thing is `import myModule{.all.}`
[06:44:48] <FromDiscord> <Elegantbeef> "you shouldnt test non public API"\
[06:45:04] <FromDiscord> <IsaacPaul> I did not know about strtabs and about orc/arc 😮
[06:45:12] <FromDiscord> <IsaacPaul> (edit) "and about" => "or"
[06:45:16] <adigitoleo> I see, maybe I need to rethink the approach, I'm new to unit testing. Thanks
[06:45:34] <FromDiscord> <Elegantbeef> So i mean you can test it but generally it's bad form
[06:46:00] <FromDiscord> <Elegantbeef> Yea Isaac anywhere you see `sink` means "If we dont need to copy we will not"
[06:46:44] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LPL
[06:47:10] <FromDiscord> <IsaacPaul> good to know
[06:47:23] <FromDiscord> <Elegantbeef> That only works with Nim's Orc/Arc though
[06:47:27] <FromDiscord> <Elegantbeef> if using refc it'll copy afaik
[06:47:58] <FromDiscord> <IsaacPaul> I'm currently using arc, it seems appropriate for a game.
[06:48:06] <FromDiscord> <Elegantbeef> So just by doing `--gc:orc` you can reduce memory footprint
[06:48:40] <FromDiscord> <Elegantbeef> Using orc is fine it'll only worry about places where cycles are and if you dont have any it doesnt matter
[06:49:14] <FromDiscord> <IsaacPaul> I'm used to dealing with cycles since I work in swift/objc for my day job.
[06:49:27] <FromDiscord> <IsaacPaul> So figure I'm fine without it
[06:49:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LPN
[06:53:13] <FromDiscord> <Elegantbeef> Well you do you
[07:30:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[07:35:27] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:09:16] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:11:53] *** Joins: termer (termer@2600:3c02::f03c:91ff:fe1c:eca1)
[08:12:23] <termer> hey, is there any way to set an object property as mutable or immutable?
[08:12:51] <FromDiscord> <Elegantbeef> You cannot set object fields to immutable or mutable you can make properties though
[08:13:00] <termer> I'm getting "<...> cannot be assigned to"
[08:13:32] <termer> how would I go about doing that
[08:13:50] <termer> my object is pretty simple and I don't see what I'm doing that's making its fields immutable
[08:14:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LPY
[08:15:17] <termer> interesting
[08:15:35] <termer> well right now I'm not sure why I can't change any of my object fields
[08:15:37] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LQ0
[08:15:46] <FromDiscord> <Elegantbeef> You declared it with `let`
[08:15:50] <FromDiscord> <Elegantbeef> `let` is immutable `var` is mutable
[08:16:06] <FromDiscord> <Elegantbeef> If you're ina proc you passed it without `var`
[08:16:21] <termer> https://play.nim-lang.org/#ix=3LQ1
[08:16:23] <termer> this is my object
[08:16:34] <termer> all of the fields seem to be immutable
[08:16:56] <FromDiscord> <Elegantbeef> How do you declare the variable?
[08:17:20] <FromDiscord> <Elegantbeef> I have a feeling you do `let myVar = Server()`
[08:17:54] <termer> https://play.nim-lang.org/#ix=3LQ2
[08:17:58] <termer> OH
[08:18:01] <termer> you're right
[08:18:08] <FromDiscord> <Elegantbeef> `server: var Server`
[08:18:10] <termer> wait no
[08:18:15] <termer> Oh I see
[08:18:29] <termer> so it's implicitley let then?
[08:18:32] <FromDiscord> <Elegantbeef> If you want to mutate a parameter you have to say `var`
[08:18:43] <FromDiscord> <Elegantbeef> Parameters are implicitly immutable yes
[08:18:53] <termer> I didn't realize that args params were implicitely let
[08:18:59] <termer> thanks so much
[08:19:02] <termer> I was so confused
[08:19:26] <FromDiscord> <Elegantbeef> I did answer a completely unrelated question 😀
[08:19:51] <termer> a very important one lol
[08:20:06] <FromDiscord> <Elegantbeef> Also because of how mutability works in Nim `ref object` fields are mutable
[08:20:40] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LQ4
[08:25:11] <adigitoleo> is there a method for getting all field names of an object?
[08:25:32] <FromDiscord> <Elegantbeef> `for name, _ in object.fieldPairs: echo name`
[08:25:53] <FromDiscord> <Elegantbeef> As long as it's not a variant object it'll work
[08:26:53] <adigitoleo> Oh crap I meant getting the field list for a typedesc
[08:27:16] <FromDiscord> <Elegantbeef> `for name, _ in typeDesc().fieldPairs: ...` 😀
[08:27:24] <adigitoleo> lol
[08:27:50] <FromDiscord> <Elegantbeef> Types can be instantiated from typedescs so yea it's comically not different
[08:28:06] <FromDiscord> <Elegantbeef> Ideally a macro could be made to make this more tame
[08:28:40] <adigitoleo> meh it's fine, I just didn't grok it
[08:29:22] <FromDiscord> <Elegantbeef> What are you after anywho, somewhat of an odd thing to want
[08:30:24] <adigitoleo> Oh it's not for proper code, just to check stuff in playground, when I can't remember the fields of a type like CatchableError
[08:30:55] <FromDiscord> <Elegantbeef> Ah
[08:31:12] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#Exception
[08:33:48] <FromDiscord> <Elegantbeef> Though i guess a general purpose solution is easier than navigating
[08:34:25] <FromDiscord> <Elegantbeef> you could put a variable inside the `_` block and then do `echo "name: ", name, " type: ", typeof(field)`
[08:50:00] <NimEventer> New thread by Niminem: How to import all identifiers from module, see https://forum.nim-lang.org/t/8794
[09:00:39] <termer> so now I've got a new issue with vars
[09:00:55] <FromDiscord> <Rika> Which is
[09:01:08] <termer> using var Server as a parameter yields a compiler error: server' is of type <var Server> which cannot be captured as it would violate memory safety
[09:01:28] <termer> searching online didn't do much for me since it mostly talks about closures
[09:01:30] <FromDiscord> <Elegantbeef> You're attempting to use a closure with a `var T`
[09:01:33] <FromDiscord> <Elegantbeef> That's unsafe
[09:01:33] <FromDiscord> <Rika> Async I assume
[09:01:36] <termer> async
[09:01:43] <FromDiscord> <Rika> Yup, no can do
[09:02:01] <termer> so can mutable objects not be passed to async procs at all?
[09:02:10] <FromDiscord> <Rika> Either use a ref or redesign I would say
[09:02:42] <termer> switching var Server to ref Server causes random errors everywhere that make no sense
[09:02:55] <termer> is that a syntax error or something
[09:03:05] <termer> Looks like I need to look more into refs
[09:03:49] <FromDiscord> <congusbongus> why not refactor the code so that it returns a result instead of mutating its inputs
[09:04:26] <termer> there is server state that needs to be modified
[09:04:43] <FromDiscord> <Rika> The errors are likely because you have other procs still using var
[09:04:44] <FromDiscord> <congusbongus> yeah so... return the new server state, and have the caller modify the server state
[09:04:44] <termer> like whether it is accepting connections or not, which can change based on events received asynchronously
[09:05:47] <FromDiscord> <Rika> Yeah use a ref then
[09:06:17] <termer> all right
[09:06:36] <termer> I read that's unsafe, is that because I can modify it regardless of whether it was declared as var or let?
[09:06:44] <termer> or are there more pressing concerns
[09:07:05] <FromDiscord> <Rika> I don’t know maybe nil safety
[09:08:30] <termer> how does one get a ref of an existing object
[09:08:42] <FromDiscord> <Elegantbeef> `new Type`
[09:08:55] <FromDiscord> <Elegantbeef> You cannot make a normal object a ref object
[09:09:25] <FromDiscord> <Elegantbeef> Normal objects are conventionally stored on the stack which means you cannot make a ref to it
[09:09:35] <termer> how does that work with constructors then
[09:09:44] <termer> does that mean I will have to write special ref constructors
[09:09:49] <termer> I guess it does
[09:09:57] <FromDiscord> <Elegantbeef> `Server()` does heap allocate
[09:10:13] <FromDiscord> <Elegantbeef> If it's a `ref object` i should add
[09:10:30] <FromDiscord> <Rika> `(ref Server)()` also works
[09:10:52] <termer> all right
[09:11:02] <termer> thanks
[09:25:55] <adigitoleo> ^^ got me thinking about stack vs heap (I'm from python so my square brain don't understand this very well)
[09:26:09] <adigitoleo> I wonder if someone could annotate this to help me out?
[09:26:10] <adigitoleo> https://play.nim-lang.org/#ix=3LQr
[09:26:53] <adigitoleo> Does that all play out on the stack?
[09:27:09] <FromDiscord> <Rika> Yes
[09:27:13] <FromDiscord> <Rika> Except strings
[09:27:25] <FromDiscord> <Rika> Strings in this case are heap
[09:28:18] <adigitoleo> Oh yeah Nim strings are mutable, right
[09:32:00] <FromDiscord> <Rika> That’s not why, it’s that they have variable size
[09:32:45] <FromDiscord> <Elegantbeef> Yea even immutable are heap allocated
[09:32:46] <adigitoleo> Right because you can .add()
[09:33:09] <FromDiscord> <Elegantbeef> Immutable strings are also heap allocated since they're dynamic size
[09:33:14] <FromDiscord> <Elegantbeef> They're not statically known
[09:33:29] <FromDiscord> <Elegantbeef> Plus many immutable strings could easily crash your program if they were not
[09:33:32] <FromDiscord> <Elegantbeef> Stack is relatively small
[09:33:42] <adigitoleo> Ah
[09:33:55] <FromDiscord> <Rika> And alloca() is evil
[10:39:48] *** Joins: PMunch (~PMunch@user/pmunch)
[10:47:47] <szahid> Hello :)
[10:48:20] <FromDiscord> <Elegantbeef> Hello
[10:48:52] <PMunch> Hi
[10:49:04] <FromDiscord> <Elegantbeef> No you!
[10:49:47] <szahid> Is nim ready for production?
[10:50:00] <FromDiscord> <Elegantbeef> People are using it as such
[10:50:06] <PMunch> Well we use it in production at work
[10:50:12] <PMunch> So I'd say so
[10:57:05] <FromDiscord> <Rika> What does “ready for production” mean for you
[10:57:22] <FromDiscord> <Rika> What do you expect out of Nim basically
[11:36:48] <adigitoleo> Compiler says "Error: type mismatch: ...", and I know how to fix it, but in general how do I figure out the typedesc of an error?
[11:37:03] <adigitoleo> Want it for `expect` statement in tests
[11:37:27] <FromDiscord> <Elegantbeef> Mismatches are not exceptions
[11:37:33] <FromDiscord> <Elegantbeef> They're compiler errors
[11:37:47] <adigitoleo> Oof, can I expect them in unittest somehow?
[11:37:49] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:38:04] <FromDiscord> <Elegantbeef> No they're compiler errores
[11:38:38] <FromDiscord> <Elegantbeef> I assume you're from python?
[11:38:43] <adigitoleo> yep
[11:38:57] <FromDiscord> <Elegantbeef> Ah type mismatches are no goes
[11:39:43] <FromDiscord> <Elegantbeef> Meaning if they appear it's user error 😛
[11:40:57] <FromDiscord> <Elegantbeef> Nim is statically typed which means types are known and error at compile time at mismatches
[11:41:21] <adigitoleo> use case is parsing command line, if user gives -f:2.4 then I want to fail because I need integers
[11:41:57] <FromDiscord> <Elegantbeef> well that's a `except ValueError` or w/e `parseInt` returns
[11:42:00] <FromDiscord> <Rika> That’s something else from a type mismatch
[11:42:04] <adigitoleo> so I guess it's a parse error
[11:42:07] <adigitoleo> yeah
[11:42:08] <FromDiscord> <Rika> Yes
[12:21:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:28:25] <NimEventer> New post on r/nim by PrettySeriousUser: connect_the_dotfiles - A (dot)file organizer in Nim, see https://reddit.com/r/nim/comments/s18lw0/connect_the_dotfiles_a_dotfile_organizer_in_nim/
[12:32:01] <FromDiscord> <pietroppeter> interesting article (actually a podcast but there is the transcript) on memory management with author of jq (many remarks on Rust and OCaml). https://signalsandthreads.com/memory-management/ Wish I could understand it 🙂
[12:42:06] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[12:43:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:44:28] <FromDiscord> <Elegantbeef> Is it mostly just talking about move semantics based RC?
[12:44:47] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[12:48:59] <FromDiscord> <pietroppeter> mmh, not really it actually starts from the very basic (it is long, have not read fully). the interviewee (Stephen Dolen) now works on OCaml so it talks a lot about that but it really is rather general about stack vs heap, tracing vs ref counting (at least the first part). it is very well written (well it is actually spoken)
[12:56:44] <FromDiscord> <Elegantbeef> Unrelated but have you played with nimscripter yet? (I seen the forum post 😛 )
[12:59:51] <FromDiscord> <Rika> What
[12:59:54] <FromDiscord> <Rika> Where is that from
[13:00:34] <FromDiscord> <Elegantbeef> Huh?
[13:03:23] <FromDiscord> <Rika> The nim scripter plug
[13:03:28] <FromDiscord> <Rika> Why suddenly
[13:03:43] <FromDiscord> <Elegantbeef> Cause he mentioned it in a forum post
[13:04:02] <FromDiscord> <Rika> Eeh which
[13:04:19] <FromDiscord> <Elegantbeef> We also talked about it beefore
[13:05:24] <FromDiscord> <Elegantbeef> https://forum.nim-lang.org/t/8777 this one
[13:10:30] <FromDiscord> <pietroppeter> In reply to @Elegantbeef "Unrelated but have you": no not yet! I guess until FOSDEM I will likely not have time (unless I manage to talk about it for FOSDEM talk, I think I will mention it anyway)
[13:11:11] <FromDiscord> <pietroppeter> btw, when I did the Made in Nim forum post I was surprised by the link which gave the interactive application, did it change with respect to when you first shared it?
[13:11:24] <FromDiscord> <Elegantbeef> No
[13:11:34] <FromDiscord> <Elegantbeef> Always was snake
[13:12:26] <FromDiscord> <pietroppeter> but was it already playable? I remember seeing a video, not something I can interact with
[13:12:44] <FromDiscord> <pietroppeter> (btw I realized now it is snake... 🤦‍♂️ )
[13:13:19] <FromDiscord> <Elegantbeef> That link has always been a scriptable snake
[13:13:19] <FromDiscord> <Rika> 0/10 not the mathematical game Nim
[13:13:44] <PMunch> Has anyone done Nim in Nim yet?
[13:13:59] <FromDiscord> <Rika> Sounds like a meme idea
[13:14:50] <FromDiscord> <pietroppeter> In reply to @Elegantbeef "That link has always": then I am really bad at internet... did you share a video in the chat? well, for anotehr more productive question. the code/build instruction to (re)produce what comes up at that link is available?
[13:15:02] <FromDiscord> <Elegantbeef> I've shared videos before
[13:15:24] <FromDiscord> <pietroppeter> ok, I'll settle for that then and stop thinking I was crazy 😄
[13:15:44] <FromDiscord> <Elegantbeef> That code is not public due to using forked Nico
[13:16:21] <FromDiscord> <Elegantbeef> Though i dont recall if it's needed since i think impbox may have removed the procs
[13:18:32] <FromDiscord> <Elegantbeef> I say required but i was just being lazy
[13:18:38] <FromDiscord> <Elegantbeef> And wanted to use my macro instead of manuall wrapping
[13:23:35] <FromDiscord> <pietroppeter> ok, if you happen to make it public let me know. anyway I checked and experiment it with nimscripter is in my potential task list for FOSDEM presentation (but I expect a small subset of those to be done for the presentation): https://github.com/pietroppeter/soscin22/blob/main/README.md#tasks
[13:34:20] <FromDiscord> <Elegantbeef> I probably should make a few examples
[13:34:27] <FromDiscord> <Elegantbeef> I do have a silly macro inspector example
[13:34:51] <FromDiscord> <Elegantbeef> https://streamable.com/c6farb this thing
[13:41:58] <adigitoleo> is there a way to capture stdout or output of `echo` in a unit test? I prefer to stick with std/unittest if possible
[13:43:29] <adigitoleo> maybe `exec` from nimscript?
[13:44:23] <adigitoleo> Ah nevermind docs tell me about `gorgeEx` from system
[14:18:05] <FromDiscord> <Benjamin> sent a code paste, see https://play.nim-lang.org/#ix=3LRU
[14:18:20] <FromDiscord> <Benjamin> ^ What am I doing wrong? I get this error\: `Error: internal error: /home/runner/work/nightlies/nightlies/nim-1.6.2/compiler/ccgstmts.nim(1597, 18)`
[14:19:58] <FromDiscord> <Elegantbeef> You've created code the Nim compiler doesnt like
[14:21:06] <FromDiscord> <Elegantbeef> I assume it's the async stuffs + route macro
[14:21:37] <FromDiscord> <Elegantbeef> Yep
[14:21:52] <FromDiscord> <Elegantbeef> The usage of async inside one the macros is the issue
[14:21:52] <FromDiscord> <Benjamin> I had another example where it worked inside routes but without case...of. I'll see if I can replicate it.
[14:22:03] <FromDiscord> <Elegantbeef> It might be with the case
[14:22:18] <FromDiscord> <Elegantbeef> Something is creating AST that the compiler doesnt like
[14:22:54] <FromDiscord> <Benjamin> Yeah, it works if I remove the case or routes
[14:23:02] <FromDiscord> <evoalg> In reply to @Rika "That’s not why, it’s": So if strings are on the heap because of variable size, does that mean seq's are also on the heap?
[14:23:10] <FromDiscord> <Elegantbeef> Yes
[14:23:19] <FromDiscord> <evoalg> thx you
[14:23:23] <FromDiscord> <Elegantbeef> Anything that is dynamic tends to be heap allocated
[14:23:38] <FromDiscord> <Elegantbeef> Yea benjamin sorry cant help, create an issue on jester, i'm going to bed
[14:23:38] <FromDiscord> <Benjamin> I guess I'll use if-else as a workaround for now
[14:24:15] <adigitoleo> syntax for tuple type declaration? is it possible?
[14:24:17] <FromDiscord> <Benjamin> Thanks anyway! Goodnight \:)
[14:24:56] <FromDiscord> <Rika> Same syntax as object except you put tuple instead
[14:25:08] <FromDiscord> <Rika> And you can’t declare fields as exported
[14:25:14] <FromDiscord> <Rika> (They’re exported by default)
[14:25:22] <adigitoleo> thanks
[14:40:38] <FromDiscord> <Benjamin> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/930413958697984020): Yeah, it works if I remove the case
[14:48:35] <FromDiscord> <pietroppeter> In reply to @Elegantbeef "https://streamable.com/c6farb this thing": this also looks very nice and also weird (setRenderSettings does not seem valid nimscript code, is the magic happening through some IDE plugin? which IDE is with those nice crowns?)
[14:56:05] <PMunch> I think it's just VSCode
[14:57:44] <FromDiscord> <pietroppeter> I use VS code but I do have different icons though: https://media.discordapp.net/attachments/371759389889003532/930422724642349066/unknown.png
[15:01:23] <FromDiscord> <pointystick> If you search the VS Code extensions for "file icon theme", there are lots of examples.  The first one seems to have that icon (I've not tried it to confirm): https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme
[15:04:14] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3LS7
[15:04:49] <FromDiscord> <Tanguy> (edit) "https://play.nim-lang.org/#ix=3LS7" => "https://play.nim-lang.org/#ix=3LS8"
[15:05:47] <FromDiscord> <Tanguy> Oh, `template hoy: var int = hey` works, nvm
[15:10:03] <PMunch> You could also do `untype`, `typed`, or even `auto` if you'd like
[15:13:13] <szahid> How i can parse JArrar to Array of Structures?
[15:21:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[15:36:47] <FromDiscord> <pietroppeter> In reply to @pointystick "If you search the": thanks!
[15:39:12] <adigitoleo> if tuples are fixed size, why can't I len() them?
[15:39:21] <FromDiscord> <Michal Maršálek> If a large const seq is only used at compile time, is that a guarantee that it will not be present in the binary?
[15:41:34] <FromDiscord> <Rika> In reply to @adigitoleo "if tuples are fixed": https://nim-lang.org/docs/typetraits.html#tupleLen%2Ctypedesc%5B%5D
[15:46:36] <adigitoleo> rika: thanks, although I'd still prefer len() ;) Anyway I should probably take a break.
[15:50:03] <FromDiscord> <Rika> Can just alias the function if you want
[15:51:14] <adigitoleo> yeah it's just getting my pea brain to remember haha
[16:03:43] <FromDiscord> <Yardanico> In reply to @Michal58 "If a large const": yes, since Nim always has DCE enabled
[16:24:24] *** Joins: rockcavera (~rc@192.12.112.107)
[16:24:24] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[16:24:24] *** Joins: rockcavera (~rc@user/rockcavera)
[16:29:38] <PMunch> @Michal_Maršálek, you can even have objects that you pass around from call to call, as long as the object itself is never assigned to a let or a var you're good
[16:29:47] <PMunch> This is what I do in my keyboard firmware
[16:35:07] <FromDiscord> <Michal Maršálek> And if it is assigned to let but never used it stays?
[16:35:18] <FromDiscord> <Michal Maršálek> (edit) "let" => "var"
[16:35:28] <FromDiscord> <Yardanico> if it's just a direct assignment I don't think it'll stay if it's not used
[16:35:33] <FromDiscord> <Yardanico> But why have it in the first place then?
[16:39:58] <FromDiscord> <Michal Maršálek> Not sure I understand the question. My macros need some data to work with which is not needed at runtime.
[16:41:56] <FromDiscord> <Rika> If it’s assigned to a var in a macro it’s fine
[16:46:02] <FromDiscord> <Michal Maršálek> No it's a global that is used my more macros
[16:56:56] <PMunch> What I do in my code is that I save my objects as const
[16:57:37] <PMunch> Then I have macros like `high`, `low`, `output`, `pullup`, etc. that unpacks the fields from the static object on compile-time and rewrites that to the efficient runtime code.
[16:57:58] <PMunch> So none of the compile-time objects are ever stored in memory during runtime
[16:58:32] <PMunch> Although as you can see I use the objects around in my code: https://github.com/PMunch/badger/blob/master/badger.nim
[16:58:42] <PMunch> But I always pass them to macros
[16:58:52] <PMunch> One slightly challenging thing was to make loops work in a good way
[16:59:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:03:13] <PMunch> Originally I just unrolled the loop on compile-time, but that created really big code. So my later approach was to loop over the range of the collection (e.g. `for i in myPins.low..myPins.high`) and then I have a dummy object assigned to the iterator variable with a template to read that dummy type. In the template I have a case statement that selects the correct action based on the value. So the case statement contains all the unpacked versions of my objects, 
[17:03:13] <PMunch> and the reader now just returns the right one.
[17:03:22] <PMunch> This is the `withPinAs` macro
[18:17:00] *** Joins: arkurious (~arkurious@user/arkurious)
[18:28:03] <termer> What would be the best way to convert 2 uint8 into 1 uint16?
[18:28:18] <termer> I'm not familiar with nim's bitshifting interface or whether it uses big endian or little endian
[18:28:36] <termer> or how to find out the platform's endianness if it's platform-dependent
[18:33:43] <FromDiscord> <el__maco> `a shl 8 + b` basically
[18:34:02] <FromDiscord> <el__maco> endianness matters only if you read a and b from some memory location
[18:38:21] <FromDiscord> <Michal Maršálek> Is xor and + the same speed?
[18:38:51] <FromDiscord> <Michal Maršálek> (edit) "xor" => "(x)or"
[18:39:28] <FromDiscord> <Michal Maršálek> (edit) "(x)or" => "`(x)or`" | "+" => "`+`"
[18:39:55] <FromDiscord> <el__maco> you mean `a shl 8 or b`? Yes I don't think there's any difference
[18:43:53] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/vSZ
[18:47:04] <termer> thanks
[18:50:21] *** Joins: covoid19 (~covoid19@190.104.112.156)
[18:51:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[18:54:06] <FromDiscord> <Michal Maršálek> Use the JsonNode constructor or create an init proc.
[18:55:34] <FromDiscord> <Michal Maršálek> And I don't think you need converters to convert between distincts.
[18:57:13] <FromDiscord> <Michal Maršálek> @Patitotective
[18:57:31] <arkanoid> is there a way to generate autmatically .h for exported nim function for C++ / Nim(C) interop?
[18:57:55] <FromDiscord> <Patitotective> In reply to @Michal58 "Use the JsonNode constructor": Thanks, I'm going to create a proc 🙃
[19:00:15] <FromDiscord> <Michal Maršálek> In reply to @Patitotective "Thanks, I'm going to": But I feel like what you wrote should be allowed.
[19:01:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:09:02] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LTm
[19:09:47] <FromDiscord> <Patitotective> I'm trying to create a procedure to create new prefs node automatically, so depending on the type of the object you pass to it, it instances a differend kind of prefs node but it is saying that `Error: selector must be of an ordinal type, float or string`
[19:10:39] <FromDiscord> <Rika> not that i know of, use regular if/else
[19:11:47] <FromDiscord> <Patitotective> k
[19:12:07] <FromDiscord> <Rika> i mean when/else
[19:12:10] <FromDiscord> <Rika> types require when
[19:12:56] <FromDiscord> <Patitotective> and `is`, right?
[19:16:52] <FromDiscord> <Patitotective> What is the problem here? https://play.nim-lang.org/#ix=3LTq
[19:17:14] <FromDiscord> <Patitotective> Not sure if `get`'s template is correct
[19:19:35] <FromDiscord> <Patitotective> Oh, it seems like the return type has to be the same always
[19:20:41] <FromDiscord> <Patitotective> I thought templates weren't procedures (?) Like, the just replaced some piece of code
[19:35:14] <FromDiscord> <Patitotective> Also, in here https://play.nim-lang.org/#ix=3LTw↵It seems like `openArray[PrefsNode]` is not valid (?), what would be the proper way for specifying a unknown length array
[19:35:29] <FromDiscord> <Patitotective> Is that even possible?
[19:35:47] <FromDiscord> <Patitotective> Cause in json, `JArray` is a sequence, not an array
[19:39:31] <FromDiscord> <iffy (Matt Haggard)> How do I get the current system's CPU architecture from within my nim program? e.g. x86, x86\_64, arm64, etc...
[19:41:32] <FromDiscord> <Rika> yeah youre not gonna be able to make a "get" proc like that no
[19:42:00] <FromDiscord> <Rika> In reply to @Patitotective "Cause in json, `JArray`": a "sequence" and an "array" are both lists of objects
[19:42:15] <FromDiscord> <Rika> in JSON, "array" means more of list of objects than literal array
[19:42:24] <FromDiscord> <Rika> so yes dont worry and use a sequence
[19:43:07] <FromDiscord> <Patitotective> In reply to @Rika "so yes dont worry": Thanks 🙃
[19:43:56] <FromDiscord> <Rika> minor changes i made https://play.nim-lang.org/#ix=3LTB
[19:44:24] <FromDiscord> <Rika> ah i just saw the array and seq thing
[19:44:43] <FromDiscord> <Rika> remove the array thing and maybe change PSeq to PList to be more explicit that you dont care if its an arr/seq
[19:45:57] <FromDiscord> <Patitotective> 👍
[20:08:03] <FromDiscord> <Patitotective> Also, why does json creates `JsonNodeObj` and then a ref to it called `JsonNode`?
[20:08:13] <FromDiscord> <Patitotective> I copied it, but I do not understand it hehe
[20:14:02] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#hostCPU
[20:29:32] <FromDiscord> <iffy (Matt Haggard)> ah, perfect... though I wish it were a tuple instead of a string
[20:32:35] <FromDiscord> <Elegantbeef> well if you need to know the arch size you should be able to do `sizeof(pointer)`
[20:40:59] <FromDiscord> <Patitotective> Also, @Rika , Do you think is better to have a template `newPrefsNode` to convert the given type into a `PrefsNode` or multiple procs for each type?
[20:48:58] <FromDiscord> <Rika> i dont follow
[20:50:12] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LTV
[20:51:39] <FromDiscord> <Elegantbeef> The latter is easier to extend
[20:51:57] <FromDiscord> <Elegantbeef> Plus supports other options in case you need them
[20:52:04] <FromDiscord> <Patitotective> Ok 🙃
[20:57:01] <FromDiscord> <Patitotective> What happens if I define the `%` and `%` macros in niprefs and you import json? would you need to do `niprefs.%` or `json.%`?
[20:57:13] <FromDiscord> <Rika> no
[20:57:19] <FromDiscord> <Rika> since your type is distinct
[20:57:33] <FromDiscord> <Rika> that means the json procs are "not compatible" with your type and viceversa
[20:58:11] <FromDiscord> <Elegantbeef> remember Rika %\ are operators that work on anything
[20:58:18] <FromDiscord> <Elegantbeef> So yes you'd have to cause it's ambiguous
[20:58:29] <FromDiscord> <Rika> eh are they
[20:58:33] <FromDiscord> <Rika> i dont recall
[20:58:42] <FromDiscord> <Rika> ah is this the % that works on tuple seqs
[20:58:43] <FromDiscord> <Alea> Is there a way to get the key of the current item while iterating over a table?
[20:58:48] <FromDiscord> <Elegantbeef> `%` is the dumb "toJson" operator
[20:58:50] <FromDiscord> <Patitotective> In reply to @Elegantbeef "So yes you'd have": uh
[20:58:50] <FromDiscord> <Rika> then yeah you would need to disambiguate
[20:59:02] <FromDiscord> <Rika> also i wouldnt recommend it
[20:59:08] <FromDiscord> <Rika> i'd prolly name it something else
[20:59:16] <FromDiscord> <Rika> its both ambiguous and ambiguous
[20:59:18] <FromDiscord> <Elegantbeef> `for key, val in table.pairs`↵(@Alea)
[20:59:26] <FromDiscord> <Alea> Thanks!
[20:59:41] <FromDiscord> <Elegantbeef> `%` is just purposely cryptic
[21:00:02] <FromDiscord> <Rika> not a purpose i would deem worthy for making it cryptic
[21:00:04] <FromDiscord> <Elegantbeef> Name your macro `toNipref` or something not purposely obtuse
[21:00:38] <FromDiscord> <Rika> or a to[T] generic constrained to your type xd
[21:01:20] <FromDiscord> <Patitotective> what about `¬`and `¬`?
[21:01:22] <FromDiscord> <Patitotective> prank
[21:02:22] <FromDiscord> <Rika> your choice
[21:02:48] <FromDiscord> <Patitotective> can a macro be used like `macro{key: val, ...}`?
[21:02:51] <FromDiscord> <Patitotective> without spacing
[21:02:53] <FromDiscord> <Patitotective> (edit) "spacing" => "spacing?"
[21:03:24] <FromDiscord> <Rika> not sure, probably
[21:03:35] <FromDiscord> <Rika> actually depends on the name i guess
[21:03:54] <FromDiscord> <Patitotective> In reply to @Rika "actually depends on the": wdym
[21:04:11] <FromDiscord> <Rika> if its an operator yes, if not im not sure
[21:04:46] <FromDiscord> <Elegantbeef> No it cannot
[21:04:48] <FromDiscord> <Elegantbeef> having a space \> using cryptic operators
[21:04:49] <FromDiscord> <Elegantbeef> Doing `doThing {'a', 'b', 'c', 'd'}` is better than `&$&% {'a', 'b', 'c', 'd'}`
[21:04:52] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LU0
[21:04:56] <FromDiscord> <Elegantbeef> If you want that operator make an untyped template you use, but dont include it in the library
[21:05:06] <FromDiscord> <Elegantbeef> make the library have `toNipref`
[21:05:17] <FromDiscord> <Elegantbeef> Assuming this is a library that's going to be released
[21:05:32] <FromDiscord> <Elegantbeef> If it's not then do whatever you want
[21:06:10] <FromDiscord> <Patitotective> In reply to @Elegantbeef "make the library have": `toPrefs` -_- lmao
[21:06:12] <FromDiscord> <Patitotective> thanks 🙃
[21:06:27] <FromDiscord> <Elegantbeef> Anyway it's better than an operator for 99.9% of people
[21:06:36] <FromDiscord> <Elegantbeef> If they want an operator templates exist
[21:06:57] <FromDiscord> <Patitotective> so json's 👎
[21:07:00] <FromDiscord> <Patitotective> (edit) "so json's 👎 ... " 03added "hehe"
[21:07:06] <FromDiscord> <Elegantbeef> Yea it's fucking stupid
[21:07:24] <PMunch> JSON is stupid?
[21:07:34] <FromDiscord> <Elegantbeef> Json's `%` operator
[21:08:01] <PMunch> Ah, I kinda like it..
[21:08:10] <FromDiscord> <Patitotective> how lucky i am that there's a elegant beef to help me (and a rika, but rika is not beef)
[21:08:20] <FromDiscord> <Elegantbeef> The operator made just to do `toJson` and save 3 characters but looks as intuitive as a knife made out of knifes
[21:08:35] <FromDiscord> <Elegantbeef> See pmunch you can like it but it shouldnt be in the library
[21:08:56] <FromDiscord> <Elegantbeef> If you want `%` you should have to implement it yourself as a template to `toJson`
[21:09:05] <PMunch> That's tedious
[21:09:18] <FromDiscord> <Elegantbeef> It's an ugly operator that is untinutive
[21:09:23] <PMunch> You can make the same argument that if you don't want it you can `import json except `%``
[21:09:35] <FromDiscord> <Elegantbeef> It's like the bitwise operators for C++'s streams
[21:09:38] <FromDiscord> <Elegantbeef> They have 0 reason to being there
[21:09:41] <FromDiscord> <Elegantbeef> Sure that works to
[21:09:58] <FromDiscord> <Elegantbeef> Eitherway it should be a named macro
[21:10:33] <FromDiscord> <Hamid_Bluri> it's not that bad really
[21:10:40] <PMunch> I agree that `toJson` should also exist
[21:10:50] <FromDiscord> <Elegantbeef> It's purposely obtuse imo
[21:10:58] <PMunch> And `%*` just be a template to `toJson` or something like that
[21:11:01] <FromDiscord> <Elegantbeef> It does not show intent, it's just a funky operator
[21:11:13] <FromDiscord> <Rika> purposely? no, more like unnecessarily
[21:11:23] <PMunch> Well with JSON I don't think it's too bad, since the rest of the JSON syntax is there
[21:11:37] <FromDiscord> <Elegantbeef> But you can use it on normal objects
[21:11:59] <FromDiscord> <Elegantbeef> So you're capable of doing `var a = % MyObject(a: 100, b: 20, c: @[10, 2, 30])`
[21:12:02] <PMunch> If I come across something that looks like json, prefixed with an unknown operator, being passed to something that accepts JSON, I will put 2 and 2 together
[21:12:20] <PMunch> Well of course, but that's just silly
[21:12:28] <FromDiscord> <Rika> is it
[21:12:30] <FromDiscord> <Elegantbeef> I've seen it
[21:12:41] <PMunch> Building an object just to immediately jsonize it?
[21:12:52] <FromDiscord> <Elegantbeef> It's just like the stream operators in C++'s streams
[21:12:52] <PMunch> I've seen `let x = %myObj`
[21:12:58] <FromDiscord> <Elegantbeef> They dont make it easyto read
[21:14:15] <PMunch> Well, it's one less word, and if you're adding JSON in there it should be obvious to anyone reading what you're doing
[21:14:29] <FromDiscord> <Rika> is it?
[21:14:44] <FromDiscord> <Rika> if you have "mixed code" say handling json and doing a bunch of other stuff in the same proc
[21:14:48] <FromDiscord> <Rika> is it still obvious
[21:15:03] <PMunch> The stream operators are a bit wonky in different way. Since you don't necessarily get any extra hints to what the operator is doing it might not be that easy to grok what's going on
[21:15:27] <FromDiscord> <Elegantbeef> It's putting operators where they dont belong imo
[21:15:33] <PMunch> @Rika, maybe not, and as I said I would've liked to see a `toJson` proc as well
[21:15:46] <PMunch> If you needed to clarity
[21:15:48] *** Joins: neurocyte09179 (~neurocyte@user/neurocyte)
[21:15:49] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[21:15:49] *** neurocyte09179 is now known as neurocyte0917
[21:17:47] <arkanoid> once I have finished "nimble develop"ing a package and I want to go back to normal package handling, what should I do?
[21:18:20] <arkanoid> I mean, I wanted to test a little change in existing package, and now I want to return to normal "nimble install" condition
[21:18:57] <FromDiscord> <Rika> uninstall the developed package?
[21:19:16] <arkanoid> do you mean "nimble uninstall" or remove the local folder
[21:19:22] <FromDiscord> <Rika> nimble uninstall xxx@#head
[21:19:54] <arkanoid> how does nimble know if the deleted version should be the locally installed one or the one in ~/.nimble
[21:20:09] <FromDiscord> <Rika> the one locally installed is usually versioned #head
[21:20:27] <FromDiscord> <Rika> unless your global install is also head
[21:24:12] <FromDiscord> <Patitotective> ~~nothing feels better than copying and pasting json's code~~
[21:26:26] <FromDiscord> <Michal Maršálek> I guess this is the proper way? @Yardanico   https://nim-lang.org/docs/manual.html#pragmas-compiletime-pragma
[21:29:14] <FromDiscord> <Elegantbeef> Since this is running in a program nimsuggest doesnt have the information of what's valid, which is why the error line on `setRenderSettings`↵(@pietroppeter)
[21:30:03] <FromDiscord> <Elegantbeef> And yea it's just vscode
[21:36:46] <FromDiscord> <Michal Maršálek> In reply to @Patitotective "Thanks, I'm going to": I created an issue: https://github.com/nim-lang/Nim/issues/19367
[21:36:50] <arkanoid> is it possible to make a variant object that is also a "ref object of AnotherObject"?
[21:37:11] <FromDiscord> <Elegantbeef> Actually that shouldnt be supported
[21:37:36] <arkanoid> ok, np, I can wrap the variant one into the ref one
[21:37:45] <FromDiscord> <Patitotective> In reply to @Michal58 "I created an issue:": 👍
[21:38:22] <FromDiscord> <Elegantbeef> Can you not just make a variant object inside a inheriting object?
[21:38:31] <FromDiscord> <Elegantbeef> But michal that shouldnt be supported
[21:38:33] <arkanoid> exactly
[21:38:54] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "But michal that shouldnt": Sorry for spamming the github than :/ why not?
[21:39:03] <arkanoid> btw I'm experimenting with nimqml and I'm having quite good results!
[21:39:04] <FromDiscord> <Michal Maršálek> (edit) "than" => "then"
[21:39:23] <FromDiscord> <Elegantbeef> I atleast dont think it should, since distinct should always be converted from the "base" to validate the type
[21:39:30] <arkanoid> I think there should be more interest in this package, it enables one of the most used gui library in industry
[21:39:37] <FromDiscord> <Elegantbeef> When you can create a value directly you cannot get the same validations
[21:40:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LU9
[21:40:02] <FromDiscord> <Elegantbeef> But only when you borrow `.` operators
[21:40:10] <FromDiscord> <Elegantbeef> Otherwise distinct doesnt make much sense
[21:40:46] <FromDiscord> <Michal Maršálek> Hmm, I'm not sure I understand, the proposition is just a syntactic sugar
[21:40:52] <FromDiscord> <Michal Maršálek> It shouldn't break anything
[21:41:23] <FromDiscord> <Elegantbeef> It's more than syntax if you dont borrow `.`
[21:42:31] <FromDiscord> <Elegantbeef> Say you have someone import this module that exports `Bar` and constructs their own `Bar` that's invalid, you now have unsafe/bad data
[21:43:12] <FromDiscord> <Elegantbeef> The only type the Object construction syntax should be allowed is when you borrow dots since that means you can access the fields
[21:43:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LUc
[21:44:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/Jkm
[21:44:35] <FromDiscord> <Michal Maršálek> Hmm
[21:45:25] <FromDiscord> <Michal Maršálek> In reply to @Elegantbeef "Say you have someone": Can you restructure this sentence please?
[21:52:03] <FromDiscord> <ajusa> Is there a library for Nim/Go interop? I think there is one for Rust that status(?) came up with but can't remember.
[21:52:30] <FromDiscord> <Elegantbeef> `since I'd expect Bar to behave the same as if I just copied the type definition of Foo.` I think is the reason you think this
[21:52:30] <FromDiscord> <Elegantbeef> Bar should not be the same as if you copy Foo since one big usage of distincts is to validate data
[21:52:31] <FromDiscord> <Elegantbeef> Atleast those are my thoughts
[21:53:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[21:53:47] <FromDiscord> <Elegantbeef> Assuming someone is using `Bar` as a validated `Foo` so the field `data` is known good data, if you can construct `Bar`s the data cannot be considered validated
[21:54:16] <FromDiscord> <Elegantbeef> For a distinct to have purpose everything but assignment should be explicitly added to the object
[21:54:54] <FromDiscord> <Elegantbeef> that and conversion from/to base of course
[21:58:23] <FromDiscord> <Michal Maršálek> I see
[21:58:45] <FromDiscord> <Michal Maršálek> Thank you again. 🙂
[22:00:06] <FromDiscord> <Michal Maršálek> I updated the issue
[22:00:20] <FromDiscord> <Elegantbeef> Comically a fair bit of people get annoyed with distinct's strictness but that's the entire point
[22:02:15] <FromDiscord> <Smarc> How would you check for an existing file if it is empty?
[22:07:02] <FromDiscord> <Elegantbeef> There is `getFileSize`
[22:07:04] <FromDiscord> <Elegantbeef> Both in `io` and `os`
[22:11:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:12:07] <FromDiscord> <Ksr> The doc says:↵> Pragmas are enclosed in the special {. and .} curly brackets.↵I found code that uses `{. }` , dropping the second dot. I also tested it and it works. Is this officially supported? Is there any official info on this?
[22:13:13] <FromDiscord> <Elegantbeef> Yes it's supported
[22:13:33] <FromDiscord> <Ksr> Thx :). Is this mentioned somewhere in the docu?
[22:13:35] *** Parts: perro (~perro@072-191-245-069.res.spectrum.com) (WeeChat 3.0.1)
[22:14:23] <FromDiscord> <Elegantbeef> I do not know, but it is certainly supported
[22:14:51] <FromDiscord> <Ksr> thank you.
[22:22:23] <FromDiscord> <Michal Maršálek> What is the canonical way do singletons?
[22:22:36] <FromDiscord> <Michal Maršálek> (edit) "What is the canonical way ... do" 03added "to"
[22:23:23] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LUm
[22:23:23] <FromDiscord> <Elegantbeef> Not that singletons are really needed in Nim but yea that's basically how
[22:26:17] <PMunch> I remember the first time I read about singletons, this special thing that could only be instantiated once. And I remember thinking to myself "why not just not instantiate something multiple times instead of building a complicated system to make sure it doesn't happen"
[22:26:43] <PMunch> This idea of writing code and not really knowing when stuff is instantiated and how often is a bit alien to me..
[22:27:05] <FromDiscord> <Elegantbeef> Singletons are common in OOP just due to the nature of the language
[22:27:16] <FromDiscord> <Elegantbeef> C# + Unity has a lot of people using them due to the editor
[22:27:21] <PMunch> Yeah I know, and I use them in our C# code at work
[22:27:43] <PMunch> But it feels like a band aid on a broken arm..
[22:28:09] <nrds> <06Prestige99> I use the singleton pattern in my game engine for the "global" input handler, seems fine to me
[22:28:20] <nrds> <06Prestige99> Not something needed very often though
[22:28:46] <FromDiscord> <Elegantbeef> Nim has the added benefit of modules
[22:29:28] <FromDiscord> <Elegantbeef> You can have top level logic run and have a singleton without having to expose that you even instantiated state
[22:29:47] <nrds> <06Prestige99> Yeah that's the best way to do it imo
[22:42:06] <FromDiscord> <pietroppeter> In reply to @Elegantbeef "Since this is running": Ah actually had not noticed setRenderSetting was marked as error. I meant that all those setXxxx identifiers I do not know where they come from (they are not in system or std/macros and I do not see other imports)
[22:42:36] <FromDiscord> <pietroppeter> @ElegantBeef
[22:42:51] <FromDiscord> <Elegantbeef> That's all apart of my nimscripter example
[22:43:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:43:51] <FromDiscord> <Elegantbeef> I'll throw it on git right now so you can have a look around
[22:45:09] <FromDiscord> <Elegantbeef> https://github.com/beef331/nimscripter/blob/master/examples/macrorepl/macrorepl.nim here
[22:46:11] <FromDiscord> <Elegantbeef> macrorepl is just a program you can point at a nimscript file and it'll evaluate it
[22:46:34] <FromDiscord> <Elegantbeef> The two macros inside `macrosports` are how I talk to the binary
[22:49:18] <FromDiscord> <Elegantbeef> All the nimscript stuff to be interested in is https://github.com/beef331/nimscripter/blob/master/examples/macrorepl/macrorepl.nim#L162-L189
[22:51:42] <FromDiscord> <Elegantbeef> If it's unclear the API you expose to Nimscript from Nim using nimscripter is auto imported in the main module(and possibly children module havent checked)
[22:51:58] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LUu
[22:52:05] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LUu" => "https://play.nim-lang.org/#ix=3LUv"
[22:52:11] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LUv" => "https://play.nim-lang.org/#ix=3LUw"
[22:52:18] <FromDiscord> <Patitotective> without having to define it
[22:52:50] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LUx
[22:53:17] <FromDiscord> <Elegantbeef> Damn people like pestering the bridge
[22:54:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LUA
[22:55:26] <FromDiscord> <Elegantbeef> If you want to make multiple parameters defaulted the only way to do so is use a macro or manually
[22:55:32] <FromDiscord> <Patitotective> 😉
[22:55:34] <FromDiscord> <Patitotective> Thanks
[22:57:12] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[22:58:14] *** Joins: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[23:16:17] <FromDiscord> <hmmm> beefy I was looking at the splat thread on the forums, would it be possible to make a macro that takes a variable len seq and splats into ordered named variables like a,b,c,.. or a1,a2,a3,... 🤔
[23:16:48] <FromDiscord> <Elegantbeef> As long as it's not in a call, of course
[23:17:10] <FromDiscord> <Elegantbeef> Assuming you have some form of static information you can
[23:17:33] <FromDiscord> <Elegantbeef> so if you want the first 3 values as variables you can
[23:17:40] <FromDiscord> <hmmm> hmm I'd like to use it exactly to pass the bunch of variables to another proc that has maybe varargs
[23:17:43] <FromDiscord> <Elegantbeef> if you want the first 2 and remainder in a collection you can
[23:18:00] <FromDiscord> <Elegantbeef> If the proc has varargs pass the seq
[23:18:08] <FromDiscord> <Elegantbeef> varargs accepts seq/array
[23:18:11] <FromDiscord> <hmmm> oh
[23:18:16] <FromDiscord> <hmmm> that is comfy
[23:18:20] <FromDiscord> <hmmm> u sure?
[23:19:15] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3LUM
[23:19:15] <FromDiscord> <Elegantbeef> Yes
[23:19:31] <FromDiscord> <Elegantbeef> If you're attempting to do `doThing(10, @[10 ,20])` it will not work for obvious reasons
[23:19:32] <FromDiscord> <hmmm> In reply to @Elegantbeef "so if you want": hmm nu it should work on a seq of any lenght
[23:19:47] <FromDiscord> <Elegantbeef> You cannot unpack a seq dynamically
[23:19:53] <FromDiscord> <Elegantbeef> nim operates on static information
[23:19:59] <FromDiscord> <hmmm> I see
[23:20:08] <FromDiscord> <Elegantbeef> You can only unpack N number of things and then collect the rest or not
[23:20:31] *** Quits: adigitoleo (~adigitole@2001:8003:1d19:4500:e50f:aeef:3171:b583) (Remote host closed the connection)
[23:21:07] <FromDiscord> <Elegantbeef> Personally i'd say to do `doThing @[10] & yourSeq` or similar for passing to varargs if you want to pass a a seq and other args
[23:21:14] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:d1fc:dda9:232e:355e)
[23:23:05] <Amun-Ra> btw. there's some incosistency right now with converting to smaller types, vide: https://play.nim-lang.org/#ix=3LUN will this be fixed and if so, in what direction?
[23:24:32] <FromDiscord> <Elegantbeef> One can be reasoned unsound statically
[23:24:34] <Amun-Ra> should I start adding "and 0xff" when converting to byte?
[23:24:36] <FromDiscord> <Elegantbeef> The other cannot
[23:24:39] <FromDiscord> <hmmm> I had the problem of passing simultaneously a variable len seq to a proc like proc(a[1],a[2]...) passing the seq didn't work and obviously couldn't use a loop
[23:25:01] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[23:25:08] <FromDiscord> <Elegantbeef> They're unchecked integers so i think it's "safe"
[23:25:56] <Amun-Ra> it wraps around in C/C++, I wonder if this will change on "nim level"
[23:29:38] <FromDiscord> <hmmm> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3LUM": beefy and how do you write this if you want to echo every single element separately
[23:30:39] <FromDiscord> <konsumlamm> In reply to @Amun-Ra "should I start adding": yeah, using `and 0xff` is the "correct" way
[23:30:47] <FromDiscord> <konsumlamm> also, why use `byte` instead of `uint8`?
[23:31:37] <Amun-Ra> konsumlamm: one character less ;)
[23:31:52] <Amun-Ra> and it's easier to type so it's win win for me
[23:38:28] <arkanoid> I have a sequence of objects each with a kind attribute. I'd like to turn this into a sequence of sequences where "kind" is grouped, is there a std proc for this? I can surely wrap my own, but seems like a split proc
[23:48:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[23:51:33] <PMunch> Implementing some new stuff for microcontroller programming in preparation for my talk
[23:52:22] <PMunch> I've managed to reduce the latency of my keyboard to less than 1/10th than it used to be, while reducing code size 35%
[23:52:39] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 250 seconds)
[23:52:40] <PMunch> Now the entire keyboard firmware is 2468 bytes
[23:54:21] <FromDiscord> <el__maco> you wrote your keyboard's firmware?
[23:54:24] <arkanoid> PMunch, I'm very interested in your microcontroller project. I'm planning to jump on ESP32 + futhark soon! Btw, I keep having success stories with futhark, I own you a beer or whatever
[23:54:38] <PMunch> For comparison the "hello world" of microcontrollers, blinking the onboard LED, takes 2422 bytes when written in Arduino
[23:55:02] <PMunch> @el__maco, I built and programmed my own keyboard, yes
[23:55:29] <FromDiscord> <el__maco> I guess I should ask if its in Nim
[23:55:47] <PMunch> arkanoid, very happy to hear that. Unfortunately I'm not sure Futhark will work on ESP32, I tried to run it on the AVR headers, but they have to be compiled with avr-gcc so clang isn't able to do it :(
[23:55:55] <PMunch> @el__maco, of course it is :P
[23:55:56] <FromDiscord> <el__maco> probably not if its 2368 bytes 🤔
[23:56:07] <FromDiscord> <el__maco> it is? dang
[23:56:09] <PMunch> https://github.com/PMunch/badger
[23:56:19] <arkanoid> PMunch: oh! sad, I was going to try same for esp32
[23:56:31] <PMunch> @el__maco, or rather: https://github.com/PMunch/badger/tree/final
[23:56:55] <PMunch> I haven't pushed my latest changes though, so the size of that is 3750 bytes
[23:57:05] <arkanoid> is the honey badger the nim mascot? really?
[23:57:32] <PMunch> Haha, it was, but it hasn't been used for many many years now
[23:58:06] <PMunch> arkanoid, and you'll have to meet up at FOSDEM or something once it's back to being physical if you want to buy me a beer :P
[23:58:51] <PMunch> Closest you'll get now is to sponsor me on GitHub, then I can go and buy some beer myself :D
[23:59:06] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LUZ
[23:59:41] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LUZ" => "https://play.nim-lang.org/#ix=3LV0"
