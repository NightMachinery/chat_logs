[00:03:41] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[00:08:17] *** Joins: gaqwas (~john@dynamic-077-009-084-190.77.9.pool.telefonica.de)
[00:11:39] *** Joins: khrbt (~znc@user/khrbt)
[00:12:55] *** Mandus_ is now known as Mandus
[00:13:02] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:32:29] *** Joins: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se)
[00:34:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:43] *** Joins: aeth (~aeth@user/aeth)
[00:39:07] *** Joins: JeromeLon (~jerome@cpc87315-slou4-2-0-cust93.17-4.cable.virginm.net)
[00:40:41] <kagevf> danirukun[m]: how about using M-/ ... it will cycle through possibilities without showing a different buffer
[00:41:21] <kagevf> danirukun[m]: also, with C-c TAB even if the other buffer appears, you can type some more letters and re-try to see if it finds what you want
[00:42:09] <kagevf> danirukun[m]: for the retry, you can just TAB ...
[00:42:33] <kagevf> s/just TAB/just hit TAB/
[00:48:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:54:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[00:55:21] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:55:25] *** Quits: dre (~dre@2001:8003:c932:c301:e309:8ed:b76f:cbc5) (Remote host closed the connection)
[00:57:41] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[00:57:41] *** Joins: greaser|q (greaser@user/greasemonkey)
[00:57:43] *** greaser|q is now known as GreaseMonkey
[00:57:49] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:04:16] *** Quits: JeromeLon (~jerome@cpc87315-slou4-2-0-cust93.17-4.cable.virginm.net) (Ping timeout: 245 seconds)
[01:15:24] *** Quits: pve (~pve@37-33-98-148.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[01:18:42] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 268 seconds)
[01:21:07] *** Joins: khrbt (~znc@user/khrbt)
[01:24:17] *** Quits: cosimone (~user@93-44-185-179.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:26:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 252 seconds)
[01:28:08] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:30:52] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:40:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:47:28] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 268 seconds)
[01:54:41] <danirukun[m]> I finally got it to work, basically it was an issue with me manually trying to init the slime company backend, which I accidentally thought of from an old GH issue
[01:56:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:56:01] *** Joins: igemnace (~ian@user/igemnace)
[01:58:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:59:41] *** Quits: gaqwas (~john@dynamic-077-009-084-190.77.9.pool.telefonica.de) (Ping timeout: 265 seconds)
[02:05:19] *** Joins: paule32 (~paule32@user/paule32)
[02:07:11] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 245 seconds)
[02:08:04] *** Quits: frgo (~frgo@p200300deef0cee00c1b0e1d7086384a7.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:08:33] *** Joins: frgo (~frgo@p200300deef0cee006ca0cd56a384a2c0.dip0.t-ipconnect.de)
[02:17:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:20:11] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[02:24:06] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[02:28:48] *** Joins: dre (~dre@2001:8003:c932:c301:f1bd:cd25:1a12:1468)
[02:30:24] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:30:58] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:54:22] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:8798:e575:b57d:1862)
[02:57:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:00:58] <kagevf> danirukun[m]: great! :)
[03:02:56] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[03:03:10] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[03:03:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[03:05:23] *** Joins: johnjay (~pi@192.142.100.50)
[03:05:40] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 250 seconds)
[03:07:42] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[03:21:15] <Psybur> Is there a proper way to treat #("aaa") as a 2D vector/array? I cant use (aref #("aaa") 0 0) here. But I can do (aref "aaa" 0) just fine.
[03:23:28] <hayley> That's not a 2D vector, that's a vector consisting of a string. (make-array '(1 3) :initial-contents '("abc") :element-type 'character) produces #2A((#\a #\b #\c)) though
[03:23:37] <hayley> s/2D vector/2D array/
[03:23:57] *** Parts: akoana (~ah@user/akoana) ()
[03:34:07] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[03:39:29] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[03:52:16] <Psybur> thanks
[03:52:23] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:00:54] *** Joins: zazzerino (~user@2600:1700:6004:8470::23)
[04:35:45] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:39:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:40:20] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[04:50:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:55:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:56:57] *** Joins: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4)
[04:58:49] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[05:33:25] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[05:38:38] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[05:40:51] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Client Quit)
[05:41:07] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[05:45:49] *** Joins: taiju (~taiju@240b:253:ec40:2400:fdc4:a7f1:8a8e:1585)
[05:58:52] *** Joins: paule32_ (~paule32@user/paule32)
[06:00:20] *** Joins: paule32__ (~paule32@user/paule32)
[06:02:01] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:03:46] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:04:16] *** Joins: paule32 (~paule32@user/paule32)
[06:06:40] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:15:49] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:77ec:1bae:cf66:681) (Ping timeout: 252 seconds)
[06:17:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:28:59] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[06:29:37] *** Joins: srhm (~srhm@user/srhm)
[06:31:15] <beach> Good morning everyone!
[06:33:45] *** Joins: wyrd (~wyrd@70.39.83.14)
[06:45:59] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[06:47:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:51:01] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[06:56:21] *** Quits: wyrd (~wyrd@70.39.83.14) (Quit: leaving)
[07:03:09] <winning-luser> a good morning to read norvig's paip
[07:04:41] *** Quits: taiju (~taiju@240b:253:ec40:2400:fdc4:a7f1:8a8e:1585) (Ping timeout: 245 seconds)
[07:04:50] *** Joins: semz (~none@user/semz)
[07:12:35] *** Joins: wyrd (~wyrd@70.39.83.14)
[07:20:13] *** Joins: zazzerin` (~user@76.217.33.155)
[07:22:17] *** Quits: zazzerino (~user@2600:1700:6004:8470::23) (Ping timeout: 264 seconds)
[07:26:24] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:32:09] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[07:34:45] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[07:38:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Read error: Connection reset by peer)
[07:41:31] *** Joins: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c)
[07:45:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:46:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:49:26] <White_Flame> Have you read your PAIP today?
[07:49:39] <lisp123> White_Flame: Tomoorrow for me :)
[07:49:57] <lisp123> How about you?
[07:49:57] <kagevf> sicp or paip - which one should be read first?
[07:50:18] <White_Flame> paip is more practical, sicp is more foundational/conceptual'
[07:50:18] *** Joins: asarch (~asarch@187.143.57.9)
[07:50:26] <lisp123> Well I haven't finished PAIP. But SICP is a life changing experience
[07:50:48] <lisp123> So with the idea of not having to wait to read SICP, read SICP first :D
[07:51:17] <White_Flame> SICP is also Scheme, PAIP is CL
[07:51:26] <White_Flame> (or is it pre-ansi cl?
[07:51:30] <White_Flame> )
[07:51:53] <kagevf> paip is from 90 or 91, so I guess it's pre-finishing the standard
[07:52:44] <kagevf> I'm hesitant to read non-CL books, but I'm considering making an exception for sicp ... or maybe I should try to work through it in CL??
[07:52:53] <mfiano> Yes, PAIP points to CLtL2 as the definitive reference.
[07:53:19] <White_Flame> I don't recall any mismatch with standard CL, though.  if any, it would be quite minor
[07:53:20] <mfiano> And, even though CLtL2 defined CLOS, it was not widely agreed upon yet, and as such, the book uses structs exclusively.
[07:54:08] <mfiano> (and regular functions)
[07:54:09] <lisp123> kagevf: Actually I find learning a bit of scheme helped liberate and further my understanding of CL. It's not hard to pick up, but eventually you get to know of the differences between the two languages and IMO it makes you better at CL
[07:56:00] <kagevf> lisp123: is there a scheme version of slime for emacs?
[07:57:00] <kagevf> if not, I guess I could use Dr Racket in mit scheme mode ...
[07:57:40] <mfiano> This channel is about Common Lisp. If you want to talk about other Lisps, there is #lisp
[07:58:13] <kagevf> sorry
[07:59:03] <lisp123> kagevf: I have to jump, but I'll send you my .emacs settings for Scheme in a few days. Ok no more scheme in this chat :)
[08:00:43] <kagevf> alright, thanks
[08:01:06] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:01:56] *** Joins: srhm (~srhm@user/srhm)
[08:03:23] <White_Flame> hmm, Psybur is gone, but #2a(#.(coerce "abc" 'list)) is a very hacky way of making it a syntactically 2d vector of chars
[08:04:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:06:19] <mfiano> White_Flame: A vector is specifically 1 dimensional.
[08:06:29] <White_Flame> erm, 2d array ;)
[08:06:36] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[08:07:13] *** Joins: srhm (~srhm@user/srhm)
[08:07:25] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[08:10:46] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:14:01] <asarch> If (foo) calls (bar) and then it calls (baz) to finally calls (spam), is it possible to know where in that in-between process is taking so long time and why?
[08:15:06] <beach> asarch: Profile all the functions.
[08:15:09] <hayley> Just interrupt the program while it's running, and look at the backtrace?
[08:15:41] <asarch> How?
[08:17:08] <asarch> I suspect it is in a string concatenation process after doing a query to a PostgreSQL cluster
[08:17:34] <hayley> C-c C-c in Emacs, C-c in a terminal.
[08:18:31] <asarch> The String concatenation process parses the query output to set it up into HTML elements to respond the message
[08:19:20] <hayley> Well, don't tell me about it, just profile or interrupt it, and see what you get.
[08:19:21] <beach> If you are using SBCL, check out SB-PROFILE:PROFILE.
[08:20:07] <asarch> https://pastebin.com/WEqnQDaq
[08:20:59] <asarch> (SB-PROFILE:PROFILE) output: https://pastebin.com/fvMwnPgm
[08:23:05] <hayley> Oh, okay, this function is being called from another thread, so you cannot interrupt it that easily.
[08:23:35] <asarch> D'oh!
[08:27:26] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[08:28:30] <White_Flame> the statistical profiler can do :threads :all
[08:28:34] <White_Flame> sb-sprof:
[08:28:40] <White_Flame> with-profiling
[08:28:56] <White_Flame> oh,the default is all threads, too
[08:30:31] <asarch> Where could I learn more about profiling?
[08:30:39] <White_Flame> need :report :flat or :graph to see anything
[08:31:00] <White_Flame> http://www.sbcl.org/manual/#Statistical-Profiler
[08:31:51] <asarch> Thank you!
[08:33:25] <beach> asarch: You need to start reading the documentation of the Common Lisp implementation you are using.
[08:39:26] <beach> asarch: If you did that, you would have found this chapter: http://www.sbcl.org/manual/#Profiling
[08:41:36] <asarch> Yeah, I need a way to enabled it globally
[08:42:00] <beach> Enable reading of the SBCL manual?
[08:42:05] <asarch> Instead of doing (sb-sprof:with-profiling ...) for each function
[08:42:40] <asarch> No, I mean, to enabling the profiling for all functions
[08:46:54] *** Joins: dre_ (~dre@1.145.102.166)
[08:47:49] <beach> asarch: WITH-PROFILING doesn't designate the functions that are profiled.
[08:47:55] <beach> It profiles everything.
[08:49:16] *** Quits: dre (~dre@2001:8003:c932:c301:f1bd:cd25:1a12:1468) (Ping timeout: 252 seconds)
[08:49:59] *** Joins: dre__ (~dre@120.156.30.159)
[08:50:04] <White_Flame> "regular" profiling instruments functions.  stastical profiling just interrupts every N milliseconds and sees what functions are on the stack
[08:52:31] *** Quits: dre_ (~dre@1.145.102.166) (Ping timeout: 252 seconds)
[08:53:06] *** Quits: zazzerin` (~user@76.217.33.155) (Remote host closed the connection)
[08:55:31] <mfiano> A nice side-effect of the latter is it annotates the lines of #'disassemble with sample counts
[08:55:40] <mfiano> For whomever didn't know.
[08:56:52] <hayley> Also note that the counts tend to be on the wrong instructions, usually on the instruction after.
[08:57:19] <asarch> https://pastebin.com/vScMnVMm
[08:59:03] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[09:00:09] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[09:00:54] <mfiano> It is a with-* style macro. You wrap it around code
[09:01:03] <mfiano> Such as your toplevel function
[09:01:12] <mfiano> Or key interesting functions
[09:01:13] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[09:01:47] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[09:02:30] <hayley> WITH-PROFILING won't work too well if you already have a server running, and additionally if you create new threads in the body, from experience.
[09:02:41] <asarch> Yeah: (sb-sprof:with-profiling (:max-samples 1000 :report :flat :loop t :show-progress t) (cpu-test 24))
[09:03:04] <asarch> But what if you can only define the function and other process calls it for you?
[09:03:20] <hayley> I vaguely remember this, let me check...
[09:03:50] <asarch> In my case, I do: (defun foo () ...) and some other function calls it for me when the user visits "/foo"
[09:04:32] <hayley> (sb-sprof:start-profiling) <do some stuff you want to profile> (sb-sprof:stop-profiling) (sb-sprof:report :type :flat)
[09:07:15] <mfiano> Don't you also want to reset?
[09:07:27] <mfiano> After reporting, or does that do it automatically?
[09:07:40] <hayley> Yes, reset before profiling again.
[09:07:43] <mfiano> I usually do it before start and after report, just incase
[09:23:52] *** Quits: asarch (~asarch@187.143.57.9) (Ping timeout: 252 seconds)
[09:25:20] *** Joins: gaqwas (~john@dynamic-095-117-114-024.95.117.pool.telefonica.de)
[09:25:47] *** Quits: Catie (~user@24.19.51.175) (Quit: time)
[09:29:25] *** Joins: asarch (~asarch@189.250.233.195)
[09:30:03] <asarch> Ok, this is the log: https://pastebin.com/FkrQv2hq
[09:30:18] <asarch> Sorry but we have the worst Interne' on earth
[09:32:01] <hayley> There's a fair bit of compiler noise, because you profiled loading the file too. But (SB-PCL::FAST-METHOD ELEMENTOS:RENDEREAR (ELEMENTOS:INDICE)) still sticks out.
[09:32:20] <mfiano> Should that be RENDER-EAR or RENDERER?
[09:32:27] <mfiano> also shouldn't that be INDEX?
[09:32:45] <asarch> It is Mexicanglish señor
[09:33:23] <asarch> :-P
[09:34:08] <mfiano> I won't try to read it then.
[09:34:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[09:34:29] <asarch> "   1    617  25.3    880  36.1    617  25.3        -  (SB-PCL::FAST-METHOD ELEMENTOS:RENDEREAR (ELEMENTOS:INDICE))"
[09:35:06] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:35:55] *** Quits: dre__ (~dre@120.156.30.159) (Quit: Leaving)
[09:37:10] <asarch> Actually, this is the function: https://pastebin.com/UDQ2mnHz
[09:41:11] <samebchase> asarch: This is the first time I'm seeing Spanish code. Nice! 🤠
[09:41:37] <asarch> I use to debug more quickly
[09:42:32] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[09:42:39] <hayley> That is the code for the route, but not for the method for RENDEREAR.
[09:44:53] <asarch> Yeah, sorry. Slow Interne': https://pastebin.com/Q5cYgmAZ
[09:45:02] <asarch> That's the code for those functions
[09:45:31] <asarch> A small HTML-code generator
[09:46:40] <hayley> Looks like you guessed right with the string concatenation being a problem.
[09:47:02] <mfiano> Well the algoriothmic time complexity of the indice method is...something
[09:48:42] <hayley> One option would be to collect each rendered row into a string, and then concatenate from that list (e.g. (format nil "~{~a~}" rows)). Though it also would be a good idea to use a HTML library such as CL-WHO.
[09:49:03] <mfiano> Edi himself recommends against that
[09:49:38] <mfiano> Use something else that doesn't suffer from the same fundamental design problems.
[09:49:42] <asarch> That function takes the code from the query, parses its components and the passes the result into the template to make this: https://pasteboard.co/7LEpyJx8qqZp.png
[09:49:45] <mfiano> My recommendation would be spinneret
[09:50:19] <hayley> That's news to me. Where did he say that?
[09:50:40] <mfiano> hayley: In an email I sent him, asking him why he recommended others over his own in Common Lisp Recipes.
[09:51:00] <hayley> Huh. Well.
[09:51:58] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[09:54:02] <asarch> Is there a library to handle big quantity of Strings?
[09:54:29] <asarch> Data processing?
[09:56:44] <hayley> I don't think there are good answers for that question right now. You probably aren't going to concatenate strings any faster than CONCATENATE; you need to avoid concatenating big strings repeatedly.
[09:57:20] <beach> asarch: How big?  I am asking because lots of people, even very smart ones, overestimate the amount of memory required.
[09:57:44] <mfiano> beach: Read the method specialized on INDICE in the link above
[09:57:54] <hayley> beach: The problem is that asarch is performing (setf accumulator (concatenate 'string accumulator another-string)) in a loop.
[09:58:57] <beach> But that's a problem for execution time, right?
[09:59:03] <mfiano> L177 here https://pastebin.com/Q5cYgmAZ
[09:59:38] <hayley> Yes.
[10:00:02] <beach> I was asking about the "handle big quantity of Strings".
[10:02:39] <mfiano> It seems most of that string can be cached at accessor writing time and read at render time.
[10:04:42] <asarch> Yeah, the loop seems to be the problem
[10:05:56] <asarch> However, which other way could parse every element of the original string, give a format and the save the result into a variable?
[10:07:54] <mfiano> I would use an adjustable character vector stored inside the object
[10:08:12] <mfiano> Then you aren't needlessly allocating lots of small strings
[10:08:27] <mfiano> and can just reuse existing memory
[10:09:06] <mfiano> If I understand correctly anyway. This is an algorithmic problem, not really that of a data structure (string)
[10:10:44] <Nilby> Or make a string class that has O(1) concatenation
[10:14:22] <asarch> A fellow from C# was talking about the ConcurrentBag object when you need multiple instances of complex objects and you don't want to allocate memory constantly
[10:14:55] <asarch> You could use a small list to reuse every instance
[10:15:14] <asarch> Is there something similar in Common Lisp?
[10:15:31] *** Quits: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c) (Ping timeout: 245 seconds)
[10:16:27] <beach> I recommend Flexichain for this kind of stuff.
[10:20:04] <asarch> Nice!
[10:32:33] <asarch> I think this kind of situation is the main mantra of Perl, right?
[10:33:16] <asarch> That's why you could easily slurp an entire big file
[10:34:05] *** Joins: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c)
[10:34:08] <asarch> Anyway. See you later and thank you very much for your advices. Have a nice day :-)
[10:34:15] *** Quits: asarch (~asarch@189.250.233.195) (Quit: Leaving)
[10:35:24] *** Quits: gaqwas (~john@dynamic-095-117-114-024.95.117.pool.telefonica.de) (Ping timeout: 265 seconds)
[10:37:52] *** Quits: wyrd (~wyrd@70.39.83.14) (Quit: leaving)
[10:38:11] *** Joins: wyrd (~wyrd@70.39.83.14)
[10:38:45] *** Joins: lieven (~mal@ns2.wyrd.be)
[10:39:22] *** Quits: wyrd (~wyrd@70.39.83.14) (Client Quit)
[10:40:03] *** Joins: wyrd (~wyrd@70.39.83.14)
[10:40:14] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[10:40:41] *** Joins: srhm (~srhm@user/srhm)
[10:45:17] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 246 seconds)
[10:45:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[10:45:41] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[10:47:59] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[10:52:32] *** Quits: wyrd (~wyrd@70.39.83.14) (Quit: leaving)
[10:56:33] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (Quit: No Ping reply in 180 seconds.)
[10:56:49] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[10:58:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[10:58:30] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:00:59] *** Joins: makomo_ (~makomo@user/makomo)
[11:03:50] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[11:04:04] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:04:23] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[11:05:34] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:19:18] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[11:19:39] *** Joins: _heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[11:22:07] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:23:44] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[11:24:16] *** Joins: srhm (~srhm@user/srhm)
[11:25:03] *** _heisig is now known as heisig
[11:31:57] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[11:32:25] *** Joins: srhm (~srhm@user/srhm)
[11:35:24] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:39:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:40:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:51:41] *** Quits: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c) (Ping timeout: 264 seconds)
[11:55:23] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[12:02:16] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[12:28:28] *** Joins: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c)
[12:40:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[12:42:07] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[12:42:16] *** Joins: prxq (~quassel@x4db3dadf.dyn.telefonica.de)
[12:49:41] *** Joins: makomo_ (~makomo@user/makomo)
[12:54:53] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[12:58:20] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[12:58:49] *** Joins: makomo_ (~makomo@user/makomo)
[13:11:15] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:15:08] *** Joins: cranium (~cranium@user/cranium)
[13:26:27] *** Quits: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4) (Remote host closed the connection)
[14:08:09] *** Quits: frgo (~frgo@p200300deef0cee006ca0cd56a384a2c0.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:08:35] *** Joins: frgo (~frgo@p200300deef0cee006ca0cd56a384a2c0.dip0.t-ipconnect.de)
[14:14:15] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[14:21:05] *** Quits: mingus (~jan-magnu@ti0135a400-1638.bb.online.no) (Ping timeout: 264 seconds)
[14:37:36] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[14:39:09] *** Joins: amb007 (~a_bakic@112.39.22.93.rev.sfr.net)
[14:41:26] *** Quits: amb007 (~a_bakic@112.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:43:12] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[14:44:32] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[14:48:55] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 252 seconds)
[14:50:14] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:51:00] *** Joins: srhm (~srhm@user/srhm)
[15:01:50] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[15:02:40] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[15:15:39] *** Joins: tfeb (~tfb@88.98.95.237)
[15:24:16] *** Joins: Bike (~Glossina@71.69.170.70)
[15:24:16] *** ChanServ sets mode: +o Bike
[15:25:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[15:29:30] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[15:30:45] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[15:31:01] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[15:32:59] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[15:37:36] *** Quits: JeromeLon (~jerome@2a00:23c7:999f:3700:8798:e575:b57d:1862) (Ping timeout: 245 seconds)
[15:38:11] *** Joins: mingus (~jan-magnu@ti0135a400-3391.bb.online.no)
[15:38:19] *** Joins: igemnace (~ian@user/igemnace)
[15:38:37] *** Joins: JeromeLon (~jerome@2a00:23c7:999f:3700:3b14:9f18:a45b:5700)
[15:40:23] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[15:43:31] *** Joins: makomo_ (~makomo@user/makomo)
[16:00:18] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:08:48] *** Joins: skeemer (~skeemer@h-158-174-23-142.NA.cust.bahnhof.se)
[16:15:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:20:30] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:20:31] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[16:24:27] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[16:25:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[16:25:29] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[16:25:52] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[16:27:38] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[16:35:53] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[16:37:59] <skeemer> can i use quicklisp to load external dependencies in my project?
[16:40:12] <Bike> usually you write your project with a system definition .asd which includes external dependencies. if you then use quicklisp to load your project, it will take care of downloading anything you don't have downloaded. which is to say yes, but you probably don't want your project to actually use quicklisp itself unless it's a script kind of deal.
[16:40:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[16:43:07] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[16:51:24] *** Joins: cranium (~cranium@user/cranium)
[16:58:48] *** Joins: pve (~pve@188-67-244-139.bb.dnainternet.fi)
[17:00:08] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:01:12] *** Joins: srhm (~srhm@user/srhm)
[17:02:32] <mfiano> Reminder: To anyone looking to have some fun this weekend (and all of next week in their spare time), the Lisp Game Jam friendly competition is kicking off tonight/tomorrow at midnight EDT: https://itch.io/jam/autumn-lisp-game-jam-2021
[17:08:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:16:00] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[17:24:39] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:30:06] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:31:12] *** Joins: makomo_ (~makomo@user/makomo)
[17:31:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:47:10] *** Joins: robin_ (~robin@user/terpri)
[17:47:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:47:39] *** Quits: robin (~robin@user/terpri) (Ping timeout: 265 seconds)
[17:47:50] *** Quits: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it) (Read error: Connection reset by peer)
[17:47:58] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:48:24] *** Joins: robin_ (~robin@user/terpri)
[17:50:00] <stack_> Good morning
[17:50:27] <beach> Hello stack_.
[17:51:59] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:52:57] *** Joins: robin_ (~robin@user/terpri)
[17:53:28] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[17:54:00] *** Joins: robin_ (~robin@user/terpri)
[17:57:04] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 252 seconds)
[17:57:42] *** Joins: srhm (~srhm@user/srhm)
[17:59:52] *** Joins: akoana (~ah@user/akoana)
[18:01:36] <semz> There's also afaik still the problem that quicklisp doesn't verify downloads (has there been movement on that front?)
[18:02:09] <semz> it's one thing to do that on your own machine, but if you ship something that uses quicklisp in normal operation, your users will probably not appreciate that
[18:03:31] *** Joins: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it)
[18:07:41] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Ping timeout: 256 seconds)
[18:07:59] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[18:08:01] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[18:08:34] *** Joins: robin_ (~robin@user/terpri)
[18:09:29] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[18:11:34] *** Joins: Guest-liao (~Guest-lia@101.86.98.144)
[18:22:33] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:29:13] *** Joins: Catie (~user@24.19.51.175)
[18:30:23] <JeromeLon> In a unit test, I want to check that a hook is called with the right argument. So I setup a special lexical witness variable, and update it from a lambda in the hook. But SBCL gives a warning, because there is no dynamic variable, even though everything is working fine. Any idea how I can improve this?
[18:30:36] <JeromeLon> Either replacing the witness with something else, or getting rid of the warning?
[18:30:42] <JeromeLon> https://pastebin.com/JzUqcTSG
[18:32:07] <beach> There is no such thing as a special lexical variable.
[18:33:56] <mfiano> JeromeLon: You are experiencing undefined behavior. Referencing a variable before defining it is not allowed by the standard.
[18:35:06] <beach> mfiano: Do you think that's what it is?
[18:35:32] <beach> JeromeLon: Why is the entire thing '(uint testname ...) quoted?
[18:35:47] <JeromeLon> Oh, it's defined before compilation, but it's lexical
[18:36:24] <White_Flame> where is your INCF form coming from?
[18:37:04] <mfiano> Where is defvar or defparameter in relation to that function?
[18:37:10] <White_Flame> but yeah, as far as this code goes, the specialness of *witness* only exists in that LET scope
[18:37:19] <White_Flame> and you need defvar... yeah what mfiano said
[18:37:26] <beach> mfiano: There doesn't have to be if it is declared SPECIAL.
[18:37:48] <mfiano> I missed that line, thanks.
[18:37:50] <White_Flame> if the INCF or access to *WITNESS* also exists outside that LET, then it would be handy
[18:38:29] <JeromeLon> beach: it's a setting that was extracted from a setting repository, and passed as an argument. There are many parts in the setting, the hook is the only one that can be EVALed
[18:38:56] <beach> JeromeLon: But EVAL is executed outside the scope of your LET
[18:38:59] <White_Flame> JeromeLon: just use a defvar instead of locally declaring it special
[18:39:11] <beach> JeromeLon: So your variable is not defined then.
[18:39:29] <JeromeLon> White_Flame: right, but if all unit tests start to rely on defvars nothing is contained anymore
[18:39:30] *** Quits: Guest-liao (~Guest-lia@101.86.98.144) (Quit: Client closed)
[18:39:45] <White_Flame> the defvar is part of the testing harness
[18:40:02] <White_Flame> the defvar as well as the test function that uses it are all local to the testing package
[18:40:45] <JeromeLon> okok, so my solution only works by chance, and I should rely on a proper dynamic variable
[18:41:44] <JeromeLon> thanks all!
[18:42:07] *** Quits: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[18:44:58] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[18:45:47] *** Joins: xaotuk (~xaotuk@89.110.231.41)
[18:48:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:48:59] *** Joins: srhm (~srhm@user/srhm)
[18:54:18] *** Joins: Posterdati (~posterdat@host-87-7-175-125.retail.telecomitalia.it)
[18:54:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:55:31] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:58:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[18:59:56] *** Joins: aeth (~aeth@user/aeth)
[19:06:51] <JeromeLon> For reference, I tried on sbcl, clisp and ecl. In all cases, declaring the lexical variable special works: it's not BOUNDP, but the EVALed sexp has access to it. My test is (defun f1 () (let ((w 0)) (declare (special w)) (eval '(incf w)) w))
[19:09:16] *** Joins: robin (~robin@user/terpri)
[19:13:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:13:50] <beach> JeromeLon: There is no such thing as a lexical special variable.
[19:14:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:19:42] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:19:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:19] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:21:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:23:01] <JeromeLon> beach: ok, how would you call it? "Dynamic variable that is only bound for the scope of the form that introduced it" is incorrect (BOUNDP is false).
[19:27:42] <beach> If the form introduced it, it is bound, unless you explicitly make it unbound.
[19:28:33] <beach> In your case (let (<stuff>)...) is the same as (let ((<stuff> nil))...) so your variable is bound in the scope of the LET.
[19:29:39] <JeromeLon> beach: I agree it is bound. I was mentioning BOUNDP because BOUNDP only returns true for dynamic variables, not lexically bound variables.
[19:32:23] <beach> Sort of.
[19:33:15] <beach> Lexical variables are always bound, but there is no way to pass a lexical variable to BOUNDP.
[19:36:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:37:35] <_death> you should pass (locally (declare (special w)) (incf w)) to eval instead
[19:38:50] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Quit: Bridge terminating on SIGTERM)
[19:38:50] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (Quit: Bridge terminating on SIGTERM)
[19:38:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[19:38:50] *** Quits: yitzi (~yitzi@2001:470:69fc:105::fafd) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: hayley (~theemacss@user/hayley) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: bhyde[m] (~bhydematr@2001:470:69fc:105::70e) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: sp (~sp@user/susam) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d) (Quit: Bridge terminating on SIGTERM)
[19:38:52] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911) (Quit: Bridge terminating on SIGTERM)
[19:38:54] *** Quits: rudi (~rudi@2001:470:69fc:105::dc4b) (Quit: Bridge terminating on SIGTERM)
[19:38:54] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Quit: Bridge terminating on SIGTERM)
[19:38:54] *** Quits: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4) (Quit: Bridge terminating on SIGTERM)
[19:38:54] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (Quit: Bridge terminating on SIGTERM)
[19:38:54] *** Quits: philnum[m] (~argolargo@2001:470:69fc:105::1:16b1) (Quit: Bridge terminating on SIGTERM)
[19:39:24] <beach> Yeah, that's a better solution.
[19:39:47] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[19:41:49] <JeromeLon> _death: nice, this fixes all my issues! No need for defvar, no warning, no global cluttering
[19:42:02] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[19:45:14] <_death> right.. still, I'd usually prefer defvar.. btw we've discussed all this last month I think, but september has been known at last..
[19:45:14] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[19:45:27] *** Joins: bitspook[m] (~bitspookm@2001:470:69fc:105::fcd4)
[19:45:28] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[19:45:28] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[19:45:28] *** Joins: santiagopim[m] (~santiagop@2001:470:69fc:105::e57d)
[19:45:46] *** Joins: rudi (~rudi@2001:470:69fc:105::dc4b)
[19:45:47] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[19:45:48] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[19:45:49] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:45:49] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[19:46:01] <_death> *to last
[19:46:01] <Alfr> JeromeLon, does (boundp 'w) really tell you that w is unbound within the scope of that let? That's strange. (Precluding the case that you've makunbound it.)
[19:46:03] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[19:46:07] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:46:07] *** Joins: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065)
[19:46:07] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[19:46:08] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[19:46:08] *** Joins: sp (~sp@user/susam)
[19:46:23] *** Joins: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7)
[19:46:28] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[19:46:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:46:41] *** Joins: philnum[m] (~argolargo@2001:470:69fc:105::1:16b1)
[19:46:41] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[19:46:41] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:46:42] *** Joins: bhyde[m] (~bhydematr@2001:470:69fc:105::70e)
[19:46:42] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[19:46:42] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[19:46:42] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[19:46:42] *** Joins: danirukun[m] (~dpetrovsm@2001:470:69fc:105::7911)
[19:47:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:48:38] <JeromeLon> Alfr: no, you are right, in the let, it returns true.
[19:48:46] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:49:09] <Alfr> Nice. :)
[19:50:17] <beach> And it's not bound only within the scope of the let, but within the extent of the body of the let.
[19:51:04] <JeromeLon> Alfr: It's from my lambda than BOUNDP is false, even though it can access the variable (in https://pastebin.com/JzUqcTSG)
[19:51:37] <beach> So it is bound inside DECODE-SCALAR too, even though the body of the function DECODE-SCALAR is not in the scope of the LET.
[19:51:43] <_death> if you don't declare special at point of use, it's a lexical variable, e.g. check (funcall (let ((w 123)) (declare (special w)) (eval `(let ((w 42)) (lambda () w))))).. if the variable is free, some implementations take a lenient approach and look it up dynamic environment..
[19:51:53] <Alfr> beach, didn't dynamic scope include dynamic extent?
[19:52:13] <beach> I am not sure there is such a thing as "dynamic scope".
[19:52:18] <beach> Let me check...
[19:52:48] <beach> Ah, yes, you are right.
[19:52:59] <beach> But you need to specify "dynamic" then.
[19:53:01] <_death> "dynamic scope" is a colloquial term that means "indefinite scope and dynamic extent"
[19:53:15] <beach> Yeah.
[19:54:08] <Alfr> beach, I thought that was clear from the context, as it's about that dynamic binding of W. Mea culpa.
[19:55:09] <beach> No worries.  I suppose I should have inferred it.
[19:55:59] <_death> (you can also move the funcall inside the outer LET in the form I gave, with the same result)
[19:59:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:00:58] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:01:21] <JeromeLon> _death: "implementations take a lenient approach and look it up dynamic environment" this sentence explains everything. In particular, it explains why boundp is inconsistent with variable usage, I was finding this very confusing.
[20:02:09] <beach> How is BOUNDP "inconsistent with variable usage"?
[20:02:27] *** Joins: srhm (~srhm@user/srhm)
[20:03:10] <JeromeLon> eval inside (let special) can access the variable, but boundp is false.
[20:03:29] <_death> JeromeLon: is boundp returning false?
[20:03:31] <beach> I think you are confused.
[20:03:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:04:03] <JeromeLon> beach: I might be :-(. Let's me run a few more checks.
[20:04:14] <beach> JeromeLon: I suspect you are under the  impression that the *...* inside your quoted expression refers to the binding in the LET.
[20:04:26] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:04:51] <beach> JeromeLon: The quoted expression is just data until it is handed to EVAL.
[20:04:52] *** Joins: srhm (~srhm@user/srhm)
[20:05:07] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:06:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:07:39] *** Joins: srhm (~srhm@user/srhm)
[20:09:02] <JeromeLon> _death: no, I can't find the boundp returning false case again. I wish I had a better history of all my tests.
[20:09:51] <_death> it does seem strange that boundp notes talk about global environment, btw
[20:11:21] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[20:12:13] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[20:13:12] *** Joins: srhm (~srhm@user/srhm)
[20:13:28] *** Quits: srhm (~srhm@user/srhm) (Remote host closed the connection)
[20:13:35] <JeromeLon> anyway, when the code is consistent (using declare special both in the let and the eval), the behavior is consistent and clearly explained. And the initial weird case (eval having access to the special variable, even though nothing hints at it in its environment, but with a warning) has a reasonable explanation (lenient approach from the implementation)
[20:14:38] <JeromeLon> is that a fair conclusion?
[20:16:47] <_death> yeah.. SBCL warns you because generating that look-up code is not portable and perhaps not what you intended
[20:22:25] <JeromeLon> thanks everybody!
[20:29:23] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (Changing host)
[20:29:23] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[20:40:47] *** Joins: srhm (~srhm@user/srhm)
[20:45:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:45:37] <CodeBitCookie[m]> Hello Everyone!
[20:46:01] <CodeBitCookie[m]> oops, wrong room
[20:47:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:47:14] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:47:59] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:56:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:56:46] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (Ping timeout: 245 seconds)
[20:57:32] <lisp123> From the earlier discussion on Eval --> If I have (eval `(something ,other-thing)) , other-thing can still access the lexical environment in which the eval statement is placed into?
[20:57:38] *** Joins: cosimone` (~user@93-34-134-15.ip49.fastwebnet.it)
[20:57:41] *** Quits: cosimone` (~user@93-34-134-15.ip49.fastwebnet.it) (Remote host closed the connection)
[20:58:00] <lisp123> Because its evaluated before being passed to Eval, is this correct?
[20:58:07] *** Joins: cosimone` (~user@93-34-134-15.ip49.fastwebnet.it)
[21:00:28] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[21:00:46] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[21:01:30] *** Joins: amk (~amk@109.255.169.126)
[21:04:35] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[21:05:35] <_death> your question is unclear.. other-thing presumably is a variable, and its value is used when creating the list that is passed to eval
[21:07:00] *** Joins: makomo_ (~makomo@user/makomo)
[21:07:35] *** Quits: cosimone` (~user@93-34-134-15.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:07:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:09:27] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:09:48] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Read error: Connection reset by peer)
[21:14:59] <lisp123> _death: Yes, lets say other-thing is a variable, and I agree with your second part
[21:15:57] <lisp123> Similarly, (eval `(something ,(other-thing 'mysterious-symbol))) would evaluate other-thing within the lexical environment and pass the resultant list to eval?
[21:17:16] <_death> sure
[21:17:33] <lisp123> Thanks!
[21:17:39] <_death> `(foo ,bar) is basically equivalent to (list 'foo bar)
[21:17:51] <_death> and eval is an ordinary function
[21:18:11] <lisp123> Yes. I was just curious on the earlier comment saying SBCL was being lenient, but perhaps its related to something else.
[21:18:35] <_death> the only thing is that the form it evaluates has no access to the lexical environment active when EVAL is called
[21:18:54] <lisp123> Yes. And that occurs AFTER the arguments are evaluated
[21:22:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Network is unreachable)
[21:22:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:25:12] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[21:29:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:33:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:35:06] *** Quits: taiju (~taiju@240b:253:ec40:2400:354b:1e2d:5d92:ba2c) (Ping timeout: 245 seconds)
[21:45:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:50:00] *** Joins: nature (~nature@45.32.235.173)
[21:52:19] <pjb> JeromeLon: if you don't want to declare it special globaly, you will just have to wrap a local declaration around each use: (locally (declare (special ext::*witness*)) (incf ext::*witness*))
[21:53:15] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[21:57:16] <JeromeLon> pjb: yes, this was suggested by _death, and it's perfect for me, it's what I am using now in that code.
[22:04:33] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[22:14:12] <pjb> great
[22:19:40] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:34:10] *** Joins: gaqwas (~john@dynamic-095-117-114-024.95.117.pool.telefonica.de)
[22:41:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:44:04] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[22:59:24] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[23:06:04] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[23:07:18] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:13:39] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[23:14:31] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[23:19:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:26:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[23:27:04] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:28:16] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:28:51] *** Joins: srhm (~srhm@user/srhm)
[23:29:37] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:39:20] *** Joins: Lycurgus (~juan@98.4.112.204)
[23:46:12] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[23:52:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:52:53] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
