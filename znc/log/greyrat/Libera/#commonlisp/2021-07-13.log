[00:01:35] *** Joins: amb007 (~a_bakic@12.199.23.93.rev.sfr.net)
[00:05:09] *** Quits: frgo (~frgo@dynamic-046-114-144-227.46.114.pool.telefonica.de) (Remote host closed the connection)
[00:06:32] *** Joins: frgo (~frgo@i6DFA8517.versanet.de)
[00:11:14] *** Quits: frgo (~frgo@i6DFA8517.versanet.de) (Ping timeout: 256 seconds)
[00:15:00] *** Quits: amb007 (~a_bakic@12.199.23.93.rev.sfr.net) (Ping timeout: 255 seconds)
[00:18:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:27:02] *** Joins: shka (~herr@109.231.62.239)
[00:32:20] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[00:33:40] *** Joins: pegaso (~reis-r@131.72.121.184)
[00:33:54] *** Quits: silasfox_ (~sbv@2001-4dd1-74a9-0-a1bb-2302-a57-664a.ipv6dyn.netcologne.de) (Ping timeout: 256 seconds)
[00:33:55] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:36:52] *** Joins: amb007 (~a_bakic@26.105.23.93.rev.sfr.net)
[00:38:52] *** Joins: akoana (~ah@user/akoana)
[00:43:32] *** Quits: amb007 (~a_bakic@26.105.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[00:43:59] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Quit: Must not waste too much time here...)
[00:44:53] *** Joins: amb007 (~a_bakic@137.197.23.93.rev.sfr.net)
[00:45:01] *** Joins: tfb (~tfb@88.98.95.237)
[00:45:11] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[00:47:27] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 276 seconds)
[00:47:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[00:50:03] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 276 seconds)
[00:57:45] *** Quits: amb007 (~a_bakic@137.197.23.93.rev.sfr.net) (Ping timeout: 255 seconds)
[01:00:08] *** Joins: amb007 (~a_bakic@42.197.23.93.rev.sfr.net)
[01:05:18] *** Quits: amb007 (~a_bakic@42.197.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[01:05:39] *** Joins: amb007 (~a_bakic@245.196.23.93.rev.sfr.net)
[01:09:10] <contrapunctus> I need to persist some tree-structured data, but I want to be able to read and write to it incrementally, rather than all at once. What would you folks suggest? Writing an incremental reader/writer for s-expressions, object prevalence, CXML, or something else?
[01:10:34] *** Quits: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[01:15:14] <pjb> https://cliki.net/site/search?query=btree
[01:16:11] *** Joins: dsk (~dsk@user/dsk)
[01:24:13] *** Joins: frgo (~frgo@p200300deef181d00a446f159be1fc7eb.dip0.t-ipconnect.de)
[01:29:42] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[01:32:24] *** Quits: amb007 (~a_bakic@245.196.23.93.rev.sfr.net) (Ping timeout: 255 seconds)
[01:33:20] *** Joins: amb007 (~a_bakic@181.197.23.93.rev.sfr.net)
[01:33:47] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:34:32] *** Quits: frgo (~frgo@p200300deef181d00a446f159be1fc7eb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[01:40:54] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[02:21:34] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:23:31] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[02:29:40] *** Quits: pve (~pve@176-93-63-239.bb.dnainternet.fi) (Quit: leaving)
[02:37:57] *** Quits: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Ping timeout: 276 seconds)
[02:40:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:45:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[02:48:09] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:50:43] *** Joins: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net)
[03:02:03] *** Quits: pegaso (~reis-r@131.72.121.184) (Quit: Leaving)
[03:21:45] *** Quits: taiju (~taiju@240b:253:ec40:2400:654f:7566:b735:5f06) (Ping timeout: 255 seconds)
[03:22:11] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:23:27] *** Joins: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de)
[03:32:24] *** Quits: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:45:26] *** Quits: IAmRasputin (~ryan.gann@c-71-192-113-162.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[03:45:57] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[03:46:12] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[03:52:03] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 276 seconds)
[03:55:37] *** Joins: cjb (~cjb@user/cjb)
[03:57:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:43:46] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[04:46:58] *** Quits: random-nick (~random-ni@87.116.177.50) (Ping timeout: 272 seconds)
[04:49:20] *** Quits: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[04:52:17] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 252 seconds)
[04:52:50] *** Joins: trufas (~trufas@177.240.218.218)
[05:12:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:16:06] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[05:26:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 255 seconds)
[05:43:47] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[05:45:44] *** Joins: d4ryus1 (~d4ryus@ppp-188-174-58-62.dynamic.mnet-online.de)
[05:47:56] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de) (Ping timeout: 252 seconds)
[05:50:34] *** Joins: notzmv (~zmv@user/notzmv)
[06:20:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 255 seconds)
[06:23:38] <loke[m]> red-black trees are quite efficient for that.
[06:26:23] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:36:13] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[06:38:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:42:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:43:59] *** Quits: flip214 (~marek@h081217094109.dyn.cm.kabsi.at) (Ping timeout: 255 seconds)
[06:46:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[06:51:18] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[06:55:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[07:05:42] *** Joins: flip214 (~marek@h081217094109.dyn.cm.kabsi.at)
[07:06:45] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[07:18:01] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[07:22:49] <contrapunctus> pjb, loke[m]: thanks, I'll look into those.
[07:25:31] <char> jasom: remember how you said that PBKDF2 was minimum for password hashing and should be used as defaul. in 10 years maybe it will be too weak but changing the default could break someone's application. What do you think of having no default and having an error if the library user doesn't set their own algorithm?
[07:35:51] <beach> Good morning everyone!
[07:38:39] <White_Flame> char: yeah, I missed the rest of the conversation, but that should be the way things are done.  Everything needs at the very least a version number
[07:38:49] <White_Flame> instead of implicit assumptions about formats
[07:39:20] <White_Flame> and the same falls to APIs if they're to be long term
[07:48:00] <char> White_Flame: Do version numbers really help? I think most people are using quicklisp, and I thought, you could not specify version numbers for packages loaded by quicklisp?
[08:16:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:16:32] *** Joins: JoshYoshi (~user@154.57.3.101)
[08:16:36] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 272 seconds)
[08:16:38] *** Quits: JoshYoshi (~user@154.57.3.101) (Remote host closed the connection)
[08:32:34] *** Joins: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de)
[08:33:36] <beach> New issue for WSCL: https://github.com/s-expressionists/wscl/blob/main/wscl-issues/proposed/aref-accessor-dimension-error
[08:34:53] <beach> I would appreciate help with other implementations as before.  And I certainly wouldn't mind if someone were to write issues for other situations, like the DIGIT-CHAR-P I mentioned around 12 hours ago.
[08:37:30] *** Quits: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[08:49:52] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:55:21] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:18:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[09:43:17] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:58:24] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[10:19:54] *** Joins: pjb (~pjb@user/pjb)
[10:34:12] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 255 seconds)
[10:41:22] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[10:52:56] *** Joins: treflip (~user@95.79.32.99)
[10:53:15] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[11:03:16] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:06:18] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[11:15:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:19:37] *** Joins: shka (~herr@109.231.62.239)
[11:20:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 255 seconds)
[11:34:21] *** Joins: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de)
[11:48:48] <gin> any tips on when to use '(("name" . "alice") ("city" . "london")) vs. (list (cons "name" "alice") (cons "city" "london"))?
[11:49:23] <gin> I have heard that if we are going to mutate the list then we should (list (cons ... but if we are not going to mutate the list then we may use '((...
[11:50:18] <gin> But we almost never mutate the list. Even functions like PUSH do not mutate the list. they add a new element and update the place. so is it safe to okay to use '(( ... mostly?
[11:51:52] <beach> Sure, but with a few "but"s.
[11:52:09] <beach> First, PUSH is not a function.  It is a macro.
[11:52:42] <beach> Second, if you do (PUSH ... (CDR LIST)) then you mutate the list, so you can't say in general that PUSH does not mutate anything.
[11:53:38] <beach> Third, are you really sure you never want to delete an element from the list, or update some value in any element?
[11:54:45] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 255 seconds)
[11:55:48] <beach> ... like (SETF (CDR (ASSOC "city" LIST ...)) "birmingham") of the person moves.
[11:55:59] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[11:56:01] *** Joins: djuber` (~user@65.79.128.64)
[11:56:12] <gin> beach: In my code I am following the practice of never mutating the list (I guess that is a good practice?), so looks like it is okay for me to use '(( ... style?
[11:56:35] <beach> So what do you do if the person moves to a different city?
[11:56:38] <gin> beach: Apart from my specific circumstance, is there a best practice or recommendation between '(("name" . "alice") ("city" . "london")) vs. (list (cons "name" "alice") (cons "city" "london")) style?
[11:56:59] <shka> i have my personal guideline of that
[11:57:07] <pjb> gin: also, you may prefer to use keywords or symbols for the keys in a-list instead of lists, since by default, assoc uses EQL to compare the keys.
[11:57:10] <beach> If you are sure that the list will never be mutated, then a literal object is fine.
[11:57:26] <beach> gin: ^
[11:57:35] <pjb> gin:  if you use strings, you will have to use (assoc "name" person-alist :test (function equal))
[11:57:39] <gin> beach: I update the .lisp file with the alist by hand and re-run some functions that make use of the new data. that is my current way of solving my problem.
[11:57:39] <shka> if the list never leaves place (a function usually) where it was created, it is fine
[11:58:04] <beach> gin: Wow, strange.  But, sure, go ahead then.
[11:58:09] <moon-child> gin: I would not say it is 'good practice'.  Avoiding mutations avoids certain types of bugs ('spooky action at a distance') and can sometimes lead to more elegant algorithms.  But sometimes you have to bend over backwards to implement something without mutation, or compromise significantly on performance
[11:58:27] <moon-child> s/sometimes/frequently/
[11:58:37] <pjb> gin: you need to reload  your source, if you mutate the literal objects because that means you've changed the source.
[11:58:42] *** Joins: trufas (~trufas@177.240.218.218)
[11:58:42] <shka> having said that, you may just have policy to not use lists for mutations
[11:58:49] <shka> or at least, not naked lists
[11:58:56] <pjb> gin:  it's actually very dangerous, because the compiler can coalesce similar literal objects.
[11:59:05] <gin> shka: what is your personal guideline?
[11:59:26] <shka> if the list never leaves place (a function usually) where it was created, it is fine to mutate it
[11:59:38] <gin> shka: ok
[12:00:07] <shka> and never mutate lists that you did not create recently
[12:00:25] <shka> like: in the function scope
[12:00:31] <moon-child> shka: so you would not be willing to create a list, mutate it, and then return it?  I think that that's reasonable
[12:00:34] <gin> another question. why use alist for key-value pairs instead of plist? I see that plist can also do everything that alist does, or am I wrong?
[12:00:43] <shka> so far it is fine
[12:00:53] <moon-child> I would say, rather, that one should generally follow the uniqueness rule (codified in clean's type system): only mutate objects which have only one referent
[12:01:16] <shka> this is... much more complicated rule to follow
[12:02:07] <gin> any views on my alist vs. plist question?
[12:02:38] <jdz> shka: Not sure your code mutates literal data, even if the scope is limited to one function.
[12:02:44] * beach keeps quiet.  Too many people giving advice already.
[12:05:00] *** Quits: nature (~nature@mail.blazebone.com) (Quit: leaving)
[12:06:12] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:07:19] <beach> gin: What you are doing seems to be what is known as a "dictionary" in terms of abstract data types.  You would typically design a protocol (= interface) for such a dictionary, and always use it.  Then you can change your implementation when you like without changing client code.
[12:07:44] <beach> gin: You usually don't want your implementation details to propagate all over the place to client code.
[12:08:07] <gin> beach: ok
[12:08:30] <beach> gin: But I am sure you already knew that if you have programmed before in some other language.
[12:08:55] <gin> beach: but then I wonder in Emacs for example (I understand CL is not Elisp) but I am comparing approaches here, in Emacs, alist and plist are exposed to the user for defining properties. they seem to expose the implementation to the user. any views on this?
[12:09:17] <gin> I like that alist and plists are easy to type for the user that wants to specify configuration or some input data.
[12:10:08] <gin> so I made this decision of using alist as the implementation details as well as the user interface. is this uncommon in the CL world? seems to be very common in elisp world.
[12:10:31] <gin> the only unresolved question I have in my mind is "Why alists? Why not plists?"
[12:11:17] <beach> Then, I have no more advice to give.
[12:11:44] <jackdaniel> more elegant representation, like you have (operator . args) in alist you have (attribute . values)
[12:11:57] <jackdaniel> (arguably of course)
[12:12:14] <moon-child> does anyone if any implementations put literal objects in read-only memory, to more easily diagnose mutation of them?
[12:12:38] <moon-child> it seems like a simple, elegant solution (though it does come with a small, constant space overhead), but sbcl and ccl at least don't seem to do it
[12:13:53] <moon-child> actually, no, there needn't be any space overhead, using mirrored memory space; though tlb will bloat somewhat
[12:15:24] <gin> beach: your advice is well taken. don't mean to ignore what you said. it is valuable advice for an inexperienced programmer like me. still in the process of comparing various approaches and understand the pros and cons of each.
[12:15:30] *** Joins: karlosz (~karlosz@router.cloyne.org)
[12:16:08] <gin> I am guessing https://irclog.tymoon.eu/libera/%23commonlisp preserves chat logs in perpetuity, so I can go back and refer to these conversations anytime in future? or is there no guarantee and I must save these chat messages myself?
[12:17:29] <gin> jackdaniel: thank you. elegant representation feels right.
[12:17:57] <contrapunctus> gin: there's no guarantee of even your personal logs surviving, but yes, the channel logs will probably survive 😏
[12:20:05] <gin> contrapunctus: ;)
[12:20:34] <gin> contrapunctus: how does your emoticon appear as emoji but mine does not? do you copy the emoji from somewhere and paste it? or does your client support emoji?
[12:20:46] *** Joins: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de)
[12:27:24] <contrapunctus> gin: I'm using Conversations, and all too many IRC clients don't support emoji. That's all I know. ¯\_(ツ)_/¯
[12:27:35] *** Joins: pve (~pve@87-93-131-24.bb.dnainternet.fi)
[12:35:01] <shka> moon-child: CL lacks concept of immutability
[12:35:08] <shka> everything is mutable
[12:36:15] <moon-child> (setf (car '(1 . 2)) 3)
[12:36:28] <moon-child> the behaviour of the above is undefined
[12:36:40] <shka> gin: honestly, plists are useful only as arguments in macros and the likes, where they look like good old keyword arguments
[12:36:42] <moon-child> I would prefer if an implementation signalled a condition for such code
[12:36:42] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:26] <shka> alist is most useful to have dict that behaves like stack (newly consed value shadows the inner value)
[12:37:44] <shka> but otherwise... nah
[12:38:03] <shka> unsuitable for storing large data sets because of linear lookup
[12:38:42] <shka> as for typing, silly argument imho
[12:38:55] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:41] <shka> you can use https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md#dict-rest-keys-and-values
[12:40:05] <shka> which offers concise syntax
[12:47:22] <jackdaniel> you have protocols for that
[12:47:41] <jackdaniel> i.e if you have only a reader, tgen the slot is immutable
[12:48:27] <jackdaniel> also immutable data structures are a quality of the algorithm, not the language
[12:48:44] <jackdaniel> the latter may help to enforce that qualities
[12:48:57] <pranavats> jackdaniel: Can we not setf the slot-value still?
[12:49:28] <jackdaniel> can't you attach gdb to clojure process and mutate memory cell?
[12:50:02] <beach> pranavats: It is all a matter of conventions.  If you can't trust your programmers to follow conventions, you need to find some different ones.
[12:50:03] <pranavats> Haha.
[12:50:34] <beach> pranavats: You don't export the name of the slot.  Then, the programmer would have to use double package markers, which is a no-no.
[12:50:50] <jackdaniel> it is as with oop - it is a programming technique that may be used in assembly with some conventions (self-imposed ones)
[12:51:34] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:51:45] <beach> pranavats: In fact, using SLOT-VALUE and (SETF SLOT-VALUE) is already a bad sign in client code.
[12:51:47] <jackdaniel> you may write a single block program in java too
[12:53:17] <pranavats> beach: Its a bad sign because its conventional to use accessor functions for that?
[12:53:30] *** Joins: makomo (~makomo@user/makomo)
[12:53:59] <beach> pranavats: It is a bad sign because slots are implementation details and implementation details should not be exploited by the clients of a module.
[12:54:07] <jackdaniel> programming languages are vehicles to put in flesh programming techniques - some vehicles put limitations on what you can do (i.e no faster than 50km/h), but you may drive 50km/h even in a vehicle capable of going 80km/h
[12:55:09] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:55:19] <pranavats> I see.
[12:55:22] <beach> pranavats: Whether some protocol function is a slot accessor or something else, should be transparent to client code, and it may change as the module evolves.
[12:56:23] <beach> pranavats: For example, you may have a protocol function AGE, but whether the age is stored in a slot or computed from the date of birth is unimportant.
[12:57:02] <beach> pranavats: And the maintainer of the module should be able to change this decision without affecting client code.
[12:57:48] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[12:57:56] *** Lord_of_Life_ is now known as Lord_of_Life
[12:59:09] <beach> pranavats: But this is not specific to Common Lisp of course.  If you have done any programming in any other language, then you know that the rules are the same.
[12:59:59] <gin> i was about to ask that. these are general programming concepts, right? not specific to CL? I mean these nuggets of wisdom would serve well in other languages too, right?
[13:00:21] <beach> Yes, modularity is not reserved for Common Lisp in any way.
[13:00:30] <beach> It is elementary software engineering.
[13:00:33] <gin> I have mostly done scripting in shell and python, so I approach programming like scripting. what I am doing with CL right now is effectively write personal scripts to automate some routine tasks.
[13:00:50] <moon-child> to varying degrees.  You must know the conventions of your language, and the extent to which encapsulation is expected and appropriate to a given task
[13:01:00] <gin> this conversation has me worried that I might be picking up bad programming practices while doing this. any book recommendations where I can learn good programming wisdom?
[13:01:57] *** Quits: karlosz (~karlosz@router.cloyne.org) (Ping timeout: 276 seconds)
[13:02:01] <beach> gin: Robert C Martin has some books I think.
[13:02:21] <gin> okay. will search for them. thank you.
[13:04:31] <beach> gin: The concept of modularity goes back many decades, so I am sure there are dozens of books written on the subject, starting in the 1970s or so.
[13:09:43] <gin> one more question about good coding style in CL community. I am checking UIOP source code as inspiration. Take https://github.com/fare/asdf/blob/master/uiop/package.lisp for example. it has many large functions. Within a function, all lines stick to each other. No blank lines at all between lines within a function. in Python this would be unusual, I see people often inserting lots of blank lines to make
[13:09:49] <gin> code equivalent of "paragraphs" and often each paragraph is preceded by comments "# Validate syntax.", "# Check if key exists in DB.", etc.
[13:09:59] <gin> so is it common in CL to write functions without any blank lines in between?
[13:14:19] <beach> If you feel the desire to insert a blank line in the middle of a function, it is likely that you really should make it two functions.
[13:15:28] <beach> gin: You usually insert one blank line between top-level forms.  But no blank lines inside a top-level form.
[13:17:24] <beach> gin: Actually, most functions in that link are not so large.  But it is special because DEFUN forms are often not top-level in that file.
[13:17:59] <beach> gin: So that file is probably not a good example of typical style.
[13:19:35] <gin> beach: ok. any file you can recommend from any source code where I can learn good style from? any file of yours is also okay. I want to keep one file as a reference.
[13:21:27] <beach> gin: Your request is unusual.  The best way of learning these things is to look at lots of code by several other people, and then try to derive some guidelines from that.
[13:22:18] *** Quits: amb007 (~a_bakic@181.197.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[13:23:28] <beach> https://github.com/robert-strandh/Cluffer/blob/master/Standard-buffer/edit-protocol-implementation.lisp maybe, just to choose one of my files at random.
[13:24:23] <gin> beach: thank you. I will read more code in future. just want a starting point to adopt some style. this link is good. looks very neat.
[13:24:47] <beach> Thanks.
[13:33:13] *** Joins: Alfr (~Alfr@user/alfr)
[13:36:29] <pjb> gin: don't confuse large toplevel forms with large functions too. It's true that there are a few large functions in that file, but there are also toplevel forms (eval-when), that contain several functions. These forms can be large, but each function inside is small.
[13:37:13] <pjb> gin: since sexps can be combined like this, the "size" of an item can be non-obvious.  It's like if you had a big python class with a lot of small def.
[13:37:52] <pjb> gin: now, for large functions, it may be also a side effect of formatting. Inserting too many newlines to fit artificial and ancestral 80 columns…
[13:38:35] <pjb> gin: otherwise, in general, more than the textual size of a function, it's the conceptual size that matters.  when you have a function with a lot of check-type forms, for example, there's no conceptual complexity so you can discount those lines.
[13:39:06] <pjb> gin: what matters is that a function does a single thing, not to mix I/O with computation for example. etc.  Then indeed, you should split functions into.
[13:40:01] *** Joins: dsk (~dsk@user/dsk)
[13:40:04] <pjb> gin: also, long functions can denote a procedural style: do this, then do that, then do that… and soon you've got multiple pages.  Instead, if you think more in a functional style or in terms of combination of higher level operations, you will have a natural decomposition into subfunctions.
[13:47:32] *** Joins: easye (~user@oxi.slack.net)
[13:48:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:52:48] *** Joins: amb007 (~a_bakic@249.104.23.93.rev.sfr.net)
[13:53:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:57:51] *** Quits: amb007 (~a_bakic@249.104.23.93.rev.sfr.net) (Ping timeout: 276 seconds)
[13:58:08] *** Joins: amb007 (~a_bakic@92.250.23.93.rev.sfr.net)
[14:09:37] *** Joins: selwyn (~selwyn@user/selwyn)
[14:12:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[14:15:09] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 255 seconds)
[14:23:12] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 276 seconds)
[14:27:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:30:27] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[14:41:06] *** Quits: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:41:34] *** Joins: frgo (~frgo@p200300deef181d00618e54d37c639cfa.dip0.t-ipconnect.de)
[14:44:39] *** Quits: amb007 (~a_bakic@92.250.23.93.rev.sfr.net) (Ping timeout: 276 seconds)
[14:44:47] *** Joins: amb007 (~a_bakic@232.248.23.93.rev.sfr.net)
[14:53:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[14:57:39] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 276 seconds)
[15:00:42] *** Joins: tfb (~tfb@88.98.95.237)
[15:39:48] *** Joins: random-nick (~random-ni@87.116.177.50)
[15:42:20] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:00:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:00:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[16:28:00] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[16:28:18] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[16:34:24] *** Quits: lotuseater (~user@p200300e787091b00dd87cc9c4ffe1d4b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:00:28] *** Quits: rgherdt_ (~rgherdt@ip5f5af43c.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[17:24:57] *** Joins: Bike (~Glossina@71.69.170.70)
[17:24:57] *** ChanServ sets mode: +o Bike
[17:29:54] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 272 seconds)
[17:31:00] *** Quits: recordgroovy (~recordgro@c-67-185-152-122.hsd1.wa.comcast.net) (Quit: leaving)
[17:50:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:52:16] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[17:52:19] *** Joins: dsk (~dsk@user/dsk)
[17:55:45] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 276 seconds)
[18:14:42] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 256 seconds)
[18:17:10] *** Joins: PinealGlandOptic (~PinealGla@37.115.210.35)
[18:18:31] *** Joins: IAmRasputin (~ryan.gann@50-207-73-195-static.hfc.comcastbusiness.net)
[18:26:05] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:29:45] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:31:27] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:31:40] *** Joins: tfb (~tfb@88.98.95.237)
[18:32:15] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:32:27] *** Joins: tfb (~tfb@88.98.95.237)
[18:33:02] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:33:15] *** Joins: tfb (~tfb@88.98.95.237)
[18:33:50] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:34:03] *** Joins: tfb (~tfb@88.98.95.237)
[18:34:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:34:49] *** Joins: tfb (~tfb@88.98.95.237)
[18:35:24] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:35:37] *** Joins: tfb (~tfb@88.98.95.237)
[18:36:12] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:36:24] *** Joins: tfb (~tfb@88.98.95.237)
[18:36:59] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:37:11] *** Joins: tfb (~tfb@88.98.95.237)
[18:37:47] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:37:59] *** Joins: tfb (~tfb@88.98.95.237)
[18:38:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:38:46] *** Joins: tfb (~tfb@88.98.95.237)
[18:39:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:39:34] *** Joins: tfb (~tfb@88.98.95.237)
[18:40:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:40:21] *** Joins: tfb (~tfb@88.98.95.237)
[18:40:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:41:08] *** Joins: tfb (~tfb@88.98.95.237)
[18:41:44] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:41:56] *** Joins: tfb (~tfb@88.98.95.237)
[18:42:31] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:43:18] *** Joins: tfb (~tfb@88.98.95.237)
[18:46:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:47:05] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[18:47:15] *** Joins: tfb (~tfb@88.98.95.237)
[18:47:17] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:58:10] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (*.net *.split)
[18:58:10] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[18:58:10] *** Quits: susam (~susam@user/susam) (*.net *.split)
[18:58:10] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (*.net *.split)
[18:58:10] *** Quits: ^[ (~user@user//x-8473491) (*.net *.split)
[18:58:10] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[18:58:10] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[18:58:10] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[18:58:10] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (*.net *.split)
[18:58:10] *** Quits: casual_friday (~casual_fr@216.71.110.168) (*.net *.split)
[18:58:10] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[18:58:18] *** Joins: jcowan_ (sid325434@id-325434.charlton.irccloud.com)
[18:58:18] *** Joins: susam (~susam@user/susam)
[18:58:22] *** Joins: etiago (~etiago@19.7.169.217.in-addr.arpa)
[18:58:23] *** Quits: etiago (~etiago@19.7.169.217.in-addr.arpa) (Changing host)
[18:58:23] *** Joins: etiago (~etiago@user/etiago)
[18:58:28] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[18:58:32] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[18:58:42] *** Joins: casual_friday (~casual_fr@216.71.110.168)
[18:58:49] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[19:04:14] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[19:23:17] *** jcowan_ is now known as jcowan
[19:27:00] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 255 seconds)
[19:27:45] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[19:39:52] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:42:06] *** Joins: derelict (~derelict@user/derelict)
[19:43:12] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 255 seconds)
[19:53:48] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[19:58:46] *** Joins: ^[ (~user@user//x-8473491)
[20:37:16] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:40:31] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[20:47:10] *** Quits: Devon (~user@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[20:51:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:30:25] *** Joins: sp41 (~spal@64.253.214.14)
[21:40:41] *** Joins: vats (~vats@42.111.23.102)
[21:45:33] *** Joins: nature (~nature@mail.blazebone.com)
[21:51:38] *** Joins: selwyn (~selwyn@user/selwyn)
[21:52:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:54:40] <pranavats> There's a video linked on the chapter on GUIs in CL Cookbook of McClim applications running in a browser using Broadway protocol. Does anybody know how that was made to work? Is there any source code or instructions on how to do that?
[21:56:31] <jackdaniel> pranavats: I'd look in scymtym's repository for a branch with a name branch - he's the author of that backend
[21:56:44] <jackdaniel> s/name branch/name broadway/
[21:57:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[21:57:29] *** Quits: thonkpod (~thonkpod@user/thonkpod) (Ping timeout: 255 seconds)
[21:57:46] <jackdaniel> as of how this is possible - the api of the "browser side" in gtk is available to read, so this backend targets this api (as far as I'm aware there are two flavours - vector based and raster based, and broadway backend implements both)
[21:58:24] <pranavats> Thank you
[21:58:58] <jackdaniel> sure
[22:00:15] <jackdaniel> n.b. I've published a long overdue progress report on mcclim blog
[22:03:13] <pranavats> Reading it now. Thanks.
[22:06:48] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[22:08:03] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:10:18] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[22:13:38] *** Quits: vats (~vats@42.111.23.102) (Ping timeout: 272 seconds)
[22:17:32] *** Joins: vats (~vats@42.111.14.169)
[22:17:32] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:20:45] *** Joins: paulapatience (~paul@23-233-104-4.cpe.pppoe.ca)
[22:23:19] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[22:28:52] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 245 seconds)
[22:36:37] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:36:49] *** Joins: tfb (~tfb@88.98.95.237)
[22:37:24] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:37:38] *** Joins: tfb (~tfb@88.98.95.237)
[22:38:12] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:38:25] *** Joins: tfb (~tfb@88.98.95.237)
[22:38:59] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:39:11] *** Joins: tfb (~tfb@88.98.95.237)
[22:39:46] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:39:59] *** Joins: tfb (~tfb@88.98.95.237)
[22:40:02] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: kpoeck)
[22:40:34] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:40:46] *** Joins: tfb (~tfb@88.98.95.237)
[22:41:21] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:41:34] *** Joins: tfb (~tfb@88.98.95.237)
[22:42:09] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:42:21] *** Joins: tfb (~tfb@88.98.95.237)
[22:42:39] <nature> That's actually pretty crazy, never seen anything like that before!
[22:42:56] *** Quits: tfb (~tfb@88.98.95.237) (Remote host closed the connection)
[22:43:19] <Inline> what ?
[22:43:37] <nature> this mclim running in the browser
[22:43:44] *** Joins: tfb (~tfb@88.98.95.237)
[22:43:59] <nature> s,mclim,McClim,
[22:44:18] <Inline> ah
[22:44:34] <Inline> yah, are you using jupyter notebook ?
[22:44:53] <Inline> where did you get it ?
[22:45:05] *** Joins: derelict (~derelict@user/derelict)
[22:46:14] <nature> Also had an unrelated question, is there a go-to way to validate/parse safely user input? I saw this cl-data-format-validation package, is it relatevely safe to validate form data?
[22:46:37] <Inline> oh oh
[22:46:39] <nature> Inline: no I am not using jupyter notebook
[22:46:54] <Inline> afaik that's one of the hard parts in commonlisp
[22:47:00] <nature> Inline: where did I get what?
[22:47:19] <Inline> user input can be code executing
[22:47:41] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:47:42] <Inline> nevermind nature, i don't know the web interface of mcclim
[22:48:27] *** Quits: tfb (~tfb@88.98.95.237) (Ping timeout: 245 seconds)
[22:48:30] <nature> in the cl-cookbook there was a link to a video of prototype, someone mentioned it before you connected
[22:48:42] *** Quits: amb007 (~a_bakic@232.248.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[22:48:48] <Inline> afaik one solution is to use another language or language framework for parsing inputs, i.e. an executable maybe written in C or so
[22:49:01] <Inline> which you use as an intermediary
[22:49:09] *** Joins: amb007 (~a_bakic@78.250.23.93.rev.sfr.net)
[22:50:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:52:02] <nature> arf, that would complicate my setup a lot, I am making a simple web app which does the basic CRUD operation through mito and I simply wanted to make sure that some data received via a POST request are number, dates, phone number etc...
[22:53:04] <Inline> well ok that might be doable in cl alone i think
[22:53:35] <_death> why wouldn't it?
[22:54:11] <nature> I am pretty sure I could manage with regexes but I wanted to know if there is a more "lisp way" of doing it
[22:55:07] <nature> I still am a beginner, I come up with weird questions like this sometimes ^^'
[22:56:04] *** Joins: cage (~cage@dynamic-adsl-78-15-46-179.clienti.tiscali.it)
[22:56:55] <Inline> https://stackoverflow.com/questions/34813891/how-do-you-securely-parse-untrusted-input-in-common-lisp
[22:59:40] <nature> Inline: Thanks!
[23:02:21] <scymtym> the McCLIM Broadway backend prototype allows displaying and interacting with McCLIM applications in the browser. it uses a modified version of the javascript code which was originally developed for the Broadway GTK backend which does a similar thing for GTK applications. the McCLIM version differs from the GTK version in terms of events send by the browser and instructions send to the browser. the McCLIM version also generates 
[23:02:21] <scymtym> javascript code for message (de)serialization at runtime
[23:04:46] <nature> That's impressive!
[23:12:03] *** Joins: pjb (~pjb@user/pjb)
[23:12:20] <gin> is there a function to compare the equality of two pathnames?
[23:14:09] <pjb> equal
[23:14:45] <pjb> (equal #P"~/" (user-homedir-pathname)) #| --> t |#
[23:16:55] <gin> So equal. I thought there would be a more specific function like there is stirng= for strings.
[23:17:10] <gin> If it is equal for pathnames I will use equal. thanks pjb
[23:17:47] <Inline> you can convert to string with namestring etc
[23:17:51] <Inline> if you want todo that
[23:18:42] <Inline> but that will behave string like so you loose the pathname specific stuff
[23:19:19] <Inline> like that ~/ is defined as user-homedir-pathame, or aliased or so
[23:19:30] *** Quits: amb007 (~a_bakic@78.250.23.93.rev.sfr.net) (Ping timeout: 272 seconds)
[23:19:40] <Inline> maybe not so good an idea
[23:19:59] *** Joins: amb007 (~a_bakic@171.107.23.93.rev.sfr.net)
[23:24:09] *** Joins: tfb (~tfb@88.98.95.237)
[23:25:27] *** Joins: akoana (~ah@user/akoana)
[23:26:33] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[23:32:52] *** Joins: kpoeck (~kpoeck@87.140.193.0)
[23:33:33] *** Joins: clintm (~user@c-73-83-222-156.hsd1.wa.comcast.net)
[23:38:11] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[23:40:19] *** Quits: copec (~copec@206.214.226.37) (Quit: Textual IRC Client: www.textualapp.com)
[23:44:48] <pjb> gin: note: string= is not for string. it's for string-designators!   (string= #\A :a) #| --> t |#
[23:51:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
