[00:10:10] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Ping timeout: 268 seconds)
[00:10:39] <etimmons> Anyone out there with the latest version of LispWorks? Can you check if :package-local-nicknames is on _features_ ?
[00:11:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:17:07] <rotateq> no sry :/
[00:17:51] <jgart> What testing libraries/frameworks does the community recommend/prefer and why? FiveAM?
[00:33:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 252 seconds)
[00:43:13] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[00:43:17] <jeosol> good morning guys
[00:43:47] <rotateq> good morning jeosol
[00:44:14] <jeosol> jgart: I recall sabra did some comparison of testing frameworks you can check the article out. I don't have the link right way but you can find it with a google search
[00:44:38] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[00:45:09] <jeosol> I think parachute by shinmera (I think) scored high in his reviews. I have used prove/rove, settled on fiveam/fiveam-asdf (integration with asdf) and then I am using parachute now
[00:45:18] <jeosol> rotateq: thanks
[00:45:43] <rotateq> get some parentheses for breakfast
[00:46:09] <jeosol> haha, cool. I haven't had a meal today, past 3pm and could use some defun and parentheses
[00:46:15] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[00:46:35] <rotateq> but don't pepper it with structs
[00:47:29] <jeosol> is anyone here CL with some sort of message queuing system (persistent ones like rabbitmq).
[00:47:34] <jeosol> rotateq: haha
[00:47:56] <rotateq> phew yesterday evening i tried again loading the qvm (with quicklisp) and it wants this libffi.so.7 but i just have and seem to get 8
[00:48:16] <rotateq> jeosol: or ZeroMQ ;)
[00:48:41] <jeosol> I think I did see zeromq, but last time I checked it, I think it is not persistent if I recall
[00:48:45] <rotateq> but they should rewrite it with C and ecl
[00:48:50] <jeosol> I could be wrong.
[00:49:09] <rotateq> i used it a bit some years ago but just the simplest patterns
[00:49:24] <rotateq> ah okay, persistent
[00:49:47] <jeosol> Basically, the messages for what I am doing can't be lost otherwise it messes up the whole thing. I am doing iterative optimization and if a solution is not evaluated, then it messes up the search.
[00:50:42] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:50:43] <jeosol> In some systems, the message leaves the queue after it receives acknowledge from a consumer that the message has been processed. Only then does the mesage leave the queue. If the consumer fails to process it, then it's still there in the queue
[00:51:27] <rotateq> rabbitmq was with erlang, right?
[00:51:34] <jeosol> I wanted to demonstrate CL to some people, but we butt heads a bit why I don't use python (I do use python but not for very computational tasks)
[00:51:34] <rotateq> or 'is'
[00:51:59] <jeosol> yes, I heard rabbitmq is written in erlang, and it's a very good piece of software - watched a few videos
[00:52:05] <rotateq> jeosol: say you use python, the compiler in SBCL originating from CMUCL
[00:52:11] <jeosol> hahaha,
[00:52:19] <jeosol> not that python
[00:52:27] <rotateq> yes erlang is great too for what it fits
[00:52:28] <jeosol> the one most people use in the AI/ML space
[00:52:45] <rotateq> yes of course i inferred :P
[00:52:49] <jeosol> when I started using CMUCL, I realized the compiler was called python, and I was a bit confused
[00:52:58] <rotateq> hihi
[00:53:04] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Quit: ZNC - http://znc.in)
[00:53:29] *** Joins: Alfr (~Alfr@user/alfr)
[00:53:36] <rotateq> like with WEB for Knuth's literate programming system. more things than names
[00:53:56] <jeosol> rotateq: haha, Python and the version issues - can drive you nuts. This is something we don't worry much in CL. I upgrade monthly with SBCL and I rarely get issues and any can be resolved quickly
[00:54:13] <rotateq> jeosol: even on NixOS it's still a MESS
[00:54:26] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[00:54:31] <rotateq> yes like the myth of Java legacy :D
[00:55:07] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[00:55:07] <jeosol> When I started working CL, the fact that I have worry about environments was jarring. It was aeth or someone here that told me to see each python version as a different language
[00:55:27] <jeosol> Java and it's stack traces
[00:55:38] <rotateq> "we take this piece of 30 years old CL code and push it into the newer impl" maybe sometimes some modifications due to CLtL1
[00:56:51] <jeosol> yes, usually, they'd be some little things here and there, but you can get it going in no time. emacs, slime, paredit, etc helps as you can go anywhere and fix issues. It's a shame that emacs prevents people from exploring CL
[00:57:25] <rotateq> or across impls and platforms with the power of #+ and #-
[00:57:34] <jeosol> I understand it has some steep learning curve. Gladly I think some efforts are going on  with other editors I seem to recall
[00:57:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:57:55] <rotateq> ah you maybe mean climacs2
[00:58:33] <rotateq> maybe I try to build qvm with its Makefile (urgs)
[00:59:23] <jeosol> I think a long time I heard about atom, and another, not sure it's vscode.
[00:59:37] <rotateq> jeeeeez no
[01:00:36] <jeosol> by the way, I found this librray: https://github.com/lokedhs/cl-rabbit
[01:00:41] <jeosol> I will explore it more.
[01:00:47] <rotateq> nice, follow the white rabbit
[01:00:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:01:08] <jeosol> You don't like any of those editors? I only use vscode when I have to work with python.
[01:01:52] <rotateq> no I don't, they all converge to the *idea* of emacs too (not a certain implementation)
[01:01:59] <rotateq> yes okay :)
[01:03:05] <pjb> jeosol: python is an horrible programming language, because it distinguishes statements from expressions. CL is very nice a programming language because there are only expressions.
[01:03:46] <pjb> jeosol: (+ 1 (print (+ 1 1))) #| prints: 2  --> 3 |#
[01:04:58] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[01:04:59] <pjb> jeosol: In lisp you can write:  (if (zerop (random 2)) (+ x 1) (+ x 2))  ===  (+ x (if (zerop (random 2)) 1 2))  ; try to do that in Python!
[01:05:01] <jeosol> pjb: I don't argue that at all. Unfortunately, I had to butt heads with these guys every  now and then (ML/AI work). For my work is often slow and writing parallel code is a pain (some GIL bullsh*t I hear). They say its the #1 language now, on TIOBE
[01:05:17] <jeosol> pjb: haha
[01:06:03] <jeosol> pjb: good examples
[01:06:18] <pjb> jeosol: it's just a simple example, but it factor to bigger examples, and it explains programmer's productivity in CL.
[01:07:01] <rotateq> when things even break in simple things ..
[01:07:52] *** Joins: pillton (~user@14-203-207-34.tpgi.com.au)
[01:09:11] <jeosol> pjb: good point. As a matter of fact, I have been trying to gather pointers, articles and concrete evidence that explains why programming in CL is very productive. I think beach shared a paper sometime that, not directly on CL but on similarly languages - I don't have it handly now
[01:09:57] <pjb> jeosol: also http://cliki.net/Performance
[01:10:05] <jeosol> as beach and others have said, it's not use engaging in this type of conversations, but I get ask why I am evening coding in emacs, and then they see my screen with lots of parentheses and ask what is the hell is this language, haha
[01:10:43] <jeosol> pjb: thanks, this is great, this will help me articulate things better. Much appreciated
[01:11:18] <jeosol> The paper I was referring to is the first one in that link
[01:20:48] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[01:24:39] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[01:34:39] *** Parts: contrapunctus (a75f5b1571@jabberfr.org) ()
[01:42:32] *** Joins: Oladon (~olad@98.43.81.226)
[01:42:32] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[01:44:58] *** Joins: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de)
[01:45:17] *** Joins: Alfr (~Alfr@user/alfr)
[01:50:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[02:21:24] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[02:22:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[02:23:33] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[02:24:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[02:25:47] *** Quits: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de) (Remote host closed the connection)
[02:31:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:31:54] <moon-child> pjb: I'm pretty sure you can do that in python though
[02:32:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[02:32:51] <moon-child> expression-orientation is not bad, but it's just gravy
[02:33:10] <moon-child> something like TAGBODY always returns nil, it would be rather useless (or at least obfuscatory) to use it as an expression
[02:39:02] *** Joins: miique (~miique@181.46.139.166)
[02:46:49] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[02:53:17] *** Joins: nature (~nature@45.32.235.173)
[02:58:27] *** Joins: akoana (~ah@user/akoana)
[03:03:49] *** Quits: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[03:09:25] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[03:11:01] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[03:13:58] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Read error: Connection reset by peer)
[03:21:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:27:33] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[03:36:21] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:36:55] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:39:14] <bollu> What does &body and @body mean? I see it in this video by baggers: https://youtu.be/4nKe2vp07Yg?t=2871
[03:39:35] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[03:46:17] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[03:46:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:47:16] <bollu> https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node64.html this seems to answer the use of @
[03:47:28] <bollu> Still not sure what & is. Googling for sigils is surprisingly hard..
[03:47:59] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[03:48:09] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[03:49:09] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[03:50:01] <yitzi> clhs lambda lists
[03:50:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:51:51] <yitzi> clhs 3.4
[03:51:53] <specbot> Lambda Lists: http://www.lispworks.com/reference/HyperSpec/Body/03_d.htm
[03:52:50] <yitzi> bollu: See above. &body is a marker in macro lambda lists
[03:53:13] <moon-child> what is @body though?  I have never seen that
[03:53:29] <yitzi> Does it have a comma before it?
[03:53:49] <moon-child> oh, no idea but that sounds plausible
[03:53:55] <akoana> probably `(something ...,@ ...
[03:55:14] <yitzi> commas are splicing inside of backquote
[03:55:24] <yitzi> clhs 2.4
[03:55:24] <specbot> Standard Macro Characters: http://www.lispworks.com/reference/HyperSpec/Body/02_d.htm
[03:59:48] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:03:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[04:03:57] *** Joins: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de)
[04:05:25] *** Joins: miique (~miique@181.46.139.166)
[04:09:08] *** Joins: jpl01 (~user@2001:16b8:49ac:a800:ce2c:312:fa14:c85)
[04:09:29] *** Quits: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[04:11:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:12:16] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[04:12:29] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[04:20:49] *** Quits: pve (~pve@37-136-69-117.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[04:26:55] *** Joins: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net)
[04:29:45] *** Quits: VincentVega (~user@212.97.4.16) (Remote host closed the connection)
[04:31:52] *** Quits: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de) (Remote host closed the connection)
[04:48:09] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:49:20] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:50:50] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92) (Quit: Konversation terminated!)
[04:50:51] *** Quits: OlCe (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[04:53:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:55:28] *** Quits: jpl01 (~user@2001:16b8:49ac:a800:ce2c:312:fa14:c85) (Remote host closed the connection)
[04:56:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[04:57:28] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:b566:ba1e:b76b:4040) (Remote host closed the connection)
[04:57:36] *** Joins: rgherdt_ (~rgherdt@ip5f5af43d.dynamic.kabel-deutschland.de)
[05:04:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:05:22] *** Joins: notzmv (~zmv@user/notzmv)
[05:06:52] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:07:14] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:13:06] *** Quits: raeda_ (~raeda@72.49.214.135) (Ping timeout: 256 seconds)
[05:14:49] *** Joins: raeda (~raeda@72.49.214.135)
[05:15:47] *** Quits: rgherdt_ (~rgherdt@ip5f5af43d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[05:18:46] *** Joins: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr)
[05:25:17] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 240 seconds)
[05:26:35] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Remote host closed the connection)
[05:26:42] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[05:28:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 240 seconds)
[05:30:33] *** Joins: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de)
[05:31:40] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Read error: Connection reset by peer)
[05:36:22] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[05:37:32] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:44:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:45:44] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[05:46:11] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:56:45] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[05:58:37] *** Quits: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[05:59:09] <jstoddard> etimmons: I don't know if you still need this, but :package-local-nicknames is indeed in *features* on Lispworks 8.0.
[06:01:55] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Read error: Connection reset by peer)
[06:02:37] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Ping timeout: 240 seconds)
[06:32:41] <bollu> Stupid question: Is paredit worth learning?
[06:33:52] *** Joins: Bike (~Bike@71.69.170.70)
[06:33:52] *** ChanServ sets mode: +o Bike
[06:36:37] <jstoddard> bollu: As a mere dabbler my opinion isn't worth much, but paredit has always frustrated the hell out of me. Over the last few weeks I made the effort to take a better attitude toward it, and became comfortable with the basic keystrokes. I guess I can say I don't hate it anymore.
[06:37:44] <jstoddard> I know a lot of lispers swear by it. I am beginning to understand that point of view, even if I don't necessarily share it.
[06:41:46] <jstoddard> On the other hand, I forked out the cash for hobbyist LispWorks this week, and have been playing around with its IDE since last night. I don't miss the lack of paredit, but I do miss SLIME's feature of showing me arguments in the minibuffer for the function or macro whose name I just typed.
[06:43:07] *** Quits: huckleberry (~huckleber@ip98-164-196-153.oc.oc.cox.net) (Quit: disconnected)
[06:43:40] <bollu> jstoddard lispworks has that feature, actually. (editor:bind-key "Function Arglist Displayer" "Control-i" :mode "Lisp")
[06:44:05] <bollu> [quite funny, I just moved from lispworks personal edition to emacs :) ]
[06:44:59] <jstoddard> Oh cool, thanks for pointing it out. I'm actually reading through the LW editor manual right now, which I started hoping to find out if there was such a feature (in addition to learning the regular key bindings for compile-defun, etc.)
[06:46:36] <jstoddard> I would say it's worth learning paredit, and trying it out for at least a few days. Afterward you may find you can't do without it. Or if not, what have you lost?
[06:49:18] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:51:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:56:59] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:59:38] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:00:16] *** Joins: Alfr (~Alfr@user/alfr)
[07:00:28] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[07:01:01] *** Joins: Alfr (~Alfr@user/alfr)
[07:02:58] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[07:07:05] *** Joins: Alfr (~Alfr@user/alfr)
[07:08:06] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[07:10:35] *** Joins: Alfr (~Alfr@user/alfr)
[07:13:33] *** Joins: Oladon (~olad@98.43.81.226)
[07:19:52] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[07:23:54] *** Joins: Alfr (~Alfr@user/alfr)
[07:25:18] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[07:27:42] <jasom> I also didn't care for paredit, but it was interesting to try
[07:28:07] *** Joins: Alfr (~Alfr@user/alfr)
[07:30:29] <beach> Good morning everyone!
[07:32:17] <beach> jeosol: This is the paper I often talk about: https://web.cecs.pdx.edu/~apt/cs457_2005/hudak-jones.pdf
[07:32:35] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:32:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:36:52] <beach> jeosol: They authors are in the Haskell camp, so the conclusion of the paper is mainly about Haskell, but when I present the paper to (say) industry people, I moderate the conclusion, especially since Haskell is not the language that comes out best in the comparison.
[07:36:53] <beach> I simply conclude that there is evidence that the productivity of different programming languages for a given task can vary a lot.  The paper suggests up to a factor 20, but even if it is just a factor 2, that's huge in an industrial context.
[07:38:29] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:40:11] <jasom> I almost always prototype in lisp.  I am convinced that prototyping in lisp and porting to a more "business friendly" language is faster for me.  Also since not all prototypes lead to production implementations, there's zero cost of rewriting in those cases
[07:40:40] <beach> jeosol: Another thing I often point out is that it is nearly impossible to convince anyone of the virtues of Common Lisp by just showing them some code and arguing with them.  They only method that I have found to work is to show them that you can get the job done very quickly with high-quality code.
[07:40:58] <beach> jasom: Good point.
[07:42:19] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[07:43:38] <jasom> The only time I think I ever impressed someone with CL was when we were debugging a performance issue in a complicated system.  I wrote a simplified simulation in CL and added complications until we saw a similar performance profile.  They were impressed by how quickly I could iterate.  Every dynamic language *should* be as productive as lisp for this sort of thing, but the tooling is often
[07:43:40] <jasom> lacking.
[07:44:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[07:44:26] <beach> There seems to by this underlying assumption, especially with decision makers in industry, that all programming languages are basically the same in terms of functionality and productivity.  So the choice of a programming language is made based on other factors, such as what language(s) existing programmers already know.
[07:44:26] <beach> The paper by Hudak and Jones also shows that the cost of learning a new language is dwarfed by the potential difference in productivity.
[07:44:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[07:45:19] <jasom> I wonder if the latter issue is less bad nowadays; many programmers need to know both javascript and (some other language) so perhaps more people are aware of how picking up a new language isn't that hard?
[07:46:24] <jasom> certainly companies that use non-mainstream languages know because they almost always have to train new hires on their language.
[07:46:35] <beach> That might be true.
[07:48:29] <jasom> Though I must admit, less than 2 weeks (I assume it was 8 business days?) to learn a language already showing results impressed me.
[07:49:22] <jasom> but I've also never had learning a new programming language be my full-time job.
[07:49:24] <beach> Yes, and again, even if it is 10 times that, it is still dwarfed by the productivity issue.
[07:49:52] <jasom> yeah, if you assume you retain an employee for 18 months then 90 days would only need a 10% productivity boost to break even
[07:50:09] <beach> That's what impresses me so much about the paper.  Even if you divide their findings by 10, you still get something that must be considered.
[07:50:11] <jasom> er 45 days
[07:50:43] <beach> Exactly.
[07:51:41] *** Joins: semz (~none@user/semz)
[07:51:57] <jasom> many companies are *exremely* reluctant to spend time on training though.
[07:52:51] <beach> Yes, because they think the cost is significant.  The paper suggests it is not.
[07:55:11] <beach> I mean, I know how companies operate.  They take into account only what can be measured, and assume the rest is insignificant.  Productivity is hard to measure, especially to determine a priory, so it is assumed that the language makes no difference.  Training, on the other hand, shows up very clearly in the budget.
[07:55:55] <jasom> Also anything different is to blame for all failures
[07:56:07] <beach> But that's my main problem with how industry works.  If managers do no more than what an Excel spreadsheet can do, then they should be replaced by one.
[07:56:43] <beach> The job of a manager is to do all the rest, based on intuition, experience, and expertise.  But since they don't have any, they do no more that what Excel does.
[07:59:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:09:27] *** Quits: pillton (~user@14-203-207-34.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[08:16:49] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:22:04] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:22:48] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[08:23:03] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:24:40] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[08:27:59] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[08:34:13] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:35:02] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[08:38:43] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[08:52:07] *** Joins: epony (~epony@user/epony)
[08:53:23] *** Quits: jgkamat (~jay@user/jay) (Quit: ZNC - https://znc.in)
[08:54:20] *** Joins: jgkamat (~jay@user/jay)
[09:13:07] <jeosol> Good morning all
[09:13:11] <jeosol> beach: thanks for the linking that paper again. That's the one I was referring to
[09:14:22] <jeosol> beach: very true - what works is to show the evidence of the work done
[09:16:00] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:25:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:42:36] *** Quits: parjanya (~esb@177.32.12.221) (Read error: Connection reset by peer)
[09:44:55] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[09:46:39] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:00:08] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Quit: Leaving)
[10:00:16] *** Joins: jmes (~james@node-1w7jra26acy6dd0v7okm8us5g.ipv6.telus.net)
[10:01:50] *** Quits: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr) (Remote host closed the connection)
[10:02:41] <jmes> Hey, what ways to you Lispers prefer to download files with CL? I want to download and extract a project from it's git repository and I'm tempted to use run-program to call wget but I have a feeling that's really dumb :P
[10:02:48] *** Joins: travv0 (sid293381@user/travv0)
[10:02:51] <jmes> its*
[10:05:01] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[10:05:43] *** Joins: Jing (~hedgehog@103.121.208.183)
[10:12:21] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Quit: Client closed)
[10:14:05] *** Joins: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net)
[10:24:32] *** Quits: Jing (~hedgehog@103.121.208.183) (Remote host closed the connection)
[10:25:13] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dda7:7c4c:abf9:d2d)
[10:27:50] <moon-child> jmes: your keyword is 'http client'
[10:32:01] *** Joins: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr)
[10:34:34] <jmes> moon-child: Thanks, I stumbled across drakma and trivial-download which uses it. I'll give it a try!
[10:36:28] <moon-child> (though--if you are looking to download a git project, you probably want a git implementation rather than an http implementation.  I seem to recall there was a pure-cl git implementation, but can not find it now; that's being the case, I might shell out to git (rather than wget) or try a libgit2 binding)
[10:42:55] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:46:52] *** Quits: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[11:13:01] *** Quits: sp (~sp@user/susam) (Ping timeout: 240 seconds)
[11:13:50] *** Joins: sp (~sp@user/susam)
[11:14:13] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Ping timeout: 240 seconds)
[11:14:47] *** Joins: OlCe`` (~user@lfbn-nic-1-449-101.w90-116.abo.wanadoo.fr)
[11:15:13] <jmes> moon-child: Yeah I would do that but I'm only looking to get a directory from a project given a commit hash. So it seems better to download and extract a compressed file that to clone the whole thing.
[11:15:41] <jmes> i.e. I don't need any git features
[11:19:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:23:49] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Ping timeout: 240 seconds)
[11:23:49] *** Quits: linjian (~linj@user/linj) (Ping timeout: 240 seconds)
[11:29:02] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dda7:7c4c:abf9:d2d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:29:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:35:14] <moon-child> jmes: hm, you would still need to parse the git format and structure, which is not trivial and which I believe uses a custom compressed format
[11:35:20] <moon-child> would not be easy with wget either
[11:37:16] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[11:37:21] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[11:37:27] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[11:37:47] *** Joins: linjian (~linj@user/linj)
[11:37:53] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[11:38:40] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[11:44:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:52:22] <jmes> moon-child: my wget version just grabs a snapshot of the whole tree e.g. <commit>.tar.gz, decompresses it, and discards the unneeded stuff
[11:54:34] *** Joins: parjanya (~esb@2804:14c:1ad:8b70::1000)
[11:55:20] <moon-child> ah, github?
[11:57:37] <jmes> Yeah, I'm just writing some shoddy code for a *very* specific purpose (it only ever needs to interact with one known repository). Normally I'd use a shell script but I'm just trying to get more familiar with lisp for assorted things.
[12:01:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:16:52] *** Parts: travv0 (sid293381@user/travv0) ()
[12:22:43] *** Joins: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no)
[12:24:24] *** Joins: rgherdt_ (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de)
[12:27:37] *** Joins: pve (~pve@176-93-74-76.bb.dnainternet.fi)
[12:32:41] *** Quits: rackethelp (~rackethel@97-116-60-21.mpls.qwest.net) (Ping timeout: 256 seconds)
[12:36:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:40:10] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[12:40:55] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[12:46:17] *** Quits: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no) (Ping timeout: 256 seconds)
[12:47:48] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[12:48:39] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[12:56:22] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:02:50] *** Joins: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no)
[13:04:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:24:49] *** Quits: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no) (Ping timeout: 256 seconds)
[13:25:03] *** Joins: igemnace (~ian@user/igemnace)
[13:42:43] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:8d38:5b59:3c2d:440)
[13:55:47] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[14:04:17] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:04:48] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[14:05:12] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:05:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:05:35] *** Lord_of_Life_ is now known as Lord_of_Life
[14:05:49] *** Joins: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no)
[14:09:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[14:20:56] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[14:25:36] *** Quits: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no) (Ping timeout: 256 seconds)
[14:46:34] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[15:03:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:09:42] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[15:10:07] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:12:41] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[15:16:19] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:17:01] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[15:19:42] *** Joins: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no)
[15:23:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:29:49] *** Quits: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no) (Ping timeout: 240 seconds)
[15:37:11] *** Joins: igemnace (~ian@user/igemnace)
[15:38:02] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[15:39:55] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.4)
[15:50:03] *** Joins: myrrh (~markus@user/poet)
[15:53:54] *** Joins: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it)
[16:00:05] *** Joins: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no)
[16:03:17] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 240 seconds)
[16:09:25] *** Quits: mingus (~jan-magnu@auth-147-74.anyconnect.uib.no) (Ping timeout: 240 seconds)
[16:14:21] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:15:42] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[16:21:10] *** Joins: igemnace (~ian@user/igemnace)
[16:26:08] *** Joins: tfeb (~tfb@88.98.95.237)
[16:27:12] *** tfeb is now known as tfb
[16:33:51] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[16:35:35] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[16:48:08] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Remote host closed the connection)
[16:49:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:54:48] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[16:55:12] <Xach> jmes: i use run-program an awful lot for things like that. but i wrap it in functions and it's usually pretty nice.
[16:55:37] <Xach> like (resize-image image-file :max-x 600) ends up being a call to imagemagick
[16:55:48] <Xach> or (ensure-checkout project directory) runs git underneath
[16:56:13] <Xach> i'd personally rather do that than ffi 99.7% of the time
[16:56:31] <moon-child> better than ffi.  But worse than pure-cl :^)
[16:59:34] <Xach> Yes, for most axes except time-to-something-useful
[16:59:46] <Xach> (assuming that a pure cl version must be written)
[17:01:09] <moon-child> yeah.  I swear there is pure-cl git, but can not find it
[17:01:16] <moon-child> maybe I was just confusing it with the libgit2 bindings
[17:02:21] <Xach> moon-child: no, i remember someone working on it, but it was 10+ years ago
[17:02:33] <moon-child> ok
[17:02:51] <moon-child> (google has gone all to pot these days, not surprising it is hard to find)
[17:09:28] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:11:10] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[17:14:31] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:14:51] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:15:24] <_death> maybe https://github.com/fiddlerwoaroof/cl-git
[17:17:06] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:479:e10b:25ac:9e6f)
[17:24:15] *** Joins: tfeb (~tfb@88.98.95.237)
[17:26:05] *** tfeb is now known as tfb
[17:33:34] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[17:35:31] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[17:47:48] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[17:49:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[17:51:16] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by aldkjsfasdf!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[17:51:43] *** Joins: xsperry (~xs@user/xsperry)
[17:57:35] *** Joins: Bike (~Bike@71.69.170.70)
[17:57:35] *** ChanServ sets mode: +o Bike
[17:57:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[18:06:02] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:06:26] <bollu> For whatever reason, when I compile a file that uses closer2mop, I get an error saying that C2MOP does not exist. However, when I execute the line that imports C2MOP and THEN compile the file, the compilation works: https://gist.github.com/bollu/c1d974dea1c3f46d58dc103a88dd32c1#file-hoopl-lisp-L175
[18:07:34] <bollu> That is, running |C-c C-k| upon opening the file fails. But running |slime-eval-defun| at the line (ql:quickload "closer-mop") followed by |C-c C-k| succeeds.
[18:07:37] <bollu> What's going on?
[18:08:39] <Bike> compiling the file happens before loading
[18:08:58] <Bike> so, it tries to compile the c2mop:whatever form before it's actually executed the quickload of closer-mop
[18:10:06] <Bike> there is a way to arrange things so that the quickload will be executed during compilation, but for nontrivial code it's usually best to arrrange an actual system definition with asdf
[18:10:46] <bollu> Where can I learn how to setup a system definition?
[18:11:56] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[18:12:14] <_death> you should defsystem, but note that C-c C-l can load the file
[18:12:27] <Shinmera> bollu: look at some other quicklisp project's source code.
[18:12:35] <Shinmera> In other news, damn this is pretty cool! https://github.com/julian-baldwin/parachute-browser
[18:12:38] <Bike> yeah, i don't know if there's a good guide
[18:12:54] <Bike> https://github.com/s-expressionists/Cleavir/blob/main/BIR/cleavir-bir.asd here's one i wrote. you can also simplify by using :serial t
[18:13:03] <Bike> the :depends-on are external dependencies, like closer-mop for you
[18:13:44] <_death> bollu: https://stevelosh.com/blog/2018/08/a-road-to-common-lisp/#s33-systems .. you can also look at other projects to get a feel
[18:15:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:16:03] <bollu> thanks!
[18:16:09] <yitzi> bollu: You could also go look at one of the trivial systems since they usually have a very simple system declaration. Then just go skim the asdf manual.
[18:16:30] <bollu> how does one install asdf on windows? [I'm on windows for extraneous reasons, but I don't see myself being able to switch to *nix for ~3 months]
[18:16:37] <Shinmera> you don't install asdf
[18:16:59] <Bike> asdf comes with sbcl.
[18:17:03] <yitzi> Comes with the implementation/quicklisp.
[18:17:24] <bollu> cool :)
[18:17:49] <Bike> and quicklisp uses it, so if you have quicklisp working you definitely have asdf.
[18:19:11] <yitzi> Also useful is the ASDF section on configuring https://common-lisp.net/project/asdf/asdf.html#Configuring-ASDF
[18:19:19] <yitzi> And section 8 further down.
[18:19:46] <Bike> for basic use, you can use quicklisp/local-projects
[18:20:40] <yitzi> Bike is correct ... the stuff I mentioned is when you want to have more control.
[18:25:06] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[18:27:21] *** Joins: Everything (~Everythin@37.115.210.35)
[18:40:12] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[18:48:32] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[18:48:45] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:57:26] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[19:02:20] <bollu> Can I have an expression time out and throw an error if it doesn't terminate in X seconds?
[19:02:43] <bollu> I'm writing some complicated recursive algorithm for which I don't have a termination proof ;) I'd like to be sure that I don't accidentally hang my REPL or some such
[19:08:33] <yitzi> bollu: There is a with-timeout macro in the v2 api of bordeaux-threads. The API docs are not done so you will have to look in the docstrings.
[19:10:10] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[19:12:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:16:47] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[19:20:52] <pjb> bollu: or you may want to do it conformingly? Define your own operators + - * / etc, and add testing for (get-universal-time).
[19:26:02] <phoe> launch the computation in one thread wrapped in (catch :oops ...), interrupt it with #'bt:interrupt-thread (lambda () (throw :oops nil))
[19:26:44] <Shinmera> phoe: that's not guaranteed to work
[19:27:55] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[19:28:46] <phoe> yes, the thread can loop forever in some sort of WITHOUT-INTERRUPTS
[19:29:19] <bollu> Shinmera can you give me an example of a project that uses quicklisp?
[19:29:34] <Shinmera> ?
[19:29:39] <Shinmera> I said a project *in* quicklisp
[19:29:41] <Shinmera> not using it
[19:29:42] <bollu> oh
[19:29:53] <Shinmera> anything in ql will have an asdf system definition
[19:29:54] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:29:55] <bollu> I haven't succeeded yet , though I now know that "system" is an ASDF concept, while "package" is a module that controls visibility
[19:30:01] <Shinmera> so just M-. to some library and look at its source.
[19:30:10] <pjb> bollu: for example: https://termbin.com/rietk
[19:30:11] <bollu> I'm not sure how to actually say that I want closer-mop as a dependency
[19:30:29] <phoe> in your ASD file, (asdf:defsystem ... :depends-on (#:closer-mop) ...)
[19:30:32] <pjb> (:depends-on "closer-mop")
[19:31:06] <phoe> pjb: actually not
[19:31:15] <phoe> that's defpackage syntax
[19:31:32] <bollu> What is a #:symbol?
[19:31:50] <phoe> #:foo is a notation for a symbol which has no home package, a so-called "gensym"
[19:32:36] *** Joins: shka (~herr@109.231.0.226)
[19:32:53] <bollu> |(defsystem :hoopl :depends-on (#:closer-mop #:fset))| errors with |The variable #:FSET is unbound.|
[19:33:08] <phoe> you tried to evaluate it
[19:33:12] <bollu> yep
[19:33:15] <phoe> (asdf:defsystem ...) will work a tiny bit better
[19:33:35] <phoe> but even better - don't evaluate it, save it in the ASD file and then try (asdf:load-system :my-system) or (ql:quickload :my-system)
[19:33:41] <phoe> where :my-system is your system name
[19:33:45] <beach> Or put (cl:in-package #:asdf-user) at the beginning of the file.
[19:33:52] <jmes> Interesting I didn't know about #: - is there a problem with using :foo or "foo" in asd files?
[19:34:21] <phoe> :foo interns a keyword that will then come up in your editor's suggestions
[19:34:31] <phoe> and some people find it annoying
[19:34:33] <bollu> Ohh
[19:34:35] <phoe> same stuff with non-keyword symbols
[19:34:47] <yitzi> phoe: is Ecclesia still alive? Looks there is stuff in Cleavir that still refers to cleavir-code-utilities.
[19:34:49] <jmes> Okay, noted :)
[19:35:00] <phoe> yitzi: I have no idea, possibly not
[19:35:13] <bollu> So now I have two files: `hoopl.asd` which has: |(defsystem :hoopl :depends-on (#:closer-mop #:fset))| and then a `hoopl.lisp` which has |(ql:quickload :hoopl)| followed by my code. Does this sound correct?
[19:35:20] <phoe> last commit was 14 months ago so I guess it's dead
[19:35:26] <yitzi> phoe: thanks.
[19:35:53] <beach> bollu: No, you do the quickload from the REPL.
[19:36:03] * phoe kills the repository
[19:36:04] <yitzi> beach: Same question to you. Looks like cleavir-macroexpand-all is still dependent on cleavir-code-utilites.
[19:36:17] <phoe> ...oh wait
[19:36:24] <phoe> I am unable to kill that repository!
[19:36:47] <bollu> beach I feel I'm misunderstanding. I want to be able to say "hey, slime, compile this file" and have it compile with no extra intervention.
[19:36:51] <phoe> minion: memo for Bike: can you archive and/or delete https://github.com/s-expressionists/Ecclesia/ - seems like it didn't catch on
[19:36:52] <pjb> jmes: and #:foo makes it more difficult on asdf since systems are named with lower-case strings; with #:foo, it has to create a symbol, named "FOO", then it has to take its symbol-name and downcase it, to find the system name. I prefer to give it "foo" directly.
[19:36:52] <minion> Remembered. I'll tell Bike when he/she/it next speaks.
[19:36:56] <beach> yitzi: I am not sure that macro-expand-all is useful.
[19:37:00] <phoe> bollu: C-c C-c in a buffer
[19:37:17] <phoe> or rather C-c C-k for a whole file
[19:37:22] <beach> bollu: Then use a SLIME command that does ASDF:LOAD-SYSTEM.
[19:37:41] <bollu> beach what slime command is that, do you know?
[19:37:50] <yitzi> beach: In general or just cleavir's implementation?
[19:38:06] <beach> bollu: I usually do it in the REPL so I don't remember.
[19:38:16] <beach> yitzi: The latter.
[19:38:29] <yitzi> beach: got it thanks.
[19:38:36] <beach> yitzi: I may not even have written it.
[19:38:44] <beach> yitzi: What does git blame say?
[19:39:58] <yitzi> beach: Looks like it is mostly yours, but it is like 3 years old and no one has touched it really.
[19:40:18] <beach> Hmm.
[19:40:25] <beach> I certainly don't use it.
[19:40:50] <beach> But it may need to be adapted to Trucler.
[19:41:14] <yitzi> Ok. Thanks.
[19:41:31] <beach> Sure.  Sorry I can't be of more help. :(
[19:41:54] <bollu> Okay, I'm failing. Here's the asd file: https://github.com/bollu/mlir-hoopl-rete/blob/master/src/hoopl/hoopl.asd, and the lisp file: https://github.com/bollu/mlir-hoopl-rete/blob/master/src/hoopl/hoopl.lisp
[19:42:10] <yitzi> beach: No worries. I wasn't critical.
[19:42:18] <yitzi> s/I/It/
[19:42:40] <beach> bollu: You don't want to put the DEFPACKAGE in the ASDF file.
[19:42:45] <bollu> When I open hoopl.lisp and C-c C-k (slime-compile-and-load-file), it fails with |    READ error during COMPILE-FILE: Package C2MOP does not exist. Line: 173, Column: 56, File-Position: 5682|
[19:43:03] <beach> bollu: Create a package.lisp file and include it in the system definition.  Usually first.
[19:44:14] <beach> bollu: First in the package.lisp file, but (cl:in-package #:common-lisp-user) and first in every other .lisp file, put (cl:in-package #:hoople).
[19:44:22] <pjb> bollu: with more chrome: https://termbin.com/x22h
[19:44:23] <beach> bollu: And don't :USE :ASDF.
[19:45:06] <beach> bollu: You can check existing systems and libraries for how they are organized.
[19:46:51] <beach> bollu: Here is a small example: https://github.com/robert-strandh/Clobber
[19:47:52] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[19:49:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:54:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[19:54:16] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[19:55:09] *** Joins: aeth (~aeth@user/aeth)
[19:57:01] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 240 seconds)
[19:59:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:11:09] <bollu> beach thanks for the small example, that's a ton clearer
[20:11:26] <beach> Oh, good!
[20:16:24] <beach> bollu: So the slime command is apparently M-x slime-load-system, and it doesn't seem to have a keyboard shortcut, so I guess you would need to either attach a keyboard shortcut to it, or do M-x M-p<RET><RET>
[20:17:15] <beach> And there is a REPL shortcut it seems.
[20:17:44] <beach> ,load-system
[20:19:30] <beach> bollu: That's in section 8.8 (entitled ASDF) of the SLIME manual.
[20:29:41] *** Quits: phantomics (~phantomic@97-118-150-246.hlrn.qwest.net) (Excess Flood)
[20:30:19] *** Joins: phantomics (~phantomic@97-118-150-246.hlrn.qwest.net)
[20:30:47] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:32:22] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[20:36:37] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 240 seconds)
[20:37:56] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Ping timeout: 252 seconds)
[20:38:10] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[20:40:09] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[20:40:59] *** Quits: dim (~dimlibera@212.85.154.83) (Ping timeout: 250 seconds)
[20:41:11] *** Joins: dim (~dimlibera@2a02:2178:2:4:1658:d0ff:fe49:408c)
[20:48:33] *** Joins: Bike (~Bike@71.69.170.70)
[20:48:33] *** ChanServ sets mode: +o Bike
[20:48:35] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[20:51:50] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[20:53:27] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[20:55:46] *** Quits: _death (~death@adeht.org) (Ping timeout: 245 seconds)
[20:56:02] *** Joins: adeht (~death@adeht.org)
[20:57:58] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:8d38:5b59:3c2d:440) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:59:06] *** Quits: skyl4rk (~tlvb@user/tlvb) (Ping timeout: 245 seconds)
[20:59:18] *** Joins: skyl4rk (~tlvb@user/tlvb)
[21:01:09] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[21:01:36] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[21:03:55] *** Joins: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857)
[21:07:25] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[21:09:30] *** Joins: aeth (~aeth@user/aeth)
[21:16:26] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[21:22:58] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:24:49] *** Joins: z3t0 (~z3t0@146.71.14.98)
[21:27:49] <bollu> I get new errors of the form: USE-PACKAGE #<PACKAGE "CLOSER-MOP"> causes name-conflicts in #<PACKAGE "HOOPL"> between the following symbols: CLOSER-MOP:DEFMETHOD, COMMON-LISP:DEFMETHOD [Condition of type NAME-CONFLICT]
[21:33:42] <Bike> ooh right, closer mop is weird that way
[21:33:49] <Bike> here's the relevant bit from the readme:
[21:33:56] <bollu> https://github.com/bollu/mlir-hoopl-rete/blob/master/src/hoopl/hoopl.asd
[21:34:02] <bollu> https://github.com/bollu/mlir-hoopl-rete/blob/master/src/hoopl/hoopl.lisp
[21:34:07] <Bike> "Note that in some cases, symbols from the underlying MOP implementation or even the underlying COMMON-LISP package are shadowed in Closer to MOP. So if you use the CLOSER-MOP package you may need to shadow-import those symbols. Alternatively, you can use the packages CLOSER-COMMON-LISP and CLOSER-COMMON-LISP-USER that provide the symbols of
[21:34:07] <Bike> COMMON-LISP / COMMON-LISP-USER plus the symbols of the CLOS MOP and the necessary shadow-imported symbols."
[21:34:08] <bollu> https://github.com/bollu/mlir-hoopl-rete/blob/master/src/hoopl/packages.lisp
[21:34:23] <bollu> so how does one setup this shadow-import
[21:36:32] <Bike> i would just do (:use #:closer-common-lisp) instead of (:use #:cl #:closer-mop)
[21:37:07] <Bike> but if you want to do it yourself, you'll want your package definition to include (:shadowing-import-from #:closer-mop ...symbol names...)
[21:41:25] <bollu> Bike I believe fset also does this type of shadowing?
[21:42:28] <bollu> Bike is there a :shadowing-use or some such I can use without having to list stuff?
[21:43:03] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10f9:daee:4087:4dd1:1161:2d8f)
[21:43:53] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Ping timeout (120 seconds))
[21:46:10] *** Joins: mingus (~jan-magnu@ti0135a400-2165.bb.online.no)
[21:46:10] *** Quits: ck_ (~ck@plskthx.org) (Quit: leaving)
[21:46:50] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[21:47:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:48:08] *** Joins: Bike (~Bike@71.69.170.70)
[21:48:08] *** ChanServ sets mode: +o Bike
[21:48:51] <Bike> bollu: i don't know what fset does. there is not a shadowing-use. the closer-common-lisp package is supposed to be the more convenient alternative.
[21:49:41] <Bike> looks like fset does indeed do some shadowing imports.
[21:49:51] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:49:56] *** Joins: ck_ (~ck@plskthx.org)
[21:53:31] <etimmons> uiop:define-package has :mix which is pretty much a :shadowing-use.
[21:55:04] <bollu> what is uiop now? xD
[21:55:22] <phoe> like asdf, just another part of the keyboard
[21:55:36] <phoe> seriously though - a utility package that ships with ASDF
[21:56:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:57:15] <bollu> I see
[21:59:53] *** Joins: hobo (~hobo@69.218.33.204)
[22:01:45] *** Quits: myrrh (~markus@user/poet) (Quit: Lost terminal)
[22:04:02] *** Quits: mingus (~jan-magnu@ti0135a400-2165.bb.online.no) (Ping timeout: 256 seconds)
[22:06:19] <Josh_2> With asdf:make can I use a function to generate the binary name?
[22:06:41] <Josh_2> I'd like to append the systems version number to the build pathname
[22:06:55] <Josh_2> ofcourse I dont want to do it manually each time I bump the version
[22:07:01] <phoe> asdf:make is a function
[22:07:31] <phoe> I assume you can pass it an argument like (asdf:make ... :pathname (compute-name) ...)
[22:07:34] <phoe> or do you mean something else?
[22:08:00] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[22:08:13] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:08:32] <Josh_2> I can probably just use reader macros to generate the path
[22:08:34] <Josh_2> I will try
[22:08:35] <phoe> I assume you can specialize asdf:operate on (eql 'asdf:build-op) and your system name, slap an :around method on it and add explicitly modify the pathname keyword
[22:08:45] <phoe> ah, yes, the dirty but effective way
[22:08:49] <Josh_2> Alright
[22:08:53] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:10:20] <bollu> Does this initialization sequence seem right: Open hoopl.asd, run C-c C-k [compile file]. Switch to REPL, then run (ql:quickload hoopl). Finally switch to hoopl.lisp and type C-c ~ [slime-sync-package-and-default-directory] to enter the hoopl module in the repl
[22:11:04] <Josh_2> Okay the reader macro doesn't work
[22:13:06] <Josh_2> phoe: I am using :build-operation and :build-pathname within asdf:defsystem
[22:14:53] <phoe> bollu: you shouldn't need to compile the ASD file
[22:15:00] <phoe> or load it
[22:15:10] <phoe> ASDF should load it on your own when you QL:QUICLLOAD it
[22:15:15] <phoe> QUICKLOAD*
[22:19:09] <Josh_2> Where is the documentation for asdf make?
[22:20:04] <yitzi> Pretty sure its in the asdf manual.
[22:21:35] <Josh_2> Yeh I have to build it manually
[22:21:42] <Josh_2> can't find a recent version online from the looks of it
[22:25:58] <phoe> Josh_2: huh? https://common-lisp.net/project/asdf/asdf.html contains an entry for make
[22:25:58] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10f9:daee:4087:4dd1:1161:2d8f) (Read error: Connection reset by peer)
[22:26:00] <yitzi> I don't think there are updates beyond version bumping to https://common-lisp.net/project/asdf/asdf.html
[22:26:13] <phoe> search the page for "Function: make system &rest"
[22:26:25] <Josh_2> Alright I was very much looking at an old version hosted by sbc
[22:26:27] <Josh_2> sbcl*
[22:26:35] <phoe> and then read up on :build-operation linked from there
[22:26:36] *** Joins: john__ (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[22:27:31] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Read error: Connection reset by peer)
[22:31:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:32:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[22:33:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:46:24] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Ping timeout: 256 seconds)
[22:46:41] <Josh_2> I am already using asdf:perform for sbcl's core compression, this calls asdf:output-file which generates a pathname, I was able to modify that
[22:46:45] <Josh_2> thanks for your help phoe
[22:47:02] <phoe> nice! TIL about that function
[22:47:35] *** Quits: john__ (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[22:49:29] <bollu> phoe That doesn't seem to work. Let me try
[22:50:11] <bollu> phoe If I launch slime and immediately run (ql:quickload :hoopl) I get System "hoopl" not found [Condition of type QUICKLISP-CLIENT:SYSTEM-NOT-FOUND]
[22:50:55] <phoe> bollu: hmmm
[22:51:00] <phoe> where is your system located on your hard drive?
[22:51:03] <Josh_2> I am upset that asdf does not seem to allow names for versions :(
[22:51:26] <phoe> is the path like ~/quicklisp/local-projects/hoopl/hoopl.asd and does it contain a form like (asdf:defsystem #:hoopl ...)?
[22:52:17] <Josh_2> This would make something like asdf:version<= impractical
[22:54:28] <bollu> phoe the path is like ~/work/hoopl/src/{hoop.asd, hoopl.lisp}
[22:54:39] <phoe> bollu: does ASDF know how to look for your ASD file?
[22:55:02] <bollu> phoe I have no idea if it does. How would I check that?
[22:55:20] <phoe> in particular, is #P"/home/bollu/work/" present in asdf:*central-registry*?
[22:55:34] <phoe> if not, you might need to push it there and try again
[22:55:59] <bollu> No, I haven't done any such thing
[22:56:04] <phoe> try it then!
[22:56:09] <bollu> phoe this is distressingly complicated x(
[22:56:25] <phoe> bollu: the simple way out is, move your project folder to ~/quicklisp/local-projects/
[22:56:27] <bollu> phoe do I need to edit this asdf:*central-registry* each time I load slime?
[22:56:43] <phoe> nope, you can put it in your lisp init file to get it to load automatically when you launch slime
[22:56:59] <phoe> AFAIR it's ~/.sbclrc for SBCL
[22:57:42] <bollu> phoe moving it to that path works, yes
[22:57:48] <phoe> good
[22:57:55] <phoe> it's the path of least resistance
[22:58:43] <bollu> :)
[22:58:44] <bollu> quite
[22:58:46] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:59:03] <lisp123> Configuring ASDF: Create the directory ~/.config/common-lisp/source-registry.conf.d/. Inside this directory, create a file with any filename but with an ending of .conf, for example 50-user-lisp.conf. Within that file, add the following to instruct ASDF to recursively scan all subdirectories within the provided path (replace “/home/user/lisp/” in the below with your chosen folder path): (:tree “/home/user/lisp/“)
[22:59:06] <phoe> I actually have all of my lisp stuff in ~/Projects/Lisp/ and it is only loadable because my local-projects is a symlink to this former directory
[22:59:18] <phoe> it's dumb but it works!
[22:59:28] <phoe> I like dumb stuff that works because I can then understand and fix it
[22:59:28] <lisp123> For Windows, paths might be a bit different
[22:59:29] <bollu> Now, how do I single step through some code?
[22:59:38] <bollu> lisp123 I use Cygwin so the paths works out
[22:59:53] <phoe> bollu: for SBCL, see http://www.sbcl.org/manual/#Single-Stepping
[23:00:19] <phoe> compile your code with high debug so that it is steppable, then issue STEP on a form, then follow your slime debugger
[23:00:58] <phoe> (sb-ext:restrict-compiler-policy 'debug 3 3) and force-recompile your code via (asdf:load-system ... :force t)
[23:01:10] <phoe> the restriction will be in effect until you lift it or until you restart Lisp
[23:02:03] *** Joins: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it)
[23:03:09] <bollu> sweet
[23:04:32] <bollu> phoe can I get it to enter the debugger for a particular function?
[23:04:43] <bollu> or, when a particular sexp is evaluated?
[23:04:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:04:55] <phoe> you don't need to use the stepper for that
[23:05:05] <phoe> recompile that function after adding a (break) somewhere in its body
[23:05:11] <phoe> and run everything normally
[23:05:18] <phoe> you'll end up in the debugger with a restart that allows you to continue
[23:05:21] <bollu> fancy
[23:05:25] <phoe> and you will have the stack trace available
[23:05:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:05:38] <phoe> and you will have the REPL also available to execute code from the dynamic context of wherever the code is broken
[23:06:58] *** Quits: rgherdt_ (~rgherdt@ip5f5af455.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[23:08:55] <bollu> How do I view values on the stack frame?
[23:09:01] <bollu> like, the arguments
[23:09:06] <phoe> click a stack frame
[23:09:28] <bollu> nice
[23:09:30] <bollu> what is the keybind
[23:09:34] <bollu> oh, enter
[23:09:38] <bollu> xD I kept trying <tab?
[23:09:41] <bollu> <tab>*
[23:09:47] <bollu> thanks a lot!
[23:10:29] <bollu> How do I get a REPL at the stack frame
[23:11:05] <phoe> no idea, never used that particular functionality - there's a slime command, slime-eval-in-frame IIRC
[23:11:28] <phoe> but I don't think it's possible to move the actual slime REPL to a particular stack frame - unless I'm not aware of that functionality
[23:11:30] <bollu> sldb-eval-in-frame is close. It pops up a EVAL> minibuffer
[23:11:37] <bollu> I was hoping to get a full REPL to use
[23:13:47] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab)
[23:15:19] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[23:16:31] <yitzi> Its just eval in frame. No REPL
[23:20:06] *** Quits: hobo (~hobo@69.218.33.204) (Quit: ZNC 1.8.2 - https://znc.in)
[23:20:37] *** Quits: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857) (Ping timeout: 240 seconds)
[23:27:15] *** Joins: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de)
[23:31:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:32:27] <bollu> If I see: There is no applicable method for the generic function #<COMMON-LISP:STANDARD-GENERIC-FUNCTION HOOPL::LATTICE-UNION (2)>
[23:32:32] <bollu> and I then define such a method
[23:32:39] <bollu> and then hit [RETRY] in the REPL
[23:32:45] <bollu> should it not pick up the new method?
[23:33:39] <phoe> it should
[23:33:59] <phoe> could you paste your code at https://plaster.tymoon.eu/ ?
[23:34:08] *** Quits: cosimone` (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[23:34:28] *** Joins: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:34:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:34:44] <phoe> also, hmmm, eval-in-frame seems to not work for me with the trivial case of dynavar bindings
[23:35:15] <phoe> (defvar *foo* nil) (defun foo () (let ((*foo* :foo)) (break)))(defun bar () (let ((*foo* :bar)) (foo)))(defun baz () (let ((*foo* :baz)) (bar)))(defun quux () (let ((*foo* :quux)) (baz)))(defun fred () (let ((*foo* :fred)) (quux))) (quux)
[23:35:34] <phoe> when I move to a respective frame and eval-in-frame *FOO* then I think that I should get the binding from that frame
[23:36:00] <phoe> instead I get :FOO every single time
[23:36:29] <bollu> phoe I can, but I don't know if it helps, because now the code contains the generic I wanted the REPL to pick up
[23:36:39] <bollu> (the generic is (defmethod lattice-union ((x expr-add) (y expr-add))...)
[23:36:41] <bollu> the method*
[23:36:44] <bollu> https://plaster.tymoon.eu/view/2844#2844
[23:36:45] <phoe> if you quit the debugger and reevaluate
[23:36:55] <Josh_2> When distributing an sbcl binary that has used core compression the machine executing the binary must have zlib installed?
[23:37:02] <phoe> does the GF pick the method up?
[23:37:11] <phoe> Josh_2: yes, bundle the zlib shared library with your application
[23:37:26] <Josh_2> That sounds like a pita
[23:37:32] <bollu> F, good question. It doesn't
[23:37:42] <bollu> welp, I am indeed making some mistake :)
[23:37:45] <Josh_2> I will tell them to install zlib
[23:37:47] <phoe> then it isn't a problem with the debugger
[23:38:10] <bollu> mm
[23:38:10] <phoe> Josh_2: not really, just build yourself a proper zlib.{so,dll,dylib} and bundle it with your binary
[23:39:14] <phoe> oooh, sldb-eval-in-frame seems to be limited to local variables only
[23:39:22] <phoe> so it cannot jump between dynamic scopes
[23:40:40] <Josh_2> phoe: yeh I have never done that before so it'll be a first time pita
[23:40:56] <phoe> Josh_2: Shinmera's deploy should handle bundling zlib
[23:41:04] <Josh_2> Yeh but I'm not using deploy
[23:41:08] <phoe> at least it did the time I used it
[23:41:11] <phoe> oh, welp
[23:41:13] <phoe> ;; start doing so!
[23:41:45] <Josh_2> I will look into it at some point
[23:42:15] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[23:42:19] <Shinmera> using it is adding three lines to your asd that you can (mostly) copy-paste.
[23:42:52] <Josh_2> I believe the cookbook has an entry on deploy
[23:42:55] <Josh_2> I will look into it
[23:42:57] *** Quits: cosimone` (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:46:51] <bollu> how do I create an improper list (1 . 2)?
[23:46:56] *** Joins: hobo (~hobo@204.128.242.10)
[23:47:03] <bollu> [without writing (cons 1 2)]
[23:47:15] <Shinmera> you just did
[23:47:19] <phoe> you can write '(1 . 2) for a literal
[23:47:24] <bollu> :)
[23:47:28] <bollu> ah I see, I gotta use '
[23:47:32] <phoe> obviously
[23:47:50] <phoe> anything that looks like a list and that will be evaluated will be treated as a call
[23:47:53] <fe[nl]ix> I finished writing the docs of Bordeaux-Threads: https://sionescu.github.io/bordeaux-threads/
[23:47:55] <fe[nl]ix> finally :)
[23:47:58] <phoe> fe[nl]ix: woah!
[23:48:00] <phoe> congrats!
[23:48:01] * phoe reads
[23:48:14] <phoe> this is all for the first version, right?
[23:49:00] <phoe> I ask the question because the top of the page mentions version 0.8.8 but APIv2 is mentioned on the first page
[23:49:14] *** Joins: algae (~algernon@170.10.246.117)
[23:50:38] <fe[nl]ix> no, it's for APIv2
[23:51:11] <phoe> OK
[23:53:36] <bollu> yay, I now have a module and implemented a little bit more
[23:53:37] *** Quits: gaqwas (~john@dynamic-077-002-009-059.77.2.pool.telefonica.de) (Remote host closed the connection)
[23:53:39] <bollu> tomorrow I wrangle with fse
[23:53:42] <bollu> fset*
[23:53:46] <phoe> fe[nl]ix: where can I submit PRs?
[23:54:10] <phoe> https://github.com/sionescu/bordeaux-threads/tree/master/docs/content ?
[23:54:12] <bollu> Does anyone have an example project that uses quicklisp + fset?
[23:54:13] <lisp123> fe[nl]ix: Great design, well done. I was reading the docs of BT a while back, now will revisit
[23:54:17] <bollu> so I can see how to write a packages.lisp?
[23:59:34] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
