[00:01:46] <Nselm> Thanks. What I still wonder about is how x, which should only have a value in the variable namespace, can be looked up in the function namespace. Like in (progv '(x) '(some-val)), x should be bound to some-val in the variable namespace. So looking it up in the function namespace should fail.
[00:02:29] <White_Flame> right, in trying to call (x 1), an error would result
[00:02:36] <White_Flame> if no defun etc was first done
[00:03:16] <White_Flame> (defun x (p) (print p)) (let ((x 3)) (x x)) will print 3, because it calls function X with the value of the local variable X as a parameter
[00:03:40] <White_Flame> from the form (x x)
[00:04:00] <White_Flame> with the symbol being looked up in 2 distinct ways from that form, based on its position in it
[00:04:04] <Nselm> Thanks. Thats exactly what I needed to know.
[00:04:32] <White_Flame> this is how we're able to do (let ((list ...)) ...) even though there's a standard function named LIST, without interfering
[00:13:44] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:18:55] *** pjb is now known as ogamita
[00:20:26] *** Joins: pjb (~pjb@user/pjb)
[00:41:15] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 264 seconds)
[00:46:13] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[01:08:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[01:19:56] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[01:21:30] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[01:30:09] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[02:08:37] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:12:22] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 260 seconds)
[02:29:47] *** Joins: Oladon (~olad@98.43.81.226)
[02:43:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[02:44:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:46:05] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[02:47:12] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[02:47:24] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (Remote host closed the connection)
[03:17:40] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[03:22:30] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:26:16] *** Joins: aeth_ (~aeth@user/aeth)
[03:26:22] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[03:26:24] *** aeth_ is now known as aeth
[03:39:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[03:42:58] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 268 seconds)
[03:53:40] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:55:55] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 268 seconds)
[04:09:32] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[04:29:47] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:48:36] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:09:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:21:51] *** Joins: phossil (~tophullyt@162.213.177.125)
[05:24:06] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 245 seconds)
[06:42:37] <lisp123> kagevf: What is TUI? Is that Terminal Emacs? If so, no. I use the GUI Emacs and access CLHS via EWW (web browser, so not sure if works on TUI)
[06:47:31] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:02:38] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:09:27] *** Quits: sts-q (~sts-q@91.200.108.228) (Ping timeout: 264 seconds)
[07:21:15] *** Joins: sts-q (~sts-q@212.53.219.220)
[08:20:24] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[08:26:26] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[08:27:38] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[08:42:57] *** Joins: rain3 (~rain3___@79.115.252.154)
[08:49:57] *** Quits: phossil (~tophullyt@162.213.177.125) (Quit: Leaving)
[08:50:14] *** Joins: phossil (~tophullyt@162.213.177.125)
[08:51:51] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[08:55:03] *** Quits: phossil (~tophullyt@162.213.177.125) (Ping timeout: 264 seconds)
[09:02:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:13:33] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:22:47] <lisp123> Without writing a new function, is there a way to have "nicknames" for functions? e.g. instead of doing (make-test-from-repl) I do (MTFR)
[09:24:49] <lisp123> My guess is no
[09:25:42] <lisp123> which I am 99.99% sure about :(
[09:28:52] <beach> (setf (fdefinition 'mtfr) (fdefinition 'make-test-from-repl))
[09:28:57] <White_Flame> (defmacro mtfr (&rest rest) `(make-test-from-repl ,@rest))
[09:29:17] <beach> Or that.
[09:31:57] <lisp123> Thanks. I was hoping to avoid doing that because I wanted to keep some semantic meaning that its a "nickname"
[09:32:19] <lisp123> But those are useful (I would have otherwise just re-written the function lambda list)
[09:32:21] <lisp123> Thanks!
[09:57:08] *** Joins: fbmnds (~fbmnds@dyndsl-037-138-129-136.ewe-ip-backbone.de)
[09:58:17] *** Quits: fbmnds (~fbmnds@dyndsl-037-138-129-136.ewe-ip-backbone.de) (Quit: Client closed)
[10:43:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:48:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:48:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[10:50:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:51:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:54:29] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[11:34:31] *** Joins: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de)
[11:55:53] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[12:01:42] <ogamita> lisp123: you'd probably have to add a declaration to inform the compiler that the new name has a function definition!
[12:02:44] <ogamita> (progn (setf (fdefinition 'mtfr) (fdefinition 'make-test-from-repl))  (proclaim '(ftype function mtfr)))
[12:02:57] <lisp123> ogamita: Thanks! I didn't know that
[12:03:28] <ogamita> definining a macro is no good: (mapcar 'mtfr list-of-args) wouldn't work.
[12:03:44] <lisp123> Yeah, I decided to go down the fdefinition route for that reason
[12:04:10] *** Quits: rain3 (~rain3___@79.115.252.154) (Read error: Connection reset by peer)
[12:04:40] <lisp123> I've updated my code to include the above proclaimation
[13:07:57] *** Quits: kuao (uid504326@id-504326.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[13:31:02] *** Quits: Nselm (~Nselm@p200300d56f0dd2fd651ddbefc8f50dfa.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:28:56] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[16:04:13] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:14:17] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:14:23] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:25:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[17:00:50] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[17:17:57] *** Joins: random-nick (~random-ni@87.116.180.220)
[17:28:31] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[17:59:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:06:19] *** Joins: kuao (uid504326@id-504326.helmsley.irccloud.com)
[18:20:37] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[18:33:26] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[18:46:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:47:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:48:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:57:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:00:56] <kagevf> lisp123: right, it's just "terminal UI" as opposed to graphical ... eww works in terminal emacs, except it doesn't render images AFAIK, not sure why CLHS doesn't work (for me) ... I'll have to try it in GUI emacs to make sure I'm not missing anything
[19:03:00] <lisp123> kagevf: Have you downloaded CLHS?
[19:05:23] <lisp123> (setq browse-url-browser-function 'eww-browse-url) (setq common-lisp-hyperspec-root (concat "file://" (expand-file-name "~/lisp-notes/Resources/HyperSpec-7-0 3/HyperSpec/")))
[19:05:43] <lisp123> Alternatively I guess you could change it the web URL, but might as well download it
[19:07:16] <kagevf> lisp123: I downloaded CLHS .... let me double check those other settings ...
[19:08:15] <lisp123> The only other thing I can see in my file is this: (setq slime-contribs '(slime-fancy slime-asdf))   ;; Something fancy
[19:08:19] <kagevf> hmmm my browse-url-browser-function is set to browse-url-default-browser
[19:10:09] <kagevf> ok, now eww tries to load the doc ... but it's trying to load a local file over port 80
[19:11:13] <kagevf> I think I have the path set incorrectly ... let me reset that ...
[19:11:33] <lisp123> Cool, let me know. I searched for EWW and nothing else in my .emacs
[19:15:32] <kagevf> lisp123: success!!! thank you for your help ... I needed that eww setting and had to fix how I set the file path for where I downloaded CLHS
[19:15:43] *** Joins: Josh_2 (~user@37.25.47.130)
[19:16:06] <lisp123> kagevf: Super :) its one of my favourite features so hope you get to make good use of it too
[19:16:27] <lisp123> Next on list is downloading all of Stack Overflow "lisp" "common-lisp" for quick search in Emacs
[19:16:29] <kagevf> I will! :) it's very convenient
[19:16:46] <kagevf> lisp123: for real? :)
[19:17:45] <lisp123> kagevf: Yeah :) Downloading it is the easy part...thinking of the best way to search / represent it...and since its lisp we have to re-invent the wheel vs. using a standard package (there's one out there for text search in lisp but I don't have the name on the top of my head right now)
[19:19:27] <kagevf> I wonder if the slime-documentation-lookup stuff can be re-purposed to handle other sites' HTML ...?
[19:19:56] <kagevf> I wonder if the slime-documentation-lookup stuff can be re-purposed to handle other sites' HTML ...?
[19:20:07] <kagevf> (sorry for double post)
[19:20:08] <lisp123> Not a bad idea
[19:20:33] <kagevf> maybe at least for starters, or to get some ideas, right? hehe
[19:20:54] <lisp123> for sure
[19:35:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:05:43] *** Joins: Oladon (~olad@98.43.81.226)
[20:20:57] *** Joins: vats (~vats@103.158.91.216)
[20:28:20] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[20:29:02] *** Joins: minion (~minion@common-lisp.net)
[20:30:25] *** Joins: paule32_ (~paule32@user/paule32)
[20:33:16] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 245 seconds)
[20:38:24] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:38:27] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[20:39:20] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[20:40:41] *** Joins: JoshYoshi (~user@37.25.47.130)
[20:41:16] *** Joins: zagura__ (~zagura@user/zagura)
[20:43:35] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[20:46:43] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[20:46:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (*.net *.split)
[20:46:44] *** Quits: Jing (~hedgehog@2604:a840:3::105f) (*.net *.split)
[20:46:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[20:46:44] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[20:48:24] *** zagura__ is now known as zagura
[20:52:04] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[20:52:55] *** Joins: Jing (~hedgehog@2604:a840:3::105f)
[20:52:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:53:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Max SendQ exceeded)
[20:53:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:59:22] *** Joins: treflip (~user@95.79.32.99)
[21:02:41] *** Quits: vats (~vats@103.158.91.216) (Ping timeout: 256 seconds)
[21:02:49] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[21:03:18] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[21:03:23] *** JoshYoshi is now known as Josh_2
[21:06:00] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:08:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:40:38] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:43:10] *** paule32_ is now known as paule32
[21:55:44] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[21:56:03] <lisp123_> I have a bit of an issue / conuldrum
[21:56:36] <lisp123_> I have a custom function list-product which multiplies some of the elements of a list to a new list. E.g. (list-product '(1 2 3) '(A B)) will give a certain value
[21:57:22] <lisp123_> Now I am trying to use APPLY like this: (let ((form '(list-product '(1 2 3) '(A B)))) (apply (car form) (cdr form))
[21:58:01] <lisp123_> But the issue is that APPLY is working on the arguments '(1 2 3) and ('(A B)) and not '(1 2 3) and '(A B)
[21:58:47] <lisp123_> Any ideas how to solve this?
[21:58:48] <pjb> lisp123_: the rule of evaluation is not that.
[21:59:15] <pjb> lisp123_: the rule of evaluation of (fun args…) is to apply args, to the list of the result of the evaluation of each args, from left to right.
[21:59:33] <pjb> (apply (car form) (mapcar (function eval) (cdr form)))
[21:59:53] <pjb> Now, of course, in CL, we'd need a special eval function to take into account the local environment.
[22:00:14] <pjb> This is done by the EVAL function internally usually.
[22:02:36] <lisp123_> pjb: thanks, (apply (car form) (mapcar (function eval) (cdr form))) worked
[22:03:14] <pjb> lisp123_: only because your argument don't refer to local variables.
[22:03:53] <pjb> (let ((a 42)) (let ((form '(list-product (list 1 2 3 a) '(A B)))) (apply (car form) (mapcar (function eval) (cdr form))))) #| ERROR: Unbound variable: a |# 
[22:04:26] <lisp123_> Is there an alternate way to make it work with local variables?
[22:04:38] <pjb> No. You have to implement an eval for that.
[22:05:02] <pjb> or substitute the values:
[22:05:27] <lisp123_> Got it, thanks. So I might as well do (eval '(list-product '(1 2 3) '(A B)))
[22:05:45] <pjb> (defun list-product (a b) (list a b)) (let ((a 42)) (let ((form `(list-product (list 1 2 3 ,a) '(A B)))) (apply (car form) (mapcar (function eval) (cdr form))))) #| --> ((1 2 3 42) (a b)) |# 
[22:05:59] <pjb> lisp123_: that'd probably be better, indeed.
[22:06:36] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:07:16] <pjb> Or use (let ((call '(list-product (1 2 3) (A B)))) (apply (function funcall) call)) #| --> ((1 2 3) (a b)) |# 
[22:07:53] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:09:05] <lisp123_> That didn't work
[22:09:24] <pjb> Did you remove the quote?
[22:09:34] <lisp123_> No, let me try that
[22:09:50] <lisp123_> Worked!
[22:18:26] *** Joins: beach` (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[22:20:22] *** Quits: beach (~user@2a01:cb19:150:3400:185d:876f:56db:5be9) (Ping timeout: 268 seconds)
[22:33:17] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:40:31] <lisp123_> pjb: Thanks for your help, that (apply (car form) (mapcar (function eval) (cdr form))) is really helpful in reminding the rules of evaluation
[22:40:57] <lisp123_> I think you said once (perhaps in certain context) to avoid using reader macros? Is that a global advice?
[22:41:16] <lisp123_> (I noted you did (function eval) vs. #'eval
[22:46:21] <lisp123_> I think I recall it was in the context that (quote 1 2 3) is a SEXP whilst '(1 2 3) needs to be parsed, so from a purely textual point of view (before a reader parses it), the former keeps its meaning while the latter loses it
[22:55:21] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 245 seconds)
[22:57:25] *** Joins: aeth (~aeth@user/aeth)
[22:58:04] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[23:00:00] *** Joins: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se)
[23:09:25] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:12:22] *** Joins: vats (~vats@103.158.91.123)
[23:25:46] <pjb> lisp123_: well, for newbies, I would indeed start showing them only quote and function, and only at the end of the newbie course, once we've learned about reader macros, would I tell them they may use ' and #'
[23:25:53] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:26:33] <pjb> but using (quote (1 2 3)) or (function foo)  makes it clear that they are lists.  Reading 'x  and  #'foo  a lot of people would forget they're lists.
[23:27:20] <pjb> lisp123_: otherwise, I just like the chubbiness of parentheses, vs. the spiky aspect and deadly spikes in ' and #'    At least, ' has only one spike, but # has 8 of them!  9 with #' !!!
[23:27:35] <pjb> and we all know that spike proteines are bad for your body.
[23:30:49] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:39:02] <kagevf> :)
[23:39:22] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 260 seconds)
[23:39:37] *** Joins: tyson2`` (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:48:34] *** Quits: tyson2`` (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Ping timeout: 268 seconds)
