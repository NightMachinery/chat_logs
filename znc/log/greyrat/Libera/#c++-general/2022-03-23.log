[00:00:10] <nq> it's hardware implemented though..
[00:00:15] <PJBoy> capable of representing any difference between size_t's other than the extreme case
[00:00:22] <TinoDidriksen> size_t is guaranteed unsigned.
[00:00:27] <PJBoy> ptrdiff_t is hardware implemented?
[00:00:31] <PJBoy> that's incorrect
[00:00:31] <nq> size_t
[00:00:35] <Juliu> TinoDidriksen, I doubt that
[00:00:36] <PJBoy> that's also incorrect
[00:00:43] <PJBoy> size_t is just a typedef
[00:00:43] <nq> too many threads of though here :))
[00:00:50] <PJBoy> << TYPE<size_t>
[00:00:51] <geordi> long unsigned int
[00:01:03] <PJBoy> it has some requirements like being unsigned and minimum 16 bits
[00:01:11] <PJBoy> and being able to store the size of any object in C++
[00:01:11] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 245 seconds)
[00:01:13] <TinoDidriksen> Doesn't matter if you doubt it - size_t is guaranteed unsigned.
[00:01:23] <cq-work> "The type size_Â­t is an implementation-defined unsigned integer type that is large enough to contain the size in bytes of any object ([expr.sizeof])."
[00:01:29] <Juliu> TinoDidriksen, I doubt that
[00:01:33] <nq> I though size_t was meant to match the register size of the machine
[00:01:37] <nq> and be unsigned
[00:01:39] <TinoDidriksen> You are wrong to doubt that. It's in the Standard.
[00:01:49] <cq-work> Juliu, there's no need to doubt, our bible says so
[00:01:54] <PJBoy> nah, there's nothing that has that property, but `int` is "recommended" to match the register size
[00:01:57] <TinoDidriksen> size_t must be >= 16 bits and unsigned.
[00:01:58] <Juliu> cq-work, I am not religious
[00:02:10] <PJBoy> ptrdiff_t is similar to size_t, but guaranteed to be signed and at least 17 bits
[00:02:29] <Juliu> PJBoy, one more reason to use int and not size_t
[00:02:45] <TinoDidriksen> int is abysmal. Can't rely on it.
[00:02:47] <cq-work> ... your advice is awful.
[00:02:59] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[00:03:00] <PJBoy> int's alright for minimum 16-bit integers
[00:03:13] <nq> I want Q for rational types..
[00:03:30] <Juliu> nq, isn't there something like that already?
[00:03:34] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[00:03:42] <nq> in mpc ?
[00:04:31] <Juliu> nq, I meant something like std:ratio
[00:04:31] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[00:04:32] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[00:04:34] <Juliu> std::
[00:04:51] <nq> ah, nice, wasn't up to the news with that
[00:04:53] <PJBoy> std::ratio is only used for compile time calculations
[00:05:07] <nq> damn, C++11, I didn't know of it
[00:05:38] <PJBoy> you can't for example add/multiply/etc two std::ratios
[00:06:02] <Juliu> Boost has something like that as well, only that the nominator and the denominator are both doubles
[00:06:26] <PJBoy> I mean there's std::ratio_add etc, but they're type aliases, not functions
[00:06:29] <nq> ah, I would need something that can emulate lossless arithmetic
[00:07:00] <Juliu> nq, can't be that hard to write something like that yourself
[00:07:11] <TinoDidriksen> There are many good arbitrary precision libraries.
[00:07:24] *** Parts: bpalmer (~user@user/bpalmer) (ERC (IRC client for Emacs 27.2))
[00:07:27] <nq> yes, even gnu relies on some
[00:07:33] <nq> when compiling the gcc suite itself
[00:08:45] <PJBoy> I've used libgmp, it's pretty painful
[00:08:55] <rpav> well, the C api .. most C apis are
[00:08:57] <nq> there's also gnu mpc and mpfr
[00:10:10] <rpav> the next gcc is probably compiled by randomly choosing and executing integers until it finds one which passes the tests, including one where its version is 1 greater than the prior
[00:10:54] <rpav> 91? let's execute that; i never liked it anyway... it should have been prime
[00:11:53] <Juliu> Randomness is a good idea if you don't know better and if consecutively choosing right half of the time leads to success
[00:12:21] <nq> what was that library used for quick random testing
[00:12:22] <Juliu> (Doesn't have to be half of the time. Any constant ratio works)
[00:12:30] <rpav> fuzzing or what
[00:12:51] <nq> I saw it at a conference, but forgot its name
[00:13:09] <nq> I think it was some bearded, not so old guy, presenting it
[00:13:33] <rpav> well with that kind of specificity ;)
[00:13:50] <Alipha> MaddHatter: if the result of all floating point computations are divisible by 0.5, then yes, the `double` values should remain entirely exact (unless the values get larger than 2^53 or whatever)
[00:14:06] <Juliu> 91 is almost a prime :D
[00:14:20] <PJBoy> nq, libfuzzer?
[00:15:00] <PJBoy> honggfuzz?
[00:15:01] <nq> PJBoy, I think not
[00:15:39] <PJBoy> I've seen some others in the wild, but that's all I got
[00:15:39] <nq> rather, I think it was something used to generate random inputs based on the parameter list of a function; sorry, I saw it a long time ago and didn't actually get to it
[00:16:38] <PJBoy> intellitest is alright
[00:16:44] <PJBoy> although not C++
[00:16:55] <Juliu> Why can't I just randomly guess a password and succeed as long as a letter is correct in 1 out of 26 cases? :(
[00:19:39] <nq> how do you make asynchronous function calls in C++?
[00:19:58] <PJBoy> depends
[00:20:05] <PJBoy> I'd start at std::async
[00:20:35] <Juliu> Sounds like multitreading with all its pitfalls
[00:20:36] <PJBoy> https://en.cppreference.com/w/cpp/thread/async
[00:22:32] <nq> so if the launch is async, it starts upon creation, and if it's lazy, it starts on request for evaluation ?
[00:22:44] * Juliu is sad that no one can answer his question
[00:23:41] <PJBoy> that sounds right
[00:24:18] <nq> but I don't understand the lazy one though
[00:24:44] <nq> doesn't it become sequential if it only evaluates when it's requested for ?
[00:24:58] <ville> it does "something"
[00:25:24] <PJBoy> you can queue up 100 deferred evaluations and they'll potentially all occur at different times
[00:25:30] <ville> as it it could launch right away in a separate thread, you'll be able to get the result at some point
[00:25:57] <PJBoy> so it's asynchronous with respect to other deferred threads and asynchronous with respect to the function that spawns those asyncs
[00:26:03] <ville> std::async() is basically useless
[00:26:19] <PJBoy> how'd you reach that conclusion?
[00:26:34] <ville> i've never found a use for it
[00:26:39] *** Joins: galik (~galik@cpc115028-bour7-2-0-cust153.15-1.cable.virginm.net)
[00:28:25] <nq> async can run on the same thread or on a different thread ? or always on a different thread ?
[00:28:26] <ville> if you're using threads then you probably care about performance? std::async() is so underspecified that it gives you no control over the system
[00:28:33] <MaddHatter> what was so bad about () for lambdas?
[00:28:38] <ville> nq: all of the above
[00:28:46] <nq> kk
[00:29:03] <nq> then what handles the scheduling for a thread, in a process ?
[00:29:15] <ville> unspecified
[00:29:24] <nq> so the kernel ?
[00:29:31] <ville> (well your operating system's scheduler)
[00:29:37] <PJBoy> async with launch::async policy always spawns a new thread and with launch::deferred never spawns a new thread
[00:29:45] <nq> ah, better
[00:29:58] <PJBoy> it's only unspecified if you specify both policies
[00:30:05] <keipi> ville pretty good use for std::async would be threads that can throw exceptions
[00:30:08] <nq> so the deferred one will run on the requesting thread, when requesting the evaluation ?
[00:30:38] <PJBoy> it will run in the thread that spawns the async
[00:30:41] <keipi> since those can't by caught by the starting thread when std::thread is used
[00:30:48] <PJBoy> which isn't necessarily the thread that requests the evaluation
[00:31:01] *** Quits: galik (~galik@cpc115028-bour7-2-0-cust153.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:31:21] <nq> so the promise can be shared between threads ?
[00:31:41] <PJBoy> yeah sure
[00:31:46] <nq> and any of the copies can initiate the request for the deferred evaluation
[00:31:50] <ville> keipi: 0) don't use exceptions 1) if you for some reason do then just convert exceptions to error messages
[00:32:04] <Juliu> Is there a standard type for passwords, and maybe one that has a method to guess them?
[00:32:19] <PJBoy> well, std::future isn't copyable
[00:32:26] <PJBoy> but you can move the future to another thread
[00:33:26] <PJBoy> and I guess you can move a future into a shared_future, which is copyable
[00:33:39] <keipi> ville why not use exceptions? what would be the alternative?
[00:34:03] <nq> PJBoy: I see, thanks
[00:35:15] <ville> keipi: error codes?
[00:35:56] <MaddHatter> "standard type for passwords"? They're just strings...? If you are doing cryptography with them (and you probably are, because they're passwords, right), then your crypto lib likely has a "secure block" type that has additional protections like requesting not to be paged out, etc.
[00:36:00] *** Quits: paul424 (~tom@ip-5-172-239-101.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:36:23] <Juliu> Cryptography does not exist
[00:36:57] <Juliu> I just want to write password.guess()
[00:36:58] <MaddHatter> that's an interesting opinion
[00:37:16] <ville> keipi: admittedly you probably make your life easier in c++ if you do use exceptions. when in rome, drink the kool aid
[00:37:20] <PJBoy> interesting in the twoset sense
[00:37:37] <Juliu> MaddHatter, well, let's say at least I have as much proof for my opinion as you have for yours
[00:38:08] <MaddHatter> You know this is c++ right? This is not a language that has a one-line RunHttpServer() and StartDatabaseinCloud(). You have to build the lego yourself, brick by brick.
[00:38:18] <Juliu> Is there really something in C++ that let's the compiler know that you do not want the memory to be paged out?
[00:38:54] <MaddHatter> usually it's done through system calls, which are usually C, which c++ plays relatively nicely with
[00:39:09] <Juliu> MaddHatter, what is C++ even good for if it can't guess my password
[00:39:18] <Raziel> hwat the fuck is going on here
[00:39:25] <Friithian> I dont think anyone knows
[00:39:35] <PJBoy> people are interacting with Juliu
[00:39:40] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[00:39:53] <MaddHatter> Raziel: apparently I didn't realize that what was asked wasn't a serious question
[00:40:00] *** Joins: pulse (~pulse@user/pulse)
[00:40:04] <Juliu> PJBoy, true. Seems you people are not used to anyone who does not think in the same narrow paths you guys do
[00:40:24] <Raziel> lol
[00:40:36] <cq-work> Ooo, burn PJBoy, you going to take that?
[00:40:41] <Juliu> MaddHatter, actually I am very serious, but people don't get it since it is more than they can understand
[00:40:47] <keipi> ville ahh, makes. Just wondering mostly, I'm at the end of a (very long) C++ course and we got taught using exceptions (admittedly, we use them very little and get very angry emails if we use it when other options would suffice)
[00:41:05] <Raziel> Juliu, you crackin passwords you lil shit?
[00:41:08] <Raziel> do it in CUDA, it'll be faster
[00:41:13] <Raziel> >_>
[00:41:17] <PJBoy> I don't have much to say to that :(
[00:41:27] <Juliu> Raziel, no :( That takes too much time. My question is why
[00:41:34] <Raziel> why what? v:
[00:41:41] <PJBoy> we all agree that only narrow minded people call other people narrow minded, right?
[00:42:19] <nq> MaddHatter: how does a type request not to be paged out ?
[00:42:21] <Juliu> PJBoy, I love when people say things like "All intelligent people do X" or "... don't do X"
[00:42:36] <Raziel> all true scotsmen love haggis
[00:42:41] <Juliu> nq, I would like to know that as well
[00:42:46] <PJBoy> like people that tell you to do your research, and then they only look at things through the lens of their conspiracy theory
[00:43:42] <MaddHatter> nq: I've not bothered to read beyond the documentation, so I don't know how it works. I know there are calls to make that request and I assume it allocates the bytes, makes the appropriate configurations on it, and then uses it after that.
[00:43:45] <Juliu> PJBoy, I started taking conspiracy theory as a compliment for a wise person nowadays, since so many conspiracy theories became facts in 2020 and 2021
[00:44:13] <Raziel> aw shit I'm going back to my refactorings
[00:44:18] <MaddHatter> nq: Usually it guarantees (again, I assume through the destructor) to zero the bytes afterward
[00:44:38] <PJBoy> so many conspiracy theories became debunked in those years too
[00:44:58] <Juliu> MaddHatter, do you really think that this is used when programs handle passwords? I doubt it
[00:45:01] <MaddHatter> nq: One example of such a thing though is CryptoPP::SecByteBlock, so maybe look there?
[00:45:32] <MaddHatter> I'm familiar with that because that's what I've used when handling passwords.
[00:45:32] <nq> MaddHatter, I see; so my understanding then is that it will use something other than malloc() possibly, it can allocate a whole page at once, mark it as "not-dumpable to disk", and also does the "zero the bytes" (a memcpy 0 for the whole page) in the dtor
[00:45:33] <Juliu> PJBoy, I don't know a single theory that got debunked. Often those debunkments themselves got debunked soon after
[00:45:59] <Raziel> PJBoy, help me refactor 20 year old shit "C++ is definitely just C with classes" code instead, it'll be more fun than this
[00:46:09] <nq> MaddHatter: are those blocks each a page, or are those pages managed by the library, possibly used by multiple blocks ?
[00:46:19] <PJBoy> for example, the conspiracy theories that the world would end in 2020 and 2021
[00:46:41] <MaddHatter> nq: the user requests whatever arbitrary size they want. Whether it's page-sized blocks underneath, I don't know. maybe?
[00:46:49] <Juliu> nq, can we even know what a page is or what physically consecutive memory is? I thought the whole idea was that we can't
[00:47:27] <Raziel> speaking of page, why the fuck do I have 60gb of shit cached to the disk pagefile
[00:47:38] <Juliu> PJBoy, never heard about a theory that the world would end in 2020 or 2021. Wasn't it 2012 ?
[00:47:46] <Raziel> >232gb committed
[00:47:53] <Raziel> who did I piss off to reach these heights
[00:48:04] <Juliu> PJBoy, give me another example
[00:48:07] <PJBoy> there's a lot of conspiracy theories
[00:48:21] <Juliu> Not many left that did not become facts
[00:48:21] <PJBoy> makes no difference whether you've heard of them or not
[00:48:39] <Juliu> PJBoy, give me one that I have heard of that got debunked
[00:48:40] <PJBoy> lots of science gets disproven, doesn't make being scientifically inaccurate a good thing
[00:49:45] * Juliu still wants to guess passwords
[00:49:58] <PJBoy> you're welcome to guess them
[00:50:08] <Juliu> That takes too long
[00:50:14] <Juliu> I just want to know them
[00:50:17] <nq> Raziel: how much of that might actually be shared virtual memory ?
[00:50:50] <Juliu> nq, what if the computer goes into hybernation mode and copies the memory content onto disk?
[00:51:25] <Juliu> What if the computer is a virtual machine and everything is on disk anyway
[00:51:31] <nq> it could also do that; but even wihtout hibernation, on my machine, the browser has a 26.5 gb of vitual memory, for just a few tabs (maybe 50)
[00:51:54] <Juliu> nq, close some porn tabs and it might run faster
[00:52:01] <nq> right
[00:52:06] <Juliu> 50 is really a lot
[00:52:08] <nq> I'll consider that.. maybe
[00:52:50] <Juliu> And then you realize that you are using Firefox, and no matter how many tabs you close, the memory is not freed until you close the whole program
[00:53:27] <MaddHatter> nq: a quick search later, it looks like mlock() and VirtualLock() are probably the most common/obvious approach
[00:53:32] <Juliu> PJBoy, maybe I just need a type/class that can produce all possible strings one after another?
[00:53:47] <Raziel> nq, most of it is probably irrelevant already but not cleared yet. just impressive how much it ballooned when I wasn't looking v:
[00:53:47] <cq-work> I will say, mlock and VirtualLock are not perfect.
[00:54:16] <Raziel> pretty sure most of it is from firefox not being restarted for a few days a while ago
[00:54:16] <cq-work> It heavily depends on the "vector" you're trying to protect against. Often, just make sure the buffer holding some secret is cleared is "good enough".
[00:54:28] <Juliu> MaddHatter, what library are they from?
[00:54:30] <nq> MaddHunter: are those like malloc() ? are they part of the std library
[00:54:45] <cq-work> mlock is posix, VirtualAlloc is Win32 API
[00:55:00] <MaddHatter> https://man7.org/linux/man-pages/man2/mlock.2.html, https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtuallock
[00:55:35] <Juliu> cq-work, somehow I doubt that anyone is doing that. Why would they? Either you have access to the machine or you do not
[00:56:30] <MaddHatter> I, too, always run everything as root /s
[00:56:47] <Juliu> lol
[00:56:53] <cq-work> It is not like that at all. Most vectors of attack are from remote locations, having local access to the machine is something completely different.
[00:57:08] <Juliu> MaddHatter, honestly that is what I'm doing
[00:57:19] *** Shell is now known as concha
[00:57:24] *** concha is now known as Shell
[00:57:51] <Juliu> but then again I'm not using Linux, so it's kinda normal
[00:58:10] <cq-work> You're a walking vulnerability, my lord.
[00:58:14] *** Joins: gehn (~gehn@user/gehn)
[00:58:25] <Juliu> cq-work, did I meantion that I never do updates?
[00:58:48] <nq> ah, so the swap space that one partitions when installing a linux distro is what gets used to dump pages ?
[00:59:08] <Juliu> PJBoy, I know about next_permutation, but is there something that can just create the next string?
[00:59:12] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:59:53] <nq> but, on windows there is that pagefile I think, does that essentially mean that Windows allocates swap space on disk, regardless of what you want (at lesat implicitly, until you set somewhere a limit of pagefile's size) ?
[00:59:56] <johnny> i wonder which of the popular distros don't compress swap now
[00:59:58] <Juliu> Something like string++
[01:00:23] <ville> johnny: arch?
[01:00:40] <Juliu> nq, I think the pagefile is always as large as your RAM, no matter what
[01:00:41] <johnny> ah, you'd probably have to set that up yourself on distros like arch and gentoo indeed
[01:01:01] <johnny> i've never used arch so i don't know how their instructions for the happy path go
[01:01:04] <nq> Juliu: possibly larger ?
[01:01:19] <johnny> maybe they do recommend using compressed swap
[01:01:42] <ville> johnny: been a while since i did an install, but don't remember that was the case
[01:01:44] <Juliu> nq, mine is 17'078'222'848 bytes large
[01:01:44] <johnny> i know fedora switched to it sometime last year
[01:02:09] <johnny> ville, awhile? depends on what that means. if it was say 1 or 2 years ago, then i doubt it would have
[01:02:39] <Juliu> nq, that's 15.9 GiB. Don't ask me why
[01:02:43] <ville> this machine is 2+ years old i think
[01:03:11] <nq> dividing by 1024 repeatedly until it goes from Bytes to GBytes
[01:03:18] <nq> just like with disk space
[01:03:26] <nq> it's advertised at 100GB but it's less
[01:03:54] <nq> because manufacturers mean 100 * 10^9, but memory space maps it as 9? * 2^30
[01:04:21] <nq> 93.13 GB
[01:04:23] <Raziel> nq, you can completely disable the disk pagefile on windows, or set it to a specific (max) size
[01:04:31] <Raziel> the default is to auto-grow it to as much as it needs though
[01:04:42] <nq> Raziel: aha, good
[01:04:43] <Juliu> nq, often they mean 1024^2 kB, while 1 kB being 1000 bytes, or some weird crap like that
[01:04:52] <PJBoy> 100GB means 100 * 10^9 bytes by the SI standard
[01:05:17] <Juliu> I gave up on kB and GB. No one truely knows what is meant by that
[01:05:20] <nq> there is SI standard for that ? :) didn't know this
[01:05:32] <nq> I guess it has to do with giga vs gigi or gibi or somthing
[01:05:51] <PJBoy> 100GB as 100 * 2^30 is an outdated notation now
[01:05:54] <PJBoy> yeah indeed
[01:06:01] <Juliu> nq, the problem is that people do not always follow the SI standard when they write kB or GB. They even write KB which is probably not even in the standard
[01:06:19] <PJBoy> https://en.wikipedia.org/wiki/Kilobyte has details
[01:06:28] <nq> KB would be the SI actually, and KiB would be the 2^10 Bytes
[01:06:29] <Juliu> PJBoy, yes. It's a weird mess
[01:06:45] <PJBoy> SI says kB with a lowercase k
[01:06:52] <nq> aha, ok
[01:06:53] <Juliu> PJBoy, as I said
[01:06:56] <PJBoy> yup
[01:07:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:07:32] <nq> wow, it's just kilo that's lowercase :(
[01:07:42] <PJBoy> as it is for all other units than byte
[01:07:47] <Juliu> It's actually weird that the k in the SI is a small k. Should be a large one, not just for bytes
[01:08:11] <PJBoy> nah it would be weird to see "destination is 5Km ahead"
[01:08:15] <PJBoy> also K is kelvin
[01:08:46] <Juliu> PJBoy, no, it would not. Actually km is weird. k = 1000 is larger than 1 and hence should be large, like all other prefixes as M or G
[01:08:49] <Raziel> yeha, K is kelvin, M is mega, m is milli but also meter
[01:08:51] <Raziel> ...woops
[01:09:04] <Juliu> Raziel, yes, damn Kelvin. Ruins everything
[01:09:32] <ville> Raziel: prefix vs unit, different class of things
[01:09:42] <Juliu> True, meters and milli both being m is also shit
[01:09:50] <Raziel> I'll still take some confusion between m and m over measuring things in dog's bollock-lengths
[01:10:08] <Juliu> So they should have made the k large!
[01:10:41] <Juliu> Raziel, that would be bad since d is already deci :P
[01:10:50] <Raziel> lol
[01:10:59] <Raziel> that is one you don't see often, but yes
[01:11:05] <Juliu> True
[01:11:18] <Juliu> dm^3 for example. Others call it a liter
[01:11:23] <PJBoy> except for dB
[01:11:29] <PJBoy> which isn't a decibyte
[01:11:39] <Raziel> oof
[01:11:42] <Juliu> PJBoy, fuck, you're right
[01:12:04] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:12:13] <Juliu> I never saw something like millibytes or decibytes
[01:12:26] <Raziel> to be fair, pretty much all of them are identifiable fine in context
[01:12:39] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[01:12:43] <Raziel> unless you're working on audio shit and you also happen to measure your samples in decibytes
[01:12:49] <Raziel> which, yknow, might be a you problem
[01:14:16] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[01:14:40] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[01:15:51] <johnny> debugging... it's fun..
[01:16:22] <Juliu> Bytes are a dumb unit in the first place. Bits are better
[01:16:26] <johnny> jlink is sure setup weirdly.. it has a gui for things, but if there are any errors in initializing it, it just closes
[01:16:49] <johnny> i mean initializing the connection. not the program itself
[01:17:07] <johnny> which means if you don't run it from the cli, you won't get a hint as to why it failed
[01:17:41] <Juliu> So a decibyte is 0.8 bits?
[01:17:44] <johnny> and it certainly won't tell you that maybe you should have chosen swd instead of jtag . although that's not abnromal for these type of programs
[01:19:50] <Juliu> PJBoy, you still have not told me what class to use to generate one string after the other?
[01:19:55] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[01:20:14] <Raziel> class?
[01:20:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[01:20:30] <PJBoy> you know how to write code
[01:20:33] <Raziel> you use combinations with repetitions from a string seed containing all potential characters.
[01:20:34] <nq> johnny: you work with embedded ?
[01:20:35] <Raziel> get to it
[01:21:03] <Juliu> PJBoy, teach me, sempai
[01:21:08] <Raziel> actually, permutations with repetitions
[01:21:19] <PJBoy> think you just want the power set of all valid characters
[01:21:32] <Raziel> PJBoy, is that what people call it these days?
[01:21:33] <Juliu> Raziel, somehow I still have the feeling that trying all passwords might take a bit long
[01:21:35] <nq> johnny: jtag sounds like that interface used for transmitting bit by bit along a chain of shift registers, I think
[01:21:37] <PJBoy> permutations sounds limited
[01:21:42] <Raziel> Juliu, no shit :p
[01:21:50] <Juliu> Raziel, so tell me a better way!
[01:21:53] <Raziel> PJBoy, permutations with repetitions is all of em
[01:22:43] <Raziel> Juliu, well that depends on your specific use
[01:22:48] <Raziel> because on the general case, there isn't a better way
[01:23:03] <PJBoy> isn't permutations with repetitions just where the order of equal elements is considered significant?
[01:23:05] <Juliu> Raziel, getting rich or world dominance. Either of those two. I have no decided yet
[01:23:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:23:27] <Juliu> Raziel, how can you say there is no better way? Stop lying
[01:23:32] <PJBoy> the various phrases that contain combinatoric words I find super unclear
[01:23:38] <Raziel> PJBoy, permutations with repetitions is n^k of the initial values
[01:23:57] <Juliu> Raziel, what initial values?
[01:24:08] <Juliu> What is n and what is k?
[01:24:23] <Raziel> eg if you have [1, 2, 3] as initial values, and you want permutations with repetitions of length 3, you'll get 9 collections, [1, 1, 1,], [1, 1, 2], [1, 2, 1], [2, 1, 1] and so on
[01:24:37] <Raziel> Juliu, n is the size of the initial set and k is the length of your desired permutation
[01:24:45] <PJBoy> ah ok, wikipedia confirms
[01:24:53] <Raziel> in your case, your initial set/values should be a set of all characters accepted in the password
[01:25:14] <Raziel> and you'll have multiple ks, from the minimum password length to the maximum password length
[01:25:18] <Raziel> probably a whole lot
[01:25:27] <PJBoy> power set would be the wrong phrase then
[01:25:29] <Juliu> Raziel, well, not quite. n had to be the number of unique/distinct initial symbols
[01:25:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:25:55] <johnny> nq, yes, although i'm not that good at it. mostly hobbyist stuff here.
[01:26:01] <nq> cq-work: what do you mean by "vector of attack" ?
[01:26:25] <Juliu> Raziel, can't we just compute the password?
[01:26:31] <Raziel> Juliu, yes. which is the size of your initial set. because your initial set is made up of the unique symbols v:
[01:26:33] <johnny> luckily devices are cheap enough tehse days such that you don't have to do the stuff you used to have to, since the devices have fast cpus and a fair amount of storage
[01:26:44] <Juliu> Raziel, yes, "set", true
[01:26:44] <Raziel> compute what password from what data?
[01:26:56] <Juliu> Raziel, the public key
[01:27:23] <Raziel> haha, no. :p
[01:27:29] <Juliu> Raziel, why not?
[01:28:00] <Raziel> mostly because you don't have the (probably random) seed that was used to generate the key
[01:28:19] <Juliu> Raziel, lets just pretend we dont need that
[01:29:13] <TinoDidriksen> Let's just pretend one of the core features that make it secure isn't there?
[01:29:24] <Juliu> Raziel, all we have to do is password(public_key).get()
[01:29:37] <Juliu> TinoDidriksen, who ever said it was secure?
[01:29:42] <Raziel> sure, run the generation algorithm in reverse, done
[01:29:45] <Raziel> :p
[01:29:56] <Juliu> Raziel, yes, that's what I'm working on
[01:30:24] <cq-work> ...
[01:30:31] <johnny> i wish i had a better scope, but such is life :(
[01:30:33] <Juliu> .. well, at least I would. I have to finish this other thing first
[01:30:35] <Raziel> I mean, good luck? :p
[01:30:46] <Juliu> Raziel, help me!
[01:31:36] <Juliu> Raziel, tell me how to program it!
[01:32:54] <Raziel> well, I'd probably start with a qrng device placed in a magic circle situation in the correct alignment determined by the golden ratio, then get the seed from that and hope it decrypts the password
[01:33:25] <Juliu> What's a qrng device?
[01:33:31] <johnny> gotta be the right phase of the moon too
[01:33:50] <Raziel> johnny, yeah, and you need a complex system of mirrors to reflect the moonlight onto the qrng device
[01:33:56] <Juliu> johnny, that is achieved at least ones every 28 days and not hard
[01:33:57] <Raziel> Juliu, quantum rng
[01:34:01] <Raziel> those do actually exist, for what it's worth
[01:34:03] <cq-work> Don't forget the goat sacrifice.
[01:34:18] <Juliu> Raziel, no, quantum computers are shit. I'm talking about stuff that actually works
[01:34:19] <johnny> the planes of the galaxy must be aligned
[01:34:21] <cq-work> Suppose QRNG is true random which is interesting.
[01:34:46] <Raziel> https://www.idquantique.com/random-number-generation/products/quantis-qrng-pcie/
[01:35:04] <Juliu> There is no reason to believe that quantum computers actually work
[01:36:03] <Juliu> What if everything is determined? Wouldn't that break quantum computers?
[01:36:10] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[01:36:13] <johnny> there's no evidence that is the case though
[01:36:20] <Raziel> cq-work, only 3 grand for the 240mbps boy
[01:36:21] <Raziel> V:
[01:36:27] <johnny> that's the way folks thought itw as
[01:36:39] <Juliu> johnny, there is also no evidence that is not the case
[01:37:10] <Juliu> Let's stick with normal computers and just get better in programming
[01:37:19] <johnny> so ou're just saying one of the most well tested theories in physics is just not true.. got it
[01:37:36] <Juliu> johnny, yes, that is what I am saying
[01:37:38] <Friithian> uh, so we just scrap the entire deal of quantum computers? even though we've put a lot of work into it and seem to be getting places?
[01:37:41] <Friithian> that's a horrible idea
[01:37:51] <Juliu> Friithian, yes
[01:37:59] <johnny> Juliu, i'm guessing you haven't really studied physics huh.
[01:38:12] <Juliu> johnny, true. But that does not mean that I am wrong
[01:38:16] <johnny> lol
[01:38:16] <Friithian> â¦
[01:38:36] <Juliu> johnny, can you prove non-determinism? I'm waiting
[01:38:44] <Friithian> â¦â¦â¦
[01:38:53] <johnny> you can read hte papers that have already been written
[01:38:58] <johnny> why would i repeat what they said
[01:39:02] <Juliu> johnny, well, they don't prove it
[01:39:14] <Friithian> no, johnny, you yourselv must prove it. Reproduce all experimental results. Go, do it. :P
[01:39:17] <johnny> lol
[01:39:38] <Juliu> People are weird
[01:39:52] <johnny> just give me exclusive access to the large hardon collider.. screw everybody else who's acutally doing something useful with it right now.. so we can redo this all from first principles
[01:40:17] <Juliu> johnny, how would you prove that non-determinism exists? Seems pretty impossible
[01:40:30] <Friithian> prove it doesn't
[01:40:33] <Friithian> actually impossible
[01:40:47] <Juliu> The last time we gave the LHC to someone like you, we got the Mandela effect
[01:41:10] <johnny> me personally, i prefer to o with the best available knowledge atm , while keeping my mind open for other possibilities
[01:41:17] <Juliu> Friithian, yes and no. We could show that everything appears to be deterministic
[01:41:29] <johnny> we already went through htat with pysics pre 19000
[01:41:32] <johnny> 1900*
[01:41:41] <Friithian> that doesn't prove the non-existance of non-determ- fuck I am not drunk enough for this
[01:41:48] <Juliu> johnny, then you should not hope on quantum computers, but better invest your time to do the same stuff with normal computers
[01:41:50] <ville> this looks like -social material
[01:42:04] <johnny> i'm not that interested in quantum computing, i have no purpose for it.. i leave that to the real nerds :)
[01:42:13] <Juliu> Friithian, as I said, yes and no
[01:42:47] <Juliu> johnny, I just want to do it without quantum computers since I have no quantum computer at hand. Is that too much asked?
[01:43:02] <johnny> Juliu, i think they were just clowning on you
[01:43:16] <Juliu> johnny, really? How mean. I would have never thought that
[01:43:17] <johnny> maybe i didn't read all the discussion, but it sounded like they were saing you wanted osmething unfeasible
[01:43:32] <Raziel> Juliu, maybe if you had started bruteforcing it already instead of qqing, you would've cracked it by now
[01:43:35] <johnny> and rather than saying directly, they were joking with it
[01:43:37] <Raziel> :^)
[01:43:42] <Juliu> It's not as if I would be asking for the impossible
[01:43:52] <johnny> that's the thing.. pretty sure they disagree
[01:43:56] <Juliu> Raziel, that sounds unlikely
[01:44:02] <Alipha> the topic of this channel still has to relate to c++
[01:44:12] <Friithian> Alipha: what topic? :P
[01:44:13] <Juliu> Alipha, party pooper
[01:44:14] <johnny> was the original question by Juliu related to C++?
[01:44:27] <johnny> it sounded like it was, but again i didn't read the whole thing
[01:44:47] <Juliu> johnny, I made my inition question related to C++ on purpose, yes
[01:45:08] <Juliu> It's not as if we would have a different topic in here at the moment
[01:45:17] <johnny> for the purpose of starting a discussion on quantum computing? or to atually do something with it related to C++?
[01:45:37] <johnny> i mean to achieve a real goal using C++
[01:45:44] <Juliu> I did not bring up quantum computers, and I'm trying to tell them since 10 minutes that I do not want to consider quantum computing
[01:46:10] <johnny> so.. did any of you think it was possible without quantum computing?
[01:46:21] <Juliu> Me
[01:46:30] <johnny> other than you.. who's the one asking for help, and thus doesn't know
[01:46:34] <Juliu> :(
[01:46:34] <Friithian> what even was the original thing?
[01:46:38] <Juliu> lol
[01:46:54] <Juliu> Answering by saying "quantum computers!" without even knowing what the question was
[01:47:07] <johnny> i didn't say it was quantum computers myself
[01:47:18] <johnny> i guess Raziel would know
[01:47:21] <nq> how would you typically go about parallelizing a function's implementation ?
[01:47:22] <Juliu> My question was how to program calculating the password if you only know the public key
[01:47:39] <Friithian> oh, how to break public key encryption?
[01:47:39] <johnny> so the answer is.. you don't
[01:47:41] <Juliu> nq, depends on the function
[01:47:42] <Friithian> you can't
[01:47:46] <Friithian> that's like, the entire point of it
[01:47:47] <Juliu> johnny, bad answer
[01:47:54] <johnny> you bruteforce it.. that's how
[01:47:56] <Juliu> Friithian, also bad answer
[01:47:56] <nq> would you just sort of "divide the input space" ?
[01:47:56] <Friithian> Juliu: no it is an entirely perfect answer
[01:47:57] <johnny> or break the algorithm
[01:48:06] <Juliu> johnny, bruteforce is too slow. We already had that
[01:48:15] <johnny> then find a flaw in the algorithm
[01:48:17] <Juliu> Friithian, but it might be completely wrong
[01:48:19] <Friithian> Juliu: have you ever taken a class on encryption?
[01:48:23] <Raziel> johnny, quantum rngs and quantum computers aren't all that related
[01:48:30] <johnny> ah true
[01:48:32] <Juliu> nq, depends on the function
[01:48:41] <Raziel> qrng is just shooting photons at a barrier and seeing what side they end up on, basically
[01:48:55] <Juliu> Friithian, no. I'm not stupid and taking classes in fictional things that do not even exist
[01:48:59] <johnny> lol
[01:49:00] <johnny> omg
[01:49:06] <Friithian> oh so you're just an idiot
[01:49:20] <Juliu> Raziel, can you stop with saying quantum computers PLEASE!
[01:49:27] <johnny> that's hte most hilarious thing i've ever read..
[01:49:32] <Juliu> Friithian, I am an idiot for not believing in stupid things?
[01:49:39] <Raziel> Juliu, don't make me quantum entagle your private quarks
[01:49:49] <Juliu> Raziel, stop it
[01:49:50] <Friithian> Raziel: quantum entangle me, baby
[01:49:59] <Juliu> You guys are no help
[01:50:14] <johnny> indeed
[01:50:17] <Juliu> All I want is a normal boring algorithm. No quantum computer fantasy shit
[01:50:25] <Friithian> given you don't have even a tiny bit of knowledge of the subject matter
[01:50:27] <johnny> it's on you to write it Juliu
[01:50:37] <johnny> we're not smart enough, sorry
[01:50:42] <Juliu> Friithian, or you have no clue and don't notice it
[01:50:45] <johnny> we are awaiting the published aper on the subject
[01:50:48] <Friithian> you have 3 choices. Find a flaw in the algo, brute force, or brute force via quantum computers
[01:50:58] <Friithian> Juliu: no, you literally have no idea how any of this works
[01:50:59] <Juliu> johnny, I know, I know :( I just wanted a little bit of help
[01:51:06] <johnny> you won't find it here, sorry
[01:51:10] <Juliu> Friithian, I think that is true for you
[01:51:13] <Friithian> hah
[01:51:18] <johnny> Friithian, just admit you're too dumb
[01:51:22] <Juliu> Friithian, you do not even understand that cryptography might not even exist
[01:51:26] <Friithian> â¦
[01:51:38] <Friithian> *gestures wildly at math*
[01:51:43] <johnny> we bow before the superior intellect of Juliu
[01:51:50] <Juliu> You're more like "But my cryptography professor said ..."
[01:52:15] <Juliu> Friithian, math does not say that cryptography exists
[01:52:17] <Friithian> someone ping me if anyhting else juicy happens, I have to go to class. Like, where you learn shit
[01:52:40] <keipi> if math was real, why does my compiler keep giving me errors?
[01:52:44] <Juliu> Friithian, you learn things? More like you learn to believe in imaginary things. Sounds like religion
[01:52:54] <Juliu> keipi, indeed
[01:53:11] <Juliu> If math was real, how can there be imaginary numbers?
[01:53:27] <Raziel> if god was real, why does my pointer not get set to nullptr by my release callback?
[01:53:34] <Friithian> alright boys we got a troll here, move along
[01:54:02] <keipi> I'm hoping it's a troll
[01:54:04] <Juliu> Friithian, how am I a troll? You're the one trolling and saying things like "It's impossible" or "Cryptography exists"
[01:54:16] <Friithian> !grab Juliu
[01:54:16] <nolyc> Friithian: The operation succeeded.
[01:54:22] <Friithian> yoink
[01:54:29] *** Joins: proller (~p@80.240.216.69)
[01:54:35] <johnny> that's actually amazing
[01:54:43] <Juliu> Friithian, if you have a cryptography class, ask your cryptography professor if cryptography exists. Really, do it. I would like to hear the answer, and how you might be shocked
[01:55:23] <keipi> I'm going to regret this, but what about cryptography would be fake?
[01:55:36] <Juliu> keipi, everything!?
[01:55:42] <johnny> rememeber that caesar cipher. it's not real
[01:55:43] <Juliu> The whole idea
[01:56:00] <johnny> enigma machine.. nope
[01:56:02] <ville> ok folks head over to -social
[01:56:03] <johnny> anyways..
[01:56:10] <Juliu> johnny, did the enigma work? No
[01:56:38] <johnny> Juliu, you're gonna have to discuss this in #c++-social if you don't wanna get banne
[01:56:49] <Juliu> johnny, I don't mind
[01:56:50] <Alipha> "Cryptography is the study of secure communications techniques that allow only the sender and intended recipient of a message to view its contents. The term is derived from the Greek word kryptos, which means hidden."
[01:57:12] <Juliu> Alipha, yes, and secure communication techniques might not exist
[01:57:39] <Alipha> They're currently secure
[01:58:07] <Juliu> Alipha, just because we don't know if they are secure or not, does not mean they are secure
[01:58:16] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[01:58:18] <Friithian> thatâ¦ what
[01:58:39] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[01:58:44] <Friithian> what's that image macro of the guy holding his head and going ``what?''
[01:58:55] <cq-work> Of jackie chan?
[01:59:02] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[01:59:06] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[01:59:07] <Friithian> yeah that one
[01:59:17] <kalven> why did you all bite :(
[01:59:31] <Friithian> kalven: nerd sniping, but shitty
[01:59:33] <cq-work> Because bored smh
[01:59:38] <cq-work> I'm ashamed
[01:59:49] <Alipha> Apparently all science is fake because any of it could possibly be disproven at any time
[02:00:26] <Friithian> even though the fun of science is that we go off of the best we know of and try to strive and make new discoveries
[02:00:27] <PJBoy> yeah, that's the conspiracy theory mentality
[02:00:43] <Juliu> Imagine what a sad reality it would be if cryptography truely existed. That would mean that you could make information practically unaccessible
[02:00:46] <PJBoy> but conspiracy theories have a solid foundation of being right sometimes
[02:01:12] <Juliu> Alipha, some things in science have proofs. Cryptography does not. It's pseodo-science
[02:01:20] <Friithian> alright, access this info: a7f8e30323e3464eccbcdb2480650ac078500c36cd6a3983575f61412e775375
[02:01:46] <Friithian> (shitty example btw, it is just a sha256sum)
[02:02:01] <Juliu> Friithian, there is a difference between me being able to, and it being impossible in general
[02:02:22] <Friithian> ok, find anyone who can figure out what that means
[02:02:31] <Raziel> now for a real C++ question
[02:02:35] <Friithian> oh please
[02:02:37] <Raziel> https://wandbox.org/permlink/dPjzB10GCCxgXB8X
[02:02:40] <Friithian> thank god!
[02:02:52] <Raziel> how do I make that function set my s to nullptr
[02:02:54] <Raziel> |:
[02:03:04] <PJBoy> Friithian, that's the encryption of a7f8e30323e3464eccbcdb2480650ac078500c36cd6a3983575f61412e775375
[02:03:08] <Friithian> wandbox is giving me an apllication error
[02:03:10] <PJBoy> using a very specific key
[02:03:13] <Raziel> ah cock
[02:03:23] <Friithian> Raziel: how it going james may :P
[02:03:25] <Raziel> Friithian, what's a good alternative? :p
[02:03:36] <Friithian> idk I think it is my end
[02:04:14] <Raziel> https://godbolt.org/z/9YhfeM1eh
[02:04:18] <Raziel> here's a godbolt instead :p
[02:04:40] <Friithian> in a fresh browser profile it works fine
[02:04:41] <Friithian> odd
[02:05:24] <Raziel> caching issues?
[02:05:35] <Raziel> or an addon fucking with it?
[02:05:43] <Friithian> most likely a privacy focused thing breaking it
[02:05:54] <Raziel> I guess, I have quite a few of those running and it's still fine though
[02:06:20] <Alipha> Raziel: what `s`? I don't see an s, unless I'm blind
[02:06:28] <Friithian> Alipha: first line of main
[02:06:30] <Raziel> Alipha, s is the std::string* in main
[02:07:16] <Alipha> Oh, I must have clicked on the wrong link
[02:07:40] <Alipha> Raziel: std::string*& str
[02:07:54] <Juliu> Friithian, why do you believe that cryptography exists?
[02:08:20] <Raziel> Alipha, fuck me, that's what I get for using refs all the time but not when I should apparently :p
[02:08:23] <Raziel> thanks
[02:08:55] <Raziel> uh oh. the callback handler in here only accepts void*
[02:08:59] <Raziel> so I guess I have to cast a bit...
[02:09:01] <Friithian> oh no
[02:09:34] *** Quits: robod34 (Username@79.113.200.158) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[02:10:43] <Raziel> ...is that even possible through void?
[02:11:04] <kalven> Juliu: try to find a more suitable channel
[02:11:19] <cq-work> Anything is possible through void. Embrace the void.
[02:11:33] <cq-work> You stare at the void and it stares back.
[02:11:37] *** Joins: proller (~p@80.240.216.69)
[02:11:50] <Friithian> grab the void and consume it
[02:12:06] <cbreak> cq-work: if you stare at the void, it will point back at you and make fun of your nasal daemons
[02:12:29] <Juliu> kalven, I did, but they banned my in
[02:12:42] <Friithian> *I wonder why*
[02:12:46] <Juliu> in #algorithms for saying the pandemic is fake
[02:12:50] <johnny> oh bo
[02:13:39] <johnny> i made my program too big
[02:13:59] <cbreak> Juliu: well, obviously they did, why would they tolerate moronic liars?
[02:14:00] <johnny> 396K
[02:14:08] <Friithian> 396 thousand lines?
[02:14:17] <Friithian> of kbytes?
[02:14:17] <johnny> oh sorry.. we just did this.. 396kb
[02:14:29] <Juliu> cbreak, I dont know why people tolerate liars that say there was a pandemic in the last 50 years. Probably because theyre dumb
[02:14:44] *** ChanServ sets mode: +o cbreak
[02:14:45] <Friithian> this is what the +q flag is for
[02:15:00] <Juliu> Hey, he asked!
[02:15:17] <johnny> cbreak use the red button
[02:15:26] <Friithian> cbreak: *hit the button*
[02:15:42] *** Juliu was kicked by cbreak (User terminated!)
[02:15:53] *** cbreak sets mode: -o cbreak
[02:16:25] <johnny> i have the flash for it, so that's no problem, but dfuing it takes longer and sometimes fails
[02:16:39] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:16:39] <johnny> i was too clever
[02:16:54] <johnny> i was playing with ranges v3
[02:17:03] <cbreak> templates ftw :)
[02:17:25] <johnny> i have avoided templates in the code
[02:17:33] <johnny> i mena in my own code :)
[02:17:49] <cbreak> I like them, but you have to be very aware of how they'll get instantiated
[02:17:56] <cbreak> especially if they are big, or instantiate templates
[02:18:09] <johnny> sorry, i mean i have avoided templates in my own code for this embedded projet
[02:18:30] <johnny> so it looks more like java than modern C++ i guess
[02:18:32] <cbreak> I made a very nice template once that transformed some runtime variant thing into compile time types. Compiling it took half an hour and generated 100 MB of binary or so
[02:18:44] <Friithian> johnny: got a lot of System.Out.println or whatever the fuck it is
[02:19:06] <johnny> i sure would like to use fmtlib tho..
[02:19:08] <johnny> ugh
[02:19:27] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[02:19:46] <Raziel> Friithian, https://wandbox.org/permlink/LmMrx649vkKuNfd2 yay, I done it.
[02:19:48] <Raziel> I think.
[02:20:09] <johnny> i used fmlib in favor of the built in streams to write a whole file, just to see how well it'd work
[02:20:17] <Raziel> but damn, that is not pleasant
[02:21:31] <johnny> man.. between my 3 embedded dev boards running the same chip internally..  i have mini usb, micro usb, and usb c
[02:22:02] <johnny> and then of course usb b for the arduino..
[02:23:55] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[02:25:30] *** Quits: ville (~ville@user/ville) (Quit: ville)
[02:25:51] <Raziel> the only reason this has to be dumb is because it's meant to free image data from RAM at some indeterminate point of time in the future after it's done being async copied to the GPU VRAM instead
[02:26:10] <Raziel> it was definitely not my choice to use void*, don't hurt me :p
[02:34:01] *** Joins: ville (~ville@user/ville)
[02:37:59] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[02:39:00] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Ping timeout: 240 seconds)
[02:44:09] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 252 seconds)
[02:44:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:23] *** ChanServ sets mode: +v npaperbot
[02:46:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:51:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:57:54] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[03:08:06] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[03:10:33] *** Joins: proller (~p@2a02:6b8:b081:b486::1:1b)
[03:27:36] *** Quits: jsbach_ (~jsbach@2a01:c22:a861:c200:b455:8fb0:343e:163a) (Ping timeout: 252 seconds)
[03:28:47] *** Quits: Spirit532 (~Spirit532@user/Spirit532) (Killed (NickServ (GHOST command used by Spirit5323)))
[03:28:48] *** Joins: Spirit532 (~Spirit532@user/Spirit532)
[03:31:39] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:31:50] *** Joins: badone (~badone@209.132.189.136)
[03:33:25] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[03:45:35] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628) (Ping timeout: 268 seconds)
[03:47:24] *** Joins: seninha (~seninha@user/seninha)
[03:52:10] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:52:57] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[03:57:52] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[04:00:53] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[04:04:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:06:33] *** Quits: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de) (Ping timeout: 268 seconds)
[04:06:33] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[04:13:16] <great_taste> can I expand two parameter packs at the same in one fold expression? e.g. template<typename... Ts, size_t... Is> void foo() { (bar<Ts>(Is), ...); }
[04:13:41] <great_taste> I have done it and it worked but I don't know if that's supposed to work :P
[04:15:05] <Alipha> great_taste: yes
[04:15:17] <Alipha> great_taste: as long as they're the same size
[04:16:09] <great_taste> do I get an error if they're of different sizes?
[04:21:25] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:22:32] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:26:18] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:26:34] <Alipha> Yes
[04:27:12] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[04:27:43] <great_taste> "error: mismatched argument pack lengths while expanding..." :)
[04:28:21] *** Joins: Praise (~Fat@user/praise)
[04:32:35] *** Quits: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa) (Read error: Connection reset by peer)
[04:32:55] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[04:34:40] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:40:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[04:44:07] *** Quits: str0 (~str0@178.220.28.32) (Quit: Leaving)
[04:45:17] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 240 seconds)
[04:45:25] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[05:05:34] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:18b3:ab56:6ddb:c942) (Quit: Textual IRC Client: www.textualapp.com)
[05:12:09] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:13:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:13:51] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:15:07] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:18:43] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:19:13] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:19:47] <johnny> it's less filling
[05:22:00] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[05:22:25] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[05:33:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[05:36:05] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[05:36:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:37:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:42:14] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:42:21] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 252 seconds)
[05:46:44] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[05:47:01] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[05:48:25] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:49:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:50:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:52:57] <johnny> i'm so not used to plain C :(
[05:53:10] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[05:53:20] <johnny> i borrowed some ideas from this https://github.com/cheehieu/nrf52-sk6812-led-driver/blob/master/nRF5_SDK_15.0.0_a53641a/examples/peripheral/sk6812_i2s/main.c#L171 for my implementation in C++
[05:53:37] *** Quits: kurfen (~kurfen@176.119.195.8) (Ping timeout: 240 seconds)
[05:53:47] <johnny> like i understand why it does it, but feels weird
[05:54:18] <johnny> oh, i didn't mean that function in particular, but in general
[05:54:32] <johnny> it's really nice having a vector and other parts
[06:03:22] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[06:08:11] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 256 seconds)
[06:08:37] *** Joins: obiwahn (~heini@user/obiwahn)
[06:17:53] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[06:17:56] *** Joins: ferdna (~ferdna@user/ferdna)
[06:18:17] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[06:34:12] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[06:35:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:36:43] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[06:41:36] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:41:56] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[06:44:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:26] *** ChanServ sets mode: +v npaperbot
[06:51:30] *** Joins: HvszrStykp (~X@81.171.62.87)
[06:56:18] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:12:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:16:28] *** Joins: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[07:16:34] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:16:52] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:18:42] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:18:47] *** Quits: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:23:19] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[07:23:23] *** Stryykert is now known as Stryyker
[07:24:20] *** Joins: k8yun (~k8yun@user/k8yun)
[07:36:15] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:36:21] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 250 seconds)
[07:43:55] *** Joins: pulse (~pulse@user/pulse)
[07:43:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:48:36] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[07:59:03] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[08:00:41] *** Joins: malloy (~jimery@116.30.221.173)
[08:04:50] *** Joins: adeliktas3 (~adeliktas@i59F5FF29.versanet.de)
[08:06:41] *** Quits: adeliktas (~adeliktas@i59F5FD1E.versanet.de) (Ping timeout: 250 seconds)
[08:06:41] *** adeliktas3 is now known as adeliktas
[08:10:48] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[08:11:22] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[08:18:59] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[08:20:23] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:29:00] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 252 seconds)
[09:03:39] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:08:06] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:13:52] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[09:14:01] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[09:19:58] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äis.)
[09:26:20] <ac_slater> hey guys, really stupid question: I'm about write a bunch of structs with nothing but get/set functions - like a "dataclass". Anyone suggest I do something different or use some macro maagic?
[09:28:25] <kalven> what do you need the getters and setters for?
[09:29:44] <ac_slater> oh right, I could make it all public
[09:30:53] <ac_slater> anyway, thanks guys
[09:30:58] <ac_slater> I'll paste something
[09:31:48] <ac_slater> I put some members variables in a protected base then do `public: using base::member_var;` to forward it to public on my derived. Someone suggested I just stop being lazy and do some getters/setters. But this applies to like ~30 classes
[09:32:29] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:33:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[09:49:29] <ac_slater> ok I have a real question now
[09:50:41] <ac_slater> span::data() is marked as const. But `std::as_writable_bytes` does `{reinterpret_cast<std::byte*>(s.data()), s.size_bytes()}`. It's legal/safe to cast the result of data() to non-const?
[09:51:10] <ac_slater> oh shit. Marked as const but doesn't return const
[09:51:12] <ac_slater> got it
[09:51:21] <ac_slater> (brain is slow today... logging off, thanks all)
[09:51:37] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:58:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:11:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:16:07] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[10:35:12] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[10:44:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:37] *** ChanServ sets mode: +v npaperbot
[10:45:23] *** Joins: seninha (~seninha@user/seninha)
[10:47:48] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Ping timeout: 240 seconds)
[11:03:11] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[11:03:34] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882)
[11:09:04] *** Joins: Gvidon (~Gvidon@user/gvidon)
[11:13:31] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[11:15:04] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[11:21:33] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[11:23:22] *** Joins: malloy (~jimery@116.30.221.173)
[11:23:46] <johnny> ac_slater, how is it lazy to have not have getters and setters? do they handle invariants or something?
[11:24:35] <johnny> in my normal non C++ coding, i tend to make objects immutable where possible, thus you set all the variables you can in the constructor and try to avoid setters especially entirely
[11:24:42] <ac_slater> I prefix most member variables with `m_`. So when someone sees access to `m_` that's not on `this`, they think it's a "smell". Like, make it clear your accessing another objects member
[11:24:57] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628)
[11:24:57] <ac_slater> right
[11:25:30] <ac_slater> that's a good plan, but in my case, I pass around a mutable object sometimes - usually something to "fill". The relationships are very small so it's clear
[11:26:18] <johnny> if you're not doing any validation , then it's not really a smell
[11:26:55] <johnny> the getters and setters are just useless code
[11:28:13] <ac_slater> yea I agree
[11:28:23] <ac_slater> thanks for the opinion
[11:29:10] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[11:30:17] <TinoDidriksen> Doing other->m_thingy is definitely a code smell, imo. If it's a public member it shouldn't have m_
[11:30:35] * antto sniffs
[11:30:41] <antto> what's going on here?
[11:31:12] <kalven> some kind of chat
[11:31:32] <antto> nah, it smelled like stinky code
[11:31:38] <TinoDidriksen> A Frank Exchange of Views
[11:33:47] *** Quits: emerent (~quassel@p200300cd5743c3f3ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:34:01] *** Joins: emerent (~quassel@p200300cd5743c377ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:34:52] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 268 seconds)
[11:36:13] <ac_slater> TinoDidriksen: I agree. Do you generally not prefix public member variables?
[11:36:37] *** Joins: predawn (~predawn@223.233.73.96)
[11:37:36] <TinoDidriksen> I generally don't prefix variables at all, but I am directly opposed to prefixing public ones.
[11:38:20] <antto> yeah that'd be ugly
[11:38:45] *** Parts: predawn (~predawn@223.233.73.96) ()
[11:39:05] <ac_slater> thanks guys
[11:39:48] <TinoDidriksen> Also, you mentioned "not on this" which insinuates that you're using this-> in code, which is also ugly.
[11:40:09] <Gvidon> Personally, I try not to mix public and private variables. They're either all public in case of a simple "struct", or they're all private in case of a more complicated "class". Yes, I know that there's no real difference between structs and classes in C++
[11:40:44] <Gvidon> And "struct" members are not prefixed
[11:40:49] <antto> i still use struct when i want mainly public access
[11:42:22] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[11:43:04] <ac_slater> TinoDidriksen: no, I do not use `this->`, thankfully ;) I just meant within a member function of the owner of `m_whatever`
[11:45:56] *** Joins: jsbach (~jsbach@2a01:c23:61a1:e900:82f3:2db5:ad58:cd06)
[11:51:42] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:51:51] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:03:17] *** Joins: Kill-Animals (~anon@199.119.234.219)
[12:06:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:94ac:9102:da39:4ffe)
[12:07:20] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[12:09:18] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[12:10:57] *** Joins: andreasbuhr (~quassel@p549db93e.dip0.t-ipconnect.de)
[12:16:19] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[12:23:03] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:23:24] *** Joins: BluesBoy (~bboy@user/bluesboy)
[12:24:15] *** Joins: ville (~ville@user/ville)
[12:27:30] *** Quits: Gvidon (~Gvidon@user/gvidon) (Remote host closed the connection)
[12:29:24] *** Joins: Gvidon (~Gvidon@user/gvidon)
[12:35:57] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[12:38:05] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:44:29] *** Joins: mint (~mint@46.159.204.49)
[12:49:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[12:56:40] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[13:02:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[13:02:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:04:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:94ac:9102:da39:4ffe) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[13:06:12] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f91d:204d:f24c:a043)
[13:06:42] *** Joins: pulse (~pulse@user/pulse)
[13:08:12] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[13:13:34] *** Joins: robod34 (Username@79.113.200.158)
[13:16:06] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f91d:204d:f24c:a043) (Quit: My MacBook has gone to sleep. ZZZzzzâ¦)
[13:19:29] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[13:20:49] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[13:26:00] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[13:26:28] <lpapp> hi, where is an explicit template instantiation supposed to be dllexport/import'd? In the declaration, definition, or both?
[13:26:44] <lpapp> so that this instantiation in the library is available for apps or other libraries depending on this library.
[13:31:27] *** Joins: paul424 (~tom@ip-5-172-234-126.multi.internet.cyfrowypolsat.pl)
[13:32:36] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:34:58] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Quit: Leaving)
[13:37:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[13:39:56] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 245 seconds)
[13:40:05] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[13:41:21] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:47:02] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[13:49:09] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[13:50:24] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[13:53:05] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[13:57:49] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[14:07:40] <ville> write a small testcase and find out?
[14:08:18] <Haohmaru> sounds like an adventure
[14:10:50] *** Joins: pulse (~pulse@user/pulse)
[14:22:35] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[14:30:29] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6882) (Quit: Leaving)
[14:34:11] *** Quits: proller (~p@2a02:6b8:b081:b486::1:1b) (Ping timeout: 256 seconds)
[14:36:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:36:44] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:41:13] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[14:41:53] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 252 seconds)
[14:44:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:27] *** ChanServ sets mode: +v npaperbot
[14:45:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[14:47:08] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[14:47:49] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[14:50:48] *** Joins: mgaunard (~mgaunard@ec2-52-210-158-23.eu-west-1.compute.amazonaws.com)
[14:51:22] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[14:53:36] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Quit: Client closed)
[14:54:30] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[14:54:38] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[14:55:03] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[15:04:03] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[15:10:18] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Quit: Client closed)
[15:17:06] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:19:47] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[15:23:18] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:25:27] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Read error: Connection reset by peer)
[15:25:50] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[15:26:02] *** Quits: ravan_ (~ravan@user/ravan) (Remote host closed the connection)
[15:26:21] *** Joins: ravan_ (~ravan@user/ravan)
[15:26:36] *** Quits: adeliktas (~adeliktas@i59F5FF29.versanet.de) (Quit: Ping timeout (120 seconds))
[15:26:45] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[15:26:49] *** Joins: adeliktas (~adeliktas@i59F5FF29.versanet.de)
[15:28:13] *** Joins: g0se (~goose@111.199.80.15)
[15:29:45] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:35:16] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[15:39:46] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:50:16] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[15:52:07] *** Joins: mint (~mint@46.159.204.49)
[15:54:19] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[16:02:58] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:04:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:05:13] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[16:05:17] *** Quits: meicceli (meicceli@kapsi.fi) (Ping timeout: 250 seconds)
[16:05:49] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:09:19] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:17:54] *** Joins: proller (~p@2a02:6b8:b081:8009::1:13)
[16:17:56] *** Joins: markong (~kvirc@213.146.188.203)
[16:21:19] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:25:13] *** Joins: meicceli (meicceli@kapsi.fi)
[16:30:01] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[16:30:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:35:06] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[16:35:51] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[16:36:17] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[16:40:10] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[16:40:38] *** Quits: paul424 (~tom@ip-5-172-234-126.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[16:41:24] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[16:47:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:49:12] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:59:07] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[16:59:57] * Haohmaru tickles nolyc
[17:00:00] <Haohmaru> !fact
[17:00:01] <nolyc> Haohmaru: An entity is captured if it is captured explicitly or implicitly.
[17:02:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:02:47] <PJBoy> so implicit and explicit are a true dichotomy
[17:02:51] <PJBoy> who knew
[17:03:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[17:05:38] <Haohmaru> is it entity season? i thought it's duck season
[17:07:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:08:36] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[17:11:42] <InPhase> PJBoy: Implicit, explicit, unplicit.
[17:12:12] *** Quits: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[17:12:39] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[17:14:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:21:15] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:22:23] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:27:15] *** Quits: Kill-Animals (~anon@199.119.234.219) (Ping timeout: 256 seconds)
[17:27:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:29:38] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:33:11] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:34:31] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:41:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[17:42:56] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:47:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[17:47:13] <ashafq> Haohmaru: duck is an entity
[17:47:28] <rpav> blah apply needs to work more like CL's apply
[17:47:32] *** Joins: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a)
[17:47:41] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[17:47:46] <ashafq> class Duck : public Entity {}
[17:47:48] <rpav> std::apply(fun, arg0, arg1, ..., tuple_of_rest);
[17:48:02] <rpav> and/or tuple slices
[17:48:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:49:59] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[17:53:19] <ville> no, it really doesn't
[17:55:11] *** Joins: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[17:55:47] *** Quits: CodePoint_ (~CodePoint@2607:fb90:25df:e3d4:20e4:9377:5749:e49a) (Ping timeout: 250 seconds)
[17:59:23] <Haohmaru> ;P~
[18:00:08] <rpav> ashafq: entities aren't inherited like that typically
[18:01:04] <rpav> hrm i wonder if i could implement apply with additional parameters as such
[18:01:24] *** gentooclimax is now known as climax
[18:02:10] <Haohmaru> what's "apply" even
[18:02:17] <Haohmaru> oh, std::apply
[18:02:33] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[18:02:52] <lpapp> hi, is there some sort of static analyzer to tell you which libraries you do not need to link against, i.e. you are not using any symbol from it?
[18:02:53] <Haohmaru> is there also std::undo?
[18:03:04] <rpav> yeah imagine you need to call a function that's like `void foo(Fixed a0, Fixed2 a1, Ts...);`
[18:03:50] <rpav> lpapp: the linker should already drop any unused deps
[18:03:59] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[18:04:20] *** climax is now known as gentooclimax
[18:04:34] <rpav> does it not for shared libraries? i suppose you might want to dynamically load symbols manually so maybe not
[18:04:57] *** Quits: CodePoint__ (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[18:05:02] <lpapp> rpav: it does not seem to drop that from my shared libraries, no.
[18:05:16] <lpapp> would be helpful to have a tool to give me a potential list that I can drop.
[18:05:27] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:05:34] <rpav> -Wl,--as-needed
[18:05:57] <rpav> at least a quick googling seems to indicate; i haven't tried it .. i can see it not being the default though
[18:08:02] <PJBoy> you can tuple_cat those args
[18:10:45] <PJBoy> { tuple some_args{1, 2, 3}; apply(print, tuple_cat(tuple(0), some_args)); } auto print = [](auto... args) { (void(cout << args), ...); };
[18:10:46] <geordi> 0123
[18:11:44] <rpav> PJBoy: yeah but surely that copies the tuple
[18:11:51] <rpav> actually
[18:12:05] <rpav> if it's directly to apply, very possibly optimized out
[18:12:05] <PJBoy> or move, yeah
[18:12:25] <rpav> since apply -> invoke(expand...)
[18:14:52] <lpapp> rpav: thanks, sounds great!
[18:14:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:15:53] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[18:15:59] <rpav> lpapp: well, better if it works, lemme know ;)
[18:16:19] <rpav> can you not modify values in a tuple
[18:16:40] <lpapp> not in python at least :P
[18:16:49] <lpapp> difference between list and tuple is that basically.
[18:17:00] <Haohmaru> who even uses snek
[18:17:01] <rpav> this is not python
[18:17:33] <lpapp> In C++, you can, I think
[18:18:02] <rpav> yeah you definitely can by the looks i'm just doing something wrong
[18:18:19] <rpav> and it's not even tuesday
[18:18:28] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[18:18:43] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:19:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:25:13] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:28:04] *** Joins: oartemeva (~oartemeva@h86-62-71-213.ln.rinet.ru)
[18:34:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:35:30] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[18:36:24] <Haohmaru> it's tuesday...+1
[18:37:36] <Alipha> It's taco tuesday somewhere
[18:39:32] <rpav> ^
[18:39:52] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:39:57] <rpav> hrm, is there a fancy idiom name for associating types by an external class specialization
[18:40:10] <rpav> like CRTP but externally-defined
[18:40:20] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[18:40:20] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[18:40:20] *** Joins: Alipha (~AliphaX@user/alipha)
[18:41:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:42:01] <PJBoy> an interface
[18:42:04] <rpav> what's nice about this is you can have some Foo<T> for like, Foo<int> that relies on some implementation or subclass FooImpl, but you don't have to specify Foo<T, FooImpl>
[18:42:05] <PJBoy> <_<
[18:42:11] <rpav> eh
[18:42:24] <PJBoy> pseudo metaclass
[18:42:30] <rpav> interface is really more in the java sense even in C++
[18:42:42] <rpav> it's not a metaclass, it's just a type mapping
[18:42:51] <PJBoy> ah nvm
[18:43:02] <rpav> it's almost exactly CRTP, without the recurring part
[18:43:17] <rpav> ERTP? ;)
[18:44:18] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:26] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:26] *** ChanServ sets mode: +v npaperbot
[18:46:48] <OnlineCop> !acronyms
[18:46:49] <nolyc> OnlineCop: Error: "acronyms" is not a valid command.
[18:47:00] <OnlineCop> !crtp
[18:47:01] <nolyc> crtp is the Curiously Recurring Template Pattern. A form of static polymorphism where a derived class inherits from a base class template with the derived class as the template parameter.
[18:49:24] <rpav> OnlineCop: a classically terrible C++ name for `<T> Base { ... }; Sub : Base<Sub> { ... };` i.e., you pass the subclass to the base class
[18:49:56] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[18:50:10] <OnlineCop> That might be useful to include in the description. :)
[18:50:11] <rpav> but in this, i'm doing so externally, `<> Map<int> { using type = Sub; };`
[18:50:29] *** Joins: k8yun (~k8yun@user/k8yun)
[18:50:36] <rpav> OnlineCop: yeah you'd think
[18:51:04] <rpav> SPP .. subclass-passing-pattern
[18:51:19] <rpav> we should come up with good names for all the bad names
[18:51:39] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:52:11] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[18:52:11] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[18:52:11] *** Joins: Alipha (~AliphaX@user/alipha)
[18:53:27] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:53:34] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[18:54:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[18:55:55] <Haohmaru> rpav throw them at me
[18:57:34] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:04:16] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[19:05:26] <rpav> template<typename T> class ThemAt {}; throw ThemAt<Haohmaru>();
[19:05:49] <Haohmaru> >:/
[19:09:07] <rpav> Haohmaru: well there was like, SBRM instead of RAII
[19:09:22] <rpav> SPP or similar would be better than CRTP
[19:09:37] <Haohmaru> i'm not a fan of SBRM as an abbreviation
[19:09:53] <rpav> Â¯\_(ã)_/Â¯
[19:09:54] <Haohmaru> RAII looks cooler
[19:10:01] <Haohmaru> RAII OR DIE
[19:10:09] <rpav> ITF (implementation type filtering) would be better than SFINAE
[19:10:42] <Haohmaru> SFINAE <- this is so cryptic i still don't know wtf it really means altho i read about it 4 or 5 times
[19:10:51] <Haohmaru> at different points in time
[19:11:00] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[19:11:03] <barometz> sfinae is a terrible name for a thing
[19:11:30] <Haohmaru> i always read it as "svinya_e" which in .bg means "it's a swine"
[19:11:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:12:33] <rpav> Haohmaru: but "implementation type filtering" should be easy enough .. you can filter foo() by `<T, typename Filter = ...> foo()`  .. if Filter doesn't exist, neitehr does foo()
[19:12:50] <Haohmaru> oh, here, SBRM <- the problem here IMO is that it still talks about "resources"
[19:13:01] <rpav> Haohmaru: "it's a swine" is not too far off the mark ð¤
[19:13:08] <Haohmaru> i use RAII a lot for.. not resources
[19:13:18] <rpav> Haohmaru: but anything is a resource
[19:13:32] <Haohmaru> in my head RAII is more like "object birth/death does $things"
[19:13:54] <rpav> right, which is what Scope Based Resource Management basically says plainly
[19:13:56] *** Quits: oartemeva (~oartemeva@h86-62-71-213.ln.rinet.ru) (Quit: WeeChat 2.8)
[19:13:59] <Haohmaru> whether those things are "managing resources" is a sepparate thing
[19:14:13] <rpav> well, what would _not_ be a resource
[19:14:14] <sonOfRa> They are things you use for their lifetimes, therefore resources!
[19:14:50] <Haohmaru> rpav i use a RAII object to generate pesky html things like:  "<blah>" ... then "</blah>"
[19:14:57] <Haohmaru> is that a resource?
[19:15:01] <sonOfRa> I'd say yes
[19:15:07] <Haohmaru> x_x
[19:15:38] <sonOfRa> it's a tag_generator<string> that, when it goes out of scope, closes itself
[19:15:39] <rpav> yes, becuase you're doing like `block blah("blah");` and blah is your block resource
[19:16:07] <rpav> it's not a great name either
[19:16:08] <Haohmaru> how about the RAII object that only temporarily overrides some value/state of something and then restores it afterwards?
[19:16:13] <rpav> what would be better than resource
[19:16:47] <rpav> note it has to encompass both actual resourcey things like allocations and file handles and other dubiously-resourcey things like temporary block scopes
[19:17:09] <Haohmaru> Object Lifetime Is a Function - OLIF
[19:17:12] <Haohmaru> is that better?
[19:17:13] <rpav> SBAM .. scope based action management
[19:17:29] <Haohmaru> okay, SBAM is better than SBRM
[19:18:26] <rpav> IFNDR .. SNAFU, FUBAR
[19:18:29] <Haohmaru> okay, i think i can invent an even better one
[19:19:39] <Haohmaru> something with Automatic Action
[19:19:50] <rpav> the problem with OLIF is it's _two_ functions, but you might have something like, Object Lifetime Is Around
[19:20:04] <Haohmaru> because { int x = 5; cout << x; } <-- x is an automatic variable, right?
[19:20:12] <rpav> but that's pretty terrible out of context and C++ doesn't really have :around things
[19:20:30] <rpav> well, `auto x = 5;` is ;D
[19:20:49] <Haohmaru> what was it called, automatic linkage?
[19:20:50] <rpav> is "automatic variable" even a thing anymore
[19:21:06] <rpav> it was automatic in that it was discarded automatically
[19:21:09] <Haohmaru> it's not static, it's not global, it's not dynamic
[19:21:15] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:21:31] <Haohmaru> where are the language lawyers
[19:21:47] <rpav> scope initialization and cleanup
[19:22:06] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[19:22:30] *** Joins: k8yun (~k8yun@user/k8yun)
[19:22:46] <Haohmaru> Object Lifetime Does Actual Things - OLDAT better?
[19:23:43] *** Joins: horribleprogram (~user@user/horribleprogram)
[19:23:47] <horribleprogram> sup
[19:23:49] <PJBoy> local variables have no linkage
[19:24:09] <horribleprogram> lol
[19:24:17] <horribleprogram> that makes no sense first of all
[19:24:45] <Haohmaru> okay, i'm 98% sure there was something "automatic" in local variables
[19:24:46] <horribleprogram> u mean "objects with automatic storage duration" have no external linkage
[19:24:57] <horribleprogram> no such thing as a variable
[19:24:58] <Haohmaru> ah, automatic storage duration <- this
[19:25:35] <horribleprogram> the term "variable" is the lead cause of people's lack of understanding of certain concepts in C++
[19:25:50] <rpav> blah std ought to have some kind of nice expander
[19:25:56] <Haohmaru> ignore my "variable"
[19:26:16] <PJBoy> objects with automatic storage duration have no linkage
[19:26:29] <Haohmaru> ignore the "linkage"
[19:27:02] <Haohmaru> okay, i guess "automatic" is already in use too much
[19:27:40] <horribleprogram> just out of curiosity
[19:27:50] <horribleprogram> PJBoy: where is variable in the C++ grammar production?
[19:27:52] <Haohmaru> Declare And Forget Actions Management - DAFAM
[19:27:59] <horribleprogram> where is the production for "variable" in the C++ grammar
[19:28:08] <PJBoy> what do you mean by grammar production?
[19:28:24] <horribleprogram> sure
[19:28:27] <horribleprogram> identifier:
[19:29:01] <horribleprogram> idk probably something like firstcharacter restcharacters...
[19:29:15] <horribleprogram> firstcharacter is a production, a subset of restcharacters (no digits)
[19:29:31] <mgaunard> hi, I just recently joined a team which is using Conan to manage their build system. Is it normal that it's terrible at making sure the stuff it imports is all ABI-compatible?
[19:30:07] <horribleprogram> u can't write code that is ABI-compatible
[19:30:36] <mgaunard> I certainly can enforce everything is ABI-compatible when everything is built from source within the same project
[19:30:39] <horribleprogram> u can write C++ code that targets 1 or more ABIs
[19:30:52] <horribleprogram> s/1/0
[19:31:01] <PJBoy> horribleprogram, http://eel.is/c++draft/dcl.pre#nt:simple-declaration I guess?
[19:31:11] *** Quits: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:31:38] <horribleprogram> but that's my point
[19:31:43] <rpav> can you apply an index sequence as like `{ f<Is,Ts>()... }` for some `<size_t I, typename T> f()`
[19:32:32] <horribleprogram> rpav: yeah u can but it has to be at compile-time
[19:32:45] <PJBoy> you can comma fold it
[19:32:59] <rpav> i want to expand it to an initializer list though ;/
[19:33:25] <PJBoy> that sounds possible
[19:33:47] <rpav> i always blank on how to use them but it must be like parameter pack storage
[19:34:18] <PJBoy> { f<0, 1, 2>(); } template<int... is> void f() { initializer_list<int> il{is...}; SHOW(il); }
[19:34:19] <geordi> il = {0, 1, 2}
[19:35:20] <PJBoy> { g<0, 1, 2>(); } template<int i> int f() { return i; } template<int... is> void g() { initializer_list<int> il{f<is>()...}; SHOW(il); }
[19:35:21] <geordi> il = {0, 1, 2}
[19:35:27] <rpav> oh RIGHT you match on Is... in the parameter pack
[19:35:41] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 250 seconds)
[19:35:44] <rpav> i was just blanking on how you extract Is from the actual integer_sequence
[19:36:04] <PJBoy> ah right yeah, the actual integer_sequence is a useless means to an end
[19:36:43] <rpav> well it encodes the Is
[19:37:14] <horribleprogram> ur targeting C++17?
[19:37:34] <horribleprogram> use the <utility> stuff
[19:37:44] <rpav> that _is_ the utility stuff isn't it
[19:37:54] <horribleprogram> yeah
[19:38:06] <horribleprogram> but u can explicitly use the standard library stuff
[19:38:08] <horribleprogram> std::make_*
[19:38:26] <rpav> that doesn't really help _applying_ them though
[19:40:06] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[19:40:19] <horribleprogram> whatever u do with an il, u can do without unpacking
[19:40:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:41:23] *** Joins: k8yun_ (~k8yun@user/k8yun)
[19:42:23] <rpav> "could not convert `{<expression-error>}' to ..." oops
[19:44:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d)
[19:44:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d) (Changing host)
[19:44:07] *** Joins: skapata (~Skapata@user/skapata)
[19:44:09] <horribleprogram> dude
[19:44:57] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[19:45:52] <LordKalma> fam
[19:45:53] <horribleprogram> template<typename... Foos, size_t... i> decltype(auto) foo(const std::tuple<Args...> t, std::index_sequence<i...>) { return std::make_tuple(std::get<i>(t)...); }
[19:46:25] <horribleprogram> https://en.cppreference.com/w/cpp/utility/integer_sequence
[19:46:53] <horribleprogram> wha gwan
[19:47:16] <horribleprogram> I'm from Toronto lol
[19:47:21] <horribleprogram> LordKalma: how uk about "fam"
[19:48:12] <horribleprogram> oh u probably want a reference-to-const-std::tuple<Args...> there
[19:48:46] <horribleprogram> (std::tuple<Args...> const& t, etc etc)
[19:48:53] *** Joins: JohnMS (~JohnMS@23.105.134.179)
[19:49:27] <PJBoy> avoid make_tuple
[19:49:27] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[19:49:34] <horribleprogram> yeah says u
[19:49:51] <PJBoy> also that decltype(auto) looks like it'll make a dangling reference
[19:49:54] <PJBoy> yeah definitely
[19:50:03] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[19:51:14] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[19:51:20] *** Quits: GreyXor (~GreyXor@82.66.31.64) (Client Quit)
[19:51:23] <horribleprogram> yeah the reference is needed
[19:51:39] <horribleprogram> yeah probably should avoid make_tuple
[19:53:39] <PJBoy> I would say `template<typename Tuple, size_t... is> auto f(Tuple&& t, index_sequence<is...>) { return tuple(get<I>(t)); }` for that kind of code
[19:53:58] <PJBoy> * `template<typename Tuple, size_t... is> auto f(Tuple&& t, index_sequence<is...>) { return tuple(get<I>(t)...); }`
[19:55:26] <horribleprogram> yeah this is the correct way to do it
[19:55:29] <PJBoy> anyways rpav isn't doing anything like that
[19:55:37] <horribleprogram> PJBoy: ur pretty good :O
[19:55:51] <PJBoy> I know it
[19:56:02] <horribleprogram> one day I'll pass u
[19:56:45] <horribleprogram> but not in a malicious way, but in a way that is like "smiles" I will pass the torth
[19:56:48] <horribleprogram> torch*
[19:57:53] <horribleprogram> restarting
[19:58:01] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[19:58:12] *** Quits: Tokamak_ (~Tokamak@107.116.82.163) (Ping timeout: 240 seconds)
[19:59:57] *** Joins: Tokamak (~Tokamak@107.116.82.163)
[20:06:23] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[20:07:31] *** JohnMS is now known as JohnMS_AWAY
[20:09:43] <rpav> PJBoy: that's basically what i'm doing
[20:09:45] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[20:10:40] <rpav> but instead of return tuple, i return a `std::vector<Type> f(...) { return { Type(arg[Is], GetThing<Ts>())... }; }`
[20:11:36] <rpav> i don't deal with integer sequences a lot but really it's no different than Ts, and i shouldn't think of it much differenetly
[20:12:01] <rpav> like, you can deal with Ts... as a parameter in a similar way, and you need basically literally `template<typename...Ts> struct parameter_pack {};`
[20:12:22] <rpav> though i think i have a few utility things there
[20:12:57] *** JohnMS_AWAY is now known as JohnMS
[20:14:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:16:54] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:22:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[20:23:39] *** Joins: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc)
[20:23:39] *** Quits: skapate (~Skapata@2804:14c:87b0:9d2e:256f:7d5e:6ba9:76fc) (Changing host)
[20:23:39] *** Joins: skapate (~Skapata@user/skapata)
[20:26:19] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[20:27:17] *** Quits: Tokamak (~Tokamak@107.116.82.163) (Ping timeout: 240 seconds)
[20:30:25] *** Joins: Tokamak (~Tokamak@172.58.191.33)
[20:31:25] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[20:33:24] *** Joins: JohnMS_WORK (~JohnMS@2a02:a311:a33a:a100:4ecc:6aff:fed0:fdf)
[20:33:37] *** Quits: JohnMS (~JohnMS@23.105.134.179) (Ping timeout: 240 seconds)
[20:34:51] *** JohnMS_WORK is now known as JohnMS
[20:36:57] *** Quits: Inline__ (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Quit: Leaving)
[20:41:14] *** Quits: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377) (Ping timeout: 268 seconds)
[20:43:08] *** Joins: LuckyFire (~LuckyFire@79.125.172.127)
[20:44:19] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:44:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[20:53:34] *** Joins: nq (~nq@82.79.141.40)
[20:54:56] *** Joins: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de)
[20:55:45] *** Quits: JohnMS (~JohnMS@2a02:a311:a33a:a100:4ecc:6aff:fed0:fdf) (Quit: Konversation terminated!)
[21:05:15] *** Joins: LuckyFire_ (~LuckyFire@79.125.172.127)
[21:08:19] *** Quits: LuckyFire (~LuckyFire@79.125.172.127) (Ping timeout: 260 seconds)
[21:09:51] *** flooded is now known as _flood
[21:12:54] *** Joins: str0 (~str0@178.220.28.32)
[21:15:15] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[21:17:25] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:18:59] *** Joins: paul424 (~tom@ip-5-172-233-166.multi.internet.cyfrowypolsat.pl)
[21:23:24] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Ping timeout: 240 seconds)
[21:29:51] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[21:32:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:33:11] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[21:37:30] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[21:41:39] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:48:50] *** Joins: rty (~rty@gateway/vpn/pia/rty)
[21:51:18] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[21:51:37] *** Quits: rty (~rty@gateway/vpn/pia/rty) (Client Quit)
[21:52:32] *** Quits: HvszrStykp (~X@81.171.62.87) (Ping timeout: 252 seconds)
[21:55:19] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:59:44] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[22:01:30] *** Joins: mint (~mint@46.159.204.49)
[22:16:32] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:17:12] *** Joins: ivii (~ivan@user/ivii)
[22:21:37] *** Quits: proller (~p@2a02:6b8:b081:8009::1:13) (Ping timeout: 240 seconds)
[22:23:24] <rpav> hrm you can't easily create a string mapping with types can you
[22:23:41] <rpav> pre-20 of course
[22:24:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:26:32] *** Quits: rwb (~augh@alogs.space) (Quit: ZNC - https://znc.in)
[22:26:44] *** Joins: rwb (~augh@alogs.space)
[22:26:45] <Raziel> rpav, what, does it become easier in 20?
[22:27:19] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[22:27:26] <PJBoy> everything's easier in 20
[22:27:28] <PJBoy> even hello world
[22:27:39] <Raziel> lol
[22:28:47] <rpav> Raziel: it becomes possible hypothetically with c++20 string template arguments
[22:29:11] <rpav> or at least non-stupid, because i think you can have e.g. `<char...>` pre-20
[22:29:20] <rpav> but string isn't constexpr, so you have to deal with that
[22:29:28] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[22:29:28] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[22:29:28] *** Joins: Alipha (~AliphaX@user/alipha)
[22:29:54] <Raziel> rpav, string not being constexpr is really rustling my jimmies in the context of my large amounts of data-in-code
[22:29:56] <rpav> maybe i can do it the char... way without ever having to manually type things
[22:30:01] <PJBoy> you can put those char... into a char array and make a string_view over it
[22:30:11] *** Joins: segnior (segnior@user/segnior)
[22:30:19] <rpav> PJBoy: yeah even to/from perhaps ð¤
[22:30:42] <PJBoy> but still very limited
[22:31:35] <rpav> it's pretty unlimited actually if one can define `<> type_named<'i','n','t'> { using type = int; };`
[22:31:46] <rpav> and then _use_ it without ever having to type that
[22:32:59] <rpav> pretty sure i see a path to doing this but i'll have to try wehn i fix this other thing
[22:34:13] <rpav> actually .. defining it might be a problem, i'm not sure how you can specialize `type_named` non-stupidly, as i don't think you can do like `template<> struct type_named<chars("foo")...>` or anything
[22:34:59] <rpav> and then you'd like want to macro that or something ;/
[22:35:21] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542) (Remote host closed the connection)
[22:35:31] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10:fbf2:b01f:1d47:7542)
[22:36:13] *** Joins: artok (~azo@mobile-access-b04817-209.dhcp.inet.fi)
[22:39:37] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[22:39:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:40:12] <rpav> whoa what you can using user literals!?
[22:41:02] <PJBoy> you could totally use a UDL to transform the "foo" string literal into something else
[22:41:19] <PJBoy> but that something else still wouldn't be a valid non-type template parameter until C++20, right?
[22:41:31] <rpav> not sure
[22:41:35] <PJBoy> maybe as an rvalue reference though
[22:41:45] <PJBoy> you can have references to anything
[22:41:49] <rpav> what i want is to take the parameter pack of one thing and use it as the specialization for a type
[22:42:05] *** Joins: letto (~letto@188.27.114.171)
[22:42:18] <PJBoy> you can stuff that parameter pack into a tuple and specialise on that
[22:42:25] <rpav> ð¤
[22:42:42] <rpav> no because a tuple takes types, not values
[22:42:57] <PJBoy> what about tuple(args...)
[22:43:10] <rpav> i need to specialize on non-type template parameters though
[22:43:13] <rpav> or can you not even do that
[22:43:20] <rpav> no i just did of course i can
[22:43:25] <PJBoy> or tuple<integral_constant<decltype(args), args>...>
[22:43:26] <rpav> wait .. or is this being built with 20
[22:43:50] <rpav> no seems to work in 17
[22:44:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:27] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:27] *** ChanServ sets mode: +v npaperbot
[22:45:55] <rpav> oh shit htis is only numeric literals dammit
[22:46:03] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[22:48:01] <rpav> and this _still_ wouldn't work even if it worked, i don't know what i'm thinking, i need a variable->type lookup
[22:48:18] <rpav> just have to use a manual map i guess
[22:48:52] <furrymcgee> why do you want a string literal rather than variable name?
[22:49:13] <rpav> ?
[22:50:51] *** Joins: plastico (~plastico@neomutt/plastico)
[22:51:28] <furrymcgee> enum string { foo ;}; template <string> String2Type { };
[22:51:49] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[22:51:58] <rpav> becuase you want to define a mapping of actual-strings to types, so you can look them up by actual-string
[22:52:22] <rpav> though i think you can work around the template parameter can't be a variable part just like with variable-get(N)
[22:52:26] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 245 seconds)
[22:54:02] <furrymcgee> name mangling?
[22:54:07] <rpav> ??
[22:54:45] <rpav> assume one can trivially make a type<T> that value-represents a type, and have like, auto *dbl_type = type::get<double>();
[22:55:01] <rpav> what would also be nice is `auto *dbl_type = type::get("double");`
[22:55:07] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[22:55:07] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Client Quit)
[22:55:19] <PJBoy> impossible
[22:55:23] *** Joins: CalamityToo (~CalamityB@user/CalamityBlue)
[22:55:33] *** Joins: pulse (~pulse@user/pulse)
[22:55:33] <rpav> nah
[22:55:48] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[22:56:11] <PJBoy> unless it's a void pointer or polymorphic base pointer
[22:56:11] <rpav> i mean you would have to at least manually define the mapping i think, via some `<> struct type_name<"double"> { using type = double; };`
[22:56:29] <rpav> well `type` is a polymorphic base pointer
[22:56:50] <rpav> err, i typed `type<T>`, but i meant `type` (and you have `type_impl<T>` subclasses)
[22:57:03] <PJBoy> function parameters are never constexpr, so you couldn't possibly change the return type of get() via the function argument
[22:57:12] <rpav> right
[22:57:32] <rpav> you would return a `const type*` which is a static variable return allocated in the function
[22:58:10] <rpav> this is partially what i was using the "external CRTP" for, so i could map `type_impl<int>` to something that _wasn't_ a specialization of type_impl<T>, but a subclass
[22:58:16] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[22:58:39] <rpav> (becuase you need the instance to be the subclass, not type_impl<T>)
[22:59:45] <rpav> i'm not sure how the constexpr map implementations work but i don't think you can use the tuple_getter method for a dynamic get(N) for this, since that depends on an index sequence
[22:59:51] <Raziel> rpav, sounds like you just want proper reflection at this point
[23:00:07] <rpav> Raziel: i've _always_ wanted that, it would make this a lot easier definitely
[23:00:31] <Raziel> I mean, I can't blame you :p
[23:08:43] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[23:10:02] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[23:13:23] <furrymcgee> 'look them up by actual-string' is what linkers use name mangling for
[23:20:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 240 seconds)
[23:20:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064)
[23:23:06] *** Joins: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com)
[23:23:29] <lpapp> in a shared library on Linux, if nm -C returns 't' for a method, it means it is not exposed, whilst 'T' means it is?
[23:31:51] *** Joins: proller (~p@2a02:6b8:b081:1222::1:34)
[23:32:48] <PJBoy> man page says "If lowercase, the symbol usually local; if uppercase, the symbol is global (external)"
[23:32:58] <PJBoy> so yeah that sounds right
[23:33:00] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[23:33:02] <Juliu> Hi
[23:36:01] <lpapp> "usually"?
[23:36:05] <lpapp> which man page? Not mine
[23:38:38] <m_ben> lpapp: nm(1), second item under DESCRIPTION
[23:41:22] *** Quits: artok (~azo@mobile-access-b04817-209.dhcp.inet.fi) (Quit: workwork)
[23:41:57] <lpapp> ah, missed that, thanks!
[23:42:33] *** Joins: magla (~gelignite@d53678fd.access.ecotel.net)
[23:45:42] *** Joins: unyu (~pyon@user/pyon)
[23:45:53] <rpav> f'n fmtlib
[23:47:46] <rpav> just liek "no formatter," absolutely nothing useful to go off of
[23:48:12] <rpav> there _is_ a specialization and it looks similar to the others in the same file that work
