[00:01:56] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:04:22] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[00:06:14] <aquanight> simcop2387: that link claims O(1) (which really shouldn't be possible: any operationt that operates over an entire list has O(n) as a lower bound)
[00:16:24] <Botje> "bogosort" should give you an idea that it's a joke
[00:18:16] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:20:32] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[00:20:44] <dansan> simcop2387: btw, if you're looking into improving h2ph via during cross-compilation, here's a little snippet that will give you the include path of the compiler: gcc -xc -v -E - </dev/null 2<&1 | perl -e 'my $start, $end; while (<>) { last if ($_ =~ /^#include <\.\.\.> search starts here:$/); } while (<>) { last if ($_ =~ /^End of search list\.$/); $_ =~ s/^\s+|\s+$//g; print(`realpath "$_"`); };'
[00:20:46] *** Quits: sverzel (~sverzel@2001:9b1:26fc:8d10:c54b:7578:ffcc:55aa) (Quit: Leaving)
[00:21:36] <dansan> Replace gcc with the CC being used and include the CFLAGS -- mostly you just need the flags that start with -m
[00:21:58] *** Joins: jpn (~jpn@user/jpn)
[00:22:06] *** Quits: jpn (~jpn@user/jpn) (Client Quit)
[00:23:15] <dansan> You can get only the c preprocessor macros with gcc -dM -E - < /dev/null , but again all of the machine flags should be present
[00:24:14] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[00:26:19] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[00:28:05] *** Quits: magla (~gelignite@55d44736.access.ecotel.net) (Quit: Stay safe!)
[00:28:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[00:29:41] *** Joins: fling (~fling@user/fling)
[00:35:10] *** Joins: jpn (~jpn@user/jpn)
[00:35:37] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[00:36:38] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:36:47] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[00:39:20] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:40:51] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[00:42:08] *** Joins: veesh (~veesh@89.237.96.10)
[00:47:01] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:48:49] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[00:54:29] *** Quits: veesh (~veesh@89.237.96.10) (Ping timeout: 256 seconds)
[00:54:32] *** Joins: monkey_ (~user@190.104.116.153)
[01:00:32] *** Quits: WantToHe1p (~WantToHel@user/wanttohelp) (Ping timeout: 272 seconds)
[01:13:35] <hodbogi_> Does anyone else ever type my $self = shit;
[01:16:46] <lureevar> our $society = "shit";
[01:18:35] *** Joins: veesh (~veesh@89.237.103.97)
[01:19:02] <hodbogi_> lol
[01:25:37] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[01:27:15] <aquanight> my, our, ... what might a 'your' declarator do?
[01:31:29] <simcop2387> your $Foo::bar = "baz"; # declares $bar to be the our variable from Foo::
[01:31:37] <simcop2387> maybe?
[01:31:51] <simcop2387> it'd be like my \$bar = \
[01:31:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[01:31:56] <simcop2387> it'd be like my \$bar = \$Foo::bar;
[01:33:46] *** Joins: fling (~fling@user/fling)
[01:33:57] *** Quits: lureevar (~lureevar@200.139.84.46.dynamic.dialup.gvt.net.br) (Quit: lureevar)
[01:39:39] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[01:40:05] <vms14> I'm wondering if embedding perl into C or use XS instead
[01:40:26] <vms14> I want to make a forth with C ffi but don't really want to write it in C
[01:41:05] <vms14> XS sounds like a more logical approach
[01:41:45] <vms14> but perlembed seems to be easy and idk if for this case is a better option
[01:41:48] *** justAstache is now known as justOkay
[02:05:00] *** Quits: chmnd (~chmnd@c-98-193-62-193.hsd1.il.comcast.net) (Quit: Client closed)
[02:11:57] <hodbogi_> I am so evil for making a fork of the BDF font format
[02:12:05] <hodbogi_> I am bad and I should feel bad
[02:23:49] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[02:26:01] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[02:27:52] *** Joins: R2robot (~R2robot@user/r2robot)
[02:30:59] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[02:33:42] *** Joins: pizdets_ (~pizdets@183.182.114.133)
[02:33:59] *** Quits: pizdets (~pizdets@183.182.114.159) (Ping timeout: 265 seconds)
[02:35:41] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[02:36:40] *** Joins: fling (~fling@user/fling)
[02:40:09] *** Joins: whynot (~whynot@37.73.46.21)
[02:43:49] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[02:45:00] <simcop2387> vms14: honestly if i was going to do that i might do it via rust, nim, or zig these days.  they all have nice C ABI support and have advantages over C
[02:48:15] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[02:51:29] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:53:09] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[02:54:30] <vms14> simcop2387: hmm
[02:55:08] *** Joins: japh (~scp1@user/japh)
[02:55:34] *** Joins: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net)
[02:56:26] <vms14> the world loves rust, but I don't have much interest in it
[02:56:57] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[03:03:48] *** Quits: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net) (Remote host closed the connection)
[03:05:56] *** Joins: toor_ (~toor@2604:a880:800:c1::1db:f001)
[03:08:52] *** Quits: gast0n (~g4570n@user/gast0n) (Read error: Connection reset by peer)
[03:10:17] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:ac7c:7efe:b41c:83be)
[03:11:12] *** Quits: toor_ (~toor@2604:a880:800:c1::1db:f001) (Quit: ZNC 1.8.2 - https://znc.in)
[03:18:32] *** Quits: acidsys_ (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[03:19:05] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[03:20:17] *** Joins: wwalker-znc (~wwalker-z@2604:a880:800:c1::1db:f001)
[03:20:51] <vms14> simcop2387: did you try zig?
[03:21:12] <vms14> is the most interesting (for me) of what you've mentioned
[03:21:31] *** Quits: hodbogi_ (~fatalnix@user/fatalnix) (Quit: Lost terminal)
[03:21:36] *** Joins: alex11 (~alex11@user/alex11)
[03:22:02] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[03:22:24] *** Quits: wwalker-znc (~wwalker-z@2604:a880:800:c1::1db:f001) (Client Quit)
[03:23:28] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:25:09] *** Joins: gast0n (~g4570n@user/gast0n)
[03:30:37] *** Joins: Hassan (~Hassan@static-host119-30-85-202.link.net.pk)
[03:32:19] *** Joins: wwalker-znc (~wwalker-z@2604:a880:800:c1::1db:f001)
[03:35:04] *** Joins: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net)
[03:35:25] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[03:38:42] *** Quits: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net) (Remote host closed the connection)
[03:39:38] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[03:39:52] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[03:40:29] *** Joins: fling (~fling@user/fling)
[03:46:47] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:47:15] *** Joins: monkey_ (~user@190.104.116.153)
[03:49:26] *** eldritch_ is now known as eldritch
[03:53:35] *** Quits: japh (~scp1@user/japh) (Ping timeout: 268 seconds)
[03:54:56] *** Quits: eldritch (~eldritch@user/eldritch/x-9272577) (Changing host)
[03:54:56] *** Joins: eldritch (~eldritch@user/eldritch)
[03:55:09] *** Joins: japh (~scp1@user/japh)
[03:55:38] *** Joins: Croran (~Croran@71.231.214.173)
[03:59:45] *** Quits: Hassan (~Hassan@static-host119-30-85-202.link.net.pk) (Quit: Client closed)
[04:06:41] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 250 seconds)
[04:14:31] *** Joins: Hassan (~Hassan@static-host119-30-85-202.link.net.pk)
[04:20:45] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Remote host closed the connection)
[04:30:20] <simcop2387> vms14: not in enough of a serious capacity myself, but i hear good things
[04:39:34] <vms14> I know a guy who likes it
[04:39:44] <vms14> but I'll do it in C and just stop crying
[04:40:43] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:43:57] *** Quits: Pali (~pali@user/pali) (Ping timeout: 250 seconds)
[04:44:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[04:46:06] *** Joins: fling (~fling@user/fling)
[04:53:17] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[04:55:09] *** Joins: japh (~scp1@user/japh)
[05:04:45] *** Joins: Nei_ (~ailin@openSUSE/member/ailin-nemui)
[05:05:00] *** Quits: Nei (~ailin@openSUSE/member/ailin-nemui) (Ping timeout: 240 seconds)
[05:06:12] *** Quits: Lartza (lartza@user/lartza) (Ping timeout: 240 seconds)
[05:06:15] *** Joins: Lartza_ (lartza@user/lartza)
[05:06:35] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[05:07:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:08:40] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[05:08:46] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:47] *** Nei_ is now known as Nei
[05:11:41] * GumbyPAN CPAN Upload: Image-Randim-0.08 by SEATEK https://metacpan.org/release/SEATEK/Image-Randim-0.08
[05:27:15] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[05:31:46] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[05:33:07] *** Joins: lxdn00b (~lxdn00b@47.153.28.33)
[05:34:47] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 252 seconds)
[05:44:24] *** Quits: whynot (~whynot@37.73.46.21) (Quit: leaving)
[05:48:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[05:50:09] *** Joins: fling (~fling@user/fling)
[05:53:30] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[05:55:08] *** Joins: japh (~scp1@user/japh)
[06:01:09] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[06:02:19] *** Quits: lxdn00b (~lxdn00b@47.153.28.33) (Quit: Connection closed)
[06:02:31] *** Joins: lxdn00b (~lxdn00b@47.153.28.33)
[06:05:02] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:33:48] *** Joins: pucara (~i@host112.190-139-217.telecom.net.ar)
[06:37:06] *** Joins: Trigon (~reuben@144.39.114.115)
[06:52:00] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[06:52:31] *** Joins: fling (~fling@user/fling)
[06:53:25] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[06:55:07] *** Joins: japh (~scp1@user/japh)
[06:57:16] *** cjac_ is now known as cjac
[06:57:50] *** Quits: kevin-oculus (~kevin-ocu@c188-149-14-10.bredband.tele2.se) (Ping timeout: 252 seconds)
[06:58:36] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:01:54] * GumbyPAN CPAN Upload: Alien-proj-1.21 by SLAFFAN https://metacpan.org/release/SLAFFAN/Alien-proj-1.21
[07:04:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:04:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:04:02] *** finn_elija is now known as FinnElija
[07:04:15] *** Joins: frost (~frost@user/frost)
[07:17:13] *** Joins: furrymcg1e (~devuan@cgn-89-1-209-26.nc.de)
[07:17:18] *** Urawa is now known as Awari
[07:17:22] *** Awari is now known as Awaru
[07:20:02] *** Quits: furrymcgee (~devuan@cgn-213-196-210-225.nc.de) (Ping timeout: 240 seconds)
[07:32:44] *** Quits: pucara (~i@host112.190-139-217.telecom.net.ar) (Quit: Lost terminal)
[07:40:30] *** Quits: Hassan (~Hassan@static-host119-30-85-202.link.net.pk) (Quit: Ping timeout (120 seconds))
[07:47:55] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[07:53:28] *** Quits: japh (~scp1@user/japh) (Ping timeout: 268 seconds)
[07:55:07] *** Joins: japh (~scp1@user/japh)
[07:56:07] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:56:24] *** Joins: fling (~fling@user/fling)
[08:00:13] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:09:38] *** Joins: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net)
[08:13:38] <rindolf> EvanCarroll: ahoy, sup?
[08:14:05] <EvanCarroll> HALLO RINDOLF
[08:14:07] *** Joins: WantToHelp (~WantToHel@96.77.40.70)
[08:14:14] <EvanCarroll> Have you sung me any songz lately?
[08:15:05] <rindolf> EvanCarroll: no, sorry
[08:17:21] <rindolf> EvanCarroll: new fortune cookies tho- https://www.shlomifish.org/humour/fortunes/shlomif.html#lets-just-kill-prejudice
[08:17:22] <Paperbot> Link title(s): [ Shlomi Fish's Quotes as Fortunes Cookies - Shlomi Fish’s Homesite ]
[08:22:36] *** Joins: Martchus (~martchus@dynamic-077-007-087-072.77.7.pool.telefonica.de)
[08:23:06] *** Quits: Martchus_ (~martchus@2a01:c23:b88a:ef00:d250:99ff:fe49:3cce) (Ping timeout: 252 seconds)
[08:24:36] <EvanCarroll> So wise.
[08:25:04] <EvanCarroll> but I'm telling you, your real claim to fame is going to be in music.
[08:26:09] <rindolf> EvanCarroll: heh, i try to be a multi-media creator
[08:28:17] <rindolf> EvanCarroll: maybe i'll ask my father to record another singalong cover of me
[08:41:39] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 250 seconds)
[08:44:21] <EvanCarroll> tell him that you want something more upbeat.
[08:44:24] <EvanCarroll> like Eye of the Tiger.
[08:45:03] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[08:45:49] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[08:50:29] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[08:50:33] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (Quit: because)
[08:53:21] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[08:55:07] *** Joins: japh (~scp1@user/japh)
[09:00:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[09:02:30] *** Joins: fling (~fling@user/fling)
[09:05:35] *** Joins: R2robot_ (~R2robot@user/r2robot)
[09:06:32] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[09:07:06] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 252 seconds)
[09:12:09] * GumbyPAN CPAN Upload: API-MailboxOrg-1.0.2 by PERLSRVDE https://metacpan.org/release/PERLSRVDE/API-MailboxOrg-1.0.2
[09:20:32] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[09:20:58] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:28:22] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.4)
[09:30:50] *** Joins: Hassan (~Hassan@static-host119-30-85-202.link.net.pk)
[09:37:48] *** Quits: japh (~scp1@user/japh) (Ping timeout: 240 seconds)
[09:38:07] *** Joins: japh (~scp1@user/japh)
[09:51:32] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:53:18] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[09:53:55] <rindolf> EvanCarroll: great song
[09:55:21] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[09:55:24] *** Joins: japh (~scp1@user/japh)
[09:59:31] <pj> Is there a safe way to allow user input to be used as a regex?
[10:02:08] <rindolf> pj:perl
[10:02:22] <rindolf> pjperl
[10:03:00] <pj> sorry?
[10:03:48] <rindolf> perlbot -f quotemeta
[10:03:48] <perlbot> rindolf: https://perldoc.perl.org/functions/quotemeta
[10:04:31] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:ac7c:7efe:b41c:83be) (Ping timeout: 245 seconds)
[10:04:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[10:04:51] <pj> yeah, doesn't help.  I want them to be able to pass in a proper regex, but just not do something dangerous, like pass in "`rm -rf /`"
[10:05:25] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Quit: Awaru)
[10:06:27] *** Joins: fling (~fling@user/fling)
[10:09:58] *** Joins: ekathva (~ekathva@2001:999:50:7590:3293:e550:f3ea:111)
[10:16:51] <vms14> pj: it seems you'll have to check manually
[10:17:06] <vms14> but wouldn't be strange to see several modules that do what you want
[10:18:28] <pj> yeah, it seems Safe might be my best bet.
[10:18:39] *** Joins: mexen_ (uid495612@user/mexen)
[10:20:42] *** mexen_ is now known as mexen_wfh
[10:21:17] * GumbyPAN CPAN Upload: Module-Generic-v0.22.1 by JDEGUEST https://metacpan.org/release/JDEGUEST/Module-Generic-v0.22.1
[10:23:26] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[10:23:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:25:58] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[10:26:05] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 250 seconds)
[10:28:43] *** Quits: randir (~randir@95-25-111-216.broadband.corbina.ru) (Remote host closed the connection)
[10:30:05] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[10:40:31] *** Quits: Hassan (~Hassan@static-host119-30-85-202.link.net.pk) (Quit: Ping timeout (120 seconds))
[10:41:06] <EvanCarroll> pj: Safe isn't really safe.
[10:41:33] <pj> EvanCarroll: Can you elaborate?
[10:42:54] *** Quits: mexen_wfh (uid495612@user/mexen) ()
[10:49:16] <EvanCarroll> pj: it generally sucks and creates bugs, and is easy to escape.
[10:49:38] <EvanCarroll> xs subs are not for example checked. They don't generate opcdoes, so it's free for all.
[10:50:02] <EvanCarroll>    Escape from a Safe compartment
[10:50:03] <EvanCarroll>     Opcode restrictions and Safe compartments are not supported as security
[10:50:03] <EvanCarroll>     mechanisms. The Perl parser is not designed to evaluate untrusted code.
[10:50:08] <EvanCarroll> perlsecpolicy
[10:50:12] <EvanCarroll> but that's pretty vague.
[10:50:56] <pj> grand
[10:51:21] <pj> so what would be a good solution to prevent code evaluation from an untrusted regex?
[10:52:28] <EvanCarroll> Perl can't do that.
[10:52:55] *** Quits: japh (~scp1@user/japh) (Ping timeout: 268 seconds)
[10:53:02] <EvanCarroll> perl has no security that allows execution of untrusted code, the act of compiling code is itself unsafe (which is the core of the problem).
[10:53:40] <EvanCarroll> this is in part because in order to compile code, you have to be able to first parse it, and parsing code is unsafe in Perl because that can't happen _outside_ of compilation.
[10:54:24] *** Joins: japh (~scp1@user/japh)
[10:54:37] <EvanCarroll> So what you can do, if you want to want to really achieve safety is not use Perl's parser at all. That'll work. You can link out and use libpcre, or the like.
[10:54:39] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Quit: That's a thinker...)
[10:55:01] <EvanCarroll> https://metacpan.org/pod/Alien::libpcre
[10:55:02] <Paperbot> Link title(s): [ Alien::libpcre - Find or download and install libpcre (The "Perl Compatible" Regular Expressions ... ]
[10:55:40] <EvanCarroll> you can also, run your code in a container such that if it's compromised nothing execepting that process is lost. This security model is very easy to adapt comparitively and requires little in the way of code change.
[10:56:28] <pj> Yeah, I was just looking at that.
[10:56:54] <pj> At the end of the day the regex will come from a (mostly) trusted user, but I want to make it as secure as possible without jumping through too many hoops.
[10:57:14] <EvanCarroll> if you run it in a untrusted container you'll be protected by seccomp, and kernel namespaces.
[10:57:20] <EvanCarroll> (and cgroup limits)
[10:58:15] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[10:58:31] <EvanCarroll> pj: As a matter of good design, I highly suggest learning containers/podman. It'll do a great job at keeping you secure. Because there is probably a lot more of this stuff you don't want to know about it.
[10:59:14] <pj> heh
[11:02:04] <japh> speaking of security. working on a huge codebase at work (fcgi) and I'm wondering if I can enable taint mode in a script of mine that needs to process formvars, or if I have to do it on the httpd level? Just adding -t,-T makes no difference.
[11:04:33] <EvanCarroll> if it's fcgi, you need to enable it in whatever runs the fcgi loop.
[11:04:59] <japh> right. that will cause mayhem
[11:05:15] <EvanCarroll> pj: it's something like this, `podman run -ti -- perl:5-bullseye /usr/bin/perl -E "Hello world"`
[11:05:16] *** Joins: Pali (~pali@user/pali)
[11:07:37] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[11:08:27] <japh> ok, $work fcgi imploded. boom. just another manic monday
[11:08:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[11:09:31] *** Joins: fling (~fling@user/fling)
[11:14:30] <japh> var INTE beredd på att eamon ser ut som robbie williams
[11:18:33] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[11:23:55] <vms14> https://termbin.com/g6ps I have this simple forth xD
[11:24:09] <vms14> not even a forth but a stack based language with rpn 
[11:24:43] <vms14> forth::execute_text("1 2 3 4 +"); forth::print_stack();
[11:25:09] <vms14> I could be able to add words to the current execution
[11:25:25] <vms14> by pushing stuff on @words_to_execute
[11:25:43] <vms14> I think does not need a return stack
[11:26:08] <vms14> the stack will accept any scalar so strings, code refs, hash refs and alike
[11:28:10] <vms14> I have a void loop because the execution has to be made by checking if there are words to execute and since this array can grow while executing words I have to execute one word and then check the array instead of a loop trough this array
[11:28:37] <vms14> yet I could have done it in a better way xD
[11:29:00] <vms14> and has no syntax to compile new words in forth code
[11:30:03] <vms14> and I think I'll make it able to quote words like 'word and would get pushed on the stack
[11:30:30] <vms14> also I've implemented lists by pushing delimiters on the stack once
[11:31:05] <vms14> but idk if I really need that, I've added lisp like macros to that implementation but didn't find a use for them
[11:31:22] <vms14> as I can quote words and add them to execution would be similar to a macro
[11:31:45] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[11:31:52] <vms14> yet I have to test, idk if adding words to execution will be a bad thing after all
[11:32:17] <vms14> and when I see a forth defined word (a list of words) I just add them to current execution
[11:33:37] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 240 seconds)
[11:41:26] * GumbyPAN CPAN Upload: Math-Pari-2.03052003 by ILYAZ https://metacpan.org/release/ILYAZ/Math-Pari-2.03052003
[11:45:38] *** Joins: art1 (~romeyke@p200300ccdf032b00974cd1c149e2cee5.dip0.t-ipconnect.de)
[11:47:48] <Botje> vms14: are you basing yourself on an existing forth?
[11:48:02] <vms14> nope
[11:48:08] <Botje> vms14: the looping behavior, for example, is implemented by every word enter in (iirc) a LEAVE 
[11:48:25] <Botje> which pops the stack and enters the next wor
[11:48:26] <Botje> d
[11:48:27] <vms14> I don't think there's a forth so dirty like this one xD
[11:48:49] <Botje> I can highly recommend https://github.com/nornagon/jonesforth/blob/master/jonesforth.S
[11:48:50] <Paperbot> Link title(s): [ jonesforth/jonesforth.S at master · nornagon/jonesforth · GitHub ]
[11:48:56] <vms14> saw it
[11:48:59] <Botje> even if you don't understand one bit of assembly, the explanation is <3
[11:49:06] <vms14> but if you see mine has not even a return stack
[11:49:18] <vms14> and I was wondering if that's a flaw
[11:49:41] <vms14> I mean I have @words_to_execute which is an array and now I'll make it able to quote words
[11:50:11] <vms14> quoted words will end to the stack, I can add a word that takes a word from the stack and pushes into the array for execution
[11:50:30] <vms14> when the interpreter sees a forth word it just expands it to that array
[11:50:53] <vms14> like (1 2 someword 3 4) if someword is a forth word, will execute 1 2, then the array is (someword 3 4) the words of someword will get expanded into that array like if : someword 5 6 ; the array now will be (5 6 3 4)
[11:51:00] <Botje> that is one approach
[11:51:16] <Botje> how will you make that work with IF and [] ?
[11:52:34] *** Quits: japh (~scp1@user/japh) (Ping timeout: 260 seconds)
[11:52:53] <vms14> nice question xD
[11:53:53] <vms14> idk what will happen
[11:54:02] <vms14> : someword 5 4 'another-word add-to-execution 1 2 3 ; (someword) should expand to (5 4 'another-word add-to-execution 1 2 3) which in turn will execute 5 and 4, then push 'another-word to the stack, then add-to-execution will add this so would be now (another-word 1 2 3)
[11:54:22] *** Joins: japh (~scp1@user/japh)
[11:54:42] <vms14> I was going to implement if just with the perl if
[11:55:10] <vms14> and don't know what will happen when I escape from compiling mode and/or come again
[11:56:28] <vms14> Botje: do you think I'll have troubles with [ and ] ?
[11:56:37] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:57:30] <vms14> and don't even know if I'll need them being able to put stuff into execution
[11:58:17] <vms14> actually I tried this in a similar implementation and added lisp macro features, but I had the feeling there was no need for a lisp macro as I can quote words and add them to execution
[11:58:36] <vms14> but it's a weird idea and maybe there's a flaw I don't see just now
[12:00:26] <vms14> add-to-execution although I don't see any use case for now seems to do the same a macro would do
[12:03:27] <vms14> and in the other implementation I was able to get lists by pushing a { and a } on the stack xD
[12:05:00] <vms14> I had () [] and {} all to make lists, () pushed the delimiters and populated the list, don't remember what [] did and {} where just the delimiters being pushed on the stack, but not populating the list
[12:05:22] <vms14> in a way that { and } are items on the stack you could drop dup swap etc
[12:05:57] <vms14> ah () quoted the items of the list that's why I also had [] xD
[12:06:29] * GumbyPAN CPAN Upload: Mojo-Server-DaemonControl-0.01 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojo-Server-DaemonControl-0.01
[12:06:42] <vms14> it was intended for macro usage (1 2 3 print) would be [ '1 '2 '3 'print ]
[12:07:13] <vms14> and the interpreter when found a 'word just removed one ' so you could have several ' in a word like ''''word 
[12:07:28] <vms14> eevery time it gets executed will get a ' removed
[12:07:36] <vms14> xDDDD
[12:07:40] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[12:09:45] <vms14> it's a weird approach and was more like testing ideas than anything else
[12:10:16] <vms14> but the fact that the stack can have words let's you make words that can execute or operate on words present in the stack
[12:11:15] <vms14> so I can do things a real forth couldn't
[12:11:54] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:12:17] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[12:12:47] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[12:12:51] <vms14> so it's not a real forth, it just has the concept of a stack and rpn
[12:19:36] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[12:21:30] * GumbyPAN CPAN Upload: MsOffice-Word-Surgeon-1.08 by DAMI https://metacpan.org/release/DAMI/MsOffice-Word-Surgeon-1.08
[12:21:52] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[12:23:49] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[12:25:15] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:25:45] *** Joins: randir (~randir@93.159.239.42)
[12:27:41] <rindolf> epony: sup?
[12:29:49] *** Lartza_ is now known as Lartza
[12:29:50] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[12:29:57] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 240 seconds)
[12:30:30] <rindolf> vms14: https://www.shlomifish.org/humour/fortunes/show.cgi?id=monologue-and-dialogue
[12:30:31] <Paperbot> Link title(s): [ Monologue and Dialogue - Fortune ]
[12:34:09] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:40:26] <vms14> rindolf: what's the goal?
[12:40:47] <vms14> show your fortune and try to make me feel bad at same time or what
[12:42:50] <rindolf> vms14: nvm...
[12:43:30] *** R2robot_ is now known as R2robot
[12:44:36] <vms14> hah I know I tend to do monologues, but didn't like what you've done here as I don't get the intentions behind that
[12:45:30] <vms14> I suppose it was just an opportunity to show your fortune, but also to tell me to shut up, when I did yet
[12:46:15] <vms14> but got your message, I'll go to sleep 
[12:46:41] *** Quits: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[12:46:58] <rindolf> vms14: i apologise
[12:53:28] *** Joins: ccntrq (~Thunderbi@2a01:c22:8d50:dd00:8e34:5a5f:75dd:cff4)
[13:07:40] *** Quits: japh (~scp1@user/japh) (Remote host closed the connection)
[13:10:18] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:11:35] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[13:12:24] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[13:13:40] *** Joins: japh (~scp1@user/japh)
[13:17:57] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[13:18:40] *** Joins: japh (~scp1@user/japh)
[13:18:59] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 252 seconds)
[13:29:06] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 245 seconds)
[13:29:06] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:29:30] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:44:03] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: Client closed)
[13:45:24] *** Joins: jpn (~jpn@user/jpn)
[13:50:27] *** Joins: jpn_ (~jpn@user/jpn)
[13:50:35] * ology attempts to marry AI::Genetic && Music::Tension::Cope 
[13:50:43] <ology> insomnia++ \o/
[13:51:11] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 245 seconds)
[13:51:40] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[13:53:18] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[13:54:44] <Altreus> Are you suitably ordained for that?
[13:58:21] <ology> heh
[13:58:30] <ology> I hope so because: https://github.com/ology/Music/blob/master/cope-genetic
[13:58:31] <Paperbot> Link title(s): [ Music/cope-genetic at master · ology/Music · GitHub ]
[13:58:54] *** Joins: jpn (~jpn@user/jpn)
[13:59:56] *** Quits: peder (4822@nidur.ifi.uio.no) (Ping timeout: 245 seconds)
[14:00:34] *** Joins: peder (4822@nidur.ifi.uio.no)
[14:00:49] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:01:01] *** Quits: Bluewind (~Bluewind@user/bluewind) (Ping timeout: 256 seconds)
[14:01:21] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:01:35] *** Quits: jpn_ (~jpn@user/jpn) (Ping timeout: 256 seconds)
[14:07:32] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[14:07:33] <Altreus> I bet this makes sense to some people :D
[14:08:12] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[14:08:38] <ology> heh
[14:09:29] <ology> "The (3 note) chords with the least amount of dissonant tension are selected for."
[14:10:09] <ology> "A chord" that is. Working on multiples now...
[14:11:24] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[14:12:11] <BinGOs> I like your pitch and I note that it scales nicely.
[14:12:29] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[14:12:47] *** Joins: fling (~fling@user/fling)
[14:15:47] *** Quits: sokan (~sokan@2a02:587:9e19:4700:227:eff:fe16:865d) (Quit: Reality.is.a.lie)
[14:18:24] <Altreus> groan
[14:20:20] <Altreus> I'm too crotchety on a Monday for puns like that
[14:21:01] <Altreus> Needs to be noon at a minimum
[14:21:44] * GumbyPAN CPAN Upload: ZMQ-FFI-1.18 by GHENRY https://metacpan.org/release/GHENRY/ZMQ-FFI-1.18
[14:22:19] * ology can't sleep. Goes to see what his UK coworkers are up to...
[14:23:26] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[14:24:54] <aquanight> ology: your dang #warn lines kept making me think they were some new perl pragma thing
[14:25:04] <aquanight> took me way too long to figure out they're just #d out warn lines
[14:26:27] <aquanight> oh this is interesting. TIL -w sets $^W = 1; but -Mwarnings does not.
[14:27:53] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[14:28:29] *** Joins: ccntrq1 (~Thunderbi@2a01:c23:9138:6500:9d51:645d:5278:c792)
[14:28:35] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:28:45] *** Quits: ccntrq (~Thunderbi@2a01:c22:8d50:dd00:8e34:5a5f:75dd:cff4) (Ping timeout: 268 seconds)
[14:28:45] *** ccntrq1 is now known as ccntrq
[14:28:59] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:29:01] *** Joins: randir (~randir@93.159.239.42)
[14:29:48] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:30:10] <ology> geek stuff. Imagine that
[14:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:00] *** Joins: csrf (~csrf@user/csrf)
[14:31:33] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[14:31:45] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[14:31:45] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:35:54] *** Quits: ccntrq (~Thunderbi@2a01:c23:9138:6500:9d51:645d:5278:c792) (Remote host closed the connection)
[14:36:12] *** Joins: ccntrq (~Thunderbi@2a01:c23:9138:6500:9d51:645d:5278:c792)
[14:37:58] <Altreus> aquanight: cos -M is 'use' :)
[14:39:35] *** Joins: capn (~capn@user/capn)
[14:44:06] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:44:59] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:46:03] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:46:15] *** Joins: mattil (~mattil@helsinki.portalify.com)
[14:55:55] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[14:56:48] *** Joins: Bluewind (~Bluewind@user/bluewind)
[14:59:03] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[15:00:58] *** Joins: jpn (~jpn@user/jpn)
[15:05:42] *** xcombelle1 is now known as xcombelle
[15:06:14] *** Joins: sokan (~sokan@85.73.229.195)
[15:09:00] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[15:13:02] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[15:17:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[15:17:54] <aquanight> Altreus: I'm aware of that.
[15:18:06] <aquanight> for some reason I thought 'use warnings;' would also set $^W
[15:18:54] *** Joins: fling (~fling@user/fling)
[15:20:56] *** furrymcg1e is now known as furrymcgee
[15:20:56] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[15:24:56] <ilmari> no, because 'use warnings' is lexical, while $^W is dynamic
[15:25:13] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[15:27:49] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:29:09] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:29:58] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[15:37:48] *** Quits: proller (~p@2a02:6b8:b081:b404::1:14) (Ping timeout: 240 seconds)
[15:38:35] <Altreus> indeed - $^W is somewhat a mistake from today's perspective
[15:40:25] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[15:43:08] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:f9b9:c2d3:ad62:759d)
[15:44:34] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:44:47] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:47:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:dc5b:897:dfbc:2d30) (Ping timeout: 268 seconds)
[15:52:48] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[15:53:05] *** Joins: csrf (~csrf@user/csrf)
[15:53:13] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 256 seconds)
[15:53:40] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:57:52] <rindolf> happy hypomanic monday, all.
[15:59:21] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[16:01:57] <Altreus> Just a hypomanic Monday /7
[16:02:03] <Altreus> ♫ did I set up this alias? ♫
[16:02:05] <Altreus> I did!
[16:02:12] <Altreus> ♫ Just a hypomanic monday ♫
[16:03:36] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[16:04:31] <aquanight> 06:08:59/4198F < Altreus> indeed - $^W is somewhat a mistake from today's perspective ## well it has the side effect that 'warn "bleh" if $^W;' can exist since basically nobody really uses 'perl -w' these days
[16:04:58] <aquanight> e.g. abusing -w as a debugging switch
[16:08:03] <Altreus> heh :)
[16:09:48] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 240 seconds)
[16:12:29] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[16:13:43] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[16:13:51] *** Joins: diskin (~diskin@5.139.76.74)
[16:21:58] * GumbyPAN CPAN Upload: Unicode-ICU-0.06 by CPANEL https://metacpan.org/release/CPANEL/Unicode-ICU-0.06
[16:29:59] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: Client closed)
[16:30:22] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[16:34:35] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 256 seconds)
[16:34:59] *** Joins: Woodzy (~quassel@198.204.246.228)
[16:35:53] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:37:02] *** Joins: jpn (~jpn@user/jpn)
[16:37:06] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[16:39:15] *** Joins: txtsd (~txtsd@user/txtsd)
[16:41:07] *** Quits: madduck (~madduck@user/madduck) (Remote host closed the connection)
[16:41:21] *** Joins: proller (~p@2a02:6bf:fff0:1:458a:d0ec:aeca:cd21)
[16:41:37] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[16:42:34] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[16:43:55] *** Quits: proller (~p@2a02:6bf:fff0:1:458a:d0ec:aeca:cd21) (Remote host closed the connection)
[16:51:03] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[16:52:11] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:58:13] *** Joins: madduck (~madduck@user/madduck)
[17:02:12] *** Joins: jpn (~jpn@user/jpn)
[17:03:43] *** Joins: proller (~p@2a02:6b8:b081:7208::1:24)
[17:11:05] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[17:12:55] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[17:13:12] *** Joins: hodbogi (~fatalnix@user/fatalnix)
[17:14:12] <hodbogi> What is a popularly preferred approach to graphical applications, such as GTK or Wx, Tk... for most of you that bother with them at all?
[17:15:38] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[17:18:08] <Botje> I have worked with – and not hated – Qt and GTK.
[17:18:57] <Botje> oh, and Wx.
[17:19:03] <aquanight> most of the time I do anything GUI it's been .NET, so either forms or WPF
[17:19:31] <Botje> hodbogi: what kind of requirements do you have?
[17:20:04] <aquanight> one of these days I'll actually play with a perl gui framework. I think I vaguely remember messing with perl/qt once upon a time and was rather annoyed by it.
[17:20:11] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Ping timeout: 268 seconds)
[17:20:26] <Botje> Qt really wants to be driven by C++.
[17:20:48] <aquanight> but it'd require me to be mainly messing with perl in an environment that can work with GUI. WSL2 on W10 doesn't get the X11 emulation :(
[17:21:01] *** Joins: jpn (~jpn@user/jpn)
[17:21:09] <Botje> aquanight: errr .. didn't they announce that loudly some time ago?
[17:21:18] <aquanight> Botje: I think it's for Win11
[17:21:22] <aquanight> last I looked it up anyway
[17:22:10] <aquanight> yeah Win11 22000
[17:22:24] <aquanight> so us W10 plebs are SOL
[17:22:26] <Botje> huh.
[17:22:35] <Botje> weird.
[17:22:36] <aquanight> I suppose there's strawberry
[17:22:46] <Botje> it's like they want to sell you windows 11.
[17:23:10] <Botje> you could set up xming to get an X server, but that's the long way round of course
[17:23:21] <aquanight> eh
[17:23:56] <aquanight> it's a lot of effort for little gain
[17:24:18] <aquanight> I do have strawberry perl on here for if I really need anything in windows space
[17:24:40] <aquanight> and truth be told I'm not really sure perl is the best thing to be driving graphical applications with anyway
[17:25:00] <aquanight> I'd be too paranoid of keeping the message loop going
[17:25:15] <aquanight> and perl largely dislikes threading it seems
[17:25:43] <Botje> any complex perl application ends up using an event loop anyway
[17:26:08] <aquanight> oh sure
[17:26:09] <Botje> and iirc the prominent ones interoperate nicely with GUI event loops
[17:26:39] <aquanight> everything will end up Mojo'd with a backend webservice or something to break down all the backend stuff
[17:27:05] <Botje> I'm surprised there's no electron equivalent yet
[17:27:15] <aquanight> webservice because then it can be apache-forked 74 ways to sunday
[17:27:59] <Botje> hodbogi: oh, that is actually also an option. electron!
[17:28:12] *** Quits: japh (~scp1@user/japh) (Ping timeout: 268 seconds)
[17:28:42] *** Quits: peder (4822@nidur.ifi.uio.no) (Ping timeout: 252 seconds)
[17:30:13] <aquanight> 07:53:10/541EA < Botje> it's like they want to sell you windows 11. ## the sad thing is I would *be* on Win11 right now if they didn't arbitrarily decide my CPU wasn't good enough
[17:31:26] <Botje> won't somebody think of the ch^W^Wintel share price!
[17:32:56] <aquanight> I'm sure there's some Perfectly Logical Reason(TM) why. And I'm pretty sure it's absolute bullshit.
[17:35:25] *** Quits: veesh (~veesh@89.237.103.97) (Ping timeout: 240 seconds)
[17:35:56] <aquanight> and of course HW prices suck right now because fucking crypto can take an ice auger up the urethra.
[17:37:06] * GumbyPAN CPAN Upload: kateb-01.00.30 by KIAVASH https://metacpan.org/release/KIAVASH/kateb-01.00.30
[17:37:45] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:40:02] *** Joins: thrig (~thrig@207.108.197.156)
[17:41:58] *** Joins: peder (4822@nidur.ifi.uio.no)
[17:43:23] <KeepCoding> Hello! So, I'm working on a project created in 2017 with Mojolicious and PostgreSQL. To do Unit Testing we use the CPAN module "Test::PostgreSQL". Everything was fine until the last update of this module (on 19 Feb 2022 => https://metacpan.org/release/TJC/Test-PostgreSQL-1.29/source/Changes). After these changes the tests don't run anymore.
[17:43:23] <Paperbot> Link title(s): [ Changes - metacpan.org ]
[17:43:39] <KeepCoding> I just keep getting this error: `DBIx::Class::Storage::DBI::catch {...} (): DBI Connection failed: DBI connect('dbname=test;host=127.0.0.1;port=15432','postgres',...) failed: could not connect to server: Connection refused 	Is the server running on host "127.0.0.1" and accepting 	TCP/IP connections on port 15432?
[17:43:43] * Botje is happy to have "only" paid 100% over MSRP to actually get his video card.
[17:44:23] <Botje> * close to launch, that is
[17:44:54] *** Joins: japh (~scp1@user/japh)
[17:45:09] <Botje> KeepCoding: obvious question first: did you check whether Test::PostgreSQL->new actually worked? Is there a process running?
[17:46:04] *** Joins: troydm1 (~troydm@host-176-37-124-197.b025.la.net.ua)
[17:47:24] <KeepCoding> Botje: yeah, it worked fine for the past 6 years
[17:47:33] <Botje> but does it do so _now_.
[17:48:04] <Botje> the error you get can point to one of two things: postgres did not start, or postgres is not listening on the port your error shows.
[17:48:05] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 250 seconds)
[17:48:21] <ilmari> KeepCoding: is that the only error you get?
[17:48:29] <simcop2387> zstd on riscv64 is very very very slow.  10-20 minutes to compress an initrd
[17:48:33] <Botje> if the postgres process exists you can see if you can connect to it, if it does not you have to figure out why it refuses to start
[17:48:47] *** Joins: magla (~gelignite@d5363125.access.ecotel.net)
[17:49:01] <KeepCoding> Botje: yeah I thought that the port might be the problem. I'm using the default port 15432
[17:49:29] <KeepCoding> ilmari: yeah, that's it, I can't even debug this issue
[17:49:39] <Botje> why not?
[17:49:51] <aquanight> netstat -lnp | grep 15432
[17:50:01] <Botje> stick a sleep 10000 after your call to Test::Postgres->new and see what happens
[17:50:05] <Botje> or run your test script under strace
[17:50:15] <Botje> or perl -d your test and step into Test::Postgres->_try_start
[17:51:25] <ilmari> KeepCoding: that's just the base port, it tries random ports above that until it finds a free one
[17:52:05] <Botje> shouldn't you be using ->dsn instead of hard-coding 15432?
[17:52:08] * GumbyPAN CPAN Upload: Tesla-Vehicle-0.04 by STEVEB https://metacpan.org/release/STEVEB/Tesla-Vehicle-0.04
[17:52:08] * GumbyPAN CPAN Upload: Tesla-API-0.07 by STEVEB https://metacpan.org/release/STEVEB/Tesla-API-0.07
[17:52:20] <Botje> *aren't you using
[17:52:25] <KeepCoding> ilmari: yeah, I know, but can I do something else about it?
[17:53:13] <ilmari> KeepCoding: set the TEST_POSTGRESQL_PRESERVE environment variable when running the test and look in /tmp/pgtest.XXXXXX/postgres.log
[17:53:22] <KeepCoding> Botje: I'm not sure what ->dsn is 
[17:53:26] *** Quits: japh (~scp1@user/japh) (Ping timeout: 252 seconds)
[17:53:40] <Botje> it builds the connection string for you
[17:54:00] <Botje> or at the very least you should use ->port instead of hard-coding 15432
[17:54:16] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[17:54:54] <ilmari> KeepCoding: ->dsn is what you should be passing to ->connect: https://metacpan.org/pod/Test::PostgreSQL#dsn 
[17:54:55] <Paperbot> Link title(s): [ Test::PostgreSQL - PostgreSQL runner for tests - metacpan.org ]
[17:55:05] *** Joins: japh (~scp1@user/japh)
[17:55:46] <ilmari> KeepCoding: also as shown in the synopsis: https://metacpan.org/pod/Test::PostgreSQL#SYNOPSIS
[17:55:47] <Paperbot> Link title(s): [ Test::PostgreSQL - PostgreSQL runner for tests - metacpan.org ]
[17:57:55] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[17:58:16] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[17:58:26] <KeepCoding> Well, I pretty much hard-coded that :))
[17:58:27] <KeepCoding> my @TEST_DB_ARGS = (     'dbi:Pg:dbname=test;host=127.0.0.1;port=15432', 'postgres', '',
[17:58:40] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[17:59:01] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[17:59:24] <ilmari> don't do that. use the method the module tells you to use
[17:59:25] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[18:00:41] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[18:03:46] *** Quits: ekathva (~ekathva@2001:999:50:7590:3293:e550:f3ea:111) (Remote host closed the connection)
[18:08:59] <KeepCoding> I don't think that this is a problem, because the error occurre when trying to `->deploy()` not when trying to `->connect()`
[18:10:34] <ilmari> the problem is that the latest version of Test::PostgreSQL picks a random port to start with, not the base port (15432)
[18:10:54] <ilmari> but you are hardcoding the default port, not using the connection information the module tells you to use
[18:11:25] <ilmari> DBIx::Class doesn't connect until it needs to, ->connect just constructs the schema object and sets the connetion parameters
[18:11:53] <ilmari> so the error will come from ->deploy if that's the first thing you do that actually needs a connection
[18:12:28] <LeoNerd> The trouble with laziness
[18:12:39] <LeoNerd> Errors get deferred
[18:13:38] <thrig> defurred being something like yak shaving
[18:13:53] <KeepCoding> ilmari: Hmm, ok, that does make sense. Can you pleas tell me if you know, did the previous version of Test::PostgreSQL (1.28) also picks a random port to start with?
[18:14:26] <ilmari> KeepCoding: no, it started with the base port, but if that was taken it would increment it until it found a free one
[18:15:01] <ilmari> so if you were running tests concurrently you would already have been connecting to the wrong DB
[18:15:34] <ilmari> 1.28 made the increment random, 1.29 made the start port random too, to save time when several tests start at the same time
[18:16:42] *** Joins: wingfold (~wingfold@173.38.117.76)
[18:17:23] <aquanight> 08:43:02/5CFC5 < LeoNerd> Errors get deferred ## defer all errors until program termination. Of course, the better question is how soon "termination" comes after the error.
[18:17:45] <KeepCoding> Ok, great, so I should use ->dsn, right? In this way the modules will use the connection information it needs?
[18:18:13] <ilmari> yes
[18:18:42] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:19:29] *** Joins: mattil (~mattil@helsinki.portalify.com)
[18:19:40] *** Quits: troydm1 (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[18:19:55] <cjac> hi friends.  my daughter says $zelda_say="um."
[18:19:57] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:19:58] <cjac> but just the lvalue
[18:21:29] <cjac> $zelda_says=
[18:21:40] <cjac> "hi"
[18:23:49] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 250 seconds)
[18:26:17] *** Quits: lotharn (~kvirc@174-26-203-222.phnx.qwest.net) (Ping timeout: 240 seconds)
[18:26:51] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[18:29:42] <cjac> I gave her her own vty
[18:31:07] *** Quits: WantToHelp (~WantToHel@96.77.40.70) (Changing host)
[18:31:07] *** Joins: WantToHelp (~WantToHel@user/wanttohelp)
[18:31:49] *** Quits: hodbogi (~fatalnix@user/fatalnix) (Quit: Lost terminal)
[18:32:12] * GumbyPAN CPAN Upload: Koha-Contrib-Sudoc-2.37 by FREDERICD https://metacpan.org/release/FREDERICD/Koha-Contrib-Sudoc-2.37
[18:33:49] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Ping timeout: 256 seconds)
[18:34:16] <Altreus> cjac: this seems meaningful but I do not grasp what that meaning is :)
[18:35:10] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:35:29] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:35:31] *** Joins: krismatrix (~krismatri@2601:19b:4600:9370:42c3:b860:e6a9:6b65)
[18:35:39] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:37:13] * GumbyPAN CPAN Upload: Command-Runner-0.200 by SKAJI https://metacpan.org/release/SKAJI/Command-Runner-0.200
[18:38:24] <krismatrix> Does anyone here know and follow a TDD process (Test Driven Development) and wouldn't mind discussing the subject? I am trying to think about how/when/if I should follow such a process.
[18:40:03] <Altreus> We do a mix of TDD and DDD, with a bit of BDD if the testers have written cucumber scripts
[18:40:29] <thrig> TLA salad
[18:41:09] <krismatrix> What is DDD and BDD and TLA?
[18:41:32] <aquanight> three-letter acronym
[18:41:40] <krismatrix> ah. 
[18:41:47] <mason> https://medium.datadriveninvestor.com/the-value-at-the-intersection-of-tdd-ddd-and-bdd-da58ea1f3ac8?gi=5b9d239524f1
[18:41:49] <Paperbot> Link title(s): [ The Value at the Intersection of TDD, DDD, and BDD | by mobileLIVE | DataDrivenInvestor <https://medium.datadriveninvestor.com/the-value-at-the-intersection-of-tdd-ddd-and-bdd-da58ea1f3ac8?gi=d1a5a1141f55> ]
[18:41:54] <Altreus> DDD is development-driven development
[18:41:59] <Altreus> BDD is behaviour-driven development
[18:42:15] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:42:23] <krismatrix> oh geez.
[18:42:31] <thrig> YSD could then be Yak Shaving Development
[18:42:41] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:42:55] <Altreus> I think BDD is actually behaviour-driven testing, and then TDD
[18:42:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[18:43:02] <Altreus> but that seems like an OK article to read instead
[18:43:11] <krismatrix> ok.
[18:43:17] <aquanight> so I think if you were applying TDD for perl it would roughly amount to populating your t/ directory before you start doing any of the actual implementation
[18:43:41] <thrig> hard to write a test if you don't know what the code will be
[18:43:56] <krismatrix> Well..i primarily build the entire web app and indeed as aquanight says, there is a t/. This is the directory where I keep my mojo test scripts.
[18:44:04] <krismatrix> The playwright test scripts are stored elsewhere.
[18:44:07] <Altreus> That's why there are so many types of test
[18:44:24] <Altreus> unit tests test the code interface, so you need to know what that is, but behaviour tests just test that stuff happens eventually
[18:45:04] <krismatrix> My current process is...i think of some implementation, code it, then test manually, then write test scripts in t/, test that.
[18:45:09] <aquanight> one of the problems I always have is even when looking at higher-level testing, you still need to establish interface.
[18:45:33] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:45:45] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:46:37] <Altreus> that's true, but eventually that interface is specified by someone else
[18:46:43] <krismatrix> But would you recommend I do TDD where I write tests first? And if yes, how do you do it? Usually, I have to experiment a lot before I get a code I am happy with.
[18:47:15] <krismatrix> Right now my tests are really useful only when I later decide to modify someother code and want to make sure I didn't break any existing flow.
[18:47:22] <Altreus> I've never successfully written a test /first/, but I can write the test between designing the thing and implementing it
[18:47:42] <Altreus> high-level interfaces are also easier to write, really
[18:47:54] <Altreus> Eventually they end up as REST or something similar to that
[18:48:10] <thrig> probably TTD is easier if there's a specification tests can be derived from
[18:48:49] <kjetilho> writing the tests early can make it very obvious how awkward your API is to use (or not)
[18:49:00] *** Joins: hodbogi (~fatalnix@user/fatalnix)
[18:49:02] <hodbogi> Apparently I got disconnected earlier and didn't notice
[18:49:47] <krismatrix> mm..i feel like you guys are saying TDD is a fantasy goal effort not a useful actual implementation.
[18:49:55] <Altreus> that's also true. Sometimes I start with "how do I /want/ it to work?" and write a script that does it some ideal way
[18:50:02] <Altreus> Then I can quickly see that my ideal is idealistic
[18:50:21] *** hodbogi is now known as FatalNIX
[18:50:28] *** Joins: lotharn (~kvirc@ip68-231-174-67.tc.ph.cox.net)
[18:50:57] <aquanight> krismatrix: I would argue that ultimately there's no system that is 100% perfect 100% of the time
[18:51:19] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:51:45] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:51:51] <krismatrix> Not thinking in terms of a perfect system. But let's say I am trying to upgrade my speed and quality of programming...
[18:52:07] *** Quits: lotharn (~kvirc@ip68-231-174-67.tc.ph.cox.net) (Read error: Connection reset by peer)
[18:52:11] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:52:43] <Altreus> Ah well that would be a case of getting better at it :)
[18:53:01] <Altreus> What I mean by that is, it's easier to improve the quality by having the right idea first time
[18:53:07] <Altreus> I don't think testing strategy can help there
[18:53:28] <Altreus> However, as you say, testing that you haven't broken one thing by changing another is a good way of ensuring that your experimentation is safe
[18:53:58] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[18:54:07] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[18:54:08] <krismatrix> Right.
[18:54:17] <aquanight> TDD basically makes you take "I want this to do X" and write a test case for it. Then start changing stuff until the test passes.
[18:54:27] <krismatrix> Altreus: And it just gives me more confidence that my code isn't broken
[18:54:36] <aquanight> usually starting with the bare minimum needed to make the test pass
[18:54:46] <aquanight> then you leave you to figure out how to improve upon that without breaking the test
[18:55:02] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 252 seconds)
[18:55:48] <aquanight> if it comes to general quality and stuff, just writing test cases in the first place will do good for that. The main difference of TDD/DDD/BDD is "when" you write the tests.
[18:55:55] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:55:57] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[18:56:18] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca)
[18:56:33] <krismatrix> Right..i think it's just that if I doing that for a simple function that does some mathematical computation ..that is easy. But with web dev, which has a mixture of things going on. I usually need to build and experiment and get it working before I am able to write tests.
[18:56:38] <thrig> not sure you should use "when" in Perl
[18:57:14] * GumbyPAN CPAN Upload: Catmandu-1.2019 by NICS https://metacpan.org/release/NICS/Catmandu-1.2019
[18:58:19] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:58:46] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:59:12] *** Joins: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi)
[19:03:37] *** Quits: mattil (~mattil@dy6k-b7-g7hby2-8hs6dt-4.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[19:06:25] <Altreus> krismatrix: That's what integration tests are for - and also proper encapsulation
[19:06:34] <aquanight> LeoNerd: so random thought. I hear all the time that @_ is the biggest reason 'entersub' sucks, right? So I'm thinking: { my sub thing { ... }; thing qw(some random args here); } vs { my @args = qw(some random args here); ... } how much of a difference is there here? is evaluating arguments into lexical @array any better than dealing with @_?
[19:06:48] <Altreus> If your system isn't too heavily coupled you can replace parts of it later, and if you have integration tests then you're testing that they work together correctly
[19:07:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:07:28] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[19:07:37] <aquanight> (context: I've got my self thinking about an :inline again and thinking about what to do with situations where the inlined code still need something @_-like - could I conceivably redirect it to a lexical @array and still save something?)
[19:10:03] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[19:10:14] *** Joins: gast0n (~g4570n@user/gast0n)
[19:16:00] <KeepCoding> ilmari: Hey, so I made the changes as you advized me to, but that didn't seem to make any differences, the only two things are that now in the error I get a different port number every time and, now I also get this error: "Your DB is currently unversioned. Please call upgrade on your schema to sync the DB."
[19:16:10] <KeepCoding> Any thoughts? 
[19:18:17] <KeepCoding> I can't really call ->upgrade() because this "warning" (or whatever that is) is triggered by ->connect().
[19:20:09] <ilmari> KeepCoding: please show a complete minimal test case, and the full output
[19:21:59] <ilmari> also, are you using DBIx::Class::Schema::Versioned, or ::DeploymentHandler?
[19:26:28] *** Quits: FatalNIX (~fatalnix@user/fatalnix) (Quit: Lost terminal)
[19:27:50] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:29:40] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[19:31:09] <LeoNerd> aquanight: I've read that four times now and I can't actually work out what the question is
[19:32:56] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[19:33:28] <simcop2387> 6c:cf:39:00:00:c3
[19:34:08] <KeepCoding> ilmari: sure, can I send files here?
[19:34:18] <ilmari> KeepCoding: use the paste link in the channel topic
[19:35:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[19:35:22] <KeepCoding> https://l.perl.bot/raw/ceh693
[19:36:00] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:698f:94dd:b270:5a5c)
[19:41:19] * GumbyPAN CPAN Upload: Math-Pari-2.03052004 by ILYAZ https://metacpan.org/release/ILYAZ/Math-Pari-2.03052004
[19:46:32] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[19:48:04] *** Joins: Trigon (~reuben@144.39.114.115)
[19:48:38] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[19:49:11] *** Quits: rewt (~default@user/rewt) (Ping timeout: 256 seconds)
[19:49:55] *** Joins: fling (~fling@user/fling)
[19:50:00] *** Joins: rewt (~default@user/rewt)
[19:50:44] *** Joins: randir (~randir@95-25-111-216.broadband.corbina.ru)
[19:52:09] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[19:54:37] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 256 seconds)
[19:55:00] <KeepCoding> ilmari: did you had time to look over? :D
[19:58:47] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[20:01:55] *** Joins: e1f (~user@141.117.1.162)
[20:02:16] *** Quits: e1f (~user@141.117.1.162) (Changing host)
[20:02:16] *** Joins: e1f (~user@user/e1f)
[20:07:11] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[20:08:53] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[20:11:49] *** Quits: krismatrix (~krismatri@2601:19b:4600:9370:42c3:b860:e6a9:6b65) (Quit: Leaving)
[20:17:09] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[20:17:11] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[20:17:19] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[20:24:59] <KeepCoding> https://l.perl.bot/p/1hrrwj
[20:24:59] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[20:25:51] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[20:26:22] *** Joins: hodbogi (~fatalnix@user/fatalnix)
[20:27:37] *** Quits: ccntrq (~Thunderbi@2a01:c23:9138:6500:9d51:645d:5278:c792) (Remote host closed the connection)
[20:28:55] <hodbogi> It seems like Parse::RecDescent no longer seems to support catching newlines with rules in the form of 'foo : bar newline' where newline might be 'newline : "\n"' or 'newline: /\n/', etc. I even went to the old faq at https://metacpan.org/pod/Parse::RecDescent::FAQ::Original#NEWLINE-PROCESSING and those examples do not appear to work anymore. I can handle newlines if I smoosh it together in a match say, 
[20:28:55] <Paperbot> Link title(s): [ Parse::RecDescent::FAQ::Original - the original, official, authorized FAQ for Parse::RecDescent. ... ]
[20:29:01] <hodbogi> 'line : /blah\n/' it will work fine. I just can't seem to find any information in the current documentation that says anything about this. Does anyone use Parse::RecDescent anymore?
[20:29:41] <choroba> I switched to Marpa::R2 where possible
[20:29:47] <LeoNerd> I found PRD to be really hard to work out how to use, or get debug information out of, or anything. I basically ended up making my own idea, Parser::MGC
[20:29:52] <LeoNerd> Which I use for a bunch of stuff now
[20:31:07] *** Quits: japh (~scp1@user/japh) (Ping timeout: 256 seconds)
[20:31:29] *** Joins: KnoP_ (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[20:32:42] *** Joins: japh (~scp1@user/japh)
[20:33:05] *** Quits: KnoP_ (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Client Quit)
[20:34:03] <hodbogi> Huh. Looking at MGC, so instead of yacc style, you define functions that are kind of used like recursive building callbacks?
[20:34:28] <LeoNerd> Yes
[20:34:36] *** Quits: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[20:34:44] <hodbogi> What kind of genius makes this kind of shit
[20:34:46] <LeoNerd> The perl code is still in ultimate control, so you can easily debug by putting print statements in, or control conditional things with perl logic, or whatever else
[20:35:09] <hodbogi> This would have been so much better decades ago
[20:35:12] <LeoNerd> I find I much prefer that, than handing over the whole grammar in one giant monolithic lump to some non-perl code
[20:35:21] <LeoNerd> Yes well sorry about that ;) I can only work so fast...
[20:35:26] <hodbogi> hahaha
[20:35:34] <choroba> Marpa::R2 provides both interfaces
[20:36:01] <choroba> or rather either the grammar, or methods that describe the rules.
[20:36:36] <hodbogi> Actually, I really think this will work better, because since these are subroutines, I could theretically make the parser into a finite state machine...
[20:36:48] <hodbogi> which means I can have multiple parse modes with a single set of parsing subs
[20:38:30] <hodbogi> Perhaps I could also use it to make the parser incremental too, so that it doesn't parse the entire file at once.
[20:38:46] <hodbogi> No need to parse over 1MB of data and then postprocess it
[20:43:03] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Read error: Connection reset by peer)
[20:44:17] *** Joins: magla (~gelignite@d5363125.access.ecotel.net)
[20:44:29] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[20:44:42] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[20:44:52] <hodbogi> I knew this CPAN user looked familar. I have used IO::Async and Future beforewe well as some others heh
[20:45:38] <xenu> he's just some nerd
[20:54:07] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[20:54:13] <hodbogi> Huh. I've seen people do things like local $/ = undef; <foo>, but what's the purpose of local $/; <foo> ?
[20:54:40] <kjetilho> it unsets the line ending, so the whole file is slurped.
[20:54:47] <hodbogi> ohhhh
[20:55:09] <hodbogi> so by localizing it you're just redefining it in local schope with undef, so it's the same thing
[20:55:16] <hodbogi> I didn't know you could do that
[20:55:51] <hodbogi> I usually type local $/ = undef to do that but apparently that's a waste of typing XD
[20:58:34] *** Quits: KeepCoding (~KeepCodin@188.27.132.38) (Remote host closed the connection)
[20:58:38] *** Quits: jpn (~jpn@user/jpn) (Quit: Lost terminal)
[21:00:04] *** Joins: jpn (~jpn@user/jpn)
[21:01:23] *** Joins: diskin_ (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[21:01:23] *** Quits: diskin (~diskin@5.139.76.74) (Killed (iridium.libera.chat (Nickname regained by services)))
[21:01:23] *** diskin_ is now known as diskin
[21:01:45] <vague> You'd typically do "my $data = do { local $/ = undef; <STDIN> };"
[21:03:06] <kjetilho> hodbogi: oh right.  yeah.  but we don't golf in work hours, do we?
[21:03:17] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[21:04:09] *** Joins: Pali (~pali@user/pali)
[21:04:53] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[21:05:04] *** Joins: jpn (~jpn@user/jpn)
[21:05:14] <hodbogi> hahaha
[21:06:09] <hodbogi> It's been too long since I have been able to use Perl on the job.
[21:06:22] <hodbogi> I am a Java programmer for work these days, and the more I use it the more I hate it.
[21:06:59] *** Joins: Trigon (~reuben@144.39.114.115)
[21:09:15] <kjetilho> my condolences
[21:09:42] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[21:11:29] * GumbyPAN CPAN Upload: Sentry-SDK-v1.0.19 by PMB https://metacpan.org/release/PMB/Sentry-SDK-v1.0.19
[21:11:49] <hodbogi> It's really not that big of a deal until you deal with coworkers that don't comment, don't test anything outside of their IDE, and don't .. yeah- those aren't Java problem I guess.
[21:13:30] <kjetilho> git commit -am "new fix"
[21:14:47] *** Joins: XV8 (~XV8@2601:5cb:c001:50:f138:1e1a:7095:9508)
[21:15:05] <ilmari> vague: or use one of the many slurping modules
[21:15:07] <ilmari> ??slurping
[21:15:11] <ilmari> perlbot: slurping?
[21:15:12] <perlbot> ilmari: see File::Slurper, File::Slurp::Tiny, or Path::Tiny::path($filename)->slurp
[21:15:13] <jdv> is it cause java devs are a dime a dozen so the likelihood you get high quality devs is lower?
[21:15:31] <hodbogi> ha
[21:15:38] <hodbogi> I've never heard that one and I love it
[21:16:03] <jdv> seems that way in the php world where ive been for a few years
[21:16:54] <kjetilho> ilmari: please don't make Perl the new node.
[21:17:14] <kjetilho> what's next?  Integer::Increment so you don't have to use the ugly "++" operator?
[21:17:23] <hodbogi> I am so glad I left PHP when I did. I have no idea what it's like now but I worked as a PHP 5 developer and there were a lot of really weird ass functions for fixing syntactical shortcomings of PHP and crap that made me want to scream
[21:17:32] <ilmari> kjetilho: each of those modules serve a purpose and have more functionality than just do{ $/; <$fh> }
[21:18:04] <ilmari> kjetilho: including encoding handling, line splitting, writing, etc...
[21:18:29] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[21:18:35] <hodbogi> don't forget, Devel::UseStrictAndWarnings;
[21:18:44] <jdv> well, nowadays "php" is almost as if php and java had a baby.  they just piled on java crazy oo on top.  its crazy.
[21:19:10] <simcop2387> jdv: just using \ as the module/namespace separator is enough for me to go "nuke it from orbit"
[21:19:33] <hodbogi> You'll probably want to nuke what I am making from orbit
[21:19:47] <jdv> hahaha
[21:19:48] <hodbogi> I am making an 'actually works' BDF font parser
[21:20:23] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:22:02] <hodbogi> What's more is that, I extended BDF to a new proptosed XML XS spec called XBDF, which is BDF in XML, with a new x-proprties node for handling things like sprite pallettes and soundfont connections to be converted to assembly for tile based systems like the Gameboy.
[21:22:34] <hodbogi> I am not kidding when I said that I am evil.
[21:23:22] <kjetilho> hmm.  wasn't there an XPM based font format already?
[21:23:29] <hodbogi> Yeah...
[21:23:58] <hodbogi> Xorg has used both BDF and XPM for I dunno how long
[21:26:48] <hodbogi> XPM isn't actually XML though, not that that's a bad thing
[21:27:00] <hodbogi> I'd say it's more scary than BDF
[21:28:38] *** choroba is now known as choroba_
[21:28:43] <hodbogi> To see what I mean, check out teapot.xpm on https://people.math.sc.edu/Burkardt/data/xpm/xpm.html
[21:28:44] <Paperbot> Link title(s): [ XPM Files ]
[21:28:48] <hodbogi> the contents are uh.. terrifyingh
[21:29:01] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:29:13] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[21:29:46] <kjetilho> hodbogi: terrifying?!  its BEAUTIFUL!
[21:29:49] <rindolf> hodbogi: Cool, good luck
[21:33:37] *** Quits: japh (~scp1@user/japh) (Ping timeout: 240 seconds)
[21:34:22] *** Quits: wingfold (~wingfold@173.38.117.76) (Quit: Connection closed)
[21:35:46] *** Joins: japh (~scp1@user/japh)
[21:37:51] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[21:37:58] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:41:55] *** Quits: art1 (~romeyke@p200300ccdf032b00974cd1c149e2cee5.dip0.t-ipconnect.de) (Quit: Leaving.)
[21:42:31] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[21:46:17] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:49:35] <xq> xpm is a great format
[21:55:26] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[21:56:34] * GumbyPAN CPAN Upload: Bible-Reference-1.11 by GRYPHON https://metacpan.org/release/GRYPHON/Bible-Reference-1.11
[22:02:02] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[22:03:46] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:03:47] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[22:06:41] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[22:18:35] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.4.1)
[22:20:16] *** Joins: k8yun (~k8yun@user/k8yun)
[22:20:35] *** Joins: magla (~gelignite@d5363125.access.ecotel.net)
[22:27:38] *** Joins: Tempesta (~Tempesta@user/tempesta)
[22:28:24] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[22:32:08] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[22:33:21] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:35:38] *** Quits: proller (~p@2a02:6b8:b081:7208::1:24) (Ping timeout: 260 seconds)
[22:44:46] *** Joins: jpn (~jpn@user/jpn)
[22:53:55] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[22:57:05] *** Joins: R2robot_ (~R2robot@user/r2robot)
[22:57:48] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 240 seconds)
[23:04:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:16:22] *** Joins: proller (~p@2a02:6b8:b081:20::1:21)
[23:17:17] *** Joins: KeepCoding (~KeepCodin@188.27.132.38)
[23:18:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[23:20:53] <KeepCoding> Hello! I'm working in a Mojolicious project with PostgreSQL, and I was wondering if somebody can explain to me what does the "deploy" and "upgrade" function do.
[23:22:12] <KeepCoding> For example, there is a line where a "schema" variable is initialized with "SuperSecret::Schema->connect($pgsql->dsn)", and then "$schem->deploy()"
[23:22:50] <KeepCoding> But if the DB is unversioned, is "$schema->upgrade()". What is the difference?
[23:23:26] <Grinnz> that looks like DBIx::Class? not related to mojo or postgres
[23:23:51] <Grinnz> works fine with mojo, just make sure you're asking about the right thing :P
[23:24:18] <KeepCoding> yeah, it is working fine, but that was not my question
[23:24:28] <Grinnz> are you talking about DBIx::Class?
[23:24:34] <KeepCoding> yes
[23:26:18] *** Joins: martinus__ (~martin@201.28.201.77.rev.sfr.net)
[23:28:30] <simcop2387> KeepCoding: here's the docs for deploy, https://metacpan.org/pod/DBIx::Class::Schema#deploy essentially it tries to generate SQL that will create all the tables you told it about in your schema and go create them.
[23:28:39] <Paperbot> Link title(s): [ DBIx::Class::Schema - composable schemas - metacpan.org ]
[23:29:16] <simcop2387> upgrade is similar (though i don't know much about it's versioning) where it'll look for what changes are needed to go from one version of the schema to the next.  this way you can have your application keep the database having the correct schema for the version you are running
[23:30:16] <simcop2387> https://metacpan.org/pod/DBIx::Class::Schema::Versioned is the docs for how all that works
[23:30:17] <Paperbot> Link title(s): [ DBIx::Class::Schema::Versioned - DBIx::Class::Schema plugin for Schema upgrades - metacpan.org ]
[23:30:30] <simcop2387> including how to make it start from an unversioned schema and migrate to the versioned one
[23:31:37] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[23:32:04] <KeepCoding> simcop2387: Thank you, this was exactly what I needed 🙏
[23:34:35] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[23:36:59] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[23:38:17] *** Joins: jpn (~jpn@user/jpn)
[23:45:10] *** Joins: anthk_ (~anthk_@113.85-85-9.dynamic.clientes.euskaltel.es)
[23:50:12] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[23:51:09] *** Joins: wingfold (~wingfold@173.38.117.90)
[23:52:36] *** Joins: jpn_ (~jpn@user/jpn)
[23:54:32] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 240 seconds)
[23:55:16] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
