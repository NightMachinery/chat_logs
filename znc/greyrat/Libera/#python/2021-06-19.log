[00:00:48] <Akuli> Adoi, so what is a Car's vehicle_type supposed to be?
[00:00:55] <tunixman> Oh yeah I think there's an issue with the parsing fro the Car. It needs another argument, or we need one less argument for car.
[00:00:56] <Akuli> is it always the string "car"? if it is, why is it needed?
[00:00:59] <hexnewbie> Akuli: Thank you very much. I successfully extracted all information I need with strict=False.
[00:01:08] <Akuli> hexnewbie, yeah that's it
[00:01:26] <Adoi> Akuli, so maybe I shouldnt add vehicle_type to the __init__ args?
[00:01:30] <Akuli> right
[00:01:54] <Akuli> the error was that it's not getting enough arguments, and the solution is to not make it need an unnecessary argument
[00:02:27] <Akuli> hexnewbie, this code parses editorconfig files, which are basically configparser-parseable but with many gotchas :D
[00:02:31] <RougeR> heya
[00:02:46] <RougeR> is there a way to get the sort of functionality that ive just mocked out here: https://dpaste.org/hT9Z
[00:04:08] <RougeR> basically want to be be able to call Tenant.user.where(integration='foo', name=bar, enabled=True)
[00:04:18] <tunixman> t Akuli See if this helps, it might at least give you some more ideas on what's happening https://www.pastebin.cz/en/p/2QKfvy7
[00:04:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:04:27] <tunixman> t Adoi See if this helps, it might at least give you some more ideas on what's happening https://www.pastebin.cz/en/p/2QKfvy7
[00:04:30] <tunixman> sorry Akuli
[00:04:35] <Akuli> :)
[00:04:40] <RougeR> I could make a user Wrapper class i think
[00:05:06] <RougeR> but i wondered if there was any way of doing this nicer
[00:05:37] <Akuli> RougeR, are you going to have lots of things like this?
[00:05:42] <Adoi> when I removed vehicle_type, and changed the code accordingly, now it will work after I correct another error unrelated to classes
[00:05:47] <Akuli> RougeR, so that you can do Tenant.admin.where(integration='foo') as well?
[00:05:59] <Akuli> with as little copy/pasta between user and admin as possible?
[00:06:01] <RougeR> Akuli, not at the moment...but its a pattern i find myself wanting fairly regularly
[00:06:06] <RougeR> so yeah it would be nice i guess
[00:06:30] <Akuli> in class Tenant, i would put "user = SomeCustomClass()" (and "admin = SomeCustomClass()")
[00:06:47] <Akuli> the class can implement __get__ which will be called when you do Tenant.user
[00:06:59] <RougeR> yeah that was the sort of conslusion i came to
[00:07:02] <RougeR> forgot about _get__ though
[00:07:14] <Akuli> as usual, this is really only useful in huge libraries :D
[00:07:27] <RougeR> Im basically using pynamodb in a bad way
[00:07:45] <RougeR> because i hate dynamodb and im making it behave in a relational way to fit my needs on occasion
[00:07:57] <Adoi> tunixman, looks like it works when "vehicle_type" is removed from the code, I will paste it shortly when I fix anoher error
[00:08:03] <RougeR> but this sort of pattern is something ive found myself wanting for other things as well
[00:08:09] <RougeR> i.e APIclient classes
[00:08:12] *** Quits: jack__d_ (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Quit: leaving)
[00:08:31] *** Quits: jkl (~jkl@12.216.111.80) (Ping timeout: 268 seconds)
[00:08:50] <RougeR> where you would have different resources and rather than init them all you just call say chargify_client.subscriptions.users.create
[00:08:59] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[00:09:19] *** Joins: mborus (~mborus@2001:16b8:6f9d:4b00:1866:4757:6df4:7ed0)
[00:09:26] <RougeR> rather than chargify_client.create_user_subscrptions and without having to init all the classes in the chargify_client base class
[00:09:26] *** Parts: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) ()
[00:11:48] *** Quits: chrysanthematic (~chrysanth@109.70.150.245) (Quit: chrysanthematic)
[00:12:44] *** Joins: audiocat (~audio@2603-8081-1800-0062-0dee-d686-c170-63c0.res6.spectrum.com)
[00:13:05] *** Quits: Thanatos (~Thanatos@197.210.44.249) (Read error: Connection reset by peer)
[00:13:11] <Adoi> Akuli, tunixman, graingert, this one works; https://www.pastebin.cz/raw/krTcPia
[00:13:15] <teut> https://bpa.st/VI3Q  how to improve the code quality?
[00:13:38] *** Joins: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net)
[00:13:47] <graingert> Adoi: you should use `__str__` imho
[00:13:53] <graingert> rather than repr
[00:15:07] <Adoi> graingert, in order to avoid string conversions?
[00:15:09] <RougeR> @Akuli, do you mean __getattr_
[00:15:11] <RougeR> not __get__
[00:15:19] <RougeR> ive used the __get__ pattern before
[00:15:20] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:15:29] <Akuli> those are different
[00:15:43] <RougeR> i know, i was just asking
[00:15:44] <Akuli> if you have "user = Bar()" inside "class Foo", use Bar.__get__
[00:15:55] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:15:56] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:15:57] <RougeR> __getattr___ is like rubys method_missing
[00:16:01] <tunixman> t Adoi that looks really good.
[00:16:13] <graingert> Adoi: it's idiomatic to use `__str__` for a formal string representation and `__repr__` for debug info
[00:16:15] *** Joins: jinsun (~quassel@user/jinsun)
[00:16:19] <RougeR> i dont see how __get__ gets me what i want
[00:16:22] <Akuli> __get__ is powerful enough for this, and __getattr__ is unnecessarily powerful (and messes up __dir__)
[00:16:31] <Adoi> graingert, just saw that with __str__ I still need the string conversions
[00:16:37] <RougeR> __get__ doesnt have arguments with it does it?
[00:16:42] <Akuli> RougeR, make a __get__ method that prints all arguments and returns "Lol"
[00:16:48] <graingert> Adoi: which string conversions?
[00:16:49] <Akuli> then try print(TheClass.user)
[00:16:52] *** Joins: Thanatos (~Thanatos@197.210.44.249)
[00:16:57] <RougeR> oh wait so __get__ does take args
[00:17:00] *** Joins: wyclif (~wyclif@user/wyclif)
[00:17:01] <Akuli> it will call __get__
[00:17:08] <Akuli> which isn't what you would expect :D
[00:17:11] <Akuli> but it will call __get__
[00:17:13] <Adoi> graingert, the two lines just underneath the repr line
[00:17:23] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[00:17:36] <Adoi> I first wondered if using str would have such a benefit
[00:17:36] <RougeR> this is the pattern ive used with __getattr__ before
[00:17:37] <RougeR> https://dpaste.org/tm4S
[00:17:41] <graingert> Adoi: ah you should absolutely not mutate your class in `__repr__`
[00:17:45] *** Quits: Thanatos (~Thanatos@197.210.44.249) (Read error: Connection reset by peer)
[00:17:58] <graingert> Adoi: use         return f"car with the maximum speed of {self.max_speed}{self.speed_unit}"
[00:18:11] <Adoi> oh ok
[00:19:45] *** Quits: hntrmrrs (uid49@id-49.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[00:19:54] <Akuli> RougeR, this is the pattern i had in mind https://dpaste.com/8QZUYCNDL
[00:19:56] <RougeR> ali1234,
[00:19:59] <RougeR> Akuli,
[00:19:59] <RougeR> https://dpaste.org/1i1G
[00:20:13] <RougeR> yeah so __get__ wont work with what i showed
[00:20:17] <RougeR> guna look at your paste
[00:20:32] <RougeR> oh works with args
[00:20:40] <Akuli> if you used __getattr__ with my thing, it would go in class Bar
[00:20:43] <Akuli> but __get__ goes in class Foo
[00:20:53] <graingert> I'd write these classes like this: https://www.irccloud.com/pastebin/ev6IYm6G/Adoi.py
[00:21:32] <Akuli> replace attrs with dataclasses and it's stdlib :D
[00:21:34] * Akuli is sorry
[00:21:43] <Adoi> graingert, somehow it gives error but I will figure it
[00:21:55] <graingert> Adoi: which error, remember I can't see your screen
[00:21:58] <RougeR> Akuli, i think i see how that works
[00:22:13] <RougeR> i feel adding the implementation to a wrapper class is better though
[00:22:15] <Adoi> probably some typo.."SyntaxError: EOL while scanning string literal"
[00:22:22] <Akuli> RougeR, the first arg of __get__ is None when called from Bar.foo, non-None when called from instance_of_bar.foo
[00:22:30] <Adoi> graingert
[00:22:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[00:22:32] <Adoi> ^
[00:22:39] <graingert> Adoi: try running it in python3.10 it usually gives youa better error
[00:22:43] <graingert> Adoi: also show the full Traceback
[00:22:49] *** Quits: acresearch (~acresearc@user/acresearch) (Ping timeout: 268 seconds)
[00:23:03] <Akuli> RougeR, so if you don't want to make these attributes available in instances of Bar, you can raise AttributeError
[00:23:04] <Adoi> oh, no worries. I will find it out easier than upgrading python :)
[00:23:35] <Akuli> RougeR, imo it would be better to use __get__ than __getattr__
[00:23:48] <Akuli> i have worked with broken __getattr__ methods before and i hate them
[00:23:55] <graingert> Adoi: you might like https://aroberge.github.io/friendly-traceback-docs/docs/html/
[00:24:12] <Akuli> RougeR, by "broken", i mean "if you forget to call super().__init__ you get infinite recursion"
[00:24:13] <graingert> Adoi: it also gives better SyntaxError messages
[00:24:14] *** A_Dragon is now known as AAAAAA_Dragon
[00:24:24] <Akuli> which is not at all obvious if you look at the broken __getattr__ method
[00:24:34] <Akuli> it's just harder to do __getattr__ correctly
[00:25:02] <RougeR> Akuli, ah i should also note the library these classes inherit from liberally abuse __get__
[00:25:24] <Akuli> Foo doesn't have to inherit?
[00:25:37] <Akuli> the return value of Foo.__get__ doesn't have to be an instance of Foo
[00:25:38] <Akuli> it can be anything
[00:25:40] <RougeR> Akuli, i might be getting confused
[00:25:59] <RougeR> ill brb shortly
[00:26:03] <Akuli> in my example, Bar.lol comes out as a string, even though we set "user = Foo()"
[00:26:04] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[00:26:08] <RougeR> i think ive been looking at code to  long
[00:26:12] <Akuli> :)
[00:26:14] <RougeR> its 9pm, started at work at 9am...
[00:26:17] <Akuli> :D
[00:26:18] <RougeR> not really stopped
[00:26:37] <RougeR> ill have a look at your example again when im back, will try to ping
[00:26:46] <RougeR> thanks  for your help, ill try to make it work with my code
[00:27:13] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[00:27:23] *** Joins: chrysanthematic (~chrysanth@89.38.69.171)
[00:27:58] <Adoi> graingert, thank you, I will view it...it works now; https://www.pastebin.cz/raw/hoFugAH
[00:28:20] <graingert> Adoi: don't use `%` prefer `f"`
[00:28:45] <graingert> Adoi: also return is not a function - you don't need to give it parenthesis
[00:28:56] *** Joins: acresearch (~acresearc@user/acresearch)
[00:29:04] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[00:29:04] *** Quits: dulanic (~dulanic@47.187.147.69) (Read error: Connection reset by peer)
[00:29:22] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[00:30:19] *** Joins: tkazi (~tkazi@user/tkazi)
[00:30:27] *** Joins: Lunatrius (~Lunatrius@77.38.22.128)
[00:30:47] *** Quits: ewdwasright (~ewdwasrig@108.210.81.181) (Quit: Leaving)
[00:30:50] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[00:31:01] <graingert> Adoi: and you should be using `__str__` not `__repr__`
[00:31:17] *** Joins: dulanic (~dulanic@47.187.147.69)
[00:32:15] <Adoi> why to prefer str?
[00:32:17] *** Joins: ndegruchy (~nathan@156.55.174.130)
[00:32:23] <Adoi> and also why f?
[00:32:42] <teut> Uploaded file: https://uploads.kiwiirc.com/files/9db84d4074b7069f5811382ca680f371/image.png
[00:32:45] <grym> Adoi: f-strings are faster and easier to read
[00:32:48] <teut> very strange error  here
[00:32:58] *** Quits: sintax (~sintax@4.4.61.62) (Quit: WeeChat 2.8)
[00:33:01] *** Quits: chrysanthematic (~chrysanth@89.38.69.171) (Changing host)
[00:33:01] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:33:15] *** Quits: jftsang (~jftsang@87.114.69.72) (Quit: Client closed)
[00:33:17] *** Joins: wyclif (~wyclif@user/wyclif)
[00:33:17] <graingert> Adoi: `__repr__` should return something like "Car(max_speed=1, speed_unit='grams')"
[00:33:18] <teut> suddenly as I jumped to this current line from previous  users_pks  got  empty , any logic?
[00:33:23] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[00:33:34] <graingert> Adoi: `__repr__` is for debugging and logging
[00:33:52] <graingert> Adoi: `__str__` is for printing to a user
[00:34:03] <Adoi> s#####
[00:34:09] <Adoi> oops
[00:34:25] <Adoi> I see
[00:34:48] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:34:49] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:34:51] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:35:04] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:35:47] <graingert> Adoi: you can automatically fix your %s strings with `pyupgrade --py39-plus` or whatever python version you're using
[00:36:15] * tunixman goes down the pyupgrade rabbithole 
[00:36:23] <tunixman> t graingert thanks, I had no idea it existed :)
[00:36:27] *** Quits: mekhami (~lawrence@135.84.115.18) (Quit: WeeChat 2.8)
[00:36:35] <graingert> tunixman: pyupgrade is great
[00:36:44] *** Joins: odinsbane (~mbs@pat-pool-138.crick.ac.uk)
[00:36:51] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (Client Quit)
[00:37:09] <graingert> tunixman: see https://adamj.eu/tech/2021/05/15/python-type-hints-future-annotations/#adding-to-all-files
[00:38:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[00:38:34] *** Joins: Biganon (~biganon@mx.pive.ch)
[00:38:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[00:39:16] *** Quits: bookworm (~bookworm@neomutt/bookworm) ()
[00:39:44] <Biganon> Hi; I'm trying to parse a csv file using the csv module, but my csv file contains some strings that are quoted, and some that aren't (those that are just 1 word). The latter end up split as their respective characters, ['H'], ['e'], ['y'], etc.
[00:40:45] *** Joins: khs9ne (~xxwa@khs9ne.mempool.co)
[00:41:38] <khs9ne> hello. regarding multiprocessing, I'm having issue on performances coordinating processes with Pipe from a threadpool into an asyncio app, this is the code: https://paste.ofcode.org/gN4WuAabxUB2YQ4z82cH2G
[00:41:48] <tunixman> that's excellent. I had exactly that issue at one point graingert
[00:41:57] <khs9ne> it took about 10 seconds to run the run() coroutine :|
[00:42:04] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:42:38] <jinsun> teut: chain gives an iterator which can only be looped over once, which is done when your debugger calls list
[00:42:48] <khs9ne> any hint on what is going on? performances on pipes report on 300k messages\s... https://stackoverflow.com/questions/8463008/multiprocessing-pipe-vs-queue
[00:43:12] *** Joins: Polyblank (~Polyblank@user/polyblank)
[00:43:15] <teut> yes, noticed it after posting here, but there is a confusion still
[00:43:29] <Biganon> even `list(csv.reader("id,name,email,age,designation"))` returns each letter individually
[00:43:35] <teut> so the iterator was made in the line   with     ` user_pks = `
[00:44:01] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[00:44:07] <grym> Biganon: post your code? csv.reader doesn't consume strings, it consumes file-like objects
[00:44:12] <teut> I moved to next line when it was being passed as parameter , and in the constructor I didnt convert it to list
[00:44:24] <grym> Biganon: bpa.st/+python
[00:44:41] <teut> then I did   list(user_pks)  in the debugger  left side, so still , why empty?
[00:44:45] <Biganon> grym: oh, ok. It's what I found just now on https://stackoverflow.com/questions/31225128/csv-reader-is-separating-values-by-individual-character, too
[00:44:53] <teut> I didnt exhaust it even once
[00:44:54] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[00:45:01] <WhyNotHugo> Running `pip install -U pip setuptools wheel` downloads and builds dozens of versions of `pip` until `/tmp` is full. Any idea what's going on?
[00:45:10] <teut> I just passed that iterator
[00:45:47] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[00:46:04] <Adoi> graingert, so the final cut; https://www.pastebin.cz/raw/DZpZeTt
[00:46:37] <graingert> Adoi: sure, but I'd use @attr.frozen to make those classes
[00:46:42] <Akuli> WhyNotHugo, maybe update pip first, then everything else?
[00:47:02] <graingert> Adoi: you could also use @dataclasses.dataclass but attrs is better
[00:47:26] <WhyNotHugo> `pip install -U pip` also starts downloading all versions of `pip` and building them.
[00:47:29] <Adoi> graingert, I am not there yet. the current one does just fine after my original code :)
[00:47:43] <nisstyre> WhyNotHugo: that happens for pretty much any package now
[00:47:50] *** Joins: thiras (~thiras@user/thiras)
[00:47:51] <Adoi> but thank you very much, thank you all!
[00:48:09] <WhyNotHugo> nisstyre: Is that a bug? It downloads all versions of everything until disk space runs out.
[00:48:18] <nisstyre> I don't think it builds them though, it just downloads them to get version info
[00:48:23] <nisstyre> WhyNotHugo: it is expected behaviour
[00:48:31] *** Quits: decimuscorvinus_ (~jimmy@136.37.105.112) (Read error: Connection reset by peer)
[00:48:33] <nisstyre> it won't download necessarily all versions though
[00:48:34] <graingert> WhyNotHugo: all versions of pip!?
[00:48:39] <nisstyre> and it won't necessarily happen for every package
[00:48:41] <WhyNotHugo> graingert: Yes
[00:48:42] <graingert> WhyNotHugo: show the terminal output
[00:48:44] <nisstyre> but the resolver will do that sometimes
[00:49:16] <WhyNotHugo> graingert: https://azusa.runners.sr.ht/logs/528170/setup/log
[00:49:21] <nisstyre> https://github.com/pypa/pip/issues/9215
[00:49:25] <nisstyre> WhyNotHugo: ^
[00:49:28] *** Joins: pnoud (~pnoud@user/pnoud)
[00:49:28] <WhyNotHugo> I'm running `pip install -U pip`and it's the same result.
[00:49:29] *** Joins: wyclif (~wyclif@user/wyclif)
[00:49:54] <grym> Biganon: https://bpa.st/BZGQ
[00:50:12] <graingert> that's very odd
[00:50:14] <nisstyre> WhyNotHugo: your question might be better in #pypa
[00:50:17] <graingert> it shouldn't try the tar.gz
[00:50:24] <WhyNotHugo> It downloads all versions up to `pip-0.2`, and then finally installs 21.1.2
[00:50:24] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[00:50:36] <randall> Hi everyone, I've got a group of friends we're learning Python with. We had a lively discussion about throwing exceptions, and if a program should catch known exceptions and present a more helpful error message to the user. I'd love to hear opinions about this.
[00:51:02] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[00:51:07] <graingert> WhyNotHugo: what happens if you do `python -m pip install --only-binary pip==21.1.2`
[00:51:40] *** Joins: dme86 (~dan@user/dan86)
[00:52:15] <jack__d> \n
[00:52:22] <graingert> \r
[00:52:40] <jack__d> \oops
[00:52:53] <Biganon> grym: I managed to make it work, thank you very much.
[00:53:51] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[00:54:23] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[00:54:54] *** Quits: trench (trench@user/trench) (Ping timeout: 244 seconds)
[00:56:03] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[00:56:44] <Akuli> randall, i would say this depends on what kind of program it is
[00:57:09] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[00:57:10] <Akuli> if it's meant to be invoked by a user from command-line, then yes, showing shorter error messages makes sense
[00:57:30] *** Joins: palasso (~palasso@user/palasso)
[00:57:34] *** Quits: marduk (~marduk@216.243.54.166) (Remote host closed the connection)
[00:57:54] <Akuli> if it's something that runs automatically every day at 5AM (for example), then it should just show all errors as verbosely as possible
[00:58:04] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.2)
[00:58:13] <mayhew> anyone know of a battle tested connection pool library similar to https://github.com/mperham/connection_pool for Ruby?
[00:58:14] <Akuli> so that when you go to work at 9am or whatever, you can look at logs and figure out why it failed
[01:01:06] *** Joins: marduk (~marduk@216.243.54.166)
[01:01:44] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[01:02:17] *** Quits: strobelight (~quassel@c-69-180-7-202.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[01:02:18] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[01:04:01] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[01:05:43] *** Joins: wattux (~wattux@2a02:810a:1140:4b6c::f428)
[01:06:52] *** Joins: cliluw (~cliluw@47.147.80.149)
[01:07:03] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 272 seconds)
[01:08:41] *** Joins: Vonter (~Vonter@user/vonter)
[01:09:07] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[01:09:18] *** Joins: feriman (~feriman@188.163.113.127)
[01:09:38] *** Joins: wyclif (~wyclif@user/wyclif)
[01:10:09] *** Quits: aslicedbanjo (~aslicedba@81.141.55.106) (Quit: Leaving.)
[01:11:16] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Remote host closed the connection)
[01:11:45] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[01:12:56] *** Quits: Polyblank (~Polyblank@user/polyblank) (Quit: Leaving)
[01:14:09] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[01:14:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[01:14:51] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[01:14:56] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[01:15:36] *** Quits: ras_manny (~ras_manny@196.24.141.56) (Quit: Textual IRC Client: www.textualapp.com)
[01:16:23] <Linkandzelda> how do i tell the difference between a dict key that doesnt exist and a dict key which does exist but is empty?
[01:16:37] <graingert> Linkandzelda: KeyError
[01:16:54] <Linkandzelda> graingert: ah, right. thanks
[01:17:15] <graingert> https://www.irccloud.com/pastebin/bdvcPFr2/keyerror.py
[01:17:18] <graingert> Linkandzelda: ^
[01:18:47] *** Quits: jack__d (~jack__d@pool-98-109-145-13.nwrknj.fios.verizon.net) (Quit: leaving)
[01:19:49] <raek> Linkandzelda: you can also check if the key is in the dict using "key in dict"
[01:20:03] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[01:20:26] <raek> it is also possible to lookup with a default value: dict.get(key, default)
[01:21:42] <graingert> but don't use `key in m` if you go on to retrieve the value - it's a waste of a lookup
[01:21:53] *** Joins: seednode (~seednode@user/seednode)
[01:22:50] <Linkandzelda> raek: thanks. i need to do 3 different things based on not set, empty, and has a value. i'll go the router of keyerror because it looks perfect
[01:23:24] <randall> Akuli: In this case it's a program used by people, and I was arguing that if it fails to read the config (e.g. due to syntax error or something) it should throw a helpful message instead of letting the config parser module die.
[01:23:39] <Akuli> yeah :D
[01:23:51] <Akuli> configparser module has its own helpful-ish error messages that include line numbers
[01:23:54] <Akuli> you could look into those
[01:24:12] <randall> Akuli: So, from the commandline, but it's used by us for now. And they threw a fit as I pointed that out during code review. :)
[01:24:35] *** Quits: wattux (~wattux@2a02:810a:1140:4b6c::f428) (Quit: Client closed)
[01:25:58] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:10] *** Quits: teut (~teut@182.69.85.39) (Quit: Connection closed)
[01:28:05] *** Joins: scadman (~scadman@cpc145252-maid8-2-0-cust473.20-1.cable.virginm.net)
[01:29:27] *** Joins: SebastianM (~seba@user/sebastianm)
[01:29:34] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[01:30:14] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.2)
[01:30:45] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[01:31:04] *** Quits: bla (~bla@89-67-84-220.dynamic.chello.pl) (Ping timeout: 244 seconds)
[01:31:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:31:48] *** Quits: mikkel (~mike@208.110.120.167) (Quit: leaving)
[01:35:18] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[01:35:45] *** Quits: asix (~Anders@user/asix) (Ping timeout: 272 seconds)
[01:37:33] *** Quits: esro (~esro@91.231.45.1) (Quit: Leaving)
[01:38:12] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[01:39:54] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 268 seconds)
[01:40:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 272 seconds)
[01:41:47] *** Joins: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net)
[01:42:50] *** Joins: wyclif (~wyclif@user/wyclif)
[01:42:57] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 244 seconds)
[01:44:33] *** Quits: magla (~gelignite@55d440eb.access.ecotel.net) (Quit: Stay safe!)
[01:45:22] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[01:46:19] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 272 seconds)
[01:47:21] *** Quits: mborus (~mborus@2001:16b8:6f9d:4b00:1866:4757:6df4:7ed0) (Quit: Client closed)
[01:48:04] *** Joins: asix (~Anders@user/asix)
[01:48:13] *** Quits: frostschutz (~frostschu@2a01:c22:d47d:1100:9b2c:2b59:1690:24fb) (Ping timeout: 272 seconds)
[01:48:18] *** Quits: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net) (Ping timeout: 264 seconds)
[01:48:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:48:35] <raek> Linkandzelda: what is the difference between "not set" and "empty"?
[01:49:40] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 244 seconds)
[01:51:02] <Linkandzelda> raek: not set is not set, and empty is set but contains None or an empty string, but not False or 0
[01:51:32] <raek> ah, gotcha
[01:51:45] <raek> set to a falsey value
[01:52:27] *** Joins: korg815 (~korg815@user/korg815)
[01:52:48] *** Quits: Thermoriax (denn@user/thermoriax) (Quit: WeeChat 3.1)
[01:52:48] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[01:53:07] <Linkandzelda> raek: i did it with graingert's example and works like a charm
[01:53:10] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Updating details, brb)
[01:53:19] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[01:53:23] <raek> you can even introduce a unique sentinel value for not set: not_set = object(); val = dict.get(key, not_set)
[01:54:17] <raek> though, graingert's approach is probably the most straight forward
[01:54:46] <val> please stop naming variables "val" :(
[01:54:57] <graingert> lol
[01:54:57] <raek> oops.. :-)
[01:55:02] *** Joins: trench (trench@user/trench)
[01:55:11] <val> I left #ocaml over this
[01:55:12] <graingert> constructing a whole new object is annoying
[01:55:17] <graingert> and won't work in mypy
[01:55:56] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 268 seconds)
[01:56:46] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[01:57:06] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[01:57:13] <Linkandzelda> raek: well the way the val is set right now is through a yaml file, but its a "one-time" value. you set it in config, program does an action and removes it to an empty string. so it knows not to do that action again unless i set the val again. if its not in the config, its an error
[01:57:19] <Linkandzelda> val: val
[01:57:41] <Linkandzelda> i purposesly wrote val instead of value, im sorry
[01:57:46] <tunixman> ...though I walk through the val of the shad...
[01:57:50] <val> oh god
[01:58:17] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[01:58:33] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[01:59:27] *** Joins: wyclif (~wyclif@user/wyclif)
[01:59:42] *** Quits: marnold (~matt@cpe-67-249-113-244.twcny.res.rr.com) (Ping timeout: 264 seconds)
[02:00:53] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[02:01:29] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Ping timeout: 268 seconds)
[02:03:50] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 268 seconds)
[02:03:56] *** Joins: Thermoriax2 (Thermoriax@user/thermoriax)
[02:04:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[02:07:09] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[02:08:50] *** Quits: gmcastil (~gmcastil@50-206-38-118-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[02:09:34] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[02:09:43] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[02:09:43] *** Joins: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl)
[02:09:52] *** Joins: anddt (~anddt@net-5-95-166-4.cust.vodafonedsl.it)
[02:09:55] *** Quits: thnee (~thnee@h-85-24-144-199.A328.priv.bahnhof.se) (Read error: Connection reset by peer)
[02:10:23] <anddt> andddt
[02:10:34] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[02:10:34] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[02:11:39] *** Thermoriax2 is now known as Thermoriax
[02:11:55] *** Joins: sadg (~odd@cpc113812-lea23-2-0-cust1375.6-3.cable.virginm.net)
[02:12:14] *** Quits: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153) (Ping timeout: 272 seconds)
[02:12:29] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 272 seconds)
[02:12:38] *** Joins: raek (~raek@2001:9b1:efe:3200:d250:99ff:fec0:e153)
[02:12:53] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:12:54] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: the ##end of the abyss)
[02:13:08] *** Joins: marnold (~matt@2603-7081-4642-8e00-f164-9ea0-ff20-b89b.res6.spectrum.com)
[02:13:19] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:14:07] *** Joins: s8n (~s8n@user/s8n)
[02:14:49] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 272 seconds)
[02:16:34] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[02:16:35] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[02:16:53] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:16:54] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[02:17:24] *** Joins: wyclif (~wyclif@user/wyclif)
[02:17:58] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[02:18:30] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Remote host closed the connection)
[02:18:33] *** Quits: stwange (~j@90.253.222.210) (Read error: Connection reset by peer)
[02:19:05] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[02:19:20] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Read error: Connection reset by peer)
[02:19:40] *** Joins: tspng (~tspng@80-218-192-246.dclient.hispeed.ch)
[02:21:15] *** Joins: cedric (~cedric@2a01:cb11:867:c200:7af0:a4fd:5769:a226)
[02:21:37] *** Quits: Guddu (~Guddu@117.222.86.252) (Read error: Connection reset by peer)
[02:22:08] *** Quits: tspng (~tspng@80-218-192-246.dclient.hispeed.ch) (Client Quit)
[02:22:30] *** Quits: elastic_dog (~elastic_d@ary207.neoplus.adsl.tpnet.pl) (Ping timeout: 264 seconds)
[02:22:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:23:06] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 264 seconds)
[02:23:57] *** Joins: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[02:24:06] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[02:26:11] *** Quits: p-i- (~Ohmu@node-62u.pool-118-173.dynamic.totinternet.net) (Read error: Connection reset by peer)
[02:26:11] *** Joins: jmcantrell (~weechat@86.106.143.110)
[02:27:12] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[02:27:16] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Ping timeout: 268 seconds)
[02:27:31] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[02:28:53] *** Joins: p-i- (~Ohmu@node-n33.pool-118-173.dynamic.totinternet.net)
[02:30:25] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:31:51] *** Joins: wyclif (~wyclif@user/wyclif)
[02:32:51] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:34:23] *** Joins: jazzy (~jaziz@2600:380:8739:55:6489:1a9b:3821:f21b)
[02:35:23] *** Quits: kmh (~kmh@p200300df5f1f6100f5ef16784219cf7c.dip0.t-ipconnect.de) (Quit: Leaving)
[02:35:39] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[02:36:31] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[02:36:44] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[02:38:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:40:27] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:42:04] *** Quits: jmcantrell (~weechat@86.106.143.110) (Ping timeout: 268 seconds)
[02:42:11] *** Quits: ^Cricket^ (~Cthulhu@static-72-76-136-147.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[02:42:41] *** Quits: ssbr_ (~ssbr@c-174-61-157-141.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[02:42:59] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[02:43:27] *** Joins: jmcantrell (~weechat@86.106.143.84)
[02:44:56] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[02:45:13] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[02:46:07] *** Joins: derelict (~derelict@user/derelict)
[02:46:49] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[02:47:26] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[02:48:20] *** Quits: shadoozo (~shadoozo@user/shadoozo) (Ping timeout: 272 seconds)
[02:50:18] *** Joins: pnoud (~pnoud@user/pnoud)
[02:50:38] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[02:51:07] *** Joins: iftheraincomes (~iftherain@2804:14d:5c54:8fc4:96eb:4f3:66f:c1de)
[02:51:13] *** Joins: moo (~moo@beware.of.the.ass.ninja)
[02:51:18] *** Parts: moo (~moo@beware.of.the.ass.ninja) (Leaving)
[02:51:28] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[02:51:47] *** Joins: wyclif (~wyclif@user/wyclif)
[02:51:51] *** Joins: pwnd_sfw9 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[02:51:54] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 240 seconds)
[02:52:18] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Ping timeout: 240 seconds)
[02:52:18] *** pwnd_sfw9 is now known as pwnd_sfw
[02:52:48] *** Quits: Akuli (~Akuli@87-94-111-238.bb.dnainternet.fi) (Quit: Leaving)
[02:53:01] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 272 seconds)
[02:53:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 264 seconds)
[02:53:27] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[02:55:06] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[02:55:38] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[02:55:54] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[02:56:23] *** Quits: sadg (~odd@cpc113812-lea23-2-0-cust1375.6-3.cable.virginm.net) (Quit: WeeChat 3.0.1)
[02:56:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:57:56] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[02:58:18] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[03:00:13] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[03:01:20] *** Quits: yangby (~secret@115.199.97.206) (Ping timeout: 245 seconds)
[03:01:23] *** Quits: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) (Quit: Leaving.)
[03:02:06] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[03:02:09] *** Joins: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net)
[03:02:10] *** Quits: Xano (~Xano@2a00:23c4:420c:d700:945f:9953:3d4c:e983) (Remote host closed the connection)
[03:02:28] *** Joins: Xano (~Xano@2a00:23c4:420c:d700:8a8e:97a4:2b81:4950)
[03:02:42] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[03:03:29] *** Joins: noarb (~noarb@user/noarb)
[03:04:17] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Client Quit)
[03:05:23] *** Quits: P1RATEZ (piratez@user/p1ratez) ()
[03:06:42] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 240 seconds)
[03:07:34] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:07:46] *** Joins: wyclif (~wyclif@user/wyclif)
[03:07:58] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Ping timeout: 268 seconds)
[03:09:29] *** Quits: rendar (~rendar@user/rendar) ()
[03:10:02] *** Quits: anddt (~anddt@net-5-95-166-4.cust.vodafonedsl.it) (Remote host closed the connection)
[03:11:07] *** Joins: heco (~redrum@user/redrum88)
[03:11:28] *** Joins: jabberwock (~lidless@user/jabberwock)
[03:12:01] *** Joins: shadoozo (~shadoozo@user/shadoozo)
[03:12:05] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[03:13:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:13:02] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[03:13:19] *** Quits: ndegruchy (~nathan@156.55.174.130) ()
[03:14:04] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[03:14:07] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:14:52] *** Quits: PublicWiFi (~PublicWiF@user/publicwifi) (Ping timeout: 268 seconds)
[03:14:53] *** Joins: masoudd_ (~masoudd@user/masoudd)
[03:16:36] *** Quits: ntdll_ (~ntdll@user/ntdll) (Ping timeout: 268 seconds)
[03:17:11] <sybariten> OK so i gave my school exercise modules (mentioned earlier tonight) a little polish, here's what i have now. It's still camel case though cause a lot of other files are....   https://termbin.com/9ayp     any suggestions on something else that sticks out and needs to be fixed?
[03:17:42] *** Quits: cedric (~cedric@2a01:cb11:867:c200:7af0:a4fd:5769:a226) (Quit: Konversation terminated!)
[03:18:19] <jabberwock> did you run it through a pep8 checker?
[03:18:21] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:18:40] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[03:18:41] <nedbat> sybariten: you have no code in your "if __main__" clause
[03:18:46] <sybariten> I'm specifically thinking of this decider function. The task is just to decide whether the incoming value is a string or an integer and choose the appropriate function, but is there a third datatype i should check for with an else clause, and what to do then? Or basically do i need to "catch errors" in a more mature way
[03:18:47] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 272 seconds)
[03:18:48] <grym> sybariten: if it's something you're going to import from other code only, you need neither the shebang nor the if main clause
[03:18:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:18:58] <sybariten> jabberwock: no not yet... thats not linting right?
[03:19:06] <jabberwock> it is linting yes
[03:19:12] <jabberwock> but pep8 is conventional
[03:19:42] <sybariten> nedbat: grym: no i know, the if main thing was mainly because someone else in the channel (personally) thought it was good behaviour to have it in all modules, as i understood it.
[03:19:50] <sybariten> I created it as a kind of silent thing
[03:20:05] *** Quits: shadoozo (~shadoozo@user/shadoozo) (Ping timeout: 244 seconds)
[03:20:07] <nedbat> sybariten: there's no point if it doesn't do anything
[03:20:08] <ali1234> shouldnt it say if __name__ == ...
[03:20:19] <nedbat> sybariten: that too ^
[03:20:30] <sybariten> ooops
[03:20:30] <nedbat> sybariten: but you should just delete it if you won't put code in it.
[03:20:46] <ali1234> i catch myself making that mistake all the time... sometimes in reverse
[03:21:10] <ali1234> i think its cos name sounds like main backwards
[03:21:17] *** Joins: sn1tch3r (~sn1tch3r@177.54.145.230)
[03:21:26] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:21:27] <sybariten> OK no i mean i could put a print statement into it but the reason i put it there was just to "get into the habit"
[03:21:38] <grym> sybariten: i rarely if ever commit "if __name__... " in my code.
[03:21:58] <ali1234> with click and entrypoints and pytest you dont need it at all
[03:22:00] <sybariten> mhm
[03:22:03] <grym> ^
[03:22:13] *** Joins: orangeboxcutter (~orange@user/orangeboxcutter)
[03:22:16] *** Parts: jmcantrell (~weechat@86.106.143.84) (WeeChat 3.2)
[03:23:00] <sybariten> OK gone it is then. What about my function that chooses between two functions. is it okay to have just an if and an elif or should i think differently
[03:23:20] <ali1234> consider raising a TypeError if the argument is neither str nor int?
[03:23:34] <ali1234> or maybe some other exception. not sure what is most appropriate for that
[03:23:40] *** Joins: wyclif (~wyclif@user/wyclif)
[03:23:59] <ali1234> depends what the assignment asked for though
[03:24:09] *** Joins: PublicWiFi (~PublicWiF@user/publicwifi)
[03:24:17] <ali1234> the thing about homework is, we don't know what you've been asked to do, unless you tell us
[03:24:54] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[03:25:10] <sybariten> ali1234: no i understand that. THe instructions are very sparse and dont even mention any exceptions like this so i dont think i need to do it
[03:25:11] <ali1234> and often the best practice is not what the point of the exercise is
[03:25:39] <sybariten> but about raising the typeerror, would that be a try/except, where the whole if/elif thinkg is within the try block ?
[03:25:42] <ali1234> like if i were reviewing this as a pull request i'd wonder why you implemented a multiplication function where there's already an operator for that
[03:26:08] <ali1234> sybariten: no, try: is for catching exceptions, you want to raise one with the raise keyword
[03:26:10] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:26:23] <ali1234> then it is up to whoever uses this code to put it in a try: block
[03:26:35] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[03:26:41] <sybariten> Hmmm
[03:26:45] <ali1234> but if the course has not introduced exceptions yet, then they probably dont expect you to implement this
[03:27:01] *** Joins: Steeve (~steve@user/steeve)
[03:27:18] <sybariten> Yeah actually i can't remember if it was or wasn't at this time. Good point. Probably not. Lemme check
[03:27:19] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 244 seconds)
[03:27:35] <sybariten> And yeah the multiplication thing is clearly just an exercise thing
[03:27:42] <ali1234> if in doubt ask your instructors. that is what you are paying them for
[03:27:45] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:28:25] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[03:28:29] <jabberwock> sybariten: is this a python college course or?
[03:28:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[03:28:56] <sybariten> jabberwock: no we don't have colleges but maybe something comparable. Like a uni level
[03:29:19] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[03:29:40] *** Joins: shadoozo (~shadoozo@user/shadoozo)
[03:29:43] <jabberwock> sybariten: ah ok. I was going to go overboard and say right your own fuzzer to break the inputs
[03:30:14] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[03:30:27] <jabberwock> *write
[03:30:35] <sybariten> fuzzer?
[03:31:01] <jabberwock> something that sends random or semi-random data to your inputs to try and break them
[03:31:07] <ali1234> a fuzzer is a program that supplies random arguments to some code, to try to make it crash
[03:31:10] <jabberwock> it's a good practice to get into if you're going to be developing python stuffs
[03:31:37] <ali1234> i'd say learn to write simple unit tests first before you get into random input
[03:31:40] <jabberwock> learn to break your own stuff before someone publicizes their own exploit
[03:31:49] <jabberwock> and yeah, what ali1234 said regarding unit testing
[03:31:55] <sybariten> ali1234: ah, you meant raise exception on the else: clause right? if int, elif string, else raise ... sortof?
[03:31:58] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 244 seconds)
[03:32:07] <ali1234> sybariten: yes
[03:32:12] <sybariten> good idea
[03:32:22] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[03:32:29] <sybariten> ali1234: unit tests definitely came in a later moment for us, that much i remember  :)
[03:32:45] <sybariten> s/moment/"course moment"
[03:33:12] <sybariten> aahh moment is prolly not the best english word. but you get the idea
[03:33:52] <RougeR> was playing around with an ObjectWrapper class for injecting arguments into child  properties
[03:34:05] <RougeR> any idea how to get around the keyword arguments only issue
[03:34:10] <RougeR> i dont think there is a way?
[03:34:29] <RougeR> i might just be being tierd and silly...wrote this because i was bored
[03:34:34] <RougeR> https://dpaste.org/ioYs
[03:36:15] <ali1234> RougeR: considered just returning a bound/partial function from the property or something like that?
[03:37:06] <ali1234> (that's based on me glancing at one of your earlier paste btw)
[03:37:08] *** Joins: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net)
[03:37:39] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:38:02] <RougeR> ali1234, yeah the thing is i want to inject additional arguments conditionally
[03:38:05] <ali1234> i guess you're kind of already doing that now
[03:38:11] <RougeR> based on if they are present as params in the method signature
[03:38:26] <RougeR> yeah _missing is kinda doing it
[03:38:33] *** Quits: masoudd_ (~masoudd@user/masoudd) (Quit: Leaving)
[03:38:39] *** Joins: spjb (~spjb@S0106f0f24985fe23.wp.shawcable.net)
[03:38:51] <jabberwock> RougeR: I'm guessing this isn't as easy as looping through kwargs?
[03:39:21] *** Quits: greedom (~greedom@2001:16b8:3209:3300:bb2:6a85:c3c:c5c9) (Remote host closed the connection)
[03:39:46] <RougeR> jabberwock, the issue is if i have tenant_id as my first argument and im providing it using **kwargs
[03:39:56] <RougeR> and i call using non-keyword args
[03:40:34] <sybariten> so, uh, to raise an error, do i need to create a class? Coming out of the exception class?
[03:40:49] <RougeR> you get
[03:40:50] <RougeR> TypeError: func_with_arg() got multiple values for argument 'tenant_id'
[03:40:54] *** Joins: wyclif (~wyclif@user/wyclif)
[03:40:55] <ali1234> RougeR: so, you know that kwargs is a dict right? so you can insert, overwrite, pop, get with a default etc... anything you can do with a dict
[03:41:10] <RougeR> ali1234, yeah i know that
[03:41:23] <ali1234> so if something is missing, rather than try to set it as a positional arg, just put it in the dict
[03:41:29] <RougeR> wait yes
[03:41:29] *** Quits: nyah (~nyah@90.221.186.180) (Quit: leaving)
[03:41:33] <RougeR> i see what you are saying
[03:41:34] <ali1234> the dict can only ever have it once
[03:41:35] <RougeR> that makes sense
[03:41:49] <RougeR> i think
[03:42:09] <RougeR> im not sure what you have said works exactly....but i think it gives me an idea for a solution
[03:42:30] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[03:43:44] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:44:05] *** Joins: ^Cricket^ (~Cthulhu@static-72-76-136-147.nwrknj.fios.verizon.net)
[03:45:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[03:46:01] *** Joins: dme86 (~dan@user/dan86)
[03:46:34] *** Joins: YoungPotato (~user@155.98.225.28)
[03:47:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[03:47:17] *** Wulf4 is now known as Wulf
[03:48:06] *** Joins: jmcantrell (~weechat@86.106.143.84)
[03:49:57] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com) (Read error: Connection reset by peer)
[03:50:06] *** Joins: fcjsx (~fcjsx@2800:a4:839:4c00:5bb:dae7:6ec0:6af1)
[03:50:15] *** Quits: fcjsx (~fcjsx@2800:a4:839:4c00:5bb:dae7:6ec0:6af1) (Remote host closed the connection)
[03:50:22] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[03:50:32] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 268 seconds)
[03:50:59] *** Joins: ksr (~KSR@124.197.12.15)
[03:50:59] *** Joins: sn1tch3r_ (~sn1tch3r@23.82.137.231)
[03:51:00] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:52:13] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[03:53:08] *** Quits: id (jeda@hellomouse/dev/cryb.jeda) (Quit: //System Offline//)
[03:53:37] *** Quits: Linux77 (~kvirc@186.235.105.225) (Quit: Changing server...)
[03:53:56] *** Joins: Linux77 (~kvirc@186.235.105.225)
[03:54:30] *** Joins: sn1tch3r__ (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[03:54:45] *** Joins: afidegnum (~user@102.176.65.33)
[03:54:49] *** Joins: Nalt (~Nalt|||@24.28.40.159)
[03:54:54] *** Quits: sn1tch3r (~sn1tch3r@177.54.145.230) (Ping timeout: 264 seconds)
[03:55:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[03:56:00] *** Quits: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk) (Read error: Connection reset by peer)
[03:56:01] *** Joins: tims (~tims@193-82-247-42.tpgi.com.au)
[03:56:41] <RougeR> ali1234, yeah basically i see a few ways of doing this
[03:56:49] <RougeR> the issue then becomes how much of this should be done
[03:57:01] <RougeR> and the dangers of assuming argument orders
[03:57:06] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[03:57:15] <RougeR> there are quite a few edge cases
[03:57:16] <ali1234> yeah the thing about "clever" metaprogramming like this is it often ends up worse than the problem you were trying to fix
[03:57:18] *** Quits: sn1tch3r_ (~sn1tch3r@23.82.137.231) (Ping timeout: 268 seconds)
[03:57:21] <RougeR> haha yeah
[03:57:30] <ali1234> still, it's a good way to learn the ins and outs of the language
[03:57:32] <RougeR> i come from ruby originally
[03:57:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:57:36] *** Joins: wyclif (~wyclif@user/wyclif)
[03:57:43] <RougeR> yeah it is, i certainly found that
[03:57:44] *** Joins: sn1tch3r (~sn1tch3r@185.153.176.212)
[03:57:50] <RougeR> im just doing this for fun tbh
[03:57:54] <ali1234> just dont deploy it
[03:58:14] <RougeR> if i came up with a solid solution and it was well tested maybe lol
[03:58:21] <Nalt> I have a list of words and when a user inputs the first three letters of a word I want my script to output what words they probably want. I was thinking about playing with this package: https://pypi.org/project/pyspellchecker/ but does anyone else have any other suggestions? Alternatively I could see about just writing this sort of idea from scratch.
[03:58:37] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[03:58:50] <RougeR> Nalt, use a database and fuzzy search/trigram search
[03:59:23] *** Joins: derelict (~derelict@user/derelict)
[03:59:53] *** Quits: sn1tch3r__ (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[03:59:55] <sybariten> OK, so... this one's really up for opinions i suppose. But in my exercise i am supposed to feed a string and a number into a specific function i have written. And the way they have explained the exercise , they are literally saying a string like abracadabra and the number 15. Nota bene: no quotes. And in practice i am now feeding "abracadabra" into the function. Could i write the function so that
[03:59:57] <sybariten> it also converts the firsdt argument to a string and then just feed abracadabra into it?
[04:00:09] <RougeR> elasticsearch is pretty nifty for this and quick Nalt too
[04:00:12] <sybariten> or, is that overkill
[04:00:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.2)
[04:00:26] *** Quits: mwilson (mwilson@2600:3c01::f03c:92ff:fe7f:1149) (Quit: Leaving!)
[04:00:30] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[04:00:38] <Nalt> You refer to this: https://pypi.org/project/elasticsearch/, RougeR ?
[04:00:57] <RougeR> i mean thats the project, but elastic is just the  db
[04:01:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:01:11] <RougeR> what are you intending to use this with
[04:01:26] <RougeR> because if its real time...you probably want to do this in the UI
[04:01:42] <ali1234> elasticsearch is super overkill for getting word completion suggestions
[04:01:42] <RougeR> depends how big your lists are
[04:01:49] <tunixman> t Nalt that's a pretty neat package, yeah. It's not necessarily efficient but for understanding the basics of spellchecking algorithms it's a really good place to start.
[04:01:55] <RougeR> yeah ali1234 i kinda realised after i saidf
[04:01:58] <ali1234> it's for full text search of documents...
[04:02:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[04:02:11] <RougeR> i mean it can be used for something neat like this
[04:02:14] *** Joins: attackthemoon (~attackthe@2600:6c40:1d00:560c:b8dc:6c57:c55a:bc6c)
[04:02:29] <RougeR> sql can be used equally as well
[04:02:37] <Nalt> RougeR, its for a discord bot so there is not a lot of data. The list of words is maybe 200 or so words
[04:02:56] <RougeR> errr
[04:02:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:03:18] *** Joins: id (~jeda@hellomouse/dev/cryb.jeda)
[04:03:40] <Nalt> tunixman, thanks for your input :)
[04:04:06] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Ping timeout: 268 seconds)
[04:04:06] <ali1234> sybariten: your question is not very clear, can you rephrase it or show an example code?
[04:04:10] <RougeR> Nalt, i mean ive done this with postgres
[04:04:19] <RougeR> using tsquery
[04:04:20] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 252 seconds)
[04:04:23] <RougeR> https://towardsdatascience.com/implementing-auto-complete-with-postgres-and-python-e03d34824079
[04:04:30] <Nalt> Thanks, i'll take a look.
[04:04:31] *** Quits: davidlowryduda (~davidlowr@73.61.8.44) (Ping timeout: 244 seconds)
[04:04:33] <RougeR> there is a bit of a guide here i found from a search
[04:05:29] *** Joins: sn1tch3r_ (~sn1tch3r@5.154.174.84)
[04:05:50] <tunixman> t Nalt any time :) It's always fun to dig into how the sausage is made.
[04:06:07] <Nalt> There are probably several ways to do what I want :) I'll fiddle around and come back
[04:06:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:06:36] *** Quits: id (~jeda@hellomouse/dev/cryb.jeda) (Client Quit)
[04:06:46] <sybariten> ali1234: I have written a function. It takes two arguments, according to incstructions. Now, to test my function (and pass the exercise), my written instructions literary say: "Answer with a call to the function `double_decider` with the values: abracadabra and 28 as arguments."
[04:06:48] *** Joins: davidlowryduda (~davidlowr@73.61.8.138)
[04:06:54] *** Joins: id (~jeda@hellomouse/dev/cryb.jeda)
[04:07:02] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[04:07:08] *** Quits: id (~jeda@hellomouse/dev/cryb.jeda) (Remote host closed the connection)
[04:07:27] *** Joins: id (jeda@hellomouse/dev/cryb.jeda)
[04:07:31] <ali1234> ok, sounds simple. so what is the question?
[04:07:32] *** Joins: mwilson (~mwilson@li159-72.members.linode.com)
[04:07:39] <RougeR> Nalt,
[04:07:59] *** Joins: sn1tch3r__ (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r)
[04:08:00] <sybariten> ali1234: in practice, i now need to send in abracadabra quoted into the functoin, like this: doubleFunction("abracadabra", 28)   . I think this won't matter for passing the exercise, or actually my testing scripts say i pass it... the quesiton is if its overkill to make the function accept a string without quotes?
[04:08:11] <RougeR> fwiw, this is how i did the postgres side with sqlalchemt when i last did it
[04:08:12] <RougeR> https://github.com/CodePint/PetitionTrackerUK/blob/master/application/tracker/models.py#L52
[04:08:18] <sybariten> or even pointless
[04:08:22] <RougeR> https://github.com/CodePint/PetitionTrackerUK/blob/master/application/tracker/models.py#L153
[04:08:23] <tunixman> t Nalt for your inspiration https://towardsdatascience.com/query-segmentation-and-spelling-correction-483173008981
[04:08:24] *** Quits: sn1tch3r (~sn1tch3r@185.153.176.212) (Ping timeout: 268 seconds)
[04:08:49] <ali1234> sybariten: there is no such thing as "a string without quotes"
[04:09:07] <sybariten> ali1234: aha. So it makes no sense then
[04:09:40] <ali1234> if you wrote double_decider(abracadabra, 28) it would just complain that you havent defined abracadabra
[04:09:54] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[04:10:04] <ali1234> because it would interpret it as a variable name
[04:10:18] *** Quits: sn1tch3r_ (~sn1tch3r@5.154.174.84) (Ping timeout: 240 seconds)
[04:10:18] *** Joins: tvrtko (~tvrtko@89-172-12-202.adsl.net.t-com.hr)
[04:10:37] <sybariten> oh okay
[04:10:42] *** Joins: sn1tch3r (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r)
[04:10:47] <sybariten> thanks for all the help tonight guys!! bedtime for me!  :)
[04:11:18] *** Joins: lightbulbjim_ (~lightbulb@user/lightbulbjim)
[04:12:16] *** Quits: lightbulbjim_ (~lightbulb@user/lightbulbjim) (Client Quit)
[04:12:28] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:12:57] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[04:13:14] *** AAAAAA_Dragon is now known as A_Dragon
[04:13:15] *** Quits: sn1tch3r__ (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r) (Ping timeout: 272 seconds)
[04:13:18] *** Quits: candy (~tvrtko@93-136-74-19.adsl.net.t-com.hr) (Ping timeout: 244 seconds)
[04:13:46] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[04:15:19] <RougeR> ali1234, yeah i think im best just only allowing key word aruments if i ever used this
[04:15:31] <RougeR> anything beyond gets ugly or opinionated
[04:16:04] *** Joins: wyclif (~wyclif@user/wyclif)
[04:16:59] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[04:17:55] <RougeR> if there is one thing ive learnt trying to do clever metaprogramming things...its better to fail prematurely than allow too much flexibility and introduce unexpected behaviour
[04:18:54] <TML> s/prematurely //
[04:19:02] <RougeR> yes that
[04:19:06] * RougeR yawns
[04:19:09] <RougeR> 1am
[04:19:15] <RougeR> been hacking away since 9am
[04:19:19] <RougeR> i should sleep
[04:21:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[04:21:40] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:22:00] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[04:22:25] *** Quits: zeenk (~zeenk@82.76.113.130) (Quit: Konversation terminated!)
[04:24:09] *** Quits: Nalt (~Nalt|||@24.28.40.159) (Ping timeout: 244 seconds)
[04:24:25] *** Joins: derelict (~derelict@user/derelict)
[04:25:40] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[04:28:34] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:31:57] *** Joins: wyclif (~wyclif@user/wyclif)
[04:32:01] *** Joins: kmh (~kmh@p200300df5f1f6100ec162bd270d20611.dip0.t-ipconnect.de)
[04:33:06] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:33:30] *** Joins: sn1tch3r_ (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[04:33:39] *** Joins: jess (~jess@libera/staff/jess)
[04:33:41] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[04:33:53] *** Quits: sn1tch3r (sn1tch3r@gateway/vpn/nordvpn/sn1tch3r) (Read error: Connection reset by peer)
[04:36:22] *** Joins: patthoyts (~pat@2001:470:1f1d:26c:98e0:f52a:b13e:5197)
[04:36:39] *** Quits: scadman (~scadman@cpc145252-maid8-2-0-cust473.20-1.cable.virginm.net) (Quit: Konversation terminated!)
[04:37:07] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[04:37:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:38:05] <Linkandzelda> any better way to handle a function that takes 10 params other than just calling it and naming them each within the call?
[04:38:40] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[04:39:26] <Belxjander> Linkandzelda: structure the parameters into an object of their own and hand that in instead?
[04:39:47] <Linkandzelda> Belxjander: i thought of that, just not sure if thats good or bad practice
[04:40:19] <RougeR> its often a code smell tbh
[04:40:24] <RougeR> not always, but often
[04:40:40] <nedbat> Linkandzelda: can you link us to the code? Specifics might yield better answers
[04:41:07] <RougeR> if you cant break the function up further, then using an options dict or **kwargs for some could be a solution
[04:41:51] <TML> Linkandzelda: as a general rule, if I see a function with 10 parameters, I am probably looking for a way to refactor it; but that's GENERAL, nedbat is on point (as ever)
[04:42:30] <Linkandzelda> RougeR: i'd share it, but a bit lazy to rewrite it. but so you know more its an object function which takes those params, then forwards it to a new object which builds something out of those params, and then the built result is put in another object, with a return. the function is a shortcut for that
[04:42:34] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 252 seconds)
[04:42:40] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[04:43:11] <Linkandzelda> i'll make a paste of it
[04:43:14] <RougeR> right i see
[04:43:26] <RougeR> namedtuple could also perhaps be of use to you
[04:43:46] <Linkandzelda> https://hastebin.com/raw/covixohade
[04:44:22] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[04:44:24] <RougeR> that is for sure an options dict function
[04:44:42] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[04:45:05] <Belxjander> Linkandzelda: then go with RougeR's suggestion of using a dictionary?... then you just need to check existence of keys and set paramters accordingly with some sane defaults when the keys arent included
[04:45:15] <RougeR> Linkandzelda, keep these as arguments: remote_user, remote_host, job_name, passphrase, archive, path,
[04:45:16] <Linkandzelda> the way this is, while works perfect, i just cant read it lol
[04:45:23] <RougeR> then do **opts after
[04:45:36] <Linkandzelda> RougeR: what does **opts do?
[04:45:55] <RougeR> it takes any additional arguments and unpacks them to a dictionary
[04:46:04] <nedbat> Linkandzelda: it's usually spelled **kwargs
[04:46:10] <Linkandzelda> damn, that's quite amazing actually
[04:46:24] <nedbat> Linkandzelda: def foo(a, b, **kwargs): return other_func(a, **kwargs)
[04:46:36] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[04:46:38] <RougeR> so then you can do exclude_if = opts.get('exclude_if_present', [])
[04:46:41] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:f9a1:6a30:5a54:d88f) (Ping timeout: 252 seconds)
[04:46:45] <RougeR> etc
[04:46:52] <RougeR> yeah its ussually **kwargs
[04:46:55] <Linkandzelda> so when i call borg_create_remote and do xx=xx, yy=xx it will forward the dict to the new function?
[04:47:22] <RougeR> errrjust re-reading your code
[04:47:25] *** Joins: CombatVet (~c4@user/combatvet)
[04:47:58] <Linkandzelda> the sane defaults are located already in c.create() function of BorgCommand class
[04:48:07] <RougeR> then yes
[04:48:16] <RougeR> that seems like it will work off the bat
[04:48:31] <Linkandzelda> so the c.create function needs to be changed to read a dict?
[04:48:32] *** Joins: wyclif (~wyclif@user/wyclif)
[04:48:34] <RougeR> just pack it back up again when you call the function
[04:48:48] <RougeR> using c.create(**opts)
[04:48:57] <Linkandzelda> very cool indeed, thanks
[04:49:18] <RougeR> no worries, hope it solves your problem
[04:50:00] <RougeR> Linkandzelda, for reference: https://realpython.com/python-kwargs-and-args/
[04:50:44] *** Joins: __jmcantrell__ (~weechat@86.106.121.214)
[04:50:47] *** Quits: jmcantrell (~weechat@86.106.143.84) (Killed (iridium.libera.chat (Nickname regained by services)))
[04:50:47] *** __jmcantrell__ is now known as jmcantrell
[04:50:57] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[04:50:57] *** Quits: {HD} (~{HD}@191.96.185.21) (Ping timeout: 268 seconds)
[04:51:08] *** Joins: pnoud (~pnoud@user/pnoud)
[04:51:16] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[04:52:00] <RougeR> Linkandzelda, sidenote
[04:52:10] <RougeR> id avoid calling arguments list and path
[04:52:13] <RougeR> especially list
[04:52:35] <RougeR> can cause nasty issues with builtins
[04:52:44] <Linkandzelda> im aware of that, it overwrites the actual list object
[04:53:23] <RougeR> right okay, that seems undesirable?
[04:53:35] <RougeR> but i dont know what this code does tbf
[04:54:00] *** Joins: __jmcantrell__ (~weechat@89.45.224.240)
[04:54:00] *** jmcantrell is now known as Guest3518
[04:54:00] *** Quits: Guest3518 (~weechat@86.106.121.214) (Killed (zirconium.libera.chat (Nickname regained by services)))
[04:54:00] *** __jmcantrell__ is now known as jmcantrell
[04:54:02] *** Joins: brownan (~brownan@136.56.4.163)
[04:54:05] <Linkandzelda> i only do it when i know it wont cause a conflict
[04:54:23] <Linkandzelda> in this case list maps to the param --list
[04:54:34] <RougeR> yeah i kinda get that, i overload id sometimes
[04:54:55] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[04:55:03] <RougeR> _list or {}_list or array is a good practice way around it
[04:55:09] *** Quits: odoood (~odoood@c-73-184-143-53.hsd1.ga.comcast.net) (Ping timeout: 244 seconds)
[04:55:13] <RougeR> you might find *args useful as well
[04:56:04] *** Joins: diek (~diek@187.36.4.113)
[04:56:07] <Linkandzelda> im gonna keep that in mind so i dont cause any headaches down the line
[04:56:11] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 244 seconds)
[04:56:38] <RougeR> cool cool, yeah its all fun n games until you get an elusive bug 6months later
[04:56:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[04:56:47] <RougeR> anyway gl, im off to bed
[04:57:00] *** Joins: {HD} (~{HD}@191.96.185.131)
[04:57:31] <RougeR> ahhh
[04:57:38] <RougeR> sorry to be a pooper last thing
[04:57:57] <RougeR> dont use array as default arguments to functions
[04:58:02] <RougeR> dont use list*
[04:58:26] <RougeR> https://docs.python-guide.org/writing/gotchas/
[04:58:35] <RougeR> bit me when i moved to python
[04:58:56] <RougeR> its really unintuitive behaviour
[04:59:10] <RougeR> instead do = None
[04:59:24] <RougeR> and then exclude = exclude or None
[04:59:33] <RougeR> or use your **opts dict to set it
[04:59:42] <Linkandzelda> RougeR: damn! that is something im gonna fall into
[05:00:57] <RougeR> yeah its super unintuative
[05:01:03] <RougeR> and the opposite beahaviour to ruby
[05:02:08] <RougeR> anyway im really off now, night :)
[05:02:11] *** Quits: RougeR (~rougex250@user/rouger) (Quit: Leaving)
[05:02:53] *** Quits: brownan (~brownan@136.56.4.163) (Remote host closed the connection)
[05:03:18] *** Joins: brownan (~brownan@136.56.4.163)
[05:03:52] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:04:13] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[05:05:09] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:64e9:342f:6744:7cb0)
[05:06:16] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[05:06:45] *** Quits: cliluw (~cliluw@47.147.80.149) (Remote host closed the connection)
[05:07:09] *** Joins: cliluw (~cliluw@47.147.80.149)
[05:09:37] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[05:10:30] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Ping timeout: 264 seconds)
[05:11:31] *** Quits: brownan (~brownan@136.56.4.163) (Ping timeout: 272 seconds)
[05:11:54] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[05:12:33] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[05:14:11] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[05:15:18] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:16:09] *** Quits: yitz (~nick@exercism/yitz) (Quit:  )
[05:16:53] *** Joins: yitz (~nick@exercism/yitz)
[05:17:02] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[05:19:52] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[05:20:31] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 252 seconds)
[05:20:36] *** Joins: cdunklau (~cdunklau@2601:241:401:2490:75db:ed5f:cb9d:3fd9)
[05:21:10] * cdunklau waves
[05:21:27] <bn_work> hi, python 3.7, still very new to python, trying to debug an openapi generated python client, is there a way to enable global python tracing so I can see what the generated client is doing as it executes?
[05:21:40] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[05:22:15] <cdunklau> Finally got around to joining again. Just in for a short while for now
[05:22:33] <bn_work> oh, would https://docs.python.org/3/library/trace.html help?
[05:23:35] *** Joins: ano (~weechat@user/ano)
[05:25:37] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[05:27:21] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 272 seconds)
[05:27:27] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[05:27:37] <bn_work> hmm, it just only lists imported libs :/
[05:27:45] <cdunklau> bn_work: likely, but you’ll probably want to figure out how to scope it to just the generated code, otherwise you’ll get some spew
[05:28:03] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:28:52] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247)
[05:29:41] *** Parts: transhumanist (~hiken@2601:196:8800:35f0:7421:bafd:df5f:9185) ()
[05:29:43] *** Gustavo6046_ is now known as Gustavo6046
[05:29:47] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:25] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[05:33:36] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[05:34:35] *** Joins: vlm (~vlm@user/vlm)
[05:35:04] *** Joins: ano (~weechat@user/ano)
[05:35:47] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[05:37:13] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[05:38:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[05:39:28] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:40:05] *** Quits: renic (~renic@2600:1700:4c90:8080:e87c:35c4:c27c:29a8) (Quit: reboot upgrades)
[05:40:05] <bn_work> cdunklau: any suggestions how?
[05:44:32] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[05:44:48] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[05:46:08] *** Quits: cdunklau (~cdunklau@2601:241:401:2490:75db:ed5f:cb9d:3fd9) (Ping timeout: 250 seconds)
[05:48:26] *** Joins: Fiji (~Fiji@user/fiji)
[05:49:23] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[05:51:18] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247) (Quit: Ping timeout (120 seconds))
[05:51:32] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@78.84.19.247)
[05:51:40] *** Joins: aswsd (~helpme8@bb115-66-81-209.singnet.com.sg)
[05:54:22] *** Joins: ksr (~KSR@124.197.12.15)
[05:56:06] *** sn1tch3r_ is now known as sn1tch3r
[05:56:11] *** Quits: aswsd (~helpme8@bb115-66-81-209.singnet.com.sg) (Changing host)
[05:56:11] *** Joins: aswsd (~helpme8@user/hlpme)
[05:56:19] *** Quits: pr3d4t0r (~zhenya01@varenka.cime.net) (Changing host)
[05:56:19] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[05:56:20] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[05:56:43] *** Quits: aswsd (~helpme8@user/hlpme) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[05:58:47] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[05:59:47] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:00:36] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[06:00:50] *** Joins: aswsd (~helpme8@user/hlpme)
[06:02:00] <aswsd> does python slows down if one installs too many python libraries?
[06:02:46] *** Joins: c10l (~c10l@89.34.167.207)
[06:03:18] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:04:24] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[06:06:00] <tims> aswsd: No
[06:06:59] <tims> aswsd: It might slow down the initial load when finding a module, but nothing your are going to notice.
[06:07:56] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:08:36] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[06:08:40] *** Joins: pete443 (~pete@user/pete443)
[06:09:33] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 244 seconds)
[06:09:43] *** Joins: cliluw (~cliluw@47.147.80.149)
[06:11:04] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 272 seconds)
[06:12:39] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[06:15:03] <aswsd> tims: good to know that. I've been installing libraries indiscriminantly. Even those that I don't actively use. Seems like it's not a concern
[06:15:18] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 264 seconds)
[06:18:39] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[06:25:58] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:27:18] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 264 seconds)
[06:30:05] *** Quits: emerent (~quassel@p200300cd5703bbebba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:30:39] *** Joins: emerent (~quassel@p200300cd5703bb37ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:30:44] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[06:31:55] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[06:32:51] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[06:35:54] *** Quits: YoungPotato (~user@155.98.225.28) (Ping timeout: 268 seconds)
[06:36:16] *** Joins: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net)
[06:36:19] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[06:36:45] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:64e9:342f:6744:7cb0) (Read error: Connection reset by peer)
[06:38:39] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[06:39:17] *** Joins: drincruz (~drincruz@c-73-215-239-79.hsd1.nj.comcast.net)
[06:43:53] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[06:43:55] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[06:44:40] *** Joins: jazzy2 (~jaziz@2607:fb90:a6e2:4ddc:a081:d83:8d2e:de6c)
[06:44:55] *** jazzy2 is now known as jaziz
[06:45:10] *** jaziz is now known as jazzy2
[06:45:17] *** jazzy is now known as Guest5423
[06:45:19] <maxtim> how can I compare to sets of strings? I have list1 = ["a string", "another sctring"] with open(afile.txt) as f: lines = f.readlines()
[06:45:30] <maxtim> s/to/two
[06:46:03] <grym> maxtim: tell us how you want them to be compared
[06:46:40] *** jazzy2 is now known as jazzy
[06:46:43] <maxtim> i just need to return True/False
[06:47:00] <grym> ... yes, and how do you know when something is true or false
[06:47:37] <grym> compare_stuff(["apple","pear"], ["foo","bar","baz"]):   what should that return, and why
[06:47:40] <maxtim> right now I have a for loop: for (x, y) in zip (list1, lines): if x in y: return True
[06:47:44] *** Parts: aswsd (~helpme8@user/hlpme) (Once you know what it is you want to be true, instinct is a very useful device for enabling you to know that it is)
[06:47:47] *** Quits: rock2X (~rock@c-69-181-4-101.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[06:47:47] *** Quits: Guest5423 (~jaziz@2600:380:8739:55:6489:1a9b:3821:f21b) (Ping timeout: 244 seconds)
[06:48:04] <maxtim> ah sure
[06:49:19] <maxtim> comparestuff(["a part of a sentence", "a different part of sentence"], ["lines of a text file that has a part of a sentence"])
[06:49:26] <maxtim> does that make sence?
[06:49:37] <maxtim> s/sence/sense
[06:50:22] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[06:50:50] <maxtim> long story short, I'm trying to parse through log files and cherry pick ones that have matching phrases
[06:50:56] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[06:51:40] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:51:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[06:51:58] *** Joins: pnoud (~pnoud@user/pnoud)
[06:52:14] <KirkMcDonald> maxtim: The shortest solution would be to check every phrase against every line.
[06:52:22] <Repiphany> [line for line in lines if any(phrase in line for phrase in phrases)]
[06:52:30] <KirkMcDonald> maxtim: The most efficient is basically to construct a regular expression which can match all of the phrases.
[06:52:50] <maxtim> i'm not great with regex
[06:53:15] <maxtim> but I was kinda worried i'd have to go down that rabbit hole again
[06:53:49] <KirkMcDonald> It could be as simple as "|".join(re.escape(phrase) for phrase in phrases)
[06:56:00] *** Joins: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10)
[06:56:15] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[06:56:36] *** Joins: vicfred (~vicfred@user/vicfred)
[06:57:22] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[06:58:27] *** Quits: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10) (Remote host closed the connection)
[06:58:41] *** Joins: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10)
[07:00:40] *** Joins: derelict (~derelict@user/derelict)
[07:00:41] *** Quits: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10) (Remote host closed the connection)
[07:01:05] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[07:02:49] *** Joins: wyclif (~wyclif@user/wyclif)
[07:02:55] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:03:14] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[07:03:30] *** Joins: wyclif_ (~wyclif@user/wyclif)
[07:03:37] *** Joins: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com)
[07:06:48] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[07:06:48] *** Quits: wyclif_ (~wyclif@user/wyclif) (Client Quit)
[07:07:16] *** Joins: wyclif (~wyclif@user/wyclif)
[07:07:17] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:08:57] *** Joins: jazzy2 (~jaziz@2600:380:854e:22c1:c558:7a2d:a4b2:cfa6)
[07:09:43] *** Quits: sbanwart (~sbanwart@cpe-174-100-90-239.neo.res.rr.com) (Quit: WeeChat 3.1)
[07:11:25] <habnabit_> the regex module can do ^ that much more efficiently
[07:12:08] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[07:12:17] *** Quits: jazzy (~jaziz@2607:fb90:a6e2:4ddc:a081:d83:8d2e:de6c) (Ping timeout: 268 seconds)
[07:12:27] *** jazzy2 is now known as jazzy
[07:12:40] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[07:12:49] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[07:12:57] *** Joins: pnoud (~pnoud@user/pnoud)
[07:14:08] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[07:15:16] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[07:15:59] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[07:16:48] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[07:17:14] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 244 seconds)
[07:18:11] *** Joins: llh (~coke@user/llh)
[07:22:18] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 240 seconds)
[07:22:40] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[07:22:58] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[07:26:42] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 264 seconds)
[07:27:30] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[07:28:49] *** Quits: drincruz (~drincruz@c-73-215-239-79.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[07:32:39] *** Quits: deepy (deepy@user/deepy) (Read error: Connection reset by peer)
[07:32:44] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 244 seconds)
[07:32:47] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[07:33:08] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[07:33:12] *** Joins: cheater (~Username@user/cheater)
[07:33:36] *** Quits: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net) (Ping timeout: 250 seconds)
[07:33:54] *** Joins: mkellis (~Calibellu@68.235.43.132)
[07:36:52] *** Quits: adder` (~adder@user/adder) (Quit: Leaving)
[07:37:21] *** Quits: adder (~adder@user/adder) (Remote host closed the connection)
[07:41:02] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[07:43:42] *** Joins: uKi` (~kochi@user/uki/x-9954492)
[07:44:20] *** Quits: uKi` (~kochi@user/uki/x-9954492) (Client Quit)
[07:46:24] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[07:47:12] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 244 seconds)
[07:49:14] *** Quits: yogoyo (~weechat@user/yogoyo) (Quit: WeeChat 2.3)
[07:50:18] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 244 seconds)
[07:50:47] *** Quits: todda7 (~torstein@2a02:587:3729:5274:b6df:d74:d185:4e87) (Remote host closed the connection)
[07:52:52] *** Joins: matsaman (~matsaman@user/matsaman)
[07:53:01] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 272 seconds)
[07:55:31] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[07:57:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[07:59:02] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[08:00:28] *** Joins: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net)
[08:01:51] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:03:02] *** Joins: azidhaka (~azidhaka@gateway.videnov.bg)
[08:04:23] *** Joins: Gerula (~Gerula@user/gerula)
[08:04:33] *** Quits: attackthemoon (~attackthe@2600:6c40:1d00:560c:b8dc:6c57:c55a:bc6c) (Read error: Connection reset by peer)
[08:05:00] <azidhaka> Hi everyone! This function: https://pywin32-ctypes.readthedocs.io/en/stable/_modules/win32ctypes/pywin32/win32cred.html#CredWrite accepts a dict, but when i pass a dict: TypeError: a bytes-like object is required, not 'str'
[08:05:05] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:05:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 244 seconds)
[08:06:18] *** Lord_of_Life_ is now known as Lord_of_Life
[08:07:10] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[08:09:23] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[08:09:25] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[08:09:39] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[08:10:25] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[08:11:26] <maxtim> most of the time, azidhaka, python is pretty good about telling you what you need to google for. Something in your dict is a string, you need to convert it to a bytes-like object
[08:14:34] <azidhaka> maxtim: right, something inside the dict, not the dict itself, thanks
[08:17:02] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 268 seconds)
[08:17:34] *** Quits: GadgetNerd (~GadgetNer@user/gadgetnerd) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[08:17:58] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[08:18:03] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:19:50] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[08:20:27] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[08:23:22] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[08:23:47] *** Quits: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net) (Remote host closed the connection)
[08:24:42] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 240 seconds)
[08:24:52] *** Parts: combinare (~Eric@129.146.172.252) (Leaving)
[08:29:57] *** Joins: wei2912 (~wei2912@112.199.250.21)
[08:31:06] *** Joins: blackandproud (~blackandp@2601:14b:4400:4d30:1df1:f039:e8d7:e697)
[08:31:13] *** Joins: GadgetNerd (~GadgetNer@user/gadgetnerd)
[08:33:29] *** Joins: pnoud (~pnoud@user/pnoud)
[08:34:12] *** Quits: azidhaka (~azidhaka@gateway.videnov.bg) (Quit: Leaving)
[08:35:06] *** Quits: ^Cricket^ (~Cthulhu@static-72-76-136-147.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[08:35:20] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:35:57] *** Joins: cheater1__ (~Username@user/cheater)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:02] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[08:36:03] *** cheater1__ is now known as cheater
[08:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:41:15] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[08:42:13] *** Joins: zaquest (~notzaques@5.128.210.178)
[08:42:20] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[08:43:33] <blackandproud> hey
[08:43:39] <blackandproud> how do i create a pointer in python?
[08:43:54] *** ChanServ sets mode: +o habnabit_
[08:43:56] *** habnabit_ sets mode: +b *!*blackandp@2601:14b:4400:4d30:1df1:f039:e8d7:*
[08:43:57] *** blackandproud was kicked by habnabit_ (blackandproud)
[08:44:08] *** ChanServ sets mode: +o infobob
[08:44:08] *** infobob sets mode: +b $a:blackandproud
[08:44:08] *** infobob sets mode: -b *!*blackandp@2601:14b:4400:4d30:1df1:f039:e8d7:*
[08:44:18] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[08:44:34] *** habnabit_ sets mode: -oo habnabit_ infobob
[08:44:40] <habnabit_> (they have been trolling other channels)
[08:45:17] *** Quits: jpic (~jpic@82.142.9.26) (Ping timeout: 268 seconds)
[08:46:51] <matsaman> suuuuurrree =)
[08:49:17] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[08:49:31] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:51:30] *** Joins: SebastianM (~seba@user/sebastianm)
[08:51:36] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[08:56:43] <doc> heh
[08:57:04] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[08:57:43] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[08:58:08] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[08:58:39] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[09:03:43] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:05:00] *** Joins: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt)
[09:06:34] <doc> I'm building a system that's going to track people who want to sign in for an event, and I want to use redis to store the new sign ins, at the same time use that data to group them together for car pooling. New to redis, would using a kv pair per event with transactions to update it be the right way to approach it in your experience? I'm worried about race conditions.
[09:07:05] <doc> s/transactions/pipelines with transactions
[09:07:17] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[09:08:33] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[09:08:53] *** Joins: tkazi (~tkazi@user/tkazi)
[09:10:58] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[09:10:59] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[09:11:06] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[09:11:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:11:43] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:13:16] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[09:13:39] *** Quits: m_tadeu (~quassel@bl14-187-233.dsl.telepac.pt) (Ping timeout: 268 seconds)
[09:14:21] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[09:16:09] *** Joins: tijuco (~tijuco@user/tijuco)
[09:16:47] *** tijuco is now known as costaht
[09:17:00] *** Joins: Maikel (~Maikel@130.61.63.136)
[09:17:21] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[09:17:29] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[09:19:25] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:19:33] *** Quits: ttys000 (~ttys000@user/ttys000) (Quit: Textual IRC Client: www.textualapp.com)
[09:21:54] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[09:23:47] *** Joins: skapata (~Skapata@user/skapata)
[09:23:49] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[09:26:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[09:27:20] *** Quits: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net) (Ping timeout: 268 seconds)
[09:35:46] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[09:36:18] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 264 seconds)
[09:37:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:38:20] *** Quits: jabberwock (~lidless@user/jabberwock) (Remote host closed the connection)
[09:39:10] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[09:40:16] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Quit: AmigaOS PPC 4.1 +E +U1 // AmIRC 68K)
[09:40:48] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[09:41:14] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[09:43:32] *** Joins: jabberwock (~lidless@user/jabberwock)
[09:43:55] *** costaht is now known as tijuco
[09:44:06] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 264 seconds)
[09:45:55] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:46:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[09:48:23] *** Joins: ksr (~KSR@124.197.12.15)
[09:49:16] *** Quits: jabberwock (~lidless@user/jabberwock) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:50:28] *** Joins: jabberwock (~lidless@user/jabberwock)
[09:51:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[09:52:45] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 244 seconds)
[09:52:49] *** Joins: chilifinger (~mjepst@69-152-169-128.lightspeed.jcvlfl.sbcglobal.net)
[09:53:04] *** Joins: i0e (~is0ke3@user/is0ke3)
[09:53:23] *** Joins: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net)
[09:55:12] *** Joins: kwong (~kwong@user/kwong)
[09:55:51] *** Quits: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net) (Ping timeout: 244 seconds)
[09:56:29] *** Joins: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de)
[09:58:02] *** Quits: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net) (Client Quit)
[09:58:36] *** Joins: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net)
[09:58:36] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:03:06] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:03:09] *** Quits: HalfAShark (~HalfAShar@user/halfashark) (Read error: Connection reset by peer)
[10:06:11] *** Joins: Midnite (~human@user/midnightlantern)
[10:06:39] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 272 seconds)
[10:08:26] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:08:39] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[10:12:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[10:12:54] *** Joins: wyclif (~wyclif@user/wyclif)
[10:16:52] *** Joins: jpic (~jpic@82.142.9.26)
[10:18:48] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:20:34] *** Joins: i0e (~is0ke3@user/is0ke3)
[10:23:58] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:24:19] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[10:25:13] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[10:25:18] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[10:25:38] *** Quits: iftheraincomes (~iftherain@2804:14d:5c54:8fc4:96eb:4f3:66f:c1de) (Read error: Connection reset by peer)
[10:28:04] *** Joins: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it)
[10:29:25] *** Quits: Julian (~tos9@host-82-58-0-63.retail.telecomitalia.it) (Client Quit)
[10:34:33] *** Quits: jwhisnant_ (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[10:34:39] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[10:35:51] *** Quits: chilifinger (~mjepst@69-152-169-128.lightspeed.jcvlfl.sbcglobal.net) (Quit: WeeChat 3.2)
[10:36:15] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[10:36:28] *** Quits: Celeo (~Celeo@2603-8001-3301-2e00-c0ec-ab41-2900-1ef8.res6.spectrum.com) (Quit: Leaving)
[10:36:55] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 268 seconds)
[10:37:13] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[10:38:07] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:39:06] *** Quits: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net) (Quit: WeeChat 3.2)
[10:42:03] *** Quits: patstoms (~patstoms@tzt.lv) (Quit: Bye)
[10:43:48] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[10:44:09] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[10:46:49] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:53] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[10:47:24] *** Joins: seednode (~seednode@user/seednode)
[10:51:12] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 268 seconds)
[10:53:45] *** Joins: upsala (~zcb@185.213.155.232)
[10:55:45] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[10:56:16] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[10:57:22] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[10:58:13] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 252 seconds)
[10:59:06] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[11:01:43] *** Joins: CombatVet (~c4@user/combatvet)
[11:01:43] *** Quits: zaquest (~notzaques@5.128.210.178) (Read error: Connection reset by peer)
[11:01:51] *** Joins: pnoud (~pnoud@user/pnoud)
[11:04:25] *** Joins: lovey (~zain@197.89.37.38)
[11:05:26] *** Quits: kickingvegas (~cchoi@c-24-130-175-68.hsd1.ca.comcast.net) (Quit: leaving)
[11:05:38] *** Quits: lovey (~zain@197.89.37.38) (Quit: Leaving)
[11:06:10] *** Joins: palasso (~palasso@user/palasso)
[11:08:00] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[11:08:47] *** Joins: Vonter (~Vonter@user/vonter)
[11:10:15] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[11:10:29] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[11:11:46] *** Quits: patthoyts (~pat@2001:470:1f1d:26c:98e0:f52a:b13e:5197) (Remote host closed the connection)
[11:12:09] *** Parts: be3uykpy (~be3uykpy@141.226.9.247) (Leaving)
[11:14:14] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:15:03] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[11:15:31] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Client Quit)
[11:15:32] *** Quits: Midnite (~human@user/midnightlantern) (Ping timeout: 252 seconds)
[11:16:45] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Client Quit)
[11:16:59] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:17:20] *** Joins: ksr (~KSR@124.197.12.15)
[11:17:38] *** Joins: Snyp (~rksht@49.207.194.192)
[11:17:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[11:17:44] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[11:18:24] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:19:05] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[11:19:12] *** Joins: zaquest (~notzaques@5.128.210.178)
[11:22:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:23:11] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[11:23:17] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 272 seconds)
[11:28:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[11:28:05] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[11:29:13] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[11:30:16] *** Joins: pnoud (~pnoud@user/pnoud)
[11:32:16] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:32:18] *** Joins: lk251 (~lk251@200.red-79-158-56.dynamicip.rima-tde.net)
[11:33:01] *** Joins: Midnite (~human@user/midnightlantern)
[11:34:15] *** Quits: voldial (~user@user/voldial) (Ping timeout: 272 seconds)
[11:35:04] *** Joins: ksr (~KSR@124.197.12.15)
[11:36:57] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[11:37:30] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[11:41:03] *** Quits: p-i- (~Ohmu@node-n33.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[11:41:04] *** Quits: Midnite (~human@user/midnightlantern) (Quit: Midnite)
[11:41:09] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 268 seconds)
[11:42:18] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 264 seconds)
[11:43:21] *** Joins: p-i- (~Ohmu@node-n33.pool-118-173.dynamic.totinternet.net)
[11:45:07] *** Joins: feriman (~feriman@188.163.113.127)
[11:46:05] *** Quits: LiftLeft (~LiftLeft@154.21.28.215) (Ping timeout: 272 seconds)
[11:47:42] *** Quits: mrkz_c (uid503554@user/mrkz-c/x-7247691) (Quit: Connection closed for inactivity)
[11:48:33] *** Quits: p-i- (~Ohmu@node-n33.pool-118-173.dynamic.totinternet.net) (Ping timeout: 268 seconds)
[11:51:33] *** Joins: deepy (deepy@user/deepy)
[11:52:09] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[11:54:57] *** Joins: rendar (~rendar@user/rendar)
[11:56:52] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[11:58:50] <Linkandzelda> is there a simple library which parses everything sent on the command line and lets me just access that in a nice dict? ive looked at argparse but it seems annoying to work with
[11:59:16] *** Joins: p-i- (~Ohmu@node-n33.pool-118-173.dynamic.totinternet.net)
[12:00:16] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130)
[12:00:22] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[12:00:47] *** Quits: llh (~coke@user/llh) (Ping timeout: 268 seconds)
[12:02:00] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[12:02:05] *** Joins: rothandr_ (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[12:02:15] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[12:02:19] <doc> https://github.com/tiangolo/typer or https://click.palletsprojects.com/en/7.x/
[12:02:23] <TML> Linkandzelda: pass the data as json and use the json library?
[12:02:41] <doc> Linkandzelda: https://github.com/tiangolo/typer or https://click.palletsprojects.com/en/7.x/
[12:02:59] <doc> haven't used either, but have had them bookmarked for a while now, for my own future reference
[12:03:17] <Linkandzelda> i'd like to make syntax such as this: myprogram ACTION --some-param xxx --some-other, or myprogram ACTION SOMETHING_ELSE -f -g, for example
[12:04:08] *** Quits: feriman (~feriman@188.163.113.127) (Quit: WeeChat 3.2)
[12:05:01] *** Quits: rothandr_ (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Read error: Connection reset by peer)
[12:05:06] *** Quits: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net) (Ping timeout: 268 seconds)
[12:06:31] *** Joins: rothandrew (~rothandre@c-73-213-69-254.hsd1.va.comcast.net)
[12:08:21] <Repiphany> What about argparse would be annoying making that and/or what dict are you expecting to get out of those examples
[12:09:11] <doc> he's far from the first person to say it's annoying
[12:15:38] *** Joins: cliluw (~cliluw@47.147.80.149)
[12:16:40] *** Joins: kosh (~kosh@user/kosh)
[12:16:56] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[12:19:11] <ronny> Argparse is a pain, but so are most other libs, my personal preference is click these days
[12:19:37] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: Textual IRC Client: www.textualapp.com)
[12:20:19] *** Joins: ntdll_ (~ntdll@user/ntdll)
[12:21:08] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 268 seconds)
[12:23:21] *** Quits: lk251 (~lk251@200.red-79-158-56.dynamicip.rima-tde.net) ()
[12:24:12] *** Quits: Xano (~Xano@2a00:23c4:420c:d700:8a8e:97a4:2b81:4950) (Remote host closed the connection)
[12:24:30] *** Joins: Xano (~Xano@2a00:23c4:420c:d700:f3f9:8b66:94d4:7117)
[12:26:18] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[12:26:49] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:26:53] *** Joins: runciter (~runciter@user/runciter)
[12:27:06] *** Quits: runciter (~runciter@user/runciter) (Remote host closed the connection)
[12:30:25] *** Quits: death916 (~death916@user/death916) (Ping timeout: 272 seconds)
[12:30:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[12:31:07] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:31:22] *** Joins: Pickchea (~private@user/pickchea)
[12:31:55] *** Joins: gloomy (~ldorigo@217.116.228.12)
[12:32:52] <gloomy> Hey, why can't I pass a Generator[int, None,None] to a function that expects an Iterator[int] ? Aren't generators iterators?
[12:33:00] *** Joins: Auron (Auron956@user/auron)
[12:33:17] <gloomy> *why does pylance/mypy complain when I do it - I obviously can do it without problems
[12:36:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:39] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[12:37:08] <rendar> f"{a} {b}".format(b=55) -- NameError: name 'b' is not defined -- why i get this error?
[12:37:11] *** Quits: gloomy (~ldorigo@217.116.228.12) (Remote host closed the connection)
[12:37:24] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[12:37:26] <dukwon> remove the f at the start
[12:37:36] *** Joins: gloomy (~ldorigo@217.116.228.12)
[12:37:50] <rendar> no, i need it's to be a fstring
[12:37:56] <rendar> i want to mix fstring and .format()
[12:38:10] <KirkMcDonald> rendar: Well, it's going to resolve the f-string first.
[12:38:10] <dukwon> ok, then f"{a} {{b}}".format(b=55)
[12:38:12] <gloomy> (if someone answered to me, can you answer again? lost connectivity for a few minutes)
[12:38:52] <rendar> i see
[12:39:03] <Wulf> gloomy: nobody did
[12:39:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 252 seconds)
[12:39:38] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[12:39:46] <Wulf> gloomy: generators are iterable, but not iterators.
[12:40:49] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[12:41:00] *** Quits: milosz (~milosz@user/milosz) (Quit: Leaving)
[12:41:04] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[12:43:05] <Wulf> gloomy: never mind. they are neither. if you call yor gen, the result is iterator and iterable
[12:43:26] *** Quits: gloomy (~ldorigo@217.116.228.12) (Ping timeout: 268 seconds)
[12:45:30] *** Joins: Rum (~Rum@user/rum)
[12:45:47] *** Quits: Affliction (~Afflictio@user/affliction) (Quit: Read error: Connection reset by beer)
[12:46:09] *** Joins: Affliction (~Afflictio@user/affliction)
[12:46:11] *** Quits: Rum (~Rum@user/rum) (Client Quit)
[12:46:31] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[12:53:21] *** Quits: kwong (~kwong@user/kwong) (Remote host closed the connection)
[12:53:54] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[12:57:18] <graingert> gloomy: can you make a mypy-play.net
[12:58:33] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[12:59:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 264 seconds)
[12:59:57] *** Joins: jkl (~jkl@2600:1700:2420:6d10::3f1)
[13:00:05] *** Quits: codl (~codl@user/codl) (Read error: Connection reset by peer)
[13:00:20] *** Joins: codl (~codl@user/codl)
[13:01:32] *** Joins: dme86 (~dan@user/dan86)
[13:05:32] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:06:18] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 244 seconds)
[13:06:37] *** Joins: frostschutz (~frostschu@2a01:c22:c819:6f00:b59a:20ec:36bc:630e)
[13:08:03] *** Joins: death916 (~death916@user/death916)
[13:08:05] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[13:08:21] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:09:31] *** Joins: __jmcantrell__ (~weechat@83.143.246.109)
[13:09:31] *** jmcantrell is now known as Guest5197
[13:09:31] *** Quits: Guest5197 (~weechat@89.45.224.240) (Killed (silver.libera.chat (Nickname regained by services)))
[13:09:31] *** __jmcantrell__ is now known as jmcantrell
[13:11:17] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[13:14:29] *** Joins: sebastianos (~sebastian@user/sebastianos)
[13:15:37] *** Joins: boB_K7IQ (~boB_K7IQ@ip98-177-87-213.ph.ph.cox.net)
[13:16:00] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[13:17:21] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[13:17:40] *** Joins: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a)
[13:17:52] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[13:18:35] *** Quits: afidegnum (~user@102.176.65.33) (Ping timeout: 268 seconds)
[13:22:01] <rendar> can pandas help me to store a huge vector of little objects such as `class Point: __slots__("x", "y")` ?
[13:22:10] <rendar> in an efficient way?
[13:22:11] *** Quits: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[13:23:18] *** Joins: NKID00 (~NKID00@2409:8a28:6620:e690:e917:6e:b20f:776a)
[13:25:14] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[13:27:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:28:08] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[13:30:16] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 244 seconds)
[13:30:33] *** Joins: Gerula (~Gerula@user/gerula)
[13:31:38] *** Joins: froggy (56788237@ircip1.mibbit.com)
[13:31:43] <froggy> hello
[13:32:06] *** Joins: cth (~Cthulchu@193.194.107.188)
[13:32:09] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:32:42] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 240 seconds)
[13:32:46] <supakeen> Hi.
[13:32:51] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 244 seconds)
[13:35:06] *** Quits: jazzy (~jaziz@2600:380:854e:22c1:c558:7a2d:a4b2:cfa6) (Ping timeout: 240 seconds)
[13:36:46] *** Joins: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0)
[13:37:29] <froggy> https://bpa.st/ICCQ i left a comment with a question on top please help
[13:38:28] *** Joins: s1b1 (~s1b1@user/s1b1)
[13:39:00] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[13:39:05] *** Quits: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0) (Remote host closed the connection)
[13:39:55] *** Joins: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0)
[13:41:02] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[13:42:00] *** Quits: cth (~Cthulchu@193.194.107.188) (Ping timeout: 272 seconds)
[13:42:14] <randall> froggy: Is this homework?
[13:43:42] <froggy> no, it's a contest. whoever gets the guess right gets a prize. There were a bunch of fighters but I tried narrowing it down a bit.
[13:44:34] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:44:40] <froggy> I found this as a great opportunity to start coding as I know this can be automated
[13:44:54] *** Joins: mickey (~user@user/mickey)
[13:45:30] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 240 seconds)
[13:45:58] <nedbat> froggy: you could brute-force it: consider all subsets of four fighters
[13:46:08] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[13:47:08] <froggy> I need every combination of 4 different fighters that have a combined record of 112 wins and 2 losses. Was making a dictionary of them a good idea?
[13:48:34] <nedbat> froggy: i think you will not need to look them up by their names, so a list would probably be more appropriate
[13:49:23] *** Quits: asix (~Anders@user/asix) (Ping timeout: 244 seconds)
[13:49:44] <froggy> like this: fighters = [("name", wins, losses), ("name", wins, losses) etc] ?
[13:49:53] <nedbat> froggy: right
[13:50:15] <froggy> nedbat: ok
[13:50:25] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[13:50:51] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[13:50:51] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[13:50:51] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (*.net *.split)
[13:50:51] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[13:50:51] *** Quits: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com) (*.net *.split)
[13:51:11] *** Joins: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it)
[13:51:11] <NKID00> forggy: itertools.combinations may help
[13:51:14] *** Joins: sunyour (~sunyour@129.226.182.99)
[13:51:14] *** Joins: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com)
[13:51:30] *** Quits: NKID00 (~NKID00@2409:8a28:6620:e690:e917:6e:b20f:776a) (Quit: Leaving)
[13:52:01] <Pitr> hi; sorry for rephrasing, by buffer was lost. is there a python jobs forum somewhere for demand/offers?
[13:52:09] <Pitr> *my
[13:53:40] <froggy> the code looks like this now: https://bpa.st/KB4Q
[13:54:05] <froggy> NKID00: Ok i'll look into that
[13:54:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[13:54:45] <nedbat> Pitr: i'm not sure how active it is, but: https://www.python.org/jobs/
[13:54:54] *** Quits: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a) (Ping timeout: 264 seconds)
[13:58:26] <froggy> how do i print itertools.combinations? this is the output <itertools.combinations object at 0x000001DDB462AF40>
[13:59:50] <froggy> nvm i found out
[14:01:38] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 252 seconds)
[14:03:25] *** Joins: asix (~Anders@user/asix)
[14:04:11] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:04:27] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[14:05:45] *** Joins: dme86 (~dan@user/dan86)
[14:06:37] *** Quits: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0) (Remote host closed the connection)
[14:08:03] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: puadxtub)
[14:08:35] *** Quits: jkl (~jkl@2600:1700:2420:6d10::3f1) (Ping timeout: 272 seconds)
[14:08:47] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[14:10:53] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 244 seconds)
[14:11:00] *** jmcantrell is now known as __jmcantrell__
[14:11:56] *** __jmcantrell__ is now known as jmcantrell
[14:12:57] *** Joins: feriman (~feriman@188.163.113.127)
[14:13:00] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[14:13:02] *** Joins: pnoud (~pnoud@user/pnoud)
[14:13:27] *** Quits: jmcantrell (~weechat@83.143.246.109) (Changing host)
[14:13:27] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[14:14:42] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 244 seconds)
[14:15:05] *** Quits: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net) (*.net *.split)
[14:15:05] *** Quits: fluffyballoon (~fluffybal@2620:72:0:6480::11fd) (*.net *.split)
[14:15:45] *** Joins: wyclif (~wyclif@user/wyclif)
[14:17:10] *** Joins: jheblu (~user@116.68.98.40)
[14:18:18] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[14:18:42] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 240 seconds)
[14:19:22] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:20:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 264 seconds)
[14:20:50] *** Joins: goldfish (~goldfish@user/goldfish)
[14:21:08] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:21:27] *** Joins: re (~re@user/re)
[14:23:20] *** Joins: mambang (~mambang@user/mambang)
[14:23:57] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[14:25:03] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[14:26:35] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 244 seconds)
[14:27:44] *** Joins: dme86 (~dan@user/dan86)
[14:27:58] *** Joins: telboon (~telboon@user/telboon)
[14:29:38] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[14:34:36] *** Joins: wyclif (~wyclif@user/wyclif)
[14:35:04] *** re is now known as klz
[14:35:09] *** Joins: synbiose (~synbiose@user/synbiose)
[14:36:27] *** Quits: klz (~re@user/re) (Quit: WeeChat 3.1)
[14:36:32] *** Joins: w0x12ef (~w0x12ef@111.63.14.116)
[14:36:59] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:37:25] *** Joins: pnoud (~pnoud@user/pnoud)
[14:39:05] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[14:39:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:40:54] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:42:48] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[14:42:58] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[14:45:58] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[14:46:39] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[14:47:41] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[14:47:54] *** Quits: ratelius (ratelius@gateway/vpn/protonvpn/ratelius) (Ping timeout: 268 seconds)
[14:48:52] *** Joins: Hackerpcs (~user@user/hackerpcs)
[14:49:04] *** Joins: ratelius (ratelius@gateway/vpn/protonvpn/ratelius)
[14:50:18] *** Joins: death916_lap (~Death916@user/death916)
[14:50:19] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[14:50:51] *** Joins: wyclif (~wyclif@user/wyclif)
[14:53:26] *** Joins: xa0s (~xa0s@mab.sdf.org)
[14:53:33] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[14:54:46] *** Joins: dvx (~dvx@185.63.97.64)
[14:55:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[14:56:53] *** Joins: death916_lap (~Death916@user/death916)
[14:57:04] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:59:26] *** Joins: wyclif (~wyclif@user/wyclif)
[15:00:59] *** Quits: froggy (56788237@ircip1.mibbit.com) (Quit: https://mibbit.com Online IRC Client)
[15:02:41] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[15:03:05] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.2)
[15:04:11] *** Joins: badsektor (~badsektor@user/badsektor)
[15:04:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 244 seconds)
[15:05:05] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[15:05:28] *** Joins: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0)
[15:06:03] *** Quits: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0) (Remote host closed the connection)
[15:06:51] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[15:07:01] *** Joins: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0)
[15:07:15] *** Joins: cheater (~Username@user/cheater)
[15:07:35] *** Joins: upsala (~zcb@185.213.155.232)
[15:09:26] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[15:10:42] *** Quits: audiocat (~audio@2603-8081-1800-0062-0dee-d686-c170-63c0.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:11:29] *** Joins: audiocat (~audio@2603-8081-1800-0062-418b-325a-12a0-29e3.res6.spectrum.com)
[15:13:31] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[15:14:36] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[15:14:50] *** Joins: larssg (~textual@89.239.212.110.dhcp.fibianet.dk)
[15:14:58] *** Joins: wyclif (~wyclif@user/wyclif)
[15:15:04] *** Joins: skeels (~singurty@110.44.124.173)
[15:15:07] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[15:15:58] *** Joins: pnoud (~pnoud@user/pnoud)
[15:16:16] *** Joins: Leonarbro__ (~Leonet@user/leonarbro)
[15:16:59] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[15:17:13] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 244 seconds)
[15:17:49] *** Joins: Pickchea (~private@user/pickchea)
[15:18:25] *** Joins: dhanesh (~Dhanesh@117.217.44.15)
[15:18:28] <skeels> I wrote this function https://bpa.st/5SSQ to run 5 processes in parallel and keep checking if anyone of them is finished. If finished, start a new process. Don't run more than 5 of them at once. But there is a problem with the part that checks if any of them has completed.
[15:18:38] *** Quits: w0x12ef (~w0x12ef@111.63.14.116) (Ping timeout: 252 seconds)
[15:18:53] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[15:19:20] *** Joins: entuland (~entuland@user/entuland)
[15:20:09] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[15:20:14] <supakeen> What is the problem? Als you seem to be continually scanning the same address.
[15:20:56] <skeels> no i'm not
[15:21:03] *** Leonarbro__ is now known as Leonarbro
[15:21:28] <supakeen> Ah it's just weirdly laid out but you do have a `break` in the while, OK.
[15:21:29] <skeels> i checked that it htop 5 processes do start but other ones don't after they finish
[15:22:12] <supakeen> Where do you remove your processes from the `scans` list again?
[15:22:31] <skeels> the code after scan.poll()
[15:22:36] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[15:22:45] <skeels> oh no after that
[15:22:57] <supakeen> Ah I see you make a new list and replace scans with that.
[15:23:05] *** Parts: blackout69 (~blackout6@net-2-38-155-178.cust.vodafonedsl.it) ()
[15:24:18] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 264 seconds)
[15:24:25] <supakeen> `scan.poll()` returns the exit code which would be `0` for a completed process that exited succesfully.
[15:24:27] *** Joins: Popzi (~Popzi@2.29.154.55)
[15:24:45] <skeels> oh so that is falsy right?
[15:24:54] <supakeen> Yea, so you probably want `is None` on line 15.
[15:25:02] <skeels> should i do scan.poll() == 0 ?
[15:25:04] *** Joins: palasso (~palasso@user/palasso)
[15:25:10] <supakeen> Or that, yes.
[15:25:23] <supakeen> (I'd invert the logic, you also don't want to keep processes that exited unsuccesfully around).
[15:25:42] <supakeen> `if scan.poll() is not None: # remove logic; else: ...`.
[15:26:12] <skeels> lying around? what do you mean?
[15:26:28] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[15:26:58] <supakeen> You want to remove all exited processes from `scans`, if you only check for an exit code of zero you would not be removing processes that exited with an error.
[15:27:09] <skeels> oh right
[15:27:19] <skeels> is not None ftw
[15:29:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:30:09] *** Joins: wyclif (~wyclif@user/wyclif)
[15:30:35] *** Quits: Popzi (~Popzi@2.29.154.55) (Changing host)
[15:30:35] *** Joins: Popzi (~Popzi@user/popzi)
[15:31:08] *** Quits: dhanesh (~Dhanesh@117.217.44.15) (Remote host closed the connection)
[15:31:41] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[15:31:48] *** Joins: Adoi (~Adoi@user/adoi)
[15:32:35] *** Joins: Adois (~Adoi@user/adoi)
[15:35:58] *** Quits: sims (sim@libera/sponsor/sims) (Changing host)
[15:35:58] *** Joins: sims (sim@user/simsingh)
[15:37:17] *** Quits: fstd (~fstd@xdsl-87-79-153-206.nc.de) (Remote host closed the connection)
[15:37:26] *** sims is now known as simsingh
[15:37:30] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 264 seconds)
[15:38:07] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 264 seconds)
[15:38:10] *** Joins: gigo (~gigo@user/gigo)
[15:38:18] *** Parts: gigo (~gigo@user/gigo) ()
[15:39:10] *** Quits: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.1)
[15:42:44] *** Joins: sadg (~odd@cpc113812-lea23-2-0-cust1375.6-3.cable.virginm.net)
[15:45:27] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[15:46:40] *** Joins: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a)
[15:47:52] *** Joins: armin (~armin@unix.porn)
[15:49:37] *** Joins: pnoud (~pnoud@user/pnoud)
[15:50:42] *** Quits: audiocat (~audio@2603-8081-1800-0062-418b-325a-12a0-29e3.res6.spectrum.com) (Ping timeout: 264 seconds)
[15:51:05] *** Joins: dez (uid92154@user/dez)
[15:54:36] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[15:55:37] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[15:55:59] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[15:57:18] *** Quits: skeels (~singurty@110.44.124.173) (Quit: Leaving)
[15:57:51] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[15:59:05] *** Quits: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de) (Quit: oh no they're here)
[16:01:14] *** Joins: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de)
[16:01:54] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:02:17] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:1e4a:1cd5:4170:e3e0)
[16:02:30] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:03:10] *** Joins: maxz (~user@fsf/member/maxz)
[16:03:54] *** Quits: davidlowryduda (~davidlowr@73.61.8.138) (Ping timeout: 240 seconds)
[16:03:58] *** Quits: snalty (~Shhh@user/snalty) (Read error: Connection reset by peer)
[16:04:37] *** Joins: snalty (~Shhh@user/snalty)
[16:06:03] *** Quits: maxz (~user@fsf/member/maxz) (Client Quit)
[16:06:14] *** Joins: davidlowryduda (~davidlowr@73.61.8.252)
[16:06:42] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[16:06:50] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[16:07:01] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[16:07:28] *** Joins: palasso (~palasso@user/palasso)
[16:07:38] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:12:00] *** Quits: jabberwock (~lidless@user/jabberwock) (Remote host closed the connection)
[16:12:02] *** Joins: kosh (~kosh@user/kosh)
[16:12:21] *** Joins: jabberwock (~lidless@user/jabberwock)
[16:12:49] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:12:58] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[16:14:05] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[16:15:34] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 252 seconds)
[16:16:04] *** Joins: sv (sid496265@user/sv)
[16:16:11] <sv> good day everybody.
[16:16:24] <sv> i'm looking for an equivalent of nancyfx, but for python.
[16:16:36] <sv> does anybody know about one?
[16:17:39] <sv> i'm new to python. and i want to build a website, but based on a modern pattern like nancyfx did.
[16:17:49] <nedbat> sv: look at FastAPI
[16:23:07] *** Joins: audiocat (~audio@2603-8081-1800-0062-ecd4-8032-b7c7-1227.res6.spectrum.com)
[16:23:57] <sv> looks awesome, thanks!
[16:24:05] <sv> i'm new to computer.
[16:24:09] <sv> https://i.imgur.com/ijzffEC.png
[16:24:10] <sv> halp
[16:25:59] <nedbat> sv: where did you get the name "PyMsql"?
[16:26:21] *** Quits: cqi (~cqi@2408:8207:252a:e910:df49:a5b1:6ef8:c75a) (Quit: Leaving)
[16:26:23] <Pitr> nedbat: thanks
[16:26:40] *** Joins: Pickchea (~private@user/pickchea)
[16:26:41] <grawity> if I have an ArgumentParser, can I find out whether it recognizes a specific --option?
[16:27:10] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:27:17] *** Quits: rindolf (~rindolf@87.68.240.187.adsl.012.net.il) (Ping timeout: 272 seconds)
[16:27:44] <Pitr> nedbat: looks very active
[16:27:45] <grawity> ...either that, or gather all unrecognized --options as args.
[16:28:50] <grawity> oh, there's parse_known_args() for that
[16:30:48] *** Joins: jdmark (~jdmark@67.8.137.130)
[16:30:58] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[16:34:19] <sv> C:\Users\ad>>python -m pip install PyMSQL
[16:34:19] <sv> '-m' is not recognized as an internal or external command, operable program or batch file.
[16:34:40] <sv> (yeah i know there's a typo in MySQL
[16:35:21] <sv> got it, used pip directly.
[16:35:38] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 252 seconds)
[16:35:42] *** Quits: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0) (Quit: Konversation terminated!)
[16:35:59] *** Joins: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0)
[16:36:03] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:20] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:36:24] <grawity> with that extra '>' in the beginning, it's interpreting ">python" as a file redirection and "-m" as the actual command
[16:36:29] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:43] <sv> oh.
[16:37:46] <sv> stupid fucking me.
[16:37:47] <sv> thanks.
[16:37:55] <sv> is there a FOSS version of swagger?
[16:38:08] <sv> (OpenAPI that is)
[16:38:44] <sv> on swagger.io i see a "try free" button, which automatically makes it uninteresting for me.
[16:39:06] *** Joins: SebastianM (~seba@user/sebastianm)
[16:39:11] *** Joins: drincruz (~drincruz@c-73-215-239-79.hsd1.nj.comcast.net)
[16:40:30] *** Quits: node1 (~node1@user/node1) (Read error: No route to host)
[16:40:49] *** Joins: node1 (~node1@user/node1)
[16:41:06] *** Quits: audiocat (~audio@2603-8081-1800-0062-ecd4-8032-b7c7-1227.res6.spectrum.com) (Ping timeout: 240 seconds)
[16:42:48] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[16:43:26] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:43:45] <nedbat> sv: it looks like it's all Apache licensed
[16:44:20] <sv> so what's a free as in freedom alternative?
[16:44:45] <nedbat> sv: are you objecting to the Apache license? You can do what you want with the code.
[16:44:52] <sv> (also free as in free beer)
[16:45:01] *** Joins: patthoyts (~pat@2001:470:1f1d:26c:8049:b083:718d:14ab)
[16:45:29] <sv> no, i'm objecting to swagger offering me a "try free" button, which implies the use in production environments requires paying money.
[16:45:49] <nedbat> sv: you should read a little deeper. Maybe you are misinterpreting that one button label.
[16:46:18] <sv> oh so it is free? awesome. thanks.
[16:46:50] <nedbat> sv: tbh, i'm not sure what all the components are, but a few clicks deeper, and it's apache-licensed.
[16:47:16] <sv> that doesn't say it's free to use.
[16:47:43] <sv> i'm not interested in the source code, i don't want to pay money for running it in production.
[16:48:18] *** Joins: ksr (~KSR@124.197.12.15)
[16:50:16] <nedbat> sv: ok, but the source code is important if you are going to run it yourself, right?
[16:52:46] *** Quits: ksr (~KSR@124.197.12.15) (Ping timeout: 258 seconds)
[16:53:34] *** Quits: drincruz (~drincruz@c-73-215-239-79.hsd1.nj.comcast.net) (Ping timeout: 265 seconds)
[16:54:05] *** Joins: jazzy (~jaziz@2600:380:854e:22c1:c558:7a2d:a4b2:cfa6)
[16:54:10] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[16:54:29] *** Joins: rsx (~dummy@ppp-188-174-145-49.dynamic.mnet-online.de)
[16:56:30] *** Parts: patthoyts (~pat@2001:470:1f1d:26c:8049:b083:718d:14ab) ()
[16:57:27] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[16:57:39] *** Joins: thiras (~thiras@user/thiras)
[16:59:18] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[17:01:47] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:07:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[17:07:06] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[17:12:06] <bjs> sv: it's not uncommon for companies doing FOSS to also have a service you pay for, for support and physical resources and such
[17:12:25] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:12:33] <sv> nedbat: no, i use binaries.
[17:12:59] <sv> oh wait, that was python.
[17:13:01] <sv> well, yes.
[17:13:12] <sv> actually
[17:13:12] <sv> no
[17:13:16] <sv> as long as it's free.
[17:13:26] <bjs> I mean Python only distributes source code, and FOSS is all about the source code
[17:14:07] <sv> not really.
[17:14:18] *** Joins: cidtest (~cidtest@89.238.185.215)
[17:14:23] <sv> foss is about the freedom of doing whatever you want with the source code.
[17:14:27] <bjs> sv: the word source is literally in the name
[17:14:50] <bjs> sv: anyway, swagger.io's "try free" button seems to have a lot of stuff with it,  is that not what you want?
[17:15:32] <bjs> sv: yes, like taking a copy and running it yourself without paying for it.  But it looks like swagger.io also provides that service for free too, so you don't have to do it yourself?
[17:16:10] <sv> yeah i got it swagger is free.
[17:16:21] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[17:19:02] *** Joins: derelict (~derelict@user/derelict)
[17:20:27] *** Quits: death916_lap (~Death916@user/death916) (Quit: Going offline, see ya! (www.adiirc.com))
[17:21:05] *** Quits: jabberwock (~lidless@user/jabberwock) (Ping timeout: 265 seconds)
[17:23:03] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[17:23:08] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 252 seconds)
[17:26:59] *** Joins: cdown_ (~cdown@89.32.122.5)
[17:29:18] *** Joins: nerdraven (~nerdraven@196.45.51.47)
[17:29:21] *** Quits: nerdraven (~nerdraven@196.45.51.47) (Client Quit)
[17:29:30] *** Joins: LordVan_ (~lordvan@gentoo/developer/lordvan)
[17:30:19] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[17:30:52] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[17:31:36] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[17:31:55] <gitesh> String collection data type than keep it as atomic data type in python?
[17:32:32] <nedbat> gitesh: i'm not sure what you are asking?
[17:32:42] <gitesh> I'm asking why?
[17:32:48] <gitesh> 'why' ?
[17:32:51] <habnabit_> why what
[17:33:01] <gitesh> Why string collection data type
[17:33:04] *** Joins: cliluw (~cliluw@47.147.80.149)
[17:33:15] <gitesh> Than keep it as atomic data type because it exists on keyboard
[17:33:29] <bjs> gitesh: what is a "string collection data type" ?
[17:33:35] <habnabit_> gitesh, i almost understood that until you said 'keyboard'
[17:33:39] <bjs> gitesh: I am not sure what you're asking either
[17:34:13] <gitesh> There are just two atomic data types in python i.e. int and float
[17:34:16] <gitesh> But not char
[17:34:23] <bjs> gitesh: "atomic data types",  what does that mean?
[17:34:39] <gitesh> Atomic data types doesn't have parts
[17:34:54] <bjs> gitesh: ints and floats have parts
[17:35:15] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:35:41] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[17:36:00] <bjs> gitesh: we have a string type so we can store characters (text).  I'm not sure what you're trying to ask
[17:38:21] *** Joins: qzd (uid237765@id-237765.tooting.irccloud.com)
[17:38:32] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[17:39:07] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:1e4a:1cd5:4170:e3e0) (Remote host closed the connection)
[17:39:59] *** Joins: jabberwock (~lidless@user/jabberwock)
[17:41:54] *** Quits: larssg (~textual@89.239.212.110.dhcp.fibianet.dk) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:42:57] *** Joins: PdimH (~pdimh@user/pdimh)
[17:44:48] *** Joins: ksr (~KSR@124.197.12.15)
[17:45:22] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[17:45:39] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[17:45:43] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[17:45:56] <graphitemaster> habnabit_, yo
[17:46:00] <habnabit_> graphitemaster, hi
[17:46:06] <habnabit_> graphitemaster, can you pastebin the code?
[17:46:14] <habnabit_> graphitemaster, that would make this much easier
[17:47:51] <marienz> did you mention how you're running this? I think if nothing calls t.p.log.startLogging() non-error messages are discarded
[17:48:22] *** Joins: zebrag (~chris@user/zebrag)
[17:48:22] <marienz> (...such as the ones from SpewingProtocol)
[17:48:26] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[17:48:30] <habnabit_> oh yeah i couldn't remember what mechanism Spewing* used for output
[17:48:34] *** Quits: ksr (~KSR@124.197.12.15) (Client Quit)
[17:48:48] <habnabit_> but my code doesn't call startLogging either and doesn't run through twistd
[17:48:54] <habnabit_> so i didn't think it was necessary
[17:49:26] <graphitemaster> habnabit_, http://sprunge.us
[17:49:35] <graphitemaster> I should just rewrite it all in Python 3
[17:49:44] <graphitemaster> Bah
[17:49:46] <graphitemaster> http://sprunge.us/JRS0QT
[17:49:47] <marienz> hm, I was going to say twistd would be the obvious way of getting startLogging() called for you, I don't recall what the other ones are. But judging by https://github.com/twisted/twisted/blob/022659ca88dca6361288cd26486942cba0ed77c4/src/twisted/protocols/policies.py#L346 and https://github.com/twisted/twisted/blob/trunk/src/twisted/python/log.py#L719 you do need it.
[17:49:52] <graphitemaster> Stupid copy
[17:50:27] *** Joins: pnoud (~pnoud@user/pnoud)
[17:50:52] <habnabit_> marienz, you might be right
[17:51:07] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[17:51:08] <habnabit_> it has been some years since i wrote this code
[17:52:06] <habnabit_> now to remember how to do the most trivial startLogging..
[17:52:17] <marienz> graphitemaster: just in case I'm right, can you call twisted.python.log.startLogging(sys.stderr)?
[17:52:29] <marienz> I *think* that's the most trivial call
[17:53:08] <marienz> yeah, https://twistedmatrix.com/documents/12.1.0/core/howto/logging.html agrees
[17:53:42] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 264 seconds)
[17:53:48] <graphitemaster> It connected when I enabled logging XD
[17:53:53] <graphitemaster> Disable logging and it does not connect
[17:53:56] <marienz> ...neat
[17:53:57] <graphitemaster> WTF
[17:54:08] <habnabit_> hilarious
[17:54:43] <habnabit_> graphitemaster, is the sasl working too?
[17:54:45] *** Quits: feriman (~feriman@188.163.113.127) (Ping timeout: 268 seconds)
[17:54:49] <graphitemaster> Brilliant
[17:54:52] <marienz> I don't remember if IRCClient tries different nicks in case of collision by default, but if you still had your other client for connecting that account connected that might've done it
[17:55:15] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[17:55:24] <graphitemaster> Closed that down ages ago
[17:55:30] <marienz> no clue then
[17:55:32] *** Joins: drn (~drn@94.240.197.246)
[17:55:42] <graphitemaster> Doesn't matter anyways, it runs in a screen
[17:55:50] <graphitemaster> So any output is not going to kill me
[17:55:56] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:56:28] *** Joins: lmmx (~louis@host-92-0-169-218.as13285.net)
[17:57:19] *** Joins: jabberwock_ (~lidless@user/jabberwock)
[17:57:25] *** Joins: anon9002 (~anon@2405:9800:b620:2c7f::8fa)
[17:58:36] <graphitemaster> Well, thanks habnabit_ and marienz. Long term I got to actually just rewrite this whole thing in something else. Never fun looking at decade old code in a language you gave up half a decade ago :P
[17:58:53] <habnabit_> graphitemaster, why bother rewriting it tbh?
[17:59:23] <graphitemaster> Presumably python2 die
[17:59:31] <habnabit_> graphitemaster, python 2 isn't going away anytime soon
[17:59:33] <graphitemaster> I expect distros to stop even providing it in another decade.
[17:59:34] *** Joins: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net)
[17:59:43] <graphitemaster> So I got 10 years I guess
[17:59:44] <marienz> starting to get nontrivial to install python2 in new distros
[18:00:13] <habnabit_> marienz, pyenv?
[18:00:38] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:01:09] <graphitemaster> No joke I had an uptime of like 7 years on this box until Libera Chat came around and I had to login to ZNC to add an entry for it and ended up realizing it's been ages since I updated. I tried the shellshock bug in my terminal and was totally compromised
[18:01:10] <marienz> I have a (not entirely rational) dislike of managing software installs for stuff where I can reasonably have the distro do it for me
[18:01:14] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[18:01:16] <graphitemaster> So I did a distro upgrade which was scary
[18:01:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[18:01:28] <Peng> marienz: Ubuntu makes it easy to install but doesn't patch CVEs \o/
[18:01:38] *** Joins: leitz (~LeamHall@072-182-158-173.res.spectrum.com)
[18:01:39] <Peng> at least in 20.04
[18:01:48] <habnabit_> marienz, meh. in recent years the prevailing wisdom has been "distros install python for _their_ use, not _yours_"
[18:02:11] <marienz> habnabit_: so far my needs have overlapped sufficiently with theirs I've been able to use theirs
[18:02:13] <habnabit_> marienz, homebrew has come out with a statement to that effect too
[18:02:37] <marienz> Peng: yeah, and although I'd *probably* still be fine I prefer not having to worry about it
[18:02:57] *** Joins: c10l (~c10l@89.34.167.207)
[18:03:04] *** Quits: jabberwock_ (~lidless@user/jabberwock) (Quit: jabberwock_)
[18:03:08] <marienz> (the odds of there being something CVE-worthy in Python itself, or in a part of its stdlib I'm using in a way that's remotely exploitable, seem fairly small)
[18:03:17] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[18:03:21] <bjs> I'd expect it to be quite high :P
[18:03:39] <graphitemaster> Definitely very high
[18:03:54] *** Joins: t1000X (~t1000X@cpe-174-102-106-83.columbus.res.rr.com)
[18:03:56] *** Joins: heco (~redrum@user/redrum88)
[18:04:34] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[18:04:45] <bjs> marienz: fwiw pyenv keeps everything in one place,  and the actual tool is just a couple of shell scripts.
[18:05:19] <bjs> I stopped touching the system Python and now use pyenv to install a fresh Python version whenever I get a new distro, it's made life much easier
[18:05:30] <bjs> and when it goes wrong it's far easier to clean up than when you mess up your system python ;)
[18:06:20] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) ()
[18:06:45] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[18:07:43] <marienz> bjs: I can see that being useful if I need a different version of Python than the system provides, but that hasn't happened to me much recently (I end up not having to touch Python itself, and there's virtualenvs for everything else)
[18:08:13] <bjs> marienz: the last system I had came with 3.8.5 and I used pyenv to install my own 3.8.5 instead
[18:08:30] <bjs> I've screwed up my system Python once too often now :P
[18:08:51] <marienz> bjs: I'm somewhat curious what you're doing to that poor thing, then :)
[18:09:15] <mayhew> it's also super easy to install Python from source with --prefix=$SOMEWHERE_IN_HOME to not add junk to your system directories
[18:09:18] <bjs> marienz: not me,  my distro when it decides to update things
[18:09:26] <bjs> because the system python isn't owned by me, it's owned by the system.
[18:10:14] <marienz> bjs: right, and when it comes to updating to new point releases I consider that a feature, but to each their own
[18:10:17] <bjs> see also:  why `sudo pip` leaves so many people coming here with questions when they update
[18:10:41] *** Quits: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Quit: Leaving)
[18:10:57] <marienz> I really wish "sudo pip" would print some kind of warning (I don't suppose it's started doing that?)
[18:10:58] <bjs> marienz: Python really wasn't designed for in-place updates. distros can do it because they control everything and can update everything at once
[18:10:58] *** Quits: jdmark (~jdmark@67.8.137.130) (Ping timeout: 258 seconds)
[18:10:59] *** Joins: trace (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[18:11:02] *** Joins: nre (~nre@55d47251.access.ecotel.net)
[18:11:04] *** Joins: dieth (~dieth@user/dieth)
[18:11:10] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 252 seconds)
[18:11:21] <marienz> (I don't think "sudo pip" on a system with a distro package manager is typically sane)
[18:11:26] <bjs> but if you're using the system python for something else... then that other thing can break, or if you've done something like upgrade pip (which is a silly thing to do) it can break the system pip
[18:11:42] <bjs> marienz: sudo pip is basically never sane and I wish pip detected and refused, but people still do it :
[18:11:58] <marienz> yeah, don't upgrade the system pip (other than through distro-supported means), use a virtualenv. I'm entirely on board with leaving the entirety of distro site-packages behind.
[18:12:44] *** Quits: dieth (~dieth@user/dieth) (Remote host closed the connection)
[18:12:44] <marienz> (well, not always, I do occasionally use distro-provided packages too, but I consider that more murkier/questionable than using system Python itself)
[18:14:07] <bjs> marienz: well fair enough, it seems odd to me that you are so zealous about using the system python when it could be pulled out from under you or change at any update, breaking your virtualenvs or whatever.  I've never had any issues since I started using pyenv so
[18:14:33] *** Quits: drn (~drn@94.240.197.246) (Quit: Konversation terminated!)
[18:14:55] *** Quits: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net) (Quit: WeeChat 3.2)
[18:16:13] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[18:16:14] *** Joins: dme86 (~dan@user/dan86)
[18:16:50] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:17:18] <mayhew> bjs: that depends on your distro. I've used the system Debian for production websites and have never had issues with it, because Debian only ships security updates.
[18:17:40] <bjs> that's true, maybe I'm over-cautious because I remember python -> python3
[18:17:48] <bjs> esp archlinux :)
[18:17:52] <marienz> I don't think I've been broken by Python point releases yet, they do tend to contain security-related fixes, and I'm zealous in general about not manually managing software updates in cases where the distro can do it (and typically don't have a reason to exclude Python from this zealotry)
[18:18:29] <marienz> if I was on a rolling-release distro that'll update me from (say) 3.9 to 3.10, that's a different story
[18:19:03] <bjs> at the time i thought archlinux was in the wrong, but today i basically just have to admit that the system python is for the system and if i rely on it then my stuff can break at any update
[18:19:14] <supakeen> I'm slightly different, I'd like to manage everything that's not necessary for the OS's operation myself.
[18:19:22] <marienz> oh, I still think archlinux was in the wrong on that one, but that's a different rant :)
[18:19:24] <supakeen> Without it possibly breaking the OS.
[18:19:33] <supakeen> Because I *do* want to run newer Pythons on distros.
[18:19:48] <mayhew> bjs: archlinux and Debian are completely different worlds when it comes to the guarantees you get, I wouldn't run arch in production personally
[18:19:55] <marienz> supakeen: and that's a valid choice too, as long as you frame it as "taking on ongoing management of that software"
[18:20:00] <habnabit_> bjs, it was extremely poorly communicated at best
[18:20:05] <supakeen> That's what it is :)
[18:20:11] <bjs> habnabit_: oh sure
[18:20:30] <bjs> but the idea that "system python is for system, not you" I think was a fairly common belief among the distributions themselves
[18:20:34] <bjs> although the users saw it differently
[18:20:47] <marienz> supakeen: (and ideally it'll include stripping the distro-installed software set bare, only keeping essentials to boot etc)
[18:20:48] <bjs> and now i distrut any system python
[18:20:52] <bjs> distrust*
[18:20:52] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-e058-2cd1-f59d-84bf.res6.spectrum.com)
[18:20:56] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[18:21:12] <supakeen> marienz, hence I generally prefer *BSD but that won't happen anymore in 2021 :)
[18:22:02] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[18:25:42] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[18:25:56] *** Quits: anon9002 (~anon@2405:9800:b620:2c7f::8fa) (Quit: leaving)
[18:29:09] *** Joins: trampel (~trampel@2601:602:9c01:22b8:ba98:1978:4735:fa58)
[18:30:20] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[18:31:12] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[18:31:13] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Read error: Connection reset by peer)
[18:31:49] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[18:32:29] *** Joins: zyeri (~zyeri@tilde.team)
[18:33:36] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[18:34:27] *** Joins: cliluw (~cliluw@47.147.80.149)
[18:35:51] *** Quits: Snyp (~rksht@49.207.194.192) (Quit: WeeChat 3.1)
[18:36:18] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 240 seconds)
[18:36:30] *** Quits: simsingh (sim@user/simsingh) (Quit: brb!)
[18:36:34] *** Joins: LiftLeft (~LiftLeft@154.21.114.224)
[18:37:02] <rendar> is it efficient to have A LOT of little dicts for timeseries data samples?
[18:37:25] <rendar> e.g. {'x':23, 'y':44, 'other_stuff':...}
[18:37:26] <habnabit_> rendar, sure; why not
[18:37:48] <habnabit_> rendar, you could use an attrs frozen class if you know all the keys which will be in the dict in advance
[18:37:58] <rendar> habnabit_: no i don't know them in advance
[18:38:13] <gitesh> do you know how to include {} in format string to show in final string?
[18:38:19] <habnabit_> gitesh, {{ }}
[18:38:23] <rendar> habnabit_: i was wondering to have A LOT (e.g. millions) of little dicts.. isn't that as allocating millions of little hash tables?
[18:38:26] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[18:38:35] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[18:38:40] <habnabit_> rendar, sure. what's wrong with that?
[18:38:47] <Yhg1s> (millions of dicts, yes.)
[18:38:51] <marienz> this is one of those questions where I'd recommend trying with the (ballpark) amount of data you think you'll need and see if it's fast enough
[18:38:58] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[18:39:16] <rendar> Yhg1s: so i get millions of little hash tables?
[18:39:17] <marienz> (and doesn't consume more memory than you have, etc)
[18:39:19] <Yhg1s> rendar: if your alternative is not allocating millions of things, millions of things is usually slower. However, what *is* your alternative, and does the speed difference actually matter?
[18:39:26] <Yhg1s> rendar: you get millions of little *dicts*.
[18:39:32] <Yhg1s> that's what "millions of little dicts" means.
[18:39:37] <rendar> Yhg1s: alternative is class+__slots__
[18:39:37] <gitesh> habnabit_: "{{},{}}".format(a,b)   is not working
[18:39:50] <Yhg1s> rendar: that will just be millions of class instances. How is it better?
[18:39:53] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:39:54] <habnabit_> gitesh, {{{},{}}}
[18:39:56] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[18:40:01] <rendar> Yhg1s: ok, good point
[18:40:15] <habnabit_> gitesh, each {{ becomes a single literal {
[18:40:29] <gitesh> habnabit_: yeah workd
[18:41:21] <marienz> rendar: Python is pretty used to dealing with lots of little dicts (because class instances with a few attributes use one under the hood), so "a lot of little dicts" is not by itself a problem. If they're a problem for your program, the solution may be to restructure how you store your data rather than to swap out the dicts for something else
[18:41:45] <rendar> marienz: fine
[18:42:09] <rendar> marienz: problem is that you get timeseries data.. you cannot restructure timeseries.. timeseries are just..timeseries! you know..
[18:43:39] <ChrisWarrick> rendar: do you need to store millions of data points in memory?
[18:43:50] <marienz> rendar: I don't have enough info to provide useful suggestions, but the first thing that comes to mind is to have lists for all your "x", "y" etc values, and append to those, for example
[18:44:01] <rendar> ChrisWarrick: yes
[18:44:22] <ChrisWarrick> rendar: okay, why though?
[18:45:18] <rendar> ChrisWarrick: i have timeseries from some optimized sources, like pandas or numpy, then i have to traverse them to get pixel points to draw stuff, then i have to save these pixels points to draw again
[18:45:22] <rendar> and again, and so on
[18:45:22] *** Quits: cliluw (~cliluw@47.147.80.149) (Read error: Connection reset by peer)
[18:47:24] <nedbat> rendar: if your question is, "will i have memory problems?" then you need to try it and see.
[18:47:59] <rendar> nedbat: yes, you're right, but my question was more "is there some more optimized to managed that?" but i think that a lot of little dicts are just ok
[18:48:37] *** Joins: eat-oats (~adam@cpc96300-lewi18-2-0-cust378.2-4.cable.virginm.net)
[18:49:20] <nedbat> rendar: btw, i believe now if you use a class, the dicts underlying the objects take less space than the same dicts outside of classes, but i could be wrong about that.
[18:49:30] *** Quits: jazzy (~jaziz@2600:380:854e:22c1:c558:7a2d:a4b2:cfa6) (Ping timeout: 264 seconds)
[18:49:51] <very_sneaky> rendar: what are you trying to optimise for? speed? memory usage? disk space?
[18:50:02] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 252 seconds)
[18:50:04] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[18:50:26] <rendar> very_sneaky: speed
[18:50:41] <rendar> nedbat: oh that's a very interesting point
[18:51:08] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[18:51:08] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:51:42] <bjs> nedbat: rendar: and don't forget if you have classes you can use __slots__ to remove the dicts entirely (if the keys are fixed)
[18:52:09] <rendar> yes, i use __slots__ a lot, but in this case i need flexibility, keys are unknown
[18:52:22] <very_sneaky> i think it will probably come down to how you're reading in the data, how many operations you do and whether you start swapping with the amount you're trying to read in to memory. If you can minimise the number of operations, i.e. read only the data you need to work with and nothing more, then you can reduce execution time
[18:52:22] <rendar> or, there are default keys + some others unknown that may be present or not
[18:53:02] <bjs> rendar: I guess there's a question whether a dict-with-variable-keys for everything would be better or worse than a slots-but-with-None-for-optional thing
[18:53:10] <very_sneaky> if memory concerns are an issue, then it might be worth looking at storing the time series data in something like hdf5 so you can ingest data in a JIT way rather than ingesting whole files to memory
[18:53:23] <bjs> rendar: fixed-keys would reduce overhead in both space and time.
[18:53:31] *** Joins: zeden (~zeden@user/zeden)
[18:54:10] *** Quits: LuKaRo (~LuKaRo@p4fc3397d.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[18:55:03] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[18:55:31] <bjs> (but of course, only if you don't have lots of "empty" slots)
[18:57:59] *** Joins: Pickchea (~private@user/pickchea)
[18:58:52] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[19:00:02] <nedbat> rendar: an empircal experiment: https://gist.github.com/nedbat/3c06fb47c269432a2e7029577e9f8ee8  classes are smaller than dicts
[19:01:47] *** Joins: ray (~ray@user/re)
[19:02:11] *** Joins: pragmaticenigma (~pragmatic@user/pragmaticenigma)
[19:02:50] *** Joins: gggp (~textual@60.10.194.47)
[19:04:04] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:04:38] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[19:04:44] *** Joins: SteveP (~steve@2600:1700:2980:9b00:20f4:de58:657:256c)
[19:05:37] *** Joins: ph88^ (~ph88@2a02:8109:9e00:7e5c:1960:9d14:60f8:23cf)
[19:05:45] <ph88^> what is the go to package for connecting to a postgresql database in python ?
[19:06:06] <SteveP> I am finding that when installing Python via pyenv on Windows, the installation does not include IDLE.  Is there any way to tell pyenv to install this also, or perhaps to install it separately?
[19:06:09] <habnabit_> ph88^, aiopg
[19:06:40] <ph88^> thank you habnabit_
[19:06:57] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[19:06:57] <very_sneaky> habnabit_: not psycopg2?
[19:07:30] <habnabit_> very_sneaky, who writes synchronous code anymore?
[19:07:42] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[19:07:43] <pragmaticenigma> many different libraries for DBs
[19:07:47] <ph88^> habnabit_, do i have to use that package with async ? i dont want to program with async right now
[19:07:55] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[19:07:58] <habnabit_> ph88^, oh. why not?
[19:08:12] <very_sneaky> ph88^: apparently psycopg2 if you're in the dark ages with me and don't program async :P
[19:08:30] <ph88^> because i am noob and i need to get results as soon as possible. i am interested in async but dont have time for to learn extra stuff
[19:08:45] <very_sneaky> ph88^: also check out sqlalchemy
[19:09:28] <ph88^> ye i worked with sqlalchemy before, a bit too overpowered for this project :p nice package though
[19:09:35] *** Quits: rsx (~dummy@ppp-188-174-145-49.dynamic.mnet-online.de) (Quit: rsx)
[19:09:49] <habnabit_> ph88^, i recommend taking a look at it sometime.. i don't think it's hard to pick up now that trio exists: https://trio.readthedocs.io/en/stable/tutorial.html
[19:09:59] <pragmaticenigma> There shouldn't be a consideration of "overpower" but using a tool for the job at hand
[19:10:06] <SteveP> "Who writes synchronous code anymore?"   Probably 95+% of Python devs, lol.
[19:10:49] <ph88^> habnabit_, i tried one time to make an async app that does async console input, webserver and telnet .. pretty cool stuff 8)
[19:11:06] <very_sneaky> async has its place, but only if you have tasks that can benefit from parallelisation, which isn't all tasks
[19:11:19] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 265 seconds)
[19:11:27] <very_sneaky> i feel like i just said the sun is hot
[19:13:02] <nedbat> SteveP: about IDLE: idk how to get it installed, but people quickly move on from IDLE anyway
[19:13:13] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[19:13:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[19:13:46] <pragmaticenigma> I got started with Dr Python as my IDE... those were fun days
[19:14:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:14:27] *** Joins: snalty (~Shhh@user/snalty)
[19:15:43] *** Joins: LuKaRo (~LuKaRo@p4fc323e9.dip0.t-ipconnect.de)
[19:15:53] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:15:55] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[19:16:00] *** Quits: fentanyl (~exit-host@slave.sapi01.de) (Quit: leaving)
[19:16:34] *** Joins: rhax (~yannick@user/rhax)
[19:16:38] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[19:17:17] <rendar> nedbat: wow, that's a very cool experiment, thank you
[19:18:03] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Ping timeout: 265 seconds)
[19:18:10] <rendar> wtf?! `match xxx case:..` what is this notation?
[19:18:24] <rendar> python has switch() cases like C now?
[19:18:30] <habnabit_> not at all like C, no
[19:18:37] *** Quits: SteveP (~steve@2600:1700:2980:9b00:20f4:de58:657:256c) (Quit: Leaving)
[19:18:55] <rendar> habnabit_: what changes?
[19:19:12] <habnabit_> rendar, C's implementation is a naeive jump table that requires ordinal values
[19:19:58] <rendar> ok, i guess that py's are implemented with dicts, underlying
[19:20:12] <habnabit_> rendar, it doesn't use dicts no
[19:20:14] <nedbat> rendar: in this case I could have just used "if/elif"
[19:20:24] <nedbat> rendar: it's a complex pattern-matching semantics
[19:21:02] <rendar> nedbat: is that from py 3.10? but 'match' and 'case' are new py keywords?
[19:21:25] <habnabit_> rendar, have you ever used haskell?
[19:21:30] <nedbat> rendar: yes, it's new in 3.10, and they are soft keywords: they act as keywords at certain places in the syntax.
[19:21:48] <rendar> nedbat: i see
[19:21:55] *** Quits: LuKaRo (~LuKaRo@p4fc323e9.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[19:21:56] *** Joins: LuKaRo_ (~LuKaRo@p4fc32257.dip0.t-ipconnect.de)
[19:21:56] <rendar> habnabit_: nope, a little bit Erlang
[19:22:25] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 268 seconds)
[19:23:11] <gitesh> what is f' strings?
[19:23:21] <gitesh> is it same as .format method?
[19:23:36] <nedbat> gitesh: yes, very similar, but expressions are evaluated inside {} in them
[19:23:51] <nedbat> gitesh: print(f"x + y = {x + y}")
[19:23:55] <gitesh> okay
[19:24:00] *** Quits: nre (~nre@55d47251.access.ecotel.net) (Quit: Leaving.)
[19:24:04] <habnabit_> better: f'{x + y=}'
[19:24:19] *** Joins: bcrouch (~bcrouch@2600:1700:d740:86a0::485)
[19:24:23] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[19:24:37] <Adois> hello, why does the "single leading underscore" exist? would life on python be just going on without it? would not the sun rise regardless, the birds sing?
[19:24:41] *** Joins: dme86 (~dan@user/dan86)
[19:24:52] <rendar> habnabit_: huh? why that '=' before '}' ? another thing i have never seen
[19:24:55] <habnabit_> Adois, sometimes library authors want their state to be private
[19:25:00] <nedbat> Adois: it's an indicator
[19:25:10] <nedbat> habnabit_: i chose to use a simpler form for pedagogical reasons :)
[19:25:29] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[19:25:51] <habnabit_> rendar, try it
[19:26:41] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 252 seconds)
[19:26:41] <rendar> wow, very nice
[19:26:49] <Adois> I read that using it prevents respective module functions from being imported, only if one wants to import them all at once. is this its implied role=
[19:26:50] <Adois> ?
[19:27:19] *** Joins: reset (~reset@user/reset)
[19:27:32] *** Joins: AkechiShiro (~licht@user/akechishiro)
[19:27:46] *** Quits: Adois (~Adoi@user/adoi) (Quit: Leaving)
[19:27:57] * Adoi is still here
[19:28:01] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:28:35] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[19:28:59] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[19:29:20] *** Joins: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de)
[19:29:49] *** Quits: jabberwock (~lidless@user/jabberwock) (Ping timeout: 268 seconds)
[19:30:12] *** Joins: diek (~diek@187.36.4.113)
[19:30:47] <deniska> it's mostly to indicate "don't use this name, if you do, you're on your own"
[19:31:03] *** Quits: Liblx (~Alex@ip4d15ff03.dynamic.kabel-deutschland.de) (Client Quit)
[19:31:13] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[19:31:17] <Adoi> ah, so it is really for the private use of its creator?
[19:31:17] <nedbat> Adoi: in general, the leading underscore means, "this is an inside thing, not an outside thing. don't use it"
[19:31:25] <Adoi> right
[19:31:35] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[19:31:35] <Adoi> so it is really private as it is called
[19:31:43] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3-dev)
[19:31:51] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 258 seconds)
[19:31:54] <Adoi> but then why do I find out about it in the first place=
[19:31:55] <Adoi> ?
[19:32:03] <Adoi> or should I
[19:32:05] <nedbat> Adoi: yes, except that if I want to use your _secret method, I can. But I know I am using an inside thing.
[19:32:24] <deniska> it's more like a warranty void sticker. Irrelevant in most jurisdictions, but keeps people out :)
[19:32:47] <Adoi> so for ex. a developer created a module, but he is still testing it..in this case he informs me of it, and I use it in that state
[19:33:22] <Adoi> anyway, i think i got the idea
[19:33:23] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[19:33:25] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[19:33:29] <Adoi> thank you :)
[19:33:31] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[19:33:44] *** Joins: jabberwock (~lidless@user/jabberwock)
[19:33:44] <habnabit_> Adoi, not all developers are 'he' ;)
[19:34:17] <Adoi> oh a burgeoning pythonite should learn to be politically correct, too, right? :)
[19:34:38] <habnabit_> Adoi, it's about respect, not 'political correctness'
[19:34:41] <habnabit_> Adoi, just say 'they'
[19:34:46] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[19:34:50] <Adoi> right
[19:34:52] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[19:34:58] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[19:35:13] *** Joins: yegar (~yegar@2a00:a040:199:45e6:9692:1413:4498:8b91)
[19:36:16] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[19:36:19] *** Joins: achilleas (~ach@user/achilleas)
[19:36:37] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: Lost terminal)
[19:36:37] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:37:05] <Adoi> I really dont intend to go into it, but "about respect" it is not. I do not think I am disrespecting anyone by using "he". being male, female or other is not an insult, after all.
[19:37:20] <Adoi> it is just your sex
[19:37:24] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[19:37:29] <pragmaticenigma> I consider the preceding single underscore as more a mark of "protected" status rather than private. Python does have a way to mark properties and methods as private, however, it does that through name mangling. I think many devs are not keen on that approach and thus use the single underscore instead.
[19:38:20] *** Joins: gggp (~textual@111.63.14.116)
[19:39:10] *** Quits: LuKaRo_ (~LuKaRo@p4fc32257.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:39:18] <habnabit_> Adoi, you might not intend it as such, but it certainly reads to many as an implication that all devs are male
[19:39:53] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[19:40:43] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[19:40:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:40:56] <Adoi> habnabit_, I already see where you've come from :)
[19:41:06] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Client Quit)
[19:41:14] *** Joins: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net)
[19:41:23] *** Quits: snalty (~Shhh@user/snalty) (Quit: ZNC 1.8.2 - https://znc.in)
[19:41:26] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[19:41:45] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Client Quit)
[19:42:03] <Adoi> the use of double-leading one is referred as "to avoid conflicts of attribute names between classes"..so if I use "pencil" in two different classes within the same code, I should use the double leading underscore", is it meant like that?
[19:42:32] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[19:43:03] *** Quits: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net) (Client Quit)
[19:43:42] *** Joins: Nact (~l@host-85-27-121-83.dynamic.voo.be)
[19:44:03] *** Joins: snalty (~Shhh@user/snalty)
[19:44:16] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[19:44:24] *** Joins: fflam (~mdt@pool-96-253-99-54.rcmdva.fios.verizon.net)
[19:44:59] <pragmaticenigma> Adoi: I would avoid using the double, as I mentioned, it does name mangling and makes the code difficult to work with
[19:45:06] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Client Quit)
[19:45:11] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:45:11] <graingert> Adoi: I use the __because I can't trust my colleagues to not use private methods outside their class
[19:45:22] *** Joins: LuKaRo (~LuKaRo@p4fc322c8.dip0.t-ipconnect.de)
[19:45:23] *** Quits: gggp (~textual@111.63.14.116) (Ping timeout: 252 seconds)
[19:45:34] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:46:54] <pragmaticenigma> Adoi: where are you reading these things?
[19:47:51] *** Joins: hugh_marera (~hugh@189-149-117-154.bitcointernet.co.za)
[19:47:55] <Adoi> pragmaticenigma, in online posts about underscores
[19:49:21] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[19:49:24] <Adoi> graingert, so it happens that single underscore is seen in supposedly "public" parts  of the code?
[19:49:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[19:49:46] <Adoi> pragmaticenigma, https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc
[19:50:05] <graingert> Adoi: ?
[19:51:00] <Adoi> nevermind, graingert..I am new to the topic :)
[19:51:17] *** Joins: pnoud (~pnoud@user/pnoud)
[19:51:36] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[19:52:05] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[19:52:24] *** Joins: wedof (~wedof@2a02:810c:80:1eb0:aaa1:59ff:fe1e:4d38)
[19:53:08] *** Quits: qzd (uid237765@id-237765.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:53:23] *** Joins: gggp (~textual@60.10.194.47)
[19:53:39] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[19:54:22] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:54:32] <pragmaticenigma> Adoi: you should cross reference what people post with the documentation. To make sure you are using the correct terms and descriptions. It helps to make sure you're receiving accurate information as well as using the right terminology
[19:54:39] <pragmaticenigma> Adoi: regarding underscore prefixes: https://www.python.org/dev/peps/pep-0008/#id36
[19:55:03] *** Joins: agentgasmask_ (~agentgasm@user/superboot)
[19:55:04] *** Joins: nre (~nre@55d47251.access.ecotel.net)
[19:56:20] *** Parts: hugh_marera (~hugh@189-149-117-154.bitcointernet.co.za) (Leaving)
[19:56:22] <Adoi> pragmaticenigma, I tried to do so, and found this which more or less tells the same; https://dbader.org/blog/meaning-of-underscores-in-python
[19:56:23] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[19:56:35] *** Quits: jabberwock (~lidless@user/jabberwock) (Remote host closed the connection)
[19:57:05] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[19:58:23] *** Quits: wedof (~wedof@2a02:810c:80:1eb0:aaa1:59ff:fe1e:4d38) (Quit: wedof)
[19:58:41] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[19:58:47] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[20:00:32] <Adoi> in this piece of code, which continues to create a graph, the author seems to have wanted to keep "graph_dict" private, too, for a reason unknown to me; https://www.pastebin.cz/raw/Dnn7Yy9
[20:01:15] <pragmaticenigma> Adoi: It isn't private
[20:01:22] <ali1234> _ isn't really private
[20:01:37] <Adoi> but why on earth is there "_" in front of the variable?
[20:01:45] <ali1234> it's just like saying "this isn't public API, use at your own risk"
[20:01:53] <pragmaticenigma> The developer is telling you that the contents of self._graph_dict is "unimportant" and indicating that you should not trust what is stored there.
[20:02:11] <Adoi> is this information really vital?
[20:02:20] <ali1234> no
[20:02:33] <Adoi> or might we as well not add the same to most any online-posted code?
[20:02:46] <ali1234> sure
[20:02:56] <Adoi> in all respect, this seems like a bit of "vanity"
[20:03:27] <ali1234> what does posting the code online have to do with it?
[20:03:37] <TML> Adoi: Why are you so upset about it?
[20:03:37] <Adoi> no, I meant any code in general
[20:04:07] <TML> Adoi: The developer took a few spare seconds to indicate to you that they would advise you not to rely on that particular piece of internal data.
[20:04:09] <Adoi> TML, I am not..and it has probably matching use cases as people cited above...but when you see it in a code like this, you begin to wonder why it is there
[20:04:45] <ali1234> what do you mean "like this"?
[20:04:51] <TML> Adoi: it's there to say "This is an unstable part of my object's API/interface. Please use the stable parts of the interface instead of directly accessing this property."
[20:04:52] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 268 seconds)
[20:05:02] <ali1234> this is just a tiny part of something bigger
[20:05:16] <TML> There's no mystery
[20:05:46] <Adoi> what can be unstable about creating a dictionary?
[20:05:51] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[20:05:58] <jinsun> Adoi: they might change the dict to some other object later without worrying about breaking other people's code, because they already indicated it shouldn't be used with those underscore
[20:06:02] <TML> Adoi: The name, the datatype, the keys inside it...
[20:06:34] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:06:45] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[20:07:02] *** Joins: diek (~diek@187.36.4.113)
[20:07:19] <TML> Adoi: in other words, literally everything
[20:07:23] <Adoi> ok, so the developer is not sure if he coded it in an intact way, and warns about that (though this is not an API)
[20:07:25] <pragmaticenigma> Adoi: Think of the single underscore as indicating the contents of the property are volatile. The property could be "None" or it could have an integer stored there. The developer is indicating to you, that its not a good idea to rely on that property.
[20:08:05] <TML> Adoi: The developer is suggesting "This object is designed such that I have internal data properties that are not intended to be directly accessed. Do so at your own risk."
[20:08:13] <TML> And everything is an API
[20:08:30] <ali1234> yeah but it isn't enforced
[20:08:45] <TML> it's not enforced, it's simply advisory
[20:08:58] <habnabit_> it's not 'enforced' in C++ either
[20:09:36] <ali1234> you can get around it in java if you try hard enough, its a lot harder though
[20:10:18] <Adoi> this is a roughly 40-line code posted on a website about creating a graph. how am I going to single out that property and use the rest of the code? what I mean is that with code that has no complexity like the examples you mention, what difference does it make to add underscore or not? where is the "risk" you refer to?
[20:10:20] <jinsun> it is "enforced" in python  too if you force it to pass through a pylint review
[20:10:29] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:10:59] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[20:11:19] <Adoi> that is what I meant with "vanity"
[20:11:34] <pragmaticenigma> jinsun: but if I were to create a library, I can't force someone who uses my library to run their code through pylint. I'm not sure what you are trying to exemplify there.
[20:11:37] <Adoi> maybe I am wrong. but that is where I fail to see
[20:11:45] <habnabit_> Adoi, it's a good hint to the reader which parts are implementation details and which parts are public API
[20:12:18] <TML> Adoi: Why would you write a 40 line sample on a website any differently than you'd write production code?
[20:13:22] <Adoi> TML, what risk may the author of the code be referring to in the said code sample?
[20:13:53] <TML> Adoi: I don't know what you mean, but I haven't seen the code sample, either
[20:13:54] <bjs> Adoi: if the author decides to change the code and release a new version
[20:14:07] <bjs> Adoi: the _names might disappear, or change, or whatever. They're not part of the "public" API of the thing.
[20:14:08] <TML> Adoi: also, for all we know, that may be a 40 line snippet of code may actually be a snapshot view of actual production code
[20:14:14] <bjs> Adoi: (is the _usual_ interpretation of _names)
[20:14:21] <jinsun> pragmaticenigma: ya for public code you cannot, but in my company I know who all can use my code and they can be force to run it
[20:15:02] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: No route to host)
[20:16:03] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[20:16:22] *** Quits: yegar (~yegar@2a00:a040:199:45e6:9692:1413:4498:8b91) (Ping timeout: 244 seconds)
[20:16:37] <sv> is there an abbreviation for WAMP, but with python instead of P*P?
[20:16:45] <Adoi> TML, sure that is a possibility. but independent of the current example, I suppose you mean any code sample may contain the leading underscore
[20:17:04] <sv> i'd like to install wampy, but wampy is not a thing.
[20:17:07] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[20:17:13] *** Quits: trampel (~trampel@2601:602:9c01:22b8:ba98:1978:4735:fa58) (Quit: Leaving)
[20:17:18] <habnabit_> Adoi, the leading _ is a good hint to the reader which parts are implementation details and which parts are public API
[20:17:43] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 244 seconds)
[20:19:31] <bjs> Adoi: imagine *you* write a class, which has `def read_sensor1` and `def read_sensor2` functions.  As you write this class what you want to do is write a `def read_a_sensor(sensor_name)` function,  but you don't want people who use your class to use that function (because maybe it's easy to get wrong, or it doesn't check the values or whatever) so you call it `def _read_a_sensor` with an underscore. People can still call if it they really want to
[20:19:34] <bjs> but they know they shouldn't.
[20:19:54] *** Joins: palasso (~palasso@user/palasso)
[20:20:24] * pragma- peers at pragmaticenigma
[20:20:47] <pragma-> As seen in my /whois, my full name is pragmatic-chaos :)
[20:22:22] <pragmaticenigma> sv: you can run a wamp instance and add the necessary mod_wsgi, mod_python, or whatever your favorite module you prefer for Apache.
[20:22:35] <habnabit_> nobody uses mod_python anymore
[20:22:38] <habnabit_> it's dead dead dead
[20:22:40] <Adoi> bjs, but if the function has the kind of fallacies you mention, would a developer not fix them in the first place? is it not like saying "I made a crappy thing, it is up to you to use it or not" ?
[20:22:42] *** Quits: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt) (Remote host closed the connection)
[20:22:50] <sv> i hate wamp. it won't let me disable installing the stuff i don't need.
[20:22:54] <bjs> Adoi: they're not problems that need to be "fixed"
[20:22:55] <sv> but thanks for the hint!
[20:23:15] <rendar> is that possible to import pandas only if its installed, otherwise just use a fallback function?
[20:23:20] <bjs> Adoi: eventually there needs to be a core part of the library that does the unsafe bit of work, or has some attribute which is not supposed to be for outsiders
[20:23:24] <habnabit_> Adoi, requiring every function and class to expose _only_ a public API is absurd
[20:23:30] *** Joins: Vonter (~Vonter@user/vonter)
[20:23:39] *** Joins: sebastianos (~sebastian@user/sebastianos)
[20:23:57] <habnabit_> Adoi, every programming language i'm aware of has a way of defining implementation details which aren't exposed (or can be marked as "do not use" like in python)
[20:24:15] <Adoi> bjs, ok, so not about the parts to be fixed but those that are more "sensitive", maybe?
[20:24:16] <pragmaticenigma> pragma-: I'm more binary, I'm either in a pragmatic state, or enigmatic state. I feel yours is more quantum?
[20:24:35] <jinsun> rendar: try: import pandas except ModuleNotFoundError: ?
[20:24:37] *** Joins: andrzejv (~andrzejv@78-56-77-187.static.zebra.lt)
[20:24:45] <rendar> ok
[20:24:45] <bjs> Adoi: Maybe. Or maybe just "not public": they're part of the implementation.
[20:24:47] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[20:25:02] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59)
[20:25:58] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:26:40] <Adoi> habnabit_ it sure possibly has, but I just dont figure what "internals" a short mundane piece of code can have to beware.
[20:27:05] <habnabit_> Adoi, okay
[20:27:26] <bjs> Adoi: it doesn't have to do anything "bad" for you to beware it
[20:28:28] <Adoi> this probably belongs to the realm of higher experience for me. sorry for bugging all the time. I quit.
[20:29:33] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:29:52] <Adoi> thank you for your patient comments
[20:30:08] <bjs> Adoi: the main purpose of _names is really so the author can say "dont use this"
[20:30:57] <bjs> and there can be multiple reasons why the author might say that.  the simplest might be just that it's ugly and they would rather you use the nicer methods. It might be that it's something that's dangerous and you might break something if you use it. It might be that it's simply an implementation detail and they might change it later.
[20:32:03] *** Joins: jabberwock (~jessy@user/jabberwock)
[20:32:08] *** Quits: dreamer (~dreamer@user/dreamer) (Ping timeout: 252 seconds)
[20:32:17] <bjs> Python itself doesn't care :)
[20:32:41] <Adoi> so it may be for any reason that the developer sees the need for, whether his personal opinion of the code he has written or technical
[20:32:49] <bjs> Adoi: yes.
[20:33:02] <Adoi> it is like a signal to the reader of that opinion
[20:33:07] <bjs> Adoi: yes
[20:33:11] *** Joins: white_shadow (~brey@117.222.227.26)
[20:33:20] <bjs> Adoi: very often the _names won't even appear in the documentation
[20:33:32] <bjs> and sometimes they'll appear and disappear on different versions of the library
[20:33:37] <bjs> as the author changes how they do things
[20:33:56] <Adoi> so it also signifies non-durability
[20:34:02] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[20:34:03] <Adoi> "volatile" as mentioned above
[20:34:13] <bjs> Adoi: it's the author saying "I might change this, and you can't complain if I do"
[20:34:24] <bjs> whereas if they change a non-underscore name, then you can complain at them :)
[20:34:26] <Adoi> right
[20:34:26] <supakeen> It indicates 'please dont use these' for various reasons, instability, not necessary, things might break, etc :)
[20:34:54] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[20:35:16] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 252 seconds)
[20:35:20] <Adoi> but which one of these reasons may possibly apply here; https://www.pastebin.cz/raw/Dnn7Yy9   is it not a perfectly ordinary way of creating a dictionary?
[20:35:44] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[20:35:55] <bjs> Adoi: why does a Graph have to be made using a dictionary?
[20:35:55] *** Joins: dreamer (~dreamer@user/dreamer)
[20:35:56] <Adoi> or maybe the dev had a very personal reason, like he thought he might have used something better
[20:35:56] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[20:36:12] <supakeen> That depends on the class but they'll likely use that dictionary as their underlying storage that could be swapped out.
[20:36:29] <Adoi> supakeen, yes
[20:36:31] <bjs> Adoi: there are many ways to implement a Graph,  and a dictionary is only one way,  and they're saying, you shouldn't rely on the Graph actually storing a dictionary
[20:36:50] <bjs> otherwise it'd be a `class GraphWithDictionaryInside` :)
[20:37:33] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[20:38:02] <Adoi> so leading underscore is a tool of subliminal coding communication
[20:38:18] <bjs> Adoi: well it's not subliminal
[20:38:24] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[20:38:25] <rendar> problem with generators is that once exahusted, you cannot use them anymore, so.. what about a function that has to calculate e.g. min/max of data from a generator to setup a chart, but then it must get that data again to draw the chart? should that function cache that data?
[20:38:50] <bjs> rendar: usually you want to e.g. turn the generator into a list _before_ you hand it to the function
[20:38:57] <bjs> rather than having the functions silently copy the data
[20:39:10] <rendar> bjs: right, but what about it generates a lot of data?
[20:39:23] <bjs> rendar: and what about that case?
[20:39:36] <habnabit_> rendar, how would the function 'cache' the data in such a way that's better than making a list yourself?
[20:40:24] <rendar> well..
[20:41:02] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:41:04] <rendar> the main point of generators, is that you generate at each step, so you don't consume a lot of memory and so on, but.. if i have to create a list everytime.. isn't lost the main purpose of generators?
[20:41:13] <habnabit_> rendar, who said 'every time'?
[20:41:27] <rendar> well, every time in my case
[20:41:28] <Adoi> thank you bjs, thank you again everyone, there are a lot of comments here that will make more sense in the next days, I guess..I think I will move on from underscore for now, whether leading or trailing :)
[20:41:30] <bjs> rendar: I mean, for your specific use case where you want to use the data twice in two places then you need to store the data yes
[20:41:44] <rendar> ok
[20:42:08] <bjs> rendar: you could also re-write your code to combine both steps, so you compute min/max and collect the data to draw the chart at the same time
[20:42:24] <rendar> bjs: i can't do that
[20:42:27] <bjs> but probably the chart needs it all in memory anyway/  it's not clear whether you're actually losing much
[20:42:29] <bjs> rendar: why not?
[20:42:49] <rendar> min/max tells me the zoom of the chart, that i have to setup before i can write 1 single pixel, because i have to create the mapping functions
[20:42:51] *** Joins: attackthemoon (~attackthe@2600:6c40:1d00:560c:b8dc:6c57:c55a:bc6c)
[20:43:06] <habnabit_> rendar, what charting library are you using that doesn't already do this?
[20:43:29] <rendar> habnabit_: a very peculiar charting system about finance that must visualize very specific things
[20:43:32] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[20:43:33] *** Quits: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::c639) (Remote host closed the connection)
[20:43:38] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[20:45:02] <bbear> hello here
[20:45:19] <bbear> any advice on which library to use for env variables based conf parsing
[20:45:48] <bbear> I see python-dotenv out there and environs as well
[20:46:02] <graingert> bbear: https://pydantic-docs.helpmanual.io/usage/settings/
[20:46:05] <habnabit_> bbear, i use python-dotenv
[20:46:45] * Adoi finds a cucumber without leading underscore just the cure for these hot temperatures
[20:48:11] *** Joins: Sir_Andrei (~andrei@r167-57-42-12.dialup.adsl.anteldata.net.uy)
[20:48:14] <Sir_Andrei> Hello
[20:48:37] <Sir_Andrei> People, I wanna know if there is a way to pass positional arguments to a function using a dict.
[20:48:41] <bbear> graingert: thank you, did not know about this pydantic use case.
[20:48:49] <bbear> I am going to try it
[20:48:53] <habnabit_> Sir_Andrei, no
[20:49:08] <bbear> Sir_Andrei: habnabit_ it seemed to me that it's possible
[20:49:10] <habnabit_> Sir_Andrei, if you mean f(**d), that can not pass positional arguments
[20:49:15] <Sir_Andrei> Hmm. The problem I have is that I wanna put a decorator before the function.
[20:49:26] <bbear> basically if you have a function f(x, y)
[20:49:29] <habnabit_> Sir_Andrei, how are those two things connected?
[20:49:33] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:49:38] <Sir_Andrei> In that decorator I need to inspect the stack trace to see where the function is being called. And that decorator needs to be generalizable to each function I wanna use it.
[20:49:40] <bbear> you can call it with f(**{'x': 1, 'y': 2}) and it will work
[20:49:57] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Client Quit)
[20:50:01] <Sir_Andrei> For that reason, I need to receive kwargs in the decorator, and use them to call the function after it.
[20:50:02] <habnabit_> Sir_Andrei, as bbear points out, functions defined in python are registered so they can accept arguments by name _or_ position
[20:50:27] <Sir_Andrei> @bbear. F*cking thanks man!, Ill try it as if they were kwargs.
[20:50:31] <habnabit_> Sir_Andrei, but this isn't done by way of positional arguments at all
[20:51:22] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 265 seconds)
[20:51:54] *** Quits: ntdll_ (~ntdll@user/ntdll) (Ping timeout: 264 seconds)
[20:52:29] *** Quits: tims (~tims@193-82-247-42.tpgi.com.au) (Ping timeout: 252 seconds)
[20:52:42] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[20:52:58] *** Joins: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10)
[20:54:15] *** Joins: Celeo (~Celeo@2603-8001-3301-2e00-3068-1ccc-7f3d-2906.res6.spectrum.com)
[20:55:26] *** Quits: nre (~nre@55d47251.access.ecotel.net) (Quit: Leaving.)
[20:56:10] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[20:57:51] *** Quits: summersault (~summersau@2804:7f0:3886:c810:5507:ed9c:d5b4:3d10) (Remote host closed the connection)
[20:59:16] *** Joins: feriman (~feriman@188.163.113.127)
[21:05:09] *** Joins: Cleverness (~clevernes@pool-100-2-45-18.nycmny.fios.verizon.net)
[21:05:45] *** Joins: yegar (~yegar@2a00:a040:199:45e6:9692:1413:4498:8b91)
[21:06:01] *** Joins: c4017_ (~c4017@S010664777dab66f3.vf.shawcable.net)
[21:06:15] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[21:06:19] <nubonix> is there a way to crop a program's window, and add a frame around it? the program im using is an .exe
[21:07:34] *** Joins: mrkz_c (uid503554@user/mrkz-c/x-7247691)
[21:08:21] <pragmaticenigma> nubonix: I think more information is needed regarding what you are trying to do
[21:08:57] <nubonix> create my own window using something like pyqt5, bind another program within that window
[21:09:02] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:09:30] *** Quits: c4017 (~c4017@S010664777dab66f3.vf.shawcable.net) (Ping timeout: 240 seconds)
[21:09:41] <pragmaticenigma> nubonix: Unless the other application somehow offers the ability to embed itself into another application, i'm not sure that's possible
[21:10:20] <nubonix> has to be, has been done by about 10 other people
[21:10:28] <nubonix> for this one particular program
[21:10:28] *** Quits: eat-oats (~adam@cpc96300-lewi18-2-0-cust378.2-4.cable.virginm.net) (Ping timeout: 252 seconds)
[21:10:29] *** Joins: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net)
[21:10:57] *** Quits: Linux77 (~kvirc@186.235.105.225) (Ping timeout: 268 seconds)
[21:11:26] <nubonix> well, i know a hacky way of doing it, but im not sure how the cropping would work
[21:12:31] <pragmaticenigma> you certain those other people didn't do it a hacky way... perhaps you need to reach out to them directly?
[21:12:46] <nubonix> theres an advertisement at the bottom of the window, and i want to remove that. could create a window that overlays the other program, crop the window that i create which overlays their program
[21:12:56] <nubonix> [im not redistributing this]
[21:13:45] <nubonix> i have no idea how the others did it tbh
[21:13:58] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[21:14:12] <nubonix> but anyways, as you agree, the hacky way seems good, as it works so, hmm, alright, thanks :)
[21:19:24] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[21:20:11] *** Quits: yegar (~yegar@2a00:a040:199:45e6:9692:1413:4498:8b91) (Quit: Leaving)
[21:20:56] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[21:22:04] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[21:23:40] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[21:25:51] *** Joins: seednode (~seednode@user/seednode)
[21:26:03] *** Quits: white_shadow (~brey@117.222.227.26) (Quit: Leaving)
[21:28:07] *** Quits: mesaboogie (mesaboogie@user/mesaboogie) (Ping timeout: 272 seconds)
[21:30:07] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:30:26] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 252 seconds)
[21:32:32] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:34:00] *** Joins: s8n (~s8n@user/s8n)
[21:34:55] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[21:35:27] *** Joins: Pickchea (~private@user/pickchea)
[21:36:16] *** Joins: brickfat (~brickfat@user/brickfat)
[21:37:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[21:37:35] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[21:37:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[21:38:21] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[21:38:39] *** Joins: Linux77 (~kvirc@186.235.105.213)
[21:39:47] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:39:59] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:40:01] *** Parts: birkoff (birkoff@user/birkoff) ()
[21:40:21] *** Joins: entuland (~entuland@user/entuland)
[21:40:26] *** Joins: mesaboogie (~mesaboogi@user/mesaboogie)
[21:40:27] *** Quits: jheblu (~user@116.68.98.40) (Quit: ERC (IRC client for Emacs 27.2))
[21:41:49] *** Joins: mesa (mesaboogie@user/mesaboogie)
[21:43:04] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:27] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[21:43:56] *** Joins: jdmark (~jdmark@67.8.137.130)
[21:44:27] *** Quits: rendar (~rendar@user/rendar) ()
[21:44:52] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[21:45:08] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[21:45:11] *** Joins: entuland (~entuland@user/entuland)
[21:45:20] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[21:45:31] *** Quits: mesaboogie (~mesaboogi@user/mesaboogie) (Killed (NickServ (GHOST command used by mesa!mesaboogie@user/mesaboogie)))
[21:46:32] *** Quits: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca) (Quit: Leaving)
[21:46:45] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[21:48:25] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:49:06] *** Quits: superboot (~agentgasm@user/superboot) (Killed (zinc.libera.chat (Nickname regained by services)))
[21:49:06] *** agentgasmask_ is now known as superboot
[21:49:24] *** Joins: agentgasmask_ (~agentgasm@user/superboot)
[21:49:51] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[21:49:52] *** Quits: bcrouch (~bcrouch@2600:1700:d740:86a0::485) (Remote host closed the connection)
[21:50:27] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[21:52:07] *** Joins: pnoud (~pnoud@user/pnoud)
[21:52:17] *** Joins: Overflwn (~Overflwn@2a02:8070:c3b7:5b00::c639)
[21:53:00] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[21:53:12] *** Joins: pwnd_sfw5 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[21:53:26] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[21:53:46] *** Joins: justinf210 (~justinf21@172.sub-97-44-1.myvzw.com)
[21:54:24] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[21:54:24] *** pwnd_sfw5 is now known as pwnd_sfw
[21:55:03] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[21:55:12] *** Joins: seednode (~seednode@user/seednode)
[21:55:14] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:55:53] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[21:56:26] *** Joins: entuland (~entuland@user/entuland)
[21:57:04] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[21:57:16] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[21:57:38] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[21:57:43] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 268 seconds)
[22:02:35] *** Joins: Paul (~Paul@user/paul)
[22:02:46] *** Quits: rannnn8888 (~rannnn888@bzq-79-177-151-167.red.bezeqint.net) (Ping timeout: 246 seconds)
[22:02:48] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[22:03:20] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[22:03:27] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:03:58] *** Joins: thiras (~thiras@user/thiras)
[22:04:06] *** Joins: derelict (~derelict@user/derelict)
[22:06:38] *** Joins: Akuli (~Akuli@87-94-111-168.bb.dnainternet.fi)
[22:07:24] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[22:07:37] *** Joins: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912)
[22:09:38] *** Quits: Sir_Andrei (~andrei@r167-57-42-12.dialup.adsl.anteldata.net.uy) (Ping timeout: 265 seconds)
[22:11:00] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[22:11:34] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 265 seconds)
[22:12:08] *** litharge sets mode: -b $a:blackandproud
[22:12:58] *** Quits: agentgasmask_ (~agentgasm@user/superboot) (Quit: leaving)
[22:14:33] *** Joins: kujo (~kujo@188.166.12.52)
[22:14:43] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[22:14:53] *** Quits: Cleverness (~clevernes@pool-100-2-45-18.nycmny.fios.verizon.net) (Quit: Leaving)
[22:16:55] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[22:17:53] *** Quits: justinf210 (~justinf21@172.sub-97-44-1.myvzw.com) (Ping timeout: 265 seconds)
[22:18:25] <kujo> hoping to get guidance on using an IDE with venv.  I have been using spyder but would be willing to switch if taking advantage of virtual environments is easier with a different IDE
[22:20:22] *** Joins: binarymutt_ (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net)
[22:24:13] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:49] <kujo> i am using ubuntu as my host OS
[22:26:25] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:26:42] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[22:26:42] <jinsun> kujo: vscode
[22:27:45] <jinsun> kujo: https://code.visualstudio.com/docs/python/environments
[22:29:44] <kujo> jinsun: thanks... looking into it now
[22:31:54] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[22:33:08] <ChrisWarrick> kujo: pycharm is a great ide and it also understands virtual environments
[22:39:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[22:40:18] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:41:30] *** Joins: ray (~ray@user/re)
[22:42:45] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[22:43:35] *** id is now known as \r
[22:46:28] *** mesa is now known as mesaboogie
[22:47:11] *** Joins: wootehfoot (~wootehfoo@c-772e524e.032-69-6762675.bbcust.telenor.se)
[22:47:24] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Remote host closed the connection)
[22:48:12] *** Joins: jinsun_ (~quassel@user/jinsun)
[22:48:22] <doc> I'm building a system that's going to track people who want to sign in for an event, and I want to use redis to store the new sign ins, at the same time use that data to group them together for car pooling. New to redis, would using a kv pair per event with pipelines+transactions to update it be the right way to approach it in your experience? I'm worried about race conditions.
[22:48:29] *** Joins: nneonneo (~b2xiao@wikipedia/nneonneo)
[22:48:33] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[22:50:42] <graingert> doc: Use postgresql
[22:50:42] <pragmaticenigma> why do the assignment of carpools at the time of sign-up. I would think it more efficient to perform that action closer to the date of the event, to make the most efficient use of available vehicles and avoid confusion about carpools being changed through out the signup period
[22:50:53] <doc> graingert: why?
[22:51:04] <graingert> It's got atomic transactions
[22:51:17] *** Quits: b2xiao (~b2xiao@wikipedia/nneonneo) (Ping timeout: 252 seconds)
[22:52:09] *** Joins: justinf210 (~justinf21@172.sub-97-44-1.myvzw.com)
[22:52:56] <doc> pragmaticenigma: this is essentially herding cats. We don't know who'll be there until the event has started. This system is only going to exist to try and make herding cats a little easier than what we do know, which is a paper sign in :)
[22:53:28] <doc> graingert: isn't a redis transaction? That's what I'm reading
[22:54:10] <pragmaticenigma> how are people signing in? if it's one person at a time, then there is no concern for a race condition.
[22:54:39] *** Quits: wootehfoot (~wootehfoo@c-772e524e.032-69-6762675.bbcust.telenor.se) (Quit: Leaving)
[22:55:18] <pragmaticenigma> also, this is python, not redis ... you might want to double check which channel you intended your question for
[22:55:23] <doc> pragmaticenigma: it's not, there'll be a piece of paper with "sign in at {url}" and families will show up all at once, and we need them all to sign in (for different app functions) and then group themselves together - which is part of the UI
[22:55:39] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:56:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[22:56:20] <doc> it's redis in python, and trying to figure out the best way to build it as a whole
[22:56:33] *** Quits: justinf210 (~justinf21@172.sub-97-44-1.myvzw.com) (Ping timeout: 258 seconds)
[22:56:38] <pragmaticenigma> doc: the best way is the way that works for you
[22:57:02] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[22:57:10] <doc> pragmaticenigma: which I don't know, because as I said I'm new to redis, and was hoping for a sanity check on that setup. Why so hostile?
[22:57:30] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[22:57:58] <bbear> let me rephrase your question: I'm building <complex system>. New to <db system>, would using <db system> with <feature> the right way? I'm worried about race conditions.
[22:58:09] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:cdae:ea4b:93a4:1c59) (Quit: Leaving)
[22:58:34] *** Joins: wootehfoot (~wootehfoo@c-772e524e.032-69-6762675.bbcust.telenor.se)
[22:58:45] <bbear> doc: there's no way we can tell you if redis is going to fit the bill for what you are doing, it's just very good at what it does, and for the details, you better check the doc.
[22:58:50] <pragmaticenigma> not trying to be hostile. asking "the best way" encourages opinions rather than facts. it would be better to ask your question in a form that derives a result
[22:59:20] <doc> If it was sql and someone came and said "I need to do a payment system with sqlalchemy and I'm thinking about using transactions, can those of you who have experience with payment systems tell me if transactions are the way to go?" be a reasonable question?
[22:59:25] *** Joins: iflema (~ian@user/iflema)
[22:59:48] <bbear> nope
[22:59:54] <doc> bbear: I didn't say just redis, I said redis with pipelines+transactions. I've looked into the api, I just want a sanity check
[22:59:56] *** Quits: wootehfoot (~wootehfoo@c-772e524e.032-69-6762675.bbcust.telenor.se) (Changing host)
[22:59:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:59:57] <bbear> you mean SQL transactions ?
[23:00:13] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[23:00:30] <pragmaticenigma> transactions are a way to ensure that existing data is not influenced by incomplete data. it is not a way to prevent race conditions, and can actually cause more of them
[23:01:00] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:01:06] <Linkandzelda> Why does argparse put all my arguments into lists of single items?
[23:01:22] <grawity> how do you set up argparse?
[23:01:24] <doc> pragmaticenigma: so what would be a better way?
[23:01:43] *** Joins: sims (sims@libera/sponsor/sims)
[23:01:49] <bbear> yeah and the RDBMS or key/value store you use is not going to prevent anything, but the way you program use it and account for possible race conditions will
[23:02:33] <bbear> what you can be reasonably sure is that what's written in the redis doc or pg doc is almost guaranteed to work with less bug than any program you would write on top
[23:02:56] <doc> bbear: yeah, that's why I said in the initial question about a per event store. I wasn't sure the whole setup would be fast enough to prevent problems. Was hoping someone might be able to tell me.
[23:03:02] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[23:03:06] <Linkandzelda> grawity: figured it out, if i use nargs=1 everything becomes a list
[23:03:08] <pragmaticenigma> doc: for starters, I wouldn't try to do so much at one time. I would have everyone sign into this application and register themselves. the admin, shortly before preparing the carpools to leave would run the operation to separate the groups into vehicles.
[23:03:15] <Linkandzelda> removing that i get single items like i expect
[23:03:17] *** Joins: maxking (~maxking@54.11.83.34.bc.googleusercontent.com)
[23:03:33] <pragmaticenigma> doc: the application can then tell people which carpool group they are a part of
[23:03:39] <doc> pragmaticenigma: we'd like that too, but this is a random bag of people. People say they'll show up then don't kind of a thing.
[23:04:59] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:05:42] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 265 seconds)
[23:06:29] <pragmaticenigma> doc: analyze what you currently do, make a chart of the actions taken. design an approach and a workflow. at the moment, your objective is unclear
[23:06:56] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:08:04] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 252 seconds)
[23:08:47] <pragmaticenigma> doc: what you have explained so far, sounds like you're trying to directly translate the herding of cats in the real world, to the computer.
[23:10:05] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 265 seconds)
[23:11:08] <doc> I've already done that, and the approach I mentioned is the possible solution I came up with that I wanted sanity checked. Yes, I'm trying to solve it using a computer. That's what we do.
[23:11:36] <doc> This isn't a thing we can solve by changing the way people behave to fit the program unfortunately.
[23:12:18] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[23:12:44] <pragmaticenigma> doc: my approach would be to have people sign-up wherever they are, at home or day of in the parking lot the day of. the only thing is to clearly communicate the sign-ups are closed at a specific time. the application would be used for three purposes, sign-up, check-in, and car pool designation. People sign up at the leisure. The day of, when they have arrived at the designated parking lot, they check-in. Then before the designated
[23:12:44] <pragmaticenigma> depature time, everyone is assigned a carpool. If you're not checked-in by that time, you're not considered part of the group.
[23:13:49] <pragmaticenigma> You explained that you wanted people to sign in and be assigned a car-pool at the same time. Those to me are two separate operations, and do not account for the human factor.
[23:13:50] <doc> We can't turn people away, even if they show up late, reorganising the cars isn't a problem.
[23:14:27] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[23:14:49] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[23:14:52] <doc> As for being at the same time, that's why there's a potential race condition. The car pool assignment is done in parallel, not by the system. Too many variables as to who gets assigned to what car.
[23:14:59] *** Joins: Adoi (~Adoi@user/adoi)
[23:15:05] <doc> For now it's manual, eventually I'll use some ML to determine it, but need a dataset first
[23:15:15] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:15:25] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:15:36] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:15:47] *** Joins: robinho (~robinho@user/robinho)
[23:15:51] <doc> manual as in people will do it through a different UI
[23:16:01] *** Quits: TheVasily (~Sheepdog1@pool-108-48-37-171.washdc.fios.verizon.net) (Quit: Leaving)
[23:16:28] *** Joins: ntdll_ (~ntdll@user/ntdll)
[23:16:35] <pragmaticenigma> the likely hood of a small group having two or more users perform the operation at the exact same moment is tiny. worry about getting the thing built first, then look for weak points
[23:17:15] <pragmaticenigma> you're trying to optimize the program before you even have a program written
[23:17:18] <doc> I think so too, which is why I figured transactions would prevent breakages at least, but if they don't then I figured someone here would have experience to be able to tell me
[23:17:34] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[23:17:40] *** Joins: aslicedbanjo (~aslicedba@host86-134-28-120.range86-134.btcentralplus.com)
[23:17:45] <doc> I'm not optimising it, I'm trying to not have the system be a failure when it's put into use
[23:19:31] <pragmaticenigma> the race condition can only be solved when one knows where and when it will happen. can't predict those points. You're looking at using redis which is a high availability, in memory DB. chances are, it already has some mitigation for race conditions on the queries it accepts.
[23:19:51] <pragmaticenigma> otherwise, the only option I know of in more traditional databases are table locks. and those are ill-advised
[23:20:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:20:22] <doc> hence my reason for asking people I thought would have experience
[23:20:49] *** Joins: Intruder777 (~Intruder7@ppp-109-104-160-59.wildpark.net)
[23:20:50] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[23:21:51] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 258 seconds)
[23:22:54] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[23:23:02] *** Parts: Veticus (~Veticus@84.238.78.218) (Aight i'm heading out!)
[23:26:04] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[23:28:26] *** Quits: Intruder777 (~Intruder7@ppp-109-104-160-59.wildpark.net) (Changing host)
[23:28:26] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[23:31:33] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[23:31:56] *** Joins: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de)
[23:33:32] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:33:34] *** Joins: magla (~gelignite@55d45fb8.access.ecotel.net)
[23:33:51] *** Joins: pnoud (~pnoud@user/pnoud)
[23:34:39] <pragmaticenigma> doc: I don't believe any amount of experience someone has, will help you avoid a bug or race condition. Just get the code written, and come back for assistance in finding out why something isn't working the way you expect it to.
[23:35:14] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:35:16] *** Parts: Intruder777 (~Intruder7@user/intruder777) (Leaving)
[23:36:17] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[23:37:10] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[23:38:17] *** Joins: ente_ (~ente@p200300dc5f349401feddbc97e8bd2817.dip0.t-ipconnect.de)
[23:39:05] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 265 seconds)
[23:40:09] *** Quits: diek (~diek@2804:14d:7681:82bd:7183:d2c9:d4f8:912) (Remote host closed the connection)
[23:40:23] *** Joins: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[23:41:53] <bbear> looking for race condition in a not-yet designed system is like trying to observe the cosmic microwave background when all you have is a pair of binoculars
[23:42:17] <pragmaticenigma> true words
[23:42:28] <ioxzev1z> bbear, technically speaking you can observe the cmb on an crt tv showing static
[23:42:36] <ioxzev1z> 1% anyway
[23:42:54] <pragmaticenigma> I think we found our QA
[23:43:00] <bbear> oh really ? I didn't know
[23:43:14] <ioxzev1z> bbear, fwir yes, 1% of tv static is cmb
[23:43:17] *** Joins: greatgatsby (~greatgats@bras-base-toroon0411w-grc-52-142-114-106-27.dsl.bell.ca)
[23:43:32] <doc> that's a bit of an overstatement... are you telling me you don't build systems with transactions? You wait for it to break, then add them?
[23:44:01] <pragmaticenigma> I use transactions for their intended purpose. What you are describing isn't what a transaction is designed for
[23:44:03] <bbear> ioxzev1z: basically separing background noise from real CMB is the tricky part I suppose :)
[23:44:35] *** Joins: Payam (~Payam@138.106.57.132)
[23:44:58] <doc> pragmaticenigma: you're missing the point of that question. You're building a system in a way to try to head off problems before they happen.
[23:45:01] <Payam> Hi
[23:45:30] *** Joins: diek (~diek@187.36.4.113)
[23:45:47] *** Joins: eck0_ (~eck0@047-007-119-133.res.spectrum.com)
[23:45:51] *** Parts: eck0_ (~eck0@047-007-119-133.res.spectrum.com) ()
[23:45:53] *** Joins: eck0_ (~eck0@047-007-119-133.res.spectrum.com)
[23:46:34] <bbear> doc: actually your question makes me think of a design interview question. We can try to guess what problems are going to happen if the discussion goes long enough, but basically the way to solve this kind of question is: design a simple system that supposingly do what you want, and then look at corner-cases, race-conditions and find how to deal with them.
[23:46:34] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 252 seconds)
[23:47:13] <pragmaticenigma> doc: I'm not an oracle, I can't predict where problems will occur. A DB transaction is for perform a series of sequential Db operations prior to committing records inserts and updates without impacting the existing data in the database, or interfering with other operations.
[23:47:50] <bbear> I am not a good designer, but I guess no design is going to be perfect up-front, so going with something less than perfect is acceptable. If you need to prevent race conditions, you can always add queues, distributed locks and what not to your system.
[23:48:17] <pragmaticenigma> they're helpful, especially in highly normalized DBs, as you may have to write/update records across several tables.
[23:49:00] *** Quits: rhax (~yannick@user/rhax) (Quit: Leaving)
[23:49:32] <doc> again, you're focused on the race condition topic and missing the point of the question, do you add transactions from the outset or wait until someone files a bug?
[23:50:29] *** Joins: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:50:29] <pragmaticenigma> doc: wait for the bug
[23:50:44] <doc> wow, ok
[23:54:10] <pragmaticenigma> doc: A DB transaction is for staging data to be written to the database. It does not provide any other mechanism. A side effect is that other processes will not see the data in the transaction until it has been committed to the database. That is the purpose of the transaction.
[23:55:06] *** Quits: pneff_ (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 252 seconds)
[23:57:01] *** Joins: arawn (~arawn@cpe-72-227-64-168.maine.res.rr.com)
[23:57:16] <pragmaticenigma> In other words, if my code is writing to the database. I do not have to worry about someone else's code reading my data, until I tell the database to make it available via the commit command. I've worked in real-time data processing applications, and the usage of a transaction only ever came after a bug was found, and it was determined that the sequence of the code operations could not be altered, to prevent the record from being read by
[23:57:16] <pragmaticenigma> another process, except to use the transaction.
[23:59:14] *** Quits: samhain (~samhain@user/samhain) (Quit: ZNC - https://znc.in)
[23:59:38] *** Quits: greedom (~greedom@2001:16b8:2eaf:f00:d9fd:24e4:94e9:32e0) (Quit: Konversation terminated!)
[23:59:56] *** Quits: aslicedbanjo (~aslicedba@host86-134-28-120.range86-134.btcentralplus.com) (Quit: Leaving.)
