[00:00:39] <rotateq> welcome foxfromabyss :)
[00:00:47] <foxfromabyss> Nice to be here :)
[00:01:01] <foxfromabyss> yeah, seen that list. Got confused by the fact that it's unordered and wasn't sure what to start with
[00:01:53] <rotateq> the one they mentioned ^^ then first stick with one source and step by step
[00:02:14] <_death> foxfromabyss: it's also somewhat out of date..
[00:08:11] *** Quits: foxfromabyss (~foxfromab@2a01:c22:a58d:fd00:878e:3506:e8d4:b16f) (Ping timeout: 256 seconds)
[00:10:24] *** Joins: foxfromabyss (~foxfromab@2a01:c22:a58d:fd00:878e:3506:e8d4:b16f)
[00:10:47] <foxfromabyss> tfw internet dropped :(
[00:10:47] <foxfromabyss> anyway thanks for the suggestions!
[00:10:53] <rotateq> oh noez
[00:10:59] <rotateq> :)
[00:15:17] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Ping timeout: 240 seconds)
[00:18:35] *** Joins: miique_ (~miique@181.46.139.166)
[00:19:31] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 256 seconds)
[00:21:41] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[00:24:15] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Remote host closed the connection)
[00:24:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:24:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:27:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:31:08] *** Quits: rotateq (~user@185.66.193.48) (Quit: ERC (IRC client for Emacs 27.2))
[00:34:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[00:36:04] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:37:31] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:41:43] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Read error: Connection reset by peer)
[00:42:51] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:52:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:55:52] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[00:57:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[00:58:04] *** theothor` is now known as theothornhill
[00:58:47] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[00:59:02] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[00:59:28] *** Joins: jeosol (~jeosol@user/jeosol)
[01:00:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:06:04] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[01:06:17] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[01:09:47] *** Joins: srhm (~srhm@user/srhm)
[01:12:09] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[01:18:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[01:18:13] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:19:04] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:a965:2f8a:47ef:cba2) (Remote host closed the connection)
[01:20:19] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:20:52] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[01:24:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:26:24] *** Quits: foxfromabyss (~foxfromab@2a01:c22:a58d:fd00:878e:3506:e8d4:b16f) (Ping timeout: 256 seconds)
[01:29:57] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 240 seconds)
[01:31:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Remote host closed the connection)
[01:31:24] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[01:32:58] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:34:50] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:40:53] *** Joins: winning-luser (~winning-l@2601:8c1:80:70d0::4b06)
[01:41:54] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[01:48:48] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Remote host closed the connection)
[01:51:54] *** Quits: winning-luser (~winning-l@2601:8c1:80:70d0::4b06) (Remote host closed the connection)
[01:51:55] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:b566:ba1e:b76b:4040)
[01:53:57] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:98c5:85f6:eace:a4d7) (Ping timeout: 240 seconds)
[01:53:59] *** Quits: jpl01 (~user@2001:16b8:494f:ef00:989:fe50:bfa6:5b74) (Read error: Connection reset by peer)
[02:05:17] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[02:12:14] <yottabyte> in slime, I have a forever loop that I want to terminate, how can I do this? I've tried C-c C-c
[02:12:56] <yottabyte> basically I have a function that's going forever I want to stop from running
[02:15:09] <nij-> M-x slime-interrupt?
[02:16:12] *** Quits: pve (~pve@37-136-83-144.rev.dnainternet.fi) (Quit: leaving)
[02:16:40] <yottabyte> ooo yeah, and then select abort thread. I think that did the trick. is there a keyboard shortcut for that?
[02:16:57] *** Joins: akoana_ (~ah@user/akoana)
[02:17:11] <_death> C-c C-c is shortcut for slime-interrupt..
[02:17:31] <nij-> Try M-x describe-function to see if under your config there's a binding.
[02:17:49] <nij-> Or M-x counsel-describe-function
[02:17:56] <phoe> aeth: some preliminary stuff that is inspired by your code is currently at https://github.com/phoe-trash/value-semantics-utils
[02:18:04] <_death> you could also go to the slime threads buffer C-c x t, choose the REPL thread and type d (to break into the debugger).. but in some cases that also may not work.. then maybe go to the inferior-lisp buffer and try calling interrupt-thread from there
[02:18:07] <phoe> I'll expand on it once I'm fresher
[02:18:09] <phoe> good night for now
[02:18:44] <_death> (it's C-c C-x t actually)
[02:19:28] <yottabyte> thanks
[02:23:07] <nij-> Using counsel-describe-function can tell you what it is bound to on the fly. It's very neat.
[02:23:34] <nij-> E.g. this is what I see: https://bpa.st/6SHA
[02:26:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[02:26:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:29:21] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:29:47] *** Quits: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it) (Remote host closed the connection)
[02:34:57] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[02:34:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:35:38] <bollu> You are approaching the heap size limit for the Personal Edition of LispWorks. If you choose to continue now you are advised to save your work at regular intervals. :(
[02:35:42] <bollu> Hmm, I can't setup quicklisp
[02:36:01] <bollu> well, no, I can setup quicklisp, I just can't load FSet sadly
[02:37:09] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:40:31] *** Joins: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de)
[02:42:54] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[02:44:43] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:46:30] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:48:15] *** Quits: jeffrey (~jeffrey@2001:1c00:b1c:4100::80c0) (Quit: Client quit)
[02:53:56] <yottabyte> oh that's very cool
[02:54:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:58:18] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[02:58:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[03:04:37] *** Quits: gaqwas (~john@dynamic-077-009-000-209.77.9.pool.telefonica.de) (Ping timeout: 240 seconds)
[03:06:44] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:13:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:26:18] *** Joins: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b)
[03:29:13] *** Joins: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net)
[03:29:40] *** Quits: miique_ (~miique@181.46.139.166) (Read error: Connection reset by peer)
[03:40:28] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (#commonlisp)
[03:45:20] *** Joins: miique (~miique@181.46.139.166)
[03:50:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: Lost terminal)
[03:54:49] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:59:40] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[04:01:38] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:16:00] *** Quits: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net) (Quit: ERC (IRC client for Emacs 27.2))
[04:39:45] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[04:41:37] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[04:41:40] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:47:50] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[04:53:15] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[04:55:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:00:05] *** Quits: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b) (Remote host closed the connection)
[05:00:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[05:00:43] *** Joins: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b)
[05:00:44] *** Joins: wyrd_ (~wyrd@gateway/tor-sasl/wyrd)
[05:02:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[05:03:09] *** Quits: wyrd_ (~wyrd@gateway/tor-sasl/wyrd) (Client Quit)
[05:05:17] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[05:21:26] *** Joins: z3t0 (~z3t0@146.71.14.98)
[05:37:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:40:02] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:40:59] *** Joins: Demosthe1ex (~Demosthen@user/demosthenex)
[05:44:13] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (Ping timeout: 256 seconds)
[05:52:34] *** Joins: Oladon (~olad@98.43.81.226)
[05:54:13] *** Joins: igemnace (~ian@user/igemnace)
[05:58:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[05:59:03] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[06:09:37] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 240 seconds)
[06:18:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:42:17] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[06:42:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:47:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:58:49] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[07:02:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:09:00] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[07:12:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:17:21] <fe[nl]ix> luis: I fixed all references to Launchpad in the sources
[07:20:57] *** Quits: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b) (Ping timeout: 240 seconds)
[07:21:25] <CodeBitCookie[m]> Hello Everyone!
[07:21:25] <CodeBitCookie[m]> What would be the best alternative for stb_image.h? Asking because I am making an application with CL-OPENGL.
[07:21:25] <CodeBitCookie[m]> ... And want to load a texture.
[07:21:36] <CodeBitCookie[m]> s/...//
[07:21:43] <CodeBitCookie[m]> s/.//, s/.../and/, s/And//
[07:26:38] <CodeBitCookie[m]> Hello Everyone!
[07:26:38] <CodeBitCookie[m]> What would be the best alternative for stb_image.h? Asking because I am making an application with CL-OPENGL and want to load a texture.
[07:27:20] <beach> Asking once is enough.
[07:27:59] <CodeBitCookie[m]> beach: Someone said my message was not sent...
[07:28:19] <lisp123> Ah sorry CodeBitCookie[m], I didn't see the first version, my mistake
[07:28:27] <beach> I see.
[07:28:36] <CodeBitCookie[m]> lisp123: np
[07:28:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:30:16] <beach> Good morning everyone!
[07:30:33] <CodeBitCookie[m]> beach: Good morning.
[07:32:41] <beach> I am still puzzled by questions such as "is there something similar to <mumble> in Common Lisp", where <mumble> is some feature of some other language that it is absolutely not clear that #commonlisp participants ought to know.
[07:32:42] <beach> So people asking such questions either incorrectly assume that most people know <mumble> or they voluntarily restrict themselves to answers from people who do know.  It seems to me a better solution to describe the desired functionality, because then more people are likely to know the answer.
[07:32:52] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[07:33:21] <CodeBitCookie[m]> Oh sorry beach. My mistake
[07:34:08] <CodeBitCookie[m]> I want a simple image loading library like "zpng" or "cl-jpeg" but with most popular formats.
[07:34:24] <beach> Well, you do what you want, but I for one have absolutely no idea what stb_image.h, but it looks like a C include file.
[07:35:06] <CodeBitCookie[m]> beach: Its a simple header file which loads an image in most popular formats. It is very popular for anyone who has tried to load a texture in OpenGL.
[07:35:41] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[07:35:48] *** Quits: qhong- (~qhong@rescomp-21-400677.stanford.edu) (Quit: ZNC 1.7.4 - https://znc.in)
[07:36:02] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[07:36:25] <CodeBitCookie[m]> beach: Is that question good enough?
[07:36:39] <CodeBitCookie[m]> CodeBitCookie[m]: this one ^
[07:36:42] <beach> Looks that way.
[07:37:16] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[07:38:05] <beach> Do you know about the library opticl?  As I recall, it has code for loading images in various formats.
[07:38:24] <CodeBitCookie[m]> I was JUST reading about it right now.
[07:38:38] <CodeBitCookie[m]> Looks alright, just seeing how to load an image.
[07:39:48] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[07:47:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[07:50:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[07:51:34] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[07:51:42] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[07:52:55] *** Joins: semz (~none@user/semz)
[07:57:21] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:06:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:10:55] <jmercouris> Trying to think of a simple way to do: (list 1 3 5) (list 2 4 6) to combine into (list 1 2 3 4 5 6)
[08:11:26] <Bike> (loop for a in lista for b in listb collect a collect b)
[08:11:31] <Bike> gets weird if they have different lengths, though
[08:12:12] <jmercouris> Bike: indeed, that is a good way
[08:12:28] <jmercouris> I was hoping for alexandria, but loop is just as good, very obvious too
[08:12:56] *** Quits: z3t0 (~z3t0@146.71.14.98) (Read error: Connection reset by peer)
[08:13:08] <jmercouris> thanks
[08:15:25] <Bike> no problem
[08:15:31] <Bike> maybe alexandria has some kind of interleave, lemme see
[08:16:37] <jmercouris> I'm kind of confused about something
[08:16:51] <jmercouris> not sure I should do (intern "xyz" (find-package 'keyword))
[08:17:09] <jmercouris> or if I should do (make-symbol "keyword")
[08:17:25] <jmercouris> I understand /some/ of the differences between them, but not all of the nuances
[08:17:29] <Bike> what are you doing with it?
[08:17:46] <jmercouris> I'm doing (make-instance 'xyz :some-init-arg "some-value")
[08:17:48] <Bike> well, the main difference is that with make-symbol, the resulting symbol won't be interned. so, for example, it can be garbage collected
[08:18:08] <jmercouris> yes, that is the key difference I know
[08:18:08] <Bike> and it can't be accessed through find-symbol
[08:18:19] <jmercouris> I was was wondering if that may present problems to the machinery of clos
[08:18:27] <Bike> you're doing like (make-instance (make-symbol "xyz") ...)?
[08:18:32] <jmercouris> Bike: yes
[08:19:17] <jmercouris> sorry, it would actually be (make-instance 'xyz (make-symbol ":qwe") "some-value")
[08:19:25] <Bike> oh the init keyword
[08:19:27] <jmercouris> where :qwe is the :initarg of some slot
[08:19:30] <Bike> yeah, no, that's fine
[08:20:00] <jmercouris> OK, good to konw
[08:20:02] <jmercouris> s/konw/know
[08:20:07] <Bike> of course it means you have to use that same symbol later
[08:20:09] <jmercouris> it just felt off to me for some reason
[08:20:10] <beach> Bike: Are you sure?
[08:20:20] <Bike> another (make-symbol "qwe") will not be the same symbol
[08:20:43] <Bike> beach: i don't see why it would be a problem? i've used non-keyword initargs in admittedly exotic code and it was fine
[08:21:03] <beach> (make-symbol ":qwe") would work if :qwe is an initarg?
[08:21:25] <Bike> oh, no, of course not. i didn't think that was what jmercouris meant.
[08:22:01] <jmercouris> ah I see what beach is saying now
[08:22:05] <Bike> i'm imagining a scenario where there are class definitions generated by a macro.
[08:22:07] <jmercouris> no, Bike understood me, and I misspoke
[08:22:34] <jmercouris> Bike: close, I can post the snippet for your amusement in a second
[08:22:45] <jmercouris> I'm sure there is a lot to improve, but it is a first draft
[08:23:46] <Bike> jmercouris: oh, i forgot for the list thing you can use merge: (merge 'list (list 1 3 5) (list 2 4 6) #'<) => (1 2 3 4 5 6). that sorts, so maybe it's not what you want though
[08:24:06] <jmercouris> I don't want it to be sorted, I already thought about that
[08:24:11] <Bike> ah k
[08:28:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[08:29:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[08:30:59] *** Quits: akoana_ (~ah@user/akoana) (Quit: leaving)
[08:31:09] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:36:26] *** Quits: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e) (Quit: ERC (IRC client for Emacs 27.1))
[08:44:47] <jmercouris> Bike, beach, in case you are curious: http://dpaste.com/AVRSYTQ9S
[08:44:52] <jmercouris> feels very wrong with the eval in there...
[08:45:55] <Bike> (apply #'make-instance 'process instance-arguments)
[08:46:23] <jmercouris> hm, indeed
[08:46:28] <jmercouris> yes, that is much better
[08:46:58] <jmercouris> I was stuck thinking in macro mode
[08:47:38] <jmercouris> this is why I like this channel, it helps me break out of my thought bubbles
[08:47:56] <jmercouris> I always forget about funcall and apply for some reason
[08:48:32] <jmercouris> Bike: do you agree with the general approach?
[08:48:57] <jmercouris> as per why I chose to use symbols rather than strings when invoking process-list, is because I don't know what the state of the reader will be, whether it will have upcased things or not
[08:49:12] <Bike> hm, i think i'd go the other way and have format-controls be a list of keywords
[08:49:21] <Bike> then for the ps command print the symbol names and downcase them or whatever
[08:49:36] <jmercouris> that also works
[08:49:43] <jmercouris> yes, I will try some experiments
[08:50:24] <jmercouris> that is clearer, thank you for the suggestion
[08:50:50] <Bike> i think the format string you already have should handle downcasing and everything fine actually
[08:51:12] <jmercouris> it does
[08:51:54] <Bike> i never remember how ~(~) work
[08:52:32] <jmercouris> it just downcases all format output within the region
[08:52:52] <jmercouris> from PCL: The last directive for dealing with emitting English text is ~(, which allows you to control the case of text in the output. Each ~( is paired with a ~), and all the output generated by the portion of the control string between the two markers will be converted to all lowercase.
[08:55:12] <Bike> yeah but the options and whether it's downcase or upcase and egh
[08:55:15] <Bike> anyway
[08:55:16] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleepin)
[08:55:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[08:55:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[09:02:30] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Remote host closed the connection)
[09:02:48] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77)
[09:02:50] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[09:06:31] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[09:07:35] *** Joins: Alfr (~Alfr@user/alfr)
[09:15:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:17:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:19:17] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::ba77) (Ping timeout: 240 seconds)
[09:41:38] *** Joins: myrrh (~markus@user/poet)
[09:42:02] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[09:45:37] *** Joins: miique (~miique@181.46.139.166)
[09:47:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[09:47:19] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Client Quit)
[10:09:21] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:20:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[10:25:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:31:17] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[10:41:16] *** Joins: varjag (~user@188.95.247.249)
[10:53:59] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[11:28:35] <jdz> jmercouris: (mapcan #'list '(1 2 3) '(4 5 6))
[11:29:57] <jackdaniel> (map nil fn …) should be (mapcant fn …)
[11:30:58] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:56:18] *** Joins: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de)
[11:59:05] <contrapunctus> I tried to make a snippet for `ql:quickload` - https://paste.rs/eca , meant to be run in `slime-repl-mode` , but when I expand it, I get this error - https://paste.rs/gF0
[12:01:11] *** Quits: OlCe (~user@lfbn-nic-1-122-111.w2-15.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[12:01:20] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[12:01:22] *** Joins: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b)
[12:18:17] *** Joins: pve (~pve@37-136-69-117.rev.dnainternet.fi)
[12:22:06] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:23:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[12:23:51] *** Joins: amb007 (~a_bakic@57.135.22.93.rev.sfr.net)
[12:29:08] *** Joins: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr)
[12:34:37] *** Quits: beach (~user@2a01:cb19:150:3400:928b:3395:fe81:c0b2) (Read error: Connection reset by peer)
[12:36:17] *** Joins: beach (~user@2a01:cb19:150:3400:e578:7149:acf:a4d9)
[12:38:15] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Quit: hhdave)
[12:38:35] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:43:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[12:43:49] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[12:45:29] *** Joins: vegai (vegai@kapsi.fi)
[12:46:24] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[12:50:17] *** Quits: gaqwas (~john@dynamic-095-118-120-195.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[12:50:56] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[12:50:59] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:51:18] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[12:55:25] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:57:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:01:17] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Ping timeout: 240 seconds)
[13:04:20] <phoe> when I woke up today, I realized that I-I, I-I, U-I-F-D-C and U-I-F-R-C are The Four Horsemen of SHARED-INITIALIZE
[13:05:20] <beach> What's the difference between the first two?
[13:05:22] <phoe> s/I-I/R-I/
[13:05:26] <beach> Ah.
[13:05:28] * phoe needs to wake up
[13:06:10] <beach> Try coffee.
[13:06:50] <jackdaniel> the first goes I-I and the second goes I-I with a higher pitch
[13:18:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:18:47] *** Quits: OlCe` (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr) ()
[13:19:02] *** Joins: OlCe (~user@amarseille-657-1-5-245.w90-8.abo.wanadoo.fr)
[13:22:53] * phoe tries yerba mate, succeeds
[13:25:17] *** Quits: amb007 (~a_bakic@57.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[13:25:52] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[13:28:44] <contrapunctus> Is there anything like Elisp's `edebug` in Common Lisp? `step` is close, but not quite the same...
[13:31:27] <beach> [here we go again]  I don't know what `edebug' does, but you might want to check http://metamodular.com/SICL/sicl-debugging.pdf for a description of the dismal debugging situation for FLOSS Common Lisp implementations.
[13:32:09] *** Joins: Everything (~Everythin@37.115.210.35)
[13:32:19] <OlCe> Hi,
[13:32:27] <phoe> hey hi
[13:32:46] <OlCe> contrapunctus: You probably mean BREAK, not STEP (as a function to call).
[13:33:01] <OlCe> contrapunctus: I'm not familiar with edebug.
[13:33:49] <rotateq> as long as no one claims elisp has a superior condition system :)
[13:33:57] <OlCe> But if you use (DECLAIM (OPTIMIZE (DEBUG 3))) before compiling your code,
[13:34:08] <OlCe> you then are able to do lots of things in the debugger.
[13:34:09] <jackdaniel> proclaim
[13:34:13] <lisp123> contrapunctus: This is also good: https://github.com/informatimago/lisp/blob/master/common-lisp/lisp/stepper.lisp
[13:34:17] <jackdaniel> declaim may apply only to the file it is put in
[13:34:36] <OlCe> For SBCL, you have to make sure that other metrics are not too high too.
[13:34:37] <jackdaniel> (not necessarily though - it may apply to the global environment - that's undefined)
[13:34:59] <OlCe> jackdaniel: Yes. But I was thinking of typing that at the REPL.
[13:35:12] <OlCe> Since this is a debugging session anyway.
[13:35:12] <jackdaniel> it may have no effect whatsoever then
[13:36:49] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:37:07] <OlCe> jackdaniel: This is a global declaration, so it is supposed to.
[13:37:11] <contrapunctus> beach, OlCe: edebug is an interactive source-level debugger. Basically like `step` , except the interaction happens in the source itself, not an sldb buffer.
[13:37:41] <jackdaniel> OlCe: where declaim specificaiton says that it performs global declarations?
[13:38:03] <OlCe> jackdaniel: CLHS 3.3
[13:38:20] <contrapunctus> lisp123: thanks, I'll check that out.
[13:38:42] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:39:12] <jackdaniel> it is not what the specification of the operator declaim says
[13:39:20] <jackdaniel> but I see where did you get it from
[13:40:03] <OlCe> jackdaniel: The specification doesn't contradict this.
[13:40:24] <OlCe> jackdaniel: But yes, it is quite terse, and assumes context.
[13:40:26] <jackdaniel> that's why I've said that it is undefined
[13:40:56] <OlCe> jackdaniel: Actually, it uses the word "proclamation" nonetheless (in the file compilation specific paragraph).
[13:41:07] <OlCe> contrapunctus: Not sure if I understand what you mean by interaction with the source code.
[13:41:27] <OlCe> contrapunctus: Are you, e.g., able to change the source after some stepping point?
[13:41:47] <OlCe> contrapunctus: Or is the functionality the same as that of a debugger (like sldb), just presented differently?
[13:42:22] <contrapunctus> OlCe: the latter.
[13:43:01] <OlCe> contrapunctus: Ok, thanks. I'll try it (some day(TM)).
[13:44:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:45:40] <contrapunctus> OlCe, beach: https://www.youtube.com/watch?v=odkYXXYOxpo&t=143
[13:45:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:50:34] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) ()
[13:54:16] <beach> contrapunctus: Like I said, in FLOSS Common Lisp implementations, there is basically nothing like that.
[13:54:22] <beach> s/said/wrote/
[13:59:57] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:02:03] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:03:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:05:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:07:05] <OlCe> contrapunctus: Thanks.
[14:08:33] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:09:00] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:09:07] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 256 seconds)
[14:09:14] <beach> contrapunctus: But perhaps you should start working on writing a debugger.  I have started a bit: https://github.com/robert-strandh/Clordane
[14:10:04] <ns12> Hello, in the list of Common Lisp implementations for FreeBSD on cliki (https://www.cliki.net/FreeBSD), there is "SBCL (without threading support)". Is this still accurate? What is the significance of having no threading support?
[14:10:51] <OlCe> beach: There is SLY, a (more modest) step towards this.
[14:11:23] <rotateq> ns12: ah then it is the situation like on ARM platforms
[14:11:34] <phoe> ns12: no idea if it's still accurate
[14:11:55] <OlCe> ns12: It is not. FreeBSD's ports has been having threads enabled by default for ages.
[14:14:24] <ns12> OlCe: I see. The "SBCL (without threading support)" bit was added to the CLiki article in 2004.
[14:14:40] <akater[m]> OlCe: If you're certain, feel free to edit CLiki, it is in need of attention.
[14:14:45] <rotateq> heh.
[14:14:59] <beach> OlCe: So SLY must be doing magic, because none of the FLOSS Common Lisp implementations is capable of the support that a debugger needs.
[14:16:39] <beach> Actually, that's not quite true, but see the paper for details on the current situation.
[14:17:04] <OlCe> ns12: Enable by default on Sep the 17th 2018. So, not exactly ages, but still more than 3 years.
[14:17:12] <OlCe> akater[m]: Ok, I'll see to that.
[14:17:13] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[14:17:50] <rotateq> ns12: or you go along with ecl or clisp too and look what fits your needs
[14:20:11] * mfiano uses SBCL on FreeBSD with threads.
[14:22:25] <ns12> Does the use of threads make a program non-portable, since threads are not specified in the Common Lisp standard?
[14:22:38] <phoe> strictly speaking, yes
[14:22:48] <phoe> in practice, just use bordeaux-threads
[14:23:11] <phoe> strictly speaking, a portable program must not depend on a non-standard language extension
[14:23:47] <jackdaniel> histerically speaking :) using threads can make the program not portable across operating systems
[14:23:57] <phoe> in practice, threads are very common on implementations and platforms, and many people write their programs with the assumption that common compatibility libraries (e.g. bordeaux-threads for threading support) will run there
[14:24:27] <jackdaniel> i.e for long time threading support was sub par on Windows; sbcl doesn't support threads on arm32 (I don't think that there are plans to implement that)
[14:24:30] <jackdaniel> etc
[14:26:27] <ns12> jackdaniel: "sbcl doesn't support threads on arm32" - Does this mean that bordeaux-threads cannot work on sbcl arm32?
[14:27:01] <jackdaniel> it won't be able to spawn a concurrent thread on sbcl/arm32 (if that's what you mean by working)
[14:27:20] <rotateq> i just realized it when i tried to load the april compiler on my pi with sbcl ^^
[14:27:34] <phoe> bordeaux-threads is not a standalone implementation of threads, just a compatibility library that wraps threading support of the underlying implementation
[14:27:49] <phoe> if the underlying Lisp has no threads, BT won't make them appear out of thin air
[14:28:02] <jackdaniel> (pull them out of the hat!)
[14:28:13] * phoe puts on his robe and wizard hat
[14:29:46] <rotateq> "Broom, broom! You have been."
[14:31:13] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:33:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:34:15] *** Joins: random-nick (~random-ni@87.116.167.125)
[14:34:23] <OlCe> akater[m]: Done. I've also updated the list of officially supported architectures (because, apart from x86, it was seriously outdated... and gone).
[14:37:23] <OlCe> beach: Yes, I know the paper and read it a while back.
[14:37:42] <OlCe> beach: There is a variable you can set to break into the debugger at each sticker.
[14:38:10] <OlCe> beach: Not quite what edebug is doing, but a "step" to that.
[14:38:54] <OlCe> beach: SLYNK-STICKERS:*BREAK-ON-STICKERS*
[14:40:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:41:43] <akater[m]> OlCe: Thank you.  I used to edit CLiki regularly but then it apparently became picky about logins so I've been estranged for some time.
[14:42:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:43:00] *** Joins: kevingal (~quassel@37.228.202.92)
[14:43:31] <mfiano> Stickers are incredibly useful, and pretty much the only thing that has been keeping me on SLY instead of SLIME for years.
[14:44:37] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[14:45:08] <lisp123> mfiano: What do stickers do?
[14:45:17] *** Joins: amb007 (~a_bakic@6.135.22.93.rev.sfr.net)
[14:46:05] <mfiano> visual buffer value capturing and alternative to print-debugging
[14:46:17] <lisp123> Nice
[14:46:23] <lisp123> Time to Sly
[14:54:38] <phoe> What are the situations in which a slot can be unbound after UPDATE-INSTANCE-FOR-REDEFINED-CLASS is called for it? I can count three so far: 1) the slot was already bound, 2) there was an initarg provided for it, 3) there was no initarg provided but the slot has an initform.
[14:54:54] <phoe> s/can be bound/will be bound/
[14:54:59] <phoe> s/called for it/called for an instance/
[15:02:13] <OlCe> mfiano: Yes, stickers are great. But personally, since I don't use them that much, I've mostly gone back to plain Slime.
[15:03:54] <OlCe> mfiano: And also for the fact that Sly sometimes lags behind when the backend needs to be changed for new CL platform versions.
[15:04:06] <OlCe> mfiano: But I'm still using SLY from time to time.
[15:33:27] *** Joins: varjag (~user@188.95.247.249)
[15:39:57] <phoe> hmmmm
[15:40:01] * phoe finds a MOP bug in JSON-MOP
[15:41:02] <jackdaniel> [defclass "name" {a: 32, b: 42}] /* long live common json */
[15:41:25] <lisp123> phoe: :O
[15:41:43] <phoe> https://github.com/gschjetne/json-mop/issues/7
[15:41:47] <lisp123> That's breaking news, given the importance of the library. What was it?
[15:41:52] <lisp123> Oh cool, will read
[15:42:02] <phoe> I think that I am starting to understand the four horsemen
[15:42:18] <lisp123> Oh JSON-MOP, not CLOSER-MOP :D I misread. Still must be very important
[15:42:46] <jackdaniel> cool bug, would segfault
[15:43:25] <ns12> phoe: "I think that I am starting to understand the four horsemen" - What does that mean?
[15:48:57] <rotateq> i still find this COS project interesting for giving C a more CLOS like object system. or using ecl when it will come some day to such situation i need it
[15:49:48] <Gnuxie> phoe: sorry i caused that bug by not doing it via shared-initialize
[15:51:08] *** Quits: amb007 (~a_bakic@6.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:51:27] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:51:37] <phoe> ns12: the ways in which the four standard functions that call SHARED-INITIALIZE
[15:52:08] <phoe> ...the way in which they work and how they work
[15:52:34] <beach> ... and when.
[15:53:49] <phoe> that too
[15:55:39] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[15:56:14] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[15:57:20] <rotateq> phoe: hm three of those abbreviations I recognize from memory, the one I-I would be initialize-instance, what's the other then? :)
[15:59:43] <phoe> reinitialize-instance, update-instance-for-{redefined,different}-class
[16:00:31] <rotateq> oh okay, i read a second I-I above, not R-I, sry
[16:00:46] <phoe> oh, yes
[16:00:52] <phoe> I fixed it afterwards
[16:00:55] <rotateq> hehe
[16:00:58] <phoe> should have been R-I
[16:01:53] <rotateq> so upto now i just have used of those initialize-instance with :after and U-I-F-D-C
[16:02:15] <beach> phoe: What is it that you are working on?
[16:05:47] <phoe> beach: 1) broadening my MOP knowledge, 2) a class whose slots must be always bound, 3) a class whose slots have enforced types
[16:06:20] <beach> Ah, so mainly "exercises"?
[16:08:04] <phoe> I'll want to use this one in a project of mine later, so a bit more than exercises
[16:08:28] <beach> Got it.
[16:09:19] <phoe> what should happen if UPDATE-INSTANCE-FOR-REDEFINED-CLASS signals an error upon being called on an obsolete instance?
[16:10:07] <phoe> a bit more specifically - U-I-F-R-C :BEFORE
[16:10:14] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[16:10:19] <phoe> should U-I-F-R-C be called again once this instance is accessed for the second time, since the first call did not get a chance to do anything?
[16:10:27] <beach> There should be no way for an obsolete instance to reach a method.
[16:10:37] <beach> It should be updated before it gets that far.
[16:10:38] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[16:11:15] <phoe> hmm, that's an answer
[16:12:15] <phoe> so the process is more or less (progn (update-instance) (u-i-f-r-c ...))
[16:12:38] <phoe> or so it seems
[16:12:48] <beach> Let me check the definition...
[16:13:00] <beach> clhs u-i-f-r-c
[16:13:00] <phoe> so, if u-i-f-r-c signals an error and control leaves it, then there is no way for it to get called again on the same instance
[16:13:01] <specbot> update-instance-for-redefined-class: http://www.lispworks.com/reference/HyperSpec/Body/f_upda_1.htm
[16:13:27] <phoe> since the instance is now considered to be updated *even* if U-I-F-R-C did not finish updating it
[16:14:58] <beach> So that means that the structure of the instance is up to date, but some slots may be wrong or uninitialized.
[16:15:12] <phoe> yes
[16:15:17] <phoe> and I'm running into this scenario right now
[16:15:58] <phoe> https://plaster.tymoon.eu/view/2840#2840
[16:16:22] <phoe> the U-I-F-R-C method in line 18 is simplified
[16:16:41] <phoe> but it shows that the second DEFCLASS FOO succeeds in adding the slot but fails at using its initform
[16:16:56] <phoe> ...on SBCL at least, CCL gives me no error whatsoever
[16:16:58] * phoe stares
[16:17:01] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Quit: Leaving)
[16:17:28] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu)
[16:21:17] <phoe> but okay then - let's suppose that U-I-F-R-C :BEFORE signals an error and the primary method does not manage to execute, like in this case
[16:21:30] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[16:21:32] <phoe> what's the way forward if we have a half-updated instance like that?
[16:22:53] <beach> I don't see how that changes anything.
[16:23:13] <beach> The structure of the instance will be correct, but some of its slots may have the wrong value.
[16:24:01] <phoe> yes, and that's an erroneous situation - how can I "recover" that instance?
[16:24:57] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[16:27:48] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:30:32] *** Joins: hhdave (~hhdave@cpc95050-newt40-2-0-cust471.19-3.cable.virginm.net)
[16:33:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:35:43] <ns12> OlCe: Thank you for updating https://www.cliki.net/FreeBSD
[16:37:12] <phoe> errors in I-I are not a problem because I can redo the whole call easily, I have all the arguments
[16:37:18] <phoe> same with R-I
[16:37:31] <phoe> in case of U-I-F-R-C, I could try to call it again myself, but I would need to remember its original arguments so I can re-do the whole call
[16:38:28] <phoe> and I have not yet thought of the case of errors inside U-I-F-D-C
[16:38:42] *** Joins: jeosol (~jeosol@user/jeosol)
[16:40:35] *** Joins: nature (~nature@45.32.235.173)
[16:41:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[16:42:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:54:58] *** Joins: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it)
[16:55:18] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:57:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:58:11] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[17:00:25] *** Joins: cranium (~cranium@user/cranium)
[17:00:59] *** Joins: miique (~miique@181.46.139.166)
[17:06:29] *** Joins: foxfromabyss (~foxfromab@2a01:c23:61dc:d700:6562:7d62:aad7:a17)
[17:11:46] *** Joins: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857)
[17:17:19] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:17:32] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[17:20:05] <yitzi> Does anybody know of any org-mode parsers for CL besides cl-org-mode? I haven't evaluated the coverage of cl-org-mode yet. I am just making sure I know all of the alternatives before I jump into using it.
[17:21:55] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[17:22:00] <lisp123> yitzi: What do you need it for?
[17:24:51] <yitzi> I am exploring writing CL extension specifications in org-mode for an idea we have been discussing in #sicl. Basically, a WSCLE (Well Specified Common Lisp Extensions).
[17:25:52] <lisp123> And what would the org-mode parser do? I am asking because I wanted to see if the standard org-mode facilities are enough
[17:27:02] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:27:33] <nij-> I know you ask for an org parser in CL but there's a good one written in Clojure, using an EBNF->parser library "instaparser".
[17:27:51] <nij-> If I'm not mistaken, cl-org-parser doesn't use such kind of a library.
[17:28:02] <yitzi> Parse the specification into an AST for scymtym's dpans-conversion code and probably extract source code for default implementations in the literate programming sense.
[17:28:40] <yitzi> nij-: Yeah, Its got to be in CL. Thanks though!
[17:28:55] <nij-> However, there's https://github.com/diasbruno/cl-bnf
[17:29:06] <nij-> It doesn't seem to work with extended nor augmented BNF.
[17:29:31] <lisp123> yitzi: Thanks for the color. Sorry I have nothing of value to add based on that
[17:29:53] <nij-> It's good to have a cl-(a|e)bnf, and use what https://github.com/200ok-ch/org-parser does to implement a real org-mode parser in CL.
[17:30:01] <yitzi> lisp123: No worries. Its all theoretical at this point.
[17:30:02] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:30:30] <nij-> (I'm actually not sure whether cl-bnf is enough for org syntax.)
[17:32:59] <yitzi> No idea if bnf is enough and I'm not gonna write a parser unless I am forced to. ;)
[17:33:46] <nij-> ;) ok my hope is lost
[17:33:55] <nij-> What's your plan now then?
[17:35:26] <yitzi> Try cl-org-mode eventually. Again, I am miles from that step. Just exploring the landscape. For the interim I'll probably write a spec for gray streams in org mode and then I'll get to org-mode parsing stage.
[17:36:52] <lisp123> Hi all - I'm keen on any feedback on the following. I was thinking of a way to combine classes (multiple inheritance) in a way that allows for generic functions to specialise on slots
[17:36:54] <lisp123> https://gist.github.com/ashok-khanna/8ce9821e6f87fda49135ab0807d4375e
[17:37:21] <nij-> Btw yitzi there seems to be two different cl-org-mode:  https://github.com/deepfire/cl-org-mode  https://common-lisp.net/project/cl-org-mode/
[17:37:21] <lisp123> yitzi: What about a pure CL solution? I.e. create a mini documentation system
[17:37:49] <nij-> The second one is well-documented but I cannot find the code.
[17:37:58] <nij-> The first one has the code but doesn't seem easy to use.
[17:38:42] <yitzi> lisp123: I am sure it may be that eventually, but I have to hook into the existing stuff they are working on in CLIM (which is a spec browser of sorts).
[17:39:32] <lisp123> yitzi: Ah okay, understood
[17:41:20] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[17:42:33] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[17:45:28] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:45:38] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[17:46:37] <cage> local-nicknames are great! Thanks to all the people that implemented this feature!
[17:46:40] <rotateq> lisp123: i think about your line 172 if it would macro-expand correctly
[17:47:47] <rotateq> and maybe better when you do ATOM in a typecase branch then not LIST but CONS in the other
[17:49:17] <rotateq> yes it is cage
[17:51:10] <lisp123> rotateq: I hacked that in (I tested it without non-inherited-slots), but will fix that later if necessary (at least the general idea can be taken)
[17:51:22] <lisp123> let me rename list to cons :-)
[17:51:29] <rotateq> colored-shape-shape :D
[17:52:19] <rotateq> yes I just have this in mind "everything that's not a CONS is an ATOM" ^^
[17:52:49] <lisp123> rotateq: It's a better way for sure, thanks for pointing out. Since the definition of ATOM is (not cons)
[17:52:54] <rotateq> yes but with the macro in the end, did you do some expand?
[17:53:10] <lisp123> it seems to work
[17:53:22] <lisp123> I just haven't tested with non-inherited-slots yet
[17:53:56] <rotateq> hmm I just wasn't sure with the list thing in line 172
[17:56:15] <lisp123> there's a typo, non-inherited-slots should be ,non-inherited-slots
[17:56:21] <lisp123> but otherwise okay: https://plaster.tymoon.eu/view/2841#2841
[17:58:07] <pjb> lisp123: you cannot dispatch on slots, but you can dispatch on mixin classes.
[17:58:54] <lisp123> pjb: So the point here is to store an instance of the mixin class (even though in normal usage they are not meant to be instantiated) in the slot, so that then you can dispatch on the slot
[17:59:37] <pjb> lisp123: you seem to be saying something different now.  You're talking now about the slot value. Before you only talked about the slots.
[18:01:04] <contrapunctus> In this program I'm working on, `a.lisp` contains `a:my-class` and generic function `make-foo` ; `b.lisp` contains `b:my-class` and method `make-foo` specializing on `b:my-class` . But when I call `make-foo` in `a.lisp` I get a 'no applicable method' error. The object it is called with is an instance of `b:my-class` ...so what gives? 🤔️
[18:02:29] <Xach> contrapunctus: does make-foo refer to the same symbol in each file?
[18:03:12] <lisp123> pjb: Sorry, so what I meant was to overcome the inability to specialise on slot, I am suggesting storing an instance of the mixin class in the slot so that when you pass the slot value to a generic function, you can specialise on it (since it is now a class object vs. a value)
[18:03:49] <pjb> lisp123: https://termbin.com/ewcv
[18:05:35] <pjb> lisp123: otherwise it's just a matter of calling th egeneric function on the slot value: (defclass point () ((x :initarg :x :reader x)))  (defmethod move ((pt point)) (move (x pt))) (move (make-instance 'point :x (make-instance '<body> :body 'bod))) #| moving body --> nil |#
[18:06:32] <pjb> lisp123: an instance of a class, be it a mixin class, is an instance, not a class, unless that class was a meta class.
[18:06:53] <pjb> classes are first class objects in lisp, so class objects are values.
[18:07:14] <rotateq> ah okay lisp123, now i got it, was just unfamiliar use in a backquoted expression
[18:08:15] <lisp123> pjb: Thanks. So that code makes sense. Now what if you want to subclass <leg> into <right-leg>
[18:08:34] <lisp123> You would need to create <animal-with-right-leg> or something similar, correct?
[18:08:48] <pjb> Then you just do that, and (defclass bipedal-animal (animal <right-leg>) ())
[18:08:51] <pjb> Yes.
[18:09:14] <pjb> Again do you want to dispatch on the slots, or on the values bound to the slots?
[18:09:22] <lisp123> But if there's many combinations (e.g. 10 shapes x 15 colors = 150), it becomes a lot
[18:09:35] <pjb> there are method combinations.
[18:09:41] <pjb> what method combination do you want?
[18:10:27] <pjb> lisp123: what is the last name of a last name?
[18:10:40] <rotateq> lisp123: so you can learn writing macros that generate macros maybe
[18:11:05] <pjb> I've not given a first name to my first name.  Perhaps I should.  "Pascal" I name thee "Bob"!
[18:11:22] <pjb> Now (first-name #<pjb>) -> "Bob"…
[18:11:27] <pjb> What use is that?
[18:11:43] <contrapunctus> Xach: I think so. It's always used without package prefixes...
[18:11:45] <lisp123> pjb: My terminology is bad, so rather than saying it the wrong way, let me give an example: (make-instance 'animal :leg (make-instance '<right-leg> :leg "leg") ...)
[18:12:02] <pjb> lisp123: instead of talking about classes, slots, values, etc,  you should be talking about your problem domain!
[18:12:07] <phoe> contrapunctus: that's a code smell
[18:12:09] <pjb> lisp123: what are those colors and those shapes?
[18:12:31] <phoe> DEFMETHOD is kinda infamous for silently implicitly creating generic functions
[18:12:53] <phoe> so DEFMETHOD FOO and DEFMETHOD FOO in two different packages can silently define methods on two different GFs
[18:13:29] <contrapunctus> phoe: so do I write `(defmethod a:make-foo ...)` ?
[18:13:37] <lisp123> If you do that, then you can do (defmethod new-move ((obj animal) (obj right-leg)) ...) and then called with (new-move animal (leg animal))
[18:13:39] <phoe> contrapunctus: either that or you IMPORT-FROM the symbol
[18:14:02] <phoe> or rather, IMPORT the symbol, or use :IMPORT-FROM in your package definition
[18:14:27] <contrapunctus> Ah, that seems to have changed the error, at least xD
[18:14:34] <contrapunctus> thanks phoe and Xach
[18:14:43] <pjb> lisp123: yes, this is my point example above.  you don't need the mixins, just have your method call methods that dispatch on the slot values.
[18:16:46] <lisp123> pjb: Thanks, will think a bit and re-read the above
[18:17:05] <pjb> lisp123: again, it would be better if you explained first what you want to do.
[18:17:11] <pjb> Not how.
[18:17:13] <cage> rotateq: :)
[18:17:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:19:50] <lisp123> pjb: I am writing a parser with a large set of rules (well not that large, but lets assume it can get large) on how to parse. Initially, I had a large COND table that went through each parser rule and applied it. Now I'm rewriting in a CLOS way where each of those conditional paths becomes its own DEFMETHOD, specialising on parts of the object it receives
[18:21:03] <lisp123> For example, I read a word say "Thus," and I split it into components - the word "thus" and trailing-punctuation ",". For some types of words, trailing punctuation matters, for others it does not
[18:21:12] <frodef> I haven't really figured out pathnames.. if I have a directory foo (e.g. #p"/tmp/") how am I suppod to get the pathname for the file "bar.zap" in that directory? (so ending up with #p"/tmp/bar.zap")
[18:21:58] *** Joins: Bike (~Glossina@71.69.170.70)
[18:21:58] *** ChanServ sets mode: +o Bike
[18:22:10] <pjb> lisp123: Perhaps something similar to what I did to parse lambda-lists: https://github.com/informatimago/lisp/blob/master/common-lisp/lisp-sexp/source-form.lisp#L495 ?
[18:22:42] *** Quits: foxfromabyss (~foxfromab@2a01:c23:61dc:d700:6562:7d62:aad7:a17) (Quit: Client closed)
[18:23:25] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[18:24:54] <lisp123> pjb: Thanks, will have a read
[18:25:57] <pjb> lisp123: but otherwise, the question when you perform an OO analyse, is to determine what concepts need to be reified, ie. made into objects/classes.
[18:26:29] <lisp123> pjb: It's a hard topic :(
[18:26:55] *** Joins: domovod (~domovod@176.196.122.197)
[18:27:21] <pjb> lisp123: when you have a cond, you have a mapping from conditions to expressions.  If you consider that each mapping is a rule, and reify rules, this means that you preview that there may be a dynamic set of rules.   If all the rules are fixed and known at code writing time, then writing the cond may be better.
[18:27:57] <bollu> I'm trying to move to emacs+slime. When I run `slime-eval-buffer`, I get an error at  (EVAL (ASSERT-EQUAL (DEEPEQ (MK-INST-ADD :X :Y 1) (MK-INST-ADD :X :Y 1)) T)), where the (ASSERT-EQUAL ...) comes from my source code
[18:28:03] <bollu> How do I move to the appropriate source location
[18:28:08] <lisp123> pjb: "known at code writing time..." -> Yes, I was getting to the same conclusion as well as I did it more
[18:28:31] <bollu> or, am I supposed to run my LISP file with some other interface?
[18:29:02] <bollu> I'm using emacs+slime+sbcl for the record. I don't know if that affects things.
[18:29:20] <pjb> lisp123: so if you reify the rule; (defclass rule () ((condition :initarg condition-predicate :reader condition-predicate) (parser :initarg :parser-function :reader parser-function)))  You can indeed replace the cond with something like: (loop for rule in (grammar-rules grammar) when (funcall (condition-predicate rule) scanner) do (funcall (parser-function  rule)))
[18:29:37] <lisp123> pjb: Not sure if its clear, but basically I wanted to avoid having to create red-circle, but rather be able to write a method (defmethod paint ((obj circle) (obj red-color)) ...) -> (paint obj (color obj) and have it work
[18:30:08] <lisp123> pjb: Yes I thought that too
[18:30:17] <pjb> lisp123: (defclass colored-circle (circle) ((color :initarg :color :reader color)))
[18:30:34] <pjb> Then you just use (make-instance 'colored-circle :color 'red) as a normal circle.
[18:30:44] <bollu> [also, should I use slime? versus sly?]
[18:30:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[18:30:58] <lisp123> pjb: In that example, how do you write a method that specialises on color = red (apart from EQL specialisation)?
[18:31:17] <rotateq> bollu: yes start with slime
[18:31:18] <pjb> lisp123: why would you want to do that?
[18:31:24] <bollu> rotateq okay
[18:31:38] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:31:57] *** Quits: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b) (Ping timeout: 240 seconds)
[18:31:58] <bollu> rotateq How do I go the location of an error in slime? Like I said, when I press `v`, it takes me to the definition of `eval`, NOT to the definition of `assert-equal` from my source which is frustrating
[18:32:14] <pjb> lisp123: (driver-behavior car (color semaphore))
[18:32:14] <bollu> Like, I don't care about the details of the REPL. I want to see my code
[18:32:19] <rotateq> bollu: for example i use spacemacs, then have left the source file buffer and right the REPL, then i can (re)evaluate forms with C-c C-c
[18:32:37] <rotateq> ehm don't know
[18:32:50] <pjb> lisp123: (defmethod driver-behavior (mobile (semaphore-color (eql 'red0))) …)
[18:33:06] <bollu> so, on the stack frame, I do see a call to DEEPEQ, but it seems to be tagged as [fast-method] and heavily processed by SBCL
[18:33:19] <bollu> There must be some way to run code in "debug mode"?
[18:33:46] <Xach> frodef: (merge-pathnames relative absolute) is one way
[18:34:01] <lisp123> pjb: Yes, that I get. But then you lose the inheritance structure of colors (perhaps there is pale-red, dark-red etc. and you want to specialise on red)
[18:34:12] <lisp123> (pale-red and dark-red roll up into red)
[18:34:39] <frodef> Xach: thanks.
[18:34:58] *** Quits: myrrh (~markus@user/poet) (Remote host closed the connection)
[18:35:17] <frodef> ..what if I want to get at "foo/bar.zap" relative to some directory?
[18:35:27] *** Quits: kevingal (~quassel@37.228.202.92) (Ping timeout: 256 seconds)
[18:35:36] <Xach> frodef: merge-pathnames works there too
[18:35:57] <pjb> lisp123: colors are not structured, they're a continuum.
[18:36:08] <pjb> lisp123: you need to perform an OO analysis first.
[18:36:29] <pjb> lisp123: Of course, your analysis may lead you to things like green yellow red as symbols or semaphore states. But not colors.
[18:36:42] <lisp123> pjb: Indeed. But this was more about an approach to take where I don't "lose" information
[18:36:45] <pjb> (semaphore-state sem) -> #<semaphore-state red>
[18:37:04] <pjb> Then you can have classes such as closed-semaphore-state open-semaphore-state etc.
[18:37:19] <lisp123> pjb: That's a good idea actually, I will google this "semaphore" thing
[18:37:24] <frodef> Xach: (merge-pathnames #p"/tmp/" #p"bar/foo.zap") -> #P"/tmp/foo.zap"
[18:37:30] <pjb> lisp123: again, you must do the analysis!
[18:37:38] <Xach> frodef: bar/foo.zap is relative. it should go first.
[18:37:46] <pjb> lisp123: https://en.wikipedia.org/wiki/Object-oriented_analysis_and_design
[18:37:53] <Xach> (merge-pathnames relative abvsolute)
[18:38:04] <lisp123> pjb: Thanks. By the way, do you have any recommended books?
[18:38:16] <frodef> Xach: indeed. Thanks!
[18:38:30] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:39:17] <pjb> lisp123: eg. Grady Booch. "Object-oriented Analysis and Design with Applications, 3rd edition":http://www.informit.com/store/product.aspx?isbn=020189551X Addison-Wesley 2007.   or  Meyer, Bertrand (1988). Object-Oriented Software Construction. Cambridge: Prentise Hall International Series in Computer Science. p. 23. ISBN 0-13-629049-3.
[18:39:34] <lisp123> pjb: Thanks <3!
[18:40:33] <rotateq> oh Bertrand Meyer :)
[18:41:13] <Xach> frodef: merge-pathnames is great. it takes a pathname and tries to make it complete in some way. so i sometimes have a function like (template-file name) => (merge-pathnames "foo" "/path/to/templates/template.html") => "/path/to/templates/foo.html"
[18:42:27] <frodef> neat
[18:42:56] <lisp123> pjb: Thanks for your help, I need to digest a lot of it. What was your lambda-list parser about? I didn't fully follow from the code
[18:42:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[18:43:08] <Xach> *default-pathname-defaults* also comes into play
[18:43:11] <lisp123> Is it just reimplementing what CL already has?
[18:43:37] <pjb> lisp123: parsing things like (a b &optional (o 42) &key (k1 nil k1p) ((k2 :rrr)))
[18:44:14] <pjb> lisp123: CL doesn't have it. Each CL implementation has it, but none expose it publicly.
[18:44:19] <lisp123> ah, and outside of a function / macro definition, as in in 'normal use'?
[18:44:22] *** Joins: foxfromabyss (~foxfromab@2a01:c23:61dc:d700:6562:7d62:aad7:a17)
[18:44:33] <lisp123> Ah okay, so also to make it public
[18:44:40] <lisp123> Cool stuff
[18:45:01] <bollu> How do I disable SBCL optimizations? I have  (declaim (optimize (debug 3))) defined in my file
[18:45:26] <pjb> lisp123: (lambda-list-parameters (parse-lambda-list '(a b &optional (o 42) &key (k1 nil k1p) ((k2 :rrr))) :ordinary)) #| --> (#<&mandatory a #x302002E1E8CD> #<&mandatory b #x302002E1E87D> #<&optional (o 42) #x302002E1E80D> #<&key (k1 nil k1p) #x302002E1E76D> #<&key ((k2 :rrr)) #x302002E1E6DD>) |#
[18:45:26] <bollu> But I still see `fast-method` during evaluation
[18:45:44] <phoe> is there even a SLOW-METHOD in SBCL though?...
[18:45:46] * phoe thinks
[18:45:51] <Bike> yeah, the regular method function.
[18:45:58] <phoe> OK
[18:46:07] <Bike> fast methods are a deep part of the clos implementation. i don't think they can be turned off. they're not something the compiler is doing, for one.
[18:46:13] <bollu> mn
[18:46:15] <bollu> mh*
[18:46:16] <phoe> but is that affected by optimization qualities at all?
[18:46:26] <bollu> I then wonder how quicklisp gives me a cleaner (easier to use) stack trace
[18:46:29] <bollu> does it not optimize?
[18:46:36] <lisp123> pjb: Nice!
[18:46:39] <phoe> too many variables in that question
[18:46:40] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[18:46:46] <phoe> bollu: what two stacktraces are you comparing
[18:46:48] <Bike> what is the problem with the fast methods, exactly?
[18:47:37] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:47:59] <bollu> Bike At the stack trace  1: ((:METHOD DEEPEQ (T T)) #<INST-ADD {1001E94723}> #<INST-ADD {1001E947A3}>) [fast-method], when I hit `v` (for view source), I am taken to something that is generated by SBCL. I would expect it to take me to the definition of DEEPEQ in my sources
[18:48:39] <Bike> do any of the other frames take you to the method definition?
[18:49:52] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:51:13] <bollu> Bike Not as far as I can tell. It's all (EVAL <stuff>) which takes me to EVAL's definition, or (SLYNK <stuff>) or.. Here's all the frames, in case I missed something: https://gist.github.com/bollu/3a3146f5ff8964a97476ba46b24533f8
[18:51:49] <Bike> hmm. and you compiled all this with debug 3, huh? surprising
[18:52:47] <bollu> yes.
[18:52:53] <bollu> Should I switch common lisp implementations?
[18:53:01] <Bike> weren't you using lispworks?
[18:53:04] <bollu> I was
[18:53:07] <bollu> but then I wanted FSet
[18:53:11] <jdz> bollu: If you want to inhibit libraries overriding your debug policy, you can use (sb-ext:restrict-compiler-policy 'debug 1) on SBCL.
[18:53:29] <jdz> Use the appropriate number.
[18:53:31] <Bike> i don't think this involves libraries
[18:53:32] <bollu> trying to load FSet via ql makes lispworks run out of heap space on their personal edition :)
[18:53:37] <bollu> This does not, no
[18:53:45] <Xach> Perhaps it's something to do with using sly-eval-region instead of compiling or loading.
[18:53:59] <Bike> oh wait, yeah.
[18:54:08] <Bike> that might screw up the source info.
[18:54:09] <bollu> Xach I'm using `sly-eval-buffer` to run the buffer.
[18:54:18] <bollu> Should I use some other command?
[18:54:32] <jdz> Something with a word "compile" in it, probably.
[18:54:38] <Bike> C-c C-k sly-compile-and-load-file
[18:54:41] <Bike> might be better
[18:56:48] <Bike> i tried (deepeq (mk-inst-add :x :y 1) (mk-inst-add :x :y 1)) with your code from yesterday but there was no error, so i guess you've changed it since
[18:57:08] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.broadband.hu) (Ping timeout: 256 seconds)
[18:58:33] <lisp123> pjb: I read through your comments and understand them now, thanks
[19:00:37] *** Quits: miique (~miique@181.46.139.166) (Ping timeout: 240 seconds)
[19:03:02] <bollu> Bike I'm having some CLOS differences between lispworks and SBCL it looks like
[19:03:08] <bollu> Hence the compile error :)
[19:03:14] <Bike> i mean, i ran it in sbcl
[19:03:15] <bollu> thanks, compile-and-load-file does the job
[19:03:18] <bollu> oh
[19:03:19] <bollu> ?
[19:03:20] <bollu> hmm
[19:03:25] <bollu> then I don't know what's happening
[19:03:32] <Bike> 2spooky.
[19:03:40] <bollu> indeed :)
[19:04:52] <bollu> can I get emacs to "teach me" keybindings? Like, I ran `M-x sly-compile-and-load-file`. I wish something in the interface would popup and say "You can use C-c C-k"
[19:05:19] <Bike> it does that for me, actually, and i haven't configured anything. let me see if there's a switch
[19:05:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:05:43] *** Quits: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246) (Quit: ZNC 1.8.2 - https://znc.in)
[19:05:50] <gabc> I think it's the M-x completion system? I don't think it's built-in in vanilla
[19:05:58] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[19:06:10] <Bike> you can also do C-h f sly-compile-and-load-file and it will list keybindings
[19:06:24] <Bike> my emacs is pretty vanilla. hrm.
[19:07:29] <gabc> um with emacs -q, M-x find- <TAB> the completion popup has keybindings
[19:07:38] <gabc> but not if it auto completes to the full command
[19:08:06] <gabc> well, TIL
[19:08:41] <jdz> C-h w
[19:10:05] <jdz> There's suggest-key-bindings.
[19:20:47] *** Quits: foxfromabyss (~foxfromab@2a01:c23:61dc:d700:6562:7d62:aad7:a17) (Ping timeout: 256 seconds)
[19:21:02] *** Joins: nature (~nature@45.32.235.173)
[19:24:33] *** Joins: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b)
[19:26:57] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Remote host closed the connection)
[19:27:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[19:27:37] *** Joins: Jing (~hedgehog@2604:a840:3::103c)
[19:35:01] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[19:35:05] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:38:13] <jfb4> bollu: typically Emacs normally suggests the keybinding after using M-x ...   Try running emacs -Q and issuing some M-x command with a keybinding (eg M-x find-file)
[19:38:25] <bollu> jfb4 okay, lemme try that!
[19:38:55] <jfb4> bollu: you may wish to consider which-key-mode, which is very useful in showing possible bindings, eg for the common C-x or C-c
[19:40:25] <bollu> so class-slots doesn't seem to exist on clos?
[19:41:33] <beach> mop class-slots
[19:41:33] <specbot> http://metamodular.com/CLOS-MOP/class-slots.html
[19:41:53] <beach> bollu: You need the MOP for that.
[19:42:18] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[19:42:31] <beach> bollu: You can use the system CLOSER-MOP to avoid implementation-specific package names.
[19:46:49] <phoe> beach: I think I found a decent solution for the issue I mentioned and I wonder if it would make a good WSCL addition
[19:47:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[19:47:37] *** Quits: taiju (~user@240b:253:ec40:2400:89a7:8e7a:a861:7c6b) (Ping timeout: 240 seconds)
[19:47:41] <beach> I am afraid I didn't follow the details.  Can you summarize?
[19:47:57] <phoe> yes, let me write this down
[19:48:46] <phoe> if U-I-F-{R,D}-C causes a non-local exit, then the instance is restored to its previous state - it either becomes fully obsolete once again (in case of redefined class) or it is restored to its previous class and slot values (in case of different class)
[19:49:21] <phoe> in other words, if an error interrupts U-I-F-{R,D}-C, then the programmer may try to fix up their code and try accessing the instance/changing its class again
[19:49:26] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:49:35] <phoe> and the instance is not left in a "half-updated" state
[19:49:46] <phoe> either it's obsolete/of old class or it's updated/of new class
[19:49:48] <beach> Oh, so this is your solution you are describing?
[19:49:52] <phoe> yes
[19:50:39] <phoe> the problem is that U-I-F-{R,D}-C can signal an error and then the instance can be left in a half-baked state; the solution I propose is what I just wrote above
[19:50:39] <beach> Well, for WSCL, I insist on looking at what current implementations do, and especially see whether they agree.  It is likely they do since many use PCL.
[19:50:50] <beach> I understand.
[19:51:09] <phoe> SBCL currently leaves it in a half-baked state, but I've just prepared (my first ever) SBCL commit to implement and test this behavior
[19:51:23] <beach> Sounds good.
[19:51:27] <phoe> ;; and I hope this behavior makes sense
[19:51:38] <beach> I am not (yet) convinced that your solution is the right one though.
[19:51:56] <phoe> sure, I am thinking if there are better ones
[19:52:05] <beach> I.e., I am not (yet) sure I see a problem with the "half-baked" behavior.
[19:53:51] <phoe> OK, so a bit more context from my side - I am e.g. trying to a write a metaclass whose slots are always bound, and I want to handle redefinitions
[19:54:12] <phoe> (defclass foo () () (:metaclass always-bound-class))
[19:54:19] <phoe> (defvar *foo* (make-instance 'foo))
[19:54:25] <phoe> then I want to redefine FOO to include a new slot
[19:54:30] <beach> Ah, yes, that makes a bit more sense to avoid half-bakedness.
[19:54:36] <phoe> (defclass foo () ((slot :initform 40)) (:metaclass always-bound-class))
[19:55:04] <phoe> now (slot-value *foo* 'slot) causes my U-I-F-R-C to signal an UNBOUND-SLOT error, as intended
[19:55:17] <phoe> but instead of providing a value for it, I invoke the ABORT restart
[19:55:39] <phoe> ...and *foo* effectively has an unbound slot now
[19:56:02] <beach> I understand.
[19:56:07] <phoe> err, sorry, not :initform 40 but :initarg :slot
[19:56:57] <phoe> if the instance is forced to stay obsolete until U-I-F-R-C completes successfully then this has a chance of signaling errors for as long as necessary, instead of silently allowing a half-updated instance to linger
[19:57:05] <phoe> hence my idea
[19:57:23] <beach> Yes, I see.
[19:58:10] <beach> It may be overkill to specify such behavior as you suggest when it applies only to a particular case.
[19:58:19] <beach> ... thinking in terms of WSCL I mean.
[19:58:35] <phoe> yes, that's right
[19:59:05] <phoe> I'm also thinking of "what would be the right thing to do in such a situation"
[19:59:34] <phoe> like, is updating an instance/changing its class meant to be "transactional", as in either 100% done or 0% done
[19:59:34] <beach> Sure.
[19:59:40] <beach> Not obvious to me.
[19:59:45] <phoe> and what would a programmer expect in such case
[20:00:22] <phoe> the current behavior for errors in update-instance-* is wild west
[20:01:51] <phoe> looking from another point of view: what would be a possible scenario in which it is feasible for U-I-F-{R,D}-C to signal an error and leave the instance's slots *not* updated?
[20:02:03] <beach> In existing implementations you mean?  Or in the standard?
[20:02:04] <phoe> is there existing code that depends on such behavior?
[20:02:19] <phoe> I mean in programmer practice
[20:02:26] <phoe> the standard does not define any kind of error handling for that situation
[20:02:38] <beach> Right.
[20:03:00] <phoe> I'm thinking the way of "as a programmer, how could I try to treat this behavior as a feature?"
[20:03:17] <beach> That's a good start.
[20:03:22] <Alfr> phoe, maybe 3.7.2?
[20:03:28] <phoe> clhs 3.7.2
[20:03:28] <specbot> Transfer of Control during a Destructive Operation: http://www.lispworks.com/reference/HyperSpec/Body/03_gb.htm
[20:03:46] <phoe> Alfr: yes, that works
[20:04:20] <phoe> CHANGE-CLASS is definitely a destructive operation, and so is U-I-F-D-C
[20:04:38] <phoe> so is U-I-F-R-C because the instance's insides are moved around
[20:06:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:06:24] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:08:00] <phoe> then the state of such an instance depends on the implementation in question
[20:08:30] <phoe> ...and I assume that convincing implementation maintainers to make a rollback in such a situation is a feasible thing to do
[20:08:42] <phoe> especially if patches are provided
[20:10:24] <Bike> in clasp, at least, update-instance-for-redefined-class is actually only called after the low level structure of the instance is changed.
[20:11:24] <Bike> well, actually that's pretty much how the standard method is described too. it just checks the initargs (which is nonsense, but whatever) and calls shared-initialize.
[20:12:38] <Bike> so by that point the class has been swapped out and the instance storage changed, presumably.
[20:13:09] <Alfr> phoe, not sure it's feasible. Imagine for some class uif[dr]c would shuffel/replace the contents of a vector stored in it's slot, if that has happened and the error is signaled later, how would an implementation revert that in general?
[20:13:17] <Bike> so rollback may be difficult.
[20:13:38] <Bike> Alfr: i was assuming phoe meant the standard method would do this, and if a programmer defines their own method it's up to them.
[20:14:17] <Alfr> Bike, ah ... okay. That'd at least exclude the case I just mentioned. :)
[20:14:50] <phoe> the process in 4.3.6 is two-step, where the first step is munging the instance's storage and the second one is calling U-I-F-R-C
[20:15:13] <Bike> right.
[20:15:32] <phoe> and my proposal is, effectively, rolling back the first step if U-I-F-R-C signals an error
[20:15:47] <Bike> and then let the error continue propagating?
[20:15:51] <phoe> so then the programmer may fix up their code and "try again"
[20:15:54] <phoe> Bike: yes
[20:16:10] <Bike> mhm.
[20:16:13] <phoe> hmmm
[20:16:14] <phoe> ...
[20:16:25] <phoe> should it be actually, it signaling an error, or it exiting via a non-local exit
[20:16:30] <Bike> the latter.
[20:16:52] <phoe> I think the latter - an error can be handled, e.g. a STORE-VALUE restart may be used from the debugger to store a value in a slot that must not be unbound
[20:16:58] <phoe> good, then my SBCL patch makes sense
[20:17:14] <phoe> s/can be handled/can be handled without leaving U-I-F-R-C/
[20:17:34] <Bike> the rollback would presumably be done by the (unwind-protect (progn (u-i-f-r-c ...) (setf done t)) (unless done do-rollback)) kind of pattern.
[20:17:44] <phoe> Bike: exactly what I did
[20:17:48] <phoe> https://github.com/phoe-trash/sbcl/commit/ee6f1f4debb59a2975b5ec36966d633d7214b2a1
[20:19:31] <Bike> hmm. think this could be done in clasp, probably. for redefined class, at least, haven't looked at different
[20:19:46] <phoe> different is easier to think of, because you have the copy
[20:20:11] <phoe> you should be able to move stuff back from the copy to the original, at least that's what happens in SBCL
[20:20:16] <phoe> s/SBCL/my SBCL patch/
[20:20:40] <Bike> think different-class would be ok too. the sicl rack design means it's mostly just switching the rack in the primitive instance
[20:21:05] <Bike> oh, wait, but then there's my weird optimization, lessee
[20:21:27] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7)
[20:23:28] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:23:31] <Bike> ok, so what happens if a user method on change-class, rather than u-i-f-d-c, transfers control?
[20:23:39] <Bike> an :after method, say. is rollback done?
[20:24:29] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[20:25:46] <phoe> hmmm
[20:26:07] <phoe> the user has direct control over that at that point, so it should be up to think I think
[20:26:30] <phoe> as in, the primary method has already executed
[20:27:01] <phoe> s/to think I think/to them I think/
[20:27:27] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:28:15] <phoe> I assume that the whole primitive operation of changing the object's class and munging its insides happens inside CHANGE-CLASS's primary method (or, rather, the system-defined methods)
[20:28:35] <Bike> yes.
[20:30:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[20:30:05] <phoe> the question is, how can you even trigger a rollback in such a situation
[20:30:29] <phoe> CHANGE-CLASS :AFTER specialized on a non-standard class is going to be the last to execute
[20:30:43] <phoe> (well, unless we count in CHANGE-CLASS :AROUND)
[20:31:00] <phoe> (and then that specialized on a custom class is going to be the last to execute, again)
[20:35:38] <phoe> I think that the transaction should cover the system-defined methods of CHANGE-CLASS only - the reason is that this is the only part that the programmer is unable to easily re-invoke, as it computes arguments to and calls U-I-F-D-C on its own
[20:38:21] <phoe> but I'm open to suggestions and things that can go wrong with this idea
[20:39:57] *** Joins: Oladon (~olad@98.43.81.226)
[20:44:06] *** Joins: notzmv (~zmv@user/notzmv)
[20:46:34] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[20:47:35] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[20:47:48] *** Joins: paul0 (~paul0@user/paul0)
[20:47:50] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[20:48:31] <Bike> spose that works. and for the same reason reinitialize-instance isn't really a problem
[20:49:05] <phoe> yep
[20:49:46] <phoe> I-I isn't a problem in most cases because it's most commonly used from within MAKE-INSTANCE and therefore there is no instance that the user can treat as half-baked
[20:50:10] <phoe> and if they manually ALLOCATE-INSTANCE then the instance is half-baked by definition unless I-I successfully brings it to 100% bakeness
[20:50:46] *** Quits: Jing (~hedgehog@2604:a840:3::103c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:51:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:52:44] *** Joins: VincentVega (~user@212.97.4.16)
[20:53:27] *** Joins: jstoddard (~user@107-142-159-57.lightspeed.sndgca.sbcglobal.net)
[20:55:57] <jackdaniel> allocate-instance may be used to create a container for a shallow copy of another instance
[20:57:30] <phoe> yes, but then you usually iterate over and copy slots manually instead of calling INITIALIZE-INSTANCE, right?
[20:57:46] <phoe> if you don't call I-I then you don't need to care about errors in I-I
[21:00:34] <jackdaniel> sure
[21:01:30] <phoe> OK - I understood what you mean
[21:01:50] <phoe> "unless I-I successfully brings it to 100% bakeness" → "unless I-I *or some other programmer intervention* successfully brings it to 100% bakeness"
[21:02:38] *** Joins: Josh_2 (~user@37.25.47.130)
[21:02:52] <Josh_2> Hi
[21:03:18] <Josh_2> https://github.com/mattmundell/nightshade Is this a fork of cmucl?
[21:04:06] *** Demosthe1ex is now known as Demosthenex
[21:05:15] <phoe> "As of version 1b Nightshade is most probably entirely public domain.  It is based on CMUCL 18c."
[21:05:23] <phoe> from COPYING in that directory
[21:08:46] <Bike> how mysterious.
[21:12:21] *** Joins: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no)
[21:21:29] *** Quits: Xach (~xach@66-63-89-62.static.suscom-maine.net) (Ping timeout: 252 seconds)
[21:23:20] *** Quits: varjag (~user@188.95.247.249) (Ping timeout: 256 seconds)
[21:25:50] <phoe> beach: this "exercise" project so far found one bug in SBCL and one possible way forward for implementation-dependent behavior
[21:25:56] <phoe> I think I'm going to continue it
[21:27:40] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[21:28:24] *** Joins: Alfr (~Alfr@user/alfr)
[21:28:36] *** Quits: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no) (Ping timeout: 268 seconds)
[21:30:43] *** Joins: jealousmonk (~user@2804:431:e7c4:750a:e8f5:ebdf:f21a:128e)
[21:31:41] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[21:32:30] *** Joins: Xach (~xach@66.63.89.62)
[21:33:28] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[21:34:44] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[21:35:01] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 240 seconds)
[21:40:46] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[21:45:17] *** Quits: Xach (~xach@66.63.89.62) (Ping timeout: 256 seconds)
[21:46:19] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (Quit: WeeChat 2.7.1)
[21:51:19] *** Joins: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no)
[21:51:20] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[21:51:56] <Josh_2> phoe: what are you doing?
[21:52:10] *** Quits: psf (~pi@206.55.172.18) (Read error: Connection reset by peer)
[21:53:50] *** Joins: Xach (~xach@user/xach)
[21:53:50] *** ChanServ sets mode: +o Xach
[21:56:22] <phoe> Josh_2: playing around with MOP in context of error handling
[21:58:09] *** Joins: psf (~pi@206.55.172.18)
[21:59:05] <Josh_2> Sounds interesting, do you have any examples?
[22:00:00] <bollu> beach thanks for pointing me to closer-mop. Why weren't these names standardized in the common lisp spec?
[22:00:02] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:49:20aa:b016:8bd7) (Ping timeout: 240 seconds)
[22:00:17] <phoe> Josh_2: yes, one second
[22:00:48] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[22:01:07] <jackdaniel> bollu: mop was still under development when the standard was published
[22:01:09] <Josh_2> bollu: because the MOP isn't standard
[22:01:30] <jackdaniel> some choices in the standard are influenced by ungergoing effort to specify the metaobject protocol
[22:01:51] <bollu> I see
[22:01:52] <jackdaniel> (i.e compute-applicable-methods was defined as a generic function while originally it was proposed as an ordinary one)
[22:02:20] <jackdaniel> so some choices are deliberely forward compatible with then-upcoming mop specification
[22:02:24] <phoe> Josh_2: https://github.com/phoe-trash/value-semantics-utils see the tests
[22:05:50] *** Quits: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no) (Ping timeout: 256 seconds)
[22:05:50] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[22:06:38] *** Joins: amb007 (~a_bakic@57.135.22.93.rev.sfr.net)
[22:06:45] <Josh_2> phoe: Thanks
[22:09:00] *** Quits: psf (~pi@206.55.172.18) (Read error: Connection reset by peer)
[22:09:00] *** Quits: amb007 (~a_bakic@57.135.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:09:26] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:14:32] *** Joins: psf (~pi@206.55.172.18)
[22:23:27] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[22:33:37] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[22:41:25] <bollu> where do I find docs for closer-mop?
[22:41:52] <phoe> https://metamodular.com/CLOS-MOP/
[22:42:08] <phoe> *unless* you are looking for something that's specific to CLOSER-MOP the library and not to MOP in general
[22:42:26] <bollu> damn, neat
[22:42:28] <phoe> for these, there's https://github.com/pcostanza/closer-mop/blob/master/features.txt and generally sources on github
[22:42:44] <phoe> and the README there has some details
[22:43:16] <phoe> generally, using CLOSER-MOP should bring you as close to the MOP specification as possible, no matter what implementation you are on
[22:47:12] *** Quits: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (Ping timeout: 256 seconds)
[22:52:32] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[22:55:41] *** Joins: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no)
[22:56:36] *** Quits: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb) (Remote host closed the connection)
[22:59:55] *** Joins: theothornhill (~user@2a01:799:159d:aa00:3085:8eab:86cd:42cb)
[23:03:37] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[23:03:46] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[23:05:49] *** Quits: rain3 (~rain3___@2a02:2f09:d405:a600:7f3e:4e48:ca3c:8857) (Ping timeout: 240 seconds)
[23:12:57] *** Quits: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no) (Ping timeout: 240 seconds)
[23:18:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:21:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:26:36] *** Joins: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no)
[23:27:12] *** Quits: zoglesby (f0f8ca1525@user/zoglesby) (Remote host closed the connection)
[23:27:20] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[23:31:39] *** Quits: cage (~cage@dynamic-adsl-84-220-221-96.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:32:34] *** Joins: xmyst (~xmyst@ip5f5ac363.dynamic.kabel-deutschland.de)
[23:39:43] *** Quits: VincentVega (~user@212.97.4.16) (Read error: Connection reset by peer)
[23:40:02] *** Joins: VincentVega (~user@212.97.4.16)
[23:40:19] *** Quits: mingus (~jan-magnu@auth-146-53.anyconnect.uib.no) (Ping timeout: 256 seconds)
[23:43:26] *** Joins: nij- (~jin@2001:48f8:9021:806::619b)
[23:49:58] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[23:57:10] *** Quits: nij- (~jin@2001:48f8:9021:806::619b) (Quit: Using Circe, the loveliest of all IRC clients)
[23:57:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
