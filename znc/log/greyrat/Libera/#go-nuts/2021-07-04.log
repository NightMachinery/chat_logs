[00:00:56] *** Joins: kiril (~kiril@85.91.153.163)
[00:07:14] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:09:55] *** Joins: kiril (~kiril@85.91.153.163)
[00:13:43] <j416> Sam: I haven't read the backlog, but thanks so much for explicitly mentioning that.
[00:13:44] <j416> <3
[00:17:01] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[00:19:44] *** Quits: rgl (~rgl@85.245.47.147) (Remote host closed the connection)
[00:20:18] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 268 seconds)
[00:24:45] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:27:28] *** Joins: Eddward (~Eddward@207.138.204.132)
[00:29:24] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:32:53] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:33:47] *** Joins: kiril (~kiril@85.91.153.163)
[00:33:47] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[00:33:59] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[00:35:36] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[00:42:30] *** Quits: theoceaniscool (~theoceani@93.177.121.14) (Ping timeout: 268 seconds)
[00:43:06] *** Quits: dr0n (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[00:45:37] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:50:36] *** Quits: TechnoDelver (~TechnoDel@user/technodelver) (Ping timeout: 272 seconds)
[00:52:43] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[00:55:39] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:56:26] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[00:57:11] *** Joins: andlabs (~andlabs@71.190.119.164)
[00:59:57] *** Joins: kiril (~kiril@85.91.153.163)
[01:06:07] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[01:09:55] *** Joins: dr0n (~nabromov@217.138.202.116)
[01:14:48] *** Joins: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[01:18:14] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[01:19:04] *** Quits: darkapex (uid360049@user/darkapex) (Quit: Connection closed for inactivity)
[01:19:08] *** Quits: bodhi (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[01:30:34] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[01:32:24] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 272 seconds)
[01:46:46] *** Joins: nicks (~igloo@host81-154-239-215.range81-154.btcentralplus.com)
[01:49:00] *** Quits: nicks (~igloo@host81-154-239-215.range81-154.btcentralplus.com) (Remote host closed the connection)
[01:51:03] <dr0n> hello, maybe a stupid question, but I am getting a bit confused when reading about concurrencies; is that actually a parallelism?
[01:52:22] <dr0n> it doesn't seem to be, but just wanted to ask
[01:55:35] <b0nn> the answer is "kind of"
[01:56:15] <b0nn> concurrency is closer to reality than parallelism
[01:56:47] <src> dr0n: there are some very good talks about this
[01:56:55] <b0nn> That is, in reality a "parallel" application runs a bit of one task, then a bit of another, then abit of the first
[01:57:12] <dr0n> src: I was watching some video last night; and the guy who was giving it - wasn't very clear
[01:57:20] <src> dr0n: https://www.youtube.com/watch?v=oV9rvDllKEg
[01:57:22] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:e57a:bd32:f5d2:cc12) (Quit: Leaving)
[01:57:30] <b0nn> Which is what concurrency is, it's reasoning that although conceptually things run in parallel, in reality they do not
[01:57:30] <dr0n> but one thing he touched on; was the behaviour in Golang when you have a single CPU, and multiple CPU's
[01:57:53] <dr0n> and I kind of got the impression - in the case of multiple CPU's - it can behave like a paralelism
[01:58:10] <dr0n> but it wasn't clear
[01:58:52] <src> concurrency can make things more efficient even if not parallel, you could write something concurrently but it could just be context switching, but concurrency allows for effective parallelism as well
[01:58:56] <src> that is my understanding
[02:01:01] <dr0n> b0nn:  interesting, thank you
[02:01:41] <b0nn> concurrent thinking is helpful debugging code, knowing that "unprotected" shared state can be changed at any time by another thread gives you insight into where you should put protections
[02:01:53] <dr0n> src: in a way, (sorry if I am saying it wrong); I am under impression, you have the main routine and the sub-routines; the scheduller switches between them
[02:02:01] <j416> except no?
[02:02:03] <dr0n> e.g. as you said - context switch (very fast)
[02:02:07] <j416> things can run truly parallel
[02:02:25] <b0nn> that is, in a parallel world you might expect two copies of the same resource to exist that both threads can do with as they wish, but the truth is that concurrency exists and the shared state can be changed at any time
[02:03:25] <b0nn> and you cannot predict in advance which thread owns a shared resource
[02:03:43] <j416> as I understand the term, concurrency is about dealing with the interaction of multiple things running at the same time (parallel or not)
[02:04:03] <j416> parallelism is merely an optimization
[02:04:18] <j416> as in, whether or not the thing runs on multiple cores or not
[02:05:13] <dr0n> so, how does this works in the other languages
[02:05:14] <j416> a concurrent program can be run in parallel, but does not have to
[02:05:34] <dr0n> is there a 'real parallelism' in another language? or its similar to Go
[02:05:53] <j416> what do you mean by 'real parallelism'?
[02:06:20] <b0nn> dr0n: not really
[02:06:23] <dr0n> j416: multiple tasks are being processed at the same time
[02:06:32] <j416> dr0n: Go can do this.
[02:06:39] <b0nn> software doesn't really determine whether something is parallel or not
[02:06:55] <dr0n> j416: when I say the same time, there is no 'scheduller' that is controlling the CPU's and what data is going to them - e.g. real time multiple tasks are happening in parallel
[02:07:05] <j416> dr0n: yes.
[02:07:19] <b0nn> I mean, you can tell the kernel that you want things done on one thread, but you cannot tell the kernel that a given piece of hardware must host that thread exclusively
[02:07:21] <LambdaComplex> I'm laying in a hammock with a book about Go
[02:07:26] <LambdaComplex> I hope you all are having good days too
[02:08:01] <j416> dr0n: if your system has 4 cores, your Go program can run on all of them.
[02:08:13] <j416> this is parallelism
[02:08:47] <b0nn> Go schedules goroutines onto threads, those threads are managed by the kernel scheduler
[02:08:49] <j416> any programming language that supports proper threading can do this
[02:09:17] <b0nn> the kernel manages the timeslices of a CPU
[02:09:22] <b0nn> or tries to
[02:09:32] <b0nn> the hardware has the final say
[02:10:04] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-b1cc-b9c9-2409-4bf6.ip6.gigabit.dk)
[02:10:35] <dr0n> just found the peace of text
[02:10:37] <b0nn> And even that depends on the nature of your kernels access to the hardware, if it's via a virtual machine, then there is another scheduler at play
[02:10:38] <dr0n> let me see how do I share it
[02:11:01] <j416> peace of text. sounds nice.
[02:11:08] <dr0n> which actually aligns with what b0nn  is saying
[02:11:35] <dr0n> this is from Bon Bodner - Learning Go "O'Reilly'
[02:12:53] <dr0n> https://photos.app.goo.gl/M51jGFd6GVGSDE4p9
[02:13:19] <j416> yes
[02:13:37] <j416> adding more goroutines doesn't necessarily mean things run faster
[02:14:11] <ikke> there are only so many threads that a CPU can run, and other things might be the bottleneck
[02:14:34] <b0nn> dr0n: as a Go developer you have to accept that you have ZERO gurantees on the nature of the scheduling of the hardware
[02:14:49] <ikke> I don't think that's limited to go :)
[02:14:56] <b0nn> True
[02:15:01] <j416> the system still has to juggle the available resources (Go scheduler, kernel scheduler) and so if there are too many things trying to run at the same time, the schedulers will eat a lot of that
[02:15:13] <ikke> Most of the time, you are waiting for IO
[02:16:18] <dr0n> this is great, thank you all
[02:16:24] <j416> start simple, benchmark your way to find a good balance
[02:16:27] <b0nn> When you write Go code, the best you can say is "I am giving the kernel a very strong hint about the way I want this code to be executed
[02:16:33] <dr0n> src:  can you share the link you pasted above again
[02:16:59] <ikke> In general, you should not worry to much about these things in the beginning
[02:17:10] <ikke> Write code that is easy to maintain
[02:17:20] <b0nn> Yeah, wiat til it bites you in the ass a few times :)
[02:18:03] <b0nn> ^ and by that, I mean having a general understanding is fine, it's not until you make a few mistakes that you really tune into things
[02:18:04] <dr0n> without claim i understand it very well, seems like the go routines are bringing differente challanges to the coding
[02:18:18] <dr0n> like, have to think about dead lock (I think that is the expression used in the book)
[02:18:18] <ikke> yes, certainly
[02:18:30] <ikke> concurrency is challenging
[02:18:42] <b0nn> deadlocks are common across multi threaded systems
[02:18:57] <dr0n> b0nn:  but isn't that a whole game on its own?
[02:19:06] <b0nn> sorry?
[02:19:08] <dr0n> i swear I saw a book dedicated to that
[02:19:31] <j416> Rob Pike has a presentation where he talks about a parser; I think that's a nice example of concurrency used to _simplify_, even though there's a high probability that writing that in a non-concurrent manner would have made a faster parser.
[02:19:33] <b0nn> Oh, yeah, deadlocks are the fertile ground for research because they're really hard to statically check for
[02:20:17] <dr0n> b0nn:  what I meant was, writting properly code that using go routines is a whole science on its own
[02:20:32] <ikke> b0nn: I guess akin to the halting problem
[02:20:39] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[02:20:45] <b0nn> Yeah, but you can draw on the multi threading knowledge of other systems
[02:20:58] <dr0n> j416:  nice! ;)
[02:21:04] <j416> here's the video https://youtu.be/HxaD_trXwRE
[02:21:23] *** Joins: Torr (~Torr@user/torr)
[02:21:53] <j416> (not sure if lexical scanning is the same as parsing; I'm not familiar with the proper terms)
[02:22:03] <b0nn> What differentiates Go's goroutines from threads is the fact that the go runtime manages them
[02:22:31] <b0nn> So, all the multi threading stuff on the internet applies just as equally
[02:23:33] <b0nn> Java had "Green threads" which were managed in their runtime, but were 1:1 with machine threads that were spun up
[02:24:33] <b0nn> But they dropped that idea (not sure why), and are now looking to bring them back via the Loom project, with a ratio of M:N where multiple userspace threads can be assigned to machine threads
[02:25:00] <b0nn> Go has the M:N model, I think Haskel does too (there are a few "coroutine" systems out there
[02:25:11] <j416> I thought green threads were N:1.
[02:25:25] <dr0n> what is green threads?
[02:25:37] <dr0n> wait, will google it
[02:25:47] <j416> thread-like behaviour
[02:25:50] <j416> from threads
[02:25:53] <j416> er
[02:25:56] <j416> enter key too fast
[02:25:59] <ikke> I guess userspace threads?
[02:26:02] <j416> ^
[02:26:16] <b0nn> The Green team in java created "user space" threads
[02:26:17] <j416> thread-like behaviour from threads that are not real threads, but user-space emulated threads
[02:27:03] <b0nn> But coroutines have a longer history IIRC
[02:27:23] <ikke> And then there is also fibers
[02:27:32] <b0nn> Green threads is how I was introduced to threading at university
[02:28:41] <b0nn> yeah, I'm not really across fibers that much
[02:30:20] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 258 seconds)
[02:33:00] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:34:37] *** Joins: andlabs (~andlabs@71.190.119.164)
[02:41:00] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:47:12] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:47:41] <b0nn> damn you dr0n - you've made me wonder if I should spend some time learning formal methods
[02:51:43] *** Quits: normen (~normen@p200300d7173dc900e8efd7f828204959.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:53:26] <dr0n> b0nn: sorry! =)
[02:53:52] <dr0n> lol
[02:55:01] <b0nn> lol, I'm supposed to be focussed on learning lambda stuff (I have dug my heels in for a few years, refusing to learn "Vendor specific" stuffs, but, I have relented on the grounds that I have decided I would like to be able to eat :)
[02:59:17] *** Joins: nattiestnate (~nate@180.243.15.91)
[03:03:28] <dr0n> hehee
[03:08:08] *** Quits: nattiestnate (~nate@180.243.15.91) (Quit: WeeChat 3.2)
[03:14:16] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[03:25:30] *** Joins: normen (~normen@p200300d7173dc90039c842b4132b8f0b.dip0.t-ipconnect.de)
[03:30:32] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:30:40] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[03:30:51] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:04] *** Joins: andlabs (~andlabs@71.190.119.164)
[03:31:15] *** Joins: jsrnop (~mark@user/jsrnop)
[03:39:17] *** Joins: TechnoDelver (~TechnoDel@user/technodelver)
[03:39:53] *** Quits: normen (~normen@p200300d7173dc90039c842b4132b8f0b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:48:40] <LambdaComplex> lambda functions are neat
[03:48:50] * LambdaComplex is annoyed that lambda@edge doesn't support environment variables though
[03:51:40] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 252 seconds)
[03:54:16] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[04:02:33] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:46] *** Quits: TechnoDelver (~TechnoDel@user/technodelver) (Ping timeout: 252 seconds)
[04:04:08] *** Joins: andlabs (~andlabs@71.190.119.164)
[04:09:13] *** Joins: SincereFox (uid337158@user/sincerefox)
[04:09:43] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:39] *** Joins: normen (~normen@p200300d7173dc90039c842b4132b8f0b.dip0.t-ipconnect.de)
[04:12:09] *** Joins: andlabs (~andlabs@71.190.119.164)
[04:15:37] *** Joins: daveed (~ride@user/daveed)
[04:22:26] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[04:26:59] *** Quits: dr0n (~nabromov@217.138.202.116) (Ping timeout: 265 seconds)
[04:28:10] *** Quits: wolfshappen (~waff@irc.furworks.de) (Remote host closed the connection)
[04:28:51] *** Joins: matthewcroughan_ (~quassel@static.211.38.12.49.clients.your-server.de)
[04:29:14] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Read error: Connection reset by peer)
[04:29:26] *** Joins: wolfshappen (~waff@irc.furworks.de)
[04:29:57] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:30:35] <kinduff> thoughts on golang web frameworks? what's the hotest one today?
[04:31:27] <kinduff> stdlib + gorilla mux?
[04:31:36] <kinduff> gin?
[04:32:16] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[04:34:21] *** Joins: morgan (~morgan@user/morgan)
[04:38:42] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 240 seconds)
[04:39:09] *** Joins: daveed (~ride@user/daveed)
[04:44:36] <b0nn> kinduff: this q comes up a LOT, and the answer is: It depends; it depends on your requirements, your skills, and the amount of time you wish to invest
[04:45:37] <b0nn> gorilla is the closest to "batteries included" but is a bit slow/bloaty; stdlib is fine, but can leave you reinventing the wheel a few times (a bit too bare) gin/chi/httprouter all fall somewhere in the middle
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:21] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:51:38] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[04:56:38] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[04:59:30] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 240 seconds)
[05:02:58] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:04:57] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[05:10:18] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[05:13:23] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 265 seconds)
[05:15:51] *** Joins: yoonkn (~user@175.197.208.79)
[05:16:54] *** alip is now known as hayaliali
[05:17:50] *** hayaliali is now known as alip-tmp
[05:19:08] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 272 seconds)
[05:21:39] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com)
[05:23:34] *** alip-tmp is now known as alip
[05:25:51] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 256 seconds)
[05:34:10] *** Quits: KekSi (~KekSi@x4dbe8f8a.dyn.telefonica.de) (Ping timeout: 265 seconds)
[05:37:43] *** Joins: KekSi (~KekSi@x4db39c0d.dyn.telefonica.de)
[05:44:02] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 252 seconds)
[05:44:39] *** Joins: mkbloke (~mkbloke@tunnel94377-pt.tunnel.tserv5.lon1.ipv6.he.net)
[05:49:22] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[05:55:09] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:01:17] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:02:57] *** Joins: Snyp (~rksht@49.207.196.247)
[06:05:55] *** Joins: andlabs (~andlabs@71.190.119.164)
[06:21:00] *** Joins: gggp (~textual@60.10.194.47)
[06:28:09] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[06:33:23] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 268 seconds)
[06:36:02] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[06:39:58] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[07:14:32] *** Quits: jackneillll (~jackneill@20014C4E18267200E7FE6464A0287621.dsl.pool.telekom.hu) (Remote host closed the connection)
[07:14:50] *** Joins: jackneillll (~jackneill@20014C4E182672000E90A14DC9F97CEE.unconfigured.pool.telekom.hu)
[07:32:05] *** Joins: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net)
[07:33:22] <f8l12> any reason why #go-nuts left freenode?
[07:34:07] <morgan> freenode bad
[07:35:17] <f8l12> all the channels seem to be dead
[07:36:05] <f8l12> how would you convert i to time here? https://play.golang.org/p/E71Kcnj9gQf
[07:42:13] <b0nn> https://play.golang.org/p/LciygE_w6c4
[07:42:36] <f8l12> thanks
[07:52:55] *** Joins: gggp (~textual@106.37.74.209)
[07:57:20] *** Quits: gggp (~textual@106.37.74.209) (Ping timeout: 252 seconds)
[07:58:36] *** Joins: gggp (~textual@60.10.194.47)
[08:03:48] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:04:14] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:07:20] <bpalmer> f8l12: freenode was taken over by somebody who decided to first nuke many channels, then effectively nuked all the channels and all the user registrations.
[08:08:23] <f8l12> i see bpalmer thanks
[08:14:26] *** Joins: Eddward (~Eddward@207.138.204.132)
[08:18:42] *** Quits: daveed (~ride@user/daveed) (Ping timeout: 240 seconds)
[08:19:52] *** Joins: daveed (~ride@user/daveed)
[08:26:03] *** Joins: gggp (~textual@60.10.194.47)
[08:26:15] *** Quits: gggp (~textual@60.10.194.47) (Client Quit)
[08:31:30] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[08:34:33] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 256 seconds)
[08:34:44] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Read error: Connection reset by peer)
[08:35:20] *** Joins: arcatech (~arcatech@user/arcatech)
[08:36:15] *** Joins: gggp (~textual@36.112.135.215)
[08:40:36] *** Quits: gggp (~textual@36.112.135.215) (Ping timeout: 252 seconds)
[08:41:19] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[08:41:43] *** Joins: gggp (~textual@60.10.194.47)
[08:43:22] *** Quits: daveed (~ride@user/daveed) (Quit: daveed)
[08:44:16] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[08:46:11] *** Quits: Snyp (~rksht@49.207.196.247) (Quit: WeeChat 3.2)
[09:06:28] *** Joins: frost (~frost@59.71.241.179)
[09:10:04] *** Quits: bertiger (~bertiger@user/bertiger) (Ping timeout: 272 seconds)
[09:23:52] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[09:24:14] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 265 seconds)
[09:25:18] *** Joins: gggp (~textual@36.112.135.215)
[09:26:00] *** Quits: gggp (~textual@36.112.135.215) (Client Quit)
[09:26:51] *** Joins: jackneilll (~jackneill@20014C4E180C430091A78D1F820045CE.unconfigured.pool.telekom.hu)
[09:29:06] *** Quits: jackneillll (~jackneill@20014C4E182672000E90A14DC9F97CEE.unconfigured.pool.telekom.hu) (Ping timeout: 240 seconds)
[09:47:38] *** Joins: frost (~frost@59.71.241.179)
[09:48:39] *** Quits: morgan (~morgan@user/morgan) (Read error: Connection reset by peer)
[09:51:12] *** Joins: morgan (~morgan@user/morgan)
[09:58:03] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Read error: Connection reset by peer)
[10:03:51] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[10:08:53] *** Joins: theoceaniscool (~theoceani@93.177.121.14)
[10:10:35] *** Quits: morgan (~morgan@user/morgan) (Quit: ZNC 1.8.2 - https://znc.in)
[10:10:57] *** Joins: Garb0 (~Garb0@user/garb0)
[10:12:18] *** Joins: morgan (~morgan@user/morgan)
[10:17:02] *** Quits: LiftLeft (~LiftLeft@154.21.28.43) (Ping timeout: 252 seconds)
[10:24:38] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[10:30:48] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[10:31:56] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[10:32:30] *** Joins: gggp (~textual@60.10.194.47)
[10:37:42] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[10:38:09] *** Joins: gggp (~textual@60.10.194.47)
[10:39:03] *** Joins: chripell (~chripell@109.255.230.3)
[10:40:52] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[10:42:31] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[10:42:58] *** Joins: mrig (~mrig@user/mrig)
[10:44:50] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 258 seconds)
[10:47:09] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 256 seconds)
[10:47:13] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:48:22] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:50:56] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[10:53:14] *** Joins: LiftLeft (~LiftLeft@212.102.59.158)
[10:53:29] *** Joins: gggp (~textual@60.10.194.47)
[10:55:17] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Client Quit)
[10:56:53] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[11:00:30] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[11:02:42] *** Parts: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (WeeChat 2.7)
[11:04:37] *** Quits: gggp (~textual@60.10.194.47) (Remote host closed the connection)
[11:04:51] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:a5a6:f6c0:9a0e:5f0a)
[11:06:55] *** Joins: gggp (~textual@60.10.194.47)
[11:14:26] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[11:15:05] *** Parts: adigitoleo (~adigitole@2001:8003:1d19:4500:a5a6:f6c0:9a0e:5f0a) ()
[11:17:35] *** Joins: gggp (~textual@36.112.134.194)
[11:22:36] *** Quits: gggp (~textual@36.112.134.194) (Ping timeout: 268 seconds)
[11:25:29] *** Joins: rens (~rens@70.39.92.7)
[11:25:43] *** Joins: adigitoleo (~adigitole@2001:8003:1d19:4500:a5a6:f6c0:9a0e:5f0a)
[11:26:42] *** Quits: rens (~rens@70.39.92.7) (Client Quit)
[11:27:38] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:e57a:bd32:f5d2:cc12)
[11:31:28] <adigitoleo> Hello, I have a question about modules: I have a go.mod file which requires a module and specifies a pseudo-version number. Is that a minimum version requirement? Or is it pinned to a specific vcs commit?
[11:36:17] <ikke> https://golang.org/ref/mod#minimal-version-selection
[11:38:30] *** Quits: meinside (uid24933@id-24933.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[11:38:51] <adigitoleo> I see, thanks!
[11:41:30] *** Joins: noxim (~noxim@user/noxim)
[11:46:35] *** Joins: oxum (~oxum@136.185.148.86)
[11:48:35] *** Quits: oxum (~oxum@136.185.148.86) (Remote host closed the connection)
[11:57:52] *** Joins: gggp (~textual@60.10.194.47)
[12:01:23] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:08:45] *** Quits: gggp (~textual@60.10.194.47) (Remote host closed the connection)
[12:10:36] *** Joins: gggp (~textual@36.112.135.215)
[12:12:42] *** Quits: pepee (~user@user/pepee) (Ping timeout: 272 seconds)
[12:19:08] *** Quits: gggp (~textual@36.112.135.215) (Ping timeout: 252 seconds)
[12:19:34] *** Joins: gggp (~textual@60.10.194.47)
[12:28:00] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[12:33:36] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[12:35:06] *** Joins: gggp (~textual@60.10.194.47)
[12:41:38] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[12:42:30] *** Quits: gggp (~textual@60.10.194.47) (Remote host closed the connection)
[12:45:26] *** Joins: gggp (~textual@60.10.194.47)
[12:50:07] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:04:43] *** Joins: oxum (~oxum@136.185.148.86)
[13:05:30] *** Parts: adigitoleo (~adigitole@2001:8003:1d19:4500:a5a6:f6c0:9a0e:5f0a) ()
[13:09:28] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 265 seconds)
[13:18:28] *** Joins: oxum (~oxum@136.185.148.86)
[13:21:28] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 252 seconds)
[13:22:56] *** Quits: oxum (~oxum@136.185.148.86) (Ping timeout: 252 seconds)
[13:57:24] *** Joins: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de)
[14:01:14] *** Joins: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru)
[14:19:45] *** Joins: shka (~herr@109.231.62.239)
[14:21:06] *** Joins: trube (~trube@165.231.161.4)
[14:26:02] *** Joins: ilinux-lover (~ilinux-lo@adsl-157.176.58.195.tellas.gr)
[14:27:26] *** Parts: ilinux-lover (~ilinux-lo@adsl-157.176.58.195.tellas.gr) ()
[14:35:00] *** Joins: gggp (~textual@60.10.194.47)
[14:49:28] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[14:54:39] *** Joins: a153 (~a153@user/a153)
[15:03:39] *** Joins: sagax (~sagax@213.138.71.146)
[15:05:34] *** Joins: Crassus (~Crassus@user/crassus)
[15:08:57] *** Quits: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca) (Ping timeout: 258 seconds)
[15:09:52] *** Joins: art_vandelay (~art_vande@bras-base-toroon63x9w-grc-21-174-89-102-174.dsl.bell.ca)
[15:11:56] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[15:13:53] *** Joins: gggp (~textual@60.10.194.47)
[15:18:15] *** Quits: gggp (~textual@60.10.194.47) (Remote host closed the connection)
[15:19:47] *** Joins: gggp (~textual@60.10.23.171)
[15:29:11] *** Quits: gggp (~textual@60.10.23.171) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:29:54] *** Joins: src (~src@user/src)
[15:33:59] *** Quits: aigoo (~aigoo@user/aigoo) (Ping timeout: 265 seconds)
[15:35:42] *** Joins: aigoo (~aigoo@user/aigoo)
[15:43:51] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[15:54:35] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[16:24:35] *** Quits: chripell (~chripell@109.255.230.3) (Remote host closed the connection)
[16:24:39] *** Joins: currybullen (~curry@h-81-170-128-138.A258.priv.bahnhof.se)
[16:26:29] *** Joins: chripell (~chripell@109.255.230.3)
[16:27:39] *** Joins: gggp (~textual@36.112.135.215)
[16:28:45] *** Quits: gggp (~textual@36.112.135.215) (Client Quit)
[16:28:48] <noonien> hello folks!
[16:29:03] <noonien> does anyone know of a way to cross-compile a windows dll with mingw without it requiring msvcrt.dll?
[16:31:50] <currybullen> very new to golang, trying to understand when objects are garbage collected. i modified the example from here https://gobyexample.com/structs into this https://paste.debian.net/1203365/. in my edit, will everything but the "age" field from the struct that is created be GCed, or is there still some way to reach the "name" field after newPerson returns?
[16:38:46] <fizzie> I don't *think* parts of allocated objects can be GC'd, but I don't know the exact rules. You can certainly reach it in practice in that example via unsafe pointer operations: https://play.golang.org/p/mdCe96IJMwG
[16:40:34] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[16:44:12] <A_Dragon> I think for that example
[16:44:17] <A_Dragon> the answer is "Its really complicated."
[16:44:37] <currybullen> haha. ok, interesting. thanks!
[16:56:39] *** Joins: Eddward (~Eddward@207.138.204.132)
[16:57:42] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[17:00:53] *** Joins: andlabs (~andlabs@71.190.119.164)
[17:01:19] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[17:02:57] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:04:22] *** Joins: Garb0 (~Garb0@user/garb0)
[17:08:18] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Ping timeout: 240 seconds)
[17:09:54] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 240 seconds)
[17:10:57] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[17:14:06] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[17:15:27] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 258 seconds)
[17:17:24] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:44:28] *** Joins: oxum (~oxum@122.181.35.97)
[17:47:14] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[17:49:19] *** Quits: oxum (~oxum@122.181.35.97) (Ping timeout: 265 seconds)
[18:02:48] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[18:05:30] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:06:26] *** Joins: kulak (~kulak@user/kulak)
[18:06:56] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[18:10:01] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:13:02] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[18:13:38] *** Joins: kulak (~kulak@user/kulak)
[18:14:19] *** Quits: zanshin (~zanshin@user/zanshin) (Quit: WeeChat 3.0)
[18:15:15] *** Joins: oxum (~oxum@122.181.35.97)
[18:16:14] *** Joins: zanshin (~zanshin@user/zanshin)
[18:19:55] *** Quits: oxum (~oxum@122.181.35.97) (Ping timeout: 256 seconds)
[18:23:19] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:27:17] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[18:30:48] *** Quits: kulak (~kulak@user/kulak) (Ping timeout: 272 seconds)
[18:34:14] *** Quits: trube (~trube@165.231.161.4) (Ping timeout: 252 seconds)
[18:34:45] *** Joins: kulak (~kulak@user/kulak)
[18:35:12] *** Joins: trube (~trube@165.231.161.4)
[18:36:55] *** Joins: leftoversalmon (~leftovers@pool-71-245-114-16.cmdnnj.fios.verizon.net)
[18:41:12] *** Joins: oxum (~oxum@122.181.35.97)
[18:41:14] <leftoversalmon> I'm trying to build the example code from the containerd tutorial here - https://containerd.io/docs/getting-started/  .  After I run "go build ./main.go", go complains about go.mod not being available (https://pastebin.com/xDF3k4wu).  How does one get go to download the dependencies (it's not really clear from 'go help modules')
[18:41:15] *** Joins: josta (~josta@68.235.36.105)
[18:43:20] <leftoversalmon> Using go 1.16.5
[18:43:26] <ikke> leftoversalmon: go1.16 switched to go modules being enabled by default
[18:43:51] <ikke> if the project does not have a go.mod/sum file, you could disable that, or run go mod init <namespace>
[18:44:42] <leftoversalmon> So how can I disable that?  And what would the namespace be in this case?
[18:44:50] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[18:44:59] <leftoversalmon> (The tutorial code doesn't provide a go.mod/sum file)
[18:45:14] *** Quits: treethought (treethou@138.68.49.251) (Ping timeout: 252 seconds)
[18:45:50] *** Quits: andlabs (~andlabs@71.190.119.164) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:46:21] *** Quits: oxum (~oxum@122.181.35.97) (Ping timeout: 265 seconds)
[18:46:40] <ikke> V
[18:46:41] <ikke> https://golang.org/ref/mod#environment-variables
[18:46:48] <ikke> GO111MODULE
[18:47:04] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 258 seconds)
[18:47:24] <leftoversalmon> Yeah I had tried setting GO111MODULE to 'auto' and 'off' and the build still fails
[18:50:05] <leftoversalmon> Oh I guess I have to manually go get github.com/containerd/containerd ?
[18:50:24] <leftoversalmon> I guess go's dependency management isn't up to snuff with rust's cargo
[18:50:41] *** Joins: treethought (~treethoug@138.68.49.251)
[18:51:04] *** Joins: andlabs (~andlabs@172.58.230.227)
[18:51:59] <leftoversalmon> Kinda weird that you need to manually download all the dependencies
[18:52:19] *** Quits: leftoversalmon (~leftovers@pool-71-245-114-16.cmdnnj.fios.verizon.net) (Remote host closed the connection)
[18:53:40] *** Joins: leftoversalmon (~leftovers@pool-71-245-114-16.cmdnnj.fios.verizon.net)
[18:54:44] *** Joins: andlabs_ (~andlabs@2607:fb90:f809:7a05:d968:c80b:5e33:7afe)
[18:55:24] <ikke> you should not need to download each dependency manually
[18:55:47] <eyJhb> leftoversalmon: You're adding a dependency :)
[18:56:06] <leftoversalmon> So how would you build this tutorial without manually downloading the depdencies?
[18:56:25] <eyJhb> Link to the tutorial?
[18:56:36] <leftoversalmon> sure i'll link again https://containerd.io/docs/getting-started/
[18:56:56] *** Joins: andlabs__ (~andlabs@172.58.227.39)
[18:57:42] *** Quits: treethought (~treethoug@138.68.49.251) (Ping timeout: 252 seconds)
[18:57:53] <eyJhb> So, from XX version Go requires modules. And most tuts will omit that. So you do the `go mod init mytut`, and the `go get ....` is kind of missleading, as it both adds it as a dependency + fetches it. After you have added it as a dependency, you wan't have to do a `go get ...` of it again.
[18:58:04] *** Quits: andlabs (~andlabs@172.58.230.227) (Ping timeout: 252 seconds)
[18:58:13] <eyJhb> As go run tut.go, would fetch it all for you, given it is in tho go.mod go.sum files :)
[18:59:48] <leftoversalmon> So you're saying to *not* run go mod init and go get?  When I do "go run tut.go" it just complains about "no required module provides package"
[18:59:53] *** Joins: andlabs (~andlabs@2607:fb90:f80d:35cd:59e5:8757:cc06:895a)
[19:00:25] <eyJhb> You SHOULD run both, and then you can do the go run tut.go
[19:00:43] *** Quits: andlabs_ (~andlabs@2607:fb90:f809:7a05:d968:c80b:5e33:7afe) (Ping timeout: 256 seconds)
[19:00:45] <leftoversalmon> So you *do* need to manually pull down each dependency with go get
[19:00:52] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[19:01:29] <eyJhb> Read what I wrote, you need to initially add it
[19:01:40] <leftoversalmon> Yeah I read what you wrote but you are contradicting yourself
[19:01:49] <eyJhb> I could give you a main.go, with go.sum + go.mod, and you could just run go run main.go
[19:02:11] <ikke> leftoversalmon: You need to differentiate between when the go.mod/sum are already available or not
[19:02:18] <eyJhb> ^
[19:02:50] *** Quits: andlabs__ (~andlabs@172.58.227.39) (Ping timeout: 252 seconds)
[19:03:13] <ikke> there is also go mod tidy that you can run after go mod init
[19:05:21] *** Joins: arcatech (~arcatech@user/arcatech)
[19:05:49] *** Quits: andlabs (~andlabs@2607:fb90:f80d:35cd:59e5:8757:cc06:895a) (Ping timeout: 256 seconds)
[19:06:21] <ikke> leftoversalmon: if I downoad and extract v1.5.2.zip, I do see a go.mod/sum file
[19:06:42] *** Joins: andlabs (~andlabs@172.58.227.114)
[19:07:14] <ikke> Oh, I guess you mean that part below
[19:07:35] <leftoversalmon> Right, there's a go.mod/sum for container source itself, but afaik not for the tutorial code
[19:07:40] <leftoversalmon> containerd*
[19:09:00] *** Joins: andlabs_ (~andlabs@2607:fb90:f801:b8d8:8d38:430d:b44:c6d3)
[19:09:04] *** Joins: treethought (treethou@138.68.49.251)
[19:10:36] *** Joins: powerjungle (~powerjung@h081217087223.dyn.cm.kabsi.at)
[19:10:37] <ikke> without go modules (go.mod/sum), you need to indeed manually download each module
[19:10:59] *** Joins: aliss (~aliss@231.red-83-44-182.dynamicip.rima-tde.net)
[19:11:06] <ikke> before it was introduced, you saw projects either vendoring all their dependencies, or using other dependency managers
[19:11:22] <leftoversalmon> thanks ikke; was kinda confused about that
[19:11:45] <ikke> go mod init example; go mod tidy
[19:12:19] <ikke> go build ./main.go
[19:12:27] *** Joins: andlabs__ (~andlabs@172.58.227.236)
[19:12:37] *** Quits: andlabs (~andlabs@172.58.227.114) (Ping timeout: 256 seconds)
[19:14:37] <leftoversalmon> perfect; thanks again ikke
[19:14:53] *** Quits: andlabs_ (~andlabs@2607:fb90:f801:b8d8:8d38:430d:b44:c6d3) (Ping timeout: 256 seconds)
[19:15:16] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:15:40] <ikke> for local things, the namespace does not matter, if you want to publish a module, the module name should match the location of where it is hosted
[19:15:53] <ikke> github.com/foo/bar
[19:15:56] *** Joins: andlabs (~andlabs@2607:fb90:f80a:8406:a931:fef2:8b35:24ab)
[19:19:25] *** Quits: andlabs__ (~andlabs@172.58.227.236) (Ping timeout: 256 seconds)
[19:22:42] *** Quits: josta (~josta@68.235.36.105) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:23:49] *** Joins: andlabs_ (~andlabs@172.58.227.237)
[19:23:52] <leftoversalmon> Makes sense; awesome
[19:24:31] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:25:07] *** Joins: kulak (~kulak@user/kulak)
[19:25:56] *** Joins: josta (~josta@23.226.133.74)
[19:26:12] <A_Dragon> vanity URLs are fun too
[19:26:13] *** Quits: andlabs (~andlabs@2607:fb90:f80a:8406:a931:fef2:8b35:24ab) (Ping timeout: 256 seconds)
[19:26:51] <A_Dragon> how does the magic comment on packages work anyway?
[19:28:00] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:e57a:bd32:f5d2:cc12) (Quit: Leaving)
[19:31:12] *** Joins: andlabs (~andlabs@2607:fb90:f807:bbba:7029:2b46:a81c:2ce4)
[19:34:09] <ikke> which one?
[19:34:22] *** Quits: andlabs_ (~andlabs@172.58.227.237) (Ping timeout: 252 seconds)
[19:34:46] *** Joins: andlabs_ (~andlabs@172.58.227.113)
[19:37:00] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:38:07] *** Quits: andlabs (~andlabs@2607:fb90:f807:bbba:7029:2b46:a81c:2ce4) (Ping timeout: 256 seconds)
[19:40:48] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[19:41:14] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:21c5:a7b6:d3de:c0d3)
[19:41:32] *** Quits: andlabs_ (~andlabs@172.58.227.113) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:44:16] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[19:45:28] *** Joins: Kane_ (~Kane@2a01:e34:ee89:5d90:48b9:6cfd:a9f2:5cb8)
[19:45:30] *** Joins: pepee (~user@user/pepee)
[19:46:00] *** Joins: mrlemke (~mrlemke@208.74.105.200)
[19:48:33] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[19:49:06] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:21c5:a7b6:d3de:c0d3) (Ping timeout: 240 seconds)
[19:49:20] *** Quits: _mrlemke_ (~mrlemke@208.74.105.200) (Ping timeout: 272 seconds)
[19:49:26] *** Kane_ is now known as Kane
[19:49:42] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Quit: Clever message)
[19:50:02] *** Joins: oxum (~oxum@122.181.35.97)
[19:50:34] *** Joins: eyJhb (~eyJhb@user/eyjhb)
[19:50:58] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[19:55:04] *** Quits: oxum (~oxum@122.181.35.97) (Ping timeout: 268 seconds)
[19:55:19] <A_Dragon> you can enforce an import name IIRC?
[19:55:34] <A_Dragon> like if you use a github.com import internally but use my.vanity externally
[19:55:42] <A_Dragon> I just converted my code to use my vanity but still
[19:57:32] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[19:58:22] *** Joins: kulak (~kulak@user/kulak)
[19:59:33] <A_Dragon> something like `package thing // import my.vanity/thing`
[19:59:51] <fizzie> You're talking about https://golang.org/cmd/go/#hdr-Import_path_checking likely.
[20:00:25] <fizzie> It's a pre-modules thing, because in go.mod you give the module's canonical import path "naturally".
[20:00:38] *** Quits: aliss (~aliss@231.red-83-44-182.dynamicip.rima-tde.net) (Quit: WeeChat 3.2)
[20:04:06] <A_Dragon> ah okay
[20:04:50] *** Quits: jjonah (~jjonah@p200300d5d723c400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:05:45] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[20:08:59] *** Joins: burningserenity (~burningse@102.129.153.78)
[20:10:36] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[20:11:00] *** Joins: dr0n (~nabromov@159.48.53.203)
[20:12:22] <acagastya> Hi, I am trying to access a SSE.  I am using github.com/subchord/go-sse for that.  For a JSON response like this <https://0x0.st/-fpC.json>, should the type <https://pkg.go.dev/github.com/subchord/go-sse#SSEFeed.Subscribe> be `"edit"`?  Is it possible to subscribe to any type?
[20:14:07] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[20:14:30] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:14:51] *** Joins: mickey (~user@user/mickey)
[20:23:22] *** Quits: josta (~josta@23.226.133.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:27:11] *** Joins: Garb0 (~Garb0@user/garb0)
[20:28:43] *** Joins: kodah (~kodah@user/kodah)
[20:29:34] <f8l12> acagastya, it explains events here: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events
[20:29:58] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[20:33:10] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 265 seconds)
[20:34:25] <acagastya> f8l12: what about the type -- I am assuming that function need the type of the event dispatched.
[20:35:33] <f8l12> acagastya, it explains that. but you need to know the type by either looking at it or if they documented it
[20:35:47] <f8l12> it isn't in the json
[22:00:59] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[22:01:56] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[22:01:59] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:02:07] *** Server sets mode: +Ccnt 
[22:03:54] *** Joins: kulak (~kulak@user/kulak)
[22:04:00] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[22:09:10] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:10:13] *** Joins: kulak (~kulak@user/kulak)
[22:10:45] *** CommunistWolf is now known as MrWolf
[22:12:29] *** Joins: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7)
[22:14:09] *** Quits: kulak (~kulak@user/kulak) (Read error: Connection reset by peer)
[22:14:22] *** Quits: yelnah (~felix@14-201-231-38.tpgi.com.au) (Ping timeout: 272 seconds)
[22:14:41] *** Joins: kulak (~kulak@user/kulak)
[22:15:42] *** Joins: CoolerY (~CoolerX@user/coolerx)
[22:17:46] *** MrWolf is now known as CommunistWolf
[22:18:48] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 272 seconds)
[22:21:05] *** Joins: milosz (~milosz@user/milosz)
[22:22:18] *** Quits: noxim (~noxim@user/noxim) (Quit: Client closed)
[22:43:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[22:44:26] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:49:28] *** Quits: dr0n (~nabromov@159.48.53.203) (Ping timeout: 265 seconds)
[22:54:18] *** Joins: reedrichards (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[22:55:32] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 272 seconds)
[22:55:32] *** reedrichards is now known as MrFantastik
[22:55:36] *** Joins: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net)
[22:56:48] *** Joins: yelnah (~felix@2001:44b8:3086:9f:6f0:21ff:fe3c:d4d7)
[22:58:10] *** Quits: ofh (~felix@2001:44b8:30cc:88:6f0:21ff:fe3c:d4d7) (Ping timeout: 256 seconds)
[23:09:45] *** Joins: r[]n|n (~r]n|n@2601:283:4602:43e0:4ce:9c21:cd23:be90)
[23:10:44] <acagastya> Is it a must to use structs to convert a string
[23:10:53] <acagastya> *a string of JSON?
[23:11:54] <eyJhb> acagastya: Ehmm... Depends on the format? If it is JUST a string, no. If it is more than just `"something"`, then yes?
[23:12:50] *** Quits: dza (~dza@user/dza) (Quit: Leaving.)
[23:13:07] *** Quits: r[]n|n (~r]n|n@2601:283:4602:43e0:4ce:9c21:cd23:be90) (Client Quit)
[23:13:54] <acagastya> eyJhb: sample string: http://0x0.st/-fft.json
[23:16:01] <acagastya> Wait, when you said "JUST a string", did you mean any random string which may or may not be parsable?
[23:16:07] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:16:22] *** Joins: mickey (~user@user/mickey)
[23:16:26] <acagastya> Does this qualify as more than `"something"`?
[23:17:49] <eyJhb> Yes, that is more than just `"somestring"` :) - You can use this https://transform.tools/json-to-go as a starting point of your struct to hold the data
[23:18:07] <eyJhb> (ie. copy paste the json to get a somewhat feel of how it l ooks).
[23:18:37] *** Joins: _mrlemke_ (~mrlemke@208.74.105.200)
[23:19:21] <acagastya> I don't exactly know if the response is always going to have the same fields.
[23:20:06] <eyJhb> No, that's another issue. Also, the types of what it return might be a issue.
[23:20:19] <eyJhb> But does a single endpoint return multiple different things randomly?
[23:20:51] <acagastya> Not randomly.  It may depend on the type.
[23:21:39] *** Quits: mrlemke (~mrlemke@208.74.105.200) (Ping timeout: 268 seconds)
[23:21:50] <acagastya> I am not too entirely sure if the structure is going to be the same.  It could.  And if it could, assuming the worst, it probably might.
[23:22:34] <acagastya> Will golang error out if the struct has foo as key but the json does not.  Or vice-versa?
[23:24:57] <eyJhb> https://pkg.go.dev/encoding/json
[23:25:05] <eyJhb> Scroll too `Examples of struct field tags and their meanings: ` :)
[23:25:35] <eyJhb> As far as I know, it will not error if the key does not exists, it will just have a empty value.
[23:25:46] *** Quits: sizeof_void34 (~Thunderbi@109-252-76-37.nat.spd-mgts.ru) (Quit: sizeof_void34)
[23:25:47] <eyJhb> BUt you can try it out ! :p Seems like the best thing to do
[23:27:06] *** Joins: bertiger (~bertiger@user/bertiger)
[23:30:28] <acagastya> All right.  Thanks!
[23:32:06] <theckman> acagastya: the `json.Decoder` can be configured to fail if it observes a key not defined in the struct. But there isn't a way to make a specific key required (i.e., that the parser will fail if it isn't present).
[23:32:10] *** Joins: dr0n (~nabromov@159.48.53.204)
[23:32:27] <theckman> Unfortunately, it can be a little annoying to get that semantic.
[23:43:40] *** Quits: Herby (~quassel@merkur.graeber-clan.de) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[23:44:46] *** Joins: Herby (~quassel@merkur.graeber-clan.de)
[23:44:48] *** Quits: oxum (~oxum@122.181.35.97) (Remote host closed the connection)
[23:44:59] *** Joins: dza (~dza@user/dza)
[23:50:05] *** Joins: oxum (~oxum@122.181.35.97)
[23:54:50] *** Quits: oxum (~oxum@122.181.35.97) (Ping timeout: 256 seconds)
[23:57:48] *** Quits: trube (~trube@165.231.161.4) (Quit: Leaving)
