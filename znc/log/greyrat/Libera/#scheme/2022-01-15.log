[00:04:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:20:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:32:50] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:33:51] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[00:38:25] <sham1> Lists are nice, what is this heresy I'm reading in this backlog
[00:44:47] <aeth> if you start by showing someone lists coming from JS or similar languages, they might get the wrong impression... unless they're coming from Python, where they will absolutely get the wrong impression because Python's "list" type has nothing to do with linked lists
[00:45:52] <aeth> Where's Practical Common Scheme?
[00:46:24] <aeth> The list chapter in Practical Common Lisp is Chapter 12
[00:53:40] *** Joins: livoreno (~livoreno@user/notzmv)
[01:01:46] <Zipheir> Practical Common Lisp also recommends defmacro...
[01:02:12] <Zipheir> If you come from JS or Python, there's going to be a lot to unlearn, anyway.
[01:03:37] <Zipheir> aeth: I just don't see what point you're arguing for.  You obviously don't hold that "lists are bad".
[01:05:15] <Zipheir> If it's "lists are unfamiliar to mainstream programmers", then I think that might be true.  But that's that, not much more to say.
[01:22:24] *** Joins: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl)
[01:24:59] *** Quits: amerigo (~amerigo@89-75-36-150.dynamic.chello.pl) (Client Quit)
[01:40:50] *** Parts: bsima (~bsima@2604:a880:400:d0::19f1:7001) (WeeChat 3.3)
[01:53:02] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[01:56:26] <aeth> Zipheir: I was arguing for hash tables, remember?
[01:56:34] <aeth> well, maybe we all got a bit sidetracked
[01:58:03] <aeth> In particular, there has always been a lists-for-everything attitude among some subset of Lispers, who have mostly wound up in Scheme these days.
[01:58:32] <Zipheir> Ah, ok.
[01:58:56] <Zipheir> There's a lot of room between the lists-for-everything and lists-for-nothing positions.
[01:59:07] <aeth> lists-for-everything makes more sense in a language with defmacro/define-macro
[01:59:15] <aeth> because it winds up being very similar to how you write macros
[01:59:30] <aeth> although doing everything through macros is probably a code smell
[02:01:16] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[02:02:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:11:40] <Zipheir> aeth: Lists (or at least s-exps) have been a very effective substrate for macro-munging.  Compare the ease of any Lisp macro system with e.g. Template Haskell. :-p
[02:14:23] <Zipheir> Anyway, I absolutely wouldn't defend flat lists against hash-tables.  Various kinds of trees, probably using lists in some internal role, I *would* argue for.
[02:15:35] <Zipheir> Red-black tree implementations of mappings give O(log n) lookup; radix trees can even improve on that.
[02:18:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 250 seconds)
[02:23:48] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 250 seconds)
[02:31:56] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:42:48] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[02:43:28] <sham1> Correct data structures for the correct things. Who'd a thunk
[03:08:31] <aeth> Zipheir: if you don't give people hash tables, they'll just use alists (or, where available, plists)
[03:08:34] <aeth> simpler
[03:10:59] <Zipheir> Well, none of the ML family provide hash-tables.
[03:11:13] <Franciman> why no hash tables?
[03:11:15] <Franciman> :(
[03:11:30] <tokie> you don't need hash tables. only lambda
[03:11:58] <Franciman> ah what about https://en.wikipedia.org/wiki/Hash_array_mapped_trie ?
[03:12:06] <Zipheir> Hah, some cretan provided true mutable hash-tables in Haskell https://hackage.haskell.org/package/hashtables
[03:12:31] <Zipheir> Franciman: One of many nice hash-table alternatives.
[03:12:52] <Franciman> some describe it as the ultimate data structure XD
[03:12:55] <Franciman> like in the clojure community
[03:12:58] <Franciman> kek
[03:13:05] <Franciman> tokie: only lambda and continuations!
[03:13:05] <Zipheir> Fools!
[03:13:43] <Zipheir> Oh, that would be "some cretin".  I'm not sure whether they're from Crete.
[03:13:43] <tokie> Franciman: i'm implementing tail call next 
[03:13:58] <Franciman> Zipheir: cretin may be from "christian"
[03:14:08] <Franciman> via french cretienne
[03:14:18] <Franciman> tokie: oh that one is tricky
[03:14:24] <Franciman> are you going to have a special opcode?
[03:14:31] <Franciman> i thought i wanted to implement it that way :P
[03:14:38] <tokie> yes
[03:15:13] <tokie> as an alternative to my CALL instruction
[03:15:21] * Franciman is in awe
[03:15:25] <Franciman> can't wait to see the code
[03:15:28] <tokie> i know
[03:15:30] <tokie> i know
[03:15:34] * tokie sweats
[03:15:48] <Franciman> take it easy
[03:16:08] <Franciman> because now i'll go to sleep
[03:16:12] <tokie> i have to implement variable argument procedures first
[03:16:13] <Franciman> so there's _plenty of time_ lol
[03:16:16] <tokie> i deferred those :/
[03:16:33] <Franciman> tokie: are you going to implement a std lib too?
[03:16:44] <tokie> you mean copy someone elses ????:D
[03:16:58] <Franciman> suuure
[03:17:00] <tokie> r5rs doesn't really have much in the way of stdlib
[03:20:20] <Franciman> yep it may be manageable
[03:20:24] <Franciman> hei tokie good luck
[03:20:30] <Franciman> with your coding. i am going to sleep
[03:20:35] <Oxyd> It still has all the fun stuff. Like complex trigonometric functions. And rationalize.
[03:21:32] <tokie> Oxyd: ohhh yeah, i have mostly skipped over the numbers section
[03:21:36] <tokie> for now
[03:22:00] <tokie> i also don't have support for strings or vectors yet
[03:22:20] <tokie> but afaik r5rs limits the mutability of both of those things so they're not too complicated
[03:22:23] <aeth> Zipheir: so what does Haskell use for JSON? I know, technically hash tables aren't quite a perfect fit because the order might change if you JSON->program<>JSON
[03:22:28] <aeth> s/<>/->
[03:24:13] <Zipheir> What's the meaning of "type used for JSON"?
[03:27:27] <gwatt> Isn't there a way to have haskell auto-translate records to/from json, probably with the deriving mechanism?
[03:27:37] <gwatt> (might be ghc specific)
[03:27:53] *** Joins: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net)
[03:30:05] <Zipheir> I haven't done anything with JSON in Haskell, but a couple of ideas for representation jump to mind.
[03:30:49] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[03:31:12] <Zipheir> ... and Hoogle suggests there are a lot of different JSON libraries.
[03:46:07] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:53:31] <aeth> Zipheir: right, but what would be the go-to way to represent a JSON object?
[03:53:39] <aeth> if not a hash table
[03:59:17] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzzâ€¦)
[04:00:32] <aeth> because that's what most languages would lean towards
[04:01:12] <Zipheir> aeth: The types are opaque in the specs..  You'd have to dig through e.g. https://hackage.haskell.org/package/json-0.10/docs/Text-JSON.html and see how the JSON type is implemented.
[04:01:34] <aeth> yes
[04:03:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[04:04:57] <gwatt> aeth: this may not be the immediate json representation, but I would assume most statically typed languages have a way to decode json as a specific data type / record
[04:04:58] <Zipheir> But if you were rolling your own thing you could just use Data.Map.  (probably implemented by R-B trees)
[04:06:51] <aeth> https://hackage.haskell.org/package/json appears to depend on https://hackage.haskell.org/package/containers
[04:06:55] <aeth> so it's probably one of those
[04:07:09] <aeth> I'd probably have to go into the source code to see which one
[04:07:46] *** Joins: livoreno (~livoreno@user/notzmv)
[04:18:43] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[04:33:16] *** Joins: notzmv (~zmv@user/notzmv)
[04:40:50] *** Joins: xsperry (~xs@user/xsperry)
[04:48:26] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:54:41] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[04:58:38] *** Joins: evdubs_ (~evdubs@user/evdubs)
[04:58:53] *** Joins: xsperry (~xs@user/xsperry)
[04:59:32] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[05:00:12] *** Joins: rickbutton_ (sid410078@id-410078.helmsley.irccloud.com)
[05:00:17] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[05:00:26] *** Joins: wallymathieu_ (uid533252@id-533252.uxbridge.irccloud.com)
[05:00:37] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[05:02:33] *** Joins: [dpk] (~dpk@xn--issum-vva.nonceword.org)
[05:02:47] *** Joins: dbohdan (~dbohdan@user/dbohdan)
[05:02:57] *** Joins: kori1 (kori@dfg.rocks)
[05:03:53] *** Joins: greaser|q (greaser@antihype.space)
[05:04:20] *** Joins: dTal_ (quassel@dragonbox/wizzard/dtal)
[05:05:17] *** Joins: Keele_ (~keele@91-158-68-128.elisa-laajakaista.fi)
[05:05:18] *** Joins: fgudin_ (~fgudin@sdf-eu.org)
[05:05:29] *** Joins: drakonis1 (drakonis@user/drakonis)
[05:05:30] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[05:09:04] *** Quits: rickbutton (sid410078@id-410078.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: chris2 (cky@meredith.poweredbytaylor.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: dTal (quassel@dragonbox/wizzard/dtal) (Ping timeout: 240 seconds)
[05:09:06] *** wallymathieu_ is now known as wallymathieu
[05:09:06] *** Quits: wxallowed (~d4@151.51.155.155) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: kori (kori@user/kori) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: dbohdan3 (~dbohdan@user/dbohdan) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Keele (~keele@91-158-68-128.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: dpk (~dpk@xn--issum-vva.nonceword.org) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: fgudin (fgudin@sdf-eu.org) (Ping timeout: 240 seconds)
[05:09:07] *** rickbutton_ is now known as rickbutton
[05:10:01] *** Joins: epony (~epony@user/epony)
[05:15:05] *** drakonis1 is now known as drakonis
[05:15:46] *** Quits: xsperry (~xs@user/xsperry) ()
[05:15:57] *** Joins: pinoaffe (~pinoaffep@2a01:4f9:c010:3f2a:1:1:3:10)
[05:16:04] *** Joins: xcmw (~textual@2603-6011-2200-f103-41a9-a2d8-3ebe-048b.res6.spectrum.com)
[05:16:38] *** Joins: xsperry (~xs@user/xsperry)
[05:17:02] *** Joins: chris2 (cky@meredith.poweredbytaylor.com)
[05:28:41] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:28:43] *** Joins: klovett (~klovett@166.205.90.163)
[05:40:11] *** Quits: yewscion (~yewscion@c-73-214-119-161.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[06:10:52] *** Joins: frost (~frost@user/frost)
[06:15:55] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[06:15:55] *** Joins: greaser|q (greaser@user/greasemonkey)
[06:16:58] *** greaser|q is now known as GreaseMonkey
[06:21:06] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzzâ€¦)
[06:22:50] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[06:27:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Ping timeout: 240 seconds)
[06:44:57] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 240 seconds)
[06:49:26] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:51:55] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[06:55:57] *** Joins: wxallowed (~d4@151.51.155.155)
[07:08:47] <mdhughes> Wake up to a couple novels of backlog! Small caps were also the house style of Gary Gygax and TSR, Inc. for naming any product. ADVANCED DUNGEONS & DRAGONS, etc.
[07:10:36] <mdhughes> It's a scripting language if you're controlling something else (UNIX file commands, another program, etc.) and there's no explicit build phase. But we don't have a good term for casual languages like Python, BASIC, that are mostly used for standalone programs but also don't have a build phase, so they're called "scripting".
[07:11:32] <mdhughes> The Scheme JSON parsers I've seen mostly do arrays as vectors, dictionaries as hashtables. But there's exceptions, and you can customize most parsers to make other types.
[07:14:11] <mdhughes> The ugly part is round-tripping. Symbols become strings, lists become vectors, do you detect alists and make them into hashtables?
[07:15:38] <mdhughes> My own parser has special cases for "'NAME" decoding to a symbol, and some other heuristics, but it's meant for round-tripping, not parsing random Internet JSON files.
[07:16:49] <aeth> Rewrite Dungeons & Dragons in Scheme.
[07:16:53] <aeth> A lot of people confuse interpreted (which is a blurry line) languages with scripting languages, but many Lisps/Schemes are native compiled, but otherwise behave like what people think of as "interpreted languages" would behave. It's hard to categorize things. Textbooks get this wrong.
[07:16:59] <mdhughes> aeth: Working on that.
[07:17:54] <aeth> My point was meant to be (wasn't too clear) that hash tables are kind of key for how the internet currently thinks about data, at least in the naive treatment of JSON.
[07:18:16] <aeth> And, yeah, JSON is harder to handle the further from JavaScript you get.
[07:18:59] <mdhughes> Hashtables are the best data type ever. Every language with them easily accessible is better than languages where they're hard.
[07:20:01] <mdhughes> Scheme's kind of a pain in the ass, since hashtables are specialized by what kind of hashing system it uses, and there's no explicit syntax.
[07:20:45] <mdhughes> But at least R6RS has them in library, and it's easy enough to write an (hfill! HT ALIST) function
[07:21:36] <aeth> in Common Lisp, with reader macros (kind of like C-style macros), you can write a #h(...) syntax specifically for hash tables, which has been done several times, but nobody uses it because C-style macros are bad
[07:21:45] <aeth> I wouldn't be surprised if a Scheme has similar functionality
[07:21:46] <mdhughes> If R7RS had been made on sane principles, we could have a nice read/write syntax for it by now.
[07:22:07] <mdhughes> Sadly no reader macros in most Schemes. You can do it in CHICKEN.
[07:24:16] <aeth> I guessed it would exist. If something exists in CL, at least one Scheme copied it and at least one Scheme is ideologically opposed to it.
[07:24:29] <aeth> Except for the stuff that obviously comes from Lisp-2 like funcall
[07:24:29] <mdhughes> ^ +1
[07:28:09] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:28:16] *** Quits: xcmw (~textual@2603-6011-2200-f103-41a9-a2d8-3ebe-048b.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:31:22] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[07:37:09] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[07:41:47] <Zipheir> I don't get why everyone is so astounded by hash-tables.  They're very hard to reason about, unless you're at savant at real analysis or something.
[07:42:39] <aeth> iirc, their characteristics are good, on average and in practice, even though in theory the worst case is bad
[07:43:13] <Zipheir> Too bad Riastradh isn't around to explain the black magic involved.  He always had strong arguments against hash-tables.
[07:44:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[07:44:33] <Zipheir> Sure, but the same is true of well-chosen trees, and they tend to have nice, clear definitions.
[07:46:47] <Zipheir> Well, this probably isn't going anywhere.  Use what you prefer, of course.
[07:49:01] <mdhughes> Astounded? No, they're just basically perfect/adequate for all common named storage tasks.
[07:49:04] <Zipheir> But I will say that restricting yourself to immutable data for a while and forgoing the magic O(1) (allegedly) update/access operations will reveal a lot of nuance in the structures available.
[07:49:42] <mdhughes> And it's easier to build a fast, provably correct hashtable than a tree; I've done both, and I'm never sure the tree's correct.
[07:50:16] <mdhughes> My data's rarely immutable. That's not a thing, I have interactive work to do.
[07:50:18] <Zipheir> I find that hard to believe.
[07:50:55] <Zipheir> But, I think we've been down this road before.
[07:50:55] <mdhughes> Try it yourself, and see which is more effort to prove correct.
[07:51:55] <aeth> looks like a schemememe. "No, you can't just mutate things because it's easier that way." "Haha, hash table goes brrrr."
[07:52:06] <aeth> or maybe "no, you can't just assume O(1) when it's not always true"
[07:52:41] <mdhughes> Yeah, this is not ML. Scheme's a dirty, practical language, even if it looks so purist compared to LISP.
[07:52:42] <aeth> because, yes, it does seem wrong to assume that
[07:52:53] <Zipheir> I mean, proving O(log n) access to a balanced binary tree is very easy.  Proving that a given hash function maps an input data set to the available buckets such that lookup/insert is O(1) is a whole other matter.
[07:53:09] <Zipheir> "Scheme is ..."
[07:53:43] <Zipheir> Dick Gabriel called Scheme the canonical "perfect gem" language.
[07:54:41] <Zipheir> It's many things to many people, as it should be.
[07:55:42] <aeth> (I thought Ruby was the gem language)
[07:56:21] <aeth> More seriously, this is probably why there are so many Schemes.
[07:56:32] <Zipheir> But here's the heart of the hash-matter as it seems to a non-real-analysis-savant: hash functions are chosen to be funky!  That makes proving their behavior over a large type of input data very tricky indeed.
[07:56:34] <aeth> Everyone has a very different idea for design.
[07:59:51] <Zipheir> mdhughes: I also don't see why "(im)mutable" = "(im)practical".  There's a lot of subtlety there.
[07:59:58] <aeth> Zipheir: that's a really good argument, but isn't that one in favor of including hash tables into the language because they're so hard to get right?
[07:59:59] <mdhughes> At least no Scheme's ever done the PHP mistake: Hashing strings used their length. Or Java 1.0: Strings only hashed the first 16 chars, and the most common case was reverse DNS names, so everything would hash the same.
[08:00:50] <Zipheir> aeth: Absolutely.
[08:01:14] <aeth> give someone arrays and linked lists and they will TRY hashing
[08:01:16] <aeth> if they don't have one
[08:01:29] <mdhughes> Zipheir: Every time I add a value to an immutable structure, it's either copy-tail, or has to cons up a whole new structure if I've replaced or inserted deeper in.
[08:01:33] <aeth> at least, iirc, you hash for the index and then a collision becomes a linked list
[08:02:06] <Techcable> Most scripting languages have maps/dicts as be a basic data structure 
[08:02:06] <Zipheir> mdhughes: That's an important concern, and that's why most immutable structures avoid unnecessary copying.
[08:02:33] <mdhughes> aeth: I prefer distributing hash collisions along the spine table, but both models are easy to build & test.
[08:03:15] <aeth> oh, right, I vaguely recall something like that from my data structures class
[08:03:21] <Zipheir> aeth: What I'd like to see is not hash-tables being "kicked out of Scheme", but, I guess, better data structures education in CS.  No big deal, right?
[08:03:53] <Zipheir> Techcable: Well, that's yet another definition of a scripting language!
[08:03:56] <aeth> Zipheir: you want CS to be more mathy, but industry wants more CS graduates, for more programmers
[08:04:11] * Techcable likes math and CS
[08:04:20] <Zipheir> aeth: Plug and chug...
[08:04:53] <Techcable> Seems hard to use scheme as a lightweight Lua/Python alternative when it has no hashtables :(
[08:04:54] <mdhughes> I mean, my first year of college CS was mostly reading Sedgewick's Algorithms. Shortly after I went rogue and read SICP.
[08:05:05] <Techcable> wow
[08:05:34] <Zipheir> Techcable: Why's that the problem, specifically?
[08:05:49] <mdhughes> Our official language choices were Pascal and C; FORTRAN was still sort of supported, but discouraged. Schemers were weirdos.
[08:06:03] <Techcable> wow
[08:06:19] <Zipheir> Well, some things haven't changed.
[08:06:34] <Techcable> I guess it just doesn't map well to most people's experiences :(
[08:06:44] <Techcable> Keyword arguments are also nice
[08:07:16] <Techcable> I get there are both probably more idiomatic ways to do both those things, but it's hard to wrap your mind around initially
[08:07:29] <Zipheir> Yes.  Hopefully we get something like Racket's named parameter syntax in the future.
[08:07:49] <mdhughes> I kinda liked CHICKEN's support of DSSSSSSSSL whatever keywords, but it's easier to just use case-lambda for a few optional args, and make more helper functions, or use an alist or record for complex args.
[08:08:25] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[08:09:23] <Zipheir> I mostly agree, but there are some procedures (esp. I/O or system-related) that naturally take a lot of misc. parameters that you'll rarely want to pass all of.
[08:12:20] <mdhughes> Perfect case for a record, with sane defaults.
[08:14:41] <Zipheir> That's the best solution for now, since the only keywords in Scheme are indistinguishable from symbols.  (Unlike in Racket https://docs.racket-lang.org/guide/keywords.html)
[08:17:05] <Zipheir> (Maybe it's the best solution, period.)
[08:39:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[08:46:26] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[08:48:54] *** Joins: klovett (~klovett@166.205.90.163)
[09:06:42] *** Quits: m455 (~m455@cpe64777db41ea3-cm64777db41ea0.cpe.net.fido.ca) (Quit: WeeChat 3.0)
[09:08:59] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[09:27:31] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:32:14] *** Quits: klovett (~klovett@166.205.90.163) (Quit: ZZZzzzâ€¦)
[09:50:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:04:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[10:18:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:28:53] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[10:43:36] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[11:06:41] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05)
[11:08:37] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05) (Ping timeout: 240 seconds)
[11:09:27] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05)
[11:11:17] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:3863:cfe8:507d:8d05) (Ping timeout: 240 seconds)
[11:26:25] *** [dpk] is now known as dpk
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:21] *** Joins: epony (epony@user/epony)
[11:38:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:54:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[11:56:07] *** Joins: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de)
[11:59:21] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:16:33] *** Joins: notzmv (~zmv@user/notzmv)
[12:31:45] *** Joins: ouestbillie (~gallup@80.194.85.249)
[12:31:45] *** Quits: ouestbillie (~gallup@80.194.85.249) (Client Quit)
[12:33:24] *** Joins: ouestbillie (~gallup@80.194.85.249)
[12:37:15] <sham1> #:foo looks better IMO than foo: ever did
[12:59:27] <amazigh> hello all :)
[13:00:09] <sham1> Hello
[13:40:38] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[13:55:23] *** Joins: gproto23_ (~gproto23@user/gproto23)
[14:02:25] *** Joins: gproto_23 (~gproto23@user/gproto23)
[14:05:22] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[14:08:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:09:32] *** Quits: ouestbillie (~gallup@80.194.85.249) (Ping timeout: 240 seconds)
[14:16:30] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:16:31] *** Joins: Darkcoal (~user@2001:16a2:77a8:a200:73b2:bc90:456d:ae8a)
[14:19:05] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:21:25] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:22:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:27:08] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:36:13] *** Quits: Darkcoal (~user@2001:16a2:77a8:a200:73b2:bc90:456d:ae8a) (Ping timeout: 240 seconds)
[14:36:35] *** Joins: Darkcoal (~user@139.64.2.214)
[14:40:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[15:33:46] *** dTal_ is now known as dTal
[15:53:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:08:19] <sham1> Oh drat, I missed the juicy discussion about hash tables by a couple of hours. Sad
[16:15:26] <s-liao> The history log is there.
[16:16:12] <sham1> Yes it is
[16:16:16] <s-liao> What wereÂ  they talking about hash tables?
[16:19:59] <sham1> From lists to alists to hash tables to JSON and mutability and such
[16:23:00] <s-liao> Today? I have not seen it in the log history.
[16:25:27] <sham1> Well, today at like 2 and 5 in the morning in my timezone
[16:25:59] <s-liao> Okay
[16:27:31] <sham1> So about 12 to 13 hours ago
[16:29:32] <s-liao> What is the default timezone of the history?
[16:31:01] <sham1> Doesn't look like UTC, at least
[16:31:58] <s-liao> Like '2022-01-14 14:15:36 <dpk>'
[16:33:47] <s-liao> Firstly, as we are checking the time of the history, is it the same time string?
[16:35:51] <s-liao> one full line "2022-01-15 07:46:16 <s-liao> What were they talking about hash tables?"
[16:36:10] <sham1> No reason not to be
[16:36:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc)
[16:36:13] <sham1> So it is
[16:36:37] <s-liao> yes
[16:40:51] <s-liao> I already found out it.
[16:41:06] <s-liao> Like 2022-01-14 15:28:47 <aeth>
[16:45:50] <s-liao> You can comment on whatever they talked before. I guest they will answer your question.
[16:53:19] <edgar-rft> the time zone of the history is historical time of course
[16:57:38] <s-liao> Yeah.
[16:57:47] *** Joins: livoreno (~livoreno@user/notzmv)
[17:00:12] <s-liao> I found out that some characters can not be decoded correctly in the history log in my Window Browser.
[17:05:11] <sham1> It's historical time but not in UTC. Tsk tsk
[17:08:00] <s-liao> What is "historical time"?
[17:08:04] <edgar-rft> s-liao: I think it's because the log is a plain-text file encoded in UTF-8 while the web still defaults to ISO-8859-1, HTML5 "suggests" using UTF-8 but many browsers still fall back to ISO-8859-1 if there is no encoding explicitely specified in the HTML header, and a plain-text file has *no* HTML header :-)
[17:08:43] <edgar-rft> historical time obviously is a time before UTC
[17:11:49] <s-liao> edgar-rft Okay. I am downloading the log file to check it out.
[17:13:51] <edgar-rft> Emacs says it's an UTF-8 text file...
[17:16:47] <s-liao> Okay
[17:18:19] <edgar-rft> it's nothing wrong with your browser, it's just that the file itself is not preparedd to be viewed in a browser
[17:22:52] <s-liao> Yes.
[17:25:58] <s-liao> Basically view the log file in Emacs or terminal better.
[17:33:29] *** Joins: civodul (~user@guix/contributor/civodul)
[17:43:41] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[17:47:40] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[17:49:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc) (Ping timeout: 240 seconds)
[17:52:51] *** Joins: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc)
[17:55:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:57:11] *** Quits: kori1 (kori@dfg.rocks) (Quit: zzz)
[17:57:24] *** Joins: kori (~kori@dfg.rocks)
[17:57:24] *** Quits: kori (~kori@dfg.rocks) (Changing host)
[17:57:24] *** Joins: kori (~kori@user/kori)
[17:58:36] *** Joins: klovett (~klovett@166.205.90.163)
[18:15:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[18:20:09] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[18:35:00] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[18:35:00] *** Joins: some02 (~cat@user/sudden)
[18:35:12] *** some02 is now known as sudden
[18:45:55] *** Joins: klovett_ (~klovett@166.205.90.163)
[18:46:32] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[18:48:20] *** Quits: klovett (~klovett@166.205.90.163) (Ping timeout: 250 seconds)
[19:00:55] *** Joins: livoreno (~livoreno@user/notzmv)
[19:04:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c0da:ab94:f145:24f4)
[19:04:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c0da:ab94:f145:24f4) (Changing host)
[19:04:01] *** Joins: skapata (~Skapata@user/skapata)
[19:28:32] *** Quits: gproto_23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[19:30:09] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: You have been kicked for being idle)
[19:51:05] <lagash> "Like God intended"
[19:52:13] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[20:10:36] *** Joins: seninha (~seninha@user/seninha)
[20:15:00] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:22:59] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[20:31:28] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:47:59] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[20:54:32] <mdhughes> curl|vim
[21:01:04] *** Joins: elly_ (~elly@142.93.153.223)
[21:01:12] *** Quits: elly (4e5ae1ce73@2604:bf00:561:2000::25e) (Remote host closed the connection)
[21:01:24] *** elly_ is now known as elly
[21:17:02] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:41:14] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:43:08] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:49:11] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[21:57:16] *** Joins: seninha (~seninha@user/seninha)
[22:19:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[22:19:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:26:31] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[22:31:04] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 250 seconds)
[23:10:28] *** Quits: Darkcoal (~user@139.64.2.214) (Quit: Darkcoal)
[23:34:38] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:39:38] <sham1> Obviously for Scheme it'd be `curl | emacs`. Vim doesn't even have paredit, it can't comprehend the logs
[23:39:42] <sham1> /s
[23:41:44] <Zipheir> Imagine the difficulty of actually typing parens...
[23:47:04] <mdhughes> You know vim actually does paren matching, and has syntax highlighting, right?
[23:47:06] <Zipheir> Speaking of vi-likes with paredit, someone did put in the effort to write a paredit in Lua for the vis editor: https://repo.or.cz/lisp-parkour.git
[23:47:28] <Zipheir> Seems to be an entire portable library at this point.  Massively complex, but still.
[23:48:12] <mdhughes> Besides, you can't possibly use emacs for that. It'd take 10 minutes to start up, and doesn't interact with stdio like any real program.
[23:49:25] <Zipheir> No emacs vs. vi wars today, please.
[23:49:32] <lagash> mdhughes: emacsclient..? for the first issue anyways
[23:49:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:54:30] <sham1> vis is nice. Took good ideas from sam. I like
[23:57:17] <Zipheir> It's pretty cool, I agree.  I'm not sure the backend is still based on piece-tables, but that was an excellent idea.
[23:57:39] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (Quit: System reboot)
[23:57:44] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:58:29] <Zipheir> Zipper-based piece-tables still seem to me like the best thing going for immutable text-buffer representation.
[23:59:31] *** Joins: ad-absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net)
