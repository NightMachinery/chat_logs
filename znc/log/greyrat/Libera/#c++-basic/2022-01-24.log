[00:04:00] <bobb_> Alipha interesting, just saw that https://en.cppreference.com/w/cpp/locale/wstring_convert is deprecated since 17
[00:04:09] *** Quits: Cyp (~cyp@213.237.88.120) (Excess Flood)
[00:04:34] *** Joins: Cyp (~cyp@213.237.88.120)
[00:35:15] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) ()
[00:39:12] <jbalint> I have a function with parameter vec<X>& and save the ref in a member field of the same type. I'm not seeing changes made to X's externally. 
[00:41:25] <jbalint> (sorry my kid needs something, brb)
[00:51:48] <jbalint> I obv have a copy of either the vector or the contents because i can see different state in the debugger
[00:52:59] <bobb_> jbalint can you say if the member field has any qualifiers?
[00:53:27] <Alipha> !give jbalint testcase
[00:53:28] <nolyc> jbalint: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[00:53:46] <jbalint> nope it doesnt bobb_. let me copy the code into pastebox
[00:54:20] <bobb_> jbalint use a pastebin that can compile your code
[00:54:21] <Alipha> jbalint: how do you "save the ref in a member field"?
[00:54:29] <jbalint> give me 2 mins for the pastebin
[00:57:52] *** Joins: markong (~kvirc@213.146.188.203)
[00:58:33] <jbalint> https://wandbox.org/permlink/2B0w0id63FeHohIM
[00:58:59] <jbalint> some copying must be happing with set_vec
[00:59:48] <jbalint> should I just be using a raw pointer?
[01:19:20] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:20:44] <bobb_> jbalint you cannot reassign a reference
[01:22:17] <bobb_> a raw pointer would solve your issue
[01:22:48] <bobb_> class members of reference type are rarely a good idea and bring more issues than benefits
[01:22:58] <bobb_> avoid them
[01:24:03] <jbalint> I want a reference to the outer vec in order to avoid having to pass it to all calls to Holder
[01:24:52] <jbalint> but furthermore, I really need to understand where the copying happens here
[01:26:30] <bobb_> what you are doing is int a = 5; int b = 8; int& ref_to_a = a; ref_to_a = b;
[01:26:49] <jbalint> what are a and b here?
[01:26:49] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Quit: Stay safe!)
[01:27:38] <bobb_> its h.set_vec(outside_vec);
[01:27:59] <bobb_> a is the one that comes with the ctor call
[01:28:08] <jbalint> this is not an issue
[01:28:15] <bobb_> and b is the one that you try to set with set_vec
[01:28:31] <jbalint> then why does the print statements output different values?
[01:28:32] <bobb_> and ref_to_a is what you have as a member variable
[01:28:52] <jbalint> that's not the behaviour which is problematic
[01:30:56] <bobb_> you see different values because h refers to another variable then outside_vec
[01:30:57] <bobb_> thats it
[01:31:24] <jbalint> because it's copied?
[01:31:37] <bobb_> because you cannot rebind a reference variable
[01:31:43] <bobb_> there is no copy!
[01:31:52] <jbalint> well both vectors have the same size
[01:32:06] <jbalint> the X MUST be copied somewhere to have a different state
[01:32:17] <bobb_> it does not matter what type the reference variable has
[01:32:45] <jbalint> I mean both vectors have one element in them, because I successfully access [0]
[01:32:55] <bobb_> do you know why you have to initialize the reference member in the initializer list of the constructor?
[01:33:06] <jbalint> because there is no default value
[01:33:09] <bobb_> no
[01:33:22] <jbalint> then I do not know
[01:34:12] <bobb_> because the member variable is of reference type and must be initialized when the object is created
[01:34:29] <bobb_> something like "a reference to nothing" does not exist
[01:34:43] <jbalint> that's what I said - there is no default value
[01:35:26] <bobb_> ok
[01:35:30] <jbalint> there must be a simple explanation for why the state values differ in lines 31 and 32
[01:37:26] <bobb_> can you explain what the set_vec is doing?
[01:38:27] <jbalint> afaiu, the `arg' is a reference (pointer) to the vector. and it's saved in the member variable `the_vec', which is the same type - reference, and thus I should be referring to the outside_vec. and any changes made to outside_vec should be visible through the_vec
[01:39:13] <bobb_> the member variable is of type reference and thus cannot be reassigned
[01:39:37] <jbalint> so what happens on line 18
[01:40:20] <bobb_> line 18 is a closing bracket
[01:40:22] <bobb_> }
[01:41:05] <jbalint> correct. sorry i meant line 17
[01:42:02] <bobb_> the assignment will have no effect
[01:42:43] <jbalint> why would the compiler let me write that?
[01:43:11] <jbalint> additionally, there's evidence to the contrary in that I"m able to access the X's state! (before it was modified)
[01:44:37] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:58:50] <bobb_> jbalint maybe https://wandbox.org/permlink/VyUVL1KRjRNJWVkA makes things clearer
[01:59:49] <jbalint> you need to use a different variable name on line 8
[02:12:46] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[02:27:39] <bobb_> jbalint sorry i was unclear, i re-read everything again: https://wandbox.org/permlink/r0UvqdeDAfwFYMo3
[02:28:14] <bobb_> you're not rebinding the reference, you are reassigning to what x.a refers to
[02:28:22] <bobb_> thats what resetA() is doing
[02:28:28] <bobb_> i was wrong, sorry
[02:29:05] <jbalint> but in your example, you see the updated state. in mine, it's not visible because something is being copied
[02:29:36] <jbalint> it would be as if you changed second's value after line 24
[02:33:45] <bobb_> https://wandbox.org/permlink/YBOxh5yoIzNrvE8W
[02:34:32] <jbalint> line 31 shouldnt include the idnex
[02:35:20] <bobb_> https://wandbox.org/permlink/seWln4EY4HvIcmIj
[02:35:57] <bobb_> the addresses are different for said reasons
[02:37:17] <jbalint> what reason
[02:37:27] <bobb_> when i understood you right you expected the set_vec function to let the_vec member refer to the parameter of set_vec
[02:37:44] <jbalint> yes, it's copied
[02:38:03] <bobb_> its copied to what the_vec refers to
[02:38:33] <jbalint> why is X& assigned from X& copying?
[02:38:39] <jbalint> now we're getting somewhere
[02:43:45] <bobb_> that how references work?
[02:45:17] <bobb_> say we have int a = 5; int& b = a; then b = 17; assigns 17 to what b refers to and thats a
[02:45:34] <jbalint> this is more like int& c = b;
[02:46:24] <Alipha> jbalint: a reference is an alias for the object you initialize it with. looking at your original paste, because of line 27, h.the_vec now refers to empty. then line 28 copies outside_vec into empty (because h.the_vec refers to empty)
[02:47:20] <jbalint> is this invoking operator=?
[02:47:25] <Alipha> jbalint: you want to use pointers instead of references if you want to change where which object the_vec is referring to
[02:47:28] <Alipha> jbalint: yes
[02:48:09] <jbalint> so all X's are copied into "empty"
[02:48:13] <jbalint> hrm, ok
[02:48:23] <jbalint> and empty identity is still assigned to the reference
[02:48:25] <jbalint> thanks Alipha 
[02:48:37] <Alipha> you cannot make h.the_vec refer to any other object other than empty
[02:48:54] <jbalint> is a raw pointer appropriate here?
[02:49:02] <bobb_> Alipha i believe that is the general misunderstanding here
[02:49:23] <Alipha> jbalint: yes. as bobb_ said, it's generally a bad idea to have references as member variables
[02:49:35] <bobb_> that h.the_vec can ever refer to something else
[02:50:45] <Alipha> jbalint: "non-owning" raw pointers are perfectly fine to use in c++. when people say "don't use raw pointers", they're talking about using raw pointers which own what they point to. that is, that you have to do `delete p;` yourself at some point. really, the advice should be that you should never have to use `delete` or `delete[]` in your code. (instead, use smart pointers or containers)
[02:51:49] <jbalint> thanks
[02:52:12] <jbalint> so what's the exact semantics that specifies how assigning to a & reference works
[02:52:34] <Alipha> and references are not a replacement for raw pointers either. as you've found, you can't change where a reference refers to after initialization. additionally, references can't refer to nothing. and so, a pointer can be used as an "optional reference"
[02:55:31] <Alipha> jbalint: a reference is initialized to refer to a specific object. after initialization, any and all use of the reference is identical to as if you did the operation on the object it refers to
[02:56:41] <Alipha> "initialization" being, `int &r = x;` or `int &r(x);` or for a member variable, `myclass() : r(x) {}` or such. doing `r = x;` is assignment, not initialization, and is assigning x to what r refers to
[02:56:47] <jbalint> ok, i think that makes sense and gives some some direction on where to clarify thigns
[02:58:11] <Alipha> jbalint: do you have programming experience in other languages? if so, which?
[03:03:56] <jbalint> yes, plent of languages. C for years, Rust, Java, FP, etc
[03:07:48] <jbalint> https://isocpp.org/wiki/faq/value-vs-ref-semantics#val-vs-ref-semantics
[03:07:52] <jbalint> this describes what i was missing
[03:08:12] <Alipha> jbalint: i thought you might have java experience, as java references are more like c++ pointers than c++ references
[03:08:39] <jbalint> for sure. thanks for pointing that out
[03:19:38] *** Joins: seninha (~seninha@user/seninha)
[03:34:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:34:38] *** Quits: bobb_ (~bobb_@dslb-088-066-131-043.088.066.pools.vodafone-ip.de) (Quit: Client closed)
[03:37:10] *** Joins: AmR (~AmREiSa@156.199.9.4)
[03:59:04] *** Joins: ethrl (~ethereal@user/doforlove33)
[04:02:53] *** Joins: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c)
[04:04:14] *** Quits: ethrl (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[04:07:30] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[04:09:13] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:26:05] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:26:35] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:38:17] *** Quits: xiongxin (~Thunderbi@2409:8954:38c4:44c4:53d0:6eda:c8cd:506c) (Ping timeout: 240 seconds)
[04:54:49] *** Joins: xiongxin (~Thunderbi@120.197.198.189)
[05:04:55] *** Joins: xiongxin1 (~Thunderbi@120.197.198.177)
[05:06:15] *** Quits: xiongxin (~Thunderbi@120.197.198.189) (Ping timeout: 256 seconds)
[05:06:15] *** xiongxin1 is now known as xiongxin
[05:09:34] *** Quits: xiongxin (~Thunderbi@120.197.198.177) (Client Quit)
[05:23:21] *** Quits: jsbach (~jsbach@2a01:c23:6565:4d00:570e:ac61:35a8:83b7) (Ping timeout: 268 seconds)
[05:48:59] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:52:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:55:16] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:03:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:42:17] *** Joins: ferdna (~ferdna@user/ferdna)
[07:20:22] *** Quits: DSpider (~DSpider@82.79.237.89) (Quit: Leaving)
[07:31:53] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:44:12] *** vinleod is now known as vdamewood
[08:12:40] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[10:54:59] *** Joins: jsbach (~jsbach@2a01:c22:a90b:a500:ea94:d29d:c08b:3a52)
[11:08:39] *** Joins: Uswald (~Uswald@2a04:cec0:118a:9088:0:63:1126:be01)
[11:16:05] *** Quits: Uswald (~Uswald@2a04:cec0:118a:9088:0:63:1126:be01) (Ping timeout: 268 seconds)
[11:17:26] *** Joins: Uswald (~Uswald@2a04:cec0:1198:f1ca:0:63:1174:e001)
[11:27:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[11:32:17] *** Quits: Uswald (~Uswald@2a04:cec0:1198:f1ca:0:63:1174:e001) (Ping timeout: 240 seconds)
[11:32:26] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:40:29] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:16:10] *** Joins: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de)
[12:47:08] *** Joins: Uswald (~leandre@37.35.6.200)
[12:52:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[13:30:15] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:34:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:48:19] *** Joins: seninha (~seninha@user/seninha)
[13:54:33] *** Quits: Uswald (~leandre@37.35.6.200) (Quit: WeeChat 2.8)
[13:56:52] *** Joins: Uswald (~user@37.35.6.200)
[14:06:09] *** Quits: Uswald (~user@37.35.6.200) (Read error: Connection reset by peer)
[14:06:56] *** Joins: Uswald (~user@37.35.6.200)
[14:09:57] *** Quits: Uswald (~user@37.35.6.200) (Client Quit)
[14:12:59] *** Joins: Uswald (~leandre@37.35.6.200)
[14:20:45] *** Quits: Uswald (~leandre@37.35.6.200) (Quit: WeeChat 2.8)
[14:21:25] *** Joins: Uswald (~leandre@37.35.6.200)
[15:19:04] *** Joins: osfe_ (~lemaire@91-165-185-216.subs.proxad.net)
[15:19:40] *** Quits: osfe (~lemaire@2a01:e0a:16e:7620::1e2d:4e60) (Ping timeout: 268 seconds)
[15:36:54] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:38:15] *** Joins: DSpider (~DSpider@82.79.237.78)
[15:56:51] *** Quits: Uswald (~leandre@37.35.6.200) (Quit: WeeChat 2.8)
[15:57:17] *** Joins: Uswald (~leandre@37.35.6.200)
[15:58:10] *** Quits: Uswald (~leandre@37.35.6.200) (Client Quit)
[16:07:49] *** Joins: Uswald (~leandre@37.35.6.200)
[16:51:02] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[16:53:49] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[17:07:19] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[18:10:39] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:22:09] *** Quits: nelubit (~nelubit@user/nelubit) (Read error: Connection reset by peer)
[18:22:28] *** Joins: nelubit (~nelubit@user/nelubit)
[18:39:03] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[18:39:58] *** Joins: seninha (~seninha@user/seninha)
[18:44:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:44:59] *** Joins: seninha (~seninha@user/seninha)
[18:49:51] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[18:56:41] *** Joins: sonic (~sonic@user/sonic)
[19:22:37] *** Quits: dld (~davidlowr@2601:197:600:1210:88d:2354:617:54b5) (Ping timeout: 240 seconds)
[19:23:44] *** Joins: dld (~davidlowr@73.61.8.28)
[19:28:43] *** Quits: dld (~davidlowr@73.61.8.28) (Ping timeout: 256 seconds)
[19:30:05] *** Joins: dld (~davidlowr@2601:197:600:1210:5064:96c:65f6:1d79)
[19:37:10] *** Quits: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de) (Quit: Client closed)
[19:37:21] *** Joins: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de)
[20:05:38] *** Quits: Uswald (~leandre@37.35.6.200) (Quit: WeeChat 2.8)
[20:08:34] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[20:13:29] *** Quits: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:18:39] *** Joins: seninha (~seninha@user/seninha)
[20:29:20] *** Joins: magla (~gelignite@55d4d2c6.access.ecotel.net)
[20:49:02] *** Joins: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de)
[21:07:07] *** Joins: klimnbrk (~barakvoid@2.55.178.14)
[21:12:46] *** Quits: klimnbrk (~barakvoid@2.55.178.14) (Ping timeout: 250 seconds)
[21:30:33] *** Quits: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:39:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[23:09:10] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:35:52] *** Joins: seninha (~seninha@user/seninha)
[23:36:57] *** Joins: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de)
[23:37:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
