[00:04:14] <FromDiscord> <ElegantBeef> Yea typically it's just a file that imports all your sub modules
[00:11:56] *** Joins: cyraxjoe (~joe@201.159.96.1)
[00:33:19] *** Joins: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[00:34:36] <fn> <11ForumUpdaterBot99> New Nimble package! resolv - DNS resolution nimble making use of the native glibc resolv library, see https://github.com/mildred/resolv.nim
[00:34:37] <fn> <12R2D299> 4GitHub: 7"DNS resolution library using the glibc system resolver"
[00:36:11] *** Quits: max22- (~maxime@2a01cb0883359800da3f2e05c12ed15e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[00:38:26] *** Joins: max22- (~maxime@2a01cb0883359800da3f2e05c12ed15e.ipv6.abo.wanadoo.fr)
[00:39:09] *** Quits: maxime_ (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[00:56:30] <fn> <11ForumUpdaterBot99> New thread by Niminem: Help for Sending Input Data To REPL, see https://forum.nim-lang.org/t/8184
[01:10:46] <FromDiscord> <deech> What does it mean to have a construction like `type O = ref object of RootObj; OO = object of O` . Note `O` is a `ref object` and `OO` is a plain object that inherits from it.
[01:20:15] *** Joins: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com)
[01:20:15] *** Quits: beshr (~beshr@78-72-246-187-no2006.tbcn.telia.com) (Changing host)
[01:20:15] *** Joins: beshr (~beshr@user/beshr)
[01:31:35] <FromDiscord> <planetis> that OO has the fields of O
[01:32:43] *** Quits: PMunch (~PMunch@178.74.36.198) (Quit: leaving)
[01:34:20] <FromDiscord> <dom96> Nim's async really does mirror Nim's threads a lot: https://forum.nim-lang.org/t/8153#52643
[01:35:09] <FromDiscord> <dom96> I'm tempted to emulate https://nim-lang.org/docs/threads.html#onThreadDestruction%2Cproc%29 too, but have a feeling that wouldn't be the best idea (for the same reasons it's not a good idea for threads either)
[01:37:54] <FromDiscord> <zetashift> In reply to @saem "I've never used nim": sortof: example app game https://github.com/geekrelief/gdnim_hb_arpg
[01:37:56] <fn> <12R2D299> 4GitHub: 7"Conversion of HeartBeat's ARPG tutorial to use gdnim"
[01:38:42] <FromDiscord> <zetashift> but I think geekrelief indeed opened up an issue for your plugin about how one has to tell the plugin where the project files life, and it got added to the readme
[01:49:17] *** Quits: max22- (~maxime@2a01cb0883359800da3f2e05c12ed15e.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:58:40] <FromDiscord> <reilly> sent a code paste, see https://play.nim-lang.org/#ix=3rH6
[01:59:13] <FromDiscord> <reilly> (edit) "https://play.nim-lang.org/#ix=3rH6" => "https://play.nim-lang.org/#ix=3rH7"
[01:59:58] <FromDiscord> <reilly> (edit) "https://play.nim-lang.org/#ix=3rH7" => "https://paste.rs/9Eu"
[02:07:49] <FromDiscord> <dom96> This isn't a Haxe server
[02:08:50] <FromDiscord> <dom96> Why is O3 considered unstable? Got any links?
[02:27:38] <FromDiscord> <saem> @matf\: I'm on matrix and in this channel, so feel free to ping me here, I'll probably get the notification sooner. \:D
[02:29:25] <FromDiscord> <leorize> it's a literature around gentoo users, not sure which flag in particular but many software is known to crash when built with -O3↵(@dom96)
[02:31:04] <FromDiscord> <dom96> @timotheecour reviewed https://github.com/dom96/httpbeast/pull/47, just needs a few changes
[02:31:04] <FromDiscord> <leorize> s/flag/optimization
[02:31:06] <FromDiscord> <leorize> I think it's mostly because O3 enables more optimizations that depends on a lot of undefined behaviors
[02:35:06] <FromDiscord> <matf> @saem thanks.  I've tried a pure record of functions.. I think it's the easiest?
[02:35:56] <FromDiscord> <matf> sent a code paste, see https://play.nim-lang.org/#ix=3rHc
[02:36:17] <FromDiscord> <saem> @matf\: the part I wasn't sure about is do you have multiple terminal instances and they each have custom functions (as in the implementation varies at runtime) or are they all statically known?
[02:37:24] <FromDiscord> <matf> In my case I just have two.  I want to code against TerminalFunctions.  In my actual program, I'd pass in `echoTerminalFunctions` and in my tests I would pass in `recordingTerminalFunctions`.  My actual logic would just know about some instance of `TerminalFunctions`.
[02:38:27] <FromDiscord> <saem> Why not just swap out implementation via a when if you want to test?
[02:38:27] <FromDiscord> <matf> these wouldn't even live in the same file, I'd just define `recordTerminalFunctions` in my test and inject it into what proc I need that expects a `TerminalFunction`.  Otherwise... I have so much code that is `proc: void` and impossible to test.
[02:38:56] <FromDiscord> <matf> Hah. Probably because I didn't even know you could do that 🙂
[02:39:09] <FromDiscord> <matf> (edit) "Hah. Probably because I didn't even know you could do that 🙂 ... " 03added "so I was falling back on old habits: manual dependency injection"
[02:39:24] <FromDiscord> <saem> Well you could make it pretty nifty with a simple template, me thinks
[02:39:37] <FromDiscord> <matf> (edit) "injection" => "injection.  e.g. I have some `proc doStuff(terminal: TerminalFunctions): void`"
[02:42:25] <FromDiscord> <matf> Time to read up on templates.  I was assuming if I only defined `recordingTerminalFunction` under `/tests`, it would not be compiled into my main?
[03:01:09] <FromDiscord> <timotheecour> @dom96 just replied
[03:01:37] <FromDiscord> <Jasmine and Don't Forget!~> May i ask for help here?
[03:03:06] <FromDiscord> <timotheecour> ask for forgiveness, not permission
[03:03:26] <FromDiscord> <Jasmine and Don't Forget!~> Lol, okay
[03:03:43] <FromDiscord> <Jasmine and Don't Forget!~> ||func process_movement(delta):↵    # Setting the direction↵    dir = move_input.x  $Head.global_transform.basis.z↵    dir += move_input.y  $Head.global_transform.basis.x||
[03:03:58] <FromDiscord> <Jasmine and Don't Forget!~> How do i do terminal font?
[03:04:02] <FromDiscord> <Jasmine and Don't Forget!~> ``func process_movement(delta):↵    # Setting the direction↵    dir = move_input.x  $Head.global_transform.basis.z↵    dir += move_input.y  $Head.global_transform.basis.x``
[03:04:04] <FromDiscord> <Jasmine and Don't Forget!~> got it
[03:04:15] <FromDiscord> <Jasmine and Don't Forget!~> okay, this is gdscripts
[03:04:16] <FromDiscord> <Jasmine and Don't Forget!~> (edit) "gdscripts" => "gdscript"
[03:04:24] <FromDiscord> <Jasmine and Don't Forget!~> I have no clue how to do basis in nim
[03:04:42] <FromDiscord> <Jasmine and Don't Forget!~> `` # Process movement↵    dir = head.rotation.z``
[03:04:52] <FromDiscord> <dom96> In reply to @timotheecour "<@!132595483838251008> just replied": I was just thinking raising an exception in httpbeast when reusePort is true and threads are on
[03:04:57] <FromDiscord> <Jasmine and Don't Forget!~> here's what I have, but I have no clue how to get a similar result
[03:05:10] <FromDiscord> <dom96> I don't think we should make reusePort false by default (httpbeast's purpose is speed and it depends on reusePort to be fast)
[03:05:43] <FromDiscord> <Jasmine and Don't Forget!~> I'm trying to copy over a quake character controller from gdscript to nim
[03:05:47] <FromDiscord> <dom96> as for breakage, I think we can just document it, people will hopefully forgive me (they should be using initSettings anyway :))
[03:06:16] <FromDiscord> <dom96> sent a code paste, see https://play.nim-lang.org/#ix=3rHj
[03:06:28] <FromDiscord> <timotheecour> so do you want me to change Option to bool?
[03:06:38] <FromDiscord> <dom96> (edit) "https://play.nim-lang.org/#ix=3rHj" => "https://play.nim-lang.org/#ix=3rHk"
[03:06:46] <FromDiscord> <Jasmine and Don't Forget!~> sent a code paste, see https://play.nim-lang.org/#ix=
[03:07:30] <FromDiscord> <dom96> In reply to @timotheecour "so do you want": yeah, I'm nitpicking but I'd rather not have the codebase bend over backwards to be backwards compatible 🙂
[03:08:41] <FromDiscord> <saem> @matf\: https://play.nim-lang.org/#ix=3rHi
[03:09:26] <FromDiscord> <timotheecour> well i'm all for good design...  ok so i'll change Option to bool and set default reusePort to false, then need to fix tests
[03:10:46] <FromDiscord> <timotheecour> maybe a `-d:httpbeastLegacyReusePort`. could be used later if ppl complain to change the default temporarily
[03:10:57] <FromDiscord> <timotheecour> (edit) "temporarily" => "for a transition period"
[03:11:04] <FromDiscord> <timotheecour> (edit) "maybe a `-d:httpbeastLegacyReusePort`. could be used later if ppl complain to change the default for a transition period ... " 03added "(analog to nimLegacy flags)"
[03:11:28] <FromDiscord> <dom96> well reusePort should still be `true` by default in `initSettings`
[03:13:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:13:40] <FromDiscord> <dom96> or maybe what we should do instead is only have this field take effect when threads are not enabled
[03:13:41] <FromDiscord> <zetashift> In reply to @Jasmine and Don't Forget!~ "``func process_movement(delta):  ": I sadly gotta go to sleep but something like this
[03:14:00] <FromDiscord> <dom96> but then a better name would be warranted
[03:14:59] <FromDiscord> <dom96> `nonthreadedReusePort` or similar (is there an antonym for `parallel` we could use?)
[03:15:11] <FromDiscord> <zetashift> sent a code paste, see https://play.nim-lang.org/#ix=3rHm
[03:15:58] <FromDiscord> <Jasmine and Don't Forget!~> Thank you so much
[03:16:01] <FromDiscord> <zetashift> @Jasmine and Don't Forget!~  what type is Head?
[03:16:04] <FromDiscord> <zetashift> or what type of node
[03:16:06] <FromDiscord> <Jasmine and Don't Forget!~> camera
[03:16:52] <FromDiscord> <matf> @saem and gotta learn macros now 🙂
[03:17:24] <FromDiscord> <saem> @matf\: you can skip all that and type out the when defined manually in the two or three procs you care about.
[03:20:06] <FromDiscord> <timotheecour> @dom96  how about this instead, to get the best of both worlds: for multithread, honor reusePort but only for 1st thread; then sleep X ms and spawn the other threads wiht reusePort disabled
[03:20:18] <FromDiscord> <zetashift> In reply to @Jasmine and Don't Forget!~ "camera": https://pragmagic.github.io/godot-nim/v0.7.8/basis.html here are the basis procs, if you need anything else feel free to ask, but I'll get to answering tomorrow!
[03:20:57] <FromDiscord> <Jasmine and Don't Forget!~> i am... kind of angry I couldn't find it
[03:20:58] <FromDiscord> <Jasmine and Don't Forget!~> ngl
[03:21:08] <FromDiscord> <Jasmine and Don't Forget!~> But that you so much, this should help me be able to do it
[03:21:11] <FromDiscord> <zetashift> there is also https://github.com/geekrelief/gdnim which has some more fancy stuff
[03:21:14] <fn> <12R2D299> 4GitHub: 7"godot-nim based bootstrapping framework supporting hot reloading"
[03:21:40] <FromDiscord> <matf> @saem this is blowing my mind a little.  I need to think about this.
[03:21:58] <FromDiscord> <zetashift> don't forget it generated the .nim files of the Godot API, so if you are like what are the `basis` procs or `camera` procs you can search for those files e.g. `camera.nim` or `basis.nim`
[03:22:42] <FromDiscord> <Jasmine and Don't Forget!~> Oh yeah, i've already generated it
[03:22:57] <FromDiscord> <Jasmine and Don't Forget!~> i expected it to be a thing I could call, not an entire module
[03:23:01] <FromDiscord> <saem> @matf\: yeah, automated copy and paste is kinda bananas. \:D
[03:23:27] <FromDiscord> <saem> Just wait until you zoom past this and then you take a look at CPS (don't just yet).
[03:25:31] <FromDiscord> <matf> @saem so I would just define my own `{.testLayerMacro.}` and use that to test my `proc layer(i: int): void` function I'm assuming?
[03:27:06] <FromDiscord> <dom96> In reply to @timotheecour "<@!132595483838251008>  how about": the other threads will crash though
[03:28:44] <FromDiscord> <saem> @matf\: you can use that to do some effect, whatever really. So for testing you could record call params or some other bits somewhere and then query/inpect all that and decide if it passes or not.
[03:28:46] <FromDiscord> <saem> Basically go hog wild. \:D
[03:28:53] <FromDiscord> <saem> @matf\: you could also use the macro if you wanted to swap some symbols, like if you only call one or two actual effect procs, you could swap them for tests version `echo` -\> `testEcho` for example.
[03:29:14] <FromDiscord> <ElegantBeef> Anything you can write by hand macros can generate
[03:29:19] <FromDiscord> <ElegantBeef> So yea you have unlimited power 😄
[03:29:54] <FromDiscord> <ElegantBeef> Though typed macros are more difficult to traverse
[03:30:57] <fn> <11ForumUpdaterBot99> New question by DuckPuncher: How can I create a lookup table of different procedures in nim?, see https://stackoverflow.com/questions/68217774/how-can-i-create-a-lookup-table-of-different-procedures-in-nim
[03:31:06] <FromDiscord> <dom96> Just remember: with great power comes great responsibility:)
[03:31:32] <FromDiscord> <ElegantBeef> Fuck responsibility, make fancy shit that doesnt help anyone till the cows come home! ;P
[03:31:34] <FromDiscord> <ElegantBeef> (edit) ";P" => "😛"
[03:31:48] <FromDiscord> <timotheecour> right; so how about spawning somthing temporary with reusePort=false, then if succeeds, killing it and spawning the threads with reusePort = true?
[03:32:11] <FromDiscord> <timotheecour> (subject to TOCTOU but should at least catch most bugs)
[03:32:35] <FromDiscord> <ElegantBeef> I can hear varriount foaming at the mouth cause of that comment
[03:34:25] <FromDiscord> <timotheecour> since when is catching no bugs better than catching most bugs? it gives a tiny failure window, instead of current situation where an existing service would intercept calls
[03:34:42] <FromDiscord> <dom96> @timotheecour why though? I don’t see the need for doing this
[03:35:24] <FromDiscord> <ElegantBeef> I was talking about the TOCTOU comment
[03:35:53] <FromDiscord> <timotheecour> if you already have some service A listening to port P (that you may or not be aware of), then start a multithread service listening to same port, i want it to fail if i specify reusePort = false (and that should be the default setting)
[03:36:04] <FromDiscord> <zetashift> In reply to @Jasmine and Don't Forget!~ "i expected it to": Good luck and have fun with discovering all the new stuff 😋
[03:36:05] <FromDiscord> <ElegantBeef> I'm toying with min and anyone know how to do string concatenation there? 😄
[03:40:44] <FromDiscord> <dom96> In reply to @timotheecour "if you already have": Okay. I assume you still want httpbeast to set up its threads if there isn’t another service runnning though, right? Or are you fine with just running it single threaded?
[03:44:09] <FromDiscord> <timotheecour> yes, httpbeast will set up its threads if there isn't a conflicting service running; the only thing i want to change is to fail if reusePort = false (regarless of single thread of multi thread); and for multithread, my suggested implementation is to spawn a short lived service to check if address already in use, when reusePort = false; then httpbeast kills that short lived service and start the threads with reusePort = true
[03:44:52] <FromDiscord> <dom96> I’m asking what your use case is
[03:45:02] <FromDiscord> <dom96> So I can suggest the best implementation
[03:45:16] <FromDiscord> <dom96> You’re just telling me the implementation you want
[03:48:01] <FromDiscord> <timotheecour> use case is to start a server and ensure requests are sent to that server instead of some other prior server that you may be unaware of
[03:51:34] <FromDiscord> <dom96> Okay. So I ask again. Can you live with httpbeast running in single threaded mode?
[03:52:53] <FromDiscord> <timotheecour> why should it be either/or; multithread increases availability
[03:53:39] <FromDiscord> <timotheecour> how about this to move fwd with that PR: i ignore reusePort for threads>1, and then in future work, we can revisit this for threads>1
[03:54:06] <FromDiscord> <timotheecour> (edit) "reusePort" => "`reusePort=false`"
[03:54:37] <FromDiscord> <dom96> Because indeed for threads>1 solving this is a pain
[03:55:39] <FromDiscord> <dom96> But sure. Let’s do that but instead of ignoring it throw an exception when reusePort is false and threads>1
[03:55:59] <FromDiscord> <dom96> I need to head to bed now. Night 🙂
[03:59:31] <FromDiscord> <ElegantBeef> Timothee i dont think your suggested refactor for that case statement is the same logic 😄
[03:59:54] <FromDiscord> <ElegantBeef> Ah nvm i'm dumb
[06:33:41] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:29:28] <FromDiscord> <matf> Weird question: is there a limit to how many fields an object can have (why yes, can you tell I'm a scala developer and I have a weird fixation on the number 22)
[07:35:00] <FromDiscord> <leorize> no
[07:36:17] <FromDiscord> <Bung> there's issue of big object I remenber ?
[07:38:03] <FromDiscord> <leorize> objects that are too big won't fit the stack
[07:38:14] <FromDiscord> <leorize> but you can then just make it a ref object
[07:38:27] <FromDiscord> <leorize> so I'd say that practically there aren't any limit
[07:39:05] <FromDiscord> <Bung> okay
[07:40:51] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Remote host closed the connection)
[07:40:53] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Remote host closed the connection)
[07:40:53] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Read error: Connection reset by peer)
[07:40:54] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Write error: Connection reset by peer)
[07:42:38] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[07:57:30] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[07:57:30] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[07:57:30] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[08:02:23] <FromDiscord> <matf> Cool.  I'm doing a weird... record of functions thing to mimic an interface for easy testing  and I'm up to like 20 fields of procs.   Just curious if I will run into a weird thing.
[08:05:31] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: node-irc says goodbye)
[08:05:39] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: node-irc says goodbye)
[08:05:50] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Quit: node-irc says goodbye)
[08:07:36] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: node-irc says goodbye)
[08:15:45] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:52:21] <FromDiscord> <reilly> Has anyone created a higher-level way of getting data from an audio device, or am I stuck with libsoundio?
[08:53:53] <FromDiscord> <reilly> All I really need to do is check if the level is above a certain threshold on a given frame.
[08:53:59] <FromDiscord> <reilly> (edit) "level" => "volume"
[09:08:30] *** Joins: daniel333 (~daniel333@107-145-111-119.res.spectrum.com)
[09:13:25] *** Quits: cyraxjoe (~joe@201.159.96.1) (Ping timeout: 265 seconds)
[09:24:03] *** Quits: daniel333 (~daniel333@107-145-111-119.res.spectrum.com) (Ping timeout: 256 seconds)
[09:39:06] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 240 seconds)
[09:59:31] <fn> <11ForumUpdaterBot99> New Nimble package! hyperscript - Create HyperText with Nim., see https://github.com/schneiderfelipe/hyperscript
[09:59:32] <fn> <12R2D299> 4GitHub: 7"📎 Create HyperText with Nim."
[11:56:04] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[12:07:32] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[12:07:32] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[12:07:32] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[12:08:11] *** Joins: PMunch (~PMunch@178.74.36.198)
[12:19:23] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Client limit exceeded: 20000)
[12:19:27] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Client limit exceeded: 20000)
[12:19:56] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Quit: Client limit exceeded: 20000)
[12:21:03] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: Client limit exceeded: 20000)
[12:29:05] <FromDiscord> <PressF> sent a code paste, see https://play.nim-lang.org/#ix=3rII
[12:30:37] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[12:31:00] <FromDiscord> <Rika> many people have asked this before
[12:31:01] <FromDiscord> <Rika> no
[12:31:02] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[12:31:02] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[12:31:03] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[12:31:23] <FromDiscord> <Rika> there was a feature that allowed this before but it is now removed i believe
[12:31:57] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:37:26] <FromDiscord> <ElegantBeef> Yep syntax skin has been removed
[12:38:32] <FromDiscord> <ElegantBeef> sent a code paste, see https://play.nim-lang.org/#ix=3rIK
[12:38:53] <PMunch> I see why, and I know why it was a good thing to remove it, but it's a bit sad that we can't appease the bracket-people..
[12:39:21] <FromDiscord> <ElegantBeef> Well we can appease them, get the baseball bats 😛
[12:39:40] <FromDiscord> <Rika> same opinion here pmunch
[12:40:17] <FromDiscord> <Rika> maybe it can be revived (but not officially supported) in the future
[12:40:20] <FromDiscord> <Rika> or something
[12:40:55] <PMunch> I mean I guess it could be done with a pre-processor..
[12:41:07] <FromDiscord> <Rika> yes but >preprocessor
[12:41:25] <FromDiscord> <ElegantBeef> Someone was working on it, but i just dont think it's worth the effort
[12:41:34] <FromDiscord> <Rika> you'd need to reimplement the nim ast parser but with braces support?
[12:41:46] <FromDiscord> <Rika> since a `{}` doesnt simply map to a `:`
[12:42:09] <FromDiscord> <Rika> and you have to figure out how to distinguish braces blocks from braces initialiser syntax
[12:44:58] <FromDiscord> <Rika> theres just a lot of things to work on to make braces syntax work
[12:45:00] <FromDiscord> <Rika> but its doable
[12:45:11] <FromDiscord> <Rika> ~~C++ did it, they have list init. syntax after all~~
[12:45:17] <FromDiscord> <Rika> C/C++ i mean
[12:45:25] <FromDiscord> <ElegantBeef> Just introduce `:{ }` 😛
[12:45:45] <FromDiscord> <Rika> well i dont know
[12:45:48] <FromDiscord> <Rika> okay
[12:45:55] <FromDiscord> <Rika> i think the C++ comment i made doesnt really fit
[12:46:02] <FromDiscord> <Rika> because they dont have block expressions
[12:46:19] <FromDiscord> <Rika> so block expressions might clobber the braces init. syntax nim has
[12:46:54] <FromDiscord> <PressF> In reply to @ElegantBeef "If you hate yourself": We have LISP now 😅
[12:47:32] <FromDiscord> <Rika> what about lisp?
[12:47:40] <FromDiscord> <Ondrejoda> <@&371760044473319454@sershsk8er has been attempting to scam me. Here is the screenshot. https://media.discordapp.net/attachments/371759389889003532/860434030390149120/scam.png
[12:47:42] <FromDiscord> <ElegantBeef> In response to using `()`
[12:48:07] <FromDiscord> <PressF> I'm asking because Nim let's you call things in so many different ways, that maybe one could also use {}
[12:48:20] <FromDiscord> <Rika> In reply to @Ondrejoda "<@&371760044473319454> I would like": yeah lots of those are being reported right now, see #offtopic
[12:48:29] <FromDiscord> <mikip0> @Vasla123 is a scam bot as well, id 860121877338652693 https://media.discordapp.net/attachments/371759389889003532/860434239824723978/unknown.png
[12:48:34] <FromDiscord> <PressF> In reply to @ElegantBeef "In response to using": Yep. I actually like LISP
[12:48:49] <FromDiscord> <Rika> ig
[12:48:56] <FromDiscord> <ElegantBeef> I think enabling `{}` is just.... terrible
[12:49:15] <FromDiscord> <ElegantBeef> But i do think the best way to do it would be using `:{}` or similar
[12:49:19] <FromDiscord> <Rika> In reply to @ElegantBeef "I think enabling `{}`": i will say im not a fan, but it would be nice for those who are fans
[12:49:29] <FromDiscord> <PressF> I also got one of those the other day @Ondrejoda.
[12:49:44] <FromDiscord> <ElegantBeef> Well it fragments the code into two groups especially if it's cross compilable
[12:49:58] <FromDiscord> <Rika> In reply to @ElegantBeef "Well it fragments the": just like camelCase and snake_case users?
[12:50:11] <FromDiscord> <ElegantBeef> Except in Nim's case those are the same
[12:50:25] <FromDiscord> <Rika> and why would it not be the same for braces' case?
[12:50:33] <FromDiscord> <Rika> (edit) "and why would it not be the same ... forbraces?" 03added "in the case" | "braces' case?" => "braces?"
[12:50:44] <FromDiscord> <ElegantBeef> Having yet another convention to maintain when PRing another persons library is just ugh to me
[12:50:56] <FromDiscord> <Rika> just like camel and snake?
[12:51:02] <FromDiscord> <ElegantBeef> another
[12:51:18] <FromDiscord> <Rika> you only have like what, two conventions to take mind of right now
[12:51:24] <FromDiscord> <Rika> mcs and case
[12:51:44] <FromDiscord> <Rika> and its not hard to deny braces (its really easy to spot) in comparison to mcs
[12:51:47] <FromDiscord> <ElegantBeef> Constants, enums
[12:51:51] <FromDiscord> <PressF> In reply to @Rika "you only have like": Mcs are macros?
[12:51:59] <FromDiscord> <ElegantBeef> method call syntax
[12:52:02] <FromDiscord> <Rika> beef hit em with the explanation
[12:52:11] <FromDiscord> <PressF> In reply to @ElegantBeef "method call syntax": Makes Sense
[12:52:19] <FromDiscord> <ElegantBeef> The thing that lets us use procedures like methods in OOP
[12:52:27] <FromDiscord> <Rika> constants? wdym, like casing for constants?
[12:52:31] <FromDiscord> <ElegantBeef> Yep
[12:52:39] <FromDiscord> <Rika> that falls under casing...
[12:52:52] <FromDiscord> <ElegantBeef> I'm partially playing a game here
[12:52:55] <FromDiscord> <ElegantBeef> So blame that
[12:53:07] <FromDiscord> <ElegantBeef> really blame me
[12:53:08] <FromDiscord> <PressF> I actually like having different ways to call methods/procs. It's useful in some cases
[12:53:23] <FromDiscord> <ElegantBeef> Yes it enables great things
[12:53:31] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Quit: Client limit exceeded: 20000)
[12:53:46] <FromDiscord> <PressF> I'm not a big fan of the casing tho
[12:53:52] <FromDiscord> <Rika> why>
[12:53:54] <FromDiscord> <ElegantBeef> I think with the caveat brace syntax does start with `:{}` and it can change it might be fine
[12:54:00] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Quit: Client limit exceeded: 20000)
[12:54:01] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Quit: Client limit exceeded: 20000)
[12:54:13] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[12:54:14] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[12:54:17] <FromDiscord> <ElegantBeef> can change meaning it has an easy way to convert to/from
[12:54:18] <FromDiscord> <Rika> well braces syntax is out of the question for official support
[12:54:29] <FromDiscord> <ElegantBeef> Yes
[12:54:49] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[12:55:22] <FromDiscord> <PressF> In reply to @Rika "why>": Makes it hard to read code sometimes if people use different ways to call the same function in the same codebase
[12:55:23] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Quit: Client limit exceeded: 20000)
[12:55:45] <FromDiscord> <ElegantBeef> how does casing change that?
[12:55:48] <FromDiscord> <ElegantBeef> MCS changes that
[12:55:52] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[12:55:53] <FromDiscord> <PressF> I just haven't wrapped my head around it
[12:55:56] <FromDiscord> <Rika> In reply to @PressF "Makes it hard to": that is not the fault of the flexibility
[12:56:08] <FromDiscord> <Rika> i can say the same if braces+indent was allowed
[12:56:10] <FromDiscord> <Rika> and mcs
[12:56:15] *** ChanServ sets mode: +o PMunch
[12:56:24] *** PMunch sets mode: -o PMunch
[12:56:48] <FromDiscord> <Rika> like if someone be like "echo 91283, avar, etc" on one line then fuckin "myvar.echo()" on the other
[12:56:53] <FromDiscord> <PressF> Ok. As I said I haven't wrapped my head around it. Probably if I write a bit more code I can like it
[12:57:11] <FromDiscord> <PressF> In reply to @Rika "like if someone be": I guess I haven't saw that yet haha
[12:57:25] <FromDiscord> <ElegantBeef> The issue isnt flexibillity it's how people use it
[12:57:26] <FromDiscord> <Rika> hahahahahhahahahahahahahahahahahahahahahahahahhahaa
[12:57:47] <FromDiscord> <ElegantBeef> Nim's case insensitivity is lovely
[12:58:04] <FromDiscord> <ElegantBeef> Like i dont see why people thing "If i write a symbol like X it has to be used like X"
[12:58:26] <FromDiscord> <ElegantBeef> I've been toying with opengl and i absolutely hate all cap constants and guess what uses them 😛
[12:58:36] <FromDiscord> <Rika> well the issue is that people think everyone else has no discipline
[12:59:00] <FromDiscord> <ElegantBeef> In any other language i'd have to make aliases for all of them to sane names
[12:59:21] <FromDiscord> <Rika> ~~if you even can~~
[12:59:37] <FromDiscord> <ElegantBeef> The people that dont have discipline are the same people that you dont want to use their code anyway
[12:59:50] <FromDiscord> <ElegantBeef> shit did i say that outloud
[12:59:57] <FromDiscord> <Rika> w
[13:00:55] <FromDiscord> <ElegantBeef> Slight joke, but it's the same thing with any language and features that can be misued
[13:01:16] <FromDiscord> <Rika> well yeah
[13:01:17] <FromDiscord> <ElegantBeef> C# properties for instance often get full of expensive operations
[13:01:25] <FromDiscord> <Rika> ~~rust unsafe wwwwwwwwwwww~~
[13:01:34] <FromDiscord> <Rika> megamemes
[13:01:36] <FromDiscord> <ElegantBeef> You mean the only way to implement linked lists 😛
[13:02:01] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Read error: Connection reset by peer)
[13:02:04] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Read error: Connection reset by peer)
[13:02:14] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Read error: Connection reset by peer)
[13:02:21] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Read error: Connection reset by peer)
[13:02:23] <FromDiscord> <Rika> i respect rust though
[13:02:33] <FromDiscord> <Rika> what i dont respect are the evangelists xd
[13:02:50] <FromDiscord> <ElegantBeef> You dont like the holier than thou attitudes?
[13:03:51] <FromDiscord> <ElegantBeef> @PressF i do have to ask what are your biggest reason(s) for wanting `{}`
[13:03:55] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[13:04:26] <FromDiscord> <PressF> In reply to @ElegantBeef "<@!391274926541373441> i do have": Not a major one, I just think it looks better
[13:04:27] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[13:04:27] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[13:04:27] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[13:04:40] <FromDiscord> <ElegantBeef> How does it look better? 😄
[13:04:49] <FromDiscord> <PressF> It's easiest to see where code blocks start and end
[13:04:52] <FromDiscord> <Rika> beef do you know what "opinions" are
[13:05:02] <FromDiscord> <Rika> let em be
[13:05:14] <FromDiscord> <ElegantBeef> Oh i do but i was confused in this regard of what "looked better"
[13:05:20] <FromDiscord> <ElegantBeef> Cause overall it's the same indented code 😄
[13:05:42] <FromDiscord> <Rika> people think (and therefore read code)↵ differently
[13:05:44] <FromDiscord> <Rika> (edit) "code)↵" => "code)"
[13:05:51] <FromDiscord> <Rika> no there was no line break there
[13:05:55] <FromDiscord> <Rika> you saw no line break
[13:06:05] <FromDiscord> <TheBiggestNubThun> sent a long message, see http://ix.io/3rIN
[13:06:05] <FromDiscord> <ElegantBeef> Well i mean it's not code looking better, it's just they can more easily see the deliminations
[13:06:36] <FromDiscord> <Rika> and that can mean it looks better to them
[13:06:59] <FromDiscord> <Rika> In reply to @TheBiggestNubThun "Hi all! I've been": nothing looks wrong but this is not async, this is still synchronous
[13:07:38] <FromDiscord> <TheBiggestNubThun> I know it is synchronous, it is just to simplify the code
[13:08:06] <FromDiscord> <TheBiggestNubThun> The fact is that the memory keeps going up and up. One of the reasons I'm trying Nim is to keep memory low
[13:08:39] <FromDiscord> <Rika> how are you measuring memory?
[13:08:56] <FromDiscord> <Rika> massif? /usr/bin/time? looking at htop?
[13:10:24] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Read error: Connection reset by peer)
[13:10:25] *** Quits: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) (Remote host closed the connection)
[13:10:25] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Remote host closed the connection)
[13:10:32] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Remote host closed the connection)
[13:10:55] <FromDiscord> <TheBiggestNubThun> I'm running it inside a docker container, and looking at docker stats
[13:11:35] <FromDiscord> <TheBiggestNubThun> which would be similar to htop I guess
[13:13:30] <FromDiscord> <Rika> what nim version
[13:14:12] <FromDiscord> <TheBiggestNubThun> 1.4.6
[13:15:27] <FromDiscord> <Rika> i dont seem to see the same behavior, how long did you run it for
[13:16:01] <FromDiscord> <TheBiggestNubThun> You can use a bigger website, like google.com, and you'll see it rising faster
[13:16:20] <FromDiscord> <TheBiggestNubThun> 2 mins is enough to see it rising
[13:16:23] <FromDiscord> <Rika> ok
[13:18:02] <FromDiscord> <TheBiggestNubThun> I'll try Nim 1.4.8 and report back
[13:18:37] <FromDiscord> <ElegantBeef> It grows a bit initially then holds steady
[13:19:20] <FromDiscord> <ElegantBeef> Yea using the google example it holds steady at 5.1MB
[13:19:54] <FromDiscord> <TheBiggestNubThun> I'm using Alpine linux, maybe it is something especial of that OS
[13:19:59] *** Joins: max22- (~maxime@2a01cb0883359800129c1cfcf0c39d90.ipv6.abo.wanadoo.fr)
[13:20:07] <FromDiscord> <Rika> what compile flags are you using
[13:20:21] <FromDiscord> <TheBiggestNubThun> -d:release -d:ssl
[13:20:53] <FromDiscord> <Rika> i am seeing not much heap increase (-d:danger -d:ssl -d:useMalloc) https://media.discordapp.net/attachments/371759389889003532/860442390648324106/unknown.png
[13:21:41] <FromDiscord> <ElegantBeef> Were you by anychance using arc?
[13:21:42] <FromDiscord> <Rika> actually danger might be fucking with massif, ill use debug
[13:21:45] <FromDiscord> <Rika> no
[13:21:50] <FromDiscord> <ElegantBeef> Not you, them
[13:21:51] <FromDiscord> <Rika> all the flags were as i listed
[13:21:58] <FromDiscord> <Rika> smh ok 😦
[13:22:03] <FromDiscord> <Rika> 😛
[13:22:13] <FromDiscord> <ElegantBeef> Cause with arc i'm up to 20MB 😄
[13:23:00] <FromDiscord> <TheBiggestNubThun> hmm, so what are the standard flags to use for the compiler?
[13:23:04] <FromDiscord> <ElegantBeef> Orc holds steady at 1.7MB
[13:23:25] <FromDiscord> <Rika> async is cyclic so arc going up is normal
[13:23:27] <FromDiscord> <TheBiggestNubThun> I know Nim can use several Gcs
[13:23:35] <FromDiscord> <TheBiggestNubThun> (edit) "Gcs" => "GCs"
[13:23:40] <FromDiscord> <ElegantBeef> A program build default is `--gc:refc` and `-d:debug`
[13:23:47] <FromDiscord> <ElegantBeef> Yea i figured as much
[13:24:09] <FromDiscord> <ElegantBeef> The only thing i can figure is as they said alpine is off or they accidently build with arc
[13:24:29] <FromDiscord> <ElegantBeef> Cause yea with refc held solid at 5.1 and orc holding solid at 1.7
[13:24:49] <FromDiscord> <Rika> bet its alpine 😛
[13:26:01] <FromDiscord> <TheBiggestNubThun> Oh, something I forgot to mention is that I use nimble to build
[13:26:10] <FromDiscord> <TheBiggestNubThun> So nimble -d:release -d:ssl
[13:26:12] <FromDiscord> <ElegantBeef> Doesnt change anything
[13:26:17] <FromDiscord> <TheBiggestNubThun> (edit) "So nimble ... -d:release" 03added "build"
[13:26:25] <FromDiscord> <Rika> should be pm. the same with nimble
[13:26:44] <FromDiscord> <ElegantBeef> If you arent changing the gc in a config or manually then it's not Nim causing the issue 😄
[13:27:03] <FromDiscord> <Rika> or maybe it is and you found a new bug
[13:27:05] <FromDiscord> <TheBiggestNubThun> it could be alpine.. I'll try 1.4.8 and then a non-alpine
[13:27:14] <FromDiscord> <ElegantBeef> True it could be a nim bug
[13:27:15] <FromDiscord> <Zachary Carter> In reply to @Ondrejoda "<@&371760044473319454> I would like": they're banned
[13:27:28] <FromDiscord> <ElegantBeef> But there are already 1900 issues do we need another one 😛 (Yes we do)
[13:36:38] *** Joins: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8)
[13:40:02] <FromDiscord> <TheBiggestNubThun> With 1.4.8 it looks more stable. It goes up and then stays more or less in the same value
[13:40:05] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[13:40:05] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[13:40:05] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[13:40:20] <FromDiscord> <TheBiggestNubThun> Thank you guys, sorry for the noobie question
[13:41:35] <FromDiscord> <ElegantBeef> It's fine, questions are better than running from nim cause it "didnt" fit your needs
[13:42:41] <FromDiscord> <TheBiggestNubThun> It's still a shame that the tls implementation is not pluggable yet, I'm eagerly waiting for either a pluggable implementation or another lower memory library like bearssl/mbedtls/wolfssl
[13:44:05] <FromDiscord> <ElegantBeef> Well there are bearssl bindings if that interests you 😄
[13:44:14] <FromDiscord> <Ondrejoda> In reply to @Zachary Carter "they're banned": thanks
[13:44:32] <FromDiscord> <TheBiggestNubThun> I'm too noob to use the raw library 😋
[13:45:41] <FromDiscord> <TheBiggestNubThun> I'm a C#/Java/Python kind of guy, I'm interested in C, but life is too short
[14:02:48] <FromDiscord> <arnetheduck> In reply to @TheBiggestNubThun "It's still a shame": there's a https client in `chronos` that uses `bearssl` out of the box,  you can use it like so: https://forum.nim-lang.org/t/7964#52137
[14:03:29] <FromDiscord> <arnetheduck> `chronos` also fixes some memory usage issues found in `asyncdispatch` but certainly not all
[14:04:31] <FromDiscord> <TheBiggestNubThun> 😮  Thank you for that, I will try it out!
[14:22:20] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[15:07:18] *** Quits: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br) (Remote host closed the connection)
[15:07:36] *** Joins: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br)
[15:42:59] <FromDiscord> <SpiderDave> do something about the spambots here, bye
[15:43:31] <FromDiscord> <Vindaar> ❤️ people like that
[15:50:40] <FromDiscord> <dom96> In reply to @arnetheduck "`chronos` also fixes some": fwiw I haven't had memory issues with asyncdispatch for a while
[16:01:39] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:17:35] <PMunch> Is there an RFC for allowing an `else` block to be passed to a macro?
[16:24:47] <PMunch> I have a whenThreaded template that accepts one or two blocks. If passed two blocks it is a simple expansion to `when compileOption("threads"): block1 else: block2`. But I don't like how this looks in the code with the second `do: <whatever>` block for the else bit..
[16:25:43] *** Quits: max22- (~maxime@2a01cb0883359800129c1cfcf0c39d90.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[16:35:23] <FromDiscord> <kaushalmodi> @PMunch I updated the parsetoml CI yesterday. While switching from Travis to GHA, I realized that the Go toml-test was also now updated to support TOML 1.0.0 tests. The only setup change before you run `nimble run_toml_tests` is that you need to update to the latest go version.
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:32] <FromDiscord> <kaushalmodi> It will then run the latest TOML 1.0.0 test suite; 49 tests are failing at the moment. I made the CI pass as before by calling an alternative nimble task that skips those 49 tests.
[16:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:32] <PMunch> Hmm, 49 tests failing isn't great
[16:37:42] <PMunch> Oh right, it doesn't support 1.0.0 yet..
[16:37:52] <FromDiscord> <kaushalmodi> Yep
[16:38:03] <PMunch> But that's great! Makes it much easier to update while making sure we don't break anything
[16:38:36] <FromDiscord> <kaushalmodi> Many tests are from same categories line inline tables, control char invalid checks, etc
[16:39:55] <FromDiscord> <madman> sent a code paste, see https://play.nim-lang.org/#ix=3rJL
[16:40:12] <PMunch> @madman, yup
[16:40:30] <PMunch> Can't have recursion without references, because it would be infinite
[16:40:35] <FromDiscord> <madman> should i seperate into two types?
[16:40:39] <FromDiscord> <kaushalmodi> sent a code paste, see https://play.nim-lang.org/#ix=3rJM
[16:41:05] <FromDiscord> <konsumlamm> no need to
[16:41:12] <FromDiscord> <madman> In reply to @kaushalmodi "You can make that": cool! why does it work though
[16:41:19] <FromDiscord> <Rika> if you want stack root nodes but ref other nodes yeah]
[16:41:29] <PMunch> Because now it is a reference object
[16:41:33] <FromDiscord> <Rika> because refs make the size constant (pointer size)
[16:41:38] <FromDiscord> <madman> aha
[16:41:44] <FromDiscord> <Rika> instead of infinite
[16:41:54] <FromDiscord> <kaushalmodi> In reply to @x19 "cool! why does it": Because then all objects chain by just ref (like pointer) to other object ref.
[16:42:02] <FromDiscord> <Rika> to make a type you need the size of every other field
[16:42:13] <FromDiscord> <Rika> what's the size of a box when it has itself in it? we dont know
[16:42:24] <PMunch> If you want your first node to not be a ref object you can have one Node type and one NodeRef type
[16:42:58] <FromDiscord> <madman> okay
[16:44:27] <FromDiscord> <madman> sent a code paste, see https://play.nim-lang.org/#ix=3rJN
[16:44:47] <FromDiscord> <Rika> that means you read a `nil` reference
[16:45:01] <FromDiscord> <Rika> you need to check for whether the child is `nil` now
[16:45:12] <FromDiscord> <Rika> oh, rather parent i think
[16:45:14] <FromDiscord> <madman> ok i see
[16:45:24] <FromDiscord> <madman> so now it's on the heap
[16:45:27] <FromDiscord> <Rika> something there is nil and i dont know which exactly
[16:45:28] <FromDiscord> <Rika> yesh
[16:45:31] <FromDiscord> <Rika> yes
[16:45:41] <PMunch> Or make sure your code can't end up in a nil scenario
[16:45:50] <FromDiscord> <Rika> or that too yes
[16:46:04] <FromDiscord> <madman> okay ill have a closer look
[16:46:10] <FromDiscord> <madman> i wanted to stay on the stack :P
[16:46:22] <PMunch> No you don't..
[16:46:23] <PMunch> Trust me
[16:46:28] <FromDiscord> <madman> hahaha
[16:46:29] <FromDiscord> <madman> ok
[16:46:44] <PMunch> You don't want to store a large tree structure on the stack and copy that thing around
[16:46:48] <FromDiscord> <madman> thanks guys :nimRawr:
[16:47:32] <FromDiscord> <madman> hmm yeah i quite a few nodes now and the tree must be getting quite fat
[16:47:39] <PMunch> I keep thinking I should write a basics of Nim tutorial that explains all of this stuff, but then I realise that is basically a university level introductory class to computer science, just with Nim :P
[16:48:02] <FromDiscord> <madman> lol
[16:48:12] <FromDiscord> <madman> there is one by Goran
[16:48:20] <FromDiscord> <madman> idk if that's the name
[16:48:42] <FromDiscord> <Clonkk> In reply to @PMunch "I keep thinking I": So like http://ssalewski.de/nimprogramming.html ?
[16:48:45] *** Joins: arkurious (~arkurious@user/arkurious)
[16:48:57] <FromDiscord> <madman> ah yes that's it
[16:49:12] <PMunch> Yeah I guess :P
[16:49:13] <FromDiscord> <Clonkk> It's a good book
[16:49:29] <PMunch> Haven't read it though..
[16:50:07] <FromDiscord> <madman> i usually work on the stack ok manually `alloc0`, didnt play much with `ref` like ever
[16:50:42] <FromDiscord> <Rika> wow thats hardcore, but alloc0 is still on heap
[16:50:49] <FromDiscord> <madman> yep
[16:50:57] <PMunch> Nim automatically puts stuff on the heap for you though
[16:51:08] <FromDiscord> <madman> yeah with ref
[16:51:11] <PMunch> I see you have a seq in there for example, that's on the heap
[16:51:13] <FromDiscord> <Rika> not even just with ref
[16:51:22] <PMunch> Ever used a string? Probably on the heap
[16:51:29] <FromDiscord> <Rika> totally on the heap
[16:51:29] <FromDiscord> <madman> yes nim does a lot of hidden allocations
[16:51:45] <FromDiscord> <Rika> unless you're fucking around with embedded then its prolly not heap
[16:51:52] <PMunch> Well, it does quite few allocations as it keeps a memory pool, but yeah
[16:52:55] <FromDiscord> <madman> i usually do `var item = cast[ptr item](alloc0(sizeof(item)3))`
[16:53:00] <FromDiscord> <Rika> well ig dont worry too much about performance until you actually are starting to have performance issues
[16:53:07] <PMunch> @madman, why?
[16:53:15] <FromDiscord> <Clonkk> You know the golden rule of programming
[16:53:15] <FromDiscord> <Rika> oh take a look at the `create` proc
[16:53:23] <FromDiscord> <Clonkk> First make it work, then make it pretty, then make it fast
[16:53:43] <FromDiscord> <Rika> i usually try to make it pretty while making it work at the same time
[16:53:46] <FromDiscord> <madman> gotta go fast :sanic:
[16:53:56] <FromDiscord> <Rika> otherwise bugs could be hidden in the code
[16:54:13] <FromDiscord> <madman> honestly this is not even some real-time thing, i dont care about perf at all
[16:54:24] <FromDiscord> <Rika> then why bother
[16:54:28] <FromDiscord> <Clonkk> Real time is about determinism not performance though :p
[16:54:30] <FromDiscord> <Rika> you're wasting your time lol
[16:54:46] <FromDiscord> <madman> yes exactly thats why imma attempt to use ref
[16:55:14] <FromDiscord> <madman> In reply to @SneakyBaguette "Real time is about": i was talking in the context of real-time 3d rendering for example
[16:55:49] <FromDiscord> <madman> are we talking about the same real-time
[16:55:59] <FromDiscord> <Clonkk> Haha sorry I was being pedantic for no reason
[16:56:13] <FromDiscord> <madman> haha i like pedantic
[16:56:37] <FromDiscord> <Rika> -pedantic-errors
[16:57:01] <PMunch> TBH if you tried to put a tree structure on the stack I'm going to guess your hand written reference free code is going to be slower than code written with references and using the GC..
[16:57:02] <FromDiscord> <Clonkk> Basically you have "real-time" in the "it should be fast enough that humans don't see lags" and "real-time" in the critical systems context of "a tasks must not miss a deadline of things will catch fire and people might die"
[16:57:24] <FromDiscord> <Rika> exceptthataudioistechnicallyrealtimejustnothardrealtime
[16:57:29] <PMunch> Not trying to be mean, but performance tuning is a fickle beast, and getting it right isn't as trivial as "keep everything on the stack"
[16:57:53] <FromDiscord> <madman> In reply to @SneakyBaguette "Basically you have "real-time"": ah yes, hard real-time vs soft real-time ( i guess)
[16:57:55] <FromDiscord> <Rika> then you see people trying to do "branch free programming" in python
[16:57:59] <FromDiscord> <madman> In reply to @PMunch "TBH if you tried": oh i bet it will
[16:58:12] <PMunch> @Rika, haha exactly
[16:58:30] <FromDiscord> <Clonkk> In reply to @x19 "ah yes, hard real-time": Yeah basically
[16:59:10] <FromDiscord> <madman> nim is suited for both right?
[16:59:50] <FromDiscord> <Clonkk> Nim can be deteministic with --gc:arc or no gc
[17:00:03] <FromDiscord> <Rika> it is recommended to use arc
[17:00:30] <FromDiscord> <Rika> you are limited to a subset of the language if you use no gc
[17:00:38] <FromDiscord> <Rika> (well, "limited")
[17:00:41] <FromDiscord> <madman> ah makes sense now, deterministic as in this task must do this and finish at this time every time or everyone dies
[17:01:04] <FromDiscord> <Clonkk> That's hard real-time
[17:01:28] <FromDiscord> <Rika> the gc matters for deterministic because if i run this proc i want to make sure it runs in this amount of time always
[17:01:28] <FromDiscord> <Clonkk> Soft real-time is "the mean of your executions time must be within this range"
[17:01:34] <FromDiscord> <Rika> a gc would add possible "lag:
[17:01:43] <FromDiscord> <Rika> like when it collects or moves stuff up a generation
[17:02:05] <FromDiscord> <Clonkk> Like stop-the-world gc used to be (not sure if they are used anymore) in Java
[17:02:06] <FromDiscord> <Rika> well, a traditional gc at least would do that
[17:02:18] <FromDiscord> <Rika> arc is more akin to rust's garbage collection scheme
[17:02:29] <FromDiscord> <Rika> not just stop the world gcs, pretty much any gc
[17:02:35] <FromDiscord> <madman> yeah the move semantics thanks to smart compiler injections
[17:03:07] <FromDiscord> <konsumlamm> ~~Rust doesn't have a garbage collection scheme~~
[17:03:08] <FromDiscord> <Rika> most gcs work by halting the current code and doing things, its just that modern gcs only stop for a fraction of the time STW gcs do
[17:03:40] <FromDiscord> <madman> In reply to @konsumlamm "~~Rust doesn't have a": true, and in that case arc is not a GC ? 🤷‍♂️
[17:03:40] <FromDiscord> <Rika> i thought we stopped being pedantic?
[17:03:55] <FromDiscord> <Clonkk> In reply to @x19 "true, and in that": Depends how you define gc
[17:03:58] <FromDiscord> <madman> i dont really understand GCs details much, spent time learning manual memory
[17:04:07] <FromDiscord> <konsumlamm> also, arc may leak memory if you have ref cycles, so i'd use orc (which includes a cycle collector) instead
[17:04:17] <FromDiscord> <Rika> thats if you do not need determinism
[17:04:21] <FromDiscord> <madman> but orc is less deterministic
[17:04:21] <FromDiscord> <konsumlamm> In reply to @x19 "true, and in that": those two things don't have anything to do with each other
[17:04:29] <FromDiscord> <Rika> we were discussing a theoretical deterministic application
[17:05:01] <FromDiscord> <madman> In reply to @konsumlamm "those two things don't": well the reason i said that is i was talking to a rust zealot and they mentioned that ARC ( auto ref count ) is a form of garbage collection
[17:05:20] <PMunch> It would be cool if we could run a program with ORC and have it output if it ever collected a cycle
[17:05:33] <FromDiscord> <Rika> In reply to @konsumlamm "~~Rust doesn't have a": when i say garbage coll. scheme, i dont mean a garbage collector, i just mean how a language deals with garbage/to-be-unused memory
[17:05:41] <FromDiscord> <Clonkk> GC is your friend inviting you for a beer after work while you're supposed to meet your wife for dinner at a nice restaurant. While most of the time you'll be able to do both, missing the deadline will result in catastrophical failure
[17:05:46] <PMunch> Can you run ORC and then disable the automatic collection and trigger it manually like with the normal GC?
[17:05:53] <FromDiscord> <Rika> ARC doesnt mean auto ref count
[17:06:10] <FromDiscord> <madman> In reply to @Rika "ARC doesnt mean auto": my whole life is a lie
[17:06:19] <FromDiscord> <Rika> ARC in nim doesnt mean auto ref count
[17:06:21] <FromDiscord> <Clonkk> (edit) "GC" => "~~GC" | "failure" => "failure~~"
[17:06:22] <FromDiscord> <konsumlamm> `Arc`/`Rc` isn't "Rust's garbage collection scheme" though, it's just a library defined smart pointer that does reference counting (so a limited form of GC)
[17:06:37] <FromDiscord> <haxscramper> In reply to @PMunch "It would be cool": someone was asking about this feature
[17:06:40] <FromDiscord> <Rika> i didnt mention rust's Arc
[17:06:47] <FromDiscord> <konsumlamm> but madman did
[17:06:48] <FromDiscord> <haxscramper> and I think they've implemented in in some form
[17:06:51] <FromDiscord> <Rika> ah i see
[17:06:52] <FromDiscord> <Rika> okay
[17:06:54] <FromDiscord> <Rika> understood
[17:06:56] <FromDiscord> <Rika> my mistake
[17:07:16] <FromDiscord> <Rika> man maybe we should rename arc
[17:07:24] <FromDiscord> <Rika> its kinda confusing to talk about multiple languages
[17:07:38] <FromDiscord> <madman> so what does arc stand for
[17:07:41] <FromDiscord> <madman> or its just a name
[17:07:45] <FromDiscord> <madman> :P
[17:07:52] <FromDiscord> <haxscramper> call it  `orcarc`
[17:08:04] <FromDiscord> <Rika> in nim i think arq said it meant "ar\q's ref counting" or something
[17:08:07] <PMunch> Aristocratic Reference Counting
[17:08:09] <FromDiscord> <madman> i totally thought it was automatic ref counting
[17:08:10] <FromDiscord> <konsumlamm> advanced really cool GC
[17:08:24] <FromDiscord> <madman> lmao
[17:08:27] <PMunch> That's why Nim has a crown, because the ARC GC is royal
[17:08:34] <FromDiscord> <Rika> In reply to @haxscramper "call it  `orcarc`": aorc
[17:08:36] <FromDiscord> <Rika> xd
[17:08:41] <FromDiscord> <madman> the one gc to rule them all
[17:09:15] <FromDiscord> <madman> i would like to appreciate GCs more, maybe i should try to impl a silly one
[17:09:35] <FromDiscord> <haxscramper> I've found five nimble packages that have explicit `exec("rm")`
[17:09:39] <FromDiscord> <haxscramper> `rm ...`
[17:09:43] <FromDiscord> <Rika> what does it rm?
[17:10:06] <FromDiscord> <haxscramper> well, I will check in more detail now, but probably some internal build styff
[17:10:28] <FromDiscord> <haxscramper> I'm just checking what is going on in people's `.nimble` files right now
[17:10:37] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/TQI
[17:10:39] <FromDiscord> <haxscramper> ^ Most used `exec` commands
[17:11:03] <FromDiscord> <haxscramper> `$cmd` means `exec(cmd)` has been used - I don't track variable values now
[17:11:39] <FromDiscord> <Rika> > python 1
[17:11:43] <FromDiscord> <Rika> we have found the traitor
[17:13:00] <FromDiscord> <ajusa> > node↵> bash
[17:13:52] <FromDiscord> <haxscramper> Though it doesn't seem entirely accurate, some things are clearly missing
[17:14:29] <FromDiscord> <haxscramper> I don't believe there was no `git` uses
[17:22:09] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rJT
[17:22:14] <FromDiscord> <haxscramper> 1.3k execs for nim,
[17:22:18] <FromDiscord> <Rika> `true`
[17:22:19] <FromDiscord> <Rika> lol
[17:22:25] <FromDiscord> <haxscramper> Total of `2.2k` execs
[17:22:30] <FromDiscord> <haxscramper> (edit) "`2.2k`" => "`2.3k`"
[17:22:33] <FromDiscord> <Rika> where's python now lol
[17:23:11] <FromDiscord> <haxscramper> L
[17:23:15] <FromDiscord> <haxscramper> https://pastebin.com/Lt7Juxxk
[17:23:31] <FromDiscord> <haxscramper> No more `python1`
[17:35:19] <FromDiscord> <gerwy> is monotimes deprecated? because i can't import it
[17:35:28] <FromDiscord> <gerwy> (edit) "monotimes" => "`monotimes`"
[17:35:49] <FromDiscord> <Bung> add std prefix needed ?
[17:35:56] <FromDiscord> <gerwy> ooooh yeah i noticed it just now
[17:36:00] <FromDiscord> <gerwy> why its like this?
[17:36:23] <FromDiscord> <haxscramper> new modules use `std/` prefix
[17:36:27] <FromDiscord> <haxscramper> always use `std/` prefix
[17:38:20] <FromDiscord> <Bung> module changes many thing that can't compatible with old nim I think
[17:38:48] <FromDiscord> <haxscramper> no, it's because new modules use std prefix
[17:38:52] *** Parts: Clonkk[m] (~rfcmatrix@2001:470:69fc:105::34a8) ()
[17:39:00] <FromDiscord> <Bung> so old version import without prefix
[17:39:45] <FromDiscord> <Bung> that's true ? I see some need prefix , some not.
[17:40:19] <FromDiscord> <haxscramper> because it works without prefix for some modules
[17:40:27] <FromDiscord> <konsumlamm> @gerwy the devel docs also show the `std/` prefix (and they're more up to date in general): https://nim-lang.github.io/Nim/monotimes.html
[17:40:28] <FromDiscord> <haxscramper> But you should use `std/` prefix
[17:41:01] <FromDiscord> <konsumlamm> if you always use `std/`, you can't accidentally forget it for modules that actually need it
[17:41:41] <FromDiscord> <konsumlamm> and eventially it might necessary to use `std/`
[17:41:51] <FromDiscord> <Bung> okay , atleast we can just look imports know it use new version nim.
[17:41:54] <FromDiscord> <Clonkk> Yeah I think the plan is eventually to have all module as ``std/``
[17:42:06] <FromDiscord> <Clonkk> Which is reasonable imo
[17:42:08] <FromDiscord> <gerwy> In reply to @haxscramper "always use `std/` prefix": im not used to that↵it just seems like if any other module is included in std then why this module in particular needs to be specified that its in std
[17:42:51] <FromDiscord> <konsumlamm> because it's a better idea to prefix them
[17:42:58] <FromDiscord> <haxscramper> In reply to @Life Sucks "im not used to": because some new modules use `std/` prefix, and it is better to namespace modules
[17:43:00] <FromDiscord> <konsumlamm> it just took a while to realize that apparently
[17:43:11] <FromDiscord> <haxscramper> Instead of having some special toplevel `tables`
[17:43:13] <FromDiscord> <konsumlamm> so old modules use old conventions
[17:43:25] <FromDiscord> <Clonkk> In reply to @Life Sucks "im not used to": Because eventually all module will require ``std/`` notably to avoid name conflict (what I a stdlib module needs a name occupied by a Nimble package such as strformat vs strfmt)
[17:43:47] <FromDiscord> <Clonkk> Gotta start somewhere without breaking everything so it makes sense to have new module follow the new rule and old module still be compatible
[17:43:57] <FromDiscord> <Bung> this allow use have a local file named `monotimes.nim`
[17:46:00] <FromDiscord> <haxscramper> What does `reFilesDiffer` mean in testament? And I"m still having trouble with just running example from documentation
[17:46:10] <FromDiscord> <haxscramper> In reply to @haxscramper "What does `Failure: reNimcCrash`": This one
[17:46:21] <FromDiscord> <haxscramper> I'm testing↵``nim
[17:46:21] <FromDiscord> <haxscramper> discard """↵  errormsg: ""↵"""↵echo 12
[17:46:33] <FromDiscord> <Clonkk> Hmm ? https://forum.nim-lang.org/t/6999
[17:46:40] <FromDiscord> <Clonkk> I had a similar error maybe it's related
[17:46:44] <FromDiscord> <haxscramper> (edit) "discard """↵  errormsg: ""↵"""↵echo 12" => "sent a code paste, see https://play.nim-lang.org/#ix=3rK1"
[17:47:05] <FromDiscord> <Clonkk> It was basically having disabled ``--hints:off``
[17:47:11] <FromDiscord> <Clonkk> (edit) "disabled" => ""
[17:47:13] <FromDiscord> <haxscramper> Well running `nim c` manually wo
[17:47:20] <FromDiscord> <haxscramper> Ah, `--hints:off` should be enabled?
[17:47:34] *** Quits: fn (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[17:48:02] <FromDiscord> <Clonkk> Testament will fail you have ``--hints:off`` , ``--verbosity:0`` or ``--outdir:...``
[17:49:03] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rK2
[17:49:04] <FromDiscord> <Clonkk> sent a code paste, see https://paste.rs/3tv
[17:49:06] *** Joins: fn (~NimBot@ns501209.ip-142-4-210.net)
[17:49:09] <FromDiscord> <Clonkk> Well probably not that then
[17:50:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rK3
[17:50:07] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/1Ti
[17:50:11] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[17:50:18] <FromDiscord> <Clonkk> Ah yes
[17:50:26] <FromDiscord> <Clonkk> Error message must come from the correct files
[17:50:43] <FromDiscord> <Clonkk> I had this issue when I refactored some norm unit test with testamament
[17:50:45] <FromDiscord> <Clonkk> https://github.com/moigagoo/norm
[17:50:47] <fn> <12R2D299> 4GitHub: 7"A Nim ORM"
[17:50:56] <FromDiscord> <haxscramper> alright now it works, thanks a lot
[17:51:01] <FromDiscord> <haxscramper> undocumented crap
[17:51:47] <FromDiscord> <Clonkk> So expecting error message specified in an error pragma in your source file in a test.nim run with testament fail
[17:52:46] <FromDiscord> <haxscramper> Alright, I see now
[17:53:31] <FromDiscord> <Clonkk> sent a code paste, see https://play.nim-lang.org/#ix=3rK4
[18:00:38] <FromDiscord> <Bung> @timotheecour `could not load: libnimrtl.dylib` I updated latest devel , compile my theme get this error
[18:01:45] <FromDiscord> <haxscramper> In reply to @SneakyBaguette "https://github.com/moigagoo/norm": Does nimble pass all import paths to the testament when it runs? https://github.com/moigagoo/norm/blob/develop/norm.nimble#L16
[18:02:37] <FromDiscord> <haxscramper> Default `nimble test` handles dependency paths, what about custom one?
[18:04:24] <FromDiscord> <Clonkk> Eh, not sure. I want to say yes, because clearly the CI of Norm works
[18:06:01] <FromDiscord> <haxscramper> In CI it only installs required dependencies, so due to `--nimblePath` it does the right thing.
[18:07:02] <FromDiscord> <haxscramper> But I would expect it to work correctly only because of a lucky coincidence that just happens on a regular basis. E.g. it is not supported, but Ci doesn't do anything that might break things
[18:07:53] <FromDiscord> <Clonkk> I don't recall having any issue when working with it locally; but it was some time ago and can't honestly say for sure
[18:08:28] <FromDiscord> <Clonkk> Maybe it was just coincidence of not having strange setup and only a single versions of every dependencies installed as you said
[18:08:50] <FromDiscord> <Clonkk> Should be easy enough to check, no ?
[18:15:36] <FromDiscord> <haxscramper> I checked, it doesn't pass nimble paths
[18:16:04] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rKb
[18:16:30] <FromDiscord> <haxscramper> That passes paths for all 150+ installed packages at once
[18:21:29] *** Joins: vsantana1 (~Thunderbi@2804:214:816e:9813:e81f:7e15:5e1a:6736)
[18:24:25] *** Quits: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br) (Ping timeout: 265 seconds)
[18:24:25] *** vsantana1 is now known as vsantana
[18:28:09] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:35:28] *** Joins: rockcavera (~rc@192.12.113.221)
[18:35:28] *** Quits: rockcavera (~rc@192.12.113.221) (Changing host)
[18:35:28] *** Joins: rockcavera (~rc@user/rockcavera)
[18:42:48] <FromDiscord> <gerwy> is there some tool that i could use to see how much memory does my array uses?↵i mean if its array it will probably use the same memory every time right? so its just the matter of calculating `sizeof(type)  size`? right?
[18:43:53] <FromDiscord> <Rika> Essentially
[18:44:35] <FromDiscord> <gerwy> oh okay
[18:44:58] <FromDiscord> <gerwy> because im caching something after computing it and well... i have feeling that it will take a lot more than it should
[18:45:22] <FromDiscord> <Rika> If you want the total used by the whole program there are many tools for that
[18:47:05] <FromDiscord> <gerwy> i can just look it up on htop? It shows memory usage right?
[18:48:30] <FromDiscord> <gerwy> hmm okay it isn't as bad as i thought
[18:49:34] <FromDiscord> <madman> sent a code paste, see https://play.nim-lang.org/#ix=3rKj
[18:51:58] <FromDiscord> <konsumlamm> it's a seq of `nil`s
[18:52:21] <FromDiscord> <konsumlamm> you didn't initialize any elements, so the default value is used
[18:52:52] <FromDiscord> <madman> oh i thought the `newSeq` proc creates the data
[18:54:03] <FromDiscord> <konsumlamm> wdym?
[18:54:55] <FromDiscord> <haxscramper> newSeqWith will populate resulting sequence
[18:55:47] <FromDiscord> <madman> exactly what i was looking for
[19:06:58] *** Joins: vsantana1 (~Thunderbi@fttx-177136148192.usr.predialnet.com.br)
[19:09:59] *** Quits: vsantana (~Thunderbi@2804:214:816e:9813:e81f:7e15:5e1a:6736) (Ping timeout: 256 seconds)
[19:10:00] *** vsantana1 is now known as vsantana
[19:13:14] <FromDiscord> <Hi02Hi> In reply to @PMunch "It would be cool": found the conv.
[19:13:39] <FromDiscord> <Hi02Hi> In reply to @Hi02Hi "i actually think that": here was the result
[19:15:18] <PMunch> Oh the [GC] cycle collections will track when ORC was used?
[19:15:23] <PMunch> That's nifty
[19:16:06] <PMunch> Oh well gotta go
[19:16:07] *** Quits: PMunch (~PMunch@178.74.36.198) (Quit: leaving)
[19:43:27] *** Joins: max22- (~maxime@2a01cb0883359800f59d90bf8f7d5ba4.ipv6.abo.wanadoo.fr)
[19:52:29] *** Joins: daniel333 (~daniel333@107-145-111-119.res.spectrum.com)
[19:55:55] *** Quits: daniel333 (~daniel333@107-145-111-119.res.spectrum.com) (Client Quit)
[20:14:20] <FromDiscord> <treeform> In reply to @mst "right, my plan is": That would be great. I asked for this too.
[20:30:28] <FromDiscord> <timotheecour> In reply to @Bung "<@!427948629249228800> `could not load:": you need to compiler rtl, see manual, or see how `testament pcat dll` does
[20:31:15] <FromDiscord> <timotheecour> (edit) "compiler rtl," => "compile rtl (and set LD_LIBRARY_PATH or rpath etc),"
[20:40:55] <FromDiscord> <dom96> Well that was just ~6 hours of me and Araq's time reviewing the big Nimble PR. If you're creating PRs please please keep them small so we can iterate fast
[20:42:06] <FromDiscord> <Rika> damn 6 hours for 10k sloc thats p quick imo
[20:43:06] <FromDiscord> <kaushalmodi> sent a long message, see http://ix.io/3rKO
[20:43:22] <FromDiscord> <kaushalmodi> (edit) "http://ix.io/3rKO" => "http://ix.io/3rKP"
[20:47:29] <fn> <06Prestige99> That's a shit load of code to review, 10k lines? Was it like a whole rewrite?
[20:48:48] <FromDiscord> <Rika> massive functionality addition
[20:48:54] <FromDiscord> <Rika> a pr that should have been 6 i believe
[20:49:03] <fn> <06Prestige99> Sounds like it
[20:52:03] <FromDiscord> <Bung> @timotheecour now I use createnimrtl , I still get nil access
[20:57:23] <FromDiscord> <timotheecour> try `testament pcat dll` and if it works for you (as it should), it should show you how to make it work
[20:58:20] <FromDiscord> <timotheecour> > I still get nil access↵previously you mentioned a different error though
[20:59:49] <FromDiscord> <timotheecour> (edit) "though" => "though. also, you didn't specify your OS, i'm guessing osx? if so, try setting DYLD_LIBRARY_PATH so it can find it (as a temporary thing to try, but you should not use that in practice)"
[21:13:45] <FromDiscord> <tomck> Wait is `float` in nim default 64bit??
[21:14:32] <FromDiscord> <tomck> or should i always explicitly use `float32` and `float64`? is it implementation dependent?
[21:14:58] <FromDiscord> <tomck> `toUnixTimeFloat` in the `times` module returns a `float`, so i'm assuming that's 64 bit otherwise we'll be running out of bits fairly soon
[21:15:30] <FromDiscord> <Vindaar> In reply to @tomck "Wait is `float` in": yeah, as a matter of fact `float` is just an alias for `float64`
[21:31:19] <FromDiscord> <Bung> @timotheecour it's more then one error, fixed after you and me PR, then the major problem is I call dll proc from my program acess nil variable
[21:32:17] <FromDiscord> <timotheecour> needs a minimized repro, you may need to file a bug
[21:32:18] *** Joins: iortega (~inigo@217.113.248.254)
[21:34:13] <FromDiscord> <Bung> diffrent gc cause diffrent error, sometines occurs in dll proc's loop , sometimes occurs when operate dll proc's returns from main program.
[21:35:35] <FromDiscord> <Bung> okay, I'll try create minimal example to show the error
[21:57:51] *** Joins: SebastianM (~seba@user/sebastianm)
[21:58:14] <FromDiscord> <Bung> @timotheecour  please check https://github.com/bung87/dllgen
[21:58:16] <fn> <12R2D299> 4GitHub: 7"<No Description>"
[22:08:37] <FromDiscord> <tomck> sent a code paste, see https://play.nim-lang.org/#ix=3rL1
[22:09:09] <FromDiscord> <tomck> what's the solution here, just add normal single-# comments before fields & only expect doc comments to be generated on top-level object types?
[22:10:41] <FromDiscord> <haxscramper> that is a per-field documentation, or at leas how `nim doc` does it
[22:11:07] <FromDiscord> <haxscramper> ` ## \` is kind of useless, you can break on multiline doc comments with `## this` `## is a doc comment`
[22:11:19] <FromDiscord> <tomck> Yes i know, i want it to generate per-field docs, it doesn't
[22:11:23] <FromDiscord> <haxscramper> But you won't get nice doxygen-style table for fields
[22:11:42] <FromDiscord> <tomck> i see, so what's the preferred way to document fields?
[22:11:47] <FromDiscord> <tomck> I'm following this https://nim-lang.org/docs/docgen.html#introduction-documentation-comments
[22:12:29] <FromDiscord> <tomck> sent a code paste, see https://play.nim-lang.org/#ix=3rL3
[22:13:06] <FromDiscord> <haxscramper> In reply to @tomck "i see, so what's": preferred way to document fields is to put documentation on fields
[22:13:13] <FromDiscord> <haxscramper> as you just did
[22:13:58] <FromDiscord> <tomck> right, but then the docs are wrapped really tiny by default in vim, or i guess i could put the doc after the field
[22:14:18] <FromDiscord> <haxscramper> haxdoc will put them in table for you, but right now you have to use nim doc with it's current output
[22:14:47] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rL5
[22:15:04] <FromDiscord> <haxscramper> I haven't used them, but I just stick to `##` for fields
[22:15:29] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rL6
[22:15:39] <FromDiscord> <haxscramper> And just wrap comments on 80 lines
[22:16:01] <FromDiscord> <tomck> sent a code paste, see https://play.nim-lang.org/#ix=3rL7
[22:16:13] <FromDiscord> <tomck> i can manually re-indent but that's super annoying
[22:16:18] <FromDiscord> <haxscramper> Do you use emacs?
[22:16:40] <FromDiscord> <tomck> actually wait, it's nim fmt that's doing that indentation, so i'm screwed regardless of editor
[22:16:44] <FromDiscord> <tomck> no, vim at the moment
[22:16:58] <FromDiscord> <tomck> but it's nim fmt that I just run when hte buffer saves
[22:17:14] <FromDiscord> <haxscramper> well, emacs does the same, but if I do wrapping while I'm on the second line of the comment it works fine
[22:18:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3rLa
[22:18:07] <FromDiscord> <haxscramper> It would wrap it correctly
[22:18:12] <FromDiscord> <tomck> hmmmm
[22:18:44] <FromDiscord> <tomck> sent a code paste, see https://play.nim-lang.org/#ix=3rLb
[22:19:03] <FromDiscord> <tomck> still a bit of a pain though
[22:19:06] <FromDiscord> <tomck> what's haxdoc?
[22:19:26] <FromDiscord> <haxscramper> my documentation generator
[22:19:32] <FromDiscord> <haxscramper> https://github.com/haxscramper/haxdoc
[22:19:34] <fn> <12R2D299> 4GitHub: 7"Documentation generator and source code analysis system for nim."
[22:20:00] <FromDiscord> <tomck> any benefits over nim doc?
[22:20:03] <FromDiscord> <haxscramper> well
[22:20:30] <FromDiscord> <haxscramper> In reply to @haxscramper "Works for whole project,": this
[22:21:05] <FromDiscord> <kaushalmodi> In reply to @haxscramper "this": Do you plan to add manpage or info exports?
[22:21:15] <FromDiscord> <haxscramper> it would be trivial so why not
[22:21:22] <FromDiscord> <haxscramper> Not planned but would be possible
[22:21:35] <FromDiscord> <haxscramper> well, I actually partially support manpage imports
[22:21:37] <FromDiscord> <kaushalmodi> In reply to @haxscramper "Not planned but would": I'd love love to have manpages for my CLI tools
[22:22:07] <FromDiscord> <kaushalmodi> Info is even better but unfortunately not everyone is aware of that format
[22:22:08] <FromDiscord> <haxscramper> generating manpages is very simple so I could easily add it
[22:22:25] <FromDiscord> <haxscramper> In reply to @kaushalmodi "Info is even better": Could do info as well
[22:22:28] <FromDiscord> <kaushalmodi> In reply to @haxscramper "generating manpages is very": How so? Do you rely on pandoc or something?
[22:22:45] <FromDiscord> <haxscramper> No, there is a `libmandoc` project that provides mandoc parser
[22:23:06] <FromDiscord> <haxscramper> My main use case is to port posix documentation for nim wrappers
[22:23:16] <FromDiscord> <haxscramper> but it could be used for anything else
[22:23:34] <FromDiscord> <haxscramper> https://mandoc.bsd.lv/libmandoc.html
[22:24:02] <FromDiscord> <kaushalmodi> In reply to @haxscramper "https://mandoc.bsd.lv/libmandoc.html": Noted. So the user will need to have that library installed.
[22:24:22] <FromDiscord> <haxscramper> well, no, it is such an abomination to build so I'm going to do it when installing
[22:24:30] <FromDiscord> <haxscramper> and it is statically linked as wel
[22:25:34] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[22:25:36] <FromDiscord> <haxscramper> actually I want to do nightly binary build for haxdoc because I can't be waiting for several minutes on CI each time
[22:25:39] <FromDiscord> <haxscramper> Just to build docs
[22:25:57] *** Joins: supakeen (~user@python/site-packages/supakeen)
[22:29:22] <FromDiscord> <timotheecour> In reply to @Bung "<@!427948629249228800>  please check": i mean filing a bug in nim issue tracker
[22:30:01] <FromDiscord> <timotheecour> (edit) "In reply to @Bung "<@!427948629249228800>  please check": i mean filing a bug in nim issue tracker ... " 03added "(and minimizing it further)"
[22:30:06] <FromDiscord> <timotheecour> (edit) "further)" => "further as other bugs are)"
[22:36:07] <FromDiscord> <Bung> ok
[22:44:15] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[22:44:34] *** Quits: Vladar (~Vladar@46.162.2.53) (Read error: Connection reset by peer)
[23:03:34] <FromDiscord> <Ayy Lmao> I've been trying to make a macro that translates Nim code into Lua code. I have made progress, and it seems possible, but I was wondering if there is a better way. Is there some way to utilize what the Nim compiler does on the backend to compile to Lua as a backend?
[23:14:42] <FromDiscord> <tomck> depending on what you want, might be worth looking into compiling c -> lua, there's probably somethiing already out there
[23:14:56] <FromDiscord> <tomck> so you'd go nim -> c -> lua
[23:15:20] <FromDiscord> <tomck> obviously any FFI from nim -> lua will be a massive ballache & might break with compiler releases though (?)
[23:18:01] <FromDiscord> <Ayy Lmao> That's an interesting idea. I'll have to look into it. I basically want to write Lua scripts for this audio software called Reaper. I like Nim a lot so I'd rather write the scripts in Nim and translate them to Lua.
[23:20:21] <FromDiscord> <Ayy Lmao> Reaper also has its own scripting language that is absolutely horrid, but faster than Lua. I'm interested into compiling to that as well but that is certainly something I would have to write myself.
[23:30:08] <FromDiscord> <tomck> What are you doing with reaper scripts?
[23:30:25] <FromDiscord> <tomck> Is i tjust a UI plugin, like 'add menu button, when clicked open window X', etc?
[23:30:45] <FromDiscord> <tomck> or 'insert 4 tracks when C-S-t' is pressed?
[23:31:06] <FromDiscord> <tomck> if all you're doing is calling into reaper's API, you're probably going to have a horrible time of it in another lang
[23:31:43] <FromDiscord> <tomck> if you want to do some extra processing, like super-fast audio processing (in nim), then maybe best trying to compile nim to a .dll/.so then calling into that from lua if possible?
[23:32:10] <FromDiscord> <tomck> in my experience compiling between languages sucks & ends up being bad to use, although YMMV
[23:32:55] <FromDiscord> <Ayy Lmao> Pretty complicated stuff sometimes, like recently I made this script that opens a GUI window with a bunch of buttons in it that manage audio sends on different channels to a bunch of tracks. I also messed around before with making a full fledged pitch correction script which actually worked pretty well.
[23:34:02] <FromDiscord> <Ayy Lmao> In reply to @tomck "if you want to": I'm not sure if that's possible in Reaper but that would be really cool. I don't know if you are able to call external stuff
[23:34:03] <FromDiscord> <tomck> so are you actually doing audio processing, or is the bulk of the work interacting with reapers API to layout buttons, create sends, etc?
[23:34:48] <FromDiscord> <Ayy Lmao> The vast majority is interacting with the API, but with the pitch correction thing I had to do some audio processing, which I offloaded to the other scripting language Reaper has since it's faster
[23:35:30] <FromDiscord> <tomck> if 50% of the lines of code you write are calling into some reaper-specific function, is it actually worth using nim?↵↵If there's some complex audio processing that might be cool to compile from nim though, no idea how you could do it unfortunately, sorry!
[23:36:44] <FromDiscord> <Ayy Lmao> I meant the vast majority is calling reaper APIs instead of audio processing. The vast majority of the code is just raw logic in Lua, not API calls. The API calls are only to interact with Reaper.
[23:37:35] <FromDiscord> <Ayy Lmao> So basically like 95% of the code is just programming logic that could be done in Nim if I could just translate it to Lua.
[23:38:42] <FromDiscord> <Ayy Lmao> Like for instance you only have access to simple drawing functions like drawing rectangles and lines and such, so if you want to do a GUI you have to write all of the logic yourself.
[23:41:59] <FromDiscord> <haxscramper> In reply to @Ayy Lmao "I've been trying to": you can convert typed `PNode` to string,
[23:43:03] <FromDiscord> <Ayy Lmao> Is that something different than a NimNode?
[23:43:09] <FromDiscord> <haxscramper> `compileString` is a zero-setup starting point https://github.com/haxscramper/hnimast/blob/master/src/hnimast/compiler_aux.nim#L119
[23:43:26] <FromDiscord> <haxscramper> In reply to @Ayy Lmao "Is that something different": It is `PNode` at runtime, with full support for compiler infrastructure
[23:43:40] <FromDiscord> <haxscramper> But basically it is equivalent to `NimNode`
[23:43:58] <FromDiscord> <haxscramper> https://github.com/haxscramper/hnimast/blob/master/src/hnimast/compiler_aux.nim#L176
[23:44:58] <FromDiscord> <haxscramper> for simple lua compilation you can just pattern-match PNode and return types
[23:45:05] <FromDiscord> <Ayy Lmao> Does it have processing done to it that makes it palatable for other languages? Like for instance in lua you can't overload functions and certain expressions in Nim won't work
[23:45:05] <FromDiscord> <haxscramper> return lua code string
[23:45:54] <FromDiscord> <haxscramper> In reply to @Ayy Lmao "Does it have processing": yes, `compileString` returns semchecked code, so each function call is resolved to unique identifier. Then you can call `sighash()` on the symbol to get unique name
[23:46:13] <FromDiscord> <haxscramper> That's how nim basically generates code for C/Js targets that don'w allow overloading
[23:46:37] <FromDiscord> <haxscramper> You get `_jsadfjhasdfjaskjd` digest string - it is not pretty but does the job
[23:47:25] <FromDiscord> <Ayy Lmao> In reply to @haxscramper "You get `_jsadfjhasdfjaskjd` digest": I was doing that manually in the macro I was working on haha
[23:47:40] <FromDiscord> <haxscramper> macro has sighash available as well
[23:48:03] <FromDiscord> <Ayy Lmao> That's really cool though, sounds exactly like what I was looking for
[23:48:39] <FromDiscord> <Ayy Lmao> I have the framework for a Lua AST worked out already and it writes Lua code. I just need to get the Nim AST translated to it
