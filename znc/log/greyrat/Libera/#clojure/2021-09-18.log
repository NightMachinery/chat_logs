[00:01:42] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 245 seconds)
[00:13:00] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 268 seconds)
[00:13:49] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[00:33:28] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[00:37:05] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[00:52:04] *** Joins: innocent_victim4 (~innocent_@2001:999:50:bc65:d589:6779:71bc:c38a)
[00:53:46] <innocent_victim4> chimp fuck
[00:53:50] <innocent_victim4> chimp fuck
[00:53:52] <innocent_victim4> sieg heil
[00:53:52] <innocent_victim4> gay rape
[00:53:56] <innocent_victim4> urea and pillage
[00:54:08] <innocent_victim4> fuck small children with a birch log
[00:54:29] <innocent_victim4> birch log being inserted into 12 yer old boy's anus causing him to scream in agony
[00:55:29] *** ChanServ sets mode: +q *!*@2001:999:50:bc65:d589:6779:71bc:c38a
[01:03:02] *** Quits: innocent_victim4 (~innocent_@2001:999:50:bc65:d589:6779:71bc:c38a) (K-Lined)
[01:03:13] *** Quits: eddof13 (~textual@static-201-163-9-58.alestra.net.mx) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:05:45] *** ChanServ sets mode: +o jeaye
[01:06:47] *** jeaye sets mode: +b-q *!*@2001:999:50:bc65:d589:6779:71bc:c38a *!*@2001:999:50:bc65:d589:6779:71bc:c38a
[01:06:57] *** Joins: eddof13 (~textual@static-201-163-9-58.alestra.net.mx)
[01:07:08] *** jeaye sets mode: -o jeaye
[01:07:39] *** ChanServ sets mode: +o jeaye
[01:07:52] *** jeaye sets mode: -bo $a:cwaydt$##fix_your_connection jeaye
[01:24:35] *** Parts: sandra (~snan@chicken/contributor/snan) (part weird creature)
[01:28:31] <goodger> I'm glad to see the quality of discourse on IRC remains intact
[01:29:52] <Para> That's a Finnish IPv6, which is curious.
[01:30:22] <goodger> now they can give each individual spruce an IP address!
[01:30:27] <Para> Our biggest ISP; they usually have all kinds of heuristic scanners running security and whatnot.
[01:31:06] <Para> My greatest tinfoil theory I've heard about IPv6 is that it's NSA's plan to effectively give an unique fingerprint to everything ever to make it as hard as possible to hide behind random IPs.
[01:31:28] <Para> Heard this like 15 years ago while still in school, so it must be true.
[01:32:45] <goodger> I found that my ISP has started providing IPv6 the other day, when I found that my computer had set its hostname to its IPv6 address
[01:33:21] <lotuseater> wtf
[01:34:06] <Para> When my ISP originally rolled out IPv6, they sort of accidentally DDoS'd their own infra since most customers had crappy cable boxes which had various memory leaks and whatnot in their IPv6 stack causing hard resets randomly... :)
[01:34:50] *** Quits: eddof13 (~textual@static-201-163-9-58.alestra.net.mx) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:34:54] <Para> But they got to advertise that they're the first IPv6 first ISP in Finland, which was important because reasons(?)
[01:41:43] <goodger> heh nice
[01:43:09] <Para> It's wonderful to be a bit smaller country.
[01:43:25] <Para> All our options are basically the cheap one, the expensive high quality one, and the mediocre-at-everything one.
[01:46:29] *** Joins: mcint (mcint@user/mcint)
[01:49:04] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[01:50:27] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[01:52:27] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[01:52:42] *** Joins: lad (~lad@user/lad)
[01:55:32] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Ping timeout: 245 seconds)
[01:57:02] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[02:10:37] <technomancy> I watched Simple made Easy again so it's time to get mad about pattern matching again
[02:12:51] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 268 seconds)
[02:19:45] <jeaye> ^_^
[02:26:14] <goodger> technomancy: what about pattern matching makes you so angry?
[02:26:31] <technomancy> goodger: its lack, specifically
[02:26:54] <technomancy> well, its omission from Clojure along with the flimsy rationale for omitting it
[02:27:09] <goodger> core.match not your cup of tea?
[02:27:11] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[02:27:23] <technomancy> it's abandonware and has critical bugs that will never get fixed, plus it belongs in core
[02:27:49] <technomancy> according to Rich pattern matching is bad because "it's complected"
[02:28:40] <technomancy> which is a really bad argument. lots of complected things are in Clojure. it's not bad that they're complected; it's bad if it complects two things which aren't available a la carte.
[02:28:52] <selfsymmetric-mu> What's the definition of "complect" here?
[02:29:07] <goodger> whatever your imagination wants it to be!
[02:29:24] <technomancy> pattern matching is just destructuring plus conditionals. both destructuring and conditionals are available in Clojure without pattern matching. so what's the problem with putting them together? makes no sense.
[02:30:37] <technomancy> and then near the end of the talk he says that conditionals are bad because they're complected. so why not leave those out too? ugh.
[02:30:48] <selfsymmetric-mu> goodger: lol okay but technomancy: what do you think the definition is, just so we have something work for?
[02:30:52] <selfsymmetric-mu> *work with
[02:31:14] <selfsymmetric-mu> Pattern matching is sum-type destructuring, which is so fundamental that it's a weird omission indeed in my eyes.
[02:31:52] <technomancy> selfsymmetric-mu: I don't think this discussion will make a lot of sense if you haven't seen the talk, but roughly it means weaving together two separate concerns into one.
[02:32:06] <selfsymmetric-mu> technomancy: Thanks! I've seen it, but long ago, I've forgotten the jargon.
[02:32:12] <selfsymmetric-mu> Conditions work like sum types in that they partition a type. 
[02:32:34] <selfsymmetric-mu> I'm trying to understand Rich's rationale given the philosophy he laid out in History of Clojure.
[02:33:00] <technomancy> I think he just doesn't like it and is reaching for justification in a way that results in a lot of hand-waving
[02:33:15] <selfsymmetric-mu> In HoC, for example, he makes honestly quite persuasive arguments about the brittleness of strong types—even to me who likes strong types a lot.
[02:33:39] <selfsymmetric-mu> technomancy: I think that's possible, since that's a weakness all we humans share. Still…I wonder if I'm missing some key insight.
[02:34:12] <technomancy> well if you figure it out let me know =D
[02:34:26] <technomancy> around the time that this talk came out there was a lot of buzz about predicate dispatch
[02:34:39] <technomancy> which as far as I can tell went exactly nowhere, but I feel like it's related
[02:34:45] <selfsymmetric-mu> Hm…maybe it's a stylistic thing, because with pattern matching you can either destruct-then-condition (normal Clojure) or condition-with-destruct (pattern matching).
[02:35:14] <selfsymmetric-mu> But the reason that fails is that in practice you and I both miss match!
[02:35:29] <selfsymmetric-mu> I naturally reach for pattern matching in Clojure so its absence is felt.
[02:35:34] <technomancy> I wrote my own pattern matcher but I'm too much of a coward to introduce it at work
[02:35:43] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 252 seconds)
[02:35:54] <selfsymmetric-mu> I used to use pattern matching instead of `if` in Haskell, so I get it.
[02:35:56] <technomancy> maybe you can make use of it =) https://clojars.org/fnl-match
[02:36:05] <technomancy> selfsymmetric-mu: using `if` is considered a newbie mistake in erlang
[02:36:35] <selfsymmetric-mu> technomancy: I don't speak Erlang. Are you supposed to use a case statement instead?
[02:36:39] <technomancy> yeah
[02:36:59] <selfsymmetric-mu> Yep, I get that. If is redundant in that way.
[02:37:57] <technomancy> hm; I wonder if it was a mistake to make nil opt-out instead of opt-in with my clojure pattern matcher
[02:38:49] <selfsymmetric-mu> Good question; nil is weird.
[02:39:14] <goodger> technomancy: how's progress on that?
[02:39:37] <technomancy> goodger: it's done I guess?
[02:39:57] <technomancy> well, it's based on fennel's `match` which has had some new features added since I wrote the Clojure version
[02:40:08] <technomancy> but I dunno if I'll port them if no one uses it
[02:40:29] <technomancy> too busy using a language that actually has match built-in
[02:41:12] <jeaye> technomancy: No CLJS support. :(
[02:42:58] *** Joins: Skyfire (~pyon@user/pyon)
[02:43:19] <technomancy> patches welcome I guess
[02:43:36] <technomancy> I've never used cljs so I can't really say what is needed
[02:44:38] *** Joins: lad_ (~lad@user/lad)
[02:45:29] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[02:46:44] *** Joins: lad__ (~lad@user/lad)
[02:49:30] *** Quits: lad_ (~lad@user/lad) (Ping timeout: 260 seconds)
[02:50:07] *** Joins: OscarZ (~oscarz@95.175.104.70)
[02:55:48] <technomancy> in Out of the Tarpit they talk about how languages impose ordering on things that are not necessarily ordered, and that it adds cognitive overhead for the reader to try to untangle whether these things are in that order because they need to be or just because they happened to be written that way
[02:56:20] <technomancy> kind of comes across as an argument in favor of scheme-style non-sequential `let` over `let*`
[02:57:16] <technomancy> (section 4.2 of http://curtclifton.net/papers/MoseleyMarks06a.pdf )
[02:59:19] *** Joins: solaire (~user@pool-108-31-85-19.washdc.fios.verizon.net)
[03:05:51] <selfsymmetric-mu> Yeah, I buy that. Usage matters. I find myself adding stars to lets in Schemes often enough that I agree with Clojure's choice.
[03:07:12] <technomancy> there's value in being able to look at it and tell the difference between let vs let* immediately at a glance, I guess
[03:11:26] *** Quits: lad__ (~lad@user/lad) (Ping timeout: 260 seconds)
[03:15:19] *** Quits: solaire (~user@pool-108-31-85-19.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[03:18:05] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:27:51] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[03:46:43] *** Joins: lad (~lad@user/lad)
[04:02:43] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[04:26:07] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[04:35:42] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 268 seconds)
[04:49:01] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[05:38:45] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[05:56:43] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::fc2b)
[06:00:59] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[06:10:52] *** Joins: mug (~las@138.68.109.168)
[06:17:07] *** Joins: yoonkn (~user@175.197.208.79)
[06:34:43] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::fc2b) (Ping timeout: 268 seconds)
[07:12:52] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[07:21:24] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[07:37:01] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[08:04:21] *** Quits: harrigan (~harrigan@162.43.194.137) (Ping timeout: 268 seconds)
[08:04:22] *** Joins: harrigan- (~harrigan@162.43.194.137)
[08:04:46] *** harrigan- is now known as harrigan
[08:12:52] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[08:13:17] *** Joins: Skyfire (~pyon@user/pyon)
[08:24:34] *** Quits: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[08:33:46] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[09:35:58] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 260 seconds)
[10:38:28] *** Joins: jpe (~user@pool-108-31-85-19.washdc.fios.verizon.net)
[10:47:59] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[11:10:37] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[11:11:01] *** Joins: jemoka (~jemoka@user/jemoka)
[11:11:54] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[11:12:14] *** Joins: jemoka (~jemoka@user/jemoka)
[11:12:45] *** Joins: yoonkn (~user@175.197.208.79)
[11:13:01] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[11:16:28] *** Joins: jemoka (~jemoka@user/jemoka)
[11:18:22] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[11:19:13] *** Joins: jemoka (~jemoka@user/jemoka)
[11:20:22] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[11:20:42] *** Joins: jemoka (~jemoka@user/jemoka)
[11:45:18] <Para> re: Last night's discussion. Yeah, if pattern matching is complicated, then what is spec supposed to be.
[11:46:55] <ridcully_> a way to pattern-match?
[11:48:51] <ridcully_> well only good for certain cases.  the coercion part that is.  you still need to do the if-ish part
[11:55:36] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[12:02:40] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[12:19:14] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:35:30] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:12:55] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[13:15:42] *** Joins: Harlin_ (~DonQixote@lsp-nmrx-178-212.lsp01.numerex.com)
[13:17:44] *** Joins: Harlin__ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[13:18:34] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:ed29:6f25:3c3f:341e) (Ping timeout: 260 seconds)
[13:21:06] *** Quits: Harlin_ (~DonQixote@lsp-nmrx-178-212.lsp01.numerex.com) (Ping timeout: 268 seconds)
[13:22:38] *** Joins: op2 (~op@user/op2)
[13:33:10] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[13:37:44] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[13:54:10] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:1085:481e:c3d:1632)
[14:03:12] *** Joins: seschwar (~seschwar@user/seschwar)
[14:07:25] *** Quits: markjf (~markjf@cpc115884-addl5-2-0-cust442.6-3.cable.virginm.net) (Quit: Leaving)
[14:13:31] *** Joins: markjf (~markjf@cpc115884-addl5-2-0-cust442.6-3.cable.virginm.net)
[14:27:00] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[14:28:50] *** Quits: jespada (~jespada@host244.190-3-30.dynamic.telmex.net.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:42:28] *** lunik19 is now known as lunik1
[14:42:33] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: :x)
[14:42:45] *** Joins: lunik1 (~lunik1@37.205.14.203)
[14:44:09] *** Quits: maskd (~eu@user/maskd) (Quit: WeeChat 3.0.1)
[14:44:25] *** Joins: maskd (~eu@user/maskd)
[14:57:14] *** Quits: uncleyear (~ian@pppoe.178-66-156-158.dynamic.avangarddsl.ru) (Remote host closed the connection)
[14:58:23] *** Joins: uncleyear (~ian@pppoe.178-66-156-158.dynamic.avangarddsl.ru)
[15:11:44] *** Joins: jespada (~jespada@2803:9800:9842:7a62:e945:15a6:5467:94f6)
[15:26:20] *** Quits: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net) (Ping timeout: 260 seconds)
[15:36:13] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[16:00:04] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[16:04:43] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 252 seconds)
[16:10:32] *** Joins: ToxicFrog (~ToxicFrog@198-200-100-178.cpe.distributel.net)
[16:32:14] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:33:55] *** Quits: X-Scale (~ARM@31.22.160.28) (Ping timeout: 252 seconds)
[16:34:08] *** X-Scale` is now known as X-Scale
[16:37:52] *** Quits: derpadmin (~Anonymous@69-165-203-228.cable.teksavvy.com) (Ping timeout: 252 seconds)
[16:40:48] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::fc2b)
[17:05:36] <ToxicFrog> Agents and concurrency question --
[17:05:39] <ToxicFrog> I have an Agent that, after finishing some operation, needs to queue up another operation to be done N seconds later (and still needs to be able to process other messages in the meantime)
[17:05:41] <ToxicFrog> I could do this by (send-off)ing to another agent a function that just does (Thread/sleep) and then (send) back to the originating agent, but is it safe to just use (future) to schedule it and then throw away the returned future object, since I don't care about the return value, just about the side effect of a new action being queued against this agent?
[17:09:48] <ToxicFrog> I think that it's safe because even if the future object is no longer reachable by any of my code, the newly spawned thread won't be collected until it finishes execution...
[17:19:14] <sobel> That sounds pretty rational to me
[17:20:46] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:1085:481e:c3d:1632) (Ping timeout: 252 seconds)
[17:23:26] <sobel> In the case where you throw away the scheduled future, how are you delaying execution?
[17:23:39] <sobel> is that internal to the future'd function?
[17:25:46] <ToxicFrog> Yeah, something like: (future (Thread/sleep 5000) (send *agent* do-the-thing))
[17:27:22] <ToxicFrog> I don't want the agent sitting around waiting to deref the future because it probably has other stuff to do in the meantime!
[17:28:27] <sobel> that opens my eyes to the potential for an agent to get blocked because i change an atom to a future and no syntax changes are necessary
[17:28:41] <sobel> totally a thing i could see myself doing
[17:29:17] <sobel> to the extent every language is some sort of footgun, i have to watch out for those
[17:29:45] <ToxicFrog> (basically, I have a thread that just reads client messages from a socket, parses them, and hands them to the agent for processing and state updates; but the agent also needs to occasionally check for changes to a backend thing that can only be inspected by polling, and update its state based on that)
[17:30:15] <ToxicFrog> (so the idea is that the agent should still be able to process client messages promptly in between polls)
[17:30:49] <sobel> sounds like a non-blocking design to me
[17:30:58] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[17:31:51] <sobel> i try to lean on netty-based network libraries when i can
[17:32:20] <sobel> once i grokked that it has a polling thread that pumps events to the caller layer, and is thus very performant
[17:32:44] <sobel> i had one of those moments: i'll never build a better one. i should use this one.
[17:38:48] *** Joins: Iacob (~Iacob@111.167.164.70)
[17:39:05] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Read error: Connection reset by peer)
[17:39:29] *** Joins: DasBrain (~DasBrain@user/dasbrain)
[17:46:09] *** Joins: retropikzel (~retropikz@83-245-254-255-nat-p.elisa-mobile.fi)
[17:51:44] <andreyorst> btw does anyone know if netty can send 5XX responses without me noticing it?
[17:52:02] *** Quits: retropikzel (~retropikz@83-245-254-255-nat-p.elisa-mobile.fi) (Ping timeout: 268 seconds)
[17:52:25] <Para> Hmm, maybe if its internals poop on io.
[17:52:50] <andreyorst> I'm in a bit weird situation right now, that I use aleph.http, which, if I'm not mistaken, uses netty, and I wrap requests and responses with the logger function
[17:53:10] <andreyorst> however there are no 5xx statuses in the log, yet thec lient receives those
[17:53:52] <andreyorst> and I'm unsure how to debug
[17:54:01] <andreyorst> or was it jetty
[17:54:51] <Para> I'm like 99% it's netty
[17:55:19] <Para> Jetty is an odd wart in JVM ecosystem but I'm not going there now... :) In any case, I'd blame something wonky with I/O, as in client terminating mid transfer something, or allocation failure etc.
[17:55:28] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:55:30] <Para> Netty is fickle to anything in its critical path, at least.
[17:56:30] <sobel> that checks out. i would expect the i/o service thread to take zero crap from invalid state or i/o acting weird
[17:56:32] <andreyorst> I guess I'll need to enable logging directly in netty somehow, as it seems that this happens way before the middleware I set
[17:58:51] <andreyorst> Para, I thought 5xx should not appear if the client terminates mid something, it's internal server error, clients should not be able to trigger that (apart from sending something nasty I guess)?
[18:00:49] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:02:18] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 268 seconds)
[18:03:43] *** Joins: X-Scale` (~ARM@83.223.227.181)
[18:04:10] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[18:05:16] *** X-Scale` is now known as X-Scale
[18:08:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:09:38] *** Joins: retropikzel (~retropikz@2001:999:20e:11a2:1085:481e:c3d:1632)
[18:21:45] <ToxicFrog> sobel: in this case it's somewhat awkward because one half of it is connected to a TCP socket that exchanges line-oriented plaintext commands with a client and the other end is connected to a headless browser via webdriver and needs to both send commands to the browser (a process which is stateful and not at all threadsafe) and send messages to the client based on state changes in the browser
[18:23:40] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[18:31:34] *** Quits: Iacob (~Iacob@111.167.164.70) (Quit: 离开)
[18:34:59] *** Quits: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:39:57] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[18:56:43] <sobel> yow. are you working on figwheel or something? :)
[19:04:36] *** Joins: xsperry (~as@user/xsperry)
[19:07:25] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:07:52] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[19:10:13] *** Quits: retropikzel (~retropikz@2001:999:20e:11a2:1085:481e:c3d:1632) (Ping timeout: 252 seconds)
[19:10:14] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:16:11] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[19:16:28] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:21:12] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[19:28:13] *** Quits: madscientist` (tpalohei@kapsi.fi) (Quit: Reconnecting)
[19:28:21] *** Joins: madscientist` (tpalohei@kapsi.fi)
[19:39:22] *** Quits: lunik1 (~lunik1@37.205.14.203) (Ping timeout: 260 seconds)
[19:52:54] *** Quits: jpe (~user@pool-108-31-85-19.washdc.fios.verizon.net) (Remote host closed the connection)
[20:07:25] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:08:10] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:16:12] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:17:18] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:17:56] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 265 seconds)
[20:18:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:26:37] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:27:14] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:31:38] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:32:12] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:34:07] *** Quits: jemoka (~jemoka@user/jemoka) (Remote host closed the connection)
[20:34:32] *** Joins: jemoka (~jemoka@user/jemoka)
[20:41:39] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[20:41:40] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:42:43] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[20:49:38] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:01:41] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[21:05:37] *** Joins: VoidNoir0 (~VoidNoir0@72.80.203.52)
[21:07:20] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:26:50] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[21:33:15] *** Joins: choas (~lars@p5dc19227.dip0.t-ipconnect.de)
[21:53:49] *** Joins: choas_ (~lars@p5dc19227.dip0.t-ipconnect.de)
[21:53:49] *** Quits: choas (~lars@p5dc19227.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:02:24] *** Joins: lunik1 (~lunik1@37.205.14.203)
[22:02:29] *** Quits: lunik1 (~lunik1@37.205.14.203) (Client Quit)
[22:03:16] *** Joins: lunik1 (~lunik1@37.205.14.203)
[22:12:46] <ToxicFrog> I'm working on a googlechat<->irc bridge but I'm too lazy to reverse engineer the googlechat API
[22:42:02] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:44:13] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Ping timeout: 250 seconds)
[22:45:31] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:53:35] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 268 seconds)
[22:55:38] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[23:00:30] *** Quits: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com) (Ping timeout: 260 seconds)
[23:22:51] *** Joins: matty_matt (~matt@cpe-98-14-254-37.nyc.res.rr.com)
[23:39:13] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
