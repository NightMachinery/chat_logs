[00:02:23] *** Quits: constxd (~brad@142.134.78.128) (Quit: WeeChat 2.8)
[00:03:02] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[00:12:08] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[00:19:11] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[00:19:21] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[00:26:52] <adam12> John_Ivan: git-annex?
[00:27:08] <adam12> or maybe MergerFS?
[00:28:27] <John_Ivan> adam12, I'll look those up, thanks
[00:28:39] <nakilon> do any net/http wrappers have the feature of fast converting the request copied from browser devtools Network tab into the library call ruby code?
[00:29:04] <nakilon> or will it be the killer-feature of my wrapper?
[00:30:08] <ox1eef> sounds unique
[00:35:27] <nakilon> for now it has only the opposite thing -- the DEBUG logging level printing the curl analogue of the library call
[00:36:56] <nakilon> was handy for debugging the webserver communication issues from the console without calling the whole program
[00:37:57] <nakilon> but now when I'm porting browser communication into ruby code the Nth time I wonder how didn't I simplify it earlier
[00:44:52] <mooff> nakilon: Ruby actually supports this natively
[00:45:07] <mooff> right click -> Copy as cURL. then in Ruby code: `#{copied_text}` :D
[00:51:16] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:52:51] *** Joins: unyu (~pyon@user/pyon)
[00:53:06] <havenwood> https://jhawthorn.github.io/curl-to-ruby/
[00:55:36] <nakilon> mooff lol
[00:56:59] <nakilon> havenwood cool, so I'm not the first with the idea
[00:59:51] *** Quits: ua_ (~ua@public-gprs226840.centertel.pl) (Read error: Connection reset by peer)
[01:00:40] <nakilon> I'll probably convert from "curl" but from "fetch" since it should be easier to parse the JS code, since there is already the rkelly-remix
[01:00:50] <nakilon> *not from
[01:16:56] *** Joins: ua_ (~ua@public-gprs226840.centertel.pl)
[01:21:02] <nakilon> looks like there is also an approach of parsing the "HAR archive" exported from the same Network tab -- that file includes all the requests so you would forge the whole history of interactions and then pick out what you need
[01:23:48] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 240 seconds)
[01:32:17] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[01:43:36] *** Quits: Thanzex (~Thanzex@37.103.241.128) (Read error: Connection reset by peer)
[01:44:08] *** Joins: Thanzex (~Thanzex@37.103.241.128)
[02:13:27] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Ping timeout: 256 seconds)
[02:30:45] <mooff> the HAR format is great, but Chrome/Firefox only support exporting 'all' to HAR
[02:30:47] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:31:23] <mooff> plus, it also includes full response bodies, response headers, timings, etc
[02:31:51] <mooff> "what to send" is a relatively small part of it
[02:32:23] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:50:03] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Quit: Leaving)
[03:03:01] *** Joins: markong (~kvirc@213.146.188.203)
[03:15:34] <mooff> pasting into IRB takes a long time, doesn't it?
[03:16:42] <nakilon> new IRB? maybe; I don't like new IRB
[03:25:24] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:10:18] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[04:19:20] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[04:20:32] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Client Quit)
[04:35:19] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[04:53:49] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[05:15:56] <leah2> with 3.1 it's fast
[05:16:03] <bougyman> Hey leah2 
[05:16:06] <bougyman> ltnc
[05:16:10] <leah2> hey bougyman 
[05:16:12] <leah2> agree
[05:48:19] <mooff> \o/
[05:48:50] <mooff> you could watch a movie in the time it takes to paste a file into 2.7
[05:51:07] <nakilon> for some reason the "Copy fetch" has less headers than "Copy curl" -- there is no Authority, User-agent, and DNT
[05:56:13] <ox1eef> fetch as in JS?
[05:58:17] <ox1eef> if so, thats because the browser handles those - at least user-agent & dnt.
[05:59:10] *** Joins: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[06:01:01] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[06:01:24] *** Quits: ur5us (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Read error: Connection reset by peer)
[06:10:31] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:27:45] <nakilon> damn Cloudflare; I already ensures that I fully reproduce the header via httpbin.org but it immediately responds with 503
[06:28:32] <nakilon> (I mean I compare the header sent from my program and from the curl that successfully gets 200)
[06:30:10] *** Joins: roadie (~user@pd956924f.dip0.t-ipconnect.de)
[06:35:54] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[06:46:40] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[07:01:19] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[07:14:54] *** Joins: osXnut (~osXnut@77.125.126.151)
[07:32:57] *** Quits: osXnut (~osXnut@77.125.126.151) (Ping timeout: 240 seconds)
[07:35:17] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[07:46:58] *** Quits: roadie (~user@pd956924f.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 25.3.50.1))
[07:49:08] *** Joins: osXnut (~osXnut@77.125.126.151)
[07:52:26] *** Joins: hanzo (uid532183@user/hanzo)
[08:07:15] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[08:37:03] *** Joins: reset (~reset@user/reset)
[08:52:15] *** Quits: wand (~user@gateway/tor-sasl/wand) (Ping timeout: 240 seconds)
[08:56:13] *** Joins: wand (~user@gateway/tor-sasl/wand)
[09:12:30] *** Joins: lunarkitty (uid501895@user/pyra)
[11:00:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[11:00:48] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[11:12:52] *** Joins: Ziyan (~ziyan@112.134.174.203)
[11:15:39] *** Quits: ollysmith_ (~ollysmith@88.202.203.8) (Quit: ZNC 1.8.2+deb2+b2 - https://znc.in)
[11:20:22] *** Joins: ollysmith (~ollysmith@88-202-203-8.customer.gigaclear.net)
[11:21:38] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[11:27:36] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Remote host closed the connection)
[11:27:55] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[12:02:14] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[12:05:25] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Quit: dionysus69)
[12:05:42] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[12:27:36] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[12:28:17] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[12:45:53] *** Quits: Thanzex (~Thanzex@37.103.241.128) (Read error: Connection reset by peer)
[12:46:19] *** Joins: Thanzex (~Thanzex@37.103.241.128)
[12:50:27] *** Quits: Ziyan (~ziyan@112.134.174.203) (Quit: Textual IRC Client: www.textualapp.com)
[13:05:36] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:05:39] *** Joins: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d)
[13:21:13] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:24:55] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[13:39:53] *** Joins: Rounin (~david@84.212.130.215)
[13:51:55] *** Joins: fef (~thedawn@user/thedawn)
[14:06:34] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:08:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:09:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:10:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:23:23] *** Quits: osXnut (~osXnut@77.125.126.151) (Quit: leaving)
[14:23:25] *** Joins: TCZ (~tcz@91.150.178.124)
[14:31:45] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-5562-7079-f686-c708.ip6.gigabit.dk) (Quit: Leaving)
[14:46:58] *** Joins: oxfuxxx (~oxfuxxx@217.138.207.197)
[14:55:51] *** Quits: oxfuxxx (~oxfuxxx@217.138.207.197) (Ping timeout: 256 seconds)
[15:01:41] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.104)
[15:20:32] *** Quits: ur5us_ (~ur5us@2406:e002:6845:dc01:c2e6:9f40:66a8:f76d) (Ping timeout: 240 seconds)
[15:20:52] *** Joins: markong (~kvirc@213.146.188.203)
[15:26:32] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[15:36:37] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.104) (Ping timeout: 250 seconds)
[16:52:28] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[17:04:18] *** Joins: dionysus70 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[17:04:23] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Quit: dionysus69)
[17:04:23] *** dionysus70 is now known as dionysus69
[17:04:44] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Client Quit)
[17:06:36] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[17:06:56] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[17:28:30] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:45:22] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:54:31] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[17:57:03] *** Joins: mara (~coderobe@archlinux/trusteduser/coderobe)
[17:58:36] <mara> hi, what's the recommended way of mapping multiple keys to the same value, for a look-up table? i.e. aliasing 3 unique strings to the same value?
[18:00:41] <mara> {"foo" => %w[bar baz]}Â and then finding the key where the values.include? seems ... backwards, but requires the least code
[18:19:29] *** Joins: Tempesta (~Tempesta@user/tempesta)
[18:25:38] <mooff> mara: sounds awkward. can you share code or more details about the problem?
[18:28:19] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[18:32:40] <havenwood> mara: Will there only be one key with the value or multiple?
[18:35:34] <havenwood> {"foo" => %w[bar baz]}.each_with_object({}) { |(k, v), h| v.each { h[_1] = k } }
[18:35:34] <havenwood> #=> {"bar"=>"foo", "baz"=>"foo"}
[18:35:56] <havenwood> mara: If the values only have a single key each, you can invert the Hash.
[18:36:00] <mara> havenwood: multiple values mapping to one key (many to one), no value will ever map to multiple keys (many to many)
[18:36:03] <mara> yeah that's what i've been doing
[18:36:15] <mara> though i doubt that's the best approach, is it
[18:36:27] <havenwood> mara: Inverting the Hash is the best approach.
[18:36:33] <mara> mm, alright
[18:36:58] <havenwood> mara: With more context we might be able to suggest better, but from what you've said that's correct.
[18:38:09] <havenwood> mara: It's far better to have `{"bar"=>"foo", "baz"=>"foo"}` than to check #include? repeatedly.
[18:39:35] <mara> yeah, figure it makes sense to invert the hash once rather than run a couple  thousand #include? 
[18:39:40] <mara> i'll go with that, thx
[18:42:20] *** Quits: acosta (~acosta@163.172.62.165) (Quit: The Lounge - https://thelounge.chat)
[18:43:13] *** Joins: acosta (~acosta@163-172-62-165.rev.poneytelecom.eu)
[18:49:44] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[19:00:00] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[19:24:59] <o|||||o> hey all, i'm having difficulty with sum
[19:25:45] <o|||||o> i'm running Order.first.order_items.sum {|item| item.art.price.to_i * item.quantity} and getting the value of the price but if i pp them, i get the correct value for each iteration but it still outputs the price
[19:31:13] <o|||||o> console log here: https://paste.ee/p/LwYGG
[19:32:02] *** Quits: ua_ (~ua@public-gprs226840.centertel.pl) (Ping timeout: 240 seconds)
[19:33:35] *** Joins: impermanence (~impermane@50.sub-174-199-97.myvzw.com)
[19:36:10] <impermanence> The following CVE https://ubuntu.com/security/CVE-2022-0778 is forcing an update on my ubuntu servers.Â  Although my chef code has the relevant packages pinned at a particular version, it's still trying to upgrade them.Â  And for whatever reason its complaining about dependency violations (of course).Â  I realize this isn't the chef channel of
[19:36:11] <impermanence> course (there isn't one really anymore).Â  But curious if anyone has any advice.Â  I know nothing of Chef but figure there's probably one or two heads in here that do.Â  Fine to dm.
[19:38:46] <leah2> did you pin including the tiny version?
[19:42:00] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Read error: Connection reset by peer)
[19:42:16] *** Joins: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge)
[19:45:38] *** Joins: ua_ (~ua@public-gprs222674.centertel.pl)
[19:46:54] <nakilon> adam12 can you please add the ferrum gemdocs? also would be nice if it was v0.11
[19:48:33] <nakilon> they put the "evrone" trademark everywhere on github and landing for the "help making the project website" and could not even add any docs links on it... smh
[19:57:33] *** Joins: lunarkitty (uid501895@user/pyra)
[20:06:18] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[20:15:00] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 252 seconds)
[20:19:59] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[20:28:13] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:41:07] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[20:44:06] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[20:46:19] *** Quits: dionysus69 (~Thunderbi@94-43-205-210.dsl.utg.ge) (Ping timeout: 268 seconds)
[20:49:17] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 240 seconds)
[20:49:32] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 240 seconds)
[20:57:30] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[21:00:01] <nakilon> what's the purpose of "If the given object is not a Regexp, returns the value returned by object =~ self." in String#=~ ?
[21:00:20] <nakilon> by a mistake I did str =~ [regex] and it didn't raise an error
[21:01:09] <nakilon> especially weird considering that Array has no =~ method
[21:02:51] <ox1eef> the receiver is String#=~ in that example, not Array
[21:06:32] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:07:26] <nakilon> but [regex] is an object so it's calling [regex] =~ string according to docs
[21:07:37] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:07:40] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[21:07:58] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:08:59] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:10:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:11:29] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[21:14:13] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Remote host closed the connection)
[21:14:30] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[21:19:31] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[21:19:37] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 250 seconds)
[21:20:42] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 260 seconds)
[21:23:45] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 252 seconds)
[21:30:28] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[21:34:00] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[21:43:02] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[21:47:15] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[21:47:37] <weaksauc_> isn't that the operator that is used for pattern matching in case statements nakilon 
[21:47:49] <weaksauc_> which is why it is the way it is
[21:47:57] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 252 seconds)
[21:48:06] <nakilon> isn't that === ?
[21:50:00] <mara> if i take a part of an array like foo[100..1000], does that return the same memory within foo or does it duplicate the elements in the range?
[21:51:07] <weaksauc_> i guess so but it is the basic pattern matching operator 
[21:51:09] <nakilon> I believe it will duplicate 900 references
[21:51:25] <weaksauc_> that other objects can implement 
[21:51:33] <weaksauc_> https://docs.ruby-lang.org/en/3.1/doc/regexp_rdoc.html#label-3D~+operator
[21:52:07] <nakilon> so the amount of new memory should not depend on the size of the inside objects
[21:52:44] <mara> actually, xyproblem. the reason i'm asking is that i have an array with a couple million elements, and i'm running .detect on it a few thousand-or-so times. with each subsequent .detect, i already know an offset up to which the .detect will not find anything and i thought that perhaps i could speed this up by using something like
[21:52:44] <mara> foo[offset..].detect, to save scanning up to offset
[21:52:49] <weaksauc_> though they do say in the object docs that it's deprecated because it can hide troublesome type errors nakilon 
[21:53:01] <nakilon> if I wanted to do Regex#=~ I would do that explicitely, and why there is no error on Array?
[21:53:18] <weaksauc_> because it's defined on object
[21:53:30] <weaksauc_> https://docs.ruby-lang.org/en/3.1/Object.html#method-i-3D~
[21:53:54] <weaksauc_> it was intended to be the general pattern matching operator
[21:54:03] <nakilon> mara that's another question; probably the [] is the same O(n) as detect
[21:54:11] <nakilon> *it may be that
[21:54:55] <nakilon> oh, maybe it does not raise only on 2.3, didn't check it further
[21:55:08] <mara> the detect should be heavier than an index access because it's doing complex comparisons
[21:55:21] <nakilon> I mean not [i] but [i..j]
[21:56:09] <mara> mm
[21:56:59] <weaksauc_> those docs are 3.1 so who knows when they deprecated it
[21:58:01] <weaksauc_> yeah 2.3 is not deprecated
[21:58:04] <weaksauc_> yet
[21:58:47] <weaksauc_> it was deprecated between 2.5 and 2.6
[22:00:10] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[22:04:59] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 252 seconds)
[22:13:57] *** Quits: Thanzex (~Thanzex@37.103.241.128) (Read error: Connection reset by peer)
[22:14:33] *** Joins: Thanzex (~Thanzex@37.103.241.128)
[22:18:13] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[22:20:06] <mooff> mara: you may want .lazy.detect
[22:20:44] <mara> mooff: why would .lazy.detect be faster than .detect?
[22:22:23] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 256 seconds)
[22:25:56] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Ping timeout: 250 seconds)
[22:27:03] <mooff> mara: when you're chaining multiple filter / map stages, it'll run it as one sequence rather than processing the whole lot at each step
[22:27:40] <mara> i only have one detect on an existing object
[22:27:53] <mara> so making just that lazy will do nothing as far as i understand
[22:28:28] <mooff> ah, i misread your message
[22:29:23] *** Quits: asveepay (asveepay@faeroes.sdf.org) (Quit: Lost terminal)
[22:29:57] <mooff> foo[offset..].detect is worth trying. benchmark it and see?
[22:31:35] <mara> i think my problem just solved itself. rather than running detect in a loop i'm now using select and then .index in the loop body which appears to be heaps faster anyway
[22:32:59] <mara> (i'm deleting *multiple* values (incl. values that have not been selected) of the array i'm running this on in the loop body, so i couldn't just use reject to begin with)
[22:33:29] <mara> that cut my run time from 93s to less than 1s ðŸ™ƒ
[22:36:11] *** Joins: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e)
[22:37:00] *** Quits: roadie (~user@2a02:8108:5a40:1d87:2ced:e9a2:8ab0:1a8e) (Client Quit)
[22:37:13] <mooff> iterating may skip elements if yer deleting as you go :)
[22:43:50] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[22:45:48] <mara> i'm aware, that's why i'm not iterating over the object directly & the whole reason i'm dealing with these arcane ways of doing things :p
[22:46:36] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[22:48:01] * mooff crawls back to his cave :P
[22:48:27] *** Quits: oxfuxxx (~oxfuxxx@193.9.112.238) (Ping timeout: 252 seconds)
[22:53:14] <mara> heh
[22:56:18] *** Joins: oxfuxxx (~oxfuxxx@193.9.112.238)
[22:57:44] *** Joins: hanzo (uid532183@user/hanzo)
[22:59:29] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:00:29] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[23:04:51] <adam12> nakilon: added ferrum.
[23:07:29] *** Quits: impermanence (~impermane@50.sub-174-199-97.myvzw.com) (Quit: Connection closed)
[23:17:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:20:21] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:23:41] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[23:24:17] *** Joins: graywolf (~wolf@user/graywolf)
[23:25:50] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Client Quit)
