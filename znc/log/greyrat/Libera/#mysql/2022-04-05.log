[00:01:50] *** Quits: autodev_ (~autodev@097-105-230-074.biz.spectrum.com) (Remote host closed the connection)
[00:02:55] *** Joins: autodev (~autodev@097-105-230-074.biz.spectrum.com)
[00:16:47] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[00:20:43] *** Parts: podeni (~podeni@188.27.130.66) ()
[00:39:01] *** Quits: autodev (~autodev@097-105-230-074.biz.spectrum.com) ()
[00:49:10] *** Quits: PTNapivoski (~PTNapivos@179.189.133.33) (Quit: Leaving)
[01:01:43] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Changing host)
[01:01:43] *** Joins: yano (~yano@ircpuzzles///////////somanyslashes)
[01:01:50] *** Quits: yano (~yano@ircpuzzles///////////somanyslashes) (Changing host)
[01:01:50] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[01:05:45] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[01:09:12] *** Joins: sfdebug7 (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa)
[01:09:36] *** Parts: sfdebug7 (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa) ()
[01:10:14] *** Joins: sfdebug59 (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa)
[01:10:55] *** Quits: sfdebug59 (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa) (Client Quit)
[01:11:16] *** Joins: sfdebug (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa)
[01:11:28] <sfdebug> hi
[01:11:31] <sfdebug> i've a PHP code that runs a "start transaction", after that it runs a "select * from queue where status = 0 and id = id order by created, id asc limit 1 for update skip locked" and right after that i've a "update queue set status = 1 where id='{$queue->id}' and created = '{$queue->created}" (that is, i update the register i got with status = 1) and
[01:11:32] <sfdebug> right after that i've a "commit".
[01:11:43] <sfdebug> the "queue" table has only three fields: id, status and created. the three fields are primary key.
[01:11:51] <sfdebug> the problem is when running too many requests to this chunck of code generate many deadlocks telling me: <<update queue set status = 1 where id='xyz' and created = '2022-03-31 21:00:27'>> ; Error message: <<Deadlock found when trying to get lock; try restarting transaction>> ; Error code: <<1213>>
[01:11:57] <sfdebug> i'm running MySQL 8.0.28 with InnoDB. i've been trying to search for some way to solve it but couldn't until now. any idea what i could do to solve it?
[01:19:35] *** Quits: CoreISP (~LvH@simplemachines/serverteam/CoreISP) (Quit: ZNC - https://znc.in)
[01:20:46] *** Joins: CoreISP (~LvH@simplemachines/serverteam/CoreISP)
[01:25:59] *** Joins: TrippyJ (~TrippyJ@045-003-194-158.biz.spectrum.com)
[01:32:25] *** Quits: TrippyJ (~TrippyJ@045-003-194-158.biz.spectrum.com) (Quit: Connection closed)
[02:10:42] *** Quits: magga (magga@ti0036a400-3577.bb.online.no) (Remote host closed the connection)
[02:12:50] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:35:04] *** Quits: [sr]|2 (~kvirc@pal-213-228-163-73.netvisao.pt) (Read error: Connection reset by peer)
[02:35:59] *** Joins: [sr] (~kvirc@pal-213-228-163-73.netvisao.pt)
[02:52:21] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[02:55:02] <thumbs> sfdebug: using MySQL as a queue is a bad idea, to start.
[02:58:06] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[03:06:08] *** Joins: w_lehinsun (~lehinsun@188.113.178.220)
[03:07:15] *** Quits: sfdebug (~sfdebug@2804:14d:7e89:45e1:a487:bb5:376b:2faa) (Quit: Client closed)
[04:09:11] *** Quits: stutz (~stutz@user/stutz) (Ping timeout: 252 seconds)
[04:13:59] *** Joins: stutz (~stutz@p200300e88f14220000000000000004cf.dip0.t-ipconnect.de)
[04:13:59] *** Quits: stutz (~stutz@p200300e88f14220000000000000004cf.dip0.t-ipconnect.de) (Changing host)
[04:13:59] *** Joins: stutz (~stutz@user/stutz)
[04:28:47] <doug16k> skip locked? you update it even if you didn't lock it?
[04:36:13] <doug16k> ah you look at the rows of the select to get id
[04:37:33] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Ping timeout: 256 seconds)
[04:37:39] *** Joins: cryocaustik4 (~cryocaust@user/cryocaustik)
[04:37:44] *** Joins: [sr]|2 (~kvirc@pal-213-228-163-73.netvisao.pt)
[04:37:51] *** Joins: devhen6 (~devhen@irc.devhen.org)
[04:37:59] *** Joins: jancoow9 (~jancoow@user/jancoow)
[04:38:10] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Read error: Connection reset by peer)
[04:38:14] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Read error: Connection reset by peer)
[04:38:14] *** cryocaustik4 is now known as cryocaustik
[04:38:16] *** Quits: Kilroy (Kilroy@user/Kilroy) (Read error: Connection reset by peer)
[04:38:23] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[04:38:30] *** Joins: Kilroy (Kilroy@user/Kilroy)
[04:38:41] *** Quits: gdarko (~me@dg.mk) (Ping timeout: 256 seconds)
[04:39:07] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[04:39:15] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 256 seconds)
[04:39:15] *** Quits: Alexer (~alexer@alexer.net) (Ping timeout: 256 seconds)
[04:39:15] *** jancoow9 is now known as jancoow
[04:39:49] *** Quits: devhen (~devhen@irc.devhen.org) (Ping timeout: 256 seconds)
[04:39:49] *** devhen6 is now known as devhen
[04:39:50] *** Joins: Alexer (~alexer@alexer.net)
[04:40:00] <doug16k> sfields_, performance schema data_locks table might help
[04:40:03] *** Joins: wolfshappen (~waff@irc.furworks.de)
[04:40:23] *** Quits: [sr] (~kvirc@pal-213-228-163-73.netvisao.pt) (Ping timeout: 256 seconds)
[04:40:24] *** Joins: gdarko (~me@dg.mk)
[04:41:52] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[04:42:05] <doug16k> sfields_, autocommit is definitely off, right?
[04:42:27] <thumbs> doug16k: not the same user
[04:42:39] *** Quits: dslegends (~dslegends@user/dslegends) (Ping timeout: 256 seconds)
[04:42:39] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (Ping timeout: 256 seconds)
[04:42:50] <doug16k> thanks. oops, I meant sfdebug, and they are gone apparently
[04:43:13] *** Quits: mungustas (~arnas@92.61.33.111) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: gastus (~gastus@mawercer.de) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: sjas (~sjas@irc.sjas.de) (Ping timeout: 256 seconds)
[04:43:13] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[04:43:20] *** Joins: mungustas (~arnas@92.61.33.111)
[04:43:27] <thumbs> doug16k: they'll start flapping in and out over and over soon
[04:43:30] *** Joins: dslegends (~dslegends@user/dslegends)
[04:43:47] *** Quits: yang (~yang@fsf/member/yang) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Slartiba1t (~user@c-4dece655.217486-0-69706f6e6c79.bbcust.telenor.se) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: ss23 (~ss23@irc.ss23.geek.nz) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Doc_X (~Doc_X@186.219.232.35.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: rick123 (~rick123@157.245.192.96) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: percY- (~percY@138.68.239.19) (Ping timeout: 256 seconds)
[04:44:15] *** Joins: percY- (~percY@138.68.239.19)
[04:44:28] *** Joins: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[04:45:02] *** Joins: gastus (~gastus@mawercer.de)
[04:45:20] *** Joins: ss23 (~ss23@irc.ss23.geek.nz)
[04:45:23] *** Joins: yang (~yang@fsf/member/yang)
[04:45:25] *** Joins: rick123 (~rick123@157.245.192.96)
[04:45:27] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[04:45:36] *** Joins: Slartibart (~user@c-4dece655.217486-0-69706f6e6c79.bbcust.telenor.se)
[04:45:44] *** Joins: Doc_X (~Doc_X@186.219.232.35.bc.googleusercontent.com)
[04:45:53] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[04:47:32] *** Joins: jayray (~jayray@user/jayray)
[04:54:29] *** Quits: hinderaker (hinderaker@user/hinderaker) (Ping timeout: 250 seconds)
[04:55:53] *** Joins: sjas (~sjas@irc.sjas.de)
[05:18:35] *** Joins: hinderaker (hinderaker@user/hinderaker)
[05:23:57] *** Quits: relight (~relight@user/relight) (Ping timeout: 250 seconds)
[05:24:12] *** Joins: relight (~relight@user/relight)
[06:30:02] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[06:30:26] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[06:37:48] *** Joins: first1 (~last1@109.100.153.87)
[06:39:23] *** Quits: last1 (~last1@109.100.153.87) (Ping timeout: 256 seconds)
[06:40:04] *** Joins: renihs_ (~renihs@89.58.15.194)
[06:40:13] *** Joins: Mmike_ (~mario@li1411-253.members.linode.com)
[06:40:22] *** Joins: DCTWD- (~dc@uz.utmappro.com)
[06:40:31] *** Quits: renihs (~renihs@89.58.15.194) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: void09 (~void@150.230.21.57) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: DCTWD (~dc@uz.utmappro.com) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Mmike (~mario@user/mmike) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[06:41:44] *** Joins: void09 (~void@150.230.21.57)
[06:42:58] *** Joins: klys (~mdasoh@show.op8.us)
[06:47:35] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Ping timeout: 240 seconds)
[07:31:08] *** Quits: Vacuity (~Vacuity@user/vovo) (Ping timeout: 246 seconds)
[07:32:54] *** Joins: Vacuity (~Vacuity@user/vovo)
[08:00:44] *** Quits: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Ping timeout: 272 seconds)
[08:23:10] *** Joins: gde33 (~gde33@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[10:14:36] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[10:20:14] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[10:32:25] *** Quits: w_lehinsun (~lehinsun@188.113.178.220) (Quit: Leaving)
[10:36:15] *** Quits: t2mkn (~t2mkn@user/t2mkn) (Ping timeout: 256 seconds)
[10:37:41] *** Joins: t2mkn (~t2mkn@user/t2mkn)
[10:56:44] *** Quits: nickodd (~nickodd@user/nickodd) (Ping timeout: 252 seconds)
[10:57:45] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[10:59:17] *** Joins: nickodd (~nickodd@user/nickodd)
[11:05:39] *** Joins: palasso (~palasso@user/palasso)
[11:11:03] *** Quits: tercaL (~tercaL@user/tercal) (Quit: enter the Tekken!)
[11:18:01] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[11:26:33] *** Quits: Forza (~Forza@user/forza) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:31:16] *** Joins: Forza (~Forza@user/forza)
[11:57:25] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[12:34:35] *** Joins: Woet_ (~me@irc.woet.me)
[12:34:41] *** Quits: Woet (~me@irc.woet.me) (Ping timeout: 256 seconds)
[12:35:15] *** Quits: Timvde (~tim@towely.vdeynde.com) (Ping timeout: 256 seconds)
[12:45:40] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[12:47:49] *** Joins: Timvde (~tim@towely.vdeynde.com)
[13:20:54] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[13:21:56] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[14:10:20] *** Joins: stark95 (~stark@103.251.143.18)
[14:19:49] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:19:59] *** Joins: arekm (~arekm@pld-linux/developer/arekm)
[14:21:03] <arekm> hi, is it ok to change ft_min_word_len without rebuilding indexes? (so only newly created indexes will use new value while old ones will still work but with old min)
[14:21:38] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[14:41:22] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:41:51] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[15:40:26] <Isotopp> sfields_: https://blog.koehntopp.info/2021/07/13/mysql-a-job-queue-in-python.html
[15:44:36] *** Quits: zoraj (~zoraj@vmi794994.contaboserver.net) (Read error: Connection reset by peer)
[15:48:16] *** Joins: zoraj (~zoraj@vmi794994.contaboserver.net)
[16:13:45] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[16:14:10] *** Joins: wolfshappen (~waff@irc.furworks.de)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:57] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:46:06] *** Quits: lacrymology (~lacrymolo@5.225.79.114) (Quit: Lost terminal)
[17:32:04] *** Quits: [sr]|2 (~kvirc@pal-213-228-163-73.netvisao.pt) (Read error: Connection reset by peer)
[17:33:09] *** Quits: stark95 (~stark@103.251.143.18) (Quit: Client closed)
[17:34:11] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 246 seconds)
[17:36:34] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[17:50:39] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[17:52:54] *** Joins: ueberall (ueberall_l@user/ueberall)
[18:07:09] *** Joins: DrowningElysium (uid190788@user/drowningelysium)
[18:14:01] *** Joins: TrippyJ (~TrippyJ@045-003-194-158.biz.spectrum.com)
[18:18:34] <TrippyJ> Hey everybody! I have a page/query that is fairly complex, and the first time it runs after an insert or update, it has to grab a lot of records and is kind of slow. When I refresh, obviously the query is cached and it works lightning fast. I used to cache the results of the page, but it results in stale data or some users having to wait.
[18:18:54] <TrippyJ> Is it feasible to have another script just run that page/query in the background somewhere to kind of pre-cache the page after an insert or update?
[18:19:06] <TrippyJ> Or is this a terrible design practice?
[18:20:06] <thumbs> Isotopp: wrong user again
[18:21:03] <lopid> the query's a SELECT?
[18:21:17] <Naktibalda> TrippyJ: implement caching in application code instead of relying on query cache
[18:21:46] <Naktibalda> but make it better than last time
[18:26:58] <TrippyJ> Hmm
[18:27:02] <TrippyJ> Yeah it is a SELECT
[18:27:27] <TrippyJ> Naktibalda, I think you are on to something
[18:28:07] <TrippyJ> I have a script that renders like, a byte-for-byte cache of the page, and I *could* refresh it every time an insert or update happens... but
[18:29:21] <TrippyJ> there are a lot of live controls and other things on there and they function kind of whacked out when cached, I would have to remove or otherwise change them...:(  Or find a kind of different way of caching it, which is why I was just trying to preemptively run the query
[18:30:03] <TrippyJ> But, you are also highlighting a problem with the approach I am taking, which I haven't discussed yet, that the query could maybe be vastly improved
[18:30:28] <TrippyJ> I tried to make a view, but realized view can't use indexes, so I thought about materializing the view
[18:30:59] <TrippyJ> Might just turn the whole thing to a search box and only pull relevant records
[18:34:24] <Naktibalda> you don't have to cache entire page as one item, you could cache part of it, or even cache query result and trigger cache refresh from code which inserts/updates relevant data.
[18:37:25] <TrippyJ> Yeah, I think that is what I am trying to do, like I am going to have a page that is *just* that query, and then run it in the background after an insert or an update, that way, a user isn't the one waiting 1-2 seconds for it to run
[18:37:46] <TrippyJ> Doesn't MySQL have a way to do this internally, though?
[18:38:11] <Naktibalda> no, even query cache that you are currently using, was removed in 8.0
[18:38:23] <TrippyJ> Sorry if I sound stupid as heck right now, but I could have sworn there were functions or something (I can't remember the syntax to look it up) where you could trigger a query or something, database-wide, after certain triggers
[18:39:02] <TrippyJ> Ah crap
[18:39:27] <TrippyJ> So what is the alternative then for query cache that you would recommend? I would rather future-proof this than lock my projects on < 8.0
[18:42:44] <TrippyJ> Also
[18:43:00] <TrippyJ> Utilizing a stored function means the query can't cache, so I doubt I could store a function to cache the query...
[18:48:59] <TrippyJ> Maybe I just need to optimize this query some
[19:02:42] <Isotopp> TrippyJ: the query cache was found to be no longer efficient in mysql, so in mysql 8 it does not exist
[19:03:01] <Isotopp> that means you need to make your own caching, or you need to make the query fast all the time so you do not need caching
[19:03:34] <Isotopp> caching is mostly the problem of making a function idempotent, deterministic. for the same set of parameters the query must always return the same result
[19:03:45] <Isotopp> caching errors are mostly failure to identify all parameters to a function
[19:03:58] <Isotopp> people then work around that with cache timeouts, but that is just giving up
[19:22:48] *** Joins: sfdebug (~sfdebug@2804:14d:7e89:45e1:883e:31ce:1642:e5c1)
[19:33:18] <TrippyJ> https://pst.klgrth.io/paste/evhenopou8ghjvbvnpsou4qt
[19:34:23] <TrippyJ> This is the offending query, btw, I did an EXPLAIN on it, and for appset and adminDispo tables, the type is set to ALL and then possile_keys, key, and ref are all NULL - it also pulls 2k+ rows from appset, 2k+ rows from adminDispo, and then just one from schedule.
[19:35:11] <TrippyJ> Maybe I'm just tripping and the query really isn't that slow
[19:35:22] <TrippyJ> (0.0180 seconds.)
[19:35:39] <Isotopp> LEFT JOIN is a thing that proscribes join order, so the optimizer can not reorder things
[19:35:51] <Isotopp> it is dependent on the join order as written.
[19:36:02] <Isotopp> so basically it is "can use an index" or "can't use an index"
[19:36:40] <Isotopp> you search for NULL values, so an index on appset.invis, if it exists, cannot be used
[19:36:59] <Isotopp> we are looking as a scan of appset, and then maybe indexed joins for the two side tables
[19:37:06] <TrippyJ> The only columns I have indexed are the primary key ID
[19:37:29] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[19:37:41] <TrippyJ> (on those tables)
[19:37:56] <TrippyJ> Would indexing any other columns optimize it? Obviously not the NULL column
[19:38:03] <Isotopp> appset.id must be index. adminDispo.scheduleID must be indexed.
[19:38:13] <Isotopp> schedule.id must be indexed.
[19:38:16] <Naktibalda> TrippyJ: do you really need that much data for your page?
[19:38:27] <Naktibalda> !t TrippyJ idfk
[19:38:27] <ubiquity_bot> TrippyJ: Please paste your query, the EXPLAIN select.., and the relevant SHOW CREATE TABLE/s in one pastebin with the sql formatted so it is readable
[19:38:29] <Isotopp> consider not having NULL values in appset.invis and an index on appset.invis
[19:39:19] <Naktibalda> 0.01s response is certainly from cache
[19:39:33] <TrippyJ> Naktibalda: Your solution is where I am heading. The normal display is by date only, or a specific search, but I wanted a more expansive view (for all results). The original view that was causing me issues was limited to 250 results and still behaved kind of slow.
[19:39:53] <Isotopp> human reaction time is 0.2s.
[19:40:42] <TrippyJ>  (2449 total, Query took 0.0028 seconds.)
[19:40:45] <Naktibalda> only the first table in execution plan should have type=AL
[19:40:45] <TrippyJ> That is when it comes from cache
[19:40:46] <Naktibalda> ALL
[19:41:36] <TrippyJ> Sorry I am n00b, but I have no idea what that ALL even means or how to change it. Got a link?
[19:41:56] <Naktibalda> I have a feeling that you are joining on wrong field here: LEFT JOIN adminDispo ON appset.id = adminDispo.scheduleID
[19:41:58] <Isotopp> https://www.slideshare.net/isotopp/explaining-explain
[19:42:04] <Isotopp> ^^ what all means
[19:43:09] <Naktibalda> make sure that you query returns correct result before optimizing it
[19:47:57] <TrippyJ> I am going through those slides now - but also, Naktibalda, it is the correct field - long and complicated explanation about the way the legacy system was designed. It definitely works. Just slower than I'd like for 250 results and up.
[19:48:52] <Naktibalda> when you have optimization question always share execution plan and CREATE TABLE statements of all tables
[19:49:06] <Naktibalda> otherwise you will get generic advice
[19:50:03] <Naktibalda> either adminDispo.scheduleID has no index or its type doesn't match the type of appset.id
[19:59:43] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Quit: Take my advice. I don't use it anyway)
[20:00:48] <TrippyJ> Dang:(  Naktibalda was right haha. I got a slight gain out of indexing that column (AFAIK)
[20:03:43] <TrippyJ> I am debating removing all null values and defaulting them to zero if it might improve the indexing or speed of the query
[20:41:02] *** Joins: PTNapivoski (~PTNapivos@2804:60:12e:bc00:d4d1:579c:eb46:4cfa)
[20:43:54] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 272 seconds)
[20:46:27] *** Quits: Kuraokami (unit193@libera/staff/unit193) (Ping timeout: 272 seconds)
[20:49:14] <lopid> i've a 14k rows mariadb 10.7 table, primary key on id. `DELETE FROM t1 WHERE id [non-existent id]` takes 0.4s. i copy the table (CREATE TABLE t2 LIKE t1; INSERT-SELECT…). the same delete takes 0.001s. how can i make t1 as fast as t2? ANALYZEing it didn't help
[20:49:29] <lopid> missing an = there
[20:50:22] <lopid> innodb
[20:55:14] <thumbs> can you share the EXPLAIN output?
[20:57:30] <lopid> i'm behind citrix so can only screenshot :(  https://imgur.com/a/o6kif2i
[21:02:56] <thumbs> hrm, that is odd
[21:03:07] <thumbs> any locks? Check the innodb status.
[21:04:49] <lopid> no, everything there looks fine
[21:04:58] *** Quits: wolfshappen (~waff@irc.furworks.de) (Read error: Connection reset by peer)
[21:05:59] <lopid> the table originally came from an xtrabackup backup, if that matters
[21:11:12] *** Quits: sfdebug (~sfdebug@2804:14d:7e89:45e1:883e:31ce:1642:e5c1) (Ping timeout: 250 seconds)
[21:18:09] *** Joins: Kuraokami (~unit193@libera/staff/unit193)
[21:46:29] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:51:58] *** Quits: sfields_ (~sfields@2605:a601:adea:7a00:b0f3:92c0:5031:4a99) (Read error: Connection reset by peer)
[21:59:40] *** Joins: TheDoudou (~TheDoudou@cust-136-201-109-94.dyn.as47377.net)
[22:02:49] *** Joins: mthall_ (~quassel@mail.thalliman.com)
[22:03:04] *** Quits: mthall (~quassel@mail.thalliman.com) (Ping timeout: 272 seconds)
[22:10:23] *** Quits: doug16k (~doug16k@172-97-188-4.cpe.distributel.net) (Remote host closed the connection)
[22:26:58] *** Joins: doug16k (~doug16k@172-97-188-4.cpe.distributel.net)
[22:33:17] *** Joins: jimender2 (~jimender2@rrcs-74-219-185-234.central.biz.rr.com)
[22:33:47] *** Quits: Kuraokami (~unit193@libera/staff/unit193) (Ping timeout: 246 seconds)
[22:33:56] *** Quits: jimender2 (~jimender2@rrcs-74-219-185-234.central.biz.rr.com) (Client Quit)
[22:34:43] <doug16k> lopid, what if you execute that twice. does the second time take the full time again?
[22:35:36] <doug16k> storage that is close to failing can take extra long to complete I/O
[22:36:11] <doug16k> curious if it is suddenly not slow after you touch it once
[22:38:35] <doug16k> if you optimize table it should move it all to different blocks when it recreates the whole thing and drops the old one
[22:38:55] <doug16k> if that fixed anything, I'd be afraid
[22:41:01] *** Joins: Kuraokami (unit193@libera/staff/unit193)
[22:41:07] *** Joins: jayray (~jayray@user/jayray)
[22:41:20] *** Quits: TheDoudou (~TheDoudou@cust-136-201-109-94.dyn.as47377.net) (Ping timeout: 250 seconds)
[22:46:24] <doug16k> some non-enterprise storage firmware will defer relocating a block that is barely ECC correctable until a write to that block occurs
[22:48:52] <doug16k> enterprise drives gently do 24/7 surface scan trying to find one that is hard to correct, so it can proactively reloate it
[22:54:47] <doug16k> there would be no legal system if people were enterprise drives. the moment they committed a crime they would go and put themselves in jail
[22:57:23] <doug16k> maximum sentence, just to make sure
[22:58:42] *** Joins: wolfshappen (~waff@irc.furworks.de)
[23:06:14] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
