[00:01:29] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:02:25] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[00:05:16] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[00:06:07] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:06:52] <drakonis> phoe: that's a post.
[00:07:03] <drakonis> i've read the whole thing and it is on point
[00:07:07] <phoe> drakonis: that's a mother fathering wall of text, not a post
[00:07:10] <phoe> oh
[00:07:11] <phoe> thank you
[00:07:39] <drakonis> you should post it to HN tho
[00:07:52] <drakonis> that's how you get attention to your post
[00:07:55] <phoe> not really
[00:08:03] <phoe> it's kinda CL-related
[00:08:22] <phoe> I have no idea if it's meant for general audiences
[00:08:33] <drakonis> HN worships lisp posts
[00:09:03] <phoe> I don't care about worship wrt this post
[00:09:15] <phoe> I care about helping solve a problem that's akin to a ticking bomb
[00:09:23] <drakonis> i see
[00:09:30] <drakonis> agreed there
[00:09:41] <phoe> so, now that it is posted to /r/Common_Lisp and asdf-devel and #lisp and #lispcafe
[00:09:44] <phoe> that's all
[00:09:48] <phoe> if it ends up on HN, well, shit happens
[00:09:55] <phoe> can't forbid people from doing this
[00:09:56] <drakonis> i'm very new to the community but yet i feel that it is v. stagnant in several ways
[00:10:14] <phoe> it has both upsides and downsides, certainly
[00:10:22] <phoe> as dutifully noted in the post
[00:11:11] <drakonis> yes.
[00:12:27] <drakonis> https://neil.computer/notes/introducing-berkeley-mono/
[00:12:28] -ixelp- Introducing Berkeley Mono
[00:13:03] <hayley> Not interested, Computer Modern Typewriter Text already exists
[00:13:17] <drakonis> i could certainly do without ansi cl being the holy immutable writ
[00:14:18] <drakonis> i'm aware of the section regarding the ecosystem itself and the mudball of libraries that have arisen since ansi cl
[00:14:51] <drakonis> backwards compat...
[00:15:28] <drakonis> i really have nothing i could ask or discuss that the post doesnt already cover
[00:16:45] <moon-child> even if I wanted a ```modern''' non-knuth-designed font, I would use dejavu sans mono
[00:17:34] <shka> i have a personal favorite latex font
[00:17:48] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:48a1:2952:eb54:dbd1)
[00:18:15] <drakonis> that font looks like it belongs in a e-reader
[00:18:43] <drakonis> also how complicated is it to modernize CL?
[00:19:47] <drakonis> that and avoiding getting snobbed by people that already like CL as it is and accepts no substitutes?
[00:20:47] <shka> https://tug.org/FontCatalogue/iwona/ <- this one 
[00:20:47] -ixelp- The LaTeX Font Catalogue – Iwona
[00:20:48] * hayley snobs drakonis
[00:21:05] <drakonis> psh.
[00:21:33] <shka> drakonis: simply write libraries, you are getting the most from libraries
[00:21:45] <moon-child> drakonis: it is my regret I must inform you that you are in a channel of snobs who already like CL as it is and accept no substitutes
[00:21:56] <shka> and almost everything in cl can be a library 
[00:22:24] <moon-child> drakonis: that said, see cl21
[00:23:14] <hayley> Ah yes, the library that removes ROOM
[00:23:24] <drakonis> get a ROOM
[00:23:25] <moon-child> can't have shit in cl21
[00:23:47] <moon-child> (did they really lol)
[00:24:00] <shka> anyway, what was personally annoying for me is lack of containers and iterators
[00:24:03] <shka> so i made those 
[00:24:08] <hayley> " Delete 'ed', 'room' and 'dribble' because they look useless. " u wot m8
[00:24:09] <shka> and it is fine
[00:24:11] <hayley> https://github.com/cl21/cl21/commit/4bb691ce8efa2d22924ec44f2eb5f487daa09d0c
[00:24:11] -ixelp- Delete 'ed', 'room' and 'dribble' because they look useless. · cl21/cl21@4bb691c · GitHub
[00:24:53] <drakonis> https://www.reddit.com/r/MadeMeSmile/comments/s8lik9/the_best_mom_with_the_best_son/ this is fun
[00:24:59] <drakonis> also fuck reddit for making it hard to link to videos
[00:25:26] <drakonis> ya wot m8
[00:25:47] <moon-child> they also got rid of prog2 apparently
[00:25:52] <shka> drakonis: so anyway, i recommend to simply identify what you personally need in cl and do that
[00:25:58] <shka> and don't make it grandiose 
[00:26:06] <hayley> "Incredibly dismal, pathetic library"
[00:26:14] <hayley> https://www.youtube.com/watch?v=eG_YZsc2b9M
[00:26:15] -ixelp- Robert Fripp - Hååden Two - YouTube
[00:26:25] <semz> The thing about "modernizing" is that it doesn't really convey any information. What is modernizing CL?
[00:26:52] <moon-child> all programming languages post-1950 are postmodern, not modern
[00:28:04] <drakonis> hmm, modernizing would be getting rid of the weird edge cases accumulated from converging multiple lisp implementations into a single one and build up where ansi cl didnt have time to finish
[00:28:32] <semz> that's similarly vague
[00:29:00] * hayley still has to think of an answer to "Can I ask what is your interest in compilers?"
[00:29:14] <Catie> "lots"?
[00:29:16] <hayley> Common Lisp and regex compilers, I guess?
[00:29:46] <semz> I ask this because a lot of the time, "modernizing CL" seems to reduce to "I don't like these function names and also regex in the stdlib wud b kool"
[00:30:10] <hayley> https://msrc-blog.microsoft.com/2022/01/20/an_armful_of_cheris/ but why, we have Lisp machines already
[00:30:13] -ixelp- An Armful of CHERIs – Microsoft Security Response Center
[00:33:23] <drakonis> ha, but no.
[00:33:47] <hayley> https://twitter.com/swolecialism/status/1483959096168660998 AK rail scope guide
[00:34:34] <drakonis> the only things i'd have changed is making boolean false separate from empty lists and improve generics
[00:36:38] <drakonis> that and making the functions consistent
[00:36:46] <moon-child> former is a nonstarter.  It is _common_ lisp; the point is to be compatible.  How would you improve generics?
[00:38:07] <drakonis> make more of CL use it i suppose?
[00:38:16] <drakonis> more of CLOS
[00:38:28] <drakonis> oops this is confusing
[00:39:46] <moon-child> you mean like generic-cl?
[00:40:05] <moon-child> neither of these seems like it's worth sacrificing compatibility for
[00:40:20] <selwyn> i am not afraid to be conservative when it comes to common lisp
[00:40:23] <moon-child> leaving completely aside the potential merits of the proposals in question
[00:40:54] <selwyn> if something looks confusing/wrong in the spec, it is safe to assume that the committee had their reasons and knew what they were doing at the time
[00:41:06] * hayley assumes she wrote an okay answer.
[00:41:23] <hayley> Global value numbering, runtime feedback for regular expressions, and compacting vs. non-moving GC.
[00:42:06] <selwyn> that sounds incredibly self-satisfied, but i believe it to be true for every significant issue worth bothering about
[00:42:36] <sm2n> selwyn: this has been my experience as well
[00:42:48] <moon-child> gc seems not much of a compiler issue
[00:42:56] <sm2n> There are still things that bug me though
[00:43:17] <selwyn> i can get over it looking old-fashioned and the presence of 'ed'
[00:43:26] <hayley> It's the CCC though, GC comes up.
[00:44:06] <sm2n> For ex. why is :adjustable not part of the vector typespec? (the easy answer is that it wouldn't make sense as a strict special case of multidimensional arrays then)
[00:44:37] <sm2n> But really I don't think anything in the spec is worth changing without writing an entirely new language
[00:44:45] <sm2n> I think CL is a local optima, pretty much
[00:44:50] <selwyn> yeah
[00:45:29] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:45:32] <sm2n> I do think conservative extensions to keep up to date with newer external systems and such is a good idea though
[00:45:47] <selwyn> it would
[00:45:49] <sm2n> But importantly that doesn't break the spec
[00:46:12] <moon-child> some discussion of this elsewhere.  yitzi was planning to do something
[00:49:23] <Alfr> selwyn, ^ ... like prog2, differs from prog1 that it ensures at least two forms are present and evaluated. I knew it! :D
[00:50:18] <semz> as funny as the prog2 thing is, it's just a bug in CLHS, not the standard
[00:50:41] <Alfr> semz, I still like it.
[00:51:09] <semz> I actually wonder how it got in there since a lot of CLHS is taken literally from the standard.
[00:51:21] <selwyn> pobody's nerfect
[00:51:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[00:51:30] <hayley> https://git.bsd.gay/closos/closos/
[00:51:31] -ixelp- closos/closos: A very gay operating system written in, but especially inspired by Common Lisp and its interactive enviro [...]
[00:51:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:51:48] <hayley> It went offline for a few days, and I thought my game was up.
[00:54:15] <Catie> Oh shit, we have Gay FreeBSD now?
[00:54:31] <shka> what makes OS gay?
[00:54:33] <hayley> Apparently.
[00:54:42] <semz> the chemicals in the upstream
[00:54:43] * hayley uploaded an image: (362KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/cdKPaLBgooIIcSTTkbWQpLdm/operating-system.png >
[00:54:45] <drakonis> lmao
[00:55:05] <hayley> shka: Marketing
[00:55:14] <selwyn> shka is concerned that it is unsuitable for poland
[00:55:34] <hayley> Not missing out on much.
[00:55:37] <shka> selwyn: i am concern that corporate "woknes" infects normal people 
[00:55:56] <selwyn> what is the most hetereosexual operating system?
[00:56:04] <hayley> GayBSD
[00:56:06] <shka> selwyn: none
[00:56:29] <hayley> Otherwise, all of them.
[00:56:39] <moon-child> freebsd was always gay
[00:56:47] <shka> seriously though, it annoys me 
[00:56:57] <Catie> I'm not sure I've ever known an operating system with a sexuality before now
[00:57:21] <shka> why the fuck everything is supposed to be associated with something else? 
[00:57:31] <hayley> As the description says, CLOSOS is very gay, whereas BSD is only normal gay.
[00:57:37] <selwyn> it was only a joke
[00:58:03] <shka> selwyn: yeah, but it reminds me of the modern marketing
[00:58:16] <hayley> Not dissimilar.
[00:58:23] <shka> "brand identity" and stuff
[00:58:27] <White_Flame> that's because modern marketing/sales/politics has normalized it
[00:58:39] <White_Flame> everythign is literally politically correct
[00:59:03] <shka> White_Flame: it is not "correctness" that triggers me
[00:59:09] <shka> it is the absurdity of it all
[00:59:15] <White_Flame> "politically correct" is _not_ "correct"
[00:59:21] <shka> take for instance coca-cola 
[00:59:27] <shka> they are selling sugary water
[00:59:31] <shka> that's it
[00:59:37] <White_Flame> (or high fructose corn syrupy water)
[00:59:53] <shka> and yet they have all this fucking marketing built on this to make seem grandiose 
[00:59:59] <White_Flame> right, and it's not "marketingly correct" to call it sugary water
[01:00:07] <White_Flame> which is the exact same mechanism
[01:00:17] <shka> White_Flame: but it IS sugary water
[01:00:30] <White_Flame> and that hurts sales, thus it is not "marketingly correct" to say it
[01:00:38] <shka> well, here you go
[01:00:40] <White_Flame> has nothing to do with actual correct/wrong statements
[01:00:44] <shka> and everything is like that
[01:00:48] <White_Flame> this is what the phrase has always meant
[01:01:00] <shka> 90% of why apple pisses me off
[01:01:07] <White_Flame> and yet it has become so normalized that people legimitately think that "politically correct" is a positive thing
[01:01:50] <White_Flame> the position of supporting political correctness is literally "lie to me, manipulate me, just don't tell me the truth"
[01:02:23] <White_Flame> obviously things like "gay OS" plays in some way against that
[01:02:26] <semz> I don't think people think "politically correct" is a positive thing. Those you'd call "politically correct" would consider that term a buzzword.
[01:02:44] <semz> Or did you mean the principle behind it
[01:02:51] <shka> i may be going insane, but i start to think that the unreal is the most real thing there is
[01:03:03] <White_Flame> I mean people who literally say "No, you need to be politically correct" in shooting down others
[01:03:05] <shka> this world is made of imagination and emotions
[01:03:26] <semz> okay I don't think I've heard that one before
[01:04:07] <White_Flame> the intentional subversion/appropriation of words really bothers me.  it's a disgusting tactic
[01:04:22] <White_Flame> since commuication is so fundamental
[01:04:54] <White_Flame> it also makes discourse incredibly shallow, as it diverts everything to vocabulary terms, and not actual meaning & sentiment
[01:04:55] <selwyn> for me the question is, why did the corporate world adopt the language of 2015 tumblr so easily
[01:05:30] <White_Flame> to my recollection, the reemergence of political correctness (which has been a term used well in the past, too) came about in like the late 80s to 90s
[01:05:54] <White_Flame> where there was a racial pushback against all the exotica exploitation of the prior decades
[01:06:23] <White_Flame> it started with politics, and quickly moved into sales
[01:06:32] <White_Flame> (both are marketing; selling people on product vs votes, not much difference)
[01:06:58] <White_Flame> (also, this is a USA-centric perspective, but its infections spread)
[01:07:24] <White_Flame> and of course, the racial pushback was a positive thing, but the response was politically correct lip service, not actual change
[01:07:47] <White_Flame> but that established a lot of the model going forward
[01:10:30] <shka> the most annoying part about that American racial thing
[01:11:14] <shka> is that it exists because some lazy fucks couldn't be bothered to pick their own cotton
[01:11:24] <easye> Geez.
[01:11:26] <shka> so they INVENTED concept of race
[01:11:35] <easye> Y'all just rantin', huh?
[01:11:37] <White_Flame> uh, I think that's quite a bit different than this issue
[01:11:39] <shka> YES
[01:11:42] <Catie> Land sakes alive
[01:11:59] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Quit: No Ping reply in 180 seconds.)
[01:12:06] <White_Flame> when I answer a question, I ANSWER ;)
[01:12:17] <shka> White_Flame: i mean, it just feels absurd, doesn't it?
[01:12:27] <White_Flame> that's because it is absurd
[01:12:42] <White_Flame> or equivalently, status quo for large human groups
[01:13:09] <selwyn> as rammstein once said, we all live in amerika
[01:13:15] <selwyn> means we inherit their cultural battles
[01:13:17] <White_Flame> amerika ist wunderbar
[01:13:23] <shka> something, something, not a love song
[01:13:38] <White_Flame> "I don't speak my native tongue"
[01:14:17] <White_Flame> but, these are all slow pendulum swings.  who knows where the next will go
[01:14:27] <Catie> I have to say, this is definitely not the discussion I meant to spark
[01:14:36] <shka> Catie: no worries
[01:14:42] <shka> Catie: it happens
[01:15:00] <shka> herding cats and the likes
[01:15:05] <Catie> Oh I ain't worried. Surprised, maybe, but not worried
[01:15:11] <shka> this channel is like that
[01:15:16] <White_Flame> Catie: I don't think you sparked it, I'm pretty sure hayley keeps that spark going ;)
[01:15:31] <Catie> For which, of course, I am very grateful
[01:17:10] <shka> what i would love to see is a more grounded thinking widespread
[01:17:58] <hayley> idk, some random gay person decided to call their project Gay BSD. So I uploaded the CLOSOS book, with misleading metadata to take the piss out of operating systems apparently having sexualities.
[01:18:16] <Catie> Yeah exactly, a public service
[01:18:40] <White_Flame> shka: I think that lack is a product, not a cause
[01:18:51] <White_Flame> hayley: yep
[01:19:42] <shka> my theory is that the core reason is assumption that human is a rational creature
[01:19:45] <shka> it is not
[01:19:58] <White_Flame> when everything is deferred to others, and demands cooperation of others, then there is no grounded thought, only fingerpointing
[01:20:08] <hayley> I think the name was a joke to start with, I just found it's a boring joke.
[01:20:09] <White_Flame> because it's all about groups' faults
[01:20:13] <shka> it has imagination, and even collective imagination
[01:20:23] <easye> eh rationality is certainly a construct.  I can see that in my justifications for my behavior.
[01:20:57] <hayley> Also check the profile picture for https://git.bsd.gay/closos
[01:20:57] -ixelp- closos - The Gayest Git in the Universe
[01:21:11] <shka> but by acknowledging that imagination even exists we can at least tame it
[01:21:18] <White_Flame> not a pony holding SICP?
[01:21:21] <Catie> Oh, I saw. No idea who that is though
[01:22:00] <White_Flame> easye: and rationality takes a lot of effort.  Self-justificiton/"rationalization" isn't actually rational
[01:22:05] <easye> BSD is probably historically the OS with the most openly gay contributors in its core.
[01:22:15] <easye> Certainly those in FreeBSD
[01:22:48] <White_Flame> the thing is, computer nerds and such aren't normal.  and the vector of non-normality points in all sorts of different directions
[01:23:40] <White_Flame> just as long as it's non-zero ;)
[01:23:53] <shka> i suspect that lispers score high on the anomaly scale
[01:23:55] <hayley> Catie: Dan Ingalls
[01:23:57] <easye> McKuskiak/Altman are a famous BSD pair to take perhaps the oldest example.
[01:24:58] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[01:25:28] * easye was blessed to have been on the pre-commercial NSF backbone for a decade.  Lots of free associations which I still treasure.
[01:25:32] <Catie> hayley: Ah, gotcha
[01:26:11] <easye> We were all white, perhaps, but we were definitely not "straight" (to date myself).
[01:26:23] <hayley> The joke is that he wrote an article called "Design Principles Behind Smalltalk", one of which is "An operating system is a collection of things that don't fit into a language. There shouldn't be one."
[01:27:36] <White_Flame> therefore, you started an OS project :-P
[01:27:43] <easye> Ah, USENET, wherefore have you foresaken us?
[01:27:49] <White_Flame> or does CLOSOS count as not an OS?
[01:28:31] <hayley> Hard to say. But CLOSOS moves more "operating system" features (I mostly think of how you enforce security) into "language" features.
[01:28:50] <moon-child> E!
[01:29:02] <phoe> Ni!
[01:29:20] <White_Flame> ə!
[01:29:26] <moon-child> (http://erights.org/  go object capabilities)
[01:29:26] -ixelp- Welcome to ERights.Org
[01:31:55] <White_Flame> have you used that much?
[01:32:18] <moon-child> no
[01:33:25] <hayley> https://blog.rust-lang.org/2022/01/20/cve-2022-21658.html TOC/TOU hours
[01:33:26] -ixelp- Security advisory for the standard library (CVE-2022-21658) | Rust Blog
[01:33:52] <hayley> "Note that the following targets don't have usable APIs to properly mitigate the attack, and are thus still vulnerable even with a patched toolchain: [...] REDOX"
[01:34:02] <easye> uh-oh: memo to the pointy heads: coding in Rust doesn't make it secure.
[01:34:47] * easye is actually acting as pointy-head these days, unfortunately.
[01:34:50] <phoe> the best solution to avoid reddit comments?
[01:35:02] <phoe> write a wall of text too big to be read
[01:35:05] <hayley> Seems like good timing, when we were just talking about capabilities. Though idk how those relate to filesystems exactly.
[01:35:51] <White_Flame> what's the difference between a filesystem and a binary array, in terms of object capabilities?
[01:35:58] <White_Flame> erm, s/filesystem/file/ I guess
[01:36:01] <easye> hayley: I would think there is a reasonble mapping from capabilities to filesytems if there is anything solid. Is this not hte case?
[01:36:03] <phoe> binary array?
[01:36:11] <White_Flame> array of bytes
[01:36:14] <hayley> Not much, but you reference files by strings and not capabilities.
[01:36:15] <phoe> oh
[01:36:31] <phoe> a filesystem is a structure, an usb array is flat
[01:36:43] <White_Flame> right, hence my regex
[01:36:58] <phoe> oh wait, a file
[01:37:15] <moon-child> hm, I think in a _distributed_ context (see e again), you might handle synchronization better because you have to
[01:37:18] <moon-child> this was a race condition
[01:37:25] <pl> moon-child: regarding more genericity - extensible sequences iirc showed how to do it in backwards compatible way 
[01:37:28] <White_Flame> filesystems exist to extract data _outside_ of your runtime system
[01:37:35] <phoe> White_Flame: a usb8 is the file *contents*, note that just an array gives you no metadata about the file itsel
[01:37:38] <phoe> f
[01:37:49] <phoe> so, no name, owner, group, permissions, flags, location, symlink status, all that jazz
[01:37:53] <White_Flame> as long as it's a "live object" of some form, it's intimately tied in with the system.  On a disk, it's dead bytes that can be moved around freely
[01:38:07] <White_Flame> s/system/runtime/
[01:38:25] <hayley> But I suspect you can't easily get a "better" capability by accident, whereas the user/permission model and the suid bit makes it hard not to accidentally get a better capability.
[01:38:30] <hayley> ...the former with pointers/objects.
[01:38:53] <moon-child> hayley: suid is obviously a misfeature, but for the purposes of something like this I don't think capabilities would help
[01:39:05] <moon-child> just imagine it's 'object you have a pointer to', not 'object you have permission to write to'
[01:40:05] <White_Flame> the filesystem service is a live object, which can grant access to blobs.  I think the permission/access model to the filesystem itself is a different ball of wax than the permissions to what the filesystem holds
[01:40:08] <easye> suid is useful. Auditing it is sometimes tough.  I often find myself segrating filesystems by suid capability for a given application.
[01:40:23] <hayley> IMO the issue is more that we already have a too-capable capability, and in a way we're "interpreting" how a less capable capability would work.
[01:40:28] <pl> easye: SUID is a very poor man's MAC with policy
[01:40:40] <easye> But then again I try to use ZFS which helps.
[01:40:41] <moon-child> ha!
[01:40:46] <moon-child> I guess one answer is: don't have symbolic links
[01:40:48] <moon-child> a
[01:40:51] <moon-child> symbolic link is a weak pointer
[01:41:01] <moon-child> prefer stronk pointers
[01:41:06] <White_Flame> no, because it doesn't clean itself up when the target gets "collected" :-P
[01:41:10] <pl> moon-child: TOMOYO/CCS worked pretty well with symlinks 
[01:41:17] <easye> pl: agreed, but unfortunately in the various "devops" configurations I need to manage.
[01:41:35] <easye> err "unfortunately unavoidable"
[01:41:44] <pl> easye: bring down the hell & fury of SELinux 
[01:42:02] <pl> (would suggest TOMOYO for being easier, but that would require custom kernel and that can be annoying to get)
[01:42:08] <easye> Eh.  I just try to get people to use nix.
[01:42:12] <White_Flame> (also why is SELinux a thing?  as far as I can tell, it's because the mainline kernel developers are performance fetishists)
[01:42:24] <moon-child> well, ok, sure.  I guess the term is not super well defined.  I mean that you can't have a weak pointer to an object you couldn't have had a strong pointer to
[01:42:38] <easye> I care that the build is reproducible (and referencable)
[01:43:30] <pl> White_Flame: SELinux is a thing because it solved a specific problem in ways compatible with client requirements
[01:43:36] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:43:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:45:03] <easye> If I got root via a drive-in, SELinux doesn't help, right?
[01:46:25] * easye doesn't know TOMOYO.
[01:46:50] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Client Quit)
[01:46:55] <moon-child> (I guess basically what hayley said about '"interpreting" how a less capable capability would work')
[01:47:09] <easye> Ah TOMOYO is a "MAC distribution for Linux".
[01:47:15] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:47:51] <pl> easye: define "drive-in"
[01:48:21] <pl> easye: also, when SELinux was first published, one of the main devs trolled the world by leaving a server with publicly known root password online and telling "come at me bro"
[01:48:29] <pl> (words might have been different)
[01:48:36] <easye> pl: "drive-in"  a user level exploit.  In contra-distinction to a "drive-by" which is a remote privilege escalation.
[01:49:10] <pl> Last time I bothered to check, nobody managed to do anything breaking despite having UID=0 on that server for years
[01:49:15] <phoe> drive-thru when
[01:49:27] <moon-child> I find that kinda hard to believe
[01:49:29] <easye> Alright.  Drive-thru might be better.
[01:49:31] <moon-child> lots of linux cves
[01:49:37] <hayley> https://www.youtube.com/watch?v=WABWNOEwC9A
[01:49:38] -ixelp- Drive-In Saturday (2013 Remaster) - YouTube
[01:49:52] <pl> moon-child: a lot of them only bother about getting EUID=0
[01:50:14] <pl> moon-child: to defeat the setup that was set back then, you had to acquire kernel arbitrary code execution
[01:50:19] * hayley is in coffee compiler club
[01:51:02] <pl> moon-child: a full strict deployment of detailed MAC system like SELinux or TOMOYO/CCS requires that you defeat that system, not just acquire root
[01:52:07] <pl> (of note: RHEL gives logged-in users SELinux type of "unconfined", which is essentially the same as disabled, so it doesn't count in terms of attacks if someone manages to log in)
[01:52:19] <hayley> Or: the program with suid itself is a new capability that an unprivileged program can access, but writing that suid-ed program correctly apparently is too hard.
[01:55:30] <easye> hayley: "too hard" as an empircal result or a theoretical one?
[01:55:50] <hayley> Empirical, with TOC/TOU bugs.
[01:55:58] <easye> ACK
[01:56:54] <hayley> I mean, I guess that having the kernel provide special "don't do it if this is a symlink" flags, rather than a transaction scheme, doesn't help. A bit like trying to make sense of an algorithm that uses compare-and-swap a lot.
[01:58:33] <easye> So, one could imagine a DSL with the right first class  primitives that encapsulates "too hard" in a more intelligblemnner.~.~.
[01:59:28] *** Quits: easye (~user@oxi.slack.net) (Remote host closed the connection)
[02:02:11] *** Joins: easye (~user@oxi.slack.net)
[02:02:23] <random-nick> hmm, so I read most of that gist about the "drama" and there's a thing I don't get: why are people treating warnings (especially style-warnings) as errors?
[02:03:19] <hayley> The convention is that, if your static analysis detects that something will always fail at runtime, then you signal a full WARNING. Not sure about STYLE-WARNING though.
[02:03:55] <sm2n> random-nick: because leaving warnings around is stinky
[02:03:59] <hayley> e.g. (defun f () y) may signal a warning as Y is a free variable.
[02:04:07] <White_Flame> QL muffles style warnings anyway :-P
[02:04:27] <random-nick> from the standard:  In general, the question of whether code is faulty or substandard is a subjective decision to be made by the facility processing that code. The intent is that whenever such a facility wishes to complain about code on such subjective grounds, it should use this condition type so that any clients who wish to redirect or muffle superfluous warnings can do so without risking that they will be redirecting or muffling other, more 
[02:04:27] <random-nick> serious warnings. 
[02:04:37] <random-nick> sorry for the long paste
[02:05:02] <random-nick> hayley: the standard requires that to be a STYLE-WARNING
[02:05:26] <hayley> scymtym told me otherwise.
[02:05:40] <sm2n> what if y is declared special afterwards?
[02:05:54] <sm2n> then y could be bound at runtime
[02:06:01] <hayley> "without risking that they will be redirecting or muffling other, more serious warnings" What's a serious warning then?
[02:07:03] <hayley> Sure. What about e.g. (loop for all I care) - that's not valid LOOP syntax and you can't fix it...SBCL signals a macro-expansion error actually. Hm.
[02:07:30] *** Quits: easye (~user@oxi.slack.net) (Ping timeout: 268 seconds)
[02:10:14] <scymtym> i think a "more serious warning" is (and warning (not style-warning))
[02:10:56] <scymtym> i'm not sure what the disagreement is
[02:10:58] <hayley> Thanks, but I meant "what would be _the use_ of signalling a serious WARNING then?"
[02:12:12] <hayley> IMO installing code that will always fail at runtime is probably a mistake, and thus should get a proper WARNING.
[02:12:59] <scymtym> same, that's what i meant by the initial statement. i said "convention" because i'm not sure that view if backed by the standard 
[02:13:19] *** Joins: easye (~user@oxi.slack.net)
[02:16:06] <random-nick> hayley: upon a close
[02:16:16] <random-nick> r reading of the standard, I'm not sure
[02:16:27] <hayley> .oO(Apparently people saying "gm" is a crypto/NFT thing now. But beach did it first by a long shot.)
[02:16:39] <scymtym> though "always" is difficult in this context if you consider that to mean "for every execution path" instead of "for some execution paths"
[02:16:51] <hayley> True.
[02:16:58] <sm2n> the beach Good morning everyone! vs the cryptobro gm!
[02:17:09] <sm2n> or rather
[02:17:32] <sm2n> the abbrev-user Good morning everyone! vs the abbrev-less gm!
[02:17:41] <easye> Pardon me for being dense, but "gm" in a crypto/NFT context means?
[02:17:47] <sm2n> good morning
[02:17:59] <hayley> "Good morning" methinks.
[02:18:00] <sm2n> it has become a dogwhistle of sorts
[02:18:10] <hayley> Nothing new, just that particular "phrasing" is common there.
[02:18:17] <random-nick> the standard says that STYLE-WARNING is for warnings concerning conforming code, but I'm not sure if a DEFUN which contains code which isn't conforming is considered conforming code
[02:18:25] <easye> Uggh.  "dog whistle" subtle huh?
[02:18:55] <random-nick> but the standard aside, it's still unclear to me why would someone consider a build with warnings to be a failed build
[02:18:57] <hayley> As much as typing "Good morning everyone!" exactly like that is a #lispcafe joke.
[02:19:06] <easye> random-nick: A topic to be taken up by WSCL?
[02:19:13] <hayley> There is -Werror on your favourite C compiler as well.
[02:20:02] * easye favorite C-compiler is CFFI.
[02:20:33] <random-nick> hayley: well in C it's not customary to build all of the dependencies along with your project
[02:21:04] <semz> From what I've seen -Werror is discouraged outside of development
[02:21:05] <scymtym> random-nick: conforming code may not do what the programmer intended and STYLE-WARNINGs can sometimes help to catch such instances like (let ((value …)) … (let ((vaule …)) (do-something-with value)))
[02:21:07] <semz> precisely because of this
[02:21:07] <easye> nix is the omega.
[02:24:05] <moon-child> scymtym: how would you expect a compiler to detect that such code was incorrect?
[02:24:36] <scymtym> moon-child: STYLE-WARNING for the unused variable
[02:24:45] <hayley> The inner VAULE is unused? 
[02:24:53] <moon-child> oh, right
[02:25:01] <moon-child> sure
[02:53:19] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:48a1:2952:eb54:dbd1) (Remote host closed the connection)
[02:55:38] *** Joins: notzmv (~zmv@user/notzmv)
[03:10:13] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[03:11:03] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[03:21:56] <moon-child> https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1  lol
[03:21:57] -ixelp- Structure and Interpretation of Computer Programs | The MIT Press
[03:22:16] <moon-child> I mean I guess it's not surprising considering mit also switched from scheme to python a while ago; still
[03:26:52] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[03:29:53] <sm2n> lol no read
[03:30:00] <semz> it hurts
[03:33:12] *** Joins: molson (~molson@2001:48f8:704a:123d::75f:1021)
[03:34:23] <hayley> https://www.youtube.com/watch?v=g3f9rbOEmps
[03:34:24] -ixelp- My Other Voice - YouTube
[03:39:51] <moon-child> man, it gets so bogged down with syntax.  And I don't think it even shows how to build a parser!
[03:45:26] <selwyn>  https://www.youtube.com/watch?v=X8LGvsq4uwU
[03:45:27] -ixelp- 200 Players Simulate Civilization on Minecraft Island - YouTube
[03:49:31] * hayley wants functional-but-in-place and a tracing GC.
[03:51:29] <selwyn> this is an incredible video
[03:54:02] <hayley> My best guess is that there is going to be linear functional stuff, but enough is non-linear. Perceus only uses a UNIQUE-P function, so a one bit reference count might work. Or, like Baker sorta did with stack allocation, I return the "is this object linear" flag as a (hidden) return value. But that flag would only apply to the returned value, and not transitively reachable objects, whereas RC would have each object have its own bit.
[03:54:19] <moon-child> hayley: 'mutation is an implementation issue, not a language issue'
[03:54:24] <hayley> Another option is to do fusion, of course.
[03:54:57] <hayley> moon-child: Koka has mutation though. 🎉
[03:58:24] <hayley> ...but then how common is the case where some object is linear, but it points to a non-linear object, or vice versa? I guess it might happen with the innards of persistent map structures.
[04:00:14] <hayley> We can't handle linear -> non-linear transitions though, as we'd need to update the one object pointing to the object that is transitioning, to make that "non-linear" too. So we're back to static analysis.
[04:01:26] <hayley> But in the case of (map f (map g x)) the analysis is obvious, and we can compile linear MAP.
[04:01:33] <moon-child> btw, fun hack: 'linear' as a supertype of 'unique' and 'shared'
[04:01:52] <moon-child> then you can be polymorphic
[04:02:41] <hayley> ...though, marking the "non-linear bit" is awfully like the snapshot-at-the-beginning "mark the overwritten object" barrier. Completely useless information, of course.
[04:03:17] <hayley> moon-child: "Linearity is an implementation issue, not a language issue"
[04:03:42] <moon-child> hm, in that case
[04:04:00] <moon-child> when you gc, and you move an object, you figure out who refers to it.  So you can update the linear bit then for free
[04:04:39] <hayley> Sure. But (I think) we have to detect non-linearity immediately. 
[04:05:30] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:05:39] <moon-child> another question: if you must check a linear bit before mutating, is it still worth it to mutate?  Allocation is cheap too
[04:05:55] <hayley> According to the Perceus paper, yes.
[04:05:57] <dave0> maw
[04:06:05] <moon-child> perceus uses reference counting, though
[04:06:10] <moon-child> so allocation is expensive
[04:06:13] <hayley> Sure.
[04:06:47] * hayley goes to build the least garbage collected system that requires garbage collection in practise due to semantics.
[04:06:49] <moon-child> bbiab groceries
[04:07:43] <moon-child> hayley: I was planning to do tracing gc in my apl, _only_ for bignums
[04:08:02] <hayley> Can still have better refcounting allocators, and hybrid copying (e.g. ulterior RC, RCImmix). Either I would have a one-bit refcount, or move around an auxiliary bit, either in the calling convention, or in the program counter.
[04:08:15] <hayley> (i.e. with specialised code for the latter)
[04:10:31] <hayley> And, can we put the bit in the reference, if there is only one reference to an object? Would require clearing a bit to dereference though. And I'd detect sharing in local variables statically, so that I only have to count references from the heap.
[04:18:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:23:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:27:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[04:42:45] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[04:50:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:51:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:08:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:08:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:10:51] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1024-static.midco.net)
[05:13:28] *** Quits: molson (~molson@2001:48f8:704a:123d::75f:1021) (Ping timeout: 250 seconds)
[05:26:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:26:37] *** Joins: dec0d3r_ (~dec0d3r@101.181.83.205)
[05:26:47] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[05:47:32] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Ping timeout: 240 seconds)
[05:47:52] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[06:11:02] <aeth> Top of HN right now: "Common Lisp ASDF maintainer considers resignation" https://news.ycombinator.com/item?id=30017919
[06:11:03] -ixelp- Common Lisp ASDF maintainer considers resignation | Hacker News
[06:45:42] <drakonis> oh, it finally leaked onto HN?
[06:59:15] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[07:02:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:03:08] <epony> that it hangs on 1 person?
[07:05:05] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[07:05:43] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[07:15:41] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:34:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[07:36:41] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[07:40:57] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 240 seconds)
[08:20:54] *** Joins: semz_ (~semz@user/semz)
[08:23:16] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:26:45] <contrapunctus> Is SICL pronounced "cycle" or "sickle"?
[08:28:02] <epony> s-I.C.L.
[08:28:17] <epony> s-(i can lithp)
[08:28:29] <epony> aeth..
[08:36:34] <dave0> oh wow is it a short or long `I`
[08:37:27] <aeth> contrapunctus: yes
[08:37:29] <aeth> dave0: yes
[08:37:47] <dave0> thanks that's cleared up everything!
[08:37:48] <contrapunctus> aeth: :|
[08:37:58] <dave0> your witness
[08:38:02] <aeth> but it's from France, so maybe it's see-kul
[08:38:15] <aeth> because in Romance languages (and you see that in a lot of English proper nouns, too), "i" is "ee" usually iirc
[08:38:26] <aeth> well, long i anyway
[08:41:29] <White_Flame> it's pronounced "scl", with a silent "i"
[08:42:19] <hayley> contrapunctus: I've heard (and read?) sickle.
[08:43:03] <hayley> https://dept-info.labri.fr/~strandh/format.lisp "The preliminary name for this project is SICL, which doesn't stand for anything in particular.  Pronounce it like "sickle"."
[08:44:39] <moon-child> 'SICL, which doesn't stand for anything in particular'  lies!
[08:45:02] <hayley> "anything in particular" would be AIP.
[08:45:28] <moon-child> would it?
[08:45:39] <moon-child> you are talking about english, the language where 'fish' may be spelt 'ghoti' at need
[08:45:57] <dave0> it's probably some guys name, some guy named sicl
[08:46:21] <hayley> https://en.wikipedia.org/wiki/Silicon_tetrachloride
[08:46:28] <moon-child> bob sicl, creator of the sicl lisp implementation.  I buy it
[08:46:38] <White_Flame> hayley: those quotes are non-canonical, the original author doesn't have control over it! /s
[08:46:44] <White_Flame> (but yeah, that's what happened to .gif, too)
[08:47:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[08:48:28] <moon-child> White_Flame: careful.  Death of the author would seek to destroy entirely the concept of canon; in saying that something is non-canonical, you implicitly aver that other things may be
[08:48:57] <White_Flame> something something ayn rand
[08:49:33] <moon-child> sshhhh
[08:51:29] <aeth> White_Flame: I mean, yes, but a better example is Linux
[08:52:25] <aeth> Linnuks, not Leenuks, no matter what Leenus (not Lynnus and definitely not Linnus) has to say.
[08:52:49] <moon-child> lie 'n us
[08:53:45] <aeth> yeah, it should be Liennuks/Lynnuks
[08:53:54] <White_Flame> Lin U S of A
[09:11:24] <hayley> https://www.youtube.com/watch?v=uuS_ZioCfDo
[09:11:24] -ixelp- MP3 Sunglasses. From 2004. - YouTube
[09:19:14] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Remote host closed the connection)
[09:19:36] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:21:46] <aeth> anyway, it's SICL for "sea kill" and it's designed to be deployed on warships
[09:23:43] <hayley> https://www.reddit.com/r/techsupportgore/comments/s5p69j/does_my_electric_stove_count_as_tech_gore_its/
[09:23:45] -ixelp- Does my electric stove count as tech gore? Its failure is quite shocking... : techsupportgore
[09:32:21] <mfiano> I know this is not really on-topic, even for #lispcafe, but if anyone has worked through mental health issues before directly, I want to talk to you in private. Don't worry, I'm okay for the most part. I'll take the first 2 people that have known me for a while to respond.
[09:33:54] <moon-child> mfiano: alas, I have yet to work through them...
[09:41:29] <hayley> https://www.youtube.com/watch?v=GKiLEgAzFDQ
[09:41:29] -ixelp- Us And Them - YouTube
[09:52:24] *** Joins: clintm (~user@98.20.67.102)
[10:03:20] <epony> SICL is pronounced Sys-eL
[10:04:43] <epony> LieUNIX is pronounced YouNichts.
[10:07:40] *** Quits: dec0d3r_ (~dec0d3r@101.181.83.205) (Quit: Leaving)
[10:19:51] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[10:24:37] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[10:27:44] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[10:27:57] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[10:40:17] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 240 seconds)
[10:56:15] *** Joins: notzmv (~zmv@user/notzmv)
[10:59:07] *** Joins: humasect (~humasect@d24-235-181-179.home1.cgocable.net)
[10:59:48] *** Quits: humasect (~humasect@d24-235-181-179.home1.cgocable.net) (Remote host closed the connection)
[11:00:44] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[11:00:56] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[11:01:28] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[11:02:09] <contrapunctus> aeth: I'm always confused by why people call it "lynn-us", when the man said he named it after himself, and his name is pronounced "lie-nus"
[11:06:49] * hayley reads "Turing machines are more physical than lambda calculus, and show off the limitations of physical computing". Have these people never tried to do any complicated maths on paper? Expressions can and do blow up to ugly sizes.
[11:07:23] <dave0> you can't measure `physical`
[11:07:47] <dave0> it is or it aint
[11:07:53] <hayley> And they mentioned parallel computers, which means I get to womansplain cache coherency, cache ping pong and all the wonders of shared state.
[11:09:58] <dave0> maybe he meant lambda calculus is more spiritual
[11:10:58] <hayley> They're probably right that it is easier to brainstorm a Turing machine (with finite tape, of course!) in hardware, compared to a lambda calculus machine. But for any practical machine, the difference disappears.
[11:11:49] <moon-child> lambda calculator!
[11:12:42] <hayley> https://www.reddit.com/r/socialistprogrammers/comments/s8bs5n/why_the_lambda_calculus_is_not_really_equivalent/htkm5el/?context=3
[11:12:43] -ixelp- Why the Lambda Calculus is not really equivalent to the Universal Computer : socialistprogrammers
[11:13:23] <hayley> "I think his point was to say that turning machines have real world application(von Neumann architecture) while lambda calculus has no such thing because it's an idealist abstraction as opposed to the materialist abstraction of the UTM." Fancy words, and it's spelt Turing, but I cannot imagine programming a Turing machine.
[11:14:03] <hayley> Positioning the head of a Turing machine is global, whereas lambda-abstraction encourages modularity. Didn't like making TMs in university.
[11:26:19] * hayley uploaded an image: (114KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RxQAGpVrtSUqPmuhBLolgjWh/lamport-is-dead-inside.jpeg >
[11:27:47] <ck_> phoe: there's an extra word in "and let to my heart have"
[11:28:04] <selwyn> i thought someone else named linux and not after him? or is that bullshit
[11:28:52] <hayley> I think that's right.
[11:29:01] <ck_> all I remember is a user group presentation or something that ended with ".. it doesn't matter what you call it as long as you just use it"
[11:32:43] <selwyn> say what you like about linus, he is a better manager than any of these bdfls
[11:33:23] <hayley> Honestly, I will probably become a crypto-bro if someone says "blockchains are centralised cause the nodes do the same thing" again.
[11:34:01] <hayley> Can't help but feel shat on when I designed a distributed system where nodes eventually come to the same results.
[11:35:42] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[11:43:23] <Duuqnd> Looks like my instance of Firefox that's been running for a few days just decided that loading new pages is optional
[11:44:58] <Duuqnd> At first I thought it was the network's fault (wouldn't be the first time it does something stupid) but apparently Firefox is just saying "no :)"
[11:45:42] <Duuqnd> And just like that all the pages loaded
[11:45:46] <Duuqnd> after like 20 minutes
[11:46:28] <Duuqnd> I guess Firefox is sentient now
[11:47:18] <phoe> ck_: thanks, fixed
[11:48:05] <hayley> https://www.youtube.com/watch?v=Sp4yf2ZwaWs
[11:48:06] -ixelp- Sweden (All Quiet on the Eastern Front) - YouTube
[11:51:05] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[12:31:58] *** Joins: shka (~herr@109.231.0.226)
[12:32:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[12:34:17] <selwyn> https://www.youtube.com/watch?v=NR3rK25u-EI
[12:34:18] -ixelp- 200 Players Build A MASSIVE Civilization in Minecraft - YouTube
[12:34:41] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[12:50:46] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[12:55:22] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Ping timeout: 256 seconds)
[12:57:57] <moon-child> (defun f (g) (lambda (x) (funcall g x)))
[12:59:11] <moon-child> in ^^, I wanna on-demand inline g into the lambda
[13:01:23] <moon-child> but generate new code for every instance.  So if you have (let ((x (f a)) (y (f b))) (loop repeat 1e9 do (funcall x) (funcall y))) you don't miss your inline cache every time.  Should not even need a guard, since you happen to know the closed-over g is never mutated
[13:01:26] <moon-child> does anyone do that?
[13:07:03] <pl> Hmm, OpenGenera finally gained block filesystem support back 
[13:07:15] <pl> Pity it's all in unreleased to public version 
[13:28:31] <shka> https://www.youtube.com/watch?v=gziZnhxcFrk wedge keyboard good
[13:28:32] -ixelp- Keymacs keyboard review (Matias Clicky) - YouTube
[13:38:51] <ck_> one..THOUSAND euros
[13:38:54] <ck_> hats off
[13:41:54] <Duuqnd> That's less than some hobbyist versions of Lispworks
[13:47:37] <contrapunctus> Imagine designing a keyboard around keychord usage, and not putting the modifier keys under the thumbs... 🤦‍♀️️
[13:48:02] <shka> contrapunctus: keychords under thumbs make 0 sense
[13:48:09] <shka> because you have just two thumbs
[13:48:26] <moon-child> shka: works pretty well for me
[13:48:32] <moon-child> I can press multiple keys at once
[13:48:47] <moon-child> and have _way_ more dexterity and strength in my thumbs than other fingers
[13:50:23] <contrapunctus> shka: I have Space acting as Control when held...the difference in required hand movement is not even funny. The thumbs are the strongest digits, the pinkies are the weakest... 😶️
[13:50:55] <moon-child> https://xkcd.com/1172/  this you?
[13:50:56] -ixelp- xkcd: Workflow
[13:51:12] <contrapunctus> (And that's in spite of me using modal editing...)
[13:51:13] <contrapunctus> moon-child: haha
[13:51:39] <contrapunctus> moon-child: this is me ;) https://tilde.team/~contrapunctus/blog/keyboard-machinations-kmonad.html
[13:51:40] -ixelp- Keyboard machinations with Kmonad
[13:51:55] <Duuqnd> tbh I just want nice a keyboard that isn't missing keys
[14:05:17] <ck_> what does that mean? :) are hyper, meta, circle triangle square and so on missing on the ansi layout?
[14:09:47] <shka> F20 or go home
[14:11:49] <contrapunctus> ck_: Duuqnd might mean having Ctrl, Alt, and Super on both sides of Space 🤔
[14:12:52] <shka> altgr is essential, never used right ctrl for ctrl
[14:13:17] <Duuqnd> I mean, I do want a Symbolics-like layout, but just having functions keys, print screen and AltGR is enough for me, which most "nice" expensive keyboards lack
[14:13:42] <Duuqnd> well, I haven't looked at enough to say "most", so I'll say "many" instead
[14:14:55] <Duuqnd> People keep saying "ah I love how much more productive this 4% keyboard makes me" when shift is missing
[14:19:00] <shka> dunno about that
[14:19:16] <shka> i use redox, because pain
[14:19:20] <shka> not because productive
[14:19:55] <contrapunctus> Duuqnd: lmao missing Shift?!
[14:20:35] <Duuqnd> Slight exaggeration but it wouldn't shock me if I saw one. I have however seen a keyboard missing the left shift key.
[14:21:02] <Duuqnd> Instead it had a really wide key for angle brackets and pipe symbols
[14:21:29] <contrapunctus> wat
[14:22:17] <contrapunctus> My left Shift emits `()<left>` when tapped 🤔
[14:24:29] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[14:24:39] <Duuqnd> That keyboard also claimed to have USB on the box when really it was bluetooth only
[14:24:52] <Duuqnd> That was fun when I wanted to connect it to a Raspberry Pi
[14:24:54] <hayley> 7 hours to coffee compiler club
[14:28:51] <Duuqnd> Oh yeah, notice the plural in "pipe symbols"
[14:28:58] <Duuqnd> It can output both of them
[14:29:47] <Duuqnd> That might be common but it felt kinda completely unnecessary and I really would've preferred a shift key
[14:30:37] *** Joins: random-nick (~random-ni@87.116.181.150)
[14:34:18] <selwyn> shka: how does training affect that pain
[14:34:45] <shka> selwyn: i got rid of it by replacing mouse and keyboar
[14:34:55] <selwyn> oh great
[14:35:11] <shka> redox keyboard with a little bit of tenting and cheap-ass vertical mouse from china
[14:35:52] <selwyn> oh thats what a vertical mouse is
[14:36:03] <shka> at least now there are proper clicky keyboard switches on the market
[14:36:04] <selwyn> i thought it meant you have to scroll it up a wall
[14:36:11] <shka> haha, no
[14:37:09] <shka> Delux M618BU
[14:37:13] <shka> to be specific
[14:37:38] <shka> ain't bad even
[14:37:57] <shka> but it is clearly designed by asian person
[14:38:05] <selwyn> in what way lol
[14:38:31] <shka> it is for small hands
[14:39:44] <shka> it could be 15% larger for me, and my hands are perhaps just below average even
[14:40:22] <shka> but it is still fine
[14:41:12] <shka> (and cheap)
[14:42:52] <shka> at least it is not designed-in-India hands size 
[14:44:58] <shka> Indian antique swords can be barely handled by European for instance 
[14:49:53] <selwyn> buy a dutch mouse
[14:50:05] <shka> as a pet?
[14:50:16] <selwyn> i assume they have the biggest hands
[14:50:57] <shka> i just want to point out that most man around here have a slightly bigger hand then mind
[14:50:59] <ck_> clog mouse
[14:51:09] <shka> *mine
[14:51:17] <shka> i am also not a tall person
[14:51:27] <ck_> lol I was really wondering for a moment
[14:51:46] <shka> ck_: i may be crazy, not that crazy :P
[14:51:57] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[14:52:01] <ck_> how many hands is your consciousness bro? do you even grab thoughts?
[14:52:15] *** Joins: kevingal (~quassel@2001:770:c0:401:b442:8e59:b75e:4b33)
[14:53:16] <gilberth> Math question: In 2D, suppose I have given an affine transformation M (with no translational part), could I compute the minimum of all |M(v)| with |v| = 1? Or: When I map a two points with distance 1 to each other, what is the minimum distance of their images under M?
[14:54:07] <gilberth> I mean, you probably could just read that from the transformation matrix, couldn't you?
[14:54:54] <selwyn> if an affine transformation has no translational part, it can be represented as matrix multiplication
[14:55:03] <selwyn> v -> Av for some matrix A
[14:55:14] <gilberth> Sure.
[14:56:05] <selwyn> minimum of |A v| over all vectors v with |v| = 1 is the smallest eigenvalue of A (as long as it is diagonalisable)
[14:56:14] <gilberth> [with translation it could too, when you use (x y 0) for a point and a 3x3 matrix. Irrelevant here, I want to map with a 2x2 matrix.]
[14:56:30] <selwyn> i think it still holds if it is not diagonalisable but i have to think
[14:57:14] <gilberth> selwyn: Well, it is diagonalisable in my case. Otherwise the answer would be 0.
[14:57:40] <selwyn> some invertible matrices cannot be diagonalised
[14:57:54] <gilberth> Oh dear.
[14:58:25] <gilberth> My math is really getting rusty here. Bad.
[14:58:28] <ck_> "when you use (x y 0) .." I think you mean (x y 1) ;)
[14:58:45] <moon-child> hm, I have a solution (though I don't know math, so it may be wrong)
[14:58:46] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[14:58:47] <gilberth> Yep. Or (x y h) :-)
[14:59:00] <moon-child> since you want |v| = 1, you can calculate v_y from v_x (or vice versa)
[14:59:13] <moon-child> so you can represent a function of one parameter
[14:59:20] <moon-child> calculate derivative
[14:59:28] <moon-child> and thence extrema
[14:59:37] <gilberth> That should work.
[15:00:16] <moon-child> (well, you would get two v_y from one v_x, would have to try them both.  But.)
[15:01:56] <gilberth> Yeah, but in principle I could work with polar coordinates.
[15:02:22] <gilberth> Actually I have that already!
[15:03:21] <selwyn> uh
[15:03:40] <gilberth> I would map a unit circle. That is an ellipse. I have a routine which computes the major and minor axis of that ellipse. And that is just it.
[15:04:24] <gilberth> moon-child, selwyn: Thanks a lot!
[15:04:38] <selwyn> what i said holds only if A is positive, actually
[15:04:58] <selwyn> however, it seems that there exists a generalisation to arbitrary A
[15:05:00] <selwyn> https://en.wikipedia.org/wiki/Min-max_theorem#Min-max_principle_for_singular_values
[15:05:52] <selwyn> you need to take the square root of the smallest eigenvalue of (A^T A) (such eigenvalues always exist and are positive)
[15:06:23] <selwyn> my math is rusty as well :p
[15:06:55] *** Joins: neominimum (sid537410@user/neominimum)
[15:09:02] <contrapunctus> selwyn: you said "Rust" ._.
[15:09:23] <gilberth> Well, I have to find my routine and compare that. I remember computing it the "brute force" way.
[15:11:18] <selwyn> https://www.youtube.com/watch?v=kNBuJWcab3A
[15:11:19] -ixelp- 200 Players Simulate Racist Civilization in Minecraft - YouTube
[15:12:24] * hayley is stressed, rather than sleeping.
[15:15:30] <ck_> so you're practically doing singular value decomposition
[15:16:07] <selwyn> well, you only need one eigenvalue, which svd can provide
[15:17:01] <selwyn> in practice you can compute the eigenvalues using qr decomposition or sth
[15:17:11] <hayley> Crabs!
[15:17:27] <hayley> https://www.youtube.com/watch?v=8TEAMHgrxi0
[15:17:28] -ixelp- JJ Burnel - Crabs - YouTube
[15:20:10] <moon-child> hmm.  llvm is 2m lines of code, right?  I wonder how it compares to 2 million lines of template compiler plus a register allocator
[15:20:17] <moon-child> in other words: how sophisticated is it actually?
[15:27:22] <gilberth> What I once came up with is <http://termbin.com/vnjs> Don't ask me how I calculated that, but it seems to work ;-)
[15:28:15] <moon-child> :)
[15:28:47] <moon-child> sexp are not so nice as mathematical notation.  Apl is nice, though seemingly no one (except for me) figured out how to do trig
[15:29:43] <gilberth> I use that with my SVG port. As SVG has ellipses specified as a major and minor radius and an angle to rotate the ellipse. And I tested that quite a bit.
[15:47:19] <selwyn> i really like sexps for mathematical notation!
[15:48:02] <selwyn> well, as long as i am on the computer
[15:50:31] <Alfr> gilberth, your A is invertible, let B be A^{-1}. If the eigenvalues of A are λ_i then those of B are λ_i^{-1}. As you're asking for the smallest λ_i for A, you can resort to finding B's largest eigenvalue and inverting it. For the last part you can use the power method, if B is diagonalizable.
[15:51:59] <Alfr> gilberth, main question is whether inverting A is too expensive, may use some decomposition instead. You'll only need to compute Bx/norm(Bx) a couple of times for the last part.
[15:55:14] <selwyn> the eigenvalues of A are not in all cases the right thing to consider
[15:55:34] <selwyn> in particular, you may have all the eigenvalues being negative, and what then
[15:56:18] <selwyn> it is the spectral values - eigenvalues of A^T A - that give the correct answer in all cases
[15:56:24] <Alfr> Well, that relation also holds after taking absolute values.
[15:56:51] <selwyn> indeed, you could invert that matrix and then use the power method
[15:57:26] <selwyn> alfr: well, ok
[15:58:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[15:58:18] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:01:16] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[16:04:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:04:29] <Alfr> selwyn, also it's a good thing that the power method produces the eigenvector with largest absolute value, otherwise that what I said wouldn't work.
[16:06:49] <dave0> o_O
[16:07:11] <selwyn> the more practical thing is to simply hand over the problem to blas, but that is less fun
[16:07:50] <selwyn> i am fond of this min max theorem
[16:09:55] <Alfr> selwyn, only that it doesn't tell me how to actually get a value.
[16:10:56] <selwyn> it tells you that the answer is an eigenvalue
[16:11:05] <selwyn> which you can use your favourite numerical method to calculate
[16:18:33] <Alfr> After reading the statement of the theorem, I get what you want with that.
[16:22:44] <Alfr> My reasoning was way simpler: What's the smallest d(Ax,Ay)/d(x,y) and after pondering that a while, I get to min |A(x-y)|/|x-y|.
[16:23:44] <Alfr> selwyn, and then I somehow forgot about the norms, as you've noticed. :)
[16:24:52] <selwyn> the general form of the theorem is quite powerful
[16:25:07] <selwyn> and it must have a geometrical interpretation actually
[16:25:22] <selwyn> however, unlikely to be very interesting in only 2 dimensions
[16:43:45] <selwyn> gilberth: what is this in aid of?
[16:44:40] <phoe> hayley: https://arxiv.org/pdf/2201.07845.pdf
[16:49:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:49:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[16:55:23] *** Joins: cyberbanjo (mksybr@tilde.team)
[16:55:27] <cyberbanjo> #clschool
[17:09:52] *** Quits: santiagopim (~user@90.167.94.91) (Remote host closed the connection)
[17:20:19] * selwyn already wrote four pages today
[18:03:03] <sham1> phoe: people in HN are already talking about the crablang as a solution
[18:04:24] *** Joins: vats (~vats@103.158.91.47)
[18:07:07] *** Joins: domovod (~domovod@176.196.122.197)
[18:12:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:14:01] <shka> crablang has the exact same problems as C i think
[18:14:05] <shka> perhaps even more so
[18:17:55] *** Joins: djuber (~user@65.79.128.64)
[18:18:47] <shka> from the article i gathered that complicated compiler is actually a problem
[18:24:18] *** Quits: kevingal (~quassel@2001:770:c0:401:b442:8e59:b75e:4b33) (Ping timeout: 250 seconds)
[18:25:18] <pl> crablang as solution to what?
[18:25:28] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Quit: WeeChat 3.3)
[18:27:15] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c17:d8ca:f795:73f0)
[18:28:35] *** Joins: kevingal (~quassel@149.157.101.196)
[18:29:18] <phoe> C
[18:29:20] <phoe> it seems
[18:38:48] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:43:15] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[18:46:25] *** Quits: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3) (Remote host closed the connection)
[18:46:39] *** Joins: wheelsucker (~user@2600:8801:8c24:d000:25e1:aacc:8c79:dcd3)
[18:51:58] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:52:35] <hayley> phoe: Easy, there is no defined way to get a pointer that will definitely point to your favorite memory mapped IO stuff.
[18:53:17] <phoe> hayley: easy what
[18:53:19] <phoe> I am missing context
[18:53:49] <hayley> Nonetheless the C abstract machine doesn't have your MMIO of course. So you need more semantics, like seL4 used for x86 programs.
[18:54:03] <hayley> On why ANSI C is unusable for operating system development.
[18:55:59] <hayley> But the paper is about how writing any secure code in C is painful, right? :)
[19:01:14] <aeth> contrapunctus: That's confusing because I was treating ly and lie as the same, although I guess that's why you did lynn- (vs ly-n... but at that point, only the - is needed)
[19:03:27] <contrapunctus> aeth: it's at times like this I wish I knew IPA
[19:13:13] <dave0> nite all
[19:13:43] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:14:33] <drakonis> https://mitpress.mit.edu/books/structure-and-interpretation-computer-programs-1 oh no its in js
[19:14:34] -ixelp- Structure and Interpretation of Computer Programs | The MIT Press
[19:17:10] <hayley> dave0: u wuss
[19:17:37] * hayley says that, either not going to sleep until 5am or having to sleep in the next two hours
[19:29:41] <selwyn> crack out a stella
[19:30:24] <aeth> contrapunctus: even if you knew IPA, you could never use it in any channel except maybe #conlang (if that still exists on this network vs on Freenode) because your audience wouldn't know it
[19:30:27] <hayley> 2 hours lads
[19:30:30] <selwyn> https://www.youtube.com/watch?v=7hOK5JF5XGA
[19:30:31] -ixelp- Mashd N Kutcher - Get On The Beers (feat. Dan Andrews) - YouTube
[19:30:49] <selwyn> but its 4pm???
[19:30:54] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[19:31:12] *** Joins: kevingal (~quassel@2001:770:c0:401:7423:d203:7299:4efd)
[19:31:24] <selwyn> perhaps they should scrap time zones after all
[19:32:46] <ck_> [interlude about SWATCH[tm][r] internet time]
[19:51:19] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[19:54:49] *** Quits: lagash_ (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[19:57:06] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:00:35] *** Joins: jeosol (~jeosol@user/jeosol)
[20:01:05] <jeosol> phoe: hey phoe, I don't think I saw the info here, it was probably here though, you said something about having too much on your hands and a "..." to plan
[20:01:39] <phoe> and a ... to plan?
[20:01:52] <jeosol> meant the wedding
[20:02:16] <phoe> oooh
[20:02:17] <phoe> yes
[20:02:17] <jeosol> I messaged you sometime but you p robably missed it and saw a response to that effect, its been a while though, time flies
[20:02:20] <phoe> it's all done now
[20:02:26] <phoe> it's over, it's successful
[20:02:28] <jeosol> great.
[20:02:33] <jeosol> that's all that matters
[20:03:06] <jeosol> I was just busy with my project, mostly done now, just looking at some queing options to manage  load
[20:03:18] <phoe> yes
[20:03:47] <jeosol> phoe: seeing the recent articles regarding the asdf, is there some central CL committee that manages some of the issues, may be they meet quarterly, or every two months, etc
[20:05:00] <jeosol> to have some kind of common front to discuss things instead of throwing barbs across the fence, I think it's passive aggressive. Usually, when people meet, they realize they have more in common, and communication via web (text, chat)
[20:05:07] <jeosol> I don't know, just two cents on the matter
[20:05:12] <phoe> no
[20:05:16] <phoe> there is no central committee
[20:05:37] <phoe> that's one of the points of my article - we CLers live in a tribal world with islands of people working together and rarely swimming elsewhere
[20:05:50] <phoe> and even if, only because to ask for support with tools
[20:06:01] <phoe> there's no higher-ups
[20:06:01] <jeosol> having benefitted from asdf guys (Rob and Fare) and also SBCL guys (stats and co..)
[20:06:15] <phoe> there's no CEO of Common Lisp™
[20:06:34] *** Joins: hobo (~hobo@2600:1700:8972:63f:3313:2d33:be9f:8246)
[20:06:44] <jeosol> phoe: I think that's one of the issues we have. is fragmented, in a way, it's good, but things like ASDF, SBCL, QL, etc, far reaching tools, we need some small committee
[20:07:08] <phoe> do we?
[20:07:19] <jeosol> could be highly informal, but at least, there'd be some kind of discussion and documentation of what the issues are, so we can all see it and know
[20:07:25] <phoe> and what power would such a committee have
[20:07:34] <jeosol> Right now, without much info, people will tend to want to be one side or another
[20:07:34] <phoe> other than saying X or Y
[20:07:43] <phoe> or to be neither!
[20:07:57] <jeosol> it's not so much as power, but a way of managing things. I think it's better that lobbing bombs across the fence
[20:08:37] <jeosol> the latter does not achieve much. There could be better options or variant of what I discussed.
[20:11:00] <jeosol> phoe: regarding your CEO comment, the commercial companies aren't involved or don't want to, if only to sponsor such a committee. I know google uses SBCL
[20:11:22] <phoe> I won't ever want google as a company meddling in here to be honest
[20:14:50] *** Joins: treflip (~user@user/treflip)
[20:15:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:20:07] <selwyn> cccp = central committee of common-lisp programmers
[20:20:33] <selwyn> hayley: don't fall asleep
[20:22:10] <jeosol> selwyn: not bad, lol, may indicate we are communists
[20:23:40] <phoe> well tbh irssi shows your nick in red color to me
[20:23:42] <phoe> funny
[20:25:16] <selwyn> well weechat doesn't
[20:25:20] <selwyn> counterrevolutionary
[20:31:36] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Remote host closed the connection)
[20:31:48] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[20:34:11] * hayley has empirically chosen the not sleeping option.
[20:34:34] <jeosol> phoe: your's is red to me as well, mine is dark blue to me, lol
[20:34:58] <jeosol> selwyn: that cccp name will trigger most people , I think
[20:35:59] <hayley> 1 hour lads
[20:36:15] <phoe> 1 hour until what
[20:38:20] <Duuqnd> I would assume it's that Coffee Compiler Club she's been talking about
[20:45:51] <gilberth> She should try coffee to stay awake. After all it's a coffee club, isn't it?
[20:47:29] <selwyn> i've got headaches from too much coffee and cigarettes today
[20:48:01] <gilberth> You turned drugs into pages?
[20:59:59] <selwyn> happy to report that i did
[21:00:10] <selwyn> i can't really concentrate enough to write anymore though
[21:10:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:17:00] *** Quits: cyberbanjo (mksybr@tilde.team) (Quit: WeeChat 3.4)
[21:29:11] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:29:33] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:30:46] <gilberth> selwyn: Take a break then.
[21:34:36] * hayley is in
[21:39:40] <epony> LISP: 25-30 years too late, as usual.
[21:42:44] <epony> https://en.wikipedia.org/wiki/History_of_programming_languages#1980s:_consolidation,_modules,_performance
[21:42:52] <epony> ^ lots to catch up to, folks
[21:43:50] <epony> https://en.wikipedia.org/wiki/CPAN#Influence
[21:44:23] <epony> CLAN when?
[21:50:57] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.4)
[22:03:18] <gilberth> I wonder if with X11 it's clever to always open the iso10646-1 fonts while the iso8859-15 variant would do most of the time.
[22:03:47] *** Quits: kevingal (~quassel@2001:770:c0:401:7423:d203:7299:4efd) (Remote host closed the connection)
[22:04:54] <gilberth> But then: Fonts and X11 -- a lost cause.
[22:27:10] <hayley> aeth: Got a link to your compile-time game?
[22:36:56] <gilberth> hayley: Coffee club over?
[22:38:34] <hayley> Not for another hour.
[22:45:16] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:49:17] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 240 seconds)
[22:50:59] * pl wonders at the alternative world where NeWS ends up open source and probably not using postscript-as-licensed-by-Adobe 
[22:52:54] <gilberth> pl: Are you dreaming?
[22:53:27] <pl> Just stepping sideways on the arrow of time, sometimes 
[22:53:36] <gilberth> lol
[22:57:19] * hayley hears Cliff swear like a sailor first-hand
[22:57:45] <hayley> aeth: Congrats, you're CCC famous
[23:00:12] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[23:09:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:11:23] <ck_> phoe: do you want me to tell you if I see some more typos, or no?
[23:13:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:14:15] <phoe> ck_: please gather them in a mail and send to phoe@disroot.org
[23:14:23] <phoe> will update, eventually
[23:15:12] <ck_> ok
[23:15:22] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 268 seconds)
[23:15:46] <ck_> I keep getting interrupted when reading, by angry mobs wielding kubernetes-shaped pitchforks
[23:15:48] *** Joins: kevingal (~quassel@213.233.154.159)
[23:16:49] *** Quits: vats (~vats@103.158.91.47) (Ping timeout: 256 seconds)
[23:18:29] <ck_> also your text is much longer than I had anticipated a treatise on this topic to be ;) thank you for writing it though, I learned a lot about the situation that I previously missed
[23:21:32] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 256 seconds)
[23:21:45] <White_Flame> the whole lisp build system really does need a proper rethink
[23:22:18] <White_Flame> we need better support for cmdline scripting, better detachment from the old machine when deploying an executable image, and of course versioning issues with dependencies
[23:23:05] <shka> yup
[23:23:30] <shka> cmdline scripting, perhaps not critical
[23:23:35] <shka> everything else is a problem
[23:23:36] <White_Flame> it's a big hole
[23:23:43] <White_Flame> not necessarily a blocker
[23:33:19] <hayley> gilberth: I asked about runtime feedback for my SIMD loop hack, and Cliff doubted regexen would be your bottleneck, and wondered why. lol
[23:33:59] <gilberth> It would be nice when more Lisps would behave like CLISP does. You could start a file with "#! /usr/bin/clisp", put some Lisp code in there and chmod +x the file.
[23:34:10] <aeth> yes, but
[23:34:23] <aeth> that's not as flexible as it could be
[23:34:33] <aeth> e.g. when SBCL does it, you have to hardcode the path iirc
[23:34:38] <aeth> which makes it useless if you want to share the script
[23:34:50] <aeth> as opposed to (iirc) #!/usr/bin/env python
[23:35:25] *** semz_ is now known as semz
[23:35:46] <gilberth> aeth: Well, you need to start from somewhere. We could however say that there is a /usr/bin/lisp which is a symlink to your favorite Lisp.
[23:37:45] * hayley survived. Woohoo!
[23:39:42] <sm2n> roswell apparently lets you do that with your cl implementation of choice
[23:40:30] <sm2n> hayley: how'd it go?
[23:40:43] <random-nick> a /usr/bin/lisp would probably have to do some argument parsing in order to provide a consistent interface
[23:41:30] <hayley> sm2n: It was great. Though I still suck at figuring out when to start talking.
[23:43:19] <hayley> Brought up aeth running Zombie Raptor at compile time using EVAL-WHEN, global value numbering and the bootstrap interpreter for SICL, and how to switch between tight scalar loops and SIMD.
[23:48:11] <gilberth> I once crafted a script called "run-lisp" tried to expose common CLI arguments. I found a copy <http://clim.rocks/gilbert/run-lisp.sh.txt>
[23:49:47] <gilberth> random-nick: It should just load the rest of the script and make the command line arguments available under some common name. Or go old school and make the command line arguments prepended to what you read from stdin :-)
[23:51:08] *** Quits: kevingal (~quassel@213.233.154.159) (Remote host closed the connection)
[23:51:54] <gilberth> Any, what I want is a small script or sth which would allow me to invoke functions from my UNIX shell. The command line arguments should be passed as strings, errors should not throw me into an interactive debugger but lead to a non-zero exit code. Just like any vanilla UNIX program.
[23:52:31] <gilberth> Bonus points, when it does that with an existing already running Lisp image.
[23:52:33] <hayley> I didn't end up drinking tea. Let alone on camera, which I had intended to.
[23:52:56] <gilberth> Tea? At a coffee club?
[23:54:04] <hayley> Yes, of course.
[23:55:11] <gilberth> So, you intend to stay up?
[23:56:09] <hayley> Topic management was fun. "So, you can make a graphical dump of your IR, but usually a textual dump and Emacs works best" .oO(Our CLIM visualizer works fine) "We have a tool to watch hardware counters for our Python system used by Facebook" "How do I go maintaining counters for JIT/profile optimisation?"
[23:56:15] <hayley> It's 7:30am now.
[23:56:45] <gilberth> And?
[23:57:25] <hayley> Never mentioned the CLIM tool, but I did tangentially get around to RE runtime feedback with about five minutes to spare.
[23:57:54] <selwyn> did you enjoy it?
[23:58:03] <hayley> Well, I probably should sleep now, but I failed to do that from 3am to 5am.
[23:58:28] <selwyn> i can never hold myself to a 2 hour sleep
[23:58:44] <hayley> Yes.
[23:59:02] <selwyn> well, sounds like you had a successful all-nighter
[23:59:04] <selwyn> gj
[23:59:49] <gilberth> Nah, our grepping girls was just too excited to sleep.
