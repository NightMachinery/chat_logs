[00:12:17] <lizmat> sorry...  please don't let me stop you... this is a personal choice
[00:12:24] <lizmat> *my* personal choice
[00:30:17] <jgaz> When using Raku's dir() routine is it possible to filter by file type? Examples: I only want subdirectories or maybe I only want certain file extensions?
[00:31:36] *** Joins: guifa (~guifa@24.96.227.5)
[00:31:42] <lizmat> :test( *.ends-with(".raku")) 
[00:31:58] <lizmat> jgaz ^^
[00:32:03] * guifa curses leapseconds
[00:32:38] <jgaz> what about the dir case? directories don't have file extensions.
[00:33:27] *** Joins: orangebot (~nic@206.57.244.170)
[00:35:57] <lizmat> m: dir(., :test(*.say) )
[00:35:57] <camelia> rakudo-moar 1b840ec37: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> 3dir(.7⏏5, :test(*.say) )␤»
[00:36:07] <lizmat> m: dir(".", :test(*.say) )
[00:36:08] <camelia> rakudo-moar 1b840ec37: OUTPUT: «.␤..␤.cpanm␤.local␤.npm␤.perlbrew␤.rcc␤Perlito␤evalbot␤log␤nqp-js␤p1␤p2␤perl5␤std␤.bashrc␤mbox␤.cpan␤dalek-queue␤rakudo-j-inst-1␤rakudo-j-1␤rakudo-j-inst-2␤rakudo-j-2␤.cdmem␤lib␤testdir-112␤testdir-2…»
[00:36:51] <lizmat> m: dir($*CWD.absolute, :test(*.say) )
[00:36:51] <camelia> rakudo-moar 1b840ec37: OUTPUT: «.␤..␤.cpanm␤.local␤.npm␤.perlbrew␤.rcc␤Perlito␤evalbot␤log␤nqp-js␤p1␤p2␤perl5␤std␤.bashrc␤mbox␤.cpan␤dalek-queue␤rakudo-j-inst-1␤rakudo-j-1␤rakudo-j-inst-2␤rakudo-j-2␤.cdmem␤lib␤testdir-112␤testdir-2…»
[00:37:22] <lizmat> other than inspecting the string, I don't see an easy way
[00:37:29] <jgaz> ok
[00:37:41] <jgaz> It was worth asking about.
[00:37:44] <jgaz> Thanks
[00:37:51] *** Joins: Guest9516 (~tony_of_p@warr-08-b2-v4wan-162429-cust15.vm21.cable.virginm.net)
[00:38:05] <lizmat> jgaz: I guess that's why I made https://raku.land/zef:lizmat/paths  :-)
[00:45:57] <MasterDuke> m: say dir(".", :test(*.IO.d))
[00:45:58] <camelia> rakudo-moar 1b840ec37: OUTPUT: «(".".IO "..".IO ".cpanm".IO ".local".IO ".npm".IO ".perlbrew".IO ".rcc".IO "Perlito".IO "evalbot".IO "log".IO "nqp-js".IO "p1".IO "p2".IO "perl5".IO "std".IO ".cpan".IO "rakudo-j-inst-1".IO "rakudo-j-1".IO "rakudo-j-inst-2".IO "rakudo-j-2".IO "lib".IO…»
[00:47:52] <jgaz> Yeah, I jsut found this: https://andrewshitov.com/2018/10/31/working-with-files-and-directories-in-perl-6/
[00:48:04] <jgaz> This is helpful.
[01:09:23] <guifa> lizmat: I know you've been doing some edits to CORE::DateTime. I'm not sure the best way to expose it (commence bikeshedding), but one potentially useful addition would be to give a leapsecond adjusted posix time (some utilities prefer that).  I think I could code something up such that .posix could optionally take :leapseconds, adjusting accordingly.
[01:10:07] <lizmat> I think a separate method would be better?
[01:15:28] <guifa> lizmat: hence commence bikeshedding ha.  I swore that there used to be a method that returned a True/False value (or accepted one) to account for LSs, although that was only because some POSIX time stamps are ambiguous due to the LS.  
[01:16:07] <lizmat> there's a named arg to account for it I seem to recall
[01:18:10] <guifa> that's what I thought, but it's not on the docs page.  I'll go take a look at the edit history for it
[01:19:27] *** Joins: habere-et-disper (~habere-et@2001:bb6:a114:6f00:f94f:855f:2db0:9a5a)
[01:22:33] <guifa> huh, maybe I just dreamed it up.  
[01:23:50] <kybr> is there something like this `'('.unicode-property<mirror> eq ')'` ?
[01:25:53] <ugexe> yeah, but i dont remember what it is
[01:26:33] <guifa> kybr: at best you can get Bidi_Paired_Bracket, but that's designed for bidirection text.  It should be mostly correct whenever something is defined, but values might not always be defined
[01:37:02] <guifa> m: say '[({<“‘«\\′⸂'.comb>>.uniprop('Bidi_Mirroring_Glyph').join
[01:37:02] <camelia> rakudo-moar 1b840ec37: OUTPUT: «])}>»⸃␤»
[01:43:20] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[01:53:11] <elcaro> is there a more efficient way to punt a method call to a function than just doing `method m($arg) { some::func($!attr, $arg) }`
[01:56:06] <tonyo> callsame or callwith if you're calling the parent from an inherited class
[01:56:55] <lizmat> m: class A { BEGIN A.^add_method("foo",&say) }; A.foo   # elcaro something like that ?
[01:56:55] <camelia> rakudo-moar 1b840ec37: OUTPUT: «(A)␤»
[01:57:56] <tonyo> m: role A { method a { say "A.a"; }; }; class B is A { method a { say "B.a"; callsame; say "/B.a"; }; }; B.a;
[01:57:56] <camelia> rakudo-moar 1b840ec37: OUTPUT: «B.a␤A.a␤/B.a␤»
[02:02:37] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 240 seconds)
[02:05:59] *** Quits: Guest9516 (~tony_of_p@warr-08-b2-v4wan-162429-cust15.vm21.cable.virginm.net) (Quit: Leaving)
[02:08:34] <elcaro> lizmat: thanks... I figured I would need to compose it in at compile time to get the least overhead
[02:11:05] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[02:13:34] * lizmat calls it a day&
[02:14:02] *** Quits: japhb (~geoff@mugs/japhb) (Quit: leaving)
[02:14:03] <elcaro> Haha, I'm not sure it works yet... but take the day off, you've earned it.
[02:14:53] <elcaro> I'm trying to punt the `push` method of class that does `Array::Agnostic`... I may be trying to be too clever for my own good.
[02:15:44] <elcaro> But I'll poke around the MOP a little more before I give up.
[02:22:15] <Xliff> Waht's the best way to determine logarithmic scale given a set of numbers?
[02:23:11] *** Quits: getimiskon (~getimisko@2a02:587:a024:7200:32d1:6bff:fe91:3cc9) (Quit: WeeChat 3.3)
[02:44:23] *** Quits: habere-et-disper (~habere-et@2001:bb6:a114:6f00:f94f:855f:2db0:9a5a) (Ping timeout: 256 seconds)
[02:51:19] <thowe> is "use v6" still a thing?
[02:54:14] <elcaro> kind of... if you are using features/semantics introduced in 6.d, you might want to do `use v6.d` to ensure people running v6.c are aware.
[02:54:34] <elcaro> though hopefully the amount of people running v6c is very low
[02:55:12] <elcaro> same goes for using newer features... you might want to use v6.e.PREVIEW (or just use v6.e when it comes out)
[02:55:34] <elcaro> but outside of that... i think a plain `use v6` is not necessary.
[02:57:24] <thowe> Ah.  Understood.  That way there is a record of the environment/timeframe in which some code was written.
[03:03:35] <guifa> It's also a nice way to say "I have not tested this against higher versions".  It's unlikely that 6.e will break anything for 6.d or 6.c, but it's always possible
[03:37:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:39:38] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[03:47:27] <thowe> Well, yeah, that's what I was thinking.  Will the version denoted be something newer versions will/should be able to understand and execute, or will is the thinking that there will be warnings?
[03:49:11] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[03:58:22] <guifa> yes, the idea is that upon encountering use v.6.c, the interpretation will switch to 6.c mechanics
[04:00:34] <guifa> I know there was some issue a while back with changes to one where if you created the "same" core class under 6.c and 6.e guarded code, but I forget the exact details and I think vrurg mostly solved it all
[04:03:51] *** Quits: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net) (Ping timeout: 256 seconds)
[04:14:22] *** Joins: frost (~frost@user/frost)
[04:14:24] *** Quits: frost (~frost@user/frost) (Client Quit)
[04:36:28] *** Quits: jgaz (~jgaz@2600:8805:d980:7620::9e0) (Quit: Leaving)
[05:10:44] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[05:11:16] *** Joins: Colt (~Colt@user/colt)
[05:28:01] <vrurg> The biggest userland problem with 6.e is about roles which are incompatible with 6.c/d classes. Basically it means 'use v6.e; my $v = 42 but role { ... }' is an error now. This restriction can be lifted as the incompatibility is in handling of submethods only, but I would need to get back to it someday later.
[05:28:59] <guifa> vrurg: ah okay.  i knew it was something there but didn't want to misidentify the issue
[05:42:20] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Remote host closed the connection)
[05:42:38] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[06:12:23] <kybr> is zef just really slow? should i be using zef or is there a different thing now?
[06:19:10] *** Joins: japhb (~geoff@mugs/japhb)
[06:22:24] <moon-child> kybr: as far as I know, yes
[06:30:03] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 256 seconds)
[06:32:34] *** Quits: nine (~nine@comm.detonation.org) (Remote host closed the connection)
[06:32:40] *** Joins: nine (~nine@comm.detonation.org)
[07:24:44] <vrurg> kybr: most likely it is not zef itself, but tests which are taking most of the installation time.
[07:32:40] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:32:40] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:19:11] <Xliff> \w
[08:19:49] <Xliff> What's the best way to rotate an array? So if I have (0...5) and I rotate it 2 steps, I get (2, 3, 4, 5, 0, 1)
[08:20:41] <moon-child> m: say (0...5).rotate(2)
[08:20:41] <camelia> rakudo-moar 1b840ec37: OUTPUT: «(2 3 4 5 0 1)␤»
[08:20:46] <moon-child> Xliff: like that?
[08:21:21] <Xliff> Oh! LOLOL!!
[08:21:27] <Xliff> moon-child++
[08:22:18] <moon-child> :)
[08:31:02] <guifa> grr
[08:31:05] <guifa> "Missing serialize REPR function for REPR MVMContext (BOOTContext)"
[08:33:25] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:33:40] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:54:16] <guifa> seems to be caused by a shaped array
[09:09:35] <guifa> (in situations where module A uses module B, and module B has a shaped array in it)
[09:10:24] <Xliff> https://github.com/Xliff/p6-GDA/commit/3516084c9c8d706c1409f03c6ae69fc4d7c9ba60 # Thanks, everyone!
[09:17:17] *** Joins: frost (~frost@user/frost)
[09:24:40] *** Quits: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef) (Ping timeout: 268 seconds)
[09:36:15] *** Joins: qorg11 (~lain@2605:6400:c022:fa04:1312:1337:0:beef)
[09:38:07] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:40:38] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:47:16] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Back right soon…)
[09:47:38] *** Joins: solitario (~adrian@www3.kiess.onl)
[10:46:14] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 260 seconds)
[10:46:41] *** Joins: Colt (~Colt@user/colt)
[10:56:47] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[10:59:16] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:00:18] *** Joins: seednode (~seednode@user/seednode)
[11:43:09] *** Quits: solitario (~adrian@www3.kiess.onl) (Quit: Restart client…)
[11:43:25] *** Joins: solitario (~adrian@www3.kiess.onl)
[11:47:07] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:4420:44b4:d724:ac7b)
[12:09:03] *** Joins: TheAthlete (~TheAthlet@176.96.230.87)
[12:10:33] <holyghost> Hi TheAthlete 
[12:13:27] <TheAthlete> Hello!
[12:24:58] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:27:19] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[13:04:59] <Voldenet> m: my @a; %a.push({ :b(1) :c(2) }); %a.push(%( :b(3) :c(4) )); say %a
[13:05:00] <camelia> rakudo-moar 1b840ec37: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '%a' is not declared.  Did you mean '@a'?␤at <tmp>:1␤------> 3my @a; 7⏏5%a.push({ :b(1) :c(2) }); %a.push(%( :b(␤»
[13:05:07] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3) :c(4) )); say @a
[13:05:08] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3}]␤»
[13:05:12] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3), :c(4) )); say @a
[13:05:12] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»
[13:05:54] <Voldenet> this behaviour is a little surprising
[13:06:59] <moon-child> yeah, that definitely seems wrong to me
[13:07:04] <moon-child> nothing to do with arrays fwiw
[13:07:07] <Voldenet> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3) :c(4) )); @a.push(( :b(5) :c(6) )); say @a
[13:07:07] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3} (b => 5 c => 6)]␤»
[13:07:08] <moon-child> m: say %( :3b :4c )
[13:07:08] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{b => 3}␤»
[13:07:39] <moon-child> the :4c should definitely not be silently dropped
[13:10:03] <Voldenet> especially puzzling:
[13:10:23] <Voldenet> m: my $l = (:2b :3c); say %$l
[13:10:24] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{b => 2, c => 3}␤»
[13:24:12] <SmokeMachine> m: my @a; my %b = :3b, :4c; @a.push({ :b(1) :c(2) }); @a.push(%b); say @a
[13:24:12] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»
[13:24:28] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(% =  :b(3) :c(4) ); say @a
[13:24:29] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3}]␤»
[13:24:49] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(% =  (:b(3) :c(4)) ); say @a
[13:24:50] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»
[13:25:23] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(( :b(3) :c(4) ).Hash); say @a
[13:25:23] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»
[13:25:35] <SmokeMachine> odd
[13:26:03] <SmokeMachine> m: my @a; @a.push({ :b(1) :c(2) }); @a.push(%( :b(3), :c(4) )); say @a
[13:26:03] <camelia> rakudo-moar 1b840ec37: OUTPUT: «[{b => 1, c => 2} {b => 3, c => 4}]␤»
[13:26:08] <SmokeMachine> the comma!
[13:27:02] <moon-child> yes
[13:27:03] <SmokeMachine> m: say %(:1a :2b); say %(:1a, :2b)
[13:27:04] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{a => 1}␤{a => 1, b => 2}␤»
[13:27:19] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:27:19] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:27:23] <SmokeMachine> m: say %(:1a :2b :3c :4d);
[13:27:23] <camelia> rakudo-moar 1b840ec37: OUTPUT: «{a => 1}␤»
[13:28:06] <moon-child> m: say %(:1a 2b, :3c :4d)
[13:28:07] <camelia> rakudo-moar 1b840ec37: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3say %(:1a7⏏5 2b, :3c :4d)␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        …»
[13:30:41] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:38e8:622c:40fd:396f)
[13:33:37] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:8991:6d48:b770:3c11) (Ping timeout: 240 seconds)
[13:59:35] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[14:02:42] *** Joins: dakkar (~dakkar@host-87-21-202-39.retail.telecomitalia.it)
[14:18:32] <dakkar> TIL: List instances are not value objects
[14:18:53] <dakkar> so trying to use lists as keys for a map / hash won't work
[14:18:54] <lizmat> yeah, sadly so
[14:19:14] <lizmat> https://raku.land/zef:lizmat/Tuple
[14:20:01] <dakkar> (in addition to the slightly surprising bit where `%hash{@thing}` is interpreted as something like `@thing.map: $hash{$_}`)
[14:20:27] <lizmat> that's just a slice ?
[14:20:51] <lizmat> coming from Perl it may be a WAT  :-)   but that's just Stockholm Syndrome  :-)
[14:20:52] <dakkar> yes, I (now) know
[14:21:27] <lizmat> the general rule in Raku is that anything between {    } is code
[14:22:03] <dakkar> if I want to avoid the slice, I have to pass the list via a scalar container (which still doesn't do what I need because lists aren't values)
[14:22:15] <lizmat> indeed
[14:22:32] <lizmat> $@thing
[14:22:45] <lizmat> @thing.item  # more verbose
[14:22:58] <dakkar> I keep getting surprised by sensible-in-retrospect choices ☺
[14:24:23] <dakkar> https://www.thenautilus.net/cgit/media-control/tree/ this is the thing I'm making
[14:24:48] <dakkar> it's a (very minimal, very insecure) web ui to lirc + vlc, to control my "home theatre"
[14:28:27] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[14:28:51] <lizmat> nice!   one of my longer term projects is to get rid of Apple TV and replace it with a Raspberry Pi with a Raku app on it
[14:29:17] <lizmat> where would you be running this ?
[14:29:26] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[14:34:52] <dakkar> it's running on a microITX fanless pc
[14:35:38] <dakkar> bit overpowered, maybe, but it makes sense to me ☺
[14:36:03] <lizmat> yeah... you gotta work with what you got...  :-)
[14:36:27] <dakkar> (a user gets automatically logged in, its .bashrc starts X, which starts vlc)
[14:59:01] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[14:59:39] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Remote host closed the connection)
[15:19:03] *** Quits: sena_kun (~koto@94.142.239.45) (Quit: Leaving)
[15:20:15] *** Joins: sena_kun (~koto@94.142.239.45)
[15:37:19] *** Quits: dakkar (~dakkar@host-87-21-202-39.retail.telecomitalia.it) (Quit: e via, verso nuove avventure)
[15:38:04] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:38:42] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:09:51] <Geth> ¦ doc: 632dc9c197 | (Tom Browder)++ (committed using GitHub Web editor) | doc/Language/classtut.pod6
[16:09:51] <Geth> ¦ doc: Change 'method' to 'sunmethod' for TWEAK
[16:09:51] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/632dc9c197
[16:09:54] <linkable6> Link: https://docs.raku.org/language/classtut
[16:17:42] <nine> [HTTP::Status] Testing with plugin: Zef::Service::TAP+{<anon|1>}
[16:17:42] <nine> ===> Testing [FAIL]: HTTP::Status:ver<0.0.3>:auth<zef:lizmat>
[16:17:42] <nine> Aborting due to test failure: HTTP::Status:ver<0.0.3>:auth<zef:lizmat> (use --force-test to override)
[16:17:55] <nine> Is there any way to get more output from zef here? Like the actual test output
[16:23:00] <lizmat> ugexe ^^
[16:23:56] <lizmat> this is why I use my custom test script: it is silent if all ok, but has all the goods (including --ll-exception stacktraces) if it goes wrong
[16:38:42] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:38:42] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:38:59] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[16:43:43] <Xliff> nine: Hmmm.... so only output something if a test fails and only output the failure messages or somesuch?
[16:46:01] <nine> Xliff: I'd be happy to see any output at all. Currently on this machine all tests fail with no indication of why.
[16:46:21] <lizmat> https://gist.github.com/lizmat/a860b3364b6994269b3c291e59186394  # typical ok output
[16:47:58] <lizmat> https://gist.github.com/lizmat/2f44864fa9002e0533c532305de4ec68  # typical failure output
[16:48:34] <lizmat> (after adding a "die 'just to show'" statement at the end of the test file
[16:48:38] <lizmat> )
[16:51:59] <sena_kun> jdv, o/
[16:52:07] <sena_kun> releasable6, status
[16:52:08] <releasable6> sena_kun, Next release will happen when it's ready. There are no known blockers. 198 out of 198 commits logged
[16:53:02] <sena_kun> Just wanted to ensure you know the ignored commits should be specified in the commit message during release. :)
[17:15:22] *** Parts: mathias[m] (~mathiasma@2001:470:69fc:105::1:4713) ()
[17:15:36] *** Joins: mathias[m] (~mathiasma@2001:470:69fc:105::1:4713)
[17:23:28] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:23:54] *** Joins: discord-raku-bot (~RakuIRC@95.90.183.75)
[17:41:10] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[17:44:14] *** Joins: getimiskon (~getimisko@2a02:587:a024:7200:32d1:6bff:fe91:3cc9)
[17:53:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[18:12:38] *** Joins: monkey_ (~user@190.104.116.153)
[18:22:37] <jdv> wut now?
[18:23:14] <jdv> sena_kun: oh, i had noticed that somewhere.  whether i remember at the actual time, eh...
[18:24:09] <sena_kun> jdv, like this: https://github.com/rakudo/rakudo/pull/4529/commits/ae35c32f1628300c9be3d3d68fd1500267e1dccd
[18:24:18] <sena_kun> here is the PR: https://github.com/rakudo/rakudo/pull/4529
[18:25:15] <sena_kun> when I did it, a nice heuristic is to look at the previous release and monkey see, monkey do it, so the chance of forgetting something is less.
[18:25:33] <jdv> that's what i've been doing.  takes forever but whatever.
[18:25:47] <jdv> there were only 8 ignored commits for you?
[18:26:30] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:4420:44b4:d724:ac7b) (Quit: bbl)
[18:28:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:29:11] <sena_kun> jdv, it varies from release to release.
[18:29:27] <sena_kun> more for the next one: https://github.com/rakudo/rakudo/pull/4585/commits/ea0f8067bccfa900f1e72e729d38c03bc8ec13cd
[18:32:53] <jdv> i forget - what it the purpose there?  the list is already in the changelog.
[18:37:38] <sena_kun> jdv, AFAIK it is for releasable6 bot to know what commits from the past should not be prompted as "need to log those". It gives you list of commits that are not logged and on release you either have them directly in the changelog or in this form in a commit message.
[18:37:46] <sena_kun> see https://github.com/Raku/whateverable/blob/master/xbin/Releasable.p6#L42-L53 for the implementation
[18:39:16] <El_Che> if there are no candidates to take over rakudo start, I would suggest making the project less visible (rakudo site) or archived (issues on github). 2c etc
[18:40:20] <lizmat> El_Che: PRs welcome: https://github.com/Raku/raku.org
[18:41:08] <El_Che> lizmat: no, this is not a technical discussion, but more of a political one, e.g. rsc
[18:41:52] <lizmat> A draft PR is a good source of discussion :-)
[18:42:24] <MasterDuke> should we consider bundling zef in rakudo releases?
[18:42:27] <jdv> sena_kun: anyway - this is this release's list - https://gist.github.com/jdv/68a3ae15138eb7e16315e2d0053723af
[18:43:06] <lizmat> MasterDuke: that is definitely an option, at least for me :-)
[18:43:32] <El_Che> MasterDuke: I include it in my packages bacause without it is "no batteries included and we won´t tell which ones you need" :)
[18:43:54] <MasterDuke> yep, El_Che++
[18:44:08] <El_Che> it's less straight forward thant it sounds, though, raku going for the home install
[18:44:55] <lizmat> TIL El_Che's distributions have zef  :-)
[18:47:00] <sena_kun> jdv, looks alright to me.
[18:48:07] <jdv> i mean 93 is a lot more:)
[18:48:08] <jdv> cool
[18:50:21] <jdv> i'm honestly not sure why the bot picked up a bunch of those but i didn't look why yet
[18:51:01] <sena_kun> jdv, I think that's because we skipped 2021.11, so there was more time for people to do changes.
[18:51:28] <jdv> seems buggy as a bunch of the commits don't even exist in my repo or they aren't in master's ancestry
[18:51:33] <jdv> maybe i'll peek later
[18:51:59] <jdv> but, yeah the sheer volume is likely partly cause that
[18:52:21] <MasterDuke> there was a force push at one point
[18:52:40] <MasterDuke> maybe the bot needs a refreshed rakudo clone to work from
[18:53:34] <lizmat> yeah, there was a force push  :-(
[18:53:48] <MasterDuke> or something like `git reset --hard`
[18:56:06] <jdv> i imagined it was some form of git shenanigan
[18:56:11] <jdv> s
[18:58:47] <lizmat> the shenanigan was all of my making  :-(
[19:08:14] <jdv> it made the changelog figuring a challenge:)
[19:09:07] <lizmat> sorry, should have remembered and mentioned it :-(
[19:09:56] <ugexe> nine: you can run --/prove. the prove plugin itself just needs someone to wire zefs --verbose flag up to it
[19:11:25] <jdv> lizmat: oh there was no missing it, thanks
[19:13:06] <ugexe> nine: oh wait, thats using the TAP::Harness plugin. so `--/prove --/tap-harness`
[19:13:42] <ugexe> the TAP::Harness plugin could use better integration
[19:18:30] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 268 seconds)
[19:20:21] <El_Che> lizmat: https://github.com/rakudo/rakudo.org/pull/75
[19:22:55] *** Joins: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com)
[19:23:53] <jdv> for some reason i'm getting t/spec/S12-construction/destruction.t failures.  anyone else see that.
[19:24:12] <lizmat> jdv: I've seen them occasionally
[19:24:14] <jdv> odd cause i didn't rebuild since last night - right on head and i swear it was fine 
[19:24:30] <jdv> ignoreable?
[19:27:04] <MasterDuke> that's a flapper
[19:29:16] <mcmillhj> I am trying to update an Array with a response from a sub but it seems like an extra level of `[]` are being added. What's actually going on here so I can understand and avoid in the future: https://gist.github.com/mcmillhj/3ac9edc27423dfb71e4108da89274c7e ?
[19:29:17] <tellable6> 2021-12-22T17:43:55Z #raku <[Coke]> mcmillhj - it's the parens around ($should-continue, @buffer) - remove the parens and it works as you expect.
[19:29:17] <tellable6> 2021-12-22T18:14:25Z #raku <SmokeMachine> mcmillhj it seems if you replace the List `()` with a signature `:()` and the `=` with a `:=` you get what you want: https://glot.io/snippets/g5eg08jvxz
[19:29:34] <jdv> ok
[19:33:41] <mcmillhj> SmokeMachine: I am confused as to why that works. What is the difference between the Signature and a normal Capture?
[19:36:23] *** Quits: [Coke] (~coke@172.58.239.48) (Ping timeout: 268 seconds)
[19:39:13] <guifa> lizmat: data has been successfully pulled apart.  Currently working on deciding the best way API to expose "determine-stuff-based-on-calendrical-inputs" and "determine-stuff-based-on-posix-time-stamp", but I should have that figured out by tonight and integrated back into DateTime::Timezones for your loggable profit.  https://github.com/alabamenhu/TimezonesZoneInfo
[19:39:29] <lizmat> guifa++
[19:40:07] <guifa> also advantage of this: I can update the timezone data without needing to update the DateTime::Timezones module anymore (which is basically why I did the same thing with CLDR)
[19:40:17] <guifa> lizmat++ for putting the idea in my heda
[19:53:57] *** Quits: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[19:54:37] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[19:54:51] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea)
[20:18:03] *** Joins: slowtype- (~slowtyper@79.103.178.210.dsl.dyn.forthnet.gr)
[20:18:05] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 252 seconds)
[20:29:29] *** Joins: kjp (~kevin@n175-36-89-183.mrk2.qld.optusnet.com.au)
[20:38:28] *** Joins: morte_ (~user@190.148.157.89)
[20:59:19] *** Quits: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com) (Ping timeout: 256 seconds)
[21:20:48] *** Joins: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com)
[21:20:51] *** Quits: mcmillhj (~mcmillhj@c-va-bf0f2b8e02-14356-1.tingfiber.com) (Client Quit)
[21:30:11] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[21:37:21] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:45:28] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea) (Quit: This computer has gone to sleep)
[21:45:45] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea)
[21:49:31] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea) (Client Quit)
[21:53:18] *** Joins: holyghost (~holyghost@109.136.39.83)
[22:22:35] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit: This computer has gone to sleep)
[22:24:15] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea)
[22:34:47] *** Quits: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea) (Quit: This computer has gone to sleep)
[22:38:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[23:38:37] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[23:40:29] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[23:47:26] *** Joins: holyghost (~holyghost@2a02:a03f:64c8:9200:59eb:faf7:8533:1fea)
[23:52:20] <Skarsnik> hm, how do I use a 'module' defined in the same file that has a name like 'Foo::MyModule'?
[23:54:42] <tonyo> Skarsnik: if it's already in scope then no need to `use` it
[23:54:52] <tonyo> also, haven't seen your name in a long time
[23:58:16] <Skarsnik> pff, obviously trying to insolate a segfault from a big projet into a single file make it not segfault ><
