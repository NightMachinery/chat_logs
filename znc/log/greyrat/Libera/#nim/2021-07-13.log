[00:07:01] <FromDiscord> <konsumlamm> your Nim program crashes in debug mode but not in danger mode?
[00:07:17] <FromDiscord> <System64 ~ Flandre Scarlet> exactly
[00:08:58] <FromDiscord> <konsumlamm> then the danger version probably has UB
[00:10:25] <FromDiscord> <System64 ~ Flandre Scarlet> aaaalright!↵But I dunno if the UB comes from SDL2 or Tilengine
[00:11:49] <FromDiscord> <System64 ~ Flandre Scarlet> And I put some try except at suspicious places https://media.discordapp.net/attachments/371759389889003532/864230086932824086/message.nim
[00:12:57] <FromDiscord> <System64 ~ Flandre Scarlet> even with that it crashes without stacktrace
[00:15:05] <FromDiscord> <haxscramper> Run in debugger
[00:15:58] <FromDiscord> <System64 ~ Flandre Scarlet> how can I do that? I think it's debug by default
[00:16:26] <FromDiscord> <haxscramper> It is build in debug mode, not the same is running in debugger
[00:16:52] <FromDiscord> <haxscramper> On Linux you could do `gdb <options> ./program`
[00:17:23] <FromDiscord> <haxscramper> I usually do `gdb -batch -ex "run" -ex "bt" ./program`
[00:17:27] <FromDiscord> <System64 ~ Flandre Scarlet> I'm on Windows
[00:17:31] <FromDiscord> <haxscramper> well,
[00:18:30] <FromDiscord> <haxscramper> Maybe vscode can run nim with debugger
[00:20:16] <FromDiscord> <System64 ~ Flandre Scarlet> how can I do that?
[00:21:36] <FromDiscord> <jfmonty2> quick q: Is there a way to declare that a proc parameter should get the default value for its type if not explicitly specified?↵Like say I have `proc doSomething(a: array[5, int] = [0, 0, 0, 0, 0]) =`, is there a way to avoid writing out the whole array?
[00:22:29] <FromDiscord> <haxscramper> `default(<your type>)`
[00:22:38] <FromDiscord> <jfmonty2> ah perfect, thanks
[00:22:58] <FromDiscord> <haxscramper> We need to add counter for 'how to default init' things
[00:23:14] <FromDiscord> <haxscramper> Questions
[00:23:21] <FromDiscord> <System64 ~ Flandre Scarlet> ah I have gdb on Windows
[00:24:16] <FromDiscord> <System64 ~ Flandre Scarlet>  https://media.discordapp.net/attachments/371759389889003532/864233214658740234/unknown.png
[00:29:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[00:29:47] <FromDiscord> <haxscramper> You are running debug build?
[00:31:12] <FromDiscord> <System64 ~ Flandre Scarlet> I do ``nim compile -r myprogram.nim`` so yeah
[00:31:17] *** Parts: iortega (~inigo@94.73.53.254) ("")
[00:31:34] <FromDiscord> <System64 ~ Flandre Scarlet> Since default is debug https://media.discordapp.net/attachments/371759389889003532/864235049397125200/unknown.png
[00:37:23] <FromDiscord> <System64 ~ Flandre Scarlet> the only things I understand are Segfault and corrupt stack
[00:53:27] <FromDiscord> <System64 ~ Flandre Scarlet> So I have a segfault but where
[00:57:52] <FromDiscord> <dom96> @System64 ~ Flandre Scarlet this might help https://nim-lang.org/blog/2017/10/02/documenting-profiling-and-debugging-nim-code.html
[00:58:49] <FromDiscord> <PressF> sent a code paste, see https://play.nim-lang.org/#ix=3sNi
[00:59:00] <FromDiscord> <PressF> (edit) "https://play.nim-lang.org/#ix=3sNi" => "https://paste.rs/5q3"
[01:07:54] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 256 seconds)
[01:09:30] *** Joins: LyndsySimon (uid34452@id-34452.tooting.irccloud.com)
[01:09:39] <LyndsySimon> Oh, good. #nim is still alive.
[01:10:34] <FromDiscord> <haxscramper> Probably `foldl(1 .. n, a  b)`↵(@PressF)
[01:11:00] <FromDiscord> <haxscramper> !eval import std/sequtils; echo fold(1 .. 20, a \ b)
[01:11:04] <NimBot> Compile failed: /usercode/in.nim(1, 44) Error: invalid token:  (\29)
[01:11:46] <FromDiscord> <haxscramper> !eval import std/sequtils; echo fold(1 .. 20, a + b)
[01:11:51] <NimBot> Compile failed: /usercode/in.nim(1, 27) Error: undeclared identifier: 'fold'
[01:11:52] <FromDiscord> <System64 ~ Flandre Scarlet> alright segfault https://media.discordapp.net/attachments/371759389889003532/864245197570703410/unknown.png
[01:12:07] <FromDiscord> <System64 ~ Flandre Scarlet> segfault = null pointer right?
[01:12:18] <FromDiscord> <haxscramper> Ffs, anyway, we have folds in sequtils
[01:17:29] <FromDiscord> <kaushalmodi> !eval import std/sequtils; echo foldl(toSeq(1 .. 20), a  b)
[01:17:33] <NimBot> Compile failed: /usercode/in.nim(1, 51) Error: invalid token:  (\29)
[01:18:49] <FromDiscord> <System64 ~ Flandre Scarlet> the only problem I have is it doesn't say where
[01:18:51] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:19:15] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:19:25] <FromDiscord> <kaushalmodi> In reply to @PressF "Is it possible to": well.. in any case `foldl` works on Nim Playground: https://play.nim-lang.org/#ix=3sNv
[01:22:42] <FromDiscord> <kaushalmodi> @PressF And here's another approach, without using `sequtils`: https://play.nim-lang.org/#ix=3sNw
[01:22:52] <FromDiscord> <haxscramper> Well, time for one true debugging technique then↵(@System64 ~ Flandre Scarlet)
[01:23:00] <FromDiscord> <haxscramper> Dump crapload of prints into the code
[01:24:51] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @haxscramper "Dump crapload of prints": so the good old echo method?
[01:25:16] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-injectstmt-pragma
[01:25:53] <FromDiscord> <haxscramper> Paired with instantiationInfo().line you can construct a template
[01:26:22] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @haxscramper "Paired with instantiationInfo().line you": for me?
[01:30:02] <FromDiscord> <haxscramper> No, seems like this doesn't quite woke as I expected https://play.nim-lang.org/#ix=3sNx
[01:30:55] <FromDiscord> <System64 ~ Flandre Scarlet> nothing displayed
[01:34:10] <FromDiscord> <haxscramper> https://github.com/nim-lang/Nim/blob/devel/tests/pragmas/tinjectstmt.nim
[01:36:47] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sNB
[01:40:32] <FromDiscord> <Ayy Lmao> If I tag the MSG struct with `{.importc.}` it seems to work, but is that what I should be doing?
[01:43:11] <FromDiscord> <System64 ~ Flandre Scarlet> Humm crashed at the 1865th iteration of my callback https://media.discordapp.net/attachments/371759389889003532/864253076163395594/unknown.png
[01:51:39] <FromDiscord> <haxscramper> If you don't tag MSG object nim would of course generate definition for it, and this would be a different type from the compiler perspective↵(@Ayy Lmao)
[01:51:59] <FromDiscord> <haxscramper> So you need to importc(pp) thigs
[01:53:11] <mst> note also that if in doubt, I've done pretty well via the approach of "make a tiny tiny file that just has the struct and one function and then read the code the nim compiler generates"
[01:53:23] <FromDiscord> <haxscramper> Different from the C compiler perspective\
[01:53:24] <mst> I'm not particularly good at C/C++ but I can often figure stuff out from there
[01:54:07] <FromDiscord> <Ayy Lmao> In reply to @haxscramper "If you don't tag": I noticed in the generated code when you add `importc` it uses the actual type. So I need to make a windows API wrapper that has all structs with `importc` on them.
[01:54:32] <FromDiscord> <Ayy Lmao> Since the wrappers I've found seem to just label them with `{.pure.}`
[01:57:18] <FromDiscord> <haxscramper> Is that so? We have two windows API wrappers - they don't use importc?
[01:59:20] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sNC
[02:00:31] <FromDiscord> <Ayy Lmao> All I see in the Nim lib is `winlean.nim` which doesn't seem to have MSG defined
[02:01:27] <FromDiscord> <Ayy Lmao> I don't know my way around Nim that well though so I might be missing something
[02:03:01] <FromDiscord> <System64 ~ Flandre Scarlet> why do I have several errors? https://media.discordapp.net/attachments/371759389889003532/864258068584857651/unknown.png
[02:03:07] <FromDiscord> <haxscramper> It is quite strange winim uses pure
[02:03:18] <FromDiscord> <haxscramper> But you almost always want to use importc (pp)
[02:03:47] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:03:47] <FromDiscord> <haxscramper> Maybe there is some extreme edge case where pure is needed, but I'm not aware of it
[02:06:13] <FromDiscord> <Ayy Lmao> I don't even know what pure does in the context of an object. It doesn't work in my case though whatever it does
[02:24:58] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sNI
[02:45:25] *** Quits: max22- (~maxime@2a01cb08833598000eeb166e503f2175.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[03:05:05] *** Joins: mahlon (~mahlon@martini.nu)
[03:26:19] <FromDiscord> <theangryepicbanana> huh, found a thingy for interfaces <https://github.com/zielmicha/collections.nim/blob/master/collections/iface.nim>
[03:53:25] <FromDiscord> <Ayy Lmao> How do you link the windows API with `--cc:vcc`? I'm getting linker errors while using it and no errors when I don't
[04:03:49] <FromDiscord> <demotomohiro> --passL:"kernel32.lib"?
[04:10:11] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[04:10:20] <FromDiscord> <Ayy Lmao> --passL:"user32.lib" seems to work for me
[04:33:12] *** Joins: vicfred (~vicfred@user/vicfred)
[04:49:06] <FromDiscord> <retkid> Is there anyway I can program on my phone
[04:49:07] <FromDiscord> <retkid> Ugh
[04:49:10] <FromDiscord> <retkid> I just miss it
[04:49:15] <FromDiscord> <retkid> I need to practice
[04:50:35] <FromDiscord> <theangryepicbanana> In reply to @retkid "Is there anyway I": replit.com supports a (somewhat) recent version of nim
[04:51:07] <FromDiscord> <theangryepicbanana> the mobile code editor is really good
[04:51:26] <FromDiscord> <konsumlamm> ime, repl.it on mobile is horrible
[04:51:34] <FromDiscord> <theangryepicbanana> how long ago did you try it?
[04:51:40] <FromDiscord> <retkid> I can try it
[04:51:43] <FromDiscord> <konsumlamm> few months maybe
[04:51:50] <FromDiscord> <retkid> I’ll probably airplay it to my monitor
[04:52:06] <FromDiscord> <konsumlamm> entering a comma would repeat the input or some shit
[04:52:13] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "few months maybe": it's been getting worked on over the last several months (ik the person who's working on it)
[04:52:24] <FromDiscord> <theangryepicbanana> (edit) "worked on" => "improved"
[04:53:13] <FromDiscord> <theangryepicbanana> I use it on my phone sometimes and I haven't had any major issues
[04:53:17] <FromDiscord> <theangryepicbanana> (edit) "I use it on my phone sometimes and I haven't had any major issues ... " 03added "recently"
[04:55:33] <FromDiscord> <retkid> In reply to @theangryepicbanana "it's been getting improved": Why don’t you become a person working on it
[04:56:13] <FromDiscord> <theangryepicbanana> In reply to @retkid "Why don’t you become": I have been, just not specifically on the mobile controls (although that'll be fixed eventually anyways)
[04:56:47] <FromDiscord> <theangryepicbanana> (edit) "anyways)" => "anyways for reasons)"
[04:57:18] <FromDiscord> <theangryepicbanana> I can send a screen recording of me using nim on my phone if you want
[04:57:45] <FromDiscord> <retkid> I wanna learn how Nim compiled w JS n see if I can get some stuff working
[04:57:53] <FromDiscord> <retkid> Also Nim to Java compilation
[04:58:07] <FromDiscord> <theangryepicbanana> nim doesn't compile to java but sure lol
[04:58:25] <FromDiscord> <retkid> Compiles to C
[04:58:31] <FromDiscord> <retkid> Which can
[04:59:04] <FromDiscord> <theangryepicbanana> java doesn't compile to c
[04:59:39] <FromDiscord> <retkid> No you can compile to Java using weird tools
[04:59:41] <FromDiscord> <theangryepicbanana> But anyways here's the thing https://media.discordapp.net/attachments/371759389889003532/864302525863297034/video0.mov
[05:00:13] <FromDiscord> <theangryepicbanana> cut off a bit early at the end but eh
[05:00:19] <FromDiscord> <ElegantBeef> You could also use termux
[05:00:26] <FromDiscord> <theangryepicbanana> this works on ios too tho
[05:00:27] <FromDiscord> <ElegantBeef> But phone programming is scary
[05:00:39] <FromDiscord> <theangryepicbanana> nah
[05:00:47] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/864302801080680458/image0.png
[05:00:50] <FromDiscord> <retkid> Or I can try this
[05:00:55] <FromDiscord> <theangryepicbanana> I mean
[05:01:02] <FromDiscord> <theangryepicbanana> if you really want to go the hard way then sure
[05:01:23] <FromDiscord> <theangryepicbanana> oh did you meant testing java > nim separately from your phone thingy
[05:01:29] <FromDiscord> <theangryepicbanana> (edit) ">" => "->"
[05:01:50] <FromDiscord> <retkid> Kinda but this Linux stuff can’t really run in my phone or cloud
[05:02:07] <FromDiscord> <theangryepicbanana> no it'll work anyways
[05:02:15] <FromDiscord> <theangryepicbanana> replit doesn't run the code directly on your device
[05:02:31] <FromDiscord> <retkid> Ooo
[05:02:44] <fn> <11ForumUpdaterBot99> New post on r/nim by shujidev: Create an object in a macro, see https://reddit.com/r/nim/comments/oj4bnz/create_an_object_in_a_macro/
[05:02:48] <FromDiscord> <theangryepicbanana> it's run elsewhere (on a "cloud vm") and then it communicates with your phone like ssh or something
[05:02:49] <FromDiscord> <retkid> I wonder if I can get a Minecraft plugin to work
[05:02:56] <FromDiscord> <theangryepicbanana> yeah you can
[05:03:11] <FromDiscord> <theangryepicbanana> it's basically a virtual computer, even supports graphics and stuff
[05:03:25] <FromDiscord> <theangryepicbanana> that's why I can run nim on my iphone lol
[05:03:34] <FromDiscord> <retkid> I mean for jnim
[05:03:38] <FromDiscord> <theangryepicbanana> ah
[05:03:43] <FromDiscord> <theangryepicbanana> ig
[05:03:49] <FromDiscord> <retkid> Testing it on Minecraft won’t work haha
[05:04:17] <FromDiscord> <theangryepicbanana> you could technically run nim/java in minecraft lol
[05:04:21] <FromDiscord> <retkid> I also wanna see if I can get the Minecraft rending engine to render in an ascii pipe then play on terminal
[05:04:36] <FromDiscord> <retkid> In reply to @theangryepicbanana "you could technically run": Not for plugins tho I think those have to be Java
[05:04:49] <FromDiscord> <retkid> Think for mods you can use C binaries
[05:04:59] <FromDiscord> <theangryepicbanana> In reply to @retkid "Not for plugins tho": nah have you seen langcraft (or whatever it's called?)
[05:05:29] <FromDiscord> <theangryepicbanana> it's basically a version of llvm that compiles to minecraft datapacka
[05:05:30] <FromDiscord> <theangryepicbanana> (edit) "datapacka" => "datapacks"
[05:06:02] <FromDiscord> <theangryepicbanana> there's a video of someone running rust in minecraft, so I'm sure java/nim are possible ;)
[05:06:31] <FromDiscord> <retkid> I’m happy and sad to be alive in 2021
[05:06:38] <FromDiscord> <theangryepicbanana> this came out last year
[05:06:42] <FromDiscord> <theangryepicbanana> maybe 2019 idk
[05:06:45] <FromDiscord> <theangryepicbanana> very pog tho
[05:06:54] <FromDiscord> <retkid> All the good ideas are taken but also I have to do no work
[05:07:13] <FromDiscord> <theangryepicbanana> lol
[05:14:23] *** Joins: Figworm (FiggyWitIt@user/figworm)
[05:35:39] <FromDiscord> <Rika> a person here tried running nim for minecraft before
[05:35:49] <FromDiscord> <Rika> i dont know if they still use the same name as before
[06:17:59] <FromDiscord> <theangryepicbanana> I think I asked about this yesterday, but has there been any work done to (at least partially) implement vtable types or converter typeclasses?
[06:18:24] <FromDiscord> <theangryepicbanana> (would this be a better question for #internals?)
[06:27:49] <FromDiscord> <Bung> Error: cannot 'importc' variable at compile time; pipe, why I cant call io related proc like execCmdEx in macro ? since the macro only returns ast
[06:30:17] <FromDiscord> <Elegantbeef> Do you mean call it from the emitted code or from the code ran inside?
[06:31:14] <FromDiscord> <Elegantbeef> The nim vm cannot call C code so use `gorge` or  `staticExec` in place of `execCmdEx`
[06:40:46] <FromDiscord> <Bung> I mean inside macro body
[06:45:44] <FromDiscord> <Bung> nvm, give up
[07:37:48] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:14:55] <FromDiscord> <theangryepicbanana> found this black magic. dunno if it still works https://forum.nim-lang.org/t/3642#22706
[08:16:40] *** Joins: rockcavera (~rc@192.12.112.199)
[08:16:40] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[08:16:40] *** Joins: rockcavera (~rc@user/rockcavera)
[08:20:21] <FromDiscord> <Rika> Not recommended
[08:23:34] <FromDiscord> <theangryepicbanana> In reply to @Rika "Not recommended": why not?
[08:23:41] <FromDiscord> <theangryepicbanana> I don't care about overhead
[08:24:16] <FromDiscord> <Rika> Unsafe
[08:24:21] <FromDiscord> <Rika> Casting pointers to integers
[08:24:29] <FromDiscord> <theangryepicbanana> lol even better
[08:24:52] <FromDiscord> <theangryepicbanana> as long as it works without leaking too much memory, I don't mind
[08:25:05] <FromDiscord> <Rika> If you’re making a library, I advise against it
[08:25:09] <FromDiscord> <Rika> Otherwise whatever
[08:25:10] <FromDiscord> <theangryepicbanana> I'm not
[08:25:35] <FromDiscord> <Rika> Maybe look at the last link at the bottom of the page
[08:25:46] <FromDiscord> <theangryepicbanana> ok
[08:25:59] <FromDiscord> <theangryepicbanana> In reply to @Rika "Otherwise whatever": I'm, uh, compiling my language to nim in order to bootstrap it lol
[08:26:35] <FromDiscord> <theangryepicbanana> nim has pretty much everything I need except vtable types/interfaces
[08:28:09] <FromDiscord> <theangryepicbanana> my other solution was going to be abusing genericHead and concepts, but I like this more
[08:29:04] <FromDiscord> <theangryepicbanana> In reply to @Rika "Maybe look at the": bookmarked, will use as a backup
[08:32:52] <FromDiscord> <theangryepicbanana> oh imma assume neither of these will like generic virtual methods huh
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:30:55] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[10:14:53] <fn> <11ForumUpdaterBot99> New thread by Xioren: Don't understand macros compile error, see https://forum.nim-lang.org/t/8229
[10:35:40] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[10:52:37] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:37:53] <FromDiscord> <Bung> @ElegantBeef any news of nimscripter ?
[11:39:20] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:40:22] <FromDiscord> <ElegantBeef> Nope
[11:43:23] <FromDiscord> <Bung> gotcha
[11:44:52] <FromDiscord> <haxscramper> Have you looked at compiler API? You can basically write a frontend for your language and reuse all the other compilation parts (like C/Js/C++ backend) while not having to go through intermediate files↵(@theangryepicbanana)
[11:45:04] <FromDiscord> <haxscramper> That you call compiler on later
[11:47:36] <FromDiscord> <haxscramper> And I think that "nim has pretty much everything I need except vtable types/interfaces ... so I'm going to generate nim code" sounds a lot like macros. I'm pretty sure someone mentioned this already but still
[11:52:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:55:26] <fn> <11ForumUpdaterBot99> New post on r/nim by dild0ge: Any tutorials for absolute beginners?, see https://reddit.com/r/nim/comments/ojak73/any_tutorials_for_absolute_beginners/
[12:30:44] *** Joins: max22- (~maxime@2a01cb08833598009866f76288d7b8d6.ipv6.abo.wanadoo.fr)
[12:44:20] *** Quits: mahlon (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[12:45:46] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[12:54:07] *** Joins: mahlon (~mahlon@martini.nu)
[13:31:30] *** Joins: pro (~pro@user/pro)
[13:43:31] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[13:52:41] <FromDiscord> <bolino> Hi! Sorry for the stupid question. I couldn't find in the doc a good example of a function with an optional argument.
[13:52:57] <FromDiscord> <bolino> Hi! Sorry for the stupid question. I couldn't find in the doc a good example of a function with an optional argument.
[13:55:57] <FromDiscord> <bolino> sent a long message, see http://ix.io/3sPC
[13:56:19] <FromDiscord> <ElegantBeef> Well nim strings are not nilable
[13:56:42] <FromDiscord> <ElegantBeef> so it's just `size = ""` or `size: string = ""`
[13:57:17] <FromDiscord> <ElegantBeef> Do you want an `Option` or an optional argument?
[13:57:25] <FromDiscord> <ElegantBeef> They're two different things
[13:58:05] <FromDiscord> <bolino> Thanks. I guess I'm a bit confused between the two
[13:58:08] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/8Jk
[13:58:10] <FromDiscord> <haxscramper> If you want to use an option
[13:58:44] <FromDiscord> <ElegantBeef> Options are for having values that may or may not be present, a common case is having exceptionless error handling
[13:58:51] <FromDiscord> <ElegantBeef> They can be unpacked to get their internal value
[13:59:30] <FromDiscord> <ElegantBeef> Optional arguments are so you can just not include that parameter when calling so `proc a(huh = 30) echo huh` can be called `a(300)` or `a()`
[14:01:45] *** Quits: max22- (~maxime@2a01cb08833598009866f76288d7b8d6.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[14:01:48] <FromDiscord> <ElegantBeef> In the case that the return type is an `Option` you are supposed to do what hax shared where you check if it's some before doing `size.get` to retrieve that value
[14:06:23] *** Joins: sidro_ (~sidro@2a02:2f04:908:1100:bd10:c6c4:3ceb:b770)
[14:06:32] *** Parts: sidro_ (~sidro@2a02:2f04:908:1100:bd10:c6c4:3ceb:b770) (Konversation terminated!)
[14:10:24] <FromDiscord> <bolino> Thanks!
[14:10:26] <FromDiscord> <bolino> Will try
[14:11:11] *** Joins: xet7 (~xet7@user/xet7)
[14:21:36] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @System64 "why do I have": Do you know why I have theses errors please? fg is already declared and used
[14:26:20] <FromDiscord> <Rika> probably the indentation level
[14:38:18] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[14:40:19] *** Joins: pro (~pro@user/pro)
[14:49:28] <FromDiscord> <bolino> If we want a function to return a string in some case, and nothing in other case, should the return type be `Option[string]`?
[14:49:58] <FromDiscord> <Rika> yes
[14:50:21] <FromDiscord> <bolino> ...and in that case, to return nothing, it should be `return some(nil)`?
[14:51:21] <FromDiscord> <bolino> (I thought it should be either `nil` or `some(string)`)
[14:51:26] <FromDiscord> <Rann> hey can ask here faster-than-requests install ?
[14:51:27] <FromDiscord> <Rika> none(string)
[14:51:54] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:52:03] <FromDiscord> <bolino> Haaaa `some(string)`. Gotcha. Thanks!!!
[14:52:36] <FromDiscord> <Rika> remove the thought of "nil" when you're working with options
[15:10:07] <FromDiscord> <Rann> Hey i try install the pack "faster-than-requests" but get ERROR: Could not find a version that satisfies the requirement faster-than-requests↵ERROR: No matching distribution found for faster-than-requests
[15:14:21] <FromDiscord> <System64 ~ Flandre Scarlet> I still have one error with fg https://media.discordapp.net/attachments/371759389889003532/864457215993839616/unknown.png
[15:16:18] <FromDiscord> <haxscramper> can you show definition of the `onInject`
[15:18:03] <FromDiscord> <System64 ~ Flandre Scarlet>  https://media.discordapp.net/attachments/371759389889003532/864458140178055168/unknown.png
[15:18:07] <FromDiscord> <System64 ~ Flandre Scarlet> it's a template
[15:19:20] <FromDiscord> <haxscramper> ffs, I'm sorry for salt overload, but can you just read the error then? It says "type mismatch for `instantiationInfo`" - so we can safely assume that you have it called somewhere. If we look at the line 27 we can clearly see that you are passing something to `onInject` that gets expanded to `instantiationInfo`
[15:19:24] <FromDiscord> <haxscramper> And it you pass something to instantnation info
[15:19:49] <FromDiscord> <haxscramper> Or more specifically you pass thing to `onInject` and it directly expands to `instantiationInfo`
[15:20:28] <FromDiscord> <haxscramper> And it gives you error for type mismatch, I think we can conclude that whatever you passed to instantiation info was not what it expected
[15:20:53] <FromDiscord> <haxscramper> Specifically, it wants `int` for a first argument (which it does say in the error message)
[15:21:00] <FromDiscord> <haxscramper> But you've passed `TLN_Tilemap`
[15:21:26] <FromDiscord> <haxscramper> Which it also says in the same error message, also showsing you that `fg` that you passed is of type `TLN_Tilemap`
[15:21:42] <FromDiscord> <haxscramper> And all of that happened on line 27, which is also provided by the error message
[15:21:56] <FromDiscord> <System64 ~ Flandre Scarlet> I thought it was for seeing the content of an object or something like that
[15:22:06] <FromDiscord> <haxscramper> Not the most readable form of the message, I can agree to that
[15:22:08] <FromDiscord> <haxscramper> But still
[15:22:54] <FromDiscord> <haxscramper> So I think you just need to remove `fg` argument from `onInject`
[15:24:00] <FromDiscord> <haxscramper> or at least don't pass it to the instantiation info
[15:24:14] <FromDiscord> <System64 ~ Flandre Scarlet> and I need to remove the "a" thing to the template?
[15:24:49] <FromDiscord> <haxscramper> yes
[15:25:05] <FromDiscord> <bolino> I guess I have another question!
[15:26:45] <FromDiscord> <bolino> I guess I have another question!↵If we want to pass an optional array arg2 to a function (meaning the function can work with or without the arg2 array), can we do `proc myFuntion(arg1: string, arg2: Option[array], arg3: string ="")` ?
[15:27:25] <FromDiscord> <haxscramper> yes, you can also do arg2\: array = \<some meaningful default value\>\`
[15:27:49] <FromDiscord> <haxscramper> most of the time you would want to just use some meaninful defaults instead of just `Option`
[15:28:06] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/864460504814845953): yes, you can also do `arg2: array = <some meaningful default value>`
[15:28:10] <FromDiscord> <bolino> OK. Or an empty array like `arg2: array = array[]`? Then I'm not sure I know how to test if it's empty inside the function.
[15:28:47] <FromDiscord> <System64 ~ Flandre Scarlet> Interesting, I had an exception somewhere https://media.discordapp.net/attachments/371759389889003532/864460847546892308/unknown.png
[15:28:50] <FromDiscord> <haxscramper> 1. You can accept `seq[T]` and test it using `.len == 0`↵2. You can write a default value and avoid checking for thigns
[15:29:06] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[15:29:34] <FromDiscord> <haxscramper> Can also inject printf call that uses `LINE` from C↵(@System64 ~ Flandre Scarlet)
[15:29:43] <FromDiscord> <haxscramper> `instantiationInfo` seems to be working in somewhat unexpected manner
[15:30:55] <FromDiscord> <System64 ~ Flandre Scarlet> why printing something with C?
[15:31:59] <FromDiscord> <System64 ~ Flandre Scarlet> ah still have random crashes so my try-excepts doesn't protect from them
[15:35:41] <FromDiscord> <haxscramper> `proc onInject() {.nodecl, importc: """printf("%d\n", LINE);//""".}`
[15:35:58] <FromDiscord> <haxscramper> Also can you just test code incrementally
[15:36:43] <FromDiscord> <System64 ~ Flandre Scarlet> it only occurs if I have the Raster Callback AND the Audio Callback enabled
[15:43:10] <FromDiscord> <System64 ~ Flandre Scarlet> aaah I understand, it prints the line number
[15:49:23] <FromDiscord> <Rann> In reply to @Rann "Hey i try install": someone ? its full track https://dpaste.org/CQnc#L
[15:49:55] <FromDiscord> <haxscramper> `> pip install `
[15:49:56] <FromDiscord> <bolino> > 1. You can accept seq[T] and test it using .len == 0↵> 2. You can write a default value and avoid checking for thigns↵Yes, but the idea is to be able to pass the second argument, or not. Like `myFunc(arg1, arg2)` or `myFunc(arg1)`
[15:50:05] <FromDiscord> <haxscramper> Sorry but this is a nim server, not python
[15:50:23] <FromDiscord> <haxscramper> Which both solutions allow↵(@bolino)
[15:50:35] <FromDiscord> <haxscramper> `defaulted: seq[int] = @[]`
[15:50:50] <FromDiscord> <haxscramper> `if defaulted.len == 0: # we know it was defaulted`
[15:50:59] <FromDiscord> <haxscramper> `defaulted: array[3, int] = [1,2,3]`\`
[15:51:15] <FromDiscord> <haxscramper> WE DON'T CARE IF IT WAS DEFAULTED SINCE VALUE IS MEANINGFUL ANYWA
[15:52:08] <FromDiscord> <haxscramper> and I personally prefer to use latter one (especially over `Option[]`), since users don't have to slap `some` all over the place
[15:52:11] <FromDiscord> <bolino> Gotcha!
[15:52:48] <FromDiscord> <bolino> Better to use `Option` only for function returns then?
[15:52:48] <FromDiscord> <haxscramper> so sensible defaults is the best solutiopn
[15:53:11] <FromDiscord> <haxscramper> It depends on use case, but in short - yes, `Optino` is good for return
[15:53:21] <FromDiscord> <bolino> Okaye
[15:53:38] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/ikD
[15:53:56] <FromDiscord> <haxscramper> Since default value of the `AbsFile` is `""` which is an invalid state
[15:54:09] <FromDiscord> <haxscramper> Therefore I must explicitly say `Optional Absolute File`
[15:54:29] <FromDiscord> <haxscramper> But `forceBuild = false` is a perfectly fine default value, and `false` is a valid state for bool
[15:54:51] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sQt
[15:55:39] <FromDiscord> <haxscramper> `CliCheck` is `ref` itself, and this is a user-facing function, so I decided to just default to `nil` instead of an `Option`
[15:56:06] <FromDiscord> <haxscramper> So users can write `opt(check = cliCheckFor(int))` where `cliCheckFor` just returns `CliCheck` - not option
[15:58:37] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3sQv
[15:59:47] <FromDiscord> <haxscramper> 2.1.1\: "argument type does not have valid default state" or default state make things ambiguous. Things like `""` that might be valid by themselves, but don't convey "default value" in the given procedure
[16:00:46] <FromDiscord> <haxscramper> 3. You can use other arguments in expressions for default values `proc(input: AbsFile, output: AbsFile = input.withExt("out"))`
[16:01:30] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "nim has pretty much": i mean, if you're just compiling to Nim, you don't need those as Nim language features, assembly doesn't have vtables/interfaces either and C++ compiles to it just fine↵you can look how other languages implement them (for example, interfaces (or more generally, multiple inheritance) can be dine by using composition)
[16:01:33] <FromDiscord> <haxscramper> That is - if you want to have a cheat-sheet for this, but again - it all comes down to concrete use case
[16:02:04] <FromDiscord> <haxscramper> Does that make any sense? @bolino
[16:03:17] <FromDiscord> <bolino> Yes
[16:03:25] <FromDiscord> <bolino> Totally
[16:04:43] <FromDiscord> <Rika> In reply to @konsumlamm "i mean, if you're": I think they just want an easy solution
[16:05:06] <FromDiscord> <haxscramper> Though this does not always work, sometimes you can get "environment lacks \<other argument name\>" and I'm not sure how to fix this
[16:05:45] <FromDiscord> <haxscramper> And don't forget function can be called with named arguments, but I'm sure you are aware of that. Like `someProc("positional", defaultedArg = "hello")`
[16:28:42] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[16:29:52] *** Quits: pro (~pro@user/pro) (Ping timeout: 256 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:44:30] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "i mean, if you're": I specifically chose nim because of its type system, since it's the only language with a type system comparable to my own (which makes it easier to bootstrap my language since I can skip some typechecking)
[16:50:35] <FromDiscord> <theangryepicbanana> In reply to @haxscramper "Have you looked at": haxscramper: (idk if this will mention you on irc but eh) I kinda need Nim'a frontend though I think. Unless it has typechecking options/functionality, I'll need to keep targeting Nim itself because that's mainly why I'm doing so
[16:51:22] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[16:51:27] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[16:52:18] *** Joins: xet7 (~xet7@user/xet7)
[16:55:34] *** Joins: arkurious (~arkurious@user/arkurious)
[16:57:20] <FromDiscord> <System64 ~ Flandre Scarlet> I noticed something weird↵If the audio callback produce an effect (printing something in the console, generating sound, ...) while the Raster callback is active, crash
[16:57:59] <FromDiscord> <System64 ~ Flandre Scarlet> and seems it's only when the audio callback produces an effect↵I tried with a variable assignement only, no crash
[16:58:20] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[16:59:27] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "I specifically chose nim": what about Swift, C# or D?
[17:02:30] *** Joins: Vladar (~Vladar@46.162.2.53)
[17:02:57] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[17:05:02] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Excess Flood)
[17:06:12] <FromDiscord> <System64 ~ Flandre Scarlet> And I tried Nordaudio but the problem is, I have this error message https://media.discordapp.net/attachments/371759389889003532/864485360096903188/unknown.png
[17:09:34] <arkanoid> is it possible to define a polymorphic function type in nim?
[17:10:03] <FromDiscord> <System64 ~ Flandre Scarlet> a template I guess
[17:10:04] <arkanoid> I mean, how to "type" the function "func id[T](x: T): T = x" ?
[17:10:28] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[17:12:07] <arkanoid> I can write "type Fid = proc(x: int): int", but I need the generic type. Not sure if it is possible
[17:12:45] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[17:13:55] *** Joins: xet7 (~xet7@user/xet7)
[17:14:17] <arkanoid> nevermind, it was just "type Fid[T] = proc(x: T): T{.noSideEffect.}"
[17:16:15] <FromDiscord> <Bung> there's rfc about using func keyword like this
[17:17:17] <arkanoid> Bung, was that a quesion?
[17:17:35] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[17:17:54] <arkanoid> the compiler forces you to explicitly use proc+{.noSideEffect.} instead of func for function types
[17:18:12] <FromDiscord> <haxscramper> It can't find portaudio library↵(@System64 ~ Flandre Scarlet)
[17:18:17] <FromDiscord> <Bung> yeah, it's current behavior
[17:18:34] <FromDiscord> <Bung> might be change in future.
[17:30:17] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @haxscramper "It can't find portaudio": The dll is in the same folder than my code
[17:34:48] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "I specifically chose nim": what about Swift, C# or D?
[17:42:32] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "what about Swift, C#": swift doesn't have HKTs (higher-kinded types), and ref counting is also a bit of an issue. C# doesn't have complex generic constraints or HKTs, and D unfortunately doesn't support multiple inheritance
[17:43:05] <FromDiscord> <theangryepicbanana> like I could make D work, but it's probably more trouble than it's eorth
[17:43:08] <FromDiscord> <konsumlamm> Nim doesn't have HKTs either, does it?
[17:43:11] <FromDiscord> <theangryepicbanana> (edit) "eorth" => "worth"
[17:43:15] <FromDiscord> <theangryepicbanana> genericHead
[17:43:27] <FromDiscord> <theangryepicbanana> (& friends)
[17:43:41] <FromDiscord> <Rika> nim doesnt have multi inheritance either though?
[17:44:15] <FromDiscord> <theangryepicbanana> In reply to @Rika "nim doesnt have multi": as long as methods are a thing, I just need some form of interfaces
[17:44:33] <FromDiscord> <konsumlamm> uhh, that sounds like a horrible abuse of `genericHead`
[17:44:46] <FromDiscord> <theangryepicbanana> well that was gonna happen anyways lol
[17:45:21] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "as long as methods": D has interfaces and UFCS, so...
[17:45:53] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "D has interfaces and": yeah but interfaces can't have method bodies
[17:46:03] <FromDiscord> <theangryepicbanana> I also don't think D supports generic methods
[17:46:08] <FromDiscord> <konsumlamm> you mean default implementations?
[17:46:14] <FromDiscord> <theangryepicbanana> yeah basically
[17:46:16] <FromDiscord> <konsumlamm> why wouldn't it support generic methods?
[17:46:32] <FromDiscord> <theangryepicbanana> well, generic virtual methods
[17:46:43] <FromDiscord> <theangryepicbanana> same deal as c++
[17:47:08] <FromDiscord> <Rika> nim doesnt exactly have hkts either though??
[17:47:19] <FromDiscord> <theangryepicbanana> In reply to @theangryepicbanana "well, generic virtual methods": in nim they kinda work, which is better than not at all
[17:47:20] <FromDiscord> <Rika> as in you cant use a generic param as a type's head i believe
[17:47:46] <FromDiscord> <theangryepicbanana> In reply to @Rika "as in you cant": well also whichever other method lets you unpack a generic type
[17:48:02] <FromDiscord> <theangryepicbanana> either way, I can use more macros if necessary
[17:48:16] <FromDiscord> <Rika> i guess so
[17:48:46] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "genericHead": so how exactly does this work? instead of a HKT, you pass the type applied with some dummy type (e.g. `F[()]` instead of `F`) and then use `genericHead` on that?
[17:49:07] *** Joins: rockcavera (~rc@192.12.112.199)
[17:49:07] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[17:49:07] *** Joins: rockcavera (~rc@user/rockcavera)
[17:49:29] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "so how exactly does": something like that yeah
[17:49:53] <arkanoid> I'm doing some basic execises while reading a book about category theory. I need to type a function composition. How to fix the commented line? https://play.nim-lang.org/#ix=3sQU
[17:50:04] <FromDiscord> <theangryepicbanana> genericHead and stripGenericParams are basically what I need
[17:50:59] <FromDiscord> <konsumlamm> interesting, thanks for your explanations
[17:51:18] <FromDiscord> <theangryepicbanana> np
[17:51:50] <FromDiscord> <theangryepicbanana> here's a link to the lang if you're curious https://github.com/ALANVF/star
[17:52:30] <FromDiscord> <konsumlamm> thx
[17:52:36] <FromDiscord> <theangryepicbanana> you can think of the type system as a mix of c++20, scala 3, and nim (which is why it's difficult to typecheck lol)
[17:53:15] <FromDiscord> <theangryepicbanana> scala 3 would've worked if scala didn't have type erasure
[17:53:37] <FromDiscord> <konsumlamm> In reply to @arkanoid "I'm doing some basic": you want function composition... at the type level? do you know how this would work in something like Haskell (because i have no idea what you're trying to achieve here)
[17:55:12] <FromDiscord> <haxscramper> `>  mix of c++20, scala 3, and nim (which is why it's difficult to typecheck`Considering your plans I think you need to have a standalone implementation
[17:55:21] <FromDiscord> <haxscramper> Instead of trying to mix things on top of nim system
[17:55:58] <FromDiscord> <haxscramper> I have a feeling it just be a constant bug hunt due to nim type system not being exactly how you would like it to be
[17:56:34] <arkanoid> konsumlamm, the thing I'm trying to achieve is very easy in haskell (I don't know haskell, but book examples are in haskell). I'm just at page 3 :D. In haskell is the dot operator, it works like the pipe in bash: you have two functions, you pipe them together so the final function takes the input of the first one and returns the output of the second one https://wiki.haskell.org/Function_composition
[17:56:50] <FromDiscord> <haxscramper> And nim type system is not really that sophisticated I think - no HKT, single inheritance, no structural/SFINAE typing like in C++ templates
[17:57:06] <FromDiscord> <Rika> https://play.nim-lang.org/#ix=3sQX arkanoid
[17:57:08] <FromDiscord> <haxscramper> So it is not trivial as well, but
[17:57:54] <FromDiscord> <Rika> arkanoid please note that haskell's type system is much different from nim's...
[17:58:27] <FromDiscord> <konsumlamm> In reply to @Rika "arkanoid please note that": i just asked for the Haskell version because i'm familiar with it
[17:58:43] <arkanoid> Rika, thanks a lot. I do know that the type system is different, but I don't want to bend nim into haskell, just want to know how to improve my nim programming by using nim type system
[17:58:44] <FromDiscord> <konsumlamm> In reply to @haxscramper "And nim type system": Nim has no SFINAE? since when?
[17:58:50] <FromDiscord> <Rika> ok
[17:59:22] <FromDiscord> <haxscramper> Since when did it have SFINAE?↵(@konsumlamm)
[17:59:48] <FromDiscord> <haxscramper> `[T: not int]` is a generic narrowing IIRC, SFINAE refers to different way of picing overload candidates
[17:59:50] <FromDiscord> <konsumlamm> In reply to @arkanoid "<@312654963694108674>, the thing I'm": there's a difference between what you're doing and the thing you linked: you're just creating a type and no implementation for it
[18:00:21] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @System64 "The dll is in": I dunno if I missnamed it or if I should but the dll in another place or if it needs something else
[18:00:39] <FromDiscord> <konsumlamm> In reply to @haxscramper "Since when did it": you can substitute arbitrary types for (unconstrained) type parameters and only upon instantiation it is checked if the thing compiles, isn't that what SFINAE is?
[18:00:44] <FromDiscord> <haxscramper> SFINAE implies more parts of structural typing for templates, to allow for things like \`std\:\:enable\_if\<std\:\:is\_integral\_type\`\`\`
[18:00:53] <FromDiscord> <theangryepicbanana> In reply to @haxscramper "I have a feeling": probably, but even then I prefer nim because its macros are much more powerful than anything I could do in haxe (the lang I'm writing in) because it's a bit of a pain to do anything in haxe. also still has generic virtual methods, which is very rare lol
[18:01:05] <FromDiscord> <theangryepicbanana> In reply to @haxscramper "SFINAE implies more parts": that's what concepts are for
[18:01:20] <arkanoid> konsumlamm, sure, my exercise is about category theory so is all about thinking types first. The implementation comes later and may vary
[18:01:40] <FromDiscord> <konsumlamm> oh, so you're just trying to write down the type of the composition operator?
[18:02:51] <FromDiscord> <Rika> In reply to @theangryepicbanana "that's what concepts are": i dont think you can do what C++ can do just with concepts though?
[18:03:48] <arkanoid> konsumlamm, the type of the composition operator first, and then a generic composition operator later. But yeah, that's the point
[18:03:50] <FromDiscord> <konsumlamm> well, typeclasses can do this specific case, but in general Nim's (new-style) concepts are less powerful than C++ concepts i think
[18:04:10] <FromDiscord> <theangryepicbanana> In reply to @Rika "i dont think you": I think nim's concepts are actually more powerful than those in c++
[18:04:18] <FromDiscord> <theangryepicbanana> wrong reply but eh
[18:04:20] <arkanoid> konsumlamm, consider that I am noob at functional programming, so is all about bending the way  think about nim types
[18:04:49] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3sQY
[18:04:50] <FromDiscord> <Rika> idt this is possible
[18:04:59] <FromDiscord> <theangryepicbanana> it should be
[18:05:04] <FromDiscord> <Rika> well it isnt
[18:05:09] <FromDiscord> <Rika> (probably?)
[18:05:10] <FromDiscord> <Rika> therefore
[18:05:13] <FromDiscord> <Rika> no sfinae
[18:05:25] <FromDiscord> <theangryepicbanana> macro + typed + when should work then
[18:05:26] <FromDiscord> <Rika> (probably because ive never actually tested)
[18:05:32] <FromDiscord> <Rika> well that's not sfinae then
[18:05:44] <FromDiscord> <Rika> that's "manually doing sfinae"
[18:05:51] <FromDiscord> <theangryepicbanana> but I still think it's possible the other way
[18:06:14] <FromDiscord> <haxscramper> "Substitution Failure Is Not An Error"@konsumlamm)
[18:06:14] <FromDiscord> <haxscramper> So
[18:06:30] <FromDiscord> <haxscramper> So in short - I'm not sure if what nim does qualifies as SFINAE
[18:06:41] <FromDiscord> <haxscramper> concepts do something similar
[18:06:51] <FromDiscord> <haxscramper> Old concepts especally, with fields support and all that kind of stuff
[18:07:15] <FromDiscord> <haxscramper> But right now you can't put random constexpr in generic arguments
[18:07:18] <FromDiscord> <Rika> didnt araq say that new concepts can still express field existence?
[18:07:22] <FromDiscord> <haxscramper> To make it check for field existence say
[18:07:28] *** Joins: tiorock (~rc@192.12.112.199)
[18:07:28] *** Quits: tiorock (~rc@192.12.112.199) (Changing host)
[18:07:28] *** Joins: tiorock (~rc@user/rockcavera)
[18:07:28] *** rockcavera is now known as Guest3116
[18:07:28] *** tiorock is now known as rockcavera
[18:07:37] <FromDiscord> <haxscramper> I think it was "we will implement this"↵(@Rika)
[18:07:46] <FromDiscord> <Rika> so it can, just unimpl
[18:07:46] <FromDiscord> <Rika> okay
[18:07:58] <FromDiscord> <haxscramper> ye, of course everyone would ask for that
[18:08:03] <FromDiscord> <konsumlamm> arkanoid: i think you just want `Composition[A, B] = Function[A, B] -> Fid[A] -> Function[A, B]` (curried) or `Composition[A, B] = (Function[A, B], Fid[A]) -> Function[A, B]` (uncurried)
[18:08:05] <FromDiscord> <haxscramper> Maybe it even works RN
[18:08:30] *** Quits: Guest3116 (~rc@user/rockcavera) (Remote host closed the connection)
[18:08:43] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[18:08:44] <FromDiscord> <Rika> In reply to @konsumlamm "arkanoid: i think you": that doesnt look right to me, there should be three types shouldnt there?
[18:09:04] <FromDiscord> <Rika> three generic params i mean
[18:09:06] *** Joins: tiorock (~rc@192.12.112.199)
[18:09:13] <FromDiscord> <haxscramper> Also an interesting one https://github.com/nim-lang/Nim/blob/devel/compiler/sigmatch.nim#L1980
[18:09:29] *** tiorock is now known as rockcavera
[18:09:30] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[18:09:30] *** Joins: rockcavera (~rc@user/rockcavera)
[18:09:49] <FromDiscord> <konsumlamm> In reply to @Rika "that doesnt look right": if it's the type of the composition function, why would there be 3 parameters?
[18:10:14] <FromDiscord> <Rika> im trying to understand
[18:10:43] <FromDiscord> <Rika> it should take one `func[a,b] -> func[b,c] -> func[a,c]` no?
[18:10:51] <FromDiscord> <Rika> or am i mistaking something again
[18:11:38] <arkanoid> Rika, don't think so as the two types are function types
[18:11:49] <FromDiscord> <theangryepicbanana> In reply to @haxscramper "Also an interesting one": interesting
[18:11:56] <FromDiscord> <Rika> ah thats what you mean
[18:11:57] <FromDiscord> <Rika> okay
[18:12:09] <arkanoid> btw there's still something wrong then I try to implement a simple composition. Just try to run this: https://play.nim-lang.org/#ix=3sR0
[18:12:10] <FromDiscord> <Rika> i still dont get it but ok
[18:13:55] <FromDiscord> <konsumlamm> In reply to @Rika "it should take one": oh right, this makes more sense, i thought the second argument was supposed to be `Fid[A]`
[18:14:26] <FromDiscord> <Rika> im still confused
[18:14:40] <FromDiscord> <Rika> ok wait no yeah i think what i said is correct
[18:20:43] <FromDiscord> <System64 ~ Flandre Scarlet> @haxscramper Do you know how can I solve this issue please?
[18:22:14] <FromDiscord> <haxscramper> no
[18:22:24] <FromDiscord> <haxscramper> install missing libraries somehow
[18:24:37] *** Joins: max22- (~maxime@2a01cb08833598007f3d55a585e172c3.ipv6.abo.wanadoo.fr)
[18:25:59] <FromDiscord> <System64 ~ Flandre Scarlet> I dunno how I can install them
[18:28:59] <FromDiscord> <System64 ~ Flandre Scarlet> And there is nothing else than PortAudio and SDL2 for low level audio
[18:29:33] *** Quits: max22- (~maxime@2a01cb08833598007f3d55a585e172c3.ipv6.abo.wanadoo.fr) (Ping timeout: 276 seconds)
[18:35:37] <FromDiscord> <konsumlamm> In reply to @theangryepicbanana "I also don't think": i wanted to try it out (<https://run.dlang.io/is/IKEqUt>) and got a linker error lol
[18:43:19] <FromDiscord> <theangryepicbanana> In reply to @konsumlamm "i wanted to try": yeah I figured lmao
[18:48:29] <FromDiscord> <aleclarson> why can't subranges be backwards? https://play.nim-lang.org/#ix=3sRp
[18:48:52] <arkanoid> konsumlamm, I'm trying to follow your curried/uncurried compisition example, but I fear I'm not understanding it. Why Fid[A] comes into play?
[18:49:03] <FromDiscord> <Bung> can I get qualified name from typed arg in template ?
[18:49:17] <FromDiscord> <aleclarson> (edit) "https://play.nim-lang.org/#ix=3sRp" => "https://play.nim-lang.org/#ix=3sRp↵i can use `countdown` but the range syntax feels better \:P"
[18:51:12] <FromDiscord> <haxscramper> because it is not clear what correct semantics is↵(@aleclarson)
[18:51:35] <FromDiscord> <haxscramper> For example `for 0 .. someSeq.len - 1` currently iterates zero times
[18:52:13] <FromDiscord> <haxscramper> But with countdown it would iterate one time, giving `-1` value
[18:52:13] <FromDiscord> <haxscramper> You can overload `...` to make custom iterator for downcount
[18:52:17] <FromDiscord> <haxscramper> `getType`?↵(@Bung)
[18:52:46] <FromDiscord> <haxscramper> I'm not sure what do you mean by "qualified" thoug
[18:52:46] <FromDiscord> <haxscramper> `module.TypeName`?
[18:55:34] <FromDiscord> <Bung> eg. you get proc name want also get the module proc belongs
[18:56:34] <FromDiscord> <haxscramper> `.owner` is not explicitly exposed in the `std/macros`
[18:56:35] <FromDiscord> <konsumlamm> In reply to @arkanoid "<@312654963694108674>, I'm trying to": i misread the task, it should be `Function[B, C] -> Function[A, B] -> Function[A, C]` (curried)
[18:56:56] *** Joins: xet7 (~xet7@user/xet7)
[18:57:18] <FromDiscord> <haxscramper> You can try to `$` the type name and this might give you a module name
[18:57:45] <FromDiscord> <haxscramper> But in general macros can't go "up" in the semantic/syntactic tree
[18:58:10] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (*.net *.split)
[18:58:10] *** Quits: fputs (~fputs@137.220.33.212) (*.net *.split)
[18:58:14] <FromDiscord> <haxscramper> You can't get field's owner, encolosing scope, procedure module and so on
[18:58:17] <FromDiscord> <haxscramper> And I think that's a good thing
[19:01:48] <FromDiscord> <Bung> ah, very clear.
[19:02:00] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[19:02:48] <FromDiscord> <Rika> In reply to @konsumlamm "i misread the task,": wait why is it backwards now
[19:02:50] <FromDiscord> <Bung> found another load routes.
[19:02:57] <FromDiscord> <Bung> another way
[19:05:34] <arkanoid> konsumlamm, I think I've succeeded in implementing a trivial example https://play.nim-lang.org/#ix=3sRz
[19:05:56] *** Joins: fputs (~fputs@137.220.33.212)
[19:07:58] <arkanoid> is it possible to declare generic lambda?
[19:08:09] <arkanoid> or generic anonymous function
[19:09:16] <FromDiscord> <konsumlamm> In reply to @Rika "wait why is it": because composition is backwards in math
[19:09:55] <FromDiscord> <konsumlamm> In reply to @arkanoid "is it possible to": not with the lambda (`=>`) syntax sugar
[19:10:17] <FromDiscord> <konsumlamm> you can try to do `proc[T](...)`
[19:19:48] <arkanoid> konsumlamm, seems not possible with anonymous functions: https://play.nim-lang.org/#ix=3sRC
[19:21:07] <FromDiscord> <konsumlamm> hmm, too bad
[19:22:02] <FromDiscord> <konsumlamm> ig variables can't be generic
[19:22:23] <FromDiscord> <konsumlamm> maybe it works when you're directly passing it
[19:22:43] <FromDiscord> <konsumlamm> but then you'd probably need to define it as a local proc, using normal syntax
[19:28:04] <arkanoid> konsumlamm, no problem, it's just ok to know that
[19:43:24] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sS3
[19:43:25] <FromDiscord> <aleclarson> is there a shorthand for max possible `int`?
[19:43:41] <FromDiscord> <haxscramper> `high(int)`
[19:43:58] <FromDiscord> <aleclarson> thanks
[19:47:40] <FromDiscord> <haxscramper> Running the same compiled binary under gdb does not raise any exceptions
[19:48:21] <FromDiscord> <haxscramper> Certainly not from `nimBoolToStr`
[19:48:21] <FromDiscord> <haxscramper> I forgot to include last part of the message - `SIGSEGV: Illegal storage access. (Attempt to read from nil?)` (after `rawAlloc`)
[19:49:09] <FromDiscord> <haxscramper> Switching to `orc` does solve the issue, but I need to use `refc` because I haven't ported other parts to new runtime yet
[20:00:01] <FromDiscord> <Ayy Lmao> Does anyone know how to compile a .rc file with Nim? passC doesn't seem to work
[20:04:27] <arkanoid> konsumlamm, I've successful implemented the generic version of the function compose operator, problem is that the type generated by the generic function mismatch the type that should be https://play.nim-lang.org/#ix=3sSe
[20:06:06] <arkanoid> I'm also interested in hiding the "B" type value in the `|` compose operator
[20:09:08] *** Joins: max22- (~maxime@2a01cb0883359800c1f909e6e2585c38.ipv6.abo.wanadoo.fr)
[20:11:03] <FromDiscord> <konsumlamm> hmm, maybe a bug, maybe it's intended, idk
[20:11:20] <FromDiscord> <konsumlamm> Nim's type system isn't particularly good for that kinda stuff
[20:12:00] <FromDiscord> <konsumlamm> In reply to @arkanoid "I'm also interested in": i don't think that's possible or that it makes any sense
[20:14:23] <FromDiscord> <haxscramper> What is an rc file, and have you tried .compile.?↵(@Ayy Lmao)
[20:15:29] <arkanoid> konsumlamm, it's very possible, I feel like pushing nim type system beyond the nim requirements
[20:17:10] <FromDiscord> <konsumlamm> you probably are
[20:18:01] <FromDiscord> <Ayy Lmao> @haxscramper It is the way to describe window layouts and such in the windows API apparently. It's looking like I have to compile it with a special compiler and link compiled file
[20:21:18] *** Joins: xet7 (~xet7@user/xet7)
[20:34:02] <FromDiscord> <Ayy Lmao> After many many hours of fiddling around I finally got a popup window to open in a Reaper extension. The windows API is a pain
[20:35:38] <FromDiscord> <Ayy Lmao> Pretty cool though that it can be done with Nim, considering Reaper expects it to be done in C++. I don't know if any other languages are capable of this kind of feat
[20:37:57] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:41:44] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:41:55] <FromDiscord> <Rika> only C++? no possibility to do so in C?
[20:42:40] <arkanoid> here's a minimal example of what is puzzling me: https://play.nim-lang.org/#ix=3sSJ
[20:43:45] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3sSL
[20:45:17] <FromDiscord> <Rika> seems so indeed
[20:49:51] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:50:18] <FromDiscord> <Rika> arkanoid need to specify calling convention in pragmas `type Fid[A] = proc(x: A): A {.noSideEffect, nimcall.}`
[20:50:48] <FromDiscord> <Rika> (default is closure for proc types i believe?)
[20:50:49] <fn> <11ForumUpdaterBot99> New thread by Giaco: Function type check of generic function, see https://forum.nim-lang.org/t/8230
[20:51:50] <FromDiscord> <Bung> default closure
[20:51:51] <arkanoid> Rika, sorry I've pasted on the forum before reading your question. Let me check
[20:51:52] <FromDiscord> <Rika> arkanoid, are you giaco?
[20:51:56] <FromDiscord> <Rika> okay
[20:52:03] <arkanoid> it has been a matter of seconds
[20:52:13] <FromDiscord> <Rika> bung confirmed that default is closure for proc types
[20:52:24] <FromDiscord> <Rika> so yeah thats the cause
[20:52:43] <FromDiscord> <Rika> (top level procs are always nimcall unless otherwise specified)
[20:52:57] <FromDiscord> <Rika> but they cannot be closure ever i believe
[20:53:08] <FromDiscord> <TurtleP> sent a code paste, see https://play.nim-lang.org/#ix=3sSQ
[20:53:09] <arkanoid> yeah it works by specifying closure. I have to read what is this call convention thing
[20:54:32] <FromDiscord> <Bung> use `;` seperate your args
[20:55:53] <FromDiscord> <Rika> bung it should still work even with ,
[20:55:54] <FromDiscord> <Rika> comma
[20:57:13] <FromDiscord> <Rika> and even with ; it doesnt seem to work
[20:58:10] <FromDiscord> <Rika> ah
[20:58:12] <FromDiscord> <Rika> i misred
[20:58:21] <FromDiscord> <Rika> you're missing a colon at the if statement
[20:58:25] <FromDiscord> <Rika> misread
[20:58:28] <FromDiscord> <TurtleP> oh ffs
[20:58:35] <FromDiscord> <Rika> lmao
[20:58:43] <FromDiscord> <TurtleP> .. why is it always the dumb stuff
[20:58:46] <FromDiscord> <TurtleP> 😅
[20:58:48] <FromDiscord> <Rika> yeah same
[21:00:58] <FromDiscord> <Bung> okay
[21:03:08] <FromDiscord> <dom96> #CommaGangRepresent
[21:10:41] <FromDiscord> <Rika> i didnt notice the colon too, been coding in solely C for a while lately
[21:25:16] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Remote host closed the connection)
[21:27:11] <arkanoid> where are pushed and popped pragmas applied? Seems not applied to function type declarations: https://play.nim-lang.org/#ix=3sT2
[21:49:29] <FromDiscord> <haxscramper> pushed pragmas are applied only to procedures
[21:57:55] <FromDiscord> <haxscramper> only to procedure declarations\
[22:06:16] <arkanoid> thanks
[22:09:03] <arkanoid> I'm doing some experiments with nimcall and closure call conventions. It seems that it is quite messy to handle mixed calling conventions while playing with some functional programming concepts (default nim behavior) and it won't compile declaring all of them nimcall, but it will declaring all them as closure. What's the cons?
[22:10:21] <arkanoid> this goes agains the manual when it says "As a special extension, a procedure of the calling convention nimcall can be passed to a parameter that expects a proc of the calling convention closure."
[22:12:32] <arkanoid> here is where you find the relevant doc https://nim-lang.org/docs/manual.html#types-procedural-type
[22:13:30] <FromDiscord> <Rika> can you give an example of what "goes against the manual"
[22:19:29] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3sTy
[22:19:46] <arkanoid> I'm trying to reduce it to a minimal example. Do you know how to print the calling convention of a function?
[22:19:50] <arkanoid> it would help
[22:20:29] <FromDiscord> <haxscramper> Using `[]` explicitly works, but this is not a solution, since it looks extremely ugly - `[](1, 2 .. 3)`
[22:27:12] <FromDiscord> <gerwy> anyone here uses nim?
[22:27:20] <FromDiscord> <SolitudeSF> no
[22:28:04] <arkanoid> what is nim?
[22:50:23] <arkanoid> I'm going crazy writing a proc that converts a nimcall proc a a closure proc type
[22:52:56] *** Quits: max22- (~maxime@2a01cb0883359800c1f909e6e2585c38.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[23:17:21] <FromDiscord> <ynfle (ynfle)> Why? What are you trying to do?
[23:19:27] <arkanoid> ynfle, I'm trying to to write test cases where I check if a generic nimcall proc is of type declared into type block as generic proc type
[23:20:42] <arkanoid> meanwhile, I've found this: https://github.com/nim-lang/Nim/blob/version-1-4/lib/system.nim#L1515 , why this?
[23:21:59] <FromDiscord> <ynfle (ynfle)> My guess for compiler magic
[23:22:24] <FromDiscord> <ynfle (ynfle)> I'm not quite sure what you mean. You want to know if a proc is generic?
[23:30:16] <arkanoid> ynfle, no, let me show you my current experiment, but before that I need to understand why here I'm getting none: https://play.nim-lang.org/#ix=3sTZ
[23:31:16] <arkanoid> "compose" and "|" are exactly the same generic total funtion, but the "type" function works only for one of them
[23:32:28] *** Joins: max22- (~maxime@2a01cb0883359800bfc4d44b448805be.ipv6.abo.wanadoo.fr)
[23:33:48] <arkanoid> is this a bug?
[23:41:04] <FromDiscord> <Rika> A `|` exists in system
[23:41:17] <FromDiscord> <Rika> So basically nim cannot tell which you refer to
[23:41:33] <arkanoid> Rika, yes, here, and it is discarded https://github.com/nim-lang/Nim/blob/version-1-4/lib/system.nim#L1515
[23:41:54] <arkanoid> I'm overriding it, and the test confirms that it works correctly
[23:42:12] <FromDiscord> <Rika> You're not, you're overloading it
[23:42:33] <FromDiscord> <Rika> There is a fine distinction
[23:42:55] <arkanoid> wait, you're right, on the last line I'm not submitting parameters
[23:43:01] <FromDiscord> <Rika> Exactly
[23:43:21] <arkanoid> how to point nim in the right direction without providing parameters?
[23:43:48] <arkanoid> the `|` is declared in the root of the module, why is it picking the discarded one?
[23:44:05] <FromDiscord> <Rika> It's not picking the discarded one and it's not actually discarded?
[23:44:15] <FromDiscord> <Rika> It's an empty bodied proc not a discarded proc
[23:44:46] <arkanoid> it is not? :| what's the point
[23:44:47] <FromDiscord> <Rika> And why would nim give priority to a certain proc? That sounds like subtle bug to me
[23:45:17] <FromDiscord> <Rika> I don't know, it's probably there for some reason
[23:45:30] <arkanoid> surely it is not picking the most obvious one
[23:45:33] <FromDiscord> <Rika> Used in template constraint as an or operator perhaps
[23:45:44] <FromDiscord> <Rika> It is no more obvious than the other proc
[23:46:27] <arkanoid> well, how can I point to the one declared in module in that echo line?
[23:48:15] <FromDiscord> <Rika> I do not think there is a way currently
[23:48:25] <FromDiscord> <Rika> I feel like araq discussed a solution before
[23:51:36] <arkanoid> interesting, but quite hard to track. Do you have any pointer?
[23:52:46] <arkanoid> in the meanwhile, I will just obviously change symbol (even if pipe was perfect for the job)
