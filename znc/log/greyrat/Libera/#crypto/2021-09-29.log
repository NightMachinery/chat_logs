[00:00:41] *** Joins: shariashaman1 (~Rheanna@218.78.43.189)
[00:01:53] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Ping timeout: 264 seconds)
[00:21:34] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[00:27:09] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[00:39:24] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[00:42:44] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:43:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:45:31] *** Lord_of_Life_ is now known as Lord_of_Life
[00:49:25] *** Quits: shariashaman1 (~Rheanna@218.78.43.189) (Remote host closed the connection)
[00:50:34] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[01:21:00] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[01:23:15] *** Quits: Narrat (~omnius@p200300df5f13e70206ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:37:00] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[01:38:00] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[01:38:28] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[01:39:18] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[01:41:20] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[01:41:21] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[01:43:53] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:59:35] *** JudyRiuliani is now known as Hash
[02:03:01] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[02:07:12] *** Joins: jess (~jess@libera/staff/jess)
[02:08:23] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[02:15:54] *** Quits: norskalm (~norskalm@101.175.64.73) (Quit: Client closed)
[02:16:29] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:18:08] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:18:41] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[02:22:28] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[02:25:25] *** Joins: somlis (~somlis@user/somlis)
[02:25:56] *** Joins: paul0 (~paul0@2804:1b3:8401:fbfd:3084:2011:c0da:5b95)
[02:28:34] *** Joins: somlis2 (~somlis@user/somlis)
[02:29:21] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Remote host closed the connection)
[02:29:23] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[02:31:46] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[02:32:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[02:37:30] *** Joins: igemnace (~ian@user/igemnace)
[02:42:33] *** Joins: as2334 (~as2334@host193.181-1-131.telecom.net.ar)
[02:44:36] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[02:51:04] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:51:14] *** Joins: monopuff (~Mr@143.244.34.155)
[03:06:46] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 245 seconds)
[03:08:13] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.2)
[03:19:16] *** Quits: mei (~mei@user/mei) (Ping timeout: 245 seconds)
[03:19:16] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[03:21:16] *** Joins: shariashaman (~Rheanna@119.96.171.22)
[03:22:57] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[03:25:56] *** Quits: stoner19 (~stoner19@2a02:c207:2022:1374::1) (Ping timeout: 245 seconds)
[03:27:12] *** Joins: stoner19 (~stoner19@vmi221374.contaboserver.net)
[03:34:48] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[03:35:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[03:44:35] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[03:44:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:52:16] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[03:58:49] *** Quits: BadKarma (~BadKarma@user/badkarma) (Quit: night)
[04:08:56] *** Quits: shariashaman (~Rheanna@119.96.171.22) (Remote host closed the connection)
[04:10:05] *** Joins: shariashaman (~Rheanna@101.91.238.197)
[04:18:43] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[04:23:44] *** Joins: white5moke (~pi0xxdmqj@ip72-219-109-30.oc.oc.cox.net)
[04:40:08] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[04:58:31] *** Quits: shariashaman (~Rheanna@101.91.238.197) (Remote host closed the connection)
[05:00:55] *** Joins: shariashaman (~Rheanna@101.89.197.243)
[05:01:00] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[05:08:12] *** Quits: white5moke (~pi0xxdmqj@ip72-219-109-30.oc.oc.cox.net) (Remote host closed the connection)
[05:08:48] *** Quits: Torr (~Torr@user/torr) ()
[05:09:00] *** Joins: Torr (~Torr@user/torr)
[05:17:38] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:20:31] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[05:28:31] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[05:33:50] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[05:34:17] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:35:27] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[05:35:49] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:41:46] *** Joins: defjam (~eb0t@90.196.142.47)
[05:54:23] *** Joins: frost (~frost@59.71.244.36)
[06:01:48] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[06:14:54] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[06:15:31] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[06:32:02] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[06:33:00] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[06:35:28] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 250 seconds)
[06:36:17] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[06:38:36] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[06:38:54] *** Quits: shariashaman (~Rheanna@101.89.197.243) (Remote host closed the connection)
[06:41:46] *** Joins: shariashaman (~Rheanna@101.91.192.124)
[06:45:56] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[06:48:11] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 252 seconds)
[06:55:49] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[06:58:03] *** Joins: MrMattsmind (~mrmattsmi@user/mrmattsmind)
[06:58:20] *** Parts: MrMattsmind (~mrmattsmi@user/mrmattsmind) ()
[07:02:26] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:06:19] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[07:13:01] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 245 seconds)
[07:16:15] *** Joins: szarkaorg (~szarka@2001-48F8-9004-E05-B08A-A32-A3B7-5E73-dynamic.midco.net)
[07:17:15] *** Joins: Wulf (~Wulf@user/wulf)
[07:19:28] *** Quits: szarka (~szarka@2001-48F8-9004-E05-4025-B9C7-87F1-A45-dynamic.midco.net) (Ping timeout: 252 seconds)
[07:20:00] *** Joins: terminaldweller (~devi@192.99.102.52)
[07:29:29] *** Quits: shariashaman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[07:31:00] *** Joins: shariashaman (~Rheanna@101.91.180.110)
[07:54:39] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[08:00:48] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[08:08:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 246 seconds)
[08:08:29] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[08:10:53] *** Quits: somlis2 (~somlis@user/somlis) (Read error: Connection reset by peer)
[08:16:59] *** Quits: defjam (~eb0t@90.196.142.47) (Ping timeout: 246 seconds)
[08:19:02] *** Joins: defjam (~eb0t@90.202.255.249)
[08:19:02] *** Quits: shariashaman (~Rheanna@101.91.180.110) (Remote host closed the connection)
[08:20:08] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 246 seconds)
[08:20:39] *** Joins: shariashaman (~Rheanna@218.78.27.29)
[08:22:16] *** Joins: terminaldweller (~devi@5.115.239.241)
[08:28:40] *** Quits: Torr (~Torr@user/torr) ()
[08:28:51] *** Joins: Torr (~Torr@user/torr)
[08:33:47] *** Quits: terminaldweller (~devi@5.115.239.241) (Read error: Connection reset by peer)
[08:37:45] *** Joins: terminaldweller (~devi@192.99.102.52)
[08:45:31] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[08:51:47] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:52:12] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[08:52:31] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[08:52:59] *** Joins: Andrew_ (~andrew@user/andrewyu)
[08:53:35] *** Quits: AndrewYu (~andrew@user/andrewyu) (Ping timeout: 252 seconds)
[08:54:16] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[08:56:58] *** Joins: mei (~mei@user/mei)
[08:57:37] *** Joins: byteskep1ical (~amnesia@user/byteskeptical)
[09:00:39] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 265 seconds)
[09:11:52] *** Quits: electr0n (~electr0n@about/security/founder/electr0n) (Quit: WeeChat 3.2.1)
[09:24:42] *** Quits: paul0 (~paul0@2804:1b3:8401:fbfd:3084:2011:c0da:5b95) (Quit: Leaving)
[09:42:04] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[09:43:09] *** Quits: byteskep1ical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[09:47:03] *** Quits: as2334 (~as2334@host193.181-1-131.telecom.net.ar) (Remote host closed the connection)
[09:57:05] *** smol_dragon is now known as A_Dragon
[09:59:20] *** Joins: qbt (~edun@user/edun)
[10:08:26] *** Quits: defjam (~eb0t@90.202.255.249) (Ping timeout: 245 seconds)
[10:10:18] *** Joins: defjam (~eb0t@90.209.55.200)
[10:10:19] *** Joins: rk4 (~r@user/rk4)
[10:13:56] *** Joins: JeSCaLis23-F (~rizon@188.119.22.153)
[10:14:08] <rk4> supposing you had a system you didn't really trust with, for example, social security numbers, but wanted to feed it SSNs purely for the sake of correlation, like being able to identify two accounts had the same SSN. i was thinking of using a keyed hash function on the SSNs then passing it to the system. thoughts on alternative schemes? [an invertable transformation is not required, infact i'd rather prefer 
[10:14:14] <rk4> if it wasn't easily inverted]
[10:15:15] <rk4> feels like this ought to be a common thing in data processing systems, so there's going to be some prior art somewhere...
[10:16:04] *** Quits: JeSCaLis23-F (~rizon@188.119.22.153) (Client Quit)
[10:18:41] *** Quits: shariashaman (~Rheanna@218.78.27.29) (Ping timeout: 264 seconds)
[10:24:48] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[10:32:11] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[10:41:28] *** Joins: igemnace_ (~ian@user/igemnace)
[10:41:37] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[10:45:48] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[10:49:46] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[11:04:07] *** Quits: defjam (~eb0t@90.209.55.200) (Read error: Connection reset by peer)
[11:07:33] *** Joins: shariashaman (~Rheanna@101.91.192.124)
[11:08:18] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[11:09:34] *** Joins: defjam (~eb0t@90.199.243.11)
[11:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:31] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[11:37:50] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:38:51] *** Quits: shariashaman (~Rheanna@101.91.192.124) (Remote host closed the connection)
[11:38:54] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:54] *** Joins: vernaz (~vernaz@148.63.127.167)
[11:41:58] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[11:45:14] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:52:11] *** Joins: andreasbuhr (~quassel@p5dcf93fa.dip0.t-ipconnect.de)
[11:52:11] *** Quits: andreasbuhr (~quassel@p5dcf93fa.dip0.t-ipconnect.de) (Client Quit)
[11:52:18] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[11:52:26] *** Quits: cacu[m] (~cacuconve@2001:470:69fc:105::b9df) (Quit: Bridge terminating on SIGTERM)
[11:52:29] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Quit: Bridge terminating on SIGTERM)
[11:52:34] *** Quits: duck[m] (~duckm]@user/duckm/x-2763650) (Quit: Bridge terminating on SIGTERM)
[11:52:45] *** Quits: jtgd (~jtgd@user/jtgd) (Quit: WeeChat 3.2.1)
[11:53:19] *** Joins: jtgd (~jtgd@user/jtgd)
[11:55:21] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[12:00:17] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 246 seconds)
[12:01:19] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[12:01:19] *** Joins: duck[m] (~duckm]@user/duckm/x-2763650)
[12:01:30] *** Joins: terminaldweller (~devi@192.99.102.52)
[12:01:31] *** Joins: cacu[m] (~cacuconve@2001:470:69fc:105::b9df)
[12:13:39] *** Quits: Amadiro (~Amadiro@84.209.11.12) (Remote host closed the connection)
[12:14:56] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 252 seconds)
[12:20:54] *** Joins: terminaldweller (~devi@192.99.102.52)
[12:24:30] *** Joins: Klotz (~Klotzoman@gateway/tor-sasl/klotz)
[12:30:07] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:34:48] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[12:35:30] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[12:35:45] *** Joins: edk (edk@libera/staff/edk)
[12:36:05] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 265 seconds)
[12:37:00] *** Joins: terminaldweller (~devi@192.99.102.52)
[12:37:07] *** Quits: Klotz (~Klotzoman@gateway/tor-sasl/klotz) (Quit: Klotz)
[12:48:59] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 252 seconds)
[12:53:20] *** Quits: ndo- (~ndo@user/ndo-) (Quit: Got Arrostelli?)
[12:53:52] *** Joins: somlis (~somlis@user/somlis)
[12:57:05] *** Joins: norskalm (~norskalm@101.175.64.73)
[13:00:09] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:02:57] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[13:09:41] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 245 seconds)
[13:11:02] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:19:00] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[13:19:01] *** Quits: shariashaman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[13:19:35] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 265 seconds)
[13:20:17] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[13:20:27] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:29:51] *** Joins: BadKarma (~BadKarma@user/badkarma)
[13:30:56] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 245 seconds)
[13:32:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[13:33:18] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:42:45] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:48:26] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 245 seconds)
[13:49:30] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:56:05] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 252 seconds)
[13:56:56] *** Joins: terminaldweller (~devi@192.99.102.52)
[13:57:05] *** Joins: mouseghost (~draco@user/mouseghost)
[14:04:35] *** Joins: somlis (~somlis@user/somlis)
[14:06:55] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:21ef:5fa3:7f26:ea34)
[14:08:26] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 245 seconds)
[14:09:17] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Remote host closed the connection)
[14:09:38] *** Joins: terminaldweller (~devi@192.99.102.52)
[14:11:29] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[14:13:07] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 240 seconds)
[14:14:38] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[14:14:43] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[14:18:09] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[14:37:47] *** Joins: Lochnair (~Lochnair@wireguard/contributor/lochnair)
[14:40:58] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[14:44:16] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Ping timeout: 245 seconds)
[14:46:10] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[14:46:40] *** Joins: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net)
[14:51:52] *** Quits: shariashaman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[14:52:23] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[14:54:42] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[15:03:26] *** Quits: yggdrasil (~yggdrasil@67-0-5-162.albq.qwest.net) (Ping timeout: 245 seconds)
[15:05:12] *** Joins: yggdrasil (~yggdrasil@67-0-66-157.albq.qwest.net)
[15:05:59] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[15:10:20] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 252 seconds)
[15:11:51] *** Joins: terminaldweller (~devi@5.115.239.241)
[15:12:25] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[15:13:37] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[15:17:20] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:17:52] *** Joins: andreasbuhr (~quassel@p5dcf93fa.dip0.t-ipconnect.de)
[15:17:52] *** Quits: andreasbuhr (~quassel@p5dcf93fa.dip0.t-ipconnect.de) (Client Quit)
[15:20:53] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[15:21:08] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:27:47] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[15:28:32] *** Joins: dez (uid92154@user/dez)
[15:29:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:32:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[15:36:00] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[15:36:44] *** Quits: shariashaman (~Rheanna@101.89.207.55) (Remote host closed the connection)
[15:37:55] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[15:41:20] *** Quits: igemnace_ (~ian@user/igemnace) (Quit: WeeChat 3.2.1)
[15:41:21] *** Quits: terminaldweller (~devi@5.115.239.241) (Read error: Connection reset by peer)
[15:49:16] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[15:51:53] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[15:56:55] *** Joins: terminaldweller (~devi@5.115.239.241)
[16:04:47] *** Quits: BadKarma (~BadKarma@user/badkarma) (Ping timeout: 252 seconds)
[16:09:11] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[16:09:46] *** Joins: linear_cannon (~linear@50.35.78.163)
[16:18:29] *** Joins: BadKarma (~BadKarma@user/badkarma)
[16:23:46] *** Joins: szarkanet (~szarka@2001-48F8-9004-E05-180C-FFB8-1B1D-6DB0-dynamic.midco.net)
[16:24:28] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:26:38] *** Quits: szarkaorg (~szarka@2001-48F8-9004-E05-B08A-A32-A3B7-5E73-dynamic.midco.net) (Ping timeout: 246 seconds)
[16:34:00] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:34:04] *** Quits: zegalch (~zegalch@178.128.75.133) (Remote host closed the connection)
[16:34:21] *** Joins: zegalch (~zegalch@178.128.75.133)
[16:38:51] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[16:40:25] *** Joins: shariashaman (~Rheanna@218.78.43.189)
[16:42:53] *** Quits: lxlldr (~I@a89-152-175-20.cpe.netcabo.pt) (Ping timeout: 268 seconds)
[16:45:44] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:46:05] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:46:52] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[16:48:43] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:49:16] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:50:07] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[16:50:43] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:51:39] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:52:53] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 264 seconds)
[16:52:58] *** Guyver2_ is now known as Guyver2
[16:53:13] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[16:53:37] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[16:54:30] <Alipha> rk4: yeah, I'd go with a keyed hash. Preferably a slow hash function, such as argon2 with a static salt and key.
[16:57:05] *** Quits: terminaldweller (~devi@5.115.239.241) (Read error: Connection reset by peer)
[16:57:22] * rk4 nods
[16:58:04] <ms7821> but don't forget that if the system ever gets hold of the key it can brute force them because the keyspace is pretty small
[16:58:39] <ms7821> (or in a more realistic model, an attacker gets hold of both the key and the DB)
[17:01:22] *** Joins: terminaldweller (~devi@192.99.102.52)
[17:06:16] *** Quits: terminaldweller (~devi@192.99.102.52) (Ping timeout: 265 seconds)
[17:06:56] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Ping timeout: 252 seconds)
[17:07:35] *** Joins: terminaldweller (~devi@ip137.ip-145-239-165.eu)
[17:08:31] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:21ef:5fa3:7f26:ea34) (Ping timeout: 252 seconds)
[17:09:31] *** Joins: rtypo (~alex@user/rtypo)
[17:11:37] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[17:12:01] *** Joins: mouseghost (~draco@user/mouseghost)
[17:12:03] *** Joins: eck (~root@user/eck)
[17:14:22] <rk4> yeah quite, i can't think of a scheme without that weakness. the best mitigation i can think of is in the cases where correlation doesn't have to be exact, we could use a relatively small output and induce collisions, making brute forcing less interesting. but for some of these bits of data collisions in whatever scheme i use are not desirable
[17:15:22] <ms7821> yeah, unfortunately that's probably the case
[17:16:24] <ms7821> I'd focus time on isolating the DB that needs to store these values and monitoring it hard (or minimising the amount it needs to store, age stuff out, etc)
[17:16:44] <MacGyver> I'd explore options where the correlation isn't done by a central system.
[17:17:32] <ms7821> yeah, think of it as a DB of very weak but important passwords, and treat appropriately
[17:17:53] <MacGyver> Signal has a similar problem of detecting phone numbers linked to accounts without having to send the entire address book to the server; iirc they have the phone do that linking and use bloom filters and limit the amount of data to send to the phone.
[17:20:36] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[17:21:15] *** Joins: Colti (Miramar-FL@user/host-pond)
[17:21:53] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[17:26:43] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Quit: unmanbearpig)
[17:27:12] *** Joins: unmanbearpig (~unmanbear@45.76.95.141)
[17:27:27] *** Joins: WishBoy (~WishBoy@user/wishboy)
[17:45:30] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[17:47:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:57:51] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[18:09:23] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[18:15:27] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[18:18:51] *** Quits: shariashaman (~Rheanna@218.78.43.189) (Remote host closed the connection)
[18:20:31] *** Joins: vernaz (~vernaz@148.63.127.167)
[18:20:54] *** Joins: shariashaman (~Rheanna@101.89.154.192)
[18:40:45] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[18:49:14] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[18:51:41] *** Joins: linear_cannon (~linear@50.35.78.163)
[18:54:29] *** Quits: linear_cannon (~linear@50.35.78.163) (Read error: Connection reset by peer)
[18:58:20] *** Joins: linear_cannon (~linear@50.35.78.163)
[18:59:08] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 252 seconds)
[19:04:32] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:04:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:08:08] *** Quits: norskalm (~norskalm@101.175.64.73) (Ping timeout: 256 seconds)
[19:15:44] *** Joins: notouchpad (~notouchpa@wifi-eduroam-84-030.paris.inria.fr)
[19:27:14] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[19:29:54] *** Joins: linear_cannon (~linear@50.35.78.163)
[19:39:24] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:44:05] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[19:44:06] *** Quits: shariashaman (~Rheanna@101.89.154.192) (Remote host closed the connection)
[19:44:30] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[19:46:09] *** Joins: shariashaman (~Rheanna@101.91.214.30)
[19:49:52] *** Quits: notouchpad (~notouchpa@wifi-eduroam-84-030.paris.inria.fr) (Quit: Leaving)
[19:51:26] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:00:21] *** Quits: tkob (tkob@shell.xshellz.com) (Remote host closed the connection)
[20:06:33] *** Quits: BadKarma (~BadKarma@user/badkarma) (Quit: reboot)
[20:06:33] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[20:08:03] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[20:09:05] *** Joins: BadKarma (~BadKarma@user/badkarma)
[20:11:07] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[20:11:33] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 250 seconds)
[20:12:56] *** Joins: linear_cannon (~linear@50.35.78.163)
[20:22:55] *** Joins: Narrat (~omnius@p200300df5f13e77906ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:28:39] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[20:29:45] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 265 seconds)
[20:30:54] *** Joins: linear_cannon (~linear@50.35.78.163)
[20:32:10] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 265 seconds)
[20:32:11] *** Guyver2_ is now known as Guyver2
[20:43:38] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[20:47:30] *** Joins: aleck1 (~aleck@user/aleck)
[20:48:47] *** Quits: shariashaman (~Rheanna@101.91.214.30) (Remote host closed the connection)
[20:49:48] *** Joins: ytrezq (~0x0EDFADE@2a01:e0a:401:a7c0:e04e:39e2:eeb4:a4b4)
[20:49:50] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 246 seconds)
[20:50:02] *** Joins: linear_cannon (~linear@50.35.78.163)
[20:51:13] <ytrezq> Hello, I?ve stumbled on this code https://crypto.stackexchange.com/q/95352 on what appears to be reversed Merkle trees. How those preimages can be computed at will??
[20:51:42] *** Joins: shariashaman (~Rheanna@101.91.193.123)
[20:53:32] <ms7821> are you reading the order of the proofs backwards?
[20:54:20] *** Quits: linear_cannon (~linear@50.35.78.163) (Read error: Connection reset by peer)
[20:54:57] *** Joins: linear_cannon (~linear@50.35.78.163)
[20:58:32] *** Joins: monopuff9 (~Mr@143.244.34.17)
[20:58:43] *** Joins: Shanzem (~Shanzem@86.31.109.147)
[21:00:45] *** Quits: Shanzem (~Shanzem@86.31.109.147) (Client Quit)
[21:00:50] *** Quits: monopuff (~Mr@143.244.34.155) (Ping timeout: 250 seconds)
[21:04:06] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Read error: Connection reset by peer)
[21:04:53] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[21:06:43] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[21:08:46] *** Joins: JollyRoger (~JollyRoge@user/thejollyroger)
[21:13:20] *** Quits: linear_cannon (~linear@50.35.78.163) (Ping timeout: 252 seconds)
[21:13:57] *** Joins: linear_cannon (~linear@50.35.78.163)
[21:15:14] *** Quits: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net) (Read error: Connection reset by peer)
[21:18:36] *** Joins: CryptoClub (~fafs@static-110-97-62-95.ipcom.comunitel.net)
[21:22:54] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[21:24:36] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[21:25:42] *** Quits: linear_cannon (~linear@50.35.78.163) (Read error: Connection reset by peer)
[21:27:45] *** Joins: linear_cannon (~linear@50.35.78.163)
[21:27:55] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[21:29:01] *** Joins: mouseghost (~draco@user/mouseghost)
[21:30:52] *** Quits: linear_cannon (~linear@50.35.78.163) (Read error: Connection reset by peer)
[21:31:05] *** Joins: tent405 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[21:36:54] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[21:38:53] *** Quits: shariashaman (~Rheanna@101.91.193.123) (Remote host closed the connection)
[21:41:48] *** Joins: shariashaman (~Rheanna@101.91.240.201)
[21:43:14] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[21:47:14] *** Joins: as2334 (~as2334@host193.181-1-131.telecom.net.ar)
[21:47:21] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[21:48:39] *** Joins: zro (~zro@user/zro)
[21:50:25] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[21:50:30] *** Joins: X-Scale` (~ARM@46.50.4.194)
[21:50:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[21:52:20] *** X-Scale` is now known as X-Scale
[21:53:27] *** Joins: vernaz (~vernaz@148.63.127.167)
[21:53:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:56:46] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 245 seconds)
[21:58:47] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 240 seconds)
[21:59:19] <ytrezq> ms7821 : did you read their code snippet : https://crypto.stackexchange.com/q/95352?? Given an arbitrary leaf, they are able to generate a set of hash which once hashed match a static root hash. I was wondering how building such arbitrary pre?image is possible.
[21:59:29] *** Quits: qbt (~edun@user/edun) (Ping timeout: 246 seconds)
[22:00:18] <ytrezq> ms7821 : did you read their code snippet : https://crypto.stackexchange.com/q/95352?? Given an arbitrary leaf, they are able to generate a set of hash which once hashed with the leaf match a static root hash. I was wondering how building such arbitrary pre?image at will is possible.
[22:01:07] *** Quits: aczid (~aczid@tuig.nikhef.nl) (Ping timeout: 252 seconds)
[22:05:30] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[22:10:31] *** Quits: monopuff9 (~Mr@143.244.34.17) (Quit: The Lounge - https://thelounge.chat)
[22:10:53] *** Joins: monopuff9 (~Mr@143.244.34.17)
[22:13:32] *** Quits: monopuff9 (~Mr@143.244.34.17) (Client Quit)
[22:14:11] <int-e> ytrezq: You construct the full tree, starting with all the leafs and computing hashes all the way up to the root.
[22:14:41] *** Joins: monopuff (~Mr@143.244.34.17)
[22:16:14] <ytrezq> int-e: Please read thoe code as I?m supposed to paste it here : https://crypto.stackexchange.com/q/95352. There?s a single leaf and multiples proof hash
[22:17:14] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[22:17:32] <int-e> is there? I see no leaf at all
[22:18:00] *** Quits: Narrat (~omnius@p200300df5f13e77906ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[22:18:33] <ytrezq> bytes32 leaf parameter
[22:19:29] <int-e> Sure I see the parameter. But I don't see any values for it.
[22:19:29] <ytrezq> I just coumdn?t find it for the examples as no debuggers exists
[22:20:09] <ytrezq> So for the examples, I just put proofs set, but not the leaf hash as I was unable to find it
[22:20:43] <int-e> Right. You need to compute it. My crystal glass ball suggests you need to do this: https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol#L38
[22:20:45] <ytrezq> That still allow to show how a proof set looks like
[22:22:09] <int-e> I just don't know where you got the idea that the leaf value would be the same.
[22:22:39] <ytrezq> Correct, you almost found where the code does come from. but you show is still for verifying the proof set along the leaf, not how to compute the proofs [29/09/2021 20:50:39] <int-e> Right. You need to compute it. My crystal glass ball suggests you need to do this: https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol#L38
[22:23:12] <ytrezq> uniswap isn?t the only project to use it.
[22:23:16] *** Joins: aczid (~aczid@tuig.nikhef.nl)
[22:23:37] <int-e> AIUI the full tree (and hence, proofs) is computed by https://github.com/Uniswap/merkle-distributor/blob/master/src/merkle-tree.ts
[22:24:09] <ytrezq> At the basis, it?s an OpenZeppling contract. But it?s not documented more
[22:25:34] <ytrezq> So my question isn?t specific to Uniswap. And there many thing I don?t understand in the typescript code such as
[22:25:43] <int-e> But those details really aren't cryptography. The principle is clear: you compute all leafs, and from that you compute the whole tree. All of this is done in advance (you need to do it to compute the root) but can also be recomputed at any time (because the underlying information is, apparently, public)
[22:25:43] <ytrezq> layers.reduce
[22:26:31] <int-e> The *point* of Merkle trees is that you do not need to replicate the whole tree to verify that a particular node is a leaf of the tree.
[22:29:34] <ytrezq> int-e: On the merkle tree I saw, a leaf reference a root hash. I?m meaning you get the child through hashing the root. But here it?s the reverse : a single leaf with a set proof once hashed is equal the root.
[22:29:34] *** Quits: shariashaman (~Rheanna@101.91.240.201) (Remote host closed the connection)
[22:30:55] <int-e> Well I still don't know why you think there's a single leaf with that property.
[22:31:14] *** Joins: shariashaman (~Rheanna@101.91.232.94)
[22:31:40] <ytrezq> This is pick up proof in order to get hash matching the root and not walk from the root to compute the child hash
[22:32:54] <int-e> Do you realize that that tree has hundreds of thousands of *different* leafs?
[22:34:20] <ytrezq> I understand the leafs can be generated at will
[22:35:03] <ytrezq> as you?ve spotted it, a leaf is the hash of the action to perform https://etherscan.io/address/0x090d4613473dee047c3f2706764f49e0821d256e#code#L157[29/09/2021 21:00:51] <int-e> Well I still don't know why you think there's a single leaf with that property.
[22:36:45] <int-e> The leafs corresponding to a particular (Merkle) root hash value are fixed unless you actually manage to break the underlying cryptographic hash.
[22:37:59] <ytrezq> then given an action which can be decided an any time and is not know in advence (before computing the root), a set proof is computed and hash with the leaf where the result hash is equal to the root
[22:38:58] <int-e> Well it turns out that the action (address and amount) must be known in advance.
[22:39:04] <ytrezq> That?s the point by investing and peforming the right set of actions, I could perfectly get the proofs set allowing me to withdraw a specific reward [29/09/2021 21:06:41] <int-e> The leafs corresponding to a particular (Merkle) root hash value are fixed unless you actually manage to break the underlying cryptographic hash.
[22:40:08] <ytrezq> getting the proof set from their website server of course.
[22:41:24] <ytrezq> and obviously my address woyldn?t be taken into consideration
[22:41:37] <int-e> Then your address isn't part of the leaf id.
[22:41:39] <iz> are you having a name collision issue?
[22:41:55] <iz> between "root hash" and "Merkle root hash"?
[22:42:18] <ytrezq> found someone being able to generate preimage at will for a specific case [29/09/2021 21:11:35] <iz> are you having a name collision issue?
[22:42:22] <iz> which might just be called "root hash" in context meaning Merkle root hash
[22:42:39] <iz> oh
[22:43:27] <int-e> iz: I just wanted to clarify that the "root hash" comes from a Merkle construction.
[22:43:35] <ytrezq> it is https://etherscan.io/address/0x090d4613473dee047c3f2706764f49e0821d256e#code#L157 [29/09/2021 21:11:32] <int-e> Then your address isn't part of the leaf id.
[22:43:53] <iz> yes, i think that's ytrezq and that stackexchange question asker's problem
[22:44:20] <ytrezq> iz: it?s me who posted the question.
[22:44:26] <iz> i just looked at the question, i think the person asking is also confused and it's not preimage breaking
[22:44:46] <iz> ah, well that explains why i think you are both equally confused
[22:45:01] <ytrezq> It avoids pasting the code here
[22:46:34] <int-e> Oh I'm confused enough about how this works, but I'm sure ytrezq's assumptions as a whole are inconsistent and something has to give. In particular I'm sure that *that* address and amount being hashed there are known when the tree hash is computed.
[22:47:35] <ytrezq> It?s just something like assert(keccak256(abiPack(proofElement, computedHash)) == 0xc8500f8e2fcf3c9a32880e1b973fb28acc88be35787a8abcf9981b2b65dbdeb5) where several different proof allows to generate the same hash [29/09/2021 21:14:22] <iz> i just looked at the question, i think the person asking is also confused and it's not preimage breaking
[22:48:16] <ytrezq> my definition of a preimage is more than one thing which gives the same hash
[22:48:39] <iz> ytrezq: a merkle root hash is a hash of all the transaction hashes or whatever, not the root hash that all hashes are made from
[22:48:55] <int-e> In Merkle trees, all leafs have a proof that lead to the same root hash.
[22:49:03] <int-e> It's not a collision, it's how the tree is constructed.
[22:50:17] <ytrezq> With the sheer number of participants, you can be sure leaf can be added at will https://etherscan.io/address/0x090d4613473dee047c3f2706764f49e0821d256e#tokentxns
[22:51:08] <ytrezq> From what I learned so far, their isn?t 2 different input leading to the same hash. but here it seems to be the case[29/09/2021 21:18:51] <int-e> In Merkle trees, all leafs have a proof that lead to the same root hash.
[22:51:14] <int-e> Doubt it. What will actually happen is that they collect participants and rewards in batches, make a tree for each batch, and a corresponding contract with a root value.
[22:51:35] <int-e> However I don't care nearly enough to actually find out in detail.
[22:53:26] <ytrezq> int-e: they don?t reward in batch. They give a code to each users to they don?t perform the withdrawal themselves (gst2 coin minting through gas theft)
[22:55:38] <ytrezq> The contract is set before the list of who to pay is known
[22:59:18] *** Joins: vernaz (~vernaz@148.63.127.167)
[23:03:55] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 252 seconds)
[23:14:13] *** Quits: semisimple (~semisimpl@188.193.171.16) (Ping timeout: 265 seconds)
[23:14:24] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[23:16:09] *** Joins: semisimple (~semisimpl@ipbcc1ab10.dynamic.kabel-deutschland.de)
[23:19:14] *** Quits: shariashaman (~Rheanna@101.91.232.94) (Remote host closed the connection)
[23:20:19] *** Joins: shariashaman (~Rheanna@101.89.207.55)
[23:20:40] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:25:53] *** Quits: imi (~imi@catv-80-98-11-3.catv.broadband.hu) (Ping timeout: 252 seconds)
[23:27:09] <int-e> ytrezq: https://github.com/Uniswap/retroactive-query is relevant. Your two proofs are in the generated output, which AIUI was the same in September 2020. (The root hash and the age of the contract proves that, really, unless the Hash was broken.)
[23:28:16] <int-e> Enough of https://xkcd.com/386/
[23:31:17] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (Quit: quit)
[23:31:22] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[23:32:07] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[23:37:01] *** Joins: imi (~imi@catv-80-98-11-3.catv.broadband.hu)
[23:39:47] *** you is now known as _-
[23:49:46] *** Quits: rxcomm (~rxcomm@user/rxcomm) (Ping timeout: 260 seconds)
[23:53:27] *** Quits: Peng_ (~mnordhoff@ultimate1.mnrd.us) (Ping timeout: 240 seconds)
[23:57:33] *** Joins: Peng_ (~mnordhoff@ultimate1.mnrd.us)
