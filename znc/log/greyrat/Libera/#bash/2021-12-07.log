[00:02:09] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Quit: WeeChat 3.4-dev)
[00:05:02] *** Quits: lovetruth__ (~lovetruth@82.137.22.5) (Quit: Leaving)
[00:06:29] *** Joins: goldfish (~goldfish@user/goldfish)
[00:09:07] *** Joins: hendry (~hendry@210.23.22.2)
[00:13:45] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0)
[00:14:27] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[00:16:24] *** Joins: peve (~peve@ucb-np2-74.colorado.edu)
[00:17:00] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[00:17:20] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:18:53] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0) (Ping timeout: 265 seconds)
[00:20:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:21:17] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0)
[00:21:26] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:24:12] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 265 seconds)
[00:25:49] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0) (Ping timeout: 240 seconds)
[00:25:55] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[00:26:01] *** Quits: unop (~unop@195.91.110.106) ()
[00:27:21] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:9518:b8c2:641e:46d2) (Read error: Connection reset by peer)
[00:27:55] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[00:28:19] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[00:28:56] *** Joins: arinov (~arinov@213.194.126.155)
[00:30:30] *** Joins: esselfe (~steph@user/esselfe)
[00:32:02] *** Quits: Tristam (~tristam@user/tristam) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:34:12] *** Quits: peve (~peve@ucb-np2-74.colorado.edu) (Quit: Leaving)
[00:34:43] *** Joins: Tristam (~tristam@user/tristam)
[00:34:59] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[00:35:36] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[00:39:02] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[00:43:10] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[00:44:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[00:48:50] *** Joins: sublim20 (~sublim20@user/sublim20)
[00:51:29] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[00:51:58] *** Joins: Trieste (T@user/pilgrim)
[00:54:37] *** Quits: dreamon (~dreamon@pd9503edd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:56:41] *** Quits: rgrinberg (~textual@187.223.58.12) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:58:08] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[00:58:35] *** Joins: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20)
[00:59:31] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Quit: Leaving)
[01:00:32] <tangy> # i=0; for ((j=0;j<=3;j++)); do mapfile -t -O$i -n1 a; ((i++)); ((i>2)) && i=0; done < <(seq 1 5); declare -p a
[01:00:33] <shbot> tangy: declare -a a=([0]="four" [1]="two" [2]="three")
[01:00:59] <tangy> til
[01:01:03] <tangy> :-)
[01:01:25] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[01:03:21] *** Quits: pigweed (~pigweed@97.119.229.83) (Ping timeout: 265 seconds)
[01:03:57] *** Quits: reezoh (~reezoh@2600:1702:3cf0:2e00:9140:5b0f:e44c:c2d9) (Ping timeout: 252 seconds)
[01:06:36] *** Joins: seninha (~seninha@user/seninha)
[01:06:45] *** Joins: arinov (~arinov@213.194.126.155)
[01:07:15] *** Joins: wstrnr (~wstrnr@user/wstrnr)
[01:09:44] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[01:11:01] *** Quits: davidl (~quassel@217-64-148-110.pool.ovpn.com) (Ping timeout: 240 seconds)
[01:12:08] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:12:31] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:14:37] *** Quits: dre (~dre@60.229.45.121) (Ping timeout: 240 seconds)
[01:15:12] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[01:15:49] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[01:17:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[01:19:57] *** Joins: davidl (~quassel@217-64-148-110.pool.ovpn.com)
[01:20:17] *** Quits: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970) (Quit: WeeChat 3.3)
[01:22:06] *** Joins: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970)
[01:24:37] *** Quits: davidl (~quassel@217-64-148-110.pool.ovpn.com) (Ping timeout: 265 seconds)
[01:24:47] *** Quits: magla (~gelignite@55d47927.access.ecotel.net) (Quit: Stay safe!)
[01:29:00] *** Joins: davidl (~quassel@217-64-148-110.pool.ovpn.com)
[01:30:40] *** Joins: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417)
[01:31:01] *** Quits: kj (~kj@beta.aerisnetwork.net) (Ping timeout: 240 seconds)
[01:32:37] *** Quits: greybot (~greybot@remote.wooledge.org) (Ping timeout: 240 seconds)
[01:32:56] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[01:40:06] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[01:40:57] <slaughter> I'm trying to pipe the output of a command through some things, but the command itself never drops back to the shell (you have to ctrl+C it normally) - google is failing me by finding all kinds of unrelated things. How do I work with this?
[01:41:13] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[01:42:44] <Soliton> what is the issue?
[01:42:45] *** Quits: tessio (~weechat@141.226.73.109) (Quit: WeeChat 3.2)
[01:42:45] <geirha> it means one of the commands in the pipeline doesn't exit
[01:43:46] <wstrnr> if it can be killed by ctrl-c, and if this results in normal safe termination, you can send this command SIGINT or SIGTERM when it can is detected that the job is done
[01:44:08] <sublim20> can you post the command?
[01:44:47] <slaughter> It's a specific CLI tool, the Severless Framework. Command I'm messing with here is `serverless deploy list`
[01:44:56] <slaughter> Though `deploy` seems to do the same thing
[01:46:04] <Soliton> so does that program terminate by itself if you run it outside a pipeline?
[01:46:08] <slaughter> Nay
[01:46:17] <Soliton> should it?
[01:46:57] <Soliton> i guess based on the name it should.
[01:47:01] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b)
[01:47:01] *** Quits: kenyon (sid496813@uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[01:47:13] <Soliton> we can't really help you fix that program though.
[01:47:42] <slaughter> Nah I was just hoping there was some way I could force it to exit
[01:47:42] *** Joins: kenyon (sid496813@id-496813.uxbridge.irccloud.com)
[01:48:07] <Soliton> if you have some way to know when it should be finished, sure.
[01:48:27] <Soliton> is that way you want to process its output?
[01:48:32] <Soliton> why*
[01:49:01] <slaughter> Yeah because the deploy command doesn't exit I am hacking together a way to verify the deploy happened, but the deploy list doesn't exit so that's where I'm at
[01:49:13] <ormaaj> Something's blocking its sigpipe
[01:49:14] <slaughter> I can assume that after 10 seconds it would be done
[01:50:09] <Soliton> so run it in the background and kill it after 10 seconds.
[01:50:20] <Soliton> or run it with timeout if you have that.
[01:50:41] <Soliton> !timeout
[01:50:52] <ormaaj> of course that has to be combined with it not exiting properly as you'd not normally have that happen by mistake.
[01:50:54] <slaughter> TIL about timeout. I'll see what I can do with that, thanks
[01:51:05] *** Joins: Atque (~Atque@user/atque)
[01:51:12] <Soliton> hmm, bot is gone.
[01:51:20] <Soliton> http://mywiki.wooledge.org/BashFAQ/068
[01:52:25] *** Joins: greybot (~greybot@remote.wooledge.org)
[01:52:53] <ormaaj> oh hi bot
[01:52:55] <slaughter> That seems to be good enough for me! `TEST=$(timeout 10 serverless deploy list)` then I can work with it from there. Thanks very much
[01:53:54] <wstrnr> slaughter: if the program that does not terminate can output something that can act as marker of end of the work, you can read this and kill the program from some other process
[01:54:31] <wstrnr> slaughter: for example, a trivial thing: let's say grep and awk are doing some serious business stuff in this pipe:
[01:54:33] *** Quits: davidl (~quassel@217-64-148-110.pool.ovpn.com) (Ping timeout: 252 seconds)
[01:54:43] <slaughter> I think I'm a bit limited in that regard in our CI/CD pipeline, which is where this runs :(
[01:54:45] <wstrnr> # (echo "$BASHPID" >pidfile; echo moo; echo job_is_done; trap 'echo yup, we exited normally >&2' EXIT; while read -r infinite_loop; do :; done) | grep --line-buffered -e moo -e job_is_done | awk '$0 == "job_is_done" { system("kill \"$(cat pidfile)\"") }'
[01:54:46] <shbot> wstrnr: yup, we exited normally
[01:54:55] *** Joins: dre (~dre@2001:8004:44e0:e2f7:4cb5:615f:6ecc:f9d3)
[01:55:31] <wstrnr> you see?  the first "infinite loop" process sent to the rest of the pipe the "job_is_done" line, we read it and when it's seen we ``kill "$(cat pidfile)"''
[01:55:50] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:b593:bab6:272d:615b) (Quit: smeeagle)
[01:55:58] <wstrnr> and it the infinite loop terminates safely like that...
[01:56:29] <slaughter> Ohhhhhhh I see ok that might work too
[01:56:30] <slaughter> Thanks!
[01:59:01] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[02:03:29] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:00] *** Quits: edlou (uid413273@id-413273.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:04:04] *** Joins: rcernin (~rcernin@124.190.136.148)
[02:04:21] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0)
[02:04:22] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[02:05:32] *** Joins: mat001_ (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[02:08:13] *** Joins: kill (~killown@user/killown)
[02:08:51] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0) (Ping timeout: 252 seconds)
[02:08:51] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[02:13:12] *** Joins: kj (~kj@kj.aerisnetwork.net)
[02:16:55] *** Quits: rgrinberg (~textual@2806:101e:7:7c2f:99ad:1649:a2c7:9e20) (Ping timeout: 252 seconds)
[02:18:24] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[02:18:27] <cim> use set -euo pipefail for masochist mode
[02:18:44] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[02:19:49] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[02:20:28] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[02:25:24] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[02:25:57] <earnest> Except no
[02:26:52] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[02:27:16] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[02:28:49] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[02:35:02] *** Joins: davidl (~quassel@217-64-148-110.pool.ovpn.com)
[02:36:21] *** Quits: Penguin666 (~Penguin66@217.138.205.135) (Ping timeout: 252 seconds)
[02:37:52] *** Quits: cliluw (~cliluw@47.147.80.149) (Quit: Leaving)
[02:41:49] *** Quits: dre (~dre@2001:8004:44e0:e2f7:4cb5:615f:6ecc:f9d3) (Ping timeout: 240 seconds)
[02:42:31] *** Quits: Night-Shade (~Tim@ip1f114b3d.dynamic.kabel-deutschland.de) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:43:04] *** Joins: Night-Shade (~Tim@ip1f114b3d.dynamic.kabel-deutschland.de)
[02:43:47] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Read error: Connection reset by peer)
[02:44:51] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[02:45:29] *** Quits: barjac (~quassel@92.40.9.235.threembb.co.uk) (Ping timeout: 256 seconds)
[02:46:44] *** Joins: barjac (~quassel@92.40.9.235.threembb.co.uk)
[02:47:12] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[02:50:27] *** Joins: grondilu (~grondilu@91-164-198-91.subs.proxad.net)
[02:52:26] <grondilu> I have a program that fails sometimes, so I want to be able to execute it in a loop : `while true; do foo; done` but if I do that how do I stop the loop?  Any interrupt signal will be caught by foo, not by the loop, no?
[02:54:24] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 268 seconds)
[02:54:26] <grondilu> I suppose I could put something in the condition like testing the existence of a file or something.
[02:54:27] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[02:54:39] <grondilu> but that's seems kind of dumb.
[02:55:53] <grondilu> or maybe I should catch a specific signal
[02:56:13] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[02:57:08] <superboot> grondilu: while [[ "$stop" != true ]]; do command; done
[02:57:29] <superboot> Then, inside command, if you want to stop: stop=true
[02:58:03] <grondilu> command will run in the foreground and I can't modify it.
[02:58:41] <grondilu> so I need to interrupt it from an other process or something
[02:59:04] *** Joins: tessio (~weechat@141.226.73.109)
[02:59:17] <grondilu> do I need to do IPC?
[02:59:19] <tessio> is this the easiest way to list all files that doesn't have extension
[02:59:19] <wstrnr> each time when program finishes ask the user whether or not user wants to continue
[02:59:27] <tessio> ls | grep -v [.] ?
[03:00:00] <wstrnr> this is the hardest and probably the worst way
[03:00:00] <grondilu> tessio: I think you should use `find`
[03:00:34] <tessio> grondilu: for what ?
[03:00:40] <wstrnr> # touch hello and wel.come;  find . ! -name '*.*'
[03:00:41] <shbot> wstrnr: ./and
[03:00:41] <shbot> wstrnr: ./hello
[03:00:42] <tessio> to just list extensionless files ?
[03:01:08] <tessio> i mean in the same diretory
[03:01:19] <wstrnr> # touch hello and wel.come;  if find . ! -name '*.*' | grep -q .; then echo find found something; fi
[03:01:20] <shbot> wstrnr: find found something
[03:01:34] *** Quits: tessio (~weechat@141.226.73.109) (Client Quit)
[03:01:38] <wstrnr> # touch hel.lo a.nd wel.come;  if find . ! -name '*.*' | grep -q .; then echo find found something; else echo find didn\'t found anything; fi
[03:01:39] <shbot> wstrnr: find didn't found anything
[03:01:50] <wstrnr> didn't *find* anything
[03:02:01] <wstrnr> shameful orthography mistake
[03:02:40] <wstrnr> *orthographic error*
[03:02:56] *** Quits: Dotz0cat (~Dotz0cat@h87.47.22.98.static.ip.windstream.net) (Ping timeout: 252 seconds)
[03:03:07] <grondilu> I suppose I could note the PID of the bash and send an INT signal to that PID?
[03:03:28] <grondilu> instead of just pressing Ctrl-C
[03:03:43] * grondilu tries that
[03:04:35] *** Joins: karabaja4 (~karabaja4@dh207-94-92.xnet.hr)
[03:05:23] *** Quits: n4dir (~user@mue-88-130-56-191.dsl.tropolys.de) (Remote host closed the connection)
[03:06:01] *** Joins: Dotz0cat (~Dotz0cat@h171.83.187.173.dynamic.ip.windstream.net)
[03:06:53] <superboot> grondilu: The built in environment variable "$" (so echo $$) is the current shell's PID.
[03:07:09] <grondilu> indeed
[03:07:24] <superboot> grondilu: There are about a thousand ways to solve the problem you are asking about. Several have been suggested. Take your pick.
[03:07:39] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[03:08:10] <emanuele6> superboot: no, it is not
[03:08:27] <superboot> emanuele6: What isn't? $$?
[03:08:35] <emanuele6> !$$
[03:08:35] <greybot> $$ expands to the PID of the shell. In a ( ) subshell, it expands to the process ID of the original shell, not the subshell. (Bash 4.0 and above have BASHPID for that.)
[03:08:46] <emanuele6> it is the pid of the main shell
[03:08:59] <emanuele6> if you want the pid of the current shell, you should use BASHPID
[03:09:02] <superboot> emanuele6: Is that not what I said?
[03:09:31] <superboot> emanuele6: I see. Didn't know about BASHPID. Thanks for the clarification.
[03:09:36] <emanuele6> # (echo "$$"); echo "$$"
[03:09:37] <shbot> emanuele6: 44
[03:09:37] <shbot> emanuele6: 44
[03:09:57] <emanuele6> the first echo prints 44 even though that is not the pid of the shell that is running echo
[03:10:01] <grondilu> I've just tried with `while true; do (sleep 1; echo waking up; ); done` and to my surprise it did stop after a simple Ctrl-C. I thought I had tried something similar before and I couldn't stop the loop.
[03:10:01] <superboot> # (echo $BASHPID); echo $$
[03:10:02] <shbot> superboot: 51
[03:10:02] <shbot> superboot: 44
[03:10:04] <e36freak> grondilu: you just want to repeat it until it succeeds?
[03:10:17] <e36freak> it depends on if the command you're using handles INT properly or not
[03:10:19] <e36freak> !sigint
[03:10:19] <greybot> How the shell handles ^C (SIGINT) and why: http://www.cons.org/cracauer/sigint.html
[03:10:30] <e36freak> while ! foo; do :; done
[03:10:46] <grondilu> e36freak: no I want to resume after a failure, until I interrput it.
[03:11:31] <grondilu> I don't trust the program to return a sensible return code.
[03:12:17] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[03:13:44] <grondilu> e36freak: that seems like a useful article, thanks
[03:13:50] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:14:41] *** Joins: szutt (~szutt@116.37.2.145)
[03:15:01] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:15:38] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:15:46] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[03:16:45] *** Quits: grondilu (~grondilu@91-164-198-91.subs.proxad.net) (Quit: leaving)
[03:17:59] *** Joins: codebam (~codebam@user/codebam)
[03:19:01] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:17] *** Joins: dre (~dre@2001:8003:c932:c301:97c2:3a80:30a5:4f30)
[03:20:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:21:49] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[03:21:50] *** Joins: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net)
[03:25:19] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0)
[03:25:49] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:26:35] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 252 seconds)
[03:28:12] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:30:17] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:6438:3a5d:579d:5dc0) (Ping timeout: 265 seconds)
[03:30:18] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[03:32:04] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Quit: WeeChat 3.4-dev)
[03:32:32] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[03:35:59] *** Joins: n4dir (~user@mue-88-130-56-191.dsl.tropolys.de)
[03:36:05] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 265 seconds)
[03:36:57] *** Quits: dre (~dre@2001:8003:c932:c301:97c2:3a80:30a5:4f30) (Ping timeout: 268 seconds)
[03:38:46] *** Quits: Blondie101010 (~Blondie10@user/blondie101010) (Quit: Going offline, see ya! (www.adiirc.com))
[03:38:59] *** Joins: keypusher (keypusher@user/keypusher)
[03:40:39] *** Quits: MenschZwoNull_ (~MenschZwo@p200300c857124b0024b8e274af66c0d1.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:41:20] *** Joins: MenschZwoNull (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de)
[03:42:34] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:c9c0:8200:d2b2:618c)
[03:43:04] *** Joins: paisiano (~paisiano@196.40.114.250)
[03:43:22] *** Parts: paisiano (~paisiano@196.40.114.250) ()
[03:45:19] *** Joins: MenschZwoNull_ (~MenschZwo@2a03:2260:200c:400:8572:948d:1cf0:1aa5)
[03:45:57] *** Quits: MenschZwoNull (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[03:47:20] *** Joins: MenschZwoNull__ (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de)
[03:49:19] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[03:49:49] *** Quits: MenschZwoNull_ (~MenschZwo@2a03:2260:200c:400:8572:948d:1cf0:1aa5) (Ping timeout: 240 seconds)
[03:50:06] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 265 seconds)
[03:50:47] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:54:10] *** Quits: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net) (Quit: WeeChat 3.4-dev)
[03:55:24] *** Joins: dre (~dre@60.229.45.121)
[03:55:28] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:55:49] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Ping timeout: 240 seconds)
[03:59:44] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:00:16] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[04:01:39] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[04:03:41] *** Quits: Libero (~Libero@77.49.128.70.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:03:55] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:06:30] *** Joins: Blondie101010 (~Blondie10@user/blondie101010)
[04:12:07] *** Quits: jabster28 (~jabster28@81.111.217.63) (Ping timeout: 256 seconds)
[04:17:09] *** Joins: rilmoder (~riles___@184.3.194.129)
[04:17:49] *** Quits: tex (~super@user/dix) (Ping timeout: 240 seconds)
[04:17:52] *** Joins: jabster28 (~jabster28@81.111.217.63)
[04:17:55] *** Quits: idle_rain (~idle_rain@2804:14d:90bd:8c0c:87ae:425f:8f1a:2417) (Quit: idle_rain)
[04:18:05] *** Quits: MenschZwoNull__ (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:18:08] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:20:22] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[04:20:31] *** Joins: MenschZwoNull (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de)
[04:28:33] *** Joins: mnathani (~mnathani@142.126.113.57)
[04:31:58] *** Joins: nvmd (~nvmd@user/nvmd)
[04:32:01] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 256 seconds)
[04:33:53] *** Joins: sublim20 (~sublim20@user/sublim20)
[04:36:30] *** rilmoder is now known as rilemoder
[04:39:28] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[04:46:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 265 seconds)
[04:46:42] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Read error: Connection reset by peer)
[04:47:02] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:47:18] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[04:50:18] *** Joins: skapata (~Skapata@user/skapata)
[04:50:28] *** Quits: karabaja4 (~karabaja4@dh207-94-92.xnet.hr) (Quit: leaving)
[04:51:24] *** Joins: karabaja4 (~karabaja4@dh207-94-92.xnet.hr)
[04:52:33] *** Quits: karabaja4 (~karabaja4@dh207-94-92.xnet.hr) (Client Quit)
[04:53:01] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:58:18] *** Joins: novasenco (novasenco@user/nova)
[04:58:25] <novasenco> posix regex conditional?
[04:59:13] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 265 seconds)
[04:59:55] *** Joins: nvmd (~nvmd@user/nvmd)
[05:01:07] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:ed40:36cf:4b26:89b6)
[05:01:28] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[05:01:36] <novasenco> posix =~ test rather? exists?
[05:02:20] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Remote host closed the connection)
[05:02:44] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[05:02:47] *** Joins: djp (~djp@107-179-223-174.cpe.teksavvy.com)
[05:05:13] *** Joins: MenschZwoNull_ (~MenschZwo@2a03:2260:200c:400:ccb9:4720:2149:3254)
[05:05:59] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:ed40:36cf:4b26:89b6) (Ping timeout: 265 seconds)
[05:06:19] *** Joins: EG16 (~Erica@2806:107e:10:809c:7820:6fae:4619:744c)
[05:07:02] *** Joins: rcernin (~rcernin@124.190.136.148)
[05:07:21] *** Quits: EG16 (~Erica@2806:107e:10:809c:7820:6fae:4619:744c) (Client Quit)
[05:07:55] *** Quits: MenschZwoNull (~MenschZwo@p200300c857124b00ab0b5bd3cef19e95.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[05:09:14] *** Joins: MenschZwoNull__ (~MenschZwo@p200300c8570732005c5f0a8a88abbf67.dip0.t-ipconnect.de)
[05:09:57] <wstrnr> posix sh does not support [[ ... =~ ... ]] syntax ([[ ... ]]] compound command is bash extension)
[05:10:39] <wstrnr> yet support of regular expressions is standard feature, you can use grep or awk to use it
[05:11:10] <wstrnr> in an environment described by POSIX standard
[05:12:16] *** Quits: MenschZwoNull_ (~MenschZwo@2a03:2260:200c:400:ccb9:4720:2149:3254) (Ping timeout: 265 seconds)
[05:13:52] <wstrnr> # re_test() { awk 'BEGIN { if (ARGV[1] ~ "^moo") { exit(0) } else { exit(1) } }' "$1"; };  for x in moo_hello xxx_hello moo_yes; do  if re_test "$x"; then echo "$x: PASS"; else echo "$x: FAIL"; fi; done
[05:13:53] <shbot> wstrnr: moo_hello: PASS
[05:13:53] <shbot> wstrnr: xxx_hello: FAIL
[05:13:53] <shbot> wstrnr: moo_yes: PASS
[05:14:47] <wstrnr> quite silly thing to do though.  can be done using grep too, but maybe with some quirks
[05:15:23] *** Quits: rcernin (~rcernin@124.190.136.148) (Quit: WeeChat 3.3)
[05:15:37] *** Joins: rcernin (~rcernin@124.190.136.148)
[05:17:06] <wstrnr> sh# (: if you only want to check such simple thing as  arg ~ "^moo"  you can do following:);   for arg in moo_hello no_hello; do  case $arg in moo*) printf '%s: yes' "$arg";; esac;  done
[05:17:07] <shbot> wstrnr: moo_hello: yes
[05:18:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:18:59] *** Joins: seninha (~seninha@user/seninha)
[05:19:09] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[05:19:35] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:25:45] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 252 seconds)
[05:25:59] *** Joins: defjam (~eb0t@90.202.255.10)
[05:28:44] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[05:29:26] *** Joins: jonthesnow (~xizhendu@36.112.188.169)
[05:32:59] *** Joins: rafspiny (~raffaele@ip-80-113-98-4.ip.prioritytelecom.net)
[05:33:00] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:33:22] *** Joins: pigweed (~pigweed@97.119.229.83)
[05:33:24] *** Joins: nvmd (~nvmd@user/nvmd)
[05:34:30] *** Quits: MenschZwoNull__ (~MenschZwo@p200300c8570732005c5f0a8a88abbf67.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[05:34:33] *** Quits: raffaele_ (~raffaele@ip-80-113-98-4.ip.prioritytelecom.net) (Ping timeout: 252 seconds)
[05:34:48] *** Joins: earendel (uid498179@user/earendel)
[05:36:47] *** Quits: hgkjhgkjgkj (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[05:36:53] *** Joins: MenschZwoNull (~MenschZwo@p200300c8570732005c5f0a8a88abbf67.dip0.t-ipconnect.de)
[05:37:25] *** Quits: knstn (~knstn@ppp-94-66-57-28.home.otenet.gr) (Quit: leaving)
[05:38:34] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[05:42:09] *** Joins: sublim20 (~sublim20@user/sublim20)
[05:46:17] *** Quits: wstrnr (~wstrnr@user/wstrnr) (Quit: .)
[05:49:47] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:51:03] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[05:53:25] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[05:55:46] *** Quits: timj (~timj@user/timj) (Ping timeout: 265 seconds)
[06:01:04] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[06:03:01] *** Quits: Dotz0cat (~Dotz0cat@h171.83.187.173.dynamic.ip.windstream.net) (Ping timeout: 265 seconds)
[06:05:49] *** Quits: situ (~situ@ip-89-176-145-74.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[06:06:12] *** Joins: Dotz0cat (~Dotz0cat@h64.13.31.71.dynamic.ip.windstream.net)
[06:06:27] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (Ping timeout: 252 seconds)
[06:06:49] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[06:07:08] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[06:07:36] *** Joins: sl0wz (~slowz@2603:a058:0:deb:e33:9:bb69:6bb7)
[06:10:03] *** Quits: zoe (~zoe@fsf/member/zoe) (Ping timeout: 256 seconds)
[06:10:46] *** Quits: pigweed (~pigweed@97.119.229.83) (Quit: Leaving)
[06:11:34] *** Joins: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net)
[06:13:32] *** Joins: foobarfoo (~user@vps-93-95-226-254.1984.is)
[06:17:03] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[06:17:05] *** Quits: n4dir (~user@mue-88-130-56-191.dsl.tropolys.de) (Ping timeout: 252 seconds)
[06:18:55] *** Joins: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de)
[06:22:23] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:25:34] *** Quits: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de) (Remote host closed the connection)
[06:33:39] *** Joins: millido (~millido@84.210.150.128)
[06:41:43] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 256 seconds)
[06:42:45] *** Quits: maledictium (~crux@bl14-67-155.dsl.telepac.pt) (Ping timeout: 252 seconds)
[06:44:36] *** Joins: maledictium (~crux@bl7-132-224.dsl.telepac.pt)
[06:47:45] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[06:47:57] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[06:50:21] *** Parts: texasmynsted (~texasmyns@99.96.221.112) (WeeChat 3.1)
[06:53:33] *** Joins: junebug (~junebug@2600:1700:3db0:2540:da15:34cc:225d:74dc)
[06:54:17] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 268 seconds)
[06:56:13] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[07:00:35] *** Joins: ferdna (~ferdna@user/ferdna)
[07:03:17] *** Quits: jos1 (~jos3@dyndsl-091-248-048-200.ewe-ip-backbone.de) (Ping timeout: 252 seconds)
[07:04:06] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[07:05:32] <texasmynsted> I do not know how to search this... I want to concatenate a fairly long string then later evaluate it with `eval`. It works fine inside foo="the long string..." but it is too long for one line.
[07:06:08] <texasmynsted> What is the best way to break over lines with like \ enter or a here doc or something without executing it until later?
[07:06:53] <texasmynsted> If I do not wrap in quotes it looks like it will be executed or confused with $(the long string)
[07:08:40] *** Joins: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de)
[07:10:56] <texasmynsted> ... did read http://mywiki.wooledge.org/BashFAQ/050
[07:14:49] *** Joins: ElQelinho (~ElQelinho@91.192.22.238)
[07:15:40] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[07:16:00] *** Joins: jos1 (~jos3@dyndsl-178-142-068-123.ewe-ip-backbone.de)
[07:16:11] *** Quits: ElQelinho (~ElQelinho@91.192.22.238) (Client Quit)
[07:18:36] <gnoo> texasmynsted: use an array instead
[07:19:39] <texasmynsted> oh I see how that could work.
[07:20:18] <gnoo> # cmd=(printf "<%s> " a b "d e f") ; "${cmd[@]}"
[07:20:19] <texasmynsted> mycommand+=("the long string ")
[07:20:19] <shbot> gnoo: <a> <b> <d e f>
[07:20:33] <texasmynsted> mycommand+=("more stuff ")
[07:20:40] *** Joins: jensen (~jensen@65.78.100.184)
[07:20:44] <gnoo> yeah, don't use eval
[07:20:46] <gnoo> !eval
[07:20:46] <greybot> 'eval' is a common misspelling of 'evil'. If eval is the answer, surely you are asking the wrong question. See http://mywiki.wooledge.org/BashFAQ/048
[07:21:15] *** Quits: junebug (~junebug@2600:1700:3db0:2540:da15:34cc:225d:74dc) (Ping timeout: 252 seconds)
[07:22:23] <jensen> Using bsdtar, how to set compression option to "deflate" for zip files? The following doesn't work: `bsdtar ac --options 'compression=deflate' f test.zip *.txt` with the error "Undefined option: compression"
[07:24:47] *** Joins: rcernin (~rcernin@124.190.136.148)
[07:24:51] <e36freak> -options
[07:24:53] <gnoo> jensen: zip:compression=deflate
[07:25:18] <e36freak> oh
[07:25:19] <e36freak> yeah
[07:25:54] <gnoo> jensen: LESS='+/deflate' man bsdtar
[07:26:03] <gnoo> has an example for syntax there
[07:26:25] *** Joins: XV8 (~XV8@2601:5cb:c001:50:2429:6786:e85:8187)
[07:27:20] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[07:27:31] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[07:28:13] <jensen> I get "Unknown module name: `zip'". I'm on Arch Linux and am using bsdtar provided by I believe libarchive. I prefer to use bsdtar since it supports many formats and am writing a simple wrapper script for it
[07:28:40] *** Joins: codebam (~codebam@user/codebam)
[07:29:25] <Blondie101010> ugh, does it support stdout?
[07:29:51] <Blondie101010> tar -cv directory/ | gzip > directory.tgz
[07:30:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[07:30:40] *** Joins: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys)
[07:31:06] <texasmynsted> yes it does
[07:32:27] *** Joins: overrider (~overrider@user/overrider)
[07:32:31] *** Joins: akoana (~ah@user/akoana)
[07:32:38] <texasmynsted> use -- as the output file name
[07:33:04] *** Joins: junebug (~junebug@2600:1700:3db0:2540:fc4:1b1d:95c1:966c)
[07:33:10] <texasmynsted> tar -cv -- directory/
[07:33:45] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 268 seconds)
[07:33:54] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[07:34:11] <jensen> gnoo: ok, this works: `bsdtar --options 'zip:compression=deflate' -acf test.zip *.txt` but not `bsdtar ac --options 'zip:compression=deflate' f test.zip *.txt`...
[07:34:22] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 265 seconds)
[07:35:18] <texasmynsted> f without the - is not a switch, it is a file name
[07:35:43] <texasmynsted> -f is the switch
[07:36:06] <Blondie101010> the dash-less syntax is horrible
[07:36:23] <e36freak> iirc tar is trying to move away from it
[07:36:37] <e36freak> just use the dashes
[07:36:51] <jensen> ok, ty guys
[07:36:59] * texasmynsted shrug
[07:37:08] <NRK[m]> but i dont want to type the dahses!
[07:37:19] <NRK[m]> they're ugly :(
[07:37:48] <texasmynsted> If this is for a bash script, always use full names if available.
[07:38:19] <gnoo> zip:compression=deflate seems like it should be the default especially when you're using -a
[07:38:21] <texasmynsted> my version of bsdtar allows switches like --create rather than just -c...
[07:39:02] *** Joins: kdc (~kdc@196.211.197.159)
[07:39:14] <texasmynsted> which is more readable -a or --auto-compress
[07:40:01] *** Quits: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys) (Quit: WeeChat 3.3)
[07:40:10] *** Quits: junebug (~junebug@2600:1700:3db0:2540:fc4:1b1d:95c1:966c) (Ping timeout: 265 seconds)
[07:40:18] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:40:38] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[07:42:19] *** Joins: glazed (~glazed@cpe-76-172-93-136.socal.res.rr.com)
[07:43:08] *** Joins: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net)
[07:45:22] *** Joins: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net)
[07:45:31] *** Quits: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net) (Client Quit)
[07:45:43] *** Joins: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net)
[07:45:47] *** Matt343 is now known as DavidDavidson
[07:51:44] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:53:24] *** Quits: XV8 (~XV8@2601:5cb:c001:50:2429:6786:e85:8187) (Quit: Textual IRC Client: www.textualapp.com)
[08:07:18] <xx> # \(-
[08:07:19] <shbot> xx: bash: (-: command not found
[08:10:53] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[08:18:25] *** Quits: jensen (~jensen@65.78.100.184) (Remote host closed the connection)
[08:20:47] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:31:18] <texasmynsted> Hmm. the original code had eval, and the commands were found from the path. When I use the array, they are no longer found. I tried exec to the same end
[08:31:28] <texasmynsted> what am I not seeing?
[08:36:47] *** Joins: igemnace (~ian@user/igemnace)
[08:37:45] *** Joins: Guest (~Guest@218.104.175.221)
[08:39:25] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[08:39:54] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[08:40:18] <lockywolf> How can I access the value of a variable that is stored in another variable. I have thought of eval echo \$"$b" , but this looks like a hack.
[08:42:16] *** Quits: Guest (~Guest@218.104.175.221) (Quit: Client closed)
[08:43:45] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[08:44:40] <texasmynsted> example of what is not working... eval "${cmd[@]}" works, ("${cmd[@]}") does not work, $("${cmd[@]}") does not work.
[08:45:11] <texasmynsted> oh an "${cmd[@]}" does not work
[08:46:26] <texasmynsted> exec permutations also did not work
[08:47:21] <texasmynsted> when I echo ${cmd[@]} it looks like exactly what I want to execute. It is simply that it executes with a null shell or something
[08:48:08] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[08:49:33] <texasmynsted> okay. .. if I set that array to another variable and exec that, it works. It must be some kind of array syntax thing
[08:49:37] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:59:54] *** Quits: VoidNoir0 (~VoidNoir0@72.80.203.52) (Quit: Connection closed)
[09:00:37] <e36freak> are you adding quotes sowhere? what's in the array?
[09:00:42] <e36freak> !faq complex
[09:00:43] <greybot> https://mywiki.wooledge.org/BashFAQ/050 -- I'm trying to put a command in a variable, but the complex cases always fail!
[09:02:01] *** Quits: glazed (~glazed@cpe-76-172-93-136.socal.res.rr.com) (Quit: Client closed)
[09:02:38] *** Quits: joerg (~saturn@user/joerg) (Ping timeout: 252 seconds)
[09:03:47] *** Joins: joerg (~saturn@user/joerg)
[09:06:41] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 265 seconds)
[09:10:19] *** Quits: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[09:10:38] *** Joins: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net)
[09:12:57] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[09:14:40] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:16:01] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 252 seconds)
[09:16:57] <lockywolf> Is it possible to make an array a value of a hash?
[09:16:57] <lockywolf> Is it possible to make an array a value of a hash member?
[09:17:38] <lockywolf> something like array['key']=(a b) fails for some reason
[09:19:48] *** Quits: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de) (Remote host closed the connection)
[09:21:48] <e36freak> there are no multi-dimensional arrays
[09:22:07] <e36freak> you get one key, one value
[09:22:08] <e36freak> !matrix
[09:22:08] <greybot> Bash only has 1-dimensional arrays (two kinds), but you can simulate 2-dimensional matrices with tricks. ${array[i*100+j]} (where 100 can be any suitably large constant) with indexed arrays, or ${array["$i,$j"]} with associative arrays.
[09:22:57] <e36freak> if you really need a more complex data structure it's time to consider a real language
[09:29:12] *** Joins: skapata (~Skapata@user/skapata)
[09:30:02] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:31:17] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:31:18] <hejux> # foo=bar ; printf "prepend1/$s/append1\n" $foo ; printf "prepend2/$s/append2\n" $foo
[09:31:19] <shbot> hejux: prepend1//append1
[09:31:19] <shbot> hejux: prepend2//append2
[09:31:34] <hejux> # foo=bar ; printf "prepend1/%s/append1\n" $foo ; printf "prepend2/%s/append2\n" $foo
[09:31:35] <shbot> hejux: prepend1/bar/append1
[09:31:35] <shbot> hejux: prepend2/bar/append2
[09:31:47] <hejux> can i join the 2 printf command in one command?
[09:35:01] <hejux> i don't think i can ...
[09:35:09] <e36freak> you can pass "$foo" twice
[09:35:27] <e36freak> printf 'a/%s/b\nc/%s/d\n' "$foo" "$foo"
[09:35:37] <texasmynsted> wow, thank you. The command can not be part of the array...
[09:36:09] <e36freak> a command can be. redirections and stuff cannot
[09:36:15] <hejux> e36freak: if foo is an array, pass twice will not work properly right?
[09:36:23] <e36freak> # arr=(echo 'foo bar'); "${arr[@]}"
[09:36:24] <shbot> e36freak: foo bar
[09:36:39] <e36freak> hejux: not the way you want, no
[09:36:47] <e36freak> you'd need two separate commands, which there's nothing wrong with
[09:37:02] <hejux> yeah, got the idea :)
[09:37:39] <e36freak> i mean you could pass an array, but you wouldn't get all of the array with the first one then all with the second, they'd alternate
[09:38:51] <hejux> yes, i know. if pass array, then [0] [1] is a pair, [2] [3] is a pair ... so on...
[09:41:49] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 240 seconds)
[09:41:56] *** Quits: djp (~djp@107-179-223-174.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[09:42:45] *** Joins: Jong (~Jong@2620:10d:c090:400::5:1592)
[09:48:58] *** Quits: Strykar (~wakka@signald/Strykar) (Quit: Leaving.)
[09:51:10] *** Joins: Strykar (~wakka@signald/Strykar)
[09:51:34] *** Joins: junebug (~junebug@2600:1700:3db0:2540:f0d0:9907:b5bd:5cd7)
[09:51:52] *** Joins: han-solo (~hanish@user/han-solo)
[09:55:18] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:56:21] *** Quits: junebug (~junebug@2600:1700:3db0:2540:f0d0:9907:b5bd:5cd7) (Ping timeout: 252 seconds)
[10:00:33] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:01:57] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[10:09:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:11:00] *** Joins: rcernin (~rcernin@124.190.136.148)
[10:18:52] *** Quits: hejux (~hejux@104.224.190.144.16clouds.com) (Remote host closed the connection)
[10:19:08] *** Joins: hejux (~hejux@104.224.190.144.16clouds.com)
[10:20:38] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 265 seconds)
[10:23:07] <earendel> # arr=(ls -l /etc);  "${arr[@]}"
[10:23:14] <shbot> earendel: total 32
[10:23:14] <shbot> earendel: -rw-rw-r-- 1 root root   10 Mar 13  2021 group
[10:23:14] <shbot> earendel: etc... ( http://ix.io/3Hfj )
[10:28:37] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[10:30:06] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:32:08] *** Joins: carl--- (~carl-@185.103.188.130)
[10:34:37] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 240 seconds)
[10:34:37] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 240 seconds)
[10:43:20] <hejux> i use printf "$(date) %s\n" hello to prepend date, is there a better way? can printf itself print the date when it runs
[10:43:31] *** Joins: sublim20 (~sublim20@user/sublim20)
[10:44:19] *** Joins: [R] (~rs@genoce.org)
[10:50:28] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[10:53:06] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[10:56:26] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[10:57:13] *** Joins: dreamon (~dreamon@pd9503edd.dip0.t-ipconnect.de)
[10:57:21] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[10:57:45] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[10:57:55] <hejux> printf '%(%F %T)T %s\n' -1  "$*"
[10:58:06] <hejux> anwser to my self
[10:59:34] <hejux> but this does not work for /usr/bin/printf ...thus, not so portable
[10:59:47] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 265 seconds)
[11:00:12] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[11:02:09] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[11:02:49] <osse> printf "%s %s\n" "$(date)" hello  would be slightly better.
[11:06:12] <hejux> printf "%s\n" "$(data) $*" osse
[11:06:45] *** Quits: reezoh (~reezoh@2600:1702:3cf0:2e00:c9c0:8200:d2b2:618c) (Ping timeout: 252 seconds)
[11:06:59] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 256 seconds)
[11:08:13] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 240 seconds)
[11:16:48] *** Joins: tobybl (~tobybl@213.31.132.232)
[11:18:43] *** Joins: itachi196 (~itachi19@46.232.210.60)
[11:19:07] *** Quits: itachi19 (~itachi19@46.232.210.60) (Read error: Connection reset by peer)
[11:19:07] *** itachi196 is now known as itachi19
[11:19:36] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[11:19:55] *** Joins: tex (~super@user/dix)
[11:22:09] *** Quits: carl--- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[11:23:28] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 265 seconds)
[11:25:37] *** Quits: dreamon (~dreamon@pd9503edd.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:25:49] *** Joins: Libero (~Libero@77.49.128.70.dsl.dyn.forthnet.gr)
[11:32:03] *** Quits: jonthesnow (~xizhendu@36.112.188.169) (Ping timeout: 252 seconds)
[11:35:06] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Quit: Leaving)
[11:36:13] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:36:26] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[11:41:56] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[11:42:19] *** Quits: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[11:45:27] *** Joins: ubique (~ubique@188.26.181.124)
[11:50:37] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 256 seconds)
[11:53:10] <hejux> why echo '' | wc -m returns 1?
[11:53:33] <osse> newline
[11:54:15] <geirha> # echo '' | od -An -c -tx1
[11:54:16] <shbot> geirha:   \n
[11:54:16] <shbot> geirha:   0a
[11:55:10] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Remote host closed the connection)
[11:55:18] <hejux> printf better again :)
[11:55:26] <han-solo> !echo
[11:55:26] <greybot> echo outputs a string. echo has many portability problems, and should never be used with option flags. Consider printf instead: printf 'name: %s\n' "$name". http://wiki.bash-hackers.org/commands/builtin/echo | http://cfajohnson.com/shell/cus-faq.html#Q0b | http://www.in-ulm.de/~mascheck/various/echo+printf
[11:55:45] <geirha> strictly speaking, to output nothing, you don't need any command
[11:55:55] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:56:16] <geirha> consider </dev/null instead
[11:56:20] <hejux> # printf '    hello' | unexpand
[11:56:21] <shbot> hejux:     hello
[11:56:28] <hejux> # printf '    hello' | unexpand -t4
[11:56:29] <shbot> hejux:         hello
[11:57:11] <geirha> shbot runs it through expand again before dumping it on irc
[11:57:31] <geirha> # printf '    hello' | unexpand -t4 | od -An -c
[11:57:32] <shbot> geirha:   \t   h   e   l   l   o
[11:58:19] <hejux> od sees human can not see
[12:00:03] <hejux> # printf '    hello' | unexpand -t2 | od -An -c
[12:00:05] <shbot> hejux:   \t  \t   h   e   l   l   o
[12:00:21] <hejux> right  this is the right thing
[12:00:43] <hejux> i need to replace spaces in my script
[12:00:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:01:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:01:43] *** Joins: lavaball (felix@31.204.155.215)
[12:01:50] *** Quits: kevgao (~kevgao@2601:281:8780:4510:adf9:6718:c66a:aa00) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:02:09] <hejux> once upon a time, .vimrc set expandtabs, and all my tabs in script becomes spaces... then here doc does not work properly
[12:02:49] <geirha> I always use expandtab
[12:03:34] <hejux> then <<- EOF indent does not work as expected
[12:03:37] <geirha> I usually make sure heredocs are at the top level instead, then they don't need indenting
[12:04:06] <geirha> usage() { cat ; } << USAGE
[12:04:08] <geirha> ...
[12:04:10] <geirha> USAGE
[12:05:50] <hejux> geirha: ok. that. what is the benefit of expandtab?
[12:06:10] <geirha> what you see is what you get
[12:07:44] <geirha> don't have to spend time getting the amount of tabs and spaces right when wrapping lines
[12:09:04] *** Joins: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au)
[12:11:02] *** Quits: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970) (Quit: WeeChat 3.3)
[12:18:49] *** Parts: novasenco (novasenco@user/nova) (â™¥â˜º)
[12:22:42] *** Joins: tessio (~weechat@141.226.73.109)
[12:24:54] *** Joins: RandomGuy21 (~RandomGuy@106.51.73.107)
[12:26:23] *** Joins: dreamon (~dreamon@ppp-88-217-67-53.dynamic.mnet-online.de)
[12:28:09] *** Quits: noord (~noord@user/noord) (Remote host closed the connection)
[12:30:06] *** Joins: noord (~noord@user/noord)
[12:32:53] *** Joins: tangyQED (~tangy@user/tangy)
[12:33:07] *** Quits: dermoth (~dermoth@user/dermoth) (Ping timeout: 256 seconds)
[12:33:34] *** Quits: unixman_home (~unixman2@148-221-137-216.mtaonline.net) (Remote host closed the connection)
[12:33:34] *** Joins: unixman_home_ (~unixman2@148-221-137-216.mtaonline.net)
[12:33:39] *** Quits: ejjdhfjsu (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com) (Ping timeout: 252 seconds)
[12:34:12] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:34:23] *** Quits: tangy (~tangy@user/tangy) (Ping timeout: 252 seconds)
[12:39:53] *** Quits: mat001_ (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[12:40:31] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[12:43:42] *** Quits: gr33nR10t (~greenriot@user/gr33nr10t) (Ping timeout: 265 seconds)
[12:43:55] *** Quits: rcernin (~rcernin@124.190.136.148) (Ping timeout: 252 seconds)
[12:45:44] *** Joins: dermoth (~dermoth@user/dermoth)
[12:46:23] *** Joins: gr33nR10t (~greenriot@user/gr33nr10t)
[12:47:35] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 252 seconds)
[12:47:36] *** Joins: lavaball (felix@31.204.155.215)
[12:48:15] *** Joins: earnest (~earnest@user/earnestly)
[12:50:17] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[12:50:38] *** Quits: DavidDavidson (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:51:47] *** Joins: timj (~timj@user/timj)
[12:53:17] *** Joins: ntwk (~ntwk@user/ntwk)
[12:54:14] *** Parts: stemid (~nocturnal@i-lands.anark.ist) ()
[12:55:04] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[12:55:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[12:55:57] *** Joins: quas[m] (~quasmatri@2001:470:69fc:105::2aa5)
[12:56:41] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[12:56:49] *** Joins: tejr (~tejr@user/tejr)
[12:57:25] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[12:59:16] *** Joins: lavaball (felix@31.204.155.215)
[13:00:36] *** Joins: pj (~pj@ghettoforge/pj)
[13:01:13] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:06:17] *** Quits: dermoth (~dermoth@user/dermoth) (Ping timeout: 252 seconds)
[13:06:40] *** Joins: consolers (~consolers@117.207.24.241)
[13:07:09] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Remote host closed the connection)
[13:07:23] <consolers> is there some way to check if a(n) [environment] variable is unset - other than set | grep '^VAR=' ?
[13:08:35] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[13:09:35] *** Quits: ntwk (~ntwk@user/ntwk) (Ping timeout: 252 seconds)
[13:09:49] *** Joins: [R] (~rs@genoce.org)
[13:11:13] *** Joins: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net)
[13:11:31] <osse> [[ ${VAR@a} == x ]]  perhaps
[13:11:36] <osse> requires a recent bash
[13:11:37] <emanuele6> *x*
[13:11:47] <Anvil> consolers : [[ -v VAR ]]
[13:11:56] <osse> emanuele6: that was quick
[13:12:07] <emanuele6> osse: i was about to write the same hehe
[13:12:22] <osse> but can x be combined with any other attributes?
[13:12:33] <emanuele6> actually, maybe not
[13:12:36] <emanuele6> but still
[13:13:12] <osse> declare -xr ROFL  actuall works, and ${ROFL@a} will print both
[13:13:29] <osse> but I'm not sure that actually makes sense
[13:13:33] <emanuele6> yeah, i just tried with   declare -xu HI=x; echo "${HI@a}"
[13:14:05] <geirha> # declare -ruxi FOO; echo "${FOO@a}"
[13:14:06] <shbot> geirha: irxu
[13:14:17] <osse> but for the purposes of using that variable for something does it matter whether it's an env var or not? I think I'
[13:14:25] <osse> d just use [[ -v VAR ]]
[13:15:33] <earendel> what was -z?
[13:16:05] <consolers> thanks i've not digested the info yet
[13:16:40] <consolers> i understood -v ; the other tricks
[13:16:56] <emanuele6> -v does not check if the variable is in the environment
[13:17:01] <consolers> ah
[13:17:03] <emanuele6> it only checks if it is set
[13:17:17] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 252 seconds)
[13:17:25] <emanuele6> basically the same as [[ ${VAR+is_set} ]]
[13:18:00] <emanuele6> [[ ${VAR@a} == *x* ]] checks if the variable is set and is exported
[13:18:35] <emanuele6> ${VAR@a} outputs the "flags" of VAR
[13:18:41] *** Joins: dermoth (~dermoth@user/dermoth)
[13:18:57] <emanuele6> x for exported, u for always-uppercase, i for number, r for readonly, etc
[13:19:09] <earendel> # f() { [[ -v $1 ]] && echo set || echo not set; }; f a
[13:19:09] <shbot> earendel: not set
[13:19:16] <earendel> # f() { [[ -v $1 ]] && echo set || echo not set; }; f
[13:19:17] <shbot> earendel: not set
[13:19:27] <consolers> my man bash doesnt have a @a
[13:19:42] <emanuele6> !&&|| > earendel
[13:19:42] <greybot> earendel: foo && bar || baz is not equivalent to 'if foo; then bar; else baz; fi'. In the former case, baz will happen if *either* foo *or* bar return false. In the latter case, baz will only trigger if foo returns false, regardless of the exit code for bar. See http://mywiki.wooledge.org/BashPitfalls
[13:19:43] <geirha> actually, [[ ${VAR@a} == *x* ]] only tests if it has the attribute set, it doesn't test if it's set
[13:20:02] <emanuele6> right, a variable could be declared, but not set
[13:20:30] <emanuele6> but if a variable is `declare -x' and not set, is it in the environment?
[13:20:32] <earendel> # f() { if [[ -v $1 ]]; then echo set; else echo not set; fi; }; f 1
[13:20:33] <shbot> earendel: set
[13:20:36] <earendel> # f() { if [[ -v $1 ]]; then echo set; else echo not set; fi; }; f
[13:20:37] <shbot> earendel: not set
[13:21:26] <consolers> I wanted to do  "FOO= script.sh" where I wanted to distinguish between "" and unset
[13:21:42] <emanuele6> # declare -x VAR; bash -c 'printf %s\\n "${VAR-notset}"'
[13:21:43] <shbot> emanuele6: notset
[13:21:51] <earendel> i don't see why [[ -v $1 ]] and/or echo set failed .. semicolons?
[13:22:02] <ormaaj> # for sh in bash mksh; do  env -- "x[0]=" "x=x[0]" "$sh" -c 'x+= unset -v x; [ -v "x" ]; echo "$?"'; done
[13:22:03] <shbot> ormaaj: 0
[13:22:03] <shbot> ormaaj: 1
[13:22:05] <emanuele6> if is declared for export but not set it does not get exported as empty.. interesting
[13:22:25] <emanuele6> s/is/it's/
[13:22:54] <earendel> irrelevant complexity.
[13:22:59] *** Joins: ntwk (~ntwk@user/ntwk)
[13:24:39] <ormaaj> mksh is nuts.
[13:25:12] <geirha> isn't ksh93 also?
[13:25:28] <ormaaj> the "empty variable" is defined and readonly.
[13:25:36] *** synthmeat1 is now known as synthmeat
[13:26:21] <ormaaj> different flavors of crazy
[13:28:29] <earendel> # declare -x bla; if [[ -z bla ]]; then echo zzz; elif [[ -v bla ]]; then echo vvv; else echo else; fi
[13:28:30] <shbot> earendel: else
[13:28:54] <earendel> # declare -x bla; if [[ ! -z bla ]]; then echo zzz; elif [[ -v bla ]]; then echo vvv; else echo else; fi
[13:28:55] <shbot> earendel: zzz
[13:29:13] <earendel> # declare -x bla; if [[ -z bla ]]; then echo zzz; elif [[ -v bla ]]; then echo vvv; else echo else; fi
[13:29:14] <shbot> earendel: else
[13:29:23] *** Quits: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com) (Ping timeout: 252 seconds)
[13:29:33] <earendel> what is -z
[13:29:45] <geirha> tests if a string is empty
[13:30:01] <osse> consolers: search for parameter@operator
[13:30:10] <geirha> "bla" is not empty (it's a string of length 3), so -z bla is flase
[13:30:13] <geirha> *false
[13:30:21] <consolers> ah yes
[13:30:33] <earendel> # declare -x bla; if [[ -z $bla ]]; then echo zzz; elif [[ -v $bla ]]; then echo vvv; else echo else; fi
[13:30:33] <shbot> earendel: zzz
[13:30:35] <earendel> damn
[13:30:43] <earendel> forgot $
[13:30:58] <geirha> you want -v bla  , not -v $bla
[13:31:06] <geirha> -v takes a variable as argument, not a string
[13:31:13] *** Quits: Jong (~Jong@2620:10d:c090:400::5:1592) (Ping timeout: 252 seconds)
[13:31:22] <earendel> # declare -x bla; if [[ -z $bla ]]; then echo zzz; fi; if [[ -v $bla ]]; then echo vvv; fi
[13:31:22] <shbot> earendel: zzz
[13:31:26] <consolers> I've read this section before but i've forgotten all about it
[13:32:01] <earendel> but empty != declared?
[13:32:38] *** Joins: shad (~shad@user/shad)
[13:32:38] <consolers> does zsh have something similar
[13:32:49] <geirha> # bla= ; if [[ -z $bla ]] ; then printf 'bla is empty or unset\n' ; fi ; if [[ -v bla ]] ; then printf 'bla is set\n' ; fi
[13:32:50] <shbot> geirha: bla is empty or unset
[13:32:50] <shbot> geirha: bla is set
[13:33:37] <geirha> earendel: indeed, declare doesn't "set" the variable unless you assign a value with =
[13:33:57] <earendel> # declare -x bla;  if [[ -z $bla ]] ; then printf 'bla is empty or unset\n' ; fi ; if [[ -v bla ]] ; then printf 'bla is set\n' ; fi
[13:33:58] <shbot> earendel: bla is empty or unset
[13:35:21] <earendel> when you say empty or unset .. where is difference between bot states?
[13:36:13] *** Quits: richardm75 (~richardm7@2600:8801:c507:b200:9100:273d:6bcd:c164) (Ping timeout: 240 seconds)
[13:36:18] <earendel> if thre isn't any, it's ok too.
[13:36:40] <emanuele6> # echo "${v+a}"
[13:36:41] <shbot> emanuele6: no output
[13:36:48] <emanuele6> # v=; echo "${v+a}"
[13:36:49] <shbot> emanuele6: a
[13:37:06] <earendel> well.
[13:37:21] <earendel> bash is no good:)
[13:38:15] <earendel> # declare -x v; echo "${v+a}"
[13:38:15] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[13:38:16] <shbot> earendel: no output
[13:38:22] <earendel> ok.
[13:38:35] <emanuele6> declared != set
[13:39:05] *** Joins: shailangsa (~shailangs@host86-186-136-27.range86-186.btcentralplus.com)
[13:39:34] <earendel> yes yes. i am just testing if it's true.;)
[13:39:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[13:39:48] <emanuele6> how does that test if it's true?
[13:40:17] <emanuele6> oh
[13:40:58] <earendel> by showing bla won't get expanded if declared.
[13:41:19] <earendel> or v
[13:41:41] <earendel> good for you *whipcrack
[13:41:45] *** Quits: mat-sharrow (~matthew@31.102.9.51.dyn.plus.net) (Quit: Konversation terminated!)
[13:42:00] * earendel twinkles
[13:42:04] <ormaaj> I would call it "empty". "set" and "declared" are both sometimes used for the same because this is pretty well unspecified and until recently undocumented.
[13:42:31] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:43:11] <earendel> me too
[13:43:41] <emanuele6> # if declare -p x &> /dev/null; then echo '$x is declared'; else echo '$x is not declared'; fi; if [[ ${x+is_set} ]]; then echo 'x is set'; else echo 'x is not set'; fi
[13:43:42] <shbot> emanuele6: $x is not declared
[13:43:42] <shbot> emanuele6: x is not set
[13:43:57] <emanuele6> # declare x; if declare -p x &> /dev/null; then echo '$x is declared'; else echo '$x is not declared'; fi; if [[ ${x+is_set} ]]; then echo '$x is set'; else echo '$x is not set'; fi
[13:43:58] <shbot> emanuele6: $x is declared
[13:43:58] <shbot> emanuele6: $x is not set
[13:44:03] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Ping timeout: 252 seconds)
[13:44:07] <earendel> what the heck is  this
[13:44:13] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:44:29] <emanuele6> # x=; if declare -p x &> /dev/null; then echo '$x is declared'; else echo '$x is not declared'; fi; if [[ ${x+is_set} ]]; then echo '$x is set'; else echo '$x is not set'; fi
[13:44:30] <shbot> emanuele6: $x is declared
[13:44:30] <shbot> emanuele6: $x is set
[13:44:36] *** Joins: et_ (~et@user/et)
[13:44:37] <earendel> you must have duckduckgogoed it.
[13:44:39] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[13:44:50] <earendel> like a  pro.
[13:44:54] <emanuele6> what?
[13:45:01] <earendel> just teasing.
[13:45:05] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[13:45:33] <earendel> ah ok. i get it.
[13:45:35] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[13:45:35] *** et_ is now known as et
[13:45:35] *** Joins: tejr (~tejr@user/tejr)
[13:47:45] <earendel> so you wouldn't use  ( declare -p ) because it would use subshell? are subshells really that bad?
[13:48:23] <emanuele6> what subshell are you talking about?
[13:49:23] <earendel> # declare -x x; if ( declare -p x ); then echo 'x is declared'; fi
[13:49:24] <shbot> earendel: declare -x x
[13:49:24] <shbot> earendel: x is declared
[13:49:40] <earendel> # if ( declare -p x ); then echo 'x is declared'; fi
[13:49:41] <shbot> earendel: bash: declare: x: not found
[13:50:16] <flower_> Is this are arithmetic code correct? http://paste.debian.net/?show=1222392;lines=1
[13:51:03] <earendel> ah ok.  it's because declare uses side effects.
[13:51:13] <emanuele6> you would not use $ in an artithmetic expression
[13:51:51] *** Quits: consolers (~consolers@117.207.24.241) (Ping timeout: 265 seconds)
[13:52:21] <flower_> ok
[13:52:23] <earendel> # x=4; none=$(declare -p x); echo $none
[13:52:23] <shbot> earendel: declare -- x="4"
[13:52:32] <flower_> shellcheck complains though: http://paste.debian.net/1222394/
[13:52:42] <emanuele6> earendel: it does not make sense to wrap that check in a subshell, but it does not matter
[13:52:47] <earendel> # x=4; none=$(declare -p x);
[13:52:48] <shbot> earendel: no output
[13:52:55] <earendel> meh.
[13:53:07] <earendel> fuck that. nobody understands that shit.
[13:53:21] <emanuele6> and if you do that, when you use () when you use if, you really don't know what you are doing
[13:53:29] <ormaaj> If you're hunting for some kind of consistant logic underlying all that It isn't there.  If you think you've got it all figured out you haven't looked hard enough. :)
[13:53:31] <earendel> bash is good to expand vars. and run commands. END
[13:53:49] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[13:54:08] <Soliton> # echo $((max_brightness * 0.77))  # flower_
[13:54:09] <shbot> Soliton: bash: max_brightness * 0.77: syntax error: invalid arithmetic operator (error token is ".77")
[13:54:17] <Soliton> !faq float
[13:54:17] <greybot> https://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
[13:54:22] <han-solo> bash is a good glue
[13:54:30] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[13:54:50] <han-solo> the kinda of glue that;s available mostly everwhere :p
[13:55:09] <earendel> # if (exit 0); then echo all good; fi
[13:55:10] <shbot> earendel: all good
[13:55:11] <flower_> Soliton, thx
[13:55:17] <earendel> # if (exit 1); then echo all good; fi
[13:55:18] <shbot> earendel: no output
[13:55:20] <Soliton> flower_: you could also calculate * 77 / 100 presumably.
[13:55:26] <earendel> here you go ^^
[13:55:33] <earendel> it works. dumpfbacke.
[13:56:05] <emanuele6> oh, i missed the 0.77
[13:57:43] <flower_> Soliton, at least shellcheck accepts it :)
[13:59:41] <emanuele6> !check echo "$(( 1 * 0.77 ))"
[13:59:41] <checkbot> emanuele6: Line 1: (( )) doesn't support decimals. Use bc or awk. See https://shellcheck.net/?id=cb72981
[14:00:21] <earendel> just that declare -p will print its error regardless of subshell. or so. you would actually need to jusify that &> /dev/null esoteric  .. im not entirely sure what &> is  .. but you supressed the output. usually ( ) will get you just the exit value of whatever is run in the subshell..right?  while $( ) should give the output. i dunno.. but it seems it's not correct for all fds
[14:00:45] <emanuele6> !&>
[14:00:45] <greybot> &> is a bash-specific feature. Â«&>fileÂ» is equivalent to Â«>file 2>&1Â». There is no &>> until Bash4. Use Â«>>file 2>&1Â» instead. We recommend not using &> or &>> in scripts, because it will break some valid scripts (see !badredir), and is an unintuitive syntax for beginners.
[14:00:55] *** Quits: dermoth (~dermoth@user/dermoth) (Ping timeout: 252 seconds)
[14:01:10] <earendel> ok. thank you.
[14:01:53] <emanuele6> declare -p VAR returns success only if VAR is declared
[14:03:07] <emanuele6> and prints informations about the variable if it declared or an error otherwise, but you don't care about that if you only want to check if it is set
[14:03:20] <earendel> # if [[ ! (mkdir /etc) ]]; then echo noooo; fi
[14:03:21] <shbot> earendel: bash: conditional binary operator expected
[14:03:21] <shbot> earendel: bash: expected `)'
[14:03:21] <shbot> earendel: bash: syntax error near `/etc)'
[14:03:44] <emanuele6> yes, [[ ! str1 str2 ]] is not valid..
[14:03:46] *** Joins: drd (~drd@93-42-69-115.ip85.fastwebnet.it)
[14:03:56] <emanuele6> nor is [[ ! ( str1 str2 ) ]]
[14:04:37] <earendel> # if (mkdir /etc); then echo yes ; else echo no; fi
[14:04:38] <shbot> earendel: bash: mkdir: cannot create directory `/etc': File exists
[14:04:38] <shbot> earendel: no
[14:05:00] <emanuele6> that subshell is useless
[14:05:01] <earendel> # if (echo ok); then echo yes ; else echo no; fi
[14:05:02] <shbot> earendel: ok
[14:05:02] <shbot> earendel: yes
[14:05:08] <earendel> wtf.
[14:05:10] <emanuele6> # if mkdir /etc; then echo yes ; else echo no; fi
[14:05:10] <shbot> emanuele6: bash: mkdir: cannot create directory `/etc': File exists
[14:05:11] <shbot> emanuele6: no
[14:05:16] <emanuele6> # if echo no; then echo yes ; else echo no; fi
[14:05:17] <shbot> emanuele6: no
[14:05:17] <shbot> emanuele6: yes
[14:05:19] <earendel> why can i read the echo?
[14:05:40] <earendel> echo ok
[14:05:50] <earendel> wait.
[14:05:52] <Soliton> your eyes work?
[14:06:03] <earendel> # if $(echo ok); then echo yes ; else echo no; fi
[14:06:04] <shbot> earendel: bash: ok: command not found
[14:06:04] <shbot> earendel: no
[14:06:07] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:06:10] <earendel> lol
[14:06:42] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[14:06:51] <emanuele6> # echo ls > /bin/ok; chmod +x /bin/ok; if $(echo ok); then echo yes ; else echo no; fi
[14:06:52] <shbot> emanuele6: yes
[14:07:12] <emanuele6> # echo ls -a / > /bin/ok; chmod +x /bin/ok; if $(echo ok); then echo yes ; else echo no; fi
[14:07:13] <shbot> emanuele6: .  ..  .triggers  bin  dev  etc  init  lib  lib64  proc  root  tmp  usr  var
[14:07:13] <shbot> emanuele6: yes
[14:07:18] <earendel> alright. successfully diminished confidence now. all by myself! selftrolling to mastery.
[14:07:33] <earendel> if the fool persist in his folly, he'd became wise -- billy blake
[14:09:48] *** tessio is now known as earnestly
[14:09:59] *** earnestly is now known as tessio
[14:10:41] <earendel> i guess 2>&1 wouldn't have worked even?
[14:10:42] *** Quits: quazimodo (~quazimodo@n1-41-223-188.bla2.nsw.optusnet.com.au) (Ping timeout: 265 seconds)
[14:11:23] <earendel> as used to supress command output in if clause?
[14:12:33] <earendel> # if echo blah > file;  then cat file; fi
[14:12:34] <shbot> earendel: blah
[14:12:42] <Soliton> stdout and stderr usually both point to the terminal so that likely does nothing.
[14:12:45] <earendel> # if echo blah > file;  then echo lol; fi
[14:12:46] <shbot> earendel: lol
[14:13:11] *** Joins: dermoth (~dermoth@user/dermoth)
[14:17:25] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 252 seconds)
[14:17:51] <earendel> ah .. i can make sense of it.  actually if will just take echo blah as command; the output will be redirected .. but kinda like i++ returns i, and then is increased. (unlike ++i)
[14:18:25] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[14:19:20] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[14:19:59] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 252 seconds)
[14:19:59] *** ayusta is now known as ayustae
[14:21:49] <earendel> how would you check if echo foo && echo bar is true (supressing output)?
[14:22:32] *** Quits: tobybl (~tobybl@213.31.132.232) (Remote host closed the connection)
[14:22:39] <earendel> can you use {} for that?
[14:22:58] <earendel> or will you go down all the way to subs*hell
[14:24:44] <earendel> # if { echo foo &> file } && { echo bar &> file }; then echo OK; else echo WTF; fi
[14:24:45] <shbot> earendel: bash: syntax error near unexpected token `then'
[14:24:46] *** Joins: legola (~legola@46.235.101.65)
[14:25:18] <earendel> # if echo foo &> file  &&  echo bar &> file; then echo OK; else echo WTF; fi
[14:25:19] <shbot> earendel: OK
[14:26:56] <earendel> can blocks be used outside functions to do sth useful?
[14:27:08] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Remote host closed the connection)
[14:27:26] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[14:27:54] <earendel> # if echo foo &> file  &&  mkdir /etc  &> file; then echo OK; else echo WTF; fi
[14:27:55] <shbot> earendel: WTF
[14:29:04] *** Quits: dermoth (~dermoth@user/dermoth) (Ping timeout: 265 seconds)
[14:30:18] *** Joins: pj (~pj@ghettoforge/pj)
[14:33:13] <earendel> pefectly fine.  so never use subshells in if condition. right emanuele6?
[14:34:03] <earendel> unless was (( )) a subshell too? is it?
[14:34:33] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[14:35:02] *** Joins: t0kie (~t0kie@user/t0kie)
[14:35:23] *** Quits: humky (~humky@user/humky) (Ping timeout: 252 seconds)
[14:36:05] <earendel> .. lonely but fabulous ;>
[14:36:26] <earendel> cu laters. gamonie.
[14:42:06] *** Joins: dermoth (~dermoth@user/dermoth)
[14:42:14] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[14:50:37] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[14:51:25] *** Joins: AsenMx (~AsenMx@user/asenmx)
[14:51:49] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:52:37] *** Quits: RandomGuy21 (~RandomGuy@106.51.73.107) (Ping timeout: 240 seconds)
[14:53:21] *** Joins: RandomGuy21 (~RandomGuy@117.230.178.118)
[14:53:52] *** Joins: wstrnr (~wstrnr@user/wstrnr)
[14:56:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:57:25] *** Quits: RandomGuy21 (~RandomGuy@117.230.178.118) (Ping timeout: 240 seconds)
[14:58:07] *** Quits: t0kie (~t0kie@user/t0kie) (Quit: Leaving)
[14:58:12] *** Joins: RandomGuy21 (~RandomGuy@106.51.73.107)
[14:58:55] *** Joins: t0kie (~t0kie@2a01:c22:b5f9:4100:e23f:49ff:fe15:e9c3)
[14:59:03] *** Quits: t0kie (~t0kie@2a01:c22:b5f9:4100:e23f:49ff:fe15:e9c3) (Client Quit)
[14:59:22] *** Joins: t0kie (~t0kie@user/t0kie)
[15:01:23] *** Joins: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26)
[15:01:37] *** Joins: damxsa_ (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26)
[15:01:42] *** Quits: damxsa_ (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26) (Remote host closed the connection)
[15:03:25] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[15:04:06] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:05:17] *** Quits: steam (~steam@user/steam) (Remote host closed the connection)
[15:05:19] <wstrnr> hello guys.  can somebody please tell me, does bash in latest versions (5 maybe) provide readline features in prompt and reply interface of select command?
[15:06:20] <wstrnr> in 4.3 i see no readline features in select
[15:06:53] *** Joins: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[15:07:00] *** Joins: steam (~steam@user/steam)
[15:07:12] *** Quits: t0kie (~t0kie@user/t0kie) (Quit: Leaving)
[15:08:18] *** Joins: alius (~adrien@2a01:e0a:13c:cd90:c977:5b1c:470e:ad38)
[15:08:24] <emanuele6> wstrnr: no, i does not
[15:08:43] <wstrnr> ok, thank you.
[15:09:16] <emanuele6> s/i/&t/
[15:09:21] <emanuele6> you are welcome
[15:09:29] *** Quits: omnigoat (~omnigoat@user/omnigoat) (Ping timeout: 252 seconds)
[15:09:43] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[15:11:19] *** Quits: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[15:12:08] *** Joins: t0kie (~t0kie@user/t0kie)
[15:12:32] *** Joins: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae)
[15:12:36] *** Joins: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[15:12:57] <tessio> im trying to view some pictures with eog
[15:13:02] <tessio> eog "$(find -maxdepth 1 -type f -cmin -20)"
[15:13:15] *** Joins: tobybl (~tobybl@213.31.132.232)
[15:13:19] <tessio> the files have spaces
[15:13:19] <wstrnr> find ... -exec eog {} +
[15:13:39] <wstrnr> if you use  -exec eog {} +  spaces will not break it
[15:14:09] <tessio> well it's not working i tried
[15:14:17] <Soliton> !doesntwork
[15:14:17] <greybot> Saying something "doesn't work" helps neither you or us. Explain the result you *want* or *expect*, what you are *doing* and *how* it is failing. Copy/paste the commands you use and the errors they produce. Consider set -x to get more information on what is happening.
[15:14:39] *** Quits: tobybl (~tobybl@213.31.132.232) (Remote host closed the connection)
[15:14:41] <gnoo> what is wrong with this extglob?  'https://?(www.)pastebin.com/!(raw)' it matches https://pastebin.com/raw/asfd
[15:14:58] <emanuele6> raw/asfd is not raw
[15:15:00] <emanuele6> so it matches
[15:15:21] <gnoo> hmm, so i should use (!raw)* ?
[15:15:27] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[15:15:30] <jelly> TIL extglob are the new regex
[15:15:32] *** Joins: Jong (~Jong@2620:10d:c090:400::5:6122)
[15:15:37] <Soliton> well what do you want to match?
[15:16:21] *** Quits: t0kie (~t0kie@user/t0kie) (Client Quit)
[15:16:27] <gnoo> convert non-raw links into raw ones like  https://pastebin.com/raw/gdpVNWL4
[15:16:42] <gnoo> convert non-raw links into raw ones like https://pastebin.comgdpVNWL4 ->  https://pastebin.com/raw/gdpVNWL4
[15:16:51] <gnoo> arrrgh
[15:16:55] * gnoo can't type
[15:17:35] <gnoo> convert non-raw links into raw ones like https://pastebin.comg/gdpVNWL4 ->  https://pastebin.com/raw/gdpVNWL4
[15:17:48] * gnoo pats pasteban
[15:17:49] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 240 seconds)
[15:18:32] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[15:18:53] <wstrnr> use =~ and regexes for that.  you will need to extract the last part of the url anyway
[15:19:18] <Soliton> # url=https://pastebin.com/gdpVNW; if [[ $url == https://?(www.)pastebin.com/!(raw*) ]]; then echo match; fi
[15:19:18] <pasteban> Paste is available without ads on https://pastebin.com/raw/gdpVNW
[15:19:19] <shbot> Soliton: match
[15:19:20] *** Quits: damxsa (~damx@2001:16a2:cc64:7200:e49d:a9e2:19fd:26) (Ping timeout: 265 seconds)
[15:19:40] <Soliton> or probably !(raw/*)
[15:19:57] <emanuele6> url=https://pastebin.com/gdpVNWL4 url=${url/.com*\//.com/raw/}; declare -p url
[15:19:57] <pasteban> Paste is available without ads on https://pastebin.com/raw/gdpVNWL4
[15:20:00] <emanuele6> # url=https://pastebin.com/gdpVNWL4 url=${url/.com*\//.com/raw/}; declare -p url
[15:20:01] <pasteban> Paste is available without ads on https://pastebin.com/raw/gdpVNWL4
[15:20:02] <shbot> emanuele6: declare -- url="https://pastebin.com/raw/gdpVNWL4"
[15:20:10] <emanuele6> # url=https://pastebin.com/raw/gdpVNWL4 url=${url/.com*\//.com/raw/}; declare -p url
[15:20:11] <shbot> emanuele6: declare -- url="https://pastebin.com/raw/gdpVNWL4"
[15:20:18] <Jong> What's the name of that unix tool that can automate setup scripts? For example suppose we need to install 4 things, and each one has its own unique set of prompts. What's a tool that can turn this into a single-command ?
[15:21:04] <emanuele6> replaces everything from .com up to the last / with .com/raw/
[15:21:21] <gr33n7007h> `mapfile -td',' data < input` the last elemnt is $'5\n' how to remove the newline?
[15:21:25] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[15:21:27] <wstrnr> Jong: you mean expect?
[15:21:30] <wstrnr> !expect
[15:21:30] <greybot> expect (http://expect.sf.net/) is a tool for scripting terminal applications in tcl, join #tcl for help. Alternative tools exist in most languages, for a shell version see http://empty.sf.net
[15:21:35] <Jong> yes that's it! Thanks wstrnr !
[15:21:45] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[15:21:49] <emanuele6> that is not a unix tool though, it is a tcl library
[15:22:00] <Jong> what's tcl?
[15:22:05] <emanuele6> a programming language
[15:22:11] <Jong> oh
[15:22:16] <Jong> but you can run it in unix right?
[15:22:27] <emanuele6> sure
[15:23:07] <gnoo> i used !(raw/*). thanks emanuele6 Soliton
[15:24:35] <wstrnr> # array=(gr33n7007h: $'\n');  for i in "${!array[@]}"; do [[ ${array[i]} == $'\n' ]] && unset 'array[i]'; done;   declare -p array
[15:24:36] <shbot> wstrnr: declare -a array=([0]="gr33n7007h:")
[15:24:53] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 252 seconds)
[15:24:58] <Soliton> # mapfile -td',' data <<< foo,bar,baz; n=${#data} data[n-1]=${data[n-1]%$'\n'}; declare -p data
[15:24:59] <shbot> Soliton: declare -a data=([0]="foo" [1]="bar" [2]="baz")
[15:25:49] <wstrnr> ${#data} returns the length of zeroth element
[15:26:07] <Soliton> yeah, missing [@]
[15:26:12] <wstrnr> count of array elements is ${#data[@]}, yes
[15:26:14] <tessio> why this is not working ?
[15:26:16] <tessio> eog $(find -type f | awk '{printf "%s ", $0}')
[15:26:18] <tessio> im just curious
[15:26:29] <Soliton> what is that supposed to do?
[15:26:30] <wstrnr> what the hell, man
[15:26:55] <Soliton> add spaces that will be removed by wordsplitting?
[15:26:57] <tessio> im in a directory which have all the files in it picture :D
[15:27:01] *** Joins: t0kie (~t0kie@user/t0kie)
[15:27:07] <gr33n7007h> thanks Soliton wstrnr that works with #data[@]
[15:27:15] <wstrnr> tessio: learn to use -exec
[15:27:24] <wstrnr> this is the true way
[15:27:28] <tessio> i know
[15:27:31] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[15:27:32] <Soliton> eog *.png
[15:27:34] <tessio> i just curious as to why the above is not working
[15:27:40] <gnoo> tessio: eog will get <a> <filewith> <spaces> <secnondfile> <third> <with> <spaces> # when there are 3 files of whom 2 have spaces in them
[15:27:40] <tessio> Soliton: i know ...
[15:27:48] <tessio> again im curious as to why the above ise not working
[15:27:53] <Soliton> well again, what should it do?
[15:28:09] <emanuele6> last time you didn't seem to care about the output of ls not being parsable :/
[15:28:11] <Jong> wstrnr  is expect different from autoexpect?
[15:28:25] <Soliton> you want that to magically fix word splitting to guess which whitespace you care about?
[15:28:46] <tessio> emanuele6: last time you didn't seem to care when PM'ing you
[15:28:52] <tessio> so i guess we both have flaws
[15:29:10] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[15:29:35] <gnoo> meanwhile emacs: our file manager is just parsed output of ls ;)
[15:29:40] <wstrnr> Jong: i have no clue what is autoexpect.  but if you read a little bit of TCL documentation you will quickly learn to use both the TCL itself and the expect tool
[15:29:52] *** Quits: t0kie (~t0kie@user/t0kie) (Client Quit)
[15:30:00] <wstrnr> Jong: of course, don't forget to read a little bit of expect documentation too
[15:30:45] <hejux> how to get the real script name itself with pure bash?
[15:31:03] <gnoo> hejux: you can't. you can try to use $0 but it is not reliable
[15:31:10] <emanuele6> !BASH_SOURCE
[15:31:14] <emanuele6> !BASHSOURCE
[15:31:17] <emanuele6> !$0
[15:31:18] <greybot> $0 is like argv[0] in C. It's whatever the caller decides to put there. You can't rely on it. See http://mywiki.wooledge.org/BashFAQ/028 and http://www.bash-hackers.org/wiki/doku.php/scripting/posparams#the_first_argument
[15:31:29] <hejux> and script `real path` and `script dir`
[15:31:29] *** Quits: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[15:31:30] <wstrnr> hejux: just put the name of the script in the script
[15:31:31] <emanuele6> well, you do it with BASH_SOURCE
[15:31:34] <tessio> why eog $(find -type f | awk '{printf "%s ", $0}') i expect it to show all my pictures in the directory
[15:31:46] <tessio> still didn't got any help ...
[15:31:55] <Soliton> it won't work with filenames with whitespace or globs.
[15:32:01] <tessio> ok
[15:32:03] <tessio> but why
[15:32:05] <earnest> (Doesn't eog have recursive traversal?)
[15:32:06] <gnoo> <gnoo> tessio: eog will get <a> <filewith> <spaces> <secnondfile> <third> <with> <spaces> # when there are 3 files of whom 2 have spaces in them
[15:32:07] <Soliton> wordsplitting and pathname expansion do not do what you want.
[15:32:28] <Soliton> i have no idea what you expect to work in any way towards your goal.
[15:32:33] <tessio> there isn't wordsplitting after command substitution ?
[15:32:39] <wstrnr> !wordsplitting >tessio
[15:32:39] <greybot> tessio: echo $foo; rm $foo -- If you leave $foo unquoted, bash will *remove* all whitespace (newlines, spaces, tabs) while expanding it, take each *word* as a separate argument. `echo` prints these words separated by one space and `rm` deletes each word. So ALWAYS *quote* your parameter expansions: echo "$foo" -- http://mywiki.wooledge.org/WordSplitting
[15:32:40] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:32:40] <Soliton> sure there is.
[15:33:00] <tessio> so why there isn't in this case ?
[15:33:04] <emanuele6> there is word splitting only after substitutions only on the substituted parts
[15:33:07] <Soliton> if there wasn't it'd be one big word and won't do what you want either.
[15:33:29] <tessio> yes that's exactly what i don't understand
[15:33:36] <Soliton> impossible to explain why something you claim that is not true is that way.
[15:33:42] <earnest> # f() { printf [%s] "$@"; }; f $(echo 'a b c')
[15:33:43] <shbot> earnest: [a][b][c]
[15:33:44] <hejux> emanuele6: pure bash... no gnu coreutils
[15:33:52] <earnest> # f() { printf [%s] "$@"; }; f "$(echo 'a b c')"
[15:33:53] <shbot> earnest: [a b c]
[15:34:00] <emanuele6> hejux: how is $BASH_SOURCE not pure bash? ...
[15:34:02] *** Joins: t0kie (~t0kie@user/t0kie)
[15:34:33] <earnest> hejux: Stop depending on $0, or more generally the location of your script.  Just don't do it, pretend such a thing cannot be done, and move on
[15:34:34] <hejux> emanuele6: it does not work with symbol link?
[15:34:51] <tessio> wstrnr: yes but the problem is ... it's either take each word as a seperate argument and all the files as one
[15:34:52] <wstrnr> your ``eog $(...)'' thing will work as planned only if all of the filenames have no space characters in them, also no wildcard characters (? * [...], maybe extglob syntax)
[15:34:54] <tessio> which both are not desirable
[15:35:11] <earnest> tessio: bingo, what you're trying to do won't work
[15:35:24] <wstrnr> tessio: yet you've said earlier your filenames have spaces
[15:35:26] <tessio> i konw it doesn't and i know how to make it work
[15:35:38] <tessio> i just wanted to know how the shell work as i explaiend above
[15:35:49] <Soliton> so read the wiki page.
[15:36:12] <hejux> emanuele6: https://0x0.st/-hCP.sh
[15:36:22] <tessio> read the wiki page is the wildcard answer
[15:36:28] <tessio> you can say it to every question
[15:36:39] <Soliton> well, people are trying to explain and you keep asking nothing specific.
[15:36:41] <earnest> tessio: Yes, that's why it exists
[15:36:46] <hejux> if the script is called by ./soft_link_to_script
[15:36:51] <earnest> To answer commonly asked questions
[15:36:59] <earnest> hejux: Stop depending on it, move on
[15:37:04] <tessio> im under attack here with no reason
[15:37:05] <wstrnr> hejux: it's not a problem if the script is called like that
[15:37:12] <tessio> i just needed help
[15:37:16] <earnest> tessio: And it was provided
[15:37:31] <tessio> ok thanks
[15:37:33] <earnest> Both links to documentation, demonstrations, explanations, etc.
[15:37:54] *** Joins: t0kie_ (~t0kie@2a01:c22:b5f9:4100:e23f:49ff:fe15:e9c3)
[15:38:00] <emanuele6> i also tried to explain it to you last time, but you said you did not care
[15:38:02] *** Joins: lavaball (felix@31.204.155.215)
[15:38:10] <tessio> there's nothing wrong with hand holding every once in a while jez...
[15:38:13] <wstrnr> hejux: for example, in "Usage: ..." messages it is perfectly fine to just put $0 (argv[0]) in the program name (some paranoid people also remove all possible control chars from it or replace them with ?)
[15:38:19] <earnest> tessio: You were
[15:38:44] *** Quits: t0kie_ (~t0kie@2a01:c22:b5f9:4100:e23f:49ff:fe15:e9c3) (Remote host closed the connection)
[15:38:44] *** Quits: t0kie (~t0kie@user/t0kie) (Client Quit)
[15:38:57] <earnest> wstrnr: I don't agree, changing the name of the program based on $0 is mostly absurd
[15:39:06] *** Joins: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[15:39:14] <earnest> There is a small usecase for things liek busybox, otherwise it should be hardcoded.  Surprises like this are not useful
[15:39:23] <earnest> wstrnr: https://flak.tedunangst.com/post/a-prog-by-any-other-name
[15:39:38] <tessio> earnest: you always hated me, always said told my that im signaling impotancy in public
[15:39:43] <earnest> Further, stop depending on $0 or the location of your script.  Just don't do it
[15:39:55] <earnest> tessio: Oh it's you?  I see nothing has changed, still full of resentment
[15:39:56] <hejux> https://0x0.st/-hCb.png
[15:39:59] *** Joins: t0kie (~t0kie@user/t0kie)
[15:40:04] <hejux> i did some test wstrnr
[15:41:01] <tessio> nvm
[15:41:03] <tessio> ..
[15:41:08] <tessio> thanks for the help
[15:41:25] <hejux> i think i'll just stay with $(realpath "$0")
[15:41:34] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[15:41:42] <hejux> and then, basename, dirname ...
[15:41:50] <earnest> hejux: Don't
[15:42:28] <hejux> earnest: https://0x0.st/-hCP.sh https://0x0.st/-hCb.png
[15:42:52] <earnest> hejux: Don't depend on $0, don't look for the location of your script, don't use BASH_SOURCE.  Don't do any of this
[15:43:41] <NRK[m]> what are u doing with the location of the script?
[15:43:51] <hejux> well, what do i do?
[15:43:57] <earnest> Just don't do it
[15:44:06] <gnoo> hejux: it won't work when for eg, you use ssh and execute the script on the remote side
[15:44:24] <hejux> NRK[m]: so i can move my script to another place and the variables inside scirpt still work
[15:44:46] <NRK[m]> w-what?!
[15:44:59] <wstrnr> !config
[15:44:59] <greybot> If your script needs configuration, the way to do that in bash is to create a config file that adheres to bash syntax and source that file from the beginning of your script: source ~/.myscript.conf
[15:45:07] <hejux> gnoo: realpath works for sure, i do ssh and run my script all the time, no problem
[15:45:08] <NRK[m]> why does the variables inside your script depend on the location of your script
[15:45:18] <earnest> hejux: Hardcode the paths under either an environment prefix or command-line flag
[15:45:41] <Soliton> !faq location
[15:45:42] <greybot> https://mywiki.wooledge.org/BashFAQ/028 -- How do I determine the location of my script?  I want to read some config files from the same place.
[15:45:44] <hejux> selfpath=$(realpath "$0") ; self=$(basename "$selfpath") ; selfdir=$(dirname "$selfpath") ;  readonly self selfpath selfdir
[15:46:08] <Soliton> !readonly
[15:46:08] <greybot> Variables marked readonly (declare -r) are intended to be used with a restricted shell, to stop you from trivially changing PATH to escape the restrictions (etc.). They were never intended to be widely used in scripts. If you try, you will see odd results (-r at a global scope is passed down to local scopes).
[15:46:33] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Quit: This computer has gone to sleep)
[15:46:33] *** Quits: t0kie (~t0kie@user/t0kie) (Quit: Leaving)
[15:46:56] <hejux> yes. i do not change it in the codes following...
[15:47:02] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[15:47:07] <wstrnr> earnest: i agree with the multipart script scenario.  if your "script" is composed of multiple parts, it has to be properly installed (especially internationalization files, configs, /usr/lib/some-name/* helper programs or libraries etc.), yes such filenames have to be hardcoded.  practically, in such cases there should be a ./configure script in your codebase, and it should be executed by users during installation to convert the
[15:47:07] <wstrnr> your-script.in file - where instead of filenames there are %special_markers% - into your-script with all filenames filled in, effectively hardcoded
[15:47:52] <earnest> wstrnr: hardcode, djb's slashpackage article on finding should put to bed most of these things
[15:47:55] <wstrnr> earnest: but in "Usage: ..." messages it is better to display the program name the way user called the program
[15:48:03] <earnest> wstrnr: No it's not
[15:48:10] <wstrnr> earnest: displaying something else will be a surprise for the user
[15:48:12] <gnoo> hejux: i ment when you do printf 'echo $0 ; echo "$(realpath \"$0\")"' | ssh user@remote bash
[15:48:16] <earnest> It probides no utility and only serves as a vector for malicious use
[15:48:26] <hejux> Soliton: reading: FAQ028
[15:48:28] <earnest> wstrnr: The fact that it depends on $0 is what allows it to do that
[15:48:54] <earnest> wstrnr: So what do you trust?  The name of the file, which can be anything, or $0, which can be anything?  Clearly both are not reliable
[15:49:32] <hejux> gnoo: the code before  `|` is parsed by your local shell. you have to escape the '$'
[15:49:43] <earnest> Then again, my position is the reduction of surprises in using computers
[15:49:47] *** Quits: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[15:49:48] <gnoo> hejux: no
[15:49:49] <earnest> Some people want the opposite
[15:50:19] <gnoo> hejux: $ inside '' will not be parsed
[15:51:12] <gnoo> # printf 'echo $0 ; echo $$' | cat
[15:51:13] <shbot> gnoo: echo $0 ; echo $$
[15:51:24] <earnest> (ssh is tricky, I tend to turn these sorts of scripts into services where I only use ssh to communicate commands to a fifo on the other end)
[15:52:18] <earnest> E.g. similar to systemctl -H
[15:52:27] <geirha> # printf '\"'
[15:52:28] <shbot> geirha: "
[15:52:44] <geirha> you need \\ for printf to output \
[15:52:55] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[15:53:08] <geirha> though looking closer, you don't want \ anyway
[15:53:28] <gnoo> oh right, because it is in format string. should use '%s' <string> instead
[15:53:58] <geirha> yeah, and remove the backslashes
[15:54:37] <wstrnr> earnest: yes, some people see the threat in displaying any "alien" data in "Usage: ..." messages, so such people tend to remove control characters from these messages using e.g. "${0//[[:cntrl:]]/?}".  i also do that sometimes.  other problem that can be mentioned is super-long filename, but in bash it is not dangerous.  in C programs, yes, an attacker can run the program with super-long program name to exploit buffer overflows in debug
[15:54:38] <wstrnr> messages, but in bash this cannot be done
[15:55:14] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[15:57:11] <emanuele6> you can create a link to that program and call the link that has a super-long name
[15:57:22] <geirha> instead you put whitespace and glob chars in filenames, and watch scripts burn
[15:57:23] <emanuele6> so it  can be done in bash
[15:57:40] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[15:57:51] <Soliton> their point was that it doesn't matter.
[15:58:08] <wstrnr> geirha: if $0 is properly quoted in all the needed places, nothing will burn
[15:58:28] <wstrnr> emanuele6: and what will happen if $0 will be super-long?
[15:58:30] <geirha> yes, but that's not the case with most scripts in the wild
[15:59:15] *** Joins: reezoh (~reezoh@2600:1702:3cf0:2e00:1498:20e4:f2fa:3f4a)
[15:59:36] <emanuele6> it will be super-long
[15:59:45] <wstrnr> emanuele6: you will not be able to consume all of the computer's RAM with just a very long $0.  it will not result in buffer overflow with stack-damage based attack and shellcode injection like in flawed C programs
[16:00:46] *** Joins: zeden (~zeden@user/zeden)
[16:00:53] <wstrnr> earnest: overall, i agree with the statement that program name should be hardcoded.  also information about the package name and package version should be hardcoded in the program that actually was packaged at some point and has a feature for displaying own version information.  this information should not come from outslide at rintime, especially not be based on filename or environment variables
[16:01:36] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[16:01:39] *** Quits: medard (~mithrin@stip-static-62.213-81-207.telecom.sk) (Ping timeout: 256 seconds)
[16:01:55] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[16:03:21] *** Quits: drd (~drd@93-42-69-115.ip85.fastwebnet.it) (Ping timeout: 256 seconds)
[16:03:37] *** Joins: mithrin (~mithrin@stip-static-62.213-81-207.telecom.sk)
[16:04:35] <earnest> Yeah, spot on
[16:05:11] <earnest> Heh, although, it's not hard to edit the binary to display something else.  But drawing lines and all that
[16:05:15] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[16:05:37] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:05:41] <earnest> (At least if it was managed, or tracked, checksums via package manager or mtree can detect modification)
[16:06:36] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[16:08:33] *** Joins: tobybl (~tobybl@213.31.132.232)
[16:11:14] *** Quits: tobybl (~tobybl@213.31.132.232) (Remote host closed the connection)
[16:11:15] *** Parts: tessio (~weechat@141.226.73.109) (WeeChat 3.2)
[16:13:51] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[16:15:15] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[16:15:16] *** ayusta is now known as ayustae
[16:16:22] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[16:18:47] *** Quits: davidl (~quassel@217-64-148-110.pool.ovpn.com) (Ping timeout: 265 seconds)
[16:19:11] *** Joins: m4n__ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[16:19:43] *** Joins: davidl (~quassel@185.86.106.208)
[16:21:21] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[16:26:44] *** Joins: shad (~shad@user/shad)
[16:30:39] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:30:43] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[16:32:57] *** Joins: zoe (~zoe@fsf/member/zoe)
[16:34:34] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[16:35:31] *** Joins: tobybl (~tobybl@213.31.132.232)
[16:35:39] *** Quits: m4n__ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[16:38:11] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Quit: This computer has gone to sleep)
[16:39:09] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:39:46] *** Joins: mnx (marian@user/mnx)
[16:39:57] *** Joins: m4n__ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[16:40:02] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[16:42:28] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 265 seconds)
[16:42:54] *** Joins: AsenMx (~AsenMx@user/asenmx)
[16:43:01] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[16:46:23] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[16:46:24] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[16:46:45] *** Quits: tobybl (~tobybl@213.31.132.232) (Remote host closed the connection)
[16:46:55] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[16:47:51] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[16:48:10] *** Joins: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[16:48:52] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[16:50:13] *** Quits: m4n__ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[16:50:23] *** Quits: RandomGuy21 (~RandomGuy@106.51.73.107) (Ping timeout: 256 seconds)
[16:51:03] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[16:51:46] *** Joins: RandomGuy21 (~RandomGuy@117.230.148.254)
[16:52:01] *** Joins: nordicX (~nordicnom@2601:8c2:8200:df00::1fd)
[16:54:10] *** Joins: reset (~reset@user/reset)
[16:58:53] *** Quits: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[16:58:58] *** Quits: AsenMx (~AsenMx@user/asenmx) (Read error: Connection reset by peer)
[16:59:36] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[17:00:28] *** Quits: iconoclasthero (~quassel@pool-68-238-241-198.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[17:02:53] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Quit: This computer has gone to sleep)
[17:04:00] *** Parts: nordicX (~nordicnom@2601:8c2:8200:df00::1fd) (Leaving)
[17:06:48] *** Joins: situ (~situ@ip-89-176-145-74.net.upcbroadband.cz)
[17:10:48] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Read error: Connection reset by peer)
[17:11:47] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:12:35] *** Joins: put_in (~put_somew@14.161.78.30)
[17:12:46] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:14:51] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[17:15:31] *** Quits: reezoh (~reezoh@2600:1702:3cf0:2e00:1498:20e4:f2fa:3f4a) (Read error: Connection reset by peer)
[17:16:13] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Ping timeout: 240 seconds)
[17:18:42] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:21:29] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[17:22:22] *** Joins: ElQelinho (~ElQelinho@91.192.22.238)
[17:25:29] *** Quits: kdc (~kdc@196.211.197.159) (Quit: Leaving)
[17:26:53] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[17:27:37] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[17:27:40] *** Quits: kj (~kj@kj.aerisnetwork.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:27:53] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[17:28:40] *** Joins: OlCe` (~user@lfbn-nic-1-117-213.w2-15.abo.wanadoo.fr)
[17:29:07] *** Joins: kevgao (~kevgao@c-174-63-68-26.hsd1.ct.comcast.net)
[17:29:55] *** Quits: m4n (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[17:30:27] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:31:17] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Ping timeout: 265 seconds)
[17:31:58] *** Parts: ubique (~ubique@188.26.181.124) (.)
[17:32:18] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[17:35:26] *** Quits: hejux (~hejux@104.224.190.144.16clouds.com) (Remote host closed the connection)
[17:35:42] *** Joins: hejux (~hejux@104.224.190.144.16clouds.com)
[17:38:27] *** Joins: Nact (~l@2a02:2788:11c4:6e6:ede0:bbc0:a761:9e01)
[17:38:49] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[17:38:53] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[17:38:59] *** Joins: drd (~drd@93-42-69-115.ip85.fastwebnet.it)
[17:41:48] *** Joins: taupiqueur (~taupiqueu@218.198.204.77.rev.sfr.net)
[17:42:53] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 265 seconds)
[17:46:16] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[17:49:17] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Quit: This computer has gone to sleep)
[17:52:48] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[17:55:30] *** Quits: Nact (~l@2a02:2788:11c4:6e6:ede0:bbc0:a761:9e01) (Quit: Konversation terminated!)
[17:56:01] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[17:56:22] *** Joins: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[17:58:28] *** Joins: varazir (~mircwars@81-237-111-82-no2300.tbcn.telia.com)
[18:00:01] *** Quits: hejux (~hejux@104.224.190.144.16clouds.com) (Remote host closed the connection)
[18:00:05] *** Quits: RandomGuy21 (~RandomGuy@117.230.148.254) (Ping timeout: 256 seconds)
[18:00:18] *** Joins: hejux (~hejux@104.224.190.144.16clouds.com)
[18:00:26] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Quit: This computer has gone to sleep)
[18:03:01] *** Joins: RandomGuy21 (~RandomGuy@117.230.148.254)
[18:03:17] *** Joins: seninha (~seninha@user/seninha)
[18:03:59] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 268 seconds)
[18:08:31] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[18:09:57] *** Quits: RandomGuy21 (~RandomGuy@117.230.148.254) (Ping timeout: 265 seconds)
[18:12:57] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Client Quit)
[18:13:14] *** Quits: ElQelinho (~ElQelinho@91.192.22.238) (Ping timeout: 268 seconds)
[18:14:50] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[18:15:02] *** Joins: tobybl (~tobybl@213.31.132.232)
[18:15:55] *** Joins: RandomGuy21 (~RandomGuy@117.230.56.93)
[18:16:04] *** Joins: callq (~callq@157.41.67.21)
[18:16:32] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 240 seconds)
[18:17:23] *** Joins: ElQelinho (~ElQelinho@91.192.22.238)
[18:19:45] *** Quits: zouhair (~zouhair@142.182.70.140) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:21:54] *** Joins: m4n__ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de)
[18:22:23] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[18:22:44] *** Joins: arinov (~arinov@212.156.215.30)
[18:23:01] *** Quits: RandomGuy21 (~RandomGuy@117.230.56.93) (Ping timeout: 240 seconds)
[18:23:05] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[18:23:21] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[18:24:51] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[18:25:01] *** Quits: m4n_ (~emacs@ip5f5bd1ff.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[18:26:26] *** Joins: eem (~eem@user/eem)
[18:29:16] *** Quits: masterkorp (~masterkor@user/masterkorp) (Quit: The Lounge - https://thelounge.chat)
[18:29:52] *** Quits: callq (~callq@157.41.67.21) (Quit: callq)
[18:30:03] <gr33n7007h> who's done part 1 of day 7 (AOC) in bash and how fast is yours?
[18:30:18] *** Quits: wstrnr (~wstrnr@user/wstrnr) (Quit: .)
[18:30:24] *** Joins: masterkorp (~masterkor@user/masterkorp)
[18:30:24] *** Joins: tobybl_ (~tobybl@213.31.132.232)
[18:30:52] *** Joins: xxzz (~xxzz@ec2-3-133-104-162.us-east-2.compute.amazonaws.com)
[18:31:22] *** Quits: Laskolnyk (~wasyl@89-76-136-17.dynamic.chello.pl) (Quit: Upgrade!)
[18:31:30] *** Parts: GNUHacker (~foobar@fsf/member/GNUHacker) (https://gnu.org)
[18:32:15] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[18:32:37] *** Quits: tobybl (~tobybl@213.31.132.232) (Ping timeout: 252 seconds)
[18:35:01] <gr33n7007h> https://gist.github.com/gr33n7007h/02b50016bf608474156e3815be52166f
[18:35:11] *** Joins: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de)
[18:35:22] <gr33n7007h> does that seem reasonable for that peice of shit code :p
[18:35:45] <han-solo> can one use any lang/lib with doing AoC ?
[18:36:03] * han-solo should probably read the guidelines
[18:36:04] <osse> han-solo: you only submit the answers to the questions
[18:36:12] <osse> han-solo: you can do it on a piece of paper if you want
[18:36:18] <han-solo> osse: ah.... Thanks
[18:36:55] <han-solo> i was seeing all these folks sharing their code, and was wondering if it;s something like hackerrank or some stuffs like that
[18:37:11] <han-solo> when you provide the code and they run some couple of tests
[18:37:15] <han-solo> s/when/where/
[18:37:28] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:37:44] <osse> gr33n7007h: bro do u even median
[18:37:49] *** Quits: Inline (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 240 seconds)
[18:38:07] <noord> gr33n7007h: there is always one liner python code
[18:39:01] *** Quits: xxzz (~xxzz@ec2-3-133-104-162.us-east-2.compute.amazonaws.com) (Quit: leaving)
[18:39:04] <gr33n7007h> noord: i do my in ruby but i'm trying to do each one in bash too.
[18:39:20] *** Joins: xxzz (~xxzz@ec2-3-133-104-162.us-east-2.compute.amazonaws.com)
[18:39:40] *** Joins: Laskolnyk (~wasyl@89-76-136-17.dynamic.chello.pl)
[18:40:25] <osse> han-solo: but each contestant is given unique input, so you can't copy answers
[18:40:56] <gr33n7007h> han-solo: it's fun!
[18:41:11] *** Joins: zouhair (~zouhair@142.182.70.140)
[18:41:24] <han-solo> osse: oh, Okay. Cool :)
[18:41:31] <han-solo> gr33n7007h: :)
[18:43:19] *** Joins: kj (~kj@beta.aerisnetwork.net)
[18:43:52] *** Joins: pigweed (~pigweed@97.119.229.83)
[18:45:27] *** Joins: TomyWork (~TomyLobo@p200300e80f0f270081b191487ee27657.dip0.t-ipconnect.de)
[18:46:17] <gr33n7007h> with ruby it's real 0m0.253s bash is just over 10 secs.
[18:46:28] <gr33n7007h> how to make it faster.
[18:46:42] *** Joins: RandomGuy21 (~RandomGuy@117.230.56.93)
[18:50:12] <Soliton> you called your variable len but then used n.
[18:51:05] *** Quits: arinov (~arinov@212.156.215.30) (Ping timeout: 256 seconds)
[18:51:31] *** Quits: RandomGuy21 (~RandomGuy@117.230.56.93) (Ping timeout: 265 seconds)
[18:51:45] *** Joins: RandomGuy21 (~RandomGuy@117.230.142.120)
[18:51:59] <gr33n7007h> Soliton: hang let me check
[18:52:03] <gr33n7007h> *hang on
[18:52:23] <texasmynsted> what is the difference between $(foo) and (foo). Is the first in the background?
[18:52:32] <Soliton> !$(
[18:52:33] <greybot> Command Substitution: "$(cmd "foo bar")" causes the command 'cmd' to be executed with the argument 'foo bar' and "$(..)" will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
[18:52:35] <Soliton> !(
[18:52:35] <greybot> Commands in parentheses are run in a subshell. Useful for cd'ing into a directory without needing to figure out how to back out. See http://mywiki.wooledge.org/SubShell
[18:52:56] *** Quits: tobybl_ (~tobybl@213.31.132.232) (Remote host closed the connection)
[18:53:44] <texasmynsted> okay so if all I care about is the exit code of the foo process I do not use the $
[18:54:10] <Soliton> unless you need a subshell you don't use () either.
[18:54:59] <gr33n7007h> Soliton: i don't even need line 5 tbh string with newline in math context get evaluated properly
[18:57:35] <gr33n7007h> halfed the execution time for my ruby to: `real 0m0.129s` :p
[18:57:39] <texasmynsted> hm ok
[18:58:17] *** Quits: tex (~super@user/dix) (Read error: Connection reset by peer)
[18:58:29] *** Joins: YaoNai (~YaoNai@user/yaonai)
[18:59:41] *** Joins: earendel (uid498179@user/earendel)
[18:59:51] *** Joins: tex (~super@user/dix)
[19:00:39] <hejux> timeout 1 bash -c 'cat < /dev/null > /dev/tcp/google.com/80'
[19:00:58] <hejux> why can we just run : timeout 1 cat < /dev/null > /dev/tcp/google.com/80
[19:01:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:01:08] <hejux> if it is in a bash script
[19:02:06] <Soliton> first redirections are set up then the command is called.
[19:03:30] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:04:05] *** Quits: RandomGuy21 (~RandomGuy@117.230.142.120) (Ping timeout: 265 seconds)
[19:04:13] <hejux> Soliton: is there other ways to run that command to test google.com 80 is open in a bash script?
[19:04:28] <hejux> i feel it is weird to use bash -c in a bash scrip
[19:05:35] <Soliton> if you want to use the external command timeout on bash code that is what you have to do.
[19:06:39] <hejux> ok, timeout is needed, as i use until ... do sleep 1 ; done to loop the test my script needs network to run correctly
[19:06:51] <hejux> basically i use a DNS server to test the 53 port
[19:07:00] <hejux> /dev/tcp/8.8.8.8/53
[19:07:24] <hejux> right now i use netcat -z -w1 8.8.8.8 53
[19:08:00] <hejux> but since i found this bash feature, i just want to get rid of netcat :P
[19:08:24] *** Joins: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c)
[19:09:37] *** Joins: RandomGuy21 (~RandomGuy@117.230.37.19)
[19:10:21] *** Joins: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35)
[19:10:49] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:11:35] *** Joins: ELFrederich (~ELFrederi@76-217-82-15.lightspeed.chrlnc.sbcglobal.net)
[19:11:49] *** Joins: AsenMx (~AsenMx@user/asenmx)
[19:12:17] <ELFrederich> hi, not really a bash question... more of a CLI question.  Any tools out there for manipulating YAML files.  Say to add an element somewhere, or to construct a yaml file from scratch?
[19:12:34] <Soliton> yq probably
[19:13:42] <ELFrederich> I know that can query.  I thought it was simply a wrapper around jq
[19:14:40] *** Quits: aramtsamtsam (~Thunderbi@2001:861:388a:5600:1710:c3dc:c776:df35) (Client Quit)
[19:17:25] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[19:17:47] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[19:19:02] <ELFrederich> hmm... seems like there are multiple yq's out there
[19:21:41] *** Quits: RandomGuy21 (~RandomGuy@117.230.37.19) (Ping timeout: 256 seconds)
[19:22:18] *** Joins: djp (~djp@107-179-223-174.cpe.teksavvy.com)
[19:24:23] *** Quits: rgrinberg (~textual@2806:101e:7:9999:c810:1d5b:cbe6:4b3c) (Ping timeout: 265 seconds)
[19:24:30] *** Joins: codebam (~codebam@user/codebam)
[19:24:36] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[19:27:19] *** Quits: ElQelinho (~ElQelinho@91.192.22.238) (Quit: Leaving)
[19:30:32] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[19:30:55] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 252 seconds)
[19:31:07] <earendel> yq's from sonora?
[19:31:14] <earendel> el rio del tiborones
[19:31:29] <earendel> tiburones
[19:32:07] *** Quits: ELFrederich (~ELFrederi@76-217-82-15.lightspeed.chrlnc.sbcglobal.net) (Ping timeout: 265 seconds)
[19:32:20] <earendel> ah yaml. our man in eanglewood.
[19:33:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7)
[19:33:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f1f0:a87b:efe3:ebd7) (Changing host)
[19:33:01] *** Joins: skapata (~Skapata@user/skapata)
[19:33:23] <Soliton> hejux: timed_connect() { >"$2" & local pid=$!; sleep "$1"; kill $pid 2>/dev/null; wait $pid; }; timed_connect 1 /dev/tcp/google.com/80
[19:33:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[19:33:56] *** Joins: zro (~zro@user/zro)
[19:34:38] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:35:20] <Soliton> i guess sleep and kill should be done in the background.
[19:35:55] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[19:36:19] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:36:57] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[19:37:16] *** Joins: Jad (~Nashmi@user/jad)
[19:37:40] *** Joins: BSaboia (~bsaboia@177.190.211.124)
[19:38:04] *** Quits: BSaboia (~bsaboia@177.190.211.124) (Remote host closed the connection)
[19:39:23] <quas[m]> <Soliton> "hejux: timed_connect() { >"$2" &..." <- what's the purpose of killing the process?
[19:40:17] <Soliton> so it dies after the timeout if it cannot connect.
[19:41:47] <hejux> Soliton: goden solution
[19:41:51] <hejux> golden
[19:42:41] *** Joins: irrgit (~irrgit@192.241.175.183)
[19:45:36] <hejux> Soliton: why is bash -c ">hello" is able to create an empty file hello. but plain '>hello' waits for input?
[19:46:15] <Soliton> >hello  does not wait for input.
[19:46:42] *** Joins: RandomGuy21 (~RandomGuy@117.230.30.205)
[19:48:20] <emanuele6> !zsh > hejux
[19:48:21] <greybot> hejux: zsh is NOT an enhanced version of bash. It's a different shell, with different features and there's a different channel for your questions: #zsh For zsh-like menu completion, bind '\C-i':menu-complete # there is nothing similar to menu selection
[19:49:15] <hejux> emanuele6: ... you are really good .. yes, bash does not wait for >hello
[19:49:37] <hejux> sorry my working shell is zsh, but i script in bash
[19:52:13] *** Quits: kevgao (~kevgao@c-174-63-68-26.hsd1.ct.comcast.net) (Changing host)
[19:52:13] *** Joins: kevgao (~kevgao@user/kevgao)
[19:52:54] *** Quits: drd (~drd@93-42-69-115.ip85.fastwebnet.it) (Ping timeout: 265 seconds)
[19:53:53] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[19:53:56] <gnoo> can i have something like: pass a function a variable. then the function will put the result on that (global) variable.
[19:55:12] <Soliton> !declare-n
[19:55:12] <greybot> "declare -n" tries to create a name reference to a variable. It's severely flawed: the variable is resolved by looking for a matching name using dynamic scope. See https://mywiki.wooledge.org/BashProgramming#Functions and FAQ 48.
[19:55:14] <twkm> yes.
[19:56:17] *** Quits: RandomGuy21 (~RandomGuy@117.230.30.205) (Ping timeout: 265 seconds)
[19:56:42] <hejux> i like -n, i can operate my list of ass arrays like a charm
[19:57:14] *** Joins: RandomGuy21 (~RandomGuy@117.230.30.196)
[19:58:27] <hejux> Soliton: maybe it is better not to sleep if >"$2" returns 0?
[19:58:29] *** Joins: richardm75 (~richardm7@2600:8801:c507:b200:9c94:be32:855c:bf0c)
[19:58:45] <Soliton> "i guess sleep and kill should be done in the background."
[19:59:13] *** Joins: greycat (~greg@209.142.155.49)
[20:00:06] * gnoo whips declare -nag
[20:01:33] <gnoo> hmm, i guess g isn't needed since it's the variable's being referenced
[20:01:56] <gnoo> s/it's the/the/
[20:02:04] <greycat> -n and -a don't really mix
[20:03:21] <gnoo> oh, so i'll use a workaround avoiding namespaces then. thanks!
[20:03:49] *** Quits: RandomGuy21 (~RandomGuy@117.230.30.196) (Ping timeout: 240 seconds)
[20:04:06] <greycat> not sure what you're trying to do, but bash variables only have (function-based) scope, not namespaces
[20:04:06] <e36freak> gr33n7007h: calculating the median and then distances from it will make it much faster
[20:05:03] *** Joins: RandomGuy21 (~RandomGuy@117.230.30.196)
[20:05:19] <gnoo> well i got inspired by gr33n7007h so i'm doing aoc on bash (the only language i know)
[20:05:39] <greycat> oh god, it's December again already, isn't it
[20:05:45] <e36freak> hahaha
[20:07:10] *** Joins: zebrag (~chris@user/zebrag)
[20:08:55] <e36freak> you'll find it much easier if you use it to learn a real language
[20:09:05] <NRK[m]> i just brute forced it
[20:09:07] *** Joins: ChmEarl (~chmearl@user/chmearl)
[20:09:35] <NRK[m]> not too large of a problem
[20:09:49] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 240 seconds)
[20:10:14] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:10:25] <e36freak> sure, but he asked how to make it faster, mine runs in .007s for both parts
[20:10:41] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[20:11:03] <NRK[m]> i think mine takes 6 seconds kek
[20:11:59] <gnoo> mine takes 0.272 seconds for first part of day3. feeling proud of it
[20:12:26] <NRK[m]> here's mine https://dpaste.com/G8CX2QYMZ
[20:12:39] *** Quits: hejux (~hejux@104.224.190.144.16clouds.com) (Remote host closed the connection)
[20:12:56] *** Joins: hejux (~hejux@104.224.190.144.16clouds.com)
[20:15:05] <hejux> Soliton: like : sleep "$1"& kill $pid 2>/dev/null& wait $pid;
[20:15:25] <hejux> sleep "$1" & kill $pid 2>/dev/null & wait $pid;
[20:15:34] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[20:15:50] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[20:16:04] <Soliton> of course kill should run after sleep.
[20:16:22] *** Quits: taupiqueur (~taupiqueu@218.198.204.77.rev.sfr.net) (Quit: taupiqueur)
[20:16:39] *** gordonfish- is now known as gordonfish
[20:17:01] *** Quits: dreamon (~dreamon@ppp-88-217-67-53.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[20:17:31] <hejux> (sleep "$1" ; kill $pid 2>/dev/null) & wait $pid;
[20:17:59] *** Joins: consolers (~consolers@117.254.34.211)
[20:18:57] *** Joins: Inline (~Inline@2a02:908:1252:7a80::117)
[20:21:06] *** Joins: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4)
[20:22:09] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[20:22:35] <hejux> e36freak: a real lang? like rust?
[20:22:56] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[20:23:02] <hejux> can i learn rust based on my bash knowledge?
[20:23:08] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[20:23:40] <greycat> If bash is all you know, good choices would be Python, Tcl or Perl.
[20:25:01] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[20:26:48] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[20:28:11] *** Parts: consolers (~consolers@117.254.34.211) (Started wasting time elsewhere)
[20:29:16] <e36freak> gnoo: language?
[20:29:31] <gnoo> bash
[20:29:32] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::117)
[20:29:33] <e36freak> ah
[20:30:24] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[20:30:34] <e36freak> i got 0.012s for both parts in awk
[20:30:36] <gnoo> part 1 of day 3: http://ix.io/3Hi5
[20:30:37] *** Quits: Inline (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 240 seconds)
[20:31:00] *** Joins: magla (~gelignite@55d44df1.access.ecotel.net)
[20:31:22] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 268 seconds)
[20:32:04] <e36freak> http://ix.io/3GTa (both parts)
[20:33:18] <gnoo> refactored into a function for part 2 and it dosen't work anymore :(
[20:33:59] <hejux> greycat: well, python... heavy.
[20:34:09] <hejux> e36freak: what the heck are you guys running
[20:38:50] <NRK[m]> i think i did some really nasty shit for the bingo problem
[20:39:13] <NRK[m]> or wait, not bingo, that was the binary thingy
[20:39:30] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[20:39:39] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[20:41:14] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::117) (Ping timeout: 265 seconds)
[20:44:06] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[20:44:08] *** Quits: RandomGuy21 (~RandomGuy@117.230.30.196) (Ping timeout: 265 seconds)
[20:44:45] <earnest> The most realest of languages is joy
[20:45:31] <e36freak> spl > *
[20:46:20] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:46:47] *** Quits: wigums (~wigums@user/wigums) (Ping timeout: 268 seconds)
[20:48:44] *** Joins: drd (~drd@93-42-69-115.ip85.fastwebnet.it)
[20:49:23] *** Quits: Jong (~Jong@2620:10d:c090:400::5:6122) (Ping timeout: 252 seconds)
[20:53:03] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.3)
[20:54:01] <OMGOMG> greycat: which language are you using this year?
[20:56:33] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:57:12] *** Joins: Betal (~Betal@user/betal)
[20:57:51] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:58:19] *** Quits: TomyWork (~TomyLobo@p200300e80f0f270081b191487ee27657.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:59:39] *** Quits: graudre (~graudre@2607:fea8:560:7f20:8037:24d8:8d0:66af) (Ping timeout: 252 seconds)
[21:01:24] *** Quits: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[21:02:29] *** Quits: rgrinberg (~textual@2806:101e:7:9999:853a:1f51:2226:1f4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:03:27] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[21:04:07] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[21:04:17] *** Joins: kurahaupo (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au)
[21:04:25] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:04:44] <jelly> he just blows kisses at butterflies
[21:04:58] *** Joins: edlou (uid413273@id-413273.helmsley.irccloud.com)
[21:05:05] <han-solo> magnetized needles
[21:06:16] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[21:06:47] *** Joins: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[21:07:18] *** Joins: Buliarou1 (~gypsydang@46.232.210.139)
[21:08:13] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 256 seconds)
[21:08:54] <greycat> I did day 1 in bash but I don't expect I'll stick to that.
[21:08:55] <put_in> if i save a simple string to a var, is it recommended to quote it? eg. foo=bar or foo='bar'
[21:09:10] <greycat> put_in: doesn't matter.  whichever you like.
[21:09:46] <put_in> alright
[21:10:33] *** Joins: cdown (~cdown@188.214.11.14)
[21:10:55] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[21:11:08] <jelly> consistency makes for an easier read, if there's a second var assignment like baz='something else' above or below that
[21:11:14] <twkm> the key is what you consider simple.
[21:11:34] <jelly> readability is useful
[21:12:10] *** Quits: thevishy (~Nishant@2405:201:f005:c007:a5d7:38b:39cd:e2ae) (Quit: Leaving)
[21:12:26] <jelly> this is why we always carefully align columns in fstab.  Right?  Right?
[21:12:46] *** Joins: prompt32 (~kapad@user/kapad)
[21:13:06] <NRK[m]> we do that?
[21:13:15] *** Joins: qswz (~caub@89-80-20-125.abo.bbox.fr)
[21:13:33] <twkm> some people love, even rely on, sytax highlighting, so of which would show the quoted way more consistently than unquoted.
[21:13:58] <qswz> is it possible to invoke diff with 2 files passed in stdin? sounds like no
[21:14:17] <qswz> I'd like to invoke it programmatically from nodejs with 2 strings in memory
[21:14:17] <jelly> there is only one stdin
[21:14:22] <qswz> yea
[21:14:24] <e36freak> twkm: until some of your advanced stuff breaks vim's syntax highlighting
[21:14:26] <greycat> how would you know where the first file ends?
[21:14:29] <qswz> ok I can make tmp files
[21:14:34] <NRK[m]> how will it know where one file ends and other begins
[21:14:34] <han-solo> you could < <(..) the two ?
[21:14:36] <qswz> yea can't
[21:14:45] <han-solo> er
[21:14:55] <jelly> <(...) the chicken expansion
[21:15:00] <han-solo> s/<//
[21:15:20] <twkm> e36freak: indeed.  i don't use vim, usually, but "syn off" is my sole .vimrc line just in case.
[21:15:38] <e36freak> i do' but it breaks on some bash syntax sometimes
[21:15:58] <NRK[m]> yeah i noticed that too
[21:16:01] <twkm> it is regex based, which bash isn't so naturally it fails.
[21:16:16] <NRK[m]> nvim deals with it better from my experience
[21:16:17] <jelly> I often end up comparing stuff with diff -u <(...|sort) <(...|sort)
[21:16:24] <greycat> qswz: if you can figure out where the first file ends, then yes, you could split stdin into two temp file.
[21:16:27] *** Joins: RandomGuy21 (~RandomGuy@202.131.150.133)
[21:16:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:16:51] <jelly> easy set intersections
[21:17:03] *** Joins: junebug (~junebug@2600:1700:3db0:2540:95cd:d15a:280f:949a)
[21:17:10] <qswz> greycat: yes I can put a separator
[21:18:00] <qswz> how do you split it then?
[21:18:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:18:22] <qswz> maybe xargs
[21:18:28] <greycat> Are these *text* files?  You have knowledge of the files, perhaps, but you have not shared it with us.
[21:18:33] *** Joins: dreamon (~dreamon@pd9503edd.dip0.t-ipconnect.de)
[21:18:53] <qswz> they'are not text files
[21:19:01] <qswz> just 2 multiline strings
[21:19:03] <greycat> Then there's no valid separator you can use.
[21:19:11] <Soliton> diff <(printf %s "$string1") <(printf %s "$string2")
[21:19:21] <qswz> oh nice
[21:19:32] <qswz> Thanks guys
[21:19:33] <greycat> If they were text files you could use a NUL byte, but since they're binary, NUL might appear in the files, so you're dead on arrival.
[21:19:36] <greycat> Find a different approach.
[21:19:54] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 265 seconds)
[21:19:55] <greycat> Length-prefixing might work, possibly.
[21:21:39] *** Quits: junebug (~junebug@2600:1700:3db0:2540:95cd:d15a:280f:949a) (Ping timeout: 252 seconds)
[21:22:01] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[21:23:31] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[21:23:37] *** Joins: Trieste (T@user/pilgrim)
[21:26:25] <thebombzen> could someone plonk me the no-quote command?
[21:26:50] <greycat> !quotes
[21:26:50] <greybot> https://mywiki.wooledge.org/Quotes
[21:27:09] *** Quits: davidl (~quassel@185.86.106.208) (Ping timeout: 265 seconds)
[21:27:37] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[21:27:44] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[21:28:14] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Quit: leaving)
[21:28:15] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Ping timeout: 252 seconds)
[21:28:29] <thebombzen> thanks
[21:28:45] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[21:29:15] <thebombzen> also does bash's [[ $var =~ REGEX ]] require the ^ and $, or does that match entirely?
[21:29:43] <thebombzen> e.g. [[ $arg =~ (--help|-?|-h) ]]
[21:29:53] *** Joins: legola (~legola@46.235.101.65)
[21:30:05] *** Joins: wigums (~wigums@user/wigums)
[21:30:15] <greycat> you don't want =~ there at all, and if you *DID* use it, you'd have to quote that ? character
[21:30:19] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[21:30:34] <greycat> [[ $arg = @(--help|-\?|-h) ]]   is more suited
[21:30:47] <greycat> ? still has to be quoted in globs as well
[21:32:09] <greycat> using case is more common here, though
[21:32:29] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[21:34:22] <Soliton> the regex does not have to match the entire left hand side. you have to anker yourself if you want that.
[21:34:24] *** Quits: legola (~legola@46.235.101.65) (Ping timeout: 265 seconds)
[21:34:30] *** Joins: Burger (~textual@user/burger)
[21:35:11] <thebombzen> what does the '@' here do in this case? I've never seen @ used here before
[21:35:15] <emanuele6> !extglob
[21:35:15] <greybot> "Extended globs" (shopt -s extglob) allow you to say things like "all files that do not end in .jpg". See http://mywiki.wooledge.org/glob#extglob
[21:35:48] <thebombzen> is there any downside to enabling those, provided I quote things properly when necessary?
[21:35:52] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[21:36:01] <greycat> you don't even have to enable them inside [[ ]] in modern bash versions
[21:36:05] <emanuele6> you don't need to enable them in [[
[21:36:07] <greycat> they're just on by default inside [[ ]]
[21:36:46] <emanuele6> in [[ lsh = rhs ]] (or == or !=), rhs is always an extglob pattern
[21:36:51] *** Joins: Trieste_ (T@user/pilgrim)
[21:36:57] <Soliton> and in general extglobs are often syntax errors if you don't enable them so it's very unlikely to accidentally use them.
[21:37:12] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[21:37:47] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 252 seconds)
[21:40:06] <thebombzen> I now have this snippet near the beginning of my script: https://0x0.st/-FzP.bash
[21:40:14] *** Trieste_ is now known as Trieste
[21:40:17] *** Quits: magla (~gelignite@55d44df1.access.ecotel.net) (Quit: Stay safe!)
[21:40:18] *** Joins: gcheng (~gcheng@betharealibips03.b.subnet.rcn.com)
[21:40:19] <thebombzen> is there a preferred way of parsing args?
[21:40:21] *** Quits: joerg (~saturn@user/joerg) (Read error: Connection reset by peer)
[21:40:26] *** Quits: gcheng (~gcheng@betharealibips03.b.subnet.rcn.com) (Client Quit)
[21:40:28] <Soliton> !faq options
[21:40:28] <greybot> https://mywiki.wooledge.org/BashFAQ/035 -- How can I handle command-line options and arguments in my script easily?
[21:40:34] *** Joins: voices- (~voices_@84.238.197.28)
[21:41:21] *** Joins: knstn (~knstn@ppp-94-66-57-28.home.otenet.gr)
[21:41:22] *** Quits: marw (4988ea31b1@knopi.disroot.org) (Read error: Connection reset by peer)
[21:42:25] *** Joins: prompt32 (~kapad@user/kapad)
[21:42:32] <thebombzen> I dont' see how the example in that page properly handles `--`
[21:42:37] *** Quits: prompt32 (~kapad@user/kapad) (Remote host closed the connection)
[21:42:45] <emanuele6> thebombzen: getopts does that.
[21:42:55] <thebombzen> the page doesn't mention getopts
[21:43:01] <emanuele6> huh?
[21:43:08] <emanuele6> you didn't read it then
[21:43:11] *** Parts: qswz (~caub@89-80-20-125.abo.bbox.fr) ()
[21:43:11] <greycat> getopts does it automatically, and if you write your own, you just add --) in the case statement
[21:43:12] <thebombzen> I mean, the manual loop example, doesn't mention getopts
[21:43:31] <thebombzen> I don't see how it stops parsing after -- is encountered
[21:43:50] <greycat> do you not see the line that says  --)              # End of all options.
[21:44:13] <thebombzen> I do, but I'm confused how htat works
[21:44:20] <thebombzen> since it just breaks
[21:44:23] *** Joins: tobybl (~tobybl@213.31.132.232)
[21:44:32] <greycat> break doesn't end the case statement.  it ends the while loop.
[21:44:37] <emanuele6> yes, break exits the while loop
[21:44:44] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[21:44:45] <thebombzen> ... right, I'm confusing it with switch statement break. my bad, thanks.
[21:44:53] <thebombzen> and case is not switch.
[21:45:25] <thebombzen> how does while :; do work? how is it different from, say, for arg; do
[21:45:35] <greycat> !:
[21:45:35] <greybot> : is a builtin identical to the 'true' builtin; they do nothing and have an exit status of 0
[21:45:36] <emanuele6> : is true
[21:45:42] *** Joins: joerg (~saturn@user/joerg)
[21:45:43] *** Joins: prompt32 (~kapad@user/kapad)
[21:45:59] *** Joins: soren_ (~gcheng@betharealibips03.b.subnet.rcn.com)
[21:46:03] <Soliton> it doesn't use for since occasionally you want to handle multiple arguments.
[21:46:10] <thebombzen> I see, so that's just a "while true; do" with a shift at the end
[21:47:10] <thebombzen> the only issue I see with this manual loop is that it doesn't let you put options between optionless arguments
[21:47:17] <thebombzen> which you sometimes want to do
[21:47:24] <greycat> that's *on purpose*
[21:47:31] <thebombzen> ah, okay. what if I *want* that?
[21:47:35] <greycat> then you suck
[21:47:54] <thebombzen> there's some common tools that want it
[21:47:55] <greycat> but you've been brain-damaged by GNU so you're surrounded by lots of other people who also suck
[21:48:06] <thebombzen> wow, that's kind of rood
[21:48:15] <thebombzen> I can think of some perfectly ordinary reasons to want that
[21:48:20] <greycat> Yes, it was very rude of GNU to do that to a whole generation of shell novices.
[21:49:10] <Soliton> it's less bad when you support -- though.
[21:49:24] <thebombzen> yea, one example that comes to mind is something like gcc -o foo foo.c -lm
[21:49:40] <thebombzen> you have to put -lm at the end
[21:49:41] <greycat> It does mean that you *must* use -- when passing filenames to any GNU command.
[21:49:53] <greycat> thebombzen: cc is a special exception.
[21:50:05] <greycat> it does not follow the getopts/standard option model at all
[21:50:26] <thebombzen> I guess if I don't want to do things the way you personally consider acceptable I suck
[21:50:27] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[21:50:38] <thebombzen> it's not a safety issue since I'm trying to make it work with --
[21:50:58] <thebombzen> it's just your personal philosophy that what I'm trying to accomplish is distasteful, not unsafe
[21:51:05] <greycat> It's also the POSIX standard.
[21:51:17] <greycat> It's the way Unix has worked for ever and ever.
[21:51:19] <thebombzen> POSIX standard applies to my own scripts I'm writing for me?
[21:51:25] <greycat> ...
[21:51:33] <greycat> Read the top of the FAQ page agin
[21:51:43] <Soliton> you can do whatever you want. other people will expect whatever they want.
[21:51:48] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[21:52:15] <Soliton> and the common expectation is: cmd <options> <positional parameters>
[21:52:42] <phy1729> with the POSIX specified way of handling option stacking and joining args and --
[21:54:26] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[21:57:18] <greycat> To give a more concrete example: under POSIX rules,   ls -l foo.bar -foo.bar   should list two files in "long" format,  -foo.bar is treated as a filename.
[21:57:40] <LiENUS> i'm trying to wrap a repeated run of a go test suite in a bash script with whiptail giving me a progress bar. it's just supposed to run it the specified number of times, display progress and break if there's an error in the suite then at the end show the output of the last run of the test suite, either success if successful or the error message if it breaks i have everything but that last result display here...
[21:57:40] <LiENUS> https://pastebin.com/HfwdM6BE
[21:57:41] <pasteban> Paste is available without ads on https://pastebin.com/raw/HfwdM6BE
[21:57:41] <greycat> GNU violates POSIX here.  You have to use ls -l -- foo.bar -foo.bar to get the correct result.
[21:58:02] <LiENUS> my thought is to wrap it in a subshell $() and capture the output, but them im not sure how to break on error
[21:58:08] <greycat> !faq progress
[21:58:08] <greybot> https://mywiki.wooledge.org/BashFAQ/044 -- How do I create a progress bar?  How do I see a progress indicator when copying/moving files?
[21:58:38] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[21:59:26] *** Joins: moldorcoder7 (~moldorcod@77.47.48.24)
[21:59:35] <LiENUS> i have the progress bar part done, it's the output of last attempt im not sure on
[22:00:06] <greycat> output=$(go ... 2>&1) || break
[22:00:24] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[22:01:05] *** Quits: tobybl (~tobybl@213.31.132.232) (Remote host closed the connection)
[22:02:35] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[22:02:40] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[22:03:19] <LiENUS> that seems to be it, thank you
[22:03:22] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[22:04:56] <djph> Have a situation where I'm trying to make the front-line helldesk kids' lives slightly easier.  They (er, we) have a tool (compiled thing I can't touch) that is executed as 'command input' (where 'input' can come from a well-defined, albeit long, list).  Now, for my execution, I just create an array and run the commad in a loop.  What pitfalls am I setting myself up for if I script it out to take the input
[22:05:02] <djph> from a file instead of an array (and also, is it just batshit stupid to approach things that way?)
[22:05:44] <greycat> !faq mplayer
[22:05:45] <greybot> greycat: No matches found at https://mywiki.wooledge.org/BashFAQ
[22:05:48] <greycat> !faq ffmpeg
[22:05:49] <greybot> https://mywiki.wooledge.org/BashFAQ/089 -- I'm reading a file line by line and running ssh or ffmpeg, only the first line gets processed!
[22:08:11] <nattiestnate> hi, how do i pass a variable to a command? i saw someone do `MONITOR=eDP-1 polybar top-bar &` and it works (i.e. polybar recognises the MONITOR variable), but i tried doing `STUFF="thing" echo "$STUFF"` and nothing showed up at all
[22:08:22] <greycat> !faq 104
[22:08:23] <greybot> https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
[22:08:31] <nattiestnate> oh, thanks
[22:09:17] *** Quits: rwp (~invalid@havoc.proulx.com) (Quit: leaving)
[22:09:36] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[22:10:16] *** Joins: rwp (~invalid@havoc.proulx.com)
[22:11:39] *** Quits: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[22:11:58] <djph> greycat: thanks, I knew there was something else I had to watch out for ...
[22:12:22] <soren_> suppose a list is nul-delimited like this: ABC<NUL>DEF<NUL>GHI. when iterating with a while loop, should it be ABC,DEF or ABC,DEF,GHI? I'm getting the former. Should the list be modified to add a NUL at the end or should the processing accomodate this? How would you do it in a while loop?
[22:12:33] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[22:12:33] *** Quits: voices- (~voices_@84.238.197.28) ()
[22:12:45] <soren_> I am using `while IFS= read -r -d $'\0' file; do`
[22:12:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[22:13:57] <greycat> $'\0' is simply ''
[22:14:17] <greycat> and yeah, you want a final NUL byte
[22:14:31] *** Quits: jonatura (~jonatura@80.71.142.166.ipv4.parknet.dk) (Ping timeout: 256 seconds)
[22:15:19] <greycat> if the list is coming from a file and you're unsure whether it ends with a NUL, you could do   < <(cat file; printf \\0)   and possibly discard empty entries during processing.  This becomes a problem if empty entries are valid.
[22:15:40] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[22:15:40] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[22:16:07] <soren_> Ok. I came across this thread: https://github.com/jarun/nnn/issues/771 . So it seems to be a sensible suggestion by the OP. The author recommends xargs, but while is simpler
[22:16:37] *** Joins: jonatura (~jonatura@80.71.142.166.ipv4.parknet.dk)
[22:17:43] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[22:18:14] <soren_> Thank you
[22:18:47] *** Joins: goldfish (~goldfish@user/goldfish)
[22:19:05] *** Quits: soren_ (~gcheng@betharealibips03.b.subnet.rcn.com) (Quit: WeeChat 3.3)
[22:20:03] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[22:20:22] *** Joins: Filohuhum (~dante@gateway/tor-sasl/filohuhum)
[22:20:37] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 240 seconds)
[22:22:11] *** Quits: goldfish (~goldfish@user/goldfish) (Read error: Connection reset by peer)
[22:22:39] *** Joins: goldfish (~goldfish@user/goldfish)
[22:23:37] *** Quits: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Ping timeout: 252 seconds)
[22:24:27] *** Joins: magla (~gelignite@55d40eb7.access.ecotel.net)
[22:24:46] *** Joins: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[22:26:37] *** Quits: jonatura (~jonatura@80.71.142.166.ipv4.parknet.dk) (Ping timeout: 240 seconds)
[22:28:07] <cim> ba$h
[22:28:38] <emanuele6> # echo ba$h
[22:28:39] <shbot> emanuele6: ba
[22:28:50] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[22:28:53] *** Joins: jonatura (~jonatura@80.71.142.166.ipv4.parknet.dk)
[22:29:07] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 252 seconds)
[22:29:25] *** Quits: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Ping timeout: 240 seconds)
[22:29:30] *** Quits: moldorcoder7 (~moldorcod@77.47.48.24) (Ping timeout: 265 seconds)
[22:29:42] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[22:29:53] *** Quits: tangyQED (~tangy@user/tangy) (Remote host closed the connection)
[22:30:48] *** Quits: put_in (~put_somew@14.161.78.30) (Quit: Leaving)
[22:31:34] *** Joins: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[22:32:11] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[22:33:08] *** Joins: luva4 (~luva@37.120.197.46)
[22:33:28] <cim> i like to save my ba$h scripts with the .sh extensions
[22:34:35] <phy1729> !.sh
[22:34:35] <greybot> Don't use extensions for your scripts. Scripts define new commands that you can run, and commands are generally not given extensions. Do you run ls.elf? Also: bash scripts are *not* sh scripts (so don't use .sh) and the extension will only cause dependencies headaches if the script gets rewritten in another language. See http://www.talisman.org/~erlkonig/documents/commandname-extensions-considered-harmful
[22:34:44] <cim> yeah yeah yeah
[22:34:59] <phy1729> You don't run yum.py either
[22:35:13] <koala_man> I run ls.elf. Come at me broh
[22:35:47] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 265 seconds)
[22:35:57] <cim> shellcheck doesn't mind though ;)
[22:36:09] <phy1729> koala_man: dear cthulhu was monstrosity of an OS did you create
[22:36:18] <phy1729> s/was/what/
[22:36:49] *** Quits: luva (~luva@37.120.197.52) (Ping timeout: 252 seconds)
[22:36:49] *** luva4 is now known as luva
[22:37:07] <koala_man> it's just Ubuntu with a christmas theme, so now it's ls.elf and mkdir.santa
[22:37:33] *** Joins: hendry (~hendry@210.23.22.8)
[22:37:42] <cim> i bet it executes ba$h commands using back ticks
[22:38:31] <phy1729> koala_man: needs a red green colorer for all text on stdout
[22:40:28] *** Quits: Burger (~textual@user/burger) (Quit: Textual IRC Client: www.textualapp.com)
[22:40:29] *** Quits: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Ping timeout: 252 seconds)
[22:40:30] *** Joins: dj (~dj@162.223.44.49)
[22:40:53] *** dj is now known as Guest4970
[22:41:11] *** Quits: alius (~adrien@2a01:e0a:13c:cd90:c977:5b1c:470e:ad38) (Quit: Konversation terminated!)
[22:43:02] *** Quits: drd (~drd@93-42-69-115.ip85.fastwebnet.it) (Ping timeout: 265 seconds)
[22:43:26] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:43:49] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 240 seconds)
[22:44:49] *** Joins: Inline (~Inline@aftr-37-201-240-202.unity-media.net)
[22:46:14] *** Joins: Trieste (~T@user/pilgrim)
[22:49:14] *** Quits: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Remote host closed the connection)
[22:49:28] *** Joins: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[22:50:12] <greycat> OK, I did the first 2.5 days of AOC in bash, and day 3 part 2 in Tcl.
[22:50:13] *** Joins: bob_x2 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[22:50:22] <greycat> Break time.
[22:50:40] *** Joins: ejjdhfjsu (~ejjdhfjsu@cmcust2a-84.174.nulinkdigital.com)
[22:52:22] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[22:53:11] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[22:53:25] *** Quits: prompt32 (~kapad@user/kapad) (Ping timeout: 240 seconds)
[22:54:50] *** Joins: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[22:55:49] *** Quits: wigums (~wigums@user/wigums) (Ping timeout: 240 seconds)
[22:56:56] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[22:57:54] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[22:58:51] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[22:59:02] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[22:59:22] *** Joins: zaden (~maddx@c-73-92-207-228.hsd1.ca.comcast.net)
[22:59:28] *** Quits: roadie (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Ping timeout: 265 seconds)
[22:59:28] *** Quits: Trieste (~T@user/pilgrim) (Ping timeout: 265 seconds)
[23:01:13] *** Joins: reallymemorable (~reallymem@70.107.110.8)
[23:01:29] *** Joins: Kruppt (~Kruppt@50.111.17.138)
[23:01:30] *** Quits: reallymemorable (~reallymem@70.107.110.8) (Remote host closed the connection)
[23:02:29] *** Joins: codebam (~codebam@user/codebam)
[23:04:23] *** Quits: kurahaupo (~kurahaupo@pa49-180-180-200.pa.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[23:09:37] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 265 seconds)
[23:09:51] *** Joins: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net)
[23:10:23] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[23:14:46] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:15:09] *** Quits: zostj (~rue@1-162-40-252.dynamic-ip.hinet.net) (Quit: WeeChat 3.3)
[23:16:45] *** Joins: wigums (~wigums@user/wigums)
[23:16:50] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:18:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:18:37] *** Quits: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Remote host closed the connection)
[23:18:52] *** Joins: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[23:20:18] *** Joins: treble (~treble@user/treble)
[23:20:49] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[23:24:21] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[23:25:11] *** Joins: earendel (uid498179@user/earendel)
[23:26:03] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 265 seconds)
[23:31:22] *** Joins: junebug (~junebug@2600:1700:3db0:2540:9eac:dc64:c031:a3ec)
[23:31:39] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Quit: PROTO-IRC v0.73a (C) 1988 NetSoft - Built on 11-13-1988 on AT&T System V)
[23:32:36] *** Joins: mongy (~mongy@user/mongy)
[23:33:49] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[23:33:49] *** Joins: thelounge6900 (8fc77d0a@67.205.143.82)
[23:34:20] *** Quits: thelounge6900 (8fc77d0a@67.205.143.82) (Client Quit)
[23:35:38] *** Quits: mnabid (uid448607@user/mnabid) (Quit: Connection closed for inactivity)
[23:36:53] *** Joins: igemnace (~ian@user/igemnace)
[23:38:31] *** Joins: wiscii (~tct@user/wiscii)
[23:38:36] *** Joins: davidl (~quassel@185.86.106.208)
[23:39:41] *** Quits: Guest4970 (~dj@162.223.44.49) (Quit: Leaving)
[23:41:12] <olspookishmagus> hello I would like some help on... on... oh it's nothing I just once again want to express my thanks to the regulars who have helped me with my questions over the past, thank you people VERY MUCH (I wish I could buy you a beer somehow)
[23:42:48] *** Joins: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970)
[23:43:45] <OMGOMG> #bash beer fund? good idea
[23:43:58] <cim> people here should start using https://www.buymeacoffee.com
[23:44:48] *** Joins: rufito (~phil@181.42.53.33)
[23:45:13] *** Quits: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net) (Quit: john_johnk)
[23:45:41] *** Joins: john_johnk (~Thunderbi@112.54.140.77.rev.sfr.net)
[23:45:43] *** Joins: KillerWasp (KillerWasp@user/killerwasp)
[23:45:45] <KillerWasp> hello
[23:46:28] <KillerWasp> for a variable with number like 'i', how to send 0s in a fixed size of width? like 0001, 0002, 0003, etc.
[23:46:41] <greycat> printf %04d "$i"
[23:49:23] *** Quits: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Remote host closed the connection)
[23:49:36] *** Joins: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86)
[23:49:55] <KillerWasp> ffmpeg -f image2pipe -framerate 15 -i p%04d.png DragonSleep.mp4
[23:50:00] <KillerWasp> p%04d.png: No such file or directory
[23:50:00] *** Joins: prompt32 (~kapad@user/kapad)
[23:50:07] <KillerWasp> https://hamelot.io/visualization/using-ffmpeg-to-convert-a-set-of-images-into-a-video/
[23:50:31] <greycat> printf -v f p%04d.png "$i"; ffmpeg blah blah "$f" blah
[23:50:31] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 252 seconds)
[23:50:58] <greycat> one of the !porn factoids probably has a relevant example too
[23:51:14] <KillerWasp> !porn
[23:51:14] <greybot> for ((i=1; i<100; i++)); do printf -v tmp %03d "$i"; wget "http://pornsite/image-$tmp.jpg"; sleep 10; done
[23:52:55] <KillerWasp> no, it only take 1 image by each time of ffmpeg
[23:53:02] <olspookishmagus> that's an https only site
[23:54:33] *** Quits: roadie` (~user@2a02:8108:ec0:1427:f0dc:20b7:8c7f:7f86) (Ping timeout: 252 seconds)
[23:54:52] <geirha> and you are sure you have any files in the current directory that match the pattern you gave ffmpeg?
[23:55:01] *** Quits: n4dir (~user@mue-88-130-56-083.dsl.tropolys.de) (Remote host closed the connection)
[23:55:05] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[23:56:21] <KillerWasp> mmmm... yes?...
[23:56:22] *** Quits: prompt32 (~kapad@user/kapad) (Quit: Leaving)
[23:56:47] *** Joins: prompt32 (~kapad@user/kapad)
[23:56:48] <geirha> ls -d p[0-9][0-9][0-9][0-9].png   lists your files?
[23:56:51] <KillerWasp> https://0x0.st/-Fz6.txt
[23:57:09] <geirha> what's that? output of ls?
[23:57:27] <KillerWasp> it's for: ffmpeg -f image2pipe -framerate 15 -f concat -i caca2.txt DragonSleep.mp4
[23:57:31] <KillerWasp> that also fail.
[23:58:37] *** Quits: Inline (~Inline@aftr-37-201-240-202.unity-media.net) (Ping timeout: 240 seconds)
[23:58:48] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[23:58:57] <KillerWasp> seem that this command only work for fragment of videos, but not for images
