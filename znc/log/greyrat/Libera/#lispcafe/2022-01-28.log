[00:00:31] <shka> Alfr: yeah, this makes sense to me, thanks for help
[00:01:24] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[00:01:37] <nij-> just got rejected from an intern position :'(
[00:01:48] <shka> nij-: it happens
[00:01:58] <nij-> is it off-topic? I wonder what's the scenario of people (similar to me) when finding jobs
[00:02:16] <nij-> shka thanks.. im naive and have little experience in this
[00:02:32] <shka> nothing is offtopic here 
[00:02:38] <pl> hayley: https://twitter.com/NN1122344842088/status/1486794293704601609
[00:02:47] <nij-> dunno if I offended the interviewer.. dunno if I need to get better at something..
[00:02:51] <nij-> anyway there's lots of doubt
[00:02:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:03:05] <shka> pl: lol, this guy is for real?
[00:03:21] <shka> "most C programs tend to not rely at dynamic memory at all"
[00:03:27] <shka> citation needed
[00:05:04] <hayley> pl: https://i.redd.it/77dqctmegaq61.jpg
[00:05:37] <hayley> "Besides, GC itself is written is C, how it is even logically possible for it to be more efficient then C itself ???"
[00:05:46] <shka> the fun thing is that it is not often that GC MUST be real time 
[00:06:01] <moon-child> 'no OS use GC's internally'  ehmm
[00:06:22] <moon-child> pretty sure reference counting is used _heavily_ on unix
[00:10:02] <hayley> "arena [...] based allocators have perfectly predictable pauses" "most C programs tend to not rely at dynamic memory at all" Which one is it?
[00:12:51] <shka> ignorance is the worst enemy of the mankind
[00:14:48] <hayley> I think I have successfully ratioed The Linux Cast apparently.
[00:17:16] <hayley> https://www.reddit.com/r/programming/comments/se88im/dubious_achievement_comm_of_the_acm_34_4_april/? Bakerposting time
[00:17:17] -ixelp- "Dubious Achievement", Comm. of the ACM 34, 4 (April 1991), 18. : programming
[00:22:37] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[00:26:44] *** Joins: notzmv (~zmv@user/notzmv)
[00:47:00] <neominimum> nij: It may seem that you fulfil all requirements but sometimes even that won't guarantee success, there are always unknown factors and therefore an element of chance is involved, but I like the personal philosophy that there is always something that one can be better at.
[00:49:23] <neominimum> Whoops they already left
[00:52:41] *** Joins: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102F-static.midco.net)
[00:52:57] <mfiano> Another color space question, probably directed at gilberth or moon-child 
[00:54:07] <mfiano> What is the "canonical" RGB color space? My research says sRGB, but that has a non-linear TRC (gamma correction). I am wondering what the typical application with a linear RGB 0...255 color picker uses.
[00:55:18] <mfiano> and also |3b| 
[00:55:32] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-102C-static.midco.net) (Ping timeout: 240 seconds)
[00:56:39] <hayley> Who found that the generational hypothesis still holds in C? BDW has a generational mode, so I guess it has to be effective sometimes to be justified. But still.
[01:00:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:01:10] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:03:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:07:33] <hayley> https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.6712&rep=rep1&type=pdf p.5 the median lifetime of an object is still measured in *kilobytes* at most. But they are all interpreters for some reason.
[01:07:40] <hayley> s/they/the programs tested/
[01:10:54] <mfiano> Ok I see now. It is sRGB, but sent through a linear transformation
[01:10:57] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[01:11:23] <mfiano> The equation looks pretty straight forward now that I understand the symbology. Time to hack
[01:12:17] <hayley> https://i.redd.it/alaax10949251.png
[01:20:02] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:24:03] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:33:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:35:25] <hayley> https://mas.to/@nodefunallowed/107696632622207618 aight what are we using The Blue Book as a stand for then
[01:35:26] -ixelp- Hayley Patton: "@alexandra@mk.nixnet.social my copy of The Rust P…" - mas.to
[01:35:30] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:39:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:41:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:43:34] <pl> hayley: I'm trying to figure out if that guy on twitter is using incompatible dictionary of terms, or just doesn't grok memory 
[01:51:02] <hayley> pl: I can't really believe that non-trivial C programs don't use dynamic allocation.
[01:52:20] <pl> They pretty much all do, and even with reuse you can get long chains of destructors being called (main method for reusing object pools in Linux kernel supports destructors...) 
[01:52:24] <sm2n> static char[INT_MAX]
[01:52:28] <sm2n> this is all you ever need
[01:55:51] <hayley> https://www.youtube.com/watch?v=V1lle-721ro
[01:55:51] -ixelp- Gary Numan - 06 The Aircrash Bureau, Hope Bleeds DVD - Nov 2004 - YouTube
[02:00:50] <hayley> can't believe Gary Numan predicted Henry Baker predicting pkexec
[02:03:35] <moon-child> hayley: sel4 doesn't allocate
[02:03:57] <phoe> sel4?
[02:04:18] <hayley> The microkernel.
[02:04:26] <moon-child> ^
[02:04:26] <hayley> Okay, now don't be the seL4 developers for a second... (scnr)
[02:04:35] <moon-child> formally verified microkernel
[02:06:37] <phoe> oooh
[02:08:07] <pl> Mind you, to develop seL4 they couldn't use C - C is the language that ended up being generated at the end of a long process 
[02:09:00] <sm2n> the lengths they go through are insane
[02:09:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 240 seconds)
[02:09:45] <sm2n> they even built a formal model of the asm generated from the C and verify it against the IR that gets lowered to C to catch miscompilations
[02:13:05] <pl> hayley: btw, fun fact - the whole twitter thread started out of combined pkexec/linux bug, right?
[02:13:44] <pl> The specific way to trigger privilege escalation involves core unix feature that is not possible to implement without dynamically allocating on the heap
[02:14:16] <hayley> I suppose so, yes.
[02:15:14] <hayley> Generally "C is fine, just write better code" sentiment is very...oblivious to reality now.
[02:16:00] <pl> you can't really implement setenv() without it, and while inital environ could be stack allocated (gets murky as you don't really have a defined stack and you can't go lower on it) argv, environ and the few other pointer passed on the stack point to heap in general, and aren't overwriteable without malloc on the heap
[02:16:35] <pl> another funky thing - on any normal C stdlib, you can't open a file without malloc() being called
[02:17:47] <kakuhen> >C is fine, just write better code
[02:17:49] <kakuhen> i love this statement because it amounts to "dude just never make mistakes lmao!!"
[02:18:01] <kakuhen> and such a statement would be generally accepted as non-sensical 
[02:18:02] <pl> kakuhen: it's why I snerk at OpenBSD
[02:18:12] <selwyn> kakuhen: this is the idiot programmer mentality
[02:18:46] <hayley> kakuhen: Yes, but you are supposed to be a professional or smth, and thus never make mistakes. No other industry uses fault tolerance techniques, they're just perfect.
[02:18:50] <pl> kakuhen: because OpenBSD is essentially "just be careful writing C" given nonprofit status and an operating system with outsized reputation
[02:19:11] <kakuhen> pl: a lot of my opinion on OpenBSD is unfortunately rooted from unix haters handbook
[02:19:21] <kakuhen> seems like they are fighting a losing fight by trying to put security into unix
[02:19:26] <hayley> selwyn: Nowadays I find myself using "gameshit" (compare with "webshit") for a subgroup of said idiots.
[02:19:32] <kakuhen> with that said, there are some commendable stuff they've made
[02:19:36] <selwyn> gamedev?
[02:19:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:19:46] <kakuhen> i like the things around openbsd, but not so much the operating system itself
[02:20:12] <hayley> Yup.
[02:20:27] <selwyn> hm
[02:21:23] <moon-child> pl: openbsd makes an appreciable investment in privsep-based security, which is effectively the opposite of 'just be careful writing c
[02:21:25] <moon-child> '
[02:21:32] <hayley> https://core.ac.uk/download/pdf/54846604.pdf page 10 table 8 - generational hypothesis much?
[02:21:51] <moon-child> it's basically the best you can expect of unix--actually trying to use processes as trust domains and fds as capabilities
[02:22:04] <pl> moon-child: Their privsep investment is best shown by recent OpenSMTPd privilege escalation
[02:22:17] <pl> (i.e. a fig leaf compared to systems they deride)
[02:22:53] <moon-child> sure.  Nothing is perfect, and I don't claim that they are
[02:22:55] <hayley> Which systems?
[02:23:45] <selwyn> i have heard dumb things from gamedevs at times, but generally i sympathise with them
[02:23:55] <selwyn> inertia means that they cannot do things as they would like, even if they want to
[02:24:00] <pl> hayley: Mostly Linux, but the comments would have applied to TrustedBSD, TrustedSolaris, HP Vault and bunch others too
[02:24:35] <White_Flame> tons of gamedevs don't know how to actually innovate the code.  they're so mentally constrained by exactly how the game loop "should be" because performance required it decades ago
[02:25:09] <White_Flame> (and those are the good ones, not just the stackoverflow copypasters into Unity ;) )
[02:25:18] <hayley> selwyn: Well, yeah, I don't like to pick on people, but I draw the line at having cult leaders say I'm causing the downfall of civilisation or smth.
[02:25:21] <pl> White_Flame: reminds me of Doom 2016 engine compared to many others, or the sheer insanity pulled by Naughty Dog over PS3 lifetime
[02:25:31] <White_Flame> yep
[02:25:46] <selwyn> a gamedev friend of mine simply didn't believe that trial-vr would be possible
[02:25:58] <hayley> I'd be down for such an act, which is why I still do it; but I'm aware it's not a compliment to them.
[02:26:28] <White_Flame> what's trial-vr?
[02:26:29] <pl> ND didn't shy from admitting that a) they needed it b) they did it, where "it" was "develop a special purpose multitasking operating system for Cell SPE coprocessors"
[02:26:59] *** Joins: kevingal (~quassel@80.233.36.216)
[02:27:05] <hayley> selwyn's VR doohickey.
[02:27:22] <selwyn> https://www.youtube.com/watch?v=eMsMm_q-akI
[02:27:22] -ixelp- Trial VR - YouTube
[02:27:40] <moon-child> selwyn: impossible why?
[02:27:48] <selwyn> i forget exactly
[02:27:51] <White_Flame> ah cool, I did see that before
[02:27:52] <selwyn> 'lisp is slow'?
[02:28:10] <selwyn> ime people simply believe that lisp is a meme language
[02:28:45] <White_Flame> or purely the dynamism of changing things in the "native" language as it's running the 3d world
[02:28:46] <selwyn> such people often themselves use meme languages
[02:29:04] <selwyn> white_flame: that was possibly closer to the objection raised
[02:29:23] <selwyn> because its simply unnatural in 'normal' game development
[02:29:51] <selwyn> i wonder sometimes whether ue4 is an example of greenspun's 10th law
[02:30:10] <selwyn> seeing as how it attempts to reinvent modularity and tries to make c++ something it is not
[02:30:17] <hayley> Once someone said "sucks that all the Matrix servers are written in meme languages" referring to Python, Go and Rust.
[02:30:19] <hayley> Memes are subjective.
[02:31:28] <aeth> no Clojure
[02:31:35] <aeth> I guess they started the protocol a few years too late for that
[02:31:40] <aeth> used to be up there with Go and Rust 10 years ago
[02:33:07] <drakonis> selwyn: they're making a new lang for ue5
[02:33:13] <drakonis> if you havent seen that horror yet
[02:33:24] <selwyn> horror?
[02:33:28] <selwyn> i should have guessed as much
[02:33:45] <selwyn> what will it be called?
[02:34:10] <aeth> All that Fortnite money has given Epic more money than they know what to do with, and they're not spending it wisely.
[02:34:14] <drakonis> its some metaverse shit
[02:34:16] <kakuhen> hayley: meanwhile all of the C++ clients segfault by just existing
[02:34:23] <drakonis> let me try to remember the name
[02:34:28] <kakuhen> nheko is like the most feature complete non-element client and it crashes by just exiting
[02:34:57] <kakuhen> thankfully i can tolerate element
[02:35:17] <kakuhen> written in a "meme" language but it doesnt smash the stack or call a  destructor twice on the same QWidget
[02:35:25] <hayley> FluffyChat time
[02:35:57] <gilberth> What's the X server people use with Windows?
[02:35:57] <hayley> The only Gilad Bracha approved* client, by being written in Dart
[02:36:17] <hayley> gilberth: Xming?
[02:36:17] <hayley> *Bracha was supposed to read the Netfarm paper, so probably not
[02:36:54] <drakonis> selwyn: its called verse
[02:36:56] <drakonis> lol
[02:37:02] <gilberth> hayley: ok.
[02:37:10] <drakonis> unreal verse
[02:37:19] <drakonis> they really goin' wild with this metaverse shit lmao
[02:37:23] <aeth> they have to
[02:37:25] <aeth> it's what the investors want
[02:37:54] <drakonis> they hired spj for this
[02:39:27] <hayley> Metaverse is a monad
[02:39:59] <drakonis> this is maddening.
[02:40:28] <hayley> main = runMetaverse $ goTo walmart >> (findNFT monkey >>= buy)
[02:41:44] <drakonis> haskell's syntax will never not be some eldritch bullshit
[02:44:08] <aeth> http://gordongoner.com/
[02:44:09] -ixelp- Why Bored Ape Yacht Club is Racist and Started by Neo Nazis
[02:44:25] * mfiano wonders how to know whether a given RGB space is "companded" or not.
[02:44:36] <aeth> meanwhile, someone paid to get BAYC on The Tonight Show
[02:44:59] *** Joins: shka (~herr@109.231.0.226)
[02:45:00] <aeth> https://www.youtube.com/watch?v=5zi12wrh5So&t=222s
[02:45:01] -ixelp- Paris Hilton Surprises Tonight Show Audience Members By Giving Them Their Own NFTs | Tonight Show - YouTube
[02:46:41] <aeth> and NFTs are just URLs that you have to pay tens/hundreds of thousands for
[02:46:50] <aeth> they don't even store the data in the blockchain
[02:47:40] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[02:50:19] <hayley> https://www.youtube.com/watch?v=tBvAxSx0nAM
[02:50:20] -ixelp- Welcome To The Machine - YouTube
[02:52:10] *** Quits: kevingal (~quassel@80.233.36.216) (Remote host closed the connection)
[02:54:10] <gilberth> Hmm I also found XcXsrv.
[02:55:48] <hayley> My mother wants me to return home, and she says that if my dad threatens anything, she'll call a domestic violence officer very quickly. But, honestly, I don't want to wait for that, he's a complete asshole at pretty much any other point in time.
[02:55:49] <GreaseMonkey> as someone who gives a shit about the metaverse in general... while there may be potential for a "proof i got there first" on some kind of blockchain, the way NFTs appear to be implemented suggests that what i would propose instead would be a much better solution... still with problems, but it would be a notable improvement
[02:57:26] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:57:41] <GreaseMonkey> gilberth: the X11 server i recommend for Windows is VcXsrv
[02:57:58] <GreaseMonkey> although hardware accelerated graphics is a bit munted so you'll want to turn that feature off probably
[02:58:01] <moon-child> agh
[02:58:05] <moon-child> gilberth: you were right about antialiasing
[02:58:07] <moon-child> this is bullshit
[02:58:20] <aeth> GreaseMonkey: NFTs are just nonsense and the least efficient way to implement what Steam already has had with Team Fortress 2 inventory
[02:58:31] <aeth> nobody would pay attention to NFTs if the prices weren't so high, but that's just self-bidding to try to create a market
[02:58:50] <aeth> for actual macrotransactions, see Star Citizen
[02:59:04] <gilberth> GreasMonkey: I am looking for quirks in the Core X protocol especially wrt to fonts and visuals. And I perhaps misstyped VcXsrv.
[02:59:22] <gilberth> moon-child: What made you change your mind?
[02:59:47] <GreaseMonkey> alright
[03:00:40] <gilberth> Oh. CCL isn't happy with Windows?
[03:00:42] <GreaseMonkey> aeth: the problem i'd like to solve is that of avatar theft - basically, ripping a paid avatar or a strictly personal avatar and proceeding to be a dick about it
[03:01:30] <moon-child> aa is about frequency modulation
[03:01:33] <GreaseMonkey> part of solving such a problem is to actually have decent moderators
[03:01:33] <moon-child> but text is discrete
[03:01:37] <moon-child> https://files.catbox.moe/yyimde.jpg what's the frequency of this??
[03:02:08] <moon-child> s/text/curves/
[03:02:44] <sm2n> GreaseMonkey: you are reinventing government enforcement of "intellectual property"
[03:03:02] <sm2n> it is called a trademark
[03:03:05] <gilberth> moon-child: As a function? (lambda (x) (if (< x 0) 1 0))?
[03:03:19] <GreaseMonkey> i'd've thought you could have copyright on the mesh and texture data
[03:03:31] <moon-child> gilberth: yeah
[03:03:46] <sm2n> you can
[03:03:46] <moon-child> gilberth: cuz that's basically what a vector graphic is (only in 2d)
[03:03:54] <GreaseMonkey> although in a decentralised environment, you're only going to end up with an imperfect solution... but one could potentially come up with a feasible claim that "the hash of the message with this hash in it was declared at this time and cited by these entities" and you could potentially prove that something you didn't want shared was what you had first
[03:04:06] <moon-child> GreaseMonkey: so you want to be an anarchist but then reinvent government
[03:04:07] <sm2n> but the point of trademarks is for combating misrepresentation, not so for copyright
[03:04:20] <GreaseMonkey> huh, good point w/ the trademark thing
[03:04:28] <aeth> GreaseMonkey: blockchain doesn't solve art theft because (1) nobody can prove that the artist put it there (and if it looks half-decent, it's probably stolen from Deviantart) and (2) what happens when (not if) your wallet gets hacked and you lose your avatar in an irreversible transaction? Now you're the thief if you keep using it
[03:04:42] <aeth> Plus it's like $600 in fees
[03:04:55] <aeth> Blockchains exist to enrich middlemen so fees necessarily have to be high
[03:05:06] <aeth> Otherwise the middlemen can't make passive income
[03:05:38] <GreaseMonkey> moon-child: i'm trying to work out how to not screw over artists
[03:05:59] <GreaseMonkey> one possible approach is to follow a commision model
[03:06:20] <aeth> "Protect this digital thing from theft via an irreversible transaction that will happen as soon as any step of the software stack has a bug" is such a hard problem, people should've given up on it 10 years ago
[03:06:46] <aeth> The only reason people haven't given up is because number goes up and they want to become billionaires from it
[03:06:50] <hayley> My only real complaint about NFTs is that I can't imagine using one as an "identity". All my profile pictures are shitty edits that I made myself, so I have some attachment to them.
[03:07:20] <sm2n> GreaseMonkey: what constitutes "not screwing over artists"?
[03:07:32] <sm2n> What is your theory of value?
[03:08:01] <gilberth> moon-child: Ok. Enlighten me, how is AA about frequency modulation?
[03:08:37] <GreaseMonkey> sm2n: do you believe that an artist should be able to make a living through producing art alone?
[03:09:04] <aeth> only solution is UBI
[03:09:06] <moon-child> gilberth: shannon sampling theorem
[03:09:14] <aeth> a good artist will find a way to just barely subsist off of UBI
[03:09:16] <moon-child> gilberth: renderer is a discrete sampling of a continuous function
[03:09:25] <sm2n> GreaseMonkey: Sure
[03:09:32] <moon-child> gilberth: antialiasing is when you chuck the high-frequency bits of your input
[03:09:34] <aeth> it's not like good art is ever discovered within the lifetime of the artist, anyway.
[03:09:48] <moon-child> to get an input' that, when you sample that, you get something that can be used to perfectly reconstruct the original
[03:10:20] *** Joins: djuber (~user@65.79.128.64)
[03:10:23] <gilberth> moon-child: Ok. I see.
[03:10:26] <|3b|> mfiano: i think the canonical color space is "uncalibrated, with 3 or 4 layers of things that conflate linear, gamma, srgb all in different ways"
[03:11:44] <|3b|> moon-child: i think the useful distinction is that some monitors can reconstruct signals with something resembling a basis function made from square waves rather than the sine waves assumed by most signal theory
[03:12:40] <moon-child> |3b|: does that mean
[03:12:42] <moon-child> box filters?
[03:12:44] <moon-child> D:
[03:12:59] <|3b|> one can take advantage of that property to get very high frequency (depending on how well a particular monitor approximates square waves), but since the actual signal bandwidth doesn't change, you lose other things
[03:13:13] <|3b|> no, it means actual boxes :)
[03:13:20] <gilberth> moon-child: Yeah, that's right. When sampling with say a ADC you don't do that AA either.
[03:14:03] <|3b|> so if you think of text as having infinite bandwidth perfectly sharp edges, you might try to match that up with the sharp edges available from some monitors
[03:14:14] <GreaseMonkey> ok... there's potential for an avatar creator to become known by having a nice avatar which is intended for their personal use (some people are quite particular about the avatars they have), is this better solved via social means, e.g. "person X made that for themselves and it means something to them, why are you running around in it like it's nothing to you"
[03:14:18] <moon-child> |3b|: sure, but I construct a model of the monitor, that is a framebuffer
[03:14:48] <moon-child> gilberth: I'm pretty sure audio antialiasing is a thing.  But you generally assume audio is continuous
[03:15:12] <|3b|> but in return for the sharp edges you lose information from position and size instead
[03:15:33] <|3b|> which again, might be a good tradeoff (and was, when all we had was 80DPI)
[03:15:45] <moon-child> well, the question is: what looks good?
[03:15:47] * |3b| still uses pixel fonts, since i still have ~100dpi
[03:15:54] <|3b|> depends on what you are doing :)
[03:16:36] <|3b|> monospaced text already has very low information content in position. if there is only 1 font size, size has similarly low information content
[03:16:53] <|3b|> so putting all the spare bandwidth into sharpness is a good tradeoff
[03:17:08] <moon-child> b-b-but jaggies!
[03:18:25] <|3b|> but as soon as you start having things that need to be positioned smoothly, like proportional spaced text, or when you need to vary the size arbitrarily, you no longer have that spare bandwidth, and so you are back to having to make an actual sacrifice somewhere
[03:18:44] <gilberth> moon-child: Well, yes, hinting usually tries to move say the two vertical lines of an "H" so that they fall into just the pixel grid. So you get a row like ..#.....#.. and not half-way between and getting ..xx..xx.. [# = full black, x = 50% gray]
[03:19:27] <moon-child> yeah
[03:19:53] <|3b|> similarly for general vector graphics, position and size have large amounts of information, so you if you try to use the "square-wave basis function" approximation you have to seriously quantize your size/position, which gives what you call jaggies :)
[03:21:28] <sm2n> GreaseMonkey: Why do you fixate on this particular mechanism for artists to get renumeration?
[03:21:47] <|3b|> AA assumes the usual signal theory interpretation of sine-wave basis functions, and limits bandwidth, which gives you back information to distribute to size and position
[03:22:17] <gilberth> moon-child: When doing 2d graphics for say gadgets and borders or dividers or sth. you usually also tune to full grid coordinates.
[03:23:34] <gilberth> Ah ccl 1.12.1 is happy.
[03:23:35] <|3b|> so there are 2 things to think about: can you get away with the square wave approximation for a particular task (and if so, will it mix poorly with nearby elements that can't)? and second, if you do need AA, how to make it look good
[03:24:09] <moon-child> gilberth: I usually expressed coordinates natively as pixels
[03:24:35] <moon-child> if you want some constraint like '80% of screen width', that gets turned into pixels as soon as possible
[03:24:41] <gilberth> And why don't virtual machines translate you keymap? As I do for the CADR. I type ( ) with Windows and get [ ]. *sigh*
[03:25:20] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[03:25:47] <moon-child> |3b|: you mean that a different approach to aa is required in context of squareish pixels?
[03:26:07] <gilberth> moon-child: Yep, and with my CLIM vbox and hbox e.g. as well as the table formatter round to the pixel grid. I have a MEDIUM-RESOLUTION function for that. Closure did the same 20 years ago.
[03:26:14] * |3b| notes that the image of lines on paper earlier is not actually infinite bandwidth, since ink spreads on paper and the camera isn't point sampling. the question is what do we have to do differently to get our CGI to look like that
[03:26:40] <gilberth> moon-child: Also, you want your clip masks rendered without antialiasing. You really want.
[03:26:52] <|3b|> moon-child: i hadn't gotten that far, but "we should be able to do AA better" is probably my end conclusion on that side :)
[03:27:43] <gilberth> And with that MEDIUM-RESOLUTION API I could format a table to a character grid nicely. Sth Closure already did.
[03:27:48] <|3b|> something else i hadn't gotten to is that "square-wave basis function" / "square pixels" isn't as good an approximation as it used to be
[03:27:54] * hayley picks times for the two subjects she attends this semester. 3/4 classes are entirely online. They do not all fit in one day.
[03:28:00] <moon-child> |3b|: '"AA better"' how?
[03:28:13] <moon-child> didn't it used to be much worse?  (e.g. crts)
[03:28:16] <hayley> You can do the standard 3 subjects (without an elective) in two days in 4 different ways.
[03:28:22] <moon-child> or do you mean to muck about with subpixels?
[03:28:29] <|3b|> moon-child: congratulations, now you have a thesis subject for your next degree :)
[03:28:43] <gilberth> OTOH I really like AA for things like line drawing. Think CAD e.g.
[03:29:07] <moon-child> |3b|: oi!  You're supposed to be the export here!
[03:29:08] <|3b|> moon-child: consider 2 pixels that share 4 subpixels
[03:29:34] <|3b|> (as in pretty much every OLED display i know of, i think)
[03:29:42] <|3b|> are they square pixels?
[03:29:56] <hayley> When I was younger I'd just PLOT pixels for the right characters I wanted to draw in QBasic.
[03:30:21] * moon-child looks up oled pixel layout
[03:30:25] <|3b|> or is it 5?
[03:30:37] <|3b|> https://en.wikipedia.org/wiki/PenTile_matrix_family for example
[03:30:56] <moon-child> yeah I was aware of that but thought it had fallen into disuse
[03:31:49] <moon-child> https://www.oled-info.com/files/Galaxy-vs-iPhone-X-Diamond-pixel-structure_0-img_assist-400x195.jpg  interesting
[03:31:51] <gilberth> SUBST no longer works with Windows? This is the single DOS feature I miss.
[03:32:47] <moon-child> |3b|: so I assume you send a pixel grid, and it is sampled somehow onto that other grid.  Then the solution seems to be to expose the underlying pixel layout explicitly
[03:33:00] <moon-child> s/other grid/other whatever-that-is/
[03:36:47] * |3b| 's solution is just "assume the usual signaling theory interpretation and hope the rest of the software/hardware between my code and the next set of eyes does something reasonable with it" :p
[03:37:17] <|3b|> and in particular, hope to be able to assume high-dpi displays
[03:38:21] <moon-child> sounds like worse-is-better talk!
[03:38:40] <|3b|> since higher nyquist limit for the signal-theory interpretation lets you get closer to the actual results of putting the square-wave-basis interpretation through large blurry pixels
[03:38:42] <|3b|> not really
[03:39:50] <|3b|> just saying that we have 2 bad approximations of a desired result, and the border between where one is better than the other can shift. higher DPI is one of the things that can shift that :)
[03:40:01] <moon-child> yeah but under that interpretation the vector gfx are still infinite-frequency, so it doesn't really get you anywhere
[03:40:34] <|3b|> well, maybe that's one of the reasons we get AA wrong, and should stop assuming that
[03:40:35] <moon-child> except in human terms
[03:41:16] <|3b|> infinite bandwidth vector graphics, on perfect noise-free surfaces
[03:41:37] <moon-child> isn't that what hinting is about--again?
[03:41:38] <|3b|> then expect them to look like finite bandwidth things on noisy surfaces
[03:42:09] * |3b| would argue hinting is just a compressed way to store/design large numbers of pixel fonts
[03:42:27] <moon-child> fair enoough
[03:42:51] <|3b|> and pixel fonts (including hinting) are assuming the infinite bandwidth square-wave basis approximation of displays
[03:42:53] <moon-child> but you could argue by the same token that all vector graphics are compressed ways to store/design large numbers of pixel graphics
[03:43:52] <|3b|> but not any specific pixel graphicss
[03:44:12] <|3b|> vector font + hinting system + fixed size represents a specific pixel image
[03:44:38] <|3b|> which could just as easily be a raster pixel font
[03:44:56] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:45:04] <|3b|> vector font + hinting system represents a set of specific pixel images, one for each integer display size
[03:45:18] <dave0> maw
[03:46:20] <|3b|> vector font by itself is an infinite set of pixel images, since it doesn't collapse them all onto integer sizes
[03:47:14] <|3b|> and like any other vector graphics, it is up to us programmers to figure out w/which/ images it should represent given a particular size
[03:47:25] <moon-child> hmm
[03:47:26] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[03:47:29] <moon-child> what if we change monitors instead?
[03:48:09] <|3b|> instead of what?
[03:48:33] <moon-child> instead of changin how we do aa
[03:49:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:49:24] * |3b| would argue that most things should try to avoid assuming anything about monitors in the first place, beyond maybe DPI
[03:49:50] <moon-child> eh
[03:50:02] <moon-child> don't you have to assume something about your monitor if you want to do aa properly?  wasn't that how we got here?
[03:50:34] <|3b|> (things like OS-level font rendering can maybe get away with expecting the user to configure subpixel layout for AA, but making people do that per application sounds annoying for users)
[03:51:06] <|3b|> well, you have to somewhat assume the monitor isn't horrible, but that isn't really a valid assumption anyway
[03:51:49] <moon-child> well, if the monitor is horrible, then who cares what the stuff you push to it looks like, as long as it's functional
[03:51:50] <|3b|> (most monitors are miscalibrated and in bad environments, and probably a lot are not even rendering a full 8 bits per channel, even if they do have 3 subpixels per pixel)
[03:52:06] <|3b|> right, which is why i tend to say ignore monitors :)
[03:52:25] <|3b|> either it will do the right thing, or it won't look for all of them no matter what you do
[03:52:49] <moon-child> well, but maybe you care if it's sensible lcd vs sensible oled; no?  Or mobile vs not (sideways pixels)
[03:52:50] <|3b|> (aside from maybe forcing the user to go out and buy calibration hardware and recalibrate their monitor and room)
[03:52:58] <moon-child> bbiab household tasks
[03:54:26] <|3b|> i think my argument is that you maybe /could/ care about it, but you can't /know/ that (and even asking users will probably be wrong, either because they have no clue and/or can't tell from your test image, or just because they docked their laptop while you weren't looking)
[03:55:19] <|3b|> so unless you can convince (existing) hardware to tell you, or can amortize the work of finding out from the user across an entire OS, i'd probably not bother with anything that requires that knowledge
[03:55:34] <|3b|> particularly when we still have lots of room to improve above that level
[03:56:10] <|3b|> (and when that matters much less on higher DPI displays, which are becoming more popular as older displays are retired and as quality of new displays improves)
[03:56:56] <|3b|> the picture of the lines on paper doesn't know what subpixel layout we have, but probably looks good on all of our monitors :)
[03:59:39] <|3b|> it's even jpeg, which means it is has gone through all sorts of lossy processing like dropping resolution of color data, etc
[04:00:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:01:00] <|3b|> maybe instead of AA, we should just be giving all our vector graphics noisy ragged edges like those lines :)
[04:02:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:03:48] <|3b|> another feature of newer monitors that is becoming more common is higher refresh rates, so you can steal some bits from time axis to improve the perceived quality in space axes
[04:03:55] <gilberth> Does AA even take the gamma into account? I mean, is the alpha channel gamma corrected?
[04:04:07] <|3b|> "does" or "should"? :p
[04:04:21] <gilberth> does. It should.
[04:04:28] <gilberth> ?
[04:04:35] <|3b|> then it depends on who is doing it
[04:04:55] <|3b|> things are more likely to be correctly accounting for it than in the past
[04:05:25] <gilberth> Ok.
[04:05:30] <hayley> Apparently my favourite letter by Dr. Baker is asking for an objective measure of code quality. And I read it to just say that any measure is better than none.
[04:06:10] <|3b|> actually, i might not have been answering what you asked
[04:06:26] <|3b|> as far as i remember, alpha channel should /not/ be gamma corrected
[04:06:41] <|3b|> (well, what it /should/ depends on the expectations of whoever put the value there)
[04:07:00] <|3b|> but /blending/ using the alpha values should take place in linear color space
[04:08:40] <gilberth> Yeah, I was thinking because multiplying a voltage send to the CRT by 0.5 doesn't give you half the energy. So all that Porter-Duff operations should work on linear values IMHO.
[04:09:05] <|3b|> right, that's a big thing in game dev over last decade or 2
[04:09:44] <|3b|> figuring out which data is in gamma space or linear space, then making sure things are converted as needed so that operations take place in a color space where they are valid
[04:10:43] * moon-child regularly gets coordinate spaces mixed up
[04:10:47] <moon-child> don't trust me for colour work!
[04:10:50] <|3b|> (then there is the problem that a single "alpha" value as it is usually used is ambiguous, since it could be a coverage fraction or a transmission fraction, or worse both mixed together)
[04:12:13] <|3b|> didn't help that old GPU hardware didn't account for color space when doing hardware blending, but modern hardware can be configured to behave correctly
[04:13:32] <moon-child> ooh, have pointers?
[04:13:42] <moon-child> how do I control that?
[04:14:01] <|3b|> mostly just about correctly flagging textures and framebuffers as srgb when that's what is stored in them
[04:15:05] <|3b|> i seem to remember https://developer.nvidia.com/gpugems/gpugems3/part-iv-image-effects/chapter-24-importance-being-linear having useful background info
[04:15:06] -ixelp- Chapter 24. The Importance of Being Linear | NVIDIA Developer
[04:15:12] <moon-child> it assumes linear if not srgb?
[04:15:26] * gilberth remembers that Porter-Duff also talked about a fifth channel.
[04:17:13] <|3b|> moon-child: might also need to use premultiplied alpha in some places
[04:17:23] * |3b| doesn't remember the details of getting things completely correct
[04:18:47] <hayley> https://www.youtube.com/watch?v=fbU1zYzD-Tw
[04:18:48] -ixelp- Baby's On Fire (2004 Digital Remaster) - YouTube
[04:19:52] <|3b|> for the ambiguity of alpha: consider holding up a loosely woven green cloth in front of a white light. since the light is transmitted through holes in the cloth (% transmitted = coverage), you would see attenuated white light. If you do the same with a sheet of green plastic with no holes (% transmitted = opacity), you would see green light
[04:20:38] <moon-child> makes sense
[04:20:57] <moon-child> (now: what happens when you hold the cloth in front of the plastic?  Vice versa?)
[04:20:58] <gilberth> Dammit. I miss bookmarks. I once read an article about the issue, which was pretty good. Just on doing all kind of algorithms in linear.
[04:21:44] <|3b|> (arguably you might need 3 alpha values for transmission, one per color, but i'm not sure if having different transmitted and reflected colors is common enough in physical materials to care about that opssibility)
[04:23:17] <|3b|> gilberth: did some browsers remove bookmarks  completely?
[04:23:33] * |3b| still has bookmarks, not that i can find anything in them anyway
[04:24:00] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.4)
[04:24:38] * moon-child has bookmarks, also never closes tabs, also has an endless backlog of papers to read
[04:25:47] <gilberth> |3b|: I move too often, so things get lost after more than ten years. I should keep my bookmarks elsewhere.
[04:26:12] <moon-child> gilberth: has closure bookmarks?
[04:26:20] <moon-child> :)
[04:26:23] <|3b|> one of the big problems with graphics (including AA) is that in addition to all the fancy signal-theory stuff that gets all the attention, there is just a huge pile of details that need to be gotten right in dozens of places
[04:27:26] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:28:48] <gilberth> moon-child: Closure would be >20 years. And I bet I still have those :-p
[04:29:13] <moon-child> |3b|: yeah.  I have a better fill predicate than slug, but I also have better space partitioning.  Who cares about space partitioning??
[04:33:51] <White_Flame> moon-child: stop describing my browsing habits ;)
[04:34:29] <moon-child> haha
[04:34:35] <moon-child> the first step is admitting that you have a problem
[04:34:46] <moon-child> the second stop is retiring to a cave for 10 years to finally read all those things
[04:35:00] <|3b|> moon-child: there is also the option of making the cloth out of the plastic too for the ambiguous alpha thing :)
[04:35:06] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[04:35:58] <|3b|> and yeah, composing multiple layers of coverage and transmission is complicated
[04:36:12] * moon-child nods
[04:36:13] <|3b|> and for extra fun, coverage doesn't compose in the first place
[04:36:20] * moon-child wants a good model for actual human vision
[04:36:27] *** Joins: jeosol (~jeosol@user/jeosol)
[04:36:29] <|3b|> i mean even before you look at it
[04:36:40] <moon-child> sure
[04:36:46] <moon-child> but at some point you have to deal with that
[04:36:54] <|3b|> 50% coverage + 50% coverage is anything from 50% to 100%
[04:37:31] <White_Flame> all you need to do is keep geometric representations of overlapping triangles per pixel :-P
[04:37:38] <moon-child> run into this with vectors too
[04:37:40] <|3b|> and is horribly obvious when you get it wrong in some common trivial cases, which is another problem with AA, which uses alpha as coverage
[04:37:41] <moon-child> White_Flame: isn't that nanite?
[04:38:03] <White_Flame> I haven't been able to discern what nanite actually is
[04:38:10] <White_Flame> but I don't think it's an antialiasing technique
[04:38:11] <|3b|> right, or store a few binary coverage samples
[04:38:47] <sm2n> unrelated, but I think google had some project for a dsl for producing safe and fast multimedia parsing code, does anyone know what it is called? I think it is used in android
[04:39:08] <moon-child> wuffs
[04:39:21] <White_Flame> |3b|: binary isn't enough.  Each coverage sample needs a list of z-buffered alpha samples, too, to be properly order-independent
[04:39:25] <sm2n> moon-child: thanks, that's it
[04:40:05] <|3b|> White_Flame: no, binary coverage samples is enough, you just need a lot of them per pixel
[04:40:20] <|3b|> ah, i see what you mean
[04:40:43] <|3b|> yeah, for a lot of real use you need depth too
[04:42:02] <|3b|> for things like 'over' operator where order/depth is implicit, you only need binary 
[04:42:15] <White_Flame> need properly antialiased edges between interpenetrating polygons :-P
[04:42:35] <White_Flame> where each is translucent and reflective
[04:43:47] * |3b| should probably go write some code soon or something
[04:44:08] <White_Flame> I love the notion of a geometric solution
[04:44:30] <White_Flame> I don't know if anybody has bothered, but it'd probably be "fast enough" for like 720p or lower
[04:44:48] <White_Flame> need to bring back SD res gaming
[04:44:56] <|3b|> probably depends more on geometric complexity than resolution
[04:46:45] <|3b|> seems like "places where you care about edges of polygons" is proportional to 1d resolution, unlike rasterization in general which is quadratic
[04:47:20] <|3b|> so just need to implement your renderer to separate those and handle them separately, which doesn't sound too implausible with compute shaders
[04:47:31] <White_Flame> right, how many pixels represent an edge
[04:49:09] <White_Flame> I remember my old intel i740 graphics card did 2-pass antialiasing like that
[04:49:27] <White_Flame> and there was a driver bug or something where the 2nd pass was scaled down to 1/4 screen size
[04:49:43] <White_Flame> so you had the normal render, then a wireframe of just the edges, where it drew the antialiasing
[04:50:08] <White_Flame> I bet it ended up doing something like the N64's antialiasing
[04:50:26] <White_Flame> which is some filter based on coverage, taking the surrounding pixel colors based on their coverage bits
[04:53:56] <pl> i740, wasn't that the utter failure one?
[04:54:12] <White_Flame> yep
[04:54:15] <White_Flame> but I had one
[04:54:51] <White_Flame> and that means I'm super annoyed when they call the Xe "Intel's First Discrete GPU!!¡oneomg"
[04:55:02] <White_Flame> "they" not being intel, but internet people
[04:55:44] <White_Flame> iirc, it was cheap :)
[04:56:05] <White_Flame> but it actually did real antialiasing, which was the big selling point for me
[04:56:27] * moon-child thought we had established all antialiasing is fake
[04:56:43] <White_Flame> aliasing is fake.  antialiasing attempts to mitigate the aliasing
[04:57:12] <moon-child> everything is fake.  It's graphics; what do you expect?
[04:57:33] <White_Flame> good looking fakes
[04:57:38] <moon-child> yeah
[04:57:47] <White_Flame> and mathematically correct faking
[04:58:08] <moon-child> correct in what sense?
[04:58:51] <White_Flame> coverage area per pixel, as well as lighting & shadows
[04:59:32] <White_Flame> even ray tracing sucks, because it's stochastic instead of continuous.  Needs frustrum tracing
[04:59:44] * moon-child is still offended by trapezoidal coverage calculations
[04:59:57] <moon-child> I don't care that you can get it to within an epsilon of the correct result, I still want analytical!
[05:00:13] <White_Flame> and true curved surfaces
[05:00:16] * hayley traces the ray tracer
[05:00:56] <moon-child> everyone always asks what is ray tracing, but no one ever asks how is ray tracing
[05:00:56] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[05:01:40] * |3b| wonders who is ray tracing
[05:01:49] <White_Flame> I ask where is frustrum tracing
[05:02:00] <White_Flame> |3b|: Mr. Tracing is in the witness protection program
[05:02:23] <pl> White_Flame: iirc the i740 might have some chance as low end if not for requiring parts that would take it out of price for low end?
[05:02:32] <hayley> moon-child: why is ray tracing
[05:02:34] <|3b|> ah, explains why Ray is trying to trace him then
[05:02:39] <mfiano> They vanished without a trace
[05:03:09] <White_Flame> pl: parts?
[05:03:42] <White_Flame> also, rate racing
[05:03:53] <White_Flame> rate Ray sing
[05:04:06] <|3b|> also, i'd argue that "mathematically correct faking" is only useful to the extent the mathematics represent something physically meaningful :)
[05:04:39] <White_Flame> sure, they represent coverage of visibility and of light distribution
[05:05:33] <mfiano> can a ray bounce until it loses all of its energy in a mirror tunnel?
[05:05:52] <pl> White_Flame: apparently the few rare PCI i740s had extra memory that was used for textures, and were faster than the AGP one
[05:06:07] <pl> mfiano: if the bounce is perfect...
[05:06:09] <White_Flame> ah, I think mine was AGP
[05:06:27] <|3b|> like "mathematically correct" quadratic light falloff... yes, it is correct, but only if you manage to find a point light source. otherwise you need those linear and constant falloff terms to get "correct" falloff for an area light source
[05:06:35] <White_Flame> I played FF7 PC with it
[05:08:06] * |3b| covers the mirror tunnel with one of those materials they use for lasers, then supplies it with energy from outside, so the bounces can be more than perfect
[05:08:22] <White_Flame> |3b|: exactly
[05:08:38] <pl> White_Flame: I think software rendering was faster for FF7 PC :P
[05:08:41] <White_Flame> point light ssuck
[05:08:59] <White_Flame> pl: not for my machine.  I want to say it was a 133MHz AMD?
[05:09:03] * |3b| then soaks all my white surfaces in flourescent dyes, so they can "reflect" more light and thus look whiter
[05:09:07] <pl> White_Flame: ohhh
[05:09:24] <pl> I didn't have AGP till I switched to Super Socket 7
[05:09:59] <pl> and from 486DX2 to K6-1 200 I used Voodoo2, which did smoke i740 ;)
[05:10:38] * |3b| had the single-card dual GPU voodoo2
[05:11:59] <hayley> Hm. Someone said "you can only reliably measure the quality of software based on how much its users are satisfied with it", but I suspect that you can't really do anything with that information alone.
[05:12:27] <hayley> If your software crashes all the time, you'll have annoyed users, sure, but where does one go from there? Then it's an engineering problem again?
[05:12:34] * |3b| thinks that would only work if they had perfect information
[05:12:44] <moon-child> hayley: yeah.  It's kinda like 'all motivations are selfish'.  True on some level but not really interesting
[05:12:48] <|3b|> at best it measures usefulness
[05:13:02] <hayley> There is also the degenerate case of getting your users addicted to your software.
[05:13:03] <|3b|> people can be quite satisfied with things that are killing them for example
[05:13:14] <moon-child> well, addicts are not satisfied
[05:13:19] <moon-child> that's the whole point :P
[05:13:36] <|3b|> or with things that are secretly sending pictures of them to 3rd parties
[05:13:42] <White_Flame> https://white-flame.com/ff71.jpg
[05:13:44] <White_Flame> https://white-flame.com/ff75.jpg
[05:13:49] <White_Flame> screenshots I still have from 1999 :)
[05:13:57] <White_Flame> showing bugged antialiasing
[05:14:04] <moon-child> the polygons!
[05:14:10] <drakonis> is this the pc version?
[05:14:11] <White_Flame> the 1/4 size bug was for polygons that clipped the side fo the screen
[05:14:13] <White_Flame> yes
[05:14:24] <hayley> You broke it!
[05:14:28] <White_Flame> on an i740
[05:14:28] <drakonis> the model quality is v. nice.
[05:14:47] <White_Flame> anything is better than PS1 polygons ;)
[05:15:11] <White_Flame> but, I really really like antialiasing
[05:15:49] <|3b|> 4s supersampling on the dual-voodoo2 was nice :)
[05:16:09] <White_Flame> right, this basically did 4x without supersampling, as it obviously handled the edges separately
[05:16:26] <White_Flame> and that the aa lines are only 1/2 blends on long edges
[05:17:10] <White_Flame> I did eventually get a voodoo3, but they were strugging to keep up by then
[05:17:48] <White_Flame> the poor customer service rep for the i740 didn't know what antialiasing was: "alien what?"
[05:18:00] <White_Flame> when I tried to report the bug.  That's why I took the screenshots
[05:19:03] <White_Flame> whee https://www.amazon.com/Intel-Express-3D-AGP-i740/dp/B0009LWSZ0
[05:19:43] <White_Flame> "Question:can it work for laptops too?  Answer:Sorry no this is for a desktop. Laptops do not have in general upgradable video"
[05:22:25] <hayley> Hm. Well, a notion of code quality has some sense of prediction to it. We call code higher quality if it would sustain being "good" for users in the future, and this has to do with maintainability of the software.
[05:22:47] <hayley> Although it sorta is, "programming is just about making users happy" just about makes me very unhappy.
[05:24:10] <White_Flame> the programmer is the user of the codebase
[05:26:46] <hayley> Right. I have to maintain that crap.
[05:26:57] * |3b| wonders if software that coincidentally killed all of its unsatisfied users would be considered high-quality
[05:27:08] <White_Flame> "coincidentally"
[05:27:37] <moon-child> 0/0 = whatever you like
[05:27:42] <moon-child> so--sure, why not!
[05:28:16] <hayley> omg it's like that Henry Baker letter
[05:29:30] <White_Flame> hayley: also regarding that original quote, that "satisfied with" is temporal.  If the codebase is unmaintainable, the users will quickly become unsatisfied
[05:29:43] <hayley> That is what I said, yes.
[05:30:02] <White_Flame> hmm, yeah I guess so
[05:32:40] <pl> White_Flame: the codebase might be unmaintainable and the users satisified still
[05:33:35] <pl> example - Lotus Agenda
[05:35:50] <pl> ... checking if I remembered the name right got me on a rabbit hole chase that finally reminded me of that time Sun's CEO personally threatened the very existence of Apple's Keynote
[05:40:12] <pl> (in response to Apple threatening Sun's looking glass demo
[05:40:14] <pl> )
[05:55:05] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:57:16] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[05:57:32] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[06:02:47] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[06:06:29] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[06:08:19] *** Joins: taeaad_ (~taeaad@user/taeaad)
[06:08:32] *** Quits: taeaad (~taeaad@user/taeaad) (Ping timeout: 240 seconds)
[06:16:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[06:18:53] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[06:26:37] *** Quits: Catie (~user@user/catie) (Quit: good night my friends)
[07:04:44] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[07:06:06] <moon-child> hmm, can you prioritise hyperthreads?
[07:06:53] <moon-child> actually I guess there's a power-management wait thing for spinlocks.  That works
[07:07:07] <moon-child> I wanna see what happens if I let concurrent gc peg hyperthread 1 while app runs on hyperthread 0
[07:07:13] <moon-child> that would solve contention issues
[07:07:30] <moon-child> still goes to pot if you have multiple threads though
[07:36:29] <hayley> Your cache goes to poop still.
[07:41:03] <hayley> https://www.youtube.com/watch?v=TnaQGjwYrzM
[07:41:04] -ixelp- The Venus In Furs - Baby's On Fire - YouTube
[07:41:06] *** Joins: luis9 (~luis@lisp/luis)
[07:43:10] *** Quits: luis (~luis@lisp/luis) (Ping timeout: 250 seconds)
[07:43:10] *** luis9 is now known as luis
[07:54:52] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:10:54] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 250 seconds)
[08:13:01] *** Joins: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com)
[08:13:19] *** Joins: user__ (~semz@user/semz)
[08:15:40] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[08:27:12] <moon-child> omg
[08:27:22] <moon-child> I always complain about how dumb 'html5 as a living standard' is
[08:27:26] <moon-child> well I actually got bit by it
[08:27:41] <moon-child> somebody quoted a section of the spec and linked to it.  Follow the link ... section they quoted is nowhere to be found
[08:29:22] *** Joins: epony (epony@user/epony)
[08:37:26] *** Quits: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com) (Ping timeout: 256 seconds)
[08:55:29] *** user__ is now known as semz
[08:59:40] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[09:28:14] *** Joins: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:28:49] *** Joins: EsoAlgo3 (~EsoAlgo@152.70.142.52)
[09:37:08] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[09:37:08] *** Quits: taeaad_ (~taeaad@user/taeaad) (*.net *.split)
[09:37:08] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (*.net *.split)
[09:37:09] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:37:09] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[09:37:09] *** Quits: phantomics (~phantomic@71-218-126-185.hlrn.qwest.net) (*.net *.split)
[09:37:09] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (*.net *.split)
[09:37:10] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[09:38:37] *** EsoAlgo3 is now known as EsoAlgo
[09:42:51] *** Joins: taeaad_ (~taeaad@user/taeaad)
[09:42:51] *** Joins: mzan (~quassel@mail.asterisell.com)
[09:42:51] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[09:42:51] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[10:26:17] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:27:39] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[10:36:42] <ck_> what was it supposedly about?
[10:37:29] <moon-child> subheadings
[10:37:55] <moon-child> I mean--I have no doubt it was originally about that, and then they changed it
[10:38:02] <moon-child> but this means it's impossible to talk about html5
[10:39:06] <ck_> maybe it's html5+sha256
[10:39:14] <ck_> .. that you're conforming to
[10:39:35] <ck_> nice. "There are now 2^256 competing standards"
[10:39:46] <moon-child> hahaha
[10:39:49] <epony> it would be nicer to have html256 and sha5 instead
[10:40:04] <epony> -color
[10:40:17] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 252 seconds)
[10:41:03] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[10:49:53] * hayley notes that one-more-re-nightmare is about 3.2% the size of Rust regex, and has 3.4% the stars.
[10:49:59] <hayley> If I write more code, I get more stars?
[10:50:01] <semz> moon-child: here is your spec bro https://github.com/chromium/chromium
[10:50:02] -ixelp- GitHub - chromium/chromium: The official GitHub mirror of the Chromium source
[10:51:31] <moon-child> git push --force
[11:01:59] <hayley> (values (/ 2149.0 65020) (/ 75 2.2e3))
[11:02:06] <hayley> Too close to not be related, IMO
[11:02:33] <moon-child> the plural of anecdote is not data
[11:02:37] <moon-child> let alone the singular
[11:05:54] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[11:11:59] <hayley> I did maths for computing 2 I'm pretty sure that's how it works
[11:12:31] <edgar-rft> let's start filling the internet with anecdata :-)
[11:18:50] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (Ping timeout: 268 seconds)
[11:25:36] <pjb>  /clear
[11:29:46] <hayley> pjb { color: transparent }
[11:30:44] <moon-child> .titanic { float: none }
[11:32:30] * hayley reads https://blog.trailofbits.com/2022/01/26/part-1-the-life-of-an-optimization-barrier/ and already is stumped on the second code block.
[11:32:43] <hayley> "Here, we make no choices based on the choice secret value, which means that there is only one path through the function" How do I know LLVM _won't_ rewrite to something branch-y?
[11:33:21] <hayley> conditional_select could also CMOV on x86.
[11:34:13] <moon-child> hm?  I only skimmed it, but it closes with 'It is clear that fighting LLVM by inserting optimization barriers is not a great way to provide constant-time guarantees', which seems reasonable
[11:34:54] <hayley> "A carefully written constant-time implementation like the one above could still be optimized down to a branching instruction by the compiler, which would leak the value of choice!"
[11:35:17] <hayley> I saw "a clever trick" and jumped the gun. nvm
[11:44:56] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[11:45:22] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[11:55:39] <dave0> i write his select function a bit differently   int mux(int zero, int one, int mask) { return ((~mask & zero) | (mask & one)); }
[11:56:52] <dave0> i don't know how volatile works, but it makes sense in my head that if you have to read memory from *a or *b depending on a choice, i would read both and then use mux to pick the value i want
[11:58:46] <dave0> same if it was say a divide which conditionally subtracts or not.. do both and only keep the one you want
[11:58:57] <dave0> it does sound slow though
[11:59:16] <dave0> extra work
[12:00:26] <hayley> https://www.youtube.com/watch?v=JqNcZQ7cVno
[12:00:27] -ixelp- Rock 'N' Roll People In A Disco World - YouTube
[12:04:06] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 245 seconds)
[12:17:08] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[12:23:31] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 250 seconds)
[12:37:57] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[12:41:23] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[12:41:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:aa5f:93ea:3b88:5ff5) (Ping timeout: 240 seconds)
[12:43:50] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0)
[12:45:15] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[12:56:03] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:02:41] *** Joins: kevingal (~quassel@hamilton-nat.nuim.ie)
[13:08:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e75a:d7d8:5f2b:42f0) (Ping timeout: 250 seconds)
[13:10:08] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0)
[13:16:20] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[13:18:52] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[13:21:25] *** Quits: kevingal (~quassel@hamilton-nat.nuim.ie) (Ping timeout: 240 seconds)
[13:21:44] *** Joins: kevingal (~quassel@2001:770:c0:401:c508:4b61:3017:5550)
[13:31:17] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:32:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[13:34:05] *** Joins: shka (~herr@109.231.0.226)
[13:49:10] <selwyn> good morning everyone
[13:49:56] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[13:50:34] <sm2n> selwyn: fix your abbrev
[13:50:48] <sm2n> it should be Good morning everyone!
[13:51:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[13:51:22] <ck_> mood gorning sm2n 
[13:51:53] <sm2n> this is not beach-approved
[13:52:11] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[13:52:27] <ck_> many things are not. Some types of humor are not able to permeate the membrane
[13:53:48] <sm2n> which membrane
[13:54:10] <ck_> the communications membrane that filters intent and meaning
[13:54:16] <White_Flame> mem[brane] = humor;
[13:55:19] <ck_> White_Flame: I love brane theory. mem is an array of nine-dimensional strings, right
[13:55:54] <White_Flame> mem[brane][brane][brane][brane][brane][brane][brane][brane][brane] = humor
[13:56:04] <ck_> perfect
[13:57:38] <sm2n> no, you aren't allowed anything more then static char mem[INT_MAX]
[13:57:49] <ck_> allowed by who?
[13:57:59] <sm2n> the twitter C committee
[13:58:26] * selwyn will never capitalise anything
[13:58:34] <ck_> oh, there's ways around that, you just say ".@clangbot funroll loop"
[13:58:41] <ck_> selwyn: COMMUNIST!!1111~~~
[13:59:13] <sm2n> lol
[14:02:08] <sm2n> in soviet russia, the reader upcases you
[14:03:52] *** Joins: shozo (~user@178.74.52.55)
[14:03:58] <hayley> ck_: hey, that's my job!
[14:13:55] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Read error: Connection reset by peer)
[14:14:01] *** Joins: humasect_ (~humasect@2001:1970:57e0:4100::1ae0)
[14:15:05] <SAL9000> sm2n: {\scshape
[14:15:52] *** humasect_ is now known as humasect
[14:22:14] <hayley> Hm, must be good timing for the students that are about to learn C++ this semester.
[14:22:54] <hayley> Granted most will be normies, and few may have heard of the pkexec hack. But that would lead to some very interesting questions.
[14:24:40] <SAL9000> assert(argc > 0); should be enough, no?
[14:24:47] <SAL9000> unless I misunderstood something
[14:25:53] <hayley> It should be. Or you use a language with bounds checking mandated.
[14:27:44] <hayley> But, come to think of it, the C++ people from my classes in 2020 had their own mental gymnastics to justify teaching it. "Look, if I munge the survey results then C or C++ is on top, and C++ is just more C!"
[14:28:19] <SAL9000> What would they teach instead, though? Java?
[14:29:45] <hayley> I forgot what the course was even about. It felt like a duplicate of the Java class, except with more segfaults and bogus data reads.
[14:30:27] <hayley> Same sort of text file diddling, and learning how to use unordered_set and other inbuilt data structures. My favorite was sorting a linked list to find the smallest element.
[14:30:46] <hayley> "What's O(n^2) between friends?"
[14:31:00] <SAL9000> wait but why would sorting a linked list be O(n^2) though
[14:31:19] <SAL9000> it's wasteful if all you want is the smallest element, sure, but it'd still be O(n log n) at worst, no?
[14:31:27] <dave0> bubble sort
[14:31:33] <hayley> Yeah, good point. Still. O(n lb n) isn't too hot either.
[14:32:04] <hayley> And then writing back the sorted list, when we just want one element...
[14:32:06] <SAL9000> while you can find min with O(n), it's a good 'excuse' to teach sorting I guess
[14:32:38] <dave0> median is harder
[14:32:39] <SAL9000> would make more sense if there was a follow-up (perhaps optional) question of finding the k smallest elements
[14:33:17] <hayley> It teaches doing unnecessary stuff to me. There were legit uses of sorting in the course too, can't we learn std::reduce or something?
[14:34:38] <hayley> Anyways, not really the point. I'd just like to see them justify it, since good people can't seem to write C.
[14:35:30] <SAL9000> std::reduce? no, only goog::mapreduce /s
[14:36:27] <SAL9000> I understand your frustration, though. I'm guessing that you are significantly further along the skill/experience curve than the target audience of the classes in question.
[14:37:57] <hayley> I guess, but I still can't write anything non trivial in C or C++ without a lot of time in gdb. And, again, writing correct code does not seem so easy for even PolKit developers.
[14:40:10] <hayley> So they'd ideally have to come up with really good reasons for why one should even use C++, and then somehow teach how not to write such bugs. But, knowing reality, there will be more survey result munging for the former, and literally nothing for the latter.
[14:42:44] <hayley> And I don't even have to take this class, I got credit for it. But half assing teaching a language in which half assing more often than not goes terribly...
[14:45:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:45:32] <hayley> But worse, there is a non-zero chance that if I brought it up, they'd think I'm from the RESF. At least that happened 1.5 years ago when I picked on a sorta popular (vaporware) project for using C in a hopefully secure environment.
[14:47:04] <hayley> (inb4 Rust is controlled opposition, so that we can still have security researchers for integer overflow bugs)
[14:52:33] <SAL9000> RESF?
[14:52:53] <hayley> Rust Evangelism Strike Force
[14:52:59] <Duuqnd> If I was more into conspiracy theories I would now say something like "C is used to ensure the cybersecurity industry survives"
[14:53:09] <SAL9000> ehhh
[14:53:21] <SAL9000> it's more like it's such a strong incumbent that it's very hard to dislodge?
[14:53:33] <Duuqnd> Well yeah, that's the reality
[14:53:38] <hayley> That's the conspiracy part.
[14:54:41] <hayley> I wouldn't know what to teach instead of C++ then. Ideally nothing, cause they can't fuck that up, but there has to be something. Maybe a functional language just to fry some brains.
[14:56:08] <hayley> #lispcafe's second favorite language is APL, which could also work, but they already teach numpy for statistics class.
[14:56:29] * hayley ducks for cover and watches moon-child very carefully
[14:57:32] <hayley> But if you want a "close to the machine" language, there's enough x86-64+extensions instructions that look like APL operators that it'd be funny.
[14:58:54] <SAL9000> hayley: if we're talking about "first language to teach students", +1 to Python, although it'll spoil them to some extent
[15:00:43] <hayley> They teach Java first, then Python. I'm going through the second year of the course.
[15:01:54] * hayley off to bed, she is exhausted.
[15:09:02] <dave0> byes hayley 
[15:10:49] <SAL9000> o/
[15:14:17] <pl> SAL9000: There are days when I think Rust is C++ Copium
[15:16:15] <SAL9000> heh... given how bloated the C++ standard is these days? I can see it.
[15:25:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[15:37:56] <shka> pl: because it absolutely is
[15:38:45] <shka> there is a lot former C++ programmers in the rust community 
[15:39:39] <humasect> pls recommend best lang for searching for patterns in somewhat organized data (text) 
[15:39:58] <shka> humasect: common lisp xD
[15:39:59] <humasect> i was looking at prolog
[15:40:01] <humasect> hm =)
[15:43:11] <shka> but i am biased
[15:43:30] <shka> if something can be done with CL, it should be done with CL
[15:47:22] *** Joins: notzmv (~zmv@user/notzmv)
[15:53:02] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:54:04] <selwyn> sigh
[15:59:35] <ck_> what's up
[16:00:01] <SAL9000> humasect: perl and python come to mind
[16:00:18] <SAL9000> (I'm biased too, though, perl5 was my first programming language)
[16:04:17] <selwyn> finding relevant references is hard
[16:04:24] <selwyn> though i have recently succeeded
[16:05:13] *** Parts: amazigh (~amirouche@user/amirouche) (WeeChat 2.8)
[16:10:45] <selwyn> i wonder if we discuss rust more than cl on here
[16:12:54] <shka> i blame hayley and her obsession 
[16:16:10] <pl> shka: Rust is literally done by C++ people, and it takes one of their worse takes with it (not paying for what you don't use)
[16:16:34] <shka> pl: yeah, that's what i am keep saying
[16:16:49] <shka> rust is very much like c++
[16:16:52] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[16:22:02] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:29:53] <semz> what I don't understand is why they kept the syntax of C++
[16:30:36] <shka> semz: because it is C++ copium
[16:30:40] <shka> as pl said
[16:31:28] <semz> are there C++ people who enjoy the mess of notation?
[16:32:19] <semz> maybe that'd explain some parts of the stepanov book
[16:34:24] <pl> there's a certain aesthetic experience to throwing lots and lots of sigils, yes
[16:36:54] <shka> i shit you not, i had a coworker that insisted that C++ should have comma operator
[16:37:25] <shka> C++ programmers love the operator gore
[16:37:29] <shka> i can tell you that
[16:38:58] <pjb> shka: but C++ HAS a comma operator!
[16:39:22] <shka> pjb: by that he meant: option to overload the comma
[16:40:20] <pjb> Yes, this is missing.
[16:41:21] <selwyn> shka: wtf
[16:41:29] <selwyn> did he mention what he wanted to do with that functionality?
[16:41:41] <shka> yes, but i can't remember the details
[16:41:44] <semz> "to overload the comma" oh god why
[16:41:55] <semz> monads?
[16:42:10] <shka> semz: dunno, it all boiled down to a cute syntax
[16:42:15] <shka> who cares about that
[16:42:24] <shka> also, to overload .
[16:42:46] <selwyn> one thing i found weird about lisp at first is that we have the option to modify syntax using readtables
[16:42:53] <shka> yes
[16:42:53] <selwyn> yet it is comparatively rarely done
[16:43:03] <shka> exactly
[16:43:10] <selwyn> i suppose it is antisocial to simply redefine syntax
[16:43:19] <selwyn> to excess
[16:43:27] <pjb> semz: already, in C, comma means several different things: int f(int a,int b,int c); it means make a list of parameters.  f(1,2,3); it means: make a list of argument (push argument on the stack);  in f((g(),h(),1)) it means evaluate in sequence.
[16:43:44] <pjb> semz: so it's reasonable to ask to be able to add meanings.
[16:43:54] <shka> that's why i am now rephrasing "ya all need jesus" to "ya all need lisp"
[16:45:19] <pjb> semz:  in lisp, it's easy, no comma, the operator is indicated by a prefix symbol, possibly in a super list: (defun f (a b c) …)  (f 1 2 3)  (f (progn (g) (h) 1))
[16:45:53] <pjb> semz: so you can define a new comma at any time, by defining a new operator: (f (in-parallel (f) (g) 1)) etc.
[16:46:18] <semz> I know
[16:56:50] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:56:58] <selwyn> although it looks old-fashioned, lisp array notation has some advantages over the alternatives
[16:57:09] <selwyn> i don't see the gain associated with using square brackets
[16:59:37] <shka> the cool thing about lisp
[17:00:04] <shka> is that it has just functions
[17:01:56] <pjb> and conses, and numbers, and structures, and arrays, and pathnames, and random states, etc.
[17:01:57] <ck_> "lol roasted hashtag open-parenthesis"
[17:08:09] <pl> shka: I'm pretty sure you can overload comma
[17:08:14] <pl> at least on some C++ compilers
[17:08:40] <shka> how would that work for, well, function calls?
[17:08:55] <shka> pl: yup, those are data types
[17:09:02] <shka> pjb: ^^
[17:09:08] <shka> pjb: which are not functions
[17:09:13] <shka> most of the time anyway
[17:09:38] <shka> pl: foo(bar, baz) what happens if bar has overloaded comma for baz?
[17:09:42] <pl> ah yes, cppreference shows overloadable comma
[17:09:49] <shka> ... what?
[17:10:06] <shka> shit
[17:10:18] <shka> well, operator gore
[17:10:35] <shka> because C++ is not difficult enough to read as it is
[17:10:47] <selwyn> 'baz' is a traditional football hooligan name
[17:10:50] <pl> op - any of the following operators: + - * / % ^ & | ~ ! = < > += -= *= /= %= ^= &= |= << >> >>= <<= == != <= >= && || ++ -- , ->* -> () [] and since C++20, <=>
[17:10:59] <pl> notice the comma
[17:11:29] <pl> shka: I thought so because I recalled a friend mentioning that in his C++ days he once DSLed SQL into C++ by using operator,()
[17:11:33] <shka> fuck this shit
[17:12:13] <selwyn> trying to figure out if <=> is useful
[17:12:36] <pl> https://en.cppreference.com/w/cpp/language/operators
[17:12:37] -ixelp- operator overloading - cppreference.com
[17:16:26] <pl> jfc
[17:17:00] <pl> <=> is essentially an operator that does stdlib qsort result, i.e. the classic C sorting function output type
[17:19:15] <selwyn> it returns a function? or another operator
[17:19:57] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 240 seconds)
[17:20:35] <selwyn> anyway, who cares
[17:21:39] <ck_> selwyn: https://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison
[17:21:40] -ixelp- Comparison operators - cppreference.com
[17:21:48] <ck_> "you asked so I gotta tell you"   (which movie?)
[17:22:21] <selwyn> idk
[17:22:51] <ck_> Heat (1995)
[17:23:07] <selwyn> must watch that
[17:23:37] <selwyn> what do you guys think about the arm takeover going to shit
[17:24:09] <shka> is it going to shit?
[17:24:29] <shka> i thought that the deal is done
[17:24:50] <selwyn> not what i've read
[17:25:11] <ck_> latest I've heard was "Nvidia backing out", yesterday (?)
[17:25:26] <shka> interesting
[17:26:15] <selwyn> > Nvidia would lose its “deposit” of a $1.25bn break fee and $750m licence consideration paid to SoftBank
[17:26:17] <selwyn> lol
[17:33:22] *** Quits: kevingal (~quassel@2001:770:c0:401:c508:4b61:3017:5550) (Ping timeout: 250 seconds)
[17:35:21] *** Joins: kevingal (~quassel@149.157.101.196)
[17:41:38] <ck_> https://hn.algolia.com/?q=nvidia+arm top two results: "Nvidia to Acquire Arm for $40B (1 year ago)",  "Nvidia prepares to abandon $40B Arm bid (3 days ago)"
[17:41:39] -ixelp- HN Search powered by Algolia
[17:46:41] <selwyn> the takeover was fairly big news when it was announced
[17:46:45] <selwyn> but not now
[17:57:36] <shka> why the dealing is failing anyway?
[17:59:59] <shka> oh
[18:00:03] <shka> regulatory 
[18:00:05] <shka> good
[18:00:54] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:03:53] <selwyn> why are eu regulators involved
[18:04:06] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[18:04:27] <shka> you tell me
[18:04:29] *** Joins: kevingal (~quassel@2001:770:c0:401:18ad:1fde:a212:a601)
[18:04:45] <selwyn> um
[18:04:51] <selwyn> brussels imperialism again?
[18:08:12] <sm2n> rust is amazing because it takes inspiration from c++ (unreadable operator overloading soup) and haskell (unreadable operator overloading soup) and somehow came out with slightly less soup in practice even though it does support operator overloading
[18:08:46] <selwyn> or is it that nvidia has to comply with eu antitrust rules if it wants to operate there
[18:19:40] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[18:20:33] <shka> selwyn: dunno man, from the article i've read i came to impression that it is about UK antitrust actually 
[18:32:44] *** Quits: kevingal (~quassel@2001:770:c0:401:18ad:1fde:a212:a601) (Ping timeout: 252 seconds)
[18:33:11] *** Joins: kevingal (~quassel@149.157.101.196)
[18:37:32] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:42:54] <selwyn> gnuxie: https://www.youtube.com/watch?v=HMMNFanvvxY
[18:42:54] -ixelp- Met police demand Sue Gray’s partygate report is watered down with ‘minimal reference’ to crimes - YouTube
[18:43:45] <Gnuxie> such bs 
[18:43:55] <Gnuxie> better be leaked 
[18:44:23] <selwyn> as i said, there are ways to deal with the report, like delaying it or ensuring that information is omitted
[18:44:29] <selwyn> have to wonder whether the police are in on it
[18:44:53] <Gnuxie> such utter shit 
[18:45:12] <Gnuxie> that or they arest Boris that'd be good too, but this is just bs 
[18:46:46] <selwyn> the met is not a very transparent organisation
[18:48:48] <ck_> met.uk.com says "MET's laboratory services are available in the UK and France. There is no need to worry about Brexit."
[18:48:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:49:27] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[18:49:52] <ck_> so what do you two foresee for this year? New UK government?
[18:50:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:50:41] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:51:33] *** Joins: jeosol (~jeosol@user/jeosol)
[18:54:13] <selwyn> um
[18:54:32] <selwyn> i actually think the government will survive, possibly for a whole year
[18:55:09] <selwyn> it's a minority opinion and i am often wrong about these things though
[18:55:21] <selwyn> certainly no election this year
[18:59:52] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:00:08] <ck_> so the worst outcome personally for bj would be a vote of no confidence (or whatever the equivalent is in your laws) and a replacement pm?
[19:00:30] <ck_> or possibly resignation, that's I guess more the teacup way to do things
[19:16:26] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[19:17:46] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 256 seconds)
[19:17:54] *** Joins: kevingal (~quassel@2001:770:c0:401:b5f1:3b1a:48a5:75f)
[19:21:17] *** Joins: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr)
[19:21:23] *** Quits: Inline__ (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[19:27:38] <ck_> new startup idea: f a c e s. we keep some on backlog so you can keep going should you lose yours.
[19:30:14] <selwyn> hard to say what the worst personal outcome for him is
[19:30:37] <selwyn> i don't find it easy to understand him
[19:31:09] <selwyn> the man got essentially what he wanted his whole life up til now but he doesn't seem happy with it
[19:31:31] <selwyn> in a way which e.g. trump did
[19:31:49] <selwyn> by many accounts, he doesn't actually like being prime minister and laments the poor salary
[19:32:10] <cyberbanjo> "A customer can have any face she wants.  Every face is unique and lasts a lifetime."
[19:32:31] <selwyn> yet he is extremely committed to not resigning, and is prepared to fight battles to keep the job
[19:33:11] <selwyn> iiuc the tory party has ways of disposing him without him resigning
[19:33:19] <selwyn> am not that familiar with their procedures though
[19:38:49] <selwyn> occurs to me that metropolitan police officers ought to be called 'metrocops'
[19:38:54] <selwyn> gnuxie: pick up that can
[19:40:03] <Gnuxie> lwl
[20:05:35] *** Joins: treflip (~user@user/treflip)
[20:26:25] <shka> https://discoelysium.fandom.com/wiki/Hobocop
[20:26:26] -ixelp- Hobocop - Disco Elysium Wiki
[20:32:12] *** Joins: jeosol (~jeosol@user/jeosol)
[20:34:23] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[20:34:28] <nij-> o/
[20:36:25] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:38:51] <selwyn> \o
[20:48:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[20:49:25] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[20:49:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:56:38] <ck_> ~o~
[20:56:54] * nij- is enjoying his immersion in guix
[20:57:20] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[20:57:31] <gilberth> \õ/
[21:03:34] <ck_> ... but then, suddenly ...
[21:09:19] *** Parts: djuber (~user@65.79.128.64) (ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[21:09:31] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[21:09:51] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[21:25:55] *** Joins: djuber (~user@65.79.128.64)
[21:29:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[21:48:37] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[21:51:46] *** Joins: treflip (~user@user/treflip)
[22:16:49] *** Quits: kevingal (~quassel@2001:770:c0:401:b5f1:3b1a:48a5:75f) (Remote host closed the connection)
[22:22:37] <gilberth> Have you ever notices that with browsers, the default font size for TT is 13px, while the default for normal text is 16px? This is funny, as I always picked the "adobe-courier" X11 font at 14 pixels as my normal size and "adobe-helvetica" or "adobe-times" at 17 pixels for normal size. (those bitmap fonts only come in 11, 14, 17, 20, 25, 34 pixels size). You get at the very same numbers, when you also consider that 72pt=96px with CSS.
[22:23:13] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[22:23:17] *** Joins: Alfr (~Alfr@user/alfr)
[22:24:08] <gilberth> So I wonder if these CSS defaults come from X11. And: With those adobe bitmap fonts the perceived sizes of 14 pixels with 17 pixels match better that what I get in firefox or webkit with 13px and 16px.
[22:25:14] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 256 seconds)
[22:25:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[22:25:26] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[22:25:27] *** Joins: aeth (~aeth@user/aeth)
[22:25:37] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[22:25:41] *** Quits: APic (apic@apic.name) (Ping timeout: 256 seconds)
[22:25:41] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 256 seconds)
[22:25:50] <gilberth> Anyhow, my hunch is that what I did, namely picking the Courier font at one size smaller than Helvetica or Times always was common wisdom.
[22:26:00] *** Joins: APic (apic@apic.name)
[22:26:25] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[22:35:14] <clothespin_> good morning
[22:35:41] <gilberth> Hello_ clothespin_!
[22:35:51] <clothespin_> hi gilberth
[22:36:32] <selwyn> o/
[22:36:37] <gilberth> clothespin_: I am having fun with fonts, how are you?
[22:36:56] <clothespin_> i just woke up, playing with format strings
[22:37:57] <gilberth> Oh, format strings look almost like line noise, but are pretty powerful. I always wanted a FORMAT cheat sheet.
[22:38:27] <clothespin_> yeah we need a format string cheat sheet
[22:38:34] <gilberth> And you get funny smileys there like ~@:> or fish, if you wish.
[22:39:30] <clothespin_> i'm trying to make imgui work like a lisp gui
[22:39:50] <gilberth> What is imgui?
[22:40:14] <moon-child> immediate mode gui
[22:40:19] <clothespin_> actually 'dear imgui'. it's an immediate mode gui system
[22:40:40] <gilberth> What is an immediate mode?
[22:40:52] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[22:41:00] <clothespin_> it carries very little state
[22:41:14] <moon-child> clothespin_: no, it carries a ton of state, it just hides it from you
[22:41:28] <moon-child> gilberth: https://en.wikipedia.org/wiki/Immediate_mode_GUI
[22:41:38] <clothespin_> that's why it can be a bitch at times
[22:42:47] <clothespin_> there were few gui's for vulkan when i started this project
[22:43:18] <gilberth> That wiki page doesn't answer my question. It says "an immediate mode GUI uses immediate mode graphics". Yeah, what is immediate mode then?
[22:44:00] <clothespin_> it runs a render pass and either a button returns t or f depending on if it were pressed
[22:44:58] <clothespin_> if you don't call a function for a widget on a render pass, it ceases to appear
[22:45:35] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (#lispcafe)
[22:46:09] <gilberth> Now what. Do I redraw the button actively on a button press, or is some redisplay function invoked?
[22:46:22] <clothespin_> you redraw
[22:46:42] <gilberth> So I need to keep track of all state for myself?
[22:46:47] <clothespin_> mostly
[22:47:13] <gilberth> And always remember what needs update manually, which guarantees inconsistent display?
[22:47:49] <clothespin_> just call the same ui functions each iteration of the render loop
[22:48:10] <gilberth> You contradict yourself.
[22:48:24] <clothespin_> put the buttons in (when (button "foo") (do-something))
[22:48:51] <gilberth> I mean, either a button press handler would say "Hey, I am dirty, I need redraw!" or it says "Hugh? I need to clear that and that area and draw that and that anew."
[22:49:21] <clothespin_> the next render loop it will redraw, it wil just return nil instead of t
[22:49:50] <clothespin_> you don't clear anything, except to say the entire framebuffer get rebuilt
[22:49:50] <gilberth> Oh. That's CLIM.
[22:50:05] <ck_> https://www.ditl.org/Images/H/Hugh.jpg
[22:50:11] <gilberth> Entire? Poor. No caching?
[22:50:48] <clothespin_> it seems to run a 60 hertz
[22:50:49] <gilberth> ck_: Is that the guy called Hugh?
[22:51:23] <gilberth> clothespin_: Sure, that's your screen refresh rate, I guess.
[22:51:55] <ck_> It is the guy called Hugh, and it sounds like "hue". You seem to use it in place of a german "Huch". Thought you'd like to know this
[22:52:05] <gilberth> But, I don't redraw the entire frame, only those parts that changed.
[22:52:17] <ck_> immediate mode gui code doesn't do that
[22:52:25] <clothespin_> that's a difference between x and vulkan/opengl
[22:52:52] <gilberth> ck_: Hmm. I read "hugh?!" quite often in English text.
[22:53:40] <ck_> that's interesting. can you show me some examples please?
[22:53:58] <gilberth> clothespin_: There is a difference in your WHEN above called with 60Hz and a display list which resulted from that WHEN being rastered at 60Hz.
[22:54:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[22:54:45] <clothespin_> mouseclicks are handled separately from display lists
[22:54:56] <gilberth> ck_: Not right now, but I'll keep an eye on it.
[22:55:17] <ck_> gilberth: thanks
[22:56:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:56:58] <gilberth> ck_: I mean I must have gotten that from somewhere.
[22:57:09] <ck_> here's a blog post I remembered, loosely related to immediate mode gui, maybe you're interested https://caseymuratori.com/blog_0015
[22:57:10] -ixelp- Semantic Compression
[23:06:12] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[23:18:33] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Quit: WeeChat 3.1)
[23:18:47] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[23:18:54] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Client Quit)
[23:19:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:35:08] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[23:41:59] <moon-child> gilberth: most real immediate-mode gui implementations do cache heavily, but it is not explicitly represented in the api
[23:43:39] *** Joins: kevingal (~quassel@37.228.202.92)
[23:43:43] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
