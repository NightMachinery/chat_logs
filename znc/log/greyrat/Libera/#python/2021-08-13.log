[00:00:09] *** Quits: nergar (~Nergar@177.225.152.13) (Ping timeout: 248 seconds)
[00:00:16] <SnoopJ> ah, yes, well spotted jinsun
[00:00:32] <jinsun> the 3rd argument is http
[00:00:34] <SnoopJ> dakotakae, you're passing your Credentials instance positionally in what would be the `http` arg
[00:01:07] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[00:01:09] <nedbat> is there way to find out how many threads my current process has?
[00:01:10] <piscvau> grym : in a terminal window, venv is not activated and I sudo /path/to/your/venv/bin/python returns command not found!.....
[00:01:46] <dakotakae> Ooops, sorry: https://pastebin.com/tYqvs5jq
[00:01:48] <grym> piscvau: are you using the literal path "/path/to/your/venv" ?
[00:02:02] <zware> piscvau: You do need to replace `/path/to/your...` with the actual path to your venv/bin/python :)
[00:02:07] <grym> piscvau: (you are meant to substitute the full path to _your_ venv, i don't know where it is)
[00:02:15] <dakotakae> I'm on my personal laptop for Hexchat, development/pasting is being done on my work MacBook
[00:02:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:02:33] <SnoopJ> dakotakae, did you see jinsun's remark? It corresponds exactly with the error seen in your traceback
[00:02:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:03:04] <zware> nedbat: `threading.active_count()`?
[00:03:23] <dakotakae> Yep, thanks jinsun !
[00:03:33] <dakotakae> That was it, good catch. Completely missed it.
[00:03:50] <nedbat> zware: thanks, let me try it. I'm not sure if the threads I'm interested in are Thread()s
[00:05:56] <dakotakae> Thank you both so much, now I can move on from there. I did "credentials=creds" in the other builds, forgot it in that one.
[00:06:05] <zware> nedbat: AFAICT you'd have to dip into C to get non-Thread threads, and that's well beyond me :)
[00:07:20] *** Quits: dakotakae (~dakotakae@2601:680:cb80:a6d0:498f:4d34:9368:cfd6) (Quit: Leaving)
[00:07:31] *** Joins: mci64 (~mci64@185.242.190.95)
[00:07:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[00:07:38] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[00:08:12] <zware> nedbat: Though it looks like you could maybe get other Python threads that aren't Threads via `_thread._count()`, though it recommends `threading.enumerate`
[00:08:20] *** Parts: Emil (emil@emil.fi) ()
[00:08:29] *** Joins: wyclif (~wyclif@user/wyclif)
[00:08:41] <nedbat> zware: active_count works.  I wanted to see what concurrent.futures.ThreadPoolExecutor was doing.
[00:09:12] *** Quits: nathanjell (~Nathan@64.141.52.164) (Quit: Leaving)
[00:09:14] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[00:10:24] *** Quits: OverCoder (~OverCoder@user/overcoder) (Read error: Connection reset by peer)
[00:10:38] <piscvau> grym. OK i need to start from the top /home/....... but python3.8 in my venv is a directory!....
[00:11:22] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[00:11:31] <grym> piscvau: if i have a venv in /home/grym/projects/myvenv, then its python is at /home/grym/projects/myvenv/bin/python
[00:12:06] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 256 seconds)
[00:12:36] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[00:13:13] <rendar> piscvau: it's normal, all the python system gets copied into your venv directory
[00:13:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[00:13:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:14:56] *** Joins: mci64 (~mci64@185.242.190.95)
[00:15:23] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:16:09] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 248 seconds)
[00:16:19] *** Joins: SilverFox (~SilverFox@64.223.223.162)
[00:17:08] <SilverFox> I'm working on a project and when i think about it linerally it dosent.. really work, i want to have like callbacks from user input and processes that run and remember things and can timeout or error out and report back that sorta thing
[00:17:22] <SilverFox> i think, that kinda defines a state machine? but ive never really tried making a state machine
[00:17:25] <SilverFox> or anything like that
[00:17:27] <SilverFox> Where do i start?
[00:18:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[00:19:28] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 256 seconds)
[00:19:31] *** Joins: wyclif (~wyclif@user/wyclif)
[00:19:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[00:20:48] <piscvau> no luck sudo /home/......./bin/python -m mymodule returns no module named pymysql
[00:21:10] *** Joins: gothicserpent (~gothicser@2605:e000:7fc0:62:ac91:6611:a2ee:3733)
[00:21:15] <piscvau> yet is it into myvenv under sitepackages
[00:21:38] <synic> If I am trying to port some sync code to async code, and I have a running event loop already, is there a way to "await" a coroutine from a synchronous function? This is for testing, so it doesn't actually have to be async, it can block
[00:22:33] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 248 seconds)
[00:22:56] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:23:16] <piscvau> rendar. I do not understand what is normal!.....
[00:23:19] *** Quits: magla (~gelignite@55d4ac4e.access.ecotel.net) (Quit: Stay safe!)
[00:23:27] *** Quits: mci64 (~mci64@185.242.190.95) (Quit: Connection closed)
[00:23:28] <rendar> piscvau: you will, keep learning
[00:23:34] <fdee> it's just different semantics
[00:23:37] *** Quits: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[00:23:38] <zware> synic: Possibly `asyncio.get_event_loop().run_until_complete(...)`
[00:24:05] *** Joins: mci64 (~mci64@185.242.190.95)
[00:24:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:24:54] <synic> zware: run_until_complete only works if there is not already a running loop, unfortunately
[00:25:02] *** Joins: wyclif (~wyclif@user/wyclif)
[00:25:59] <synic> I'm basically trying to override `_create` in a factory boy Factory to run some async code. The `_create` function has to stay synchronous, because the rest of the factory-boy system doesn't know about async, but the `_create` function needs to somehow run async code to work with the async ORM I am using
[00:26:18] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[00:26:19] <zware> synic: Pretty much need to move the whole call stack to async, or reimplement a bit of an event loop, then.
[00:26:55] <zware> synic: Or put the sync stuff on a separate thread
[00:27:26] <zware> synic: Though there may well be other options that I'm not aware of, particularly outside of `asyncio` :)
[00:27:46] *** Joins: matsaman (~matsaman@user/matsaman)
[00:27:58] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:28:27] *** Joins: morteza24 (~morteza24@37.98.68.187)
[00:30:00] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:30:31] *** Joins: wyclif (~wyclif@user/wyclif)
[00:30:43] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[00:30:48] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 256 seconds)
[00:31:08] *** Joins: srhm (~ascii@user/srhm)
[00:31:27] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[00:32:33] *** Joins: audiophile_ (~audiophil@user/audiophile)
[00:32:33] *** Quits: audiophile_ (~audiophil@user/audiophile) (Client Quit)
[00:33:09] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:34:00] *** Joins: daevski3 (~daevski@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[00:34:14] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Quit: Leaving...)
[00:35:02] *** Joins: sazawal (~sazawal@122.161.170.192)
[00:35:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:35:36] *** Joins: nergar (~Nergar@177.225.152.13)
[00:35:52] <foo> this[::1] - can someone explain what ::1 does?
[00:35:57] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[00:36:03] *** Joins: wyclif (~wyclif@user/wyclif)
[00:36:10] <foo> Whoops, it's actually: lots[::-1]
[00:36:53] <SnoopJ> foo, that reverses builtin sequence types
[00:37:00] *** Joins: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at)
[00:37:02] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[00:37:29] *** Quits: daevski (~daevski@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 248 seconds)
[00:37:29] *** daevski3 is now known as daevski
[00:38:13] <nedbat> fdee: sorry, what is different semantics?  (if you use people's nicks, the conversation will be easier to follow)
[00:38:51] *** Quits: gothicserpent (~gothicser@2605:e000:7fc0:62:ac91:6611:a2ee:3733) (Quit: Leaving)
[00:39:04] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[00:39:50] *** Joins: lethu (~lethu@user/lethu)
[00:39:55] *** Quits: oriba (~oriba@dynamic-089-014-170-143.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:39:56] <matsaman> https://docs.python.org/3/library/functions.html#slice
[00:40:23] <sazawal> Hi all. I want to make a python app to communicate between my remote server and local client. So, the server is trustworthy, but I want to protect the server from random client attacks. For that I need some kind of Client authentication. I followed this using Twisted, https://twistedmatrix.com/documents/current/core/howto/ssl.html . Can someone explain me in the 'Client Authentication' of this page, why both client and server using the same server.pem
[00:40:23] <sazawal> and public.pem files? Shouldn't they use different key files as private and public key?
[00:41:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:41:32] *** Joins: wyclif (~wyclif@user/wyclif)
[00:41:35] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 258 seconds)
[00:42:08] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:43:30] *** Quits: fdee (~fdee@178.49.152.151) (Quit: Client closed)
[00:43:43] <foo> SnoopJ: thanks, I just did a TIAS and can see what it does.
[00:45:39] <SnoopJ> foo, the general syntax is `iterable[start:stop:step]` where each item is optional (and will be None if you omit it). ::-1 is a special case start=None, stop=None, step=-1 and the builtin types understand that this means "start at the end"
[00:46:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:46:34] <foo> SnoopJ: super appreciate that, I didn't realize there was a step, heh.
[00:46:43] <zware> sazawal: Are you looking at https://twistedmatrix.com/documents/current/core/howto/ssl.html#tls-server-with-client-authentication-via-client-certificate-verification or a different section?
[00:46:44] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[00:46:53] <foo> SnoopJ: ah, just tested with: a[::2] - huh, cool.
[00:46:53] *** Quits: rememberYou (~someone@user/rememberyou) (Read error: Connection reset by peer)
[00:47:02] *** Joins: wyclif (~wyclif@user/wyclif)
[00:47:04] <synic> zware: maybe this helps explain what I mean: https://stackoverflow.com/questions/68763671/running-async-code-from-a-sync-function-with-an-event-loop-already-running
[00:47:16] *** Quits: stdout (~stdout@50.115.255.72) (Quit: Leaving)
[00:47:31] <sazawal> zware, Yes this one exactly
[00:47:50] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[00:48:01] <SnoopJ> foo, there's a bunch of gory detail on this page: https://docs.python.org/3/reference/datamodel.html (look for the subsection "Sequences")
[00:48:02] <godofsea> How do I loop through lines in a string. The string has \n in it. when I do for line in some_string: print(line)   It just prints each character, which is expected but Not sure how I will print each "line"
[00:48:05] *** Joins: stdout (~stdout@50.115.255.72)
[00:48:18] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:48:19] <SnoopJ> godofsea, `for line in yourstring.splitlines():`
[00:48:28] <godofsea> :-)
[00:48:30] *** Quits: rndm1 (~rndm@143.59.164.79) (Ping timeout: 268 seconds)
[00:48:31] <godofsea> Thanks
[00:49:22] <zware> sazawal: I'm not terribly familiar with Twisted, but that example doesn't look particularly straightforward to me either :).  My suggestion would be to have a self-signed cert to act as a CA whose public key is shared between client and server, and separate certs signed by your CA cert for each server and client
[00:49:23] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:50:00] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[00:50:01] <zware> sazawal: Then you just ensure that the other side is using a cert signed by your CA on both sides, and things should work as you want.  I don't know how to translate that into Twisted, though :(
[00:50:41] *** Joins: qlixed (~qlixed@152.170.36.244)
[00:50:45] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[00:50:53] *** Quits: hyper_dave (~hyper_dav@197.156.77.243) (Read error: No route to host)
[00:50:54] <sazawal> zware, Well yes there are many ways to generate the keys and certificates, I did that easily with openssl. I am just not sure how to put it all together
[00:51:29] *** Joins: hyper_dave (~hyper_dav@197.156.77.243)
[00:51:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[00:51:47] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:51:58] *** Joins: srhm (~ascii@user/srhm)
[00:52:12] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[00:52:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:52:16] *** Quits: rendar (~rendar@user/rendar) ()
[00:52:33] *** Joins: wyclif (~wyclif@user/wyclif)
[00:52:40] <sazawal> zware, Okay for the start. I should first generate private key and a self-signed certificate for the private key. And a public key corresponding to that private key. So far it's good. Now what files should be put on the server side and what should be on the client side?
[00:52:48] *** Joins: neilthereildeil (~neilthere@70.21.11.5)
[00:52:54] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:53:05] <jinsun> synic: maybe this is what you want https://stackoverflow.com/a/55170521/2765068
[00:53:43] *** Joins: sharpertool (sid80151@id-80151.stonehaven.irccloud.com)
[00:54:34] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[00:54:52] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[00:55:21] <synic> jinsun: looks like it might be! I'll give it a roll
[00:56:15] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[00:56:48] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[00:57:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:57:30] *** Quits: baroobob (~jwbwater@98.215.243.94) (Ping timeout: 240 seconds)
[00:57:35] *** Quits: nergar (~Nergar@177.225.152.13) (Quit: Leaving)
[00:57:48] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[00:58:03] *** Joins: wyclif (~wyclif@user/wyclif)
[00:58:24] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[01:00:03] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:00:05] <zware> sazawal: So, you should actually wind up with three sets of keys: a self-signed cert (public) and key (private), and a cert signed by the self-signed cert (but not itself self-signed) and its key (private) for the server, and another signed cert for the client.  Server gets the public self-signed cert for verification of the client and its own cert/key pair for authentication to the client; the client gets the same (but its own cert/key pair)
[01:01:29] *** Quits: arti (~arti@2001:bb8:4008:2020::f) (Ping timeout: 252 seconds)
[01:02:08] *** Quits: gloin (~gloin@user/gloin) (Remote host closed the connection)
[01:02:19] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[01:02:37] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 245 seconds)
[01:03:00] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[01:03:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:03:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[01:03:08] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[01:03:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:03:38] *** Joins: Pickchea (~private@user/pickchea)
[01:04:10] <sazawal> zware, A bit confusing. But to let you know that I don't want to make the server publicly accessible. I would have a few clients, and if they are authorized, they would get a connection to the server, otherwise not.
[01:04:24] <zware> sazawal: And if you later have multiple clients or servers, they can each have their own cert/key pair, signed by the same self-signed "CA" cert.  But you only ever have the one self-signed cert, and a bunch of other certs signed by it so that they can cross-verify each other
[01:04:38] <zware> sazawal: It is, and I'm not doing a great job explaining it :)
[01:05:00] *** Quits: godofsea (~dark@146.196.46.15) (Quit: Leaving)
[01:05:13] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[01:05:30] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[01:07:35] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:08:02] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[01:08:22] <sazawal> zware, How can a self-signed certificate sign a key? Sorry I am a beginner at this. The most I am familiar with is the simple concept of a public key and a private key. Public key I know is like a publicly known address which a client can use to encrypt and send a message to a server. The server then decrypts it using the private key (only available to server) it possesses.
[01:08:55] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Remote host closed the connection)
[01:09:49] <sazawal> Certification is in someway the opposite of this, that client encrypts using publicly available private-key. And server uses the public key to decrypt and verify the client??
[01:09:53] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[01:10:16] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[01:10:50] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[01:11:03] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[01:12:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[01:12:41] *** Quits: paravida (~myChateau@user/paravida) (Ping timeout: 248 seconds)
[01:12:48] *** Joins: srhm (~ascii@user/srhm)
[01:13:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:14:35] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:54] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[01:15:46] *** Quits: piscvau (~odile@aclermont-ferrand-257-1-17-125.w92-129.abo.wanadoo.fr) (Remote host closed the connection)
[01:15:47] *** Joins: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net)
[01:17:39] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[01:18:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 248 seconds)
[01:19:06] *** Quits: xikkub (me@user/xikkub) (Ping timeout: 240 seconds)
[01:19:24] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:19:38] *** Quits: sazawal (~sazawal@122.161.170.192) (Quit: Leaving)
[01:20:04] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (Remote host closed the connection)
[01:20:04] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Quit: I Break D Ert)
[01:20:20] *** Joins: BinarySavior (~BinarySav@user/binarysavior)
[01:20:26] *** Quits: weibullguy (DRowland@gateway/vpn/protonvpn/weibullguy) (Ping timeout: 272 seconds)
[01:20:28] *** Quits: h_ (rootvegeta@fsf/member/hays) (Remote host closed the connection)
[01:21:44] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[01:21:45] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[01:21:54] *** Quits: wisefriday (wisefriday@sempiternity.club) (Ping timeout: 240 seconds)
[01:22:12] *** Quits: sharksauce (sharksauce@user/sharksauce) (Ping timeout: 245 seconds)
[01:22:16] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[01:22:17] *** Joins: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54)
[01:22:58] <zware> sazawal: https://bpa.st/I7XQ is an adaptation of what I've used in the past to generate and use certs and keys like I'm talking about
[01:23:21] *** Quits: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[01:23:37] *** Joins: hays (~rootveget@fsf/member/hays)
[01:23:41] <zware> Ah, missed him
[01:24:26] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[01:24:27] *** Joins: sharksauce (~sharksauc@user/sharksauce)
[01:24:47] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (Remote host closed the connection)
[01:24:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:25:44] *** Joins: wyclif (~wyclif@user/wyclif)
[01:26:04] *** Joins: wisefriday (wisefriday@sempiternity.club)
[01:26:47] *** Quits: weibullguy (~DRowland@2600:6c4a:7d00:fe22:4ced:6a14:8bb7:6d54) (Ping timeout: 245 seconds)
[01:27:12] *** Joins: weibullguy (DRowland@gateway/vpn/protonvpn/weibullguy)
[01:29:01] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[01:30:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[01:30:22] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[01:30:29] *** Joins: xikkub (me@user/xikkub)
[01:31:07] *** Joins: wyclif (~wyclif@user/wyclif)
[01:33:40] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[01:35:14] *** Quits: SilverFox (~SilverFox@64.223.223.162) (Remote host closed the connection)
[01:36:05] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[01:36:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:36:34] *** Joins: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at)
[01:36:37] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[01:36:37] *** Joins: wyclif (~wyclif@user/wyclif)
[01:37:28] <neilthereildeil> in Keras library, why does model = Model()     print(type(self.model)) print <class 'tensorflow.python.keras.engine.functional.Functional'> rather than type Model?
[01:37:43] <neilthereildeil> Is Functional a type of object in Python or Keras?
[01:37:59] <zware> neilthereildeil: Keras
[01:38:25] <neilthereildeil> is that the same as a Model?
[01:38:35] <neilthereildeil> or is it somehow masked?
[01:38:48] <nedbat> neilthereildeil: what do you see if you print(Model) ?
[01:38:54] <zware> neilthereildeil: No idea :).  Depends on what exactly `Model` is
[01:39:05] <neilthereildeil> I know Model is a class in Keras
[01:39:55] *** Quits: Mudkip875 (~blackred@173.208.202.60) (Quit: WeeChat 3.2)
[01:39:58] <neilthereildeil> <class 'tensorflow.python.keras.engine.functional.Functional'> vs when i print(Model), i get <class 'tensorflow.python.keras.engine.training.Model'>
[01:40:11] <nedbat> neilthereildeil: they did something tricky then
[01:40:28] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[01:40:49] <neilthereildeil> yea maybe Functional is masking the Model object to give hte API a more Function programming "feel"?
[01:40:53] <zware> nedbat, neilthereildeil: Tricky indeed: https://github.com/keras-team/keras/blob/948df87f1669e203e16e39daeaca52e2ea3253ad/keras/engine/training.py#L151
[01:40:56] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 268 seconds)
[01:41:09] <ammar2> o_O
[01:41:18] <ammar2> that's some interesting voodoo
[01:41:31] <neilthereildeil> ohh wow
[01:41:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:41:57] <neilthereildeil> so theyre making it look and act functional if it was invoked functionally, and look and act imperatively if it was invoked imperatively?
[01:42:07] *** Joins: wyclif (~wyclif@user/wyclif)
[01:42:20] <zware> neilthereildeil: Something to that effect appears to be the goal, yes
[01:42:27] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[01:42:39] <zware> neilthereildeil: Frankly it seems like a good way to confuse their users, to me :)
[01:43:14] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[01:45:04] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[01:45:30] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:46:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:47:35] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:47:38] *** Joins: wyclif (~wyclif@user/wyclif)
[01:47:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Client Quit)
[01:48:00] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[01:48:02] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:49:30] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 272 seconds)
[01:50:00] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:50:39] *** Joins: Fiji (~Fiji@user/fiji)
[01:50:39] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[01:50:53] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:52:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:53:08] *** Joins: wyclif (~wyclif@user/wyclif)
[01:54:38] <grym> that's going in the list of godawful design decisions
[01:54:40] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[01:54:56] <grym> hodapp: ^^
[01:56:08] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:56:24] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:57:06] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:57:33] *** Joins: MikZyth (~MikZyth@188.65.242.174)
[01:58:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:58:39] *** Joins: wyclif (~wyclif@user/wyclif)
[01:59:02] *** Quits: hyper_dave (~hyper_dav@197.156.77.243) (Quit: WeeChat 3.2)
[01:59:23] *** Joins: hyper_dave (~hyper_dav@197.156.77.243)
[01:59:34] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[02:00:00] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-914a-fad4-07db-7f18.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:01:36] *** Joins: teut (~teut@182.69.87.27)
[02:01:45] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[02:01:46] <teut> https://bpa.st/TOOA#1L22    what is that line doing?
[02:02:10] *** Quits: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[02:02:45] <zware> teut: See https://docs.python.org/3/reference/expressions.html#generator.send
[02:03:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:03:28] <teut> thanks,  I only knew  about next till now
[02:04:09] *** Joins: wyclif (~wyclif@user/wyclif)
[02:04:31] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[02:04:33] *** Quits: catdog2 (~quassel@2001:470:50f7:cdcd::cd1) (Quit: No Ping reply in 120 seconds.)
[02:04:41] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[02:05:03] <teut> and why is next an issue to use here?
[02:07:05] <SnoopJ> because it's wired up to be awaited
[02:07:15] <SnoopJ> (it's pretty weird code)
[02:07:24] <teut> https://www.youtube.com/watch?v=Y4Gt3Xjd7G8&t=2849s
[02:07:32] <teut> 1:19:45
[02:07:37] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 248 seconds)
[02:07:48] <teut> but it explains async await and event loop
[02:07:54] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[02:08:05] <teut> and other things like thread safe queue
[02:08:42] *** Joins: Keira (~k@lulzsec.co.uk)
[02:09:03] <hodapp> grym: bah?
[02:09:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:09:18] <hodapp> oh, something in Keras?
[02:09:40] *** Joins: wyclif (~wyclif@user/wyclif)
[02:10:48] *** Joins: dre (~dre@2001:8003:c932:c301:cdc7:f294:b67b:4c2c)
[02:11:29] <grym> hodapp: look at the __new__
[02:11:33] <grym> and then, wince
[02:11:47] <Celelibi> Hm. Most of the time, two builtin objects aren't the same (as compared with ==) if they're not the same type.
[02:11:55] <Celelibi> But a float can equal an int.
[02:12:26] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 252 seconds)
[02:12:32] <Celelibi> Are there more exceptions like this?
[02:12:34] <zware> Celelibi: "the same" != "equal"
[02:12:44] <ssbr> Celelibi: frozenset/set is another significant case of this.
[02:13:00] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 272 seconds)
[02:13:06] <ssbr> I mean you'll find countless of these, really
[02:13:22] <ssbr> (but floats and sets are uniquely pathological in some ways)
[02:13:57] *** Joins: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at)
[02:13:59] <Celelibi> I'm pretty sure many non-builtin types have their own __eq__. I was talking about buitin types specifically.
[02:14:10] <SnoopJ> Celelibi, the meaning of == is determined by the objects being compared (specifically their implementations of __eq__())
[02:14:45] <zware> bool and int, for ints 0 and 1 (and thus also float and complex 0.0 and 1.0)
[02:14:47] <stealth_> Celelibi, you mean `1 == 1.0` ? the values are compared
[02:14:49] <hodapp> grym: yeah that looks awful
[02:14:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:15:03] *** Quits: neilthereildeil (~neilthere@70.21.11.5) (Quit: Client closed)
[02:15:12] *** Joins: wyclif (~wyclif@user/wyclif)
[02:15:13] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Quit: Leaving)
[02:15:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:15:49] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Remote host closed the connection)
[02:15:57] *** Joins: Powerhouse6666 (~Powerhous@security.orcacomputers.com)
[02:16:00] <rud0lf> if str(boolean_var)[0] in ('T',)
[02:16:03] <rud0lf> truth test :)
[02:16:58] <Celelibi> zware, why has it been done this way, though?
[02:17:29] <zware> rud0lf: If that were `if str(boolean_var).lower()[0] in ('t',)` I could understand it, if you're not sure if it will be a string or bool.  Still terrible, though :)
[02:17:30] <Celelibi> I can understand the frozenset case, I can understand the int/float case that would likely confuse beginners.
[02:17:47] <Celelibi> But bools and ints ?
[02:18:13] <zware> Celelibi: The bool type was added long after it was standard practice to use `False = 0; True = 1`, so bool subclasses int
[02:19:25] <Celelibi> I guess that make sens.
[02:19:55] *** Quits: torandu (~sean@94.10.125.197) (Quit: leaving)
[02:20:05] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[02:20:24] *** Quits: Barones (~Barones@2804:48dc:8500:0:d8d9:bd51:346:2891) (Quit: Leaving)
[02:20:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:20:26] <dre> isn't that a relic from C. which didn't have bools.
[02:20:28] *** Joins: srhm (~ascii@user/srhm)
[02:20:32] <dre> also how long ago was python 1 anyway?
[02:20:41] *** Joins: wyclif (~wyclif@user/wyclif)
[02:20:47] <grym> 1994
[02:20:50] <ammar2> two decades
[02:20:56] <dre> niice
[02:21:59] <ssbr> ammar2: closer to three now
[02:22:36] <SnoopJ> dre, C has had bools since C99, but I don't think the decision about Python's bools was related to it
[02:23:15] <ssbr> the real question is why None/True/False instead of NONE/TRUE/FALSE or none/true/false
[02:23:26] <zware> ssbr: It looks nicer
[02:23:27] <ssbr> I seriously suspect influence from ML. I should ask python-dev and bcc gvr
[02:24:16] <ssbr> (I suspect ML influence especially because -- who else calls it "None" but ML-derived languages? Everyone else says "null" or "nil")
[02:24:18] <mattf> I have a module that has some global variables inside it which is not good because it defines things that another class imports to it. It is the config module. And there is the bot class that imports this config that has globals in it. Problem is what if I wanted bots with different configs. Is there a way to do that without having to refactor the whole config module?
[02:24:52] <Yhg1s> ssbr: True and False are spelled that because of None. None probably came from ML or ABC or something.
[02:25:10] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[02:25:20] <ssbr> Yhg1s: when I dug into the commut history, there was something named None even from the very first commit
[02:25:28] *** Joins: cdown_ (~cdown@89.32.122.5)
[02:25:33] <ssbr> so I couldn't figure it out from before then
[02:25:55] <ssbr> (at least we didn't call it "Nothing"!)
[02:26:57] <dre> ^
[02:27:42] <grym> but alas, no void :)
[02:28:02] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 245 seconds)
[02:28:14] *** cdown_ is now known as cdown
[02:29:00] *** Joins: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com)
[02:29:29] *** Quits: teut (~teut@182.69.87.27) (Quit: Connection closed)
[02:29:32] <kittonian> hi all. been trying to figure this out all day but no luck. is there any chance someone here is familiar with Products.PluggableAuthService?
[02:30:16] *** Joins: torandu (~sean@94.10.125.197)
[02:30:18] *** Quits: Liblx (~Alex@2a02:810c:280:59c:7471:c11:7e53:10ff) (Quit: WeeChat 3.2)
[02:30:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:31:42] *** Joins: wyclif (~wyclif@user/wyclif)
[02:34:20] *** Quits: dre (~dre@2001:8003:c932:c301:cdc7:f294:b67b:4c2c) (Ping timeout: 256 seconds)
[02:35:24] *** Joins: minip (minip@user/minip)
[02:36:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:36:27] *** Joins: khrbt (~znc@user/khrbt)
[02:36:57] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 248 seconds)
[02:37:11] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 252 seconds)
[02:37:14] *** Joins: wyclif (~wyclif@user/wyclif)
[02:39:27] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[02:40:24] <mattf> can i make a module with globals on it behave like a class instance?
[02:40:32] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[02:40:40] <mattf> well basically to pass it around like if it was an object
[02:41:25] *** Parts: shonudo (~user@user/shonudo) ()
[02:41:27] <mattf> so it is a full copy
[02:41:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:41:46] <zware> mattf: ...yes, but it sounds terrible :).  If you're expecting to have different values in different instances of it, you'll have to re-import or copy it for each place you want to use it
[02:41:47] <SnoopJ> mattf, modules *are* objects
[02:42:09] <nedbat> mattf: you can pass modules around
[02:42:15] <mattf> re-importings doesn't reset it does it?
[02:42:20] <SnoopJ> not sure about copying them, that sounds complicated (and probably less than ideal)
[02:42:29] <nedbat> mattf: reimporting always gives you the same object
[02:42:45] *** Joins: wyclif (~wyclif@user/wyclif)
[02:42:48] <zware> Unless you hide it from the import system
[02:42:57] <mattf> lets say I have the thing module and inside thing.py i say value=3 globally just like that.
[02:43:08] *** Quits: iomari891 (~iomari891@105.112.138.38) (Read error: Connection reset by peer)
[02:43:24] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 256 seconds)
[02:43:35] <mattf> I want make thing.py now behave like an object so i can set thing_clone.value = 8 and even if i thing.value = 1 thing_clone.value will be still 8
[02:44:03] <mattf> because if im importing thing from multiple places it will have thing.value = 1
[02:44:05] <SnoopJ> mattf, is there a reason not to have a dict in this file that gets imported/copied?
[02:44:07] <mattf> or reimporting
[02:44:18] <mattf> yeah
[02:44:24] <SnoopJ> or perhaps a function that produces a copy when called, e.g. `from thing import thingmaker; mything = thingmaker()`
[02:44:56] <SnoopJ> or maybe a dataclass if you really want to use attribute notation
[02:45:01] <zware> mattf: Maybe just add a `get_config` function to your config module that returns `types.SimpleNamespace(deepcopy(globals()))` (possibly with some cleanup of `globals()`)
[02:45:12] <SnoopJ> yea SimpleNamespace might be good too
[02:45:35] <mattf> that sounds interesting zware
[02:45:41] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[02:45:56] <mattf> what is simpleNamespace?
[02:46:05] <mattf> it will see globals only from that same file?
[02:46:06] <zware> mattf: A simple namespace ;)
[02:46:21] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[02:46:28] *** Joins: Fluxx (~Fluxx@user/fluxx)
[02:46:29] <zware> mattf: It's just an object that supports attribute access for the values that were passed into it
[02:47:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[02:47:47] <zware> mattf: If you deepcopy `globals()` in your config module, you'll get a copy of the globals of that module.  You may want to do things like `from copy import deepcopy as _deepcopy` and then make it `def get_config(): return _types.SimpleNamespace(_deepcopy({k: v for k, v in globals().items() if not k.startswith('_')}))`
[02:47:47] *** Joins: rany (~rany@user/rany)
[02:48:15] *** Joins: wyclif (~wyclif@user/wyclif)
[02:48:22] <mattf> oh i will try that
[02:48:32] <zware> That ensures that if you change something in what you get from `get_config`, it won't change it for any other copy
[02:48:50] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:49:31] <mattf> and that will be a object? I can .value on it like if it was the config module itself?
[02:49:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[02:50:02] <zware> mattf: It will be a `types.SimpleNamespace` object, and yes, attribute access will work
[02:50:20] <mattf> how cool
[02:50:43] *** Quits: torandu (~sean@94.10.125.197) (Read error: Connection reset by peer)
[02:50:56] *** Joins: zaquest (~notzaques@5.128.210.178)
[02:51:25] *** Joins: iomari891 (~iomari891@105.112.138.38)
[02:51:53] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:53:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:53:46] *** Joins: wyclif (~wyclif@user/wyclif)
[02:55:07] *** Quits: Samian (~Sami@2620:10d:c091:480::1:656f) (Ping timeout: 245 seconds)
[02:55:33] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[02:56:31] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[02:56:52] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c161:5dea:b116:d76e) (Quit: Leaving)
[02:56:56] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:57:14] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c161:5dea:b116:d76e)
[02:57:38] *** Quits: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[02:57:40] *** Quits: d0ku (~d0ku@188.47.121.244.ipv4.supernova.orange.pl) (Ping timeout: 246 seconds)
[02:58:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[02:59:15] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 268 seconds)
[02:59:16] *** Joins: wyclif (~wyclif@user/wyclif)
[02:59:20] *** Joins: heco (~redrum@user/redrum88)
[03:00:04] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[03:01:42] *** Quits: y1n (~y1n@84-115-65-5.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[03:01:46] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:02:08] *** Joins: srhm (~ascii@user/srhm)
[03:02:32] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:02:33] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 248 seconds)
[03:03:06] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[03:04:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:04:10] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:04:17] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 245 seconds)
[03:04:46] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:58] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:06:20] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[03:06:22] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[03:06:41] *** Quits: Akuli (~Akuli@82-203-162-135.bb.dnainternet.fi) (Quit: Leaving)
[03:09:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[03:09:28] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[03:10:17] *** Joins: wyclif (~wyclif@user/wyclif)
[03:10:37] *** Joins: mavrix (~mavrix@user/tinwasp)
[03:11:26] *** Joins: dre (~dre@2001:8003:c932:c301:e84:4d36:2dec:8e23)
[03:11:27] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:13:16] *** Joins: fofoni (~fofoni@user/fofoni)
[03:13:47] *** Joins: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at)
[03:14:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[03:15:20] *** Quits: Narrat (~omnius@p200300df5f0ae5c606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:15:33] <AhmedAmerican> https://bpa.st/JIRQ the output include some keys which i didn't specify, such as `depth` and `download_latency` why?
[03:15:47] *** Joins: wyclif (~wyclif@user/wyclif)
[03:15:50] *** Joins: emika7 (~emika@83.136.182.234)
[03:16:16] *** Quits: emika (~emika@83.136.182.47) (Ping timeout: 272 seconds)
[03:16:16] *** emika7 is now known as emika
[03:18:07] *** Joins: torandu (~sean@94.10.125.197)
[03:18:07] <cluelessperson> AhmedAmerican, can you boil this down?
[03:18:10] <grym> presumably, scrapy.Request is adding more stuff
[03:18:10] <cluelessperson> output of what?
[03:18:12] <cluelessperson> keys from what?
[03:18:19] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:18:33] *** Quits: Fiji (~Fiji@user/fiji) (Read error: Connection reset by peer)
[03:18:36] <cluelessperson> yeah, I was thinking either the server is adding more stuff or your tool is
[03:19:41] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[03:20:01] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:20:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[03:20:36] <SnoopJ> download_latency is one of the builtins https://docs.scrapy.org/en/latest/topics/request-response.html#download-latency
[03:20:58] <SnoopJ> not sure about depth, maybe some other component
[03:21:21] *** Joins: wyclif (~wyclif@user/wyclif)
[03:21:41] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[03:21:53] <AhmedAmerican> grym: SnoopJ
[03:21:56] <AhmedAmerican> OPS
[03:21:59] *** Joins: rigid- (~rigid@user/rigid)
[03:22:00] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[03:22:03] <grym> AhmedAmerican: neither of us have +o
[03:22:05] <AhmedAmerican> i think i just missed the new keyword of `cb_kwargs`
[03:22:17] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 252 seconds)
[03:22:21] <AhmedAmerican> i was using `meta` which is the old method.
[03:22:32] *** Quits: rigid (~rigid@user/rigid) (Read error: Connection reset by peer)
[03:22:38] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[03:23:14] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 272 seconds)
[03:23:35] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[03:23:37] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:23:55] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:24:28] *** Quits: luvalon1 (~luva@178.239.167.170) (Read error: Connection reset by peer)
[03:24:32] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 268 seconds)
[03:24:43] *** Joins: luvalon13 (~luva@178.239.167.170)
[03:24:51] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[03:25:32] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[03:26:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[03:26:12] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:26:51] *** Joins: wyclif (~wyclif@user/wyclif)
[03:26:59] *** Joins: Fiji (~Fiji@user/fiji)
[03:27:25] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[03:28:03] *** Joins: de-facto (~de-facto@user/de-facto)
[03:28:20] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 252 seconds)
[03:28:27] *** Quits: mavrix (~mavrix@user/tinwasp) (Ping timeout: 245 seconds)
[03:29:24] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[03:29:27] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 268 seconds)
[03:30:42] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[03:30:56] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[03:31:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:32:22] *** Joins: wyclif (~wyclif@user/wyclif)
[03:33:29] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 248 seconds)
[03:33:59] *** Joins: m4v (~znc@ubuntu/member/m4v)
[03:36:15] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[03:36:31] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[03:36:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[03:37:00] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[03:37:13] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[03:37:52] *** Joins: wyclif (~wyclif@user/wyclif)
[03:39:42] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[03:40:20] *** Quits: rinwa (~user@141.226.14.13) (Remote host closed the connection)
[03:42:08] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:43:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:43:22] *** Joins: milosz__ (~milosz@user/milosz)
[03:43:23] *** Joins: wyclif (~wyclif@user/wyclif)
[03:43:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:43:27] <newdimension> Is SQLAlchemy standard in industry when there is a DB involved?
[03:43:46] <grym> it's a very well regarded and fundamental ORM/db adpater layer
[03:43:48] *** Joins: srhm (~ascii@user/srhm)
[03:43:59] <grym> so i think i'd probably go with "yes"
[03:45:02] <newdimension> grym: Got it, thank you!
[03:45:16] *** Joins: Atque (~Atque@user/atque)
[03:46:22] *** Quits: luvalon13 (~luva@178.239.167.170) (Ping timeout: 245 seconds)
[03:46:29] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[03:46:46] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[03:47:05] *** Quits: MikZyth (~MikZyth@188.65.242.174) (Quit: WeeChat 3.1)
[03:47:10] *** Joins: luvalon1 (~luva@178.239.167.170)
[03:47:20] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 268 seconds)
[03:47:21] *** Quits: milosz_ (~milosz@user/milosz) (Ping timeout: 248 seconds)
[03:48:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:48:54] *** Joins: wyclif (~wyclif@user/wyclif)
[03:49:27] *** Joins: de-facto (~de-facto@user/de-facto)
[03:49:36] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[03:49:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:50:57] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 245 seconds)
[03:51:43] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:53:00] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[03:53:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[03:54:25] *** Joins: wyclif (~wyclif@user/wyclif)
[03:55:02] *** Parts: ska (~ska@user/ska) (Leaving)
[03:55:53] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[03:58:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[03:58:33] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[03:59:41] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Ping timeout: 268 seconds)
[04:00:51] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:01:00] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[04:01:17] *** Joins: torandu (~sean@94.10.125.197)
[04:01:45] *** Quits: y1n (~y1n@84-115-65-19.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[04:02:26] *** Joins: Oddity (Oddity@user/oddity)
[04:04:00] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[04:04:00] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:04:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[04:04:23] *** Quits: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) (Quit: Leaving.)
[04:04:27] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[04:04:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:04:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:04:37] *** Wulf4 is now known as Wulf
[04:04:50] *** Joins: srhm (~ascii@user/srhm)
[04:04:50] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[04:05:15] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:05:25] *** Joins: wyclif (~wyclif@user/wyclif)
[04:05:32] *** Joins: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5)
[04:06:36] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:08:52] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 245 seconds)
[04:08:55] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:10:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[04:10:08] *** Joins: torandu (~sean@94.10.125.197)
[04:10:34] *** Quits: morteza24 (~morteza24@37.98.68.187) (Quit: Leaving)
[04:10:36] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:10:55] *** Joins: wyclif (~wyclif@user/wyclif)
[04:11:20] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[04:11:22] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[04:12:07] *** Joins: gloin (~gloin@user/gloin)
[04:13:27] <gloin> Noobish argparse question here: I tried to create an arg "--dry-run" but got an AttributeError for no attribute 'dry' - it appears the hyphen is the problem. How does one create an arg like "--dry-run" without running aground here?
[04:13:30] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[04:13:55] <gloin> (hyphen between dry and run)
[04:14:26] <nedbat> gloin: the parameter will be called "dry_run"
[04:14:36] <gloin> huh
[04:14:43] * gloin tries it
[04:14:46] *** Joins: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at)
[04:15:12] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[04:15:46] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 256 seconds)
[04:15:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[04:15:46] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 256 seconds)
[04:15:55] <grym> argparse "helps"
[04:16:06] <gloin> Okay, that worked. I'm guessing the underscore conversion is due to something more Python-specific than just argparse though. Why that conversion?
[04:16:17] <grym> gloin: python doesn't support kebab case
[04:16:27] *** Joins: wyclif (~wyclif@user/wyclif)
[04:16:44] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 252 seconds)
[04:16:56] <grym> and the recommended naming convention is snake_case
[04:17:09] * gloin winces, slightly
[04:17:30] <grym> so argparse permits kebab at the cli, and munges it to snake automatically
[04:17:32] <Yhg1s> gloin: 'x-y' means 'x minus y'
[04:17:48] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[04:18:14] <gloin> Makes sense, but this is going to be a painful habit to get out of
[04:18:32] <grym> syntax error, your friend!
[04:18:37] <gloin> lol
[04:18:42] <Yhg1s> I'm sure it won't be the last one, if you're that used to a language that does allow - in identifiers.
[04:19:01] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:19:51] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Killed (NickServ (GHOST command used by Omega037-B)))
[04:20:21] <grym> gloin: make your editor draw red squiggles of shame for you
[04:20:48] <grym> helps prevent really simple bugs like this
[04:20:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[04:21:19] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[04:21:26] <gloin> Resisting the urge to passive-aggressively use screaming snake case
[04:21:37] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[04:21:37] *** Joins: tims (~tims@61.69.131.46)
[04:21:44] <gloin> tbh I don't mind snake case at all
[04:21:57] *** Joins: wyclif (~wyclif@user/wyclif)
[04:22:18] <grym> i don't mind the conversion of argparse or click either
[04:22:28] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[04:22:36] *** Joins: zBeeble42 (~zBeeble@2001:1928:1::35)
[04:22:50] <grym> especially as a syntax hint almost: "hey this was a string once but it might not be now!"
[04:23:05] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[04:23:49] <gloin> I mean, argparse is pretty rad to set up.
[04:24:34] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Ping timeout: 240 seconds)
[04:24:41] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 258 seconds)
[04:25:05] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[04:25:06] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 252 seconds)
[04:25:06] *** Quits: binarymutt[m] (~binarymut@user/binarymutt) (Ping timeout: 252 seconds)
[04:25:07] *** Quits: allegary (~allegary@apache/committer/gjm) (Ping timeout: 245 seconds)
[04:25:11] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 268 seconds)
[04:25:11] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (Ping timeout: 268 seconds)
[04:25:12] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Ping timeout: 268 seconds)
[04:25:14] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Ping timeout: 268 seconds)
[04:25:14] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[04:25:15] *** Quits: Guest330 (~jmcantrel@user/jmcantrell) (Ping timeout: 276 seconds)
[04:25:15] *** Quits: morguldir (~morguldir@2001:470:69fc:105::21bd) (Ping timeout: 276 seconds)
[04:25:22] *** Quits: gloomy (~gloomy@2001:470:69fc:105::ce00) (Ping timeout: 240 seconds)
[04:25:22] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Ping timeout: 240 seconds)
[04:25:22] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Ping timeout: 240 seconds)
[04:25:22] *** Quits: boris[m] (~borisruna@2001:470:69fc:105::32f3) (Ping timeout: 272 seconds)
[04:25:23] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Ping timeout: 272 seconds)
[04:25:23] *** Quits: zBeeble (~zBeeble@2001:1928:1::35) (Ping timeout: 272 seconds)
[04:25:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[04:25:32] *** Quits: jwon (~jwon@user/jwon) (Ping timeout: 252 seconds)
[04:25:39] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 252 seconds)
[04:25:48] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 268 seconds)
[04:25:48] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 268 seconds)
[04:25:48] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Ping timeout: 268 seconds)
[04:25:49] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Ping timeout: 268 seconds)
[04:25:54] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Ping timeout: 276 seconds)
[04:26:00] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Ping timeout: 272 seconds)
[04:26:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:27:01] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:27:06] *** Joins: torandu (~sean@94.10.125.197)
[04:27:27] *** Joins: wyclif (~wyclif@user/wyclif)
[04:27:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[04:28:10] <Repiphany> gloin: `add_argument('--dry-run', dest = 'dryRun')` (I don't actually recommend this)
[04:28:13] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[04:28:19] *** Quits: ouzel8_ (~ouzel8_@110.148.212.146) (Ping timeout: 246 seconds)
[04:28:59] <gloin> action="store_true" seems friendlier and has fewer camels
[04:29:53] <Repiphany> I mean if you want to change the dry_run in the namespace to something arbitrary
[04:30:08] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[04:31:00] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 272 seconds)
[04:31:22] <gloin> Good to know.
[04:31:22] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 245 seconds)
[04:31:35] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:31:50] <gloin> in this case I'm only setting up --verbose and --dry-run so it's not super important but someday...
[04:31:52] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:31:54] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[04:32:01] *** Joins: thiras (~thiras@user/thiras)
[04:32:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:32:48] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Quit: leaving)
[04:32:58] *** Joins: wyclif (~wyclif@user/wyclif)
[04:33:46] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[04:33:49] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:34:13] *** ShowDonkey is now known as mpmc
[04:34:49] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:35:00] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:35:05] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[04:35:21] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[04:35:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:36:09] *** Joins: srhm (~ascii@user/srhm)
[04:36:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 256 seconds)
[04:36:48] *** Gustavo6046_ is now known as Gustavo6046
[04:37:17] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:37:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:38:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[04:38:27] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[04:38:28] *** Joins: wyclif (~wyclif@user/wyclif)
[04:38:54] *** Joins: shailangsa (~shailangs@host86-145-14-24.range86-145.btcentralplus.com)
[04:40:08] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 256 seconds)
[04:42:01] *** Joins: ouzel8_ (~ouzel8_@nor1196003.lnk.telstra.net)
[04:42:52] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[04:43:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:43:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:43:53] *** Quits: pschorf (~user@c-73-77-28-188.hsd1.tx.comcast.net) (Ping timeout: 248 seconds)
[04:43:59] *** Joins: wyclif (~wyclif@user/wyclif)
[04:44:47] <catbeard> lmfao at kebab case
[04:45:20] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:46:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:46:33] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 248 seconds)
[04:47:56] <grym> catbeard: it was weird at first, but i like it now
[04:48:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:48:27] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[04:49:20] *** Joins: seednode8 (~seednode@user/seednode)
[04:49:29] *** Joins: wyclif (~wyclif@user/wyclif)
[04:49:36] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:50:18] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[04:50:32] *** Quits: seednode (~seednode@user/seednode) (Ping timeout: 245 seconds)
[04:50:32] *** seednode8 is now known as seednode
[04:52:36] *** Joins: jmcantre2 (~weechat@user/jmcantrell)
[04:53:12] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 276 seconds)
[04:53:33] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:53:53] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[04:54:01] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 248 seconds)
[04:54:46] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:54:50] *** Joins: jmcantre3 (~weechat@user/jmcantrell)
[04:55:27] *** Joins: derelict (~derelict@user/derelict)
[04:56:27] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 276 seconds)
[04:56:29] *** Joins: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net)
[04:57:36] *** Leonarbro_ is now known as Leonarbro
[04:57:51] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:58:24] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 276 seconds)
[04:59:19] *** Quits: ornxka (~ornxka@user/ornxka) (Read error: Connection reset by peer)
[05:00:14] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[05:00:15] *** Quits: flyback (~flyback@2601:540:8201:1e60:f91d:60fc:906f:7e8a) (Quit: Leaving)
[05:00:37] *** Joins: flyback (~flyback@2601:540:8201:1e60:f91d:60fc:906f:7e8a)
[05:00:41] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[05:01:29] *** Quits: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[05:02:52] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[05:02:52] *** Joins: jdmark (~jdmark@67.8.137.130)
[05:04:00] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:05:07] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 245 seconds)
[05:08:51] *** Joins: bpalmer (~user@user/bpalmer)
[05:09:05] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-71fb-3d31-207c-c860.res6.spectrum.com) (Read error: Connection reset by peer)
[05:10:20] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-e57d-786f-86d2-d59d.res6.spectrum.com)
[05:10:23] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[05:10:44] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-cd06-376d-051c-caa6.res6.spectrum.com) (Ping timeout: 256 seconds)
[05:10:44] *** Joins: bnewey (~bnewey@pool-72-74-58-94.bstnma.fios.verizon.net)
[05:11:35] *** Joins: Trevor (~TrevorLan@user/trevorlaneray)
[05:11:38] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[05:12:36] <dre> why is it that I can define CarType(Enum) and TruckType(Enum) but I can't define VechicleType = Union[CarType, TruckType] and have class-level functions on that VehicleType
[05:12:48] <dre> riddle me this #python.. riddle me this.
[05:14:01] <grym> becuase enums are not really classes
[05:14:27] <cluelessperson> YEAH dre , enums are not really classes!
[05:14:29] <grym> or.  they aren't what you'd think you'd get if you typed `class Something(ABaseClass)`
[05:14:38] *** Joins: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at)
[05:15:29] <grym> iirc you explicitly cannot inherit from an enum you made and add enumerated values to it
[05:15:46] <grym> which sounds like what you'd do if you had VehicleType
[05:16:28] <dre> more or less, the Union idea was to get around not being able to `class VehicleType(CarType, TruckType)`
[05:17:05] <dre> but I still don't understand /why/ - I mean I get there might be duplicates or something, but aside from that issue, why
[05:17:18] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-e57d-786f-86d2-d59d.res6.spectrum.com) (Ping timeout: 272 seconds)
[05:17:30] <dre> it should be treated as its own choices type. where VehicleType.sedan == CarType.sedan
[05:17:44] <bpalmer> if by Union you mean typing.Union , you'd jsut be creating a new typevar anyway, not a real class.
[05:17:58] <dre> yeah I know, bpalmer, it was a conceptual idea
[05:17:58] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-7803-acee-bc65-5a59.res6.spectrum.com)
[05:18:14] <dre> I don't know how else I'm meant to model this idea
[05:18:52] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[05:19:25] <grym> you can have an attribute that is typehinted with that Union
[05:19:39] <grym> and then assign either a car or truck enum instance to it
[05:20:04] <grym> but that is exactly like having an attribute that's either a string or a float, or any other disparate types
[05:20:13] <grym> (which is to say, it's not very pleasant)
[05:20:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[05:21:59] <dre> yeah that sounds kinda bad.
[05:22:11] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[05:22:32] *** Quits: bnewey (~bnewey@pool-72-74-58-94.bstnma.fios.verizon.net) (Remote host closed the connection)
[05:22:33] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[05:24:08] <bpalmer> as for methods, you can just define top-level functions that accept this union as a first argument.
[05:24:43] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:25:08] *** Joins: srhm (~ascii@user/srhm)
[05:26:00] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[05:28:43] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[05:30:03] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:30:30] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:36] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[05:30:36] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[05:30:50] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:31:27] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Quit: thimslugga)
[05:31:44] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[05:34:42] *** Joins: vlm (~vlm@user/vlm)
[05:35:40] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:35:42] *** Joins: Samian (~Sami@2620:10d:c091:480::1:941a)
[05:35:51] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[05:36:05] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:36:14] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:36:14] *** brabrax_ is now known as brabrax
[05:36:18] *** Joins: yvehan (~yvehan@14.21.31.50)
[05:36:21] *** Joins: i0e (~is0ke3@user/is0ke3)
[05:36:39] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[05:39:03] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[05:39:07] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[05:39:28] *** Quits: jmcantre3 (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[05:40:16] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[05:42:24] *** Joins: psydroid (~psydroid@user/psydroid)
[05:45:16] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[05:45:35] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[05:45:58] *** Joins: srhm (~ascii@user/srhm)
[05:46:30] <dale> Seems like mypy can have some problems when you run it on a file that is also a built-in module name, such as logging.py.
[05:47:37] *** Joins: c10l (~c10l@89.34.167.207)
[05:51:01] *** Joins: orbatos (~orbatos@user/orbatos)
[05:51:42] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[05:51:55] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[05:52:20] *** Joins: OverCoder (~OverCoder@user/overcoder)
[05:52:54] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Quit: Quitting)
[05:53:13] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 248 seconds)
[05:55:30] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[05:56:08] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:56:34] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[05:58:28] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[06:00:00] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[06:00:08] *** Quits: mgedmin (~mg@user/mgedmin) (Quit: ZNC - http://znc.sourceforge.net)
[06:01:36] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[06:02:45] *** Quits: y1n (~y1n@84-115-64-173.wifi.dynamic.surfer.at) (Ping timeout: 276 seconds)
[06:02:45] *** Joins: yogoyo_ (~yogoyo@user/yogoyo)
[06:03:13] *** Joins: mgedmin (~mg@user/mgedmin)
[06:05:08] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Ping timeout: 256 seconds)
[06:05:24] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[06:06:17] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[06:06:52] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[06:09:06] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[06:09:08] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[06:10:09] *** Quits: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:10:28] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:11:24] *** Quits: morrigan (~m0rr1gan@user/m0rr1gan) (Quit: morrigan)
[06:11:29] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[06:11:34] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[06:12:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:12:53] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 268 seconds)
[06:12:58] *** Joins: morrigan (~m0rr1gan@user/m0rr1gan)
[06:13:29] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[06:15:06] *** Joins: y1n (~y1n@84-115-65-111.wifi.dynamic.surfer.at)
[06:15:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[06:15:55] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[06:16:17] *** Quits: Trevor (~TrevorLan@user/trevorlaneray) (Read error: Connection reset by peer)
[06:16:32] *** Joins: morguldir (~morguldir@2001:470:69fc:105::21bd)
[06:16:48] *** Joins: wyclif (~wyclif@user/wyclif)
[06:18:07] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[06:21:40] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[06:21:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[06:22:03] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:22:16] *** Joins: wyclif (~wyclif@user/wyclif)
[06:22:28] *** Joins: srhm (~ascii@user/srhm)
[06:22:51] *** Joins: Mija (~Mija@user/mija)
[06:23:02] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[06:23:06] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 272 seconds)
[06:26:08] *** Quits: kittonian (~kittonian@cpe-70-114-148-180.austin.res.rr.com) (Quit: Leaving)
[06:27:15] *** Joins: zeden (~zeden@user/zeden)
[06:27:53] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[06:29:21] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:30:41] *** Quits: driib (~driib@185.195.233.162) (Read error: Connection reset by peer)
[06:30:56] *** Joins: driib (~driib@185.195.233.162)
[06:31:05] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[06:32:21] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:4692:e3ec:239c:8c8)
[06:32:35] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[06:35:02] *** Joins: jazzy (~jaziz@2600:380:8638:b14c:7cc3:e178:6be5:3cf1)
[06:36:26] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[06:37:02] *** Joins: Guest330 (~jmcantrel@user/jmcantrell)
[06:37:16] *** Joins: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net)
[06:38:10] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 268 seconds)
[06:38:33] *** Quits: kmh_ (~kmh@p2e511ac0.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[06:39:09] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 276 seconds)
[06:39:10] *** Joins: Xeago (~Xeago@user/xeago)
[06:39:29] *** Joins: binarymutt[m] (~binarymut@user/binarymutt)
[06:40:23] *** Quits: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net) (Client Quit)
[06:40:55] *** Joins: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net)
[06:41:47] *** Quits: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net) (Client Quit)
[06:42:10] *** Quits: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl) (Quit: Bye!)
[06:42:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:43:11] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:4692:e3ec:239c:8c8) (Quit: Leaving)
[06:43:18] *** Joins: srhm (~ascii@user/srhm)
[06:44:38] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 272 seconds)
[06:44:38] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[06:45:17] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c161:5dea:b116:d76e) (Quit: Leaving)
[06:45:19] <cloudbender> Is there an equivalent to the javascript Map container in python 2.7 ?
[06:46:00] <cloudbender> I need an iterable key value pair with objects as the values and keys
[06:46:46] <dale> cloudbender: That seems like a dict?
[06:47:26] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131)
[06:47:34] <cloudbender> does a dict have a sort method ?
[06:47:52] <grym> cloudbender: no, but you can sorted(somedict.items(), key = ...)
[06:47:59] <grym> dicts preserve insertion order
[06:48:29] <grym> er, they do in 3.6+, not in 2.7, for which there is OrderedDict
[06:48:54] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[06:49:03] <cloudbender> sorry, 2.7 has OrderedDict ?
[06:49:16] *** Quits: reset (~reset@user/reset) (Quit: reset)
[06:49:18] <cloudbender> I have to remain in 2.7 for npm
[06:49:48] <grym> https://docs.python.org/2.7/library/collections.html#collections.OrderedDict
[06:50:03] <dale> Sorry, missed 2.7.  grym is right.
[06:50:35] <grym> cloudbender: dict keys must be hashable, incidentally
[06:50:57] <cloudbender> hmmmmm
[06:51:05] <grym> but that is, i believe, the only restriction
[06:51:21] <grym> so like, {["ha ha ha no"]:5} won
[06:51:23] <grym> t do
[06:51:37] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:51:43] <cloudbender> so, if I use a string as the key, and objects as the values
[06:51:49] <grym> strings are fine
[06:51:53] <grym> strings are also objects
[06:52:00] <grym> _everything_ is an object
[06:52:04] <cloudbender> I can use md5sums as keys
[06:52:06] *** Joins: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net)
[06:52:10] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:c024:180d:a6e2:7131) (Ping timeout: 256 seconds)
[06:52:11] <grym> prefer shasum, but sure
[06:52:37] <cloudbender> it's  not for crypto, it's for file image comparisons
[06:52:51] <cloudbender> photo archives
[06:52:53] <grym> why not take the free speedup and reduction in colissions anyway?
[06:53:17] <cloudbender> cellections ?
[06:53:26] <dale> I did not know SHA-1 is faster than MD5.
[06:53:27] *** Quits: emerent (~quassel@p200300cd57058c48ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:54:00] <grym> cloudbender: no, hashlib: https://docs.python.org/2.7/library/hashlib.html
[06:54:00] <cloudbender> I don't care about speed, I need reliability
[06:54:17] <cloudbender> thanks
[06:54:25] *** Joins: emerent (~quassel@p200300cd57058c2aba27ebfffed28a59.dip0.t-ipconnect.de)
[06:54:32] <grym> .hexdigest() is probably what you want, by the way
[06:54:37] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[06:54:40] <grym> regardless of which algorithm you use
[06:54:53] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[06:54:56] *** Joins: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com)
[06:55:01] *** Joins: gloomy (~gloomy@2001:470:69fc:105::ce00)
[06:55:09] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[06:55:24] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[06:55:28] *** Joins: spithash (~spithash@user/spithash)
[06:55:32] <whatsupdoc> can someone explain why [:-1] removes the last element in a list?
[06:55:42] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:55:42] *** FinnElija is now known as Guest800
[06:55:42] *** finn_elija is now known as FinnElija
[06:56:09] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:56:17] <grym> dale: you have to pick your benchmarks :)
[06:56:33] <dale> grym: I'm not particularly surprised either.
[06:56:36] <cloudbender> you are expressing everything from the beginning of the list unto the end of the list ... less one
[06:56:45] <InPhase> whatsupdoc: slicing is up to, but not including, the specified end element.
[06:57:18] <InPhase> whatsupdoc: And, a[-1] is the last element of the list.
[06:57:43] <cloudbender> ah
[06:58:08] <cloudbender> lol 'Nobody inspects the spammish repetition' dats funny
[06:58:27] <cloudbender> luv british humor
[06:58:31] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[06:58:39] <grym> humour, of course
[06:58:49] *** Quits: Guest800 (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 248 seconds)
[06:58:54] <InPhase> grym: They even spell it funny.
[06:58:55] *** Joins: MercilessDeth (~brad@136.49.61.2)
[06:59:03] *** Joins: Xeago (~Xeago@user/xeago)
[06:59:08] <cloudbender> I'm ambi-lingual with franc versus hispanic spelling
[06:59:11] <grym> InPhase: it's pronounced funny, but it's spelt throatwobbler mangrove
[06:59:21] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[06:59:26] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[07:01:08] *** Joins: allegary (~allegary@apache/committer/gjm)
[07:02:22] *** Quits: y1n (~y1n@84-115-65-111.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[07:02:25] <cloudbender> OK so I'll stop searching the interweb for python solutions since they all seem to reference 3.xx
[07:02:46] <cloudbender> i'll go with the .chm that came with the distro
[07:03:05] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[07:03:22] <grym> cloudbender: to be fair, 2.x has been unsupported for some time now
[07:03:35] <Repiphany> zip(keys, values)
[07:03:37] <cloudbender> yes, but the package manger uses it
[07:03:40] <grym> 18 months?
[07:03:45] <grym> cloudbender: whoopsies
[07:03:58] *** Quits: _AJ (~AJAlabs@pool-71-183-83-145.nycmny.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:04:00] *** Quits: dude-x_ (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[07:04:12] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[07:04:39] <grym> oo, and in december we get to kill 3.6
[07:04:43] <grym> exciting :)
[07:06:27] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Ping timeout: 258 seconds)
[07:06:28] <cloudbender> OK so I'll slug it out with OrderedDict in 2.7, md5's as keys
[07:06:44] <cloudbender> is md5 subject to collisions ?
[07:07:20] <cloudbender> and, can an ordered dict handle 250,000-ish members ?
[07:07:34] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-f81d-c689-242f-5b5b.res6.spectrum.com)
[07:07:48] *** Joins: scoobydoo (~scooby@138.199.59.36)
[07:08:01] <grym> md5 is easy to collide
[07:08:10] <cloudbender> dammit
[07:08:22] <cloudbender> guess it's sha then
[07:08:22] <grym> sha1 is harder, sha256 is real hard
[07:08:24] *** Joins: aphysically (~aphysical@user/aphysically)
[07:08:34] <cloudbender> sha512 ?
[07:08:40] <grym> that's also real hard
[07:08:55] <grym> sha1 is the only one with caveats that i'm aware of
[07:09:07] <cloudbender> thank you for the heads up
[07:09:33] <aphysically> is there any easy way to do printf %q style path escaping in python? I'm writing a (text) playlist file whose standards require such escaping for file paths by the programs that process it
[07:09:34] <grym> i would not really expect performance issues with 250k keys, either, but you have options if it turns out to suck to do in memory
[07:09:34] <dale> cloudbender: You have some version of NPM, as in Node Package Manager, that requires Python, and an old version no less?
[07:09:44] <cloudbender> yes
[07:09:52] <cloudbender> I'm using, wait ...
[07:10:35] <cloudbender> node.js v14.17.4 LTS
[07:10:40] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-7803-acee-bc65-5a59.res6.spectrum.com) (Ping timeout: 272 seconds)
[07:10:50] <cloudbender> And I was hoping to use the same distro for this project
[07:11:02] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[07:11:53] <cloudbender> She is an interior designer, 15 years of photos we need to archive
[07:12:04] *** Quits: xheimlic1 (~xheimlich@179.218.1.150) (Ping timeout: 268 seconds)
[07:12:05] <dale> aphysically: Maybe shlex.quote will do what you need?
[07:12:15] <cloudbender> about 60% are duplicates copied around to folders all over god's creation
[07:12:17] <aphysically> maybe, let's look!
[07:12:46] <grym> duplicate detection is paaaain :/
[07:12:52] <aphysically> yeah that sounds like it will work, it's shell escaping that's needed
[07:13:20] <cloudbender> so, I'm using has sums to determine if a given long path name is in fact the same photo as another given long path name
[07:13:49] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[07:13:50] <grym> cloudbender: you might also really like collections.defaultdict then
[07:14:01] <cloudbender> in 2.7 ?
[07:14:02] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:14:14] <grym> yes
[07:14:24] <cloudbender> oh sweetness on a stick
[07:14:28] <cloudbender> thank you so much
[07:14:39] <grym> a defaultdict(list) whose keys are shasum hexdigests and whose values are lists of filepaths
[07:14:53] <grym> (i wrote that loop once, too :) )
[07:15:05] <cloudbender> nice
[07:15:12] *** Joins: y1n (~y1n@84-115-65-111.wifi.dynamic.surfer.at)
[07:15:16] <grym> "uh oh" is every key whose value has a len != 1
[07:15:34] <grym> that plus os.walk and you're pretty much there
[07:15:38] <cloudbender> the node.js version works, but the cryptolibs in node are all async, and I never use async for file IO
[07:15:43] <grym> bedtime for me though, gl!
[07:15:57] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[07:16:02] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2199:36df:aa1:f55)
[07:16:03] <InPhase> cloudbender: If you want it to be very excellent, also use the imagehash library which has an image differencing feature that will let you associate images that are simply resized copies of the same thing, or the same image saved in a different format.
[07:16:31] <InPhase> cloudbender: So maybe sha512 for uniqueness, then imagehash to gather similars together.
[07:16:48] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:17:03] <cloudbender> I am gernally trying to do no more than scrub bit-level duplicates
[07:17:09] <cloudbender> ... generally
[07:17:23] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[07:18:13] <cloudbender> well, not scrub as much as make sure I only stream out one copy of a given image, at the bit-level
[07:18:53] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[07:19:01] <cloudbender> We need to get them to DVD, and right now estimates are 50 DVD's per workstation
[07:19:06] <cloudbender> um, no
[07:19:59] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:22:34] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[07:22:37] <cloudbender> regarding the memory, I'm only storing the long path, the sum, and an integer tag, bot the content
[07:22:47] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:23:02] <cloudbender> ... not the content
[07:23:11] *** Quits: kujo2 (~kujo@188.166.12.52) (Ping timeout: 252 seconds)
[07:23:26] <aphysically> dale: it doesn't provide the same style of escaping as printf %q, it does single quotes and the appropriate escaping for that, but both work for me
[07:24:00] *** Joins: kujo2 (~kujo@188.166.12.52)
[07:24:00] *** Quits: mertyildiran (~mertyildi@88.234.29.56) (Ping timeout: 276 seconds)
[07:26:15] *** Joins: jwon (~jwon@user/jwon)
[07:26:26] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[07:27:10] *** Quits: minip (minip@user/minip) (Remote host closed the connection)
[07:29:40] *** Quits: Samian (~Sami@2620:10d:c091:480::1:941a) (Ping timeout: 272 seconds)
[07:30:12] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[07:30:58] *** Joins: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs)
[07:31:53] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[07:32:16] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[07:33:03] <cloudbender> thanks all
[07:33:12] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Quit: Connection closed)
[07:33:39] *** Quits: IceMichael (~IceMichae@dynamic-046-114-158-008.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[07:37:59] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[07:40:40] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:41:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[07:41:59] *** Joins: emika2 (~emika@83.136.182.18)
[07:42:03] <AhmedAmerican> what that mean when a url ending with `.do` ?
[07:44:09] *** Quits: emika (~emika@83.136.182.234) (Ping timeout: 248 seconds)
[07:44:09] *** emika2 is now known as emika
[07:46:45] <AhmedAmerican> am trying to login into https://pauldingk12.sfe.powerschool.com/logOnInitAction.do using POST request but looks like there's something i missing here
[07:46:55] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[07:50:26] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[07:50:27] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[07:50:44] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:51:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[07:51:08] *** Joins: srhm (~ascii@user/srhm)
[07:54:00] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[07:57:06] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 268 seconds)
[07:57:09] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 276 seconds)
[07:58:01] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Quit: Leaving)
[08:00:20] *** Joins: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net)
[08:00:40] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-f81d-c689-242f-5b5b.res6.spectrum.com) (Quit: jarthur_)
[08:01:03] *** Quits: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net) (Client Quit)
[08:01:51] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:02:17] *** Quits: y1n (~y1n@84-115-65-111.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[08:04:00] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Sleeping...)
[08:04:08] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[08:04:11] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:05:34] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[08:07:56] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:548:e077:97d6:10f7)
[08:09:04] *** Joins: Atque (~Atque@user/atque)
[08:09:21] *** Quits: stdout (~stdout@50.115.255.72) (Quit: Leaving)
[08:10:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:12:23] *** Joins: oldguy (~oldguy@90.244.247.40)
[08:13:13] <aphysically> on windows does tempfile's tempdir default to a location backed by RAM or disk?
[08:13:14] *** Quits: jazzy (~jaziz@2600:380:8638:b14c:7cc3:e178:6be5:3cf1) (Ping timeout: 252 seconds)
[08:13:59] <aphysically> on a lot of common linux machines it defaults to /tmp set up to be backed by RAM, hence I'm manually creating a separate large tempdir in /var/tmp for excessively large tempfile (>20 GB), but I'm not sure how to be portable to windows
[08:15:08] *** Joins: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at)
[08:15:58] *** Quits: xernaron (~xernaron@box.xernaron.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[08:16:00] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[08:16:08] *** Joins: p-i- (~Ohmu@mx-ll-171.6.229-217.dynamic.3bb.co.th)
[08:17:45] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 248 seconds)
[08:18:06] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:21:08] *** Quits: p-i- (~Ohmu@mx-ll-171.6.229-217.dynamic.3bb.co.th) (Ping timeout: 268 seconds)
[08:21:13] *** Quits: ckdcreation (~ckdCreati@147.55.133.131) (Read error: Connection reset by peer)
[08:21:26] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:22:18] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[08:22:33] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:22:38] *** Joins: srhm (~ascii@user/srhm)
[08:22:56] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:23:11] *** Quits: oldguy (~oldguy@90.244.247.40) (Quit: Leaving)
[08:24:56] *** Joins: Burrr (~Burrr@urmomma-fux0rs-with.burrr.nl)
[08:26:48] *** Joins: xernaron (~xernaron@box.xernaron.ch)
[08:28:43] *** Joins: torandu (~sean@94.10.125.197)
[08:32:53] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[08:33:08] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:33:28] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[08:35:02] *** Joins: dcaro (~dcaro@user/dcaro)
[08:35:32] *** Quits: yvehan (~yvehan@14.21.31.50) (Ping timeout: 272 seconds)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:30] *** Joins: yvehan (~yvehan@117.136.79.155)
[08:37:15] *** Joins: djapo (~archangel@user/djapo)
[08:38:05] *** Quits: Fluxx (~Fluxx@user/fluxx) (Read error: Connection reset by peer)
[08:38:24] *** Joins: Fluxx (~Fluxx@user/fluxx)
[08:38:38] *** Quits: dcaro_away (~dcaro@user/dcaro) (Ping timeout: 272 seconds)
[08:40:56] *** Quits: xernaron (~xernaron@box.xernaron.ch) (Quit: ZNC 1.8.2 - https://znc.in)
[08:42:17] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[08:42:30] *** Joins: gloin (~gloin@user/gloin)
[08:43:46] *** Joins: dcaro_ (~dcaro@user/dcaro)
[08:44:09] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[08:45:21] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:45:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[08:46:30] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 258 seconds)
[08:46:55] *** dcaro_ is now known as dcaro
[08:47:39] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4508-4e06-3829-096f.res6.spectrum.com)
[08:48:42] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[08:49:19] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[08:49:23] *** Quits: dermato (~dermatobr@154.21.23.75) (Quit: WeeChat 3.1)
[08:50:32] *** Joins: upsala (~zcb@185.213.155.160)
[08:52:37] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[08:52:52] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 256 seconds)
[08:53:24] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 258 seconds)
[08:54:01] *** Quits: y1n (~y1n@84-115-64-32.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[08:57:10] *** Quits: Elzington (~Elzington@66.115.189.145) (Quit: Leaving)
[08:58:35] *** Joins: someguy123 (~someguy@user/someguy123)
[09:00:49] *** Quits: someguy1233 (~someguy@user/someguy123) (Ping timeout: 268 seconds)
[09:01:13] *** Quits: nyah (~nyah@51.146.30.113) (Ping timeout: 268 seconds)
[09:03:27] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 245 seconds)
[09:04:12] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 256 seconds)
[09:04:46] *** kulernil is now known as kuler
[09:05:31] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[09:06:03] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[09:08:21] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 258 seconds)
[09:10:03] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:10:48] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:12:47] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:13:40] *** Joins: audio (~audio@2603-8081-1800-00ad-cdc9-c13c-5e2e-2f9a.res6.spectrum.com)
[09:13:45] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[09:14:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:14:48] *** Joins: srhm (~ascii@user/srhm)
[09:15:02] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[09:15:16] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:16:23] *** Joins: thiras (~thiras@user/thiras)
[09:17:39] *** Joins: IceMichael (~IceMichae@dynamic-046-114-157-178.46.114.pool.telefonica.de)
[09:18:02] *** Quits: yvehan (~yvehan@117.136.79.155) (Read error: Connection reset by peer)
[09:18:22] *** Joins: yvehan (~yvehan@183.14.28.32)
[09:20:58] *** Quits: LiftLeft (~LiftLeft@212.102.58.168) (Ping timeout: 268 seconds)
[09:22:10] *** Quits: rud01f (rud0lf@user/rud0lf) (Ping timeout: 240 seconds)
[09:24:42] *** Quits: whatsupdoc (uid509081@id-509081.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[09:29:31] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Quit: stoiclunchbox)
[09:29:48] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[09:31:14] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[09:31:23] *** Joins: stranac (~stranac@195.29.239.126)
[09:31:54] <twainwek>  /tmp backed by ram?
[09:32:10] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[09:32:35] *** Joins: molt (~molt@79.140.150.21)
[09:32:39] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[09:34:26] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Ping timeout: 272 seconds)
[09:34:50] *** Joins: LiftLeft (~LiftLeft@154.21.28.54)
[09:35:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:35:15] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Client Quit)
[09:35:18] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[09:35:34] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 258 seconds)
[09:35:38] *** Joins: srhm (~ascii@user/srhm)
[09:36:21] *** audio is now known as audiocat
[09:37:00] *** Joins: upsala (~zcb@185.213.155.160)
[09:38:38] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 258 seconds)
[09:45:26] *** Quits: yvehan (~yvehan@183.14.28.32) (Read error: Connection reset by peer)
[09:45:35] *** Quits: nbin_ (~nbin@user/nbin) (Quit: ZNC - https://znc.in)
[09:45:45] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[09:45:54] *** Joins: nbin (~nbin@user/nbin)
[09:47:02] *** Joins: jazzy (~jaziz@2600:380:873c:1b37:4c74:a0da:5de7:7a10)
[09:47:16] *** Joins: rud01f (rud0lf@user/rud0lf)
[09:47:19] <SnoopJ> aphysically, what kind of data are you interested in storing this way?
[09:47:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:48:13] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 258 seconds)
[09:48:35] *** Joins: dcaro (~dcaro@user/dcaro)
[09:48:56] <aphysically> the existing libraries for dealing with muxing subtitle-containing matroska containers together by concatenation require muxing the video and/or audio in with the subtitles in order to calculate the timing correctly, then the subtitles can be extracted
[09:49:23] <aphysically> so the file size is up to sum(video/audio streams)+sum(sub streams
[09:50:20] <aphysically> twainwek: yeah this is default on a lot of systems, it's a tmpfs (ram)
[09:50:48] <twainwek> i've rarely seen /tmp mounted as tmpfs on systems i use
[09:52:12] <SnoopJ> aphysically, and you want /tmp backed by RAM to make this process fast? Would FIFO pipes work instead?
[09:52:32] <aphysically> SnoopJ: no, I want it to *not* be in /tmp backed by RAM so the system doesn't run out of RAM
[09:52:54] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[09:53:19] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:53:23] <aphysically> on linux I'm just specifying /var/tmp and it's safe for almost any system, if windows doesn't store it in RAM then it's not a problem at all
[09:53:28] <SnoopJ> aphysically, that's never been the case in my experience either, only ever /dev/shm
[09:53:42] *** Joins: netsan (~netsan@user/netsan)
[09:53:47] <SnoopJ> but ideally the data doesn't need to be 'stored' anywhere, which is why I ask about named pipes
[09:54:17] <SnoopJ> if it's a thing being done to broker the exchange of data between wherever the streams are coming from and these libraries
[09:54:49] <aphysically> we'll see, I'm not sure if I can get mkvtoolnix to output to a named pipe
[09:55:03] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Read error: Connection reset by peer)
[09:55:04] <aphysically> I know I can get the input into ffmpeg as a named pipe though (which is extracting the output)
[09:55:09] <SnoopJ> ideally it doesn't even know it's a named pipe
[09:55:24] <SnoopJ> that's kind of the magic of them: for all the program writing/reading it knows, that's an honest-to-gosh file
[09:55:57] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[09:56:01] <SnoopJ> I've used this trick with ffmpeg before but I imagine it might work well here too
[09:57:36] <aphysically> let's try it, I've only messed with named pipes in bash before so let me write up some stuff to mess around with it
[09:59:33] *** Joins: kosh (~kosh@user/kosh)
[09:59:43] *** Joins: dcaro_ (~dcaro@user/dcaro)
[10:00:41] <aphysically> twainwek: re: /tmp as tmpfs, it's systemd that does it by default, unless your distribution overrides it
[10:00:47] <SnoopJ> to clarify, I'm not sure there's an equivalent on Windows, but there you can worry less about a location being backed by RAM, I think? I'm not entirely sure
[10:00:53] <aphysically> i.e. by setting it in fstab
[10:01:02] <aphysically> (or you override it yourself)
[10:01:15] <aphysically> or you mask the systemd unit I guess
[10:01:23] <aphysically> which your dist could do too
[10:02:12] <SnoopJ> oh neat, it has named pipes too apparently. Not sure how you use them from Python without the filesystem abstraction, win32api maybe
[10:03:03] <aphysically> I'm writing something only for my personal use so I'm not *super* concerned about portability, except for minimizing rewriting if/when I move machines around
[10:03:31] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[10:03:31] *** dcaro_ is now known as dcaro
[10:04:21] <SnoopJ> This example looks fairly tidy and complete: https://stackoverflow.com/a/51239081
[10:05:13] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:548:e077:97d6:10f7) (Quit: Leaving)
[10:05:39] *** Joins: arti (~arti@2001:bb8:4008:2020::f)
[10:08:35] *** Joins: willow (~willow@bay.systems)
[10:10:35] <willow> i was testing re.sub() in an interactive python shell.  when i ran it as re.sub('pattern', 'replacement', file) it didn't work but when i did re.sub(r'pattern', r'replacement', file) it did.  what does the 'r' do?
[10:12:37] <SnoopJ> willow, r'' is a "raw" string literal. It's frequently used with `re` to avoid having to escape your backslashes. I.e. "\\t" is annoying to write, so we can write r"\t" instead and get a string that is two characters long (instead of one tab character)
[10:13:27] <willow> SnoopJ: interesting.  the regex in question was copied from Perl
[10:14:22] *** Joins: lightbulbjim (~lightbulb@user/lightbulbjim)
[10:15:09] <willow> yeah i did have a few \d and \s in the regex
[10:15:35] <willow> so i would have had to use \\d and \\s when converting from Perl
[10:15:55] *** Joins: masber (~masber@178.197.196.20)
[10:15:59] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[10:16:35] <aphysically> I have a script to do this all in bash and it just recently passed 1300 lines so I spent a good chunk of this evening rewriting the skeleton in python
[10:16:43] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Remote host closed the connection)
[10:17:15] <SnoopJ> willow, where Perl's syntax for regex is fairly specific to them, Python's raw string literals apply to other cases where you'd want to avoid this escaping
[10:20:25] <aphysically> argparse is so much better than bash getopts
[10:21:17] <SnoopJ> click is even better ;)
[10:21:19] *** Quits: lightbulbjim (~lightbulb@user/lightbulbjim) (Quit: Leaving...)
[10:21:28] *** Joins: p-i- (~Ohmu@mx-ll-171.6.229-217.dynamic.3bb.co.th)
[10:21:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[10:21:34] <SnoopJ> but argparse can take you very far...right up until you stub your toe on the exposed sharp edges
[10:23:51] *** Quits: LiftLeft (~LiftLeft@154.21.28.54) (Ping timeout: 268 seconds)
[10:23:54] <InPhase> aphysically: Next time, set a bash cutoff at a much shorter line count.  :)
[10:24:13] <InPhase> aphysically: If you're over 100, it's definitely time to rethink.
[10:24:52] <InPhase> And often way before then, depending on the data and parsing involved.
[10:25:16] <SnoopJ> my manager appears to have caught the bug for Python dev tooling, we have been porting some bash scripts and I think he's going to give me the thumbs up to port a bunch of other ones and roll them up into something more manageable.
[10:25:33] <aphysically> InPhase: would you believe I built up jq parsing scripts in pure bash
[10:25:35] <SnoopJ> (yay, tools are great fun)
[10:25:43] <aphysically> lol
[10:26:20] *** Quits: p-i- (~Ohmu@mx-ll-171.6.229-217.dynamic.3bb.co.th) (Ping timeout: 268 seconds)
[10:26:26] <SnoopJ> aphysically, a former coworker wrote lovely jq koans into some embedded bash that was inside of Jenkins jobs. Slightly meta.
[10:26:28] *** Joins: a6a45081-2b83 (~aditya@223.226.228.68)
[10:27:00] <InPhase> aphysically: I suppose you're new to Python then, since you had instincts to do that in bash?  (If so, welcome to this more pleasant land.)
[10:27:46] <aphysically> well, I've used python a long time for scientific programming (my background is in physics)
[10:27:49] <aphysically> but not usually as a scripting language
[10:27:58] <InPhase> Ah.
[10:28:19] <SnoopJ> ha!
[10:28:26] <SnoopJ> us too :)
[10:28:37] <InPhase> Yeah, Snoop and I are both physicists.
[10:28:47] <aphysically> so I'm not super familiar with python's argument parsing, OS interoperability and such
[10:29:10] *** Quits: masber (~masber@178.197.196.20) (Ping timeout: 246 seconds)
[10:29:14] <aphysically> I actually just dropped out of my physics PhD program (I got my master's at least)
[10:29:41] <SnoopJ> Well done, I know exactly where that headspace is
[10:29:49] <aphysically> funding nonsense with covid and such wasn't worth it to me so I'm just moving into industry
[10:30:06] <InPhase> Yeah.  It can be a rough and uncomfortable process even in the best of times.
[10:30:06] <aphysically> my background is experimental particle physics
[10:30:08] <SnoopJ> Lots of expertise here, I gained most of the skills that took me on my own lateral shift (I work in computer vision) right here
[10:30:15] <SnoopJ> aphysically, I did accelerators :D
[10:30:35] <SnoopJ> more than a few friends doing HEP, though
[10:31:14] <aphysically> I'll do anything to not use ROOT again
[10:31:46] <InPhase> aphysically: If you later join us in ##not-physics, you can reminisce with all the current and former physicists in general chat.  Although at the moment I'm heading to sleep.  Goodnight.  :)
[10:31:52] <SnoopJ> nn
[10:32:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 248 seconds)
[10:32:10] <aphysically> night, maybe I'll check it out
[10:32:19] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[10:32:19] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:32:56] <SnoopJ> aphysically, as far as portability, the story is quite good these days. Re: argument parsing, I meant what I said about argparse, it's great, but click feels less in-the-way.
[10:33:35] <aphysically> I'll look into it, thanks
[10:33:35] <SnoopJ> I guess the story's always been good since it runs on a VM, but Python on Windows has improved a lot from my perspective, and making it better is an explicit priority of the core developers lately.
[10:34:40] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[10:35:47] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:5dea:b570:86f9:265d)
[10:38:40] *** Joins: sharperguy_ (~sharpergu@2001:16b8:5c50:fa00:cc97:eba3:55df:9c03)
[10:39:56] *** Joins: OMGKitteh (~OMGKitteh@2a03:6000:6e62:627::102)
[10:40:05] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[10:40:38] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:5dea:b570:86f9:265d) (Ping timeout: 252 seconds)
[10:41:45] <OMGKitteh> g'day! I need a bit of help in understanding the right question/wording to ask about de=duplicating some data in a pandas dataframe. I've got 2x columns that are timestamp and state (eg: https://pastebin.com/VdXXLhgG ), and I'm trying to find a way to de-duplicate runs of the same value in state. I just cant word right to figure out how to ask the right question
[10:42:13] <sveinse> I only wish they'd remove the specialness on Windows in venv by having everything in venv\Scripts\ while all other archs use venv/bin/. I find that very annoying because I always need to make special adoptions for venvs on Windows. Oh well.
[10:42:54] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Remote host closed the connection)
[10:43:26] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[10:45:11] *** Parts: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Textual IRC Client: www.textualapp.com)
[10:45:55] <jinsun> OMGKitteh: `results[~results.State.duplicated()]` ?
[10:46:03] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:34] *** Joins: seednode8 (~seednode@user/seednode)
[10:46:41] <mattf> With subprocess is there a way to launch multiple commands in background and capture the stdout from time to time but only what is new
[10:46:41] <OMGKitteh> jinsun: So, yeah.. I'm looking to find the pairs of state transitions, and if I de-dup, I'll lose the last datapoint in my example, sadly.
[10:47:26] *** Quits: inom (~inom@176.59.119.1) (Remote host closed the connection)
[10:47:38] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[10:48:20] <jinsun> ok ay so you don't want to dedup, you want to remove the rows where state change is zero
[10:48:31] *** Joins: Wulf (~Wulf@user/wulf)
[10:48:31] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 268 seconds)
[10:48:33] *** Joins: masber (~masber@vpn-121.cscs.ch)
[10:48:45] *** Joins: inom (~inom@176.59.119.1)
[10:48:46] <sveinse> mattf: yes, you use subprocess to open each of the processes, execute them without waiting and then you need to poll them to get the output.
[10:48:52] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Ping timeout: 245 seconds)
[10:49:23] <mattf> sveinse: the processes wont stop, they are intended to run as long as the whole application
[10:49:32] *** Joins: torandu (~sean@94.10.125.197)
[10:49:41] <sveinse> mattf: yeah, that's fine
[10:49:44] <OMGKitteh> jinsun: I think I need help re-forming my question tbh. I want to remove runs where state hasnt changed from previous value. Does that make sense?
[10:50:00] *** Joins: digilink (~digilink@user/digilink)
[10:50:03] <mattf> sveinse: Could you give an example?
[10:50:26] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Ping timeout: 250 seconds)
[10:50:38] *** yogoyo_ is now known as yogoyo
[10:51:12] <jinsun> OMGKitteh: yeah I think so, now thinking of a quick one liner to do that :D
[10:52:33] <jinsun> OMGKitteh: `results[results.State.diff() != 0]` ?
[10:52:50] <OMGKitteh> jinsun: omfg.... MAGIC
[10:53:00] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 258 seconds)
[10:53:11] <OMGKitteh> I was about to show you what I wanted by example: https://pastebin.com/1XjQYzuf . And this...is exactly what I need I believe
[10:53:24] *** Joins: jiffy (elijah@has.a.fluffy.sh33p.org)
[10:53:38] <OMGKitteh> Thank you SO MUCH!
[10:53:49] <sveinse> mattf: https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate . Use .wait() and/or .communicate() with a short timeout to check if there is data available for that process.
[10:55:04] <jinsun> OMGKitteh: nice, you're welcome :)
[10:56:30] <sveinse> mattf: If it is unacceptable with that delay while waiting, I'd recommend asyncio or any other async framework. YMMV
[10:57:36] *** Joins: p-i- (~Ohmu@2403:6200:8870:2b0f:5dea:b570:86f9:265d)
[10:58:31] *** Joins: gusto (~Augustus@109.255.100.54)
[10:58:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:58:58] *** Joins: fdan (~fdan@192.146.154.3)
[10:59:08] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[11:00:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[11:00:22] *** Lord_of_Life_ is now known as Lord_of_Life
[11:00:35] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[11:00:50] <mattf> thanks sveinse
[11:00:51] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[11:01:35] *** Joins: rendar (~rendar@user/rendar)
[11:02:05] *** Quits: p-i- (~Ohmu@2403:6200:8870:2b0f:5dea:b570:86f9:265d) (Ping timeout: 252 seconds)
[11:04:38] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[11:04:53] *** Joins: sazawal (~sazawal@122.161.170.192)
[11:05:16] <fdan> hi there
[11:05:20] <fdan> this is the logs i have
[11:05:21] <fdan> https://dpaste.org/yfDp
[11:05:25] <fdan> i want to extract the ip address
[11:05:42] <fdan> and if an ip address appears more than once, i need to have a count also to check how many times the ip appeared
[11:06:23] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[11:06:36] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:07:30] *** Joins: teut (~teut@182.69.87.27)
[11:07:50] <teut> https://dpaste.org/AQ0e   I didnt call and func so makes the functions run?
[11:07:56] <teut> any func*
[11:08:03] <teut> so what*
[11:08:32] <Repiphany> fdan: collections.Counter(line.split(' ')[0] for line in log)
[11:09:13] <grawity> teut: you did
[11:09:19] <teut> where?
[11:09:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[11:09:23] <fdan> Repiphany anything without collections?
[11:09:24] <grawity> teut: printer() calls inner(), and inner() calls func()
[11:09:41] <teut> and where did I call printer
[11:09:41] <teut> ?
[11:09:45] <grawity> @printer
[11:09:55] <grawity> that's kinda what decorators do
[11:10:00] <grawity> find_duplicate_numbers = printer(find_duplicate_numbers)
[11:10:02] <teut> that calls it?   I didnt know that
[11:10:04] <grawity> yes
[11:10:05] *** Joins: wyclif (~wyclif@user/wyclif)
[11:10:10] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:10:12] <grawity> it's literally the point of @decorator
[11:10:26] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:10:29] <grawity> and usually the decorator is supposed to return just the wrapper function itself, without calling it
[11:10:32] <teut> it didnt happen before  when I used decorators
[11:10:36] <grawity> so instead of "return inner()" it should be "return inner"
[11:10:44] <Repiphany> fdan: count = {}; for line in log: count[line.split(' ')[0]] = count.get(line.split(' ')[0], 0)
[11:10:48] <teut> oh so thats the new thing I did
[11:10:59] <teut> ok, got it, thanks grawity
[11:11:17] <Repiphany> +1
[11:12:15] <Repiphany> Why would you avoid collections
[11:12:35] <teut> whats the decorator page called in the docs?
[11:15:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:15:33] *** Joins: wyclif (~wyclif@user/wyclif)
[11:19:38] *** Joins: kushal (~hopless@dgplug/kushal)
[11:20:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:20:25] *** Joins: kostkon (~androirc@2a02:587:a110:f169:3115:57c0:a33f:71f6)
[11:21:02] *** Joins: wyclif (~wyclif@user/wyclif)
[11:21:02] <kushal> Can you tell me about some projects (as examples) who are using Poetry for dependency management?
[11:23:09] *** Quits: teut (~teut@182.69.87.27) (Quit: Connection closed)
[11:23:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:25:12] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:c161:5dea:b116:d76e)
[11:25:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:26:28] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4508-4e06-3829-096f.res6.spectrum.com) (Ping timeout: 272 seconds)
[11:26:32] <fdan> Repiphany no it doesnt work
[11:26:33] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[11:26:33] *** Joins: wyclif (~wyclif@user/wyclif)
[11:27:02] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:27:07] <Repiphany> I missed the + 1
[11:27:18] <fdan> Repiphany this is what i get
[11:27:19] <fdan> {'\n': 0, '9': 0, '3': 0, '.': 0, '1': 0, '8': 0, '0': 0, '7': 0, '': 0, '-': 0, '[': 0, '/': 0, 'M': 0, 'a': 0, 'y': 0, '2': 0, '5': 0, ':': 0, '+': 0, ']': 0, '"': 0, 'G': 0, 'E': 0, 'T': 0, 'd': 0
[11:27:20] <fdan> , 'o': 0, 'w': 0, 'n': 0, 'l': 0, 's': 0, 'p': 0, 'r': 0, 'u': 0, 'c': 0, 't': 0, '_': 0, 'H': 0, 'P': 0, '4': 0, 'D': 0, 'e': 0, 'b': 0, 'i': 0, 'A': 0, '(': 0, '6': 0, '~': 0, 'x': 0, ')': 0}
[11:27:21] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[11:27:42] <fdan> where is the + 1 to be added?
[11:29:03] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c5e2-38fc-6a00-4acf.res6.spectrum.com)
[11:30:10] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:30:30] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:31:14] *** Quits: death916 (~death916@user/death916) (Ping timeout: 252 seconds)
[11:32:15] <Repiphany> fdan: https://bpa.st/TF7Q
[11:34:00] *** Quits: dre (~dre@2001:8003:c932:c301:e84:4d36:2dec:8e23) (Quit: Leaving)
[11:36:13] *** Quits: ouzel8_ (~ouzel8_@nor1196003.lnk.telstra.net) (Quit: Ping timeout (120 seconds))
[11:36:33] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:37:10] <sazawal> Hi all. I want to make a python app to communicate between my remote server and local client. The server is trustworthy, but I want to protect the server from random client attacks. So, I need some kind of Client authentication. I followed this using Twisted, https://twistedmatrix.com/documents/current/core/howto/ssl.html . Please explain me in the 'Client Authentication' section of this page, why both client and server using the same
[11:37:10] <sazawal> server.pem/public.pem files? Shouldn't they use different key files as private and public key?
[11:37:40] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[11:38:04] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[11:38:30] *** Joins: srhm (~ascii@user/srhm)
[11:38:44] *** Joins: sgn (~sgn@user/sgn)
[11:39:03] *** Joins: JanC (~janc@user/janc)
[11:41:45] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[11:41:53] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[11:42:31] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:42:56] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[11:45:34] <fdan> Repiphany what is count
[11:45:38] *** Joins: zaquest (~notzaques@5.128.210.178)
[11:45:40] <fdan> is it a dictionary
[11:47:01] *** Joins: dvx (~dvx@185.63.97.64)
[11:47:56] <Repiphany> type(count)
[11:48:45] <mattf> sveinse: Should that communicate thing work even if im using shell=True?
[11:49:12] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:49:19] <mattf> It is outputing to my shell but my program doesn't seem to be capturing it
[11:49:55] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@212.3.196.151)
[11:50:04] <petaflot> jinsun: turns out I had to use {"a4paper": True}
[11:50:14] *** Quits: hafat (~hafat@159.146.87.68) (Ping timeout: 256 seconds)
[11:50:49] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Ping timeout: 268 seconds)
[11:51:47] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:52:34] <jinsun> petaflot: oh, in document_options itself or somewhere else?
[11:52:35] <grawity> sazawal: I think the intention is that the client would hav ea public.pem with public+private (or cert+key), but server.pem with *only* public (cert)
[11:52:57] <grawity> sazawal: and the server would have them the opposite way (it would have the public keys for both, but private key only in server.pem)
[11:53:19] <grawity> sazawal: there's no strict standard as to what goes into a .pem file other than "it's kinda PEM-related"
[11:53:52] <grawity> (I'd generally prefer using separate server.crt + server.key files )
[11:54:48] <petaflot> jinsun: in Document(geometry_options={})
[11:54:49] *** Quits: odinsbane (~mbs@pat-pool-138.crick.ac.uk) (Ping timeout: 248 seconds)
[11:55:20] <petaflot> I have this weird issue though.. I?m pulling a string from a database, and single quotes are missing
[11:55:29] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[11:57:58] <jinsun> petaflot: okay, so their docs are a bit misleading, they say it takes str or list for both document_options and geometry_options
[11:58:45] *** Parts: OMGKitteh (~OMGKitteh@2a03:6000:6e62:627::102) ()
[11:58:53] <sazawal> grawity, I see. So I generate a private key with certificate and the corresponding public key. I'd put private-key in public.pem and certificate in server.pem on client side. And public-key in public.pem and certificate in server.pem on the server side. Does that make sense?
[11:58:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[11:59:05] <jinsun> but makes sense it would take a dict because many options take a value also, they are not boolean flags
[11:59:18] *** Joins: srhm (~ascii@user/srhm)
[12:00:22] <jinsun> petaflot: so "I'm" is getting converted to "I?m" ?
[12:00:39] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[12:00:39] <sazawal> grawity, Oh but why should I use certificate on the server side. The certificate should be sent by the client to the server.
[12:01:02] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[12:01:28] <petaflot> jinsun: no.. "I'm" is converted to "Im"
[12:01:31] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:02:18] <petaflot> typing a quote directly works as expected. printing the string in the shell also works as expected.
[12:04:16] <petaflot> I tried enclosing the string in a triple-quoted f-string, no change
[12:05:45] <graingert> petaflot: show your code?
[12:06:13] <sazawal> Hey graingert
[12:06:36] <graingert> sazawal: Yo
[12:07:43] <sazawal> graingert, You are graingert[m] right? I talked to yesterday regarding Twisted?
[12:07:56] *** Joins: emika6 (~emika@185.207.249.114)
[12:08:03] <graingert> Yep
[12:08:19] <graingert> They should both be registered to graingert on NickServ
[12:08:42] *** Quits: emika (~emika@83.136.182.18) (Ping timeout: 268 seconds)
[12:08:42] *** emika6 is now known as emika
[12:08:53] *** Quits: a6a45081-2b83 (~aditya@223.226.228.68) (Remote host closed the connection)
[12:09:21] <sazawal> Lol, yea
[12:09:55] *** Joins: mavrix (~mavrix@user/tinwasp)
[12:11:25] <sazawal> I still don't get it why there are both the same public.pem/server.pem on both client and server sides
[12:11:46] <graingert> sazawal: There shouldn't be
[12:12:26] <graingert> sazawal: usually you put a full chain in your server SSLContext
[12:12:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c5e2-38fc-6a00-4acf.res6.spectrum.com) (Ping timeout: 245 seconds)
[12:12:38] <graingert> And then the CA goes in the client SSLContext
[12:12:38] <sazawal> I am sure they have different contents on the both sides, just the filename is same
[12:12:59] <sazawal> graingert, Sorry what do you mean by full chain?
[12:13:38] <graingert> The way I do it is one file with key, leaf and all the certs in the chain other than the root CA called server-chain-and-key.pem
[12:13:48] <mattf> why subprocess.communicate doesn't capture output from another python program that is printing to it
[12:13:56] <graingert> And one file with the CA in called ca.pem
[12:14:02] <petaflot> it's basically doc.append( b"I'm happy".decode('utf8') )
[12:14:14] <graingert> mattf: you probably didn't pass the capture_output kwarg
[12:14:33] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Ping timeout: 248 seconds)
[12:14:37] <petaflot> but this works
[12:14:51] <mattf> proc=sb.Popen(cmd, shell=True, universal_newlines=True, stdout=sb.PIPE, stderr=sb.PIPE)
[12:14:51] <mattf> o, e = proc.communicate(timeout=5)
[12:14:51] <mattf> print(o)
[12:14:51] <mattf>  
[12:14:56] <mattf> basically that
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:18] *** Quits: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:15:21] <mattf> without the stdout attribute it was printing on the shell, with it it stopped but i dont have o populated on my program
[12:15:29] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[12:15:30] <graingert> mattf: Can you make a running demo?
[12:15:36] <petaflot> http://dpaste.com/264CEFDY9
[12:16:04] <petaflot> near line 360
[12:16:12] *** Joins: slav0nic (slav0nic@python.su)
[12:16:19] <mattf> graingert: It is quite a hack...
[12:16:46] <petaflot> lines 356-357 actually
[12:17:08] <mattf> what does stdout = subprocess.PIPE does?
[12:17:17] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[12:18:03] <mattf> do i need htat
[12:18:05] *** Joins: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683)
[12:18:15] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[12:18:18] *** Joins: graingert[m] (~graingert@2001:470:69fc:105::653)
[12:18:53] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-689a-ca8a-2763-8a94.res6.spectrum.com)
[12:18:57] *** Joins: Julian (~tos9@python/site-packages/Julian)
[12:19:05] <bolnav[m]> We found a bug on functools' online docs, but don't have an account to report, where can I ask for someone to report it?
[12:19:08] *** Quits: mavrix (~mavrix@user/tinwasp) (Ping timeout: 256 seconds)
[12:19:16] <petaflot> back-quotes it work
[12:19:20] <sazawal> graingert, I gotta read about it more
[12:20:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:20:41] <mattf> oh do i have to call poll if it is a never ending process?
[12:20:46] *** Joins: wyclif (~wyclif@user/wyclif)
[12:21:01] *** Joins: Tier (~tier@37.214.52.86)
[12:21:02] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 268 seconds)
[12:22:07] <zamba> hi! i have a string that i want to slice a lot of data out of.. instead of having to do lots of field1 = data[3:5], field2 = data[5:7] and so on.. is it possible to create a map with all those slices predefined?
[12:22:11] <graingert[m]> mattf: ?
[12:22:26] <graingert[m]> bolnav[m]: Can you link to the bug?
[12:22:35] <graingert[m]> sazawal: ?
[12:22:54] <mattf> graingert[m]: The process didn't stop, I want to dynamically read its output
[12:23:22] <graingert[m]> mattf: Oh right, can you make a running demo?
[12:23:23] <Repiphany> zamba: You can have a list of slices like `slices = [slice(3,5), slice(5,7), ...]`
[12:23:39] *** Quits: Mija (~Mija@user/mija) (Quit: Mija)
[12:23:57] <sazawal> graingert[m], I have to read how the authentication is actually done. The thing you talked about chain is not familiar to me.
[12:24:18] <sazawal> I just know the simple public key private key authentication
[12:24:29] <graingert[m]> sazawal: Usually there's a CA file on every clients's computer and it's the same for everyone
[12:24:34] <fdan> Repiphany  count.get(line.split(' ')[0], 0) + 1, here what is the last 0
[12:24:40] <fdan> i dont understand the last part
[12:24:58] <Repiphany> If the key isn't already in the dict, it returns 0 to start
[12:24:58] <graingert[m]> The keys to all these CAs are extremely valuable. Probably the most valuable key material in the world
[12:25:14] <sazawal> graingert[m], CA file is not the certificate?
[12:25:21] <graingert[m]> But they need to use the keys to sign hundreds of thousands of certificates an hour
[12:25:23] <Repiphany> A way of not using collections.defaultdict(int)
[12:25:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[12:25:42] <graingert[m]> sazawal: No the CA file is not the certificate
[12:26:15] *** Joins: wyclif (~wyclif@user/wyclif)
[12:26:19] *** Joins: MetalSutton (~MetalSutt@101.100.153.131)
[12:26:43] <graingert[m]> To sign hundreds of thousands of certificates per hour you need to distribute a key over many servers and connect it to the internet!
[12:27:03] <MetalSutton>  I have a running script, either python, or shell, stuck in a loop. The python code is autolaunched at boot, and monitors a button for avr programming. on pressing, it launches a programming sequence. But i have messed with the code, and for some reason when it successfully uploads, it keeps uploading repeatedly. (i can see the leds flashing on a hat)
[12:27:25] <MetalSutton> It doesnt go into a loop if it fails, only if it uploads correctly. Does anyone know how i can spy on the processes? There are print("this") in the python code, but nothing outputs in the terminal.
[12:27:38] <graingert[m]> So what they do is use their root CA to sign a number of intermediate certificates and keep the root in cold storage on a machine that can only sign new certificates
[12:28:00] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:28:47] <graingert[m]> And so that means when you use a server.key to make a server.pem that server.pem will include a chain of intermediate certificates
[12:28:48] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:29:32] <sazawal> graingert[m], I see. Complicated stuff as for now. But I get it a little.
[12:30:27] <graingert[m]> sazawal: It does mean there's an opportunity for two types of misconfigurations
[12:30:44] *** Joins: shad (~shad@user/shad)
[12:30:53] <graingert[m]> One is where you only include the leaf certificate in your server configuration. This means clients have to go and crawl around to find all the intermediates
[12:31:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:31:20] <graingert[m]> The other is where you include all the certificates leaf, intermediates and CA
[12:31:23] <sazawal> graingert[m], What I read is that there is an authority CA, which uses it's private key to encrypt the client's certificate. That is then produced to server, the server decrypts it using CA's public key, if I am not wrong.
[12:31:38] <graingert[m]> However you already know the client has the CA file otherwise they won't trust your server, so it's a waste of bytes
[12:31:43] *** Joins: wyclif (~wyclif@user/wyclif)
[12:32:27] <graingert[m]> sazawal: No encryption happens at all at this level
[12:32:28] <sazawal> graingert[m], Tell me please some webpage where they talk about all this
[12:32:49] <graingert[m]> It's all signatures (which for some systems encrypt, decrypt and sign are all symmetrical)
[12:33:00] <graingert[m]> But in other's they're not
[12:33:06] <sazawal> I see
[12:33:43] <graingert[m]> I did a course in it at uni which I flunked
[12:34:18] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[12:34:20] <sazawal> In my case I can just use the self signed certificates. I don't need a third party to authenticate. The server is mine, the clients are mine. I just don't want other fake clients to intercept the communication or connect to the server
[12:34:27] <sazawal> graingert[m], Lol
[12:34:38] <graingert[m]> Mostly I learnt all this from getting an A+ rating on https://observatory.mozilla.org/
[12:34:55] <graingert[m]> sazawal: You should still use letsencrypt certificates
[12:35:49] <sazawal> graingert[m], Don't I need to pay for a domain for letsencrypt certificate?
[12:35:54] <graingert[m]> Ironically letsencrypt certificates aren't used for encryption, afaik temporary key pairs are used for encryption and letsencrypt certs are used to authenticate that process
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:37:14] *** Joins: wyclif (~wyclif@user/wyclif)
[12:37:16] <graingert[m]> sazawal: Yeah but they're like £10 per year from Gandi.net
[12:38:05] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:38:26] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[12:39:27] <sazawal> graingert[m], Okay money aside, I am not really hosting a website. It is an amazon server I access via ssh. I am making an app which runs on my local client which has to communicate with the server time to time.
[12:40:09] <graingert[m]> sazawal: Oh Amazon also runs free certs and cheap nameservers
[12:40:28] <graingert[m]> And it's a registrar
[12:41:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:41:54] * graingert[m] uploaded an image: (6KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/HasDGGxSDKUHpwAMsxgBeZdp/2Q%3D%3D.jpg >
[12:41:55] <graingert[m]> It's even easier to get a cert from Amazon because when they host your DNS they can just authenticate themselves instantly
[12:42:00] *** Joins: manti7 (~manti7@176.10.104.94)
[12:42:44] *** Joins: wyclif (~wyclif@user/wyclif)
[12:43:46] <sazawal> graingert[m], I see there are security groups on my amazon ec2 console. I have opened all IPs for the incoming traffic but when I connect via ssh, I still need a key.pem to connect. But when I opened TCP for all IPs, it just connects via Twisted without asking for a key.
[12:44:13] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:44:24] <sazawal> I have opened all IPs for the incoming traffic SSH but when I connect via ssh...*
[12:44:32] <graingert[m]> Yeah TCP is unauthenticated by default
[12:44:56] <sazawal> graingert[m], I should check if there is an SSL connection in amazon console
[12:45:28] <graingert[m]> I think ALB does it
[12:46:38] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[12:46:51] <graingert[m]> https://trio.readthedocs.io/en/stable/reference-io.html?highlight=open_tcp_connection#trio.serve_ssl_over_tcp should just do the right thing though
[12:47:17] <graingert[m]> You'll need to authenticate the client using a cookie though
[12:47:28] *** Joins: lethu (~lethu@user/lethu)
[12:47:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:47:52] *** Quits: lethu (~lethu@user/lethu) (Client Quit)
[12:48:04] <sazawal> No SSL/TLS, neither ALB
[12:48:07] *** Quits: fdan (~fdan@192.146.154.3) (Ping timeout: 246 seconds)
[12:48:12] *** Joins: lethu (~lethu@user/lethu)
[12:48:15] *** Joins: wyclif (~wyclif@user/wyclif)
[12:50:34] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[12:51:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:52:32] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Quit: Leaving)
[12:52:36] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 272 seconds)
[12:52:41] *** Joins: ouzel8_ (~ouzel8_@110.148.212.146)
[12:52:57] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:53:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:53:46] *** Joins: wyclif (~wyclif@user/wyclif)
[12:54:33] *** Joins: ihristov (~ihristov@85.187.46.226)
[12:56:20] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[12:56:36] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[12:56:52] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[12:57:11] *** Joins: torandu (~sean@94.10.125.197)
[12:58:23] <dale> I propose a short jail term for people who use __slots__ in all but the most dire circumstances.
[12:58:49] *** Joins: Karel (~Karel@ptr-9091p58zj2jou4kni9t.18120a2.ip6.access.telenet.be)
[12:58:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[12:59:04] <no_gravity> I am doing this to write data to the clipboard: subprocess.check_call('echo \''+text+'\' | xclip -i -selection clipboard', shell=True)
[12:59:12] <no_gravity> Is that a good way? It seems a bit clumsy.
[12:59:17] *** Joins: wyclif (~wyclif@user/wyclif)
[12:59:33] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[12:59:46] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:00:05] <jochum> no_gravity: very short google gives that: https://pypi.org/project/pyperclip/
[13:01:09] <no_gravity> jochum: Thanks. I would not want to add an external dependency for it. If that is the next best option, then I stay with my current approach.
[13:01:10] <dale> no_gravity: I'd at least do something like: subprocess.run("xclip -i -selection clipboard".split(), check=True, input=text)
[13:02:02] <no_gravity> dale: Interesting. That looks nicer than my approach to pipe it. I will try it.
[13:02:06] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 272 seconds)
[13:02:17] <dale> no_gravity: Hm, you may need to add stdin=subprocess.PIPE, I can't remember.
[13:02:36] <dale> Oh, and maybe text=True or something like that to tell it to accept a str rather than bytes.
[13:02:50] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:03:14] *** Joins: georgios (~georgios@user/georgios)
[13:04:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:04:46] *** Joins: wyclif (~wyclif@user/wyclif)
[13:04:55] *** Joins: upsala (~zcb@185.213.155.160)
[13:05:43] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:06:16] *** Joins: entuland (~entuland@user/entuland)
[13:06:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:07:20] *** Joins: srhm (~ascii@user/srhm)
[13:08:26] *** Quits: sharperguy_ (~sharpergu@2001:16b8:5c50:fa00:cc97:eba3:55df:9c03) (Ping timeout: 256 seconds)
[13:09:22] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:09:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:10:19] *** Joins: wyclif (~wyclif@user/wyclif)
[13:10:23] <graingert> dale: slots is great!
[13:10:34] <graingert> dale: I use them on most classes via @attr.frozen
[13:10:50] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.2)
[13:10:56] <graingert> dale: people forgetting the `__weakref__` is annoying
[13:10:57] *** Joins: Naan (~Naan@user/naan)
[13:11:05] <anorthall> Naan bread
[13:11:12] *** Joins: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp)
[13:11:37] *** Joins: f8l12 (~f8l12@154.3.40.16)
[13:12:21] <dale> If you're using attrs to set it, OK, maybe then it's OK.  Not having __dict__ is annoying.
[13:12:25] <no_gravity> Now I notice that when you are in a docker container, you cannot use xclip. As xclip is tied to the display.
[13:12:40] <f8l12> in this code, is line 33 doing anything? https://dpaste.org/PEcu#L33 it's a pandas dataframe
[13:12:56] <dale> no_gravity: If it's really important you could probably tunnel in DISPLAY from the outside.  docker run ... -e DISPLAY="$DISPLAY" or something?
[13:13:32] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[13:13:33] <no_gravity> dale: Hmm... I think I will discard the clipboard functionality and just write it to a file that I open on the host.
[13:14:02] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:03] <dale> Oh, heh, I just remembered you'd have to mount up the socket, too.  If we're still using sockets these days.  I don't know how different Wayland is.
[13:14:05] *** Quits: Gerula (~Gerula@user/gerula) (Ping timeout: 252 seconds)
[13:14:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:15:14] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 256 seconds)
[13:15:43] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[13:15:49] *** Joins: wyclif (~wyclif@user/wyclif)
[13:16:21] *** Joins: Kvothe (~weechat@user/elodin)
[13:18:06] <graingert[m]> <dale> "If you're using attrs to set it,..." <- when is not having a `__dict__` annoying?
[13:18:14] *** Quits: ouzel8_ (~ouzel8_@110.148.212.146) (Quit: Client closed)
[13:18:30] *** Joins: torandu (~sean@94.10.125.197)
[13:18:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[13:19:05] <dale> graingert[m]: Whenever you expect to have a __dict__ and it's not there because someone needlessly used __slots__.  Whenever you want to easily iterate over all the attributes and their values on an object.
[13:19:48] <jochum> no_gravity: https://stackoverflow.com/questions/43075050/how-to-yank-to-host-clipboard-from-inside-a-docker-container
[13:19:51] *** Joins: kmh (~kmh@p200300df5f0ef400f4ee0f98c3b51916.dip0.t-ipconnect.de)
[13:19:53] <graingert[m]> I don't think I've ever needed to do that
[13:19:58] *** Joins: ouzel8_ (~ouzel8_@110.148.212.146)
[13:20:13] <dale> graingert[m]: What's more annoying is when I'm writing a normal class and I try to set a normal attribute and I get an AttributeError which causes me to sit and stare at the screen, because why would that ever fail?  Oh, because someone decided to use slots because it exists and it's cool.
[13:20:18] <jochum> no_gravity: the last answer suggests to install a service on the host which you then manipulate through netcat.
[13:20:33] <graingert[m]> dale: I only set attributes in `__init__` though...
[13:20:45] *** Joins: oldguy (~oldguy@90.244.247.40)
[13:20:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:21:11] <graingert[m]> I've literally never has a problem with slotted objects - except those that are missing a `__weakref__`
[13:21:19] *** Joins: wyclif (~wyclif@user/wyclif)
[13:21:52] <dale> graingert[m]: OK, so you set some attribute in __init__ and you get AttributeError and you are now sitting there staring at the screen wondering why setting a new attribute on an object would fail.  Then you notice someone set __slots__ at the bottom of the class.
[13:22:20] <graingert[m]> I've never seen `__slots__` defined after `__init__`
[13:22:25] *** Quits: masber (~masber@vpn-121.cscs.ch) (Ping timeout: 246 seconds)
[13:22:29] *** Joins: cidtest (~cidtest@89.238.185.211)
[13:22:31] *** Quits: cidtest (~cidtest@89.238.185.211) (Client Quit)
[13:23:31] <no_gravity> jochum: I see. That is way too much trouble though. I will just write to a file.
[13:24:00] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:c161:5dea:b116:d76e) (Quit: Leaving)
[13:24:41] <jinsun> f8l12: it won't do anything if you run the file, if you put that inside print() then it will print the first 2 rows.
[13:25:45] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:26:01] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 248 seconds)
[13:26:06] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[13:26:20] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[13:26:51] <dale> graingert[m]: Can I come live with you, in your world?  Do they pay well there? :)
[13:26:54] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[13:27:15] <f8l12> jinsun, so lines 33, 38, etc are pointless?
[13:27:16] <graingert> dale: I've seen a lot of weird shit but not what you describe
[13:27:51] <dale> As far as I'm concerned, __slots__ is for memory and/or speed optimization.  I'd say about 80% of the time I see someone using __slots__ it's done on a whim.
[13:28:18] <dale> graingert: That's not even the weirdest shit I've seen *today*, my friend.  Count yourself lucky.
[13:28:41] <graingert> dale: I use it to stop people adding attributes to an object
[13:29:04] <graingert> the perf boost is a bonus
[13:29:13] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:29:24] <graingert> and also `__dict__` is catching up all the time and will probably be about as fast as __slots__ in 3.13
[13:29:31] <dale> graingert: I charge you with being unpythonic and sentence you to port a medium-sized EJB 1.0 code base to Plone.
[13:29:42] *** Joins: y1n (~y1n@84-115-65-174.wifi.dynamic.surfer.at)
[13:29:50] <dale> graingert: Huh, that's very interesting.
[13:30:01] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[13:30:01] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:30:04] <graingert> I think they have about the same memory use too
[13:30:08] <graingert> due to shared dicts
[13:30:13] <graingert> shared key dicts?
[13:30:15] <graingert> I'm not sure
[13:30:27] <dale> That would be news to me, and welcome news at that.
[13:30:37] <jinsun> f8l12: yes, unless maybe if you "run" the file by copy pasting line by line in the repl (which I know some people do), it will print without putting it inside print() in the repl
[13:30:51] <graingert> like they set of keys is re-used across instances of a class with the same attributes
[13:31:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:31:35] <graingert> and they're improving it so adding new keys bumps a version number or something so you only pay for stuff you use in addition
[13:31:39] <dale> https://stackoverflow.com/a/28059785 seems like a pretty good answer on __slots__, but one of the comments does suggest some improvement in memory usage of dicts.
[13:32:02] <graingert> yeah `__dict__` improvements have been a recent research area
[13:32:09] <dale> graingert: Oh, what a nice optimization, and maybe kind of obvious in hindsight.
[13:32:18] <dale> Nice because it seems relatively simple.
[13:32:21] *** Joins: wyclif (~wyclif@user/wyclif)
[13:32:31] <f8l12> jinsun, ok thanks
[13:32:31] <graingert> eg pypy ignore __slots__
[13:32:51] <graingert> because their dicts are *always* as memory efficient as slots
[13:33:05] <graingert> and so storing the "is slotted" flag wastes a byte
[13:33:59] <dale> graingert: So __slots__ doesn't prevent creating new attributes on objects under PyPy?
[13:34:10] <graingert[m]> I think not let me check
[13:34:32] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[13:34:49] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@212.3.196.151) (Quit: Connection closed)
[13:34:50] *** Joins: lifefir3 (~lifefir3@152.37.120.101)
[13:34:54] <graingert[m]> they do keep the AttributeError but that's it
[13:35:02] *** Quits: waxfire (~waxfire@65.119.2.240) (Ping timeout: 268 seconds)
[13:36:46] <graingert> https://doc.pypy.org/en/latest/interpreter-optimizations.html?highlight=__slots__#map-dicts
[13:37:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:37:51] *** Joins: wyclif (~wyclif@user/wyclif)
[13:38:01] <dale> graingert: Neat.  Thanks for making me learn something even as I'm just venting over some legacy code at 4 AM.
[13:40:09] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[13:40:14] *** Joins: torandu (~sean@94.10.125.197)
[13:41:01] *** Joins: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57)
[13:41:13] <Pyt001> hi is there any python library to redraw the image from pic , especially the curves like 8 shaped , opencv gives outlines which is not like 8 shaped , i posted this question yesterday too
[13:41:15] *** Joins: kostkon_ (~androirc@5-203-228-39.pat.nym.cosmote.net)
[13:43:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:43:06] *** Quits: oz4ga (~tim@93.90.4.233) (Ping timeout: 240 seconds)
[13:43:16] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[13:43:19] *** Joins: stoiclun1 (~stoiclunc@user/stoiclunchbox)
[13:43:27] *** Joins: wyclif (~wyclif@user/wyclif)
[13:44:21] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:44:42] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:44:46] *** stoiclunchbox is now known as stoiclunch
[13:44:52] *** stoiclun1 is now known as stoiclunchbox
[13:44:56] <jochum> Pyt001: please post a random "8 shaped" picture.
[13:45:16] *** Quits: kostkon (~androirc@2a02:587:a110:f169:3115:57c0:a33f:71f6) (Ping timeout: 256 seconds)
[13:45:32] *** Joins: masber (~masber@vpn-120.cscs.ch)
[13:45:45] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 248 seconds)
[13:45:54] <Julian> Pyt001: What do you mean by "redraw"?
[13:46:52] *** Joins: waxfire (~waxfire@65.119.2.240)
[13:47:32] *** Quits: oldguy (~oldguy@90.244.247.40) (Read error: Connection reset by peer)
[13:47:49] *** Quits: kostkon_ (~androirc@5-203-228-39.pat.nym.cosmote.net) (Read error: Connection reset by peer)
[13:48:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[13:48:08] *** Joins: kostkon_ (~androirc@athedsl-280460.home.otenet.gr)
[13:48:17] <Pyt001> jochum: https://www.google.co.in/search?q=8+shaped+pic&tbm=isch&source=iu&ictx=1&fir=f8S5z88KN8c_xM%252CiK1X__Ut2M7zsM%252C_&vet=1&usg=AI4_-kRy2g_TItjOTduHjwOtTRW84araRA&sa=X&ved=2ahUKEwi6wIrS1K3yAhX6zDgGHfhCDdkQ9QF6BAgJEAE#imgrc=dXynBc0R_8bhrM
[13:48:34] *** kostkon_ is now known as kostkon
[13:48:44] *** Joins: darksun (~darksun@user/darksun)
[13:48:53] *** Joins: wyclif (~wyclif@user/wyclif)
[13:49:18] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[13:49:42] <Pyt001> Julian: the input file like above will be used in python , and library like opencv, PIL, or any image libraries used to redraw the image , to capture the curve flow (with svg )
[13:49:57] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:50:02] *** Parts: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683) ()
[13:50:19] <Julian> Pyt001: So you want to detect 8-shaped curves in images?
[13:51:23] <Pyt001> julian : Yes however the outline or edge detect is not giving the way i wanted it , it just gives outlines and three shapes like outline and two circles inside it
[13:51:40] <Julian> In general as far as I know these are still very hard problems in the general case, and often require specifically tuned ML models for the images or shapes you're looking for.
[13:52:09] <Julian> E.g. here's a first google result about how even detecting cirlces is hard: https://www.pyimagesearch.com/2014/07/21/detecting-circles-images-using-opencv-hough-circles/
[13:53:29] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[13:53:34] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[13:53:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:54:17] <Pyt001> Julian: Ohhh , i thought some libraries should be available, let me check the url you have shared for circles
[13:54:22] *** Joins: wyclif (~wyclif@user/wyclif)
[13:56:13] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[13:56:18] *** Joins: qk1z (~qk1z@193-82-226-146.tpgi.com.au)
[13:56:22] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[13:56:57] <Pyt001> Julian: With open CV edgedetect gives separate outlines wherever the curve crosses it considers inside the curve as one object and outside as one object , in this 8 one outline , and two circles
[13:57:10] *** Quits: coc0nut_ (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[13:57:13] *** Joins: entuland (~entuland@user/entuland)
[13:57:30] *** Joins: node1 (~node1@user/node1)
[13:57:35] <Pyt001> Hope i explained my problem to some extent
[13:57:44] <supakeen> lemniscate
[13:58:26] <supakeen> (the term for figure-eight shaped thingy)
[13:58:32] <supakeen> not that i know how to detect :)
[13:58:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[13:59:03] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:59:05] <Pyt001> supakeen: yes lemniscate when i read the curve it comes different object hence i loose the path
[13:59:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[13:59:20] <Julian> Pyt001: What you described is a very hard unsolved problem :)
[13:59:23] <supakeen> but likely start with detecting a half circle (two of them), and the focus points then go from there?
[13:59:25] <Julian> Unless you have more constraints than these.
[13:59:28] <supakeen> i mean it seems super mathy
[13:59:30] *** Joins: srhm (~ascii@user/srhm)
[13:59:42] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[13:59:53] *** Joins: wyclif (~wyclif@user/wyclif)
[13:59:59] <jochum> Pyt001: https://www.pyimagesearch.com/2016/02/08/opencv-shape-detection/ <-- they detect a circle with opencv
[14:00:07] <Pyt001> Julian: i understand your point , i think it is not that easy
[14:00:10] *** Joins: besnn (~besnn@user/besnn)
[14:00:41] <jochum> Pyt001: but those circles are filled
[14:00:51] *** Joins: torandu (~sean@94.10.125.197)
[14:01:08] *** Joins: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net)
[14:02:21] <Pyt001> jochum: Yes Julian also shared an url on circle, even it is filled or not , the edge detect helps , however as outline it makes two lines if just circle if it is lemniscate (8 shaped) , it goes as 3 objects
[14:02:33] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[14:02:45] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[14:03:28] *** Joins: i0e (~is0ke3@user/is0ke3)
[14:03:45] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:04:01] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[14:04:27] *** Joins: wender (~Wender@189.37.69.27)
[14:04:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[14:05:23] *** Joins: wyclif (~wyclif@user/wyclif)
[14:05:57] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[14:08:02] *** Quits: computeiro (~Wender@189.37.65.46) (Ping timeout: 245 seconds)
[14:09:13] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[14:09:58] *** Joins: gggp (~gggp@60.10.194.45)
[14:10:11] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 268 seconds)
[14:13:33] *** Joins: gggp_ (~gggp@60.10.23.162)
[14:15:59] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[14:16:12] *** Quits: gggp (~gggp@60.10.194.45) (Ping timeout: 272 seconds)
[14:16:20] <no_gravity> This needs 34s: l1 = [1]; l2 = [2]; for i in range(int(10e4)): l1 = l1 + l2
[14:16:33] <no_gravity> This needs 0.03s: l1 = [1]; l2 = [2]; for i in range(int(10e4)): l1 += l2
[14:16:43] <no_gravity> A factor of 100 in speed. Is this real?
[14:17:05] <Julian> no_gravity: For CPython almost certainly, yes.
[14:17:29] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:17:37] <Julian> (Don't do the former, there's no reason to.)
[14:18:02] <bjs> no_gravity: yes, + and += aren't the same operation.  += does an in-place update (for lists) whereas + creates a new list
[14:18:49] *** Quits: y1n (~y1n@84-115-65-174.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[14:19:41] <no_gravity> Yes. I would have thought compilers catch this these days.
[14:19:44] <no_gravity> Let my try pypy ...
[14:20:09] <bjs> no_gravity: Python's compiler does not attempt to optimise (really at all), and like i said, they're not the same operation
[14:20:11] <Julian> CPython will do what you tell it to do, and what you told it to do is to make lots of lists.
[14:20:23] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[14:20:24] <bjs> you cannot just turn `l1 = l1 + l2` into `l1 += l2`
[14:20:33] <bjs> (maybe you can in your particular case, but not in general)
[14:20:38] <no_gravity> bjs: Why not?
[14:20:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:20:46] <bjs> no_gravity: because they're not the same operation?
[14:20:52] <Julian> Because you'd have to prove that += and = are equivalent, read what bjs is telling you :)
[14:20:54] <no_gravity> pypy brings the 34s down to 15s. Better but still bad.
[14:20:56] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[14:20:57] <bjs> One mutates the original list the other doesn't.
[14:21:08] <bjs> and for non-lists they might just do totally different things
[14:21:11] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[14:21:15] <Julian> no_gravity: You didn't time that right.
[14:21:19] <no_gravity> bjs: In what case could that result in different program behavior?
[14:21:24] <Julian> (Though you still may be correct, but yeah you didn't time it right for sure)
[14:21:35] <Julian> no_gravity: pypy will help after warmup, if at all.
[14:21:37] <bjs> no_gravity: well they're different operations one is mutating and the other isn't.
[14:21:44] <no_gravity> Julian: I just did "time pypy listappend.py" which contains the code I pasted.
[14:21:55] *** Joins: wyclif (~wyclif@user/wyclif)
[14:21:57] <bjs> no_gravity: e.g. `l1 = [1]; l2 = [2]; l3 = l1; ...`
[14:21:58] <Julian> Right. That's not the right way to time the example.
[14:22:00] <no_gravity> bjs: Still there should be no case where it does make a different.
[14:22:12] <bjs> no_gravity: no that's just clearly false because *one mutates* and the other *doesnt*
[14:22:15] <bjs> that's clearly a semantic difference
[14:22:25] <no_gravity> Julian: I like timing wall time. It gives me the real deal about the time used.
[14:22:57] <bjs> you should make sure to time pypy on the "faster" sequence too so you get an idea of the basic pypy overhead
[14:23:12] <bjs> but yes,  we all expect `l1 = l1 + l2` to be *much* slower than `l1 += l2`
[14:23:17] <no_gravity> Oh, and it is not a factor of 100 but a factor of 1000 \o/
[14:23:48] <nedbat> no_gravity: your original timings were a factor of 100
[14:23:49] <no_gravity> bjs: pypy for the += version takes 0.07s
[14:23:54] <nedbat> oops, nope
[14:24:00] <bjs> nedbat: no they were really x1000
[14:24:03] <nedbat> yup
[14:24:07] <bjs> but that's like, totally expected for that program
[14:24:23] <no_gravity> Let me try the equivalent in PHP ...
[14:24:25] <nedbat> no_gravity: do you understand what bjs means by "one mutates, the other doesn't"?
[14:24:34] <no_gravity> nedbat: Yes.
[14:24:45] <nedbat> no_gravity: so that explains the difference, right?
[14:25:08] <no_gravity> nedbat: Well, if you assume the compiler does no optimizations, then yes.
[14:25:21] <bjs> no_gravity: the compiler does not do any optimisations in Python.
[14:25:28] <no_gravity> bjs: Not even pypy?
[14:25:30] <nedbat> no_gravity: and if you assume that an optimization wouldn't change a non-mutation into a mutation.
[14:25:34] <bjs> no_gravity: well PyPy does of course
[14:25:42] <bjs> no_gravity: but remember that these two operations don't do the same thing
[14:25:48] <no_gravity> bjs: But pypy only gains 50%.
[14:26:02] <nedbat> no_gravity: pypy still has to do all the new list allocations
[14:26:03] <Julian> no_gravity: As I mentioned, if PyPy does this optimisation, your test wouldn't find it.
[14:26:07] <Julian> (I don't recall whether it does)
[14:26:17] <Julian> But you didn't warm up the interpreter, so you don't know whether pypy does it.
[14:26:30] <bjs> Julian: that is a good point too
[14:26:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:27:16] <bjs> Julian: although I'm always curious -how- true such things are
[14:27:25] <Julian> bjs: which things?
[14:27:27] *** Joins: wyclif (~wyclif@user/wyclif)
[14:27:33] <bjs> Julian: the warmup phase
[14:27:40] <no_gravity> PHP takes 0.26s
[14:27:41] <Julian> bjs: what about it
[14:27:42] <bjs> how much it really 'exists' in terms of timing behaviours
[14:27:49] <no_gravity> Ah no, that was for 10e6 iterations!
[14:27:55] <Julian> bjs: oh.. uh that story is quite hilarious actually
[14:27:56] <bjs> no_gravity: for which semantics?
[14:28:14] <no_gravity> With the same number of iterations as Python, PHP takes 0.03s.
[14:28:14] <Julian> bjs: https://www.youtube.com/watch?v=lIyU2OQdEZE
[14:28:33] <bjs> no_gravity: Python also took 0.03s for the mutable semantics
[14:28:36] <bjs> in your test
[14:28:41] <no_gravity> For both, $l1=$l1+$l2 and $l1+=$l2.
[14:28:46] <no_gravity> bjs: Yup
[14:28:50] *** Joins: reset (~reset@user/reset)
[14:29:07] <MetalSutton> Can anyone please help me with debugging my python script? (well someone elses)
[14:29:19] <Julian> (FWIW after warming the interpreter, it seems PyPy does not optimize this, though likely it could. I'm not sure it'd matter much though, i.e. whether any real code does this that matters)
[14:29:35] <bjs> no_gravity: you can't just test the same syntax in two languages you need to test the same semantics,  are those two programs actually equivalent in PHP ?
[14:29:43] <no_gravity> bjs: Probably.
[14:29:46] <Julian> no_gravity: You seem to often come in here with PHP comparisons -- if you like PHP, use it, but Python is a different language
[14:29:47] <MetalSutton> it has print() outputs, however the log file that i generate doesnt show the output of the python script at all. It only shows the output of a shell script that gets called inside the python script.
[14:29:49] <bjs> no_gravity: then it's not a valid test
[14:29:56] <bjs> no_gravity: doesn't PHP have like merge_array or something?
[14:30:18] <no_gravity> bjs: Why do you think it is not a valid test?
[14:30:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[14:30:26] <Julian> MetalSutton: Is something redirecting your output?
[14:30:30] <jaggz> anyone see why this is echo'ing back my audio (mic) almost immediately?  I'm storing samples in the buffer to make it repeat back only after 5 seconds.. but nooo.. https://pasteall.org/tXY4
[14:30:32] <Julian> MetalSutton: What's reading stdout on the process?
[14:30:42] <no_gravity> bjs: Oh, shit it is indeed not the same.
[14:30:45] <Julian> MetalSutton: And are you running interactively?
[14:30:48] *** Joins: srhm (~ascii@user/srhm)
[14:30:50] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 272 seconds)
[14:31:02] <bjs> no_gravity: because Python's `l1 += l2` and `l1 = l1 + l2` are not equivalent. If you're comparing these against PHP's `+` and `+=` then you need to make sure that PHP's is doing the same thing
[14:31:05] <Julian> MetalSutton: (You can try perhaps `open("/dev/tty").write("foo")` instead if you are)
[14:31:07] <bjs> no_gravity: otherwise what are you even testing?
[14:31:16] *** Joins: y1n (~y1n@84-115-65-174.wifi.dynamic.surfer.at)
[14:31:27] <no_gravity> bjs: Yes, yes .. give me a minute.
[14:32:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[14:32:09] *** Quits: upsala (~zcb@185.213.155.160) (Ping timeout: 248 seconds)
[14:32:25] <no_gravity> So it is probably this in PHP: $l1 = array_merge($l1,$l2);
[14:32:32] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:32:34] <no_gravity> Which takes ages :)
[14:32:40] <bjs> no_gravity: but you do this a lot, you come here with some tiny bit of Python code that performs badly that can easily be turned into something that performs just fine then you do some totally bogus timing comparison with random bits of syntax with PHP that aren't awlays obviously the same program
[14:32:57] *** Joins: wyclif (~wyclif@user/wyclif)
[14:33:00] <bjs> and often your benchmarks aren't done properly and they're very unreliable and what the comparison to PHP actually tells you is very unclear
[14:33:04] *** Joins: mickey (~user@user/mickey)
[14:33:09] <no_gravity> bjs: I agree on "come here a lot with python code that performs badly".
[14:33:14] <MetalSutton> Julian: its a python script that runs at boot via rc.local
[14:33:23] <no_gravity> bjs: But not on "can easily be turned into something that performs just fine".
[14:33:29] <MetalSutton> it outputs to a .log file.
[14:33:43] *** Quits: slav0nic (slav0nic@python.su) (Remote host closed the connection)
[14:33:56] <Julian> MetalSutton: try writing to a file instead perhaps
[14:34:07] <Julian> (instead of printing)
[14:34:08] *** Joins: upsala (~zcb@185.213.155.160)
[14:34:10] <no_gravity> $l1 = array_merge($l1,$l2); performs really bad in PHP. It is about 4x slower than Python.
[14:34:17] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (Ping timeout: 245 seconds)
[14:34:26] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[14:34:31] <no_gravity> Slower than the *slow* version in Python.
[14:34:37] <no_gravity> So 4000x slower than the fast version.
[14:34:48] <bjs> no_gravity: I really don't understand what the point of all this cross-language timing for such tiny benchmarks for random clearly inefficient bits of code is
[14:34:49] <bjs> or what it tells you
[14:34:51] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 268 seconds)
[14:34:52] *** Joins: matkor (~matkor@93.179.197.152)
[14:35:02] <rannnn8888> hi how i can deal with aiohttp.client_exceptions.ClientHttpProxyError: 407 ?  to catch him?
[14:35:16] <Julian> rannnn8888: `except aiohttp.client_exceptions.ClientHttpProxyError`
[14:35:20] <no_gravity> bjs: I disagree on the popular notion that micro benchmarks do not tell us something about the performance in bigger projects.
[14:35:23] <bjs> no_gravity: These benchmarks are invalid and you cannot use them to infer information in larger programs
[14:35:29] <bjs> no_gravity: microbenchmarks can, *yours* dont
[14:35:44] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:36:05] <bjs> You can write your benchmarks in better ways that do give more insight in that way, but e.g. your pypy benchmark almost certainly doesn't.
[14:36:18] <bjs> for, if nothing else, just the reason Julian points out
[14:36:31] <rannnn8888> Julian thxx i need put it in the try : ?
[14:36:39] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[14:36:44] <rannnn8888> https://bpa.st/HCGQ
[14:36:49] <Julian> rannnn8888: Yes
[14:37:11] <no_gravity> bjs: Whats wrong with my pypy benchmark?
[14:37:24] <bjs> no_gravity: well for a start the thing Julian said, PyPy uses a JIT
[14:37:37] *** Joins: Voyager2Spirit (~Voyager2S@176.45.37.90)
[14:37:49] <bjs> If you're going to microbenchmark things you *really* need to understand what's going on under the hood to be able to extrapolate these results to know how they extend to larger programs
[14:37:54] <bjs> but you don't know, and you constantly get it wrong
[14:38:01] <bjs> (at least for Python)
[14:38:16] <no_gravity> bjs: Why do you think the JIT makes the benchmark result wrong?
[14:38:16] *** Joins: slav0nic (slav0nic@python.su)
[14:38:19] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:38:30] <bjs> no_gravity: for the reason Julian points out, at minimum
[14:39:29] <nedbat> no_gravity: a micro-benchmark like this only matters if it measures the hotspot of a real program. otherwise it's useless. do you agree?
[14:39:37] *** Quits: srhm (~ascii@user/srhm) (Ping timeout: 248 seconds)
[14:40:02] <rannnn8888> Julian like this i gey syntex error https://bpa.st/WX3Q
[14:40:08] <Julian> no_gravity: you're free to continue asking the questions you seem to tend to ask, they're on topic -- but what I was saying (and bjs it sounds like too) is that your questions don't seem to be productive to *yourself* -- you're making trivial mistakes because of gaps in your understanding, but then extrapolating from your outputs
[14:40:12] <rannnn8888> on client_exceptions
[14:40:24] *** Quits: etch (~etch@user/etch) (Ping timeout: 268 seconds)
[14:40:38] <no_gravity> bjs: He mentions warmup. But I don't see how that matters. I run my program and have to wait a certain time. What does it help me that there might be certain other situtations where warmup kick in?
[14:40:42] <Julian> no_gravity: you'd be way better served (and we'd be way less likely to be peeved) if you instead stopped trying to compare Python and PHP and just settle for learning about the layers you seem to be interested in
[14:41:04] <Julian> rannnn8888: You have to tell Python what you want to do when that exception is raised
[14:41:09] *** Quits: Voyager2Spirit (~Voyager2S@176.45.37.90) (Quit: Client closed)
[14:41:10] <Julian> rannnn8888: If you want to do nothing, use `pass`
[14:41:26] <bjs> no_gravity: frankly you "dont see how that matters" is just making my point,  you don't understand how these tools work and you don't know how the optimisations and compiler work together and how they effect the runtime.
[14:41:26] <Julian> rannnn8888: also you need to put the with block entirely in the try block
[14:41:46] <nedbat> no_gravity: your PyPy benchmark is like driving a porche to the end of the driveway and timing how long it took.
[14:41:48] <Julian> no_gravity: (and you want us to explain it to you, and seem to think if we don't, that you're correct on something)
[14:42:02] *** Joins: haroon (~haroon@gw.wmd.de)
[14:42:24] *** Joins: mavrix (~mavrix@user/tinwasp)
[14:42:24] <no_gravity> bjs: Well, if I use a software and it takes long to complete a task, it won't make it better that someone tells me I don't understand the inner workings of the technological layers involved.
[14:42:25] <bjs> no_gravity: your microbenchmarks are consistently insufficient for their purpose.  Sometimes your benchmarks can be turned into something that really does show what you want,  sometimes they are just bogus (like your PHP `$l1 += $l2` one) and sometimes they're just not really testing the thing you really want (like your regex one iirc)
[14:42:38] <bjs> no_gravity: no but if you're doing *micro*benchmarks you really do need to know that
[14:42:58] <Julian> rannnn8888: https://bpa.st/OVUQ
[14:43:11] <bjs> at minimum you need to understand the language(s) you're benchmarking and comparing so you compare operations with the same semantics
[14:43:11] *** Quits: netsan (~netsan@user/netsan) (Quit: Leaving)
[14:43:24] <bjs> (or when you don't do that, you're at least *aware* of the fact)
[14:43:47] <no_gravity> bjs: As I said, that is where we have different opinions. In my experience, micro benchmarks *do* give a good estimation about how things behave in concert in a larger system.
[14:44:12] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 256 seconds)
[14:44:51] <bjs> no_gravity: No that is not what I'm saying.  Let me be very clear And I'm very sorry to say this. Microbenchmarks can be good,  they can let you infer much about how operations perform in a greater context.  But *your* microbenchmarks are useless.  You do not know what you're doing. You constantly get it wrong. You do not know the languages you are trying to benchmark. You do not understand the semantics of the operations you are trying to benchmark.
[14:44:58] <bjs> and you constantly get conclusions wrong
[14:45:09] <no_gravity> For example. after these tests, I am pretty sure that "l1 += l2" is the way better approach in almost every situation and large project than "l1 = l1 + l2".
[14:45:14] <rannnn8888> Julian yes i add i think its k and maybe u know sometime the request response me TypeError: 'NoneType' object is not subscriptable ? i can cheack before i the response its nonetype ?
[14:45:25] *** Quits: Strom (strom@fedora/strom) ()
[14:45:35] <Julian> no_gravity: That's a terrible conclusion which isn't indicated by your microbenchmark
[14:45:49] <Julian> c.f. what bjs just said
[14:45:49] <rannnn8888> i use this                         if str(response.status) == "200":
[14:45:50] <rannnn8888>                             print("try2")
[14:45:50] <rannnn8888>                             j = await response.json(content_type=None)
[14:45:57] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:46:04] *** Joins: node1 (~node1@user/node1)
[14:46:38] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[14:46:53] <bjs> no_gravity: there are many cases where += is just the wrong operation to use because it does not do the same thing.  In the cases where they are the same, += will be a better choice (for many reasons)
[14:46:58] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:47:21] <Julian> rannnn8888: Is that even after your new code change?
[14:47:32] *** Joins: Strom (strom@fedora/strom)
[14:47:53] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[14:48:05] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[14:48:06] <no_gravity> bjs: Can you show me a simple case where l1 += l2 is the wrong operation and l1 = l1 + l2 is the right one?
[14:48:11] <bjs> no_gravity: I already did.
[14:48:23] <bjs> no_gravity: l1 += l2 mutates, imagine you had `l3 = l1`...
[14:48:39] <rannnn8888> Julian i add this if j is None:
[14:48:39] <bjs> But this is just proving my point even more, you clearly dont understand the semantics of the thing you're trying to benchmark
[14:49:08] <rannnn8888> Julian and yes i scrap allot page maybe it real none type
[14:49:28] <Julian> rannnn8888: You'd have to share your code (in a pastebin). That error means you did `None[123]` essentially. So yes you've missed somewhere that returned None.
[14:49:46] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 272 seconds)
[14:50:17] *** Quits: y1n (~y1n@84-115-65-174.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[14:50:48] <rannnn8888> Julian and in the except i can give him 2 ? like "except aiohttp.client_exceptions.ClientHttpProxyError or asyncio.exceptions.TimeoutError:"
[14:51:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:51:37] <Julian> rannnn8888: `except (one, two):` is the syntax -- you may benefit from reviewing the sections on exceptions in the tutoria
[14:52:20] *** Quits: qk1z (~qk1z@193-82-226-146.tpgi.com.au) (Quit: WeeChat 2.8)
[14:52:25] <no_gravity> bjs: Yes, if there are more references to l1 (if it is called references in Python) then the behavior is different.
[14:52:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[14:52:43] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[14:52:54] *** Joins: qk1z (~qk1z@193-82-226-146.tpgi.com.au)
[14:52:56] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[14:53:21] <rannnn8888> Julian thxx i think its work i upload to my server cheack
[14:53:56] <bjs> no_gravity: anyway, I don't want you to *stop* benchmarking things but it might be a good idea to try benchmark bigger things.  They can still be "micro" but perhaps you're not really ready to microbenchmark individual operations yet
[14:54:08] *** Joins: wyclif (~wyclif@user/wyclif)
[14:54:31] <rendar> python integer has no limited size, like C integers right? so how does happen the marshalling between the 2 languages?
[14:54:48] <bjs> rendar: Python integers have no limited size yes,  C integers do yes,  what do you mean "marshalling" ?
[14:55:11] <rendar> bjs: the process to read python integers from C
[14:55:21] <bjs> rendar: Python integers aren't turned into C integers
[14:55:32] *** Quits: mavrix (~mavrix@user/tinwasp) (Ping timeout: 245 seconds)
[14:55:35] <rendar> ok, i guess still are python objects
[14:55:38] <bjs> yes
[14:55:50] <bjs> rendar: you can think of a Python integer as a C struct with an array of digits in it
[14:55:54] <rendar> what abot i want to *convert* a python integer into a C one, trimming its size?
[14:56:09] <Julian> what will you do with it in C?
[14:56:14] <bjs> rendar: you mean inside Python? or inside C?
[14:56:20] <rendar> inside C
[14:56:26] <rendar> Julian: computations
[14:56:34] <bjs> rendar: can't you do computation over the Python ones?
[14:56:39] <bjs> and then return a Python one
[14:56:56] <rendar> bjs: nope, i need 32bit or 64 integers
[14:57:31] <Julian> rendar: what integer do you want for integers larger than 64 bits?
[14:57:47] <rendar> Julian: the most significant part
[14:58:04] <bjs> rendar: https://docs.python.org/3/c-api/long.html has the C API for Python integers. You may have to call some Python int functions to turn it into a 64-bit-but-still-Python-int first
[14:58:11] <rendar> e.g. if i have 0xDEADBEEF and i want to trim to a 8bit integer, i'll get: 0xEF or 0xDE, depending on ednainess
[14:58:21] <rendar> bjs: ok, thanks
[14:58:42] <bjs> rendar: endianness doesn't affect "most significant"
[14:59:01] <rendar> bjs: well, if i read raw memory, yes it does
[14:59:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[14:59:23] <rendar> if i do bitwise << >> operations, it doesn't
[14:59:33] *** Joins: wyclif (~wyclif@user/wyclif)
[14:59:39] <Julian> not really, that just changes where the most significant lives, but yeah fair enough we understand what you mean
[15:00:31] <rendar> Julian: i mean that for logical operations, endianess doesn't affect anything, but for physical operations (e.g. reading raw memory) you'll get inverted bytes!
[15:01:15] <bjs> rendar: sure,  I think we just assumed that when you had the C long you were going to be treating it as a long not as some random array of bytes :)
[15:01:26] <rendar> yeah :)
[15:01:55] <rendar> btw, what kind of SDK i have to install to be able to #include <Python.h> and compiling stuff? or.. steuptools does that automatically?
[15:02:04] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:02:34] <Julian> `python-devel` if you're on a linux distribution that devendors your python
[15:02:39] <Julian> or `python-dev`
[15:02:50] <rendar> i see
[15:02:50] <Julian> (depending on if its debian-based or centos-based)
[15:02:53] *** Joins: mavrix (~mavrix@user/tinwasp)
[15:03:03] *** Joins: haise01 (~haise01@213-191-130-226.dsl.iskon.hr)
[15:03:13] <rendar> python-dev is already the newest version (2.7.16-1).
[15:03:14] <rendar> wtf?
[15:03:16] *** Joins: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at)
[15:03:16] <rendar> 2.7?
[15:03:37] <Julian> `python3-dev` probably
[15:03:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:04:15] <rendar> python3-dev is already the newest version (3.7.3-1). -- ok problem is that i'm working on python 3.9.6 which i have installed and compiled manually -- how can i install manually this SDK the version i wish?
[15:04:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:04:59] *** Joins: wyclif (~wyclif@user/wyclif)
[15:06:28] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[15:07:04] *** Joins: node1 (~node1@user/node1)
[15:07:04] <Yhg1s> rendar: how did you install it manually?
[15:07:24] <rendar> Yhg1s: uncompressing tar.gz, ./configure; make; make install
[15:07:36] <rendar> old school way
[15:07:40] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[15:07:45] <Yhg1s> rendar: okay, then Python.h should already be intsalled where all the tools know to find it.
[15:08:00] <rendar> Yhg1s: i see, good thanks
[15:08:07] <Yhg1s> rendar: also, you should probably be passing arguments to configure, and certainly be using 'make altinstall' instead of 'make install'.
[15:08:32] <rendar> Yhg1s: but.. what about i have *also* installed that python3-dev package with apt-get?! i guess python won't confuse Python.h between versions...
[15:08:50] <Yhg1s> rendar: if it's for a different Python version, it won't matter.
[15:08:53] <rendar> Yhg1s: yes i do also that, just skipped it to be quicker
[15:08:59] <sazawal> grawity, Hey in the ssl_clientauth_client.py file in https://twistedmatrix.com/documents/current/core/howto/ssl.html . This statement `    clientCertificate = ssl.PrivateCertificate.loadPEM(authData)` gives me error because there is no certificate in server.pem. So server.pem is the same on both client and server sides? I don't understand.
[15:09:15] <Yhg1s> rendar: you should know by now that *details matter*, so please stop skipping them.
[15:09:19] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[15:09:21] <rendar> Yhg1s: ok
[15:09:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[15:09:48] <rendar> Yhg1s: the thing is, i have a 1500-lines long bash script that does that automatically, so i can't remember exactly the flags it employes
[15:10:29] *** Joins: wyclif (~wyclif@user/wyclif)
[15:10:36] *** Quits: lethu (~lethu@user/lethu) (Quit: Quit())
[15:11:19] <rendar> also: i had compiled+installed python 3.9.0 in the same system, then compiled+installed python 3.9.6 and i have noticed that the second installation has been A LOT faster, why? does python already had some .o files already compiled?
[15:11:35] <sazawal> grawity, Besides I don't understand why private key should be there on both client and server sides. One should have the public key (certificate) only and the other should have both private key and public key.
[15:11:54] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:12:44] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:13:25] <Yhg1s> rendar: do you mean the process of compiling and installing python is faster, or the resulting python binary is faster?
[15:13:38] <rendar> Yhg1s: the first one
[15:14:48] <Yhg1s> rendar: unless you unpack the 3.9.6 source ontop of the 3.9.0 source, nothing Python-specific should be cached between the compiles. It may be your system caching compiler-specific things, though, who knows? It's hard to say without actually looking at what the system is spending time on.
[15:15:11] *** Joins: Soni (~quassel@autistic.space)
[15:15:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[15:16:07] *** Joins: mci64 (~x@185.242.190.95)
[15:16:51] *** Joins: habamax (~maksim.ki@user/habamax)
[15:18:54] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[15:19:53] *** Joins: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[15:20:31] *** Quits: daoudr__ (~daoudr@2a02:1205:c681:1650:e9e9:3f86:a82e:2c4f) (Read error: Connection reset by peer)
[15:20:46] <leonardo> anyone can point me some non-ugly, not toy-level example on how to structure a module's classes/methods/functions using composition? I'd like to read some real life use case
[15:21:54] <Yhg1s> leonardo: composing functions is always going to be ugly in Python. See, for example, functools.wraps
[15:22:37] <Yhg1s> leonardo: if you mean composing classes (as opposed to inheritance), it really depends on what you consider non-ugly (but the same goes for inheritance)
[15:22:52] <bjs> leonardo: as for "composing classes",  in Python that really just means the instance has attributes with other objects
[15:23:30] <rendar> Yhg1s: i see
[15:23:32] <Yhg1s> leonardo: the main problem with providing a non-toy example is that it requires a complex system to start with, so it becomes hard to see where the composition comes into play. Twisted is an example of somethign that uses a lot of composition, but so is, say, asyncio.
[15:24:50] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[15:25:11] *** Joins: computeiro (~Wender@179.104.252.191)
[15:25:19] *** Quits: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz) (Quit: A random quit message)
[15:25:51] *** Joins: wyclif (~wyclif@user/wyclif)
[15:26:00] *** Joins: elibrokeit (eschwartz@archlinux/bugwrangler/eschwartz)
[15:26:14] *** Quits: Affliction (affliction@user/affliction) (Quit: Read error: Connection reset by beer)
[15:26:20] *** Joins: Enitin (~Enitin@82.102.22.84)
[15:26:39] *** Quits: wender (~Wender@189.37.69.27) (Ping timeout: 268 seconds)
[15:27:01] <leonardo> i see
[15:27:15] *** Joins: Affliction (affliction@user/affliction)
[15:27:23] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[15:27:47] *** Joins: ano (~weechat@user/ano)
[15:28:21] *** Joins: Samian (~Sami@2620:10d:c091:480::1:d469)
[15:28:26] *** computeiro is now known as wender
[15:28:30] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[15:29:35] <Samian> Is there a way to put use with: funct() but many times like [ with: func() for _ in range(10)]
[15:29:56] <Samian> s/put/
[15:29:59] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[15:30:10] <Yhg1s> Samian: you're *probably* looking for contextlib.ExitStack, but it's hard to tell.
[15:30:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[15:30:56] <Samian> that's what the with statement uses right?
[15:31:20] *** Joins: wyclif (~wyclif@user/wyclif)
[15:31:59] <Yhg1s> Samian: I'm not sure what you mean?
[15:32:21] <Samian> nevermind. I can put the with: inside the function being called. It works the exact same
[15:32:51] <Samian> my specific case is using with torch.cuda.stream(s):
[15:32:54] <Samian> as shown here: https://pytorch.org/docs/stable/notes/cuda.html
[15:33:36] <Samian> whether that goes outside the function call or wraps the body of the function, the behavior is the same I think. I'll test now
[15:35:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[15:35:10] <SamuelMarks> hi
[15:35:38] *** Joins: mavezy (~mavez@scotia.systems)
[15:36:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[15:36:19] <Samian> what if I have a function that sometimes I want to call async and sometimes not?
[15:36:31] <Yhg1s> Samian: then you have two functions.
[15:36:52] *** Joins: wyclif (~wyclif@user/wyclif)
[15:37:05] <SamuelMarks> How do I add a path, containing `setup.py, module_name`, with `module_name` containing `module_name/__init__.py`, such that `import module_name` will work? - I've tried `sys.path.insert(0, mod_path)` but that didn't work. Do I need to use `sys.modules`?
[15:37:48] <Yhg1s> SamuelMarks: generally speaking, and also very specifically speaking, it's a bad idea to mess with sys.path at all. If you have a directory with a setup.py file, what you usually want to do is install the package in a virtualenv.
[15:38:03] <Yhg1s> SamuelMarks: but what is 'mod_path' and how did it not work?
[15:38:30] <Samian> Yhg1s a wrapper function you mean? assuming async foo() can call foo_no_async(). ?
[15:38:59] <Yhg1s> Samian: no, I mean if you need to call it both async and non-async, they are two functions. Whether one calls the other is hard to say without seeing the details of it.
[15:39:05] <SamuelMarks> Yhg1s - I've got a test mock that generates a new python package and tests against it, installing with `pip install` and uninstalling with `pip uninstall`
[15:39:10] <SamuelMarks> But it's hella slow
[15:39:16] <Yhg1s> SamuelMarks: yes, I'm sure it would be.
[15:39:29] <Yhg1s> SamuelMarks: it's a fairly weird thing to test, especially in situations where the speed matters.
[15:39:44] <Samian> that's a lot of duplicative code. Interested to see it? It's not that much code
[15:39:48] <bjs> Samian: for almost all real functions you cannot "turn" it into an async one, and you can't "turn" async ones into normal ones.
[15:40:09] <Yhg1s> Samian: I'm confused. Is it a lot of code or not? But yes, if you want a specific answer, show specific code :)
[15:41:24] <Samian> bjs  that's what I thought but then I thought "what about all the very primitive functions that I'm sure are called somewhere in the call stack? it can't be that every function in the call stack has an async keyword
[15:41:27] *** Joins: onexused (~onexused@user/onexused)
[15:41:48] <Yhg1s> Samian: if they don't need to be async -- if they don't call async functions and they don't block -- then they don't need to be async.
[15:41:57] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:42:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[15:42:04] <bjs> Samian: any function that contains an `await` must be an `async def`, and to call an `async def` you need an `await`.  If you have normal functions that don't await then they don't need the async stuff
[15:42:11] <bjs> Samian: but for the parts that do await, the stack above them has to async yeah
[15:42:20] *** Joins: wyclif (~wyclif@user/wyclif)
[15:42:29] *** Parts: mavezy (~mavez@scotia.systems) ()
[15:42:33] *** Quits: mavrix (~mavrix@user/tinwasp) (Ping timeout: 248 seconds)
[15:43:09] *** Quits: masber (~masber@vpn-120.cscs.ch) (Quit: Client closed)
[15:44:20] <bjs> Samian: for example the `httpx` library (which does HTTP requests) has both `def` and `async def` versions of its code. Inside the functions both call the same function to "prepare" the request (no awaiting) but then the part that does `await` (the actual send/recv) is duplicated.
[15:44:27] <Samian> https://bpa.st/TKHQ
[15:44:29] <Samian> that's the code
[15:44:45] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[15:44:52] <SamuelMarks> Yhg1s - Ok just pushed up a new commit so you can see my workflow: https://github.com/offscale/cdd-python/blob/1ca4029/cdd/tests/test_exmod.py#L32-L54
[15:44:52] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[15:44:53] *** Joins: ioe (~is0ke3@user/is0ke3)
[15:45:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[15:45:19] <Samian> I'm working with multiple gpus. They can do work in parallel. However some of the data prep work is cpu work.  That means that if I use the cuda streams tricks, the code is still blocking on the cpu parts.
[15:45:49] <Yhg1s> SamuelMarks: I don't know what this is trying to test, or what you're asking.
[15:46:12] <Samian> to queue up the gpus with work to do concurrently, the cpu instructions need to be asynchronous too.
[15:46:15] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[15:46:23] <Samian> example of a cpu instruction is the  np.cumsum call
[15:46:28] *** Joins: Pickchea (~private@user/pickchea)
[15:46:47] <Sky_Net> hello guys, i need some help in python blender addon code) I made addon, it consists a panel with operator button...all works. But i need that the PANEL appear only when object CAMERA is selected in 3d viewport, and to disappear when camera is not selected. And this panel should be pinned in the 3d view (rightclick-pin). Any thoughts what code i should add and where?
[15:47:01] *** Joins: mavrix (~mavrix@user/tinwasp)
[15:47:19] <SamuelMarks> Yhg1s - How do I—without `pip`—add the generated module to my import search path?
[15:47:23] <Yhg1s> Samian: as far as I can tell you don't have any awaits or async operations in fbgemm_apply_emb, so you have no reason to make it async.
[15:47:56] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:48:28] <Samian> async def fbgemm_multi_gpu_apply has an await
[15:48:38] <df_data> Hi all, what is the best way to encrypt a password for a web phasing script. At the moment my password is stored in clear text I was wondering if there was a way to encrypt the stored password like how you can with powershell?
[15:48:40] <Yhg1s> SamuelMarks: sys.path.insert is the way to mess up the current process. (Why on earth would you do this in the test process itself? It just makes a terrible mess.) Python caches imports, so you can only import it once. I also don't see where you're importing it.
[15:48:52] <Samian> Yhg1s  I was using the pattern I saw here: https://stackoverflow.com/questions/53486744/making-async-for-loops-in-python
[15:49:11] <Yhg1s> Samian: but fbgemm_apply_emb doesn't. Why is it async?
[15:49:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[15:49:32] <Samian> no reason. I was following the pattern in that stackoverflow post.
[15:49:37] <Samian> I wasn't sure if it was needed
[15:49:37] *** Joins: xon (~xon@94.140.8.163)
[15:49:46] <Yhg1s> Samian: okay, so, don't make it async if it doesn't have to be.
[15:49:56] <Samian> Yhg1s  that's what I meant by asking whether all calls made by an async function must also be async
[15:50:01] <xon> hello, I hope you're all doing great! how can I access the app variable from another file, when I do I got an error ```(most likely due to a circular import)```
[15:50:01] <xon> xon
[15:50:01] <xon> this "app = Flask(__name__)", I want to access it in another file, thanks?
[15:50:17] *** Quits: y1n (~y1n@84-115-65-115.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[15:50:18] <Yhg1s> Samian: okay, I didn't understand that to be your question. No, you can call regular functions from async functions.
[15:50:24] <SamuelMarks> Yhg1s - So my `exmod` function walks the imported module hierachy and does ast emitting thing
[15:50:28] <SamuelMarks> s
[15:50:33] <Yhg1s> xon: are you doing this in the .py file you're running?
[15:51:06] <xon> Yhg1s: Yes, I have the "app = Flask(__name__)" in the app.py file
[15:51:30] <Yhg1s> xon: then there's no good way to import it and access it. Pass it along, or create it in a separate module.
[15:51:33] *** Joins: mickey (~user@user/mickey)
[15:51:35] <xon> and I want to access app variable in mail.py file?
[15:51:44] <Yhg1s> SamuelMarks: okay, and what doesn't work if you modify sys.path that does work when you use pip install?
[15:52:21] <SamuelMarks> Yhg1s I get a `ModuleNotFoundError: No module named 'goldhqy6fs53gold'`
[15:52:35] <SamuelMarks> Where goldhqy6fs53gold is the name of the generated python module
[15:52:38] <xon> Yhg1s: could you please give me any docs or something to learn it, thakns?
[15:52:40] <Yhg1s> SamuelMarks: and that's the name of the module that's inside the directory you're adding to sys.path?
[15:52:46] <SamuelMarks> Yes
[15:53:02] <SamuelMarks> I've also tried one directory above that (the one with the setup.py and goldhqy6fs53gold directgory)
[15:53:10] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[15:53:10] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[15:53:13] <Yhg1s> SamuelMarks: wait, that's what I asked about.
[15:53:28] <Yhg1s> SamuelMarks: "the goldhqy6fs53gold directory" is the module, isn't it?
[15:53:34] <SamuelMarks> Yes
[15:53:45] <Yhg1s> SamuelMarks: so the directory you have to add to sys.path is the directory *containing that module*
[15:53:46] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[15:54:05] <SamuelMarks> I've tried the one which contains the `__init__.py` and the one which contains `setup.py` and the directory containing `__init__.py`
[15:54:12] <SamuelMarks> In either case it fails
[15:54:18] <Yhg1s> SamuelMarks: okay, stop trying the first. That's the wrong thing to add.
[15:54:28] *** Quits: mavrix (~mavrix@user/tinwasp) (Ping timeout: 256 seconds)
[15:54:30] <Yhg1s> SamuelMarks: Are you importing the same module before you add it to sys.path?
[15:54:53] <bjs> xon: it sounds like you have files trying to import each other,  maybe you can move the app = Flask(__name__) part to its own file so you can import that file from other places (and then that file doesn't need to import much else)
[15:55:29] <SamuelMarks> Yhg1s - No the imports happen in the function call after
[15:56:07] <Yhg1s> SamuelMarks: I see no reason for it to fail the way you describe then. You'll have to debug it. Find out what's going on. Make sure the situation is the way you think it is. Print sys.path and sys.modules right before you try the failing import.
[15:56:33] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[15:56:41] <SamuelMarks> Yeah I tried that and it's still not working. Confusing af
[15:57:09] <SamuelMarks> YOu can replicate with my comments. FYI my GitHub repo has no dependencies
[15:57:13] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[15:57:29] <Yhg1s> SamuelMarks: I wasn't suggesting it as a _fix_, but as a way of finding out what's going on. What output are you getting if you add the prints I suggested?
[15:58:12] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[15:58:26] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[15:58:46] <SamuelMarks> `print(listdir(mod_path), file=sys.stderr)` gives `['__init__.py', 'parent_dir']`; `print(sys.path, file=sys.stderr)` gives the absolute path to my module as its
[15:58:50] <SamuelMarks> first element
[15:59:30] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[15:59:37] <Yhg1s> SamuelMarks: it still sounds like you're adding the *wrong path* to sys.path. You need to add the directory that contains setup.py and the module to sys.path. *not* the module itself.
[15:59:55] <SamuelMarks> sys.modules.keys() contains not my module
[16:00:26] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[16:00:31] <braxas> hi, I see __author__ and __copyright__ in some .py files, is this somehow defined somewhere: https://stackoverflow.com/questions/1523427/what-is-the-common-header-format-of-python-files ?
[16:00:39] <Yhg1s> I also still don't know what code you're actually running, since you've only shown code that uses pip, and vaguely described what you're running.
[16:00:42] <Yhg1s> braxas: nope.
[16:00:54] <braxas> Yhg1s: so it is just some arbitrary thing?
[16:01:19] <xon> bjs: Thank you so much. You saved my day!
[16:01:25] <Yhg1s> braxas: pretty much.
[16:01:26] <SamuelMarks> It gives me a `FileNotFoundError: [Errno 2] No such file or directory: ` pointing to <tempdir>gen571iqzg3gen/gen571iqzg3gen/parent_dir/parent.py`
[16:01:36] <Yhg1s> SamuelMarks: what is 'it'?
[16:01:42] <SamuelMarks> The test
[16:01:53] <SamuelMarks> Line 505 of that previous test_exmod.py file
[16:01:59] *** Joins: dev4449 (~dev4449@172.98.71.173)
[16:02:04] <SamuelMarks> which is just an `open`
[16:02:12] <Yhg1s> SamuelMarks: please, please, *please* pastebin the actual code and the complete output you get from the test. It's impossible to figure out what you're even doing, let alone what produces the error.
[16:02:17] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[16:02:38] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[16:02:39] * SamuelMarks has linked the full code
[16:02:47] <Yhg1s> SamuelMarks: well, if open() produces that error, it means the file doesn't 3exist.
[16:02:53] <Yhg1s> SamuelMarks: not the code you're *running*.
[16:03:01] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[16:03:13] *** Joins: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at)
[16:03:18] <SamuelMarks> Yhg1s - Correct, but the `pip install` does make that file exist, which is why I'm confused
[16:03:42] <Yhg1s> SamuelMarks: it doesn't sound too confusing to me. pip does a lot of things.
[16:04:48] *** Quits: xon (~xon@94.140.8.163) (Quit: Leaving...)
[16:05:04] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[16:06:15] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[16:07:00] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43)
[16:07:11] *** Quits: Stenean (~Stenean@cpc83645-brig20-2-0-cust98.3-3.cable.virginm.net) (Quit: Konversation terminated!)
[16:07:46] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[16:07:47] *** Joins: manti7 (~manti7@176.10.104.94)
[16:07:55] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:09:11] *** Quits: daoudr_ (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Quit: Leaving)
[16:09:30] *** Joins: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92)
[16:10:21] *** Quits: daoudr (~daoudr@2a02:1205:c681:1650:2213:cc7f:a040:3a92) (Remote host closed the connection)
[16:10:47] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 258 seconds)
[16:10:49] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[16:14:02] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[16:14:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[16:14:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[16:15:08] *** Joins: mike18 (~geri@217-149-162-237.nat.highway.telekom.at)
[16:15:27] <mike18> hi are there any tools besides linter to check for bugs in python source code?
[16:15:47] <Yhg1s> mike18: pytype, mypy, pyright, various other type checkers. Also, tests.
[16:16:06] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[16:16:13] <mike18> the pytype does addtional things than linter?
[16:16:55] <Yhg1s> yes, type checkers do way more than linters do.
[16:17:13] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[16:17:21] <mike18> should i use all of those? pytype, mypy, pyright
[16:17:40] <mike18> i currently only use flake8 as a linter...
[16:17:49] <Yhg1s> Usually not, no. You should read up on them and pick one. You can run them all, but it's unlikely to be helpful.
[16:18:25] <mike18> what do you usually use?
[16:18:43] <mike18> better to listen what the pro's do
[16:18:53] *** Joins: mantiX (~manti7@176.10.104.94)
[16:19:13] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 258 seconds)
[16:19:34] <Yhg1s> I use pytype because it's integrated in our work environment. I haven't bothered using any of them for my personal projects, but I would use pytype (because it doesn't require using type annotations, and it can generate them for you when you want to.)
[16:19:59] *** Quits: hyper_dave (~hyper_dav@197.156.77.243) (Ping timeout: 252 seconds)
[16:20:03] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:20:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 248 seconds)
[16:21:57] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[16:22:01] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 248 seconds)
[16:23:24] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:24:04] <SamuelMarks> Yhg1s - You say pip does a lot of things, my `setup` only takes packages=find_packages(),         package_dir={package_name: package_name},
[16:24:13] <SamuelMarks> How do I handle this magic?
[16:24:35] <Yhg1s> SamuelMarks: have you considered doing what I suggested? Show us the code you're *actually running*, and the full output you get.
[16:26:17] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[16:26:53] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[16:27:15] *** Joins: ano (~weechat@user/ano)
[16:27:24] <mike18> Yhg1s: dont use flake8?
[16:27:24] <SamuelMarks> Yhg1s - I can uncomment those lines and give you a link to GitHub Actions?
[16:27:40] <Yhg1s> mike18: me, personally? No.
[16:27:46] <Yhg1s> mike18: I don't recommend doing what I do.
[16:27:58] <mike18> ok
[16:28:09] <mike18> not sure which of those tools is good for me :)
[16:28:28] <Yhg1s> mike18: try them and see.
[16:28:46] *** Quits: umamisoup (uid511883@id-511883.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[16:28:47] *** Joins: dez (uid92154@user/dez)
[16:29:56] <Yhg1s> SamuelMarks: whatever you need to do to show the actual code and output.
[16:30:23] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 244 seconds)
[16:31:07] *** Joins: death916_lap (~Death916@user/death916)
[16:31:08] *** Quits: death916_lap (~Death916@user/death916) (Excess Flood)
[16:31:09] *** Joins: death916_lap (~Death916@user/death916)
[16:31:29] *** Joins: Death916_lap1 (~Death916@user/death916)
[16:31:30] *** Quits: Death916_lap1 (~Death916@user/death916) (Excess Flood)
[16:31:50] *** Joins: Death916_lap1 (~Death916@user/death916)
[16:31:50] *** Quits: Death916_lap1 (~Death916@user/death916) (Excess Flood)
[16:31:54] *** Joins: ice9 (~ice9@user/ice9)
[16:32:12] *** Joins: Death916_lap1 (~Death916@user/death916)
[16:32:12] *** Quits: Death916_lap1 (~Death916@user/death916) (Excess Flood)
[16:32:15] <SamuelMarks> Yhg1s - https://github.com/offscale/cdd-python/runs/3321736242?check_suite_focus=true#step:5:535
[16:32:23] *** Quits: death916_lap (~Death916@user/death916) (Client Quit)
[16:32:56] *** Joins: trashbird8 (~trashbird@user/trashbird)
[16:33:28] *** Joins: Liblx (~Alex@2a02:810c:280:59c:3581:6527:4f24:5729)
[16:34:05] *** Quits: trashbird (~trashbird@user/trashbird) (Ping timeout: 268 seconds)
[16:34:05] *** trashbird8 is now known as trashbird
[16:34:18] *** Joins: surfhai (~Thorsten@p4ff3d0c6.dip0.t-ipconnect.de)
[16:35:32] *** Joins: Naan` (~Naan@user/naan)
[16:35:50] *** Quits: onexused (~onexused@user/onexused) (Ping timeout: 256 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:12] *** Parts: surfhai (~Thorsten@p4ff3d0c6.dip0.t-ipconnect.de) (WeeChat 3.2)
[16:36:20] *** Joins: zeden (~zeden@user/zeden)
[16:36:25] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 248 seconds)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:40] <Yhg1s> SamuelMarks: and if you pip install your package -- manually -- and compare the layout of the module it installs with the layout in your test, are they identical?
[16:38:00] <graingert> mike18: I'd recommend mypy only because it's the most popular one, and the reference implementation
[16:38:05] <mike18> ok
[16:38:08] <Yhg1s> (I suspect the layout will be different, but it's really hard to tell with this code what it's doing and what it's _intending_ to do.)
[16:38:09] <graingert> if your code breaks in mypy your downstream won't be happy
[16:38:11] <mike18> actually looking into pip install mypy
[16:38:57] <mike18> damm it reports erros: Skipping analyzing "colorama": found module but no type hints or library stubs
[16:39:01] *** Joins: emika4 (~emika@185.207.249.83)
[16:39:09] <Yhg1s> mike18: that's not an error.
[16:39:14] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 256 seconds)
[16:39:27] <mike18> whats it than?
[16:39:37] *** Quits: emika (~emika@185.207.249.114) (Ping timeout: 248 seconds)
[16:39:37] *** emika4 is now known as emika
[16:39:51] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[16:39:57] <Yhg1s> mike18: it's telling you it won't analyze 'colorama'.
[16:40:08] <mike18> but why return error than?
[16:40:27] <Yhg1s> mike18: 'skipping ...' is usually not an error.
[16:41:11] <hogarius> mike18: information is not always an error.
[16:41:18] <mike18> ok
[16:41:27] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 258 seconds)
[16:42:01] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[16:42:50] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[16:42:58] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[16:43:03] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[16:43:15] <graingert> mike18: you add `import colorama  # type: ignore[import]`
[16:43:35] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Quit: Client closed)
[16:44:05] <graingert> mike18: like this: https://github.com/twisted/twisted/pull/1584/files
[16:45:27] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[16:46:49] *** Quits: audiocat (~audio@2603-8081-1800-00ad-cdc9-c13c-5e2e-2f9a.res6.spectrum.com) (Ping timeout: 258 seconds)
[16:48:09] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Ping timeout: 248 seconds)
[16:50:06] *** Joins: djapo (~archangel@user/djapo)
[16:50:14] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43) (Ping timeout: 252 seconds)
[16:50:31] *** Quits: y1n (~y1n@84-115-64-45.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[16:52:57] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 248 seconds)
[16:52:59] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[16:53:06] *** Joins: masber (~masber@178.197.196.20)
[16:54:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:54:59] *** Quits: Tier (~tier@37.214.52.86) (Quit: Leaving)
[16:55:03] *** Joins: masber91 (~masber@vpn-09.cscs.ch)
[16:55:23] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Quit: thimslugga)
[16:55:38] *** Joins: shad (~shad@user/shad)
[16:57:19] *** Quits: masber (~masber@178.197.196.20) (Ping timeout: 246 seconds)
[16:58:56] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43)
[16:59:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:00:44] *** Joins: wyclif (~wyclif@user/wyclif)
[17:00:48] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:00:49] *** Joins: Pickchea (~private@user/pickchea)
[17:02:10] *** Quits: fearnothing (~fearnothi@user/fearnothing) (Remote host closed the connection)
[17:02:26] <mike18> what file?
[17:02:31] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:02:34] *** Quits: kostkon (~androirc@athedsl-280460.home.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[17:03:16] *** Joins: y1n (~y1n@84-115-65-94.wifi.dynamic.surfer.at)
[17:04:17] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[17:05:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[17:05:52] *** Quits: f8l12 (~f8l12@154.3.40.16) (Ping timeout: 256 seconds)
[17:06:08] <Yhg1s> mike18: the one you're analyzing. The one that imports colorama.
[17:06:19] <mike18> so all imports?
[17:06:20] <mike18> i have?
[17:06:23] <mike18> in all files?
[17:06:47] <Yhg1s> mike18: perhaps it would be better if you read up on how to use mypy.
[17:06:55] <Yhg1s> (or pytype, if you don't want to write type annotations yourself.)
[17:09:48] *** Joins: heco (~redrum@user/redrum88)
[17:10:56] <jinsun> mike18: or you can ignore missing imports for colorama in your pyproject.toml, see examples here https://mypy.readthedocs.io/en/stable/config_file.html#example-pyproject-toml
[17:12:28] <df_data> Anyone know if the Mechanical soup library can input usernames and passwords from a http basic prompt?
[17:13:52] *** Joins: wyclif (~wyclif@user/wyclif)
[17:14:16] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:14:53] <mike18> ok
[17:15:12] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[17:15:26] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 272 seconds)
[17:15:36] *** Joins: Jigsy (~Jigsy@user/jigsy)
[17:15:48] <mike18> jinsun: i dont have a pyproject.toml file so far
[17:16:55] *** Quits: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57) (Quit: Client closed)
[17:17:16] *** Quits: masber91 (~masber@vpn-09.cscs.ch) (Ping timeout: 246 seconds)
[17:17:17] <jinsun> you can make one just for mypy even if you don't use it for other things, or make a mypy.ini https://mypy.readthedocs.io/en/stable/config_file.html#examples
[17:17:28] *** Quits: MetalSutton (~MetalSutt@101.100.153.131) (Quit: Leaving)
[17:19:15] <mike18> jinsun: can i put it in setup.cfg?
[17:19:42] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 245 seconds)
[17:21:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:21:50] <jinsun> mike18: yes, I think you can just put the mypy.ini stuff inside setup.cfg and mypy will use that
[17:23:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 248 seconds)
[17:24:45] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[17:26:21] *** Joins: upsala1 (~zcb@86.107.21.56)
[17:26:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:27:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:27:36] *** Quits: upsala (~zcb@185.213.155.160) (Read error: Connection reset by peer)
[17:28:34] *** Joins: upsala2 (~zcb@185.213.155.160)
[17:29:12] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[17:29:22] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[17:31:41] <Samian> [ [] for _ in range(10)] versus []*10
[17:31:45] <Samian> is one better than the other?
[17:31:53] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 248 seconds)
[17:31:54] *** Quits: upsala1 (~zcb@86.107.21.56) (Ping timeout: 272 seconds)
[17:31:54] <grym> Samian: they do different things
[17:32:02] <grym> almost always you want the former
[17:32:04] <Samian> I read that []*10  doesn't make 10 copies
[17:32:11] <Samian> something like that
[17:32:13] <grym> it sure doesn't!
[17:32:14] *** Joins: netsan (~netsan@user/netsan)
[17:32:17] <grym> try it out and see
[17:32:28] <Samian> grym  so if I set [1] to 4, then they're all 4?
[17:32:31] <grym> x = []*10; x[0].append('wat'); print(x)
[17:32:42] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[17:33:07] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:33:21] <grym> or, uh.
[17:33:28] <grym> i don't even know how to write it the bad way :P
[17:33:41] <Samian> grym  whoops I meant [[]]*10
[17:33:50] <bookworm> pointers, you can't hide the truth forever
[17:33:52] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43) (Ping timeout: 245 seconds)
[17:34:07] <grym> Samian: yeah, that'll give you the surprise result
[17:34:18] <Samian> I just tried it..
[17:34:27] <Samian> it acts the same as  [ [] for _ in range(10)]
[17:34:33] <SamuelMarks> Yhg1s - https://dpaste.org/mZ44
[17:34:42] <mike18> jinsun: whats that? error: Library stubs not installed for "requests" (or incompatible with Python 3.9)
[17:35:06] <Samian> grym  oh I see
[17:35:12] <mike18> For example, if you use requests, you can install stubs like this:
[17:35:12] <mike18> python3 -m pip install types-requests
[17:35:16] <mike18> whats that good for?
[17:35:16] *** Quits: jazzy (~jaziz@2600:380:873c:1b37:4c74:a0da:5de7:7a10) (Quit: Beddie bye-bye)
[17:36:03] <Samian> grym  I got it. If you append to one element, it appends to all
[17:36:34] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[17:37:23] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[17:38:10] <bpalmer> That's because it's a single object in there multiple times.
[17:38:12] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[17:39:31] *** Joins: djapo (~archangel@user/djapo)
[17:40:28] *** Joins: daoudr (~daoudr@178.197.212.212)
[17:41:05] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[17:43:52] *** Quits: dev4449 (~dev4449@172.98.71.173) (Quit: Client closed)
[17:44:41] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 248 seconds)
[17:44:59] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[17:45:14] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[17:45:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:45:53] *** Joins: c10l (~c10l@89.34.167.207)
[17:47:14] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Read error: Connection reset by peer)
[17:47:29] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[17:48:10] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:48:25] *** Joins: nyah (~nyah@51.146.30.113)
[17:49:18] *** Quits: flyback (~flyback@2601:540:8201:1e60:f91d:60fc:906f:7e8a) (Quit: Leaving)
[17:50:20] *** Quits: y1n (~y1n@84-115-65-94.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[17:50:56] *** Joins: flyback (~flyback@2601:540:8201:1e60:7422:5670:8d1b:60f9)
[17:51:12] <jinsun> mike18: that means you should install types-requests package, because requests doesn't come with annotations, but types-requests provides annoations for it
[17:51:43] <jinsun> mike18: and mypy requires type annotations to work properly
[17:51:48] <mike18> ok
[17:54:17] <bjs> Samian: [a]*n is roughly the same as `tmp=a; [tmp, tmp, tmp, ..., tmp]`
[17:54:36] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 256 seconds)
[17:55:02] <grym> it's fair game to do this with immutable objects, but you almost certainly don't want to do it with mutable ones
[17:55:35] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[17:57:10] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[17:58:33] *** Joins: LiftLeft (~LiftLeft@154.21.114.116)
[18:00:13] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:00:51] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43)
[18:01:12] *** Quits: ouzel8_ (~ouzel8_@110.148.212.146) (Quit: Client closed)
[18:01:31] *** Joins: cusco (~tralala@neptune.tretas.eu)
[18:01:33] <cusco> hello sirs
[18:01:56] *** Joins: torandu (~sean@94.10.125.197)
[18:01:58] <cusco> I was using 'str'.format() and now ... I need to send a literal {} in the string body... how do I do that?
[18:02:04] <Wooble> very few of us have been knighted, and we're not all male, but, uh, hi?
[18:02:25] <Samian> bjs yeah that's what I realized
[18:02:25] <deniska> cusco: {{}}
[18:02:34] <cusco> cool, thanks
[18:02:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[18:02:43] *** Joins: y1n (~y1n@84-115-65-216.wifi.dynamic.surfer.at)
[18:03:19] *** Joins: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57)
[18:07:37] *** Joins: zeden (~zeden@user/zeden)
[18:08:23] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:08:50] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[18:09:05] *** Joins: lastshell (~lastshell@user/lastshell)
[18:09:09] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[18:09:26] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[18:09:37] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[18:09:39] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:4692:e3ec:239c:8c8)
[18:10:00] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:11:18] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[18:11:26] <azidhaka> Question, i have a a couple of variables, how do i get a list of those who are None
[18:12:29] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[18:13:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[18:13:37] <bpalmer> you want a list of strings, each string being the name of a variable whose value is None?
[18:13:50] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 252 seconds)
[18:13:58] <azidhaka> bpalmer: this's exactly what i want
[18:14:31] <lastshell> sounds like a Dictionary ?
[18:14:37] <bpalmer> you may want to look at the locals() dictionary , which is the local variables ; filter it for the variables you care about and which are mapped to None
[18:15:23] *** Joins: wyclif (~wyclif@user/wyclif)
[18:15:48] <bpalmer> If the variables you want to inspect are not all in the same local scope, you can create new variables and then use it.
[18:15:49] <azidhaka> bpalmer: that's unknown territory to me, i'll look it up, thanks
[18:16:47] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:16:52] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[18:17:10] *** Quits: cheater (~Username@user/cheater) (Quit: BitchX: anything else would be uncivilized)
[18:19:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[18:19:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[18:20:40] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43) (Ping timeout: 272 seconds)
[18:21:14] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:21:29] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 248 seconds)
[18:22:09] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[18:22:30] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[18:22:33] *** Joins: torandu (~sean@94.10.125.197)
[18:22:48] <lesshaste> what is the easiest way to count how many hours and minutes between two times? E.g. 9:25  17:50
[18:23:22] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:23:23] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[18:23:24] <Yhg1s> lesshaste: the datetime module.
[18:23:44] <lesshaste> Yhg1s, interesting, thanks
[18:23:48] <SnoopJ> and specifically the timedelta type therein, which is a very handy representation of durations
[18:23:50] <bpalmer> some people recommend just goingn with arrow
[18:24:01] <lesshaste> SnoopJ, thank you. I will look into that
[18:24:09] *** Joins: cheater (~Username@user/cheater)
[18:25:03] <hexology> weren't there some issues with arrow?
[18:25:08] <hexology> i don't remember what they were
[18:25:20] <hexology> last i checked, the cool kids were using pendulum
[18:26:01] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[18:27:46] <lastshell> imho is better to use builtins libs to avoid overblob your project
[18:28:05] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[18:28:34] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[18:29:32] <Wooble> lastshell: and then you get to spend twice as much time coding around the datetime module's crappiness, and reimplement pendulum yourself, badly.
[18:30:24] <SnoopJ> datetime is fine when the task is relatively simple, but the box that encloses "relatively simple" is not big
[18:30:54] *** Joins: cheater (~Username@user/cheater)
[18:31:13] <lesshaste> SnoopJ, https://bpa.st/RSIQ  What should this be?
[18:31:26] <lesshaste> I just want the number of hours and minutes
[18:31:46] <lesshaste> but this gives me TypeError: unsupported type for timedelta seconds component: datetime.datetime
[18:32:32] <Wooble> lesshaste: subtract the datetimes, and you get a timedelta.
[18:32:57] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[18:33:10] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:33:14] <lesshaste> Wooble, ah ok. thanks
[18:33:17] <Wooble> although i'm pretty sure it won't work with time, no date.
[18:33:22] <SnoopJ> lesshaste, as Wooble says, subtracting datetime objects gives you a timedelta, e.g. `dt = stop - start` and then talk to dt.
[18:33:30] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[18:33:36] <SnoopJ> Unfortunately it doesn't provide minutes/hours for you, but it's not too hard to get from dt.seconds to what you want
[18:33:50] <lesshaste> SnoopJ, that's a shame
[18:33:59] <Wooble> (is 00:01 2 minutes after 23:59 or 23 hours and 58 minutes before it?)
[18:34:04] <lesshaste> how would I subtract 30 minutes from a datetime?
[18:34:15] *** Joins: rsx (~dummy@ppp-188-174-130-201.dynamic.mnet-online.de)
[18:34:54] <SnoopJ> `yourobj + timedelta(minutes=-30)`
[18:35:44] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[18:36:19] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6860-c946-993e-2148.res6.spectrum.com)
[18:36:21] <lesshaste> https://bpa.st/3VTA shows [datetime.timedelta(seconds=29400), datetime.timedelta(seconds=29400)]
[18:36:27] <lesshaste> which is definitely not what I wanted
[18:37:19] <Yhg1s> lesshaste: so extract the info you want from the timedeltas, or format them how you want them to be formatted.
[18:37:34] *** Joins: Julian (~tos9@python/site-packages/Julian)
[18:37:40] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[18:38:11] <lesshaste> Yhg1s,  what is weird is if I print them individually in the loop I get 8:40
[18:38:29] <Yhg1s> lesshaste: that's not weird at all. that's how printing of lists works. it prints the repr() of the things in the list.
[18:39:22] *** Joins: srhm (~ascii@user/srhm)
[18:39:24] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[18:39:37] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Ping timeout: 248 seconds)
[18:40:16] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[18:40:38] <lesshaste> how do I test if start is before midday? I tried start < time(12) but you can't compare a datetime and a time
[18:41:10] <Yhg1s> lesshaste: start.time() < time(12)
[18:41:20] <lesshaste> thanks
[18:41:59] *** Joins: Elzington (~Elzington@68.235.43.172)
[18:42:00] *** Quits: daoudr (~daoudr@178.197.212.212) (Remote host closed the connection)
[18:43:11] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[18:46:01] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[18:46:03] *** Joins: ahooda (~user@pool-173-54-215-57.nwrknj.fios.verizon.net)
[18:46:49] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[18:48:19] *** Joins: torandu (~sean@94.10.125.197)
[18:48:41] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (Quit: Peng timeout)
[18:49:12] *** Quits: ahooda (~user@pool-173-54-215-57.nwrknj.fios.verizon.net) (Remote host closed the connection)
[18:49:15] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[18:49:31] *** Joins: ganchan (~thomas_w@user/ganchan)
[18:49:48] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 272 seconds)
[18:49:54] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[18:50:09] *** Quits: y1n (~y1n@84-115-65-216.wifi.dynamic.surfer.at) (Ping timeout: 268 seconds)
[18:50:46] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:51:22] <lesshaste> timedelta is hard to deal with. To add a list of them needs a trick too
[18:51:33] <SnoopJ> time in general is, heh
[18:51:49] *** Joins: wyclif (~wyclif@user/wyclif)
[18:52:15] *** Joins: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com)
[18:52:19] <Yhg1s> lesshaste: I'm not sure why you say it's hard to deal with. Is there something you're trying to do that's not working? (It helps if you ask more complete questions.)
[18:52:31] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[18:52:49] <lesshaste> Yhg1s, I made a list of timedeltas. I then wanted to know the total number of hours and minutes
[18:53:04] <lesshaste> this seems to involve functools and operator to do it
[18:53:17] <lesshaste> reduce(operator.add, hours)
[18:53:26] <lesshaste> and then you have to convert that into hours and minutes
[18:53:51] <Yhg1s> lesshaste: ugh, reduce. sum() makes more sense. But that's not a problem with *timedelta*, just with 'adding things in a list'.
[18:54:25] <SnoopJ> It'd be nice if sum() did the same thing, I always find sum(somelist, default=whatever) worrisome
[18:54:33] <lesshaste> yes!
[18:54:52] *** Quits: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[18:55:01] <SnoopJ> "that thing is a little idiosyncratic and I'm not confident I won't step on one of the sharp edges" is something like my thought process. Maybe I'm too scared of the "this is for numerical stuff" docstring
[18:55:06] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Quit: stoiclunchbox)
[18:55:09] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:55:13] <Yhg1s> lesshaste: and yes, you have to convert the timedelta into hours and minutes if you want hours and minutes. the 'total_seconds' method helps.
[18:55:14] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[18:55:17] <grym> sum(1 for lines in f) is one of the more "ow, wait, what?" one liners i recall discovering
[18:55:36] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:55:36] <SnoopJ> those I don't mind so much
[18:55:43] *** Joins: gan (~thomas_w@user/ganchan)
[18:55:51] <SnoopJ> ...but that one is maybe a bit silly :)
[18:55:59] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[18:56:03] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Client Quit)
[18:56:08] *** Quits: ganchan (~thomas_w@user/ganchan) (Quit: Leaving)
[18:56:12] <Yhg1s> SnoopJ: the main reason you have to specify the starting value with sum() is that it makes it obvious what the type will be if the iterable is empty.
[18:56:23] <SnoopJ> Yhg1s, sure I understand *why* it is the way it is
[18:56:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[18:56:46] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[18:57:08] *** Joins: wyclif (~wyclif@user/wyclif)
[18:57:14] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[18:57:14] <SnoopJ> I may have created a "that's for iterables of numerical values" mental rule that is stronger than the reality
[18:57:15] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[18:57:28] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[18:58:04] *** Quits: Linux77 (~kvirc@187-126-71-30.user3p.veloxzone.com.br) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[18:58:21] <hexology> in poetry, is there a way to get the path to the managed venv? like how pipenv has `pipenv --venv`
[18:58:31] <grym> hexology: info -p, i think
[18:58:37] *** Quits: habamax (~maksim.ki@user/habamax) (Quit: Leaving)
[18:58:42] <hexology> thanks
[18:58:52] <grym> hexology: `poetry env info -p`, that is
[18:59:43] <hexology> ah i was about to say
[19:00:15] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:00:23] <Wooble> SnoopJ: well, the fact that it typechecks and refuses to work on strings doesn't help break that model :)
[19:00:57] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 248 seconds)
[19:01:01] <SnoopJ> Wooble, yea it just has an air of "this may surprise you" to me where I am pretty sure what happens when I am using add
[19:01:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[19:02:11] *** Joins: y1n (~y1n@84-115-64-207.wifi.dynamic.surfer.at)
[19:02:47] <Wooble> "there should be one obvious way to do a thing, and if you try a different way you should get a TypeError and a suggestion"
[19:03:06] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[19:03:25] <SnoopJ> it does at least do that, even if it doesn't do a good job motivating *why*
[19:04:40] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[19:04:58] *** Joins: zebrag (~chris@user/zebrag)
[19:05:13] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 248 seconds)
[19:05:40] <very_sneaky> is there an easy way to get the name of a variable as a string
[19:06:14] <SnoopJ> very_sneaky, objects might have more than one name
[19:06:28] <very_sneaky> more than one?
[19:06:45] *** Joins: molt (~molt@79.140.150.21)
[19:06:50] <SnoopJ> very_sneaky, sure, example: `a = 42; b = a; # a and b are two names for one object, the integer 42`
[19:07:40] <SnoopJ> `name = ...` means "attach this name to this value" in Python, which can be confusing if you're used to languages like C that have "variables". Helpful reading: https://nedbatchelder.com/text/names1.html
[19:07:44] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 252 seconds)
[19:07:58] <very_sneaky> ah, true.
[19:08:14] <very_sneaky> yeah, no it makes sense. they're both references to the same memory
[19:08:18] <grym> very_sneaky: normally when i ask that question, my next question is "do i want a dict instead"
[19:08:26] <grym> and usually the answer to _that_ question is yes
[19:08:26] <SnoopJ> very_sneaky, well, they *might* be. Memory is the runtime's problem.
[19:08:37] <Wooble> very_sneaky: next(k for k, v in locals().items() if v is thing) will give you an answer, although there's probably not a *right* answer. :)
[19:08:39] <very_sneaky> sure.
[19:08:59] <SnoopJ> but it helps to remember that names are basically strings attached to values, and they don't "know" about each other
[19:09:02] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8)
[19:09:09] <very_sneaky> Wooble: cheers. came across a similar solution, was looking for something that didn't involve iterating
[19:09:11] *** Joins: node1 (~node1@user/node1)
[19:09:33] <SnoopJ> yea looking at locals() is how you'd figure out what name(s) a value might be available under
[19:09:46] <SnoopJ> from where execution is happening, that is
[19:09:54] <very_sneaky> SnoopJ: in this case i'm after functionality similar to `{ string = "12345"; print(string); }` >> 'string'
[19:10:20] <jinsun> very_sneaky: print("string")
[19:10:27] <Wooble> the good news is you already know the name of the variable when writing that code. :)
[19:10:29] <SnoopJ> very_sneaky, ^ why not that?
[19:10:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:10:45] <SnoopJ> presumably the real case is a little more sophisticated :)
[19:10:47] <very_sneaky> that's my current solution. it's verbose for the number of error messages i'm printing haha
[19:11:00] *** Joins: Voyager2Spirit (~Voyager2S@176.45.37.90)
[19:11:03] <very_sneaky> perhaps clearer, though. just searching for possible alternatives
[19:11:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[19:11:27] <Wooble> very_sneaky: f"{x=}"
[19:11:29] <SnoopJ> well, it's hard to say anything about the problem you're actually gnawing on. As Wooble says, in *that* code, you already know the answer you seek, you typed it in your code.
[19:11:39] <grym> very_sneaky: how about `values = {"string":"12345"}; for k,v in values.items(): print(k,v)
[19:11:49] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[19:11:50] *** Joins: cdown_ (~cdown@163.114.131.1)
[19:12:10] <very_sneaky> Wooble: i don't want the value, which i guess i could tokenize from that string
[19:12:43] *** Joins: Pixi (~Pixi@user/pixi)
[19:13:00] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[19:13:05] <Wooble> very_sneaky: sorry, making assumptions. I don't know how "var" is more verbose when not also printing values, unless you're concerned about the 2 bytes for the quotes.
[19:13:06] <very_sneaky> grym: I'm actually pretty limited in what i can do here - this is code that's going into a conan recipe, so i'm provided the options in terms of `self.options.THIS_IS_AN_OPTION` - i guess i could manually transcribe those to a dict
[19:13:29] * SnoopJ still isn't sure why the name needs to be resolved if the name is known at source-writing time
[19:14:10] <very_sneaky> SnoopJ: it doesn't necessarily. just wondering if there's a way to reduce verbosity
[19:14:29] <SnoopJ> very_sneaky, what I'm saying is that I have no idea what the task is
[19:14:44] <SnoopJ> If you want to find the string form of an identifier, it's the string that contains the identifier
[19:14:48] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 268 seconds)
[19:14:55] *** cdown_ is now known as cdown
[19:15:00] <very_sneaky> SnoopJ: this is what i'm currently working with: https://bpa.st/OYEA
[19:15:01] <SnoopJ> (well, leaving aside the problem of equivalence)
[19:15:25] <very_sneaky> was looking for a way to reduce the number of "the same" statements
[19:15:53] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 248 seconds)
[19:16:09] *** Joins: cheater (~Username@user/cheater)
[19:16:47] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:17:09] <SnoopJ> very_sneaky, ah. I would probably do something like `for flagname, otherflagname in OPTIONS_DICT.items(): `if getattr(self.options, flagname) and not getattr(self.options, otherflagname): raise ConanInvalidConfiguration(f"Option {flagname} cannot be enabled without enabling {otherflagname}")` or something in this direction
[19:17:16] <very_sneaky> was thinking i could create a dict that mapped the dependencies, and then check for existence of a given variable name within the dict, thus reducing the logic to essentially a lookup in a for loop over the options. problem is doing that comparison, needs both to be a string
[19:17:21] <SnoopJ> where OPTIONS_DICT is..yea, that
[19:17:22] *** Joins: wyclif (~wyclif@user/wyclif)
[19:17:42] <SnoopJ> `{"USE_SYSTEM_LAPACK": "ARMA_USE_LAPACK", ...}`
[19:17:55] <very_sneaky> yep, that was my thought
[19:18:18] <SnoopJ> the bigger annoyance is doing obj.attr with a known string, and that's what getattr() does for us there
[19:18:20] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:18:27] <Wooble> BTW, variable names and attribute names are very different, and we could have avoided this whole conversation :)
[19:18:31] <very_sneaky> ah, okay. i'll play with that a bit more then
[19:18:37] <very_sneaky> i've not used getattr much
[19:19:00] *** Joins: besnn (~besnn@user/besnn)
[19:19:22] <SnoopJ> getattr(foo, bar) is semantically equivalent to `foo.bar`
[19:19:32] <SnoopJ> err, sorry, getattr(foo, "bar")
[19:19:48] <very_sneaky> yeah gotcha, it's a nice bridge to the solution i'm looking for
[19:20:07] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 245 seconds)
[19:20:26] <SnoopJ> they're almost like names stuck on objects except that this calls a method on the object and some objects implement some pretty special magic to figure out what's being requested (pandas's DataFrame does this with column names, for instance)
[19:20:54] *** Quits: Voyager2Spirit (~Voyager2S@176.45.37.90) (Quit: Leaving...)
[19:20:58] <SnoopJ> but without the magic, they're basically names inside that instance
[19:21:05] <very_sneaky> the beauty of languages with reflection
[19:21:20] <SnoopJ> "everything is at least `object`" has its perks
[19:21:36] <very_sneaky> yep for sure
[19:22:31] *** Joins: Voyager2Spirit (~Voyager2S@176.45.37.90)
[19:24:55] <mike18> hi i have 2 pandas dataframe with date and cols, how can i insert a col from dataframe 2 into dataframe 1 based on date?
[19:26:01] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[19:26:53] *** Quits: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5) (Remote host closed the connection)
[19:26:54] *** Quits: Voyager2Spirit (~Voyager2S@176.45.37.90) (Remote host closed the connection)
[19:27:11] *** Joins: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5)
[19:27:26] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[19:28:04] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:28:19] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[19:28:41] *** Quits: y1n (~y1n@84-115-64-207.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[19:28:50] <jinsun> mike18: if the dates are the index then you can simply assign, pandas takes care of matching the index
[19:29:00] <mike18> the date is not sorted
[19:29:05] <mike18> and might miss a few dates
[19:29:10] *** Quits: Naan` (~Naan@user/naan) (Remote host closed the connection)
[19:29:34] <jinsun> that doesn't matter, the only thing that matters is that the dates are the index and not some random column
[19:29:50] <tpr> take a look at join() and merge() on the dataframe, if you don't want to have the date as an index
[19:30:41] <tpr> merge allows for more options, e.g., using a differently named column names for joining
[19:31:15] <tpr> and look into 'how' parameter to see which type of join you prefer to have
[19:31:30] *** Joins: Voyager2Spirit (~Voyager2S@176.45.37.90)
[19:36:58] *** Quits: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5) (Quit: Leaving)
[19:39:52] <jiffe> I have a python cffi module that I want to be able to install via pip, currently I am building it at package time but I'm running into glib version problems, how might I be able to solve that?
[19:40:43] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 268 seconds)
[19:40:44] *** Quits: {HD} (~{HD}@102.165.16.82) (Ping timeout: 252 seconds)
[19:40:52] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[19:41:00] <ammar2> paste the full error you're getting on https://bpa.st/
[19:41:11] *** Joins: cdown_ (~cdown@89.32.122.5)
[19:42:33] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[19:43:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:44:02] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[19:44:07] <jiffe> I get ImportError: /lib64/libc.so.6: version `GLIBC_2.7' not found
[19:44:08] *** cdown_ is now known as cdown
[19:44:16] *** Joins: wyclif (~wyclif@user/wyclif)
[19:44:24] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:44:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[19:46:47] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 252 seconds)
[19:47:36] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Quit: ZNC 1.8.2 - https://znc.in)
[19:47:53] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Ping timeout: 248 seconds)
[19:47:56] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[19:48:03] <Wooble> jiffe: you likely want to build with manylinux if you need to deploy to older machines
[19:48:26] *** Joins: endless (~endlessed@server.zane.wiki)
[19:48:39] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:49:13] *** Joins: Julian (~tos9@python/site-packages/Julian)
[19:49:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:49:41] *** Joins: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de)
[19:49:43] *** Joins: wyclif (~wyclif@user/wyclif)
[19:50:24] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:50:37] <SnoopJ> and you'll want a glibc that is compatible with what's on the target system(s)
[19:50:55] <SnoopJ> or you could build it on the user's system
[19:51:45] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:51:52] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:51:56] <SnoopJ> 2.7 is pretty dang old, 2007
[19:53:00] <jiffe> the machine I'm trying to run this on is older than the machine the package was built on.. this company doesn't like to upgrade much
[19:53:50] <SnoopJ> explains why you're linked against a libc newer than what it has. So, yea, establish a build environment with an older libc, or build it on the target machine
[19:54:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[19:54:36] <Wooble> manylinux1 uses 2.5. it's deprecated, but very broadly compatible.
[19:55:13] *** Joins: wyclif (~wyclif@user/wyclif)
[19:56:00] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Quit: bye)
[19:56:34] *** Joins: {HD} (~{HD}@37.19.197.241)
[19:58:21] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[19:59:02] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:59:58] <hexology> does mypy not support TypeAlias? "error: Variable "typing.TypeAlias" is not valid as a type"
[20:00:10] <hexology> i'm using mypy 0.910 under python 3.10b4
[20:00:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:00:33] <phy1729> You only need that when your alias is a string because forward declaration iirc
[20:00:44] *** Joins: wyclif (~wyclif@user/wyclif)
[20:01:17] *** Joins: toine (~antoine@2001:41d0:e:41f::1)
[20:01:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[20:01:45] *** Quits: toine42 (~antoine@2001:41d0:e:41f::1) (Read error: Connection reset by peer)
[20:03:25] *** Quits: hyper_dave (~hyper_dav@static.83.88.217.95.clients.your-server.de) (Read error: Connection reset by peer)
[20:04:10] *** Joins: ice99 (~ice9@user/ice9)
[20:04:46] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[20:05:35] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[20:06:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[20:06:37] <mike18> jinsun: can you also do the merge on 2 cols?
[20:06:59] *** Quits: Voyager2Spirit (~Voyager2S@176.45.37.90) (Remote host closed the connection)
[20:07:15] *** Joins: wyclif (~wyclif@user/wyclif)
[20:08:17] *** Joins: ericoc (sid179921@id-179921.highgate.irccloud.com)
[20:08:25] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[20:08:47] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[20:08:52] <sybariten> OK so i have a bit of a mental block on a very basic thing here. I've written a tiny parser, verify_input() that will take a string and check it against some tests to see if it's legal, for instance that the numbers are within a specific range. This function just returns whatever was input, at the moment. If there is no problem.
[20:09:00] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[20:09:06] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[20:09:23] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[20:09:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:09:29] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[20:10:26] *** Quits: cation (cation@user/cation) (Ping timeout: 252 seconds)
[20:10:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[20:10:29] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[20:10:38] <sybariten> the way i'm using it is myResultingVariable = verify_input(input("please enter which year"))
[20:11:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:11:21] <rendar> graingert: are you there?
[20:11:52] <sybariten> This doesnt seem to be optimal, so i've rewritten verify_input() a little. Same tests, but now it returns true or false depending on if the values are good. But I'm a bit lost at the best way to use this now, in order to set the variable myResultingVariable
[20:11:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[20:12:03] <SnoopJ> rendar, let's assume the answer is yes because IRC is an asynchronous medium, ask your complete question (even if they aren't, someone else might know the answer)
[20:12:06] *** Quits: schumaml1 (~schumaml@dslb-178-007-207-243.178.007.pools.vodafone-ip.de) (Quit: WeeChat 3.0.1)
[20:12:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:12:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:12:44] *** Joins: wyclif (~wyclif@user/wyclif)
[20:12:56] *** Joins: cation (cation@user/cation)
[20:13:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[20:13:20] <Wooble> sybariten: set the variable, then verify it afterward.
[20:13:21] <rendar> yes, well graingert told me i should use anyio because it adds a very useful shim over the roughness of asyncio
[20:13:22] <sybariten> so basically i need to do something like if verify_input(input("please enter some value")): then .... what?
[20:13:32] <rendar> i wanted to know if i should use trio or anyio or both
[20:13:35] *** Joins: ice9 (~ice9@user/ice9)
[20:13:45] <sybariten> Wooble: aha .. hmm
[20:13:48] <grym> sybariten: then assign the variable
[20:13:55] <graingert[m]> rendar: Trio or anyio are both great
[20:14:05] <grym> sybariten: you probably don't want to return T/F in verify_input if you intend to pass input() to it
[20:14:15] <sybariten> grym: yeah, but i've already done the input() thing... what do i assign myResultingVariable to?
[20:14:16] <rendar> graingert[m]: ok but why in some projects i saw that they are both used?
[20:14:36] <sybariten> grym: aha?  :-/
[20:14:43] <grym> sybariten: either `proposed_input = input(...), if verify_input(proposed_input): resulting_input = proposed_input
[20:14:47] *** Joins: xon (~xon@host-75-net-68-160-119.mobilinkinfinity.net.pk)
[20:15:05] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 248 seconds)
[20:15:08] <sybariten> grym: aha, so an extra variable! ok
[20:15:13] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[20:15:22] <grym> sybariten: or verify_input returns the input if it's ok and raises otherwise, then `try: resulting_input = verify_input(input... except ValueError: ...`
[20:15:23] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 252 seconds)
[20:15:27] <sybariten> grym: but does it look like bad practice or what?
[20:15:37] *** Quits: Fluxx (~Fluxx@user/fluxx) (Ping timeout: 248 seconds)
[20:15:38] *** Joins: ice9 (~ice9@user/ice9)
[20:15:57] <graingert[m]> rendar: Which ones?
[20:16:16] *** Quits: ice9 (~ice9@user/ice9) (Max SendQ exceeded)
[20:16:25] <graingert[m]> Sometimes you have to do stuff that only works in trio using trio
[20:16:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:16:31] <Wooble> sybariten:  or you could do  if verify_input(myResultingVariable := input("...")):  but like probably don't. ;)
[20:16:40] <graingert[m]> Eg stuff I've been too lazy to finish porting to anyio
[20:16:49] <xon> I hope everybody is doing well! I'm using flask-jwt-extended to create token "create_access_token(identity=user.get_id())". now how can I extract the identity (user.id) from the token in unprotected endpoint. I tried "decode_token" but is not working.
[20:17:05] <rendar> graingert[m]: i don't remember i was browsing some code on github, also.. anyio library is called like that because it can work with asyncio, or trio, or whatever, but i'm wondering: if i include trio, why would i need anyio or viceversa?!
[20:17:23] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:17:41] <sybariten> grym: i have (had) the thing now, where it returns the input or raises a valueerror otherwise, the problem is that...  well to cut a long story short i didnt realy know how to get back to the main menu in my script then, with different choices. Cause when doing the valueerror i broke out of the script with a python error. But this is maybe difficult to comment on for someone else because there are
[20:17:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:17:43] <sybariten> many ways to build a simple text menu...
[20:17:51] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[20:17:55] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[20:18:19] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:18:21] *** Joins: wyclif (~wyclif@user/wyclif)
[20:18:23] <sybariten> Wooble: oh i'm not sure i've seen that type of construction...!
[20:19:33] <Wooble> sybariten: it's relatively new syntax, and makes some people very angry. :)
[20:19:43] <sybariten> haha okay
[20:19:44] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Quit: thimslugga)
[20:20:25] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[20:20:47] <sybariten> the most compact python syntax is often confusing for me as a not-so-experienced programmer..... unfortunately the long and complicated constuctions are often simpler to read
[20:21:02] <graingert[m]> rendar: Right, but anyio has some nice utils like anyio.Path which I think is nicer than trio.Path
[20:21:13] <graingert[m]> It's also got buffered byte streams
[20:21:13] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Client Quit)
[20:21:29] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 248 seconds)
[20:21:32] <rendar> graingert[m]: i see, so it could be ok to use both trio and anyio
[20:21:38] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[20:21:40] <graingert[m]> Sure
[20:22:27] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:22:41] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:22:42] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:23:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:24:00] *** Joins: wyclif (~wyclif@user/wyclif)
[20:24:06] *** Quits: LordVan (~lordvan@gentoo/developer/lordvan) (Quit: Leaving)
[20:24:45] <rendar> graingert[m]: ok, but the 2 libraries have different loops, i mean, if i create a tcp server with trio, it would be impossible to use it with anyio buffered bytes stream of course!
[20:25:08] <graingert[m]> rendar: No
[20:25:31] *** Joins: Barones (~Barones@2804:48dc:8500:0:a0d6:b18d:cdd3:feba)
[20:26:04] <graingert[m]> anyio uses whichever loop you pick when you call run, or whatever eventloop is progressing your current task
[20:28:36] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[20:28:40] <graingert[m]> There's some caveats with to_thread
[20:28:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:29:25] *** Joins: wyclif (~wyclif@user/wyclif)
[20:30:56] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Quit: Leaving)
[20:32:38] <rendar> graingert[m]: ok, let's say i want to use trio, since it's not asyncio, could i have problems to use libraries such as asyncpg, which uses asyncio?
[20:33:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:33:22] <graingert[m]> rendar: You'd use https://github.com/python-trio/triopg
[20:33:32] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[20:33:43] <rendar> oh
[20:34:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[20:34:18] <rendar> can't i use the asyncio version?
[20:34:33] *** Joins: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e)
[20:34:36] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43)
[20:35:04] *** Joins: wyclif (~wyclif@user/wyclif)
[20:39:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:40:04] *** Joins: derelict (~derelict@user/derelict)
[20:40:57] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[20:41:15] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[20:41:16] *** Joins: wyclif (~wyclif@user/wyclif)
[20:41:32] *** Joins: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com)
[20:43:13] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:43:40] *** Joins: mavrix (~mavrix@user/tinwasp)
[20:46:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:47:01] *** Joins: wyclif (~wyclif@user/wyclif)
[20:47:02] <graingert[m]> <rendar> "can't i use the asyncio version?" <- Triopg wraps asyncpg with trio-asyncio
[20:48:27] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 245 seconds)
[20:49:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:50:24] <graingert[m]> You can use asyncpg directly yourself with trio-asyncio
[20:50:33] <graingert[m]> But it's easier to use triopg
[20:50:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:51:20] <jinsun> mike18: yes, you can give two columns to the on argument pd.merge(df1, df2, on=[column1, column2], ...)
[20:51:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[20:51:26] <mike18> ok cool
[20:51:28] <mike18> works :)
[20:51:56] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[20:51:58] *** Quits: matkor (~matkor@93.179.197.152) (Quit: Konversation terminated!)
[20:52:31] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[20:52:32] *** Joins: wyclif (~wyclif@user/wyclif)
[20:52:52] <jinsun> hexology: that is mypy bug, https://github.com/python/mypy/issues/9404
[20:53:03] <rendar> graingert[m]: if things are like that, then the best solution is asyncio+anyio, in this way i can use useful anyio function and asyncio default libraries such as asyncpg
[20:53:53] *** Quits: Zer0xFF (m-3laxwu@matrix.michaelsasser.org) (Remote host closed the connection)
[20:55:18] <sybariten> i have a bit of problems understanding a construct that i had in a script, upon reccommendation from here i think, which used to work but gives me problem now since i changed someething else
[20:55:48] *** Joins: Zer0xFF (m-3laxwu@matrix.michaelsasser.org)
[20:56:14] <sybariten> its     *[int(x) for x in resulting_input])     but this just runs int() on each part of a split-up string, right?
[20:56:34] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[20:57:31] <sybariten> this resulting_input is typicallly either a year like 1990 , or a year and an extra integer, like 1990 12  . I rewrote another helper function and now i'm suddenly getting    ValueError: invalid literal for int() with base 10: ' '
[20:57:45] <hexology> jinsun: alas
[20:58:15] <sybariten> is it trying to run int() on the space between "1990 12" , perhaps?
[20:58:38] <dale> sybariten: I don't see where you're splitting resulting_input at all.
[20:59:00] <dale> If resulting_input is a string then you're actually running int on every character in the string.
[20:59:01] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Read error: Connection reset by peer)
[20:59:12] <sybariten> hm.  let me see if i had a split at another place before, that i somehow lost now
[20:59:14] <SnoopJ> and if the string isn't a valid integer literal, it's an error
[20:59:33] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:59:41] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[20:59:42] *** Quits: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e) (Remote host closed the connection)
[21:00:08] *** Joins: JanC (~janc@user/janc)
[21:00:22] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-0588-6be2-6556-e9ef.res6.spectrum.com)
[21:00:30] *** Joins: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e)
[21:02:38] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:02:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:02:44] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[21:02:54] <graingert[m]> <rendar> "graingert: if things are like..." <- In my experience trio-asyncio is less buggy than asyncio
[21:03:00] <graingert[m]> Especially on windows
[21:03:19] <rendar> uhm
[21:03:26] <sybariten> ok i think i may have found my mistake, i need to do this split() in two different functions now whereas before i could inherit the already split values .. lets see
[21:03:31] <rendar> so you'd start with trio+anyio instead of asyncio+anyio?
[21:03:41] *** Joins: wyclif (~wyclif@user/wyclif)
[21:03:58] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[21:07:19] *** Joins: jan6 (jan6@tilde.team/user/jan6)
[21:07:53] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[21:08:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:09:10] *** Quits: mavrix (~mavrix@user/tinwasp) (Quit: Konversation terminated!)
[21:09:22] *** Joins: wyclif (~wyclif@user/wyclif)
[21:09:58] *** Joins: MikZyth (~MikZyth@188.65.242.174)
[21:10:12] *** Joins: emika6 (~emika@83.136.182.164)
[21:10:40] *** Quits: emika (~emika@185.207.249.83) (Ping timeout: 256 seconds)
[21:10:40] *** emika6 is now known as emika
[21:11:08] <mat001> Can someone tell me why deprecation warning in this init method is not displaying in the console: https://bpa.st/DODQ? It's added here in this code: https://github.com/optimizely/python-sdk/blob/master/optimizely/optimizely_config.py#L52
[21:11:33] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-0588-6be2-6556-e9ef.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:12:25] *** Joins: Enitin (~Enitin@82.102.22.84)
[21:13:04] <mat001> The thing is if I call instance of OptimizelyFeature class in repl the warning shows. But it doesn't show when I use the SDK properly via SDK APIs.
[21:13:07] *** Joins: daoudr (~daoudr@178.197.212.212)
[21:13:30] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 256 seconds)
[21:13:33] *** Quits: rsx (~dummy@ppp-188-174-130-201.dynamic.mnet-online.de) (Quit: rsx)
[21:13:46] <mat001> But the print ctatements inside that class DO show, so the object is called. But the warning doesn't show. Strange
[21:13:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[21:13:56] <jan6> hey, I'm just wondering, if I want to use a macro variable from a C header, in python, how'd I do it? can it be done in ctypes, or only ffi? I suppose I could just write a simple C library which exports them into python, but I'd rather not...
[21:14:07] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[21:15:21] <SnoopJ> mat001, when you say "in the console," are you running this from the REPL? DeprecationWarning can be kind of weird in that case: https://bugs.python.org/issue40199
[21:15:52] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-bd98-371c-0581-a78a.res6.spectrum.com)
[21:16:42] <SnoopJ> or rather, the runtime's treatment of it. tl;dr you end up with different configurations for what warnings to suppress
[21:17:03] *** Joins: Skyfire (~pyon@user/pyon)
[21:17:25] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:17:44] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-bd98-371c-0581-a78a.res6.spectrum.com) (Client Quit)
[21:18:23] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:19:03] *** Joins: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk)
[21:19:28] *** Joins: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net)
[21:20:07] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 245 seconds)
[21:20:49] *** Joins: wyclif (~wyclif@user/wyclif)
[21:21:48] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 272 seconds)
[21:22:43] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[21:22:44] *** Quits: daoudr (~daoudr@178.197.212.212) (Quit: Leaving)
[21:23:04] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:23:45] <SnoopJ> mat001, you can run with `-W<action>::DeprecationWarning::` where <action> is "once" or "always" or set the PYTHONWARNINGS env var to the same thing to get the warning, or -Wall if you don't care about turning all warnings on. https://bpa.st/Q56A
[21:24:21] *** Quits: xon (~xon@host-75-net-68-160-119.mobilinkinfinity.net.pk) (Quit: Leaving...)
[21:24:42] <SnoopJ> or activate the filter from your project config, in the code itself, etc.
[21:24:55] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:24:59] *** Joins: nathanjell (~Nathan@d162-157-36-152.abhsia.telus.net)
[21:26:09] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 268 seconds)
[21:26:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[21:26:38] *** Joins: fdan (~fdan@192.146.154.3)
[21:27:19] <mat001> SnoopJ: good ideas! I'll try W<action> --- always! Yes, running in the console
[21:27:42] <SnoopJ> erm, my question was basically asking what "console" meant
[21:27:52] *** Joins: wyclif (~wyclif@user/wyclif)
[21:27:55] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-b5c2-d841-f300-e495.res6.spectrum.com)
[21:28:00] <SnoopJ> but I remembered wrong, it behaves a little counter-intuitively in not-the-REPL too
[21:28:06] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-b5c2-d841-f300-e495.res6.spectrum.com) (Client Quit)
[21:30:10] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:30:12] *** Quits: wolfgang (~wolfgang@101.174.170.3) (Remote host closed the connection)
[21:30:45] *** Joins: daoudr (~daoudr@178.197.212.212)
[21:30:46] *** Joins: Croves (~Croves@2804:14c:578b:9102:6d79:8bf5:23f3:f917)
[21:31:03] *** Quits: rendar (~rendar@user/rendar) ()
[21:32:16] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:32:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:33:52] *** Joins: wolfgang (~wolfgang@101.174.170.3)
[21:34:16] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[21:34:25] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:25] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-b54d-acf5-9832-69ad.res6.spectrum.com)
[21:35:53] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[21:36:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[21:37:04] *** Quits: cdown (~cdown@89.32.122.5) (Remote host closed the connection)
[21:37:37] *** Joins: ska (~ska@user/ska)
[21:39:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[21:39:54] <ska> Is there a pattern for a subclass to be registered, but subsequent registrations be refused?
[21:39:55] *** Joins: wyclif (~wyclif@user/wyclif)
[21:40:19] <bpalmer> you mean registering a subclass of the same name?
[21:40:21] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Ping timeout: 268 seconds)
[21:40:21] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[21:40:30] <bpalmer> or registering the class again? Or registering any other subclass of the parent class?
[21:41:23] *** Joins: elliewhatever (uid512890@id-512890.brockwell.irccloud.com)
[21:41:25] <ska> I have a Base class and want to make unique children classes. Want to ensure no other subclass of same name gets created.
[21:41:30] *** Joins: haroon (~haroon@gw.wmd.de)
[21:42:46] <bpalmer> I don't know of a pattern, but you can just check for that name being present in your registry, in your metaclass
[21:43:26] <bpalmer> (or, rather, your metaclass's __new__ )
[21:43:37] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[21:43:43] <nedbat> ska: also, __subclasses__ is a list of subclasses of the class
[21:43:43] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:44:02] <bjs> ska: what goes wrong if there are two subclasses with the same name?  what if they're from different files
[21:44:33] <bpalmer> __subclasses__ is just immediate subclasses, though, right?
[21:45:13] <bpalmer> if you want to preclude A -> B -> c.C   and A -> B -> d.C  , you'll have to do a bit of traversing
[21:45:22] <ska> Right now i don't think python allows it. not sure yet.
[21:45:29] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[21:46:49] *** Joins: audiocat (~audio@2603-8081-1800-00ad-e688-c570-cb5d-95fb.res6.spectrum.com)
[21:47:28] <bpalmer> ska: python is fine with multiple classes of the same name; they can be separated by python packages, or even be in the same package
[21:47:58] <bpalmer> (the later definition will overwrite the earlier definition, but if you've already created instances of that earlier type, it's distinct from instances of the new type that's named the same)
[21:48:19] <ska> bpalmer: Yea, I try to create a set of unique subclasses that get registered, but want to preclude re-creation.
[21:48:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:49:00] *** Joins: wyclif (~wyclif@user/wyclif)
[21:50:08] <ska> the base.__subclasses__() check seems to be useful here.
[21:51:39] <jinsun> ska: maybe you wnat to do something like this, https://www.python.org/dev/peps/pep-0487/#subclass-registration, but add a check for len of subclasses in the end in `__init_subclass__`
[21:52:09] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 248 seconds)
[21:52:23] *** Quits: nathanjell (~Nathan@d162-157-36-152.abhsia.telus.net) (Quit: Leaving)
[21:53:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[21:54:30] *** Joins: wyclif (~wyclif@user/wyclif)
[21:56:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 252 seconds)
[21:56:46] *** Joins: Enitin (~Enitin@82.102.22.84)
[21:57:39] *** Quits: daoudr (~daoudr@178.197.212.212) (Remote host closed the connection)
[21:59:17] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[21:59:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:00:03] *** Joins: wyclif (~wyclif@user/wyclif)
[22:00:09] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 248 seconds)
[22:00:24] *** Quits: dba (uid502594@id-502594.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[22:02:24] *** Joins: Akuli (~Akuli@dy5cr7ykcd5w---v3qqvy-4.rev.dnainternet.fi)
[22:02:44] *** Joins: derelict (~derelict@user/derelict)
[22:03:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[22:03:58] *** Joins: Enitin (~Enitin@82.102.22.84)
[22:07:19] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8) (Quit: Leaving)
[22:08:43] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-b54d-acf5-9832-69ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:09:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[22:10:08] *** Joins: Auron (~Auron956@user/auron)
[22:10:46] *** Joins: Betal (~Betal@user/betal)
[22:11:05] *** Joins: wyclif (~wyclif@user/wyclif)
[22:11:37] *** Joins: akaWolf (~akaWolf@akawolf.org)
[22:11:58] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:12:12] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:13:58] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[22:14:49] *** Joins: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:16:07] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[22:16:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[22:16:37] *** Joins: wyclif (~wyclif@user/wyclif)
[22:16:56] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[22:17:37] *** Joins: darksun (~darksun@user/darksun)
[22:18:14] *** Joins: Narrat (~omnius@p200300df5f13268f06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:18:37] *** Joins: octav1a (~quassel@173.195.145.98)
[22:19:24] <octav1a> Can anyone help me with an idea for a webscraping thing? I would like to go to this page, "click" a few checkboxes, and submit to get the resulting data / sequence. http://genome.ucsc.edu/cgi-bin/hgc?hgsid=1136205989_fEuOKSWGwJT1SgB6QaSaXPqEomdO&g=htcGeneInGenome&i=ENST00000587708.7&c=chr19&l=35745650&r=35747519&o=knownGene&table=knownGene   -- I've been able to do other parts just using python's requests module. Is is something like this possible with
[22:19:24] <octav1a> that or do I need to simulate a web browser or  something for the form part?
[22:21:11] *** Quits: Croves (~Croves@2804:14c:578b:9102:6d79:8bf5:23f3:f917) (Quit: Client closed)
[22:21:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:22:07] *** Joins: wyclif (~wyclif@user/wyclif)
[22:22:56] <Wooble> octav1a: if the data you want is available through their REST api at http://genome.ucsc.edu/goldenPath/help/api.html you almost certainly want that instead of pretending to be a browser
[22:23:30] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 268 seconds)
[22:24:13] <octav1a> Wooble: I looked at that first but I couldn't figure out how to replicate the 'CDS exons only' option that that form has.
[22:24:48] <octav1a> (unchecking the other stuff except for CDS exons)
[22:25:26] <octav1a> Still it doesn't look like any javascript is involved so I feel it should be plausible.
[22:25:31] *** Joins: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com)
[22:25:59] <octav1a> Also just in general I'd be interested in ways to emulate a form submission using requests.
[22:26:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[22:27:13] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 268 seconds)
[22:27:40] *** Joins: wyclif (~wyclif@user/wyclif)
[22:27:49] <jinsun> you can press F12 in your browser and go to network tab, then press the submit button on the webpage, that should show what requests the browser is sending
[22:29:13] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[22:29:50] *** Quits: haroon (~haroon@gw.wmd.de) (Quit: Client closed)
[22:31:53] *** Quits: mike18 (~geri@217-149-162-237.nat.highway.telekom.at) (Remote host closed the connection)
[22:32:07] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[22:32:34] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Quit: Ping timeout (120 seconds))
[22:32:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:32:59] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[22:33:08] *** Joins: wyclif (~wyclif@user/wyclif)
[22:33:12] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[22:33:44] *** Joins: darksun (~darksun@user/darksun)
[22:37:22] *** Quits: fdan (~fdan@192.146.154.3) (Quit: Client closed)
[22:38:01] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 248 seconds)
[22:38:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[22:38:43] *** Joins: wyclif (~wyclif@user/wyclif)
[22:39:05] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 248 seconds)
[22:40:28] *** Joins: dev4449 (~dev4449@172.98.68.20)
[22:43:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:43:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[22:43:59] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[22:44:11] *** Joins: wyclif (~wyclif@user/wyclif)
[22:44:14] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[22:45:14] *** Quits: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs) (Ping timeout: 258 seconds)
[22:46:00] *** Quits: Akuli (~Akuli@dy5cr7ykcd5w---v3qqvy-4.rev.dnainternet.fi) (Quit: Leaving)
[22:47:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:47:53] *** Joins: wovixo (~wovixo@128.104.205.49)
[22:48:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[22:49:43] *** Joins: wyclif (~wyclif@user/wyclif)
[22:53:52] *** Quits: {HD} (~{HD}@37.19.197.241) (Ping timeout: 245 seconds)
[22:54:53] *** Quits: mr-red (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 252 seconds)
[22:55:05] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 248 seconds)
[22:55:37] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:55:46] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[22:57:27] *** Quits: Barones (~Barones@2804:48dc:8500:0:a0d6:b18d:cdd3:feba) (Remote host closed the connection)
[22:57:41] *** Joins: Barones (~Barones@2804:48dc:8500:0:691c:d4bc:61a9:4bf5)
[22:59:25] *** Joins: {HD} (~{HD}@102.165.16.62)
[22:59:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:00:19] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[23:00:43] *** Joins: wyclif (~wyclif@user/wyclif)
[23:01:43] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:02:57] *** Joins: pan (~quassel@pankid.club)
[23:04:05] *** Joins: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it)
[23:04:17] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 245 seconds)
[23:05:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[23:06:13] *** Joins: darksun (~darksun@user/darksun)
[23:06:13] *** Joins: wyclif (~wyclif@user/wyclif)
[23:06:58] *** Joins: Skyfire (~pyon@user/pyon)
[23:10:19] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[23:10:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:11:00] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[23:11:19] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[23:11:43] *** Joins: wyclif (~wyclif@user/wyclif)
[23:13:15] *** Joins: fofoni (~fofoni@user/fofoni)
[23:14:37] *** Joins: han-solo (~hanish@user/han-solo)
[23:15:34] *** Joins: Jigsy (~Jigsy@user/jigsy)
[23:16:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:17:14] *** Joins: wyclif (~wyclif@user/wyclif)
[23:19:34] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Quit: Leaving)
[23:19:37] *** Quits: {HD} (~{HD}@102.165.16.62) (Ping timeout: 248 seconds)
[23:20:08] <catbeard> anyone versed in paramiko Transport class?
[23:21:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[23:21:40] <catbeard> having an AttributeError saying that .auth_password() isn't a valid method for NoneType
[23:21:50] *** Joins: dme86 (~dan@user/dan86)
[23:21:55] <catbeard> e.g. `self.transport = paramiko.transport.Transport((self.host, self.port))` `self.client = self.transport.start_client()` `self.client.auth_password(self.user, self.pass, fallback=True)`
[23:21:56] <bpalmer> catbeard: in other words, your variable contains None, not a Transport object.
[23:22:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:22:16] <bpalmer> or, I guess, self.transport.start_client() returned NOne
[23:22:26] <catbeard> AttributeError: 'NoneType' object has no attribute 'auth_password
[23:22:45] *** Joins: wyclif (~wyclif@user/wyclif)
[23:22:50] *** Quits: cul8r (~cul8r@c-73-26-110-61.hsd1.nm.comcast.net) (Remote host closed the connection)
[23:24:09] *** Joins: enyc (~enyc@user/enyc)
[23:24:25] *** Joins: {HD} (~{HD}@102.165.16.81)
[23:24:25] *** Joins: Adrixan (~Adrixan@218.72.75.34.bc.googleusercontent.com)
[23:27:35] *** Joins: mci64 (~x@185.242.190.95)
[23:27:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:28:15] *** Quits: dimbag (~dimbag@pppoe246h31.ppp.kmv.ru) (Read error: Connection reset by peer)
[23:28:22] *** Joins: wyclif (~wyclif@user/wyclif)
[23:28:35] <jinsun> catbeard: seems like start_client gives None and auth_password is a method of self.transport, http://docs.paramiko.org/en/stable/api/transport.html#paramiko.transport.Transport.auth_password
[23:28:39] *** Quits: yogoyo (~yogoyo@user/yogoyo) (Quit: bye)
[23:29:53] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[23:31:14] *** Joins: Akuli (~Akuli@87-94-111-179.bb.dnainternet.fi)
[23:31:53] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 248 seconds)
[23:32:04] *** Joins: Steeve (~steve@user/steeve)
[23:32:17] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:4692:e3ec:239c:8c8) (Ping timeout: 252 seconds)
[23:33:41] *** Quits: sazawal (~sazawal@122.161.170.192) (Quit: Leaving)
[23:34:13] *** Joins: wilk (~wilk@user/wilk)
[23:36:41] *** Quits: {HD} (~{HD}@102.165.16.81) (Ping timeout: 248 seconds)
[23:37:47] <han-solo> also, there seems to be a `Transport.connect` method which is a shortcut `start_client`, `get_remote_server_key`, and `Transport.auth_password`
[23:38:06] <han-solo> s/shortcut/shortcut for/; # from the docs
[23:38:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[23:39:57] <catbeard> yeah but i don't want it to do that automatically, i want to call auth_password multiple times
[23:40:03] *** Joins: Enitin (~Enitin@82.102.22.84)
[23:40:04] <rpkilby> How have I completely missed this? I've been programming with Python for nearly a decade and just now found out that str.startswith accepts a tuple.
[23:40:31] <rpkilby> e.g., `my_str.startswith(('a', 'b'))`
[23:41:49] <phy1729> TIL too
[23:41:53] <SnoopJ> +2
[23:42:10] <Wooble> well I mean a decade ago you had to avoid it because your users might be on centos and using python 2.4? :)
[23:42:54] <Wooble> (I actually knew that but have never used it and forgot about it, so... today I relearned?)
[23:43:40] *** Quits: mr-red (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[23:44:03] <rpkilby> I've always seen `startswith(a) or startswith(b)`. It never occurred to me to even check until just now.
[23:45:04] <rud0lf> python is full of surprises
[23:45:25] <Wooble> sometimes they're even good surprises. :)
[23:46:07] <rud0lf> for example i've learned recently that mylist += [1,2,3] will mutate a list, but mylist = mylist + [1,2,3] will create new list and assign it to mylist
[23:46:17] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Ping timeout: 248 seconds)
[23:46:17] *** Joins: {HD} (~{HD}@102.165.16.72)
[23:46:28] <rud0lf> "mylist +=" sort of works like .extend()
[23:46:28] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[23:47:29] <jinsun> did you learn that from the python vs PHP discussion earlier today?
[23:47:33] <Wooble> and by "sort of" you mean it just calls extend. :)
[23:47:53] <rud0lf> maybe :)
[23:49:16] *** Quits: han-solo (~hanish@user/han-solo) (Killed (NickServ (GHOST command used by han-solo_!~hanish@103.104.46.13)))
[23:49:54] <Wooble> my favorite += surprise is that it mutates a thing in place, then tries to assign it, possibly generating an exception even though the mutation worked.
[23:50:38] *** Joins: han-solo (~hanish@user/han-solo)
[23:50:55] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[23:50:59] <Wooble> e.g.  x = ([],);x[0] += [1]
[23:51:55] *** Joins: matsaman (~matsaman@user/matsaman)
[23:54:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:54:51] *** Joins: wyclif (~wyclif@user/wyclif)
[23:54:56] *** Quits: gan (~thomas_w@user/ganchan) (Quit: Leaving)
[23:56:08] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:56:48] *** Joins: dme86 (~dan@user/dan86)
[23:56:55] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:57:43] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[23:58:13] *** Quits: dme86 (~dan@user/dan86) (Client Quit)
[23:58:51] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:59:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
