[00:03:30] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[00:05:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[00:05:57] *** Joins: random-nick (~random-ni@87.116.165.220)
[00:20:33] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:23:26] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:28:55] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[00:37:37] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 258 seconds)
[00:41:17] *** Quits: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da) (Ping timeout: 256 seconds)
[00:44:52] *** Quits: holycow (~rtaylor@69.172.184.139) (Remote host closed the connection)
[00:47:42] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[00:49:06] <drmeister> If you have a function that shouldn't return anything - is it good form to return (values)?
[00:50:32] <GreaseMonkey> drmeister: i'd say yes to that
[00:50:44] <GreaseMonkey> it's explicit, and if something really insists on getting a single value out of it then they get nil
[00:52:24] *** Joins: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da)
[00:53:23] <GreaseMonkey> ...also in a repl (at least in SBCL) it doesn't print anything as the result
[00:54:50] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[00:59:49] <stacksmith> when a function always returns the same number of values
[01:00:07] <stacksmith> SBCL generates smaller code..
[01:00:18] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Remote host closed the connection)
[01:01:10] <stacksmith> When optimizing anyway.
[01:01:26] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[01:01:26] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:01:26] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[01:01:26] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[01:01:26] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[01:01:26] *** Quits: jcowan (sid325434@ilkley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: mzan (~quassel@mail.asterisell.com) (*.net *.split)
[01:01:26] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[01:01:26] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[01:01:41] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[01:01:41] *** Joins: samebchase (~thelounge@51.15.68.182)
[01:01:42] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[01:01:44] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[01:02:16] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:02:26] *** Joins: saturn2 (~visitant@c-75-72-230-238.hsd1.mn.comcast.net)
[01:03:11] <White_Flame> presumably this is for a function that _always_ should return nothing, though
[01:03:33] *** Joins: borodust (~irc@user/borodust)
[01:03:34] *** Joins: sm2n (~sm2n@user/sm2n)
[01:03:47] *** Joins: mzan (~quassel@mail.asterisell.com)
[01:05:22] *** Joins: paule32 (~paule32@user/paule32)
[01:07:16] *** Quits: cosimone (~user@93-44-185-43.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:12:43] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[01:17:05] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 260 seconds)
[01:23:13] *** Quits: Guest19 (~Guest19@2601:c9:8000:14b8:79a9:8f1f:aead:70da) (Quit: Client closed)
[01:29:55] *** Quits: vats (~vats@42.111.22.162) (Ping timeout: 260 seconds)
[01:37:30] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:24e8:ac2:4127:257e) (Ping timeout: 260 seconds)
[01:40:47] *** Quits: pve (~pve@188-67-200-192.bb.dnainternet.fi) (Quit: leaving)
[01:42:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:42:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:43:49] *** Joins: vats (~vats@103.158.91.165)
[01:47:09] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[01:49:23] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:52:40] *** Joins: notzmv (~zmv@user/notzmv)
[01:56:52] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[01:57:05] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[02:09:32] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[02:13:48] *** Quits: gaqwas (~john@dynamic-095-114-069-162.95.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[02:16:00] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[02:16:08] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:38:24] *** Quits: saturn2 (~visitant@c-75-72-230-238.hsd1.mn.comcast.net) (Quit: WeeChat 1.0.1)
[02:38:41] *** Joins: clone_of_saturn (~visitant@user/clone-of-saturn/x-1551297)
[02:38:47] *** clone_of_saturn is now known as saturn2
[02:57:31] *** Joins: johnjay (~pi@192.142.100.50)
[03:01:51] *** Joins: skeemer (~skeemer@h-158-174-23-142.na.cust.bahnhof.se)
[03:03:35] <skeemer>  underhello all, i am studying common lisp, and i still don't think i quite understand how external packages work (coming from python/ruby/perl)... so basically from what i understood in common lisp lingo we talk about "systems", and a common package manager for these systems is "quicklisp" which works more or less like "pip" (sorry for the simplification here)... but then i have the impression that  irun quicklisp while i am in
[03:03:35] <skeemer> slime, but how do i include a package i downloaded/installed with quicklisp in my project to use?
[03:06:24] *** Joins: Oladon (~olad@98.43.81.226)
[03:09:32] <Oladon> I've got a strange issue... I'm using feature flags (SBCL) to differentiate between local development and production, but just recently my code is always running the production version, even when run from SLIME. Yet when I print out *features*, the prod flag isn't there. I've got: #+rpanytime-prod (format t "PRODUCTION MODE!!~%") -- any ideas?
[03:10:42] <defaultxr> skeemer, you'll want to include it in the :depends-on list in your project's asdf system definition. check out "quickproject" for a way to quickly create a project skeleton
[03:11:40] <skeemer> defaultxr, thanks a lot
[03:13:20] <pjb> skeemer: there's no notion of project in the language either.
[03:13:46] <pjb> skeemer: there's a lisp image, which is the memory of the lisp process (when running on a posix system).
[03:14:03] <pjb> skeemer: in the lisp image, there are lisp objects.  all the lisp values are lisp objects.
[03:15:46] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[03:15:49] <skeemer> pjb, yeah that's quite different actually from other "common" languages
[03:15:51] <pjb> skeemer:  some of those objects are symbols;  symbols may have a home package; packages have symbol that are interned in them, symbols that are imported from other packages; some symbols present in a package can be exported from the package; and a list of packages they use, which means, that the exported symbols from the used packages are visible in the using package.
[03:16:01] <skeemer> thanks a lot pjb
[03:16:24] <pjb> skeemer: when reading, symbol names are interned in the current package bound to the CL:*PACKAGE* variable.
[03:17:08] <pjb> now, symbols, interned or not (symbols without a home package are "uninterned" symbols), can be used to name lisp objects.
[03:17:27] <pjb> for example, we could use the symbol CL-USER::DOUBLE to name the function (lambda (x) (+ x x))
[03:17:36] *** Quits: vats (~vats@103.158.91.165) (Ping timeout: 265 seconds)
[03:17:51] <defaultxr> Oladon, you might be inadvertently loading the compiled version of your code. feature flags are tested at compile time, not run time, so to ensure that they are tested again, you need to recompile
[03:17:54] <pjb> But the lisp objects are otherwise independent from packages.
[03:18:49] <pjb> skeemer: now, lisp objects can be created by evaluating expressions, which can be done from files by loading them, or by compiling them.
[03:18:58] <Oladon> defaultxr: Ah, hrm... that would indeed make sense, and I'm using Quicklisp to load it. I'll go see if there's a way to force Quicklisp to recompile it.
[03:19:47] <pjb> skeemer: lisp files may have to be compiled or loaded in a specific order for dependencies between them. eg. if a function uses a macro, the macro should be defined at compilation time, before the function is compiled.
[03:20:06] <Oladon> Thanks defaultxr!
[03:20:45] <pjb> skeemer: to help ordering the files compiling and loading, we use a system definition that describes the dependencies between the file. asdf is one such system definition system. Before it there was others similar.
[03:20:49] <defaultxr> no prob!
[03:21:21] <pjb> skeemer: of course, to be able to load files they must be present on your local disk, so you need to download and install them. quicklisp helps doing that.
[03:22:25] <pjb> skeemer: for this, asdf systems also specify dependencies between systems.  When using quicklisp to load a system, if it has as dependency a system that is not present on the local disk, quicklisp downloads it and install it, then compiles and loads the dependency (using asdf).
[03:23:38] <pjb> skeemer: so, what you call a project can be anything really, but the simpliest is to map it to the notion of asdf system.  But sometimes a project can have multiple systems.  It's as you wish, you can organize your components with subcomponents, defining a system for each component.
[03:23:53] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 265 seconds)
[03:24:00] <pjb> skeemer: asdf also let you define asdf components as subsystems, in the asdf system defintion file.
[03:24:32] <pjb> skeemer: there's a lot of freedom, so you can organize your things as you wish, depending on the complexity of your projects.
[03:24:45] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 258 seconds)
[03:25:56] *** Joins: johnjay (~pi@192.142.100.50)
[03:25:57] <pjb> skeemer: slime is used as an IDE.  But if you want to compile and deploy an executable,  you might prefer to do that from a script or a makefile, not from an interactive lisp image.   Then quicklisp will be used without slime.
[03:26:55] <pjb> skeemer: an example is here: https://github.com/informatimago/hw
[03:27:44] <pjb> the file generate.lisp and generate-hw.lisp contain a lisp script used to compile and save executable lisp images (or an executable elf binary in the case of ecl, which doesn't generate lisp images).
[03:27:53] <pjb> skeemer: see the Makefile.
[03:27:55] *** Joins: vats (~vats@103.158.91.182)
[03:28:33] <pjb> skeemer: of course, you can also use (asdf:load-system :hw) or (ql:quickload :hw) to load the hello word program in an interactive lisp image.
[03:32:27] <pjb> skeemer: note that systems are named with lower-case strings.  packages are named with (usually upper-case) strings.  symbols are named with (usually upper-case) strings.  functions are named by symbols or lists of the form (setf foo).
[03:36:39] <pjb> skeemer: now, as mentionned the packages are only used when reading; for the lisp objects, it's a flat namespace: just symbols.   It just happens that some symbols may have a given home package, and some other symbols may have another home package.
[03:37:35] <pjb> skeemer: even if two symbols have two different home packages, they may still be present or visible in the same package (eg. because one is imported in the home package of the other, or because they're exported and their home packages are used by the current package, etc).
[03:38:55] <pjb> also, the current package bound to CL:*PACKAGE* is only used to read the symbols, it has no consequence on the objects created by the expressions.
[03:40:10] <pjb> eg. (in-package "FOO") (defun bar::f (x) (+ x 2)) (defun quux::f (y) (* 3 y))  binds two function objects to the symbols BAR::F and QUUX::F.  Unrelated to the package FOO.
[03:45:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:46:49] *** Lord_of_Life_ is now known as Lord_of_Life
[03:49:30] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[03:50:08] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:00:34] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:16:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:21:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[04:39:00] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:53:28] *** Joins: igemnace (~ian@user/igemnace)
[04:54:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:08:21] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:19:21] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:22:26] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[05:22:44] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:35:21] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 265 seconds)
[05:41:47] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[05:49:16] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:25] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[05:50:27] *** Quits: drmeister (sid45147@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:50:31] *** Quits: ullbeking (sid5364@user/ullbeking) (Read error: Connection reset by peer)
[05:51:05] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.3)
[05:53:04] *** Joins: ullbeking (sid5364@user/ullbeking)
[05:53:20] *** Joins: drmeister (sid45147@ilkley.irccloud.com)
[05:54:45] *** Quits: Psybur (~Psybur@mobile-166-170-29-82.mycingular.net) (Remote host closed the connection)
[05:55:48] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[05:57:35] *** Quits: vats (~vats@103.158.91.182) (Ping timeout: 265 seconds)
[05:57:43] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:58:20] *** Joins: srhm (~srhm@user/srhm)
[06:02:18] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[06:02:47] *** Quits: ullbeking (sid5364@user/ullbeking) (Ping timeout: 264 seconds)
[06:03:11] *** Joins: ullbeking (sid5364@user/ullbeking)
[06:04:10] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[06:14:00] *** Joins: holycow (~rtaylor@69.172.184.139)
[06:18:17] *** Quits: mariari (~mariari@user/mariari) (Remote host closed the connection)
[06:18:54] *** Joins: mariari (~mariari@user/mariari)
[06:21:38] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[06:23:48] *** Quits: mariari (~mariari@user/mariari) (Client Quit)
[06:28:01] *** Joins: mariari (~mariari@user/mariari)
[06:30:14] <beach> Good morning everyone!
[06:37:40] *** Joins: Oladon (~olad@98.43.81.226)
[06:40:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:41:36] *** Joins: vats (~vats@103.158.91.248)
[06:49:19] *** Quits: jealousmonk (~user@2804:431:e7c5:834:2ab0:b9fd:f87f:7a23) (Quit: ERC (IRC client for Emacs 27.1))
[06:50:36] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[06:59:54] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[07:03:19] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[07:05:11] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[07:22:26] *** Joins: semz_ (~none@user/semz)
[07:25:52] *** Quits: semz (~none@user/semz) (Ping timeout: 258 seconds)
[07:27:50] *** Joins: nature (~nature@45.32.235.173)
[07:30:20] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:34:07] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 244 seconds)
[07:35:48] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[07:39:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:41:01] *** Quits: vats (~vats@103.158.91.248) (Ping timeout: 265 seconds)
[08:04:21] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:18:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:23:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[08:27:13] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[08:29:57] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[08:32:44] *** Quits: holycow (~rtaylor@69.172.184.139) (Quit: leaving)
[08:40:07] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[08:41:32] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:44:33] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[08:54:17] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[08:59:11] *** Quits: hobo (~lance@204.238.252.22) (Ping timeout: 264 seconds)
[09:18:45] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:50:55] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[09:51:02] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[10:10:24] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[10:12:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:29:18] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[10:33:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:33:57] *** Quits: etiago (~etiago@user/etiago) (Quit: ZNC 1.8.2 - https://znc.in)
[10:34:25] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[10:34:46] *** Joins: etiago (~etiago@user/etiago)
[10:38:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[10:41:39] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:42:40] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[10:54:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:58:39] *** Joins: akoana (~ah@user/akoana)
[11:10:35] *** Joins: lance (~lance@69.218.33.204)
[11:15:07] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:22:21] *** Joins: gaqwas (~john@dynamic-077-002-123-112.77.2.pool.telefonica.de)
[11:27:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[11:29:17] *** Joins: pve (~pve@178-55-148-109.bb.dnainternet.fi)
[11:35:02] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:35:38] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:33] *** Quits: JeromeLon (~jerome@2a00:23c7:999f:3700:d02a:bd80:198a:4854) (Quit: WeeChat 3.0.1)
[11:39:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[11:40:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:48:04] *** Quits: gaqwas (~john@dynamic-077-002-123-112.77.2.pool.telefonica.de) (Remote host closed the connection)
[11:50:49] *** Joins: gaqwas (~john@dynamic-077-002-123-112.77.2.pool.telefonica.de)
[12:01:13] *** Quits: gaqwas (~john@dynamic-077-002-123-112.77.2.pool.telefonica.de) (Remote host closed the connection)
[12:01:37] *** Joins: gaqwas (~john@dynamic-077-002-123-112.77.2.pool.telefonica.de)
[12:10:23] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[12:26:57] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[12:29:27] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:35:08] *** Joins: makomo (~makomo@user/makomo)
[12:38:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:39:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:44:13] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[12:51:56] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:75fc:61ae:7f76:1143)
[12:53:05] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[12:53:11] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 264 seconds)
[12:56:35] *** Joins: random-nick (~random-ni@87.116.165.220)
[12:59:09] <skeemer> pjb, you gave me a lot of information, i thank you a lot... really
[13:17:11] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 245 seconds)
[13:17:18] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:531:30e7:48f7:fc54)
[13:19:21] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[13:21:31] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:531:30e7:48f7:fc54) (Remote host closed the connection)
[13:25:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:25:37] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[13:25:54] *** Joins: srhm (~srhm@user/srhm)
[13:27:13] <pjb> skeemer: you're welcom.
[13:27:16] <pjb> +e
[13:30:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:35:07] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[13:41:38] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[13:44:07] *** Quits: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se) (Changing host)
[13:44:07] *** Joins: kdlv (~kdlv@user/kdlv)
[13:46:29] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:55:33] *** Joins: makomo_ (~makomo@user/makomo)
[13:57:29] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 244 seconds)
[14:12:09] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[14:12:10] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[14:39:21] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[14:40:22] *** Quits: X-Scale (~ARM@83.223.233.104) (Ping timeout: 260 seconds)
[14:42:27] *** Joins: Krystof (~user@81.174.155.115)
[14:49:23] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[14:52:48] *** Joins: dra (~dra@2a04:4540:6413:be00:871:94a5:edea:7eee)
[14:57:59] *** Joins: igemnace (~ian@user/igemnace)
[14:59:21] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:00:44] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[15:03:30] *** Joins: notzmv (~zmv@user/notzmv)
[15:17:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 244 seconds)
[15:18:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[15:34:58] *** Joins: Bike (~Glossina@71.69.170.70)
[15:34:58] *** ChanServ sets mode: +o Bike
[15:39:11] *** semz_ is now known as semz
[15:41:41] *** Joins: makomo (~makomo@user/makomo)
[15:44:29] *** Joins: vats (~vats@103.158.91.248)
[15:46:15] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 260 seconds)
[16:04:10] *** Joins: holycow (~rtaylor@69.172.184.139)
[16:16:49] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:26:54] *** Joins: pyrotao (~pyrotao@user/pyrotao)
[16:28:06] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[16:28:20] *** Joins: nature (~nature@45.32.235.173)
[16:29:21] *** Quits: pyrotao (~pyrotao@user/pyrotao) (Remote host closed the connection)
[16:30:28] *** Joins: pyrotao (~pyrotao@user/pyrotao)
[16:33:16] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Quit:  HydraIRC -> http://www.hydrairc.com <- Nine out of ten l33t h4x0rz prefer it)
[16:47:27] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:47:47] *** Quits: pyrotao (~pyrotao@user/pyrotao) (Remote host closed the connection)
[16:48:13] *** Joins: pyrotao (~pyrotao@46.39.249.140)
[16:48:47] *** Quits: pyrotao (~pyrotao@46.39.249.140) (Remote host closed the connection)
[17:01:10] *** Quits: dra (~dra@2a04:4540:6413:be00:871:94a5:edea:7eee) (Quit: Leaving)
[17:02:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:04:05] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[17:24:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:29:33] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[17:33:19] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[17:36:29] <lisp123>  I'm having some issues with SBCL's character-offset not being exact - has anybody else faced that in the past?
[17:40:42] <beach> What is character-offset?
[17:41:18] <lisp123> It's meant to tell you which character in the file a particular item is
[17:41:45] <lisp123> (sb-introspect:find-definition-source #'something) --> will give info including the character-offset
[17:42:10] <beach> As I recall, the source position of things like symbols is indicated by the position of the CONS of which it is a CAR.
[17:43:03] <beach> Because the SBCL reader can't keep track of the source position of individual symbols, given that symbols in different places are often EQ after being read.
[17:43:19] <lisp123> Sorry, this is for definitions
[17:43:35] <lisp123> (if that helps)
[17:43:45] *** Quits: skeemer (~skeemer@h-158-174-23-142.na.cust.bahnhof.se) (Remote host closed the connection)
[17:44:23] <lisp123> Might be an issue with my editor I think..its consistently off by 3 or so lines (but not always the same error, varies between 2 and 5)
[17:46:06] <lisp123> beach: On a related note, one of the issues (well its not an issue) I had with the pretty printer is that its a deterministic algorithm, and thus cannot capture style or intent of the user. So my approach now is to get the actual text data from source files for a definition
[17:46:53] <lisp123> As one personally line breaks to their preference, and its likely better to use that manual formatting vs. passing source code through the pretty printer
[17:47:34] <beach> I see.  You are gravitating towards the SICL approach.
[17:48:51] <lisp123> Oh I see. So will you forgo a "new and improved" pretty printer for just reading the original source written by the user?
[17:50:21] <beach> In SICL, I read the entire text of the source file into memory.  Then, error messages and such do not refer program elements, but to source text, so that in an IDE we can then just whip up the text and highlight it.
[17:51:12] <beach> Then, the source code could have undergone any number of transformations.  The message seen by the application programmer is always exactly in terms of what was written in the original source.
[17:52:11] <lisp123> Nice! It really does feel like a much better way
[17:52:54] <lisp123> I can't wait for the overall project to go live, but don't want to rush you by asking a timeframe :) SBCL will do for now
[17:56:54] <beach> Sure.
[17:57:01] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[17:59:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[18:01:04] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:06:15] *** Quits: djuber (~user@65.79.128.64) (Ping timeout: 260 seconds)
[18:15:00] <lisp123> I will test this 'character-offset' functionality on another machine. Sublime & Emacs both point to the wrong character when I (goto character-offset)
[18:15:49] <beach> What OS are you on?
[18:15:54] <lisp123> Mac
[18:18:12] <Nilby> Character offset has been off for a while, becuase of unicode. Emacs language modes usually search for the thing near the character offset.
[18:18:14] <Bike> usually when i've hit source locations being wrong it's because the source files are a different version from the actually loaded fasl
[18:18:19] <Bike> prolly you've accounted for that already though
[18:19:17] <lisp123> Bike: I hope so, I did :force t to recompile & restarted inferior lisp. But interesting that it works for you
[18:19:27] *** Quits: pve (~pve@178-55-148-109.bb.dnainternet.fi) (Ping timeout: 244 seconds)
[18:19:43] <lisp123> Nilby: Thanks for confirming. Yes, its very close but not exact
[18:22:05] <Nilby> Only byte offset is accurate, and it bears little relation to what people expect, which is "grapheme" offset, or possibly what Lisp might have as unicode code-point offset. And if you have emoji's in your text, you'll have to update the software every time they add a new emoji combination, which is like every day.
[18:23:40] <lisp123> Nilby: Thanks for that. No emojis just yet, but perhaps its not a bad idea to add some ;)
[18:24:16] <lisp123> I'm reading an older thread on Reddit, but the comment seems quite wrong: The simplest answer why CL doesn't provide line numbers is: macros. It's hard to attribute a specific expression that's being evaluated to a specific line. It might be possible to build heuristics for the most common situations (for instance a macro that uses a single &body etc.), but I don't think any CL provides that yet.
[18:24:51] <lisp123> I don't think macroexpansion is the reason, because its quite close but not exact
[18:25:35] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[18:27:59] <Nilby> It's true that the actual definition may not even be visible in the source file.
[18:28:19] <Bike> i don't understand the premise that "CL doesn't provide line numbers"
[18:28:28] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:28:33] <Bike> Doesn't provide how?
[18:29:53] <lisp123> I think that is in relation to it being easier to count the number of top-level forms (e.g. form 5 is what you are after), but anything more precise (either exact character position or line number) is challenging
[18:30:34] <lisp123> I am going to try and count by forms now, but I think that above reddit comment doesn't really make sense (but nobody refuted it so never know)
[18:30:36] <Bike> it's challenging, but like it's done
[18:31:01] <Bike> if i write (defun foo () (error "test")) in a file, compile and load it, and run (foo), i can get to the particular line the error form is on from sldb
[18:31:15] <Bike> the character position of it, even
[18:31:37] <lisp123> Yeah
[18:31:51] <lisp123> I agree
[18:32:35] <beach> Macros don't change the line numbers.  Line numbers are valid only for expressions that are read, and macro expansion is done after that.
[18:33:20] <beach> But "line numbers" are quite silly in a language that is not line oriented.
[18:33:29] <beach> Even for C, line numbers are questionable.
[18:33:37] <lisp123> beach: Thanks for confirming as well. I'm going to reply on that thread to avoid any one else getting confused
[18:34:00] <beach> Sure.
[18:34:53] <beach> In SICL, to avoid problems with newline representations and such, the source information is represented by four numbers start-line, start-column, end-line, and end-column.
[18:35:10] <beach> Also, those are character positions, not byte positions in the file.
[18:36:52] <lisp123> That is helpful (I just wrote a hack to read from character offset until a blank newline appears, but that assumes each top-level form is separated by a newline)
[18:37:56] *** Joins: dra (~dra@2a04:4540:6413:be00:61eb:d823:a9de:d0ed)
[18:39:42] <beach> How about using Eclector so that you can do it right?
[18:43:27] <lisp123> beach: Will look at it now
[18:44:05] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[18:45:46] <Nilby> But unfortunately it's still a bit of work to go from eclector to where a function defintion is reliably.
[18:45:59] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[18:46:26] <beach> Sure.
[18:49:01] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[18:49:07] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[18:52:02] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:56:30] <lisp123> beach: If I have a filename and a top-level form number, is there a function to extract that top-level form in eclector?
[18:57:18] <beach> Well, you would apply READ for each top-level form and store the result in a vector I imagine.
[18:57:43] <beach> I mean, READ doesn't read an entire file.  Just an expression.
[18:58:53] <lisp123> Yes, that makes sense. Is there an option to "turn on" source tracking ("parse results which will wrap the Common Lisp expressions in objects...")
[18:59:28] <beach> Yes, in CSTs.
[18:59:45] <beach> The Cleavir compiler turns CSTs into ASTs, preserving source information.
[19:00:11] <beach> So you would use the CST entry point of Eclector.
[19:00:38] <beach> I believe Eclector has good documentation.
[19:01:52] <lisp123> Thanks, will try it after dinner
[19:02:13] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Quit: Leaving)
[19:03:13] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[19:10:13] *** Joins: pve (~pve@87-93-193-137.bb.dnainternet.fi)
[19:10:13] *** Joins: Oladon (~olad@98.43.81.226)
[19:11:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 258 seconds)
[19:13:45] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:19:31] <lisp123> beach: worked a treat (just in time for dinner, now I'm off!)
[19:19:56] <beach> Take care!
[19:41:36] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[19:42:18] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[19:49:06] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:59:01] *** Joins: jeko (~user@ool-18e4d9ae.dyn.optonline.net)
[19:59:09] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[19:59:13] *** Quits: jeko (~user@ool-18e4d9ae.dyn.optonline.net) (Remote host closed the connection)
[20:03:54] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:12:27] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[20:13:38] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 244 seconds)
[20:14:16] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:16:07] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:20:10] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:22:45] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[20:22:57] *** Joins: robin (~robin@user/terpri)
[20:23:22] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[20:25:31] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[20:29:13] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[20:33:20] *** Quits: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[20:34:49] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[20:35:00] *** Joins: edgar-rft (~edgar-rft@hsi-kbw-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:38:44] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:47:12] *** Joins: lisp123_ (~lisp123@45.86.202.12)
[20:49:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 244 seconds)
[20:51:31] *** Joins: omr (~omr@user/omr)
[20:54:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[21:13:52] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 258 seconds)
[21:14:46] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:18:26] *** Quits: omr (~omr@user/omr) (Quit: leaving)
[21:24:56] *** Quits: random-nick (~random-ni@87.116.165.220) (Read error: Connection reset by peer)
[21:25:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:25:51] *** Joins: random-nick (~random-ni@87.116.165.220)
[21:35:05] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[21:35:24] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Ping timeout: 265 seconds)
[21:36:33] *** Joins: aeth (~aeth@user/aeth)
[21:45:10] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:50:18] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[21:50:22] *** Joins: notzmv (~zmv@user/notzmv)
[22:14:32] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 244 seconds)
[22:16:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:17:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:18:51] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[22:20:09] *** Joins: CptKirk (~CptKirk@97-118-81-203.hlrn.qwest.net)
[22:23:45] *** Quits: vats (~vats@103.158.91.248) (Remote host closed the connection)
[22:24:29] *** Joins: vats (~vats@103.158.91.248)
[22:26:14] <thmprover> Is anyone working on computational group theory using lisp?
[22:26:37] <thmprover> (I found a library for algebraic topology, but nothing on group theory)
[23:06:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[23:12:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:13:18] *** Joins: Oladon (~olad@98.43.81.226)
[23:16:15] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[23:16:21] *** Quits: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi) (Ping timeout: 245 seconds)
[23:19:28] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:23:13] *** Joins: peterhil (~peterhil@mobile-access-5672cd-211.dhcp.inet.fi)
[23:25:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 244 seconds)
[23:29:23] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[23:32:10] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:35:19] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:42:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 244 seconds)
[23:42:37] *** Quits: lisp123_ (~lisp123@45.86.202.12) (Quit: Leaving...)
[23:56:53] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:57:41] *** Joins: jeko (~user@ool-18e4d9ae.dyn.optonline.net)
