[00:03:07] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[00:03:24] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:04:11] *** Joins: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it)
[00:04:46] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[00:08:27] *** Joins: ricci (~ricci@31.187.110.131)
[00:09:08] <pyzozord> is it possible that http.Get somehow caches results?
[00:09:15] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[00:16:04] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: No route to host)
[00:20:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:21:01] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 240 seconds)
[00:22:37] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:23:22] *** Joins: irontom (~user@38.81.106.9)
[00:24:28] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[00:32:24] <lazyreader> No, although your server might.
[00:36:06] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:36:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:38:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:40:16] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:41:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:41:21] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:41:33] *** Joins: irontom (~user@38.81.106.9)
[00:42:13] <pyzozord> I am on the GOPL exercise "Exercis e 1.10: Find a web sit e that pro duces a large amount of dat a. Invest igate caching by running fetchall twice in succession to see whether the rep orted time changes much. Do you get the same content each time? Modif y fetchall to print its out put to a file so it can be examined."
[00:42:40] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[00:44:01] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[00:44:30] *** Joins: Torr (~Torr@user/torr)
[00:46:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[01:00:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:02:52] *** Quits: alyx (alyx@atheme/alyx) (Remote host closed the connection)
[01:05:33] *** Quits: LiftLeft2 (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (Ping timeout: 252 seconds)
[01:10:02] *** Joins: irontom (~user@38.81.106.9)
[01:11:59] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[01:13:55] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:15:58] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Read error: Connection reset by peer)
[01:26:15] *** Quits: irontom (~user@38.81.106.9) (Remote host closed the connection)
[01:28:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:30:23] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Read error: Connection reset by peer)
[01:32:49] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:33:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[01:34:09] *** Quits: Giovanni (~Giovanni@176.55.170.26) (Ping timeout: 252 seconds)
[01:53:28] *** Joins: irontom (~user@38.81.106.9)
[01:53:29] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[01:59:36] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[02:00:04] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:05:51] *** Quits: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it) (Quit: Leaving)
[02:09:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:18:29] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (Quit: ZNC 1.8.2 - https://znc.in)
[02:18:56] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:21:42] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[02:25:48] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[02:34:54] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 250 seconds)
[02:36:28] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:37:04] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:39:00] *** Quits: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[02:39:00] *** Quits: adip (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[02:41:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:42:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[02:44:33] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[02:51:57] *** Quits: victori (~victori@cpe-76-89-139-69.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[02:52:18] *** Quits: whoami (~whoami@d118-75-54-10.try.wideopenwest.com) (Ping timeout: 272 seconds)
[02:55:40] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[02:55:44] *** Joins: victori (~victori@cpe-76-89-139-69.socal.res.rr.com)
[02:59:21] *** Joins: whoami (~whoami@d118-75-54-10.try.wideopenwest.com)
[03:04:12] *** Quits: independent56 (~independe@2.26.38.133) (Ping timeout: 240 seconds)
[03:05:15] *** Joins: bpalmer (~user@user/bpalmer)
[03:11:37] *** Quits: rewt (~default@user/rewt) (Ping timeout: 240 seconds)
[03:12:05] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[03:12:22] *** Quits: victori (~victori@cpe-76-89-139-69.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[03:13:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:16:01] *** Joins: victori (~victori@cpe-76-89-139-69.socal.res.rr.com)
[03:18:19] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[03:19:35] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[03:19:36] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:24:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:24:33] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:25:11] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:34:58] *** Joins: rcernin (~rcernin@101.189.129.123)
[03:36:25] *** Quits: yonson (~yonson@2600:8801:d900:0:529a:4cff:fe65:a337) (Remote host closed the connection)
[03:39:16] *** Joins: yonson (~yonson@2600:8801:d900::1962)
[03:48:21] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39f6-2932-099f-a193.res6.spectrum.com)
[03:57:37] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[04:02:52] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:14:57] *** Joins: R2robot_ (~R2robot@user/r2robot)
[04:15:18] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[04:15:52] *** Quits: whoami (~whoami@d118-75-54-10.try.wideopenwest.com) (Ping timeout: 250 seconds)
[04:19:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:20:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:23:25] *** Joins: whoami (~whoami@d118-75-54-10.try.wideopenwest.com)
[04:25:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[04:27:26] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:42:57] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 240 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:53:25] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[04:54:34] *** Joins: Atque (~Atque@user/atque)
[04:55:59] *** Joins: rcernin (~rcernin@101.189.129.123)
[04:57:57] *** Joins: irontom (~user@38.81.106.9)
[05:01:48] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 250 seconds)
[05:13:56] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 250 seconds)
[05:18:25] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:20:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:21:37] *** Joins: rcernin (~rcernin@101.189.129.123)
[05:25:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:26:41] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[05:27:21] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:30:44] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:31:45] *** Joins: dntreou (~yakiza@cpc91202-cmbg18-2-0-cust102.5-4.cable.virginm.net)
[05:32:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[05:34:39] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[05:36:12] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (Read error: Connection reset by peer)
[05:36:42] *** Joins: dab21 (dab21@pistis.amyanddavid.net)
[05:37:49] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[05:40:02] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:47:34] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[05:51:55] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Read error: Connection reset by peer)
[05:53:37] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Quit: WeeChat 3.4)
[05:55:58] *** ox is now known as oz
[05:59:00] *** Quits: dntreou (~yakiza@cpc91202-cmbg18-2-0-cust102.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[05:59:25] *** Joins: sm0rt1 (~sm0rt1@131.108.124.20)
[06:00:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:05:13] *** Quits: sm0rt1 (~sm0rt1@131.108.124.20) (Quit: Client closed)
[06:05:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[06:09:00] *** Joins: Maxattax97 (~max@12.110.149.178)
[06:17:23] *** Quits: R2robot_ (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[06:19:07] *** Joins: R2robot (~R2robot@user/r2robot)
[06:25:00] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 250 seconds)
[06:25:41] *** Joins: rcernin (~rcernin@101.189.129.123)
[06:31:34] *** Joins: Jad (~Nashmi@user/jad)
[06:33:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:36:05] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[06:38:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[06:42:18] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::8099)
[06:45:30] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:46:00] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:cdcc:a9e:d5f6:b2e8)
[06:48:40] *** Quits: lainon (~lainon@2601:7c0:c500:4d20::8099) (Quit: Leaving)
[06:52:03] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 252 seconds)
[06:52:51] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:cdcc:a9e:d5f6:b2e8) (Ping timeout: 256 seconds)
[06:55:30] *** Quits: whoami (~whoami@d118-75-54-10.try.wideopenwest.com) (Ping timeout: 272 seconds)
[06:58:50] *** Joins: rcernin (~rcernin@101.189.129.123)
[07:00:10] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:00:34] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 272 seconds)
[07:02:37] *** Joins: whoami (~whoami@d118-75-54-10.try.wideopenwest.com)
[07:10:07] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-39f6-2932-099f-a193.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[07:16:55] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[07:17:40] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Ping timeout: 272 seconds)
[07:20:12] *** Joins: walterwhip (~www@user/walterwhip)
[07:21:19] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:25:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:27:03] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[07:32:10] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 250 seconds)
[07:32:50] *** Joins: rcernin (~rcernin@101.189.129.123)
[07:35:40] *** Joins: dibic (~dibic@2601:248:4504:7ed0:edbb:3de5:2635:bf39)
[07:40:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the conn[07:42:36] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[07:48:12] *** Quits: stuart (~stuart@55d4b569.access.ecotel.net) (Ping timeout: 250 seconds)
[07:49:50] *** Joins: stuart (~stuart@55d4f184.access.ecotel.net)
[08:07:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[08:10:20] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:12:58] *** Joins: MattMadness (~d3m0nm4dn@user/mattmadness)
[08:13:01] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[08:13:27] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:18:55] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[08:20:54] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:33:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:33:41] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 272 seconds)
[08:34:27] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[08:40:03] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[08:40:42] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[08:41:40] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:42:36] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[08:42:51] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[08:42:51] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[08:42:51] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[08:54:21] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:57:02] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[08:57:26] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[08:57:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[08:59:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[09:12:36] *** Joins: crashrep (~crashrep@user/crashrep)
[09:16:26] *** connor_goodwolf_ is now known as connor_goodwolf
[09:22:22] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:26:17] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[09:27:13] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:27:17] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:30:02] *** Quits: normen_ (~normen@p200300d71749cc0064b2038a647777fd.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:32:34] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[09:37:53] *** Joins: on^ (~on@50.232.121.75)
[09:43:02] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[09:54:25] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[09:55:52] *** Joins: normen_ (~normen@p200300d71749cc00fd2a3876cbcdd871.dip0.t-ipconnect.de)
[10:00:27] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[10:01:58] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:07:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:08:22] *** Joins: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk)
[10:18:49] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:18:55] *** Joins: adip (~adip@dil199.neoplus.adsl.tpnet.pl)
[10:18:58] *** Joins: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl)
[10:20:46] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Read error: error:1408F119:SSL routines:ssl3_get_record:decryption failed or bad record mac)
[10:21:01] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:24:22] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:25:48] *** Quits: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (Ping timeout: 240 seconds)
[10:26:01] *** Joins: independent56 (~independe@2.26.38.133)
[10:27:08] *** Joins: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[10:31:40] *** Joins: andlabs_ (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[10:31:52] *** Quits: independent56 (~independe@2.26.38.133) (Remote host closed the connection)
[10:33:16] *** Quits: fhs (~fhs@pool-100-33-53-73.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[10:34:05] *** Joins: fhs (~fhs@pool-108-30-71-53.nycmny.fios.verizon.net)
[10:34:38] *** Quits: andlabs (~andlabs@70.107.171.168) (Ping timeout: 272 seconds)
[10:34:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:35:17] *** Joins: independent56 (~independe@2.26.38.133)
[10:35:49] *** Quits: zopsi (~zopsi@104-237-136-227.ip.linodeusercontent.com) (Quit: Oops)
[10:38:37] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[10:38:57] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[10:39:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[11:02:13] *** Joins: hanzo (uid532183@user/hanzo)
[11:04:25] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Remote host closed the connection)
[11:12:06] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[11:19:25] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:20:17] *** Quits: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[11:22:50] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:27:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:33:06] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 250 seconds)
[11:40:16] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:40:19] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:41:42] *** Joins: toulene (~toulene@user/toulene)
[11:42:51] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[11:46:04] *** Joins: toulene (~toulene@user/toulene)
[11:53:12] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:54:20] *** Joins: Batzy (~quassel@user/batzy)
[11:55:05] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 272 seconds)
[11:57:25] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:58:18] *** Quits: on^ (~on@50.232.121.75) (Remote host closed the connection)
[12:04:27] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 252 seconds)
[12:07:51] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[12:17:06] *** Joins: moog_ (~moog@107.126.53.51)
[12:19:18] *** Quits: moog (~moog@98.97.87.156) (Ping timeout: 252 seconds)
[12:28:52] *** Joins: deniska (~deniska@user/deniska)
[12:31:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:36:22] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[12:37:40] *** Quits: adip_ (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[12:38:32] *** Quits: adip (~adip@dil199.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[12:40:27] *** Quits: Jad (~Nashmi@user/jad) (Ping timeout: 256 seconds)
[12:45:04] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[12:45:20] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:45:45] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:49:24] *** Joins: adip_ (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[12:49:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:54:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[12:58:51] *** Joins: mickey0 (~user@user/mickey)
[12:59:18] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[13:02:50] *** Quits: mickey (~user@user/mickey) (Ping timeout: 272 seconds)
[13:02:51] *** mickey0 is now known as mickey
[13:06:09] *** Quits: marcus (~marcus@mojo/viking/marcus) (Read error: Connection reset by peer)
[13:06:34] *** Joins: marcus (~marcus@mojo/viking/marcus)
[13:21:51] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[13:23:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:24:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:24:13] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[13:27:57] *** Joins: rendar (~rendar@user/rendar)
[13:28:37] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:28:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:29:11] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:32:00] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[13:32:57] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[13:33:11] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[13:33:12] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[13:33:12] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[13:33:32] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[13:35:13] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[13:44:22] *** Joins: shka (~herr@109.231.3.55)
[13:50:00] *** Quits: kcrk_ (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:50:28] *** Joins: kcrk (~kcrk@user/kcrk)
[13:56:33] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[14:18:21] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[14:28:38] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[14:30:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:33:31] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[14:35:09] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[14:36:02] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[14:36:18] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[14:36:18] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[14:36:18] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[14:36:44] *** Joins: xsteadfastx (~marv@94.31.99.245)
[14:39:08] *** Quits: rednul_ (~rednul@mc.emailserverz.com) (Quit: ZNC 1.8.2 - https://znc.in)
[14:39:37] *** Joins: X-Scale` (~ARM@83.223.233.31)
[14:41:00] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[14:41:01] *** X-Scale` is now known as X-Scale
[14:45:43] *** Quits: independent56 (~independe@2.26.38.133) (Remote host closed the connection)
[14:46:01] *** Joins: independent56 (~independe@2.26.38.133)
[14:53:40] *** Joins: Jad (~Nashmi@user/jad)
[15:00:27] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[15:04:47] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:05:57] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 252 seconds)
[15:09:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[15:12:43] *** Quits: Jad (~Nashmi@user/jad) (Quit: Benefits I derive from freeÂ­dom are largely the result of the uses of freedom by others, and mostly of those uses of freedom that I could never avail myself of.)
[15:16:28] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) ()
[15:16:51] *** Quits: zerok (~zerok@user/zerok) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[15:17:24] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[15:20:13] *** Joins: zerok (~zerok@user/zerok)
[15:25:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:32:43] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:32:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:40:01] *** Joins: hamess (~hamess@user/hamess)
[15:40:04] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:44:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[15:58:16] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Read error: Connection reset by peer)
[16:12:25] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:15:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:17:09] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[16:19:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:27:56] *** Joins: Tasi (~Tasi@20014C4C220C8F00284ED69ADB585A6C.catv.pool.telekom.hu)
[16:30:53] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[16:31:50] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Remote host closed the connection)
[16:33:58] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:34:30] *** Quits: Maxattax97 (~max@12.110.149.178) (Ping timeout: 252 seconds)
[16:36:38] *** Joins: Maxattax97 (~max@12.110.149.178)
[16:38:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[16:39:28] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 250 seconds)
[16:42:12] *** Quits: Maxattax97 (~max@12.110.149.178) (Ping timeout: 252 seconds)
[16:50:08] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:54:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[16:54:57] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:55:27] *** Quits: independent56 (~independe@2.26.38.133) (Ping timeout: 256 seconds)
[16:58:58] *** Joins: Midjak (~Midjak@82.66.147.146)
[17:01:00] *** Quits: zwrr (~zwr@2804:d45:b966:fb00:d5f4:d325:b39e:8704) (Ping timeout: 240 seconds)
[17:02:04] *** Joins: zwr (~zwr@2804:d45:b966:fb00:53dd:b5a5:6b8e:e94d)
[17:07:43] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:07:50] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:12:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:12:27] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:15:55] *** Joins: AsenMx_ (~asen@user/asenmx)
[17:16:11] *** Quits: AsenMx (~asen@user/asenmx) (Ping timeout: 245 seconds)
[17:17:23] *** AsenMx_ is now known as AsenMx
[17:18:06] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:18:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:19:04] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[17:24:25] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:26:45] <pyzozord> how do I open a file to get a writer? I can't find it in go doc io/fs
[17:27:54] <ikke> ohttps://pkg.go.dev/os#Open
[17:28:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[17:30:22] <fizzie> The io/fs filesystem abstraction is read-only, if that's what the question was about.
[17:32:27] <pyzozord> oh I see, thanks both
[17:32:56] <pyzozord> I tried os.Open but it doens't seem to accept another argument with options, I was hoping to make a new file if one doesn't exist
[17:33:21] <fizzie> os.OpenFile is the "full" interface.
[17:33:24] <pyzozord> got it
[17:34:04] <fizzie> (And os.Open, os.Create are simpler special cases of it.)
[17:34:39] <pyzozord> actually yeah I think os.Create is nicer in this case
[17:35:26] <fizzie> If it's got the flags you want, sure. Specifically, os.Open(x) = os.OpenFile(x, os.O_RDONLY, 0) and os.Create(x) = os.OpenFile(x, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666).
[17:36:22] <fizzie> (So if you want to create a new file if it doesn't exist, but not truncate the existing file to empty if it does, you'll need to use OpenFile directly.)
[17:37:54] <pyzozord> yep, truncate is great in my case
[17:39:05] <pyzozord> is there a nice way to write "output, err := os.Create(os.Args[1]); if err != nil" and also handling the out of range index?
[17:41:31] <pyzozord> for example I tried putting the first expression inside the if, but then I don't have output outside the scope of that if
[17:41:59] <pyzozord> also it seems this doesn't handle out of range index error at all, I was hoping maybe that would end up in err too
[17:42:25] <fizzie> Indexing an array past its end is a panic, so no.
[17:42:51] <ikke> pyzozord: it's already an error before os.Create is called
[17:43:11] <fizzie> You could write an `func createArg(n int) (*os.File, error) { if n >= len(os.Args) { return fmt.Errorf("...") } return os.Create(os.Args[n]) }` helper function, allowing `output, err := createArg(1); if err != nil { ... }` but it seems maybe overly special.
[17:43:15] <pyzozord> ok so array indexing must be handled separately then, probably by checking first
[17:46:53] <fizzie> If you have required command-line arguments, it may be cleanest to just start main with a check of them (and maybe also assign them to variables with more descriptive names than os.Args[1], for example `outputPath` or something).
[17:47:28] *** Joins: Tasi_ (~Tasi@20014C4C220C8F00AC5393BB9EEDE984.catv.pool.telekom.hu)
[17:48:13] <ikke> +1
[17:48:34] <ikke> Then you can give more sensible error messages as well
[17:50:28] <pyzozord> how would I use io.Copy to copy to a channel?
[17:50:56] <pyzozord> yeah I think go just wants me to add if-checks
[17:50:58] *** Quits: Tasi (~Tasi@20014C4C220C8F00284ED69ADB585A6C.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[17:54:32] <ikke> io.Copy copies to a writer, a channel on it's own is not a writer
[17:55:26] *** Quits: cim (~cim@205.185.117.110) (Quit: Ping timeout (120 seconds))
[17:55:59] *** Joins: cim (~cim@205.185.117.110)
[17:57:14] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:01:35] *** Joins: treeford (~charleste@user/treeford)
[18:01:43] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:01:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[18:03:53] <ikke> pyzozord: something like this could work: https://go.dev/play/p/YBfEWuwckvG
[18:08:39] <pyzozord> I just did this, http://bpa.st/WBJQ it works except line 53
[18:08:50] <pyzozord> can you guys review it and say what I could have done better?
[18:09:05] <pyzozord> it's exercise 1.10 from the GOPL book
[18:10:27] <ikke> probably because you already close the body before anything has been able to read from it
[18:10:37] <ikke> You just pass a reader directly through the channel
[18:11:42] <ikke> It would in my opinion make more sense to keep the reader inside the fetch function and just return the bytes
[18:11:57] <ikke> After everything has been read, you can close the body
[18:12:04] <ikke> (or use defer)
[18:12:45] <pyzozord> defer didn't seem to help
[18:12:55] <ikke> Yes, same issue
[18:13:04] <pyzozord> I though channels are blocking?
[18:13:05] <ikke> the go routine exits before anything is able to read from the reader
[18:14:02] <ikke> You just pass a reader, the other side reads the reader from the channel, and the goroutine continues
[18:14:28] <ikke> then your main function tries to read from the reader, but the goroutine already closed the body
[18:14:35] <pyzozord> oh I see I pass the reader but it closes before the io.Copy happens
[18:14:39] <ikke> yes
[18:14:44] <pyzozord> got it
[18:15:00] <pyzozord> so how can I pass just bytes through the channel? Do I need to write interface like in your example, ikke?
[18:15:50] <pyzozord> sorry I guess I mean type and a function
[18:16:27] <ikke> Just read from the reader until it's empty and pass that through the channel
[18:16:39] <pyzozord> I see so just string channel?
[18:16:51] <ikke> or a []bytes channel
[18:16:52] <pyzozord> thing is I don't want to buffer in the go routine
[18:17:04] <pyzozord> I want to pass stuff as soon as I have it
[18:17:39] <pyzozord> I want to stream through the channel
[18:17:56] <ikke> Yes, so you call Read(), get a number of bytes back and pass that through the channel
[18:17:58] <ikke> until you hit EOF
[18:18:43] <ikke> You don't want to read byte-by-byte I assume, so you need at least a smallish buffer
[18:18:49] <pyzozord> so I need to manually create a stream with a while loop and small buffer
[18:19:05] <ikke> yes
[18:19:06] <fizzie> I don't think I'd be comfortable with a `ChanWriter` like https://go.dev/play/p/YBfEWuwckvG because usually you expect a Write method of a Writer to be "finished" with the given []byte when it returns, and passing it over a channel pretty much inherently guarantees it's not. `io.Copy` in particular reuses the internal buffer right after the write call.
[18:20:02] *** Joins: arkurious (~arkurious@user/arkurious)
[18:20:15] <pyzozord> fizzie: I'm not following
[18:20:33] <ikke> pyzozord: you are basically passing a buffer that the writer is using directly to the consumer
[18:20:57] <ikke> the writer will overwrite that buffer, while the consumer might not even have read it yet
[18:21:25] <pyzozord> oh because buffer is a slice?
[18:22:23] <ikke> yes
[18:23:07] <pyzozord> I'll be back in an hour
[18:27:10] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[18:30:57] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:34:04] <fizzie> Tried to demonstrate the problem with an io.Copy from a bytes.Reader to that ChanWriter, but annoyingly bytes.Reader implements io.WriterTo, so it all just got sent as a single slice and it worked by accident. Had to go with something like https://go.dev/play/p/kxYMq_8xu_J which isn't quite as convincing.
[18:35:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[18:36:47] *** Joins: mnlwldr (~mnlwldr@77.182.182.137)
[18:37:38] *** Joins: Tasi__ (~Tasi@20014C4C220C8F004D2C449C0F2D2B43.catv.pool.telekom.hu)
[18:37:42] *** Joins: absc (~absc@dynamic-adsl-94-34-219-179.clienti.tiscali.it)
[18:40:07] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Remote host closed the connection)
[18:41:40] *** Quits: Tasi_ (~Tasi@20014C4C220C8F00AC5393BB9EEDE984.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[18:42:26] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[18:43:19] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[18:43:49] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[18:44:35] *** Joins: kiky (~kiky@89.151.179.41)
[18:45:16] *** Joins: Rayke (rayke@user/rayke)
[18:45:19] *** Parts: kiky (~kiky@89.151.179.41) ()
[18:48:15] *** Quits: mnlwldr (~mnlwldr@77.182.182.137) (Quit: Before calling me, ask yourself ... Is it textable?)
[18:49:36] *** Joins: Atque (~Atque@user/atque)
[18:54:26] *** Joins: jpw (~jpw@user/jpw)
[18:57:37] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[18:58:38] *** Joins: toulene8 (~toulene@user/toulene)
[19:03:11] *** Joins: han-solo (~han-solo@user/han-solo)
[19:04:28] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[19:06:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:06:30] *** Joins: treeford (~charleste@user/treeford)
[19:10:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[19:11:15] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[19:13:49] *** Joins: Berlin36 (~Berlin36@user/berlin36)
[19:13:55] *** Joins: Everything (~Everythin@37.115.210.35)
[19:16:19] *** Quits: chilvers1 (~chilversc@user/chilversc) (Read error: No route to host)
[19:20:18] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[19:23:43] *** Quits: toulene8 (~toulene@user/toulene) (Read error: Connection reset by peer)
[19:24:30] *** Joins: toulene (~toulene@user/toulene)
[19:29:06] *** Joins: krux02 (~krux02@p200300e8171a750060abd903a9ed7316.dip0.t-ipconnect.de)
[19:32:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:32:48] <pyzozord> fizzie: can you also share the version that worked by accident?
[19:34:22] <fizzie> That's there as a comment on line 40. Just substitute `bytes.NewReader(in)` in place of `&SimpleReader{in}` and it will start to work, because just one []byte will be sent over the channel. (As opposed to io.Copy using an internal []byte buffer that it keeps reusing.)
[19:34:59] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:35:36] <fizzie> Or with some extra logging, compare outputs of https://go.dev/play/p/-nQJZjahEjm vs. https://go.dev/play/p/bMk_9TdZ2E7
[19:36:28] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[19:36:53] *** Quits: MattMadness (~d3m0nm4dn@user/mattmadness) (Read error: Connection reset by peer)
[19:41:28] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:41:37] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[19:42:37] <pyzozord> I don't see WriteTo called anywhere
[19:43:08] <fizzie> It's done by io.Copy.
[19:43:29] <fizzie> https://cs.opensource.google/go/go/+/refs/tags/go1.17.8:src/io/io.go;l=402-406;drc=dc289d3dcb59f80b9e23c7e8f237628359d21d92
[19:43:50] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[19:44:24] <pyzozord> ah I see. Also go doc -u -src io.copyBuffer shows the source which is amazing
[19:45:57] <pyzozord> I thought that src.(WriteTo) would be a type check to see if src is of type WriteTo
[19:46:02] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[19:46:09] <pyzozord> not a check to see if src implements WriteTo
[19:46:24] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:46:54] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[19:47:09] *** Joins: Tasi_ (~Tasi@20014C4C220C8F00DD7BDA5ADAA8077B.catv.pool.telekom.hu)
[19:48:00] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:49:49] <fizzie> It's `src.(WriterTo)`, note the 'r'.
[19:50:09] <fizzie> It's a check on whether src implements the io.WriterTo interface, which means it has the WriteTo method.
[19:50:12] <pyzozord> ooh
[19:51:00] *** Quits: Tasi__ (~Tasi@20014C4C220C8F004D2C449C0F2D2B43.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[19:51:46] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:51:51] <pyzozord> fizzie: I'm not sure exactly why bytes are different when SimpleReader is used
[19:52:05] <pyzozord> I guess we can replace SimpleReader with any Reader that doesn't implement WriteTo
[19:52:08] <fizzie> Although you sometimes do see checks for specific methods without giving the interface a name. So that could have been written as `if wt, ok := src.(interface { WriteTo(Writer) (int64, error) }); ok { return wt.WriteTo(dst) }` too.
[19:52:11] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8110-d43e-8908-1c78.res6.spectrum.com)
[19:52:32] <pyzozord> oh I see that's an inline interfaces
[19:52:46] <pyzozord> good to know about this
[19:53:40] <fizzie> The reason it works differently with SimpleReader is, that type doesn't pass that `src.(WriterTo)` check (since it doesn't have the method), so it falls back to the rest of the io.copyBuffer, which involves making an internal buffer, and a for {...} loop that repeatedly calls src.Read + dst.Write.
[19:54:09] <pyzozord> yes, I guess Im asking about that rest of the copyBuffer function
[19:54:17] <pyzozord> what in there makes it a problem
[19:55:18] <pyzozord> I see it creates a LimitedReader because buf was passed as nil
[19:55:36] <fizzie> It doesn't create a LimitedReader.
[19:55:50] <fizzie> It checks if src *is* a LimitedReader, that's another type assertion.
[19:55:52] <pyzozord> oh yeah sorry it just uses it to figure out a size to create a buf with
[19:56:35] <fizzie> Yeah, the point of that part is just to ensure that if the source is a LimitedReader, the internal buffer is not larger than the limit, since that would be unnecessary.
[19:57:01] <fizzie> The problem is the for loop. As you can see, it calls Write once for each call of Read. SimpleReader's Read always returns no more than 1024 bytes, so ChannelWriter's Write method is called with a []byte that contains 1024 bytes. Once the write method returns, the buffer is immediately reused for a second call of Read.
[19:57:02] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[19:57:40] <fizzie> But ChannelWriter's read will return right after the []byte has been passed over the channel, so the other goroutine that's building the output hasn't necessary managed to read the contents out of it yet.
[19:57:53] <fizzie> s/ChannelWriter's read/ChannelWriter's Write/ of course.
[20:02:09] <pyzozord> ah i see
[20:02:13] <pyzozord> it took a moment to get
[20:02:34] <pyzozord> 30 minutes to be exact :|
[20:05:31] <pyzozord> I modified it slightly https://go.dev/play/p/zVlLUlZMQ3J in this version we see that in == [chunk 1, chunk 2] and out == [chunk 2, chunk 2]
[20:06:31] <pyzozord> before we appended out with first chunk, the internal buffer of copyBuffer was already filled with data from the second chunk from our Read
[20:07:42] <pyzozord> btw so range on channel will loop until channel is done? How does it know when channel is done?
[20:10:13] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[20:14:42] <fizzie> It stops when the channel gets closed.
[20:15:51] <fizzie> (Consequently it will block forever if you *don't* close the channel.)
[20:16:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:18:36] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:19:21] <pyzozord> how do close a channel?
[20:19:28] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[20:21:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[20:22:12] <pyzozord> also I'm trying now to write `for var p [1024]byte; n, err := resp.Body.Read(p); n > 0 && err == nil {` and it really doesn't like it, how can I make it work?
[20:27:03] <fizzie> The built-in function `close` closes a channel.
[20:27:37] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:31:40] *** Joins: bluedust (~bluedust@185.195.232.134)
[20:32:25] <fizzie> There's no great way to write a for loop that repeats a call to a function like Read, sadly. A plain `var p [1024]byte; for { n, err := r.Read(p[:]); if err != nil { break } ... }` might be most typical.
[20:34:19] <fizzie> Err, not exactly that; the contract for io.Reader allows returning some actual data together with the non-nil error. But with the appropriate adjustments.
[20:34:46] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8110-d43e-8908-1c78.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzzâ€¦)
[20:35:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:44:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:45:31] *** Quits: bluedust (~bluedust@185.195.232.134) (Ping timeout: 256 seconds)
[20:48:20] *** Quits: keesj (~keesj@213-10-197-6.fixed.kpn.net) (Quit: WeeChat 2.8)
[20:48:20] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Ping timeout: 272 seconds)
[20:48:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[20:50:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:50:49] <pyzozord> so I wrote it like this http://bpa.st/WTWA but I don't like it
[20:52:29] <pyzozord> it also prints one "write" after the "got" which I don't understand
[20:52:57] <pyzozord> output looks like this http://bpa.st/LT3Q
[20:53:22] <pyzozord> I expected last write to be before "got" message and to be less than 1024 bytes
[21:00:02] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Ping timeout: 240 seconds)
[21:00:12] <fizzie> You should probably send p[:n] over the channel, rather than p.
[21:00:41] *** Joins: Tasi__ (~Tasi@20014C4C220C8F0095D40787A11F7221.catv.pool.telekom.hu)
[21:01:13] <pyzozord> ah that answers one of the qestions
[21:01:21] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[21:01:28] <pyzozord> but why does it do a "wrote" after the "got"
[21:02:36] <fizzie> Well, why not? It's two independent goroutines, only synchronized by the send/receive operation but nothing else.
[21:03:49] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[21:03:51] *** Quits: Tasi__ (~Tasi@20014C4C220C8F0095D40787A11F7221.catv.pool.telekom.hu) (Client Quit)
[21:03:52] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Client Quit)
[21:04:00] <pyzozord> I see, I need to learn to think about them as parallel
[21:04:15] *** Joins: Tasi (~Tasi@20014C4C220C8F0095D40787A11F7221.catv.pool.telekom.hu)
[21:04:32] *** Quits: Tasi_ (~Tasi@20014C4C220C8F00DD7BDA5ADAA8077B.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[21:09:43] <pyzozord> fg
[21:09:46] <pyzozord> oops sorry,
[21:13:43] *** Joins: Tasi_ (~Tasi@20014C4C220C8F00AC2DC06F85ECD562.catv.pool.telekom.hu)
[21:14:27] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Quit: Leaving)
[21:14:36] *** Quits: borrougagnou_alt (~borrougag@91.134.153.132) (Quit: %byebye%)
[21:16:11] *** Joins: Tasi__ (~Tasi@20014C4C220C8F005433C4E3DC823B2F.catv.pool.telekom.hu)
[21:16:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8110-d43e-8908-1c78.res6.spectrum.com)
[21:17:14] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[21:17:25] *** Quits: Tasi (~Tasi@20014C4C220C8F0095D40787A11F7221.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[21:19:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:19:30] <pyzozord> looks like I can debug go programs with gdb, that's great
[21:19:50] *** Quits: Tasi_ (~Tasi@20014C4C220C8F00AC2DC06F85ECD562.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[21:19:52] <pyzozord> but I just printed an error and I get $2 = {tab = 0x6aeec0 <*net/url.Error,error>, data = 0xc0000120c0}
[21:25:19] <fizzie> There's also `delve`, a more Go-oriented debugger.
[21:27:07] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-8110-d43e-8908-1c78.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[21:27:36] <KirkMcDonald> I always thought the joke was that the Go debugger would be named Ogle.
[21:33:00] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:33:00] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:33:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:33:13] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[21:35:24] <pyzozord> ok so my code is a bit better now I think http://bpa.st/UY2Q however now I have a problem that the program doesn't stop
[21:35:48] <pyzozord> I can't just close() inside the fetch because there might be multiple fetch goroutines
[21:37:35] *** Quits: achilleas (~ach@user/achilleas) (Quit: :wq)
[21:38:47] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:38:47] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[21:38:58] *** Joins: achilleas (ach@user/achilleas)
[21:42:16] <pyzozord> do I need to use a waitegroup?
[21:42:21] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-99f7-1928-2563-4a8c.res6.spectrum.com)
[21:47:04] <ikke> close what?
[21:47:54] <pyzozord> the channel
[21:48:17] <pyzozord> I got 2 goroutines running the same function that write to the same channel
[21:50:08] <ikke> Then a wait group would probably work
[21:54:36] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[21:55:18] *** Joins: Tasi_ (~Tasi@20014C4C220C8F00E8F5B3D677D399FD.catv.pool.telekom.hu)
[21:55:22] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[21:55:28] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[21:57:09] <pyzozord> any other options?
[21:58:50] *** Quits: Tasi__ (~Tasi@20014C4C220C8F005433C4E3DC823B2F.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[22:01:23] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00440AD5748B7119B4.catv.pool.telekom.hu)
[22:02:44] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[22:04:54] *** Quits: Tasi_ (~Tasi@20014C4C220C8F00E8F5B3D677D399FD.catv.pool.telekom.hu) (Ping timeout: 250 seconds)
[22:06:14] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[22:09:01] *** Joins: csileeeeeeeeeeoe (~csileeeee@50.232.121.75)
[22:10:06] *** Quits: ilpanda (ilpanda@user/ilpanda) (Quit: ZNC 1.8.2 - https://znc.in)
[22:10:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:14:27] *** Joins: Tasi_ (~Tasi@20014C4C220C8F006C948F3805F8DAC8.catv.pool.telekom.hu)
[22:14:53] *** Joins: ilpanda (ilpanda@shell.xshellz.com)
[22:15:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:18:47] *** Quits: Tasi__ (~Tasi@20014C4C220C8F00440AD5748B7119B4.catv.pool.telekom.hu) (Ping timeout: 256 seconds)
[22:19:12] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:20:08] *** Parts: Tasi_ (~Tasi@20014C4C220C8F006C948F3805F8DAC8.catv.pool.telekom.hu) ()
[22:20:53] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:24:33] *** Joins: anorak (~anorak@p200300db9f375e545210e58c1ae5910e.dip0.t-ipconnect.de)
[22:25:53] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:26:38] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[22:26:41] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:26:54] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:28:09] *** Joins: Tasi__ (~Tasi@5403E7DA.catv.pool.telekom.hu)
[22:30:59] *** Quits: anorak (~anorak@p200300db9f375e545210e58c1ae5910e.dip0.t-ipconnect.de) (Quit: Leaving)
[22:31:49] *** Joins: treeford (~charleste@user/treeford)
[22:32:14] <pyzozord> I'm not sure how to do it, I tried like this but I think the code is not even reaching the wg.Wait() http://bpa.st/EYPA
[22:35:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[22:36:35] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[22:37:02] <han-solo> pyzozord: maybe try closing the channel from the sender side
[22:37:55] <pyzozord> what do you mean by "from the sender side"?
[22:38:29] <han-solo> line 37 won't be done, until the channel is closed i think, but you are closing it after that
[22:39:11] <han-solo> or maybe run the receiving part in another go routine
[22:39:49] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:39:49] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:40:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:40:06] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[22:40:27] <han-solo> `go func(){ for chunk : range ch { .. } }()`
[22:40:33] <han-solo> :=
[22:41:25] <han-solo> ignore that "from the sender side"
[22:42:32] <pyzozord> I did it like this http://bpa.st/6PFA, I'm not sure if that's correct
[22:42:50] <pyzozord> I just spin another goroutine that waits on the waitgroup to close the channel
[22:42:55] <han-solo> not like that
[22:43:12] <han-solo> run the `for chunk := range ch { .. }` part in a go routine i mean
[22:43:19] <han-solo> rest were fine
[22:44:03] <han-solo> although, that seems fine too, it will wait and close the chanel, and the for loop will be done
[22:44:13] <pyzozord> yeah that works
[22:45:32] <pyzozord> when I run it with two urls I get this output http://bpa.st/CUKA. I expected to both goroutines to intertwine
[22:45:39] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:45:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:45:45] <pyzozord> But they don't seem to. How can I be sure that they run in parallel?
[22:46:27] *** Quits: bigGopher (~dan@207.98.176.66) (Quit: bigGopher)
[22:47:26] <han-solo> it looks like you are using a single channel ?
[22:48:14] <han-solo> so maybe try giving each worker their own channel, and maybe fanout
[22:51:28] <han-solo> s/fanout/fanin/
[22:52:38] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[22:52:54] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 252 seconds)
[22:53:10] *** tykling_ is now known as tykling
[22:53:34] *** Joins: teasea (~teasea@user/teasea)
[22:53:48] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[22:53:48] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[22:53:48] *** Joins: tane (~tane@user/tane)
[22:54:14] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:54:49] <pyzozord> heh
[22:55:07] <pyzozord> well yeah I'm using a single channel, I still expected goroutines to intertwine on that one channel
[22:57:47] <han-solo> it will
[22:58:16] <seebs> i would expect them to intertwine, but in a specific case like this, it's possible the first one finished almost-instantly before the other one responded at all.
[23:02:25] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[23:05:08] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 250 seconds)
[23:05:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:05:41] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[23:06:00] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[23:07:10] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[23:07:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[23:07:42] <pyzozord> ok so maybe it's the scheduler deciding that it's more optimal to run them sequentially right now?
[23:07:43] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-99f7-1928-2563-4a8c.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:07:50] <pyzozord> fg
[23:07:53] <pyzozord> oops sorry
[23:09:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:10:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[23:11:39] <seebs> it's not the scheduler, i think, it's more "a web page can take milliseconds to respond", so one of them can complete before the other just because the other hasn't responded yet
[23:11:41] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[23:13:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:13:55] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:14:09] <pyzozord> ooh, hmm
[23:14:19] <pyzozord> that's a good observation, indeed that could be it
[23:15:05] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[23:15:32] <pyzozord> go is just so fast at copying and printing that even a milisecond difference is server response is enough to complete copying data from one page, before the next one responds
[23:15:55] *** Joins: rewt (~default@user/rewt)
[23:16:36] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[23:16:40] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:fa18:476e:a58f:319a) (Remote host closed the connection)
[23:16:57] <seebs> i am not sure any programming language in widespread use would have trouble copying 50kB of data in a millisecond
[23:16:59] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:d400:b211:f977:a07e)
[23:17:14] <foobaz> a millisecond is eons to a CPU, that's millions of cycles
[23:18:04] *** Joins: lazysundaydreams (~mistr@ip-89-177-73-161.net.upcbroadband.cz)
[23:19:56] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[23:20:47] *** Joins: rvalue (~rvalue@user/rvalue)
[23:28:17] <dostoyevsky2> If my a storage node  notices that other nodes have stale data... it just creates go routines to update the other nodes, it doesn't wait on these go routines because it just wants to return an answer to the client.  So there could be accumulating some go routines which update stale data...  I plan to just check `runtime.NumGoroutine()' for a certain threshold value to decide whether or not I can
[23:28:23] <dostoyevsky2> start more background processes
[23:28:40] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:30:51] <bvk> dostoyevsky2: I typically use a semaphore for such use cases. Initialize the semaphore to max gorutines and use TryAcquire/Release to limit the number of goroutines.
[23:32:09] <dostoyevsky2> bvk: I guess that sounds better, because looking at the number of goroutines during my unit testing... I already have like 80 running... not sure what all these are doing already, so a threshold value might be difficult to define
[23:33:33] *** Joins: Torr (~Torr@user/torr)
[23:36:19] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[23:37:21] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[23:38:00] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:38:32] <bvk> May be, a wrapper on semaphore type that could also update the semaphore limit dynamically (add or subtract) will help with converging to the correct threshold. Implementing such a wrapper could be tough without some locking/mutexes.
[23:41:18] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Ping timeout: 252 seconds)
[23:42:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[23:43:02] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Ping timeout: 240 seconds)
[23:52:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:52:05] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:52:19] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:52:21] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[23:52:43] <pyzozord> I have two files both in package main, how can I use function from one in the other?
[23:53:16] <bpalmer>  you canjust call them. However, when you compile, you need to make sure to not specify just one of the two files
[23:53:36] <pyzozord> it doesn't work it says the function is undefined
[23:53:51] <bpalmer> how are you compiling your code?
[23:53:54] *** Quits: Tasi__ (~Tasi@5403E7DA.catv.pool.telekom.hu) (Read error: Connection reset by peer)
[23:54:02] <pyzozord> go run file1.go
[23:54:07] <seebs> don't use go run
[23:54:16] *** Joins: Tasi__ (~Tasi@20014C4C220C8F00508FFCB92286498E.catv.pool.telekom.hu)
[23:54:17] <seebs> like, basically without loss of generality, it's never a good idea
[23:54:26] <bpalmer> pyzozord: so you specify "just one of the two files," the thing I suggested not to do ? :)
[23:54:27] <seebs> use go build and then run your program
[23:54:35] <pyzozord> that's what GOPL book says I should do right now
[23:54:35] <fizzie> If you do use `go run`, at least specify a package.
[23:54:38] <seebs> but also that
[23:55:00] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[23:55:07] <seebs> if you're following the book, you should follow the book also on the "use a single file" thing, and wait until they explain about multiple files to use multiple files
[23:56:59] <pyzozord> well it doesn't specifically says to copy or import or anything
[23:57:46] <pyzozord> it just says "lets see how easy it is to combine our two previous examples by writing this one function differently" and that function uses stuff from program B and is called stuff from program A
[23:59:00] <pyzozord> I added go.mod and do go run mine fileA.go but now I'm getting dozen "main redeclared in this block" errors
[23:59:09] <pyzozord> I guess the book wants me to manually copy things for now
[23:59:19] <pyzozord> would be nice if they said so explicitly though then
[23:59:19] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:59:19] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
