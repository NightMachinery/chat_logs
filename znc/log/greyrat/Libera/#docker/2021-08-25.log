[00:01:22] <artok> epolanski: Dockerfile is build time things
[00:01:33] <epolanski> I managed to do it
[00:01:47] <epolanski> by writing some bash and adding it to bashrc
[00:01:56] <epolanski> and now at startup it executes zsh
[00:02:09] <artok> RUN is buildtime thingie, with empty CMD and ENTRYPOINT you can just hit docker run -it imagename /bin/zsh
[00:02:27] <epolanski> have to say, I am finding docker very funny and terribly useful to understand *nix
[00:02:55] <artok> you haven't yet understood difference
[00:03:10] <artok> Dockerfile is to create image, buildtime directives
[00:03:20] <artok> container is started from image, and that is runtime
[00:03:36] <epolanski> yes I get it, that's why I modified bashrc to accomplish changing the shell on startup
[00:03:44] <artok> no you didn't
[00:03:46] <epolanski> thought I could do that from the Dockerfile
[00:03:57] <artok> yes you can, use ENTRYPOINT and CMD
[00:03:59] <epolanski> why I didn't?
[00:04:14] <artok> because injecting it into .bashrc starts first bash and then zsh
[00:04:39] <artok> proper buildtime directive doesn't start bash, it launches zsh right away
[00:04:53] <epolanski> I see your point
[00:05:33] <programmerq> epolanski▸ yeah, docker just starts a command at startup. it isn't doing a shell lookup and initiating a full blown shell lookup and user interactive session. Many docker images have a shell like sh or bash set as the CMD by default. running chsh in a RUN directive would update the /etc/passwd inside the image, but that won't change what process docker starts if the CMD is still bash.
[00:06:17] <Tach> Can anyone tell me something about shared docker hosts for multiple users and isolated networks between containers ? Do I still have a problem on hostnetwork with isolation  ?
[00:06:57] <programmerq> docker doesn't do any differentiation for multitenant use cases out of the box. if you have a user with access to a given docker host, then they have full root on that host.
[00:06:58] <epolanski> so basically launching a docker image and connecting to it, means basically running it and by default launching bin/bash
[00:07:49] <programmerq> epolanski▸ yes, assuming the image in question has CMD bash set in its metadata. You can always set a new CMD in your Dockerfile to override the CMD that is set in the FROM image. You can also override it at runtime: docker run --rm -it <image> <command>
[00:09:10] <programmerq> epolanski▸ the chsh would take effect for cases where you start something that does pay attention to what shell to launch based on /etc/passwd. For example, if I fire up a tmux session, it'll start whatever that default shell is for the user based on the /etc/passwd entry
[00:09:12] <epolanski> so the SHELL you set in the dockerfile changes the shell used by the builder, not the runtime, right?
[00:09:13] <artok> programmerq's through answers makes me look a twat, so usual.. =)
[00:10:26] <programmerq> Tach▸ multi host networking is part of docker swarm, so you can achieve container A on host B talking to container C on host D with that. You don't have to use swarm mode services if you just want to take advantage of the networking piece.
[00:10:45] <artok> that /etc/passwd file inside container is just to help map "some" numerical UID/GID into human understandable thing
[00:11:10] <programmerq> Tach: and the docker model for restricting containers from seeing eachother is to only put containers on the same network if they're supposed to talk to eachother. containers can be on multiple networks too.
[00:11:53] <artok> that's all, nothing else. you set ENTRYPOINT and CMD (latter being able to be replaced on docker run command) and those are used to start program inside container
[00:15:03] <tabakhase> Tach dont.
[00:15:06] <tabakhase> that simple
[00:15:34] <Tach> tabakhase that was my idea as well but better discuss
[00:15:34] <tabakhase> docker users = root - so nothing below that matters...
[00:15:54] <programmerq> Tach docker does have the capacity for authn/authz plugins, but that feature never saw widespread use. The docker EE stuff that is now owned by mirantis implemented RBAC for isolating resources by user by using essentially an API proxy that would do some limited transforms and access control by label so user A wouldn't see resources belonging to user B. These days, once you get into multitenancy
[00:15:56] <programmerq> type requirements, it's more common to see kubernetes being utilized. kube has built in namespaces, so you can do stuff like "user A has access to namespace blue, red, and green" 
[00:16:19] <Tach> tabakhase but you say "users", what do you mean by that ?
[00:16:39] <programmerq> Tach you had said "multiple users" in your initial question
[00:16:48] <artok> anyone able to do docker commands
[00:17:01] <programmerq> but anyone who has access to talk to dockerd is effectively full 100% root on that host system.
[00:18:09] *** Quits: lemonzest (~lemonzest@user/lemonzest) (Quit: Quitting)
[00:18:33] <Tach> they aren't, they only have services running on their docker containers
[00:18:44] <Tach> they don't even have SSH access (not yet)
[00:19:54] <artok> I would spin up vm for each user so there is no harm done on others
[00:20:17] <programmerq> oh, so your users are just connecting to processes running inside a docker container? they're not actually doing 'docker run' commands?
[00:27:09] *** Quits: maroloccio (~marolocci@37.100.40.252) (Quit: WeeChat 3.0)
[00:29:42] *** Quits: memoryleak (~memorylea@77-58-142-250.dclient.hispeed.ch) ()
[00:33:01] *** Joins: junktext (~junktext@77.247.181.211)
[00:34:05] *** night_wulfe_ is now known as night_wulfe
[00:37:17] *** Quits: junktext (~junktext@77.247.181.211) (Ping timeout: 250 seconds)
[00:40:30] <Tach> artok I would do the same by default, just an idea I wanted to discuss
[00:41:03] <programmerq> what idea is it you want to discuss? I'm not really clear on what problem you're looking to solve/discuss
[00:45:06] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Quit: Haxxa flies away.)
[00:47:38] *** Joins: junktext (~junktext@109.201.152.171)
[00:48:24] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:52:50] <lmat>  /win 4
[00:55:55] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[00:56:09] <artok> seems it wasn't clear
[00:57:25] <artok> tbh, on even small office, I'd spin up hypervisor for every developer so they could do anything on their vm and others wouldn't be affected
[00:58:14] <artok> then staging platform would be from aws and so on
[00:58:45] *** Joins: Tach (~Tach@user/tach)
[00:58:47] *** Quits: Ryu945 (~Ryu945@107.150.22.75.adsl.inet-telecom.org) (Ping timeout: 240 seconds)
[01:02:28] <ada_> we use codeserver
[01:02:39] <ada_> github's new codespaces sounds nice too
[01:02:51] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[01:04:41] *** Quits: catbehemoth (~vasyl@bras-base-lnglpq6100w-grc-17-174-89-2-49.dsl.bell.ca) (Read error: Connection reset by peer)
[01:08:33] <artok> I've been so much coding lights and doing dj stuff so I haven't had time to check codespaces at all
[01:14:00] *** Quits: zoredache (sid295808@id-295808.brockwell.irccloud.com) ()
[01:14:20] *** Joins: zoredache (sid295808@id-295808.helmsley.irccloud.com)
[01:16:03] *** Joins: oscard (~kijotex@91.116.34.176)
[01:16:23] *** Bitflux is now known as Byteflux
[01:18:31] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:19:14] *** Joins: aead (~aead@user/aead)
[01:20:27] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 240 seconds)
[01:24:11] <artok> vscode just seems to inject itself on everywhere
[01:26:39] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:26:55] *** Joins: aead (~aead@user/aead)
[01:27:37] *** Quits: aead (~aead@user/aead) (Client Quit)
[01:29:11] *** Joins: aead (~aead@user/aead)
[01:30:54] *** Joins: rightisleft (~rightisle@c-73-190-82-154.hsd1.wa.comcast.net)
[01:31:21] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) ()
[01:31:36] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:32:07] *** Joins: oscard (~kijotex@91.116.34.176)
[01:32:10] <rightisleft> Hello - im using Terraform / Ansible / Docker Swarm. I have 3 groups of worker types [‘manager’, ‘compute’, ‘gpu’] - when terraform swaps out any of the hosts - what is the best way to remove old instances from the manafer nodes? 
[01:33:24] <rightisleft> when im in ansible - i dont really have a way to infer which hosts have changed
[01:35:32] <artok> ansible hosts file should be populated by terraform if it doing any swaps
[01:36:24] <artok> not that I know more about your infrastructure, but terraform seems to do something it shouldn't do
[01:36:40] <rightisleft> artok - hrmmm would i need to include a group of explicit changes? 
[01:37:01] <rightisleft> thats possible too… what would you be looking for? 
[01:37:01] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 252 seconds)
[01:37:23] <rightisleft> (im taking over a project) 
[01:38:06] <artok> terraform is used to provision basic system, ansible is used to start docker daemons in a swarm, and then it's docker all the way?
[01:39:10] <rightisleft> eseentially yes
[01:39:19] <artok> so it sounds quickly that you should just restrict terraform to do the first thing, and scale horizontally 
[01:39:31] <artok> no swapping, no deleting
[01:39:51] <rightisleft> we offer a feature that enables us to ‘resize’ the performance of customer boxes in terraform. IE, increase core counts etc. that results in the ec2 instance being replaced in place
[01:40:07] <rightisleft> that happens at the terraform level
[01:40:09] <artok> yeah so 
[01:40:15] <artok> just what I thought
[01:41:02] <rightisleft> so the new and or replaced hosts are expected behavior 
[01:41:25] *** Quits: DoofusCanadensis (~DoofusCan@node-1w7jr9yercvgfwytsciykk4x0.ipv6.telus.net) (Quit: So as you can see from this flowchSQUIRREL!!)
[01:41:43] <artok> when terraform is replacing the instance, it needs to populate ansible hosts file
[01:41:48] *** Quits: aead (~aead@user/aead) (Quit: aead)
[01:42:16] <rightisleft> it does - it updates the ansible file with the new ip addresses - but they keep the same hostname 
[01:42:17] <artok> if the instance is swarm manager, some other manager needs to be connected to swarm cluster before it is destroyed
[01:42:45] <rightisleft> worker-0 can go from ip of XXX.XXX to worker-0 at ZZZ.ZZZ etc etc
[01:43:08] <rightisleft> where worker-0 is one of many in group workers of the ansible inventory 
[01:44:09] <rightisleft> the new instance of worker-0 is given a join-token back to the swarm 
[01:44:29] <rightisleft> but you still see the old entry 
[01:44:43] <rightisleft> this is more complicated with manager nodes
[01:44:48] <artok> those kind of migrations.. ada_ have any insight?
[01:45:25] <rightisleft> im tempted to recursively remove all the nodes from manager-0 and build it back up - but that feels hacky
[01:46:11] <artok> this is really complicated thing when you need to carry data from the previous instances to the newly spun up
[01:46:57] <artok> without downtime atleast
[01:47:05] <rightisleft> we can have downtime on resize 
[01:47:51] <rightisleft> all the instances are ephemeral 
[01:48:34] <rightisleft> i could also just nuke all the ec2 instances and rebuild on resize - but again - feels hacky 
[01:48:49] *** Joins: oscard (~kijotex@91.116.34.176)
[01:49:21] <artok> that was my thought exactly, downtime ok -> rebuild
[01:51:49] <artok> kick in new instances to swarm, new manager there, start SONOTH and swarm should start services on where ever it sees possible
[01:52:03] <artok> persistent data then
[01:52:15] <rightisleft> SONOTH? 
[01:52:18] <artok> RayREX plugins
[01:52:26] <artok> Sooth other node on the head
[01:52:28] <artok> shoot
[01:52:48] <artok> killing the ones that are replaced
[01:53:33] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[02:00:44] *** Joins: Ryu945 (~Ryu945@2600:1700:cf1:36f0:6903:8e8f:e1af:7267)
[02:02:33] <rightisleft> i’ll have to check those out
[02:02:57] <rightisleft> url?
[02:02:58] <artok> you need to be sure that volumes of persistent data is already there, so if you're using rexray for EFS, make ansible is doing that stuff too
[02:03:29] <artok> transferring basic apps is nothing but something that stores persistent data.. that is different thing usually
[02:03:31] *** Quits: vidbina (~vid@x4db7e76e.dyn.telefonica.de) (Ping timeout: 250 seconds)
[02:06:10] *** Joins: oscard (~kijotex@91.116.34.176)
[02:06:14] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:06:33] *** Quits: Ryu945 (~Ryu945@2600:1700:cf1:36f0:6903:8e8f:e1af:7267) (Ping timeout: 250 seconds)
[02:07:37] <artok> you're having quite difficult question to do automatically.. for db data, starting new service for the db and replicate data into new node, and then after sync, shooting the other node in the head and start acting as master....
[02:10:11] <artok> on docker perspective it won't be much hassle as you just start another manager, join to existing swarm, start new nodes connecting to it and then start shooting the other nodes
[02:10:30] <rightisleft> apparently swarm is the only that persist data on these nodes 
[02:10:50] <artok> but for data persistency of the services, you need to do some work
[02:10:54] <rightisleft> the difficult ones is know which ones to rm
[02:11:53] <rightisleft> i can just add a depends_on block on the input variable for size in terraform and nuke the compute clusters from space
[02:12:52] <artok> I would need to read more on terraform, have looked it years ago, but know nothing really about it
[02:13:30] <artok> only thing I know that you need to be sure that data is carried along to newly spun instances
[02:14:47] <artok> another is: start the whole stack on new instances, copy the databases and other persistent data, set new ip on the dns
[02:15:40] <artok> downtime: when db is locked for the copying and dns is updated
[02:16:13] <artok> and on aws, if you have floating ip, there is no waiting for it since you just attach it to instance you want
[02:17:20] <artok> nice question, horizontally scaling has been my choise every time, but doing vertically, not that much
[02:19:33] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 250 seconds)
[02:20:05] *** Joins: noarb (~noarb@user/noarb)
[02:25:54] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[02:29:16] *** Joins: jamiejackson (~jamiejack@199.223.30.254)
[02:36:44] *** Quits: onizu (uid373383@id-373383.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[02:39:55] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[02:45:07] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 240 seconds)
[02:51:45] *** Quits: daddy (ryan@hashbang/bdfl) (Read error: Connection reset by peer)
[02:57:58] *** Joins: oscard (~kijotex@91.116.34.176)
[03:01:25] *** Joins: phenom (~primus@user/phenom)
[03:02:27] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[03:09:08] *** Quits: liefer (~liefer@user/liefer) (Quit: liefer)
[03:11:26] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[03:13:03] *** Joins: liefer (~liefer@user/liefer)
[03:15:17] *** Quits: liefer (~liefer@user/liefer) (Client Quit)
[03:16:12] *** Joins: djapo (~archangel@user/djapo)
[03:17:32] *** Joins: codebam (~codebam@user/codebam)
[03:23:30] *** Joins: liefer (~liefer@user/liefer)
[03:30:50] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[03:32:12] *** Joins: oscard (~kijotex@91.116.34.176)
[03:36:36] *** Quits: etienneme (~etienne@user/etienneme) (Ping timeout: 256 seconds)
[03:36:41] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[03:37:28] <ada_> artok, rightisleft looks like I missed most of the convo, what was the question?
[03:38:43] <ada_> the "best" way to remove manager nodes?  I would say, don't remove manager nodes past 3 if you scale up that far.  if you do, increase to 4 manager nodes, join the cluster with the new node, then remove teh "to be removed" node
[03:38:56] <ada_> I would probably do that for replacing worker nodes, too
[03:39:49] <ada_> join the new node in PAUSE state so no assignments go out, then DRAIN the worker to be removed, unPAUSE the new node, and tasks should move over to it.  it wont be a perfect rebalancing but it's more atomic that way
[03:40:26] <ada_> I guess you could skip the pause state, but I would join the new node before removing the old one
[03:40:34] <rightisleft> im essentially trying to understand the best way to detect change on a list of nodes coming out of terraform, they are mixed manager and worker nodes. 
[03:40:51] <ada_> I don't know that about terraform
[03:41:03] <artok> so that's the basics that I was suggesting also
[03:41:09] <rightisleft> I gues the challenge i have is right now the nodes are changed in place
[03:41:12] <ada_> oh word I didn't read lol
[03:41:25] <artok> start new ones, and then start shooting the old ones on the head
[03:41:32] <rightisleft> so lets ay gpu-worker-0 is resized and its ip is changed
[03:41:43] <ada_> swarm doesn't like it when IPs change
[03:41:48] <ada_> I would spin a new machine name if so
[03:42:01] <artok> you shouldn't be considered about names of the hosts
[03:42:21] *** Joins: luvalon13 (~luva@178.239.173.200)
[03:42:30] <artok> swarm will have services and they are spun on what ever nodes
[03:43:03] <artok> it will handle things for you, when you kill the old node, it will start services on new one
[03:43:18] <rightisleft> interest - so right now i see things like 2 entries for gpu-worker-0 where 1 is down and 1 is up 
[03:43:29] <rightisleft> the one that is down is essentially destroyed by terraform 
[03:43:37] *** Quits: luvalon1 (~luva@178.239.173.200) (Ping timeout: 248 seconds)
[03:43:37] *** luvalon13 is now known as luvalon1
[03:43:41] <artok> terraform thingies are still unknown to me
[03:43:42] <rightisleft> but represents the same instance with different details
[03:44:02] <rightisleft> i guess there’s no reason it needs to have the same name 
[03:44:37] <rightisleft> does swarm ever clean out down nodes? 
[03:44:57] <rightisleft> or will i need to execute that through ansible
[03:45:13] <artok> if you kill node from it, it just is "ok, that one is not anymore usable"
[03:45:30] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:45:31] <artok> if it leaves any artifacts, that is unknown to me
[03:45:49] <artok> ada_ might have first hand info
[03:45:51] *** Joins: flynn (~mcbloch@user/flynn)
[03:45:57] *** Quits: momomo (~momomo@user/momomo) (Read error: Connection reset by peer)
[03:46:05] * artok is offering the ball again to ada
[03:46:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[03:46:34] <ada_> rightisleft: no it doesn't
[03:46:59] *** Joins: momomo (~momomo@user/momomo)
[03:47:00] <ada_> rightisleft: you have to use 'docker node rm' from a manager socket
[03:48:45] <rightisleft> interesting - terraform is bad at sharing its diff state to the ansible inventory - so detecting what would need to be cleaned up is a bit difficult 
[03:49:20] <rightisleft> IE: even if i increment the name - also knowing that worker-0 was nuked from orbit isn’t information that’s easily available 
[03:50:07] *** Quits: liefer (~liefer@user/liefer) (Ping timeout: 250 seconds)
[03:50:52] *** Joins: oscard (~kijotex@91.116.34.176)
[03:52:05] <rightisleft> i guess i could use a unique per deploy hash or something 
[03:52:07] *** Quits: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[03:54:10] *** Joins: codebam (~codebam@user/codebam)
[03:55:11] <rightisleft> in short - docker doesn’t know what terraform changed :( 
[03:56:10] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 240 seconds)
[03:59:07] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[04:02:31] *** Quits: cliluw (~cliluw@47.147.80.149) (Quit: Leaving)
[04:08:55] *** Joins: xep (~xep@76-210-4-7.lightspeed.sntcca.sbcglobal.net)
[04:09:15] *** Joins: oscard (~kijotex@91.116.34.176)
[04:13:57] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[04:17:12] <neshpion> i'm a brand new babby to docker, so if i understand this right, using docker means i don't really have to install *any* languages or runtimes into the system i run images on, because those are part of the base containers docker containers run in?
[04:17:37] *** Quits: luvalon1 (~luva@178.239.173.200) (Ping timeout: 252 seconds)
[04:18:11] *** Joins: luvalon1 (~luva@178.239.173.200)
[04:18:13] *** Joins: jazzy (~jaziz@2600:380:8773:c113:283b:42e6:63fd:12e7)
[04:18:48] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Remote host closed the connection)
[04:19:59] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[04:24:22] <nickjj> neshpion, yep and if you want to nit pick it's part of the base image not base container, and technically the language runtime can come from installing it into a different base image, it's just usually you end up using a base image for a specific language since it covers most use cases
[04:31:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[04:33:16] *** Joins: codebam (~codebam@user/codebam)
[04:43:07] <neshpion> so it looks like i can expose a container's internal port to a unique actual port on my system, and have nginx forward traffic per-domain to whichever system port goes to the desired container's internal ports, is that typical?
[04:44:04] *** Joins: oscard (~kijotex@91.116.34.176)
[04:44:21] *** Joins: etienneme (~etienne@user/etienneme)
[04:45:41] *** Quits: rightisleft (~rightisle@c-73-190-82-154.hsd1.wa.comcast.net) (Quit: rightisleft)
[04:46:03] *** Quits: Shaun (~soneil@user/shaun) (Quit: Lost terminal)
[04:50:07] <jmcantrell> neshpion: yeah, and you can even containerize the nginx proxy
[04:51:22] <neshpion> that would come in handy if i wanted to run multiple web servers that would otherwise fight over ports, i suppose?
[04:51:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[04:52:26] <jmcantrell> yeah, each web server can listen on port 80 and the nginx container can just forward to <hostname>:80
[04:53:43] <neshpion> that sounds like a case in which the nginx proxy wouldn't *need* to be containerized though :/
[04:53:49] <jmcantrell> i've only done that with a docker-compose file, but i don't doubt you could do it with regular docker commands
[04:54:31] <jmcantrell> well, the hostnames are only visible on the network created by docker
[04:55:00] <jmcantrell> if you wanted to reach them from outside of docker, you'd have to map the ports
[04:55:00] <neshpion> oh docker creats a system-wide network where each app can have a hostname?
[04:55:19] <jmcantrell> yeah. it's slick
[04:55:23] <neshpion> so it's useful for conceptualizing what's going where
[04:55:40] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:55:41] <neshpion> instead of having to look at docker ps all the time i guess :D
[04:55:46] <jmcantrell> yeah, it's like a little microcosm of your data center
[04:56:10] *** Quits: molt (~molt@79.140.150.21) (Ping timeout: 240 seconds)
[04:58:13] <neshpion> nice
[05:01:34] *** Joins: c10l (~c10l@89.34.167.207)
[05:04:42] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[05:11:27] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:11:40] *** Quits: Activ8 (~8d65627e@user/aab/x-3846634) (Ping timeout: 240 seconds)
[05:16:47] *** Joins: etiennem- (~etienne@user/etienneme)
[05:16:56] *** Joins: soneil (~soneil@user/shaun)
[05:17:34] *** Quits: etienneme (~etienne@user/etienneme) (Ping timeout: 252 seconds)
[05:19:23] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[05:25:38] *** Quits: soneil (~soneil@user/shaun) (Remote host closed the connection)
[05:26:33] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:26:42] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:29:19] *** Joins: Activ8 (~8d65627e@user/aab/x-3846634)
[05:29:28] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:29:41] *** Joins: paulman (~kulernil@gateway/tor-sasl/kuler)
[05:30:38] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:10] <neshpion> it looks like exposing the docker daemon to remote connections is like exposing root, so would it be sensible for security to setup one nginx -> nginx-container -> hostnamed-containers?
[05:31:10] *** Quits: etiennem- (~etienne@user/etienneme) (Ping timeout: 240 seconds)
[05:31:46] *** Joins: etienneme (~etienne@user/etienneme)
[05:31:58] *** Joins: oscard (~kijotex@91.116.34.176)
[05:34:33] *** Joins: vlm (~vlm@user/vlm)
[05:34:37] *** Quits: artok (~azo@mobile-access-bcee5a-71.dhcp.inet.fi) (Ping timeout: 252 seconds)
[05:36:27] *** Joins: artok (~azo@mobile-access-5672dd-14.dhcp.inet.fi)
[05:36:43] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[05:44:56] *** Joins: thiras (~thiras@user/thiras)
[05:48:58] *** Joins: oscard (~kijotex@91.116.34.176)
[06:06:03] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:09:12] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[06:14:23] *** Joins: yaalon_ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[06:15:19] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 252 seconds)
[06:22:06] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[06:29:11] *** Joins: pycurious (~Adium@user/pycurious)
[06:29:38] <pycurious> When I look at my boot time - my critical chain comprises of a service that runs docker-compose. Anything I can do to speed this up at boot time?
[06:29:51] *** Joins: molt (~molt@79.140.150.225)
[06:32:56] *** Quits: thanas (~thanas@user/thanas) (Ping timeout: 250 seconds)
[06:34:04] *** Joins: oscard (~kijotex@91.116.34.176)
[06:38:15] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[06:57:02] *** Joins: oscard (~kijotex@91.116.34.176)
[06:58:37] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[06:59:35] *** Joins: aead (~aead@user/aead)
[07:02:49] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[07:03:10] *** Joins: c10l (~c10l@89.34.167.207)
[07:03:14] *** Quits: yaalon_ (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) ()
[07:04:15] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[07:04:19] *** Quits: junktext (~junktext@109.201.152.171) (Quit: junktext)
[07:04:37] *** Joins: codebam (~codebam@user/codebam)
[07:13:21] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[07:14:05] *** Joins: Zelec2670 (~Zelec@135-23-82-85.cpe.pppoe.ca)
[07:14:44] *** Zelec2670 is now known as Zelec
[07:14:49] *** Joins: codebam (~codebam@user/codebam)
[07:26:07] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 240 seconds)
[07:28:57] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[07:30:41] *** Joins: codebam (~codebam@user/codebam)
[07:33:40] *** Quits: BobbyJr (~BobbyJr@38.142.116.242) (Ping timeout: 240 seconds)
[07:37:06] *** Quits: vxrx (~vxrx@proxy01.autarkic.org) (Quit: WeeChat 3.2)
[07:38:07] *** Joins: vxrx (~vxrx@proxy01.autarkic.org)
[07:39:07] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[07:39:45] *** Joins: codebam (~codebam@user/codebam)
[07:39:45] *** Joins: BobbyJr (~BobbyJr@38.142.116.242)
[07:41:40] *** Quits: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:44:36] *** Joins: daddy (ryan@hashbang/bdfl)
[07:47:02] *** Joins: thanas (~thanas@user/thanas)
[07:48:51] *** Joins: tkob (tkob@user/thekingofbandit)
[07:54:41] *** Joins: oscard (~kijotex@91.116.34.176)
[07:56:28] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[07:57:50] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Remote host closed the connection)
[08:00:05] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:15:45] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[08:17:08] *** Joins: codebam (~codebam@user/codebam)
[08:18:42] *** Joins: pvdp (~Pieter@static-n58-105-183-94.rdl4.qld.optusnet.com.au)
[08:21:03] *** Joins: zumba_addict (~zumba_add@2601:240:4500:8320:558e:d5c8:f527:d726)
[08:23:45] <zumba_addict> Hey guys, our existing setup is to deploy web application in an AWS EC2 instance. We have a tool that prepares all the packages that are needed in the EC2 instance. From CI to CD, it takes about 20 mins to deploy a web application in dev. Then to promote to different environment, it takes about 13 mins. Our web application is also in production
[08:23:45] <zumba_addict> running on EC2 instance.
[08:24:28] <zumba_addict> Can we use docker to serve web applications in production or is docker only ideal for development purposes?
[08:29:11] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[08:31:41] *** Quits: winstonsmith (~winstonsm@109.201.152.162) (Remote host closed the connection)
[08:32:05] *** Joins: winstonsmith (~winstonsm@109.201.152.161)
[08:36:33] *** Joins: c10l (~c10l@89.34.167.207)
[08:36:51] *** Quits: c10l (~c10l@89.34.167.207) (Client Quit)
[08:37:54] *** Joins: c10l (~c10l@89.34.167.207)
[08:39:09] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[08:41:04] *** Joins: oscard (~kijotex@91.116.34.176)
[08:46:21] *** Joins: codebam (~codebam@user/codebam)
[08:49:16] <artok> zumba_addict: yes you can
[08:54:14] *** Quits: c10l (~c10l@89.34.167.207) (Quit: The Lounge - https://thelounge.chat)
[08:54:52] *** Joins: c10l (~c10l@89.34.167.207)
[09:01:08] <zumba_addict> thank you artok
[09:07:04] *** Quits: brachamh (~brachamh@user/brachamh) (Read error: Connection reset by peer)
[09:07:29] *** Joins: brachamh (~brachamh@user/brachamh)
[09:09:55] *** Joins: brachamh_ (~brachamh@user/brachamh)
[09:17:47] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 240 seconds)
[09:18:33] *** Joins: mei (~mei@user/mei)
[09:29:25] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[09:30:49] *** Joins: codebam (~codebam@user/codebam)
[09:31:35] *** Joins: oscard (~kijotex@91.116.34.176)
[09:35:55] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[09:40:41] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[09:44:20] *** Joins: manin (~X@185.242.190.95)
[09:48:47] *** Joins: oscard (~kijotex@91.116.34.176)
[09:53:30] *** Quits: faceface (~faceface@user/faceface) (Remote host closed the connection)
[09:53:41] *** Quits: manin (~X@185.242.190.95) (Ping timeout: 250 seconds)
[10:00:45] *** Joins: brachamh__ (~brachamh@user/brachamh)
[10:03:01] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 252 seconds)
[10:03:07] *** Quits: brachamh_ (~brachamh@user/brachamh) (Ping timeout: 240 seconds)
[10:03:53] *** Joins: brachamh (~brachamh@user/brachamh)
[10:07:00] *** Joins: versageek (~versageek@wikimedia/Versageek)
[10:11:58] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[10:12:07] *** Joins: djapo (~archangel@user/djapo)
[10:12:33] *** Joins: nickjj_ (~nickjj@user/nickjj)
[10:14:11] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[10:15:37] *** Quits: nickjj (~nickjj@user/nickjj) (Ping timeout: 248 seconds)
[10:17:08] *** Joins: onizu (uid373383@id-373383.highgate.irccloud.com)
[10:22:17] *** Quits: oscard (~kijotex@91.116.34.176) (Ping timeout: 250 seconds)
[10:34:52] *** Quits: yjftsjthsd (~yjftsjths@162.127.123.34.bc.googleusercontent.com) (Remote host closed the connection)
[10:35:39] *** Joins: yjftsjthsd (~yjftsjths@162.127.123.34.bc.googleusercontent.com)
[10:35:43] *** Joins: oscard (~kijotex@91.116.34.176)
[10:35:52] *** Quits: zumba_addict (~zumba_add@2601:240:4500:8320:558e:d5c8:f527:d726) (Quit: Client closed)
[10:38:42] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:45:37] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:48:43] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[10:49:27] *** Joins: manin (~X@185.242.190.95)
[10:55:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:57:49] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[10:58:24] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[10:59:04] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:01:14] *** Quits: BobbyJr (~BobbyJr@38.142.116.242) (Read error: Connection reset by peer)
[11:09:38] *** Quits: chodonne (~chodonne@ec2-3-18-56-136.us-east-2.compute.amazonaws.com) (Quit: ZNC - https://znc.in)
[11:10:30] *** Joins: BobbyJr (~BobbyJr@38.142.116.242)
[11:10:54] *** Joins: chodonne (~chodonne@ec2-3-18-56-136.us-east-2.compute.amazonaws.com)
[11:13:00] *** Joins: lithium (~lithium@user/lithium)
[11:39:37] *** Joins: TomyWork (~TomyLobo@p200300e80f06af008d07b23d6b4077df.dip0.t-ipconnect.de)
[11:45:13] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 248 seconds)
[11:49:16] *** Parts: phessler (~phessler@gir.theapt.org) ()
[11:53:53] *** Joins: keypusher (keypusher@user/keypusher)
[12:10:58] *** Quits: selckin (~selckin@user/selckin) (Quit: selckin)
[12:20:27] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[12:22:50] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[12:53:19] *** Joins: lemonzest (~lemonzest@user/lemonzest)
[13:04:14] *** Quits: denningsrogue (~denningsr@206.214.225.174) (Ping timeout: 250 seconds)
[13:04:17] *** Quits: rpthms (~rpthms@user/rpthms) (Remote host closed the connection)
[13:08:26] *** Joins: zakame (~zakame@user/zakame)
[13:10:38] *** Quits: [diablo] (~diablo]@user/diablo/x-9068044) (Quit: The Lounge - https://thelounge.chat)
[13:12:04] *** Joins: [diablo] (~diablo]@user/diablo/x-9068044)
[13:12:18] *** Joins: Anticom (~Anticom@87.190.49.75)
[13:13:29] *** Joins: denningsrogue (~denningsr@206.214.235.174)
[13:13:39] *** Quits: Anticom (~Anticom@87.190.49.75) (Client Quit)
[13:17:42] *** Joins: ztx (~ztx@user/ztx)
[13:27:03] *** Joins: rpthms (~rpthms@user/rpthms)
[13:33:21] *** Joins: agowa338 (~agowa338@p200300fb0f1a8c004181e370fcc73c94.dip0.t-ipconnect.de)
[13:38:27] <agowa338> Hi, what is more "secure" using a non root user within a container with seccomp and apparmor set to unconfined or leaving it to the default and using the root user within the container?
[13:45:18] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[13:52:53] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:58:10] *** Joins: Shaun (~shaun@user/shaun)
[14:06:24] *** Joins: vidbina (~vid@dynamic-046-114-038-165.46.114.pool.telefonica.de)
[14:14:55] *** Quits: manin (~X@185.242.190.95) (Ping timeout: 252 seconds)
[14:22:21] *** Quits: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469) (Ping timeout: 250 seconds)
[14:22:47] *** Quits: jazzy (~jaziz@2600:380:8773:c113:283b:42e6:63fd:12e7) (Ping timeout: 250 seconds)
[14:26:33] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[14:39:06] *** Quits: zamba (~marius@5.226.162.54) (Quit: WeeChat 3.0)
[14:40:13] *** Quits: molt (~molt@79.140.150.225) (Ping timeout: 252 seconds)
[14:47:19] *** Joins: jazzy (~jaziz@2600:380:874b:fa95:c80:3993:216c:c86e)
[14:54:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:54:51] *** Quits: msk (~msk@49.207.204.61) (Ping timeout: 250 seconds)
[14:57:57] *** Joins: hwdyki (~hwdyki@user/hwdyki)
[14:59:10] *** Parts: hwdyki (~hwdyki@user/hwdyki) ()
[14:59:40] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[15:11:31] *** Joins: keypushe- (keypusher@user/keypusher)
[15:12:09] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 248 seconds)
[15:14:45] *** keypushe- is now known as keypusher
[15:21:15] *** Joins: molt (~molt@79.140.150.225)
[15:32:13] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[15:32:25] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[15:45:16] *** Joins: msk (~msk@49.207.204.61)
[15:46:13] *** Quits: molt (~molt@79.140.150.225) (Ping timeout: 252 seconds)
[15:47:15] *** Joins: trevors (~trevors@c-65-96-171-157.hsd1.ma.comcast.net)
[15:56:50] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 272 seconds)
[15:58:36] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[16:01:35] *** Joins: zamba (~marius@5.226.162.54)
[16:29:43] *** nickjj_ is now known as nickjj
[16:33:43] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:56:42] *** Joins: pierrepaul (sid504261@highgate.irccloud.com)
[16:58:40] *** Quits: denningsrogue (~denningsr@206.214.235.174) (Ping timeout: 240 seconds)
[17:08:58] *** Joins: manin (~X@185.242.190.95)
[17:15:29] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[17:16:57] *** Quits: pvdp (~Pieter@static-n58-105-183-94.rdl4.qld.optusnet.com.au) (Remote host closed the connection)
[17:18:20] *** Quits: paulman (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:19:08] *** Joins: denningsrogue (~denningsr@206.214.235.175)
[17:23:55] *** Quits: denningsrogue (~denningsr@206.214.235.175) (Ping timeout: 250 seconds)
[17:26:53] <programmerq> agowa338▸ both are good ideas. if you have seccomp/armor profiles, then use them. If your containers don't need root in the container, then don't run as root. If the effort level for implementing either of those things is high, then do a risk assessment and see if it would be justified to do one, the other, or both. They don't need to be an either<>or dichotomy.
[17:30:01] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:30:18] *** Joins: pycurious (~Adium@user/pycurious)
[17:33:06] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:34:20] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:38:46] *** Joins: denningsrogue (~denningsr@206.214.225.175)
[17:45:28] *** Quits: BobbyJr (~BobbyJr@38.142.116.242) (Ping timeout: 250 seconds)
[17:49:01] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[17:49:07] *** Joins: BobbyJr (~BobbyJr@38.142.116.242)
[17:49:32] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[17:52:47] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[17:55:26] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:58:21] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[17:59:01] *** Quits: artok (~azo@mobile-access-5672dd-14.dhcp.inet.fi) (Ping timeout: 250 seconds)
[17:59:52] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Client Quit)
[18:05:09] *** Joins: artok (~azo@mobile-access-5672dd-14.dhcp.inet.fi)
[18:10:25] *** Quits: f0rs3ti (~f0rs3ti@pivpn/maintainer/f0rs3ti) (Quit: I've been here, a long long time ago in a far far away ... whatever  .. i am gone)
[18:12:27] *** Joins: f0rs3ti (~f0rs3ti@pivpn/maintainer/f0rs3ti)
[18:13:10] *** Quits: manin (~X@185.242.190.95) (Quit: Going offline, see ya! (www.adiirc.com))
[18:16:40] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[18:17:02] *** Joins: c10l (~c10l@89.34.167.207)
[18:18:21] *** Quits: momomo (~momomo@user/momomo) (Remote host closed the connection)
[18:19:57] *** Joins: momomo (~momomo@user/momomo)
[18:20:25] *** Quits: momomo (~momomo@user/momomo) (Read error: Connection reset by peer)
[18:21:00] *** Joins: momomo (~momomo@user/momomo)
[18:22:16] *** Joins: manin (~X@185.242.190.95)
[18:27:21] *** Joins: RealKiller (~RealKille@103.134.20.216)
[18:29:44] *** Quits: manin (~X@185.242.190.95) (Quit: Going offline, see ya! (www.adiirc.com))
[18:42:42] *** Quits: geirha (~geirha@user/geirha) (Ping timeout: 256 seconds)
[18:46:41] *** Quits: winstonsmith (~winstonsm@109.201.152.161) (Remote host closed the connection)
[18:46:57] *** Joins: winstonsmith (~winstonsm@109.201.152.179)
[18:54:59] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 252 seconds)
[18:55:10] *** Quits: BobbyJr (~BobbyJr@38.142.116.242) (Ping timeout: 240 seconds)
[18:58:42] *** Quits: vidbina (~vid@dynamic-046-114-038-165.46.114.pool.telefonica.de) (Ping timeout: 250 seconds)
[18:59:41] *** Quits: RealKiller (~RealKille@103.134.20.216) (Quit: Client closed)
[19:00:04] *** Joins: Xeago (~Xeago@user/xeago)
[19:02:04] *** Joins: djapo (~archangel@user/djapo)
[19:13:37] *** Joins: manin (~X@185.242.190.95)
[19:14:09] *** Joins: oxum (~oxum@122.172.205.112)
[19:17:28] *** Quits: Activ8 (~8d65627e@user/aab/x-3846634) (Read error: Connection reset by peer)
[19:17:42] *** Joins: Activ8 (~8d65627e@user/aab/x-3846634)
[19:18:36] *** Joins: geirha (~geirha@user/geirha)
[19:19:11] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 250 seconds)
[19:31:40] *** Joins: vidbina (~vid@dynamic-078-055-069-175.78.55.pool.telefonica.de)
[19:41:22] *** Joins: BobbyJr (~BobbyJr@38.142.116.242)
[19:43:44] *** Joins: memelover (~memelover@47.19.105.250)
[19:44:14] *** Joins: ztx (~ztx@user/ztx)
[19:44:56] <memelover> I'm trying to put two containers defined in a docker-compose.yml file on the same network. One of them is built through a Dockerfile, and doesn't appear to join the network. Is there anything I need to define in the Dockerfile to enable this?
[19:45:27] *** Quits: Activ8 (~8d65627e@user/aab/x-3846634) (Quit: The Lounge - https://thelounge.chat)
[19:45:33] *** Joins: codebam (~codebam@user/codebam)
[19:46:12] *** Joins: Activ8 (~ac453663@user/aab/x-3846634)
[19:46:31] <agowa338> memelover: Normally not. You just need to add both services to the same network. https://docs.docker.com/compose/networking/
[19:47:02] <agowa338> Section "Specify custom networks" has an example that looks similar to what you just described.
[19:49:26] <memelover> Strange, that's what I'm doing now, yet the containers do not appear to talk to each other.
[19:49:51] <tabakhase> show your file..
[19:51:36] *** Joins: thiras (~thiras@user/thiras)
[19:52:00] <memelover> https://pastebin.com/fv3cp84X
[19:52:42] <memelover> The dockerfile for the second container is nothing special, just a series of RUN statements (and a CMD) after importing a base.
[19:58:14] <tabakhase> and your error? "containers do not appear to talk to each other." doesnt mean much
[19:58:31] *** Joins: ska (~ska@user/ska)
[19:58:50] <ska> Is there a resetful api for 'docker secret' ?
[19:59:29] <tabakhase> ska restfull dunno, but everything docker ha/does is a api (as its always the cli talking to dockerd over it, everything exists)
[19:59:55] <memelover> after creating the network with `docker network create` and seeing it's config with `docker network inspect`, I can see that only one of the containers (hnt_miner) actually joins it. The other container does not get an IP within the pre-defined network.
[20:00:12] <tabakhase> ska dont ask me where exactly it is ;D - worst case you can MitM yourself i guess...
[20:03:39] *** Joins: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[20:04:39] *** LiENUS is now known as LiENUX
[20:04:45] *** LiENUX is now known as LiENUS
[20:07:05] *** Quits: dabbill (~dabbill@174.31.235.146) (Quit: ZNC - https://znc.in)
[20:10:29] *** Quits: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:10:40] *** Quits: momomo (~momomo@user/momomo) (Ping timeout: 240 seconds)
[20:10:55] *** Joins: LiENUS (~quake@108-242-135-2.lightspeed.btrgla.sbcglobal.net)
[20:11:41] <ada_> ska: yes
[20:12:38] <ada_> ska: https://docs.docker.com/engine/api/v1.41/#tag/Secret
[20:12:50] <ada_> memelover: is it running?
[20:13:55] <memelover> ada_: yes, but now that I think about it, I'm getting a shell in it during the build process. Is networking set up after the build is completed?
[20:14:05] <ada_> nothing is set up during "build"
[20:14:31] <ada_> i mean, explicitly during "docker build" the container doesn't exist yet, it gets an ephemeral IP that ends when the build ends
[20:14:39] <memelover> I see
[20:14:44] <ada_> the "build" process is only to produce the image, so once the container RUNs it gets an IP from the network
[20:14:55] <ska> ada_: ty! ..
[20:14:59] <ada_> ska: yw
[20:16:42] <agowa338> If you need the containers to already talk to one another while building you need something more complex like buildkit.
[20:18:07] <memelover> agowa338: Thanks for the pointer!
[20:18:42] <agowa338> If you haven't used it yet, be warned. It's a deep rabbithole. If you can avoid using it you should :)
[20:19:50] *** Joins: Anticom (~Anticom@87.190.49.75)
[20:20:47] <wez> agowa338: buildkit?
[20:20:52] *** Joins: dabbill (~dabbill@174.31.235.146)
[20:21:29] <wez> agowa338: I have a number of docker images that will be created using the same source code build, which will be done by a docker image
[20:21:40] <agowa338> wez: That too, I was talking about building containers with other containers as build time dependency.
[20:22:05] <wez> Is that buildkit's use case? OR should I just build it first then extend it on my other images?
[20:22:32] <wez> extend / use FROM
[20:22:52] *** Quits: vidbina (~vid@dynamic-078-055-069-175.78.55.pool.telefonica.de) (Ping timeout: 252 seconds)
[20:23:27] *** Joins: vinay-keshava (~vinay-kes@user/vinay-keshava)
[20:24:28] <agowa338> wez: Buildkit has multiple use cases. I most of the time use it when I want to access a file within a "RUN" command within adding that file to the layer. E.g. installing a deb package I built in an earlier layer.
[20:24:36] <agowa338> s/layer/stage
[20:25:04] <wez> ah
[20:25:11] <wez> I'll look into it
[20:26:18] *** Joins: rsx (~dummy@ppp-188-174-128-193.dynamic.mnet-online.de)
[20:30:40] *** Quits: vinay-keshava (~vinay-kes@user/vinay-keshava) (Ping timeout: 246 seconds)
[20:40:15] <programmerq> buildkit is more performant than non-buildkit builds without using any of the extended syntax features that buildkit introduces.
[20:40:58] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (Remote host closed the connection)
[20:42:06] *** Joins: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d)
[20:42:54] *** Joins: momomo (~momomo@user/momomo)
[20:47:23] <tabakhase> wez if you can get away with multistage, id prefeer that...  --- compile code = multistage and COPY --from... ||| but for the example of "install a .deb" file the new builders have methods to NOT let this deb land in the image (buildtime ssh mounts and such, never used em either so take with a grain of salt ;-))
[20:53:07] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[20:55:48] *** Quits: manin (~X@185.242.190.95) (Quit: Going offline, see ya! (www.adiirc.com))
[20:57:51] *** Joins: vinay-keshava (~vinay-kes@user/vinay-keshava)
[20:58:51] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c17a-6f80-b4b6-4b45.res6.spectrum.com)
[21:10:56] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:11:51] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[21:12:31] *** Quits: Anticom (~Anticom@87.190.49.75) (Quit: Leaving)
[21:17:40] *** Quits: memelover (~memelover@47.19.105.250) (Quit: Leaving)
[21:19:07] *** Quits: jamiejackson (~jamiejack@199.223.30.254) (Ping timeout: 240 seconds)
[21:20:50] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 250 seconds)
[21:28:06] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[21:28:32] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[21:30:19] *** Joins: beencubed (~beencubed@209.131.238.248)
[21:32:17] *** Quits: TomyWork (~TomyLobo@p200300e80f06af008d07b23d6b4077df.dip0.t-ipconnect.de) (Quit: Leaving)
[21:32:19] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[21:32:39] *** Quits: Forkk (forkk@2600:3c00::f03c:91ff:fe84:de4d) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[21:40:56] *** Quits: wibe (~wibe@213.159.81.4) (Quit: WeeChat 3.2)
[21:45:52] *** Quits: jochum (~jochum@user/jochum) (Ping timeout: 245 seconds)
[21:46:41] *** Joins: jochum (~jochum@user/jochum)
[21:47:23] *** Joins: codebam (~codebam@user/codebam)
[21:53:26] *** Quits: vinay-keshava (~vinay-kes@user/vinay-keshava) (Quit: Client closed)
[21:56:40] *** Quits: agowa338 (~agowa338@p200300fb0f1a8c004181e370fcc73c94.dip0.t-ipconnect.de) (Quit: Leaving)
[22:00:20] *** Quits: rubick (~rc@user/rubick) (Remote host closed the connection)
[22:06:38] *** Joins: keypushe- (keypusher@user/keypusher)
[22:06:40] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 240 seconds)
[22:07:12] *** Quits: lithium (~lithium@user/lithium) (Ping timeout: 250 seconds)
[22:09:33] *** keypushe- is now known as keypusher
[22:10:11] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[22:15:20] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[22:16:05] *** Joins: pycurious (~Adium@user/pycurious)
[22:17:56] *** neshpion is now known as sir_neshpion
[22:19:17] *** Joins: theoceaniscool (~theoceani@213.94.16.93)
[22:23:35] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[22:23:46] *** Quits: mutandis (~mut@c-73-129-211-144.hsd1.va.comcast.net) (Quit: zzzz)
[22:26:52] *** Joins: thiras (~thiras@user/thiras)
[22:27:06] *** Quits: acid (~acid@user/acid) (Remote host closed the connection)
[22:31:09] *** Joins: vidbina (~vid@dynamic-078-055-069-175.78.55.pool.telefonica.de)
[22:31:35] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 250 seconds)
[22:38:11] *** sir_neshpion is now known as neshpion
[22:49:01] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[22:53:34] *** Quits: vidbina (~vid@dynamic-078-055-069-175.78.55.pool.telefonica.de) (Ping timeout: 250 seconds)
[23:15:26] *** Quits: rsx (~dummy@ppp-188-174-128-193.dynamic.mnet-online.de) (Quit: rsx)
[23:17:24] *** Quits: Batzy (~Batzy@user/batzy) (Ping timeout: 250 seconds)
[23:23:00] *** Joins: Batzy (~Batzy@user/batzy)
[23:24:07] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[23:25:16] *** Joins: CombatVet (~c4@user/combatvet)
[23:28:40] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 250 seconds)
[23:30:05] *** Quits: mei (~mei@user/mei) (Ping timeout: 250 seconds)
[23:31:55] *** Quits: Activ8 (~ac453663@user/aab/x-3846634) (Quit: The Lounge - https://thelounge.chat)
[23:32:41] *** Joins: Activ8 (~58613918@user/aab/x-3846634)
[23:39:38] *** Joins: molt (~molt@79.140.150.225)
[23:44:12] *** Quits: lemonzest (~lemonzest@user/lemonzest) (Quit: Quitting)
[23:45:58] *** luvalon1 is now known as luva9497
[23:46:17] *** luva9497 is now known as luva
[23:47:41] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[23:48:07] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[23:53:39] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
