[00:00:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:00:53] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[00:00:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:00:56] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 252 seconds)
[00:02:04] *** Joins: zepolen_ (~zepolen@2a02:587:8608:c7cb:a02f:4643:857a:bfa0)
[00:03:24] <pycurious> in tornado, if i http_server.bind() to multiple ports, http_server.start(num_processes=x) - what should x be?
[00:04:05] *** Joins: softwarewolf (~software@user/softwarewolf)
[00:04:07] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[00:04:07] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[00:04:52] *** Quits: zepolen (~zepolen@2a02:587:8608:c7cb:506c:d13:492a:2835) (Ping timeout: 268 seconds)
[00:05:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:06:08] *** Joins: lastshell (~lastshell@user/lastshell)
[00:06:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:07:56] <aphysically> it turned out rich wasn't thread safe with live displays
[00:08:03] <aphysically> which explains a bit I guess
[00:08:04] *** Quits: magla (~gelignite@55d4bce1.access.ecotel.net) (Quit: Stay safe!)
[00:08:08] <aphysically> not sure how to workaround it though
[00:08:31] <aphysically> it's hard to monkeypatch the race condition with a lock because of where it is
[00:11:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:11:55] *** Joins: wyclif (~wyclif@user/wyclif)
[00:13:33] *** Joins: Celeo (~Celeo@user/celeo)
[00:14:01] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[00:14:20] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[00:15:45] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[00:15:53] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[00:16:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:17:24] *** Joins: stevea (~stevea@user/stevea)
[00:17:26] *** Joins: wyclif (~wyclif@user/wyclif)
[00:17:27] *** Quits: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net) (Quit: Bridge terminating on SIGTERM)
[00:17:36] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[00:17:42] *** Joins: portalrat_ (~portalrat@user/portalrat)
[00:18:14] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[00:18:15] *** Joins: Pickchea (~private@user/pickchea)
[00:20:01] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[00:20:10] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 252 seconds)
[00:21:41] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:21:49] *** Joins: p-i-_ (~Ohmu@223.206.71.80)
[00:22:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:22:33] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[00:22:56] *** Quits: ph88 (~ph88@ip5f5af6fd.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[00:22:56] *** Joins: wyclif (~wyclif@user/wyclif)
[00:23:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:24:34] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6844-6dda-c97d-34cb.res6.spectrum.com) (Read error: Connection reset by peer)
[00:24:49] *** Leonarbro_ is now known as Leonarbro
[00:24:58] *** Quits: p-i- (~Ohmu@223.206.71.80) (Ping timeout: 252 seconds)
[00:25:12] *** Quits: BinarySavior (~BinarySav@user/binarysavior) (Changing host)
[00:25:12] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[00:25:18] *** Quits: emf (~emf@2620:10d:c090:400::5:113f) (Quit: emf)
[00:27:27] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[00:27:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:28:27] *** Joins: wyclif (~wyclif@user/wyclif)
[00:29:29] *** A_Dragon is now known as Awoobis
[00:32:27] *** Joins: emf (~emf@163.114.132.1)
[00:33:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:33:57] *** Joins: wyclif (~wyclif@user/wyclif)
[00:35:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:36:10] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:36:28] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:37:13] *** Joins: fikran (~fikran@user/fikran)
[00:38:00] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[00:38:38] *** Joins: srhm (~srhm@user/srhm)
[00:38:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:38:48] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[00:39:07] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:39:21] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:f0a1:150f:f8e0:b6c0)
[00:39:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:43:07] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 252 seconds)
[00:44:00] *** Quits: _xor (~xor@74.215.232.67) (Read error: Connection reset by peer)
[00:44:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:44:49] *** Quits: stevea (~stevea@user/stevea) (Quit: Either I or my computer has gone to sleep. ZZZzzz…)
[00:44:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:44:58] *** Joins: wyclif (~wyclif@user/wyclif)
[00:45:47] *** Quits: strobelight (~quassel@c-69-180-7-202.hsd1.ga.comcast.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:46:12] *** Lord_of_Life_ is now known as Lord_of_Life
[00:46:49] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:46:56] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 246 seconds)
[00:47:55] *** Joins: _xor (~xor@74.215.232.67)
[00:48:16] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[00:48:58] *** Quits: tspng (~tspng@2a02:168:a1a1:1:8e6:3aef:f9bf:ff0c) (Remote host closed the connection)
[00:49:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:50:11] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[00:50:30] *** Quits: grooverman (~grooverma@177.189.91.225) (Read error: Connection reset by peer)
[00:50:51] *** TheRoeyening is now known as RoeyNuYalla
[00:51:05] *** RoeyNuYalla is now known as RoeyNuYallaKadim
[00:51:18] *** RoeyNuYallaKadim is now known as RoeyNuYalaKadima
[00:52:04] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 252 seconds)
[00:52:36] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:53:22] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:54:03] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[00:54:07] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[00:54:32] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:54:46] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[00:55:43] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[00:56:18] *** Joins: grooverman (~grooverma@177.102.119.40)
[00:57:25] *** Quits: Tas-sos (~Tas-sos@78-27-110.adsl.cyta.gr) (Ping timeout: 252 seconds)
[00:57:42] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[00:57:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:58:10] *** Joins: vimart (~vimart@185.69.144.102)
[00:58:45] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[00:59:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[01:00:04] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:00:35] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:00:44] *** Joins: tspng (~tspng@2a02:168:a1a1:1:5d06:812e:7d5e:8ade)
[01:00:50] *** Quits: eyepeetee (~aa@user/eyepeetee) (Ping timeout: 252 seconds)
[01:01:15] *** Joins: ph88 (~ph88@ip5f5af6fd.dynamic.kabel-deutschland.de)
[01:01:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:02:26] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[01:03:05] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[01:05:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:05:30] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:05:58] *** Joins: wyclif (~wyclif@user/wyclif)
[01:07:06] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:10:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:10:58] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Client Quit)
[01:11:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:11:31] *** Joins: wyclif (~wyclif@user/wyclif)
[01:14:24] *** Quits: upsala (~zcb@185.213.155.160) (Read error: Connection reset by peer)
[01:14:53] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[01:16:03] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[01:16:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:17:01] *** Joins: wyclif (~wyclif@user/wyclif)
[01:18:36] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:19:37] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[01:21:02] *** Quits: grooverman (~grooverma@177.102.119.40) (Ping timeout: 260 seconds)
[01:21:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:21:58] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:22:30] *** Joins: wyclif (~wyclif@user/wyclif)
[01:22:43] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[01:22:50] <jeho> stewie925, how goes it
[01:23:40] *** Joins: zeden (~zeden@user/zeden)
[01:23:56] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[01:24:29] *** Joins: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com)
[01:24:53] <stewie925> hey Jeho
[01:25:06] <stewie925> all is well, how about you
[01:25:17] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:25:54] *** Quits: Narrat (~omnius@p200300df5f13e7a606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:26:09] *** Quits: Akuli (~Akuli@82-203-162-67.bb.dnainternet.fi) (Quit: Leaving)
[01:28:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:28:16] *** Quits: junktext (~junktext@109.201.152.179) (Ping timeout: 252 seconds)
[01:28:28] <madprops> I'm confused about if doing a series of sync calls inside an async function would block the program
[01:28:46] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:3b86:b596:c2f2:bce3) (Ping timeout: 265 seconds)
[01:29:13] <bjs> madprops: yes it would,  why are you confused?
[01:29:18] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:36] *** Joins: nomic2 (~nomic@185.192.69.207)
[01:29:49] <madprops> because when I wait for the promise to complete, it kinda seems like im delegating something
[01:30:02] <bjs> madprops: what do you mean?
[01:30:04] <madprops> like the async fn does it 's own thing in some kind of thread
[01:30:21] <bjs> madprops: when you say "wait for", do you mean you `await` something?
[01:30:31] <madprops> well using .then
[01:30:37] <madprops> this is on js btw
[01:30:46] <madprops> but could be similar
[01:30:55] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[01:30:57] <bjs> madprops: I mean this is #python , we can answer Python questions :P
[01:31:20] <RoeyNuYalaKadima> ^_^
[01:31:24] <RoeyNuYalaKadima> <3
[01:31:27] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:32:52] <RoeyNuYalaKadima> I noticed that a whole lot of folks in this channel are also in ##security.  What is it about Python that encourages folks to dabble in security?
[01:32:55] <RoeyNuYalaKadima> or is it the other way around
[01:33:05] <RoeyNuYalaKadima> that they go to Python because it's an easy way to manipulate packets
[01:33:39] <RoeyNuYalaKadima> also, people here like anime and videogames
[01:33:43] <bjs> RoeyNuYalaKadima: also note that this channel is very large, so it's more likely to find people from a large programming channel in other channels than another one
[01:33:52] <RoeyNuYalaKadima> yeah, for sure
[01:33:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:34:25] <RoeyNuYalaKadima> but like, a *lot* of people here are also in ##security.
[01:34:35] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:34:50] *** Joins: wyclif (~wyclif@user/wyclif)
[01:34:52] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[01:35:19] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[01:36:07] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[01:39:20] <nedbat> RoeyNuYalaKadima: i don't know what about Python would make it more security-related than other languages
[01:39:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:39:49] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:39:56] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2.1)
[01:40:16] *** Quits: Strom- (strom@fedora/strom) ()
[01:40:19] <Mathisen> the scripting part, so easy to make simple automation with python. if you check hackthebox writeups for example 90% of em uses python for some kind of automation
[01:40:21] *** Joins: wyclif (~wyclif@user/wyclif)
[01:40:28] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[01:41:04] <Mathisen> or enumeration
[01:41:52] *** Joins: Strom (strom@fedora/strom)
[01:41:58] *** Joins: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941)
[01:42:14] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[01:43:25] *** Quits: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941) (Client Quit)
[01:43:42] *** Joins: SuperLag (~akulbe@user/superlag)
[01:44:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:45:51] *** Joins: wyclif (~wyclif@user/wyclif)
[01:47:33] *** seednode9 is now known as seednode
[01:47:50] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:48:48] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[01:49:36] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[01:49:42] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[01:49:56] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:52:31] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[01:52:50] <RoeyNuYalaKadima> <nedbat> RoeyNuYalaKadima: i don't know what about Python would make it more security-related than other languages <- less time spent mucking around with dumb stuff than in C or C++
[01:54:18] *** Quits: nomic2 (~nomic@185.192.69.207) (Quit: Leaving)
[01:54:29] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[01:54:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:54:52] *** Joins: BadKarma (~BadKarma@user/badkarma)
[01:55:28] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 268 seconds)
[01:56:45] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 250 seconds)
[01:59:16] *** Joins: trace987 (~trace@95.90.106.112)
[02:00:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:01:00] *** Joins: wyclif (~wyclif@user/wyclif)
[02:03:19] *** Quits: RoeyNuYalaKadima (~Roey@user/Roey) (Quit: Client exiting)
[02:04:17] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[02:05:04] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[02:05:32] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[02:07:00] <tar_xvf> also, having larger standard libraries that have been developed over decades will be more resilient to exploits, compared to starting from scratch, especially if you are not so experienced
[02:07:46] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[02:08:33] *** Quits: ^-^hi (~nikw@user/-hi/x-1729478) (Ping timeout: 250 seconds)
[02:10:11] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 252 seconds)
[02:12:39] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[02:13:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:13:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:15:07] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 252 seconds)
[02:17:10] *** Quits: demirok (~bell@user/demirok) (Ping timeout: 252 seconds)
[02:17:13] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:18:26] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[02:18:38] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:18:39] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:21:30] *** Joins: sertsa (~sertsa@209.140.9.160)
[02:21:50] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[02:25:32] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:26:48] *** Joins: odoood (odoood@gateway/vpn/protonvpn/odoood)
[02:26:54] *** Joins: y1n (~y1n@91.141.77.217.wireless.dyn.drei.com)
[02:27:44] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[02:27:57] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[02:28:37] *** Quits: emf (~emf@163.114.132.1) (Quit: emf)
[02:28:40] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[02:31:04] *** Joins: teru2 (~teru@133.3.201.195)
[02:31:06] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[02:31:28] *** Quits: odoood (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[02:31:36] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:33:09] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::2)
[02:33:42] *** Quits: brelod (~me@90.244.150.142) (Quit: Lost terminal)
[02:34:51] *** Quits: vimart (~vimart@185.69.144.102) (Quit: WeeChat 2.8)
[02:36:01] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[02:36:51] *** Joins: grooverman (~grooverma@177.95.12.14)
[02:37:43] *** Quits: teru2 (~teru@133.3.201.195) (Quit: Client closed)
[02:38:12] *** Joins: teru (~teru@133.3.201.195)
[02:38:14] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[02:38:49] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[02:39:06] *** Joins: eem (~eem@user/eem)
[02:40:02] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[02:40:43] <pycurious> In tornado, I 've. a 7 second difference between tornado DEBUG:asyncio:Using selector: EpollSelector — till I can service a https request -> Starting new HTTPS connection 443 — any ideas on how to debug this time? What could make tornado take 7 seconds from the time I run IOLoop.start() till the rest apis start sending data back?
[02:41:25] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::2) (Ping timeout: 252 seconds)
[02:42:16] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:42:54] *** Quits: tspng (~tspng@2a02:168:a1a1:1:5d06:812e:7d5e:8ade) (Quit: Leaving, bye!)
[02:44:14] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 252 seconds)
[02:44:24] <Pilate> you could profile it and find out?
[02:44:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:44:47] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:44:52] <pycurious> Pilate: how do i profile that particular line in the webserver? tornado.ioloop.IOLoop.current().start() ?
[02:45:14] <Pilate> well profile the whole thing and just stop it once its running, then look at what it spent its warmup time doing
[02:45:40] <pycurious> Pilate: that is an asyncio event loop.
[02:45:47] <Pilate> and?
[02:45:58] <Pilate> cprofile will still tell you what it was doing
[02:46:26] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (Ping timeout: 268 seconds)
[02:46:33] *** Joins: fikran (~fikran@user/fikran)
[02:46:36] *** Joins: Wulf (~Wulf@user/wulf)
[02:47:02] <pycurious> Pilate: that is an infinite loop - how do I stop the profiler ? when?
[02:47:46] <Pilate> i cant tell you how to do basic things like stop a task, it will depend on how youre running it
[02:48:13] *** Joins: CodePoint (~CodePoint@194.110.112.10)
[02:48:24] <Pilate> add profile code, start a task, wait for task to start getting requests, stop task, look at profile dump
[02:49:26] *** Joins: tlaxkit (~hexchat@170.253.34.130)
[02:50:17] *** Quits: trace987 (~trace@95.90.106.112) (Ping timeout: 252 seconds)
[02:51:13] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:51:35] *** Quits: eem (~eem@user/eem) (Quit: WeeChat 3.3)
[02:51:50] *** Joins: semeion (~semeion@user/semeion)
[02:52:55] <pycurious> Pilate: If I exit from inside tornado which is running multiple processes, it will only exit once and restart
[02:53:14] <pycurious> Pilate: If I try to kill it from outside, I'll have to find all processes related and kill it in which case, the profiler is dead too?
[02:53:41] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::2)
[02:54:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:54:23] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Remote host closed the connection)
[02:56:15] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[02:57:08] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[02:58:08] *** Joins: r3m (~launch@user/r3m)
[02:58:14] *** Quits: k_sze (~k_sze@mail2.kalunite.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:58:32] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:58:43] *** Joins: k_sze (~k_sze@mail2.kalunite.net)
[02:58:49] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[02:59:31] *** Quits: AutomatedTester (uid395371@selenium/developer/AutomatedTester) (Quit: Connection closed for inactivity)
[03:05:58] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[03:06:20] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:09:24] <aphysically> not sure if this is a typeshed error? seems to think the rowcount parameter of sqlite3 cursor is type Any
[03:09:50] <aphysically> which makes mypy complain when I return its comparison to an int >.>
[03:10:15] <aphysically> I'm actually not sure why it makes mypy complain either
[03:10:34] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[03:10:36] <aphysically> why would "anytypeobject == 1" be of type Any? wouldn't that always be a bool?
[03:10:40] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::2) (Ping timeout: 252 seconds)
[03:11:07] <aphysically> https://bpa.st/56KA right now I just cast it to int
[03:11:30] <aphysically> (to stop mypy complaining that I'm returning type Any from function declared to return bool)
[03:11:41] <aphysically> but I'm not certain I don't just have a misunderstanding here
[03:13:16] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[03:13:38] <aphysically> mypy doesn't complain if I do True if cur.rowcount == 1 else False but I'm pretty sure one of my other linters will tell me it can be simplified
[03:13:41] *** Quits: BadKarma (~BadKarma@user/badkarma) (Quit: leaving)
[03:14:20] <aphysically> indeed, both pylint and flake8 complain that I can simplify it
[03:14:45] <aphysically> so maybe this is really just a mypy *and* a typeshed bug (mypy for not figuring it out, typeshed for not having proper typing for the object)
[03:14:49] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[03:14:58] <aphysically> but the latter isn't really a bug just a missing feature I guess
[03:15:02] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:15:04] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Quit: Connection closed)
[03:16:56] <aphysically> is there some way "return cur.rowcount == 1" is different from "return True if cur.rowcount == 1 else False" that I don't understand but mypy does?
[03:17:43] <aphysically> since typeshed has this object as any I can probably make a playground for it without needing to put in a bunch of sqlite3 boilerplate, one sec
[03:18:57] *** Joins: Azin (~Azin@user/azin)
[03:19:18] <aphysically> yeah, here's a playground of the situation: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=f7f2b912ad3b336cde86c6a356877f6c
[03:19:44] <aphysically> changing it to return True if a == 1 else False works fine
[03:19:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:21:04] *** Joins: dub_a (~dub_a@193.138.218.226)
[03:21:23] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:23:26] *** Quits: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com) (Ping timeout: 268 seconds)
[03:23:27] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:24:01] *** Quits: sertsa (~sertsa@209.140.9.160) (Quit: Leaving)
[03:24:15] *** Quits: dub_a (~dub_a@193.138.218.226) (Client Quit)
[03:25:35] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[03:25:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[03:27:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[03:28:16] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[03:30:34] *** Quits: teru (~teru@133.3.201.195) (Ping timeout: 256 seconds)
[03:30:44] <bjs> aphysically: did you really mean Any and not object
[03:30:54] *** Joins: emf (~emf@2620:10d:c090:400::5:113f)
[03:31:27] <aphysically> yes, this is a proxy for a rowcount property of an sqlite3 module cursor object, which mypy reveals the type of as "Any"
[03:31:30] <aphysically> so that's what I'm working with
[03:32:01] <bjs> aphysically: `Any` basically means "disable typechecking"
[03:32:17] <bjs> mypy --strict checks you don't try return Any from a function with annotations (e.g. one you say you want to typecheck)
[03:32:41] <bjs> in a gradually typed system, `Any` really means "allow anything" not "accepts any type"
[03:33:39] <aphysically> but why is AnyObject == 1 still Any
[03:33:58] <aphysically> in what case is that different from True if AnyObject == 1 else False
[03:34:12] <bjs> aphysically: well for a start, you can make your own type with your own __eq__ of course
[03:34:42] <aphysically> oh, I assumed __eq__ had to return a bool even if you implemented it yourself
[03:34:54] <bjs> aphysically: but more importantly here,  Any is contagious
[03:35:13] <aphysically> I guess if __eq__ can be made to return things that aren't bools then mypy is correct to make it Any
[03:35:44] <bjs> aphysically: mypy is correct to make it any because it's a binary operator where one of the operands is Any.  There really is nothing mypy can do except infer Any too
[03:35:58] <bjs> again Any does not mean "any object" it means "i give up"
[03:36:10] <aphysically> bjs: yeah, so ideally this would be fixed to not be Any in whatever is calling it Any (the typeshed for the stdlib I guess)
[03:36:32] <bjs> aphysically: well most of the time Any comes because it's *not* type annotated at all
[03:36:45] *** Joins: TonyStone (~TonyStone@cpe-74-76-58-56.nycap.res.rr.com)
[03:36:53] <SnoopJ> Anybody happen to know a trick to get SWIG to wrap a class that derives from a templated base? The header I'm wrapping is like this: https://bpa.st/STDQ
[03:36:54] <bjs> but I thought all the stdlib stuff has decent type hints, I'm guessing here is that it's the data coming from the database or something and it doesn't know what form it takes
[03:37:32] <aphysically> bjs: mmm, it's this: https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount
[03:37:33] <SnoopJ> I've tried a couple of different things, but the only solutions I see are to make the derived class itself a template and use %template, or to split the derived class into a separate header that is %include'd after the %template for the base class.
[03:37:43] *** Quits: coreyl (~cl@45-27-193-254.lightspeed.mssnks.sbcglobal.net) (Read error: Connection reset by peer)
[03:37:47] <aphysically> the docs don't suggest it can be anything other than an int
[03:39:30] <bjs> aphysically: it probably means the typeshed either doesn't say what type it is, or that they've deliberately put Any (for some reason?)
[03:39:38] *** Joins: thurs806 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[03:39:38] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:39:39] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[03:39:52] *** Joins: Betal (~Betal@user/betal)
[03:40:00] <aphysically> yeah who knows
[03:40:07] <bjs> aphysically: I'm guessing, it's just incomplete :)
[03:40:19] <bjs> aphysically: you can probably typing.cast() it to an int
[03:40:29] <aphysically> indeed that's what I'm doing right now
[03:40:35] <bjs> (or `assert isinstance(..., int)`)
[03:40:46] *** Quits: UnnamedBeer (~UnnamedBe@117.red-83-46-8.dynamicip.rima-tde.net) (Ping timeout: 252 seconds)
[03:40:46] <aphysically> but I wanted to revisit the issue to make sure I'm not doing something wrong
[03:40:48] <bjs> but it's ugly when you have to change the code to fight the types :(
[03:41:05] <aphysically> I've actually managed to avoid almost all the asserts in my code now
[03:41:17] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[03:41:34] <aphysically> I only have one or two where I haven't fully typed a complicated json query yet
[03:42:28] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[03:45:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:46:51] *** Joins: wyclif (~wyclif@user/wyclif)
[03:48:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:48:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:49:01] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[03:49:55] *** Joins: korg815 (~korg815@user/korg815)
[03:49:57] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-184.citykom.de) (Ping timeout: 268 seconds)
[03:51:45] *** Joins: flokuehn (~flokuehn@i5e86b305.versanet.de)
[03:53:50] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:189f:52c6:5bfd:606d) (Ping timeout: 246 seconds)
[03:56:04] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7479:b9dd:8a01:6621) (Ping timeout: 256 seconds)
[03:58:14] *** Joins: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de)
[03:59:39] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[04:00:15] *** Joins: trace987 (~trace@95.90.106.112)
[04:03:28] *** Quits: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[04:04:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[04:04:50] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[04:05:17] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[04:06:06] *** Quits: ph88 (~ph88@ip5f5af6fd.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[04:06:31] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c:1cbc:efbb:c578:a980)
[04:06:39] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[04:08:07] *** portalrat_ is now known as portalrat
[04:08:59] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[04:16:54] <aphysically> SnoopJ: I kinda want to learn rust to embed in a python app or something, or at least find a compelling reason to embed something in a python app just so I can learn how to do it
[04:17:01] <aphysically> but I don't actually have any good reason to do that
[04:17:31] <aphysically> I guess another thing I could look for is something to use that only has a C or C++ API
[04:17:37] <aphysically> and learn it that way
[04:18:05] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (Ping timeout: 264 seconds)
[04:18:35] <aphysically> I'm already relatively familiar with C++, but I guess I'd rather not be
[04:19:36] <aphysically> I think it's probably mostly that I don't want to revisit the horrors of using ROOT
[04:19:43] *** Quits: greknod2 (~grek@120.88.171.98) (Quit: -)
[04:20:02] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:20:42] *** Joins: srhm (~srhm@user/srhm)
[04:20:44] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[04:20:59] *** Joins: greknod2 (~grek@120.88.171.98)
[04:21:10] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:21:14] *** Joins: rannnn8888 (~rannnn888@bzq-109-65-168-133.red.bezeqint.net)
[04:22:47] *** Ellenor is now known as Reinhilde
[04:23:18] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:24:05] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:28:44] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[04:28:59] *** Quits: Azin (~Azin@user/azin) (Remote host closed the connection)
[04:30:12] *** Joins: Azin (~Azin@user/azin)
[04:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[04:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:31:08] <SnoopJ> ROOT is at least based on cling now, CINT has been retired
[04:31:21] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[04:31:59] <SnoopJ> Cython is a nice choice for something greenfield that is still mostly-Python. In my case, these are Python bindings to an existing product, and unfortunately the answer to "let's use something with better support for the C++ we write" has been a very hard "no"
[04:32:19] <meejah> what's ROOT?
[04:32:21] * SnoopJ seems to find new exciting failure modes every time he takes a SWIG ticket
[04:32:48] <SnoopJ> meejah, analysis framework used very frequently in high-energy physics: https://root.cern/
[04:32:59] <SnoopJ> think "interpreted C++"
[04:33:47] <meejah> gross ;)
[04:34:53] *** Joins: vlm (~vlm@user/vlm)
[04:35:11] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[04:38:22] *** Quits: CodePoint (~CodePoint@194.110.112.10) (Quit: CodePoint)
[04:43:03] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[04:44:25] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[04:44:28] *** Joins: ExeciN (~ExeciN@user/nicexe)
[04:44:31] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[04:46:56] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 252 seconds)
[04:48:22] *** Quits: _xor (~xor@74.215.232.67) (Quit: WeeChat 3.2.1)
[04:48:53] *** Joins: _xor (~xor@74.215.232.67)
[04:49:04] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:49:12] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:49:20] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:50:02] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[04:50:51] *** Joins: zaquest (~notzaques@5.128.210.178)
[04:50:56] *** Joins: califax- (~califax@user/califx)
[04:51:32] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:53:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[04:53:13] *** califax- is now known as califax
[04:53:46] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:53:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:54:02] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 246 seconds)
[04:54:09] *** brabrax_ is now known as brabrax
[04:55:29] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Read error: Connection reset by peer)
[04:55:53] *** Joins: fikran (~fikran@user/fikran)
[04:58:14] *** Joins: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de)
[04:59:26] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:59:31] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:59:39] *** Quits: trace987 (~trace@95.90.106.112) (Read error: Connection reset by peer)
[05:00:04] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[05:01:15] *** Joins: trace987 (~trace@95.90.106.112)
[05:01:34] *** Joins: iflema (~ian@user/iflema)
[05:02:25] *** Quits: tlaxkit (~hexchat@170.253.34.130) (Quit: Leaving)
[05:04:22] *** Quits: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[05:04:39] <aphysically> it's actually grosser than it sounds
[05:04:57] * aphysically debugging https://github.com/willmcgugan/rich/issues/1530
[05:06:15] <meejah> a non-trivial portion of my brain (used) to know c++ .. i'm in #python for a reason ;)
[05:06:48] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[05:07:03] <meejah> mmm, threads. I'm also in #twisted for reasons :)
[05:11:03] <aphysically> I can't even find reports of this going back, but a lot of people claim to use rich in threaded environments
[05:11:24] <aphysically> maybe I'm the only one to be crazy enough to be printing lots of stuff while live displays are closing, or perhaps it's a regression
[05:11:31] <aphysically> I guess I could grab some old versions with pip and test
[05:13:43] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[05:14:19] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:7479:b9dd:8a01:6621)
[05:14:27] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[05:14:44] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[05:17:50] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:18:01] <aphysically> meejah: I feel like I should at least learn enough about the stdlib before I jump ship wrt threads
[05:18:11] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:18:31] <aphysically> I've done a number of sorta involved event signalling and futures stuff, but I haven't done async/await yet
[05:18:33] *** Joins: nomic (~nomic@185.192.69.207)
[05:18:47] <aphysically> unfortunately I really need to, even if it's just so I can comfortably understand others' code
[05:18:58] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[05:19:37] <meejah> "async def"/"await" are bascially just syntax-sugar. any event-based/async ideas translate "fairly well" to the different python options
[05:19:37] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[05:21:09] <aphysically> I was reading something online where someone was claiming python async/await is basically outdated and external libraries like curio/trio just do it better with the benefit of hindsight, or something or another
[05:21:46] <aphysically> which didn't inspire confidence to get started on learning async/await for the day anyway (:
[05:21:51] <aphysically> soon
[05:23:04] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[05:23:40] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 252 seconds)
[05:24:17] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[05:24:33] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:25:17] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[05:25:19] <aphysically> I sorta need to profile some of this console printing stuff :s
[05:25:28] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[05:25:53] <aphysically> ffmpeg outputs far too much debugging info in very verbose modes (dozens of independent lines per frame of audio/video/subtitles)
[05:26:06] *** Joins: ExeciN (~ExeciN@user/nicexe)
[05:26:15] <aphysically> it's falling quite a bit behind so I probably need to batch the printing or something
[05:28:41] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[05:30:04] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[05:30:56] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[05:30:56] <aphysically> at least the falling behind isn't hanging the encode anymore, courtesy of queuehandler/listener
[05:31:02] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[05:31:25] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:32:24] *** Quits: jonaskabrink (~jonaskabr@mue-88-130-56-206.dsl.tropolys.de) (Ping timeout: 256 seconds)
[05:32:28] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:32:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[05:36:16] <aphysically> I found something in the docs about a fast path for dicts with string keys
[05:37:16] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:38:39] <aphysically> huh, I wonder why there isn't a fastpath for int
[05:39:36] *** Joins: grnman_ (~grnman@159.89.27.73)
[05:41:16] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[05:41:38] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 246 seconds)
[05:41:47] <nedbat> aphysically: a fast path for int keys? because they are used far far less than string keys
[05:42:16] <aphysically> yeah I guess, I was thinking enums in my head
[05:43:23] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:7479:b9dd:8a01:6621) (Quit: Client closed)
[05:46:18] *** Joins: yvehan (~yvehan@117.136.88.81)
[05:46:22] *** Joins: cdown (~cdown@163.114.131.1)
[05:46:47] *** Quits: yvehan (~yvehan@117.136.88.81) (Remote host closed the connection)
[05:48:16] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:a9d0:21c9:5b3a:cf72)
[05:48:27] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:49:10] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:50:07] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[05:54:08] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (WeeChat 3.2)
[05:55:26] *** Joins: SteveR (~SteveR@192.146.154.3)
[05:57:44] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 246 seconds)
[05:58:14] *** Joins: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de)
[05:58:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[05:59:23] *** Quits: trace987 (~trace@95.90.106.112) (Read error: Connection reset by peer)
[06:01:15] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[06:03:46] *** Quits: tracey (~trace@dynamic-002-247-250-212.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[06:06:24] *** Joins: gggp (~textual@111.63.14.119)
[06:08:33] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[06:09:26] *** Joins: tg (~tg@rockylinux/infra/tg)
[06:10:41] <CrtxReavr> hey nedbat
[06:13:49] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:13:50] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:14:57] <malvin> tips a tricks appreciated. got an xml download of the current wikipedia. plan is to make it so people can click a sentence to delete it and see whats the last sentence. id like to know is there any benefit to using mongo/motor and tornado compared to django/postgres. also i know there will be a certain degree of trolling but im planning to do one captcha at the beginning and save a cookie (no
[06:14:58] <malvin> login) so problems with that?
[06:15:16] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:15:38] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:16:29] <energizer> malvin: there are some benefits to using mongo but they are not worth the downsides in most cases
[06:16:39] <malvin> what are the downsides?
[06:17:21] <malvin> just fyi im planning to save the deletes rather than delete from the imported db so i can undo obvious spam, but im not sure i should do that either
[06:17:59] <energizer> there are a bunch of properties you might want in a database and mongo doesn't have very many of them
[06:18:15] <malvin> sounds a little vague?
[06:18:23] <malvin> what properties?
[06:18:43] <energizer> https://en.wikipedia.org/wiki/ACID
[06:18:46] <malvin> sorry i recongise your effort just to stop and talk to me, thanks
[06:20:38] <malvin> "However, MongoDB supports multi-document ACID transactions for the use cases that require them.
[06:20:51] <nedbat> CrtxReavr: hey
[06:21:57] <nedbat> malvin: what did you mean by "see whats the last sentence"?
[06:22:15] <malvin> like the last one left in a race to delete wikipedia :P
[06:22:31] <malvin> i registered deletewikipedia.com :P
[06:23:01] <malvin> i thought its a bit of an interesting idea to go backwards and see whats left
[06:23:02] <energizer> malvin: mongo has been incrementally adding ACID features over the years but "multi-document" is their marketingspeak way of saying "not multi-collection"
[06:23:03] *** Quits: veegee_ (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[06:23:12] *** Quits: Azin (~Azin@user/azin) (Remote host closed the connection)
[06:23:20] <nedbat> malvin: it's an interesting challenge to re-display wikipedia from its XML download
[06:23:59] <malvin> i'll probably just go through it and import it into sql writing the commands by hand
[06:25:28] <malvin> energizer: ok im learning :) and i want to know what this means. but in a usecase where im running multiple instances of the app will i need this if all i do is add new DeletedTable entries?
[06:25:29] <energizer> also "for the use cases that require them" probably means something sinister but i don't know what
[06:26:06] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[06:26:07] <malvin> ok so one vote for sql
[06:27:00] <energizer> malvin: if you only have one table, you won't need multi-table features. usually databases have more than one table tho
[06:27:07] <malvin> would you use tornado/lightweight app or will i need stuff from django
[06:27:24] <energizer> i wouldn't use tornado
[06:27:37] <malvin> energizer: well ill have all the wiki tables but they will not change
[06:27:42] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[06:28:03] <malvin> i could pull from the multistream in real time, im guessing thats not recommended
[06:28:13] <energizer> i'd use django or starlette or pyramid
[06:28:38] <malvin> ok so why not tonado, i could sworn it supports the most users
[06:28:46] <malvin> efficient
[06:29:23] <malvin> vote for django sql ok :)
[06:29:33] <energizer> reddit was built on pyramid, instagram on django. they'll scale fine
[06:29:50] *** Joins: Vonter (~Vonter@user/vonter)
[06:29:52] <malvin> friendfeed was based on tornado i think
[06:30:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[06:30:32] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:30:50] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:30:56] *** Joins: wyclif (~wyclif@user/wyclif)
[06:31:02] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[06:31:04] *** Quits: adium (adium@user/adium) (Killed (NickServ (GHOST command used by adium55!~adium55@2804:14d:149a:8ad4:31b5:99c4:c7a3:6ed4)))
[06:31:09] <malvin> i only have experience with django and tonado and it is limited but id guess if i dont need the advanced features of django to use one that uses less memory per user?
[06:31:31] <energizer> i haven't measured
[06:31:35] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:32:10] <malvin> nedbat: do you want to vote?
[06:32:37] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[06:32:44] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:32:50] *** Joins: adium_ (adium@user/adium)
[06:32:55] <meejah> i used cyclone for a while, it was .. fine (cyclone was tornado minus the custom async stuff and put on top of twisted)
[06:33:27] <malvin> neat. does twisted have a py3 version?
[06:33:41] <malvin> going to look up stats brb
[06:33:49] *** Joins: Roey (~Roey@user/Roey)
[06:33:50] <meejah> malvin: yes. and async/await work too
[06:34:17] *** Joins: SteveR (~SteveR@192.146.154.3)
[06:34:37] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[06:34:58] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[06:35:06] <malvin> "Cyclone also addresses the C10K problem
[06:35:29] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[06:35:33] <malvin> i have not really learned about how to use async effectively
[06:35:41] *** Joins: Maikel (~Maikel@130.61.63.136)
[06:36:06] <malvin> neat shout though, thanks very much!
[06:36:07] *** adium_ is now known as adium
[06:36:21] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[06:38:39] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2.1)
[06:40:43] *** Quits: softwarewolf (~software@user/softwarewolf) (Quit: Quit)
[06:42:10] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[06:42:34] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:42:42] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[06:43:48] <meejah> hmm, i guess https://meejah.ca is still cyclone
[06:44:50] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:45:11] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[06:45:31] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[06:45:44] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[06:45:57] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Remote host closed the connection)
[06:46:22] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[06:47:46] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[06:47:52] *** Joins: lethu (~lethu@user/lethu)
[06:50:05] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[06:50:19] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[06:50:36] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:50:47] <malvin> cool
[06:51:03] <malvin> looks to be couple useful things there
[06:51:03] *** Quits: elena_re (~elena@31.173.85.129) (Read error: Connection reset by peer)
[06:52:58] <meejah> only real claim-to-fame is it serves pages directly out of cached Git blobs, so "publish" is "git push" (but, not uncommon these days)
[06:55:03] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[06:55:31] *** Joins: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83)
[06:55:51] *** Joins: jr_web_dev (~jr_web_de@ool-18bee068.dyn.optonline.net)
[06:56:11] *** Quits: rudrab (~rudrab@2402:e280:215f:228:82f5:71db:8757:da83) (Client Quit)
[06:56:27] <malvin> neat :)
[06:57:50] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[06:59:20] <jr_web_dev> So i basically want to create a script that generates html, css, js... basically a little web page... how can i quickly serve these dynamically created  webpages... this webpage is basically a table/report...  when a user the url in an email i generate.. it suppose to take them to this more detailed
[06:59:20] <jr_web_dev> webpage i am generating.. whatrs the best approac
[06:59:20] <jr_web_dev> h for this
[07:00:01] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[07:00:43] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[07:00:57] *** Joins: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:e5a5:5737:6a48:8bf8)
[07:01:01] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[07:01:08] <malvin> you need a mailserver?
[07:01:42] <jr_web_dev> i dont think i do.. i can send emails with no issues
[07:02:31] <malvin> ok so my advice would be go for a library where someones done it before
[07:02:35] <malvin> maybe like django
[07:03:07] <malvin> do you have the db structure?
[07:03:11] <jr_web_dev> do with django.. i can spit out my html,css.js folder structure and it will read it?
[07:03:18] <jr_web_dev> i dont think i need a database'66
[07:03:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[07:03:36] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[07:03:48] <jr_web_dev> just need to server a website... each time..
[07:04:34] <malvin> why create a script that creates html files and not just use a framework with templating?
[07:05:03] <jr_web_dev> so basically i think what i need to do is this.. i generate a folder structure which is basically the website.. and i spit this out onto a folder.. each folder should be a seperate website.. they are all the same just with different data in them... but over all just throw it on the server.. its
[07:05:03] <jr_web_dev> basically like a log
[07:05:05] <malvin> what generates the url
[07:05:13] *** Joins: fikran (~fikran@user/fikran)
[07:05:15] <BrenBarn> there are some Python libs for generating static HTML from templates and stuff
[07:05:45] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:05:51] *** Quits: ckdCreations (~ckdCreati@147.55.130.33) (Read error: Connection reset by peer)
[07:05:56] <BrenBarn> Pelican and Nikola are ones I heard of
[07:06:08] <malvin> i agree sorta what youre saying is like a templating notion
[07:06:09] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:06:13] <BrenBarn> I think there are a lot of them
[07:06:13] <jr_web_dev> hmmm.. and i can have a complex es6 site and it wont break with these?
[07:06:28] <malvin> yeah it wont break
[07:06:39] <BrenBarn> JS stuff shouldn't matter if it's all happening within the page
[07:07:08] *** Joins: tagus (~tagus@user/tagus)
[07:07:32] <jr_web_dev> hmm okay.. and so i can go back and forth and check out different versions like a log file type of thing.. like i said.. its just a report generated everytime , it gets saved, when someone clicks the url in the email they should see that log.. someone can have maybe like 4 to 5 emails with unique
[07:07:32] <jr_web_dev> links ina month
[07:07:47] <malvin> i think you'd benefit from a very quick 10min overview of making a site with a framework/ making an api if ur using javascript too
[07:08:50] <jr_web_dev> i know how to setup a site with nginx and apache but its too much work and i think id have to create it manually.. i think theres a way by using an internal httpd server in python or maybe nodejs but not sure i ahvent done this yet
[07:08:56] <malvin> so youd have a "view" where it runs when the page is loaded that pops all the details into the template placeholders
[07:09:22] <malvin> not if its public web
[07:09:33] <BrenBarn> I think the way these generators work is it's just a script that you run
[07:09:35] <malvin> you neeed a hardened server for that
[07:09:42] <BrenBarn> and you tell it where the templates and data are and it generates it
[07:10:07] <BrenBarn> so it shouldn't be hard to churn out different versions whenever you want
[07:10:17] <BrenBarn> I mean you'd have to manage that yourself
[07:10:20] <jr_web_dev> hmm you guys got like a link or something.. id like to use python if possible if not nodejs would be ok if its better
[07:10:30] <malvin> django tutorial
[07:10:46] <jr_web_dev> would flash work as well?
[07:10:47] <malvin> plus learn to to use djangorestframework for an spa
[07:10:51] <malvin> lol
[07:10:52] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[07:10:57] <BrenBarn> here's some info: https://www.fullstackpython.com/static-site-generator.html
[07:10:59] <jr_web_dev> buti mean flask
[07:11:05] <malvin> you waste my time talking about fash, i love i
[07:11:42] <jr_web_dev> flask
[07:11:53] <BrenBarn> flask isn't a static site generator
[07:11:56] <malvin> oh ok
[07:12:01] <jr_web_dev> ok so django has its own internal web server ?
[07:12:01] <malvin> it could be
[07:12:18] <malvin> django needs to be served through wsgi or something
[07:12:18] <jr_web_dev> ok
[07:12:27] <BrenBarn> django probably has a dev server like most frameworks do but I don't think you'd wanted to use it for a public-facing site
[07:12:40] <malvin> s/it could be/flask could be/
[07:12:56] <jr_web_dev> i was thinking of using a s3 bucket but not sure if an s3 bucket could server a webpage with javascript well
[07:13:04] <malvin> djangos server is for development and trusted users
[07:13:22] <jr_web_dev> ill try django and see how it can help
[07:13:28] <malvin> is that aws?
[07:13:38] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[07:13:38] <jr_web_dev> google cloud
[07:13:54] <jr_web_dev> i know if you put a .html file it will host a static site
[07:14:00] *** Joins: SteveR (~SteveR@192.146.154.3)
[07:14:02] <jr_web_dev> if you make it public
[07:14:06] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[07:14:14] <malvin> you can host django with gunicorn using one command
[07:14:42] <jr_web_dev> and with django  gunicorn you can leave the web server running 24/7? its stable?
[07:15:02] <BrenBarn> JS isn't really something that's going to make serving a webpage hard
[07:15:08] <BrenBarn> the whole point of JS is that it's client-side
[07:15:10] <malvin> thats the idea, but nothing is really 100% secure forever if you dont do the updates
[07:15:24] <jr_web_dev> BrenBarn right right
[07:15:32] <jr_web_dev> malvin true true
[07:15:40] <jr_web_dev> okay well ill look into django
[07:15:52] <malvin> js is client side makes not a lot of difference to the server until you use an api to update a number/graph
[07:15:53] <jr_web_dev> thanks dudes
[07:16:00] <tagus> what are you trying to do?
[07:16:02] <jr_web_dev> i see
[07:16:23] <malvin> thanks for saying thanks :)
[07:16:39] <jr_web_dev> i basically have a script that will generate a website.. html, css, and js.. like template... and everytime i generate i want to give it its own url and serve it
[07:16:58] <jr_web_dev> so when i run my python script it does all this automation tasks and in the end it generates a report that i can serve
[07:17:03] <malvin> you have this already? thats essentially what a web framework does
[07:17:22] <malvin> yeah look up django urls file
[07:17:28] <malvin> you hook that to your views
[07:17:39] <malvin> its seperated so different people can do different parts
[07:17:47] <malvin> and its all logical places somewhat
[07:18:10] <tagus> its sounds like you've made a framework
[07:18:12] <jr_web_dev> yeah my script is just calling a bunch of apis.. i get the results.. i generate a report out of that information... i send an email using another api.. but now i want to grab all this api response information and generate a website/url for each time i run the script and do all this automation work
[07:18:13] <jr_web_dev> and api calls and such
[07:19:17] <malvin> yeah i can see this is a fresh angle to it
[07:19:28] <jr_web_dev> so i basically got arrays of arrays and arrays of dictionaries with a bunch of information.. i want to spit that all out in a nice html page and show it to whoever has the link.. hey here the results of what you just did..
[07:19:41] <malvin> sidenote, if you dont want to run the script manualy you want cron
[07:19:51] <jr_web_dev> right right.. i want to use cron
[07:20:02] *** Joins: gcells (gcells@user/gcells)
[07:20:13] <tagus> and what are this pages you generate about?
[07:20:23] <jr_web_dev> only issue is that im stuck.. i have to download this excel spreadsheet from an email.. it doesnt come any other way.. and i have to read this excel and grab information.. theres no other way
[07:20:33] <malvin> you can have a url that generates a report and you can generate the users response on load
[07:20:47] <malvin> possibly
[07:21:08] <malvin> pyexcel or something might help
[07:21:38] <malvin> if it stays the same you might be able to load into memory in a sql db
[07:21:57] <tagus> you could use django rest framework and serve it with a little js
[07:22:07] <jr_web_dev> right i just need a way to spit out this html, js, css.. i might do it on one index.html file if the js does not get in the way.. and just server that index.html.. i was thinking of uploading to an s3 bucket and have the s3 bucket just do that... but im thinking maybe i can just host it on my web
[07:22:08] <jr_web_dev> server but idk how to do that.. with nginx u have to
[07:22:08] <jr_web_dev>  create a virtual host and give it url and such.. all manual work
[07:22:43] <malvin> so like cgi you make a python file and print("< the html>")
[07:23:02] <jr_web_dev> hmmm
[07:23:05] <malvin> still have to set up nginx
[07:23:15] <jr_web_dev> ah i see
[07:23:19] <malvin> how long does the processing take?
[07:23:28] <jr_web_dev> so overall nginx would have to be configured
[07:23:47] <jr_web_dev> ummm.. takes like 2 mins for the process to finish
[07:23:53] <malvin> good idea to be good at that, but you can host django like i said with gunicorn
[07:23:57] <jr_web_dev> depending of course
[07:24:03] <malvin> ok so youre going to need a task queue
[07:24:03] *** Quits: tagus (~tagus@user/tagus) (Quit: sleep)
[07:24:30] <jr_web_dev> i see
[07:24:42] <jr_web_dev> okay djnago with gunicorn ima go see ... a task queue?
[07:25:13] <malvin> sorry these are all things that might help but its a complicated problem im afraid
[07:25:34] <jr_web_dev> probably a s3 bucket seems so simple.. just upload it.. make it public and tahts it
[07:25:42] <malvin> you need to know in advance what each user needs to see before you send the email
[07:25:43] <jr_web_dev> well you dont even have to make it public if you just set it
[07:25:57] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[07:26:13] <malvin> yeah you can do all this manually, im helping you do that now
[07:26:16] <jr_web_dev> right malvin all thats done in the script
[07:26:27] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[07:27:03] <malvin> yes ok so it doesnt take 2 mins on load, when the user clicks you have the info from the generated report?
[07:27:12] <malvin> forget about the task queue if so
[07:27:41] <malvin> saved somewhere? like a db would be a common choice
[07:27:50] *** Joins: nergar (~Nergar@177.225.147.106)
[07:28:02] <malvin> i believe sqlite is installed by default and a little sql knowledge cant hurt etc
[07:29:04] *** Quits: y1n (~y1n@91.141.77.217.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[07:29:41] <pycurious> My tornado webserver ioloop.start() asyncio Epoll is taking 10 seconds to start. The profiler doesnt give me any meaningful things to debug. Any ideas what could be going wrong?
[07:30:31] <jr_web_dev> well no its basically a daemon.. no users... my script grabs an excel, read it and then updates another excel on onedrive and it just does this comparision and updating.. the one excel is in an email that i get every week.. i download it and then piont to it in python script.. based off some
[07:30:31] <jr_web_dev> information.. it will update and compare this excel with
[07:30:31] <jr_web_dev> the one onthe one drive.. once it updates.. i just send an email with those rows that got updated... i dont save it on a database.. its logged at this moment in an email.. but i want to generate a more complicated report using a webpage
[07:30:47] <malvin> pycurious: your code?
[07:31:00] <jr_web_dev> i cant share that lol
[07:31:11] <malvin> dw jr_web_dev i was talking to pycurious
[07:31:16] <jr_web_dev> oh sorry
[07:31:24] <malvin> no worries whatsoever
[07:31:27] <pycurious> malvin: Its a large project, and am not sure how to debug that line tornado.ioloop.IOLoop.current().start()
[07:31:45] <malvin> jr_web_dev: pm me if you wish
[07:32:16] <BrenBarn> I don't really get which part of this you're looking for a tool to do
[07:32:23] <malvin> yeah thats the one line that stood out to me as not being needed pycurious
[07:32:29] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Quit: Leaving)
[07:32:30] <BrenBarn> if your code already generates the web page, doesn't that already generate "the index.html and js" and all that?
[07:32:31] <malvin> obviously it is needed
[07:32:39] <BrenBarn> or what exactly is it that your code generates?
[07:32:43] *** Joins: JibStyle (~user@154.21.20.19)
[07:33:57] <jr_web_dev> well actually im not done with that part yet.. its coming along.... i will be basically generating a function that will return the whole <html>
[07:34:32] <jr_web_dev> ill have a function that takes arguments to fill in the rest of the html..
[07:34:33] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:35:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[07:35:21] <jr_web_dev> just wondering after i generate html structure.. what to do with it.. export it as a file... or run a webserver and serve the file along with the script idk
[07:35:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:35:36] *** Quits: nergar (~Nergar@177.225.147.106) (Quit: Leaving)
[07:35:44] *** Joins: alex11 (~alex11@user/alex11)
[07:35:52] <BrenBarn> if you're able to generate stuff as static HTML files you don't really need any complex framework like django
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:02] <BrenBarn> you need a webserver but it could be a pretty plain vanilla setup
[07:36:11] <malvin> you can save it in a database?
[07:36:13] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[07:36:21] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[07:36:27] <jr_web_dev> i guess i could save it on a database
[07:36:30] <jr_web_dev> thats one way
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:39] <malvin> much more secure if they are static mind
[07:36:57] <jr_web_dev> but then.. the only issue is this.. how to quickly server an index.html
[07:36:58] <malvin> and if you can set up an openbsd httpd server you'll never go down
[07:37:03] <jr_web_dev> serve**
[07:37:14] <jr_web_dev> that sounds good
[07:37:15] <malvin> xammp
[07:37:32] *** poorboy_ is now known as poorboy
[07:37:44] <malvin> https://www.apachefriends.org/index.html
[07:37:50] *** Joins: SallyAhaj (SallyAhaj@user/sallyahaj)
[07:37:56] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[07:38:03] <jr_web_dev> alright thanks man
[07:38:30] <malvin> ttfn good luck
[07:38:39] <jr_web_dev> ill find out if nginx has a setup for this stuff.. like a folder where i can just upload folder and each folder will automatically find a index.html and server...
[07:38:55] <jr_web_dev> and serve it
[07:38:56] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:39:02] <jr_web_dev> thanks malvin!
[07:39:37] *** Joins: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com)
[07:40:32] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[07:41:00] *** Quits: DaleNa9g (~DaleNa9g@071-093-142-189.res.spectrum.com) (Client Quit)
[07:41:20] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:4650:ff51:8883:bb1)
[07:42:03] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[07:42:20] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[07:42:53] *** Quits: rb (~augh@theguntretort.com) (Remote host closed the connection)
[07:43:14] *** Quits: vince (~vince@75.127.14.76) (Ping timeout: 260 seconds)
[07:44:37] *** Joins: rwb (~augh@theguntretort.com)
[07:54:08] *** Parts: jr_web_dev (~jr_web_de@ool-18bee068.dyn.optonline.net) ()
[07:54:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:58:28] *** Roey is now known as MarryWhoUWanna
[07:58:54] *** MarryWhoUWanna is now known as Roey
[07:59:58] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[08:00:05] *** Joins: linux-phaedrus (~linux-sis@104.36.253.60)
[08:04:43] *** Quits: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net) (Quit: Textual IRC Client: www.textualapp.com)
[08:04:50] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[08:05:45] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:07:41] *** Quits: SallyAhaj (SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[08:08:25] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[08:10:13] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:54a4:45b4:a00f:1788)
[08:12:49] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[08:14:44] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[08:23:24] *** Joins: dude-x (~textual@pool-108-50-217-42.nwrknj.fios.verizon.net)
[08:25:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[08:27:03] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (Ping timeout: 268 seconds)
[08:27:29] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[08:29:05] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[08:31:34] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:c587:e33d:2b0a:a0be) (Quit: Textual IRC Client: www.textualapp.com)
[08:35:43] *** Quits: gggp (~textual@111.63.14.119) (Ping timeout: 252 seconds)
[08:38:01] *** Joins: gggp (~textual@60.10.194.45)
[08:38:24] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:a9d0:21c9:5b3a:cf72) (Read error: Connection reset by peer)
[08:42:13] *** Quits: gggp (~textual@60.10.194.45) (Ping timeout: 252 seconds)
[08:42:16] *** Quits: emf (~emf@2620:10d:c090:400::5:113f) (Quit: emf)
[08:43:01] *** Quits: Phase (~phase@user/phase) (Remote host closed the connection)
[08:43:24] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[08:44:21] *** Joins: Phase (~phase@user/phase)
[08:44:27] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[08:45:34] *** Joins: djapo (~archangel@user/djapo)
[08:45:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:46:05] *** Joins: wyclif (~wyclif@user/wyclif)
[08:46:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[08:47:47] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[08:50:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:51:18] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:51:32] *** Joins: wyclif (~wyclif@user/wyclif)
[08:56:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[08:57:02] *** Joins: wyclif (~wyclif@user/wyclif)
[08:57:12] *** Quits: p-i-_ (~Ohmu@223.206.71.80) (Read error: Connection reset by peer)
[08:57:48] *** Joins: p-i- (~Ohmu@223.206.71.80)
[08:57:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:59:33] *** Joins: upsala (~zcb@185.213.155.160)
[09:00:14] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[09:00:29] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[09:00:33] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[09:01:03] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:01:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:02:33] *** Joins: wyclif (~wyclif@user/wyclif)
[09:03:46] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[09:04:10] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[09:06:43] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:6cc8:65b2:f368:9acf)
[09:06:53] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:54a4:45b4:a00f:1788) (Quit: Leaving)
[09:07:06] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[09:07:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:08:03] *** Joins: wyclif (~wyclif@user/wyclif)
[09:10:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:10:37] *** Joins: txtsd (~txtsd@user/txtsd)
[09:10:40] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[09:10:53] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 252 seconds)
[09:11:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[09:11:43] *** Joins: Vonter (~Vonter@user/vonter)
[09:12:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[09:12:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:13:16] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[09:13:33] *** Joins: wyclif (~wyclif@user/wyclif)
[09:14:33] *** Joins: fikran (~fikran@user/fikran)
[09:15:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[09:17:24] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[09:18:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[09:19:01] *** Joins: wyclif (~wyclif@user/wyclif)
[09:19:29] *** Joins: sertsa (~sertsa@209.140.9.160)
[09:19:36] *** Joins: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941)
[09:21:53] *** Quits: ska (~ska@user/ska) (Ping timeout: 252 seconds)
[09:22:21] *** Joins: badsektor (~badsektor@user/badsektor)
[09:25:30] *** Quits: sertsa (~sertsa@209.140.9.160) (Quit: Leaving)
[09:26:50] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[09:27:23] *** Joins: reset (~reset@user/reset)
[09:27:26] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Ping timeout: 252 seconds)
[09:28:00] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:a461:58d8:828d:766d)
[09:29:44] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[09:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[09:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[09:33:22] *** Quits: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 252 seconds)
[09:34:41] *** Joins: ska (~ska@user/ska)
[09:35:11] *** Quits: Vonter (~Vonter@user/vonter) (Read error: Connection reset by peer)
[09:35:29] *** Joins: Vonter (~Vonter@user/vonter)
[09:36:31] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:40:50] *** Quits: Wulf (~Wulf@user/wulf) (Read error: Connection reset by peer)
[09:43:12] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[09:43:30] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[09:43:39] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[09:45:15] *** Joins: Smedles (~quassel@2403-5800-5100-f00-aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[09:46:05] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:46:33] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:37] *** Joins: Wulf (~Wulf@user/wulf)
[09:47:09] *** Joins: seednode (~seednode@user/seednode)
[09:48:05] *** Quits: nvz (~user@nvz.farted.online) (Ping timeout: 260 seconds)
[09:48:43] *** Joins: chenqisu1 (~xirndc@183.217.201.186)
[09:50:20] *** Joins: kosh (~kosh@user/kosh)
[09:52:33] *** Joins: Keira (~k@lulzsec.co.uk)
[09:54:53] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[09:56:45] *** Quits: iogue (~iogue@gateway/tor-sasl/iogue) (Quit: iogue)
[09:57:57] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[09:59:28] *** simplici1y is now known as simplicity
[10:01:52] *** Joins: dre (~dre@2001:8003:c932:c301:51ac:d561:5c81:62d2)
[10:03:10] *** Joins: midnightconsole (~midnightc@45.130.83.18)
[10:03:48] *** Quits: dre (~dre@2001:8003:c932:c301:51ac:d561:5c81:62d2) (Remote host closed the connection)
[10:04:28] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Quit: Leaving)
[10:04:53] *** Quits: Cyp (~cyp@213.237.87.7) (Quit: Konversation terminated!)
[10:05:09] *** Joins: node1 (~node1@user/node1)
[10:07:37] *** Joins: han-solo (~hanish@user/han-solo)
[10:07:58] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[10:12:40] *** Joins: emf (~emf@2620:10d:c090:400::5:113f)
[10:13:41] *** Joins: xiongxin (~quassel@113.116.33.66)
[10:15:20] *** Quits: jazzy (~jaziz@2600:380:863e:b8c:2c7e:3597:d015:9d41) (Ping timeout: 246 seconds)
[10:17:00] *** Joins: Maikel (~Maikel@130.61.63.136)
[10:19:05] *** Joins: nvz (~user@nvz.farted.online)
[10:19:43] *** Quits: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca) (Quit: Leaving)
[10:20:35] *** Joins: Tas-sos (~Tas-sos@78-24-233.adsl.cyta.gr)
[10:23:07] *** Quits: emf (~emf@2620:10d:c090:400::5:113f) (Quit: emf)
[10:24:08] *** Joins: emf (~emf@2620:10d:c090:400::5:113f)
[10:25:53] *** Quits: Haxxa (~Haxxa@116-255-6-75.ip4.superloop.com) (Quit: Haxxa flies away.)
[10:25:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:27:53] *** Quits: ubert (~Thunderbi@178.115.52.70.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[10:30:07] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[10:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:30:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[10:30:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:30:58] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[10:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:23] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[10:33:01] *** Joins: rendar (~rendar@user/rendar)
[10:33:10] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[10:41:51] *** Joins: subho (~subho@2405:201:9001:a805:2894:339c:1412:622d)
[10:42:12] *** Joins: pycode (~pycode@2001:b07:5d28:551:97d0:6e6e:4b72:3da)
[10:43:15] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[10:46:05] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 252 seconds)
[10:46:57] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:40b4:bbb9:fb62:9f97)
[10:47:11] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[10:48:35] *** Quits: node1 (~node1@user/node1) (Ping timeout: 246 seconds)
[10:49:15] *** Quits: emf (~emf@2620:10d:c090:400::5:113f) (Quit: emf)
[10:50:05] *** Joins: emf (~emf@2620:10d:c090:400::5:113f)
[10:52:00] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:52:19] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[10:53:03] *** Joins: pycurious (~Adium@user/pycurious)
[10:54:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[10:55:29] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:55:29] *** Quits: midnightconsole (~midnightc@45.130.83.18) (Quit: leaving)
[10:56:52] *** Joins: amosbird (~amosbird@13.75.119.182)
[10:57:32] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:58:26] *** Joins: tracey (~trace@dynamic-002-247-250-247.2.247.pool.telefonica.de)
[10:59:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[10:59:14] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[11:00:10] *** Quits: emf (~emf@2620:10d:c090:400::5:113f) (Quit: emf)
[11:00:23] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[11:00:27] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:02:02] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:02:47] *** Joins: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683)
[11:02:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[11:03:11] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[11:03:38] *** Quits: tracey (~trace@dynamic-002-247-250-247.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:04:36] <bolnav[m]> In argparse how to set a default subparser? ArgumentParser.set_defaults() does not work and the subparser does not have set_defaults()
[11:04:54] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[11:05:46] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[11:05:56] <bolnav[m]> I know it is a bad interface, but it's for backwards compatibility
[11:06:03] *** Quits: subho (~subho@2405:201:9001:a805:2894:339c:1412:622d) (Quit: subho)
[11:07:30] *** Joins: jug (~jug@user/jug)
[11:07:40] *** Joins: gggp (~textual@60.10.23.162)
[11:08:06] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[11:08:49] *** Quits: twainwek (~user@144.211.196.35.bc.googleusercontent.com) (Client Quit)
[11:09:19] *** Joins: manti7 (~manti7@185.107.94.249)
[11:12:41] *** Joins: subho (~subho@2405:201:9001:a805:6080:e346:da01:ca79)
[11:14:41] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[11:15:00] *** Joins: twainwek (~user@144.211.196.35.bc.googleusercontent.com)
[11:15:13] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[11:17:04] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[11:18:58] <bolnav[m]> nevermind. subcommand.set_defaults(func=...) ; parser.set_defaults(func=my_fallback) ; args = parser.parse_args() ; args.func(args)
[11:19:16] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:19:31] *** Parts: bolnav[m] (~bolnavm]@2001:470:69fc:105::1683) ()
[11:20:29] *** Quits: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[11:20:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:21:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:21:58] *** Joins: wyclif (~wyclif@user/wyclif)
[11:22:06] *** Joins: very_sneaky_ (~very_snea@user/very-sneaky/x-7432109)
[11:23:29] *** Joins: enterprisey (~enterpris@wikipedia/enterprisey)
[11:23:30] *** Joins: vd17 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[11:23:53] *** Joins: fikran (~fikran@user/fikran)
[11:24:04] <enterprisey> "Universal Newline Support" means that opened files always have \n in them even if I'm on Windows. What about files I'm writing out? Will a \n be converted to a \r\n on Windows? No, right?
[11:25:19] <Wulf> enterprisey: \r\n doesn't make sense. Are you talking about CR LF?
[11:25:23] <Wulf> That is **not** the same.
[11:25:31] <enterprisey> oh yeah, \n\r
[11:25:32] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[11:25:40] <enterprisey> ...wait, no
[11:25:51] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[11:26:21] <enterprisey> what's the difference between \r\n and CRLF?
[11:26:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:26:50] <enterprisey> but yeah, will a \n be converted to the appropriate Windows line ending, or do I need os.linesep
[11:27:08] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[11:27:11] <Wulf> enterprisey: CR and LF are ASCII chars with values 0x0d and 0x0a. \n means "do whatever is needed to create a newline"
[11:27:27] <enterprisey> In Python, that is?
[11:27:27] *** Joins: wyclif (~wyclif@user/wyclif)
[11:27:40] *** Joins: semeion (~semeion@user/semeion)
[11:27:49] <Wulf> enterprisey: On posix systems that usually means LF, on Windows it would mean CR LF. And if you write "\r\n" you may end up with CR CR LF
[11:28:12] <deniska> Wulf: \n means LF, \r means CR, but some functions do more work to convert \n to \r\n when on windows
[11:28:13] <Wulf> enterprisey: I believe that in windows you'll get CR LF when you write "\n" to a file
[11:28:19] <enterprisey> excellent
[11:28:22] <enterprisey> thanks
[11:28:35] *** Quits: resmo (~resmo@2a00:d420:9:8a00:17d7:ae82:b739:257b) (Ping timeout: 265 seconds)
[11:28:41] *** Joins: pycurious (~Adium@user/pycurious)
[11:29:37] <Wulf> enterprisey: https://docs.python.org/3/library/functions.html#open-newline-parameter
[11:30:31] <enterprisey> that's on me for reading precisely half the documentation, and the half that didn't apply to me at that... thanks
[11:31:43] <deniska> now that notepad.exe on recent win10 builds treats a lone \n as a newline, we may begin slowly phasing out universal newlines :D
[11:32:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:32:55] *** Joins: wyclif (~wyclif@user/wyclif)
[11:33:13] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[11:34:19] *** Joins: jay-m126 (~jay-m@154.72.161.223)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:33] <Wulf> deniska: yes, python defines \r and \n as CR and LF. And the implementation makes sure that a LF is converted to CR LF on Windows. But from a user perspective it's more useful to think of "\n" as "newline". That's what the "n" stands for anyway.
[11:36:09] *** Joins: badsektor (~badsektor@user/badsektor)
[11:36:30] <deniska> Wulf: I'm just saying that it's file IO functions specifically doing the conversion, not some other part making '\n' magically become '\r\n'
[11:36:42] <deniska> len('\n') is still 1 on windows
[11:37:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:38:26] *** Joins: wyclif (~wyclif@user/wyclif)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:04] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:40:40] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Quit: ZNC - https://znc.in)
[11:41:52] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:42:33] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[11:42:50] *** Joins: vimart (~vimart@185.69.144.102)
[11:43:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[11:43:40] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[11:44:01] *** Joins: wyclif (~wyclif@user/wyclif)
[11:47:07] *** Quits: gitly (~gitly@148.252.132.191) (Ping timeout: 252 seconds)
[11:48:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[11:49:10] *** Joins: gitly (~gitly@85.255.232.78)
[11:49:14] *** Joins: wyclif (~wyclif@user/wyclif)
[11:50:24] *** Joins: xiongxin (~quassel@113.116.33.66)
[11:52:51] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:53:39] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[11:55:12] *** Quits: subho (~subho@2405:201:9001:a805:6080:e346:da01:ca79) (Quit: subho)
[11:56:09] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-bcfd-e74c-43c9-4dcf.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:58:26] *** Joins: tracey (~trace@dynamic-002-247-249-219.2.247.pool.telefonica.de)
[12:00:23] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Quit: IRC Client)
[12:00:23] *** Joins: pycurious (~Adium@user/pycurious)
[12:00:36] *** Joins: subho (~subho@2405:201:9001:a805:6080:e346:da01:ca79)
[12:00:38] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[12:00:46] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 252 seconds)
[12:01:27] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[12:01:27] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-41dd-c7b6-6757-fde9.res6.spectrum.com)
[12:04:21] *** Quits: tracey (~trace@dynamic-002-247-249-219.2.247.pool.telefonica.de) (Ping timeout: 265 seconds)
[12:04:41] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:07:01] *** Joins: just-me (~just-me@46.104.40.183)
[12:07:50] <just-me> Hello, I am trying to write an anagram game, here is the code. Here is the code: https://encryp.ch/note/?897766e8471509d9#FCz7Bp2wNo8PHVKsWaY2ncjcnGWig2P8REdoiQrkTrhn
[12:08:35] <just-me> My attempted error handling returns a syntax error, but I checked on the course and it seems like this is how it's supposed to be done. What causes a syntax error here?
[12:08:52] <han-solo> the paste seems to be removed
[12:10:02] *** Quits: subho (~subho@2405:201:9001:a805:6080:e346:da01:ca79) (Quit: subho)
[12:10:17] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[12:10:40] <cluelessperson> just-me, try again?
[12:10:46] *** Quits: LiftLeft (~LiftLeft@154.21.23.29) (Ping timeout: 252 seconds)
[12:10:58] <han-solo> https://bpa.st/+python
[12:11:30] <just-me> Ok, give me a sec
[12:11:38] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:12:21] <just-me> https://bpa.st/JC5Q
[12:13:04] <just-me> Also bpa.st looks like a useful tool, thank you han-solo.
[12:13:40] <han-solo> could you paste the error too ?
[12:13:48] <hexnewbie> just-me: except is the keyword, not expect
[12:14:20] <hexnewbie> just-me: You can use the syntax highlighting of your editor to catch errors like this (albeit some editors are still not fond of Python 3 syntax even to this day)
[12:14:22] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:14:30] *** Parts: enterprisey (~enterpris@wikipedia/enterprisey) ()
[12:14:54] *** Joins: subho (~subho@49.37.55.55)
[12:15:39] <just-me> That fixed it, thank you hexnewbie
[12:15:39] <han-solo> also i couldn;t help but notice the `list(question_material.keys)`
[12:15:57] <hexnewbie> just-me: Additionally, input() already returns a str, and the code in the try block will *never* raise a TypeError, which also means that if something exceptional does raise such error, you should not ignore it
[12:16:47] <hexnewbie> Oh, and yeah, list(d.keys) *will* raise a TypeError. But because it *is* an error, not because it needs to be handled.
[12:17:31] <just-me> Oh ok, I got rid of try and except blocks.
[12:17:53] *** Quits: AnySomebody (~AnySomebo@pd9eeb15c.dip0.t-ipconnect.de) (Quit: ZNC - https://znc.in)
[12:17:55] <just-me> Would using .items instead of keys or values fix it?
[12:18:04] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[12:18:30] <deniska> just-me: dict.keys is a method, you typically want to call it: d.keys()
[12:18:44] <hexnewbie> just-me: No. d.items is a method (callable, like a function), it needs to be called. It is not an iterable..
[12:19:30] <han-solo> line 11 feels... a bit weird
[12:20:00] *** Joins: pycurious (~Adium@user/pycurious)
[12:20:10] <just-me> Probably most of the code is rather weird.
[12:20:41] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[12:21:02] *** Joins: vd1785 (~vd17@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[12:21:28] <just-me> Is there a way I can grab random key:value pairs in a iterable way?
[12:21:40] <just-me> I feel like it would make things a bit easier.
[12:22:26] <deniska> just-me: key, value = random.choice(list(d.items())) # a bit wordy, yes
[12:22:39] <deniska> if you actually need a random pair from a dict
[12:22:50] <hexnewbie> han-solo: Not weird when you've worked with COBOL programmers. Or, for that matter, used pcap-filter. I think x == 3 or 5 is common in both of these lands. Although even there the 'and' will be a bit oddish
[12:23:03] *** Joins: mei (~mei@user/mei)
[12:23:26] <han-solo> Okay
[12:24:56] *** Quits: vd17 (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[12:25:51] <han-solo> hexnewbie: my concern was, that line does something along the line of `x = []; x.append(True and None)` no ?
[12:26:15] <han-solo> s/True/something/
[12:26:56] <supakeen> random.choice(D) just behaves bizarrely in general
[12:27:05] <hexnewbie> han-solo: It has three parens on both ends, so it will actually do something else entirely
[12:27:17] <han-solo> oh, oops
[12:27:21] <han-solo> i missed that, my bad
[12:28:09] <han-solo> so `None and do_something()` then
[12:28:34] <hexnewbie> I'm just saying, I have seen languages where the intuitive urge to write ‘and’ and ‘or’ in manner seeming arbitrary in Python makes sense (pcap-filter being the more modern example)
[12:28:45] <just-me> Now how can I shuffle the key? Simply assigning shuffle(key) to a variable didn't work.
[12:28:54] <han-solo> ah, Okay
[12:29:11] <supakeen> just-me: shuffle is in-place.
[12:29:18] <just-me> Answer to this is probably very obvious but I am very new so I can't figure it out yet.
[12:29:26] <just-me> Oh
[12:29:27] <supakeen> You'd do `keys = list(D.keys()); random.shuffle(keys)`
[12:29:36] <hexnewbie> just-me: The key is a string. Shuffling the key would mean to randomize the letters. Is that what you want? You said anagram.
[12:29:44] <just-me> Yes
[12:30:38] <hexnewbie> just-me: Since shuffle is in-place, and str are immutable (can't be changed), you need to convert to list and back to str. key = list(key); shuffle(key); key = ''.join(key)
[12:31:11] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[12:31:38] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[12:31:40] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:31:52] <just-me> This is a bit complicated for my noob back, I will try making dictionary pairs into tuple pairs and throwing them to a list.
[12:32:16] <just-me> Even though I will probably have to come back to this at one point.
[12:32:29] *** Joins: teut (~teut@182.69.68.230)
[12:37:48] <just-me> Thank you for helping everyone :D
[12:37:51] *** Quits: just-me (~just-me@46.104.40.183) (Quit: Leaving)
[12:38:16] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[12:40:27] <han-solo> i think, you want to get a pair of answer, question from that dict, and then ask the question, get the answer input from the user and then just match that answer with the question/answer pair randomly choosen
[12:40:30] *** Joins: BlessJah (~BlessJah@user/blessjah)
[12:40:35] <han-solo> welp, they left
[12:41:23] *** rwb is now known as rb
[12:43:11] <sveinse> What could be the cause if I have an old legacy py2 project with "from _flags import *" at the top of __init__.py and it fails to import _flags.py when the parent package is imported? I've tested renaming the _flags.py file to something else
[12:43:12] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[12:44:10] <hexnewbie> sveinse: Circular dependencies, perhaps? E.g. one of the modules in _flags is importing _flags?
[12:44:28] <hexnewbie> Never got the hang of it, only know Python 3 does those a little bit better.
[12:45:09] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:45:25] <sveinse> hexnewbie: yeah, good point, I'll check that. And yes, I was reflecting over the same about being thankful that this is done better in py3
[12:49:57] *** Joins: teru (~teru@p402023-ipngn200607kyoto.kyoto.ocn.ne.jp)
[12:50:03] *** Joins: raxor2k (~raxor2k@78.158.232.147)
[12:50:03] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[12:50:34] <raxor2k> graingert: if i 'pip install sqlalchemy[asyncio] instead of sqlalchemy[pymysql] , can i still use the same code?
[12:51:43] <graingert[m]> you probably want`pip install sqlalchemy[aiomysql,pymysql]`
[12:52:25] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[12:53:54] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[12:56:20] <raxor2k> graingert[m]: not according to this link : https://docs.sqlalchemy.org/en/14/orm/extensions/asyncio.html
[12:56:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:56:46] <graingert[m]> ?
[12:58:25] <raxor2k> what ?
[12:58:26] *** Joins: tracey (~trace@dynamic-002-247-249-134.2.247.pool.telefonica.de)
[12:59:09] <graingert[m]> your link doesn't contradict "you probably wantpip install sqlalchemy[aiomysql,pymysql]"
[12:59:18] <cluelessperson> What's it called when a FIFO has a max size and loses the oldest items when it's filled?
[12:59:22] <cluelessperson> oldest item
[13:00:27] <Swayze> is there even a word for that
[13:00:34] <raxor2k> graingert: sqlalchemy[aiomysql,pymysql]   and sqlalchemy[asyncio] arent the same, are they ?
[13:00:40] <bookworm> which fifo does that? Normally it would error on the writer
[13:00:40] <han-solo> sliding window thing ?
[13:00:52] <bookworm> else you are talking about a ring buffer not a fifo
[13:01:13] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[13:02:08] *** Joins: Warped (~Warped@user/warped)
[13:02:28] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[13:04:21] <cluelessperson> Swayze,   "discarding max size queue",  and apparently deque supports it.
[13:04:22] <cluelessperson> :D
[13:04:23] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (Quit: WeeChat 3.3)
[13:05:21] <bookworm> so a ring buffer ;P
[13:05:29] *** Quits: tracey (~trace@dynamic-002-247-249-134.2.247.pool.telefonica.de) (Ping timeout: 264 seconds)
[13:05:55] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[13:07:20] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[13:08:29] <graingert[m]> <raxor2k> "graingert: sqlalchemy[aiomysql,..." <- right but aiomysql inherits ayncio
[13:08:41] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: leaving)
[13:09:20] <graingert[m]> I know this because I wrote it ;) https://github.com/sqlalchemy/sqlalchemy/commit/b04dcbd7bc2c4e160f0fc5b5a4a97dea1bb227e7
[13:09:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[13:11:35] *** Quits: teru (~teru@p402023-ipngn200607kyoto.kyoto.ocn.ne.jp) (Quit: Client closed)
[13:13:17] *** Quits: Tas-sos (~Tas-sos@78-24-233.adsl.cyta.gr) (Quit: leaving)
[13:14:04] *** Joins: pycurious (~Adium@user/pycurious)
[13:16:50] *** Joins: rsx (~dummy@ppp-188-174-145-233.dynamic.mnet-online.de)
[13:17:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:18:02] *** Joins: alzgh (~alzgh@user/alzgh)
[13:18:19] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:18:43] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[13:19:03] *** Joins: gggp (~textual@111.63.14.119)
[13:19:25] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[13:19:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:21:11] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:21:41] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[13:23:37] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[13:23:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[13:24:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:25:02] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 246 seconds)
[13:25:13] <raxor2k> graingert[m]: ok thanks. I have a look at it
[13:26:12] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:26:30] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[13:26:31] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:28:07] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:3908:5a99:75ab:e0bb)
[13:28:31] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:28:58] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:29:59] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[13:30:34] *** Quits: pycode (~pycode@2001:b07:5d28:551:97d0:6e6e:4b72:3da) (Remote host closed the connection)
[13:30:40] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:30:52] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[13:31:02] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[13:31:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:32:34] <raxor2k> graingert: where can i find and example file with async_engine, sessionmaker etc? in the github
[13:33:13] *** Joins: fikran (~fikran@user/fikran)
[13:33:43] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[13:36:12] <Wulf> from typing import TypeVar, Generic; T = TypeVar("T") class Foo(Generic[T]): pass; foo = Foo[int]()  Is there some way to get `int` from `foo`?
[13:36:56] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 246 seconds)
[13:38:15] *** Joins: matjst (~matjst@180.252.119.175)
[13:42:38] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[13:43:47] *** Joins: dez (uid92154@user/dez)
[13:44:19] *** Joins: darksun (~darksun@user/darksun)
[13:44:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:45:29] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:46:19] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[13:46:39] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[13:48:15] *** Joins: pycurious (~Adium@user/pycurious)
[13:48:26] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.3)
[13:48:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:52:15] *** Joins: y1n (~y1n@178.115.47.186.wireless.dyn.drei.com)
[13:52:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[13:53:17] *** Quits: mei (~mei@user/mei) (Quit: mei)
[13:54:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:55:13] *** Joins: mei (~mei@user/mei)
[13:55:57] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:56:17] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[13:56:23] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[13:57:24] *** Joins: pycode (~pycode@2001:b07:5d28:551:76f2:9682:614a:9c52)
[13:57:29] <pycode> back
[13:58:25] *** Joins: tracey (~trace@dynamic-002-247-248-211.2.247.pool.telefonica.de)
[13:58:57] *** Joins: vimart (~vimart@185.69.144.102)
[13:59:39] <bjs> Wulf: the typing library tries hard to stop you
[13:59:51] *** Quits: gggp (~textual@111.63.14.119) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:00:15] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[14:00:21] <Wulf> bjs: yep, I noticed. Than maybe I shouldn't?
[14:00:33] <bjs> e.g. the interface very unstable,  I think right now the int can be got with __args__ but tbh they might've already changed the name
[14:00:36] <bjs> and it's totally not documented
[14:01:21] <bjs> Wulf: well it depends what you want to do,  you can do it obviously by inspecting the 'hidden' fields but when you upgrade to a new version don't be surprised if you have to re-make it
[14:01:57] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:02:08] <Wulf> bjs: I'm trying to create a list-like type with an additional method to create new items. And the whole thing should be typed.
[14:02:38] <bjs> Wulf: but do you really want the type at runtime?
[14:02:57] <Wulf> like foo = list[Something]()  foo.create() should create a new Something.
[14:03:07] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[14:04:15] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[14:04:34] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[14:04:42] *** Quits: tracey (~trace@dynamic-002-247-248-211.2.247.pool.telefonica.de) (Ping timeout: 265 seconds)
[14:05:05] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[14:05:31] *** Quits: P1ro_ (~quassel@user/p1ro) (Read error: Connection reset by peer)
[14:05:44] *** Joins: P1ro (~quassel@user/p1ro)
[14:07:36] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 265 seconds)
[14:08:11] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[14:08:45] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[14:09:11] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:09:31] <thunfisch> hey, currently doing my first experiments with dramatiq, to process a bunch of videos over a cluster of machines. usually i use argparse to get some configuration options in, but argparse seems to just load the module for workers. any idea if an argparse style config can work here, or do i need to fall back to env vars or config files?
[14:09:41] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 264 seconds)
[14:09:56] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 250 seconds)
[14:09:59] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[14:11:47] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[14:12:10] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 252 seconds)
[14:12:17] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[14:12:41] *** Joins: vimart (~vimart@185.69.144.102)
[14:12:59] *** Quits: raxor2k (~raxor2k@78.158.232.147) ()
[14:13:31] <Wulf> perhaps I could overwrite __class_getitem__. At least that's documented :)
[14:15:24] <sveinse> I'm trying to debug some legacy py2 code in vscode, but are having problems identifying the point an caught exception was raised. Does anyone know if vscode support this, or if this is because vscode doesn't really support py2 debugging (which is understandable)?
[14:16:19] <sveinse> I've only really debugged py under vscode, are there any good free py IDE debuggers that will work with py2?
[14:18:17] <Wulf> thunfisch: Hello. Don't really see how "dramatiq" is related to argument parsing or how argparse is related to "workers"
[14:19:52] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 252 seconds)
[14:19:53] <thunfisch> ah, sorry, i had a typo - i meant dramatiq loads the module for the workers. so the programm is not invoked directly (allowing argparse to parse arguments), but rather loaded as a module by dramatiq. i was wondering if anyone with experience around dramatiq knows whats the best practice to pass on configuration arguments to that module
[14:26:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:27:07] *** Joins: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it)
[14:29:16] *** Quits: pycode (~pycode@2001:b07:5d28:551:76f2:9682:614a:9c52) (Ping timeout: 252 seconds)
[14:30:59] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:31:31] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:31:53] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[14:32:10] *** Joins: plastico (~plastico@neomutt/plastico)
[14:32:20] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[14:33:14] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[14:34:15] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[14:34:29] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:35:48] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[14:36:14] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[14:39:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[14:41:25] *** Joins: LiftLeft (~LiftLeft@154.21.114.197)
[14:41:32] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[14:41:57] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[14:43:38] *** Joins: pycurious (~Adium@user/pycurious)
[14:44:31] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:45:23] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[14:46:19] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[14:46:40] *** Joins: kurfen (~kurfen@103.212.227.188)
[14:48:01] *** Joins: vimart (~vimart@185.69.144.102)
[14:48:02] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:49:44] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[14:50:24] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[14:52:52] *** Quits: pycode1 (~pycode@93-40-5-81.ip36.fastwebnet.it) (Ping timeout: 252 seconds)
[14:53:54] <Wulf> bjs: mypy doesn't like me overwriting __class_getitem__. I now added an __init__ which takes the type again. I need to call it foo = Foo[int](int). Works but doesn't look nice.
[14:54:46] *** Joins: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr)
[14:56:22] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:57:11] *** Joins: srhm (~srhm@user/srhm)
[14:58:26] *** Joins: tracey (~trace@dynamic-002-247-250-022.2.247.pool.telefonica.de)
[14:58:53] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 264 seconds)
[14:59:28] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[15:00:21] *** Joins: brelod (~me@90.244.150.142)
[15:00:59] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[15:01:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:01:27] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:01:28] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[15:02:24] *** Joins: srhm (~srhm@user/srhm)
[15:02:28] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[15:02:35] *** Quits: kurfen (~kurfen@103.212.227.188) (Quit: WeeChat 2.3)
[15:02:37] *** Joins: xormor (leet@user/pamipetteri)
[15:02:38] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[15:02:56] *** Joins: kurfen (~kurfen@103.212.227.188)
[15:03:19] *** Joins: jelle (~jelle@archlinux/developer/jelle)
[15:03:26] *** Quits: kurfen (~kurfen@103.212.227.188) (Client Quit)
[15:03:43] *** xormor is now known as PamiPetteri
[15:03:50] *** Joins: kurfen (~kurfen@103.212.227.188)
[15:04:15] *** Quits: kurfen (~kurfen@103.212.227.188) (Client Quit)
[15:04:24] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:04:25] *** Quits: tracey (~trace@dynamic-002-247-250-022.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[15:05:16] *** Joins: han-solo (~hanish@user/han-solo)
[15:05:34] *** Quits: p-i- (~Ohmu@223.206.71.80) (Ping timeout: 252 seconds)
[15:05:36] *** Joins: gggp (~textual@60.10.23.162)
[15:05:40] *** Joins: kurfen (~kurfen@103.212.227.188)
[15:06:03] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[15:06:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[15:07:25] *** Joins: srhm (~srhm@user/srhm)
[15:07:56] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:08:28] *** Joins: d1b (~db@user/d1b)
[15:09:55] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[15:10:28] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[15:12:40] *** Quits: jay-m126 (~jay-m@154.72.161.223) (Ping timeout: 252 seconds)
[15:14:40] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:17:30] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[15:19:37] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:21:02] *** Quits: barometz_ (~dvanb@i117058.upc-i.chello.nl) (Ping timeout: 252 seconds)
[15:21:21] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[15:22:27] *** Joins: Cyp (~cyp@213.237.87.7)
[15:22:27] *** Quits: gggp (~textual@60.10.23.162) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:25:23] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[15:25:36] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:27:22] *** Joins: pycurious (~Adium@user/pycurious)
[15:29:58] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[15:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[15:31:22] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:31:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[15:32:13] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[15:34:27] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:17] *** Joins: sudorm (~sudorm@2a01cb0120547382913ebf4306c58e50.ipv6.abo.wanadoo.fr)
[15:36:28] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:58] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:38:47] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:39:44] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[15:40:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:42:33] *** Joins: fikran (~fikran@user/fikran)
[15:46:12] *** Quits: JibStyle (~user@154.21.20.19) (Remote host closed the connection)
[15:49:17] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[15:49:23] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:51:04] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[15:51:12] *** Quits: ephemer0l (~ephemer0l@organizedmagnetism.com) (Remote host closed the connection)
[15:51:51] *** Joins: SteveR (~SteveR@192.146.154.3)
[15:51:55] *** Quits: chenqisu1 (~xirndc@183.217.201.186) (Quit: Leaving)
[15:52:22] <SteveR> Hey there,
[15:52:42] <SteveR> I want to have a method which can go through the json and find the value for the key i should give.. all of this RECURSIVELY
[15:52:42] <SteveR> https://dpaste.org/w8tt
[15:55:13] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[15:56:17] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Ping timeout: 252 seconds)
[15:57:29] <SteveR> could anyone give me a hand
[15:57:50] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[15:58:08] *** Quits: sudorm (~sudorm@2a01cb0120547382913ebf4306c58e50.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[15:59:36] *** Joins: BlackBishop (dexter@user/blackbishop)
[16:00:23] *** Parts: jelle (~jelle@archlinux/developer/jelle) (WeeChat 3.2)
[16:03:19] <hexnewbie> Getting the value for a given key is not a recursive operation, except if something like JSONPath is involved. There are JSONPath modules for Python, albeit I have not been completely pleased with them (or I simply am not skilled enough to understand the syntax)
[16:03:49] <hexnewbie> But jsonpath-rw does key.subkey.subsubkey just fine
[16:05:02] <hexnewbie> I don't recall if that would be [*].meta.id or the like in your instance
[16:05:45] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:05:57] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:06:11] *** Quits: darksun (~darksun@user/darksun) (Ping timeout: 252 seconds)
[16:06:41] *** Joins: darksun (~darksun@user/darksun)
[16:08:00] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:08:51] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[16:09:32] <sveinse> I'm digging in a really ancient py2 package and it contains a lot of eval and language feature tests, e.g. does it have iterators, supports unicode, enumerate, kwargs input to dict an so on. I'm wondering, was the py language in larger flux back then? We don't really see packages doing this kind of run-time testing of capabilities any more
[16:11:14] *** Joins: pycurious (~Adium@user/pycurious)
[16:11:34] <hexnewbie> sveinse: I've hit more breaking changes with Python 3, even as I came late to convert my code to it, than with Python 2. E.g. typing.Iterator is both deprecated its replacement not available on my Python version, so I have checks for what to import in my code.
[16:12:10] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[16:14:04] <hexnewbie> With e.g. Python 2.x changes you could simply avoid using the new feature (except if you had variables named 'with' or some such). UserDict survived even into Python 3, and I have no idea what that it is for, and sets.Set survived into 2.7.
[16:14:25] *** Quits: teut (~teut@182.69.68.230) (Quit: Client closed)
[16:15:42] <BlackBishop> So I was trying to write a bot using discord.py worked for a bit .. but now I'm getting ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1145). Everything is in a venv and I wonder what I messed up...
[16:16:28] <Wulf> BlackBishop: dst root x3 expired. Update your cert store.
[16:17:27] * BlackBishop googles how to do that on gentoo
[16:17:30] <Wulf> BlackBishop: perhaps through your system store, or maybe you've got the certify python package in an ancient version
[16:17:53] <Wulf> BlackBishop: how old is your system?
[16:18:01] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[16:18:25] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:18:43] <BlackBishop> ca-certificates is 20210119.3.66 ... dev-python/certifi is 10001-r1
[16:19:10] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:19:56] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[16:20:17] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:20:21] <Wulf> BlackBishop: 10001-r1? what kind of version number is that?
[16:20:36] <Wulf> BlackBishop: can't find this on https://pypi.org/project/certifi/#history
[16:21:05] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 264 seconds)
[16:22:01] <BlackBishop> Wulf: no idea. I did a pip install certifi in my venv .. it says it installed certifi-2021.5.30
[16:22:08] <BlackBishop> no luck.
[16:22:24] <Wulf> BlackBishop: what server are you trying to connect to?
[16:22:42] <Wulf> BlackBishop: i.e. hostname + port?
[16:23:05] <BlackBishop> https://bpa.st/5TPQ so I assume it's discord.com:443
[16:23:42] <Wulf> ah, they're using cloudflare anyway
[16:23:56] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:24:02] <Wulf> so that's totally unrelated to my hunch
[16:24:16] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[16:25:40] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c:1cbc:efbb:c578:a980) (Remote host closed the connection)
[16:26:45] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[16:26:53] <Wulf> BlackBishop: what happens here:  gnutls-cli discord.com:443
[16:27:51] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:28:47] <BlackBishop> I don't have gnutls-cli but curl/wget-ing discord works just fine.
[16:29:26] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Remote host closed the connection)
[16:30:16] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 252 seconds)
[16:30:46] *** Quits: y1n (~y1n@178.115.47.186.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[16:30:59] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:12] <Wulf> BlackBishop: okay, I'm out of easy ideas now. You can always use strace, wireshark, etc. to debug this more.
[16:31:19] *** Quits: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963) (Ping timeout: 252 seconds)
[16:31:30] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[16:32:52] <BlackBishop> it seems to work just fine outside of the venv :|
[16:34:52] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[16:35:05] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[16:35:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[16:36:07] *** Joins: Hazza (~Haxxa@122-199-44-5.ip4.superloop.com)
[16:37:08] <BlackBishop> removed and recreated the venv .. no luck ..
[16:37:18] <BlackBishop> python 3.9.6 if that counts...
[16:40:59] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Remote host closed the connection)
[16:41:21] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th)
[16:41:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:42:10] *** Joins: Auron (~Auron956@user/auron)
[16:42:19] <p-i-> https://bpa.st/77PA <-- I've made a simple class for converting nested JSON so that I can access with Ob(J).foo.bar[42].quux
[16:42:31] <p-i-> However, it's only good for fetching leaf-nodes
[16:43:00] <p-i-> If I want to retrieve a non-leaf node, I have to tag a .J to the end, e.g. Ob(J).foo.J
[16:43:07] <p-i-> Can anyone see a way of fixing?
[16:44:05] *** Quits: d1b (~db@user/d1b) (Ping timeout: 252 seconds)
[16:44:39] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:45:10] *** Quits: Macuser (~Macuser@216.30.159.201) (Client Quit)
[16:45:13] *** Joins: Intruder777 (~Intruder7@user/intruder777)
[16:45:18] *** Parts: Intruder777 (~Intruder7@user/intruder777) ()
[16:45:29] <nedbat> p-i-: there won't be a way, because you want Ob(J).foo to be able to do .bar, so it can't be a plain dict
[16:46:01] *** Joins: Code_Bleu (~Code_Bleu@user/code-bleu/x-6939963)
[16:46:07] <nedbat> p-i-: so you either need Ob(J).foo.J or something like Raw(Ob(J).foo)
[16:46:22] *** Joins: d1b (~db@user/d1b)
[16:47:25] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[16:48:14] *** Joins: korg815 (~korg815@user/korg815)
[16:51:14] <p-i-> I wonder if I can subclass it from dict, so it acts as both a plain dict AND allows .bar
[16:52:25] <p-i-> I can't see clearly that it is intractable.
[16:52:39] <nedbat> p-i-: think about what operations you need from the dict.  why is the Ob no good?
[16:53:06] *** Joins: jay-m126 (~jay-m@154.72.161.223)
[16:53:47] <p-i-> I just need it to saw a branch or pluck a leaf off the JSON object.
[16:54:06] <p-i-> I guess .J is a decent compromise.
[16:54:14] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:3908:5a99:75ab:e0bb) (Quit: Konversation terminated!)
[16:54:18] <p-i-> It already makes my code 10x easier to maintain.
[16:54:27] *** Joins: pycurious (~Adium@user/pycurious)
[16:54:38] <p-i-> And it passes back None if there is failure at any nesting level.
[16:54:44] <p-i-> Which is what I want.
[16:55:48] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[16:56:16] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:57:17] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[16:58:02] *** Joins: tracey (~trace@dynamic-002-247-248-056.2.247.pool.telefonica.de)
[16:58:28] <p-i-> And maybe it's better practice anyway to be explicit as to which of branch/leaf is being returned. Ob(J).foo.bar.branch_as_json()
[16:58:44] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[16:58:49] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[17:00:09] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:3cd6:5eb7:c776:e1a5)
[17:00:28] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[17:01:03] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[17:01:52] *** Joins: han-solo (~hanish@user/han-solo)
[17:02:14] *** Quits: erica (~erica@user/erica) (Quit: The Lounge - https://thelounge.chat)
[17:02:59] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:03:46] *** Quits: tracey (~trace@dynamic-002-247-248-056.2.247.pool.telefonica.de) (Ping timeout: 252 seconds)
[17:04:00] *** Joins: erica (~erica@user/erica)
[17:05:46] *** Joins: vimart (~vimart@185.69.144.102)
[17:07:07] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 252 seconds)
[17:07:42] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[17:08:13] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:08:25] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:09:13] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:11:00] *** Joins: pycurious (~Adium@user/pycurious)
[17:12:43] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Client Quit)
[17:13:00] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:13:30] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 260 seconds)
[17:13:38] <pycurious> In a docker container (python-slimbuster), when I run python3 -c "import socket; print(socket.gethostname())" — I get an old hostname - how can i fix this without restarting the container?
[17:13:42] *** Joins: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net)
[17:14:10] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 265 seconds)
[17:14:20] *** Quits: walrus_man (~Thunderbi@host-92-22.alaures.auburn.al.us.clients.pavlovmedia.net) (Client Quit)
[17:15:11] <ChrisWarrick> what’s an old hostname?
[17:15:32] <Wulf> pycurious: with "hostname abc" as root and enough capabilities?
[17:15:51] <Wulf> pycurious: but you should really just create another container.
[17:16:05] *** Joins: vimart (~vimart@185.69.144.102)
[17:16:07] <ChrisWarrick> (and do hostnames really matter in containers?)
[17:16:13] *** Joins: jinsun (~quassel@user/jinsun)
[17:16:32] <pycurious> Wulf: I tried that - but that is taking 5 seconds and that is too much time - any ideas on how to debug that?
[17:16:40] <Wulf> pycurious: strace
[17:16:48] <pycurious> ChrisWarrick: If the code inside the container is running that code - yes it does.
[17:16:57] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[17:17:02] <Wulf> pycurious: this shouldn't take that long
[17:18:01] <pycurious> Wulf: exactly my thoughts. So I tried not removing the container, but just killing it and starting it. That saves me 1-2 seconds on those 5 seconds.
[17:18:56] <Wulf> pycurious: why do you need to change the host name?
[17:19:57] <pycurious> Wulf: This a webserver that is coming from a pool of webserver machines and now has to actually serve a particular user.
[17:20:18] <Wulf> pycurious: Okay. And why change the hostname?
[17:20:59] <pycurious> Wulf: Because the user has user files / user directories etc in the web application based on gethostname()
[17:21:11] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:21:30] <Wulf> pycurious: consider finding another way ;-)
[17:22:29] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[17:23:06] *** Joins: nomic (~nomic@185.192.69.207)
[17:23:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:23:55] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[17:24:07] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[17:24:43] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6844-6dda-c97d-34cb.res6.spectrum.com)
[17:25:46] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-80.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[17:26:19] *** Quits: jay-m126 (~jay-m@154.72.161.223) (Ping timeout: 252 seconds)
[17:27:04] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[17:27:24] *** Joins: rsrx (~rsrx@103.225.150.81)
[17:27:27] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:28:12] *** Joins: BSaboia (~bsaboia@177.37.198.122)
[17:29:15] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[17:29:48] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[17:30:17] <pycurious> I'm using nginx -> upstream pytornado{    server 127.0.0.1:8080; …} to deploy my server. It takes a 5-10 seconds to connect to the python tornado IOLoop - any ideas on how to debug this time?  Is that normal?
[17:31:01] <Wulf> pycurious: doesn't sound normal. strace.
[17:31:55] *** Quits: nomic (~nomic@185.192.69.207) (Quit: Leaving)
[17:32:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[17:32:33] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[17:33:04] <rannnn8888> Hey How many seconds is it a good time to get information about the next query? https://bpa.st/5IYA
[17:33:33] <rannnn8888> have idea how i can make its more fast maybe its take me like 6 Sec
[17:34:37] *** Joins: greedom (~greedom@2001:16b8:2ebf:3a00:4616:5d4a:ae1a:e3a8)
[17:34:54] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[17:35:12] <ChrisWarrick> rannnn8888: https://django-debug-toolbar.readthedocs.io/en/latest/
[17:35:58] <ChrisWarrick> rannnn8888: check how many queries you really make, how long they take, and get the query plan for the longest queries
[17:36:21] *** Joins: gggp (~textual@60.10.23.162)
[17:36:35] <ChrisWarrick> (Django Debug Toolbar should have a handy button that does an EXPLAIN for you.)
[17:36:45] *** Quits: gggp (~textual@60.10.23.162) (Client Quit)
[17:38:02] *** Joins: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[17:38:40] *** Joins: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5)
[17:40:07] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 252 seconds)
[17:40:45] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[17:41:58] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[17:42:51] <rannnn8888> Talked to me about it before but I did not really understand how to check it maybe you can help me how to get started? first i need instell the Django Debug Toolbar ?
[17:43:37] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[17:43:53] *** Joins: badsektor (~badsektor@user/badsektor)
[17:44:06] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[17:45:29] <rannnn8888> ChrisWarrick *
[17:45:41] <ChrisWarrick> rannnn8888: yes
[17:45:56] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:45:58] *** Quits: matjst (~matjst@180.252.119.175) (Read error: Connection reset by peer)
[17:50:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:51:53] *** Joins: fikran (~fikran@user/fikran)
[17:52:13] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:52:35] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[17:54:04] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[17:54:49] *** Joins: akk (~akk@75.161.146.115)
[17:55:01] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Max SendQ exceeded)
[17:55:15] *** Quits: loki_val (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[17:56:20] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:57:40] *** Quits: xiongxin (~quassel@113.116.33.66) (Ping timeout: 252 seconds)
[17:58:00] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[17:58:05] *** Joins: xiongxin (~quassel@113.116.33.66)
[17:58:23] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[18:00:43] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[18:00:54] *** Joins: shangxiao (~davids@124.187.230.212)
[18:00:58] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[18:02:11] *** Joins: cheater (~Username@user/cheater)
[18:02:22] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:03:31] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[18:04:53] *** Joins: elias117 (~elias117@user/elias117)
[18:06:25] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:07:34] *** Quits: Macuser (~Macuser@216.30.159.201) (Ping timeout: 252 seconds)
[18:07:38] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[18:09:05] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[18:09:14] *** Joins: y1n (~y1n@178.115.39.139.wireless.dyn.drei.com)
[18:09:16] *** Quits: jonthesnow (~xizhendu@240e:305:7381:6400:b6be:9004:a525:ceb5) (Ping timeout: 252 seconds)
[18:09:24] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[18:12:57] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:14:11] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[18:17:06] *** Quits: greedom (~greedom@2001:16b8:2ebf:3a00:4616:5d4a:ae1a:e3a8) (Remote host closed the connection)
[18:17:20] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[18:17:30] <rendar> i saw that asyncio has some api for multiprocessing, but all of them requires to launch a new executable [fork()+exec*() APIs] ... what about i want just to fork a new process?
[18:20:39] <Wulf> rendar: sounds like a bad idea. What's wrong about exec?
[18:21:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:21:12] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Quit)
[18:21:32] <rendar> Wulf, my process loads A LOT of memory, like 64Gb of data, and i want a sub process to process that data, to exploit parallelism, that sub process should use the father process memory
[18:21:39] <rendar> instead of reloading all of that big data
[18:21:58] <Wulf> rendar: perhaps you can use proper shared memory?
[18:22:06] <rendar> i can't
[18:22:55] *** Quits: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:e5a5:5737:6a48:8bf8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:23:50] *** Joins: ubert (~Thunderbi@178.115.76.58.wireless.dyn.drei.com)
[18:24:00] <Wulf> rendar: and fork's CoW is okay for you?
[18:24:08] *** Joins: greedom (~greedom@2001:16b8:2ebf:3a00:4616:5d4a:ae1a:e3a8)
[18:24:27] *** Quits: fanis30 (~fanis30@adsl-141.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[18:24:43] <rendar> of course it is, it will use the father process memory and python variables
[18:25:02] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[18:25:14] <rendar> the father process won't modify the data
[18:25:27] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:25:32] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[18:25:34] <Wulf> and if the child does alter it, memory usage will suddenly explode
[18:26:02] <rendar> the child doesn't alter it either.. it's just reading+processing
[18:26:16] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:27:56] <Wulf> rendar: guess you'll need to hack something together. Make sure the child closes all the file descriptors and _exits when done.
[18:27:57] *** Quits: p3lim (~p3lim@ti0006q161-0896.bb.online.no) (Read error: Connection reset by peer)
[18:29:01] <bjs> rendar: remember that CoW means that reading any Python variable will copy the object
[18:29:02] *** Quits: greedom (~greedom@2001:16b8:2ebf:3a00:4616:5d4a:ae1a:e3a8) (Remote host closed the connection)
[18:29:05] <Wulf> and take care of the garbage collector. It might hurt you :)
[18:29:05] <rendar> Wulf, huh? the father process won't inherit child's file descriptors, it's the contrary
[18:29:18] <bjs> rendar: processes might not be the right decision here
[18:29:21] <Wulf> bjs: because of reference counting?
[18:29:26] <bjs> Wulf: yeahy
[18:29:33] <rendar> bjs, interesting point
[18:29:55] <rendar> bjs, but you're forgetting something
[18:30:28] <bjs> rendar: am I forgetting something or did you forget to mention something
[18:30:29] <bjs> :p
[18:30:29] <rendar> bjs, if i have a pd.DataFrame, the ref counting will CoW only the *small dataset* which encompasses the data frame, and not the actual memory of the data frame itself
[18:30:37] <Wulf> rendar: I didn't say that the parent inherits anything
[18:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:30:48] <bjs> rendar: yes it'll copy the memory too,  unless you explicitly use a shared buffer
[18:30:57] <rendar> bjs, huh? really?
[18:31:14] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:31] <rendar> bjs, how is that possible?! a pd.DataFrame is a small chunk of memory with variables and stuff, *pointing* to the bug check of memory which contains the data
[18:31:33] <Wulf> I assume only smallish data blocks are copied
[18:31:42] <bjs> Whole pages is the smallest chunk that can be copied
[18:31:48] <bjs> which is typically no less than 4k
[18:31:56] <rendar> Wulf, the page size is the granularity of CoW
[18:32:02] <rendar> 4K or 8K
[18:32:06] <Wulf> yep
[18:32:42] <rendar> hence my objection: pd.DataFrame control data is not in the same pages of the *actual* data
[18:33:18] <Wulf> rendar: then you shouldn't have issues with CoW
[18:33:31] <Wulf> still, file descriptors and garbage collection.
[18:33:41] <rendar> but i want to get the bjs point
[18:36:54] <rendar> bjs, so? how CoW would copy pd.DataFrame's data?
[18:37:58] <bjs> rendar: because it's not some magic data structure, it's just a Python object which itself has references to other things. Specifically "the data" is just a Python object, a numpy array (I assume)
[18:38:44] <bjs> now it contains a pointer to a buffer with the actual data in it, and if you have *lots* of data (e.g. whole pages of nothing but data) then those pages won't get copied
[18:38:49] <rendar> bjs, but i assume that 1) even if ref counters are incremement only 1 page will be created, 2) the data memory is separated by the control structures
[18:39:03] <rendar> that was my point
[18:39:13] <bjs> unless of course someone writes to them :P
[18:39:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:40:02] <rendar> :)
[18:40:18] <rendar> bjs, btw, returning back to the original question: i saw that asyncio has some api for multiprocessing, but all of them requires to launch a new executable [fork()+exec*() APIs] ... what about i want just to fork a new process?
[18:40:24] <rendar> i can't fork() with asyncio
[18:40:25] <bjs> this often kills numpy things though, because the memory gets quite fragmented
[18:40:32] <bjs> rendar: they don't all require exec()
[18:40:51] <bjs> infact the 'fork' method of multiprocessing (which used to be the only way?) doesn't exec
[18:40:55] <rendar> bjs, huh? asyncio can only let me specify a path for an executable
[18:41:01] <bjs> oh asyncio
[18:41:02] *** Joins: ExeciN (~ExeciN@user/nicexe)
[18:41:06] <rendar> yes
[18:41:18] <bjs> Oh you mean subprocess
[18:41:21] <bjs> not multiprocessing
[18:41:26] <Wulf> rendar: what keeps your from using fork and ignoring that you're using asyncio?
[18:41:48] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:42:01] <bjs> rendar: well,  there's no builtin asyncio multiprocessing but I guess it wouldn't be hard to make using multiprocessing and a Future
[18:42:04] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Client Quit)
[18:42:28] <rendar> Wulf, i want that asyncio eventloop will be notified when that child process will exit
[18:42:41] <Wulf> rendar: create a pipe
[18:43:15] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[18:43:18] <rendar> Wulf, ok, but i wanted to see if its possible a cleaner method
[18:43:21] *** Joins: gggpkm (~gggpkm@111.63.14.119)
[18:43:37] <rendar> i saw that the evenloop has APIs to check if a pid has been completed, right?
[18:43:43] *** Joins: p3lim (~p3lim@ti0006q161-0896.bb.online.no)
[18:43:52] <rendar> in linux it can use the new signalfd api
[18:44:16] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[18:44:17] <Wulf> rendar: yeah, that would be possible too.
[18:44:17] *** Quits: gggpkm (~gggpkm@111.63.14.119) (Max SendQ exceeded)
[18:44:27] <bjs> rendar: just make a thread that calls os.wait :P
[18:44:32] <Wulf> rendar: I don't think that a clean way can possibly exist.
[18:44:37] <bjs> or waitpid
[18:44:57] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[18:44:58] <bjs> rendar: and once the wait is done it sets a future (or use asyncio.to_thread or something)
[18:45:12] <Wulf> unless you use shared memory, of course :)
[18:45:44] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[18:45:58] <rendar> bjs, lol, i just want to avoid the waitpid polling loop
[18:46:03] <rendar> i think anyio does this correctly
[18:46:11] <bjs> rendar: polling?
[18:46:20] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[18:47:17] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 252 seconds)
[18:48:11] *** Joins: gentlinux (~gentlinux@2a02:8108:1880:294:3787:9d9d:a422:6d07)
[18:48:29] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[18:48:39] *** Joins: slav0nic (slav0nic@python.su)
[18:49:02] <rendar> bjs, well, yes, in some implementations you call waitpid with -1, to get the latest pid which has finished, continously
[18:49:25] <bjs> rendar: I'm confused why would you do that?  When you fork you know the pid
[18:49:28] <bjs> so just wait for that pid
[18:49:29] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[18:49:44] *** Joins: redrum88 (~redrum88@user/redrum88)
[18:49:44] <rendar> what about you have multiple pids
[18:50:02] <bjs> rendar: why would you have multiple pids? A fork is in two
[18:50:12] <bjs> so you get 1 extra pid
[18:50:27] <rendar> bjs, usually we have N cores, to to fully exploit parallelism you want N sub processes, so N pids, not 1 pid
[18:50:35] <bjs> rendar: so have N threads and N futures
[18:50:38] <bjs> and do whatever you want
[18:50:40] <Wulf> or double fork and wait for the first child. And signal completion using a pipe.
[18:50:53] <rendar> ok
[18:51:08] <Wulf> or for many processes, first child forks N times
[18:51:12] *** Joins: kib (~kib@user/kib)
[18:51:36] <rendar> yes, that's a cleaner solution than the N threads
[18:51:55] <rendar> but again, the eventloop should have some APIs to watch pids
[18:52:20] <rendar> my question was all about that, if someone here had experience with eventloop+waiting pids
[18:52:28] *** Quits: reset (~reset@user/reset) (Quit: reset)
[18:53:20] <bjs> rendar: I mean,  how do you think anyio/asyncio doe this?
[18:53:31] <bjs> it spawns a watcher thread that waits for the pid by calling os.waitpid
[18:53:42] <rendar> nope, it won't
[18:54:02] <rendar> i remember i saw some internal eventloop APIs once, and iirc it has something to watch pids
[18:54:11] <rendar> then it passes to the eventloop implementation how to do that
[18:54:12] <bjs> rendar: no I'm *telling* you that's what it does https://github.com/python/cpython/blob/main/Lib/asyncio/unix_events.py#L940
[18:54:17] <rendar> so if you use the uvloop library
[18:54:30] <rendar> you use the pid watcher of the libuv
[18:54:51] <rendar> bjs, that's the default implementation, yes, that could change if you use uvloop
[18:56:31] <bjs> rendar: I don't know what way you think ${other_library} might be using
[18:56:34] <bjs> if not waitpid()
[18:56:43] <bjs> or some variation
[18:56:53] <rendar> bjs, signalfd
[18:56:54] <bjs> eventually you'll get down to a thread calling waitpid
[18:57:24] <rendar> with signalfd you just get a file descriptor which sends you data, that's much clenaer in linux
[18:57:55] <rendar> it's the kernel itself that does that for you, and writes signalling data into a pipe
[18:57:58] <bjs> but how does that help
[18:58:16] <rendar> it doesn't help actually, but i will sleep better i'm using a cool API
[18:58:26] <bjs> I see
[18:58:28] <bjs> :)
[18:58:31] <rendar> ^_^
[18:59:02] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[18:59:15] <rendar> besides jokes, it helps because it's much easier to listen from an fd, that having to call waitpid, from threads/processes
[19:00:21] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[19:00:30] <rendar> bjs, https://uvloop.readthedocs.io/
[19:00:38] <rendar> working with subprocesses asynchronously.
[19:00:47] <rendar> see? it's one of the points of uvloop
[19:01:08] <bjs> rendar: I mean asyncio can also work with subprocesses asynchronously
[19:01:11] <bjs> with asyncio.subprocess :P
[19:01:33] <bjs> see https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec
[19:01:48] <rendar> bjs, but it will exec()
[19:01:51] <rendar> i only need fork()
[19:01:55] <bjs> so will uvloop won't it?
[19:02:00] <bjs> if it's implementing the same interface
[19:02:59] <rendar> bjs, nope, iirc AbstractEventloop has some APIs that will ingest pids, and will signal you when they're done, you showed the default implementation, uvloop will implement it internally calling libuv APIs
[19:03:17] <bjs> rendar: how can it not call exec? it's literally part of the specification of subprocess to call exec
[19:03:24] <bjs> if it doesn't call exec isn't it just buggy?
[19:03:50] <rendar> bjs, i'm referring to some APIs like AbstractEventLoop.WaitForPids or something like that
[19:03:54] <rendar> can't remember the name
[19:04:46] <bjs> rendar: I'm not sure what you're referring to
[19:04:52] <rendar> ok nevermind
[19:05:44] <bjs> I'm not sure what waiting for pids has to do with exec()
[19:05:47] <rendar> bjs, well, now that i think about it, with asyncio i can run working function with threads very easily, can i do that with processes?
[19:06:01] <rendar> it would imply that asyncio thinks about fork()+management of that
[19:06:05] <bjs> they seem mutually exclusive,  you can fork() and then waitpid(),  you can fork+exec and waitpid(),  you can fork() and pipe a message back, you can fork+exec and pipe a message back
[19:06:17] <bjs> rendar: "subprocess" things always exec().
[19:06:28] <bjs> multiprocessing is what might not exec, and of course you can always call os.fork() yourself.
[19:07:05] <rendar> i'm referring to the ThreadPool and ProcessPool style of programming, i just pass a python function that will be executed, right?
[19:07:19] <bjs> rendar: I mean yes it has run_in_executor if that's what you mean
[19:07:25] <rendar> yes
[19:07:30] <bjs> rendar: I'm not sure what the question is
[19:07:46] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[19:07:53] <KirkMcDonald> fork()ing without exec*()ing is always pretty fraught. It's the kind of thing where if a program is doing it, then suddenly that's the most important fact about the program.
[19:08:31] <rendar> KirkMcDonald, what about the parent process has a huge amount of data in RAM, and the N children processes would do computation on that data?
[19:08:44] <bjs> rendar: threads :P
[19:08:48] <KirkMcDonald> rendar: Certainly, fork() can provide advantage there.
[19:08:51] *** Quits: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:09:19] <KirkMcDonald> rendar: But you'll constantly need to remember that this is what the program is doing.
[19:10:12] <rendar> bjs, which with GIL won't exploit parallelization, i guess
[19:10:22] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[19:10:34] *** Joins: node1 (~node1@user/node1)
[19:10:38] <bjs> rendar: I mean if you're using pandas or numpy the GIL isn't an issue is it
[19:10:47] <KirkMcDonald> The extent to which threads do or do not provide parallelism is complicated.
[19:11:02] <KirkMcDonald> In Python, I mean.
[19:11:08] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[19:11:15] *** Joins: tar_xvf (~tar@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[19:11:50] *** Joins: georgios (~georgios@user/georgios)
[19:11:53] <rendar> KirkMcDonald, exactly
[19:12:35] <KirkMcDonald> It's *more* complicated than saying it doesn't happen.
[19:13:12] <rendar> i just find processes a better solution for this kind of problem
[19:15:01] <KirkMcDonald> In my experience, using fork() for parallelism is so all-consuming that it's difficult to generalize. Libraries which do attempt to generalize it (like multiprocessing, in certain contexts) can get... weird.
[19:16:08] <rannnn8888> ChrisWarrick You know how i use this specpic on the apiback ? its not work on this spepic page  the Django Debug Toolbar
[19:16:49] <rendar> KirkMcDonald, but python offers ProcessPool which basically is fork() + executing a python function in the child process, right?
[19:17:23] <KirkMcDonald> As soon as you're calling fork(), you need to consider how that's going to interact with every piece of state in the process.
[19:18:05] <KirkMcDonald> This makes it difficult to encapsulate in a library. Using fork() means your whole program is suddenly in the business of being forked.
[19:19:13] <KirkMcDonald> There are various ways of limiting the effect, but it requires consideration. I'm not saying it can't be done, or that it can't be useful, but it's rarely simple.
[19:19:38] <rendar> ok
[19:19:52] <rendar> KirkMcDonald, but ProcessPool should abstract all of this, if i got it
[19:20:26] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:22:12] *** Joins: MercilessDeth (~brad@136.49.61.2)
[19:23:40] *** Quits: xiongxin (~quassel@113.116.33.66) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:23:58] *** Quits: SteveR (~SteveR@192.146.154.3) (Quit: Client closed)
[19:24:08] *** Quits: dharrigan (~dharrigan@user/dharrigan) (Quit: ZNC - https://znc.in)
[19:24:10] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[19:25:00] *** Joins: dharrigan (~dharrigan@user/dharrigan)
[19:26:21] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[19:27:19] *** Joins: Azin (~Azin@user/azin)
[19:28:22] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[19:29:23] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:31:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:33:03] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[19:36:07] *** Joins: BUSY (~BUSY@user/busy)
[19:36:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[19:37:51] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[19:38:57] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[19:40:07] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[19:43:21] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[19:44:53] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:50:31] *** Joins: jonaskabrink (~jonaskabr@i5E86663E.versanet.de)
[19:51:48] *** Joins: ExeciN (~ExeciN@user/nicexe)
[19:56:54] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-a570-cd91-5bba-ca1b.fixed6.kpn.net) (Remote host closed the connection)
[19:57:52] *** Joins: daveo (~user@184.63.224.148)
[19:58:10] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-1571-9d91-2401-969.fixed6.kpn.net)
[19:58:53] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[19:58:54] *** Joins: gggpkm (~gggpkm@60.10.194.45)
[19:59:06] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[19:59:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:59:50] *** Parts: daveo (~user@184.63.224.148) ()
[20:01:13] *** Joins: fikran (~fikran@user/fikran)
[20:02:08] *** Quits: y1n (~y1n@178.115.39.139.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[20:02:43] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[20:03:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[20:03:40] *** Quits: gggpkm (~gggpkm@60.10.194.45) (Ping timeout: 252 seconds)
[20:05:17] *** Joins: jazzy (~jaziz@2600:380:8479:d098:94a6:146f:5840:e64b)
[20:06:09] *** Quits: realies (~realies@user/realies) (Quit: ~)
[20:06:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[20:07:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:08:11] *** Joins: thisirs (~user@2a01cb0c81fd8d003c757bf90631ca98.ipv6.abo.wanadoo.fr)
[20:09:57] <rannnn8888> Hey i make query and its take like a 6-8 sec to response i have index in the DB like this order Symbol,timestamp,Fllll,team,stats this the def query how i can make its faster :X ? https://bpa.st/LJJA
[20:11:07] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[20:11:23] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:11:59] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[20:12:07] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[20:12:28] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[20:13:36] <axisys_> how do split a word with multiple delimeters? text.split('_-') here I used two delimeters and python does not like it
[20:14:09] *** Quits: ubert (~Thunderbi@178.115.76.58.wireless.dyn.drei.com) (Remote host closed the connection)
[20:14:19] <axisys_> a-text_with-hypen => ['a','text','with','hypen'] want like this
[20:14:52] *** Joins: ubert (~Thunderbi@178.115.76.58.wireless.dyn.drei.com)
[20:15:13] *** Joins: y1n (~y1n@178.115.54.79.wireless.dyn.drei.com)
[20:15:43] *** Quits: jonaskabrink (~jonaskabr@i5E86663E.versanet.de) (Quit: Client closed)
[20:15:57] *** Joins: realies (~realies@user/realies)
[20:16:52] *** Quits: thisirs (~user@2a01cb0c81fd8d003c757bf90631ca98.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[20:17:05] <grym> axisys_: https://docs.python.org/3/library/re.html#re.split
[20:17:06] <axisys_> I guess I should use re.split('[-_]',text)
[20:17:09] <grym> yup
[20:17:17] <axisys_> grym: thanks
[20:17:33] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:18:16] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[20:19:06] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[20:23:29] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[20:24:01] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[20:24:19] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[20:26:40] *** Quits: realies (~realies@user/realies) (Quit: ~)
[20:26:44] *** Joins: demirok (~bell@user/demirok)
[20:29:16] *** Quits: rsx (~dummy@ppp-188-174-145-233.dynamic.mnet-online.de) (Quit: rsx)
[20:30:51] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[20:30:54] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[20:31:02] *** Joins: thiras (~thiras@user/thiras)
[20:31:31] *** Joins: lenswipe (~lenswipe@pool-173-48-154-44.bstnma.fios.verizon.net)
[20:31:33] <lenswipe> hi folks
[20:32:24] <lenswipe> Trying to use python to do some scripting on an embedded device. As such I can't really install a ton of dependencies. I'm trying to use python to run a series of commands, but the problem is that one of those commands involves switching to a privileged shell.
[20:33:13] <lenswipe> So, os.system("configure") switches to the privileged shell...but then the next call to os.system with the privileged command executes in a completely different shell and as such the command fails.
[20:33:33] <lenswipe> What I'd like to do is have some kind of handle to the original shell so that things execute in the correct context (if that makes sense)
[20:34:03] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[20:36:27] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[20:36:45] *** Joins: pycurious (~Adium@user/pycurious)
[20:37:07] *** Joins: rn2208 (~rn2208@5.165.15.43)
[20:37:33] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[20:38:20] <pycurious> When I run a async eventloop, and have a lot of handlers added to the loop (threads) - my starting of the eventloops takes a lot of time. I'm still trying to debug that. Any ideas on how to debug this kind of code? Or perhaps someone here has already seen this problem? — all this code is behind tornado.ioloop.IOLoop.current().start()
[20:38:30] *** Joins: realies (~realies@user/realies)
[20:38:34] *** Joins: nomic (~nomic@185.192.69.207)
[20:40:10] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[20:41:34] *** Quits: Azin (~Azin@user/azin) (Quit: Leaving...)
[20:41:38] <supakeen> lenswipe: Generally when you start a process that you want to communicate with you use subprocess.Popen so you can interact with the stdin and stdout of that process.
[20:41:44] <supakeen> So that'd be a good avenue to look at.
[20:42:00] *** Joins: SteveR (~SteveR@192.146.154.3)
[20:42:21] <lenswipe> supakeen, ah, thank you.
[20:42:24] <supakeen> Haven't seen things taking a long time to start with Tornado, pycurious. What kind of handlers are you talking about? RequestHandlers?
[20:42:29] <lenswipe> I'll give that a shot
[20:42:31] *** Quits: lenswipe (~lenswipe@pool-173-48-154-44.bstnma.fios.verizon.net) (Quit: Leaving)
[20:43:00] *** Joins: cheater (~Username@user/cheater)
[20:44:17] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 246 seconds)
[20:45:28] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 252 seconds)
[20:46:16] <pycurious> supakeen: yes, just rest api. I tried to replace the asyncio eventloop with uvloop - that's giving timeout errors
[20:46:50] <pycurious> supakeen: tornado.ioloop.IOLoop.current().start() - this line takes 10 seconds before the rest api starts to work for me.
[20:46:59] <supakeen> Weird, can you share some code that reproduces the issue?
[20:47:00] *** Quits: SteveR (~SteveR@192.146.154.3) (Ping timeout: 256 seconds)
[20:48:50] <pycurious> supakeen: I dont have a short snippet to reproduce that code yet. But in summar - I create http_server, then do a http_server.bind(808X, "127.0.0.1") and then do http_server.start(num_process=4), and then do IOLoop.start() in the child processes.
[20:49:22] <supakeen> I haven't seen that take particularly long normally :)
[20:50:22] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[20:50:25] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[20:50:29] <pycurious> supakeen: Am I reading this right that IOLoop.current().start() runs this function -> https://github.com/tornadoweb/tornado/blob/790715ae0f0a30b9ee830bfee75bb7fa4c4ec2f6/tornado/platform/asyncio.py#L191
[20:50:44] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:6047:4a86:f8b1:d9a8)
[20:50:57] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[20:51:23] <supakeen> You are reading that right, yes.
[20:51:36] <aac> hey . i want to represent 11:00 and 11:30 (i want to use those values). What is the best apprach ?? to convert to stirng? use datetime??
[20:51:55] <supakeen> Tornado runs on the 'normal' asyncio eventloop by default.
[20:52:31] <pycurious> supakeen: is there a way to profile that line-> IOLoop.current().start() ?
[20:52:59] <pycurious> supakeen: I tried uvloop.install() but that gives me timeout errors - just hangs
[20:53:25] <supakeen> Not really, like the start shouldn't do that much however the coroutines start running when you call that.
[20:53:27] <han-solo> aac: depends on how you want to use it i guess
[20:53:31] <supakeen> So it's possible that something that starts is blocking.
[20:53:37] <supakeen> And is preventing everything from continuing.
[20:53:53] <aac> i want a string representation..but also it would be nice if it was a integer..dont know
[20:54:11] <aac> im associating a 18:00 to an object
[20:54:18] <pycurious> supakeen: Possibly true. Where is that list of coroutines? how do i find out what is blocking there?
[20:54:46] <aac> perhaps i use time , and then represent it using string?
[20:54:56] *** Joins: somlis (~somlis@user/somlis)
[20:54:59] <aac> how can i achieve 18:00 format on time?
[20:55:06] <supakeen> pycurious: I believe asyncio has some properties on its loop that contain those things but perhaps stepping through with pdb would be better.
[20:55:21] <pycurious> supakeen: I'm writing my handlers as normal python syntax. Just functions/classes. I dont use async/await stuff on the rest api. Things work, once they startup.
[20:55:25] <han-solo> aac: the str(datetime.time(..)) would be that i think
[20:55:39] <han-solo> ah, you will get seconds too, so `18:00:00`
[20:55:47] <aac> ok np
[20:55:47] <aac> thks
[20:55:55] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 252 seconds)
[20:56:15] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[20:56:36] <pycurious> supakeen: with multiple processes stepping thru pdb is a problem - and am not sure if i set processes. = 1- i can reproduce the problem - but i can try that for sure
[20:57:02] <supakeen> sure, i have to step out for a bit but at least you have something to try out
[20:57:07] <supakeen> be back later
[20:57:36] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[20:57:38] <pycurious> supakeen: thanks
[20:58:05] *** Quits: litharge (litharge@libera/bot/litharge) (Read error: Connection reset by peer)
[20:58:37] *** Quits: tracey (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[20:58:37] *** Quits: vimart (~vimart@185.69.144.102) (Ping timeout: 252 seconds)
[20:59:01] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[20:59:48] *** Quits: rn2208 (~rn2208@5.165.15.43) (Remote host closed the connection)
[20:59:50] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:59:52] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:00:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[21:00:27] *** Joins: litharge (litharge@libera/bot/litharge)
[21:00:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:02:29] *** ChanServ sets mode: +o litharge
[21:03:12] *** Joins: elena (~elena@31.173.85.129)
[21:04:00] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[21:05:49] *** elena is now known as elena_re
[21:06:17] *** Joins: Zer000 (~phil@64.137.132.26)
[21:07:07] <pycurious> I've a pid for a python program that is asking for manual input on the screen. How can I connect to that tty/terminal to interact with the program?
[21:07:18] *** Quits: realies (~realies@user/realies) (Quit: ~)
[21:08:00] *** Joins: Akuli (~Akuli@87-94-109-81.bb.dnainternet.fi)
[21:08:02] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[21:09:18] <yitz> Open the TTY the process is running in
[21:09:56] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[21:11:37] <aphysically> ooooo the generic type of concurrent.futures.future is meant to be the type of the result() method
[21:11:55] <aphysically> I was confused by that >.>
[21:12:17] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[21:13:09] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[21:13:18] <aphysically> I suddenly understand generic classes now
[21:13:20] <aphysically> lol
[21:15:12] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[21:16:35] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[21:16:51] *** Joins: CombatVet (~c4@user/combatvet)
[21:17:00] *** Quits: elena_re (~elena@31.173.85.129) (Quit: WeeChat 3.2)
[21:17:17] <wyre> hi guys, how can I get for this widget a vertical scroll bar? https://wxpython.org/Phoenix/docs/html/wx.TextCtrl.html
[21:17:19] *** Joins: elena (~elena@31.173.85.129)
[21:17:52] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 252 seconds)
[21:18:34] <aphysically> although I do wish it was clearer sometimes for some generic classes what their generic typevar is typing (although in most cases it's clear from context)
[21:18:41] <grawity> pycurious: generally you can't in any normal way
[21:19:01] <aphysically> ideally this would be in the documentation but typeshed being separate makes this weird
[21:19:47] *** elena is now known as elena_re
[21:19:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:20:26] *** Joins: teut (~teut@182.69.68.230)
[21:21:26] <wyre> maybe am I using the wrong widget?
[21:22:18] <teut> https://bpa.st/WBQA  I wrote this algo for detect cycle in directed graph  https://www.youtube.com/watch?v=rKQaZuoUR4M
[21:22:48] <teut> https://bpa.st/CHZA I get TLE for this case
[21:23:03] <aphysically> I have an I/O interoperating class that could technically work on bytes too, but I wasn't using AnyStr cause it would need to be coordinated around the entire class and not a single function, but now I see the light of generic *classes*
[21:23:22] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[21:23:31] <teut> I tried running it in vscode and it just kept running
[21:24:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:24:39] <teut> how do I even debug it since the test case is so grand?
[21:24:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:26:03] <wyre> actually I need a widget to show a json enhanced
[21:26:10] <wyre> which one do you suggest me?
[21:26:40] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 252 seconds)
[21:27:20] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[21:28:12] *** Joins: markcerv (~markcerv3@c-24-5-22-21.hsd1.ca.comcast.net)
[21:28:52] <CrtxReavr>   /win 14
[21:28:59] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[21:29:03] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[21:29:16] *** Quits: elena_re (~elena@31.173.85.129) (Read error: Connection reset by peer)
[21:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[21:33:08] <wyre> that was to me CrtxReavr? 🤔
[21:33:11] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Quit: Leaving)
[21:33:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:33:26] <BlackBishop> ok... I'm ready to give my discord.py bot virtualenv another chance. Still ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1145) :|
[21:33:45] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[21:33:56] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[21:34:39] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[21:35:01] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[21:35:14] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[21:36:12] *** Joins: Auron (~Auron956@user/auron)
[21:37:11] *** Quits: teut (~teut@182.69.68.230) (Quit: Client closed)
[21:38:11] *** Quits: jwhisnant_ (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:38:39] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[21:41:16] <BlackBishop> So, how can I debug ? I tried deactivating the virtualenv, recreating it from scratch... No luck. Works on my machine, but not in the venv ! Just trying a simple example from https://github.com/Rapptz/discord.py
[21:42:12] <markcerv> Good morning everyone.  I've been using BeautifulSoup for parsing HTML for a while.  Recently the code inside of the HTML got "MS-Word-ified", and my find_all no longer works.  Can you please help me?  Here's a working paste with table1 and table2:  https://bpa.st/3XVA
[21:42:15] *** Joins: FreEm1nD (~freemindm@mail.guarapari.store)
[21:42:22] <ChrisWarrick> BlackBishop: what do you mean by "on my machine"?
[21:45:29] <tar_xvf> I built a discord bot using that library and I don't recall ever working with SSL certificates, if anything it must have just gone on in the background.
[21:45:41] <tar_xvf> BlackBishop: what do you mean by virtualenv discord bot?
[21:49:11] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f)
[21:49:23] <BlackBishop> ChrisWarrick: outside of the virtualenvironment
[21:49:34] <BlackBishop> tar_xvf: worked for me for an hour or so 'till it decided not to work ! :|
[21:49:46] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:51:02] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:51:29] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:51:44] *** Quits: rsrx (~rsrx@103.225.150.81) (Quit: Leaving)
[21:51:55] <BlackBishop> that's it ... I'm quitting IT. now it works!
[21:52:24] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[21:53:14] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[21:53:16] <BlackBishop> the error pops up as soon as I add import mysql.connector :|
[21:53:27] *** Joins: davor (~davor@user/davor)
[21:53:35] *** Quits: davor_ (~davor@user/davor) (Ping timeout: 246 seconds)
[21:53:40] *** Quits: ElPresidenteP (~ElPreside@2600:1700:3d10:4870:7136:d153:c8ad:1941) (Ping timeout: 252 seconds)
[21:55:01] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[21:55:51] <ChrisWarrick> BlackBishop: first hint, don’t use mysql.connector, there are much better libraries
[21:56:24] <ChrisWarrick> BlackBishop: second, are you sure you’re using the same python version as you're using outside? how do you run your code outside of the venv and how do you create the venv?
[21:57:01] <BlackBishop> hah, it seems that if I put that import after the discord import, it's ok !
[21:57:13] <BlackBishop> ChrisWarrick: ok :) what do you recommend ?
[21:57:34] <BlackBishop> the venv was simply created by doing virtualenv venv
[21:59:13] <ChrisWarrick> BlackBishop: mysqlclient
[21:59:38] <ChrisWarrick> BlackBishop: remove the venv and create one using the venv tool: `python3 -m venv venv`
[22:04:37] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[22:08:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[22:08:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[22:09:03] <BlackBishop> seems to work so far
[22:09:09] <BlackBishop> need to adapt the sql code
[22:09:24] <grym> order-of-import errors just, shouldn't happen :(
[22:09:31] <grym> at least not in python
[22:10:32] *** Joins: fikran (~fikran@user/fikran)
[22:11:34] <BlackBishop> that's what I thought too ..
[22:13:40] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[22:15:24] *** Joins: upsala (~zcb@185.213.155.160)
[22:16:32] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[22:17:16] *** Quits: LiftLeft (~LiftLeft@154.21.114.197) (Ping timeout: 252 seconds)
[22:21:45] <aphysically> huh, mypy confusing me a bit here
[22:22:34] <aphysically> switching a str to a generic type caused mypy to be unable to determine the type of things unrelated to the switch, but reveal_type has no problem on them :\
[22:22:41] <aphysically> probably I"ll make a mypy playground
[22:23:40] *** Joins: mike18 (~geri@216.200.232.252)
[22:24:04] <mike18> hi - i have 5 threads and 5 connections - how can i assign that 5 connections to my worker threads?
[22:24:09] <mike18> i use a thread pool
[22:26:35] <aphysically> okay, this class where I've converted it to a generic using AnyStr, you can see mypy says it can't determine the type of some variables unrelated to that change: https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=34106a16c13172a37973e5891d4b80bc
[22:27:05] <aphysically> but here the same code before str->AnyStr, mypy doesn't have complaints https://mypy-play.net/?mypy=latest&python=3.9&flags=strict&gist=0333af17b983e73c300f7ee204e76557
[22:27:44] <aphysically> diff of changes https://bpa.st/CQTQ
[22:28:03] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[22:28:14] <aphysically> doing reveal_type where it says it's having trouble indicates the correct types
[22:28:20] <mike18> i use a https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example ...
[22:29:18] <pycurious> supakeen: pdb trace doesnt work - ioloop.start() errors out with some wierd error with set_trace() -> db.BdbQuit
[22:31:01] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[22:31:05] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[22:31:31] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[22:31:35] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:34:07] *** Joins: r1ch (~r1ch@user/r1ch)
[22:36:38] *** Quits: kurfen (~kurfen@103.212.227.188) (Ping timeout: 252 seconds)
[22:36:39] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[22:37:42] *** Joins: kurfen (~kurfen@37.120.204.67)
[22:40:09] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[22:40:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:41:17] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[22:41:46] *** Joins: WarpedAI (~Warped@user/warped)
[22:42:28] *** Joins: nergar (~quassel@177.225.147.106)
[22:42:42] <aphysically> might push this one to mypy people, kinda confused
[22:42:56] *** Quits: nergar (~quassel@177.225.147.106) (Client Quit)
[22:43:40] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 252 seconds)
[22:43:48] <mike18> hi - i have 5 threads and 5 connections - how can i assign that 5 connections to my worker threads?
[22:43:59] <mike18> similar to here: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
[22:44:04] <mike18> any idea?
[22:45:37] *** Quits: r1ch (~r1ch@user/r1ch) (Quit: bye!)
[22:47:53] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:49:36] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:52:03] *** Quits: subho (~subho@49.37.55.55) (Quit: subho)
[22:52:16] *** Joins: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee)
[22:53:26] *** Quits: Asmodee[T] (~Asmodee@gateway/tor-sasl/asmodee) (Client Quit)
[22:55:17] *** Joins: magla (~gelignite@55d46010.access.ecotel.net)
[22:55:18] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:56:41] *** Joins: nergar (~quassel@177.225.147.106)
[22:57:20] *** Joins: adder (~adder@user/adder)
[22:58:55] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[22:59:23] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9027:b6b5:d361:d3bb)
[23:00:51] <cluelessperson> mike18, You generally create a pool of connections in a queue that can be pulled and utilized by threads when needed,  then put them back in the queue.
[23:01:33] *** Joins: Heldwin (~Heldwin@gateway/tor-sasl/asmodee)
[23:01:38] *** Quits: jbe (~hellother@lysator/root/jbe) (Ping timeout: 250 seconds)
[23:02:25] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[23:02:42] *** Joins: teut (~teut@182.69.68.230)
[23:02:48] *** Quits: Heldwin (~Heldwin@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[23:02:49] *** Joins: paul424 (~tom@ip-37-248-159-73.multi.internet.cyfrowypolsat.pl)
[23:03:42] *** Joins: node1 (~node1@user/node1)
[23:04:25] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[23:05:13] *** Joins: Heldwin (~Heldwin@gateway/tor-sasl/asmodee)
[23:05:17] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:06:22] *** Quits: Heldwin (~Heldwin@gateway/tor-sasl/asmodee) (Remote host closed the connection)
[23:07:58] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-41dd-c7b6-6757-fde9.res6.spectrum.com) (Ping timeout: 265 seconds)
[23:08:21] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) ()
[23:08:41] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[23:08:45] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[23:13:25] *** Joins: kosh (~kosh@user/kosh)
[23:13:57] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[23:14:00] *** Quits: BSaboia (~bsaboia@177.37.198.122) (Quit: This computer has gone to sleep)
[23:14:31] *** Quits: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14) (Remote host closed the connection)
[23:14:49] *** Joins: Pandadub (~Barones@2804:7f3:8987:d597:a526:59d4:bc0c:1f14)
[23:17:03] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[23:17:23] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[23:18:06] <mike18> cluelessperson: thats what i exactly did
[23:18:17] <mike18> or 1 connection and add a mutex?
[23:19:30] *** Quits: JacobFrost (sid494713@id-494713.tinside.irccloud.com) ()
[23:19:48] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[23:21:26] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[23:22:14] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[23:22:19] *** Joins: pycurious (~Adium@user/pycurious)
[23:22:43] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[23:24:19] *** Joins: vancz (~vancz@user/vancz)
[23:27:01] *** Parts: teut (~teut@182.69.68.230) ()
[23:28:15] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[23:29:47] <vancz> are there any other good reviews and recommendations of python books other than the one in the topic? sadly there doesnt seem (or at least I couldnt find) a quality stackoverflow wiki like the one for c++
[23:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[23:30:40] <Wulf> vancz: I didn't read any book on python and it worked out for me.
[23:30:57] <vancz> Im more looking for stuff I can show new people
[23:31:01] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 252 seconds)
[23:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:33:39] <mike18> cluelessperson: thats what i exactly did - what about 1 connection and add a mutex?
[23:34:39] <vancz> ok this looks like a decent start https://libredd.it/r/learnprogramming/wiki/index https://libredd.it/r/learnpython/wiki/index
[23:37:06] *** Joins: nbao (~nbao@187.20.181.193)
[23:37:21] *** Quits: magla (~gelignite@55d46010.access.ecotel.net) (Quit: Stay safe!)
[23:37:27] *** Quits: node1 (~node1@user/node1) (Ping timeout: 265 seconds)
[23:39:22] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[23:42:02] <cluelessperson> mike18, or make another worker to handle a queue of work to handle on the single connection
[23:43:16] *** Joins: jbe (~hellother@lysator/root/jbe)
[23:43:54] *** Joins: moog (~moog@107.77.244.136)
[23:44:19] *** Quits: mike18 (~geri@216.200.232.252) (Ping timeout: 252 seconds)
[23:46:23] *** Quits: CoderCop (~CoderCop@user/codercop) (Quit: WeeChat 3.0.1)
[23:46:37] *** Joins: riv (river@tilde.team/user/river)
[23:46:38] <riv> hey
[23:46:44] <riv> how do I generate a list of lists?
[23:47:00] <Wulf> riv: [[],[]]
[23:52:09] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (Quit: byeee)
[23:53:22] *** Joins: vd178565 (~vd1785@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[23:53:30] *** vd178565 is now known as vd
[23:54:56] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[23:56:16] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:fc18:bec7:2d8f:672f) (Ping timeout: 256 seconds)
[23:56:16] *** Quits: vd1785 (~vd17@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:56:21] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[23:56:58] *** Joins: noarb (~noarb@user/noarb)
[23:59:39] *** Quits: noarb (~noarb@user/noarb) (Client Quit)
