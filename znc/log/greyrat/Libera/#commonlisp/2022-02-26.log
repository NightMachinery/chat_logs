[00:01:37] <Bike> mm, well, yes, the compilation process expands all macros, so changes to the definition of a macro don't affect previously compiled uses
[00:02:26] <Bike> usually i just do the broad recompiles you described. another thing you can do sometimes is make macros fairly minimal, e.g. have a with-whatever macro expand into a call of the call-with-whatever function
[00:02:41] <Bike> then you can change the definition of call-with-whatever and expect that to affect things properly
[00:07:22] <jmes> Okay thanks! For my small-ish project it's still fine to reload everything but it doesn't feel right. I just wanted to check and see if any lispers could steer me straight
[00:08:22] <White_Flame> do you use an .asd file?
[00:15:08] <Xach> For complex macros I sometimes implement it by collecting the incoming source into an object, and then use functions to generate the resulting source code, so changing & compiling the component functions has an immediate effect. That's not super-common for me, but it happens sometimes.
[00:18:10] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:18:17] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:19:26] <jmes> White_Flame: yes
[00:21:36] <jmes> Xach: sounds a little odd but if it works it works!
[00:25:27] <Xach> The last time I did it, it was for a defclass-like macro that had a lot of interacting component pieces, so gathering the bits in one place and passing it around to simpler functions helped.
[00:26:00] <Xach> I didn't have to get everything right in one complicated template-heavy pass
[00:27:57] *** Quits: hashfunc1818 (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (Ping timeout: 240 seconds)
[00:46:37] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:53:35] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[00:55:17] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[00:55:29] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 250 seconds)
[00:56:11] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 256 seconds)
[00:56:24] *** Joins: utis (~utis@vpn-client069.uio.no)
[01:02:22] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[01:08:15] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:30:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[01:32:24] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[01:32:25] *** Joins: Oladon (~olad@98.43.81.226)
[01:34:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:40:09] <dbotton> When doing a change-class will the initforms be set on the slots being added?
[01:40:36] <Shinmera> Yes as per shared-initialize.
[01:41:07] <Bike> assuming an initarg wasn't provided for them
[01:41:40] <dbotton> That is case. I’m seeing some unbound for some strange reason
[01:41:53] <dbotton> I’ll keep hunting why
[01:49:39] <dbotton> Thanks you, was user error on my part as expected :)
[01:49:49] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[01:53:54] *** Quits: stylewarning (sid241636@2a03:5180:f:1::3:afe4) (Changing host)
[01:53:54] *** Joins: stylewarning (sid241636@quil/stylewarning)
[01:58:38] *** Quits: wacki (~wacki@87.122.86.181) (Quit: Leaving.)
[02:11:01] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[02:13:38] <dbotton> Is there an easy way to reverse the order of maphash?
[02:14:51] *** Quits: dmh (~dmh@user/dmh) (Quit: rip)
[02:16:22] <Shinmera> maphash has no guaranteed order anyway, so what do you mean?
[02:26:30] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[02:28:43] <dbotton> I wanted to try an experiment with the order that was being returned. I’ll just not be lazy about it. Somehow I was thinking things were returned in order of the keys but no idea why was thinking that.
[02:29:44] <dbotton> I think time to take a break. :(
[02:37:46] *** Quits: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net) (Quit: Leaving...)
[02:41:43] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:46:29] *** Joins: karlosz (~karlosz@47.151.136.69)
[03:00:33] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[03:05:40] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:07:07] *** Quits: amb007 (~a_bakic@5.149.174.181) (Ping timeout: 256 seconds)
[03:11:00] *** Quits: pve (~pve@37-136-254-49.rev.dnainternet.fi) (Quit: leaving)
[03:14:35] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:14:52] *** Joins: eugercek (~user@user/eugercek)
[03:15:11] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[03:17:48] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[03:18:00] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[03:45:19] *** Quits: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net) (Ping timeout: 256 seconds)
[03:45:48] *** Joins: rgherdt (~rgherdt@port-92-193-217-5.dynamic.as20676.net)
[03:49:35] *** Joins: wmblathers (~wmblather@162-199-148-123.lightspeed.mdsnwi.sbcglobal.net)
[03:49:58] *** Joins: Oladon (~olad@98.43.81.226)
[03:55:27] *** Joins: dmh (~dmh@user/dmh)
[03:59:30] *** Quits: varjag (~user@scandic757.host.songnetworks.se) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[04:32:23] *** Quits: cosimone` (~user@93-34-132-33.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[04:33:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:34:17] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:44:08] *** Joins: Everything (~Everythin@37.115.210.35)
[04:49:45] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:54:12] *** Quits: random-nick (~random-ni@87.116.179.129) (Ping timeout: 240 seconds)
[05:05:49] *** Joins: dirtcastle (~dirtcastl@2409:4072:e95:f9da:6c3a:49ff:fe7a:4a86)
[05:08:37] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:19:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:24:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:03:54] *** Joins: akoana (~ah@user/akoana)
[06:21:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[06:46:16] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[06:48:14] *** Parts: nckx (~nckx@tobias.gr) (Leaving)
[06:52:31] *** Joins: notzmv (~zmv@user/notzmv)
[06:57:39] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[07:13:57] *** Joins: Guest23 (~Guest23@cpe-74-137-85-1.kya.res.rr.com)
[07:14:45] *** Quits: Guest23 (~Guest23@cpe-74-137-85-1.kya.res.rr.com) (Client Quit)
[07:26:37] *** Joins: ssafar (~simon@c-73-158-251-170.hsd1.ca.comcast.net)
[07:28:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[07:32:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:32:19] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:38:50] *** Joins: Oladon (~olad@98.43.81.226)
[07:39:03] <beach> Good morning everyone!
[07:45:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:53:31] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:00:12] *** Joins: semz (~semz@user/semz)
[08:01:53] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[08:07:17] *** Quits: dirtcastle (~dirtcastl@2409:4072:e95:f9da:6c3a:49ff:fe7a:4a86) (Ping timeout: 240 seconds)
[08:07:27] *** Joins: dirtcastle (~dirtcastl@103.43.203.229)
[08:39:07] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[08:44:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:47:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[08:49:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:00:21] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[09:19:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:24:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:25:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[09:27:32] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:34:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:39:26] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:08:41] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:5bf7:7723:bd1c:6732) (Ping timeout: 245 seconds)
[10:21:45] <s-liao> https://plaster.tymoon.eu/view/2957#2957
[10:22:32] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[10:22:53] <s-liao> beach do you have time to take a look?
[10:25:41] *** Joins: amb007 (~a_bakic@5.149.174.181)
[10:25:47] <beach> Sure, give me a minute.
[10:29:00] *** Quits: dirtcastle (~dirtcastl@103.43.203.229) (Ping timeout: 240 seconds)
[10:32:05] <beach> What is .BIND?
[10:32:25] <s-liao> http://smug.drewc.ca/tutorial.html
[10:32:59] <s-liao> (defun .bind (parser function)
[10:33:00] <s-liao>   (lambda (input)
[10:33:00] <s-liao>     (loop :for (value . input) :in (run parser input)
[10:33:01] <s-liao>           :append (run (funcall function value) input))))
[10:33:50] <beach> So I would have to study smug in order to understand why your code doesn't work?
[10:34:13] <s-liao> Okay
[10:35:10] <s-liao> Let me try the other case as well.
[10:35:23] <beach> Maybe someone who already knows smug would be a better choice.
[10:38:04] <s-liao> Yes
[10:38:12] <s-liao> (setq qq (.bind (.item)
[10:38:12] <s-liao>              (lambda (char)
[10:38:13] <s-liao>                (.identity (list :char char)))))
[10:38:57] <s-liao> Without the if and apply, it works
[10:39:24] *** Quits: utis (~utis@vpn-client069.uio.no) (Ping timeout: 240 seconds)
[10:39:34] <s-liao> Like (funcall qq "foo")
[10:41:05] <beach> I think you need to give more information than "works"/"doesn't work".
[10:41:39] *** Joins: utis (~utis@84.208.160.26)
[10:41:41] <s-liao> Okay
[10:41:57] <beach> But seriously, I am not the right person for this.  I don't know smug, so I don't know what .bind does.
[10:42:15] <s-liao> Me either.
[10:42:43] <s-liao> The bind part, I have not get it yet
[10:42:48] <s-liao> That is Okay
[10:43:15] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:45:34] <s-liao> add .bind https://plaster.tymoon.eu/view/2957#2957
[10:49:10] <s-liao> Edit the content again at the linker https://plaster.tymoon.eu/view/2957#2957.
[10:50:36] <beach> I am sorry do disappoint you, but it would require way too much work for me to understand this code, and since you are not giving us any error messages or anything, that makes it even harder.  I just don't have that kind of time.
[10:50:37] <ck_> I don't want to appear smug either (scnr), but maybe this is a good opportunity to get into the habit of debugging practices
[10:52:20] <s-liao> Okay, you mean trace the function.
[10:52:21] <ck_> I don't understand the code either, but I can see that for some of the function calls you have in the body of (.bind (.item) ...), you supply an argument, for some you don't, which looks a little suspicious to me not knowing any details
[10:52:31] <s-liao> I just started.
[10:52:37] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[10:52:53] <ck_> go from the inside out, what do you expect the components to be called with? Call them by hand, see if they work, then build up larger pieces and so on
[10:54:16] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[10:55:44] <s-liao> Yes.
[10:58:02] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:58:43] <ck_> beach: "rate my educating skills" :)
[11:00:34] <beach> Heh!
[11:04:55] <beach> s-liao: I think you are grossly overestimating the ability for someone like me to understand your code with that little information available.  The very least you need to do is to supply the result of your code, and the result you expected.  I also think that it might not be optimal if you are relatively new to the language to use an external library.
[11:05:49] <White_Flame> also, the more you understand Common Lisp itself, the better suited you are to debug & understand what's going on, before having all these external complexities thrown at you
[11:06:22] *** Joins: shka (~herr@109.231.3.55)
[11:06:23] <beach> Exactly.
[11:10:07] <s-liao> What I did in the code , just have the input of predicate.Then call the CLOSURE.
[11:10:58] <s-liao> The other one does not need the predicate, then call the CLOSURE, it works
[11:11:55] <s-liao> The first one has the Evaluation aborted
[11:12:08] <s-liao> The second one does not have.
[11:14:27] <beach> Again, the very least you need to do is to supply the error message when an error is signaled.  Maybe you don't know how to interpret those messages yourself, but that is something you need to learn, and other people here use those messages as crucial clues to the problem.
[11:14:38] <s-liao> They port this package into their package. This one is an originate verison of it. That is why I come into Common Lisp. try to understand it more naturally.
[11:14:48] <beach> So if you don't supply those message, you are making life much harder for people who try to help you.
[11:15:55] <s-liao> Okay. I put the Backtrace as well.
[11:19:10] <s-liao> Maybe better there is one person have been working with this lib before.
[11:20:06] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[11:23:45] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:24:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[11:25:45] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[11:46:58] <s-liao> I have requested one issue on the https://github.com/drewc/smug.
[11:47:17] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[11:47:18] <s-liao> The issue number is 13.
[11:47:30] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:04:23] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[12:09:48] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[12:24:03] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[12:32:35] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[12:33:46] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:34:17] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 240 seconds)
[12:40:34] *** Joins: hashfunc750 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[12:45:08] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:47:46] *** Joins: wacki (~wacki@87.122.90.248)
[12:48:27] <hashfunc750> is there a way to access all the forms that the reader reads when it compiles a file?
[12:48:47] *** Joins: igemnace (~ian@user/igemnace)
[12:50:32] <hashfunc750> like, is there a hook that i can use to somehow save that information?
[12:51:08] *** Joins: hashfunc` (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[12:52:22] <s-liao> why?
[12:53:45] <beach> hashfunc750: I guess you could trace the READ function.
[12:53:49] <hashfunc`> s-liao: i want to inspect the source code that the reader is reading
[12:53:50] <s-liao> read the forms, then save it
[12:54:16] <hashfunc`> beach: i like that approach
[12:54:22] <hashfunc`> beach: i'll give it a try
[12:54:36] *** Quits: hashfunc750 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[12:54:45] <beach> There are typically going to be a lot of them.
[12:55:05] <hashfunc`> s-liao: read the forms, then save it?
[12:55:18] <hashfunc`> beach: ok, i'm ok with that
[12:55:49] <beach> What is the purpose of this exercise?  I mean, you could just look at the code and see every form in there.
[12:55:51] <beach> No?
[12:57:06] <hashfunc`> beach: i'm going to attempt to rearrange the source code
[12:57:18] <beach> Like if you have (f (g a b) c) it is going to read f, g, a, b, (g a b), c, (f (g a b) c).
[12:57:55] <beach> How is this information going to help you rearrange the code?
[12:57:57] <hashfunc`> dang, i'll have to try to find a way around that problem
[12:58:06] <beach> There is no problem.
[12:58:46] <hashfunc`> i suppose that might not be a problem
[12:59:23] *** Quits: amb007 (~a_bakic@5.149.174.181) (Read error: Connection reset by peer)
[12:59:40] <beach> Again, how is this information going to help you rearrange the code?
[13:00:19] <hashfunc`> if i can introspect the forms then i can perform some analysis => rearrange the code based off of the results of said analysis
[13:00:24] <hashfunc`> at least that's the plan so far
[13:00:58] <beach> OK.
[13:01:10] *** Joins: amb007 (~a_bakic@5.149.174.181)
[13:01:16] *** Joins: pve (~pve@37-136-35-73.rev.dnainternet.fi)
[13:02:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:02:58] <hashfunc`> or i might accidently overwrite my code
[13:03:00] <hashfunc`> we shall see
[13:03:40] <beach> If you don't care about it being the compiler that reads the code, you can call READ yourself on the code, and then you can use Eclector to have more options, like you can configure READ then to save your forms.
[13:04:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:05:59] <hashfunc`> true true. but i think it would be the most practical to have workflow that goes: write-code => compile => code-is-rearranged
[13:06:20] <hashfunc`> *to have a workflow that goes:
[13:06:52] *** Joins: eugercek (~user@user/eugercek)
[13:07:38] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[13:08:39] <hashfunc`> it seems that tracing read isn't quite doing what i expect
[13:09:16] <hashfunc`> i'm getting a bunch of swank stuff in my repl
[13:12:59] <hashfunc`> (READ #<SB-IMPL::STRING-INPUT-STREAM {<memory-address>}> NIL #<SB-IMPL::STRING-INPUT-STREAM {<memory-address>}>)
[13:15:50] <phoe> tracing a standard CL function is often undefined behavior though
[13:19:28] <lisp123> hashfunc`: I did something a while back to record source info with sbcl / eclector
[13:19:32] <lisp123> is that what you are after?
[13:21:04] <lisp123> Have a look at https://github.com/informatimago/lisp/tree/master/small-cl-pgms/ibcl too
[13:21:16] <lisp123> pjb: main website informatimago.com seems to be down btw
[13:27:03] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:29:49] <hashfunc`> lisp123: yeah @beach recommended that earlier. that seems like that may be the #1 option right now. & i'm looking at that repository you just linked. is that a differnt lisp implementation?
[13:31:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:32:36] <lisp123> no its something you can use in any Common Lisp
[13:33:30] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[13:38:21] <hashfunc`> lisp123: ok, thanks
[13:42:45] *** Quits: Brucio-61 (~Brucio-97@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Remote host closed the connection)
[13:50:11] <pjb> lisp123: letsencrypt makes me miserable.
[13:53:25] *** Quits: hashfunc` (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[13:55:23] *** Quits: amb007 (~a_bakic@5.149.174.181) (Ping timeout: 256 seconds)
[13:55:28] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:56:25] *** Joins: amb007 (~a_bakic@180.249.23.93.rev.sfr.net)
[13:59:08] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[13:59:47] *** Joins: nature (~nature@45.32.235.173)
[14:14:03] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[14:15:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:22:28] *** Joins: Brucio-61 (~Brucio-35@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[14:28:34] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[14:28:50] *** Joins: eugercek (~user@user/eugercek)
[14:36:34] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:41:31] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[14:43:12] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Remote host closed the connection)
[14:44:00] *** Joins: v88m (~Xiro@213.87.161.249)
[14:46:17] *** Quits: v88m (~Xiro@213.87.161.249) (Read error: Connection reset by peer)
[14:47:10] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[14:47:43] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:48:12] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[14:55:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[14:55:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:57:17] <qhong> Is there a way/hack to access a shadowed lexical variable?
[15:00:51] <jmes> qhong: I guess you could bind it to something else at the same time you shadow it. Dunno if that works for what you have in mind
[15:07:07] <qhong> jmes: Yes just thinking about the same thing. Was not sure about any performance penalty though, is SBCL clever enough to not allocating a new variable when (let ((x y)) ...) or not?
[15:12:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:13:14] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[15:19:43] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:21:34] <jmes> I'm not sure about the under-the-hood memory management, but I'm sure many others here do
[15:22:33] <mfiano> Something has to be allocated somewhere. We're talking about memory here.
[15:22:59] <mfiano> It depends on SBCL's register allocator whether it is register or stack allocated.
[15:23:08] <mfiano> In either case, I wouldn't worry about performance.
[15:24:35] <mfiano> You might want to ask questions related to implementations in their respective forums though. Common Lisp doesn't specify how memory is allocated.
[15:29:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:31:54] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:37:40] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[15:39:41] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a81a:aef8:4653:fe6c)
[15:43:46] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:46:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[15:48:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:58:35] *** Quits: amb007 (~a_bakic@180.249.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[15:58:57] *** Joins: amb007 (~a_bakic@180.249.23.93.rev.sfr.net)
[16:01:52] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[16:02:47] <gin> sbcl error messages do not show line numbers. without them how do you know where in the code you need to go to debug?
[16:06:13] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:06:46] <beach> You use SLIME and you hit `v' (I think, my fingers know it) on the stack frame you want to look at.
[16:09:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[16:10:49] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:11:37] <gin> thanks beach
[16:11:48] <beach> Pleasure.
[16:29:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:34:39] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:53:03] *** Joins: treflip (~user@user/treflip)
[16:55:50] *** Quits: |3b| (bbb@user/3b/x-2324788) (Remote host closed the connection)
[16:56:06] *** Joins: |3b| (bbb@user/3b/x-2324788)
[17:16:20] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[17:16:55] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:40:25] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[18:05:04] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[18:05:25] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[18:25:04] *** Quits: Brucio-61 (~Brucio-35@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Quit: Test)
[18:25:56] *** Joins: Brucio-61 (~Brucio-35@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[18:31:31] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[18:32:01] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:32:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[18:39:56] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[18:45:14] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[18:45:58] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[18:47:48] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:00:13] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[19:01:53] *** Joins: alfonsox (~quassel@103.87.57.4)
[19:13:55] *** Joins: lisp123mobile (~lisp123mo@2001:8003:38af:d400:65d7:3669:a273:4cc0)
[19:15:04] *** Joins: c (~o@2600:1700:94c0:69a0::44)
[19:15:05] <lisp123mobile> pjb: Yeah its a pain. I found cloudflare (free tier) to be really good because it takes care of SSL for you
[19:15:33] *** c is now known as Common-Lisp
[19:18:24] *** Quits: lisp123mobile (~lisp123mo@2001:8003:38af:d400:65d7:3669:a273:4cc0) (Remote host closed the connection)
[19:19:29] *** Joins: lisp123mobile (~lisp123mo@2001:8003:38af:d400:65d7:3669:a273:4cc0)
[19:20:02] *** Quits: lisp123mobile (~lisp123mo@2001:8003:38af:d400:65d7:3669:a273:4cc0) (Remote host closed the connection)
[19:23:16] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[19:24:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[19:27:11] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:38:28] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[19:59:14] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[20:00:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[20:07:39] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:08:03] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:13:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[20:16:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:20:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:20:38] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 272 seconds)
[20:23:13] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[20:25:48] *** Joins: utis (~utis@84.208.160.26)
[20:30:46] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[20:31:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:33:13] *** Joins: jeosol (~jeosol@user/jeosol)
[20:37:43] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[20:52:07] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[20:52:58] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:53:53] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: This computer has gone to sleep)
[21:01:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[21:03:29] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[21:10:24] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[21:11:19] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[21:26:56] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[21:27:50] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[21:43:53] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[21:44:47] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[21:45:57] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:47:36] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[21:47:53] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[21:57:05] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[21:58:27] *** Quits: alfonsox (~quassel@103.87.57.4) (Remote host closed the connection)
[22:04:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[22:05:53] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[22:06:13] *** Joins: unyu (~pyon@user/pyon)
[22:06:18] *** Joins: eugercek (~user@user/eugercek)
[22:10:12] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 240 seconds)
[22:11:03] *** Joins: v88m (~Xiro@213.87.154.131)
[22:24:34] *** Quits: v88m (~Xiro@213.87.154.131) (Read error: Connection reset by peer)
[22:30:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 250 seconds)
[22:30:28] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:32:03] *** Quits: amb007 (~a_bakic@180.249.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:32:08] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:32:34] *** Joins: amb007 (~a_bakic@180.249.23.93.rev.sfr.net)
[22:32:35] *** Quits: amb007 (~a_bakic@180.249.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:33:02] *** Joins: amb007 (~a_bakic@180.249.23.93.rev.sfr.net)
[22:33:54] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[22:33:54] *** Quits: amb007 (~a_bakic@180.249.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:35:24] *** Joins: amb007 (~a_bakic@5.149.174.181)
[22:46:07] *** Joins: igemnace (~ian@user/igemnace)
[22:59:26] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[22:59:39] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[23:00:28] *** Joins: specbot (~specbot@common-lisp.net)
[23:00:33] *** Joins: minion (~minion@common-lisp.net)
[23:18:56] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:19:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:21:37] *** Lord_of_Life_ is now known as Lord_of_Life
[23:32:24] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[23:33:06] *** Joins: kevingal (~quassel@176.61.88.240)
[23:35:40] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[23:37:16] *** Joins: frgo (~frgo@p5dec3aab.dip0.t-ipconnect.de)
[23:59:09] *** Quits: Common-Lisp (~o@2600:1700:94c0:69a0::44) (Quit: Leaving)
