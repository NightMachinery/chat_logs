[00:07:45] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[00:11:19] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 258 seconds)
[00:12:12] * GumbyPAN CPAN Upload: RTIR-Extension-MISP-0.02 by BPS https://metacpan.org/release/BPS/RTIR-Extension-MISP-0.02
[00:15:02] *** Joins: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[00:20:27] *** Quits: furrymcgee (~devuan@cgn-89-1-210-103.nc.de) (Quit: leaving)
[00:21:25] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Ping timeout: 268 seconds)
[00:22:03] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Ping timeout: 260 seconds)
[00:22:52] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[00:22:52] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[00:22:52] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[00:22:56] *** Quits: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Quit: Darkcoal)
[00:22:59] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[00:22:59] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[00:22:59] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[00:23:05] *** Joins: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[00:25:58] *** Joins: whynot (~whynot@37.73.72.126)
[00:26:23] *** Joins: rwp0 (~rwp0@user/rwp0)
[00:31:23] *** Quits: ufobat_ (~martin@dynamic-077-004-170-114.77.4.pool.telefonica.de) (Ping timeout: 260 seconds)
[00:35:35] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Remote host closed the connection)
[00:35:54] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[00:39:08] *** helium-3 is now known as dilfridge
[00:40:06] *** Quits: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net) (Ping timeout: 260 seconds)
[00:47:21] *** Quits: jaytee8056 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[00:48:12] *** Quits: bd3i (~bd3i@75-109-179-182.mdlncmtk02.com.dyn.suddenlink.net) (Quit: Client closed)
[00:48:46] *** Joins: JNO (~JNO@c188-150-16-7.bredband.tele2.se)
[00:50:20] *** Quits: kylese (~kylese@p5dd8b9e7.dip0.t-ipconnect.de) (Quit: Leaving)
[00:52:35] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Ping timeout: 264 seconds)
[00:53:02] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[00:54:43] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[00:55:50] *** Quits: JNO (~JNO@c188-150-16-7.bredband.tele2.se) (Quit: Leaving)
[01:04:17] *** Joins: tejr (~tejr@user/tejr)
[01:05:11] *** Quits: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Ping timeout: 264 seconds)
[01:06:37] *** Joins: Darkcoal (~user@167.86.132.92)
[01:10:45] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[01:11:56] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000095 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000095
[01:11:59] *** Quits: fling (~fling@user/fling) (Ping timeout: 246 seconds)
[01:11:59] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[01:11:59] *** Joins: fling_ (~fling@user/fling)
[01:13:48] *** Joins: rwp0 (~rwp0@user/rwp0)
[01:17:17] *** fling_ is now known as fling
[01:25:19] *** Quits: GEttR_ (~GEttR@user/gettr) (Remote host closed the connection)
[01:25:39] *** Joins: GEttR_ (~GEttR@user/gettr)
[01:28:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[01:30:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[01:30:39] *** Quits: eblip (~eb0t@90.210.90.151) (Ping timeout: 260 seconds)
[01:31:03] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[01:32:38] *** Joins: eblip (~eb0t@90.210.92.98)
[01:35:16] *** Joins: rwp0 (~rwp0@user/rwp0)
[01:36:58] * GumbyPAN CPAN Upload: Playwright-0.017 by TEODESIAN https://metacpan.org/release/TEODESIAN/Playwright-0.017
[01:41:49] *** B33F_1338 is now known as B33F_1337
[01:42:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[01:44:58] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[01:45:07] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[01:47:22] *** Joins: EvanCarroll (~ecarroll@50.222.187.218)
[01:47:51] <daemon> sup all is there anything like poe.perl.org's 'cookbook' for IO::Async?
[01:48:11] <daemon> notable the long running children one (via runwheel)
[01:48:51] *** Joins: Darkcoal_ (~user@51.158.144.32)
[01:51:16] <xenu> i think the example in the synopsis of IO::Async::Process is pretty much equivalent
[01:51:17] <Grinnz> not particularly, mostly EXAMPLES sections in individual docs
[01:51:39] <xenu> it runs a process and reads its output
[01:51:55] *** Joins: rwp0 (~rwp0@user/rwp0)
[01:51:56] <daemon> is it an entire cookbook example
[01:52:02] <daemon> that I can paste and see working
[01:52:08] <daemon> perlbot cpan IO::Async::Process
[01:52:10] *** Quits: Darkcoal (~user@167.86.132.92) (Ping timeout: 260 seconds)
[01:52:13] <Grinnz> dunno, try it
[01:52:18] <daemon> really no hotlink perlbot 
[01:52:25] <daemon> simcop2387, feature request! :P
[01:52:31] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[01:52:40] <Grinnz> there's also https://metacpan.org/pod/IO::Async::Loop#run_process which is a wrapper of that for capturing STDOUT/STDERR
[01:52:40] <Paperbot> Link title(s): [ IO::Async::Loop - core loop of the IO::Async framework - metacpan.org ]
[01:53:06] <daemon> I should probably start lower down the chain
[01:53:09] <xenu> !m IO::Async::Process
[01:53:12] <daemon> how do I get two sessions with async
[01:53:13] <xenu> perlbot !m IO::Async::Process
[01:53:14] <perlbot> xenu: https://metacpan.org/pod/IO::Async::Process
[01:53:18] <daemon> I have been using POE for ten years
[01:53:22] <Grinnz> there's no sessions
[01:53:23] <xenu> it's weird it's prefixed with !
[01:53:34] <Grinnz> you just add the things you want to the loop, and their callbacks do whatever you want them to
[01:53:38] <Grinnz> or futures
[01:53:57] <daemon> I think I have seen that
[01:54:00] <Grinnz> if you want things to reference each other, you just do that
[01:54:02] <daemon> then you can do a ->catch() for if it fails
[01:54:04] <Grinnz> with closures
[01:54:27] <daemon> POE seems way more easy to use or am I just old
[01:54:30] <Grinnz> yes, futures make it easy to combine behavior
[01:54:37] <Grinnz> you're just used to POE
[01:55:29] <daemon> not really I threw c#'s async in the shredder to and did ther thread management my self the same with rust and used mr queues >.>
[01:55:39] <daemon> seems I learned poe and stuck with that through all languages I learned
[01:56:05] <daemon> mpsc*
[01:56:15] <Grinnz> sessions are mostly necessary because POE relies on namespacing
[01:56:35] <Grinnz> without named events, or an architectural reason to use them, they're just overhead
[01:57:03] <daemon> I like fifo queues, I like to put work in a central location and have workers poll it, I also like each thread (or session) to have its own stack, can I do this with async
[01:57:14] <Grinnz> yes, use separate variables
[01:57:53] <daemon> can I create those stacks on the fly with no predefines ... sub add_worker(...) { .... }
[01:58:10] <Grinnz> i have no idea what you're asking
[01:58:16] <Grinnz> a stack is just an array
[01:58:46] <daemon> I will just give it a go, probably for the best - I managed to get mojo::lite working with an io::loop it should not be that hard to figure out async
[01:58:57] <Grinnz> if you're asking about a specific mechanism then you'll need to say what specific mechanism you're asking about
[01:59:52] <daemon> https://metacpan.org/pod/IO::Async#SYNOPSIS
[01:59:52] <Paperbot> Link title(s): [ IO::Async - Asynchronous event-driven programming - metacpan.org ]
[01:59:58] <daemon> that almost looks like a POE::Session
[02:00:07] <daemon> so I bet I could define multiple loops
[02:00:12] <daemon> could I communicate between them?
[02:00:12] <Grinnz> no
[02:00:18] <Grinnz> the loop is the kernel
[02:00:29] <daemon> ah
[02:00:37] <Grinnz> there's no sessions
[02:00:47] <Grinnz> that layer doesn't exist
[02:01:20] <LeoNerd> They're not required. That's an artificial thing created by POE
[02:01:20] <Grinnz> you can define multiple loops, but it's not useful for what you're thinking of, because only one of them can run
[02:01:37] <daemon> even with whatever is equivlent to wheel::run ?
[02:01:45] <LeoNerd> POE's events are just stringy names, like "got_thing".  If you have multiple connections or whatever, how do you know which is which? That's what the sessions are for
[02:01:46] <daemon> and Filter::Reference
[02:01:56] <LeoNerd> IO::Async just has different objects, uses just plain perl
[02:01:58] <Grinnz> a fork can run whatever it wants since the loop is not running there
[02:02:45] <daemon> Could I do this with async... Create a process that spawns a load of children as real processes that talk via stdin/stdout via Filter::Reference and have that central process do stuff?
[02:02:47] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[02:02:52] <LeoNerd> Yes
[02:02:57] <LeoNerd> You justÂ·.. er.. do it.
[02:02:57] <Grinnz> yes, but just use IO::Async::Function because it does that better
[02:03:02] <LeoNerd> make lots of process objects, then do stuff
[02:03:13] <LeoNerd> You don't have to invent this artificial layer of a "session"
[02:03:30] <LeoNerd> You know how perl lets you call ->new multiple times on the same class of object, and make multiple instances of that object each with their own data?
[02:03:31] <daemon> dood I been using POE over 10 years its all I know gimme a break here I am trying to adapt! :P
[02:03:33] <LeoNerd> That's what we have here
[02:03:53] <LeoNerd> IaProcess->new( some args here );  IaProcess->new( different args here );
[02:03:55] <LeoNerd> Two processes
[02:04:02] <daemon> ok so I could make multiple loops, but I would need to select which one runs
[02:04:05] <LeoNerd> No]
[02:04:09] <LeoNerd> One loop. Always one
[02:04:15] <Grinnz> multiple loops are only useful for nested behavior
[02:04:20] <Grinnz> not for anything you're doing
[02:04:34] <Grinnz> you will just confuse yourself if you put anything in a different loop than the main loop
[02:04:35] <daemon> wait surely I can just run one loop of any event loop then select another (that is way out of scope for this convo but I would expect it)
[02:04:40] *** Joins: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[02:04:46] <Grinnz> "select another"?
[02:04:55] <daemon> yeah poe kernel tick
[02:04:58] <Grinnz> an event loop is a while(1)
[02:05:00] <daemon> you can have multiple kernels
[02:05:01] <Grinnz> there is no changing
[02:05:08] <Grinnz> there's just it running until it stops
[02:05:09] <LeoNerd> The Loop stores lots of state
[02:05:11] <LeoNerd> Looooads of state
[02:05:20] <LeoNerd> You don't want to swap about between them
[02:05:27] <LeoNerd> Make one Loop then stick to that for the entire lifetime of the process
[02:05:44] <daemon> one last question ... is it worth learning async (honestly asked)
[02:05:48] <LeoNerd> There's only multiple classes available, so you can choose whichever one (singular) is best for your situation
[02:05:49] <daemon> I know how POE works pretty damn well
[02:05:57] <daemon> what is the benefit of async
[02:05:58] <LeoNerd> E.g. GTK programs will need the Glib one
[02:06:07] *** Quits: fling (~fling@user/fling) (Ping timeout: 260 seconds)
[02:06:09] <LeoNerd> You are talking about "async" like it's a specific thing
[02:06:11] <Grinnz> first of all, IO::Async is not "async", "async" is a general concept
[02:06:17] <Grinnz> IO::Async is a framework
[02:06:20] <daemon> yes the one I avoided in two otrher languages
[02:06:33] <daemon> in perl I would be looking to learn IO::Async to replace POE
[02:06:46] <Grinnz> it's worth learning if it's useful
[02:06:51] <Grinnz> dunno how else to answer that
[02:06:53] <LeoNerd> As with all things
[02:06:54] <daemon> that is what I am struggling with
[02:07:01] * GumbyPAN CPAN Upload: Lab-Measurement-3.791 by AKHUETTEL https://metacpan.org/release/AKHUETTEL/Lab-Measurement-3.791
[02:07:07] <daemon> you can learn anything with time
[02:07:27] <daemon> but it seems almost every language I user it screaming about all the new 'async' style libs coming out
[02:07:31] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[02:07:33] <daemon> POE has had no updates for ages
[02:07:45] <LeoNerd> The word "async" is so vague I wouldn't pay attention to specific comments like that
[02:07:45] <daemon> threads in rust and in c# are the same
[02:07:46] <Grinnz> sure, but that means many different tangentially related things
[02:08:05] <Grinnz> IO::Async can do a lot of those things, but some of them are different kinds of tools
[02:08:08] <Grinnz> like async/await
[02:08:11] <daemon> LeoNerd, all three languages literally call the methodology of promoses etc async
[02:08:12] <Grinnz> or futures
[02:08:14] <daemon> promises*
[02:08:15] *** Joins: fling (~fling@user/fling)
[02:08:22] <LeoNerd> Yes, they do
[02:08:39] <LeoNerd> That's because in those languages, that specific technique is the way to achieve async behaviour
[02:08:40] <Grinnz> async itself just means "code doesn't run in order"
[02:08:55] <LeoNerd> "a-synchronous" - without synchronisation
[02:09:04] <LeoNerd> The word *literally* means an absence of something else
[02:09:10] <daemon> I just do not understand why thread based processing (csharp/rust) or POE (perl) seems to be, being ignored ... what is wrong with it?
[02:09:16] <LeoNerd> A word that literally means an absence of a specific thing, can't very easily explain a precise concept
[02:09:20] <Grinnz> POE is not thread based
[02:09:23] <LeoNerd> The word is talking about the /absence/ of a thing
[02:09:32] <daemon> Grinnz, IO::RunWheel + Filter::
[02:09:34] <daemon> Reference
[02:09:36] <Grinnz> those are processes
[02:09:37] <daemon> you can make it so :)
[02:09:45] <daemon> I know but threads in perl are normally terrible
[02:09:45] <Grinnz> you can do process async in every event loop
[02:09:54] <Grinnz> i have no idea what distinction you're trying to make
[02:09:54] <daemon> processes is a safer alternative
[02:10:30] <daemon> I am trying to determine why across three languages, the development for the practise of 'async' is well "full focus", while the traditional methods are being almost forgotton
[02:10:39] <daemon> what metric makes 'async' and using promises 'better'
[02:10:41] <LeoNerd> Because overall it's just much nicer
[02:10:44] <Grinnz> better than what?
[02:10:47] <LeoNerd> I could write entire books abou ti
[02:10:54] <daemon> LeoNerd, one solid example will do
[02:11:02] <LeoNerd> Lack of race conditions
[02:11:07] <daemon> locks
[02:11:07] <LeoNerd> Cache fighting
[02:11:12] <daemon> private memory rangers
[02:11:21] <daemon> -r
[02:11:22] <Grinnz> alright so my crystal ball says you're asking: why focus on cooperative multitasking (event loops, promises) over concurrent programming (threads, forks)
[02:11:25] <LeoNerd> Well there you go; you're listing some too
[02:11:27] <Grinnz> did i guess right?
[02:11:31] <choroba> callback hell
[02:11:40] <daemon> Grinnz, yep
[02:11:54] <daemon> Grinnz, well at least mostly
[02:12:13] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[02:12:17] <Grinnz> well, they're useful for different things - threading and forking is a workaround to turn blocking behavior into something that can cooperatively multitask
[02:12:30] <Grinnz> it's a waste of resources for tasks that are already not blocking
[02:12:40] <Grinnz> plus often a lot of complication
[02:12:57] <LeoNerd> Yah; mostly turns out that the blocking behaviour design of early POSIX and other OSes doesn't scale very well to large systems
[02:13:10] <LeoNerd> The "blocking behaviour" is mostly the "sync" that "async" is about the lack of
[02:13:13] <daemon> Grinnz, here is the thing, I could write a webserver, that also had an ircbot and also nipped off to do some shopping in POE; however if I wanted to do that shopping bit there might be an async module but all the POE ones are ancient and non maintained because no one does it anymore. Why is that?
[02:13:21] <daemon> Why is async getting the spotlight over POE
[02:13:28] <Grinnz> you keep talking about POE like it isn't an event loop
[02:13:29] <daemon> for perl that is, the argument is differnet for rust and c#
[02:13:34] <Grinnz> i'm very confused
[02:13:46] <daemon> its fine, never mind
[02:13:52] <Grinnz> what you were doing with irc and http was already cooperative multitasking
[02:13:55] <Grinnz> it was not threads or forks
[02:14:04] <LeoNerd> <daemon> Why is async getting the spotlight over POE  <== fundamentally don't understand this question
[02:14:07] <LeoNerd> POE is verymuch async
[02:14:11] <LeoNerd> That is its entire thing :)
[02:14:24] <daemon> LeoNerd, IO::Async should have been what I used there
[02:14:24] <Grinnz> when you use POE::Wheel::Run, then you're forking
[02:14:45] <Grinnz> which you can do with IO::Async::Process or IO::Async::Function as well
[02:14:56] <Grinnz> it's all quite analogous, except for the lack of the session layer
[02:14:56] <LeoNerd> What spotlight do you think is happening here?
[02:15:13] <LeoNerd> Is the summary of your question: has dngor stopped maintaining POE ?
[02:15:27] <daemon> LeoNerd, it just seems POE is slipping into history and I do not see why
[02:15:45] <LeoNerd> Perhaps because it's a weird shape. It's very disconnected
[02:15:56] <daemon> its very easy to use and very effective though
[02:16:00] <LeoNerd> In POE, you mostly use those named events for stuff
[02:16:12] <daemon> my ($kernel,$heap) = @_[KERNEL,HEAP];
[02:16:17] <Grinnz> the majority of people have not found it easy to use comparatively
[02:16:21] <daemon> yeah that is a bit weird, but POE::Session::PlainCall happened
[02:16:22] <LeoNerd> Take an object, and tell it when a thing happens to emit a named signal into a session, then in that session attach a CODEref to that named signal to contain the behaviour
[02:16:30] <LeoNerd> In almost any other event system, you attach the CODE refs directly to /the thing/
[02:16:36] <LeoNerd> No need for naming the events or sessions
[02:16:40] *** Quits: proller (~p@2a02:6b8:b081:6405::1:8) (Ping timeout: 258 seconds)
[02:16:57] <daemon> but it makes a nice clear distinction on them
[02:16:59] <LeoNerd> That's also the same code shape that happens in almost every event system in almost every other language
[02:17:07] <daemon> you can also look up who called you and even where from
[02:17:32] <LeoNerd> Yah; and all of that is again layers of abstraction and complexity that almost no other event system has found it necessary to invent
[02:17:50] <Grinnz> 95% of programs have no use for 90% of POE's abstractions - and they affect performance as well as maintainability
[02:18:27] <daemon> so we should use select and filehandles? :)
[02:18:42] <Grinnz> what do you think IO::Async does?
[02:18:47] <daemon> all of them work like that
[02:18:49] <LeoNerd> If you particularly want. Though you might find that doesn't port very well to Windows,...
[02:18:50] <daemon> on the very core
[02:18:56] <Grinnz> exactly
[02:18:57] <daemon> LeoNerd, I already know
[02:18:59] <LeoNerd> Sure.. That's a way to achieve the bottom-most level
[02:19:03] <daemon> Client: HexChat 2.16.0 â¢ OS: Microsoft Windows 10 Pro (x64) â¢ CPU: Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz (4.20GHz) â¢ Memory: 15.9 GiB Total (7.3 GiB Free) â¢ Storage: 257.3 GiB / 1.8 TiB (1.6 TiB Free) â¢ VGA: NVIDIA GeForce GTX 1660 â¢ Uptime: 22h 25m 16s
[02:19:04] <daemon> ;)
[02:19:23] <Grinnz> Mojo::IOLoop/IO::Async provide the features that programs using them have needed
[02:19:26] <daemon> but that is because of windows dodgy fork() I believe? something like that
[02:19:30] <Grinnz> there isn't much more to it than that
[02:19:35] <LeoNerd> In practice it's often useful to build atop those basic mechanisms, to avoid having to repeat yourself all the time
[02:19:51] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:20:00] <LeoNerd> E.g. if you want a nonblocking name resolver you'll find you have to recreate a lot of work that way
[02:20:09] <LeoNerd> Whereas most event systems will provide you one
[02:20:09] <daemon> I guess I just think the POE interface is really easy to use and friendly and im in the minority 
[02:20:19] <LeoNerd> I suspect because you're used to it
[02:21:07] <LeoNerd> Again, try rereading the earlier discussion about sessions and named events and so on. You were looking for the equivalents of those things elsewhere, when those concepts just don't exist - they don't need to
[02:21:07] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[02:21:44] *** Joins: rwp0 (~rwp0@user/rwp0)
[02:21:47] <daemon> well that was a bit of interesting chat, now time to invest 30 minutes into async ... 12 years ago I started writing a POC in POE/PERL I completed it .. then wrote it in csharp ... then rust, now its time to write it for real - but this time modular not a 25'000 line behemoth and plan it along the way, and async will lead the POE section >.> 
[02:21:54] <Grinnz> i suggest postponing the existential questions until you have gotten real world things working in IO::Async
[02:21:55] <daemon> LeoNerd++ # thank you for your insight and time
[02:22:01] <daemon> Grinnz++ # Thank you for the same :)
[02:22:45] *** Quits: whynot (~whynot@37.73.72.126) (Quit: leaving)
[02:24:58] *** Quits: subie (~subie@2601:4c0:4080:bc0:3c23:1da8:163f:c778) (Remote host closed the connection)
[02:25:18] *** Joins: subie (~subie@2601:4c0:4080:bc0:2c34:7f43:f1d8:d170)
[02:26:13] *** Quits: KnoP (~KnoP@ip-109-42-177-214.web.vodafone.de) (Remote host closed the connection)
[02:29:53] *** Joins: proller (~p@80.240.216.69)
[02:30:51] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[02:33:24] *** Quits: pizdets_ (~pizdets@183.182.114.179) (Ping timeout: 250 seconds)
[02:34:03] *** Joins: pizdets (~pizdets@183.182.110.199)
[02:36:02] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[02:46:09] <daemon> errr ... ? https://dpaste.org/oMrY io::Async::Process
[02:46:10] <Paperbot> Link title(s): [ dpaste/oMrY (Perl) ]
[02:46:21] *** Parts: fb51 (~fb51@ip-109-43-113-201.web.vodafone.de) ()
[02:48:12] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[02:49:09] <LeoNerd> daemon: Broken mirror or somesuch maybe?
[02:51:34] <ilmari> or captive proxy... `curl -v http://www.cpan.org/authors/id/P/PE/PEVANS/IO-Async-0.79.tar.gz | tar -tz` (and if tar complains, `â¦ | file -` or `â¦ | less`)
[02:53:33] <daemon> LeoNerd, installs everything else fine x_X
[02:53:44] *** Joins: rwp0 (~rwp0@user/rwp0)
[02:53:56] <LeoNerd> Grab the .tar.gz file itself and install manually?
[02:54:02] <daemon> psh that would require effort"!
[02:54:27] <daemon> how do I not have 7zip installed
[02:55:53] <daemon> interesting I can download it my self and extract it
[02:56:02] <daemon> but if I call cpanm on the tarball it still fails
[02:56:57] <daemon> looks like it won't work with strawberry perl
[02:57:09] <daemon> builds straight off on bsd and linux
[02:58:34] <fuzzix> I've used it on Strawberry 5.32 recently enough - should be no problem.
[02:58:51] <fuzzix> Oh, is there a working kpoll loop?
[02:59:02] <daemon> oh im wrong
[02:59:02] <daemon> ! Installing IO::Async failed. See /home/paul.webster/.cpanm/work/1635377275.18538/build.log for details. Retry with --force to force install it.
[02:59:04] <LeoNerd> No, because kpoll's API is fundamentally broken
[02:59:04] <daemon> linux fails on builds
[02:59:15] <daemon> Building and testing IO-Async-0.79 ... FAIL
[02:59:28] <LeoNerd> BSD's poll refuses to believe that any language other than C exists, so it's not really possible to build event loop systems on top of it without risking large amounts of memory leak
[02:59:34] <LeoNerd> If they can fix that then maybe we can do this
[02:59:57] <fuzzix> LeoNerd: Ah, oh well.
[03:00:26] <daemon> LeoNerd, bsd does KQueue
[03:00:37] <LeoNerd> Or maybe I meant kqueue
[03:00:41] <daemon> but anyhow it was linux that bailed out
[03:00:42] <daemon> not bsd
[03:00:43] <LeoNerd> The O(1) scheduler mechanism
[03:00:50] <fuzzix> Maybe I meant kqueue
[03:00:58] <LeoNerd> OK well, can you make that log visible so we can see it?
[03:01:16] <daemon> https://dpaste.org/CA81
[03:01:17] <Paperbot> Link title(s): [ dpaste/CA81 (Perl) ]
[03:01:19] <fuzzix> epoll-ish thingumy
[03:01:23] <daemon> fairly obvious its just a bad b-dep or r-dep
[03:01:30] <daemon> ah r-dep
[03:02:22] <Grinnz> ok, and what hapepned next in the log?
[03:03:17] <daemon> https://dpaste.org/2zN2
[03:03:18] <Paperbot> Link title(s): [ dpaste/2zN2 (Plain Code) ]
[03:03:39] <Grinnz> ah, test failures
[03:04:02] <LeoNerd> Ahhhh.. resolver
[03:04:23] <LeoNerd> I'm getting really close to suggesting "Hey, I just won't test the resolver *at all*, and if the actual code doesn't work then sorry"
[03:04:43] <daemon> well if it does not work that is actually what you should say
[03:04:46] <LeoNerd> Almost every single test failure ever, is because some stupid OS or upstream DNS proxy or whatever has decided to invent stupid error codes for lookups
[03:04:52] <daemon> testing a rocking horse for stability seems silly
[03:05:14] <daemon> I can guarantee though this system has an absolutely rock solid resolve and upstream name system
[03:05:18] <daemon> its not even systemd
[03:05:21] <Grinnz> anyway since it's just that failure, you can run it with --force to ignore that failure
[03:05:22] <daemon> with no upstream proxies
[03:06:19] <daemon> infact it does not even have a local resolver, its just straight to a 2nd level nameserver lol
[03:11:23] <daemon> im curious what the BSD one is doing
[03:11:26] <daemon> Building and testing IO-Async-0.79 ...
[03:11:30] <daemon> its been there a while
[03:11:42] <daemon> I assumed as it did not die it was going to do it
[03:11:55] <daemon> Successfully installed IO-Async-0.79
[03:11:58] <daemon> boom ok
[03:12:18] <daemon> so ... io::async fails on windows and needs force on linux, but installs perfect on BSD ;) LeoNerd I love your angle
[03:12:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[03:12:57] <daemon> FreeBSD de1.paulwebster.org 13.0-STABLE FreeBSD 13.0-STABLE #2 stable/13-n244920-3a0ffc48b739 if you was curious which
[03:12:58] <LeoNerd> Well what would you suggest for the resolver test?
[03:13:01] <LeoNerd> I could just delete the thing
[03:13:08] <daemon> oh just delete it
[03:13:18] <daemon> nothing is better than bad
[03:13:18] <LeoNerd> And "just hope" that resolver operations work?
[03:13:29] <daemon> what does it actually test
[03:13:38] <LeoNerd> That the wrapping of the resolver works
[03:14:06] <daemon> well the cahnce it does not work would seem logically far lower than the test fucking up
[03:14:07] <LeoNerd> I suppose I could entirely replace the real resolver with a faked one in the unit test
[03:14:21] <mst> alarm() + diag() + soft fail maybe
[03:14:24] <xenu> io::async has definitely worked on windows recently
[03:14:34] <xenu> i remember sending patches to fix it
[03:14:36] <daemon> xenu, the error is not even about builds
[03:14:41] <daemon> xenu, it can't extract the tarball
[03:14:46] <xenu> lol
[03:15:10] <daemon> basically the tarball is extract to a name that does not match what the package is called
[03:15:18] <daemon> so cpanm is panicking going ... where the hell is this crap?
[03:15:39] <LeoNerd> Can you just untar it yourself and see what you get and then build it from within there?
[03:15:41] <mst> I thought cpanm extracted into a scratch directory and just looked for -a- directory there
[03:16:14] <daemon> mst, it does but it seems to have some problem with async at least on mine, it has no problem with anything else, just io::async so I assume its doing something spechul
[03:16:52] <daemon> https://dpaste.org/Kk6y
[03:16:53] <Paperbot> Link title(s): [ dpaste/Kk6y (Plain Code) ]
[03:17:35] <Grinnz> try downloading the url it mentions and see what you get
[03:17:39] <mst> daemon: where's the --verbose output
[03:17:41] <daemon> if you extract it by hand ytou get... 'IO-Async-0.79'
[03:17:44] <daemon> as a directory
[03:17:56] <LeoNerd> That's what it should be, yes
[03:18:11] <LeoNerd> So just build it from within there
[03:18:11] <daemon> in verbose: https://dpaste.org/XLg6
[03:18:12] <Paperbot> Link title(s): [ dpaste/XLg6 (Plain Code) ]
[03:18:28] <daemon> LeoNerd, it won't let me, because of ExtUtils/Manifest
[03:18:40] <mst> daemon: yeah it will
[03:19:15] <xenu> >/c/lang/perl/5.32.1/perl/bin/cpanm 
[03:19:20] <xenu> that doesn't look very windowsish
[03:19:27] <daemon> xenu, https://dpaste.org/a3VN
[03:19:27] <Paperbot> Link title(s): [ dpaste/a3VN (Plain Code) ]
[03:19:29] <daemon> err mst ^
[03:19:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e876:dcb:76b1:818b) (Ping timeout: 260 seconds)
[03:20:04] <mst> daemon: right, so your cpanm can't extract archives at all
[03:20:18] <daemon> it installed POE yesterday it should be able to
[03:20:47] <daemon> let me re-roll its install just to make sure
[03:21:12] *** Joins: rwp0 (~rwp0@user/rwp0)
[03:22:38] <xenu> hmm, it actually is broken on windows but for a different reason
[03:22:42] <xenu> and only slightly
[03:23:03] <xenu> https://perl.bot/p/y6xzzj
[03:23:04] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[03:23:08] <xenu> some tests should be skipped
[03:23:33] <LeoNerd> Oh.. yeah; that was me misremembering that /any/ kind of fork() actually works there
[03:23:40] <daemon> so broken on windows, requires force on linux and BSD works :D see folks run BSD :)
[03:23:49] <mst> run BSD run
[03:24:02] <xenu> daemon: your windows problems are unrelated
[03:24:06] <xenu> are you actually using cygwin/msys
[03:24:13] <xenu> or do you have some crap in your PATH?
[03:24:22] <daemon> no just strawberry perl and even have to 'repair' via the msi its still b0rked
[03:24:26] <daemon> can't even install path::tiny
[03:24:37] <xenu> paste the output of echo %PATH%
[03:24:57] <daemon> https://dpaste.org/09Lk
[03:24:57] <Paperbot> Link title(s): [ dpaste/09Lk (Plain Code) ]
[03:24:58] <xenu> and those commands: where perl; where make; where gcc;
[03:25:04] <xenu> where tar
[03:25:04] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:25:06] <daemon> C:\lang\perl\5.32.1\c\bin;C:\lang\perl\5.32.1\perl\site\bin;C:\lang\perl\5.32.1\perl\bin;
[03:25:30] <daemon> searching c:\lang for tar
[03:25:46] <daemon> nothing yet ..
[03:25:59] <xenu> remove this
[03:26:01] <xenu> C:\Program Files\Git\mingw64\bin
[03:26:02] <xenu> from the PATH
[03:27:02] <daemon> I moved it to lower in the list
[03:27:07] <xenu> tbh i really sympathize with those guys who complained about PATH pollution on strawberry's bugtracker the other day
[03:27:07] <daemon> so it should find in lang\perl first
[03:27:28] <xenu> the current path situation is bad
[03:27:28] <mst> xenu: so do I, which is why I suggested answers if they'd stop being cunts and help
[03:28:15] <daemon> xenu, https://dpaste.org/fv7n now looks like this
[03:28:16] <Paperbot> Link title(s): [ dpaste/fv7n (Plain Code) ]
[03:28:20] <daemon> order matters for path searches
[03:28:22] <mst> realistically, the answer most likely to succeed here is probably for me to arrange for a windows perl support business so I can spend money on fixing it ;)
[03:28:24] <daemon> first hit is the winner
[03:28:41] <xenu> order matters, but there are some things that should be never found
[03:28:50] <LeoNerd> :)
[03:28:53] <LeoNerd> Profound
[03:29:18] <xenu> for example, cpanm used to break when it wound cygwin/msys tar.exe
[03:29:22] <daemon> mst, the answer is actually just to install everything into WSL2, instead of having python2,python3,perl,rust,c#,c++ installed in both WSL2(linux) and windows :D
[03:29:26] <xenu> it isn't such a big problem anymore because windows has its own tar.exe
[03:29:33] <xenu> and it usually found first
[03:29:33] <mst> LeoNerd: that's the apple version that's more expensive than Airfound right?
[03:29:37] <xenu> it's*
[03:30:00] <mst> daemon: the only programming languages I have installed in windows rather than wsl2 are haskell and sbcl
[03:30:22] <daemon> mst, no c#? really I thought you would be into that
[03:31:02] <mst> it's honestly quite an elegant language though if I was going the .Net route I'd probably go with C# for infrastructure grunge and F# for the logic
[03:31:44] <daemon> xenu, you know what, nuts to this I am thankful to the help but I just don't give enough fucks to keep diagnosing this shit. I will just use perl in WSL2/Linux its not worth the headache to multistack it; once again though thank you for the help - and if you work on strawberry perl I am happy to keep debugging with you to help out
[03:31:56] <xenu> i like the .net languages, c#, f# even vb.net, but i'm not a fan of the ecosystem
[03:32:05] <xenu> especially because non-windows is still a third-class citizen
[03:32:23] <xenu> and their runtime is unpackagable because it downloads shit from the internet during the build
[03:32:28] <daemon> xenu, ~ .NET Core is free for any opensource os to implement fully
[03:32:49] <daemon> I do find it quite cute that the most reliable OS to run it is gentoo though lol
[03:34:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[03:34:46] <fuzzix> Pity nobody runs Slackware any more. That can be coerced to do any ol shit you like.
[03:36:12] <mst> fuzzix: "nobody"
[03:36:42] <xenu> maybe, just maybe, if it had a regular release schedule, i would be a bit more popular
[03:37:07] <fuzzix> mst: Well, there was me until about last week. I retired the remaining Slackware box here ... replaced it with a RPi.
[03:37:19] <fuzzix> I've run Slackware on a Pi, but it's not worth it.
[03:37:28] <mst> fuzzix: fair
[03:37:59] <fuzzix> Though I am thinking of installing it on this here laptop, because Mint does not do it for me. I started using, what's it called ... snap!
[03:38:07] * gordonfish remembers slackware fondly back in the day
[03:38:12] <daemon> fuzzix, I actually have a slackware box
[03:38:18] <fuzzix> Then one day I ran `mount` and recoiled in horror.
[03:38:21] <mst> shadowcat's early servers were slackware+pkgsrc
[03:38:46] <daemon> fuzzix, basically I have ran every linux that does not have systemd :D I settled on devaun for package based, gentoo for source based
[03:39:39] <fuzzix> I mean, with all the ansible/puppet/chef/whatever things use now, I see no reason to not use Slackware in a large scale production environment. The major complaint is taken care of.
[03:39:49] <fuzzix> *in use
[03:39:49] <mst> daemon: I've made my peace with systemd, I now understand what's completely broken about it
[03:40:09] <rbrHAUNT> haha
[03:40:20] <mst> daemon: poettering's original vision was XNU style and actually really quite neat
[03:40:30] <daemon> mst, everything in my soul wants me to run FreeBSD for everything, but my brain realises that would not be efficient, so systemd is just a step to far, I will use it if I am absolutely forced but only out of neccesity 
[03:40:38] <mst> daemon: then it got bent completely the wrong way by distros
[03:40:40] <daemon> mst, the original idea of systemd was fantastic
[03:41:02] <mst> honestly, also, I find systemd quite pleasant provided you configure it with nix
[03:41:34] <rbrHAUNT> xnu as in, macos?
[03:41:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[03:41:58] <daemon> mhmm as I am really a FreeBSD user, using linux because I have to - I find it fairly sane I ended up with gentoo that basically is in my opinion the BSD of linuxs 
[03:42:05] <rbrHAUNT> what even *was* the original idea of systemd
[03:42:11] <daemon> though I still think windows is the 'desktop' of choice
[03:42:30] <fuzzix> I have to admit, writing a unit file is a step above banging shit into rc.local.
[03:43:14] <fuzzix> Running Slackware: "Where in the f... is this service defined?!" - then you find an @reboot in crontab.
[03:45:02] <daemon> hmm its kinda amusing, if you consider microsofts wsl2 layer, especially with windows 11 bringing in native UI support for linux apps
[03:45:06] <daemon> same with android
[03:45:09] <rbrHAUNT> i mean, other than https://www.muylinux.com/wp-content/uploads/2014/08/funny-systemd.gif
[03:45:15] <rbrHAUNT> 20:12 < rbrHAUNT> what even *was* the original idea of systemd
[03:45:19] <daemon> maybe there just planning to be able to run everything :)
[03:45:45] <mst> daemon: the year of linux on the desktop is finally here
[03:45:54] <daemon> yeah I know I ahve a w11 machine upstairs
[03:46:03] <daemon> this one will be w11 in the next 30 days
[03:46:12] <daemon> though I won't be using it for graphical linux apps
[03:46:15] <mst> daemon: I found slackware w/pkgsrc more of a BSD-of-linux than gentoo but yeah I appreciate the goal
[03:46:37] <daemon> mst, I also really like the community, they are really damn nice folks
[03:46:50] <daemon> kind of an old fasioned thing but I like that >.>
[03:47:09] <mst> daemon: I'm currently typing this on a full screen X server hosting wsl2 xterm+ssh to a debian server from a windows 10 install
[03:47:34] <mst> http://trout.me.uk/screenshot4.png is actually a windows 10 machine
[03:47:40] <mst> (this one, in fact)
[03:47:45] <daemon> yellow on black really :o
[03:47:51] <mst> *amber*
[03:47:59] <fuzzix> Haha, reminds me of running bb4win at work.
[03:48:07] <mst> amber on black and green on black are the true terminal colours
[03:48:10] <daemon> if you made it green you could get some shades and a long leather jacket and a skateboard
[03:48:26] <mst> daemon: my office workstation is green on black
[03:48:36] <daemon> Hercules for ever
[03:48:37] <mst> but I use this machine late at night so the reduced blue light is nice
[03:48:44] <daemon> I use cyan on black as my default :)
[03:48:50] <mst> I am WYSE to the way of terminals, what can I say
[03:49:17] <fuzzix> Into 80 colums? Or more of a 72-er?
[03:49:28] <mst> fuzzix: all my xterms are 80x24
[03:49:31] <fuzzix> Watch me spell.
[03:49:42] <fuzzix> mst: Nay good for COBOL.
[03:49:59] <daemon> https://i.imgur.com/2YOfvUA.png I use 80col and 120col rulers :P
[03:50:01] <fuzzix> Unless you use *spit* GNU COBOL
[03:50:03] <daemon> for my editor
[03:50:06] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[03:50:29] <mst> daemon: I use http://ex-vi.sourceforge.net/ for my editor
[03:50:29] <Paperbot> Link title(s): [ The Traditional Vi ]
[03:50:35] *** Quits: zln1 (~zln@c80-217-230-193.bredband.tele2.se) (Ping timeout: 260 seconds)
[03:50:44] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[03:50:52] <daemon> mst, meh I can use vi/ee/nano/vim (no emacs) but I use them over rs-232 or telnet or ... like when I have to
[03:51:04] <daemon> normally I just plonk openvpn+samba down and use vscode
[03:51:16] <mst> daemon: I am not recommending this approach, but it's preferable for *me*
[03:51:24] <daemon> yeah its a personal thing I get ya
[03:51:34] <daemon> I actually preffer ee over nano on the same basis
[03:51:37] <daemon> think its an exposure thing
[03:51:51] <mst> my grumpy minimalist setup is not a deliberate aesthetic thing
[03:52:02] <mst> it's just the tooling that I've evolved over the years that makes me happy
[03:52:25] <fuzzix> I just use alacritty/clink and openssh on Windows. Going for a minimum comfort:effort trade off.
[03:52:37] <daemon> my tooling has a mini fridge as a fourth monitor I find it very effective, we all designed our perfect systems that are bewildering to other people
[03:52:55] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:53:29] <mst> kassandry will attest that she found my setup completely bizarre when first described but then when she watched me using it, it made sense for my workflow
[03:54:17] <mst> I do plan to learn VSCode at some point though because I have ideas for plugins and it'll likely be easier to beat it into doing what I want than emacs
[03:54:45] <daemon> I am going to be purchasing one of those ryzen 90 5*** series soon, it has crossed my mind to actually go eATX with vt-d and have freebsd, linux with a windows overlord and have a seperate VM that just does a joint storage between them, combined with multidesktop I could quite literally attack projects from three angles
[03:55:55] <daemon> eh we see, that is more wandering into geeky fun fun rather than productivity
[03:56:10] <mst> I have a hetzner box running freebsd for grunt fun
[03:56:22] <daemon> haha my main freebsd box is on hetzner too
[03:56:29] <daemon> they do support it well
[03:56:57] <fuzzix> Hetzner's FreeBSD support is fantastic - only reason I didn't try to upload slackware images/ISOs
[03:56:57] <mst> the way the recovery stuff works is really nice
[03:57:08] <daemon> SB44 #1390770 here :)
[03:57:16] <daemon> yeah the PXE boot
[03:57:17] <mst> daemon: also cbsd and sanoid
[03:57:22] <fuzzix> Don't even know if they have that sort of flexibility any more.
[03:57:31] <daemon> they do
[03:57:54] <daemon> you choose a rescuse system, bsd or linux
[03:57:58] <daemon> they give you a root pass and reboot the box
[03:58:04] <fuzzix> Well then, time to set up a Windows 98 VPS.
[03:58:05] <daemon> and then you can root/pass into it in a PXE ramdisk
[03:58:17] <daemon> :P
[03:58:32] <daemon> should weirdly work as long as you could bootstrap the device drivers for the nic
[03:58:58] <daemon> you could request KVM over the support channel though
[03:59:01] <daemon> there normally pretty quick
[03:59:16] <fuzzix> Don't you get that by default?
[03:59:21] <daemon> no its by request
[03:59:29] <daemon> you can pay for a dedicated one (IPMI) I think
[03:59:30] <daemon> on some systems
[03:59:39] <fuzzix> Hmmmm, I'm pretty sure I have KVM on everything.
[03:59:53] <daemon> dood they sell servers for peanuts and have awesome support
[03:59:59] <daemon> they do well for what they charge :)
[04:00:46] <fuzzix> Oh, on dedicated... NFI, I'm all virtual.
[04:01:22] <daemon> :)
[04:05:16] *** Joins: proller (~p@2a02:6b8:b081:8812::1:3)
[04:07:31] <Kassandry> daemon: That minimalist setup has like 9 different desktops that mst treats like one ridiculously large piece of real estate he has an 11 inch window on. 
[04:08:11] <Kassandry> It's got the benefits of a lot of monitors that are crazy big, but keeps focus in a small area too, with all those 80x24 terminals.
[04:09:05] <mst> Ctrl + arrow shifts a logical screen
[04:09:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[04:09:31] <mst> Ctrl + Shift + arrow shifts half a screen, which combined with focus follow mouse means 'the adjacent xterm'
[04:10:12] <mst> then ex-vi is basically cos my use of vi commands is within ex-vi's capability and so all vim adds for me is the chance for a typo to invoke an unexpected feature rather than just beep at me ;)
[04:12:38] <daemon> I do that with [super]+l/r
[04:13:04] <mst> trout.me.uk/X11/fvwm2rc
[04:13:21] <mst> plus i pre-tile my xterms with trout.me.uk/X11/xclus
[04:13:39] *** Joins: zln1 (~zln@c80-217-230-193.bredband.tele2.se)
[04:14:14] <daemon> sorry super+ctrl+l/r
[04:14:37] <daemon> I actually use tmux for most of my terminal management >.>
[04:14:52] <daemon> but hey its one of those whatever works for you things like you said :)
[04:15:07] <mst> oh on the remote systems it's all abduco
[04:15:20] <mst> then tmux as a wrapper if I need something more clever than suspend/resume
[04:15:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[04:15:47] <Kassandry> tmux is awesome
[04:16:38] <Kassandry> I'm sure there's tons of features of it that I don't use but, still, works out better than screen most of the time.
[04:17:39] <daemon> yeah it is one of those very 'you need a feature?' 'its been part of core since it was written' type systems :)
[04:18:13] <Kassandry> Indeed.
[04:18:32] <daemon> you know some people still use screen :o
[04:18:38] <Kassandry> I do.
[04:18:41] <daemon> why
[04:18:46] <Kassandry> Habit.
[04:18:47] <mst> this irssi is still running under screen
[04:18:56] <daemon> come on guys better solutions out there
[04:19:33] <Kassandry> Read some of the scrollback, you know the linuxulator kind of rocks in FreeBSD 13-RELEASE, right? =) 
[04:19:39] <mst> dtach broke on this box, tmux is complicated, and I needed something I knew would work -now-
[04:19:48] <mst> my irssi instance is an essential production service
[04:19:59] <daemon> you know ZNC exists right :P
[04:20:14] <Kassandry> LOLZ
[04:20:36] <mst> yes, and one of these years I'll configure it
[04:20:36] <daemon> Kassandry, If I want linux I stick it in bhyve, keep it away from my precious BSD boxen ;)
[04:20:48] <mst> daemon: hence cbsd :D
[04:21:27] <daemon> that reminds me I was working on the smallest possible linux kernel (via gentoo) to run in bhyve for full support for all possible attachments, I should add that to the list
[04:21:28] <mst> lol I just fat fingered my irssi uptime command and instead made it re-exec itself into the latest version
[04:21:32] <daemon> you can get the kernel pretty damn small
[04:22:14] <mst> however this screen session is from april
[04:22:26] <mst> I've had >700 day uptimes for irssi+screen before now
[04:22:27] <Kassandry> You should definitely do that.
[04:22:47] <genio> I'm failing at msys2
[04:22:56] <fuzzix>  /exec -out irssi
[04:23:57] <Kassandry> daemon: Just sayin, the Linuxulator lets me run an ubuntu chrome with all the multimedia working. It's how I don't have to switch from FreeBSD for my dayjob. I've become a bit addicted to dtrace and zfs and a stable system and really up to date ports.
[04:24:01] <Kassandry> =)
[04:25:39] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 260 seconds)
[04:25:42] <simcop2387> perlbot: tell daemon about -m IO::Async::Process
[04:25:42] <perlbot> daemon: https://perldoc.perl.org/IO::Async::Process
[04:25:43] <daemon> Kassandry, good :) I personally hate that type of setup but have no ill will if you do get along with it, I run BSD for production servers, linux in vm's (on windows and BSD) for docker mainly, then windows as a desktop
[04:25:55] <simcop2387> daemon: also this
[04:26:00] <simcop2387> perldoc -m IO::Async::Process
[04:26:01] <perlbot> simcop2387: Your documentation is available at: https://perldoc.perl.org/IO::Async::Process
[04:26:04] <daemon> simcop2387, dood 'cpanm <module name>' would be far less abstract
[04:26:29] <simcop2387> perlbot: macro cpanm is [fact -m [arg]]
[04:26:30] <perlbot> simcop2387: Stored cpanm is [fact -m [arg]]
[04:26:33] <daemon> or 'module <module_name>'
[04:26:36] <simcop2387> perlbot: cpanm IO::Async::Process
[04:26:36] <perlbot> simcop2387: https://perldoc.perl.org/IO::Async::Process
[04:26:39] <simcop2387> happy now?
[04:26:40] <daemon> :) there ya go!
[04:26:45] <genio> install msys2, install winlibs: then make copy of mingw64-make.exe as gmake.exe, install cmake. edit PATH, launch msys2 with PATH correct.  gcc -v and gmake -v do exactly what I want. now try to actually configure, make, make test anything and kaboom
[04:27:06] <daemon> simcop2387++ # nice guy
[04:27:07] <simcop2387> genio: sounds right to me, ship it
[04:27:20] <genio> everything on Windows is harder
[04:27:27] <daemon> genio, no ... perl is harder
[04:27:50] <daemon> genio, and that aint true now either to be honest, just use docker or WSL2 or both
[04:27:54] <simcop2387> i'm still trying to figure out how to build the underlying libraries for msys2 so i can try to make a full aarch64 version of it
[04:27:54] <daemon> screw the windows bit
[04:28:15] <fuzzix> Doesn't Strawberry install msys and path-ify it for you?
[04:28:32] <genio> I mean, I expected that this part would be the simplest piece. building some stupid simple library that's necessary for building Strawberry eventually. baby steps, you know.
[04:28:52] <genio> fuzzix: I'm trying to get a build process going to make future versions of Strawberry. I'm failing at the first steps
[04:29:11] <genio> and I can't find any helpful tutorials or documentation
[04:29:21] <mst> genio: email kmx
[04:29:29] <simcop2387> fuzzix: mostly, it doesn't exactly setup a complete environment for building msys2 and strawberry perl
[04:29:30] <daemon> genio, https://code.visualstudio.com/blogs/2019/09/03/wsl2
[04:29:31] <Paperbot> Link title(s): [ Using WSL 2 with Visual Studio Code ]
[04:29:41] <genio> SOOOO many "helpful" tutorials that just basically make a video of copy-pasta-ing the install docs of msys2
[04:29:43] <simcop2387> daemon: can't build strawberry perl from linux
[04:30:27] <daemon> genio, d
[04:30:34] <daemon> genio, https://i.imgur.com/jyGSqMT.png
[04:30:43] <genio> mst: I was hoping to get a bit more things working so I could have an intelligent question to ask rather than "it don't work!"
[04:30:57] <daemon> ah I see
[04:31:01] <daemon> ok ignore my rants
[04:31:16] <genio> I don't want to send him basic questions that just make him all the more glad he's taking a break :)
[04:31:40] <daemon> genio, send him a full email asking for specifics and a step-by-step on how to build an already built version of strawberry perl
[04:31:43] <simcop2387> genio: are they really basic questions if the answers aren't obvious?
[04:31:45] <mst> genio: do it anyway, and explain that, and blame me for you sending the question anyway.
[04:31:52] <daemon> genio, you need to know how to build it in the first place
[04:32:31] <daemon> genio, doubt it will mean much but you can blame me too, I like a good spanking from strangers
[04:32:36] <simcop2387> genio: and feel free to share anything you do find out, i'll get the windows pi going again when i have time to try building cygwin for windows aarch64 again.
[04:32:58] <daemon> genio, I can drop you a windows VM from one of my servers if necessary as well
[04:33:14] <genio> I know I've got to be doing something completely stupid that I just can't see at the moment
[04:33:24] <genio> wipe it, go through it again time
[04:33:33] <daemon> genio, its windows and perl, the correct solution will be stupid and esoteric
[04:34:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[04:34:15] *** Joins: tejr_ (~tejr@user/tejr)
[04:34:46] <daemon> infact in the email I would actually ask he jumps on zoom/hangouts/jitsi or w/e you fancy for a bit of a step-by-step in person, it does seem rude but its simply the most effeicent way to get started
[04:34:47] <genio> heh. to be sure. but at the moment, I can't build anything at all. it's windows and C on msys2
[04:34:54] <daemon> it will have taken the guy months if not years to get it to work
[04:35:00] <daemon> it will take you the same without guidance
[04:35:37] <fuzzix> OK, time to watch two hours of videos about modular synth patches. Good night all. Erm, have fun daemon!
[04:35:46] <daemon> fuzzix, you too :)
[04:36:18] <genio> mst: I'm going to email him tomorrow after going through it one more time tonight and detailing exactly what I've tried
[04:36:49] <mst> genio: good man
[04:37:00] <simcop2387> genio: hope it goes well
[04:37:22] <daemon> genio, if you do end up with the conference voice chat thing if there is anyone else interested in the project you might want to invite them, you may also want to record it (with permission)
[04:37:49] <genio> I hope I hit a stupid a-ha moment where I can provide y'all with tales of my stupidity
[04:38:26] <daemon> genio, I spent 2 hours re-reading a log file today, before remembering I had renamed log files based on date and what they did and not slapping them all in 'dump.txt' - you will have to go some :)
[04:38:35] <simcop2387> i'm going to be taking some time off in december from $WORK (timing under discussion) to try to get the io uring library completed and a baby's first event loop with it. i really want this for hypnotoad and friends, https://www.phoronix.com/scan.php?page=news_item&px=Linux-IO_uring-10M-IOPS
[04:38:35] <Paperbot> Link title(s): [ Newest Linux Optimizations Can Achieve 10M IOPS Per-Core With IO_uring - Phoronix ]
[04:38:40] <xenu> genio: i'm not sure what your problem is exactly, but keep in mind there are two msys exectuables
[04:38:48] <xenu> one setups the environment for building apps for msys itself
[04:38:57] <xenu> while the other is used when you want to target windows
[04:39:05] <simcop2387> and when i'm avoiding that i'll also probably look at setting up msys2 again and trying to rebuild it in aarch64 piece by piece
[04:39:57] <simcop2387> 10 million iops per core (when given good enough hardware to be capable of it anyway).  so should be able to do all the fun sendfile() like stuff in perl for basically zero cost compared to every other event loop right now
[04:40:12] <simcop2387> while also then being more power efficent!
[04:40:31] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 245 seconds)
[04:40:40] <genio> xenu: I'll post a markdown file of what I'm trying soon
[04:41:03] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 260 seconds)
[04:41:29] *** Joins: gast0n (~g4570n@user/gast0n)
[04:44:03] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[04:49:55] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[04:50:31] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[04:52:48] *** Joins: rwp0 (~rwp0@user/rwp0)
[04:55:29] <daemon> no idea why this amuses me so much, but https://i.imgur.com/9cZL4qq.png perlbrew in wsl2 >.> I have not even setup perlbrew on my main dev env yet
[04:55:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[04:55:55] *** Quits: Pali (~pali@user/pali) (Ping timeout: 260 seconds)
[04:56:40] <daemon> https://i.imgur.com/U2c8DlF.png
[04:56:44] <daemon> tech has come so far :|
[04:57:54] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:85b:142f:3b28:233b) (Quit: Leaving)
[04:58:15] *** Quits: Su-Shee (~Susanne@p4ffc7ba2.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[04:59:36] *** Joins: Su-Shee (~Susanne@p5089416f.dip0.t-ipconnect.de)
[05:00:15] *** Quits: quernd (~quernd@boethin.uberspace.de) (Quit: Ping timeout (120 seconds))
[05:00:28] <mst> daemon: just remember to use perlbrew or perl-build anywhere you don't have freebsd ports to build a sensible perl
[05:00:31] *** Joins: quernd (~quernd@boethin.uberspace.de)
[05:00:33] <mst> daemon: then plx for everything else
[05:00:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[05:01:06] <daemon> mst, even in freebsd I use local::lib to be honest, I find it better to just the the system stuff to the system :P
[05:01:16] <daemon> just leave *
[05:01:20] <mst> daemon: yes, that's why I said freebsd ports for the -perl-
[05:01:39] <mst> daemon: plx sits atop that and handles local::lib management better than everything else
[05:02:31] <daemon> I see
[05:03:01] <mst> daemon: of course I would say that, given I wrote both ;)
[05:03:07] <daemon> its crazy to think that my system upstairs (windows 11) can do this faster and can do it with android apps to, I imagine it won't be long till they can do BSD too
[05:03:11] <daemon> :)
[05:03:29] <daemon> I am starting to suspect microsoft is going for the 'run them all' stratergy
[05:03:33] <mst> but plx lets you configure which local::libs you include and etc.
[05:03:45] <mst> so it makes e.g. working in a git repo on a project
[05:03:55] <mst> while also working on a git repo of one of its dependencies
[05:03:58] <mst> completely trivial
[05:04:09] <mst> which was honestly the use case that had been annoying me and led me to write it
[05:04:40] <daemon> one thing that always got me with all the perl lib stuff was the crap auto integration with zsh
[05:04:47] <daemon> maybe its been fixed now, this one uses bash
[05:04:58] <mst> zsh is somebody else's problem
[05:05:00] <daemon> but lib local used to be unable to auto install for it, so did perl brew
[05:05:07] <mst> I turn all the clever bash completion stuff off
[05:05:21] <daemon> why not just run true bourne shell :D
[05:05:39] <mst> oh, yeah, local::lib supports bash and fish
[05:05:54] <mst> but sadly zsh users are all retards and don't care if local::lib works with it
[05:06:28] <daemon> I just chain loaded zsh from exec via bash_profile
[05:06:37] <daemon> but yeah I mean there are alot of zsh users ... it would be worth supporting it
[05:06:48] <mst> and that's why local::lib doesn't have zsh support
[05:07:01] <mst> not a single zsh users who cared enough about open source to even talk to me about it
[05:07:06] <mst> so fuck 'em
[05:07:10] <daemon> I did
[05:07:17] <daemon> I am doing it right now!
[05:07:20] <haarg> it doesn't need zsh support because it's compatible enough
[05:07:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[05:07:38] <daemon> oooh kiddo screaming brb
[05:07:53] <haarg> fish support... i kind of regret trying
[05:07:55] <mst> daemon: plx could add to your rc files if you ever bothered
[05:08:18] <haarg> fish is extremely hostile to scripting
[05:09:00] <mst> haarg: I assume fish support is "give Grinnz a commit bit"
[05:09:19] <Grinnz> it's worked fine in fish for me
[05:09:44] <Grinnz> also i would say that fish is great for scripting and bash is extremely hostile :P
[05:09:49] <daemon> https://metacpan.org/pod/App::plx
[05:09:50] <Paperbot> Link title(s): [ App::plx - Perl Layout Executor - metacpan.org ]
[05:10:21] <mst> daemon: the docs are very 'BSD man page' style because that's my aesthetic
[05:10:38] <mst> daemon: tutorials and guides should exist but don't yet
[05:10:46] <haarg> let me know when fish starts treating PATH as a string rather than an array and i may start to forgive it
[05:10:53] <tm604> you can't expect to call a shell "bash" and have it act all nice and friendly... 
[05:12:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[05:12:46] <mst> daemon: oh, also, it's over http because I'm not using it as a recommended approach yet but
[05:13:25] <mst> daemon: http://trout.me.uk/perl/plx.html is a document that is both an html version of the plx pod/man page *and* a fatpacked file you can bootstrap from :D
[05:13:26] <Paperbot> Link title(s): [ App::plx - Perl Layout Executor ]
[05:14:51] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:16:11] <daemon> eh I give it a spin :)
[05:16:22] <daemon> sorry had a 3 year old throwing a tantrum over irnbru
[05:17:50] <mst> daemon: note: curl -L https://raw.githubusercontent.com/shadowcat-mst/plx/master/bin/plx-packed | perl - --userstrap
[05:18:01] <mst> daemon: is now how I bootstrap a user local::lib and etc. install
[05:18:27] <mst> daemon: also if you look at the [] based multi-command thing it's totally designed for shell scripting
[05:18:50] *** tejr_ is now known as tejr
[05:18:51] <mst> daemon: my usual setup to work on a cpan module now is
[05:18:59] <mst> daemon: git clone <url>; cd <dir>
[05:19:39] <mst> daemon: plx --init; plx --cpanm --installdeps .; echo 'exec(prove => -lr => @ARGV);' >dev/test
[05:19:45] <mst> daemon: then I can just run 'plx test'
[05:19:54] <mst> daemon: also often the prove gets -j8 or whatever :D
[05:22:05] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:22:06] <daemon> alrighty letws give it a spin
[05:22:33] <daemon> installed cleanly
[05:22:35] <mst> daemon: all bitching directed at me here or in #perl-layout
[05:22:57] <mst> daemon: but I basically don't hack perl without it anymore, it just makes my live too much simpler
[05:23:36] <daemon> Couldn't find perlbrew in $PATH
[05:23:44] <daemon> so it does require perlbrew behind it
[05:24:00] <mst> daemon: no it does not
[05:24:21] <mst> daemon: it doesn't build perls though
[05:24:38] <mst> daemon: you either give it a perl you already built, or a perlbrew perl name
[05:24:49] <daemon> alrighty let ,me bgrab perlbrew
[05:24:57] <mst> daemon: what OS are you on?
[05:25:10] <daemon> FreeBSD de1.paulwebster.org 13.0-STABLE FreeBSD 13.0-STABLE #2 stable/13-n244920-3a0ffc48b739: Tue Mar 16 18:06:11 CET 2021
[05:25:16] <daemon> was the only one 'clean'
[05:25:36] <mst> daemon: then the port is already superior for building a perl, so you tell ports to build you a 5.whatever, then plx uses that
[05:25:50] <mst> daemon: freebsd ports being that good is a key reason why I wrote it this way :P
[05:25:54] <daemon> ! Installing App::perlbrew failed. See /home/paul.webster/.cpanm/work/1635386045.77062/build.log for details. Retry with --force to force install it.
[05:25:59] <daemon> yep apparently no choice on that one :P
[05:26:41] <mst> daemon: plx is a layout atop -a- perl that you provide however you like
[05:26:53] <daemon> 5.32.1 is ports installed
[05:26:54] <daemon> paul.webster@de1:~ $ plx --init 5.32.1
[05:27:02] <daemon>   plx --config perl set 5.32.1
[05:27:10] <daemon> must have remembered I said 5.28
[05:27:24] <daemon> paul.webster@de1:~ $ plx --config perl set 5.32.1
[05:27:24] <daemon> .plx directory has no format specifier
[05:28:03] <mst> rm -rf .plx; plx --init perl5.32.1
[05:28:17] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:28:23] <daemon> Resolving perl 'perl5.32.1' via PATH
[05:28:25] <daemon> success
[05:28:40] <mst> it expects a binary name so you can give it whatever custom shit you like
[05:28:52] <mst> sorry, unixy tool, the errors clearly could be improved
[05:28:57] <daemon> plx --cpanm -llocal --notest --installdeps .
[05:28:59] <daemon> I assume nexty
[05:29:13] <mst> yes, though I often start with
[05:29:17] <daemon> ! Configuring . failed. See /home/paul.webster/.cpanm/work/1635386345.85859/build.log for details.
[05:29:21] <daemon> this is a blank directory though
[05:29:34] <mst> so there's no deps for cpanm to find
[05:29:52] <mst> so my usual starting point for a new project is
[05:30:29] <mst> plx --cpanm -ldevel -n App::cpanminus App::cpm Carton Devel::Confess Data::Dumper::Compact
[05:30:41] <mst> that gives me a toolchain in the devel/ local::lib
[05:30:48] <mst> then my actual apps deps go into the local/
[05:30:49] <daemon> hmm what is data dumper compact never seen that one before
[05:30:55] <daemon> will take a peek
[05:30:59] <mst> (it includes devel/ local/ and lib/ by default)
[05:31:05] <mst> oh, that's my dumper
[05:31:12] <mst> everything else was bad at indenting
[05:31:16] <daemon> 39 distributions installed
[05:31:20] * GumbyPAN CPAN Upload: FFI-Platypus-1.56 by PLICEASE https://metacpan.org/release/PLICEASE/FFI-Platypus-1.56
[05:31:42] <daemon> mhmm I never liked the $var = for Dumper never got why it could not return just a hash
[05:31:53] <mst> note, if you do 'plx foo', if there's a foo in dev/foo or bin/foo it just runs it
[05:32:09] <daemon> paul.webster@de1:~/NewProject $ ls
[05:32:09] <daemon> devel   local
[05:32:23] <mst> also if it's a shell script that -still- works because perl checks the shebang line and re-execs if it isn't a perl shebang
[05:32:39] <mst> also 'plx -MFoo::Bar ...' means 'call perl'
[05:32:46] <mst> (this is why the plx options are all --)
[05:32:52] <daemon> so its really a wrapper around perl with project locking
[05:33:08] <daemon> or project focus I am terrible with words
[05:33:11] <mst> I hate 'carton exec' and I got bored of setting PERL5LIB and etc.
[05:33:40] <daemon> plx --cpanm -ldevel -n App::cpanminus App::cpm Carton Devel::Confess Data::Dumper::Compact
[05:33:45] <daemon> so for me that would be 'NewProject'
[05:33:54] <daemon> but I assume I could exec any project with that?
[05:34:02] <mst> also e.g. it sets up 'perl.spec' as well as 'perl' in .plx/
[05:34:13] <mst> the perl.spec is what you originally passed to set the config
[05:34:19] <mst> so you can safely rm the perl
[05:34:22] <mst> and commit the perl.spec
[05:34:36] <mst> and other users of the repo will get their perl5.<whatever>
[05:34:43] <mst> because it rewrites the perl config on-demand
[05:34:49] <daemon>  /home/paul.webster/NewProject/.plx/perl.spec
[05:34:59] <genio> xenu: A bit further than before https://gist.github.com/genio/517e2790593d7193b69e68060e2260fb
[05:34:59] <Paperbot> Link title(s): [ MSYS2 Setup Â· GitHub ]
[05:35:13] <mst> daemon: also if you do 'plx --config libspec'
[05:35:30] <mst> you'll see the 'devel local::lib, local local::lib, lib directory' thing is just an auto default
[05:35:43] <genio> When now running my latest    ./build.sh 2021Q4-genio __     with nothing but termcap in there I make it further than before
[05:35:52] <daemon> hmm it would be nice if vscodes' workspaces, your plx files and all the other tools would use use <project-root>/.meta/
[05:35:54] <mst> so e.g. you can use 'plx --config libspec add ...' to add an adjacent repository
[05:36:02] <daemon> impossible wish I know
[05:36:05] <daemon> just saying :)
[05:36:29] <mst> sec
[05:36:54] <daemon> nah mate even if you could get plx to do that, it needs everyone to play ball
[05:37:43] <genio> That build script coming from https://github.com/StrawberryPerl/build-extlibs
[05:37:44] <Paperbot> Link title(s): [ GitHub - StrawberryPerl/build-extlibs ]
[05:38:13] <mst> daemon: example: in a repo clone for 'Irssi-Instance' I wanted it to depend on my adjacent clone of xcl so: http://paste.scsys.co.uk/596082
[05:38:14] <Paperbot> Link title(s): [ magnet_web paste from Someone at 217.168.150.38... ]
[05:38:23] <daemon> genio, pastebin the buildlog, I doubt we can help but its clearer than a source repo ;)
[05:38:35] <mst> daemon: you can see how for stacked projects that's kinda handy
[05:39:28] <daemon> so I assume you can 'hop projects' in one command; plx project xx-xcllocal.11
[05:39:29] <daemon> for instance
[05:39:38] <daemon> and it just puts you in the project root with env correctly set
[05:39:42] <simcop2387> i love hackernews sometimes.  wanted to see where someone who was commenting worked (because they were talking about neat stuff) instead of an email or name or anything, there's a brainfuck program to go run to get that
[05:39:49] <mst> daemon: nah, it just works of $PWD
[05:39:59] <daemon> I see, interesting!
[05:40:00] <mst> daemon: so you hop projects with 'cd'
[05:40:23] <genio> daemon: refresh. log added to gist
[05:40:36] <daemon> mst, what happens if you have a process that executes another, that would be using your active login session - so if it swaps to another applications working directory will that also inherit the correct envs?
[05:40:38] <mst> daemon: note you can also use https://metacpan.org/pod/App::plx#-base to override that
[05:40:38] <Paperbot> Link title(s): [ App::plx - Perl Layout Executor - metacpan.org ]
[05:40:44] <genio> note that this is much better behavior than last time for some reason
[05:41:10] <daemon> Can't locate Archive/Zip.pm in @INC (you may need to install the Archive::Zip module) (@INC contains: /usr/lib/perl5/site_perl /usr/share/perl5/site_perl /usr/lib/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib/perl5/core_perl /usr/share/perl5/core_perl) at ../pack.pl line 7.
[05:41:10] <daemon> BEGIN failed--compilation aborted at ../pack.pl line 7.
[05:41:14] <mst> daemon: I mean, "use the current working directory" is also how git works
[05:41:25] <daemon> it seems you are missing both the binary 'zip/unzip' and the module for it
[05:42:10] <daemon> makefile:196: target 'Makefile' given more than once in the same rule
[05:42:11] <mst> genio: it's windows, probably you rebooted it at some point :D
[05:42:17] <daemon> it also may be using make rather than gmake
[05:42:18] <daemon> just a guess
[05:42:22] <daemon> or the otherway around
[05:42:52] <daemon> that is just a warning though
[05:43:13] <mst> daemon: note, as is the man page style, I would -seriously- recommend you read through the whole docs to find out all the features
[05:43:30] <daemon> it also appears to be building .dll's it might require visual studios toolchain
[05:43:33] <mst> daemon: but I hope I've given you enough reason to be curious at least :D
[05:43:57] *** Quits: subie (~subie@2601:4c0:4080:bc0:2c34:7f43:f1d8:d170) (Quit: Leaving)
[05:44:04] <daemon> mst, well its installed on my most personal of boxes, the gentoo has docker windows has perlbrew(debian)
[05:44:15] <daemon> and the real windows ... has errr problems
[05:44:15] <daemon> :)
[05:44:21] *** Joins: subie (~subie@2601:4c0:4080:bc0:2c34:7f43:f1d8:d170)
[05:44:50] <mst> daemon: also "< daemon> so its really a wrapper around perl with project locking" is honestly a pretty fine way to understand it
[05:45:12] <mst> daemon: but in the same sense as "fatpacker is just a way to cat your dependencies onto the front of your script"
[05:45:19] <daemon> targetting might be a better word if you going to slap that in your description :)
[05:45:34] <daemon> maybe focus
[05:45:37] <daemon> ~~
[05:45:38] <mst> daemon: what it does is intentionally not that clever
[05:45:55] <mst> it just makes it easy to do lots of not-clever things with less typing ;)
[05:46:19] <daemon> you really should add some -e checks for that init cock-up thing though :)
[05:46:44] <mst> it should announce that it can't find it in $PATH as well as not finding it in perlbrew, yes
[05:46:55] <mst> that's definitely a mistake on my part
[05:47:02] <daemon> oh no not that bit, it was quite clear ... it can't find perlbrew
[05:47:11] <daemon> I meant the bit after I tried to change version
[05:47:25] <mst> I've never seen that before
[05:47:28] <daemon> 20<daemon>30 5.32.1 is ports installed
[05:47:29] <daemon> 20<daemon>30 paul.webster@de1:~ $ plx --init 5.32.1
[05:47:29] <daemon> 20<daemon>30   plx --config perl set 5.32.1
[05:47:29] <daemon> 20<daemon>30 must have remembered I said 5.28
[05:47:32] <mst> I guess it half initialised and failed
[05:47:32] <daemon> that bit
[05:47:45] <mst> but yes, that also needs fixing
[05:47:46] <daemon> because the output to that was ... totally unclear
[05:47:50] *** Quits: EvanCarroll (~ecarroll@50.222.187.218) (Ping timeout: 260 seconds)
[05:48:31] <mst> yeah, sorry, if you do what the man page tells you will work, it behaves
[05:48:39] <mst> if you guess randomly, the errors are a bit crap
[05:48:43] <simcop2387> i wonder if i can hack the github copilot neovim plugin to be usable over http... perl.bot will be getting github copilot!
[05:48:44] <daemon> :) hey just giving feedback!
[05:48:45] <mst> and, yes, I should fix that :)
[05:48:53] <mst> daemon: useful feedback!
[05:49:10] <daemon> it will get some use though, this thing I am working on though I am developing on all 3 platforms for it, including windows which perl does not even work right now lol
[05:49:32] <simcop2387> https://github.com/github/copilot.vim#getting-started
[05:49:32] <Paperbot> Link title(s): [ GitHub - github/copilot.vim: Neovim plugin for GitHub Copilot ]
[05:49:36] <daemon> simcop2387, nginx MITM to upgrade/downgrade
[05:50:54] <simcop2387> daemon: honestly though i'd probably never bother to do it.  since vscode can run in a browser now pretty easily
[05:51:23] <simcop2387> https://github.com/cdr/code-server # if you hadn't seen it
[05:51:24] <Paperbot> Link title(s): [ GitHub - cdr/code-server: VS Code in the browser ]
[05:51:59] <daemon> ~ cool but I errr kinda like my applications running on my own box, even if they are on my webservers I really like applications local >.>
[05:52:25] <mst> daemon: if you read the whole doc first and then use all the features it should be fine, but that was still a crappy set of errors for mistakes and I need to remember to fix them
[05:52:52] <mst> daemon: but being able to e.g. write a script that does
[05:53:03] <daemon> mst, most people will not read the entire doc, then send you emails - reading entire docs is something people do as a last resort generally
[05:53:29] *** Quits: Su-Shee (~Susanne@p5089416f.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[05:53:54] <mst> daemon: plx [ --init ] [ --cpanm -ldevel App::cpanminus App::cpm Carton ] [ cpm install ] [ carton install ] ...
[05:54:00] <mst> daemon: is really quite handy
[05:54:21] <mst> daemon: yes, that's why I started off by telling you it was docs as in 'BSD man page' currently :P
[05:54:31] <daemon> you know what would be cool for it; profiles
[05:54:42] *** Joins: Su-Shee (~Susanne@p4ffc7cc9.dip0.t-ipconnect.de)
[05:54:49] <daemon> so you could do: plx new MOJOLITE-WebSocket-Server
[05:54:53] <daemon> or w/e
[05:55:07] <mst> templates are an idea yes
[05:55:09] <daemon> and it just lays out the project for you for that recipe
[05:55:43] <daemon> it would be a hell of a thing
[05:55:45] <mst> but this is a focused tool
[05:55:52] <daemon> that is focussed
[05:56:07] <daemon> you want to develop an irc client, then create a barebones for it, bang its there
[05:56:29] <daemon> like the new project thingy in visual studio
[05:56:35] <mst> I intend more tools
[05:56:48] <mst> a plp for 'perl project' like you describe might be a good one
[05:56:56] <simcop2387> daemon: home assistant (open source smart home stuff) can use it for doing config editing in the browser, works pretty well.
[05:57:07] <daemon> whats more it will 'unfuck' the internet examples from 20 years ago
[05:57:14] <daemon> people will get what they should be using
[05:57:57] <daemon> it could even warrant .project files uploaded with specific modules with a skeleton layout for deployment
[05:58:05] <daemon> an exemplification of how to best use them
[05:58:27] <mst> next step is going to be a less stupid cpan client
[05:58:36] *** Joins: humky (~humky@user/humky)
[05:58:40] <mst> but that sounds like a good thing to do immediately after that
[05:59:23] <daemon> simcop2387, yeah I recently got some 'smart bulbs' totally proprietary api though ... they demand 2.4Ghz to talk though I am thinking of a little tcpdump, see what they are doing
[05:59:42] <mst> daemon: also, i don't expect most people to read an entire man page. I do, however, think that if I say "you really should" -you- specifically will actually do that :D
[06:00:03] <simcop2387> daemon: take a look at if anyone has any home assistant integrations with them already, the research might be done already
[06:01:02] <daemon> simcop2387, well I have multicolour LED's in this room and my bedroom I manage them with 'plusminus' on my phone
[06:01:08] <daemon> its also hooked to google assistant
[06:01:20] <daemon> mst, people won't :P
[06:01:37] <mst> daemon: duh
[06:01:54] <mst> daemon: you're superior and I warned you up front I hadn't written the normal people docs yet :P
[06:02:17] <daemon> mst, even my process is, 1) do what it says in the synopsis, if that did not work, read the error message ctrl-f for likewise function on page, 2) read the functions that are used in the synopsis, 3) read the man page
[06:02:55] <simcop2387> daemon: ah that's probably the tuya platform then, there's quite a bit of stuff around about them
[06:03:09] <daemon> simcop2387, 'lumimax' lights cheap and easy
[06:03:20] <daemon> mst, everyone on IRC is, you aint here if you are new to perl :P
[06:03:27] <mst> daemon: oh, sorry, I thought you were a FreeBSD user
[06:03:56] * mst read the entire handbook and doesn't run a command as root until he's read the entire man page
[06:04:18] <simcop2387> daemon: yea that's all tuya.  from what i know, tuya is a "standard" being developed by a chinese group for doing smart home stuff.  in theory they might possibly eventually allow local control of things.  it's on their roadmap they claim.
[06:05:40] <daemon> mst, I have a hardback copy of the 4.4 handbook >:)
[06:05:47] <mst> daemon: and yet
[06:05:50] <daemon> and freebsd ultiamte with the disk!
[06:06:19] <mst> daemon: my process is unix admin style
[06:06:32] <mst> daemon: your approach to plx was 'linux systemd kid' style
[06:06:38] <daemon> mst, I have to be honest I am usually pretty disappointed with (m)cpan to the point that half of the time I just write it my self
[06:06:47] <mst> daemon: I need to fix the errors but still :P
[06:06:54] <daemon> mst, that was not to you
[06:07:03] <daemon> that was just my general feeling on it
[06:08:05] <daemon> there are so few well documented modules that the default is to just give it a whirl rapid prototyper style and see what happens
[06:08:20] <daemon> I can't count the amount of times I have been wandering around other peoples code looking for some bloody information
[06:08:34] <simcop2387> daemon: https://www.home-assistant.io/integrations/tuya/ this will help you with understanding how those particular things work, and start finding code related to them (all python though).  and if you want to futz with the wifi controllers on them, https://esphome.io/components/tuya.html is a good place.  not all of them use ESP based chips anymore, there's a few that are starting to use one of
[06:08:34] <Paperbot> Link title(s): [ Tuya - Home Assistant ] [ Tuya MCU â ESPHome ]
[06:08:39] <simcop2387> the realtek wifi modules that came out a while ago and then some others i think
[06:08:43] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[06:08:49] <mst> daemon: yeah, don't do that with my code when I warn you it's man page style :P
[06:09:23] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 264 seconds)
[06:09:23] <daemon> mst, even so I would still just give it a whirl before reading the man page and I do the same with freebsd too, because sometimes 'it just works' and its a 2 second test :)
[06:09:32] <daemon> the difference here being I will read the page before I email you
[06:09:55] <mst> I don't, I read the man page -then- give it a whirl
[06:10:06] <mst> but I am very old school unix admin ;)
[06:10:46] <daemon> I am also, I still have terminals I have to rs-232 into :) but I still find giving it a go is worth a try!
[06:10:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:11:51] <mst> heh
[06:12:55] <daemon> which is why I end up with 4 row perl -e 's 
[06:12:59] <daemon> 'giving it a go' >.>
[06:14:24] <daemon> sigh I need to do more viBSD videos I miss BSD
[06:14:35] <mst> heh
[06:14:40] <daemon> iots a strange thing, but I find it so simple
[06:14:46] <daemon> everything is just where it should be
[06:15:32] <daemon> my development process is not waterfall like I imagine yours is either, I actually am more of a RP
[06:16:10] <daemon> I will slap a program together with `blah` system() calls on a first pass, the next call will refine it more, remove such nonsense, then even more refinement
[06:16:21] <daemon> my development process is close to 5 full passes
[06:16:56] <mst> honestly, I -do- kinda do that but I also do a bunch of thinking and understanding up front
[06:17:24] <daemon> I find it far easier to get to grasp with a complex program when I can see what is actually going on
[06:17:54] <daemon> I really have trouble reading technical data flows that are say beyond 3 stages of interaction
[06:18:21] <mst> I just tend to want to know the capabilities of the things I'm about to weld together before I start
[06:19:25] <daemon> see I don't I actually ACTIVELY try to avoid even being involved with such things, for me I would rather the guy that had the idea joined me on voice call with one of their devs to explain their interface, and explained what he wanted to happen
[06:19:34] <daemon> ill write the code right there, prototype style
[06:19:48] <daemon> then its time for analysis, now its clear what is actually going on
[06:20:16] <mst> i started off as a pure mathematician turned ISP ops
[06:20:28] <mst> it definitely shows, for better and for worse ;)
[06:21:06] <daemon> I would never have though ISP ops
[06:21:19] <daemon> the mathematician sleaves do show though :)
[06:21:36] <mst> this is why I burn through random source code so fast while debugging
[06:23:03] <daemon> I doubt many people would do it, but it would be fun to get a survey of the channel on 'their style of development'
[06:23:17] <daemon> see if there is any correlation the language has drawn the majority too
[06:23:42] <mst> but yeah, I ended up writing the user account provisioning code
[06:23:56] <mst> and became defacto responsibly for the mail, web and DNS servers in the process
[06:24:05] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[06:24:09] <mst> than later the radius stuff and half the ADSL platform
[06:24:20] <daemon> eck being reponsible for mail is pretty horrible anywhere
[06:24:41] *** Joins: rwp0 (~rwp0@user/rwp0)
[06:24:43] <mst> honestly I loved it
[06:24:51] <daemon> how/why
[06:26:08] <mst> building stuff that could take one of the smtp boxen out of the rotation, blow away all the spam in the queue, bring it back in, then migrate to the next ... that was controlled entirely by flag files on a shared nfs store so there was no actual controller machine required ... was amazing fun
[06:26:58] <mst> my first ever published piece of open source software was an open relay detector plugin for qmail
[06:27:33] <daemon> ooh have not heard of qmail for a while I expected sendmail
[06:27:59] <daemon> the very little I have played about with mail, I did enjoy exim
[06:28:05] <mst> we didn't get attacked much until we'd switched from freebsd to qmail
[06:28:08] <mst> gah
[06:28:14] <mst> freebsd sendmail to solaris qmail
[06:28:23] <mst> I did get to live debug qpopper on freebsd though
[06:28:32] <daemon> well freebsd's sendmail was used by lots of multinationalks for a long long long time
[06:28:49] <daemon> I bet some still use it now
[06:28:52] <daemon> even ms used it at one point
[06:28:57] <mst> management had told me I wasn't allowed to admit they'd made a mistake, and they weren't sure they could roll back
[06:29:21] <mst> so I debugged the pop3 server via a binary search by adding/removing a full stop from the end of its standard error message
[06:29:26] <mst> got it back up within an hour
[06:30:25] <simcop2387> mst: i will never understand the love some people have for qmail given that it basically doesn't do anything without third party patches and then you lose the supposed security benefits of it.
[06:30:40] <mst> then told the manager who'd deployed the broken version that if he ever redeployed the mail platform without talking to me first again that he'd be explaining his decisions to the board of directors
[06:31:16] <mst> simcop2387: that's because the security thing was never the point and you don't understand qmail at all
[06:32:00] <simcop2387> mst: not accordign to DJB, 
[06:32:28] <mst> simcop2387: you asked about the love people have for qmail
[06:32:34] <mst> simcop2387: don't move the fucking goalposts
[06:33:09] <simcop2387> mst: every single one that i've met that goes on about it always brings up how it's supposed to be the most secure because djb wrote it to be
[06:33:13] <mst> simcop2387: I once took an exchange server from dying on its arse regularly with all CPUs pegged even when it was happy ... to running at 10% CPU usage ... with a vanilla qmail install and a couple dozen lines of shell
[06:33:24] <mst> simcop2387: because it's unixy so you can just bolt pipelines together
[06:34:05] <daemon> night all ;) 4am is curtain time for me!
[06:34:09] <mst> simcop2387: so you met a bunch of stupid people. welcome to the internet. qmail's unixy-ness is still why it's awesome in the hands of somebody who knbows how to wield it.
[06:34:43] <simcop2387> mst: this wasn't on the internet, it was multiple people i've worked for
[06:34:53] <simcop2387> at different companies too
[06:36:50] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[06:37:02] <mst> simcop2387: and?
[06:37:16] <simcop2387> mst: i still don't understand those people even with your help
[06:37:31] <mst> simcop2387: dude, I did this for a living, those people we shook our head at and then went back to running working mail systems
[06:37:34] <simcop2387> you have valid reasons, t hey don'
[06:37:36] <mst> simcop2387: fanboys gonna fanboy
[06:38:32] <daemon> https://www.ebay.co.uk/b/Apple-Wireless-Access-Point/175709/bn_449704
[06:38:33] <Paperbot> Link title(s): [ Apple Wireless Access Point for sale | eBay ]
[06:38:42] <daemon> I am going to sleep just adding here to emphasize the fanboy thing ;)
[06:40:24] <simcop2387> mst: i do wish i could get any MTA setup to do masquerading stuff (i think that was the term), i.e. sort of like *@cpan.org but it rewrites the address so that when you reply it goes through the @cpan.org MTA to then go out to the real recipient, so that your real address isn't directly exposed, and so that the entire domain is just a forwarding scheme.  i'd love to give some people @perl.bot
[06:40:30] <simcop2387> accounts
[06:41:01] <simcop2387> daemon: i think that's less fanboy and more people looking for suckers
[06:41:08] <simcop2387> at least in that particular case
[06:42:09] <simcop2387> oh neat, i didn't know any of their models did 2.4 and 5g at all.  i thought it had ended at 802.11n 2.4
[06:44:06] <tm604> postfix makes that config relatively easy, although you'd normally drag a database into the mix just for fun
[06:44:20] <mst> simcop2387: I could probably make exim do that
[06:44:23] <simcop2387> tm604: yea i've failed twice at getting it working for some reason
[06:44:52] <simcop2387> mst: don't think i've seen anyone mention exim for it at least.  i'm guessing by munging stuff with perl in between it?
[06:45:05] <mst> simcop2387: in between?
[06:45:26] <simcop2387> mst: receiving and re-sending
[06:45:41] <mst> simcop2387: exim embeds a perl binary, you can do anything you want inline inside the mail server
[06:46:06] <genio> Anyone see anything obviously stupid so far in that? https://gist.github.com/genio/517e2790593d7193b69e68060e2260fb I've got errors in there but I'm not yet sure why
[06:46:07] <Paperbot> Link title(s): [ MSYS2 Setup Â· GitHub ]
[06:46:30] <simcop2387> that sounds like it'd be doable then.  i'd probably want to do what postfix does and add some kind of signature to the new from address so that i could detect someone trying to use it as a relay that way then
[06:46:31] <mst> genio: 'mst trying to comment on windows' would be obviously stupid I'm afraid, but good luck
[06:48:29] <simcop2387> genio: do you happen to have anything else on that machine that might have included nmake or dmake or something? (i.e. a non-gnu make.exe) that's fucking up things?
[06:49:15] <genio> nope. plain build of win10 with nothing that should interfere
[06:49:44] <simcop2387> msys2's sh is bash right?
[06:50:28] <simcop2387> i might toss a 'set -x' at the top of the build.sh to see all the steps it does (and not just what's explicitly echo'd) 
[06:51:13] <simcop2387> might give some indication of a path being changed when it shouldn't be
[06:51:57] <simcop2387> and are you able to find a config.h from the readline's configure script? those are the only real things i can think of for that
[06:54:04] <simcop2387> genio: and for extreme paranoia during debugging build.sh, since i'm assuming it's buggy.  set -e and set -u also.  -e will make it exit on the first command erroring and -u on the first undefined env var
[06:54:22] <simcop2387> so set -eu # strict mode \n set -x # trace execution mode
[06:54:30] <simcop2387> beyond that i see nothing obvious
[06:56:55] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[06:57:13] *** Joins: rwp0 (~rwp0@user/rwp0)
[06:57:16] *** Quits: nrr_ (sid20938@lymington.irccloud.com) (Ping timeout: 258 seconds)
[06:57:43] <genio> heh. it certainly dies faster :)      rm: cannot remove '/c/sp_build/build-extlibs/_2021Q4-small__.src/termcap-1.3.1': Directory not empty
[06:58:03] <genio> instead of moving on past that like before, it dies. 
[06:58:24] <simcop2387> yea you'd have to go through and make lots of stuff handle errors properly now. usually an || echo "This is fine"; is good
[06:58:25] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[06:58:36] <simcop2387> but it'll let you more quickly find the place that dies that actually matters
[06:59:56] <simcop2387> alright i think i'm finally through the effects of 600mg of caffiene being accidentally ingested.  i no longer feel like i'm on an addrenalline rush like i was all day
[07:00:50] *** Joins: nrr_ (sid20938@id-20938.lymington.irccloud.com)
[07:08:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 258 seconds)
[07:09:16] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Quit: Sleepy63)
[07:13:35] *** Quits: proller (~p@2a02:6b8:b081:8812::1:3) (Ping timeout: 264 seconds)
[07:13:42] <genio> I think I'm sufficiently brain fried for the evening. I'm likely still missing some very stupid thing. Maybe I'll see it in the morning
[07:14:54] <simcop2387> genio: well if you're not seeing it, neither am i at least
[07:17:11] *** Quits: Martchus (~martchus@2a01:c23:c572:9000:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[07:18:13] *** Joins: Martchus (~martchus@2a01:c23:c4ce:f600:d250:99ff:fe49:3cce)
[07:19:53] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[07:22:30] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[07:36:14] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[07:44:36] *** Joins: EvanCarroll (~ecarroll@172.56.14.149)
[07:46:06] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:46:29] *** Joins: fling (~fling@user/fling)
[07:49:35] *** Quits: EvanCarroll (~ecarroll@172.56.14.149) (Ping timeout: 260 seconds)
[07:50:34] *** Joins: ritsch_master (~ritsch_ma@77.119.173.249.wireless.dyn.drei.com)
[07:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[07:52:43] *** Joins: deadmarshal (~deadmarsh@95.38.230.175)
[07:56:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[08:04:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 245 seconds)
[08:07:50] *** Quits: deadmarshal (~deadmarsh@95.38.230.175) (Ping timeout: 260 seconds)
[08:08:47] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 264 seconds)
[08:12:55] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[08:16:11] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[08:17:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[08:18:11] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:21:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[08:25:03] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[08:25:20] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:26:55] *** Quits: rwp0 (~rwp0@user/rwp0) (Read error: Connection reset by peer)
[08:27:12] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:27:40] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[08:29:39] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[08:30:39] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[08:31:20] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[08:31:52] *** Joins: mattil (~mattil@helsinki.portalify.com)
[08:35:08] *** Joins: deadmarshal (~deadmarsh@95.38.230.175)
[08:36:15] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[08:40:30] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:44:28] *** Joins: rwp0 (~rwp0@user/rwp0)
[08:45:14] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[08:45:38] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[08:45:46] *** Joins: deadmarshal_ (~deadmarsh@95.38.114.28)
[08:45:49] *** Joins: japh (~japh@195-198-186-122.customer.telia.com)
[08:46:59] *** Quits: deadmarshal (~deadmarsh@95.38.230.175) (Ping timeout: 260 seconds)
[08:51:40] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[08:53:47] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[08:53:47] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:78f8:55d3:2311:6714) (Ping timeout: 264 seconds)
[08:55:40] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[09:01:52] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:02:40] *** Quits: deadmarshal_ (~deadmarsh@95.38.114.28) (Ping timeout: 260 seconds)
[09:07:18] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:11:38] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[09:11:38] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:11:41] * GumbyPAN CPAN Upload: App-ansicolumn-1.15 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-ansicolumn-1.15
[09:13:21] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 258 seconds)
[09:13:52] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[09:13:52] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:14:34] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:15:39] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[09:18:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[09:23:26] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 245 seconds)
[09:23:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[09:23:51] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[09:24:33] *** Joins: pucara (~i@181.92.71.111)
[09:26:02] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[09:30:06] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:34:58] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 268 seconds)
[09:38:26] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[09:44:33] *** Joins: rwp0 (~rwp0@user/rwp0)
[09:45:11] *** Joins: R2robot (~R2robot@user/r2robot)
[09:45:56] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! ð)
[09:46:41] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[09:50:24] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[09:50:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[09:51:10] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[09:51:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[09:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:54:23] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 264 seconds)
[09:55:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 245 seconds)
[09:57:41] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Quit: Leaving)
[09:59:54] *** Joins: rwp0 (~rwp0@user/rwp0)
[10:02:47] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[10:03:41] *** Joins: ufobat_ (~martin@dynamic-077-004-170-114.77.4.pool.telefonica.de)
[10:06:47] * GumbyPAN CPAN Upload: Log-Any-Adapter-DERIV-0.001 by BINARY https://metacpan.org/release/BINARY/Log-Any-Adapter-DERIV-0.001
[10:10:37] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:14:11] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[10:14:56] <karjala> Is it true that `local` can localize global variables and attributes of lexical (my) variables, but not lexical variables themselves? That's what my tests seem to indicate.
[10:15:11] <karjala> attributes = hash properties
[10:16:05] <karjala> I wonder why it doesn't do lexical variables too, to make the concept more complete
[10:16:31] <rindolf> karjala: i think so
[10:18:22] <rindolf> karjala: https://perl.plover.com/local.html - says "obsolete"
[10:18:22] <Paperbot> Link title(s): [ Seven Useful Uses of Local ]
[10:19:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[10:20:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:24:03] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 260 seconds)
[10:26:23] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[10:29:29] <tm604> karjala: yes, although https://metacpan.org/pod/Syntax::Keyword::Dynamically provides a local() equivalent for lexicals
[10:29:29] <Paperbot> Link title(s): [ Syntax::Keyword::Dynamically - dynamically change the value of a variable - metacpan.org ]
[10:29:56] <tm604> `local $lexical->{key}` is indeed fine (and quite common)
[10:30:27] *** Joins: rwp0 (~rwp0@user/rwp0)
[10:31:20] <tm604> (`delete local`, too - temporarily remove a hash element)
[10:32:24] <rindolf> tm604: isn't it "local delete"?
[10:35:29] *** Joins: art1 (~romeyke@p200300ccdf060b00ef7c168669070b98.dip0.t-ipconnect.de)
[10:45:35] *** Joins: tobybl (~tobybl@213.31.135.91)
[10:46:15] <Botje> local sourced vegan delete
[10:52:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[10:53:48] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[10:55:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[10:56:14] *** Quits: randir (~randir@95-25-159-246.broadband.corbina.ru) (Remote host closed the connection)
[10:57:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 264 seconds)
[10:57:45] *** Joins: zkrd (~xdg@2a02:587:de06:100:8db2:d7ed:cfae:76e5)
[11:00:23] <zkrd> https://l.perl.bot/p/8kbqhb 
[11:00:23] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[11:00:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[11:01:30] <rindolf> zkrd: hi, can you use XPath?
[11:01:39] <rindolf> Botje: heh
[11:02:18] <zkrd> rindolf, in Chrome?
[11:04:25] <rindolf> zkrd: no, in perl5
[11:04:38] <zkrd> never heard of it
[11:06:03] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[11:06:30] <rindolf> zkrd: https://en.wikipedia.org/wiki/XPath - you can do "./text()"
[11:06:31] <Paperbot> Link title(s): [ XPath - Wikipedia ]
[11:06:57] <zkrd> oh I see
[11:07:04] <zkrd> I already did that The Time //*[@id="sticky_container_2"]/div[1]/div[3]/div/div[1]/ul/li[1]/h3/a/span
[11:07:15] *** Joins: randir (~randir@93.159.239.42)
[11:07:16] <zkrd> and the Text //*[@id="sticky_container_2"]/div[1]/div[3]/div/div[1]/ul/li[1]/h3/a/text()
[11:07:44] *** Quits: Darkcoal_ (~user@51.158.144.32) (Read error: Connection reset by peer)
[11:08:13] <Botje> zkrd: why not just $x->child_nodes->first(sub{ $_->type eq "text"}) ?
[11:08:52] <Botje> or $span->next_node 
[11:10:03] <zkrd> Botje, thank you
[11:10:07] <zkrd> I will try it
[11:11:33] <Botje> not sure if Mojo::DOM will see the spaces inbetween nodes as text
[11:11:42] <Botje> in that case the second approach is probably the better one.
[11:13:22] *** Joins: Darkcoal_ (~user@167.86.132.92)
[11:18:59] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[11:19:32] *** Joins: Hexmind_ (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[11:20:37] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Ping timeout: 258 seconds)
[11:21:11] *** Joins: rwp0 (~rwp0@user/rwp0)
[11:21:39] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 268 seconds)
[11:24:00] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Remote host closed the connection)
[11:27:58] *** Joins: furrymcgee (~devuan@cgn-89-1-209-97.nc.de)
[11:29:02] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[11:31:58] *** Joins: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[11:34:07] <karjala> rindolf & tm604 : thanks
[11:35:09] <rindolf> karjala: you're welcome 
[11:42:59] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 264 seconds)
[11:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:52:59] *** Joins: rwp0 (~rwp0@user/rwp0)
[11:54:30] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[11:57:44] *** Joins: KnoP (~KnoP@218-131-088-212.ip-addr.vsenet.de)
[12:02:15] *** Joins: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk)
[12:06:09] <kiwiroy> https://l.perl.bot/p/sqa5ny
[12:06:10] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[12:06:17] <kiwiroy> zkrd ^^
[12:07:00] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[12:07:46] *** Joins: rwp0 (~rwp0@user/rwp0)
[12:08:35] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 260 seconds)
[12:09:06] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[12:10:47] <rindolf> perlbot: $a
[12:10:47] <perlbot> rindolf: Don't use $a or $b as variable names. Not even in examples. They are not normal variables and will not behave like normal variables. The only place they are cromulent is in a sort or List::Util block. Please see https://metacpan.org/pod/Perl::Critic::Policy::Community::DollarAB ; consider using $x, $y instead. | https://perldoc.perl.org/variables/$a
[12:10:53] *** Quits: Affliction (affliction@idlerpg/player/affliction) (Ping timeout: 264 seconds)
[12:11:25] <rindolf> kiwiroy: ^^^
[12:13:32] *** Joins: Affliction (affliction@idlerpg/player/affliction)
[12:14:47] *** Quits: Darkcoal_ (~user@167.86.132.92) (Ping timeout: 264 seconds)
[12:14:53] <kiwiroy> rindolf: good point, that should have been changed too.
[12:16:44] *** Joins: Darkcoal_ (~user@51.158.144.32)
[12:20:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:27:35] *** Joins: xenial-user5 (~androirc@20014C4C17E1D200DDEF598B180A23CD.catv.pool.telekom.hu)
[12:27:43] *** Joins: JRaspass (~JRaspass@68.183.32.235)
[12:30:44] *** Joins: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[12:32:47] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 264 seconds)
[12:35:27] *** Joins: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[12:36:56] *** Quits: _73` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 246 seconds)
[12:49:39] *** Joins: _73``` (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[12:51:20] *** Quits: _73`` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[12:55:57] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[12:56:00] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[12:56:00] *** Quits: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c) (Ping timeout: 260 seconds)
[12:59:34] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:02:05] * GumbyPAN CPAN Upload: Mojolicious-Plugin-OAuth2-2.01 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OAuth2-2.01
[13:02:24] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[13:03:22] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:07:11] *** Quits: KnoP (~KnoP@218-131-088-212.ip-addr.vsenet.de) (Ping timeout: 258 seconds)
[13:08:23] *** Joins: KnoP (~KnoP@ip-109-42-177-214.web.vodafone.de)
[13:10:32] *** Quits: xenial-user5 (~androirc@20014C4C17E1D200DDEF598B180A23CD.catv.pool.telekom.hu) (Ping timeout: 246 seconds)
[13:11:24] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 258 seconds)
[13:13:15] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:13:49] *** Joins: mattil (~mattil@helsinki.portalify.com)
[13:19:59] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[13:19:59] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[13:22:11] *** Joins: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[13:25:08] *** Joins: rwp0 (~rwp0@user/rwp0)
[13:25:31] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[13:27:07] * GumbyPAN CPAN Upload: XS-Parse-Sublike-0.14 by PEVANS https://metacpan.org/release/PEVANS/XS-Parse-Sublike-0.14
[13:33:00] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:33:45] *** Joins: csrf (~csrf@user/csrf)
[13:34:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:39:41] *** Quits: KnoP (~KnoP@ip-109-42-177-214.web.vodafone.de) (Read error: Connection reset by peer)
[13:42:52] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (Quit: leaving)
[13:43:11] *** Joins: DrHyde (~david@bytemark.barnyard.co.uk)
[13:43:19] *** Quits: _73``` (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[13:49:57] *** Joins: Pali (~pali@user/pali)
[13:52:05] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[13:52:11] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03) (Ping timeout: 260 seconds)
[13:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[14:16:01] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:17:07] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:17:07] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:17:18] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:18:39] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:23:39] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:25:03] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:26:03] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:26:05] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:26:12] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:30:27] *** Quits: rwp0 (~rwp0@user/rwp0) (Ping timeout: 260 seconds)
[14:31:03] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Remote host closed the connection)
[14:31:31] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:32:14] * GumbyPAN CPAN Upload: Alien-Build-2.45 by PLICEASE https://metacpan.org/release/PLICEASE/Alien-Build-2.45
[14:36:05] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Ping timeout: 265 seconds)
[14:40:43] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 260 seconds)
[14:44:49] <art1> HI, I am trying to install IO::Async under MS Windows, Strawberry Perl (v5.30.1, portable), but install fails with "POSIX fork() is not available". Any hints,how to fix this? 
[14:45:32] <Altreus> LeoNerd: this one's for you :)
[14:45:39] <rindolf> art1: hi
[14:47:27] <Altreus> art1: hope you're braced for the answer being "you can't"
[14:47:28] <art1> (install command was: cpanm IO::Async, it tried IO::Async 0.79)
[14:48:05] <Altreus> Windows doesn't have POSIX fork and that sounds like the sort of thing that if there were a workaround for, it would already be in the code
[14:48:58] <rindolf> mswin32 is all red here: http://matrix.cpantesters.org/?dist=IO-Async+0.79
[14:48:59] <Paperbot> Link title(s): [ CPAN Testers Matrix: IO-Async 0.79 ]
[14:49:38] <art1> rindolf: Gna! :'(
[14:50:40] <Altreus> Interesting that even people who try to support Perl 5.8 don't bother trying to support Windows
[14:52:01] *** Joins: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi)
[14:52:05] <art1> Hmmm, older versions seem to work according to cpan matrix. 
[14:53:02] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[14:53:06] *** Quits: ne2k (~andy@212.250.187.98) (Quit: Ex-Chat)
[14:54:45] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[14:56:10] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:56:35] *** Quits: mattil (~mattil@d1nw8-yrky3mn2q23jt-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[14:57:26] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:01:59] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:02:21] <Altreus> maybe before there was a fork option
[15:06:51] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[15:11:11] *** Quits: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[15:12:54] *** Joins: diskin (~diskin@87.117.62.113)
[15:15:38] <LeoNerd> art1: Yeah I forgot to skip a test on Windows.. Sorry
[15:17:26] <LeoNerd> If the only test failures are about that, you can just force install it
[15:18:05] <Altreus> didn't think of that!
[15:19:19] <art1> LeoNerd: Thx, I will first install with "--force" and test if my script works under Windows with IO::Async.
[15:19:48] <LeoNerd> It should hopefully be fine. If not, try the previous 0.78 version
[15:19:54] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:20:01] <LeoNerd> I added some new features and forgot that those won't work on Windows, and so it doesn't skip the tests for them
[15:29:01] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[15:29:44] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:29:45] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[15:30:00] *** Joins: mattil (~mattil@helsinki.portalify.com)
[15:31:20] * GumbyPAN CPAN Upload: Crypt-OpenSSL-CA-0.90 by DOMQ https://metacpan.org/release/DOMQ/Crypt-OpenSSL-CA-0.90
[15:32:20] <rindolf> LeoNerd++ # helpful
[15:32:56] <Adura> Windows is unforgettable.
[15:36:25] *** Joins: ejsu (~sjeis@lfbn-idf1-1-1744-28.w90-91.abo.wanadoo.fr)
[15:37:39] *** Parts: ejsu (~sjeis@lfbn-idf1-1-1744-28.w90-91.abo.wanadoo.fr) ()
[15:37:55] <rindolf> Adura: heh
[15:40:56] <rindolf> Adura: in one of my fic ideas, they call a system "FAILURE" because "ppl don't easily forget a failure"
[15:41:07] *** Joins: Aniar (~Aniar@23-116-8-40.lightspeed.cicril.sbcglobal.net)
[15:41:21] * GumbyPAN CPAN Upload: Astro-App-Satpass2-0.048_01 by WYANT https://metacpan.org/release/WYANT/Astro-App-Satpass2-0.048_01
[15:49:28] *** Quits: zln1 (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[15:49:59] *** Joins: KnoP (~KnoP@ip-109-42-177-214.web.vodafone.de)
[15:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:53:19] <xq> is `use v5.32;` preferred over `use 5.032;` and if so, why?
[15:54:09] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[15:54:41] *** Joins: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net)
[15:55:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5) (Ping timeout: 258 seconds)
[15:55:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:319c:b1d4:3651:39a5)
[15:55:53] <Altreus> yes but I'm fairly sure it's stylistic
[15:55:57] <Altreus> says what it means
[16:00:22] *** Joins: proller (~p@2a02:6b8:0:40c:df76:d6be:1496:5ce)
[16:01:11] *** Quits: KnoP (~KnoP@ip-109-42-177-214.web.vodafone.de) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[16:03:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:03:50] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:04:45] *** Joins: kylese (~kylese@p5dd8b668.dip0.t-ipconnect.de)
[16:13:27] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:14:06] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:15:23] *** Quits: japh (~japh@195-198-186-122.customer.telia.com) (Ping timeout: 264 seconds)
[16:17:47] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:17:59] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:21:48] <Grinnz> people are less likely to screw up `use v5.32;`, but `use 5.032;` works on perl 5.005
[16:22:00] <Grinnz> thats really the only difference
[16:26:21] <zgu> just don't do 'use 5.32'
[16:26:25] <zgu> that one doesn't work
[16:27:28] <zgu> at least not until 5.320 comes out
[16:28:24] <LeoNerd> in the year 2307, according to my count
[16:29:07] <El_Che> https://twitter.com/benlandis/status/1453707084088758275?s=20
[16:29:08] <Paperbot> Ben Landis (@benlandis) 3m16s ago: Me: self-discipline is a virtue. Also me: what if you replaced every instance of âselfâ with the word âelfâ?
[16:29:15] <El_Che> it works in perl
[16:29:22] <El_Che> $elf
[16:29:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:30:03] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:30:41] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:31:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[16:32:33] <xq> I've been using the form `use 5.0xy;` since forever, probably not going to change that
[16:32:40] <xq> thanks for info
[16:34:22] <LeoNerd> They're exactly equivalent, so it doesn't matter either way
[16:36:19] <LeoNerd> bleadperl -e 'use 5.035; say undef'  =>  still turns on 'use warnings'  for example
[16:36:22] *** Quits: Darkcoal_ (~user@51.158.144.32) (Read error: Connection reset by peer)
[16:36:30] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 260 seconds)
[16:37:46] <Altreus> presumably because use sees the same value
[16:39:02] <LeoNerd> It doesn't quite...  -MO=Deparse shows that the optree still remembers the difference between 5.036 (which is a plain NV scalar), vs v5.36 (which is a 'version' instance)
[16:39:07] <LeoNerd> But it implements the two the same way
[16:40:59] *** Joins: Darkcoal_ (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[16:41:36] <Altreus> eval: 0+v5.36
[16:41:38] <perlbot> Altreus: 0
[16:41:41] <Altreus> i say
[16:43:30] *** Quits: xenial-user5 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 260 seconds)
[16:43:48] <Altreus> eval: v5.36
[16:43:49] <perlbot> Altreus: $
[16:43:58] <Altreus> I have questions
[16:44:22] <xq> the above will warn
[16:44:40] <xq> sweval: 0+v5.36
[16:44:42] <perlbot> xq: Argument "^E$" isn't numeric in addition (+) at (IRC) line 1. 0
[16:45:04] <xq> I personally don't really like version strings
[16:45:34] <xq> not sure why they were necessary to implement in core
[16:46:27] * GumbyPAN CPAN Upload: CGI-Info-0.72 by NHORNE https://metacpan.org/release/NHORNE/CGI-Info-0.72
[16:46:46] <Altreus> because versions aren't numbers
[16:46:49] <LeoNerd> They are indeed somewhat weird
[16:49:35] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[16:53:02] *** Joins: zyweo (~Svew@user/zyweo)
[16:55:35] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[16:56:11] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[16:59:11] *** Quits: Darkcoal_ (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Ping timeout: 264 seconds)
[17:00:46] *** Joins: Darkcoal_ (~user@167.86.132.92)
[17:11:25] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[17:11:25] *** diskin is now known as Guest5879
[17:11:25] *** diskin_ is now known as diskin
[17:11:48] <tm604> Perl's approach of using IP addresses for versions makes far more sense than something weird like a "decimal number"
[17:12:28] <Altreus> seems to me perl is the only language that's actually using a decimal number for versions
[17:12:36] <Altreus> semver is the soup du jour
[17:14:15] *** Quits: Guest5879 (~diskin@87.117.62.113) (Ping timeout: 260 seconds)
[17:22:37] *** Quits: superkuh (~superkuh@user/superkuh) (Ping timeout: 268 seconds)
[17:24:28] <mst> Altreus: well, we have a major release number, a bugfix release number, and a vestigial 5 ;)
[17:26:28] *** Joins: superkuh (~superkuh@user/superkuh)
[17:30:32] <Altreus> I still have questions about what perlbot thinks the version string is
[17:30:49] <Altreus> I'm sure that used to be output as a legible version object
[17:31:41] *** Quits: tobybl (~tobybl@dhcp-199-132.inf.ed.ac.uk) (Ping timeout: 258 seconds)
[17:38:02] *** Quits: proller (~p@2a02:6b8:0:40c:df76:d6be:1496:5ce) (Ping timeout: 268 seconds)
[17:41:03] <Grinnz> Altreus: nothing to do with perlbot, you've printed the string "\cE$"
[17:41:21] <Grinnz> sweval: sprintf '%vX', v5.36
[17:41:23] <perlbot> Grinnz: 5.24
[17:42:06] <Grinnz> sweval: sprintf '%vd', "\x05\x24"
[17:42:07] <perlbot> Grinnz: 5.36
[17:43:00] <zkrd> how can I count 10 seconds without using sleep 10; ?
[17:43:17] <zkrd> I don't want my loop to stop, so I would rather avoid using sleep
[17:43:21] <Grinnz> and no, vstrings have never been printable. that's why we immediately replaced them with version.pm
[17:43:48] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:44:06] <Grinnz> zkrd: save the initial time(), check the difference time() each iteration
[17:44:18] <zkrd> Grinnz, thank you
[17:44:39] <Grinnz> zkrd: perhaps you wanted an event loop with timers? https://metacpan.org/pod/IO::Async::Loop
[17:44:39] <Paperbot> Link title(s): [ IO::Async::Loop - core loop of the IO::Async framework - metacpan.org ]
[17:44:47] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[17:44:57] <zkrd> let me check it
[17:45:22] <Grinnz> if you only add timers to the loop, it basically does what i just said but more efficiently
[17:45:34] <Grinnz> if you're doing any socket I/O, the event loop can help you do that non-blocking as well
[17:45:58] <Grinnz> so it really depends what else you're doing in that loop, whether it's worth replacing it with an event loop
[17:47:09] *** Quits: arthurpbs (~arthurpbs@168.121.99.212) (Ping timeout: 244 seconds)
[17:49:42] <zkrd> I am also doing some socket I/O
[17:50:02] <zkrd> maybe it is what I really need
[17:51:42] <Kobaz> so perly
[17:51:45] <Kobaz> the perls
[17:52:37] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[17:52:40] <Kobaz> okay so... i know lwp can be a little special when it comes to ssl vs curl.... here's my issue.  when i access a site like api.foobar.com on curl, it loads fine, and then using LWP it fails, does not trust the cert
[17:52:50] <Kobaz> what's the best way to debug that
[17:53:35] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[17:56:18] <Kobaz> this might be related to DST Root CA X3 Expiration
[17:56:22] <genio> It's most likely some out of date SSL libraries.   install IO::Socket::SSL and Net::SSLeay and LWP::Protocol::https
[17:56:27] <Kobaz> but my system ca-certificates has been rebuilt to handle that
[17:56:50] <Kobaz> i haven't investigated the ssl chain in question yet, hmm okay
[17:57:01] <mst> Kobaz: upgrade https://metacpan.org/pod/Mozilla::CA
[17:57:01] <Paperbot> Link title(s): [ Mozilla::CA - Mozilla's CA cert bundle in PEM format - metacpan.org ]
[17:57:10] <Kobaz> bam okay
[17:57:12] <Kobaz> yeah that makes sense
[17:57:13] <genio> sorry, I was writing that before you mentioned your cert chain issues
[17:57:55] <mst> Kobaz: your system certificates aren't the ones being used, I'd expect
[17:58:10] <Kobaz> yeah probably
[17:59:28] *** Joins: arthurpbs (~arthurpbs@168.121.98.170)
[18:06:13] <Altreus> I thought v created a version object, oh well
[18:06:56] <Kobaz> teh make installs
[18:07:48] <mst> Altreus: no, although perl will tend to convert it to one internally before it does anything with it
[18:08:56] <Altreus> print being outside of that trend
[18:09:57] <Grinnz> specifically, version->parse will, and that's invoked by UNIVERSAL::VERSION which is invoked by use Foo VERSION
[18:16:33] <mst> and IIRC leaks on 5.12 and 5.14
[18:16:58] <mst> $^V >= 5.14 will leak two version objects every time you call it
[18:17:01] <mst> it's hilarious
[18:17:09] *** Quits: ritsch_master (~ritsch_ma@77.119.173.249.wireless.dyn.drei.com) (Remote host closed the connection)
[18:17:15] *** Joins: tobybl (~tobybl@213.31.135.91)
[18:17:25] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:17:47] *** Joins: proller (~p@2a02:6b8:0:40c:8151:6163:ab32:70c1)
[18:17:58] <revhippie> Ooh, so you can check the version by comparing the version and seeing if it leaks!
[18:24:37] <mst> they show up in Devel::Gladiator but Devel::FindRef throws up its hands in despair
[18:24:42] <mst> that was a fun leak to track down ;)
[18:33:22] *** Quits: tobybl (~tobybl@213.31.135.91) (Quit: Leaving...)
[18:35:35] *** Joins: tobybl (~tobybl@213.31.135.91)
[18:39:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 264 seconds)
[18:44:14] *** Joins: CycoCid (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[18:44:58] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[18:46:49] *** Quits: Dreadnaught (Kulrak@n122-109-135-144.rdl2.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[18:51:40] * GumbyPAN CPAN Upload: AnyEvent-FTP-0.18 by PLICEASE https://metacpan.org/release/PLICEASE/AnyEvent-FTP-0.18
[18:52:46] * mst raises a glass to plicease's deceased SAN score
[18:56:21] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 268 seconds)
[18:57:34] <Altreus> maybe they started with a glass, which is plus SAN defence
[18:57:54] *** Joins: Shaeto (~Shaeto@94.25.234.118)
[18:58:02] <mst> I'm not sure if one glass is sufficient defence against AnyEvent
[19:02:49] *** Quits: Shaeto (~Shaeto@94.25.234.118) (Quit: WeeChat 3.3)
[19:03:54] <Altreus> https://media.istockphoto.com/photos/happy-woman-in-traditional-costume-holding-a-huge-beer-glass-picture-id155443662
[19:05:29] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:07:00] *** Quits: taeaad_ (~taeaad@user/taeaad) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:07:27] <mst> Altreus: that, but full of bourbon, might just about do the trick
[19:07:39] <mst> though at that point you probably might as well just put the ice cubes down the neck of the bottle and swig
[19:09:42] *** Joins: taeaad (~taeaad@user/taeaad)
[19:10:12] <Altreus> I clicked on the link and the number of modules in there is ... well I don't think we need to worry about SAN
[19:11:27] <mst> I dunno, having a full pluggable FTP server in there is going to require that sort of carefully factored Moo code
[19:11:42] * GumbyPAN CPAN Upload: Crypt-OpenSSL-Guess-0.14 by AKIYM https://metacpan.org/release/AKIYM/Crypt-OpenSSL-Guess-0.14
[19:11:46] <mst> ... though admittedly me thinking that's actually kinda cool is not exactly evidence in -favour- of sanity on the part of the author
[19:23:27] *** Joins: randir (~randir@95-25-159-246.broadband.corbina.ru)
[19:28:15] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[19:31:55] *** Parts: art1 (~romeyke@p200300ccdf060b00ef7c168669070b98.dip0.t-ipconnect.de) ()
[19:36:12] *** Joins: ufobat__ (~martin@dynamic-095-118-154-164.95.118.pool.telefonica.de)
[19:37:48] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 258 seconds)
[19:38:36] <daemon> sanity is overrated
[19:39:23] *** Quits: ufobat_ (~martin@dynamic-077-004-170-114.77.4.pool.telefonica.de) (Ping timeout: 264 seconds)
[19:39:44] *** Joins: WinterStar (~IceLight@user/icelight)
[19:43:07] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 260 seconds)
[19:52:42] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[19:53:09] <sprout> rationality was a mistake
[20:00:00] *** Joins: krismatrix (~krismatri@2601:2c6:4a80:b410:adf3:f635:ff74:49a1)
[20:00:59] <krismatrix> does the bless keyword have any use beyond establishing something as an object? As I understand perl better, I am wondering why this line was created as necessary in perl.
[20:01:29] <Altreus> no not really. OO was stuck on and this is how it was done :)
[20:01:36] <cjac> bless returns the input reference but with a new namething
[20:01:59] * cjac waves hands
[20:03:43] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[20:05:13] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:78f8:55d3:2311:6714)
[20:11:34] <mst> Altreus: I mean, 'a struct and a vtable' is a pretty standard way to implement OO
[20:13:18] <mst> krismatrix: because it provides more flexibility than establishing constructors as a special case, basically
[20:13:35] *** Quits: lllh (~llh@198.48.244.21) (Ping timeout: 264 seconds)
[20:13:44] <krismatrix> hmmm...
[20:14:19] <krismatrix> well...not a big deal.
[20:14:39] <mst> and it's allowed perl to evolve its OO model on CPAN which is why we've now got better and more flexible OO than pretty much any other dynamic language in the same class
[20:15:15] *** Quits: proller (~p@2a02:6b8:0:40c:8151:6163:ab32:70c1) (Ping timeout: 260 seconds)
[20:15:21] *** Quits: kylese (~kylese@p5dd8b668.dip0.t-ipconnect.de) (Quit: Leaving)
[20:15:54] <krismatrix> hmmm...is it better and flexible? I mean, my (limited) understanding is that Moose, Moo, simplify the OOP process. Something I definitely like, but not sure what you mean by flexible or better.
[20:16:03] <Altreus> metaclasses, roles
[20:16:16] <Altreus> mostly metaclasses
[20:16:44] <mst> for me, it's pluggable attributes, roles, and flexible constructors
[20:17:19] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:17:54] <mst> you can theoretically build the same stuff in python or JS but because there was a (limited but) standard way progress there has been much slower
[20:18:59] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 264 seconds)
[20:19:24] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[20:21:04] *** Joins: proller (~p@2a02:6b8:0:40c:49db:6322:67f4:1495)
[20:21:53] <krismatrix> I know about flexible constructors, and they are indeed nice. The rest of the concepts mentioned don't mean anything (i.e. I don't know what you mean...not saying you are wrong).
[20:22:34] <mst> krismatrix: 'has' and 'with' basically
[20:23:36] <krismatrix> one thing my effort with DS and algo programming in perl has helped me immesnly was understanding how to do vanilla oop. It is actually very simple...I was totally making it way more complicated than necessary.
[20:24:16] <mst> it's worth understanding the lower levels, definitely, though actually using them directly isn't something one tends to need to do much
[20:24:26] <mst> but knowing how the tools you -are- using work is really nice
[20:26:17] <krismatrix> right.
[20:27:26] <krismatrix> plus...sometimes you get examples of concepts in other languages (usually in python or JS for things i normally looking for). So it helps to be able to translate to equivalent..before doing more fancier stuff.
[20:28:22] <krismatrix> do you guys recommend using perl to convert to WASM? Or do you advise against it..and recommend sticking with something like rust?
[20:29:10] <buZz> we from #perl recommend perl
[20:29:17] <buZz> and not js
[20:29:27] <buZz> :D
[20:29:38] <Altreus> does perl even compile to WASM?
[20:29:40] <krismatrix> rust is not js
[20:29:51] <buZz> Altreus: compile? :D
[20:29:59] <buZz> krismatrix: WASM is js
[20:30:05] <buZz> isnt it?
[20:30:14] <ether> no
[20:30:15] <krismatrix> no. I don't think it is.
[20:30:15] <ether> https://metacpan.org/pod/Wasm
[20:30:15] <Paperbot> Link title(s): [ Wasm - Write Perl extensions using Wasm - metacpan.org ]
[20:30:39] <krismatrix> WARNING: WebAssembly and Wasmtime are a moving target and the interface for these modules is under active development. Use with caution.
[20:31:09] <krismatrix> i am just curious...i am not building anything in WASM right now.
[20:35:32] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[20:35:50] *** Joins: japh (~japh@host-95-192-104-187.mobileonline.telia.com)
[20:36:26] <Altreus> If I could take all the problems I have with all languages and create a language that avoids them all, it might be rust ...
[20:36:36] <Altreus> Except for the one problem where I can't fucking read languages like rust
[20:36:45] <Altreus> So I stick with perl :D
[20:42:08] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[20:44:47] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[20:45:23] *** Quits: japh (~japh@host-95-192-104-187.mobileonline.telia.com) (Ping timeout: 264 seconds)
[20:45:39] <krismatrix> really? I don't see what's so special about rust. Ppl do seem to love it. I think for me, it's the paradigm that the language is trying to be and solve that matters. Perl, JS, Python, Php..seems to all fall under a similar domain, and I happen to like perl the most. Sadly..with data science, i have to use python. I don't have much experience where speed is paramount, and so I am trying to figure out whether I need to master C, 
[20:45:39] <krismatrix> C++ or Rust.
[20:46:23] <cjac> krismatrix: I'm trying to enable perl on data science
[20:46:46] <krismatrix> cool. How so?
[20:46:48] <cjac> it might be an uphil battle, though
[20:46:50] <krismatrix> using pdl?
[20:47:20] <cjac> step 1) google auth, step 2) grpc, step 3, google cloud API libraries
[20:48:11] <krismatrix> what do those steps have to do with data science?
[20:48:23] <cjac> oh, sorry.  I guess that's not obvious :-)
[20:48:54] <cjac> my role is support for big data at google.  most of the cases that come in have to do with java and python.  some scala.
[20:49:02] <cjac> I think perl is a better fit in many cases.
[20:49:48] <cjac> once the google cloud api libraries are implemented in perl, customers could submit their dataflow, dataproc, bigtable, bigquery jobs with perl.
[20:50:05] <krismatrix> So you work for google directly or are you saying you are contracted (or something else) with google?
[20:50:19] <cjac> that's public information
[20:50:49] <krismatrix> ?
[20:50:55] <krismatrix> ok.
[20:51:23] <krismatrix> so you are saying that once you can implement the google cloud api libraries in perl...
[20:51:32] <cjac> (I don't want to talk about it, but with a /whois, you'll know)
[20:51:47] <cjac> yes
[20:52:26] <krismatrix> ok. 
[20:52:31] <krismatrix> umm...
[20:52:53] <krismatrix> when you say customers could submit their dataflow, dataproc..etc...what do you mean? 
[20:53:09] <cjac> sorry.  that was confusing.  the 17:21 < cjac> (I don... was in response to 17:20 < krismatrix> So you work
[20:53:19] <cjac> https://cloud.google.com/bigquery/docs/reference/rest
[20:53:20] <Paperbot> Link title(s): [ BigQuery API Â |Â  Google Cloud ]
[20:53:22] <cjac> do you know bigquery?
[20:53:36] <krismatrix> No. Other than in abstract sense i guess.
[20:53:38] <cjac> when you say "data science", what are you meaning?
[20:53:51] <krismatrix> And I am following the conversation....
[20:53:59] <cjac> with data science, i have to use python
[20:54:12] <krismatrix> I am just speaking broadly about using the benefits of numpy, scipy, tensorflow, matplotlib, etc.
[20:54:47] <krismatrix> Let's say I want to do something super simple, like draw a bar chart...i'd go for matplotlib/python over perl.
[20:54:48] <cjac> oh, yes.  those libraries are a bit more robust and offer a lot of stuff that doesn't exist in cpan
[20:55:19] <cjac> hmm.  it's been a while, but I liked Imager
[20:55:42] <krismatrix> i thought pdl did them. But I haven't invested too much time with it.
[20:55:43] <cjac> it's more raster pixel putting rather than line drawing, though
[20:55:55] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[20:56:25] <cjac> right, and pandas and stuff don't exist in the perl world.  I see what you're saying.
[20:56:54] <krismatrix> I take it you are not working on that. But you are working on more data analysis broadly.
[20:57:00] <cjac> but maybe once folks are able to launch big data jobs with perl, they'll want to prefer staying with perl instead of system()'ing their way in to python3 for the libraries...
[20:57:10] <krismatrix> right.
[20:57:24] <cjac> it's my 20% project, so I'm not officially working on it for $employer
[20:57:50] <krismatrix> I take it you know GCP well?
[20:58:29] <cjac> I'm okay after fielding customers' questions for a couple years.  I wouldn't say I'm a master in GCP, but I can fumble my way through it to reproduce customer issues if needed.
[20:59:26] <krismatrix> any advice on where to start with GCP if I have no clue of anything (no AWS, GCP or Azure prior knowledge).
[21:00:43] *** Joins: laidback_01 (~laidback_@206.214.225.199)
[21:00:44] <cjac> we have a lot of great courses for employees.  :-)  Let me see if I can find out how civilians get at them
[21:00:59] *** Joins: magla (~gelignite@55d48754.access.ecotel.net)
[21:01:18] <cjac> https://www.coursera.org/professional-certificates/preparing-for-google-cloud-machine-learning-engineer-professional-certificate?utm_source=gg&utm_medium=sem&utm_campaign=18-GoogleCould-ML-Engineer-US&utm_content=18-GoogleCould-ML-Engineer-US&campaignid=13610233648&adgroupid=123455330306&device=c&keyword=coursera%20google%20cloud%20machine%20learning&matchtype=b&network=g&devicemodel=&adpostion=&creativeid=5289
[21:01:19] <Paperbot> Link title(s): [ Preparing for Google Cloud Certification: Machine Learning Engineer Professional Certificate | Co... ]
[21:01:24] <cjac> 91359285&hide_mobile_promo&gclid=Cj0KCQjwlOmLBhCHARIsAGiJg7n3Np0sTRF_mzJh-XPm2ubuwnRl39i9EBoxLbFizy1zHug1Q9iB7K0aAgTBEALw_wcB
[21:01:27] <cjac> is that one free for you, too?
[21:01:35] <krismatrix> yes
[21:01:44] <cjac> start with that, I'd say
[21:02:01] <cjac> it's specific to ML, which may not be exactly what you're going for, but the fundamentals are common
[21:02:10] <krismatrix> Sounds good.
[21:02:40] <krismatrix> are these the same courses if I want to learn...say...how to write my own api to automate uploading files to gdrive...as an example.
[21:03:05] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[21:04:27] <cjac> I think it'd be best to read the ruby implementation for that.  just a moment
[21:04:30] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[21:04:54] <cjac> git@github.com:googleapis/google-cloud-ruby.git
[21:05:26] <krismatrix> oh...don't worry about that. 
[21:06:03] <krismatrix> Some api documentation feels complex to me. So I am trying to find out the best way to learn it. But sometimes, you just gotta do it.
[21:06:32] <cjac> before you can implement google-cloud-perl, though, you'll need an implementation of google-auth-library-perl and https://github.com/grpc/grpc/tree/master/src/ruby
[21:06:33] <Paperbot> Link title(s): [ grpc/src/ruby at master Â· grpc/grpc Â· GitHub ]
[21:07:52] <cjac> or do you mean that you're looking for the docs on how to use your favorite language's binding to the REST API?
[21:08:47] <cjac> https://developers.google.com/api-client-library
[21:08:48] <Paperbot> Link title(s): [ API Client Libraries Â |Â  Google Developers ]
[21:09:40] <cjac> that one just points back to https://github.com/googleapis/google-api-ruby-client/blob/main/README.md
[21:09:41] <Paperbot> Link title(s): [ google-api-ruby-client/README.md at main Â· googleapis/google-api-ruby-client Â· GitHub ]
[21:10:05] <krismatrix> I don't know how to answer you question. Let me try to explain how i think..and see if this gives you context. When I used nexmo (a twilio like sms api), they had curl/wget commands which you could request...and provide a callback url. I would use this back and forth request/response to send an sms, but I would do the logical implementation in perl.
[21:10:43] <cjac> drive = Google::Apis::DriveV3::DriveService.new # ruby implementation
[21:11:09] <krismatrix> When I now look at api documentation..i often find examples in python or js. But I want to build it all in perl.
[21:11:31] <cjac> right.  so that's because we don't have a perl library.
[21:11:34] <krismatrix> without having to simply shell out to python/js.
[21:11:36] <cjac> I would like to develop one
[21:11:45] <cjac> the team that does this for ruby is here in Seattle
[21:11:52] <krismatrix> ah.
[21:12:01] <cjac> so I figure I can piggyback on the work they have done recently (just released!)
[21:12:51] <krismatrix> right.
[21:13:02] <cjac> in my copious free time.
[21:13:21] <krismatrix> lol
[21:13:29] *** Quits: WantToHelp (~dale@96.77.40.70) (Changing host)
[21:13:29] *** Joins: WantToHelp (~dale@user/wanttohelp)
[21:13:37] <PapaChub> Can anybody think of a way to figure out whether I'm running inside bash(1)'s "cat <(myProg)" ?
[21:13:41] <PapaChub> For whatever reason, on my system [macOS 10.14.6; perl 5.18.4; brew readline 8.8.1] the following:  cat <(perl -MTerm::ReadLine -E 'Term::Readline->new($0)')  hangs (and "lingers" after ^C) under Term::ReadLine::Gnu
[21:13:47] <PapaChub> But "perl -M... | cat"  and  "cat < <(perl -M...)"  (Note the extra '<' redirection) both work fine, so "-p STDOUT" isn't enough...
[21:14:06] <cjac> PapaChub: maybe you can find your ppid?
[21:14:20] <PapaChub> `getppid()`, sure...  But then?
[21:14:36] <cjac> is it bash?
[21:14:58] <cjac> if not, is its parent bash?
[21:15:11] <cjac> if not, is its parent systemd/init/1?  if not not, is it bash?
[21:15:22] <mst> PapaChub: why not check '-t STDIN' to see if you're attached to a terminal or not?
[21:15:22] <Grinnz> PapaChub: it sounds more like you want to know whether your program is attached to a tty, because there's lots of other ways for it not to be
[21:15:29] <Grinnz> what mst said
[21:15:41] <mst> PapaChub: you seem to be trying to 'solve' a different problem than the one you have
[21:15:53] <Grinnz> my $isa_tty = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ; # from ExtUtils::MakeMaker
[21:16:55] <PapaChub> perl -E 'open my $TTY, ">>" => "/dev/tty"; say $TTY "Hi"' </dev/null >/dev/null 2>/dev/null
[21:17:30] <Grinnz> ?
[21:17:49] <PapaChub> (I'm at the crossroads of "corner case" and "edge condition"...)
[21:17:59] <Grinnz> opening a tty doesn't have anything to do with what STDIN/STDOUT/STDERR are
[21:18:40] <Grinnz> if your problem is more complex than "check if i should prompt the user for input", please elaborate
[21:19:11] <PapaChub> Regardless, "-t STDIN" doesn't care about "cat <(...)"
[21:21:54] * GumbyPAN CPAN Upload: App-Kramerius-URI-0.03 by SKIM https://metacpan.org/release/SKIM/App-Kramerius-URI-0.03
[21:23:27] <PapaChub> IIRC, the whole thing started when I was trying to do something like, "diff <(appThatPrompts) known-good.out"
[21:25:03] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[21:25:15] <mst> PapaChub: you could also try Term::ReadLine::Perl5 in the hopes that detects things differently
[21:25:24] * mst tends to use p3rl.org/Caroline for new code
[21:25:27] <Grinnz> that bash syntax is supposed to put the stdout in a tempfile and then pass that as an argument right?
[21:26:10] <PapaChub> mst, Does Term::ReadLine::Perl5 support History and Completion?
[21:26:18] <Grinnz> does it not inherit STDIN?
[21:26:29] * Grinnz tests
[21:26:32] *** Joins: Vicissitude (~Vicissitu@user/vicissitude)
[21:26:52] *** Quits: krismatrix (~krismatri@2601:2c6:4a80:b410:adf3:f635:ff74:49a1) (Quit: Leaving)
[21:26:58] <PapaChub> Grinnz, It creates a FIFO "/dev/fd/63"
[21:27:01] <fizzie> <(command) doesn't use a temporary *file*, it just expands to a /dev/fd/N entry connected to the command in question's stdout.
[21:27:16] <Grinnz> well, still technically a file because unix :D
[21:27:43] <fizzie> Fair enough, it's just not a "regular" file. 
[21:27:47] <mst> history definitely, not sure about completion
[21:28:04] <Grinnz> weird, `cat <(perl -E'my $line = <STDIN>; say $line')` waits on STDIN like it inherits it, but sending a line doesn't work
[21:31:05] <fizzie> Here it just writes a single newline and terminates.
[21:31:34] <fizzie> Also, `cat <(cat)` prints "cat: -: Input/output error" which I don't want to think about at all. Some kind of Lovecraftian file descriptor tangle.
[21:32:20] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:32:23] <Vicissitude> Sure it's not Asimovian?
[21:32:53] <cjac> programmed not to harm humans?
[21:33:15] <Vicissitude> indeed
[21:33:38] <cjac> no footguns included?
[21:34:13] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 268 seconds)
[21:34:13] <cjac> but those usually come free, and there are some users who insist on them as a critical feature.
[21:34:29] <PapaChub> "Enough rope to hang yourself"
[21:34:50] *** Quits: proller (~p@2a02:6b8:0:40c:49db:6322:67f4:1495) (Ping timeout: 268 seconds)
[21:40:26] <leitz> Sorry for the dumb question, my brain is fried. If you pass a hash reference to a sub, and the sub modified data in the hash, shouldn't the change be viewable outside of the sub?  https://gist.github.com/LeamHall/6bb162c72463a52ca26e03d0e40252a2
[21:40:27] <Paperbot> Link title(s): [ pass_hash_ref.pl Â· GitHub ]
[21:40:48] <cjac> leitz: yes
[21:41:09] <leitz> cjac, looks like I'm missing more than my usual clue...
[21:41:28] <PapaChub> `%$th` created a copy; try `$th->{guido} = 27`
[21:41:36] <cjac> unless you copied the contents of the hash ref passed in
[21:41:54] <mst> and then modified the copy and never touched the original
[21:42:49] <leitz> PapaChub, that works. 
[21:43:02] <PapaChub> ð
[21:43:23] <leitz> So, doing the "my %th = %$th" makes a copy?
[21:43:38] <cjac> yes, that's one way to do it
[21:43:43] <cjac> it's a shallow copy, but a copy
[21:43:59] <leitz> I thought it dereferenced it in place. My goal is to alter the data in the original.
[21:44:28] <cjac> then use $th->{...} rather than $th{...}
[21:44:44] <cjac> and don't create a local %th in the first place
[21:45:13] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Read error: Connection reset by peer)
[21:46:07] <leitz> Nice.
[21:46:30] <PapaChub> A [less-than-awesome] alternative would be to set `$_[0] = \%th` at the end
[21:46:32] <PapaChub> (but I threw up in my mouth a little just writing that...)
[21:46:42] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[21:46:47] <cjac> heh
[21:46:55] <cjac> I went through the same thing, but didn't mention it.
[21:46:56] <leitz> i prefer clean and simple.
[21:47:48] <mst> on a more recent perl than leitz is likely using
[21:47:55] <mst> my \%th = $th;
[21:48:06] <leitz> mst, oddly enough it's 5.26.
[21:48:27] <leitz> Positively futuristic, compared to my usual...
[21:48:58] <mst> leitz: in that case, 'use experimental qw(refaliasing);'
[21:49:10] <mst> oh, actually
[21:49:14] <mst> leitz: in that case, 'use experimental qw(refaliasing declared_refs);'
[21:49:33] <leitz> The -> seems to work.   :)
[21:49:36] <mst> which indeed 5.26 was the first version to support
[21:49:53] <mst> though with just refaliasing you could do
[21:49:58] <mst> \my %th = $th;
[21:50:53] <leitz> And by the way, mst, how have you been?
[21:52:33] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[21:52:48] <zgu> i love how i have 3 different servers with wildcard certs on the same domain from letsencrypt, and the emails saying one of them is expiring soon have absolutely nothing that tells me which one it is
[21:53:45] <Adura> 3 different email addresses...!
[21:54:00] <mst> the correct solution is to check the cron jobs for all three so you don't have to care about any of them going forwards
[21:54:03] <mst> leitz: eh, not too bad
[21:59:18] <zgu> oh wait it is the one i thought it was. but apparently certbot is still doing that thing where it just hangs forever after it runs the restart services hook
[21:59:35] <zgu> so next time cron runs it it doesn't do anything because there's already one running
[22:00:06] <zgu> thought i had somehow fixed or worked around that, but i guess i only *thought* about fixing it
[22:00:08] <Adura> I use Crypt::LE, no idea if it's good, but it gets the job done.
[22:01:12] <mst> ... facebook is renaming itself to "meta", so I presume emacs users everywhere are noting that actually that means 'Control' and finding it kind of on the nose
[22:01:13] *** Quits: noctux (~noctux@user/noctux) (Read error: Connection reset by peer)
[22:01:42] <Adura> But, now do you pronounce it?
[22:01:44] <buZz> rofl 'meta'
[22:01:51] <buZz> Adura: like 'meta'
[22:01:54] <buZz> its a common word
[22:02:18] <Adura> How do you pronounce beta?
[22:02:21] <zgu> meta is alt
[22:02:38] <zgu> as in M-<right>, the group behind most of facebook's bad press
[22:02:39] <Vicissitude> i meta beta in a sweata
[22:03:41] <buZz> Adura: how do you pay attention in highschool language classes :D
[22:03:44] *** Joins: noctux (~noctux@user/noctux)
[22:03:53] <mst> Adura: over here, like 'beeta'
[22:03:56] <mst> Adura: 'betta' is a fish
[22:04:07] <mst> * Vicissitude is now known as Fishissitude
[22:04:30] <buZz> pronounced 'bÃ¨ta' here
[22:04:33] <Vicissitude> that's hard to say
[22:04:46] <buZz> 'beeta' is someone that beats you up in dark alleys
[22:04:47] <Adura> Time to find that tts site with the Brit.
[22:08:13] <Adura> Meta only slightly differs compared to beta.
[22:08:58] <buZz> correct, its a horrible name
[22:09:14] <buZz> but at least , they now admit that the only product of facebook , is the metadata you are gifting them
[22:09:30] *** Joins: R2robot_ (~R2robot@user/r2robot)
[22:09:39] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 260 seconds)
[22:17:13] <Adura> https://stream.ttsfree.com/voice-guest-k4o4k43424f4s2i4l4l464g464c4t2-l4q4m4b4m494b4t234n41635446708.mp3?file=1635446708
[22:17:25] <Adura> Watch it not work on other IPs or some shit.
[22:32:08] <vague> Facebook is so meta
[22:32:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:33:35] <BinGOs> never meta a face I liked
[22:36:21] *** Joins: proller (~p@80.240.216.69)
[22:36:23] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 264 seconds)
[22:41:35] *** Quits: pflanze (~pflanze@2001:1a88:19e:4500:a0c1:497c:91e:9cca) (Quit: Leaving)
[22:41:47] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[22:42:10] *** Joins: proller (~p@2a02:6b8:b081:a410::1:18)
[22:44:11] *** Quits: R2robot_ (~R2robot@user/r2robot) (Ping timeout: 246 seconds)
[22:46:46] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:46:47] *** Quits: X-Scale (~ARM@31.22.203.65) (Ping timeout: 258 seconds)
[22:46:49] *** Joins: R2robot_ (~R2robot@user/r2robot)
[22:47:54] *** X-Scale` is now known as X-Scale
[22:56:56] *** Hexmind_ is now known as Hexmind
[23:09:10] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[23:10:22] *** Joins: EGD (~egd@user/egd)
[23:12:28] *** Quits: R2robot_ (~R2robot@user/r2robot) (Ping timeout: 258 seconds)
[23:12:28] *** Joins: R2robot (~R2robot@user/r2robot)
[23:18:57] *** Quits: magla (~gelignite@55d48754.access.ecotel.net) (Quit: Stay safe!)
[23:22:31] *** Joins: deadmarshal (~deadmarsh@95.38.114.28)
[23:24:35] <subie> you should, then, write a book
[23:26:01] *** Quits: pucara (~i@181.92.71.111) (Quit: Lost terminal)
[23:27:05] *** Quits: Vicissitude (~Vicissitu@user/vicissitude) (Quit: Leaving)
[23:27:33] <mst> imagine how different the world would be if somebody'd taught 18 year old Zuckerberg how to talk to girls
[23:28:25] <shaldannon> yeah, we'd still have mySpace, and that dude that was everyone's friend
[23:29:29] *** Quits: deadmarshal (~deadmarsh@95.38.114.28) (Ping timeout: 264 seconds)
[23:29:34] <mst> Gregarity Georg
[23:30:06] *** Quits: eblip (~eb0t@90.210.92.98) (Ping timeout: 245 seconds)
[23:32:04] *** Joins: eblip (~eb0t@90.211.41.180)
[23:32:22] <LeoNerd> Plus all the things Google wouldn't have to do to feel like they were competing
[23:32:27] <LeoNerd> We'd likely still have Reader
[23:32:43] <simcop2387> mst: we'd jave fewer zuckerbots
[23:32:46] <simcop2387> have*
[23:33:32] <simcop2387> LeoNerd: i still run my own tinytinyrss,  cloest to the old reader experience i know of
[23:37:34] <LeoNerd> http://paste.scsys.co.uk/596086  -- so anyhow, I wrote this today
[23:37:34] <Paperbot> Link title(s): [ magnet_web paste from "LeoNerd" at 217.168.150.38... ]
[23:38:23] <revhippie> neat
[23:39:41] <mst> aritastic
[23:45:03] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[23:47:11] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Ping timeout: 260 seconds)
[23:47:20] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[23:47:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:51:27] <ether> https://twitter.com/Wendys/status/1453805031463993346
[23:51:28] <Paperbot> Meat (@Wendys) 56m23s ago: Changing name to Meat
[23:55:26] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[23:55:39] *** Joins: X-Scale` (~ARM@46.50.5.8)
[23:56:38] *** X-Scale` is now known as X-Scale
[23:59:47] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
