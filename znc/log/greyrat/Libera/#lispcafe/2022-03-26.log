[00:20:57] <rotateq> sounds like concurrence for what the CLASP implementation by drmeister was made for: https://www.youtube.com/watch?v=FYVf0bRgO5Q
[00:20:58] -ixelp- DeepMind AlphaFold: A Gift To Humanity! 🧬 - YouTube
[00:23:34] <rotateq> but like this other newer thing AlphaCode aka "so programmers will be jobless soon"
[00:32:53] <shka> i really hate this deep learning stuff with passion
[00:33:10] <rotateq> shka: you speak right out of my soul
[00:33:14] <semz> same
[00:33:28] <shka> it is fine for detecting cats
[00:33:42] <shka> it sucks for stuff that is supposed to be understood by humans
[00:34:05] <rotateq> and this "programmers will be jobless" shit will maybe just be for those amount of masses for trivial areas where those kiddies already rely on the former work of REAL programmers
[00:35:35] <rotateq> shka: people seem to like intransparent blackboxes
[00:36:02] <shka> rotateq: that fail without apparent reason
[00:36:13] <rotateq> :)
[00:36:15] <shka> and it is great way to do chemistry
[00:36:21] <shka> or any other science 
[00:36:27] <rotateq> Science!
[00:37:09] <shka> well, i seriously consider this to be offensive to the human mind
[00:38:10] <rotateq> :D
[00:39:01] <semz> https://www.csee.umbc.edu/courses/graduate/691/fall19/07/papers/AI_Meets_Natural_Stupidity.pdf <- This is a great paper and I'm always reminded of it when I hear the term machine "learning".
[00:39:14] <semz> Dijkstra's stuff about anthropomorphism in science too
[00:39:48] <rotateq> hehe humans are best acting stupidly like living in Plato's cave illusion and think this to be reality
[00:41:44] <semz> You wouldn't see anyone discuss whether a stochastic optimizer should have human rights, but alas the term they chose is different and so you're subjected to a neverending fountain of claptrap about how Skynet is right around the corner instead.
[00:43:58] <rotateq> on new year's day I promised to a friend of mine that I won't create a hostile AI this year :)
[00:55:17] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[00:57:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:22:05] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:29:48] *** Joins: makomo (~makomo@user/makomo)
[01:32:09] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[01:33:49] <pjb> rotateq: note that it's programmers who are writting the AI that will replace them… 
[01:37:07] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[01:39:25] <rotateq> pjb: maybe that's the ultimate goal
[01:39:56] <rotateq> then I can ask those instead my stupid CL questions :)
[01:40:15] <semz> job destruction is (supposed to be) the name of the game in a way, isn't it
[01:44:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:47:02] <pjb> rotateq: my point is that programmers may have some reticences working on their replacement… Otherwise I don't explain myself why we don't already have AIs and sophisticated program generation tools. Consider just lisp and its macros! Why aren't all programmers using them?
[01:48:29] <rotateq> it's not for anybody or otherwise things would be screwed up quickly
[01:53:11] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.4)
[02:11:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:14:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:27:40] *** Joins: kevingal (~quassel@80.233.47.223)
[02:31:32] <sham1> pjb: then one needs to start thinking "well, macros with or without hygiene" and all that stuff, and it might not be worth it
[02:37:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[02:38:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:44:36] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[02:50:32] *** Joins: dra (~dra@2a04:4540:6414:a700:6838:c833:a209:64c4)
[02:50:36] <dra> Hello!
[02:50:41] <rotateq> ohai dra!
[02:51:08] <rotateq> how is it on the other side of the world right now?
[02:52:03] <dra> Hi rotateq!
[02:52:06] <dra> Dark.
[02:52:15] <rotateq> oh hm
[02:52:33] <rotateq> thought it's morning at your place
[02:52:39] <dra> And there's a war going on a few hours away, but I guess one gets used to it.
[02:53:12] <dra> Nope, late evening. I'm in Europe. :)
[02:54:53] <rotateq> ohhh
[02:55:51] <rotateq> I thought you live in Australia. or i had that false in mind cause dave0 does
[02:57:15] <dra> I see. I'd like to visit Australia and New Zealand though.
[02:57:25] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[02:57:37] <rotateq> me too, I never have been out of Europe yet
[02:58:07] <rotateq> ehm do you live in Ukraine? :/ cause you said war
[02:58:31] <dra> Nono, but this whole thing is too close for comfort.
[02:58:37] <rotateq> sad that you can't directly fight back and end this with some of your assembly magic skills
[02:58:43] <rotateq> phew
[02:58:49] <dra> :)
[02:59:09] <dra> https://refspecs.linuxfoundation.org/LSB_5.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html
[02:59:10] -ixelp- Exception Frames
[02:59:21] <dra> Right now I'm trying to figure out what exactly the Return Address Register is.
[02:59:59] <sham1> Which platform
[03:00:02] <rotateq> or some day taking LISP and reprogram parts of reality themselves with enough energy
[03:00:22] <rotateq> dra: sorry I really have no clue about such things :(
[03:00:23] <dra> sham1: amd64.
[03:00:39] <dra> sham1: Chewing on DWARF4 as well.
[03:00:47] <sham1> Some processor architectures have dedicated registers, while AMD64/x86 use the stack 
[03:00:55] <sham1> For the return address
[03:01:18] <dra> Sure, CALL pushes the return address. But what's the field in the CFI.
[03:01:26] <dra> See the LSB link.
[03:03:28] <sham1> Hm
[03:03:36] <dra> rotateq: I set out to try and understand the .eh_frame secion in Linux executables and nerd-sniped myself.
[03:03:58] <dra> sham1: "An unsigned LEB128 constant that indicates which column in the rule table represents the return address of the function. Note that this column might not correspond to an actual machine register."
[03:03:59] <sham1> That is annoyingly opaque documentation 
[03:04:30] <dra> Yes. I think I have to read and comprehend the DWARF stuff.
[03:16:07] <rotateq> "nerd-sniped myself" absolutely wonderful word combination :D
[03:21:40] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[03:22:02] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[03:25:53] <sham1> Happens for the best of us
[03:29:00] *** Quits: kevingal (~quassel@80.233.47.223) (Ping timeout: 240 seconds)
[03:49:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[03:50:35] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[03:53:33] <dra> :)
[03:57:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:59:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:00:18] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[04:01:10] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:09:28] <hayley> https://www.youtube.com/watch?v=2_UPDcE-L_8
[04:09:28] -ixelp- Taking Tiger Mountain (2004 Digital Remaster) - YouTube
[04:09:42] * hayley enjoys watching people get mad at the proposal to add a pronouns field to user info on Matrix
[04:09:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:10:37] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:21:35] <hayley> "I hacked [program] to remove the music for speed reasons (the A500 CPU is not fast enough for realtime bytebeat in [VM], and in any case there is no audio device implemented yet)"
[04:21:37] * hayley called it
[04:22:24] <hayley> "How to make a 7MHz 68k run like a PDP-1"
[04:24:48] <dra> hayley: What's a pronoun field?
[04:25:23] <hayley> Somewhere to put your preferred pronouns.
[04:30:30] <dra> Oh! Got it.
[04:41:40] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[04:44:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:45:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:58:03] *** Quits: dra (~dra@2a04:4540:6414:a700:6838:c833:a209:64c4) (Ping timeout: 252 seconds)
[04:58:31] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[04:59:31] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:02:29] <kakuhen> as long as adding pronoun field doesn't require breaking changes to the protocol i'm fine with it
[05:02:50] <kakuhen> i.e. existing clients only have to probe an extra key in some json blob
[05:03:12] <kakuhen> otherwise i'd want them to find a saner way to implement the feature (considering how simple it sounds)
[05:03:32] <hayley> https://github.com/matrix-org/matrix-spec-proposals/pull/3755
[05:03:34] -ixelp- MSC3755: Member pronouns by Gnuxie · Pull Request #3755 · matrix-org/matrix-spec-proposals · GitHub
[05:03:41] <hayley> Thanks ixelp
[05:03:59] <hayley> (she is sleeping)
[05:04:35] <kakuhen> my immediate criticism is that there is nothing to address non-european languages
[05:04:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:04:40] <kakuhen> but otherwise it seems fine
[05:05:17] <kakuhen> i.e. how do you deal with languages where you do not have distinct reflexive/singular/etc, or langauges where this does not exist
[05:05:42] <hayley> I think the idea is that the keys for a language would relate to what kinds of pronouns there are in the language.
[05:05:42] <kakuhen> e.g. do you just pass in a nil and make sure clients understand what nil means?
[05:05:50] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:06:08] <kakuhen> ah, that makes more sense than what i interpreted
[05:06:16] <kakuhen> in any case, i'm willing to bet there's drama in the gh issue
[05:06:28] <hayley> There is.
[05:08:13] <kakuhen> oh wow
[05:08:14] * hayley got invited to a random room and posted https://youtu.be/YpWdOBwpLuE?t=109 and left
[05:08:23] <kakuhen>  ShadowJonathan brought up my exact same point 6 days ago
[05:08:30] <kakuhen> well, as one of my friends says
[05:08:37] <kakuhen> people carefully reviewing what you wrote is a sign of quality
[05:10:29] * kakuhen uploaded an image: (71KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/bMmricIrupKnebZDOKHOPUVE/image.png >
[05:10:31] <kakuhen> im at the drama part now
[05:11:47] <kakuhen> "someone can just fork matrix and remove the bloaty and virtue-signalling stuff"
[05:11:54] <kakuhen> .....or just don't implement the pronoun feature in your client?
[05:13:58] <kakuhen> let's assume you really really hate pronouns being listed by people; then isn't it better that your client can ignore those json keys and now you dont see it in people's nicknames? in any case, funny conversation
[05:17:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:18:40] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:29:05] <hayley> https://www.youtube.com/watch?v=KJQu5QDjSOg
[05:29:05] -ixelp- How Minecraft Was Beaten While Standing Still (For real this time) - YouTube
[05:32:23] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:38:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[05:41:18] *** Quits: Catie (~user@user/catie) (Quit: heading out)
[05:43:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[05:44:39] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[05:52:26] *** Joins: lisp123 (~lisp123@143.238.164.103)
[05:55:43] *** Joins: razetime (~quassel@117.254.34.132)
[05:57:19] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 256 seconds)
[06:12:43] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[06:13:34] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[06:43:16] *** Joins: Inline__ (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de)
[06:45:33] *** Quits: Inline (~Inline@p200300cd472405000b711a3855c27fc9.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:05:02] *** Joins: lisp123 (~lisp123@143.238.164.103)
[07:16:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[07:17:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[07:17:51] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[07:19:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:22:16] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[07:46:31] *** Joins: lisp123 (~lisp123@143.238.164.103)
[07:51:46] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 272 seconds)
[08:11:15] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[08:12:13] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[08:28:31] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[08:30:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:40:51] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:41:54] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[08:58:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:10:02] <kakuhen> is it possible to inline a lexical function
[09:10:13] <kakuhen> or should i just not use flet if I intend to do that anyway
[09:10:38] <hayley> You can inline a lexical function.
[09:10:53] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[09:11:38] <kakuhen> oh nice it works 
[09:11:57] * hayley has been blocked by someone from university.
[09:11:57] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[09:27:06] *** Joins: semz_ (~semz@user/semz)
[09:29:25] *** Quits: semz (~semz@user/semz) (Ping timeout: 240 seconds)
[09:30:34] <kakuhen> cant be blocked if you lack social media
[09:30:44] <kakuhen> therefore i am not blocked by many people -- except maybe some ppl on here
[09:32:49] <hayley> It's on the student Discord server. /me thinks he got butt hurt about the MSC that she linked here earlier
[09:34:02] <kakuhen> lol
[09:34:49] <kakuhen> i find it funny because because first-person pronouns can change a lot depending on formality and situation in japanese
[09:35:04] <kakuhen> or even for comedic effect you'll see some nerds online use 拙者
[09:35:36] <waleee> what is the transliteration of that one?
[09:35:45] <kakuhen> せっしゃ
[09:35:51] <waleee> -_-
[09:36:01] <kakuhen> intentionally avoiding romaji to avoid arguments on romanization systems
[09:36:03] <kakuhen> but for hepburn, sessha
[09:36:20] <kakuhen> feel free to convert to your favorite romanization system
[09:37:48] <waleee> the wiktionary had some issues. Mainly lacking any info on the level of formality
[09:37:55] <waleee> *wiktionary for it
[09:38:31] <waleee> "(archaic, humble, men's speech)"
[09:38:59] <kakuhen> yes to all three but "humble" misses the point
[09:39:26] <kakuhen> from my japanese dictionary 「尊大な態度で用いることもある」 i.e. "also sometimes used in a formal manner"
[09:39:54] <kakuhen> well, actually that butchers the translation
[09:39:59] <kakuhen> but it's like
[09:40:04] <kakuhen> you want to intentionally convey your status
[09:40:16] <kakuhen> and it's not a good connotation for this
[09:41:25] <waleee> so somewhat in same caterogy as the German "Herr Doktor Professor ___" title-piling?
[09:42:45] <kakuhen> assuming that doing so in german can be seen as arrogant behavior, yes
[09:44:10] <waleee> well. In informal situations you would probably come off as right ass, but they unironically do this on stuff like id-cards and letter heads
[09:44:17] <ck_> (Professor goes before Doctor, in case you ever need to do that)
[09:44:33] <waleee> ck_: noted
[09:45:36] <kakuhen> also, im glad the ietf cellar group actively works on many thing
[09:45:39] <kakuhen> or, thankful
[09:45:59] <waleee> ck_: I assumed it went from less academic/prestigous to most
[09:46:50] <kakuhen> their test flacs helped me uncover an embarassing bug that i never noticed for 2 days straight -- in short, i would parse the first block, assert it is streaminfo, then enter a loop to parse additional blocks until i hit a terminal block
[09:47:05] <kakuhen> but i never checked if streaminfo is the final block
[09:47:35] <kakuhen> the probability of hitting such a file is very rare since most flacs are encoded with libflac, which will add seek points every 10 seconds or so in a stream
[09:48:21] <kakuhen> and sb-sprof is giving me another reason to ditch CCL
[09:48:21] <ck_> waleee: there's probably some complex ruleset in general, but the "dr." can be part of your official name, in your id documents
[09:49:12] <ck_> so, if you address someone that holds a doctorate but is also working as a Professor, the "Dr." binds more closely to the surname
[09:50:01] <waleee> heh haskell style infix-binding levels for titles
[09:50:42] <hayley> Robert `doctor` Strandh
[09:51:51] <ck_> ok, binds "to the name" in general, not the surname -- but in a letterhead you don't typically use the full name when being formal
[09:52:23] <kakuhen> hayley: i think that is not beach-approved; beach would use reader macros for (de)serialization of titles
[09:52:33] <waleee> since he's Swedish you could get away with the equivalent of "hey you over there!"
[09:53:06] <ck_> fun story about names, titles, and addressing people: I was working for Prof. Hagen, who was giving the keynote speech to a visualization conference, I can't remember which
[09:53:14] <ck_> but held in the USA
[09:53:50] <ck_> they printed the name cards and, I don't know why, auto-generated everything from data put into forms somewhere
[09:53:54] <ck_> his card said:
[09:54:00] <ck_> "Hans Dr. Prof. Mr. Hagen"
[09:54:32] <kakuhen> this is vaguely reminding me of arabic names
[09:54:45] <kakuhen> one of my roommates 3 years ago was from palestine; he told me his "short name" and then his full family name
[09:54:59] <kakuhen> i dont remember the details, but in short, official family names are very long in arabic
[09:55:26] <ck_> "al-Kuwaritzmi" is a short name?
[09:55:46] <ck_> sorry, "Khwarizmi"
[09:55:59] <kakuhen> i'm not sure; i just know that if he were to say his full name, he has to say like 10 things
[09:56:06] <kakuhen> but his "short name" only needs like 2 names
[09:56:26] <ck_> ah, I didn't know that, interesting
[09:56:27] <kakuhen> ghazal was his surname for instance, but in between his first name and surname, there is a bunch of names he omits for brevity
[09:56:36] <ck_> I assume the 10 things are like a heritage path?
[09:58:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[09:59:48] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:00:51] <kakuhen> off-topic, but i love how (declaim (inline ...)) on a bunch of utility functions for parsing nearly doubled the throughput of my decoder
[10:09:24] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[10:10:26] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[10:11:04] <kakuhen> oh cool, my lpc output disagrees with the ietf example at every odd index...
[10:11:17] <kakuhen> how the hell is that possible with order 1 lpc...
[10:17:48] <gilberth> lol. MULISP-80 is ten times faster than MBASIC-80. And the former uses bignums only. But hey, LISP and GC is slow, isn't it? Granted, BASIC is not known for it being fast.
[10:18:49] <moon-child> isn't basic direct-interpreted usually, like shell?
[10:19:41] <gilberth> moon-child: I have no idea. I never dug into how BASIC is commonly implemented.
[10:20:41] <gilberth> However, when I compile the BASIC, it gets 200x faster.
[10:21:33] <gilberth> But: This MULISP a single fixnum: 0. All other numbers are bignums. And I bench FIB, which then conses like hell.
[10:40:21] <hayley> dave0: https://peterduttonmp.com/
[10:40:21] -ixelp- Peter Dutton - Mad Potato
[10:52:49] <aeth> wow, every number above or below 0 is big? must be an infant or toddler.
[10:53:08] <aeth> me, personally, I don't consider it to be a big number until 4611686018427387904
[10:53:50] <aeth> four quintillion six hundred eleven quadrillion six hundred eighty-six trillion eighteen billion four hundred twenty-seven million three hundred eighty-seven thousand nine hundred four
[10:54:05] <aeth> if you had that many dollars or euros, you'd be rich
[10:57:19] <ck_> I think the equator is a pretty big zero, biggest you can get on the planet
[10:57:44] <gilberth> Well, I wonder, if a bank account could roll over from INT_MIN to INT_MAX.
[10:58:09] <ck_> maybe, but I wouldn't risk it
[10:58:14] <ck_> the INT_MAX could be printed in red
[10:59:24] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 240 seconds)
[10:59:33] <gilberth> Still would be interesting to know how wide that field in whatever data base they have is and if overflow is checked.
[10:59:48] *** Joins: X-Scale` (~ARM@46.50.6.46)
[10:59:53] <ck_> it's probably in the cobol manual or something
[11:00:09] *** X-Scale` is now known as X-Scale
[11:01:57] <aeth> yep
[11:02:00] <aeth> it behaves however COBOL behaves
[11:16:37] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[11:18:00] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[11:38:23] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[11:40:12] *** Joins: shka (~herr@109.231.3.55)
[11:55:43] *** Quits: razetime (~quassel@117.254.34.132) (Ping timeout: 260 seconds)
[12:12:20] <kakuhen> gilberth: regarding the gc naysayers
[12:12:31] <kakuhen> i have largely unoptimized code that seems to finally decode flacs without bugs
[12:12:38] <kakuhen> threw it some 100 mb joint stereo file and timed it
[12:12:44] <kakuhen> 0.21% time spent in GC according to CCL
[12:12:50] <kakuhen> that's not a lot
[12:13:09] <kakuhen> so i wonder what kind of workloads require GC time to be even lower than that
[12:13:34] <hayley> Have an application that just keeps on consing, then check agian.
[12:14:05] <hayley> e.g. running REGRIND with the SBCL compiler, rather than interpreter, would happily spend a lot of time in GC without a large heap.
[12:14:13] <gilberth> hayley: Well, a copying GC will not be impressed.
[12:14:39] <kakuhen> as of now, my largely unoptimized flac decoder has a throughput of 500,000 samples/s on this one joint stereo file im using for testing
[12:15:05] <kakuhen> sample rate in this file is 48,000 hz
[12:15:18] <kakuhen> so that is about 10.38s worth of audio being decoded per second which is fast enough to be streamable
[12:15:21] <kakuhen> not the best but pretty good
[12:15:23] <gilberth> So you are good for a dozen files at once :-)
[12:15:51] <moon-child> you only have one core??
[12:16:03] <moon-child> kakuhen: samples or frames?
[12:16:12] <gilberth> I don't know how many cores kakuhen has?
[12:16:12] <kakuhen> i mean samples
[12:16:12] <hayley> moon-child: That's what SBCL's GC thinks. scnr
[12:16:39] <kakuhen> this flac in particular has a fixed block size of 4096, so each frame has 4096 samples per subframe (in this case, there are 2)
[12:16:59] <moon-child> kakuhen: by frame I mean one sample per channel
[12:17:33] <kakuhen> ah, im using a different definition of "frame"
[12:17:34] <moon-child> assuming more than one channel
[12:17:58] <kakuhen> so when i say 500,000 sample/s, what I mean is that I am able to finish decoding that many samples within a second
[12:18:04] <kakuhen> that includes frame unpacking and joint-stereo decorrelation
[12:18:06] <gilberth> GC times are skewed because of what you don't see is the speed benefit of a bump allocator. People would think that malloc and free do in zero cycles as you usually don't measure it's overhead. And also not the cache misses because of bad locality.
[12:19:08] <moon-child> I just mean, are you able to unpack 500,000 pcm values/s, or 500,000*number of channels pcm values/s?
[12:19:16] <kakuhen> the former
[12:19:21] <moon-child> ok
[12:19:50] <gilberth> And I doubt people claiming that GC would be slow, would ever have faced a situation where GC "overhead" was a show stopper. This is false beliefs all the way.
[12:19:50] <kakuhen> and in the case of the file im testing with, that should be about 10.38s worth of audio
[12:20:48] <kakuhen> but yeah, 0.21% time spent in gc, i would've expected more considering how i allocate objects like crazy
[12:21:02] <kakuhen> granted i am not consing much and i am mostly pushing elements to vectors
[12:21:08] <kakuhen> then mapping over entire vectors for decorrelation
[12:22:00] <kakuhen> but i also have considerable amount of overhead from clos' dynamic dispatch
[12:22:02] <gilberth> Yes, so perhaps it's not that many objects in total. And I assume the vectors are specialized to some integer or floating point type. Hence, no pointers inside the vectors to scan.
[12:22:12] <kakuhen> yeah, the vectors are all (signed-byte 32)
[12:22:32] <kakuhen> i will note that LPC calculators will require you to promote numbers beyond that type
[12:22:43] <kakuhen> but the bit-shift provided by the model usually puts you back into 32 bits
[12:22:58] <kakuhen> i.e. intermediate lpc calculations will need more than 32 bits, but the result doesn't
[12:23:02] <gilberth> So you still say within fixnum range?
[12:23:08] <gilberth> stay
[12:23:19] <kakuhen> yeah, pretty much
[12:23:27] <kakuhen> i think it's reasonable to assume all the intermediate calculations fit within 64 bits
[12:23:45] <kakuhen> in fact, all of the C implementations I've referenced use int64_t for intermediate calculations to prevent overflow
[12:24:27] <kakuhen> a maliciously crafted flac can give you an lpc model that will quickly spit out bignums, but i dont think those would conform to the spec anyway
[12:26:38] *** Joins: razetime (~quassel@117.254.35.76)
[12:26:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:27:36] <kakuhen> as for my decoder's performance, i can think i can ooze out extra performance by merging two methods that really shouldn't be on their own
[12:27:53] <kakuhen> i underestimated the cost of calling generic functions
[12:28:16] * kakuhen uploaded an image: (198KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/dWvapVJEUqDHsCQsvcPDHiJK/image.png >
[12:28:33] <kakuhen> this in particular can all be merged into DECODE-RICE, but when writing this originally I was trying to strictly follow the spec
[12:30:09] <dave0> lots of coloured brackets
[12:30:29] <kakuhen> i'll also note that ccl is doing tons of type checking and I have safety set to maximum
[12:30:33] <kakuhen> my fault for not providing any hints though
[12:30:54] <kakuhen> especially for my parse-fixed-binary macro, it gives you (unsigned-byte) and the lisp is left to figure out how many bits wide the number is
[12:31:15] <kakuhen> and these values all get plopped into slots that require a specific bit-width
[12:31:43] <kakuhen> in any case, i need to get this code running on sbcl now so i can use sb-sprof and see what's really expensive
[12:33:34] <hayley> https://www.youtube.com/watch?v=-anvnBMG01Q
[12:33:34] -ixelp- Public Image Ltd. - Careering - YouTube
[12:36:46] <dave0> hayley: this song is too experimental for me
[12:38:05] <dave0> the electronic thing is noise, not music
[12:38:37] <kakuhen> moon-child: gilberth: it seems ccl is indeed running on a single core
[12:39:44] <gilberth> kakuhen: Sure. Why should it run on more than one unless you create threads?
[12:39:52] <hayley> One funny thing about my parallel GC prototype for SBCL was that you'd run (time (progn (loop repeat 1e8 collect 1) nil)) and it'd report more than 100% CPU.
[12:39:53] <kakuhen> and regardless of how much i scale the # of frames, i spend 0.21% in GC
[12:40:50] <waleee> that song had something in common with a lot of electrical building tools
[12:41:30] <gilberth> hayley: Well, this happens also with a non-parallel GC. I have seen CPU like 120% once in a while. But happen, if another thread does GC work on your behalf.
[12:42:10] <gilberth> But then all this CPU time measurements are already skewed as the clock rate is not constant anymore these days.
[12:42:11] <hayley> Hm, it'd still have to be concurrent. Else your thread is asleep and thus only 1 thread is still running on average.
[12:42:50] <gilberth> hayley, do I know how that measurement is implemented deep within Darwin or Mach?
[12:43:03] <hayley> No.
[12:43:28] <gilberth> This is why I always measure wall time. I don't trust user and system time.
[12:44:39] <gilberth> And it's not like a dozen other people would share the machine. Not like the machine at uni for the student's accounts with >50 logged in at a time. uname claimed it would be a "two user" HP-UX license :-)
[12:45:16] <hayley> The university servers are barely loaded.
[12:45:43] <gilberth> Times are different. These days you have your own internet access.
[12:46:20] <gilberth> This was before it was possible for a private person to get internet access. And so we dialed into that machine for mail, ftp, etc.
[12:50:04] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[12:50:53] <kakuhen> holy shit
[12:50:57] <kakuhen> sbcl is 3x faster than ccl for my flac decode
[12:51:21] <gilberth> And at 18:00 phone calles were cheaper than during the day. This implied that you needed like 45min to have luck and find a free port at the uni to dial in.
[12:51:28] <kakuhen> sbcl gives me a throughput 1,372,700 samples per second
[12:52:12] <gilberth> kakuhen: Yes, SBCL is good for this kind of "number crunshing". And it's CLOS method dispatch is way faster than CCLs due to PCL.
[12:56:04] <gilberth> Anyhow, I was a CLISP hacker at that time and Bruno was teaching or sth at my uni. One of the poor Suns at his department could be dialed into. He provided me with an account and so I always had a free line to dial in, while the rest of my fellow students needed ages to find one on the crowed central dial in. :-)
[12:57:17] <kakuhen> that sounds very nuce
[12:57:18] <kakuhen> nice*
[12:57:19] <gilberth> But it was one of those Suns that at times would reboot without reason. Once you saw that, you recognize, why NFS is state-less. Suns were too crash-happy for any state.
[12:59:37] <kakuhen> so what happened if you attempted a write and the sun was in the middle of booting
[12:59:46] <kakuhen> just sent udp packets to ultimately nowhere until it's back?
[12:59:58] <gilberth> Yep, that's the idea.
[13:00:23] <gilberth> And the handle for the file you have is stable. It essentially is the inode number and the major and minor device number.
[13:01:21] <gilberth> A kludge, if you ask me.
[13:03:12] <gilberth> And I never got why Linux folks insist on putting the NFS server into the kernel. I don't do that with mine. My NFS server is a regular user process. And unlike the kernel NFS server, it can translate uids. This is important for me as my uids differ between machines. And gids. With Linux each user has also a same named group. With BSD that's not the case.
[13:04:40] <gilberth> And I mount my /home on all machines. Even over my VPN routed through the internet to my /home machine.
[13:15:55] <dave0> ah this is a nice instruction: BRN -- branch never
[13:19:31] <rotateq> dave0: sounds interesting :D
[13:20:52] <dave0> it makes perfect sense... theres BRA -- branch always
[13:47:28] <SAL9000> "branch always" sounds like JMP, but what's the point of "branch never"?
[13:48:46] <SAL9000> gilberth: can you send a link to that userspace nfs server you're using?
[13:49:43] <gilberth> SAL9000: Nope. I don't remember where I got it from. Let's see if I could find some pointer in the README or sth. Just a minute.
[13:50:30] <moon-child> SAL9000: I'm guessing it's some kind of truth table lookup, which will be able to express 'branch always' and 'branch never' as well as 'branch if and', 'branch if andnot', etc.
[13:50:59] <SAL9000> ah, that makes a lot more sense :p
[13:51:23] <SAL9000> I was thinking it might be actually LIKELY/UNLIKELY flags for conditional branches
[13:51:35] <SAL9000> (i.e. hints to the CPU's branch predictor)
[13:51:49] <SAL9000> afaik x86 basically ignores them these days though :(
[13:51:53] <gilberth> SAL9000: It says UNFS3 by Pascal Schmidt. My version is 0.9.22 and I patched it a bit. Perhaps Google is your friend.
[13:52:03] <SAL9000> https://unfs3.github.io/
[13:52:03] -ixelp- UNFS3 Homepage
[13:52:08] <kakuhen> https://0x0.st/oq-G.log
[13:52:10] <kakuhen> so how do i interpret this
[13:52:45] <moon-child> SAL9000: for good reason.  A bit ago, though, I came up with an alternative to branch hints that I think might work out better in practice
[13:53:06] <SAL9000> I thought the reason was basically "everyone was misusing them, the CPU knows better"
[13:53:18] <moon-child> yes
[13:53:43] <moon-child> but my alternative is better.  Say 'take this branch if the condition is true, _or_ if you predicted it should be taken'.  If the cpu predicted taken, and the condition turned out to be false, keep chugging
[13:54:01] <moon-child> on the other hand, if the cpu predicted not taken, and the condition turned out to be true, it has to rewind state as usual
[13:54:17] <moon-child> (and of course add an alternative which switches the taken/not taken logic)
[13:54:36] <moon-child> the idea is you provide a branch to a fast path, but the penalty for the slow path is less than the penalty for a pipeline stall
[13:54:41] <SAL9000> at first glance "wtf why would you make branches basically a coin toss from the point of view of userspace?!"
[13:54:46] <moon-child> the slow path will work for all inputs.  The fast path will work only for a subset of inputs
[13:54:57] <SAL9000> but yes, that does sound interesting albeit specialized
[13:55:02] <gilberth> SAL9000: I looked at what I patched. Actually the uid/gid mapping support is mine. And there is some crude hard-wired umask thing in there. I could prepare a patch file, if you wish.
[13:55:32] <SAL9000> gilberth: send it to upstream? :-)
[13:55:43] <SAL9000> also, have you looked at NFS4? is it any better?
[13:56:02] <SAL9000> so far I've only used SAMBA in my home network so my knowledge of NFS is purely theoretical
[13:56:35] <SAL9000> moon-child: the conventional branch hints are interesting for PGO or a profiling JIT though
[13:58:58] <moon-child> pgo maybe, jit not really
[13:59:34] <moon-child> the cpu will learn which way the branches go faster than the jit.  What the jit can do is lay out code so the cold code doesn't get near the hot path
[13:59:45] <moon-child> also: branch directions may act as a weak branch hint
[13:59:54] <gilberth> SAL9000: Well, I don't have a need for NFS4 as NFS3 works like a charm for me. I miss nothing. And sending upstream would imply I invest some work figuring out whom to snd it to. :-\
[13:59:58] <moon-child> (forward not taken, backwards taken)
[14:02:39] <SAL9000> gilberth: https://github.com/unfs3/unfs3 :)
[14:02:40] -ixelp- GitHub - unfs3/unfs3: UNFS3 is a user-space implementation of the NFSv3 server specification.
[14:03:43] <SAL9000> hahaha so Windows can be an NFS client... but only up to v
[14:03:46] <SAL9000> v3
[14:04:16] <SAL9000> moon-child: I guess jit could outline code (move it into a function) in the coldest cases
[14:04:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:05:36] <moon-child> there's no need to make a separate function
[14:05:52] <moon-child> just make the code of a given function noncontiguously
[14:06:12] <moon-child> gcc/clang will do this already
[14:06:23] <moon-child> and some jit will straight up not even compile the cold path
[14:06:29] <moon-child> s/ly//
[14:07:32] <moon-child> (see tracing jit for the extreme version of this)
[14:10:07] <SAL9000> sure - I was thinking that the CPU might prefer the path that doesn't involve a CALL over the one that does.
[14:10:40] <gilberth> SAL9000: <http://clim.rocks/gilbert/unfs3-map-patch/>, in case you're interested.
[14:10:41] -ixelp- /gilbert/unfs3-map-patch/
[14:10:50] <SAL9000> 404
[14:10:56] <SAL9000> "Not Found for URI http://bauhh.dyndns.org:8000/gilbert/unfs3-map-patch"
[14:11:18] <moon-child> 'CPU might prefer the path that doesn't involve a CALL over the one that does'  it doesn't
[14:11:19] <SAL9000> ah, http://clim.rocks/gilbert/unfs3-map-patch/
[14:11:19] -ixelp- /gilbert/unfs3-map-patch/
[14:11:27] <gilberth> And why was ixelp sucessful, then? Oh dear!
[14:11:30] <SAL9000> moon-child: I guess that would require way too much lookahead
[14:11:40] <moon-child> and, there is no 'conditional call' instruction.  So you waste hot bytes anyway
[14:11:56] <SAL9000> gilberth: I think my browser or my terminal ate the trailing slash initially
[14:12:12] <moon-child> 'way too much lookahead'  not really.  ROB is ~300 insn.  New m1 has 600 insn
[14:12:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:12:27] <gilberth> Oh, does it prefer slashes for breakfast? I rather take single quotes, they are much lighter.
[14:12:31] <SAL9000> :D
[14:12:46] <SAL9000> (it's that or something was caching a bit too heavily in your setup)
[14:13:23] <gilberth> Yep, CL-HTTPD's cache is nasty. But, see, ixelp retrieved it fine.
[14:13:32] <SAL9000> \o/
[14:13:52] <SAL9000> maybe it was a 200 response with valid title but no content, rather than an actual 404
[14:14:00] <SAL9000> s/no content/useless content/
[14:14:11] <gilberth> You said 404 not 200.
[14:14:43] <SAL9000> Yes. I did not actually check my browser's network debug to see the HTTP code :-)
[14:15:09] <gilberth> Anyhow the mapping is static and the file format resembles that of the olde NFS2 server. There is an example in map_static.c
[14:16:57] <gilberth> And as you can see at the file dates, I saw no need to repair anything in ages. :-)
[14:17:01] <SAL9000> :)
[14:32:04] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[14:32:33] <lisbeths> I am starting to turn into a c user
[14:33:10] <lisbeths> I realize now that the gcc compiler is the basis for everything that gets compiled today.
[14:33:32] *** Joins: lisp123 (~lisp123@143.238.164.103)
[14:33:39] <lisbeths> GCC was part of the windows xp compiler toolchain, thats how ubiquitous it is
[14:34:13] <lisbeths> any linux from scratch uses gcc. clang has not quite caught up
[14:34:38] <hayley> https://www.youtube.com/watch?v=tbHix56qfG8
[14:34:39] -ixelp- The Aircrash Bureau - YouTube
[14:36:29] <lisbeths> I cNg 
[14:37:03] <lisbeths> I cant recognize what it is about c that I dont like which lisp has
[14:38:56] <lisbeths> I suppose what is missing in c is a really good repl
[14:39:21] <lisbeths> in lisp there is ielm which has been built on top of
[14:41:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:42:28] <hayley> No risk of requiring a FAA committee? 
[14:43:28] <rotateq> hayley: maybe we just live in an illusion
[14:43:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:50:57] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[14:51:05] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[14:55:16] *** semz_ is now known as semz
[15:08:17] *** Inline__ is now known as Inline
[15:19:27] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[15:20:08] <pl> hayley: I'll admit that sometimes I'm tempted to play with C because it's hard and not easy
[15:20:25] <hayley> pl: I guess I don't have the energy to do that.
[15:20:50] <pl> Well, I don't have energy for that either, that's why it stays as temoptation
[15:22:18] <hayley> "An additional insight came from the observations of several researchers [Jones79, Pleban81, Larus89, Inoue88], that the alias problem can be solved by describing the possible pointer paths as regular expressions, which have nice closure properties under intersection, union and complement"
[15:22:30] <hayley> Quick gilberth get the derivatives, we're gonna do alias analysis
[15:34:45] *** Quits: razetime (~quassel@117.254.35.76) (Ping timeout: 256 seconds)
[15:40:30] *** Joins: lisp123 (~lisp123@143.238.164.103)
[15:47:24] *** Joins: razetime (~quassel@117.254.34.132)
[15:55:17] *** Joins: shka (~herr@109.231.3.55)
[16:03:00] <hayley> Hm, well, once you have parallel GC out of the way, it's mostly how you handle tenured space that's important right? I mean, that's where most of your memory goes, and most of your pause times come from, if you're not concurrent enough.
[16:03:49] <hayley> You could do static analysis to work out how to reclaim garbage at compile-time, but it's not a big priority per se. Though I guess it saves some STW pauses if you don't have thread-local heaps.
[16:11:09] *** Quits: lisp123 (~lisp123@143.238.164.103) (Remote host closed the connection)
[16:26:37] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:27:14] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:29:57] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:30:10] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:30:51] *** Quits: jeosol (~jeosol@user/jeosol) (Ping timeout: 256 seconds)
[16:33:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:39:00] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:39:00] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:39:12] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:39:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[16:42:38] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:43:09] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:43:33] <hayley> But then Baker says "with my inference thingy I can show all the garbage in quicksort is garbage" and I get excited.
[16:45:46] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:46:26] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:48:57] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[16:49:43] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[16:51:25] * edgar-rft quicksorts his garbage collection
[16:58:44] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[16:58:44] *** ChanServ sets mode: +o MichaelRaskin
[17:05:05] <gilberth> Unknown error 316? Somebody set errno to 316. How impolite.
[17:19:15] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:31:58] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[17:32:38] <SAL9000> hayley: can you recommend some resources on escape analysis (for identifying which objects could be on the stack instead of the heap)? I might be implementing something in that vein at work soon...
[17:32:45] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[18:02:40] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:03:05] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:11:57] *** Quits: razetime (~quassel@117.254.34.132) (Read error: Connection reset by peer)
[18:23:24] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:25:37] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Read error: Connection reset by peer)
[18:26:14] *** Joins: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096)
[18:26:27] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:28:10] *** Joins: aeth (~aeth@user/aeth)
[18:37:38] *** Quits: Inline (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de) (Quit: Leaving)
[18:41:52] <dave0> https://news.ycombinator.com/item?id=30811592
[18:41:53] -ixelp- Why We Need Lisp Machines | Hacker News
[18:52:26] *** Quits: lisbeths (~user@2603:3023:9aa:2000:9184:29fc:4a7a:b096) (Ping timeout: 245 seconds)
[18:54:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[19:09:15] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[19:21:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:23:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:48:55] *** Joins: Inline (~Inline@p200300cd472cf8009bb7e46c1da712cc.dip0.t-ipconnect.de)
[20:14:24] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:49:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[20:50:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:05:53] *** Joins: notzmv (~zmv@user/notzmv)
[21:20:33] *** Joins: razetime (~quassel@117.254.34.132)
[21:21:58] *** Quits: razetime (~quassel@117.254.34.132) (Client Quit)
[21:41:33] <selwyn> https://www.youtube.com/watch?v=FGBaZjlhHzA
[21:41:34] -ixelp- MARCO RESPONDS: How to chop an ONION the REAL way - YouTube
[21:43:01] <shka> use sledgehammer 
[21:43:53] <edgar-rft> https://www.youtube.com/watch?v=g93mz_eZ5N4
[21:43:53] -ixelp- Peter Gabriel - Sledgehammer - YouTube
[22:22:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[23:14:07] <selwyn> whats the biggest currently maintained lisp project in terms of developers?
[23:14:10] <selwyn> mcclim?
[23:14:48] <random-nick> sbcl might beat mcclim
[23:15:34] <random-nick> and if you consider developers far enough back then it might be maxima/macsyma
[23:18:06] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[23:18:06] *** ChanServ sets mode: +o MichaelRaskin
[23:20:52] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[23:22:09] *** Joins: aeth (~aeth@user/aeth)
[23:22:26] <rotateq> or the nyxt browser
[23:23:21] <random-nick> oh, there also the lispworks and allegro implementations, they could be considered "lisp projects"
[23:25:42] <pl> question is how you count
[23:26:24] <pl> if you count all developers who worked on the codebase, ever, then Maxima is pretty much shoo-in for winning, because there were enough of them that we don't have track
[23:26:54] <pl> Franz the company exists essentially because of Maxima
[23:27:29] <pl> and it's not even their product - that's how outsized the shadow of Maxima is
[23:32:19] *** Joins: dra (~dra@2a04:4540:6422:4f00:6838:c833:a209:64c4)
[23:32:31] <dra> Hello!
[23:32:53] <rotateq> hi again dra :)
[23:33:01] * shka watching youtube videos
[23:33:45] <shka> on the F8F Bearcat 
[23:34:01] <shka> crazy machine 
[23:34:24] <rotateq> pl: And I bet indirectly this also applies to Mathematica, i.e. having built on ideas from Macsyma from the very beginning.
[23:34:45] <pl> rotateq: mathematica is famous for doing it differently
[23:34:55] <rotateq> oh really?
[23:35:08] <pl> and of Wolfram being a bit anti-Lisp, iirc, in his writings
[23:35:09] <rotateq> the most advanced language and system, you know :D
[23:35:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:4042:4584:26e0:bc36) (Quit: WeeChat 3.4.1)
[23:35:35] <rotateq> pff yes maybe, but then similar like with greenspuns 10th
[23:35:45] <pl> rotateq: Mathematica was, iirc, the one to start adding numerical methods while macsyma kept to symbolic
[23:36:36] <rotateq> yes multiple influences, there is an article about connections to ideas in SCHOONSCHIP
[23:36:38] <pl> symbolic analysis of course was big early on in AI, so a lot of Lisp work there, but it's not Macsyma-specific
[23:36:43] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[23:36:59] <pl> (I seem to recall at least one other major Lisp system involved in that space, I think by the name of DERIVE?)
[23:37:19] <pl> but in terms of Common Lisp and its direct ancestors, Macsyma has outsized shadow
[23:37:26] <rotateq> or this REDUCE or AXIOM?
[23:37:32] <rotateq> :)
[23:39:02] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a3d9:5253:a1a8:660f)
[23:40:21] <pl> yeah
[23:45:52] <selwyn> mathematica is a good idea exceuted poorly
[23:46:12] <ck_> what is Maple
[23:46:48] <selwyn> it simply crashes whenever you ask too much of it
[23:48:14] <ck_> [processing proper response ... estimated time: 9hrs]
[23:48:20] <ck_> nn
[23:54:15] <selwyn> maple is another computer algebra system
[23:55:41] <selwyn> i made a very shitty cas as part of my research
[23:55:59] <selwyn> not sure if maxima would have been able to replace it
[23:57:00] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
