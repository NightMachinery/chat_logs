[00:00:07] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:00:56] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[00:01:44] <floatcomplex> this seems overcomplicated
[00:02:23] <quartz> Yeah I get angry at myself because nothing I do works
[00:02:29] <floatcomplex> quartz: reversing a linked list just means popping all the values from the old list and pushing them to a new initially-empty list while doing so
[00:02:40] <floatcomplex> it looks like you're trying to walk the list linearly without popping
[00:03:15] <floatcomplex> your "implementation hint" sounds like a red herring
[00:04:31] <quartz> Yeah they just want me to reverse the linked list using only pointers.
[00:05:12] <floatcomplex> right
[00:06:19] <quartz> They do while ((data = popFront(&list)) != NULL)  than call reverseLlist
[00:06:24] <floatcomplex> quartz: https://godbolt.org/z/coK49Pjq3
[00:06:29] <quartz> So they are poping the first
[00:06:30] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:07:27] *** Quits: Alhazred_ (~Alhazred@s91904425.blix.com) (Quit: Reconnecting)
[00:07:36] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[00:09:25] <machinehum> This is an intense amount of bit manip https://medium.com/techie-delight/bit-manipulation-interview-questions-and-practice-problems-27c0e71412e7
[00:11:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[00:11:19] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 258 seconds)
[00:12:16] <quartz> floatcomplex: Why don't you check if the next node in the linked list is null?
[00:12:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-6043-cabb-4e54-73fe.res6.spectrum.com)
[00:12:32] *** Quits: Nselm (~Nselm@p200300d56f1cd50426692048b39dca00.dip0.t-ipconnect.de) (Quit: Client closed)
[00:12:42] <floatcomplex> quartz: line 11 takes care of that
[00:13:09] <floatcomplex> machinehum: some of that stuff is utter garbage. log2() is a floating point math function and should never ever ever be used in bit manipulation
[00:14:10] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[00:14:23] <sham1> Might be better if one would use compiler intrinsics, although that'd make it unportable
[00:14:38] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:15:02] *** Joins: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[00:15:21] *** Quits: msavoritias (~msavoriti@91-155-14-24.elisa-laajakaista.fi) (Remote host closed the connection)
[00:15:40] <sham1> Since the oft-found instruction for "get highest set bit" can be used to build an integral log2
[00:15:59] <floatcomplex> 31 - __builtin_clz(x)
[00:15:59] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f556:e34e:c758:9b91)
[00:16:16] <floatcomplex> having static_asserted that ULONG_MAX == 2^32 - 1
[00:16:29] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f556:e34e:c758:9b91) (Read error: Connection reset by peer)
[00:16:37] <floatcomplex> err UINT_MAX
[00:16:55] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:f556:e34e:c758:9b91)
[00:17:20] *** Joins: vvlad (~vvlad@dslb-002-205-166-199.002.205.pools.vodafone-ip.de)
[00:17:45] <floatcomplex> i wish there were a portable idiom that gcc/clang recognized and turned into a clz instruction
[00:17:50] <sham1> sizeof(int) * CHAR_BITS - 1 - __builtin_clz(x)
[00:18:09] <sham1> I think there is, can't remember it though
[00:18:37] <machinehum> I didn't get to the log2 part
[00:18:55] <machinehum> Just the first couple of sections and ignored the rest
[00:19:09] <fizzie> There *is* a way of reversing a singly-linked list that involves walking through it and updating the pointers as you go (which I feel like that "implementation hint" is trying to get to), but I think it's less easy to comprehend than the "pop from the front, push at the front" loop.
[00:19:16] <fizzie> It looks like this: https://ideone.com/sqApVz
[00:19:50] <fizzie> And the standard way it gets illustrated is, you draw the boxes-and-arrows diagram of the linked list and then think what it would take to reverse the arrows.
[00:20:26] *** Joins: rgrinberg (~textual@190.113.111.74)
[00:20:29] <LiaoTao> fizzie, https://godbolt.org/z/x4xnaoM7e
[00:20:31] <LiaoTao> Great minds think alike?
[00:21:20] *** Joins: zz1 (~zz@2001:8003:1612:d500:8b3:c0f2:eed8:ff3)
[00:21:26] *** Quits: vvlad (~vvlad@dslb-002-205-166-199.002.205.pools.vodafone-ip.de) (Client Quit)
[00:21:32] *** Quits: rgrinberg (~textual@190.113.111.74) (Client Quit)
[00:22:47] *** Joins: rgrinberg (~textual@190.113.111.74)
[00:22:56] *** Quits: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Quit: Darkcoal)
[00:23:05] *** Joins: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[00:23:31] <DPA> I usually just turn my list turn my linked lists into doubly linked lists if I need to walk them backwards too.
[00:23:49] <fizzie> It's kind of "obvious". But just for the sake of comparison, here's the push-pop approach in the same surroundings too: https://ideone.com/1MS2KS
[00:24:13] <fizzie> (Clearer if written using the sort of pop_front & push_front accessors.)
[00:24:52] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:25:54] <floatcomplex> fizzie: i think we've well established that quartz's professor doesn't have any fucking sense of restraint, probably because they've never had to debug other people's code for a living
[00:27:31] <floatcomplex> DPA: we're not talking about walking a linked list backwards, we're talking about reversing one, i.e. mutating it
[00:27:41] <floatcomplex> using a doubly linked list is a very big hammer
[00:29:22] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[00:29:41] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:29:56] <kurahaupo> For added fun, use an XOR-linked list
[00:29:57] <floatcomplex> i also don't see why the list is stored inside a container struct
[00:30:12] *** Quits: strajder (~strajder@user/strajder) (Quit: nn)
[00:31:00] <quartz> fizzie: Thanks, I almost had it
[00:31:00] <fizzie> Out of curiosity, what's the definition of `struct List`? Does it have any other members than the `head` pointer? 
[00:31:14] <quartz> fizzie: Just the head pointer
[00:31:15] <floatcomplex> doesn't seem that way
[00:31:21] <floatcomplex> quartz: so you don't need that struct at all
[00:31:25] <fizzie> Sounds like it might be an attempt to avoid a `**` then.
[00:31:26] <floatcomplex> unless your idiot professor says you do
[00:31:34] <floatcomplex> you don't need ** either
[00:31:36] <floatcomplex> just return the new head
[00:31:42] <quartz> fizzie: Yeah it's an attempt at avoiding a double pointer
[00:31:53] <fizzie> Well, sometimes you do. Consider `void *popFront(struct List *list)`.
[00:32:19] <fizzie> You need to get both the new head (`struct Node *`) and the data (`void *`) out of it.
[00:32:34] <kurahaupo> floatcomplex: A single element struct offers some abstraction (by dint of leaving it undeclared)
[00:32:39] <floatcomplex> fizzie: you're presupposing that a discrete function that pops a value from an intrusive singly linked list is even needed.
[00:33:19] *** Joins: BGL (~twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[00:33:27] <rcf> Hence the 'sometimes' 
[00:33:32] <kurahaupo> I would use an inline function just because it's a better abstraction
[00:33:35] <floatcomplex> kurahaupo: if it's a singly linked list, what abstraction is needed or wanted?
[00:33:49] <floatcomplex> you don't want to not know it's a list
[00:34:09] <floatcomplex> abstraction here is just complexity that begets more complexity for no benefit
[00:34:12] <fizzie> I don't think it's expected to feel like an intrusive data structure there. I mean, it has `void *` nodes and all.
[00:34:14] <kurahaupo> floatcomplex: Exactly that; most of the time you shouldn't need to know what kind of container, as long as it can provide the requisite operations
[00:34:35] <floatcomplex> ugh
[00:35:08] <floatcomplex> quartz: please take other classes from other professors besides this one
[00:35:09] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:35:27] *** Joins: sedeki (~textual@user/sedeki)
[00:35:50] <kurahaupo> (With acceptable as space & time complexity)
[00:37:01] <floatcomplex> treating a singly linked list as anything more mysterious than a for loop is one of my biggest pet peeves
[00:37:08] <floatcomplex> you wouldn't librarize a for loop
[00:37:11] <pony> my professor said we should always cast malloc result
[00:37:25] <floatcomplex> your professor probably never actually learned c
[00:37:29] <pony> :>
[00:37:35] <DPA> Walking a doubly linked lists backwards is the same as walking a reversed linked list forward. There is no need to ever reverse the list when you can just walk either way.
[00:38:27] <floatcomplex> DPA: yeah, but you shouldn't be motivated to use a doubly linked list just because you think you might want that property
[00:39:15] <DPA> Just abstract linked lists like the C kernel does, and switching between them should be trivial.
[00:39:31] <rcf> If you're not sure if you want that property (because you're doing the right thing and avoiding premature optimization) the abstraction approach acquires some merit. 
[00:39:50] <floatcomplex> rcf: i am sure i do not want that property :)
[00:40:00] <nomagno> You know, I always worry my code is too heavy... Then I realize it does like 20000 operations per second on a 4Ghz CPU
[00:40:06] *** Quits: tolot (~tolot@dynamic-093-135-227-117.93.135.pool.telefonica.de) (Quit: Leaving)
[00:40:57] <nomagno> I really need to stick a poster in my wall with a visual comparison between those two numbers
[00:41:30] *** Quits: Matt|home (~matt@adsl-74-233-58-219.mia.bellsouth.net) (Ping timeout: 260 seconds)
[00:41:31] <rcf> nomagno: you think that, and probably simultaneously wonder why certain software destroys battery life far more than you'd expect given the functionality 
[00:41:45] <floatcomplex> nomagno: you're using 200 thousand clock cycles per operation? something's wrong :)
[00:42:12] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[00:42:23] <nomagno> floatcomplex: The wrong thing is it is supposed to run at 60FPS :P
[00:42:24] <floatcomplex> everyone should benchmark their code on a low end arm processor with an ammeter
[00:42:40] <floatcomplex> because those things actually matter
[00:42:44] <tk> you start to realise how slow computers are when you start doing multiple operations per screen pixel and try to redraw all screen pixels 60 times a second
[00:42:50] <SamuelMarks> amen floatcomplex 
[00:42:55] <floatcomplex> regular jackoffs using your code notice when it kills their battery
[00:42:59] <quartz> floatcomplex: lol everyone complains about my professor :P
[00:43:11] <quartz> He's a nice guy
[00:43:42] <nomagno> I mean, I could do speculative calculation to use up those clock cycles!
[00:43:43] <SamuelMarks> qv where
[00:43:43] <nomagno> Just... it's a bit meh
[00:43:45] <rcf> I tend to avoid blaming professors for the questionable implementation choices of their students. 
[00:44:13] <rcf> I blame them only when they fail to critique such implementations properly when the assignment is done 
[00:44:22] <nomagno> rfc: What is the statement about battery life supposed to mean?
[00:44:27] <BtbN> Have you heard of electron yet?
[00:44:32] <tk> so for list reversal I have: struct node *revlist(struct node *list) { struct node *rev = NULL; while (list != NULL) { struct node *next = list->next; list->next = rev; rev = list; list = next; } return rev }
[00:44:50] <BtbN> Makes a trivial chat application keep an entire CPU core busy no problem.
[00:44:56] <nomagno> BtbN: What is that? Does it like, use up more than two electrons of electricity per second? :O
[00:45:15] <floatcomplex> rcf: in this case the professor is providing far too many hints and prescribing too many function prototypes for the student to do the simplest most robust thing
[00:45:37] <rcf> nomagno: when you code on the assumption that the brute force of the processor can compensate for your lack of concern, your code is making the user's system run hotter and die sooner. 
[00:45:45] <rcf> nomagno: because that brute force is not free. 
[00:45:45] <floatcomplex> tk: yes that's exactly what i wrote. it's "not clever enough"
[00:45:52] <tk> ah
[00:45:57] <rcf> Isn't that a good thing? 
[00:46:46] <rcf> Clever code is usually counterproductive over the long term (unless you are trying to grant yourself job security by scaring away any new hires) 
[00:47:12] <nomagno> rcf: Well that's a fair point
[00:47:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:47:21] <floatcomplex> rcf: yes, that's my point
[00:47:42] <floatcomplex> rcf: quartz's professor is requiring them to be more clever than the simplest implementation of reversing a linked list
[00:47:58] <floatcomplex> without having had them understand the simple version first
[00:48:01] <tk> there was a guy at my old job who when I joined had built up quite a lot of job security
[00:48:08] <tk> he left after I started to get rid of a lot of it
[00:48:18] <quartz> floatcomplex: I think it's just an exercise in pointer manipulation.
[00:48:44] <quartz> I'm honestly more frustrated with myself than with my professor. It took me awhile to write that last function.
[00:48:50] <quartz> I mean I *almost* had it
[00:49:57] <floatcomplex> quartz: don't be frustrated with yourself when your professor is asking you to drive backwards up a mountain road without having even told you cars have forward gears yet
[00:50:10] <nomagno> in any case, my biggest issue right now is... Say my program is outputting a constant string of characters as quickly as possible to a terminal. Most/all terminals manage to keep up with this. Issue is, since they probably throw away the extra 'frames' of characters, I'm not all that sure how I would go about keeping the program simulation speed constant
[00:50:47] <nomagno> I guess I can simply simulate X milliseconds in advance, and output that frame for that many milliseconds before generating a new one?
[00:50:57] <rcf> nomagno: this is not actually true in all cases. Some will drop frames, but some will be bogged down drawing every last one of them. 
[00:51:24] <tk> nomagno: what's your task?
[00:51:41] <nomagno> I have been trying to do the dumbest thing ever for a while: Real-time terminal game
[00:51:49] <rcf> nomagno: and dropping things is actually more complicated than you'd think, as the terminal is actually a state machine with a very irregular in-band control scheme. 
[00:52:04] <nomagno> I definitely need to figure out how to not waste precious I/O
[00:52:23] <nomagno> I have an almost-working POSIX-compliant way to figure out the approximate framerate of a TTY/Terminal Emulator
[00:52:38] <floatcomplex> nomagno: the issue you'll eventually run into when writing a real-time terminal game is you can't detect both keypresses and key releases
[00:52:39] <nomagno> Hopefully that proves to be semi-reliable
[00:52:54] <rcf> nomagno: when dealing with terminals it is never so simple. 
[00:52:58] *** Joins: Matt|home (~matt@adsl-74-233-58-50.mia.bellsouth.net)
[00:53:47] <nomagno> floatcomplex: I got that specific covered, the controller input is a FIFO with a specific format
[00:54:30] <nomagno> rcf: Well the entire concept of this game frontend is dumb, so I will fail in a honourable, POSIX-restrained way
[00:54:39] <floatcomplex> haha
[00:55:28] <floatcomplex> nomagno: i mean you can kind of fake it, yes, but the terminal is going to pass your code discrete keypresses. it's tricky to get from there to an assumption of whether a key is currently pressed or not
[00:56:11] <tk> floatcomplex: he means that he isn't using keyboard input to the terminal
[00:56:20] <tk> floatcomplex: he is using an external controller and ... evdev or something?
[00:56:23] <nomagno> Yeah I am using a Unix named pipe
[00:56:26] <tk> oh
[00:56:28] <floatcomplex> tk: sure but it's gonna have the same problem
[00:56:37] <tk> is he? how so?
[00:56:51] <tk> nomagno: what's on the other end of the pipe?
[00:57:02] <tk> nomagno: a program listening for X events?
[00:57:07] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:57:07] <floatcomplex> nomagno: does your code get a discrete key-release event via this pipe thing
[00:58:26] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 245 seconds)
[00:58:34] <nomagno> tk, floatcomplex: The writing end is unspecified (AKA I will make OS-specific controller drivers), and the reading end is the game. I have the format fairly specified: https://termbin.com/35xe
[00:59:00] <rcf> In that case you're fine. 
[00:59:12] <nomagno> Yeah, the input side is definitely fine
[00:59:20] <nomagno> I just need to figure out how not to choke the terminal
[01:00:10] <floatcomplex> just choose not to print a frame if you've already printed N frames in the past M tens of milliseconds
[01:00:13] <nomagno> Or at least, if I am going to choke the less advanced TTYs, have them choke 1-2 frames per second with this unprecise framerate timing thing, so the user can actually close the program
[01:00:21] <rcf> Aim for a slower framerate and update based on a timer. 
[01:00:44] <nomagno> Aaah, that seems reasonable
[01:00:45] *** Joins: rgrinberg (~textual@190.113.111.74)
[01:01:05] <nomagno> I guess I can actually let the user decide the framerate at the game startup
[01:01:13] <nomagno> probably between 1FPS and 30FPS
[01:01:25] <nomagno> default something sane like 15
[01:02:13] <floatcomplex> fwiw writing to and getting keyboard/controller events from an sdl2 window is arguably not more complicated than this and doesn't require you to learn...anything
[01:02:49] <nomagno> floatcomplex: The game is POSIX-restrained
[01:02:51] <nomagno> That's the fun part
[01:03:06] <sham1> Do you mean constrained
[01:03:06] <floatcomplex> and the gamepad pipe thing qualifies but sdl does not?
[01:03:38] <nomagno> floatcomplex: Yes, FIFOs date back to the 1970s, and are definitely part of POISX
[01:03:43] <nomagno> yes, POSIX-constrained
[01:03:56] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:04:05] <nomagno> though I am using ONE non-POSIX system call, to get the terminal size if none is specified
[01:04:17] *** Joins: tejr (~tejr@user/tejr)
[01:04:31] <nomagno> https://pubs.opengroup.org/onlinepubs/9699919799/
[01:04:44] *** Quits: MrFantastik (~f@c-71-202-124-69.hsd1.ca.comcast.net) (Remote host closed the connection)
[01:04:46] *** Joins: arinov (~arinov@213.194.126.155)
[01:04:56] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[01:05:10] <nomagno> ^ Boring 1980s US Government-initiative to standardize Unix. AKA this spec is the lowest common denominator between BSD, Linux, Solaris and MacOS
[01:05:11] *** Quits: Darkcoal (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Ping timeout: 264 seconds)
[01:05:42] <floatcomplex> yes i am familiar, i'm just trying to figure out where gamepads fit into that
[01:05:45] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[01:05:50] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:06:13] <nomagno> floatcomplex: Well, you are supposed to write your own gamepad driver, and make that driver write to the pipe
[01:06:30] <rcf> The idea is that the main program will run on anything POSIX, leaving only the gamepad code to actually be ported. 
[01:06:37] *** Joins: Darkcoal (~user@167.86.132.92)
[01:06:37] <nomagno> ^
[01:06:59] <floatcomplex> you could keep the game strictly posix and implement it as taking those gamepad events via stdin and writing frame updates to stdout, and then write both a gamepad driver and viewer for it as a platform-specific component since you have to do that anyway
[01:07:05] *** Joins: vaio (~gary@user/ghost)
[01:07:22] <floatcomplex> no reason to being named pipes into this fine morning
[01:08:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[01:08:43] <nomagno> floatcomplex: I mean, because of how the Unix philosophy (everything is a file) works, you can DEFINITELY, and very easily, use either a regular ASCII text tile or stdin as the input
[01:09:14] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:10:01] <nomagno> I guess I can add an option to read straight from stdin, if you insist... This stuff is fairly trivial, the implementation doesn't change in any way
[01:10:12] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:10:36] <floatcomplex> yes, my point is, if you're going to abstract away the input to the game into some platform-specific provider of events, why not do the same with the output
[01:11:20] <floatcomplex> hell you could even have it write and overwrite and overwrite a pgm file on disk if no sdl window was available
[01:11:34] <floatcomplex> most of the code would be the same
[01:12:01] <nomagno> floatcomplex: The backend (AKA all parts not involved in the terminal handling) is already its own library
[01:13:16] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[01:13:24] *** Joins: rndusr (~rndusr@user/rndusr)
[01:13:25] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:13:57] <nomagno> https://termbin.com/kry4
[01:14:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[01:14:27] <nomagno> The interface is very simple.
[01:15:43] <floatcomplex> nomagno: yeah i'm just wondering why you've drawn certain dotted lines and not others
[01:16:52] <sham1> Could just be a challenge
[01:16:54] <sham1> Or a dare
[01:17:25] *** Quits: brad_mssw|mac (~bhouse@2601:344:4100:b490:9dbd:c384:b2c:a0f6) (Quit: Leaving)
[01:17:32] <nomagno> floatcomplex: It is a racing game. You need continuous variables, and POSIX can't provide this in a simple way. However, we do have a way to represent an N-dimensional game world trough discrete values that has been tried and tested (it is called pixels)
[01:18:18] <nomagno> It's not I can't use a keyboard as the input
[01:18:31] *** Joins: Nspace (~Nspace@user/nspace)
[01:19:04] <nomagno> I can, it would just hurt the experience way more than constraining myself to very-low-resolution character-based output
[01:19:47] <floatcomplex> never though i'd be the one in this channel arguing for adding a layer of abstraction, and still getting pushback
[01:20:20] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[01:20:23] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[01:20:42] <nomagno> if I leave the viewing method unspecified, I would just be making a backend on top of the backend!
[01:21:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:22:09] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:22:21] <floatcomplex> for added cool factor: have the thing at the upper end of that pipe which provides game input events, also provide the frame clock
[01:22:40] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:23:02] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[01:23:17] *** Joins: seninha (~seninha@user/seninha)
[01:23:27] <floatcomplex> then the main posix application doesn't need one, and the entire output of the game is a deterministic function of its input, to the point where you can add a "make check" target to your Makefile that pipes in a known sequence of keystrokes and clock ticks, and checks the md5sum of the resulting terminal output
[01:23:32] <floatcomplex> :D
[01:24:01] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[01:25:23] *** Joins: joev (~joev@user/joev)
[01:26:26] <nomagno> floatcomplex: You know, since I am outputting a newline between frames (duh), if I add a clock to the input I would actually be making an extension on top of my backend, that outputs an arbitrary-resolution representation of the simulated world in the form of ASCII character tokens, and can be both used as the frontend (if left unpiped), or as compositor (if piped into a larger frontend)!
[01:26:58] <nomagno> Shoot! I would have to rename this from halfive-term to halfive-comp
[01:27:08] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[01:27:33] <nomagno> You're a genius!
[01:28:15] <floatcomplex> i've put a lot of thought into how to very quickly test for unexpected breakage in complicated apps
[01:28:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[01:28:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:29:26] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[01:29:58] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[01:30:39] *** Quits: eblip (~eb0t@90.210.90.151) (Ping timeout: 260 seconds)
[01:32:10] <nomagno> This is actually the thing I was looking for to complete my software stack
[01:32:26] <nomagno> I thought the core backend was too simple, and a full frontend on top of that handles too much by itsel
[01:32:38] *** Joins: eblip (~eb0t@90.210.92.98)
[01:33:45] <nomagno> Using this initial POSIX terminal frontend project, I can actually get rid of the headache of converting a declarative representation of the world to an imperative one
[01:33:46] *** Quits: oriba (~oriba@dynamic-089-012-082-205.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:36:07] <nomagno> The backend does the physics, the middle-end does the compositing, and the frontend does the displaying
[01:36:13] <floatcomplex> :)
[01:36:44] <floatcomplex> the "*end" nomenclature is a bit ambiguous but yeah
[01:37:22] <floatcomplex> there is a one-way flow of data through a series of block diagram elements, from user buttons to user eyeballs
[01:37:54] <nomagno> This also means you can invoke this "compositor" as a single function (takes a world simulated by the backend, returns a token string to represent it at the desire resolution)
[01:37:55] <floatcomplex> individually and in any combination they are testable
[01:38:14] <nomagno> Which means the terminal application is a frontend for the compositor!
[01:38:41] <nomagno> I am going to end up with an entire folder of lego pieces aren't I? :P
[01:38:45] *** Joins: echoSMILE (uid504326@user/echosmile)
[01:38:54] <floatcomplex> yes and they will work better than most game engines
[01:38:57] <floatcomplex> because they're testable
[01:39:05] <nomagno> Definitely
[01:39:14] <floatcomplex> whenever i complain at UI people for not testing their shit they say it's untestable
[01:39:25] <nomagno> You can see how I had an architecture similar to this in mind from how the backend functions are declarated
[01:39:26] <floatcomplex> just requires a bit of creativity and restraint
[01:40:22] <nomagno> The backend works with a declarative representation of the world, then I had the terminal app simply handle converting this to cold 'pixels'
[01:40:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:42:56] <nomagno> which means now that you had the idea of handling the timing as part of the input, it can be split into 'the part that does math on the world', 'the part that represents the world', and 'the part that makes the world playable on your 1000 dollar gaming PC'
[01:44:02] <nomagno> Where all three do the exact same thing, just in three different ways. The first outputs a struct, the second outputs a token string, the third outputs fancy graphics.
[01:44:55] <nomagno> Since this game is actually part of a reference implementation for a racing game protocol ( https://halfworld.nomagno.xyz/ ), the inputs and outputs in the form of client/server packets are also just ways of representing the world!
[01:46:09] <nomagno> This is possibly one of the most elegant game engine architectures
[01:46:40] <nomagno> ... You know, I feel like I should have chosen Haskell to write this :P
[01:48:05] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 260 seconds)
[01:48:51] *** Joins: Darkcoal_ (~user@51.158.144.32)
[01:50:21] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[01:52:10] *** Quits: Darkcoal (~user@167.86.132.92) (Ping timeout: 260 seconds)
[01:52:31] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[01:53:21] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[01:53:45] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[01:55:23] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[01:56:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:59:33] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:03:59] *** Joins: Atque (~Atque@user/atque)
[02:04:37] *** Joins: Nspace (~Nspace@user/nspace)
[02:07:31] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[02:07:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:07:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:07:59] *** Joins: wroathe (~wroathe@user/wroathe)
[02:08:11] *** Quits: wootz (~wootz@45.83.89.21) (Ping timeout: 264 seconds)
[02:11:37] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[02:12:02] *** Quits: random-nick (~random-ni@87.116.183.63) (Ping timeout: 260 seconds)
[02:12:13] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[02:13:24] *** Quits: Akuli (~Akuli@82-203-163-146.bb.dnainternet.fi) (Quit: Leaving)
[02:14:39] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:16:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[02:18:24] *** Joins: Nspace (~Nspace@user/nspace)
[02:18:43] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[02:19:07] *** Joins: uskerine (32d3@91.191.78.188.dynamic.jazztel.es)
[02:19:43] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:20:42] *** Quits: effexzi (uid474242@id-474242.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:22:00] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:22:35] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Read error: Connection reset by peer)
[02:22:52] *** Quits: Nspace (~Nspace@user/nspace) (Client Quit)
[02:25:25] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[02:26:33] *** Quits: fluter (~fluter@user/fluter) (Quit: WeeChat 3.3)
[02:27:12] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:27:44] <uskerine> https://bpa.st/UNVQ
[02:27:55] <uskerine> could someone help me to understnad the impact of not using cast here?
[02:28:45] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[02:30:09] <floatcomplex> the impact of not using a cast is that your code is correct idiomatic c, and will not compile as c++
[02:31:44] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[02:31:46] *** Joins: Nspace (~Nspace@user/nspace)
[02:33:24] *** Quits: pizdets_ (~pizdets@183.182.114.179) (Ping timeout: 250 seconds)
[02:33:55] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 258 seconds)
[02:34:03] *** Joins: pizdets (~pizdets@183.182.110.199)
[02:34:06] *** Quits: chomwitt (~chomwitt@ppp-94-68-249-8.home.otenet.gr) (Remote host closed the connection)
[02:34:11] <kurahaupo> !mallocidiom
[02:34:52] <floatcomplex> yes, and we're not going to shame them for that, because shaming for casting malloc is more productive
[02:35:05] *** Joins: lkor (~lionkor@200116b80fc68d007285c2fffea63d72.dip.versatel-1u1.de)
[02:35:27] <floatcomplex> shaming people over mallocidiom just brings up the noise level
[02:35:38] *** Quits: lionkor (~lionkor@200116b80fa57c00dc443c0104f029d0.dip.versatel-1u1.de) (Ping timeout: 246 seconds)
[02:37:48] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[02:43:53] *** Quits: puke (~puke@user/puke) (Quit: puke)
[02:45:05] *** Joins: FrankD (~frankd@69.206.2.53)
[02:48:14] *** Joins: fluter (~fluter@user/fluter)
[02:49:03] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:49:20] *** Joins: freon (~freon@c-73-210-167-38.hsd1.il.comcast.net)
[02:50:24] *** Joins: Wulf (~Wulf@user/wulf)
[02:52:05] *** Joins: quartz (~quartz@user/quartz)
[02:52:14] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:53:36] <wroathe> floatcomplex: I'd like to shame you over getting meta about shaming people for mismallocing 
[02:53:40] <wroathe> floatcomplex: So, be shamed
[02:54:18] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[02:55:26] <floatcomplex> i am thus shamed
[02:55:56] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:57:12] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[02:57:47] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[02:58:34] *** Quits: reset (~reset@user/reset) (Quit: reset)
[02:59:02] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[03:03:44] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[03:04:01] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[03:05:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:06:56] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Remote host closed the connection)
[03:12:02] *** Quits: alch (~alch@mi-18-42-158.service.infuturo.it) (Read error: Connection reset by peer)
[03:12:51] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[03:16:04] <nitrix> Close kurahaupo. It activates with a coma prefix or some trigger words.
[03:16:05] *** Joins: alch (~alch@151.82.48.154)
[03:17:48] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[03:18:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:18:42] * floatcomplex is thus triggered
[03:19:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-6043-cabb-4e54-73fe.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:20:29] <katnis> hello world
[03:22:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:23:18] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[03:33:30] *** Joins: lionkor (~lionkor@200116b80fac8c007285c2fffea63d72.dip.versatel-1u1.de)
[03:33:51] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fa59:2f99:edd:cd7b) (Ping timeout: 260 seconds)
[03:34:13] *** Quits: lkor (~lionkor@200116b80fc68d007285c2fffea63d72.dip.versatel-1u1.de) (Ping timeout: 268 seconds)
[03:34:29] *** Joins: pulse (~pulse@user/pulse)
[03:34:31] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[03:39:38] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[03:42:30] *** Joins: rgrinberg (~textual@190.113.111.74)
[03:42:45] *** Quits: krux02 (~krux02@p200300e817076e00697d7433d4e5d517.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[03:45:22] *** Quits: trog (~trog@user/trog) (Ping timeout: 252 seconds)
[03:45:40] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:47:31] *** Joins: ferdna (~ferdna@user/ferdna)
[03:47:40] *** Joins: trog (~trog@user/trog)
[03:48:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:48:43] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:49:31] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-6043-cabb-4e54-73fe.res6.spectrum.com)
[03:50:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[03:53:59] *** Quits: tannhauser (~textual@2620:10d:c091:480::1:2ebf) (Quit: Textual IRC Client: www.textualapp.com)
[03:54:51] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 260 seconds)
[03:56:39] *** Joins: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net)
[03:57:52] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Quit: alefir)
[04:02:28] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[04:04:25] *** Joins: frost (~frost@user/frost)
[04:07:06] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[04:07:55] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:08:38] <rcf> uskerine: in C a void * is implicitly convertible to any other pointer type (to an object anyway, function pointers are weird), so the cast is redundant. The added clutter for something written as pure C irritates many people. 
[04:10:38] *** Quits: nate (NBishop@o.apocaleaps.com) (Killed (NickServ (GHOST command used by nate9!~nate@packetframe/nate)))
[04:10:48] *** Joins: nate (NBishop@o.apocaleaps.com)
[04:11:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[04:11:50] *** Quits: nate (NBishop@o.apocaleaps.com) (Killed (zirconium.libera.chat (Nickname regained by services)))
[04:12:02] *** Joins: synapt (NBishop@o.apocaleaps.com)
[04:12:06] <rcf> It's useful for the pragmatist who wants compatibility with C++ compilers and C compilers, and it's not actually incorrect as C, but nothing starts up intractable arguments quite as well as what amounts to a code style issue. 
[04:12:49] *** Joins: Yoofie (~yoofie@097-070-135-101.res.spectrum.com)
[04:13:12] <pony> hello katnis. how was exam?
[04:14:18] <rcf> Though it's a bit like the GNU code style in terms of just how many people find it hideously ugly. 
[04:17:54] *** Quits: Yoofie (~yoofie@097-070-135-101.res.spectrum.com) (Quit: Leaving)
[04:18:34] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[04:18:52] *** Joins: Crescendo (~Crescendo@user/crescendo)
[04:20:24] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:22:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-6043-cabb-4e54-73fe.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:24:46] *** bparker_ is now known as bparker
[04:25:26] <oldlaptop> rcf: Harder to think of a case where gnu brace madness can hide bugs
[04:28:46] <rcf> oldlaptop: if reading the code is painful you're not going to look hard enough to find them 
[04:30:54] * oldlaptop is thinking more of cases like http://c-faq.com/malloc/mallocnocast.html
[04:31:35] *** Joins: gco (~gco@2601:647:5a00:524:30af:b11e:d0ee:e5f3)
[04:31:50] *** Joins: CaCode_ (~CaCode@user/cacode)
[04:33:54] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 258 seconds)
[04:34:09] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[04:34:15] *** Joins: tejr_ (~tejr@user/tejr)
[04:34:17] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 246 seconds)
[04:36:28] *** Joins: quartz (~quartz@user/quartz)
[04:36:51] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:36:57] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[04:37:04] *** Quits: quartz (~quartz@user/quartz) (Client Quit)
[04:44:11] *** Quits: gco (~gco@2601:647:5a00:524:30af:b11e:d0ee:e5f3) (Ping timeout: 264 seconds)
[04:44:37] <katnis> oh thanks for remembering pony ! it was a very basic test about C language. :D
[04:48:32] <rcf> oldlaptop: strictly-speaking that is only a benefit conferred by common implementations, and these days those will warn about functions lacking prototypes as well. 
[04:50:28] <rcf> (only an attempt to assign to something not a modifiable lvalue is an actual constraint violation that requires a diagnostic) 
[04:52:47] <katnis> they want me to install ubuntu
[04:54:35] <rcf> oldlaptop: wait nevermind I misremembered I suppose that is actually useful
[04:54:36] <fizzie> rcf: That's not true. See the "one of the following shall hold" constraints of C11 6.5.16.1p1 on simple assignment: none of them match if the left operand has a pointer type and the right operand has an integer type, as it does without the declaration.
[04:55:49] <fizzie> Although you could argue that in C99+ implicit function declarations are no longer a thing, so cast or no cast it's always a constraint violation.
[04:56:34] <fizzie> (But C89 had similar constraints on simple assignment.)
[04:57:19] <Thedarkb-Desktop> Isn't it legal to cast void to a function pointer now?
[04:57:29] <Thedarkb-Desktop> At least the dlsym documentation claims it is.
[04:58:00] <rcf> fizzie: indeed, my  brain decided to ignore the additional rules for compound and simple assignment and checking the standard does actually pay off 
[04:58:22] <rcf> Thedarkb-Desktop: POSIX allows it. C does not. 
[04:59:35] *** Quits: The_Jag_ (~The_Jag@host-87-11-42-170.retail.telecomitalia.it) (Ping timeout: 258 seconds)
[04:59:44] <rcf> Similarly, POSIX mandates an eight-bit byte whereas C only requires it be at least eight bits.
[05:00:36] *** Joins: begriffs_ (~begriffs@user/begriffs)
[05:00:52] *** Joins: The_Jag (~The_Jag@host-95-252-5-94.retail.telecomitalia.it)
[05:01:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[05:02:39] *** Quits: begriffs (~begriffs@user/begriffs) (Ping timeout: 258 seconds)
[05:04:40] *** Joins: kish` (~aqua@user/aqua)
[05:08:47] <pony> katnis: nice
[05:09:13] <rcf> Thedarkb-Desktop: it's covered under J.5.7 in C11 as a common extension
[05:11:35] *** Quits: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net) (Remote host closed the connection)
[05:12:00] <twkm> covered though not authoritative.
[05:16:56] *** Joins: rgrinberg (~textual@190.113.111.74)
[05:18:50] *** tejr_ is now known as tejr
[05:20:35] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[05:21:04] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[05:22:04] *** Quits: begriffs_ (~begriffs@user/begriffs) (Read error: Connection reset by peer)
[05:22:05] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:23:05] *** Joins: begriffs_ (~begriffs@user/begriffs)
[05:23:18] *** Joins: dutch (~DutchIngr@user/dutch)
[05:23:33] <rcf> Indeed; even for modern POSIX systems it would not be accurate 
[05:25:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:25:42] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:25:42] *** Joins: wroathe (~wroathe@user/wroathe)
[05:30:35] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[05:32:51] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[05:33:56] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (Read error: Connection reset by peer)
[05:39:58] <pony> mmmm
[05:40:15] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[05:40:50] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[05:41:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:42:41] <smlavine> What's that bot command to see a C statement in plain english?
[05:47:18] <twkm> probably something too obvious.
[05:47:57] <twkm> ,english a+42
[05:47:58] <candide> twkm: `a` plus 42.
[05:48:13] *** Joins: uniquepointer (~uniquepoi@190.218.240.164)
[05:50:35] *** Quits: machinehum (~machinehu@2604:3d08:937e:d600::ffd) (Ping timeout: 260 seconds)
[05:51:04] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[05:51:27] *** Joins: machinehum (~machinehu@2604:3d08:937e:d600::4da2)
[05:52:53] *** Quits: lionkor (~lionkor@200116b80fac8c007285c2fffea63d72.dip.versatel-1u1.de) (Ping timeout: 264 seconds)
[05:53:47] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[05:54:07] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:54:10] <smlavine> Thanks
[05:57:10] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 260 seconds)
[05:57:19] *** Joins: Alhazred (~Alhazred@s91904425.blix.com)
[05:57:33] <floatcomplex> ,english #include "/dev/zero"
[05:57:46] <candide> floatcomplex: [Timed-out]
[05:57:46] <floatcomplex> uh oh
[05:58:36] *** Joins: humky (~humky@user/humky)
[05:59:11] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 264 seconds)
[06:04:02] *** Quits: begriffs_ (~begriffs@user/begriffs) (Remote host closed the connection)
[06:04:23] *** Joins: begriffs_ (~begriffs@user/begriffs)
[06:07:23] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[06:08:23] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 268 seconds)
[06:10:24] <SamuelMarks> floatcomplex - ahaha
[06:11:07] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[06:13:32] *** Quits: malloy (~jimery@116.30.221.89) (Ping timeout: 250 seconds)
[06:14:33] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[06:14:41] *** Joins: quartz (~quartz@user/quartz)
[06:15:16] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:16:07] *** Joins: malloy (~jimery@116.30.221.89)
[06:16:28] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[06:17:51] *** Joins: teepee (~teepee@openscad/teepee)
[06:18:49] <SamuelMarks> ,english char (**(**y[3][4])())[5]
[06:18:53] <candide> SamuelMarks: Declare `y` as an array of 3 elements of an array of 4 elements of pointer to pointer to function taking unspecified arguments and returning pointer to pointer to an array of 5 elements of char.
[06:19:20] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:19:47] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:20:36] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[06:23:36] *** Joins: de-facto (~de-facto@user/de-facto)
[06:27:07] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 1.6)
[06:32:11] *** Joins: seninha (~seninha@user/seninha)
[06:33:20] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 260 seconds)
[06:36:50] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[06:38:41] *** Joins: soapsudsxx (~soapsudsx@141.193.188.155)
[06:40:31] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 245 seconds)
[06:43:16] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a4fe-4f97-b0f4-b9a3.res6.spectrum.com)
[06:45:39] *** Quits: soapsudsxx (~soapsudsx@141.193.188.155) (Ping timeout: 260 seconds)
[06:46:16] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:46:17] *** Joins: soapsudsxx (~soapsudsx@141.193.188.155)
[06:51:18] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Quit: imp)
[06:52:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 258 seconds)
[06:53:45] *** Quits: machinehum (~machinehu@2604:3d08:937e:d600::4da2) (Ping timeout: 260 seconds)
[06:55:45] *** Joins: machinehum (~machinehu@45.131.194.114)
[06:55:50] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:a044:e8fe:e209:6980)
[06:56:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[06:57:39] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 258 seconds)
[06:57:53] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[06:58:25] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[06:59:11] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[07:00:05] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:00:52] *** Quits: uniquepointer (~uniquepoi@190.218.240.164) (Quit: Leaving)
[07:03:23] *** Joins: Fairy97 (~Fairy@2001:464a:4992:0:dd95:968b:982e:1ba9)
[07:06:22] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:06:54] *** Joins: larry87 (~quassel@98.40.245.193)
[07:07:21] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:07:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:9c0f:e957:8bda:88f) (Ping timeout: 258 seconds)
[07:08:02] *** Joins: presonic (~presonic@111-22-237-24.gci.net)
[07:08:31] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Ping timeout: 265 seconds)
[07:11:15] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 260 seconds)
[07:12:15] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[07:13:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:13:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:13:31] *** Joins: wroathe (~wroathe@user/wroathe)
[07:14:35] *** Quits: alch (~alch@151.82.48.154) (Ping timeout: 260 seconds)
[07:16:21] *** Quits: HisShadow_ (~HisShadow@user/hisshadow) (Ping timeout: 245 seconds)
[07:16:29] *** Joins: alch (~alch@to-18-93-232.service.infuturo.it)
[07:18:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[07:18:04] *** Joins: extern (~archer@37.142.174.4)
[07:18:28] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[07:18:53] <extern> how to determine the default compiler flags of my gcc version ? 
[07:19:53] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[07:22:30] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[07:24:28] <caze> gcc --what-are-the-default-compiler-flags-of-my-gcc-version
[07:24:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:25:52] <extern> you are funny today
[07:26:26] <floatcomplex> extern: what specific types of things are you wondering about
[07:27:00] <floatcomplex> the answer to your question could be "there are none" or "there are multiple pages of them" depending on what you want to know
[07:27:05] <rcf> extern: -Q -v 
[07:27:15] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[07:28:19] <rcf> (also needs a sourcefile to actually work, but literally anything is acceptable) 
[07:28:30] <extern> floatcomplex: im trying to make clangd recognize my project 
[07:28:32] <extern> https://clangd.llvm.org/installation.html#project-setup
[07:28:33] <candide> Title of extern's link: Getting started
[07:29:10] <extern> im trrying to create compile_flags.txt
[07:31:42] <rcf> I feel like you shouldn't need that by default. 
[07:31:48] <floatcomplex> extern: i am not familiar with this tool but are you sure compile_flags.txt is a property of your compiler and not of your project
[07:32:58] <rcf> It specifically says that without it you end up with `clang $YOUR_FILE` rather than `clang $FLAGS $YOUR_FILE` 
[07:33:23] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:a044:e8fe:e209:6980) (Ping timeout: 264 seconds)
[07:33:33] *** Quits: pony (~ed@smol/hors) (Quit: WeeChat 3.3)
[07:34:29] <extern> https://github.com/clangd/coc-clangd
[07:34:30] <candide> Title of extern's link: GitHub - clangd/coc-clangd: clangd extension for coc.nvim
[07:34:38] <rcf> So if it doesn't work, you should be more concerned with why it's not building with clang rather than trying to contort it into behaving like your version of gcc. 
[07:35:48] *** Joins: pony (~ed@smol/hors)
[07:35:51] <extern> rcf i thought so ..
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:24] <rcf> If the project is sufficiently complicated that you *must* use specific flags, figuring out the gcc defaults is useless because they aren't going to work either. 
[07:36:28] <extern> well.. all i really want to do is that feature of jumping between implemenation and decleration in the project
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:37] <extern> not it's usually not that complicated
[07:36:45] <extern> im doing it merely for convinience
[07:37:30] <caze> for convenience
[07:37:32] * rcf mumbles something about how back in his day ctags was good enough for anybody
[07:38:39] *** Joins: puke (~puke@user/puke)
[07:40:58] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[07:44:31] <extern> god riddles
[07:47:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e) (Quit: WeeChat 3.3)
[07:47:22] <extern> rcf: i totally forgot about ctags :D
[07:47:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ece1:b35e:c9b0:1b9e)
[07:47:32] <citrons> what is the errno constant for "no such file or directory"?
[07:47:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:48:22] <citrons> I looked at the manpage for open and couldn't find it. I feel like I can't read 
[07:48:22] <rcf> ENOENT
[07:48:41] <citrons> ah, thanks
[07:48:45] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[07:48:51] <extern> 2
[07:49:14] <citrons> wow, immediately after asking that, I did man errno and found out about the errno command, which would have provided the answer
[07:49:45] <extern> yeah it's a common sin
[07:50:15] <rcf> Using numeric constants instead of the macros is an even graver sin 
[07:50:55] <extern> i find it a bit more readable than that ENONET nonsense
[07:51:15] <extern> more memorizable
[07:52:03] <extern> ls SomeNonExistnence file
[07:52:18] <extern> echo $? would always remind you ..
[07:52:28] <extern> so 2 it is
[07:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[07:53:35] <rcf> Not only is that questionable it is simply wrong to assume the values, as they are not at all the same across platforms. 
[07:53:47] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 264 seconds)
[07:54:01] <extern> you have a point ..
[07:54:35] <katnis> *
[07:54:58] <extern> although a wrong one
[07:55:05] <extern> since ENOENT = 2
[07:55:24] <extern> so every program that use ENOENT would spit 2 upon missing file or directory 
[07:55:35] <extern> so at the end it's reliable way
[07:55:44] <extern> one that doesn't let me down in my past days
[07:56:17] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:8c88:2838:6ccb:5781)
[07:57:36] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 245 seconds)
[07:57:48] <rcf> ENOENT is not defined to be 2. It is merely mandated to exist. 
[07:59:35] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[08:00:21] <extern> ok you got me im stackoverflow programmer 
[08:00:58] <extern> ROFL!
[08:01:22] <extern> now seriously ... ENOENT is defined 2 because the shell use it as the return value
[08:01:33] <extern> and the return value is 2
[08:01:41] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[08:01:54] <citrons> do they have standard definitions?
[08:01:59] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[08:02:21] <citrons> regardless, I prefer unix-style incomprehensible abbreviations to magic numbers 
[08:02:52] <extern> wenn das leben dir citrons gibt frage nach tequila und salz
[08:03:06] <rcf> citrons: no, they do not. 
[08:03:10] <citrons> mi sona ala e toki ni. o toki kepeken toki pi sona mi
[08:03:18] <extern> citrons: now you talking
[08:03:31] <extern> citrons: no they do not
[08:03:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[08:03:54] <extern> i probably forgot everything i know about computers 
[08:04:32] <extern> well not everything but you know ... fundamental stuff 
[08:04:39] <extern> rcf was right
[08:05:23] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[08:05:40] <extern> but i want him to explain this: if the macros are not returned constant how does errno guarantee to return the same string for every platform
[08:06:40] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[08:06:59] *** Parts: extern (~archer@37.142.174.4) (WeeChat 3.3)
[08:08:06] <rcf> extern: because the developers are sensible and don't use magic numbers, meaning the code will compile and work flawlessly anywhere. 
[08:08:49] <rcf> If you do use magic numbers, you're going to get wildly wrong values especially above 35 as that's where they truly start to diverge. 
[08:09:33] *** Joins: hinata (~snehal@2402:8100:2338:2928:a4fb:6c47:777b:ed8e)
[08:11:20] *** Quits: mahmutov (~mahmutov@37.155.31.39) (Ping timeout: 260 seconds)
[08:15:52] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[08:16:11] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[08:18:59] *** Quits: hinata (~snehal@2402:8100:2338:2928:a4fb:6c47:777b:ed8e) (Ping timeout: 264 seconds)
[08:23:41] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:33:42] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[08:34:23] *** Quits: dcx (~dcx@user/dac) (Remote host closed the connection)
[08:34:42] *** Joins: dcx (~dcx@user/dac)
[08:35:33] *** Quits: johnjay (~pi@192.142.100.50) (Quit: WeeChat 2.3)
[08:35:55] *** Joins: johnjay (~pi@192.142.100.50)
[08:36:27] *** Joins: MrFantastik (~f@c-71-202-124-69.hsd1.ca.comcast.net)
[08:37:52] *** Quits: johnjay (~pi@192.142.100.50) (Client Quit)
[08:38:31] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:39:11] *** Joins: johnjay (~pi@192.142.100.50)
[08:41:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a4fe-4f97-b0f4-b9a3.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:41:49] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Remote host closed the connection)
[08:42:23] *** Joins: ckdCreations (~ckdCreati@147.55.133.140)
[08:46:44] *** Quits: zz1 (~zz@2001:8003:1612:d500:8b3:c0f2:eed8:ff3) (Quit: WeeChat 1.1.1)
[08:51:27] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[08:51:43] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[08:52:50] *** Quits: soapsudsxx (~soapsudsx@141.193.188.155) (Remote host closed the connection)
[08:53:31] *** Quits: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 260 seconds)
[08:54:36] *** Joins: soapsudsxx (~soapsudsx@141.193.188.155)
[08:55:40] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[08:59:10] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:59:39] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[09:01:39] *** Joins: reset (~reset@user/reset)
[09:03:42] *** Joins: HaMsTeRs (~Thunderbi@14-0-228-035.static.pccw-hkt.com)
[09:04:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[09:05:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:08:47] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[09:12:59] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 264 seconds)
[09:13:52] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Changing host)
[09:13:52] *** Joins: asdflkj_sh (asdflkj@user/asdflkj-sh/x-6013523)
[09:14:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:17:18] *** Joins: wtfcode (~Srain@user/wtfcode)
[09:17:31] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:19:55] *** Joins: kobalt (~rsonx@user/kobalt)
[09:21:23] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 264 seconds)
[09:22:37] *** Quits: soapsudsxx (~soapsudsx@141.193.188.155) (Remote host closed the connection)
[09:23:23] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[09:23:43] *** Quits: sysRPL (~sysRPL@ec2-3-131-36-133.us-east-2.compute.amazonaws.com) (Quit: Leaving)
[09:24:33] *** Joins: pucara (~i@181.92.71.111)
[09:27:46] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:30:54] *** Joins: extern (~archer@37.142.174.4)
[09:37:23] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 265 seconds)
[09:37:49] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:8c88:2838:6ccb:5781) (Quit: Leaving)
[09:39:11] *** Joins: digilink (~digilink@user/digilink)
[09:41:58] *** Joins: CaCode (~CaCode@user/cacode)
[09:46:56] *** Quits: HaMsTeRs (~Thunderbi@14-0-228-035.static.pccw-hkt.com) (Quit: HaMsTeRs)
[09:47:36] *** Joins: mrig (~AdiIRC@user/mrig)
[09:50:22] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[09:50:42] *** Joins: kish` (~aqua@user/aqua)
[09:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[09:54:12] *** Quits: extern (~archer@37.142.174.4) (Remote host closed the connection)
[09:56:45] *** Quits: tinyweasel (~weasel@gateway/tor-sasl/tinyweasel) (Ping timeout: 276 seconds)
[09:56:51] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[09:57:18] *** Joins: tinyweasel (~weasel@gateway/tor-sasl/tinyweasel)
[09:58:25] *** Quits: tinyweasel (~weasel@gateway/tor-sasl/tinyweasel) (Client Quit)
[09:58:52] *** Joins: tinyweasel (~weasel@2404:9400:2:0:216:3eff:fee2:347d)
[10:03:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[10:04:58] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[10:08:10] *** Joins: kish` (~aqua@user/aqua)
[10:13:03] *** Joins: NovumDXW (~NovumDXW@183.12.239.113)
[10:14:11] *** Quits: zyweo (~Svew@user/zyweo) (Ping timeout: 264 seconds)
[10:14:19] *** Quits: NovumDXW (~NovumDXW@183.12.239.113) (Client Quit)
[10:14:51] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:f8b1:8c3:ab74:e915)
[10:17:10] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[10:17:31] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[10:17:44] *** Joins: mrig (~AdiIRC@user/mrig)
[10:21:54] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Client Quit)
[10:24:41] *** Quits: kobalt (~rsonx@user/kobalt) (Ping timeout: 245 seconds)
[10:25:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:26:47] *** Joins: brelod (~me@90.244.150.142)
[10:26:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[10:27:46] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[10:27:53] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[10:28:22] *** Joins: meator (~meator@user/meator)
[10:36:36] *** Joins: Optimus (~risto@87.227.237.59)
[10:39:20] *** Joins: kadavul (~vazha@103.165.20.206)
[10:44:26] *** Joins: aradesh (~aradesh@user/aradesh)
[10:47:28] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[10:47:33] *** Joins: mr_ab (~nobody@74-207-237-112.ip.linodeusercontent.com)
[10:47:59] *** Joins: SachieW (~SachieW@240e:e8:fa4f:f7a6:14e1:3de1:6351:2661)
[10:48:25] *** Joins: slidercrank (~slidercra@user/slidercrank)
[10:49:34] *** Joins: kts (~kts@103.73.237.201)
[10:49:41] *** Quits: j0bk (~j0bk@190.19.139.160) (Ping timeout: 245 seconds)
[10:50:13] *** Quits: SachieW (~SachieW@240e:e8:fa4f:f7a6:14e1:3de1:6351:2661) (Remote host closed the connection)
[10:50:39] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[10:52:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 264 seconds)
[10:54:23] *** Joins: V-T60 (~v@91.203.24.166)
[10:54:36] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[10:55:47] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[10:57:31] *** Joins: random-nick (~random-ni@87.116.183.63)
[10:59:52] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[11:00:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[11:00:50] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:02:30] *** Joins: meator (~meator@user/meator)
[11:02:41] *** Joins: Rounin (~david@84.212.130.215)
[11:03:50] *** Quits: V-T60 (~v@91.203.24.166) (Quit: Leaving.)
[11:04:32] *** Joins: LangerJan (~jan@user/langerjan)
[11:06:27] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Remote host closed the connection)
[11:06:45] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[11:07:44] *** Quits: uskerine (32d3@91.191.78.188.dynamic.jazztel.es) ()
[11:07:44] *** Quits: Darkcoal_ (~user@51.158.144.32) (Read error: Connection reset by peer)
[11:08:44] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[11:09:51] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:09:55] *** Joins: v- (~gary@user/ghost)
[11:12:00] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[11:13:22] *** Joins: Darkcoal_ (~user@167.86.132.92)
[11:13:38] *** Joins: jinsun (~quassel@user/jinsun)
[11:15:23] *** Quits: alch (~alch@to-18-93-232.service.infuturo.it) (Ping timeout: 260 seconds)
[11:15:50] *** Joins: alch (~alch@151.82.66.48)
[11:16:15] *** Quits: dld (~dld@2601:197:600:1210:d10e:482c:eb89:99b9) (Ping timeout: 260 seconds)
[11:18:11] *** Joins: kawics11 (~ta@catv-89-134-198-57.catv.broadband.hu)
[11:19:28] *** Joins: dld (~dld@98.217.187.57)
[11:19:32] *** Joins: Hexmind_ (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[11:20:37] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Ping timeout: 258 seconds)
[11:21:24] *** Joins: khoa (~khoa@user/khoa)
[11:21:46] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:f8b1:8c3:ab74:e915) (Ping timeout: 245 seconds)
[11:22:38] *** Joins: kevr (~kevr@user/kevr)
[11:22:46] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 244 seconds)
[11:24:43] *** Joins: CaCode_ (~CaCode@user/cacode)
[11:25:21] *** Joins: serbest (~serbest@user/serbest)
[11:26:09] *** Joins: CaCode- (~CaCode@user/cacode)
[11:27:31] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[11:28:37] *** Quits: kevr (~kevr@user/kevr) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[11:29:23] *** Quits: CaCode_ (~CaCode@user/cacode) (Ping timeout: 260 seconds)
[11:30:10] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[11:30:44] *** Joins: noose (~noose@user/noose)
[11:30:50] *** Quits: kadavul (~vazha@103.165.20.206) (Ping timeout: 260 seconds)
[11:32:50] *** Joins: kadavul (~vazha@103.165.20.165)
[11:35:05] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:36:21] *** Quits: kawics11 (~ta@catv-89-134-198-57.catv.broadband.hu) (Quit: WeeChat 3.2)
[11:39:41] *** Joins: Klinda (~superleag@user/klinda)
[11:40:06] *** Quits: kadavul (~vazha@103.165.20.165) (Read error: Connection reset by peer)
[11:48:36] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[11:52:36] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[11:53:47] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Ping timeout: 264 seconds)
[11:54:41] *** Joins: arinov (~arinov@213.194.126.155)
[11:55:00] *** Quits: kts (~kts@103.73.237.201) (Ping timeout: 250 seconds)
[11:55:55] *** Quits: b1101 (~b1101@pool-100-37-115-53.nycmny.fios.verizon.net) (Quit: b1101)
[11:56:12] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Quit: Leaving)
[11:56:30] *** Joins: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[11:58:14] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[11:58:59] *** Joins: gabriele (~gabriele@user/gabriele)
[12:02:15] *** Quits: gabriele (~gabriele@user/gabriele) (Client Quit)
[12:05:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[12:05:25] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[12:05:48] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:d5ed:f37:f032:e67a)
[12:08:39] *** Joins: plastico (~plastico@neomutt/plastico)
[12:13:51] *** Joins: kts (~kts@103.73.237.194)
[12:14:33] *** Quits: kts (~kts@103.73.237.194) (Client Quit)
[12:14:47] *** Quits: Darkcoal_ (~user@167.86.132.92) (Ping timeout: 264 seconds)
[12:15:00] *** Joins: kts (~kts@103.73.237.194)
[12:16:44] *** Joins: Darkcoal_ (~user@51.158.144.32)
[12:17:17] *** Joins: Nspace (~Nspace@user/nspace)
[12:20:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[12:22:09] *** Joins: earnestly (~earnest@user/earnestly)
[12:23:25] *** Joins: lionkor (~lionkor@200116b80fac8c007285c2fffea63d72.dip.versatel-1u1.de)
[12:30:09] *** Quits: amtrx[m] (~amtrxmatr@2001:470:69fc:105::e0e9) (Quit: You have been kicked for being idle)
[12:34:25] *** Joins: bilbo (~bilbo@host-37-191-190-173.lynet.no)
[12:34:51] *** bilbo is now known as talin
[12:35:14] *** Parts: talin (~bilbo@host-37-191-190-173.lynet.no) ()
[12:36:56] *** Quits: Zenton (~user@user/zenton) (Read error: Connection reset by peer)
[12:38:16] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[12:38:17] *** Joins: Zenton (~user@user/zenton)
[12:39:29] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[12:40:57] *** Joins: Nspace (~Nspace@user/nspace)
[12:41:15] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[12:42:13] *** v- is now known as vaio
[12:42:28] *** Joins: kts_ (~kts@103.73.237.186)
[12:42:39] *** Quits: kts (~kts@103.73.237.194) (Ping timeout: 260 seconds)
[12:42:46] *** Quits: mrig (~AdiIRC@user/mrig) (Remote host closed the connection)
[12:43:00] *** Joins: mrig (~AdiIRC@user/mrig)
[12:43:42] *** Quits: kts_ (~kts@103.73.237.186) (Client Quit)
[12:44:11] *** Joins: kts (~kts@103.73.237.186)
[12:47:11] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 264 seconds)
[12:47:47] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[12:49:33] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[12:50:16] *** Joins: hinata (~hinata@2402:8100:30a5:f35f:e153:55c8:9fd5:5e7d)
[12:52:22] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[12:52:38] *** Joins: karakedi (~eAC53C340@user/karakedi)
[12:54:13] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[12:54:46] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[12:55:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:56:00] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[12:56:00] *** Quits: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c) (Ping timeout: 260 seconds)
[12:59:52] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:02:24] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[13:03:22] *** Joins: Arthuria (~Arthuria@user/arthuria)
[13:03:32] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:03:40] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[13:04:57] *** Joins: kobalt (~rsonx@user/kobalt)
[13:05:11] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[13:07:48] *** Quits: malloy (~jimery@116.30.221.89) (Ping timeout: 250 seconds)
[13:10:14] *** Joins: malloy (~jimery@116.30.221.89)
[13:18:10] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:20:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:21:14] *** Joins: arinov (~arinov@178.240.160.150)
[13:28:17] *** Joins: echoSMILE (uid504326@user/echosmile)
[13:32:10] *** Joins: ozzz (~oz@46.49.41.80)
[13:33:00] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:33:45] *** Joins: csrf (~csrf@user/csrf)
[13:34:09] <ozzz> Hello all! what the heck is stringop-owerflow? I have funct - fn(char * PATH_MAX, char * PATH_MAX) and it points to it, but passed objects have static size of PATH_MAX
[13:35:01] *** Joins: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy)
[13:36:20] <ozzz> please ignore, I found what triggers that
[13:43:22] <stefanos82> out of sheer curiosity, is there any website that lets you test your skills via quizzes, questions, and code samples?
[13:43:25] <kts> Is C Primer Plus by Stephen Prata any good?
[13:43:43] <stefanos82> kts: for newbies? yes.
[13:50:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[13:50:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[13:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[13:56:01] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:57:03] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[13:59:01] *** Joins: Guest6437 (~Guest64@37.189.249.64)
[14:00:15] *** Joins: mahmutov (~mahmutov@37.155.31.39)
[14:00:26] *** Joins: Guest89 (~Guest89@37.189.249.64)
[14:00:40] *** Quits: Guest89 (~Guest89@37.189.249.64) (Client Quit)
[14:01:42] *** Quits: inomoz (~inomoz@176.59.118.101) (Quit: WeeChat 3.3)
[14:02:12] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[14:02:55] *** Quits: hinata (~hinata@2402:8100:30a5:f35f:e153:55c8:9fd5:5e7d) (Ping timeout: 260 seconds)
[14:02:56] *** Quits: Guest6437 (~Guest64@37.189.249.64) (Client Quit)
[14:04:18] *** Joins: cartman (~i.am@191.32.92.1)
[14:05:18] *** Joins: hinata (~hinata@2402:8100:30ac:5bd4:e153:55c8:9fd5:5e7d)
[14:05:50] *** Quits: mahmutov (~mahmutov@37.155.31.39) (Ping timeout: 258 seconds)
[14:14:47] *** Quits: serbest (~serbest@user/serbest) (Ping timeout: 264 seconds)
[14:20:04] <kts> stefanos82: Which books do you recommend?
[14:20:24] <stefanos82> for learning C?
[14:20:47] <stefanos82> as your first language that is
[14:20:56] <gl> ,books
[14:20:56] <candide> See http://www.iso-9899.info/wiki/Books for some useful book recommendations, including free online resources.
[14:21:22] <stefanos82> kts, gl got me ^
[14:23:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:23:10] <Feuermagier> what C function reads into a buffer without having to specify stdin?
[14:23:14] *** Joins: V-T60 (~v@91.203.24.166)
[14:23:21] <Feuermagier> (just like gets)
[14:23:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:26:04] <dave0> oh buffer
[14:26:08] <dave0> scanf can
[14:26:50] <dave0> char buf[100]; if(scanf("%99s", buf) != 1) perror("scanf");
[14:28:12] *** Quits: stefanos82 (~stefanos8@62-169-104.netrun.cytanet.com.cy) (Quit: Leaving)
[14:28:24] *** Joins: alien_lappy (~alien@user/alien)
[14:30:21] <fizzie> %[^\n] is even closer to gets than %s.
[14:32:26] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[14:32:44] <Feuermagier> huge thanks
[14:33:03] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[14:33:59] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[14:38:47] *** Quits: dld (~dld@98.217.187.57) (Ping timeout: 264 seconds)
[14:39:25] <jemius> I would like to hear your opinion on this question: How does it come the ISO did not start merging 5000 features into C, as the C++ comitee did? What held and holds them back?
[14:39:50] <deadk> the fact that C++ exists probably helps
[14:40:39] <deadk> you don't need two languages with the same set of priorities
[14:42:53] <fizzie> They also had the "spirit of C" concept: https://0x0.st/-nPT.txt (quoted from the C99 rationale)
[14:44:39] <Feuermagier> how would I find the pointer to stdin, if I have the base address of libc?
[14:44:42] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[14:45:04] <Feuermagier> or more specific: stdin is at some some location in libc, right?
[14:47:20] <jemius> fizzie, hm, interesting. Good to know they knew what they are going for
[14:47:29] *** Quits: kts (~kts@103.73.237.186) (Ping timeout: 246 seconds)
[14:47:40] <Feuermagier> fizzie, I think I'll have to go for a read(), as I don't have enough space to fit the %[^\n] in. Also I don't think I can transmit the \n, as I am currently transmitting *through* a function that has \n as escape sequence
[14:48:05] <LangerJan> Feuermagier: what exactly are you looking for in regards to stdin?
[14:48:11] *** Joins: kts (~kts@103.73.237.165)
[14:48:12] <jemius> An interesting connected question is who is in charge over a language. There always seems to be an accepted authority
[14:48:28] <Feuermagier> LangerJan, I want to pass stdin to a function. (read() specifically)
[14:49:16] <Feuermagier> as in I need the pointer
[14:49:19] <dave0> Feuermagier: read() is posix and takes file descriptors... stdin is a FILE* and you use c's stdio functions
[14:49:32] <LangerJan> Feuermagier: let me check if FILE* stdin is POSIX or part of regular C...
[14:49:44] <dave0> Feuermagier: read(STDIN_FILENO, buf, size) would be the posix equivalent
[14:50:18] <Feuermagier> is STDIN_FILENO at a static offset?
[14:50:31] <dave0> no, it's a small integer, usually 0
[14:50:43] <dave0> it's a constant from <unistd.h>
[14:50:46] <deadk> it is always 0
[14:50:59] <Feuermagier> oh, so if I pass 0 as read(0,...) it'll work?
[14:51:10] <deadk> stdio and posix io do not work well together, though
[14:51:10] <Feuermagier> huge thx
[14:51:20] <LangerJan> there are a couple of files already open for you, at least under linux. stdin being 0
[14:51:31] <deadk> specifically stdio's buffer can read ahead
[14:52:30] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:53:02] <fizzie> There's also more relevant material (on why C still looks the way it does) in the other principles -- https://0x0.st/-nPa.txt -- too. See in particular the bits that call out explicitly: "The Committee is content to let C++ be the big and ambitious language. While some features of C++ may well be embraced, it is not the Committee's intention that C become C++."
[14:53:25] <fizzie> And: "Unless some proposed new feature addresses an evident deficiency that is actually felt by more than a few C programmers, /no new inventions should be entertained/."
[14:53:55] <LangerJan> Feuermagier: If you want to pass stdin as a variable for reading from, I'd recommend FILE *stdin as defined in stdio.h
[14:54:42] <fizzie> It's not a `FILE *stdin`, it's a macro that expands to an expression that has the type `FILE *`.
[14:55:05] <dave0> Feuermagier: what are you looking for? i personally stick to c's stdio most of the time
[14:55:48] <fizzie> (It *could* be just a simple `extern FILE *stdin` declaration, of course, but it doesn't need to be.)
[14:55:56] <Feuermagier> dave0, I'm exploiting a buffer overflow where I only have a few byte. I'm performing a stack pivot and I need a function to read bytes into my self-made stack
[14:56:10] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[14:56:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[14:56:54] <dave0> aren't buffer overflows passe?
[14:57:22] <fizzie> (Kind of like how `errno` isn't always, or even often, a plain variable declaration, to handle its magical "thread-local before thread-local existed" properties.)
[14:58:26] *** Quits: arinov (~arinov@178.240.160.150) (Ping timeout: 245 seconds)
[15:00:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[15:02:28] *** Joins: seninha (~seninha@user/seninha)
[15:02:29] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[15:03:56] <LangerJan> well, it walks like a duck, it quacks like a duck...:D
[15:04:07] *** Joins: strajder (~strajder@user/strajder)
[15:06:07] *** Quits: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder) (Quit: mcleuder)
[15:06:23] *** Quits: rahl (~rahl@102.114.108.176) (Ping timeout: 264 seconds)
[15:07:57] *** Joins: rahl (~rahl@102.114.127.248)
[15:09:59] *** Parts: Bou (sid274843@user/bou) ()
[15:10:31] *** Quits: wwilly (~wwilly@217.140.99.251) (Quit: Leaving)
[15:12:11] *** Quits: alch (~alch@151.82.66.48) (Read error: Connection reset by peer)
[15:12:11] <sham1> fizzie: well isn't errno simply defined to be a macro and thus it couldn't just be a `_Thread_local int errno` and has to specifically be a macro
[15:12:40] <fizzie> You can have a macro that expands to just an identifier.
[15:12:51] <dave0> #define errno errno
[15:12:51] <fizzie> In fact, it can expand to just the macro name if you like.
[15:12:56] <dave0> ^
[15:13:00] <sham1> Hm
[15:13:21] <fizzie> `stdin` must be a macro equally much, and on glibc expands to `stdin`.
[15:13:57] <sham1> Meanwhile on musl it expands to something else
[15:13:58] *** Joins: Bou (sid274843@user/bou)
[15:14:01] <fizzie> (C11 7.21.1p3: "The macros are -- `stderr`, `stdin`, `stdout` which are expressions of type "pointer to `FILE`" that --")
[15:14:32] <dave0> iirc errno was   *(function())   for a while
[15:14:42] <fizzie> ,expand #include <errno.h> #include <stdio.h> errno stdin // just checking
[15:14:43] <candide> fizzie:  (*__errno_location ()) stdin
[15:14:52] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[15:14:54] <dave0> oh there we go :-p
[15:14:57] <sham1> Well then
[15:15:28] <sham1> So I suppose one could just have something like _Thread_local int _errno; #define errno _errno
[15:15:37] <sham1> If one was doing some standard library stuff
[15:15:41] <dave0> having errno as a global variable was short-sighted imo
[15:15:42] <sham1> And of course extern there
[15:16:10] *** Joins: alch (~alch@mi-18-24-189.service.infuturo.it)
[15:16:23] <dave0> unix was multiprocessing, everything should have been reentrant
[15:16:24] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[15:16:27] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[15:17:15] <fizzie> I mean... qsort doesn't have a user data pointer, asctime/ctime/gmtime/localtime all have their internal static storage, and don't even start with strtok.
[15:17:16] <dave0> threads came later so you can't really blame that
[15:17:42] <sham1> And even outside of the standard, getopt in POSIX is also annoying
[15:18:07] <sham1> A data pointer in qsort and such would certainly have helped with re-entrancy
[15:18:48] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[15:19:17] *** Joins: pulse (~pulse@user/pulse)
[15:20:13] *** Quits: hinata (~hinata@2402:8100:30ac:5bd4:e153:55c8:9fd5:5e7d) (Quit: Leaving)
[15:20:31] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 245 seconds)
[15:21:30] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:22:00] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 265 seconds)
[15:25:59] *** Quits: puke (~puke@user/puke) (Ping timeout: 260 seconds)
[15:27:35] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:7c92:267e:1f12:e7f4)
[15:27:37] *** Joins: arinov (~arinov@213.194.126.155)
[15:28:56] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[15:30:27] *** Quits: freon (~freon@c-73-210-167-38.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[15:31:21] *** Joins: wtfcode_ (~Srain@user/wtfcode)
[15:32:11] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 264 seconds)
[15:33:51] *** Quits: wtfcode (~Srain@user/wtfcode) (Ping timeout: 245 seconds)
[15:33:51] *** wtfcode_ is now known as wtfcode
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:24] *** Joins: puke (~puke@user/puke)
[15:40:40] *** Quits: kobalt (~rsonx@user/kobalt) (Quit: leaving)
[15:41:19] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[15:44:12] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:44:22] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[15:44:24] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Client Quit)
[15:44:30] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[15:44:38] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[15:45:38] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[15:49:34] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[15:50:49] *** Joins: alphabeta (~kilolympu@185.65.135.177)
[15:51:11] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 260 seconds)
[15:52:32] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[15:52:49] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[15:54:41] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[15:54:52] *** Joins: NEYi (~NEYi@109.251.216.38)
[15:56:57] *** Joins: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[16:00:27] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[16:01:09] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:02:10] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[16:04:17] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 264 seconds)
[16:05:38] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:05:40] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[16:06:55] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:07:40] *** Joins: kts_ (~kts@103.73.237.180)
[16:07:46] *** Joins: gravndal (~weechat@user/ravndal)
[16:08:11] *** Quits: kts (~kts@103.73.237.165) (Ping timeout: 264 seconds)
[16:08:52] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:12:15] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:12:38] <markand> lots of things in POSIX are actually awful, ntfw, getopt, too limited make
[16:15:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 258 seconds)
[16:16:15] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[16:16:28] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:17:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[16:18:04] <sham1> TIL about ntfw and ftw
[16:18:10] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[16:19:01] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:19:03] <rindolf> markand: right. but i appreciate its minimalism given html5/* and c++
[16:20:09] <markand> sham1, they are barely usable since you can't pass any user data, forced to use globals
[16:20:11] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:20:21] <sham1> Mmrm
[16:20:41] <sham1> No wonder then. Doesn't seem too hard to make something like that
[16:21:41] *** Joins: dld (~dld@192.91.235.243)
[16:23:50] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:bfbd:574b:6546:cc9e)
[16:23:50] <rindolf> sham1: i wrote https://github.com/shlomif/perl-file-find-object-rule/tree/master/libfilefind/c_glib_based for that
[16:23:51] <candide> Title of rindolf's link: perl-file-find-object-rule/libfilefind/c_glib_based at master · shlomif/perl-file-find-object-rule · GitHub
[16:30:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[16:34:22] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[16:35:28] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:36:22] *** Quits: Darkcoal_ (~user@51.158.144.32) (Read error: Connection reset by peer)
[16:36:59] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[16:40:59] *** Joins: Darkcoal_ (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55)
[16:45:21] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:7c92:267e:1f12:e7f4) (Quit: This computer has gone to sleep)
[16:46:14] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[16:46:15] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:d5ed:f37:f032:e67a) (Ping timeout: 260 seconds)
[16:49:54] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:50:42] <fizzie> `nftw` is particularly infuriating, because it doesn't even have the "it was the olden days, we didn't know any better" excuse. They were *already* changing the `ftw` API and adding a pointer in the callback's signature. It wouldn't have take much to add a caller-specified `void *` too.
[16:51:03] *** Quits: kts_ (~kts@103.73.237.180) (Quit: Konversation terminated!)
[16:53:25] <Jck_true> Oh the horror... Someone did 3 space indentation across half the files in a module... :|
[16:54:00] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[16:54:05] *** Quits: alch (~alch@mi-18-24-189.service.infuturo.it) (Read error: Connection reset by peer)
[16:55:35] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[16:56:39] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[16:57:06] *** Joins: alch (~alch@151.34.52.22)
[16:59:11] *** Quits: Darkcoal_ (~user@2001:16a2:7a46:cb00:5c60:dff:feab:da55) (Ping timeout: 264 seconds)
[16:59:48] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:00:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:00:15] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:bfbd:574b:6546:cc9e) (Quit: Client closed)
[17:00:35] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:00:46] *** Joins: Darkcoal_ (~user@167.86.132.92)
[17:01:17] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Ping timeout: 264 seconds)
[17:02:30] *** Joins: henistein (~henistein@2001:8a0:fc8f:9501:bfbd:574b:6546:cc9e)
[17:02:35] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[17:04:26] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[17:04:27] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 260 seconds)
[17:05:26] *** Joins: johnjay (~pi@192.142.100.50)
[17:06:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80:b505:2e6c:b773:f4d7)
[17:07:02] *** Quits: Inline (~Inline@2a02:908:1252:7a80:b505:2e6c:b773:f4d7) (Remote host closed the connection)
[17:07:40] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:08:49] *** Joins: brad_mssw (~bhouse@2620:134:c001:100:6031:cd8b:8b60:a37a)
[17:11:58] *** Joins: kts (~kts@103.73.237.7)
[17:13:12] *** Joins: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1)
[17:19:09] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:19:21] *** Joins: cferry (~etuel@8.242.205.35)
[17:19:28] <cferry> 0
[17:19:29] <cferry> I happen to have a main loop that processes multiple things. For instance, I have 'timers' that are meant to be run every 1 second, I also have an epoll_pwait() function with a blocking (-1) timeout.
[17:19:31] <cferry> How am I supposed to use sigprocmask if I want to continue running these timers, given that my epoll_pwait will be blocking?
[17:19:34] <cferry> am I supposed to use a thread that calls a signal so I can continue looping? if so, is sigprocmask even thread safe?
[17:19:37] <cferry> Thanks!
[17:21:22] <fizzie> No comment on sigprocmask, but how about driving your timers with a timerfd to integrate them in the epoll_wait loop instead? 
[17:21:23] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:23:06] <cferry> basically timerfd raises a file descriptor, right?
[17:23:17] <cferry> right, I wouldn't need epoll_pwait if so
[17:23:44] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:23:53] *** Joins: Quillbert (~Quillbert@user/quillbert)
[17:24:11] *** Joins: krux02 (~krux02@p200300e817076e008131ec4e024fd61b.dip0.t-ipconnect.de)
[17:24:43] *** Joins: kadavul (~vazha@103.165.21.190)
[17:27:23] <fizzie> It creates a file descriptor that becomes ready for reading at a specified time, yes. (And when read, returns the number of times the associated timer, which might be a one-off or periodic, has expired since last read.)
[17:27:53] <cferry> great. I think this may help. Do you know if I can set timerfd to run every one second?
[17:28:10] <cferry> so, I am basically 'giving' the job to the kernel with timrefd.. is this accurate?
[17:28:14] <cferry> instead of handling it myself
[17:29:08] <fizzie> Yes, you can. And I guess that's a fair way to describe it. Except it won't "run" anything, that's up to your event loop, it just becomes unblocking once a second.
[17:29:11] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[17:29:31] <cferry> right. I understand. However, it will unblock
[17:29:34] <cferry> so I don't really need pwait
[17:29:39] <cferry> thank you very much, fizzie 
[17:29:43] <cferry> this saves tons of time
[17:29:45] <fizzie> (It's also Linux-specific, but then so's epoll.)
[17:29:59] <cferry> is it?
[17:30:04] <cferry> what's the equivalent for BSD systems?
[17:30:13] <sham1> kqueue
[17:30:18] <cferry> I know this
[17:30:28] <cferry> but the equivalent to timerfd on BSD
[17:30:41] <sham1> kqueue
[17:30:46] <cferry> this is basically what needs to be modified https://github.com/beryldb/beryldb/blob/unstable/src/engines/engine_epoll.cpp#L144
[17:30:48] <cferry> ok
[17:32:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:3447:7874:707f:1c0f)
[17:32:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:3447:7874:707f:1c0f) (Changing host)
[17:32:33] *** Joins: skapata (~Skapata@user/skapata)
[17:36:14] <fizzie> The impression I got (though I don't really know kqueue) is that their approach is to define a new API with support for multiple notification sources (file descriptors, signals, AIO, timers...), while the Linux approach has been to turn all of the other sources into file descriptors too (via timerfd, signalfd, eventfd, pidfd, ...) so that the existing fd-oriented interfaces can be used with all of them.
[17:36:50] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:37:22] <cferry> I've been trying to find intervals (unlock every 1 sec) and cannot find great examples
[17:37:28] <cferry> any resource I may dig into?
[17:37:54] *** Joins: quartz (~quartz@user/quartz)
[17:40:06] *** Quits: brad_mssw (~bhouse@2620:134:c001:100:6031:cd8b:8b60:a37a) (Quit: Leaving)
[17:40:36] <omegatron> hmm, a hybrid datatype of Error and Exception .. what would sound better?  Errception or Exceptor?  =D
[17:41:35] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:41:47] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 264 seconds)
[17:42:13] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:42:42] <fizzie> For timerfd, it's literally just a `timerfd_settime(fd, 0, &(struct itimerspec){.it_value={.tv_sec=1}, .it_interval={.tv_sec=1}}, 0)` call, and that'll make the timer's "elapsed events" count increment exactly once a second.
[17:43:48] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:44:45] *** Quits: Quillbert (~Quillbert@user/quillbert) (Ping timeout: 256 seconds)
[17:45:41] <cferry> Thanks!
[17:47:17] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[17:48:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7142-4eba-4b64-53f0.res6.spectrum.com)
[17:50:39] *** Joins: superboot (~agentgasm@user/superboot)
[17:50:56] *** Joins: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr)
[17:52:37] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[17:53:02] *** Joins: mahmutov (~mahmutov@37.155.31.39)
[17:53:35] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[17:53:58] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[17:53:59] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[17:54:51] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 260 seconds)
[17:59:17] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Ping timeout: 258 seconds)
[18:05:21] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[18:06:21] <kurahaupo> omegatron: What do you99,99 consider to be the difference between errors and exception? 
[18:06:35] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:08:29] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 258 seconds)
[18:08:48] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[18:10:54] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[18:12:25] *** Quits: cferry (~etuel@8.242.205.35) (Quit: Leaving)
[18:13:50] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:20:12] <omegatron> aside from my question not to be meant too serious ..., i'm used to: errors can be of variable severity and may be put into a list for delayed handling, while an exception would be an immediate stop of program execution (error of highest order) and bubbling up to the first (matching) handler, if there is any
[18:22:27] <omegatron> therefore they have a lot of common attributes and logic (hence the hybrid datatype), but (can) differ in handling
[18:23:49] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 258 seconds)
[18:24:05] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[18:24:15] *** Quits: kadavul (~vazha@103.165.21.190) (Ping timeout: 260 seconds)
[18:26:11] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 264 seconds)
[18:26:43] *** Quits: lionkor (~lionkor@200116b80fac8c007285c2fffea63d72.dip.versatel-1u1.de) (Quit: quit)
[18:26:57] *** Joins: kadavul (~vazha@103.165.21.190)
[18:26:59] *** Joins: lionkor (~lionkor@200116b80fac8c005742ac9b15b9c555.dip.versatel-1u1.de)
[18:28:18] *** haise01 is now known as haise01_
[18:34:41] *** Quits: mahmutov (~mahmutov@37.155.31.39) (Quit: WeeChat 3.1)
[18:35:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-7142-4eba-4b64-53f0.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[18:35:56] <floatcomplex> asynchronous handling of error conditions sounds like a disaster
[18:37:50] *** Joins: mahmutov (~mahmutov@37.155.31.39)
[18:41:20] <quartz> Hello. I'm trying to fill a linked list with command line arguements (stored in argv), and then print the contents of the list using this interface: https://bpa.st/EGIQ   I wrote this function, https://bpa.st/S2LA however, at line 22, it's telling me I can't dereference a void pointer. 
[18:41:46] <quartz> The pointer should not be void, because argv[i] will point to a char pointer....
[18:42:51] <quartz> Although addFront will accept a void pointer, that is only because it's written that way, for purposes of "abstraction". But the function should convert it to a char * I believe. So why is not making it a char *?
[18:45:30] *** Quits: henistein (~henistein@2001:8a0:fc8f:9501:bfbd:574b:6546:cc9e) (Quit: Client closed)
[18:47:12] <kurahaupo> quartz: Why do you think you need to dereference the data member?
[18:47:38] <quartz> kurahaupo: Because I want to "uncover" what the string pointer is pointing to.
[18:48:35] <kurahaupo> quartz: Really? What type of argument does a %s conversion take?
[18:48:45] <quartz> oh
[18:48:49] <quartz> XD
[18:49:10] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Quit: Leaving)
[18:49:19] <quartz> kurahaupo: Char *. However, gcc still tells me that n->data is a void *, when it SHOULd be a char *!!!
[18:49:26] <Rounin> struct Node *addFront(struct List *list, void *data)
[18:49:37] <quartz> It's passed in as a void *, but it should "convert" to char *
[18:49:41] <Rounin> Evidently, data is treated as a void pointer in other parts of the code
[18:49:43] <quartz> err rather.
[18:50:25] <quartz> Uhh,so my understanding is: addFront will accept data as a void *. However, that is only because ANYTHING can get passed into it.
[18:50:40] <quartz> So if a char * is passed, the void * becomes char *, yes?
[18:50:46] <kurahaupo> quartz: Also, why are you bypassing the abstraction, accessing the data member explicitly?
[18:50:55] <Rounin> You might have to explicitly cast it to a char* ... Though if you then dereference it, you should only get individual chars, since a string already is a kind of char*
[18:51:32] <kurahaupo> quartz: strictly speaking you should assign it back to a char* variable before using printf, but you'll probably be lucky and it will work
[18:51:33] <quartz> kurahaupo: How else would I point to data?
[18:51:59] <kurahaupo> quartz: Use the other functions provided in the liberty
[18:52:06] <quartz> struct has next and data fields
[18:52:08] <kurahaupo> in the library
[18:52:25] <Rounin> Is Node a standard library type, by the way? Since it doesn't seem to be defined anywhere
[18:52:38] <quartz> kurahaupo: Oh popfront haha
[18:52:44] <quartz> HOw stupid of me
[18:52:58] <quartz> Rounin: No it's created in the library
[18:53:22] <kurahaupo> quartz: yes, or traverseList
[18:53:31] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[18:53:56] <kurahaupo> Rounin: Read the other paste
[18:54:06] <Rounin> kurahaupo: I don't see it there either
[18:54:24] <Rounin> No typedefs...
[18:55:13] *** Joins: Akuli (~Akuli@82-203-161-22.bb.dnainternet.fi)
[18:55:57] <kurahaupo> quartz: Any data pointer can be assigned to a void*var without casting, and vice versa. But when you have a varargs function, the type conversions cannot be inferred so you need to convert explicitly
[18:56:21] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 268 seconds)
[18:56:46] *** Quits: dmaroo (~dhruv@2409:4070:2d02:f1a6:c52d:c594:e135:41e1) (Ping timeout: 245 seconds)
[18:56:57] *** Joins: khoa (~khoa@user/khoa)
[18:57:06] <quartz> kurahaupo: So, cast it when I call popFront or traverseList? LIke printf("%s", (char *)popFront(list));
[18:57:20] <kurahaupo> quartz: that would work, yes
[18:57:25] <caze> Assign it.
[18:58:19] <kurahaupo> quartz: However  you probably want to check if it's null first, so you can just assign it to a char* without a cast, and use that
[18:59:31] <quartz> kurahaupo: Do that in the for loop at line 11?
[18:59:32] <kurahaupo> quartz: However there is a deficiency in the API design: you can't tell whether popFront returning NULL indicates the list being empty, or simply that a NULL was inserted into the list
[19:00:01] <quartz> Yeah good point
[19:01:17] <quartz> I think I'll stick with casting :)
[19:01:27] <kurahaupo> Weirdly, isEmptyList is used by popFront, but there's no function by that name
[19:01:54] <quartz> kurahaupo: It's in the mylist.h file, which is just an interface
[19:02:15] <kurahaupo> while(!isEmptyList(list)) printf("%s\n", (char*) popFront (list));
[19:03:16] <kurahaupo> (ugh, swype keyboard inserts spaces around parentheses)
[19:04:19] <caze> quartz: You should assign, to avoid the cast.
[19:04:53] <quartz> caze: So I'd have to change the addFront function?
[19:05:18] <kurahaupo> quartz: No
[19:05:27] <quartz> Uhhhhh.
[19:05:58] <kurahaupo> while(!isEmptyList(list)) { char *p=popFront (list); printf("%s\n", p);}
[19:06:25] <quartz> Ohhh
[19:06:33] <quartz> I'm really slow sorry :(
[19:06:47] <kurahaupo> Or like: iterateList(list, [](void *d){ char*p=d; printf("%s\n", p); });
[19:09:55] <quartz> At line 9 in the main function, gcc is giving me a warning: ‘list’ is used uninitialized in this function  How is it not initilized when I did that at line 7?
[19:11:34] <caze> Your initList can't work.
[19:11:56] <quartz> It just sets list->head = 0;
[19:11:59] *** Quits: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[19:12:07] <quartz> I don't get why it does not work
[19:12:11] <caze> There is no ->head
[19:12:54] <quartz> In the interface there is a structure for struct List{ struct Node *head }
[19:13:21] <caze> quartz: But you don't have a struct List, so you don't have a head member.
[19:13:32] <kurahaupo> quartz: Declare list without * and put & when using it
[19:14:20] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[19:14:22] <kurahaupo> quartz: Is there a documentation file accompanying the .c & .h files?
[19:14:32] <caze> Oh, you were having trouble with pointers before, weren't you?
[19:14:42] <quartz> caze: Yes
[19:14:47] <caze> struct List *list is a pointer. It is not a struct List.
[19:15:00] <quartz> Uhh
[19:15:07] <kurahaupo> quartz: Just because a function accepts a pointer parameter, that doesn't necessarily mean you should declare a pointer variable to use it.
[19:15:07] <caze> Pointers don't have members. structs have members.
[19:15:32] <caze> quartz: Remember, the * means something. It's not just a part of the name.
[19:15:47] <caze> It's an actual operator.
[19:16:04] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[19:16:11] <quartz> So I have to use &list whenever I pass list into a function?
[19:16:24] <kurahaupo> initList(&list); … while(!isEmptyList(&list)) { char *p=popFront(&list); printf("%s\n", p);}
[19:16:58] <quartz> So I can't declare list with *list because it needs to be a struct? Sorry this is the first time I"ve seen something like this
[19:17:02] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:17:08] <caze> quartz: Like - is an operator. If you write: int a = 0; int b = -a; `-a` is not the name of a new variable. It's the variable `a` with the - operator applied to it.
[19:18:04] <kurahaupo> quartz: The functions in the API take a pointer to an existing99,99 object. That can be a variable, or something allocated
[19:18:23] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 264 seconds)
[19:18:48] <kurahaupo> quartz: You make a pointer to a variable by putting & in front of the name of that variable.
[19:18:49] <quartz> kurahaupo: Ahhh Ok that makes sense.
[19:18:53] <floatcomplex> quartz: sorry if this has been said but you could simplify everything including your understanding of it if you eliminate struct List entirely and just have a head pointer
[19:19:25] <caze> I mentioned that weeks ago. But he's following a prescribed API.
[19:19:27] <kurahaupo> floatcomplex: That depends on whether the point is to use an existing API or to write one
[19:20:00] <caze> Stilil, it might be worthwhile to make the tangent.
[19:20:03] <quartz> THe purpose is to both write and use the api
[19:20:11] *** Quits: FrankD (~frankd@69.206.2.53) (Quit: Leaving)
[19:20:23] <floatcomplex> yes, but the existing api is interfering with your understanding of how simple singly linked lists actually are
[19:20:32] <floatcomplex> make it use the dumb api after
[19:20:38] <kurahaupo> quartz: So did you write this linked list library?
[19:20:43] <quartz> kurahaupo: Yes
[19:21:09] *** topside_ is now known as topside
[19:21:10] <floatcomplex> kurahaupo: i think quartz's professor wrote the function prototypes, is the issue
[19:21:13] <quartz> Well, it does work now, but it does not print the command line arguements in reverse :(
[19:21:20] <quartz> floatcomplex: Yes that's true
[19:21:39] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[19:22:33] <kurahaupo> quartz: Why do you reverse the list, when it's already providing a stack structure?
[19:23:38] *** Quits: kadavul (~vazha@103.165.21.190) (Read error: Connection reset by peer)
[19:23:46] <quartz> kurahaupo: I don't understand. I'm reading in the char pointers from argv in the for loop, one by one starting from the first argument. Than I need to reverse the list because the first node will contain the first arguement, etc..
[19:24:06] <quartz> Errr, the first node should contain the last arguement AFTER I reverseList
[19:24:10] <kurahaupo> quartz: Are you sure about that second part?
[19:24:15] <caze> quartz: Do you know what a stack is? Do you know what a queueu is?
[19:24:21] <quartz> caze: Yes, yes
[19:24:30] <caze> quartz: Which do you have?
[19:24:58] <quartz> Uhh
[19:25:17] <kurahaupo> quartz: hint: you're using addFront and popFront
[19:25:35] <quartz> Well, addFront will add to the front of the list, and popfront will popfrom the front, so stack.
[19:26:04] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Quit: WeeChat 2.8)
[19:26:11] <kurahaupo> So before reversing the list, the last element added will be at the front of the list
[19:26:32] <caze> quartz: Is a stack "first in first out", or is it "last in first out"?
[19:26:37] <quartz> Omg :(
[19:26:43] <quartz> I'm so dumb, I'm sorry
[19:26:58] <quartz> caze: stack is first in first out
[19:27:08] <quartz> oh
[19:27:09] <caze> quartz: No. :(
[19:27:10] <quartz> NO
[19:27:21] <quartz> last in first out
[19:27:31] <quartz> the opposite of a queue
[19:27:44] <caze> quartz: Do you have time to do a small diversion exercise?
[19:28:12] <quartz> caze: Of course, sorry I'm just frustrated with myself because these are concepts I should know
[19:28:30] <caze> quartz: Hold on a sec.
[19:28:46] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[19:28:58] *** Joins: arinov (~arinov@178.240.160.150)
[19:35:01] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[19:37:06] <caze> quartz: https://ideone.com/gso42G Looking at main, is it clear to you what is intended to be output?
[19:39:05] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[19:39:58] <caze> quartz: "push" and "pop" are nomenclatures used for stack operations, so it should be a stack.
[19:40:19] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[19:40:37] <quartz> caze: OK
[19:40:49] <caze> quartz: So if 1, 2, 3 are pushed onto the stack, then 3 2 1 should be output as the top of the stack is popped off.
[19:41:00] <quartz> caze: Correct
[19:41:25] <caze> quartz: Okay, now can you fill in the function bodies of the functions push and pop so that it works that way?
[19:41:33] <caze> quartz: And don't change anything else.
[19:42:08] *** Quits: lionkor (~lionkor@200116b80fac8c005742ac9b15b9c555.dip.versatel-1u1.de) (Changing host)
[19:42:08] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:42:11] *** Joins: sedeki (~textual@user/sedeki)
[19:42:33] <caze> quartz: I'll give you a hint: in my solution, push consists of four lines, and pop consists of five lines.
[19:42:33] <quartz> I'll try
[19:42:41] <floatcomplex> pushing and popping to/from a singly linked list is two assignments, and mutates two pointers in the calling scope. it is arguably not a good fit for encapsulating in a function at all
[19:42:47] *** Joins: dmaroo (~dhruv@157.48.148.135)
[19:43:20] <floatcomplex> it's too simple to motivate abstracting away, and forcing it into a function interface becomes the entirety of the complexity
[19:43:38] <caze> two pointers?
[19:43:50] <floatcomplex> well popping does
[19:43:56] <floatcomplex> head, and the pointer being popped
[19:44:09] <floatcomplex> pushing can just take and return head i guess
[19:44:11] *** Joins: Nselm (~Nselm@p200300d56f1cd525b0e8fb95c421ea83.dip0.t-ipconnect.de)
[19:44:30] <kurahaupo> "isempty" should be one line
[19:45:28] <caze> head is the pointer being popped.
[19:45:35] *** Quits: nitro_ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net) (Read error: Connection reset by peer)
[19:45:41] <caze> push doesn't return anything.
[19:45:41] *** Joins: nitro__ (~nitro@c-73-165-183-88.hsd1.pa.comcast.net)
[19:46:02] <caze> Anyhow, the point is to learn pointersl
[19:46:47] <sham1> Also helps when one gets pointers for that, so you get pointers for pointers
[19:47:27] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Quit: Leaving)
[19:49:08] *** Joins: wtfcode_ (~Srain@user/wtfcode)
[19:49:26] <caze> quartz: Let me know if you have any questions.
[19:49:28] <kurahaupo> There are two views of this: either have a library and API that hides malloc+free, and needs an extra object to hold a pointer to each datum, or include a next pointer within the client's struct, and leave it to the client to manage malloc+free
[19:50:03] <quartz> caze: Can I do this when I finish implementing my api?
[19:50:10] <quartz> I just have one last thing to do.
[19:50:41] <caze> quartz: Arguably you should have done this before you started designing your API.
[19:50:41] *** Joins: V-T60 (~v@91.203.24.166)
[19:51:03] <floatcomplex> caze: the problem is quartz didn't design the api, their professor did
[19:51:16] <quartz> caze: True. I noticed you used **head instead of a struct List
[19:51:21] <caze> I thought he did, but the functions were provided.
[19:51:35] <kurahaupo> Really this comes down to modelling who "owns" an object that is put into the stack
[19:51:35] <quartz> caze: The interface was provided, but I made the funcitons.
[19:51:38] <caze> quartz: The ** is not a part of the name.
[19:51:50] <quartz> Oh sorry
[19:51:53] <sham1> kurahaupo: the latter can of course get annoying since now removing the datum from this intrusive single linked list becomes irritating because suddenly the list breaks
[19:51:55] <caze> quartz: I use a struct List ** instead of a struct List.
[19:52:09] <floatcomplex> you mean a struct node ** ?
[19:52:14] <caze> Yes.
[19:52:15] *** Quits: wtfcode (~Srain@user/wtfcode) (Ping timeout: 268 seconds)
[19:52:15] *** wtfcode_ is now known as wtfcode
[19:52:42] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[19:53:09] <kurahaupo> The problem with struct node** rather than struct list* is that the former is harder to extend to add a tail pointer, to make a queue
[19:53:24] <floatcomplex> so don't
[19:53:28] *** Joins: dcreator (~kjell@208.92-221-37.customer.lyse.net)
[19:53:52] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[19:54:03] <floatcomplex> the API of functions that operate on this data structure should not dictate that the data structure itself be artificially complicated
[19:54:07] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[19:55:13] <kurahaupo> So it depends why you're using a linked list. If you're using it because you want a stack, then fine. But if it's merely an extensible store that can remove an item from the middle, or can be iterated, then the struct list* abstraction may be more suitable
[19:55:28] *** Joins: rgrinberg (~textual@190.113.111.74)
[19:55:58] <caze> Anyhow, the point is to learn pointers.
[19:56:28] <kurahaupo> It's worth considering having different libraries that do and don't manage notional ownership
[19:56:50] <caze> And if necessary, to develop the vocabulary for linguistic translation of what each operation does.
[19:57:04] <floatcomplex> ...idk what that means but if the point is there is no one linked list implementation that perfectly fits any two use cases then yes that's true
[19:57:21] <caze> Which I will provide when I give him my solution.
[19:59:24] <quartz> I just need to implement one more thing and I'm done. The main function is suppose to print the command line arguements in reverse AND search for the word 'dude'.
[20:00:07] <quartz> If it finds 'dude' it says so after it prints the command line arguements.
[20:00:57] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[20:01:11] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[20:01:34] <kurahaupo> I would just iterate directly over argv, without building a separate data structure
[20:01:40] <floatcomplex> ^
[20:02:05] <floatcomplex> this entire thread can be distilled down to "common sense says do one thing but quartz's homework is to do another"
[20:02:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Remote host closed the connection)
[20:02:20] <quartz> Yeah I have to use the linked list :)
[20:02:46] <quartz> Yeah I thought about just iterating over argv, but directions say to use a linked list
[20:02:54] <floatcomplex> learning how to use a singly linked list is very powerful
[20:03:09] <floatcomplex> learning how to do it via some function prototypes your idiot professor wrote should not in any way inform your future practice
[20:03:53] <floatcomplex> the thing with the tail pointer kurahaupo alluded to is also very important, but even then i wouldn't encapsulate it in a struct just for the purpose of passing it to/from a function that doesn't exist anyway
[20:03:53] *** Joins: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c)
[20:04:06] <sham1> Meh, all exercises like that are going to be at least somewhat contrived
[20:04:10] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[20:04:20] <quartz> If I wanted to just traverse the list using traverseList, could I just pass in printf, because I need it to print the data.
[20:04:24] <floatcomplex> sham1: yes but i don't want quartz to write future linked lists this way, is my point
[20:05:05] <sham1> Of course
[20:05:14] <smlavine> Are you using the POSIX insque()/remque()?
[20:06:35] <kurahaupo> smlavine: No, this is about intra process data structures, not between processes
[20:07:04] <floatcomplex> i would imagine that most code using insque/remque "because it's there" is spending more effort to do so than it would take to just inline the needed logic
[20:07:55] <floatcomplex> i would also imagine that most code using doubly linked lists doesn't need to
[20:08:58] <sham1> You'd hope it'd be for the O(1) insertion and remove
[20:09:05] <kurahaupo> smlavine: oh sorry, those functions. ignore me
[20:09:37] <sham1> But yeah, I can imagine people "abusing" them needlessly
[20:09:49] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[20:10:00] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:10:01] *** Quits: PamiPetteri (leet@user/pamipetteri) (Quit: leaving)
[20:10:04] *** Quits: V-T60 (~v@91.203.24.166) (Ping timeout: 265 seconds)
[20:10:13] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[20:10:37] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[20:10:49] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[20:10:57] *** Quits: Nselm (~Nselm@p200300d56f1cd525b0e8fb95c421ea83.dip0.t-ipconnect.de) (Quit: Client closed)
[20:11:35] <quartz> kurahaupo: Sorry to bug you again, but in the function traverseList(struct List *list, void (*f)(void *)) I'm not sure what to pass into the second parameter to get it to print the values of the linked list
[20:11:57] <quartz> I can't see printf working here, so I'd have to write my own function?
[20:12:15] <sham1> Yes, you'd write your own function
[20:12:31] <quartz> AHhh so it's easier to just iterate over the list and just use printf myself haha
[20:12:36] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[20:12:52] <kurahaupo> quartz: Use an inline closure like I suggested before
[20:13:05] <sham1> C doesn't have closures
[20:13:35] *** Quits: lllh (~llh@198.48.244.21) (Ping timeout: 264 seconds)
[20:14:02] <sham1> Anyway yeah. A lot of the time libraries that have these kinds of libraries provide some kind of a macro for iterating across lists. For example I know that the Linux kernel does
[20:14:34] <floatcomplex> but the definition of the macro is going to be more complicated than just doing what you need to do in any particular situation
[20:14:49] <floatcomplex> using it might even be more complicated, in some cases
[20:15:15] <floatcomplex> for (struct node * this = head; this; this = this->next) { /* printf some member of "this" */ }
[20:15:17] <caze> void print(void *s) { char *str = s; printf("%s", str); }
[20:15:18] <floatcomplex> done
[20:15:29] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (Quit: leaving)
[20:15:55] <caze> traverseList(list, print);
[20:16:13] <kurahaupo> 70 minutes ago
[20:16:18] <floatcomplex> that's already two lines of code and you haven't written traverseList() yet :)
[20:16:33] <caze> He already wrote traverseList.
[20:16:41] <floatcomplex> does i work tho
[20:16:45] <kurahaupo> floatcomplex: traverseList is already in the API
[20:16:47] <caze> dunno
[20:16:58] <caze> He never provided the headers to make it compile.
[20:17:04] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:17:20] <quartz> I can if you really want
[20:17:52] <kurahaupo> sham1: Perhap "closure" is the wrong word, but since C17 it definitely does have inline functions
[20:18:07] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:18:12] <sham1> Does it now
[20:18:43] <kurahaupo> err, I mean inline in the sense of written inline, not generating inline code 
[20:19:24] <sham1> Yeah, you mean a lambda
[20:19:47] <caze> I have no idea what you mean. Just write the function.
[20:20:20] <sham1> Well if that's the case then I'd be happy to receive a link to the relevant part of the standard because I think that's BS. C17 didn't add any new features over C11
[20:20:57] *** Joins: dcreator (~kjell@208.92-221-37.customer.lyse.net)
[20:20:57] <sham1> You're maybe thinking of the standards proposal of having lambdas in C but that's just a proposal still
[20:21:08] *** Joins: Klinda (~superleag@user/klinda)
[20:21:23] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[20:21:53] *** Joins: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de)
[20:22:58] *** Joins: luckyxxl (~luckyxxl@194.36.25.58)
[20:23:17] <Klinda> hello. usually is better to use malloc instead for a static one? if yes, why? cause if you define a static one you could have less space but still the program execute?
[20:23:32] <sham1> A static ehat
[20:23:34] <sham1> What
[20:23:39] <Klinda> a static buffer
[20:23:49] <caze> Static means you can only have one.
[20:23:56] <caze> A singleton.
[20:24:02] <Klinda> ?
[20:24:06] <sham1> Well using a malloc for the buffer means that you can have multiple and they can have many sizes yeah
[20:24:07] <caze> Be sure you really need a singleton.
[20:24:23] <caze> ? what ?
[20:24:24] <Klinda> what do you mean by that?
[20:24:32] <kurahaupo> Klinda: There is no "usually", it depends on what the program has to use
[20:24:33] <caze> By what?
[20:24:44] <Klinda> 18:54] <sham1> Well using a malloc for the buffer means that you can have multiple and they can have many sizes yeah
[20:24:59] <sham1> Which part is unclear
[20:25:20] <kurahaupo> Klinda: "multiple" = "multiple buffers"
[20:25:35] *** Joins: karakedi (~eAC53C340@user/karakedi)
[20:25:41] <Klinda> if you have char  buf[1024]; vs the malloc one, what does it change?
[20:25:44] <sham1> If you use malloc for your buffers, you can have more than one buffer and they can have distinct sizes
[20:25:51] <sham1> That's not static
[20:25:58] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:26:13] <kurahaupo> Klinda: For a start, what happens if the thing won't fit in 1024 bytes?
[20:26:18] <smlavine> For example, reading in a file, you can use ftell() to find out the length of the file and then malloc a buffer based on that. With a static buffer, you're stuck with the size you choose at compile-time (unless you use VLAs)
[20:26:28] <Klinda> it will create a buffer overflows
[20:26:38] <sham1> But sure. The difference is that char buf[1024] is allocated in automatic storage, while malloc is in the heap
[20:26:45] *** Quits: wtfcode (~Srain@user/wtfcode) (Read error: Connection reset by peer)
[20:26:50] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:26:55] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[20:26:57] *** Joins: kish` (~aqua@user/aqua)
[20:27:12] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:27:37] <kurahaupo> Klinda: So what are you trying to discover with your question? 
[20:27:37] *** Joins: rgrinberg (~textual@190.113.111.74)
[20:27:43] <sham1> buf can only have the size of 1024 * sizeof(char) so 1024 bytes. It cannot change but on the plus side, you know its size at compile-time, since in this case it's not a VLA
[20:27:50] <Klinda> I read that is not sure that char buf[1024]; will be stored exactly, but with malloc you can check if the pointer is null
[20:28:04] <caze> quartz: Here's my solution when you're ready https://ideone.com/k51TXg
[20:28:30] <quartz> caze: I wanted to do the problem, but OK. I'm still working on this assignment, it's almost done.
[20:28:35] <caze> sizeof(char)
[20:28:38] <kurahaupo> Klinda: With a static array you can be guaranteed that it won't be NULL
[20:29:02] <caze> quartz: Try it before you look at my solution. I'll be afk for a bit.
[20:29:03] <kurahaupo> (Assuming the program can launch in the first place)
[20:29:09] <sham1> caze: I know, I know
[20:29:35] <caze> I'm just trying the bot trigger.
[20:29:48] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[20:29:51] <kurahaupo> sham1: Right, lambdas will be C2X not C17
[20:30:07] <dcreator> Klinda: char buf[1024] will create an array of 1024 bytes, either on stack (if called from function) or at a fixed position in memory at program start if done outside a function. malloc asks the OS to allocate the specified amount of memory, and return NULL if thats not available.
[20:30:17] <sham1> I mean I'd hope so, but I'm not sure
[20:30:20] *** Joins: novns (~novns@user/novns)
[20:30:39] <floatcomplex> don't assume your call stack is more than about 32 kB unless you have specifically taken steps to ensure that it is. putting big arrays in automatic storage often counts as making such an assumption
[20:31:04] <Klinda> buf[1024]; will never fail?
[20:31:10] <floatcomplex> it will never fail at that time, no
[20:31:13] <caze> dcreator: static allocation can be done from within functions.
[20:31:25] <dcreator> caze: I know, by using the static keyword
[20:31:26] <floatcomplex> Klinda: it might segfault when you access the first member of it
[20:31:50] <nomagno> Wait wait wait, lambdas?
[20:31:58] <kurahaupo> Klinda: If it's static, yes. but if it's auto no, that's not guaranteed
[20:32:01] <floatcomplex> Klinda: or even when you call the function containing it
[20:32:10] *** Quits: larry87 (~quassel@98.40.245.193) (Ping timeout: 260 seconds)
[20:32:36] <Klinda> why does it happens?
[20:32:47] <floatcomplex> Klinda: because it's on the call stack
[20:33:06] <floatcomplex> Klinda: and if the call stack grows down into memory not allocated for it, you will get a segfault when you derefence that memory
[20:33:07] <Klinda> if there is no space in the stack, boom?
[20:33:23] <kurahaupo> exactly
[20:33:29] <Klinda> so is always better use malloc?
[20:33:33] <kurahaupo> no
[20:33:50] <kurahaupo> Klinda: There are THREE options, not two
[20:34:16] <floatcomplex> if you know your application needs one instance of a given buffer of a certain size known at compile time, make it static
[20:34:36] <kurahaupo> (technically 4, if you count thread local, but that's essentially static)
[20:34:42] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[20:34:49] <floatcomplex> sparkling static
[20:36:07] <Klinda> but if there is not enough space for the stack to do buf[1024] and attacker can exploit it by doing a buffer overflow? 
[20:36:11] <Klinda> what are the options?
[20:36:41] <kurahaupo> Klinda: You need to be aware of both what the standard guarantees, and what your system guarantees. The C standard doesn't guarantee much for stack space, but your compiler will almost certainly have ways of ensuring that sufficient space is available
[20:36:41] <floatcomplex> ...can you spell out your threat model from the top
[20:38:18] <Klinda> it's just for accademic stuffs, don't worry, I am studiying C 
[20:38:30] *** Quits: arinov (~arinov@178.240.160.150) (Ping timeout: 268 seconds)
[20:38:41] <kurahaupo> Klinda: Those are two mutually exclusive threats: either there's not enough stack space, and the program dies when you call the function (before even touching the buffer) OR you have a buffer but the attacker overflows it because it's a fixed size and you've written poor code that doesn't cope with that
[20:38:49] <Klinda> I don't really understand what you are sayiing, if I don't apply it
[20:39:38] *** Quits: ckdCreations (~ckdCreati@147.55.133.140) (Read error: Connection reset by peer)
[20:39:54] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[20:40:15] <kurahaupo> Klinda: If there's not enough stack space then you have no buffer at all, not just a small buffer
[20:40:44] <Klinda> there will be a over-read buffer overflows
[20:40:45] <Klinda> :D
[20:40:47] <kurahaupo> Stack space is rarely a problem in practice
[20:41:17] <kurahaupo> Klinda: Buffer overruns have nothing to do with where the buffer us stored.
[20:41:26] <kurahaupo> *is
[20:41:39] <floatcomplex> kurahaupo: more common than you'd think
[20:41:50] <mcf> kurahaupo: there is a proposal for lambdas in c23, but it's still not clear if they will make it in or not. the june 2021 minutes deferred n2736 to the next meeting, and the response to n2738 was "maybe we want lambdas but not along the lines of N2738"
[20:41:53] <kurahaupo> Klinda: Why would you write code that is so poor that a buffer anywhere could be overrun?
[20:41:56] <floatcomplex> (library code making bad assumptions about how much stack space is available)
[20:42:40] <Klinda> I mean if you suppose to have 1024 bytes, you can just use these 1024, imagine if you have less, 50, the behiaviour is not controlled
[20:42:58] <kurahaupo> Klinda: Why would you have less?
[20:43:18] <Klinda> if you use buf[1024] and the stack is full
[20:43:24] <Klinda> maybe it allocate 50
[20:44:02] <kurahaupo> Klinda: In that case the most likely outcome - indeed the only one I've ever seen - is that the program crashes upon entry to the function.
[20:44:08] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[20:44:18] <floatcomplex> Klinda: yeah it doesn't work that way
[20:44:34] <kurahaupo> "maybe it allocate 50" is only a theoretical outcome. It never works that way in practice
[20:44:44] <floatcomplex> "allocating 1024 chars on the call stack" literally means decrementing the stack pointer by 1024 more bytes than it was going to already for that stack frame
[20:44:53] *** Joins: serbest (~serbest@user/serbest)
[20:45:37] <floatcomplex> there is no bounds checking on that decrement, nor would it make decisions like that about which variable in the frame to not allocate all desired space for if there was
[20:45:52] <kurahaupo> I'm pretty sure 1024 bytes is smaller than 32 KiB
[20:46:02] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:46:24] <floatcomplex> kurahaupo: yeah but there are depressingly common cases where both the recursion depth and the size of the allocation per recursion are attacker controlled
[20:46:28] <Bou> unless you go like >30 levels deep, so don't put a char[1024] in recursive functions and you're good
[20:47:08] <sham1> In that case you'd reuse the buffer if you can
[20:47:36] *** Joins: rgrinberg (~textual@190.113.111.74)
[20:48:01] <khoa> I missed the previous part of the discussion. What is the question again ?
[20:48:03] *** Joins: fossforus (~stan@99-173-128-32.lightspeed.rlghnc.sbcglobal.net)
[20:48:23] <kurahaupo> Klinda: What is the buffer for, and how long does the data in it have to live?
[20:48:32] <floatcomplex> khoa: Klinda is wondering what happens when a stack buffer allocation fails
[20:49:17] *** Quits: alphabeta (~kilolympu@185.65.135.177) (Quit: Quitting IRC :()
[20:49:31] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[20:50:13] <khoa> Segfault ?
[20:50:20] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:50:34] <floatcomplex> upon entry to the function containing the buffer, yes
[20:50:35] <khoa> What else can the system do aside from crashing
[20:50:57] <floatcomplex> or when the first element is accessed
[20:51:08] <floatcomplex> or an element of sufficiently low index within the array
[20:51:27] <Klinda> I mean if the program crash cause it can't allocate these 1024 bytes, there is no reason to think then a denial of service only happen, but if it execute for example a[50], this would fail, maybe you will get portion of other memory stuffs
[20:52:05] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[20:52:09] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[20:52:14] <Klinda> than*
[20:52:43] <sham1> khoa: it could technically resize the stack
[20:53:35] *** Quits: AmR (~AmREiSa@156.199.244.83) (Ping timeout: 246 seconds)
[20:53:38] <khoa> sham1: But he's talking about an array on the stack
[20:53:46] *** Joins: strajder (~strajder@user/strajder)
[20:53:54] <sham1> Yes? And?
[20:54:05] <quartz> kurahaupo: Sorry to bother you again. I'm suppose to make the program find the word 'dude' in the linked list structure. I want to use the findNode function, and I'm passing strcmp into the last parameter of findNode. gcc is giving me a warning about strcmp not being the correct type, I can't seem to figure out how to cast it.
[20:54:12] <khoa> Well actually yeah you're right
[20:54:14] <quartz> This is what I wrote for the main function: https://bpa.st/N34Q
[20:54:29] <sham1> If the stack is too small to contain the buffer, the system can either have the thing crash or increase the stack size
[20:54:46] <kurahaupo> quartz: you don't cast a function pointer
[20:55:07] <sham1> On POSIX you can, to a void pointer
[20:55:15] <floatcomplex> right but don't
[20:55:30] <kurahaupo> quartz: rather, you supply a wrapper function with the correct signature that calls the desired function
[20:55:32] <quartz> But my professor says you can
[20:55:48] <quartz> Uhhh
[20:55:48] <khoa> What is the signature of findNode ?
[20:55:49] <floatcomplex> quartz: your professor says a lot of things
[20:55:55] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[20:55:55] *** Quits: alch (~alch@151.34.52.22) (Ping timeout: 260 seconds)
[20:56:07] <sham1> But yeah, dont
[20:56:18] <quartz> khoa: struct Node *findNode(struct List *list, const void *dataSought, int (*compar)(const void *, const void*))
[20:56:47] <kurahaupo> quartz: Most times you see a cast, there's a strong chance that undefined behaviour will be invoked
[20:57:12] <sham1> Or you're narrowing, which might technically also be UB
[20:57:30] *** Joins: alch (~alch@151.34.59.227)
[20:57:56] <quartz> Uhhh, this is weird. My professor says it's possible to cast the callback function, but than apparently you can't.
[20:57:56] <khoa> quartz: Maybe wrapper for strcmp
[20:58:10] <quartz> khoa: Yeah we never studied that yet haha
[20:58:14] <quartz> It sounds too advanced.
[20:58:15] <kurahaupo> quartz: There is no guarantee that a void* parameter and a char* parameter will be passed to a function in a compatible manner
[20:58:40] <quartz> I think maybe, for the purpose of this assignment, that casting will be appropriate here?
[20:58:43] <floatcomplex> wtf
[20:58:44] <floatcomplex> no
[20:58:48] <quartz> OK
[20:58:54] <floatcomplex> you write a function that takes the expected parameters
[20:59:06] <khoa> quartz: strcmp takes char const *, char const *. compar takes const void *, const void * => Warning
[20:59:07] <floatcomplex> then within that function you cast the two void * to whatever they need to be
[20:59:11] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 264 seconds)
[20:59:17] <khoa> If you just care about passing then write a wrapper to cast that thing
[20:59:22] <floatcomplex> ^
[20:59:33] <floatcomplex> you don't cast the function pointer itself though
[20:59:34] <khoa> Note that everyone else is warn you for a reason though
[20:59:43] <khoa> *warning
[20:59:48] <quartz> OK, so forget about using findNode hah
[20:59:54] *** Joins: AmR (~AmREiSa@156.199.244.83)
[20:59:57] <kurahaupo> quartz: Your specific compiler might allow this as an extension. This should be documented in your source code if you rely on it
[21:00:01] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:00:05] <floatcomplex> right but none of this is necessary
[21:00:10] <sham1> It will most likely just do a tail call anyway
[21:00:11] <floatcomplex> there is no reason to want to cast the function pointer
[21:00:26] <sham1> So a wrapper is the correct thing
[21:00:30] <kurahaupo> quartz: Why not just provide a suitable search function?
[21:00:33] <floatcomplex> you just write a one line function with the void pointer arguments and then call something that expecfts cahr pointer arguments, within it
[21:00:59] *** Joins: magla (~gelignite@55d48754.access.ecotel.net)
[21:01:30] <kurahaupo> If your professor quibbles, point to the C standard
[21:01:32] <quartz> kurahaupo: OK I'll try that
[21:01:40] *** Joins: kurfen (~kurfen@45.152.181.134)
[21:01:42] <quartz> Hahah, we've never talked about the C standard
[21:01:45] <quartz> Just K&R
[21:01:56] <Klinda> so in the end you can use also buffer[1024]; instead of malloc( ), if you know that the size of the stack is not full?
[21:03:51] <khoa> quartz: Again, just write a 2-line wrapper if you don't want to dive into the whole function signature thing
[21:04:08] *** Joins: phao (~phao@2804:d45:8e7a:de00:d8c8:7412:bda7:287b)
[21:04:19] <khoa> Klinda: They are 2 fundamentally different things though
[21:04:36] <khoa> But yes if you really need to, a static buffer is fine
[21:05:10] <Klinda> I know the difference one is static and malloc is dynamic 
[21:05:29] *** Joins: rlvdv (~rlv@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93)
[21:05:33] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:05:40] *** rlvdv is now known as rdv
[21:05:49] <khoa> Cool. Then the answer is yes then
[21:06:09] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[21:06:10] *** Quits: rdv (~rlv@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93) (Client Quit)
[21:06:13] <sham1> A static buffer is of course nice in libraries because sometimes you simply don't want to heap allocate in a library
[21:06:25] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[21:08:35] <Klinda> so I mean you can say malloc is more safe cause if the stack is full, is there a problem?
[21:08:52] *** Joins: seninha (~seninha@user/seninha)
[21:09:47] <sham1> Well in some environments heap allocation is frowned upon if not outright forbidden, although you can easily tell if you're in such an environment
[21:09:51] <khoa> Eh that's a bit too forced
[21:10:11] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 258 seconds)
[21:10:14] <floatcomplex> there are situations in which malloc() is entirely reasonable but free() is not
[21:10:23] *** Quits: MrFantastik (~f@c-71-202-124-69.hsd1.ca.comcast.net) (Remote host closed the connection)
[21:11:10] *** Quits: kurfen (~kurfen@45.152.181.134) (Quit: WeeChat 2.3)
[21:11:20] <khoa> It's safe to say that static array is safe
[21:11:49] <sham1> static _Thread_safe
[21:12:24] <sham1> _Thread_local even
[21:12:54] <khoa> Sure
[21:13:04] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[21:13:23] <khoa> Also I didn't know that _Thread_safe is a keyword
[21:13:28] <khoa> Cool
[21:13:31] <floatcomplex> be a lot cooler if it was
[21:13:32] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[21:14:29] *** Quits: mahmutov (~mahmutov@37.155.31.39) (Ping timeout: 264 seconds)
[21:14:36] <sham1> No, it's just a thpo
[21:14:41] <sham1> Typo
[21:14:42] <khoa> Indeed
[21:15:20] *** Quits: Inline (~Inline@2a02:908:1252:7a80:2afe:2298:5e1:399c) (Ping timeout: 260 seconds)
[21:15:38] *** Quits: luckyxxl (~luckyxxl@194.36.25.58) (Quit: bye)
[21:15:43] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4445:606a:d860:1735)
[21:17:28] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 258 seconds)
[21:20:35] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:21:35] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 260 seconds)
[21:22:15] *** Joins: mahmutov (~mahmutov@37.155.18.23)
[21:23:36] *** Joins: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93)
[21:24:59] *** Joins: V-T60 (~v@91.203.24.166)
[21:27:31] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:27:38] *** Quits: BinarySavior (~BinarySav@idlerpg/player/BinarySavior) (Quit: BinarySavior has dropped the mic)
[21:28:00] *** Joins: BinarySavior (~BinarySav@idlerpg/player/BinarySavior)
[21:29:47] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:59] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 264 seconds)
[21:31:29] *** Joins: rgrinberg (~textual@190.113.111.74)
[21:32:06] *** Quits: derjanni (~textual@p4ff808a3.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[21:33:26] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[21:33:29] *** Joins: shivesh (~shivesh@user/shivesh)
[21:34:07] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[21:35:52] *** Joins: Famine_ (~Famine@user/famine)
[21:36:48] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Ping timeout: 276 seconds)
[21:38:23] <caze> Okay, just ignore everything I said about singletons.
[21:38:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:39:06] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[21:39:15] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 260 seconds)
[21:40:08] <quartz> Sorry to bother everyone again, but I'm not sure how to change this function so that it will print 'dude not found' if it's not found in the linked list. I wrote this function which works only if dude is found in the linked list https://bpa.st/FRGA
[21:40:17] <quartz> I'm so close and it's so irritating 
[21:40:38] <quartz> Or I can write a function with return statements right?
[21:40:41] <pragma-> quartz: so, like... when it reaches the end of the list without finding anything... like...
[21:41:14] *** Quits: rlv (~user@2a02:a03f:8bd6:bc00:5ae4:c060:7d3d:bd93) (Remote host closed the connection)
[21:41:44] <fizzie> You can, but you can also have more than one return statement in `main` as well, given that you don't need to do anything else after printing "dude found".
[21:42:34] <quartz> if(isEmptyList(&list) && (strcmp(d, str) != 0)) printf("dude not found"); ?
[21:43:02] <quartz> fizzie: Oh yeah didn't think of that
[21:43:38] <fizzie> So if you bail out as soon as you've found your dude, if you ever reach whatever's after the last while loop you'll know no dudes were found.
[21:43:58] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[21:44:01] <floatcomplex> mans: 1
[21:44:15] <quartz> I think main should return 0 though, in terms of the assignment.
[21:44:28] <fizzie> You can have two `return 0;` statements.
[21:44:37] <fizzie> Not saying you *have* to do it like that, just saying it's possible.
[21:45:41] <fizzie> Other typical alternatives would include a `bool dude_found = false;` flag, or possibly `int dude_found = 0;` if you don't believe in booleans (many don't).
[21:47:01] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[21:48:36] <quartz> fizzie: Yeah, thanks
[21:48:54] <quartz> kurahaupo: Thanks for your help by the way :)
[21:49:55] *** Joins: pulse (~pulse@user/pulse)
[21:49:58] <sham1> I don't get why people would use ints as booleans specifically. You might as well use _Bool if you're ever going to have either 0 or 1 as a value
[21:50:23] <sham1> C99 was two decades ago and a lot of projects seem to use it so there seems to be really no excuse
[21:50:27] <quartz> I thought C does not have bools.
[21:50:39] <floatcomplex> it does but they're kinda pointless
[21:50:57] <fizzie> As of C99 it does, with a keyword called `_Bool` and a header called <stdbool.h> that defines a macro `bool` that expands to `_Bool`.
[21:51:42] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:51:58] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[21:52:33] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[21:52:57] <fizzie> The _Bool type does have an amusing property in that while it's considered one of the unsigned integer types (C11 6.2.5p6), it also is a special case of arithmetic conversions such that anything that compares unequal to 0 becomes 1 when converted to _Bool.
[21:53:12] <quartz> BRB
[21:53:20] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[21:53:26] <fizzie> ,cc int a = 0.1; bool b = 0.1; printf("%d %d", a, b);
[21:53:29] <candide> fizzie: 0 1
[21:53:33] <caze> need more mangs
[21:54:04] <pragma-> if C automatically consolidated all _Bools into an int the way we used to manually do it...
[21:54:18] <sham1> What, bit packing?
[21:54:58] <pragma-> yes, bit flags
[21:55:17] <sham1> How would a pointer to a bool work then
[21:55:39] <pragma-> but why
[21:56:16] <fizzie> Off-topic trivia: C++ std::vector<bool> is exempt from some of the guarentees std::vector<T> for any other type has, just to allow that.
[21:56:49] <sham1> It'd be different if C pointers were more like Ada accessors, but they're not
[21:58:19] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[22:01:18] *** Joins: node1 (~node1@user/node1)
[22:01:23] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[22:01:31] *** Joins: sonny (~sonny@8.6.144.238)
[22:07:50] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[22:09:55] <kurahaupo> sham1: habit. For 40 years there was no "bool" (or "_Bool") and "int" was the idiomatic way to write it.
[22:09:58] <pragma-> can just add language saying that you can't take the address of a bool
[22:10:02] * pragma- shrugs completely indifferently
[22:10:49] <pragma-> point is, bools would have been more useful if they automatically packed into ints. bitfields, too.
[22:11:43] <kurahaupo> There's no particular reason why a bool* couldn't be 3 bits wider than a char*
[22:11:49] <pragma-> bitfields do have some language about adjacent ones
[22:12:21] <floatcomplex> i wouldn't want my compiler assuming i cared more about saving a few bytes than not thrashing the cache with a bunch of RMW's
[22:12:33] <sham1> MMhm
[22:12:57] <kurahaupo> huh? Saving bytes is still useful because it avoids cache thrashing
[22:13:14] <kurahaupo> well, it can99,99 avoid it, sometimes
[22:13:19] <sham1> ,cc register _Bool bs[8];
[22:13:22] <candide> sham1: no output: bs = {<optimized out>, <optimized out>, <optimized out>, <optimized out>, <optimized out>, <optimized out>, <optimized out>, <optimized out>}
[22:13:32] <sham1> I wonder if that would get optimized into a single byte
[22:14:30] <kurahaupo> Some CPUs have one or more single bit "registers" (normally called "flags" rather than "registers")
[22:15:00] <kurahaupo> sham1: And indeed it could, since you can't take the address
[22:15:53] <sham1> Oh nevermind, you couldn't assign to them
[22:16:18] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[22:16:19] <sham1> "Address of register variable 'bs' requested" when I try to index into one
[22:16:43] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) ()
[22:17:47] *** Quits: echoSMILE (uid504326@user/echosmile) (Quit: Connection closed for inactivity)
[22:17:59] <sham1> So it seems that an array of register _Bool is useless
[22:18:37] <sham1> Err, register array of _Bool if cdecl is to be believed
[22:20:24] <floatcomplex> kurahaupo: imagine a situation where 32 threads are each setting one of a vector of bool's when they are done doing something
[22:21:22] <kurahaupo> floatcomplex: I would kinda hope that they would use a CPU instruction with a bus lock to prevent concurrent updates
[22:21:48] *** Joins: Inline_ (~Inline@2a02:908:1252:7a80:a574:f57a:e539:7e22)
[22:21:50] <floatcomplex> right, but it would be even faster for them to all just be in different cache lines
[22:22:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4445:606a:d860:1735) (Ping timeout: 260 seconds)
[22:22:52] <kurahaupo> That would depend on whether the cores share the cache or not
[22:24:19] <kurahaupo> (I wonder why they're called "cache lines99,99", when anywhere else we'd call them blocks or sectors or similar)
[22:24:23] *** Joins: quartz (~quartz@user/quartz)
[22:26:25] *** Joins: kadavul (~vazha@103.165.21.190)
[22:26:57] *** Joins: luckyxxl (~luckyxxl@185.209.196.177)
[22:29:02] <caze> https://godbolt.org/z/dPe5Wros5
[22:29:13] <caze> (for quartz)
[22:30:00] *** Quits: phao (~phao@2804:d45:8e7a:de00:d8c8:7412:bda7:287b) (Quit: Leaving)
[22:30:50] <quartz> caze: Thanks, I'll look over it ;)
[22:32:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:35:16] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[22:36:23] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Ping timeout: 264 seconds)
[22:37:43] <caze> quartz: Study the exercise before first.
[22:38:09] <caze> quartz: It is based off of the solution to that.
[22:39:01] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:39:52] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[22:40:09] *** Joins: darklands (~darklands@69.43.65.116)
[22:44:28] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[22:46:47] *** Quits: X-Scale (~ARM@31.22.203.65) (Ping timeout: 258 seconds)
[22:47:22] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:54] *** X-Scale` is now known as X-Scale
[22:49:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:55:06] *** Joins: larry87 (~quassel@98.40.245.193)
[22:55:26] *** Quits: larry87 (~quassel@98.40.245.193) (Client Quit)
[22:56:56] *** Hexmind_ is now known as Hexmind
[22:57:00] *** Quits: dmaroo (~dhruv@157.48.148.135) (Quit: Konversation terminated!)
[22:57:24] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:57:42] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:57:59] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 264 seconds)
[23:00:58] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:02:13] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:03:03] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[23:03:15] *** Quits: kadavul (~vazha@103.165.21.190) (Ping timeout: 260 seconds)
[23:04:03] <fizzie> sham1: A register-qualified array of *any* type is officially useless.
[23:04:45] *** Joins: kadavul (~vazha@103.165.20.199)
[23:05:50] <fizzie> C11 footnote 121: "-- whether or not addressable storage is actually used, the address of any part of an object declared with storage-class specifier `register` cannot be computed, either explicitly -- or implicitly (by converting an array name to pointer --). Thus, the only operators that can be applied to an array declared with storage-class specifier `register` are `sizeof` and [omitted because it's
[23:05:52] <fizzie> a bug in the C11 draft]."
[23:05:55] *** Joins: serbest (~serbest@user/serbest)
[23:10:15] *** Quits: kadavul (~vazha@103.165.20.199) (Ping timeout: 260 seconds)
[23:12:34] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[23:15:10] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[23:18:36] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[23:18:47] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Client Quit)
[23:18:57] *** Quits: magla (~gelignite@55d48754.access.ecotel.net) (Quit: Stay safe!)
[23:19:08] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:20:00] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[23:20:02] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Client Quit)
[23:21:59] *** Quits: sonny (~sonny@8.6.144.238) (Ping timeout: 264 seconds)
[23:24:15] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 260 seconds)
[23:25:58] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[23:26:00] *** Quits: quartz (~quartz@user/quartz) (Ping timeout: 260 seconds)
[23:26:01] *** Quits: pucara (~i@181.92.71.111) (Quit: Lost terminal)
[23:28:14] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:28:51] *** Quits: dld (~dld@192.91.235.243) (Ping timeout: 245 seconds)
[23:30:06] *** Quits: eblip (~eb0t@90.210.92.98) (Ping timeout: 245 seconds)
[23:31:44] *** Quits: luckyxxl (~luckyxxl@185.209.196.177) (Quit: bye)
[23:32:04] *** Joins: eblip (~eb0t@90.211.41.180)
[23:32:08] *** kurahaupo is now known as tanewha
[23:32:12] *** Joins: hexteetx (~hexteex@gateway/tor-sasl/hexteex)
[23:32:56] *** Joins: gabriele (~gabriele@user/gabriele)
[23:33:35] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 260 seconds)
[23:33:53] *** Quits: hexteetx (~hexteex@gateway/tor-sasl/hexteex) (Client Quit)
[23:34:41] *** Quits: gabriele (~gabriele@user/gabriele) (Client Quit)
[23:35:06] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[23:36:17] *** Joins: rgrinberg (~textual@190.113.111.74)
[23:38:39] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:39:23] *** Quits: zwr (~zwr@2804:d45:b966:fb00:d12a:3b0c:2197:11ad) (Ping timeout: 264 seconds)
[23:40:08] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9c18:5252:f406:3ebf)
[23:41:13] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[23:42:23] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 264 seconds)
[23:47:22] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:48:16] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[23:48:23] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[23:50:46] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[23:52:11] *** Quits: darklands (~darklands@69.43.65.116) (Remote host closed the connection)
[23:52:33] *** Joins: darklands (~darklands@69.43.65.116)
[23:53:27] *** Joins: X-Scale` (~ARM@46.50.5.8)
[23:53:34] *** Joins: thing (~thing@user/thing)
[23:54:04] *** Joins: |darc|- (darc@darcserv.net)
[23:54:04] *** Quits: |darc| (darc@darcserv.net) (Killed (NickServ (GHOST command used by |darc|-)))
[23:55:26] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[23:56:14] *** Joins: kurfen (~kurfen@45.152.181.20)
[23:56:38] *** X-Scale` is now known as X-Scale
[23:56:53] *** Joins: odoood (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[23:58:00] *** Joins: Praise (~Fat@user/praise)
[23:59:13] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:59:46] *** Joins: hexteetx (~hexteex@gateway/tor-sasl/hexteex)
