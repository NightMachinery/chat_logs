[00:07:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:12:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:16:56] *** Quits: clothespin (~awolven@2601:246:4000:1030:e095:798a:5b2a:ec81) (Remote host closed the connection)
[00:41:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:52:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[01:16:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:02:32] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:10:08] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[02:11:21] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[03:24:38] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[03:25:23] *** Joins: minion (~minion@common-lisp.net)
[04:05:57] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 252 seconds)
[04:14:04] *** Joins: Oddity (Oddity@user/oddity)
[04:15:55] <hayley> pl: Dual EYPC would be 128 cores/256 threads?
[04:41:33] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[04:42:59] <pl> At max, yes 
[04:48:19] <hayley> Still not enough imo
[04:51:36] <hayley> https://www.youtube.com/watch?v=76TZk7E6dOY
[04:51:37] -ixelp- [YTP] Michael Rosen destroys simps & fulfills an economic demand - YouTube
[05:11:05] *** Joins: yitzi (~yitzi@2001:470:69fc:105::fafd)
[05:12:21] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:12:22] *** Parts: yitzi (~yitzi@2001:470:69fc:105::fafd) ()
[05:12:42] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[05:14:04] <copec> What is this project that needs all the cores hayley?
[05:14:53] <hayley> Building Clasp from source (including LLVM 13)
[05:16:39] <copec> For an official build server?
[05:17:17] <hayley> No, I just want to build it once
[05:20:09] <copec> For a build time record or something?
[05:20:35] <copec> People used to compete with distcc to see who could build the linux kernel the quickest
[05:21:17] <hayley> I'll take anything less than 5 years really
[05:28:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:34:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:37:57] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[05:41:05] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[05:42:17] <copec> Have you gone through the Dragon Book hayley?
[05:44:05] <hayley> Barely.
[05:44:43] <copec> Every topic on the adventures through CS could take a 10 year dive in itself
[05:49:14] *** Quits: random-nick (~random-ni@87.116.180.139) (Ping timeout: 265 seconds)
[05:50:59] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:54:06] <hayley> https://www.youtube.com/watch?v=uakqdR2B2w8
[05:54:06] -ixelp- [Get A] Grip [on Yourself] [1996 Remaster] - YouTube
[06:00:50] <Qwnavery> anyone seen lotuseater around as of late?
[06:00:57] <hayley> lotuseater: ping
[06:01:24] <Qwnavery> he's not online
[06:04:36] <hayley> Both surveys I've sent out suggest that I overestimated how much we use lists immutably.
[06:07:17] <Qwnavery> That's what arrays are for?
[06:09:20] <hayley> Arrays aren't a great persistent data structure still.
[06:11:49] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[06:42:39] <aeth> what about arrays with a slice abstraction?
[06:57:51] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[06:58:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:59:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[06:59:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:14:55] <hayley> What I mean by a persistent data structure is that you don't copy everything to do some "destructive" operation, while still preserving the original object. For example, an AVL tree or a hash-array-mapped-trie would be a persistent data structure.
[07:25:45] <hayley> aeth: I mean, I know you'd never cons once in your game engine, but the tune would change if you had a fully concurrent GC. And the question is really how common mutation is.
[07:26:11] <hayley> I suspect CL is less mutation-heavy than Java, especially if you use non-destructive sequence functions a lot.
[07:55:57] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[07:59:02] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 260 seconds)
[08:14:32] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:23:02] <moon-child> hayley: persistent data structures aren't mutated, though--that's the whole point
[08:23:16] <hayley> Yes.
[08:23:28] <hayley> s/"destructive" operation/update operation
[08:24:07] <moon-child> I meant----what's the relationship between that and 'overestimated how much we use lists immutably'?
[08:25:29] <hayley> "I overestimated how much we use lists immutably." "That's what arrays are for?" "Arrays aren't a great persistent data structure."
[08:26:34] *** Joins: semz (~none@user/semz)
[08:28:59] <moon-child> right.  I was having trouble parsing that exchange for some reason
[08:29:07] * hayley somehow only manages to crash this stupid Python-Minecraft API.
[08:34:14] <hayley> Found the bug. I use <offset, size> pairs in one place to represent a box, but the API wants a <position, position> pair. Guess how large <(13333, 80, 13333), (9, 9, 9)> is.
[08:34:48] <hayley> There really should be a check for that. If I try to materialise more than, say, 100k blocks, it should tell me to fix my damn code.
[08:37:05] <moon-child> what if you want to materialise 100k blocks?
[08:37:54] <hayley> Fine, add a parameter for it somewhere.
[08:40:07] <hayley> (BTW on the discussion about call-by-name and the IO monad, try something like import Control.Monad; main = replicateM_ 5 $ putStrLn "hi" and you'll see it does print "hi" 5 times. The IO happens by the runtime doing magic with the action object, not by evaluation.)
[08:40:11] <moon-child> CONCATENATE has no such parameter (and rightfully so imo).  Better would be to make it take named parameters, so you know what you're passing
[08:40:49] <hayley> Hm.
[08:41:50] <hayley> There is still a fast "check" though: if you blow your heap, you find out immediately, rather than some server acting fine for a few seconds, then crashing, then your poorly-written library saying it keeps receiving the empty string (someone didn't handle getting disconnected!)
[08:42:59] <moon-child> (re i/o: that makes sense)
[08:48:41] <aeth> hayley: yes, but... a game engine really is just a bunch of arrays of floats.
[08:48:46] <aeth> know your problem space
[08:48:53] <hayley> Yes, but too bad 4 u
[08:48:57] <aeth> basically the opposite of, say, a Lisp implementation
[08:49:30] <hayley> Do you use arrays of floats for path-finding?
[08:49:57] <moon-child> aeth: what if you wanna do multithreading
[08:50:06] <moon-child> in your game engine
[08:51:44] <aeth> moon-child: I mean, it's still just an array of numbers.
[08:51:55] <aeth> hayley: I mean, yeah, you could implement pathfinding on top of arrays
[08:52:24] <hayley> aeth: The last guy who wrote the pathfinder I maintain now did that, then I threw in some sets and queues, and it went magnitudes faster.
[08:52:26] <moon-child> hayley: you can do trees using arrays of floats sooooo
[08:52:45] <hayley> moon-child: Floats for indices?
[08:52:51] <moon-child> yea
[08:52:57] <moon-child> parent/sibling vectors
[08:54:25] <moon-child> (or path matrices, adjacency matrices, src/dst vectors.  Last two can represent arbitrary graphs.  Though adjacency matrix wastes space unless you make it sparse in which case it turns into src/dst vector)
[08:54:33] <hayley> How 2 implement doubly-linked tree in rust: `struct Tree(Vec<f64>); struct Index(f64);`
[08:54:49] <aeth> I mean, a tree is abstract and can, concretely, be either built from an array or a linked list... and when something's like a game engine, you might find that arrays-for-everything still works out best
[08:54:57] <moon-child> co-dfns, more like
[08:55:02] <moon-child> non-strawman verison
[08:55:15] <aeth> especially since game engines tend to work with small, known-in-advance data sets that want to be in the same place in terms of the cache lookup
[08:55:36] <aeth> (the "big" data in game engines are things like textures that are loaded onto the GPU, at which point they become the GPU's problem, and the programmer doesn't care anymore)
[08:56:04] <aeth> sorry... small, known-in-advance, and fixed-size
[08:59:06] <aeth> remember, there's pretty much nothing new in gaming since 2004 except higher-resolution graphics, so Pentiums had to run these things
[08:59:23] <aeth> (unless you're making a Minecraft clone, of course)
[09:01:37] * hayley watches a video on co-dfns and thinks it is a crock.
[09:01:52] <hayley> The video, rather, the compiler is fine.
[09:02:46] <hayley> A comparison with the nano-pass framework is dumb, because it is a framework, and so they have to do something for modularity. Which means, yes, they have pointers, yes, you don't know the object layout.
[09:03:44] <hayley> And, as the name suggests, there are far too many nano-passes. So of course the locality is shit.
[09:04:03] <moon-child> the author was previously heavily involved with scheme (and likely nanopass as well), so probalby has background in it
[09:05:28] <hayley> Then again, what the fuck did I expect watching a video called "Programming obesity"? I guess at least it is APL and not C.
[09:06:10] <hayley> Any other day it'd be some gameshit guru saying that only idiots write bugs, don't hire 'em, and you'll have no problems shipping unsafe code for the rest of your life.
[09:06:54] <Qwnavery> writing everything on prebuilt libraries in unity and complains about "bugless code"
[09:07:05] <Qwnavery> lel
[09:07:35] <hayley> Qwnavery: Nah, real AAA game developers start with the Vulkan API and an array of floats.
[09:08:36] <Qwnavery> heh
[09:09:58] * Qwnavery throws hours of bug-ridden C++ code in the depths of rm -r and instead opts to write everything in pure adulterated C.
[09:11:34] <hayley> To my knowledge, both compiler frameworks only do AST transforms too. So come back when you have something like Cleavir IR.
[09:15:58] <hayley> Reminds me of http://www.quiche-eater.com/the_real_text.html more or less.
[09:15:58] -ixelp- Real Programmers Don't Use PASCAL
[09:16:53] <hayley> "As all Real Programmers know, the only useful data structure is the Array. Strings, lists, structures, sets, these are all special cases of arrays and can be treated that way just as easily without messing up your programing language with all sorts of complications."
[09:34:23] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[09:34:37] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:34:43] *** Joins: lad (~lad@user/lad)
[09:54:23] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2.1)
[10:02:49] <hayley> https://www.youtube.com/watch?v=MTl9Yc0HcVA
[10:02:49] -ixelp- The ID ( OMD ) - The Misunderstanding ( 1977 ) - YouTube
[10:04:06] <dave0> maw
[10:13:34] <White_Flame> I still think the 2 major data interfaces are the sequence and the set
[10:13:58] <White_Flame> still need to actually build a practical abstraction based on that, and the ability to swap between them
[10:14:17] <White_Flame> the idea would be to let the compiler figure out what the most efficient concrete backing storage would be, based on usage
[10:14:25] <White_Flame> and separate that concern from the actual code
[10:19:06] <aeth> so it has to warm up every time you run it?
[10:58:36] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[11:17:51] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[11:19:06] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[11:59:44] *** Joins: selwyn (~selwyn@user/selwyn)
[12:24:47] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:35:59] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:28] <hayley> https://i.redd.it/u2tpkkrzyco71.png
[13:16:08] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[13:17:34] <pjb> hayley: there are two xfinity wifi networks.
[13:29:50] <White_Flame> aeth: should be able to store its conclusions, too.  and some might be statically determinable
[13:58:36] * hayley runs a user survey on Reddit and gets questioned back.
[13:59:16] <hayley> Shinmera said that it won't help me measure any mutation/allocation/whatever rates, which is true. I don't have tools for doing that, so I have to settle for asking "do you think you mutate a lot?"
[14:22:42] <pjb> hayley: it's trivial to instrument code to make your statistics!
[14:23:13] <pjb> hayley: take any CL implementation and add counters, and then load and run quicklisp stuff.
[14:23:24] <hayley> Yeah, it's trivial to hack compilers.
[14:23:43] <pjb> Perhaps not in general, but adding counters is not difficult.
[14:24:01] <hayley> I'd know how to modify the SICL "interpreter" to increment counters, but that's it.
[14:24:31] <pjb> That's enough to gather statistics.
[14:29:10] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1036-static.midco.net) (Ping timeout: 260 seconds)
[14:40:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:42:51] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:19:28] <hayley> After one quick test metering CONS, LIST, LIST*, RPLACA, RPLACD and the appropriate HIR instructions, I got 2,778,200 conses allocated and 74,383 cons updates.
[15:38:41] <hayley> So there are 0.036 updates to a cons cell on average.
[15:45:25] *** Quits: sm2n_ (~sm2n@user/sm2n) (Ping timeout: 252 seconds)
[15:45:48] *** Joins: sm2n (~sm2n@user/sm2n)
[15:57:18] *** Joins: random-nick (~random-ni@87.116.180.139)
[16:56:25] <gilberth> Good morning #lispcafe!
[16:57:02] <hayley> Good morning gilberth!
[16:58:31] <hayley> Funny that people say that it would be scary to not be able to program, but then confuse the intrinsically bad stuff like that with externalties of "modern" programming, like the batch compiler.
[16:58:59] <hayley> I can only speak for myself, but I would love it if every batch compiler vanished.
[17:00:18] <gilberth> What you mean? We don't submit batches of punch cards to some operator anymore?
[17:01:25] <hayley> e.g. https://twitter.com/losingcontrol23/status/1439052783777423362
[17:02:03] <hayley> You could even say that the F12-bound developer tools is the most widely downloaded IDE.
[17:02:16] <hayley> ...if you use a web browser.
[17:03:42] <hayley> gilberth: We both think not having programming tools is bad. They see "you won't have a batch compiler" as a threat. I see it as quite nice.
[17:04:51] <hayley> But the latter doesn't hurt anyone really. Having a compiler is an implementation detail. You can still do whatever you like in JavaScript and a browser, even if the API is clunky at times.
[17:08:11] <gilberth> It's not a particular nice environment which is in part by glueing random things together and JS designed as a scripting language. That is the other lesson: Don't every design a "scripting" language, it'll be used to develop applications in eventually.
[17:08:13] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[17:09:10] <hayley> I totally agree, but it does not imply that general purpose programming is going down the shitter.
[17:09:28] <gilberth> And of course having a compiler is an implementation detail. Agreed.
[17:10:42] <hayley> At the least you get prototype OO, and at its core it isn't a domain specific language. It's not good, but it's not a sign of anything bad.
[17:11:14] <gilberth> At times I compare this with MS-BASIC. It came with both a REPL and an optional compiler. So even that primitive language had both interactive development and compilation. Though the compiler was a batch compiler, but then, to be fair, you have to consider the tiny machines it ran on.
[17:11:35] <gilberth> Besides: I really hate batch-oriented development.
[17:11:48] <hayley> So do I, hence the comment.
[17:12:41] <gilberth> hayley: Unfortunately the prototype OOP nature of JS, which is nice, isn't used much.
[17:13:01] <hayley> Having general purpose computing in a web browser with a JIT is still general purpose computing, nonetheless. So these people are damn confused.
[17:13:48] <gilberth> Sure "they" are, what did you expect. Perhaps it's the irrational fear of anything dynamic still?
[17:14:41] <hayley> Yes.
[17:15:01] <gilberth> Like .oO(Uh! Things happening at runtime? You could extend systems? Better run!)
[17:15:29] <hayley> .oO(This is a Self object. A Self object is a collection of slots...)
[17:17:45] <gilberth> And beside the performance of JS is impressive at times, to be fair. What I hate most though is the event driven nature of the available implementations. This is the real performance killer, would want to implement blocking.
[17:18:58] <hayley> David Ungar also made a note of how the demo for the Alternate Reality Kit said it was an "alternate reality" and not a compiler or interpreter. It was a wholly graphical tool which let you use Smalltalk and physical simulations.
[17:19:44] <hayley> And _that's_ cool and more useful for getting anyone to hack, though I don't mind typing.
[17:21:26] <hayley> gilberth: Yeah, such a system is more hackable than some batch-oriented crap, not less hackable.
[17:23:12] <gilberth> I believe all the boiler plate you need for modern language to have the machine even saying "Hello, world!" is barrier. Again: As bad as a language BASIC is: You could start by using it as a desk calculator and then attach line number, assign variables and build loops --- easy to understand concept.
[17:23:30] <hayley> "Sadly, there are always foolish souls who will not accept my instinct as definitive evidence, and so one must stoop to logical arguments instead." - Gilad Bracha
[17:25:25] <gilberth> And it's a pity: Every compute these days comes with an IDE, yet children are not curious to hack little things in JS. But then: The APIs are complex.
[17:25:53] <hayley> Hey, I did when I was 10 or so.
[17:26:10] <dave0> PRINT "hello gilberth"
[17:26:26] <dave0> RUN
[17:26:38] <hayley> ?"hello gilberth"
[17:26:38] <gilberth> hayley: Yes, but we are not "normal".
[17:26:53] <dave0> hayley: oh wow you really know basic
[17:26:58] <dave0> that was pretty obscure
[17:27:36] <hayley> dave0: I did grow up on qbasic too.
[17:27:47] <dave0> but you're young
[17:27:54] * gilberth started with self-taught BASIC at like 8yo or so.
[17:28:09] <dave0> but you're old
[17:28:11] <dave0> lol
[17:28:23] <gilberth> dave0: Yes, don't remind me.
[17:28:55] <hayley> Hey, 20 isn't young. I can get drunk if I want to.
[17:29:09] <gilberth> However I am still pretty curious, so I don't feel old at all.
[17:29:11] <dave0> in many ways i miss the interactivity
[17:31:15] <gilberth> dave0: Miss? Why? We still have that.
[17:31:39] <dave0> not me, i still only know c
[17:31:45] <hayley> https://gbracha.blogspot.com/2018/10/reified-generics-search-for-cure.html
[17:31:46] -ixelp- Room 101: Reified Generics: The Search for the Cure
[17:31:56] <hayley> Funny to see Gilad respond to functional programmer shitposting in the comments.
[17:32:09] <gilberth> dave0: PostScript^WFORTH?
[17:32:27] <dave0> gilberth: i'm slowly going through my forth
[17:32:49] <gilberth> Curious, why don't you learn CL?
[17:32:50] <dave0> i'm trying to do a little bit each day
[17:33:12] <dave0> gilberth: one thing at a time! first forth then scheme
[17:33:21] <hayley> "You could start by asking yourself what technical argument the words you have brought to my attention are making?"
[17:33:34] <hayley> I wish I had this guy's emotional control.
[17:36:21] <gilberth> I don't particular like neither Forth nor Scheme.
[17:38:42] <dave0> but scheme is just lisp?
[17:39:00] <dave0> i am probably missing something subtle
[17:41:00] <hayley> Hot take, I don't like Lisp. Common Lisp perhaps, Scheme is fine sometimes, but I don't care for anything else.
[17:41:03] <gilberth> Scheme has a mind-set different from CL.
[17:41:13] <hayley> *Common Lisp perhaps is great
[17:42:01] <gilberth> Scheme is not "dirty" enough for me.
[17:44:59] <hayley> Oh, and of course the message passing/phony-functional language I sort of specified in part is very good.
[17:48:47] <hayley> Alan Kay once looked at a Lisp system and said "For a 'functional' language, there's a lot of special forms doing things."
[17:51:26] <hayley> Still, my list of fun languages to hack is more or less CL, Smalltalk, Self and Erlang.
[18:03:46] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:04:52] *** Quits: X-Scale (~ARM@83.223.227.181) (Ping timeout: 265 seconds)
[18:05:18] *** X-Scale` is now known as X-Scale
[18:05:25] *** Joins: shka (~herr@109.231.62.239)
[18:15:01] *** Joins: X-Scale` (~ARM@46.50.5.115)
[18:16:04] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:16:22] *** X-Scale` is now known as X-Scale
[18:17:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:33:06] <shka> https://www.youtube.com/watch?v=Izr3Cidaz1M
[18:33:07] -ixelp- Green slime (Richard Delvecchio) - YouTube
[19:03:09] <dave0> nite all
[19:03:16] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:47:14] <pjb> IPCC resolutions fucked off.  Volcano erupts on Spanish island of La Palma <https://p.dw.com/p/40X7R>
[19:47:14] -ixelp- JUST IN: Volcano erupts on Spanish island of La Palma | News | DW | 19.09.2021
[19:51:18] <pjb> https://directostv.teleame.com/tvcanariaendirecto/
[19:51:19] -ixelp- TV Canaria en directo, Online ~ Teleame Directos TV
[20:49:38] *** Joins: selwyn (~selwyn@user/selwyn)
[21:23:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:28:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:30:10] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Quit: leaving)
[21:44:43] <gilberth> With the advent of the program feature LISP is no functional language.
[21:57:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:08:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[22:10:11] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[22:31:06] *** Joins: clothespin (~awolven@2601:246:4000:1030:86e:7e25:8c6f:53da)
[23:13:05] <gilberth> Somehow I lost motivation to hack anything useful.
[23:13:26] <selwyn> you will get it back
[23:13:29] <selwyn> take a rest
[23:14:10] <gilberth> Sure. I even lost motivation to read. I have a pile of books waiting here to be read.
[23:17:28] <gilberth> Perhaps I'll call it a day and play half-life for the upteenth time or idle watching videos. What bothers me though is that I make no progress with my CLIM. But then local GUIs are a thing of the past. Otherwise I feel really great.
[23:18:19] <selwyn> great
[23:18:24] <selwyn> that´s the important thing
[23:19:44] <gilberth> Yes, friends of my cousin came over last night for his birthday. It was good to see other people and having a fun time over bbq. Was some booster for my general mood.
[23:21:52] <shka> that's great!
[23:35:57] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[23:37:28] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
