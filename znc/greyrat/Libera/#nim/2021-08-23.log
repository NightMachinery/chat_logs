[00:00:07] <FromDiscord> <treeform> Networking and servers was very slow, so algorithms like lock step and peer to peer was more popular.
[00:00:38] <FromDiscord> <treeform> Now most online games use company servers and predictions instead.
[00:02:13] <FromDiscord> <noxabellus> is there like a bottom/never type or some other thing i can use to make a hole in an expression?
[00:02:32] <FromDiscord> <haxscramper> `void`?
[00:02:42] <FromDiscord> <treeform> how would you use it?
[00:02:47] <FromDiscord> <konsumlamm> nah, `void` isn't a bottom type
[00:02:55] <FromDiscord> <konsumlamm> In reply to @noxabellus "is there like a": there is none in the stdlib
[00:03:02] <FromDiscord> <noxabellus> like in rust i can do `todo!()` or `unreachable!()`
[00:03:12] <FromDiscord> <konsumlamm> (as in no such type, not a type called `none`...)
[00:03:20] <FromDiscord> <haxscramper> well, `{.noreturn.}` for proc then
[00:03:28] <FromDiscord> <konsumlamm> oh, right, that exists
[00:03:34] <FromDiscord> <haxscramper> At least that might be `unreachable!()`
[00:03:44] <FromDiscord> <treeform> I just do `quit("not supposed to be here")`
[00:04:28] <FromDiscord> <haxscramper> `raise newImplementError()`
[00:04:55] <FromDiscord> <noxabellus> raise is an expression?
[00:05:06] <FromDiscord> <haxscramper> raise is a noreturn statement
[00:05:46] <FromDiscord> <haxscramper> you can use any noreturn statement in `if/case` expressions
[00:06:12] <FromDiscord> <noxabellus> oh okay
[00:30:16] <FromDiscord> <dom96> `discard`?
[00:34:17] <FromDiscord> <konsumlamm> `dicard` just discards the result, the point of a "bottom type" is that it never returns (normally)
[00:34:31] <FromDiscord> <Ayy Lmao> Has anyone messed around with doing 2d vector graphics in opengl? I'm looking for resources or advice to learn about that sort of thing.
[00:34:53] <FromDiscord> <konsumlamm> In reply to @konsumlamm "`dicard` just discards the": so something like looping infinitely or raising an exception
[00:37:13] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[00:41:34] <FromDiscord> <gerwy> In reply to @treeform "now days linked lists": still need to learn them tho hah
[00:48:10] <FromDiscord> <Elegantbeef> @Ayy Lmao\:  you mean proper vectors like SVG?
[00:52:57] <FromDiscord> <Ayy Lmao> In reply to @Elegantbeef "<@277645179115143178>\:  you mean": It doesn't have to be any particular format. My goal is essentially to make a gui framework and I'm looking to figure out what the best way to go from describing the gui visuals as paths to viewing it on the screen.
[00:54:06] <FromDiscord> <Ayy Lmao> I've tried to look through ImGui to figure out how it is done there but there's so much going on it's hard to parse through it all.
[00:58:05] <FromDiscord> <Elegantbeef> You could look how pixie renders paths, and that may help, generally gpu based vector rendering is quite complex
[01:07:00] <FromDiscord> <Ayy Lmao> In reply to @Elegantbeef "You could look how": From what I can tell in the examples, pixie draws a quad over the whole screen, binds a texture to the quad, and then draws the paths as pixels to the texture. I think ImGui is actually describing the layout to the gpu and having the gpu draw it if I'm not mistaken.
[01:07:20] <FromDiscord> <garett> Ayy lmao, you might look at https://github.com/memononen/nanovg
[01:07:23] <nrds> <12R2D299> 4GitHub: 7"Antialiased 2D vector drawing library on top of OpenGL for UI and visualizations."
[01:10:20] <FromDiscord> <Ayy Lmao> In reply to @garett "Ayy lmao, you might": I've been meaning to dig into that and see if I can understand it. It seems like a nice concise way of doing gpu vector graphics.
[01:11:13] <FromDiscord> <garett> Might try rewriting it in Nim to understand it
[01:11:30] <FromDiscord> <garett> I can’t claim to understand it
[01:14:53] <FromDiscord> <Ayy Lmao> Maybe I'll try at some point. I'm not super great at c and c++ so it would probably be quite difficult.
[01:16:32] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:16:56] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:42:09] <FromDiscord> <treeform> In reply to @Elegantbeef "You could look how": I can second this. GPU makes it like x10 harder.
[01:43:50] <FromDiscord> <treeform> In reply to @Ayy Lmao "From what I can": That is correct, pixie is pure CPU library. The demo api we have is not made for performance only to show how to simply do it.
[01:46:49] <FromDiscord> <treeform> A better way to do is to "cache" every component you have into an atlas when stuff changes, and only draw GPU atlas quads most frames.
[01:47:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 250 seconds)
[01:47:34] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[01:49:01] <FromDiscord> <Ayy Lmao> In reply to @treeform "A better way to": I will have to look into that. I was having some lag issues with resizing the window with using a single texture.
[01:49:49] *** Gustavo6046_ is now known as Gustavo6046
[01:51:27] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:05:50] <FromDiscord> <treeform> Yeah single texture is for simple demos only.
[02:06:11] <FromDiscord> <treeform> Its just a way to get an image onto the screen
[02:29:45] <FromDiscord> <TechnoRazor> I finally got Optick to work
[02:32:37] <FromDiscord> <TechnoRazor> sent a code paste, see https://play.nim-lang.org/#ix=3wH7
[02:32:56] <FromDiscord> <TechnoRazor> @haxscramper
[02:33:34] <FromDiscord> <TechnoRazor> (edit) "https://play.nim-lang.org/#ix=3wH7" => "https://play.nim-lang.org/#ix=3wH8"
[02:35:13] *** Quits: max22- (~maxime@2a01cb088335980075e51662c51f4c09.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:55:34] <FromDiscord> <⃟⃟> how do i make the omission of `()` for function calls an error
[02:55:51] <FromDiscord> <Recruit_main707> pretty sure you cant
[02:55:54] <FromDiscord> <TechnoRazor> Why would you want to?
[02:56:03] <FromDiscord> <Recruit_main707> just write them xd
[02:58:29] <FromDiscord> <⃟⃟> i would like to add a flag to the compiler
[02:58:32] <FromDiscord> <⃟⃟> how can i do this?
[02:59:20] <madprops> what's the best way to turn 1.199999 into "1.2"   ?
[02:59:22] <FromDiscord> <konsumlamm> you can't without using github at least
[02:59:27] <FromDiscord> <Elegantbeef> Forking the compiler and adding it, but then have fune with properties
[02:59:59] <FromDiscord> <konsumlamm> In reply to @madprops "what's the best way": there should be a round function in std/math or systen
[03:00:10] <FromDiscord> <⃟⃟> why do i need github for this??
[03:00:19] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3wHf
[03:00:21] <FromDiscord> <Elegantbeef> Cause it's not a feature of the compiler
[03:00:22] <FromDiscord> <⃟⃟> they should use a different platform
[03:00:38] <FromDiscord> <Elegantbeef> There is a gitlab mirror iirc
[03:00:41] <FromDiscord> <konsumlamm> In reply to @⃟⃟ "why do i need": because that's where Nim's source code is?
[03:01:04] <FromDiscord> <⃟⃟> can i just email someone the changes?
[03:01:11] <FromDiscord> <Elegantbeef> You dont need github account you can just git clone and host your fork
[03:01:42] <FromDiscord> <Recruit_main707> In reply to @⃟⃟ "can i just email": no, you can make a suggestion and if it receives enough attention then it may be done
[03:03:53] *** Joins: byanka (~byanka@78.137.43.40)
[03:04:02] <FromDiscord> <konsumlamm> if you want to contribute to Nim in any meaningful way, you gotta use GitHub
[03:04:10] <FromDiscord> <konsumlamm> or find someone else to do it for you
[03:04:21] <FromDiscord> <konsumlamm> (no, i won't do it for you)
[03:07:24] <FromDiscord> <Recruit_main707> may i ask why do you want that? you can just avoid it yourself
[03:08:14] <FromDiscord> <⃟⃟> i dont like the feature
[03:08:21] <FromDiscord> <⃟⃟> so i want to effectively disable it
[03:08:58] <FromDiscord> <haxscramper> It would break huge portion of the stdlib
[03:09:09] <FromDiscord> <haxscramper> And you can write custom compiler tooling
[03:09:16] <FromDiscord> <haxscramper> I linked example already
[03:09:43] <FromDiscord> <Elegantbeef> It almost certainly wouldnt be supported by the compiler since no one else wants it
[03:10:04] <FromDiscord> <haxscramper> In reply to @haxscramper "https://github.com/haxscramper/hack/blob/master/tes": .
[03:10:12] <FromDiscord> <haxscramper> Check for anything you like
[03:10:16] <FromDiscord> <haxscramper> In any way you like
[03:10:24] <FromDiscord> <haxscramper> And btw no need for GitHub
[03:10:30] <FromDiscord> <dom96> honestly, don't do this. Either get consensus from everyone in the community or use a different language
[03:10:32] <FromDiscord> <haxscramper> And it is easier to implement
[03:10:35] <FromDiscord> <⃟⃟> so using that how do i make it happen when i do `nim c`
[03:11:01] <FromDiscord> <haxscramper> Just run it as separate binary
[03:11:12] <FromDiscord> <haxscramper> Or, well, you can make custom compielr pass
[03:11:15] <FromDiscord> <haxscramper> If you want
[03:11:18] <madprops> I'm using: formatFloat(float(num), format=ffDecimal, precision=1)
[03:11:25] <FromDiscord> <⃟⃟> the thing is then i have to make sure i make it scan all the files being used when i do `nim c`
[03:11:28] <madprops> how can I avoid cases like 2.0 and return 2
[03:11:29] <FromDiscord> <haxscramper> Gove me a second, I have example for full pipelin
[03:11:30] <madprops> ?
[03:12:17] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/test11/full_compilation_pipeline.nim
[03:12:18] <FromDiscord> <haxscramper> Here
[03:12:21] <FromDiscord> <⃟⃟> trimzeros
[03:12:23] <FromDiscord> <haxscramper> Your personal nim c
[03:12:45] <FromDiscord> <haxscramper> Start to end full compilation pipeline, in 47 lines
[03:13:16] <FromDiscord> <⃟⃟> what is that tmp thing
[03:13:29] <FromDiscord> <haxscramper> Only for c backend and no configuration, but if you want that would be a good start
[03:13:50] <FromDiscord> <haxscramper> In reply to @⃟⃟ "what is that tmp": /tmp?
[03:13:59] <FromDiscord> <Recruit_main707> honestly, if you really want to do this go ahead, but i dont think you have enough knowledge about nim, its gonna be painful, frustrating and you will most likely not even finish it
[03:14:00] <FromDiscord> <haxscramper> Linux temporary directory
[03:14:01] <FromDiscord> <⃟⃟> is there a way to make it just use the normal compiler but add one step
[03:14:15] <FromDiscord> <haxscramper> Fork nim compiler?
[03:14:23] <FromDiscord> <haxscramper> Already has been suggested
[03:14:24] <FromDiscord> <⃟⃟> well your way seems simpler
[03:14:29] <FromDiscord> <dom96> honestly, there are far better things to be doing then creating a fork of Nim just to make `()` mandatory
[03:14:34] <FromDiscord> <dom96> (edit) "then" => "than"
[03:14:42] <FromDiscord> <⃟⃟> like using mathematica?
[03:14:44] <FromDiscord> <haxscramper> In reply to @⃟⃟ "well your way seems": Because it is an example that is made to be simple
[03:15:01] <FromDiscord> <Recruit_main707> i mean, its him doing for himself, i dont care
[03:15:40] <FromDiscord> <haxscramper> And btw, @⃟⃟ what is wrong with GitHub that you absolutely refuse to use it?
[03:15:51] <FromDiscord> <sealmove> how to see where the index out of bounds happen?
[03:16:05] <FromDiscord> <⃟⃟> i used it once then it annoyed me so much i stopped using it
[03:16:11] <FromDiscord> <Recruit_main707> i just recommend him to not because i know from my own experience this kind of stuff never results in a good outcome
[03:16:29] <FromDiscord> <⃟⃟> is there  a nim backend for mathematica?
[03:16:35] <FromDiscord> <haxscramper> No
[03:17:04] <FromDiscord> <⃟⃟> is it being worked on right now?
[03:17:13] <FromDiscord> <haxscramper> No, of course not
[03:17:30] <FromDiscord> <Recruit_main707> isnt it propietary?
[03:17:35] <FromDiscord> <konsumlamm> In reply to @รєคɭ๓๏שє "how to see where": look at the stacktrace? ot wdym?
[03:17:47] <FromDiscord> <⃟⃟> wolfram mathematica is i think
[03:18:09] <FromDiscord> <haxscramper> Wolfram Mathematica is a software system with built-in libraries for several areas of technical computing that allow machine learning, statistics, symbolic computation, manipulating matrices, plotting ... ↵↵> License: Proprietary
[03:18:26] <FromDiscord> <sealmove> sent a code paste, see https://play.nim-lang.org/#ix=3wHh
[03:18:27] <FromDiscord> <haxscramper> I'm pretty sure there is like 3.5 people who would need nim to have backend for that
[03:18:39] <FromDiscord> <⃟⃟> 0.5 person?
[03:18:40] <FromDiscord> <konsumlamm> so many?
[03:19:35] <FromDiscord> <Recruit_main707> Matematica's attractive is actually using it, the fancy plotting stuff and builtins, a nim wrapper of some sort would be more useful
[03:19:47] <FromDiscord> <konsumlamm> In reply to @⃟⃟ "i used it once": ...
[03:19:49] <FromDiscord> <Recruit_main707> but not doable afaik
[03:20:32] <FromDiscord> <⃟⃟> why not
[03:20:35] <FromDiscord> <haxscramper> I guess if you can call into it somehow, either via FFI, or shell command
[03:21:00] <FromDiscord> <haxscramper> But I'd better use open-source stuff written in nim
[03:21:29] <FromDiscord> <Recruit_main707> if matematica somehow allows you to interop with c/cpp code then maybe, but again, painful, frustrating, complex and very likely to never end
[03:21:41] <FromDiscord> <haxscramper> Than proprietary "Written in: Wolfram Language, C/C++, Java", no thanks
[03:21:53] <FromDiscord> <⃟⃟> i thought nim could turn into javascript though
[03:22:01] <FromDiscord> <Recruit_main707> c/cpp/js
[03:22:11] <FromDiscord> <haxscramper> +Objc
[03:22:12] <FromDiscord> <⃟⃟> well if javascript works i dont see why not mathematica
[03:22:26] <FromDiscord> <⃟⃟> i assume javascript dosent use some kind of C interop
[03:22:38] <FromDiscord> <haxscramper> It is possible, just pointless
[03:23:02] <FromDiscord> <dom96> mathematica isn't really a platform
[03:23:02] <FromDiscord> <Recruit_main707> a whole team of people very experienced in the language, (since they created it), made the js backend, one enthusiast has basically cero chance
[03:23:14] <FromDiscord> <dom96> JS/ObjC/C++/C offers discrete platforms
[03:23:24] <FromDiscord> <⃟⃟> discrete? platform?
[03:23:29] <FromDiscord> <⃟⃟> non jargon please
[03:24:24] <FromDiscord> <haxscramper> We could target something like java to reach for JVM, or one of .net languages, this would be more useful
[03:25:38] <FromDiscord> <haxscramper> Though everything is just rubbish compared to brainfuck - any real language ought to have BF backend
[03:26:38] <FromDiscord> <⃟⃟> νο
[03:26:45] <FromDiscord> <Recruit_main707> fr, i dont want interfaces, where is my brainfuck backend, literally unusable
[03:27:16] <FromDiscord> <konsumlamm> making a bf bsckend is fun
[03:27:20] <FromDiscord> <haxscramper> `{.emit: ++++++++--->I]"}`
[03:27:26] <FromDiscord> <konsumlamm> if you don't want dynamic allocations at least
[03:35:49] <FromDiscord> <dom96> you joke, but a brainfuck -> Nim AST macro would be epic
[03:38:52] <FromDiscord> <konsumlamm> actually, i don't, i really made a brainfuck backend once
[03:43:09] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:44:15] *** Joins: flynn (~mcbloch@user/flynn)
[04:04:12] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3wHo
[04:04:33] <FromDiscord> <Ayy Lmao> (edit) "https://play.nim-lang.org/#ix=3wHo" => "https://play.nim-lang.org/#ix=3wHp"
[04:05:45] <FromDiscord> <Ayy Lmao> Pixie's resize function looks pretty hefty so probably isn't meant to be called frequently.
[04:16:38] <FromDiscord> <guzba> In reply to @Ayy Lmao "Pixie's resize function looks": pixie's `resize` will do all the work of scaling an image down which is expensive yeah. if data.setLen resizing works, which is just dropping data, thats all good and will be far faster. one thing that may be an option is to just do texture.image = newImage(window.clientWidth, window.clientHeight) if you do not need the cropped pixel values but idk if that fits in your scenario
[04:17:23] <FromDiscord> <guzba> (edit) "resizing" => "clipping"
[04:18:42] <FromDiscord> <Ayy Lmao> In reply to @guzba "pixie's `resize` will do": I'm immediately redrawing the texture after every resize so it seems to work nicely for me to just resize it manually.
[04:19:38] <FromDiscord> <Ayy Lmao> Unless `texture.image = newImage(window.clientWidth, window.clientHeight)` is faster, I haven't done any testing
[04:20:08] <FromDiscord> <guzba> it wouldn't be be any different
[04:20:19] <FromDiscord> <guzba> so whatever you prefer is all good
[04:55:59] <nrds> <06Prestige99> What's the best way to conditionally append to a const string?
[04:56:27] <FromDiscord> <Elegantbeef> What do you mean?
[04:56:58] <nrds> <06Prestige99> like I want my const string to be "foo" but if an env var exists I want to append " - {myvar}"
[04:59:41] <FromDiscord> <Elegantbeef> Also conditionally at runtime or CT?
[04:59:45] <FromDiscord> <Elegantbeef> could have a `getVar` which does it internally
[05:00:44] <nrds> <06Prestige99> ct
[05:00:58] <nrds> <06Prestige99> getVar?
[05:01:58] <FromDiscord> <Elegantbeef> so in your example instead of doing `fooConst` you do `getFoo`
[05:04:22] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3wHA
[05:04:36] <FromDiscord> <Elegantbeef> Oh at CT then you can just do that in a block
[05:07:23] <FromDiscord> <Elegantbeef> Something like this https://play.nim-lang.org/#ix=3wHC
[05:07:36] <FromDiscord> <Elegantbeef> For documentation on that strdefine https://nim-lang.org/docs/manual.html#implementation-specific-pragmas-compileminustime-define-pragmas
[05:10:45] <FromDiscord> <Elegantbeef> Lol i used when \:D
[05:10:54] <FromDiscord> <Elegantbeef> I'm a numpty that amazes myself sometimes
[05:37:17] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:37:58] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[05:51:08] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[05:51:51] <NimEventer> New Nimble package! oolib - A nimble package which provides user-defined types, procedures, etc..., see https://github.com/Glasses-Neo/OOlib
[05:51:53] <nrds> <12R2D299> 4GitHub: 7"A nimble package which provides user-defined types, procedures, etc..."
[06:22:22] <FromDiscord> <JSONBash> is there a way I can filter a seq of objects by whether a field exists?
[06:22:36] <FromDiscord> <impbox [ftsf]> a seq will be of all the same kind of object
[06:22:40] <FromDiscord> <impbox [ftsf]> so the fields would be the same
[06:22:43] <FromDiscord> <Elegantbeef> "exists"?
[06:22:56] <FromDiscord> <impbox [ftsf]> a seq of ref objects to different child types?
[06:23:59] <FromDiscord> <JSONBash> ^ exactly sorry
[06:24:08] <FromDiscord> <JSONBash> ref object of _
[06:24:22] <FromDiscord> <impbox [ftsf]> that would be a runtime type info thing, not sure if that's possible
[06:24:32] <FromDiscord> <impbox [ftsf]> you could filter on if it's a subtype of X
[06:24:55] <FromDiscord> <Elegantbeef> Well you'd need to store the information of what types have X field
[06:25:15] <FromDiscord> <Elegantbeef> Then you could check if the object is of one of those
[06:26:22] <FromDiscord> <JSONBash> In reply to @impbox "you could filter on": how would I do that?
[06:26:44] <FromDiscord> <Elegantbeef> Well you'd have to make a macro that does it or manually do it
[06:28:02] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3wHS
[06:28:53] <FromDiscord> <impbox [ftsf]> but I don't think you could do `filterIt(it.hasField("fieldA"))` for example
[06:29:16] <FromDiscord> <impbox [ftsf]> unless you made your own proc that returned whether that was true or not
[06:29:18] <FromDiscord> <Elegantbeef> Without making that RTTI nope
[06:29:56] <FromDiscord> <Elegantbeef> I dont think there is a mechanism in nim to get all objects that inherit from one
[06:31:03] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3wHW not a nice solution, but you can do this
[06:31:26] <FromDiscord> <impbox [ftsf]> i'd suggest rethink what you're trying to do =)
[06:31:33] <FromDiscord> <impbox [ftsf]> what are you trying to do?
[06:31:37] <FromDiscord> <Elegantbeef> I concur
[06:33:01] <FromDiscord> <JSONBash> I tried the examples you provided but tried to access the fieldX of the found items and got an error
[06:33:30] <FromDiscord> <Elegantbeef> Well the list is still a liist of `Base`
[06:33:36] <FromDiscord> <impbox [ftsf]> what is the error you got?
[06:33:38] <FromDiscord> <Elegantbeef> So you'd need to then mapit
[06:34:15] <FromDiscord> <Elegantbeef> Filterit removes all that dont fulfil the example, you now need to convert to the type you want
[06:34:19] <FromDiscord> <JSONBash> I am using the logging library and trying to filter getHandlers() by type of RollingFileLogger so i can access the file field
[06:35:46] <FromDiscord> <JSONBash> https://play.nim-lang.org/#ix=3wHX
[06:36:25] <FromDiscord> <Elegantbeef> Is how you'd do it https://play.nim-lang.org/#ix=3wHY
[06:36:48] <FromDiscord> <Elegantbeef> filterit doesnt convert the type, it just removes any object that doesnt match the filter
[06:37:10] <FromDiscord> <JSONBash> ooooh shit yeah i get that
[06:37:34] <FromDiscord> <impbox [ftsf]> baseName isn't exported though
[06:37:59] <FromDiscord> <impbox [ftsf]> so you can't access it from outside the logging module
[06:38:09] <FromDiscord> <JSONBash> meaning tog e tfile
[06:38:13] <FromDiscord> <JSONBash> meaning to get file
[06:38:39] <FromDiscord> <JSONBash> but it is still seq[Logger]
[06:38:43] <FromDiscord> <JSONBash> which doesn't have file
[06:39:00] <FromDiscord> <JSONBash> i need the extra step to convert to seq of FileLogger
[06:39:09] <FromDiscord> <impbox [ftsf]> yep, but even then you won't be able to read baseName
[06:39:13] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/dn3
[06:39:38] <FromDiscord> <Elegantbeef> Oh there is no accessor for the logger file name
[06:40:53] <FromDiscord> <JSONBash> In reply to @impbox "yep, but even then": yeah it was a bad example by me, i want to be reading file which is external. Don't want baseName at all
[06:41:09] <FromDiscord> <JSONBash> i want the File
[06:41:20] <FromDiscord> <Elegantbeef> Anywho same example for inheritance
[06:41:37] <FromDiscord> <JSONBash> sent a code paste, see https://play.nim-lang.org/#ix=3wHZ
[06:42:05] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3wI0
[06:42:24] <FromDiscord> <Elegantbeef> There you go even with RSI have a better answer \:P
[06:43:16] <FromDiscord> <impbox [ftsf]> would be nice to have a template that does the conversion if it is of the type
[06:44:16] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3wI1
[06:44:21] <FromDiscord> <Elegantbeef> Hey it's a few seconds to do, though a case statement macro would be nicer 😛
[06:46:14] <FromDiscord> <JSONBash> sent a code paste, see https://play.nim-lang.org/#ix=3wI2
[06:46:23] <FromDiscord> <JSONBash> or `onlyIf`
[06:47:00] <FromDiscord> <JSONBash> (edit) 
[06:47:20] <FromDiscord> <JSONBash> same same though
[06:48:05] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3wI3
[06:48:47] <FromDiscord> <Elegantbeef> Oh oopsie has a case statement macro like that impbox \:D
[06:49:02] <FromDiscord> <impbox [ftsf]> oopsie?
[06:49:09] <FromDiscord> <Elegantbeef> My OOP library
[06:49:51] <FromDiscord> <impbox [ftsf]> cool
[06:49:56] <FromDiscord> <Elegantbeef> https://github.com/beef331/oopsie
[06:49:58] <nrds> <12R2D299> 4GitHub: 7"Nim oop helper module"
[06:51:18] <FromDiscord> <JSONBash> is that really OOP though? wouldn't that be more functional and more like lenses?
[06:51:29] <FromDiscord> <JSONBash> nah nvm it's an inheritance object
[06:51:40] <FromDiscord> <Elegantbeef> Yea it's OOP based \:D
[06:51:48] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Quit: Konversation terminated!)
[06:52:06] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[06:52:57] <FromDiscord> <JSONBash> lenses are too academic anyways
[06:53:18] <FromDiscord> <JSONBash> (edit) "academic" => "~~academic~~ complicated "
[06:59:31] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[06:59:51] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:03:12] <FromDiscord> <hamidb80> hey
[07:04:23] <FromDiscord> <hamidb80> how can i stream a http request in nim?
[07:10:04] <FromDiscord> <Elegantbeef> What do you mean stream it?
[07:11:41] <FromDiscord> <impbox [ftsf]> read it as the data comes in before it's fully transferred i'm guessing
[07:12:11] <FromDiscord> <impbox [ftsf]> i'm not sure if httpclient supports that
[07:12:34] <FromDiscord> <hamidb80> i wanna implement something like `EventSource` in nim
[07:13:16] <FromDiscord> <impbox [ftsf]> via client.bodyStream perhaps
[07:14:07] <FromDiscord> <impbox [ftsf]> https://github.com/nim-lang/Nim/issues/13856
[07:14:41] <FromDiscord> <Elegantbeef> So it's possible just you'd have to do it \:D
[07:14:43] <FromDiscord> <impbox [ftsf]> ahh that issue is for sending via streaming not receiving
[07:16:36] <FromDiscord> <Elegantbeef> Well event source is server -\> client so if you just want that logic https://forum.nim-lang.org/t/6103#39804 might help
[07:16:38] <FromDiscord> <impbox [ftsf]> https://github.com/nim-lang/Nim/issues/7126
[07:18:07] <FromDiscord> <impbox [ftsf]> https://forum.nim-lang.org/t/4260 someone's attempt at streaming http
[07:21:55] <FromDiscord> <hamidb80> thanks
[07:24:33] <madprops> is it possible to have an enum that can't be nil, that it defaults to one value?
[07:25:01] <madprops> to avoid parameters like: nm: NumMode = NumMode.number
[07:28:14] <FromDiscord> <impbox [ftsf]> enums cannot be nil
[07:28:23] <FromDiscord> <impbox [ftsf]> and they default to the value at 0
[07:35:03] <madprops> oh
[07:39:12] <FromDiscord> <Elegantbeef> The only things that are nilable are `ref T` and pointers
[07:39:46] <madprops> so was {.pure.} removed or not?
[07:40:02] <FromDiscord> <Elegantbeef> No it's still here
[07:40:39] <madprops> https://forum.nim-lang.org/t/4190
[07:40:45] <madprops> i guess that's not relevant then
[07:40:52] <FromDiscord> <hamidb80> i dont see `offtopic` channel
[07:41:55] <FromDiscord> <Elegantbeef> Pure now is needed for overlap but a pure enum doesnt force it into a namespace
[07:42:13] <FromDiscord> <Elegantbeef> If there is no overlap you can use the enum field as is
[07:42:20] <FromDiscord> <Elegantbeef> I say overlap but mean ambiguity
[07:48:11] <madprops> I see
[07:55:24] <madprops> if enums default to 0, how can I use them as optional parameters?
[07:55:30] <madprops> with a default value
[07:55:41] <madprops> I think it's failing after I removed the = optional
[07:55:47] <madprops> = default *
[07:56:08] <madprops> i think it treats the signature of the proc differently
[07:56:54] <FromDiscord> <Elegantbeef> Just like anything else https://play.nim-lang.org/#ix=3wI9
[07:57:44] <madprops> oh huh didn't have to specify it's a Color
[07:58:21] <FromDiscord> <Elegantbeef> Well optionals have type inference
[07:58:51] <madprops> nice
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:43:32] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[09:13:59] <FromDiscord> <ordinate> greetings, i come from the land of haskell
[09:15:12] <FromDiscord> <Rika> whyd ya move 😛
[09:15:30] <FromDiscord> <ordinate> i havent left fully! i just felt the need to learn a 2nd language
[09:15:45] <FromDiscord> <ordinate> and am scoping out the field for one with just the right vibe
[09:16:06] <FromDiscord> <Rika> ok
[09:16:08] <FromDiscord> <Rika> well
[09:16:12] <FromDiscord> <Rika> what made you choose nim
[09:17:18] <FromDiscord> <ordinate> looked neat, has anonymous functions, very good logo/name combo
[09:18:50] *** Quits: federico3 (~quassel@debian/federico) (*.net *.split)
[09:18:50] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[09:18:50] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[09:18:58] *** Joins: def-- (~def-@static.238.114.9.176.clients.your-server.de)
[09:19:03] <FromDiscord> <Rika> o ic
[09:19:17] *** Joins: federico3 (~quassel@debian/federico)
[09:19:22] *** def-- is now known as def-
[09:21:04] <FromDiscord> <impbox [ftsf]> Name length to feature ratio is great
[09:21:28] <FromDiscord> <Elegantbeef> Wonder if C or D wins that though
[09:21:34] *** Joins: dom96 (~dom@mail.nim-lang.org)
[09:21:49] <FromDiscord> <Elegantbeef> Nim needs 3 times as many features as those two
[09:22:02] <FromDiscord> <ordinate> thats why c++ is like that
[09:24:51] <madprops> nim is in the one syllable gang tho
[09:25:19] <FromDiscord> <Rika> c and d are also one syllable
[09:30:49] <FromDiscord> <JSONBash> ZIg is one syllable
[09:30:55] <FromDiscord> <JSONBash> and V
[09:30:58] <FromDiscord> <ordinate> same with Jot
[09:39:53] <FromDiscord> <JSONBash> sequtils provide some functional patterns
[09:40:04] <FromDiscord> <JSONBash> same with fusion patternamthcing
[09:57:25] <NimEventer> New thread by Puruneko: The correct way to use 'collect' as a function argument, see https://forum.nim-lang.org/t/8354
[10:32:32] <madprops> weird, why is title()  to capitalize every word part of unicode and not strutils?
[10:33:54] <FromDiscord> <Elegantbeef> Probably so it's unicode aware
[10:34:16] <FromDiscord> <impbox [ftsf]> my guess is that no one uses it, and if you were gonna use it, you'd probably want to be unicode aware
[10:35:05] <FromDiscord> <Elegantbeef> You're a bit more active as of late eh? 😀
[10:35:21] <FromDiscord> <impbox [ftsf]> aye
[10:35:45] <FromDiscord> <Rika> That’s good isn’t it
[10:35:59] <FromDiscord> <Elegantbeef> Well depends on how much you like impbox 😛
[10:36:15] <FromDiscord> <Rika> If it were you it would be bad
[10:36:37] <FromDiscord> <Elegantbeef> Well if i was even more active i'd have a sleeping problem
[10:36:49] <FromDiscord> <Rika> Don’t you already have one
[10:36:50] <FromDiscord> <impbox [ftsf]> left my job to have more time for my nim stuff, but ended up picking up some extra work, now i'm busier than before
[10:36:51] <FromDiscord> <Rika> I sure do
[10:37:03] <FromDiscord> <Rika> You LEFT YOUR JOB???
[10:37:24] <FromDiscord> <Elegantbeef> Nope i sleep fine 3am - 1pm like a nor... ok i have schedule issue
[10:37:27] <FromDiscord> <impbox [ftsf]> yea
[10:38:10] <FromDiscord> <Rika> Haha me with the even crazier 3 am to 9 am
[10:38:26] <FromDiscord> <impbox [ftsf]> i've picked up an almost normal sleeping schedule these days =\
[10:38:51] <FromDiscord> <impbox [ftsf]> what have i become??
[10:38:56] <FromDiscord> <Rika> Healthy
[10:38:59] <FromDiscord> <Elegantbeef> Was the intent to make a self published game will all that spare time?
[10:40:52] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:44:46] <FromDiscord> <impbox [ftsf]> nah
[10:44:53] <FromDiscord> <impbox [ftsf]> done enough of that
[10:45:05] <FromDiscord> <impbox [ftsf]> at least commercial games
[10:45:08] <FromDiscord> <impbox [ftsf]> just for fun now
[10:46:45] <FromDiscord> <impbox [ftsf]> will do a bunch of work on nico and nico+
[10:47:12] <PMunch> Nico+
[10:52:11] <NimEventer> New Nimble package! bs - A good alternative to Makefile., see https://github.com/maubg-debug/build-sys
[10:52:13] <nrds> <12R2D299> 4GitHub: 7"A recreation from Makefile made in nim!"
[10:53:33] <FromDiscord> <Elegantbeef> Nico++
[10:53:34] <FromDiscord> <Elegantbeef> What's nico+ ? 😀
[10:53:41] <FromDiscord> <Yardanico> Nim++
[10:53:53] <FromDiscord> <treeform> Nim#
[10:54:12] <FromDiscord> <impbox [ftsf]> close to nico API but hardware accelerated drawing
[10:54:13] *** Quits: sagax (~sagax@213.138.71.146) (Remote host closed the connection)
[10:54:23] <FromDiscord> <Elegantbeef> object nim
[10:54:23] <PMunch> ObjectiveNim
[10:54:37] <FromDiscord> <Yardanico> current Nim is SubjectiveNim
[10:54:39] <FromDiscord> <Elegantbeef> Ah that's what i figured
[10:54:46] <FromDiscord> <treeform> Nimtran 1977
[10:55:29] <PMunch> Pre-ANSI Nim
[10:55:45] <FromDiscord> <Elegantbeef> This is where i jokingly suggest you use truss for it to encourage me to expand it 😛
[10:55:58] <PMunch> truss?
[10:56:15] <FromDiscord> <Elegantbeef> My very inprogress start of a framework
[10:56:28] <FromDiscord> <impbox [ftsf]> I don't truss myself with it
[10:56:35] <FromDiscord> <Rika> Haha
[10:56:43] <FromDiscord> <Rika> 😐
[10:59:39] <FromDiscord> <Yardanico> rika and morty
[10:59:42] <FromDiscord> <Yardanico> I'll see my way out
[10:59:43] <FromDiscord> <treeform> In reply to @Elegantbeef "Let's look at treeforms": I am very surprised that array of two floats is slower then object with x, y members which is slower then object of array of two floats. I mainly keep the other representations around to see if other compilers like them better.
[11:00:12] <FromDiscord> <treeform> I make sure that all 3 representations keep working and pass the tests
[11:00:21] *** Joins: Vladar (~Vladar@46.162.2.53)
[11:01:41] <FromDiscord> <impbox [ftsf]> by how much?
[11:01:59] <FromDiscord> <treeform> like 10-20% based on operations
[11:02:10] <FromDiscord> <impbox [ftsf]> interesting
[11:05:07] <FromDiscord> <treeform> To see for yourself clone vmath repo and bench_raytracer with the different compile flags.
[11:05:30] <FromDiscord> <treeform> See timings here: https://github.com/treeform/vmath#vector-and-matrix-representation-and-benchmarks
[11:05:32] <nrds> <12R2D299> 4GitHub: 7"Math vector library for graphical things."
[11:05:52] <FromDiscord> <treeform> vmathObjArrayBased beats vmathObjBased
[11:05:58] <FromDiscord> <treeform> which really beats vmathArrayBased
[11:08:04] <FromDiscord> <treeform> I was benching glm vs vmath and glm was faster and I traced it to using object arrays: https://github.com/stavenko/nim-glm/blob/master/glm/vec.nim#L22
[11:08:11] <FromDiscord> <treeform> Now we are about the same speed
[11:10:03] <FromDiscord> <Elegantbeef> Have you checked with C to see if it also has speed differences on struct vs. array?
[11:12:02] <FromDiscord> <treeform> No. I am just lazy. Its very hard to check this kind of stuff small benchmarks.
[11:12:15] <FromDiscord> <impbox [ftsf]> yeah wow
[11:12:18] <FromDiscord> <treeform> Adding a million floats together just does not cut it.
[11:12:33] <FromDiscord> <treeform> You got to run it through a real program like a ray tracer
[11:12:42] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3wIr
[11:12:50] <FromDiscord> <treeform> yep
[11:12:51] <FromDiscord> <impbox [ftsf]> what is your problem arrays
[11:13:15] <FromDiscord> <treeform> they can't be copied by the compiler and require memcpy
[11:13:44] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3wIs
[11:14:14] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3wIt
[11:15:19] <FromDiscord> <impbox [ftsf]> `raytracer ......................... 84.732 ms     86.204 ms    ±1.042   x100`
[11:15:36] <FromDiscord> <treeform> In theory vmathObjBased should be same as vmathObjArrayBased, but they are not
[11:15:52] <FromDiscord> <treeform> Strange ah?
[11:16:40] <FromDiscord> <impbox [ftsf]> very odd indeed
[11:17:21] <FromDiscord> <impbox [ftsf]> with a 2 element array you think the compiler would just do what it does with a struct
[11:17:41] <FromDiscord> <treeform> well C does not allow =
[11:17:45] <FromDiscord> <treeform> struct = struct
[11:17:52] <FromDiscord> <treeform> but array = array does not work
[11:17:59] <FromDiscord> <treeform> and needs memcpy(array, array)
[11:18:05] <FromDiscord> <treeform> so that is why its slower
[11:18:13] <FromDiscord> <impbox [ftsf]> yeah but array[0] = array[0]; array[1] = array[1]
[11:18:17] <FromDiscord> <treeform> even if array is 8 bytes
[11:18:49] <FromDiscord> <treeform> I don't fully understand it though
[11:18:56] <FromDiscord> <impbox [ftsf]> i guess you could override the copy operator to just do it elementwise
[11:19:20] <FromDiscord> <treeform> see if that makes it faster?
[11:19:32] <FromDiscord> <treeform> modify the array branch in vmath
[11:20:25] <FromDiscord> <treeform> if obj of array is faster
[11:20:42] <FromDiscord> <treeform> that means all nim's objects that have members of one type would be faster when "arrayed"
[11:21:21] <FromDiscord> <treeform> can nim compiler just do that then?
[11:43:32] <madprops> .toTable([: string, tuple[uint8, uint8, uint8]])
[11:43:46] <madprops> am I supposed to add 'uint8 to every int in this big table?
[11:45:02] <FromDiscord> <Elegantbeef> or `u8` yes
[11:45:17] <madprops> any way around it?
[11:46:19] <madprops> maybe I'll try making the tuples an object
[11:46:44] <FromDiscord> <Elegantbeef> Well the table constructor needs better inference
[11:46:53] <FromDiscord> <Elegantbeef> But that requires someone smart enough to add it in
[11:49:10] *** Joins: max22- (~maxime@2a01cb08833598007fa303c2e950460a.ipv6.abo.wanadoo.fr)
[12:21:46] *** Joins: sagax (~sagax@213.138.71.146)
[12:34:17] <NimEventer> New Nimble package! commandant - Commandant is a simple to use library for parsing command line arguments. Commandant is ideal for writing terminal applications, with  support for flags, options, subcommands, and custom exit options., see https://github.com/casey-SK/commandant
[12:34:18] <NimEventer> New Nimble package! algebraicdatas - This module provides the feature of algebraic data type and its associated method, see https://github.com/chocobo333/AlgebraicDataTypes
[12:34:18] <NimEventer> New Nimble package! numToWord - Convert numbers to words, see https://github.com/thisago/numToWord
[12:34:20] <nrds> <12R2D299> 4GitHub: 7"Take command of your command line in Nim"
[12:34:20] <nrds> <12R2D299> 4GitHub: 7"<No Description>"
[12:34:21] <nrds> <12R2D299> 4GitHub: 7"Convert numbers to words"
[12:34:25] <FromDiscord> <Yardanico> triple kill
[12:49:26] <arkanoid> I need some help to get unstuck in my nim project about building xml schema data binding
[12:50:12] <arkanoid> I think I'm not applying the right parsing pattern here and I'm getting graph loops and things like that
[12:50:16] <FromDiscord> <haxscramper> In reply to @NimEventer "New Nimble package! algebraicdatas": I guess having pattern matching in fusion won't stop people from making own libraries with nearly identical functionality
[12:50:19] <arkanoid> I need a smarter way
[12:50:33] <emery> XML and smart don't mix
[12:50:38] <arkanoid> :-/
[12:50:59] <arkanoid> yeah, it sucks. I didn't know about how messy xml schemas was before beginning
[12:51:09] <emery> i regret how much time I've spent fight with xml
[12:51:17] <FromDiscord> <haxscramper> Though I can relate to the "internal implementation" todo in this package
[12:52:07] <arkanoid> emery: I fear I'm on same path. I feel like not up-to-the-task
[12:53:29] <FromDiscord> <Rika> Is anyone, really
[12:53:59] <arkanoid> but even if I've been following the official schema documentation, it's the parsing part that's weird
[12:55:24] <arkanoid> I'm thinking about using existing xml processors, but there's just xml->java and xml->C#. There's also a xml->c data binder but it's gpl and I prefer mit
[13:47:25] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[13:48:22] *** Joins: xet7 (~xet7@user/xet7)
[14:24:09] <FromDiscord> <dom96> In reply to @haxscramper "I guess having pattern": things in the stdlib also don't stop people making their own versions of things
[14:38:08] <NimEventer> New thread by FabienPRI: WriteLine end the line by \n Why not by \p (platform specific), see https://forum.nim-lang.org/t/8355
[15:21:52] <FromDiscord> <haxscramper> In reply to @dom96 "things in the stdlib": It really just means "official" realization is bad enough that someone is willing to reimplement it from scratch
[15:22:01] <FromDiscord> <haxscramper> Or they didn't know about official one
[15:44:33] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[15:44:51] <FromDiscord> <Yardanico> In reply to @haxscramper "Or they didn't know": in case of your pattern matching it's this one most probably :P
[15:46:15] *** Joins: audiophile_ (~audiophil@user/audiophile)
[16:03:50] <FromDiscord> <linux user> why is resolving a array index and overloading gc unsafe
[16:04:08] <FromDiscord> <linux user> do(a[1])
[16:04:32] <FromDiscord> <Rika> ?
[16:04:35] <FromDiscord> <Rika> needs more details
[16:05:55] <FromDiscord> <linux user> a is a seq[string]
[16:06:06] <FromDiscord> <linux user> do is a typical generic proc
[16:06:19] <FromDiscord> <linux user> and i use verbosity:3 to compile
[16:06:30] <FromDiscord> <linux user> it said GcUnsafe
[16:14:51] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:42:21] <FromDiscord> <konsumlamm> just show the code, this is not enough information
[16:50:40] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 240 seconds)
[17:02:47] *** Quits: max22- (~maxime@2a01cb08833598007fa303c2e950460a.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[17:18:17] *** Joins: max22- (~maxime@2a01cb08833598003b8195a36b8206ab.ipv6.abo.wanadoo.fr)
[17:27:43] <arkanoid> Error: recursion is not supported in iterators: 'walkTree' :..-(
[17:31:35] *** Joins: arkurious (~arkurious@user/arkurious)
[17:32:10] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[17:34:13] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[17:38:41] <FromDiscord> <konsumlamm> i think the issues is that recursion is not supported in iterators
[17:38:49] <FromDiscord> <konsumlamm> (edit) "issues" => "issue"
[17:39:15] <FromDiscord> <konsumlamm> maybe using closure iterators (i.e. adding a `{.closure.}` pragma) works
[17:47:32] <FromDiscord> <xflywind> Is the deprecation rule not recommended to use? I cannot find its docs
[17:47:42] <FromDiscord> <xflywind> Like {.deprecated: [fooA: fooX].}
[17:49:19] <FromDiscord> <xflywind> Its usage can be found in `std/mysql` and `libffi.nim`
[17:49:38] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[17:50:45] *** Joins: flynn (~mcbloch@user/flynn)
[18:03:34] <arkanoid> without recursive iterator, how would you walk a tree bottom up (leaf to root?)
[18:06:54] <arkanoid> wait, got nice answer https://forum.nim-lang.org/t/5697
[18:07:34] <FromDiscord> <Unaimend> sent a code paste, see https://play.nim-lang.org/#ix=3wK2
[18:07:48] <FromDiscord> <Unaimend> (edit) "https://play.nim-lang.org/#ix=3wK2" => "https://paste.rs/j4r"
[18:08:31] <FromDiscord> <Rika> `for x in seq.mitems`
[18:09:02] <FromDiscord> <Unaimend> ahh omg, thank you
[18:09:03] <FromDiscord> <Rika> m in mitems means mutable
[18:09:10] <FromDiscord> <Unaimend> totally forgot about that one
[18:09:15] <FromDiscord> <Rika> be careful on naming your thing `seq` btw
[18:09:27] <FromDiscord> <Unaimend> was just for exemplary purpose
[18:09:30] <FromDiscord> <Rika> okay
[18:10:15] <FromDiscord> <Rika> im not really a fan of the `items` iterator being implicit but not the others but oh well, it is a limitation of inference i assume
[18:10:42] <FromDiscord> <Rika> others -> mutables
[18:13:33] <FromDiscord> <Unaimend> I have trouble finding the doc entry for mitem?
[18:13:51] <FromDiscord> <Unaimend> nvm
[18:14:05] <FromDiscord> <Recruit_main707> its in the iterators page isnt it?
[18:14:28] <FromDiscord> <Unaimend> yes
[18:14:37] <FromDiscord> <Unaimend> I was looking at sequtils
[18:15:17] <FromDiscord> <Unaimend> I saw that list has its one ↵and assumed it would be the same for seq https://media.discordapp.net/attachments/371759389889003532/879360646234382389/unknown.png
[18:15:23] <FromDiscord> <Unaimend> (edit) 04removed "was looking at sequtils"
[18:15:35] <FromDiscord> <Unaimend> (edit) "one" => "own"
[18:16:31] <FromDiscord> <Rika> its part of openarray i would assume
[18:17:40] <FromDiscord> <Unaimend> Seems I "broke" the nim compiler 😂 https://media.discordapp.net/attachments/371759389889003532/879361245873053696/unknown.png
[18:18:19] <FromDiscord> <Unaimend> My own string view works like a dream ... not 😭
[18:18:35] <FromDiscord> <Rika> that doesnt look like a nim compiler issue
[18:18:56] <FromDiscord> <Rika> the error reads like "expected -> but got ->"
[18:19:37] <FromDiscord> <Unaimend> yes yes, but I wrote could which should not pass nim code gen
[18:19:45] <FromDiscord> <Unaimend> (edit) 04removed "yes"
[18:20:39] <FromDiscord> <Unaimend> I am sure when the c compiler emits a error there is a missing check in the nim compiler
[18:46:01] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:46:24] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[19:10:19] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3wKg
[19:11:07] <FromDiscord> <nekotohondana (nekotohondana)> @sn0re\:matrix.code0.xyz yes
[19:12:07] <FromDiscord> <enthus1ast> it should make sure that it does not get stuck in a loop, though
[19:13:04] <FromDiscord> <enthus1ast> so an artificial break condition should be applied
[19:17:37] <FromDiscord> <nekotohondana (nekotohondana)> @sn0re\:matrix.code0.xyz nice!
[19:22:01] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[19:23:27] *** Joins: NeoCron (~NeoCron@45.158.175.19)
[19:27:14] <FromDiscord> <nekotohondana (nekotohondana)> @sn0re\:matrix.code0.xyz than you.
[19:29:43] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[19:47:52] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[19:50:35] <FromDiscord> <nekotohondana (nekotohondana)> @sn0re\:matrix.code0.xyz thank you, that code must-have in http-request.mybe I always use it
[20:01:59] <arkanoid> I have "let myseq = @[Foo(bar: true)]". How can I pass myseq[0] to "proc myproc(arg: var Foo) = arg.bar = false" without making a copy so that the resulting value of myseq.foo is false?
[20:04:40] <FromDiscord> <Rika> simply `[]` should work
[20:05:28] *** Quits: beshr (~beshr@user/beshr) (Ping timeout: 252 seconds)
[20:06:28] <FromDiscord> <leorize> then `myseq[0]`
[20:07:01] <FromDiscord> <leorize> `var T` never copies
[20:10:31] <arkanoid> thanks, I was just confused by iteraring the seq with "for x in myseq"
[20:10:45] <arkanoid> the items iterator actually forces immutable
[20:10:57] <arkanoid> iterating using [] works
[20:11:23] <arkanoid> well, also mitems
[20:11:25] <FromDiscord> <Rika> `mitems`
[20:15:09] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 250 seconds)
[20:16:48] <NimEventer> New thread by Alexeypetrushin: How can I export module by name?, see https://forum.nim-lang.org/t/8356
[20:22:49] <FromDiscord> <dankrad> Does anyone know if this is possible?
[20:23:26] <FromDiscord> <leorize> can you link your PR?
[20:23:41] <FromDiscord> <leorize> the standard practice is to close then reopen the PR
[20:26:53] <FromDiscord> <dankrad> https://github.com/nim-lang/Nim/pull/18732
[20:28:12] <FromDiscord> <dankrad> it failed with a timeout while processing this test\: tests/vm/tslow\_tables.nim c
[20:30:05] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:37:10] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:40:24] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[20:41:28] *** Joins: xet7 (~xet7@user/xet7)
[20:43:25] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[20:44:35] <FromDiscord> <leorize> I triggered a re-run for you
[20:48:17] *** Quits: NeoCron (~NeoCron@45.158.175.19) (Remote host closed the connection)
[20:53:59] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[20:56:02] <FromDiscord> <dankrad> thank you!
[21:15:47] <FromDiscord> <trenta3> Hi! I just got started with Nim. What is the nim/nimble command to create a C source file of my binary?
[21:17:11] <FromDiscord> <undersquire> you just compile it normall and check your nim cache folder for the C files
[21:19:58] <FromDiscord> <Rika> please note that the c file emitted is not meant to be human readable
[21:20:13] <FromDiscord> <trenta3> In reply to @undersquire "you just compile it": I want to generate C source files for another OS and later compile those under the other OS where header files are there
[21:20:46] <FromDiscord> <trenta3> So obviously I cannot compile it normally since it wouldn't build under my OS
[21:20:46] <FromDiscord> <undersquire> In reply to @Rika "please note that the": will they ever improve its readability?
[21:20:54] <FromDiscord> <undersquire> or is that not a concern
[21:21:08] <FromDiscord> <undersquire> In reply to @trenta3 "I want to generate": you should be able to just compile those C sources anywhere
[21:21:55] <FromDiscord> <konsumlamm> In reply to @undersquire "or is that not": it's not really a concern, since they're not supposed to be readable in the first place
[21:22:46] <FromDiscord> <undersquire> yeah makes sense, as long as you were just working with the nim portion and didnt care about modifying the generated C sources
[21:23:48] <FromDiscord> <Rika> which is a majority of the users
[21:24:22] <FromDiscord> <undersquire> yeah
[21:24:27] <FromDiscord> <trenta3> In reply to @undersquire "you should be able": Thanks. I will try
[21:24:47] <FromDiscord> <undersquire> u will need nim installed on those systems since the C sources are using the nim headers
[21:32:00] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3wL6
[21:32:17] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 250 seconds)
[21:34:35] <FromDiscord> <dankrad> It failed at the same test again. Did I miss something? Or is this a new added test which currently always fails?
[21:37:56] <FromDiscord> <dankrad> Looks like this test isn't newly added. But I don't get why it's failing.
[21:38:15] <FromDiscord> <leorize> it's a Nim VM test that's very sensitive to performance changes
[21:38:46] <FromDiscord> <leorize> this includes the CI instance that runs the test, if it's a VM and the CPU is borrowed by an another VM for awhile, then that test can fail
[21:38:50] <FromDiscord> <leorize> it's pretty annoying tbh
[21:39:24] <FromDiscord> <Rika> is there any way to fix that issue
[21:39:34] <FromDiscord> <dankrad> means in my case that it just failed again? that it doesn't have anything to do with my pr?
[21:40:18] <FromDiscord> <leorize> yea, usually it has little to do with your PR, unless you modified the compiler vm
[21:41:55] <FromDiscord> <dankrad> well, i didn't. I just modified in `macros` the `customPragmaNode` function.
[21:44:08] *** Joins: rockcavera (~rc@192.12.112.204)
[21:44:08] *** Quits: rockcavera (~rc@192.12.112.204) (Changing host)
[21:44:08] *** Joins: rockcavera (~rc@user/rockcavera)
[21:44:50] <FromDiscord> <dankrad> Can we run it again, or do we need to wait until all other pr's are done?
[21:45:19] <FromDiscord> <leorize> sure, but let me review this first
[21:45:34] <FromDiscord> <dankrad> alright
[21:46:40] <FromDiscord> <leorize> damn, this function is a handful
[21:49:35] <FromDiscord> <cnerd> sent a code paste, see https://paste.rs/Mr6
[21:51:33] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3wLc
[21:51:50] <FromDiscord> <Rika> not for c interop
[21:52:05] <FromDiscord> <Rika> needs some pragmas for c interop (which i dont remember)
[21:55:41] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3wLd
[21:56:07] <FromDiscord> <leorize> please add `{.cdecl.}` or `{.nodecl.}` into that proc type detinition
[21:56:12] <FromDiscord> <leorize> definition\
[22:04:28] <FromDiscord> <retkid> do you think jnr-ffi will work with jnim for full interopability
[22:04:30] <FromDiscord> <retkid> (edit) "interopability" => "interoperability"
[22:04:35] <FromDiscord> <Rika> you can try]
[22:04:42] <FromDiscord> <Rika> unless youre asking because its hard to try
[22:04:50] <FromDiscord> <retkid> its not hard to try
[22:04:55] <FromDiscord> <retkid> in my head it should work
[22:05:01] <FromDiscord> <retkid> im just imagining the compile errors
[22:05:03] <FromDiscord> <retkid> :\
[22:07:26] <FromDiscord> <cnerd> sent a code paste, see https://play.nim-lang.org/#ix=3wLj
[22:08:01] <FromDiscord> <no name fits> What's the "normal" way to have different code in a debug and a release build with Nim?
[22:09:48] <FromDiscord> <dankrad> sent a code paste, see https://play.nim-lang.org/#ix=3wLk
[22:11:40] <FromDiscord> <leorize> [dankrad](https://matrix.to/#/@dankrad:matrix.code0.xyz)\: posted a review
[22:27:03] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[22:30:03] <FromDiscord> <dankrad> ah, ok. I'll check it out.
[22:30:12] <FromDiscord> <PizzaOfYeet> can discord bots be wrote in nim?
[22:30:16] <FromDiscord> <PizzaOfYeet> that could be cool
[22:30:31] <FromDiscord> <Rika> why not
[22:30:32] <FromDiscord> <Rika> yes
[22:30:48] <FromDiscord> <PizzaOfYeet> does it have a library for it or would i have to write my own 😢
[22:30:53] <FromDiscord> <Rika> dimscord
[22:31:14] <FromDiscord> <PizzaOfYeet> ty
[22:32:24] <FromDiscord> <PizzaOfYeet> i want to learn nim is there and good yt vids youd recomend?
[22:32:54] <FromDiscord> <Rika> i dont use youtube to learn programming languages
[22:33:15] <FromDiscord> <PizzaOfYeet> how do you learn?
[22:35:05] <nrds> <06Prestige99> @PizzaOfYeet https://www.youtube.com/user/kiloneie has good videos
[22:35:20] <nrds> <06Prestige99> But I mostly just look at https://nim-lang.org/documentation.html to learn
[22:35:32] <FromDiscord> <Rika> In reply to @PizzaOfYeet "how do you learn?": i port a project or read the documentation
[22:35:40] <FromDiscord> <PizzaOfYeet> ok
[22:43:39] <arkanoid> I've just met this weird compilation error "error: ‘colonenv_’ undeclared (first use in this function); did you mean ‘colonenv__2’? asgnRef((void**) (&(*colonenv_).resultSeq1), newSeq__Mf0PyLnsweB88symbTEJMQ(((NI) 0)));"
[22:44:05] <arkanoid> is this a compiler bug worth posting on github?
[22:48:25] <FromDiscord> <haxscramper> C codegen errors are always compiler bugs unless you do .emit.
[22:51:17] <arkanoid> let's see if it happens with dev, otherwise I'll bake a minimal version
[22:52:02] <arkanoid> yeah it happens in devel too
[22:54:31] *** Joins: audiophile_ (~audiophil@user/audiophile)
[23:01:15] <NimEventer> New thread by Apardes: Nested macro expansion order, see https://forum.nim-lang.org/t/8357
[23:06:38] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 250 seconds)
[23:17:46] <arkanoid> haxscramper: https://github.com/nim-lang/Nim/issues/18739
[23:22:08] <FromDiscord> <Yardanico> @arkanoid isn't it a duplicate of https://github.com/nim-lang/Nim/issues/18536 ?
[23:22:23] <FromDiscord> <Yardanico> actually even https://github.com/nim-lang/Nim/issues/14165
[23:23:13] <FromDiscord> <haxscramper> https://wandbox.org/permlink/IEPr1Tk86U1xp5wR
[23:23:21] <FromDiscord> <haxscramper> and try to minimize code in issues
[23:24:02] <FromDiscord> <Yardanico> @haxscramper it's even simpler than that, see the linked issues
[23:24:12] <FromDiscord> <haxscramper> I just randomly deleted code
[23:24:19] <FromDiscord> <Yardanico> :P
[23:25:18] <FromDiscord> <haxscramper> although this
[23:25:24] <FromDiscord> <haxscramper> does not trigger it
[23:25:25] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3wLy
[23:25:50] <arkanoid> Yardanico: you're right, my fault. I searched 'colonenv__' but nothing resulted, but now fear I did something wrong
[23:25:57] <FromDiscord> <Yardanico> colonenv with one underscore :)
[23:26:03] <FromDiscord> <haxscramper> but it is a "inline iterator with innner proc called twice"
[23:26:22] <FromDiscord> <haxscramper> (edit) "but" => "But" | "a" => "an"
[23:26:54] *** Joins: audiophile (~audiophil@user/audiophile)
[23:27:25] <arkanoid> haxscramper, are you sure that limiting code in working example is a good thing for an issue? I've been told more than once that giving context is better as it points to the intended direction of the programmer and helps devs to focus on what users are trying to do
[23:27:52] <FromDiscord> <Yardanico> well, it's good to minimize the code as long as you get the same crash/c compiler error
[23:28:06] <FromDiscord> <Yardanico> because in virtually every case it's some small part of the code triggering the issue
[23:28:30] <arkanoid> Yardanico: when I do that, I generally get "but what was you trying to achieve?"
[23:28:31] <FromDiscord> <haxscramper> if you have large piece of code it makes harder to pinpoint what causes it exactly
[23:28:48] <FromDiscord> <Yardanico> In reply to @arkanoid "<@177365113899057152>: when I do": weird, haven't seen that response in Nim issues
[23:29:10] <FromDiscord> <haxscramper> Smaller piece of code is also easier to understand
[23:29:14] <FromDiscord> <Yardanico> when asking in real time chats - yes, you might get that response, but the smaller the code to reproduce the issue is, the better for issues
[23:29:16] <arkanoid> yeah but I've already minimized. It's an extrapolation from a 700loc file
[23:29:35] <FromDiscord> <haxscramper> I cut it down twice by randomly deleting code so ...
[23:29:48] <FromDiscord> <Yardanico> yeah, that's what I was doing last year when testing random libs with ARC :P
[23:29:51] <arkanoid> I'll try to reduce even more than when posting on github, sorry for the verbosity and thanks for the hints
[23:29:54] <FromDiscord> <haxscramper> Hit it until it works and go back two steps
[23:30:35] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 250 seconds)
[23:30:36] *** audiophile is now known as audiophile_
[23:31:05] <arkanoid> yeah I know to reduce to barebone. I just left it in "working as intended" condition to expose intended purpose. Well, got it
[23:32:40] <FromDiscord> <leorize> reduce if you can but don't stress yourself too much on it
[23:51:25] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[23:51:49] *** Joins: supakeen (~user@python/site-packages/supakeen)
[23:59:08] <FromDiscord> <haxscramper> [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz)\:  I finally managed to test nimja - everything works just as I expected, and it looks it would be the thing I use for haxdoc and all my projects that require any sort of file templating.
