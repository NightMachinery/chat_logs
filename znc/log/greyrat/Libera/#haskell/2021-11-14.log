[00:03:40] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[00:06:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[00:07:01] *** Joins: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de)
[00:07:10] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-104.cust.tzulo.com) (Quit: Leaving)
[00:08:11] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[00:08:17] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de)
[00:11:43] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[00:12:14] *** Quits: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[00:16:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830)
[00:20:14] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:22:27] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[00:25:47] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[00:28:50] *** Joins: jkaye (~jkaye@2601:281:8300:7530:663a:b6d3:3081:a6b4)
[00:28:51] *** Joins: Vajb (~Vajb@npscn2i6yp8h48ih-3.v6.elisa-mobile.fi)
[00:31:47] *** Joins: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1)
[00:33:04] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:34:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[00:34:51] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[00:35:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830) (Ping timeout: 264 seconds)
[00:38:48] *** Quits: Vajb (~Vajb@npscn2i6yp8h48ih-3.v6.elisa-mobile.fi) (Ping timeout: 268 seconds)
[00:45:10] *** Joins: Vajb (~Vajb@2001:999:54:373a:391d:ee55:f345:f09a)
[00:48:07] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[00:48:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:49:34] *** Joins: etrepum (uid763@uxbridge.irccloud.com)
[00:49:56] *** Quits: Vajb (~Vajb@2001:999:54:373a:391d:ee55:f345:f09a) (Ping timeout: 265 seconds)
[00:51:03] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:51:20] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[00:51:48] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:53:21] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Client Quit)
[00:55:27] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[00:56:56] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[00:58:10] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[01:00:03] *** Joins: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99)
[01:01:31] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Quit: leaving)
[01:02:26] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[01:03:18] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:04:26] *** Quits: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99) (Ping timeout: 265 seconds)
[01:07:34] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[01:09:27] *** Joins: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99)
[01:16:25] *** Quits: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99) (Ping timeout: 268 seconds)
[01:22:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[01:28:04] *** Joins: Pickchea (~private@user/pickchea)
[01:29:28] *** Quits: Pickchea (~private@user/pickchea) (Remote host closed the connection)
[01:30:28] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[01:31:45] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[01:31:47] *** Joins: aegon (~mike@174.127.249.180)
[01:32:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:36:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[01:42:19] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Quit: Leaving)
[01:42:50] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[01:47:40] *** Quits: fendor (~fendor@178.115.56.25.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[01:54:10] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[01:56:50] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[01:58:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:58:57] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:01:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[02:04:00] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[02:04:00] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[02:04:02] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 260 seconds)
[02:04:03] *** allbery_b is now known as geekosaur
[02:04:25] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[02:07:11] <energizer> Hello. I'm interested in functional programming and performance. If I understand right, there are *some* algorithms whose fastest imperative implementation is significantly faster than the fastest functional version. Is there a good place to read about which algorithms are "solved" from this perspective and which are still slower than imperative?
[02:08:39] *** Joins: tfeb (~tfb@88.98.95.237)
[02:09:39] *** tfeb is now known as tfb
[02:09:48] <maerwald> what qualifies a functional algorithm? Recursive? No mutable updates?
[02:09:53] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:10:10] *** Joins: slice (~slice@user/slice)
[02:10:22] <geekosaur> https://en.wikipedia.org/wiki/Purely_functional_data_structure
[02:10:39] <geekosaur> which among other things links to Okasaki's thesis work on it
[02:10:50] <energizer> yes, no mutable updates
[02:10:55] <geekosaur> (also to his book but that's not free)
[02:10:59] <maerwald> geekosaur: that link doesn't seem to talk about algorithms
[02:12:09] <geekosaur> usually the algorithm falls out from the data structure, like how lists in Haskell are loops encoded as data
[02:12:34] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[02:12:38] <maerwald> can't relate
[02:13:36] <maerwald> I only remember the blog about quicksort in haskell and the argument that quicksort IS an imperative algorithm
[02:13:57] <maerwald> because it uses mutable updates 
[02:14:15] <maerwald> (which was then implemented via ST)
[02:14:45] <maerwald> but here you say *implementation*
[02:15:05] <maerwald> where I feel it's more like: there are two algorithms to solve the same issue, which one is faster?
[02:15:31] <maerwald> and I doubt there is an answer
[02:15:35] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[02:15:56] <energizer> i didnt know the word for what you're calling an "issue" so i used algorithm but yeah "algorithm" isn't the right word
[02:16:46] *** Joins: kadir (~kadir@78.178.105.36)
[02:17:42] <maerwald> I just feel the definitions aren't really precise enough to give useful answers
[02:19:11] <maerwald> is graham scan imperative or functional?
[02:19:22] <c_wraith> graham scan works fine either way
[02:19:28] <maerwald> yes
[02:19:39] <energizer> in other words - for each task, how much of a slowdown do you suffer if you disallow mutation
[02:19:46] <c_wraith> look at something like Tarjan's Union-Find for really wanting mutable data
[02:19:53] <energizer> some tasks the difference is small, for some big
[02:20:03] <energizer> i want to see a list
[02:20:21] <c_wraith> I doubt anyone's ever made such a list
[02:20:23] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[02:20:43] <maerwald> and even if you did... it's hard to attribute the performance difference to the paradigm
[02:20:49] *** Quits: pwug (~pwug@user/pwug) (Quit: Leaving)
[02:20:53] <energizer> is it?
[02:20:58] <c_wraith> it's the sort of thing you look at a description of the algorithm and go "how much does this depend on mutation of shared values?"
[02:21:09] <maerwald> energizer: well, which language/compiler etc are you using?
[02:21:53] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:22:00] <maerwald> and... what's really "functional" then? You're not producing code for functional architectures
[02:22:13] <c_wraith> maerwald: I really feel like you're working hard to ignore the core question
[02:22:44] <c_wraith> maerwald: "how much does the performance of these algorithms depend on mutation" is a perfectly fine question
[02:22:47] <maerwald> c_wraith: no, I reverse engineered some imperative algorithms to haskell that were "imperative" and I was never able to tell a difference
[02:22:56] <Franciman> maerwald: functional is theoretically sound
[02:23:15] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[02:23:28] <geekosaur> doesn't help that a compiler like ghc will happily optimize functional code to code that does mutations behind your back
[02:23:34] <energizer> i can tell the difference https://koerbitz.me/posts/Efficient-Quicksort-in-Haskell.html
[02:23:35] <maerwald> e.g. the half-edge algorithm
[02:23:45] <maerwald> (or data structure)
[02:23:49] <geekosaur> and purity gives it considerable leeway to do so, because it knows when it's safe
[02:23:53] <c_wraith> energizer: that's not really a fair question, as the Haskell version is *not* quicksort
[02:24:04] <maerwald> geekosaur: exactly
[02:24:07] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:24:20] <maerwald> so even if you did compare implementations, what are you really comparing?
[02:24:30] <maerwald> probably compilers?
[02:24:57] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:25:01] <energizer> some compilers exist and some don't
[02:25:05] *** Joins: pwug (~pwug@user/pwug)
[02:25:12] <c_wraith> why not do something obvious then?  Kruskall's algorithm on a complete graph, comparing a mutation-based union-find with one that uses no observable mutation?
[02:26:44] <c_wraith> (nevermind that you'd use Djikstra's algorithm in basically any real-world case)
[02:26:46] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:27:15] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[02:27:36] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 245 seconds)
[02:31:23] <dsal> energizer: I think your thinking is backwards.  It's not "how much of a slowdown do you suffer if you disallow mutation" it's "how many bugs do you need to think about if you allow mutation"
[02:31:50] <c_wraith> energizer: for what it's worth, it's known that under the Random Access Model, an algorithm containing no mutation will never be worse than an O(log n) factor additional work on top of an algorithm containing mutation. This comes from the fact that you can simulate mutable memory with a balanced binary tree.
[02:32:31] <dsal> We have things like ST that do allow us to put mutation in a box and implement an algorithm inside that box where performance matters, but it's far easier to get to a working solution, even in heavy concurrency and stuff when stuff you're referencing isn't being mutated under you.
[02:32:33] <energizer> dsal: i'm assuming correct code in my question
[02:33:01] *** Quits: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[02:33:10] <geekosaur> I feel like that's "point missed"
[02:33:37] <maerwald> mutation can be contained reasonably
[02:34:20] <energizer> geekosaur: i know functional code can be helpful for avoiding bugs but i dont want to introduce other dimensions into the question i'm asking about which is performance.
[02:35:00] <geekosaur> you're assuming they're disjoint, among other things
[02:35:11] <dsal> At a level up, do you want it to be easier to make something work correctly, or do you want it to be easier to make something faster?
[02:35:20] <dsal> Faster is interesting because fast enough is usually a pretty low bar.
[02:35:52] <energizer> that's not the situation i'm talking about. i'm talking about where "fast enough" is a high bar
[02:36:09] <dsal> I got tired of obscure, difficult to reproduce mosquitto bugs, so I wrote an mqtt broker in Haskell and didn't look back.
[02:36:33] <maerwald> c_wraith: that's interesting... I think that might be the only thing you can reasonably assess... "performance" is much more fuzzy. You could pick the same language for both implementations, but even then: maybe the language optimizes for one case better
[02:37:08] <maerwald> So you're always comparing compilers as well
[02:37:10] <energizer> c_wraith: i agree that is interesting
[02:37:11] <dsal> Too much hypothetical here.  Immutability makes some things faster.  It makes many things easier.  Sometimes mutating stuff makes things faster.  You can mutate things in those cases, but not completely freely.
[02:38:13] <energizer> dsal: right. i'm looking to fill in the "some things" and "many things" with some specifics
[02:38:32] <energizer> ie /which/ things and by how much
[02:39:08] <energizer> but c_wraith says probably there is no list of these, and i believe them
[02:39:28] <geekosaur> part of this is the question assumes there is a simple list. I'm not so sure it's simple
[02:39:32] <dsal> These mostly show up for me in doing Advent of Code or something.  Where you have a problem that requires mutating a vector or array in a loop and then yielding a result.  I'll do the easy thing first, get an answer/test case and stuff.  And then I'll rewrite it with ST and get a speedup.
[02:39:48] <dsal> It's more like, I encountered a problem and my solution isn't fast enough.  How do I make my solution faster?
[02:40:10] <dsal> There are lots of ways to speed most things up.  Most things don't need sped up, but when you have something that does, you have to consider what's making the particular thing slow.
[02:40:33] <dsal> Sometimes, you just have a bad algorithm.  Or you're doing some work more than you need to.  Sometimes, you just need to stomp on memory a lot because of how the problem was contrived.
[02:41:00] <energizer> this is all on the wrong track
[02:41:11] <energizer> anyway thanks c_wraith 
[02:41:45] <dsal> It's hard to get concrete answers to hypotheticals.  Better questions are "I don't think this code is fast enough.  How can I speed it up?"
[02:42:51] <dsal> Sometimes the answers are super not obvious.  Like, "Hey, if you use a lazy map here and deleted a bunch of that code there, your solution would be much faster."
[02:42:59] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:43:25] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[02:43:54] <energizer> on another topic. `foldr f (foldr f e ys) xs = foldr f e (xs ++ ys)` one of these is said to be "fused" but i dont know which one
[02:48:24] <dsal> That might be referring to  `{-# RULES "++"    [~1] forall xs ys. xs ++ ys = augment (\c n -> foldr c n xs) ys #-}`
[02:49:43] <maerwald> energizer: for example... I tried the example you linked and I can't observe the performance difference in the article
[02:50:46] <maerwald> on 135k integers, haskell is 1.34s and C++ 1.29
[02:50:56] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 245 seconds)
[02:51:29] <energizer> which haskell one? 
[02:51:34] <maerwald> https://koerbitz.me/posts/Efficient-Quicksort-in-Haskell.html
[02:52:19] <maerwald> but that post is almost 10  years old, so who knows which GHC  version was used
[02:52:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[02:52:35] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 264 seconds)
[02:54:12] <dsal> I imagine Haskell has improved more than c++ in that time.
[02:54:26] <geekosaur> c++ may actually have lost performance
[02:54:33] <[exa]> relevant: https://arxiv.org/pdf/1908.10926.pdf
[02:54:45] <geekosaur> I've seen a number of complaints about recent gcc/g++
[02:54:54] <maerwald> I'm using clang
[02:55:06] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[02:55:28] <geekosaur> davean would have some words about that, although I note that for the uses I have locally clang performs better than g++
[02:56:15] <geekosaur> (I should say clang++-compiled code performs better than g++-compiled code)
[02:57:41] <maerwald> and ghc-9.2.1 became slower too it seems :o
[02:58:27] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[02:59:21] *** Quits: etrepum (uid763@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:59:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:663a:b6d3:3081:a6b4) (Ping timeout: 245 seconds)
[02:59:56] *** Joins: jbox (~jbox@user/jbox)
[03:00:07] *** Quits: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1) (Remote host closed the connection)
[03:02:08] <maerwald> and ghc-8.8.4 is fastest so far
[03:02:19] <sm> :/
[03:02:40] <maerwald> 9.2.1 takes 1.4s, 8.8.4 1.07s
[03:02:44] <maerwald> that's large
[03:03:17] <maerwald> but maybe that's due to changes in inlining behavior or so... it changes frequently
[03:07:25] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[03:07:34] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:07:42] *** Joins: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net)
[03:08:39] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[03:10:49] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[03:10:57] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[03:12:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1)
[03:14:21] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[03:17:18] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 268 seconds)
[03:18:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:19:59] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Remote host closed the connection)
[03:21:24] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:23:10] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1) (Remote host closed the connection)
[03:26:44] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[03:29:58] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[03:29:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[03:30:01] *** allbery_b is now known as geekosaur
[03:30:04] *** Joins: jkaye (~jkaye@2601:281:8300:7530:3c34:ee17:936f:a727)
[03:34:19] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:35:17] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Ping timeout: 256 seconds)
[03:35:20] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[03:38:13] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[03:38:37] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[03:43:26] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[03:45:45] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1)
[03:46:09] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[03:51:09] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:53:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[03:53:26] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:56:32] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[03:58:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[03:58:36] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:59:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:59:54] *** Lord_of_Life_ is now known as Lord_of_Life
[04:01:08] *** Quits: msmhbvd^ (~msmhbvd@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[04:01:17] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[04:01:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391) (Ping timeout: 265 seconds)
[04:06:16] *** Quits: mmhat (~mmh@55d46755.access.ecotel.net) (Quit: WeeChat 3.3)
[04:09:34] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[04:09:45] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:13:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[04:14:31] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:18:21] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Ping timeout: 256 seconds)
[04:18:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[04:21:26] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[04:31:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:32:00] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[04:35:47] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[04:36:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:38:18] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[04:38:25] *** Joins: pavonia (~user@user/siracusa)
[04:41:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1) (Remote host closed the connection)
[04:42:36] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[04:45:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:45:55] <sm> soo.. haskell numbers defeat me again. I want to raise to a power, like ** 1.5. How do I make a `Floating a` ?
[04:46:24] <sm> also, which is the partial conversion function that should be avoided ? fromIntegral, fromInteger.. ?
[04:46:42] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 268 seconds)
[04:50:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[04:51:38] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[04:55:02] <sm> the answer seems to be: more fromIntegral
[04:55:53] <sm> `tot + round ( fromIntegral tot * 1 ** ((fromIntegral sp - 15) / 10) )`
[04:56:07] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[05:00:23] *** Quits: jkaye (~jkaye@2601:281:8300:7530:3c34:ee17:936f:a727) (Ping timeout: 264 seconds)
[05:01:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[05:01:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[05:06:39] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[05:06:39] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1)
[05:07:03] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 268 seconds)
[05:15:23] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[05:18:49] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[05:23:47] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[05:34:24] <monochrom> @quote monochrom fromIntegral
[05:34:25] <lambdabot> monochrom says: You've got an Int / But you want Double / Who do you call? / "fromIntegral!"
[05:38:07] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Read error: Connection reset by peer)
[05:42:07] *** Joins: notzmv (~zmv@user/notzmv)
[05:42:16] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:43:14] *** Joins: slice (~slice@user/slice)
[05:46:14] *** Joins: slice_ (~slice@user/slice)
[05:46:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[05:47:47] *** Quits: slice (~slice@user/slice) (Ping timeout: 264 seconds)
[05:49:12] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:50:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:51:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 264 seconds)
[05:54:54] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[06:00:35] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[06:12:16] *** Joins: retro_ (~retro@176.255.22.26)
[06:13:03] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[06:15:30] *** Quits: retroid_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[06:16:24] *** Joins: sander (~sander@user/sander)
[06:20:49] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:20:58] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[06:23:31] *** Quits: xff0x (~xff0x@2001:1a81:526d:df00:b864:176f:3a64:2e83) (Ping timeout: 268 seconds)
[06:24:44] *** Joins: atlas (~jbox@user/jbox)
[06:24:58] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7900:2980:608c:4201:500d)
[06:25:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:25:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 268 seconds)
[06:28:23] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[06:28:35] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[06:35:54] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:44:01] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[06:46:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:47:29] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:54:55] *** Joins: img (~img@user/img)
[06:55:40] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[06:57:02] *** Joins: wei2912 (~wei2912@138.75.71.147)
[07:00:04] *** atlas is now known as jbox
[07:00:14] *** jbox is now known as atlas
[07:00:31] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[07:01:33] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[07:01:45] *** Quits: retro_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[07:02:19] *** Quits: atlas (~jbox@user/jbox) (Quit: Leaving)
[07:02:56] *** Joins: retroid_ (~retro@176.255.22.26)
[07:03:23] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[07:06:43] *** Joins: jbox (~jbox@user/jbox)
[07:10:13] *** Joins: slack1256 (~slack1256@181.42.50.223)
[07:11:37] *** Quits: retroid_ (~retro@176.255.22.26) (Ping timeout: 268 seconds)
[07:14:49] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:18:33] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:20:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:25:35] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 264 seconds)
[07:28:22] *** Quits: td_ (~td@muedsl-82-207-238-039.citykom.de) (Ping timeout: 260 seconds)
[07:30:01] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[07:30:10] *** Joins: td_ (~td@muedsl-82-207-238-006.citykom.de)
[07:30:39] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[07:31:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[07:31:45] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:33:12] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:33:12] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:33:12] *** finn_elija is now known as FinnElija
[07:34:25] *** Quits: slack1256 (~slack1256@181.42.50.223) (Ping timeout: 256 seconds)
[07:35:22] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[07:36:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 264 seconds)
[07:45:20] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[07:51:38] *** Joins: retroid_ (~retro@97e2ba2e.skybroadband.com)
[07:55:23] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 256 seconds)
[07:55:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:55:57] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 256 seconds)
[07:56:29] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[08:01:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 264 seconds)
[08:05:03] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:c39d:a61d:4d11:1e35)
[08:07:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[08:10:07] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:c39d:a61d:4d11:1e35) (Quit: SeungheonOh)
[08:12:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 265 seconds)
[08:16:01] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:22:31] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[08:22:47] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[08:23:39] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[08:24:46] *** Joins: MoC_ (~moc@user/moc)
[08:24:51] *** Quits: MoC (~moc@user/moc) (Ping timeout: 256 seconds)
[08:24:58] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Client Quit)
[08:25:43] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[08:28:21] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[08:42:20] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[08:46:18] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 260 seconds)
[08:59:53] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:14:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:15:11] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[09:16:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:23:07] *** Joins: vicfred (~vicfred@user/vicfred)
[09:26:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:26:45] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[09:29:23] *** Quits: emergence (~emergence@vm0.max-p.me) (Quit: emergence)
[09:30:02] *** Joins: emergence (~emergence@vm0.max-p.me)
[09:34:00] *** MoC_ is now known as MoC
[09:35:56] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (Ping timeout: 245 seconds)
[09:50:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:51:10] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[09:54:54] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Ping timeout: 260 seconds)
[09:56:04] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[10:02:27] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[10:05:45] <energizer> takeWhile f = foldr (\x acc -> if f x then x : acc else []) []
[10:06:15] <energizer> can someone explain how that's proportional to the length of the output (not the length of the input)
[10:06:35] <energizer> i assume it's because of nonstrict, but i can't get my head around it
[10:07:41] *** Joins: EvanR (~evan@2600:1700:ba69:10:f592:1a89:999e:d55f)
[10:08:31] <energizer> ok maybe i get it now
[10:08:38] <energizer> that's crazy
[10:09:52] <energizer> ..it is because of nonstrict, right?
[10:10:27] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:10:59] *** Joins: benin2 (~benin@183.82.176.36)
[10:12:10] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 260 seconds)
[10:12:10] *** benin2 is now known as benin
[10:12:36] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[10:15:59] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 264 seconds)
[10:17:03] *** Quits: bbhoss (sid18216@tinside.irccloud.com) (Ping timeout: 256 seconds)
[10:17:47] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[10:17:52] *** Quits: slice_ (~slice@user/slice) (Quit: zzz)
[10:19:32] *** Joins: slice (~slice@user/slice)
[10:20:21] *** Joins: bbhoss (sid18216@tinside.irccloud.com)
[10:21:02] *** Quits: phma (phma@2001:5b0:2144:33f8:194f:6c28:dad5:4e86) (Read error: Connection reset by peer)
[10:22:26] *** Joins: phma (phma@2001:5b0:211f:46f8:6fa2:18b9:ccfa:b3da)
[10:34:05] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[10:35:38] *** Joins: mbuf (~Shakthi@122.178.124.57)
[10:37:02] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[10:39:21] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[10:39:41] *** Quits: [exa] (exa@user/exa/x-3587197) (Ping timeout: 264 seconds)
[10:40:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[10:44:40] *** Quits: slice (~slice@user/slice) (Quit: zzz)
[10:45:23] *** Quits: EvanR (~evan@2600:1700:ba69:10:f592:1a89:999e:d55f) (Ping timeout: 264 seconds)
[10:45:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 264 seconds)
[10:49:55] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[10:52:33] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[10:54:40] <c_wraith> energizer: yes.  It's because as soon as (f x) in the lambda returns false, acc is unused.  Recursion only happens in folder when acc is used.
[10:54:47] <c_wraith> *in foldr
[10:54:56] <c_wraith> I'm obviously thinking phonetically
[10:57:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[10:58:16] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[11:02:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[11:02:57] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:10:00] <energizer> ok
[11:10:53] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[11:11:37] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[11:18:49] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[11:19:08] <int-e> c_wraith: fold-arr ;-)
[11:20:27] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[11:23:52] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[11:29:38] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:29:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 265 seconds)
[11:31:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[11:34:20] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:37:25] *** Joins: anna_user2_ (~anna_user@207.181.251.46)
[11:38:11] <anna_user2_> I'm a beginner and I don't know how to call my function. I get "The IO action ‘main’ is not defined in module ‘Main’
[11:38:11] <anna_user2_> "
[11:39:51] <anna_user2_> error is pasted on tomsemeding
[11:41:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[11:41:13] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[11:41:49] <gentauro> anna_user2_: do you expose it? Like this? `module Main (main) where`
[11:43:43] <anna_user2_> I just said "main :: IO()" and "main = return()" and it compiles and links now. IDK if it is doing anything. I would like to load up an array and pass it to my funciton.
[11:44:57] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:45:59] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 264 seconds)
[11:46:19] <anna_user2_> Maybe I say "data = ..."?
[11:47:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:51:15] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[11:52:30] <anna_user2_> Can anyone please tell me how to create a small array of integers?
[11:54:22] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:54:50] *** Joins: kadir (~kadir@78.178.105.36)
[11:54:59] <anna_user2_> OK I may have created an array. I would like to dispaly it to the console
[11:56:51] <gentauro> anna_user2_: if you are using `return`, then you are a `function` of the Monad type-class
[11:58:03] <gentauro> please start the `interpreter` (if you use `stack`, it's like this: `stack ghci`). Then you can type: `:info Monad` and you will see: `class Applicative m => Monad m where … return :: a -> m a`
[11:58:04] <anna_user2_> I don't know if I need a Monday type-class. I just want to load up an array and pass it with an integer to my funciton, which inserts the integer
[11:58:23] <gentauro> so the correct syntax would be: `main = do return ()` as it seems that you are using `do-notation`
[11:58:41] <anna_user2_> Since I have no idea what a Monad is...
[11:58:42] *** Joins: nrl^ (~nrl@h50.174.139.63.static.ip.windstream.net)
[11:59:22] <gentauro> anna_user2_: then I would suggest you read this "online tutorial" first :) http://learnyouahaskell.com/chapters
[12:00:30] * gentauro I hope SPJ before leaving to play Fortninte that he renames the Monad type in Haskell to Monday :)
[12:02:41] *** Joins: [exa] (exa@user/exa/x-3587197)
[12:03:19] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[12:03:41] *** Joins: jbox (~jbox@user/jbox)
[12:07:35] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 264 seconds)
[12:07:35] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 264 seconds)
[12:08:17] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[12:09:59] *** Joins: amk (~amk@109.255.169.126)
[12:14:33] *** Joins: alzgh (~alzgh@user/alzgh)
[12:15:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d32:7961:c8e7:76c1) (Remote host closed the connection)
[12:19:37] <tomsmeding> Foldable -> Friday, Traversable -> Thursday?
[12:19:53] <tomsmeding> or rather Functor -> Friday
[12:21:23] <[exa]> constructing a haskellish advent calendar?
[12:21:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:22:55] <tomsmeding> [exa]: https://ircbrowse.tomsmeding.com/day/lchaskell/2021/11/14?id=271388#trid271388
[12:23:56] <[exa]> ah rofl.
[12:25:23] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[12:25:44] *** Joins: slice (~slice@user/slice)
[12:28:49] *** Quits: meridion (~meridion@punt.hetgrotebos.org) (Read error: Connection reset by peer)
[12:29:54] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[12:33:46] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[12:34:16] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[12:35:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[12:39:52] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:47:43] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:46] *** allbery_b is now known as geekosaur
[12:58:45] *** Joins: mmhat (~mmh@55d47fa1.access.ecotel.net)
[12:59:21] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[13:01:33] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de)
[13:10:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[13:12:24] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:13:28] *** Quits: nrl^ (~nrl@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[13:14:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Ping timeout: 245 seconds)
[13:16:35] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20)
[13:19:06] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:20:00] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:20:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20) (Ping timeout: 245 seconds)
[13:21:44] *** Quits: kadir (~kadir@78.178.105.36) (Quit: WeeChat 3.3)
[13:25:54] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:31:44] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[13:37:30] *** Joins: incendiary (~i@5.18.232.236)
[13:39:23] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7900:2980:608c:4201:500d) (Ping timeout: 264 seconds)
[13:39:45] *** Quits: MoC (~moc@user/moc) (Read error: Connection reset by peer)
[13:39:51] *** Joins: MoC_ (~moc@user/moc)
[13:40:10] *** Quits: MoC_ (~moc@user/moc) (Client Quit)
[13:40:12] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7900:fdd2:161e:af5e:122)
[13:41:45] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:02] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[13:55:03] *** Quits: slice (~slice@user/slice) (Quit: cya)
[13:58:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[13:59:16] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 245 seconds)
[14:00:13] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[14:04:27] <gentauro> tomsmeding: I like it :)
[14:13:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:15:00] *** Joins: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99)
[14:15:06] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[14:18:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:23:54] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7900:fdd2:161e:af5e:122) (Ping timeout: 268 seconds)
[14:24:24] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7900:8288:e51a:352c:7fbc)
[14:29:28] *** Quits: xff0x (~xff0x@2001:1a81:52ad:7900:8288:e51a:352c:7fbc) (Ping timeout: 268 seconds)
[14:30:34] *** Joins: Alleria (~textual@user/alleria)
[14:31:25] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:33:01] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[14:34:48] *** Joins: xff0x (~xff0x@2001:1a81:52ad:7900:8288:e51a:352c:7fbc)
[14:36:14] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:52:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:54:16] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 245 seconds)
[14:57:18] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[14:59:52] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:02:52] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:03:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[15:07:08] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[15:07:35] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[15:09:06] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[15:11:01] *** Joins: cheater (~Username@user/cheater)
[15:13:56] *** Joins: mei (~mei@user/mei)
[15:15:35] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c736cb18d4b31450c12316ac.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[15:18:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20)
[15:23:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20) (Ping timeout: 245 seconds)
[15:27:18] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[15:30:08] *** peutri_ is now known as peutri
[15:30:26] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[15:32:20] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[15:33:27] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[15:34:15] *** Quits: stevenxl (sid133530@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:34:24] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 256 seconds)
[15:34:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[15:34:28] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:39:04] *** Joins: __monty__ (~toonn@user/toonn)
[15:39:30] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[15:46:21] *** Joins: cheater (~Username@user/cheater)
[15:50:48] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[15:53:18] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[15:55:22] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[15:56:36] *** Quits: phma (phma@2001:5b0:211f:46f8:6fa2:18b9:ccfa:b3da) (Read error: Connection reset by peer)
[15:57:28] *** Joins: phma (phma@2001:5b0:210f:6c88:14c5:503:d6e5:c919)
[15:59:37] *** Joins: Lycurgus (~juan@98.4.112.204)
[16:01:44] <AndreasK__> Anyone have a good implementation of a "sized IntSet". Basically IntSet with size being O(1)
[16:02:36] <xerox> size is O(1) in IntSet
[16:03:08] <xerox> oh dang it's not!
[16:03:15] <Hecate> https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-IntSet.html#v:size
[16:03:18] <Hecate> nope
[16:03:19] <Hecate> :'D
[16:03:39] <xerox> I had this one in mind https://www.stackage.org/haddock/lts-18.16/containers-0.6.5.1/src/Data-Set-Internal.html#size
[16:03:42] <AndreasK__> xerox: If only it would be that easy :D
[16:04:00] <[exa]> O(1) size?
[16:04:01] <xerox> whereas theirs does work https://www.stackage.org/haddock/lts-18.16/containers-0.6.5.1/src/Data-IntSet-Internal.html#size
[16:04:35] <[exa]> can you just keep a counter next to the set?
[16:04:38] <AndreasK__> The code I'm looking at currently uses what amounts to `Data.Set Int` which isn't anywhere near optimal.
[16:05:03] <AndreasK__> [exa]: Yes. But the question is then how do you update the counter?`insert doesn't tell you if it modified the set.
[16:05:22] <[exa]> yeah you need to have a special insert that tells you :/
[16:05:49] <[exa]> anyway, there are weight-balanced trees somewhere in haskell (at least in Set), getting a size there is O(1)
[16:06:01] <AndreasK__> [exa]: Then there are more complex operations like union etc. It's not trivial. Which is why I would rather just use someone elses work haha
[16:06:08] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[16:06:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:06:40] <AndreasK__> [exa]: Yeah `Data.Set Int` works. But everything except size is just soo much slower than IntSet 
[16:07:25] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[16:08:44] <[exa]> AndreasK__: btw what's your usecase? there might be a specialzied approach
[16:09:07] <AndreasK__> [exa]: Looking at optimizing https://github.com/ghc/ghc/blob/c60652929ebd2510e52c05a2f61d52e2bf1846ad/compiler/GHC/Cmm/Expr.hs#L313
[16:10:19] <AndreasK__> [exa]: The set is used in dataflow analysis for things like liveness, we check if facts changed by checking if the size changed
[16:10:34] <[exa]> the RegSet is relatively tiny right? (less than 100 elements?)
[16:11:12] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:11:14] <AndreasK__> Not guaranteed but often yes.
[16:13:36] <[exa]> in that case you might just want to take a vector of ones/zeroes and some magic with fromEnum
[16:15:57] <[exa]> running through a continuous array of ~100 elements is usually faster on average than just jumping 2 pointers
[16:16:55] <AndreasK__> Given that as you traverse the programm you can encounter any "number" going forward I'm not sure how to construct such a magic function unless we go all the way to using a hashmap.
[16:18:18] <[exa]> I understood that GlobalReg and LocalReg are "finite" right?
[16:18:46] <AndreasK__> LocalReg represents virtual registers, of which there can be arbitrary many
[16:19:00] <AndreasK__> I've seen code where we can have >3k 
[16:19:18] <[exa]> ah okay
[16:19:49] <AndreasK__> GlobalReg is properly finite. But that's also not really causing performance issues.
[16:20:23] <AndreasK__> Yeah otherwise you could just compute a static mapping from Reg <-> Int
[16:20:56] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 245 seconds)
[16:21:05] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:21:17] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[16:24:21] <AndreasK__> I think in this case such a magic function would need to use a map internally, and you would end up with the same problem in a very roundabout way.
[16:25:19] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:30:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[16:30:50] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[16:31:49] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:33:15] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:35:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:38:43] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[16:44:04] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[16:44:40] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:46:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:46:39] *** Quits: nf (~n@monade.li) (Quit: Fairfarren.)
[16:47:18] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[16:47:30] *** Joins: nf (~n@monade.li)
[16:48:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:49:13] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:50:27] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[16:52:05] *** Quits: pwug (~pwug@user/pwug) (Remote host closed the connection)
[16:53:42] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[16:53:43] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[16:54:05] *** Joins: pwug (~pwug@user/pwug)
[16:54:34] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[17:01:30] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[17:03:48] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[17:04:47] <yin> do peano encoded nats "collapse" as they are evaluated? will `n > 9` be faster after i do `n > 7`?
[17:05:21] <yin> i know "collapse" may not be the right word here
[17:05:49] *** Joins: Everything (~Everythin@37.115.210.35)
[17:06:39] <hpc> the term to google is "thunk"
[17:07:23] <hpc> basically before something is evaluated, it's stored as a chunk of code that would compute the actual value
[17:07:36] <hpc> then once it's evaluated, as long as it stays in memory it doesn't have to be recomputed
[17:08:05] <hpc> how long it stays in memory is complicated, and what actually gets evaluated by each expression is complicated
[17:08:47] <yin> i guess what im asking is if `data Nat = Z | Succ Nat` will behave the same as `iterate succ 0`
[17:09:06] <hpc> oh, no it won't
[17:09:17] <hpc> you'll always have that chain of Succ
[17:09:38] <hpc> an equivalent operation would be turning a linked list into an array automatically
[17:09:48] <hpc> which ghc also doesn't do
[17:10:10] <hpc> however, you do get a built-in Natural type
[17:10:32] <hpc> which uses libgmp, so it's not a peano nat
[17:12:55] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Read error: Connection reset by peer)
[17:13:05] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[17:13:14] <yin> is that GHC.TypeLits.Nat ?
[17:14:25] <hpc> https://hackage.haskell.org/package/base-4.16.0.0/docs/Numeric-Natural.html#t:Natural
[17:14:46] <hpc> that one is for type-level nonsense :D
[17:16:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:16:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:17:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:17:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:17:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:17:36] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 245 seconds)
[17:17:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:17:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:18:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:18:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:18:47] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[17:19:09] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[17:19:36] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[17:19:56] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[17:20:34] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20)
[17:20:56] *** Joins: cheater (~Username@user/cheater)
[17:23:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:24:31] <yin> ok
[17:25:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20) (Ping timeout: 245 seconds)
[17:25:10] <yin> is there a way i can guarantee my program is total?
[17:26:07] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:26:54] *** skewerr is now known as spoonm
[17:27:28] <yin> meaning no `undefined`
[17:27:59] <hpc> that's equivalent to the halting problem, so no
[17:28:06] <hpc> maybe someday
[17:28:27] <hpc> there are other languages that deliberately fall just short of turing-completeness in order to have that guarantee though
[17:28:48] <hpc> they're usually used for theorem proving, but that's a whooooole other topic
[17:29:11] <yin> ah, no. i'm perfectly ok with non-termination. what i mean is no `error` or `undefined` as a result
[17:29:51] <hpc> ah, then sort of
[17:30:14] <hpc> you can have ghc warn on non-exhaustive patterns
[17:30:31] <hpc> and iirc error/undefined are covered by the safe haskell stuff
[17:30:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:30:51] <yin> what is "the safe haskell stuff"?
[17:31:08] <yin> is there a safe prelude?
[17:31:14] <hpc> you'll have to google it, i don't remember everything
[17:31:50] <hpc> ah, nvm, that doesn't cover error/undefined
[17:31:57] <hpc> it's just for type safety stuff
[17:33:25] <yin> i see
[17:35:32] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[17:40:10] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 260 seconds)
[17:40:48] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:46:04] *** Joins: EvanR (~evan@108-93-18-102.lightspeed.nworla.sbcglobal.net)
[17:50:44] *** Quits: EvanR (~evan@108-93-18-102.lightspeed.nworla.sbcglobal.net) (Ping timeout: 265 seconds)
[17:51:10] *** Joins: max22- (~maxime@2a01cb08833598006adbffa1edba2526.ipv6.abo.wanadoo.fr)
[17:56:50] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[18:11:52] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[18:11:58] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Quit: ZNC 1.8.2 - https://znc.in)
[18:12:07] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:13:04] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[18:15:02] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 240 seconds)
[18:15:05] <albet70> could fmap or >>= break in []? like in other languages "for i in alist: if i==0: break"
[18:16:28] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[18:20:58] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Quit: my macbook has gone to sleep zzz)
[18:21:22] <geekosaur> fmap can't really, althouhg you could fake it with a flag in the "accumulator"
[18:21:55] <geekosaur> >>= will stop that path if you fail, but it will still try other paths; this is what leads to "nondeterminism"
[18:23:23] <albet70> oh traverse may do the trick
[18:24:55] <albet70> break a loop or iteration is a very common need in most languages, and it's hard in haskell...
[18:25:23] <davean> albet70: its not hard - those aren't loops tohugh
[18:25:54] <davean> Theres nothing even sequential about them
[18:26:07] <davean> there as parallel as they are sequential
[18:26:19] <davean> Theres no order at all, and they might all happen at the same time
[18:26:24] <davean> THEY ARE NOT LOOPS
[18:27:10] <davean> There are not even related to loops in any meaningful way
[18:27:10] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[18:27:11] *** Joins: EvanR (~evan@2600:1700:ba69:10:a438:4841:cc0d:6c57)
[18:27:47] <albet70> for i in alist: if i==0: break else: f(i) if there's no 0 in alist, f will apply on every element, you say this is not loop?
[18:28:13] <davean> it is a loop, fmap and >>= are not
[18:28:23] <davean> in any way
[18:28:23] *** Quits: Vajb (~Vajb@2001:999:85:46d7:d6a4:d6c1:950b:ce99) (Read error: Connection reset by peer)
[18:28:38] *** Joins: Unhammer (~Unhammer@user/unhammer)
[18:28:56] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[18:29:02] <albet70> when they meet []
[18:29:35] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[18:30:03] <davean> I'm not sure what you mean by that, but if you're saying when they're on lists, no still no where related to a loop
[18:30:05] <davean> ENTIRELY different
[18:30:15] <davean> if you want a loop, use a loop
[18:30:16] <albet70> when m~[], what's the fmap's behavior?
[18:30:35] <geekosaur> sorry, I was thinking fold earlier, no9t fmap
[18:30:38] <davean> Nothing at all related to a loop
[18:31:02] <geekosaur> fmap can't be treated as a loop, as davean said. and >>= "follows all possible paths at once"
[18:31:28] <davean> I can talk aboutspecific implimentations, but fmap fmaps, which is closer related to opengl than a loop
[18:31:31] <davean> opengl has projections
[18:31:35] <davean> fmap is projective
[18:31:49] <davean> the actual evaluations, in GHC practice, will happen when they're looked at
[18:31:54] *** Quits: oats (~thomas@user/oats) (Quit: until later, my friends)
[18:31:58] <davean> the order is *entirely undefined*
[18:32:09] *** Joins: oats (~thomas@user/oats)
[18:32:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[18:32:59] *** Joins: gentauro (~gentauro@user/gentauro)
[18:33:20] <davean> haskell has loops, if you want that, use that 
[18:35:08] <davean> albet70: fmap is fairly closely related to projecting 3D objects into 2D space - this might be worth thinking on
[18:35:45] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[18:36:37] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[18:37:36] <albet70> what's the fmap function definition about []? I can't find it
[18:38:26] <albet70> https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-List.html#v:fmap
[18:39:50] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/Prelude.html#g:10 leads to a list of instances for Functor, all of which have Source links
[18:40:20] <geekosaur> which for instance Functor [] leads to https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/src/GHC.Base.html#line-1158
[18:41:08] <geekosaur> ("g:10" is "Monads and functors" in the sidebar for Prelude)
[18:42:04] <geekosaur> and I knew to look in Prelude because you don't have to import anything to use fmap
[18:43:33] <albet70> map f (x:xs) = f x : map f xs
[18:44:03] *** Joins: xkuru (~xkuru@user/xkuru)
[18:44:04] <davean> yep
[18:45:15] <albet70> it's recursive, not iteration
[18:45:28] <davean> Iteration is a special case of recursion
[18:45:38] <geekosaur> also that's because lists are defined recursively
[18:46:03] <geekosaur> data [] a = [] | a : [] a
[18:46:12] <davean> also thats not performing the fmap the way you probably think of it, its declaring what it is, and setting up the computation
[18:46:19] <albet70> "davean :Iteration is a special case of recursion", why you say that?
[18:46:32] <davean> Because all iteration is recursion but not all recursion is iteration
[18:47:06] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[18:48:15] <albet70> wait a sec, most languages support iteration, but not support TCO, you can't say all iteration is recursion
[18:48:37] <davean> Yes I can, look at what the loop is
[18:48:40] <davean> open up your assembler
[18:48:47] <geekosaur> tco does not define recursion, it merely limits how the language can optimize it
[18:49:02] <davean> your language HAPPENS to optimize loops specificly
[18:49:07] <geekosaur> tco is tail call *optimization*
[18:49:16] <davean> but if you look at the code generated, it is SPECIFICLY recursion
[18:49:28] <davean> thats the ONLY IMPLIMENTATION
[18:50:56] *** Quits: EvanR (~evan@2600:1700:ba69:10:a438:4841:cc0d:6c57) (Ping timeout: 268 seconds)
[18:50:57] <davean> They just don't have the power to optimize recursion *in general* so they give yo uspecial cases they CAN optimize
[18:51:40] <davean> and now we're out side of haskell in to basic CS
[18:51:56] <davean> https://en.wikipedia.org/wiki/Primitive_recursive_function
[18:52:02] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[18:53:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[18:53:51] <davean> but seriously, open up the assembly your compilers generate, what they'll have is a small piece of code for the body of the loop, and a (conditional) jump from the end to the start (or they'll have a condition at the start to leave it, and a non-conditional jump at the end)
[18:54:12] <davean> whats a jump? Its a TCO function call when tis to its parent function
[18:54:25] *** Joins: stef204 (~stef204@user/stef204)
[18:54:51] <yin> this pen is blue, so it follows that all pens are blue
[18:55:35] <davean> yin: sunrise problem :)
[18:55:47] <davean> I believe in this case its 50% probably all pens are blue?
[18:56:35] <davean> (Ok, that s a VERY reductive comment, but yours is too so ...)
[18:56:40] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:57:02] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:57:21] <maerwald> davean: are you a Popper fan too?
[18:57:57] *** Joins: gg (~gg@2a01:e0a:819:1510:9018:293a:5d7d:4597)
[18:59:22] <davean> maerwald: No idea what you're even talking about so no
[19:00:34] <yin> the criticism of inductive reasoning i think
[19:01:04] <maerwald> yeah, specifically "The Logic of Scientific Discovery"
[19:01:15] <maerwald> where he talks about the sunrise problem as well
[19:01:40] <davean> the sunrise problem is very well known in statistics?
[19:01:47] <davean> Its a classic problem
[19:02:21] <yin> maerwald: is davean's method inductive or deductive though?
[19:03:02] <yin> did he confirm his theory by looking at the assembly  ode or did he derive it from observation?
[19:03:21] <yin> s/ ode/code
[19:04:49] <maerwald> yin: well, Popper didn't really say that induction is wrong. Inductive thoughts are the basis for ideas and theories, it's just that they carry little value as a naked argument.
[19:05:34] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[19:05:40] <maerwald> he called it the "irrational moment" that happens when you "think up" a theory
[19:06:39] *** Joins: johnjay (~pi@192.142.100.50)
[19:07:01] <davean> I like the implication we have rational moments
[19:07:04] <maerwald> haha
[19:07:06] <davean> Its really optimistic
[19:07:52] <geekosaur> does it imply that, or that we have other kinds of irrational ity at other times?
[19:08:06] <davean> Good point
[19:09:13] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[19:09:42] <maerwald> Well, the idea was to very clearly distinguish the construction of a theory from the discourse of whether it has merits, especially in order to allow and encourage more radical scientific theories, without getting nonsense like "how did you think of that?".
[19:09:59] <maerwald> Like, it's really none of your business :D
[19:12:27] <davean> The more interesting question is how you didn't think of things
[19:12:31] <davean> thats where improvements are to be made
[19:12:42] <davean> like understanding the computational hierarchy in albet70's case
[19:15:33] *** Parts: Digit (~user@user/digit) (tidying)
[19:21:54] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:22:29] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:25:57] *** Quits: max22- (~maxime@2a01cb08833598006adbffa1edba2526.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:26:28] *** Joins: jkaye (~jkaye@2601:281:8300:7530:af2a:f6dc:e38f:a278)
[19:26:44] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[19:26:46] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 245 seconds)
[19:27:07] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[19:27:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:30:06] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Quit: You have been kicked for being idle)
[19:30:11] *** Joins: johnjay (~pi@192.142.100.50)
[19:30:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 265 seconds)
[19:33:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:35:27] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[19:41:46] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 245 seconds)
[19:42:30] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[19:42:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:44:55] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[19:45:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[19:48:48] *** Joins: bitmapper (uid464869@lymington.irccloud.com)
[19:49:12] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:185c:f2cc:27d3:da20)
[19:57:13] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[19:58:01] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 245 seconds)
[19:58:38] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[19:59:57] *** Joins: johnjay (~pi@192.142.100.50)
[20:02:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:02:45] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[20:03:00] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[20:05:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[20:06:28] *** Joins: johnjay (~pi@192.142.100.50)
[20:06:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[20:07:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:09:29] <yin> oh no i had to get away for a bit. i was enjoying the conversation
[20:09:50] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[20:10:29] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 268 seconds)
[20:10:36] <yin> davean: i'm curious to know in what context is "all iteration recursion"
[20:19:00] <Rembane_> yin: All kinds of iteration can be expressed as recursion. Not the other way around though.
[20:19:38] <Rembane_> Hm... lets just assume I'm wrong about that and say that iteration = recursion. 
[20:21:39] *** Joins: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de)
[20:21:45] <yin> all right. but can we have iteration without recursion?
[20:22:12] <jkaye> yin, in Haskell, or in general? I assume the former
[20:22:43] *** Joins: EvanR (~evan@user/evanr)
[20:23:09] <yin> my question is in which contexts can we make that argument and in which we can't
[20:23:26] <c_wraith> it's mostly a math thing
[20:24:00] <Rembane_> In C we can have iteration without recursion. 
[20:24:22] *** Joins: Guest89 (~Guest89@catv-89-134-211-102.catv.broadband.hu)
[20:25:29] <yin> Rembane_: davean's argument is that if you look at the assembly code you'll always see it as recursion. isn't that also true for C?
[20:27:41] <Rembane_> yin: It is? I gotta read some backlog. 
[20:27:43] <c_wraith> It's not really very interesting to argue about
[20:28:03] <c_wraith> because to make any headway, you need to define "iteration" and "recursion" precisely.
[20:28:15] <jkaye> You could write the loop in assembly without recursion using conditional jumps
[20:28:17] <c_wraith> And doing that generally removes any questions
[20:28:20] <jkaye> So, I'm not sure that's true?
[20:28:43] <jkaye> c_wraith, yeah pretty much what I'm saying as well, I think it's definitional
[20:29:02] <davean> jkaye: conditional jumps are conditional calls - a call is just a jump with register push
[20:29:22] <jkaye> And right there we get to c_wraith's point that it's all in the definition
[20:29:23] <yin> so my question becomes "what is the definitional difference between iteration and recursion we are assuming here?"
[20:30:28] <jkaye> Iteration and recursion are (I think) isomorphic in that they can freely be converted from one to the other. Saying one cannot exist without the other therefore I think doesn't make sense, since the definition of either could be written in terms of the other
[20:30:44] <jkaye> Regardless of which definitions we were to choose
[20:30:54] <davean> jkaye: you can't convert recursion (except primitive recursion) to loops
[20:31:01] <yin> ^ this
[20:31:41] <jkaye> I'm fairly sure you can by using a stack. Could be mistaken
[20:31:48] <davean> primitive recursion is exactly what you can do with loops
[20:31:59] <jkaye> Can you show a situation that cannot be converted? We should be able to prove with contradiction if that is true
[20:32:36] <geekosaur> make sure you look at not only the definition of primitive recursion, but also why there is a difference
[20:32:46] *** Joins: max22- (~maxime@2a01cb08833598007277439ba0202f1c.ipv6.abo.wanadoo.fr)
[20:32:58] <EvanR> the least defined thing so far is "loops"
[20:33:00] <yin> i'm looking up the definition of loop
[20:33:12] <yin> EvanR: exactly
[20:33:14] <EvanR> primitive recursion is cool
[20:33:31] <jkaye> Also, unrelated to all of this, but does anyone have a better way to do this? https://paste.tomsmeding.com/MppfHUD5 Thinking both towards efficiency and de-duplication of code if possible
[20:34:12] <jkaye> This one is a little more complete in case it helps https://paste.tomsmeding.com/fbVa3VZE
[20:34:15] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.3)
[20:35:10] <EvanR> I like how the idea of loops comes up in so many ways without needing a concrete definition
[20:35:42] <Guest89> j
[20:37:36] <EvanR> if the pesky professor didn't define algorithms as a *finite* list of steps for yadda yadda maybe we wouldn't need loops xD
[20:38:20] <yin> i'm curious to know how any usual definition of "loops" and "recursion" are different if we look at the actual way we run bits through logic gates. as i understand it, haskell translates recursive functions to loops wich can be then considered recursion
[20:38:42] <hpc> i wonder what the difference even is, between finite and infinite lists of steps
[20:39:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:39:21] <EvanR> presumably you can't load an infinite list of steps on a computer-- oh
[20:39:33] <Rembane_> Decidability? 
[20:39:54] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[20:40:06] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[20:40:12] <monochrom> Doesn't an x86 CPU interprets your recursive asm code by a loop, and that counts as converting recursion to iteration?
[20:40:24] <EvanR> yin: insisting on considering bits in gates and programming terms and recursion theory all at the same time seems... confusing
[20:40:25] <yin> it's never finite if we consider that any "finite" computation outputs something, even if in the form of photons that are transmitted to our brain that then continues a (mostly believed) infinite computation of the world
[20:40:42] <davean> monochrom: x86 doesn't have loops - I know no real archs with loops
[20:40:53] <davean> It only has call/jump
[20:40:54] <jkaye> That's why I was saying that I think the question is somewhat meaningless
[20:41:05] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[20:41:13] <monochrom> No I mean the microcode inside the CPU.
[20:41:13] <yin> monochrom: that's what i'm thinking, but by then we must consider a loop as something that's recurring in the machine
[20:41:25] <jkaye> davean, jump could easily be defined as a loop. You're saying "jump isn't loop" but you haven't shown why.
[20:41:38] <EvanR> first do you even have an understanding of the terms isolated to their own area
[20:41:48] <EvanR> before mixing them up and seeing if they explode
[20:41:49] <davean> jkaye: no it can't becasue its clearly mathametically more powerful
[20:41:52] <jkaye> You can't just keep saying "it is X" or "it is not X", there has to be a reason that's the case
[20:42:11] <davean> conditional jump is turing complete
[20:42:13] *** Joins: dankey (~dankey@85-250-184-204.bb.netvision.net.il)
[20:42:20] <yin> EvanR: i don't (have an understanding of the terms isolater to their own area)
[20:42:26] <jkaye> davean, if I can transform one to the other in practical space, I don't really care about the "mathematical power" of it :)
[20:42:29] <davean> jkaye: its mostly I'm really bored by basic discussions
[20:42:39] <EvanR> after enough time and no input from the outside world, any program with finite memory has to repeat, i.e. The Big Loop xD
[20:42:41] <jkaye> As am I by circular logic
[20:42:43] <davean> jkaye: mathematical pwoer says you can't do the conversion though
[20:42:52] <jkaye> So let's prove it by contradiction!
[20:43:03] <jkaye> I am happy to be wrong here, it's an interesting thought exercise
[20:43:19] <monochrom> The following may be serious or may be trolling, I haven't decided yet: No, looping plus stack plus stack smashing is more powerful than recursion, you now even have call/cc.
[20:43:24] <jkaye> We need a (working, in code) recursion implementation that cannot be converted to an iterative form
[20:43:33] <jkaye> C or C++ should suffice
[20:43:36] <dankey> test
[20:44:27] <davean> jkaye: yes, and I'm saying that is a standard basic CS topic - I linked you to primative recursion which covers which ones can'ty
[20:44:54] <davean> if you can't even read, then see the ackermann function - the classic example
[20:45:39] <EvanR> in before someone questions the church turing thesis
[20:45:47] <yin> :D
[20:46:07] <jkaye> You have posted no links, and apparently cannot engage in conversation without degrading into whatever that was supposed to be. Probably not worth interacting with you I suppose
[20:46:08] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:46:21] <yin> hey come on
[20:46:27] <davean> I'm really not interested in this interaction
[20:46:30] <yin> let's keep this entertaining
[20:46:32] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:46:44] <jkaye> Sorry yin, not worth my time for someone like that :)
[20:46:49] <jkaye> I was having some fun too
[20:48:49] *** Joins: jurjen (~jurjen@89-200-15-28.mobile.kpn.net)
[20:49:22] <yin> https://www.youtube.com/watch?v=i7sm9dzFtEI
[20:50:02] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[20:50:57] <monochrom> http://www.vex.net/~trebla/compsci/imperative-functional.html
[20:52:21] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Quit: leaving)
[20:53:03] <yin> and between these two links i think we can call it a day
[20:53:31] *** Quits: jess (~jess@libera/staff/jess) ()
[20:54:12] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Quit: ZNC 1.7.4 - https://znc.in)
[20:54:26] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[20:54:59] <EvanR> another gem from /~trebla/
[20:55:07] <monochrom> :)
[20:57:37] *** Quits: Guest89 (~Guest89@catv-89-134-211-102.catv.broadband.hu) (Quit: Client closed)
[20:58:14] *** Joins: Guest6622 (~Guest66@catv-89-134-211-102.catv.broadband.hu)
[20:58:40] <Guest6622> Hi, I'm not sure what keywords to search for: I'm looking for a typeclass family, that looks like Applicative&Monad, but has no pure/return or fmap
[20:59:17] <davean> what does that mean? what does it do? Maybe you mean something like semigroup/monoid?
[20:59:23] <davean> got something more concrete?
[21:00:08] <EvanR> a monad without pure is one thing but how could it not have fmap
[21:00:11] <Guest6622> Basically I want to keep all values inside the typeclass, don't want to be able to inject values (like return) or functions (like fmap)
[21:00:26] <davean> so how does it do anything at all?
[21:00:27] <Franciman> Guest6622: what about extracting things ?
[21:00:37] <davean> yah he could mean comonad
[21:00:42] <Franciman> can you have a function with type, w a -> a ?
[21:00:47] <EvanR> comonad has fmap
[21:00:50] <Guest6622> no extraction either
[21:01:02] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[21:01:37] <davean> Guest6622: so the only thing I can think of is semigroup/monoid
[21:01:44] <davean> but I have no idea what you're attempting to do
[21:02:19] <EvanR> so Guest6622 wants myMethod :: MyClass m => m a -> (a -> m b) -> m b, but no fmap
[21:02:42] <Guest6622> I'm trying to ensure isolation between the world inside the typeclass and the world outside
[21:02:47] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Ping timeout: 264 seconds)
[21:02:52] <EvanR> I'm guessing there are no known laws to follow xD
[21:02:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[21:03:23] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[21:03:55] <EvanR> since the correspondence between bind and join relies on fmap, and you don't want it, maybe you want join :: MyClass m => m (m a) -> m a instead?
[21:03:55] <davean> EvanR: but that injects a function?
[21:04:22] <EvanR> yeah it's not clear
[21:04:37] <Guest6622> EvanR: yes join seems like something I'd need
[21:05:03] <EvanR> It's hard to imagine using join a lot without fmap...
[21:05:03] <Guest6622> davean: could you elaborate? how does join inject a function?
[21:06:21] <davean> EvanR talked about >>=
[21:08:17] <EvanR> maybe you don't want a typeclass in the first place, it would be easier to know if you gave a better picture of the interface
[21:08:52] <Guest6622> as I imagine it, bind would no allow arbitrary function injection, like fmap, only a pre-defined list of API functions, that would allow controlled entry into the type
[21:09:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[21:09:44] <EvanR> no you can use any function with the right type
[21:09:48] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[21:10:04] <Guest6622> EvanR: possibly. The basic idea is: I want to build a world, with no entry or exit into "normal" haskell world
[21:10:06] <davean> he could name the functions in an associated data
[21:11:20] <Guest6622> EvanR: right, but if there's no return, you cannot create arbitrary functions that generate values inside the closed type, only combine functions from the API
[21:12:14] <EvanR> functions aren't what let you arbitrarily work on the type, that's determined by the type itself. Like do you expose the constructors or hide them and only expose operators
[21:12:46] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 265 seconds)
[21:12:51] <EvanR> user functions given to bind or fmap can't do anything not allowed by the type's API
[21:12:55] <Guest6622> a real world usage I can think of is an HSM or GPU, where you build up a world inside a separate system
[21:13:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:13:48] <EvanR> oh yeah, sort of like compiling to a different category by conal 
[21:14:01] <Guest6622> the type itself would not have constructors
[21:14:29] <EvanR> without changing the compiler you can't really stop the user form using haskell functions wherever they want
[21:15:02] <EvanR> within the code of some value
[21:15:10] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[21:15:18] *** Quits: dankey (~dankey@85-250-184-204.bb.netvision.net.il) (Ping timeout: 260 seconds)
[21:16:48] <EvanR> but maybe look at how this guy did it https://hackage.haskell.org/package/atom
[21:19:10] <EvanR> it looks like you write an Atom () action which when passed to compile, generates C code
[21:19:29] <EvanR> so it's ok if haskell code runs during that
[21:23:09] <Guest6622> yes, this looks like an instance for what I'd like. I was hoping for a higher level abstraction that would cover the general case (maybe it's the Conal reference you shared earlier, I just started processing it)
[21:24:52] <EvanR> there's a few shader DSLs on duckduckgo
[21:27:09] <Guest6622> I'm not much of a theoretician, so I was hoping someone already did the generalisations from these DSLs
[21:27:35] *** Joins: econo (uid147250@user/econo)
[21:31:42] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[21:34:11] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[21:34:41] *** Quits: jkaye (~jkaye@2601:281:8300:7530:af2a:f6dc:e38f:a278) (Ping timeout: 245 seconds)
[21:35:07] <yin> Guest6622: have you looked into GADTs to see if that's what you're after?
[21:38:11] <Guest6622> yin: as I see it, GADTs are useful when you're creating those DSLs. What I'm looking for is more a framework, that covers this kind of "a system separate from this" case.
[21:39:16] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[21:39:32] <Guest6622> not to say, that GADTs can't be useful for that as well, but they're lower level tool, than I was hoping already exists.
[21:40:11] <EvanR> the idea of "no entry or exit" seems kind of besides the point, since when you design a DSL part of the idea is you could have different interpretations for the DSL programs. Whether you could interact with something is part of the interpretation
[21:45:53] <Guest6622> mNo
[21:46:25] <Guest6622> it isn't besides the point to me :)
[21:47:15] <EvanR> if that is the only criteria... then it seems to me it leaves a lot of options open xD
[21:47:41] <Guest6622> what I'm trying to look at is what meaningful abstractions have already been built for these use cases
[21:48:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260)
[21:49:39] *** Quits: timCF (~timCF@m91-129-99-212.cust.tele2.ee) (Quit: leaving)
[21:49:44] <Guest6622> yes, and I don't have the capacity to research those open options myself, so I was looking for the giants to hop their shoulders
[21:50:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:51:23] *** Quits: alx741 (~alx741@181.196.68.187) (Ping timeout: 264 seconds)
[21:52:50] *** Quits: NinjaTrappeur (~ninja@user/ninjatrappeur) (Ping timeout: 268 seconds)
[21:55:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[21:55:43] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[21:56:55] *** Joins: NinjaTrappeur (~ninja@user/ninjatrappeur)
[21:59:10] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 256 seconds)
[22:05:44] *** Quits: mbuf (~Shakthi@122.178.124.57) (Quit: Leaving)
[22:05:50] *** Joins: alx741 (~alx741@181.196.68.69)
[22:07:43] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[22:09:59] *** Joins: deadmarshal (~deadmarsh@95.38.117.102)
[22:12:08] *** Joins: gaff (~gaff@49.207.207.122)
[22:12:17] *** Quits: gaff (~gaff@49.207.207.122) (Client Quit)
[22:15:16] <yin> is there any reason *not* to use {-# LANGUAGE Safe #-} ?
[22:15:27] *** Quits: incendiary (~i@5.18.232.236) (Quit: Lost terminal)
[22:15:52] *** Joins: Guest46 (~Guest46@apn-pool3-226-097.pennnet.nat.upenn.edu)
[22:15:54] <[exa]> useful instances of unsafePerformIO in libs
[22:16:11] <[exa]> also, (slightly faster) unsafe ops for vectors
[22:16:19] <geekosaur> all your imports have to be FFI-free or guarantee that all their FFI uses are safe, iirc
[22:17:10] <geekosaur> but a loot of things are done via FFI; I think this for example precludes ByteString and Text?
[22:17:29] <geekosaur> s/loot/lot/
[22:18:31] <yin> doesnt Safe allow for Trustworthy imports?
[22:18:53] <geekosaur> that's what "guarantee all their FFI uses  are safe" is
[22:19:00] <yin> right
[22:19:10] <geekosaur> the question becomes how well audited those libraries are
[22:19:45] <yin> so i should get into the habit of having it on by default
[22:19:56] <geekosaur> and whether their authors are willing to commit to their safety
[22:20:12] <geekosaur> which is more or less what they are doing if they declare themselves Trustworthy
[22:20:16] <yin> understood
[22:20:53] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[22:21:18] <yin> is there an extension for guaranteeing that i don't import functions that are either incomplete or explicitly return bottom values?
[22:23:43] <geekosaur> no
[22:24:33] <monochrom> {-# LANGUAGE Agda #-}  >:)
[22:26:39] <EvanR> that would be an interesting "guarantee"
[22:26:55] <EvanR> no obvious bottoms
[22:32:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:37:37] *** Quits: Guest46 (~Guest46@apn-pool3-226-097.pennnet.nat.upenn.edu) (Quit: Client closed)
[22:38:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:41:12] <yin> well, i figure it wouldn't be that hard. just a check at the type level that all polimorphic functions eventually resolve to some "bottomless" type. i'm excluding non-termination, of course
[22:41:55] <yin> s/functions/values ? (i don't really know what i'm talking about)
[22:42:13] <geekosaur> pattern match checking has been shown to be anything but easy and still misses some cases, I think
[22:44:54] *** Quits: deadmarshal (~deadmarsh@95.38.117.102) (Ping timeout: 260 seconds)
[22:45:06] *** Quits: alx741 (~alx741@181.196.68.69) (Ping timeout: 245 seconds)
[22:45:07] *** Quits: jrm (~jrm@156.34.187.65) (Remote host closed the connection)
[22:45:36] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[22:45:53] *** Quits: max22- (~maxime@2a01cb08833598007277439ba0202f1c.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:47:30] *** Joins: fef (~thedawn@user/thedawn)
[22:48:15] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[22:56:56] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[22:58:48] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[22:59:26] <yin> shame shame
[23:00:02] <geekosaur> the more complete you try to be about such things, the closer you get to the halting problem
[23:00:21] <geekosaur> it's much harder than you think even if you try to scale the problem down to supposedly manageable subsets
[23:01:34] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:01:50] <geekosaur> you end up doing what languages like agda do, restrict the scope of the language itself to prevent bottoms — but then you make the language much less usable
[23:03:39] *** Joins: max22- (~maxime@2a01cb088335980063a544fa463a8015.ipv6.abo.wanadoo.fr)
[23:03:54] <Franciman> much less usable how? You mean you found yourself in a situation where you couldn't write a program to solve your problem?
[23:04:30] <Franciman> or that it's harder? You should also consider that you can tweak agda to get correct by construction software
[23:04:43] <Franciman> up to agda bugs :P
[23:06:37] <geekosaur> but agda won't let you write some things unless you also write a proof that it will terminate
[23:06:54] <geekosaur> or that it won't bottom out some other way
[23:10:18] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:11:14] *** Joins: kuribas (~user@ptr-25vy0i7llzyvxfc43ot.18120a2.ip6.access.telenet.be)
[23:12:11] <yin> what's liquid haskell?
[23:12:36] <yin> what's -> how does it relate to this?
[23:12:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:12:54] <geekosaur> it's a preprocessor (which I think is being rewritten to a set of ghc plugins?) that adds refinement types
[23:13:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:13:24] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[23:14:31] <geekosaur> the problem with relating them to this discussion is that bottom is not a value, so cannot be captured or refuted by a refinement type
[23:16:16] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[23:18:56] *** Quits: jurjen (~jurjen@89-200-15-28.mobile.kpn.net) (Read error: Connection reset by peer)
[23:24:43] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[23:25:50] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-136.cust.tzulo.com)
[23:26:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:28:28] <dolio> Agda will let you write things that don't obviously terminate without a proof. It just won't let you give them a type that says they'll definitely terminate.
[23:28:46] *** Joins: Guest43 (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:29:39] *** Joins: alx741 (~alx741@181.196.68.69)
[23:30:15] <dolio> It'll even let you just declare that something terminates, too, strictly speaking.
[23:30:29] *** Joins: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net)
[23:32:54] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[23:33:36] <kuribas> I found the concept of "fuel" in idris interesting.  You can make a function that terminates given finite "fuel", and to make it run forever, you just give it infinite fuel.
[23:33:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[23:34:51] <kuribas> On the other hand, "terminating" functions may not practically terminate.
[23:35:03] <kuribas> As in they terminate but not in any reasonable time.
[23:35:06] *** Quits: yauhsien (~yauhsien@61-231-43-127.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[23:35:11] <dolio> Well, that's always been true.
[23:35:21] <hpc> a better term for it might be "productivity"
[23:35:30] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 256 seconds)
[23:35:38] <dolio> The Ackermann function is a terminating function, as far as type theory is concerned.
[23:35:53] <kuribas> So terminating functions are mostly useful for proofs?
[23:35:54] <hpc> you can define things that deal with infinite structures, but they have to always produce something at every step
[23:36:13] <hpc> filtering an infinite list needs to always have a next element, for instance
[23:36:15] <kuribas> streams are total in idris as well.
[23:36:25] <kuribas> As it knows you are not producing the whole list.
[23:36:46] *** Joins: juhp (~juhp@128.106.188.220)
[23:36:56] <kuribas> But that could rule out a function like "loeb".
[23:37:00] <dolio> Just because it doesn't solve all problems doesn't mean it's useless.
[23:41:35] *** Joins: wolfshappen (~waff@irc.furworks.de)
[23:48:29] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[23:49:54] *** Joins: aegon (~mike@174.127.249.180)
[23:50:36] *** Joins: jurjen (~jurjen@89-200-14-25.mobile.kpn.net)
[23:55:32] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-136.cust.tzulo.com) (Quit: Leaving)
[23:56:51] <kuribas> dolio: not useless, but heavy for what it gives.
[23:57:18] <kuribas> It may sometimes catch an accidental recursion, which is easy with lazyness.
