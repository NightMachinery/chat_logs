[00:19:22] <shka> ok, club-drf is actually worth something, but you ought to use other data for pruning then the training 
[00:19:26] <shka> which is kinda weird 
[00:20:09] <shka> i don't understand why using OOB for pruning makes such difference 
[00:23:26] <shka> also, if i use dynamic sampling alongside the pruning, i don't get any improvement from pruning
[00:24:19] <shka> which is a a problem, because i can use both for classification tasks 
[00:24:51] <shka> so there is very little reason to actually prune, unless you want very small random forest, like 5 trees or something 
[00:25:01] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[00:25:42] <shka> but omp is actually quite a bit different story 
[00:26:19] <shka> i will try my luck with stochastic gradient descent refinement of leafs 
[00:26:27] <shka> but that will happen next year
[01:01:46] <hayley> Who wants the SBC spreadshit <https://docs.google.com/spreadsheets/d/1lllQrIMf0-XMbRbkKqVBwdgSbgdFAW2P2yeDhHyt9Qw/edit?usp=sharing>?
[01:01:46] -ixelp- (Mostly) SBC Spreadshit - Google Tabellen
[01:02:06] <shka> hayley: i wanted, thanks
[01:02:10] <hayley> As per the name, it is shit and I really need to automate the process some day.
[01:02:35] <ck_> using XMACRO ?
[01:02:51] <hayley> Also, I only track 64-bit machines since SBCL doesn't do threads on 32-bit ARM.
[01:11:38] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:11:59] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:19:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[01:20:10] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[01:26:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[01:26:57] <gilberth> Why, no why, is Google using German?
[01:27:18] <semz> to be "smart" and "helpful" of course
[01:27:31] <hayley> https://www.youtube.com/watch?v=eUJ_ifjKopM
[01:27:32] -ixelp- Sparks - "This Town Ain't Big Enough For Both Of Us" (official video) - YouTube
[01:27:45] <semz> just like when it translates Youtube video titles from a foreign language you understand perfectly fine into complete gibberish English
[01:28:52] *** Joins: epony (epony@user/epony)
[01:28:52] <ck_> when babelfish (altavista?) was still a thing I used to run a translation backwards and forwards a couple of times to see what came out
[01:29:46] <ck_> "If one does not have a notion, simply free one, in order to hold"
[01:30:36] <gilberth> semz: And ignoring my Accept-Language header. Very helpful.
[01:30:40] <ck_> (from the original "Wenn man keine Ahnung hat ...")
[01:30:49] <gilberth> ck_: Is there a fix point?
[01:31:08] <ck_> gilberth: it usually converged into a 2 or 4 cycle
[01:31:43] <ck_> gilberth: also, fun quiz which I'm maybe repeating: can you guess which german word got translated by babelfish into "impactsuspect" ?
[01:33:07] <gilberth> Hmm. A tough one.
[01:33:41] <gilberth> Verdachtsmoment?
[01:35:26] <gilberth> ck_: Reminds me of my ex business partner. When I wrote a mail in English, you could read that by translating it back to German word for word. Otherwise it would read gibberish. I wonder how a non-German speaker could ever have figured out what he was writing.
[01:35:57] <ck_> gilberth: Verdachtsmoment is a nice guess, but in this particular case, incorrect. A hint: think "kitchen"
[01:36:25] <gilberth> Kitchen? Kidding? /me thinks harder.
[01:36:33] <ck_> kitchen as in ingredients
[01:36:51] <gilberth> Something edible?
[01:36:55] <ck_> yes
[01:37:09] <gilberth> This is 21 questions, right?
[01:37:27] <gilberth> A vegetable?
[01:37:35] <ck_> just tell me if you want the answer, it's maybe guessable, but very obscure
[01:37:44] <ck_> not a vegetable
[01:37:46] <selwyn> i wonder if i can get it before gilberth
[01:38:02] <selwyn> can of beans?
[01:38:32] <ck_> could come in a can, maybe, but not beans
[01:38:53] <ck_> (not that kind of can though definitely)
[01:38:54] <gilberth> ck_: Would vegetarians eat it?
[01:39:20] <semz> Is it a regional term? I have some suspicion what could have produced impact.
[01:39:57] <ck_> gilberth: refresh me on the difference between vegan and vegetarian please. vegetarians don't eat animals, but animal products are ok?
[01:40:17] <gilberth> ck_: Yep.
[01:40:17] <ck_> semz: not a regional term, the standard word for what it describes
[01:40:26] <ck_> gilberth: then yes, vegetarians would eat it
[01:41:01] <gilberth> ck_: Is it fat in the broadest sense?
[01:41:14] <ck_> gilberth: I guess so, in part, yes.
[01:42:20] <gilberth> But it is no animal part. Hmm... /me thinks still harder.
[01:42:50] <gilberth> Is it made from milk?
[01:43:04] <ck_> it is made from milk
[01:43:38] <MichaelRaskin> And it's something with Schlag?
[01:43:47] <gilberth> Schlagsahne?
[01:44:05] <ck_> gilberth: Yes! You got it.
[01:44:15] <semz> I should have gone for it
[01:44:23] <semz> How the fuck does sahne turn into suspect
[01:44:31] <ck_> Schlag's Ahne
[01:44:44] <dra> Mmmmh. Schlagsahne!
[01:44:45] <ck_> that's what I thought anyway, I can't be sure and babelfish isn't around anymore
[01:44:56] <ck_> to suspect -- etwas ahnen
[01:45:07] <gilberth> *kopfpatsch*
[01:45:10] <semz> amazing
[01:45:22] <ck_> definitely an entry in the sensible chuckles book though, I got a kick out of it
[01:45:38] <gilberth> That's wrong. It ought to be "Schlagahnung" then.
[01:45:41] <selwyn> 'the big bumper book of sensible german chuckles'
[01:46:23] <ck_> gilberth: that would be 'impactsuspicion' though, no?
[01:47:08] <gilberth> ck_: Right. How about "the suspect"? "Schlaggeahnter"?
[01:47:33] <dra> It could also be "the suspect".
[01:47:43] <dra> Schlagverdaechtiger.
[01:47:54] <dra> *Schlagverdaechtigter.
[01:47:56] <ck_> noch etwas schlagverdaechtiger zum strudel mein herr
[01:49:53] <gilberth> Anyhow, I give the credit to MichaelRaskin.
[01:50:48] <ck_> a group effort to be sure, and I hope it was entertaining. things like this can give you some reprieve from the horror-ai nightmares
[01:51:44] <edgar-rft> yummi, punchcream :-)
[01:54:29] <MichaelRaskin> I definitely do not remember enough German words for all the dairy I don't buy to find the proper word quickly
[01:57:00] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[01:57:23] <MichaelRaskin> My favourite Russian-English autotranslation question is how the hell translating manual of some translation software lead to the promise to «translate on summer»
[01:57:24] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:58:16] <MichaelRaskin> ck_: I think I have seen some autogenerated summaries from Google which quickly remind you about a horror-ai nightmare, just _a different one_
[01:58:46] <edgar-rft> Until the german reunion we had the amerian army in town and when speaking a foreign language you often have no time to think about the correct word, so it became my favourite hobby to talk with intentional wrong-translations to make them laugh :-)
[01:58:51] <MichaelRaskin> Not the AI that is smart and wants to kill humans, just an AI that is stupid enough to kill humans accidentally and given all the power to do that
[01:59:11] *** Quits: dra (~dra@2a04:4540:6407:f800:2d34:8e98:9953:8f90) (Quit: Leaving)
[02:03:59] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[02:04:14] <ck_> enter e-car autopilots
[02:05:18] * ck_ .oO( https://www.youtube.com/watch?v=9wXRahO5-t8 )
[02:05:24] <MichaelRaskin> A saving grace is that they have a pretty low comparison baseline, that being of humans and not the very best ones
[02:06:19] <ck_> so not the Vasili Arkhipovs of the world :/ a sad thought
[02:08:49] <ck_> (meaning that depending on the system in question, accidental murderbots could still be very devastating, especially the dumb ones) 
[02:09:21] <ck_> oh well. I'll go have my skynet nightmares now. have a good day or night!
[02:10:17] <hayley> https://www.youtube.com/watch?v=Ryc8gGfnL5M
[02:10:18] -ixelp- Pirates - YouTube
[02:10:25] <MichaelRaskin> Skynet is coherent. This is more of creeping mi-go
[02:36:11] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 252 seconds)
[03:01:47] <pl> Isn't it canonical (as far as terminator series have canon) that the original Skynet nuked everyone by kinda mistake? 
[03:02:00] *** Joins: dra (~dra@2a04:4540:6407:f800:8da5:1ae0:26e9:c499)
[03:46:12] *** Quits: dra (~dra@2a04:4540:6407:f800:8da5:1ae0:26e9:c499) (Ping timeout: 240 seconds)
[04:36:53] <hayley> Maybe? IIRC one timeline Skynet regrets it, but in the 2008 movie one it's pretty proud of going to kill all the humans.
[04:38:33] <hayley> Terminator Salvation?
[04:39:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:38:38] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[05:39:09] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:16:27] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 250 seconds)
[06:33:02] <hayley> aeth: What's funny about Nock on Urbit is that there are like 12 instructions, but you have to special case (aka jet) several instruction sequences to get decent performance. So the only reason they don't add more instructions, and hide the complexity in jets, is to appeal to minimalism.
[06:33:33] <hayley> (Nock being the VM language of Urbit)
[06:34:07] * hayley notes aeth might not be here. Still funny.
[06:34:47] <moon-child> wasn't that riscv's bet as well?  Simplified ISA, heavy reliance on fusion
[06:36:18] <moon-child> orthodoxy seems to be that expanded instruction set is better in practice.  But I guess it is too early to draw conclusions.  Regarding urbit: does anybody actually take that seriously?
[06:36:28] <hayley> Yeah, but this is way worse. Like 1- is a loop.
[06:36:36] <hayley> I can think of a few people.
[06:37:31] <moon-child> tbf 1- has to be a loop anyway ... if you have bignums
[06:37:37] <drakonis> ah urbit.
[06:37:47] <drakonis> and that's not even the worst thing about it
[06:37:52] <hayley> i.e. someone has to detect that (defun decrement-loop (x guess) (if (= (1+ guess) x) x (decrement-loop x (1+ guess)))) (defun decrement (x) (decrement-loop x 0)) should be compiled to SUB x, 1
[06:38:26] <hayley> Much worse than bignums, much worse than RISC-V. This is literally O(n) where n is the value of an integer, not bit length.
[06:38:54] <moon-child> So, addition is also a loop (as in peano)?
[06:38:55] <hayley> So any useful implementation has to fuse a whole damn loop.
[06:38:59] <hayley> Yes.
[06:39:15] <moon-child> ._.
[06:40:41] <hayley> https://urbit.org/docs/nock/example how to decrement, https://urbit.org/docs/vere/jetting how to perform fusion in the C implementation
[06:40:42] -ixelp- Example • Documentation • urbit.org
[06:42:53] <hayley> I'm very biased, but that, even with 4.6× as many instructions, the Netfarm VM is simpler to use. You can write an interpreter which naively interprets bytecode at 60-80 MIPS on a desktop. 
[06:44:20] <moon-child> yeah.  S7 has thousands of instructions
[06:44:53] <hayley> And worse, the fusion recogniser in the C Nock implementation is very literal, and won't fire if you have a different way of writing 1-.
[06:45:21] <hayley> I just have 56 instructions, but many are pretty repetitive, which is why the spec is full of shorthand.
[06:48:56] <hayley> https://cal-coop.gitlab.io/netfarm/documentation/Netfarm_script_machine.html#%28part._.Operators%29
[06:48:57] <drakonis> is nock anywhere interesting beyond being a turing tarpit?
[06:48:58] -ixelp- 5 Netfarm script machine
[06:49:41] <drakonis> also its very very horrid heritage?
[06:49:58] <hayley> Hypothetically, it's a neat backend for a functional programming language. And hypothetically there's some crap about owning one's own server, which involves using a dubiously optimised VM.
[06:50:48] <hayley> I also based my VM off that in Structure and Interpreter of Computer Programs and the SECD machine, so that it wouldn't be too unfamiliar to hobby compiler writers.
[06:50:50] <drakonis> the design seems to remain entirely informed by its creator's entirely dubious philosophy
[06:51:46] <hayley> aeth and I are only "interested" because of the feudalist wet dreams of the creator(s), but I've decided to ignore that part while discussing the VM.
[06:51:54] <drakonis> i see
[06:51:56] <drakonis> fair enough
[06:52:03] <drakonis> the creator though
[06:52:30] <drakonis> but i suppose we don't have to talk about that because it is heavily documented at this point
[06:53:04] <drakonis> netfarm seems pretty fun though
[06:53:27] <hayley> Eh, I retired from it.
[06:54:14] <hayley> Making a correct and space-efficient object proof/synchronisation system is hard, and it's a very unappreciative job.
[06:54:20] <moon-child> ‘Note that ∣a∣ can be out of bounds when a is in bounds; which is when a = -(2²⁵⁵)’
[06:54:26] <moon-child> You hypocrite!
[06:55:05] <drakonis> written entirely in common lisp, fun.
[06:55:11] <drakonis> not unsurprising though
[06:55:26] <hayley> I basically specified a sign-magnitude system with a sign and 256 bits of magnitude, so that this wouldn't happen, but then decided someone would get mad with me that numbers don't fit in (SIGNED-BYTE 256).
[06:55:38] <hayley> s/basically/once more or less/
[06:56:01] <gilberth> I would get mad because of -0.
[06:56:07] <moon-child> yeah but, why not bigints?
[06:56:12] <drakonis> what's s7 btw?
[06:56:36] <moon-child> gilberth: meh, can filter it out
[06:56:38] <moon-child> drakonis: https://ccrma.stanford.edu/software/snd/snd/s7.html
[06:56:39] -ixelp- s7
[06:56:41] <hayley> gilberth: -0 = 0 still, you'd just have the range of 257-bit sign-magnitude.
[06:57:07] <drakonis> ooo this is very impressive
[06:57:16] <moon-child> gilberth: also kahan claims you need -0.  I am unconvinced by his arguments; but I am not qualified to opine on them
[06:57:19] <hayley> moon-child: So that the amount of work done remains proportional to the number of instructions executed, which is necessary to not blow the heap or waste someone's CPU time.
[06:57:47] <moon-child> hayley: then the instruction set should rather expose machine-sized integers and allow bigints to be implemented in software
[06:57:59] <hayley> Admittedly, stuff like EQUAL doesn't do that. Hm.
[06:58:13] <hayley> Did I say designing it was hard?
[06:58:16] <moon-child> (or use some other method for accounting, which probably makes more sense)
[06:58:20] <drakonis> hayley: yes
[06:59:23] <moon-child> also addition and subtraction at least are linear.  Multiplication and division ... are not
[06:59:27] <drakonis> what is the deal with clojure and why do i feel so tempted to use it
[06:59:28] <hayley> Could make the user implement their own EQUAL, provided I have a shallow EQL instruction.
[06:59:39] <drakonis> even though i think common lisp is going to be a lot more fun to play with
[06:59:54] <hayley> You didn't develop a concept of object identity or permeance as a toddler? scnr
[06:59:58] <gilberth> [IIRC Pascal says that ABS(X) is defined when X is of type INTEGER.]
[07:00:28] <drakonis> scnr?
[07:00:33] <drakonis> more like smdh
[07:00:56] <hayley> "Sorry, couldn't resist"
[07:01:06] <moon-child> non-constant-time instructions w/alternate accounting is definitely faster.  The problem then is you need to be able to suspend in the middle of an instruction.  Hmm.
[07:01:13] <drakonis> wow rude
[07:01:36] <drakonis> i guess clojure seems to be the hip thing right now
[07:01:37] <moon-child> x86 exposes that with REP, but forces you to give it somewhere to store its state.  That is hard for comparison of a graph
[07:02:00] <moon-child> hayley: btw, read baker thing on eq/equal w/ mutable/immutable data structures?
[07:02:11] <hayley> Read it, yes.
[07:02:24] <drakonis> seems popular or whatever
[07:02:25] <moon-child> gilberth: k uses two's-complement, but reserves the minimal value as a null so the range is symmetrical
[07:02:30] <drakonis> great for java haters
[07:03:17] <hayley> One problem is that, if I don't expose object identity, then the user cannot implement an EQUAL that avoids repeated work on shared structure.
[07:04:00] <drakonis> i'm sure i'm inserting myself on a conversation i have zero knowledge on to participate is rude as fuck
[07:05:05] <hayley> That's similar to the other hard part, if I have a cache of objects in memory, and some more on disk, I need to bill the VM for objects loaded somehow. But it'd be rude to bill for every load, if it's already in memory, but the charge has to be deterministic. So I need to pretend I have a cache per VM and bill against that.
[07:05:23] <drakonis> s7's svn repository is very difficult to read lol
[07:05:28] <drakonis> every commit is titled "bugs"
[07:06:17] <hayley> moon-child: My only inspiration so far has been how Ethereum handles charging for "gas" of a VM execution. But I have a fixed limit rather than having the user burn some amount of cryptocurrency proportional to VM time.
[07:07:14] <hayley> How much CPU time and memory you burn is probably just a control problem, as the upper bounds is proportional to how many objects you process at a time.
[07:07:23] <moon-child> I see
[07:07:46] <moon-child> (and presumably rather than just 'fixed' it's user-configurable, can restart if it runs out of gas but you want it to keep running etc.?)
[07:09:03] <hayley> It'll depend. (I say this like I'll ever work on it again.) Any background work done by the network is definitely a fixed limit, but I'll probably have a configurable MIPS if one wants to run interactive programs in the VM.
[07:09:21] * moon-child nods
[07:10:18] <hayley> Also, another funny thing is that Urbit didn't learn from IPv4 and only has 2³² identities. Which is about half the world population today. Oops.
[07:10:43] <moon-child> lol
[07:11:01] <moon-child> weren't they the ones that wanted to have organizational structures extending to planets, solar systems, galaxies, ..?
[07:11:02] <drakonis> i'm pretty sure its in like with its creator's philosophy
[07:11:15] <hayley> I'm afraid to check.
[07:11:18] <drakonis> it was originally not named after stars
[07:11:30] <drakonis> pretty sure it was some feudal looking shit
[07:12:23] <hayley> But I sorta like my idea that this sort of replicated object system is a free public utility which runs in the background. And anyone can contribute redundancy, with arbitrary limits they set.
[07:12:37] <hayley> drakonis: https://wejn.org/2021/02/urbit-good-bad-insane/ seems like the famous anti-introduction to Urbit.
[07:12:38] -ixelp- Urbit :: the good, the bad, and the insane | Wejn.org
[07:12:50] <drakonis> there's an older one iirc
[07:13:10] <drakonis> even less kinder
[07:13:37] <hayley> "See, Nock has one arithmetic operation, increment (x+1). So if you want to decrement x, you have to loop from 0 to x-1. Or you can break your promise of throwing away all the code from ’70s… and implement decrement in C." Beat me to that critique. But no fun if you have to special-case things to get from O(n) to O(1).
[07:14:08] <hayley> I can live with immutable data and converting a O(1) -to-update array to a O(log₃₂ n) -to-update HAMT, but O(n) is ridiculous.
[07:14:32] <drakonis> i still don't appreciate the way nock is designed
[07:15:03] <drakonis> its very intentional that it looks like line noise and is a turing tarpit
[07:15:28] <moon-child> ‘I have yet to see the world in which an unflattened tree behaves comparably to an array’  why do people say things like this
[07:16:10] * moon-child really ought to try harder not to get into such arguments with people on the internet
[07:16:42] <hayley> More pointers to chase; I tried to implement a ctrie before Cliff Click's table, and the performance was mediocre.
[07:17:09] <gilberth> moon-child: I just read the ISO Pascal Standard. Pascal has a constant MAXINT and INTEGER is defined as INTEGER = -MAXINT..MAXINT. It doesn't state or imply any particular representation at all. (There are no bit-wise logical operators).
[07:17:43] <drakonis> moon-child: where is this
[07:18:00] <drakonis> https://github.com/mbrubeck/urbit/blob/1bc9086a3fd62594e8bd631744cb9bf804f6a43b/Spec/urbit/3-intro.txt#L84-L94
[07:18:01] -ixelp- urbit/3-intro.txt at 1bc9086a3fd62594e8bd631744cb9bf804f6a43b · mbrubeck/urbit · GitHub
[07:18:09] <moon-child> hayley: sure, pointers _may_ be slow.  But that doesn't mean they _must_ be
[07:18:16] <hayley> Sure.
[07:18:17] <gilberth> I doubt that many Pascal implementation on two-complements computers would respect that.
[07:18:17] <drakonis> oh good, the feudalism naming scheme is still readable if you look into the repository's history
[07:18:17] <moon-child> gilberth: how do they handle overflow?
[07:18:28] <drakonis> look at this shit man, and tell me
[07:18:35] <drakonis> how is this not digital feudalism
[07:18:41] <gilberth> moon-child: You don't. You get a run time error, crash, and burn.
[07:18:56] <hayley> "3. Fort allocation - digital feudalism"
[07:19:06] <drakonis> thanks moldbug
[07:19:07] <hayley> I don't think you can say it's not digital feudalism - it literally says it is.
[07:19:15] <moon-child> gilberth: then detection of overflow is more expensive than with -MAXINT-1..MAXINT on most modern hardware :/
[07:19:18] <drakonis> they rebranded to a sea theme before moving into stars
[07:20:02] <drakonis> lording over the unwashed masses
[07:20:11] <gilberth> moon-child: Remember, that using custom types like TYPE FOOVAL = 0..99; is common place with Pascal.
[07:20:30] <moon-child> hayley: in particular, context was gap buffers vs ropes.  Emacs _is_ slow on large files _because_ it uses a gap buffer; other editors are fast
[07:20:34] <drakonis> god damn the horrible philosophy is written all over that document lmao
[07:20:37] <drakonis> i forgot how bad it was
[07:21:16] <drakonis> https://github.com/mbrubeck/urbit/blob/1bc9086a3fd62594e8bd631744cb9bf804f6a43b/Spec/urbit/5-whynock.txt
[07:21:17] -ixelp- urbit/5-whynock.txt at 1bc9086a3fd62594e8bd631744cb9bf804f6a43b · mbrubeck/urbit · GitHub
[07:21:17] <gilberth> But, yes, Pascal is ancient. You don't have exceptions. And often you would just turn off runtime checks at compile time.
[07:21:41] <moon-child> fpc has exceptions apparently
[07:22:05] <hayley> "It's true that a Java application can extend itself at runtime. But class loading in the JVM is not exactly a lightweight process subject to unambiguous mathematical description.  I certainly haven't heard of anyone using it the way Urbit must; and it is certainly not designed to solve any such problem."
[07:22:33] <hayley> If I had MAKE-INSTANCE as a Netfarm instruction (also working on it!) then you could just make a schema object and a script with your bytecode.
[07:23:08] <gilberth> I refer to the ISO Pascal Standard. Newer Pascals have all sorts of additional things, like strings. Pascal has no strings, only fixed size arrays of characters. And by fixed size, I mean fixed, at compile time.
[07:23:30] <hayley> "Don't try to use an imperative language as a formal description of a function." Why not? We have Hoare triples.
[07:24:14] <moon-child> doesn't have file i/o either afaik
[07:24:24] <hayley> PlusCal for TLA+ is an imperative language that is a well-used formal description of a concurrent system.
[07:25:12] <gilberth> [Which is why Knuth by using his preprocessor implements his own string datatype. That's the pool files you come across with TeX. The string literals are stored there. String are then pointers into a huge array of chars. And the pool loaded into this for the literals.]
[07:25:18] <hayley> In fact, here's the PlusCal code for verifying the decentralise2 scheduler: https://gitlab.com/cal-coop/netfarm/cl-decentralise2/-/blob/master/Code/Systems/Standard-system/Design/queue.tla
[07:25:19] -ixelp- Code/Systems/Standard-system/Design/queue.tla · master · Cooperative of Applied Language / The Netfarm Suite / cl-decent [...]
[07:27:56] <gilberth> [Considering that Pascal is newer than Lisp, this is kind of funny.]
[07:29:06] <drakonis> https://github.com/mbrubeck/urbit/blob/1bc9086a3fd62594e8bd631744cb9bf804f6a43b/Spec/urbit/4-standards.txt lmfao
[07:29:07] -ixelp- urbit/4-standards.txt at 1bc9086a3fd62594e8bd631744cb9bf804f6a43b · mbrubeck/urbit · GitHub
[07:29:27] <gilberth> [Implemented on a CDC 6000 -- so by no means a small machine.]
[07:37:36] <drakonis> kelvin versioning wtf is moldbug on
[07:38:43] <drakonis> https://distributedweb.care/posts/who-owns-the-stars/ hayley this is the other post
[07:38:44] -ixelp- Who Owns the Stars: The Trouble with Urbit | Distributed Web of Care
[07:39:47] <drakonis> but enough about this
[07:41:19] <drakonis> https://www.youtube.com/watch?v=ARsN0xldnys quake has aged well
[07:41:20] -ixelp- Quake 2022 Preview - YouTube
[07:42:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:48:37] <drakonis> its impressive how much it has grown since
[07:50:47] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:03:28] *** Joins: semz (~none@user/semz)
[08:04:28] <hayley> Finally, a response to "what is an interpreted language?" "Meaning the language's most common implementation is an interpreter..." "Why should it bother me that the most common implementation of a language is an interpreter?"
[08:07:53] <drakonis> that sure is something
[08:10:55] <gilberth> I'd say there is more to. A language could be unfit to having a feasible compiler.
[08:11:30] <gilberth> Suppose CL would have said that macros are expanded at run time. How would you compile that?
[08:11:55] <hayley> Lots of constant folding.
[08:12:37] <moon-child> especially if some compiled language is 'mechanically not much different from' some other interpreted language, I don't understand why anybody would care at all
[08:12:41] <hayley> e.g. https://docs.racket-lang.org/fexpress/index.html apparently tries to expand ahead of time where possible.
[08:12:42] -ixelp- Fexpress
[08:12:52] <gilberth> And recompiling when you redefine a macro, yes.
[08:12:56] <moon-child> gilberth: JIIIIIT
[08:13:08] <moon-child> or that.  But worse compile times
[08:13:46] <hayley> I sorta suspect the late Mr Schutt(?) would have looked into compiling fexprs.
[08:14:41] * moon-child looks on his blog to see if there's anything
[08:14:46] <gilberth> I didn't say that my definition would be an exact definition. There can't be any. All I said is, that languages could have been specified with an interpreter in mind exposing features that make compilation a challenge and/or impossible in the general case.
[08:15:03] <moon-child> though I wouldn't be surprised if the semantics were still considered a work in progress, ahead of implementation
[08:15:16] <hayley> idk, wasn't there a critique of Common Lisp that stated it'd be too hard to compile on stock hardware? Yet here we are.
[08:15:42] <hayley> The same went for Self, and now Python and JS to an extent (though there are some features where compilers just give up).
[08:15:45] <gilberth> Or can you compile (defun foo (x) (macrolet ((aux () x)) x)?
[08:15:47] <moon-child> relevant: http://fexpr.blogspot.com/2016/08/interpreted-programming-languages.html
[08:15:48] -ixelp- Structural insight: Interpreted programming languages
[08:16:08] <hayley> "Crappy lisps and lispers that cannot do this much should be left in the 90s where they belong." Can I leave Scheme in the 70s then?
[08:16:17] <moon-child> (I don't remember what he says on the topic, but)
[08:16:21] <gilberth> Ah (defun foo (x) (macrolet ((aux (x) x)) (aux)) rather
[08:16:40] <gilberth> CL is very carefully specified in a way that compilation is possible always.
[08:16:56] <hayley> https://www.reddit.com/r/lisp/comments/rn4020/hard_time_moving_clike_algorithms_to_lisp/hq40f73/?context=3 Walked into that one, no?
[08:16:58] -ixelp- Hard time moving C-like algorithms to Lisp : lisp
[08:16:59] <gilberth> There even is the term "minimal compilation" which an interpreter must implement.
[08:18:30] <gilberth> I don't need to remind #lispcafians that LISP had a compiler from the very beginning. Granted, they needed some time to get the compiler and the interpreter implement the same language.
[08:19:56] <hayley> lol, they edited and removed their snarky ending that I responded to.
[08:20:43] <gilberth> But, yes, there is no such thing as an "interpreted language". It's an implementation detail.
[08:21:19] <moon-child> all languages are interpreted, ultimately
[08:21:34] <gilberth> Or do we say that C is a byte-code interpreted language? The first C implementation was that.
[08:21:41] <hayley> IMO though, people only figure out how to compile, after someone found the need for it. So calling something an "interpreted language" is only applicable for so long. 
[08:21:43] <moon-child> and I bet you your source code is 'compiled' before it is evaluated, even if only to a token stream
[08:21:45] <moon-child> sooo
[08:23:44] <gilberth> moon-child: Is it? <http://clim.rocks/lisp100/lisp100.c>
[08:25:13] <moon-child> ._.
[08:25:19] <gilberth> But yes, it's a continuous spectrum from factoring out repetitive work when going from the text input to the transistors.
[08:26:43] * hayley and a friend now try to figure out how many bits there are in Urbit keys. Current guesses: there are 32 bit user IDs, 64 bit "master passkeys" and 256 bit Ethereum ECDSA keys.
[08:26:50] <gilberth> I mean, your machine code also is interpreted, or not? Often an extra layer is between your machine code and the CPU called the microcode. And that microcode also is interpreted.
[08:27:14] <hayley> The first is far too stupid, the second is mildly concerning, and the latter is fine.
[08:27:50] <moon-child> gilberth: well, if there is micro code, then you might say the machine code is compiled to it, and then the former is interpreted
[08:28:29] <gilberth> Transmeta?
[08:28:46] <moon-child> hayley: isn't ecdsa the maybe-nsa-backdoored one?
[08:28:56] <hayley> Depends on which curve you use.
[08:29:16] <moon-child> gilberth: wazzat?
[08:29:40] <hayley> Compiled x86 ops to an internal RISC.
[08:29:49] <gilberth> What was its name? The CPU that would JIT x86 to it's RISC ISA.
[08:30:05] <hayley> https://en.wikipedia.org/wiki/Transmeta_Crusoe Also could do Java bytecode. "Oh my god, don't do that!"
[08:31:42] <gilberth> Well, I am a bit sensitive to that because people believe the CADR would do things in hardware, which it didn't, but rather did in microcode. Like forwarding pointers, cdr-coding or tagging in general. There is no hardware for that in the CADR.
[08:31:48] <moon-child> isn't java bytecode stack-based, and unoptimized?  Would be dumb to do that
[08:32:03] <hayley> Yep.
[08:32:22] <hayley> gilberth: AIUI later lispms had hardware for doing things in parallel, which might be where the myth came from.
[08:32:54] <gilberth> hayley: I am aware. But still a damn microcoded design.
[08:33:02] <hayley> Okay, new hypothesis: 64-bit seed -> 256-bit Ethereum key pair -> 32-bit Urbit ID
[08:33:38] * hayley still has fun discussing how survivable a 64-bit key system would be.
[08:34:53] <hayley> "Talk is one thing. I am pretty happy doing my program synthesis research, because it is slowly putting weaker programmers out of a job. No more free lunches for stupid people." ):
[08:34:56] <moon-child> depends on how expensive the actual rng is, I guess
[08:35:43] <hayley> https://www.youtube.com/watch?v=5uljtqyBLxI&t=1224s
[08:35:44] -ixelp- Java on a 1000 Cores - Tales of Hardware / Software CoDesign - YouTube
[08:36:39] <gilberth> I wonder if the Smalltalk Machine design was about memory usage, too.
[08:37:31] <hayley> "Why should it concern anyone that the most common implementation of a language is an interpreter?" "It is a common part of the language for programmers and computer scientists over 30. "
[08:37:37] <gilberth> And thus costs.
[08:38:04] <hayley> "shell languages do not need to worry about compilation optimization or linting, and so do not necessarily want types." Not really, it's more that few are brave enough to write complex programs in shell languages.
[08:38:27] <hayley> Also c.f. https://youtu.be/lRqXJ4eWTPM?t=181
[08:38:28] -ixelp- Startup War Stories - YouTube
[08:38:38] <moon-child> I think somebody did an auto-parallelizing shell
[08:39:20] *** Joins: elflng (~elflng@5.28.137.182)
[08:39:53] <hayley> "I'd say shell languages don't have to worry about optimisation, since the had parts are not written in shell languages, but I'll have to wait ten years until I'm over 30 to respond. See ya then."
[08:40:58] <moon-child> (real answer: unix design, like apl, does not _require_ optimization for that layer.  Doesn't mean it wouldn't be faster with optimization there, nor that such stratification makes sense at all; but)
[08:41:41] <hayley> Also, I guess any Cleavir passes I write will only work when I'm 30. :(
[08:42:18] <gilberth> You'd turn 30 faster than you believe.
[08:46:28] <hayley> "See ya then." "Sure thing. Keep at it. Stay in school (or learning things). etc..."
[08:46:33] <hayley> ):
[08:48:05] <hayley> Well, I'll be stuck in university if I can't find a good one to get an education at. And if they won't recognise any of my own study.
[08:49:58] <gilberth> Who says it's nicer out of university?
[08:51:14] <hayley> No one?
[08:51:36] <hayley> But congrats on indirectly getting 69 stars on GitHub btw
[08:51:54] <gilberth> ?
[08:52:13] <hayley> wtf, there are 68 now.
[08:52:38] <hayley> one-more-re-nightmare had 69 stars, then moon-child ruined it^W^Whelped and gave it a 70th, and now we are down to 68.
[08:52:57] <hayley> ...and now back to 69 cause I starred it myself.
[08:53:17] <gilberth> Oh dear.
[08:53:59] <hayley> Like how my Instagram account climbed to about 920 followers, but got stuck there for a few years. Now I've given up on it.
[08:54:43] <gilberth> Is the number of "likes" important to you?
[08:55:52] <hayley> Not really.
[08:57:08] <hayley> It seems like a project that would get big easily; we have a fast RE engine, people (usually) know when they want regexes, and the writeup on it just requires pretending you know compiler theory. 
[08:57:46] <hayley> https://www.youtube.com/watch?v=LdSIQcmVnt8
[08:57:47] -ixelp- How to make Russian Crab Salad (крабовый салат) - Cooking with Boris - YouTube
[08:57:52] <gilberth> People believe they want PCRE.
[08:58:53] <moon-child> rust thing doesn't do pcre, and people seem to like it
[08:59:18] <hayley> It does (a|aa)* wrong.
[09:00:22] <gilberth> This is why I said "believe". Most people can't tell POSIX from PCRE. Or even would appreciate a specified behavior. Which is how we got PCRE in the first place.
[09:01:08] <hayley> gilberth: Anyways, suppose that you had an instruction set with 12 instructions. But there are some sequences of instructions, mostly loops to add and decrement, that need to be detected to drop from O(n) to O(1) runtime. Do you practically have an instruction set with 12 instructions?
[09:01:26] <hayley> [where n is the value of an integer, not bit length or something]
[09:02:27] <hayley> As far as I am concerned, it is functionally equivalent to having more than 12 instructions, as you have to implement the resulting "instructions" from fusion too.
[09:02:38] <gilberth> Why not a OISC then to begin with? And even a toggle-and-jump-not-zero machine could do addition in O(log n).
[09:03:17] <hayley> Who knows. But my lecturer in 2020 stated in the first class that you need "about a dozen instructions" to be Turing complete. 
[09:03:30] <gilberth> lol
[09:03:42] <gilberth> You need one.
[09:03:44] <hayley> And he struck me as a very clever guy, so he must be right. /s
[09:03:58] <moon-child> zisc?
[09:04:26] <hayley> Another funny thing I remember was that we were taught recursion, and the lecturer said the sum of an empty set was undefined. 
[09:04:43] <gilberth> moon-child: Hardly. It has do something, doesn't it?
[09:04:59] <hayley> They'd consistently screw up their base cases, FWIW. Like having cases for 0, 1 and >1 length sequences, when you just needed a base case (0) and inductive (>0).
[09:05:22] <gilberth> Yep.
[09:05:26] <hayley> 1 and >1 is unnecessarily wrong. But we were taught that natural numbers start with 1. Boo.
[09:06:40] <gilberth> hayley: Anyhow, with regard to your 12 instructions O(n) addition. This is like with "interpreted languages". I see your point. And we talk about feasible implementations. But: The term "Turing complete" will come up.
[09:07:20] * moon-child looks at urbit definition thing
[09:07:35] <moon-child> they specify that +[a b] is equivalent to +[a b] ...
[09:07:41] <hayley> You could implement such a VM with only 12 instructions, but IMO it has no practical effect, as you have to audit the code used to interpret fused instructions too, which results in more effort.
[09:07:42] <gilberth> hayley: At uni natural numbers usually included 0. At school teacher would be explicit and say N_0 or N_1.
[09:07:49] <hayley> moon-child: You want the Nock spec, not Hoon FWIW.
[09:08:39] <moon-child> hayley: yeah.  I'm looking at this https://urbit.org/docs/nock/definition
[09:08:39] -ixelp- Nock Definition • Documentation • urbit.org
[09:08:58] <moon-child> they also say that =[a a] is 0 and =[a b] is 1 ... weren't these the people that compiled a language where 1 is true to a language where 0 is true?  Really do not get it ...
[09:09:18] <moon-child> gilberth: ime people refer to 'positive'/'non-negative' integers if they want to be unambiguous
[09:10:33] <gilberth> moon-child: Yes, they do. At my school written as N_1 and N_0 to be explicit and noting that the term "natural number" is understood differently by different people.
[09:11:11] <moon-child> 'An invalid use of any operator (eg, incrementing a cell) crashes.  This is specified as an infinite loop, but in practice you get a crash.'   ...huh?
[09:11:32] <moon-child> it ... kinda makes sense to specify it as non-halting, but why an infinite loop?
[09:12:08] <gilberth> Not halting is sometimes used equivalent to "undefined".
[09:12:42] <hayley> Why do I have to reboot the router because it loses its connection every few weeks?
[09:12:46] <moon-child> I mean, you can kinda treat it that say, since unless you are lazy you do not have to worry about executing anything following
[09:13:35] <gilberth> Ironically there is an instruction called "HLT" for that :-)
[09:14:21] <moon-child> :D
[09:14:30] * gilberth remembers DOS running the CPU hotter than Linux or Xenix for that matter.
[09:14:45] <sham1> Natural numbers may include zero, although analysis doesn't 
[09:14:47] <gilberth> When idle, DOS would execute an infinite loop.
[09:17:14] <hayley> I learnt Peano and Church encoding in my spare time at high school, so N₀ was more natural for me.
[09:18:00] <gilberth> It always was more natural for me.
[09:18:53] <hayley> https://www.youtube.com/watch?v=I0e7V2hzqI0
[09:18:53] -ixelp- Ba Dum Tss feat. Pinkie Pie - YouTube
[09:18:54] <moon-child> peano does not mind starting at 1
[09:19:16] <gilberth> I mean, including 0, makes perfect sense for counting. Excluding it is odd.
[09:19:22] <hayley> Sure, it is odd to not have an identity under + though.
[09:19:42] <moon-child> who cares about +?  It is much less practical than *
[09:20:38] <gilberth> Even with just counting: You start with zero apples. Then you pick one, and have one. Then you find another and pick it, you have two, ... You don't start picking apples with already one apple in your basket.
[09:20:57] <sham1> Having addition being a semigroup instead of a monoid is not a nice thing necessarily
[09:21:23] <sham1> I'd rather do the latter, so 0 is included
[09:21:29] <moon-child> and then you may say that I owe you two apples.  Or I cut my apple in half and give some to you
[09:21:42] <moon-child> so clearly real numbers are more useful
[09:22:35] <gilberth> hayley: It's likewise odd to have no inverse. But you can't have "minus two" apples in your basket. You may lack two apples though.
[09:22:37] <sham1> They're also weird
[09:23:03] <hayley> https://twitter.com/tehdawghouz/status/1475340117082476547/photo/1
[09:23:23] <gilberth> I'd say fractions are more "natural" than negative numbers.
[09:23:57] <gilberth> But it all follows from asking for an inverse. Or more precisely the solution of an equation.
[09:25:03] <Alfr> gilberth, sure you can. That's a basket in which you need to place two apples for it to be empty.
[09:25:08] <gilberth> You get negative numbers by solving x + a = b, for a given a and b. You get fractions for solving x * a = b, for a given a and b. And complex numbers for solving x^2 = a for a given a.
[09:25:47] <moon-child> well, say it's sheep.  We may trade sheep, but two halves of a sheep is something very different from a whole sheep
[09:26:41] <gilberth> moon-child: I favor dead animals. On my plate. So where is the difference?
[09:27:00] <moon-child> in that context it does not matter.  But then you want real numbers, to weigh the meat
[09:27:28] <moon-child> I am just suggesting _a_ context in which you would want negative numbers but not fractions
[09:27:46] <moon-child> or, more likely, money
[09:29:29] <gilberth> Sure. All I said is that the concept of "half an apple" is IMHO easier than "minus two apples" the latter comes from a question "How many apples do I need to make them some other number."
[09:29:46] <sham1> Well, you want fractions for money as well. Both fractions and negatives are helpful (negative fractions)
[09:30:26] <gilberth> Money is tricky. I can't give you a fraction of a cent.
[09:31:01] <sham1> Well you have to stop somewhere. Otherwise you'll get into subdivisions that get eaten by inflation way too quickly to be actually worth it
[09:31:15] <hayley> gilberth: Netfarm sets are weird, as you can remove or add, and everything has to commute. So [remove, add] has to do the same thing as [add, remove]. So then you can have -1 of one element in a set. 
[09:31:21] <gilberth> But I can share a cake between /n/ people. Every child understands that concept.
[09:32:04] <hayley> Though you can make such a state impossible in your program by introducing causality requirements, e.g. to remove an object from some set, you have to have seen and added it already. But it's theoretically necessary.
[09:32:48] <moon-child> gilberth: the question is, do you need a way to represent the size of each slice?
[09:32:54] <gilberth> And in natural day-to-day language there are no words for negative numbers, while there are for fractions. There is a word for 1/2, but none for -1.
[09:33:07] <moon-child> money requires such things, because you need to keep records about who owes whom how much
[09:34:03] <gilberth> moon-child: Money is tricky, as I said. I can't wire you half of a cent. Taxes for instance need to be rounded.
[09:34:26] <moon-child> right.  Point is that you do need negative numbers for money
[09:35:49] <gilberth> Sure. Still: There is no word for -1. You rather say "gilberth owes two dollars to moon-child" or "moon-child owes two dollars to gilberth". You don't say "gilberth owes minus two dollars."
[09:36:19] <gilberth> But you say "half an apple" and not "one over two apples".
[09:36:34] <moon-child> sure
[09:36:37] <sham1> Well -1 also doesn't need a word. Indeed, most fractions don't either
[09:37:13] <hayley> gilberth: Is this like German elections? https://twitter.com/That_Garth_Guy/status/1474843352839372806
[09:37:23] <gilberth> Really? Isn't "sixteenth" a word? Is is as much a word as "twenty-seven".
[09:37:40] <gilberth> * It is.
[09:37:56] <sham1> Sixteenth isn't a word that just means a fraction like half does
[09:37:58] <hayley> sixteenth is a word.
[09:38:17] <gilberth> There is no suffix/postfix/inflection for negative numbers.
[09:38:51] <sham1> "Sixteenth" is an ordinal as opposed to half which is a dedicated word for 1/2. It just happens that "sixteenth" is also used as a shorthand for "one sixteenth", so 1/16
[09:39:08] <hayley> AIUI Americans say second for 1/2.
[09:39:11] <gilberth> sham1: twenty-seven is short for "twenty and seven". Moot argument.
[09:39:20] <sham1> Yes
[09:39:25] <hayley> Also fo(u?)rth for 1/4
[09:40:00] <moon-child> fourth
[09:40:07] <moon-child> forth is something else
[09:40:18] <gilberth> I mean, say to a random person: "You get minus four dollars from me." It's not commonly understood.
[09:40:23] <moon-child> (fun fact: forth the programming language was originally to be called fourth, but there was some sort of character limit)
[09:41:10] <gilberth> In contrast to "I need a fourth of a something", which is.
[09:41:12] <hayley> Did I ever mention that there was once a Minecraft server which let you pay people negative money?
[09:43:02] <hayley> i.e. you'd write "/pay gilberth -1000" and your balance would go up $1000 and gilberth's would go down $1000.
[09:43:19] <gilberth> hayley: No, it's not like here.
[09:43:26] <sham1> That's sure some bad coding
[09:43:50] <contrapunctus> nice
[09:44:26] <gilberth> Reminds me of lincity. You could run your deficit so negative that it would wrap around.
[09:44:27] <hayley> Another classic is /pay contrapunctus 0.01 which would let you spam "hayley sent you $0" to contrapunctus's chat log, assuming the plugin rounded too many decimal places. 
[09:44:50] <hayley> ...I mean, you could still spam $0.01 in the log, and it wouldn't cost much, but it's even weirder when it says $0.
[09:45:01] <contrapunctus> lol
[09:47:27] <hayley> But I recall seeing both when I was like 10. Someone crashed the economy basically.
[09:49:41] <gilberth> Minor point: Speaking of negative money. Banks are in trouble as they want to give you negative interest on your deposit. (That is, to be clear charge around %0.5 p.a. on your deposit). Yet, the law does not allow for a negative interest rate. The legal term is another.
[09:52:37] <gilberth> Accounting itself has no concept of negative numbers either. It only knows adding something and uses language to say which balance gives to what other balance.
[09:54:39] <gilberth> So negative numbers are far from being natural to finance either.
[09:56:17] *** Joins: notzmv (~zmv@user/notzmv)
[10:00:43] <hayley> .oO(Worst idea ever: political compass/8values/etc for Lisp languages. e.g. Metacircular <-SICL----CL--------Clojure---Fennel> Hosted)
[10:00:52] <hayley> s/SICL/CLOSOS/
[10:02:22] <hayley> Worse, it's literally https://github.com/8values/8values.github.io so I could fork it and hack in new questions.
[10:02:23] -ixelp- GitHub - 8values/8values.github.io: The 8values political quiz
[10:03:59] <hayley> You could at least also do pure <-CL--Scheme-----> impure, and objects <-CLOS------Clojure-> data, etc. So sadly coming up with four axes would be too easy.
[10:05:21] <gilberth> It would be more interesting with things like strong/weak typing, dynamic/static typing, and perhaps safe/unsafe.
[10:06:01] <moon-child> cl is purer than scheme?
[10:06:15] <hayley> Whoops, got the labels the wrong way around.
[10:06:47] <gilberth> "Do your integers overflow?" "[ ] Only when memory runs out [ ] They do, we cover that under the carpet [ ] We cover that under the carpet unless we debug. [ ] They do, but we crash [ ] We don't care."
[10:07:19] <hayley> I could include that. But it'd also be useful for a hosting-or-not question. e.g. if we only use the JVM numeric "tower", then overflow/crashing is more natural.
[10:08:25] <hayley> Another thing: is object/protocol-oriented programming like CL more strongly typed than data-something-something like Clojure? (Not data-oriented, that's when everything is an array of floats...data-driven was it?)
[10:08:34] <gilberth> Do you talk about languages or implementations?
[10:09:15] <hayley> Ideally the axes would be orthogonal, but I can see that it would be tricky.
[10:09:41] <gilberth> It isn't tricky for languages with a spec.
[10:09:54] <hayley> In the case of a "hosted" language where you intentionally want to be good at FFI-ing to another language, then I think the language ends up conflating implementation and specification. 
[10:10:15] <hayley> What does e.g. (.toString 2) in Clojure mean if I am not on the JVM?
[10:10:33] <gilberth> Nothing.
[10:11:02] <hayley> I mean, it works in JavaScript too, but that is incidental as JS uses the same names.
[10:11:18] <gilberth> What does "/tmp/foo" mean, when I am not under UNIX?
[10:11:38] <hayley> Not even + is defined really, as (+ "a" "b") => "ab" in CLJS, but probably not in Clojure/JVM.
[10:12:13] <moon-child> eh... ?
[10:12:23] <moon-child> I thought cljs was just a compiler from clojure to js
[10:12:30] <moon-child> wow
[10:13:29] <hayley> Clojure/JVM dies with a syntax error(?) claiming "class java.lang.String cannot be cast to class java.lang.Number". So + is UB by my "examination."
[10:14:53] <hayley> I'd have to guess the Clojure compiler does constant folding and immediately regrets it.
[10:15:56] <hayley> What was my original question now? Something about if having objects and classes was more strongly typed than passing (the immutable equivalent of) hash tables around.
[10:16:44] <gilberth> Who passes hash tables around?
[10:17:01] <moon-child> constant folding: seems not, because (fn [] (+ "a" "b")) is fine
[10:17:05] <hayley> Clojure programmers.
[10:17:21] <moon-child> and ((fn [] (+ "a" "b"))) has the same result as (+ "a" "b")
[10:17:23] <hayley> Well, I am confounded how (+ "a" "b") is a "syntax error".
[10:17:39] <moon-child> gilberth: what am I to do with a hash table if not pass it around?
[10:17:45] <moon-child> hayley: I get an 'execution error', not a syntax error
[10:18:02] <moon-child> https://0x0.st/or9k.png
[10:18:11] <hayley> If I write a file which just contains (+ "a" "b") and run clojure foo.clj I get a syntax error.
[10:18:24] <hayley> The REPL says execution error though, yes.
[10:18:30] <gilberth> moon-child: Look up things in it? You don't need to pass it around for that. :-p
[10:18:33] <hayley> "Syntax error (ClassCastException) compiling at (foo.clj:1:1). class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')"
[10:18:41] <moon-child> interesting
[10:18:57] * hayley waits for man-db to finish updating so that she can uninstall the Clojure REPL now.
[10:19:09] <hayley> gilberth: Well, they use maps instead of objects or structs, as that's more flexible...somehow.
[10:19:51] <gilberth> hayley: Do they have a notion of a class or [proto]type?
[10:20:06] <hayley> No.
[10:20:40] <gilberth> Useful.
[10:21:07] <hayley> There are generic functions, but those dispatch on functions of their inputs, and having multiple applicable methods is an error (IIRC)?
[10:21:28] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:21:31] <hayley> So I am inclined to say that it is less type-safe, but that might be looking at it the wrong way.
[10:21:33] <gilberth> What is it then that they dispatch on?
[10:22:05] <dave0> maw
[10:22:24] <hayley> Any function, e.g. looking up some value in the map. /me goes to find an example
[10:22:25] <moon-child> hmm.  In raku, dispatch takes arbitrary predicates, but you're allowed to have multiple methods match; the first applicable one wins
[10:22:49] <moon-child> I think proposed scheme generics use arbitrary predicates too.  But that's because classes were too controversial or something
[10:23:02] <gilberth> hayley: I see. So a distributed COND.
[10:23:14] <moon-child> gilberth: I think 'open' is more relevant than 'distributed'
[10:23:15] <hayley> https://clojure.org/reference/multimethods
[10:23:15] -ixelp- Clojure - Multimethods and Hierarchies
[10:24:35] <hayley> You also get to invent your own <: relation between values, but that is global and not per generic function.
[10:24:54] * gilberth is puzzled by those funny brackets and braces for no reason other than being chic.
[10:25:27] <moon-child> it's arrays
[10:25:38] <moon-child> for some reason lambda list becomes a lambda array
[10:25:44] <gilberth> And the other?
[10:25:45] <hayley> The thing is that, would I make such a quiz, the results would be backhanded insults.
[10:26:10] <hayley> So someone else had better make it.
[10:26:14] <gilberth> { } for hashes?
[10:26:21] <hayley> Yes.
[10:27:03] <moon-child> what is wrong with backhanded insults as results?
[10:27:12] <moon-child> reminds me of the 'you seem to be designing a ... language' thing
[10:27:51] <hayley> Nothing really, other than I'll continue to look like a smug CL asshole.
[10:28:04] <gilberth> So defmulti says what key I am dispatching on?
[10:28:14] <hayley> Yes.
[10:28:23] <moon-child> https://www.mcmillen.dev/language_checklist.html  this thingy
[10:28:24] -ixelp- Programming Language Checklist | Colin McMillen
[10:29:09] * hayley fills it out
[10:29:24] * dave0 ticks stack-based
[10:32:38] <hayley> https://pastebin.com/BieKrxNj
[10:32:38] -ixelp- zero feet TL/DR - Pastebin.com
[10:34:36] <moon-child> 'There are less than 100 programmers on Earth smart enough to use your language'
[10:35:19] <hayley> Hey, you saw the example with Cheney's GC in it.
[10:35:27] <moon-child> ooh, apparently the guy who made that checklist was also the one who made the paint splatters-as-perl-programs thing
[10:35:36] <epony> and large percent of them are above their 80ies
[10:36:22] <moon-child> hayley: would you like to see a third-order function in j?  Promise it's more obscure :)
[10:36:26] <hayley> I am sure my weird mixture of Dylan, Scala and Ruby syntax is going to confuse all but myself.
[10:36:58] <epony> if only mathematics used the third order too
[10:37:11] * hayley now wonders where @blah/1 comes from. blah/1 is Prolog and Erlang, and @ is less scary #' perhaps.
[10:37:35] <hayley> But I always wanted @blah shorthand for [ :x | x blah ] in Smalltalk.
[10:39:08] <moon-child> https://gitlab.common-lisp.net/ansi-test/cl-bench/-/merge_requests/2  new genera soon
[10:39:09] -ixelp- Genera support (!2) · Merge requests · ansi-test / cl-bench · GitLab
[10:40:49] <epony> I still do not know what Smalltalk is and why it has 80 in its name.
[10:43:05] <hayley> They've recognised the competition of Mezzano and CLOSOS
[10:43:42] <moon-child> haha I doubt it
[10:43:42] <epony> https://en.wikipedia.org/wiki/Simula however is known.
[10:44:08] <hayley> Pity that CL-BENCH is all single threaded, but CL doesn't specify threading of course.
[10:46:37] *** Joins: shka (~herr@109.231.0.226)
[10:47:44] <hayley> Would be nice to have multi-threaded CL benchmarks.
[11:03:11] <hayley> moon-child: Also, one must not underestimate Symbolics's impact on the phone market. Someone who apparently works for Amazon Prime did.
[11:03:18] * hayley uploaded an audio file: (372KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/hsOUdKZjSDmESjstSHCRoNsV/phone.mp3 >
[11:21:06] <hayley> https://www.upmem.com/technology/ GC on data processors when?
[11:21:07] -ixelp- Technology – UPMEM
[12:24:21] *** Joins: random-nick (~random-ni@87.116.180.98)
[13:39:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:45:06] <hayley> gilberth: Would counter registers, derivatives and DFAs blend? I can imagine compressing e.g. the DFA for a{20} into a loop with a counter variable, and generalising the firing conditions for a transition would be nice for some (simple forms of) zero width assertions.
[13:50:56] <hayley> While in the shower, I was thinking of representing a DFA as Prolog rules with alternations. e.g. S([a | Rest], X) :- (X = 0); (X > 0, S(Rest, X - 1)). might encode some rule. As long as each set of conditions is disjoint, then we could compile to a DFA.
[13:53:12] <hayley> We can then use the derivative classes function to decide what conditions we need to check, as well as what character to consume, for each transition we want to generate.
[13:58:44] <hayley> gilberth: i.e. this sorta DFA: <https://plaster.tymoon.eu/view/2797>
[13:59:15] <hayley> (though I've written a grep machine more or less - it'll restart if it misses.)
[14:02:15] <hayley> FWIW I am pretty sure the argument for producing a DFA is relatively simple, as there are only finite similar tests that can be generated.
[14:36:16] *** Quits: Inline (~Inline@2a02:908:1252:7a80::4f) (Remote host closed the connection)
[14:39:59] <hayley> But then I'd be FUBAR making (a?){20} linear, as I'd generate two simultaneous assignments to C. Hm.
[14:41:35] <hayley> Ahem, affine, not linear. Again.
[14:47:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:20:19] *** Quits: shka (~herr@109.231.0.226) (Quit: Konversation terminated!)
[15:29:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[15:30:16] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[15:38:58] <hayley> Nah, same technique as always to handle linearity problems. Replicate the registers!
[16:32:53] <dave0> nite all
[16:33:33] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:28:03] *** Joins: treflip (~user@user/treflip)
[17:35:26] *** Joins: dra (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499)
[17:35:27] <dra> Hello!
[17:39:30] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[17:42:11] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:46:20] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:54:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:33:26] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[18:35:31] *** Joins: rogersm (~rogersm@90.166.180.250)
[18:38:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:50:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:51:09] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:53:30] <aeth> hayley: imagine being a sci fi feudalist, too.
[18:53:59] <aeth> because when Earth monarchs got rid of fedualism, they got to build elaborate palaces so if you're going to think of yourself as a monarch, you want to be an absolutist...
[18:54:14] <aeth> planet-scale Versailles
[18:56:32] <aeth> I wouldn't be surprised if the extended universe of Star Wars had that because they had everything... but Star Wars really missed the opportunity to have one of those
[18:56:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:57:05] <aeth> it would really highlight inequality if there was a planet-sized city and a planet-sized garden palace in the same star system with extremely different population densities
[19:19:23] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (Ping timeout: 252 seconds)
[19:26:58] <sm2n> we can do that one better
[19:27:00] <sm2n> webscale Versailles, feat. mongodb
[19:28:44] <aeth> metaverse Versailles
[19:38:53] *** Joins: Catie (~user@user/catie)
[20:05:19] <sm2n> could actually see that happening, though I don't know if zuckerface is into palaces
[20:20:49] *** Quits: dra (~dra@2a04:4540:6405:6700:8da5:1ae0:26e9:c499) (Quit: Leaving)
[20:21:16] <pl> aeth: There were things like that mentioned, but usually the ones with enough concentrated power for that had other uses that Space Versailles
[20:21:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[20:22:19] <pl> (Palpatine built a complex for himself on planet Bith, iirc, but it was oriented towards things he liked - meaning "power")
[20:24:53] <aeth> pl: the point of Versailles is to keep your friends and enemies close
[20:25:03] <aeth> pl: a realistic (not-SW) centralized space empire would need that
[20:25:20] <pl> aeth: ahh, Palpatine did that with remodeled Jedi Temple
[20:25:29] <aeth> you don't want to kill off all of the aristocracy, but you don't want them in their homelands/homeworlds, either... you want loyal administrators there
[20:25:37] <pl> Bith was a place where he could prepare a strike killing off anyone
[20:25:37] <aeth> so you put them in a life of luxury that's essentially a prison
[20:25:47] <pl> heh
[20:26:17] <pl> in a way, a critical issue with Star Wars Empire and its "New Order" was that Palpatine couldn't care enough to settle that
[20:33:44] <aeth> there's kind of a contradiction in that he's a master manipulator to get power, but not once in power
[20:33:59] <aeth> once in power he chooses the crude sledgehammer of a planet-destroying superweapon. multiple times.
[20:34:01] <pl> aeth: it's more a question of what he wants
[20:34:28] <pl> he wasn't master manipulator because it was his preferred option, afaik
[20:34:34] <pl> it was because he had no power
[20:34:49] <pl> and because he wanted to make the end of jedi as "ironic" as possible
[20:35:30] <pl> He did play manipulator in EU with his subordinates and such, and the superweapons... he had a proclivity for them, but then Star Wars was full of them
[20:36:12] <pl> I have no idea if it was canon or fanon that part of his naval buildup was due to expecting Yuuzhan Vong
[20:36:30] <aeth> the thing is, the superweapon era of human history was the cold war, when the world was divided between two equally-strong (on paper, anyway... never tested) factions (well, 1/3, 1/3, 1/3 with the last third being neutrals playing both sides to maximize self interest)
[20:36:37] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[20:37:11] <aeth> if you're a galactic empire you're going to have a completely different kind of situation, closer to, say, Louis XIV or Augustus
[20:37:21] <aeth> where your main threats are internal
[20:37:35] <aeth> more Augustus, since absolutist France still had wars
[20:37:46] <pl> aeth: well, you're expecting reason when Siths are all about passions
[20:38:10] <pl> (in fact, in EU, at least some reason why Sith Empires failed was that they couldn't keep those passions in check)
[20:38:21] <aeth> but then if you're focused on passion, you just get the emperor from Gladiator
[20:38:24] <aeth> or maybe Nero
[20:38:47] <pl> aeth: Palpatine had something of memetic Nero to him, yes
[20:39:10] <pl> Funnily enough, in EU, it turns out that you can be a Sith and not go off the deep end
[20:39:18] <pl> but there's literally only example of that
[20:39:22] <aeth> unfortunately, Palpatine couldn't be Nero because the whole thing about Nero is that he's the last of the first dynasty
[20:39:32] <aeth> while Palpatine is... the first
[20:39:58] <aeth> I'm not even sure actual-Nero is treated properly in pop culture in general
[20:40:08] <pl> there's a reason why I specified memetic Nero
[20:40:10] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[20:40:28] <aeth> for instance, Nero was the last of an essentially deified line, so the Senate didn't actually want to kill him, but he thought they did, so he killed himself
[20:40:46] <aeth> at worst, he was going to face a sort of constitutional monarchy, 1500+ years early
[20:47:25] *** Joins: Alfr (~Alfr@user/alfr)
[20:48:48] <aeth> The Roman Empire was all about the balance of power between the senate, the emperor, and the generals, I guess.
[20:49:55] <selwyn> the star wars universe, with its emphasis on absolute power being self destructive, is more reminiscent of greece than rome for me
[20:50:07] <selwyn> hubris
[20:56:51] <sham1> The Romans had hubris in spades
[21:16:52] <gilberth> Good morning #lispcafe!
[21:17:13] <sham1> Good morning
[21:17:46] <sham1> I've forgotten how difficult it is to walk through thick snoe
[21:17:49] <selwyn> the jwst livestream just specified that the final distance will be one million statute miles
[21:17:57] <selwyn> i suppose nautical is more natural for space
[21:18:29] <sham1> Yes I'd think they'd use light years
[21:18:44] <sham1>  Or you know, kilometres or light seconds
[21:23:41] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:24:51] <selwyn> learning about lagrange points
[21:24:52] <gilberth> I am a bit surprised that light speed in km/s is such a round number: 14/2 Earth circumferences per second. With both the km and the second being defined based on the Earth size and rotation speed. Coincidence? Granted, we got the meter a bit off, but not much.
[21:26:35] <gilberth> * 15/2 = 7.5 *sigh* ; I had not enough coffee.
[21:27:56] <sham1> Well even when meters and seconds stopped being defined terracentrically and when they became more universal, it still retained the nice properties apparently. Of course by design and definition
[21:28:38] <sham1> Or would it be gaiacentric to be similar to heliocentric
[21:30:24] <sham1> Or I suppose geocentrism
[21:31:57] <selwyn> some great physicists spent their later years investigating numerical coincidences
[21:32:02] <selwyn> lot of esoteric stuff
[21:32:26] <White_Flame> gilberth is just rediscovering geocentricism
[21:32:59] <gilberth> Are second and meter really still_ defined_ terracentically? I doubt that. But you got my point, a meter was thought as the 40,000th of the Earth circumference and the second as the 86,400th of the rotation period. (Rather average time between two sunrises).
[21:33:22] <White_Flame> I think the second is defined as the period that some number of subatomic actions happen
[21:33:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:34:04] <White_Flame> yeah, frorm wikipedia:
[21:34:05] <sham1> Not anymore. Seconds is defined by the vibrations of a certain Cesium isotope
[21:34:13] <White_Flame> The second is defined as being equal to the time duration of 9,192,631,770 periods of the radiation corresponding to the transition between the two hyperfine levels of the fundamental unperturbed ground-state of the caesium-133 atom.[2]
[21:34:14] <selwyn> it's some large multiple of the inverse of the frequency of the ytterbium hyperfine transition iirc
[21:34:14] <gilberth> White_Flame: Apropos. Have you found proof yet that Minecraft is not flat?
[21:34:22] <sham1> While meters are defined in terms of light speed
[21:34:26] <White_Flame> The metre is currently defined as the length of the path travelled by light in a vacuum in 1/299 792 458  of a second.
[21:34:32] <selwyn> oh, caesium, right
[21:34:49] <White_Flame> no, cesium ;)
[21:34:56] <Catie> siezium
[21:35:07] <selwyn> that transition is the one used in atomic clocks
[21:35:18] <White_Flame> sees E um
[21:36:07] <White_Flame> c z m
[21:36:40] <sham1> Ce_133
[21:36:44] <selwyn> hm
[21:37:28] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[21:37:41] <White_Flame> gilberth:  the proof is all around yoU!
[21:38:12] <White_Flame> it's in plain sight in what you're not allowed to see!
[21:38:38] <selwyn> it seems the kg got redefined 
[21:38:50] <White_Flame> yeah, that happened not too long ago
[21:38:55] <sham1> Finally. Happened a few years ago now
[21:38:56] <White_Flame> away from the reference slug
[21:39:08] <sham1> But it was in due time
[21:39:27] <gilberth> White_Flame: Not around me. minecraft.net refuses to talk to me for some reason; so I can't have a look.
[21:40:06] <White_Flame> it'd be funny if the gravitational constants and such were actually found to be very slowly changing over time, making our current "better" constants non-constant as well
[21:40:16] <selwyn> it could happen
[21:40:28] <White_Flame> yep
[21:40:35] <selwyn> they would have to fudge some solution, like they did for carbon dating lifetimes
[21:40:37] <White_Flame> gilberth: you got too close to the truth!
[21:40:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[21:42:33] <gilberth> White_Flame: Perhaps. Still puzzles me that I get "Access denied" when I want to get it. So no Minecraft for me.
[21:43:22] <selwyn> so the elementary charge, planck's constant and boltzmann's constant are now all rational numbers in si units
[21:44:19] <gilberth> ixelp: https://www.minecraft.net/get-minecraft/
[21:44:45] <gilberth> See.
[21:46:20] <gilberth> ixelp got a timeout even. Just no response at all.
[21:47:24] <selwyn> they pushed an update to deal with the log4j vulnerability
[21:47:44] <selwyn> and every 12 year old was confused as to why they were updating minecraft with no new features
[21:48:15] <gilberth> It was that way even before log4j. That site just refuses to talk to me.
[21:48:29] <selwyn> maybe it's just not that into you
[21:51:16] <gilberth> I have four hosts with different IP addresses and all get the same response. Either "Access denied" or just no response at all. Maybe it's forbidden in Germany. Are there swastikas in Minecraft? But then, I don't care.
[21:51:47] <gilberth> Perhaps www.minecraft.net is not the correct site to look at. /me shrugs.
[21:54:33] <gilberth> Anyhow, which elementary constants could be non-constant? I mean, we could look into the past after all.
[21:56:08] <selwyn> uh
[21:58:28] <selwyn> well, they are all meant to be constant, things go wrong theoretically if they vary
[21:58:57] <selwyn> but if you can find some variation out there in the wild, then this is very important
[21:59:02] <ck_> if that one book had been called "Mein Craft" the whole story would've been different
[22:01:15] <contrapunctus> lol ck_ 
[22:03:37] <gilberth> Who knows? It must be some conspiracy.
[22:20:25] *** Quits: treflip (~user@user/treflip) (Quit: bb)
[23:00:04] <MichaelRaskin> www.minecraft.net seems to open from Bavaria
[23:00:56] <gilberth> Makes sense. As I said: A conspiracy.
[23:18:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80::4f)
[23:22:59] <selwyn> flat bavaria theory
[23:24:14] <gilberth> Flat? There are awful many mountains there. I have been there, so this is not hearsay.
[23:26:19] <gilberth> While here it is so flat, that you could see today, who pops by tomorrow for dinner.
[23:27:28] <ck_> it's actually spherical, and under vacuum
[23:28:06] <Alfr> Good moring.
[23:28:11] <Alfr> *morning
[23:28:43] <gilberth> ck_: Mein Kraft? Sure. Strange world.
[23:29:10] <ck_> good morning welcome to the internet it's the final week of this calendar what are you going to do about it please read this in a single breath thank you
[23:29:16] <Alfr> gilberth, is that a bottle in your fridge?
[23:30:11] <gilberth> Hello Alfr. Which bottle?
[23:30:36] <Alfr> "Mein Kraft" new ketchup?
[23:31:57] <gilberth> No, that is Minecraft. It doesn't talk to me for it really is "Mein Kraft" as ck_ pointed out. And that's evil by law. /me shrugs.
[23:33:11] <gilberth> But, yes, Kraft is my favorite ketchup brand. How did you guess?
[23:33:50] <ck_> I know I know it must be "the market"
[23:34:06] <gilberth> lol
[23:34:07] <ck_> you know, I never felt a magnetic attraction to that.. because of its monopoles
[23:34:20] <Alfr> gilberth, it's a common favourite ketchup brand. ;)
[23:36:52] <gilberth> btw isn't Kraft owned by Nestlé? Would be bad as I boycott them.
[23:39:01] <gilberth> I am not sure. Wagner is definitely owned by them, which made me switch "markets" for frozen pizza.
[23:39:54] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[23:40:55] <ck_> I think Kraft is a root in the company forest
[23:42:02] <gilberth> At times "You don't see the forest because of all the trees."
[23:42:12] <ck_> because I was remembering this image, no idea how accurate or recent it is though: https://preventdisease.com/images13/8_companies_own_food_lrg.jpg
[23:42:50] <gilberth> Ok. I see. Handy graph. Thanks.
[23:43:54] <epony> marketing forest of paint and deceit, northern tomatoes have no taste and they are wooden balls of green
[23:43:59] <selwyn> gnuxie: there is another straight line video out
[23:46:25] <epony> what you call catch up is corn and potato starch and paint and conservant preservatives
