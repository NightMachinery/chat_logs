[00:01:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:04:40] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 258 seconds)
[00:05:22] *** Quits: attila_lendvai (~alendvai@217.65.126.101) (Quit: Leaving)
[00:09:34] *** Joins: mister_m (~user@c-73-209-97-9.hsd1.il.comcast.net)
[00:11:40] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[00:12:03] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[00:24:03] *** Joins: chrysanthematic (~chrysanth@user/chrysanthematic)
[00:25:27] *** Quits: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:25:42] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[00:26:45] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:247e:ee97:5a1f:c15a)
[00:38:34] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[00:47:12] <phoe> minion: memo for char: <> is often called a diamond so it becomes pronunciable
[00:47:12] <minion> Remembered. I'll tell char when he/she/it next speaks.
[01:06:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:16:44] *** Quits: amb007 (~a_bakic@2.244.204.77.rev.sfr.net) (Ping timeout: 258 seconds)
[01:19:03] *** Joins: amb007 (~a_bakic@112.107.204.77.rev.sfr.net)
[01:19:03] *** Quits: amb007 (~a_bakic@112.107.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[01:19:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:22:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[01:23:01] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:27:54] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 240 seconds)
[01:28:36] *** Joins: Bike (~Bike@2603-6081-2340-023a-91d7-ffd7-1c5d-6629.res6.spectrum.com)
[01:28:36] *** ChanServ sets mode: +o Bike
[01:30:34] *** Quits: chrysanthematic (~chrysanth@user/chrysanthematic) (Quit: chrysanthematic)
[01:31:34] *** Quits: Bike (~Bike@2603-6081-2340-023a-91d7-ffd7-1c5d-6629.res6.spectrum.com) (Client Quit)
[01:32:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[01:38:03] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:45:43] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[01:48:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[01:52:46] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.1)
[01:55:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:56:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:01:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[02:06:25] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:06:25] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:06:27] *** greaser|q is now known as GreaseMonkey
[02:24:42] *** Quits: pve (~pve@37-33-96-188.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[02:35:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:45:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[02:50:03] *** Quits: frgo (~frgo@p200300deef27d700b9e66f82fe45e8c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:50:32] *** Joins: frgo (~frgo@p200300deef27d7000014c390a34d95ff.dip0.t-ipconnect.de)
[03:12:32] *** Quits: rgherdt_ (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[03:17:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:25:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:25:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:26:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[03:27:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:32:42] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[03:33:04] *** Joins: pjb (~pjb@user/pjb)
[03:36:34] *** Noisytoot is now known as N7t
[03:40:12] *** N7t is now known as Noisytoot
[03:54:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 258 seconds)
[04:01:41] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[04:02:43] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[04:02:46] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[04:04:20] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[04:06:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:09:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 256 seconds)
[04:14:24] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[04:15:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 258 seconds)
[04:19:16] *** Joins: clhelp (~clhelp@2601:547:980:6c30:eede:9bd4:c3b0:a596)
[04:22:39] <clhelp> Hey, can I get some help with the version of with-gensyms in this snippet: https://0x0.st/-f26.txt
[04:22:40] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[04:23:24] <clhelp> Er, this one actually: https://0x0.st/-f2U.txt
[04:23:49] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[04:23:51] <clhelp> There's an extra comma generated before the nested let, and I'm not sure why
[04:24:44] <clhelp> Also, if there's a less ugly way to do this, that would be great...
[04:27:25] <derelict> one thing that your implementation might benefit from is to utilize the destructuring capabilities of defmacro
[04:28:40] *** Quits: clhelp (~clhelp@2601:547:980:6c30:eede:9bd4:c3b0:a596) (Quit: Ping timeout (120 seconds))
[04:28:52] *** Joins: clhelp (~clhelp@2601:547:980:6c30:eede:9bd4:c3b0:a596)
[04:28:52] <clhelp> Oh, sure
[04:29:02] *** Quits: easye (~user@oxi.slack.net) (Read error: Connection reset by peer)
[04:29:34] <moon-child> clhelp: why the  (if (listp var))?
[04:31:28] <clhelp> To see if a variable was passed in with a default value
[04:31:38] <moon-child> oh, I see.  Hmm
[04:31:45] <clhelp> Was trying to get it to take the same argument structure as let
[04:33:19] <moon-child> you can use  (cadr genvar)  rather than  (car (cdr genvar)).  You might want to further ensure that the passed structure is a proper two-element list
[04:33:39] <clhelp> Hm, oay
[04:33:58] <clhelp> okay*
[04:34:45] <moon-child> I would also consider first doing a pass on 'vars' to homogenize it (turn  (a (b 2) c)  into  ((a nil) (b 2) (c nil))),  so that way you don't have to duplicate the branch
[04:35:06] <clhelp> Alright
[04:35:38] <moon-child> but that's a matter of taste; since you're only iterating through the list twice, it's not a big deal either way
[04:36:08] <clhelp> Still a bit confused about the stray comma in the nested let...
[04:36:11] <clhelp> Oh, okay
[04:37:12] <moon-child> what don't you understand about the second comma?
[04:40:20] <clhelp> The macro generates an extra comma in the nested let; before the variable list, specificaly
[04:40:24] <clhelp> specifically*
[04:40:42] <clhelp> Will post output
[04:41:38] <moon-child> oh, I see
[04:41:59] <clhelp> https://0x0.st/-f_s.txt
[04:45:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:46:55] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:247e:ee97:5a1f:c15a) (Remote host closed the connection)
[04:52:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:13:38] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[05:22:28] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[05:51:06] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[05:54:26] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[06:04:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[06:04:42] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[06:09:12] *** Quits: wheelsucker (~user@2600:8801:8c11:4c00::707) (Remote host closed the connection)
[06:09:26] *** Joins: wheelsucker (~user@2600:8801:8c11:4c00::707)
[06:35:37] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[06:40:45] *** Joins: prxq (~quassel@x4db9fdfc.dyn.telefonica.de)
[06:44:44] *** Quits: prxq_ (~quassel@x4db98936.dyn.telefonica.de) (Ping timeout: 265 seconds)
[06:57:44] *** Joins: beach` (~user@2a01:cb19:150:3400:4b61:8432:27c1:6ac0)
[07:01:40] *** Quits: beach (~user@2a01:cb19:150:3400:8499:31f5:d834:225d) (Ping timeout: 250 seconds)
[07:12:00] *** beach` is now known as beach
[07:12:11] *** ChanServ sets mode: +o beach
[07:16:39] *** beach sets mode: -o beach
[07:22:03] *** Joins: dsk (~dsk@user/dsk)
[07:31:49] <beach> Good morning everyone!
[07:32:45] <Josh_2> Mornin'
[08:13:48] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[08:14:14] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[08:25:53] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[08:26:21] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[08:26:26] *** Joins: cmack (~charlie@2600:1700:5d51:26ff:705c:714f:74da:e38d)
[08:33:20] *** Joins: karlosz (~karlosz@router.cloyne.org)
[08:34:02] *** Quits: karlosz (~karlosz@router.cloyne.org) (Client Quit)
[08:45:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:50:25] <blihp> I'm curious if anyone can point me in the direction of any work regarding quantifying and comparing the shape of structured data (graphs in particular)?
[08:51:01] <beach> Stuff like that is often NP-complete.
[08:53:45] <blihp> no 'good enough' approximations that you're aware of?  I'm looking for something that gets me in the ballpark rather than extreme precision or accuracy
[08:54:34] <blihp> i.e. something to tell me whether or not I need to take a closer look at two or more graphs
[08:54:40] <beach> I suspect the kind of acceptable approximations greatly depend on the application, which is why I don't think there is any general algorithms.
[08:55:11] <blihp> fair enough.  that explains why I'm not finding much :-)
[08:55:33] <beach> I may be wrong, but I suspect you are out of luck.
[08:56:56] <moon-child> there was a paper recently about merging identical or partially-identical function bodies in llvm that might be of interest.  But I agree with beach: it's hard to give a general answer without knowing more about the problem domain
[08:57:56] <moon-child> https://rcor.me/papers/lctes21hyfm.pdf  this
[08:58:08] <blihp> my initial interest is in comparing the ast of methods/functions if that helps
[08:58:40] <moon-child> ah, cool, so there is some overlap there.  Trees are probably easier than arbitrary graphs
[08:59:07] *** Joins: pjb (~pjb@user/pjb)
[09:00:03] <blihp> trees definitely work for my immediate needs
[09:00:34] <beach> blihp: Yes, I am with moon-child.  If you have trees or nearly so (as we do in Cleavir) then things are much easier.
[09:01:47] <blihp> just skimming the intro of the paper looks promising
[09:03:33] <blihp> different specific application but same general problem
[09:04:36] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 272 seconds)
[09:05:00] *** Joins: Mandus (~aasmundo@85.112.154.250)
[09:15:06] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[09:15:42] <blihp> grr... the fingerprint is what I'm after but they're using the content rather than the structure of the function
[09:16:57] <blihp> (i.e. how to quantify the structure to create a fingerprint)
[09:17:28] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 265 seconds)
[09:19:04] *** Joins: pjb (~pjb@user/pjb)
[09:19:19] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:19:30] *** Quits: cmack (~charlie@2600:1700:5d51:26ff:705c:714f:74da:e38d) (Ping timeout: 240 seconds)
[09:28:05] *** Joins: pve (~pve@178-55-0-176.bb.dnainternet.fi)
[09:34:01] *** Joins: cjb (~cjb@user/cjb)
[09:35:08] *** Quits: cjb (~cjb@user/cjb) (Client Quit)
[09:41:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:41:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:41:54] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 240 seconds)
[09:46:42] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 240 seconds)
[10:31:29] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[10:33:11] <clhelp> Anyone got any ideas about my dilemma above?
[10:33:58] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[10:37:27] *** Joins: mayuresh (~mayuresh@182.58.211.254)
[10:38:14] *** Parts: mayuresh (~mayuresh@182.58.211.254) ()
[10:39:00] *** Joins: mayuresh (~kathe@182.58.211.254)
[10:39:20] *** Joins: [deleted] (~livoreno@user/notzmv)
[10:39:51] *** Quits: mayuresh (~kathe@182.58.211.254) (Client Quit)
[10:40:35] <beach> What is the dilemma?
[10:40:53] *** Joins: kathe (~kathe@182.58.211.254)
[10:41:27] <kathe> Hello. :)
[10:41:40] <beach> Hello kathe.
[10:41:41] <clhelp> So I've got the following version of with-gensyms, that takes a let-like form as its argument: https://0x0.st/-fLP.txt
[10:42:22] <kathe> beach, you also know me as "mayureshkathe" and "mayuresh" from my older (now defunct) handles.
[10:42:37] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[10:42:55] <beach> kathe: I see.
[10:43:31] <clhelp> The macroexpand-1 output is https://0x0.st/-fLZ.txt
[10:43:31] <beach> clhelp: I am not going to attempt to debug that.  Double backquotes are messy.  But ,, is usually a bad sign.
[10:43:48] <clhelp> There's an extra comma in the nested let, and I have no idea why
[10:43:56] <kathe> sort-of off-topic; would anyone know whether LispWorks (except the IDE) is written mostly in CommonLisp just like SBCL is (unlike Clisp's case)?
[10:44:00] <clhelp> Sure; do you know if there's a better way to write this?
[10:45:05] <beach> clhelp: I think there should be a comma before each VAR.
[10:45:36] <beach> You don't want literal VAR1, VAR2, and TESTVAR in the expansion.
[10:45:51] <kathe> i am on a GUI IRC client now, one which does not show the welcome messages while joining the commonlisp channel, would someone please share the link for the log?
[10:45:51] <clhelp> Yeah... that's another issue
[10:45:54] <beach> kathe: Probably.
[10:46:44] <clhelp> Here's the intended output: https:/0x0.st/-fLN.txt
[10:46:55] <beach> kathe: https://irclog.tymoon.eu/libera/%23commonlisp
[10:46:55] <clhelp> https://0x0.st/-fLN.txt *
[10:47:53] <kathe> beach: thanks for that.
[10:47:58] <beach> I think the ,,(loop is the culprit.
[10:48:25] <clhelp> Yeah, though the loop is executed, so clearly the ,, is being interpreted correctly
[10:48:28] <beach> kathe: It would be insane to write the better part of a Common Lisp implementation in anything but Common Lisp.
[10:49:42] <beach> kathe: In fact, Common Lisp would be a good choice for any compiler-related work.  I am amazed that the GCC and LLVM people use such low-level languages for it.
[10:50:10] <kathe> beach: true, but ultimately, the base interpreter is written in something like C or assembly, but in the case of Squeak (Smalltalk) the whole system is written in Smalltalk-80 and then internally compiled to create native systems for working with Squeak itself. Sort of a meta-compiler.
[10:50:12] <clhelp> This is probably not a great way to write with-gensyms anyway, since it backquotes the forms passed to it
[10:50:28] <clhelp> Would be nice to know why it doesn't work, though
[10:50:48] <beach> kathe: What "base interpreter" are you talking about?
[10:51:04] <beach> kathe: Most modern Common Lisp systems don't have an interpreter at all, and the compiler is written in Common Lisp.
[10:51:27] <clhelp> SICL includes a large amount of C, yeah?
[10:51:42] <beach> clhelp: There is not a single line of C in SICL.
[10:51:46] <kathe> beach: if there's no base interpreter, how does the REPL work? something has to interpret that isn't it?
[10:52:00] <clhelp> Oh, hm... wonder hat I am thinking of, in that case
[10:52:03] <clhelp> what*
[10:52:06] <beach> kathe: No, it is compiled on the fly.  Read-Compile-Execute-Print.
[10:53:13] <beach> kathe: Misconceptions like that are often the reason people avoid interactive languages, because they think: interactive => interpretation => slow.
[10:53:43] <kathe> beach: I think you're mistaken. The base system has to be an interpreter, just like the first Lisp coded up by McCarthy's intern in assembler even though he was specifically told to write a compiler, he'd written an interpreter.
[10:54:08] <moon-child> beach: I thought sicl (or cleavir?) includes an ast interpreter?
[10:54:18] <moon-child> kathe: obviously you have to bootstrap somehow.  That does not mean  you have to have an interpreter
[10:54:25] <beach> moon-child: Only for bootstrapping.
[10:54:40] <beach> kathe: I guess my decade of work on SICL was in vain then.
[10:54:46] <clhelp> kathe: SBCL's repl, at least, compiles its input
[10:55:03] <kathe> beach: Clisp has it's interpreter written in C.
[10:55:11] <beach> kathe: Yes, I know.
[10:55:13] <kathe> beach: the rest of Clisp is in Common Lisp.
[10:55:25] <moon-child> yes, clisp is a lisp interpreter written in c.  That is not a categorical statement
[10:55:38] <beach> kathe: CLISP is odd in that respect.
[10:56:50] <kathe> beach: I guess SBCL and other's have have their interpreters written in Common Lisp which are then compiled into native binaries while building. But they also must have compilers to compile Common Lisp to native code while generating binaries of other Common Lisp applications written in them.
[10:57:07] <beach> kathe: It is great that you brought up that issue, because it is essential that you understand that an interpreter is not required.
[10:57:49] <beach> kathe: SBCL does have an interpreter, but it is not usually used.  And SICL doesn't have an interpreter, and won't have one later either.
[10:58:50] <kathe> beach: then why does Lisp lore talk about the revolt by McCarthy's intern who realised that it would be wiser to write an interpreter first to run Lisp and then write a compiler in Lisp for building application binaries?
[10:59:07] <beach> kathe: The input is read by READ which is written in Common Lisp.  Then it is compiled using the compiler, which is written in Common Lisp.  The output of the compiler is native executable instructions for the processor in question.  Then those instructions are executed by the processor.
[10:59:46] *** Joins: karlosz (~karlosz@router.cloyne.org)
[10:59:46] <kathe> beach: it was that first revolt which created the interpreter which led to the REPL which changed everything by bringing in bottom-up style of writing code.
[10:59:55] <beach> kathe: In 1958 they didn't have any Lisp system to bootstrap from.  Now we do.
[11:00:02] <blihp> kathe: you're talking about 50+ years ago... radically different expectations and hardware capabilities
[11:00:27] <kathe> blihp: 50+ years ago, compilers were more preferable than interpreters.
[11:00:36] <kathe> that is why McCarthy insisted on a compiler.
[11:00:47] <kathe> but that smart intern wrote an interpreter instead.
[11:01:09] <beach> kathe: As blihp points out, things are different now.
[11:01:21] <kathe> beach: okay.
[11:01:27] <beach> kathe: We have excellent existing Common Lisp implementations that can be used for bootstrapping.
[11:02:01] <kathe> beach: most Common Lisp implementations depend on Clisp for bootstrapping them on new platforms.
[11:02:08] <beach> So?
[11:02:22] <kathe> because Clisp is written in C which is simpler and easier to port to newer architectures.
[11:02:37] <beach> kathe: So SICL is written entirely in Common Lisp.  And I use SBCL (at the moment, but any conforming implementation will do) for bootstrapping.
[11:02:37] <kathe> Clisp's interpreter approach seems superior.
[11:02:40] <kakuhen> isn't ECL written in C as well? I swore some Linux distributions use ECL to bootstrap SBCL
[11:02:52] <kakuhen> more so than CLISP nowadays
[11:02:52] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[11:02:56] <beach> kathe: Superior to what?
[11:03:26] <beach> kathe: Like I said, interpreters are slow, so if most Common Lisp systems were interpreted, then even fewer people would consider Common Lisp.
[11:03:32] <kathe> beach: try moving a pure Common Lisp implementation across architectures without having a native Common Lisp environment for the newer architecture. Good luck with that.
[11:03:58] <kakuhen> kathe: doesn't cross-compilation make this point a bit moot?
[11:04:03] <beach> kathe: Same problem with any language, including C.  You just cross compiler.
[11:04:25] <beach> *cross compile.
[11:04:28] <blihp> kathe: lots of ways to skin that cat
[11:04:49] <kathe> beach: C usually is provided the luxury of a full-blown native development environment by the provider of the newer architecture.
[11:04:55] <Mrtn[m]> Poor cat ...
[11:05:01] <kakuhen> kathe: I recall asking a question here a few weeks ago on how people would introduce a Common Lisp implementation on a new architecture where one already doesn't exist, and I got a good answer from phoe. In short, cross-compilation is useful here.
[11:05:17] <kathe> kakuhen: okay.
[11:05:31] <beach> kathe: I am not sure what your point is.  Are you saying we should stop writing Common Lisp systems that generate efficient code, and perhaps also abandon the ones we have?
[11:05:42] <kakuhen> I should have their explanation stored somewhere in my logs and send them, if that's not against any rules here
[11:06:07] <kathe> beach: that is extreme. I mean, interpreters are vital to provide a richer REPL experience.
[11:06:16] <blihp> in the end, it really depends on what the *particular* implementation needs
[11:06:16] <moon-child> kathe: if you would like your compiler to run at all on the target architecture, it will have to generate code for the latter.  Which being the case it's a smop to make it cross-compile for that architecture
[11:06:24] <kathe> beach: Even Perl5 code is compiled by it's "interpreter".
[11:06:29] <beach> kathe: The compiler has a code-generation phase.  You just write a code generator for the new architecture and then run the code generation on an existing system.
[11:07:03] <beach> kathe: Interpreters are absolutely not necessary for a REPL, as SBCL and others show, and it is essential that you understand that.
[11:07:17] <kathe> beach: okay, understood.
[11:07:41] <moon-child> kathe: a compiler can arguably provide a richer repl experience than an interpreter, because it is likely to perform more static analysis of the code it compiles
[11:08:00] <Mrtn[m]> Beach, interesting angle. I used to think that with the improvement of hardware, pseudo architectures like Java-bytecode might become increasingly interesting.
[11:08:02] <moon-child> if anything.  In practice the difference is likely to be negligible
[11:08:22] <moon-child> Mrtn[m]: jvm and llvm are not uninteresting, but you still have to write a compiler for them
[11:08:31] <kakuhen> yeah honestly I don't really think twice about whether I am interpreting or compiling lisp code when I work on a project
[11:08:45] <kakuhen> SLY is good at hiding the ugly details from me, and I just know that C-c C-c on the relevant region will update my program
[11:09:03] <beach> kakuhen: That's because you don't have to, and that's because people write compilers for you that generate efficient code.
[11:09:25] <kathe> kakuhen, the first thing that comes to mind when-ever i encounter any new language/programming-system is whether it is compiled or interpreted.
[11:09:35] <beach> Mrtn[m]: I agree with moon-child.
[11:09:42] <kathe> beach: thanks for the clarification about modern Common Lisp.
[11:09:48] <beach> Pleasure.
[11:09:52] <Mrtn[m]> moon-child: But only once, and that could be a highly optimised jit-compiler for good measure, I guess.
[11:10:42] <kathe> kakuhen, I don't use Emacs and it's environment, so that never happened to me.
[11:11:01] <Mrtn[m]> beach: Java-bytecode was just meant as an example. I think we need something that supports native threads.
[11:11:04] <beach> Mrtn[m]: That approach is good in theory, but existing virtual machines are often not such a good fit for Common Lisp.
[11:11:07] <kathe> kakuhen: I write code in a separate editor and load it in the REPL in a separate window.
[11:11:19] <moon-child> Mrtn[m]: the other problem is that such architectures tend only to be suited to a relatively narrow body of languages.  The jvm does well enough for java, but it would not do a good job of compiling common lisp or haskell, which is why common lisp and haskell implementations do not (generally) target it
[11:11:27] <blihp> Mrtn[m]: see the opensmalltalk vm for an example of what I think you're describing... it scales from a bytecode interpreter to a highly performant JIT compiler in a single architecture
[11:11:32] <Mrtn[m]> beach: Exactly. 😁
[11:11:36] <blihp> very handy for porting to new architectures
[11:11:50] <kakuhen> kathe: the ability to move a pointer to any region in a buffer and evaluate a lisp expression (or compile a region of lisp code) really made me rethink REPLs
[11:12:13] <kathe> kakuhen:  https://www.xach.com/rpw3/articles/BJqdnd9R65ee3qDbnZ2dnUVZ_vGinZ2d%40speakeasy.net.html
[11:12:18] <kakuhen> coming from python, I used to find REPLs as a very "rigid" and 1-dimensional thing, and my view changed after using emacs for a long enough time
[11:12:44] <moon-child> similarly the raku people made their own vm in no small part because no existing vm could efficiently implement their variety of dynamic dispatch.  By the same token, their vm, though generic, is unlikely to see many targets because of the overhead associated with its dispatch
[11:12:47] <Mrtn[m]> Blihp: Cool. I never looked into small-talk. I thought it was an interior programming language for the Macintosh machine.
[11:13:04] <kathe> kakuhen: I personally think Emacs and it's toolkit is overly hyped up. Especially when compared to commercial IDEs like LispWorks.
[11:13:31] <kakuhen> it probably is, but most of us probably don't want to drop $1,000+ on a lisp compiler (yet)
[11:13:48] <Mrtn[m]> Kathe: How many decades have you worked with Emacs?
[11:13:50] <kathe> it's not just a compiler, it's full environment.
[11:13:58] <kakuhen> I'm aware.
[11:13:59] <moon-child> isn't there a free version of lispworks?
[11:14:08] <blihp> Mrtn[m]: it's been multi-platform since the 80's
[11:14:10] <kathe> Mrtn[m]: I hated Emacs ever since I touched it 25 years back.
[11:14:18] <kakuhen> kathe: CAPI looks very interesting, but I first want to see how the "modernization" efforts in McCLIM go before I try it out
[11:14:28] <Mrtn[m]> kathe: Then you're biased. 😁
[11:14:46] <kathe> Mrtn[m]: I was raised on edit.com and then "vi".
[11:14:57] <Mrtn[m]> bliph: Oh, so it did start out on a Mac?
[11:15:03] <kakuhen> kathe: CAPI is the one 'killer' feature in LispWorks to me, since it seems to provide something that sounds as good as qtools but not have the headaches associated with ffi madness
[11:15:38] <blihp> Mrtn[m]: you're thinking of Squeak which originated on a Mac in the 90's when Allan Kay got the band back together at Apple for a while
[11:15:43] <kakuhen> I know that Clozure CL has an objective-c bridge and you can treat objective-c objects as CLOS objects (which is really slick), but it's been largely unmaintained and I haven't gotten it to work on any modern Mac, yet.
[11:15:46] <blihp> but it was very quickly ported to windows and linux
[11:15:46] <Mrtn[m]> Kathe: I used VI until I figured out how to use Emacs.
[11:16:16] <kathe> kakuhen: there are many "killer" features in LispWorks, the most important one being it is so tightly integrated with the visual graphical toolkit to aid development.
[11:16:28] <blihp> kakuhen: that's a bummer.  it used to be very nice (I haven't used it in over a decade though)
[11:16:44] <Mrtn[m]> Blihp: Yeah, that's when I first heard of it. Start 90's.
[11:17:10] <kakuhen> objective-c is a bit of an oddball since you are able to create and inspect objects at runtime (much like CLOS), but a very big difference from Common Lisp is that you do not have access to the compiler at runtime, whereas in Common Lisp I think you do (please correct me if this is wrong)
[11:17:47] <blihp> I'm actually troubleshooting some Smalltalk stuff on Linux right now which is why I'm futzing around in IRC... I don't feel like working :-)
[11:17:48] <kakuhen> so being able to write graphical mac programs with this bridge sounds awesome to me, but i sadly havent gotten it working
[11:18:09] <kakuhen> it's mostly due to the extra commands that happen when you (require 'cocoa-application) or whatever the name was
[11:18:22] <Mrtn[m]> Kathe: I wouldn't regress to a proprietary development tool now. I'd rather write my stuff with /bin/ed
[11:18:33] <kakuhen> it tries to create some folders and files in /usr/local/share (or /opt/local/share), which typically doesn't offer your user write access
[11:18:43] <kakuhen> so CCL immediately drops into the debugger over the failed writes
[11:18:45] <blihp> all I can tell you is that even when it was working, the obj-c bridge was pretty manual (at least when I was using it)... but it was very, very nice if you didn't mind wrapping the frameworks yourself
[11:18:51] <kathe> Mrtn[m]: "ed" is the one true editor. 😁️
[11:19:18] <Mrtn[m]> Kathe: The "standard". 😀
[11:19:32] <kathe> Mrtn[m]: 🤣️
[11:20:35] <kathe> beach: can you share the URL for SICL?
[11:20:38] <kakuhen> blihp: right, i understood implicitly that I will have to programmatically set up NSWindows and constraints
[11:20:54] <kakuhen> thankfully my exposure to interface builder in the past weeks has convinced me more and more of "going nibless"
[11:20:55] <kathe> Google shows results for sickles.
[11:22:23] <blihp> are you on an old version of os x?  I thought they deprecated IB years ago
[11:23:13] <blihp> (I have not kept up at all with the state of the art on the mac side)
[11:23:15] <kakuhen> blihp: interface builder is not deprecated at all. It is "deprecated" for iOS apps in the sense that you must provide a splash screen as a storyboard (making pure IB programs impossible to submit to app store), but that's all.
[11:23:15] <beach> minion: Please tell kathe about SICL.
[11:23:16] <minion> kathe: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[11:23:35] <beach> kathe: It is not finished, so don't try to use it.
[11:23:46] <blihp> ah, cool.  I actually liked IB quite a bit when I was doing obj-c stuff
[11:24:04] <kakuhen> I like IB, until the inevitable insertion of constraints.
[11:24:17] <kakuhen> I'm assuming that will annoy me a lot if I ever get the obj-c bridge in ccl workoing
[11:24:18] <kakuhen> working*
[11:24:53] <kakuhen> i cant imagine writing all of that in code when through ib it's already very sensitive and results often differ at runtime
[11:25:31] <clhelp> Since there're a few more people here now, I'll try and post my question once more; does anyone know what's wrong with this macro: https://0x0.st/-fLP.txt
[11:25:46] <clhelp> Specifically, why is there an extra comma in the nested let?
[11:25:55] <clhelp> (The generated one, that is)
[11:26:10] <beach> Not only is McCLIM being worked on ("modernized"?) but some of us are (slowly) working on an IDE for Common Lisp.
[11:27:06] <kathe> beach: can you share some links to details about that IDE for Common Lisp?
[11:27:08] <clhelp> beach: Are you behind the climacs project? Currently a vim user, but would use a non-elisp emacs-like in a heartbeat
[11:27:10] <beach> The hope is that the user experience of writing Common Lisp code is going to be unbeatable by anything else.  We still have a ways to go, though.
[11:27:30] <clhelp> And by non-elisp, I probably mean common lisp
[11:27:45] <beach> kathe: There is no single project at the moment.  There are bits an pieces though, like Clouseau in McCLIM.
[11:27:50] <blihp> beach: it was a pleasant surprise to see how well the pieces of that are shaping up... I definitely got a flavor for where you're going with it
[11:28:00] <beach> clhelp: yes, and we are working on Second Climacs, which is version 2.
[11:28:18] <beach> blihp: Great!  Thanks!
[11:28:26] <clhelp> Thanks for doing that!
[11:28:50] <beach> clhelp: Actually, scymtym is the one working directly on those parts right now.
[11:29:11] <clhelp> Oh, okay
[11:29:13] <beach> clhelp: I designed the incremental reader for the Common Lisp buffer.
[11:34:24] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[11:34:25] *** Quits: clhelp (~clhelp@2601:547:980:6c30:eede:9bd4:c3b0:a596) (Ping timeout: 246 seconds)
[11:36:10] <kathe> Okay, I gotta go now. Meal time.
[11:36:13] <kathe> TTYL.
[11:36:17] *** Quits: kathe (~kathe@182.58.211.254) (Quit: kathe)
[11:39:25] *** Joins: susam (~susam@user/susam)
[11:50:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (Ping timeout: 265 seconds)
[12:12:09] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[12:16:14] <ecraven> how do I tell SBCL to print everything in *slime-events* to full depths, and not ellipsize some deeply nested lists?
[12:16:40] <beach> clhs *print-depth*
[12:16:40] <specbot> Couldn't find anything for *print-depth*.
[12:16:43] <beach> Bah.
[12:16:47] <ecraven> thanks ;)
[12:16:52] <beach> Something like that.
[12:17:07] <beach> clhs *print-level*
[12:17:07] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_pr_lev.htm
[12:17:09] <beach> There.
[12:17:41] <beach> clhs *print-length*
[12:17:41] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_pr_lev.htm
[12:19:34] <ecraven> no luck. I'll check the sources, thanks for the hints!
[12:20:45] <beach> Those variables could be bound differently in different threads.
[12:24:50] *** Joins: treflip (~user@95.79.32.99)
[12:25:48] <ecraven> yea, probably the repl thread is not the same as whatever prints to *slime-events*
[12:30:32] <beach> That seems plausible.
[12:33:27] *** Joins: igemnace (~ian@user/igemnace)
[12:48:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:51:20] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[12:51:20] *** Lord_of_Life_ is now known as Lord_of_Life
[13:03:27] *** Joins: lotuseater (~user@p200300e7870b0900249b68ce60a870ab.dip0.t-ipconnect.de)
[13:10:02] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[13:11:01] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[13:21:28] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[13:21:42] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:41:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:4c87:4e7b:4c37:18d7)
[13:47:00] *** Joins: Guest82 (~Guest82@87.70.11.162)
[13:47:05] <Guest82> Hi
[13:47:19] <beach> Hello Guest82.
[13:47:33] <Guest82> Hi beach, thanks for answering! :)
[13:47:43] <Guest82> I am trying to do a very simple install of utopian
[13:47:54] <Guest82> and I created a project following the getting started
[13:48:02] <Guest82> https://github.com/fukamachi/utopian
[13:48:08] <Guest82> and when I run qlot install
[13:48:13] <Guest82> I get the following error:
[13:48:24] <Guest82> Error: couldn't read from #<SB-SYS:FD-STREAM for "socket 192.168.1.109:62181, peer: 13.226.3.87:80" {10021489D3}>:
[13:48:24] <Guest82>          Network is down
[13:48:34] <Guest82> Error while executing a shell command: "/usr/local/bin/ros" "+Q" "-L" "sbcl-bin" "--eval" "(require 'asdf)" "--eval" "(setf *debugger-hook* (lambda (c parent) (declare (ignore parent)) (format *error-output* \"~&Error: ~A~2%\" c) (uiop/image:print-backtrace :condition c) (uiop/image:quit -1)))" "--eval" "(setf
[13:48:34] <Guest82> asdf/source-registry:*default-source-registries* (quote (asdf/source-registry:environment-source-registry asdf/source-registry:system-source-registry asdf/source-registry:system-source-registry-directory)))" "--eval" "(let ((*standard-output* (make-broadcast-stream))) (load
[13:48:35] <Guest82> #P\"/var/folders/nc/ln1v4ckx4yn201k8mrkwflw80000gn/T/qlot-GV2U4BZK/quicklisp-CHTROL6R.lisp\"))" "--eval" "(setf quicklisp-quickstart:*after-initial-setup-message* \"\")" "--eval" "(let ((*standard-output* (make-broadcast-stream)) (*trace-output* (make-broadcast-stream))) (quicklisp-quickstart:install :path
[13:48:35] <Guest82> #P\"/Users/danielnussenbaum/Development/projects/lisp/todo_web/.qlot/\"))" (Code=255)
[13:48:36] <Guest82>   Error: couldn't read from #<SB-SYS:FD-STREAM for "socket 192.168.1.109:62181, peer: 13.226.3.87:80" {10021489D3}>:
[13:48:36] <Guest82>          Network is down
[13:48:51] <Guest82> My computer is a bit old...
[13:49:04] <beach> Please use a paste site for that much text.
[13:49:14] <Guest82> when using slyblime (I'm not yet profficient in emacs yet)
[13:49:18] <Guest82> ehm, ok, one sec
[13:49:20] <Guest82> sorry
[13:50:47] <Guest82> ok, here it is: https://pastebin.com/rYuT3igz
[13:51:33] <Guest82> When using slyblime, I was getting a timeout error, they suggested to change the settings like this: https://github.com/s-clerc/slyblime/issues/11
[13:51:47] <Guest82> the maximum time, load time, and setup time, and that fixed that issue for me
[13:52:08] <Guest82> I was trying to figure out where those settings are called in the sbcl bin
[13:52:10] <Guest82> or in ros
[13:52:14] <Guest82> but couldn't figure it out
[13:52:51] <Guest82> I think the issue is just that, that my computer is a bit slow, and I need to pass on some setting to the sbcl, or ros, to give it a longer timeout before declaring an error like network down
[13:52:59] <Guest82> Do you know how I can do that?
[13:57:31] <Guest82> Where is the best place to ask a question like this? here or overflow?
[13:57:44] <beach> Probably here.
[13:59:38] <Guest82> ok, so at least I'm int he right place. Was the question clear? Should I just wait in the hopes that someone will answer or if I didn't get an answer relatively quickly I should despair???
[13:59:52] <Guest82> I've been dealing with this for a few days now...
[14:00:20] <Guest82> btw thanks for replying to me! It makes me feel like I'm not just being ignored
[14:00:24] <beach> This is Sunday lunch time in Europe, and many people here have families that they would rather spend time with on a Sunday.
[14:00:37] <Guest82> oh, I hear
[14:01:49] <beach> And it is not the domain of expertise of everyone.  Many people here are interested in how Common Lisp is implemented for instance, and not so much in web applications.  That is certainly my case.
[14:02:07] <beach> So you may have to be patient.
[14:02:59] <beach> Oh, and Fukamachi-ware is notoriously badly documented, so some people stay away from it for that reason.
[14:09:44] *** Joins: rgherdt (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de)
[14:11:44] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[14:12:03] *** Joins: livoreno (~livoreno@user/notzmv)
[14:15:09] <Guest82> ok, thanks for letting me know
[14:19:45] *** Joins: shka (~herr@109.231.62.239)
[14:20:37] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:4c87:4e7b:4c37:18d7) (Remote host closed the connection)
[14:21:07] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[14:22:14] <blihp> Guest82: for a small (in terms of users) project like that, I generally have more success contacting the author directly (try opening an issue on github) as finding other users of the library may be difficult
[14:25:58] <Guest82> ok, thanks, I thought it's not really an issue with his library, rather an issue with how can I call roswell
[14:26:07] <Guest82> Who should I contact? qlot or roswell?
[14:26:39] <Guest82> blihp thanks for getting back to me!
[14:28:57] <blihp> don't know... I'm not familiar with the packages.
[14:30:57] <blihp> got to head out... sorry I couldn't be more help
[14:33:43] <Guest82> blihp thanks for trying!
[14:38:42] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[14:38:42] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:39:16] *** Joins: xsperry (~as@user/xsperry)
[14:39:52] *** Quits: Guest82 (~Guest82@87.70.11.162) (Quit: Client closed)
[14:50:08] *** Quits: frgo (~frgo@p200300deef27d7000014c390a34d95ff.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:50:38] *** Joins: frgo (~frgo@p200300deef27d7000014c390a34d95ff.dip0.t-ipconnect.de)
[14:51:29] *** Joins: pjb (~pjb@user/pjb)
[15:10:51] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[15:12:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[15:13:03] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[15:17:06] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 240 seconds)
[15:20:45] *** Joins: domovod (~domovod@176.196.122.197)
[15:41:17] *** Joins: random-nick (~random-ni@87.116.179.138)
[15:43:28] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[16:23:15] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[16:35:36] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[16:40:48] <shka> lol, alloy does not even depends on the alexandria
[16:40:54] <shka> it uses it for tests though
[16:44:55] *** Joins: Alfr (~Alfr@user/alfr)
[16:53:03] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[16:54:15] *** Joins: derelict (~derelict@user/derelict)
[16:58:16] <shka> Shinmera: hey, what is the alloy-glfw and when i can get it?
[16:58:25] <shka> it seems that examples depend on it
[16:58:41] <Shinmera> ?
[16:58:56] <shka> right, some context is needed
[16:59:19] <shka> i just download alloy, and was planning to tinker with it
[16:59:37] <Shinmera> it's... in the source? alloy/renderers/glfw/alloy-glfw.asd
[16:59:46] <shka> oooh
[17:00:52] <shka> i wonder why ag failed to find this asd file
[17:01:02] <shka> Shinmera: sorry for the hassle
[17:02:12] <shka> oh, it did not failed, it just listed it on the very bottom :D
[17:04:46] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[17:08:43] <shka> Shinmera: it all works just fine
[17:08:52] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[17:14:43] *** Joins: igemnace (~ian@user/igemnace)
[17:14:57] <Shinmera> Not really. The GLFW backend uses fond for rendering text, which has several issues. The MSDF text renderer is leagues better, but atlas generation is broken right now.
[17:23:56] <shka> Shinmera: well, examples look fine for me, but i don't know how they are supposed to look
[17:24:27] *** Joins: attila_lendvai (~alendvai@217.65.126.101)
[17:24:28] <Shinmera> they'll probably look fine, the devil's in the details
[17:24:38] <Shinmera> (text wrapping, text bounding, glyph rendering, etc.)
[17:25:11] <shka> ah, ok
[17:26:13] <shka> any tips on what parts of the code to read to be able to implement my own widget?
[17:32:17] *** Joins: [deleted] (~livoreno@user/notzmv)
[17:32:24] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 265 seconds)
[17:34:26] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[17:34:57] <shka> Shinmera: anyway, code looks really slick, and examples are easy to understand
[17:35:40] <Shinmera> uuuuh
[17:36:07] <Shinmera> not sure what you mean by widget, and also not sure I know good starter points in general.
[17:36:14] <Shinmera> haven't had time to concern myself much with that stuff.
[17:36:33] <shka> well, let's say that i want to render a button, but this time triangle :-)
[17:36:42] <shka> i mean, a triangle button
[17:37:41] <Shinmera> you'll need to either define a button subclass and use presentations:define-realization, or use the :shapes initarg... if I recall right? That stuff is part of the presentations stuff, renderers/simple/presentations/
[17:38:04] <shka> i will take a look there, thanks for help
[17:38:08] <shka> have a nice sunday
[17:44:15] *** Joins: easye` (~user@2a01:4f8:200:8261::b0)
[17:45:14] *** easye` is now known as easye
[18:02:22] *** Quits: rgherdt (~rgherdt@ip5f5af1c1.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[18:05:25] *** Joins: kathe (~kathe@182.58.250.216)
[18:06:31] *** Quits: kathe (~kathe@182.58.250.216) (Client Quit)
[18:06:43] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[18:10:11] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com)
[18:20:20] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[18:34:07] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[18:37:52] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:43:49] *** Quits: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[19:01:20] *** Joins: d4ryus (~d4ryus@ppp-188-174-87-234.dynamic.mnet-online.de)
[19:01:30] <Josh_2> 'ello
[19:02:09] <Josh_2> Anyone know if ChanL spawns a new thread each time pexec is called or if it grabs a running thread from a pool?
[19:02:57] *** Joins: Guest82 (~Guest82@87.70.11.162)
[19:05:04] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[19:21:26] <Alfr> Josh_2, it's SEND won't. It just tries to put VALUE into some channel.
[19:22:49] <Guest82> Hi, I'm getting socket errors saying the network is down, but really it's because my computer is slow... Does anyone know where to change an argument to make the timeout longer so that I can run the app?
[19:23:01] <Alfr> You'd have to create worker threads which receive-process-loop on such channels and manage them.
[19:23:45] <Guest82> I had this issue with slyblime and changed it there in the settings, now I'm trying to run some lisp code from the terminal as a bash program and I don't know where to fix
[19:23:54] <Guest82> Alfr is that for me?
[19:24:23] <Alfr> Guest82, no, it's for Josh_2. You just happened to pop up unexpectedly. ;)
[19:27:06] <Guest82> Alfr Oh ok, thanks
[19:27:59] <Guest82> Does anyone know is there an argument to pass into sbcl command line to make it wait for a response longer before declaring that a network error is down or that a problem is happening?
[19:28:07] <Josh_2> there is a lot of overhead when creating os threads
[19:28:27] <Josh_2> I am surprised that chanl has gone with that
[19:37:17] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 258 seconds)
[19:39:50] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[19:39:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[19:42:06] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[19:44:42] *** Quits: Noisytoot (noisytoot@sourcehut/user/noisytoot) (Ping timeout: 240 seconds)
[19:45:29] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[19:45:35] <etimmons> Guest82: To answer your direct question, I don't think there is one. That's likely to be something the application creating the socket is responsible for.
[19:46:17] <etimmons> But I also doubt that's your actual problem. The error in your pastebin is network down, not a timeout.
[19:51:57] <char> Does anyone know what is happening with cl-password-store. It look exactly what I want, but it looks to have some major issues
[19:51:57] <minion> char, memo from phoe: <> is often called a diamond so it becomes pronunciable
[19:55:12] <Alfr> Josh_2, that's not what I said. You have to create those receive-process-loop threads upfront.
[19:55:15] <Josh_2> char: I wrote a basic file based password store
[19:55:25] <Guest82> etimmons Thanks for getting back to me! Yeah, the reason I thought so is because I was also having problems developing on hunchenhoot in sublime text's slyblime and this solved the issue: https://github.com/s-clerc/slyblime/issues/11
[19:56:22] <Guest82> Changing the variables there of loading_time, setup_time, and maximum_timeout
[19:56:35] <Josh_2> Alfr: ah okay
[19:59:33] <Alfr> Josh_2, so bare bones for such a thread could be simply running the following thunk: (lambda () (loop (process (receive some-channel))))
[19:59:52] <Josh_2> oh I see
[20:00:00] <Alfr> s/receive/recv/g
[20:00:02] <Guest82> etimmons otherwise I didn't know where to go from here. I thought it reports network down because it doesn't wait long enough for a response from the server... when installing things with qlot, it happened a few times and if I ran the command right away it would work finishing the download, and would break again with another download, so I had to
[20:00:03] <Guest82> just run the command successively a few times till it worked, but the same didn't work with running the server...
[20:01:52] <Guest82> I'm new at lisp, I've been trying to use it for a project to learn it, but I keep getting bogged down by these types of errors for which I don't know where to turn for answers... I worked as a software developer doing serious back end web development with big data and a bunch of different systems, so I figured I would be able to work on lisp for a
[20:01:53] <Josh_2> That could be useful Alfr, allows me to easily just send commands to be executed in the background
[20:01:53] <Guest82> web app as well...
[20:02:01] <Josh_2> type errors?
[20:02:08] <Josh_2> oh sorry 'types of errors'
[20:02:37] <Josh_2> Guest82: not sure if anyone in here uses Sublime, most use Emacs or Vim
[20:02:45] <etimmons> Guest82: The variables mentioned in that slyblime issue don't get passed on to the lisp process. They tell slyblime how long to sleep between starting the process, telling the process to load slynk, and then attempting to connect. See: <https://github.com/s-clerc/slyblime/blob/33c8ccceaf884655d8fbf382f9421e0b967d924d/src/sly.py#L180>
[20:03:26] <Alfr> Josh_2, I suspect those your process function will signal. recv blocks by default when the channel is empty.
[20:03:40] <Josh_2> alrighty
[20:04:18] <etimmons> Guest82: my guess is that your something on your network is flaky. So a timeout won't help, you actually need to retry.
[20:04:27] <Guest82> etimmons thanks, I see that. So it could just be a problem with the app itself and not my system?
[20:04:39] <Guest82> I've tried many many times, it fails immediately
[20:04:44] <Guest82> there's no wait...
[20:04:56] <Josh_2> Alfr: in that case wont it just spin?
[20:05:15] <etimmons> First, I'd recommend not starting with qlot. Just use quicklisp directly (it's what qlot uses under the hood)
[20:05:40] <Alfr> Josh_2, and you likely will want to establish some catch all/most error-handlers or some error might just terminate that thread.
[20:05:57] <etimmons> If you keep having issues, this channel is more likely to be able to help since that's a more common configuration
[20:07:02] <Alfr> Josh_2, that likely depends on your CL (or bordeaux-threads') implementation.
[20:07:58] <Alfr> Josh_2, usually those things are implemented without spinning, e.g. using some trickery with memory barriers.
[20:08:04] *** Joins: notzmv (~zmv@user/notzmv)
[20:08:28] <Guest82> etimmons great thanks. Will try, I was trying to use this https://github.com/fukamachi/utopian which uses qlot by default
[20:08:31] <char> Josh_2: Is there a repository for you rpassword store? can it easily be used in another project?
[20:08:52] <Josh_2> char: https://github.com/K1D77A/trivial-password-store its only one file so yeh
[20:10:50] <Josh_2> Guest82: imo you should either just use Clack or Hunchentoot and then add on functionality you need from external libraries
[20:12:52] <char> Josh_2: Do you accept contributions, could I add asd and maybe salting?
[20:13:00] <Guest82> Josh_2 thanks. I tried using Hunchentoot and it worked well, I was hoping to use something more in par with regular web dev frameworks and not feel like I have to reinvent the wheel... but probably that's more lispy, to put the system together myself?
[20:13:45] <Josh_2> char: sure
[20:14:03] <Guest82> Can anyone try to replicate what I did to determine if it's an issue with my system or the software? Here are the steps I took https://pastebin.com/LGUcmUkH based on the getting started here: https://github.com/fukamachi/utopian Note that the DB part can be skipped...
[20:15:18] <Josh_2> Guest82: Unfortunately we dont have an epic web framework, probably because CL makes the individual so productive you dont need one
[20:16:58] <shka> Guest82: i will try to replicate this
[20:17:01] <shka> give me a second
[20:17:46] <shka> Guest82: System "utopian/main" not found
[20:18:10] <Guest82> Josh_2 haha thanks, yeah, that's why I'm trying to learn... but it's a bit of a bumpier road than most others so far
[20:18:17] <Guest82> shka Thanks!
[20:18:55] <Guest82> shka Sorry, missed a set: "Ensure ~/.roswell/bin is in your shell $PATH.
[20:19:24] <shka> well, glad to be of assistance i guess
[20:19:58] <Guest82> shka that was for you to be able to replicate :D
[20:20:03] <Guest82> hehe sorry, my bad
[20:20:20] <shka> i think that it is in my path already
[20:20:24] <Guest82> I forgot to include that step in the paste bin
[20:20:26] <Guest82> oh
[20:20:41] <Guest82> hum, can you open a new bash session or terminal or reload the path?
[20:21:02] <shka> export PATH=$PATH:~/.roswell/bin
[20:21:04] <shka> yup
[20:21:33] <shka> i am pretty sure that my setup is fine
[20:21:41] <Guest82> and it still didn't work with a new terminal session?
[20:21:58] <shka> no, the same error
[20:22:07] <Guest82> strange, give me a sec
[20:22:30] <Guest82> this worked well "ros install fukamachi/utopian"?
[20:22:40] <shka>   :depends-on ("utopian/main")
[20:22:48] <Josh_2> fukamachiware
[20:22:57] <shka> i think that readme is missing something, honestly
[20:23:08] <shka> anyway, i got to go
[20:23:16] <shka> sorry that i can't help
[20:23:31] <Guest82> can you check ~/.roswell/bin/utopian is actually there? ls ~/.roswell/bin
[20:23:43] <Guest82> ok, thanks for trying shka!
[20:23:54] <shka> Guest82: no, just lem
[20:23:59] <shka> which i installed befored
[20:24:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[20:24:22] <Guest82> oh, can you try running again "ros install fukamachi/utopian"
[20:24:33] <Guest82> ros install fukamachi/lsx
[20:24:34] <shka> i can, but i won't there will be the same result
[20:24:40] <Guest82> ros install fukamachi/qlot
[20:24:52] <shka> yeah, lsx istalls
[20:24:58] <Guest82> strange, seems like the installs are not working, for me they worked...
[20:25:14] <shka> qlot does not
[20:25:43] <shka> anyway, i am pretty sure that this is the issue for me
[20:25:44] <shka> https://github.com/fukamachi/utopian/blob/6ae7e09bc541e8bf5173069aaf93850786c02f6a/utopian.asd#L9
[20:25:50] <Guest82> hm, oh well, I guess we tried, each one got stuck at a different step, thanks again!
[20:25:55] <shka> well, the line above this one
[20:26:12] <Guest82> got it
[20:26:12] <shka> this whole system supposed to depend on the uotpian/main
[20:26:36] <shka> and utopian/main is not found
[20:26:51] <shka> so that's it i guess
[20:28:10] <Guest82> ok, thanks shka
[20:29:38] <Guest82> as an aside for learning how to debug things, how would I go about finding out where in the code is this issue? https://pastebin.com/rYuT3igz
[20:29:42] *** Joins: Noisytoot (noisytoot@sourcehut/user/noisytoot)
[20:32:47] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:983c:267:434:16fb)
[20:33:56] <Guest82> Josh_2 is caveman2 also good? I tried using caveman2 for a todo app and it worked, meaning I was able to figure out how to use it, radiance seemed cool but didn't end up going through TLDR... Why is Clack more accepted? Just because it's an abstraction layer?
[20:34:09] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[20:34:29] <Guest82> I can put things together from external libraries, but that's exactly what it seemed that this utopian project is doing...
[20:34:31] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Client Quit)
[20:34:44] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[20:37:43] <Josh_2> Personally never used roswell or any of the external tools for managing lisp projects, other than quicklisp ofc
[20:39:07] <Josh_2> Also I just use hunchentoot, although if I knew I had a high traffic project then I'd use clack because it supports Woo as a backend
[20:39:23] <Josh_2> like if I was writing an application service for Matrix then I would use Clack because Woo is so fast
[20:39:24] <Guest82> Have you used Woo or just saw the claims?
[22:00:59] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[22:01:28] *** Server sets mode: +Ccntz 
[22:01:48] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[22:08:57] <char> quicklisp is very good. I've also been trying out guix, and it is pretty nice too.
[22:10:13] *** Joins: cage (~cage@dynamic-adsl-78-15-22-223.clienti.tiscali.it)
[22:12:36] <lisp123> what is guiz
[22:12:38] <lisp123> guix*
[22:13:05] *** Parts: susam (~susam@user/susam) ()
[22:13:10] *** Joins: susam (~susam@user/susam)
[22:16:28] *** Joins: treflip (~user@95.79.32.99)
[22:16:28] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[22:16:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[22:16:54] *** Joins: treflip (~user@95.79.32.99)
[22:19:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:27:42] *** Joins: Guest82 (~Guest82@87.70.11.162)
[22:28:56] <Josh_2> GNU Guix
[22:30:01] *** Joins: derelict (~derelict@user/derelict)
[22:30:04] <hendursaga> lisp123: it's GNU Guile based mind you
[22:31:12] <lisp123> thanks Josh_2 and hendursaga
[22:31:49] <lisp123> I've herad good things about GNU Guile, its on my list to check out as I complete my transformation into a GPL / FSF supporter
[22:33:19] <hendursaga> lisp123: you mean, cult follower? :)
[22:33:54] <lisp123> hendursaga: Exactly :) I had the word on the tip of my tongue but couldn't find it
[22:44:36] <Josh_2> I used Guile in a university project
[22:45:20] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[22:45:35] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.2)
[22:46:52] <Josh_2> Condition variables stop spinning right?
[22:49:43] *** Quits: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de) (Remote host closed the connection)
[22:50:08] *** Joins: bhaible (~bruno@dslb-088-068-034-084.088.068.pools.vodafone-ip.de)
[22:51:46] <Josh_2> maybe its semaphores
[22:59:45] <char> Josh_2: This is quite an ... interesting way of printing objects
[23:00:04] <Josh_2> in that password store?
[23:00:38] <char> yes
[23:02:49] <Josh_2> Well I did make it in a couple hours as a challenge for some discord server i was in
[23:05:25] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[23:12:30] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:12:36] <char>  It seems like it needs some work before it is really usable
[23:14:21] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:16:57] *** Joins: cammie (~cammie@pa49-181-189-8.pa.nsw.optusnet.com.au)
[23:17:51] *** Quits: cammie (~cammie@pa49-181-189-8.pa.nsw.optusnet.com.au) (Client Quit)
[23:19:48] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[23:20:34] <Josh_2> What do you think needs doing?
[23:23:12] <char> Josh_2: I'm also not sure bringing in babel was a good idea. I'm getting a end-off-input error now
[23:23:25] <Josh_2> huh
[23:23:34] <Josh_2> alright one sec then
[23:24:41] <char> Josh_2: salt, and I'm not sure that the to-encrypt arg is supposed to be, maybe just a little more documentation and exmaple would do.
[23:25:32] <Josh_2> I can't remember if a salt is actually required because I use an IV
[23:25:46] <Josh_2> if you encrypt the same thing twice it will have different outputs
[23:27:30] <Josh_2> I'll add some examples gimme a min
[23:29:49] <char> what does IV stand for?
[23:30:12] <Josh_2> https://en.wikipedia.org/wiki/Initialization_vector
[23:31:21] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[23:32:06] <char> oh cool
[23:32:46] <Josh_2> One sec I'm going to add a condition as well
[23:35:55] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[23:45:11] *** Joins: karlosz (~karlosz@router.cloyne.org)
[23:56:33] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[23:56:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Ping timeout: 252 seconds)
[23:57:06] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[23:58:21] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
