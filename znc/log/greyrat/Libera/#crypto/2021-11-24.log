[00:00:48] <Hash> How do you test for hash collisions? Is it just a brute approach?
[00:00:49] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:01:24] <riv> ms7821>	why is the compression called encryption?
[00:01:29] <riv> what did you mean by this?
[00:01:37] <riv> compression and encryption are two separate things
[00:02:02] <ms7821> usually a hash function is built around a compression function, but this one is built around a function called "encrypt"
[00:02:10] <Hash> riv: this is why I wondered genuinely if these are sincere questions.
[00:02:23] <ericonr> are we missing that there is a code sample above:
[00:02:25] <ericonr> ?
[00:02:42] <int-e> You /can/ turn a block cipher into a hash function, but not like that.
[00:02:44] <Hash> Not me. I been looking at it.
[00:03:11] <riv> the compression function in a hash function is a different type of compression than what we normally mean when talking about data compression
[00:03:39] <ms7821> so the result is it's encrypting a block with itself as the key, but that's not obvious from a skim read
[00:03:52] <namkeleser> int-e yeah it doesn't matter a lot
[00:03:58] <Hash> Oh yeah. Well, I mean if you have larger data than the say 128 bit hash, then compression must be introduced to produce a fixed length output
[00:04:03] <namkeleser> cuz the function later wikk give an error if u give something isn't of length 32
[00:04:05] <namkeleser> bytes
[00:04:15] <ms7821> well I don't think it will, because zip just truncates the output
[00:04:20] <int-e> namkeleser: you mean the fact that that "hash" has trivial collisions doesn't matter to you?
[00:05:09] <int-e> preimages too if you like linear algebra
[00:05:25] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:05:26] <namkeleser> yess because we're not trying to get a collision
[00:05:48] <namkeleser> to fully break it you need to find the key used
[00:05:56] <Alipha> ericonr: https://pastebin.com/ncv5kb85 is the code in question
[00:06:23] <int-e> namkeleser: uhm your hash function doesn't have a key
[00:06:30] <ms7821> Alipha: I think ericonr was aiming that at riv and Hash 
[00:06:40] <ms7821> who appear to be having an entirely different conversation
[00:07:01] <namkeleser> int-e the key itself is test
[00:07:28] <namkeleser> file
[00:07:47] <riv> ms7821: well namkeleser ignored me
[00:07:57] <maroon> hashes can also have different purposes. 'crypto' hashes need to be 1-way, hard to identify in/out string pairs better than brute force. for hashtable hashes, they need to be fast-fast, as well as avoid collisions especially between similar input strings
[00:08:45] <namkeleser> int-e
[00:08:45] <namkeleser> the flag is passed into the init of securehash
[00:08:56] <ms7821> oh, this is a CTF?
[00:09:08] <namkeleser> and then he does update
[00:09:19] <namkeleser> which calls securecipher and passes a block to it
[00:09:44] <namkeleser> but in our case a flag/test is one block
[00:09:58] <namkeleser> so that is the key of securecipher
[00:10:31] <namkeleser> ms7821 its one im making
[00:10:40] <ms7821> I've heard that before
[00:10:47] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[00:11:23] <maroon> im not sure if it's a requirement, but most secure hash candidates i've seen are NOT like encryption, where there's a guarantee that each input block has a unique output string. there's no guarantee with sha256 that each of the 2^256 possible 256 bit inputs has a unique sha256 hash digest
[00:12:37] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[00:12:47] *** Joins: anonymeowo (~anonymeow@107.189.14.18)
[00:12:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[00:14:04] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:14:27] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:15:23] *** Quits: anonymeowo (~anonymeow@107.189.14.18) (Remote host closed the connection)
[00:21:56] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 260 seconds)
[00:25:02] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[00:30:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:31:37] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Remote host closed the connection)
[00:33:20] <int-e> okay, I figured it out
[00:39:05] <namkeleser> int-e figured what out?
[00:40:06] <namkeleser> how to break it?
[00:40:50] <namkeleser> Which part?
[00:41:15] <int-e> there's a lie in that code. that's all I'll say.
[00:43:09] <namkeleser> int-e A lie? XD this hint made it worse xD
[00:45:13] <ms7821> namkeleser, int-e's already shared a preimage attack on this hash. if you wrote it yourself, it would be clear that they know what's going on
[00:45:56] <namkeleser> the perimage attack has nothing to do with this
[00:46:13] <namkeleser> with getting the flag
[00:47:58] <int-e> indeed not
[00:48:22] <ms7821> I'm just trying to suggest that perhaps you should be up-front about asking for help with this CTF instead of pretending it's your own code
[00:48:49] <int-e> which isn't a new experience for us anyway
[00:52:09] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:04:55] *** Joins: Atomic_pi12l (~atomic@gl111-42.master.pl)
[01:05:24] *** Parts: Atomic_pi12l (~atomic@gl111-42.master.pl) ()
[01:05:38] *** Quits: qbt (~qbt@user/edun) (Quit: Leaving.)
[01:05:40] *** Quits: g00fy78 (~g00fy@user/g00fy) (Quit: The Lounge - https://thelounge.chat)
[01:05:59] *** Joins: g00fy78 (~g00fy@user/g00fy)
[01:06:24] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[01:07:03] *** Quits: rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[01:07:33] *** Joins: rtypo (~alex@user/rtypo)
[01:09:06] *** Quits: rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[01:11:30] *** Joins: rtypo (~alex@user/rtypo)
[01:19:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:20:39] *** Joins: yewscion (~yewscion@52.94.133.128)
[01:39:43] *** Joins: jarthur (~jarthur@205.220.129.19)
[01:42:30] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[01:43:39] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[01:53:14] *** Joins: jarthur_ (~jarthur@205.220.129.19)
[01:53:20] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[01:56:54] *** Quits: jarthur (~jarthur@205.220.129.19) (Ping timeout: 268 seconds)
[02:00:23] *** Quits: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (Ping timeout: 250 seconds)
[02:03:55] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[02:05:07] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[02:06:16] *** Joins: namkeleser (~namkelese@101.179.132.178)
[02:06:31] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[02:08:14] *** Quits: rtypo (~alex@user/rtypo) (Read error: Connection reset by peer)
[02:09:07] *** Joins: rtypo (~alex@user/rtypo)
[02:14:08] *** Joins: d1cor (~diego@179.63.242.100)
[02:14:39] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[02:24:32] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[02:25:39] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[02:25:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 264 seconds)
[02:26:37] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[02:27:27] *** Quits: sav_ (~savio@177.12.48.155) (Ping timeout: 250 seconds)
[02:32:15] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[02:36:09] *** Quits: Darkcoal (~user@143.92.191.7) (Quit: Darkcoal)
[02:53:12] *** Joins: igemnace (~ian@user/igemnace)
[02:54:15] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[02:55:16] *** Joins: jarthur (~jarthur@205.220.129.19)
[02:56:09] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:57:08] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[02:57:47] *** Joins: fernand (~fernand@179.156.35.4)
[02:57:57] *** Quits: jarthur_ (~jarthur@205.220.129.19) (Ping timeout: 268 seconds)
[02:58:05] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[02:59:44] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[03:00:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[03:02:01] *** Quits: fernand (~fernand@179.156.35.4) (Ping timeout: 245 seconds)
[03:03:29] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[03:04:38] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 260 seconds)
[03:09:40] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[03:12:56] *** Quits: jarthur (~jarthur@205.220.129.19) (Quit: jarthur)
[03:15:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:15:37] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:31:47] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[03:31:51] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:31:52] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Client Quit)
[03:34:39] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[03:38:53] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 265 seconds)
[03:39:57] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[03:44:51] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 264 seconds)
[03:50:21] *** Quits: ses (uid38151@id-38151.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:04:13] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:6cb9:78ac:9c8d:f1d5)
[04:04:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:05:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:07:08] *** Joins: Wulf (~Wulf@user/wulf)
[04:13:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[04:29:47] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[04:31:35] *** Quits: defjam (~eb0t@90.197.81.95) (Ping timeout: 256 seconds)
[04:32:41] *** Joins: mononote (~mononote@user/mononote)
[04:38:26] *** Quits: Brnocrist (~spartak@user/brnocrist) (Ping timeout: 260 seconds)
[04:40:05] *** Joins: defjam (~eb0t@90.199.243.141)
[04:44:11] <Hash> Why is it difficult to factor large primes?
[04:46:04] <sarnold> for the same reason it's difficult to factor small primes
[04:46:07] <sarnold> just bigger
[04:48:22] <Hash> I forgot this in math.
[04:48:26] <Hash> Can you remind me?
[04:48:36] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:48:50] <sarnold> maybe a concrete example..
[04:48:52] <sarnold> try to factor 7
[04:48:59] <Hash> I found something
[04:49:03] <Hash> In particular, it is hard to factor so-called RSA numbers which are of the form n = pq, where p and q are prime. Naively, the reason this is difficult is that you have to check every number between 0 and sqrt(n) until you find either p or q. If n is a 2000 bit number (has 2000 digits), then the number of seconds the universe has existed is negligibly small compared to your search space, so no
[04:49:06] <Hash> computer can perform the requisite number of checks in a reasonable time.
[04:49:34] <iz> assuming you mean the product of large primes, it's because you have to find those exact primes -- there aren't any other factors you can find sooner to reduce the problem down
[04:49:34] <Hash> Oh damn.
[04:49:43] <iz> you can't factor primes
[04:49:50] <Hash> Yeah, I found a better description than book
[04:50:04] <iz> by definition of prime
[04:50:06] <Hash> iz: sorry that's what I meant
[04:50:10] <Hash> You're very correct
[04:50:15] <Hash> I meant multiples of large primes.
[04:50:26] <Hash> Ints who are composd of large prime factors
[04:50:47] <iz> so like to factor 120, you can first find the factor 2, and reduce it do factoring 60, and you can do that again, etc, etc.. so it's quite easy
[04:52:20] <iz> but if it's like 713... that's much harder
[04:52:36] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[04:52:50] <iz> because you can't break it down by 2.. or 3... or 5.. or 7.. or 11..
[04:53:56] <iz> maybe as an exercise, find the factors of 420 and the the factors of 391
[04:54:10] <iz> and see how difficult it is for each, even though they are similarly sized numbers
[04:54:55] <Hash> I see.
[04:54:58] <Hash> Wow.
[04:59:24] <Hash> I can't seem to say the 'p' in cryptography
[04:59:33] <Hash> I always end up saying cricktography
[04:59:53] <Hash> Hehe
[05:00:33] <Hash> So digital signature is just basically a messaged encrypted with someone's priv key
[05:01:17] <maroon> for RSA correct
[05:01:49] <maroon> and often the message is just sha256(document) + padding
[05:02:41] <maroon> and because of that summary, it's often why people want to have 2 RSA keys, with one only for signing and the other only for encrypting
[05:03:32] <maroon> i don't know if it's good enough to have both keys be the same prime but the signature just uses a different 'e'
[05:04:07] <Hash> And certificate is when you... oh boy
[05:04:17] <Hash> I can't find a single description anywhere that makes sense to me.
[05:04:27] <Hash> Eveyrone is pedantic on websites and books.
[05:04:48] <Hash> Why is it so hard to give just the information a person needs? Who writes these books and aricles? Ooff
[05:04:56] <snappy> A certificate is basically a <Name, PublicKey, Signature> where the signature is over the name and public key
[05:05:13] <snappy> But a certificate can hold additional details
[05:06:07] <snappy> at least that's originally how Ralph Merkle described a certificate
[05:06:25] <maroon> yeah, RSA cert is the public key ('n' modulus and 'e' public exponent) along with identifying info about the owner. and if it's a self-signed cert, it has the RSA signature of the cert being signed by the matching private key
[05:06:25] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[05:07:31] <Hash> I dont' understand.
[05:07:47] <Hash> What does it look like?
[05:08:00] <snappy> Oh you don't want to know what a modern certificate looks like :/
[05:08:13] <Hash> Yes!
[05:08:26] <Hash> I am sick and tired of reading umpteenth amounts of descriptions
[05:08:34] <snappy> Well by modern, I mean x.509
[05:08:36] <Hash> None of the descriptions in words have helped me so far.
[05:08:47] <Hash> I just want to know, what is it? How do you make it?
[05:08:54] <Hash> What do you do? Theory wise?
[05:09:06] <Hash> What happens, step by step?
[05:09:09] <Hash> I can't find any of that.
[05:09:33] <maroon> do you have openssl?
[05:09:46] <Hash> Tha'ts not going to help me.
[05:09:56] <maroon> you asked how to make it
[05:09:56] <Hash> I just need to be described somehow how they are made.
[05:09:58] <Hash> What do you do?
[05:10:14] <Hash> I don't neeed to know programs or commands for this one. Just like, what is it?
[05:10:38] <Hash> Signature is where you encrypt it with your privte key. Sure. I get that.
[05:10:44] <maroon> there's a difference between creating the public/private RSA key pair, and a certificate which is the permanent-ish record of it
[05:11:04] <Hash> In a certificate, what happens to the message and the hash and th key and what do you with allt hese thigns to produce the certicate?
[05:11:08] <maroon> so you want to know how to make an RSA public and private key pair?
[05:11:12] <Hash> No
[05:11:17] <Hash> Hang on
[05:11:31] <Hash> I might have found something
[05:11:41] <Hash> To create a digital signature, signing algorithms like email programs create a one-way hash of the electronic data which is to be signed.
[05:11:48] <Hash> The signing algorithm then encrypts the hash value using the private key (signature key). 
[05:11:55] <Hash> Ohhhhhh
[05:11:56] <snappy> https://www.cs.auckland.ac.nz/~pgut001/tutorial/T2a_X509_Certs.pdf
[05:11:57] <Hash> I seee.
[05:12:06] <Hash> This encrypted hash along with other information like the hashing algorithm is the digital signature. 
[05:12:08] <Hash> ^
[05:12:14] <Hash> I see.
[05:12:35] <maroon> the 'message' needs to be smaller than your modulis, so if you have an RSA-4096 key, the message must be shorter than 512 bytes
[05:12:37] <Hash> This is what I needed to see/read in words.
[05:12:44] <Hash> Now I know what a digital certificate is.
[05:13:04] <maroon> so signing a hash is easier than chopping up the huge file and signing each chunk
[05:13:27] <sarnold> faster and safer too
[05:13:29] <Hash> You make a hash of the entire data, then encrypt the hash value using private key. This is the cert.
[05:13:37] <Hash> One sentence helped so much :
[05:13:39] <maroon> no
[05:13:40] <Hash> :)
[05:13:47] <Hash> https://www.geeksforgeeks.org/digital-signatures-certificates/ Found it here
[05:13:49] <maroon> cert is the public key
[05:13:53] <Hash> poing #2
[05:14:08] <maroon> what you described is the signature
[05:14:09] <Hash> The signing algorithm then encrypts the hash value using the private key (signature key). <- this is rong?
[05:15:24] <Hash> The 6 steps in that page
[05:15:48] <maroon> there may be other things that can also be called certificate, but have you seen RSA certificates created by openssl where they contain a bunch of mime text following something like "-----BEGIN CERTIFICATE-----"
[05:16:22] <iz> just think of a certificate as a signed blob of structured data
[05:16:30] <Hash> Ok
[05:17:49] <Alipha> Where's the blog that rants about how signing is not encrypting with your private key?
[05:18:10] <Hash> Oh boy. More conflicting information!
[05:18:17] <maroon> no, the blog was equating signature and certificate as the same thing
[05:18:21] <Hash> why you should not do this?
[05:19:15] <Hash> I read that digital signature is to encrypt the message with private key, only that key signed it aondly that's keys' public key or private key can decrypt it
[05:19:17] <maroon> a self-signed certificate has a signature inside it, but the certificate isnt the same as a signed message
[05:19:26] <Hash> Correct
[05:19:55] <Hash> Certificate is hash the data, encrypt the hash with priv key, send that over perahps with additional data like who when where and have an authority that also says yean sure you're the dude
[05:20:26] <Hash> once you decrypt the hash value, you can compute your own hash of the mssage and match the two
[05:20:40] <Hash> if they are same, we're happy
[05:21:02] <Hash> I think.
[05:21:14] <maroon> so you must be careful what you sign. hey dude, can you sign this encrypted message for me!
[05:21:27] <Hash> I dunno man.
[05:21:47] <Hash> I don't sign things. I read 'em in detail. I seen the Southpark episode of the Human Centi iPad
[05:21:50] <maroon> because by definition in RSA, that would be the same as decrypting a message sent to your private key
[05:22:37] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[05:22:55] <Hash> How do the CA verify it's you?
[05:23:07] <maroon> they check your teeth
[05:23:10] <Hash> Can you lie to the CA? Pretend to be a person?
[05:23:31] <maroon> the CA wants to keep their reputation, so they find a way to be careful
[05:23:49] <Hash> I'm thinkin about possible CA poisoning attacks
[05:23:56] <Hash> If they are even possible.
[05:24:01] <maroon> or they do like CPA firms do now, where their audit just states that they relied on the client not lying to them
[05:24:30] <maroon> they can be possible if you can create a specific string for them to sign
[05:24:50] <Hash> Yeah see
[05:24:54] <maroon> which is why you never sign verbatim whatever is presented to you
[05:25:01] <Hash> I knew I saw a potential issue in my mind. I think stuff
[05:25:09] <Hash> Exactly true. Good stuff
[05:25:15] <iz> there isn't an issue
[05:25:27] <iz> basically the CA is who signs the cert and you buy it from them
[05:26:23] <Hash> Once the digital certificate is generated, does it have anything to do with CA any longer? Is it checked live at all or just that in the cert it says this is the CA and we mentally trust the CA?
[05:26:45] <maroon> it's like a pgp trust ring, except you pay people to be trustworthy
[05:26:49] <iz> so like w/ browsers, there are root CAs that are installed by default in the browsers
[05:27:17] <iz> and websites buy certificates so they can use SSL or whatever for thier domains and the browser will be like okay, it's legit
[05:27:41] <Hash> And what is the trust issue with self signed certificates?
[05:27:45] <Alipha> Hash: https://www.cs.cornell.edu/courses/cs5430/2015sp/notes/rsa_sign_vs_dec.php
[05:28:00] <Hash> Alipha: ok I'll mark it down after chapter study
[05:28:01] <iz> well, self-signed certs aren't signed by a root CA
[05:28:13] <iz> so anyone can make them and browsers won't automatically recognize them
[05:28:20] <maroon> the trust issue is whether the self-signed certificate that says it belongs to jesus christ really does belong to him
[05:28:27] <Hash> Oh I see.
[05:28:34] <Hash> Uhuh.
[05:29:02] <Hash> So I can pretend to be anyone with a self signed cert
[05:29:12] <Hash> no one third party to verify the truth of it.
[05:29:14] <Hash> I see.
[05:29:25] <iz> no one will believe it though
[05:29:30] <maroon> yes, when creating a RSA certificate in openssl, there are 7 fields of info i can enter, and i can put anything i want
[05:29:38] <iz> because browsers won't accept the cert by default and give warnings
[05:29:44] <maroon> well it does force me to either use a country code with 2 digits, or null
[05:29:47] <Hash> Right. 
[05:29:57] <Hash> I don't even have to do that!
[05:29:57] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[05:29:59] <iz> but yeah, if you are signing it yourself, you can say whatever you want
[05:30:16] <Hash> letsencypt. I did have to do purchased signed CA in apache and nginx for years.
[05:30:37] <Hash> I used to be a webdev, worked for Symantec Inc. and was responsible for internal server ssl management.
[05:30:49] <Hash> They bought verisign and everything became super easy
[05:31:01] <Hash> Never had to buy a cert. Just shoot and email to my contact at Symantec
[05:31:13] <maroon> Hash, if you want the practice, you can use openssl to create a self-signed RSA certificate, and you can put whatever you want, and you can use it instead of a nickserv password to connect here https://libera.chat/guides/certfp
[05:31:23] <Hash> Send him a CSR, few hours later he gives you a free CRT
[05:31:32] <Hash> maroon: I have, countless times. 
[05:31:48] <Hash> I am also familiar with how they raise a warning in browsers or any other applications like email clients.
[05:31:58] <Hash> I just dind't ever learn the theory of things.
[05:32:19] <Hash> I did computer sci degree 18 years go, in software development. Now I'm doing 2nd bachelor in cybersecurity
[05:32:32] <Hash> I know a few things, but I don't know a lot of things.
[05:33:36] <Hash> And before I could letsencrypt and/or buy, in the early years I used self signed certs on my websites and just told people it's fine, accept my cert I can't pay hundres fo dollars for an ssl
[05:35:03] <Hash> maroon: I don't use nickserv password, I use certfp on oftc and sasl on libera
[05:35:58] <Hash> https://i.imgur.com/EBaVSH5.png Also working on my resume in Tex
[05:36:25] <Hash> LaTeX. Going to try to get internship while I am in college to try to make some money and get some security experience 
[05:36:34] <Hash> next year I graduate and then fulltime work
[05:36:48] <Hash> Coming from a 100% dev resume so it's going to be hard
[05:37:20] <Hash> https://i.imgur.com/WuXwRnW.png here's a previous version before updates. This resume got me great work. 
[05:37:42] <Hash> So just so you guys have an idea about my background. I am student, but not completely noob. I can do some stuff :D
[05:39:39] <maroon> you almost certainly can use the same cert here as at oftc
[05:39:46] <Hash> Oh
[05:39:51] <Hash> Interesting.
[05:40:13] <Hash> https://i.imgur.com/CUHJ11s.png here's what my bosses previos ones said about me too
[05:40:20] <maroon> all using the certfp means is that you are challenged to prove that you have the private key which created that public key
[05:40:23] <Hash> Nice people. I loved working for every one of them.
[05:40:39] <Hash> maroon: yes, that's best for IRC login too.
[05:40:50] <Hash> Great idea. I didn't even know this.
[05:41:46] <maroon> yep, that link says libera wants an rsa4096, but they accept the 2048 size that's the only size that mIRC can make, and they also accepted the 8192 i created in openssl as a selfsigned
[05:42:04] <Hash> What do you think about ECC smaller key size?
[05:42:19] <Hash> Doesn't ECC have a smaller key size equivalent to a larger RSA key size?
[05:42:34] <Hash> However, isn't ECC lots of times like 1000x slower than RSA?
[05:42:42] <Hash> Please confirm.
[05:43:00] <maroon> ECC-256 is much faster than DH2048 or RSA2048
[05:43:04] <Hash> 384 bit ECC key is like a 3000bit RSA key
[05:43:10] <Hash> I see
[05:43:27] <maroon> the enticement of ECC is that it supposedly offer similar security as DH 4096 with a fraction of the bitsize
[05:43:46] <iz> also with easy math
[05:43:59] <iz> vs needing a big number library
[05:43:59] <Hash> I see.
[05:44:42] <maroon> you can get some of that speed back with DH, by using a 'short exponent'. your private exponent can be a random number [2^511,2^512] instead of the full 4096 bits, and as long as the number is chosen 'well', there's no loss of security strength
[05:44:58] <iz> if you think about it, the bitsize for RSA keys needs to be big, b/c there are big numbers in there, with lots of spaces between that are invalid keys
[05:45:24] <Hash> Oh I see
[05:46:10] <Hash> Is key distribution still an issue with DH?
[05:46:18] <Hash> I mean, after the invention of DH
[05:46:25] <Hash> I was reading about BB84
[05:46:37] <Hash> The Quantum Key Distribution alorithm of 1984
[05:46:47] <maroon> yes, DH can't do signatures, so you must ensure you have Alice and Bob's real key, not a swapped one from Mallory
[05:46:55] <Hash> Hmm.
[05:47:13] <Hash> By DH I mean Diffe-Hellman
[05:47:18] <Hash> Just to be sure
[05:47:57] <maroon> yes. if you solve key distribution, and don't need signatures, i like DH better than RSA
[05:48:12] <Hash> I see.
[05:48:21] <maroon> with RSA there's so many ways to get it wrong, where with DH you just need to be good at picking random numbers
[05:48:23] <Hash> But doesn't DH uses RSA/PKI?
[05:48:46] <Hash> For key exchange
[05:48:55] <iz> dh is it's own thing
[05:49:12] <Hash> Ohh
[05:49:15] <Hash> ]I see
[05:49:19] <Hash> It's like RSA but not RSA
[05:49:26] <Hash> it's another public key protocol
[05:49:50] <maroon> right. DH uses a prime as the modulus, RSA uses product of 2 primes
[05:50:02] <Hash> Thanks!
[05:50:33] <maroon> and with DH you can use the same publicly vetted safe prime, while with RSA each person needs their own primes picked, and then multiplied togethe
[05:52:11] <maroon> with RSA and DH, you don't want primes where prime-1 has lots of small factors. so while a fermat prime like 65537 is great for the public exponent, 2^n+1 is horrible as an RSA prime
[05:53:25] <maroon> public exponent in RSA, DH doesnt really have a public exponent. it has a public 'base'
[06:05:17] *** Joins: Brnocrist (~spartak@user/brnocrist)
[06:14:24] *** Joins: frost (~frost@user/frost)
[06:20:47] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (Ping timeout: 264 seconds)
[06:20:55] *** Joins: wasa (~wasamasa@chicken/contributor/wasamasa)
[06:39:01] *** Quits: TahitianTreat (~TahitianT@ip70-179-140-190.fv.ks.cox.net) (Ping timeout: 250 seconds)
[06:39:35] *** Joins: TahitianTreat (~TahitianT@ip70-179-140-190.fv.ks.cox.net)
[06:46:14] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:52:26] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:6cb9:78ac:9c8d:f1d5) (Ping timeout: 245 seconds)
[06:54:19] *** Joins: moose (~moose@user/moose)
[07:10:39] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 264 seconds)
[07:15:43] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[07:18:27] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 264 seconds)
[07:27:01] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[07:50:29] *** Quits: geeknix (~pi@147.158.227.80) (Ping timeout: 256 seconds)
[07:55:25] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:58:20] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 260 seconds)
[08:03:49] *** Joins: geeknix (~pi@2001:e68:5432:8d19:9058:7ad0:ed02:6b4d)
[08:06:47] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[08:10:09] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:12:27] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 264 seconds)
[08:20:37] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[08:21:32] *** Parts: gr1m (~gr1m@45.83.220.219) (Leaving)
[08:21:58] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Remote host closed the connection)
[08:32:34] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[08:47:42] *** Joins: sav_ (~savio@177.12.48.155)
[09:04:47] *** Joins: reumeth (~reumeth@user/reumeth)
[09:11:11] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 245 seconds)
[09:12:07] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[09:13:02] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[09:13:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:13:21] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[09:15:50] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[09:16:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[09:18:04] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:19:03] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 264 seconds)
[09:19:27] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[09:27:41] *** Quits: geeknix (~pi@2001:e68:5432:8d19:9058:7ad0:ed02:6b4d) (Ping timeout: 268 seconds)
[09:40:46] *** Joins: geeknix (~pi@2001:e68:5432:a8eb:1412:d7e8:3be:6abd)
[09:44:15] *** Quits: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net) (Ping timeout: 264 seconds)
[09:53:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[09:55:56] *** Quits: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[10:04:43] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[10:17:44] *** Joins: qbt (~qbt@user/edun)
[10:19:00] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:26:12] *** Joins: namkeleser (~namkelese@101.179.132.178)
[10:31:43] *** Joins: mei (~mei@user/mei)
[10:32:40] *** Quits: mei (~mei@user/mei) (Client Quit)
[10:34:17] *** Joins: mei (~mei@user/mei)
[10:43:38] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[10:51:28] *** Joins: sav_ (~savio@177.12.48.155)
[10:51:46] *** Quits: sav_ (~savio@177.12.48.155) (Remote host closed the connection)
[10:52:45] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[11:04:52] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[11:09:00] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[11:16:40] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (Quit: ZNC 1.8.2 - https://znc.in)
[11:17:06] *** Joins: d34dh0r53 (~d34dh0r53@104-191-10-248.lightspeed.snantx.sbcglobal.net)
[11:31:01] *** Joins: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net)
[11:35:47] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (Ping timeout: 264 seconds)
[11:35:50] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[11:36:23] *** Quits: Ara (~Ara@user/ara) (Ping timeout: 264 seconds)
[11:36:23] *** Quits: pinheadmz_ (~pinheadmz@hns-contributor.dev) (Ping timeout: 264 seconds)
[11:37:46] *** Joins: Ara (~Ara@user/ara)
[11:38:13] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[11:44:24] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[11:50:11] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[11:51:18] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:14:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:16:43] *** Joins: andreasbuhr (~quassel@p549db7f4.dip0.t-ipconnect.de)
[12:16:54] *** Quits: andreasbuhr (~quassel@p549db7f4.dip0.t-ipconnect.de) (Client Quit)
[12:22:40] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[12:31:09] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:33:23] *** wasa is now known as wasamasa
[12:46:16] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[12:51:36] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[12:53:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:57:27] *** Quits: zro (~zro@user/zro) (Ping timeout: 264 seconds)
[13:01:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[13:06:26] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:24:15] *** Quits: xenoterracide (~xenoterra@99-124-139-34.lightspeed.iplsin.sbcglobal.net) (Ping timeout: 256 seconds)
[13:30:00] *** Joins: chomwitt (~chomwitt@2a02:587:dc14:4600:12c3:7bff:fe6d:d374)
[13:41:11] *** Quits: givemeyourpies (givemeyour@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:49:04] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[14:00:36] *** Joins: samm_ (~sammm@88.170.120.145)
[14:25:15] *** Joins: sav_ (~savio@177.12.48.155)
[14:26:01] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[14:34:40] *** Quits: blumagicmidnite (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[14:35:26] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[14:46:28] *** Joins: mononote (~mononote@user/mononote)
[14:49:14] *** Quits: sav_ (~savio@177.12.48.155) (Quit: Leaving)
[15:00:15] *** Joins: namkeleser (~namkelese@101.179.132.178)
[15:03:23] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:14:45] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:6cb9:78ac:9c8d:f1d5)
[15:28:19] *** Joins: sav_ (~savio@177.12.48.155)
[15:31:48] *** Joins: King_DuckZ (~quassel@2a00:66c0:1:1::51)
[15:38:19] *** Quits: r-g (~r-g@51.158.144.32) (Read error: Connection reset by peer)
[15:40:57] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[15:56:37] *** Quits: Choco (~Choco@host150.200-71-232.telecom.net.ar) (Quit: Client closed)
[16:03:31] *** Joins: Choco (~Choco@host150.200-71-232.telecom.net.ar)
[16:05:07] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:06:12] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:18] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[16:19:50] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[16:24:44] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[16:27:58] *** Joins: samm__ (~sammm@88.170.120.145)
[16:27:59] *** Quits: samm__ (~sammm@88.170.120.145) (Excess Flood)
[16:28:17] *** Joins: samm__ (~sammm@88.170.120.145)
[16:28:18] *** Quits: samm__ (~sammm@88.170.120.145) (Excess Flood)
[16:28:42] *** Joins: samm__ (~sammm@88.170.120.145)
[16:28:43] *** Quits: samm__ (~sammm@88.170.120.145) (Excess Flood)
[16:29:01] *** Joins: samm__ (~sammm@88.170.120.145)
[16:29:02] *** Quits: samm__ (~sammm@88.170.120.145) (Excess Flood)
[16:29:27] *** Joins: samm__ (~sammm@88.170.120.145)
[16:29:28] *** Quits: samm__ (~sammm@88.170.120.145) (Excess Flood)
[16:29:28] *** Quits: samm_ (~sammm@88.170.120.145) (K-Lined)
[16:35:31] *** Joins: ses (uid38151@id-38151.hampstead.irccloud.com)
[16:43:28] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[16:45:45] *** Joins: Colti (Miramar-FL@user/host-pond)
[16:57:03] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 276 seconds)
[16:59:57] *** Quits: Douwd (daniel@crux.bsdpro.net) (Quit: So long, and thanks for all the fish.)
[17:03:41] *** Joins: rtypo (~alex@user/rtypo)
[17:06:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:07:39] *** Quits: namkeleser (~namkelese@101.179.132.178) (Quit: Client closed)
[17:19:13] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[17:19:48] *** Joins: Elzington (~Elzington@68.235.43.172)
[17:41:38] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 268 seconds)
[17:46:59] *** Joins: igemnace (~ian@user/igemnace)
[17:47:30] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:6cb9:78ac:9c8d:f1d5) (Ping timeout: 260 seconds)
[17:59:10] *** Joins: reumeth (~reumeth@user/reumeth)
[17:59:59] *** Joins: BUSY (~BUSY@user/busy)
[18:09:12] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[18:13:36] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:15:18] *** Joins: yewscion (~yewscion@52.94.133.129)
[18:20:31] *** Joins: d1cor (~diego@179.63.242.100)
[18:28:30] *** Joins: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net)
[18:34:06] *** Joins: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se)
[18:35:15] *** Quits: dna1 (~dna@47-220-190-100.gtwncmkt04.res.dyn.suddenlink.net) (Ping timeout: 264 seconds)
[19:04:12] *** Quits: poopster (poopster@shell.xshellz.com) (Changing host)
[19:04:12] *** Joins: poopster (poopster@user/poopster)
[19:10:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:4c2d:8074:ff8b:55dd)
[19:27:54] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[19:39:36] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:50:36] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[19:54:16] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[19:58:47] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[19:58:54] *** Joins: dez (uid92154@user/dez)
[20:09:34] *** Joins: zro (~zro@user/zro)
[20:32:51] *** Quits: merpnderp (sid16744@5.254.36.61) (Ping timeout: 245 seconds)
[20:34:58] *** Joins: merpnderp (sid16744@id-16744.hampstead.irccloud.com)
[20:36:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:36:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (calcium.libera.chat (Nickname regained by services)))
[20:36:51] *** Joins: moose` (~moose@user/moose)
[20:36:55] *** Joins: mei8 (~mei@user/mei)
[20:37:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[20:37:47] *** Joins: sm2n_ (~sm2n@user/sm2n)
[20:38:41] *** Joins: scjosh1 (~scjosh@206.189.79.69)
[20:39:25] *** Joins: X-Scale` (~ARM@92.250.97.112)
[20:40:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:41:01] *** Joins: pinheadmz_ (~pinheadmz@hns-contributor.dev)
[20:41:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:41:12] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:41:47] *** Joins: rundown (~eb0t@90.199.243.141)
[20:42:18] *** Joins: Peng__ (~mnordhoff@flash.mattnordhoff.net)
[20:46:24] *** Joins: jab416171_ (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net)
[20:46:43] *** Quits: rtypo (~alex@user/rtypo) (*.net *.split)
[20:46:43] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (*.net *.split)
[20:46:43] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[20:46:43] *** Quits: mei (~mei@user/mei) (*.net *.split)
[20:46:43] *** Quits: mcf (~mforney@netbsd/developer/mcf) (*.net *.split)
[20:46:43] *** Quits: moose (~moose@user/moose) (*.net *.split)
[20:46:44] *** Quits: defjam (~eb0t@90.199.243.141) (*.net *.split)
[20:46:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[20:46:44] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[20:46:44] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[20:46:44] *** Quits: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (*.net *.split)
[20:46:44] *** Quits: echoreply (~echoreply@45.32.163.16) (*.net *.split)
[20:46:44] *** Quits: X-Scale (~ARM@92.250.97.112) (*.net *.split)
[20:46:44] *** Quits: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: elichai2 (sid212594@id-212594.hampstead.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: pdg (sid395042@id-395042.lymington.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[20:46:44] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[20:46:44] *** Quits: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[20:46:44] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[20:46:44] *** Quits: cwebber (~user@user/cwebber) (*.net *.split)
[20:46:44] *** Quits: jab416171 (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net) (*.net *.split)
[20:46:44] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: Pythayr` (~pither195@64.42.181.50) (*.net *.split)
[20:46:45] *** Quits: krin (sid500722@user/krin) (*.net *.split)
[20:46:45] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[20:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[20:46:45] *** scjosh1 is now known as scjosh
[20:46:45] *** mei8 is now known as mei
[20:46:58] *** X-Scale` is now known as X-Scale
[20:47:05] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[20:47:53] *** Quits: jab416171_ (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net) (Max SendQ exceeded)
[20:48:21] *** Peng__ is now known as Peng
[20:48:23] *** Joins: jab416171 (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net)
[20:48:28] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:51:36] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[20:52:24] *** Joins: Pythayr` (~pither195@64.42.181.50)
[20:52:55] *** Joins: Seirdy (~Seirdy@76-247-182-44.lightspeed.sjcpca.sbcglobal.net)
[20:52:55] *** Joins: mcf (~mforney@netbsd/developer/mcf)
[20:52:55] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[20:52:55] *** Joins: Mutsuhito (sid13530@id-13530.ilkley.irccloud.com)
[20:52:55] *** Joins: elichai2 (sid212594@id-212594.hampstead.irccloud.com)
[20:52:55] *** Joins: pdg (sid395042@id-395042.lymington.irccloud.com)
[20:52:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:52:55] *** Joins: cwebber (~user@user/cwebber)
[20:52:55] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[20:52:57] *** Joins: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d)
[20:53:07] *** Joins: krin (sid500722@user/krin)
[20:53:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Max SendQ exceeded)
[20:53:35] *** Joins: lagash (lagash@lagash.shelltalk.net)
[20:53:37] *** Joins: Darkcoal (~user@143.92.183.8)
[20:53:47] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:54:12] *** Joins: rtypo (~alex@user/rtypo)
[20:58:22] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[21:02:38] *** Joins: AsenMx (~AsenMx@user/asenmx)
[21:03:32] *** Joins: sav__ (~savio@177.12.48.155)
[21:04:44] *** Quits: weyhmueller (~weyhmuell@blofeld.nc.w9r.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:05:39] *** Joins: weyhmueller (~weyhmuell@blofeld.nc.w9r.de)
[21:06:18] *** Quits: sav_ (~savio@177.12.48.155) (Ping timeout: 260 seconds)
[21:09:38] *** Quits: Malvolio (~Malvolio@user/malvolio) (Ping timeout: 260 seconds)
[21:13:59] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[21:15:21] *** Quits: sav__ (~savio@177.12.48.155) (Ping timeout: 245 seconds)
[21:16:06] *** Quits: X-Scale (~ARM@92.250.97.112) (Ping timeout: 265 seconds)
[21:17:32] *** X-Scale` is now known as X-Scale
[21:18:47] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:36:59] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (Quit: parazyd)
[21:40:29] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[21:42:21] <taeaad> This is a basic question. When you make an https connection, you first need to resolve the URL via the domain name. Does this send the entire URL or just the domain and then proceed to send the full URL to the server for that domain?
[21:42:52] <taeaad> In other words, does DNS as the intermediary expose the full URL, a partial URL or just the domain?
[21:43:08] <MacGyver> taeaad: Just the domain.
[21:43:25] <MacGyver> taeaad: And nowadays, if everything is configured as you'd want it, not even the unnecessary subdomains down the tree.
[21:43:33] <taeaad> MacGyver: Thanks, I thought so. But I was wondering if there are exceptions.
[21:44:07] <MacGyver> I forget what that's called but the root servers only learn you're looking for .com, not your.sensitive.domain.com
[21:44:10] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[21:44:21] <MacGyver> No exceptions -- resource locators aren't included.
[21:45:17] *** Joins: machinedgod (~machinedg@24.105.81.50)
[21:45:27] <taeaad> What do you mean by root servers?
[21:46:02] <MacGyver> DNS is a tree hierarchy.
[21:46:10] <MacGyver> Read up on how it works and you'll understand.
[21:46:51] <MacGyver> The root servers point to the servers that know the subtree for .com; those servers point to the servers that know the subtree for domain.com, and so down.
[21:46:57] <int-e> . o O ( dig ns . )
[21:47:54] <Peng> MacGyver: QNAME minimization
[21:47:59] <MacGyver> That.
[21:48:06] <MacGyver> Thanks :P
[21:48:26] *** Joins: aleck1 (~aleck@user/aleck)
[21:50:15] *** Joins: Malvolio (~Malvolio@user/malvolio)
[21:50:30] <taeaad> Oh, I see. That makes sense.
[21:51:11] <taeaad> And thus a URL is a path from root to leaf.
[21:51:23] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 268 seconds)
[21:51:53] <MacGyver> The domain-part of a URL, yes.
[21:52:09] <MacGyver> Anything after the / following the TLD is not in the tree.
[21:52:16] <MacGyver> And hence, isn't in DNS.
[21:52:36] <int-e> but it usually does lead down another path in another tree
[21:52:48] <MacGyver> Yeah, but that's just the filesystem tree on the server you're reaching.
[21:52:58] <MacGyver> You were going to send it there anyway.
[21:53:26] <MacGyver> (Yes, more complex architectures exist, but filesystem tree is a reasonable abstraction in this discussion)
[21:57:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:58:03] <ericonr> MacGyver: from testing things like drill, it seemed to send one request to the resolver containing the whole domain
[21:58:16] <ericonr> what kind of software implements that?
[21:58:19] * ericonr goes google
[21:58:28] <MacGyver> ericonr: Yes, that's the request to the (local) caching resolver.
[21:58:39] <MacGyver> That in turn then sends iterative requests out for each part.
[21:59:09] <MacGyver> Of course if your caching resolver isn't local, qname minimization can only be done by the client or by the system libraries that the client uses.
[21:59:37] <ericonr> hm, I see
[21:59:46] <MacGyver> Only *really* a problem on Linux, because iirc both Mac OS and Windows have on-system local caching resolvers.
[22:00:00] <ericonr> I think systemd heavy distros enable resolved
[22:00:11] <ericonr> I currently have unbound, at least
[22:00:14] <Peng> It doesn't make sense for a stub resolver to use QNAME minimization, since it's sending every query to the same place. It would just waste resources.
[22:00:16] <MacGyver> That's one option on Linux, yes.
[22:00:28] <ericonr> it seems to do qname minimisation (with an s!) by default
[22:00:40] <MacGyver> OED English best English.
[22:00:53] <Peng> :D
[22:00:58] <MacGyver> (ize, but yse. For maximum reviewer 2 annoyance.)
[22:01:25] <Peng> Two of the major recursive DNS servers are Dutch, one uses "minimisation" and one uses "minimization". :D
[22:10:53] *** Joins: eKV-[i] (twenty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[22:18:45] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[22:19:37] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[22:23:54] <ericonr> how hard could it be to implement DANE in curl hmm
[22:24:54] <ericonr> it would be nice to see it deployed for HTTPS :D
[22:25:18] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Ping timeout: 276 seconds)
[22:25:55] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[22:27:31] *** Joins: X-Scale` (~ARM@31.22.167.95)
[22:27:36] <ericonr> (ftr, it's an item in their TODO, so presumably there's interest)
[22:27:41] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[22:27:48] <taeaad> ericonr: It's spelt with an "s". It's not spelled with a "z". The latter happens only in Harry Potter.
[22:28:03] <MacGyver> ericonr: Huh?
[22:28:09] <MacGyver> ericonr: DANE *is* for https.
[22:28:54] <MacGyver> taeaad is reviewer 2.
[22:29:03] <ericonr> MacGyver: well, seeing as none of the browsers support it officially, does it really count? :P
[22:29:14] <ericonr> seemed like it was only being deployed for email?
[22:29:15] *** X-Scale` is now known as X-Scale
[22:29:47] <MacGyver> (I seriously once had a reviewer give as feedback they marked as "important" that I should either pick American English or British English and stick to it.)
[22:30:13] <MacGyver> (That was a fun comment to the editor, pointing out the existence of en_GB-oed)
[22:30:28] <ericonr> ftr I've only looked at the wikipedia page for DANE
[22:30:31] <ericonr> nothing further than that
[22:31:17] <MacGyver> ericonr: I wonder whether it'll ever become widespread, tbh, and unless everyone uses it it's not very useful on the Internet.
[22:31:34] <MacGyver> ericonr: Browsers right now seem content to check the CT-log.
[22:37:36] <ericonr> MacGyver: CT-log is definitely nice to have
[22:40:11] <ericonr> I guess there isn't any push for DANE, unfortunately :/
[22:41:02] *** Quits: d1cor (~diego@179.63.242.100) (Ping timeout: 260 seconds)
[22:43:40] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[22:49:31] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 245 seconds)
[22:50:22] *** Joins: AsenMx (~AsenMx@user/asenmx)
[22:58:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:00:07] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:00:35] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:01:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:06:44] *** Joins: dna1 (~dna@2600:381:1d0b:7994:71f2:1031:4ab:9f1)
[23:12:18] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[23:15:20] *** Quits: dna1 (~dna@2600:381:1d0b:7994:71f2:1031:4ab:9f1) (Ping timeout: 260 seconds)
[23:27:08] *** Quits: Seirdy (~Seirdy@76-247-182-44.lightspeed.sjcpca.sbcglobal.net) (Quit: exiting 3.3)
[23:28:19] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:39:18] *** Quits: ua__ (~ua@public-gprs226691.centertel.pl) (Ping timeout: 268 seconds)
[23:53:01] <Hash> Good morning
[23:53:18] <Hash> So if you hide text data inside an image using LSB steganography, how can others find it?
[23:53:36] <Hash> How would they know which bits have been modified from the original?
[23:53:45] <yawkat> by looking for lsb steganography?
[23:53:57] <Hash> So you can look for it too?
[23:54:03] <Hash> What would be the method/
[23:54:07] <Hash> Would you know?
[23:54:31] <yawkat> you look if the distribution of the LSBs is different than what would be present on a normal image.
[23:54:40] <Hash> How does someone who is just testing an iamge to see if it has hidden data, find it?
[23:54:52] <Hash> Hmm
[23:55:12] <Hash> How would you know the bit has been changed?
[23:55:33] <Hash> I mean, say in each pixel in windows bitmap you hav 3 bytes, 24 bits
[23:55:49] <Hash> At most you can modify the LSB of the whole pixel or of each shade, so 3 bits per byte
[23:56:07] <Hash> How would someone know that the pixel value was lowered? What if you do this to every pixel in the image?
[23:56:19] <Hash> How would they know? I'm sorry I can't imagine this in head yet
[23:56:51] <yawkat> you do statistics to find out whether the distribution of LSBs would be likely for an unmodified image
[23:56:55] <Hash> instead of some pixels you do it to every pixel. Take the LSB so 3 bits per byte of every pixel are modified to hold data
[23:57:01] <yawkat> im not sure what kind of answer you expect here
[23:57:02] <Hash> I see.
[23:57:07] <Hash> I'm not sure either.
[23:57:16] <Hash> Just whatver info I can get from anyone
[23:57:22] <Hash> It's all helpful. Thanks
[23:58:09] *** Joins: JulaoBi (~xi@64.120.120.236)
[23:58:41] <Hash> 255,255,255. If you modify to 254,254,254, no one can tell the differnce. the image just seems darker. Youd need the original image to be able to tell the difference
[23:59:10] <int-e> Hash: but you change the distribution of differences between adjacent pixels, for example
[23:59:13] <Hash> I mean at 1 bit change, your eye can't even tell the diff, and how can a scanner find it? To it, it would seem just like normal pixel values
[23:59:20] <wasamasa> have you tried one of those java CTF tools for steganography?
[23:59:29] <wasamasa> sometimes brute force is the best approach, lol
[23:59:31] <Hash> No I have not yet
[23:59:35] <Hash> Oh
[23:59:47] <Hash> int-e: if you modify every pixel, then what happens?
[23:59:56] <wasamasa> you load up one file and it allows you to flick through LSB extractions
