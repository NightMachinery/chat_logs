[00:00:05] <kurahaupo1> emanuele6: It supports standard characters, wide characters, tall characters, etc
[00:00:29] <kurahaupo1> About the only thing that Xterm doesn't yet do well is 24-bit colour.
[00:00:36] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[00:01:01] *** Joins: rgrinberg (~textual@187.223.115.174)
[00:01:01] <emanuele6> yes :^)
[00:01:03] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 276 seconds)
[00:01:20] <phy1729> xterm is perfect; everything else just has bugs properly emulating xterm :p
[00:01:23] <kurahaupo1> Otherwise it's the most comprehensive in implementing ECMA 48
[00:01:40] <phy1729> (They do set TERM=xterm or xterm-256color usually to be fair)
[00:01:44] <Earnestly> phy1729: The only downside is rendering performance, e.g. vo=tct.  That's kind of disappointing
[00:03:51] <uuidNuni1> i once used urxvt :)
[00:04:26] *** Joins: sabry (~sabry@197.37.33.107)
[00:05:25] *** chiselfu1e is now known as chiselfuse
[00:06:14] <kurahaupo1> urxvt is nice but the toolbars clutter it and its mouseclick behaviour is wonky
[00:06:43] <ormaaj> Echo chars to screen, wait for escape sequence, read escape sequence, do thing, repeat. Not that hard.
[00:06:47] <D4mned> okay iv installed kitty
[00:06:52] <D4mned> and the & works nows
[00:06:55] *** Quits: sabry (~sabry@197.37.33.107) (Client Quit)
[00:07:38] <D4mned> thank you all
[00:08:19] *** Quits: HumanG33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net) (Ping timeout: 268 seconds)
[00:08:51] *** Joins: HumanG33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04)
[00:08:55] <uuidNuni1> how the hell kitty makes & work
[00:09:10] <D4mned> i have no clue
[00:09:27] <D4mned> same script works on kitty but doesnt work on konsole
[00:09:55] <uuidNuni1> kurahaupo1:-> ok, will give xterm a try.
[00:10:34] <kurahaupo1> urxvt kinda works with the right "extend" click, but the initial left click doesn't allow mode switching past the first half second
[00:10:55] *** Joins: yamchah2_ (~yamchah2@user/yamchah2)
[00:11:29] <kurahaupo1> Or more to the point, doesn't allow changing the selection mode once you start moving
[00:12:37] <kurahaupo1> uuidNuni1: we're not really trying to convince you that it's "better". Really we're just having a grumble session about how multi-click works in most other apps.
[00:12:50] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[00:13:02] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 240 seconds)
[00:13:02] *** yamchah2_ is now known as yamchah2
[00:13:53] <uuidNuni1> kurahaupo1:-> got you thanks !
[00:14:12] <kurahaupo1> uuidNuni1: that said, do try it, and see if you like it
[00:18:17] *** Quits: tmm88 (~tmm88@bl22-240-102.dsl.telepac.pt) (Ping timeout: 240 seconds)
[00:20:15] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[00:23:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:29:34] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 250 seconds)
[00:30:53] *** Quits: bluedust_ (~bluedust@103.160.194.145) (Remote host closed the connection)
[00:31:04] *** Joins: Tabmow (~tabmow@user/tabmow)
[00:33:03] <chiselfuse> any idea how i could send an empty udp using netcat? i'm doing     nc -u host port     could i give it an EOF or something maybe?
[00:33:27] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[00:34:04] *** Joins: magla (~gelignite@55d49afb.access.ecotel.net)
[00:35:24] <kurahaupo1> chiselfuse: any reason it has to be "empty"?
[00:35:52] <kurahaupo1> How about a single null byte?
[00:36:11] <chiselfuse> kurahaupo1: it's... complicated
[00:36:21] <chiselfuse> but yeah i need it empty
[00:37:33] <chiselfuse> i'm trying to have it open nat to remote udp without affecting the data that gets fed in the programs using it
[00:38:03] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca)
[00:38:05] <chiselfuse> so i have to initiate the udp, without any data
[00:39:02] *** Quits: martinus__ (~martin@127.59.202.77.rev.sfr.net) (Ping timeout: 240 seconds)
[00:39:05] <chiselfuse> i could add some null or whatever but that would interfere and i would have to write a protocol on top to tunnel stuff, idk if i'm being too clear
[00:39:42] <emanuele6> most netcats have -z
[00:40:27] <emanuele6> in bash, if you want to open and close a udp connection, you can just use   >/dev/udp/host/port
[00:40:36] <chiselfuse> i actually need socat to do that, but i thougght it would be the same as for netcat, sorry :P
[00:40:52] <emanuele6> ...
[00:41:00] <emanuele6> socat and netcat are completely different.
[00:41:06] <emanuele6> they are not even similar
[00:41:13] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[00:41:17] <chiselfuse> emanuele6: can i control the ephemeral port using that /dev/udp/*?
[00:41:25] <chiselfuse> so like, the binding of it
[00:41:39] <emanuele6> that is bash.
[00:41:46] <emanuele6> socat or netcat or bash?
[00:41:53] <emanuele6> which one do you need?
[00:42:17] <chiselfuse> i know, i might use bash if i can control the way it binds
[00:42:39] <chiselfuse> socat/bash
[00:42:48] <chiselfuse> may i have both? :P
[00:43:08] <emanuele6> you can't use bash's udp and socat udp together it does not make sense
[00:43:36] <emanuele6> if you want to know how /dev/udp works, search /dev/udp in bash's manual
[00:44:12] <emanuele6> either way, you are probably better off going to #networking since your question does not seem bash related
[00:44:21] <chiselfuse> i don't have the full picture of what i'll do, so i'm interested in both ways, i'd choose one when i come to more decisions
[00:46:55] <chiselfuse> emanuele6: could i maybe give socat an empty string to have it send an empty udp? or will the null b yte not get stripped?
[00:46:56] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[00:48:48] *** Quits: l4yer (~l4yer@2001:ac8:31:8900:1012:304e:ad65:3e09) (Remote host closed the connection)
[00:53:10] *** Quits: cryptonector (~nico@24.28.108.183) (Remote host closed the connection)
[00:53:49] <kurahaupo1> chiselfuse: If you mean socat <<<'' that will include a newline
[00:55:10] *** Joins: brachamh (~brachamh@user/brachamh)
[00:55:25] *** Joins: eggbean (~eggbean@user/eggbean)
[00:56:48] *** Quits: burrows (burrows@user/burrows) (Quit: Quitting)
[00:58:26] *** Joins: burrows (burrows@user/burrows)
[01:01:10] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Read error: Connection reset by peer)
[01:11:29] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:12:00] *** Joins: n4dir (~user@i577BC862.versanet.de)
[01:14:00] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[01:16:19] *** Joins: skraito (~skraito@user/skraito)
[01:16:25] * skraito come find Us at ircnow.org irc server , for [ 0day (xc) Our ] Support OS and other 0day chit chat ... . channel #0day or #0dev
[01:16:35] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[01:17:17] *** Joins: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au)
[01:18:09] *** Quits: H3dn1ng (~H3dn1ng@185.213.154.232) (Quit: leaving)
[01:21:56] *** Joins: tmm88 (~tmm88@user/tmm88)
[01:23:05] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:23:35] *** Joins: kelly (~kelly@89-69-125-155.dynamic.chello.pl)
[01:24:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[01:24:44] <dreamon> hello. using -> grep '22.01.08\|22.01.07\|22.01.06\|22.01.05\|22.01.04\|22.01.03\|22.01.02' /run/user/1000/data.pwr -> It finds correct data but one line that dont match.
[01:24:56] <dreamon> 22.01.14_22:01:04 0.0 0.0 0.0 0.0 487.5 [summe1-5] 0 0 0 0 1822
[01:25:21] <pj> dreamon: . matches any character in a regex
[01:25:22] *** Quits: D4mned (~D1mned@212.101.251.96) (Quit: Leaving)
[01:25:47] <dreamon> 22:01:04 is colored red.. but dont match : != .
[01:26:01] <pj> [2022-01-23 10:55:21] <pj> dreamon: . matches any character in a regex
[01:26:25] <emanuele6> grep '22\.01\.0[2-8]'
[01:27:19] <pj> or grep -F -e22.01.08 -e22.01.07 ... -e22.01.02
[01:27:46] <dreamon> Thank you !!
[01:27:46] <emanuele6> yep, i was going to send that, but i didn't want to type it
[01:29:23] *** Quits: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net) (Quit: Leaving)
[01:30:56] *** Joins: seninha (~seninha@user/seninha)
[01:31:55] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[01:34:38] *** Quits: ccl (ccl@shell.xshellz.com) (Ping timeout: 252 seconds)
[01:37:54] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[01:40:25] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[01:41:26] *** Joins: yetoo (~yetoo@user/yetoo)
[01:42:15] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[01:42:24] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[01:42:46] <yetoo> How would I check for a path that contains ~ ?
[01:43:09] <emanuele6> what do you mean "check"?
[01:43:20] <emanuele6> how do you check if a variable contains ~?
[01:43:36] <emanuele6> [[ $var == *~* ]]
[01:43:48] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[01:43:57] <yetoo> if [ -e path/asd~ ]
[01:44:16] <emanuele6> [[ -e path/asd~ ]]   or   [ -e 'path/asd~' ]
[01:44:22] *** Quits: mcint (mcint@user/mcint) (Ping timeout: 260 seconds)
[01:44:51] <emanuele6> though, it seems weird that you would need to quote ~ after asd
[01:45:03] <emanuele6> what problem are you having? i don't get it
[01:45:05] *** Joins: vlm (~vlm@user/vlm)
[01:46:05] <bougyman> var='some ~ stuff'; var2='other stuff' ; [[ $var =~ .*~.* ]] && echo yes: $var; [[ $var2 =~ .*~.* ]] && echo yes
[01:46:08] <bougyman> yes: some ~ stuff
[01:46:35] <emanuele6> bougyman: that is just a worse less efficient [[ $var == *~* ]]
[01:46:40] <yetoo> I get an error with being unable to use character
[01:47:21] <emanuele6> is it a bash error?
[01:47:53] <emanuele6> or is it from some other program?
[01:48:04] <yetoo> I'm trying to keep it posix
[01:48:18] <yetoo> its sh error
[01:48:22] <emanuele6> POSIX sent you a letter with an error message in it?
[01:48:31] <emanuele6> what is sh? bash?
[01:48:52] <neshpion> sh is POSIX shell; bash is Bourne Again shell, a superset of POSIX shell
[01:48:59] <emanuele6> or is it dash, busybox...
[01:49:38] <yetoo> it's the real sh
[01:49:43] <emanuele6> neshpion: i will keep guessing then POSIX sent him a letter with an error message.
[01:49:55] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 256 seconds)
[01:49:57] <emanuele6> yetoo: ... ok, then
[01:50:02] <neshpion> emanuele6: oh, i didn't notice it was you asking "what is sh", i will open my eyeballs further
[01:51:01] *** Joins: Tabmow (~tabmow@user/tabmow)
[01:51:03] <yetoo> what I'm trying to do is have a shell script output text for xscreensaver to read. xscreensaver was showing the error while manually running the script justs hangs at the if statement
[01:51:11] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[01:51:25] <emanuele6> ok, then it IS NOT an sh error.
[01:51:28] <yetoo> even when I put ' around the path
[01:51:34] <emanuele6> you just said it is an xscreensaver error.
[01:51:48] <yetoo> xscreensaver doesn't produce errors like that
[01:52:02] <yetoo> it wouldve shown something else if it was xscreensaver error
[01:52:07] <emanuele6> mind showing the error that POSIX sent you in a letter?
[01:52:08] <yetoo> im trying to get it to show again
[01:54:47] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:54:55] *** Joins: crashrep (~crashrep@user/crashrep)
[01:55:05] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[01:56:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[01:59:23] *** Quits: magla (~gelignite@55d49afb.access.ecotel.net) (Quit: Stay safe!)
[02:00:01] *** Joins: ext_ (ext@encrypt.nu)
[02:01:55] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:04:34] <wiscii> the real `sh` !
[02:04:49] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[02:07:21] <yetoo> I can't find the error so let me ask a separate question
[02:09:59] <yetoo> "$(working/text/$R*$R)" resolves to a file but its taken litterly so I get permission denied error. How can I expand this so the file name shows up, but convert it into a string
[02:10:06] *** Quits: xx (~xx@user/xx) (Ping timeout: 250 seconds)
[02:10:19] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:10:38] <yetoo> and I need it posix
[02:10:49] <emanuele6> what is "$(working/text/$R*$R)" even supposed to do
[02:11:05] <emanuele6> it first expands $R twice field splitting
[02:11:14] <emanuele6> then it expands the * glob
[02:12:04] <emanuele6> then it runs `working/text/something file1 file2 something' as a command
[02:12:27] <emanuele6> then it puts expands "$(working/text/$R*$R)" to the output of that command
[02:12:29] <emanuele6> wtf
[02:12:42] <yetoo> I need to change it so it doesnt run as a command but im able to save it as a string
[02:12:44] <emanuele6> you surely didn't want to do that
[02:13:02] <emanuele6> <emanuele6 > what is "$(working/text/$R*$R)" even supposed to do
[02:14:33] <yetoo> the output is working/text/file not multiple
[02:14:53] <emanuele6> ...
[02:15:32] <yetoo> but i have file names with format N*N so backup files from editors dont clog up the process
[02:15:37] <larryv> do you know what $(...) does?
[02:16:28] <emanuele6> # mkdir -p working/text; touch file{1..2}; R=' something '; set -x; : working/text/$R*$R
[02:16:29] <shbot> emanuele6: + : working/text/ something file1 file2 working something
[02:16:45] <emanuele6> this is what that expands to
[02:16:55] <emanuele6> # mkdir -p working/text; touch file{1..2}; R='something '; set -x; : working/text/$R*$R
[02:16:56] <shbot> emanuele6: + : working/text/something '*something'
[02:17:02] <emanuele6> it depends
[02:17:17] <emanuele6> it is extremely complex word splitting + pathname expansion stuff
[02:17:25] <emanuele6> you probably don't understand what $() does
[02:17:41] <emanuele6> and made up this abomination that doesn't do what you want
[02:18:02] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[02:18:18] <emanuele6> that is why i asked you what do you expect `"$(working/text/$R*$R)"' to do? what  are you trying to do?
[02:19:02] <yetoo> It is trying to run the file as a command so I am trying to get it so it doesn't run the file as command
[02:19:59] <yetoo> let me clarify
[02:20:25] *** Parts: nedbat (~nedbat@python/psf/nedbat) (Textual IRC Client: www.textualapp.com)
[02:20:53] <yetoo> the $R in $R*$R is a number in the filename, The file name I'm trying to get is something like 1-thing-1
[02:21:58] <yetoo> as said $R*$R successfully expands the file, but it runs it as command, I need it as string so I can check if it exists
[02:22:22] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[02:22:23] <emanuele6> for var in working/text/"$R-"*"-$R"; do ...
[02:23:16] <yetoo> emanuele6: so how am i supposed to check
[02:23:34] <yetoo> with that for loop lopp can you give the if statement that works
[02:23:48] <emanuele6> what if statement?
[02:23:53] <emanuele6> check what?
[02:23:58] <emanuele6> if it contains a ~
[02:24:06] *** Quits: NoelFlantier3 (~Hubert@195.201.244.189) (Remote host closed the connection)
[02:24:30] *** Joins: NoelFlantier3 (~Hubert@195.201.244.189)
[02:24:33] <yetoo> I need to check if the expanded file failed to expand by checking if it exsits
[02:25:15] <emanuele6> for var in working/text/"$R-"*"-$R"; do [ -f "$var" ] || break; ...
[02:25:27] <emanuele6> ( or [ -e ] depending on the use case
[02:26:31] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[02:27:01] <emanuele6> also probably [ -f "$var" ] || continue, not break
[02:28:36] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[02:28:55] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:31:30] *** Joins: bluedust (~bluedust@103.160.194.145)
[02:31:39] *** Quits: luva (~luva@37.120.197.36) (Ping timeout: 256 seconds)
[02:33:31] <Blondie101010> well that depends on the requirements
[02:34:28] <yetoo> I need to start from the beginning of the script if it doesn't match. I have a while loop that I'm keeping true if it doesn't match, but I need to check if the path exists
[02:34:51] <yetoo> how can I do a simple variable assignment without a permission denied
[02:35:03] *** Quits: dreamon (~dreamon@p57a4c923.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[02:35:08] <yetoo> or file not found  clogging the script
[02:35:10] *** Joins: luva (~luva@45.141.152.53)
[02:35:16] <emanuele6> ...
[02:35:22] <emanuele6> for var in working/text/"$R-"*"-$R"; do break; done
[02:36:02] *** Quits: bluedust (~bluedust@103.160.194.145) (Ping timeout: 240 seconds)
[02:36:09] <emanuele6> or just put the code inside the for loop..
[02:36:28] <emanuele6> !$( > yetoo
[02:36:28] <greybot> yetoo: Command Substitution: "$(cmd "foo bar")" causes the command 'cmd' to be executed with the argument 'foo bar' and "$(..)" will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
[02:37:03] <emanuele6> you were getting permission denied because $() RUNS COMMANDS and whatever file your glob matched IS NOT executable
[02:38:13] <emanuele6> to save the result of a glob in a variable in a POSIX sh script, use a for loop as i have already showed you.
[02:39:02] <yetoo> I was even getting it when the path was in quotes
[02:39:09] <yetoo> without $()
[02:41:53] <emanuele6> # .bashrc
[02:41:54] <shbot> emanuele6: bash: .bashrc: command not found
[02:42:06] <emanuele6> # ./.bashrc
[02:42:07] <shbot> emanuele6: bash: ./.bashrc: Permission denied
[02:42:11] <emanuele6> # ./.ba*
[02:42:12] <shbot> emanuele6: bash: ./.bashrc: Permission denied
[02:42:35] <emanuele6> it is the same thing.
[02:42:47] <emanuele6> # a=$(./ba*)
[02:42:48] <shbot> emanuele6: bash: ./ba*: No such file or directory
[02:42:56] <emanuele6> # a=$(./.ba*)
[02:42:57] <shbot> emanuele6: bash: ./.bashrc: Permission denied
[02:43:01] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[02:43:42] *** Joins: ccl_ (ccl@shell.xshellz.com)
[02:44:19] <emanuele6> # for a in ./.ba*; do break; done; declare -p a
[02:44:20] <shbot> emanuele6: declare -- a="./.bashrc"
[02:44:35] <emanuele6> # for a in ./.bax*; do break; done; declare -p a
[02:44:36] <shbot> emanuele6: declare -- a="./.bax*"
[02:45:18] <emanuele6> # for a in ./.bax*; do break; done; if [ -e "$a" ]; then echo exists; else echo does not exist; done; declare -p a
[02:45:19] <shbot> emanuele6: bash: syntax error near unexpected token `done'
[02:45:22] <emanuele6> oops
[02:45:28] <emanuele6> # for a in ./.bax*; do break; done; if [ -e "$a" ]; then echo exists; else echo does not exist; fi; declare -p a
[02:45:29] <shbot> emanuele6: does not exist
[02:45:29] <shbot> emanuele6: declare -- a="./.bax*"
[02:45:33] <emanuele6> # for a in ./.ba*; do break; done; if [ -e "$a" ]; then echo exists; else echo does not exist; fi; declare -p a
[02:45:34] <shbot> emanuele6: exists
[02:45:34] <shbot> emanuele6: declare -- a="./.bashrc"
[02:49:46] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[02:50:53] *** Joins: kilitary (~kilitary@188.242.187.4)
[02:55:27] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[02:57:52] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Quit: Gone away)
[02:58:07] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[02:58:09] *** Joins: muirrum (~muirrum@sourcehut/user/muirrum)
[03:01:08] *** Hash_ is now known as Hash
[03:01:18] *** Joins: son0p (~ff@181.136.122.143)
[03:04:53] *** Joins: chenqisu12 (~bhca7d@183.217.201.21)
[03:05:04] *** Quits: chenqisu12 (~bhca7d@183.217.201.21) (Read error: Connection reset by peer)
[03:08:09] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:09:41] *** Joins: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com)
[03:15:01] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:16:08] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[03:16:29] <yetoo> if $$ is in a while loop, will a new random number/seed be generated each time or will it stay the same from the first loop
[03:18:21] <larryv> $$ isn't random
[03:18:28] *** Joins: kurahaupo_ (~kurahaupo@pa49-197-236-121.pa.qld.optusnet.com.au)
[03:18:39] <emanuele6> !$$
[03:18:39] <greybot> $$ expands to the PID of the shell. In a ( ) subshell, it expands to the process ID of the original shell, not the subshell. (Bash 4.0 and above have BASHPID for that.)
[03:19:27] *** Quits: furrymcgee (~devuan@cgn-89-1-211-103.nc.de) (Ping timeout: 256 seconds)
[03:19:29] <yetoo> A guide I saw was misleading then. But that would stay the same wouldn't it
[03:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[03:20:17] *** Quits: kurahaupo (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au) (Ping timeout: 240 seconds)
[03:20:38] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[03:21:16] <emanuele6> # echo "$$ $$ $$ $$ $$ $$ $$"
[03:21:17] <shbot> emanuele6: 44 44 44 44 44 44 44
[03:21:36] *** Joins: Atque (~Atque@user/atque)
[03:21:44] <yetoo> $RANDOM is the variable I was looking for
[03:22:05] <emanuele6> oh, then IT IS bash
[03:22:19] <emanuele6> not some mystical "real sh"
[03:22:32] <Dan39> guess i'll hang out over here instead
[03:22:53] <emanuele6> either way, if you are trying to make your script POSIX compliant don't use RANDOM.
[03:23:55] <emanuele6> !faq random > for other options
[03:23:55] <greybot> for other options: https://mywiki.wooledge.org/BashFAQ/026 -- How can I randomize (shuffle) the order of lines in a file?  Or select a random line from a file, or select a random file from a directory?
[03:26:00] *** Quits: kilitary (~kilitary@188.242.187.4) (Quit: entering irc ...)
[03:26:07] <Dan39> hmm, if you are doing something like shuffling lines of a file, i really wonder if you should just use a programming language like perl or python instead
[03:26:46] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[03:27:36] <emanuele6> ( Dan39 is ignoring the "POSIX requirement", yetoo needs to use the "real sh" and receive error message from POSIX by mail )
[03:27:49] <Dan39> oh sorry
[03:28:08] <Dan39> didn't read up quite that far :P
[03:29:44] *** Joins: kilitary (~kilitary@185.193.143.131)
[03:30:03] *** Quits: waxfire6 (~waxfire@65.119.2.240) (Quit: The Lounge - https://thelounge.chat)
[03:30:12] *** Joins: waxfire6 (~waxfire@65.119.2.240)
[03:31:38] *** Joins: cryptonector (~nico@24.28.108.183)
[03:32:29] * emanuele6 wonders how the "real sh" is run (do you need to send a print out of the script via post to opengroup's hq and wait for a response letter that will contain the output?)
[03:35:18] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[03:35:35] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[03:38:03] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[03:38:57] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[03:38:59] <twkm> "real" might exist elsewhere than you expect.
[03:39:55] *** Quits: rairden (~rairden@2603:9000:de04:9613::1a20) (Client Quit)
[03:40:23] <emanuele6> real shells are by the sea
[03:41:21] *** Quits: n4dir (~user@i577BC862.versanet.de) (Remote host closed the connection)
[03:43:20] *** Quits: Kruppt (~Kruppt@50.111.28.175) (Quit: Leaving)
[03:44:24] *** Quits: kilitary (~kilitary@185.193.143.131) (Remote host closed the connection)
[03:44:29] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[03:45:02] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[03:46:10] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[03:46:10] *** Joins: kilitary (~kilitary@185.193.143.131)
[03:47:24] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[03:47:30] *** Quits: rairden (~rairden@2603:9000:de04:9613::1a20) (Client Quit)
[03:48:15] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[03:48:53] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[03:49:15] *** Joins: rairden (~rairden@2603:9000:de04:9613::1a20)
[03:49:17] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 256 seconds)
[03:50:10] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[03:50:19] <Blondie101010> or in the kitchen/chicken
[03:50:47] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[03:50:53] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[03:51:20] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[03:52:02] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[03:54:32] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[03:55:41] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[03:57:05] <wiscii> Blondie101010: did you get chance to watch that show ?
[04:06:31] *** Joins: bloodElk (~bloodElk@user/bloodelk)
[04:06:43] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:08:33] <phy1729> emanuele6: whitespace and non-printable characters would be tricky
[04:09:18] *** Quits: rs (~rs@user/rs) ()
[04:09:58] *** Quits: rgrinberg (~textual@187.223.115.174) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:10:08] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[04:11:26] *** Joins: shiguma (~shiguma_w@cpe-98-30-168-159.columbus.res.rr.com)
[04:11:34] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:11:41] *** Joins: zebrag (~chris@user/zebrag)
[04:18:53] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[04:19:15] *** Joins: fedenix_ (~fedenix@gateway/tor-sasl/fedenix)
[04:20:09] <emanuele6> ah, right. `sed -n l' then perhaps
[04:20:54] <emanuele6>  but that requires figuring out how to run the "real sed"
[04:22:24] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[04:22:26] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:24:06] *** Joins: igemnace (~ian@user/igemnace)
[04:24:38] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:28:33] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[04:32:56] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[04:37:39] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 256 seconds)
[04:41:28] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[04:43:19] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:48:17] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[04:48:23] *** Joins: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com)
[04:49:33] *** Quits: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:49:51] *** Joins: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com)
[04:51:02] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:51:21] *** Quits: natewrench (~Soce1964@2603-7080-0b00-c89a-a818-f894-9d05-ca6d.res6.spectrum.com) (Read error: Connection reset by peer)
[04:53:29] *** Joins: swoolley (~seth@user/swoolley)
[04:54:30] *** Quits: swoolley (~seth@user/swoolley) (Client Quit)
[04:55:10] *** Joins: swoolley (~seth@user/swoolley)
[04:55:33] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[04:58:42] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:58:59] *** Quits: clime (~clime@78-80-115-5.customers.tmcz.cz) (Ping timeout: 256 seconds)
[05:02:57] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[05:05:04] *** Joins: mixfix41 (~homefame@user/mixfix41)
[05:09:54] *** Joins: crashrep (~crashrep@user/crashrep)
[05:12:01] *** Quits: webchat23 (~webchat23@2600:8805:a00:5800:ce50:f000:35f1:b738) (Ping timeout: 256 seconds)
[05:13:45] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[05:14:46] *** Joins: vysn (~vysn@user/vysn)
[05:15:57] *** Joins: katsuragi (katsuragi@tilde.institute)
[05:17:35] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:21:35] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[05:22:10] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[05:31:57] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:30] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:33:20] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Remote host closed the connection)
[05:33:31] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[05:35:12] *** Quits: shiguma (~shiguma_w@cpe-98-30-168-159.columbus.res.rr.com) ()
[05:39:13] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[05:43:03] *** Joins: ferdna (~ferdna@user/ferdna)
[05:49:52] *** Quits: kilitary (~kilitary@185.193.143.131) (Quit: ZNC - https://znc.in)
[05:54:02] *** Quits: rairden (~rairden@2603:9000:de04:9613::1a20) (Quit: rairden)
[05:54:49] *** Joins: justache (~justache@user/justache)
[05:57:10] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[06:00:51] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[06:03:06] *** Quits: swoolley (~seth@user/swoolley) (Quit: Lost terminal)
[06:05:17] *** Quits: gareth_ (~gareth@2001:8003:a08c:b00:1789:487d:b30e:4010) (Read error: Connection reset by peer)
[06:09:44] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[06:13:37] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[06:15:12] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[06:22:51] *** Quits: nickdiaz2wag209 (~bjpenn_@98.42.87.100) (Ping timeout: 256 seconds)
[06:26:15] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:31:42] <kurahaupo1> emanuele6: which "fake sed" are you avoiding?
[06:31:49] <kurahaupo1> (busybox?)
[06:33:17] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Ping timeout: 240 seconds)
[06:33:40] *** Joins: bluedust (~bluedust@103.160.194.145)
[06:34:07] <e36freak> sedposter
[06:34:07] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[06:34:23] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[06:34:46] <phy1729> imposeder
[06:35:29] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[06:36:07] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[06:36:24] <e36freak> ok you win
[06:36:26] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[06:37:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[06:38:22] <kurahaupo1> considering that sed is best used in a pipeline, perhaps it should be hoSED
[06:39:03] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Client Quit)
[06:39:25] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[06:40:48] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[06:41:15] *** Joins: Betal_ (~Betal@user/betal)
[06:42:02] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 240 seconds)
[06:44:24] *** Quits: kurahaupo_ (~kurahaupo@pa49-197-236-121.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[06:45:08] *** Quits: cliluw (~cliluw@47.147.73.223) (Read error: Connection reset by peer)
[06:45:15] *** Joins: kurahaupo (~kurahaupo@pa49-182-40-226.pa.qld.optusnet.com.au)
[06:48:51] *** Joins: myrrh (~markus@user/poet)
[06:50:39] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:55:22] *** Joins: oarion7 (anonymous@user/oarion7)
[07:00:11] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[07:00:29] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[07:07:10] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[07:07:15] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 256 seconds)
[07:11:13] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 256 seconds)
[07:12:32] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:20:57] *** Quits: jos1 (~jos3@dyndsl-178-142-065-197.ewe-ip-backbone.de) (Ping timeout: 240 seconds)
[07:23:08] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[07:27:20] *** Joins: ouestbillie (~gallup@185.213.154.231)
[07:28:04] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[07:28:17] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[07:30:56] *** Quits: willyg_cos (~willyg_co@user/willyg-cos/x-4994202) (Quit: willyg_cos)
[07:31:34] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[07:33:46] *** Quits: randm (~randm@user/randm) (Quit: Leaving.)
[07:33:53] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 256 seconds)
[07:34:37] *** Joins: jos1 (~jos3@dyndsl-091-248-051-023.ewe-ip-backbone.de)
[07:35:04] *** Joins: randm (~randm@user/randm)
[07:35:50] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:37:40] *** Joins: zebrag (~chris@user/zebrag)
[07:40:01] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Client Quit)
[07:40:19] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:49:49] *** Joins: magyar (~magyar@user/magyar)
[07:50:01] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:56:00] *** Quits: myrrh (~markus@user/poet) (Quit: leaving)
[08:03:11] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[08:04:37] *** Quits: magyar (~magyar@user/magyar) (Ping timeout: 240 seconds)
[08:09:11] *** Joins: Circuitsoft (uid393878@id-393878.lymington.irccloud.com)
[08:11:16] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[08:28:33] *** Joins: igemnace (~ian@user/igemnace)
[08:28:36] <zebrag> How do I call `firefox` with `MOZ_ENABLE_WAYLAND=0`, but for one time only?
[08:29:35] <tirnanog> MOZ_ENABLE_WAYLAND=0 firefox ...
[08:29:54] <zebrag> hum, `a=hello echo "XXX"${a}"XXX"` shouldn't that work?
[08:30:15] <emanuele6> no
[08:30:37] <emanuele6> !faq 104
[08:30:38] <greybot> https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
[08:31:08] <emanuele6> a=hello bash -c 'echo XXX"$a"XXX'   would work
[08:31:28] *** Joins: thebombzen (~thebombze@c-68-41-54-207.hsd1.mi.comcast.net)
[08:31:51] <zebrag> yeah, I'm reading the faq, thanks a lot for both answers
[08:36:12] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[08:37:01] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-1472-129.w92-169.abo.wanadoo.fr)
[08:37:24] *** Joins: crashrep (~crashrep@user/crashrep)
[08:37:37] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[08:41:19] *** Quits: LibreGNU (~gnu@vps-93-95-226-254.1984.is) (Ping timeout: 256 seconds)
[08:42:15] *** Joins: LibreGNU (~gnu@vps-93-95-226-254.1984.is)
[08:43:17] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:48:46] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:48:51] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[08:49:07] *** Joins: Rue_ (~rue@61-231-136-36.dynamic-ip.hinet.net)
[08:49:13] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Max SendQ exceeded)
[08:49:46] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:52:08] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[08:52:21] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[08:52:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[08:55:17] *** Quits: timj (~timj@user/timj) (Ping timeout: 256 seconds)
[09:00:24] *** Joins: seninha (~seninha@user/seninha)
[09:02:05] *** Joins: anaveragehuman (~anaverage@user/anaveragehuman)
[09:02:38] *** Joins: Atque (~Atque@user/atque)
[09:08:59] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[09:09:12] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[09:10:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:10:28] *** Joins: timj (~timj@user/timj)
[09:16:19] *** Joins: nickdiaz1wag209 (~bjpenn_@98.42.87.100)
[09:19:40] *** Joins: crashrip (~crashrep@user/crashrep)
[09:19:51] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:22:41] *** Quits: Thanatermesis (~Thanaterm@191.92.148.122) (Ping timeout: 256 seconds)
[09:28:06] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[09:28:10] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:29:17] *** Quits: Rue_ (~rue@61-231-136-36.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[09:30:02] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[09:31:15] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:32:09] *** Joins: Rue_ (~rue@61-231-136-36.dynamic-ip.hinet.net)
[09:34:44] *** Quits: A|an (~Alan@173.218.175.171) (Quit: A|an)
[09:35:06] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Remote host closed the connection)
[09:35:34] *** Joins: loganlee (~Thunderbi@user/loganlee)
[09:36:05] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[09:37:21] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[09:37:59] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:38:52] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[09:39:05] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[09:42:37] *** Joins: akoana (~ah@user/akoana)
[09:42:48] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[09:44:48] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[09:51:57] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 256 seconds)
[09:53:31] *** Joins: myrrh (~markus@user/poet)
[09:57:22] *** Parts: rsjw (~quassel@user/rsjw) ()
[09:58:11] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[10:01:47] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[10:09:33] *** Quits: larryv (~larryv@zsh/patchmanager/larryv) (Quit: larryv)
[10:10:26] *** Joins: brachamh (~brachamh@user/brachamh)
[10:11:10] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[10:26:58] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[10:27:57] *** Quits: crashrip (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[10:29:36] *** Quits: Maxattax97 (~max@2603:900a:1501:a7ca::100) (Quit: WeeChat 3.4)
[10:32:44] *** Joins: xx (~xx@user/xx)
[10:42:04] *** Joins: igemnace (~ian@user/igemnace)
[10:42:36] *** Quits: anaveragehuman (~anaverage@user/anaveragehuman) (Ping timeout: 276 seconds)
[10:46:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:49:53] *** Joins: almostdvs (~cody@38.140.123.98)
[10:55:18] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 250 seconds)
[10:56:27] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[10:57:49] *** Joins: sinaowolabi_ (~SinaOwola@160.152.97.14)
[10:59:59] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[11:00:14] *** Joins: unop (~unop@194.154.249.71)
[11:03:01] *** Joins: sinaowolabi__ (~SinaOwola@160.152.97.14)
[11:05:02] *** Quits: jensen (~jensen@65.78.100.184) (Remote host closed the connection)
[11:06:19] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:07:25] <uuidNuni1> zeamp:-> add a ;
[11:08:10] <uuidNuni1> a=b command -> define env for command
[11:08:48] <uuidNuni1> a=b ; command -> define a var for the rest of commands to use
[11:10:03] *** Quits: foul_owl (~kerry@94.140.8.106) (Ping timeout: 250 seconds)
[11:13:34] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:14:43] <uuidNuni1> so, what is the difference, environment and variable
[11:15:02] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[11:15:42] *** Joins: unop (~unop@194.154.249.71)
[11:16:43] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[11:17:40] *** Joins: yustin (~yustin@user/yustin)
[11:18:34] <tirnanog> that might have been a good question to consider in the first instance.
[11:18:38] <tirnanog> # a=b declare -p a
[11:18:39] <shbot> tirnanog: declare -x a="b"
[11:18:41] <tirnanog> # a=b; declare -p a
[11:18:43] <shbot> tirnanog: declare -- a="b"
[11:19:06] <tirnanog> one variable is marked for exporting to subshells and sub-processes. the other is not.
[11:19:22] <tirnanog> further ...
[11:19:29] <tirnanog> # a=b declare -p a; declare -p a
[11:19:30] <shbot> tirnanog: declare -x a="b"
[11:19:30] <shbot> tirnanog: bash: declare: a: not found
[11:19:56] <tirnanog> (the explanation for that is in the Simple Commands section of the manual)
[11:20:16] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Client Quit)
[11:20:32] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[11:20:51] <emanuele6> scoped variable :D   i= eval 'for v in "${array[@]}"; do something "$v"; done'
[11:21:28] <tirnanog> in the case that this person runs MOZ_ENABLE_WAYLAND=0 firefox, the given variable will be assigned and marked as exportable, and duly exported into firefox's environment. after that, it ceases to exist.
[11:21:31] *** Joins: The_Blode_ (uid537595@user/the-blode/x-7164444)
[11:21:45] <emanuele6> oops   v= eval 'for v in "${array[@]}"; do something "$v"; done'
[11:22:03] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Client Quit)
[11:22:22] <tirnanog> which, I believe, fulfils the "one time only" requirement.
[11:23:09] <uuidNuni1> the questions is how does a command accept exported environment?
[11:23:27] <uuidNuni1> why some do and some do not?
[11:23:35] <emanuele6> the environment is passed by the caller
[11:23:55] <emanuele6> it is like the arguments of a program
[11:23:55] *** Joins: foul_owl (~kerry@174-21-143-101.tukw.qwest.net)
[11:24:26] <uuidNuni1> why does firefox accept env while echo does not?
[11:24:51] <emanuele6> what do you mean "accept"
[11:25:02] <uuidNuni1> recognize
[11:25:03] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[11:25:19] <emanuele6> the environment is just a set of arguments
[11:25:49] <uuidNuni1> # export a=b ; echo $a
[11:25:50] <shbot> uuidNuni1: b
[11:26:05] <emanuele6> when a process uses execve() (e.g. to run `ls -l'), it passes the arguments   argv[0]="ls" argv[1]="-l"
[11:26:06] <uuidNuni1> # a=b echo $a
[11:26:07] <shbot> uuidNuni1: no output
[11:26:29] <emanuele6> and the environment: envp[0]="PATH=/bin:/usr/bin" envp[1]=...
[11:26:48] <emanuele6> bash passes everything in its environment + what's exported
[11:27:06] <emanuele6> all processes receive environment, some read it some don't
[11:27:10] <emanuele6> uuidNuni1: ...
[11:27:13] <emanuele6> !faq 104
[11:27:13] <greybot> https://mywiki.wooledge.org/BashFAQ/104 -- Why doesn't foo=bar echo "$foo" print bar?
[11:27:16] <tirnanog> you expand a too soon there. this was addressed earlier.
[11:27:33] <emanuele6> "$foo" is expanded by bash $foo is not passed to the command
[11:28:06] <uuidNuni1> yeah. i get it.
[11:28:12] <emanuele6> do you?
[11:29:04] <uuidNuni1> i mean, you can pass IFS to read? but you can't pass it to printf. one time pass i mean.
[11:29:37] <emanuele6> uuidNuni1: hello= echo 'hey'
[11:29:37] <uuidNuni1> the design is different between read and printf?
[11:29:43] <emanuele6> what do you expect that to print?
[11:30:02] <tirnanog> nope.
[11:30:02] <emanuele6> you really don't get it that, did you even read the faq?
[11:30:11] <emanuele6> s/that/then/
[11:30:21] <uuidNuni1> yes i read that  many times.
[11:30:29] <uuidNuni1> i totally get the idea .
[11:30:30] <tirnanog> the behaviour of the syntax is as documented by the Simple Commands section and holds true for all commands.
[11:30:33] <emanuele6> answer the question
[11:30:39] <emanuele6>   hello= echo 'hey'
[11:30:46] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:30:52] <tirnanog> that doesn't mean that it's always going to do what you want. a=b echo "$a" being a case in point.
[11:30:53] <emanuele6> do you expect it to print "hey"? "hello"? ""?
[11:31:01] <uuidNuni1> hey
[11:31:05] <emanuele6> yes
[11:31:23] <emanuele6> so why do you expect    a=b echo $a    to print b?
[11:31:47] <emanuele6> if that will run   echo    with no arguments in a modified environment with a=b in it
[11:32:08] <uuidNuni1> i understand bash expand var before env .
[11:32:28] <uuidNuni1> i mean. consider this: IFS=\; read ....
[11:32:34] <emanuele6> it is the same for read
[11:32:38] <tirnanog> what about it?
[11:32:40] <uuidNuni1> IFS=\; printf ...
[11:32:48] <tirnanog> give a concrete example.
[11:32:49] <emanuele6> consider this    IFS=\; read -d "$IFS" var
[11:32:59] <emanuele6> IFS will not be ";" there
[11:33:02] <uuidNuni1> printf does not work as expected
[11:33:21] <tirnanog> for the same reason as a=b echo $a doesn't work as you expected.
[11:34:03] <tirnanog> # set -- a b; IFS=. printf "$*"
[11:34:05] <shbot> tirnanog: a b
[11:34:09] <tirnanog> too late. $* was already expanded.
[11:34:30] <tirnanog> it was expanded _before_ the simple command was even dispatched.
[11:34:41] <tirnanog> that's the problem.
[11:35:09] <uuidNuni1> but if you don't use -d args for read? read actually recognize the IFS=\;
[11:35:11] <tirnanog> by introducing a semicolon, the value of IFS is changed before the expansion occurs.
[11:35:24] <tirnanog> # set -- a b; IFS=.; printf "$*"
[11:35:26] <shbot> tirnanog: a.b
[11:35:28] <emanuele6> uuidNuni1: so does echo.
[11:35:35] <emanuele6> but echo does not use it
[11:35:38] <emanuele6> why would it use it
[11:35:43] <tirnanog> first IFS is changed, then the next simple command is evaluated.
[11:36:07] <emanuele6> if you run   echo hello   you expect it to print "hello" even if a=b is in the environment.
[11:36:24] <uuidNuni1> right. it depends on the command which use or not use the env...
[11:36:25] *** Quits: oarion7 (anonymous@user/oarion7) (Ping timeout: 256 seconds)
[11:37:57] <emanuele6> again, why would echo read an environment variable?
[11:38:06] <uuidNuni1> all i was asking is, one time pass : `IFS=, command' , it is up to the command to decide to use the IFS or not, right?
[11:39:13] <uuidNuni1> the IFS=, was actually passed to the command, but if the command decide not to use it, then it is nonsense. that is the difference between command 'read' and 'printf or echo'
[11:39:37] <emanuele6> how is it different?
[11:39:38] <tirnanog> yes. but don't conflate that with how expansions are handled. if you modify the environment of a simple command which consists of one or more expansions, your present shell will process the expansions first.
[11:39:49] <tirnanog> it's not that difficult to understand.
[11:40:13] <emanuele6> if you pass IFS=h to `ls', ls will also ignore it
[11:40:13] <tirnanog> the fact that you're modifying the environment is completely irrelevant, in fact. the expansions happen first.
[11:40:17] *** Quits: sinaowolabi__ (~SinaOwola@160.152.97.14) (Ping timeout: 240 seconds)
[11:40:31] <tirnanog> for read it doesn't matter. you're not relying on any expansions (typically).
[11:41:03] <tirnanog> that is why I asked for a concrete example.
[11:41:05] <tirnanog> you didn't give one.
[11:41:07] <tirnanog> so I presumed one.
[11:41:08] <emanuele6> if you pass VIMINIT='set et' to `read' it will be ignored, if you pass it to `vim' it will be used
[11:41:25] <uuidNuni1> yes. as faq104 said. var expands , env expands , comamnd executes
[11:41:53] *** Quits: sinaowolabi_ (~SinaOwola@160.152.97.14) (Ping timeout: 256 seconds)
[11:42:06] <uuidNuni1> emanuele6:-> that makes some sense, thanks
[11:42:14] <uuidNuni1> totally god it now.
[11:42:55] <tirnanog> things don't happen in a simple left-to-right fashion.
[11:43:15] *** Joins: han-solo (~han-solo@178.248.115.24)
[11:43:15] *** Quits: han-solo (~han-solo@178.248.115.24) (Changing host)
[11:43:15] *** Joins: han-solo (~han-solo@user/han-solo)
[11:43:24] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:50:51] <The_Blode> Good morning guys. Quick question for you all. I would to replace a specific line in a text file using Bash. Is this possible?
[11:51:17] <The_Blode> I was thinking of reading the file into a while loop and maybe doing a quick check on the current line.
[11:51:34] <The_Blode> Piping to a new file then copying the copy back to the original.
[11:52:03] <tirnanog> !faq 21
[11:52:04] <greybot> https://mywiki.wooledge.org/BashFAQ/021 -- How can I replace a string with another string in a variable, a stream, a file, or in all the files in a directory?
[11:52:22] <The_Blode> Thank you tirnanog
[11:52:24] <tirnanog> doing it natively - in the fashion you just described - is also touched upon within that faq entry.
[11:52:30] <tirnanog> (somewhere)
[11:53:01] <tirnanog> in the "Streams" section, to be precise.
[11:56:43] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: Lost terminal)
[11:56:49] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[11:58:04] *** Quits: qub411 (~user@14-202-13-18.tpgi.com.au) (Quit: WeeChat 3.0)
[11:58:08] *** Joins: sinaowolabi_ (~SinaOwola@102.134.114.1)
[11:58:16] *** Joins: han-solo (~han-solo@user/han-solo)
[11:59:29] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[12:00:31] *** Joins: tobybl (~tobybl@248.64.200.146.dyn.plus.net)
[12:01:14] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739) (Remote host closed the connection)
[12:01:22] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739)
[12:01:58] *** Joins: qub411 (~user@14-202-13-18.tpgi.com.au)
[12:02:04] *** Joins: dreamon (~dreamon@p57a4c923.dip0.t-ipconnect.de)
[12:07:06] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[12:12:59] *** Joins: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374)
[12:14:00] <dirtwash> morning
[12:14:12] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[12:14:24] <dirtwash> I have a colum in a text file that I need to limit to X chars befoer exporting it, how would I do that?
[12:14:35] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[12:14:53] <dirtwash> probably involves cut hmm
[12:15:08] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8b00:12c3:7bff:fe6d:d374) (Read error: Connection reset by peer)
[12:18:20] *** Joins: kid_A (~kid_A@185.241.224.222)
[12:19:08] *** Joins: timm (~timm@user/timm)
[12:19:49] <tirnanog> if you'd said line it might have been simple enough, but the use of the term, column, would require clarification.
[12:19:58] *** Joins: maryo87 (~Maryo@user/maryo)
[12:20:48] <pj> assuming it's a single-char-delimited columns, such as tab-delimited it can easily be done with sed.  If it's something like proper CSV then it would be more difficult.
[12:21:09] <pj> could also be done with awk or perl quite easily
[12:22:19] *** Joins: martinus__ (~martin@127.59.202.77.rev.sfr.net)
[12:23:31] <emanuele6> also jq
[12:24:29] *** Quits: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[12:27:24] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:30:08] <dirtwash> cut did the job
[12:30:09] *** Quits: elongated_ferret (~enlongate@2001:470:69fc:105::1:43c8) (Quit: You have been kicked for being idle)
[12:30:15] <dirtwash> i knew the overall length so I can just cut to that
[12:30:23] *** Joins: elongated_ferret (~enlongate@2001:470:69fc:105::1:43c8)
[12:30:28] *** Parts: elongated_ferret (~enlongate@2001:470:69fc:105::1:43c8) ()
[12:31:14] *** Joins: furrymcgee (~devuan@cgn-89-1-211-103.nc.de)
[12:32:00] <uuidNuni1> what is the difference of $EUID and $UID ,which one should i use in script?
[12:32:13] <emanuele6> the one you need
[12:32:29] <emanuele6> EUID is the effective user id, UID is the user id
[12:32:53] <uuidNuni1> in most of the cases, they are the same?
[12:32:56] *** Joins: lavaball (felix@31.204.155.215)
[12:33:22] <uuidNuni1> # echo $EUID $UID
[12:33:23] <shbot> uuidNuni1: 0 0
[12:34:32] <uuidNuni1> sudo bash -c 'echo $EUID $UID' : 0 0
[12:35:26] <emanuele6> that bash is run by root
[12:35:39] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Read error: Connection reset by peer)
[12:36:56] <uuidNuni1> sudo -u user bash -c 'echo $EUID $UID' : 1000 1000
[12:37:17] <emanuele6> and that bash is run by user, yes
[12:37:28] <dirtwash> do i need to escape bash vars that are part of an SQL statement?
[12:37:29] <emanuele6> it is not sudo running the bash
[12:37:42] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[12:37:46] <dirtwash> if they are inside -e 'INSERT INTO ... $test '
[12:37:47] <emanuele6> s/the bash/the code/
[12:38:13] <emanuele6> dirtwash: what?
[12:38:31] <uuidNuni1> i mena,i have a root check in my script : if (( UID != 0 )) ; then echo 'this script needs to run as root' ; fi
[12:38:34] <dirtwash> emanuele6: it seems the vars arent evaluated when being inserted
[12:39:12] <emanuele6> !quote
[12:39:12] <greybot> https://mywiki.wooledge.org/Quotes
[12:39:19] <uuidNuni1> i guess using EUID or UID is the same here.
[12:40:03] <emanuele6> EUID would be more correct, maybe. but if the script is not setuid it doesn't matter.
[12:41:16] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[12:41:17] <emanuele6> but generally EUID is used for those checks, not UID
[12:41:44] <uuidNuni1> ok. i'll change to EUID right now
[12:41:55] <dirtwash> emanuele6: there it says i should use "" so they are evaluated
[12:41:57] <dirtwash> but it doesnt wrok
[12:42:31] <uuidNuni1> dirtwash:->  show your code
[12:42:41] <uuidNuni1> you can use \$ to escape
[12:42:55] <emanuele6> what you are trying to do looks very wrong regardless
[12:42:59] <emanuele6> SQL injection
[12:43:13] <emanuele6> but yeah, i don't even know what you are trying to inject
[12:43:25] <dirtwash> https://pastebin.com/raw/UU79GNYA
[12:43:34] <emanuele6> !check
[12:43:35] <checkbot> dirtwash: Line 5: Expressions don't expand in single quotes, use double quotes for that. Line 6: Double quote to prevent globbing and word splitting. Line 4: test2 appears unused. Verify use (or export if used externally). See https://shellcheck.net/?id=cb29215 for all 6 issues.
[12:43:36] <dirtwash> i just want to send some bash vars into mysql
[12:44:07] <emanuele6> those double quotes are in single quotes.
[12:44:58] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[12:45:00] <uuidNuni1> \"INSERT ...................  )\"
[12:45:04] <uuidNuni1> try this
[12:45:07] <emanuele6> and injecting a string the line literally into sql will not work unless $line is already a sql quoted string.
[12:45:23] <emanuele6> s/ a string//
[12:45:38] <dirtwash> ?
[12:45:55] <dirtwash> the vars are just strings
[12:46:42] <emanuele6> # val1=hello val2=hi;   printf '%s\n' "VALUES($val1, $val2)"
[12:46:43] <shbot> emanuele6: VALUES(hello, hi)
[12:46:45] <uuidNuni1> use double quotes outside, and escape the double quotes. like i showed above ^^^
[12:46:48] <emanuele6> is that valid? no.
[12:47:00] <emanuele6> # val1='"hello"' val2='"hi"';   printf '%s\n' "VALUES($val1, $val2)"
[12:47:02] <shbot> emanuele6: VALUES("hello", "hi")
[12:47:06] <emanuele6> is that valid? yes
[12:47:38] <emanuele6> you are also doing the splitting of the line very badly
[12:48:10] <emanuele6> you can use    while read -r htest test2; do ...; done   to split line
[12:48:28] <emanuele6> or   while read -r htest test2 _; do ...; done   if you need to ignore everything after the second column
[12:48:39] <dirtwash> it automatically split it?
[12:49:01] <emanuele6> but if htest and test2 aren't prequoted MySQL strings, you can't inject them
[12:49:29] <dirtwash> ok
[12:49:41] *** Quits: kid_A (~kid_A@185.241.224.222) (Quit: Take care cats!!)
[12:49:46] <emanuele6> i mean, you can do   \"$htest\",\"$test2\"   but if you do, that could be problematic
[12:49:51] <emanuele6> it is not a safe sql injection
[12:50:24] <dirtwash> so I double quote the outsides and escape those and for the inside ?
[12:50:59] <dirtwash> '"$test"' ?
[12:51:03] <emanuele6> no
[12:51:05] <emanuele6> !quote
[12:51:05] <greybot> https://mywiki.wooledge.org/Quotes
[12:51:14] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:51:28] <emanuele6> so you really have decided that you want to injected a raw strings into sql code and simply put " ...  "  around them?
[12:51:51] <dirtwash> how else to do it?
[12:52:06] <emanuele6> use a programming language with a proper mysql interface.
[12:52:09] *** Joins: almostdvs (~cody@38.140.123.98)
[12:53:17] <emanuele6> well, if you want to do it,   while read -r htest test2 _; do mysql -u root -S /var/run/mysqld/mysqld.sock -D jarm -e "INSERT INTO banner VALUES (\"$htest\",\"$test2\")"; done
[12:53:26] <emanuele6> but this is GROSS
[12:53:42] <dirtwash> it aint stupid if it works
[12:53:59] <geirha> The 90s called, they want their SQL injections back
[12:54:05] <emanuele6> you are running unsafely injected SQL code as root on a database.
[12:55:21] <pj> obligatory: https://xkcd.com/327/
[12:55:34] <geirha> !bobby
[12:55:34] <greybot> https://xkcd.com/327/ # https://mywiki.wooledge.org/CodeInjection # https://mywiki.wooledge.org/BashWeaknesses # Don't write database code in bash. Use perl, python, etc.; any language with an appropriate database API.
[12:56:16] <dirtwash> ok i just use python
[12:56:35] <pj> and use placeholders or proper quoting
[12:56:37] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 240 seconds)
[12:57:27] <dirtwash> btw that line split doesnt work, that read -r test test2
[12:57:30] <dirtwash> test2 doesnt get anything
[12:58:17] <pj> # read -r test test2 <<<"foo bar"; declare -p test test2
[12:58:19] <shbot> pj: declare -- test="foo"
[12:58:19] <shbot> pj: declare -- test2="bar"
[12:58:22] <geirha> then IFS has the wrong value
[12:58:53] <geirha> if unsude what IFS is, just pass one to read to be sure. while IFS=' ' read -r a b
[12:59:26] <dirtwash> well i'll just use python now
[13:02:07] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:03:38] <dirtwash> i hate python
[13:06:00] <p3rL> snake^
[13:06:11] <emanuele6> use p3rL
[13:06:43] <dirtwash> emanuele6: not there yet lol
[13:06:47] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[13:06:48] <p3rL> yes use me > perl -e '$??s:;s:s;;$?::s;;=]=>%-{<-|}<&|`{;;y; -/:-@[-`{-};`-{/" -;;s;;$_;see'
[13:08:20] *** Joins: bluedust_ (~bluedust@86.106.136.214)
[13:08:22] <emanuele6> i see `, so no
[13:11:57] *** Quits: bluedust (~bluedust@103.160.194.145) (Ping timeout: 240 seconds)
[13:13:36] <dirtwash> also hate mysql
[13:14:05] <dirtwash> how can it be that a string thats printed by bash just fine appears in mysql suddenly shorted for no raeson
[13:14:27] <emanuele6> !cr
[13:14:27] <greybot> Carriage Return (ASCII 13). Often represented by ^M or \r. CRs are found just before newlines in text files generated by DOS/Windows apps. You can see them with ''sed -n l''. See http://mywiki.wooledge.org/BashFAQ/052 to get rid of them.
[13:14:58] <emanuele6> well, maybe not your problem
[13:15:42] <dirtwash> like im importing hash values, they are fixed length, and all fine in the txt file, but now they randomly appeer shortened in the mysql table
[13:15:49] * dirtwash scratching head
[13:16:50] <dirtwash> is there a way to ensure my input file is clean?
[13:19:44] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[13:19:59] *** Joins: unop (~unop@194.154.249.71)
[13:24:20] *** Joins: bluedust (~bluedust@103.160.194.145)
[13:27:37] *** Quits: bluedust_ (~bluedust@86.106.136.214) (Ping timeout: 240 seconds)
[13:30:24] *** Joins: swoolley (~seth@user/swoolley)
[13:31:20] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:25:3430:6d5f:c01)
[13:36:52] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Remote host closed the connection)
[13:40:24] *** Quits: sinaowolabi_ (~SinaOwola@102.134.114.1) (Ping timeout: 250 seconds)
[13:42:02] *** Joins: seninha (~seninha@user/seninha)
[13:43:01] *** Joins: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net)
[13:43:04] *** Quits: Betal_ (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:47:17] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[13:53:31] *** Joins: sinaowolabi_ (~SinaOwola@160.152.97.14)
[14:00:03] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:02:42] *** Joins: rendar (~rendar@user/rendar)
[14:03:23] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:07:26] *** Quits: tobybl (~tobybl@248.64.200.146.dyn.plus.net) (Remote host closed the connection)
[14:09:27] <dirtwash> ok back to hbash for sanitizing data...how would one do : delete line if there is no second string in line
[14:14:31] *** Quits: sinaowolabi_ (~SinaOwola@160.152.97.14) (Ping timeout: 256 seconds)
[14:14:31] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Ping timeout: 256 seconds)
[14:16:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:16:28] <emanuele6> filter out lines that don't have a second colum?
[14:16:31] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:16:44] <emanuele6> s/colum/column/
[14:16:55] <emanuele6> in awk, that is just   awk 'NR >= 2'
[14:17:40] <emanuele6> or   $2 != ""   depending on what you mean
[14:17:46] *** Joins: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058)
[14:17:49] *** Lord_of_Life_ is now known as Lord_of_Life
[14:19:23] <dirtwash> thanks
[14:20:07] <emanuele6> err, NF, not NR
[14:20:34] *** Joins: Intelo (~Intelo@88.246.72.239)
[14:21:46] <dirtwash> u sure?
[14:21:55] <dirtwash> still seeing lines with second columns
[14:21:59] <dirtwash> *with no
[14:23:23] <dirtwash> hm yea i tried both versions
[14:23:32] <emanuele6> # printf '%s\n' a 'b c' 'd e f' | awk 'NF >= 2'
[14:23:34] <shbot> emanuele6: b c
[14:23:34] <shbot> emanuele6: d e f
[14:24:33] <dirtwash> i run it, still getting lines with no second column
[14:24:40] <dirtwash> wc -l is identical to source file + manually checked
[14:26:28] <dirtwash> i need to filter out what only has 1 column
[14:27:23] <emanuele6> # printf '%s\n' a 'b c' d 'e f g' 'h i' | awk 'NF >= 2'
[14:27:24] <shbot> emanuele6: b c
[14:27:24] <shbot> emanuele6: e f g
[14:27:24] <shbot> emanuele6: h i
[14:28:38] <dirtwash> emanuele6: https://pastebin.com/raw/km3ip2Dq
[14:28:47] <dirtwash> besides I see them in the file
[14:28:52] <dirtwash> they arent removed
[14:29:41] <dirtwash> emanuele6: also your example doesnt make sense?
[14:29:54] <dirtwash> you're not filtering out the lines
[14:30:10] <emanuele6> what?
[14:30:13] <emanuele6> i am.
[14:30:24] <emanuele6> # printf '%s\n' a 'b c' d 'e f g' 'h i' #| awk 'NF >= 2'
[14:30:29] <dirtwash> ok yes got confused reading it, but it aint working
[14:30:31] <shbot> emanuele6: a
[14:30:31] <shbot> emanuele6: b c
[14:30:31] <shbot> emanuele6: etc... ( http://ix.io/3Nea )
[14:30:31] <dirtwash> see wc -l
[14:30:47] <dirtwash> and my lines just look like : string1 string2
[14:30:58] <dirtwash> whitespace separated
[14:31:10] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[14:31:47] *** Joins: unop (~unop@194.154.249.71)
[14:36:46] <Intelo> How to know which terminal I have on the remote server?
[14:43:01] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[14:43:11] <yustin> dirtwash: sed -ne "/\s/p" yourfile    <<< i assume theres no whitespace when theres no 2. column ... you can redirect the output to a new file or use -i filename
[14:44:54] *** Joins: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks)
[14:44:59] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[14:45:01] <timm> Intelo: $TERM
[14:45:05] <dirtwash> yustin: there is one sadly
[14:45:30] <dirtwash> but shouldnt tr '\n' '-\n' < input_filename , replace newline with - and newline?
[14:45:36] <dirtwash> I dont mind adding something if its easier
[14:45:43] <dirtwash> but somehow that doesnt work
[14:45:50] *** Joins: vishal (~vishal@fedora/vishal)
[14:45:58] *** Joins: tmm88 (~tmm88@user/tmm88)
[14:46:47] <dirtwash> or my file is full of hidden characters that cause all this mess i dont know anymore
[14:46:52] <pj> dirtwash: tr raplaces *single characters* from string 1 with those in string 2
[14:47:05] <pj> so in your case you're just replacing \n with -
[14:47:39] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[14:47:45] <dirtwash> well i want to replace newline with -\n in all lines
[14:47:52] <dirtwash> so i have a valid second column in my file
[14:48:08] <pj> sed 's/$/-/' ... I think
[14:48:59] <pj> # sed 's/$/-/' <<<$'foo\nbar\nbaz'
[14:49:01] <shbot> pj: foo-
[14:49:01] <shbot> pj: bar-
[14:49:01] <shbot> pj: baz-
[14:49:04] <pj> yep
[14:49:05] *** Quits: xx (~xx@user/xx) (Ping timeout: 256 seconds)
[14:49:12] <dirtwash> that replaces the first character in my lines
[14:49:19] <Intelo> timm confusing https://unix.stackexchange.com/a/93509
[14:49:32] *** Quits: maryo87 (~Maryo@user/maryo) (Ping timeout: 240 seconds)
[14:49:38] <pj> dirtwash: the $ matches the end of the line, so how can it be replacing the first character?
[14:51:22] <dirtwash> let me show u
[14:51:39] <dirtwash> https://pastebin.com/raw/XkYTczyB
[14:51:42] <dirtwash> not making this shit up
[14:51:48] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[14:52:44] <dirtwash> or maybe im too tired to see my mistakes
[14:53:23] *** Joins: almostdvs (~cody@38.140.123.98)
[14:54:03] <dirtwash> pj: I assume this shouldnt be?
[14:54:48] *** Quits: mohabaks_ (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[14:55:38] *** Joins: millido (~millido@84.210.150.128)
[14:56:08] *** Joins: fef (~thedawn@user/thedawn)
[14:57:02] <dirtwash> i just checked my file, newline characters are in order at the end of the line
[14:57:03] *** Joins: maryo87 (~Maryo@user/maryo)
[14:57:37] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 240 seconds)
[14:57:43] <dirtwash> so why is this sed doing first character?
[14:58:09] *** Joins: xx (~xx@user/xx)
[15:00:52] <dirtwash> omg i figured it out
[15:01:20] <dirtwash> pj: dos2unix... apparently there where windows newlines
[15:01:22] <dirtwash> now it works
[15:04:00] <dirtwash> emanuele6: now your awk works as well
[15:04:09] *** Joins: docmax (~docmax@dynamic-077-008-230-172.77.8.pool.telefonica.de)
[15:04:17] <dirtwash> this is what happens when you pull data from MS IIS server
[15:05:32] *** Joins: Atque (~Atque@user/atque)
[15:06:08] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[15:07:39] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[15:07:54] *** Joins: cdown (~cdown@188.214.11.14)
[15:08:55] *** Parts: Intelo (~Intelo@88.246.72.239) ()
[15:14:40] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[15:23:02] *** Quits: haliucinas (~haliucina@5.20.153.21) (Remote host closed the connection)
[15:23:58] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 250 seconds)
[15:24:07] *** Joins: haliucinas (~haliucina@5.20.153.21)
[15:26:17] *** Quits: maryo87 (~Maryo@user/maryo) (Ping timeout: 240 seconds)
[15:27:18] *** Quits: apos (~apos@gateway/tor-sasl/apos) (Ping timeout: 276 seconds)
[15:32:18] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[15:34:42] *** Joins: apos (~apos@gateway/tor-sasl/apos)
[15:34:59] *** Quits: kurahaupo (~kurahaupo@pa49-182-40-226.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[15:35:17] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739) (Ping timeout: 240 seconds)
[15:35:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[15:36:48] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[15:38:11] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[15:39:00] *** Quits: Circuitsoft (uid393878@id-393878.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:44:46] *** Joins: maryo87 (~Maryo@user/maryo)
[15:53:33] *** Joins: webchat23 (~webchat23@2600:8805:a00:5800:fa44:5672:ad03:3adb)
[15:56:37] *** Joins: keypusher (keypusher@user/keypusher)
[15:58:01] *** Quits: furrymcgee (~devuan@cgn-89-1-211-103.nc.de) (Ping timeout: 256 seconds)
[15:59:38] *** Joins: mr-red (~drd@host-82-53-50-3.retail.telecomitalia.it)
[15:59:50] *** Quits: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058) (Ping timeout: 268 seconds)
[16:02:56] *** Joins: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058)
[16:03:57] *** Quits: mr-red (~drd@host-82-53-50-3.retail.telecomitalia.it) (Ping timeout: 240 seconds)
[16:11:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:14:27] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 256 seconds)
[16:14:33] *** Joins: furrymcgee (~devuan@cgn-89-1-211-103.nc.de)
[16:15:23] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:15:54] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[16:16:00] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:18:29] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[16:20:20] *** Joins: thiras (~thiras@user/thiras)
[16:20:49] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[16:23:28] *** Quits: kelly (~kelly@89-69-125-155.dynamic.chello.pl) (Remote host closed the connection)
[16:23:52] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[16:34:42] *** Quits: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[16:35:22] *** Joins: JohnML (~JohnML@ip-037-201-129-030.um10.pools.vodafone-ip.de)
[16:44:00] *** Quits: apos (~apos@gateway/tor-sasl/apos) (Ping timeout: 276 seconds)
[16:45:50] *** Joins: han-solo (~han-solo@103.82.184.193)
[16:47:46] *** Quits: webchat23 (~webchat23@2600:8805:a00:5800:fa44:5672:ad03:3adb) (Quit: Client closed)
[16:48:02] *** Quits: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058) (Ping timeout: 250 seconds)
[16:51:55] *** Joins: apos (~apos@gateway/tor-sasl/apos)
[16:52:11] *** Quits: mongy (~mongy@user/mongy) (Quit: WeeChat 3.4)
[16:52:12] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[16:54:39] *** Joins: almostdvs (~cody@38.140.123.98)
[16:56:14] *** Quits: maryo87 (~Maryo@user/maryo) (Read error: Connection reset by peer)
[16:56:36] *** Joins: maryo87 (~Maryo@user/maryo)
[16:57:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:59:18] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 250 seconds)
[17:00:31] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[17:01:28] *** Joins: maryo (~Maryo@user/maryo)
[17:01:55] *** Quits: maryo87 (~Maryo@user/maryo) (Read error: No route to host)
[17:05:20] *** Joins: drd (~drd@93-45-53-200.ip101.fastwebnet.it)
[17:07:52] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Remote host closed the connection)
[17:08:03] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[17:08:12] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[17:08:52] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[17:09:57] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[17:10:25] *** Karyon_ is now known as Karyon
[17:13:21] *** Joins: vysn (~vysn@user/vysn)
[17:13:26] *** Joins: davidl (~quassel@217-64-148-110.pool.ovpn.com)
[17:22:21] *** Quits: tercaL (~tercaL@user/tercal) (Remote host closed the connection)
[17:23:11] *** Joins: edlou (uid413273@id-413273.helmsley.irccloud.com)
[17:23:28] *** Parts: ext_ (ext@encrypt.nu) ()
[17:25:21] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[17:26:31] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Read error: Connection reset by peer)
[17:27:12] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[17:28:44] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:29:14] *** Quits: unop (~unop@194.154.249.71) (Remote host closed the connection)
[17:29:29] *** Joins: unop (~unop@194.154.249.71)
[17:30:40] *** Joins: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au)
[17:33:04] *** Joins: Rohambili (uid528665@id-528665.ilkley.irccloud.com)
[17:35:09] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:37:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:40:47] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:43:52] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[17:45:12] *** izabera is now known as gizabera
[17:46:08] *** gizabera is now known as izabera
[17:48:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[17:49:34] *** Quits: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[17:50:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc06:be00:12c3:7bff:fe6d:d374)
[17:50:13] *** Quits: tmm88 (~tmm88@user/tmm88) (Ping timeout: 268 seconds)
[17:51:19] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Remote host closed the connection)
[17:53:50] *** Joins: luckiswithme (~luckiswit@149.167.139.139)
[17:53:59] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[17:55:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[17:57:19] <uuidNuni1> if [ ${assArray2[Monitor]+_} ]; then echo "Found"; else echo "Not found"; fi
[17:57:19] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[17:57:26] <uuidNuni1> what does this +_ do ?
[17:58:25] <uuidNuni1> https://linuxhint.com/associative_array_bash/
[18:00:10] <oprypin> uuidNuni1, https://tldp.org/LDP/abs/html/parameter-substitution.html#PARAMALTV
[18:00:18] *** Quits: Lantizia (~Lantizia@195.62.201.126) (Changing host)
[18:00:18] *** Joins: Lantizia (~Lantizia@user/lantizia)
[18:03:30] <uuidNuni1> oprypin:->  thanks, the : is omitted. ok, i found that in man bash. but why use '_' ?
[18:03:37] *** Joins: mongy (~mongy@user/mongy)
[18:05:14] <oprypin> uuidNuni1, no reason. seems 'a'  would've worked just as well.  the guide seems dodgy to me btw
[18:06:17] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Quit: WeeChat 3.0)
[18:06:34] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:06:49] <uuidNuni1> yeah, i was confused too. ':+something' is more understandable, because '_' has special meanings in bash, and using a '_' may confuse people
[18:07:52] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:08:10] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:10:30] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:10:47] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:11:57] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[18:11:57] *** The_Blode_ is now known as The_Blode
[18:12:12] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[18:12:33] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[18:13:02] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[18:13:49] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:14:07] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:14:16] *** Quits: drd (~drd@93-45-53-200.ip101.fastwebnet.it) (Ping timeout: 268 seconds)
[18:15:06] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:15:23] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:17:56] *** Joins: Atque (~Atque@user/atque)
[18:18:20] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc)
[18:18:20] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6c38:610a:dd57:a9dc) (Changing host)
[18:18:20] *** Joins: skapata (~Skapata@user/skapata)
[18:19:35] *** Joins: sandb0y (~pirate@user/sandb0y)
[18:19:45] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:20:04] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:21:41] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:21:58] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:23:19] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:23:36] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:24:22] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:24:40] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:25:24] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 276 seconds)
[18:25:49] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:26:06] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[18:27:07] *** Quits: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de) (Client Quit)
[18:27:15] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[18:29:03] <uuidNuni1> oh my god, those people : https://stackoverflow.com/a/40999140
[18:34:07] <uuidNuni1> exit 3 # Only exits the subshell!
[18:34:20] <uuidNuni1> really? https://tldp.org/LDP/abs/html/subshells.html
[18:35:34] <uuidNuni1> # echo 'test exit in subshell' ; ( echo 'this is a subshell' ; exit 1 ) ; echo 'will this show up?'
[18:35:35] <shbot> uuidNuni1: test exit in subshell
[18:35:35] <shbot> uuidNuni1: this is a subshell
[18:35:36] <shbot> uuidNuni1: will this show up?
[18:39:06] <emanuele6> !subshell
[18:39:06] <greybot> http://mywiki.wooledge.org/SubShell
[18:39:19] <emanuele6> subshells are separate processes
[18:39:27] <esselfe> echo "One $(exit 1)" || echo two
[18:39:31] <esselfe> # echo "One $(exit 1)" || echo two
[18:39:33] <shbot> esselfe: One
[18:39:45] *** Quits: potamides (~amnifiliu@2003:a:270f:c400:28d8:e046:7d92:3970) (Quit: WeeChat 3.4)
[18:40:02] *** Quits: yustin (~yustin@user/yustin) (Ping timeout: 240 seconds)
[18:40:04] <uuidNuni1> interesting.
[18:40:16] *** Quits: rendar (~rendar@user/rendar) (Ping timeout: 250 seconds)
[18:40:22] <emanuele6> esselfe: i think you are looking for    if a=$(echo 1); then echo "One $a"; else echo two; fi
[18:40:40] <esselfe> # echo "One $(exit 1) two maybe"
[18:40:41] <shbot> esselfe: One  two maybe
[18:40:56] *** Quits: Pall (~Pall@cpc139184-sprt3-2-0-cust125.17-2.cable.virginm.net) (Quit: Leaving)
[18:41:01] <esselfe> oh maybe this
[18:41:16] <esselfe> no sorry
[18:42:33] <uuidNuni1> echo "One $(exit 1)"  // this returns true, because $() expands first
[18:43:18] <uuidNuni1> ok, the faq says 'cmd1 | cmd2 ' is an example of subshell, but cmd1 also run in subshell?
[18:43:49] *** Parts: ksynwa (~ksynwa@5.45.111.57) (WeeChat 3.4)
[18:43:53] <emanuele6> cmd1 runs in a subshell, cmd2 runs in another subshell
[18:44:13] <uuidNuni1> # a=b | echo  ; echo $a
[18:44:15] <shbot> uuidNuni1: no output
[18:44:36] <emanuele6> # exit 10 | exit 4 | exit 60 | exit 40; declare -p PIPESTATUS
[18:44:37] <shbot> emanuele6: declare -a PIPESTATUS=([0]="10" [1]="4" [2]="60" [3]="40")
[18:45:34] *** Joins: ferdna (~ferdna@user/ferdna)
[18:45:47] <uuidNuni1> echo $SHLVL | echo $SHLVL | echo $SHLVL | echo $SHLVL
[18:45:57] <uuidNuni1> # echo $SHLVL | echo $SHLVL | echo $SHLVL | echo $SHLVL
[18:45:58] <shbot> uuidNuni1: 2
[18:47:15] <emanuele6>  # { echo "$SHLVL" >&2 | echo "$SHLVL" >&2 | echo "$SHLVL" >&2 | echo "$SHLVL" >&2 ;} 2>&1 | paste -s
[18:47:18] <emanuele6> # { echo "$SHLVL" >&2 | echo "$SHLVL" >&2 | echo "$SHLVL" >&2 | echo "$SHLVL" >&2 ;} 2>&1 | paste -s
[18:47:19] <shbot> emanuele6: 2       2       2       2
[18:47:42] <uuidNuni1> # command -V paste
[18:47:43] <shbot> uuidNuni1: paste is /bin/paste
[18:47:59] <emanuele6> !searchkeys paste
[18:47:59] <greybot> emanuele6: 11 matches found: copy-paste, nopaste, paste, paste-cmd, paste.ubuntu.com, pasteban, pastebin, pastebin.com, pastebins, pastecmd, pasteit
[18:47:59] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[18:48:03] <emanuele6> !paste-cmd
[18:48:04] <greybot> The 'paste' command is used to paste together files, putting line 1 with line 1 and so forth. Try the man page for more.
[18:48:24] <emanuele6> # man paste
[18:48:24] <shbot> emanuele6: man paste: http://ix.io/aP1
[18:48:43] <uuidNuni1> oh damn,
[18:48:50] <uuidNuni1> # man bash
[18:48:51] <shbot> uuidNuni1: man bash: http://ix.io/aOa
[18:49:36] <uuidNuni1> this is ... damn cool. that ix.io can hold the bash man pages .
[18:49:51] *** Quits: han-solo (~han-solo@103.82.184.193) (Changing host)
[18:49:51] *** Joins: han-solo (~han-solo@user/han-solo)
[18:51:35] <emanuele6> to be fair, it is probably outdated
[18:51:54] <uuidNuni1> 4.3
[18:52:44] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[18:53:02] <Lantizia> is there some way of combining | and &&  ?  i.e. pipe but only when the thing before the pipe was a success?
[18:54:01] <emanuele6> uuidNuni1: in case you are thinking shbot just uploaded it, that is not what happened. `# man' and `# help' are special shbot command that just send a preuploaded link to the help/man page
[18:55:12] *** Joins: fef (~thedawn@user/thedawn)
[18:55:39] <emanuele6> Lantizia: condition && cmd1 | cmd2
[18:55:55] *** Joins: almostdvs (~cody@38.140.123.98)
[18:56:02] *** Joins: kroakle (~igloo@cpe-74-71-214-214.nyc.res.rr.com)
[18:56:02] *** Quits: armands (~armands@46.109.8.165) (Remote host closed the connection)
[18:56:19] <Lantizia> emanuele6, sounds like 3 commands that does
[18:56:25] <emanuele6> && normally has higher precedence than |, so i am not sure what is your question
[18:56:47] <Lantizia> emanuele6, basically I've got a situation of...    jq -e '.stuff' blah.json | sponge blah.json
[18:56:50] *** Joins: docmax_ (~docmax@dynamic-077-006-198-199.77.6.pool.telefonica.de)
[18:56:59] <Lantizia> but if the jq can't process it - it means blah.json will be empty
[18:57:26] <Lantizia> and I'm using sponge as jq has no inline mode (unlike sed)
[18:57:57] <emanuele6> so you want to first run a command, wait for it to exit, and then pass the output of the first command to another command if the first succeeded?
[18:58:13] <emanuele6> you can't use pipes like that it wouldn't make sense
[18:58:38] <emanuele6> you need to do something like       cmd1 > tmpfile && cmd2 < tmpfile
[18:58:46] <Lantizia> i guess it'd be handy if sponge had this - as it doesn't write until it's received all of it... so if it checked errorcodes that'd be great
[18:58:49] <Lantizia> but I don't think it can :S
[18:58:57] *** Quits: docmax (~docmax@dynamic-077-008-230-172.77.8.pool.telefonica.de) (Ping timeout: 240 seconds)
[18:59:32] <Lantizia> the nice thing with sed's inline mode is that if the sed fails - nothing is changed
[18:59:37] *** Quits: brachamh (~brachamh@user/brachamh) (Ping timeout: 240 seconds)
[19:00:41] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 256 seconds)
[19:01:01] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:01:52] <kurahaupo> emanuele6: pipe | has higher precedence than command terminators ; ;; & && || etc
[19:02:16] <emanuele6> yes that is what i meant :S
[19:02:58] <emanuele6> && has LOWER precedence than |
[19:03:37] <Lantizia> sponge isn't really that useful then (at least not in these situations)
[19:03:45] *** Joins: zeden (~zeden@user/zeden)
[19:04:19] <emanuele6> it does not make sense to use a pipe as you described
[19:04:32] <emanuele6> a regular file is more appropriate
[19:04:42] <Lantizia> was hoping to avoid the temp file
[19:05:40] *** Quits: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au) (Remote host closed the connection)
[19:05:56] *** Joins: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au)
[19:06:20] <Earnestly> Lantizia: Change your mind on this topic.  Using temporary files is more ideal than trying to do anything in-place
[19:06:34] <Earnestly> Lantizia: See https://backreference.org/2011/01/29/in-place-editing-of-files/
[19:06:42] *** Quits: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[19:06:57] <Earnestly> !sponge
[19:06:57] <greybot> sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; ) # read and write the same file in a pipeline: grep -v '^#' file | sponge file
[19:07:12] *** Joins: csm3105 (~csm3105@static-107-54-230-77.ipcom.comunitel.net)
[19:07:59] <Earnestly> By using temporary files you also gain the capacity to do checks on them before overwriting the existing file.  Unless you have strict requirements on inodes being the same, try to avoid in-place.  Embrace the temporary file
[19:10:39] <emanuele6> you are trying to use a pipe as a storage for the output of cmd1 that needs to hold the data until cmd1 terminates. and want the data to be voided if cmd1 failed. otherwise, if cmd1 succeeded, you want to spawn cmd2 and make it read from the pipe
[19:10:48] <emanuele6> that doesn't make any sense with pipes
[19:11:01] <emanuele6> but if you use a regular file, it would make sense
[19:11:39] *** Joins: A|an (~Alan@173.218.175.171)
[19:14:00] <furrymcgee> exec 3<<<$(< file) creates a temporary file
[19:15:34] <Lantizia> emanuele6, no I'm not trying to use the pipe as storage
[19:15:41] <Lantizia> that's what sponge is doing
[19:15:55] <emanuele6> that is basically what "pipe only if successful" means
[19:16:16] <Lantizia> right so in reality I'm wanting additional functionality in sponge
[19:16:46] <emanuele6> again, it does not make sense
[19:17:03] <Lantizia> that is if in a 'proga | progb' scenario.. that progb can even read the errorcode of proga *after* proga has finished
[19:17:04] <akoana> the pipe reader doesn't know anything about the exit status of the pipe writer
[19:17:11] <emanuele6> cmd1 | sponge    sponge can't get cmd1's exit status by magic
[19:17:35] <Lantizia> emanuele6, right but sponge is waiting for cmd1 to finish - so when it's finished, perhaps it can get the exit status then
[19:17:58] <emanuele6> it is not waiting
[19:18:05] <Lantizia> YES it is - that's the whole point of sponge :)
[19:18:13] <kurahaupo> Lantizia: Only the parent of a process can get its exit status directly
[19:18:22] <emanuele6> no, sponge does not wait
[19:18:45] <emanuele6> it reads data whenever something is on the pipe
[19:19:04] <Lantizia> sure but it WAITS to do anything with data until it has it all first
[19:19:11] <emanuele6> no
[19:19:13] <Lantizia> YES
[19:19:27] <kurahaupo> Lantizia: "wait" is a syscall
[19:19:40] <Lantizia> I'm using english here, not syscall terms :)
[19:19:46] <emanuele6> it does not matter
[19:19:53] <Lantizia> oh now it does not matter!
[19:20:08] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 250 seconds)
[19:20:10] <emanuele6> yes, it does not matter
[19:20:37] <emanuele6> sponge does not "wait"  to read  or  to be piped to
[19:20:37] <kurahaupo> "wait for all the data" is kinda vague. It receives all the data and then outputs it somewhere
[19:21:22] <emanuele6> it you wanted to implement something as you described you could use:
[19:21:36] <Lantizia> https://linux.die.net/man/1/sponge
[19:21:41] <kurahaupo> The act of reading from a pipe will suspend the process until there is data available. The receiving process does not need to do anything to "wait"
[19:21:44] <Lantizia> "sponge soaks up all its input before opening the output file"
[19:21:45] <emanuele6>  { cmd1; echo "$?" ;} | awk 'BEGIN { getline buf; getline last } { buf = buf "\n" last; last = $0 } END { if (buf != "" && last == "0") print buf | "cmd2"; }'
[19:22:01] <Lantizia> so you could say it WAITS for all its input before opening the output file :P
[19:22:02] *** Parts: kroakle (~igloo@cpe-74-71-214-214.nyc.res.rr.com) (Igloo IRC: https://iglooirc.com)
[19:22:18] <emanuele6> Lantizia: but that is completely unrelated.
[19:22:56] <Lantizia> well it isn't if when sponge knows when the first command has finished - that's also it's time to read any exit status
[19:23:08] <Lantizia> (if it can)... but kurahaupo is saying only a parent process can
[19:23:20] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[19:23:41] <emanuele6> i also said that before him
[19:24:17] <emanuele6> and whatever sponge does (i know what it does) is completely unrelated to "pipe conditionally"
[19:24:22] <Lantizia> and akoana before that too :)
[19:24:36] <Lantizia> we're past "pipe conditionally"
[19:24:52] *** Joins: epony (epony@user/epony)
[19:24:57] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[19:27:54] <emanuele6> # { printf '%s' 'hello' 'world'; true; printf '%s\n' "$?" ;} | awk 'BEGIN { getline buf; getline last } { buf = buf "\n" last; last = $0 } END { if (buf != "" && last == "0") print buf | "rev" }'
[19:27:55] <shbot> emanuele6: no output
[19:28:04] <emanuele6> oops
[19:28:07] <emanuele6> # { printf '%s\n' 'hello' 'world'; true; printf '%s\n' "$?" ;} | awk 'BEGIN { getline buf; getline last } { buf = buf "\n" last; last = $0 } END { if (buf != "" && last == "0") print buf | "rev" }'
[19:28:09] <shbot> emanuele6: olleh
[19:28:09] <shbot> emanuele6: dlrow
[19:28:14] <emanuele6> # { printf '%s\n' 'hello' 'world'; false; printf '%s\n' "$?" ;} | awk 'BEGIN { getline buf; getline last } { buf = buf "\n" last; last = $0 } END { if (buf != "" && last == "0") print buf | "rev" }'
[19:28:15] <shbot> emanuele6: no output
[19:28:27] *** Quits: kurahaupo (~kurahaupo@pa49-197-230-110.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[19:28:52] <emanuele6> anyway, that will literally pipe conditionally without a temporary regular file ^
[19:28:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:29:33] <emanuele6> but there data is stored "in the pipeline" (in awk's memory), not "in the pipe"
[19:30:07] <emanuele6> and storing data in a regular file is much more efficient in most cases
[19:30:28] <dob1> if I set an environment via export in a bash script how can I make it to be persistent after the script has finished?
[19:30:31] <emanuele6> also safer
[19:30:50] <emanuele6> !environment > dob1
[19:30:50] <greybot> dob1: Each process has its own private variable space called the "environment". A child inherits a *copy* of the parent's. See http://mywiki.wooledge.org/Environment
[19:30:59] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[19:31:38] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[19:34:10] <furrymcgee> source script
[19:35:07] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:37:12] <kurahaupo_> Lantizia: A pipe has only limited storage between processes, typically 0.5 ~ 4 KiB at most.
[19:37:21] <Earnestly> dob1: You can't.  UNIX process model means no new processes can ever be created ex nihilo besides PID1.  You can only fork and/or exec.  The only way to set an environment higher up is via debug hacks
[19:37:27] <Earnestly> Which would require root permission
[19:37:55] <Lantizia> kurahaupo_, emanuele6, I'm going to say this only one more time... if I actually thought a pipe could STORE data then I wouldn't have accepted the need to use sponge now would I?
[19:38:05] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[19:38:09] <Lantizia> please stop going on about pipe storage
[19:38:21] <kurahaupo_> ok
[19:39:24] <Lantizia> if anything I was hoping someone would pop out and say "oh sponge had option XYZ to do that" ... or "use foobar instead of sponge which can"
[19:39:27] <Earnestly> kurahaupo_: Hm, I thought it might buffer more than that since it's very capable of piping raw video into encoder without starving
[19:39:50] <Earnestly> Usually encoder doesn't keep up
[19:39:52] <kurahaupo_> dob1: Each time you start an interactive shell, it reads and executes commands in ~/.bashrc so you can put new variable settings there
[19:40:41] <kurahaupo_> Lantizia: You can split apart the two parts of sponge to do the test. Or just make a modified version
[19:40:48] *** Joins: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977)
[19:40:54] <Earnestly> Use temp files
[19:41:04] <akoana> emanuele6: nice awk example, I think it should be tac, not rev, right?
[19:41:16] *** Joins: annomy (~annomy@103.174.84.85)
[19:41:29] <Lantizia> kurahaupo_, split how?
[19:41:31] <kurahaupo_> cmd1 > tempfile && cmd2 < tempfile ; rm -f -- tempfile
[19:41:39] <Earnestly> !sponge > kurahaupo_
[19:41:39] <greybot> kurahaupo_: sponge() ( tmp=$(mktemp) && cat > "$tmp" && cat -- "$tmp" > "$1" && rm -- "$tmp"; ) # read and write the same file in a pipeline: grep -v '^#' file | sponge file
[19:41:39] <emanuele6> akoana: it should be any cmd2, it does not matter.
[19:42:13] <kurahaupo_> Earnestly: not helpful to me
[19:42:31] <emanuele6> kurahaupo_: that is the first thing i suggested,  <emanuele6 > you need to do something like       cmd1 > tmpfile && cmd2 < tmpfile
[19:42:48] *** Quits: Rohambili (uid528665@id-528665.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:42:52] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[19:43:09] <dob1> ok thanks for the hints, I remember now about source script or . script
[19:43:14] <emanuele6> where cmd1 is `jq' and cmd2 is `sponge' in Lantizia's case
[19:44:03] <Lantizia> i don't follow that awk line at all
[19:44:17] <Lantizia> i get that the bit at the start is cmd1 plus the exit status on the last line
[19:44:31] <Lantizia> and somehow awk acts on that last line? no idea where cmd2 would go though
[19:44:58] <emanuele6> that is not a good solution, it was just an example of how you could implement conditional piping.
[19:45:29] <emanuele6> here the solution that actual makes sense is to use a regular file to temporarily store data as i have already said
[19:45:47] <Lantizia> is this maybe explaining why 'sponge' never really caught on ? :D
[19:46:58] <akoana> emanuele6: ah, right - sorry I misread your example...
[19:47:35] <kurahaupo_> Lantizia: sponge is primarily addressing a different problem, where exit status doesn't matter but circular pipelines would be
[19:48:49] <Lantizia> kurahaupo_, sure but it is being pushed for people to use here... https://github.com/stedolan/jq/issues/105
[19:49:10] <Lantizia> in that instance it's a program (jq in this case, but could be any program) that lacks an in-place edit mode
[19:49:38] <Lantizia> which is fine but unlike sed which will leave the file alone if there is an error... using sponge doesn't :P
[19:50:50] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:51:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:51:30] <furrymcgee> "herestrings use temp files" if you want it portable use here-documents
[19:52:48] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:52:59] <twkm> which until recently also use temp files.
[19:53:29] <emanuele6> Lantizia: nonsense,   sed 'lsdaduoiueowqiu' file | sponge file    would also corrupt the file.
[19:54:00] <emanuele6> sed -i 'lsdaduoiueowqiu' file    doesn't, but that is not using sponge
[19:55:11] *** Quits: nattiestnate (~nate@2001:448a:20a0:2d74:df0e:2d0:816:6977) (Quit: WeeChat 3.4)
[19:55:40] *** Quits: annomy (~annomy@103.174.84.85) (Quit: WeeChat 3.4)
[19:55:41] *** Joins: junebug (~junebug@2600:1700:3db0:2540:6711:ce96:a34d:9ed2)
[19:57:17] <emanuele6> (but it is doing something similar under the hood; the difference is that sed can know whether it will fail or not and avoid overwriting the file if it knows it is failing)
[20:01:09] <kurahaupo_> emanuele6: sed doesn't have many failure modes to worry about. A more useful thing would be to avoid rewriting the file if sed hasn't made any changes to its contents
[20:02:08] <emanuele6> i meant if the code is invalid   lsdaduoiueowqiu
[20:02:37] *** Joins: mixfix41 (~homefame@user/mixfix41)
[20:03:48] <emanuele6> sed 'lsdaduoiueowqiu' file | sponge file   will wipe the file   sed -i 'lsdaduoiueowqiu' file   will not
[20:04:23] <emanuele6> ( at least in GNU sed )
[20:04:42] <kurahaupo_> emanuele6: Surely wiping the file is the point of writing sed 'lsdaduoiueowqiu' file | sponge file
[20:04:46] *** Joins: ChmEarl (~chmearl@user/chmearl)
[20:05:00] <kurahaupo_> !sed-i
[20:05:00] <greybot> sed -i isn't portable; standard sed doesn't have it at all, GNU sed -i has an optional argument, and BSD sed -i has a mandatory argument. See !editing and <https://mywiki.wooledge.org/BashFAQ/021> for advice
[20:05:02] <emanuele6> :D
[20:06:13] *** Quits: polve (~polve@user/polve) (Ping timeout: 256 seconds)
[20:10:51] *** Joins: igemnace (~ian@user/igemnace)
[20:10:54] *** Joins: polve (~polve@user/polve)
[20:12:46] <Lantizia> why are you restating everything I've already said?
[20:13:57] *** Joins: lavaball (felix@31.204.155.215)
[20:14:00] <xx> how do I get the 'hello world' from `echo 'password: "hello world"' | <something here>`
[20:15:05] <kurahaupo_> xx: how many lines do you expect to process?
[20:15:29] <xx> I expect to only have 1 line that has password in it
[20:15:32] <Earnestly> xx: You can read the first field then the rest (read -r first rest), then use PEs to strip the leading and trailing quotes
[20:15:35] <xx> I can get that line using `grep password`
[20:15:37] <kurahaupo_> xx: And does it come from a file or a variable?
[20:15:47] <xx> it comes from output of a command
[20:16:15] <kurahaupo_> And "password" is guaranteed never to occur on any other line?
[20:16:21] <xx> guaranteed
[20:16:27] *** Quits: junebug (~junebug@2600:1700:3db0:2540:6711:ce96:a34d:9ed2) (Quit: Leaving)
[20:17:18] <grawity> It Sounds Like You Are Trying To Parse Yaml
[20:17:22] <grawity> echo 'password: "hello world"' | yq -r .password
[20:17:29] <kurahaupo_> xx: sed '/^password:/!d; s///; s/ *"//; s/"$//;'
[20:18:06] <xx> hmm
[20:18:11] <emanuele6> or  sed '/^password: *"/!d; s///; s/"$//'
[20:18:12] <xx> thanks, I think I can work with that
[20:18:33] <kurahaupo_> emanuele6++
[20:19:30] <kurahaupo_> xx: Why not just ask the program that produces the output to limit it to just the password?
[20:19:47] <xx> kurahaupo_: because it's a stupid program
[20:20:11] <kurahaupo_> an excellent reason! 😝
[20:20:20] <Earnestly> Hm, I wouldn't use sed/awk for this if the shell is already involved.  Generally PE transformations are a bit more reliable when it comes to whitespace consideration (particularly with awk)
[20:20:48] <emanuele6> or  sed -n 's/^password: *"\(.*\)"$/\1/p'
[20:21:13] <kurahaupo_> sed 's/[[:space:]]*//' is perfectly portable and reliable
[20:21:19] *** Quits: luckiswithme (~luckiswit@149.167.139.139) (Remote host closed the connection)
[20:21:25] <emanuele6> [[:blank:]]
[20:21:51] <Earnestly> As this is a password I'd probably use IFS= read -r foo; and use PEs to strip password: " as well
[20:22:18] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[20:22:31] <no_gravity> Hello! How can I get the 6th field from a tab seperated text file?
[20:22:34] <kurahaupo_> that would be my own preferred aspect too
[20:22:51] <emanuele6> but you could just use    IFS=\"$IFS read -r p password; do if [ "$p" = password: ]; then   yeah
[20:22:55] <kurahaupo_> no_gravity: cut -d $'\t' -f6
[20:23:18] <no_gravity> kurahaupo_: Awesome, thanks!
[20:23:18] <kurahaupo_> # cut --help
[20:23:24] <shbot> kurahaupo_: cut: cut [-a ARRAY] [-b LIST] [-c LIST] [-f LIST] [-d CHAR] [-sn] [file ...]
[20:23:24] <shbot> kurahaupo_:     Extract selected fields from each line of a file.
[20:23:24] <shbot> kurahaupo_: and so forth... (but now the pastebin is sick of me)
[20:23:31] <emanuele6> it's a loadable builtin
[20:23:46] <emanuele6> use 5# to get GNU cut
[20:24:13] <emanuele6> also  -d $'\t'  is the default
[20:24:28] <kurahaupo_> you might want cut -s to skip lines that don't have a tab char
[20:25:35] <Earnestly> emanuele6: (I assume password can contain " characters, why I like PEs for this kind of thing)
[20:27:59] <emanuele6> if password can contain `"', it is probably not a good idea to remove "..", but yeah
[20:28:18] *** Joins: n4dir (~user@i5E86C596.versanet.de)
[20:28:33] <Earnestly> emanuele6: If the output adds a leading and trailing " then it is stable format
[20:28:59] <emanuele6> yeah, i think xprop(1) does that
[20:29:39] <Earnestly> I've found it quite helpful when doing anything to try and list all assumptions I make, and then try to whittle them down.  E.g. https://0x0.st/ooJN.txt
[20:30:34] <Earnestly> emanuele6: (I used to have assumptions like paths not containing newlines, but then I made a check for that, which results in error message.)
[20:31:43] <Earnestly> emanuele6: lol, posix https://0x0.st/ooJq.txt
[20:32:26] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[20:36:09] <Earnestly> Additionally, I've found a lot of the weaknesses in posix find can be recovered by using -exec sh ... _ {} + and having the shell work over arguments instead of reading lines
[20:37:20] <emanuele6> your awk script succeed if it encounters ' 0 ' as the last file with spaces
[20:37:46] <emanuele6> you probably want e=1 instead of e=$0
[20:37:54] *** Joins: TheSilentLink (~TheSilent@user/thesilentlink)
[20:38:10] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Quit: Stay safe!)
[20:38:41] <TheSilentLink> Hello everyone, how would I make it so it deletes all the files older than the last 2 most recent files?
[20:38:42] <emanuele6> or `e != ""' in the final condition
[20:39:54] <Earnestly> emanuele6: That e=$0 looks wrong, I'd almost certainly use something like e=1 in this construction.  Smells like a kind of last-line-effect bug
[20:40:08] <Earnestly> !older
[20:40:11] <xx> thanks, I got it working
[20:40:14] <Earnestly> !newest
[20:40:14] <greybot> Find the latest modified file in a directory: latest() { local file latest; for file in "${1:-.}"/*; do [[ $file -nt $latest ]] && latest=$file; done; printf '%s\n' "$latest"; } ## Usage: latest [dir]
[20:40:22] <xx> still a bit confused what s/// actually does but it is necessary
[20:40:51] <Earnestly> TheSilentLink: With a degree of difficulty, it's a surprisingly weak aspect of the shell.  If you have GNU find, you can use that
[20:41:02] <kurahaupo_> xx: Replace whatever matches the most recent pattern with nothing
[20:41:04] <emanuele6> xx: in sed, an empty pattern uses the last used pattern
[20:41:51] <xx> now I get it, thanks (I know !nabq)
[20:42:03] <emanuele6> (since there is no branching) that sed script would be the same as   sed '/^password: *"/!d; s/^password: *"//; s/"$//'
[20:42:26] <Earnestly> TheSilentLink: I answered someone else about this long ago and kept this example as notes/demo: https://0x0.st/ooJB.sh
[20:42:29] <emanuele6> well, there is !d, but that does not affect it
[20:43:12] <kurahaupo_> xx: !nabq doesn't apply to the standard Posix utilities (though some folk argue about awk)
[20:43:26] <xx> well there is #sed, isn't there?
[20:43:35] <emanuele6> there is #sed yes
[20:43:43] *** Joins: zebrag (~chris@user/zebrag)
[20:47:58] *** Quits: rawgreaze (~rawgreaze@user/rawgreaze) (Quit: ZNC 1.8.2 - https://znc.in)
[20:48:18] <Earnestly> TheSilentLink: What you'd do is instead is something like: find ... -type f -printf '%T@/%p\0' | sort -t / -k1,1 -nz | tail -zn 2 | xargs -0 echo # Requires all the GNU features; alternatives would be creating arrays sorted by time and deleting all but the first two.  Change 'echo' to 'rm' if it's what you expect
[20:49:29] <Earnestly> TheSilentLink: %T is modification time (%A for access, %C is change)
[20:50:27] <Earnestly> TheSilentLink: Meh sorry you'd have to remove the timestamps, I haven't done it here
[20:51:33] <Earnestly> ... | cut -zd / -f2- | ...
[20:51:58] <Earnestly> (This is a strange pipeline for me, because it actually is one of the rare cases imo where stuff like tail/cut are useful)
[20:54:15] <TheSilentLink> ah I see thanks. Would this be something python would be more suited at?
[20:54:17] *** Quits: situ_ (~situ@ip-89-176-145-74.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[20:54:25] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[20:55:24] <Earnestly> Yeah, but this isn't a problem for the shell per-se, it's just that there isn't really any good tooling for handling timestamps like this.  find and co. only have 24 hour resolutions, there's no posix 'stat' command, they're all different, etc.  Bash has -nt and -ot for doing this manually, etc.
[20:55:46] <Earnestly> I think my solution is "elegant" in the sense of what it's doing with primatives, but it's not exactly pretty
[20:56:19] <Earnestly> TheSilentLink: The python solution will end up resembling the bash version using loops and nt/ot just the same, but might look more pleasing
[20:57:11] *** Joins: almostdvs (~cody@38.140.123.98)
[20:57:35] <Earnestly> TheSilentLink: I suppose if you want all but the latest two files you'd use .. | head -zn -2 | ... instead of tail
[20:58:05] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[20:59:42] <TheSilentLink> so what would the full command be? find ... -type f -printf '%T@/%p\0' | sort -t / -k1,1 -nz | head -zn 2 | xargs -0 echo
[21:00:11] <kurahaupo_> perl -MFile::Find -e 'find { want=sub{ push @files, [$_, stat _] if -f $_ } },@ARGV; @files = map { $_->[0] } sort { $a->[10] <=> $b->[10] }@files; splice @files, -2; unlink @files;'
[21:00:30] <Earnestly> TheSilentLink: find ... -type f -printf '%T@/%p\0' | sort -t / -k1,1 -nz | cut -zd / -f2- | head -zn 2 | xargs -0 rm
[21:00:44] <Earnestly> I think that's elegant as fuck, but, I can understand why it might be weird
[21:01:06] <Earnestly> Truely, it should have to be this ridiculous
[21:01:09] <Earnestly> shouldn't*
[21:01:19] <kurahaupo_> Earnestly: the -t / -k1,1 is redundant
[21:01:31] <TheSilentLink> this lists the two oldest files right?
[21:01:35] *** Joins: tmm88 (~tmm88@bl22-240-102.dsl.telepac.pt)
[21:01:42] <Earnestly> TheSilentLink: -n -2 (for head)
[21:01:45] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 256 seconds)
[21:01:54] <Earnestly> TheSilentLink: Change xargs -0 rm to xargs -0 printf %s\\n and see
[21:02:27] <Earnestly> kurahaupo_: Why do you think so?  Just due to alphanumness of leading numbers
[21:02:44] <Earnestly> So even if it includes comparisons to rest of bytes, it wouldn't matter, like ISO8601 dates?
[21:03:06] <kurahaupo_> correct
[21:03:11] <Earnestly> That's fair point
[21:05:55] *** Quits: maryo (~Maryo@user/maryo) (Ping timeout: 256 seconds)
[21:11:37] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[21:11:49] *** Joins: sinaowolabi__ (~SinaOwola@102.134.114.1)
[21:15:10] <emanuele6> Earnestly: actually you can write pretty much the same code in python
[21:15:40] <emanuele6> for f in list(sorted(filter(os.path.isfile, os.listdir()), key=lambda f: os.stat(f).st_mtime))[:-]: os.unlink(f)
[21:15:44] <emanuele6> something like that
[21:16:37] <emanuele6> oops, i meant [:-2]
[21:17:06] *** Joins: stonkey (~stonkey@user/stonkey)
[21:17:17] *** Quits: saki (~saki@gateway/tor-sasl/saki) (Remote host closed the connection)
[21:17:30] *** Joins: saki (~saki@gateway/tor-sasl/saki)
[21:17:46] *** Joins: ou-tis (~user@2a02:587:3443:97d:48db:f2e0:ac28:27f3)
[21:19:25] *** Joins: kyle[m] (~kylematri@2001:470:69fc:105::1:73e8)
[21:20:04] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[21:21:35] <Earnestly> emanuele6: That is basically the bash version, just being clever with lambda instead of loop :p
[21:21:57] <Earnestly> But yeah, it is nice
[21:22:22] *** Joins: Kruppt (~Kruppt@50-111-48-241.drhm.nc.frontiernet.net)
[21:22:26] <Earnestly> Though I do like clear, verbose/wordy code when it's meant to be proceedural.  Everything with clear name and purpose
[21:22:58] <emanuele6> well, it's more like the find -type f | sort | while read -r; do unlink "$REPLY"; done  solution in my opinion
[21:23:05] <Earnestly> emanuele6: Guy who programmed for Adobe photoshop made this comment, code became much clearer when lifting lambdas (C++) into named functions
[21:23:28] <Earnestly> emanuele6: I'll find it
[21:23:59] <emanuele6> functional programming in python looks very verbose, in other languages like D it looks much more clean
[21:24:00] <Earnestly> emanuele6: This and part2 of it: https://www.youtube.com/watch?v=IzNtM038JuI&list=PLHxtyCq_WDLXFAEA-lYoRNQIezL_vaSX-&index=9
[21:24:27] <Earnestly> emanuele6: (I'm weird, I don't call anything functional if it isn't pure.  function + impure = proceedural to me)
[21:26:17] *** Quits: ouestbillie (~gallup@185.213.154.231) (Ping timeout: 240 seconds)
[21:27:03] *** Joins: drd (~drd@2001:b07:6468:1782:1e9c:163f:3faa:8058)
[21:28:20] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[21:33:22] *** Quits: bakerst (bakerst@libera/staff/bakerst) (Remote host closed the connection)
[21:34:03] *** Quits: dreamon (~dreamon@p57a4c923.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:35:25] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.4)
[21:42:16] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[21:43:28] *** Quits: magla (~gelignite@55d42e32.access.ecotel.net) (Read error: Connection reset by peer)
[21:43:39] *** Joins: magla (~gelignite@55d42e32.access.ecotel.net)
[21:45:17] *** Joins: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c)
[21:45:56] *** Joins: bakerst (bakerst@libera/staff/bakerst)
[21:45:58] *** Joins: dreamon (~dreamon@p54b1472c.dip0.t-ipconnect.de)
[21:46:39] *** Joins: hlauk (~hlauk@176.33.108.116)
[21:48:38] *** Joins: WinterStar (~IceLight@user/icelight)
[21:49:41] *** Joins: yustin (~yustin@user/yustin)
[21:58:57] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 240 seconds)
[22:00:28] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[22:01:02] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[22:01:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[22:02:18] *** Joins: bl4ackpajamas[m] (~bl4ackpaj@2001:470:69fc:105::1:73f4)
[22:02:23] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:03:06] *** Joins: karakedi (~eAC53C340@user/karakedi)
[22:05:53] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[22:06:59] *** Joins: bluedust_ (~bluedust@103.161.144.28)
[22:07:08] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:07:27] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:07:30] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[22:07:37] *** Quits: bluedust (~bluedust@103.160.194.145) (Ping timeout: 240 seconds)
[22:07:48] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:07:50] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:08:08] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[22:09:08] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 250 seconds)
[22:12:35] *** Quits: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[22:13:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.3)
[22:14:51] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[22:15:46] *** Joins: crashrep (~crashrep@user/crashrep)
[22:16:04] *** Quits: tmm88 (~tmm88@bl22-240-102.dsl.telepac.pt) (Ping timeout: 250 seconds)
[22:16:12] *** Joins: larryv (~larryv@zsh/patchmanager/larryv)
[22:19:11] *** Joins: Blackpajamas (~Srain@gateway/vpn/pia/blackpajamas)
[22:20:24] *** Quits: myrrh (~markus@user/poet) (Ping timeout: 250 seconds)
[22:24:30] *** Joins: mixfix41 (~homefame@user/mixfix41)
[22:27:36] *** Quits: Blackpajamas (~Srain@gateway/vpn/pia/blackpajamas) (Remote host closed the connection)
[22:29:17] *** Quits: ou-tis (~user@2a02:587:3443:97d:48db:f2e0:ac28:27f3) (Ping timeout: 240 seconds)
[22:31:40] *** Quits: hlauk (~hlauk@176.33.108.116) (Quit: Leaving)
[22:38:34] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[22:44:43] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:49:41] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:50:41] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[22:50:56] <welder> Is it a proper place to ask about sed? How does '$a\' work so that i magically adds newline to a file but only if there is no newline right now?
[22:51:32] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:51:50] <larryv> well there's #sed
[22:53:27] <emanuele6> `$' is addresses the last line, `a' "append" is the command that prints text after the current line
[22:54:17] <emanuele6> that script will "print an empty line after the current line" only for the last line
[22:55:58] <emanuele6> well, '$a\' no, because you have not actually added the newline
[22:56:10] *** Joins: clime (~clime@78-80-113-95.customers.tmcz.cz)
[22:56:22] <emanuele6> if you had something like '$a\'$'\n' then yes
[22:56:59] *** Quits: sinaowolabi__ (~SinaOwola@102.134.114.1) (Ping timeout: 256 seconds)
[22:58:39] *** Joins: almostdvs (~cody@38.140.123.98)
[23:00:30] <geirha> it relies on undefined behavior
[23:01:00] *** Joins: adac (~adac@static.153.233.47.78.clients.your-server.de)
[23:01:27] <emanuele6> geirha: '$a\'$'\n' ?
[23:01:58] <geirha> $a\ with nothing else, at least
[23:02:06] *** Quits: n4dir (~user@i5E86C596.versanet.de) (Remote host closed the connection)
[23:02:18] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 276 seconds)
[23:02:30] <emanuele6> i know  `$a\' is undefined behaviour, but i also assumed it worked since welder mentioned it
[23:02:50] <emanuele6> but then i tried it in GNU sed and BSD sed and i saw that it doesn't actually work
[23:03:01] *** Quits: almostdvs (~cody@38.140.123.98) (Ping timeout: 256 seconds)
[23:03:26] <welder> yes it works i tested it (with GNU sed is that matters)
[23:03:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:03:48] <emanuele6> it does not work for me.
[23:03:56] *** Quits: MercilessDeth (~brad@136.49.59.177) (Quit: Konversation terminated!)
[23:04:02] <geirha> Right, but BSD sed will not add a missing, trailing newline
[23:04:37] <geirha> $'$a\\\n\n'  will add the trailing newline with BSD, but adds two with GNU
[23:04:47] <welder> echo -n aa > test && wc -c test && sed -i '$a\' test && wc -c test
[23:04:52] <welder> prints 2 then 3
[23:04:52] <emanuele6> it doesn't work for GNU sed either at least on my PC with GNU sed 4.8.
[23:04:58] <geirha> I'd use awk or ed instead
[23:05:12] <welder> mine is 4.7
[23:05:14] <welder> huh
[23:05:15] <emanuele6> # echo hi | sed '$a\'; echo x
[23:05:17] <shbot> emanuele6: hi
[23:05:17] <shbot> emanuele6: x
[23:05:25] <emanuele6> it doesn't work
[23:05:28] <emanuele6> # echo hi | sed '$a\'$'\n'; echo x
[23:05:29] <shbot> emanuele6: hi
[23:05:29] <shbot> emanuele6:
[23:05:29] <shbot> emanuele6: x
[23:05:41] <emanuele6> you need to enter the newline
[23:06:10] <emanuele6> # sed --version | sed 1q
[23:06:12] <shbot> emanuele6: sed (GNU sed) 4.4
[23:06:30] <emanuele6> shbot has GNU sed 4.4 and '$a\' doesn't add anything.
[23:07:20] <geirha> # printf foo | sed '$a\' | od -An -c
[23:07:21] <shbot> geirha:    f   o   o  \n
[23:07:33] <emanuele6> oh
[23:07:34] <welder> i checked 4.7 and 4.8, it adds the newline
[23:07:35] <emanuele6> that
[23:07:56] <emanuele6> i misunderstood
[23:08:16] <emanuele6> yeah, there is no way that is defined
[23:09:03] *** Joins: MercilessDeth (~brad@136.49.59.177)
[23:09:32] <geirha> http://ix.io/3Niv
[23:11:20] <geirha> # for awk in mawk nawk gawk ; do printf %s "$awk" | "$awk" 1 | od -An -c ; done
[23:11:22] <shbot> geirha:    m   a   w   k  \n
[23:11:22] <shbot> geirha:    n   a   w   k  \n
[23:11:22] <shbot> geirha:    g   a   w   k  \n
[23:11:26] <timm> \msg greybot
[23:11:32] <timm> oops
[23:11:32] *** Joins: andres_ (~andres@2800:484:687:c3c9:3b20:7c76:baeb:c498)
[23:13:16] <emanuele6> line=; while IFS= read -r line; do :; done < file; [ "$line" ] && printf '\n' >> file
[23:13:20] <emanuele6> you could use something like that ^
[23:14:37] *** Quits: nickdiaz1wag209 (~bjpenn_@98.42.87.100) (Ping timeout: 240 seconds)
[23:14:39] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[23:15:04] *** andres_ is now known as andpg
[23:15:04] <emanuele6> or   printf '\n' >> file; printf '%s\n' '$d' w q | ed -s file
[23:15:25] <geirha> if tail -c1 | read -r ; then
[23:15:37] <geirha> err  if ! tail -c1 | read -r ; then
[23:16:17] *** Quits: crashrep (~crashrep@user/crashrep) (Read error: Connection reset by peer)
[23:16:39] *** Joins: crashrep (~crashrep@user/crashrep)
[23:16:42] <emanuele6> err, the last one is wrong
[23:17:05] *** Joins: armands (~armands@46.109.8.165)
[23:19:43] <emanuele6> it should be:
[23:19:53] *** Joins: gamara (~gamara@cpe9050cade20e3-cm9050cade20e0.cpe.net.cable.rogers.com)
[23:19:54] <emanuele6>    printf '\n' >> file; printf '%s\n' '$g/^$/d' w q | ed -s file
[23:20:18] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[23:23:04] *** Quits: greknod282 (~grek@120.88.171.98) (Quit: -)
[23:23:34] *** Joins: greknod282 (~grek@120.88.171.98)
[23:26:44] <emanuele6> if ! tail -c 1 file | read -r; then print '\n' >> file; fi, yes
[23:26:47] <emanuele6> that is neat
[23:27:52] *** Quits: kr1x (~kr1x@170.249.0.122) (Remote host closed the connection)
[23:33:30] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[23:35:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[23:36:49] *** Joins: kexec (~kexec@user/kexec)
[23:41:39] *** Joins: stealth[] (~stealth]@2001:9e8:36ea:6c00:fd84:9d19:d888:fc20)
[23:44:23] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[23:56:30] *** Quits: rgrinberg (~textual@2806:101e:7:2b:c529:c1df:ee97:1d4c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:56:39] *** Joins: Betal (~Betal@user/betal)
[23:57:12] *** Joins: jkwnki (~jkwnki@p4fedb70b.dip0.t-ipconnect.de)
[23:58:31] *** Joins: Jad (~Nashmi@user/jad)
[23:58:57] *** Quits: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt) (Ping timeout: 240 seconds)
[23:59:53] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
