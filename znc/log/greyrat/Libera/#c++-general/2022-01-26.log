[00:00:01] <PJBoy> yeah
[00:00:05] <rpav> oh wait, it's not partially specializing _using_
[00:00:21] <PJBoy> which I still don't think is possible
[00:00:36] <rpav> i thought in like 20
[00:01:00] <PJBoy> seems not
[00:01:09] <rpav> 23? :(
[00:01:10] <PJBoy> if cppreference is to be believed
[00:01:20] <rpav> no using partial is just bizarre
[00:01:30] <PJBoy> nothing for using in C++23
[00:01:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::8f08)
[00:01:54] *** Quits: Kerr17 (~Kerr@2601:602:ce01:1f0:b2e1:d9dd:d9c3:4489) (Quit: Client closed)
[00:02:39] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:e90c:8a2e:7515:668a) (Quit: Client closed)
[00:02:47] <PJBoy> don't see any proposals for it either
[00:02:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[00:03:48] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:e90c:8a2e:7515:668a)
[00:04:02] *** Quits: Dweezahr (~Dweezahr@109-175-210-87.ftth.glasoperator.nl) (Quit: Client closed)
[00:04:06] <Alipha> in c++20, you'd just use requires: https://wandbox.org/permlink/qdzb1Xj2BZmPho7b
[00:04:43] *** Quits: deepy (deepy@user/deepy) (Read error: Connection reset by peer)
[00:05:01] <PJBoy> C++20 man
[00:05:08] <PJBoy> how did we ever live without it
[00:06:09] *** Joins: deepy (deepy@user/deepy)
[00:06:22] <PJBoy> meanwhile C++23 has just been irritating me :(
[00:06:25] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:06:25] <rpav> Alipha: slick
[00:06:46] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[00:09:05] <PJBoy> actually the C++23 spanstream is good
[00:09:19] <PJBoy> stacktrace is ok
[00:10:15] <PJBoy> zip is great, albeit at the cost of several pair/tuple modifications
[00:12:08] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[00:14:14] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 268 seconds)
[00:16:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[00:22:28] <ashafq> I was looking at this http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1386r2.pdf
[00:22:45] <ashafq> So, will this go into C++23?
[00:23:22] *** Quits: magla (~gelignite@55d4ee32.access.ecotel.net) (Quit: Stay safe!)
[00:26:19] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:29:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[00:30:09] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Read error: No route to host)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:36:36] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:41:01] *** Quits: chozorho (~chozorho@2601:146:300:c30::8f08) (Ping timeout: 240 seconds)
[00:41:41] *** Joins: calamity_jane (~calamity_@2a01cb040075f9002975a89ee613e667.ipv6.abo.wanadoo.fr)
[00:43:06] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[00:43:20] <PJBoy> audio API
[00:43:27] <PJBoy> [p1386]
[00:43:28] <npaperbot> P1386R2: [SG13, Library Evolution] A Standard Audio API for C++: Motivation, Scope, and Basic Design <https://wg21.link/p1386r2> (by Guy Somberg, Guy Davidson, Timur Doumler) (2019-06-18) (Related: https://wg21.link/p1386r2/github)
[00:43:55] <PJBoy> it's not impossible
[00:44:16] <PJBoy> but no progress since 2019, the year it was first written?
[00:44:24] <PJBoy> that's usually the sign of someone's motivation disappearing
[00:44:42] <PJBoy> or covid related death
[00:45:16] *** Quits: calamity_jane (~calamity_@2a01cb040075f9002975a89ee613e667.ipv6.abo.wanadoo.fr) (Client Quit)
[00:45:31] *** Joins: calamity_jane (~calamity_@2a01cb040075f9002975a89ee613e667.ipv6.abo.wanadoo.fr)
[00:45:33] *** Quits: calamity_jane (~calamity_@2a01cb040075f9002975a89ee613e667.ipv6.abo.wanadoo.fr) (Client Quit)
[00:46:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4cc5:9f8f:f25b:50c6) (Ping timeout: 240 seconds)
[00:46:40] <kalven> guy davidson.. I think he was involved with some graphics proposal as well
[00:47:35] <PJBoy> npaperbot confirms
[00:47:35] <npaperbot> Sorry, I didn't understand that.
[00:47:39] <PJBoy> <_<
[00:48:56] <LordKalma> of course that would be by Timur Doumler
[00:49:01] <LordKalma> Timur is from JUCE
[00:49:14] <PJBoy> who's JUCE?
[00:49:35] <LordKalma> the framework?
[00:49:48] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:49:57] * PJBoy looks up
[00:50:25] <LordKalma> anyway, every time he talks at conferences it's about audio on c++
[00:50:38] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f86d:882c:68b2:7048)
[00:50:41] <PJBoy> ahh that's where you know 'em from
[00:50:51] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:50:54] <kalven> not a huge fan of trying to shove brand new libs into the standard
[00:51:03] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[00:51:05] <LordKalma> Somberg and Davidson I didn't know
[00:51:08] <PJBoy> > it was announced that JUCE had been sold by ROLI to the audio technology company PACE
[00:51:14] <PJBoy> shout outs to four letter acronyms
[00:51:52] <LordKalma> http://miniaud.io/ // honestly good, cross platform
[00:51:53] <PJBoy> it looks like a Qt competitor
[00:51:56] <LordKalma> C, but you can wrap it easily
[00:52:02] <PJBoy> JUCE that is
[00:52:11] <LordKalma> yes, more limited in scope, of course
[00:52:19] <LordKalma> really geared toward VST development
[00:53:24] <PJBoy> and it's ISC licensed
[00:53:29] <PJBoy> except for where it's GPL licensed
[00:53:45] <LordKalma> the free version has a non-skippable splash screen
[00:54:29] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[00:54:37] <PJBoy> hey hey they even reference JUCE in the audio proposal
[00:54:50] <LordKalma> to no-ones surprise
[00:55:12] <LordKalma> not even .net has a x-platform audio standard library
[00:55:28] <LordKalma> and .net has infinite scope with their standard library
[00:55:37] <LordKalma> although on .net framework it was larger, of course
[00:56:42] <LordKalma> The miniaudio library is living proof its just couple hundred lines to make an audio lib
[00:56:58] <LordKalma> The c++ would make it overly complicated and bad, I bad
[00:56:59] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[00:57:12] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 250 seconds)
[00:58:31] <kalven> they should get their library ready, put it on conan or whatever and see if anyone use it
[00:58:45] <LordKalma> the c++ standard would find 300 templating opportunities, overgeneralizations that would not acknowledge the "real" OS APIs and etc
[00:58:47] <kalven> that should be a prerequisite for starting any conversations about getting a library into the standard
[00:58:53] <LordKalma> hahaha
[00:59:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[00:59:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:00:03] <PJBoy> make something completely unnecessary to add to the standard library
[01:00:10] <PJBoy> and only then will it be viable
[01:00:23] <PJBoy> I like that approach
[01:00:31] <PJBoy> like with fmtlib
[01:00:32] <kalven> "An oft-asked question is why we don't propose this library for Boost, instead of proposing it for the C++ standard library. The short answer is that we are indeed planning to propose our reference implementation for Boost."
[01:00:37] <kalven> narrator: that didn't happen
[01:01:15] <LordKalma> hahah
[01:01:31] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[01:02:04] <LordKalma> boost libraries tend to generally be computer scientist wet dreams
[01:02:24] <LordKalma> lots of abstract stuff, little in terms of application libraries
[01:02:28] <kalven> But the good thing about getting stuff into the standard is that you can bypass all those pesky users.. with their annoying demands. You just have to get it past a bunch of dudes in the committee who aren't domain experts
[01:02:33] <LordKalma> like c++ standard itself
[01:02:41] <LordKalma> yeah, I was just thinking that
[01:02:53] <LordKalma> they didn't get it into boost because the actual peer reviewing of code :p
[01:03:23] <LordKalma> I would be more afraid of boost peer reviewing than standard bureaucracy
[01:03:47] <kalven> "Because the API presented in this paper is a low-level audio device access API, it is targeted at two broad categories of people: audio professionals and people learning low-level audio programming."
[01:03:55] <LordKalma> that said, some fuckers are making boost:: libraries that aren't actual boost libraries
[01:04:04] <kalven> you can probably count on one hand the number of "audio professionals" who would use this rather than keep using whatever they are currently using
[01:04:35] <LordKalma> yeah, like, fuck that shit
[01:05:29] <artok> well, Korg and Arturia are using it
[01:05:38] <kalven> using what?
[01:05:39] <LordKalma> I should really get aether_dsp going :)
[01:05:43] <artok> JUCE stuff =)
[01:06:00] <kalven> ah, I was talking about this standards proposal.
[01:06:10] <LordKalma> good for them. but gcc and llvm devs shouldn't be bothered with implementing JUCE stuff :p
[01:06:17] <artok> for "audio professionals" that is
[01:06:43] <kalven> Same problem with the misguided 2d proposals.. no actual target groups
[01:06:51] <artok> but sure, don't know why there would be those in standard lib
[01:06:53] <LordKalma> the problem with c++ is that it has too much vertical scope
[01:07:10] <PJBoy> I still like the idea of 2d graphics in stdlib
[01:07:20] <artok> embedded things are more important imo
[01:07:26] <PJBoy> valid criticism about the proposals notwithstanding
[01:07:35] <LordKalma> when i imagine a .net library to play audio I imagine like an API to play sound files for example
[01:07:41] <LordKalma> play("error.wav")
[01:07:55] <LordKalma> where with c++ you see that it would be a raw buffers API
[01:07:55] <PJBoy> for merely playing audio there's irrklang
[01:07:58] <PJBoy> which is top tier
[01:08:05] <PJBoy> one of the best libraries I've ever used
[01:08:06] <LordKalma> not the point
[01:08:08] * artok is just updating arturia plugins...
[01:08:28] <PJBoy> I just wanted to mention it
[01:08:31] <PJBoy> I love that library
[01:08:35] <LordKalma> the point is that with c++ you span vertically from raw buffers to playing audio files
[01:09:08] <PJBoy> it has .net bindings too haha
[01:09:12] <kalven> PJBoy: what would you be looking for in a 2d lib in the standard?
[01:09:25] <ashafq> looks like I missed some really interesting discussion 😊
[01:09:35] <LordKalma> 2D lib in the standard is also something that I'm not for also
[01:09:40] <LordKalma> like, what would it mean?
[01:09:47] <LordKalma> what would be its scope?
[01:09:49] <PJBoy> something that lets be blip pixels onto a 2d buffer and render it to the screen or to image files
[01:09:56] <ashafq> LordKalma: sound(440,1); is what I like.
[01:10:05] <PJBoy> possibly with some support for geometry and matrix transformations
[01:10:21] <LordKalma> ashafq, did you mean 432? ;)
[01:10:22] <LordKalma> hahah jk
[01:10:23] <kalven> PJBoy: so like sdl? or do you want a canvas-style api?
[01:10:35] <ashafq> LordKalma: Can you hear the difference? 😉
[01:10:40] <PJBoy> like the graphics subset of SDL, yeah
[01:11:00] <LordKalma> ashafq, https://www.youtube.com/watch?v=EKTZ151yLnk
[01:11:07] <PJBoy> ideally I'd want something I can render into a canvas area, if I'm understanding the term right
[01:11:13] <PJBoy> but that would need all sorts of OS integration
[01:11:52] <ashafq> LordKalma: nice 😊
[01:11:54] <PJBoy> like if I wanted to write an emulator, and I wanted to draw the game's screen in some area of the GUI window, that's what I assume we mean by canvas
[01:12:10] <PJBoy> but that means understanding windows' message queues and beginpaint/endpaint etc.
[01:12:22] <PJBoy> so SDL is what I'd expect from stdlib
[01:12:58] <kalven> PJBoy: what I mean with canvas is having slightly "higher level" functionality like drawing lines, filling shapes etc.. a step up from just giving raw pixel access
[01:13:00] <ashafq> SDL is good with graphics, but the audio stack has a lot of additional latency.
[01:13:07] <PJBoy> ah right
[01:13:13] <ashafq> I guess it can't be helped to put a mixer on top of another mixer.
[01:13:18] <PJBoy> I'd like the geometries, but not essential
[01:13:22] <PJBoy> could be added later
[01:13:55] <PJBoy> I'd also like mdarray so I can have my 2d array data structure
[01:14:28] <ashafq> PJBoy: I usually create a Matrix class and inherit from std::vector
[01:14:45] <LordKalma> that is a datastructure I want
[01:14:47] <ashafq> and overload operator() to deal with row, cols, etc.
[01:14:51] <LordKalma> a decent mdarray like numpy
[01:15:01] <PJBoy> inherit?
[01:15:12] <ashafq> PJBoy: sorry, I mean compose
[01:15:13] <cbreak> eigen has tensors (maybe not in core? not sure)
[01:15:18] <PJBoy> that's more like it
[01:15:22] <PJBoy> I do that too
[01:15:29] <PJBoy> except I don't overload operator()
[01:15:38] <cbreak> operator() is nice.
[01:15:43] <ashafq> PJBoy: it helps with ndarray case
[01:15:46] <LordKalma> for aether_sdr I'm still unsure of re-writing (copying from permissive licenses) all that BS
[01:15:51] <LordKalma> or have 500 dependencies
[01:15:51] <PJBoy> it's good for mdarray, sure
[01:15:56] <PJBoy> for 2d specifically, eh
[01:15:59] <kalven> PJBoy: but anyhoo.. getting a display with that kind of pixel access is just a few lines with SDL. there are no doubt other libs. Back in the day people used stuff like PTC or pixeltoaster
[01:16:00] <ashafq> PJBoy: you can do like: mat(i, j, k)
[01:16:15] <PJBoy> yeah but setting up SDL is effort
[01:16:17] <cbreak> https://eigen.tuxfamily.org/dox/unsupported/eigen_tensors.html ... it's unsupported :(
[01:16:19] <artok> isn't it heresy not to use eigen ? =D
[01:16:32] <PJBoy> some simple 2d graphics would be good for teaching C++
[01:16:38] <ashafq> PJBoy: but I just found out about C++ after 15 years of C, so I can get carried away 😊
[01:16:38] <cbreak> but the last time I checked (years ago) it was used in Tensorflow
[01:16:47] <kalven> PJBoy: right, that's the real crux.. isn't it? it's not that the libs aren't there.. it's that it's more work than just #include <whatever>
[01:16:50] <PJBoy> SDL also has the issue of interfering with declaring main
[01:17:01] <PJBoy> yeah indeed
[01:17:05] <PJBoy> that goes for everything in stdlib
[01:17:06] <kalven> the `main` thing is optional
[01:17:11] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:17:13] <PJBoy> regex, hash maps
[01:17:36] <kalven> so, imnsho, that's the real problem that needs to be worked on.. not showing half-baked libs into the standard where we end up with the crap forever
[01:17:54] <cbreak> kalven: thinking of something specific? like std::list?
[01:18:28] <PJBoy> I definitely agree that we don't want half baked libs
[01:18:36] <kalven> cbreak: regarding what?
[01:18:43] <PJBoy> and the 2d graphics proposal based on cairo definitely had that half bakedness going on
[01:18:47] <cbreak> half-baked crap we're stuck with
[01:19:07] <LordKalma> fuck this ecosystem
[01:19:13] *** Joins: markong (~kvirc@213.146.188.203)
[01:19:17] <LordKalma> once again, everything sucks
[01:19:20] <PJBoy> hahaha
[01:19:22] <PJBoy> hey man
[01:19:24] <PJBoy> only stdlib sucks
[01:19:25] <LordKalma> it's a corollary of c++
[01:19:32] <cbreak> if std::list was intrinsic, it'd be at least useful for some usecases
[01:19:34] <LordKalma> no. every. thing.
[01:19:37] <ashafq> LordKalma: define "sucks"
[01:19:39] <PJBoy> and build systems
[01:19:47] <LordKalma> ashafq, you mama?
[01:19:53] <LordKalma> sorry
[01:19:54] <PJBoy> a woooooooow
[01:20:36] <PJBoy> yeah idk
[01:20:46] <PJBoy> when it comes to bring in big libraries into stdlib
[01:20:46] <ashafq> Well, it's a matter of threshold.
[01:20:54] <kalven> cbreak: I don't have any *major* issues with what we currently have, but I'm 100% convinced that 2d and audio, if added to the standard, would end up pretty crap.
[01:21:07] <LordKalma> I'm pretty sure they'd be useless
[01:21:11] <PJBoy> they either need to not be in stdlib like regex/fmtlib/filesystem
[01:21:27] <LordKalma> they couldn't even get asio and fmtlib right, ffs
[01:21:36] <LordKalma> WHY IS THE STD VERSION A SUBSET OF THE ACTUAL THING?
[01:21:44] <cbreak> I'm not convinced that 2d and audio are fundamental enough to be in an stdlib
[01:21:46] <PJBoy> because it's easier to add stuff than take away
[01:21:55] <PJBoy> much easier
[01:21:57] <LordKalma> iirc, the standard asio doesn't support serial, for example
[01:22:03] <kalven> but you can also see some of the kerfuffle on regex and how its implementations are pretty crappy compared to the best out there, but they won't be improved because it'd break ABI
[01:22:16] <cbreak> before audio, we need a more flexible, type safe data container
[01:22:31] <cbreak> ... something like a tensor
[01:22:39] <cbreak> (to store samples in)
[01:22:41] <kalven> we wouldn't be having any of these discussions on what goes into the standard or not if there was something like cargo (and it was ubiquitous)
[01:22:45] <cbreak> or maybe a ring buffer to receive them in
[01:22:52] <artok> audio needs circular buff...
[01:22:57] <cbreak> kalven: heh, going full cargo cult programming? :)
[01:23:00] * artok is slow
[01:23:03] <PJBoy> I generally feel like stdlib isn't really supposed to be the best at any particular thing
[01:23:06] <LordKalma> everybody who uses numpy knows exactly want API they want for ndarrays
[01:23:20] <PJBoy> it's just supposed to give you a quick boost to get simple things done
[01:23:33] <LordKalma> boost::ring_buffer is half decent. you have to deal with concurrency yourself tho
[01:23:40] <PJBoy> with emphasis on correctness rather than speed or functionality
[01:23:48] <cbreak> LordKalma: numpy isn't bad, but it is also not that nice sometimes...
[01:24:01] <LordKalma> the bad parts of numpy I blame on matlab
[01:24:12] <cbreak> ... it's not that bad...
[01:24:18] <LordKalma> and refuse to acknowledge otherwise
[01:24:32] <kalven> cbreak: it's not specifically about cargo. there are a bunch of other languages with de-facto standard package managers
[01:24:35] <cbreak> PJBoy: a quick boost... I see what you did there :D
[01:24:42] <PJBoy> :D :d
[01:24:43] <ashafq> cbreak: The proposal contained a really good implmentation of std::audio_buffer
[01:25:31] <cbreak> and why is an audio buffer different from an image buffer?
[01:25:36] <cbreak> or a frame buffer? video buffer?
[01:25:41] <ashafq> https://github.com/stdcpp-audio/libstdaudio/blob/master/include/__audio_buffer.h
[01:25:48] <artok> gladly I'm only starting to write basic synth os at the moment, no need for ... oh gosh I need to
[01:25:51] <cbreak> I think the standard should be more fundamental than audio.
[01:26:10] <cbreak> we don't even have a container for Text (i.e. awareness of encoding)
[01:26:15] <ashafq> cbreak: I guess they can be adopted for other types as well..
[01:26:50] <ashafq> cbreak: I really would like an ndarray in stdlib for sure
[01:27:32] <PJBoy> ndarray and a utf class
[01:27:42] <PJBoy> I would agree those should take priority over audio and graphics haha
[01:28:03] <rpav> an array of nondisclosure agreements?
[01:28:12] <PJBoy> it's real hard to nail down what should be in stdlib though
[01:28:22] <PJBoy> given that anything in stdlib is subject to being suboptimal
[01:28:28] <PJBoy> and a maintenance burden for vendors
[01:29:02] <rpav> if only the spec included a reference implementation
[01:29:59] <ville> PJBoy: actual things you need to operate with the system? but that's too low-level in today's market i guess
[01:30:13] <kalven> just slap some electron on it
[01:30:29] <LordKalma> fuck high performance crap I guess
[01:30:36] <cbreak> ville: something better than std::system? :D
[01:30:45] <cbreak> since std::popen is C :(
[01:31:17] <kalven> namespaces in C? what's wack
[01:31:28] <kalven> *that is wack!
[01:31:34] <cbreak> it's a steal
[01:32:02] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:33:24] <LordKalma> don't you ever feel paralyzed by the "every sucks" thing? mayhbe it's my mental health issues, but this is really like.. I don't know where to look, what to do, where to start
[01:33:42] <LordKalma> doesn't help I don't know the language very well, nor application design much less library design
[01:33:53] <rpav> LordKalma: sort everything by the simplest thing you want the most, or something
[01:34:20] <rpav> or, the thing you want the most, that you can actually accomplish, and then pick some small thing to get started, and do that
[01:34:52] <rpav> really that's the easiest way to get anything done, but ime it helps approach the Sea of Suck too
[01:36:02] <LordKalma> perhaps, perhaps
[01:36:02] *** Joins: MatSharrow (~matthew@105.20.9.51.dyn.plus.net)
[01:36:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:37:32] <PJBoy> ville, that's a good sufficient condition
[01:37:44] <PJBoy> yeah I like that
[01:38:08] <kalven> LordKalma: what sucks?
[01:38:31] <LordKalma> just everything in general
[01:38:40] <LordKalma> feels like everything falls short
[01:38:59] <kalven> sounds like someone needs to adjust their expectations!
[01:39:14] <LordKalma> hahah i guess
[01:41:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:40] *** ChanServ sets mode: +v npaperbot
[01:43:02] <rpav> i don't think adjusting your expectations helps too much heh
[01:43:19] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:51:45] *** Quits: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi) (Quit: reboot for UAD-2 update)
[02:01:08] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[02:03:15] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:08:18] *** Joins: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi)
[02:10:35] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[02:20:21] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[02:22:43] <ashafq> What is a general name for mux/demux?
[02:25:05] <artok> data selector ?
[02:25:40] <Shell> I don't think there is one.
[02:25:54] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[02:28:03] *** Quits: proller (~p@2a02:6b8:b081:7202::1:19) (Ping timeout: 268 seconds)
[02:28:11] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[02:28:11] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Client Quit)
[02:29:38] <ville> multiplexer?
[02:30:11] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[02:30:30] *** Joins: proller (~p@80.240.216.69)
[02:30:38] <ville> or you're thinking what's the bit between the mux <-- HERE --> demux?
[02:33:01] <artok> bitween (see what I did there!) is just data stream
[02:33:31] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[02:33:46] <ville> channel, pipe, stream...
[02:34:46] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:34:55] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[02:35:27] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[02:37:47] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:43:19] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[02:45:37] *** Quits: wlperdue (~wlperdue@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[02:45:47] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:47:26] *** Joins: proller (~p@2a02:6b8:b081:6::1:13)
[02:50:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f86d:882c:68b2:7048) (Ping timeout: 240 seconds)
[02:52:11] *** Joins: hexingb (~hexingb@111.32.64.60)
[02:53:30] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:53:33] <artok> who did the tutorial/talk about memory mapped devices with portability between different mcu's ?
[02:58:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:59:28] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:01:14] *** Quits: c4017w (~c4017@199-7-158-225.eng.wind.ca) (Read error: Connection reset by peer)
[03:04:32] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[03:07:18] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:10:09] *** Joins: c4017w (~c4017@199-7-158-225.eng.wind.ca)
[03:17:32] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:18:30] <ashafq> Shel, artok, ville: Thanks, I think I'll go with "data selector"
[03:18:38] <ashafq> that can work with both mux and demux
[03:19:57] *** Quits: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi) (Quit: Lost terminal)
[03:20:07] *** Joins: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi)
[03:25:37] *** Quits: c4017w (~c4017@199-7-158-225.eng.wind.ca) (Ping timeout: 240 seconds)
[03:30:14] *** Joins: c4017w (~c4017@199-7-158-225.eng.wind.ca)
[03:33:53] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[03:35:05] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:36:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:37:48] *** Quits: DSpider (~DSpider@82.79.237.97) (Quit: Leaving)
[03:44:22] *** Quits: Leone (~Leo@157.52.18.77) (Read error: Connection reset by peer)
[03:55:02] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 240 seconds)
[03:55:05] *** Joins: gehn (~gehn@user/gehn)
[03:56:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:01:17] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:02:27] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[04:07:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[04:08:44] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[04:11:17] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 256 seconds)
[04:14:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:14:55] *** Joins: hexingb (~hexingb@36.155.28.143)
[04:18:00] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[04:20:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[04:23:50] *** Joins: noarb (~noarb@user/noarb)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:27:23] <very_sneaky> one of the problems that i guess they're trying to solve by integrating things into the standard is that very few people in the c++ community actually like using third party libs
[04:27:30] <very_sneaky> "it's too hard" is a complaint i've seen a lot
[04:28:01] <very_sneaky> maybe conan/vcpkg will solve that and we'll get a much richer ecosystem of third party libs
[04:33:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[04:33:43] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[04:41:40] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 250 seconds)
[04:42:17] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 240 seconds)
[04:43:27] *** Joins: c4017w_ (~c4017@199-7-158-225.eng.wind.ca)
[04:43:28] *** Joins: hexingb (~hexingb@111.32.64.60)
[04:43:57] *** Quits: c4017w (~c4017@199-7-158-225.eng.wind.ca) (Ping timeout: 240 seconds)
[04:44:48] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:45:29] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[04:45:48] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:45:58] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[04:51:30] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[04:56:31] *** Joins: sixpiece (~brainz3sl@4.182.132.164.lunanode-rdns.com)
[04:56:34] <sixpiece> hello
[04:57:01] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:58:07] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:e90c:8a2e:7515:668a) (Ping timeout: 256 seconds)
[04:59:09] <Alipha> sixpiece: hi
[04:59:46] <sixpiece> hi how are you? I want to build a c++ application that has the benefits of windows to be able to enter data into a mysql database
[05:00:22] <sixpiece> I have mysql workbench but I find that it's annoying to have to for example, enter in several tables and remember the dependencies, etc..
[05:00:28] <sixpiece> or like display results, etc..
[05:01:04] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[05:01:07] <sixpiece> when I type the supplier I don't want to have to find out how I spelled the supplier but just be able to choose from a list, etc..
[05:01:10] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 250 seconds)
[05:01:35] <Alipha> sixpiece: you could make a Microsoft Access application :-)
[05:01:53] *** Joins: cpuid (~cpuid@co5.at)
[05:01:53] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[05:01:53] *** Joins: cpuid (~cpuid@user/cpuid)
[05:02:07] <sixpiece> no thanks, I want to be able to put it online
[05:03:11] <sixpiece> but maybe you are right
[05:03:36] <sixpiece> it's not easier to write a code than to learn access?
[05:05:26] <Alipha> sixpiece: I mean, that's what Access was made for--create simple GUIs to modify databases. I assume you'd be able to hook it up to mysql, but maybe you'd have to use Microsoft SQL
[05:05:28] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[05:05:47] <sixpiece> yes but for example one thing is I have a 1000 pdf files from 1 company
[05:05:53] <sixpiece> that are purchases
[05:05:58] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[05:06:01] <Alipha> But as far as c++, you can download the mysql connector library and people would probably recommend Qt for a GUI
[05:06:08] <sixpiece> I want to be able to have the items purchased be added to inventory
[05:06:39] <sixpiece> ok sounds good I was thinking QT was better than Visual studio
[05:08:14] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[05:08:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:12:57] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[05:13:53] <gehn> you can't really compare Qt to Visual Studio, that doesn't make sense
[05:13:58] <gehn> you could compare QtCreator
[05:14:11] <gehn> or you could compare Qt to Win32
[05:14:33] *** Quits: proller (~p@2a02:6b8:b081:6::1:13) (Ping timeout: 268 seconds)
[05:14:54] <gehn> I suspect you were perhaps intending to compare Qt to Win32 API, because they both allow writing GUI applications
[05:15:13] <gehn> if you only intend to support Windows for your GUI then Win32 API might be fine for you
[05:15:21] <Alipha> Personally, I'd go with c# than c++
[05:15:39] <gehn> personally I'd go with Electron for a GUI
[05:15:54] <Alipha> Here I am, recommending everything but c++ in a c++ channel :-)
[05:16:04] <hnOsmium0001[m]> <raged crowd incoming>
[05:16:16] <gehn> well, for a GUI, frankly, C++ is a bit shit
[05:16:33] <gehn> unless you have one or two possibly extremely specific use cases
[05:16:47] <gehn> such as a 3D graphics engine (read: video game)
[05:17:21] <gehn> or as noteor some need for your GUI to directly integrate with and directly access some underlying hardware feature, maybe like if you're writing a crypto miner or sth
[05:17:28] <hnOsmium0001[m]> I would argue a game renderer does not count as GUI, and, in fact, writing GUI with C++ in <insert engine name> is also pain
[05:17:55] <gehn> game engine is very much GUI, but perhaps not "as much" as a forms style application
[05:18:27] <gehn> you need to open a window and instantiate a render context, all of which is done with your OS gui stuff, typically win32 WGL calls or xlib etc
[05:18:43] <gehn> also event handling like dealing with mouse clicks etc falls under that "GUI programming" category for game dev
[05:18:59] <gehn> and then, furthermore, you usually end up needing to write your own custom GUI in game probably using OpenGL
[05:19:05] <gehn> you can fudge it with imgui for a while at first
[05:20:17] <gehn> otherwise, most cases I can imagine that could want some underlying hardware integration can be accomodated with some decoupled non C++ that just calls out to a command line program
[05:20:35] <gehn> be that by running said command line program directly, or by running a server or daemon and the GUI just acts as a client which connects
[05:22:22] <sixpiece> interesting
[05:22:56] <sixpiece> like how do I start off?
[05:23:54] <sixpiece> what is c make?
[05:24:01] <sixpiece> I started something with qt right now
[05:24:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:28:06] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:41:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:40] *** ChanServ sets mode: +v npaperbot
[05:42:15] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[05:43:05] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[05:46:09] <very_sneaky> I think python would be a better tool for this
[05:46:44] <very_sneaky> you could use PyQt for the gui, but it has a bunch of facilities that make dealing with sql databases easier - sqlalchemy for one
[05:47:11] <sixpiece> but it's going to be very new to me?
[05:48:26] <very_sneaky> yeah, maybe. most people I know who are comfortable with C++ have picked python up pretty quickly, but ymmv.
[05:49:03] <sixpiece> ok so will I be able to make a gui if I download this?
[05:49:12] <very_sneaky> the development time even for experienced c++ devs for this kind of application seem to have a much longer turnaround, especially if something quick and dirty is sufficient for your needs
[05:49:30] <sixpiece> I think I should draw the program I want
[05:49:58] <very_sneaky> https://pythonpyqt.com/
[05:50:19] <sixpiece> like for example I want a screen called data add
[05:50:30] <sixpiece> data add will show me a preview of a pdf file
[05:50:45] <very_sneaky> having said that, you can do it all in c++ if you're determined to - just find the right adapter library to communicate with your database and compose your manual sql statements
[05:50:59] <sixpiece> it will allow me to link the filename to a proper description
[05:51:04] <sixpiece> and an order
[05:51:08] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:51:27] <sixpiece> I can sort of zoom in on the pdf and see what the order number is, who the supplier was, what the date of the transaction was ,etc..
[05:51:58] <very_sneaky> yep, wireframing the application is probably a good idea
[05:52:29] <sixpiece> then I enter it in the databases according, when I choose the supplier I pick from a list, when I pick from the list of items I can add new and more functionalities for example once supplier is selected than it will only show me items from that supplier
[05:52:40] <very_sneaky> if you decide to go with c++, qt comes with some database drivers that could be useful: https://doc.qt.io/qt-6/sql-driver.html
[05:53:14] <sixpiece> so for example if Home Depot or Walmart are the supplier fictitious example, 3m products such as tape will be available but a product such as graphic cards will not be available
[05:55:38] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:58:39] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:00:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:01:17] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[06:01:57] *** Quits: syrius (syrius@titan.stormtek.net) (Ping timeout: 240 seconds)
[06:03:33] *** Joins: syrius (syrius@titan.stormtek.net)
[06:04:37] *** Joins: adder`` (~adder@user/adder)
[06:06:15] *** Joins: HvszrStykp (~X@81.171.62.81)
[06:17:01] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:c2b8:b157:be3f:ced2) (Remote host closed the connection)
[06:23:27] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:26:42] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[06:26:43] *** Quits: c4017w_ (~c4017@199-7-158-225.eng.wind.ca) (Ping timeout: 256 seconds)
[06:28:22] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[06:28:28] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[06:28:42] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[06:29:22] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:32:10] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[06:34:05] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[06:34:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 250 seconds)
[06:34:22] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[06:38:57] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[06:41:09] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:45:56] *** Joins: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036)
[06:51:29] *** Quits: vinleod (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:54:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:54:26] *** Quits: hexingb (~hexingb@111.32.64.60) (Read error: Connection reset by peer)
[07:04:03] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[07:08:34] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 250 seconds)
[07:09:12] *** Joins: adeliktas5 (~adeliktas@i59F52EE8.versanet.de)
[07:09:34] *** Joins: hexingb (~hexingb@111.32.64.60)
[07:10:57] *** Quits: adeliktas (~adeliktas@i59F4D5EA.versanet.de) (Ping timeout: 240 seconds)
[07:10:57] *** adeliktas5 is now known as adeliktas
[07:13:09] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[07:16:10] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[07:21:07] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[07:28:09] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:30:14] *** Quits: emerent (~quassel@p200300cd57044376ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:30:25] *** Joins: emerent (~quassel@p200300cd5704433eba27ebfffed28a59.dip0.t-ipconnect.de)
[07:30:37] *** Joins: koolkat332 (~brainz3sl@4.182.132.164.lunanode-rdns.com)
[07:34:08] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[07:34:32] *** Quits: sixpiece (~brainz3sl@4.182.132.164.lunanode-rdns.com) (Ping timeout: 268 seconds)
[07:34:58] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[07:36:23] *** Quits: jsbach (~jsbach@2a01:c22:3536:1400:650b:7ba5:f922:811c) (Ping timeout: 268 seconds)
[07:40:32] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 240 seconds)
[07:41:49] *** Joins: hexingb (~hexingb@180.212.208.172)
[07:44:43] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[07:48:23] *** Joins: jsbach (~jsbach@2a01:c22:acbf:8b00:bd89:3761:c5c8:c5c)
[07:57:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[08:04:43] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:06:18] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[08:07:27] *** vdamewood is now known as Guest2444
[08:07:27] *** Quits: Guest2444 (~vdamewood@fedora/vdamewood) (Killed (lithium.libera.chat (Nickname regained by services)))
[08:07:27] *** vinleod is now known as vdamewood
[08:13:23] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 268 seconds)
[08:22:07] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Ping timeout: 256 seconds)
[08:27:02] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[08:28:02] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[08:29:25] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[08:31:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[08:32:38] *** Quits: jsbach (~jsbach@2a01:c22:acbf:8b00:bd89:3761:c5c8:c5c) (Ping timeout: 250 seconds)
[08:41:37] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[08:45:14] <computerquip> Thoughts on https://github.com/eliaskosunen/scnlib
[08:46:17] *** Joins: jsbach (~jsbach@2a01:c22:b1a3:2100:9ba5:17b3:15df:46fa)
[08:52:09] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[08:58:55] *** Quits: koolkat332 (~brainz3sl@4.182.132.164.lunanode-rdns.com) (Quit: Leaving)
[09:00:11] <InPhase> computerquip: It shows error handling in the docs.  It does not show error recovery...
[09:01:04] <InPhase> The clumsiness of error recovery when mixing parsing and reading is one of the primary reasons for strongly stickig with the pattern of read a line, parse a line, repeat.
[09:01:17] <InPhase> s/stickig/sticking/
[09:03:41] *** Quits: hexingb (~hexingb@180.212.208.172) (Ping timeout: 256 seconds)
[09:03:52] *** Joins: hexingb (~hexingb@2409:8902:7bc5:f651:cdbe:efb8:75d1:cdd4)
[09:07:57] *** Quits: hexingb (~hexingb@2409:8902:7bc5:f651:cdbe:efb8:75d1:cdd4) (Ping timeout: 240 seconds)
[09:09:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:10:46] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[09:12:07] <kalven> computerquip: scan_list looks convenient
[09:14:06] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[09:14:31] *** Joins: HvszrStykp (~X@81.171.62.81)
[09:21:49] *** Quits: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi) (Ping timeout: 256 seconds)
[09:22:49] <computerquip> What are people using as a istream or FILE* alternative now adays
[09:30:17] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[09:33:41] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[09:36:24] *** Joins: hexingb (~hexingb@111.32.64.60)
[09:40:09] <nightstrike> what is the meaning of the term "Legacy" here? https://en.cppreference.com/w/cpp/named_req/Iterator
[09:40:25] *** Joins: RazielZ (~Raziel@user/raziel)
[09:40:35] <nightstrike> computerquip: I use ifstream.. is that not good?
[09:40:42] <leduyquang753> C++2020 introduced new iterators in terms of concepts instead.
[09:41:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:40] *** ChanServ sets mode: +v npaperbot
[09:41:49] <computerquip> I wouldn't say it's bad. Community in general seems to be very much on the "iostreams bad" train.
[09:42:50] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 250 seconds)
[09:43:55] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[09:45:17] <computerquip> I'd say it has some issues being as synchronous as it is.
[09:49:19] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[09:49:22] <TinoDidriksen> There's nothing wrong with streams for raw I/O. What people have issues with is the formatted I/O, because chaining op<< is awful code.
[09:50:02] <TinoDidriksen> But stream.read() and friends are either equivalent to FILE* operations, or just better.
[09:50:38] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[09:50:44] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[09:51:23] *** Joins: letto (~letto@86.120.81.105)
[09:51:25] <nightstrike> TinoDidriksen: I chain << all the time :/
[09:52:10] <TinoDidriksen> So do I, but it's not exactly nice code. std::format is vastly cleaner and l10n-friendly.
[09:52:16] <nightstrike> do you mean as in "std::cout << std::hex << x << std::endl;" // is bad?
[09:52:25] <TinoDidriksen> Yes
[09:52:27] <nightstrike> I assume std::format is new
[09:52:40] <TinoDidriksen> std::format is the C++ version of printf()
[09:53:13] <nightstrike> I guess I gotta read up on my C++20
[09:53:48] <computerquip> I'd like at libfmt, it's a more complete std::format at the moment.
[09:53:50] <TinoDidriksen> It's also available as https://github.com/fmtlib/fmt
[09:54:20] <computerquip> Oof, didn't English that last sentence too well.
[09:54:22] <nightstrike> anyway, to my question, ty leduyquang753, I didn't know that about 20 either
[09:58:48] *** Joins: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi)
[10:00:12] *** Joins: hexingb (~hexingb@111.32.64.60)
[10:03:24] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[10:08:17] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[10:28:41] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 256 seconds)
[10:39:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:45:04] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[10:49:57] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[10:54:30] *** Joins: hexingb (~hexingb@111.32.64.60)
[10:57:32] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:59:32] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[11:01:14] *** Quits: hexingb (~hexingb@111.32.64.60) (Read error: Connection reset by peer)
[11:04:32] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:06:57] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[11:11:47] *** Joins: hexingb (~hexingb@111.32.64.60)
[11:23:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:24:54] *** Joins: Siv (~fuag1@174.127.249.180)
[11:25:38] <Siv> hey all, i'm trying to link with a static .lib file on windows and i'm getting link errors resolving symbols that compile and run fine using the dynamic .lib file and associated dll
[11:26:03] <Siv> i'm wondering how to dig into the static vs dynamic .lib files being generated to get a better idea of why linking is failing or what is wrong with the static .lib that is being generated
[11:26:50] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 250 seconds)
[11:26:51] <Siv> i'm using cmake and referencing the static lib by adding it as a target_link_libarary for the binary and pointing directly to the static.lib that is generated
[11:27:07] <Siv> i get a bunch of unresolved external symbols doing it this way though
[11:30:56] <vdamewood> Siv: does the library itself depend on another library?
[11:31:06] <TinoDidriksen> Which unresolved externals? When you link against a DLL, you don't need to track the DLL's dependencies - but you do when you link statically.
[11:32:27] <vdamewood> One of these days, I'm going to have to look into what's actually in a Windows import .lib.
[11:32:34] <Siv> the library itself has no external deps, it static-links all them. Its libzmq and the unresolved externals ar __imp_(insert every zmq function used by my code here)
[11:33:01] <Siv> the dynamically linked version works great but I want to reduce dll dependencies of my dll so its easier to use
[11:33:29] <Siv> to do that i'm attempting to change the target_link_libraries line in cmake from referencing the dynamic .lib def to the larger static .lib one
[11:33:48] <Siv> but i wouldn't be surprised to find i'm doing that wrong
[11:34:03] <vdamewood> Well, how are you changing it?
[11:34:23] <Siv> i'm working on getting a dumpbin of the static .lib file that is generated to see if they are actually missing or if i'm cmake-ing wrong
[11:34:46] <Siv> the libzmq git repo comes with its own cmake setup stuff that builds both a dynamic and a static version of libzmq
[11:34:49] <TinoDidriksen> libzmq is in vcpkg, which offers static building.
[11:34:56] <Siv> the dynamic one produces a .lib and a .dll, the static just a larger .lib
[11:35:01] *** Joins: hexingb (~hexingb@111.32.64.60)
[11:35:29] <Siv> i'm changing it by switching in my code the link_libraries stuff in specific for this executable over to the larger one created by the static libzmq solution generated by that cmake file
[11:35:56] <vdamewood> Siv: Don't describe what you're doing, show us what you're actually doing.
[11:36:02] <Siv> i want to kinda understand whats going on here / how to poke at it
[11:36:08] <Siv> oh, ok, i'll get a pasted of the cmake diff
[11:36:15] <Siv> is that what you mean?
[11:36:20] <vdamewood> Yep.
[11:36:24] <TinoDidriksen> Yes, pastebin the relevant parts.
[11:37:24] <Siv> ok, going to leave out the libzmq stuff, thats a huge bit that just works (tm) and produces  a astatic.lib and a dynamic.lib to link against, the dynamic.lib works and links
[11:37:49] <vdamewood> If that's the library you're trying to link with, then it's probably relivent.
[11:38:13] <TinoDidriksen> I would switch to getting zmq from vcpkg and using vcpkg's CMake integration to find and link it.
[11:38:28] <Siv> well... i mean. its large.
[11:38:49] <Siv> but i want to understand whats going on under the hood, the vcpkg thing seems like a lot of work to sidestep grokking whats going on
[11:39:09] *** Joins: bobb_ (~bobb_@dslb-092-074-237-154.092.074.pools.vodafone-ip.de)
[11:39:12] <Siv> this project is cross platform and has cmake stuff thats used to build it so switching to vcpkg and adding in all that for some link thing seems extreme
[11:40:08] <Siv> if i do that if i have to patch something in libzmq i'll be in the same situation i'm in now
[11:40:27] <vdamewood> Well, let's see the code, and yes, all of it. Point out where target_link_libraries line is.
[11:40:41] *** Quits: Cienisty (Cienisty@user/cienisty) (Ping timeout: 250 seconds)
[11:40:54] <TinoDidriksen> For most packages you don't need anything special in the CMakeLists.txt to use vcpkg. All the magic happens in the cmake invocation.
[11:49:50] <mort> is there a difference between passing nullptr and NULL as a sentinel to C-style variadic functions? I had GCC shout at me for not passing a sentinel when I used nullptr
[11:51:24] <cbreak> mort: NULL is a literal 0 int, nullptr is nullptr_t
[11:51:29] <cbreak> they're different types
[11:51:46] <cbreak> (with different sizes)
[11:52:02] <mort> I know they're different types, didn't know about the different sizes
[11:52:31] <mort> so the answer is you can't use nullptr as if it's NULL in C-style variadic functions
[11:52:45] <mort> weird that GCC complained but clang didn't
[11:53:24] <Siv> i'm still working on the paste, wrestling with wandbox a bit since this is all cmake stuff
[11:54:26] <Siv> https://wandbox.org/permlink/YY0Ieu0p6dzHZCf3
[11:55:42] <Siv> so i'm changing the taget_link_libraries(refractor libzmq-143-mt-4_3_5.lib) -> target_link_libraries(refractor libzmq-143-mt-s-4_3_5.lib)
[11:55:43] <mort> Siv: if you just need a pastebin feel free to use p.mort.coffee (or any other plaintext pastebin which doesn't try to execute the code)
[11:56:25] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:56:57] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[11:56:59] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:57:16] <Siv> i'm getting link 2001 errors on visual studio 2022 with a bunch of symbols defined in zeromq that are being referenced by .obj files generated in the refractor project
[11:59:40] <vdamewood> Siv: And that's the only change you made to the CMake file?
[12:01:19] <Siv> yeah, shoot though, i'm noticing in the .h files i'm including they are checking for a ZMQ_STATIC pragma to be defined and siwthcing on that to try to replace funcs with declspec(...) stuff on win32
[12:01:40] <Siv> i probably have to add ZMQ_STATIC before importing zmq.h
[12:01:59] <vdamewood> Yep.
[12:02:18] *** Joins: Uswald (~user@2a01cb040075f900413f47ed6861a667.ipv6.abo.wanadoo.fr)
[12:02:24] <Siv> :X
[12:02:31] <vdamewood> And that's a problem I wouldn't have spotted without all the extra CMake stuff for the lib.
[12:03:03] <vdamewood> Also, there's a better way to do the lib code.
[12:03:46] <Siv> well, sorry for wasting your time with it. :\. Whats the better way? I'm pretty new to cmake stuff and have scrambled this together from what i could find in the docs
[12:03:49] <vdamewood> CMake has a feature where you can make a target for an external library, and assign properties to it like which #define's and include directories the libraries dependencies have.
[12:06:40] <vdamewood> Siv: Take a look at lines 27 and 59. https://github.com/vdamewood/silikego/blob/master/lib/CMakeLists.txt
[12:09:45] <Siv> vdamewood, is that being done in the set_target_properties bloc ktehre?
[12:09:49] *** Joins: Cienisty (Cienisty@user/cienisty)
[12:09:52] <vdamewood> There's another syntax for add_library when the library already exists and doesn't need to be built. Let me look it up.
[12:09:59] <Siv> * block there
[12:10:44] <vdamewood> actually, the set_target_properties block isn't doing anything related to this.
[12:13:11] *** Quits: Uswald (~user@2a01cb040075f900413f47ed6861a667.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:14:00] <vdamewood> ah. add_library(<name> <type> IMPORTED [GLOBAL]), and set_target_properties(<name> PROPERTIES  IMPORTED_LOCATION path/to/foo.lib) for a library that already exists.
[12:15:03] <vdamewood> Siv: the point is, on line 59 I add include directories to the target as "PUBLIC", which means that any target that uses target_link_library(Foo PRIVATE Silikego) will automatically get those include directories too.
[12:15:34] <vdamewood> It works similarly for defines, compiler options, and dependencies.
[12:15:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:16:05] <Siv> i got lost trying to understand how to make something wiht cmake that will work with find_package, which looks like what your doing there. or the :: syntax reminds me of it
[12:16:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Client Quit)
[12:16:56] <vdamewood> The :: syntax is something CMake did to get around a conflict between fixing problems like this and backwards compatibility.
[12:18:03] <vdamewood> The idea is that you can name a target something Like::This, and use these features this, and target_link_library sill see it and use only this new behavior instead of the old behavior, which would interpret a bare string as a random library file name to use.
[12:19:27] <vdamewood> So, for example, you could use target_link_libraries(MyProgram foo) and it would go out, find a library called libfoo.so on Unix, or foo.lib, and it link the program with it. By using names with ::, you can instead get a useful error message when CMake failes to find the library you want.
[12:21:34] <Siv> ah, ok that helps a lot, its just a special string to look for that wouldn't be in a library name or path reasonably and the cmake internals switch off of finding that pattern in the string?
[12:21:36] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:8844:e45a:1aab:92c2)
[12:22:05] <vdamewood> Yep.
[12:23:17] *** Joins: robod34 (~Username@79.113.195.239)
[12:25:36] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:5d8f:20db:5ddd:bcf4) (Ping timeout: 268 seconds)
[12:26:05] <vdamewood> Siv: Here's a simple example. It's missing the code that, for example, finds the other library and such, though: https://gist.github.com/vdamewood/78e581b0e1f82e6574e9294e53244942
[12:26:35] <vdamewood> Oops, there's a mistake
[12:27:32] <vdamewood> okay, fixed.
[12:29:14] <Siv> thats super helpful. I'm going to try to split apart some of this into different targets using that syntax
[12:30:48] *** Joins: Uswald (~user@2a01cb040075f900413f47ed6861a667.ipv6.abo.wanadoo.fr)
[12:32:48] <vdamewood> With find_package, what you'd normally do is make a cmake script to find the library, includes, and such, then build a target like this with GLOBAL in the add_library call.
[12:33:23] <Siv> what does GLOBAL indicate during add_library? is that project wide?
[12:33:52] <vdamewood> Without GLOBAL the target is only avaialble in the same CMake file that made it.
[12:34:15] <Siv> i should bite the bullet and understand this / use libzmq's cmakelists that they ship. i'm no chasing dependencies of the libzmq static stuff that is really dependent on the os and config
[12:34:36] <vdamewood> Oh, but GLOBAL is only for IMPORT libraries. The GLOBAL behavior is default for other libraries.
[12:35:56] <vdamewood> Just be ware that some projects still use the old, obsolete syntax that CMake has been trying to get rid of for the past 10 years.
[12:36:07] *** Joins: xkuru (~xkuru@user/xkuru)
[12:38:14] <vdamewood> Oh, looks like it's only been 8 years.
[12:42:10] <TinoDidriksen> There's a minimum 5 year lag for new features to be widely usable, so that's about expected.
[12:43:02] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[12:43:38] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: WeeChat 3.0)
[12:44:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:47:27] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:48:01] <Siv> jeez, its 1:30 in the morning here. saga to be continued... Thanks for your help vdamewood :)
[12:48:20] <vdamewood> You're in Pacific Time?
[12:51:20] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[12:57:47] <Siv> yeah, i'm up in Seattle and failing at stopping for the night :P
[12:58:01] <vdamewood> Greetings from Portland
[12:58:52] <vdamewood> Good night. I have a server to maintain.
[13:00:00] <Siv> lol, thanks and same. (aside from the server part)
[13:00:57] *** Joins: RazielXYZ (~Raziel@user/raziel)
[13:01:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[13:03:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:04:27] *** Quits: RazielZ (~Raziel@user/raziel) (Ping timeout: 268 seconds)
[13:04:29] *** Joins: Deneb (~johnch@23.143.9.51.dyn.plus.net)
[13:09:57] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[13:12:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:00] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:15:48] *** Joins: Burgundy (~NA@86.121.143.206)
[13:22:35] *** Joins: seninha (~seninha@user/seninha)
[13:23:48] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[13:24:16] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 250 seconds)
[13:24:48] *** Joins: johnny (~johnny@user/johnny)
[13:24:55] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:34:10] *** Quits: Uswald (~user@2a01cb040075f900413f47ed6861a667.ipv6.abo.wanadoo.fr) (Changing host)
[13:34:10] *** Joins: Uswald (~user@user/Uswald)
[13:35:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[13:36:39] *** Quits: Uswald (~user@user/Uswald) (Quit: restart)
[13:37:48] *** Joins: Uswald (~user@user/Uswald)
[13:38:50] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[13:39:31] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:40:26] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[13:41:12] *** Quits: Siv (~fuag1@174.127.249.180) (Remote host closed the connection)
[13:41:30] *** Joins: Siv (~fuag1@174.127.249.180)
[13:41:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:34] *** Quits: Siv (~fuag1@174.127.249.180) (Read error: Connection reset by peer)
[13:41:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:40] *** ChanServ sets mode: +v npaperbot
[13:47:53] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[13:52:16] *** Joins: andreasbuhr (~quassel@p549db3ef.dip0.t-ipconnect.de)
[13:53:00] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[14:03:04] *** Quits: miklcct (quasselcor@vps.miklcct.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:03:40] *** Joins: miklcct (~quassel@vps.miklcct.com)
[14:04:03] *** Quits: miklcct (~quassel@vps.miklcct.com) (Client Quit)
[14:04:08] *** Quits: jsbach (~jsbach@2a01:c22:b1a3:2100:9ba5:17b3:15df:46fa) (Ping timeout: 250 seconds)
[14:04:50] *** Joins: miklcct (quasselcor@vps.miklcct.com)
[14:06:48] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:82f1:438:bc8a:caef)
[14:13:17] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 240 seconds)
[14:13:44] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:82f1:438:bc8a:caef) (Remote host closed the connection)
[14:13:58] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[14:14:42] *** Joins: hexingb (~hexingb@36.155.28.143)
[14:19:29] *** Joins: DSpider (~DSpider@82.79.237.91)
[14:31:41] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:01:00] *** Quits: Uswald (~user@user/Uswald) (Ping timeout: 268 seconds)
[15:03:11] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[15:04:09] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:11:50] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:14:24] *** Joins: markong (~kvirc@213.146.188.203)
[15:19:06] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[15:30:00] *** Joins: Uswald (~user@user/Uswald)
[15:30:33] *** Joins: hexingb (~hexingb@36.155.28.143)
[15:35:25] *** Joins: stanrifkin_ (~stanrifki@p508d4eab.dip0.t-ipconnect.de)
[15:36:52] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[15:37:16] *** Joins: hexingb (~hexingb@36.155.28.143)
[15:40:51] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:43:57] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 240 seconds)
[15:46:43] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[15:49:20] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[15:53:39] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:01:46] *** Joins: Leone (~Leo@216.154.23.229)
[16:08:53] <stanrifkin_> is oracle dev studio not based on clang? Somehow all modern c++ compiler are either microsoft, intel, gcc or clang. Are there others?
[16:15:38] *** Joins: kit-ten (~u0_a391@2600:380:8815:93a5:db4b:61ad:43f8:6363)
[16:15:42] *** Joins: jellie (~luv_panda@user/jellie)
[16:16:02] *** Joins: jsbach (~jsbach@2a01:c22:b1a3:2100:1231:a644:6bb9:9dd9)
[16:16:14] <jellie> I'm trying to compile a C++ library from a .h file
[16:16:22] <kit-ten> oh
[16:16:43] <kit-ten> .h -> .o?
[16:17:09] <jellie> It doesn't have to be a .h it's just that I thought that this was best
[16:17:14] <jellie> kit-ten: yes
[16:17:24] <kit-ten> well
[16:17:29] <jellie> Here's the code for context https://github.com/urbanslug/ndarray-to-img/tree/cpp-wrapper-2
[16:17:32] <kit-ten> if its only a .h
[16:17:44] <TinoDidriksen> stanrifkin_, according to https://docs.oracle.com/cd/E77782_01/html/E77789/bkabe.html it's g++ 5.4.
[16:17:50] <kit-ten> you can copy it to /usr/local/include iirc
[16:18:05] <jellie> It's .h that depends on a lib
[16:18:13] <kit-ten> ohhh
[16:18:30] <jellie> so I want to statically link this .h to a library that I compiled from rust
[16:18:33] <kit-ten> compile the lib with -c
[16:18:40] <kit-ten> oh
[16:18:49] <kit-ten> im afraid i do not understand
[16:18:51] <TinoDidriksen> You don't compile .h files.
[16:19:27] <TinoDidriksen> You can compile the project to a static library, but it still requires both including the .h and linking against the static library.
[16:19:39] <kit-ten> yea
[16:19:41] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Read error: No route to host)
[16:19:51] <kit-ten> thats how its supposed to be
[16:19:53] <stanrifkin_> TinoDidriksen: good find, thank you
[16:20:16] *** Joins: proller (~p@2a02:6b8:0:40c:9cfc:cea6:bb70:e1d9)
[16:20:53] *** Joins: fluter (~fluter@user/fluter)
[16:21:04] <fluter> hi, i have a lot of POD types, i.e. struct with fields of fundamental types or other POD types,
[16:21:11] <fluter> is there a tool or a python library that can parse those and convert them into json objects?
[16:21:27] *** Joins: sigma_ (~sigma@164.215.210.250)
[16:22:12] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:22:14] <jellie> TinoDidriksen: So you're saying that I should make this wrapper a .cpp file then compile that into a static library?
[16:22:15] <stanrifkin_> jellie: what does this header interface? the rust code?
[16:22:23] <jellie> stanrifkin_: yeah
[16:22:30] <jellie> it doesn't have to be a header file
[16:22:44] <jellie> I just thought .h is the best file extension for a C++ lib
[16:23:43] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[16:24:33] <sigma_> hi, in c++ primer say: When we define a const with the same name in multiple files, it is as if we had written definitions for separate variables in each file.
[16:24:55] <sigma_> and we need extern const int bufSize
[16:25:15] <sigma_> but if we are pass const pointer?
[16:26:03] <sigma_> my object have function for return a const pointer
[16:26:32] <fiesh> !give sigma_ testcase
[16:26:33] <nolyc> sigma_: A testcase is the _least_ amount of code that replicates your problem, paste it to https://wandbox.org/ then: 1) click run 2) click share 3) click url and 4) paste the url for us. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[16:27:51] <stanrifkin_> jellie: i don't know rust. but you have to cargo that somehow statically and your module have to have proper c api. pub extern "C" as i googled.
[16:28:01] <stanrifkin_> jellie: nothing to do with c++
[16:28:10] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:30:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[16:31:03] <fluter> anyone knows
[16:31:41] *** Quits: Uswald (~user@user/Uswald) (Remote host closed the connection)
[16:32:22] <stanrifkin_> POD = plain old document?
[16:34:43] <Haohmaru> plain old data
[16:35:19] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:36:40] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[16:36:42] *** Joins: jokoon (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa)
[16:36:59] *** Joins: hexingb (~hexingb@111.32.64.60)
[16:38:43] <jellie> stanrifkin_: I already have that.
[16:38:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:39:22] <jellie> See this code here https://github.com/urbanslug/ndarray-to-img/blob/cpp-wrapper-2/src/wrapper.cpp
[16:39:34] <jellie> I want to make that a lib on its own
[16:40:09] <jellie> To test this I want to make the code in examples/main.cpp use the result of this
[16:40:55] <jellie> The Makefile in https://github.com/urbanslug/ndarray-to-img/blob/cpp-wrapper-2/Makefile shows one way to do things but this is a dynamically linked environment and I don't want that.
[16:43:47] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[16:43:58] *** Joins: Uswald (~user@user/Uswald)
[16:46:55] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[16:48:08] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[16:48:13] *** Joins: pulse (~pulse@user/pulse)
[16:48:17] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 240 seconds)
[16:49:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:50:23] *** Joins: Xardas (~Xardas@149.233.51.127)
[16:51:42] *** Joins: ville (~ville@user/ville)
[16:54:23] *** Quits: rg (~r-g@51.159.55.86) (Ping timeout: 256 seconds)
[16:54:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:55:59] *** Joins: calamity_jane (~calamity_@2a01cb040075f90068bf86cb6e2cbefb.ipv6.abo.wanadoo.fr)
[16:56:38] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[16:59:37] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[16:59:55] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:01:10] *** Quits: ville (~ville@user/ville) (Quit: ville)
[17:03:36] *** Quits: calamity_jane (~calamity_@2a01cb040075f90068bf86cb6e2cbefb.ipv6.abo.wanadoo.fr) (Quit: Ping timeout (120 seconds))
[17:09:42] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Leaving)
[17:10:23] *** Joins: ville (~ville@user/ville)
[17:10:27] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[17:11:48] <jellie> If I have a foo.a in my current directory. Then try to use include it in a file in e.g examples/main.cpp under `#include "foo.h"`
[17:12:16] <jellie> Then compile with g++ examples/main.cpp -L. -lfoo
[17:12:24] <jellie> which fails
[17:13:55] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca)
[17:14:52] <PJBoy> you should probably name the library libfoo.a
[17:14:53] *** Joins: hexingb (~hexingb@111.32.64.60)
[17:15:01] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:15:18] <PJBoy> gcc likes to prepend lib to its -l arguments
[17:17:09] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[17:17:59] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[17:21:05] *** Joins: calamity_jane (~calamity_@2a01cb040075f90068bf86cb6e2cbefb.ipv6.abo.wanadoo.fr)
[17:21:24] *** Quits: calamity_jane (~calamity_@2a01cb040075f90068bf86cb6e2cbefb.ipv6.abo.wanadoo.fr) (Client Quit)
[17:21:55] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[17:22:55] <jellie> PJBoy: Thanks
[17:26:43] *** Joins: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr)
[17:35:14] *** Quits: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[17:35:23] *** Joins: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr)
[17:36:37] <PJBoy> did that solve the issue? :O
[17:36:45] <sigma_> i get : /opt/wandbox/clang-10.0.1/bin/clang++: error while loading shared libraries: libz3.so.4: cannot open shared object file: No such file or directory
[17:36:48] <PJBoy> that would be the first time I've ever solved a build system issue before
[17:36:56] <jellie> PJBoy: LOL no
[17:37:01] <PJBoy> ok good
[17:37:32] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-251.dsl.bell.ca) (Ping timeout: 240 seconds)
[17:37:39] <jellie> PJBoy: Can you tell where my logic is faling here https://github.com/urbanslug/ndarray-to-img/tree/cpp-wrapper-2#compile
[17:38:06] <jellie> I don't know shit about C++ libraries
[17:38:14] <PJBoy> honestly neither do I
[17:38:32] <sigma_> why wand box get error in run
[17:38:40] *** Quits: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr) (Changing host)
[17:38:40] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[17:38:41] <PJBoy> I would have guessed that that's right
[17:38:44] <artok> your clang has built with z3 support but library wasn't installed
[17:39:03] <artok> where did you get that clang from ?
[17:39:22] <sigma_> in comlier sitting
[17:39:53] <sigma_> lef top corner
[17:40:05] <artok> aah
[17:40:13] <artok> that is indeed problem with wandbox
[17:40:32] <PJBoy> can't reproduce
[17:40:48] <artok> select another version, on 10.0.1 clang it really is broken
[17:40:59] <sigma_> yeh , it is worked
[17:41:03] <PJBoy> ah that version specifically
[17:41:28] <PJBoy> and 9 and 8, but not 7
[17:41:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:38] <sigma_> so how can i share my code
[17:41:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:42] *** ChanServ sets mode: +v npaperbot
[17:42:13] <PJBoy> with one of the working versions of clang
[17:42:34] <PJBoy> I always pick the head version
[17:43:05] <sigma_> like that : https://wandbox.org/#
[17:43:59] <sigma_> or that : https://wandbox.org/permlink/lNx8AJe1pTh1Pwrb
[17:45:06] <sigma_> ok that is work https://wandbox.org/permlink/lNx8AJe1pTh1Pwrb, my qustion is wich way better to get data from object one
[17:45:25] <sigma_> const ref or const pointer
[17:46:44] <PJBoy> I would be tempted by const ref
[17:47:16] <PJBoy> assuming const ref = `const int(&)[10]`
[17:47:37] <PJBoy> or however that looks
[17:48:16] <PJBoy> oh I guess it's required to use a type alias
[17:48:42] <PJBoy> e.g. https://wandbox.org/permlink/zhFDUTVvqgmNLwGa
[17:48:48] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[17:48:49] <PJBoy> I'd be tempted by that
[17:48:49] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-202.dsl.bell.ca)
[17:49:32] *** Joins: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr)
[17:50:20] *** Quits: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr) (Changing host)
[17:50:20] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[17:50:53] <sigma_> PJBoy: you make your own type?
[17:51:26] <PJBoy> only because writing `const int(&)[10] brdige();` doesn't work
[17:51:35] <PJBoy> for reasons unknown to me
[17:52:04] <sigma_> that is ok but is i have multi file for refrence , it is good?
[17:54:58] <PJBoy> I don't see why not
[18:00:23] <sigma_> okay, good for me becuse i dont want change all source for refrence. TNX
[18:06:44] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[18:07:02] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Leaving)
[18:07:12] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[18:11:47] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[18:12:03] *** Quits: Uswald (~user@user/Uswald) (Read error: Connection reset by peer)
[18:12:17] *** Joins: Uswald (~user@user/Uswald)
[18:14:22] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[18:14:26] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:15:20] <CarloWood> { std::array<int, 3> a = { 1, 2, 3 }; cout << a[Index::one]; }  enum class Index { one, two , three };
[18:15:20] <geordi> error: no match for 'operator[]' in 'a[Index::one]' (operand types are 'array<int, 3>' and 'Index')
[18:15:40] <CarloWood> I want to be able to write `a[Index::one]`, where Index is an enum class.
[18:16:39] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) ()
[18:18:08] <CarloWood> { std::array<int, 3> a = { 1, 2, 3 }; cout << a[Index::one]; }  enum class Index { one, two , three };  auto operator[](std::array<int, 3> const& a, Index index) { return a[static_cast<int>(index)]; }
[18:18:08] <geordi> error: 'auto operator[](const array<int, 3>&, Index)' must be a non-static member function
[18:18:18] <CarloWood> lame
[18:18:19] *** Joins: calamity-jane (~calamity-@45.149.155.220)
[18:18:38] <ville> under those restrictions you can't
[18:19:09] <CarloWood> I'll change Index to global constexpr int then :/
[18:20:46] *** Quits: Uswald (~user@user/Uswald) (Remote host closed the connection)
[18:21:57] *** Joins: Uswald (~user@user/Uswald)
[18:22:28] *** Quits: calamity-jane (~calamity-@45.149.155.220) (Client Quit)
[18:23:55] <jellie> kit-ten: Any idea what's wrong with my logic here https://github.com/urbanslug/ndarray-to-img/tree/cpp-wrapper-2#compile ?
[18:25:16] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[18:26:24] <rpav> heh you have to log in now to install Qt windows binaries
[18:26:43] *** Joins: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr)
[18:27:12] *** lh_cat is now known as lh_mouse
[18:27:20] <CarloWood> jellie: I'd think you meant "out of a 5x5 matrix"
[18:27:35] <CarloWood> jellie: last time I checked 500 / 10 = 5.
[18:27:38] <CarloWood> err
[18:27:40] <CarloWood> lol
[18:27:47] <CarloWood> 50x50 matrix then :P
[18:28:33] *** Quits: calamity-jane (~calamity-@2a01cb040075f900a9da20aa912401ed.ipv6.abo.wanadoo.fr) (Changing host)
[18:28:33] *** Joins: calamity-jane (~calamity-@user/calamity-jane)
[18:28:43] <CarloWood> Hmm, I guess it's the other way around - you have a 10x10 matrix and generate a 500x500 image - never mind.
[18:28:50] <jellie> CarloWood: My logic with the compilation
[18:29:00] <jellie> CarloWood: I'm trying to build a C++ lib
[18:29:02] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Leaving)
[18:29:07] <jellie> I just updated the README
[18:29:32] *** Joins: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[18:30:30] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[18:30:57] <CarloWood> jellie: does ndarray_to_img.h exist in that directory?
[18:31:48] <jellie> CarloWood: no
[18:32:21] <CarloWood> This should try to include examples/ndarray_to_img.h ... which should exist if I look at the repo.
[18:33:14] <CarloWood> oh
[18:33:16] <CarloWood> it doesn't
[18:33:27] <jellie> CarloWood: Can I make examples/main.cpp use the wrapper lib without the include statement?
[18:33:29] <CarloWood> You have src/ndarray_to_img.h
[18:33:58] <CarloWood> #include "../src/ndarray_to_img.h"
[18:34:16] <jellie> CarloWood: but what I compiled was src/wrapper.cpp
[18:35:04] <jellie> CarloWood: My aim is to compile a standalone ndarray_to_img library
[18:35:12] <CarloWood> If you do #include "foo.h" with double quotes (") not <>, then it will first try to find that file relative to the source file that the #include is in.
[18:35:42] <jellie> I don't want users to require the source files
[18:35:50] <CarloWood> So, a main.cpp with #include "ndarray_to_img.h" typically needs ndarray_to_img.h in the same directory as that main.cpp.
[18:35:54] <jellie> I only want them to hae the .a
[18:35:59] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:35:59] <CarloWood> Otherwise you should use -I's
[18:37:27] <CarloWood> Just run: g++ -I src examples/main.cpp -L . -lndarray_to_img -o run
[18:38:28] <CarloWood> Or install it; ie with prefix /usr - then ndarray_to_img.h would end up in /usr/include/ and that is included by default. Otherwise you still need to add a -I <prefix/include
[18:38:45] <CarloWood> <prefix>/include
[18:40:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[18:41:33] <CarloWood> <jellie> I only want them to hae the .a  <-- you mean, not give them the header file at all?
[18:41:55] <jellie> CarloWood: Actually I think what you're saying works
[18:42:10] <jellie> Give me a sec to update the code and push
[18:42:12] <jellie> Don't lease
[18:42:17] <jellie> leave
[18:42:19] <jellie> Please
[18:42:47] <CarloWood> Compiling src/wrapper.cpp worked because wrapper.cpp is in src/ so its #include "" looks in src/ for the header and finds it.
[18:44:34] <CarloWood> You can't compile anything without the header I'm sure. Distributing only the .a isn't going to work because you can only use that by linking it against something else that they must compile that uses API for that lib. And the API is declared in the header.
[18:44:56] *** Quits: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036) (Ping timeout: 250 seconds)
[18:46:22] *** Quits: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Konversation terminated!)
[18:47:06] *** Joins: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[18:47:28] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[18:49:05] *** Quits: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Client Quit)
[18:49:18] *** Joins: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[18:52:57] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:53:32] <kraa> is this irc only or also on discord?
[18:56:04] <cbreak> irc! :)
[18:58:45] <jellie> CarloWood: So
[18:58:53] <jellie> I tried doing it as you explained
[18:59:50] <jellie> basically I have an src/foo.hpp which example/main.cpp includes via #include "../src/foo.hpp"
[19:01:06] <jellie> Doesn't work though
[19:04:07] *** ivii is now known as the_ivii
[19:04:44] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[19:04:54] *** the_ivii is now known as ivii
[19:05:13] *** Quits: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573) (Quit: Konversation terminated!)
[19:05:26] *** Joins: ivii (~ivan@2001:a62:4c3:8e01:777e:e76b:1130:2573)
[19:08:46] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa)
[19:11:08] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1c53:1d56:3b63:1825)
[19:11:08] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1c53:1d56:3b63:1825) (Changing host)
[19:11:08] *** Joins: skapata (~Skapata@user/skapata)
[19:12:15] <CarloWood> jellie: that definitely should work
[19:12:36] *** Quits: jokoon (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa) (Ping timeout: 268 seconds)
[19:13:02] <CarloWood> assuming that, while in example/, the file ../src/foo.hpp exists.
[19:16:55] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[19:17:21] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[19:17:50] *** Quits: Uswald (~user@user/Uswald) (Remote host closed the connection)
[19:26:37] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:451f:1170:dd44:4afa) (Quit: Leaving)
[19:30:29] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[19:31:31] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[19:41:17] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:6113:ea6a:978:6ef4)
[19:41:17] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:6113:ea6a:978:6ef4) (Changing host)
[19:41:17] *** Joins: skapata (~Skapata@user/skapata)
[19:43:11] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[19:45:57] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[19:51:08] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:58:07] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[19:58:49] *** Joins: pingpongball (~pingpongb@27.34.47.17)
[19:58:58] <pingpongball> Hey guys
[19:59:13] <kit-ten> hi
[19:59:23] <pingpongball> Any seniour programmer here, who tried many many dozens of programming langauge in 80's 90's
[19:59:35] <pingpongball> What do you think of lisp , *common lisp* ?
[19:59:41] <pingpongball> Hi kit-ten :)
[20:00:42] *** Quits: ville (~ville@user/ville) (Quit: ville)
[20:02:38] <pingpongball> the guy claims
[20:03:01] <pingpongball> "You'll be more expressive and productive in lisp" than any programming langauge you used before
[20:03:04] <pingpongball> lets see
[20:03:05] <pingpongball> :)
[20:04:20] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:04:34] *** Joins: chozorho (~chozorho@2601:146:300:c30::1e6f)
[20:05:04] *** Joins: rg (~r-g@51.159.55.86)
[20:06:04] <rpav> pingpongball: anytime anyone claims that about literally any language, be suspicious
[20:06:34] <rpav> CL is an interesting/fun/powerful language; but it's better for some things, worse for others, and not anymore "Just Better" than anything else
[20:07:26] <pingpongball> oh i think he is not  saying like that but
[20:07:39] <rpav> writing "smarter" code in a "better" language doesn't necessarily make you faster .. but writing dumber code and getting it done often will
[20:08:06] <pingpongball> aummm, have you tried lisp ,what did you think of?
[20:08:16] <pingpongball> i'm just currently touching it :)
[20:09:03] <pingpongball> like people calls it *a programmable programming language* whats that :/
[20:09:04] <pingpongball> and every people calls, oh its hackable, hackable langauge
[20:09:05] <pingpongball> so
[20:09:10] <rpav> i did a fair bit of CL for awhile, you can check some of my stuff .. https://github.com/rpav/ ... fast-io and cl-autowrap are among the most-used, ScriptL / CheckL are imo some of the neater ones
[20:09:36] <rpav> what i think of it is the above: it's a fun language with plusses and minuses and it's not really that different from anything else
[20:10:03] <rpav> you can do a lot of syntax hacking in it, but the way you do it in CL isn't necessarily the best way
[20:10:55] <pingpongball> ok , oh yes, you are lisper, you've written alot of lisp:)  +c++ and other
[20:11:06] <rpav> some implementations allow a fair bit of optimization, but you won't be able to have nearly the fine control that C++ allows, and CL is really not great in places where you want that sort of thing ("allocate some vec3 / mat4 on the stack" / "cache coherence" / etc)
[20:11:22] <rpav> if you don't need those it has a lot of neat/powerful tools though
[20:11:54] <rpav> there is nothing quite like coding on a running program, and making modifications / fixing errors / etc _as you're running_
[20:12:16] <rpav> no "stop, recompile, restart, reload," it's just "recompile, continue"
[20:13:33] <rpav> get the equivalent of an exception, and it's not like "program terminated," it's like "ok this is a problem, how should i proceed? Options: ..." .. and you can add your _own_ options, or modify what's causing the problem, etc, and continue running
[20:13:45] <pingpongball> What is reason why people dont call c++ a "programmable programming langauge" ?
[20:13:54] <pingpongball> is there such feature in CL
[20:13:58] <pingpongball> whats that?
[20:14:05] <rpav> C++ has some metaprogramming but it's limited
[20:14:25] <pingpongball> have you tried julia, i heard they contain metaprogramming
[20:14:33] <rpav> i haven't looked at julia no
[20:14:44] <pingpongball> oh ok
[20:15:49] *** Joins: ville (~ville@user/ville)
[20:16:03] <pingpongball> i'm starting out learning lisp, thinking if it will unlock my brain , like some sort of lightning struck in brain ,and coding flows from my hand, non stop building things.
[20:16:05] <ashafq> pingpongball: I tried JavaScript, does that count?
[20:16:33] <pingpongball> Although i tried such as taking weed and coding if such lightning comes, but it never came
[20:16:35] <pingpongball> :)
[20:16:36] <rpav> in CL you can write functions that, instead of being called, get the syntax they were called with, and they generate code, so e.g. you could write `(run-nth 1 (some-func ..) (other-func ..))` .. normally, function arguments (the function calls in this case) would all be evaluated, but for run-nth you could make it work like `a && b` where it short-circuits
[20:16:42] <ville> pingpongball: -general is still c++-related. sounds like you want -social
[20:17:18] <rpav> in C++ you still need something like, `run_nth(N, [](){ ... }, [](){ ... });` .. you couldn't make some arguments not-evaluated
[20:17:27] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[20:17:54] <pingpongball> :)
[20:18:21] <rpav> the CL way imo isnt' the best though, it goes right from "regular evaluation" to "hack the syntax" .. if you have like `void foo(lazy int x, lazy int y);` .. it could implicitly create lambdas for the arguments and pass them
[20:18:58] <rpav> if you're a C++-only (or algol-family-only) dev, you should definitely expand your horizons, but nothing's definitively / globally better
[20:20:08] <pingpongball> ok i've learnt many languages, but only learnt because i dont have problem.
[20:20:20] <pingpongball> if there is problem then something would come
[20:20:22] <pingpongball> anyway
[20:20:31] <pingpongball> nice to meet you rpav :)
[20:20:47] <rpav> 👍
[20:20:56] <rpav> are you currently working on C++ stuff?
[20:21:01] <kit-ten> learn qb64
[20:21:28] <pingpongball> =D  thanks for your information m8
[20:21:45] <kit-ten> dont actually learn qb64 lmao
[20:21:46] <rpav> why write a kernel in assembly, or C, or C++, when you could use .. BASIC
[20:22:13] <pingpongball> we could just use abacus if we want basic calculation.
[20:24:57] <PJBoy> and after applying all my clang-tidy fixes
[20:25:05] <PJBoy> the number of GCC warnings decreased by:
[20:25:11] <PJBoy> *drum roll*
[20:25:24] <PJBoy> -10
[20:25:30] <PJBoy> D:
[20:25:50] <rpav> haha
[20:25:57] *** Quits: pingpongball (~pingpongb@27.34.47.17) (Quit: :))
[20:26:17] <rpav> what kind of warnings
[20:26:35] <rpav> and what did clang-tidy fix (i dont' think i ever actually apply its fixes directly, they can often lead to trouble)
[20:27:23] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:28:12] <PJBoy> clang-tidy made fixes along the lines of not returning const values, using nullptr instead of NULL, removing else statements where the if part ends in a return
[20:28:36] <PJBoy> added even more parentheses to macros
[20:29:06] <PJBoy> I'll need to do a diff on the build logs to see what the new warnings are
[20:29:25] <pulse> i find most warnings go away after a tactically placed #pragma warning
[20:31:05] <PJBoy> clang-tidy has no tact
[20:32:16] <pulse> i still don't know what "pragma" means
[20:32:59] <pulse> "pragmatically" doesn't seem related
[20:35:16] <rpav> but it is
[20:35:44] <PJBoy> yeah
[20:35:54] <rpav> it's basically an arbitrary instruction to do some practical thing at a point
[20:36:03] <ville> probably lifted from ada
[20:36:06] <PJBoy> it's the compiler getting to call the shots
[20:38:10] <ville> http://archive.adaic.com/standards/83rat/html/ratl-02-01.html : "A pragma (from the Greek word meaning action) is used to direct the actions..."
[20:41:58] *** Joins: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[20:42:23] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[20:44:14] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[20:44:52] *** Joins: c4017w (~c4017@199.119.235.154)
[20:45:46] *** Joins: pingpongball (~pingpongb@27.34.47.17)
[20:52:18] <pulse> the site ville linked won't load but i'll take your word for it :p
[20:52:55] <pulse> (#action once doesn't make any sense either)
[20:53:31] *** Quits: bobb_ (~bobb_@dslb-092-074-237-154.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:04:19] <ville> why do you think it should make sense as an english "sentence"?
[21:04:36] <ville> you're one of those people who uses and, or...?
[21:06:13] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:08:14] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[21:08:22] *** Quits: Inline__ (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[21:10:39] *** Quits: pingpongball (~pingpongb@27.34.47.17) (Quit: Client closed)
[21:12:33] <PJBoy> reverse the order though
[21:12:41] <PJBoy> "once #pragma"
[21:12:46] <PJBoy> then you're trending on C++ twitter
[21:15:56] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[21:21:48] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 250 seconds)
[21:23:50] *** Quits: calamity-jane (~calamity-@user/calamity-jane) (Quit: Client closed)
[21:25:11] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8d4d:eeb3:fd66:5d10)
[21:29:14] <Friithian> still sad there isn't a #pragma twice
[21:29:48] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:30:00] <PJBoy> still waiting for the two definition rule to get proposed
[21:30:42] *** Joins: magla (~gelignite@55d450c5.access.ecotel.net)
[21:32:30] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[21:40:09] <InPhase> Really all that we ever needed was a consistent definition rule.
[21:40:31] <InPhase> If two definitions are byte-for-byte and symbol-for-symbol identical, there isn't really any ambiguity.
[21:41:04] <ville> the check for that would have been too costly in olden times
[21:41:24] <InPhase> Which should result in a one-definition recommendation for managing compile times.
[21:41:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:41] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:41] *** ChanServ sets mode: +v npaperbot
[21:42:39] <InPhase> If someone wants to toss some rare-case int into a header, and follow ODR for everything else, what does that really hurt?
[21:43:43] <InPhase> And then -WODR to check for violations that will slow compile time.  :)
[21:45:34] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:46:48] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[21:47:26] <PJBoy> can do that if you want
[21:47:29] <PJBoy> inline and all that
[21:47:46] <PJBoy> modules too
[21:48:15] <pulse> correct me if i'm wrong but
[21:48:25] <pulse> there are very few occasions where you actually wouldn't want an include guard
[21:48:40] <PJBoy> in a header file, yeah
[21:48:58] <PJBoy> though I guess it wouldn't hurt in a source file
[21:49:15] <pulse> include guards in source files?
[21:49:23] * pulse flies away sideways
[21:49:34] <PJBoy> yeah if you put a #pragma once in your source files, it wouldn't hurt
[21:49:42] <PJBoy> would just be redundant
[21:49:52] <pulse> i wonder why we have to put them there to begin with
[21:50:11] <PJBoy> because people have issues with #pragma once
[21:50:31] <PJBoy> which would be the only sane automatic way of doing header guards
[21:51:07] <ville> ...and what's the problem with #ifndef?
[21:51:15] <kalven> people with messed up builds have problems with #pragma once
[21:51:49] <pulse> i thought it might be people who still maintain code from 1993
[21:52:05] <PJBoy> also modules
[21:52:13] <PJBoy> no need for header guards with modules
[21:52:41] <PJBoy> problem with #ifndef is that you have to type it
[21:52:47] <PJBoy> and write a header guard name
[21:52:59] <PJBoy> and that can't be done automatically
[21:53:18] <PJBoy> also lots of people end up using a reserved identifier
[21:53:19] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[21:53:22] <PJBoy> terrible
[21:53:41] <ville> PJBoy: configure your editor
[21:53:42] <PJBoy> ##########################################
[21:53:43] <PJBoy> #
[21:53:54] <PJBoy> woah there, my bad
[21:54:06] <PJBoy> configure my editor how?
[21:54:26] <ville> i don't know. you're the one responsible for your programming environment
[21:54:28] <pulse> next topic: .hpp, useful convention or clown shown from circus
[21:54:40] <ville> .hxx of course
[21:54:44] <PJBoy> the question is why we need to write header guards, not how to write header guards
[21:55:05] <pulse> ugh, hxx
[21:55:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[21:55:58] <pulse> the reason i dislike hpp is it stands for nothing. "header plus plus" isn't a thing
[21:56:01] <kalven> .H
[21:56:14] <pulse> .h is the civilized person's choice
[21:56:19] <stanrifkin_> PJBoy: maybe header guards with an GUID
[21:56:23] <pulse> C ambiguities be damned
[21:56:47] <PJBoy> stanrifkin_, if an automated solution worked, then no one would complain about #pragma once
[21:56:48] <stanrifkin_> PJBoy: .hpp for template headers
[21:57:31] <kalven> my favorite was the headers that old msvc used to (maybe still does?) generate.. it had both header guards with a guid and pragma once.
[21:57:59] <pulse> well guarded
[21:59:56] <PJBoy> it makes sense
[22:00:07] <PJBoy> if the compiler sees #pragma once it can skip the rest of the file
[22:00:20] <PJBoy> compiler has no idea if a header guard will last a whole file or not
[22:00:32] <PJBoy> but it's more robust I guess
[22:00:33] <stanrifkin_> PJBoy: just use #pragma once. who cares about standards. https://en.wikipedia.org/wiki/Pragma_once
[22:00:41] <stanrifkin_> PJBoy: every compiler supports it
[22:00:48] <PJBoy> #pragma once is perfectly standard conforming
[22:00:56] <PJBoy> also I do use pragma once
[22:01:10] <PJBoy> I mean not so much these days now that modules are out
[22:01:38] <stanrifkin_> PJBoy: never got modules working
[22:01:58] <PJBoy> like when I say "people complain about #pragma once", I don't actually know what those complaints are really
[22:02:11] <stanrifkin_> PJBoy: modules are *really* not standard :) at least at the moment..
[22:02:24] <PJBoy> they're not so widespread
[22:02:42] <PJBoy> but they're definitely standard
[22:03:28] <kalven> PJBoy: the compiler can supposedly get confused when you have a weird setup with symlinks and such, and the same header gets included twice through different paths
[22:03:36] <kalven> and the compiler can't figure out that they're actually the same file
[22:08:01] <PJBoy> >:(
[22:08:54] <kalven> I'd say "dont do that", but there are probably shops that have a build setup that absolute relies on this
[22:09:39] <PJBoy> seems like there should be a solution that compilers can apply for file identity
[22:09:49] <PJBoy> isn't it possible to resolve any symlink to its real file
[22:10:35] <PJBoy> not if the file comes in through a stream I guess
[22:10:53] <PJBoy> unity builds might also take issue with pragma once
[22:11:02] <rpav> `realpath` and the canonicalization of filenames is a thing
[22:11:38] <rpav> it can't handle every weird and hypothetical case, but one can _also_ define a set of rules that say "this works as long as you don't hard link a file to a different path" or somesuch :P
[22:11:55] <rpav> (though that could also be handled by inode checking)
[22:12:40] *** Quits: proller (~p@2a02:6b8:0:40c:9cfc:cea6:bb70:e1d9) (Ping timeout: 268 seconds)
[22:13:02] <kalven> "but I network mount this directory multiple times through different ways"
[22:13:15] <rpav> the "really weird" case is like, remote mount a local subtree or similar "obscure any reasonable identity check," but again .. specifically state that you should avoid these things and get on with it, rather than trying to save the user from themselves
[22:15:30] <ville> PJBoy: gcc does similar for header guards
[22:15:34] *** Quits: sbrothy (~sbrothy@192038134048.mbb.telenor.dk) (Read error: No route to host)
[22:15:38] <ville> (skips processing)
[22:15:59] <PJBoy> it needs to process the file at least once
[22:16:38] <PJBoy> that's once more than #pragma once
[22:19:18] <pulse> it's a good thing people don't write code in headers
[22:19:19] <pulse> oh wait
[22:19:40] *** Joins: c4017w_ (~c4017@2605:8d80:4c0:ae98:794a:3b8:27c3:7bb3)
[22:20:49] *** Quits: c4017w (~c4017@199.119.235.154) (Read error: Connection reset by peer)
[22:22:53] *** Quits: c4017w_ (~c4017@2605:8d80:4c0:ae98:794a:3b8:27c3:7bb3) (Read error: Connection reset by peer)
[22:23:58] *** Joins: c4017w (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce)
[22:25:47] <stanrifkin_> PJBoy: there is something like #import by gcc i found
[22:26:50] <PJBoy> documented in https://gcc.gnu.org/onlinedocs/gcc-4.1.2/cpp/Obsolete-once_002donly-headers.html :/
[22:27:42] <stanrifkin_> PJBoy: ah obsolete
[22:27:47] <PJBoy> taken from objective C or so
[22:30:08] <stanrifkin_> PJBoy: tried #pragma once with Borland 5.02 now. Doesn't work. So save bet it is still header guards.
[22:30:20] <PJBoy> hah
[22:30:30] <PJBoy> not working in borland is more of a feature than a bug
[22:32:48] <kalven> apparently libc++'s std::sort had O(n^2) worst case complexity (up until a couple of months ago)
[22:33:38] <PJBoy> so much for stdlib authors being able to code better than use lowly mortals :/
[22:33:41] <stanrifkin_> kalven: O(log n) now?
[22:33:45] <PJBoy> *us
[22:34:00] <PJBoy> O(log n) would be quite impressive
[22:34:05] <kalven> nlogn
[22:34:20] <stanrifkin_> yes meant O(nlogn)
[22:35:09] <InPhase> PJBoy: /* Preconditions:  The first n-log(n) values must be pre-sorted. */
[22:35:30] <PJBoy> even then
[22:35:48] <InPhase> Right...  I guess that's log(n)log(log(n))
[22:36:16] <stanrifkin_> O(N·log(N)), where N = std::distance(first, last) comparisons.(since C++11)
[22:36:20] <stanrifkin_> from cppreference.com
[22:36:40] <PJBoy> m log(m) where m = n - log(n) is n log(n - log(n)) - log(n) log(n - log(n)) right?
[22:37:01] <PJBoy> not great
[22:37:04] <InPhase> Where m = log(n)
[22:37:13] <PJBoy> oh right, blurgh
[22:50:44] *** Joins: varioust_ (~varioust@gateway/tor-sasl/varioust)
[22:54:14] <kalven> the bug, in case someone is interested: https://bugs.llvm.org/show_bug.cgi?id=20837
[22:58:16] <TinoDidriksen> That's a very long time to fix a rather plain conformance issue.
[23:01:07] <stanrifkin_> which could be just copied over from libstdc++ yeah
[23:01:32] <CarloWood> I guess that   int i = test ? f() : 0;   is not branchless?
[23:02:09] <TinoDidriksen> They can't copy over libstdc++ - incompatible license.
[23:02:19] <CarloWood> That is, it is not allowed to call f() unless test is true, no?
[23:02:20] <cbreak> CarloWood: depends on what you mean with branchless
[23:02:36] <cbreak> it will not call f() unless test is true.
[23:02:52] <CarloWood> cbreak: avoiding a cache miss because you aren't predicting a branch
[23:02:52] <TinoDidriksen> That's not branchless - that's whether it short-circuits.
[23:03:19] <TinoDidriksen> ?: is still subject to branch prediction.
[23:03:22] <cbreak> if you call a function, cache misses might not be your biggest concern
[23:03:27] <CarloWood> If you do:  int i = test ? 1 : 2;  then you get a conditional move, which is branchless.
[23:03:43] <PJBoy> ternary may or may not be branchless
[23:03:48] <PJBoy> just like any other possibly branchy construct
[23:03:51] <cbreak> CarloWood: that's compiler optimization
[23:03:55] <cbreak> not a language level feature
[23:04:01] <CarloWood> I know
[23:04:13] <cbreak> if you write it with if / else, you get the same thing I bet.
[23:04:29] <cbreak> even though if / else is not branchless.
[23:04:40] <CarloWood> I guess you have a point there.
[23:05:18] <cbreak> if you want it branchless, write something like int i = test * 1 + (1 - test) * 2;
[23:05:38] <CarloWood> I'm asking because I want to avoid calling a virtual function due to the indirection(!) even on the fast path where the test is 0.
[23:05:45] <PJBoy> if you want it truly branchless, write inline ASM
[23:06:23] <CarloWood> I started with: int converted_modifiers = modifiers ? convert(modifiers) : 0;
[23:06:24] <cbreak> the reason to write branchless code isn't performance I think
[23:06:37] <cbreak> it's protection against timing attacks
[23:07:08] <CarloWood> but then I thought... if that tries to be branchless, it might start evaluate convert() even before testing if modifiers is zero or not :P
[23:07:16] <PJBoy> is cmov constant time?
[23:07:20] <cbreak> it's not allowed to CarloWood.
[23:07:44] <rpav> is the optimizer optimizing something branchless into a branch?
[23:08:14] <cbreak> CarloWood: after all, you can write code like if (ptr) foo(*ptr); else foo();
[23:08:27] <CarloWood> cbreak: it would be allowed as long as it is able to dump everything that it did and return to the state before the 'branch'. I suppose that isn't practically happening with a function call though.
[23:08:31] <cbreak> rpav: if it's too clever for its own good, possible
[23:08:50] <cbreak> CarloWood: you're thinking about speculative execution?
[23:08:56] <cbreak> that it can do in any situation
[23:08:58] <CarloWood> I suppose so
[23:09:05] <rpav> cbreak: not necessarily .. very likely if it does, it knows better
[23:09:05] <cbreak> but it's irrelevant for correctness
[23:09:19] <cbreak> speculative execution is only a problem if you care about safety against data disclosure
[23:09:36] <cbreak> there are ways to suppress it via ... some methods... but it's bad for performance to do that
[23:09:49] <cbreak> rpav: not really
[23:10:02] <cbreak> rpav: there have been security problems because compilers were too smart
[23:10:10] <kalven> if only there was a benchmark
[23:10:11] <cbreak> and added branches where there shouldn't have been any
[23:10:29] <cbreak> which improved performance of the code at the cost of making it insecure
[23:10:47] <CarloWood> Stupid thing is, I changed it into: int converted_modifiers = 0; if (modifiers) converted_modifiers = convert(modifiers);   because then suddenly I feel secure that if the if() is always false it will be predicted correctly :P
[23:11:08] <rpav> but it probably behaved otherwise correctly, and what's secure changes a lot over time
[23:11:13] <cbreak> ternary and if / else are both short circuiting
[23:11:25] <cbreak> || and && are too, if not overloaded.
[23:11:27] <rpav> and it was very probably faster, which is the point here .. not whether it's secure
[23:11:46] <kalven> CarloWood: I think you have the wrong idea about how code is optimized in the backend
[23:12:08] <cbreak> rpav: security is the reason for the existence of some code
[23:12:24] <cbreak> if the compiler breaks this, then it's bad.
[23:12:31] <rpav> cbreak: that's nice and even more irrelevant
[23:12:36] <CarloWood> kalven: maybe that's why I used the word "Stupid".
[23:13:14] <cbreak> CarloWood: anyway, as I said above, if you want it branchless, don't use branches
[23:13:36] <CarloWood> I don't want branchless :/ .. I was afraid it was branchless.
[23:13:52] <CarloWood> I want something that is 1 clock cycle when modifiers has been 0 for a while
[23:14:05] <rpav> wait you're trying to _make_ it branch? o.O
[23:14:45] <cbreak> you must have a really slow CPU if a branch only takes one clock cycle
[23:14:49] <leonardus> more C++ cat https://usercontent.irccloud-cdn.com/file/1UQuFjp6/PXL_20220126_193634834.jpg
[23:18:01] <PJBoy> that cat has a face that says "yeah I would rely on argument dependent lookup"
[23:20:17] *** Quits: hexingb (~hexingb@111.32.64.60) (Ping timeout: 240 seconds)
[23:20:43] *** Joins: proller (~p@2a02:6b8:b081:8832::1:8)
[23:23:03] *** Joins: cq-work (~Z_Lund@user/cq-work)
[23:23:18] <cq-work> Anyone familiar with precompiled headers and g++?
[23:23:50] <cq-work> I just stuck a ton of standards headers into a gch file and it sped up compilation by quite a bit.
[23:24:03] <cq-work> I was always under the impression that compilers already did this to an extent.
[23:24:14] <lxsameer> hey folks, I'm building a program with cmake and clang (it is installed local to my user and its bin dir is in the PATH), the program compiles just fine, but when i want to run it, dynamic linker can't find the compiler_rt.so, what would the problem?
[23:26:17] <cbreak> cq-work: yes. They suck.
[23:26:37] <kit-ten> lxsameer where is compiler_rt.so
[23:26:41] <cbreak> at least they did back when I had to use windows with visual studio
[23:28:39] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:32:51] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:33:57] *** Quits: MatSharrow (~matthew@105.20.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[23:34:18] *** Joins: andreyv (~andrey@user/andreyv)
[23:36:07] <cq-work> Well, I was sort of curious if like... I should be trying to precompile the standard headers myself. CMake provides a mechanism to do that for me now adays as well.
[23:36:32] <cq-work> Feels like I'm missing a part of the puzzle here though.
[23:37:13] <cbreak> in my experience, precompiled headers are annoying.
[23:37:25] <cbreak> I always had to clean up behind the mess the windows devs made
[23:37:47] <cbreak> because their shitty compiler was too dumb to complain about missing includes in their code, because those headers were in the precompiled header
[23:37:53] <cbreak> no idea if that's better nowadays.
[23:38:50] *** Joins: Uswald (~leandre@2a01cb040075f900e0e12301ffd548a3.ipv6.abo.wanadoo.fr)
[23:38:50] *** Quits: Uswald (~leandre@2a01cb040075f900e0e12301ffd548a3.ipv6.abo.wanadoo.fr) (Changing host)
[23:38:50] *** Joins: Uswald (~leandre@user/Uswald)
[23:39:44] <cq-work> Like... it looks like VC++ doesn't do that by default. I guess I've just had the wrong notion that compilers did anything at all to help here.
[23:40:14] <cq-work> That can't even figure out where I got this idea from
[23:43:02] <Alipha> leonardus: you should get a cow and name him Koenig
[23:43:24] <leonardus> Alipha: an emu
[23:43:25] <leonardus> E. Moo
[23:44:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:45:44] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:46:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:47:14] <whupdup> Since you mentioned pch, are there any good resources to learn more about them? specifically when to use them/when not to use them
[23:47:47] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:48:34] <rpav> if you have annoyingly long compile times, consider them
[23:49:01] <rpav> you need a fair chunk of your headers to be common and unchanging
[23:49:03] <cbreak> if you have that, consider including less stuff in headers
[23:49:13] <rpav> another possibly-valid solution
[23:49:13] <cbreak> and including stuff in source files only if needed
[23:49:29] <rpav> sometimes you have a lot of stuff that basically everything needs though ;/
[23:49:37] <PJBoy> just use modules
[23:49:47] <cbreak> the main problem with pch in my experience is that they hide bugs
[23:49:50] <rpav> maybe by 2030
[23:50:01] <cbreak> sometimes they also caused bugs, but that's rarer
[23:50:03] <rpav> i don't recall bug-hiding, how does that work
[23:50:22] <cbreak> rpav: forgetting to include headers
[23:50:28] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (Quit: you can't fire me!)
[23:50:45] <rpav> they _will_ interfere with clangd, it _really_ doesn't like pch, so you may have to manually do work on compile_commands.json
[23:50:45] <cbreak> -> still works, because the pch thing is somehow force-included everywhere
[23:50:53] <lxsameer> kit-ten: in my llvm installation in my home dir
[23:51:08] <kit-ten> aha
[23:51:19] <kit-ten> copy it to
[23:51:21] <kit-ten> uhh
[23:51:22] <rpav> cbreak: ah, that's not really a bug in the regular sense, and you would pick up on it with clangd
[23:51:52] *** Joins: c4017w_ (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce)
[23:52:07] <rpav> i encountered that from time to time but that and like clang-tidy will basically solve the issue
[23:52:14] <kit-ten> /usr/local/lib
[23:52:15] <cbreak> I'd classify missing includes as bug
[23:52:19] <rpav> but you're not
[23:52:22] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[23:52:38] *** Joins: c4017w__ (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce)
[23:52:47] <cbreak> it's a compilation-breaking bug
[23:52:49] <rpav> you're telling the compiler to include things for you, automatically, and the fact it breaks if you stop telling that is programmer error
[23:52:54] *** Quits: varioust_ (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[23:53:17] *** Joins: Kit (~NotApplic@2603-6010-a103-1f2e-4e6d-cc75-dd88-8b0f.res6.spectrum.com)
[23:53:19] <rpav> but again .. use of the tools you should be using anyway makes it easy to solve .. hopefully modules will bring full integration
[23:53:28] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6405:7d50:9b0e:b742)
[23:53:28] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6405:7d50:9b0e:b742) (Changing host)
[23:53:28] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:55:01] *** Quits: c4017w (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce) (Ping timeout: 240 seconds)
[23:56:02] *** Quits: c4017w_ (~c4017@2605:8d80:4e1:336:6462:cec4:311f:f3ce) (Ping timeout: 240 seconds)
[23:56:18] <cq-work> Modules would be nice but won't fix codebases with 20 years of cruft.
[23:56:34] <rpav> nothing ever does
[23:56:46] <rpav> it's a big enough win a codebase can last that long
[23:59:47] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
