[00:01:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:01:41] *** Parts: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (ERC (IRC client for Emacs 27.2))
[00:02:06] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[00:03:25] *** Joins: Oladon (~olad@98.43.81.226)
[00:04:50] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[00:13:10] *** Joins: Bike (~Glossina@71.69.170.70)
[00:13:11] *** ChanServ sets mode: +o Bike
[00:25:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[00:27:51] <theothornhill> I didn't find any frameworks for using GraphQL in common lisp, so I made one.  It isn't done yet, but it works.  It follows the spec closely, and aims to be fully compliant when I'm done.  However, I'd love to get feedback so that I can improve things before the apis settle too hard.  So, shamefully posting it here. Sorry if it is the wrong forum :)
[00:28:00] <theothornhill> https://sr.ht/~theo/gql/
[00:29:10] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Quit: Leaving)
[00:29:21] <theothornhill> There's also some crude docs here, if you're interested: https://man.sr.ht/~theo/gql/
[00:37:13] <stylewarning> (In case you didn't see on Twitter or Reddit:) I wanted to invite Lisp IRC to a small Advent of Code contest to use Coalton (a DSL in CL) with a variety of prize categories. Check it out :) https://coalton-lang.github.io/20211129-aoc-contest/
[00:38:58] <jasom> stylewarning: if my ML knowledge is "I did one OcaML tutorial 20 years ago" what's the time to be able to actually do stuff in Coalton?
[00:42:16] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 264 seconds)
[00:43:03] <rotateq> would be very interesting for me like coalton on its own, but i just have Haskell and not ML experience beside the main stuff :)
[00:45:25] <rotateq> oh cool, you built a parser combinator for quil with it
[00:49:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:52:00] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Ping timeout: 276 seconds)
[00:52:35] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[00:55:56] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[00:59:11] *** Joins: gaqwas (~john@dynamic-077-007-037-228.77.7.pool.telefonica.de)
[01:00:29] <stylewarning> jasom: Probably within an hour, especially if you grok type classes OK (which are like an 'interface', 'protocol', or 'trait')
[01:01:05] <stylewarning> rotateq: Coalton's type system is like Haskell's, not ML's
[01:01:33] <stylewarning> So, type classes, instances, (optionally: monads), all that
[01:02:23] <rotateq> okay right i remember when i read a bit about it last year
[01:03:26] <stylewarning> rotateq: Yeah it changed a lot since that time. You might be interested in reading https://coalton-lang.github.io/20211010-introducing-coalton/
[01:03:58] <rotateq> I now stumbled again over Quil too :)
[01:04:04] <rotateq> and thank you
[01:07:06] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[01:08:39] <stylewarning> jasom: I might be underestimating you, an hour is maybe too much. Knowing all the other stuff you've done, reading this is probably 10 minutes or less :) https://github.com/coalton-lang/coalton/blob/main/docs/intro-to-coalton.md
[01:12:16] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 264 seconds)
[01:13:24] *** Quits: yewscion (~yewscion@52.94.133.128) (Quit: Connection closed)
[01:14:42] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:23:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:23:40] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 264 seconds)
[01:26:43] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[01:30:39] *** Quits: Inline (~Inline@aftr-37-201-240-100.unity-media.net) (Quit: Leaving)
[01:33:53] *** Joins: Catie (~user@user/catie)
[01:37:26] *** Quits: pve (~pve@37-136-16-196.rev.dnainternet.fi) (Quit: leaving)
[01:40:39] <Xach> problems in my .hu-niverse
[01:46:16] *** Joins: danirukun (~user@185.68.250.217)
[01:47:35] *** Quits: danirukun (~user@185.68.250.217) (Quit: ERC (IRC client for Emacs 29.0.50))
[01:48:07] *** Joins: dre (~dre@2001:8003:c932:c301:a3be:66e5:a03e:cca3)
[01:48:31] *** Joins: danirukun (~user@185.68.250.217)
[01:48:40] *** Parts: danirukun (~user@185.68.250.217) ()
[01:49:46] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[01:58:16] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:59:33] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:01:19] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[02:02:57] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[02:03:50] *** Joins: dra (~dra@2a04:4540:6406:a700:fd74:fec5:b924:3a62)
[02:08:11] *** Quits: dre (~dre@2001:8003:c932:c301:a3be:66e5:a03e:cca3) (Remote host closed the connection)
[02:10:56] *** Joins: dre (~dre@2001:8003:c932:c301:1276:3400:25a9:855)
[02:12:10] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:14:56] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[02:19:39] <Guest74> yeesh, i can't even complete all 25 in CL.
[02:20:35] <dre> all 25 what?
[02:22:24] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[02:24:55] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[02:26:45] *** Quits: random-nick (~random-ni@87.116.165.83) (Read error: Connection reset by peer)
[02:27:17] *** Joins: yewscion (~yewscion@52.94.133.128)
[02:29:40] <Guest74> AoC
[02:30:34] <rotateq> and how do you know that now?
[02:31:17] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 256 seconds)
[02:34:27] <dre> yeah nice
[02:34:36] <dre> I'm looking to do AoC with common lisp
[02:34:50] <dre> I know practically nothing about common lisp, wish me luck guys :)
[02:36:11] <rotateq> dre: if you have a question right now, go on :) no guarantuee i can answer it fully
[02:36:40] <dre> :p nah not at the moment
[02:39:51] <rotateq> how long now since you started this wonderful journey?
[02:41:11] *** Quits: dra (~dra@2a04:4540:6406:a700:fd74:fec5:b924:3a62) (Remote host closed the connection)
[02:41:25] <dre> maybe a month in earnest. but progress is slow after a long day of procedural programming work
[02:41:35] <dre> following through land of lisp and practical common lisp books
[02:50:07] <dre> rotateq, just then I tried this without doing any googling, am I doing it right? https://dpaste.org/uDve
[02:50:17] <rotateq> PCL is a good start :)
[02:50:38] <dre> also sorry about indents. I'm using vim as my editor and we all know what a bad idea that is
[02:51:11] <rotateq> there is also slime for vim
[02:51:38] <rotateq> but me and some other people use spacemacs, it comes with the editor part as vim-like
[02:51:43] <dre> I'm using vim-slime. it's by far the best solution I've come across ( using tmux /sbcl as the repl
[02:52:12] <dre> I've tried it and it just doesn't quite feel the same. I do keep thinking that I might one day make the change to emacs, but.. i dunno when. time investments and all that.
[02:52:56] <rotateq> those things pay back in the long run
[02:53:12] <dre> mm. I suppose you're right
[02:53:17] <rotateq> hmm, this nested mapc
[02:54:53] <Guest74> anybody have an AoC utils they use?  I thought I had a bunch but looks like I just got stuff to load and parse the inputs.
[02:58:36] *** Quits: hisacro (~OBSD@my.displ.nl) (Ping timeout: 268 seconds)
[02:59:27] <Bike> this is a bit inefficient, since it will redo sums that didn't work. you could do (block nil (mapl (lambda (ls) (let ((item (first ls))) (mapc (lambda (x) (when (= (+ item x) 2020) (return (* item x)))) (rest ls))))))))))))))
[02:59:41] <Bike> not that it matters with this small a list, but maybe it's supposed to be scaled up
[03:01:18] *** Joins: hisacro (~OBSD@my.displ.nl)
[03:01:19] *** Quits: gaqwas (~john@dynamic-077-007-037-228.77.7.pool.telefonica.de) (Ping timeout: 256 seconds)
[03:04:28] *** Quits: cosimone (~user@93-47-231-3.ip115.fastwebnet.it) (Ping timeout: 264 seconds)
[03:04:38] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[03:14:50] <Xach> which ones will it redo?
[03:15:38] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[03:16:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[03:17:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:25:51] *** Joins: s-liao (~s-liao@101.86.99.70)
[03:30:03] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (*.net *.split)
[03:30:03] *** Quits: yewscion (~yewscion@52.94.133.128) (*.net *.split)
[03:30:03] *** Quits: Catie (~user@user/catie) (*.net *.split)
[03:30:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[03:30:03] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[03:30:03] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[03:30:03] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[03:30:03] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (*.net *.split)
[03:30:03] *** Quits: igemnace (~ian@user/igemnace) (*.net *.split)
[03:30:03] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (*.net *.split)
[03:30:03] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (*.net *.split)
[03:30:03] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[03:30:03] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (*.net *.split)
[03:30:03] *** Quits: winning-luser (~winning-l@2601:8c1:80:70d0::756) (*.net *.split)
[03:30:03] *** Quits: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (*.net *.split)
[03:30:03] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: karlosz (~karlosz@47.151.136.69) (*.net *.split)
[03:30:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[03:30:03] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:03] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[03:30:03] *** Quits: resttime (~rest@2604:a880:400:d0::1b48:d001) (*.net *.split)
[03:30:03] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[03:30:03] *** Quits: sander (~sander@user/sander) (*.net *.split)
[03:30:04] *** Quits: bremner (~bremner@notmuch/developer/bremner) (*.net *.split)
[03:30:04] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (*.net *.split)
[03:30:04] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (*.net *.split)
[03:30:04] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[03:30:04] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[03:30:11] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[03:30:19] *** Joins: aeth (~aeth@69.250.185.173)
[03:30:19] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:30:23] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:30:25] *** Quits: aeth (~aeth@69.250.185.173) (Changing host)
[03:30:25] *** Joins: aeth (~aeth@user/aeth)
[03:30:28] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:30:43] *** Joins: igemnace (~ian@112.200.164.27)
[03:30:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:01] *** Joins: sterni (~lukas@user/sterni)
[03:32:11] *** Joins: sander (~sander@user/sander)
[03:32:14] *** Joins: Colt (~Colt@user/colt)
[03:32:19] *** Joins: resttime (~rest@2604:a880:400:d0::1b48:d001)
[03:32:30] *** Joins: bremner (~bremner@notmuch/developer/bremner)
[03:32:44] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[03:33:00] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[03:33:03] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[03:33:07] *** Joins: jgkamat (~jay@user/jay)
[03:33:17] *** Joins: remexre (~remexre@user/remexre)
[03:33:55] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[03:34:11] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 256 seconds)
[03:34:12] *** Quits: ahc (~ahc@121.98.229.241) (Ping timeout: 256 seconds)
[03:34:53] <rotateq> dre: do you already know the macros WHEN and UNLESS ? maybe better talk about this in #clschool
[03:35:13] <dre> not quite, I'll join :)
[03:35:16] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[03:35:24] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[03:38:32] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 240 seconds)
[03:39:23] *** Joins: Alfr (~Alfr@user/alfr)
[03:46:37] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[03:47:08] *** Joins: random-nick (~random-ni@87.116.180.220)
[03:49:19] *** Joins: zoglesby (f0f8ca1525@user/zoglesby)
[03:55:01] <kagevf> dre: I got into emacs using org mode first to take notes ... it was helpful for getting used to emacs itself ... a few months later I started learning CL and was already accustomed to using emacs
[03:55:26] <kagevf> ... so that's one way to break up the learning curve a little bit
[03:55:49] <dre> my issue is that I'm already accustomed to vim
[03:57:01] <kagevf> dre: I've been using Vim for 10 years. at first I tried spacemacs, but it was too slow (for my setup anyway) ... I just went with native emacs key-bindings ... it's not that big a deal, and your muscle memory catches up pretty quick
[03:57:37] <kagevf> I use emacs for CL and org mode, and vim (or something with a vim plugin) for everything else ... it works out alright
[03:58:49] <kagevf> I get the feeling that emacs has been fine-tuned over the years to be really good at editing sexp's ... so IMO it's worth making the investment to learn it if you plan on hacking a lot of Lisp
[03:59:10] <kagevf> plus the slime integration is great too , of course
[03:59:15] <dre> yeah that's what I was worred about xD
[03:59:22] <dre> it seems fine-tuned
[03:59:34] <dre> but I mean, if I /can/ learn /both/ then maybe that's not a bad thing
[03:59:53] <dre> or just learn enough elisp to start making my favourite nvim plugins on emacs
[04:00:14] <dre> but yeah, not sure, bit by bit, I'm sure this won't be the last time I hear about it
[04:00:14] <kagevf> emacs key bindings pop up in a lot of places too ... like bash, tmux, apparently in Apple GUI (not sure it's what I heard)
[04:00:20] *** Joins: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr)
[04:00:30] <dre> mm
[04:01:09] <rotateq> and the other big IDEs try being like it :)
[04:01:20] <semz> There is a SLIME knockoff for Vim (SLIMV? VLIME? something like that), but I can't vouch for its quality or how it compares to the original.
[04:01:38] <pjb> dre: I used vi a long time ago, on A/UX.  Then I switched to NeXTstep and emacs.  It's possible!
[04:02:04] <dre> semz, it's shit
[04:02:09] <dre> I've tried it.
[04:02:12] <semz> lmao
[04:02:14] <rotateq> and you get the powerful butterfly command, but use it wisely
[04:02:46] <semz> I was in a similar situation as you when I started out and have to say that you can get gradually used to Emacs
[04:02:54] <dre> the nicest I've found is "vim-slime" but it means you have to run sbcl in a tmux split, and then vim-slime will use a tmpfile to write to the other tmux terminal
[04:03:11] <dre> it's great, except I don't get the little explainer thingies like slime gets
[04:04:13] <kagevf> in emacs / slime you can print an object in the repl, and then "inspect" it ... C-c C-v i ... that's pretty useful
[04:04:25] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 265 seconds)
[04:04:32] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:04:50] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 256 seconds)
[04:04:54] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[04:05:12] <dre> my only real issue is that python support on emacs seems to be a bit sub-par? or atleast the LSP support.
[04:05:28] <dre> and I use python at work so i need to get /comfortable/ relatively quickly
[04:05:32] <dre> I'll try it again dw
[04:05:39] <kagevf> just stick with vim for python :)
[04:06:24] <kagevf> or use hylang! :)
[04:06:34] <dre> :P \
[04:06:47] <rotateq> or this cl-python
[04:07:44] <rotateq> that's what you meant with "procedural programming work"
[04:09:51] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:09:59] *** Quits: VincentVega (~user@212.241.28.73) (Remote host closed the connection)
[04:10:29] *** Joins: etiago (~etiago@user/etiago)
[04:10:32] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[04:13:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:17:22] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:17:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:25:14] *** Joins: ldb (~user@user/ldb)
[04:25:19] <ldb> good morning
[04:25:19] <kagevf> "those ML models aren't going to train themselves"
[04:25:38] <GreaseMonkey> someone mentioned VLIME earlier... my experience is it has a nasty habit of forgetting how to indent Lisp code
[04:25:44] <GreaseMonkey> wait or was it SLIMV
[04:25:46] <GreaseMonkey> whichever the older one is
[04:25:52] <GreaseMonkey> i *think* it was SLIMV
[04:26:35] <GreaseMonkey> if it weren't for that it'd be fine, but nope, that bug renders the whole damn thing unusable
[04:27:40] *** Joins: ahc (~ahc@121.98.229.241)
[04:28:27] <ldb> one good thing for emacs is there is no need for a seperated irc client
[04:28:40] <kagevf> I think vim has a built-in lisp mode, rigtht? I wonder if that indents properly ...
[04:30:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:30:42] <ldb> nope. sly gets better indenting by communicating with common lisp subprocess, I guess it can not be get right if having no specifc knowlege about common lisp
[04:32:39] <kagevf> I see
[04:33:08] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[04:42:19] *** Joins: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net)
[05:00:33] *** Joins: asarch (~asarch@187.143.19.32)
[05:02:51] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 245 seconds)
[05:03:59] *** Quits: random-nick (~random-ni@87.116.180.220) (Ping timeout: 252 seconds)
[05:10:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[05:11:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:12:12] <LoopMacro> Recommendations on a unit test framework? I used LISP-UNIT a few years ago. Others I should consider?
[05:13:08] <hayley> I usually use Parachute. But there is still no feature that has it print "Where we dropping, fellas" before running tests.
[05:13:23] <hayley> (s/fellas/boys/ to be accurate)
[05:14:01] <etimmons> Second parachute
[05:16:15] <stylewarning> We use FIASCO
[05:16:41] <LoopMacro> Much appreciated. I see a new one called ROVE, but don't yet know anything about it.
[05:16:45] <stylewarning> works well enough for CI/CD, as well as interactive debugging
[05:18:41] <LoopMacro> Just found this: https://sabracrolleton.github.io/testing-framework
[05:18:42] <jeosol> stylewarning: was last comment regarding FIASCO? or ROVE
[05:19:56] <hayley> When I was working on the SICL hash tables, which had tests using Lisp-Unit, I ported the tests to Parachute, and then ported them back when I was done working on them. I don't remember why.
[05:21:39] <stylewarning> jeosol: Sorry, FIASCO
[05:22:18] <stylewarning> But i've been using FIASCO for 6-ish years now so maybe some cooler things exist
[05:22:20] <jeosol> stylewarning: thanks, no need to apologize; I was just confused by the sequence of messages
[05:22:40] <jeosol> never used it. I have recently gone back to using fiveam
[05:22:57] <jeosol> but not in a full CI/CD workflow, just running simple system level tests. I will like to get to the former
[05:23:35] <LoopMacro> In the summary of the link I posted, the author lists Parachute, Fiasco and LispUnit2 as #1, #2, and #3, respectively.
[05:24:46] <stylewarning> Let me see if I can find some cool looking test output
[05:26:26] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[05:26:56] *** Quits: asarch (~asarch@187.143.19.32) (Quit: alice.)
[05:29:01] <jeosol> LoopMacro: Thanks for that information
[05:29:06] <stylewarning> Not as cool as I thought it might look. https://usercontent.irccloud-cdn.com/file/7TNLrpkM/1638323934.JPG
[05:29:39] <jeosol> stylewarning: that's from FIASCO?
[05:29:52] <hayley> Needs more RGB
[05:29:52] <LoopMacro> jeosol: You are welcome.
[05:30:41] *** Quits: igemnace (~ian@112.200.164.27) (Changing host)
[05:30:41] *** Joins: igemnace (~ian@user/igemnace)
[05:30:57] <stylewarning> jeosol: yes. hayley: I don't know if gitlab runners will display color
[05:31:00] <jeosol> LoopMacro: I should take a look at that sabracrolleton link. He has done useful comparisons in the past (json, logging, and unittest). I like to see the updated information on testing
[05:31:07] <stylewarning> github actions *
[05:31:33] <stylewarning> Line 5674 is pretty marvelous https://usercontent.irccloud-cdn.com/file/yd6hMVkP/1638324077.JPG
[05:31:51] <stylewarning> but that's just because of a cool developer, not fiasco
[05:32:57] <phantomics> I just discovered how inconsistent (alphanumericp) is between implementations, they have widely varying ideas of what an alphanumeric char is
[05:33:24] <phantomics> You can count the matching char codes with (progn (defvar *aclist* (loop :for i :below (expt 2 16) :when (and (code-char i) (alphanumericp (code-char i))) :collect i)) nil)
[05:33:39] <hayley> Unicode fun?
[05:34:26] <phantomics> The lengths for different implementations are SBCL : 49088 CCL : 48391 ECL : 48757 ABCL : 49142 Allegro : 65438 LW : 124
[05:35:01] <phantomics> Allegro counts practically everything in UTF-8 as alphanumeric, the exceptions are mostly just characters on the keyboard: !, &, > etc.
[05:35:31] <phantomics> But zodiac signs, box-drawing characters and others are all alphanumeric
[05:35:55] <stylewarning> phantomics: eek
[05:36:00] <phantomics> Meanwhile in LW, only these chars count: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ
[05:36:34] <stylewarning> I thought LW had a sizable Russian user base
[05:36:47] <phantomics> Not even a Greek userbase apparently
[05:41:53] *** Joins: sheb (~sheb@31.223.228.71)
[05:44:04] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[05:44:20] *** Joins: sheb (~sheb@31.223.228.71)
[05:45:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[05:46:56] *** Quits: FragmentedCurve (~FC@pool-100-2-232-17.nycmny.fios.verizon.net) (Quit: Lost terminal)
[05:51:15] *** Joins: ldb (~user@user/ldb)
[05:52:30] *** Quits: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:55:51] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[06:01:37] *** Joins: ldb (~user@user/ldb)
[06:05:57] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[06:08:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[06:11:41] *** Joins: ldb (~user@user/ldb)
[06:16:02] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[06:21:47] *** Joins: ldb (~user@user/ldb)
[06:26:27] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[06:28:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:31:52] *** Joins: ldb (~user@user/ldb)
[06:33:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[06:36:21] *** Joins: paule32 (~paule32@user/paule32)
[06:36:39] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[06:41:03] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:41:58] *** Joins: ldb (~user@user/ldb)
[06:46:17] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[06:46:24] *** Joins: akoana (~ah@user/akoana)
[06:48:36] *** Quits: prxq (~quassel@x4db39774.dyn.telefonica.de) (Ping timeout: 256 seconds)
[06:48:41] *** Joins: Catie (~user@user/catie)
[06:48:50] *** Joins: prxq (~quassel@x4db98d43.dyn.telefonica.de)
[06:49:45] *** Quits: Catie (~user@user/catie) (Client Quit)
[06:50:11] *** Joins: Catie (~user@user/catie)
[06:52:19] *** Joins: ldb (~user@user/ldb)
[06:53:08] *** Quits: engblom (~foo@user/engblom) (Ping timeout: 256 seconds)
[06:56:33] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[06:56:49] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[06:59:56] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:01:25] *** Joins: aeth (~aeth@user/aeth)
[07:02:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:02:24] *** Joins: ldb (~user@user/ldb)
[07:06:38] *** Quits: ldb (~user@user/ldb) (Ping timeout: 252 seconds)
[07:08:07] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Remote host closed the connection)
[07:09:22] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[07:12:30] *** Joins: ldb (~user@user/ldb)
[07:13:45] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Quit: Using Circe, the loveliest of all IRC clients)
[07:14:14] *** Joins: esb (~esb@2804:14c:1ad:8b70::1000)
[07:16:56] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[07:22:36] *** Joins: ldb (~user@user/ldb)
[07:24:50] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[07:27:05] *** Quits: ldb (~user@user/ldb) (Ping timeout: 256 seconds)
[07:27:05] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[07:28:19] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[07:30:13] <beach> Good morning everyone!
[07:30:45] *** Joins: ldb (~user@user/ldb)
[07:30:45] *** Quits: ldb (~user@user/ldb) (Client Quit)
[07:32:10] <beach> phantomics: Are you saying Allegro has a data type containing UTF-8?
[07:33:12] <phantomics> Allegro's (alphanumericp) matches almost all characters in the UTF-8 range
[07:34:16] <beach> What is the "UTF-8 range"?  UTF-8 is an seconding that maps Unicode code points to byte streams.
[07:34:30] <beach> So the range would be 0-255, no?
[07:35:47] <phantomics> Numbers below 2^16
[07:36:29] <hayley> That is a range, but I don't think it has any relation to UTF-8.
[07:36:30] <beach> UTF-8 can encode all of Unicode.
[07:38:08] <beach> phantomics: I am wondering about the role of UTF-8 in your statement about Allegro.
[07:38:22] <phantomics> Ok, the range of characters that can be encoded within 2 bytes
[07:38:45] <beach> Ah!
[07:39:11] <beach> So then that's not all characters up to 2^16.
[07:39:33] <phantomics> I know that for example the JVM only supports the Unicode code points up to 0xFFFF, that's why I wasn't able to create symbols using higher-coded characters in ABCL
[07:40:05] <hayley> The JVM uses surrogate(?) code points to support the rest of the Unicode code points.
[07:40:56] <phantomics> I chose 2^16 as the range of characters that all impls natively support, in order to compare what's considered alphanumeric by different impls
[07:41:17] <beach> phantomics: Some characters in that range require 3 bytes in UTF-8.
[07:41:49] <hayley> It appears SBCL uses "UCD general categories" to determine if something is alphanumeric.
[07:42:06] *** Joins: Oladon (~olad@98.43.81.226)
[07:42:09] <hayley> (loop for n below char-code-limit for c = (code-char n) unless (null c) when (alphanumericp c) collect (sb-unicode:general-category c) into blah finally (return (remove-duplicates blah))) ⇒ (:LT :LM :LU :LL :ND :LO)
[07:43:17] <phantomics> Oh neat, letter-titlecase, letter-modifier etc.
[07:43:40] <beach> phantomics: In fact, anything above #x0800 requires 3 bytes in UTF-8.
[07:44:38] <phantomics> Didn't know that, why does it require 3 bytes? It appears 2 is all that's needed to store those codes
[07:45:37] <beach> But UTF-8 is not about storing codes.  It's about encoding the code points as a stream of 8-bit bytes, which is why I am asking about the role of UTF-8 in your statement.
[07:46:38] <beach> https://en.wikipedia.org/wiki/UTF-8
[07:46:41] <phantomics> It's not actually relevant, as I now understand, I was referring to the set of characters with codes below 0xFFFF, which I chose to compare between implementations
[07:46:50] <hayley> UTF-8 takes additional bits to represent the length of a character, as a character is represented by a variable number of bytes.
[07:46:54] <beach> Ah!
[07:47:26] <phantomics> If you saw the numbers above, different CLs consider widely varying numbers of characters to be "alphanumeric"
[07:47:43] <hayley> ...and subsequent bytes are tagged as "continuation" bytes, so that one cannot parse rubbish if they start in the middle of a character.
[07:47:50] <beach> I understood that much.  I didn't understand the UTF-8 part.
[07:48:17] <phantomics> What do you call the set of characters below 0xFFFF?
[07:48:41] <phantomics> I found some problem using higher-coded characters in symbols in ABCL
[07:48:42] <beach> I didn't even know they had a separate name.
[07:49:51] <_death> UCS-2
[07:50:43] <_death> or actually, https://en.wikipedia.org/wiki/Basic_Multilingual_Plane
[07:50:58] <phantomics> That's what I was thinking of
[07:55:40] <phantomics> This is one of those areas where an addition to the CL spec could be helpful, to determine which unicode characters should be considered alphanumeric
[07:56:22] <beach> Go right ahead and make a suggestion.
[07:56:31] <beach> Make sure you include common practice.
[07:57:21] <beach> You could format your suggestion as a WSCL issue if you like, but I think it is probably outside the scope of WSCL.
[07:57:22] <_death> lisp alien disagrees, since his alphabet is not yet included
[07:57:48] <Bike> eh, someone's probably put it in the private use area
[07:59:24] *** Quits: pdietz (~pdietz@216-59-66-162.static.firstlight.net) (Ping timeout: 256 seconds)
[07:59:53] <phantomics> Here's the Lisp alien alphabet: ᡛᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯᡰᡱᡲᡳᡴᡵᡶᡷᢀᢁᢂᢃᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍᢎᢏᢐᢑᢒ
[08:01:47] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[08:02:11] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:04:16] *** Joins: semz (~none@user/semz)
[08:04:16] <beach> phantomics: So would you like to write down a proposal in the form of an "issue"?
[08:04:25] <_death> well, there are other good arguments against unicode in the standard.. it keeps changing, very complex to implement, and probably too big for memory constrained systems
[08:04:48] <semz> I was about to say ^ before my net decided to go down
[08:04:54] <beach> phantomics: We already have other proposals that are great and still outside the scope of WSCL, like Bike's memory model.
[08:05:29] <beach> _death: But it could be conditional, as in "if Unicode is included, then..."
[08:05:31] <phantomics> beach: I could do that, is there a good template to work from? _death: I would see this proposal as applying to the use of Unicode characters; if Unicode is not in use, it would not apply
[08:05:48] <semz> Another point is that you don't really win all that much by guaranteed (instead of conventional, as now) Unicode support in the language. Many programs that "support Unicode" actually support some arbitrary subset of it.
[08:06:26] <beach> phantomics: https://github.com/s-expressionists/wscl/tree/main/wscl-issues/proposed
[08:06:28] <phantomics> JVM limitations cause ABCL to support only the UCS-2 range for symbols
[08:07:22] <_death> beach: not sure what that antecedent means in practice
[08:08:48] <beach> _death: Me neither, but I am sure some formulation exists.
[08:08:58] <phantomics> I was just looking at ECL's code, ECL seems to use C's isalnum function to test characters, but docs I found for that function suggest it just matches the English Roman alphabet characters
[08:10:40] <beach> _death: There has got to be cases like that in the standard already.
[08:11:09] <phantomics> beach, those examples look good, I can write something modeled after those. I'm corresponding with Franz right now concerning their implementation and I'll bring up the UCD categories
[08:11:09] <Guest74> having standard unicode functions to determine types and uses of codepoints would certainly make multilingual font rendering easier.  Though there are some systems implementing some of that.
[08:11:41] <semz> the C functions are technically locale-dependent
[08:12:14] <phantomics> semz: that's what the docs said, they gave English Roman as an example so I'd guess the matching characters will be just the alphabet used with the locale
[08:12:23] <semz> although many big programs just set the locale to something like "C" because C's locales are capital A awful
[08:13:28] <stylewarning> 𝒜wful
[08:14:51] <phantomics> I discovered this because having APL characters register as alphanumeric broke April's parser, which was puzzling at first. It definitely helps to have uniform character treatment for text processing
[08:15:13] <etimmons> minion: memo for scymtym_: Do you know of any success stories using Eclector as the reader for CL:LOAD (without completely replacing the implementation's reader)? I tried using Fare's reader-interception, but it has issues. Trying to decide if I should fix them or hop to something else that already works.
[08:15:13] <minion> Remembered. I'll tell scymtym_ when he/she/it next speaks.
[08:16:15] <beach> etimmons: You mean using it for LOAD, but not for READ?
[08:16:54] <etimmons> Yes
[08:17:19] <beach> What is it that you are trying to do?
[08:17:40] *** Joins: s-liao (~s-liao@101.86.99.70)
[08:17:49] <beach> I am just curious.  If you are busy, don't worry about it.
[08:19:16] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:20:35] <etimmons> I've got a client for eclector that can change how package lookup is done on symbols (kind of like a poor man's version of first class environments). I'd like to also use it to prevent the use of ::
[08:20:41] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[08:20:55] <etimmons> And I'd like to use that reader when LOADing or COMPILE-FILEing
[08:21:15] <beach> Sounds like a perfect match for Eclector.
[08:21:33] <etimmons> It is! And I've got it implemented with Eclector :)
[08:21:40] <etimmons> Problem is hooking it into LOAD
[08:22:00] <beach> Ah, yes.  That would depend on how LOAD is implemented.
[08:23:04] <etimmons> The reader-interception library is promising. It peeks at the next character in the stream and sets the readtable so that the next character dispatches to your desired reader.
[08:23:37] <beach> I see.
[08:23:48] <etimmons> But it doesn't handle some things quiiite right.
[08:23:59] <beach> Sounds like a kludge, but it might work.
[08:24:13] <etimmons> I think they're fixable, but if someone's already got a method that works I'd like to switch over to it.
[08:24:21] <etimmons> Huge kludge, for sure
[08:24:59] <beach> We should encourage Common Lisp implementations to have something like a *READER* special variable.
[08:25:15] <etimmons> That'd be nice!
[08:26:25] <beach> How hard would it be to replace LOAD?
[08:26:41] <beach> It would seem that the work done by LOAD itself would be quite limited.
[08:26:52] <_death> a simple-load is just a read/eval loop?
[08:27:08] <etimmons> Pretty easy in my current use case.
[08:27:12] <beach> Yeah.  With binding some special variables.
[08:27:32] <etimmons> But what attracted me to reader-interception is that it should work for COMPILE-FILE as well
[08:28:22] <beach> Good point.
[08:29:58] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[08:30:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:32:46] <stylewarning> Advent of Code 2021 is now live! https://adventofcode.com/2021/day/1
[08:34:00] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 256 seconds)
[08:34:11] <beach> etimmons: I have been trying to convince scymtym_ to submit an ELS paper about Eclector, but he is not interested.  I think we tend to assume that everyone interested is using IRC, but that's not the case, so I think Eclector deserves to be known more widely.
[08:34:30] <beach> I considered writing the paper myself.
[08:38:40] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[08:39:18] <etimmons> I think an ELS paper would be great. I certainly wish I knew about it before I did.
[08:40:20] <beach> Yes, I see.
[08:41:37] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[08:45:21] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:45:26] *** Joins: Jing_ (~hedgehog@2604:a840:3::1061)
[08:45:40] <etimmons> I'm looking at it more and I think reader-interception is definitely fixable.
[08:46:17] <etimmons> It seems to just handle EOF stuff badly.
[08:46:32] <etimmons> Biggest question is if Fare is still active enough to look at the fix and merge it
[08:47:36] <beach> That's a good question.
[08:48:32] *** Quits: Jing (~hedgehog@125.105.11.101) (Ping timeout: 240 seconds)
[08:51:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:51:08] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[09:02:34] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[09:03:33] *** Quits: Catie (~user@user/catie) (Quit: rcirc on GNU Emacs 29.0.50)
[09:09:25] *** Joins: aartaka (~aartaka@5.1.53.225)
[09:20:27] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[09:28:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:29:16] <dre> I'm getting filtered by the first AoC question
[09:33:32] <dre> how do you force t to be a number?
[09:33:53] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:41:10] <phantomics> How do you mean force t to be a number?
[09:41:16] <hayley> What number would it be?
[09:41:31] <dre> 1 preferably :P
[09:41:58] <dre> nvm I'm working on something else now
[09:42:11] <hayley> ((lambda (object) (declare (ignore object)) 1) t) ⇒ 1
[09:45:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:49:12] <phantomics> For question 1 you just need to loop over the vector of depths subtracting the previous from each depth starting at index 1, then count the positive differences
[09:58:46] <dre> I'm buggered
[09:58:54] <dre> I have to go back to python ;_);
[10:07:13] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[10:08:54] <phantomics> This loop gives you the differences in depth, with *depths* being the vector of measurements:  (loop :for x :across *depths* :for ix :from 0 :when (and (< 0 ix) t) :collect (- x (aref *depths* (1- ix))))
[10:09:20] <phantomics> Then just count the positive numbers in the list
[10:09:38] *** Joins: osp (~osp@84.19.72.107)
[10:12:33] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 256 seconds)
[10:12:51] *** Joins: aartaka (~aartaka@5.1.53.225)
[10:26:09] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 256 seconds)
[10:26:37] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:28:22] *** Joins: s-liao (~s-liao@101.86.99.70)
[10:38:02] <dre> finally
[10:38:03] <dre> https://dpaste.org/MB8v
[10:38:07] <dre> I got the anwer.
[10:38:13] <dre> answer*
[10:38:41] <dre> phantomics, thanks. is there any other way to do it? I spent a long time trying to get some recursive function to do it
[10:46:34] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[10:47:02] <beach> dre: Your use of LINE as a Boolean variable is a violation of the rules stated on page 13 of the LUV slides by Norvig and Pitman.
[10:47:41] <beach> dre: ... and (LAMBDA (X) (> X 0)) can be expressed as #'PLUSP.
[10:48:49] <beach> dre: ... and (< 0 IX) can be expressed as (PLUSP IX).
[10:52:39] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:54:55] <dre> truthy is any non-nil value thou
[10:55:32] <beach> It is not about semantics.  It's about the message you send to the person reading your code.
[10:55:52] <dre> atm I don't even understand the code
[10:56:10] <beach> Oh, I thought you wrote it.
[10:56:13] <beach> Not so?
[10:56:32] <dre> phan helpedf with the loopcount, I googled the with-open-file
[10:56:37] <dre> I say it sorta in jest
[10:56:41] <dre> I get the code, I'm still learning
[10:57:00] <beach> Yes, I understand.  That's why I am pointing out these issues to you.
[10:58:30] <beach> dre: Clearly the use of > or < has the same semantics as the use of PLUSP and MINUSP, but again, it is about the person reading your code.
[10:58:33] <dre> :) thanks
[10:58:46] <dre> yeah I get it
[10:59:02] <beach> The "rule" here is that you should use the most specific construct that will do the trick, so as to make the understanding of your code faster.
[10:59:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[10:59:25] <dre> it would've been nicer if #'PLUSP was like #'POSITIVE-P or something
[10:59:28] <dre> because that's what I'm doing
[10:59:49] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:59:57] <beach> Why is POSITIVE-P better?
[11:01:11] <dre> well when I think plus I think of the action, compared to 'positive' which would be an adjective
[11:01:35] <beach> It is plusP, which is what Common Lisp uses to indicate a predicate.
[11:01:46] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c0:7657:ec40:5983:1922:ca5d)
[11:02:11] <beach> Anyway, that would be a problem only for the first few days of learning a language.  It would not be worthwhile designing a language with those few days in mind.
[11:02:29] <_death> dre: think of the sign of the number, plus or minus
[11:03:33] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:05:14] <dre> god dammit reddit has a nicer answer than I do
[11:05:15] <dre> https://www.reddit.com/r/adventofcode/comments/r66vow/2021_day_1_solutions/hmrl3xc/?utm_source=reddit&utm_medium=web2x&context=3
[11:05:21] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[11:05:50] <dre> countif / mapcar was what I was originally trying before getting stuck in that loop business.
[11:06:08] <dre> I'm so screweed for AoC xD
[11:06:32] *** Joins: gaqwas (~john@dynamic-077-002-080-002.77.2.pool.telefonica.de)
[11:07:33] <phantomics> dre: for a recursive function, you just need to go over the list keep track of three values: the last value, the current value, and the number of matches. If the last value is less than the current value, increment the match count. If there is no current value (you're at the end of the list), return the match count.
[11:08:57] <stylewarning> In case you're interested in the Coalton solution for AoC 1: https://github.com/stylewarning/aoc/blob/main/2021/1/1.lisp
[11:09:13] <stylewarning> Has lots of boilerplate that needs to go into the standard library...
[11:10:07] <stylewarning> With currying you can write slick code like (countBy (== LT) foo) to count the number of items in foo that are equal to the symbolic constant LT
[11:14:19] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[11:14:47] <_death> stylewarning: why not have a coalton-load that evaluates forms in coalton-toplevel context? (can also have a coalton-compile-file)
[11:15:32] <stylewarning> _death: I've been thinking about that, and also making an ASDF component type. But then it wouldn't work well with SLIME without slime hacking :[
[11:16:08] <_death> slime-coalton.el for .coalton files
[11:16:34] <_death> but makes sense
[11:16:37] <stylewarning> If someone builds that within the next month, there's a small reward posted (:
[11:16:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 256 seconds)
[11:17:16] *** Joins: amb007 (~a_bakic@139.104.204.77.rev.sfr.net)
[11:17:36] <_death> cool
[11:23:53] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[11:25:59] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[11:32:04] <kennyd> I wonder if it would it be possible to get similar currying working in plain CL, with a custom progn-like macro
[11:36:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:36:32] <stylewarning> kennyd: In general, unfortunately, you can't
[11:38:18] <stylewarning> And using lots of combinators in plain Common Lisp is so clumsy anyway, there wouldn't be much payoff. The most you might be able to do is define new reader syntax like [mapcar f], but you'd need to be able to query the arity of the function being called
[11:39:32] <stylewarning> And even then, it would be restricted to named, known functions only. Coalton gets away with it because all functions have their types statically known at compile time, so we can resolve "the meaning" of a curried expression with full generality, regardless of how many combinators are being composed and used
[11:39:52] *** Quits: amb007 (~a_bakic@139.104.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[11:40:04] *** Joins: amb007 (~a_bakic@87.244.204.77.rev.sfr.net)
[11:49:53] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[11:51:49] *** Joins: aeth (~aeth@user/aeth)
[11:52:05] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[11:58:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:09:20] *** Quits: amb007 (~a_bakic@87.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[12:11:08] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:12:15] *** Quits: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6) (Ping timeout: 252 seconds)
[12:46:59] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[12:50:05] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:50:12] <kakuhen> I just learned that, like all textbooks, the Art of the MOP is not free of errors; obvious in hindsight, but interesting to see anyway
[12:50:17] <kakuhen> https://lists.clozure.com/pipermail/openmcl-devel/2021-March/012260.html
[12:50:36] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:59:11] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:03:37] *** Joins: taiju (~taiju@240b:253:ec40:2400:651e:f83b:5890:99a6)
[13:05:03] *** Joins: treflip (~user@95.79.32.99)
[13:05:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:27:38] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[13:34:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:35:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[13:37:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:39:36] *** Joins: VincentVega (~user@212.241.24.104)
[13:41:10] *** Quits: dre (~dre@2001:8003:c932:c301:1276:3400:25a9:855) (Ping timeout: 268 seconds)
[13:41:44] <beach> mop validate-superclass
[13:41:44] <specbot> http://metamodular.com/CLOS-MOP/validate-superclass.html
[13:43:18] <beach> kakuhen: I think it depends on the implementation whether a method on validate-superclass is needed.
[13:43:41] *** Quits: s-liao (~s-liao@101.86.99.70) (Quit: Client closed)
[13:52:44] *** Joins: s-liao (~s-liao@101.86.99.70)
[13:53:57] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[13:54:05] *** Quits: Jing_ (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[13:54:40] *** Joins: Jing (~hedgehog@115.207.46.97)
[13:56:43] *** Joins: rogersm (~rogersm@90.166.177.48)
[13:58:37] *** Joins: treflip (~user@95.79.32.99)
[13:59:36] *** Joins: dre (~dre@2001:8003:c932:c301:3452:4883:fbcf:635)
[14:02:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:05:54] *** Quits: sterni (~lukas@user/sterni) (Quit: WeeChat 2.9)
[14:06:32] *** Joins: sterni (~lukas@user/sterni)
[14:09:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[14:14:20] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[14:21:10] *** Joins: cuz (~user@50.235.10.194)
[14:22:32] <cuz> Hey all, quick question. I have a list of a list of numbers and I want to create a new list that is the sum of each of those e.g. ((1 2 3) (4 5 6)) turns into (6 15). Is there a simple function for this?
[14:24:42] <hayley> (flet ((sum (xs) (reduce #'+ xs))) (mapcar #'sum '((1 2 3) (4 5 6)))) is the best I can think of.
[14:24:48] <hayley> (mapcar #'reduce '#1=(+ . #1#) '((1 2 3) (4 5 6))) is the worst I can think of.
[14:30:05] <cuz> yeah i've got some ugly mapcar apply combo... I guess it's not too bad but i'm suprised there isn't something standard
[14:32:08] <contrapunctus> hayley: what does "xs" mean?
[14:32:31] <hayley> Nothing.
[14:32:46] <hayley> Perhaps just "list-of-some-stuff" in Haskell/ML speak.
[14:32:48] <semz> it's the face #commonlisp makes when it sees haskellisms
[14:32:59] <cuz> haha
[14:35:09] <shka> cuz: using alexandria (mapcar (alexandria:curry #'recude #'+) '((1 2 3) (4 5 6)))
[14:36:04] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[14:38:20] <Krystof> how often do you think generating a list of list sums happens, that there should be a standard function for this?
[14:39:01] <Krystof> supplementary question: if there were a standard function for this, what would its name be?
[14:39:13] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Quit: CGI:IRC (Ping timeout))
[14:39:53] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[14:44:20] *** Joins: s-liao (~s-liao@101.86.99.70)
[14:44:58] <flip214> (MAPCAR-REDUCE #'+ list), of course
[14:45:37] <Krystof> |mapcar-(reduce-+)|
[14:45:37] <flip214> patches to alexandria-2 might be accepted ;)
[14:46:51] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b507:5fe5:5de5:af19)
[14:47:07] <kennyd> should probably have sum that takes a flat list first
[14:47:23] <kennyd> not sure if there's already something like that in alexandria and friends
[14:48:49] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:49:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:50:23] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c0:7657:ec40:5983:1922:ca5d) (Ping timeout: 250 seconds)
[14:50:47] <rotateq> +/2 3⍴⍳6
[14:50:51] <semz> for + you don't get much over (reduce #'+ ...)
[14:51:10] <semz> but for string concatenation, it's mildly annoying that there is no variant that takes a sequence
[14:51:17] <semz> (not that it's hard to write)
[14:53:35] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:54:05] *** Joins: amb007 (~a_bakic@71.244.204.77.rev.sfr.net)
[14:54:18] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[14:54:41] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b507:5fe5:5de5:af19) (Ping timeout: 252 seconds)
[14:57:07] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Error))
[14:57:19] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:57:34] <cuz> This is a pretty common pattern for me, where I have a function and then I want to apply it to multiple inputs. EG lets say I want to send an email to multiple people but can only send it to one at a time, then I would make a list of each persons email and then apply the email function to each email in that list
[14:57:59] *** Joins: kennyd (~bc8165b6@83.167.180.121)
[14:58:49] *** Quits: kennyd (~bc8165b6@83.167.180.121) (Client Quit)
[14:59:51] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:59:54] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[15:01:40] <kennyd> it doesn't buy you much over reduce. but summing a flat list is probably a lot more common than summing a 2d one. and once you have a flat sum, summing a 2d list is short enough that we don't really need a new function, (mapcar #'sum ...), or (sum (mapcar #'sum ...)), depending on the  desired result
[15:03:10] <kennyd> or even (sum (flatten list))
[15:07:34] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[15:08:27] <cuz> Interesting
[15:08:27] *** Quits: amb007 (~a_bakic@71.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:32] <scymtym_> etimmons: i'm not aware of anyone hooking Eclector into CL:LOAD. what's the use case?
[15:08:33] <minion> scymtym_, memo from etimmons: Do you know of any success stories using Eclector as the reader for CL:LOAD (without completely replacing the implementation's reader)? I tried using Fare's reader-interception, but it has issues. Trying to decide if I should fix them or hop to something else that already works.
[15:08:34] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:11:12] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[15:12:46] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:300e:71aa:46c5:14ce)
[15:14:28] <akater[m]> Krystof: Such operations are certainly very useful in multilinear algebra.  But they should probably be in a multilinear algebra system. Wolfram named this one ArrayReduce: https://reference.wolfram.com/language/ref/ArrayReduce.html
[15:15:03] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:16:20] *** Quits: cuz (~user@50.235.10.194) (Ping timeout: 256 seconds)
[15:16:45] <lottaquestions> Hi all, where can I get details in the hyperspec about #1= and #1#?
[15:18:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[15:20:54] <pdietz> clhs 2.4.8.15
[15:20:54] <specbot> Sharpsign Equal-Sign: http://www.lispworks.com/reference/HyperSpec/Body/02_dho.htm
[15:20:58] <akater[m]> lottaquestions: In Emacs, hyperspec-lookup-reader-macro ##
[15:20:59] <pdietz> clhs 2.4.8.16
[15:20:59] <specbot> Sharpsign Sharpsign: http://www.lispworks.com/reference/HyperSpec/Body/02_dhp.htm
[15:21:36] <pdietz> That's for reading.  There may also be something for printing.
[15:21:44] <pdietz> clhs *print-circle*
[15:21:44] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/v_pr_cir.htm
[15:22:18] <lottaquestions> Thank you all. Lots of leads :-)
[15:27:01] <kennyd> akater[m], isn't ArrayReduce just mapcar?
[15:27:38] <kennyd> nm, I missed last argument
[15:32:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:34:52] *** Quits: d_run (sid83858@id-83858.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:37:58] *** Joins: nature (~nature@45.32.235.173)
[15:40:47] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[15:46:49] <akater[m]> kennyd: You're right: if you only have #'+ and not #'sum, it's not the same thing.  Wolfram's apply takes a similar spec (“levelspec”) and so a hypothetical (wolfram:apply #'+ matrix '(1)) would effectively reduce the rows of matrix with #'+.  It's a common enough operation to have infix for it.  I used it quite often; Wolfram is very strongly oriented towards operating on “multidimensional” lists.  levelspecs and dimension specs
[15:46:49] <akater[m]> are offered consistently in the language, where Lisp would offer &rest, essentially.  &rest approach is ultimately more limited and less useful when dealing with arrays with higher ranks.
[15:51:34] <akater[m]> &rest is more handy in very simple cases and conses less, unless the multidimensional-oriented approach implements fusion.
[15:52:35] * hayley thinks petalisp:lazy-reduce or petalisp:lazy-reduce* takes a dimension (RIP petalisp:β)
[16:04:33] *** Joins: s-liao (~s-liao@101.86.99.70)
[16:13:06] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b507:5fe5:5de5:af19)
[16:13:31] *** Joins: Algernon91 (~Algernon6@2a04:cec0:11c0:7657:4987:9bb8:5304:4be0)
[16:17:29] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:b507:5fe5:5de5:af19) (Ping timeout: 250 seconds)
[16:32:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[16:32:42] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:36:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[16:39:56] <beach> Krystof: Well put.  I was just thinking of how to say it.
[16:50:16] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[16:50:27] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[16:54:21] *** Quits: kennyd (~bc8165b6@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[16:57:09] *** Joins: s-liao42 (~s-liao@101.86.99.70)
[17:00:34] *** Quits: s-liao (~s-liao@101.86.99.70) (Ping timeout: 256 seconds)
[17:00:38] *** Joins: Bike (~Glossina@71.69.170.70)
[17:00:39] *** ChanServ sets mode: +o Bike
[17:01:44] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Ping timeout: 252 seconds)
[17:09:41] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:10:31] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[17:17:36] <etimmons> scymtym_: More details after I left the memo. But short story is I've got some package hacks I'd like LOAD and COMPILE-FILE to use.
[17:17:41] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[17:18:12] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:21:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:23:47] <scymtym_> etimmons: i see. i only have worked towards side stepping the implementation completely (for something like static analysis) which is pretty difficult in general since loading or compiling a file is not just a READ loop. instead READ must be interleaved with certain side effects. "just" replacing the implementation's READ could be easier. an implementation specific solution could be advising CL:READ such that it calls Eclector's READ
[17:23:47] <scymtym_> when, say, a certain special variable is true
[17:26:39] <etimmons> Ok, I'll look into that if my fixes to reader-interception fail
[17:26:55] <etimmons> It was working for a while. But then I had the gall to include a comment at the end of the file and it blew up.
[17:29:23] *** Joins: pve (~pve@178-55-34-151.bb.dnainternet.fi)
[17:35:38] *** Joins: semz (~none@user/semz)
[17:36:47] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:38:28] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:45:20] * attila_lendvai has updated his build scripts to work on Guix
[17:52:41] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 256 seconds)
[18:03:08] *** Joins: johnjay (~pi@192.142.100.50)
[18:03:27] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:04:33] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:04:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[18:05:31] *** Joins: aartaka (~aartaka@5.1.53.225)
[18:16:24] <Xach> attila_lendvai: now nyxt is busted - but peace is restored in the dwim.huniverse
[18:18:17] *** Quits: s-liao42 (~s-liao@101.86.99.70) (Quit: Client closed)
[18:23:59] *** Joins: Algernon666 (~Algernon6@2a04:cec0:11d2:ff0:4987:9bb8:5304:4be0)
[18:26:59] *** Quits: Algernon91 (~Algernon6@2a04:cec0:11c0:7657:4987:9bb8:5304:4be0) (Ping timeout: 252 seconds)
[18:27:40] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:28:43] <ns12> Xach: "now nyxt is busted" - ???
[18:31:11] <ns12> Hi, what is the copyright status of the Common Lisp draft standards?
[18:31:30] <beach> ns12: Public domain.
[18:31:43] <beach> ... or so the consensus appears to be.
[18:31:53] <ns12> beach: Interesting. Is there a document that says so?
[18:32:19] <beach> No, but we had Kent Pitman write it as I recall.
[18:32:28] <beach> Check with scymtym.
[18:36:11] *** Quits: esb (~esb@2804:14c:1ad:8b70::1000) (Remote host closed the connection)
[18:37:26] <Guest74> midnight is too late to do AoC. I kept reading part two wrong and kept reading the figure horizontally instead of vertically.
[18:44:52] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[18:45:28] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:55:23] *** Quits: sheb (~sheb@31.223.228.71) (Quit: Leaving)
[18:56:54] <pve> etimmons: Hi, I don't know if it helps you at all, but here are my eclector experiments: https://github.com/pve1/eclector-access
[18:57:46] <pve> etimmons: you can check examples/package-nicknames-test.lisp (or some other file) to see how it works.
[19:02:34] <attila_lendvai> Xach, oh, i didn't know that's also part of ql... :/ not sure how to handle this, but the dialog started with the author (https://github.com/hu-dwim/hu.dwim.defclass-star/issues/12 and https://github.com/hu-dwim/hu.dwim.defclass-star/pull/7)
[19:03:25] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:03:29] *** Joins: tyson2 (~user@bras-base-toroon0954w-grc-73-174-91-22-190.dsl.bell.ca)
[19:09:48] <attila_lendvai> hrm, nyxt looks interesting. are many CL people using it?
[19:12:35] *** Quits: LoopMacro (~LoopMacro@c-24-22-157-127.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:14:12] *** Quits: johnjay (~pi@192.142.100.50) (Quit: WeeChat 3.3)
[19:29:48] <etimmons> pve: Thanks! Looks like you pull tricks similar to reader-interception. And even avoid the bug reader-interception fell in to!
[19:33:40] <etimmons> pve: You wight want to also consider a WITH-ECLECTOR macro, so that any LOADs within its body automatically get the Eclector reader. So that a file can use it without needing to call ENABLE
[19:36:38] <pve> etimmons: good idea!
[19:36:58] <pve> etimmons: which bug do you mean?
[19:36:58] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:ec6c:a291:8165:150d)
[19:37:43] <etimmons> https://gitlab.common-lisp.net/frideau/reader-interception/-/merge_requests/1
[19:38:02] <etimmons> It never returned (VALUES) from its reader macro function
[19:38:08] <pve> oh right
[19:43:35] *** Alfr is now known as Guest3612
[19:43:40] *** Joins: Alfr (~Alfr@user/alfr)
[19:43:59] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[19:44:00] <pve> etimmons: I wonder what would break if I enabled a client globally at startup (e.g. in .sbclrc) that translates all occurrences of cl:load to "my-load"..
[19:45:18] *** Joins: Cymew (~ante@host-217-213-138-28.mobileonline.telia.com)
[19:46:11] *** Quits: Guest3612 (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[19:46:32] <jcowan> Probably a good thing to do after writing a long and difficult (to write, not to read!) programming book.
[19:46:52] <jcowan> (take a sabbatical, I mean)
[19:47:44] <etimmons> pve: Hmmm. Only one way to find out! But You might have trouble making it happen. I think SBCL LOADs .sbclrc, so *READTABLE* is bound. You'd probably have to actually mutate the standard read table, which sounds scary
[19:48:36] <jcowan> On Unicode:
[19:48:59] <jcowan> Supporting Unicode does not mean supporting every Unicode character.
[19:49:38] <jcowan> Unicode already defines what "alphanumeric" means, though it does not include APL symbols.
[19:49:45] <jackdaniel> unicode is a terrible mess, second only to previous situation with gazzilions of incompatible encodings
[19:50:04] * jcowan notes similar remarks about democracy
[19:50:17] *** Quits: tyson2 (~user@bras-base-toroon0954w-grc-73-174-91-22-190.dsl.bell.ca) (Remote host closed the connection)
[19:50:46] *** Joins: Oladon (~olad@98.43.81.226)
[19:51:03] <pve> etimmons: oh, I was under the impression that sbcl does read-eval or something on .sbclrc, and not load
[19:51:09] <jcowan> Some of the complexity is accidental or historical-only, but most of it is essential complexity: writing systems are complex, end of.
[19:52:19] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[19:52:56] <etimmons> pve: Huh. A quick glance makes it look like a hybrid...
[19:53:11] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:53:51] <etimmons> pve: pathname and truename are bound, but not readtable or package
[19:55:45] <pve> anyway, I guess stuff like (find-symbol "LOAD" :cl) would slip through :)
[19:57:02] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:59:45] *** Quits: Cymew (~ante@host-217-213-138-28.mobileonline.telia.com) (Ping timeout: 252 seconds)
[19:59:45] *** Joins: kennyd (~bc8165b6@cerf.good1.com)
[20:02:03] <etimmons> Naaaah, just replace FIND-SYMBOL and INTERN as well!
[20:02:17] <pve> genius! :)
[20:03:42] <pl> Shinmera:
[20:03:54] <Shinmera> ?
[20:03:56] <pl> eh, got a bit off-topic question
[20:04:11] <Shinmera> feel free to ask in #shirakumo then
[20:04:18] <pl> ok, thanks, will join in a moment
[20:06:21] *** Quits: aartaka (~aartaka@5.1.53.225) (Ping timeout: 252 seconds)
[20:06:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:11:58] *** Joins: Alfr (~Alfr@user/alfr)
[20:27:39] *** Joins: Catie (~user@user/catie)
[20:29:29] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[20:36:08] *** Joins: makomo (~makomo@user/makomo)
[20:41:43] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:44:09] <jcowan> Back to Unicode for a second: https://docs.google.com/document/d/1d4xnVAGod2NxjGypwyS9bYlx5kE2VBJu5p4xl5zXEy8 is my original proposal for doing Unicode in the R7RS-small variant of Scheme, and I think it would make sense for CL as well if mechanically translated to use CL function names.
[20:44:43] <jcowan> It is quite permissive.
[20:46:47] *** Joins: nature (~nature@45.32.235.173)
[20:47:26] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:05:39] *** Joins: karlosz (~karlosz@172.58.30.241)
[21:13:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:13:45] *** Joins: amb007 (~a_bakic@119.244.204.77.rev.sfr.net)
[21:13:45] *** Quits: amb007 (~a_bakic@119.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:14:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:17:01] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:18:26] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[21:18:50] *** Joins: amb007 (~a_bakic@119.244.204.77.rev.sfr.net)
[21:19:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:21:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:28:06] *** Joins: Inline (~Inline@aftr-37-201-240-100.unity-media.net)
[21:32:59] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:ec6c:a291:8165:150d) (Remote host closed the connection)
[21:37:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:39:18] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:40:57] *** Quits: amb007 (~a_bakic@119.244.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[21:41:27] *** Joins: amb007 (~a_bakic@57.244.204.77.rev.sfr.net)
[21:41:55] *** Quits: karlosz (~karlosz@172.58.30.241) (Quit: karlosz)
[21:47:48] <phantomics> jcowan: took a look at the document, the criteria there look good in terms of categorization, the alphabetical and numeric Unicode categories are a bit more expansive that what SBCL has
[21:51:40] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[21:53:25] <jcowan> phantomics: Thanks
[21:54:09] <phantomics> Mainly I see that they include the "number letter" categories that SBCL doesn't, APL characters definitely shouldn't be included, there's something weird with Allegro's system
[21:55:42] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:01:21] *** Joins: alvaro121_ (~aa@201.230.126.66)
[22:02:32] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[22:04:23] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[22:06:57] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[22:07:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[22:07:53] <contrapunctus> attila_lendvai: is this your site? http://dwim.hu/ You may want to serve JS over HTTPS, and update that Freenode link to libera.chat...
[22:09:20] <attila_lendvai> contrapunctus, thanks for the headsup. that site is somewhat... well, abandoned. there's plenty of potentially useful features that should be fixed/finished, but we're not working much in CL anymore.
[22:10:06] <contrapunctus> A pity 🙁️
[22:10:29] * Xach forces attila_lendvai to work on CL from time to time
[22:11:48] <attila_lendvai> :) heh, right, when Xach notifies me of the breakage, then i fix our libs up to the point where they compile and run the dwim.hu code
[22:12:19] <Xach> attila_lendvai: i appreciate it - but if it becomes too much of a bother, please let me know.
[22:12:56] <attila_lendvai> Xach, no, not at all! i always have the option to not react, so please keep me posted! and thanks for all the work on ql!
[22:15:11] <Xach> A reaction is always good, even if it is "stop bothering me"
[22:16:32] *** Quits: amb007 (~a_bakic@57.244.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:16:59] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:22:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Read error: Connection reset by peer)
[22:23:17] <attila_lendvai> Xach, i'll communicate that, don't worry. it already feels it was a waste what went into writing all the hu.dwim libs. i don't want to let them bitrot, maybe there are some users out there.
[22:33:56] *** Quits: Algernon666 (~Algernon6@2a04:cec0:11d2:ff0:4987:9bb8:5304:4be0) (Ping timeout: 252 seconds)
[22:34:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:34:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:36:06] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:45:05] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[22:45:37] <pve> attila_lendvai: Any highlights in those libs you feel we should know about? (I'm not familiar with them)
[22:47:46] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:47:49] <attila_lendvai> pve, hu.dwim.perec is a rather nice ORM. it has a query compiler that compiles queries given in sexp form to SQL, and when it cannot do that, then it transparently runs it in the lisp VM. it can even compile parts of the query to SQL, and run a hybrid lisp+SQL query
[22:48:08] <attila_lendvai> hu.dwim.web-server is reasonable
[22:48:40] <rotateq> ah nice
[22:49:08] <pve> attila_lendvai: cool, I was just thinking about how to ORM the other day
[22:49:09] <attila_lendvai> hu.dwim.stefil is i think by far the best unit test lib (simply wraps defun to ensure a dynamic environment, but tests are otherwise defun's. very nice experience in slime.)
[22:49:38] <attila_lendvai> there are all kinds of little utils, like hu.dwim.defclass-star to make defclass less verbose
[22:49:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:50:13] * rotateq still likes the power of property testing
[22:50:25] <attila_lendvai> hu.dwim.computed-class is a functional reactive programming lib that makes class slots reactive (they get automatically recalculated as needed)
[22:51:06] <jcowan> attila_lendvai: Do you have a writeup (other than the source) of the sexp-to-SQL mapping?  It's a hard problem.
[22:51:15] <rotateq> sounds good for UI stuff
[22:51:25] <attila_lendvai> hu.dwim.reiterate is an 80% iterate replacement, but it's much better. it uses a proper walker, hu.dwim.walker.
[22:52:01] <rotateq> jcowan: and then the question for which SQL standard :)
[22:52:01] <attila_lendvai> well, these: https://github.com/hu-dwim/
[22:52:45] <attila_lendvai> rotateq, we used it on postgresql. another groups used it with oracle, but they made quite some changes. the merging is a pending TODO... for the last several years.
[22:52:52] <attila_lendvai> s/groups/group/
[22:53:18] <pve> attila_lendvai: thanks for the intro, I'll check out perec at least
[22:53:49] <rotateq> attila_lendvai: cool also a lib for lazy evaluation :) read yesterday that Simon Peyton-Jones had his last day at the MS research group
[22:54:17] <attila_lendvai> pve, i suggest getting it from ql because the darcs HEAD contains half baked stuff. or the LIVE darcs repo from dwim.hu... but you're better off with ql.
[22:54:29] <rotateq> the SQL stuff is also something i want to look into
[22:54:42] <pve> attila_lendvai: ok, will do
[22:55:45] <pve> because as usual, I was contemplating rolling my own, but I'm not sure that's a good idea :)
[22:55:45] <jcowan> The pages at http://dwim.hu/project/hu.dwim.def etc. are all 404.
[22:56:33] <random-nick> does hu.dwim.computed-class do things differently from the cells library?
[22:56:34] <attila_lendvai> hu.dwim.lazy-eval is closer to a proof of concept. but we used it in live code. authorization in our web ui was done so that a large form was constructed, and then it got lazy-eval'd, and then automagically evaluated at each point where it was needed. we could even generate english doc from who can do what in the system, and the rules were of course editable
[22:58:40] <attila_lendvai> jcowan, i know... :/ something broke with the entry point a few years ago. navigating from the dwim.hu menu works, but most project has little useful data. (the UI is constructed based on metadata)
[22:59:14] <attila_lendvai> to be honest, i'm surprised it's still this functional after some 10 years of potential bitrot.
[22:59:27] * jcowan nods
[22:59:49] *** Joins: VincentV` (~user@212.241.24.104)
[22:59:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:00:50] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[23:01:37] *** Quits: VincentVega (~user@212.241.24.104) (Ping timeout: 252 seconds)
[23:03:05] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:03:43] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[23:04:47] <Guest74> anybody know why slime occassionaly starts indenting forms when trying to use autocomplete?  It's pushing my stuff to the end of the screen.
[23:08:32] <lisp123> Guest74: Never saw that before. Try C-h m and see if you have any indent minor modes active
[23:09:04] <lisp123> I have Electric-Indent, but perhaps you have something else which may be conflicting with slime
[23:09:39] <lisp123> Also try #Emacs, there used to be a command / way to debug more estoric issues in Emacs, they might be able to help tell you how to
[23:09:49] <Guest74> nope.  It does it occasionaly to random indents.
[23:10:20] <Guest74> random indententations across sessions, stays pretty constant in same session, might increase.
[23:10:34] *** Quits: osp (~osp@84.19.72.107) (Quit: Leaving)
[23:10:50] <lisp123> I see. Sounds annoying, but unfortunately I haven't faced that yet so dunno what could be the cause
[23:11:09] *** Quits: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it) (Ping timeout: 252 seconds)
[23:12:51] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[23:14:19] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:16:29] *** Joins: theothornhill (~user@217.84-49-191.nextgentel.com)
[23:18:25] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Client Quit)
[23:18:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:20:18] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[23:20:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:20:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:24:36] *** Joins: cage (~cage@dynamic-adsl-94-34-12-161.clienti.tiscali.it)
[23:26:22] <Guest74> oh well, finally got drakma to download AoC inputs.
[23:27:42] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:34:39] *** Quits: theothornhill (~user@217.84-49-191.nextgentel.com) (Remote host closed the connection)
[23:38:58] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[23:40:10] *** Joins: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net)
[23:47:05] *** Quits: Fare (~fare@pool-72-94-36-127.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[23:52:35] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (Quit: WeeChat 2.2-dev)
[23:53:02] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[23:56:17] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[23:59:11] *** Parts: VincentV` (~user@212.241.24.104) (ERC (IRC client for Emacs 27.2))
