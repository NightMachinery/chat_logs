[00:03:22] *** Quits: Noustropos (~Noustropo@2a00:f41:28cb:9668:50d6:5826:37aa:7933) (Ping timeout: 240 seconds)
[00:04:41] *** Joins: Noustropos (~Noustropo@2a00:f41:28cb:9668:7c83:eea:6362:660e)
[00:04:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[00:05:51] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:09:47] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:10:52] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:b8ff:dfa4:4e98:96af) (Quit: Textual IRC Client: www.textualapp.com)
[00:12:00] <merpnderp> I'm creating a file to expose all the exports of all the other files in the module, but I'm getting tired of manually marshaling all the exports.
[00:12:23] <merpnderp> If a file has 15 `export function`'s  is there a way to easily re-export those from another file?
[00:13:13] *** Joins: nuncanada (~dude@179.235.162.215)
[00:13:24] <GreenJello> export * from './other'
[00:13:55] *** Joins: junktext (~junktext@77.247.181.214)
[00:14:17] *** Quits: nuncanada (~dude@179.235.162.215) (Client Quit)
[00:14:43] <merpnderp> boom!
[00:14:46] <merpnderp> Thanks GreenJello
[00:15:23] <merpnderp> export * from './userAPI.js'
[00:15:26] <merpnderp> So easy.
[00:15:28] <merpnderp> So elegant.
[00:15:30] <merpnderp> So awesome.
[00:16:23] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:16:56] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:17:43] <merpnderp> damn, no way to do this correctly: export LoginDialog from './LoginDialog.vue';
[00:18:00] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[00:18:08] <merpnderp> The vue preprocessor won't run on it since that's an Index.js file.
[00:19:36] <merpnderp> Screw it, I'll just have importing files reach into the module for specific files.
[00:25:09] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:35:06] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.wv.comcast.net)
[00:37:29] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 268 seconds)
[00:38:03] <mdemo> Is there a nice node package for making cached http(s) requests? I've been using node-fetch-cache but I've been surprised by how it doesn't check TTL across runs when using FileSystemCache.
[00:38:43] *** Quits: incognito (~relativit@user/incognito) (Ping timeout: 268 seconds)
[00:40:48] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[00:41:08] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[00:43:48] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[00:45:32] <ThePendulum> there's bhttp but joepie91 will have to fill you in on whether it does what you're looking for
[00:46:05] <joepie91> bhttp does not have any cacheing mechanism built in
[00:46:06] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[00:47:33] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[00:50:18] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[00:50:43] *** Quits: Noustropos (~Noustropo@2a00:f41:28cb:9668:7c83:eea:6362:660e) (Ping timeout: 250 seconds)
[00:51:04] *** Joins: Noustropos (~Noustropo@91.221.89.43)
[00:53:58] *** Quits: Pixi (~Pixi@user/pixi) (Read error: Connection reset by peer)
[00:54:18] *** Joins: Pixi (~Pixi@user/pixi)
[00:54:54] *** Joins: silly (~silly@user/silly)
[01:00:57] <mdemo> oh, maybe this https://github.com/zkat/make-fetch-happen
[01:01:00] <mdemo> cute name
[01:06:44] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:08:23] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[01:08:24] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:08:41] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[01:09:48] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:b8ff:dfa4:4e98:96af)
[01:13:47] *** Joins: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net)
[01:21:03] *** Quits: IceMichael (~IceMichae@dynamic-046-114-155-071.46.114.pool.telefonica.de) (Ping timeout: 250 seconds)
[01:22:45] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:27:18] *** Joins: johtso (~johtso@user/johtso)
[01:32:55] *** Quits: Northwoods (~Northwood@223.130.30.69) (Quit: Leaving)
[01:33:00] *** Joins: Latvian (~Latvian@ee-ext-vpn.if.ee)
[01:33:08] *** Parts: Latvian (~Latvian@ee-ext-vpn.if.ee) ()
[01:33:20] *** Joins: silly_ (~silly@user/silly)
[01:34:13] *** Quits: silly (~silly@user/silly) (Read error: Connection reset by peer)
[01:41:17] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[01:41:54] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[01:46:18] *** Joins: ferdna (~ferdna@user/ferdna)
[01:47:29] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 250 seconds)
[01:48:32] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[01:49:26] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 272 seconds)
[01:57:31] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:58:50] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[01:59:14] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[02:00:38] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[02:04:02] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c08b:4648:88f4:bf33)
[02:05:17] *** Sherpard2_ is now known as Sherpard2
[02:07:56] *** Joins: anddam (~anddam@user/anddam)
[02:08:38] <anddam> howdy, given an Array ['Foo', 'Bar', 'Baz'] is there a compact syntax to assign those three values to variables a, b, c ?
[02:09:07] <sheetjs> n> var [a,b,c] = ["Foo", "Bar", "Baz"]; c+b+a
[02:09:08] <jellobot> (okay) 'BazBarFoo'
[02:09:16] <anddam> I am thinking of some nice language feature like spread syntax
[02:09:22] <anddam> oh even simplerr
[02:09:28] <anddam> thanks
[02:09:40] <anddam> has this syntax a name?
[02:09:52] <sheetjs> destructuring assignment
[02:10:15] <sheetjs> it has some other cool extensions
[02:10:39] <sheetjs> n> var [a, ...rest] = ["Foo", "Bar", "Baz"]; rest
[02:10:39] <jellobot> (okay) [ 'Bar', 'Baz' ]
[02:11:22] <sheetjs> n> var {x,y,...rest} = { x: "Foo", y: "Bar", z: "Baz" }; [x,y,rest]
[02:11:23] <jellobot> (okay) [ 'Foo', 'Bar', { z: 'Baz' } ]
[02:11:56] <sheetjs> n> var {x: a, y: b, ...rest} = { x: "Foo", y: "Bar", z: "Baz" }; [a,b,rest]
[02:11:56] <jellobot> (okay) [ 'Foo', 'Bar', { z: 'Baz' } ]
[02:14:24] <anddam> thanks again
[02:18:46] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Read error: Connection reset by peer)
[02:19:12] *** Quits: wroathe (~wroathe@96-88-30-181-static.hfc.comcastbusiness.net) (Ping timeout: 265 seconds)
[02:19:33] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[02:23:54] *** Joins: z1haze (~z1haze@user/z1haze)
[02:27:18] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[02:28:52] *** Joins: thiras (~thiras@user/thiras)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:29] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:38:32] *** Quits: junktext (~junktext@77.247.181.214) (Ping timeout: 265 seconds)
[02:40:11] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[02:45:33] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:47:15] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:47:33] *** Joins: mickey (~user@user/mickey)
[02:50:52] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[02:51:07] *** Joins: mickey (~user@user/mickey)
[02:52:32] *** Quits: sagax (~sagax@213.138.71.146) (Ping timeout: 268 seconds)
[02:54:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[02:55:18] *** Joins: silly (~silly@user/silly)
[02:57:13] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[02:58:32] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 272 seconds)
[02:59:57] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[03:04:59] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Read error: Connection reset by peer)
[03:05:29] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[03:06:56] *** Joins: junktext (~junktext@109.201.152.165)
[03:08:56] *** Joins: kmh__ (~kmh@p200300df5f0e1500d17adf96e818274e.dip0.t-ipconnect.de)
[03:12:44] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[03:13:02] *** Quits: kmh_ (~kmh@p2e511db5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:16:26] *** Joins: ferdna (~ferdna@user/ferdna)
[03:17:28] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Read error: Connection reset by peer)
[03:18:32] *** Joins: bambanxx (~bambanx@191.126.147.53)
[03:22:58] *** Quits: Noustropos (~Noustropo@91.221.89.43) (Ping timeout: 240 seconds)
[03:32:32] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[03:38:59] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[03:44:04] <sheetjs> theskillwithin: ecmasports.com needs a refresh during the ecmalympic games
[03:49:11] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[03:50:28] *** Quits: junktext (~junktext@109.201.152.165) (Ping timeout: 272 seconds)
[03:52:42] *** Quits: bambanxx (~bambanx@191.126.147.53) (Ping timeout: 240 seconds)
[03:53:15] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[04:00:41] *** Joins: masber (~masber@178.197.197.167)
[04:03:00] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[04:05:28] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:15:08] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[04:21:46] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 240 seconds)
[04:37:01] <Slade> cookie/browser security friendly guidance requested...  i have main app, and api..   do i merge them at app.domain.com api.domain.com.. or is there real benefit in merging them somehow all into app.domain.com
[04:38:05] <Slade> err is it ok to not merge them and do app.domain.com api.domain.com
[04:40:41] <GreenJello> Slade, you would do a subdomain for a public API, but for internal use usually the API server is your frontend server
[04:41:24] <Slade> GreenJello, can you elaborate on the rationale of that?
[04:42:01] <GreenJello> I can't think of a reason you'd want them to be on separate subdomains, and would require you to deal with CORS
[04:42:58] <Slade> well they're 2 separate apps, with different hosting concepts. lots of work to merge them
[04:43:17] <Slade> the CORS is the part i'm curious about
[04:43:43] <GreenJello> you have two server side projects here?
[04:45:13] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[04:45:22] <Slade> i usually use project 1) react/vue app compiled to static files.. published to static file hosting..  2) a c#/golang/java/php app hit by project 1
[04:45:46] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) (Ping timeout: 240 seconds)
[04:45:56] *** Joins: Naan (~naan@user/naan)
[04:46:50] <GreenJello> you only need to serve the html files from your main server
[04:47:08] <GreenJello> everything else can go on another domain
[04:47:38] <Slade> 'your main server' is what?
[04:48:00] <GreenJello> your API/frontend server
[04:48:16] <GreenJello> the thing the user points their browser at
[04:48:35] <Slade> i see. so you're suggesting things like assets go to another domain
[04:48:47] <Slade> images
[04:48:58] <GreenJello> yeah, the css/js/images/video don't care where they're served from
[04:49:40] <Slade> but it vastly simplifies thing if   app.domain.com/index.html   calls  app.domain.com/api/whoami
[04:49:59] <Slade> is that what you're saying?
[04:50:04] <GreenJello> yeah
[04:50:30] <Slade> i was hoping it'd be more friendly considering same tld
[04:50:51] <Slade> well same domain.com
[04:51:28] <GreenJello> you can make all subdomains share cookies, but then it's not great if you want to run anything else on another subdomain
[04:52:05] <Slade> really in my idea of app.domain.com / api.domain.com   only api ever reads/sets the cookies. so
[04:52:25] <Slade> app.domain.com is cookie free for all requests
[04:53:07] <GreenJello> then you can't inject session data into the html, which is super useful
[04:53:29] <Slade> could you elaborate on that?
[04:53:41] <GreenJello> !server data
[04:53:41] <jellobot> GreenJello, There's 3 options to properly get data from the server to the client: 1) fetch request from JS. 2) HTML data-* attributes, read them in JS. 3) <script type="application/json"></script>, read and parse it from JS, however this option requires special escaping of </script> in the json body. Never generate/template JS on the fly. See also !fetch
[04:54:03] <Slade> you mean i cant read the cookie?
[04:54:55] <GreenJello> using techniques 2 or 3 there, you can include information about the logged in user in the initial html, allowing your frontend code to immediately have that information instead of making an extra round trip after JS is downloaded and starts executing
[04:55:46] <GreenJello> for that to be possible, you need the domain/server the user is navigating to have access to the session and to be able to resolve the user data
[04:56:00] <GreenJello> so it pretty much has to be your main API server handling html page requests
[04:56:04] <Slade> by 'session' you mean cookie?
[04:56:37] <GreenJello> I assume you're storing a session token in the cookie
[04:57:07] <Slade> usually use an authheader with some httponly cookies backing it
[04:57:49] <GreenJello> I'm not familiar with that approach
[04:58:51] <Slade> basically i login, get a jwt. that gets added to the Authorization: Bearer  header
[04:59:32] <Slade> i use a cookie for renewa in case that timesout or the browser is refreshed
[04:59:44] *** Joins: jazzy (~jaziz@2600:380:8577:4a6c:f914:953:ef7c:54cd)
[04:59:49] <GreenJello> ah, cookie for the refresh token
[05:00:19] <wroathe> Slade: Is there a reason you're not also transmitting the access token as a cookie?
[05:00:21] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 276 seconds)
[05:02:17] <Slade> wroathe, i hit another app with the jwt that needs it in the auth header. i could mungle it in my ingress.. but is there a value?  i also feel weird using cookies much in mobile apps
[05:03:31] <Slade> my mobile apps security is much simplified. for better or worse
[05:04:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[05:04:21] <wroathe> Slade: I don't know what it means to "mungle it in my ingress", but one of the primary concerns in the traditional oauth model is establishing that client applications that receive tokens are "untrusted", because of the potential for malicious scripts to be executed on the client that transmit bearer tokens to malicious parties. HttpOnly cookies avoid that by making it so that Javascript can't access
[05:04:27] <wroathe> the access token.
[05:05:14] <Slade> wroathe, i mean i could store it in the cookie, and pull it out of the cookie and add it to the header in my istio ingress
[05:05:34] <wroathe> Slade: When you say "mobile app" are you talking about native mobile apps, or web apps for mobile devices?
[05:05:43] <Slade> react-native
[05:05:52] *** Quits: onizu (uid373383@id-373383.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[05:06:22] <wroathe> Slade: I don't know what an istio ingress is. The point of doing this is that you wouldn't put the access token in the Authorization header anymore
[05:06:27] *** Joins: federico_it (~textual@151.95.117.132)
[05:06:44] <wroathe> Slade: Because in order for that to happen Javascript would have to have access to the token, which is what the HttpOnly approach avoids
[05:07:28] <Slade> wroathe, is the malicious script that much of a concern?
[05:08:09] <wroathe> Slade: Well, it's enough of a concern for things like oauth to exist. This idea of the client being untrusted is part of the core reasons for being for that spec
[05:08:18] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:08:23] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[05:09:00] <Slade> i'll need to think that logic through. its probably small to move
[05:09:02] <wroathe> Slade: In order to estimate your risk you'd need to analyze the possible places in your application that could be used to inject malicious code. For example, a XSS attack would seek to store a script in your database from an input, and that script would then get output in the client application
[05:09:06] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[05:09:11] *** Quits: federico_it (~textual@151.95.117.132) (Client Quit)
[05:09:23] *** Quits: earendel (uid170954@user/earendel) (Quit: Connection closed for inactivity)
[05:09:30] <wroathe> Slade: And when it executes it then passes off the bearer token if it can access it
[05:09:59] <wroathe> Slade: Another possibility is that attackers somehow get access to your CI agents, or your build artifact server, and inject their code as part of your build
[05:10:20] <Slade> btw in the case of mobile app, i just have the client generate an asymmetric key, and claim to login. it gets a jwt encrypted with that key.. my assumption is, if it can decrypt and get the JWT for use, then its authenticated :P
[05:10:54] <wroathe> Slade: Another possibility is that maintenance of a node module your application depends on gets passed to a malicious party (either intentionally or unintentionally)
[05:11:21] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:11:26] <wroathe> Slade: So yeah, there's quite a few vectors to get a client to execute malicious code
[05:11:52] <Slade> i'll put some thought into that one
[05:11:53] <wroathe> Slade: The CI agent thing is how the solarwinds hack went down (although they were targetting binaries, and not web application artifacts)
[05:11:58] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:12:08] *** Joins: P1RATEZ (piratez@user/p1ratez)
[05:12:39] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:12:54] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:13:04] <Slade> GreenJello, wroathe thanks for feedback :)
[05:14:37] <wroathe> Slade: np
[05:15:09] *** Joins: seaofducks (~seaofduck@79.79.117.103)
[05:15:10] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:16:04] *** Quits: bkool (uid510685@id-510685.brockwell.irccloud.com) ()
[05:18:50] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Read error: Connection reset by peer)
[05:25:54] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:30:48] *** Joins: mud (~mud@user/kadoban)
[05:32:03] *** Quits: kadobanana (~mud@user/kadoban) (Ping timeout: 265 seconds)
[05:32:53] *** Joins: bobdobbs (~user@2406:5a00:f001:c600:cba:db99:877a:886f)
[05:39:29] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[05:40:03] <bobdobbs> I know basic js and I've had some exposure to modern js. I'd like to spend a few hours experimenting with react. In particular I'd like to get an idea of the kind of workflow required to build a react app that works with a database (like mysql) for persisting data.
[05:40:09] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[05:41:05] <bobdobbs> Can anyone suggest resources that I can look at?
[05:41:58] *** Joins: kmh (~kmh@p200300df5f2fd50048f006e6baaf7fa7.dip0.t-ipconnect.de)
[05:43:50] *** Quits: kmh__ (~kmh@p200300df5f0e1500d17adf96e818274e.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[05:44:20] <bobdobbs> This is the kind of scenario I'm thinking about: I often build political petition or Send An Email To Your Representative pages. I usually build them on WordPress using page builders and plugins. But I'm thinking that with React I can build resources like this that load faster and respond more nimbly to user input.
[05:45:06] *** Quits: EgonX (~EgonX@2601:2c6:47f:8884:d5d4:e8ff:5c31:2711) (Quit: Textual IRC Client: www.textualapp.com)
[05:45:06] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 272 seconds)
[05:45:25] <bobdobbs> For, say, a petition app, I'd need to present a form, save the values to a db, reward the user with a "thank you", and then maybe a followup call-to-action.
[05:46:10] *** Quits: masber (~masber@178.197.197.167) (Quit: Client closed)
[05:48:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[05:49:43] *** Joins: EgonX (~EgonX@2601:2c6:47f:8884:bd1d:aac:1edc:b180)
[05:50:08] <wroathe> bobdobbs: React and wordpress fit different needs, and could be used together.
[05:50:33] <wroathe> bobdobbs: There's nothing stopping you from loading React in a wordpress template, and using that to build your front end
[05:50:58] <bobdobbs> wroathe: yeah, I figure that further down the track I might get the skills to build a react frontend to WordPress-as-a-cms
[05:51:34] <bobdobbs> wroathe: from time-to-time I look into what other agencies are doing with js-frontends/wp-backends
[05:51:58] <wroathe> bobdobbs: Also, because React is a UI library it doesn't have anything to do with the database. It's use cases are fairly limited in scope.
[05:52:12] <bobdobbs> uhuh, yup
[05:52:38] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[05:53:10] <wroathe> bobdobbs: Sorry, just wanted to try and help clarify some things. I'm not sure what the right resources for learning React for beginners are now.
[05:53:20] <wroathe> Someone else will have to help with suggestions.
[05:53:22] <bobdobbs> np. I'm pretty noobish.
[05:53:51] <wroathe> bobdobbs: Consider reading the React tutorial on teh reactjs.org site while you wait
[05:54:54] <bobdobbs> yeah. At the moment I'm googling around just to get an idea of the information ecosystem / culture around React, and to see if the direction I'm thinking in fits the parameters of React orthodoxy
[05:55:44] <wroathe> bobdobbs: I don't have the full scope of what you typically build, but those two things you described sound like React would be overkill for
[05:55:56] <bobdobbs> huh. ok.
[05:56:13] <wroathe> bobdobbs: But get a second opinion before you make any rash decisions :P
[05:56:22] <bobdobbs> :
[05:56:24] <bobdobbs> :)
[05:56:44] <GreenJello> yeah, you're likely better off progressively enhancing server rendered markup there
[05:57:16] <bobdobbs> GreenJello: I'm gonna go ahead and do some googling to figure out what you mean by that
[05:57:22] <GreenJello> you can submit with ajax if JS loads successfully, which is usually better than a real form submit for presentation and handling errors
[05:57:55] <wroathe> bobdobbs: In a word, keep using Wordpress, and just up your Javascript game.
[05:58:17] <bobdobbs> wroathe: yeah, that's part of why I'm looking into React
[05:58:17] <wroathe> bobdobbs: I believe Wordpress now includes a REST API layer
[05:58:20] <GreenJello> you render the form and set it up to work as if JS were enabled, and then your JS adds on top of it to improve the experience when possible
[05:58:28] <GreenJello> disabled*
[05:58:36] <bobdobbs> wroathe: it does indeed. I haven't worked with it yet. Not properly anyway.
[05:58:51] <bobdobbs> GreenJello: oh yup. I see
[05:59:14] <GreenJello> also React generally loads slower than server rendered markup, since it has to download, parse, and execute JS before anything is displayed
[06:00:48] <GreenJello> you can get around that with server rendering of React components, but that's probably too much work and deployment difficulty for a site that's a single small form
[06:01:48] <GreenJello> good to learn react for other projects, though :-)
[06:02:17] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 250 seconds)
[06:03:38] <bobdobbs> GreenJello: I don't have any specs/stats/experience at hand, but I'm gonna guess that at some of the time that React load cycle is faster than WordPress page loads.
[06:03:57] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[06:05:12] *** Quits: seaofducks (~seaofduck@79.79.117.103) (Quit: Leaving)
[06:05:26] <GreenJello> pretty much always slower, unless you render to static files at build time, or if you do really slow stuff in your wordpress code
[06:05:46] <bobdobbs> huh. interesting.
[06:06:49] *** Joins: WishBoy (~WishBoy@user/wishboy)
[06:06:50] <GreenJello> but easier to make things responsive after loading completes
[06:07:10] <bobdobbs> hmmm... maybe I should spend a few hours playing with this: https://frontity.org/
[06:07:16] *** Quits: johtso (~johtso@user/johtso) (Ping timeout: 246 seconds)
[06:08:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[06:20:16] <sheetjs> "This request was automatically failed because there were no enabled runners online to process the request for more than 1 days. "
[06:20:45] <bobdobbs> I think I'll spend some time working through the tutorials on Reactjs.org first. Maybe over a couple of days. Then next week or weekend look at frontify
[06:21:00] *** Joins: zacts (~zacts@user/zacts)
[06:23:27] *** Joins: MaXxer (~MaXxer@i5E86B26D.versanet.de)
[06:25:23] *** Quits: zacts (~zacts@user/zacts) (Client Quit)
[06:26:08] *** Joins: zacts (~zacts@user/zacts)
[06:29:48] *** Joins: Crassus (~Crassus@user/crassus)
[06:34:05] <wroathe> bobdobbs: It sounds like you're less interested in what the correct or practical solution is, and more interested in just learning React because it's popular :P
[06:34:05] <Slade> anyone seen a lib or pattern where you can design your app to query a local (in memory) value/key store. and if the data is missing (or old), it'll try fetching from server?  sql queries would be great by v/k is an amazing start
[06:34:22] <wroathe> bobdobbs: No harm in that I suppose
[06:34:43] <bobdobbs> wroathe: lets call it "I Want To Be A Real Webdev Syndrome"
[06:34:51] <wroathe> bobdobbs: Ha
[06:35:58] <bobdobbs> wroathe: part of my thinking is that the guys who work with react tend to have a pretty sophisticated understanding of JS. So if I experiment with JS, I'm likely to (at the very least) see why that is.
[06:36:03] *** Quits: Tabmow (~tabmow@user/tabmow) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:37] *** Joins: Tabmow (~tabmow@user/tabmow)
[06:38:02] <wroathe> bobdobbs: That's not true at all. If you want a sophisticated understanding of JS, I'd recommending reading a Javascript book like https://eloquentjavascript.net/, and writing your front ends with just plain old DOM APIs and Javascript
[06:38:04] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:38:18] <bobdobbs> hmmm
[06:38:53] <wroathe> bobdobbs: Many people who use React do so because they heard you can get a job doing it. They pu themselves through a Bootcamp, or they read a React book, and they skipped all of the other foundational aspects of being a front end developer
[06:39:01] *** Joins: codebam (~codebam@user/codebam)
[06:39:11] <bobdobbs> ok
[06:39:35] <wroathe> bobdobbs: Your average React developer has a sketchy understanding of Javascript at best
[06:39:41] <bobdobbs> huh. interesting
[06:39:56] <bobdobbs> yeah, I gotta admit - part of the appeal of learning React is the workforce demand for it.
[06:40:18] <wroathe> bobdobbs: Yup. No shame in that. Just don't confuse learning React with learning Javascript
[06:40:23] <bobdobbs> fair
[06:41:24] *** Joins: matsaman (~matsaman@user/matsaman)
[06:45:33] <zacts> slack
[06:46:46] *** Quits: zacts (~zacts@user/zacts) (Quit: zacts)
[06:51:05] <sheetjs> soon AI will be writing websites without human intervention
[06:52:07] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 258 seconds)
[06:52:42] <matsaman> most frontend coders I would rather call AI than professional human beings already
[06:52:56] <matsaman> s/frontend //
[06:53:03] <sheetjs> what's a professional human being?
[06:53:19] <matsaman> a human being who is paid to do something, a professional, who is human
[06:53:32] <wroathe> Someone who is professionally human. I like to think I've mastered the art.
[06:53:37] <matsaman> heheh
[06:53:45] <matsaman> I feel like if you're entertaining enough, that _can_ be a profession
[06:54:17] *** Joins: z1haze_ (~z1haze@184.103.69.239)
[06:54:19] <sheetjs> microsoft copilot has shown us the way
[06:54:36] <entuland> there already are website builder AIs (but I have no idea how good they are) they can't really do without some human intervention (someone has to complain about the design and make it crappier somehow)
[06:54:37] <sheetjs> copy code, strip licenses, sprinkle some machine learning jargon and presto
[06:55:24] <matsaman> the real joke is that the vast majority of websites are one out of a handful of types of sites that were already perfected decades ago
[06:55:37] <sheetjs> that's a good thing
[06:55:39] <matsaman> people just like doing things from scratch because boredom & cash
[06:55:55] <sheetjs> if people use standard designs, attention is drawn to the content
[06:56:01] <sheetjs> unless there was no content to begin with
[06:56:05] <wroathe> We've had WYSIWYG editors for websites forever. You don't even need AI. Just click and drag. The sad truth is that the vast majority of websites out there don't need much more than some sort of squarespace-like setup
[06:56:05] <matsaman> =)
[06:56:17] <matsaman> wroathe: yup
[06:56:20] <wroathe> People requisition bespoke websites because they like feeling special
[06:56:21] <matsaman> less than that, really
[06:56:22] <sheetjs> most tech startups aren't tech
[06:56:42] <sheetjs> thin tech veneer over existing businesses and "regulatory arbitrage" aka breaking the law
[06:56:42] <matsaman> and in a few years they replace the entire site from scratch =P
[06:56:51] <matsaman> perhaps the worst aspect of the human condition
[06:58:13] <sheetjs> hmm
[06:58:30] *** Quits: z1haze (~z1haze@user/z1haze) (Ping timeout: 272 seconds)
[06:58:32] <sheetjs> anyone work for a company that has a policy against purchasing perpetual licenses?
[06:59:22] <GreenJello> unlikely; businesses love those
[06:59:34] <sheetjs> yeah it struck us as weird
[06:59:38] <bobdobbs> sheetjs: what do you mean by "perpetual license"?
[06:59:48] <sheetjs> as opposed to a recurring subscription
[07:00:08] <sheetjs> its weird to talk about javascript libraries in subscription terms
[07:02:58] <GreenJello> oh, I misinterpreted. I meant they love recurring licenses
[07:03:47] <GreenJello> perpetual licenses that are transferrable are the next best thing
[07:03:53] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:04:26] <sheetjs> it's really awkward to shoehorn a subscription model into a deliverable like a javascript library
[07:04:56] <sheetjs> though it would probably be more lucrative to do that
[07:05:11] <GreenJello> the issue is that the pricing doesn't know for how long you'll use the license
[07:05:20] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 265 seconds)
[07:05:59] <GreenJello> so if it's perpetual, you can't evaluate how much value you're getting out of it, unless you know you'll use it forever
[07:06:14] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[07:06:44] <GreenJello> or if the cost is insignificant, then a perpetual license is great
[07:11:28] <sheetjs> i've thought about transitioning to a subscription license but it's awkward
[07:11:41] <sheetjs> i'd much rather pay once and get it over with
[07:13:44] <wroathe> 1Password made the mistake of offering a one time license for their product
[07:14:10] <wroathe> They had to backpedal and claim that it was for that specific major version only after they realized there wouldn't be enough ongoing revenue to sustain their company
[07:14:36] <wroathe> And now they actively try to force their users into a subscription based model that stores your passwords in their cloud, rather than in Dropbox or Google Drive like it was before
[07:18:16] <sheetjs> so in the past we've offered perpetual software licenses with an optional recurring support and updates contract
[07:18:34] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[07:18:43] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[07:18:48] <sheetjs> the main hesitancy to a full subscription model is that we aren't providing a service per se, it's effectively taking a purchase and turning it into a rental
[07:19:29] <wroathe> sheetjs: 1Password had no qualms with that
[07:19:52] <sheetjs> fair enough
[07:20:11] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[07:20:33] <wroathe> sheetjs: Their new business model revolves around forcing this rental model on people, and if that fails, charging them for major version upgrades that contain a bunch of useless features nobody wants or needs
[07:21:24] <wroathe> sheetjs: The core product is just storing your passwords in an encrypted vault that you can access, and that's been functionally unchanged for years now. The new stuff they add is just there to justify bumping the major version everyone once and a while, and slapping a new price tag on it
[07:22:24] <wroathe> They make an interesting case study in charging for software
[07:22:38] <sheetjs> or the license bait and switch model
[07:22:57] <sheetjs> that's another good, albeit morally repugnant, business strategy
[07:24:00] <wroathe> sheetjs: Just hire an MBA and direct all criticism their way after they suggest one of these morally repugnant business models and you follow through
[07:24:32] <sheetjs> consultancy
[07:24:40] <sheetjs> like mckinsey
[07:24:49] <bobdobbs> mckinsey?
[07:25:01] <sheetjs> they were the consulting firm that recommend locking up kids in cages, or something
[07:25:25] <bobdobbs> :0
[07:25:26] <sheetjs> "International consulting firm McKinsey & Company advised Immigration and Custom Enforcementâ€™s (ICE) immigration policy with recommendations so extreme that some ICE employees considered them inhumane,"
[07:25:38] <sheetjs> https://www.propublica.org/article/how-mckinsey-helped-the-trump-administration-implement-its-immigration-policies
[07:25:40] <sheetjs> here we go
[07:26:15] <sheetjs> in any case, wroathe you are hired at the rate of 1 internet point per day to act as the lightning rod
[07:28:43] <wroathe> sheetjs: That's a government salary right there. I'll take it! Now for my first suggestion: I suggest you include sexual favors as an alternate form of payment for your library.
[07:29:01] <wroathe> sheetjs: Bring on the lightning.
[07:31:23] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[07:32:47] *** Joins: ciphrCat (~ciphrCat@user/ciphrcat)
[07:33:43] <ciphrCat> anyone happen to know if a reCAPTCHA or hCAPTCHA grid has ~9-12 separate small images, or is it one big image?
[07:34:57] <matsaman> what does it matter
[07:35:12] <ciphrCat> matsaman: environmental footprint
[07:35:41] <ciphrCat> .. according to the last paragraph of this: http://www.aptivate.org/webguidelines/Images.html
[07:36:07] <ciphrCat> each image needs a separate HTTP request
[07:36:11] <matsaman> most CAPTCHA are such abominations you won't come close to having something that uses good practices
[07:36:39] <matsaman> I doubt they want to do more processing on their end, either
[07:36:47] <matsaman> so my guess is it'll be separate images the vast majority of the time
[07:36:50] <sheetjs> ciphrCat: there are better ways to direct your environmental activism
[07:36:51] <matsaman> but we can check...
[07:37:15] <ciphrCat> well i'm specifically interested in hCAPTCHA and reCAPTCHA, because Cloudflare is now claiming to be environmentally friendly
[07:37:27] <matsaman> there are actually good arguments against using CAPTCHA
[07:37:31] <ciphrCat> and that claim needs a response
[07:37:31] <matsaman> ciphrCat: hah
[07:37:56] <ciphrCat> http://web.archive.org/web/20210730102406/blog.cloudflare.com/crawler-hints-how-cloudflare-is-reducing-the-environmental-impact-of-web-searches/
[07:38:04] <ciphrCat> it's disgusting that DDG is endorsing the greenwas
[07:38:05] <ciphrCat> h
[07:38:17] <matsaman> hcaptcha uses separate images
[07:38:31] <ciphrCat> matsaman: thanks!  exactly what I wanted to know
[07:38:38] <matsaman> the greenwash?
[07:38:42] <Linkandzelda> im looking for a good framework that will help take care of boilerplate which i end up spending so long long writing. stuff like should item X be displayed or not, setting/syncing the content of element Y, binding click functions, getting values of a select, changing views, procesing ajax return data... the list goes on. ive been hacking stuff together with jquery for years, any ideas what
[07:38:45] <Linkandzelda> would suite me?
[07:38:48] <Linkandzelda> sorry for split
[07:38:57] <sheetjs> matsaman: trying to claim to be environmentally friendly
[07:39:07] <sheetjs> which is really tricky to define for an internet company
[07:39:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 258 seconds)
[07:39:18] <matsaman> it's like
[07:39:22] <matsaman> I mean cloudfront in particular
[07:39:26] <matsaman> aren't they in hosting?
[07:39:27] <ciphrCat> matsaman: some of Cloudflare's environmental abuses are documented in paragraph 9 here: https://git.disroot.org/cyberMonk/liberethos_paradigm/src/branch/master/rap_sheets/cloudflare.md
[07:39:31] <matsaman> obviously trying to lower your footprint is great
[07:39:39] <matsaman> but server farms are incredibly wasteful
[07:39:55] <sheetjs> trying to lower your footprint by offloading work to the client is possibly wasteful
[07:40:09] <matsaman> for sure
[07:40:16] <ciphrCat> the best way to lower search engine footprint is to simply not crawl Cloudflare sites at all, and not send people to those sites in the results
[07:40:23] <sheetjs> its an interesting question
[07:40:38] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:40:48] <sheetjs> it's computationally efficient but space wasteful to generate an uncompressed XLSX
[07:41:00] <matsaman> because they give you a loading screen?
[07:41:03] <sheetjs> and computationally expensive but space efficient to generate a compressed XLSX
[07:41:08] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 255 seconds)
[07:41:09] <sheetjs> which one is more environmentally friendly?
[07:41:47] <theskillwithin> if your worried about enviromental footprints, the nsa prob has a bigger one
[07:41:54] <matsaman> let's talk about the environmental cost of paying $150 for fsckin' Windows
[07:42:21] <sheetjs> there are plenty of meaningful targets theskillwithin
[07:42:27] <matsaman> how much petroleum was burnt to earn that $150 =P
[07:42:42] <sheetjs> oh theskillwithin how green is this year's ecmalympics?
[07:42:45] <matsaman> anyway, very few CAPTCHA are sanely coded
[07:42:51] <matsaman> and you might not even want to use one at all
[07:42:51] <ciphrCat> theskillwithin: as a consumer, i can only worry about what I can control.  I can't boycott the NSA, but I can boycott Cloudflare (and i do)
[07:42:52] <sheetjs> also, ecmasports.com needs an update
[07:43:15] <systemfault> What about the environmental impact of using JavaScript?
[07:43:17] <matsaman> throttling requests smartly is probably good enough
[07:43:26] <theskillwithin> sheetjs ya, AWS isn't letting me renew the ssl cert,  nor letting me delete it lol.  so thats the first thing i need to fix
[07:43:44] <matsaman> systemfault: pretty broad, but obviously electronics are bad for the environment at this time
[07:43:54] <sheetjs> it's important to identify how they are bad
[07:44:10] <theskillwithin> i prob should move all my domains out of godaddy to aws route 53
[07:44:15] <ciphrCat> systemfault: doesn't it depend on the design? Javacript can potentially be more lean than static HTML, but OTOH there's some very bloated js out there that brings my system down
[07:44:22] <sheetjs> for example, a locked down device with no provision to unlock its general computing capabilities is e-waste
[07:46:33] <matsaman> I mean, for most sites, rendering once server-side instead of infinite times client side is going to be most efficient
[07:46:41] <matsaman> not necessarily for the person paying for the server
[07:46:45] <matsaman> but for the world
[07:47:06] <matsaman> some sites are obviously more dynamic than that would be feasible for
[07:47:11] <theskillwithin> ciphrCat there is a way you can influence things,  vote for a 3rd party.  if a 3rd party gains 10% of voters, ud think that would be worthless, but no, then both parties will have to bargin with the 3rd party voters
[07:47:29] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[07:47:50] <matsaman> it's problematic to say things like "both parties" in the first place
[07:48:01] <ciphrCat> Cloudflare actually deems all robots that are not search crawlers as "malicious", which is not just wrong, but it cause CF to block the most environmentally friendly traffic there is (as bots don't generally grab images)
[07:48:14] <matsaman> that just reinforces the imaginary idea that somehow two prominent parties is normal or official, which isn't the case
[07:48:38] <matsaman> ohwell, they'll fail like every other company one day
[07:48:41] <theskillwithin> or its just acknowledging the reality of the situation
[07:48:47] <ciphrCat> theskillwithin: i can't vote at all, ironically because Cloudflare blocks voter registration (and i boycott CF)
[07:48:56] <matsaman> ha
[07:49:08] <matsaman> honestly can't say I use that many sites that use them
[07:49:10] <matsaman> or anything like them
[07:49:18] <matsaman> have to use gitlab for work sometimes, that's about it
[07:49:30] <theskillwithin> i prefer cloudfront cuz its right there in aws
[07:49:47] <matsaman> that doesn't sound like an end user insight =P
[07:50:14] <ciphrCat> matsaman: regarding gitlab, i suggest reading this: https://git.sdf.org/humanacollaborator/humanacollabora/src/branch/master/gitlab-dot-com.md  Gitlab.com is worse than github
[07:50:31] <theskillwithin> for a side project i might consider using cloudinary for the first time to handle my images
[07:50:36] <theskillwithin> not sure yet
[07:50:43] <matsaman> ciphrCat: I mean github is microsoft, so I don't see how that's possible
[07:50:59] <ciphrCat> read the article.  Gitlab.com is Cloudflare
[07:51:00] <matsaman> but I'm not invested in gitlab, it's just a thing we use at work that I had no say in
[07:51:15] <matsaman> yeah I just got done saying I have to use gitlab for work which uses cloudflare
[07:51:33] <ciphrCat> i can't even read Gitlab.com bug reports because of the exclusive walled-garden
[07:51:39] <matsaman> "cloudinary", what a name =P
[07:51:54] <matsaman> you wouldn't want to anyway
[07:51:58] <matsaman> their bug closing rate is shite
[07:52:18] <matsaman> and I've lost track of how many times they've closed all bugs and moved them to some other separate bug tracker, and back
[07:52:28] <theskillwithin> matsaman which one, cloudinary?
[07:52:32] <ciphrCat> i mean, not the gitlab project itself.. but i can't read bug reports for *any* project hosted on gitlab.com b/c of cloudflare captcha
[07:52:32] <matsaman> no gitlab
[07:52:35] <theskillwithin> ah
[07:52:43] <matsaman> their codebase is clearly immense and unmanageable
[07:52:45] <matsaman> they're boned
[07:53:27] <theskillwithin> dang that sucks, i thought they were kinda cool.  (even tho i prefer github)
[07:53:36] <ciphrCat> boycott Github, Boycott Gitlab.com, choose a whitelisted forge from this list: https://git.sdf.org/humanacollaborator/humanacollabora/src/branch/master/forge_comparison.md
[07:53:50] *** Quits: WishBoy (~WishBoy@user/wishboy) (Remote host closed the connection)
[07:54:03] <matsaman> honestly there is so little reason to use a hosted-only VCS
[07:54:15] <matsaman> you can even download gitlab and install it on your own server
[07:54:23] <matsaman> or, y'know, skip the frontend to get altogether
[07:54:51] <matsaman> dunno why people like relying on third parties / services so much
[07:55:04] <matsaman> I mean because it's easy in the short run and makes them look good, but
[07:55:05] <sheetjs> no one gets fired for choosing ibm
[07:55:09] <matsaman> that's such a shit reason
[07:55:15] <matsaman> sheetjs: sounds right
[07:55:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:55:40] <sheetjs> no one gets fired for choosing sheetjs
[07:56:20] <matsaman> does anyone get fired for adopting any JS lib ever? =)
[07:56:34] <matsaman> as if management would even understand such an act
[07:58:01] <theskillwithin> haha sheetjs
[07:58:07] <ciphrCat> matsaman: it's for collaboration. Maintaining an always-on machine for the general public involves effort, risk, and responsibility
[07:58:12] <sheetjs> sheetjs is a
[07:58:18] <sheetjs> way of life
[07:58:24] <ciphrCat> if you're a one-man show, then indeed you don't need a forge
[07:58:26] <sheetjs> its a celebration of our shared heritage
[07:58:32] <matsaman> I'd rather have that risk than the risk of relying on random strangers
[07:58:53] <ciphrCat> it's still easier to mirror
[07:59:18] <ciphrCat> there's also software heritage, plus every developer has a copy of the repo
[07:59:48] <ciphrCat> fediforge will make things better, hopefully so issues are decentralized too
[08:00:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[08:01:31] <theskillwithin> https://umaar.com/dev-tips/245-source-order-viewer/
[08:03:45] <ciphrCat> matsaman: do you maintain a public forge?  Perhaps something that could be added to https://git.sdf.org/humanacollaborator/humanacollabora/src/branch/master/forge_comparison.md ?
[08:04:30] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[08:04:44] *** Joins: Rockwood (~Rocky@user/rocky)
[08:05:40] *** Quits: Rockwood (~Rocky@user/rocky) (Read error: Connection reset by peer)
[08:08:00] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[08:08:52] <ciphrCat> systemfault: also regarding your question, i think javascript is often harmful to the environment as a result of uMatrix.  uMatrix disables js for some sites, user must enable selectively and reload.  Then the javascript that runs spawns offspring js that's nested, which then must be enabled and the same site must be reloaded again
[08:09:13] <ciphrCat> I often have to reload a webpage ~3-5 times because of the nesting
[08:09:27] <ciphrCat> that's probably a big footprint
[08:09:32] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[08:09:41] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[08:12:40] *** Joins: Rockwood (~Rocky@user/rocky)
[08:13:53] *** Quits: Rockwood (~Rocky@user/rocky) (Remote host closed the connection)
[08:15:22] *** Joins: jazzy2 (~jaziz@2600:380:8577:4a6c:f914:953:ef7c:54cd)
[08:17:50] *** Quits: jazzy (~jaziz@2600:380:8577:4a6c:f914:953:ef7c:54cd) (Ping timeout: 252 seconds)
[08:19:30] <ciphrCat> of all the browser tabs I have loaded right now, the heaviest tab w.r.t CPU and memory is actually the Cloudflare blog article where CF claims to be good for the environment
[08:19:42] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:20:51] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[08:20:53] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[08:24:48] <matsaman> ciphrCat: no but I will keep this humanacollaborator repo in mind in future
[08:25:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[08:26:03] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[08:33:05] *** Quits: birkoff (birkoff@user/birkoff) (Remote host closed the connection)
[08:33:05] *** Quits: saikub (saikub@saikub.thunderirc.net) (Remote host closed the connection)
[08:37:10] *** Quits: hassoon (hassoon@user/hassoon) (Ping timeout: 265 seconds)
[08:39:16] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[08:55:41] *** Quits: unixcat64 (thelounge@fedora/hyperreal) (Quit: the lounge - https://webirc.envs.net)
[08:55:57] *** Joins: unixcat64 (thelounge@envs.net)
[08:58:41] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[09:04:53] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[09:08:19] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) ()
[09:09:21] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[09:14:29] *** Joins: byanka (~byanka@91.244.10.3)
[09:16:23] *** Quits: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[09:16:41] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[09:16:59] *** Quits: byanka__ (~byanka@212.55.77.96) (Ping timeout: 255 seconds)
[09:16:59] *** Quits: byanka_ (~byanka@212.55.77.96) (Ping timeout: 255 seconds)
[09:18:18] *** Joins: byanka_ (~byanka@91.244.10.3)
[09:21:47] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:305b:fcd:6dfd:6f83:7b96) (Ping timeout: 245 seconds)
[09:22:40] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[09:27:22] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[09:37:06] *** Quits: Brianmancer (~Neuromanc@user/briandamag) (Ping timeout: 265 seconds)
[09:41:19] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[09:48:52] *** Quits: MaXxer (~MaXxer@i5E86B26D.versanet.de) (Remote host closed the connection)
[09:49:12] *** Joins: MaXxer (~MaXxer@i5E86B26D.versanet.de)
[09:50:31] *** Quits: MaXxer (~MaXxer@i5E86B26D.versanet.de) (Remote host closed the connection)
[09:51:23] *** Joins: MaXxer0 (~MaXxer0@i5E86B26D.versanet.de)
[09:53:06] <theskillwithin> ðŸ¤¤ so stoked on keystonejs recently,  loving it
[09:53:15] *** MaXxer0 is now known as MaXxer01
[09:55:51] *** Quits: MaXxer01 (~MaXxer0@i5E86B26D.versanet.de) (Remote host closed the connection)
[09:56:06] *** Quits: P1RATEZ (piratez@user/p1ratez) (Remote host closed the connection)
[09:57:32] *** Joins: MaXxer0 (~MaXxer0@i5E86B26D.versanet.de)
[10:01:59] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[10:02:19] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[10:02:48] *** Quits: MaXxer0 (~MaXxer0@i5E86B26D.versanet.de) (Remote host closed the connection)
[10:03:10] *** Joins: MaXxer0 (~MaXxer0@i5E86B26D.versanet.de)
[10:05:41] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[10:10:28] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[10:12:23] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[10:26:17] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[10:31:56] *** Joins: Guest9 (~Guest9@43.241.144.40)
[10:32:45] *** Joins: Brianmancer (~Neuromanc@user/briandamag)
[10:36:17] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[10:36:19] *** Joins: Sven_vB_ (~sven@user/sven-vb/x-2094958)
[10:36:38] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[10:44:15] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 252 seconds)
[10:47:12] *** Quits: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 272 seconds)
[10:53:00] *** Joins: Safa_[A_Boy] (~Safa@89.148.11.159)
[10:53:42] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[10:59:07] <Safa_[A_Boy]> Hi all. I'm using htmlWebpackPlugin and I'm searching for a way to access http headers within my template
[10:59:13] <Safa_[A_Boy]> (webpack question)
[11:06:00] *** Joins: sagax (~sagax@213.138.71.146)
[11:07:39] *** Quits: justache (~justache@user/justache) (Remote host closed the connection)
[11:08:10] *** Joins: justache (~justache@user/justache)
[11:09:49] *** Quits: z1haze_ (~z1haze@184.103.69.239) (Read error: Connection reset by peer)
[11:10:00] *** Joins: Safa_[A_Boy]_ (~Safa@89.148.13.173)
[11:11:47] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[11:13:00] *** Quits: Safa_[A_Boy] (~Safa@89.148.11.159) (Ping timeout: 245 seconds)
[11:14:56] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[11:15:08] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[11:16:29] *** Joins: birkoff (birkoff@birkoff.thunderirc.net)
[11:16:29] *** Quits: birkoff (birkoff@birkoff.thunderirc.net) (Changing host)
[11:16:29] *** Joins: birkoff (birkoff@user/birkoff)
[11:19:47] <theskillwithin> Safa_[A_Boy]_ that doesn't really make sense to me,  could u explain further?
[11:21:39] *** Quits: gry (~quassel@botters/gry) (Quit: No Ping reply in 180 seconds.)
[11:22:14] *** Joins: gry (~quassel@botters/gry)
[11:22:34] <theskillwithin> really by pure logic, u cannot access http headers in ur html template....?
[11:25:28] *** Quits: Guest9 (~Guest9@43.241.144.40) (Ping timeout: 256 seconds)
[11:30:51] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[11:38:03] *** Joins: rcoote (~rcoote@2a02:908:692:81c0:fe08:e63f:cd47:a57e)
[11:40:38] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[11:42:29] *** Joins: saikub (saikub@saikub.thunderirc.net)
[11:47:07] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 265 seconds)
[11:48:38] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 272 seconds)
[12:13:32] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[12:14:12] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 256 seconds)
[12:14:20] *** Joins: gry (~quassel@botters/gry)
[12:14:43] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:15:33] *** Joins: codebam (~codebam@user/codebam)
[12:18:24] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[12:20:26] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[12:21:30] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[12:24:09] *** Joins: FightingFalcon (~sdasavcsg@user/fightingfalcon)
[12:24:40] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[12:24:46] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[12:25:08] *** Joins: mickey (~user@user/mickey)
[12:31:04] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[12:35:54] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:18] *** Quits: MaXxer0 (~MaXxer0@i5E86B26D.versanet.de) (Ping timeout: 240 seconds)
[12:37:24] *** Quits: rcoote (~rcoote@2a02:908:692:81c0:fe08:e63f:cd47:a57e) (Ping timeout: 272 seconds)
[12:38:32] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:36] *** Joins: MaXxer0 (~MaXxer0@mue-88-130-53-249.dsl.tropolys.de)
[12:43:29] *** Quits: deadbeat (~quassel@user/deadbeat) (Quit: No Ping reply in 180 seconds.)
[12:43:47] *** Joins: deadbeat (~quassel@user/deadbeat)
[12:44:59] *** Joins: vysn (~vysn@user/vysn)
[12:48:51] *** Joins: entuland (~entuland@user/entuland)
[12:58:29] *** Joins: federico_it (~textual@151.95.117.132)
[13:08:42] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:10:23] *** Joins: hassoon (hassoon@user/hassoon)
[13:13:09] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[13:14:17] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:18:32] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[13:24:23] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[13:27:40] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[13:28:00] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:40:07] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[13:44:20] *** Quits: Safa_[A_Boy]_ (~Safa@89.148.13.173) (Quit: Leaving)
[13:45:26] *** Joins: coc0nut_ (~coc0nut@128.90.137.184)
[13:50:33] <legit> So, like, most of JS seems to be camelCase and then you have button.onclick(). Yeah, I'm new :/
[13:59:36] *** Quits: doji (~doji@user/doji) (Ping timeout: 256 seconds)
[14:02:36] <cis> legit: javascript and web APIs have a long legacy, but yes it's mostly camelCase
[14:03:32] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[14:04:32] *** Joins: doji (~doji@user/doji)
[14:04:55] <theskillwithin> its onClick in react, but onclick in handler
[14:05:35] <theskillwithin> or if using event handler just click
[14:06:09] *** Quits: coc0nut (~coc0nut@167.99.37.181) (Quit: ZNC 1.8.2 - https://znc.in)
[14:07:22] *** Joins: coc0nut (~coc0nut@167.99.37.181)
[14:08:07] <legit> cis: yeah, legacy seems like the proper explanation
[14:08:17] *** Quits: coc0nut_ (~coc0nut@128.90.137.184) (Quit: ZNC 1.8.2 - https://znc.in)
[14:09:24] <cis> legit: just look at the "referer" header - that will never be fixed :)
[14:20:49] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[14:22:01] *** Quits: coc0nut (~coc0nut@167.99.37.181) (Quit: ZNC 1.8.2 - https://znc.in)
[14:24:24] *** Joins: coc0nut (~coc0nut@128.90.137.184)
[14:37:03] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[14:49:08] *** Quits: coc0nut (~coc0nut@128.90.137.184) (Ping timeout: 272 seconds)
[14:50:42] *** Joins: Naan (~naan@user/naan)
[14:53:36] *** Joins: coc0nut (~coc0nut@71.79-161-19.customer.lyse.net)
[14:53:36] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:55:30] *** Quits: coc0nut (~coc0nut@71.79-161-19.customer.lyse.net) (Remote host closed the connection)
[14:57:50] *** Joins: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation)
[14:58:32] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[14:59:29] *** Quits: wintersky (uid453465@id-453465.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[15:00:01] *** Quits: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation) (Remote host closed the connection)
[15:01:27] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[15:03:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[15:04:08] *** Joins: thiras (~thiras@user/thiras)
[15:10:08] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:13:12] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[15:14:35] *** Joins: codebam (~codebam@user/codebam)
[15:14:58] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[15:17:45] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[15:19:16] *** Joins: thiras (~thiras@user/thiras)
[15:22:59] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[15:22:59] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[15:22:59] *** Joins: Heraes (~Heraes@user/romarain)
[15:23:05] *** Quits: Heraes (~Heraes@user/romarain) (Read error: Connection reset by peer)
[15:32:28] *** Quits: federico_it (~textual@151.95.117.132) (Quit: Textual IRC Client: www.textualapp.com)
[15:34:33] *** Joins: cisme_ (~cisme_@2600:1700:d980:1a40:d38d:471d:81ca:a155)
[15:34:36] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[15:36:08] *** Joins: codebam (~codebam@user/codebam)
[15:36:40] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[16:00:48] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[16:02:10] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[16:04:07] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 258 seconds)
[16:05:35] *** Joins: codebam (~codebam@user/codebam)
[16:13:27] *** Joins: Akimb (~Akimb@78-58-31-17.static.zebra.lt)
[16:28:30] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:48:18] *** Quits: jazzy2 (~jaziz@2600:380:8577:4a6c:f914:953:ef7c:54cd) (Ping timeout: 240 seconds)
[16:49:52] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:51:05] *** Joins: Lyn (~Lyn@user/law)
[16:53:07] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[16:53:07] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[16:53:07] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[16:58:56] *** Joins: paratron (~chris@83.135.71.147)
[17:11:59] *** Quits: fernandobasso (~fernandob@37.63.194.35.bc.googleusercontent.com) (Quit: WeeChat 2.8)
[17:13:33] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 276 seconds)
[17:14:48] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[17:15:51] *** Joins: codebam (~codebam@user/codebam)
[17:16:44] *** Joins: strive (~strive@user/strive)
[17:24:56] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[17:32:05] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[17:32:18] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[17:33:41] *** Quits: paratron (~chris@83.135.71.147) (Quit: Lost terminal)
[17:38:02] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) (Ping timeout: 258 seconds)
[17:44:25] *** Joins: jazzy (~jaziz@2600:380:444b:591:392f:2aaf:15b2:ed64)
[17:48:26] <theskillwithin> https://youtu.be/bWXazVhlyxQ?t=176
[17:48:26] <skillbot> YouTube Title: Rage Against The Machine - Killing In the Name (Official Music Video)
[17:50:21] *** Joins: silly_ (~silly@user/silly)
[17:51:09] *** Quits: silly (~silly@user/silly) (Read error: Connection reset by peer)
[18:00:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[18:00:40] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[18:03:07] *** Joins: FightingFalcon (~sdasavcsg@212.253.112.126)
[18:03:08] *** Quits: FightingFalcon (~sdasavcsg@212.253.112.126) (Changing host)
[18:03:08] *** Joins: FightingFalcon (~sdasavcsg@user/fightingfalcon)
[18:05:28] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[18:06:52] *** Joins: codebam (~codebam@user/codebam)
[18:12:27] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[18:15:40] *** Sven_vB_ is now known as Sven_vB
[18:17:31] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 272 seconds)
[18:19:17] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:19:49] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 250 seconds)
[18:19:57] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:1af2:9e87:9ae6:934c) (Quit: Leaving)
[18:20:13] *** Quits: g00fy (~g00fy@user/g00fy) (Quit: The Lounge - https://thelounge.chat)
[18:20:21] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[18:20:51] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[18:21:56] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[18:21:57] *** Joins: g00fy (~g00fy@user/g00fy)
[18:24:58] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[18:26:14] *** Joins: zebrag (~chris@user/zebrag)
[18:31:32] *** Joins: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net)
[18:31:54] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[18:32:13] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[18:33:19] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c08b:4648:88f4:bf33) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:34:51] *** biggusnickus_ is now known as biggusnickus
[18:37:27] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Ping timeout: 258 seconds)
[18:38:54] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[18:41:19] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[18:43:32] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[18:46:08] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:46:13] <cantelope> >n (_=![]+[])[__=+!![]]+_[++__+!![]]+_[++__]
[18:46:18] <cantelope> n> (_=![]+[])[__=+!![]]+_[++__+!![]]+_[++__]
[18:46:18] <jellobot> (okay) 'ass'
[18:46:38] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[18:48:20] <theskillwithin> cantelope nice ass
[18:48:28] <cantelope> :D
[18:48:32] *** Quits: jazzy (~jaziz@2600:380:444b:591:392f:2aaf:15b2:ed64) (Ping timeout: 272 seconds)
[18:48:43] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[18:51:04] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[18:51:18] <ciphrCat> Ñ¼
[18:53:36] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de) (Ping timeout: 272 seconds)
[18:54:14] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[18:55:36] *** Joins: codebam (~codebam@user/codebam)
[18:56:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:58:54] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:01:38] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[19:02:17] *** Joins: pulse (~pulse@user/pulse)
[19:08:57] *** Joins: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[19:14:02] *** Joins: zacts (~zacts@user/zacts)
[19:14:02] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[19:18:56] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) (Ping timeout: 272 seconds)
[19:19:35] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 272 seconds)
[19:20:32] *** Joins: codebam (~codebam@user/codebam)
[19:28:24] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[19:29:36] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:33:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[19:35:33] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[19:35:46] *** Quits: zacts (~zacts@user/zacts) (Ping timeout: 246 seconds)
[19:37:04] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[19:39:59] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[19:40:07] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Client Quit)
[19:41:15] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[19:49:23] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[19:49:38] *** Joins: pavonia (~user@user/siracusa)
[19:53:38] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[19:56:25] *** Quits: xse_ (~xse@user/xse) (Ping timeout: 258 seconds)
[19:56:42] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (Ping timeout: 276 seconds)
[20:03:06] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[20:03:11] *** Joins: zacts (~zacts@user/zacts)
[20:12:47] *** Joins: doubleGuy (~doubleGuy@user/doubleguy)
[20:14:24] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[20:14:37] *** Parts: doubleGuy (~doubleGuy@user/doubleguy) (Leaving)
[20:20:05] *** Joins: zerowalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d)
[20:21:12] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:23:43] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[20:24:44] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[20:28:58] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[20:32:15] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[20:34:23] *** Joins: nuncanada (~dude@179.235.162.215)
[20:36:48] *** Joins: whitehot_robot (~whitehot_@mail.whitehotrobot.com)
[20:39:06] *** Joins: Poboy (~Poboy@user/poboy)
[20:39:37] *** whitehot_robot is now known as whr_test
[20:41:09] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:85c9:8156:1a0a:3c1c)
[20:42:07] *** whr_test is now known as whitehot_robot
[20:42:37] *** whitehot_robot is now known as whr_test
[20:42:56] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[20:43:55] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[20:44:01] *** whr_test is now known as whitehot_robot
[20:44:28] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Remote host closed the connection)
[20:46:10] *** Joins: han-solo (~hanish@user/han-solo)
[20:47:04] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[20:49:29] *** Quits: zerowalker (~ZeroWalke@2001:9b1:28f8:8300:7164:4c68:eefc:f59d) (Quit: Leaving)
[20:50:50] *** Joins: sillyslux__ (~silly@user/silly)
[20:51:00] *** Joins: l__q (~modinfo@user/modinfo)
[20:54:15] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Killed (NickServ (GHOST command used by Sven_vB_)))
[20:54:19] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[20:54:38] *** Quits: silly_ (~silly@user/silly) (Ping timeout: 252 seconds)
[20:54:40] *** Joins: FightingFalcon (~sdasavcsg@212.253.112.126)
[20:54:41] *** Quits: FightingFalcon (~sdasavcsg@212.253.112.126) (Changing host)
[20:54:41] *** Joins: FightingFalcon (~sdasavcsg@user/fightingfalcon)
[20:59:17] *** Joins: wovixo (~wovixo@128.104.205.49)
[21:01:35] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[21:01:45] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:02:47] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[21:04:12] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[21:04:56] *** Joins: thiras (~thiras@user/thiras)
[21:07:35] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[21:09:15] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 258 seconds)
[21:09:47] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Client Quit)
[21:09:50] <Lyn> so if I understand it correctly, static react files can be served with either nginx or node -- which is the preferred choice in a container, or are there other sensible options?
[21:11:09] <sheetjs> you can also use node with an nginx proxy
[21:11:27] <GreenJello> Lyn, serving them with node in production is not great, especially if in the same process as handing API requests as those can add latency to static asset fetches
[21:12:10] <GreenJello> either nginx can serve the static files, or something like S3 + a CDN works well
[21:12:19] <sillyslux__> what files are considered "static react files"?!
[21:12:55] <sillyslux__> like componentXY.jsx?
[21:12:58] <GreenJello> output of webpack or whatever
[21:13:01] <sheetjs> you could dynamically generate JS files
[21:14:44] *** Joins: Guest9 (~Guest9@103.240.169.29)
[21:15:54] <wroathe> I dynamically generate the files that dynamically generate my JS files.
[21:16:42] <systemfault> Not enough generation, we need to go deeper
[21:17:29] <sheetjs> nodejs script generating C code, C preprocessor generating JS code
[21:17:43] *** Joins: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi)
[21:17:47] <sheetjs> actually that's how we test printf
[21:17:54] <sillyslux__> i have an ai that teaches and orchestrates whole zoo of ai's for on-the-fly code generation
[21:18:20] <sheetjs> node script generates a header file, then c preprocessor generates JS code and C code
[21:18:24] <Lyn> sillys do you have a generator to power those AIs
[21:18:27] <sheetjs> and the outputs of both are compared
[21:18:44] <sillyslux__> the somehow generate their own power
[21:19:00] <Lyn> sounds like a powerful setup
[21:20:23] <wroathe> sheetjs: It weeds out the riff raff. If they can't understand the build system, why should they be allowed to contribute to the final product?
[21:20:29] <sillyslux__> should have seen last week, when it all suddenly on its own moved to an old warehouse
[21:20:33] *** Joins: han-solo (~hanish@103.104.46.2)
[21:20:36] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 252 seconds)
[21:20:53] <sheetjs> https://github.com/SheetJS/printj/blob/master/stress/stress.js i'd consider this the most bizarre JS script in the org
[21:21:10] *** Quits: han-solo (~hanish@103.104.46.2) (Client Quit)
[21:21:12] *** Joins: zebrag (~chris@user/zebrag)
[21:21:26] <sillyslux__> lol
[21:21:56] *** Joins: han-solo (~hanish@user/han-solo)
[21:22:13] <sillyslux__> sheetjs, i'll hook you up with my ai
[21:23:41] <sheetjs> i should make a bounty for a pure JS cpp
[21:23:47] <sheetjs> just the preprocessor
[21:27:19] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[21:27:59] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[21:29:53] *** Joins: IceMichael (~IceMichae@dynamic-046-114-152-144.46.114.pool.telefonica.de)
[21:30:07] <sheetjs> K&R printf specifiers: /%(?:([-])?(\d+|\*)?(?:\.(\d+|\*))?([hl])?([dioxXucsfeEgGp%]))/x
[21:30:17] <sheetjs> K&R printf specifiers: /%(?:([-])?(\d+|\*)?(?:\.(\d+|\*))?([hl])?([dioxXucsfeEgGp%]))/
[21:30:23] <sheetjs> 2021 community printf: /%(?:%|([1-9]\d*\$)?([-+ 0#']*)?([1-9]\d*|\*(?:[1-9]\d*\$)?)?(?:\.(\d+|\*(?:[1-9]\d*\$)?))?(hh?|ll?|[LzjtqZIw])?([diouxXfFeEgGaAcCsSpnDUOmbByYJVT]))/
[21:30:48] <sheetjs> too many cooks spoil the soup, or something
[21:31:17] *** Joins: Northwoods (~Northwood@223.130.30.69)
[21:32:26] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 265 seconds)
[21:33:08] <wroathe> I like soup
[21:37:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[21:37:57] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[21:39:27] <sheetjs> hmm what do companies use for generic developer email
[21:40:17] <GreenJello> what do you mean by "developer email"?
[21:40:23] <sheetjs> like developer team
[21:40:30] <sheetjs> or engineering or programming or w/e
[21:41:13] <sheetjs> so dev@ is the email we use for tech stuff
[21:41:41] <sheetjs> tech@ is also popular
[21:43:48] *** Joins: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com)
[21:44:05] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[21:44:19] *** Joins: Betal (~Beta@user/betal)
[21:44:45] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[21:46:45] *** Joins: Rockwood (~Rocky@user/rocky)
[21:48:53] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[21:49:40] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Ping timeout: 272 seconds)
[21:54:02] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Remote host closed the connection)
[21:55:49] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[21:55:57] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:56:04] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[22:12:14] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[22:13:04] *** Joins: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net)
[22:16:19] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:17:47] *** Joins: junktext (~junktext@109.201.152.167)
[22:18:18] *** Quits: friend (~friend@c-73-43-171-169.hsd1.ga.comcast.net) (Ping timeout: 240 seconds)
[22:20:59] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Client Quit)
[22:21:08] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[22:23:52] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[22:26:52] *** Joins: WishBoy (~WishBoy@user/wishboy)
[22:29:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[22:30:06] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:33:42] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[22:34:23] <celphi> whATs up peeps
[22:34:33] *** Parts: hyper_ch (~hyper_ch@user/hyper-ch/x-8215596) (Leaving)
[22:34:43] *** Joins: thiras (~thiras@user/thiras)
[22:38:50] <wroathe> China's kicking our asses in the olympics
[22:39:12] <wroathe> That's what's up
[22:42:27] *** Quits: yaalon (~yaalon@201.171.68.25.dsl.dyn.telnor.net) (Remote host closed the connection)
[22:42:28] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Quit: Leaving)
[22:47:24] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[22:51:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[22:51:27] *** Quits: nuncanada (~dude@179.235.162.215) (Read error: Connection reset by peer)
[22:52:22] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[22:52:49] *** Quits: Northwoods (~Northwood@223.130.30.69) (Ping timeout: 250 seconds)
[22:55:45] <celphi> lol wroathe
[22:56:07] <celphi> btw i did well on amazon interview- i find out on monday of results
[22:56:38] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[22:56:42] *** Joins: nuncanada (~dude@179.235.162.215)
[22:57:10] *** Joins: eXistenZ (~biskit@bzq-79-182-123-73.red.bezeqint.net)
[22:58:59] *** Joins: Northwoods (~Northwood@223.130.30.69)
[23:02:33] <wroathe> celphi: neato
[23:02:54] <wroathe> celphi: Were there any problems you couldn't solve?
[23:03:04] <celphi> i solved them all
[23:03:14] <wroathe> celphi: Any trees? :P
[23:03:21] <celphi> node list
[23:03:33] <wroathe> linked list?
[23:03:40] *** Quits: Northwoods (~Northwood@223.130.30.69) (Remote host closed the connection)
[23:03:45] <celphi> sure - linked list of nodes
[23:03:49] <wroathe> Ah
[23:04:00] *** Joins: Northwoods (~Northwood@223.130.30.69)
[23:04:01] <celphi> but it was easy
[23:04:03] <wroathe> It's just that "node" could be in reference to node.js in this context :P
[23:04:09] <celphi> true
[23:04:50] <wroathe> Should've had you write a parser to convert infix expressions to postfix expressions :P
[23:05:27] <celphi> havent i alrady did that from K&R?
[23:05:41] <wroathe> Yeah, but the point is to make you do it on the spot in a stressful situation
[23:06:15] <celphi> actually i had 0 stress when i had interview
[23:06:31] <celphi> maybe bc all the questions i knew the answer
[23:07:16] <celphi> one of my answers prob didnt have the best time complexity though
[23:07:18] <wroathe> celphi: Very nice. Now that Bezos is retiring maybe you'll be the next guy to $200 bil in personal wealth
[23:07:25] <wroathe> celphi: Oh?
[23:07:50] <celphi> yeah - i think there was better but wasnt enough time to think of one
[23:08:02] *** Joins: ferdna (~ferdna@user/ferdna)
[23:08:29] <celphi> it wasnt worse complexity but i think there prob was better
[23:08:33] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[23:09:17] <celphi> js programmers take for granted time complexity of completing tasks
[23:09:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:09:50] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[23:09:58] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[23:10:07] <GreenJello> it often doesn't matter
[23:10:16] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[23:11:13] <celphi> yeah totally get that- but in amazon interview it does
[23:11:50] <celphi> they even had memory constraint problems
[23:12:41] *** Joins: thiras (~thiras@user/thiras)
[23:14:30] <wroathe> celphi: What was the memory constraint problem?
[23:14:34] *** Quits: mattil (~mattilinn@78-27-98-194.bb.dnainternet.fi) (Remote host closed the connection)
[23:15:17] <wroathe> "should array indices be used as dictionary keys?" :P
[23:17:12] <celphi> building your own cache that handles LRU Eviction policy
[23:18:56] <wroathe> Hrm, I wouldn't want to do that on the spot.
[23:19:04] <wroathe> celphi: What data structures did you use?
[23:19:16] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:19:29] <celphi> just a plain object
[23:19:55] <celphi> well two objects
[23:20:06] <wroathe> celphi: So how did you track recency?
[23:20:45] <wroathe> My first thought is using a Map
[23:20:57] <wroathe> And then delete keys and re-insert them whenever they're accessed
[23:21:16] <celphi> i showed example of size and he was happy enough with my example
[23:21:44] *** Quits: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx) (Remote host closed the connection)
[23:22:26] <wroathe> celphi: Example of size? I mean, if it's a least recently used cache you'd have to have some way of indicating the access order. Objects don't necessarily provide you that (or well, they didn't use to)
[23:23:06] <han-solo> i was thinking `key : [value, access_count]` ?
[23:23:15] <wroathe> AFAIK it's typically a doubly linked queue for maintaining the access order, and a hash table with pointers into that queue for constant access time
[23:23:48] <wroathe> han-solo: The problem with that is you'd have to loop through all of the entries to find the lowest access counts, and access count doesn't track order of access, which is what this needs
[23:24:02] *** Quits: Guest9 (~Guest9@103.240.169.29) (Ping timeout: 272 seconds)
[23:24:10] <han-solo> mm, true
[23:24:32] <wroathe> I think a Map probably gives you nice asymptotics with this, while maintaining insertion order
[23:24:47] <wroathe> So if you just delete and re-add each key you access, you'll have the least recently used keys first
[23:25:36] <celphi> https://bpa.st/GEWQ
[23:25:43] <celphi> is the basic idea
[23:26:51] <celphi> of course the string input would be much much longer so longer computation
[23:29:42] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Remote host closed the connection)
[23:30:06] *** Joins: Atum_ (~IRC@user/atum/x-2392232)
[23:30:43] <celphi> it's prob not compilable code, bc we dont get to compile it, we just type it w/o code editor hints ect.
[23:30:59] <celphi> but that's the jist
[23:31:16] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:32:27] <wroathe> celphi: https://gist.github.com/JustinChristensen/5dfe1d566d977d223121c50d7e6aec46
[23:32:37] <wroathe> celphi: Something like this is what I was thinking
[23:34:14] <celphi> yeah with time you could just add to a queue, but he specifically asked me how would i manage the object size
[23:34:25] <han-solo> did they base the max size of the cache based on the sum of the numbers ? :/
[23:34:29] <han-solo> maybe i read it wrong
[23:35:21] <celphi> no it's a whiteboarding exxaample han-solo- the keys represent the size and if more than one cache value has that size it's pushed onto the array of that key
[23:35:39] <han-solo> ah, i read it wrong, sorry
[23:35:43] <celphi> np
[23:35:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 256 seconds)
[23:35:59] <celphi> so the idea is to remove the keys that take up the most space
[23:37:06] <wroathe> This doesn't seem like an LRU cache though?
[23:37:16] <wroathe> What's enforcing the least-recently used part?
[23:37:20] <celphi> he changed the requiresments
[23:37:28] <wroathe> Ah
[23:37:32] <celphi> he wanted it based on size
[23:37:50] <celphi> but he did ask about time
[23:38:06] <celphi> and i explained you could just use a queue
[23:38:21] <wroathe> Ah. Nice.
[23:38:36] <GreenJello> an LRU cache can be size based, but I think it's just deleting the least recently used until you have enough space to insert the new item
[23:38:46] <GreenJello> not searching for the largest entries
[23:39:04] <wroathe> GreenJello: yeah, that's how I've always thought of it
[23:39:47] <GreenJello> extension of wroathe's https://ject.dev/?rtab=console&saved=AcqBsKH5tTVtz
[23:40:28] <celphi> neat editor
[23:40:47] <wroathe> GreenJello: yeah, I probably should've included insert for completeness :P
[23:41:58] <wroathe> Insertion-ordered hash tables are a mystery to me
[23:41:59] <GreenJello> celphi, thanks, it's my current personal project
[23:42:12] <wroathe> I'll need to do a deep dive on Map's implementation one of these days
[23:42:28] <celphi> looks really clean
[23:46:52] <celphi> GreenJello: why do you return inside access
[23:47:59] <GreenJello> that was in wroathe's as well, and it's because with an LRU cache you need to update the order of recent accesses while getting any entry
[23:48:19] <GreenJello> access is get+track
[23:48:44] <celphi> right but isnt the object already mutated- why return the value
[23:49:08] <GreenJello> it's how you get the value for a key
[23:49:44] <GreenJello> better to have that in one function call instead of relying on the code always performing both parts itself
[23:50:10] <celphi> if i comment that line out i get same results
[23:50:12] <GreenJello> you use access instead of lru.get
[23:50:52] <GreenJello> console.log('the value of baz is', access('baz', lru));
[23:51:03] <GreenJello> would be a more realistic example
[23:51:13] *** Joins: yaalon (~yaalon@189.202.79.36.cable.dyn.cableonline.com.mx)
[23:51:24] <celphi> ok. so to get the value accessed
[23:51:45] <celphi> well updated rather
[23:52:03] <celphi> does Map always maintain the key-value order like that?
[23:52:13] <GreenJello> it's insertion order, yes
[23:52:24] <GreenJello> so removing and then reinserting it will just move it to the end
[23:52:29] <celphi> i thought javascript automaticaly resorted
[23:52:38] <GreenJello> nope
[23:52:49] <GreenJello> there isn't even a mechanism for sorting arbitrary values
[23:53:19] *** Quits: l__q (~modinfo@user/modinfo) (Read error: Connection reset by peer)
[23:53:57] <celphi> but if you suddenly got a numerical key it would break
[23:54:09] <GreenJello> not with Map
[23:54:20] <GreenJello> Map is always insertion order
[23:55:08] <GreenJello> that is a thing with object keys
[23:55:12] <celphi> i see - so that's just with Objects
[23:55:17] <celphi> *objects
[23:56:02] <celphi> i knew about the stringification of keys in objects but didnt know about the insertion order
[23:56:15] <wroathe> celphi: Yeah, with this LRU cache implementation you'd treat the lru Map object as an opaque handle, and expose functions like access and insert that need to be used instead of lru.get and lru.set
[23:56:39] *** Quits: FightingFalcon (~sdasavcsg@user/fightingfalcon) ()
[23:57:28] <wroathe> And probably go so far as to add an lru() function to the module, instead of asking the user to create a new map: const cache = lru([['foo', 'bar']]);
[23:58:01] <wroathe> I'd*
[23:58:03] <celphi> makes snse
[23:58:32] <celphi> oh well guess i ddint do well on that one then haha
[23:58:49] *** Joins: Northwoodss (~Northwood@223.130.30.69)
[23:59:06] <wroathe> Dunno. Maybe the interviewer wasn't up to speed on it either
[23:59:20] <wroathe> He could've pivoted as much for his sake as for yours
[23:59:21] <han-solo> i would like to go as far as to make a class, but is that too much ? :D
[23:59:34] <wroathe> han-solo: OOP is against my religion
[23:59:38] <celphi> lol
[23:59:58] <celphi> wroathe: likes C++ more than C dont let him trick you
