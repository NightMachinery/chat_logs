[00:00:56] <moon-child> I don't think doing in-place bignum ops would do much for performance
[00:01:28] <moon-child> maybe reduce memory traffic a bit on add/sub
[00:02:03] <moon-child> but they are rarely that big
[00:02:27] <moon-child> even for crypto, keys top out at 4096 bits or so; that is 512 bytes
[00:04:28] <sham1> And you're probably not doing all *that* much with crypto and most lisps' bignum implementations
[00:07:56] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:09:02] *** Quits: thevishy (~Nishant@2405:201:f005:c007:d93e:9746:14f0:2f69) (Read error: Connection reset by peer)
[00:09:50] *** Joins: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e)
[00:10:11] *** Quits: letto (~letto@188.26.158.104) (Quit: Konversation terminated!)
[00:11:54] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Quit: leaving)
[00:12:06] *** Joins: letto (~letto@188.26.158.104)
[00:12:07] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[00:16:54] *** Joins: pdietz22 (~pdietz@216-59-66-162.static.firstlight.net)
[00:17:21] *** Parts: pdietz22 (~pdietz@216-59-66-162.static.firstlight.net) ()
[00:22:03] *** Joins: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se)
[00:22:33] *** Quits: kevingal (~quassel@2001:770:c0:401:2d47:2f9b:c1be:64a0) (Remote host closed the connection)
[00:34:11] *** Quits: even4void (even4void@came.here.for-some.fun) (Ping timeout: 252 seconds)
[00:38:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[00:39:55] *** Joins: aeth (~aeth@user/aeth)
[00:42:53] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[00:43:33] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:43:58] *** Joins: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba)
[00:45:16] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ec:1646:7d3a:50e:9c6d:2db)
[00:47:50] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[00:49:02] *** Quits: Algernon666 (~Algernon6@2a01:e0a:511:6ce0:5d34:adba:2092:1fba) (Ping timeout: 240 seconds)
[01:09:42] *** Joins: even4void (even4void@came.here.for-some.fun)
[01:11:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:13:25] *** Quits: cosimone (~user@93-47-231-203.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:22:17] *** Joins: karlosz (~karlosz@47.151.136.69)
[01:24:31] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:27:05] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 256 seconds)
[01:33:37] *** Quits: VincentV` (~user@212.97.0.109) (Remote host closed the connection)
[01:36:22] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 260 seconds)
[01:40:37] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:43:56] *** selwynning is now known as selwyn
[01:44:35] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 252 seconds)
[01:47:35] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[01:50:13] *** Quits: krid (~krid@102-10-133-N4.customer.vsm.sh) (Ping timeout: 268 seconds)
[01:53:33] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[02:05:23] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[02:10:52] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[02:11:45] <macaw> Hey. My memory is failing me. Was there a way to only compile a block of code when (<= speed 2)? I currently have an assertion which is optional could be turned on only on high SAFETY.
[02:17:34] <macaw> A heads-up: I _have_ looked through both CLHS and SBCL's manual and couldn't find the answer. Search engines in today's age are a disaster, so they too didn't return anything relevant.
[02:17:52] <moon-child> macaw: (declare (type (satisfies your-assertion) some-variable))?
[02:18:14] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:21:29] <macaw> Thanks moon-child, but I don't think this is what I'm looking for. I'm thinking of something like this (pseudocode): `#+(= safety 3) (assert (< 2 argcount 4) ...)`
[02:21:37] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[02:23:07] <moon-child> well, it is clunkier.  But it gets you the same result.  (defun verify-argcount (x) (< 2 x 4)) [...] (declare (type (satisfies verify-argcount) argcount) ...)
[02:28:45] <macaw> moon-child: Ooh... From what I understand, this exploits SBCL's behavior that type declarations are only checked on high safety values? If so, this is very clever.
[02:28:56] <moon-child> yes
[02:30:11] <macaw> Wooow! Bravo for the ingenuity and thank you moon-child. :D
[02:30:51] <moon-child> :)
[02:30:54] <macaw> I didn't understand what you meant in the first message, but the second one sent it home.
[02:33:16] *** Quits: monkey_ (~user@181.114.17.106) (Read error: Connection reset by peer)
[02:36:05] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:36:05] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ec:1646:7d3a:50e:9c6d:2db) (Read error: Network is unreachable)
[02:36:53] <pjb> macaw: there is no standard way to detect the current optimization level.  Some implementations have an API, but using it wouldn't be conforming.
[02:37:24] <pjb> macaw: you could push a feature when you set the optimization level, and use #+ to add the code you want to compile in that case. This would be conforming.
[02:38:40] <pjb> (progn (declaim (optimize (speed 3))) (pushnew :speed=3 *features*))    #+(or speed=2 speed=3) (do-something-fast)
[02:39:05] <pjb> Well: (progn (declaim (optimize (speed 3))) (eval-when (:compile-toplevel :load-toplevel :execute) (pushnew :speed=3 *features*))))
[02:39:09] *** Quits: MaghOz (~maghoz@2001:4bc9:821:d3f2:540d:f952:207a:2) (Quit: WeeChat 3.3)
[02:45:32] <macaw> pjb: I see. This is what I have been suspecting after not finding anything on the topic on CLHS and in SBCL's Manual. Fortunately this code is currently prototypal and is almost certainly not going to be shared.
[02:48:14] <macaw> pjb: Although I will keep that idea for things I'm going to be sharing in the future, as it looks to be a robust way of implementing this feature.
[02:50:13] <macaw> Honestly, a lack of this feature in CL feels like an oversight, but this is only because I've become accustomed to the comfort and cleverness of the language and it's implementations.
[02:51:22] <macaw> Thanks pjb and moon-child. :)
[02:53:09] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[02:55:59] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[02:57:32] *** Joins: livoreno (~livoreno@user/notzmv)
[02:59:33] <pjb> changing the semantics depending on the optimization level is evil!
[03:02:04] *** Joins: [deleted] (~livoreno@user/notzmv)
[03:03:03] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[03:06:40] *** Joins: livoreno (~livoreno@user/notzmv)
[03:06:54] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[03:08:02] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:09:08] *** Joins: v0|d (~user@ns1.core.gen.tr)
[03:14:00] *** Joins: ThC27 (ThC27@gateway/vpn/protonvpn/thc27)
[03:14:15] *** ThC27 is now known as KvL
[03:16:17] *** Parts: KvL (ThC27@gateway/vpn/protonvpn/thc27) ()
[03:17:02] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[03:17:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[03:24:34] *** Joins: KvL (~KvL@130.95.254.70)
[03:31:25] *** Joins: KvL_ (KvL@gateway/vpn/protonvpn/kvl)
[03:32:21] *** Quits: KvL (~KvL@130.95.254.70) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[03:32:21] *** KvL_ is now known as KvL
[03:33:55] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[03:40:09] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:bde5:121e:162b:ec8a) (Ping timeout: 256 seconds)
[03:45:52] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[03:46:53] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[03:47:10] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[04:10:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:11:47] *** Joins: livoreno (~livoreno@user/notzmv)
[04:11:50] *** Joins: notzmv (~zmv@user/notzmv)
[04:13:51] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[04:17:54] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[04:36:10] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:36:45] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:46:13] *** Joins: krid (~krid@102-10-133-N4.customer.vsm.sh)
[04:47:50] *** Quits: beagles (~beagles@142.162.188.116) (Ping timeout: 268 seconds)
[04:50:18] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[04:50:55] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[04:52:45] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[04:54:04] *** Joins: beagles (~beagles@142.162.188.116)
[04:54:40] *** Joins: theruran_ (uid11305@id-11305.hampstead.irccloud.com)
[04:59:45] <unixlisp> why #+(and) feature expression success? and is a symbol not macro, "An and feature expression succeeds if all of its argument feature-conditionals succeed; otherwise, it fails."  not say "If no forms are supplied, (and) returns t." like and macro.
[05:02:38] *** Joins: Lycurgus (~juan@98.4.112.204)
[05:05:10] <unixlisp> (and feature-conditional*) if no feature-conditional are supplied, then ...?
[05:26:48] <Alfr> unixlisp, one argument could be: To invoke the "otherwiese, it fails" part, you need /some/ feature-conditional which fails, which you can't have as none were provided.
[05:27:26] <Alfr> unixlisp, an other one, would be to take the neutral element for the logical and operation, and that's t.
[05:27:47] <Alfr> unixlisp, well, not necessarily t, but some true value.
[05:32:36] *** Quits: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[05:32:39] <unixlisp> Alfr: difficult to interprete that sentence exactly. I just think that is an ignorance by spec. same as (or feature-conditional*)
[05:33:34] *** Joins: ees-mobile (~ees-mobil@pool-108-18-30-46.washdc.fios.verizon.net)
[05:34:40] <Alfr> unixlisp, I disagree, I think (and) => t and (or) => nil for feature expressions is quite clear from
[05:34:43] <yitzi> In order to be logically consistent n-ary `and` with zero arguments is true and n-ary `or` with zero arguments is false. 
[05:34:44] <Alfr> clhs 24.1.2.1
[05:34:44] <specbot> Feature Expressions: http://www.lispworks.com/reference/HyperSpec/Body/24_aba.htm
[05:36:18] <unixlisp> Alfr: that is and macro. "If no forms are supplied, (and) returns t." specify it.
[05:39:18] <Alfr> unixlisp, that's only needed there because the AND macro specifies that it returns the value of its /last/ form; and thus needs to specify what it returns when there isn't any form supplied.
[05:39:49] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[05:42:14] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:44:10] <unixlisp> yitzi: there is a point about that. "In keeping with the concept of vacuous truth, when conjunction is defined as an operator or function of arbitrary arity, the empty conjunction (AND-ing over an empty set of operands) is often defined as having the result true." https://en.wikipedia.org/wiki/Logical_conjunction
[05:44:45] <Alfr> unixlisp, and to be explicit about the first argument I mentioned above: Assuming you want (and) to fail, then "otherwise" has to be true, thus ¬(all feature-contitionals succeed) => (there exist a feature-conditional which fails). And that's a contradiction, because none are given.
[05:45:00] <moon-child> unixlisp: we may reinterpret 'for-all'-type statements as 'there-exists'-type statements, when it is convenient to do so.  Hence, rather than 'an and feature expression succeeds if and only if all of its arguments succeed', we may say 'an and feature expression succeeds if and only if there does not exist an argument which fails'
[05:45:12] <moon-child> in the case where there are no arguments, there can not be one which fails
[05:45:18] <moon-child> so no extra verbiage is required
[05:54:29] *** Joins: Guest64873 (~bot@172-220-180-248.res.spectrum.com)
[05:54:37] *** Quits: Guest64873 (~bot@172-220-180-248.res.spectrum.com) (Read error: Connection reset by peer)
[05:55:23] <unixlisp> Alfr: moon-child: seems better. then "(or feature-conditional*) An or feature expression succeeds if any of its argument feature-conditionals succeed; otherwise, it fails."
[05:55:52] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[05:58:19] <Alfr> unixlisp, what your question about that one?
[05:58:53] <unixlisp> apply logic about (or)
[06:00:05] <moon-child> 'any of its arguments succeed[sic]' can be read as 'if there exists an argument which succeeds'
[06:00:16] <moon-child> clearly, if there are no arguments, then there cannot be an argument which succeeds
[06:00:42] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:01:27] <Alfr> unixlisp, a similar argument works for (or): Assuming (or) were true, then some provided argument must have succeeded. Contradiction, as there weren't any.
[06:01:29] <White_Flame> and the short-cutting guarantees of at least the macro forms are based on finding a truth value, else returning the opposite one
[06:01:37] <Alfr> moon-child, you were faster. :)
[06:01:46] <moon-child> Alfr: :)
[06:01:54] <moon-child> also spotted a typo
[06:04:56] <unixlisp> ok, this is a logic racing. a little bit worry, "often defined as" from wiki.
[06:05:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:06:01] <Alfr> moon-child, if you look closely enough, I made (and form*) behave like (progn form*), except for the case of (and) which returns (not (progn)). So, don't you worry about your typo.
[06:08:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:08:50] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:09:17] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[06:10:06] <unixlisp> hi, yesterday i put https://github.com/svetlyak40wt/array-performance , are you intrested?
[06:10:26] <unixlisp> how fast list walking!
[06:17:10] <White_Flame> all of those tests are linear, which is a singly-linked list's best case
[06:17:57] <unixlisp> but vector walking faster?
[06:18:09] <moon-child> 'are you interested'  no, I am not
[06:18:49] <unixlisp> don't care about cost?
[06:19:23] <moon-child> don't expect that that is a particularly representative benchmark
[06:20:33] <unixlisp> yes. but there is truth in it.
[06:21:03] <unixlisp> only sbcl have a good vector walking
[06:22:47] <Alfr> unixlisp, are you running those tests only once or am I missing something? Because tens/hundreds of nanoseconds will drown in jitter, and I'd be unsure whether any of your clocks have nanosecond accuracy.
[06:23:46] <White_Flame> vector walking at top speed would be faster than linked lists, due to half the memory accesses
[06:23:48] <Alfr> unixlisp, you really want to repeat those tests quite a few times and at least output mean and variance.
[06:24:38] <White_Flame> oh heck, I didn't even realize it was just running them once
[06:24:56] <moon-child> White_Flame: you're not going to be exhausting memory bandwidth with lists anyway.  Big and small are trivial; medium size is the interesting case
[06:25:02] <White_Flame> but yeah, the numeric parameter isn't the number of runs to perform
[06:25:14] <moon-child> and you can do fun things with prefetch and ooo
[06:26:09] <White_Flame> moon-child: worst case is that each cons cell is on a different cache line, as I'm not sure it could prefetch it
[06:26:19] <moon-child> I mean explicit prefetch
[06:26:21] <White_Flame> (automatic prefetch, that is)
[06:26:53] <moon-child> a fun talk thattaways from ocaml people.  Forget the details.  But I think they found prefetching two nodes ahead was optimal
[06:29:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:30:49] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[06:31:55] <unixlisp> Alfr: that is Alexander Artemenko's repo. it uses "the-cost-of-nothing" package.
[06:32:19] <unixlisp> test it need some time.
[06:34:56] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:34:59] <unixlisp> White_Flame: "just running them once"? see the-cost-of-nothing bench 
[06:35:02] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 260 seconds)
[06:35:52] <White_Flame> ah, run-benchmark vs benchmark
[06:36:24] <unixlisp> yes.
[06:40:14] <unixlisp> adjustable-vector having list flexibility is so slow! 
[06:40:43] <moon-child> that benchmark doesn't mean what you think it does
[06:40:45] <White_Flame> adjustable vector does not have the flexibility of a list
[06:41:42] <unixlisp> some features
[06:47:18] <unixlisp> moon-child: there are no many benchmarks online, it can give us some insight.
[06:48:39] <Alfr> unixlisp, ah, cool. Didn't know that the-cost-of-nothing even existed.
[06:49:23] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[06:49:51] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:50:14] <unixlisp> I remember somewhere a class vs structure performance test, big difference.
[06:51:26] <unixlisp> Alfr: Because we all know nothing of cost! (no. some know)
[06:53:41] *** Quits: tevo (~tevo@164.163.113.247.yesconnect.net.br) (Ping timeout: 252 seconds)
[06:55:46] <Alfr> unixlisp, if you're after an eat the cake and keep it sequence data structure, you'll likely be disappointed. Lists and vectors are only two extremes, lists having fast local changes and only sequential access and vectors having fast random access but abysmal insertion. Then there's a whole lot in between like skip lists, trees, k-ary trees ...
[06:56:02] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[06:56:50] * moon-child *whispers* fingertrees
[06:57:20] <Alfr> unixlisp, I think you should rather chose a representation that fits the problem than trying to find that perfect sequence representation.
[06:58:02] <unixlisp> i said list walking
[06:58:54] *** Joins: tevo (~tevo@164.163.113.250.yesconnect.net.br)
[07:00:39] <unixlisp> random access, 10 items list is close to vector, faster than adjustable-vector for sbcl.
[07:02:18] <unixlisp> alist seems be also faster than hashtable for small items
[07:02:19] <Alfr> unixlisp, so you only need to walk a list? You never have to shuffle things around to construct it or accessing something at a given position?
[07:02:46] <unixlisp> different situations.
[07:08:23] <Alfr> unixlisp, yes what situation? I mean there are at least two scenarios I can immediately think of: 1. minimize execution time; 2. worst case bounded operations, because you need to handle untrusted data.
[07:09:48] <moon-child> I've gone off the idea of trust
[07:09:51] <moon-child> it's overrated
[07:10:42] <Alfr> moon-child, gnah. Call it potentially malicious requests, if you like.
[07:12:19] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[07:13:09] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[07:21:14] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 260 seconds)
[07:21:17] <unixlisp> Alfr: (dolist) (loop :for item :in) sequentialy process data, small length.
[07:21:47] <unixlisp> "Also, because COMMON LISP has such a plethora of built-in convenience functions to manipulate conses and lists, and because conses are at the same time very simple yet extremely versatile, there are lots of situations where you should just use them (whereas if you’re coming from another programming language, your first instinct might tell you to use, say, arrays)" from CLR
[07:22:01] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[07:23:22] <unixlisp> I use it plot small data, fast, convenient. After all, lisp is list processor.
[07:24:15] <jcowan> Indeed. Which is why one of the purposes of the current R7RS-large process is to make sure that doesn't happen, that you have the same tools (up to a point) whether you are using lists or vectors, alists or hash tables or treemaps.
[07:28:37] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[07:30:20] <moon-child> jcowan: there are problems with that.  I think it is reasonable to make lists a 'default' data structure, and accept that performance-critical code may need to expend extra effort when it uses alternate data structures
[07:30:44] <jcowan> What problems do you have in mind?
[07:31:04] <moon-child> dispatch overhead
[07:31:11] <moon-child> is (map - #(1 2 3)) a list or an array?
[07:31:26] <moon-child> if the latter, then how about (map + #(1 2 3) '(4 5 6))?
[07:31:48] <moon-child> if the answer is 'error', that's hostile (and, in particular, gets in the way of certain useful patterns involving circular lists)
[07:32:55] *** anticomputer_ is now known as anticomputer
[07:33:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:33:27] <jcowan> Oh, no, not what I meant. If there is (list-)fold, there is vector-fold; if there is (list-)map, there is vector-map; if there is vector-ref, there is list-ref.
[07:34:13] <jcowan> The same (monomorphic) tools are available in all cases.
[07:34:20] <moon-child> in that case, I think I can answer simply with  http://arcanesentiment.blogspot.com/2015/01/if-scheme-were-like-scheme.html :)
[07:42:06] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[07:59:42] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[07:59:48] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[08:05:23] <moon-child> 'If the evaluation of any form other than the last returns a primary value that is true, or immediately returns that value (but no additional values) without evaluating the remaining forms. If every form but the last returns false as its primary value, or returns all values returned by the last form'  I never realised that
[08:05:57] <moon-child> so nil is not exactly an identity for or
[08:06:09] <moon-child> because (or x) is not the same as (or x nil)
[08:06:48] *** Quits: tevo (~tevo@164.163.113.250.yesconnect.net.br) (Read error: Connection reset by peer)
[08:06:49] <moon-child> that _entirely_ sounds like a consession (for the purposes of efficiency) to a particular naive method of implementing 'or'
[08:13:56] *** Quits: xgqtd (~xgqt@gentoo/developer/xgqt) (Quit: WeeChat 3.3)
[08:14:28] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[08:24:11] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[08:31:21] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[08:37:49] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 252 seconds)
[08:38:14] <mdhughes> moon-child: There are in fact fx=? fl=? type-specific comparators, which schemers often use in tight loops; it's easier to use generic = in most code. Most data types have a sexpr representation, like '#(1 2 3) for vectors, so I dunno why there wouldn't be constant numbers.
[08:40:05] <mdhughes> Scheme's consistent and verbose until it's more convenient to not be consistent and verbose.
[08:43:20] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:47:57] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[08:51:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:01:58] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:04:05] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[09:04:45] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[09:30:48] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[09:42:37] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[09:47:29] *** Joins: tevo (~tevo@164.163.113.250.yesconnect.net.br)
[09:49:15] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[09:58:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[10:34:05] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[10:36:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:50:05] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 250 seconds)
[10:50:22] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:53:13] <amazigh> hello :)
[10:53:24] *** Joins: galex-713 (~quassel@galex-713.eu)
[10:58:15] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 252 seconds)
[11:00:47] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[11:05:20] *** Joins: KvL_ (KvL@gateway/vpn/protonvpn/kvl)
[11:05:57] *** KvL is now known as Guest2184
[11:05:57] *** KvL_ is now known as KvL
[11:06:13] *** Quits: Guest2184 (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 256 seconds)
[11:07:21] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[11:15:30] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 265 seconds)
[11:16:38] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[11:16:55] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[11:20:14] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:26:57] *** Joins: shka (~herr@109.231.0.226)
[11:28:05] *** Quits: dmc00 (~dmc@47.186.241.232) (Remote host closed the connection)
[11:35:02] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 240 seconds)
[11:37:35] *** Quits: Alfr (~Alfr@user/alfr) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[11:37:39] *** Joins: Alfr (~Alfr@user/alfr)
[11:43:18] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b4e0:3e21:5ab4:62c2)
[11:43:18] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b4e0:3e21:5ab4:62c2) (Changing host)
[11:43:18] *** Joins: skapata (~Skapata@user/skapata)
[11:43:42] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:44:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:54:20] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[11:56:49] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[12:09:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:13:12] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[12:21:00] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[12:45:42] *** Joins: notzmv (~zmv@user/notzmv)
[12:47:01] <kagevf> IDENTIFY kagevf jfhjfhjsh
[12:54:49] *** Quits: krid (~krid@102-10-133-N4.customer.vsm.sh) (Remote host closed the connection)
[13:03:01] <mgl> hey, that's my password
[13:04:07] *** Joins: xsperry (~xs@user/xsperry)
[13:05:52] <moon-child> ? just looks like ********* to me
[13:06:18] <lisp123> kagevf: sorry, looks like your password came out publicly
[13:26:15] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[13:29:25] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Remote host closed the connection)
[13:30:04] *** Joins: Jing (~hedgehog@2604:a840:3::10c8)
[13:33:00] *** Joins: cosimone (~user@93-47-228-203.ip115.fastwebnet.it)
[13:44:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:47:37] *** Lord_of_Life_ is now known as Lord_of_Life
[13:55:03] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9876:dcfa:8764:8af)
[14:13:07] <phoe> IDENTIFY phoe ************
[14:14:37] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:6c5b:ab76:207a:5858)
[14:14:41] <jackdaniel> phoe: your password is so obscene that my irc client censored it
[14:14:52] <phoe> jackdaniel: :(
[14:18:55] <moon-child> At one point somebody registered accounts like 'nivkserv', and got surprisingly many hits
[14:19:03] <moon-child> (yet another victim of in-band comms... :)
[14:23:07] *** Quits: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se) (Quit: Leaving...)
[14:23:26] *** Joins: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se)
[14:26:57] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:27:29] <sham1> More like a victim of not everyone using the SASL stuff
[14:27:54] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Remote host closed the connection)
[14:28:26] <moon-child> sham1: right, they tried to tape on an out-of-band communication medium.  But the problem is still that they have an in-band one
[14:31:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[14:36:20] *** Joins: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd)
[14:37:01] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[14:38:38] *** Quits: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd) (Read error: Connection reset by peer)
[14:38:55] *** Joins: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd)
[14:44:27] *** Joins: random-nick (~random-ni@87.116.167.143)
[14:46:39] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:50:34] *** Quits: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd) (Read error: Connection reset by peer)
[14:50:44] *** Joins: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd)
[14:52:19] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 256 seconds)
[14:53:41] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:54:56] *** Joins: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11)
[14:57:50] *** Joins: VincentVega (~user@212.97.0.152)
[14:57:55] <unixlisp> good terminology matter. "SETQ: Assigns values to variables." => bind or rebind values to bindings of variables 
[14:58:33] <moon-child> SETQ does not bind
[15:00:55] <unixlisp> topvelver (setq *a* 0) without defvar defparameter
[15:01:47] <moon-child> is undefined behaviour
[15:04:40] <unixlisp> yeah. a very conventional usage.
[15:05:07] <unixlisp> then SETQ: rebind values to bindings of variables
[15:06:10] <moon-child> no.  As I said, SETQ does not (re)bind.  Please do not assert that terminology is poor if you do not understand it
[15:06:17] <moon-child> assignment is not the same as binding
[15:06:45] <unixlisp> what is the difference?
[15:08:43] <moon-child> sorry.  It is very late and I am not up for explaining it atm.  I will say: binding is what you do with LET; and hope that somebody else comes along to explain the rest
[15:08:59] <unixlisp> good night!
[15:09:13] <moon-child> good night
[15:17:32] *** Quits: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd) (Ping timeout: 240 seconds)
[15:17:48] *** Joins: anton (anton@user/anton)
[15:19:00] *** Joins: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd)
[15:27:07] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:6c5b:ab76:207a:5858) (Remote host closed the connection)
[15:29:57] *** Quits: xiews (~wxie@2409:891e:9820:1858:912b:e23b:c848:d5dd) (Ping timeout: 252 seconds)
[15:30:49] *** Joins: xiews (~wxie@101.93.21.97)
[15:33:41] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[15:34:35] <unixlisp> then SETQ: change the current bindings of variables with values
[15:36:48] <unixlisp> then SETQ: change the values associated with the current bindings of the variables
[15:48:53] *** Joins: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6)
[15:49:12] <lisp123> unixlisp: let me find you a good link
[15:49:20] <lisp123> not many places where this is explaiend well
[15:50:42] <jackdaniel> (let ((a 34)) (let ((a 15)) …) ; <- a is rebound from 34 to 15 for the lexical scope of the inner let
[15:50:51] <lisp123> https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2
[15:50:59] <jackdaniel> (let ((a 34)) (setf a 15)) ; <- a has its current binding changed with a value 15
[15:51:09] <lisp123> Not Common Lisp, but the discussion is the same
[15:52:49] <lisp123> The relevant part: An environment is a sequence of frames. Each frame is a table (possibly empty) of bindings, which associate variable names with their corresponding values. (A single frame may contain at most one binding for any variable.) Each frame also has a pointer to its enclosing environment, unless, for the purposes of discussion, the frame is considered to be global. The value of a variable with respect to an environment is the value giv
[15:52:49] <lisp123> en by the binding of the variable in the first frame in the environment that contains a binding for that variable. If no frame in the sequence specifies a binding for the variable, then the variable is said to be unbound in the environment.
[15:57:23] <unixlisp> clhs:environment n. 1. a set of bindings. sicp: An environment is a sequence of frames
[15:58:44] <unixlisp> my last definition: "SETQ: change the values associated with the current bindings of the variables" precise?
[15:59:00] <sham1> And a frame is a set of bindings
[16:00:31] *** Joins: pjb (~pjb@user/pjb)
[16:02:46] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:5dca:71f9:c326:6e3b)
[16:05:52] <unixlisp> "Each frame also has a pointer to its enclosing environment" pointer => association
[16:06:11] *** Quits: thevishy (~Nishant@2405:201:f005:c007:49c7:f8b1:7727:93e) (Ping timeout: 250 seconds)
[16:06:38] <lisp123> I'm obviously not an expert, but your last definition looks okay apart from the word "current", which I would have to think over a bit
[16:06:47] *** Quits: Achylles (~Achylles_@2804:431:d725:5f74:726:267b:60a8:3cf6) (Remote host closed the connection)
[16:06:49] <lisp123> according to the clhs, variable n. a binding in the ``variable'' namespace. See Section 3.1.2.1.1 (Symbols as Forms).
[16:08:14] <unixlisp> "current" is necessary, because it can not rebinding.
[16:08:30] <lisp123> The "change" also I'm not sure about since what happens with (defvar ..) (setq ..)
[16:08:39] <lisp123> I think it binds then?
[16:09:17] <unixlisp> special binding
[16:09:43] <lisp123> Have a read of scope & extent, and see if the word "current" is appropriate in that context. I have a suspicion it may be, but haven't read to make a view.
[16:10:21] <lisp123> So "changes" would not fully cover that scenario, maybe its worth expanding there
[16:11:04] <lisp123> In any case I have to get back to other stuff. Hope you don't spend too much time on definitions, its okay if things are imprecise to some degree
[16:11:51] <lisp123> I think the SICP explanation is the best to keep in mind. I was lost for a long time on what a binding actually was until I read that
[16:12:23] <lisp123> Lot of that stuff became "assumed knowledge" for programmers at the time, which is why sometimes its hard to follow IMO
[16:13:58] <unixlisp> I should take SICP serous.
[16:14:18] <unixlisp> serious
[16:15:30] <lisp123> It's different to Common Lisp to some degree (and Common Lisp is the best dialect, no offence #lisp gang)
[16:15:49] <unixlisp> CLTL2: "The following facilities allow the value of a variable (more specifically, the value associated with the current binding of the variable) to be altered."
[16:16:19] <unixlisp> alter <=> change
[16:16:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:17:09] <lisp123> SICP is good for teaching the scheme style of lisp (which I like a lot), but it doesn't lead you anywhere to CLOS, and CLOS is ultimately the tool for large projects
[16:18:01] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[16:18:18] <lisp123> If you are a student of lisp, you should definitely get mastery in both scheme and Common Lisp IMO, it keeps you flexible in thinking and you will understand concepts on both sides better
[16:20:20] <lisp123> unixlisp: CLTL2 is great for explanations, it mostly explains things in the best way. It's my goto for sure
[16:20:33] <lisp123> Vastly underappreciated book for the current age
[16:21:25] <unixlisp> CLTL "sharp"
[16:23:22] <unixlisp> at present: 1, CLTL CLHS 2, SICP Rnrs 
[16:24:45] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[16:27:40] <lisp123> What's that
[16:28:03] <unixlisp> best book about lisp
[16:30:19] <unixlisp> CLHS Glossay is special, Gabriel?
[16:30:39] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:31:33] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[16:39:44] <unixlisp> clhs: destructive adj. (of an operator) capable of modifying some program-visible aspect of one or more objects that are either explicit arguments to the operator or that can be obtained directly or indirectly from the global environment by the operator.
[16:44:26] <unixlisp> "program-visible" => program-invisible, not destructive
[16:44:34] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[16:55:35] *** Parts: unixlisp (~unixlisp@2409:8a3c:5406:7be0:fe08:4aff:fe66:ec11) ()
[17:02:13] *** Joins: yewscion (~yewscion@52.94.133.128)
[17:11:49] <kagevf> lisp123: don't worry, I changed it to hunter1
[17:18:51] *** Quits: mtreis (~mtreis@ip68-9-89-162.ri.ri.cox.net) (Ping timeout: 252 seconds)
[17:19:43] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[17:21:07] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[17:34:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:34:39] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:37:47] *** Quits: xiews (~wxie@101.93.21.97) (Ping timeout: 256 seconds)
[17:40:10] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[17:49:09] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:5dca:71f9:c326:6e3b) (Quit: Leaving)
[17:52:17] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:52:50] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[17:53:15] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:53:57] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[17:54:36] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:54:53] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Client Quit)
[17:55:14] *** Joins: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de)
[17:57:01] *** Joins: monkey_ (~user@181.114.17.106)
[18:04:22] *** Quits: silasfox (~fox@p200300fb270cb803461d568c658539e8.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[18:26:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:28:36] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 268 seconds)
[18:28:45] *** Joins: h_ (~rootveget@fsf/member/hays)
[18:35:18] *** Joins: mtreis (~mtreis@024-181-180-008.res.spectrum.com)
[18:35:37] *** Joins: yewscion_ (~yewscion@2604:ca00:14c:c858::1261:5bdb)
[18:42:23] *** Quits: mtreis (~mtreis@024-181-180-008.res.spectrum.com) (Ping timeout: 256 seconds)
[18:57:53] <flip214> kagevf: 7 stars is not that secure, is it?
[19:00:25] *** Quits: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com) (Ping timeout: 256 seconds)
[19:03:22] *** Quits: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com) (Ping timeout: 265 seconds)
[19:04:08] *** Joins: pdietz (~pdietz@216-59-66-162.static.firstlight.net)
[19:05:55] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 252 seconds)
[19:06:21] *** Joins: mikeliuk (~mikeliuk@213.205.198.137)
[19:07:03] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[19:08:08] <pdietz> aeth: I think many (most?) of the commercial lisps use a similar fixnum strategy.  As I vaguely recall, it was invented at Lucid.
[19:10:19] *** Joins: Ilyu (~quassel@78.202.228.230)
[19:11:25] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[19:11:40] *** Joins: strajder (~strajder@user/strajder)
[19:16:55] *** Joins: jaimelm (~jaimelm@deneb.emergentcommunitysystems.com)
[19:20:34] <jcowan> MIT Maclisp already had the fixnum bit, though they abandoned it later for full BIBOP (each page has objects of just one type).
[19:21:24] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[19:22:45] *** Joins: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[19:24:47] *** Joins: ratzkewatzke (~ec2-user@ec2-34-217-87-98.us-west-2.compute.amazonaws.com)
[19:24:53] *** Joins: masterbuilder (~user@user/masterbuilder)
[19:41:56] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[19:43:05] *** Joins: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[19:44:03] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[19:44:21] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[19:44:55] <pdietz> Hmm.  Maybe I was thinking of the odd pointer offset scheme for cons cells.
[19:46:55] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 268 seconds)
[19:49:41] *** Joins: monkey_ (~user@181.114.17.106)
[19:53:09] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:54:28] *** Joins: billstclair (sid77830@id-77830.lymington.irccloud.com)
[20:04:18] *** billstclair is now known as iquites
[20:05:49] *** Quits: iquites (sid77830@id-77830.lymington.irccloud.com) ()
[20:06:04] *** Joins: iquites (sid77830@id-77830.lymington.irccloud.com)
[20:06:33] *** Joins: makomo (~makomo@user/makomo)
[20:17:55] <White_Flame> iquites: freenode #lisp became libera #common-lisp.  This channel is what ##lisp on freenode was, for the general lisp family, not just CL
[20:18:25] <iquites> Thanks
[20:24:39] *** Joins: MaghOz (~maghoz@2001:4bc9:821:d3f2:540d:f952:207a:2)
[20:25:11] <jackdaniel> #commonlisp
[20:25:13] <jackdaniel> without dash
[20:29:29] *** Joins: remote (~self@user/hackers)
[20:30:06] <iquites> jackdaniel: thanks. much better
[20:30:28] *** Joins: Akiva (~Akiva@user/Akiva)
[20:32:14] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Remote host closed the connection)
[20:32:19] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[20:32:22] <jackdaniel> no problem
[20:34:03] <White_Flame> argh, right.  Too many intersecting spelling conventions ;)
[20:34:48] <jackdaniel> com_mon-LisP
[20:36:56] *** Joins: monkey_ (~user@181.114.17.106)
[20:39:20] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:40:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[20:40:53] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[20:43:46] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:48:42] <iquites> https://www.irccloud.com/pastebin/6WUOkno0/
[20:49:22] <jackdaniel> :studly? :)
[20:49:46] <iquites> Yes, CCL still does Studly case. I remember a guy who absolutely loved that back in 1999 in the Apple Cambridge Research Lab, original location.
[20:50:00] <iquites> No, it was 1989
[20:50:25] <jackdaniel> uh oh, I was being born then - (un)memorable year!
[20:51:19] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 250 seconds)
[20:51:21] <iquites> http://catb.org/jargon/html/S/studlycaps.html
[20:51:32] <iquites> Doesn’t say much about it. I’ve never looked at the code.
[20:53:07] *** Joins: monkey_ (~user@181.114.17.106)
[20:54:18] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[21:08:00] <jcowan> jackdaniel: Not memorable to you, of course.  For those of us who were there, it was extremely memorable: the Eastern Bloc countries opened their borders, and the Soviet Union collapsed, thus ending the Cold War for good.  https://en.wikipedia.org/wiki/1989
[21:09:04] <jackdaniel> jcowan: as a resident of Poland I'm well aware of that
[21:09:12] <jackdaniel> I don't need to remember ,)
[21:09:15] <jcowan> Oh, right.  Sorry.
[21:12:14] <jcowan> Still, to see unfold in real time, even in the newspapers, something we never expected in our lifetimes was pretty awe-inspiring.  The pent-up fear of mutual assured destruction left everyone's mind and even body.  My wife (born 1943) remembers school drills for what to do in case of nuclear attack. 
[21:13:31] *** Quits: galex-713 (~quassel@galex-713.eu) (Ping timeout: 252 seconds)
[21:13:41] <jackdaniel> my sister remembers safety measures due to chernobyl incident ,) speaking of nuclear; that said this discussions seems to be a better fit for #lispcafe
[21:14:04] <jcowan> "Get under your desk, put your head between your legs, and wait," later parodied as "and kiss your ass goodbye".
[21:14:10] * jcowan shuts up
[21:24:34] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[21:25:59] *** Joins: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr)
[21:28:29] *** Joins: Colt (~Colt@user/colt)
[21:37:42] *** Quits: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at) (Read error: Connection reset by peer)
[21:41:25] *** Quits: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[21:44:03] *** Joins: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr)
[21:44:51] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 250 seconds)
[21:45:54] *** Quits: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr) (Client Quit)
[21:46:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[21:47:10] *** Joins: hjudt (~hjudt@62-178-177-178.cable.dynamic.surfer.at)
[21:47:42] *** Joins: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr)
[21:50:55] *** Quits: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[21:51:19] *** Quits: mikeliuk (~mikeliuk@213.205.198.137) (Quit: Connection closed)
[21:53:59] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 265 seconds)
[21:55:04] *** Quits: Guest65 (~Guest65@2a01cb012037a1800000004bd1a5ca01.ipv6.abo.wanadoo.fr) (Quit: Client closed)
[21:55:13] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:55:39] *** Joins: Core8044 (~yewscion@2607:fb90:a124:17a:b25e:5b56:ed76:b2e9)
[21:55:41] *** Quits: yewscion_ (~yewscion@2604:ca00:14c:c858::1261:5bdb) (Ping timeout: 252 seconds)
[21:56:17] *** Joins: monkey_ (~user@181.114.17.106)
[21:58:27] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[22:07:10] *** Joins: Jing_ (~hedgehog@2604:a840:3::103e)
[22:09:59] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[22:09:59] *** Quits: Jing (~hedgehog@2604:a840:3::10c8) (Ping timeout: 252 seconds)
[22:11:51] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:11:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Read error: Connection reset by peer)
[22:12:28] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Client Quit)
[22:13:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:14:50] *** Joins: karlosz (~karlosz@47.151.136.69)
[22:19:22] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[22:23:27] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:23:43] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[22:25:12] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[22:31:43] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[22:32:10] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 260 seconds)
[22:40:57] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[22:43:47] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 256 seconds)
[22:44:27] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 252 seconds)
[22:46:45] *** Joins: yewscion (~yewscion@2604:ca00:139:9d29::661:4eb2)
[22:48:29] *** Quits: Core8044 (~yewscion@2607:fb90:a124:17a:b25e:5b56:ed76:b2e9) (Ping timeout: 252 seconds)
[22:55:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:59:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[23:00:40] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[23:08:52] *** Joins: [deleted] (~livoreno@user/notzmv)
[23:12:32] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[23:16:21] *** Quits: yewscion (~yewscion@2604:ca00:139:9d29::661:4eb2) (Ping timeout: 252 seconds)
[23:18:48] *** Joins: nature (~nature@45.32.235.173)
[23:23:44] *** Joins: theothornhill (~user@2a01:799:15a2:4900:a55c:f60a:7dd3:337a)
[23:30:30] *** Quits: MaghOz (~maghoz@2001:4bc9:821:d3f2:540d:f952:207a:2) (Quit: WeeChat 3.3)
[23:30:57] *** Joins: roelj (~user@2001:1c02:b16:3700:3718:3a46:b1ae:ba54)
[23:32:30] *** Joins: Akiva (~Akiva@user/Akiva)
[23:33:49] *** Joins: yewscion (~yewscion@52.94.133.131)
[23:34:48] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[23:38:50] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[23:40:32] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:43:54] *** Quits: madage (~madage@user/madage) (Ping timeout: 276 seconds)
[23:48:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[23:51:03] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 276 seconds)
[23:52:16] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[23:53:39] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[23:55:47] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Ping timeout: 265 seconds)
[23:56:33] *** Joins: madage (~madage@user/madage)
[23:57:39] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:57:56] *** Joins: mtm (~mtm@c-73-27-62-116.hsd1.fl.comcast.net)
[23:58:36] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[23:59:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
