[00:00:22] <shka> well in binary system, you either have high voltage or low voltage 
[00:00:34] <shka> and this... is simpler
[00:00:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[00:01:03] <shka> anyway, this was long time ago
[00:01:44] <gilberth> Yes, and I am always surprised that even binary is as reliable as it is. From an engineering POV.
[00:02:18] <moon-child> yeah
[00:03:20] <gilberth> I mean, once you look at the actual signals on say a bus, you go .oO(Huh? That should make sense? It's all wavy and noisy and has spikes and not nice squares like in my text book.)
[00:23:57] <selwyn> hm
[00:25:18] <selwyn> you might be able to squeeze more representations in ternary floating point
[00:25:29] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:27:17] <shka> memory for this system would be fun
[00:31:11] <selwyn> quantum memory is difficult
[00:31:18] <gilberth> Memory always is fun.
[00:32:31] <hayley> https://i.redd.it/v98ohunheim81.png
[00:32:41] <gilberth> I mean, memory always has been the weak link in computing.
[00:32:54] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Remote host closed the connection)
[00:33:03] <selwyn> gilberth: how do you mean
[00:33:57] *** Quits: Brucio-61 (~Brucio-72@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[00:35:00] <gilberth> selwyn: Look at early machines. They were more limited by memory in amount and speed than by the CPU itself. This even is true in a sense today.
[00:35:30] * hayley apparently has made it to Ravenpack's pre-selection phase
[00:35:37] <selwyn> no-one really has a clue what to make quantum memories out of
[00:35:41] <gilberth> And look at what they tried. Mercury delay lines, Wiliams tubes. For mass storage paper and magnetic tape. etc.
[00:36:09] <selwyn> gilberth: lots of quantum computing is still like that, we can't even decide what technology to use
[00:36:48] <gilberth> selwyn: Well, I am digging quantum computing a little bit. But they say that a qubit could only be moved not copied. What are the implications here for how we think about a memory?
[00:37:10] <selwyn> well, memories still work
[00:37:23] <selwyn> it is just that when you store something in memory
[00:37:37] <selwyn> you cannot store a copy of it
[00:38:13] <selwyn> the implication is that quantum states become more 'scarce' somehow
[00:38:28] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[00:38:36] <gilberth> Yes, and you can't have backups :-)
[00:38:47] <selwyn> yes
[00:38:58] <selwyn> that has some appealing features
[00:39:16] <gilberth> And piracy then really is piracy as the previous owner doesn't have a copy any more. ;-)
[00:39:39] <selwyn> if you have a quantum state that encodes some private information, then it cannot be copied
[00:40:16] <selwyn> there are various ways around this: you are allowed to prepare identical copies of a state
[00:40:20] <gilberth> Well one trivial implication of this is, that somebody can't know it, without you noticing.
[00:40:23] <selwyn> and states that encode classical data can be copied
[00:41:25] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (Ping timeout: 240 seconds)
[00:41:27] <selwyn> gilberth: yeah pretty much
[00:41:33] <gilberth> Well I really should seek some education in quantum thinks. I find the connection between entropy, information and entanglement very interesting. This all seems to be the same at the end of day.
[00:41:52] <selwyn> it is only a slight generalisation to state that much of the power of quantum information for cryptography comes from that
[00:41:52] <gilberth> things :-) But also "thinks".
[00:42:21] <gilberth> selwyn: I can imagine that.
[00:42:22] <selwyn> a big research direction is 'what makes quantum mechanics so powerful/strange/different'
[00:42:42] <selwyn> i used to think it was entanglement but not so sure now
[00:43:10] <gilberth> Well, to begin with I don't find entanglement that strange.
[00:43:24] <selwyn> well, i did not when i learned about it
[00:43:33] <selwyn> i don't think i appreciated it though
[00:44:42] <gilberth> Well, when I first learned about it, the author of that article I read was confused and presented it as if information would need to exchanged between entangled particles. That was strange. But there is no communication going on.
[00:45:35] <selwyn> well, as far as we know
[00:45:42] <selwyn> there could be a non local hidden variable theory
[00:46:04] <Alfr> selwyn, heretic!
[00:46:29] <gilberth> Sure, we don't know how this machine which runs the universe looks like. What is space or distance rather in our domain, must not be in that machine.
[00:47:30] <gilberth> Still, I think of entanglement as being correlated. That might only be half the story. But then I have no education.
[00:48:42] <selwyn> the signature of entanglement is correlations in measurement outcomes
[00:49:08] <selwyn> so an experimentalist would pretty much always think of entanglement as correlations
[00:49:22] <gilberth> And there is information gained. When we share an entangled particle and you measure it, you know what I will measure. But this information comes into existance the moment you do the measurement and was there all the time also as a kind "I could know, if I wish."
[00:49:44] <selwyn> i never really thought about hidden variable theories. imo the much bigger problem is that we have no idea what measurement is
[00:49:53] <selwyn> leaning towards collapse theories for that
[00:50:45] <gilberth> I believe our brain is playing tricks on us. Somehow.
[00:50:53] <selwyn> gilberth: i would say that the information was not there all along, rather that you had a shared resource of 'one piece of entanglement'
[00:51:00] <selwyn> which is destroyed to produce the information
[00:51:16] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[00:51:29] <selwyn> gilberth: you have a good understanding of this stuff already tbh
[00:51:31] <gilberth> Sure. Call it "potential information" then.
[00:52:50] <gilberth> selwyn: Thanks for the compliment. Yet I feel like I knew nothing.
[00:54:06] <gilberth> Anyhow, this "I know that I could [if I wish] know what selwyn will measure on that particle he has." also is some kind of information. It's not nothing.
[00:54:37] <selwyn> i agree that it is something
[00:54:49] <selwyn> hm
[00:55:13] <selwyn> i never really thought that 'actually having an entangled state' was information
[00:55:28] <gilberth> Maybe it's "meta information". idk.
[00:55:36] <selwyn> i am hoping to learn about quantum communication networks soon
[00:55:53] <gilberth> I mean it sure is different from a fact.
[00:56:07] <selwyn> i.e. once you can distribute entangled state halves via the internet to any two individuals around the world
[00:56:11] <selwyn> what will society look like
[00:56:17] <Alfr> gilberth, can we use that for targeting people?
[00:56:53] <gilberth> Target? What do you mean by that?
[00:57:23] <gilberth> selwyn: I am not sure what we actually could do with sharing entangled particles.
[00:57:29] *** Quits: dre (~dre@2001:8003:c932:c301:403f:9f61:c28b:c314) (Ping timeout: 252 seconds)
[00:57:36] <selwyn> you can do quantum key distribution
[00:58:02] *** ec_ is now known as ec
[00:58:18] <Alfr> gilberth, just wondering whether that "meta information" corresponds to classical communications metadata.
[00:58:26] <gilberth> What you mean? In the sense that I could tell, if the particle you have is probably entangled with the one I have? When you do that with a bunch to gain confidence? /me is puzzled.
[01:00:05] <gilberth> Alfr: Nope. I was thinking. When all this quantum thingy is about information. Could it be that entanglement is a different kind of information? Like a different kind of force?
[01:01:34] <gilberth> Failing that, two particles could be entangled or not. That already is a bit.
[01:02:26] <selwyn> entanglement is very different from classical information
[01:02:56] <selwyn> there is a theorem that states that you cannot store more than n bits in n qubits, despite the existence of entanglement
[01:03:04] <gilberth> Yes, and this is why I am thinking. But I know too little to come up with something not silly.
[01:04:20] <gilberth> But maybe there really is a different kind of information? Who knows. Is our idea of a bit really suffice to describe it?
[01:04:51] <selwyn> well
[01:04:59] <selwyn> its popular to discuss things in terms of resource theories
[01:05:36] <selwyn> this lets you get a handle on what the differences between classical information and quantum information are
[01:05:38] *** Joins: Brucio-61 (~Brucio-72@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:06:04] <gilberth> Is "resoucre theory" a term? One that I could google?
[01:07:20] <selwyn> a lot of quantum information theory is introduced in terms of resource theories
[01:07:25] <selwyn> to give a brief example
[01:08:00] <selwyn> an entangled qubit is treated as a 'resource' which you can consume during e.g. a quantum teleportation
[01:08:50] <selwyn> so an entangled qubit is seen as 'something that lets you do teleportation' i.e. it is interpreted purely in operational terms
[01:09:28] <selwyn> and if the states are not entangled perfectly, then you can still teleport, but not as well
[01:09:38] <gilberth> Ok. When I teleport that qubit it's gone? Or isn't it just moved somewhere else?
[01:09:40] <selwyn> and the failure to teleport perfectly can then be a measure of how unentangled the state is
[01:09:59] <gilberth> This answers my question.
[01:10:03] <selwyn> when you teleport a qubit, its state is moved from one physical system to another
[01:10:24] *** Joins: christophergray (~christoph@186.151.17.62)
[01:10:24] <gilberth> Good. I just wanted to make sure I got that right.
[01:10:34] <selwyn> this perspective lets you set up nice hierachies of quantum states
[01:10:44] <gilberth> So then, what is consumed?
[01:10:54] <selwyn> a criticism i have of it is that it does not lead to understanding of what entanglement actually is
[01:11:15] <selwyn> gilberth: the entangled state is consumed as it is destroyed by the end of the process
[01:11:52] <gilberth> Wait a second. So the qubit is destroyed? What is teleported then?
[01:11:56] <selwyn> if alice wants to send a qubit to bob, she can achieve this if they both share an entangled qubit
[01:12:12] <selwyn> there is a 'data' qubit that is copied, and an entangled pair that is consumed
[01:12:26] <gilberth> ah. ok. got it.
[01:12:57] <selwyn> anyway, i bring up resource theories to answer your question
[01:13:01] <gilberth> So this is some kind of trick, where I consume one qubit to move another from A to B?
[01:13:19] <selwyn> well, you are consuming two, because an entangled pair is two qubits, but yes
[01:14:02] <gilberth> Is there a theory that you cannot do better?
[01:14:10] <selwyn> resource theories answer questions like 'what does this quantum state let me do'
[01:14:25] <selwyn> and when the answer is 'a lot of unexpected things like a, b and c'
[01:14:42] <selwyn> this may be seen as characterising the strange information processing abilities of quantum systems
[01:14:48] <selwyn> depending on your point of view
[01:15:03] <gilberth> I mean move more than n qubits destorying n. Is there anything forbidding me to do that?
[01:15:22] <selwyn> gilberth: iirc you can't
[01:15:32] <gilberth> ok
[01:15:40] <selwyn> its probably not hard to prove that tbh
[01:16:10] <gilberth> I just thought that if that is so, this may hint to something.
[01:16:33] <gilberth> In contrast to "We just don't know how to do better."
[01:17:24] <gilberth> selwyn: Do you get crazy or nuts at times thinking about these things?
[01:17:35] <selwyn> no lol
[01:18:07] <selwyn> i don't really work with this kind of thing, but my original training was pretty much exactly in this area
[01:18:19] <selwyn> hm
[01:18:29] *** Joins: dre (~dre@2001:8003:c932:c301:9b63:ba34:8f7a:bf77)
[01:18:44] <selwyn> i think that the field is too mechanistic, its a bit hard to explain
[01:18:56] *** Quits: christophergray (~christoph@186.151.17.62) (Quit: WeeChat 3.4)
[01:19:11] <gilberth> Anyhow, interesting stuff. I found a few lectures by Susskind which I am watching.
[01:19:14] <selwyn> we have all of this weird entanglement and strange phenomena, and only a few people in 'quantum foundations' seem to really try and tackle the big questions
[01:19:20] <selwyn> i wish i could work in that area some day
[01:19:28] <selwyn> but no funding
[01:20:31] <gilberth> selwyn: Somehow I always feel a bit betrayed when it gets too much into just using math. Math could describe nature astonishing well, but somehow I fear we may miss something by just looking at the math.
[01:20:31] <selwyn> because it is so strange, quantum mechanics is never truly boring
[01:23:17] <gilberth> At times it feels to me that there is some kind of secret about how our universe does run. I like to think of it as a simulation at times. There is some underlying foundation about how this works, we just don't see.
[01:23:39] <selwyn> the more i learn about physics the more i think we don't live in a simulation
[01:24:34] <gilberth> I am not saying that we do. I just believe that at the end of day it works like one. Or could be described that way.
[01:24:35] <moon-child> I find the issue of simulation completely uninteresting
[01:25:04] <moon-child> at the end of the day, it works somehow, and it exists.  Is it any different for the universe to be 'implemented' in terms of some other axioms, or to be the axioms themselves?
[01:25:05] <selwyn> i find simulation spiritually unexciting, but it has to be discussed or refuted nevertheless
[01:25:12] <moon-child> it is irrefutable
[01:26:06] <moon-child> (a note: some people say 'probabilistically, we must be living in a simulation' and them attempt to do physics experiments to prove this.  Those probabilistic arguments are bullshit, but doing novel physics experiments is cool)
[01:26:18] <gilberth> moon-child: It makes no difference to us. And if the simulation has no bugs and we can't hack it, the question is void. As void as asking "What was before the big bang?".
[01:26:25] <selwyn> the simulation hypothesis simply tries to recover the idea of an anthropomorphic god 'the aliens that run the simulation'
[01:26:34] <selwyn> if you want to be religious, then go and be catholic
[01:26:44] <selwyn> don't adopt a reddit metaphysical worldview
[01:26:51] <moon-child> gilberth: well, maybe there is a simulation and it _does_ have bugs
[01:27:10] <gilberth> Again, I don't propose that we live in a simulation. I just think about nature as if there are rules that could could be applied to tell what happens given a current state.
[01:27:12] <moon-child> but again, this is irrefutable.  So if you happen to stumble across evidence that this is the case, sure, go pursue it.  Otherwise, I don't think it's worth caring about
[01:27:16] <selwyn> moon-child: it might be that the world cannot be simulated after all
[01:27:46] <selwyn> this is what i am leaning towards
[01:28:03] <moon-child> gilberth: I think this is as much a property of the way humans perceive the universe as a property of the universe itself
[01:28:06] <moon-child> selwyn: why?
[01:28:33] <selwyn> because simulation is difficult
[01:28:47] <selwyn> and it appears to get harder and harder the more interesting a system that you simulate
[01:28:57] <selwyn> this may have some deep physical significance (i don't know)
[01:29:23] <selwyn> but i would be really surprised if we could ever simulate 'everything'
[01:29:24] <moon-child> this is a property that seems to hold within our universe.  We have no reason to believe it holds in any other universe (say, the one which simulates ours, if such exists)
[01:29:40] <moon-child> this is why I don't think it's a question worth asking
[01:29:58] <selwyn> trying to simulate quantum chromodynamics, or the evolution of a universe in general relativity
[01:30:03] <gilberth> selwyn: So you're talking about complexity or resources needed?
[01:30:04] <selwyn> is so so much harder than doing point particles
[01:30:07] <moon-child> perhaps the nature of reality is such that we (within it) cannot ever describe it
[01:30:50] <selwyn> gilberth: i believe complexity is a necessary part of the discussion, but i am not referring to complexity here
[01:31:21] <gilberth> moon-child: True. And this is why I said that what is distance to us, must not be the same distance in whatever underlying domain there might be. Maybe entangled particles aren't really apart.
[01:31:23] <selwyn> i mean: we are really not good at doing numerical relativity
[01:31:26] <selwyn> its a very young field
[01:32:03] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[01:32:52] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 256 seconds)
[01:32:53] <moon-child> gilberth: but, we can imagine a folded n-dimensional space fairly easily.  I mean that, in the same way that a given formal system cannot express proofs of certain true statements, maybe our universe cannot express a complete description of the principle sunderlying it
[01:33:36] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:33:38] * hayley missed Equator day
[01:33:48] <hayley> "Surely, we set it for 3pm, surely, we said it was March the 10th"
[01:33:49] <moon-child> quick, go west!
[01:34:04] <dave0> maw
[01:34:26] <hayley> maw
[01:35:23] <hayley> https://www.youtube.com/watch?v=VC9GI5RvRDs
[01:35:24] <dave0> hi hayley 
[01:35:24] -ixelp- Equator - YouTube
[01:35:37] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[01:35:45] <gilberth> moon-child: I am not sure how much proofability does apply here. I don't need to have proof of every law of physics. Not in the mathematical sense.
[01:36:17] <moon-child> yes.  I am not saying it is the same thing.  Just analogous
[01:36:46] <gilberth> And technically speaking we don't. All we do is reasoning like "it was like this yesterday, it was like this the day before, so it must be same tomorrow."
[01:37:01] * moon-child gifts gilbert a pet hume
[01:37:12] <moon-child> https://www.youtube.com/watch?v=0GIwTG8V-Ko
[01:37:13] -ixelp- HEREINMYGARAGE.mwv - YouTube
[01:37:55] <gilberth> moon-child: Well then.
[01:39:18] * hayley now spots 3 minutes per 2 hours of SLEEP drift after the Pi was rebooted.
[01:39:25] <hayley> Better, I suppose.
[01:39:38] <moon-child> ntp?
[01:40:04] <hayley> I'd think so, because IIRC the Pi has no real time clock of its own.
[01:40:16] <moon-child> wait what o.o
[01:40:39] <hayley> And it should be synced, too.
[01:48:50] <pl> Yes, RPi has no RTC, same issue as with old Amiga 
[01:49:48] *** Quits: cyberbanjo (~user@2607:fb90:4247:7118:8739:1e35:d38:1fb8) (Ping timeout: 240 seconds)
[01:50:45] <GreaseMonkey> if you can tell it to honour an RTC plugged into a GPIO pin, then you could misuse a 3.3V Arduino for this purpose
[01:51:04] <GreaseMonkey> emphasis on the 3.3V, DO NOT USE a 5V Arduino
[01:51:36] <GreaseMonkey> actually, by RTC, i just mean consistent clock output
[01:56:34] *** Joins: notzmv (~zmv@user/notzmv)
[01:58:07] <pl> well, usually RTC also refers to something that will keep TOD clock as ell
[01:58:10] <pl> *well
[01:58:36] <pl> I believe it's doable to have reliable timing loop once OS is running, but it might involve sacrificing something (probably power)
[02:02:18] <edgar-rft> you could connect a push-button to one of the IO pins an push it every year at christmas if that's consistent enough :-)
[02:02:58] <hayley> https://www.youtube.com/watch?v=NTIye0iqPzw
[02:02:59] -ixelp- Solar power to PPMs? Nitecore NPS600 Power Station overview - YouTube
[02:03:26] <edgar-rft> no, more seriously, the RPi has onboard graphics, can't you steal a timer interrupt of the graphic chip?
[02:03:56] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:04:26] <edgar-rft> solar power causes skin cancer
[02:05:05] <hayley> "If you're going to work on a UPS, you better be ready to yeet it, even if you're improving it"
[02:06:08] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[02:07:15] <hayley> "All proper tea is theft!"
[02:12:56] <dave0> hayley: haaa
[02:14:27] <selwyn> i am in the market for quotes
[02:15:48] <hayley> 'quote
[02:18:12] *** Joins: X-Scale` (~ARM@31.22.203.181)
[02:18:36] *** Quits: X-Scale (~ARM@31.22.203.181) (Ping timeout: 240 seconds)
[02:18:39] *** X-Scale` is now known as X-Scale
[02:19:17] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:29:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[02:33:01] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-e149-f31f-1120-01f3.res6.spectrum.com) (Remote host closed the connection)
[02:34:46] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-e149-f31f-1120-01f3.res6.spectrum.com)
[02:41:21] <hayley> https://medium.com/leaningtech/partialexecuter-reducing-webassembly-size-by-exploring-all-executions-in-llvm-f1ee295e8ba real abstract interpretation hours
[02:41:22] -ixelp- PartialExecuter: Reducing WebAssembly size by exploring all executions in LLVM | by Carlo Piovesan | leaningtech | Mar,  [...]
[02:47:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:54:35] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[02:59:27] <shka> https://www.youtube.com/watch?v=IYD9xu92zSg
[02:59:27] -ixelp- Simpsons - Russia at olympic committee - YouTube
[03:00:50] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:687a:56f7:b9ed:24cf) (Remote host closed the connection)
[03:05:04] <Alfr> hayley, only two?
[03:05:27] <hayley> #1='#1#
[03:05:50] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[03:11:22] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[03:12:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[03:13:07] * hayley gets an idea
[03:13:23] <hayley> Rather than waiting for SBCL to compile my code, I can just make it produce interpreted functions.
[03:14:27] <hayley> That's way faster. Well.
[03:14:57] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[03:15:02] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[03:15:19] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[03:18:37] <bosonbear> I save a string to a variable named file, and now I need to use this string as a parameter of wirte-region. What's the right way to do that? 
[03:18:52] <hayley> This does, however, make it like 200x slower than CL-PPCRE. But the fuzz tester is dominated by compilation time, not runtime (it only has a haystack of like 20 characters IIRC).
[03:19:09] <bosonbear> It seems (write-region chunk nil file) keeps throwing an error "Symbol’s value as variable is void: file"
[03:20:10] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[03:26:40] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[03:30:06] <bosonbear> nvm it's an issue related to the variable scope
[03:47:11] <hayley> («W»|P)*(¬C)(¬V)D and I don't seem to be friends still. Better check if it just makes a lot of states, or just doesn't converge at all.
[04:05:42] *** Quits: dre (~dre@2001:8003:c932:c301:9b63:ba34:8f7a:bf77) (Remote host closed the connection)
[04:11:15] <gilberth> Why is ffmpeg such a pain to use?
[04:11:50] <gilberth> Anyhow doubling at work for an adjuster gadget <https://free-clim.org/demo/free-clim-adjuster.mp4>
[04:12:23] <gilberth> Notice that I use twm :-)
[04:12:39] <dave0> gilberth: i've only ever used ffmpeg to convert video formats so i can put them on a usb stick and watch them on tv
[04:12:50] * hayley reads
[04:12:51] <hayley> "While I'm not a professional educator, I have given talks about best practices for programming over my career, and I've found that teaching people low-level programming first (for example, assembly language) and letting them experience the pain of trying to scale that process up gives the right foundation and motivation to introduce higher-level languages and, more importantly, the concepts that they introduced at the time."
[04:13:02] <hayley> I didn't know I needed to know how to write a bignum implementation, so that I could appreciate having non-broken arithmetic.
[04:13:43] <Common-Lisp> I agree with that sentiment 
[04:14:05] <gilberth> dave0: Even that is hard enough. Our TV was particular picky and I needed a day to find some options that would work.
[04:14:33] <gilberth> dave0: And all I want to do is to generate a video that works. It should just work, nothing more.
[04:14:57] <hayley> Days since I have wanted to defenestrate someone for teaching computing by the Von Neumann metaphor: 0
[04:17:07] <dave0> gilberth: the closest i've come to something that works everywhere is dvd-compatible.. mpeg2 video and i think it's aac
[04:17:09] <gilberth> dave0: The trouble is that you you find the quality is poor and google and cut and paste some options which are supposed to help. Yet your ffmpeg complains that it doesn't know those options. Seems like they rename the options on a daily basis.
[04:17:14] <hayley> https://twitter.com/bakerposting/status/1502083512442130434 https://twitter.com/bakerposting/status/1501866341816758281 Didn't take long to get duplicate quotes.
[04:17:46] <dave0> gilberth: it has more options than ls!
[04:18:12] <gilberth> dave0: The irony was that I was dealing with MPGEG-TS as broadcasted. Yet the TV didn't like that.
[04:19:23] <gilberth> Or the DVD player rather. The TV was an old-school CRT. Which was the problem as I could connect my laptop to it.
[04:20:22] <dave0> oh my old laptop has a dvd drive lol
[04:20:23] <hayley> ...and FWIW if you use bignums without knowing that processors can only process fixed-sized integers or floats, you are literally worse than Hitler^WElectron I guess
[04:20:30] <dave0> i don't think they make them anymore :-p
[04:20:32] <gilberth> This is the only pro side of my wife having moved out: No more fiddling with ffmpeg for a "nice" movie night at home. Did I mention that I don't like watching TV at all?
[04:20:59] <dave0> tv is worse than youtube
[04:21:27] <dave0> my friend like NCIS
[04:21:31] <semz> hayley: birthday paradox in action
[04:21:40] <gilberth> Sure. Begins with, when do you find lectures on TV? By Susskind? About physics?
[04:22:20] <dave0> leave physics to the rocket scientists
[04:22:45] <gilberth> What if, I want to become a rocket scientist?
[04:22:48] <hayley> Funny, I liked Touretzky's Lisp book because it didn't give away anything about implementation, and just wrote with box-and-pointer diagrams. Whereas my Java lectures were like "Imagine you have an object at address 100, and another at 101..."
[04:23:08] <dave0> gilberth: then stop watching youtube lol
[04:23:42] <gilberth> dave0: Well, I only watch YT when I am having diner. As I cannot eat alone.
[04:24:28] <gilberth> Speaking of diner, I should find somethin edible.
[04:25:04] <dave0> i got icecream from the store yesterday.. sometime today i will eat the whole tub :-)
[04:25:28] <gilberth> Is that all you eat?
[04:25:50] <dave0> no, it's a friday treat
[04:26:39] <gilberth> Friday? Ah right, you're ahead.
[04:26:46] <dave0> if i did i'd weigh 200 kilos
[04:27:56] <gilberth> That would be almost four times as much as I weight. So I guess I would have some room for ice cream.
[04:30:10] <dave0> it's nice, i like it
[04:30:15] <gilberth> Somehow my colour scheme is gray scale? I must be a boring person. ;)
[04:32:30] <gilberth> Actually instead of colour I would prefer thrice the resolution for sharper text.
[04:33:32] <gilberth> It's kind of surprising that displays unlike cameras have the same resolution in colour as in gray scale.
[04:34:05] <gilberth> Or luminance rather
[04:35:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[04:40:58] <neominimum> Hmm, maybe preallocating an array of 50 pointers to contain the arguments travelling with a passed message was not a good idea, since I guess the trend is for less arguments per call, that means a lot of unused space. Maybe just prealloacte 10 or so, and dynamically allocate the rest by pushing to a stack? As it is preallocating 2¹⁴ messages has approx. 8MB footprint. That's with 55 references per message, if reduced to 15 refs per message 
[04:40:58] <neominimum> then 240MB could support a maximum concurrent message passing capacity of ~2,000,000. /me is realising since asynchronous message passing can't rely on the stack to pass messages, some memory allocation cost is assumed, and a balance needs to be struck between the cost off allocation, and throughput.
[04:41:08] <hayley> I guess Bakerposting needs to have https://plover.com/~mjd/misc/hbaker-archive/sigplannotices/gigo-1997-03.html added to its corpus.
[04:41:08] <Bakerposting> Most strings and lists in Lisp are used in a functional manner, yet  they are heavily penalized in performance by the remote possibility of side-effects. (The Nimble Type Inferencer for Common Lisp-84 <https://plover.com/~mjd/misc/hbaker-archive/TInference.html>)
[04:41:09] -ixelp- Sigplan Not. Mar 1997: When Bad Programs Happen to Good People
[04:41:09] -ixelp- The Nimble Type Inferencer for Common Lisp-84
[04:50:42] <moon-child> 'This document is optimized for the Lynx browser'
[04:51:40] * moon-child idly wonders what criteria macos uses to decide when to rearrange virtual desktops, why it permits vdesktops to be rearranged at all, and why it only permits them to be arranged in 1 dimension
[04:52:13] <Common-Lisp> I'm pretty sure it's based on click-through activity 
[04:52:29] <Common-Lisp> It was implemented in ios first before el capitan got it
[04:52:43] <moon-child> hmm, my recollection was windows also only has 1-d vdesktop organization.  And i3 does too.  They are missing out!
[04:53:22] <moon-child> Common-Lisp: iirc the ios behaviour is to move an app all the way to the right whenever it is interacted with
[04:53:33] <GreaseMonkey> recommendation would be to allow 4D arrangement of virtual desktops
[04:53:48] <Common-Lisp> GreaseMonkey, compiz was doing that back in '09 
[04:54:05] <GreaseMonkey> i said 4D
[04:54:36] <moon-child> GreaseMonkey: I think 2-d is enough.  Possibly 3d can work if you stretch it.  But the spatial metaphor starts to break down, and you start looking for other organizational methods 
[04:55:05] <GreaseMonkey> moon-child: 2D works quite nicely, 4D would be more so that people can point and laugh at Microsoft for only having 1D
[04:55:07] <Common-Lisp> I thought compiz had cube mode and then you could zoom in and out 
[04:55:20] <Common-Lisp> I want 5D window management 
[04:55:35] <GreaseMonkey> compiz has cube mode but the mapping is still equivalent to 2D or something
[04:55:44] <GreaseMonkey> well, a weird way of mapping 2D that is
[04:56:33] <moon-child> yeah, cube surface is just a rolled-up setion of a 2-d plane
[04:57:08] <Common-Lisp> I want to management my vdesktops via 11-dimension hypergravitational tensors
[04:57:42] <GreaseMonkey> i want a 3D pixel grid monitor for my 4D games
[05:00:13] <hayley> I'll settle for C-x b
[05:00:44] <Common-Lisp> I want 5d pixels
[05:02:11] <moon-child> start with 5d eyes
[05:12:29] <neominimum> Hey all, on average how many arguments do the functions you define, take. <5? <10?
[05:13:31] <gilberth> Ten? Only very very few functions take that many arguments.
[05:14:20] <Common-Lisp> greater than forty 
[05:14:57] <moon-child> the sysv abi considers it acceptable to make functions of greater than 6 parameters slow.  Windows's abi says 4.  Fastcall says 2.  Aarch64 says 8
[05:15:37] <moon-child> (these numbers need to be weighed against the number of architectural general-purpose registers available: 16, 16, 8, and 32, respectively)
[05:17:29] <|3b|> gilberth: easier to make (large grids of) specific color emitters than (small grids of) specific color sensors?
[05:17:32] <gilberth> In my current Lisp image 8849 functions take one argument, 4235 take two, 2471 take three, and 1165 take four, 563 take five. And 1011 take more than five.
[05:18:08] <neominimum> I rarely need more than 5, but 40! Common-Lisp: why do you need that many?
[05:18:18] <|3b|> also, lots of displays do have different color and luminance resolutions (though still implemented as specific color emitters, just with different densities for different colors)
[05:18:20] <Common-Lisp> neominimum, simply to demonstrate that I can 
[05:18:39] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[05:18:47] <neominimum> Common-Lisp: Okay, fair
[05:18:55] <neominimum> :p
[05:19:10] <hayley> I think beach pondered just using all the damn registers, given that there are no callee saves registers in SICL.
[05:19:21] <|3b|> depending on where you parse them, keyword args count for double
[05:20:01] <hayley> Call site optimisation goes brr
[05:20:07] <|3b|> (caller passes 20 values for called to see 10 keyword args))
[05:20:15] <moon-child> hayley: is there any reason not to do that?
[05:20:29] <hayley> moon-child: idk
[05:20:30] <|3b|> hayley: redefinition sticks out its foot to trip call-site optimization
[05:20:37] <moon-child> why?
[05:21:13] <hayley> haha snippet goes brrrr
[05:21:53] <neominimum> gilberth: Curious, how did you measure that?
[05:22:48] * hayley got pretty good mileage out of the Baker on RISC meme
[05:23:08] <gilberth> Basically (mapcar #'length (mapcar #'ccl:arglist (remove-if-not #'fboundp (apropos-list ""))))
[05:23:51] <neominimum> gilberth: thanks
[05:24:09] <moon-child> how do you partition the lengths?  apl has key, but I think cl does not
[05:25:00] <gilberth> I say (let ((h (make-hash-table))) (loop for k in ... do (incf (gethash k h 0)) ...)
[05:29:09] <gilberth> Heh, I have a PARTITION function. I could say (mapcar (lambda (x) (cons (car x) (length x))) (partition (mapcar ...)))
[05:29:40] <moon-child> I prefer key, thanks :P
[05:29:54] <moon-child> (#,{.)/.~l
[05:30:11] <gilberth> :key? Where?
[05:30:20] <moon-child> /. is key
[05:30:27] <neominimum> moon-child: no need to swear
[05:30:42] <gilberth> Ah, you are talking APL.
[05:30:53] <moon-child> yeah
[05:31:06] <gilberth> Or line noise. Looks worse than Perl. :-)
[05:31:49] <moon-child> if it helps, the perl people don't like you either
[05:32:02] <moon-child> 'lisp has all the visual appeal of fingernail clippings mixed with oatmeal' -larry wall
[05:32:24] <|3b|> hmm, (apropos-list "") is surprisingly slow on sbcl
[05:32:40] <moon-child> https://www.mcmillen.dev/sigbovik/2019.pdf
[05:33:06] <gilberth> Nah, PARTITION is handy. (partition '(1 2 3 4 5) :key #'oddp) is ((4 2) (1 3 5)) for example.
[05:33:08] <|3b|> PUSHNEW i guess would do that
[05:33:47] <moon-child> (2|x)f/.x
[05:36:13] <gilberth> What about (PARTITION '(1 2 3 4 5 6 7 8 9 10) :key #'LOGCOUNT) => ((7) (10 9 6 5 3) (8 4 2 1))?
[05:36:47] <|3b|> (partition ... :key 'y-or-n-p)
[05:37:02] <moon-child> gilberth: there is no logcount
[05:37:16] <moon-child> oh hmm no I guess there is actually
[05:37:30] <gilberth> Yeah, but your operator does it compute equivalence classes?
[05:37:31] <moon-child> (+/#:x)f/.x
[05:38:43] <moon-child> gilberth: it doesn't compute equivalence classes, but you can get equivalent results 99% of the time.  You pass two arrays of equal length; one of items to be partitioned, and another of equivalences
[05:39:18] <moon-child> for any i,j, if x[i]=x[j], then y[i] and y[j] are in the same partition
[05:39:37] <gilberth> |3b|: http://termbin.com/dwq5
[05:39:54] <moon-child> in effect, it's pushing the O(n^2) operation onto you, if you really want it :P
[05:40:24] <gilberth> ok. I see.
[05:41:34] * |3b| missed that it would only work on strings, glad i skipped over that bit :)
[05:42:01] <|3b|> (or functions of specific type)
[05:47:24] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:49:15] *** Quits: X-Scale (~ARM@31.22.203.181) (Ping timeout: 256 seconds)
[05:49:15] *** X-Scale` is now known as X-Scale
[05:57:19] <kakuhen> <neominimum> "Hey all, on average how many..." <- depends
[05:57:20] <hayley> https://www.youtube.com/watch?v=qrasDqh3vJo
[05:57:21] -ixelp- Finally - A Moog Video!! - YouTube
[05:57:35] <kakuhen> i try to stubbornly make everything really nice with methods that take in a single instance of some class
[05:57:41] <kakuhen> but when that leads to ugliness i begin to add more arguments
[05:57:53] <kakuhen> as for pure functions, not sure, i just take in what i know i will use
[06:02:05] *** Joins: notzmv (~zmv@user/notzmv)
[06:07:39] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[06:08:03] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[06:10:57] <|3b|> counting keywords as 2, looks like i have 110 functions with more than 10 args out of 2165 that had lambda expressions (about 21k didn't have any). most is 82
[06:12:21] *** Joins: jeosol (~jeosol@user/jeosol)
[06:12:40] <|3b|> seems like a lot of the functions with many args are defstruct constructors, presumably MAKE-INSTANCE has similarly large potential argument counts
[06:14:46] <|3b|> just doesn't show up since most of that is handled by default methods (not that just looking at stored arglists would show that anyway)
[06:21:55] <|3b|> ah, with better counting, 398/24515 have more than 10
[06:22:26] <|3b|> 4 over 80 (still counting key as 2)
[06:25:06] <|3b|> except that was counting some twice, 314/21958, 2 over 80, one of which is initialize-instance so apparently that is getting at least some counted
[06:29:15] <|3b|> uiop:ensure-pathname has 1 required and 25 keyword args
[06:30:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[06:30:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:30:36] <|3b|> counting only required args, still have 66 with over 10, 2 over 20 (max 29)
[06:31:51] <|3b|> and i guess 4x4 matrix constructors means i will always want to be able to pass at least 16 values to a function :)
[06:47:51] <hayley> (ql:quickload :sb-simd)
[06:55:33] <hayley> Now look at sb-simd-avx2:make-u8.32
[06:56:15] <hayley> If we're lucky, heisig might get around to implementing bits, so that we may have SB-SIMD-AVX2:MAKE-U1.256
[06:59:31] <neominimum> |3b|: Okay cool, a definite trend for less than 10 args then. I may pick an even lower arg count to preallocate for messages, perhaps 5 to eliminate allocation inside the message passing mechanism for the common cases. And instead provide an option to specify how many arguments to preallocate space for so that the memory footprint can be tuned for the specific application. Maybe even the type too so that values that don't need to be boxed 
[06:59:31] <neominimum> wont be.
[07:21:23] <|3b|> yeah, counting by function >10 is pretty rare. harder to say when counting by call,  but probably still a reasonable first guess for a cutoff of fast path
[07:22:08] * |3b| counts 1404/21959 with >5 args (including keys@2)
[07:23:50] * hayley can't think of any fun bit-parallel stuff to do. Maybe Baker's bit vector code in SB-SIMD would be fun.
[07:25:06] <hayley> But there is no SB-SIMD-AVX2:U1.256-AREF (and I had asked heisig to add a U32.8-STRING-REF for string hacking).
[07:33:32] <moon-child> lots of fun, classic bit-problems in apl
[07:33:40] <moon-child> transpose, column-sum, where...
[07:39:02] * hayley tries to figure out what the internal type name for a bit array is.
[07:45:06] *** Joins: semz_ (~semz@user/semz)
[07:45:45] <hayley> (let ((a (make-array 1000 :element-type 'bit))) (sb-simd-avx:u1.256-aref a 0)) ⇒ #<SIMD-PACK-256 0000000000000000 0000000000000000 0000000000000000 0000000000000000>
[07:47:50] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:56:51] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[07:59:54] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[08:07:29] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[08:18:10] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:18:30] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:19:29] * hayley uploaded an image: (20KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/bkcbEuBESSFhAoNGPJbmaJab/Screenshot_2022-03-11_15-59-54.png >
[08:40:07] *** Joins: Alfr (~Alfr@user/alfr)
[08:44:06] <moon-child> now do avx512
[08:45:09] <hayley> :[
[09:04:13] *** Joins: aeth (~aeth@user/aeth)
[09:06:01] *** Quits: aeth_ (~aeth@user/aeth) (Quit: ...)
[09:41:17] *** Joins: silasfox (~sbv@p200300cec71bba00b376e444dd2def4d.dip0.t-ipconnect.de)
[10:00:01] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[11:06:14] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:23:20] <neominimum> hayley: Sheesh, wouldn't want to make that call by hand. that's the greatest use case for multiple-value-call I've seen.
[11:26:35] <neominimum> and or macrology
[11:35:11] <neominimum> I received the used copy of ANSI Common Lisp I ordered today. It smells funny, both musty and yet somehow floral at the same time. Anyway, I hope there is lot's of useful info in there.
[11:35:28] <neominimum> Anyone else read it?
[11:50:50] *** Quits: eschaton (eschaton@2600:3c01::f03c:91ff:fefd:5d92) (Remote host closed the connection)
[11:53:06] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 252 seconds)
[11:59:36] *** Joins: shka (~herr@109.231.3.55)
[12:10:56] <selwyn> good morning everyone
[12:19:33] <edgar-rft> neominimum: Paul Graham has a different way of thinking about Lisp than most other Lisp programmers. I've mainly learned from his books to see problems from a different perspective, what is a good thing. His coding style is more like Scheme an especially his over-usage of cryptic one-letter variabales makes it unneccessarily difficult to follow the more complex examples towards the en of the book. But all-in-all I 
[12:19:33] <edgar-rft> have learned a lot from his books "ANSI Common Lisp" + "On Lisp".neominimum: Paul Graham has a different way of thinking about Lisp than most other Lisp programmers. I've mainly learned from his books to see problems from a different perspective, what is a good thing. His coding style is more like Scheme an especially his over-usage of cryptic one-letter variabales makes it unneccessarily difficult to follow the more 
[12:19:34] <edgar-rft> complex examples towards the en of the book. But all-in-all I have learned a lot from his books "ANSI Common Lisp" + "On Lisp".
[12:20:53] <edgar-rft> argh, I definitely need a new keyboard :-(
[12:20:55] <selwyn> i find it hard to understand his criticisms of common lisp
[12:22:58] <selwyn> anyway, i found common lisp through him, so i am grateful for that
[12:24:51] <selwyn> i suppose what i find hard to understand is how someone who wrote a lot of software in common lisp would go for any other dialect, let alone make one
[12:25:06] <selwyn> it is an arrogant sentiment but there it is
[12:25:11] <edgar-rft> Paul Graham *loves* to talk for the reason of talking, and I'm often not really sure if he claims weird things only to get attention, but he's definitely not stupid.
[12:25:25] <selwyn> perhaps he found that proglang design is difficult, actually
[12:29:14] <hayley> ❌ Paul Graham critiquing CL
[12:29:19] <hayley> ✔ Henry Baker critiquing CL
[12:29:25] <pjb> selwyn: yes, criticisms of common lisp grew old.  It needs to be put back in the context, pre-CL, to be understood.
[12:29:51] <selwyn> pjb: well, pg criticises common lisp having actually used it
[12:30:09] <selwyn> what pre-cl context?
[12:30:14] <pjb> Nowadays, there's little to be said against CL.
[12:30:23] <pjb> Yes, but he knew lisp before CL.
[12:30:33] <selwyn> ok
[12:32:11] <edgar-rft> The most funny thing regarding all sorts of programming languages is that *everything* higher than machine code is unnecessary superfluous nonsense anyway, that was created for the *only* reason because humans are terribly bad in thinking at machine code level :-)
[12:33:23] <selwyn> its ridiculous when people say 'well, all programming languages are as powerful as each other, so it makes no difference'
[12:33:38] <selwyn> no mathematician says that notation doesn't matter, for example
[12:34:16] * hayley uploaded an image: (45KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/TomUqckWEdrXnEzXxAjtczLU/fj-hdswvuailguc.jpeg.jpg >
[12:35:16] <hayley> "Too early an exposure to the BASIC language or to `machine language' can cause irreversable brain damage."
[12:36:12] <selwyn> i tried to code basic when i was 6
[12:36:18] <selwyn> didn't understand much
[12:37:58] <edgar-rft> SYNTAX ERROR
[12:39:41] <edgar-rft> 10 PRINT "I am stupid!" : GOTO 10
[12:56:16] *** semz_ is now known as semz
[13:02:17] <neominimum> You know, I didn't make the connection when I bought the book, but then on looking at the book in my hands I did wonder if it was the same PG. I read some of his stuff years ago, but with the state of my memory, now I only really recall that some consider his ideas controversial, and not much of the actual content. From the little I've read so far, ANSI CL seems to be a decent reference manual to have on hand though. Perhaps a little more 
[13:02:17] <neominimum> approachable than the Hyperspec.
[13:02:47] <selwyn> i thought about buying ansi cl but decided against it in the end
[13:03:06] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[13:03:19] <selwyn> i don't see what i would learn from it that i couldn't somewhere else
[13:05:16] <edgar-rft> You could learn howto implement C++ OOP in Common Lisp :-)
[13:05:23] <selwyn> what
[13:06:37] <edgar-rft> the last chapter implements a custom OOP system using vectors and integer offsets instead of accessors
[13:07:29] <selwyn> return to vtables
[13:08:00] <edgar-rft> it uses macros to translate method-names into integer offsets at compile-time
[13:08:35] <neominimum> selwyn: True, I got it primarily to see if I have any gaps in my understanding, as so far I've learnt CL informally on an ad-hoc basis. But also to fill out my CL relatrd book collection.
[13:08:46] <neominimum> related*
[13:08:58] <edgar-rft> yes, it's stoneage OOP but it's an interesting example
[13:09:48] <edgar-rft> it even programmable class precedence :-)
[13:09:54] <edgar-rft> *has
[13:10:35] <edgar-rft> was makes it *better* than C++ :-)
[13:12:15] <edgar-rft> that's what I meant with "seeing things from a different perspective"
[13:12:19] <selwyn> right
[13:13:01] <neominimum> Huh, I think that's kinda cool. Anyway, I'm heading off now. Night o/
[13:13:15] <selwyn> goodnight
[13:13:17] <hayley> Is there a way to do vectorised popcount that isn't ye old PSHUFB hackery?
[13:14:27] <hayley> AVX512 has it, seemingly, but not AVX2 or earlier. So I guess VPSHUFB and moves and adds for me. Sure.
[13:18:12] <moon-child> I tried doing it with gather + lut, was slow as all hell.  Might be faster on intel.  I think intel has fast gathers for things that are close to each other and slow for things that are distant, and amd is just uniformly slow
[13:18:59] <moon-child> oh, that was for tzcnt, not popcnt, but same same
[13:19:13] *** Joins: eschaton (~eschaton@li541-49.members.linode.com)
[13:19:27] <hayley> PSHUFB can be hacked into behaving as a LUT in registers.
[13:20:07] <moon-child> yeah
[13:20:33] <hayley> Specifically, two and a shift right. One processes the low 4 bits of each byte, another the high 4 bits. Then add. Integer promotion is an exercise for the reader (and sometimes SSSE3 saturating add).
[13:21:02] * moon-child wants saturating add for non-baby sizes
[13:23:28] <hayley> c.f http://0x80.pl/notesen/2019-01-29-simd-count-byte.html
[13:23:28] -ixelp- SIMDized counting byte in byte stream
[13:26:25] <hayley> I recall porting that to SBCL to give someone in #commonlisp an unnecessarily fast line counter.
[13:27:25] <hayley> fwiw that is saturated add of absolute of differences, which can be coaxed into a promoting horizontal add, seemingly.
[13:31:08] <hayley> But it is a very weird instruction.
[13:53:13] *** Joins: robin (~robin@user/terpri)
[13:57:32] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 240 seconds)
[13:59:40] *** Joins: trn (jhj@sourcehut/user/trn)
[14:02:09] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:37:02] *** Joins: kevingal (~quassel@149.157.122.151)
[14:41:57] *** Quits: kevingal (~quassel@149.157.122.151) (Ping timeout: 252 seconds)
[14:42:09] *** Joins: kevingal (~quassel@2001:770:c0:401:917:de70:ffe2:dc75)
[14:45:38] *** Joins: jmiven (~vpm@pham.algeb.re)
[15:01:01] *** Joins: razetime (~quassel@117.193.4.25)
[15:08:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:27:47] <scymtym> gilberth: for UPDATING-OUTPUT, i'm thinking about adding some cookie to the cache value (conceptually, not literally since the cache value is visible to the user) that captures the "code version" so that the body can be re-run when either the data /or the code/ changes. does that sound reasonable? 
[15:40:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[15:49:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:03:50] *** Quits: razetime (~quassel@117.193.4.25) (Ping timeout: 256 seconds)
[16:18:57] *** Joins: razetime (~quassel@117.193.4.149)
[16:34:23] <hayley> (3⊥2 1) × +/1 2 3
[16:34:43] <shka> oh no, the hieroglyphs 
[16:35:09] <shka> https://www.youtube.com/watch?v=Mw-o_cSdqmI
[16:35:10] -ixelp- Powerslave (2015 Remaster) - YouTube
[16:35:34] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[16:35:59] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[16:39:20] * hayley speaks Greek and gets "Why do I have the feeling that is some APL program that solves the purpose of life or smth" for a reply
[16:39:38] * hayley writes an APL program and he asks someone to translate Greek for him
[16:40:22] <selwyn> it sounds like spanish pronounced in a more annoying way
[16:41:42] <shka> You know the world is getting weirder when Season 18 of the Simpson's is now hilarious and relatable.
[16:48:08] <selwyn> is now hilarious?
[16:48:16] <selwyn> world really is weird
[16:48:31] <shka> yeah
[16:52:52] <dave0> i heard they cut apu from the show
[16:53:05] <dave0> cos racist or something
[16:53:35] <shka> dunno, i don't care about the later seasons of simpsons 
[17:06:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[17:29:06] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:31:31] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:37:39] *** Joins: lisp123 (~lisp123@120.154.103.52)
[17:42:17] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[17:45:33] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:57:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[18:02:57] *** Quits: razetime (~quassel@117.193.4.149) (Ping timeout: 240 seconds)
[18:10:10] *** Quits: silasfox (~sbv@p200300cec71bba00b376e444dd2def4d.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[18:11:19] <gilberth> Good morning #lispcafe!
[18:13:04] <dave0> hi gilberth!
[18:13:07] *** Joins: silasfox (~sbv@p200300cec71bba00b376e444dd2def4d.dip0.t-ipconnect.de)
[18:13:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:13:54] *** Joins: razetime (~quassel@117.254.34.198)
[18:14:04] <gilberth> scymtym: This idea about a code cookie makes perfect sense. I like that idea! What should this cookie be? SXHASH? The code interned to a weak hashtable, or just a gensym?
[18:14:29] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[18:18:07] <shka> hash cookies?
[18:18:15] <shka> ;-)
[18:18:27] <shka> let's not go there 
[18:18:34] <gilberth> Now, you again! Right.
[18:24:40] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:27:21] <clothespin> Instead of turning on an alarm, and alarm clock should start an iv of caffeine
[18:29:00] *** Quits: kevingal (~quassel@2001:770:c0:401:917:de70:ffe2:dc75) (Ping timeout: 240 seconds)
[18:29:11] <clothespin> or it should go off at real low volume until your coffee is made and at the right temperature
[18:29:17] *** Quits: jmiven (~vpm@pham.algeb.re) (Quit: reboot)
[18:29:32] <gilberth> The mere existence of alarm clocks point to a social problem. Why is it that society wants that we get up before we would have got enough sleep and would wake up by our own? Alarm clocks are outright evil.
[18:30:03] *** Joins: kevingal (~quassel@149.157.122.151)
[18:30:03] *** Joins: jmiven (~vpm@pham.algeb.re)
[18:31:11] <gilberth> It is the early birds suppressing the owls. Robbing our healthy sleep and messing with our sleep pattern.
[18:32:25] <clothespin> i set my own appointment time this morning :(
[18:32:46] <clothespin> it is a fight within us
[18:33:02] <gilberth> clothespin: Anyhow. At a time I would still have an alarm clock, I hooked my coffee maker up to a timer, so that coffee would be ready the time the alarm would go off.
[18:33:34] <clothespin> i wonder if i have a timer on my keurig
[18:34:40] <gilberth> And it would be like ten minutes from bed to hitting the road on my way to my company.
[18:35:00] <clothespin> i'm usually still screwed up
[18:35:57] <gilberth> I switched routines and would shower and shave after work, not before work.
[18:38:00] <gilberth> And of course I didn't have breakfast. Even these days I don't have breakfast. Or rather my breakfast is C-2: coffee and cigarette.
[18:38:14] <clothespin> I'm brushing my teeth then out the door
[18:38:31] <gilberth> Heh, now that is efficient. :-)
[18:40:53] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:40:56] <gilberth> Anyhow, I was really sleep deprived at that time until I learned about DSPS. A condition that doesn't exist here as the local telephone book the medical doctors memorize during education doesn't mention it. As in a real German would crash at 22:00 and wake up at 6:00.
[18:42:09] <gilberth> After I learned about DSPS, I just refused to get up in the middle of what my natural night is. Live then felt like vacation all year.
[18:43:42] <gilberth> And that despite me working a real lot.
[18:45:43] <gilberth> And since a delayed sleep phase is the norm and healthy and natural in adolescence and for boys even as late as being 25yo, it is a crime to let school start early. It should be a human right to get proper sleep.
[18:46:30] <clothespin> i agree
[18:46:58] <clothespin> (but then again I set the appointment time)
[18:50:12] <gilberth> Well, setting up a an appointment with yourself is fine.
[18:51:12] <gilberth> And anyhow, in this regard --- as I am an extreme owl --- I am somewhat happy that I don't have children, which would then subject me to the state dictating me when to get up again.
[18:56:10] *** Joins: notzmv (~zmv@user/notzmv)
[18:57:21] <gilberth> My mother always suspected that there might be more owls and extreme owls that you might think. Those people would choose their profession accordingly. I met a lot of people who told me that they only work at late hours. Like bar keepers or in particular taxi drivers. I talked to a lot of the latter as I move around by cab when in Berlin. Any many told me that they only drive at night.
[18:59:00] <gilberth> The reverse perhaps also is true. It's only that when you are an early bird and get up naturally at say 5:00 or even earlier you could function perfectly well in our society.
[19:00:50] <gilberth> Take beach for example. He is an extreme early bird. Crashing when I have my most active time. Getting up when I would crash.
[19:02:37] <shka> perhaps gilberth is just beach alter-ego?
[19:02:37] <selwyn> when i gave up drinking for a while my sleeping patterns became a lot more normal
[19:02:42] <selwyn> gilbeach
[19:02:52] <shka> makes sense
[19:03:03] <shka> gilberth does not like CLOS, beach loves 
[19:03:19] <shka> dr. jekyl and mr. hide situation :D
[19:03:25] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[19:03:51] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[19:03:57] <gilberth> Well, alcohol can really mess with your sleeping pattern. It can go as far as having no sleeping pattern at all.
[19:04:04] <shka> https://www.youtube.com/watch?v=HYjgWTctQR0
[19:04:05] -ixelp- The Who - Doctor Jimmy - YouTube
[19:04:30] <shka> selwyn: alcohol is a poison, what else is there to say
[19:04:32] <Alfr> And you can set your clocks by his greeting time.
[19:05:08] <selwyn> you might be right
[19:05:08] <gilberth> Perhaps it's a cron job? Who knows?
[19:05:50] <selwyn> i felt really really good when i was sober
[19:05:58] <selwyn> unexpectedly so
[19:06:26] <gilberth> Anyhow, alcohol messed with my sleeping pattern. But I get back to what is normal for me, which is getting up between noon and 14:00.
[19:07:03] *** Quits: kevingal (~quassel@149.157.122.151) (Ping timeout: 252 seconds)
[19:07:58] <gilberth> Which is crashing between 4:00 and 6:00 for I need like eight to nine hours of sleep.
[19:08:31] <gilberth> Always has been like that. I am stuck at an adolescence sleep pattern.
[19:09:02] <gilberth> And it runs in families.
[19:14:18] *** Joins: kevingal (~quassel@2001:770:c0:401:9db4:5e78:1b83:451a)
[19:35:39] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[19:55:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[20:34:15] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[20:37:03] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:46:03] *** Quits: razetime (~quassel@117.254.34.198) (Ping timeout: 252 seconds)
[20:48:44] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:14:22] *** Joins: lisp123 (~lisp123@120.154.103.52)
[21:19:09] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[21:21:16] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:33:06] <scymtym> gilberth: i thought just a gensym from the macro-expander. i can explain more after putting child to bed
[21:38:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[21:44:25] <GreaseMonkey> CLOS, huh... as far as OO systems go, CLOS is amazing
[21:44:45] <GreaseMonkey> basically, if you don't like CLOS, you'll hate Java
[21:57:38] <gilberth> CLOS is a fine OOP system. It's just that I don't believe into OOP besides the domains it is made for like window systems. And, yes, I distaste classical subject oriented systems like Java. Begins with why do we write x.f(y) sometimes and f(x,y) at other times? Why? That's arbitrary. Why can I define a new f(x,y), but no new x.f(y)? Also arbitrary.
[21:57:49] <selwyn> uh
[21:58:06] <selwyn> do we write f(x,y) in java
[21:58:16] <shka> never
[21:58:23] <gilberth> scymtym: That sounds reasonable.
[22:00:42] <gilberth> See. First you do at times and second this implies misusing classes for modules. Worse yet.
[22:03:11] <GreaseMonkey> as much as i can understand that Java at least in theory is trying to beat some sense of modularity into people... it's a rather bad golden hammer
[22:04:34] <gilberth> My point is. Assume you have an existing class hierarchy for say regions, rectangles, circles, polygons, what not. Suppose its API lacks a method of computing the area. I can't extend this system to make it possible to say r.area(). That's very non-modular. So why is it r.bounding_box() say and area(r)? Why? Doesn't make any sense.
[22:04:46] <GreaseMonkey> and as for window systems... i think in the past with C i've used function pointers for that - it's one of those cases where you'd ideally want to tie the behaviour to the, *ahem*, "object"
[22:05:36] <GreaseMonkey> Ruby does at least allow one to inject new methods into a class pretty easily and pretty naturally
[22:05:36] <gilberth> In Lisp it's (bounding-box r) and I can say (defmethod area ((r rectangle)) ...) and move along. That is very modular.
[22:06:42] <GreaseMonkey> ...come to think of it, for a window system, you kinda want to tie behaviour to an object rather than a class
[22:06:54] <GreaseMonkey> wait never mind you may want multiple windows of the same kind
[22:07:13] <gilberth> GreaseMonkey: You don't define a new push button gadget class by just passing function pointers. You may implement classes in C with structs of function pointers though.
[22:07:39] <GreaseMonkey> yeah, i very much meant using structs with function pointers in them
[22:07:53] <gilberth> Xt is a very clean implementation of such an object system in C.
[22:09:46] <gilberth> It also has this notion of "constraint slots^Wresources". That is slots stuck to children of a pane for the composite pane's purpose. Very clean solution. One I miss with CLIM. But then all the pane/gadget substrate of CLIM is not well thought out and feels like being put there just in case.
[22:11:02] <gilberth> CLIO is a fine implementation in Lisp of this. The CLUE toolkit build on top of that however, is poor. (Or is it CLIO on CLUE? I never can remember).
[22:12:14] <gilberth> Anyhow, in this regard I really wonder why Gtk was reinventing the wheel instead of just using Xt.
[22:12:51] <GreaseMonkey> not sure, but nowadays Xt is probably too worth-using for the GNOME project to dare use it
[22:12:57] <random-nick> gobject had a lot of different goals I think
[22:13:20] <random-nick> its object system nowadays looks more like C#'s
[22:13:30] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[22:13:37] <GreaseMonkey> also a good argument for multiple dispatch: collisions between two objects in a game engine
[22:13:50] <gilberth> However, back to topic, it always feels like the x.f(y) syntax is an implementation detail shining though. As when you do as GreaseMonkey suggested with C you'd say x->class->f(y). Or perhaps x->f(y), when you copy methods to the instance.
[22:13:54] <random-nick> and initially it wanted to allow sharing between processes or something like that
[22:14:08] <GreaseMonkey> and yes, the implementation detail aspect of that is quite true
[22:14:10] <shka> selwyn: gonna need that java helper class
[22:14:52] <gilberth> I believe Gtk is just a sign of NIH.
[22:15:08] <selwyn> like a static thing?
[22:15:17] *** Joins: aeth (~aeth@user/aeth)
[22:15:41] <random-nick> gilberth: literally so, it's called the GIMP ToolKit because it was made to replace the nonfree at the time Motif in GIMP's codebase
[22:16:45] <shka> selwyn: yeah
[22:16:47] <gilberth> Yes, and they threw out Xt along with Motif. Why? Why not just implement new Xt widgets emulating that look and feel? (Motif also uses Xt).
[22:16:58] <selwyn> shka: that shit is burnt onto my brain
[22:17:04] <selwyn> don't think i will ever forget java
[22:17:08] <random-nick> and latter GNOME and GTK+ showed up because of Qt being nonfree and KDE using it
[22:17:16] * shka hugs selwyn
[22:17:26] <shka> you poor man
[22:17:27] <selwyn> it is my own fault
[22:17:33] <selwyn> misspent adolescence
[22:17:46] <gilberth> That's sad.
[22:18:10] <selwyn> i don't actively dislike it however
[22:18:21] <gilberth> selwyn: Did you have the wrong friends? ;)
[22:18:30] <selwyn> uh
[22:18:44] <selwyn> we used to show off about which languages we were learning
[22:18:53] <selwyn> i didn't understand js
[22:18:56] <selwyn> i liked the idea of applets
[22:19:54] <selwyn> i also learnt j2se under the misapprehension that you could use it to make those mobile games
[22:20:40] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:21:02] <random-nick> hmm, I found this quote from the original developer of the GIMP ToolKit: The biggest flaw in most of my programming is that I like to start from scratch. When looking at the big picture, it might have been a mistake to not use Xt. But for what I was trying to accomplish with GTk, not using Xt was the right decision. I wanted to learn every detail of how a UI toolkit is constructed. Xt hides a lot of problems and provides a lot of functionality.
[22:22:11] <gilberth> That's funny. Not using Xt because it already solved your problem. Fair.
[22:22:14] <GreaseMonkey> the mobile games thing was j2me, and i recall going through quite a bit of pain trying to make a mod player
[22:22:36] <GreaseMonkey> hmm, "this mistake was the right thing to do" smells of sunk-cost fallacy
[22:24:18] <gilberth> What I miss however is this concept of resources. The .Xdefaults file, the resource database on the X server (where it belongs) and editres.
[22:25:46] *** Quits: kevingal (~quassel@2001:770:c0:401:9db4:5e78:1b83:451a) (Ping timeout: 245 seconds)
[22:52:11] <shka> https://youtu.be/dd-ASvJ400M?t=4448 
[22:52:11] -ixelp- [ENG] AfreecaTV StarLeague(ASL) S13 Ro.16 Group B (Tastosis) - YouTube
[22:52:15] <shka> the best artosis quote
[22:53:14] <selwyn> lol
[22:59:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[23:02:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[23:07:26] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 260 seconds)
[23:19:42] <selwyn> artosis reminds me of 'kurtosis'
[23:29:52] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:43:36] *** Joins: jeosol (~jeosol@user/jeosol)
[23:44:18] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
