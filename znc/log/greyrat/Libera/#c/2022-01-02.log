[00:00:07] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Read error: Connection reset by peer)
[00:00:23] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[00:00:37] *** Joins: wroathe (~wroathe@user/wroathe)
[00:02:01] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:03:02] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:03:55] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:04:37] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:04:57] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:05:25] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[00:05:35] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[00:05:49] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:05:54] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:06:34] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[00:06:56] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[00:07:56] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[00:09:56] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 245 seconds)
[00:10:48] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[00:12:43] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:13:32] *** Joins: quartz (~quartz@user/quartz)
[00:14:04] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:14:06] *** Quits: quartz (~quartz@user/quartz) (Client Quit)
[00:14:24] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[00:15:45] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[00:16:36] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:16:52] *** Joins: Enitin (~Enitin@82.102.22.84)
[00:19:55] <Matt|home> im wondering if it's a good idea to implement something similar to what errno does for my code.. just have a list of potential things that can go wrong for my projects and set one global variable to a value.. or if that's the wrong way to approach it
[00:21:00] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[00:22:07] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[00:22:17] *** Joins: smoke (~smoke@user/smoke)
[00:22:43] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[00:23:54] <fizzie> It's not a very multithread-friendly approach, at least. Which is why `errno` itself, while it does behave like a global, is actually often using some magic to be a thread-local value instead. I prefer just returning error codes. (Orthogonal to that, an enumerated list of possible errors is a reasonable thing to have though.)
[00:24:15] <pert> a lot of libraries basically do just that, except that instead of setting a global or thread-local variable libraries tend to return the error code directly. if you can, I would consider writing functions that use standard errno values to indicate errors; that has the advantage of being able to get localized error strings
[00:24:22] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[00:24:37] <fizzie> ,expand #include <errno.h> errno // not just a variable
[00:24:37] <candide> fizzie:  (*__errno_location ())
[00:24:41] *** Joins: sebag (~guest@91.245.82.2)
[00:25:50] <Matt|home> question: if you do something like check the return value of a function that's basically not going to fail the way you wrote the code, is the compiler advanced enough to optimize that out or no?
[00:26:15] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[00:26:50] *** Joins: Enitin (~Enitin@37.80.148.79)
[00:27:07] <sebag> Matt|home: yes, if it's statically verifilable always true check
[00:27:44] <Matt|home> mkay. so in enterprise code or whatever it's called it's ok to just be paranoid?
[00:28:07] *** Joins: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b)
[00:29:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[00:30:09] <smoke> i would think its a good practice from the standpoint of consistency
[00:30:16] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[00:30:47] <Matt|home> kk
[00:31:07] *** Quits: Enitin (~Enitin@37.80.148.79) (Ping timeout: 250 seconds)
[00:33:54] *** Quits: jusski (~user@88.118.83.231) (Ping timeout: 260 seconds)
[00:34:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:32] <pert> I realize that the magic to make errno a thread-local variable predates C11. But is there any reason that a C standard library, if it were done today, couldn't just declare errno as `thread_local int errno`?
[00:36:29] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[00:38:03] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:38:28] <sham1> Because errno is defined as a macro
[00:38:38] *** Quits: WAR10CK (~WAR10CK@14.223.183.246) (Quit: Leaving)
[00:38:53] <sham1> Now, nothing's saying that you couldn't have _Thread_local int _errno; or whatever, and then make #define errno _errno
[00:39:00] *** Joins: soapsudsxx (~soapsudsx@209.221.40.151)
[00:39:12] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[00:39:42] <ioxzev1z> errno has some magic, tbh I would just go with if(!x) { fprintf(stderr, "%s", "muh error"); exit(EXIT_FAILURE) } rather than mess with errno
[00:40:01] <sham1> Applications? Sure. Libraries? Don't do that
[00:40:41] <pert> okay. how come errno has to be a macro? (I seek an answer besides "because the standard says so"; I'd like to understand the motivation for requiring it to be a macro)
[00:41:07] *** UnderCoder is now known as OverCoder
[00:41:07] <ioxzev1z> Where in the standard does it say errno has to be a macro?
[00:41:21] <fizzie> In fact, as of C11 `errno` _is_ defined as a macro "which expands to a modifiable lvalue that has type `int` and thread local storage duration, --".
[00:41:33] <fizzie> So it has been retrofitted to be thread-local rather than static.
[00:41:45] <sham1> ,c11 7.5.2
[00:41:45] <candide> No such section '7.5.2' in C11 Draft Standard (n1570).
[00:41:48] <fizzie> ,c11 7.5p2
[00:41:50] <candide> http://www.iso-9899.info/n1570.html#7.5p2 [Errors <errno.h>] The macros are EDOM EILSEQ ERANGE which expand to integer constant expressions with type i​nt, distinct positive values, and which are suitable for use in #if preprocessing directives; and errno which expands to a modifiable lvalue201) that has type i​nt and thread local storage duration, the value of which is set to a positive error number ... <truncated; https://0x0.st/osxd.txt>
[00:41:50] <sham1> That
[00:42:29] <ioxzev1z> oic, didn't even know
[00:42:31] <ioxzev1z> Thanks
[00:42:57] <sham1> Didn't know whether the 2 in that was a paragraph or a subsection. I should have guessed though
[00:44:04] <sham1> But yeah. It's a macro because the standard says it has to be. As to why does it say that? Well, they probably didn't want to break existing libc implementations
[00:44:46] <sham1> Break them and make them technically uncompliant
[00:45:17] <sham1> For new implementations I'd just guess that `thread_local int _errno; #define errno _errno` would be the way forward
[00:47:28] *** Joins: summonner (~summonner@188.26.74.156)
[00:51:30] *** Joins: hiovoltage (~hiovoltag@176.88.83.200)
[00:55:31] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[00:57:42] *** Joins: NEYi (~NEYi@109.251.216.38)
[00:59:34] *** Quits: damxsa (~damx@2001:16a2:cfed:3100:d614:626b:5937:395b) (Ping timeout: 260 seconds)
[01:02:05] *** Quits: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi) (Quit: Akuli)
[01:02:24] *** Joins: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi)
[01:03:25] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Remote host closed the connection)
[01:03:39] *** Quits: whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu) (Quit: [BX] I wonder what this button marked "EOF" does...)
[01:03:59] *** Joins: whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[01:07:02] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[01:09:59] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:12:22] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:12:57] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:13:26] <ioxzev1z> ,thread_local
[01:13:36] <ioxzev1z> ,std thread_local
[01:13:36] <candide> Standard C has no notion of 'thread_local', so you must be talking about some specific OS, library, tool, implementation, architecture, et cetera. These are beyond the scope of this channel, which focuses on Standard C.
[01:13:44] * pragma- snickers.
[01:13:49] <ioxzev1z> say whaaaaa?
[01:14:02] <fizzie> ,std int
[01:14:02] <candide> Standard C has no notion of 'i​nt', so you must be talking about some specific OS, library, tool, implementation, architecture, et cetera. These are beyond the scope of this channel, which focuses on Standard C.
[01:14:14] <ioxzev1z> Forgot what std did
[01:14:15] <ioxzev1z> :/
[01:14:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:14:21] <pragma-> ,c11 thread_local
[01:14:22] <candide> http://www.iso-9899.info/n1570.html#7.26.1p3 [Introduction] The macros are thread_local which expands to _Thread_local; ONCE_FLAG_INIT which expands to a value that can be used to initialize an object of type once_flag; and TSS_DTOR_ITERATIONS which expands to an integer constant expression representing the maximum number of times that destructors will be called when a thread terminates.
[01:15:07] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[01:15:20] <ioxzev1z> ,c99 int
[01:15:21] <candide> int: Displaying 1 of 305 matches: http://www.iso-9899.info/n1256.html#5.1.1.3p2 [Diagnostics] EXAMPLE An implementation shall issue a diagnostic for the translation unit: char i; i​nt i; because in those cases where wording in this International Standard describes the behavior for a construct as being both a constraint error and resulting in undefined behavior, the constraint error shall be diagnosed.
[01:15:28] <ioxzev1z> Ok, so ,c99 and ,c11 work
[01:15:32] <ioxzev1z> ,89 int
[01:15:36] <ioxzev1z> ,c89 int
[01:15:36] <candide> int: C89/C90 draft: http://port70.net/~nsz/c/c89/c89-draft.html or http://flash-gordon.me.uk/ansi.c.txt or http://web.archive.org/web/20050207005628/http://dev.unicals.com/papers/c89-draft.html - C Overview: http://en.wikipedia.org/wiki/C_programming
[01:15:40] <ioxzev1z> K, good to know
[01:15:59] <pragma-> Yeah, the C89 draft doesn't have paragraph numbering
[01:16:31] <pragma-> A ,c89 command would be able to only link to entire sections, which is a bit verbose.
[01:21:54] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[01:22:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:22:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:22:43] *** Joins: wroathe (~wroathe@user/wroathe)
[01:23:23] *** Joins: sokan_ (~sokan@athedsl-4548509.home.otenet.gr)
[01:24:04] *** Quits: sokan (~sokan@2a02:587:9e06:9a00:75e2:fabb:5cd0:92cc) (Ping timeout: 268 seconds)
[01:24:04] *** sokan_ is now known as sokan
[01:24:45] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[01:25:32] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[01:25:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:26:43] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:27:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[01:30:46] *** Quits: palindrome (~jhonny@109.77.12.226) (Ping timeout: 245 seconds)
[01:30:59] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 256 seconds)
[01:32:17] <sham1> Alright, a bit of an odd question for a change. Yay or nay for doing -D_POSIX_C_SOURCE=200809L for a program that is mainly to be run on a POSIX environment, versus doing #define _POSIX_C_SOURCE 200809L inside the source files
[01:34:13] *** Joins: palindrome (~jhonny@109.77.12.226)
[01:35:33] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[01:36:23] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:38:48] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:39:10] *** vinleod is now known as vdamewood
[01:39:42] *** Joins: Torr (~Torr@user/torr)
[01:41:53] <pert> I think it makes more sense inside the source files; it's more declarative, and if you're always going to want _POSIX_C_SOURCE to be defined (as opposed to conditionally), I don't think it makes as much sense to specify it on the command-line. I think it's very much a matter of personal taste
[01:42:47] <SrPx> is there any obvious way to do an atomic sub with a limit? ex: if the value is 5, and I atomic_sub 7, I want it to be 0, and atomic_sub will return 5
[01:42:53] <SrPx> instead of being -2
[01:42:58] <Deepspeed> anyone here familiar with the EFL C api?
[01:43:29] <ioxzev1z> ,std EFL Deepspeed
[01:43:29] <candide> Standard C has no notion of 'EFL D​eepspeed', so you must be talking about some specific OS, library, tool, implementation, architecture, et cetera. These are beyond the scope of this channel, which focuses on Standard C.
[01:43:33] <ioxzev1z> wat
[01:43:41] <ioxzev1z> Thought candide would tell it to him
[01:44:09] *** Joins: llh (~llh@user/llh)
[01:45:27] <Deepspeed> candide, EFL is the Enlightenment Foundation Libraries used to make the Enlightenment WM.  Not just standard c.  I only mention it because I'm developing a live USB utility with it and was gonna ask if anyone cared to contribute.  I won't bug the chan about it anymore if it's off-topic.
[01:45:40] <candide> D​eepspeed, Are you a huge bozo?
[01:46:18] <Deepspeed> ah, bot.
[01:46:19] <ioxzev1z> L O L
[01:46:25] <Deepspeed> lol
[01:46:52] <pragma-> ioxzev1z: https://github.com/pragma-/pbot/blob/master/doc/Commands.md#addressing-output-to-users
[01:47:33] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[01:47:58] <pragma-> hm, should s/users/nicknames/
[01:48:03] * pragma- shrugs.
[01:48:38] *** Quits: gothicserpent (~gothicser@2604:a880:2:d0::2204:b001) (Quit: WeeChat 3.2)
[01:48:56] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[01:50:28] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-109.cspire.com) (Read error: Connection reset by peer)
[01:51:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[01:52:07] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[01:52:07] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:53:22] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:56:33] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[01:57:17] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[01:57:35] <trafficjam> can someone explain why `((5 / 9) * fahr) - 32` returns zero but `5 * (fahr-32) / 9` does not? (K&R weather example)
[01:58:17] <cehteh> integers :)
[01:58:19] <Xgc> trafficjam: Integer
[01:58:26] <caze> INTERGER
[01:58:36] <Xgc> trafficjam: What integer represents 5/9 ?
[01:58:56] <caze> Also, pretty sure K&R explains that.
[01:59:13] *** Quits: oafish (~oafish@2a05:f480:2000:1325::) (Quit: disconnecting)
[01:59:37] <trafficjam> oh yeah it does underneath, i wanted to write it myself first though
[01:59:44] <trafficjam> thanks guys
[02:01:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 256 seconds)
[02:02:23] *** Joins: Enitin (~Enitin@82.102.22.85)
[02:04:00] *** Quits: palindrome (~jhonny@109.77.12.226) (Quit: WeeChat 3.3)
[02:04:02] <sham1> Wait, ((5 / 9) * fahr) - 32 can be transformed to 5 * (fahr - 32) / 9? I'm not sure you can have the subtraction over the same denominator
[02:04:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:05:45] *** Quits: magla (~gelignite@55d47ed7.access.ecotel.net) (Quit: Stay safe!)
[02:06:36] *** Quits: alch (~alch@151.82.172.110) (Ping timeout: 268 seconds)
[02:06:43] *** Quits: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi) (Quit: Akuli)
[02:07:39] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-109.cspire.com)
[02:07:51] *** Joins: alch (~alch@pa-18-175-138.service.infuturo.it)
[02:07:59] <trafficjam> sham1: ah you're right, i got the formula wrong
[02:08:01] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[02:10:56] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 268 seconds)
[02:11:30] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:15:20] <trafficjam> when it says "integer division truncates", does that mean that it will convert any fraction < 1 to 0?
[02:15:23] <stonkey> when I printf("%d", UINT_MAX) with limits.h inlcuded, is it normal for "-1" to be printed?
[02:15:46] <sham1> It rounds towards negative infinity. So yeah. If the fraction would be less than 1, it goes to zero
[02:15:50] <caze> stonkey: No.
[02:15:52] <stonkey> I was expecting it to print 4294967295
[02:15:54] <trafficjam> thanks
[02:15:58] *** Quits: Deepspeed (~yep@124.sub-174-215-151.myvzw.com) (Read error: Connection reset by peer)
[02:16:00] <sham1> For positive integers it's the same as flooring
[02:16:04] <caze> stonkey: Why would it print that?
[02:17:10] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:17:39] <twkm> stonkey: q: is %d appropriate for an unsigned int?  a: no.
[02:17:39] *** Joins: Deepspeed (~yep@124.sub-174-215-151.myvzw.com)
[02:17:40] <stonkey> it's unsigned, so it should be a positive number, and 0xffffffff should be that number?
[02:17:45] <stonkey> aha!
[02:17:59] <stonkey> thanks twkm
[02:18:07] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:18:10] <twkm> you asked for decimal, so no hex will be forthcoming.
[02:18:41] <caze> stonkey: Use %u
[02:19:02] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[02:19:10] <stonkey> so I was looking for %u yes
[02:19:11] <stonkey> thanks
[02:19:36] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:19:40] <neiluj> ohhuh
[02:19:51] <neiluj> I think there's a bug in a library I'm using
[02:20:08] <pnbeast> History supports your thesis.
[02:23:44] <neiluj> But I may used the library incorrectly tho
[02:23:47] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Ping timeout: 250 seconds)
[02:23:50] <neiluj> *have used
[02:24:16] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:25:29] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[02:25:37] *** Joins: rgrinberg (~textual@187.223.218.43)
[02:26:19] <neiluj> argh it sucks
[02:26:47] <neiluj> dont use this kids https://github.com/DavidLeeds/hashmap
[02:26:49] <candide> Title of neiluj's link: GitHub - DavidLeeds/hashmap: Templated type-safe hashmap implementation in C using open addressing and linear probing for collision resolution.
[02:26:54] <neiluj> :)
[02:27:20] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:27:39] <neiluj> there's a collision between two unrelated entries (with different hashes)
[02:27:49] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[02:28:02] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Remote host closed the connection)
[02:28:26] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[02:30:03] *** Quits: rgrinberg (~textual@187.223.218.43) (Ping timeout: 250 seconds)
[02:30:57] *** Quits: NEYi (~NEYi@109.251.216.38) (Remote host closed the connection)
[02:31:01] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:31:21] *** Joins: NEYi (~NEYi@109.251.216.38)
[02:32:19] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[02:33:38] *** Joins: Torr (~Torr@user/torr)
[02:34:01] *** Joins: pizdets (~pizdets@183.182.110.125)
[02:34:16] *** Joins: ss4 (~wootehfoo@user/wootehfoot)
[02:34:18] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 260 seconds)
[02:34:41] *** Quits: pizdets_ (~pizdets@183.182.115.80) (Ping timeout: 250 seconds)
[02:36:02] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 240 seconds)
[02:37:21] *** Quits: kts (~kts@103.73.237.144) (Quit: Konversation terminated!)
[02:39:29] <sham1> Well since it's probably doing a modulo, that does make sense
[02:40:20] *** Quits: Foaly (~Foaly@user/foaly) (Quit: Foaly)
[02:40:25] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[02:40:40] *** Quits: ss4 (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:41:46] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[02:41:56] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[02:41:59] *** Joins: pulse (~pulse@user/pulse)
[02:42:45] *** Parts: okt (560965ea7b@user/okt) ()
[02:43:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:43:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[02:43:43] *** Joins: wroathe (~wroathe@user/wroathe)
[02:46:03] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Remote host closed the connection)
[02:47:35] *** u0_a3911 is now known as Kit
[02:50:25] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: zzz)
[02:50:29] *** Joins: tolot (~tolot@dslb-178-003-158-004.178.003.pools.vodafone-ip.de)
[02:51:35] *** Joins: rgrinberg (~textual@187.223.183.192)
[02:55:18] *** Parts: magga (magga@ti0036a400-1042.bb.online.no) ()
[02:55:24] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[02:55:39] <neiluj> ok, I changed the type of the keys and it's gone
[02:55:43] <neiluj> probably my fault
[02:56:00] <neiluj> sorry dear hashtable lib
[02:57:53] *** Joins: rsjw (~quassel@user/rsjw)
[02:58:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:58:51] <trafficjam> what use cases does C have these days?
[02:59:01] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[02:59:20] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[02:59:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:00:42] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[03:01:02] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[03:01:18] *** Quits: whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu) (Quit: Updating...)
[03:01:58] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:04:22] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[03:07:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:07:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:07:40] *** Joins: wroathe (~wroathe@user/wroathe)
[03:07:45] <apotheon> drivers, kernel code, command line utilities, programming language compilers/interpreters/VMs/whatever, low-resource deplopyment environments, assembly wrapping, anything requiring secured software resources . . .
[03:07:47] <sham1> Well, it's a general purpose programming language, so take your pick
[03:08:02] <apotheon> . . . and yeah, what sham1 said
[03:08:32] <apotheon> One could write high-performance C binaries for use in web development via CGI.
[03:09:02] <apotheon> I wrote a todo queue application in C.  It's great.
[03:09:06] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[03:09:29] <apotheon> Most people would write it in Python, and it'd turn into a mess nobody wanted to use.
[03:10:02] <apotheon> C also excels at reminding the programmer to try to keep code size small.  Don't bloat the scope.
[03:10:17] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[03:10:30] <nitrix> The runtime of many languages are in C and many libraries are also just bindings to C libraries.
[03:11:18] *** Quits: tolot (~tolot@dslb-178-003-158-004.178.003.pools.vodafone-ip.de) (Quit: Leaving)
[03:11:50] <apotheon> yep
[03:12:17] <nitrix> The newer generation are mostly having to glue thing together with higher level languages, the foundation that solves the actually hard problems remains in low level languages and has to be maintained.
[03:12:39] <trafficjam> fair enough, quite a large number of applications still then it seems
[03:12:59] *** Quits: mahmutov (~mahmutov@37.155.77.89) (Ping timeout: 252 seconds)
[03:13:01] <nitrix> (Language generations, not as in ageism)
[03:13:04] <trafficjam> although what does C offer over languages like go or rust?
[03:13:15] <sham1> Having a stable ABI isn't technically a C thing, but it turns out that because C has such "simple" semantics, modeling the platform ABI around how C should work is reasonable
[03:16:10] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:16:24] <nitrix> trafficjam, C is like a chef's knife and Rust is like a kitchen appliance. If you learn all the right modes and buttons to press, the appliance does all the work for you and is very effective. But if you encounter something that it wasn't designed to slice, like a pineapple or a watermelon, you're back to a good old knife.
[03:18:42] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[03:18:49] <sham1> And to torture the metaphor, Rust, while being an efficient kitchen appliance, is also the kind of machine that doesn't let you really get in there and clean the blades or even repair the thing because you could reasonably get hurt by the blades and other machinery. A reasonable-enough policy, but also irritating
[03:18:50] <Deepspeed> good analogy
[03:19:34] <nitrix> Yeah. Different blades, hard to clean, noisy sometimes, doesn't work when there's a power outage, etc.
[03:20:01] *** Joins: cust (amaama@blackbox.amaama.org)
[03:20:09] <trafficjam> seems like a good explanation, thanks
[03:20:10] <nitrix> Of course the knife is more dangerous, but it's also incredibly simple. Blunt side, sharp side, handle. It trusts its user and the user also relies on it for when everything else fails.
[03:21:04] <trafficjam> from what I've heard, it's quite easy to shoot yourself in the foot when using C
[03:21:23] <trafficjam> Does this mean you need to be an expert in order to not do that?
[03:21:29] <Deepspeed> no
[03:21:40] <nitrix> Yeah, knives can cut fingers. You learn very early to avoid doing that, though.
[03:22:13] <Deepspeed> There are tons of ways to mess up any language.  C is similar to linux in that it lets you do what you want.  Even if you want to do something stupid.
[03:22:35] <Deepspeed> if you're smart enough to not rm -rf your system, you're smart enough to learn to deal with possible problems in C.
[03:22:52] <trafficjam> what are the main pitfalls of C in this regard?
[03:23:02] <trafficjam> is to to do with memory allocation?
[03:23:21] <sham1> And again, to torture this analogy, there are plastic guards if one wants to safe their own fingers (or feet as it may be), i.e. stuff like Valgrind or ASan and suxh
[03:23:25] <shiroyasha> I can read and implement "ISO 9899:2018" if I want; last time I checked, Rust's borrow checker still wasn't well-defined enough for independent implementations to know whether something is a bug or not (without receiving a handwavy answer like "do what rustc does").
[03:23:28] <Deepspeed> buffer overflows, stack overflow, ,memory allocation, etc.
[03:23:52] <nitrix> You track ownership and lifetimes yourself, instead of relying on the type system and abstractions to do it for you.
[03:24:18] <trafficjam> ah ok, yeah managing that stuff is a bit intimidating because i don't really understand any of it
[03:24:21] <sham1> It is labour intensive and somewhat error prone, but compilation cycles are almost instant
[03:24:53] <Deepspeed> You don't have to understand it as a beginner.  You just learn until you do understand it.
[03:25:09] <trafficjam> fair enough
[03:25:11] <Deepspeed> Look up simple examples of how buffer overflows happen in c and you'll know exactly how to avoid it in the future.
[03:25:19] <Deepspeed> same with all the other problems you can have...
[03:25:29] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[03:25:29] <trafficjam> does K&R explain the stack, heap, etc?
[03:25:47] *** Joins: soapsudsxx (~soapsudsx@209.221.40.151)
[03:26:19] <nitrix> It does, though C programmers don't even call it a stack or a heap, believe it or not :P
[03:26:38] <trafficjam> oh, what do you guys call it?
[03:26:56] <nitrix> Objects in C have four possible storage durations: automatic, allocated, static or thread.
[03:27:28] <sham1> I'll dispute that. The memory regions are certainly called "stack" and "heap" and they are used as shorthands when discussing the different storage classes
[03:27:42] <nitrix> Whether or not the compiler or the platform uses a stack or a heap is irrelevant, as far as the language is concerned.
[03:27:45] <Deepspeed> yeah, I still think in terms of stack and heap with some things.
[03:28:16] <sham1> Yeah, as far as the spec is concerned, whether it's a stack or a heap is irrelevant, but in practice not so much
[03:28:34] <nitrix> sham1, In C.S. it's very relevant. But C has its own terminology and semantics tied to those things, it's preferable to lean with the Standard.
[03:29:25] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[03:29:26] <nitrix> Well, I think it's preferable for a beginner at least. In time they can use Undefined Behavior and learn the outside world, I don't mind.
[03:29:56] <nitrix> There's a world outside of C too.
[03:31:09] <nitrix> trafficjam, Objects with automatic storage are tied directly to the scope of a variable. If the variable goes out of scope, the object ceases to exists. Like the end of a function block.
[03:31:52] <nitrix> trafficjam, Objects with allocated storage are managed manually. You would use malloc/calloc to allocate them and you're responsible to free them later.
[03:32:19] *** MrMobius_ is now known as MrMobius
[03:33:03] <nitrix> trafficjam, Static objects lives for the entire execution of the program. They just are. String/integer literals for example.
[03:33:17] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[03:33:41] <nitrix> trafficjam, Thread objects are a bit more complicated, but it's essentially an instancing mechanism, for one variable to have different values per thread.
[03:33:48] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:33:53] <nitrix> That's about it.
[03:35:05] <trafficjam> A lot of those terms i'm going to have to look up lol
[03:35:23] <trafficjam> but thanks for the overview, need to learn this stuff
[03:36:51] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[03:36:57] <nitrix> Keep asking questions. We can go through simple declarations. Discuss pointers. Whatever the confusion is.
[03:37:16] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Remote host closed the connection)
[03:37:28] <nitrix> It's usually the same few things people block on, then it clicks and we never hear about them again x]
[03:37:36] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[03:37:54] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:38:31] *** Quits: hiovoltage (~hiovoltag@176.88.83.200) (Quit: Client closed)
[03:38:56] <Deepspeed> wait until he sees an inline if statement with ? :
[03:39:09] <Deepspeed> :P
[03:40:25] <trafficjam> i feel like the main issue is i don't understand what is going on under the hood, e.g. i have no concept of what memory allocation is actually doing to the hardware, or even what "execution of a program" actually means, on a fundamental level
[03:41:04] <trafficjam> and what exactly the stack and the heap are
[03:41:23] <trafficjam> like should i read Computer Systems before learning C?
[03:41:26] <Deepspeed> this is why you should download some pdf books about c :P
[03:41:34] <Deepspeed> Basic C books teach you all this
[03:41:40] <Deepspeed> with diagrams and explanations, etc.
[03:41:42] <nitrix> trafficjam, The role of a compiler is to translate the source of the program into something that's executable (there are 8 translation phases, aka what you think of as preprocessing). Once that's done, the program can execute, it runs.
[03:41:43] <trafficjam> i'm going through K&R at the moment
[03:42:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:42:09] <Deepspeed> K&R is good, but I recommend checking out about a dozen books and reading through the best 3 of them
[03:42:17] <trafficjam> nitrix: ah, so a compiler converts the source code (C) to binary?
[03:42:42] <trafficjam> Deepspeed: any recommendations?
[03:42:45] <Deepspeed> yes.  Converts it into something which the PC can understand and work with directly.
[03:43:19] <trafficjam> is it possible to build my own compiler, or run my own binary code, to get a better understanding of all this?
[03:43:35] <trafficjam> (something very  simple of course, but just so i can get an intuition about whats going on)
[03:43:38] <Deepspeed> aside from K&R, I got some use out of C for Dummies and Head First C and a handful of other PDF's I found back when.  THere are tons of decent C books.
[03:43:51] <Deepspeed> you can totally make your own compiler.  You can even do it in C.  But it's not a simple task.
[03:43:52] <nitrix> Yeah and it usually does so targeting one very specific platform, like x86, amd64, etc. The opcodes are specific to the hardware it's meant to run on.
[03:44:21] <cassepipe> Hi all ! So on Linux I am trying to implement a C program that would behave like a shell command like the following :
[03:44:21] <cassepipe> "infile> cmd1 | cmd2 | ... | last_cmd > outfile.
[03:44:21] <cassepipe> What I have tried so far is to fork-exec each command and then wait() a similar number of times. But I have a problem with pipes.
[03:44:21] <cassepipe> When I call pipe() in the main process, all the commands will inherit the same pipe whereas if I call pipe() in the forked process
[03:44:24] <cassepipe> I will get a pipe() that's not shared with the other processes.
[03:44:24] *** ChanServ sets mode: +o candide
[03:44:25] *** candide sets mode: +b *!~cassepipe@*.numericable.fr
[03:44:28] <Deepspeed> Your best bet is to get on youtube and look up videos about "how C compilers work"
[03:44:30] <Deepspeed> or something
[03:44:39] <Deepspeed> to get a basic feel for that
[03:45:22] <trafficjam> good idea. man it's such a rabbit whole, i feel like the only way i'll ever be a good programmer is if i understand what's going on at the hardware level and build my way up
[03:45:33] <trafficjam> but there's so much to learn about at the hardware level
[03:45:36] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[03:45:47] *** candide sets mode: -b *!~cassepipe@*.numericable.fr
[03:45:47] <Deepspeed> More like you need to start in the middle and grow outward in both directions, toward higher and lower level understandings.
[03:45:56] <nitrix> trafficjam, As for the memory side of things, it depends if you use C in a freestanding environment or hosted environments. Basically, if your code is meant to run directly on the hardware, or if with the help of an operating system like Linux/Windows/Mac.
[03:46:59] <trafficjam> ah good point, i've never really done much work with writing code directly on hardware before, except arduino, so all my experience has basically been on operating systems
[03:47:14] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[03:47:26] <nitrix> trafficjam, Freestanding, the processor starts executing your code right away and you have to manage all the intricacies of what signals are sent to what pins. That's what you see in chips, like your toaster, microwave, car, etc. You have complete control of the entire CPU and RAM though.
[03:47:26] <Deepspeed> You don't need to be able to create a compiler or explain data structures in order to write some basic hello worlds and work your way through examples.  You'll learn more technical things as you get there, both high and low level.
[03:47:34] *** Joins: Torr (~Torr@user/torr)
[03:48:04] <Deepspeed> The best way to learn is to get practical experience working from examples and progressing one step at a time.
[03:49:44] <nitrix> trafficjam, With a hosted environment, the hardware runs a program (the operating system), which sometimes pauses itself to let other programs run. Each program runs for a little while, then returns to the operating system. It all happens transparently and very quickly too. For security reasons, the programs are sandboxed too, they have "virtual memory" instead of access to the physical RAM.
[03:49:47] <cassepipe> Oh I wanted to  get advice from you about proper implementation of pipes in C but the message got lenghty and I got muted. Here is the message if you don't mind having a look at it. I am in need of advice. https://dpaste.com/B38LXDZMT
[03:50:50] <nitrix> trafficjam, So you end up allocating memory by requesting the operating system to lend some of its memory to your program (in the form of virtual memory), and you return it to the operating system when you're done with it, this way it can be re-used by other programs when they need it too.
[03:51:18] <nitrix> trafficjam, That's a very high overview of freestanding and hosted environments.
[03:51:48] <trafficjam> nitrix: ah ok, so does that mean the operating system can shutdown a process if it's consuming for example too much memory?
[03:52:09] <Deepspeed> The operating system can kill/manage processes just like with any task manager.
[03:52:54] <nitrix> Of course. The operating system is the manages the processes. It's in fact, the one that even creates the concept of processes.
[03:53:12] <nitrix> As far as the CPU is concerned, it's running a long never-ending program.
[03:54:20] <trafficjam> the os being the long never-ending program you mean?
[03:54:24] <nitrix> Yep.
[03:54:37] <nitrix> The operating system will just stop planning slices of time where your code was meant to run, at the point the process is basically stopped.
[03:54:47] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:55:06] <nitrix> If it cleans up the file handles, network sockets (all concepts that the operating system invented too), then the process is basically killed at that point.
[03:56:03] *** Quits: YellowSuB (~YellowSuB@213.190.118.49) (Ping timeout: 256 seconds)
[03:56:05] <nitrix> The hardware is unaware of all of this, other than maybe it's clock speed slowing down to save power now that it has less things to run.
[03:56:10] <trafficjam> man yeah i don't even understand what files are under the hood, or how networks work lol
[03:56:33] <nitrix> Well, not a lot of people do and that's fine, lol.
[03:56:51] <trafficjam> My reading list is K&R -> Computer Networks -> Computer Systems
[03:57:29] <Deepspeed> Then you'll want to look up how hard drives work and how HTTP/IP works.  It's not super complex to understand the basics.
[03:57:42] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[03:57:53] <Deepspeed> but it takes a little reading.  Still not totally required to work with code, though, unless you're doing low-level work with those things.
[03:57:53] <nitrix> As far as C is concerned, you get a pointer of type `FILE *`.
[03:57:58] <trafficjam> For years i've wanted to actually completely understand everything that happens when a program runs, from the bottom up, decided to commit to it over the next few weeks
[03:58:10] <trafficjam> Deepspeed: yeah got to look that up too
[03:58:21] <nitrix> For all the languages, it's eventually some struct with a couple fields, one of them is usually a `fd` (file descriptor), that's an integer the operating system gave you to identify the file.
[03:58:34] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:58:41] <trafficjam> is a file description just a location in memory?
[03:59:02] <nitrix> It's a unique identifier for a file. Where it is is up to the operating system.
[03:59:04] <trafficjam> Deepspeed: yeah i can program fine without understanding what's going on underneath, but i think it limits you
[03:59:27] <trafficjam> nitrix: ok, but it references some address in memory/disk right?
[03:59:34] <nitrix> Files are usually read as blocks, some of them are kept in RAM if they're accessed frequently, some remains on disks/ssds, depends what the OS does.
[03:59:43] <Deepspeed> It does limit you in some ways.  It never huts to understand things better.  Just making sure you know you don't 'need' to know it all to get started.
[03:59:46] <nitrix> It unique identifies a file.
[04:01:07] <nitrix> trafficjam, To be clear, you can't go down to that level with just C. How files are read/written/cached/etc is a responsibility of the operating system. All your program gets is an id. A handle.
[04:02:00] <nitrix> trafficjam, For C, you end up using the functions fopen(), fread(), fwrite(), fclose(). Your compiler will transform those function calls into conversations between your program and the operating system.
[04:02:16] <nitrix> (Aka syscalls).
[04:03:28] <BtbN> that's not how that works lol
[04:03:35] <BtbN> Those are libc functions
[04:03:38] <trafficjam> nitrix: ah so when running C on an operating system, i should think of it interfacing with the OS rather than the hardware directly?
[04:03:58] <nitrix> BtbN, Never heard of harmless lies?
[04:04:18] <BtbN> At least use the actual syscall-alikes when going down to that level
[04:05:08] <nitrix> Except we're not going there.
[04:06:15] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 250 seconds)
[04:07:01] *** Quits: rgrinberg (~textual@187.223.183.192) (Ping timeout: 240 seconds)
[04:07:19] <BtbN> fopen/fread/... and friends have a lot of libc abstraction on top. The interface the OS offers are the similarily named functions without leading f.
[04:07:56] <rcf> For some operating systems; strict C discussion need never involve them.
[04:08:03] <nitrix> If you assume Linux.
[04:08:17] <nitrix> Again, we're not going there.
[04:08:43] <BtbN> You started talking about syscalls oO
[04:08:56] <BtbN> And I think the actual only exception for those is Windows
[04:09:05] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[04:09:05] <BtbN> Otherwise they're pretty universal
[04:09:20] <nitrix> trafficjam, It depends if your interest in C is to write the code for the chip for embedded devices (like your hair dryer) or a program meant to run by an operating system. You can use C for both.
[04:09:27] <rcf> How syscalls work is different on every platform, as POSIX does not specify them.
[04:09:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:09:33] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:10:06] <trafficjam> nitrix: yeah i guess i've never really differentiated between C code interfacing with an operating system and C code running *as* the operating system (on the hardware directly)
[04:10:15] <Whatshisface> hair dryer... hrm... that'd be an interesting one. An IoT Dyson hair dryer powered by an Octavo OSD3358...
[04:10:26] <BtbN> That's what the C compiler, or rather the libc, takes away from you. Knowing how to actually perform syscalls on your platform.
[04:10:31] *** Joins: Wulf (~Wulf@user/wulf)
[04:10:55] <rcf> And what those are is beyond this particular discussion.
[04:11:01] <nitrix> trafficjam, But you're right. On a hosted environment, you simply cannot interface with the hardware directly, the operating system will make sure of that by putting all sorts of protections in place (some of them with the help of the hardware even). You'll have to use the functions the OS provides you to achieve what you want.
[04:11:30] *** Joins: rgrinberg (~textual@187.223.183.192)
[04:11:45] <trafficjam> so is that what memory allocation is about? i.e. requesting memory to be allocated to you by the operating system?
[04:12:16] <trafficjam> ah yeah you wrote that above
[04:12:25] *** Joins: kuoi (~kuoi@109.175.166.59)
[04:12:35] <trafficjam> man that makes so much sense, i never made that connection before lol
[04:12:45] <BtbN> That's also done by the libc for you. The actual low level interface to get memory from the OS is... quite low level
[04:12:47] <nitrix> trafficjam, Your program starts with an initial amount of memory (just enough for the program itself to fit in memory). Anything extra that you happen to want at a later them needs to be requested to the OS, yes.
[04:13:13] <BtbN> Like, the kernel does not offer malloc. Making it nice and simple to use is done by your libc.
[04:15:41] <nitrix> trafficjam, The physical RAM is a finite resource and the programs can all obtain parts of it, maybe even all of it, as long as they do it at different times.
[04:15:54] <rcf> Anonymous pages through mmap() is common enough these days that it might as well.
[04:16:15] <trafficjam> when people use the term memory, they mean RAM right?
[04:16:28] <trafficjam> is that where objects are stored when a c program runs?
[04:16:46] <nitrix> trafficjam, If all the programs all request the entirety of the memory available on the system, the operating system is obviously going to either refuse the demand for someone or even punish the culprits :P
[04:17:25] <trafficjam> i.e. by killing the process?
[04:17:40] <pony> when is asm the right tool? writing parts of an os?
[04:18:34] <nitrix> trafficjam, Memory is even more general than RAM. Some chips have ROM for example. Some memory are read-only, some are write-once, some don't even have random access, depends how the hardware was designed.
[04:19:02] <rcf> trafficjam: In C memory can refer to RAM or ROM or arbitrary subdivisions of it (think Harvard architectures, where executables and data are separate address spaces, which is why function and data pointers are not strictly compatible)
[04:19:14] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:a017:26db:d8b0:4bb4)
[04:19:14] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:a017:26db:d8b0:4bb4) (Changing host)
[04:19:14] *** Joins: skapate (~Skapata@user/skapata)
[04:19:17] *** Quits: rgrinberg (~textual@187.223.183.192) (Ping timeout: 256 seconds)
[04:19:21] <BtbN> pony, when C is too slow
[04:19:39] *** Joins: semeion (~semeion@user/semeion)
[04:19:44] <nitrix> trafficjam, Apollo's flight computer used memory that was woven with copper cables and miniature magnetized nuts. https://spectrum.ieee.org/image/Mjk1NzE5Mw.jpeg https://i.ytimg.com/vi/Igu3C3AT0Wo/maxresdefault.jpg
[04:20:02] <Deepspeed> asm is the right choice when you have too much time on your hands and want to spend a week to make a hello world right and then another week to optimize it just a bit.
[04:20:07] <BtbN> like, Linux has very little actual assembly. It's pretty much 99.9% C
[04:20:31] <rcf> Nonstandard C with specific compiler dependencies to avoid asm
[04:20:31] <BtbN> But something like ffmpeg has a ton of assembly, simple because it's a massive performance boost
[04:21:03] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:21:06] <rcf> But that’s every operating system written in “C”
[04:21:12] *** Quits: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr) (Remote host closed the connection)
[04:21:24] <nitrix> trafficjam, If I pretend I'm a C interpreter (manually evaluating the code in my head), memory can be as absurd as me noting down what I want to remember on a piece of paper.
[04:21:27] <pony> what's the other .1%?
[04:21:42] <nomagno> I have a custom architecture, how can I write a C compiler backend for it?
[04:21:44] <rcf> pony: assembler, and eventually rust
[04:21:49] <BtbN> low level stuff you simply can't do in C
[04:21:55] <nomagno> I have no callstack, so it wouldn't be strictly compliant
[04:21:57] <pony> ok
[04:21:58] <nomagno> But that's besides the point
[04:21:59] <BtbN> like, switching from real mode, and so on
[04:22:21] <nitrix> trafficjam, You starting to understand why it's better to stop at the abstractions :P ?
[04:22:23] <nomagno> I just want to know how to write a C compiler backend, and the easiest compiler to write a backend for
[04:22:47] <rcf> nomagno: QBE aims to be fairly simple if limited.
[04:23:02] <trafficjam> nitrix: lol yeah i think so
[04:23:08] <BtbN> The major choices are obviously gcc and clang/llvm. Both will be a pain.
[04:23:28] <HisShadow_> nomagno: LCC maybe, it's virtual language consists of only a hundred or so instructions
[04:24:04] <rcf> nomagno: tcc also works well, I believe someone here successfully retargeted it for their custom instruction set
[04:25:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:25:54] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:26:04] <nitrix> ,tell trafficjam about ,cc void *p = malloc(1000 * 1000 * 1000); // That's all it takes to allocate an object 1GB large.
[04:26:09] <nomagno> LCC seems nice but it of course has a non-commercial license
[04:26:12] <candide> That's very fascinating, n​itrix
[04:26:21] <nitrix> ,tell trafficjam about cc void *p = malloc(1000 * 1000 * 1000); // That's all it takes to allocate an object 1GB large.
[04:26:23] <candide> trafficjam: no output: p = 0x7fffbb4a5010
[04:26:41] <pragma-> nitrix: ,cc puts("this might be easier to type");
[04:26:44] <candide> nitrix: this might be easier to type
[04:26:44] *** Quits: kuoi (~kuoi@109.175.166.59) (Quit: kuoi)
[04:26:50] <rsjw> 1024*1024*1024?
[04:26:57] <nitrix> GB, not GiB.
[04:27:06] <rcf> Hard drive vendor GB
[04:27:42] <trafficjam> 10^9 bytes?
[04:28:17] <rsjw> well KB originally meant 1024 and I see no reason to change
[04:28:20] <nitrix> Myup. SI units. Bytes. Kilobytes. Megabytes. Gigabytes.
[04:28:37] <nitrix> All powers of 10s.
[04:28:39] <trafficjam> so that command is requesting access to 1GB of RAM from the OS?
[04:28:40] <rcf> Of course that assumes a conforming implementation; Linux, for example, will randomly terminate programs if you try to use “allocated” space beyond the system’s limitations
[04:28:45] <nitrix> Of 1000s I guess.
[04:28:46] <rsjw> "originally" in computer space, I mean
[04:29:28] <nitrix> trafficjam, Yeah. You'll get an object that's 1GB large and the pointer `p` is now pointing at it.
[04:30:02] <nitrix> It's not that hard to see from there that if that object is a struct, with meaningful field names and types, you can start organizing things.
[04:30:04] <trafficjam> ah yeah pointers, another problematic concept lol. I swear i've read about them a few times, and each time i get it, but then i forgot how they work again
[04:30:45] <nomagno> QBE/QCC doesn't have a license
[04:31:00] <trafficjam> so is that pointer just an array of memory addresses?
[04:31:00] <nomagno> Aaand I already found TCC to be too complex
[04:31:06] <nomagno> Nice, back where we started
[04:32:22] <nitrix> trafficjam, The pointer itself (its value) is the address of the object that was allocated in memory, yeah.
[04:32:32] <nitrix> trafficjam, ,cc struct player { int health; int mana; }; struct player *p = malloc(sizeof *p); p->health = 1000; p->mana = 200;
[04:32:34] <candide> trafficjam: no output: p = 0x41f1a0
[04:32:43] <pony> but what's an address?
[04:33:02] <trafficjam> what exactly is an object in this context?
[04:33:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[04:33:26] <trafficjam> like when you say "of the object that was allocated in memory", what does that mean under the hood?
[04:33:42] <trafficjam> is the object defined by the operating system?
[04:33:45] <rcf> nomagno: QBE does have a license
[04:33:47] <nitrix> trafficjam, int x; // `x` is an identifier, which happens to also be the name of the variable that designates an object of type `int`.
[04:33:57] <nitrix> trafficjam, Not every object needs to have a name.
[04:34:56] <trafficjam> what is the difference between variable and object?
[04:35:09] *** Quits: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (Quit: Bye!)
[04:35:14] <trafficjam> and how are they represented in the hardware?
[04:35:17] <nitrix> trafficjam, int x[3]; // Now that's a bit more interesting. `x` is an object, it's an array of type `int[3]`, but the array itself has elements, those are also objects without a name and of type `int`.
[04:35:25] *** Joins: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[04:35:56] <trafficjam> ah so a variable is just a named object?
[04:36:02] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[04:36:17] <nitrix> Indeed.
[04:36:21] <trafficjam> gotcha
[04:36:46] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:36:54] <nitrix> The string literal "Hello" also creates an object of type `char[6]`, it wont have a name.
[04:36:58] <trafficjam> so when i have a C program that has a line `int price = 100`, what is the logic flow from there?
[04:37:17] <trafficjam> in terms of interactions with hardware/memory
[04:37:30] <nitrix> Single object named `price`, with the type `int` and initialized with the value `100`.
[04:38:04] <nitrix> You can probably guess yourself. In this case, you didn't use malloc, so it's not allocated. What else could it be?
[04:38:20] <trafficjam> let me check the different types xD
[04:38:27] <nitrix> I'll help. Perhaps automatic or static.
[04:38:58] <nitrix> If the declaration appears at file-scope (usually top of the file, outside of any functions), it'll be static.
[04:39:01] <Twix> <trafficjam> in terms of interactions with hardware/memory <-- depends. The compiler can do a lot of different things to implement that. Even completly ignoring that line if you didn't use "price"
[04:39:02] <trafficjam> yeah i was about to say those two
[04:39:04] *** Joins: Everything (~Everythin@37.115.210.35)
[04:39:13] <nitrix> If it's in a function, it'll be automatic.
[04:39:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[04:40:09] <nitrix> So either you have the variable at your disposal during the entire time the program runs, or the entire time a function runs.
[04:40:15] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[04:40:34] <nitrix> This isn't very any different than other languages.
[04:40:47] *** Joins: vysn (~vysn@user/vysn)
[04:41:29] *** Quits: et09 (~et09@user/et09) (Remote host closed the connection)
[04:41:39] <trafficjam> yeah i've always thought that for some reason C worked differently than other languages wrt how it interfaced with the hardware/os, don't know why
[04:41:59] <trafficjam> by the way, should I read 'Computer Systems: A Programmer's Perspective' before or after K&R?
[04:42:19] <trafficjam> if i recall correctly it has some good explanations about this sort of thing
[04:42:44] <nitrix> I'd learn C before I learn about the intricacies of computers.
[04:43:13] <nitrix> So K&R I guess.
[04:43:34] <trafficjam> ok i'll stick with that
[04:43:43] <nitrix> Gonna know how to walk before you sprint.
[04:44:02] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[04:44:09] <trafficjam> i thought Computer Systems was lower level than K&R actually
[04:44:11] <rcf> C is often mistakenly described as some magical low-level language that is the closest you can get to the hardware; assuming any particular mapping to, say, assembler is the source of many bugs
[04:44:31] <Deepspeed> if you wanna know about hardware, go watch that magic schoolbus episode where they go inside a PC :P
[04:44:36] <trafficjam> that was always my impression of it
[04:44:42] <trafficjam> lol
[04:44:46] <Deepspeed> it covers the basics well enough to get you started.
[04:44:50] <trafficjam> i can't imagine it's that insightful
[04:44:54] <trafficjam> seriously?
[04:45:11] <nitrix> C barely even knows there's an OS. Even memory and file operations are provided to you. (malloc, fopen, etc).
[04:45:29] <Deepspeed> funnily enough, yeah.  I saw some sort of cartoon with people touring inside a PC and it glossed over the basic functions of different hardware well enough to get the basics.
[04:45:34] <pony> 2:12 PM <nitrix> I'd learn C before I learn about the intricacies of computers. <= why?
[04:45:55] <pony> non-rhetorical Q
[04:46:22] <Deepspeed> But my point is that you can learn a simple, general overview of hardware without learning graphics card model numbers and still know enough to be useful when you're doing other coding work
[04:46:36] <nitrix> pony, I feel like it will ruin their chance at learning C correctly. The risk is higher of ugly things like type punning, breaking strict aliasing, using the wrong names, learning C experimentally with trial-and-error.
[04:47:17] <pony> I don't know what those things are
[04:47:20] <nitrix> pony, By the time they understand C, they'll have a better understand of the user-space/kernel-space boundaries, dig into libc, syscalls, kernels, and get progressively deeper.
[04:48:05] <nitrix> Like, what you do as a curious kid, disassembling things to see the innerworkings.
[04:48:34] <rcf> pony: the Linux kernel source is loaded with them, and it’s why building it with not-gcc has historically been a nightmarish proposition.
[04:48:40] <pony> top down, yeah
[04:49:00] <trafficjam> top down > bottom up for learning computer science?
[04:49:35] <nitrix> Your goal is to go low-level, so yes, you start where you're comfortable and dig deeper.
[04:49:56] <pony> I really want to read the elements of computing systems 2 but will read kr2 first :p
[04:49:56] <rcf> trafficjam: computer science itself is abstraction; eventually you reach electrical engineering and then just plain physics
[04:49:59] <nitrix> If you wanted to learn category theory, I'd say pick Haskell and then go higher with abstractions. Coq theorem proving, etc.
[04:50:09] <nomagno> Well you can learn computer science bottom up, but it's uncommon since mechanical computers started being accessible
[04:50:28] <trafficjam> nitrix: fair enough
[04:50:32] <nitrix> If you wanted to learn higher-level stuff, I'd say pick a functional language, maybe Haskell, then Coq, then maybe even category theory. ***
[04:50:47] <pony> :)
[04:51:13] <nitrix> It's a spectrum so you start where you think you understand things, then gradually aim for the extremes, imo.
[04:51:30] <pony> that makes sense
[04:51:33] <nitrix> I think it works better because the two ends are pretty much infinite...
[04:51:37] <nitrix> It's a rabbit hole...
[04:51:43] <pony> I think C is a nice place to start too
[04:52:09] <nitrix> How far do you wanna go? Electrical engineering? Wavers? Lithography? Quantum mechanics? lol
[04:52:15] <nitrix> Wafers*
[04:52:26] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 245 seconds)
[04:52:28] <trafficjam> lol i think i'd be happy to stop before engineering, at least for the time being
[04:52:44] <rcf> trafficjam: for a practical bottom-up approach, build your own CPU on a breadboard.
[04:52:45] <trafficjam> although someday it would be cool to learn
[04:52:54] <nitrix> You might laugh but quantum computers are a thing and the best "low-level engineers" are paving the way.
[04:53:09] <trafficjam> rcf: yeah that's on my todo list when i get the time
[04:53:14] <nitrix> Turtles all the way down.
[04:53:53] <pony> maybe the abstraction stack is a donut and physics on top of ct?
[04:54:03] <pony> no idea
[04:54:52] <nomagno> Ideally you'd understand at least a bit all the way from the raw silicon to webdev, and get a bit of theoretical base on the side. But that takes a lot of interest and time, gradually work your way from wherever you're comfortable like was already said
[04:55:08] *** Joins: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4)
[04:55:22] *** Joins: moog_ (~moog@107.126.48.46)
[04:55:39] *** Quits: random-nick (~random-ni@87.116.180.98) (Ping timeout: 250 seconds)
[04:56:19] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[04:56:27] <nitrix> nomagno, I think developers that can put simultaneously put RISC and React on their resume are a dying breed :P
[04:56:44] <pony> lol
[04:56:53] <nomagno> nitrix, unfortunately!
[04:57:24] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[04:57:25] *** Quits: moog (~moog@107.126.48.46) (Ping timeout: 240 seconds)
[04:58:28] <trafficjam> nomagno: i've got web dev relatively down pat, but yeah anything lower level than that (networking, operating system design, hardware interfacing, etc) i dont have much if any knowledge about
[05:01:22] <nitrix> C's standard library doesn't have networking accounted for, but you can #include <winsock2.h> on windows or #include <sys/socket.h> on unices to gain access to them.
[05:01:38] <nomagno> There are a lot of possible paths down, but you might want something like JS->Python->*nix until suite->POSIX C
[05:01:41] <trafficjam> oh also algorithms, databases, what else...
[05:01:50] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[05:02:08] <nomagno> That's a different issue, algorithms and data structures are a bit if a side thing to programming itself
[05:02:09] <nitrix> Data structures too if you're doing C.
[05:02:20] <trafficjam> right that as well
[05:02:27] <nomagno> Yes
[05:02:56] <trafficjam> does Computer Systems discuss algorithms and data structures that much do you know?
[05:03:24] <trafficjam> hmm doesn't seem like it
[05:03:56] <trafficjam> guess i need to read Introduction to Algorithms as well
[05:04:06] <nitrix> Algorithms depends very much on the problem you're solving. Like, A* path finding, very useful... when you have a path to find. Games do. Websites don't.
[05:04:21] <nitrix> It's not related to C at all.
[05:04:51] <pony> does K&R2 teach you how to make associative arrays/
[05:05:18] <pony> Lua taught me those are the only necessary data structure
[05:05:42] <nitrix> TCL :)
[05:06:01] <pony> I never learned TCL
[05:06:07] <pony> isn't everything in that a string?
[05:06:20] <trafficjam> nitrix: yeah it's more computer science related
[05:06:33] <nitrix> pnbeast, Absolutely. It's a massive key-value store. The keys are the variable names.
[05:06:41] <nitrix> pony, ^ sorry wrong highlight.
[05:06:56] <pony> huh
[05:06:59] <pony> oh
[05:07:10] *** Joins: Enitin (~Enitin@82.102.22.86)
[05:07:11] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[05:07:14] <nitrix> set "friends(pony, nitrix)" true
[05:07:24] <pony> <3
[05:07:49] <nitrix> It's unidirectional though, because they're just strings.
[05:08:13] <nitrix> So you need (nitrix, pony) too, or to sort the names, etc.
[05:09:22] <pony> I don't get it but I'm sleep deprived
[05:09:33] <nitrix> I blame 2021.
[05:09:45] <pony> but yeah, does K&R2 teach you to implement associative arrays?
[05:10:42] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[05:11:22] <nitrix> Not that I can see.
[05:11:25] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 256 seconds)
[05:11:53] <nitrix> It's a lot of parsing and string processing.
[05:12:33] *** Quits: candide (~pbot3@about/c/bot/candide) (Remote host closed the connection)
[05:12:40] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (Quit: Bye!)
[05:14:49] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[05:16:27] *** Joins: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357)
[05:18:50] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[05:19:20] <pony> I've got like 30 books I wanna read, dunno where to start
[05:19:21] <pony> :(
[05:20:32] *** Joins: candide (~pbot3@about/c/bot/candide)
[05:21:28] *** Quits: candide (~pbot3@about/c/bot/candide) (Remote host closed the connection)
[05:21:58] <nomagno> https://meinong.stanford.edu/entries/lambda-calculus/
[05:21:58] <nomagno> Not very C related but since you brought up the topic of books
[05:22:03] <nomagno> This is a WONDERFUL Lambda Calculus intro
[05:22:13] <nomagno> Found it insanely helpful, really recommend it
[05:22:36] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:22:55] <pony> oh thanks!
[05:22:59] <pony> another thing II want to learn about :)
[05:23:25] <nomagno> It's really short, so not adding too much to the pile I hope :P
[05:23:43] <pony> :))
[05:23:47] <pony> looks short yeah
[05:25:07] <nomagno> And, since lambda calculus is more interesting as a notation system than anything else, I find it helpful to describe programs even if not being completely formal when using it
[05:25:23] <pony> cool, cool
[05:26:04] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[05:28:28] *** Joins: candide (~pbot3@about/c/bot/candide)
[05:32:41] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:32:55] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 250 seconds)
[05:33:13] *** Quits: Brainium (~brainium@user/brainium) (Quit: -a- IRC for Android 2.1.59)
[05:34:05] <pony> this encyclopedia looks pretty good in general nomagno
[05:34:28] <nomagno> Yeah
[05:34:53] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[05:35:05] <nomagno> It seems to have a higher level of detail/explanation than something like Wikipedia for technical stuff
[05:39:31] <nomagno> However, the content licensing is sketchy
[05:39:58] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Ping timeout: 268 seconds)
[05:40:05] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7f50:bd17:59b3:3c7a) (Ping timeout: 250 seconds)
[05:40:16] <nomagno> I assume only people from the university can contribute, else the exclusive license grant and copyright retention are stupid
[05:40:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f)
[05:41:10] <nomagno> seems not, but it's still a professional encyclopedia anyways judging from their password-access editing policies and editorial entry
[05:45:24] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[05:49:14] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 268 seconds)
[05:52:34] <|smlckz|> ,c99 6.5.5p6
[05:52:34] <candide> http://www.iso-9899.info/n1256.html#6.5.5p6 [Multiplicative operators] When integers are divided, the result of the / operator is the algebraic quotient with any fractional part discarded.90) If the quotient a/b is representable, the expression (a/b)*b + a%b shall equal a. FOOTNOTE.90 This is often called ``truncation toward zero''.
[05:53:11] <|smlckz|> where is the floating point division specified?
[05:54:43] <fizzie> ,c11 5.2.4.2.2p6
[05:54:47] <candide> http://www.iso-9899.info/n1570.html#5.2.4.2.2p6 [Characteristics of floating types <float.h>] The accuracy of the floating-point operations (+, -, *, /) and of the library functions in <math.h> and <complex.h> that return floating-point results is implementation- defined, as is the accuracy of the conversion between floating-point internal representations and string representations performed by the librar... <truncated; https://0x0.st/osg_.txt>
[05:56:12] <fizzie> That's as close as you get to a specification, unless __STDC_IEC_559__ is defined, in which case see that other standard.
[05:56:46] <fizzie> ,c11 f.3p1
[05:56:48] <candide> http://www.iso-9899.info/n1570.html#F.3p1 [Operators and functions] C operators and functions provide IEC 60559 required and recommended facilities as listed below. -- The +, -, *, and / operators provide the IEC 60559 add, subtract, multiply, and divide operations. -- The sqrt functions in <math.h> provide the IEC 60559 square root operation. -- The remainder functions in <math.h> provide the IEC 60559 r... <truncated; https://0x0.st/osgp.txt>
[05:57:21] <fizzie> (Annex F as a whole applies only if the implementation so chooses.)
[06:01:35] <|smlckz|> what i was looking for is in c99 6.3.1.8
[06:02:33] <|smlckz|> but not much exactly on division there..
[06:03:05] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[06:04:27] *** Quits: alch (~alch@pa-18-175-138.service.infuturo.it) (Read error: Connection reset by peer)
[06:07:46] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[06:07:51] <|smlckz|> how different, if any, is IEC 60559 from IEEE 754?
[06:08:18] *** Joins: alch (~alch@bo-18-140-158.service.infuturo.it)
[06:08:28] *** Joins: jancoow (~jancoow@user/jancoow)
[06:09:39] *** Joins: Enitin (~Enitin@82.102.22.85)
[06:10:18] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:13:36] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-109.cspire.com) (Read error: Connection reset by peer)
[06:14:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[06:15:15] *** Quits: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357) (Quit: ZZZzzz…)
[06:16:16] <fizzie> It's exactly the same thing, as far as I know.
[06:20:06] *** Joins: gry_ (~quassel@botters/gry)
[06:22:02] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[06:22:19] *** Joins: sebag (~guest@91.245.82.2)
[06:25:29] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[06:25:34] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[06:25:54] *** Joins: tejr (~tejr@user/tejr)
[06:27:01] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-995e-1663-5011-4cc5.res6.spectrum.com) (Ping timeout: 240 seconds)
[06:27:37] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (Ping timeout: 240 seconds)
[06:28:59] *** Joins: Torr (~Torr@user/torr)
[06:29:25] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 240 seconds)
[06:29:25] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Ping timeout: 240 seconds)
[06:29:49] *** Quits: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88) (Ping timeout: 240 seconds)
[06:30:24] *** Joins: Kit (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[06:30:38] *** Joins: monti (~monti345@95.186.139.34)
[06:31:03] *** Quits: monti (~monti345@95.186.139.34) (Excess Flood)
[06:31:41] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[06:31:49] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 240 seconds)
[06:31:49] *** Quits: Guest6221 (~mercvrivs@2001:470:69fc:105::2ee6) (Ping timeout: 240 seconds)
[06:33:03] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[06:33:19] *** Joins: sebag (~guest@91.245.82.2)
[06:34:12] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:34:13] *** Quits: moog_ (~moog@107.126.48.46) (Remote host closed the connection)
[06:34:38] *** Joins: moog_ (~moog@107.126.48.46)
[06:35:07] *** Joins: rgrinberg (~textual@177.246.216.2)
[06:39:00] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[06:39:48] *** Quits: moog_ (~moog@107.126.48.46) (Ping timeout: 240 seconds)
[06:40:32] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (Ping timeout: 240 seconds)
[06:40:59] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[06:41:01] *** Quits: cation (cation@user/cation) (Ping timeout: 268 seconds)
[06:41:32] *** Joins: duds-_ (~duds-@gateway/tor-sasl/duds)
[06:42:09] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[06:43:10] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[06:44:04] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[06:44:07] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[06:44:32] *** duds-_ is now known as duds-
[06:44:55] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[06:46:08] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:46:09] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[06:46:28] *** Joins: Guest6221 (~mercvrivs@2001:470:69fc:105::2ee6)
[06:46:53] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[06:50:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[06:53:38] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:56:24] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[06:57:51] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 245 seconds)
[06:58:18] *** Joins: stblaha (~stblaha@user/stblaha)
[07:00:21] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[07:02:30] *** Joins: vysn (~vysn@user/vysn)
[07:02:33] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[07:05:06] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:05:30] *** Joins: nostar (~nostar@68.51.221.108)
[07:05:47] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[07:09:57] *** Quits: Dreg- (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[07:10:44] *** Joins: Dreg (~Dreg@fr33project.org)
[07:12:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:12:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:14:20] *** Joins: cation (cation@user/cation)
[07:14:21] *** Joins: pucara (~i@181.91.29.65)
[07:18:53] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 250 seconds)
[07:19:17] *** Joins: oxfuxxx (~oxfuxxx@185.244.213.132)
[07:20:00] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[07:21:20] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:c83c:cf2b:7904:ebef)
[07:21:30] <aac> hey. What is a good way to inject code into a processs?
[07:21:45] <aac> shellcode for instance
[07:22:24] *** Joins: noose (~noose@user/noose)
[07:22:31] <aac> what channel should i consult
[07:24:28] <dave0> i dunno, something with ptrace? i think that's how debuggers do it
[07:25:06] *** Joins: slidercrank (~slidercra@user/slidercrank)
[07:26:40] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[07:27:23] <aac> :/
[07:29:53] <twkm> not enough help for your cheat/exploit as you hoped, i guess.
[07:30:46] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[07:32:10] *** Joins: semeion (~semeion@user/semeion)
[07:33:32] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[07:33:34] <aac> heeheh
[07:33:54] *** Joins: Viewday11 (~Viewday@user/viewday)
[07:36:01] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[07:36:18] *** Joins: sebag (~guest@91.245.82.2)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:03] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[07:39:20] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[07:39:38] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[07:40:23] <pony> 4:51 PM <aac> hey. What is a good way to inject code into a processs?
[07:40:26] <pony> COVID-19
[07:40:37] <aac> no..there is a vacinne
[07:41:16] <highrate> but omicron
[07:41:40] <highrate> easier to spread with worse conditions
[07:41:50] *** Joins: Jong (~Jong@2620:10d:c090:400::5:f0a6)
[07:42:37] <aac> well...there is some affects after treatiment...so..i guess covid can infect well
[07:47:17] * highrate takes off his mask and blows on the channel
[07:48:43] <highrate> already taken the booster gonna take it again when available
[07:49:38] <dave0> i read israel were gonna give a 2nd booster
[07:50:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[07:50:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[07:52:37] *** Quits: oxfuxxx (~oxfuxxx@185.244.213.132) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[07:55:52] <highrate> srsly? how is israel ahead of the U.S?
[07:58:07] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:59:59] *** Joins: Guest84 (~Guest84@c-71-236-47-182.hsd1.tn.comcast.net)
[08:00:10] <Guest84> hello
[08:00:26] <pony> hi
[08:01:05] <Guest84> i got an extremely cryptic error message, and am at a loss for what to do with it https://pastebin.com/AwZckcH5
[08:01:15] <Guest84> what does this mean?
[08:01:34] <aac> how do i put my executable code? like i have a process, and want to execute my code
[08:01:42] <aac> where can i load my code?
[08:01:52] <fizzie> Guest84: Most likely that there was no declaration for `struct playbackInfo_t` outside the function prototype.
[08:02:10] <Guest84> fizzie: hmm, thanks. i'll take a look
[08:02:18] <aac> like i want to have code, executable from the file
[08:02:21] <fizzie> Guest84: That causes the `struct playbackInfo_t` in the parameter list to have function prototype scope, and be unrelated to the other `struct playbackInfo_t` used in the function definition.
[08:02:27] <aac> want to execute my own code
[08:02:47] <aac> ive read something abut return to libc
[08:02:54] <fizzie> Guest84: If it's that, the solution is to just add a standalone `struct playbackInfo_t;` declaration in the header file, before the function.
[08:03:51] <Guest84> yeah, it seems that that's not the case
[08:04:04] <Guest84> playbackInfo_t is defined in another file included before this declaration
[08:04:30] <Guest84> so that can't be it
[08:04:39] <fizzie> I'll believe that when I see it. :)
[08:04:56] <Guest84> fizzie: okay, hold up
[08:06:13] <Guest84> here is the header section
[08:06:31] <Guest84> playbackInfo_t is defined in playback.h, and the function prototype is defined in main.h
[08:06:34] <Guest84> https://pastebin.com/c3syPG9K
[08:06:58] <Guest84> oh wait
[08:07:00] <fizzie> That doesn't actually show what's in playback.h. And "main.h" is included _before_ it.
[08:07:07] <Guest84> i'm dumb
[08:07:37] <Guest84> well that's an hour waster
[08:07:37] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:09:36] <fizzie> Incidentally, it's a little odd to have a declaration for a `static` function in a header. Those have internal linkage and are local to the translation unit, so no other .c file (except the one that defines the function) can use it.
[08:10:42] <Guest84> i'm modifying someone else's source, and they decided that their header files should only contain the prototypes for the functions that need prototypes
[08:11:04] <Guest84> so I introduced an earlier-in-the-file dependency so I had to add it
[08:11:11] <Guest84> that's how I got into this mess in the first place
[08:12:36] *** Joins: kish` (~aqua@user/aqua)
[08:16:45] <wroathe> Slight O/T: Man I hate programming. I spent three hours today trying to figure out how I could emulate a feature of what I assumed was powershell scripting where you can provide a string username instead of a credentials object as a parameter and powershell will prompt you for the password (and then create the credentials object), but with a compiled module written in fsharp where I assumed I'd have to create
[08:16:51] <wroathe> some sort of implicit conversion from a string to a discriminated union and then write my own logic to do that prompting for a username only
[08:17:19] <wroathe> Turns out Powershell implicitly adds an attribute to that parameter that you can also use in compiled modules
[08:17:24] <wroathe> End O/T
[08:18:32] <pony> coding sucks
[08:18:39] <Deepspeed> haha good times
[08:18:46] <wroathe> Yeah, it's really awful
[08:18:53] <Deepspeed> But did you get paid for it?
[08:19:06] <wroathe> No, because this is a POC I'm doing of my own volition
[08:19:17] <Deepspeed> dang
[08:19:52] <wroathe> In a more engineering oriented company I could probably make a case for taking it on as a side project during work hours and being paid for it
[08:19:57] <wroathe> But this is not that company
[08:20:26] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 252 seconds)
[08:20:31] <wroathe> I'm working on vendor software that is written in ASP.NET, and this POC is me writing Powershell cmdlets in F# to keep myself sane.
[08:21:02] <wroathe> s/ASP.NET/C# using ASP.NET/
[08:21:16] <pony> is it true C# is better than Java?
[08:21:33] <wroathe> They're both cancer
[08:21:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Ping timeout: 240 seconds)
[08:21:39] <pony> lol
[08:21:46] <wroathe> But gun to my head C# is slightly less cancerous
[08:22:18] <Deepspeed> I didn't hate C#, but I didn't get extremely deep into it either.
[08:23:21] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[08:26:55] <aac> where can i get all the stdlib function from C (im searching for functions that dont have parameters, and print something)
[08:27:40] <aac> or do something thats visible
[08:33:33] <Guest84> you can't inspect the functions of the program that's running
[08:34:13] <Guest84> but #include <stdlib.h> and #include <stdio.h>
[08:34:42] <Guest84> aac: ^^
[08:36:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[08:36:41] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:36:46] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:37:05] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.3)
[08:37:07] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:37:25] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[08:43:08] *** Joins: nuxil (~nuxil@141.195.51.213)
[08:43:14] *** Parts: nuxil (~nuxil@141.195.51.213) ()
[08:44:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:44:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:44:44] *** Joins: wroathe (~wroathe@user/wroathe)
[08:49:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:49:49] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[08:50:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[08:52:29] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[08:52:30] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[08:57:49] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[08:59:07] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[09:01:36] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[09:03:36] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[09:03:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[09:04:17] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[09:04:37] *** Joins: Echoz (~chris@user/echoz)
[09:08:45] * highrate cracks #18 (beer)
[09:11:04] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[09:11:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:11:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:11:06] *** Joins: wroathe (~wroathe@user/wroathe)
[09:12:07] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 268 seconds)
[09:15:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:16:24] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[09:16:37] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:16:53] *** Joins: tejr (~tejr@user/tejr)
[09:17:20] *** Joins: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357)
[09:19:33] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[09:20:49] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:21:02] *** Joins: Enitin (~Enitin@37.80.148.79)
[09:24:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:27:09] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[09:29:49] *** Quits: Enitin (~Enitin@37.80.148.79) (Ping timeout: 240 seconds)
[09:30:15] *** Joins: Enitin (~Enitin@37.80.148.79)
[09:33:03] *** Joins: fcresende_ (~quassel@vps35015.publiccloud.com.br)
[09:33:12] *** Quits: fcresende (~quassel@vps35015.publiccloud.com.br) (Read error: Connection reset by peer)
[09:40:40] *** Quits: Jeaton (~hybrid@23.88.189.54) (Read error: Connection reset by peer)
[09:53:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:59:20] *** Quits: gco (~gco@2601:647:4c80:2424:adcf:788d:2425:1357) (Quit: ZZZzzz…)
[10:00:16] *** Quits: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (Quit: leaving)
[10:00:31] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 250 seconds)
[10:02:07] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[10:03:38] *** Quits: alch (~alch@bo-18-140-158.service.infuturo.it) (Read error: Connection reset by peer)
[10:06:05] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[10:07:22] *** Joins: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[10:07:37] *** Joins: alch (~alch@ca-18-223-223.service.infuturo.it)
[10:07:51] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[10:11:27] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:12:37] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[10:15:03] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:c83c:cf2b:7904:ebef) (Remote host closed the connection)
[10:17:35] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 252 seconds)
[10:32:21] *** Quits: Guest84 (~Guest84@c-71-236-47-182.hsd1.tn.comcast.net) (Quit: Connection closed)
[10:38:40] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:39:48] *** Joins: zlg (~zlg@user/zlg)
[10:48:23] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu) (Ping timeout: 252 seconds)
[10:53:37] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Ping timeout: 240 seconds)
[10:54:11] *** Parts: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Leaving)
[10:57:31] *** Joins: dsrt^ (~dsrt@207.5.21.20)
[10:58:05] *** Joins: easyme (~easyme@user/easyme)
[10:58:16] <easyme> Hello
[10:58:21] <easyme> Anyone there?
[10:58:47] <robyn> just ask your question
[10:58:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:58:57] <robyn> someone will be around who can answer
[10:59:17] <easyme> It is a c like program with a recursive function to print integer reversly. But it does not print the first integer. Here is the code: https://dpaste.com/BL6V8EVEL
[10:59:40] <trenka> it's not C
[11:03:04] <HisShadow_> easyme: start should be len when you return, len - 1 is the last element
[11:05:05] *** Joins: hexology (~hexology@user/hexology)
[11:06:04] *** Joins: analognoise (~analognoi@185.216.74.148)
[11:06:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.151) (Remote host closed the connection)
[11:09:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[11:11:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:11:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:11:53] *** Joins: wroathe (~wroathe@user/wroathe)
[11:11:56] <easyme> HisShadow_: if start is len when I return, it prints garbage value first.
[11:13:14] <nitrix> You should be able to determine what programming language the code is written in before you even attempt to fix it.
[11:13:36] <dave0> easyme: void print_arr(int arr[], int start, int len) { if(start == len) return; print_arr(arr, start + 1, len); cout << arr[start] << ' '; }
[11:14:41] <easyme> Can't we pass ++variable in recursive function as parameter?
[11:14:53] <dave0> sure
[11:15:07] <dave0> void print_arr(int arr[], int start, int len) { if(start == len) return; print_arr(arr, ++start, len); cout << arr[--start] << ' '; }
[11:15:52] <easyme> dave0: Thanks
[11:16:04] <dave0> no problem
[11:16:22] * nitrix chuckles.
[11:16:43] <easyme> :)
[11:16:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:17:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:17:33] *** Quits: rgrinberg (~textual@177.246.216.2) (Read error: Connection reset by peer)
[11:17:49] *** Joins: mahmutov (~mahmutov@5.176.40.51)
[11:19:15] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb)
[11:21:13] <nitrix> ,cc int arr[3] = {2,7,7}; for (size_t i = 0, count = sizeof arr / sizeof arr[0]; i < count; i++) { printf("%d", arr[i]); }
[11:21:16] <candide> nitrix: 277
[11:22:29] <dave0> printf("%d %d %d ", 2, 7, 7);   ;^)
[11:22:47] <nitrix> puts("277");
[11:22:54] <dave0> you win :-)
[11:23:20] <nitrix> I miss code golfing.
[11:23:43] <dave0> it's so 2021
[11:23:45] <dave0> :-p
[11:24:11] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.93)
[11:24:34] <nitrix> It who shall not be named. You're supposed to say 2020 season 3.
[11:25:12] <nitrix> Well that was season 2. New season 3 just begun.
[11:29:36] *** Joins: frost (~frost@user/frost)
[11:29:44] *** Joins: Hubert (~Hubert@176.167.41.83)
[11:31:15] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[11:31:45] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.93) (Remote host closed the connection)
[11:31:56] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[11:32:16] *** Quits: Hubert (~Hubert@176.167.41.83) (Client Quit)
[11:32:50] *** Parts: easyme (~easyme@user/easyme) ()
[11:33:16] *** Joins: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[11:34:39] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb) (Read error: Connection reset by peer)
[11:35:27] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb)
[11:38:45] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[11:46:24] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb) (Read error: Connection reset by peer)
[11:46:56] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[11:47:20] *** Joins: sebag (~guest@91.245.82.2)
[11:48:03] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb)
[11:51:49] *** Quits: mahmutov (~mahmutov@5.176.40.51) (Ping timeout: 240 seconds)
[11:53:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:53:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:53:12] *** Joins: wroathe (~wroathe@user/wroathe)
[11:54:53] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[11:57:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[11:57:59] *** Joins: bindu (~bindu@user/bindu)
[11:58:03] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:59:25] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[12:01:11] *** Joins: strajder (~strajder@user/strajder)
[12:01:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:04:14] *** Joins: aradesh (~aradesh@user/aradesh)
[12:04:41] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[12:04:44] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:09:13] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[12:11:04] *** Joins: tafa (~tafa@user/tafa)
[12:11:46] *** Joins: hubert_marcelin (~hubert_ma@176.167.41.83)
[12:11:53] *** Quits: analognoise (~analognoi@185.216.74.148) (Read error: Connection reset by peer)
[12:12:31] *** Joins: seninha (~seninha@user/seninha)
[12:13:27] *** Quits: pucara (~i@181.91.29.65) (Quit: Lost terminal)
[12:15:45] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[12:20:38] *** Joins: inomoz (~inomoz@176.59.118.12)
[12:25:27] <sham1> Printing the number 227 with ever reducing Kolmogorov complexity, shown in C
[12:26:28] *** Joins: sticky (~stickyhg@93.169.204.144)
[12:26:31] <sticky> .डदवबॆ...D.*I.^D.^    	  U>`S`>`@A   	.T`^r` A` i` n  	 &  	    s u` p. p l y   	  i  `s’< ` `i`  s    	 w i t h     .		W e--a   <P`  o  n s   	  l i k e  	 i t  	  d i d     	w i  t h	    	a  `l@  - q`  A@- e  `d `a  	  t o 		
[12:26:31] <sticky> 	j u s  t .i f y 			c r e a  t. i n g 	      	w < a  @r .s
[12:26:31] <sticky>  		 a m e r <i c a n  s 		n e e d e d  	     s o m e t h i n  g.   	  L i  k e  . 	9  /  	.11 	   t  o  	  	 J u s t @i f y      		i n @v A@  d i n g  -  	.	i r ,  a^  q		  		 	
[12:26:31] <sticky>      	
[12:26:31] <sticky>    		d  i  d     		C <]   I    ]a	    -   d] i d  		9  . 	^/  .	11^  		 o r  			i t 	 		j u s t 	   		l e  t   			 i t   			h a  p p e n   		 	
[12:26:31] <sticky> 	
[12:26:31] <sticky> .i f      a  l. Q  ‘a   e- d a   	d i d 		i t       	W  H  Y	   t o     	 k ,I .l -.l 	    9	 m i .L l i o n   			i `r -.a q.i .s
[12:26:31] *** ChanServ sets mode: +o candide
[12:26:32] *** candide sets mode: +b *!~stickyhg@93.*
[12:26:36] *** Quits: sticky (~stickyhg@93.169.204.144) (Excess Flood)
[12:28:01] *** candide sets mode: -b *!~stickyhg@93.*
[12:29:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:31:59] *** Joins: lleo (~lleo@83.232.63.41)
[12:34:30] <ozzz> whattf is ths
[12:35:07] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[12:36:42] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[12:36:45] <NRK[m]> ,report sticky posting nonsense
[12:36:45] <candide> sticky has been reported posting nonsense (report id 11221)
[12:36:57] <NRK[m]> thank you candide
[12:37:05] <candide> Think nothing of it, N​RK[m]
[12:37:30] *** Quits: hubert_marcelin (~hubert_ma@176.167.41.83) (Quit: Leaving)
[12:37:43] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (Quit: WeeChat 2.7.1)
[12:39:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:39:26] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:8c5b:cca6:c832:befb) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:43:19] *** Joins: mrig (~mrig@user/mrig)
[12:52:51] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (Ping timeout: 245 seconds)
[12:53:01] *** Joins: pr-asadi (~pr-asadi@2602:fccf:1:1150::)
[12:53:49] *** Quits: citrons (~citrons@alt.mondecitronne.com) (Ping timeout: 240 seconds)
[12:57:26] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:58:57] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[12:59:34] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:10:02] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 240 seconds)
[13:11:01] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[13:14:08] *** Joins: CoderCharmander (~CoderChar@2A001110022023E10000005E52520901.mobile.pool.telekom.hu)
[13:15:13] *** Quits: CoderCharmander (~CoderChar@2A001110022023E10000005E52520901.mobile.pool.telekom.hu) (Read error: Connection reset by peer)
[13:16:03] *** Joins: vysn (~vysn@user/vysn)
[13:16:12] *** Joins: CoderCharmander (~CoderChar@2A001110022023E10000005E52520901.mobile.pool.telekom.hu)
[13:19:27] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: bubblie doubblie)
[13:20:12] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:24:39] *** Joins: john99 (~john99@138.246.103.34.bc.googleusercontent.com)
[13:25:19] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[13:25:37] *** Joins: sebag (~guest@91.245.82.2)
[13:27:39] *** Quits: sebag (~guest@91.245.82.2) (Client Quit)
[13:27:57] *** Joins: sebag (~guest@91.245.82.2)
[13:29:32] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[13:30:28] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:31:09] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: btc donations: bc1qt3chy4rqtzjny2h7qt47cy7nmu6th9sr66wa02)
[13:31:26] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[13:33:46] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:34:47] *** Joins: hiovoltage (~hiovoltag@176.88.83.200)
[13:36:14] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:37:03] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[13:37:22] *** Joins: sebag (~guest@91.245.82.2)
[13:42:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:45:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[13:48:06] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[13:52:02] <sokan> Can someone help me understand this? https://bpa.st/NK3Q I don't get why b is 6 in the end. b = 3 after a = ++b. so b = a + b-- = 3 + (3-1) = 5.
[13:54:24] <caze> It's The value of b-- is 3, not 3 - 1.
[13:54:47] *** Joins: inlight (~inlight@user/inlight)
[13:56:06] *** Joins: ns12 (~ns12@user/ns12)
[13:56:23] *** Parts: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu) ()
[13:56:59] <NRK[m]> assigning and decrementing the same var on the same statement, is that even defined behavior?
[13:57:31] <shadowchaser> my compiler gives me: warning: multiple unsequenced modifications to 'b'
[13:57:52] <caze> Oh, good catch.
[13:59:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:59:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:00:23] <NRK[m]> ,cc int b = 5; b = --b; printf("%d\n", b);
[14:00:26] <candide> NRK[m]: [warning: operation on 'b' may be undefined [-Wsequence-point]] 4
[14:00:48] <NRK[m]> sokan: ^ see this
[14:01:14] *** Joins: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu)
[14:01:45] <caze> That's a bit advanced - he's already expecting the wrong result from the operation.
[14:02:28] <caze> sokan: int b = 1; what is the value of the expression b-- ?
[14:03:22] *** Quits: alch (~alch@ca-18-223-223.service.infuturo.it) (Read error: Connection reset by peer)
[14:03:43] *** Joins: bebyx (~Thunderbi@user/bebyx)
[14:03:45] <sokan> caze: 0
[14:04:09] <caze> sokan: Wrong.
[14:04:18] <sokan> o.O
[14:04:22] <NRK[m]> ,cc int b = 1; printf("%d\n", b--);
[14:04:24] <NRK[m]> observe
[14:04:25] <candide> NRK[m]: 1
[14:04:26] <dave0> sokan: it evaluates to the value of b before the decrement
[14:04:31] <caze> sokan: You answered as if I had asked you what value is stored in b.
[14:04:46] <NRK[m]> now observe again.
[14:04:47] <caze> sokan: But I asked for the value of the expression.
[14:04:54] <NRK[m]> ,cc int b = 1; printf("%d\n", b--); printf("%d\n", b);
[14:04:57] <candide> NRK[m]: 1 0
[14:05:04] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[14:05:04] <caze> sokan: Let me ask another question that will solidify the difference.
[14:05:16] <caze> sokan: int b = 0; What is the value of the expression b + 1?
[14:05:17] <sokan> aaaaa
[14:05:22] <caze> sokan: What is the value stored in b?
[14:05:49] <sokan> the value of the expression b + 1 = 1
[14:05:57] <sokan> value stored in b = 0
[14:06:00] <caze> Yes.
[14:06:28] <caze> With int b = 1;, the value of the expression b-- is 1, the value stored in b is 0.
[14:06:37] <sokan> NRK[m]: actually that was a good example. I'm starting to understand I think
[14:07:18] <sokan> caze: b-- = b - 1?
[14:07:22] <sokan> right?
[14:08:01] <caze> sokan: No, because b-- does two things: the expression has a value in itself, but it also has the side effect of updating the stored value in b.
[14:08:02] *** Joins: alch (~alch@pa-18-176-80.service.infuturo.it)
[14:08:17] <caze> The expression b - 1 only has a value; it does not change the value stored in b.
[14:08:34] <strajder> ,cc int b = 1; printf("%d\n", --b);
[14:08:37] <candide> strajder: 0
[14:08:41] <strajder> ^ also
[14:08:44] <sokan> yeah I get it.
[14:09:10] <NRK[m]> think of it like this `printf("%d\n", b--);` means `printf("%d\n", b); b = b - 1;`
[14:09:23] <sokan> so if b =1, b-- changes the value of b, to b=0 but the expression itself (b--) is 1.
[14:09:42] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[14:10:12] <NRK[m]> yes, basically
[14:10:21] <caze> The thing to understand is that b - 1 is a type of expression that might not have the same value as the value stored in the object used in the expression -- b.
[14:10:23] <strajder> in b = --b, assignment is superfluous in addition to being undefined
[14:10:32] <caze> The thing to understand is that b-- is a type of expression that might not have the same value as the value stored in the object used in the expression -- b.
[14:10:33] <strajder> --b already changes b
[14:11:08] <caze> And for some reason, people keep bringing up these UB examples.
[14:11:15] <sokan> UB?
[14:11:21] <caze> Undefined behavior.
[14:12:04] <NRK[m]> it means the C standard doesn't define what will happen. so compilers can/will produce unpredictable results.
[14:12:44] <sokan> b-- => b=b and THEN b is decreased by 1. --b, b is decreased by 1 and THEN assigned to b with the new value.
[14:13:19] <dave0> sokan: if you're reading some code it's handy to know these rules, but i'd be careful in writing your own code that way.. try to keep it simple.. you'll see it a lot like   for(a = 0; a < 10; a++)   but be wary of "clever" expressions like a = b++; it's terse but tricky
[14:13:25] <caze> It's not really useful to think of it that way imo.
[14:13:50] <caze> It's more useful to think of it as two parallel things happening.
[14:14:08] <caze> There's the value stored in the object, and then there's the value of the expression itself.
[14:14:25] <rcf> Though to be fair that's every operation between sequence points
[14:14:38] <sokan> caze, dave0 I'm reading for a course, and our prof for example has us calculate a, b, c and d on this example: https://upload.vaa.red/24V4xG#3ac5d219beb1e12d3703ba4993129ab3
[14:14:39] <candide> Title of sokan's link: upload vaa – client-side encrypted file upload
[14:14:54] *** Joins: plastico (~plastico@neomutt/plastico)
[14:15:06] <caze> If you wrote a function to do predecrement, it could look like: int postdec(int *x) { *x -= 1; return *x + 1; }
[14:15:20] <Learath2> sokan: can you spot the UB?
[14:15:25] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:15:26] <caze> Where the object is modified *first*.
[14:15:26] <dave0> sokan: this code counts as "tricky" :-)
[14:15:46] <Learath2> I see this kind of silly example from professors all the time, thinking they are being clever
[14:15:46] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[14:15:49] <strajder> there's a real-world example: while (*copy++ = *source++);
[14:15:53] <caze> But as long as the correct value is returned, it doesn't matter whether the object is modified before or after.
[14:16:10] <NRK[m]> sokan: that's code that your professor wrote?
[14:16:35] <dave0> it's probably trying to teach a point
[14:16:42] <NRK[m]> hopefully
[14:16:50] <rcf> Questionable code is useful in teaching examples.
[14:16:51] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Quit: zzz)
[14:17:07] *** Quits: strajder (~strajder@user/strajder) (Quit: gtg)
[14:17:11] <Learath2> I'll bet you 100$ that he doesn't think it's UB and this example would only be valid in the context of demonstrating UB due to sequence points
[14:17:16] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[14:17:31] <sokan> He's trying to make us understand a++ and --b etc. And to understand pointes he used this: https://upload.vaa.red/kLR8R#56146d06700687c0c11b549fa805e0ee
[14:17:33] <candide> Title of sokan's link: upload vaa – client-side encrypted file upload
[14:17:40] <sokan> Learath2: that's UB? o.O
[14:17:44] <rcf> Learath2: that is actually the context where I've seen these sorts of examples before, to be fair.
[14:17:57] <rcf> Perhaps I need to watch bad lecturers more often.
[14:17:59] <Learath2> I tutor a couple people and I saw similar questions in their exams even
[14:18:19] <NRK[m]> sokan: did he say anything about why that code is "wrong"?
[14:18:42] <NRK[m]> the first one you posted.
[14:18:46] <sokan> NRK[m]: I had no idea that this code was "wrong"
[14:19:27] <sokan> caze: thanks for clarifying the whole thing. It's quite important that I understood "value stored in object" and "value of expression"
[14:19:46] <caze> Seems like an improbably advanced topic, given that it's presumably meant to teach the principles of ++ and --.
[14:19:47] <NRK[m]> the `b=a+b--` is undefined behavior
[14:20:09] <dave0> sokan: are there other examples that resemble this? we can tell you the error and why, but if this is the only example you won't learn if we just give you the answer
[14:20:25] <rcf> Learath2: fortunately I've seen examples on exams of this sort of code where people complained about it being a trick question because it was in the context of "here is something you probably thing works... and here are the ways that fails in reality"
[14:20:36] <dave0> too late :-p
[14:21:04] <sokan> dave0: not really no. It was the only exmple he used and then we went on logical operators and loops
[14:21:12] <rcf> But never where "HERE IS THIS AMAZING CLEVER OPTIMIZATION YOU COULD TRY"
[14:21:13] <NRK[m]> oof.
[14:21:17] <sham1> a-- - --a
[14:21:18] <Learath2> rcf: The exams I saw it in usually asked the final value of a, b, c and d, and the only valid answer there would be "no one knows"
[14:21:24] <rcf> Indeed.
[14:21:29] <sokan> Learath2: lol
[14:22:05] <pony> so it's pretty common for C exams to ask questions for which the "right" answer is actually wrong
[14:22:05] <pony> great
[14:22:26] * sokan sighs.
[14:22:34] <NRK[m]> sokan: anyways, don't increment/decrement and use that same variable in the same statement as a rule of thumb.
[14:22:34] <rcf> pony: for C, this is actually sensible, because it is very common for compilers to accept the "right" answer and produce the wrong result.
[14:22:37] <sokan> We ain't learning how to think code dam it...
[14:22:59] <caze> sokan: Do you know what sequence points are?
[14:23:02] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[14:23:12] <sokan> NRK[m]: so the fact that gcc actually manages to assigns b the right value of kinda of a chance thing.
[14:23:12] <pony> I don't think that's sensible
[14:23:17] <sokan> caze: no idea :\
[14:23:21] <Learath2> I advice the people I teach to if they spot this answer it as if there is a sequence point for assignment
[14:23:25] <NRK[m]> probably not, since he's just learning prefix/postfix
[14:23:29] <rcf> pony: C is not a sensible language to begin with, basically.
[14:23:34] <caze> sokan: Sequence points are C's idea of the flow of time.
[14:23:34] <rcf> If you're going to learn it, you must be ready.
[14:24:01] <pony> ready for what?
[14:24:29] <caze> sokan: You have boundaries, where once you cross the boundary, you are guaranteed that a previos sequence of operations has completed.
[14:24:30] <rcf> Encountering all the weird instances of undefined behavior that appear to work but are actually incorrect and will lead to bugs.
[14:24:30] <NRK[m]> sokan: it's undefined behavior. so yeah, what happens can change between different compilers and even different version of the same compiler.
[14:24:36] <NRK[m]> since C standard doesn't define it.
[14:25:15] <pony> does K&R2 cover sequence points?
[14:25:16] <caze> sokan: The problem with this example is that b is both read and modified within the same sequence points.
[14:25:46] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[14:25:47] <caze> sokan: And when that happens, you have no guarantee which happens first, the read, or the write.
[14:25:55] <sokan> Now I get it
[14:26:42] *** candide sets mode: -o candide
[14:26:55] <NRK[m]> pony: it may have in the pre/postfix operator section, don't remember though.
[14:26:58] <sokan> because b-- is an operation and assigns b a value, while at the same time, we're assigning b a value that includes b--
[14:27:09] <Learath2> Professors who teach C but don't actually know it all seem to think there are sequence points everywhere. So evaulate their expressions as if the right side of an assignment is evaluated first, then instead of using rules of C, evaluate their expressions as if you are a math person
[14:27:10] <caze> sokan: Now with the assignment operator, the sequence point is after the left and right operand are read, and before the left operand is updated.
[14:27:25] *** rkta_ is now known as rkta
[14:27:45] <pony> Learath2: lol
[14:27:51] <caze> But there is no sequence point between the read of the left and the right operand, so the two reads could happen in any order.
[14:28:49] <sokan> Learath2: that's actually how I had it in mind XD
[14:29:02] <caze> With the expression a = a++; the lh expression `a` is read, the rh expression `a++` is read, but that expression has the side effect of updating the stored value in a.
[14:29:13] <sokan> but I was never taught what caze explains now
[14:29:29] <pony> lvalues are read?
[14:29:34] <pony> I guess they have to be yeah
[14:29:37] <caze> So if the rh expression is read first before the lh expression, then you have a problem.
[14:29:37] <pony> because of *p = ...
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:25] <NRK[m]> sokan: also if your professor unironically worte that code without explaining why `b=a+b--;` is UB then you should take whatever he says very lightly and pick up some other source for learning C.
[14:30:38] <caze> pony: Assignment operators work thusly: Each operand is read (in either order, or even interleaved), there is a sequence point, and then the value in the location denoted by the lhs is updated.
[14:31:06] *** Joins: csrf (~csrf@user/csrf)
[14:31:17] <caze> pony: Even just a[i] = 3;
[14:31:18] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:31:29] <caze> Because a[i] is really *(a + i)
[14:31:42] <Learath2> (fwiw from all my friends and "students" that took a C course, not one of them even heard of sequence points, most professors just seem to treat C as a crutch to prevent students from skipping data structures)
[14:32:09] *** Quits: CoderCharmander (~CoderChar@2A001110022023E10000005E52520901.mobile.pool.telekom.hu) (Ping timeout: 268 seconds)
[14:32:10] <pony> yeah
[14:32:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:32:52] <pony> so I have to learn real C and professor C
[14:33:10] <sokan> NRK[m]: I'm only going to do enough to pass the exam really. I've just given up on learning C from him. I'll instead read King's book on C
[14:33:11] <Learath2> Not really, if you learn real C you can just tell them they are wrong :P
[14:33:59] <pony> I was in a C class last year in which the prof said "you must always cast the result of malloc"
[14:34:02] <caze> If you have the energy.
[14:34:23] <Learath2> C++ andy trying to hide amongst us
[14:34:52] <pony> I withdrew early on though, for medical reasons
[14:34:55] <sokan> anyway. I did understand b-- anb --b. So thanks for that people :)
[14:35:01] <pony> so didn't get to see all the wrong things
[14:35:02] <caze> Try to use `new` as an identifier as much as possible.
[14:35:10] <Learath2> My professor was fairly good with C, atleast no absurd UB like this, but he was very adamant that signed integer overflow was defined
[14:35:15] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 256 seconds)
[14:35:27] <pony> wtf
[14:35:36] <pony> where do these people learn C
[14:35:38] *** Joins: kts (~kts@103.73.237.188)
[14:35:49] <Learath2> Idk he was so convinced, it's like one of the first examples of UB anyone is told about
[14:36:39] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[14:37:53] *** Joins: kish` (~aqua@user/aqua)
[14:38:35] <pony> is Effective C a good 2nd C book?
[14:41:01] <caze> https://ideone.com/yY4KTr
[14:41:55] <Learath2> I like it, it is fairly thorough, concise and accurate where it needs to be but not so accurate that you are overwhelmed
[14:42:01] <sokan> ,cc int a = 1, printf("%d", a++)
[14:42:03] <rcf> pony: trial and error
[14:42:03] <candide> sokan: error: expected declaration specifiers or '...' before string constant
[14:42:16] <rcf> muh semicolon
[14:42:33] <sokan> ,cc int a = 1; printf("%d", a++);
[14:42:36] <candide> sokan: 1
[14:42:41] <sokan> I see
[14:42:52] <sokan> ,cc int a = 1; printf("%d", ++a);
[14:42:54] <candide> sokan: 2
[14:43:25] <caze> ,cc -w int a = 0; printf("%d %d %d %d", a, a++, a, a++);
[14:43:28] <candide> caze: 2 1 2 0
[14:43:46] <Learath2> That is a beautiful example
[14:43:55] <NRK[m]> Learath2: probably because signed overflow works the same on most platforms
[14:44:19] <rcf> Or at least it used to
[14:44:20] <sokan> what's -2?
[14:44:23] <sokan> -w*
[14:44:36] <NRK[m]> that's just to silence compiler warning
[14:44:41] <Learath2> NRK[m]: surely, but doesn't make it any less UB and definitely won't stop the compiler from doing freak optimizations
[14:45:01] <NRK[m]> because what he did was Undefined Behavior
[14:45:06] <sokan> candide: but you start with a = 0. Why does it print it as 2?
[14:45:16] <sokan> it's UB?
[14:45:16] <rcf> Though to be clear you don't get a compiler warning for undefined behavior in all cases.
[14:45:18] <candide> I start with a ? Takes one to know one!
[14:45:26] <Learath2> sokan: There are no sequence points between the evaluation of the arguments of a function
[14:45:32] <NRK[m]> sokan: she's a bot
[14:45:42] <NRK[m]> ,cc int a = 0; printf("%d %d %d %d", a, a++, a, a++);
[14:45:44] <candide> NRK[m]: [warning: operation on 'a' may be undefined [-Wsequence-point]  warning: operation on 'a' may be undefined [-Wsequence-point]  warning: operation on 'a' may be undefined [-Wsequence-point]] 2 1 2 0
[14:45:50] <sokan> lol NRK[m] I wanted to refer to caze  XD
[14:46:29] <sokan> so practically C is "going cazy" because it doesn't know what to do with a first and last
[14:46:34] <sokan> I got it.
[14:47:02] <NRK[m]> if all you're trying to do is pass exam, then try always compile with proper warning flags so the compiler catches some obvious mistakes at the very least.
[14:47:23] *** Joins: uninstance (~uninstanc@92.245.31.224)
[14:47:25] <rcf> sokan: undefined behavior is slightly more fun than that, though. Not only is that operation no longer required to behave sensibly, but the rest of the program may do whatever it pleases as well.
[14:47:27] <sokan> Right now I'm trying to learn and understand that very small bit.
[14:47:36] <pony> rcf: permanent error?
[14:47:49] <Learath2> Always do -Wall -Wextra, it's not 2004 anymore, compilers have gotten very good, false positives aren't as prevalent as before
[14:48:03] <NRK[m]> sokan: `-std=c11 -Wall -Wextra -Wpedantic -Wpointer-arith -Wwrite-strings` these should be enough.
[14:48:17] <Learath2> We even have -Werror on a fairly sizable project and only have to silence 1-2 false positive warnings
[14:48:26] <caze> sokan: Yes, it's UB. Also a good example of how UB can manifest in nonsensical ways.
[14:48:28] <NRK[m]> change -std= if needed
[14:49:17] <Learath2> sokan: To illustrate the absurdity of UB people usually joke that as soon as you invoke UB the program could launch nukes
[14:49:24] <caze> sokan: With that particular example, sometimes people try to reason that on a particular architecture, arguments are evaluated from left to right, or right to left.
[14:49:33] <caze> sokan: That examples follow neither.
[14:49:49] <Learath2> There was one joke version of gcc which would launch nethack when you invoked UB, which is afaik still compliant :D
[14:50:01] <rcf> Indeed it is.
[14:50:40] <sokan> lol
[14:50:57] <sham1> Nasal demons
[14:51:46] <NRK[m]> Learath2: i'd avoid -Werror on release tarball and such though https://flameeyes.blog/2009/02/25/future-proof-your-code-dont-use-werror/
[14:51:47] <caze> With right to left, you would expect an output of 2 1 1 0, and with left to right, you would expect 0 0 1 1
[14:52:10] <caze> But the actual output is neither, so there goes that theory.
[14:57:21] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[15:02:59] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:03:01] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[15:05:15] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[15:09:09] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:10:11] *** Joins: Radionova327 (~TStaley@097-070-031-249.res.spectrum.com)
[15:11:13] *** Joins: megaTherion (~therion@unix.io)
[15:13:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:15:04] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[15:16:07] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:17:47] *** Quits: haniaF (~haniaF@83.24.188.64.ipv4.supernova.orange.pl) (Ping timeout: 268 seconds)
[15:17:53] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[15:17:55] *** Joins: mrig (~mrig@user/mrig)
[15:18:25] *** Joins: diiirt (~diiirt@user/diiirt)
[15:19:00] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[15:21:14] <sokan> https://bpa.st/KWWQ <--- if(x%2) works because the condition for if is true means that x % 2 == 1 since 1 is true in C?
[15:21:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[15:21:47] *** Joins: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[15:22:48] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:23:36] <sham1> Yes. If X is odd, x % 2 evaluates to 1 and since it's non-zero, it's true
[15:23:39] *** Joins: slidercrank (~slidercra@user/slidercrank)
[15:24:16] <sokan> It could also be written as if(x % 2 != 0) right?
[15:24:26] <sham1> Yes
[15:24:51] *** Joins: plastico (~plastico@neomutt/plastico)
[15:24:51] <sham1> And I'd say that this second version is clearer due to semantics
[15:25:48] <sokan> tbh, I think that --b (for non advanced coders) should be written as b-1 = b preferably too
[15:25:56] <sokan> but oh well
[15:26:52] <sham1> Well yes, often times you don't want pre- or post-increments because they can make the code unclear
[15:27:06] <sham1> Usually one would use them for known idioms like in for-loops
[15:34:06] <Learath2> um, --b isn't b-1 = b tho
[15:34:59] <sokan> Oh dear god...
[15:35:17] <sokan> --b is the expression b-1 no?
[15:35:23] <pony> nope
[15:35:27] * sokan facepalms
[15:35:39] <sham1> (b = b - 1, b) is the closest analogue
[15:35:46] <sham1> Note the comma operator
[15:35:59] <Learath2> (b -= 1) is prettier
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:12] <sham1> And even then that's not really it either
[15:36:13] *** Joins: john9980 (~john99@2.246.103.34.bc.googleusercontent.com)
[15:36:24] <sokan> and b-- (b, b = b - 1);
[15:36:27] <sokan> ?
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:38] <sham1> No
[15:36:56] <sokan> I'm doomed... I can't even figure out the basics :\
[15:37:10] <sham1> You'd need to somehow delay the b -= 1 until the next sequence point
[15:37:37] <dave0> sokan: void foo(int x) { printf("%d ", x);    foo(--b)  is nearly  foo(b-1); b=b-1;
[15:37:48] <Learath2> I thought you had it down tho, what happened in the 10 minutes I went away to make tea? :D
[15:37:51] <dave0> forgot the closing }
[15:38:09] <sokan> Learath2: I didn't have it well understood as it seems
[15:38:20] <pony> bedtime dave0
[15:38:27] <sokan> the most important thing to grasp in this thing is actually sequence points
[15:38:50] <dave0> sokan: foo(--b);  <=>  foo(b-1);b=b-1;    foo(++b);  <=>  foo(b+1);b=b+1;    foo(b--); <=> foo(b);b=b-1;    foo(b++); <=> foo(b);b=b+1;
[15:39:05] <dave0> sokan: they are nearly the same
[15:39:09] *** Quits: john99 (~john99@138.246.103.34.bc.googleusercontent.com) (Ping timeout: 256 seconds)
[15:39:25] <dave0> anyways, that's all the cases
[15:40:01] <sokan> --b: b is decreased by 1 and then b = b-1.
[15:40:17] <dave0> foo() just prints the number
[15:40:32] <Learath2> what do you mean "and then"?
[15:40:39] <dave0> it's any old function or part of an expression... i just used it cos it was short
[15:40:45] <sokan> Learath2: next sequence point
[15:41:00] <Learath2> No --b decrements as soon as it's evaluated
[15:41:13] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[15:41:36] <Learath2> So you get the decremented value, when it's evaluated. b-- on the other hand evaluates to the old value and at the next sequence point b is decremented
[15:41:47] <dave0> sokan: i listed all the cases..  --b  ++b  b--  b++
[15:42:10] <sokan> dave0: yeah. I saw it thanks :)
[15:42:16] <sokan> will keep a note of it
[15:42:43] <sokan> Just to make it clear for me: evaluate is to assign a value right?
[15:42:50] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:43:08] <sebag> Do you know some "modern C" techniques worth recommending?
[15:43:41] <Wulf> sebag: asan
[15:43:45] <Learath2> sokan: "assign" is really not a good word for this. An expression is evaluated to get it's value, but nothing is really assigned per se
[15:43:48] <sham1> ,cc int a = 0; printf("%d\n", a+++++a); printf("%d", a); // just out of curiosity
[15:43:50] <candide> sham1: error: lvalue required as increment operand
[15:44:05] <Learath2> s/it's/its/
[15:44:09] <sebag> Wulf: ok, googling
[15:44:14] <sham1> Well, I'm glad that this isn't possible
[15:44:20] *** Joins: earnestly (~earnest@user/earnestly)
[15:45:08] <sham1> ,cc int a = 0; printf("%d\n", (a++)+(++a)); printf("%d", a); // just out of curiosity
[15:45:11] <candide> sham1: [warning: operation on 'a' may be undefined [-Wsequence-point]] 2 2
[15:45:17] <sham1> Neat
[15:45:23] <sebag> Wulf: it seems to be a C++ technique, not C?
[15:45:25] <Wulf> ,cc int a = 0; printf("%d\n", a+++ ++a); printf("%d", a);
[15:45:28] <candide> Wulf: Same output.
[15:46:00] <Learath2> sebag: It's technically a compiler thing, can be used both for C and C++ code
[15:46:15] <Wulf> ,cc int o = 0; printf("%d\n", o--+--o); printf("%d", o);
[15:46:18] <candide> Wulf: [warning: operation on 'o' may be undefined [-Wsequence-point]] -2 -2
[15:46:41] <Learath2> Actually not only C and C++ but I think Rust also can link to libasan
[15:46:42] <dave0> it nearly looks like a drone
[15:46:47] <dave0> o--+--o
[15:46:48] <pony> lol
[15:47:06] <dave0> or "killbot"
[15:47:14] <pony> ,cc int i = 0; printf("%d\n", i +++++ i);
[15:47:15] <candide> pony: error: lvalue required as increment operand
[15:47:31] <pony> idgi
[15:47:32] <sokan> Learath2: x = 1 means to assign x the value of 1. That is not correct? Or rather this is bad wording?
[15:47:47] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[15:47:59] <Learath2> This one is correct
[15:48:00] <sham1> And we can't forget about the slide, while(i --> 0)
[15:48:04] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (Quit: ZNC 1.8.2 - https://znc.in)
[15:48:30] *** Joins: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk)
[15:48:37] <pony> why doesn't +++++ work?
[15:49:06] <sham1> Because that probably gets parsed as (a++)++ + a
[15:49:13] <pony> ahh
[15:49:15] <dave0> pony: the parser is greedy, which means it tries to get the longer token as possible.. that is ++ ++ +
[15:49:21] <pony> nice
[15:49:23] *** Joins: mahmutov (~mahmutov@5.176.40.51)
[15:49:28] <Wulf> +(++(++a))
[15:49:30] *** Joins: Klinda (~superleag@user/klinda)
[15:49:33] <Learath2> ,paren a+++++a
[15:49:34] <candide> Learath2: ((a++)++) + a
[15:49:39] <Wulf> huh.
[15:49:40] <pony> nice
[15:49:42] <sham1> I was right!
[15:50:14] <Wulf> ah, postfix before prefix.
[15:50:26] <sokan> Learath2: during --b (++b etc) there is no assignment of values?
[15:50:41] <sokan> it's only evaluations and in/decrements?
[15:50:53] <pony> = is assignment
[15:51:09] <sham1> Unfortunately
[15:52:01] <Learath2> Okay, I'm not sure how best to talk about this. If we are being rigorous -- and ++ indeed are not assignment operators so there is no assignment there
[15:52:08] <dave0> sokan: there are more but it's rarer that ++ and --
[15:52:33] *** Joins: terminalpusher (~terminalp@2a01:586:8db1:1:5f76:20cc:55c7:b3a0)
[15:52:44] <dave0> sokan: equals `=` itself, and the compound things  += -= *= /= something something
[15:53:01] <sham1> -- and ++ (pre versions) aren't assignment operations, but that's pretty muxh effectively what they do
[15:53:03] <sokan> I never EVER imagined that ++ and -- would be some mindbongling S:
[15:53:06] <dave0> sokan: ++b is nearly the same as b+=1
[15:53:22] <sham1> It's subtle, but yeah
[15:54:33] <Learath2> I think where most people start getting confused is that these are expressions that are used for both their value and their side effect
[15:54:34] <dave0> sokan:   a = ++b    is nearly like  a = (b+=1)
[15:54:50] <dave0> sokan: but it's terrible style
[15:56:03] <Learath2> When evaluating the expression `a++` you get the value of a before the increment, when evaluating `++a` you get the value of a after the increment. Either way an increment happens
[15:56:09] <sokan> ++ -- etc are operators per say.
[15:56:11] <Learath2> Maybe that is easier to follow? ^^
[15:56:46] <sokan> yes it is
[15:57:25] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[15:58:02] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu)
[15:58:04] <sham1> This is why I'd just go ahead and ban pre-increments and post-increments in most places
[15:58:04] <sokan> there is no assignment. There is increment, decrement on a specific variable. The in/de crement happens before or after the variable. There is no assignment. Only a change of value.
[15:58:15] <sokan> sham1++
[15:58:18] <Learath2> The only problem with that explanation is that it doesn't really help you make sense of what is going wrong when you do something like b = b++;
[15:59:02] <sokan> Learath2: from what I understand now is that we assign a value on b, which value is being changed due to b++
[15:59:11] <sokan> so the program kinda gets confused what to do first and seconf.
[15:59:15] <sokan> second*
[15:59:17] *** Joins: fe23 (~fe23@2409:8a34:464:4990:d168:83cb:8c12:3c33)
[15:59:30] <sokan> because increment of value and assignment happen in parallel the way it's written
[15:59:49] * sokan fingers crossed he _finally_ got it right
[16:00:19] <sebag> Learath2: I get following error from configure script, there is LIBS="-lasan" passed to configure...: ASan runtime does not come first in initial library list; you should either link runtime to your application or manually preload it with LD_PRELOAD.
[16:00:39] <sham1> Don't do it like that
[16:00:55] <sham1> -fsanitize=address to cflags and ldflags
[16:00:57] *** Quits: sebag (~guest@91.245.82.2) (Quit: WeeChat 3.1)
[16:00:59] <Learath2> ^^
[16:01:41] *** Joins: sebag (~guest@91.245.82.2)
[16:02:10] *** Quits: lleo (~lleo@83.232.63.41) (Remote host closed the connection)
[16:02:32] <sebag> sham1: ahso
[16:04:35] <Learath2> sokan: that's a decent way of putting it, so you do seem to understand what goes wrong \o/
[16:04:57] <sokan> AMEN!!!
[16:05:16] <sokan> I'm amazed by all your patience with n00bs like me
[16:05:52] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[16:07:43] <sebag> sham1: without -lasan I get no change - the same error appears
[16:08:06] <sebag> shachaf: -fsanitize=address is passed to both link and cc
[16:08:29] <sham1> That's odd
[16:08:33] *** Joins: pert (~pert@fsf/member/pert)
[16:10:05] <Learath2> sokan: if you want to be more accurate with your description it's that between two sequence points b is being modified twice, this is explicitly defined to be UB by the standard
[16:10:26] *** Joins: PamiPetteri (~pamipette@user/pamipetteri)
[16:10:47] <Learath2> it's really not an easy read but the relevant paragraph is here if you want to check it out: ,{c99 6.5p2}
[16:10:49] <candide> http://www.iso-9899.info/n1256.html#6.5p2 [Expressions] Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression.72) Furthermore, the prior value shall be read only to determine the value to be stored.73) FOOTNOTE.72 A floating-point status flag is not an object and can be set more than once within an expression. FOOTNOTE.7... <truncated; https://0x0.st/oslE.txt>
[16:11:45] *** Joins: NEYi (~NEYi@109.251.216.38)
[16:12:43] <sokan> i = ++i + 1; <--- I now see why this is UB. i is incremented twice within the same expression (or better between 2 sequence points, i.e. 2 times in one click of a time :P)
[16:13:53] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[16:14:53] <dave0> it's a c-ism .. i hope there are better languages that just does it left to right
[16:15:06] <sokan> python for sure :P
[16:15:08] <sham1> Java has left-to-right evaluation
[16:16:02] <sham1> I know that C++ does the C thing for compatibility
[16:16:06] <Learath2> I wonder if we can quote footnotes too ,{c99 FOOTNOTE.82}
[16:16:06] <candide> http://www.iso-9899.info/n1256.html#FOOTNOTE.82 If the member used to access the contents of a union object is not the same as the member last used to store a value in the object, the appropriate part of the object representation of the value is reinterpreted as an object representation in the new type as described in 6.2.6 (a process sometimes called "type punning"). This might be a trap representation.
[16:16:06] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:16:21] <Learath2> Revolutionary
[16:16:44] <pony> nice
[16:18:23] *** Quits: Deepspeed (~yep@124.sub-174-215-151.myvzw.com) (Ping timeout: 256 seconds)
[16:19:18] <sokan> Are there good practices of space, where to put curly brackets in C?
[16:19:37] <sokan> / in/, etc in
[16:20:24] <sham1> ,cc union { bool b; uint8_t i; } u = { .i=2, }; printf("%u\n", u.b); // Speaking of trap representations
[16:20:27] <candide> sham1:  runtime error: load of value 2, which is not a valid value for type '_Bool' 0
[16:21:41] <dave0> sokan: completely up to you ... the usual advice is if it's your code "pick something you like" and if it's collaborating on some project, "use what the project uses"
[16:21:59] *** Joins: eroux (~eroux@102-65-85-112.ftth.web.africa)
[16:22:28] <sham1> There are multiple best practices, some better than others: https://en.m.wikipedia.org/wiki/Indentation_style#Styles
[16:22:36] <sham1> It quickly devolves into holy wat
[16:22:38] <sham1> Wat
[16:22:43] <sham1> War
[16:22:55] <pony> hey
[16:23:00] <pony> Wiki's look changed
[16:23:05] <pony> oh
[16:23:06] <pony> m
[16:23:12] <sokan> been through wars (vim, emacs, gnu, kde, distos): they're pointless really :P
[16:23:17] *** Joins: duuude (~user@user/duuude)
[16:23:44] <koollman> just make everyone 'happy', combine tab and space in equal amount ;)
[16:24:29] <sham1> I'm personally partial towards the Linux style and other K&R stuff, although I've also used the BSD style over the years
[16:25:21] <sham1> It's actually interesting that it's called BSD style even though IIRC all the major BSDs use some variation of the Kernel Normal Form which is pretty similar to K&R
[16:26:22] <dave0> sokan: you're gonna have to read it, so pick something nice :-)
[16:27:28] <sham1> You can pick anything as long as it's not the GNU style because that is hideous
[16:27:39] <dan_pena> is there a tool to align stuff in C code to make it clearer ? like aligning '=' with multiple lignes of affecation and so on? I see that in the kernel code Linus does it but I can't find how? I tried to use his .clang-format but it doesn't do the same result
[16:27:59] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[16:29:39] <sokan> sham1, dave0 I'll go with linux for now I think. It's clean and easily read. GNU is the most anti-goodlooks thing that ever came out of history
[16:30:03] <sokan> or K & R
[16:30:14] *** kish` is now known as SmrtZapad
[16:31:25] *** Quits: eroux (~eroux@102-65-85-112.ftth.web.africa) (Ping timeout: 256 seconds)
[16:31:46] <sham1> I mean, there's also the lisp style, which works with Lisps, but with C islt just looks odd
[16:32:33] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:33:28] <markand> k&r is probably the most popular among C and C++ I think
[16:33:55] <nomagno> K&R isn't a lot of content though.
[16:34:07] <nomagno> useful content for sure, but not a lot of content
[16:34:10] <sham1> I thought that Allman is the most popular style
[16:34:16] <markand> more in java I think
[16:34:19] <nomagno> Oh the style
[16:34:20] <nomagno> Yeah
[16:34:22] <dave0> irc style
[16:34:39] <sham1> Java tends to use K&R
[16:35:00] <sham1> Well, braces are on the same line as the method name and such, but yeah
[16:36:08] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[16:37:31] <Learath2> I use a very controversial style just to annoy people, it's a play on the linux kernel style, but no space before parens and no cuddled else
[16:37:48] <Learath2> no space before parens makes me get into heated arguments every other day, it's fantastic
[16:37:58] <sham1> You're right, that does sound annoying
[16:38:22] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[16:38:27] <duuude> put everything in the same line
[16:38:31] <pony> I adopted "no cuddled else" from Larry
[16:38:34] <pony> I prefer it now
[16:38:42] <duuude> use tabs as spaces in middle of lines
[16:38:43] <Learath2> if(x > 0) is superior to if (x > 0), fite me
[16:38:55] <duuude> Learath2: it is
[16:39:05] <pony> Learath2: I disagree
[16:39:21] <earnestly> plan9 > pony
[16:39:27] <duuude> what is so important about a useless space that does nothing
[16:39:38] <pony> whatdoyoumeandude
[16:39:42] <pony> youdontlikespace?
[16:39:52] <duuude> those are useful spaces
[16:39:52] <sham1> Having a space before parens for function calls (or sizeof or similar function-like operators and macros), but for control flow like if? Nah man, gotta have spaces before the paren
[16:39:54] <Learath2> anyone who disagrees with my opinion has the wrong opinion period
[16:40:13] <pony> it's not period, it's full stop
[16:40:14] <pony> :)
[16:40:15] <duuude> Learath2: unless they agree with my opinion
[16:40:16] <earnestly> Yes, return to scripto continua
[16:40:21] <sham1> Also sizeof needs the parens
[16:40:29] <pony> sham1: pls
[16:40:42] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[16:40:44] <pony> sizeof var is better than sizeof(var)
[16:40:49] <duuude> the ( in if(x): already separates if from x
[16:40:50] <earnestly> pony: Most of plan9's function names contain no spaces, but a degree of care is taken so that it's still readable and maintains description
[16:40:51] <Learath2> if you pretend sizeof is a function I'll actually fight you
[16:40:52] <sham1> No, not really
[16:40:57] <Learath2> gimme your address
[16:40:59] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:41:03] <pony> it's not a function call
[16:41:14] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[16:41:22] <pony> if is not a function, nor is sizeof
[16:41:30] <duuude> earnestly: is there anywhere i could see a lot of those?
[16:41:53] <pony> funcs_should_be_named_thusly
[16:42:05] <earnestly> duuude: https://github.com/brho/plan9/tree/master/sys/src/cmd
[16:42:06] <candide> Title of earnestly's link: plan9/sys/src/cmd at master · brho/plan9 · GitHub
[16:42:09] <pony> ok bedtime
[16:42:09] <pony> nn
[16:42:18] <sham1> Learath2: &sham1
[16:42:34] <duuude> i like nocaps but it doesn't work in long names
[16:42:47] <duuude> you will eventually put a _ there
[16:42:54] <earnestly> duuude: You need to be smart to make it work, that's why it's hard
[16:43:00] <duuude> and become incosistent
[16:43:07] <Learath2> Oh and also if you don't use snake_case you are wrong
[16:43:28] <pony> thank you Learath2
[16:43:41] *** Joins: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:4:497c:8773:8a60)
[16:43:47] <pony> HaskellersLikeDoingThis ugh
[16:43:55] <pony> andThis
[16:44:10] <pony> please_do_this_instead
[16:44:24] <earnestly> plan9 uses CapitalCamelCase for types
[16:44:28] <Learath2> I can make peace with the kebab-case people until we eradicate the camelCase and PascalCase people, but at the end of the day they must go too
[16:44:36] <duuude> pony: pls_this
[16:44:42] <sham1> pony: could be worse, could_Be_This
[16:44:46] <earnestly> Why Go inherited it
[16:44:59] <duuude> SDL's style is goddamn worst
[16:45:06] <pony> RustDoesThisForTypes and_this_for_functions_and_variables
[16:45:18] <duuude> FULLCAPS_CamelCaseLikeCSharp
[16:45:32] <Learath2> There is only one other naming scheme I allow. It's ofc the coveted sPoNgEbObCaSe
[16:45:53] <not_a_robot06> The task at hand: https://i.imgur.com/GLeO3A3.png . My solution: https://clbin.com/gWATa . Solution given: https://clbin.com/iugUr . Which is better/more effecient/etc? Also, is it better to initialise variables at the beginning of the program or initialise them when they're about to be used (i.e. in the for loop)?
[16:46:24] <pony> ok bed
[16:46:25] <pony> nn
[16:46:28] *** Quits: john9980 (~john99@2.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[16:47:08] <duuude> Learath2: what is kebab minus case?
[16:48:12] <sham1> Kebab case doesn't work with C because identifiers can't contain a -
[16:48:15] <sham1> Which is sad
[16:48:30] <Learath2> not_a_robot06: I like theirs better, but a modern optimizing compiler will probably give very close assembly for both, even if it doesn't the performance would be on the same order of magnitude
[16:49:11] <Learath2> Unless you are stuck with <C99 I suggest you mix declarations with the code, it's much easier to read that way
[16:50:00] *** Quits: kts (~kts@103.73.237.188) (Quit: Konversation terminated!)
[16:50:08] <not_a_robot06> Learath2: so is it more effecient to do the math every time instead of making a variable?
[16:50:30] <not_a_robot06> also, why would i not mix declarations with the code in <C99?
[16:50:36] <duuude> make variables
[16:50:45] <Learath2> Before C99 you can't mix it, it's just not allowed :P
[16:50:50] <not_a_robot06> ah ok
[16:50:53] <duuude> it makes stuff readable
[16:51:29] <not_a_robot06> the book I'm reading is C programming, a modern approach. It was written for C89, but I'm reading the 2nd edition which is C99. No wonder they always declare at the very beginning.
[16:51:36] <not_a_robot06> duuude: ye I thought so
[16:51:49] <duuude> dOcAMELcASEpEOPLEnAMEtHEIRmACROSlIKEtHIS?
[16:51:50] <Learath2> Now whether it's more performant or not is really hard to say just by looking at it, I have a feeling these 2 should optimize to similar assembly
[16:51:52] <not_a_robot06> the answer given is a bit more confusing, and in bigger programs, will pose a problem
[16:51:55] <sham1> I dunno, I like collecting variable declarations to the top of the block. They're all in one place. Although I've made peace with mixing
[16:52:16] *** Quits: uninstance (~uninstanc@92.245.31.224) (Quit: Quit)
[16:52:59] <not_a_robot06> ok, thanks for the advice, guys.
[16:55:18] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[16:57:19] *** Quits: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:4:497c:8773:8a60) (Quit: Leaving)
[16:58:28] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:59:00] <Learath2> huh, I'd think the compiler would optimize that mod away but it doesn't interesting
[16:59:29] *** Joins: Rounin (~david@84.212.130.215)
[17:00:03] <sham1> Only in some cases can a mod be optimized. One being if it's known that the divisor is a power of 2
[17:01:01] *** Quits: Enitin (~Enitin@37.80.148.79) (Ping timeout: 240 seconds)
[17:01:08] <Learath2> it does get optimized btw, it doesn't emit a idiv, but I expected more
[17:01:47] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:03:38] *** Joins: agonhajdari (~textual@user/agonhajdari)
[17:04:29] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 268 seconds)
[17:04:38] <sokan> stbool.h is used when we want to use 0,1 as false-true statements?
[17:05:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:05:55] <sham1> stdbool.h is used when we want nice looking aliases for _Bool, 0 and 1
[17:08:28] <ioxzev1z> not_a_robot[m], why do you use \ for comment wrapping?
[17:08:45] <Learath2> he already left
[17:08:57] <ioxzev1z> Ok, nvm
[17:09:48] <sham1> I just love it when people leave IRC rooms
[17:10:02] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:1603:7c6d:5d49:82fb) (Ping timeout: 240 seconds)
[17:11:01] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:ed7a:e85a:394d:a607)
[17:12:08] <sokan> especially 2 mins after asking a question :P
[17:14:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[17:14:30] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:14:56] *** Quits: trafficjam (~trafficja@119.17.42.59) (Quit: Client closed)
[17:16:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:16:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[17:17:50] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:17:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[17:18:20] *** Joins: kts (~kts@103.73.237.212)
[17:20:37] <Learath2> tbf he did get answers to his question before leaving atleast
[17:21:01] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[17:21:27] <sham1> True
[17:21:43] *** Quits: kts (~kts@103.73.237.212) (Client Quit)
[17:22:13] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[17:22:18] *** Joins: Enitin (~Enitin@37.80.148.79)
[17:24:01] *** Joins: kts (~kts@103.73.237.212)
[17:25:51] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:26:26] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com)
[17:27:02] *** Quits: nicode (~nic@2607:f2c0:9447:d00:cc88:6b2c:abb0:8ab7) (Ping timeout: 240 seconds)
[17:31:14] *** Joins: WAR10CK (~WAR10CK@14.223.183.246)
[17:31:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:50d8:1e8f:4c53:cf6c)
[17:31:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:50d8:1e8f:4c53:cf6c) (Changing host)
[17:31:40] *** Joins: skapata (~Skapata@user/skapata)
[17:33:09] *** Joins: Brainium (~brainium@user/brainium)
[17:40:38] *** Joins: lisbeths (~user@2601:602:8705:16a2:e899:8c1f:73f1:bb1a)
[17:41:14] <lisbeths> Is it possible to progam in a purely static way in c
[17:41:44] <lisbeths> as in no use of malloc not as in immutable coding
[17:41:48] <sham1> Yes
[17:42:13] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com) (Ping timeout: 240 seconds)
[17:42:13] <sham1> Welcome to embedded space where you might not have access to malloc at all
[17:43:12] <lisbeths> I dont understand how to program in a purely static way and I want to because I have the superstition that it will make my code faster
[17:43:24] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:43:25] <lisbeths> I want to learn how to code c like an electrical engineer
[17:43:32] <sham1> Narrator: it will not
[17:44:25] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[17:44:39] <sham1> But yeah, you can do stuff like reserve some buffers with static lifetime, say 2KiB or whatever and then do stuff there instead of by dynamic allocation
[17:45:25] <lisbeths> I am writing a programming language so my ram usage could be in the range of bytes or gigabytes
[17:46:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:46:54] <lisbeths> I think I have to use malloc and so I have to learn how to manage memory in c without garbage collection
[17:50:41] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[17:50:57] <ioxzev1z> lisbeths, look into "freestanding" in the C standard
[17:51:08] *** Joins: meator (~meator@user/meator)
[17:54:41] *** Joins: JarbonFeh (~JarbonFeh@197.15.249.236)
[17:55:01] *** Quits: Enitin (~Enitin@37.80.148.79) (Ping timeout: 240 seconds)
[17:55:44] *** Quits: JarbonFeh (~JarbonFeh@197.15.249.236) (Remote host closed the connection)
[17:56:13] *** Joins: Enitin (~Enitin@5.180.62.229)
[17:58:13] <lisbeths> is there a book that helps you read and understand the c standard
[17:59:39] <rcf> I know of one that claims to do this, but it is notoriously inaccurate in its commentary.
[17:59:55] <NRK[m]> yes, the C standard itself
[18:00:31] <caze> Is it the one where it's actually more valuable if you take a fat sharpie and black out the commentary, because then it's a version of the official spec at a highly discounted rate?
[18:00:54] <rcf> I think that's the one, yes.
[18:01:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:01:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:01:52] *** Joins: wroathe (~wroathe@user/wroathe)
[18:04:07] *** Quits: alch (~alch@pa-18-176-80.service.infuturo.it) (Read error: Connection reset by peer)
[18:07:48] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[18:07:51] <lisbeths> #define CHAR_SIZE () (((char) 0) - 1) // will this give me char size every time
[18:08:06] <sham1> No
[18:08:10] <lisbeths> y
[18:08:24] *** Joins: alch (~alch@151.82.184.180)
[18:08:27] <sham1> Well the size of a char isn't -1
[18:08:30] <caze> wtf
[18:08:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[18:08:49] <caze> What do you mean by "char size"?
[18:09:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:09:03] <caze> sizeof (char) is always 1.
[18:09:09] <lisbeths> s/(char)/(unsigned char)
[18:09:15] <lisbeths> how about now
[18:09:46] <caze> What information are you after?
[18:09:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:10:47] <lisbeths> if the value an unsigned char can be 0 through n return n
[18:11:21] *** SmrtZapad is now known as MrHabanero
[18:11:38] <caze> There is UCHAR_MAX
[18:12:33] <lisbeths> is there somethint like UCHAR_MAX except it says the maximum index of an array
[18:13:30] <caze> You mean like if you have int a[3]; and it tells you 2?
[18:13:57] <caze> Or do you mean the biggest possible array in general?
[18:14:07] <lisbeths> the latter
[18:14:22] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Remote host closed the connection)
[18:14:36] <caze> There is SIZE_MAX, but that would only apply for char arrays.
[18:14:37] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[18:14:53] <caze> Arrays with a bigger element type would have a smaller range of indices.
[18:15:20] <lisbeths> what type should I use when indexing arrays that could be the max size
[18:15:27] <caze> You'd have to do SIZE_MAX / sizeof *array
[18:15:34] <caze> size_t
[18:15:59] *** Quits: PamiPetteri (~pamipette@user/pamipetteri) (Quit: Leaving)
[18:16:09] <lisbeths> is size_t always same size as void*
[18:16:19] <sham1> No
[18:16:27] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Ping timeout: 250 seconds)
[18:16:37] <lisbeths> thats what screws me up
[18:16:43] <sham1> But there is uintptr_t which is guaranteed to be able to hold a void *, assuming it exists
[18:16:45] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Client Quit)
[18:17:05] <lisbeths> yes I am awate of uintptr_t and such
[18:17:37] <lisbeths> can size_t be bigger than void*
[18:18:53] <sham1> I have a feeling that there are some X-Y questions in here
[18:18:59] *** Joins: wroathe (~wroathe@user/wroathe)
[18:19:03] <Xgc> lisbeths: Why do you care?
[18:20:13] <lisbeths> hard to say why
[18:21:13] <Xgc> lisbeths: Well, you asked the question.  Don't you have a reason you asked?
[18:21:14] *** Joins: shivesh (~shivesh@user/shivesh)
[18:21:15] <NRK[m]> he's asking what you're actually after
[18:22:29] *** Quits: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net) (Ping timeout: 256 seconds)
[18:22:41] <lisbeths> memory management. I need to use uintptr_t or something like it as a word of memory but I dont fully undetstand how to get all of my casting done. For example I know that doing pointer addition is a different cast than for integer addition
[18:23:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:23:25] <lisbeths> im after memory management I need to understand how to operate dynamic memory without using garbage collection so that I can implement garbage collection
[18:25:05] <Xgc> lisbeths: I suspect you should only care about pointers when dealing with void*... and you should only care about integer values when dealing with size_t.  Don't confuse the two.  uintptr_t is for storing pointers in an integer type.  If you need that, use that.
[18:25:48] <Xgc> lisbeths: sizes vs pointers.  Keep them separated in your mind / logic.
[18:26:34] <NRK[m]> c99 has some pretty nasty rules about type punning and aliasing.
[18:27:44] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[18:27:57] <lisbeths> oh so size_t literally means size of indexes
[18:27:57] <dave0> lisbeths: what's your programming langauge that you're writing?
[18:28:46] <lisbeths> im making a custom version of forth
[18:28:52] *** Joins: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:4:497c:8773:8a60)
[18:29:00] *** Quits: not_a_robot06 (~not_a_rob@2a01:4b00:8014:d900:4:497c:8773:8a60) (Client Quit)
[18:29:08] <dave0> forth doesn't distinguish between pointer and integer
[18:29:18] <lisbeths> indeed forth uses words of memory
[18:29:48] <dave0> c does
[18:30:26] <lisbeths> I dont understand how to operate if the two arent interoperable
[18:31:10] <lisbeths> what if I want to read an integer from stdin and malloc an array of that size is that possible
[18:31:55] <dave0> afaik you can't construct an arbitrary pointer from an integer in standard c
[18:31:56] <Xgc> lisbeths: That's basically what malloc does.
[18:34:36] <lisbeths> I think I need to use char* as a universal type because char* can hold a pointer
[18:35:00] <dave0> lisbeths: it just means your forth won't be maximally portable, but there's nothing necessarily wrong with that
[18:35:29] <sham1> Also just as a bit of a tidbit, Forth doesn't really do GC
[18:35:37] <sham1> It's hyperstatic
[18:35:52] <lisbeths> keyword *custom* forth
[18:36:06] *** Parts: Seng (~nick@hurtig.ninja) (Leaving)
[18:36:24] <lisbeths> I am dealing with insane memory constraints but I think I know what I need to do now
[18:36:45] <dave0> lisbeths: i would use unsigned long and cast to unsigned char* to fetch bytes and unsigned long* to fetch cells .. everything else just operates on unsigned long
[18:37:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:37:45] *** Joins: constxd (~brad@142.134.38.68)
[18:38:08] <dave0> unsigned because you don't want the hassle of UB with signed overflow
[18:38:50] *** Joins: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi)
[18:38:56] <lisbeths> ints will be strings
[18:39:05] <sham1> And if your target architecture is 2's complement you can just treat the unsigned long as signed long as needed
[18:39:09] <lisbeths> thanks I think my questions are answered for now
[18:40:03] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[18:40:15] *** Quits: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi) (Client Quit)
[18:40:42] *** Joins: Akuli (~Akuli@85-76-42-63-nat.elisa-mobile.fi)
[18:40:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:41:32] *** Quits: alch (~alch@151.82.184.180) (Read error: Connection reset by peer)
[18:41:56] *** Joins: pulse (~pulse@user/pulse)
[18:42:04] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:42:09] *** Quits: dsrt^ (~dsrt@207.5.21.20) (Remote host closed the connection)
[18:43:17] *** Joins: alch (~alch@151.68.166.54)
[18:43:18] *** Quits: lisbeths (~user@2601:602:8705:16a2:e899:8c1f:73f1:bb1a) (Read error: Connection reset by peer)
[18:43:23] *** Joins: lisbeths` (~user@c-67-161-103-115.hsd1.wa.comcast.net)
[18:44:08] *** Joins: agonhajdari (~textual@user/agonhajdari)
[18:44:26] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:44:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[18:45:49] *** Quits: lisbeths` (~user@c-67-161-103-115.hsd1.wa.comcast.net) (Remote host closed the connection)
[18:48:03] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[18:48:27] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:48:48] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[18:50:17] *** Quits: hiovoltage (~hiovoltag@176.88.83.200) (Quit: Client closed)
[18:54:20] *** Quits: inlight (~inlight@user/inlight) (Read error: Connection reset by peer)
[18:55:19] *** Joins: inlight (~inlight@157.42.198.130)
[18:55:19] *** Quits: inlight (~inlight@157.42.198.130) (Changing host)
[18:55:19] *** Joins: inlight (~inlight@user/inlight)
[18:56:44] *** Joins: strajder (~strajder@user/strajder)
[18:57:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[18:58:52] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:03:32] *** Joins: nicode (~nic@2607:f2c0:9452:5000:ef50:8b71:648e:eb43)
[19:05:18] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[19:07:45] *** Joins: ethrl (~ethereal@user/doforlove33)
[19:13:17] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Ping timeout: 240 seconds)
[19:15:57] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[19:16:53] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[19:16:55] *** Quits: asen (~asen@2408:821a:618:1300:a3e4:7e9a:23b7:bba4) (Quit: Leaving)
[19:17:25] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:17:59] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[19:19:35] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[19:20:12] *** Joins: Macuser (~Macuser@2600:1003:b44f:38bd:ed07:b8e9:22b1:b6d0)
[19:20:13] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[19:20:46] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[19:23:03] *** Joins: Teckla (~Teckla@user/teckla)
[19:24:53] *** Joins: antoni (~antoni@host-79-50-23-248.retail.telecomitalia.it)
[19:25:57] *** Quits: antoni (~antoni@host-79-50-23-248.retail.telecomitalia.it) (Client Quit)
[19:26:09] *** Joins: antoni (~antoni@host-79-50-23-248.retail.telecomitalia.it)
[19:26:17] *** Joins: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e)
[19:26:24] *** Quits: antoni (~antoni@host-79-50-23-248.retail.telecomitalia.it) (Client Quit)
[19:28:31] *** Joins: malina (~malina@user/malina)
[19:29:52] <nomagno> while ((b >= 0) && (input[b--] == 0x09));
[19:30:16] <nomagno> I always mess up with the decrement operator, how would b look like after it finds a non-0x09 character
[19:31:17] *** Quits: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e) (Ping timeout: 240 seconds)
[19:33:38] *** Joins: Darkcoal (~user@167.86.150.114)
[19:33:41] <strajder> to avoid confusion, you can use: while ((b >= 0) && (input[b] == '\t')) b--;
[19:34:09] <strajder> that form is also easier to expand later
[19:34:29] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[19:35:11] *** Quits: ethrl (~ethereal@user/doforlove33) (Quit: WeeChat 2.8)
[19:35:19] <nomagno> Well, I'm looking for byte 0x09, not tab, but thanks :P
[19:35:40] <strajder> they are the same
[19:35:59] <nomagno> Does C specify the character encoding for horizontal tab?
[19:36:03] <nomagno> Pretty sure that's just ASCII
[19:36:50] <strajder> ASCII = 1 byte per char
[19:36:58] <strajder> ASCII TAB = 9 = 0x09
[19:37:41] <nomagno> ASCII isn't C though, you can perfectly find C source file encodings where a tab is not 0x09
[19:38:17] <strajder> which ones?
[19:39:17] <strajder> http://port70.net/~nsz/c/c99/n1256.html#5.2.1
[19:39:48] <strajder> > the space character, and control characters representing horizontal tab, vertical tab, and form feed.
[19:40:07] *** Quits: mahmutov (~mahmutov@5.176.40.51) (Ping timeout: 256 seconds)
[19:40:10] *** Joins: agonhajdari (~textual@user/agonhajdari)
[19:40:34] <nomagno> Note how it does not mention their value
[19:40:38] <nomagno> It's implementation defined
[19:40:41] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[19:40:45] <ioxzev1z> nomagno, it's actually better to use '\t' than 0x09
[19:40:55] <strajder> > The representation of each member of the source and execution basic character sets shall fit in a byte.
[19:40:59] <ioxzev1z> The compiler will know which value to use for '\t'
[19:41:02] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Ping timeout: 240 seconds)
[19:41:05] <nomagno> How so? I want to look for 0x09
[19:41:07] <nomagno> Not \t
[19:41:08] <pragma-> ioxzev1z: only if you want a tab and not 0x9.
[19:41:08] *** Joins: rsjw (~quassel@user/rsjw)
[19:41:18] *** Joins: mahmutov (~mahmutov@5.176.40.51)
[19:41:19] <ioxzev1z> pragma-, wasn't this about tab?
[19:41:20] <nomagno> Main difference is the format I'm parsing is meant to be human-readable in ASCII, but completely unambiguous when read as binary
[19:41:24] <pragma-> ioxzev1z: no
[19:41:26] <ioxzev1z> oic
[19:41:32] <nomagno> It's formally specified to use 0x09
[19:41:49] <pragma-> I'm not sure why we're writing 9 as hexadecimal.
[19:41:51] <nomagno> ... by me, so I would know I want 0x09 and not \t :P+
[19:42:11] <strajder> c99 defines characters forming the source to fit into one byte
[19:42:18] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[19:42:21] <strajder> I quoted it above
[19:42:27] <nomagno> What does that have to do with anything?
[19:42:37] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[19:42:41] <nomagno> A character has to fit into a char
[19:42:46] <nomagno> yes, thank you
[19:43:06] *** Joins: YellowSuB (~YellowSuB@user/yellowsub)
[19:43:15] <strajder> what is the counterexample of '\t' != 9 then?
[19:43:23] <strajder> and where
[19:43:42] *** Joins: moog (~moog@107.126.53.180)
[19:43:45] <pragma-> strajder: anywhere EBCDIC is still used, for example.
[19:43:58] *** Joins: inlight (~inlight@user/inlight)
[19:44:24] <strajder> which is?
[19:44:33] *** Quits: Leonard (~Administr@114.55.127.80) (Remote host closed the connection)
[19:44:48] <nomagno> It's more of a principle thing
[19:44:49] <constxd> doesn't matter bro
[19:44:59] <strajder> some obscure computers nobody uses with obscure compilers
[19:45:03] <pragma-> I've always wondered what format Asian countries use. Every single computer science book I've read has been Americanized with ASCII/EBCDIC and never talks about how other non-English computers evolved.
[19:45:16] <nomagno> strajder: Is this #c-implementations?
[19:45:19] <nomagno> No, it's #c :)
[19:45:21] <constxd> why would you make your program less correct for no reason, even if in practice it will probably still work?
[19:45:45] <koollman> pragma-: formats, not format, obviously. Why would there be only one ? ;)
[19:46:01] *** Joins: Mentor (~Ionut@92.86.217.127)
[19:46:08] <nomagno> pragma-: They used their own ones until the last 15 years or so, for instance Japanese content is 99% unicode now
[19:46:19] <constxd> based japs
[19:46:47] *** Joins: pandom79 (~domenico@37.100.213.85)
[19:47:17] <sham1> I thought that a lot of Japanese was still Shift-JIS
[19:47:59] <koollman> pragma-: big5, gp18030, shift JIS, GB* (gbk, gb2312), ...
[19:48:03] <constxd> Shift JIS is the second-most popular character encoding for Japanese websites, used by 5.6% of sites in the .jp domain. UTF-8 is used by 93.4% of Japanese websites
[19:48:09] <koollman> (and various others)
[19:48:37] <koollman> some unicode-based thing is *very* nice to use instead of dealing with all those,really :)
[19:49:11] <rsjw> I think IBM's z/OS has a history with EBCDIC and I think it might still use it -- according to https://www.ibm.com/docs/en/zos-basic-skills?topic=mainframe-ebcdic-character-set they are used for "data sets"
[19:49:27] <pandom79> i'm using the sigaction to catch the signals. Sigterm, sigtstp, sigchld works well except sigcont....It isn't catched. What am i wronging?
[19:49:29] <constxd> only problem with unicode is it includes those gay transgender characters
[19:49:37] * pragma- stares at constxd
[19:49:38] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com)
[19:49:54] <nomagno> Those what
[19:49:59] <constxd> you know that flag
[19:50:09] <constxd> and some "gender-inclusive" symbols
[19:50:23] <rsjw> you mean like the circle with arrow or cross?
[19:50:31] <nomagno> You mean characters with the relevant symbology?
[19:50:33] <constxd> https://thenextweb.com/news/unicode-consortium-added-transgender-flag-emoji-gender-inclusive-designs
[19:50:41] <nomagno> Well yeah it includes characters for anything humans use symbology for
[19:50:43] <nomagno> pretty much
[19:50:55] <nomagno> Anything with widespread usage anyways
[19:51:11] <constxd> "pregnant man"
[19:51:43] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[19:51:59] <rsjw> besides the issues of these particular "characters", putting emojis in character sets at all seems wrong... they're not characters, they're little pictures
[19:52:19] <nomagno> I don't see a pregnant man emoji anywhere there
[19:52:24] <pragma-> Unicode is so annoying in how every platform/font renders characters slightly differently. This is especially problematic with smiley face emojis. On some platforms a certain grinning emoji looks happy but on some platforms it looks angry. Someone attempt to send a happy message ends up unintentionally conveying an angry tone on the other person's end. There are articles about this.
[19:53:25] <constxd> nomagno: it isn't mentioned in that particular article
[19:53:25] * pragma- points at the whole unicode handgun image debacle.
[19:53:30] <constxd> pregnant man is more recent
[19:53:53] *** Joins: Zerock (~0ck@copyfree/pedant/zerock)
[19:54:05] <nomagno> Well it makes sense from a characteristic-parity policy point of view
[19:54:14] <pragma-> Some platforms even take it a step further and actual animate their emojis.
[19:54:22] <rsjw> looks like unicode is turning into a clipart database
[19:54:30] <pragma-> It's been a clipart database for a while now!
[19:54:33] <pragma-> It's annoying.
[19:54:39] <nomagno> rsjw: Well the story goes JIS had a few little pictures, so Unicode had to add them, then everyone complained they couldn't get their own ones
[19:55:08] <nomagno> All of Unicode is completely optional, in practice
[19:55:09] <constxd> well unicode doesn't define what the pictures look like
[19:55:13] <nomagno> You only implement the part you want
[19:55:19] <pragma-> I remember the very first time I saw a full color unicode glyph in 72px font. I thought it was an image. I tried to right-click it to get image info but I ended up selecting it as text and was thoroughly confused.
[19:55:22] <Zerock> I'm a little confused about const qualifiers in function parameters. I'm trying to pass a char ** into a function that accepts const char * const *, and the compiler is warning me that it's incompatible. At first I thought it was a compiler issue but a different compiler also warns me. What is the correct arrangement of qualifiers so that I can pass in char ** while also promising that I'm not going to
[19:55:24] <Zerock> mutate anything?
[19:55:42] <constxd> you can't
[19:55:45] <constxd> because C is cringe
[19:55:46] <Zerock> what?
[19:55:49] <constxd> just cast it
[19:56:13] <constxd> also write const after the type that applies to if you want to be based
[19:56:37] *** Quits: Macuser (~Macuser@2600:1003:b44f:38bd:ed07:b8e9:22b1:b6d0) (Ping timeout: 240 seconds)
[19:56:45] <constxd> 'char const * const *'
[19:57:01] <constxd> s/that/that it/
[19:57:06] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:57:06] <koollman> pragma-: that's not only limited to unicode. Every platform has different fonts, too
[19:57:11] <nomagno> Zerock: 'const char const* const*' is the most const you can make it I think
[19:57:14] *** Joins: Macuser (~Macuser@2600:1003:b443:ba56:cd11:9e84:59a4:7d7c)
[19:57:25] <Zerock> "const char const" seems like a syntax error
[19:57:30] <pragma-> TIL that there's a TLD .meme and Google owns it.
[19:57:36] *** Quits: Brainium (~brainium@user/brainium) (Quit: -a- IRC for Android 2.1.59)
[19:58:08] <Zerock> I think the most const I can make it is "const char * const * const" but that shouldn't be necessary in a function parameter
[19:58:49] *** Quits: mahmutov (~mahmutov@5.176.40.51) (Ping timeout: 256 seconds)
[19:59:07] <constxd> ,cc void f(char const * const *names) { } char **names = malloc(sizeof (char *[4])); f((char const * const *)names);
[19:59:10] <candide> constxd: [warning: 'names' may be used uninitialized [-Wmaybe-uninitialized]  note: by argument 1 of type 'const char * const*' to 'f' declared here] no output: names = 0x41de10
[19:59:32] *** Quits: ndorf_ (~nd@ob.noxio.us) (Quit: leaving)
[19:59:39] *** Joins: soapsudsxx (~soapsudsx@209.221.40.151)
[19:59:40] *** Joins: ndorf (~nd@ob.noxio.us)
[20:00:03] <rsjw> nomagno: do you know what those images looked like? I'm searching for it but nothing's coming up
[20:01:38] *** Joins: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[20:02:46] <eqw> CANNOT LINK EXECUTABLE: empty/missing DT_HASH in "thebinary" (built with --hash-style=gnu?)
[20:02:49] <eqw> what's wrong with --hash-style=gnu ? Is it incompatible with some shared libraries? Is it possible to find out hash-style of existing .so?
[20:03:04] <nomagno> https://en.wikipedia.org/wiki/Emoji#Early_implementation_in_Japan
[20:03:13] <nomagno> rsjw, good starting point ^
[20:03:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:03:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:03:50] *** Joins: wroathe (~wroathe@user/wroathe)
[20:05:22] *** Joins: jaczur36 (~juan@host-0-186.podolsknet.ru)
[20:07:59] *** Quits: jaczur36 (~juan@host-0-186.podolsknet.ru) (Remote host closed the connection)
[20:08:02] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[20:08:16] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[20:09:01] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000C96363670EDAE354.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[20:10:05] *** Parts: Zerock (~0ck@copyfree/pedant/zerock) ()
[20:10:44] *** Joins: magla (~gelignite@55d4e4de.access.ecotel.net)
[20:12:53] <Rounin> eqw: I wasn't here earlier, but did you actually say what you're doing?
[20:13:38] <Rounin> "DT_HASH" looks like either a #define or environment variable, though
[20:17:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:18:05] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[20:18:45] *** Joins: jaczur361 (~juan@host-0-186.podolsknet.ru)
[20:18:50] <jaczur361> hello!
[20:18:53] *** Joins: monkey_ (~user@190.104.116.153)
[20:20:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:22:27] <eqw> Rounin: no i didn't. I've built a .deb package from sources for termux, but a binary from that package isn't running now.
[20:22:53] *** Quits: kassle_ (~kassle@202.73.24.66) (Ping timeout: 250 seconds)
[20:23:11] <rsjw> nomagno: looks like it wasn't quite "JIS had them" but "mobile operators had them as extensions" but point taken
[20:24:17] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:24:25] *** Joins: gproto23_ (~gproto23@user/gproto23)
[20:25:40] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:25:40] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:25:40] *** Joins: wroathe (~wroathe@user/wroathe)
[20:25:51] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[20:27:09] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:27:30] *** Joins: Leonard (~Administr@114.55.127.80)
[20:28:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:29:17] *** Quits: Leonard (~Administr@114.55.127.80) (Read error: Connection reset by peer)
[20:29:23] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[20:29:59] *** Joins: ferdna (~ferdna@user/ferdna)
[20:30:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:30:42] <Rounin> eqw: Ah, well... Maybe you're just missing a dependency
[20:31:05] <Rounin> After all, C package management is the classical style also known as "lack of management"
[20:31:16] *** Joins: kuoi (~kuoi@109.175.166.61)
[20:32:14] <Rounin> I wish people could just use semantic versioning already... That way you could do #import "sdl_2/sdl.h" and run a program that just downloaded SDL 2 for you
[20:32:35] <Rounin> Same thing in Java... Why are we messing around with Maven and all sorts of things when it says in the source what we want to import
[20:32:48] <Rounin> Ah, and of course C uses #include ... But either way
[20:33:30] <Rounin> Anyone who re-used a package name and version without maintaining compatibility would of course have to clean the toilets for a week
[20:33:54] <Rounin> Hm well, guess I should just make that program some time and see how it goes
[20:34:48] *** Quits: jaczur361 (~juan@host-0-186.podolsknet.ru) (Remote host closed the connection)
[20:35:58] <rsjw> I think DT_HASH is an ELF thing, not a C source thing
[20:36:04] *** Quits: kuoi (~kuoi@109.175.166.61) (Quit: kuoi)
[20:36:50] *** Joins: kassle (~kassle@202.73.24.66)
[20:37:31] *** Parts: pandom79 (~domenico@37.100.213.85) (Konversation terminated!)
[20:38:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[20:38:56] *** Joins: duuude (~user@user/duuude)
[20:39:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:39:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:39:23] *** Joins: wroathe (~wroathe@user/wroathe)
[20:39:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:42:45] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[20:43:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:45:50] <eqw> rsjw: does that mean I'm asking in the wrong channel?
[20:47:10] <rsjw> I'm not saying you should leave, but I'd try in a channel about your operating system
[20:47:42] <rsjw> or your compiler. or whatever software you're trying to compile
[20:48:14] <rsjw> I'm not really sure what context brought about the error, so it's hard to say where you should ask
[20:48:47] <Rounin> Ah, right... I wonder, eqw, if your compiler builds a slightly different format from what your linker expects... Based on what rsjw is saying
[20:49:18] <Rounin> So it builds kind of a special GNU binary... Because it's GCC or Clang or one of the others, perhaps with glibc... And the linker is somehow from a different package or for a different platform or something like that
[20:49:28] <Rounin> And it's looking for this symbol inside the object file and isn't finding it
[20:49:37] <Rounin> So ... A contradictory development environment in a sense
[20:49:39] <Rounin> That could be it
[20:50:32] <Rounin> So perhaps you'd need to use a slightly different linker, or manually set the --hash-style option when you compile, or something of that kind
[20:50:57] <nomagno> Or there could be some very unlucky recurrent cosmic rays
[20:50:58] <nomagno> :)
[20:51:02] <Rounin> Hehe
[20:52:10] *** Quits: magla (~gelignite@55d4e4de.access.ecotel.net) (Quit: Stay safe!)
[20:52:14] <nomagno> I want to finish this tokenizer but I don't want to, but I want to!
[20:52:53] <nomagno> Ugh, it's literally just 40 LoC, I'm just not able to focus very much on how to keep track of indentation
[20:52:59] <ioxzev1z> nomagno, "'const char const* const*'" that is the same as char const const * const *
[20:53:06] <ioxzev1z> ,cc const char const* const* p;
[20:53:09] <candide> ioxzev1z: [warning: duplicate 'const' declaration specifier [-Wduplicate-decl-specifier]] no output: p = <optimized out>
[20:53:31] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[20:53:59] <nomagno> Is there no way to say "a const pointer to a const pointer to a const char"?
[20:54:09] <ioxzev1z> char const * const * const
[20:54:15] <ioxzev1z> const applies to left
[20:54:21] <Rounin> ,cc printf("Hello world!");
[20:54:24] <candide> Rounin: Hello world!
[20:54:29] <nomagno> Ah
[20:55:16] *** Joins: Seng (~nick@hurtig.ninja)
[20:55:53] *** Joins: jaczur361 (~juan@host-0-186.podolsknet.ru)
[20:55:55] *** Parts: jaczur361 (~juan@host-0-186.podolsknet.ru) ()
[20:55:58] <nomagno> I think I'm going to have a snack and see if I can focus more on this thingy later
[20:56:07] *** Joins: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net)
[20:56:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 240 seconds)
[20:56:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[20:56:48] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[20:57:23] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[20:57:55] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[20:58:04] <Rounin> ,cc char* hello = "Hello world!"; for(int i=0; i < 12; ++i) printf("%c%0d,%0d%c", 3, (i*31)&15, (i*37)&15, hello[i]);
[20:58:06] <candide> Rounin: Hello world!
[20:58:07] *** Quits: Leonardzzz (~Administr@114.55.127.80) (Remote host closed the connection)
[20:58:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[20:58:24] <Rounin> Hehe, I see they've thought of that one
[20:59:26] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:00:06] *** Joins: monkey_ (~user@190.104.116.153)
[21:00:14] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[21:00:29] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Remote host closed the connection)
[21:02:17] *** Quits: highrate (~presonic@111-22-237-24.gci.net) (Ping timeout: 240 seconds)
[21:03:07] *** Quits: odoood (~odoood@c-71-204-80-147.hsd1.ga.comcast.net) (Ping timeout: 268 seconds)
[21:04:35] *** Joins: soul-d (~uknown@user/soul-d)
[21:07:18] *** Quits: MrHabanero (~aqua@user/aqua) (Ping timeout: 276 seconds)
[21:10:07] *** Quits: fe23 (~fe23@2409:8a34:464:4990:d168:83cb:8c12:3c33) (Quit: fe23)
[21:10:48] *** Joins: MrHabanero (~aqua@user/aqua)
[21:12:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:13:14] *** MrHabanero is now known as kish`
[21:14:32] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:15:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:18:13] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[21:18:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[21:18:46] <eqw> I got rid of that issue(it was silly of me to install a package from a wrong verision of build environment). Now I've got another problem: CANNOT LINK EXECUTABLE DEPENDENCIES: cannot locate symbol "debug_level". This looks like an OS question, but maybe somebody knows where's the debug_level in Linux?
[21:20:05] <rsjw> what are you trying to do?
[21:20:56] *** Joins: etchi (~etchi@195.198.128.15)
[21:23:28] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 268 seconds)
[21:24:51] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[21:25:35] <eqw> I've built a .deb package from sources for termux and now I'm trying to run a binary from that package
[21:26:00] *** Joins: kish` (~aqua@user/aqua)
[21:26:05] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[21:27:29] <Rounin> eqw: Ah... What we used to do back in the day... During the Victorian times, when we rode on the big prairies and used Red Hat and such... Was to run "ldd <binary here>"
[21:27:37] <Rounin> Then we could see what dependencies it was looking for
[21:28:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:28:06] *** Quits: Darkcoal (~user@167.86.150.114) (Quit: Darkcoal)
[21:28:15] <Rounin> Another thing is that you might have built it with some sort of debug flag that could just be turned off, but that's just a wild guess
[21:28:54] *** Joins: mahmutov (~mahmutov@5.176.40.51)
[21:30:09] <rsjw> eqw: If you're trying to build a package for your linux distribution I'd try a channel about that linux distribution
[21:30:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:30:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:30:43] *** Joins: wroathe (~wroathe@user/wroathe)
[21:31:20] *** Quits: kts (~kts@103.73.237.212) (Quit: Konversation terminated!)
[21:31:54] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[21:32:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:32:56] *** Joins: jaczur361 (~juan@host-0-186.podolsknet.ru)
[21:33:04] *** Parts: jaczur361 (~juan@host-0-186.podolsknet.ru) ()
[21:35:01] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:37:48] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:38:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5401-fb84-56c5-61fd.res6.spectrum.com)
[21:41:41] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:44:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4)
[21:49:12] *** Joins: Brainium (~brainium@user/brainium)
[21:50:00] *** Joins: pucara (~i@181.91.29.65)
[21:51:28] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[21:52:58] *** Joins: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0)
[21:54:43] *** Joins: constxd (~brad@142.134.38.68)
[21:55:05] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 250 seconds)
[21:55:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:57:47] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[21:58:14] *** Joins: johnjaye (~pi@154.6.152.74)
[21:58:30] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:00:04] *** Joins: Betal (~Betal@user/betal)
[22:00:55] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:03:11] *** Joins: Torr (~Torr@user/torr)
[22:04:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:04:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:04:37] *** Joins: wroathe (~wroathe@user/wroathe)
[22:05:37] *** Joins: vysn (~vysn@user/vysn)
[22:06:15] *** Joins: magla (~gelignite@55d4e4de.access.ecotel.net)
[22:07:24] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[22:08:23] *** Joins: mrig (~mrig@user/mrig)
[22:08:49] *** Joins: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca)
[22:08:53] *** Quits: thomasross (~thomasros@dyn-pppoe-142-51-227-74.vianet.ca) (Remote host closed the connection)
[22:09:09] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:09:53] *** Joins: duuude (~user@user/duuude)
[22:10:17] *** Joins: nyjets (~zz@2001:8003:1612:d500:3473:2ab5:e163:a783)
[22:12:30] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[22:12:33] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 256 seconds)
[22:12:46] *** Quits: Macuser (~Macuser@2600:1003:b443:ba56:cd11:9e84:59a4:7d7c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:14:36] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[22:15:57] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[22:16:51] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:16:56] *** Joins: Macuser (~Macuser@2600:1003:b443:ba56:3c98:1e24:b9af:bbd4)
[22:17:44] *** Joins: duuude (~user@user/duuude)
[22:17:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:17:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:17:55] *** Joins: wroathe (~wroathe@user/wroathe)
[22:21:07] *** Festive_Dragon is now known as A_Dragon
[22:25:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:25:51] *** Joins: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net)
[22:29:07] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[22:33:20] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:33:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:33:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:33:43] *** Joins: wroathe (~wroathe@user/wroathe)
[22:36:27] *** Quits: nyjets (~zz@2001:8003:1612:d500:3473:2ab5:e163:a783) (Quit: WeeChat 1.1.1)
[22:37:04] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[22:37:25] <nomagno> (a += (b == c))
[22:37:50] <sham1> Yes but no. Don't
[22:37:58] <nomagno> Does this have the boolean value b == c, when inside an if?
[22:38:28] <nomagno> 'Truth value assignment', I think is the name or something
[22:38:31] <sham1> What has
[22:38:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:38:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[22:38:59] <nomagno> does if(a+=(b==c)) behave the same as if(a=(b==c))
[22:39:18] <nomagno> as far as the if is concerned
[22:39:22] <nomagno> ?
[22:39:34] <sham1> Well it depends
[22:39:47] *** Joins: smoke (~smoke@user/smoke)
[22:40:13] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:40:13] <nomagno> Does if(a+)
[22:40:28] <nomagno> does if (a+=(b==c)) { CODE } only execute CODE if b is equal to c?
[22:40:32] <sham1> For example, if a is an unsigned int and it's at UINT_MAX, the new value of a, and thus of the new expression is zero, assuming that b == c
[22:40:47] <sham1> So no
[22:41:47] <nomagno> This is not what I'm asking, I'm asking if += is treated as an operation or a truth value assignment
[22:42:11] *** Quits: alch (~alch@151.68.166.54) (Read error: Connection reset by peer)
[22:42:25] <rsjw> a+=b is the same as a=a+b
[22:42:50] <nomagno> Ah
[22:42:54] *** Joins: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc)
[22:43:16] <nomagno> thank you
[22:43:54] *** Quits: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc) (Client Quit)
[22:44:21] *** Joins: maharshipatel (~maharship@2409:4041:614:85eb:c120:9e6c:3dfc:71bb)
[22:44:24] *** Joins: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc)
[22:44:36] *** Joins: alch (~alch@151.34.178.233)
[22:44:40] *** Joins: rgrinberg (~textual@187.223.75.25)
[22:44:48] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:45:07] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:28] *** Joins: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com)
[22:47:32] *** Joins: inlight (~inlight@user/inlight)
[22:47:51] <nomagno> How do I go about concisely looking for an exact match for a specific pattern inside a string, backwards, without using libc?
[22:48:56] <nomagno> Specifically, I want to find a sequence of a newline and X number of consecutive tabs, so working backwards a newline-terminated string of size N tabs
[22:49:54] <rsjw> why backwards? are you trying to find the last match?
[22:50:21] *** Joins: lightningwright (~lightning@user/lightningwright)
[22:50:39] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[22:50:54] <nomagno> Pretty much, yeah.
[22:50:58] <APic> *shrug*
[22:50:59] <nomagno> Oh wait, shoot
[22:51:35] <nomagno> What if I keep an index of indentation/tab levels whenever I find such a sequence, then check this index?
[22:51:56] <nomagno> So if I find \n\t\t, I look for the last \n\t to find the parent
[22:52:13] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[22:52:31] *** Quits: maharshipatel (~maharship@2409:4041:614:85eb:c120:9e6c:3dfc:71bb) (Quit: Client closed)
[22:53:57] <rsjw> you could do that, but you don't need to. you could just start at the end of the string and move one a time towards the front, looking for tabs. if you find one, count how many there are (counting towards the front) and if you find a newline, you found the last one. if you run into the beginning of the line first, then you don't have a match
[22:54:31] <rsjw> you'd use a loop that starts at the end and counts down toward the start of the string
[22:55:12] <nomagno> Thanks, but that integrates poorly with the rest of the parser
[22:57:28] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[23:01:51] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[23:03:53] *** Quits: Macuser (~Macuser@2600:1003:b443:ba56:3c98:1e24:b9af:bbd4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:04:52] *** Joins: Macuser (~Macuser@2600:1003:b443:ba56:f53f:81ee:4d7:b651)
[23:05:15] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[23:05:17] *** Quits: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Remote host closed the connection)
[23:06:50] *** Joins: The_Jag (~The_Jag@host-79-33-196-10.retail.telecomitalia.it)
[23:07:04] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[23:08:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:08:27] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:08:27] *** Joins: wroathe (~wroathe@user/wroathe)
[23:09:56] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[23:10:01] *** Quits: mateus (~mateus@2804:7efc:320:e900:4219:3cd3:1bd3:1ffc) (Quit: mateus)
[23:11:45] *** Joins: Charadon (~Charadon@155.138.164.183)
[23:12:52] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[23:15:42] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[23:16:36] *** Quits: lightningwright (~lightning@user/lightningwright) (Quit: Leaving)
[23:16:37] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[23:17:36] *** Quits: rgrinberg (~textual@187.223.75.25) (Read error: Connection reset by peer)
[23:19:01] *** Joins: rgrinberg (~textual@2806:101e:7:33a5:9825:bd3b:45be:5a0f)
[23:20:04] *** Joins: constxd (~brad@142.134.38.68)
[23:20:37] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[23:23:06] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[23:25:40] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[23:26:49] <Crocodillian> Hi, anyone know anything about pcre2, it seems like if I link pcre2-posix.a I have to link libpcre2-8.a as well, but how am I supposed to know that and to know that it's "8"
[23:27:44] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[23:27:47] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Remote host closed the connection)
[23:27:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:28:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:28:36] <BtbN> Does it not have a pkg-config file?
[23:30:01] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[23:30:39] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Client Quit)
[23:31:17] *** Quits: Enitin (~Enitin@5.180.62.229) (Ping timeout: 240 seconds)
[23:32:01] *** Joins: Enitin (~Enitin@82.102.22.86)
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:38:28] *** Joins: davidv78 (~davidv7@user/videogameenjoyer)
[23:38:29] *** Joins: Epakai_ (Epakai@drislock.org)
[23:38:30] *** Joins: ldericher_ (~LDer@pantalaimon.yavook.de)
[23:38:33] *** Joins: dmlloyd_ (sid331705@redhat/dmlloyd)
[23:38:52] *** Joins: fcresende (~quassel@vps35015.publiccloud.com.br)
[23:38:56] *** Joins: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[23:38:58] *** Joins: haniaF_ (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[23:39:00] *** Joins: scoobydoo_ (~scooby@user/scoobydoo)
[23:39:01] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:39:02] *** Joins: rkta___ (~rkta@2001:4ba0:cafe:eaf::1)
[23:39:04] *** Joins: SrPx_ (sid108780@id-108780.uxbridge.irccloud.com)
[23:39:21] *** Joins: zwrr (~zwr@2804:d45:b966:fb00:1f1f:72e7:c7dc:fde0)
[23:39:25] *** Joins: amorel_ (~amorel@mx.mompl.net)
[23:39:31] *** Joins: dustinm- (~dustinm@static.38.6.217.95.clients.your-server.de)
[23:39:32] *** Joins: hayaliali (~alip@exherbo/developer/alip)
[23:39:33] *** Joins: kapil_ (~kapil@okweb.co.in)
[23:39:37] *** Joins: ArtisticMask (~masque@user/fluffymask)
[23:39:37] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[23:39:39] *** Joins: sebag1 (~guest@91.245.82.2)
[23:39:40] *** Joins: pieguy128_ (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[23:39:47] *** Joins: lllh (~llh@198.48.244.21)
[23:39:49] *** Joins: Some-body_ (user@znc/developer/DarthGandalf)
[23:39:52] *** Joins: nic (~nic@2607:f2c0:9452:5000:ef50:8b71:648e:eb43)
[23:39:53] *** Server sets mode: +Ccntz 
[23:39:54] *** Joins: ns127 (~ns12@user/ns12)
[23:39:54] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[23:40:03] *** Joins: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net)
[23:40:30] *** Joins: pr-asadi_ (~pr-asadi@2602:fccf:1:1150::)
[23:40:39] *** Joins: YellowSu1 (~YellowSuB@user/yellowsub)
[23:40:39] *** Quits: YellowSuB (~YellowSuB@user/yellowsub) (Killed (osmium.libera.chat (Nickname regained by services)))
[23:40:39] *** YellowSu1 is now known as YellowSuB
[23:40:53] *** Joins: vinay_ (~Vinay@user/vinay-keshava)
[23:40:59] *** Joins: oldlaptop_ (~quassel@45.63.78.126)
[23:41:01] *** Quits: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[23:41:30] *** Joins: DPA- (~DPA@2a05:41c0:0:8104::a3c:10d)
[23:41:35] *** Joins: bookworm_ (~bookworm@thelounge/maintainer/bookworm)
[23:41:36] *** Joins: noarb- (~noarb@user/noarb)
[23:41:37] *** Joins: Hibana_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[23:41:41] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[23:41:42] *** Joins: Fl0pFl1p (~FlipFlop@user/fl1pfl0p)
[23:41:44] *** Joins: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[23:41:45] *** Joins: ColdKeybo[a]rd (~ColdKeybo@user/coldkeyboard)
[23:41:54] *** Joins: jkl1337 (~jkl@user/jkl)
[23:42:00] *** Joins: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[23:42:02] *** Joins: Xgc_ (~Xgc@user/xgc)
[23:42:02] *** Joins: rany5 (~rany@user/rany)
[23:42:02] *** Hibana_ is now known as Guest241
[23:42:02] *** Quits: rany (~rany@user/rany) (Killed (tantalum.libera.chat (Nickname regained by services)))
[23:42:02] *** rany5 is now known as rany
[23:42:08] *** Joins: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[23:42:09] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:42:10] *** Joins: polyrob_ (~rob@user/polyrob)
[23:42:11] *** Joins: cp-- (~cp-@b157153.ppp.asahi-net.or.jp)
[23:42:11] *** Joins: Betal_ (~Betal@user/betal)
[23:42:12] *** Joins: apotheon_ (~apotheon@copyfree/founder/apotheon)
[23:42:12] *** Joins: heftig_ (heftig@archlinux/developer/heftig)
[23:42:12] *** Quits: Xgc (~Xgc@user/xgc) (Killed (NickServ (GHOST command used by Xgc_)))
[23:42:16] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[23:42:16] *** Xgc_ is now known as Xgc
[23:42:23] *** Joins: agander_m_ (sid407952@id-407952.tinside.irccloud.com)
[23:42:29] *** Joins: mrig_ (~mrig@user/mrig)
[23:42:32] *** Quits: DLange (~DLange@about/linux/staff/DLange) (Killed (NickServ (GHOST command used by DLange_)))
[23:42:35] *** Joins: noose_ (~noose@user/noose)
[23:42:37] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[23:42:41] *** Joins: Hazza (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[23:42:42] *** Joins: DLange (~DLange@about/linux/staff/DLange)
[23:42:49] *** Joins: fluter- (~fluter@user/fluter)
[23:42:50] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[23:42:55] *** Joins: zer0bitz_ (~zer0bitz@196.244.192.57)
[23:42:57] *** Joins: kzootick (~contact@kzoo.tech)
[23:42:59] *** Joins: NEYi__ (~NEYi@109.251.216.38)
[23:43:02] *** Joins: xcm__ (~xcm@user/xcm)
[23:43:06] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Killed (NickServ (GHOST command used by rkta___)))
[23:43:09] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[23:43:15] *** Joins: dogbert_22 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[23:43:18] *** Joins: __nick__ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:43:21] *** Joins: tbcr (~tbcr@107.13.189.161)
[23:43:23] *** Quits: mrig_ (~mrig@user/mrig) (Client Quit)
[23:43:26] *** Joins: justIrresolute3 (~justache@user/justache)
[23:43:28] *** Joins: stonkey (~stonkey@user/stonkey)
[23:43:29] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[23:43:30] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:43:41] *** Joins: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net)
[23:43:43] *** Joins: hexology- (~hexology@user/hexology)
[23:43:44] *** Quits: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[23:43:45] *** Joins: abraham5 (~abraham@143.244.185.86)
[23:43:47] *** Joins: majors_ (~majors@user/majors)
[23:43:49] *** rkta___ is now known as rkta
[23:43:53] *** Joins: tm512` (~tm512@50.53.132.213)
[23:43:53] *** Quits: Enitin (~Enitin@82.102.22.86) (*.net *.split)
[23:43:53] *** Quits: wroathe (~wroathe@user/wroathe) (*.net *.split)
[23:43:53] *** Quits: The_Jag (~The_Jag@host-79-33-196-10.retail.telecomitalia.it) (*.net *.split)
[23:43:53] *** Quits: Haxxa (~Haxxa@202-144-174-197.ip4.superloop.com) (*.net *.split)
[23:43:53] *** Quits: gproto23 (~gproto23@user/gproto23) (*.net *.split)
[23:43:53] *** Quits: pnbeast (~pnbeast@24.102.186.191.res-cmts.snh.ptd.net) (*.net *.split)
[23:43:53] *** Quits: Torr (~Torr@user/torr) (*.net *.split)
[23:43:53] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[23:43:53] *** Quits: johnjaye (~pi@154.6.152.74) (*.net *.split)
[23:43:53] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (*.net *.split)
[23:43:53] *** Quits: mahmutov (~mahmutov@5.176.40.51) (*.net *.split)
[23:43:53] *** Quits: Leonardzzz (~Administr@114.55.127.80) (*.net *.split)
[23:43:53] *** Quits: ferdna (~ferdna@user/ferdna) (*.net *.split)
[23:43:53] *** Quits: FluffyMask (~masque@user/fluffymask) (*.net *.split)
[23:43:53] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (*.net *.split)
[23:43:53] *** Quits: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl) (*.net *.split)
[23:43:53] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com) (*.net *.split)
[23:43:53] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (*.net *.split)
[23:43:53] *** Quits: malina (~malina@user/malina) (*.net *.split)
[23:43:53] *** Quits: Teckla (~Teckla@user/teckla) (*.net *.split)
[23:43:53] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[23:43:53] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (*.net *.split)
[23:43:53] *** Quits: nicode (~nic@2607:f2c0:9452:5000:ef50:8b71:648e:eb43) (*.net *.split)
[23:43:53] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[23:43:53] *** Quits: cart_man (~rynot@host-78-144-125-216.as13285.net) (*.net *.split)
[23:43:53] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[23:43:53] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (*.net *.split)
[23:43:53] *** Quits: NEYi (~NEYi@109.251.216.38) (*.net *.split)
[23:43:53] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (*.net *.split)
[23:43:53] *** Quits: sebag (~guest@91.245.82.2) (*.net *.split)
[23:43:53] *** Quits: DrNick42 (~DrNick42@bastion.spikeyfishtech.uk) (*.net *.split)
[23:43:53] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[23:43:53] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[23:43:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (*.net *.split)
[23:43:53] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[23:43:53] *** Quits: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net) (*.net *.split)
[23:43:53] *** Quits: pr-asadi (~pr-asadi@2602:fccf:1:1150::) (*.net *.split)
[23:43:53] *** Quits: LucaTM (~LucaTM@user/lucatm) (*.net *.split)
[23:43:53] *** Quits: inomoz (~inomoz@176.59.118.12) (*.net *.split)
[23:43:54] *** Quits: freep (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr) (*.net *.split)
[23:43:54] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (*.net *.split)
[23:43:54] *** Quits: fcresende_ (~quassel@vps35015.publiccloud.com.br) (*.net *.split)
[23:43:54] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (*.net *.split)
[23:43:54] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[23:43:54] *** Quits: Jong (~Jong@2620:10d:c090:400::5:f0a6) (*.net *.split)
[23:43:54] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[23:43:54] *** Quits: nostar (~nostar@68.51.221.108) (*.net *.split)
[23:43:54] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (*.net *.split)
[23:43:54] *** Quits: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f) (*.net *.split)
[23:43:54] *** Quits: mplio (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (*.net *.split)
[23:43:54] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[23:43:54] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[23:43:54] *** Quits: echoSMILE (uid504326@user/echosmile) (*.net *.split)
[23:43:54] *** Quits: gnoo (gnoo@user/gnoo) (*.net *.split)
[23:43:54] *** Quits: ixokani (~swinnenb@user/swinnenb) (*.net *.split)
[23:43:54] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[23:43:54] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[23:43:54] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[23:43:54] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[23:43:54] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[23:43:54] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[23:43:54] *** Quits: andi_ (~andi@user/andi/x-3467420) (*.net *.split)
[23:43:54] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[23:43:54] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[23:43:54] *** Quits: hirish_ (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[23:43:54] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[23:43:54] *** Quits: amorel (~amorel@mx.mompl.net) (*.net *.split)
[23:43:54] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[23:43:54] *** Quits: oldlaptop (~quassel@45.63.78.126) (*.net *.split)
[23:43:54] *** Quits: dos (~dos@dosowisko.net) (*.net *.split)
[23:43:54] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[23:43:54] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[23:43:54] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[23:43:55] *** Quits: csjp (~csjp@user/csjp) (*.net *.split)
[23:43:55] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: decartes (sid240036@id-240036.helmsley.irccloud.com) (*.net *.split)
[23:43:55] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (*.net *.split)
[23:43:55] *** Quits: ldericher (~LDer@pantalaimon.yavook.de) (*.net *.split)
[23:43:55] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[23:43:55] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[23:43:55] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[23:43:55] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (*.net *.split)
[23:43:55] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[23:43:55] *** Joins: freepp (~freepppp@62.1.245.43.dsl.dyn.forthnet.gr)
[23:43:55] *** bebyx1 is now known as bebyx
[23:43:55] *** polyrob_ is now known as polyrob
[23:43:55] *** Joins: cust_ (amaama@blackbox.amaama.org)
[23:43:56] *** dmlloyd_ is now known as dmlloyd
[23:43:57] *** agander_m_ is now known as agander_m
[23:43:57] *** SrPx_ is now known as SrPx
[23:44:03] *** Joins: ndorf_ (~nd@ob.noxio.us)
[23:44:10] *** Joins: coruja_ (~coruja@user/coruja)
[23:44:11] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[23:44:17] *** Joins: Teckla (~Teckla@user/teckla)
[23:44:24] *** Joins: fstd_ (~fstd@xdsl-78-35-82-60.nc.de)
[23:44:28] *** Joins: Echoz_ (~chris@user/echoz)
[23:44:29] *** Quits: scoobydoob (~scooby@user/scoobydoo) (Read error: Connection reset by peer)
[23:44:29] *** Joins: Svitkona7 (~Svitkona@157.245.38.135)
[23:44:32] *** Joins: zer0bitz__ (~zer0bitz@196.244.192.57)
[23:44:33] *** Joins: Jck_true8 (~jcktrue@user/jck-true/x-0200799)
[23:44:34] *** Joins: scoobydoob_ (~scooby@user/scoobydoo)
[23:44:36] *** megaTherion_ is now known as megaTherion
[23:44:37] *** Joins: randm_ (~randm@user/randm)
[23:44:38] *** Joins: NEYi (~NEYi@109.251.216.38)
[23:44:38] *** Joins: jfsimon1981 (~jfsimon19@2.65.136.88.rev.sfr.net)
[23:44:39] *** Joins: SoF8 (~skius@user/skius)
[23:44:43] *** Joins: haniaF (~haniaF@83.24.213.141.ipv4.supernova.orange.pl)
[23:44:43] *** Joins: Xgc_ (~Xgc@user/xgc)
[23:44:45] *** Joins: gproto_23 (~gproto23@user/gproto23)
[23:44:45] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[23:44:46] *** Joins: remedan_ (~remedan@octo.cafe)
[23:44:48] *** Joins: cation21 (cation@user/cation)
[23:44:50] *** Joins: mven8 (~mven@ip68-104-39-54.lv.lv.cox.net)
[23:44:53] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[23:44:55] *** Joins: tm512`` (~tm512@50.53.132.213)
[23:44:57] *** Joins: Norkle_ (~norkle@admin.nasa-g0v.com)
[23:44:57] *** Quits: SoF (~skius@user/skius) (Killed (NickServ (GHOST command used by SoF8)))
[23:44:57] *** SoF8 is now known as SoF
[23:44:57] *** ns127 is now known as ns12
[23:44:59] *** Joins: meator (~meator@user/meator)
[23:45:03] *** Joins: trinity_ (9df954e8f1@2604:bf00:561:2000::cd)
[23:45:04] *** Joins: Leonardzzz (~Administr@114.55.127.80)
[23:45:06] *** Joins: joev1 (~joev@user/joev)
[23:45:06] *** Joins: moberg1 (~moberg@luke.millenniumfalcon.org)
[23:45:08] *** Joins: Wulf4 (~Wulf@user/wulf)
[23:45:08] *** Quits: tm512`` (~tm512@50.53.132.213) (Changing host)
[23:45:08] *** Joins: tm512`` (~tm512@user/tm512)
[23:45:09] *** Joins: moose`` (~moose@user/moose)
[23:45:10] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[23:45:15] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[23:45:18] *** Joins: dos (~dos@dosowisko.net)
[23:45:21] *** Joins: Cyp_ (~cyp@213.237.85.9)
[23:45:22] *** Joins: daurn (~daurnimat@vultr.daurnimator.com)
[23:45:22] *** Joins: mormue0 (~mormue@static.29.186.130.94.clients.your-server.de)
[23:45:25] *** Quits: moose (~moose@user/moose) (Killed (NickServ (GHOST command used by moose``)))
[23:45:26] *** Joins: Dreg (~Dreg@fr33project.org)
[23:45:27] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[23:45:31] *** Joins: EtherNet_ (~ethernet@user/ethernet)
[23:45:31] *** Joins: banc- (banc@gateway/vpn/airvpn/banc)
[23:45:32] *** Joins: geezabiscuit (~Geezabisc@81.107.34.132)
[23:45:32] *** Joins: dcx (~dcx@user/dac)
[23:45:32] *** Quits: geezabiscuit (~Geezabisc@81.107.34.132) (Changing host)
[23:45:32] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[23:45:34] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[23:45:34] *** Quits: gproto23_ (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[23:45:34] *** Quits: ldericher_ (~LDer@pantalaimon.yavook.de) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: hanzo (uid532183@user/hanzo) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: nortoh (~nortoh@user/nortoh) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: remedan (~remedan@octo.cafe) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5401-fb84-56c5-61fd.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: nullptr_ (~nullptr@user/nullptr/x-2182142) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: jayaura (e2d69d141a@2604:bf00:561:2000::2b0) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: randm (~randm@user/randm) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: haniaF_ (~haniaF@83.24.213.141.ipv4.supernova.orange.pl) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: cpuid (~cpuid@user/cpuid) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Macuser (~Macuser@2600:1003:b443:ba56:f53f:81ee:4d7:b651) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: cust (amaama@blackbox.amaama.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Terlisimo1 (~Terlisimo@outofband.ozna.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: asd_ (~noname@user/asd) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: daurnimator (~daurnimat@vultr.daurnimator.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: humky (~humky@user/humky) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: xa0s (~xa0s@mab.sdf.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: totte (~totte@h-82-196-112-155.A166.priv.bahnhof.se) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: th1 (~th@test.secomondo.dk) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: m0shbear (~nope@205.185.119.231) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: tyzoid (~tyzoid@srv1.tyzoid.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: fmac (bf93f83905@2604:bf00:561:2000::26) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: scoobydoo_ (~scooby@user/scoobydoo) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: davidv78 (~davidv7@user/videogameenjoyer) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: pulse_ (~pulse@user/pulse) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Leonard (~Administr@114.55.127.80) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: nostart (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: etchi (~etchi@195.198.128.15) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:ed7a:e85a:394d:a607) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Thedarkb (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: tafa (~tafa@user/tafa) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: sokan (~sokan@athedsl-4548509.home.otenet.gr) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: waveclaw_ (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: drin (~Geezabisc@user/geezabiscuit) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: fstd (~fstd@xdsl-78-35-82-60.nc.de) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Fl1pFl0p (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: etolier_ (~somewhere@116-255-9-224.ip4.superloop.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: novns (~novns@user/novns) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: tm512 (~tm512@user/tm512) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Chpy0 (~chpy@30-8-178-69.static.gci.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: justIrresolute (~justache@user/justache) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: vin (~vin@user/crash) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: beneth (~beneth@ip208.ip-54-36-198.eu) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: abraham (~abraham@143.244.185.86) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Karyon_ (~Karyon@user/karyon) (Read error: Connection reset by peer)
[23:45:37] *** Joins: jayaura (e2d69d141a@2604:bf00:561:2000::2b0)
[23:45:37] *** Quits: dogbert_2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: candide (~pbot3@about/c/bot/candide) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Maxdaman1us (~Maxdamant@user/maxdamantus) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: reset (~reset@user/reset) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: coruja (~coruja@user/coruja) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Cyp (~cyp@213.237.85.9) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: LuKaRo (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 240 seconds)
[23:45:37] *** Joins: kaichiuc1u (~kaichiuch@144.202.8.127)
[23:45:37] *** Quits: Klinda (~superleag@user/klinda) (Read error: Connection reset by peer)
[23:45:37] *** Quits: alicef_ (~none@gentoo/developer/alicef) (Remote host closed the connection)
[23:45:37] *** Quits: kenanmarasli_ (~kenanmara@user/kenanmarasli) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: NEYi_ (~NEYi@109.251.216.38) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: zer0bitz (~zer0bitz@196.244.192.57) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: esselfe (~steph@user/esselfe) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: baloona (~baloona@mail.baloona.de) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: travankor (travankor@user/travankor) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[23:45:37] *** randm_ is now known as randm
[23:45:38] *** trinity_ is now known as trinity
[23:45:38] *** heiner is now known as boreas
[23:45:38] *** Quits: xcm_ (~xcm@user/xcm) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: Radionova327 (~TStaley@097-070-031-249.res.spectrum.com) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: eht (~eht@user/eht) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: Teukka (~teukka@user/Teukka) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 240 seconds)
[23:45:38] *** Jck_true8 is now known as Jck_true
[23:45:38] *** Joins: zlg_ (~zlg@user/zlg)
[23:45:38] *** Joins: alicef (~none@gentoo/developer/alicef)
[23:45:38] *** Joins: etolier (~somewhere@116-255-9-224.ip4.superloop.com)
[23:45:38] *** coruja_ is now known as coruja
[23:45:38] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[23:45:40] *** Wulf4 is now known as Wulf
[23:45:42] *** Quits: kaichiuc1u (~kaichiuch@144.202.8.127) (Changing host)
[23:45:42] *** Joins: kaichiuc1u (~kaichiuch@user/kaichiuchu)
[23:45:43] *** Joins: hanzo_ (uid532183@user/hanzo)
[23:45:44] *** Joins: xcm___ (~xcm@user/xcm)
[23:45:45] *** Quits: xcm__ (~xcm@user/xcm) (Read error: Connection reset by peer)
[23:45:45] *** Joins: m0shbear (~nope@205.185.119.231)
[23:45:46] *** Joins: cart_man (~rynot@host-78-144-125-216.as13285.net)
[23:45:50] *** Joins: earnest (~earnest@user/earnestly)
[23:45:52] *** Joins: dstein64- (~dstein64@dannyadam.com)
[23:45:58] *** Joins: th1 (~th@test.secomondo.dk)
[23:45:59] *** Joins: random-nickname (~random-ni@87.116.167.125)
[23:46:03] *** Joins: cisco87 (~quassel@static.134.4.251.148.clients.your-server.de)
[23:46:04] *** Joins: ra4king1 (~ra4king@roiatalla.com)
[23:46:05] *** Joins: stonkey2 (~stonkey@user/stonkey)
[23:46:05] *** Quits: justIrresolute3 (~justache@user/justache) (Read error: Connection reset by peer)
[23:46:07] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[23:46:07] *** Joins: digilink (~digilink@h69-131-208-47.cncrtn.broadband.dynamic.tds.net)
[23:46:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:46:08] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[23:46:11] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[23:46:12] *** Quits: digilink (~digilink@h69-131-208-47.cncrtn.broadband.dynamic.tds.net) (Changing host)
[23:46:12] *** Joins: digilink (~digilink@user/digilink)
[23:46:12] *** Joins: trisk (~trisk@2601:196:4700:712:8:20ff:fe3e:890e)
[23:46:17] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 240 seconds)
[23:46:17] *** mven8 is now known as mven
[23:46:22] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[23:46:23] *** Joins: leah2 (~leah@vuxu.org)
[23:46:24] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[23:46:26] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:46:28] *** Joins: alip (~alip@chesswob.org)
[23:46:29] *** Joins: vin (~vin@user/crash)
[23:46:32] *** Joins: The_Jag (~The_Jag@host-79-33-196-10.retail.telecomitalia.it)
[23:46:33] *** Joins: gnoo (gnoo@user/gnoo)
[23:46:34] *** Joins: neiluj (~neiluj@2a01:e0a:1f2:d960:ed7a:e85a:394d:a607)
[23:46:34] *** Joins: Karyon (~Karyon@user/karyon)
[23:46:35] *** Quits: alip (~alip@chesswob.org) (Changing host)
[23:46:35] *** Joins: alip (~alip@exherbo/developer/alip)
[23:46:39] *** Joins: cpuid (~cpuid@co5.at)
[23:46:40] *** dstein64- is now known as dstein64
[23:46:41] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[23:46:42] *** Joins: ferdna (~ferdna@cpe-69-23-148-218.elp.res.rr.com)
[23:46:44] *** Joins: mahmutov (~mahmutov@5.176.40.51)
[23:46:45] *** Joins: Praise (~Fat@user/praise)
[23:46:45] *** Joins: Klinda (~superleag@user/klinda)
[23:46:45] *** Joins: baloona (~baloona@mail.baloona.de)
[23:46:45] *** Joins: novns (~novns@sumbur.info)
[23:46:48] *** Quits: ferdna (~ferdna@cpe-69-23-148-218.elp.res.rr.com) (Changing host)
[23:46:48] *** Joins: ferdna (~ferdna@user/ferdna)
[23:46:50] *** Joins: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[23:46:50] *** Quits: novns (~novns@sumbur.info) (Changing host)
[23:46:50] *** Joins: novns (~novns@user/novns)
[23:46:51] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[23:46:52] *** Quits: stonkey (~stonkey@user/stonkey) (Read error: Connection reset by peer)
[23:46:54] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[23:46:56] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[23:46:56] *** Joins: cpuid (~cpuid@user/cpuid)
[23:46:56] *** vin is now known as Guest4084
[23:46:57] *** Joins: Maxdamantus (~Maxdamant@124.197.32.108)
[23:47:01] *** Joins: Mindiell_ (~Mindiell@82-64-206-161.subs.proxad.net)
[23:47:01] *** moose`` is now known as moose
[23:47:03] *** Quits: KevinX_ (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[23:47:03] *** Quits: sebag1 (~guest@91.245.82.2) (Ping timeout: 256 seconds)
[23:47:03] *** Quits: ArtisticMask (~masque@user/fluffymask) (Ping timeout: 256 seconds)
[23:47:03] *** Quits: Maxdamantus (~Maxdamant@124.197.32.108) (Changing host)
[23:47:03] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[23:47:05] *** Joins: Enitin (~Enitin@82.102.22.86)
[23:47:05] *** Joins: mrec_ (~markus@sundtek.de)
[23:47:06] *** Joins: kapil- (~kapil@2a01:4f9:c010:c9c3::1)
[23:47:07] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[23:47:08] *** Joins: dexter0_ (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[23:47:12] *** Joins: tafa (~tafa@user/tafa)
[23:47:12] *** Quits: ColdKeybo[a]rd (~ColdKeybo@user/coldkeyboard) (Quit: ZNC - https://znc.in)
[23:47:13] *** Quits: hayaliali (~alip@exherbo/developer/alip) (Read error: Connection reset by peer)
[23:47:14] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[23:47:14] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (*.net *.split)
[23:47:14] *** Quits: Charadon (~Charadon@155.138.164.183) (*.net *.split)
[23:47:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[23:47:14] *** Quits: inlight (~inlight@user/inlight) (*.net *.split)
[23:47:14] *** Quits: alch (~alch@151.34.178.233) (*.net *.split)
[23:47:14] *** Quits: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu) (*.net *.split)
[23:47:14] *** Quits: magla (~gelignite@55d4e4de.access.ecotel.net) (*.net *.split)
[23:47:14] *** Quits: Brainium (~brainium@user/brainium) (*.net *.split)
[23:47:14] *** Quits: mrig (~mrig@user/mrig) (*.net *.split)
[23:47:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (*.net *.split)
[23:47:14] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[23:47:14] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[23:47:14] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[23:47:14] *** Quits: WAR10CK (~WAR10CK@14.223.183.246) (*.net *.split)
[23:47:14] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (*.net *.split)
[23:47:14] *** Quits: earnestly (~earnest@user/earnestly) (*.net *.split)
[23:47:14] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[23:47:14] *** Quits: Whatshisface (~jon@catv-178-48-246-132.catv.broadband.hu) (*.net *.split)
[23:47:14] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[23:47:14] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[23:47:14] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[23:47:14] *** Quits: fbiagent (~fbiagent@user/fbiagent) (*.net *.split)
[23:47:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[23:47:14] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[23:47:14] *** Quits: Viewday11 (~Viewday@user/viewday) (*.net *.split)
[23:47:14] *** Quits: noose (~noose@user/noose) (*.net *.split)
[23:47:14] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (*.net *.split)
[23:47:14] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (*.net *.split)
[23:47:15] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[23:47:15] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[23:47:15] *** Quits: llh (~llh@user/llh) (*.net *.split)
[23:47:15] *** Quits: Fr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net) (*.net *.split)
[23:47:15] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[23:47:15] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[23:47:15] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[23:47:15] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[23:47:15] *** Quits: Brewster (~Brewster@104.145.226.5) (*.net *.split)
[23:47:15] *** Quits: Mindiell (~Mindiell@python/afpy/mindiell) (*.net *.split)
[23:47:15] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[23:47:15] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[23:47:15] *** Quits: foul_owl (~kerry@97-126-11-68.tukw.qwest.net) (*.net *.split)
[23:47:15] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[23:47:15] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (*.net *.split)
[23:47:15] *** Quits: jan6 (jan6@tilde.team/user/jan6) (*.net *.split)
[23:47:15] *** Quits: joev (~joev@pool-108-34-251-123.prvdri.fios.verizon.net) (*.net *.split)
[23:47:15] *** Quits: edk (~edk@libera/staff/edk) (*.net *.split)
[23:47:15] *** Quits: w41 (~w41@45.76.32.7) (*.net *.split)
[23:47:15] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (*.net *.split)
[23:47:15] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[23:47:16] *** Quits: kzootech (~contact@kzoo.tech) (*.net *.split)
[23:47:16] *** Quits: aighearach (~paris@user/aighearach) (*.net *.split)
[23:47:16] *** Quits: kapil (~kapil@okweb.co.in) (*.net *.split)
[23:47:16] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[23:47:16] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[23:47:16] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[23:47:16] *** Quits: jkl (~jkl@user/jkl) (*.net *.split)
[23:47:16] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[23:47:16] *** Quits: heftig (heftig@archlinux/developer/heftig) (*.net *.split)
[23:47:16] *** Quits: kuku01 (~kuku@user/kuku) (*.net *.split)
[23:47:16] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[23:47:16] *** Quits: majors (~majors@user/majors) (*.net *.split)
[23:47:16] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[23:47:16] *** Quits: xcm (~xcm@user/xcm) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:41] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:53:02] *** Quits: Akawama[m] (~akawama@user/akawama) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: nmat[m] (~nmatsemat@2001:470:69fc:105::1:5553) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: hussam (~hussam@user/hussam) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (Ping timeout: 240 seconds)
[23:53:02] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 240 seconds)
[23:53:14] *** Quits: Guest6221 (~mercvrivs@2001:470:69fc:105::2ee6) (Ping timeout: 252 seconds)
[23:53:14] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (Ping timeout: 252 seconds)
[23:53:14] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (Ping timeout: 252 seconds)
[23:53:16] *** Quits: mattmurr[m] (~mattmurrt@2001:470:69fc:105::1:5ea0) (Ping timeout: 245 seconds)
[23:53:20] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 268 seconds)
[23:53:21] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 268 seconds)
[23:53:22] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[23:53:23] *** Joins: edk (edk@libera/staff/edk)
[23:53:40] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[23:53:40] *** Joins: crudo (~crudo@livredigital.com)
[23:53:43] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[23:53:47] *** Quits: jinsun_ (~jinsun@user/jinsun) (Ping timeout: 252 seconds)
[23:53:49] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (Ping timeout: 250 seconds)
[23:53:49] *** Quits: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f) (Ping timeout: 250 seconds)
[23:53:53] *** Joins: plastico (~plastico@neomutt/plastico)
[23:53:55] *** Joins: Enitin (~Enitin@82.102.22.86)
[23:53:57] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Ping timeout: 268 seconds)
[23:53:57] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (Ping timeout: 268 seconds)
[23:53:57] *** Quits: jkssodhxu[m] (~barzarian@2001:470:69fc:105::1:3a12) (Ping timeout: 268 seconds)
[23:53:57] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (Ping timeout: 268 seconds)
[23:53:57] *** Joins: |smlckz| (smlckz@user/smlckz)
[23:54:00] *** Joins: nisstyre (~wes@user/nisstyre)
[23:54:01] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 250 seconds)
[23:54:05] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[23:54:06] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 245 seconds)
[23:54:08] *** Server sets mode: +Ccntz 
[23:54:30] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[23:54:33] *** Joins: deflected (~deflected@user/deflected)
[23:54:34] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[23:54:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:54:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:54:36] *** Joins: wroathe (~wroathe@user/wroathe)
[23:55:05] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[23:55:38] *** Joins: skapata (~Skapata@user/skapata)
[23:55:53] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[23:56:00] *** Joins: summonner (~summonner@188.26.74.156)
[23:56:08] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[23:56:27] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[23:56:31] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-59.cspire.com)
[23:56:43] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[23:56:45] *** apotheon_ is now known as apotheon
[23:56:46] *** Joins: LucaTM (~LucaTM@user/lucatm)
[23:56:55] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[23:57:15] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[23:57:23] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[23:57:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Quit: Quit)
[23:58:03] *** Joins: Daniel[m] (~danielbau@2001:470:69fc:105::1:1a5d)
[23:58:10] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[23:58:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86)
[23:58:23] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[23:58:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b58d:d8c9:2199:bc86) (Remote host closed the connection)
[23:58:47] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[23:59:13] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:59:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:59:28] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:59:40] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:ed7a:e85a:394d:a607) (Quit: WeeChat 3.1)
