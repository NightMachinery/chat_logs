[01:09:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:21:43] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[01:51:45] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[02:03:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:46:22] <FromDiscord> <abdu> What this error solution :↵Error: unhandled exception: Can't obtain a value from a `none` [UnpackDefect]
[02:47:20] <nrds> <06Prestige99> Need to check if yourOption.isSome first?
[02:47:39] <nrds> <06Prestige99> https://nim-lang.org/docs/options.html#isNone%2COption%5BT%5D isNone and isSome
[02:49:42] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[02:53:26] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[02:54:34] <FromDiscord> <Elegantbeef> TO elaborate `Defect` s are logical issues which can easily be resolved with checks like prestige eluded to
[02:57:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:05:13] <arkanoid> how can I write and get a list with parsecfg?
[03:05:20] <arkanoid> it seems only key:value
[03:05:58] <FromDiscord> <Elegantbeef> The jovial side of me cannot help but say "use toml" 😀
[03:06:18] <FromDiscord> <Arathanis> or yaml
[03:07:05] <FromDiscord> <Arathanis> i think config files which are generally `ini` files are pretty strictly key:value (as string). But if you know its a string representation of a list it shouldn't be too hard to parse your sequence our using split, etc
[03:07:17] <FromDiscord> <Arathanis> (edit) "our" => "out"
[03:07:21] <arkanoid> yeah but it is ugly
[03:07:30] <arkanoid> well, let's move to yaml
[03:07:58] <FromDiscord> <Arathanis> well if you make a nice proc to parse the sequence out you can make it beautiful but i like yaml a lot better anyway so I cant say I disagree with you
[03:12:56] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[03:24:15] <FromDiscord> <huantian> to misquote a youtuber, I use yaml because I love myself
[03:28:30] *** Joins: xet7 (~xet7@user/xet7)
[03:30:19] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:44] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:40:19] <arkanoid> the timeout arg of newHttpClient seems not working
[03:40:50] <arkanoid> I'm setting it to 3000, but it waits endlessly. Wireshark shows no data received from the server
[03:45:55] <arkanoid> tcpdump clearly shows data going only from client to server and never back, but the timeout is not triggered
[03:54:14] *** Quits: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net) (Ping timeout: 250 seconds)
[03:55:45] *** Joins: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net)
[04:21:39] <FromDiscord> <congusbongus> Yaml is definitely nicer to hand edit↵But its spec is quite complicated, and you can do some unsafe stuff with it↵Which is often why I prefer json, it’s more widely supported and dead simple
[04:44:33] <FromDiscord> <abdu> sent a long message, see http://ix.io/3PyB
[04:44:49] <FromDiscord> <abdu> (edit) "http://ix.io/3PyB" => "http://ix.io/3PyC"
[04:45:12] <FromDiscord> <Elegantbeef> `m = none(Match)`
[04:45:35] <FromDiscord> <abdu> (edit) "http://ix.io/3PyC" => "http://ix.io/3PyD"
[04:47:06] <FromDiscord> <Elegantbeef> Or just dont reuse the variable
[04:49:58] <FromDiscord> <⃟⃟> i think its become clear the python style syntax was a mistake
[04:50:46] <FromDiscord> <Elegantbeef> No
[04:51:08] <FromDiscord> <Elegantbeef> I've yet see any reason to think that
[05:21:24] *** Quits: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:21:46] *** Joins: rp1 (~rp@cpc77299-basf12-2-0-cust609.12-3.cable.virginm.net)
[05:46:03] <NimEventer> New question by itil memek cantik: To clear Options[nre.match] up on nim regex, see https://stackoverflow.com/questions/71106505/to-clear-optionsnre-match-up-on-nim-regex
[05:46:31] <FromDiscord> <Elegantbeef> @abdu\: i answered you question here already
[05:54:16] <arkanoid> if I do -d:mingw on linux I get a working cross-compiled x64 .exe that works on wine64. If I do -d:mingw32 it seems to compile, it gives no error but the output binary is not generated 
[05:55:39] <FromDiscord> <Elegantbeef> It might only do the Nim compilation and not compile the binary, just like you're supposed to use i386
[05:57:10] <arkanoid> you're right: it works with --d:mingw --cpu:i386, but it fails to execute
[05:57:20] <arkanoid> Error: unhandled exception: lexbase.nim(138, 9) `input != nil`  [AssertionDefect]
[06:17:25] <arkanoid> I'm pretty sure linux -> windows cross  compilation was working the last time I tried
[06:21:31] <FromDiscord> <Elegantbeef> It worked for me the last i tried it aswell, though never 64bit -\> 32
[06:50:37] <arkanoid> Elegantbeef, seems that async is the problem. My last toy is using just std + yaml packages, but it fails also x64 (--d:mingw)
[06:51:43] <arkanoid> toolchains/nim-1.6.4/lib/pure/streams.nim(176) close -> SIGSEGV: Illegal storage access. (Attempt to read from nil?)
[06:51:43] <FromDiscord> <sheldon> https://github.com/sveltejs/svelte
[06:52:52] <arkanoid> sheldon, interesting
[06:54:35] <arkanoid> it goes sigsegv even when removing yaml module and use just std stuff
[07:28:36] <arkanoid> it sigsegv on windows too
[07:29:20] <FromDiscord> <Rika> Are you double closing? Even though that shouldn’t be an issue I would be led to believe
[07:29:36] <arkanoid> ?
[07:33:17] <FromDiscord> <Rika> It says in the error it’s related to a stream
[07:33:31] <FromDiscord> <Rika> And close
[07:35:30] <arkanoid> Rika, there's just 1 "close" reference in my whole codebase, that's a 100 lines script
[07:35:44] <arkanoid> I've also tried refc vs orc
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:06] <FromDiscord> <Rika> You’re in debug right
[07:37:10] <FromDiscord> <Rika> No stack trace?
[07:39:03] <arkanoid> ok I think I've found something
[07:40:46] <FromDiscord> <Elegantbeef> What'd you find?!
[07:43:49] <arkanoid> the SIGSEGV was due to me trying to remove yaml dependency and forgetting to inizialize a ref var, so that can be put aside, but yaml module won't run on windows
[07:44:13] <arkanoid> I mean this: https://nimyaml.org/
[07:46:13] <FromDiscord> <Elegantbeef> It's CI does run on windows
[08:09:45] <FromDiscord> <Rika> It should
[08:09:55] <FromDiscord> <Rika> Any reason you’re using YAML though
[08:11:40] <FromDiscord> <haolian9 (高浩亮)> @\_discord\_882793909246369864\:t2bot.io thanks, it helps a lot↵(@auxym)
[08:18:56] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:38:25] <FromDiscord> <huantian> huh just realized, is #community-events not announcing forum posts anymore
[08:40:43] <FromDiscord> <Elegantbeef> Perhaps the forum update broke it
[09:19:47] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[09:21:46] *** Quits: oz (~oz@crystal/user/oz) (*.net *.split)
[09:21:46] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (*.net *.split)
[09:21:46] *** Quits: fowl (~fowlmouth@user/fowl) (*.net *.split)
[09:21:46] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[09:21:46] *** Quits: systemdsucks (~systemdsu@user/systemdsucks) (*.net *.split)
[09:21:46] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (*.net *.split)
[09:21:46] *** Quits: syl (~z@user/syl) (*.net *.split)
[09:21:46] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (*.net *.split)
[09:21:46] *** Quits: tinystoat (~squeek@user/tinystoat) (*.net *.split)
[09:21:46] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[09:22:00] *** Joins: ox (~oz@crystal/user/oz)
[09:22:24] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[09:22:24] *** Joins: fowl (~fowlmouth@user/fowl)
[09:22:24] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[09:22:24] *** Joins: flynn (~mcbloch@user/flynn)
[09:22:24] *** Joins: tinystoat (~squeek@user/tinystoat)
[09:22:24] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[09:22:24] *** Joins: syl (~z@user/syl)
[09:22:24] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[09:22:24] *** Joins: systemdsucks (~systemdsu@user/systemdsucks)
[09:25:03] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[09:25:03] *** Quits: adium (adium@user/adium) (*.net *.split)
[09:25:19] *** Joins: dom96 (~dom@mail.nim-lang.org)
[09:27:29] *** Joins: adium (adium@user/adium)
[09:28:58] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[09:34:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:47:30] <FromDiscord> <Elegantbeef> @Phil\: did you ever get webp working?
[09:48:23] <FromDiscord> <Phil> In reply to @Elegantbeef "<@180601887916163073>\: did you ever": I had zilch time to get to work on it last weak, I was a bit behind on note taking on dnd sessions and made sure last week to get caught up there
[09:49:17] <FromDiscord> <Elegantbeef> Ah was just wondering 😀
[11:03:19] *** Joins: PMunch (~PMunch@user/pmunch)
[11:21:50] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[11:22:10] *** Joins: supakeen (~user@python/site-packages/supakeen)
[11:38:57] <FromDiscord> <Phil> In reply to @Elegantbeef "Ah was just wondering": I'll get back onto it one of these days once I've caught up with everything, I let the note taking slide a bit two weeks ago during vacation to get a lot of other stuff done
[12:49:32] <FromDiscord> <sheldon> https://tika.apache.org/
[12:49:42] <FromDiscord> <sheldon> https://github.com/ipfs-search/ipfs-tika
[12:49:51] <FromDiscord> <sheldon> https://github.com/ipfs-search/ipfs-search
[12:51:05] <FromDiscord> <Elegantbeef> What's with the random links?
[12:55:08] <FromDiscord> <sheldon> It's IPFS-search
[12:55:20] <FromDiscord> <sheldon> https://ipfs-search.com/#/
[12:55:30] <FromDiscord> <Elegantbeef> Sure but what's the point posting it here?
[12:56:03] <FromDiscord> <sheldon> just for sharing😄
[12:56:42] <PMunch> It's not related to Nim though
[12:56:42] <FromDiscord> <sheldon> If anyone got interested
[12:58:54] <FromDiscord> <Rika> Your messages are appreciated but please share in #offtopic next time, thanks
[13:01:14] <FromDiscord> <sheldon> or there might be some implement in Nim already, who knows. If there is any please let me know.
[13:02:20] <FromDiscord> <sheldon> It uses Tika to detects and extracts metadata and text.
[13:14:04] <FromDiscord> <sheldon> Tika(Java)+ElasticSearch(Java) +RabbitMQ(Erlang) + Crawler(in Go)
[14:19:43] <FromDiscord> <Rika> In reply to @sheldon "Tika(Java)+ElasticSearch(Java) +RabbitMQ(Erlang) + ": For Rabbit, you only need an AMQP client; the others probably need a binding other than crawler, probably could be reimplemented
[14:19:59] <FromDiscord> <Rika> Especially that it’s a fucking pain interoping with Go or Rust
[14:26:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[14:27:54] *** Joins: arkurious (~arkurious@user/arkurious)
[14:54:54] <FromDiscord> <abdu> How do we pre allocate a number of seq's size ?
[14:56:45] <FromDiscord> <Rika> newSeqOfCap
[14:57:01] <FromDiscord> <Rika> This does not create new data entries but allocates the memory needed
[15:03:21] <PMunch> newSeq if you want to have a sequence that is a certain length, newSeqOfCap if you want an empty sequence but with enough allocated memory to grow to the specified size
[15:04:27] <PMunch> By default sequences allocates room for a couple elements, and if you add more than those elements it will reallocate the buffer while growing it to a new bigger capacity. So if you're adding a lot of elements then it might be worth pre-allocating all the memory
[15:06:32] <FromDiscord> <Rika> If you know the size beforehand, yes
[15:06:50] <FromDiscord> <Rika> Or if you know that you will add many items
[15:14:57] <FromDiscord> <haxscramper> PMunch: I also realized that sqlite has support for fulltext search built into it, so generated documentation can benefit from this as well. IIRC there was even a way to host sqlite db on github pages without using separate server, so in theory you can get a full working index of the project and make it actually searcheable by only using static site generation
[15:16:19] <PMunch> Not really static if is uses a sqlite server in the background. But I get your point
[15:16:27] <PMunch> This is one of the things I wanted to do with the JSON output
[15:17:45] <PMunch> The reason I've gone for JSON as the format is that it is very widely supported, and as long as the compiler could spit out only a single documentation format we will be 100% sure that the output of the compiler can in fact be used to generate everything the official docs are able to generate.
[15:18:07] <PMunch> How do you treat RST in your SQLite version by the way?
[15:18:25] <FromDiscord> <haxscramper> In reply to @PMunch "Not really static if": no, it is possible to host it entirely static
[15:18:47] <FromDiscord> <haxscramper> https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/
[15:19:09] <FromDiscord> <haxscramper> In reply to @PMunch "How do you treat": I gave you an example of a current sqlite database
[15:19:33] <FromDiscord> <haxscramper> Right now I store the original documentation comment text as i
[15:19:38] <FromDiscord> <haxscramper> as well as runnable examples
[15:20:35] <FromDiscord> <haxscramper> I think it would be relatively easy to store blobs of the linearized RST AST in the database as well, with  all the necessary processing already performed
[15:21:29] <PMunch> Ah so you would still need an RST parser on the producer end
[15:21:56] <FromDiscord> <haxscramper> what else?
[15:22:08] <FromDiscord> <haxscramper> yes, of course db generator better read the rst and process it
[15:22:20] <FromDiscord> <haxscramper> the whole point of db is to contain only processed information
[15:23:35] <PMunch> A site which uses JavaScript to do a bunch of stuff isn't static though..
[15:23:46] <PMunch> But it's a cool idea nonetheless
[15:24:20] <PMunch> Well I was thinking of parsing the RST into a JSON representation as well
[15:24:37] <PMunch> Hmm, well I guess it would be static since it doesn't actually need anything but the file from the server
[15:24:45] <FromDiscord> <haxscramper> static site doesn't require server
[15:25:22] <FromDiscord> <haxscramper> and you would still generate it from the db, just having it around later on allows you to serach
[15:25:24] <FromDiscord> <haxscramper> (edit) "serach" => "search"
[15:25:40] <FromDiscord> <haxscramper> generator would take db and produce static site
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:50] *** Joins: Vladar (~Vladar@46.162.2.53)
[15:38:05] <PMunch> For that site though you do need a server, because the SQL HTTP VFS needs to be able to do HTTP Range requests
[15:38:16] <PMunch> So you need a compliant HTTP server
[15:38:40] <PMunch> I mean you could build a static version which worked on a local SQLite file, but what he proposes isn't static
[15:38:41] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[15:39:23] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[15:39:42] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[15:54:05] <FromDiscord> <haxscramper> The point is - I can just upload the documentation on github pages and it will work
[15:54:10] <FromDiscord> <haxscramper> For me that's static enough
[15:54:35] <FromDiscord> <haxscramper> I'm not web developer, so I don't care about nuanced terminology here
[15:55:05] <FromDiscord> <haxscramper> If `./make-site.sh` generates a lot of `.html` that I can put on gh pages it is "static" for me
[15:57:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:03:06] <FromDiscord> <ajusa> In reply to @haxscramper "The point is -": Well it also makes 10s of requests, but it would still be an improvement over existing docs
[16:09:21] <FromDiscord> <haxscramper> how to store processed RST in the database is not entirely clear
[16:09:40] <FromDiscord> <haxscramper> just putting JSON AST text blobs can work out, technically
[16:09:58] <FromDiscord> <haxscramper> Alhtough I would much rather prefer to have some form of semantic annotations as well
[16:10:18] <FromDiscord> <haxscramper> Like `<thing#other>` for "links" we have right now, this would have to be reparsed and reanalyzed
[16:10:53] <FromDiscord> <haxscramper> So there are going to be extensions to the stored json, for example when you link to something in comment, if you are in db you just have the entry ID linked
[16:11:34] <FromDiscord> <haxscramper> if all you have is json I suppose you can write IDs as well, but that means each reader would have to keep the map of active documentable entries to properly convert generated documentation comment to something
[16:15:06] <FromDiscord> <haxscramper> And "see also" as well as links to other elements in documentation are important
[16:15:17] <FromDiscord> <haxscramper> Doesn't help that current way of linking is completely insane
[16:16:15] <FromDiscord> <haxscramper> I mean, you have to spell `_every,single,argument,of,the,procedure,you,have,in,its,args,even,if,it,is,a,single,proc,with,this,name,across,the,whole,code`
[16:16:19] <FromDiscord> <haxscramper> (edit) "`_every,single,argument,of,the,procedure,you,have,in,its,args,even,if,it,is,a,single,proc,with,this,name,across,the,whole,code`" => "`_every,single,argument,of,the,procedure,you,have,in,its,args,even,if,it,is,a,single,proc,with,this,name,across,the,whole,code_`"
[16:16:47] <FromDiscord> <haxscramper> and as usual this loops back to the lack of proper IR/DB where you can `SELECT id WHERE name = 'myLinkedProc'`
[16:17:21] <FromDiscord> <haxscramper> (edit) "id" => "idn FROM entries"
[16:31:22] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[16:44:08] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[17:20:18] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[17:21:04] <NimEventer> New Nimble package! packedArgs - a convention mainly created for `createThread` proc, see https://github.com/hamidb80/packedArgs
[17:42:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:46:08] <FromDiscord> <Hamid_Bluri> yay
[17:46:51] <FromDiscord> <Hamid_Bluri> I feel like a useful member
[17:49:25] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[18:06:29] *** Quits: mahlon_ (~mahlon@martini.nu) (Ping timeout: 256 seconds)
[18:07:06] *** Joins: rockcavera (~rc@192.12.112.205)
[18:07:06] *** Quits: rockcavera (~rc@192.12.112.205) (Changing host)
[18:07:06] *** Joins: rockcavera (~rc@user/rockcavera)
[18:10:33] <FromDiscord> <lantos> sent a code paste, see https://paste.rs/p1t
[18:11:26] <FromDiscord> <lantos> (edit) "https://play.nim-lang.org/#ix=3PB0" => "https://play.nim-lang.org/#ix=3PAZ"
[18:19:08] <FromDiscord> <Rika> I don’t remember if the compiler has this optimisation but it’s called “NRVO” named return value optimisation
[18:20:38] <FromDiscord> <lantos> sent a code paste, see https://paste.rs/9Yg
[18:21:55] <FromDiscord> <lantos> (edit) "https://play.nim-lang.org/#ix=3PB5" => "https://play.nim-lang.org/#ix=3PB4"
[18:22:43] <FromDiscord> <demotomohiro> Using variables declared outside of procs are not much optimized.
[18:25:29] <FromDiscord> <demotomohiro> sent a code paste, see https://play.nim-lang.org/#ix=3PB7
[18:26:00] <FromDiscord> <lantos> ah oop
[18:26:03] <FromDiscord> <lantos> (edit) "oop" => "oops"
[18:42:08] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[19:09:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[19:21:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[19:32:33] <NimEventer> New question by Artem Klevtsov: Static likinking C++ library with Nim C backend, see https://stackoverflow.com/questions/71114756/static-likinking-c-library-with-nim-c-backend
[19:35:09] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:31:53] <FromDiscord> <mratsim> Is it possible to describe a threadpool concept? How would you describe `pool.spawn fn(parameters)`?
[20:32:17] <FromDiscord> <mratsim> when spawn is a macro
[20:32:29] <FromDiscord> <mratsim> (don't have access to Nim atm)
[21:04:05] <FromDiscord> <konsumlamm> just `untyped` maybe?
[21:04:43] <FromDiscord> <konsumlamm> i'm not sure if you can encode the shape of the argument in the type (or a concept body), but i don't think it's possible
[21:23:38] <FromDiscord> <untoreh> If I have a file (svg), is it possible to parse it into a karax vnode?
[21:28:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[21:35:28] *** Joins: mahlon (~mahlon@martini.nu)
[22:32:29] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (Ping timeout: 256 seconds)
[22:48:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:24:56] <FromDiscord> <JohnDoe> Hello, I am trying to use nimpy to extend some functionality in nim by feeding it some python. However, I am trying to interact with a dictionary but I keep getting pyobject errors. I was told I could serialize to json and then deserialize back to nim; is this possible in this way?
[23:25:31] <FromDiscord> <JohnDoe> `cpuinfo.get_cpu_info()['brand_raw']`
[23:28:38] <FromDiscord> <tandy> if i have a table of length 1, how do i get the item in it?
[23:43:47] *** Joins: kenran (~kenran@200116b82bfd62002ef1903d7b4c4780.dip.versatel-1u1.de)
[23:46:33] *** Quits: kenran (~kenran@200116b82bfd62002ef1903d7b4c4780.dip.versatel-1u1.de) (Client Quit)
[23:46:49] <FromDiscord> <leorize> you loop through it
[23:46:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[23:51:24] <FromDiscord> <tandy> makes sens
[23:58:21] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
