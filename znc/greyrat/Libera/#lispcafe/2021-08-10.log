[00:03:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:18:01] *** Joins: selwyn (~selwyn@user/selwyn)
[00:41:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:45:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[00:46:50] *** Joins: aeth (~aeth@user/aeth)
[00:52:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:05:40] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[01:24:49] *** Joins: Alfr (~Alfr@user/alfr)
[01:25:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:33:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:57:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:59:41] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:d182:fd4:8496:53d5) (Remote host closed the connection)
[02:10:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:15:05] *** Quits: wallymathieu (~wallymath@81-234-151-21-no94.tbcn.telia.com) (Read error: Connection reset by peer)
[02:18:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:24:12] <lotuseater> anyone still awake?
[02:28:51] <White_Flame> no
[02:28:55] <lotuseater> ok
[02:31:03] <gilberth> As it turned midnight, I finally and just got awake.
[02:31:12] <lotuseater> nice
[02:31:29] <moon-child> globalfoundries used to be part of amd
[02:31:37] <lotuseater> ah :)
[02:33:32] <White_Flame> right, I don't know how somebody has not heard of them, being in the industry
[02:33:52] <White_Flame> they used to be one of the top dogs
[02:34:07] <White_Flame> or at least, the upper echelon
[02:34:46] <gilberth> So after I finished my job as a private secerary, I could turn to something productive and _un_tangle TeX.
[02:35:07] <lotuseater> sounds good
[02:35:31] <gilberth> Aren't AMD chips still manufactured by Global Foundries?
[02:35:43] <gilberth> lotuseater: Boring and tedious.
[02:36:27] <lotuseater> I meant what you can do now.
[02:36:35] <gilberth> A long, long time ago AMD used to manufacture in Germany. A pity that they don't anymore.
[02:36:40] <lotuseater> infinite possibilities
[02:37:06] <White_Flame> AMD's CPUs and GPUs are solely TSMC afaik
[02:37:09] <gilberth> lotuseater: I meant that too. There is nothing exciting in untangling TeX.
[02:37:32] <lotuseater> AMD needs more capabilities for that's a reason the new consoles are so rar.
[02:37:34] <gilberth> White_Flame: Oh, then I mixed that up. Thanks.
[02:37:44] <White_Flame> although they likely have other lower tier stuff on glofo
[02:37:45] <lotuseater> gilberth: okay sry
[02:38:09] <White_Flame> nvidia uses both tsmc and samsung for 5nm or so
[02:38:21] <lotuseater> I tidied up my Common Lisp directory about 2h ago
[02:38:36] <White_Flame> (or maybe that was 7nm?  and there were some minor differences between the two, even though they sold under the same product number)
[02:39:01] <lotuseater> 7nm is ... small :D
[02:39:28] <lotuseater> as Feynman said "there's plenty room at the bottom"
[02:40:34] <White_Flame> and there's lots of arguments about what the measurement really is, and foundries are shifting over to branded number products instead of hard measurements
[02:40:58] <White_Flame> there was some movement to standardize on a set of 3 numbers for the process density, but I don't know if that's actually going to take off
[02:47:47] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Ping timeout: 268 seconds)
[02:50:34] <gilberth> That all is marketing like Intel's clock speeds around the beginning of the century.
[02:55:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:03:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:05:24] *** Joins: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net)
[03:22:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[03:26:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:41:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[04:51:28] <hayley> Good morning everyone!
[04:51:41] <lotuseater> good morning hayley :)
[04:52:39] * hayley is amused she might ban someone for deciding to side with infamous assholes, after their presence in a room led her to ask someone else to join.
[04:53:03] <lotuseater> öhm
[04:59:34] <hayley> https://www.youtube.com/watch?v=IEM8x4VFZB0
[05:13:52] *** Quits: random-nick (~random-ni@87.116.181.197) (Ping timeout: 256 seconds)
[05:44:40] <hayley> https://www.youtube.com/watch?v=NO5r2pcMIes
[05:46:14] *** Quits: gilberth (~gilberth@p5492ddaa.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:51:05] *** Joins: iisi_ (sid19824@id-19824.stonehaven.irccloud.com)
[05:55:08] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[05:55:08] *** Quits: iisi (sid19824@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[05:55:09] *** iisi_ is now known as iisi
[06:20:37] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[06:21:01] *** Joins: lad (~lad@user/lad)
[06:21:33] *** Joins: gilberth_ (~gilbert@dynamic-095-112-209-079.95.112.pool.telefonica.de)
[06:21:33] *** ChanServ sets mode: +o gilberth_
[06:21:50] * hayley uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/RATHlrQKHGCbivwpcElAhDlP/brrrrr.png >
[06:22:03] <hayley> when pl is gone
[06:22:13] <gilberth_> Dammit! My DSL link at home failed, so my website is off-line :(
[06:22:55] <gilberth_> Must be one of the silly updates the ISP did. The modem would not always reconnect automatically.
[06:23:46] <gilberth_> Nobody there to power cycle it.
[06:25:50] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:27:15] *** gilberth_ is now known as gilberth
[06:43:04] <hayley> https://beyondloom.com/blog/denial.html lol
[06:50:05] <lotuseater> brrrrr
[06:56:54] *** Quits: gilberth (~gilbert@dynamic-095-112-209-079.95.112.pool.telefonica.de) (Ping timeout: 268 seconds)
[06:57:34] *** Joins: gilberth (~gilbert@dynamic-095-112-044-054.95.112.pool.telefonica.de)
[06:57:34] *** ChanServ sets mode: +o gilberth
[06:57:58] <hayley> http://latencytipoftheday.blogspot.com/2014/06/latencytipoftheday-most-page-loads.html "Why 69? Here is the math:"
[06:58:21] <gilberth> Silly question. Because it's fun.
[06:58:59] <gilberth> No math involved.
[06:59:10] <lotuseater> oh damn yeah
[06:59:16] <hayley> The followup also so happens to find the number 42.
[06:59:18] *** Quits: lad (~lad@user/lad) (Ping timeout: 272 seconds)
[07:00:35] <gilberth> At restaurants I often pick number 42 of the menu by accident. I am not brave enough to walk into one and pick the 42 without reading the menu.
[07:01:37] <lotuseater> there's one funny quote by Don Knuth "I can't go to a restaurant and order food because I keep looking at the fonts of the menu."
[07:01:38] <hayley> http://latencytipoftheday.blogspot.com/2014/06/latencytipoftheday-q-whats-wrong-with_21.html Note to self: add histogram to atomichron so Gil Tene doesn't kill me
[07:02:04] <hayley> HdrHistogram uses some "approximate log" trick I still need to work out.
[07:02:11] <gilberth> Unfortunately I cannot host my website at my real server because of port 8000. :(
[07:02:19] <lotuseater> sad
[07:02:54] <hayley> You take your INTEGER-LENGTH as log2, give or take, then divide the value by (ash length -4) to get 16 buckets with that log2 range or something...
[07:03:00] <gilberth> And _this_ DSL is just too flaky. So somebody must power cycle my modem/router. But who?
[07:03:16] <hayley> Timer wall wart?
[07:03:25] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[07:03:29] <gilberth> For what?
[07:03:46] <hayley> To automatically reboot your modem?
[07:03:55] <hayley> Alternately, connect it to something that pings from the outside?
[07:04:03] <gilberth> It was up for more than 600 days without any glitch. The DSL at the house which wants to kill me.
[07:04:32] <hayley> "hayley's uptime monitoring service - just pay $5/month or whatever your cheapest internet phone plan is"
[07:04:44] <gilberth> hayley: Yes, that would be an idea. I could hook a relay to DTR, say.
[07:04:44] *** Quits: v3ga (~cyberocto@c-73-39-172-34.hsd1.md.comcast.net) (Quit: WeeChat 3.2)
[07:06:07] <hayley> https://www.youtube.com/watch?v=QQ1Zo6faTQY
[07:06:52] <gilberth> OTOH, it's back again!!! Hurray!
[07:07:25] <gilberth> hayley: But thanks for the idea of yours! I'll implement that when I would enter my house again.
[07:07:32] <hayley> Sure.
[07:07:58] <gilberth> IIRC my machine has an RS232. Cheap limited GPIO.
[07:08:04] * hayley also gives bad ideas to the VPS provider she uses. "You see this picture of Google's first server rack..."
[07:09:15] * hayley also found another group which likes cache-line programming and wonders how anyone actually programs like that by hand.
[07:09:38] <gilberth> hayley: Still don't wanna move. I could need someone to care for my damn modem and garden. :)
[07:09:45] <gilberth> ?
[07:10:14] <hayley> What'd Dijkstra say again, "the point is to make layers for which one can be absolutely precise about" or something. Though I can probably make a faster concurrent program than them.
[07:10:22] <lotuseater> I would do, but that seems a bit impractical. ^^
[07:10:33] <hayley> gilberth: Give me a few years, I still have a degree to tend to, and we have lockdowns all the time.
[07:10:52] <hayley> "The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise."
[07:11:04] <lotuseater> sounds good
[07:11:07] <gilberth> hayley: Degrees are cheaper here :)
[07:11:43] *** gilberth is now known as gilberth_
[07:12:07] <hayley> Oh well. Every time I snap my fingers, an idiot is born.
[07:12:08] *** Joins: gilberth (~gilberth@p5492debc.dip0.t-ipconnect.de)
[07:12:08] *** ChanServ sets mode: +o gilberth
[07:12:20] * hayley snaps fingers and someone shouts "Stop snapping your fingers, dammit!"
[07:12:32] <gilberth_> gilberth: Welcome back.
[07:12:34] *** Quits: gilberth_ (~gilbert@dynamic-095-112-044-054.95.112.pool.telefonica.de) (Quit: Leaving)
[07:13:03] <hayley> https://www.youtube.com/watch?v=f8CEBOHmEbk
[07:13:15] <gilberth> hayley: Hopefully in a few years I got rid of said house.
[07:14:51] <hayley> I personally cannot write anything without some degree of abstraction. If the protocol I've been given makes no damn sense I just cannot bring myself to work with it.
[07:15:34] <hayley> So, what horrors is one inflicting on oneself to be in such a group that manages to "handmake" pornographic programs like that?
[07:18:42] <hayley> gilberth: Well, good timing then.
[07:27:05] <gilberth> It's kinda funny when Cocoa complains on stderr about a gcontext being the null pointer and warns that in the future that'll be a fatal error, when that happens within their own API and thus is their bug.
[07:28:51] <gilberth> hayley: We see, current agenda is (1) gain some health (2) Ask my wife to buy a Porsche (3) find a flat in Berlin (4) find a GF and then I'll decide what to do with that house.
[07:31:04] <gilberth> However it's interesting to see how different things happen to bitmap than to a window on-screen. How the hell would you hack your things to make that even happen?
[07:34:21] <lotuseater> one reason more making a visit to Berlin sometime :D
[07:35:12] <gilberth> And they fixed that with 10.14. Now both are broken. At least in the very same way, which is sth I could work with.
[07:36:58] <gilberth> I wonder what 10.7 does.
[07:40:32] <hayley> gilberth: Still, how do people survive this shit? They just don't do anything interesting?
[07:41:58] <hayley> I mean, I'd seriously start to care about L1 misses when designing a hash table, because it is appropriate when things take mere nanoseconds. Do they just not do anything past the ns scale?
[07:44:13] <gilberth> What kind of shit? This Apple shit?
[07:45:22] <hayley> People who complain about abstractions all day.
[07:47:12] <gilberth> BTW I once had fun with PDF. Neither Apple, nor Firefox, nor Adobe, nor my printer agreed on certain test files I created involving patterns. They all confused applying transformations. Some missed it, some applied a transformation twice, etc. Fun!
[07:47:26] <hayley> Above some point you emphasise algorithms more, and then strategies and design. It's much more interesting when your data isn't all in memory (e.g. it's on disk, a network) or it's heterogeneous (e.g. polymorphism, objects).
[07:47:35] <lotuseater> abstractions are an important tool of thought
[07:47:59] <hayley> lotuseater: Well yeah, how do you go about complaining about them and then commit to writing any software?
[07:48:46] <gilberth> hayley: I am  not sure, I follow you. You say people complain about abstractions? Programming is all about abstractions, I once read in a text book.
[07:49:06] <hayley> https://handmade.network/manifesto CW: brain cancer
[07:49:54] <hayley> Also, why does all the crap software use Fira Sans? First Rust, then Racket documentation, then this.
[07:51:22] <lotuseater> hayley: I don't know. I think it's a natural way to abstract, but surely keeping balance. and another tool of thought is notation
[07:51:47] <hayley> .oO( APL advertisement in 3..2..1.. )
[07:51:54] <lotuseater> nonono
[07:51:57] <lotuseater> don't worry :D
[07:52:14] <hayley> Well, I thought "notation as a tool of thought" was some APL paper name.
[07:52:30] <lotuseater> being symbolic (in the lisp sense) is powerful
[07:52:45] <hayley> FWIW I am not complaining :)
[07:52:53] <lotuseater> hayley: yes it's also, one of the central papers by Ken Iverson
[07:53:15] <gilberth> That "handmade" article is silly at best.
[07:53:44] <hayley> gilberth: Honestly, I still take the letter by Henry Baker literally, and say worst case it kills people.
[07:54:55] <hayley> ...assuming somehow someone gets hired on a very dangerous project. Which has happened before.
[07:55:43] <lotuseater> hayley: I once explained to someone who asked why anyone wants symbolic stuff, I told him that a reason could be when you go down too early to numerics you loose information.
[07:57:35] <hayley> lotuseater: Indeed. Though my domain is more object/protocol-oriented as we only care about putting messages on the wire, not what they look like.
[07:58:24] <lotuseater> yeah
[07:58:55] <lotuseater> or when doing message passing this is symbolic too
[08:00:21] <lotuseater> or take emojis for another example, much information compressed in one picture, or more information with simple serial arrangements of them
[08:01:56] <lotuseater> then it's just the task for the receiver how to interpret
[08:03:26] <lotuseater> so this concept applies to even more than just experimental mathematics or computer algebra systems :)
[08:04:18] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Remote host closed the connection)
[08:06:27] <gilberth> Hmm, could I simulate stroked text with bitmap fonts?
[08:08:02] <gilberth> But then those fonts are at small sizes anyway, stroking them would not look nice.
[08:18:46] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:51:24] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[09:16:21] *** Joins: ahlk (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net)
[09:29:33] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[09:41:36] *** Joins: sm2n (~sm2n@user/sm2n)
[09:51:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[10:08:40] *** Quits: ahlk (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 272 seconds)
[10:10:01] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[10:21:17] <hayley> gilberth: Guess you could, but then (assuming one and only one bitmap per character) the strokes have to end up in the same spot each time.
[10:23:50] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:24:07] <dave0> re maw
[10:27:18] <hayley> https://www.youtube.com/watch?v=RF4642pdpdU
[10:44:57] <hayley> Hm, if we have thread-local heaps, can't we optimize some race detector faster by skipping detection for thread-local objects? They clearly can't race if they are thread-local.
[10:48:14] *** Joins: selwyn (~selwyn@user/selwyn)
[10:54:17] *** Joins: shka (~herr@109.231.62.239)
[10:55:24] <hayley> https://link.springer.com/content/pdf/10.1007/3-540-45718-6_81.pdf does that with static escape analysis, which is pretty similar.
[10:57:32] <hayley> Huh, Craig Chambers and Urs Hölzle both also worked on removing synchronisation from Java programs? Strange career path, but handy.
[11:15:20] *** Joins: makomo (~makomo@user/makomo)
[11:37:53] * selwyn read that as craig charles
[11:48:46] <hayley> https://www.youtube.com/watch?v=sM7odiEO1k8
[11:48:46] <hayley> me: time to work
[11:49:01] <hayley> also me: okay I ran (SICL-BOOT:BOOT) time to re-read up on vector clocks and bop around to this
[11:56:17] <hayley> https://www.youtube.com/watch?v=kVk2G6zSB-k black pepper sosig
[12:27:45] <hayley> https://www.youtube.com/watch?v=EgtKwxzgggg "Poundland lithium cell vs the mighty AvE hammer"
[12:28:00] <hayley> 4 gs in a row in the video ID? Sheesh.
[12:28:17] <selwyn> gg
[12:41:23] *** Joins: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net)
[12:46:11] <hayley> https://www.reddit.com/r/talesfromtechsupport/comments/krj7kt/manager_company_policy_is_we_do_not_pay_for/
[12:47:00] <gilberth> hayley: I just did an idle bench. For the task of getting the metrics of a text string in Cocoa, when I skip the release calls (bump the RC down and thus free), I save 20% in runtime. Even with the extra pressure on the cache. So much for reference counting.
[12:47:47] <gilberth> And also with all the Lisp in between, which would provide some fixed overhead.
[12:51:39] <gilberth> So I propose to out-law reference counting to save the climate.
[12:52:38] <hayley> Can't complain.
[12:54:55] <gilberth> Well, I contributed my fair share in CO_2 reduction already; I don't have children.
[12:55:58] *** Joins: santiagopim (~user@90.166.59.254)
[12:56:01] <hayley> Hey, I invented a concurrent hash table and a more than fast enough DHT abstraction. Think I have my ass covered for the next 1000 years.
[12:56:20] <pjb> gilberth: on the contrary, you've been very detrimental! One of your children would have grown to be a famous scientist who would have invented a quick and easy solution to the CO₂ problem (and would have allowed terraformation of Venus in the same time). 
[12:56:53] <pjb> gilberth: you've set humany back thousands of years! I don't know if we'll ever be able to recover!
[12:57:13] <gilberth> pjb: lol.
[12:57:22] <hayley> https://www.youtube.com/watch?v=RF4642pdpdU
[12:58:32] <gilberth> hayley: I guess my RE algorithm could also save a bit of CO_2.
[12:58:32] <hayley> Pretty sure I'll end up saving about 1000 person-years of CO₂ with decentralise2. My \sarcasm{very accurately deduced} estimation is that you save like 10× on power and VPS costs with the concurrency model.
[13:00:42] <hayley> https://twitter.com/ian_is_uhhhhh/status/1396640379190009857 ← Average Rust compile time
[13:03:21] <hayley> Some day I will make a similarly immodest estimate of the time wasted to C++ compilation to annoy people who complain JITing is bad for the environment.
[13:04:38] <hayley> I mean, the latter tends to run a lot faster (only -O2's the hot loops, so to speak) and has more information to generate code from. Pretty sure the former is worse.
[13:09:55] <gilberth> Hmm. Could there be an estimate of lines changed per second? Which is not equal to number of lines being compiled, as C++ tends to recompile way more then just your change.
[13:10:38] <gilberth> Would be interesting.
[13:28:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[13:32:11] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[13:46:00] *** Joins: lad (~lad@user/lad)
[13:57:09] *** Joins: selwyn_ (~selwyn@user/selwyn)
[13:59:19] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[14:19:18] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[14:19:18] *** ChanServ sets mode: +o MichaelRaskin
[14:29:13] *** Joins: random-nick (~random-ni@87.116.182.190)
[14:43:23] *** Joins: selwyn (~selwyn@user/selwyn)
[14:44:17] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[14:59:30] *** Joins: Alfr (~Alfr@user/alfr)
[15:03:40] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:24:42] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:28:10] *** Joins: notzmv (~zmv@user/notzmv)
[15:31:30] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:33:41] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[15:34:23] *** Joins: Oddity (Oddity@user/oddity)
[15:37:19] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[15:37:41] <nij-> HELP! What do people mean when they say "a semantic of lambda calculus"?
[15:40:23] <hayley> "This is how lambda calculus works"?
[15:40:45] <nij-> No.. I think they mean to find a model (in terms of model theory) for lambda calc.
[15:40:54] <nij-> https://en.wikipedia.org/wiki/Lambda_calculus#Semantics
[15:41:04] <nij-> But.. what does that even mean?
[15:41:43] <hayley> I'm afraid to ask.
[15:45:06] <pjb> nij-: indeed, formal semantics may seem useless, because it's only a mapping of one model to another model.
[15:45:26] <pjb> nij-: so, it doesn't explain anything, since now you have to give the semantics of the mapped model.
[15:45:39] <pjb> nij-: so why are formal semantics still useful?
[15:45:51] <nij-> @@??
[15:45:55] <nij-> I don't understand.
[15:45:57] <pjb> nij-: because, the target model is normally _simplier_ than the original model!
[15:46:11] <nij-> Why do you bring up formal semantics?
[15:46:33] <pjb> nij-: so either you better understand it without a formal semantics, or you can do another formal semantics for the simplier model to an even simplier model, until you have a simple enough model.
[15:46:37] * hayley decides that another state machine model would be handy to verify another part of some code, but fears deciding how to model it.
[15:47:02] <pjb> nij-: because lambda calculus is a formal model, and the semantics of a formal model is better expressed as a formal semantics
[15:47:47] <pjb> nij-: otherwise, I could explain lambda calculs as aligators eating eggs.  Semantically, that's as valid an explanation as anything else (eg turtles over turtules all the way down).
[15:48:03] <pjb> nij-: http://worrydream.com/AlligatorEggs/
[15:48:10] <nij-> what is a formal model?
[15:48:31] <pjb> a mathematic structure.
[15:48:54] <pjb> It can be anything.
[15:49:19] <nij-> Then what is a semantics of a formal model?
[15:49:23] <hayley> How the fuck is Bret Victor real when the ending of Self the Movie exists
[15:50:05] <hayley> Alternately, how the fuck is this code failing on CI when I proved it to be correct...I think?
[15:50:13] <nij-> @@@@@@@@@@@? wut
[15:50:41] <pjb> nij-: I told you: the semantics of a formal model X is a mapping from X to another formal model Y.
[15:50:44] <hayley> Of course now it works. So I guess the CI bug has been slain.
[15:50:53] <pjb> nij-: you explain things in terms of other things.
[15:51:22] <pjb> For example, I'll explain the objects you see, earth, air, water, in terms of atoms and chemistry.  But what are atoms?
[15:52:03] <pjb> I'll explain atoms in terms of neutron proton electron, mass and electric charge, and chemistry in terms of covalence bounds (electric forces).
[15:52:10] <nij-> I see
[15:52:38] <nij-> Great! Then what's a(n example of a) model of lambda calc?
[15:52:40] <hayley> Well, good to know I can make correct software again.
[15:52:42] <pjb> But what are neutro proton electron mass and charge?  I'll explain that in term of quarks charmed color, up, down, top, bottom.
[15:53:31] <nij-> It seems that some people want to explain a model D by embedding it into Mapping(D,D).
[15:53:36] <nij-> Why do they do that @@?
[15:53:42] <pjb> Note: quarks represent more concepts than neutron proton electron; it's not a simplier model, and we infer a lot more particules, anti proton, anti neutron, anti electron and now there are even particules made of 2 or 4 quarks, and you have to deal with the weak and strong forces. 
[15:53:46] <pjb> models are a mess!
[15:53:50] <contrapunctus> hayley: wtf
[15:53:59] <hayley> contrapunctus: what
[15:54:05] <pjb> And wait when you want to explain those quarks, you introduce string theory with 11 or 20 dimensions!
[15:54:11] <selwyn_> antineutron damn
[15:54:14] <selwyn_> never thought about that
[15:54:14] <nij-> (11 or 26)
[15:54:33] <selwyn_> baryon number flipped right.
[15:54:36] <pjb> Then introductory book on string theory is as big as the whole Knuth life work!
[15:54:47] <nij-> which is sad
[15:54:58] * hayley thinks "I have only proven this code correct, not tested it..."
[15:55:04] <contrapunctus> hayley: so I checked out Self the Movie (this, right? https://www.youtube.com/watch?v=Ox5P7QyL774). The opening is like someone paraphrased a document I wrote. Except of course this video is way older.
[15:55:28] <pjb> Now, of course, you may try another explanation, for example using negative masses and eniantrope universe slices.
[15:55:31] <selwyn_> the 26 dimensions thing can be understood easily on very heuristic terms
[15:55:38] <nij-> pjb i understand your meaning of what a model is now
[15:55:43] <hayley> contrapunctus: Yes. Though I was referring to the ending, where Randy says something like "If we really imitated the physical world, we would not be able to transcend the limits of it."
[15:56:08] <pjb> nij-: it's basically just the API of the lower layers in your layered architecture.
[15:56:29] <pjb> You explain your current software layer in term of the lower layers, but not going further down.
[15:56:44] <nij-> yeah
[15:57:24] <pjb> And when you use virtual machines, this can even loop: you can run linux on x86 on javascript on firefox on ms-windows on x86 on virtualbox on x86 on linux…
[15:57:52] * hayley uploaded a video: (7924KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/bveMODSXUORyTSKqRVWdBPoY/randy-organises-a-missile-strike.mp4 >
[15:57:53] <hayley> contrapunctus: Also see this video which was recorded off-hours.
[15:58:07] <nij-> yep
[15:58:14] <nij-> i can also run gol in gol.. which is insane
[15:58:16] <pjb> or you can explain your programming language in terms of a mathematical model.  Or in terms of a model intended to represent the workings of the atoms and electrons in the chips.
[15:59:35] <pjb> eg> int a=3,b=a+2;  you can say b=(3+2) mod (2^32) ; or you can give the model of registers with 32 bit, and the semi-adder expressed in terms of nand gates, etc.
[16:00:24] * hayley got a giggle out of someone calling C types "real types". Pretty sure computing mod 2^n is the exception for proofs, not the norm.
[16:00:25] <pjb> Of course, an important question is whether two different models can be used equivalently to give the same semantic to another.
[16:00:32] <pjb> :-)
[16:00:53] <nij-> :-)
[16:01:19] <pjb> But this can still help for understanding or reasoning or implementing. As I said, if you try to map to simplier models (eg. a VM is often a simplier model than a high level programming language), then you can still win.
[16:03:42] <hayley> https://www.bitsnbites.eu/three-fundamental-flaws-of-simd/
[16:16:59] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 252 seconds)
[16:21:56] *** Quits: selwyn_ (~selwyn@user/selwyn) (*.net *.split)
[16:21:56] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[16:21:56] *** Quits: random-nick (~random-ni@87.116.182.190) (*.net *.split)
[16:21:56] *** Quits: lad (~lad@user/lad) (*.net *.split)
[16:21:56] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[16:21:56] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[16:21:56] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[16:21:56] *** Quits: APic (apic@apic.name) (*.net *.split)
[16:21:57] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[16:21:57] *** Quits: santiagopim (~user@90.166.59.254) (*.net *.split)
[16:21:57] *** Quits: gilberth (~gilberth@p5492debc.dip0.t-ipconnect.de) (*.net *.split)
[16:21:58] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[16:21:58] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[16:21:59] *** Quits: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net) (*.net *.split)
[16:21:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[16:21:59] *** Quits: gendl (sid100083@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[16:22:00] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[16:22:00] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[16:22:00] *** Quits: eschaton_ (eschaton@2600:3c01::f03c:91ff:fefd:5d92) (*.net *.split)
[16:22:01] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[16:22:01] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[16:22:01] *** Quits: elflng (~elflng@5.28.137.182) (*.net *.split)
[16:22:01] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[16:22:01] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[16:22:02] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[16:22:02] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[16:22:02] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[16:22:03] *** Quits: gko (~user@user/gko) (*.net *.split)
[16:22:03] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (*.net *.split)
[16:22:03] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[16:22:03] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (*.net *.split)
[16:22:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (*.net *.split)
[16:22:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (*.net *.split)
[16:22:03] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[16:22:03] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[16:22:03] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[16:22:03] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[16:22:04] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[16:22:04] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[16:22:04] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[16:22:04] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (*.net *.split)
[16:22:04] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[16:22:06] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[16:22:06] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[16:22:06] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[16:22:07] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (*.net *.split)
[16:22:07] *** Quits: Lulu (~meow@vyos/developer/Lulu) (*.net *.split)
[16:22:07] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[16:22:07] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (*.net *.split)
[16:22:07] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[16:22:07] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[16:22:07] *** Quits: jurov (~jurov@rev-81-92-255-34.radiolan.sk) (*.net *.split)
[16:22:08] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[16:22:08] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (*.net *.split)
[16:22:08] *** Quits: ^[ (~user@user//x-8473491) (*.net *.split)
[16:22:08] *** Quits: commandoline_ (~commandol@ubuntu/member/commandoline) (*.net *.split)
[16:22:08] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[16:22:08] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[16:22:08] *** Quits: JSharp (sid4580@id-4580.tooting.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: Balooga (sid407689@id-407689.tooting.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[16:22:08] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[16:22:08] *** Quits: taeaad (~taeaad@user/taeaad) (*.net *.split)
[16:27:46] *** Joins: remexre (~nathan@user/remexre)
[16:27:46] *** Joins: jurov (~jurov@rev-81-92-255-34.radiolan.sk)
[16:27:46] *** Joins: mariari (~mariari@user/mariari)
[16:27:46] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[16:27:46] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[16:27:46] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:27:46] *** Joins: emacsoma1 (~emacsoman@136.60.128.68)
[16:27:46] *** Joins: micro (~micro@user/micro)
[16:27:46] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[16:27:46] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:27:46] *** Joins: Oddity (Oddity@user/oddity)
[16:27:46] *** Joins: selwyn_ (~selwyn@user/selwyn)
[16:27:46] *** Joins: notzmv (~zmv@user/notzmv)
[16:27:46] *** Joins: random-nick (~random-ni@87.116.182.190)
[16:27:46] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[16:27:46] *** Joins: lad (~lad@user/lad)
[16:27:46] *** Joins: santiagopim (~user@90.166.59.254)
[16:27:46] *** Joins: makomo (~makomo@user/makomo)
[16:27:46] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[16:27:46] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[16:27:46] *** Joins: sm2n (~sm2n@user/sm2n)
[16:27:46] *** Joins: gilberth (~gilberth@p5492debc.dip0.t-ipconnect.de)
[16:27:46] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[16:27:46] *** Joins: aeth (~aeth@user/aeth)
[16:27:46] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:27:46] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[16:27:46] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[16:27:46] *** Joins: nckx (~nckx@tobias.gr)
[16:27:46] *** Joins: APic (apic@apic.name)
[16:27:46] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[16:27:46] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:27:46] *** Joins: hayley (~theemacss@user/hayley)
[16:27:46] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[16:27:46] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[16:27:46] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[16:27:46] *** Joins: luis (~luis@lisp/luis)
[16:27:46] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[16:27:46] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[16:27:46] *** Joins: pjb (~pjb@user/pjb)
[16:27:46] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[16:27:46] *** Joins: ^[ (~user@user//x-8473491)
[16:27:46] *** Joins: elflng (~elflng@5.28.137.182)
[16:27:46] *** Joins: robin (~robin@user/terpri)
[16:27:46] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:27:46] *** Joins: Lulu (~meow@vyos/developer/Lulu)
[16:27:46] *** Joins: commandoline_ (~commandol@ubuntu/member/commandoline)
[16:27:46] *** iridium.libera.chat sets mode: +oo MichaelRaskin gilberth
[16:27:46] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[16:27:46] *** Joins: trn (jhj@sourcehut/user/trn)
[16:27:46] *** Joins: lonjil (~quassel@user/lonjil)
[16:27:46] *** Joins: ChanServ (ChanServ@services.libera.chat)
[16:27:46] *** Joins: taeaad (~taeaad@user/taeaad)
[16:27:46] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[16:27:46] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[16:27:46] *** Joins: Balooga (sid407689@id-407689.tooting.irccloud.com)
[16:27:46] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[16:27:46] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[16:27:46] *** Joins: JSharp (sid4580@id-4580.tooting.irccloud.com)
[16:27:46] *** Joins: |3b| (bbb@user/3b/x-2324788)
[16:27:46] *** Joins: phoe (~phoe@user/phoe)
[16:27:46] *** iridium.libera.chat sets mode: +o ChanServ
[16:27:50] *** Joins: eschaton_ (eschaton@2600:3c01::f03c:91ff:fefd:5d92)
[16:27:50] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[16:27:50] *** Joins: minion (~minion@common-lisp.net)
[16:27:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Max SendQ exceeded)
[16:27:57] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[16:28:00] *** Joins: Alfr (~Alfr@user/alfr)
[16:28:00] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[16:28:00] *** Joins: gko (~user@user/gko)
[16:31:24] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 276 seconds)
[16:31:25] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 276 seconds)
[17:15:56] *** Joins: hayley (~theemacss@user/hayley)
[17:46:03] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[18:04:24] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:41:14] <gilberth> Good morning #lispcafe!
[18:43:13] <hayley> Good morning gilberth!
[18:44:08] <gilberth> Hey hayley, still awake? Silly question actually.
[18:44:46] <selwyn_> hi
[18:45:08] <gilberth> hayley, the struct of yours, could they nest? That is structs having slots also being structs?
[18:45:13] <hayley> gilberth: Sure.
[18:45:41] <hayley> Hmm, I guess they could.
[18:46:38] <hayley> I only plotted out how redefinition would work with arrays still. And I do want redefinition.
[18:46:50] <gilberth> Hmm, could we somehow do without the header at the struct itself? That is could a C "array" of structs be mapped to your representation? But how would we tell the type of what a pointer points to?
[18:47:35] <gilberth> selwyn_: How did you earn that underscore of yours?
[18:48:43] <gilberth> hayley: Anyhow, even with a header inline, this would be very useful for my Pascal compiler.
[18:49:21] <hayley> gilberth: I provided two implementation ideas, and the latter avoids the per-object header.
[18:50:00] <hayley> But instead it expects you to use a "handle" object, which we expect to optimize out if it is used immediately in the same function.
[18:52:33] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[18:53:07] <gilberth> Yeah, I use such a "handle" object, which is a pair of a type and a pointer in my C->CL compiler and consider to use it for my Pascal compiler, too. Chains like (foo-x (bar-y (pascal-aref something offset))) would, when compiled optimize that all out, when we know the exact type of 'something'. When not known those "handles" are created, which is great for interactive use and debugging.
[18:53:44] <lotuseater> hey there
[18:54:09] <hayley> It is very nearly like the header and rack representation in SICL, except that all objects share a rack with different offsets.
[18:54:43] <gilberth> What's a rack?
[18:56:06] <hayley> The storage vector for an object.
[18:56:48] <gilberth> The header could be elsewhere?
[18:57:39] <hayley> Yes, the header is invariant w.r.t change-class but the storage vector isn't.
[18:58:04] <gilberth> ok
[19:04:34] <hayley> Still, it is all just a sketch for how to do it in a way which doesn't break too much of CL semantics. beach thought it was fine so I suppose I didn't do anything too bad.
[19:09:43] *** Joins: derelict (~derelict@user/derelict)
[19:09:57] <gilberth> When you get that to work, it would be great for stuff that needs the performance. What also would be terrific, if it could made to work for an FFI, turning C structs into CLOS objects.
[19:10:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:10:54] <gilberth> I don't see, why it shouldn't work.
[19:12:16] <selwyn_> on that note i wonder if clasp´s clbind is working again
[19:13:45] <gilberth> I mean, we have those handle objects when in doubt. The rest is just optimization. Very much like in C a handle could be a struct itself. When it has dynamic extent, a C compiler won't necessarily allocate memory for it, when it could survive in registers. And the type part of that handler could be constant and thus optimized away. Easy.
[19:15:40] <gilberth> What does clbind do?
[19:18:00] <selwyn_> clbind allows you to expose c++ objects in common lisp
[19:19:06] <selwyn_> not dissimilar to what abcl lets you do with java, though with clbind it´s necessary to write some bindings yourself
[19:21:19] <gilberth> ok.
[19:26:30] *** Joins: copec (~copec@home.unaen.org)
[20:07:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:17:20] *** Joins: krl (~krl@h-158-174-122-239.A357.priv.bahnhof.se)
[20:20:00] *** Joins: selwyn (~selwyn@user/selwyn)
[20:22:33] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 248 seconds)
[20:25:18] <clothespin> hello
[20:26:59] <gilberth> Hello clothespin, how are things?
[20:28:23] <edgar-rft> clothespins spend most of their life on-line (argh, what a joke)
[20:33:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:37:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:40:21] <clothespin> things are good
[20:40:32] <clothespin> haha
[20:42:17] <Alfr> Good morning.
[20:42:56] <clothespin> I'm still wondering why my floating point calculations produce different results on mac vs pc
[20:44:03] <clothespin> I may punt and do something else
[20:48:18] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:51:16] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[20:56:57] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[20:58:14] <nij-> In untyped lambda calculus, does there exist a lambda term E such that for any lambda term L = (lambda x . [..])
[20:58:40] <nij-> BetaReduce(E L) = BetaReduce_x(L)?
[21:10:08] <gilberth> clothespin: That is very curious. Do you have a tiny preferable single operation example?
[21:12:54] <clothespin> no
[21:13:29] <clothespin> it's coming up imprecise after a long calculation
[21:15:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[21:19:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:20:38] <sm2n> nij-, yes?
[21:20:47] <sm2n> the identity
[21:20:55] <sm2n> the I in SKI
[21:26:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:27:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:50] <gilberth> clothespin: Well, there must some operation which yields a different result. libc involved?
[21:33:51] <clothespin> lapack is involved
[21:34:11] <clothespin> some of the calculation is in lisp though
[21:35:46] <gilberth> Hmm, I'd inspect the FPU flags. Especially when calling out to lapack. Which is written in which language?
[21:36:05] <clothespin> lapack is written in fortran
[21:36:24] <clothespin> i am using intel mkl on both machines
[21:36:44] <clothespin> three operating systems
[21:37:04] <Alfr> One machine supports fma and the other doesn't?
[21:37:17] <clothespin> what's fma?
[21:37:18] <gilberth> Still. At times I made the experience that Lisp wants different FPU mode flags than what libc expects.
[21:37:30] <Alfr> clothespin, fused multiply add.
[21:39:30] <nij-> sm2n uh. no..
[21:39:50] <nij-> For E=I, we only have BetaReduce(E L) to be L, but not BetaReduce(L).
[21:40:41] <nij-> Lambda calculus (and lisp and such..) is nice. However, I'm not happy with the fact that we humans need to first learn to rules (alpha, beta) in order to perform the reductions.
[21:41:02] <nij-> If we don't need to learn the rules, then there's hope that even aliens can understand lambda calculus.
[21:41:11] <nij-> In that case, we can embed human knowledges in it.
[21:47:49] <lotuseater> they'll discover it themselves
[21:48:20] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[21:50:32] <nij-> Not really.
[21:50:50] <gilberth> Why not?
[21:50:52] <nij-> But if there is such an E, then probably.
[21:51:08] <nij-> gilberth: there are too many factors. We tend to imagine that aliens are much like us.
[21:51:17] <nij-> But they might be very different.
[21:51:31] <sm2n> oh wait do you mean only a single application of the rule?
[21:51:34] <nij-> Also, consider the fact that it took humans thousands of years to discover lambda calc.
[21:51:40] <nij-> Yeah
[21:51:44] <clothespin> this mac doesn't even want to tell me the specific model number of my processor
[21:51:48] <nij-> OneStepBetaReduce
[21:51:54] <nij-> Sorry for that, sm2n
[21:52:13] <sm2n> I don't think so then
[21:52:17] <nij-> Why not?!
[21:52:28] <gilberth> Still, all the math is just there, waiting to be discovered. And when you want to communicate to aliens, ust write the rules down.
[21:52:41] *** Quits: lad (~lad@user/lad) (Ping timeout: 248 seconds)
[21:52:50] <nij-> gilberth: It's also possible that human math is just a depiction of how human minds work.
[21:52:59] <nij-> In fact I believe that's the case.
[21:53:20] <nij-> And that's why math is unbelievably effective. Because that's how our brains work xD
[21:53:50] <sm2n> hmm, maybe that is possible
[21:54:04] <sm2n> wait
[21:54:25] <nij-> A universal knowledge should be discoverable from (the ability to identify different symbols) and (some intelligence to reduce a complex graph).
[21:54:25] <gilberth> clothespin: $ sysctl machdep.cpu
[21:54:50] <sm2n> I L = L, and so it'll have the same beta reduction
[21:55:02] <gilberth> nij-: would that apply to even simple things like counting?
[21:55:04] <sm2n> what did you want to beta reduce exactly
[21:55:08] <nij-> Ok, another point I'm beting sloppy sm2n.
[21:55:12] <lotuseater> just universal is too limiting
[21:55:30] <nij-> I mean "=" to be identical, not beta-equivalence.
[21:55:54] <sm2n> but then what is E L
[21:56:11] <sm2n> do you evaluate E L or not
[21:56:18] <nij-> no
[21:56:31] <nij-> OneStepBetaReduce(E L) is the evaluated (E L)
[21:56:43] <Alfr> nij-, wait, are you implying that physics/the universe works according to human minds?... Because quite a bit of math does describe what we observe rather well.
[21:56:49] <sm2n> ok, I doubt what you want is possible
[21:57:13] <nij-> Alfr: no - math is just a language that tells us how our brain work
[21:57:25] <edgar-rft> Let's break the rules of lambda calculus!
[21:57:28] <nij-> Our brain receives signals from the outer world, and use the lang (math) to encode it.
[21:57:32] <Alfr> nij-, hm ... okay.
[21:57:50] <nij-> sm2n: why not :'(
[21:57:54] *** Joins: iisi (sid19824@stonehaven.irccloud.com)
[21:57:54] <gilberth> And given natural numbers, you invent negative numbers as soon as you try to solve x + 7 = 3
[21:58:14] <gilberth> Once you have multiplication, you also have rational numbers. And so on.
[21:58:42] <sm2n> well you said L = \λx.something, right?
[21:59:04] <nij-> sm2n oh no
[21:59:09] <nij-> I mean L be a lambda term.
[21:59:26] <sm2n> any term?
[21:59:29] <nij-> hmmm hold on
[21:59:34] <nij-> Lemme check my notation.
[21:59:45] <nij-> Yes, L should be a lambda term that starts from (lambda x ..)
[22:00:02] <nij-> and the beta reduction of L should be one that kills the first x
[22:00:24] <sm2n> yeah so there's no way for E to "know" what that something is without reducing L, which it can't do in a single step
[22:00:25] <Alfr> gilberth, that way is rather hard if you want to get to reals.
[22:01:14] <nij-> sm2n: oh i see
[22:01:28] <sm2n> lambda terms provide a form of encapsulation even, if you want to think of it that way
[22:01:38] <gilberth> You mean non-rational numbers? Here is one: x^2 = 2.
[22:02:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:02:38] <selwyn_> that´s not enough to get to all of the reals
[22:03:09] <gilberth> Complex numbers? Just solve x^2 = -1. The Feynman lectures have a very nice chapter about just that, how to boot the kind of numbers we commonly use from just counting and asking questions (solve equations).
[22:03:22] <lotuseater> no he means transcendental ones
[22:03:23] <selwyn_> the standard construction of the reals is as dedekind cuts
[22:03:49] <gilberth> Yes, I know. But isn't that an aftermath?
[22:04:04] <Alfr> But only having rationals and constructing reals is quite some work.
[22:04:22] <selwyn_> which does not involve a huge amount of machinery
[22:04:32] <Alfr> Otherwise you could only say, that x*x=2 doesn't have solution in Q .
[22:04:36] <gilberth> Still, what is (sqrt 2)? The question is there, it won't go away.
[22:05:03] <sm2n> what is (/ 1 0)? The question is there, it won't go away.
[22:05:09] <nij-> what is 1?
[22:05:44] <gilberth> Doesn't matter just call the number (sqrt 2), as we do with negative numbers, we call them 0-3 for example and abbreviate by just -3. Could be seen that way. Likewise with 'i' for sqrt(-1).
[22:05:49] <selwyn_> gilberth: you can prove directly that there exists a real number which squares to 2
[22:06:12] <sm2n> λf.λx.fx
[22:06:16] <selwyn_> using these ´dedekind cuts´
[22:06:24] <gilberth> selwyn_: Sure, but it's not rational. At least I got that this was the question/issue raised.
[22:06:37] <selwyn_> oh ok
[22:06:45] <nij-> sm2n im curious why human brains can figure out the lambda rules without being told explicitly.
[22:07:00] <nij-> Or also.. why human brains can figure out how to evaluate boolean expressions
[22:07:10] <nij-> The truth table is written afterward as a record.
[22:07:24] <sm2n> not sure what you mean
[22:07:27] <nij-> Our brains have the capacity to figure out how to evaluate by looking at some examples!
[22:07:32] <Alfr> My issue is that starting as you've proposed will require the quite hairy construction of reals using Dedekind cuts, gilberth.
[22:07:36] <gilberth> nij-: Boolean functions are *aehm* just natural.
[22:07:40] <sm2n> don't think you're going to have a good time solving equations if you don't know how to read
[22:07:50] <nij-> gilberth: Yeah. I hope we can bring "natural" to "universal".
[22:08:09] <nij-> Namely, to prove that any intelligent enough creatures who have the notion of "yes/no" can figure out the boolean logic too.
[22:08:18] <sm2n> and boolean (prepositional even) logic is implicit in language
[22:08:30] <gilberth> Indeed.
[22:08:30] <nij-> sm2n but we don't need to read
[22:08:33] <selwyn_> a very fun thing to prove is that an irrational number to the power of another irrational number may be a natural number
[22:08:43] <nij-> we only have to be able to *distinguish the difference of symbols*
[22:08:53] <nij-> and be able to parse a group of characters at the same time
[22:09:31] <nij-> and to see some examples
[22:09:41] <nij-> and then TADA we get boolean logic in our brain
[22:09:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:10:30] <Alfr> gilberth, I'd rather introduce reals as an ordered field and throw in a completeness axiom (e.g. monotone convergence); everything that satisfies this is isomorphic to R .
[22:11:35] <Alfr> gilberth, then you also get 0, 1 for free (as identities for + and respectively *).
[22:13:52] <selwyn_> https://twitter.com/ajplus/status/1424801149626961942
[22:13:53] <selwyn_> sigh
[22:14:05] <selwyn_> the future is going to be just the shit parts of futurama
[22:14:33] <lotuseater> to realize these "obvious" things now taken for granted and how to formalize needed time
[22:15:16] *** childlikempress is now known as moon-child
[22:16:07] <nij-> Perhaps my favorite def of real number field: https://math.stackexchange.com/a/839965/562467
[22:17:25] <nij-> The Dedekind cut approach is too set theoretical.. it's like embedding a natural object in a wrong language.
[22:17:41] <selwyn_> nij-: damn wow
[22:17:45] <nij-> The unique ordered field approach.. it's good, but it takes much time to justify.
[22:17:56] <nij-> And to define an ordered field isn't that simple either.
[22:18:02] <nij-> But this definition is a fucking pearl.
[22:18:35] <nij-> selwyn_: right ;)
[22:18:43] <selwyn_> wtf
[22:18:56] <nij-> I am reading the paper to get the details now. I was too naive to understand its importance a few years ago while first reading it.
[22:19:27] <selwyn_> hm
[22:22:27] <selwyn_> arxiv.org/pdf/math/0301015v1.pdf this one?
[22:23:04] <gilberth> Alfr: Sure, but that approach is not very "natural". I mean by just real life questions like "I have three rows and four columns of boxes, how many boxes there are?" Or: "I have six apples, but need ten for my cake, how many I have to get from my garden?"
[22:23:42] <nij-> selwyn_:  yes
[22:26:03] *** Joins: ixelp (~ixelp@p5492debc.dip0.t-ipconnect.de)
[22:26:03] *** ChanServ sets mode: +o ixelp
[22:27:52] <gilberth> Remind me to add pinging and auto-reconnect if failed. Perhaps with exponential backoff.
[22:29:50] <nij-> selwyn_: See page 9 for an topological explanation of R as equivalence classes of slopes!
[22:29:57] <nij-> Slope are cocycles!!
[22:33:10] *** Joins: notzmv (~zmv@user/notzmv)
[22:35:00] <Alfr> selwyn_, that one is neat. Thanks.
[22:39:24] *** Joins: shka (~herr@109.231.62.239)
[22:45:47] <nij-> selwyn_ did you click for the relation of that def of R and Gromov's bounded cohomology?
[22:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:50:25] *** Joins: ck_ (~ck@plskthx.org)
[22:54:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:12:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[23:27:37] *** Quits: iisi (sid19824@stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:28:09] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[23:32:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:35:31] * gilberth has trouble to get text consistently upright in lower-left and upper-left origin coordinate systems.
[23:37:33] * gilberth also considers to stop fighting NextStep^WCocoa with its default origin lower-left.
[23:39:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:47:02] <Alfr> gilberth, regarding you cake question, just make 3/5 of a cake as gardens don't have apples following that incident.
[23:49:48] <selwyn_> gilberth: this is ironic since these questions are typically of the form posed to kids at school
[23:49:55] <selwyn_> and they complain about how unrealistic they are
[23:57:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:59:03] <gilberth> Sure. But I consider my cake example pretty real-life. My point was that this already is an equation of sorts to solve.
