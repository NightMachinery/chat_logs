[00:00:00] <shka> loaded
[00:00:04] <shka> i want to use clpm
[00:00:27] <shka> i see how to use it for releases, but development eludes me
[00:00:40] <pjb> then (setf asdf:*central-registry* (append (directory #P"~/something/like/local-project/*/") asdf:*central-registry*))
[00:00:53] <pjb> shka: oh, clpm question. I don't know yet.
[00:01:38] <etimmons> shka: See the "Overriding VCS repos" section in <https://gitlab.common-lisp.net/clpm/clpm/-/blob/main/tutorial/tutorial.org>
[00:01:46] <shka> i mean, i am sold on the release part, i just wish i knew how to even use clpm during development
[00:02:10] <etimmons> To be completely honest, that part is not very polished at the moment
[00:02:19] <shka> ok, got it
[00:02:53] <etimmons> So I'd love any feedback you have on <https://gitlab.common-lisp.net/clpm/clpm/-/issues/25>
[00:03:04] <shka> etimmons: in terms of documentation or the feature-set itself?
[00:03:17] <etimmons> both
[00:03:43] <etimmons> But the goal is for the next release to have a "hack" command
[00:04:07] *** Joins: cleon (~Srain@43.red-80-29-166.dynamicip.rima-tde.net)
[00:04:23] <shka> well, let me think
[00:04:34] <etimmons> that clones the repo for you (if needed) and does whatever behind the scenes stuff necessary to get clpm to use your locally checked out version
[00:04:35] *** Parts: cleon (~Srain@43.red-80-29-166.dynamicip.rima-tde.net) ()
[00:06:12] <shka> well, from my point of view, something like "local projects" directory in the context would be the simplest way to work with
[00:06:49] <shka> so for instance i could have vellum context, and vellum, vellum-plot, vellum-postmodern, vellum-csv clones in one directory
[00:07:40] <etimmons> I see what you're saying
[00:07:40] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[00:08:03] <etimmons> I also plan for the next release to have some sort of "vendoring" support (installing deps directly to the project folder)
[00:08:13] <etimmons> It might be possible to piggy back what you're asking for on top of that
[00:08:27] <etimmons> But it won't be the default for fear of polluting ASDF's search path
[00:09:12] <shka> why is "vendoring" support needed?
[00:09:18] <shka> what is the use case for that?
[00:09:21] <etimmons> For now, though, I believe you could use pjb's central-registry snippet to get something similar
[00:09:30] <etimmons> My primary use case is deployment
[00:09:39] <shka> well, ok
[00:09:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[00:10:17] <etimmons> so you can have everything needed to run your code in one folder that can be plopped on a server, Docker container, etc. and used without needing CLPM present
[00:10:22] <shka> i mean, context knows the origins of all systems, so it seems to be a matter of simply having a cache?
[00:11:28] <shka> and in that case, they don't need to be in one place, but simply a way to have a command to copy everything into directory once in a while
[00:12:05] <shka> i mean, if it is just for deployment
[00:12:16] <etimmons> Yeah, that's basically what it would do. clpm would still cache everything in its own folders. But when you install with a special flag it would copy everything into the same folder as your project
[00:12:38] <shka> uh, why "project"?
[00:12:44] <shka> why not simply do something like
[00:13:33] <shka> (clpm:copy-deploy :directory "/home/deployment/my-project" :my-project)
[00:14:03] <shka> and later we could have something like (clpm:copy-deploy :dockerfile ...)
[00:14:10] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[00:14:19] <etimmons> ah. So would that copy the project as well?
[00:14:26] <shka> yeah, why not
[00:15:12] <etimmons> interesting. I'm definitely onboard with making the destination directory flexible. Hadn't considered copying the project itself though!
[00:15:34] <shka> i mean, project directory is just a source code, it is not a deployment container or whatever
[00:16:00] <shka> also, we could have different targets
[00:16:13] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[00:16:17] <shka> instead of :directory, :tarball, :dockerfile...
[00:17:27] <etimmons> yeah, that's pretty cool
[00:18:10] <shka> also, it would allow to keep project context "pure"
[00:18:26] <etimmons> also a win :)
[00:18:49] <shka> it is just to specify what to pull from where, not to specify how to deploy and where
[00:19:58] <shka> though, in theory, you could have something for deployment targets in project file
[00:20:11] <shka> like sbcl version for dockerfile
[00:22:28] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c0fd:cce1:aeae:bfb0)
[00:23:10] <shka> well, it's late here, and the change of time does not help me
[00:24:12] <shka> but i will be here tomorrow
[00:24:14] <shka> as always...
[00:25:12] *** Joins: cleon- (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:25:28] * cleon- 
[00:25:44] *** Parts: cleon- (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) ()
[00:26:52] <shka> etimmons: actually, this should be (clpm:deploy mode destination project context ...)
[00:27:02] *** Joins: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net)
[00:27:10] <shka> and perhaps context could be something like :fresh
[00:27:14] *** Quits: cleon (~cleon@43.red-80-29-166.dynamicip.rima-tde.net) (Client Quit)
[00:28:51] <shka> and that would construct new, anonymus context, install dependencies, deploy, remove the context
[00:30:09] <shka> etimmons: anyway, thanks for discussion, i have much better understanding of clpm
[00:46:38] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:46:39] *** Joins: igemnace (~ian@user/igemnace)
[00:49:59] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[00:59:49] *** Quits: thmprover (~user@047-042-215-236.res.spectrum.com) (Quit: For He Was Great of Heart)
[01:01:34] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[01:03:34] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 260 seconds)
[01:06:57] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 268 seconds)
[01:12:43] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[01:16:58] *** Joins: anddam (~anddam@user/anddam)
[01:17:53] *** Quits: dra (~dra@2a04:4540:6415:8400:2de7:98e5:184c:b5e1) (Quit: Leaving)
[01:31:43] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[01:33:01] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[01:45:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:52:35] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c0fd:cce1:aeae:bfb0) (Ping timeout: 268 seconds)
[01:54:27] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:56:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:56:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:58:25] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[02:00:02] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[02:01:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[02:01:49] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[02:01:50] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[02:05:40] *** Quits: pve (~pve@178-55-16-55.bb.dnainternet.fi) (Quit: leaving)
[02:17:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee) (Ping timeout: 268 seconds)
[02:22:50] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Quit: MichaelRaskin)
[02:23:15] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[02:23:16] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[02:25:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:27:32] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[02:30:29] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:56:37] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[03:01:37] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[03:07:05] *** Quits: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84) (Quit: going home)
[03:07:16] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:16:08] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[03:24:06] *** Joins: X-Scale` (~ARM@46.50.2.72)
[03:25:17] *** Joins: igemnace (~ian@user/igemnace)
[03:26:22] *** Quits: X-Scale (~ARM@92.250.98.212) (Ping timeout: 260 seconds)
[03:26:47] *** X-Scale` is now known as X-Scale
[03:28:09] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[03:39:57] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[03:50:59] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Ping timeout: 268 seconds)
[03:51:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:52:29] *** Lord_of_Life_ is now known as Lord_of_Life
[03:52:49] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[03:54:05] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:54:21] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[03:57:10] *** Quits: gaqwas (~john@dynamic-077-004-000-013.77.4.pool.telefonica.de) (Ping timeout: 260 seconds)
[03:57:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:58:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:58:28] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[03:59:05] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[03:59:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:08:55] <etimmons> shka: happy to help! (Sorry, got pulled away for family stuff earlier)
[04:14:36] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[04:14:42] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[04:16:34] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:18:22] <Guest74> lisp123: you might be interested in cl:dribble
[04:23:18] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 260 seconds)
[04:24:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[04:29:52] *** Joins: sander (~sander@user/sander)
[04:39:27] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:57:18] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Remote host closed the connection)
[04:57:36] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[05:16:06] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:19:53] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[05:28:24] *** Quits: silasfox (~user@p200300fb27055fee8dc5d1c492ffbbde.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:30:23] *** Joins: silasfox (~user@p200300fb27041aad029587bbee605dae.dip0.t-ipconnect.de)
[05:30:24] *** Quits: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[05:30:24] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[05:30:48] *** Joins: horar (~horar@2001:4454:417:a700:e081:4ffa:146d:4ac)
[05:34:05] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[05:44:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:45:04] *** Quits: horar (~horar@2001:4454:417:a700:e081:4ffa:146d:4ac) (Quit: Client closed)
[05:50:38] *** Joins: horar (~horar@2001:4454:417:a700:e081:4ffa:146d:4ac)
[05:50:52] *** Quits: horar (~horar@2001:4454:417:a700:e081:4ffa:146d:4ac) (Client Quit)
[05:58:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:03:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[06:05:30] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[06:05:44] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[06:16:42] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[06:17:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[06:37:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:41:59] *** Quits: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (Read error: Connection reset by peer)
[06:45:19] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:46:34] *** Joins: mrcom (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[07:07:07] *** Joins: asarch (~asarch@2806:10ae:7:b965:5ae6:b8dd:b445:4963)
[07:10:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:17:50] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[07:20:24] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[07:24:38] <pillton> For those that were following the layering discussion yesterday, a recent patch to stealth-mixin added the function, stealth-mixin:add-mixin, which adds a class to another class' superclass list. This is one way to define a "layer" and add it to an existing class.
[07:24:38] <Colleen> pillton: mfiano said 12 hours, 46 minutes ago: You might find this thesis interesting; a more thorough explanation of the SDfF propagation network technique, which also uses the layering technique: https://www.cs.tufts.edu/~nr/cs257/archive/alexey-radul/phd-thesis.pdf
[07:25:35] <pillton> mfiano: Thanks. That thesis is referenced in the Software Design for Flexibility book. I had already downloaded it to read.
[07:30:52] <beach> Good morning everyone!
[07:43:02] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:52:05] *** Joins: hofenstad (~hofenstad@182.237.189.37)
[07:55:26] *** Joins: semz (~none@user/semz)
[07:55:48] *** Quits: asarch (~asarch@2806:10ae:7:b965:5ae6:b8dd:b445:4963) (Ping timeout: 268 seconds)
[08:01:23] *** Joins: domovod (~domovod@176.196.122.197)
[08:03:39] *** Joins: Oladon (~olad@98.43.81.226)
[08:21:04] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[08:21:29] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[08:25:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:28:04] *** Joins: mrcom_ (~mrcom@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[08:41:51] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:55:43] *** Quits: igemnace (~ian@user/igemnace) (Read error: Connection reset by peer)
[08:56:11] *** Joins: igemnace (~ian@user/igemnace)
[09:04:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:19:49] *** Quits: Skyfire (~pyon@user/pyon) (Read error: Connection reset by peer)
[09:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[09:39:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:03:36] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:08:34] *** Joins: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de)
[10:09:13] *** Joins: yewscion (~yewscion@2601:547:a01:2900:c9b9:736f:f973:be19)
[10:18:10] <shka> good morning
[10:18:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:18:28] <beach> Hello shka.
[10:30:15] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:31:40] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[10:36:50] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Remote host closed the connection)
[10:38:35] *** Quits: yewscion (~yewscion@2601:547:a01:2900:c9b9:736f:f973:be19) (Ping timeout: 268 seconds)
[10:40:57] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[10:44:22] *** karlosz_ is now known as karlosz
[10:59:22] *** Joins: gaqwas (~john@dynamic-095-114-095-250.95.114.pool.telefonica.de)
[11:00:32] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[11:00:43] *** Quits: anddam (~anddam@user/anddam) (Quit: WeeChat 3.3)
[11:04:45] *** Joins: s-liao (~s-liao@101.86.103.113)
[11:06:37] *** Joins: pve (~pve@178-55-189-165.bb.dnainternet.fi)
[11:08:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:10:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[11:23:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:28:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[11:33:06] *** Quits: gaqwas (~john@dynamic-095-114-095-250.95.114.pool.telefonica.de) (Ping timeout: 260 seconds)
[11:35:19] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:36:50] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 260 seconds)
[11:37:38] <rotateq> new quote for the hall of fame "C# is the most expanded language there is"
[11:37:58] <hayley> There's a hall of fame?
[11:38:13] <rotateq> I just collect them now.
[11:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:45:01] <rotateq> but ok, the guy comes mostly from industry (Siemens)
[11:45:21] <rotateq> has some other good opinions and views on things
[11:48:33] *** Quits: amb007 (~a_bakic@laubervilliers-658-1-139-127.w80-15.abo.wanadoo.fr) (Read error: Connection reset by peer)
[11:48:45] *** Joins: amb007 (~a_bakic@243.86.95.79.rev.sfr.net)
[12:08:05] <beach> What does "expanded" mean in this context?  Verbose?
[12:08:30] <rotateq> beach: in terms of libraries and what it can do out of itself
[12:09:31] <beach> As I recall, the C# standard is very old.
[12:09:53] <rotateq> ah so it has a real standard?
[12:10:04] <beach> It had an early one, I believe.
[12:10:14] <rotateq> hm okay
[12:10:17] <beach> Otherwise, it is not a language at all in my opinion.  It is a programming system.
[12:10:25] <rotateq> yes
[12:13:56] <rotateq> madness comes in many forms
[12:17:23] <rotateq> but ok, Microsoft catched some of the Haskell GHC people for the research group in Cambridge to also work on F# and LINQ
[12:43:23] <rotateq> I was confused when the mentioned guy (who is some years older) told, that he programmed macros in Fortran in the past. But then I asked him and he said: no where we did that they built those preprocessor things on their own. i bet it just was text replacement like in C
[12:45:46] <beach> That's what most people think when they here "macro", and which is why those people are often not impressed when we claim that the ability to write macros in Common Lisp is an essential feature of the language.
[12:46:08] <rotateq> or they just associate MS Word macros
[12:46:45] <rotateq> yes I will hold me back saying that, will bring nothing
[12:46:55] <Nilby> The Fortran pre-processors were quite complicated, almost being a separatelanguage.
[12:47:15] <shka> oh, interesting
[12:47:24] <rotateq> so they also can't interact with each other
[12:48:25] <rotateq> or better "understand"
[12:48:25] <Nilby> The fortran pre-processors sort of operated like the original C++ "cfront".
[12:48:30] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:48:48] <pjb> you mean f2c
[12:48:57] <shka> perhaps macros did not have such bad name as today
[12:49:03] <shka> and C is to blame :P
[12:49:14] <pjb> cpp more exactly :-)
[12:50:36] <shka> cpp macros are the exact same thing
[12:50:49] <shka> which is a part of the problem
[12:50:50] <Nilby> https://en.wikipedia.org/wiki/Ratfor
[12:51:03] <shka> because C++ has namespaces
[12:51:12] <shka> and macros simply ignore those
[12:52:06] <rotateq> beach: I often think of the allegory of the cave from Platon for those situations.
[12:54:06] <beach> I can see that.
[13:00:34] <rotateq> or Occam's razor, asking "What is more probable, that you know 'everything' or that there is more to things you cover as trivial or not possible?"
[13:00:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:01:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:06:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:18:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:36:22] *** Joins: random-nick (~random-ni@87.116.177.136)
[13:37:12] *** Joins: cosimone (~user@93-47-228-48.ip115.fastwebnet.it)
[13:40:28] *** Joins: treflip (~user@95.79.32.99)
[13:43:26] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[13:43:32] *** Quits: treflip (~user@95.79.32.99) (Client Quit)
[13:45:37] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:47:41] <jackdaniel> rotateq: read this, very much relevant: https://www.dreamsongs.com/Files/Incommensurability.pdf
[13:49:02] <jackdaniel> and eye opening - people are not fools, they often operate under different ontologies
[13:54:29] <rotateq> right, I didn't want to say that :) thx
[13:55:40] <rotateq> haha it's with one of the famous Sheldon Cooper quotes
[13:58:45] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:06:29] *** Joins: s-liao (~s-liao@101.86.103.113)
[14:07:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:46:47] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[14:49:35] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 264 seconds)
[14:55:08] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[14:55:45] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 268 seconds)
[14:59:49] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[15:00:11] *** Joins: s-liao (~s-liao@101.86.103.113)
[15:09:58] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[15:10:14] *** Joins: s-liao (~s-liao@101.86.103.113)
[15:14:11] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:14:58] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:17:05] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[15:23:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:41:51] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[15:55:15] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[15:59:53] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[16:00:43] <servytor> I am trying to decide between common lisp and haskell for a project
[16:01:17] <rotateq> and you know both well?
[16:01:36] <servytor> rotateq: not at all. I have some experience with common lisp, but none with haskell.
[16:02:13] <servytor> what goes against haskell is that the haskell language server is just too unstable for me (have to restart it numerous times)
[16:03:06] <servytor> and I mean I am an idiot writing fizzbuzz and the hls is giving me trouble
[16:03:42] <rotateq> i have trouble here cause someone said 0 is a positive number
[16:05:32] <beach> servytor: If you are looking for advice here, the recommendation might be a bit biased.
[16:08:35] <rotateq> servytor: and maybe would be good to know what kind of project :)
[16:09:26] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[16:10:02] <servytor> it would be a numerical project, with gigs of data
[16:10:17] <servytor> I know I should be using something like python or r, but I thought I would check out other languages anyway
[16:11:03] <servytor> I've heard that haskell has a lot of trouble with numerical performance (just parsing large csv's) because of the constant boxing/unboxing (? no clue if I said that correctly)
[16:11:12] <Alfr> rotateq, usually positive are those larger than 0, and positive numbers packaged with zero are usually called non-negative.
[16:11:14] *** Joins: aeth (~aeth@user/aeth)
[16:11:29] <Alfr> s/positive/positive numbers/
[16:11:55] <servytor> I guess my main question is: do you lose confidence in common lisp when going past 10klocs or so? I mean do you get lost and forget what a function returns often?
[16:12:06] <servytor> I am a very forgetful person
[16:12:17] <rotateq> Alfr: right!
[16:12:36] <rotateq> servytor: you can compile with the llvm backend
[16:13:23] <rotateq> Alfr: there is one simple exercise in TAoCP chapter 1 at the beginning: "Which is the smallest positive number?"
[16:14:28] <Alfr> servytor, maybe choose meaningful/descriptive names for your functions?
[16:14:54] <semz> That exercise is a classic intro to ill-defined questions in my experience
[16:15:23] <Alfr> rotateq, I don't know TAoCP, but in Q and R there is no such number; for integers that should be 1.
[16:15:45] <rotateq> if know how to do things with GHC it can get really efficient, also cause of lazy evaluation
[16:16:04] <rotateq> Alfr: right, it is sort of an early rare trap question :)
[16:16:05] <Alfr> rotateq, or maybe least-positive-long-float? :p
[16:16:47] <rotateq> Knuth writes in answers to the exercises there is none, take r then r/2 is smaller and stays positive
[16:18:56] <rotateq> haha okay, if taking things from the quantized point of view :P
[16:19:19] <rotateq> okay I just imagine the industry thinks or wants 0 to be positive
[16:20:01] <rotateq> so also when they have made 0 value creation "everything still positive"
[16:20:05] <semz> servytor: 10000 lines of Lisp is quite a lot of code, moreso than in other languages. It's definitely over the threshold where I would start splitting the code up into smaller modules.
[16:20:11] <semz> And then the answer depends on how well these modules are designed.
[16:22:00] <servytor> one reason I really want to use haskell is that I want to use this library: https://wickstrom.tech/programming/2017/10/27/motor-finite-state-machines-haskell.html
[16:22:29] <servytor> because I am dealing with things that have so many different states... and writing the state transition code is okay in lisp, but nothing helps to make sure you got all the cases
[16:24:06] <rotateq> servytor: oh this wickstrØm is capable, has written this komposition screen cast editor and wrote about property testing such applications
[16:24:23] *** Joins: Bike (~Bike@71.69.170.70)
[16:24:23] *** ChanServ sets mode: +o Bike
[16:24:38] <rotateq> hm I think you can use CLOS for that in an elegant way
[16:25:38] <rotateq> like with design by contracts
[16:29:07] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[16:46:15] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:50:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[17:08:51] <_death> servytor: documenting things a bit helps
[17:11:45] <rotateq> oh boy it goes on with such old industry view points "so never give source code, people who change it are the most bad."
[17:20:47] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[17:46:26] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[17:46:43] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:48:44] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:50:03] *** Joins: s-liao (~s-liao@101.86.103.113)
[17:50:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:50:49] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:52:35] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:55:00] <jcowan> The Ratfor preprocessor didn't know much Fortran; you could stiil get errors from the underlying Fortran compiler.  EFL had a full parser for Fortran + extensions.  F likewise has a full parser, but it is for a subset of Fortran (basically eliminating all the old stinky features).
[17:56:03] *** Joins: robin_ (~robin@user/terpri)
[17:57:25] *** Joins: robin__ (~robin@user/terpri)
[17:57:52] *** Quits: robin (~robin@user/terpri) (Killed (NickServ (GHOST command used by robin__)))
[17:57:56] *** robin__ is now known as robin
[18:01:35] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 264 seconds)
[18:04:38] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[18:08:32] *** Quits: s-liao (~s-liao@101.86.103.113) (Quit: Client closed)
[18:17:06] *** Quits: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350) (Quit: ERC (IRC client for Emacs 27.2))
[18:20:30] *** Joins: Skyfire (~pyon@user/pyon)
[18:21:00] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:21:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:21:29] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:22:56] *** Joins: anddam (~anddam@user/anddam)
[18:25:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:28:34] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:28:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:29:05] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:29:32] *** Joins: Josh_2 (~user@37.25.47.130)
[18:29:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[18:30:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:39:18] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[18:43:08] *** Joins: kadir (~kadir@95.7.9.203)
[18:43:56] <Josh_2> 'Ello
[18:44:32] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[18:47:11] <beach> Hello Josh_2.
[18:51:57] <Josh_2> Hey :wave:
[18:52:06] <Josh_2> _death: You here?
[18:54:31] <Josh_2> _death: I think Ironclads crc algorithm is crc32b and I need 32a (maybe)
[18:55:00] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[18:58:18] *** Joins: bort (~bort@190.162.168.90)
[18:58:48] <Josh_2> well idk
[18:58:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:01:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:02:50] *** Quits: bort (~bort@190.162.168.90) (Quit: Leaving.)
[19:02:58] <Josh_2> Well I tried crc32 and that didn't work either. Why is this stuff so annoying :(
[19:08:35] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 268 seconds)
[19:10:03] *** Joins: domovod (~domovod@176.196.122.197)
[19:15:22] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:20:24] *** Joins: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84)
[19:22:07] <_death> are the digests different for the same data?
[19:25:44] *** Joins: Jing (~textual@2604:a840:3::1021)
[19:26:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:28:06] <Josh_2> wdym?
[19:29:15] <_death> I assume you have something that works in notlisp, and something that doesn't in lisp, so that you can compare the intermediate values and find out where the differences are
[19:29:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:32:29] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:32:33] <_death> so for example if you have crc32("hello") => "12345678" and (crc32 "hello") => "3610a686" you know that's an issue
[19:33:51] <Josh_2> Okay yes I have that
[19:34:35] <Josh_2> I found some example code someone wrote to verify in php and they included their post request. Seems they are not using a hex string from the crc32 but a decimal value
[19:38:47] <_death> does that mean you figured it out
[19:39:06] <Josh_2> "and expressed as a base 10, unsigned integer." no it does not
[19:40:24] <_death> (nibbles:ub32ref/le (ironclad:digest-sequence :crc32 (babel:string-to-octets "hello")) 0) ;; assuming little endian
[19:40:25] <Josh_2> Now I have!
[19:40:35] <Josh_2> It finally works!
[19:40:44] <Josh_2> What a royal pita :joy:
[19:41:55] <_death> congratulations
[19:42:44] <Josh_2> Thanks for all your help and patience _death !
[19:42:53] <_death> ;)
[19:43:07] <Josh_2> I will put this code into my paypal wrapper :thumbsup:
[19:49:01] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[19:55:35] *** Joins: nckx (~nckx@tobias.gr)
[19:57:23] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[19:59:05] *** Joins: aeth (~aeth@user/aeth)
[19:59:45] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[20:03:28] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 268 seconds)
[20:04:04] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[20:04:33] *** Joins: aeth (~aeth@user/aeth)
[20:05:19] *** Quits: susam (~susam@user/susam) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:05:30] *** Joins: susam (~susam@user/susam)
[20:09:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:11:51] *** Parts: kadir (~kadir@95.7.9.203) ()
[20:12:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:16:50] * _death ponders (ldi (int 32 0 :unsigned :little) octets)
[20:19:45] <_death> position not that nice there
[20:20:56] <_death> so maybe (ldi u32/le octets :start 0)
[20:23:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9e2e:d238:6ddc:c88f)
[20:23:14] <Josh_2> https://github.com/K1D77A/latter-day-paypal/blob/main/api/webhook-verify.lisp :D
[20:23:28] <Josh_2> lots of toil for 80 sloc :joy:
[20:24:27] <_death> ah, missed ironclad:octets-to-integer
[20:25:55] <Josh_2> I have raised an issue on cl-tls asking if they can give me perms to ask Xach or if they will ask to get cl-tls added to ql
[20:26:24] <Josh_2> It would be nice if there was a single library that contained everything related to encryption :(
[20:34:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:34:43] <_death> and then sometimes people wish that ironclad should be split into multiple parts ;)
[20:35:35] <Josh_2> pfft
[20:35:38] <_death> I think they're actually in the process of splitting into multiple systems?
[20:36:10] <Josh_2> I've seen the issue wanting it to be modular, but that would just mean you can only ql the things you need
[20:36:36] <Josh_2> this wouldn't stop there being something like an ironclad/tls  or ironclad/olm package all within the ironclad library
[20:36:56] <Josh_2> ironclad/utils etc
[20:38:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:38:55] <_death> right.. but perhaps it'd need more than single maintainer then
[20:40:34] <Josh_2> Yes very true
[20:43:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[20:46:24] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[20:50:08] *** Joins: Jing (~textual@2604:a840:3::1021)
[20:52:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:57:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:06:53] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[21:10:08] *** Joins: mingus_ (~jan-magnu@auth-147-15.anyconnect.uib.no)
[21:10:41] *** Joins: pjb (~pjb@2a01cb040b1ae1003cef12ac6126f882.ipv6.abo.wanadoo.fr)
[21:10:42] *** Quits: pjb (~pjb@2a01cb040b1ae1003cef12ac6126f882.ipv6.abo.wanadoo.fr) (Changing host)
[21:10:42] *** Joins: pjb (~pjb@user/pjb)
[21:13:09] *** Quits: mingus (~jan-magnu@auth-147-15.anyconnect.uib.no) (Ping timeout: 268 seconds)
[21:15:49] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[21:16:16] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[21:36:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:41:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:55:05] *** Joins: Oladon (~olad@98.43.81.226)
[21:57:47] <Guest74> anybody have any examples of using usocket with unsigned-byte 8 streams?  I don't seem to be sending anything, no payload according to wireshark.
[21:58:45] *** mingus_ is now known as mingus
[22:01:03] <Josh_2> You should use force-output
[22:01:14] <Josh_2> maybe terpri will do it
[22:01:36] <Josh_2> I'd use force-output
[22:02:47] <Guest74> huh, that's what I tried the first time and it kept closing the socket.
[22:03:24] <Guest74> seems to work now.  Probably all the hoops I had to jump through to actually get sane to work on localhost.
[22:05:07] <Guest74> I swear following 5 different howtos is not user friendly.
[22:05:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:08:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:15:28] <Guest74> woo, finally seem to be communicating with the scanner.  Time for a break for today.  If anybody has a sane shared scanner that wants to try the code let me know.  I'll probably post it for review anyways.
[22:15:48] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[22:20:56] *** Quits: amb007 (~a_bakic@243.86.95.79.rev.sfr.net) (Read error: Connection reset by peer)
[22:21:17] *** Joins: amb007 (~a_bakic@243.86.95.79.rev.sfr.net)
[22:27:52] *** Joins: random-nick (~random-ni@87.116.177.136)
[22:27:53] *** Quits: amb007 (~a_bakic@243.86.95.79.rev.sfr.net) (Read error: Connection reset by peer)
[22:28:36] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:34:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[22:35:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:37:04] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:37:27] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[22:38:57] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[22:40:11] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:40:36] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[22:45:53] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Quit: Connection closed)
[22:47:48] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[22:48:17] *** Joins: robin_ (~robin@user/terpri)
[22:50:34] *** Quits: robin (~robin@user/terpri) (Ping timeout: 268 seconds)
[22:54:58] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[23:03:14] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[23:04:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:05:10] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Ping timeout: 260 seconds)
[23:07:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:08:03] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:14:34] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[23:19:13] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Quit: Leaving)
[23:23:28] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[23:28:33] *** Joins: gaqwas (~john@dynamic-095-114-095-250.95.114.pool.telefonica.de)
[23:31:11] <Josh_2> Idk what a scanner is
[23:31:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:36:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:37:04] *** Joins: beach` (~user@2a01:cb19:150:3400:1d3c:41a7:29c:8bd8)
[23:38:51] <edgar-rft> I think it's this thing -> https://en.wikipedia.org/wiki/Image_scanner
[23:40:10] <edgar-rft> There had been questions before about the SANE protocol  that is used for image scanners.
[23:40:38] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[23:41:11] *** Quits: beach (~user@2a01:cb19:150:3400:6407:45b3:7ae9:9195) (Ping timeout: 264 seconds)
[23:46:18] <Josh_2> ah I see
[23:50:40] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Read error: Connection reset by peer)
[23:53:49] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:8c42:fdf9:ab6e:cade)
[23:54:26] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[23:59:25] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[23:59:30] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
