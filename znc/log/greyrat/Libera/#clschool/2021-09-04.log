[00:07:38] *** Quits: rain3 (~rain3___@79.115.250.43) (Ping timeout: 256 seconds)
[00:09:48] *** Quits: vats (~vats@180.149.226.8) (Read error: Connection reset by peer)
[00:28:58] *** Quits: Jacobis9000 (~josephash@host86-139-59-58.range86-139.btcentralplus.com) (Ping timeout: 252 seconds)
[00:30:52] *** Joins: Jacobis9000 (~josephash@213.205.242.238)
[00:37:16] *** Joins: Oladon (~olad@98.43.81.226)
[00:38:05] *** Quits: fengshaun (~fengshaun@68.69.214.210) (Quit: bibi!)
[01:11:08] *** Joins: lisp123 (~lisp123@45.86.202.65)
[01:18:18] <lisp123> Is it true that (atom x) and (listp x) are exhaustive cases for x?
[01:18:43] <lisp123> or could something slip through (e.g. symbolp, stringp, etc.) - I don't think so, but wanted to confirm :)
[01:19:12] <lisp123> exhaustive in the sense x can either be atom or list, but cannot be something else that is _not_ atom or list
[01:21:00] <lotuseater> (deftype atom () '(not cons))
[01:21:12] <lotuseater> that's what the spec says about it
[01:21:28] <lotuseater> so seems to be the case
[01:21:57] <White_Flame> yep
[01:23:21] <lisp123> Thanks lotuseater and White_Flame!
[01:23:45] <White_Flame> it is a very old term, dating back to the original lisps
[01:23:50] <White_Flame> when it didn't have many types
[01:24:50] <lisp123> I am used to the old names, to be honest (I learnt from some of the older textbooks). Also feels pretty hipster and cool to do (caddr x) instead of (third x) :P
[01:25:46] <lotuseater> and the function *should* be by convention ATOMP (like with NULL vs NULLP) but that's then also for historical backwards compatibility
[01:25:59] <White_Flame> back before the conventions were conventions
[01:26:14] <lotuseater> hehe yes
[01:26:41] <lotuseater> and not ATOM-P or NULL-P
[01:27:00] <lisp123> lotuseater: Yeah, the backward compatability points does make for a slightly less elegant language, it comes across in a lot of places too
[01:27:36] <lotuseater> atomos, the unpartable
[01:27:58] <White_Flame> yet symbols are quite partable, and were used as strings before they had strings
[01:28:33] <White_Flame> (explode 'foo) => '(f o o)
[01:28:48] <lotuseater> but maybe in the future we need also the types FERMION and QUARK
[01:31:18] <lisp123> Once Quantum Computing takes off, we might
[01:31:28] <lotuseater> uuuh
[01:40:49] <lisp123> On an unrelated question, is it faster to catch an error or to check for it?
[01:41:26] <lisp123> e.g. if I have (symbol-name arg), I should protect it (in certain cases) with (and (symbolp arg) (symbol-name arg))
[01:41:46] <lisp123> What's the performance difference of doing this check vs. catching the error
[01:41:57] <lotuseater> and when looking at the definition of the metacircular interpreter, it works on lists and compares symbols for "raw" equality or looks if those are what it calls atoms, so another hint that those are complementary supersets
[01:42:23] <lisp123> (I assume type checking is faster unless the likelihood of an error is very low)?
[01:42:49] <lisp123> lotuseater: Thanks, useful to know
[01:43:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:45:05] <lotuseater> and raw in this context means indeed by pointers with EQ
[01:45:29] <lisp123> yes
[01:51:38] <pjb> lisp123: (and (atom 'nil) (listp 'nil))  #| --> t |#  do you call that exhaustive?
[01:52:51] <pjb> lisp123: it depends on the compiler and implementation.
[01:53:20] <lotuseater> Odd exceptions confirm the rule.
[01:53:23] <pjb> lisp123: but with naive compilers, symbol-name  is already testing for symbolp, so  (and (symbolp arg) (symbol-name arg)) is redudant, if arg is usually a symbol.
[01:53:53] <pjb> lisp123: you'd need a sophisticated compiler, that would opencode CL operations such as symbol-name, to be able to eliminate the duplicate symbolp test.
[01:54:15] <pjb> lisp123: in any case, you'd still write it, if you don't want to handle a type-error.
[01:54:23] <lisp123> pjb: thanks
[01:54:54] <pjb> Note also that the exceptional situation says: "Should signal an error of type type-error if symbol is not a symbol."  "SHOULD" not "MUST".
[01:55:10] <lisp123> pjb: symbol-name  is already testing for symbolp, so  (and (symbolp arg) (symbol-name arg)) is redudant, if arg is usually a symbol. --> so this will not throw an error?
[01:55:52] <lisp123> (in some implementations, tying back to your last sentence)
[01:55:56] <pjb> No, (mapcar (lambda (arg) (and (symbolp arg) (symbol-name arg))) '(1 deux "trois" :quatre)) #| --> (nil "DEUX" nil "QUATRE") |# 
[01:56:29] <pjb> (mapcar (lambda (arg) (handler-case (symbol-name arg) (type-error (err) err))) '(1 deux "trois" :quatre)) #| --> (#<type-error #x30200567347D> "DEUX" #<type-error #x3020056733AD> "QUATRE") |# 
[01:57:31] <lisp123> Thanks, that makes sense
[01:58:00] <lisp123> Do you think its an expensive overhead to add the symbolp check?
[01:58:38] <lisp123> I think it would be a useful program that calculates the computational load of a program based units of "CONS"
[01:59:21] <lisp123> (Have a table of all the primitives and give them a value relative to the computational cost of CONS)
[01:59:35] <lisp123> And then recurisvely go down a function or macro and sum up all the costs
[01:59:49] <pjb> lisp123: assume the overhead of and symbolp is tau and the overhad of handler-case signal type-error is epsilon.  Assume you have N symbols, and M non-symbols. Is N*tau greater than M*epsilon?
[02:00:47] <lisp123> If we have the values of tau and epsilon, it would be good to draw a graph to see the intersection points, I think that would be a worthwhile package
[02:01:12] <pjb> (let ((tau 1e-9) (epsilon 1e-6) (N 1e9) (M 5e6)) (< (* N tau) (* M epsilon))) #| --> t |# 
[02:02:44] <lisp123> pjb: Is cl-stepper a code walker?
[02:02:59] <lisp123> Wonder if it can be adapted to this case of calculating the cost of a function
[02:03:09] <pjb> lisp123: you could say that.
[02:03:16] <pjb> Of course, it could.
[02:03:34] <lisp123> (cost of the function depends on the input, but at least one could generate a function of the inputs)
[02:04:10] <pjb> using acl might be easier to do this kind of things, but it's an abstract subset of CLâ€¦
[02:04:17] <lisp123> Could be very useful, but that's something for a macro wizard like yourself ;)
[02:05:03] <lisp123> I should learn ACL at some point
[02:05:11] <lisp123> Must be a lot of useful algorithms in there
[02:05:14] <pjb> One problem to implement such a function is for example, you could count O(?) for the number of + operation, but this wouldn't could the + operations performed in system functions such as MAP or any other CL function.
[02:06:33] <lisp123> I was thinking of having a mapping of all the primitive functions in terms of their cost
[02:06:46] <lisp123> Then for MAP - you would run the same program to calculate its cost
[02:06:56] <lisp123> Which would then be used in any function that calls MAP
[02:07:32] <lisp123> Since MAP is a function that accepts a function, it would not accept simply a number, but rather a function so the cost of it is like a composite function
[02:07:52] <lisp123> (Map-Cost (Function-cost args))
[02:07:55] <lisp123> Something like that
[02:14:35] *** Quits: Jacobis9000 (~josephash@213.205.242.238) (Read error: Connection reset by peer)
[02:28:03] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:31:36] *** Quits: lisp123 (~lisp123@45.86.202.65) (Quit: Leaving...)
[02:44:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[02:46:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:15:44] *** Joins: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com)
[03:20:10] *** Quits: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com) (Ping timeout: 240 seconds)
[03:26:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:28:33] *** Joins: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com)
[03:37:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:42:01] *** Quits: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com) (Ping timeout: 252 seconds)
[04:30:03] *** Quits: random-nick (~random-ni@87.116.176.59) (*.net *.split)
[04:30:03] *** Quits: micro (~micro@user/micro) (*.net *.split)
[04:30:03] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[04:30:03] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[04:30:06] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[04:30:10] *** Joins: micro (~micro@user/micro)
[04:31:48] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:32:02] *** Joins: minion (~minion@common-lisp.net)
[04:32:10] *** Joins: random-nick (~random-ni@87.116.165.220)
[04:32:16] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[04:32:33] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:35:16] *** Joins: aeth (~aeth@user/aeth)
[04:56:49] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:11:47] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:21:01] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:39:13] *** Joins: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com)
[05:43:38] *** Quits: Jacobis9000 (~josephash@host86-131-233-240.range86-131.btcentralplus.com) (Ping timeout: 252 seconds)
[05:46:43] *** Joins: Oladon (~olad@98.43.81.226)
[05:57:49] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:32:27] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:34:46] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[07:17:04] *** Quits: sts-q (~sts-q@212.53.219.164) (Ping timeout: 252 seconds)
[07:23:31] *** Joins: sts-q (~sts-q@212.53.219.154)
[07:26:27] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[07:30:53] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 252 seconds)
[08:27:17] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[08:31:52] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 252 seconds)
[08:32:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:11:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[10:13:54] *** Joins: hendursaga (~weechat@user/hendursaga)
[10:29:19] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[10:33:27] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 245 seconds)
[10:45:22] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[11:12:45] *** Joins: shka (~herr@109.231.62.239)
[11:30:12] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[11:34:42] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 245 seconds)
[12:31:01] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[12:32:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:36:41] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 252 seconds)
[12:36:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:40:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:53:07] *** Quits: santiagopim (~user@90.167.66.93) (Ping timeout: 252 seconds)
[13:05:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:05:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:10:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[13:17:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:27:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:32:12] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[13:36:40] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 240 seconds)
[14:33:02] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[14:37:12] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 245 seconds)
[14:41:23] *** Joins: random-nick (~random-ni@87.116.165.220)
[14:59:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:31:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:34:04] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[15:38:44] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 252 seconds)
[15:57:55] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[16:35:04] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[16:35:49] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Ping timeout: 252 seconds)
[16:39:47] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 252 seconds)
[16:53:14] *** Joins: random-nick (~random-ni@87.116.180.105)
[17:35:53] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[17:41:14] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Ping timeout: 250 seconds)
[17:51:00] *** Joins: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com)
[17:55:32] *** Quits: Jacobis9000 (~josephash@host86-189-251-97.range86-189.btcentralplus.com) (Client Quit)
[17:58:05] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:58:47] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:43:16] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:37:19] *** Joins: makomo (~makomo@user/makomo)
[19:45:57] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[20:30:16] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:54:10] <kagevf> pjb: what is "ACL"? You said it was an abstract subset of CL ... is it this? https://www.cs.utexas.edu/users/moore/acl2/manuals/current/manual/index-seo.php/ACL2____Common_02Lisp ... that was the only thing I could find ...
[21:08:32] <lotuseater> Allegro Common Lisp
[21:09:19] <lotuseater> ACL2 is not an abstract subset, it's a functional subset for the proof assistant.
[21:18:06] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:26:07] <pjb> Yes, ACl2.
[21:26:44] <pjb> Well whatever you call it, it has the inconvenient that you cannot feed it pure CL programs and have them proved, you have to rewrite your CL code in ACL2.
[21:27:11] <pjb> Almost all program proof system have this inconvenient.
[21:56:07] *** Joins: Achylles (~Achylles_@2804:431:d724:131a:afba:e8f4:a787:4346)
[21:57:31] *** Quits: Achylles (~Achylles_@2804:431:d724:131a:afba:e8f4:a787:4346) (Read error: Connection reset by peer)
[21:59:01] *** Joins: Achylles (~Achylles_@2804:431:d724:131a:afba:e8f4:a787:4346)
[22:14:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:16:39] *** Quits: Achylles (~Achylles_@2804:431:d724:131a:afba:e8f4:a787:4346) (Read error: Connection reset by peer)
[22:16:57] *** Joins: Achylles (~Achylles_@2804:431:d724:131a:afba:e8f4:a787:4346)
[22:41:41] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[22:59:36] <edgar-rft> -> https://www.acronymfinder.com/ALC.html
[23:02:22] <edgar-rft> sorry, this one of course -> https://www.acronymattic.com/ACL.html
[23:04:19] <edgar-rft> ...and this one -> https://www.acronymfinder.com/ACL.html
[23:20:23] <kagevf> ah, ok, thank you lotuseater pjb edgar-rft 
[23:30:18] <edgar-rft> kagevf: I'm quite sure pjb meant this thing -> https://en.wikipedia.org/wiki/ACL2
[23:52:42] *** Joins: lisp123 (~lisp123@45.86.202.23)
