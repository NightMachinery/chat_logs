[00:50:20] *** Joins: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net)
[01:13:04] <guifa>  What's the best way to check for a warning?
[01:13:51] <lizmat> CONTROL block ?
[01:14:04] <lizmat> m: CONTROL { dd $_ }; warn "foo"
[01:14:04] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «CX::Warn.new(message => "foo")␤MoarVM panic: Trying to unwind over wrong handler␤»
[01:14:14] <lizmat> yeah that last one is a known one
[01:14:22] <lizmat> m: { CONTROL { dd $_ }; warn "foo" }
[01:14:22] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «CX::Warn.new(message => "foo")␤MoarVM panic: Trying to unwind over wrong handler␤»
[01:14:33] <lizmat> m: sub a() { CONTROL { dd $_ }; warn "foo" }; a
[01:14:33] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «CX::Warn.new(message => "foo")␤MoarVM panic: Trying to unwind over wrong handler␤»
[01:14:35] <lizmat> hmmm
[01:14:38] <guifa> okay, I had ben getting the MoarVM panic for a bit and wasn't sure if I was doing something wrong
[01:14:39] <lizmat> anyways...
[01:14:49] <guifa> but it's not just me apparently lol
[01:14:52] <lizmat> m: sub a() { CONTROL { dd $_; .resume }; warn "foo" }; a
[01:14:53] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «CX::Warn.new(message => "foo")␤»
[01:15:08] <lizmat> m: { CONTROL { dd $_; .resume }; warn "foo" }
[01:15:08] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «CX::Warn.new(message => "foo")␤»
[01:15:18] <lizmat> yeah, you need the .resume
[01:16:40] <guifa> actually I was able to do it okay with CONTROL { when CX::Warn { … } } and that seemed to handle things okay too
[01:16:49] * guifa . o O ( maybe that can help for tracking down the panic? )
[01:19:02] <guifa> ugly but
[01:19:06] <guifa> m: use Test; my $warned = False; { CONTROL { when CX::Warn { $warned = True if .message eq 'foo' ; .resume } }; warn 'foo' }; ok $warned; done-testing()
[01:19:07] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «ok 1 - ␤1..1␤»
[01:21:44] <guifa> none of dies-ok, fails-ok, and throws-like catch warnings, so it looks like that's really the only way.  Maybe we should add a warns-like ?
[01:26:15] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[01:26:17] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[01:56:50] <guifa> And at long last, Intl::LanguageTag finally has an update!
[02:08:20] *** Joins: m6locks (thebbo@2001:708:30:2160::4)
[02:33:56] <japhb> guifa: warns-like sounds useful to me.  PR it?
[02:34:48] <guifa> japhb: I can probably toss something together tonight or tomorrow evening.  
[03:03:04] <rassoc> any sexier way to write this list comprehension since we have no .repeated-combinations? [(x,y) | x <- [1..3], y <- [x..3]]
[03:03:09] <rassoc> currently have: 
[03:03:16] <rassoc> m: say gather for 1..3 -> $x { for $x..3 -> $y { take ($x, $y) }}
[03:03:16] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «((1 1) (1 2) (1 3) (2 2) (2 3) (3 3))␤»
[03:08:20] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:08:20] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:10:03] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:10:27] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[03:13:54] *** Quits: ilogger2_ (~ilogger2@colabti.org) (Ping timeout: 268 seconds)
[03:14:15] *** Joins: ilogger2 (~ilogger2@colabti.org)
[03:23:01] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[03:23:20] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[03:23:54] *** Joins: Sgeo (~Sgeo@user/sgeo)
[03:23:57] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[03:45:24] <[Coke]> m: given <1 2 3> { |($_ Z $_), |$_.combinations(2) }
[03:45:24] <camelia> rakudo-moar 1bd0411c0: ( no output )
[03:45:29] <[Coke]> m: say given <1 2 3> { |($_ Z $_), |$_.combinations(2) }
[03:45:29] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»
[03:45:35] <[Coke]> m: dd given <1 2 3> { |($_ Z $_), |$_.combinations(2) }
[03:45:35] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3dd given <1 2 3>7⏏5 { |($_ Z $_), |$_.combinations(2) }␤    expecting any of:…»
[03:46:10] <[Coke]> . o O (as I try to remember why that works in the REPL...)
[03:46:42] <[Coke]> m: say do given <1 2 3> { |($_ Z $_), |$_.combinations(2) }
[03:46:42] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «((1 1) (2 2) (3 3) (1 2) (1 3) (2 3))␤»
[03:47:04] <[Coke]> arguably shorter but even less clear.
[03:54:56] <rassoc> feels a bit more cryptic, but thanks for taking a look
[03:55:50] <rassoc> went through https://blog.lojic.com/2020/12/26/comprehensions-in-julia.html and the above is the only thing that's truly uglier than "idiomatic" raku
[03:56:29] <rassoc> than the provided comprehensions compared to "idiomatic" raku*
[04:01:57] <[Coke]> m: my \a = (1,2,3); dd (a X a).grep({$_[1]>=$_[0]})
[04:01:57] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «((1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)).Seq␤»
[04:02:35] <[Coke]> (without the grep, you'd also get, e.g. (3 1)
[04:03:41] <rassoc> clever!
[04:04:15] <[Coke]> I think the gather/take is still very easy to read. :)
[04:04:23] <[Coke]> afk
[04:05:06] <japhb> m: my \a = (1,2,3); dd (a X a).grep({[<=] @$_})
[04:05:06] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «((1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)).Seq␤»
[04:06:14] <rassoc> @$_, whoa, first time seeing this
[04:08:36] <japhb> rassoc: just treating $_ as a Positional
[04:11:56] *** Quits: kjp (~kevin@180.216.13.19) (Quit: WeeChat 2.8)
[04:12:13] <rassoc> yeah, figured, just never stumbled upon that. good to know, thanks!
[04:12:30] <rassoc> guess i'll go with (a X a).grep: { .head <= .tail } for now. feels clean
[04:15:12] <guifa> you can also just use @_ too 
[04:15:38] <guifa> m: my \a = (1,2,3); dd (a X a).grep({[<=] @_})
[04:15:38] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «(((1, 1),), ((1, 2),), ((1, 3),), ((2, 2),), ((2, 3),), ((3, 3),)).Seq␤»
[04:15:56] <guifa> hmm
[04:17:09] <lucs> 
[04:18:07] <lucs> Er, camelia still not set up to respond to PM?
[04:22:21] *** Joins: Doc_Holliwould (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[04:24:12] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[04:28:48] * moon-child still thinks the apl solutions are prettiest of all, barring the one involving double-ended ranges
[04:28:54] <moon-child> especially the ones where you can use 'where'
[04:32:47] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:32:58] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:37:05] *** Joins: kjp (~kevin@180.216.13.19)
[05:02:47] *** Quits: Doc_Holliwould (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[05:14:01] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[05:16:31] <japhb> Another possibly valuable (but far less easy to automate) task for volunteers is perf testing modules.  (I say far harder because there's no obvious baseline to compare against, unless you're just looking for Rakudo regressions, or contribute a perf test to the module.)
[05:17:15] <japhb> My reason for thinking that is I wonder how much of the *perceived* slowness of Raku in actual use is low-level modules that haven't been optimized yet.
[05:20:52] *** Quits: kjp (~kevin@180.216.13.19) (Quit: WeeChat 2.8)
[05:46:55] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[05:49:09] *** Joins: canw (~canw@111.225.239.156)
[05:50:08] *** Joins: tejr (~tejr@user/tejr)
[05:50:49] *** Joins: kjp (~kevin@180.216.13.19)
[05:57:44] <rassoc> perceived? i have measured my far from optimized, heavily allocating ruby tools and the raku ported counterparts, seeing 5x-100x slowdowns and *a lot* more mem usage, e.g. 34mb vs 2.3gb. now, handwriting some super hot stuff in nqp help quite a bit, sometimes even resulting in a slight speedup. that said, i don't think that that's the whole picture when it comes to perf, seeing what kind of mind-bending work jnthn has to do to free up a few cycles here and 
[05:57:45] <rassoc> there. anyways, time for bed. thanks again for the help above!
[06:03:32] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:15:17] *** Quits: rassoc (~rassoc@139.174.228.245) (Ping timeout: 252 seconds)
[06:23:43] <japhb> .tell rassoc Oh, I wasn't saying there aren't lots of places that need optimization.  I meant, when someone sits down and says "Is Raku going to be fast enough for my needs?" then having slow and/or memory hogging standard modules can make the answer "No" without going any farther.  One of many reasons that e.g. JSON::Fast and CBOR::Simple are rather heavily optimized.  Because if you need them, there's a 
[06:23:44] <tellable6> japhb, I'll pass your message to rassoc
[06:23:49] <japhb> decent chance you need to do a *lot* with data in those formats.
[06:24:20] <japhb> .tell rassoc (message got cut) Because if you need them, there's a decent chance you need to do a *lot* with data in those formats.
[06:24:21] <tellable6> japhb, I'll pass your message to rassoc
[06:29:21] <moon-child> 'write it in nqp' is the raku version of 'write it in assembly'
[06:38:52] *** Quits: leah2 (~leah@vuxu.org) (Read error: Connection reset by peer)
[06:40:22] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[07:25:55] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[07:26:08] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[07:59:42] *** Quits: canw (~canw@111.225.239.156) (Quit: Connection closed)
[08:42:12] *** Joins: john (~j@67.206.101.71)
[08:42:45] <john> hello gents and ladies.
[08:49:16] *** Quits: john (~j@67.206.101.71) (Ping timeout: 246 seconds)
[09:11:49] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[09:16:03] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[10:14:19] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[10:23:34] *** Quits: jmcgnh (~jmcgnh@c-98-229-233-252.hsd1.nh.comcast.net) (Ping timeout: 265 seconds)
[10:26:55] *** Joins: jmcgnh (~jmcgnh@c-98-229-233-252.hsd1.nh.comcast.net)
[10:33:09] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:58] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:36:05] *** Joins: Doc_Holliwould (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[10:37:04] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[10:49:40] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 265 seconds)
[10:56:59] *** Joins: holli__ (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[11:00:17] *** Quits: Doc_Holliwould (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[11:00:33] *** Joins: _________ (~nobody@user/noodly)
[11:07:56] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:18:34] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[11:20:58] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:26:00] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 272 seconds)
[11:26:44] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[11:33:18] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[11:35:06] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 252 seconds)
[11:37:00] *** Joins: stoned75_ (~seb@pop.92-184-100-175.mobile.abo.orange.fr)
[11:40:23] *** Quits: stoned75 (~seb@pop.92-184-102-43.mobile.abo.orange.fr) (Ping timeout: 258 seconds)
[11:46:58] *** Quits: Eddward (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[11:56:31] *** Quits: holli__ (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[12:11:00] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 272 seconds)
[12:12:26] *** Quits: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net) (Remote host closed the connection)
[12:12:35] *** Joins: Geth (~LizBot@ipv4-wenzperl.connected.by.freedominter.net)
[12:20:34] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:21:16] *** Joins: _________ (~nobody@user/noodly)
[12:28:08] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[12:28:29] <Xliff> \o
[12:29:06] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.2)
[12:30:08] <moon-child> o/
[12:43:31] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[12:49:40] *** Joins: leah2 (~leah@vuxu.org)
[13:17:23] *** Joins: rassoc (~rassoc@139.174.228.245)
[13:27:12] *** Joins: MoC (~moc@user/moc)
[14:15:31] *** Joins: frost (~frost@59.71.241.179)
[15:06:28] *** Quits: rassoc (~rassoc@139.174.228.245) (Quit: Quit)
[15:19:01] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:28:43] *** Joins: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de)
[15:29:54] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[15:30:25] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[15:43:13] *** Quits: guifa (~guifa@pool-71-255-232-11.washdc.east.verizon.net) (Quit: guifa)
[15:44:40] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[15:58:04] *** Joins: frost (~frost@59.71.241.179)
[16:32:39] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:33:46] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:46:47] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.0.1)
[17:22:22] *** Quits: Doc_Holliwood (~holli@dslb-092-076-011-142.092.076.pools.vodafone-ip.de) (Ping timeout: 246 seconds)
[18:30:08] *** Joins: Eddward (~Eddward@207.138.204.132)
[18:36:04] *** Joins: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de)
[18:39:18] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:08:44] *** Quits: stoned75_ (~seb@pop.92-184-100-175.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[19:21:43] *** Joins: melezhik (~melezhik@174.128.60.162)
[19:21:43] <melezhik> .
[19:39:41] *** Quits: melezhik (~melezhik@174.128.60.162) (Quit: Connection closed)
[19:41:25] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:04:32] *** Quits: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[20:17:02] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:41:35] *** Quits: smarton (~smarton@121407.xyz) (Changing host)
[20:41:35] *** Joins: smarton (~smarton@gnu/webmaster/smarton)
[20:57:13] *** Joins: xerxes (~xerxes@117.222.64.149)
[21:21:03] <gfldex> Does Raku being impossible to teach mean that we don't have to worry about being dragged into the GitHub Copilot debate? :->
[21:33:42] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Quit: e via, verso nuove avventure)
[21:55:44] <[Coke]> me: let me try something in raku. Realize I'm running an old version. rakubrew switch to the newer one I installed a month ago. realize I don't have zef. install zef, readline, back into raku.... have entirely forgotten why I came in this room.
[21:55:51] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[21:56:03] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[21:56:40] *** Joins: cognominal (~cognomina@lfbn-idf1-1-760-229.w86-245.abo.wanadoo.fr)
[21:57:14] <gfldex> Maybe Micro$oft can write you an AI that suggests things worth remembering.
[21:59:28] <[Coke]> probably already one in Azure somewhere.
[22:02:10] <lizmat> well, what would keep MS from downloading open source modules from anywhere else to run Copilot on?
[22:02:11] <tellable6> 2021-07-08T13:01:19Z #raku-dev <tbrowder> lizmat is there an issue with my rakudo docs PR #4441? my intent was to get published pretty much as is and let you experts add to it--a living WIP
[22:04:27] <gfldex> lizmat: see: https://twitter.com/C64Revival/status/1412963077801189376
[22:04:41] <gfldex> and for giggles: https://twitter.com/ferrix/status/1412813396123267073
[22:08:36] <gfldex> Joking aside, if we would have a big userbase, this would be a problem for us. As I understand it, Copilot chops up publicly _visible_ code into sections of up to 10 lines of code and tries to find a match while you type new code in VS. And they don't care about the license of those 10 lines of code.
[22:09:12] <gfldex> Not much a problem for Java, because that will always be fair use. In Raku 10 lines of code can be the whole bloody program.
[22:10:42] <lizmat> but what would moving to Gitea or GitLab bring ?
[22:11:03] <gfldex> M$ wont touch those.
[22:11:40] <gfldex> Others might, but not M$. They got a good legal team.
[22:11:59] <[Coke]> Is there a discussion to move us off github?
[22:12:07] <gfldex> Not really.
[22:12:21] <[Coke]> ok, good. :)
[22:15:20] *** Quits: xerxes (~xerxes@117.222.64.149) (Quit: leaving)
[22:15:40] <polettix_> hello all
[22:15:47] <polettix_> sub whatever (@x) { @x.shift } ; my @y = 1..3; @y.say; whatever(@y); @y.say
[22:15:48] <evalable6> polettix_, rakudo-moar 1bd0411c0: OUTPUT: «[1 2 3]␤[2 3]␤»
[22:16:15] <gfldex> The cool thing is that not M$ is violating the license but the user of VS with that Copilot plugin. The user of Copilot is creating the derived work. So if you publish under any license that requires attribution, you can go and hunt projects that use 10 lines of code of your work.
[22:16:39] <Voldenet> Well, people can find code in your project and steal it anyway
[22:16:39] <polettix_> wondering why @x "is rw" here, I thought parameters were supposed to be read-only by default
[22:16:55] *** Joins: xinming (~xinming@115.219.32.202)
[22:17:06] <gfldex> m: say ‚Hi polettix_! Do you ♥ Raku?‘;
[22:17:07] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Hi polettix_! Do you ♥ Raku?␤»
[22:17:18] <Voldenet> and people actually do that - if copilot generates something like that looks like "the whole bloody program" they may get suspicious
[22:17:42] <polettix_> gfldex: enough to try learning it :)
[22:18:04] <gfldex> polettix_: We consider @x to be an object that you call public methods on.
[22:18:16] <gfldex> And public methods are fair game. :)
[22:19:08] <polettix_> I see
[22:19:28] <polettix_> sub whatever (@x) { shift @x } ; my @y = 1..3; @y.say; whatever(@y); @y.say
[22:19:28] <evalable6> polettix_, rakudo-moar 1bd0411c0: OUTPUT: «[1 2 3]␤[2 3]␤»
[22:19:50] <polettix_> this is a bit more objectable ;)
[22:20:16] <polettix_> or maybe *less* objectable! (terrible pun)
[22:20:27] <Voldenet> sub whatever (@x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y); @y.say
[22:20:35] <Voldenet> m: sub whatever (@x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y); @y.say
[22:20:35] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Cannot call 'shift' on an immutable 'Range'␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[22:20:46] <Voldenet> you could do this
[22:21:31] <polettix_> Voldenet: I was expecting @x to be considered immutable inside whatever() no matter what you pass it
[22:21:59] <polettix_> anyway... it's what I was expecting, just this :)
[22:24:31] <gfldex> m: sub oi(@a) is pure { @a[*]:delete }; my @a = <1 2 3>; oi(@a); dd @a;
[22:24:31] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "oi(@a)" in expression "oi(@a)" in sink context (line 1)␤Array @a = []␤»
[22:24:39] <gfldex> polettix_: at least we are honest ^^^
[22:32:53] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:33:57] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[22:50:16] *** Joins: Doc_Holliwood (~holli@dslb-088-073-151-022.088.073.pools.vodafone-ip.de)
[22:56:15] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[23:01:56] <Xliff> m: sub whatever (Map @x) { shift @x } ; my @y := 1..3; @y.say;
[23:01:56] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤»
[23:02:12] <Xliff> m: sub whatever (Map @x) { shift @x } ; my @y := 1..3; @y.say; hatever(@y); @y.say
[23:02:13] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    hatever used at line 1. Did you mean 'whatever'?␤␤»
[23:02:17] <Xliff> m: sub whatever (Map @x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y); @y.say
[23:02:17] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Type check failed in binding to parameter '@x'; expected Positional[Map] but got Range (1..3)␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[23:02:37] <Xliff> m: sub whatever (@x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y.Map); @y.say
[23:02:37] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Odd number of elements found where hash initializer expected:␤Found 3 (implicit) elements:␤Last element seen: 3␤  in block <unit> at <tmp> line 1␤␤»
[23:02:50] <Xliff> m: sub whatever (List @x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y); @y.say
[23:02:50] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Type check failed in binding to parameter '@x'; expected Positional[List] but got Range (1..3)␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[23:03:10] <Xliff> m: sub whatever (List @x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y.Array); @y.say
[23:03:10] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Type check failed in binding to parameter '@x'; expected Positional[List] but got Array ([1, 2, 3])␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[23:03:21] <Xliff> m: sub whatever (List @x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y.List); @y.say
[23:03:21] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Type check failed in binding to parameter '@x'; expected Positional[List] but got List ((1, 2, 3))␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[23:03:29] <Xliff> m: sub whatever (List $x) { shift @x } ; my @y := 1..3; @y.say; whatever(@y.List); @y.say
[23:03:30] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '@x' is not declared.  Did you mean '$x'?␤at <tmp>:1␤------> 3sub whatever (List $x) { shift 7⏏5@x } ; my @y := 1..3; @y.say; whatever(@␤»
[23:03:37] <Xliff> m: sub whatever (List $x) { shift $x[] } ; my @y := 1..3; @y.say; whatever(@y.List); @y.say
[23:03:37] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «1..3␤Cannot call 'shift' on an immutable 'List'␤  in sub whatever at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»
[23:03:43] <Xliff> There we go.
[23:03:50] <Xliff> List == Immutable Array
[23:03:57] <Xliff> Map == Immutable Hash
[23:04:01] <Xliff> FYI
[23:06:54] *** Joins: john (~j@67.206.101.71)
[23:08:52] <Voldenet> `my @whatever` creates an Array and `=` to it uses list assignment
[23:09:15] <Voldenet> m: my @y := 1..3; @y = 1..3;
[23:09:15] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «Cannot modify an immutable Range (1..3)␤  in block <unit> at <tmp> line 1␤␤»
[23:09:57] <Voldenet> but @y is only expected to be Positional
[23:10:58] *** Quits: john (~j@67.206.101.71) (Ping timeout: 240 seconds)
[23:11:09] <Voldenet> m: my @y = 1..3; @y = 1..3;
[23:11:09] <camelia> rakudo-moar 1bd0411c0: ( no output )
[23:15:08] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[23:15:39] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[23:16:59] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Remote host closed the connection)
[23:17:46] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[23:19:43] <gfldex> Xliff: did you consider NativeCall?
[23:20:31] *** Quits: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net) (Read error: Connection reset by peer)
[23:20:38] *** Joins: Kaipi (~Kaiepi@nwcsnbsc03w-47-54-173-93.dhcp-dynamic.fibreop.nb.bellaliant.net)
[23:24:53] *** Joins: nibble (~nibble@p5dd8bbac.dip0.t-ipconnect.de)
[23:26:27] *** Joins: kylese (~kylese@p5dd8bbac.dip0.t-ipconnect.de)
[23:39:18] <gfldex> m: sub whatever (List() $x) { shift $x } ; my @y = 1..3; whatever(@y); @y.say
[23:39:18] <camelia> rakudo-moar 1bd0411c0: OUTPUT: «[2 3]␤»
[23:40:05] <gfldex> Also, the type constraint is missleading. It's a contraint what you can pass into the sub, not what the sub can do to the container it's being called with.
[23:48:39] <Xliff> gfldex: What do you mean by "did you consider NativeCall"?
[23:50:00] <Xliff> There. That's my 581,502nd line of Raku written...
[23:50:08] <Xliff> Or there abouts...
