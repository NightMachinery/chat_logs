[00:02:14] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[00:08:00] *** Joins: shka (~herr@109.231.62.239)
[00:16:28] *** Quits: sp41 (~spal@70.241.120.35) (Remote host closed the connection)
[00:17:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:18:14] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Quit: bye)
[00:22:11] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[00:31:00] *** Quits: silasfox (~sbv@2001-4dd6-5b1d-0-67ea-637e-1274-9008.ipv6dyn.netcologne.de) (Ping timeout: 250 seconds)
[00:32:47] *** Joins: silasfox (~sbv@cgn-213-196-213-250.nc.de)
[00:38:20] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[00:41:14] *** Quits: silasfox (~sbv@cgn-213-196-213-250.nc.de) (Ping timeout: 252 seconds)
[00:42:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[00:43:08] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:49:38] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[00:52:50] <coat> I am trying to make a small wrapper that can push a cons to alist. (defun add-key-value (key value alist) (push (cons key value) alist)) (defparameter *a* nil) (add-key-value "foo" "bar" *a*). But *a* remains as NIL after I execute this.
[00:53:11] <coat> How can I make the add-key-value function actually modify the alist?
[00:56:02] <pjb> coat: if you really want to do that, you just use defsetf
[00:56:08] <pjb> not defun
[00:56:40] <pjb> coat: I guess you could also use define-modify-macro and acons.
[00:58:35] <pjb> (define-modify-macro aconsf (key value) (lambda (alist key value) (acons key value alist))) (let ((alist '((a . 1) (b . 2)))) (aconsf alist 'c 3) alist) #| --> ((c . 3) (a . 1) (b . 2)) |#
[00:59:13] <pjb> coat: unfortunately, a lot of CL functions don't have their parameters in the right order for define-modify-macro… So you need to swap them, eg. with that lambda.
[01:00:03] <coat> pjb: Okay. Curious about another thing. Is creating a list and pushing cons to it not a popular way? Do people usually use acons instead?
[01:00:05] <pjb> coat: note: it's bad to mutate state!  Instead, use a local variable and acons!
[01:00:27] <pjb> (let ((alist '((a . 1) (b . 2))))   (let ((alist (acons 'c 3 alist))) alist)) #| --> ((c . 3) (a . 1) (b . 2)) |#
[01:00:46] <pjb> for alists, yes, acons is indicated.
[01:10:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:15:55] *** Joins: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86)
[01:21:38] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net)
[01:52:52] <jcowan> The whole point of alists is that they are persistent
[01:56:35] *** Joins: selwyn (~selwyn@user/selwyn)
[02:00:42] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-22.prtc.net) (Quit: Client closed)
[02:06:41] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:59fd:6cc7:d82f:e6b3)
[02:18:59] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 244 seconds)
[02:24:24] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Ping timeout: 272 seconds)
[02:29:16] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[02:29:28] *** Joins: livoreno (~livoreno@user/notzmv)
[02:29:46] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[02:30:05] *** Joins: livoreno (~livoreno@user/notzmv)
[02:37:18] *** Quits: pve (~pve@188-67-197-198.bb.dnainternet.fi) (Quit: leaving)
[02:38:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:42:58] *** Joins: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e)
[02:43:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[02:44:04] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[02:59:05] *** Quits: frgo (~frgo@p200300deef27d700957853a548a7fa67.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:59:32] *** Joins: frgo (~frgo@p200300deef27d7006868c0d1297ead44.dip0.t-ipconnect.de)
[03:13:49] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[03:14:00] *** Joins: klltkr (~klltkr@host81-136-5-250.range81-136.btcentralplus.com)
[03:15:37] *** Quits: klltkr_ (~klltkr@2a00:23c5:d198:ad01:ae9:a7bd:1f6f:477e) (Ping timeout: 268 seconds)
[03:37:08] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[03:37:37] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[03:42:04] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 258 seconds)
[03:42:04] *** Quits: andreyorst (~andreyors@2.92.125.229) (Ping timeout: 258 seconds)
[03:45:00] *** Joins: andreyorst (~andreyors@2.92.125.200)
[03:51:18] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[03:51:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:59fd:6cc7:d82f:e6b3) (Remote host closed the connection)
[03:56:06] *** Joins: [deleted] (~livoreno@user/notzmv)
[04:00:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[04:05:44] *** Quits: klltkr (~klltkr@host81-136-5-250.range81-136.btcentralplus.com) (Ping timeout: 272 seconds)
[04:07:44] *** Joins: cjb (~cjb@user/cjb)
[04:08:49] *** Joins: tfb (~tfb@88.98.95.237)
[04:11:01] *** Quits: tfb (~tfb@88.98.95.237) (Client Quit)
[04:18:20] <jasom> doesn't cl:push leave the original list unchanged?
[04:18:31] <jasom> I thought it only changed the slot that the list was stored in
[04:19:56] <jasom> i.e. isn't this true? (let ((y x)) (push 'foo x) (eq (cdr x) y))
[04:25:21] *** Quits: lotuseater (~user@p200300e787083e00b5e33b4e3d09511f.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[04:25:48] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:25:49] <aeth> the way lists go, a push is a cons, so how can it not do that? there is no list, only cons pairs
[04:26:01] <moon-child> jasom: yes, otherwise it would be O(n) in the length of the referenced list
[04:26:07] *** Joins: livoreno (~livoreno@user/notzmv)
[04:26:36] <aeth> pushes could only directly modify if the list data structure was actually one more pointer, a pointer to the first cons pair (or if it added to the end and was O(n))
[04:27:47] <moon-child> it could also add to the beginning destructively, moving down the elements of each successive cons cell.  Still O(n) though
[04:33:49] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 258 seconds)
[04:34:50] *** Joins: trufas (~trufas@177.240.218.218)
[04:36:01] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:37:54] <aeth> if I have a (with-open-file (stream #P"test42.txt" :direction :output :if-exists :append :if-does-not-exist :create) ...) for quite a few streams (42 would not be too many, since I'm talking about IRC logging), when do I hit limits?
[04:38:04] <aeth> in a typical implementation of today
[04:39:17] <moon-child> on modern unix, a file descriptor is a signed 32-bit integer between 0 and 2^31-1 or so
[04:39:21] *** Joins: notzmv (~zmv@user/notzmv)
[04:39:28] <moon-child> so I would not worry about that if I were you
[04:39:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:39:47] <White_Flame> there are limits beyond running out of descriptors though.  Don't recall where they are unfortunately
[04:39:58] <White_Flame> per-process defaults
[04:40:31] <aeth> I'm just wondering how naive I can make my IRC logging, that's all
[04:41:19] <aeth> Very naive is just leave all of the streams open for all of the files and just keep appending, with periodic FORCE-OUTPUT. Less naive is to only leave it open for very active channels (e.g. here), while not leaving it open for very inactive channels (e.g. my own project channels) until necessary.
[04:41:33] <aeth> However, guessing "inactive" incorrectly is going to mean opening/closing a lot of files
[04:42:03] <aeth> I suppose it kind of has to guess it, though, once queries are taken into account, but those can just be special cased to time out, unlike channels, which are probably going to have some joins/parts/quits/nicks at the very least
[04:42:06] <moon-child> ah, ulimit -n
[04:42:58] <aeth> I could also buffer it for an arbitrary amount of time, but the longer the buffer period is, the more likely that a system failure loses a lot of logs.
[04:44:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[04:44:53] <aeth> I guess with-open-file isn't the way to go since (1) there will be a lot of files and (2) files need to be able to "time out" if inactive until active again (at the very least, for queries)
[04:47:25] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[04:59:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[05:06:29] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[05:08:17] *** Quits: cjb (~cjb@user/cjb) (Quit: brb)
[05:11:38] *** Joins: cjb (~cjb@user/cjb)
[05:13:00] <pjb> aeth: ulimit -n
[05:13:11] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[05:13:23] <pjb> aeth: note: the programs use already a good number of the available file descriptors for the shared libraries etc.
[05:13:36] *** Joins: akoana (~ah@user/akoana)
[05:16:16] <aeth> hmm, interesting, I get 1024, and oddly enough, that might not be enough for IRC
[05:18:13] <aeth> you can "easily" be in a few hundred channels (I'm constantly in anywhere from 16 to 35), which is already pushing into the limits assuming that the machine isn't being used solely for IRC
[05:19:17] <aeth> And yet, every single channel might be active if it logs joins/parts/quits. Most trivially, if you ping out and reconnect before your connection gets the ping timeout, since that ping out will show up in every channel you (re)join.
[05:21:54] <phadthai> shared lib fd are usually closed after reading+mapping, for irc there's the standard 3 (stdin/stdout/stderr) plus one socket per network/server, possibly a few for the display via curses etc... but yes if every channel is logged depending on client it may also mean one fd per channel.  As for the 1024, it's probably the process limit more than the total system one
[05:22:46] <moon-child> ooh, hehe, come to think of it
[05:22:58] <moon-child> you can split up your thing into a bunch of different processes, where each one only has a file or two open
[05:23:12] <moon-child> arrange them (the processes) into a tree
[05:23:15] <moon-child> (please don't actually do this)
[05:23:37] <White_Flame> aeth: just use sqlite
[05:23:56] <aeth> White_Flame: hah, no
[05:24:18] <aeth> White_Flame: for one thing, idk the no-power failure state of sqlite, while I know the no-power failure state of appending to a bunch of log files
[05:25:00] <phadthai> it has a recovery log too iirc
[05:25:17] <White_Flame> or a "real" dbms then
[05:25:22] <aeth> also, IRC is pretty much designed for appending to plain text files since it's a text-and-line oriented protocol with no editing/deletion
[05:25:26] <White_Flame> let it deal with all the file/disk handling
[05:25:28] <phadthai> but last I checked does full updates all at a time rewriting the db
[05:25:53] <White_Flame> quassel logs everything to sqlite, and I've not had a problem with recovering from system crashes and such
[05:26:02] <aeth> Afaik, some people lost their logs when they moved from freenode to libera because it wasn't just plain text files.
[05:26:38] <aeth> anyway, using a databse to append a line of text is major overkill
[05:27:12] <phadthai> and text is very natural for irc of course...
[05:27:17] <aeth> you'd only need a database to cache unsent messages in a bouncer (not client)... more for the reliability guarantees than anything else
[05:27:43] <White_Flame> also, since irc logs are often-written, seldom-read, you could just do a singular linear log, and grep for individual channels later
[05:28:44] <phadthai> and can fdatasync at regular intervals
[05:28:59] <aeth> White_Flame: I mean, yes, that's what I do to display my bot's messages in SLIME (it's running in a background thread).
[05:29:03] <aeth> White_Flame: i.e. 19:09:01 <aeth:#lispcafe> In my client, it's just /ping aeth
[05:29:58] <aeth> White_Flame: However, the stateless all-in-one-place log has a few issues. In particular, QUIT and NICK (and perhaps a few others) are global in IRC, which makes it unclear in which channels those are actually taking place.
[05:30:36] <phadthai> you would ideally add your own tags
[05:30:37] <aeth> Since I can /nick foobarbaz1234 but I might not be in every channel where the bot is
[05:30:45] <phadthai> or IDs
[05:31:56] <aeth> Also it becomes unreadable without grep if I was in a bunch of channels, with one way noisier than the others. For instance, my SLIME is basically just a log of #lispcafe because cond is present there, but it is also present in other, quieter channels
[05:41:16] <waleee> what would be the likely reason for someones (not me) M-x slime-connect to fail with "Can't locate module: SWANK-IO-PACKAGE::SWANK-INDENTATION"?
[05:42:10] <waleee> the app image (which has swank enabled) and the system sbcl is the same version
[05:42:35] <waleee> ... slime installed an at the current melpa-version &c
[05:47:02] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[05:47:33] *** Joins: dlowe (~dlowe@user/dlowe)
[06:06:06] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[06:06:23] *** Joins: derelict (~derelict@user/derelict)
[06:15:58] *** Joins: [deleted] (~livoreno@user/notzmv)
[06:20:00] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[06:28:40] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[06:45:52] *** Quits: bilegeek (~bilegeek@2600:1008:b015:3e96:6f34:1a42:6ac5:3b86) (Quit: Leaving)
[06:48:23] *** Joins: prxq_ (~quassel@dynamic-077-012-206-126.77.12.pool.telefonica.de)
[06:52:18] *** Quits: prxq (~quassel@x4dbd047f.dyn.telefonica.de) (Ping timeout: 244 seconds)
[07:05:08] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 252 seconds)
[07:11:03] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[07:15:44] *** Joins: dsk (~dsk@user/dsk)
[07:20:34] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[07:31:31] <beach> Good morning everyone!
[07:38:30] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[07:43:09] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 265 seconds)
[07:44:54] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[07:47:05] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Client Quit)
[07:48:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:50:30] <lisp123> Hello
[07:50:39] <lisp123> I have an interesting problem for this morning
[07:51:04] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[07:51:14] <lisp123> Say I have class A, which I inherit in Class B. Class has slot slot-a
[07:51:43] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Remote host closed the connection)
[07:52:34] <lisp123> I want to add keys to slot-a in class B but not class A, i.e. in B it should look like (slot-a :accessor :get-slot-a :initform nil :MY-CUSTOM-KEY key-value) whereas in Class A it should be the same but without my-custom-key
[07:52:37] <lisp123> is that possible?
[07:53:28] <loke[m]> lisp123: if I understand you question correctly, then yes it's possible.
[07:53:39] <pjb> lisp123: yes. Just do it.
[07:53:40] <loke[m]> I presume A and B would have different metaclasses.
[07:53:58] <pjb> loke[m]: unrelated.
[07:54:00] <lisp123> loke[m]: yes exactly, class b has a metaclass, and class a is the generic form of it without a metaclass
[07:54:16] <lisp123> thanks pjb and loke[m]  let me try it out now :)
[07:56:28] <beach> lisp123: Your example is very strange with a GET- prefix and an access that is named with a keyword.
[07:56:44] <beach> *accesso
[07:56:48] <beach> *sigh*
[07:56:54] <beach> *accessor
[07:57:30] <beach> And I don't understand this idea of different metaclasses.
[07:57:50] <beach> Then, having A as superclass of B might be problematic.
[07:58:11] <lisp123> beach - I did get instead of b-slot-a since I want the same accessor function across the two classes
[07:58:15] <beach> lisp123: How about you explain a bit more what it is you want to do.
[07:58:40] <beach> Er, what?
[07:59:25] <lisp123> I want to use BKNR datastore to store objects (it uses a metaclass + requires some keys) but want a generic version of the class to also play around with when I don't want it ta automatically go to the datastore
[07:59:26] <loke[m]> lisp123: You are aware of the fact that accessor functions are independent from classes, right?
[08:00:11] <lisp123> yes, but if I name the accessor function class-name-slot-name, then it wouldn't work for 2 classes, since they have different class names
[08:01:04] <beach> lisp123: The name of the access or totally unrelated to the class names.  You can name it whatever you want.
[08:01:40] <beach> It is just the global name of a generic function.
[08:03:20] <lisp123> yes exactly, thats why i am doing get-slot-name as the name of the accessor
[08:03:22] <lisp123> in this case
[08:03:36] <beach> *sigh*
[08:03:53] <lisp123> what would you do?
[08:05:39] <beach> Well, I haven't thought of a solution to your problem, but 1. The prefix GET- seems like an import from languages that don't have SETF and should be avoided.  2. The accessor should be named after some intrinsic property that you want to read or write, whereas a slot is an implementation detail the name of which is usually uninteresting.
[08:06:27] <lisp123> That doesn't sound unreasonable
[08:06:32] <beach> So get-<slot-name> has two problems has two problems in as many words.
[08:10:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[08:12:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[08:12:09] *** Lord_of_Life_ is now known as Lord_of_Life
[08:12:18] <beach> So, do I understand you correctly that you want to use the custom initarg in a slot option when you define class B using DEFCLASS, but you don't want it to be possible when you define class A using DEFCLASS?
[08:13:49] <lisp123> Yes (p.s. 'slot' in 'slot-name' was just for this example, now that I read your comment a second time - I don't use the word slot in my slot names. I haven't used GET so far, but having a think now on how to avoid it as much as possible)
[08:14:38] <lisp123> Also,  Class B is a metaclass of bknr.datastore:persistent-class - whereas Class A is not - that's the main distinction
[08:15:26] <beach> Well, example:  In Common Lisp it is more convenient to say (name <instance>) and (setf (name <instance>) <value>).
[08:15:51] <beach> (setf (get-name <instance>)...) looks very strange.
[08:17:06] <lisp123> Yeah I do the same style as you do it, but it's not a super strong view I have. For example, with database related functions I'm currently liking adding the verbs 'insert' 'create' etc in because it distinguishes them to some degree from a vanilla CL form
[08:17:06] <beach> "is a metaclas of"?  Do you mean "has as its metaclass"?
[08:17:15] <loke[m]> beach: It doesn't look that strange though. Similar to (SETF (GETHASH ...) X)
[08:17:30] <beach> loke[m]: And that looks very strange.
[08:17:43] <lisp123> beach: yes has as its metaclass
[08:17:45] <loke[m]> How about (SETF (GETF ...) X)
[08:17:56] <beach> Same.
[08:21:30] <beach> lisp123: My immediate reaction is that you may need to intervene in some MOP stuff like COMPUTE-EFFECTIVE-SLOT-DEFINITION.
[08:23:42] <beach> Your direct slot definition classes are different in A and B since A does not have a special metaclass, but B does.  So the metaclass of B has a different DIRECT-SLOT-DEFINITION-CLASS.
[08:25:28] <beach> So I presume COMPUTE-EFFECTIVE-SLOT-DEFINITION is defined by the bknr library so that it can handle the custom DIRECT-SLOT-DEFINITION-CLASS, and it may very well ask for the value of a slot in the direct slot-definition object that is not present in the direct slot from A.
[08:29:00] <lisp123> beach: thanks, i just tested and it doesn't work
[08:29:14] <lisp123> is there anyway around it without having to do MOP stuff as its beyond my scope?
[08:39:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:40:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:41:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:41:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:41:47] <lisp123> I'm just going to define two sets of classes (otherwise equivalent)
[08:41:57] <lisp123> and replicate the defmethods where appropriate
[08:42:25] <lisp123> Not elegant, but at least easily understandable and will only take me 30 minutes
[08:43:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:43:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:50:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[09:12:08] *** Joins: lisp123 (~user@80.227.170.170)
[09:26:27] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:27:03] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:37:13] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[09:37:19] *** Quits: etiago (~etiago@user/etiago) (Ping timeout: 244 seconds)
[09:41:33] *** jemoka_ is now known as jemoka
[09:41:42] *** Joins: etiago (~etiago@user/etiago)
[09:42:16] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-6-18.prtc.net)
[09:42:29] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-6-18.prtc.net) (Write error: Broken pipe)
[09:46:14] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[09:49:08] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[10:07:46] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[10:18:33] *** Joins: derelict (~derelict@user/derelict)
[10:21:21] *** Joins: wilfred (uid159@id-159.highgate.irccloud.com)
[10:23:29] <loke[m]> lisp123: Do you know what when you specify :READER (or :ACCESSOR or :WRITER) all that really does is to create a DEFMETHOD on that generic function?
[10:23:44] <loke[m]> There is really nothing magic about it.
[10:24:10] <loke[m]> The magic in accessors are actually in SLOT-VALUE (and the more specific SLOT-VALUE-USING-CLASS)
[10:26:14] *** Joins: spiaggia (~user@2a01:cb19:150:3400:9c6e:4181:d2ec:3a5e)
[10:32:15] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[10:32:32] *** Joins: livoreno (~livoreno@user/notzmv)
[10:35:09] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[10:35:34] *** Joins: lad (~lad@user/lad)
[10:38:58] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 250 seconds)
[10:43:40] *** Joins: shka (~herr@109.231.62.239)
[10:49:14] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:57:46] *** Joins: davep (uid504677@id-504677.tinside.irccloud.com)
[11:00:35] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:03:40] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 258 seconds)
[11:08:47] <coat> are lists passed by value into functions? when I push new elements to a list within a function, the caller of the function cannot see those changes.
[11:09:42] <spiaggia> Common Lisp uses call-by-value, but the values are semantically speaking references to objects in memory.
[11:10:10] <moon-child> all objects are references, but they are passed by value; 'push' reassigns a local value
[11:10:13] <spiaggia> coat: So you now need to understand how Common Lisp lists work.
[11:10:47] <spiaggia> coat: A list is either NIL (denoting the empty list) or a CONS cell.  Can I assume you knew that?
[11:11:15] <spiaggia> coat: I.e., a Common Lisp list is not an abstract data type, or not so much.  It's implementation is known.
[11:11:57] <spiaggia> So when you pass a list to a function, you pass a reference to the first CONS cell.  The caller and the callee share this reference.
[11:12:01] <coat> "push reassigns a local value" - did not know about this. But I see it is mentioned in CLHS in the notes. "The effect of (push item place) is equivalent to (setf place (cons item place))" I had overlooked this note earlier
[11:12:24] <coat> spiaggia: yes, I knew NIL and CONS cell
[11:12:36] <spiaggia> coat: PUSH changes a "place".  When the place is a variable, it changes the value of that variable.
[11:12:55] <spiaggia> So it changes the value of the lexical variable inside your function.
[11:13:05] <spiaggia> And that has no effect on the caller.
[11:13:59] <spiaggia> coat: Think of (pushd <object> <variable>) as roughly equivalent to (setf <variable> (cons <object> <variable>))
[11:14:24] <spiaggia> coat: Does that equivalence make it easier to understand what you observe?
[11:14:46] <moon-child> nit: 'has no effect on the caller' unless it closed over the caller's environment
[11:15:13] <coat> spiaggia: Yes, CLHS notes for push has this: " The effect of (push item place) is equivalent to
[11:15:16] <coat>  (setf place (cons item place))
[11:15:16] <coat> except that the subforms of place are evaluated only once, and item is evaluated before place. "
[11:15:16] <spiaggia> coat: This is the same reason why your NCONC didn't work when the first list is empty.
[11:16:14] <spiaggia> coat: NCONC is a function, so when you pass it NIL as the first argument, there is no last CONS cell to update, so it just returns the second argument and does not update anything.
[11:16:28] <coat> okay
[11:17:26] <coat> in an earlier discussion, push was discouraged because it mutates the list but it does not, does it? For example: (defparameter *a* (list 10 20 30)) (defparameter *b* *a*) (push 40 *a*) Here *b* is unaffected
[11:17:37] <spiaggia> So to use terms from general programming, the LIST type in Common Lisp is not an abstract data type, and PUSH is therefore not an operation on instances of an abstract data type.
[11:17:46] <shka> coat: push does not mutate cons cell, it mutates lexical binding
[11:17:55] <shka> well, binding
[11:18:02] <spiaggia> shka: Careful what you say.
[11:18:03] <shka> not always lexical
[11:18:28] <shka> spiaggia: even if i am saying the truth?
[11:18:38] <shka> push does not alter cons cells
[11:18:41] <spiaggia> coat: PUSH will not mutate the list if the place is a variable.  But if the place is (cdr (last ...)) then it will.
[11:19:00] <spiaggia> shka: It does if the place is (cdr ...).
[11:19:07] <coat> spiaggia: thanks
[11:19:18] <pjb> push mutates the place.
[11:19:33] <pjb> So if the place is (car …) it mutates the car.
[11:19:59] <pjb> if the place is var (and var is not a symbol-macro to something else), the it mutates the variable var.
[11:20:10] <spiaggia> shka: Now do you see why you had to be more careful?
[11:20:34] <coat> pjb: thanks
[11:20:36] <shka> yes dady
[11:20:41] <shka> *daddy
[11:21:57] *** Parts: spiaggia (~user@2a01:cb19:150:3400:9c6e:4181:d2ec:3a5e) (ERC Version 5.3 (IRC client for Emacs))
[11:30:52] *** Joins: derelict (~derelict@user/derelict)
[11:33:41] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[11:35:04] <coat> Please help with this: https://plaster.tymoon.eu/view/2515 - I am unable to understand the macro expansion.
[11:36:46] <coat> why does PUSH behave differently when called outside a macro and when called inside a macro?
[11:37:07] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[11:38:06] <White_Flame> you're pushing into a symbol, not into a variable place
[11:38:15] <White_Flame> remember, macros deal with source code, not runtime values
[11:38:34] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[11:38:43] <White_Flame> I don't know why it's not erroring out completely, which implementation are you using?
[11:39:24] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[11:39:34] <White_Flame> ah, I get the same on sbcl now
[11:39:41] <coat> White_Flame: SBCL. It is not erroring out I guess because I have not called the macro yet. The macro is of course incorrect. I am just trying to understand the expansion of my incorrect macro.
[11:40:18] <coat> What does it mean to push to a symbol? This is not valid code, is it? (push (cons "a" "apple") '*a*) ; This errors out
[11:40:31] <White_Flame> right, that's what I assumed the macro was doing
[11:40:48] <White_Flame> because you're calling PUSH on the literal source code passed in, instead of generating the runtime code to perform teh push
[11:41:35] <White_Flame> I bet it has to do with either compiler macros or general compiletime optimization of PUSH that shuffles things around in this way
[11:41:51] <White_Flame> at least, that's a random guess as I don't see how it doesn't error
[11:42:49] <coat> how does (push-key-value "a" "apple" *a*) end up expanding to (("a" . "apple") . *A* I want to understand in a step by step manner.
[11:43:08] <coat> correction: (("a" . "apple") . *A*)
[11:43:39] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 272 seconds)
[11:44:16] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[11:44:18] <White_Flame> https://plaster.tymoon.eu/view/2516#2516
[11:44:52] <White_Flame> that is basically what the macroexpansion compiles to
[11:45:14] <White_Flame> the lambda body's PUSH expands to (LET* ((#:ITEM (CONS "a" "apple")))  (SETQ Y (CONS #:ITEM Y)))
[11:45:57] <White_Flame> and when Y is passed in as the symbol *A*, it gets appended
[11:46:40] <White_Flame> in any case, do not compute anything at compiletime that requires macro parameter values
[11:46:51] <White_Flame> those values shoudl be pushed into runtime code that's generated
[11:46:58] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[11:48:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:51:12] *** Joins: pve (~pve@87-93-164-120.bb.dnainternet.fi)
[11:51:56] <White_Flame> you could consider the macro you wrote to basically be doing (let ((a '*a*)) (push <something> a))
[11:52:29] <coat> White_Flame: how did you figure what teh lambda body's PUSH expands to?
[11:52:30] <White_Flame> which of course just pushes onto the macro function's local variable A, which happens to be passed the symbol *A* in that invocation
[11:52:44] *** prxq_ is now known as prxq
[11:52:47] <White_Flame> C-c Enter, which is basically macroexpand-1
[11:54:34] <beach> coat: I created this page a while ago for newbies like you: http://metamodular.com/common-lisp-semantics.html
[11:54:59] <White_Flame> (I tend to assume non-newbie in #commonlisp, and newbie in #clschool I guess :-P)
[11:55:11] <White_Flame> backlog differs now that I read it
[11:55:18] <beach> Yeah.
[11:55:46] <coat> thanks White_Flame C-c Enter helped to understand it
[11:56:14] <White_Flame> but still, stepping back and considering that you're not actually doing any macro code generation, the body is just like a function and is PUSHing to its own variable A
[11:56:20] <White_Flame> even without the macroexpansion
[11:56:38] <White_Flame> in the (push (cons k v) a)
[11:56:48] <coat> White_Flame: yes, I understand that. My macro is wrong. But I wanted to understand its wrongness precisely before moving on
[11:57:19] <White_Flame> yep, and then PUSH's return value happens to be returned as the macroexpansion
[11:57:36] <White_Flame> which as (("a" ....)..) isnt' a valid code form
[11:58:13] *** Quits: cjb (~cjb@user/cjb) ()
[11:58:29] <coat> noticed a strange thing in my Emacs. Both C-c ENTER and C-c C-m does slime-expand-1. But when I type C-h w slime-expand-1 RET it says slime-expand-1 is on C-c RET. Why does it not know that it is also on C-c C-m?
[11:58:48] <White_Flame> pop quiz:  What's C-m?
[11:59:33] <coat> ohhhh! understood it now! C-m *is* RET :)
[11:59:37] <coat> thanks White_Flame
[11:59:42] <White_Flame> yep
[12:00:16] <White_Flame> (of course, on second thought I guess ascii control codes and such might not be as much common knowledge anymore)
[12:00:18] <coat> I picked up C-c C-m from this doc: https://common-lisp.net/project/slime/doc/html/Macro_002dexpansion.html - Never stopped for a second and thought about it to realize that C-m is equivalent to RET.
[12:00:49] <coat> now I wonder why that doc does not simply mention C-c RET which is simpler
[12:01:02] <White_Flame> C-c C-m might be a bit easier to type, to emacs hands
[12:01:15] <White_Flame> hold down ctrl for the whole sequence
[12:01:39] <White_Flame> I just happened to learn it as C-c RET, from whatever source I originally saw it
[12:02:15] <White_Flame> and it was probably chosen specifically as 'm' for 'macro', not ret
[12:07:55] <susam> coat: Another trivia: 'M' = 77 (dec) = 4d (hex) = 100 1101 (bin). The ctrl + char combination zeroes bits 6 and 7 (first two in this example) of char. We get 000 1101 (bin) = 0d (hex) = 13 (dec) = RET.
[12:08:40] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 250 seconds)
[12:09:17] <moon-child> I always thought of ctrl as masking the low 5 bits.  But it occurs to me that with an 8-bit meta it couldn't do that; it would have to, as you say, zero just bits 6 and 7
[12:09:30] <coat> susam: wow! never knew ctrl is meant for zeroing bits of character code. I always thought ^A = 0, ^B = 1, etc.
[12:09:54] <White_Flame> ^A=1, ^B=2... actually
[12:10:21] <White_Flame> ^@ is for 0
[12:10:35] <moon-child> coat: another fun thing: toggle bit 5, and you toggle the case of a number
[12:10:53] <moon-child> a xor (1 << 5)  is the same as  A
[12:11:03] <moon-child> err, bit 6
[12:11:05] <moon-child> 1 << 5
[12:11:14] <White_Flame> case of a number?
[12:11:15] <susam> coat: Well, yes. Different ways to look at the same thing. '@' = 0x40, 'A' = 0x41, etc. So zeroing bits 6 and 7 is equivalent to selecting the lowest 5 bits with a mask which is equivalent to ^@ = 0, ^A = 1, etc.
[12:11:34] <White_Flame> oh, I thought you were trying to map #\1 to #\! or something
[12:11:48] <moon-child> White_Flame: err, duh, yeah.  Case of a letter
[12:11:56] <White_Flame> in any case, an ascii table clearly shows all the alignments between case, ctrl codes, etc
[12:12:56] <coat> these control code facts make me happy. this channel is fun! :)
[12:13:47] <moon-child> (though it maintains accordance between [] and {} as well)
[12:14:27] *** Joins: treflip (~user@95.79.32.99)
[12:23:35] *** Quits: Guest7506 (~yp@113.116.20.116) ()
[12:23:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[12:28:03] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[12:28:03] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[12:32:19] *** Joins: livoreno (~livoreno@user/notzmv)
[12:36:19] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:38:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:45:53] <lisp123> loke[m]: thanks, yes I had a suspicion it was like that
[13:12:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:edf7:146a:8396:f657)
[13:16:12] *** Quits: wilfred (uid159@id-159.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[13:16:57] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[13:24:12] *** Parts: coat (~coat@user/coat) ()
[13:24:27] *** Joins: coat (~coat@user/coat)
[13:26:44] *** Joins: dsk (~dsk@user/dsk)
[13:32:54] <coat> is this a good macro code for what I am doing: https://plaster.tymoon.eu/view/2518 ?
[13:35:25] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[13:37:39] <beach> It's fine.
[13:37:51] <beach> ::clhs acons
[13:37:53] <Colleen> Clhs: function acons http://www.lispworks.com/documentation/HyperSpec/Body/f_acons.htm
[13:38:28] <beach> ... is an alternative that you can use with SETF then.
[13:39:06] <coat> beach: I tried with acons too but didn't see the advantage of using acons int his case
[13:39:16] <beach> I tend to agree.
[13:40:18] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[13:41:25] <coat> thanks! here is my paste where I tried both the push and acons - https://plaster.tymoon.eu/view/2519
[13:41:30] *** Joins: selwyn (~selwyn@user/selwyn)
[13:42:12] <beach> The first one is better.  In fact the second one contains a bug.
[13:43:15] <beach> The place for alist is evaluated twice.  If you are going to write macros, then you need to read something like On Lisp that mentions this and other potential problems.
[13:46:02] <beach> coat: Would you like an example that demonstrates this bug?
[13:47:36] <lisp123> Qn from me: How to apply OR to a list, e.g. (or (list nil nil t)) [I want to apply OR to a list of predicate results]
[13:48:33] <lisp123> I can figure out my own custom function / way, but want to know if there is an out-of-the-box solution
[13:49:03] <pve> lisp123: you might use "some"
[13:49:29] <moon-child> (some #'identity your-list), specifically
[13:51:36] <lisp123> thanks pve & moon-child, worked perfectly
[13:52:28] <pjb> lisp123: (reduce (lambda (a b) (or a b)) (list nil nil t)) #| --> t |#
[13:52:39] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[13:52:55] <pjb> lisp123: (defun
[13:53:39] <pjb> lisp123: (defun ∧ (a b) (and a b))  (defun ∨ (a b) (or a b))    (reduce '∨ list)
[13:54:17] *** Joins: igemnace (~ian@user/igemnace)
[13:54:23] <beach> coat: if you use the second definition, try this:  (defparameter *v* (vector (list '(0 . a)) (list '(1 . b)))) then (defparameter *index* -1) then (add-key-value2 2 'c (aref *v* (incf *index*)))
[13:54:33] <pjb> lisp123: also: or = (find nil list :test-not 'eql)  and = (not (find nil list))
[13:54:49] *** Joins: selwyn (~selwyn@user/selwyn)
[13:54:57] <beach> coat: Then inspect *v* and see what you think.
[13:59:42] <coat> beach: trying your example now
[14:00:20] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[14:02:03] <beach> coat: If you macroexpand (add-key-value2 2 'c (aref *v* (incf *index*))), you can see that (aref *v* (incf *index*)) appears twice.  And that means that (incf *index*) is going to be evaluated twice, which is wrong.  Page 133 of On Lisp explains why.
[14:05:01] <coat> beach: ah! understood it now. this is like C macros. if an expression in macro is evaluated twice due to macro expansion, it may have surprising side effects.
[14:05:13] <beach> Exactly.
[14:05:28] <beach> Except that Common Lisp has way to avoid this problem.
[14:05:41] <coat> beach: what is that way?
[14:05:59] <beach> On Lisp will give you a few techniques.
[14:06:21] <coat> okay, next book in my wishlist then. right now working through PCL
[14:06:31] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[14:06:48] <beach> Sure, just be careful with macros.  They aren't needed as often as some people think.
[14:07:56] <coat> thanks. so far if something can be done with defun, I am using defun. this is the only place where I used defmacro because I did not know how to do it with defun.
[14:08:09] <beach> Right.
[14:08:40] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[14:08:41] <phadthai> PCL chapter 8's "Plugging the Leaks" also covers it a little
[14:08:58] <beach> Oh, right.  Thanks.
[14:09:07] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[14:10:26] <phadthai> coat: particularly the example with gensym
[14:11:19] <phadthai> but I agree with beach that On Lisp covers macros much deeper
[14:13:00] *** Joins: lotuseater (~user@p200300e787025700b5e33b4e3d09511f.dip0.t-ipconnect.de)
[14:13:30] *** Joins: stanislav (~stanislav@a89-152-209-125.cpe.netcabo.pt)
[14:13:41] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:14:32] <coat> phadthai: thanks
[14:14:36] *** Parts: stanislav (~stanislav@a89-152-209-125.cpe.netcabo.pt) ()
[14:26:34] *** Parts: lisp123 (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[14:28:39] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:29:41] *** Joins: notzmv (~zmv@user/notzmv)
[14:30:25] *** Joins: selwyn (~selwyn@user/selwyn)
[14:39:11] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[14:40:24] *** Joins: selwyn (~selwyn@user/selwyn)
[14:55:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[14:58:06] *** Quits: frgo (~frgo@p200300deef27d7006868c0d1297ead44.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:58:34] *** Joins: frgo (~frgo@p200300deef27d7006868c0d1297ead44.dip0.t-ipconnect.de)
[15:05:41] *** Quits: X-Scale (~ARM@175.38.114.89.rev.vodafone.pt) (Ping timeout: 268 seconds)
[15:13:35] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[15:17:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[15:29:53] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[15:36:30] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:39:33] *** Joins: Danishman (~Allan@62-243-156-218-static.dk.customer.tdc.net)
[15:40:17] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[15:44:42] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 252 seconds)
[15:46:35] *** Quits: amk (~amk@176.61.106.150) (Remote host closed the connection)
[15:47:27] *** Joins: random-nick (~random-ni@87.116.183.60)
[15:59:31] *** Quits: frgo (~frgo@p200300deef27d7006868c0d1297ead44.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:08:00] <flip214> apart from *GENSYM-COUNTER*, is there a difference between MAKE-SYMBOl and GENSYM?
[16:09:19] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:16:14] <Nilby> flip214: I think gensym is frequently implemented with something equivalent to (make-symbol (concatenate 'string (or prefix "G") (incf *counter*))), so not much difference.
[16:18:16] <flip214> Nilby: ack, thanks
[16:19:05] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:21:44] *** Joins: selwyn (~selwyn@user/selwyn)
[16:37:17] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[16:39:26] *** Joins: selwyn_ (~selwyn@user/selwyn)
[16:40:28] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[16:42:14] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[16:53:39] *** Joins: Bike (~Glossina@71.69.170.70)
[16:53:39] *** ChanServ sets mode: +o Bike
[16:53:42] *** Joins: IPmonger (~ipmonger@2601:41:c401:4f10:a436:40e1:7457:ab75)
[16:56:24] *** Joins: Tomte (~th@p200300db9f18940000d51ab5b8343f4c.dip0.t-ipconnect.de)
[16:57:01] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[16:57:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[17:44:04] *** Joins: cage (~cage@dynamic-adsl-78-15-32-45.clienti.tiscali.it)
[17:46:29] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[17:58:24] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[17:59:29] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[18:01:54] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[18:03:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[18:03:31] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:06:48] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Ping timeout: 272 seconds)
[18:07:34] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:08:04] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 272 seconds)
[18:08:06] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 265 seconds)
[18:09:12] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Remote host closed the connection)
[18:09:15] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[18:11:59] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[18:14:24] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 272 seconds)
[18:15:27] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[18:16:10] <contrapunctus> How much work might it be to implement something like this as a Common Lisp extension? https://ytakano.github.io/blisp/
[18:16:45] <phoe> contrapunctus: zero
[18:16:46] <phoe> https://github.com/stylewarning/coalton
[18:16:53] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[18:18:21] <contrapunctus> phoe: hey, saw your Immutable Conversations talk today ^^
[18:18:27] <phoe> gasp
[18:19:45] *** Joins: derelict (~derelict@user/derelict)
[18:30:53] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[18:31:43] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[18:33:11] *** Joins: selwyn (~selwyn@user/selwyn)
[18:33:13] *** Joins: selwyn_ (~selwyn@user/selwyn)
[18:33:48] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[18:35:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:37:23] *** Joins: IAmRasputin (~ryan.gann@209.6.125.193)
[18:44:44] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 250 seconds)
[18:45:28] *** Joins: amk (~amk@176.61.106.150)
[18:48:02] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 252 seconds)
[18:49:22] *** Joins: makomo (~makomo@user/makomo)
[18:51:09] *** Quits: IPmonger (~ipmonger@2601:41:c401:4f10:a436:40e1:7457:ab75) (Quit: Textual IRC Client: www.textualapp.com)
[19:03:31] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[19:12:00] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[19:19:38] *** Joins: sander (~sander@user/sander)
[19:21:32] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 272 seconds)
[19:24:03] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 244 seconds)
[19:24:27] *** Joins: Mandus (~aasmundo@85.112.154.250)
[19:27:00] <shka> contrapunctus: link to the talk or that didn't happen
[19:28:26] *** Joins: Josh_2 (~user@37.25.47.130)
[19:28:42] <Josh_2> Hello
[19:29:52] <Josh_2> Does bknr datastore handle redefinitions of classes in different images, say I have one main image that is used for my current version of my program, but then I have my testing version which adds a new slot to a persistent class, if I just dropped my new image in place of the old will bknr have a fit?
[19:34:17] <Josh_2> if not well bugger
[19:36:03] <Bike> so you want like a migration in rails? i'd like to see a lisp version of that if it exists...
[19:37:15] <Josh_2> uh
[19:38:41] <Bike> don't see anything about it from flipping through the bknr manual, though
[19:38:58] <Josh_2> maybe all I have to do is call the database connection function before the class definitions happen when creating my image
[19:39:26] <beach> Josh_2: I invented Clobber because I suspected that existing "object stores" could not handle redefinitions.
[19:40:16] <beach> I just store "transactions" that are based on initargs and accessors.  It doesn't have a clue about representation.
[19:41:05] <Bike> in rails, when you change your database ontology you (or it, automatically) defines a "migration", which describes how to change a database with the old ontology into one in the new and vice versa
[19:41:07] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Read error: Connection reset by peer)
[19:41:13] <Bike> kind of like update-object-for-redefined-class, i think
[19:41:47] <Josh_2> bknr doesn't mind updating the slots in a class
[19:41:56] <Josh_2> I have redefined my classes many times
[19:42:16] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[19:42:35] <Josh_2> but in those instances I have already called the initiation function and then I compile my new definition
[19:42:41] <jackdaniel> I suppose that classes must have stamps in that case (to recognize different generations)
[19:46:42] <Josh_2> maybe I can just have my project running on my laptop and I can always be connected with emacs xD
[19:47:00] <Josh_2> if it breaks it breaks
[19:52:25] *** Joins: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi)
[19:54:50] <Josh_2> it would be more ideal to be connected to my project when its running on a vps though, but for some reason sly doesn't want to connect, despite port forwarding
[19:55:12] <Josh_2> maybe I should try again
[19:59:04] <contrapunctus> shka: https://www.youtube.com/watch?v=pkqQq2Hwt5o
[19:59:32] <shka> cool
[19:59:35] <shka> contrapunctus: thanks!
[20:01:25] <Josh_2> rip its working now
[20:01:47] <Josh_2> Watched that interview a few days ago
[20:01:53] <Josh_2> phoe: on form :P
[20:06:36] <Josh_2> actually maybe it didn't work
[20:06:46] <shka> contrapunctus: e
[20:07:16] <shka> contrapunctus: i enjoy that communist vintage room :D
[20:08:51] <contrapunctus> shka: communist vintage room? O.o
[20:09:16] <shka> sure, early 80s late 70s democratic republic :P
[20:09:31] <shka> anyway, see ya
[20:10:03] *** Quits: Tomte (~th@p200300db9f18940000d51ab5b8343f4c.dip0.t-ipconnect.de) (Quit: Leaving)
[20:12:31] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[20:14:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 244 seconds)
[20:19:42] *** Quits: Mandus (~aasmundo@85.112.154.250) (Ping timeout: 252 seconds)
[20:19:57] <Josh_2> :( slynk throwing errors when trying to connect to a remote machine :(
[20:21:46] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[20:22:04] <phoe> Josh_2: on form?
[20:22:33] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[20:24:19] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[20:25:10] <Josh_2> yes on form
[20:25:11] <contrapunctus> phoe: wasn't stylewarning looking for help with coalton? I figured from that, that implementing something like that in CL might be a non-trivial undertaking 🤔️
[20:25:29] <Josh_2> its a compliment dw
[20:31:28] <Josh_2> I have sbcl 2.1.2 on my machine, and 2.1.3 on my remote machine, is this going to break slynk?
[20:36:00] <phoe> Josh_2: thanks, I'm not used to that English term
[20:36:22] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 258 seconds)
[20:49:43] <Shinmera> One of those rare occasions where I'm happy with an end result https://twitter.com/Shinmera/status/1409545913060794373
[20:50:35] *** Joins: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[20:50:41] <Josh_2> I have removed version 2.1.2 does this mean I can get rid of the .cache/sbcl-2.1.2 ?
[20:50:44] <phoe> Shinmera: upload on Streamable please? Twitter video compression destroys the text in an amazing way
[20:50:54] <phoe> Josh_2: you can always get rid of .cache stuff
[20:51:10] <Josh_2> Thanks phoe
[20:51:12] <phoe> for implementation versions that you no longer have, you even should do that
[20:51:26] <Josh_2> Seconded, can't see whats happening because of compression Shinmera
[20:51:36] <phoe> and for implementation versions that you still have, you can - all compilation artifacts will then be recreated when they are needed
[20:52:18] <Shinmera> phoe: https://streamable.com/4miiys
[20:53:49] <phoe> Shinmera: much better quality; if you have a while, could you record a version with e.g. 1.0s instead of 0.2s? I don't think the 0.2s effect is very easy to notice in the video
[20:54:52] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[20:55:29] <Shinmera> Sorry, I'm done touching code for today.
[20:56:30] <Josh_2> Do I have to have the same username on my remote system as on my home system to connect to it with sly?
[20:56:42] <phoe> Shinmera: that works
[20:56:48] <phoe> Josh_2: no?
[20:56:56] <phoe> just a SSH tunnel should work well
[20:57:05] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:57:20] <Josh_2> thats what I thought https://plaster.tymoon.eu/view/2521#2521
[20:57:41] <phoe> hit restart 0?
[20:57:53] <phoe> oh wait, I see
[20:58:00] <phoe> /home/manage/ versus /home/josh/
[20:58:08] <phoe> huh
[20:58:30] <Josh_2> I have upgraded both local and remote to 2.1.5, I have grabbed the latest version of sly on both systems, I have purged all leftover binaries to make sure that only 2.1.5 binaries exist on both systems, I have removed all the .cache entries related to non current versions of sbcl..
[20:58:36] <Josh_2> and yet I keep getting this problem
[20:58:53] <jackdaniel> Josh_2: slime has i.e ~/.slime/fasl/ directory
[20:59:06] <jackdaniel> perhaps slynk inherited that behavior
[20:59:09] *** jackdaniel sets mode: -o jackdaniel
[20:59:30] <Josh_2> can I purge that?
[20:59:45] <White_Flame> I believe it's assumed that slime and swank see the same filesystem, when it comes to loading & fasls.  Filenames are passed around
[20:59:46] <jackdaniel> if you don't care about the environment then sure
[21:00:31] <jackdaniel> s/*/sure/
[21:01:06] <Shinmera> White_Flame: there is some translation thingy, but I never looked deep enough into it to make it work.
[21:02:05] <jackdaniel> Shinmera: looks great
[21:02:12] <Shinmera> Thanks!
[21:03:47] <Nilby> Shinmera: That looks so good, maybe I should forget my UI and work on yours.
[21:04:03] <Shinmera> I'd definitely appreciate more hands on deck :)
[21:09:17] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:11:19] <Josh_2> jackdaniel: what do you mean?
[21:12:10] <jackdaniel> that was a bad joke (bad because not very intelligible), so I've corrected myself
[21:12:26] <Josh_2> oh right
[21:12:27] <jackdaniel> you may safely remove fasl files if you are restarting the image
[21:12:42] <jackdaniel> that will lead to their recompilation
[21:15:00] <jackdaniel> White_Flame: afaik it is possible to set slime translations to your local sources when you work remotely
[21:15:10] <jackdaniel> I think that it is described in the manual
[21:17:14] <Josh_2> yes I used the use-value restart to enter the same path but with manage instead of josh and it made it a lot further this time
[21:17:29] <Josh_2> if I just change my remote machines user to josh it'll probably work
[21:18:07] *** Joins: killsushi (~killsushi@user/killsushi)
[21:19:41] <Josh_2> I like that Steel Bank CL is still referred to as South Bank CL in the Sly manual
[21:21:39] *** Joins: pjb (~pjb@user/pjb)
[21:39:13] <pjb> flip214: note: if you don't mind the symbol name, (loop repeat 3 collect  (make-symbol "")) #| --> (#:|| #:|| #:||) |#
[21:40:01] <pjb> flip214: gensym only helps the human distinguish them: (loop repeat 3 collect  (gensym)) #| --> (#:g1678 #:g1679 #:g1680) |#
[21:40:37] <pjb> flip214: but indeed, when not debugging, we could just use (make-symbol "") it would be less (memory) costly.
[21:41:13] <Josh_2> Rip. Tried a new user, not getting the missing files anymore but now it just wont compile
[21:41:23] <Josh_2> maybe I should just try swank
[21:56:29] <Josh_2> I finally got it to work!~
[22:09:13] <shka> mmmm, i like the declarative style of the alloy already
[22:10:02] <shka> Shinmera: does alloy work on linux and windows?
[22:10:16] <Shinmera> who do you think I am :v
[22:10:35] <phoe> GHOST-BUSTERS
[22:10:41] * phoe ducks
[22:10:47] <shka> could be a strict OSX user to be fair :P
[22:10:58] <Shinmera> I hate macOS with every fibre of my being
[22:11:00] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:11:12] <Shinmera> but it also works on there.
[22:12:00] <shka> good, good
[22:12:28] <Shinmera> or I should say, it works on macOS for now. Who knows, apple might just decide to fuck me up again tomorrow.
[22:13:21] <shka> i personally enjoy the clim models/presentations stuff, but i am not huge fan of how the actual code for GUI looks like
[22:13:55] <shka> i should give alloy a chance
[22:15:06] *** Joins: frgo (~frgo@p200300deef27d7002dcbe3957f1c4ef4.dip0.t-ipconnect.de)
[22:15:13] *** Quits: frgo (~frgo@p200300deef27d7002dcbe3957f1c4ef4.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:15:34] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:15:34] *** Joins: frgo (~frgo@p200300deef27d7002dcbe3957f1c4ef4.dip0.t-ipconnect.de)
[22:15:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Read error: Connection reset by peer)
[22:15:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca)
[22:16:35] *** Quits: frgo (~frgo@p200300deef27d7002dcbe3957f1c4ef4.dip0.t-ipconnect.de) (Client Quit)
[22:17:11] *** Joins: green__ (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca)
[22:18:06] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:20:08] *** Quits: atgreen (~green@bras-base-toroon0628w-grc-44-142-112-151-129.dsl.bell.ca) (Ping timeout: 272 seconds)
[22:21:24] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[22:23:03] <Josh_2> Is a sigint the same signal sent to sbcl if I was to use something like systemd to stop my lisp service?
[22:24:11] <Josh_2> I would like to gracefully shutdown my lisp images
[22:24:49] <Bike> https://stackoverflow.com/questions/42978358/how-systemd-stop-command-actually-works
[22:25:07] <Josh_2> 90 seconds is a nice amount of time
[22:25:21] <shka> ... that's what she said
[22:25:24] <Bike> SIGINT is for an asynchronous interrupt. SIGTERM means "terminate"
[22:25:33] <Bike> ctrl-c is generally a sigint
[22:25:37] <Josh_2> Alright thanks :)
[22:25:44] <jasom> 90 seconds is nice unless you are trying to reboot your machine and you have 2 or 3 services in a row take that long
[22:26:00] <Bike> sigkill you don't need to worry about since it means your process will die whether you want it to or not
[22:26:12] <Josh_2> yeh
[22:27:01] *** Quits: killsushi (~killsushi@user/killsushi) (Read error: Connection reset by peer)
[22:27:04] <Josh_2> sbcl has sb-sys:interactive-interrupt for c-c's
[22:28:07] *** Joins: killsushi (~killsushi@cpef0f249442b03-cmf0f249442b00.cpe.net.cable.rogers.com)
[22:28:07] *** Quits: killsushi (~killsushi@cpef0f249442b03-cmf0f249442b00.cpe.net.cable.rogers.com) (Changing host)
[22:28:07] *** Joins: killsushi (~killsushi@user/killsushi)
[22:30:14] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:30:32] *** Joins: amb007 (~a_bakic@5.198.204.77.rev.sfr.net)
[22:31:12] *** Joins: aeth_ (~aeth@user/aeth)
[22:31:32] *** Quits: char (~Srain@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[22:31:36] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 268 seconds)
[22:31:49] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[22:31:51] *** aeth_ is now known as aeth
[22:34:34] <jasom> I notice that trivial-signal does not claim to support SIGTERM on sbcl, listing only these: 4-8, 10-11, 16, 18, 21-22, 30-31, 34-64 (SIGTERM is 15).
[22:35:50] <jcowan> That's weird.
[22:35:53] <phoe> jasom: I wonder why, SBCL seems to handle it normally
[22:35:54] <phoe> https://github.com/sbcl/sbcl/blob/master/src/code/target-signal.lisp#L170
[22:36:56] <jasom> phoe: trivial-signal uses CFFI so probably can't use any signals that the implementation installs handlers for
[22:37:00] <phoe> oooh
[22:37:04] <phoe> yes, that would explain stuff
[22:37:17] <Josh_2> So how do I catch a sigterm with SBCL?
[22:37:52] <phoe> Josh_2: there is a discussion at https://irclog.tymoon.eu/freenode/lisp?to=1541768909
[22:38:14] <phoe> maybe it can help you
[22:38:15] <jasom> Josh_2: Assuming you need to run arbitrary lisp code, I think the best way might be to copy what the sigint-handler does
[22:39:16] <jasom> oh, derp it calls exit so you can just use sb-ext:*exit-hooks*
[22:39:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:39:36] <Josh_2> ah seems that I can just use sb-ext:*exit-hooks*
[22:40:14] <jasom> as long as you don't need to know you were called from the sigterm-handler that will be fine
[22:43:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[22:45:03] *** Joins: raeda (~raeda@24.18.16.139)
[22:45:28] *** Quits: amb007 (~a_bakic@5.198.204.77.rev.sfr.net) (Ping timeout: 272 seconds)
[22:46:23] *** Joins: amb007 (~a_bakic@50.147.204.77.rev.sfr.net)
[22:54:20] *** Quits: peterhil (~peterhil@dsl-hkibng32-54f849-252.dhcp.inet.fi) (Ping timeout: 272 seconds)
[22:56:39] *** Joins: derelict (~derelict@user/derelict)
[22:57:28] *** Quits: davep (uid504677@id-504677.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[22:57:29] *** Quits: amb007 (~a_bakic@50.147.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[22:57:37] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:58:38] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:59:12] *** Joins: AnimalClatter (~AnimalCla@208.66.176.26)
[23:02:23] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 268 seconds)
[23:03:16] <Josh_2> okay now that works I just need a nice way to automatically swap my images
[23:04:20] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:06:08] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:07:28] *** Joins: selwyn (~selwyn@user/selwyn)
[23:08:31] <Josh_2> I assume sb-ext:exit is called when it receives a sigterm from systemd?
[23:09:04] <jasom> Josh_2: looks like it https://github.com/sbcl/sbcl/blob/master/src/code/target-signal.lisp#L170
[23:09:06] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[23:09:20] <Josh_2> Okay sweet
[23:10:02] <Josh_2> Well I guess theres no way to know if it works without trying it
[23:10:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:12:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:19:59] *** Joins: [deleted] (~livoreno@user/notzmv)
[23:22:12] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 272 seconds)
[23:22:12] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 272 seconds)
[23:23:17] *** Joins: frgo (~frgo@p200300deef27d70018172fa328e0b9c5.dip0.t-ipconnect.de)
[23:25:07] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:28:36] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:30:47] *** Quits: IAmRasputin (~ryan.gann@209.6.125.193) (Quit: WeeChat 3.2)
[23:36:06] *** Joins: char (~Srain@cpe-76-186-124-165.tx.res.rr.com)
[23:36:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-10-70-54-112-49.dsl.bell.ca) (Remote host closed the connection)
[23:39:42] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[23:41:07] *** Joins: aeth (~aeth@user/aeth)
[23:46:41] <Josh_2> anyone know why this might be happening when I tried to ql ironclad? https://plaster.tymoon.eu/view/2524#2524
[23:48:39] <phoe> Josh_2: (ql:update-all-dists)
[23:48:47] <phoe> you are running old ironclad
[23:48:53] <phoe> and you need to update it for sbcl 2.1.5
[23:52:15] *** Joins: slant (~ssnatt@2806:103e:2:e58:a272:61a6:ddd8:f63)
[23:54:25] <Josh_2> Okay that worked thanks
[23:56:05] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:59:26] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
