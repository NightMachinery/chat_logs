[00:01:31] <gilberth> But then in a hardware store you often could watch people having difficulties figuring out how much paint they need to paint their walls from the "good for $x$ square meters" written on the paint buckets.
[00:02:36] <gilberth> Also: This hillarious measurements like "liters per square meter" rain fall. Volume divided by area is length, dammit.
[00:03:41] <gilberth> Or: "This power station generates 1MW per year." Hugh?!
[00:08:33] <selwyn_> gilberth: https://www.youtube.com/watch?v=3f6YPyc_OuI
[00:11:21] *** Joins: lad (~lad@user/lad)
[00:14:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:22:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:34:46] <Alfr> gilberth, your treadmill doesn't qualify as a power station.
[00:35:33] <Alfr> And why "per year"?
[00:59:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:06:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:09:12] <selwyn_> litres per square meter is not that bad
[01:09:35] <selwyn_> imo
[01:16:34] <shka> yeah, it makes sense to me
[01:16:52] <shka> i mean, other then dividing volume by area
[01:17:10] <shka> but you can use milliliters instead
[01:17:21] <shka> which is IIRC the same numeric value
[01:17:47] <shka> yeah the same
[01:19:27] <selwyn_> in some fluid dynamics situations, you can split dimensions into ´vertical distance´ and ´horizontal distance´ and obtain fairly impressive results simply from dimensional analysis
[01:19:53] <selwyn_> in general you can be cavalier about what you count as a dimension, there is no real need to do things the ´si way´
[01:45:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:53:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 258 seconds)
[01:53:18] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:58:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:04:00] <MichaelRaskin> gilberth: I guess one could imagine a plant that gains an extra 1MW of power every year… although I would find such behaviour concerning
[02:09:20] * lotuseater is awake again
[02:14:20] <pjb> it falls  3 liter/m²  or it falls  3 mm   which one is more frightening?
[02:16:33] <pjb> Elon doesn't like pascal.  But 1 N/m²  is a nice unit too…
[02:18:20] <lotuseater> sounds much under pressure
[02:26:17] *** Quits: lad (~lad@user/lad) (Ping timeout: 248 seconds)
[02:29:35] <hayley> https://www.youtube.com/watch?v=Nw1643T0RD0
[02:30:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:38:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:42:24] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 276 seconds)
[02:43:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[02:51:28] <gilberth> selwyn: I could image what say 10mm rain fall is. But I have no idea how much water I get when I pour 10 litres on one square meter.
[02:51:32] <lotuseater> hi hayley 
[02:51:41] <hayley> hi lotuseater 
[02:53:43] <gilberth> Alfr: Don't ask me, I am not a journalist and hence have no idea what watts per time is.
[02:54:38] <Alfr> gilberth, 1 litre = (10 cm)^3 = 10^-3 m^3; so 10 * 10^-3 m = 1 cm if you spread that over 1 m^2.
[02:55:00] <contrapunctus> hayley: LOL just saw that, well-trolled ^^'
[02:55:26] <hayley>  https://www.youtube.com/watch?v=48PJGVf4xqk "Doom But Something's Not Right - Episode 1: Knee-Deep in the Dead"
[02:55:31] <gilberth> Alfr: Sure. Point is: I need to do the math. While I have an immediate mental picture of the ground covered by 1cm of water.
[02:55:37] <hayley> https://www.youtube.com/watch?v=_OHeOxLS_Ps rather.
[02:55:54] <Alfr> gilberth, journalists ... don't get me started.
[02:56:10] <gilberth> But it's easy, since l/m^2 = mm, which I once calculated.
[03:10:12] <hayley> https://monads.online/@hazel/106729058875103743 just banned someone* from a lisp matrix channel with the ban message "What is a monad? A miserable pile of lusers." ama
[03:10:14] -ixelp- i'm am stupid 👉: "just got banned from a lisp matrix channel with t…" - monads.online
[03:10:21] <hayley> *banning occured yesterday
[03:13:47] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:15:16] <pjb> 1 litre = 0.1³ m³ = 0.001 m³
[03:16:32] <lotuseater> hayley: I remember one interview with John Romero, where he says "yeah so we made the first level last, that's good, you have the experience from previous creations"
[03:18:52] <contrapunctus> hayley: why such dislike for statically typed languages though? 🙃
[03:19:33] <hayley> contrapunctus: I was referring to the server, which is a tankie (which I define as capital-c Communist) hellhole.
[03:20:11] <hayley> contrapunctus: But if you must know, because any proofs using the type system require the type system to be sound, and people seem to be bad at that by https://counterexamples.org/
[03:20:11] -ixelp- Counterexamples in Type Systems - Counterexamples in Type Systems
[03:21:38] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:23:55] * contrapunctus looks up 'tankie'
[03:24:09] <lotuseater> hayley: https://www.youtube.com/watch?v=O485TqiyfqU
[03:24:09] -ixelp- Castlevania: Simon's Destiny - A Superb DOOM Total Conversion Mod Where You Storm Dracula's Castle! - YouTube
[03:26:10] <hayley> contrapunctus: Historically, IIRC someone who supported the Soviet invasions of Hungary and Czechoslovakia. Nowadays, any ol' authoritarian so-called "communist".
[03:27:43] <contrapunctus> hayley: cool
[03:58:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:59:54] <hayley> https://www.youtube.com/watch?v=sM7odiEO1k8
[03:59:54] -ixelp- We Take Mystery (To Bed) - YouTube
[04:03:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:04:22] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:04:40] <dave0> maw
[04:21:04] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[04:22:40] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[04:32:41] *** Quits: random-nick (~random-ni@87.116.182.190) (Ping timeout: 248 seconds)
[04:35:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[04:36:30] *** Joins: makomo (~makomo@user/makomo)
[04:38:06] <dave0> hayley: https://youtu.be/cntvEDbagAw
[04:38:06] -ixelp- The Specials - A Message To You Rudy (Official Music Video) - YouTube
[04:38:49] * hayley got to conclude a "review" of a paper with "logic and proportion have fallen sloppy dead."
[04:38:55] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[04:53:49] *** Joins: derelict (~derelict@user/derelict)
[05:01:02] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[05:19:40] <hayley> dave0: https://www.youtube.com/watch?v=zJW86h_CePw
[05:19:41] -ixelp- Back In Judy's Jungle (2004 Digital Remaster) - YouTube
[05:26:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[07:06:54] *** Quits: remexre (~nathan@user/remexre) (Ping timeout: 250 seconds)
[07:32:25] *** Joins: remexre (~nathan@user/remexre)
[07:41:06] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:41:27] <hayley> https://github.com/ocaml/ocaml/pull/10195#issuecomment-896150306 The OCaml major GC now kicks butt with prefetching.
[07:41:35] <dave0> re maw
[07:42:05] <hayley> Hey dave0
[07:42:17] <dave0> hi hayley 
[07:49:48] <hayley> https://www.youtube.com/watch?v=M2irYat2wf4
[07:49:49] -ixelp- Julia's Song (2003 Digital Remaster) - YouTube
[08:13:40] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:14:07] <kakuhen> Qwnavery: hi; I don't think it's cursed at all
[08:14:17] <kakuhen> if anything, it seems like a fun python project
[08:14:47] <Qwnavery> I just say that because python is notoriously slow
[08:15:02] <kakuhen> it could've been worse, like using JRuby :P
[08:15:10] <Qwnavery> lol
[08:15:32] <kakuhen> also what's the deal with this "python with lisp syntax"
[08:15:32] <hayley> CRuby is faster than CPython, so what's JRuby doing wrong?
[08:15:39] <kakuhen> do you mean like python but with s-expressions?
[08:15:56] <Qwnavery> kakuhen: yeah, It mighy be hy or soemething like that
[08:16:22] <Qwnavery> https://docs.hylang.org/en/alpha/
[08:16:23] -ixelp- The Hy Manual — hy 1.0a3 documentation
[08:16:55] <Qwnavery> I'm more interested in the implmentation of lispmachines though.
[08:17:03] <lotuseater> hayley: do you also know this Golang song? :D
[08:17:31] <kakuhen> Qwnavery: there's a very vocal lisp machine dude on the internet, and you'll eventually run into him if you search enough about LispMs
[08:17:43] <kakuhen> Rainer Joswig (i think that's how it's spelled iirc)
[08:17:44] <hayley> lotuseater: https://www.youtube.com/watch?v=nOjFQEOeiog
[08:17:45] -ixelp- Go Buddy Go (1996 Remaster) - YouTube
[08:17:55] <lotuseater> ah no not that xD
[08:18:04] <Qwnavery> kakuhen: I'm trying to leave all my research for next year so I can focus on my senior year study.
[08:18:14] <lotuseater> https://www.youtube.com/watch?v=LJvEIjRBSDA
[08:18:15] -ixelp- Write in Go (Fall 2014) - YouTube
[08:18:23] <Qwnavery> But I want to make one eventually.
[08:19:00] <hayley> Qwnavery: I'd recommend a peep through "The Design and Implementation of the SELF Compiler", which IMO shows that lispms are pretty unnecessary.
[08:19:27] <kakuhen> Qwnavery: https://opencores.org/projects/igor
[08:19:27] -ixelp- Overview :: IGOR - A microprogrammed LISP machine :: OpenCores
[08:19:43] <kakuhen> you may find this interesting
[08:20:37] <hayley> Dave Moon eventually became a RISC nutter. Also c.f. https://youtu.be/5uljtqyBLxI?t=1224
[08:20:38] -ixelp- Java on a 1000 Cores - Tales of Hardware / Software CoDesign - YouTube
[08:23:09] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[08:26:00] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:26:17] <Qwnavery> sorry kakuhen
[08:26:25] <Qwnavery> back
[08:28:20] <Qwnavery> kakuhen: that's how it's spelled, it comes up.
[08:35:16] <lotuseater> hayley: now that I hear the write in go song again it's even more hearing like propaganda
[08:35:47] *** Quits: robin (~robin@user/terpri) (Ping timeout: 258 seconds)
[08:36:38] <hayley> https://www.youtube.com/watch?v=fiYgNf9cHnw
[08:36:39] -ixelp- ABC Auto-Industry - YouTube
[08:38:17] *** Joins: robin (~robin@user/terpri)
[08:40:51] *** Joins: lad (~lad@user/lad)
[08:41:47] <kakuhen> rewrite everythign in common lisp
[08:42:38] <hayley> https://www.youtube.com/watch?v=XNL6-R0ieQE
[08:42:39] -ixelp- The Equaliser (Remastered) - YouTube
[08:48:08] <Qwnavery> *rewrites the linux kernel in common lisp*
[08:48:28] * hayley uploaded an image: (188KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/aEoKSKPquADHSSVBwgrEjjZV/process-isolation.jpg >
[08:48:34] * Qwnavery writes a C compiler in common lisp
[08:48:54] * Qwnavery rewrites xorg in common lisp
[08:49:29] * Qwnavery rewrites the universe in common lisp
[09:02:26] <lotuseater> the universe is already written in it :) maybe another dialect. look up Greenspun's 10th rule
[09:02:50] <lotuseater> and Symbolics Inc had their own compilers for C, Ada, FORTRAN
[09:14:22] <Qwnavery> lotuseater: lol
[09:14:58] <lotuseater> :P
[09:16:02] <dave0> rust is rewriting the world: https://www.redox-os.org/
[09:16:03] -ixelp- Redox - Your Next(Gen) OS - Redox - Your Next(Gen) OS
[09:16:34] <Qwnavery> It's interesting how there is a new OS market.
[09:16:35] <lotuseater> ah this, didn't track some time how its state is
[09:17:01] <lotuseater> and now Rust stuff comes to Linux kernel (or should)
[09:17:13] <hayley> dave0: imagine having a memory safe language but still using process isolation
[09:17:53] <hayley> Even when they have a unikernel, they still invent a need to have some memory protection apparently.
[09:18:04] <hayley> dave0: https://i.redd.it/26nxxjksy6b61.png
[09:18:43] <dave0> is that a pink pony?
[09:18:48] <hayley> Yes.
[09:18:58] <Qwnavery> What's nice is all the people experimenting leaves room for analysis and synthesis to devise an OS that blows everything else out of the water.
[09:19:09] <lotuseater> "modern old ugly language" :D
[09:19:32] <hayley> Qwnavery: An operating system is a collection of things that don't fit in a language. There shouldn't be one.
[09:19:58] <Qwnavery> hayley: aka "lisp machines are superior and kernel is a dumb idea"
[09:20:17] <Qwnavery> I get it, but I consider an OS the tools security provisioning.
[09:21:15] <hayley> aka "language-based security is superior because you can sandbox however in a sane manner"
[09:21:16] <Qwnavery> As soon as a device connects to a network it's at risk.
[09:21:39] <lotuseater> everything is a risk
[09:21:45] <hayley> I heard, even with source code, pentests on Lisp machines found nothing.
[09:21:55] <Qwnavery> hayley really?
[09:22:06] <Qwnavery> So a language-based network stack verks?
[09:22:07] <hayley> Yes.
[09:22:17] <hayley> Yes.
[09:22:49] <Qwnavery> Lmao
[09:23:07] <Qwnavery> if only.
[09:23:30] <Qwnavery> I knew lisp-machines were amazing but wow.
[09:23:31] <hayley> The only unsafe part necessary is handling the ring buffer for the NIC, but that is relatively small.
[09:23:51] <Qwnavery> I want to make a lisp-machine even more.
[09:24:03] <hayley> There was some document in the new AI memos which mention what Lisp machines did right, and that was one. But IMO the hardware part is unnecessary.
[09:24:33] <Qwnavery> what do you mean?
[09:24:53] <Qwnavery> you referring to TUNES?
[09:25:17] <Qwnavery> building a lisp OS on x64?
[09:25:20] <hayley> No, rather from MIT, written some time in the 2000's.
[09:25:41] <Qwnavery> I meant the hardware part.
[09:25:46] <hayley> http://metamodular.com/closos.pdf has enough of a design to evangelise.
[09:27:24] * hayley types dspace.mit in the address bar and the only suggestions are SCHEME-79, Chaosnet and Lambda the Ultimate Control Structure.
[09:29:29] <hayley> Yeah, nothing. But https://dspace.mit.edu/handle/1721.1/122734 implements a POSIX kernel in Go and finds the longest pause to nginx due to GC was only 600 microseconds, which is definitely within the noise floor.
[09:29:31] -ixelp- The benefits and costs of writing a POSIX Kernel in a high-level language
[09:30:43] <kakuhen> i just want to see a free CL impl with a concurrent gc, but I know it's not going to happen any time soon, if at all, since it'd be expensive and tedious to do
[09:30:54] <kakuhen> maybe one day I'll save up money to have a copy of Allegro CL
[09:31:22] <Qwnavery> hayley: just been looking at Chaosnet
[09:31:24] <Qwnavery> super cool
[09:31:42] <Qwnavery> aight gotta go 3% batt
[09:31:47] <Qwnavery> will be back soon
[09:31:50] <Qwnavery> \o
[09:31:51] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:31:51] <kakuhen> see you
[09:33:05] <lotuseater> i should eat something
[09:34:15] <lotuseater> kakuhen: do LispWorks or Allegro have concurrent GC?
[09:34:31] <kakuhen> allegedly Allegro CL has a concurrent GC, a tree-shaker, and other fancy features
[09:34:37] <kakuhen> I've never heard of LispWorks having a concurrent GC though
[09:34:37] <hayley> Hah, they also think that Go should have a generational GC.
[09:34:50] <lotuseater> hmmm
[09:34:51] <hayley> SICL will have a concurrent, parallel, generational GC, but it is not done yet.
[09:35:06] <lotuseater> sounds like a lot of intellectual work
[09:35:40] <lotuseater> so it's in a sense like Erlang does it?
[09:35:58] <hayley> The design is basically https://xavierleroy.org/publi/concurrent-gc.pdf with the exception that we have mostly mutable data, so we have mutable heaps and escaping causes a minor GC basically.
[09:36:04] <lotuseater> having this proven correctly would be nice ^^
[09:36:36] <hayley> Sort of, but there is a shared old generation in Doligez-Leroy. Also, it was proven correct later (after fixing a bug).
[09:36:51] <hayley> http://pauillac.inria.fr/~doligez/publications/doligez-gonthier-popl-1994.pdf <- the proof
[09:37:46] <lotuseater> oh good
[09:38:25] <lotuseater> If I now would be clever enough to understand that or all the other things.
[09:42:24] <kakuhen> i really dont like the notation 
[09:42:48] <kakuhen> specifically expressions like heap[x].color = white
[09:43:00] <White_Flame> lotuseater: what's erlang's GC like?  last I used it, it was per-process heaps with stop-the-world on each
[09:43:33] <lotuseater> White_Flame: I would have guessed they also rely heavily on concurrent GC.
[09:45:00] <White_Flame> http://erlang.org/doc/apps/erts/GarbageCollection.html
[09:45:00] -ixelp- Erlang -- Erlang Garbage Collector
[09:45:43] <White_Flame> seems like it's still stop the world^Wprocess
[09:46:31] <lotuseater> oh okay good to know
[09:47:57] <hayley> Well, Doligez-Leroy is stop the world^Wthread too.
[09:48:57] <lotuseater> but doesn't that go against the "we scale nearly n times when you run the same (concurrent written) code"?
[09:50:04] <hayley> Nope, each GC is fully independent on Erlang.
[09:50:33] <lotuseater> yes that confused me just a bit, so ok
[09:51:49] <hayley> An on-the-fly GC has to handshake with all the threads before starting a cycle, so GC is delayed a bit, but threads don't wait on other threads.
[09:55:21] * hayley reads figure 6 of Doligez and Gonthier and wonders if she needs an oscilloscope to debug the GC.
[10:01:23] *** Joins: shka (~herr@109.231.62.239)
[10:02:26] * hayley asked someone what algorithms can't be written in the presence of bounds checking, and they deleted their comment. Go figure.
[10:04:51] <sm2n> I have an algorithm that prints "Segmentation Fault" to the screen, does that count?
[10:05:21] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:05:40] <hayley> (write-line "Segmentation fault") not good enough?
[10:07:25] <sm2n> I'm reminded of that iOS application that faked having your screen broken that was popular a long time ago
[10:09:32] <lotuseater> it's like having one of those commercial antivirus software "your system is now clean"
[10:12:22] <hayley> I misspoke somewhat; an on the fly GC can start marking after the first handshake, but most time is spent in marking of course.
[10:21:26] <hayley> Though the SICL specification describes a much simpler collector. AIUI the complexity in D-G is that it tries to be more careful with not marking "floating garbage" created in the same GC cycle.
[10:22:09] <kakuhen> sm2n: i recall such an app from nearly a decade ago; i wonder if it still exists today.
[10:28:37] <sm2n> kakuhen, I wouldn't know
[10:32:03] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:32:59] <hayley> https://golang.org/src/runtime/mgc.go also describes the Go GC in some detail.
[10:33:00] -ixelp- src/runtime/mgc.go - The Go Programming Language
[10:33:51] <Qwnavery> \o hi guys I'm baack
[10:36:49] <lotuseater> hey Qwnavery :)
[10:37:16] <hayley> Oh, there is also mark-during-sweep if you are bored of only doing one at a time.
[10:38:41] <Qwnavery> s/guys/guys and girls/
[11:07:53] <Qwnavery> Hey, are there any Aussies in here?
[11:10:12] <dave0> yep
[11:10:34] <Qwnavery> dave0: you?
[11:11:02] <dave0> yep
[11:11:10] <lotuseater> oh dave0 too
[11:11:34] <Qwnavery> Nice
[11:12:28] <dave0> the daylight is getting longer
[11:12:39] <hayley> Yes.
[11:13:17] <hayley> Small problem: the D-G paper is kinda hard to read, and the GC handbook is also kinda hard to read.
[11:16:45] <sm2n> what isn't hard to read?
[11:17:48] <Qwnavery> "How To Read: Better and Faster"
[11:18:14] <hayley> There isn't a clear description of how this damn algorithm works. Perhaps I just re-read both until it clicks.
[11:18:45] <Qwnavery> send link please
[11:18:59] <hayley> http://pauillac.inria.fr/~doligez/publications/doligez-gonthier-popl-1994.pdf
[11:20:13] *** Joins: selwyn (~selwyn@user/selwyn)
[11:21:17] <hayley> Okay, the Handbook gives a reasonable "global" view.
[11:23:04] <hayley> https://www.youtube.com/watch?v=Im_yboa0Jz4
[11:23:04] -ixelp- Tubeway Army / Gary Numan - Bombers (Original Version) (Remastered) - YouTube
[11:24:50] *** Quits: lad (~lad@user/lad) (Ping timeout: 258 seconds)
[11:26:20] <hayley> So the mutators do a sort of two-phase commit w.r.t the write barrier while the collector is still getting roots.'
[11:33:03] <hayley> .oO( Well, another nice thing about abstractions is that you can name common patterns in things. Like calling everything a monad, but actually useful. )
[11:36:07] <hayley> While there are three handshakes, there are also only three states, which can fit in one's head barely.
[11:44:30] <hayley> I find it weird though that they call scanning roots "marking", and marking the transitive closure of objects reachable from the roots "scanning". Kinda backwards. Guess it is a northern hemisphere thing.
[12:02:28] <lotuseater> northern hemisphere :D
[12:03:06] <lotuseater> "we are in the north" "no, i mean the *real* north beyond the wall"
[12:04:22] * hayley reads http://lists.selflanguage.org/pipermail/self-interest/2021-August/004843.html
[12:04:54] <hayley> Aside from the amazing mailing list name, there is talk to have a Self on either OpenSmalltalk (cool), Truffle (lawful neutral), or LLVM/Rust (very bad).
[12:54:00] <selwyn> what´s wrong with having self on llvm
[12:54:05] <selwyn> jit too slow?
[12:55:45] *** Joins: selwyn_ (~selwyn@user/selwyn)
[12:59:14] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 272 seconds)
[13:03:34] <hayley> That wasn't very metacircular of you
[13:04:06] <shka> sorry, not all of us are so adapt to the memespeak
[13:04:45] <hayley> But AIUI you can't implement inlining caching easily, so the speed of message sends where the map isn't nailed at compile-time is going to be crap.
[13:06:01] <hayley> shka: idk, I think metacircularity is a good idea. If you think your language is any good, only fair to show it off with a compiler. That's why they nearly did the Klein VM before losing funding(?)
[13:28:20] <hayley> "Hello phoe." "Hello Mike."
[13:29:00] <lotuseater>  
[13:29:00] <lotuseater> Ah phoe, as you mention, do I remember correctly, your daily job is with Erlang?
[13:29:10] <lotuseater> hayley: one of my favorite 10min videos
[13:29:27] <hayley> https://www.youtube.com/watch?v=xdqrj---_BA
[13:29:27] -ixelp- Erlang YTP: Mike's Phony Adventure - YouTube
[13:30:40] <hayley> IIRC in "A critique of Standard ML" (or a name like that), Andrew Appel states he finds Lisp, ML and Smalltalk to be "mathematical languages", as opposed to C or FORTRAN which are not.
[13:31:03] <lotuseater> this intro music with Agner Krarup
[13:31:46] <hayley> https://www.cs.princeton.edu/~appel/papers/critique.pdf "and the 'mathematically derived' family, including Lisp, ML, Smalltalk and CLU, which are safe..."
[13:32:27] <lotuseater> Safe! You'll never have to worry ...
[13:32:45] <kakuhen> i wish lisp were mathematical
[13:32:48] <lotuseater> APL is also functional
[13:33:40] <lotuseater> kakuhen: it's more or less the stuff you make out of it
[13:33:42] <hayley> Though I have bones to pick with the rest of the critique. Catching stuff at compile time is good, catching stuff at compile time without having to restart the damn compiler/image is better. Though SML of NJ has a good interactive mode.
[13:34:00] * Qwnavery dials 666
[13:34:09] <kakuhen> unfortunately, doing math with computers forces you into a lot into constructivist definitions, and these definitions tend to differ wildly from the widely used definitions depending on what topic in math you're studying
[13:34:29] <kakuhen> so lets say i want to do some algebraic geometry on a computer... i probably want to be able to express discrete valuation rings
[13:34:36] <selwyn_> hm
[13:34:39] <kakuhen> well, the constructive definition of a discrete valuation i have no idea what it is
[13:34:46] <kakuhen> but it sure as hell is not the definition i know and everyone else does
[13:34:57] <hayley> And Appel hilariously deems that macros are mere "string-to-string rewrite"s, and they are equivalent to passing closures around.
[13:35:02] <kakuhen> and computers can pretty much only use that other definition, or at least it'd be way too annoying to use the usual definition.
[13:35:02] *** Joins: pl (sid98063@id-98063.brockwell.irccloud.com)
[13:35:36] <selwyn_> kakuhen: have you heard of the xena project?
[13:35:48] <kakuhen> yes; and I know the guy behind it, too
[13:36:11] <kakuhen> it's quite the downfall honestly, from langlands to a theorem prover that breaks its only non-trivial project every 6 months
[13:36:55] <kakuhen> i lost a lot of respect for the guy when he posted some insane comment about the hilbert basis theorem on twitter
[13:37:00] <kakuhen> let me find it real quick
[13:37:06] <selwyn_> what do you mean by that
[13:37:10] <selwyn_> breaking version updates?
[13:37:10] <hayley> OTOH I think ML syntax is pretty nice for not "no syntax".
[13:37:32] <hayley> pl: welcome to #lispcafe
[13:37:41] <kakuhen> selwyn_: the lean kernel is very unstable and has many breaking changes
[13:37:51] *** Joins: silasfox (~silasfox@62.159.27.1)
[13:37:56] <kakuhen> last time I asked kevin buzzard, it seemed like mathlib had to be rewritten entirely from scratch if they wanted to move to lean 4 (from lean 3)
[13:37:56] <selwyn_> kakuhen: i see
[13:37:59] <pl> hayley: I wonder how soon I will remember why I quit it
[13:38:09] <kakuhen> Most theorem provers suffer from this kinda problem btw
[13:38:21] <kakuhen> It's just that some of them are less of a moving target than others (e.g. Coq)
[13:38:25] <selwyn_> right
[13:38:37] * hayley uploaded an image: (58KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/arzjzNnqnuLqwWfheVAzkODK/pauseless.png >
[13:38:48] <lotuseater> hi pl :)
[13:38:49] <hayley> pl: hopefully some time after viewing this image?
[13:38:51] <kakuhen> anyway I've messed around with Lean a few months back -- it's a pretty neat concept
[13:38:57] <selwyn_> kakuhen: well, that´s upsetting to hear
[13:38:59] <kakuhen> my gosh the proofs of relatively simple statements get really ugly quick
[13:39:02] <selwyn_> about the kernel i mean
[13:39:05] <kakuhen> oh right
[13:39:14] <kakuhen> yeah that's what made me give up in trying to contribute to mathlib at all.
[13:39:32] <kakuhen> what's the point if the entire fricking library breaks with every major version
[13:39:47] <kakuhen> and as I said just now, this breakage isn't uncommon for theorem provers, but most of them don't have it this bad.
[13:39:55] <kakuhen> err let me weaken my qualifier to "a lot of them"
[13:40:19] <hayley> I am an idiot, I only use TLA+ and ACL2
[13:40:28] * pl proceeds to slap hayley with metronome paper screaming "Do not meme the deep magics to me, I used them before the memes" ;)
[13:41:00] * hayley shields herself with the Handbook
[13:42:01] <kakuhen> but yeah, i like theorem provers in concept, but i just haven't been able to stick with one, yet :x
[13:42:09] <kakuhen> i'll continue doing math with pen and paper for now
[13:42:32] <selwyn_> wish i could do that
[13:42:46] <hayley> Apparently ACL2 is pretty unsophisticated (it does natural recursion on conses and natural numbers, and that's it?) but hardware people ain't complaining.
[13:43:29] <kakuhen> does it do what lean does where importing a single submodule causes a compilation of the entire library?
[13:43:46] <selwyn_> aiui lean has enough nice features to let one formalise most of mathematics with it
[13:43:57] <kakuhen> i want to use literally just one item from mathlib and my computer goes brrr for 5 minutes compiling hundreds and hundreds of lean files
[13:44:02] <kakuhen> and then the compiler takes up like 10 GB of RAM
[13:44:04] <kakuhen> and just keeps it
[13:44:29] <kakuhen> it's not a terrible issue but nonetheless one i find amusing
[13:44:48] <kakuhen> i think to myself "when demonstrating lean to friends, don't import anything from mathlib unless you really need it"
[13:46:07] *** Joins: makomo (~makomo@user/makomo)
[13:51:54] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 276 seconds)
[13:56:05] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[13:56:09] <edgar-rft> let's rewrite math from scratch using pencil and paper
[13:57:07] <hayley> IMO just make it complete and consistent this time
[13:58:11] <edgar-rft> there are no numbers allowed lesser or greater than zero anymore
[13:58:32] *** Joins: silasfox (~silasfox@62.159.27.1)
[14:04:32] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[14:04:36] <kakuhen> there are no numbers allowed
[14:05:25] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[14:07:16] *** Joins: silasfox (~silasfox@62.159.27.1)
[14:42:47] *** Joins: nirnam (~nirnam@1.46.13.87)
[14:43:02] *** Joins: elflng (~elflng@5.28.137.182)
[14:50:31] *** Quits: nirnam (~nirnam@1.46.13.87) (Read error: Connection reset by peer)
[14:52:08] *** Joins: nirnam (~nirnam@1.46.13.87)
[14:58:04] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:59:31] <hayley> https://www.youtube.com/watch?v=LqZCwY69XLA
[14:59:31] -ixelp- Only Good For Conversation - YouTube
[15:01:41] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[15:04:42] <edgar-rft> let's all behave undefinedly
[15:06:32] * hayley is slightly terrified by trying to design another state machine for modelling another potentially racy lock-free thing, so considers other verification methods.
[15:10:02] <hayley> Well, last time I just kept drawing until it clicked. Time to get out some paper.
[15:11:13] <edgar-rft> What I always wanted to know is if I use Prolog's unification on a state machine, will it end up with something like the United States machine?
[15:11:31] <hayley> No, Prolog can actually find solutions.
[15:12:35] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[15:12:35] *** ChanServ sets mode: +o MichaelRaskin
[15:13:26] <edgar-rft> Maybe that's why the Unites States produce more problems than solutions?
[15:13:37] <hayley> Something like that.
[15:14:19] <edgar-rft> Thank you for helping me understanding the world :-)
[15:15:12] <hayley> Or do I really have to git gud at TLA+ for this? Guess so.
[15:17:18] <hayley> "If a dangerous bug to you is “somebody dies”, then yes, formal methods are hard. If a dangerous bug to you is “nobody dies but our customers get really mad and we have to spend two weeks tracking down and fixing the bug”, then the small subset of TLA+ you’ll need is actually pretty easy to learn."
[15:17:31] *** Joins: random-nick (~random-ni@87.116.177.228)
[15:28:38] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 258 seconds)
[15:35:19] *** Joins: Oddity (Oddity@user/oddity)
[15:51:42] <edgar-rft> But when everyone dies then all is good. There are no custmers anymore who can get mad, and you don't even need to care about that because you're dead, too. So finally the worms can gain world domination, as it was intended from the beginning of time.
[15:56:07] * hayley forgot the : on all of the the :=
[15:58:17] <edgar-rft> how could you find out if you forgot and can't remember?
[15:59:44] <edgar-rft> ...another unresolved mystery of the universe...
[16:25:40] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[16:49:08] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 272 seconds)
[16:52:59] <hayley> Woohoo, I got a working model, and there isn't anything obviously dumb about it.
[16:57:44] <dave0> nite all
[16:58:09] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[16:58:16] <hayley> AIUI just two connections (one best, one not best) should be enough to prove it works, but it wouldn't hurt to generalise to n connections tomorrow.
[17:00:50] <hayley> https://gitlab.com/cal-coop/netfarm/cl-decentralise2/-/blob/chunk-mailbox/Code/Systems/Standard-system/Design/queue.tla
[17:00:51] -ixelp- Code/Systems/Standard-system/Design/queue.tla · chunk-mailbox · Cooperative of Applied Language / The Netfarm Suite / cl [...]
[17:01:09] *** Joins: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net)
[17:03:12] *** Joins: selwyn (~selwyn@user/selwyn)
[17:08:53] <gilberth> Good morning #lispcafe!
[17:10:07] *** Joins: montxero (~user@149.167.149.74)
[17:20:14] <hayley> Good morning gilberth!
[17:21:13] <hayley> You'd like PlusCal, all the examples use its Pascal notation.
[17:23:09] <Gnuxie> Good morning gilberth 
[17:23:41] <hayley> Though the theorem prover just goes by exhaustion really, so it isn't a fancy prover in any way. Which is fine as livelock is bad too.
[17:24:27] <selwyn> hi
[17:26:38] <hayley> TLA+ found like 200 states though, which is too many to draw a state machine for :)
[17:27:27] <hayley> Or I think the checker is rather TLC. Anyone here care?
[17:27:50] <selwyn> i care about tna
[17:27:53] <selwyn> (sorry)
[17:29:57] <hayley> cond: What is TNA?
[17:31:57] <ck_> Tautologies'n'Ambivalene
[17:32:45] * selwyn glances nervously around for the horny police
[17:32:47] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Remote host closed the connection)
[17:33:34] <hayley> The Nut Association
[17:41:52] <gilberth> hayley: Ok. So I won't like it, as I don't like the Pascal syntax. OTOH it is context free at least.
[17:43:05] <hayley> TLA is untyped, so there isn't anything that requires context to parse.
[17:45:00] <hayley> A bit like ACL2 in that regard. Though I guess Lamport was a Lisper once....in 1966.
[17:46:45] * gilberth could imagine a grammar about something untyped, which is context sensitive.
[17:47:21] <hayley> Well, the context in C is the environment, for detecting either a function call or a variable declaration.
[17:47:41] <hayley> By CLtL quasiquotation uses context sensitive productions.
[17:49:42] <gilberth> Yes, or whether an identifier names a type or a value, to be a little more precise. Pretty annoying.
[17:50:57] * hayley wonders if a proof that her algorithm works with 2 producer and 1 consumer implies it does with 1 producer.
[17:51:46] * hayley also wonders how obvious it is that it would work with 3 producers, given that we do a sort of maximisation which is transitive.
[18:07:26] <hayley> Still, I'd have to learn to make a tuple with size given at runtime.
[18:12:11] <hayley> Perhaps a map^Wfunction would work better.
[18:13:55] <hayley> A tuple is just a function, and indeed the tutorial tells you to use a comprehension to generate a tuple of some length.
[18:14:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:15:32] *** Joins: nihaal (~nihaal@117.96.193.218)
[18:26:15] *** Quits: silasfox (~silasfox@62.159.27.1) (Quit: Connection closed)
[18:50:35] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:03:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:11:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[19:19:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:52:02] *** Quits: nihaal (~nihaal@117.96.193.218) (Read error: Connection reset by peer)
[19:57:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:02:08] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:15:02] *** Joins: copec (~copec@home.unaen.org)
[20:41:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:49:24] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:58:46] *** Joins: lad (~lad@user/lad)
[21:24:28] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:32:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:06:50] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:06:51] *** Joins: Catie (~user@c-24-17-253-63.hsd1.wa.comcast.net)
[22:15:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:37:32] <lotuseater> re
[22:49:56] <lotuseater> gilberth: Please write that CLIM book. :)
[22:53:45] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:54:04] *** Joins: robin (~robin@user/terpri)
[23:05:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:12:58] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:14:25] <Alfr> hayley, do you use that both producers actually produce? Otherwise I'd think your 2p1c should also cover 1p1c.
[23:15:01] <Alfr> s/use/in the proof use/
[23:16:28] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f4a8:187b:951a:2344)
[23:24:14] <lotuseater> Alfr: I think the answer can take a few hours of time to be answered. ^^
[23:36:13] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 244 seconds)
[23:39:26] * gilberth faces an aegri somnia as he tries to untangle typographic bounds from image bounds in CLIM.
[23:40:54] <lotuseater> hmm
[23:41:44] <gilberth> And btw, Cocoa also suffers from the flaw, that you can't get at text metrics, or create a pixmap before you have a window. In CLX I use the root window as a proxy here, which works these days.
[23:42:22] * Alfr wonders whether recently gilberth is hacking TeX-like layouting into CLIM ...
[23:42:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:43:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:43:26] <gilberth> Alfr: See Closure. It's defunct pretty likely, never tried to even build it in ages. Otherwise I hack in circles again.
[23:44:26] <gilberth> Alfr: And the CLIM API as is is broken. It tries to offer typesetting, but confuses display lists with a formatting tree. I'll fix that eventually by sth new on top of Silica.
[23:45:30] *** Quits: montxero (~user@149.167.149.74) (Read error: Connection reset by peer)
[23:45:37] <gilberth> With maximum compatibily in place. A casual user won't recognize that his FORMATTING-TABLE, say, is sth different.
[23:45:45] *** Joins: montxero (~user@149.167.149.74)
[23:47:52] <Alfr> Okay. (I was just a little bit curious, that all.)
[23:47:58] <Alfr> s/that/that's/
[23:49:46] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[23:50:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:54:12] <lotuseater> so i can type in the command pane something with $$ and it will get displayed? ^^
