[00:01:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:05:48] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[00:05:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:07:05] <White_Flame> Does anybody know the history/etymology of the term "macro" as used in programming languages?
[00:07:39] <White_Flame> as in the scrollback, some mentions of the difference between "text expander" as most people understand it, and "source code transform" which only a few languages really have
[00:07:46] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Ping timeout: 260 seconds)
[00:08:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[00:09:43] *** Joins: aeth (~aeth@user/aeth)
[00:11:53] <Bike> I think that it derives from macro instructions in assemblers, which were so called because they were "big" compared to normal ones. Here's a 1960 article the ACM doesn't let me access https://dl.acm.org/doi/abs/10.1145/367177.367223
[00:12:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:12:24] <Bike> referencing some 1959 articles also using the term "macro" which i also cannot access
[00:14:33] <Nilby> Yes, I was thinking "macro" assemblers are where I first heard that usage.
[00:14:42] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[00:15:44] *** Quits: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:16:55] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9e2e:d238:6ddc:c88f) (Ping timeout: 268 seconds)
[00:25:36] <White_Flame> ah, makes sense I guess
[00:25:56] <Nilby> Probably the word "macro" just sounds smarter and more specific than "big", and "composite" or something is too many letters and syllables.
[00:25:57] <White_Flame> so yeah, it does naturally feed into an expansion of sorts, but most expanders have been pretty dumb across programming language history
[00:29:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:34:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:35:07] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[00:35:30] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[00:39:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:40:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:40:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:42:56] <Josh_2> I need to send updates to a webpage when something is added to my backend, this change doesn't happen very often
[00:43:46] <Josh_2> Idk if I should use a websocket, seems like a lot of overhead for infrequent updates. Although I could use the same websocket for all served pages
[00:44:01] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Quit: ERC (IRC client for Emacs 28.0.50))
[00:44:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:45:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[00:48:58] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Quit: Connection closed)
[00:55:23] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[00:56:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:57:09] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[00:58:06] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:03:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:05:59] *** Joins: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com)
[01:08:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[01:08:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:12:06] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[01:13:57] *** Quits: cosimone (~user@93-47-228-48.ip115.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[01:25:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:29:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[01:29:23] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[01:29:38] *** Joins: asarch (~asarch@2806:10ae:7:b848:40af:8ff8:3979:46ee)
[01:31:12] *** Joins: aeth (~aeth@user/aeth)
[01:31:44] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:31:45] <asarch> How could convert '("pizza" "beer" "tacos") into "(?, ?, ?)"
[01:32:09] <asarch> *could you
[01:32:38] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[01:36:17] <asarch> (format nil "~{?~^, ~}" '("pizza" "tacos" "beer")) eats the heap
[01:38:44] <hayley> You'd need to advance through the list.
[01:39:02] <hayley> ~{?~*~^, ~}
[01:39:08] <hayley> as ~* skips an argument.
[01:39:26] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[01:41:04] <asarch> Thank you!
[01:41:11] <asarch> Thank you very much hayley :-)
[01:43:51] *** Quits: yewscion (~yewscion@ec2-44-193-71-234.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[01:43:58] *** Quits: pve (~pve@178-55-189-165.bb.dnainternet.fi) (Quit: leaving)
[01:52:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:59:54] *** Quits: rgherdt (~rgherdt@ip5f5af428.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[02:02:41] *** Joins: yewscion (~yewscion@72-21-198-65.amazon.com)
[02:06:26] *** Quits: asarch (~asarch@2806:10ae:7:b848:40af:8ff8:3979:46ee) (Quit: Leaving)
[02:16:02] *** Joins: khrbt_ (~znc@user/khrbt)
[02:17:11] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 264 seconds)
[02:17:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[02:19:00] *** Quits: hofenstad (~hofenstad@182.237.189.37) (Ping timeout: 268 seconds)
[02:25:35] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[02:25:54] *** Joins: Guest7427 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[02:29:21] *** Joins: Jing (~textual@2604:a840:3::1021)
[02:29:30] *** Quits: yewscion (~yewscion@72-21-198-65.amazon.com) (Ping timeout: 268 seconds)
[02:35:13] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[02:39:16] <Guest7427> i thought x11 documentation was bad, this sane stuff is frustrating. Is there some unknown to me meaning of pointer in regards to a network stream?
[02:50:26] *** Quits: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84) (Quit: switching clients)
[02:51:03] *** Joins: Catie (~user@24.19.51.175)
[03:00:01] *** Joins: igemnace (~ian@user/igemnace)
[03:09:49] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:11:29] *** Joins: s-liao (~s-liao@101.86.103.113)
[03:17:01] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[03:17:35] *** Joins: Jing (~textual@2604:a840:3::1021)
[03:22:44] *** robin_ is now known as robin
[03:26:00] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[03:26:50] *** Quits: X-Scale (~ARM@46.50.2.72) (Ping timeout: 268 seconds)
[03:28:14] *** X-Scale` is now known as X-Scale
[03:31:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[03:32:24] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[03:34:13] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:46:27] *** Joins: trocado (~trocado@bl18-243-251.dsl.telepac.pt)
[03:49:40] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[03:51:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:51:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:54:20] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:8c42:fdf9:ab6e:cade) (Remote host closed the connection)
[03:56:54] *** Quits: trocado (~trocado@bl18-243-251.dsl.telepac.pt) (Remote host closed the connection)
[04:02:05] *** Joins: igemnace (~ian@user/igemnace)
[04:03:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[04:06:42] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 260 seconds)
[04:14:56] *** Quits: Guest7427 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Ping timeout: 268 seconds)
[04:15:59] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:16:26] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 260 seconds)
[04:16:52] *** Joins: karlosz_ (~karlosz@47.151.136.69)
[04:21:21] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[04:26:39] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[04:27:31] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[04:34:10] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[04:42:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:43:09] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::32f3)
[04:47:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:03:44] <winning-luser> how did software engineers on old lisp machines track bugs and timelines for features to implement? was there any precursor to modern issue trackers and such around then?
[05:05:31] <Catie> It's not about Lisp Machine programmers, but this article discusses a minimal issue tracker that was thrown together in 1986 and used for many years thereafter
[05:05:35] <Catie> https://joearms.github.io/published/2014-06-25-minimal-viable-program.html
[05:06:12] <winning-luser> Catie: cool, thanks
[05:07:41] *** Joins: dre__ (~dre@60.229.42.110)
[05:09:23] *** Quits: dre_ (~dre@120.156.30.159) (Ping timeout: 246 seconds)
[05:20:34] *** Quits: Jing (~textual@2604:a840:3::1021) (Remote host closed the connection)
[05:21:13] *** Joins: Jing (~textual@2604:a840:3::1021)
[05:22:33] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[05:29:47] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[05:35:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:36:01] *** Joins: X-Scale` (~ARM@46.50.0.1)
[05:37:55] *** X-Scale` is now known as X-Scale
[05:42:02] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:43:21] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Quit: WeeChat 3.3)
[05:51:09] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[05:51:09] *** Quits: herlocksholmes (~herlocksh@x-node.gq) (Quit: Leaving...)
[05:51:30] *** Joins: herlocksholmes (~herlocksh@x-node.gq)
[05:51:53] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:56:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[06:05:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:08:02] *** Quits: dre__ (~dre@60.229.42.110) (Quit: Leaving)
[06:08:21] *** Joins: dre (~dre@2001:8003:c932:c301:bb14:f1af:101c:4c88)
[06:10:00] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[06:11:40] *** Quits: karlosz_ (~karlosz@47.151.136.69) (Quit: karlosz_)
[06:16:51] *** Joins: akoana (~ah@user/akoana)
[06:30:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:39:15] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[06:43:37] *** Joins: igemnace (~ian@user/igemnace)
[07:02:34] *** Quits: gaqwas (~john@dynamic-095-114-095-250.95.114.pool.telefonica.de) (Ping timeout: 260 seconds)
[07:02:57] *** Joins: gaqwas (~john@dynamic-095-118-005-151.95.118.pool.telefonica.de)
[07:08:04] *** beach` is now known as beach
[07:08:14] *** ChanServ sets mode: +o beach
[07:10:54] *** beach sets mode: -o beach
[07:30:45] <beach> Good morning everyone!
[07:33:10] <lisp123> Hello Beach
[07:33:23] <lisp123> What's your programming plans for today?
[07:34:17] <beach> I need to make sure the SICL cross compiler uses different environments for macro expansion and load-time execution.
[07:35:44] <lisp123> Great - good luck!
[07:35:48] <beach> Thanks.
[07:36:40] <beach> During cross compilation, the compilation itself is done by code running in the host, so if some functions are called during macro expansion, like in this case FORMAT as I discovered yesterday, they need to be the host version.
[07:37:33] <beach> But currently, I use the target version of those functions, so when I load SICL FORMAT into an environment that is subsequently used for macro expansion, things break horribly.
[07:38:04] <lisp123> Sounds tricky
[07:38:22] <beach> A bit.  Shouldn't be that hard though.
[07:40:24] <beach> I said "host version" but it could be the SICL version running in the host, of course.
[07:41:46] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[07:41:52] <lisp123> Ah, then you have access to more than 1 global environment :)
[07:42:35] <beach> Yes, currently 7 during bootstrapping for different phases, including the single host environment.
[07:54:20] *** Joins: semz (~none@user/semz)
[08:03:03] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[08:05:38] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[08:09:46] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[08:13:12] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:14:00] *** Joins: asarch (~asarch@2806:10ae:7:b848:40af:8ff8:3979:46ee)
[08:15:07] *** Joins: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com)
[08:17:42] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[08:18:53] <Josh_2> Mornin' beach
[08:20:56] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 245 seconds)
[08:34:13] *** Joins: s-liao (~s-liao@101.86.103.113)
[08:34:41] *** Joins: asarch_ (~asarch@2806:10ae:7:1c1d:4d1c:3e3a:3c3a:b44d)
[08:38:16] *** Quits: asarch (~asarch@2806:10ae:7:b848:40af:8ff8:3979:46ee) (Ping timeout: 268 seconds)
[08:49:59] *** Quits: asarch_ (~asarch@2806:10ae:7:1c1d:4d1c:3e3a:3c3a:b44d) (Ping timeout: 268 seconds)
[08:59:31] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:02:11] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Ping timeout: 264 seconds)
[09:04:22] *** Quits: silasfox (~user@p200300fb27041aad029587bbee605dae.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:14:38] *** Quits: bcasiello (~bcasiello@066-189-087-112.biz.spectrum.com) (Ping timeout: 260 seconds)
[09:38:15] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:51:26] *** Quits: Catie (~user@24.19.51.175) (Quit: rcirc on GNU Emacs 29.0.50)
[09:55:24] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:20:20] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[10:24:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:24:19] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[10:32:57] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 268 seconds)
[10:40:43] *** Joins: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu)
[10:43:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[10:48:59] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[10:49:14] *** Joins: amb007 (~a_bakic@246.132.22.93.rev.sfr.net)
[10:52:13] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[10:54:12] *** Joins: kadir (~kadir@95.7.9.203)
[10:54:54] *** Joins: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de)
[10:58:28] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:59:14] *** Quits: frgo_ (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[11:08:51] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:22:55] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[11:24:07] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[11:29:05] *** Quits: amb007 (~a_bakic@246.132.22.93.rev.sfr.net) (Ping timeout: 268 seconds)
[11:30:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[11:32:52] *** Joins: amb007 (~a_bakic@185.149.22.93.rev.sfr.net)
[11:34:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:09] *** Joins: asarch (~asarch@2806:10ae:7:1c1d:4d1c:3e3a:3c3a:b44d)
[11:39:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:11] *** Quits: amb007 (~a_bakic@185.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:41:20] *** Joins: amb007 (~a_bakic@185.149.22.93.rev.sfr.net)
[11:43:55] *** Joins: frgo (~frgo@185.144.83.11)
[11:47:29] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:49:56] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[11:57:24] *** Quits: amb007 (~a_bakic@185.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:57:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:05:56] *** Joins: rogersm (~rogersm@90.166.177.48)
[12:06:34] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:12:15] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:13:24] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[12:13:26] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:27:50] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[12:29:59] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[12:41:26] *** Quits: asarch (~asarch@2806:10ae:7:1c1d:4d1c:3e3a:3c3a:b44d) (Quit: Leaving)
[12:43:43] *** nckx is now known as Thunderbi
[12:46:50] *** Thunderbi is now known as guix-znc-test
[12:46:54] *** guix-znc-test is now known as guix
[12:51:50] *** guix is now known as nckx
[12:52:08] <rotateq> beach: Imagine you must use Word for the SICL documentation.
[12:53:57] <rotateq> Or UML-diagrams. :)
[12:56:48] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:57:26] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[12:58:36] <beach> Thankfully, I don't have any such constraints.
[12:59:17] <loke[m]> What do you mean "or"?
[12:59:40] <loke[m]> You'll write the documentation in Word, and all theatre diagrams should be drawn using Powerpoint.
[13:00:51] <rotateq> loke[m]: of course :P
[13:01:50] <rotateq> As all other people used Power Point for the presentation one fundamental thing came to my mind, you can't even have comments that are not shown in the final thing.
[13:02:02] *** Joins: s-liao (~s-liao@101.86.103.113)
[13:05:23] <rotateq> or I missed some of its "power"
[13:07:23] <pjb> rotateq: you had some nightmares this night?
[13:07:35] <pjb> Halloween after effect?
[13:08:04] <rotateq> pjb: yes!
[13:08:25] <rotateq> oh I wanted to make some more halloweenmath with this funny LaTeX package
[13:11:45] <rotateq> or with the coffeestains package, but i drink none ^^
[13:13:48] <loke[m]> rotateq you can have slides that are hidden. That's there only way, I think.
[13:14:31] <loke[m]> There are also the comments on you can include that mention something other people.
[13:14:48] <beach> How about finding a subject that is a bit more on topic?
[13:18:10] <rotateq> uii, but I won't invest the time better sharping my beamer skills :)
[13:18:45] <rotateq> beach: yes sorry, I wanted to ask you something ontopic, but I don't remember right now.
[13:20:17] <rotateq> I had on Sunday some weird problems with MACROLET on SBCL that it didn't see former lexical functions.
[13:20:55] <beach> That's a problem with your code and not with SBCL.
[13:21:18] <beach> MACROLET works at compile time, but lexical functions are not available until run time.
[13:21:29] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[13:25:08] <rotateq> Yes I thought so. :)
[13:25:12] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[13:25:43] <beach> clhs macrolet
[13:25:43] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_flet_.htm
[13:26:22] <beach> "the consequences are undefined if the local macro definitions reference any local variable or function bindings that are visible in that lexical environment."
[13:41:26] <rotateq> thank you much as always for the advise
[13:41:45] <beach> Pleasure.
[13:42:38] *** Joins: s-liao (~s-liao@101.86.103.113)
[13:42:51] *** Quits: heisig (~heisig@p508b531b.dip0.t-ipconnect.de) (Quit: Leaving)
[13:46:42] *** Quits: mgxm (~mgxm@user/mgxm) (Ping timeout: 260 seconds)
[13:47:54] *** Joins: mgxm (~mgxm@user/mgxm)
[13:51:18] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[13:56:56] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[14:01:38] *** Joins: s-liao (~s-liao@101.86.103.113)
[14:03:40] *** Joins: random-nick (~random-ni@87.116.177.136)
[14:13:14] <pjb> rotateq: instead of writing (flet ((foo () …)) (macrolet ((moo () … (foo …) … `(…))) …)) write:  (macrolet ((moo () (flet ((foo () …))  … (foo …) … `(…)))) …)
[14:16:23] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[14:28:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[14:32:52] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[14:34:15] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[14:34:44] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[14:35:51] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:39:25] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[14:39:55] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8105:e43c:4407:e29b)
[14:42:07] *** Joins: silasfox (~sbv@141.99.250.10)
[14:44:34] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:44:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:48:12] *** Joins: silasfox` (~user@141.99.250.10)
[14:49:08] *** Quits: silasfox (~sbv@141.99.250.10) (Quit: WeeChat 3.3)
[14:49:27] *** silasfox` is now known as silasfox
[14:49:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[14:49:44] *** Joins: amb007 (~a_bakic@169.149.22.93.rev.sfr.net)
[14:54:22] <rotateq> pjb: moo :)
[14:54:51] <rotateq> thanks I'll try this evening
[14:55:53] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:00:24] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[15:00:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:03:41] *** Quits: amb007 (~a_bakic@169.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:06:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:11:54] *** Joins: silasfox` (~user@141.99.250.10)
[15:13:06] *** Quits: OlCe (~user@lfbn-nic-1-394-237.w90-116.abo.wanadoo.fr) (Remote host closed the connection)
[15:13:28] *** Quits: silasfox` (~user@141.99.250.10) (Client Quit)
[15:13:34] *** Quits: silasfox (~user@141.99.250.10) (Ping timeout: 260 seconds)
[15:13:53] *** Joins: silasfox (~user@141.99.250.10)
[15:35:46] *** Quits: frgo (~frgo@185.144.83.11) (Remote host closed the connection)
[15:36:15] *** Joins: frgo (~frgo@2a01:4f8:172:fe06:8c52:fe59:6fdc:8ce6)
[15:37:00] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:41:18] *** Quits: frgo (~frgo@2a01:4f8:172:fe06:8c52:fe59:6fdc:8ce6) (Ping timeout: 268 seconds)
[15:47:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[15:48:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[15:54:29] *** Parts: kadir (~kadir@95.7.9.203) ()
[16:00:49] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:01:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[16:02:21] *** Quits: s-liao (~s-liao@101.86.103.113) (Client Quit)
[16:02:29] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[16:04:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[16:06:39] *** Joins: Psybur (~Psybur@mobile-166-170-30-165.mycingular.net)
[16:10:02] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[16:13:28] *** Joins: cosimone (~user@93-34-133-207.ip49.fastwebnet.it)
[16:15:28] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[16:15:30] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[16:16:05] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[16:22:02] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[16:22:39] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[16:24:28] *** Quits: cosimone (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[16:25:26] *** Quits: silasfox (~user@141.99.250.10) (Remote host closed the connection)
[16:25:39] *** Joins: silasfox (~user@141.99.250.10)
[16:28:46] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[16:29:01] *** Joins: Bike (~Bike@71.69.170.70)
[16:29:01] *** ChanServ sets mode: +o Bike
[16:31:15] *** Joins: s-liao (~s-liao@101.86.103.113)
[16:31:29] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:33:27] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[16:35:23] *** Parts: silasfox (~user@141.99.250.10) (ERC (IRC client for Emacs 27.2))
[16:54:16] *** Quits: hisacro_ (~OBSD@my.displ.nl) (Ping timeout: 245 seconds)
[16:54:22] *** Joins: kadir (~kadir@95.7.9.203)
[17:02:04] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[17:07:08] *** Quits: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com) (Remote host closed the connection)
[17:12:01] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[17:12:06] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[17:13:35] *** Joins: cosimone (~user@93-34-133-207.ip49.fastwebnet.it)
[17:15:06] *** Joins: cage (~cage@dynamic-adsl-84-220-237-192.clienti.tiscali.it)
[17:15:37] *** Joins: mfiano (~user@2603-7081-2d02-95bd-0250-b6ff-fef3-da40.res6.spectrum.com)
[17:20:04] *** Joins: s-liao93 (~s-liao@101.86.103.113)
[17:20:05] <flip214> When doing this: (write (make-array 100 :initial-element 0) :pretty nil :right-margin 100 :readably t)
[17:20:08] *** Quits: s-liao93 (~s-liao@101.86.103.113) (Client Quit)
[17:20:33] <flip214> why is in SBCL (via swank) the first line broken at 281 characters, the second indented and broken at 79 characters?
[17:20:55] <flip214> I'd like all output in one line
[17:23:02] <_death> :right-margin is for the pretty printer, but you pass :pretty nil?
[17:23:12] *** Quits: s-liao (~s-liao@101.86.103.113) (Ping timeout: 256 seconds)
[17:23:52] *** Joins: hisacro (~OBSD@my.displ.nl)
[17:24:13] <flip214> _death: yeah
[17:24:45] <flip214> I also tried :miser-width and :length
[17:24:48] <_death> probably I don't understand what you want to output..
[17:25:06] <flip214> everything in one line: #( .... )#\Newline
[17:25:12] <flip214> without the newline, even
[17:25:13] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:25:47] <_death> (write (make-array 100 :initial-element 0) :pretty nil :readably t) gives one line here
[17:25:58] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:26:11] <flip214> via swank??
[17:26:27] <_death> sure
[17:26:49] <_death> are you mistaking the returned value for the printed text?
[17:27:04] <flip214> ah yeah, thanks
[17:27:20] <flip214> no, but my *standard-output* was a swank stream which gets broken up
[17:27:35] <flip214> with a (with-output-to-string (*standard-output) ...) it works as expected
[17:27:38] <flip214> sorry about the noise
[17:28:16] *** Joins: pve (~pve@37-136-142-31.rev.dnainternet.fi)
[17:29:21] <_death> there's write-to-string btw.. and possibly want to wrap with w-s-io-s
[17:34:05] <flip214> thanks
[17:40:03] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:40:34] *** Quits: cosimone (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[17:47:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[17:52:11] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[17:53:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:11:40] *** Joins: trocado (~trocado@88.133.60.94.rev.vodafone.pt)
[18:11:47] *** Quits: attila_lendvai (~alendvai@catv-89-132-208-37.catv.broadband.hu) (Ping timeout: 264 seconds)
[18:17:42] *** Joins: tfeb (~tfb@88.98.95.237)
[18:17:55] *** Joins: hofensta_ (~hofenstad@182.237.189.37)
[18:19:36] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[18:21:55] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[18:32:50] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 260 seconds)
[18:35:03] *** Joins: tfeb (~tfb@88.98.95.237)
[18:39:21] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[18:39:52] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Quit: Connection closed)
[18:39:55] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[18:40:40] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[18:42:28] *** Parts: kadir (~kadir@95.7.9.203) ()
[18:43:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:43:26] *** Quits: yewscion (~yewscion@72-21-198-66.amazon.com) (Client Quit)
[18:44:25] *** Joins: yewscion (~yewscion@72-21-198-64.amazon.com)
[18:46:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:46:45] *** Joins: booaa (~user@150.116.160.195)
[18:47:38] *** Quits: booaa (~user@150.116.160.195) (Client Quit)
[18:58:37] *** Joins: booaa (~user@150.116.160.195)
[18:58:50] *** Parts: commandoline (~commandol@ubuntu/member/commandoline) (Bye!)
[18:59:30] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[19:00:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[19:03:10] *** Quits: booaa (~user@150.116.160.195) (Ping timeout: 260 seconds)
[19:08:13] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[19:09:34] <dieggsy> does anyone know if making an array of e.g. type '(unsigned-byte 8) in SBCL will actually be stored efficiently using a char (or whatever the smallest machine type is to hold the type)?
[19:10:39] <beach> Pretty sure it will use a single machine byte for each element.
[19:11:14] <beach> `char' is not a machine type though.  It's a C-ism.
[19:11:16] <White_Flame> yes, SBCL has specializers for smaller integers, as well as single/double floats as well iirc
[19:11:23] *** Joins: Inline (~Inline@2a02:908:1252:7a80:edec:c289:e267:dbb7)
[19:11:28] <White_Flame> *array specializers
[19:11:36] <dieggsy> beach: good point. and that's awesome
[19:12:04] <beach> I haven't checked the code, though.  That's just how I would do it. :)
[19:13:05] <dieggsy> wonder if there's an easy way to check this sort of thing... maybe some object size method ?
[19:13:17] <dieggsy> it's more just for my own curiosity anyway. thanks
[19:14:06] <beach> Sure.  There wouldn't be much point in having the type if it weren't for the efficient storage.  This type is not required by the standard.
[19:14:54] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:15:57] <White_Flame> dieggsy: I look at the disassembly, and how many bytes are actually allocated
[19:16:19] <White_Flame> although you can M-. into make-array to look at its code & what sorts of things it has around it
[19:16:35] <Josh_2> _death: You here?
[19:16:47] <Josh_2> (I do not have hours and hours of problems I need help with dw)
[19:17:00] <Josh_2> Also good afternoon peeps :)
[19:17:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:17:46] <Bike> there is sb-ext:primitive-object-size in recent versions of sbcl
[19:17:52] <Bike> have not used it myself
[19:18:59] *** Quits: trocado (~trocado@88.133.60.94.rev.vodafone.pt) (Ping timeout: 264 seconds)
[19:19:05] <pjb> dieggsy: I'm not sure it's awesome.  It may be a big problem: If you do (incf (aref foo 0)) in one thread, and  (incf (aref foo 1)) in the other thread, the you will get more memory contention with bytes than with long words…
[19:21:13] <dieggsy> pjb: well, there are some ways it's awesome jaja. could you elaborate on what you mean here though?
[19:23:47] *** Joins: heisig (~heisig@p508b531b.dip0.t-ipconnect.de)
[19:24:27] *** Joins: yewscion34 (~yewscion@72-21-198-66.amazon.com)
[19:25:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:27:00] *** Quits: yewscion (~yewscion@72-21-198-64.amazon.com) (Ping timeout: 268 seconds)
[19:28:13] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 268 seconds)
[19:31:32] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[19:32:23] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:33:17] <Josh_2> This might be a stupid question considering the author, but where are the docs for Clack?
[19:35:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[19:36:58] <contrapunctus> Josh_2: https://quickdocs.org/clack
[19:37:16] *** Joins: khrbt (~znc@user/khrbt)
[19:37:21] *** Joins: aeth (~aeth@user/aeth)
[19:37:34] <Josh_2> Guess it was a stupid question
[19:37:49] <contrapunctus> Josh_2: also https://quickref.common-lisp.net/clack.html
[19:38:17] <Josh_2> So no more than I found on my own
[19:38:29] <Josh_2> He updates it so frequently I dont see why he doesn't write some basic docs...
[19:38:33] <contrapunctus> But the former just seems to be a copy of the README, and the latter is generated reference...so about ¼th of "proper" documentation.
[19:38:43] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 268 seconds)
[19:39:02] <Josh_2> Guess I'll just stick in with hunchentoot for now and abstract away any server specific behaviour
[19:41:30] *** Quits: kdlv (~kdlv@user/kdlv) (Quit: The Lounge - https://thelounge.chat)
[19:42:33] *** Joins: kadir (~kadir@95.7.9.203)
[19:42:59] *** Joins: kdlv (~kdlv@user/kdlv)
[19:45:10] <contrapunctus> Josh_2: going by his lack of proficiency in English, it's probably difficult for him to write. I'm sure you'd help out more than a few people if you  contributed some docs...
[19:45:28] <Josh_2> I dont know how to use clack
[19:47:47] <Josh_2> Even japanese docs would work because you can just crudely translate with google translate, but at the end of the day its the code examples that are the most important
[19:48:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:48:16] *** Joins: Catie (~user@2603:3023:523:400:82e8:2cff:fed9:cc84)
[19:49:18] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 260 seconds)
[19:49:43] <contrapunctus> Josh_2: there's this I guess - https://lispcookbook.github.io/cl-cookbook/websockets.html
[19:50:57] <Jing> Agree. I always appreciate code examples when first using a library, or some screenshot showing a Emacs plug-in in action.
[19:51:35] *** Joins: ym (~ym@217.107.106.229)
[19:52:16] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:53:05] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:53:18] <contrapunctus> Josh_2: and https://jany.st/post/2015-12-17-thoughts-on-clack-apache-fastcgi-and-lisp.html (...or see if there are any projects using Clack 🤔)
[19:55:56] <Josh_2> Alright. Well I appreciate your scouring but I'm just gonna use ol trust Hunchentoot
[19:55:59] <Josh_2> ol trusty*
[19:58:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:02:07] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[20:02:52] *** Joins: khrbt (~znc@user/khrbt)
[20:05:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[20:06:57] *** Joins: aeth (~aeth@user/aeth)
[20:11:22] <pjb> dieggsy: it depends on the width of the memory bus. Nowadays, most often the memory bus is 4 byte wide. ie. you read 32-bit, and you write 32-bit.
[20:11:52] <pjb> dieggsy: so the addresses sent to the memory chip are actually pointer>>2 ; the last 2 bits are just use to index a byte into the 32-bit registers.
[20:13:15] <pjb> dieggsy: so when you do (incf (aref foo 0)) on a byte array, you actually read 32-bit (ie. (aref foo 0) … (aref foo 3)), get the valuel (aref foo 0), increment it, and build a new 32-bit value with the new (aref foo 0) and the other (aref foo 1) … (aref foo 3), then store that 32-bit word back to memory.
[20:13:29] <White_Flame> cache & main memory also have different memory structures
[20:13:44] <White_Flame> but at least the DDR4 is 64-bit wide, not 32
[20:13:46] <pjb> dieggsy: obviously, if another threads tries todo the same on (aref foo 1), both threads will try to access the same 32-bit word, so they will have to be synchronized.
[20:14:04] <pjb> And indeed, there's also the problem of cache, in addition.
[20:14:06] <White_Flame> I think DDR5 is moving to dual 32-bit buses, instead of a single 64-bit one
[20:14:15] <dieggsy> pjb: Oh, jeez, I see. Thanks! Is there no real way to mitigate this besides just ... don't do things in parallel when working with types smaller than 32?
[20:14:46] <dieggsy> or like a mutex
[20:15:38] <pjb> dieggsy: Well, in general it doesn't matter much, but I wanted to note that having specialized arrays to small bits of data is not "awesome" in the absolute; it can serve its purpose, but depending on what you do, it may not be the best choice.
[20:15:54] <pjb> And indeed, you will have often coarser mutexes anyways.
[20:17:15] <pjb> Where it can be good is to deal with big data that is byte-sized: this optimizes the space required to store it. And also, when you use it as a buffer for I/O, since I/O on posix system is performed on a byte basis.
[20:17:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:17:38] <dieggsy> pjb: The question is vaguely inspired by this ... "game" (more of a mental exercise) I like to think about just to exercise my brain. Like, what's the largest practical chunk of this map I can store in memory/what's the smallest amount of information I can use to describe this tile. etc. i got around to actually coding bits and pieces once, but yeah it's more just hypotheticals
[20:17:42] <pjb> But besides those use case, having just arrays of T can be more efficient (speed and complexity wise).
[20:18:30] <copec> White_Flame, As the clock goes up, the bus width for each link is going to necessarily going to have to be reduced for effective designs
[20:18:39] <dieggsy> so space optimization is vaguely where I was coming from, aware that space optimization isn't exactly the solution to gigantic maps when you have things like procedural generation but. still fun to think about I guess
[20:18:41] <pjb> Well, if you need to compress data, you can go the specific encoding way, or you can just use a standard compressing algorithms…
[20:18:46] <pjb> Depending on the use case.
[20:18:51] <dieggsy> Fair
[20:19:09] <White_Flame> copec: yep, and they're moving to 4 voltage level signaling, too
[20:19:28] <pjb> in CL you can use bit-vectors or integers with DPB and LDB to store fields of bits of variable length.
[20:19:38] <pjb> So there's way to optimize storage if needed.
[20:20:24] <White_Flame> (hmm, not finding it, maybe it was just PCIe5 that went to quad voltage instead of just binary)
[20:20:42] <dieggsy> pjb: oh neat, i didn't know about those functions
[20:25:34] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 268 seconds)
[20:28:00] <copec> White_Flame, bottom of this section on wiki page seems to say that https://en.wikipedia.org/wiki/DDR5_SDRAM#DIMMs_versus_memory_chips
[20:28:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:29:05] <White_Flame> copec: those are the DC voltage regulators, moving from the motherboard onto the chips
[20:29:28] <White_Flame> but I think the actual line signaling is still binary I guess
[20:30:13] <copec> It says "Each DIMM has two independent channels. While earlier SDRAM generations had one CA (Command/Address) bus controlling 64 or 72 (non-ECC/ECC) data lines, each DDR5 DIMM has two CA buses controlling 32 or 40 (non-ECC/ECC) data lines each, for a total of 64 or 80 data lines."
[20:30:44] <White_Flame> oh, just in terms of the change from 1x64 to 2x32, yeah
[20:34:24] <copec> Is there a writing style of CL that pretty much all advanced CL programmers find great?
[20:35:13] <White_Flame> indentation, good docstrings, good comments?
[20:35:34] <White_Flame> the actual style & organization is really dependeng on the particular codebase
[20:35:46] <White_Flame> simply for the fact that you can build your own per-project infrastructure easily
[20:36:23] <White_Flame> but I really, strongly dislike uncommented code
[20:36:32] <White_Flame> and documentation that doesn't include examples
[20:38:40] <copec> Yeah, I don't like where everything is individually explained, but doesn't draw any cohesive whole
[20:38:47] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 264 seconds)
[20:38:56] <copec> documentation that misses the forest for the trees
[20:39:59] <copec> It does seem a whole separate skill you have to develop, to know when and how to explain for an average reader
[20:40:05] <copec> Something I really need to work on
[20:40:59] <White_Flame> it does.  skill of writing (as in like writing books/articles/etc)
[20:41:29] <White_Flame> but really, all you need is to get burned a few times with your own old code, and not knowing what it's doing, to teach a good lesson of explaining to yourself
[20:41:39] <White_Flame> and comments really help with a lot of rubber-duck design & debug
[20:41:42] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[20:41:56] <Catie> One of the biggest things that's always helped me is docstrings on all the functions that describes what the parameters are for and what you can expect to be returned or signalled
[20:42:34] <White_Flame> and don't pollute the docstring with how the function works, put those in the comments.  Docstring is for usage
[20:42:52] <beach> White_Flame: I totally agree.  I find my own comments invaluable for understanding what is going on.
[20:43:35] <White_Flame> my wetware memory is terrible.  I need comments even for new code :-P
[20:43:58] <Catie> White_Flame: you're not alone on that one, I'm right there with you
[20:44:09] <beach> White_Flame: I am not far behind.
[20:44:46] <Catie> Useful parameter names also do me a lot of good. The main reason I can't use CLISP for most development is that it doesn't save parameter names, it just gives "arg0, arg1 ..."
[20:45:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:45:39] <White_Flame> oh, and once you have more than one &optional parameter, consider changing to keywords
[20:46:36] <White_Flame> positional ordering of &optionals can get really problematic if you need to change the parameters
[20:46:55] <White_Flame> and keywords will signal errors instead of just putting the wrong value in the wrong optional slot
[20:47:11] *** Joins: CaCode (~CaCode@user/cacode)
[20:50:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:52:32] <copec> White_Flame, is this readable to you? https://gist.github.com/copecog/6bfb20e037075b0f1c207c8c192c18ab
[20:53:05] <copec> I'm trying to compose good stuff, and not just throw away for myself
[20:53:10] <White_Flame> comments above code are much easier to read than off to the right
[20:54:19] <White_Flame> if the simple steps you take with your traversal API require comments like this, you might want to create more helper functions/macros to read in the more simple terms that your comments use
[20:54:32] <copec> 👍
[20:55:06] <White_Flame> however, I tend to write comments of this low level nature when in the middle of writing code, then delete some of them or summarize at the top of the loop with a longer sentence
[20:56:14] <beach> copec: Your UNLESS is a violation of the rules on page 13 of the LUV slides.
[20:56:37] <beach> copec: They recommend you use only truly Boolean expressions in the condition.
[20:57:06] <copec> I see
[20:57:11] <beach> copec: And I agree with the comments-above-code remark.
[20:57:57] <beach> In fact, all anaphoric macros violate this rule by nature.
[20:58:45] <beach> And, yes, most of those comments should be turned into named functions.
[20:59:13] <beach> Like SET-OF-REACHABLE-STATES-EXISTS-P
[21:00:12] <copec> wow, lots of great things to think about
[21:00:13] <beach> And the comment "add current state-prev" is an example of a comment that paraphrases the code.  Those should be avoided.
[21:03:49] *** Joins: jealousmonk (~user@2804:431:e7c4:b0f3:d8c8:261b:2f95:4da3)
[21:06:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:07:28] *** Parts: kadir (~kadir@95.7.9.203) ()
[21:12:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[21:12:08] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:12:38] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:12:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:17:23] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 268 seconds)
[21:17:39] *** Joins: amb007 (~a_bakic@169.149.22.93.rev.sfr.net)
[21:22:35] *** Quits: yewscion34 (~yewscion@72-21-198-66.amazon.com) (Ping timeout: 264 seconds)
[21:23:13] *** Joins: CaCode_ (~CaCode@user/cacode)
[21:27:15] *** Quits: CaCode (~CaCode@user/cacode) (Ping timeout: 268 seconds)
[21:28:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:30:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:30:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:33:50] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[21:35:34] *** Joins: aeth (~aeth@user/aeth)
[21:38:34] *** Quits: Jing (~textual@2604:a840:3::1021) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:39:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:45:16] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Quit: ERC (IRC client for Emacs 28.0.50))
[21:45:21] *** Joins: Oladon (~olad@98.43.81.226)
[21:45:50] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[21:51:27] *** Joins: even4void (even4void@came.here.for-some.fun)
[21:55:11] *** Joins: yewscion (~yewscion@72-21-198-66.amazon.com)
[21:56:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:04:08] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:07:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:07:27] *** Quits: amb007 (~a_bakic@169.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:07:45] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:09:46] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:10:58] *** Joins: molson (~molson@24-220-198-232-dynamic.midco.net)
[22:13:30] <Inline> frigging build for redsbcl was failing due to a bye; missing in reduce build.sh after a if blah then << if blah then ... >>
[22:14:15] <Inline> hmm i changed that to if blah then << if blah ....>> bye; and now it doesn't hang anymore and i got an image for sbcl heh
[22:14:47] <Inline> and i can run the image fine
[22:15:00] <Inline> not sure if the noncore packages were built into really tho...
[22:15:09] <Inline> that part was too fast to be good
[22:18:10] <Inline> i have a question
[22:18:26] <Inline> if i got 2 images, can i use both of them like -core image1.img -core image2.img ?
[22:18:35] <Inline> kinda like appending ?
[22:24:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:27:37] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[22:34:10] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:37:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[22:38:29] *** Joins: akoana (~ah@user/akoana)
[22:38:44] *** Joins: aeth (~aeth@user/aeth)
[22:43:31] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:47:41] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:48:01] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[22:49:40] <copec> beach, when you say only truly boolean expressions, that means something that only returns t/nil?
[22:52:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:52:01] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[22:52:02] <copec> so would it be okay to have my own function ie (when (is-foo-p 'foo) ...
[22:52:21] <copec> is-foo-p => t | nil
[22:57:24] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[22:58:52] <copec> Or should it be captured ahead of time, and then I should just use alexandria:when-let
[22:59:15] <pjb> copec: no, he means expressions that return a boolean OR a generalized boolea.
[22:59:39] <pjb> copec: well, since boolean is a subtype of generalized boolean, it's really only expressions returning generalized boolean.
[22:59:42] <pjb> copec: BUT
[22:59:58] <pjb> copec: the thing is that in CL generalized boolean = T. Ie any object is a generalized boolean.
[23:00:10] <pjb> copec: if that object is NIL, then it means false, all the other objects mean true.
[23:00:20] <pjb> copec: it's a matter of intent.
[23:00:42] <copec> Yeah, that's what I'm depending on with when
[23:00:43] <pjb> copec: so for example, (= 1 1) may return anything that is not NIL. it could return 1, 42, "hello" or T.
[23:00:47] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:00:59] <pjb> copec: but the intent, and the specification is that it returns a generalized boolean.
[23:01:11] <copec> I wrote SET-GET-ELEMENT => element if in set | nil
[23:01:12] <pjb> copec: on the other hand,
[23:02:20] <copec> so (unless (set-get-element element set) 'bleh)
[23:02:21] <pjb> on the other hand, can I find an example of a function that doesn't return a generalized boolean that may return nil or not nil?
[23:02:34] <pjb> copec: yes, your example is like gethash.
[23:02:41] <pjb> it returns the element, or nil if not found.
[23:02:45] *** Joins: rogersm (~rogersm@90.166.177.48)
[23:02:48] <pjb> so it returns a generalized boolean.
[23:02:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:03:08] <pjb> let put it aside for the moment.
[23:03:27] <pjb> there is worse: there are functions that are predicate, but that also return a useful value !!!
[23:03:31] <Guest74> I think the style guide is about not using generalized booleans.
[23:03:55] <Guest74> though i don't agree.  They're in the language for a reason.
[23:04:05] <pjb> for example, digit-char-p is specified as a predicate. (digit-char-p #\x) #| --> nil |#  (digit-char-p #\3) #| --> 3 |#  but when given a digit char, it is specified to return the integer represented by this digit char!!!
[23:05:00] <pjb> so while it's a function that is not intented to return a mere boolean, it still return a generalized boolean, but it also return (or null (integer 0 36)) (subtype of T).
[23:05:22] <pjb> and of course, you have the functions that return lists.
[23:05:30] <pjb> take just (list) (list 1)
[23:05:36] <pjb> (list) #| --> nil |#  (list 1) #| --> (1) |#
[23:05:54] <pjb> so the function list intent is to return a list, not a boolean.
[23:06:18] <pjb> In that case one would prefer to write (if (endp list) … …) instead of (if list … …) (the … are swapped, of course).
[23:07:14] <pjb> for functions like gethash, or your set-get-element, I think they're like digit-char-p, even if a-priori they lean more on the value function side rather than on the predicate side.
[23:07:43] <pjb> but the main problem here is that it depends on what you put in the structure.
[23:08:12] <copec> I understand that embedding expressions that aren't truly boolean expressions in anaphoric macros can be problematic, but I haven't studied the details of how it makes that expansion go awry
[23:08:22] <pjb> for example (defparameter *is-prime* (make-hash-table)) (if (gethash n *is-prime*) (process-prime n) (factorize n))
[23:09:09] <pjb> on the other hand (defparameter *names* (make-hash-table))   (if (gethash foo *names*) (process-named foo) (error "~S has no name" foo))
[23:09:45] <pjb> If you write: (if (not (gethash foo *names*)) …) how do you argument for a generalized boolean --> boolean function NOT on a (or null string) ???
[23:10:49] <pjb> You could write: (if (null (gethash foo *names*)) …) testing for the symbol NIL explicitely.  But why  favorize testing for NULL over testing for strings?  wouldn't (if (stringp (gethash foo *names*)) …) be preferable?
[23:11:11] <pjb> I argue that   (if (gethash foo *names*) (process-named foo) (error "~S has no name" foo)) is a nice idiom that everybody understands.
[23:12:32] <pjb> In general, IMO there's no reason to shy away type punning.  For one thing, it doesn't concern a lot of cases, only NIL / lists / boolean / absent values in CL.
[23:14:50] <pjb> We have the case in C, with NULL == 0 == false (which is even a little worse than in CL, because the value false is 0, as is the value of the integer 0, (ie. a field full of 0 bits), but the value of NULL can be a field of bits different from 0!!! Only that in the case where 0 is taken as a pointer  (eg. (void*)0  or when comparing it with a pointer such as NULL==0, the value of (void*)0 may be this field of bits different from 0 that
[23:14:50] <pjb> represent the NULl pointer.
[23:15:52] *** Joins: aeth_ (~aeth@user/aeth)
[23:15:59] <pjb> And what this means, is that in some cases, if you have a pointer and try to compare it with a null pointer, (eg. if a system definition of NULL is not available), comparing it with 0 or not comparing it to anything may be preferable.
[23:16:15] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:16:20] *** aeth_ is now known as aeth
[23:16:40] <pjb> In the end, my style in C also evolved to avoid comparisons with NULL, or with 0 (as a boolean or a pointer).
[23:18:09] <pjb> It's both idiomatic and perfectly defined what  foo* p=… ; if(p){ … } else { … } means as well as (let ((p …)) (if p … …)) means.
[23:18:56] <pjb> and notice that as you would NOT write if(b==false){…}else{…}  I see no reason to write (if (eq b nil) … …) or (if (null b) … …)
[23:19:21] <pjb> and (if (not b) …e …t)  can as well be written as (if b …t …a) if b is really a boolean.
[23:19:33] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[23:21:11] <pjb> And finally, and more generally, about those coding style rules.  I would mention, that coding style or not, you must know the syntax and semantics of the whole language to understand all the code you read.  If you adhere too strictly to coding style rules, up to the point in writing actually your code in a sublanguage, you can forget the actual language in which you're programming and misunderstand expressions that are valid but that
[23:21:11] <pjb> you don't expect anymore.
[23:22:36] <pjb> In C in particular, the language being so baroque most C programmers are not programming in C, but in an invented language (partly subset, partly superset, but with just the right intersection)  It's even more visible in C++ where the language you're using must be explicitely specified (both formally and informally), since it's rather impossible to use raw C++.
[23:23:01] <pjb> But happily this is not the case in lisp, where everything is consistent and orthogonal.
[23:23:42] <pjb> So coding styles are only useful to have some consistency and to help understanding but IMO they shouldn't be strict at all.
[23:25:19] <copec> ^I'm not Japanese, but I was saying hai throughout that while paying attention
[23:25:23] <pjb> Try to avoid if(b==true) … or if(b==false) … in C, and try to avoid the equivalent in other languages.
[23:26:16] <dre> copec, nice
[23:26:28] <pjb> ie. take the contraposed of beach's rule.  When it's a boolean don't use null (or endp), and use not only if you really need to invert the test (it may be preferable to swap unless/when than to use not).
[23:26:42] <dre> I like to say "neh neh" like koreans do
[23:26:58] <pjb> hmm in French :-)
[23:27:51] <pjb> That said, if you are hired to work on a project with coding style, do respect them, it's not worth arguing :-)
[23:37:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:48:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:49:13] <shka> i agree with most beach's guidelines, and i was trying to follow that one as well
[23:49:52] <shka> but... no...
[23:52:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[23:52:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:53:02] <lisp123> pjb: Great write up
[23:53:52] *** Joins: aeth (~aeth@user/aeth)
[23:54:08] <lisp123> One thing I have been trying to do more is to use the write code for the job
[23:54:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:54:36] <lisp123> Is it function that will only ever be used in the context of the calling function? I write those as flet
[23:54:44] <lisp123> If they are recursive, then write as labels
[23:55:11] <lisp123> Are the inputs likely to be variant in type? Generic Function. If they will always be the same, normal function
[23:57:34] <lisp123> Also, using imperative programming (a sequence of bindings within LET*) where appropriate (more specific code, also when there is more state?) and recursive functions / declarative code where it is more appropriate (more abstract code)
[23:59:00] <lisp123> Actually my goal has also been to remove all comments from a function -> the code should stand on itself and be self documenting. It's hard and requires a few refactors at time, but I am leaning this way. The issue with over documenting via comments or long doc strings is that it requires the reader to maintain two models - the plain text version and the actual code
[23:59:51] <lisp123> However, my plan is to introduce my own framework for additional documentation w.r.t to pseudocode / intent etc. as a separate property of the function (store in hash table) and to the bottom of the file
