[00:02:32] *** Joins: jealousmonk (~user@user/jealousmonk)
[00:10:05] *** Joins: ilmu2 (~ilmu@176.76.241.151)
[00:13:36] *** Quits: ilmu1 (~ilmu@176.76.241.149) (Ping timeout: 272 seconds)
[00:20:42] *** Joins: dre (~dre@101.191.49.59)
[00:32:22] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[00:35:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:44:36] *** Quits: tewi (~tewi@apn-95-41-56-223.dynamic.gprs.plus.pl) (Ping timeout: 240 seconds)
[00:59:46] *** Joins: dra (~dra@2a04:4540:6400:c900:6d9c:9eae:1ccb:cbea)
[01:07:52] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:45:24] *** Quits: dra (~dra@2a04:4540:6400:c900:6d9c:9eae:1ccb:cbea) (Quit: Leaving)
[01:49:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[01:51:05] *** Joins: aeth (~aeth@user/aeth)
[03:03:48] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[03:05:21] *** Quits: sgithens (sid10659@id-10659.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:27] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Read error: Connection reset by peer)
[03:05:30] *** Joins: sgithens (sid10659@id-10659.helmsley.irccloud.com)
[03:05:51] *** Quits: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:57] *** Quits: neominimum (sid537410@user/neominimum) (Read error: Connection reset by peer)
[03:06:19] *** Joins: neominimum (sid537410@user/neominimum)
[03:06:40] *** Joins: pedro-delfino (sid507296@2a03:5180:f:1::7:bda0)
[03:06:42] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[03:11:16] *** Joins: Oladon (~olad@98.43.81.226)
[03:27:00] *** Quits: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com) (Ping timeout: 240 seconds)
[03:27:22] *** Joins: fwoaroof (~fwoaroof@172.56.30.92)
[03:39:45] *** Joins: lucerne0 (~lucerne@ip202.ip-51-178-215.eu)
[03:41:34] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Ping timeout: 250 seconds)
[03:41:35] *** lucerne0 is now known as lucerne
[03:44:53] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[03:45:00] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Ping timeout: 240 seconds)
[03:45:08] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[03:45:25] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[03:46:07] *** Joins: minion (~minion@common-lisp.net)
[03:47:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[03:48:28] *** Joins: aeth (~aeth@user/aeth)
[03:48:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 272 seconds)
[03:50:12] *** Quits: fwoaroof (~fwoaroof@172.56.30.92) (Ping timeout: 272 seconds)
[03:50:47] *** Joins: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com)
[03:55:16] *** Quits: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com) (Ping timeout: 272 seconds)
[03:57:53] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[03:57:54] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Ping timeout (120 seconds))
[03:58:12] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[03:58:52] *** Joins: minion (~minion@common-lisp.net)
[04:00:51] *** Joins: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com)
[04:30:12] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:30:26] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:35:04] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:39:00] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:39:15] *** Joins: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:47:50] *** Quits: tyson2``` (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 272 seconds)
[05:22:14] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:34:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[05:35:10] *** Quits: random-nick (~random-ni@87.116.181.150) (Quit: quit)
[05:37:24] *** Quits: ilmu2 (~ilmu@176.76.241.151) (Ping timeout: 240 seconds)
[05:37:46] *** Joins: ilmu2 (~ilmu@176.76.241.151)
[06:11:20] *** Joins: lisp123 (~lisp123@94.203.159.21)
[06:55:02] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[07:30:22] <beach> Good morning everyone! 
[07:31:05] <jgart> hi!
[07:31:32] <jgart> what does the ~& mean in this format string? https://github.com/lmj/1am/blob/master/1am.lisp#L50
[07:32:00] <jgart> and the ~% at the end of the string
[07:32:49] <beach> You can look those up in the Common Lisp HyperSpec.
[07:33:18] <jgart> oh newlines
[07:33:37] <jgart> https://lispcookbook.github.io/cl-cookbook/strings.html#newlines--and-
[07:33:45] <jgart> I'll compare with clhs 
[07:33:47] <jgart> thnx
[07:34:05] <beach> http://www.lispworks.com/documentation/HyperSpec/Body/22_cac.htm
[07:34:25] <beach> ywlcm
[07:36:19] <jgart> Is this channel logged by anyone?
[07:36:59] <beach> Nope.  
[07:40:17] <jgart> Why does this assert that form evaluates to non-nil? https://github.com/lmj/1am/blob/master/1am.lisp#L86
[07:40:58] <White_Flame> because that's what ASSERT does.  It checks that its parameter is non-NIL, and blows up otherwise
[07:41:24] <White_Flame> so you put your expectedly true expression in there
[07:41:44] <White_Flame> as a sanity check or precondition
[07:42:34] <White_Flame> eg (assert (= 1 1)), program continues.  (assert (= 0 1)) program blows up
[07:43:34] <jgart> THNX! makes sense
[07:44:01] <jgart> so the macro `is` is different from assert in that it just displays a fancy message to stdout?
[07:44:25] *** Joins: lisp123 (~lisp123@91.74.78.188)
[07:45:23] <beach> Looks that way.
[07:45:34] <jgart> is wraps `assert` and `passed` https://github.com/lmj/1am/blob/master/1am.lisp#L79
[07:45:38] <jgart> k
[07:46:35] <jgart> Can someone explain the convention of calling `(values)` without any arguments as here: https://github.com/lmj/1am/blob/master/1am.lisp#L84
[07:47:13] <beach> It means that no values are returned. 
[07:47:42] <beach> In practice it is probably not important.
[07:50:09] <jgart> Why does that function need to return no values at the end?
[07:50:25] <jgart> What if we were to leave `(values)` out of the body of `passed`?
[07:50:27] <mfiano> Because it is likely for side effects
[07:50:33] <beach> It probably doesn't.  That's why I said it is probably not important.
[07:50:48] <mfiano> Then you are conveying to the reader that the return value is important.
[07:50:51] <lisp123> I'm not sure if it applies to that use case, but sometimes (values) is added to avoid printing certain forms to the REPL
[07:51:12] <jgart> like not returning a nil?
[07:51:23] <beach> lisp123: Yes, and that's a feeble excuse, in my opinion. 
[07:51:31] <lisp123> (values) returns nil
[07:51:33] <jgart> not returning a nil to the repl stdout I mean
[07:51:38] <jgart> lisp123, oh ok
[07:51:59] <lisp123> sorry i didn't mean REPL, just generally. no idea actually but that's something to play around with
[07:52:13] <beach> lisp123: (values) does not return NIL.
[07:52:17] <mfiano> (values) doesn't return NIL. It's just that any lack of a value can only be tested with the bottom type.
[07:52:17] <lisp123> beach: agree
[07:52:37] <lisp123> Today I learned something new
[07:52:55] <jgart> mfiano, not sure what you mean by "the bottom type"
[07:53:14] <jgart> can you unpack that slightly
[07:53:23] <mfiano> I suppose type theory isn't a good subject for #clschool.
[07:53:25] <jgart> ? it would be much appreciated
[07:53:33] <mfiano> NIL = bottom type. T = top type.
[07:53:35] <jgart> I know some type theory
[07:53:38] <lisp123> http://www.cs.yale.edu/homes/dvm/nil.html unrelated but related
[07:53:54] <jgart> mfiano, Oh didn't know that one
[07:53:59] * jgart TIL
[07:54:31] <mfiano> clhs 1.4.1.4.4
[07:54:44] <mfiano> i hope i remembered that section right from yesterday
[07:55:13] <mfiano> Yes, I did
[08:03:37] <lisp123> I'm off. Flying home to Australia in a couple of days, so you will see me in a different timezone in the future ;) 
[08:03:43] <lisp123> See you from the other side of the world!
[08:03:55] <beach> Have a nice trip.
[08:04:03] <lisp123> Thanks!
[08:04:07] *** Quits: lisp123 (~lisp123@91.74.78.188) (Quit: Leaving...)
[08:08:58] <White_Flame> well, (let ((a (values))) ...) does bind A to NIL, which is how it handles no value
[08:09:09] <White_Flame> but VALUES didn't return it ;)
[08:09:43] <White_Flame> (implementation-wise it likely did set the return value to NIL and flagging the count of values to 0, so the caller can just grab the primary value easily)
[08:16:12] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[08:22:49] <beach> That's what I do in SICL.
[08:32:43] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[08:33:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[09:09:49] *** Joins: eugercek (~user@user/eugercek)
[09:47:34] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[09:57:42] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[10:00:42] *** Quits: dre (~dre@101.191.49.59) (Ping timeout: 272 seconds)
[10:18:17] *** Joins: silasfox (~sbv@p200300cec729c70026ec076abc067478.dip0.t-ipconnect.de)
[10:28:08] *** Joins: tewi (~tewi@apn-95-41-167-165.dynamic.gprs.plus.pl)
[11:31:52] *** Joins: shka (~herr@109.231.3.55)
[12:10:05] *** Joins: ilmu3 (~ilmu@176.76.240.159)
[12:13:42] *** Quits: ilmu2 (~ilmu@176.76.241.151) (Ping timeout: 272 seconds)
[12:36:48] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[12:37:31] *** Joins: minion (~minion@common-lisp.net)
[14:33:14] *** Joins: pjb (~pjb@user/pjb)
[14:47:51] *** Joins: treflip (~user@user/treflip)
[15:06:09] *** Joins: random-nick (~random-ni@87.116.179.129)
[15:07:08] *** Quits: random-nick (~random-ni@87.116.179.129) (Client Quit)
[15:09:08] *** Quits: ilmu3 (~ilmu@176.76.240.159) (Ping timeout: 272 seconds)
[15:20:55] *** Joins: ilmu3 (~ilmu@141.255.215.61)
[15:53:31] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 256 seconds)
[16:03:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:04:37] *** Joins: random-nick (~random-ni@87.116.167.125)
[16:19:12] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[16:23:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[16:48:56] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:58:05] *** Joins: Bike (~Glossina@71.69.170.70)
[17:16:27] *** Quits: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se) (Remote host closed the connection)
[17:16:51] *** Joins: skeemer (~skeemer@h-158-174-23-219.NA.cust.bahnhof.se)
[18:29:24] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:31:34] *** Joins: aeth (~aeth@user/aeth)
[18:39:24] *** Quits: ilmu3 (~ilmu@141.255.215.61) (Ping timeout: 272 seconds)
[18:51:18] *** Joins: ilmu3 (~ilmu@176.76.240.159)
[18:57:54] *** Joins: thrig (~thrig@207.108.197.156)
[18:59:40] <lagash> Finally got around to getting an offline copy of the HyperSpec easily accessible to Emacs/Sly :)
[19:00:49] <thrig> I wget-scrapped it years ago (then I learned there's an OS package for it)
[19:09:00] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:11:53] *** zagura is now known as ArchiwumIPN
[19:11:55] *** ArchiwumIPN is now known as zagura
[19:29:11] *** Joins: jealousmonk (~user@user/jealousmonk)
[19:29:21] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[19:30:56] <lagash> thrig: OS package? In Debian, perhaps?
[19:31:15] <thrig> OpenBSD
[20:29:28] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[20:34:54] <kagevf> being able to lookup the hyperspec from emacs is really nice :)
[20:42:17] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[21:26:55] *** Joins: Oladon (~olad@98.43.81.226)
[21:48:38] *** Quits: silasfox (~sbv@p200300cec729c70026ec076abc067478.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[22:00:00] <jgart> Has anybody tried this? https://gitlab.com/nonguix/nonguix/-/blob/master/nongnu/packages/emacs.scm#L26
[22:00:14] <jgart> "Offline Common Lisp HyperSpec"
[22:01:23] <rotateq> jgart: I've downloaded the HyperSpec and linked the directory. ^^ Works well.
[22:03:44] <jgart> rotateq, hmmm I don't think my history goes that far back in this room
[22:03:49] <jgart> Is anybody using roswell? What are the major perks over just using quicklisp?
[22:10:54] <rotateq> no it's literally available via the lispworks site. 15MB of nearly pure HTML ^^
[22:13:01] *** Joins: eugercek (~user@user/eugercek)
[22:16:26] <bremner> there is a downloader package called "hyperspec" in Debian
[22:40:13] <jgart> bremner, ah cool
[22:40:23] <jgart> didn't know about that one TIL
[22:40:25] <jgart> thnx
[22:42:56] <jgart> does anyone know how to set the upload file size limit in hunchentoot? See here for more context: https://github.com/fukamachi/ningle/issues/39
[22:43:09] <jgart> Ignore the confusion with the setting being in ningle
[22:43:26] <jgart> fukamachi > Perhaps Hunchentoot handles POST content naively, and it puts all data on memory.
[22:44:18] <jgart> What are the ways that I can mitigate the above issue described by fukamachi with hunchentoot?
[22:53:55] <kagevf> jgart: IDK, only info I know about are the hunchentoot docs + the actual source code. I've looked at the source code, and from what I've seen it's well written and easy to follow. 
[22:56:27] *** Quits: treflip (~user@user/treflip) (Quit: good night)
[23:07:25] <jgart> I think I need help understanding conceptually what to do to allow hunchentoot to upload large files without crashing. I can read the docs (which I have scanned them for options to set, etc...) but the docs don't show/explain the concept of what I need to achieve for this to happen.
[23:08:01] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:11:52] <jgart> woo does the "right thing" out of the box with regards to large file uploads but I would like to achieve the same with hunchentoot
[23:12:53] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:13:04] <jgart> maybe it's not a trivial variable to set and why woo exists? don't know
[23:15:05] <jgart> s/partly why woo decided to make the defaults like flask (flask (python) handles large files without extra configuration)
[23:16:26] <jgart> i.e. flask (and woo) doesn't handle POST content naively, and puts all data in memory.  
[23:22:51] <kagevf> jgart: does woo run on top of hunchentoot? 
[23:23:03] <jgart> woo is a different server altogether
[23:23:40] <jgart> see the benchmarks here: https://github.com/fukamachi/woo/blob/master/images/benchmark.png
[23:24:56] <jgart> It has faster requests per second than nodejs and go (c = 100)
[23:25:06] <jgart> If I interpreted that chart correctly
[23:26:18] <kagevf> I see
[23:27:03] <jgart> ningle uses Clack which is a server interface over hunchentoot, woo, etc...
[23:27:14] <kagevf> ah, ok
[23:27:17] <jgart> other CL servers
[23:27:28] <jgart> that I haven't learned about yet
[23:27:40] <jgart> I've just tried hunchentoot and woo
[23:28:30] <kagevf> I've only used hunchentoot 
[23:28:51] <jgart> hunchentoot requires you to know what you're doing with your server. It is less opinionated unlike woo.
[23:29:09] <kagevf> in what way?
[23:30:46] <jgart> woo handles large file uploads without extra configuration. hunchentoot " handles POST content naively, and puts all data in memory." (fukamachi)    
[23:31:38] <kagevf> what size files are you seeing issues with?
[23:31:52] <jgart> 600MB
[23:32:00] <jgart> csv file
[23:32:11] <kagevf> hmmm
[23:32:13] <jgart> maybe the file becomes larger after decoding
[23:32:27] <jgart> and it throws it into memory and blows up
[23:33:08] <jgart> There is a backtrace here of that you can see: https://github.com/fukamachi/ningle/issues/39#issue-1139548574
[23:33:30] <jgart> note, the issue is not with ningle but with hunchentoot
[23:33:43] <jgart> I didn't know that when I posted that issue
[23:34:44] <jgart> hunchentoot failed that time with just 334.2MB
[23:35:18] <jgart> It's not a matter of just setting `sbcl --dynamic-space-size 6Gb`
[23:36:03] <jgart> hunchentoot still fails to upload a file of that size even after setting `sbcl --dynamic-space-size 6Gb`
[23:36:37] <kagevf> I thought I was able to upload some photos that were bigger than your CSV but I can't remember where they went
[23:36:48] <kagevf> trying to track them down ...
[23:37:00] <jgart> Do you happen to have the hunchentoot settins you used?
[23:37:02] <jgart> THNX
[23:37:12] <jgart> s/settins/settings
[23:37:51] <jgart> I'm wondering if setting *tmp-directory* dynamic variable would just fix it.
[23:38:16] <kagevf> I don't think I changed anything
[23:38:49] <jgart> Not sure if that is set by default but maybe that will store the data on disk instead of memory?
[23:39:25] <jgart> From the hunchentoot docs: > By default, all sessions are stored in a global alist in memory.
[23:40:50] <jgart> Is there a way to stream the upload of the file byte by byte? Still trying to conceptualize what that means in my use case with the tools I have in CL.
[23:41:18] <kagevf> ok, I can't find where hunchentoot put those files, but all I did was run the little test web app that's in the test folder and it has a file upload thing and that's all I used
[23:42:06] <jgart> Ideally what I'd like to do is to incrementally upload the large csv file byte by byte run csv checks in the backend part and stream the results back to the browser.
[23:42:09] <kagevf> it's easy to stand-up and use so maybe give that a try if only for the fact there won't be any other add-ons that might be causing any interference
[23:42:35] <jgart> OK, I'll try running that example app with my large files
[23:42:44] <kagevf> yeah
[23:42:45] <jgart> thnx
[23:43:11] <kagevf> as far as streaming, that of course is possible in CL, it's just a matter of how the data over HTTP is hitting the endpoint
[23:44:04] <jgart> "how the data over HTTP is hitting the endpoint" can you expound on that a bit more in this context? It would be much appreciated
[23:44:06] <kagevf> I'm not sure if a browser's file component chunks stuff out or not ... 
[23:44:32] <jgart> How would you suggest I find that out?
[23:44:46] <jgart> Some docs I can read somewhere?
[23:45:13] <kagevf> jgart: I would start with the mozilla docs on the html file element
[23:45:23] <jgart> Is this the test file I should try? https://github.com/edicl/hunchentoot/blob/master/test/script.lisp
[23:45:39] <kagevf> and be on the look out as to whether it chunks out or otherwise streams the data or not
[23:45:56] <jgart> this one? https://developer.mozilla.org/en-US/docs/Web/API/File
[23:46:15] <kagevf> that looks right for the mozilla doc
[23:46:18] <jgart> or were you thinking of a different doc
[23:46:20] <jgart> ok
[23:46:21] <jgart> thnx
[23:50:51] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[23:52:37] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:54:26] <kagevf> jgart: check out this part of the hunchentoot documentation; it covers the test web site that comes with the source code: https://edicl.github.io/hunchentoot/#teen-age
