[00:19:40] *** Quits: japhb (~geoff@mugs/japhb) (Quit: leaving)
[00:26:32] *** Joins: japhb (~geoff@mugs/japhb)
[01:07:00] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:44:48] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[01:58:10] *** Quits: archenoth (~archenoth@S0106889e6827f474.cg.shawcable.net) (Quit: Leaving)
[02:02:57] *** Joins: archenoth (~archenoth@s0106889e6827f474.cg.shawcable.net)
[02:33:48] <[Coke]> I'd run zef with --verbose
[02:34:15] <[Coke]> also, what version of raku and zef do you have?
[02:43:02] <japhb> [Coke]: See also https://logs.liz.nl/red/2021-07-20.html
[03:02:57] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[03:02:57] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[03:03:09] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[03:04:42] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[03:24:24] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[03:52:00] <SmokeMachine> [Coke]: sorry, I’m away from keyboard now, but here are some more details: https://github.com/ugexe/zef/issues/406
[04:24:24] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:24:24] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:25:41] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[04:27:08] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[04:32:37] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:34:13] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:35:58] <ugexe> SmokeMachine: seems liek a rakudo regression
[04:37:57] <raydiak> I can reproduce, latest zef does indeed seem to be broken on current rakudo HEAD
[04:38:56] <raydiak> as far as I can tell, the commonality seems to be that modules with dependencies fail, while modules with an empty depends array install successfully
[04:43:24] <raydiak> I'm trying to hunt it down to something easily bisected, but here is a stack trace: https://gist.github.com/raydiak/df9f588424f9f24ed423c62a1d74d963
[04:53:16] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 268 seconds)
[04:53:18] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 258 seconds)
[05:01:04] <raydiak> bisectable6: old=2021.06 new=HEAD ((),()).sort
[05:01:06] <bisectable6> raydiak, Bisecting by output (old=2021.06 new=50bd171) because on both starting points the exit code is 1
[05:01:10] <bisectable6> raydiak, bisect log: https://gist.github.com/9110e2118d981d434cacaa3500eb5852
[05:01:10] <bisectable6> raydiak, (2021-07-20) https://github.com/rakudo/rakudo/commit/50bd1717c3a7c43e2467787eca0bc91a28933fb4
[05:02:07] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[05:02:13] <raydiak> bisectable6: ((),()).sort
[05:02:14] <bisectable6> raydiak, Will bisect the whole range automagically because no endpoints were provided, hang tight
[05:02:35] <bisectable6> raydiak, Output on all releases: https://gist.github.com/100c8775889895cb0eaf6d1827afd07b
[05:02:37] <bisectable6> raydiak, Bisecting by output (old=2021.06 new=50bd171) because on both starting points the exit code is 1
[05:02:41] <bisectable6> raydiak, bisect log: https://gist.github.com/141e25e53223bdf91cfb4d4dbd10c6be
[05:02:41] <bisectable6> raydiak, (2021-07-20) https://github.com/rakudo/rakudo/commit/50bd1717c3a7c43e2467787eca0bc91a28933fb4
[05:02:42] <bisectable6> raydiak, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 1
[05:03:05] <bisectable6> raydiak, bisect log: https://gist.github.com/57f73dd81ecc40ac7a9905be4cee655d
[05:03:05] <bisectable6> raydiak, (2019-04-09) https://github.com/rakudo/rakudo/commit/a21cf6ae0b36ca69fad2db591e6d7107b4a6ba04
[05:03:06] <bisectable6> raydiak, Bisecting by exit code (old=2018.03 new=2018.04.1). Old exit code: 0
[05:03:27] <bisectable6> raydiak, bisect log: https://gist.github.com/3349cf72360c6bfba904b816855354a3
[05:03:27] <bisectable6> raydiak, (2018-03-31) https://github.com/rakudo/rakudo/commit/126d8a843a7c26a0c62388a404f60921aef23419
[05:03:35] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[05:03:38] <bisectable6> raydiak, ⚠ New output detected, please review the results manually
[05:03:39] <bisectable6> raydiak, Output on all releases and bisected commits: https://gist.github.com/bf447db122fd449d8fd379123754dc4d
[05:05:50] <raydiak> um, hm...that construct has thrown one weird error or another since 2018.04?
[05:06:35] <ugexe> its definitely that commit though
[05:07:05] <raydiak> right...I guess the question then is why .dist.api is now always `()` at https://github.com/ugexe/zef/blob/master/lib/Zef/Repository.rakumod#L149
[05:09:33] <raydiak> that's the line triggering the error. yes the message changed with that recent cmp optimization, but that doesn't explain why it wasn't manifesting the other errors before, does it?
[05:24:08] <raydiak> bisectable6: say () cmp ()
[05:24:09] <bisectable6> raydiak, Will bisect the whole range automagically because no endpoints were provided, hang tight
[05:24:29] <bisectable6> raydiak, Output on all releases: https://gist.github.com/1c14ed74b5f258d224c31c5825be8405
[05:24:31] <bisectable6> raydiak, Bisecting by exit code (old=2021.06 new=50bd171). Old exit code: 1
[05:24:35] <bisectable6> raydiak, bisect log: https://gist.github.com/4e51187c6ce56e9fce001141da51ef21
[05:24:35] <bisectable6> raydiak, (2021-07-20) https://github.com/rakudo/rakudo/commit/50bd1717c3a7c43e2467787eca0bc91a28933fb4
[05:24:37] <bisectable6> raydiak, Bisecting by output (old=2019.03.1 new=2019.07.1) because on both starting points the exit code is 1
[05:24:59] <bisectable6> raydiak, bisect log: https://gist.github.com/e8f3f0630348c7de198287f3d27b8f94
[05:25:00] <bisectable6> raydiak, (2019-04-09) https://github.com/rakudo/rakudo/commit/a21cf6ae0b36ca69fad2db591e6d7107b4a6ba04
[05:25:02] <bisectable6> raydiak, Bisecting by exit code (old=2018.03 new=2018.04.1). Old exit code: 0
[05:25:22] <bisectable6> raydiak, bisect log: https://gist.github.com/99d89588d9b038e5fc9574e85690ea70
[05:25:22] <bisectable6> raydiak, (2018-03-31) https://github.com/rakudo/rakudo/commit/126d8a843a7c26a0c62388a404f60921aef23419
[05:25:33] <bisectable6> raydiak, ⚠ New output detected, please review the results manually
[05:25:34] <bisectable6> raydiak, Output on all releases and bisected commits: https://gist.github.com/73132247186e3d78ab639cda5c9c6a4c
[05:42:10] <raydiak> apparently all the () in zef aren't anything new. still don't get why it wasn't triggering the old errors before, but here's what I reported: https://github.com/rakudo/rakudo/issues/4471
[05:42:40] *** Quits: Doc_Holliwood (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[06:00:29] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[06:01:52] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab722.dynamic.kabel-deutschland.de)
[06:03:59] <justsomeguy> Hi #raku. I just read through a few dozen examples of different programming tasks on rosettacode and noticed that raku is consistently the most expressive language among all of the examples listed. That's pretty impressive.
[06:11:21] <raydiak> hello, justsomeguy. wide dynamic range of expression was a core concept of the design from the very start, and an enormous amount of work has gone into making it a useful reality
[06:11:30] <raydiak> so thanks for noticing :)
[06:19:57] <justsomeguy> :D
[07:01:56] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[07:01:56] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[07:02:29] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[07:02:56] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:41:23] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.0.1)
[08:41:24] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: greppable6 (~gre-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[08:41:24] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:41:24] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:41:24] *** Quits: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu) (Read error: Connection reset by peer)
[08:41:24] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[08:41:24] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:24] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[08:41:49] *** Joins: benchable6 (~ben-able@ns306169.ip-94-23-219.eu)
[08:41:49] *** Joins: unicodable6 (~uni-able@ns306169.ip-94-23-219.eu)
[08:41:53] *** Joins: coverable6 (~cov-able@ns306169.ip-94-23-219.eu)
[08:41:55] *** Joins: quotable6 (~quo-able@ns306169.ip-94-23-219.eu)
[08:42:10] *** Joins: committable6 (~com-able@ns306169.ip-94-23-219.eu)
[08:42:33] *** Joins: tellable6 (~tel-able@ns306169.ip-94-23-219.eu)
[08:42:55] *** Joins: greppable6 (~gre-able@ns306169.ip-94-23-219.eu)
[08:43:31] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[08:43:32] *** Joins: statisfiable6 (~sta-able@ns306169.ip-94-23-219.eu)
[08:43:37] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[08:43:44] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[08:43:48] *** Joins: shareable6 (~sha-able@ns306169.ip-94-23-219.eu)
[08:43:55] *** Joins: sourceable6 (~sou-able@ns306169.ip-94-23-219.eu)
[08:43:57] *** Joins: bloatable6 (~blo-able@ns306169.ip-94-23-219.eu)
[08:43:59] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[08:44:02] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:44:24] *** Joins: nativecallable6 (~nat-able@ns306169.ip-94-23-219.eu)
[08:44:31] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[08:44:34] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:35:12] *** Joins: Doc_Holliwood (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de)
[09:43:40] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Remote host closed the connection)
[09:44:02] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[09:54:09] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[09:57:35] *** Joins: Doc_Holliwould (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de)
[10:01:19] *** Quits: Doc_Holliwood (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[10:17:01] *** Joins: frost (~frost@59.71.241.179)
[10:32:40] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:35:34] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:55:59] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:08:26] *** Quits: MasterDuke (~MasterDuk@176.248.62.150) (Quit: Ping timeout (120 seconds))
[11:11:02] *** Joins: ufobat_ (~martin@dynamic-077-009-071-131.77.9.pool.telefonica.de)
[11:28:40] *** Joins: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de)
[11:33:03] *** Joins: ufobat__ (~martin@dynamic-077-004-170-033.77.4.pool.telefonica.de)
[11:36:44] *** Quits: ufobat_ (~martin@dynamic-077-009-071-131.77.9.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:45:54] *** Quits: frost (~frost@59.71.241.179) (Ping timeout: 252 seconds)
[11:46:59] *** Joins: frost (~frost@59.71.241.179)
[11:55:06] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:10:57] <mykhal> is there some .comb etymology story? i always think of combinations ...
[12:17:08] *** Joins: Oshawott (~archenoth@s0106889e6827f474.cg.shawcable.net)
[12:17:34] <moon-child> when you pull a comb through your hair, it separates it into distinct strands
[12:17:53] <moon-child> and 'strands' are the name of moarvm's indirect string representation
[12:18:26] <mykhal> moon-child: ok, that was another common item missing in my en dictionary
[12:18:55] <mykhal> .. vocabulary
[12:19:13] <tadzik> .comb predates moarvm quite a lot, but the strands still fit :)
[12:19:41] *** Joins: dakkar (~dakkar@home.thenautilus.net)
[12:19:54] <moon-child> yeah
[12:20:00] *** Quits: archenoth (~archenoth@s0106889e6827f474.cg.shawcable.net) (Ping timeout: 252 seconds)
[12:20:01] <moon-child> cf 'rope', another 'fat' string type
[12:20:36] <moon-child> hmm, what's the difference between string and thread?
[12:22:18] * mykhal does not need combs almost at all, already
[12:33:24] *** Joins: MasterDuke (~MasterDuk@176.248.62.150)
[12:36:21] *** Quits: MasterDuke (~MasterDuk@176.248.62.150) (Client Quit)
[12:56:17] *** Quits: Doc_Holliwould (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[13:20:26] *** Joins: tejr (~tejr@user/tejr)
[13:28:07] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[13:28:18] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[13:34:21] *** Joins: MasterDuke (~MasterDuk@176.248.62.150)
[13:57:08] <mykhal> moon-child: seem to have similar origin, cord that has to be strong, vs cord madde by twisting (probably to be strong, also)
[13:57:48] <mykhal> (just reading at etymonline)
[14:03:41] <perlmaros> hi, how do i stack promises in raku? chaining via .then does not quite work as expected. I've compiled three examples - one in p5, one in javascript and one in raku - to illustrate my point. 
[14:03:43] <perlmaros> https://gist.github.com/maros/d9f5a8d1cc6d96f374f0c45e22e7ab0a
[14:05:33] <perlmaros> p5 (ugly, very verbose and requires cpan modules) and javascript behave as expected. raku immediately passes the new promise to the second chained then, instead of waiting for the resolution of the promise and passing only the result to the next then.
[14:17:46] *** Joins: Doc_Holliwould (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de)
[14:27:02] <perlmaros> (also see https://promisesaplus.com/#point-41 and https://promisesaplus.com/#point-49 also shows the excpected behaviour)
[14:35:07] <raydiak> I don't claim to have a ton of experience with promises, but I don't think 'return' does what you're expecting there. the second then receives a promise which is kept after the first then block has finished executing, not the promise you're returning from the first block. as far I can tell, any return in the then block causes its resulting promise to be broken instead of kept, and otherwise does...seemingly
[14:35:09] <raydiak> nothing?
[14:35:34] <raydiak> https://docs.rakulang.site/type/Promise#method_then is rather short on details
[14:36:29] <moon-child> perlmaros: http://sprunge.us/W7C1XK
[14:38:20] *** Quits: ufobat__ (~martin@dynamic-077-004-170-033.77.4.pool.telefonica.de) (Ping timeout: 258 seconds)
[14:40:19] <raydiak> https://docs.rakulang.site/language/concurrency#Promises has some more details. everywhere I see it used, the resulting value of then's promise is the last value in the block, but not actually returned by `return`
[14:42:51] <rba> raydiak: please always refer to docs.raku.org. rakulang.site is only for backup. 
[14:44:56] <lizmat> note that `return` returns from the surrounding *sub*, **NOT** from the block it is in
[14:45:20] <lizmat> `leave` has been specced for that, but nobody has implemented that yet
[14:45:26] <lizmat> m: leave
[14:45:26] <camelia> rakudo-moar efb3116a9: OUTPUT: «leave not yet implemented. Sorry.␤  in block <unit> at <tmp> line 1␤␤»
[14:47:46] <lizmat> perlmaros: remove the `return` from your example, and it seems to do what you want?
[14:49:22] <raydiak> rba: sorry, my mistake. I usually fix that before pasting, just forgot to this time. I always have to use rakulang.site because of comcast screwery. they have been completely unresponsive to my request on that, btw
[14:54:37] <perlmaros> raydiak/lizmat: removing the return clause gets rid of the exception, but i still only get the Promise object in the second then
[14:56:17] <raydiak> .then() creates its own entirely separate promise, so the second .then is getting the promise you're explicitly returning from the first one as the .result of the first .then's promise
[14:57:25] <perlmaros> raydiak: yes, the example from your paste works, but imho then blocks should be agnostic to the way they are invoked. so at least according to the promise a+ spec a new promise returned by the then block should NOT be passed directly to the next then, but only once it kept/broken
[15:00:16] <mykhal> what's a+ ?
[15:01:34] *** Joins: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se)
[15:01:53] <raydiak> the second block doesn't run until after the first one finishes running, which is what keeps its promise. its promise is kept with a .result value of the .in(2) promise you are explicitly creating. that could have just as well been "foobar" or any other value, you just happen to be handing it a promise. if you're looking for a 2 seond delay between the two, you could add a .then({sleep 2}) to the middle of the
[15:01:54] <raydiak> cain, for example
[15:02:37] *** Quits: dogbert11 (~dogbert@c83-251-249-247.bredband.tele2.se) (Ping timeout: 245 seconds)
[15:02:51] <rba> raydiak: got it. Strange thing thats it‘s still not working.
[15:02:58] <raydiak> or moon-child++'s solution in that paste was to await on the promise you're passing along, then call .result.result to get the result from the promise you created in the second block, which itself was the result of the first .then block's promise
[15:05:28] <raydiak> rba: it turns out that it's a bizarre symptom of comcast doing a really weird way of blocking a site. in my research there were tons of legitimate sites complaining about being impacted by this. comcast is just doing their usual craptastic job of...pretty much everything
[15:07:36] <perlmaros> mykhal: the promise a+ spec is followed by many languages/modules https://promisesaplus.com
[15:09:40] <perlmaros> and afaict the second block is invoked imediately - so in my case it does not wait 2 seconds. only if i run await on the promise i got there
[15:11:26] <perlmaros> i know that this can be solved using sleep/await/... but it feels kind of akward and adds this extra complexity to the code
[15:12:55] <raydiak> that's what I'm saying. it runs directly after the first block, and receives the promise implicitly created and kept by .then(), not the promise you're explicitly creating...that one ends up as the value in the first block's promise's .result
[15:17:18] <perlmaros> in the javascript and perl examples the then block is always called with the result value - regardless if if came from an previous promise, or if it came from the original keep/resolve. in raku it behaves differently - raku' behaviour leads to more complex code because my then code needs to know how it was invoked, which makes chaining promise harder
[15:18:12] <perlmaros> and personally i don't see an advantage to returning the raw value here.
[15:21:31] <raydiak> yes, raku gives you the promise itself, not the result of the promise. you have to call .result yourself. I'd imagine the advantage is that you can also check the .status/.cause kind of stuff. but like I said, I'm definitely no expert in this area
[15:22:41] <raydiak> e.g. if the first promise throws an exception, the second one is still called and can check for that and respond appropriately
[15:35:07] <lizmat> channeling jnthn: Raku doesn't do the "unwrapping"/"flattening" thing that JavaScript Promises do by design. I consider the JavaScript way a mistake.
[15:35:23] <lizmat> While we borrowed the name Promise because it's more Raku-ish than the .Net Task<T>, semantically we're far closer to the latter.
[15:35:30] <lizmat> </channeling>
[15:37:18] *** Joins: dogbert11 (~dogbert@c83-251-249-247.bredband.tele2.se)
[15:38:44] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Ping timeout: 252 seconds)
[15:39:06] <raydiak> I recall it being a thoroughly-considered design, but any specifics as to why our way is better? perlmaros is saying it means he now has to write `.then({do-stuff(.result)})` instead of `.then(&do-stuff)` if do-stuff() is just a normal routine expecting a normal value instead of a promise
[15:39:39] <raydiak> the only one I could think of was exception handling, but I don't really use promises myself
[15:43:47] *** Joins: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se)
[15:46:34] *** Quits: dogbert11 (~dogbert@c83-251-249-247.bredband.tele2.se) (Ping timeout: 258 seconds)
[15:55:03] *** Joins: ufobat__ (~martin@dynamic-077-004-170-033.77.4.pool.telefonica.de)
[16:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:35:15] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[16:58:03] <mykhal> m: say 1.:<->;  say (2, 3)>>.&(-*);  say (2, 3)>>.:<->
[16:58:03] <camelia> rakudo-moar 6b6459f33: OUTPUT: «-1␤Type check failed in binding to parameter '&code'; expected Callable but got Int (2)␤  in block <unit> at <tmp> line 1␤␤(-2 -3)␤»
[17:01:27] <mykhal> .. 2nd a 3rd outs are switched !?
[17:02:37] <mykhal> .. (not related to (2, 3) lists)
[17:03:18] <mykhal> m: say (1..5)>>.:<->
[17:03:18] <camelia> rakudo-moar 4f1908757: OUTPUT: «Type check failed in binding to parameter '&code'; expected Callable but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»
[17:04:13] <mykhal> https://docs.raku.org/language/operators#methodop_.:%3Cprefix_operator%3E
[17:08:47] *** Joins: ecocode_ (uid500572@id-500572.tooting.irccloud.com)
[17:10:08] <mykhal> m: say (2, 3)>>.: *.:<->   # i thught it wants me to do it like this, but not
[17:10:09] <camelia> rakudo-moar 4f1908757: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed postfix␤at <tmp>:1␤------> 3say (2, 3)>>.:7⏏5 *.:<->   # i thught it wants me to do i␤    expecting any of:␤        colon pair␤»
[17:21:08] <ugexe> promise flattening or whatever breaks parametric polymorphism
[17:21:46] <ugexe> i dunno if that justifies anything, just a point
[17:58:12] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[18:02:33] <Altreus> multi sub do-stuff(Promise \p) { do-stuff(p.result) }  # This is why I dislike the multi keyword
[18:03:00] <Altreus> You shouldn't have to change the signature of the original do-stuff just to provide an alternative. In fact, there's no guarantee that you CAN
[18:03:30] <Altreus> for a language that can infer what * means it's surprising we couldn't infer whether a sub is multi or not
[18:12:38] <mykhal> m: say ( "uniname" (elem) $_  for ("a".^method_names, "a".^methods>>.gist) )
[18:12:38] <camelia> rakudo-moar f1959972d: OUTPUT: «(True False)␤»
[18:17:14] <mykhal> m: say "a".^method_names (-) "a".^methods>>.gist
[18:17:15] <camelia> rakudo-moar f1959972d: OUTPUT: «Set(BUILDALL WORDS_AUTODEREF naive-word-wrapper ord ords unimatch uniname uninames uniparse uniprop uniprops unival univals)␤»
[18:24:08] <mykhal> hm, https://github.com/rakudo/rakudo/issues/4207
[18:24:24] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[18:49:20] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[18:50:41] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:50:41] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[19:50:41] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[19:51:40] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[19:53:18] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[19:56:53] *** Quits: patrickb (~patrickb@pd956be1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:11:07] <Altreus> I wonder why method_names uses an underscore and not a dash
[20:12:52] <MasterDuke> the meta-methods all use underscore. i think it's just convention to show they're slightly different than regular methods
[20:13:17] <Altreus> oh. I expected something like, they're implemented in C and it's easier to stick to C's syntax requirements
[20:13:54] <Altreus> or maybe, they were written before we decided to allow - in identifiers!
[20:14:05] <Altreus> that would be cool etymology
[20:18:06] <mykhal> dunno too, just found plenty new methods "accidentally" in Comma
[20:23:34] <Altreus> a handy tool!
[20:24:52] *** Quits: Doc_Holliwould (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[20:26:07] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-231.092.218.pools.vodafone-ip.de)
[20:34:59] *** Quits: ufobat__ (~martin@dynamic-077-004-170-033.77.4.pool.telefonica.de) (Ping timeout: 268 seconds)
[20:44:57] <ugexe> so having looked into this promise thing more... my impression is some people in javascript are regretting their decision with the rise in popularity of typescript
[20:45:46] <Altreus> This sounds divisive
[20:46:17] <ugexe> the non flattening implementation was deemed too language and type theoryist, hence why typescript rising popularity is exposing this change in sentiment
[20:46:35] <ugexe> at the time it was deemed^
[20:47:23] <Altreus> My understanding is that JS will automatically unpack a promise for a .then function?
[20:47:30] <ugexe> yeah
[20:47:38] <Altreus> I can see the appeal
[20:48:09] <Altreus> I can also see how perl-family language theorycrafters would prefer to honour the edge cases than make the common cases more convenient
[21:08:24] *** Quits: ecocode_ (uid500572@id-500572.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[21:13:38] <ugexe> damned if you do and damned if you don't
[21:13:47] *** Quits: dakkar (~dakkar@home.thenautilus.net) (Ping timeout: 252 seconds)
[21:14:37] <Altreus> programming is hard and then they added async
[21:24:36] <tonyo> typescript handles promises just fine
[21:25:10] <tonyo> unpacking can happen without the .then syntax
[21:30:06] <tonyo> the promise thing is why i was ostracized from node
[21:37:05] <Altreus> I'm blessed that the fact I don't understand has no bearing on my professional or personal programming journey
[21:41:24] <tonyo> there are more useful things to know
[21:41:31] <tonyo> than how promises work
[21:53:15] <Altreus> I was referring specifically to the issues, or lack thereof, around JS promises as seen through Typescript
[22:13:47] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:13:47] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:32:47] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:48:37] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-231.092.218.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[22:49:04] *** Joins: Doc_Holliwood (~holli@ipservice-092-218-232-231.092.218.pools.vodafone-ip.de)
[23:31:38] *** Joins: ecocode_ (uid500572@id-500572.tooting.irccloud.com)
[23:55:23] *** Quits: Doc_Holliwood (~holli@ipservice-092-218-232-231.092.218.pools.vodafone-ip.de) (Ping timeout: 255 seconds)
[23:56:06] *** Joins: Doc_Holliwood (~holli@dslb-084-059-122-215.084.059.pools.vodafone-ip.de)
[23:58:14] *** Quits: dogbert17 (~dogbert@c83-251-249-247.bredband.tele2.se) (Ping timeout: 252 seconds)
