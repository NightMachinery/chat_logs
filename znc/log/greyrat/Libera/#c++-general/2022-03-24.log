[00:05:01] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[00:12:08] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Remote host closed the connection)
[00:12:25] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[00:16:20] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:21:02] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[00:21:47] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:21:52] *** Quits: andreasbuhr (~quassel@p549db93e.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:26:52] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:f871:9008:e595:ad5a)
[00:26:52] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:f871:9008:e595:ad5a) (Changing host)
[00:26:52] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:28:42] <rpav> testing with ccache is weirdly like using godbolt
[00:29:19] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[00:31:35] *** Quits: Roughy (~mdaw45ns@user/roughy) (Read error: No route to host)
[00:34:16] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[00:34:32] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:daeb:9226:aa3:3abd)
[00:34:33] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:daeb:9226:aa3:3abd) (Changing host)
[00:34:33] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:42:20] *** Joins: gehn (~gehn@user/gehn)
[00:47:43] <rpav> why is it still annoyingly many lines of code to iterate every line in a file
[00:48:15] <TinoDidriksen> It's not? ifstream, string, getline, done...
[00:48:59] <rpav> that's annoyingly many lines, though i think you can hack it into one plus the first two fields of for(;;)
[00:50:03] <rpav> it should be something like `for(auto&& line : open("file") | each_line)`
[00:50:06] <TinoDidriksen> { ifstream file(__FILE__); string line; while (getline(file, line)) {} } // that's shorter than many scripting languages.
[00:50:07] <geordi>  
[00:50:18] <rpav> only super shitty ones
[00:51:00] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[00:53:16] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064) (Ping timeout: 245 seconds)
[00:56:04] *** Joins: Roughy (~mdaw45ns@user/roughy)
[00:58:22] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[00:58:38] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:58:40] *** Quits: LuckyFire_ (~LuckyFire@79.125.172.127) (Read error: Connection reset by peer)
[01:00:00] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f944:961e:33a0:8573)
[01:04:13] *** Quits: mint (~mint@46.159.204.49) (Quit: Leaving)
[01:09:02] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[01:09:07] *** Quits: adeliktas (~adeliktas@i59F5FF29.versanet.de) (Ping timeout: 260 seconds)
[01:09:45] *** Joins: adeliktas (~adeliktas@i59F5F0A1.versanet.de)
[01:11:44] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064)
[01:17:16] *** Joins: gehn (~gehn@user/gehn)
[01:18:49] *** Quits: magla (~gelignite@d53678fd.access.ecotel.net) (Quit: Stay safe!)
[01:18:53] <johnny> it would be nice if there were more convience methods that were just wrapping what's alreayd there, like.. read entire file
[01:19:33] <johnny> i forgot i wrote this.. it's maybe not a good idea tho..
[01:19:35] <johnny> ssd::Buffer temp_content((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
[01:19:50] <johnny> still had to open and close the file though
[01:21:15] *** Quits: adeliktas (~adeliktas@i59F5F0A1.versanet.de) (Ping timeout: 260 seconds)
[01:21:30] *** Joins: adeliktas (~adeliktas@i59F4DBCA.versanet.de)
[01:21:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f944:961e:33a0:8573) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:22:51] <PJBoy> if you really want a one-liner
[01:25:10] <PJBoy> oh I guess I don't have it written down
[01:25:10] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:25:59] <johnny> we're all programming in C--
[01:26:40] <PJBoy> but it was basically the same as what you did
[01:27:30] <PJBoy> or so I thought
[01:27:36] <johnny> everybody be talking about new feature x and new feature why.. but it feels like C++ would most benefit from better wrappers of what you can already do :(
[01:27:38] *** ravan_ is now known as ravan
[01:28:08] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:28:33] <rpav> johnny: well, yeah
[01:30:23] <johnny> any folks doing embedded stuff with arm? wht is actually in the gcc distributed by arm that's not available in regular gcc?
[01:30:41] <johnny> i've been just using the arm one because it was recommended, but i don't actualy know why
[01:31:04] <PJBoy> { string s = (stringstream() << ifstream(__FILE__).rdbuf()).str(); SHOW(s); }
[01:31:05] <geordi> s = #if !defined(GEORDI_PRELUDE) && !defined(__clang__) [+ 6 discarded lines]
[01:31:07] <PJBoy> there you go
[01:31:31] <johnny> SHOW()?
[01:31:40] <PJBoy> that's a geordi macro
[01:31:58] <PJBoy> { SHOW(x); } int x = 42;
[01:31:58] <geordi> x = 42
[01:32:05] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 250 seconds)
[01:32:08] <ville> yes these are real problems with c++...
[01:33:10] <PJBoy> I'm fairly sure that above snippet isn't supposed to work btw
[01:33:48] <PJBoy> << TYPE<decltype(stringstream() << ifstream(__FILE__).rdbuf())>
[01:33:49] <geordi> stringstream&&
[01:33:51] <johnny> the arm gcc is currently 10.3 ish as in gcc with watever makes this one different
[01:34:07] <PJBoy> oh, that got changed to an rvalue reference?
[01:34:24] <PJBoy> that's news to me
[01:34:31] <johnny> i didn't know pay attention the the rdbuf when i looked at it hmm
[01:34:37] <johnny> s/know//
[01:35:26] <ville> johnny: somehow i doubt there is anything, it's just that the manufacturers pick a version and then declare that the "supported" version
[01:36:09] <PJBoy> ifstream::rdbuf() gives you a filebuf which should hit overload 10 of https://en.cppreference.com/w/cpp/io/basic_ostream/operator_ltlt
[01:36:12] <johnny> i figured it had some patches that hadn't yet been accepted. reminds me that htere also used be a codesourcery fork that definitely did have patches that weren't upstream yet
[01:36:33] <PJBoy> so the return type should be ostream&, not stringstream&&
[01:36:50] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:37:55] <johnny> so what were you saying about fmtlib before?
[01:39:06] <johnny> lol.. i gave myself a chuckle remembering that dude yesterday.. to go from "quantum computing isn't real",  "encryption isn't real", and "the pandemic isn't real"
[01:39:52] <johnny> and in the meantime.. say "i got banned by doing the sam thing in another channel"
[01:41:15] <johnny> fmtlib is a nice little lib for me.. i accidentally wasted half a day reading qt sources for something fmtlib did out of the box
[01:43:07] *** Quits: kevr (~kevr@user/kevr) (Remote host closed the connection)
[01:43:25] *** Joins: kevr (~kevr@user/kevr)
[01:43:36] <johnny> at least i gotta use double-conversion in a real program, and then just drop it almost immediately
[01:43:51] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[01:44:09] <johnny> i even wrote integration into my build system for it :(
[01:44:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:45:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:46:08] <johnny> yesterday i learned of https://github.com/picolibc/picolibc
[01:46:38] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[01:47:20] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:47:35] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:53:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064) (Ping timeout: 240 seconds)
[01:56:35] <PJBoy> > Fix various __NEWLIB and __PICOLIBC macros; they were using a single leading underscore instead of two
[01:56:57] <PJBoy> wow, they doubled their UB
[01:57:43] <PJBoy> oh it's C
[01:57:52] <PJBoy> idk if that's reserved in C or not
[01:58:25] <johnny> it's not
[01:58:26] <ville> yes
[01:58:29] <johnny> oh it is?
[01:58:36] <johnny> i'd be surprised that keithp would do that?
[01:58:58] <ville> https://port70.net/~nsz/c/c11/n1570.html#7.1.3
[01:59:21] <ville> ...if you are the c library then you're supposed to use the reserved identifiers
[01:59:58] <johnny> yes
[02:00:03] <johnny> that was what was thinking
[02:00:27] <johnny> i mean after reading the specific wording
[02:01:02] <johnny> ville, why do you use that site rather than the official one?
[02:01:37] <ville> did the c people finally manage to get one up?
[02:02:05] <johnny> i thought they did.. but maybe i'm thinking of the C++ one instead
[02:02:26] <ville> there isn't an official c++ one either. iso sanctionaed that is
[02:02:31] <ville> sanctioned
[02:02:45] <johnny> aha.. i assumed open-std was it, but it's not then :)
[02:03:02] <johnny> http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2934.pdf for example this is what i thought was official, but i guess i didn't look close enough
[02:03:05] <ville> drafts aren't official iso standards
[02:03:16] <johnny> aha
[02:03:37] <ville> i don't use the pdfs because linking to specific parts in them may or may not work for people
[02:04:03] <johnny> indeed.. it's too bad that folks can just publish in pdf at all
[02:04:24] <johnny> i wonder who else outside of C/C++ do that
[02:04:36] <ville> where as that website works reasonably well, if someone wants to read their local pdf they at least get the section number
[02:05:00] <johnny> indeed.. any argument against pdf meant for online reading i support :)
[02:05:14] <ville> it's not quite as slick as eel.is of course
[02:05:46] <johnny> i was using the minimal-printf from mbed-os which is just slightly smaller than picolib's
[02:06:35] <johnny> althought that savings gets eaten up by the C++ libs i was playing with :(
[02:07:00] *** Quits: str0 (~str0@178.220.28.32) (Remote host closed the connection)
[02:09:16] *** Joins: markong (~kvirc@213.146.188.203)
[02:10:04] <PJBoy> oh that's supposed to be a C standard library?
[02:10:26] <PJBoy> well then it has the opposite problem of using far too many non-reserved identifiers
[02:10:31] <johnny> yes, it replaces the comonly used newlib/newlib-nano fo embedded devices
[02:11:32] <johnny> the document introducing it, if your'e interested https://keithp.com/picolibc/picolibc-2021-notes.pdf
[02:12:23] *** Joins: seninha (~seninha@user/seninha)
[02:13:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:13:37] <johnny> oh, i didn't realize the topic got updated to recommend godbolt now
[02:13:54] <ville> wanbox is broken after their update. web people
[02:14:48] <PJBoy> yup, ya hate to see it
[02:15:32] <PJBoy> and even on chrome where it works, it's just worse now
[02:20:08] <johnny> but why did you prefer it in the first place agani?
[02:20:10] <ville> sounds like they've "enhanced the user experience" succesfully then
[02:20:28] <ville> some liked it because of multiple file support
[02:20:49] *** Quits: robod34 (Username@79.113.200.158) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[02:20:57] <ville> i prefer http://coliru.stacked-crooked.com but that doesn't have multiple compilers
[02:21:54] <ville> well you can do clang++ and g++, but that's about it
[02:25:58] <Friithian> it is very weird doing c++ but with C and C-isms mixed in
[02:29:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064)
[02:32:01] *** Quits: paul424 (~tom@ip-5-172-233-166.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[02:33:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[02:36:27] <PJBoy> I preferred wandbox for its compiler support and multiple file support
[02:36:33] <PJBoy> both of which I made regular use of
[02:37:11] <PJBoy> I was just liked the interface in general, ctrl+enter to compile, was quick to change the various options, presentation was reasonable neat
[02:38:44] <PJBoy> in the new interface you have to click things twice and it has that zoomed in presentation
[02:40:31] <Raziel> PJBoy, why is it always the case that when a website or web-based platform changes their interface, it's always for the worse?
[02:41:05] * PJBoy tries to think of counter examples
[02:41:47] <johnny> i'm mostly happy with github's changes
[02:41:51] <Friithian> google+'s removal of the interface was good
[02:41:56] <Friithian> granted, they also removed the backend
[02:42:01] *** Quits: g0se (~goose@111.199.80.15) (Ping timeout: 256 seconds)
[02:42:18] <johnny> it's super neat to get function and variables references in the web interface for various python, js and other projects
[02:42:29] <johnny> it's a bit harder to do for C/C++ though
[02:43:50] <PJBoy> not too happy about github changes here
[02:44:13] <PJBoy> though not much to complain about either
[02:44:18] *** Joins: unyu (~pyon@user/pyon)
[02:44:19] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:28] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:28] *** ChanServ sets mode: +v npaperbot
[02:44:48] *** Joins: RazielZ (~Raziel@user/raziel)
[02:44:53] <PJBoy> yeah I got nothing
[02:45:00] <PJBoy> websites only ever get worse
[02:45:35] <PJBoy> that's why coliru's so good
[02:45:42] <PJBoy> it was clearly made in the 90s and never updated
[02:46:20] <Friithian> modern web is shit
[02:46:52] <PJBoy> even their doctype is HTML 4.0
[02:46:52] <ville> Raziel: because websites are simple to do. the projects run out of actual things to do, then you just have the design people making shit up to keep the pay checks rolling in
[02:47:21] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 252 seconds)
[02:47:26] <PJBoy> I actually agree with that
[02:47:32] <PJBoy> same with smartphone apps
[02:47:48] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 240 seconds)
[02:51:00] <ville> think of the whole fashion industry. basically the design people are that "but with web apps". cycling and rehashing the same shit acording to the latest trends for no apparent reason
[02:56:52] *** Joins: ferdna (~ferdna@user/ferdna)
[03:01:43] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 268 seconds)
[03:05:00] *** Quits: Tokamak (~Tokamak@172.58.191.33) (Ping timeout: 240 seconds)
[03:05:14] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:06:33] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[03:06:47] *** Joins: ivii (~ivan@user/ivii)
[03:09:45] *** Joins: Tokamak (~Tokamak@107.116.82.161)
[03:10:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:12:48] *** Joins: badone (~badone@209.132.189.136)
[03:15:48] *** Quits: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de) (Ping timeout: 240 seconds)
[03:27:16] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[03:28:04] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[03:31:04] *** Parts: lpapp (~lpapp@ec2-35-158-255-21.eu-central-1.compute.amazonaws.com) ()
[03:31:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:32:43] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[03:33:41] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[03:33:51] *** Parts: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) ()
[03:39:20] *** Quits: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628) (Ping timeout: 268 seconds)
[03:49:42] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[03:52:22] *** Quits: Cyp (~cyp@213.237.85.100) (Excess Flood)
[03:52:34] *** Quits: RazielZ (~Raziel@user/raziel) (Read error: Connection reset by peer)
[03:53:16] *** Joins: Cyp (~cyp@213.237.85.100)
[03:55:13] *** Joins: teepee (~teepee@openscad/teepee)
[03:56:05] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[03:56:24] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[04:01:16] *** Quits: nq (~nq@82.79.141.40) (Quit: Leaving)
[04:03:09] *** Joins: Raziel (~Raziel@user/raziel)
[04:06:24] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:07:28] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[04:08:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[04:11:19] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[04:16:00] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:18:30] *** Joins: horribleprogram (~user@user/horribleprogram)
[04:23:53] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[04:24:01] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:27:07] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[04:37:21] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[04:49:58] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:50:19] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[04:55:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[04:59:19] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[04:59:42] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[05:11:08] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 272 seconds)
[05:12:40] *** Joins: g0se (~goose@111.199.80.15)
[05:23:27] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[05:31:55] *** Joins: str0 (~str0@178.220.28.32)
[05:33:33] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:31a8:9a22:c955:556d)
[05:34:32] *** Joins: epony (epony@user/epony)
[05:35:14] <Guest19> template <typename T> T someclass::get() {Â  std::lock_guard<std::mutex> mylock(mtx); return memberVariable; }
[05:35:28] <Guest19> Hello, in above snippet, does the copy to T happen under lock as well?
[05:36:16] <PJBoy> yes, return values are initialised before any destructors execute
[05:36:44] <PJBoy> or you could say dtors don't execute until after the semicolon closing the return statement
[05:38:38] <Guest19> so you mean sequence is T = memberVariable; ~mylock;
[05:38:44] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:42:22] <Guest19> okay understood, thanks PJBoy!
[05:43:15] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[05:50:20] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:841d:14ca:11b1:4064) (Quit: Quit)
[05:53:14] <PJBoy> indeed
[05:53:15] <PJBoy> :)
[06:10:11] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:31a8:9a22:c955:556d) (Quit: Client closed)
[06:15:26] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[06:19:32] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[06:20:01] *** Joins: Youmu (uid129469@user/condy)
[06:32:11] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:34:19] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:36:21] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[06:40:38] *** Quits: xuxx (~xuxx@86.228.71.37.rev.sfr.net) (Ping timeout: 268 seconds)
[06:44:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:29] *** ChanServ sets mode: +v npaperbot
[06:46:06] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[06:47:06] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:00:38] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:03:28] *** Joins: Xardas (~Xardas@149.233.51.127)
[07:03:28] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:04:00] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:05:01] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:09:01] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:15:22] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[07:15:38] *** Joins: Inline__ (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de)
[07:15:44] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[07:17:49] *** Quits: Inline (~Inline@p200300cd4709ad00c6efe95d186eec52.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:24:40] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:30:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:31:05] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:37:16] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:41:54] *** Joins: smeso (~smeso@user/smeso)
[07:42:36] *** Quits: horribleprogram (~user@user/horribleprogram) (Ping timeout: 240 seconds)
[07:48:14] *** Joins: adeliktas0 (~adeliktas@i59F4D979.versanet.de)
[07:49:57] *** Quits: adeliktas (~adeliktas@i59F4DBCA.versanet.de) (Ping timeout: 240 seconds)
[07:49:57] *** adeliktas0 is now known as adeliktas
[07:54:23] *** Quits: str0 (~str0@178.220.28.32) (Quit: Leaving)
[07:59:10] *** Joins: paule32_ (~paul@nat-91-137-16-12.net.encoline.de)
[07:59:10] *** Quits: paule32_ (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[07:59:10] *** Joins: paule32_ (~paul@user/paule32)
[08:00:38] *** Joins: horribleprogram (~user@user/horribleprogram)
[08:01:13] *** Joins: paule32__ (~paul@nat-91-137-21-12.net.encoline.de)
[08:01:13] *** Quits: paule32__ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[08:01:13] *** Joins: paule32__ (~paul@user/paule32)
[08:02:45] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 256 seconds)
[08:04:12] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 240 seconds)
[08:05:04] *** Joins: paule32 (~paul@nat-91-137-16-12.net.encoline.de)
[08:05:05] *** Quits: paule32 (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[08:05:05] *** Joins: paule32 (~paul@user/paule32)
[08:06:17] *** Quits: horribleprogram (~user@user/horribleprogram) (Ping timeout: 240 seconds)
[08:07:01] *** Quits: paule32__ (~paul@user/paule32) (Ping timeout: 240 seconds)
[08:12:54] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[08:20:15] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[08:21:45] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:21:48] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[08:23:52] *** Quits: EdFletcher (~PKD@user/edfletcher) (Remote host closed the connection)
[08:26:25] *** Joins: horribleprogram (~user@user/horribleprogram)
[08:30:58] <hnOsmium0001[m]> does geordi have a C mode?
[08:32:09] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:43:47] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[08:49:11] *** Joins: paule32_ (~paul@nat-91-137-21-12.net.encoline.de)
[08:49:11] *** Quits: paule32_ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[08:49:11] *** Joins: paule32_ (~paul@user/paule32)
[08:52:48] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 272 seconds)
[08:55:06] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[09:09:03] *** Quits: jsbach (~jsbach@2a01:c23:61a1:e900:82f3:2db5:ad58:cd06) (Ping timeout: 252 seconds)
[09:16:45] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:6c75:c89d:916b:3b14)
[09:16:48] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:18:19] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:21:43] *** Joins: jsbach (~jsbach@2a01:c23:6503:2e00:b63b:c294:6c9:2b6a)
[09:23:51] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[09:24:16] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:27:28] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:35:45] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[09:35:55] *** Joins: ac_slater (~ac_slater@c-73-221-73-144.hsd1.wa.comcast.net)
[09:36:09] <ac_slater> hey guys, is it illegal to put signed and unsigned types in a union?
[09:43:46] <kalven> no
[09:44:26] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[09:45:53] <ac_slater> cool thanks kalven
[09:58:56] *** Joins: mint (~mint@85.174.200.135)
[10:01:52] <ac_slater> kalven: is this one of those "not against the rules but UB" things?
[10:04:01] <kalven> if you're asking: can I write to one member of a union and then read from another, the answer is no
[10:04:39] <ac_slater> I know how unions work (I think), so no, not asking that
[10:04:48] <ac_slater> thanks!
[10:06:19] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:08:45] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[10:13:14] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[10:16:58] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[10:17:20] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[10:25:32] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:27:07] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:27:14] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[10:28:02] <ac_slater> if I have a class template that lookes like `template<size_t N, size_t C> class foo { using someT = int; }`, is there an easy way to get `someT`? I was thinking `using someT = foo<0,0>::someT;` but that seems bad
[10:28:42] <ac_slater> I guess I can move someT out of the class
[10:29:33] *** Joins: dkdn (~dkdn@178.49.152.151)
[10:32:36] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:33:57] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[10:35:45] *** Quits: dkdn (~dkdn@178.49.152.151) (Ping timeout: 256 seconds)
[10:38:10] *** Joins: dkdn (~dkdn@178.49.152.151)
[10:43:23] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[10:43:59] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[10:44:20] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:29] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:29] *** ChanServ sets mode: +v npaperbot
[10:47:06] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:47:28] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[10:50:14] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:51:51] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:53:22] *** Joins: CalamityBloo (~CalamityB@user/CalamityBlue)
[10:56:36] *** Quits: CalamityToo (~CalamityB@user/CalamityBlue) (Ping timeout: 240 seconds)
[11:01:54] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:634d)
[11:06:12] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:634d) (Ping timeout: 252 seconds)
[11:08:58] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[11:09:12] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[11:11:41] *** Joins: calcul0n (~calcul0n@2a01:e0a:150:6030:4012:c816:317c:3628)
[11:11:47] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:11:55] *** Quits: jsbach (~jsbach@2a01:c23:6503:2e00:b63b:c294:6c9:2b6a) (Remote host closed the connection)
[11:18:02] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[11:24:04] *** Joins: dkdn54 (~dkdn@178.49.152.151)
[11:25:43] *** Joins: dkdn76 (~dkdn@178.49.154.151)
[11:26:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:27:19] *** Quits: dkdn (~dkdn@178.49.152.151) (Ping timeout: 256 seconds)
[11:29:35] *** Quits: dkdn54 (~dkdn@178.49.152.151) (Ping timeout: 256 seconds)
[11:30:09] *** Quits: dkdn76 (~dkdn@178.49.154.151) (Ping timeout: 256 seconds)
[11:32:21] *** emerent is now known as Guest6773
[11:32:21] *** Joins: emerent_ (~quassel@p200300cd5743c336ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:32:22] *** Quits: Guest6773 (~quassel@p200300cd5743c377ba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (calcium.libera.chat (Nickname regained by services)))
[11:32:22] *** emerent_ is now known as emerent
[11:38:05] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[11:42:58] *** Quits: rwb (~augh@alogs.space) (Excess Flood)
[11:43:10] *** Joins: rwb (~augh@alogs.space)
[11:44:48] *** rwb is now known as rb
[11:50:19] *** Joins: Kill-Animals (~anon@199-7-159-36.eng.wind.ca)
[11:55:39] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[11:59:28] *** Joins: evangeline (~Eleanor@178.79.105.181)
[12:03:42] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[12:08:35] *** Joins: Gvidon (~Gvidon@user/gvidon)
[12:23:34] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[12:25:52] *** Joins: wyre (~wyre@user/wyre)
[12:33:50] *** Quits: Kill-Animals (~anon@199-7-159-36.eng.wind.ca) (Ping timeout: 272 seconds)
[12:41:30] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[12:55:58] *** Joins: nq (~nq@2a02:2f08:e015:a900:e603:7a30:2c23:12e)
[13:02:08] *** Quits: mint (~mint@85.174.200.135) (Quit: Leaving)
[13:03:07] *** Joins: mint (~mint@85.174.200.135)
[13:06:43] *** Joins: robod34 (Username@79.113.200.158)
[13:11:46] *** Joins: bobb_ (~bobb_@dslb-092-074-253-191.092.074.pools.vodafone-ip.de)
[13:19:35] *** Joins: Kill-Animals (~anon@199-7-159-19.eng.wind.ca)
[13:20:36] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[13:24:30] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 272 seconds)
[13:26:32] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:27:08] *** Joins: jsbach (~jsbach@2a01:c23:6503:2e00:20af:254d:e8dd:27a0)
[13:29:39] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Quit: Konversation terminated!)
[13:33:48] *** Quits: Kill-Animals (~anon@199-7-159-19.eng.wind.ca) (Ping timeout: 268 seconds)
[13:34:03] *** Joins: Kill-Animals (~anon@199-7-158-231.eng.wind.ca)
[13:46:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:47:48] *** Quits: skapate (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:51:17] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:53:46] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:00:46] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[14:01:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Quit: Leaving)
[14:01:22] *** Joins: ivii (~ivan@user/ivii)
[14:01:35] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[14:04:47] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:08:17] *** Quits: Kill-Animals (~anon@199-7-158-231.eng.wind.ca) (Ping timeout: 240 seconds)
[14:08:44] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[14:08:56] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[14:09:37] *** Joins: plastico (~plastico@neomutt/plastico)
[14:10:40] *** gentooclimax is now known as climax
[14:21:19] *** climax is now known as gentooclimax
[14:24:38] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[14:24:53] *** Joins: toulene9 (~toulene@user/toulene)
[14:25:49] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[14:25:49] *** toulene9 is now known as toulene
[14:43:12] *** Quits: pepperoni (~pepperoni@172.58.102.236) (Read error: Connection reset by peer)
[14:43:52] *** Joins: pepperoni (~pepperoni@172.58.102.236)
[14:44:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:31] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:31] *** ChanServ sets mode: +v npaperbot
[14:54:17] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[14:55:29] *** Joins: wyre (~wyre@user/wyre)
[14:56:58] *** gentooclimax is now known as climax
[15:01:26] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:08:49] * Haohmaru twists nolyc like a wet cloth
[15:08:50] <Haohmaru> !fact
[15:08:51] <nolyc> Haohmaru: A destructor is used to destroy objects of its class type.
[15:10:28] *** climax is now known as gentooclimax
[15:15:07] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[15:17:08] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[15:17:55] <Haohmaru> ~google();
[15:21:34] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[15:21:59] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[15:41:20] *** Joins: markong (~kvirc@213.146.188.203)
[16:03:32] *** Joins: andreasbuhr (~quassel@p549dba69.dip0.t-ipconnect.de)
[16:03:32] *** Quits: andreasbuhr (~quassel@p549dba69.dip0.t-ipconnect.de) (Client Quit)
[16:07:17] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[16:08:09] *** Quits: proller (~p@2a02:6b8:b081:1222::1:34) (Ping timeout: 252 seconds)
[16:12:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[16:15:49] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:26:29] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:28:52] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[16:46:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[16:49:50] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[17:03:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:04:20] <mort> !fact
[17:04:21] <nolyc> mort: A parameter shall not appear as a potentially-evaluated expression in a default argument.
[17:04:37] <ville> well... x.~T() might disagree about the class type part
[17:04:49] <mort> isn't T the class type there
[17:04:55] <mort> oh, not necessarily
[17:04:58] <ville> mort: templates
[17:05:42] <ville> but then soeone will say it's a pseudo-destructor then and those are not destructors
[17:06:06] <mort> !fact
[17:06:07] <nolyc> mort: A locally declared function is not in the same scope as a function in a containing scope.
[17:06:52] <mort> wait functions can be defined in scopes other than the top-level?
[17:13:14] <PJBoy> namespaces, classes
[17:13:24] *** Quits: Oxyd (~oxyd@user/oxyd) (Ping timeout: 240 seconds)
[17:14:08] *** Quits: xq (~xq@user/xq) (Ping timeout: 252 seconds)
[17:14:14] *** Joins: Oxyd (~oxyd@user/oxyd)
[17:15:54] <mort> huh, a namespace is considered a "scope", TIL
[17:16:14] <PJBoy> never heard of namespace scope?
[17:16:14] <LordKalma> bah, nothing like python: def foo(): for i in range(10000): def bar(): pass
[17:16:27] <mort> not really
[17:17:20] <PJBoy> most rules you think relate to the global scope usually actually refer to namespace scope
[17:18:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:21:21] <mort> I mean I know what namespaces do and it does make sense in retrospect that they're called a "scope"
[17:22:12] <mort> but I'm used to thinking of blocks within functions as scopes and everything outside of functions as "namespaces"
[17:22:12] <rpav> `const void` is apparently valid
[17:25:05] <PJBoy> there's function parameter scope, class scope, block scope, namespace scope, enumeration scope
[17:25:47] *** Joins: proller (~p@2a02:6b8:b081:b65d::1:15)
[17:28:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[17:31:33] <mort> 'const void' makes sense, that's the type you're pointing to when you make a 'const void *' right
[17:33:12] *** Joins: Xardas (~Xardas@149.233.51.127)
[17:33:58] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[17:35:42] <rpav> argh
[17:39:38] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:41:11] *** Joins: str0 (~str0@178.220.28.32)
[17:41:29] <nq> why does a game like Planetary Annihilation (min. spec. 8GB; I do have 8GB installed, but some is used by integrated GPU, some by Windows OS, and about 4GB remains) end up crashing after about 8 minutes of gameplay (as its memory allocation reaches a critical points and the number of units increases), for reasons of lack of memory (probably a new or malloc is failing, returning a nullptr), when the operating system provides the
[17:41:29] <nq> mechanism of "virtual memory space", so it could (very unperformantly) keep dumping to and retrieving from disk those 4 KiB pages ?
[17:46:04] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[17:51:42] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:54:04] <PJBoy> probably that does happen
[17:54:27] <PJBoy> you can still exhaust your swap
[18:06:25] *** Joins: ivii (~ivan@user/ivii)
[18:08:38] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:11:05] *** Joins: seninha (~seninha@user/seninha)
[18:20:49] <ville> i would expect most programs out there are not completely/fully tested against allocation failures
[18:25:28] <ville> i don't know if we even have nice tooling to the testing that. identify all locations of allocations, run the program with one of them failing and repeat. now of course that still leaves the problem of several allocations failing in various combinations
[18:29:52] <ville> seem to recall some paper by sutter picked "some projects from github" and tested their exception safety levels, basically by making allocations fail, and the results weren't very good
[18:33:02] <PJBoy> I've seen fault injection frameworks before
[18:33:53] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[18:36:23] <PJBoy> not seeing anything cool from a cursory googling though
[18:36:35] <ville> yeah there are some, haven't looked at them in a decade so my knowledge of their "nice"-ness is outdated
[18:36:46] <PJBoy> overloading operator new to fail with some random chance seems like a reasonable approach though
[18:37:08] <ville> that's a start, but doesn't rank too high in the niceness metric
[18:37:17] *** Joins: teepee (~teepee@openscad/teepee)
[18:39:25] <ville> say i get a report back, run 23567 crashed, do i get a reproducible setup as well that i can then run in a debugger to see why it crashed
[18:40:42] *** Quits: str0 (~str0@178.220.28.32) (Remote host closed the connection)
[18:42:11] <Shell> piplup
[18:42:17] <Shell> uhh, wrong buffer
[18:44:02] <mort> I support your message nonetheless
[18:44:21] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:30] *** ChanServ sets mode: +v npaperbot
[18:46:56] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[18:52:42] <nq> PJBoy: well, running on Windows, I aasume that the swap space is that pagefile ?
[18:52:51] <PJBoy> yeah
[18:52:53] <nq> I don't think its upper limit is lower than 4 gb
[18:52:58] <nq> by default
[18:53:04] <nq> not that I am an expert on that
[18:53:06] <PJBoy> by default it's some automatic thing
[18:53:10] <nq> right
[18:53:41] <nq> which makes me wonder why it crashes; can it tell of its pages are being dumped to disk ?
[18:53:44] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:54:40] <PJBoy> on my computer it's 2.4GB
[18:55:09] <PJBoy> it doesn't increase just to meet the needs of programs that want more memory
[18:55:28] <PJBoy> that would be the same as just allocating a giant page file
[18:56:12] <PJBoy> so I can easily get a memory allocation failure a test that just allocates memory
[18:57:13] <nq> hmm, it means I misunderstood its "automatic" mode
[18:58:00] *** Joins: magla (~gelignite@55d40a33.access.ecotel.net)
[18:59:49] <CarloWood> What would be the fastest way to find out if a byte starts with 0, 1, 2 or 3 ones?
[19:00:11] <CarloWood> You may assume the next bit is a zero - if it isn't then failure is ok.
[19:00:22] <nq> what does "start" mean ? lowest address ?
[19:00:29] <CarloWood> Highest bit
[19:00:36] <nq> so the opposite :)
[19:00:50] <CarloWood> So it could be  11001111 and then the answer is 2.
[19:01:03] <nq> ah, so you want to count the trail
[19:01:09] <nq> from "left to right"
[19:01:31] <urdh> that byte doesn't start with any zeros at all?
[19:01:46] <urdh> anyway, <bit> has std::countl_zero and std::countl_right
[19:01:49] <nq> well, I can't say about "fastest", but I'd just use a 0b1000000 mask, & it with the number, and shift the number to the left, while counting
[19:02:01] <CarloWood> Yes, I am thinking to just use shift and compare in a loop; or use a count instruction - not sure how fast those are.
[19:02:11] <urdh> that'd be the obvious starting point, and it'll probably resolve to builtins if available
[19:02:16] <InPhase> CarloWood: Bit shift, and, and sum in a loop.  It will probably unroll into something smart.  Optimizers are good at this sort of thing typically.
[19:02:42] <urdh> er, std::countl_ones, not countl_right :/
[19:03:03] <CarloWood> std::countl_ones exists? Well...
[19:03:08] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:182e:ca9a:1505:6966)
[19:03:12] <InPhase> countl_one
[19:03:16] <urdh> https://en.cppreference.com/w/cpp/numeric/countl_one
[19:03:17] <InPhase> C++20 only
[19:03:22] <urdh> yeah i can't type today
[19:03:54] <InPhase> And C++20 is unfortunately taking a long time to roll out as complete.
[19:04:07] <CarloWood> I guess I should use that then lol.
[19:04:29] <urdh> if you don't have C++20 there's probably a builtin you could use
[19:05:09] <CarloWood> << std::countl_one(0b11001111);
[19:05:10] <geordi> error: no matching function for call to 'countl_one(int)'
[19:05:10] <urdh> e.g. __builtin_clz(~value) if you're on GCC
[19:05:49] <CarloWood> *kicks geordi* wut?
[19:05:58] <PJBoy> << std::countl_one(0b11001111u);
[19:05:58] <geordi> 0
[19:05:59] <CarloWood> oh -
[19:06:10] <nq> unsigned
[19:06:13] <CarloWood> yeah
[19:06:26] <CarloWood> that 0 though, lol.
[19:06:36] <CarloWood> must be a unsigned char.
[19:06:36] <nq> only if T is an unsigned integer type (that is, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long, or an extended unsigned integer type)
[19:06:50] <CarloWood> << std::countl_one((char8_t)0b11001111);
[19:06:50] <geordi> error: no matching function for call to 'countl_one(char8_t)'
[19:06:58] <nq> unsigned char
[19:06:59] <CarloWood> << std::countl_one((unsigned char)0b11001111);
[19:07:00] <geordi> 2
[19:07:17] <CarloWood> Isn't char8_t unsigned?
[19:07:22] <urdh> no
[19:07:28] <nq> which seems weird though, why unsigned ? so it's not "just bits"; even floats are not treated
[19:07:32] <urdh> maybe you're thinking of uint8_t?
[19:07:38] <PJBoy> it is unsigned
[19:07:47] <PJBoy> it's just not allowed by countl_one et al
[19:07:52] <urdh> is it?
[19:07:56] <PJBoy> << is_unsigned_v<char8_t>
[19:07:57] <geordi> true
[19:07:59] <CarloWood> What is the idea behind not allowing it?
[19:08:14] <urdh> it's not one of those maybe-signed things then?
[19:08:15] <urdh> TIL
[19:08:27] <PJBoy> nah only char has that privilege
[19:08:28] <urdh> << std::countl_zero(0b11001111u);
[19:08:29] <geordi> 24
[19:08:39] *** Joins: str0 (~str0@178.220.28.32)
[19:08:40] <urdh> """privilege"""
[19:08:51] <CarloWood> bagage
[19:09:05] <PJBoy> oh and wchar_t
[19:09:29] <urdh> nq: i think the idea is that <bit> works on unsigned types because you shouldn't be bit-twiddling signed types in the first place
[19:09:53] <nq> well, the processors has different arithmetic operations for signed and unsigned
[19:10:06] <nq> it suggests that the implementation of these countl and countr depends on unsigned arithmetic
[19:10:13] <nq> and would require explicit type casting otherwise
[19:10:15] <urdh> yes, but these are explicitly not arithmetic operations
[19:10:31] <nq> what do you mean ? everything is arithmetic..
[19:10:46] <urdh> uh, no?
[19:10:50] <nq> ah, that they are bit operations you mean ?
[19:10:55] <urdh> there's logical shifts and arithmetic shifts, for instance
[19:11:06] <urdh> yes
[19:11:25] <nq> right, I meant that by saying the the processor has these two interpretations )one omits the sign bit and the other doesn't)
[19:12:06] *** Quits: bobb_ (~bobb_@dslb-092-074-253-191.092.074.pools.vodafone-ip.de) (Quit: Client closed)
[19:15:27] <PJBoy> as far as I can tell, there's no rationale for those <bit> functions only taking unsigned integer types
[19:15:49] <PJBoy> or excluding those UTF char types
[19:16:27] <InPhase> PJBoy: Well bit shift of signed values is impementation defined, so that was probably an undesired nuissance.
[19:16:32] <InPhase> implementation
[19:16:34] <PJBoy> not anymore
[19:16:45] <PJBoy> it's well defined arithmetic shift right or a well defined shift left
[19:16:52] <CarloWood> Hmm - next I need to check if msg[i] == 0, for 0 < i < glen, where glen is 2, 3 or 4. If so then glen must be set to 1.
[19:17:00] <InPhase> PJBoy: Where did that change?
[19:17:12] <PJBoy> two's complement was made mandatory
[19:17:16] <PJBoy> and that change came with it
[19:17:23] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[19:17:29] <CarloWood> I suppose using strlen is the fastest way there :/.
[19:17:50] <CarloWood> Aka - find the first 0 in a string starting at msg.
[19:18:15] <PJBoy> [p1236]
[19:18:15] <npaperbot> P1236R1: [Core] Alternative Wording for P0907R4 Signed Integers are Two's Complement <https://wg21.link/p1236r1> (by Jens Maurer) (2018-11-09) (Related: https://wg21.link/p1236r1/github)
[19:18:16] <CarloWood> No, not really - I only need to check the first 4 bytes at most.
[19:20:15] <CarloWood> int i = 1; while (i < glen) if (msg[i] == 0) { glen = 1; break; }
[19:20:17] <CarloWood> I guess
[19:20:26] <CarloWood> hmm, missing ++
[19:20:45] <CarloWood> msg[i++]
[19:21:03] <Alipha> looks like a for loop
[19:22:20] <CarloWood> Not really... I don't think writing it as a for loop would be faster anyway, or more clear.
[19:23:22] <InPhase> PJBoy: I see right shift for signed negative values is defined clearly there.  I don't see a clear definitition for left shift of signed negative values.  (It might be hiding somewhere, as things do in the standard, but I don't see it.
[19:23:26] <InPhase> )
[19:24:39] <InPhase> PJBoy: It sort of turns on how that "modulo" is defined there.
[19:27:11] <urdh> that's clearly a for loop
[19:27:22] <PJBoy> it's just logical shift left
[19:28:07] <fiesh> CarloWood: if your access to msg[i] is always valid for i < glen, it's almost certainly better to check all values simultaneously and bit-or them together or so so that the processor can do it in parallel
[19:28:50] <fiesh> by simultaneously I mean not have any logical short-circuting prevent the compiler from having the opcodes be run in parallel
[19:28:54] <Alipha> you could do a lookup table
[19:30:34] *** Quits: magla (~gelignite@55d40a33.access.ecotel.net) (Quit: Stay safe!)
[19:31:07] <Alipha> int one_cnt[] = {0, 0, 0, 0, 1, 1, 2, 3}; int leading_ones = one_cnt[input >> 5];
[19:33:48] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 240 seconds)
[19:42:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:182e:ca9a:1505:6966) (Ping timeout: 240 seconds)
[19:42:48] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:46:47] <CarloWood> fiesh: it's a zero terminated string - so I can't read after the 0 that I find.
[19:46:53] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[19:47:17] *** Quits: Tokamak (~Tokamak@107.116.82.161) (Ping timeout: 240 seconds)
[19:47:42] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[19:47:59] <CarloWood> It doesn't have to be THAT fast though ;). I just don't want to write silly code when it is cheap and simple to make it a bit faster.
[19:50:09] *** Joins: Tokamak (~Tokamak@107.116.82.161)
[19:50:55] <fiesh> CarloWood: it could still be a zero-terminated string whose underlying container is of at least a given length, thus ensuring proper access
[19:51:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[19:51:48] <cq-work> for (int i = 0; i < glen; ++i) { if (msg[i] == 0) { glen = 1; break; }
[19:52:09] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:52:14] <cq-work> You even wrote the logic as if it was meant to be a for loop >.>
[19:56:47] <cq-work> Also, I'd just go with whatever's most readable first and see what the compiler spits out.
[19:57:28] <Alipha> { for(int i = 0; i <= 255; i += 32) { int s = i >> 5; cout << ((((s * 3) >> 2) - 2) & ~((i >> 7) - 1)) << ' ';  } }
[19:57:29] <geordi> 0 0 0 0 1 1 2 3
[20:00:12] <PJBoy> that's a lot of parentheses
[20:00:50] <Alipha> lol
[20:01:08] <Alipha> https://godbolt.org/z/49n9xEj36
[20:01:15] *** Joins: xkuru (~xkuru@user/xkuru)
[20:03:01] <PJBoy> geordi -w { for (int i{}; i < 8; ++i) cout << (i * 3 / 4 - 2 & -i / 4) << ' '; }
[20:03:02] <geordi> 0 0 0 0 1 1 2 3
[20:05:52] <PJBoy> I like my codegen more too https://godbolt.org/z/W9joc91sf
[20:06:47] <CarloWood> I am working on this: https://wandbox.org/permlink/GhWq5mcN3k4C7ded
[20:06:57] <PJBoy> oh because I forgot to account for that division by 0x20
[20:07:05] <CarloWood> Which is possibly going to be an answer for this: https://stackoverflow.com/questions/66308768/convert-string-to-portable-filename-with-filesystem-or-boost-filesystem
[20:07:22] <PJBoy> yeah it's just the same https://godbolt.org/z/9hf3er48f
[20:07:52] <CarloWood> My idea here to keep the input string as much human readable as possible, as opposed to just converting it to base64 or something :P
[20:08:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:09:25] <CarloWood> I'd like a flexible way of transforming the input string however.
[20:09:30] <Alipha> PJBoy: weird. why does this last one appear to be "less efficient"? https://godbolt.org/z/P5f5xvaqb
[20:10:02] <PJBoy> because division of negative numbers isn't the same as bitshift right of negative numbers
[20:11:04] <PJBoy> so in general, division of signed ints is slower even when by a constant power of 2
[20:11:04] <CarloWood> One way could be to pass two strings that just map UTF8 characters. But I think it is slightly more complex than that. Some characters you want to be escaped (ie, a space with %20). Hmm
[20:13:04] <CarloWood> I think I'll keep the escapes the same? Just always replace escaped characters with %HH where HH is their hex code. An escape multi-byte glyph would just look like: %e3%8f%a3 or something.
[20:14:03] <PJBoy> so it looks like it's checking if the int was negative, and if so it does ceiling division -> floor division trick
[20:14:24] <PJBoy> where ceil_div(n, d) = floor_div(n + d-1, d)
[20:14:38] <PJBoy> and then it can do the floor division via bitshift
[20:14:39] <rpav> room_div
[20:14:46] <CarloWood> There isn't really a reason to escape utf8 glyphs, because chars > 127 are always legal in filenames. But the SO question wants it to be reversible.  Thus any utf glyph that replaces some illegal char must itself also be escaped then.
[20:16:46] <Alipha> PJBoy: using unsigned instead of int makes the last use 1 fewer instructions than the first 2: https://godbolt.org/z/PrTeTE484
[20:17:55] <PJBoy> now that one surprises me
[20:19:53] <PJBoy> I guess that `i / 0x20 * 3 / 0x80` is worse than `i * 3 / 0x80`
[20:20:03] <PJBoy> because the former deals with overflow in a different way
[20:20:39] <Alipha> i like how we're off on this optimizing tangent and CarloWood doesn't care ;-)
[20:21:01] <PJBoy> << i / 0x20 * 3 / 0x80, i * 3 / 0x80; unsigned i = numeric_limits<unsigned>::max() / 2;
[20:21:02] <geordi> 1572863, 16777215
[20:21:12] <PJBoy> yeah that'll explain it
[20:21:35] <CarloWood> Sorry, I am not following what you are doing :/... I want to finish this code today, so continued working on that.
[20:21:46] <PJBoy> now they're only subtly different https://godbolt.org/z/K86qnMbqW
[20:22:17] *** Joins: rackj (~rackj@c-73-193-19-25.hsd1.wa.comcast.net)
[20:22:26] <Alipha> CarloWood: i implemented `std::countl_one((unsigned char)0b11001111)`
[20:22:35] <Alipha> (for only up to 3)
[20:23:07] <CarloWood> How is that (ever) going to be faster than std::countl_one?
[20:23:32] <Alipha> MAYBE YOU ODN'T HAVE std::countl_one
[20:23:54] <urdh> __builtin_clz(~x) to the rescue!
[20:24:23] <urdh> maybe people on IRC just enjoy solving small well-defined C++ puzzles
[20:24:31] <CarloWood> haha - sure
[20:24:35] <rpav> gdb segfaults reading symbols from my binary D:
[20:24:40] <urdh> i mean what's the alternative, doing actual paid work?
[20:26:11] <Alipha> std::countl_one uses a jump :-/ https://godbolt.org/z/6vPz683rq
[20:27:10] <CarloWood> Special case for all 1's it seems.
[20:27:50] <rpav> https://gist.github.com/rpav/ea1f2b3aa7ab28ad3857e8410dacdb48 .. i remember having to implement all this shit awhile back
[20:28:19] <rpav> my non-intrinsic implementations are possibly not optimal, but they work and like everything has intrinsics anyway
[20:29:11] <CarloWood> Alipha: the worst part (for you) is that I need this:
[20:29:28] <CarloWood> int glen = std::clamp(std::countl_one(static_cast<unsigned char>(*glyph)), 1, 4);
[20:29:49] <CarloWood> It's up to 4 - and a zero has to be turned into a 1  :/
[20:30:11] *** Quits: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca) (Ping timeout: 260 seconds)
[20:30:25] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[20:30:27] <Alipha> that's a completely different problem. ALL MY TIME WASTED
[20:31:08] <CarloWood> But you had fun :)
[20:32:13] <urdh> yeah countl_one basically does __builtin_clz(~x), and that builtin doesn't work with all-zero values for some reason
[20:32:26] <urdh> hence the special case for all-ones
[20:33:09] *** Quits: rackj (~rackj@c-73-193-19-25.hsd1.wa.comcast.net) (Quit: Client closed)
[20:33:28] <CarloWood> << __builtin_clz(0)
[20:33:29] <geordi> 32
[20:34:04] <urdh> s/doesn't work with/is documented as returning undefined values for/
[20:34:14] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[20:34:18] <rpav> they're not all portable for all-1/all-0 or whatnot
[20:34:48] <CarloWood> Lemme guess - everyone returns 32 except windows.
[20:35:20] <urdh> probably going to be architecture-specific, not os-specific
[20:35:30] <CarloWood> Alipha: you're not really upset, are you? :/
[20:36:11] <Alipha> nah. especially since this new problem isn't actually all that different, i don't think. i thought it was, but it's not
[20:37:02] *** Joins: jokoon (~eio@2a01:e0a:542:e160:64b1:ddbf:d4d9:7471)
[20:38:04] <Alipha> need this array now, i think: {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4}
[20:38:13] <CarloWood> I'd love to take part in the challenge to make a fast/cute function... but I have to finish this :(
[20:38:49] <CarloWood> That being said... I feel the urge coming up to write my own version :/
[20:39:14] <PJBoy> if it's any consolation, the ARM implementation of countl_one is branchless
[20:39:23] <Alipha> which really isn't that different from {0, 0, 0, 0, 1, 1, 2, 3}
[20:39:43] <jokoon> Can I know which type a template is using in visual studio?
[20:39:58] <PJBoy> depends what you mean by that
[20:40:28] <jokoon> I give a float to a template that accepts int and float... I wnat to be sure it's using the float template
[20:42:55] <PJBoy> I don't think there would be a way to check that
[20:43:51] <urdh> you could look at the symbols in the resulting executable, probably
[20:44:03] <nq> jokoon: how does you template look to accept int OR float ?
[20:44:23] <jokoon> Actually forget my question I think it doesn't it's another error
[20:52:00] *** Inline__ is now known as Inline
[20:52:05] <Alipha> PJBoy: whoa whoa whoa... got off the path somehow: https://godbolt.org/z/h9Mbsn1Kq
[20:54:05] <Alipha> return i * 3 / 4 - 2 & -(i / 4);
[20:54:34] <Haohmaru> what are you mathzing?
[20:56:31] *** Joins: paul424 (~tom@ip-5-172-239-247.multi.internet.cyfrowypolsat.pl)
[20:56:51] <PJBoy> oh what
[20:57:27] *** Joins: Guest3 (~Guest3@185.145.245.102)
[20:57:30] <Alipha> Haohmaru: well, that particular godbolt is doing `std::clamp(std::countl_one((unsigned char)x), 0, 3);`  (for 0 <= x <= 255). but we now have a new goal of doing `std::clamp(std::countl_one((unsigned char)x), 1, 4);`
[20:57:56] <Haohmaru> is the goal to not have a branch?
[20:57:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[20:59:05] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[20:59:42] *** Quits: Guest3 (~Guest3@185.145.245.102) (Client Quit)
[21:01:26] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:02:00] <cq-work> You know what grinds my gears? How python has no decent way of supporting a shebang because there is no one common name that python3 or python2 is under despite them being separate languages.
[21:02:07] *** Joins: Tokamak_ (~Tokamak@172.58.191.11)
[21:02:12] *** Quits: Tokamak (~Tokamak@107.116.82.161) (Ping timeout: 240 seconds)
[21:03:05] <LordKalma> So llvm 14 is officially live
[21:03:24] *** Joins: Tokamak (~Tokamak@107.116.82.161)
[21:03:25] <LordKalma> or, in linux package manager terms, welcome to llvm 10
[21:03:30] * LordKalma runs
[21:04:04] <cq-work> Depends, LLVM does support packages for some common distributions.
[21:05:32] <Alipha> PJBoy: CarloWood: not too bad: https://godbolt.org/z/vq9z35zzc
[21:06:17] *** Quits: Tokamak_ (~Tokamak@172.58.191.11) (Ping timeout: 240 seconds)
[21:06:22] <Alipha> Haohmaru: goal is to be as efficient as possible :-) and std::countl_one is c++20, so... backwards compatibility?
[21:09:03] <Haohmaru> ah, no idea about that, i just know there's a branchless way to clamp
[21:09:08] <Haohmaru> if that is desirable
[21:10:45] *** Quits: Inline (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:10:50] <LordKalma> still annoys me that msvc is the most up to date compiler, and clang the least :(
[21:11:02] <LordKalma> irt c++20 features
[21:12:59] <Haohmaru> thus, stick to gcc
[21:14:30] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[21:15:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:15:55] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 260 seconds)
[21:16:05] <CarloWood> Alipha: I'm afraid I did beat you: https://godbolt.org/z/qaMfa7MPG
[21:16:26] *** Joins: seninha (~seninha@user/seninha)
[21:17:31] <CarloWood> That's *three* times less assembly instructions :D
[21:18:14] *** Joins: Tokamak_ (~Tokamak@172.58.191.11)
[21:19:37] *** Quits: Tokamak (~Tokamak@107.116.82.161) (Ping timeout: 240 seconds)
[21:22:33] *** Quits: mint (~mint@85.174.200.135) (Read error: Connection reset by peer)
[21:22:52] *** Joins: mint (~mint@85.174.200.135)
[21:25:46] *** Joins: Inline (~Inline@p200300cd470cc200742cdab66a29c7e1.dip0.t-ipconnect.de)
[21:28:29] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[21:31:42] *** Quits: mint (~mint@85.174.200.135) (Read error: Connection reset by peer)
[21:32:33] *** Joins: pulse (~pulse@user/pulse)
[21:32:47] <Alipha> CarloWood: impressive
[21:34:35] *** Joins: mint (~mint@85.174.200.135)
[21:34:47] <CarloWood> thx
[21:38:20] *** Joins: Gvidon (~Gvidon@user/gvidon)
[21:38:55] *** Joins: meator (~meator@user/meator)
[21:38:56] *** Joins: magla (~gelignite@55d40a33.access.ecotel.net)
[21:39:36] *** Quits: nq (~nq@2a02:2f08:e015:a900:e603:7a30:2c23:12e) (Quit: Leaving)
[21:39:53] *** Joins: nq_ (~nq@2a02:2f08:e015:a900:e603:7a30:2c23:12e)
[21:42:13] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:44:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:47:10] <meator> Hello. I have two constructors. They do two things: they set a private std::string and then do some work. Both do the same work, they only use different methods to initialize the string (one uses rvalue reference and one uses a const reference for copying). Is this the right way to do it: https://godbolt.org/z/4rK98Ms3j ?
[21:48:44] <Gvidon> No. You don't need to do "std::string(str)", you can just use "str" in the first constructor. And for the second one, you need to move str explicitly
[21:49:14] <Gvidon> Oh, shit. I misread the first one
[21:49:40] <Gvidon> It's ok. You just need to add std::move to the second one
[21:51:44] <Gvidon> Or you can go with just one templated constructor, universal references and std::forward
[21:52:31] <Gvidon> Personally, I find it overcomplicated, but some people like it this way
[21:53:17] <meator> Why std::move? std::string && is being passed to std::string, so it should pick basic_string( basic_string&& other ) noexcept constructor.
[21:54:48] <Alipha> meator: an rvalue reference only affects what you can initialize the reference with. After initialization, the reference is an lvalue
[21:55:19] <Alipha> Oh
[21:55:56] <Alipha> Right, yes. You need std::move
[21:56:05] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:56:18] <Alipha> : mystr(std::move(str))
[21:57:04] <Alipha> meator: is this constructor call in a super critical hotspot of your code?
[21:57:39] <meator> What's the type of str in " : mystr(str)"?
[21:58:10] <Alipha> meator: std::string&
[21:59:11] *** Quits: jokoon (~eio@2a01:e0a:542:e160:64b1:ddbf:d4d9:7471) (Quit: Leaving)
[22:00:00] <Alipha> { std::string &&str = std::string("hi"); std::cout << TYPE(str); }
[22:00:00] <geordi> lvalue string
[22:01:01] <meator> Hmmm.
[22:01:05] <meator> Ok.
[22:01:11] <meator> I'll use std::move then.
[22:01:39] <Alipha> meator: but, really, truly, seriously, don't bother with two different constructors. Just `mytest(std::string str) : mystr(std::move(str)) {}`
[22:04:52] <meator> Is const std::string & str in the first constructor really beneficial? It's going to make copies anyway, so is the first constructor the equivalent of mytest(std::string str) : mytest(str)?
[22:05:31] *** Quits: mint (~mint@85.174.200.135) (Quit: Leaving)
[22:07:43] <Gvidon> No. If you add std::move like Alipha did and it will be more or less similar but still not the same thing. Technically it will have to call an additional move constructor, but it shouldn't make much difference
[22:09:23] <Gvidon> "mytest(std::string& str): mystr(str)" -- one copy constructor
[22:09:48] <Gvidon> "mytest(std::string str): mystr(std::move(str))" -- one copy constructor and one move constructor
[22:10:08] <Gvidon> "mytest(std::string str): mystr(str)" -- two copy constructors
[22:11:04] <Gvidon> Unless you move into it. Oh, well, you get the idea
[22:12:58] <CarloWood> Alipha, for extra magic - I made it return 1 when the bytes starts with 11111 because then it isn't UTF8 ;).
[22:13:03] <CarloWood>   // The length of a glyph is determined by the first byte.
[22:13:03] <CarloWood>   // This returns 2 for 110xxxxx, 3 for 1110xxxx, 4 for 11110xxx and 1 otherwise.
[22:13:03] <CarloWood>   int glen = 1 + ((14933 >> ((x >> 3) & 31) * 2 - 48) & 3);
[22:13:36] <CarloWood> Also got rid of the UL - to make sure nobody will understand it.
[22:14:53] <CarloWood> In fact, 10xxxxxx also isn't UTF8 when it is the first byte - but that already returns 1.
[22:16:13] <meator> Well that won't work. mytest(std::string str) : mytest(str) is invalid. I have tried mytest(std::string str) : mytest(move(str)), but that is ambiguous for some reason: https://godbolt.org/z/xh39b6G8v
[22:16:18] <meator> Why?
[22:16:43] <Gvidon> Remove the second one
[22:17:43] <Gvidon> CarloWood: Neat. Completely unreadable but no branching
[22:17:55] <meator> But then the first constructor wouldn't have where to delegate.
[22:18:35] <CarloWood> meator: that were a LOT of errors lol... https://godbolt.org/z/ao9bqanan
[22:18:37] <Gvidon> meator: Right. Do "mytest(std::string str) : mystr(std::move(str))"
[22:18:47] <Gvidon> As the only constructor
[22:21:19] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:1110:204a:e437:3022)
[22:21:19] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:1110:204a:e437:3022) (Changing host)
[22:21:19] *** Joins: skapata (~Skapata@user/skapata)
[22:24:17] <meator> Hmm. I have searched on the internet and it seems that T has the same ranking as T&&, so my first constructor is really ambiguous. So I have to use const std::string &.
[22:26:33] <Raziel> why would you use && in the first place?
[22:28:32] <Raziel> and why were you delegating constructors when you clearly wanted to initialize things instead v:
[22:28:59] <meator> This is how the constructors would look without delegating: https://godbolt.org/z/5rWsfWzrs
[22:29:14] <meator> But they are doing the same thing.
[22:29:25] <meator> So I want to delegate.
[22:30:28] *** Joins: LuckyFire (~LuckyFire@79.125.173.234)
[22:30:37] <Raziel> well, okay, and it's fine if you delegate one of them
[22:30:43] <Raziel> what's not fine in that code is the &&
[22:32:38] <meator> Wait. That has literally the same issue. Guess I didn't learn from my mistakes. It would look like this: https://godbolt.org/z/hsjs8Eacr
[22:33:23] *** Quits: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de) (Ping timeout: 260 seconds)
[22:34:04] <meator> The theory is that the first constructor should be able to reuse the rlavue one when it creates a copy of the string and passes it to the second constructor.
[22:34:06] <Raziel> that seems quite unnecessary to me v:
[22:35:25] <Raziel> like, what are the circumstances in which one of those constructors would be used over the other?
[22:39:02] <Raziel> if you want to forward delegate the move as rvalue ref, https://godbolt.org/z/4Tf7xbGds I believe this is the correct order to do it in
[22:39:23] <Raziel> but I still don't actually know if that helps in any way in some circumstance v:
[22:40:56] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[22:41:05] <Gvidon> Raziel: Your version is completely wrong
[22:41:29] <Raziel> Gvidon, how so?
[22:42:21] <Gvidon> The first one's missing a move, the second one is just plain wrong and dangerous
[22:43:03] <meator> This is how it would look (if it would compile): https://godbolt.org/z/n6xa4rf88
[22:43:12] *** Joins: mathe8989 (~wellmathe@dhcp-138-246-3-71.dynamic.eduroam.mwn.de)
[22:44:22] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:30] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:30] *** ChanServ sets mode: +v npaperbot
[22:44:46] <meator> I have no idea why is this declaration conflicting, but let's solve one problem at a time.
[22:45:07] <Raziel> Gvidon, https://wandbox.org/permlink/VwEY3cLR4vc2jSnS it seems to *work* fine, at least v:
[22:45:45] <Gvidon> Anyway, I don't see the point in discussing this issue any longer. The simplest way to write such constructors was already posted by Alipha, like, 40 minutes ago
[22:45:56] <Gvidon> Raziel: Depends on your definition of "working"
[22:46:02] <CarloWood> By me?
[22:46:26] <Gvidon> CarloWood: You weren't the first one ;)
[22:46:31] <CarloWood> <Alipha> meator: but, really, truly, seriously, don't bother with two different constructors. Just `mytest(std::string str) : mystr(std::move(str)) {}`
[22:46:33] <CarloWood> Oh that
[22:47:21] *** Joins: xuxx (~xuxx@86.228.71.37.rev.sfr.net)
[22:47:22] <Raziel> Gvidon, well I'm trying to understand why it's unsafe? It gets a ref, and it uses move to call the other constructor that uses an rvalue ref instead, which then initializes the string with it
[22:47:35] <Raziel> doing move on the first one might have value too though.
[22:49:19] <Gvidon> Raziel: https://godbolt.org/z/W1n4PcK7a
[22:49:38] *** Quits: proller (~p@2a02:6b8:b081:b65d::1:15) (Ping timeout: 252 seconds)
[22:49:49] <Gvidon> It moves what isn't supposed to be moved
[22:51:34] <Gvidon> Sorry, wrong link :)
[22:51:35] <Gvidon> https://godbolt.org/z/6vnYeP5rc
[22:53:39] <Alipha> meator: preferred solution: https://godbolt.org/z/f5nojnM7c
[22:53:46] <Alipha> !give meator vex
[22:53:47] <nolyc> meator: T x(); and T y(U(z)); declare functions named x and y, the latter with a parameter named z. Also, T(a); declares a variable called a.
[22:54:10] <meator> I understand that using a rvalue reference for a string in this situation is questionable at best, but I want to learn how there references and move semantics work. https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#per1-dont-optimize-without-reason
[22:55:59] <Raziel> why is the UI on godbolt different every single time I open a godbolt link
[22:56:09] <Raziel> I can never find the run program option |:
[22:56:11] <Friithian> to intentionally mess with you, and you alone :P
[22:56:13] <LordKalma> the url also brings the UI with it
[22:56:32] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[22:56:39] <LordKalma> the run option is always on the compiler tab, wherever it is, under options
[22:56:47] <Alipha> meator: there was nothing wrong with your constructors in your last paste. your issue was that `mytest(superstring);` is actually defining a variable named superstring of type mytest. i changed line 23: https://godbolt.org/z/9qha5vWcW
[22:57:16] <LordKalma> Raziel, personally, I have a bookmarked "clean" godbolt url, to my liking
[22:57:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:58:52] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:01:10] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:01:24] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:01:29] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:01:54] <Alipha> Raziel: what happen to x's value??? https://wandbox.org/permlink/vrcyl4Wn1xEJUHKO
[23:02:03] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:02:27] <Raziel> Alipha, it got eaten by a grue
[23:02:42] <Raziel> but yeah, I see why that could be problematic :p
[23:02:56] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:03:17] <Alipha> Raziel: also, make x const: const std::string x("this is some string test");
[23:03:55] <Raziel> Alipha, well, there's no const constructors so it errors
[23:04:06] <Raziel> I mean, constructors taking a const ref
[23:04:16] <meator> I'm seeing this when opening https://wandbox.org/permlink/vrcyl4Wn1xEJUHKO: https://imgur.com/5Hqou7F
[23:04:42] <Alipha> meator: don't use firefox :-(
[23:04:58] <Alipha> really, don't use wandbox
[23:05:17] <Friithian> hey so it isn't just me having issues with wandbox
[23:05:20] <Raziel> it still works fine on my firefox (developer edition, 99.0b7)
[23:05:30] <Raziel> but I have heard lots of people say it's broken for them over the past week or so, yeah
[23:05:43] <Gvidon> Between firefox and some stupid broken site I will always chose Firefox
[23:05:57] <Friithian>  https://friithian.dev/pictures/screenshots/./2022-03-24T14-35-48.png
[23:06:02] <Raziel> Gvidon, same :p
[23:06:15] <meator> Oh. This is my first time using godbolt, I didn't know about browser issues.
[23:06:32] <Gvidon> meator: We aren't talking about godbolt
[23:07:47] *** Joins: rajkosto (~rajkosto@93-86-99-236.dynamic.isp.telekom.rs)
[23:08:02] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[23:08:47] <ville> Alipha: recommending against firefox is horrible. don't know how old you are but you don't want a broweser rendering kit monoculture. again
[23:09:15] <Raziel> specially not one driven by google, of all corpos
[23:09:19] <Raziel> lol
[23:09:25] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[23:10:12] <ville> well yes it's next-level that it's one of the leading surveilance corporations behind it, but the most important thing is not ending up in a monoculture even if it was firefox
[23:10:17] <Alipha> ville: hence "really, don't use wandbox" :-)
[23:10:33] *** Joins: malloy (~jimery@116.30.221.173)
[23:12:42] <Alipha> meator: alternatively, you could put your constructor code body into a private helper function and call the helper function from both constructors.
[23:13:12] *** Joins: mint__ (~mint@85.174.200.135)
[23:14:15] *** Quits: LuckyFire (~LuckyFire@79.125.173.234) (Remote host closed the connection)
[23:14:29] <meator> Alipha: That's also a solution.
[23:14:38] *** Joins: LuckyFire (~LuckyFire@79.125.173.234)
[23:16:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:16:09] <meator> So the first snippet I posted here was more or less correct, but the second constructor was missing std::move().
[23:16:18] <meator> I think this answers my question.
[23:16:21] <meator> Thanks!
[23:16:35] <Alipha> meator: https://godbolt.org/z/PnWEoM8Ga
[23:19:17] <Alipha> the middle can be improved with concepts (c++20): https://godbolt.org/z/8j437vfsG ... changed `template<typename String>` to `template<std::convertible_to<std::string> String>`
[23:20:13] <Alipha> (or with std::enable_if ugliness prior to c++20)
[23:21:14] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[23:22:23] *** Quits: Gvidon (~Gvidon@user/gvidon) (Quit: Leaving...)
[23:25:34] <meator> Alipha: Interesting. As you have said, the usage of templates in the middle one means that anything can get there, which might be problematic. But it's interesting. I'll have to read about std::forward.
[23:28:52] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[23:28:56] *** Quits: zoraj (~zoraj@vmi794994.contaboserver.net) (Read error: Connection reset by peer)
[23:32:28] <great_taste> has qt been destroyed yet?
[23:32:39] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[23:33:07] *** Joins: zoraj (~zoraj@vmi794994.contaboserver.net)
[23:33:11] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:34:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:34:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:36:04] <Friithian> It shall never be
[23:36:30] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:40:15] *** Quits: LuckyFire (~LuckyFire@79.125.173.234) (Remote host closed the connection)
[23:40:38] *** Joins: LuckyFire (~LuckyFire@79.125.173.234)
[23:41:09] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:44:02] *** Joins: LuckyFire_ (~LuckyFire@79.125.173.234)
[23:44:47] *** Quits: str0 (~str0@178.220.28.32) (Remote host closed the connection)
[23:45:00] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[23:47:42] *** Quits: LuckyFire (~LuckyFire@79.125.173.234) (Ping timeout: 272 seconds)
[23:49:14] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 268 seconds)
[23:49:49] *** Quits: LuckyFire_ (~LuckyFire@79.125.173.234) (Quit: Leaving)
[23:50:23] *** Joins: LuckyFire (~LuckyFire@79.125.173.234)
[23:51:45] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:51:52] *** Quits: LuckyFire (~LuckyFire@79.125.173.234) (Client Quit)
[23:56:12] *** Joins: LuckyFire (~LuckyFire@79.125.173.234)
