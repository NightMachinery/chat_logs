[00:00:34] *** Quits: dhruvasagar (~dhruvasag@49.207.194.244) (Quit: WeeChat 3.4)
[00:00:39] <xaltsc> b0nn: How do I store a variable in a channel without writing it every time ?
[00:00:50] <ikke> You don't store variables in channels
[00:00:53] <ikke> you write values to channels
[00:01:15] <ikke> Once something reads from it, that value is consumed
[00:03:36] *** Quits: christophergray (~christoph@186.151.17.62) (Quit: WeeChat 3.4)
[00:03:55] <xaltsc> Yeah, but how do you use channels in place of a mutex ? Say I have one goroutine f that writes to the channel and one other g that only reads it. How can I make sure that g always get a value ? I.e., if f hasn't written something new, g get the old value.
[00:04:18] <ikke> That's not how channels owrk
[00:04:21] <ikke> work
[00:04:31] <ikke> channels block until a new value is written to it
[00:04:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:04:37] <b0nn> Or mutexes, you don't store values in a mutex
[00:06:33] *** Joins: Atque (~Atque@user/atque)
[00:06:55] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:07:18] <fizzie> You can have a goroutine that is always attempting to (a) write a value to the channel, or (b) read a new value (from another channel) to change the value it's trying to write, using a select statement in a for loop, and that way build the equivalent of a mutex-guarded box with channels. Though hopefully you can arrange your channels more reasonably than that in practice.
[00:07:20] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[00:07:50] <bpalmer> Aw, I was just implementing that for demo purposes.
[00:07:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bd2b-5293-8c83-b4c5.res6.spectrum.com)
[00:08:49] <fizzie> I was debating on whether to attempt it on a phone keyboard, and leaning towards no. ;)
[00:10:06] <bpalmer> at that point, atomic.Load/Store might also appeal.
[00:13:15] <xaltsc> My question, really, is what is the most goish way to implement the scenario I've described above. It's fairly easy to it with mutex, but idk.
[00:13:30] <nuclearg1> anyone here have any thoughts / opinions on redis go clients? My team suspects gomodule/redigo is the bottleneck around connection pooling, and i don't really know where to start. I'd like to attempt to build some sort of benchmark app that uses go-redis and redigo to see which one scales better, but I don't know what I'm doing at the moment
[00:13:44] <ikke> xaltsc: a channel is more like producer/consumer process
[00:13:47] <bpalmer> xaltsc: it sounds like a mutex is the simplest way to do what you want.
[00:13:56] <ikke> Something produces values, something else consumes it
[00:14:15] <bpalmer> xaltsc: I write a lot of go without using channels ; they're a neat feature of go but really only show up in certain special circumstances.
[00:14:55] <bpalmer> you might formulate your idea as 'something uses the latest value of x and subscribes for changes to x', which naturally maps to channels
[00:15:14] <ikke> bpalmer: was about to suggest something like that
[00:15:15] <bpalmer> but 'use the latest value of x which might be assigned elsewhere' naturally maps to a critical region or to atomics.
[00:15:55] <xaltsc> ok, thanks, I was a bit misled by the tour I guess and didn't want to use the programming styles I'm used to in other languages since I'm quite new to go
[00:17:02] <ikke> xaltsc: if you model your problems like you would in other languages, solutions would look similar too
[00:17:16] <b0nn> https://www.youtube.com/watch?v=5zXAHh5tJqQ
[00:17:32] *** Joins: jjido (~Denis@94.4.149.217)
[00:17:54] <b0nn> Altho I have picked holes in the presentation (sync.Condition, for example, is difficult to emulate with channels
[00:20:14] <xaltsc> ikke: Yeah, mutex-boxes it is, the problem really is analogous to using a for loop with indices when you have iterables in the language you're using
[00:20:53] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[00:21:02] *** Joins: Fuzai (~quassel@50.54.159.160)
[00:23:24] <ikke> the two approaches that bpalmer mentioned illustrate it as well
[00:24:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:24:44] <ikke> sharing a global variable protected by an explicit mutex, or use channels to send updates
[00:29:06] <ikke> https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries-go1.18.md
[00:29:53] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:33:07] *** Quits: transacid (~transacid@transacid.de) (Ping timeout: 256 seconds)
[00:33:10] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Quit: leaving)
[00:38:40] *** Quits: fjb (~fjb@2804:378:91d5:800:c731:237f:11da:3731) (Quit: fjb)
[00:41:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-bd2b-5293-8c83-b4c5.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:41:42] *** Quits: absc (~absc@dynamic-adsl-94-34-200-216.clienti.tiscali.it) (Remote host closed the connection)
[00:44:05] *** Joins: bluedust (~bluedust@117.222.189.19)
[00:45:11] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Read error: Connection reset by peer)
[00:48:03] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:48:12] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[00:48:12] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[00:48:12] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[00:48:14] *** Quits: bluedust (~bluedust@117.222.189.19) (Ping timeout: 250 seconds)
[00:48:50] *** Joins: transacid (~transacid@transacid.de)
[00:49:13] *** Quits: ekathva (~ekathva@2001:999:51:19b8:30eb:aab6:8fa5:4db8) (Remote host closed the connection)
[00:53:16] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:54:00] *** Quits: SoF (~skius@user/skius) (Ping timeout: 252 seconds)
[00:54:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 272 seconds)
[00:54:33] *** Joins: SoF (~skius@user/skius)
[00:59:48] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:05:25] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[01:07:21] *** Parts: servytor1 (~kseitz@h104.118.128.40.static.ip.windstream.net) ()
[01:07:35] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:08:15] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[01:10:41] *** Joins: pyzozord (pyzozord@user/pyzozord)
[01:11:09] <pyzozord> hey, ldd foo where foo is a binary produced with go build says it's a statically linked executable, just as expected
[01:11:25] *** Quits: dalan62 (~dalan@59-102-63-107.tpgi.com.au) (Quit: Ping timeout (120 seconds))
[01:11:29] <pyzozord> however ldd $(which go) says it's a dynamically linked library, how is that possible? Isn't go built in go?
[01:12:15] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[01:12:22] *** Quits: ofh (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[01:13:40] <fizzie> Go links with the C library if something in the program uses cgo, and (unless you disable it) things like "net" in the standard library do.
[01:13:48] *** Joins: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[01:13:56] <fizzie> (To use the libc DNS resolver by default, so you get matching behavior.)
[01:14:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:15:05] *** Joins: dalan62 (~dalan@59-102-63-107.tpgi.com.au)
[01:15:08] <b0nn> https://bpa.st/RISQ << -- all my binaries are dynamically linked :)
[01:16:07] <pyzozord> ok so seems that go can produce dynamically linked binaries. Is there some flag for this?
[01:16:18] <fizzie> For demonstration purposes: https://0x0.st/oPXU.txt
[01:16:59] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:17:12] <fizzie> Not sure if there's a flag to force it. Why would you ever want to?
[01:17:16] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[01:17:34] <pyzozord> not sure, just trying to understand how it works and why
[01:17:34] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[01:18:55] <pyzozord> so when I import net the binary will automatically be dynamically linked?
[01:19:24] <b0nn> pyzozord: AIUI it's a matter of "knowing" what packages are using libc (etc)
[01:19:28] <fizzie> I believe it'll just happen if CGO_ENABLED=1 (the default) and something in the program's full set of dependencies (either a standard library package like "net", or a non-stdlib dependency) uses cgo. Could be there's more subtlety to it.
[01:20:07] <b0nn> I don't think that you can contract your way out of it when you use libs that use the dynamic C deps
[01:20:35] <b0nn> So, instead, you'd have to write your own libs, but they'd ulitmately have to pass off to C
[01:20:55] <fizzie> You can avoid it in the case of "net", though, since there's pure-Go replacements: https://0x0.st/oPXG.txt
[01:20:57] <b0nn> (where "C" is the dynamic C deps)
[01:22:02] <pyzozord> can I do static linking with c modules?
[01:22:04] <b0nn> fizzie: I mean, I'm sure your last demo means something to you...
[01:22:07] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:22:42] <b0nn> pyzozord: I don't think so, CGO is beyond the purvue of Go
[01:22:59] <b0nn> purview
[01:23:07] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:23:21] *** Joins: mickey8 (~user@user/mickey)
[01:23:29] <fizzie> b0nn: It's an add-on to the earlier one, and it demonstrates that the same `go build` that produced a dynamically linked executable by default produces a statically linked one with CGO_ENABLED=0.
[01:23:32] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:23:50] <b0nn> fizzie: as I say, I'm sure it means something to you
[01:24:38] <b0nn> It doesn't for example, show that there's a working replacement for the libc components in Go that might be called by the net lib
[01:26:03] <fizzie> Well, no, not quite directly. For that, see https://pkg.go.dev/net -- "On Unix systems, the resolver has two options for resolving names. It can use a pure Go resolver that sends DNS requests directly to the servers listed in /etc/resolv.conf, or it can use a cgo-based resolver that calls C library routines such as getaddrinfo and getnameinfo."
[01:26:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[01:27:41] *** Joins: jespada (~jespada@185.69.145.16)
[01:27:47] <b0nn> As this is heading to an (unfortunately) common position of a several hours long pointless thread that ends up nowhere, I'll go do some work instead
[01:30:15] <fizzie> And in the other direction, you can potentially to build a static executable that includes code using cgo, assuming the cgo bits are something you could statically link. https://github.com/golang/go/issues/26492 mentions adding an easier `-static` flag for it, but that doesn't seem to have happened.
[01:30:44] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Client Quit)
[01:34:31] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 245 seconds)
[01:34:49] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[01:34:49] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[01:34:49] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[01:39:02] <pyzozord> fizzie: I don't quite follow your last message
[01:47:55] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[01:49:02] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[01:49:03] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[01:50:05] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:52:41] <fizzie> It was just to suggest that with the right (platform-specific) combination of flags (the issue lists some examples), you could have even a build that uses cgo produce a static executable. If it's possible to statically link the C code that gets called. For example on glibc I believe the `getaddrinfo` function isn't really supported when linking statically, or something along those lines.
[01:53:56] *** Quits: internut (~internut@2601:280:4e00:7b70:3d04:39d:bbfa:d555) (Remote host closed the connection)
[01:54:32] *** Joins: internut (~internut@98.38.226.136)
[01:56:40] <fizzie> Against my better judgement, here's one more paste to add to the earlier ones: https://0x0.st/oP8s.txt
[01:58:46] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:58:53] *** Quits: internut (~internut@98.38.226.136) (Ping timeout: 252 seconds)
[01:59:04] *** Joins: mickey8 (~user@user/mickey)
[02:03:03] <pyzozord> fizzie: thank you, your help is always appriciated
[02:03:16] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[02:03:44] *** Joins: internut (~internut@2601:280:4e00:7b70:3d04:39d:bbfa:d555)
[02:04:11] <pyzozord> i worked with glibs getaddrinfo in c, I remember something strange about dynamic linking too, this makes sense
[02:05:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:09:30] *** Quits: internut (~internut@2601:280:4e00:7b70:3d04:39d:bbfa:d555) (Ping timeout: 260 seconds)
[02:14:42] *** Joins: treeford (~charleste@user/treeford)
[02:18:43] *** Joins: jkovac19 (~jkovac1@user/jkovac1)
[02:18:45] *** Joins: ypszilon1 (~ypszilon@user/ypszilon)
[02:18:45] *** Joins: muirrum5 (~muirrum@sourcehut/user/muirrum)
[02:18:58] *** Joins: abraham2 (~abraham@143.244.185.86)
[02:18:59] *** Joins: snuck (~sneak@datavi.be)
[02:19:01] *** Joins: noonien5 (~noonien@user/noonien)
[02:19:04] *** Joins: avakand__ (~avakand@static.164.226.201.195.clients.your-server.de)
[02:19:05] *** Quits: sebito91 (~sborza@45.55.74.66) (Ping timeout: 256 seconds)
[02:19:05] *** Quits: zaz\ (~zaz@poneybl.eu) (Ping timeout: 256 seconds)
[02:19:05] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Ping timeout: 256 seconds)
[02:19:13] *** Joins: cold__ (cold@user/lost)
[02:19:14] *** Joins: jpneverwas (jpneverwas@swissbox.unperson.link)
[02:19:25] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[02:19:29] *** Joins: flynn8 (~mcbloch@user/flynn)
[02:19:33] *** Joins: dove_ (~jordan@li1158-85.members.linode.com)
[02:19:36] *** Joins: ishan (~ishan@2400:8904::f03c:91ff:fe9e:a26f)
[02:19:37] *** Joins: sebito91 (~sborza@45.55.74.66)
[02:19:39] *** Joins: achillion (~ach@user/achilleas)
[02:19:42] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 272 seconds)
[02:19:43] *** Joins: ruel (~ruel@150.136.4.160)
[02:19:43] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:19:44] *** Joins: deck4rd (~deckard@user/deckard)
[02:19:45] *** Joins: zaz\ (~zaz@poneybl.eu)
[02:19:47] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[02:20:12] *** Joins: ThatOtherGuy (~LogicAsid@user/logicaside)
[02:20:13] *** Quits: achilleas (~ach@user/achilleas) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: jeromenerf (~jerome@176-149-34-153.abo.bbox.fr) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: jesk (~jesk@193.30.123.177) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: frobnitz (~ian@photon.remmler.org) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Archwyrm (~archwyrm@archwyrm.net) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: sneak (~sneak@datavi.be) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: sam1 (~sam1@molly.millions.slask.me) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: McKael (~mikael@82-64-95-224.subs.proxad.net) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: Piraty (~irc@user/piraty) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: avakand (~avakand@static.164.226.201.195.clients.your-server.de) (Ping timeout: 256 seconds)
[02:20:13] *** Quits: trewq (~trewq@li70-4.members.linode.com) (Ping timeout: 256 seconds)
[02:20:13] *** avakand__ is now known as avakand
[02:20:13] *** avakand is now known as 076AAGVW6
[02:20:35] *** Joins: Piraty (~irc@user/piraty)
[02:20:38] *** achillion is now known as achilleas
[02:20:39] *** Joins: Icycle (~icedream@hzn-b.serverkomplex.de)
[02:20:47] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: lvlinux (~ruel@150.136.4.160) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: sailorTheCat (~sailorCat@mail2.gajsin.name) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: cross (~cross@spitfire.i.gajendra.net) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: muirrum (~muirrum@sourcehut/user/muirrum) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: abraham (~abraham@143.244.185.86) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: ypszilon (~Ypszilon@user/ypszilon) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: jkovac1 (~jkovac1@user/jkovac1) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: deckard (~deckard@user/deckard) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: mika (~mika@odysseus.grml.info) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: n1000 (~n1000@user/n1000) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: antarus (~antarus@gentoo/developer/antarus) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: Lost (~spinning@user/lost) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: ishanjain (~ishan@li2028-175.members.linode.com) (Ping timeout: 256 seconds)
[02:20:47] *** muirrum5 is now known as muirrum
[02:20:47] *** Quits: Fish (~Fish@cartwheel.9grid.fr) (Ping timeout: 256 seconds)
[02:20:47] *** ypszilon1 is now known as ypszilon
[02:20:47] *** Quits: dove (~jordan@li1158-85.members.linode.com) (Ping timeout: 256 seconds)
[02:20:47] *** Quits: flynn (~mcbloch@user/flynn) (Ping timeout: 256 seconds)
[02:20:47] *** jkovac19 is now known as jkovac1
[02:20:51] *** noonien5 is now known as noonien
[02:20:51] *** abraham2 is now known as abraham
[02:20:51] *** flynn8 is now known as flynn
[02:20:56] *** Joins: Praise- (~Fat@user/praise)
[02:21:11] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[02:21:30] *** ThatOtherGuy is now known as LogicAside
[02:21:36] *** Joins: jesk (~jesk@193.30.123.177)
[02:21:49] *** Joins: McKael (~mikael@82-64-95-224.subs.proxad.net)
[02:21:57] *** Joins: frobnitz (~ian@photon.remmler.org)
[02:21:59] *** Joins: jeromenerf (~jerome@per92-h03-176-149-34-153.dsl.sta.abo.bbox.fr)
[02:22:00] *** Joins: fikran (~fikran@user/fikran)
[02:22:01] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[02:22:05] *** Joins: Archwyrm (~archwyrm@archwyrm.net)
[02:22:06] *** Joins: trewq (~trewq@li70-4.members.linode.com)
[02:22:29] *** Joins: antarus (~antarus@woodpecker.gentoo.org)
[02:22:34] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[02:22:43] *** Joins: mika (~mika@odysseus.grml.info)
[02:22:56] *** Joins: kieren (~kieren@ec2-54-247-60-196.eu-west-1.compute.amazonaws.com)
[02:23:48] *** Joins: lechner (~lechner@debian/lechner)
[02:26:18] *** Joins: n1000 (~n1000@user/n1000)
[02:27:25] *** Joins: Fish (~Fish@cartwheel.9grid.fr)
[02:30:46] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:30:54] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[02:30:54] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[02:30:54] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[02:30:59] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[02:33:49] *** Quits: feuerrot (~feuerrot@shells.chaosdorf.de) (Ping timeout: 240 seconds)
[02:34:00] *** Joins: sam1 (~sam1@molly.millions.slask.me)
[02:34:16] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[02:34:29] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:34:46] *** Joins: Church (~aleph@68.161.207.188)
[02:34:50] *** Joins: feuerrot (~feuerrot@shells.chaosdorf.de)
[02:35:21] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:39:07] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[02:39:37] *** Joins: neurocyte0917090 (~neurocyte@ip-212232094231.dynamic.medianet-world.de)
[02:39:37] *** Quits: neurocyte0917090 (~neurocyte@ip-212232094231.dynamic.medianet-world.de) (Changing host)
[02:39:37] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[02:41:14] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:41:37] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:683a:e2e:225e:172c)
[02:42:46] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:44:39] *** Joins: treeford (~charleste@user/treeford)
[02:45:02] <yagamilito> hello i am trying to parse a yaml file
[02:45:02] <yagamilito> my yaml file has data like this
[02:45:03] <yagamilito> https://pastebin.com/raw/HAZ75qsN
[02:45:03] <yagamilito> go code:
[02:45:04] <yagamilito> https://go.dev/play/p/slQTmJHH7BU
[02:45:04] <yagamilito> i am able to print the value of Userarn
[02:45:05] <yagamilito> arn:aws:iam::123456:user/foo
[02:45:05] <yagamilito> but i want to split the value and print only foo
[02:45:06] <yagamilito> how can i do that ?
[02:45:06] <yagamilito> Thanks
[02:45:51] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 250 seconds)
[02:49:04] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[02:49:31] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Leaving)
[02:49:34] *** Joins: k8yun (~k8yun@user/k8yun)
[02:50:06] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[02:51:10] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:51:11] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[02:51:11] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[02:51:11] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[02:52:19] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:683a:e2e:225e:172c) (Quit: Client closed)
[02:52:33] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:683a:e2e:225e:172c)
[02:53:55] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[03:00:51] <tristero> yagamilito: strings.Split
[03:01:18] <yagamilito> thanks
[03:01:18] <yagamilito> fmt.Println(strings.Split(str1, "/")[1])
[03:01:19] <yagamilito> worked :)
[03:02:59] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 256 seconds)
[03:04:04] <fizzie> Looks like a yet another great use for the (Go 1.18) `strings.Cut`.
[03:04:20] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:04:33] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[03:10:33] <yagamilito> how to update new packages after running go mod init ?
[03:12:40] *** Joins: internut (~internut@98.38.226.136)
[03:13:42] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[03:13:42] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[03:13:42] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[03:14:18] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:14:34] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[03:18:12] <fizzie> If you mean "add new dependencies needed by new import statements you wrote", that's `go mod tidy`. If you mean "update the version of an existing package you're depending on to a newer one", that's `go get <package>`, or possibly `go get -u <package>` if you want to also upgrade everything it depends on.
[03:19:32] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[03:20:33] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[03:23:23] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:28:10] *** Quits: internut (~internut@98.38.226.136) (Quit: Leaving...)
[03:28:34] *** Joins: masoudd (~masoudd@user/masoudd)
[03:33:05] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[03:37:36] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:683a:e2e:225e:172c) (Quit: Client closed)
[03:40:20] *** Joins: nuh^ (~nuh@207.243.108.170)
[03:43:47] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 256 seconds)
[03:44:01] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[03:44:01] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[03:44:01] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[03:47:56] *** Quits: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001) (Quit: Bye)
[03:49:08] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[03:50:36] *** Joins: Fossil (~Fossil@95.85.23.165)
[03:52:13] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[03:53:59] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:54:02] *** Parts: dove_ (~jordan@li1158-85.members.linode.com) ()
[03:56:34] <fikran> Does Go have a system of inline documentation similar to JS?
[03:56:52] <fikran> in JS, you can put /** stuff */ before a functiojn and it is interpreted as inline by editors
[04:04:48] <fizzie> There's https://go.dev/blog/godoc
[04:04:56] <fizzie> A relatively simple scheme.
[04:05:13] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:05:57] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[04:06:05] *** Joins: treeford (~charleste@user/treeford)
[04:10:05] *** Joins: xiongxin (~Thunderbi@117.136.39.218)
[04:12:12] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[04:23:07] *** Joins: treeford (~charleste@user/treeford)
[04:28:19] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:14] *** Joins: treeford (~charleste@user/treeford)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:51] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[04:49:36] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 250 seconds)
[04:50:25] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[04:50:25] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[04:50:25] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[04:52:21] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:52:50] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[04:55:25] <fikran> Have a semi-chicken-egg problem. I'm trying to make a dockerfile from some Golang code
[04:55:43] <fikran> the probelm is, the go.mod and go.sum are in ../, not the current directory
[04:55:55] <fikran> are there examples of this?
[04:56:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[04:58:30] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[04:58:37] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Remote host closed the connection)
[04:58:59] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[05:04:34] *** Joins: treeford (~charleste@user/treeford)
[05:04:35] *** Joins: jiqiren (~jiqiren@oh-hi.org)
[05:07:22] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 250 seconds)
[05:09:56] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 245 seconds)
[05:10:11] *** Joins: Techcable (~Techcable@168.235.93.147)
[05:10:24] *** Quits: henry40408 (~henry4040@175.182.112.153) (Quit: The Lounge - https://thelounge.chat)
[05:11:00] *** Joins: henry40408 (~henry4040@175.182.112.153)
[05:11:37] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[05:11:37] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[05:12:38] *** Quits: caverton (~caverton@ercro.tech) (Quit: Ping timeout (120 seconds))
[05:12:40] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[05:12:42] *** Quits: greypw254 (~greypw2@grey.pw) (Quit: Ping timeout (120 seconds))
[05:12:51] *** Joins: caverton (~caverton@ercro.tech)
[05:12:53] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[05:13:05] *** Joins: greypw254 (~greypw2@grey.pw)
[05:13:18] <fikran> Is there a way to have a Dockerfile with the go.mod and go.sum in a higher directory?
[05:13:53] *** Quits: xiongxin (~Thunderbi@117.136.39.218) (Ping timeout: 256 seconds)
[05:20:26] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:23:03] *** Joins: treeford (~charleste@user/treeford)
[05:24:44] *** Joins: ejjfunky (~ejjfunky@125.164.19.226)
[05:24:57] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[05:25:07] *** Joins: ejjfunky2 (~ejjfunky@125.164.23.63)
[05:25:07] *** Joins: ejjfunky0 (~ejjfunky2@125.164.23.63)
[05:26:50] <rewt> how are those 2 locations related?
[05:27:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:28:00] <rewt> go.{mod,sum} go in the root of your go project, and Dockerfile goes wherever you want
[05:28:17] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[05:28:48] *** Joins: xiongxin (~Thunderbi@117.136.39.218)
[05:28:57] *** Quits: ejjfunky (~ejjfunky@125.164.19.226) (Ping timeout: 256 seconds)
[05:30:46] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 245 seconds)
[05:34:32] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[05:44:19] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[05:44:21] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[05:44:34] <fikran> rewt: yes, that's how I have it.
[05:45:47] <fikran> wondering if there's a way to have just the built executable.../
[05:47:15] <rewt> that can also go anywhere you want
[05:47:31] <fikran> have a sample? I'm being told go.mod don't exit.
[05:47:34] <fikran> exist*
[05:47:39] <fikran> because they are in the parent directory.
[05:48:35] <fikran> so the Dockerfile's "COPY . ." didn't copy the go.mod file.
[05:49:36] <rewt> run docker build in the dir with the file
[05:50:14] <fikran> but, the dockerfile doesn't exist in that directory...
[05:50:15] <rewt> what are you trying to do exactly?  build a go binary in a docker container?
[05:50:22] <fikran> Yes.
[05:50:30] <rewt> the Dockerfile can be anywhere you want
[05:50:38] <fikran> oh?
[05:51:06] <rewt> docker build -f path/to/Dockerfile
[05:51:58] <rewt> or you can just put it in the same dir as go.mod if you want, and run docker build there
[05:52:49] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Read error: Connection reset by peer)
[05:52:59] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[05:53:10] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[05:53:35] <fikran> I see.
[05:53:37] * fikran tries
[05:53:54] <rewt> why are you building in a docker contaier?
[05:54:05] *** Joins: rcernin (~rcernin@101.189.129.123)
[05:54:09] <fikran> is that...bad?
[05:54:12] <fikran> that does seem wasteful
[05:55:10] <rewt> just wondering... there may be other ways of doing what you really want to do
[05:55:19] <fikran> I'd be interested!
[05:55:37] <rewt> why not just `go build` outside docker?
[05:56:56] <b0nn> Hmm, I build in containers - usually there's a COPY step first, to put all of the code in the container
[05:57:19] <rewt> could also just mount as a volume
[05:57:45] <b0nn> CI/CD
[05:58:15] <fikran> yeah, I'm not that familiar with how to do this.
[05:59:00] <rewt> is this just to build something locally, or do you want automate it, or what are you doing exactly?
[05:59:01] <fikran> so, I manually run `cd directory ; go build .` and then "docker build .`
[05:59:40] <rewt> why docker build?  `go build` already builds the binary
[06:00:10] <fikran> right, so you have this binary and you want to put it in a container.
[06:00:12] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 240 seconds)
[06:00:24] <rewt> why do you need the go.{mod,sum} files in there?
[06:00:27] <fikran> wondering if that's possible.
[06:00:29] <fikran> i don't.
[06:00:31] <fikran> you're right
[06:00:39] <fikran> I just don't understand how to put the pieces togerther except manually
[06:01:00] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:01:09] *** Quits: ejjfunky2 (~ejjfunky@125.164.23.63) (Quit: Leaving)
[06:01:53] *** Joins: ejjfunky (~ejjfunky@125.164.18.108)
[06:02:36] <rewt> so if the docker conatiner is not to build the binary, what's it for?  do you want to deploy the application in k8s or something?
[06:03:19] <fikran> You know, I don't know yet. I'm learning.
[06:03:28] <rewt> hmm, ok
[06:04:01] <rewt> so docker is not /required/ for go at all; it's only if you want to create a docker image for other reasons
[06:04:37] <rewt> after you `go build` you can run that directly (assuming configs etc are proper)
[06:05:12] <rewt> that = resulting binary
[06:11:04] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[06:12:36] *** Joins: justAstache (~justache@user/justache)
[06:13:45] *** Joins: rcernin (~rcernin@101.189.129.123)
[06:22:08] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:22:09] *** Joins: bluedust (~bluedust@117.222.189.19)
[06:23:01] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:28:18] *** Joins: irontom (~user@38.81.106.9)
[06:32:39] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 256 seconds)
[06:33:10] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[06:33:10] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[06:33:10] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[06:44:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:45:03] *** Quits: xiongxin (~Thunderbi@117.136.39.218) (Quit: xiongxin)
[06:48:30] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[06:53:03] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:54:35] *** Joins: treeford (~charleste@user/treeford)
[06:54:40] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Read error: Connection reset by peer)
[06:55:01] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[06:55:18] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Remote host closed the connection)
[06:55:35] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[06:58:22] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Read error: Connection reset by peer)
[06:58:38] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[06:59:04] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Remote host closed the connection)
[06:59:21] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[07:00:02] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[07:07:23] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:24] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 240 seconds)
[07:09:56] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[07:10:32] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:12:18] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 272 seconds)
[07:17:16] *** Joins: Fuzai (~quassel@50.54.159.160)
[07:19:42] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[07:19:58] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[07:19:58] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[07:19:58] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[07:20:30] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[07:23:16] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 245 seconds)
[07:41:00] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 252 seconds)
[07:41:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[07:48:04] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[07:48:04] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[07:48:04] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[07:49:07] *** Quits: kai (~kai@x50d24799.cust.hiper.dk) (Quit: Ping timeout (120 seconds))
[07:49:29] *** Joins: kai (~kai@x50d24799.cust.hiper.dk)
[07:51:50] *** Joins: k8yun (~k8yun@user/k8yun)
[08:02:04] *** Quits: ejjfunky0 (~ejjfunky2@125.164.23.63) (Remote host closed the connection)
[08:02:36] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 240 seconds)
[08:08:03] *** Joins: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net)
[08:08:03] *** Quits: mitt3ns (~agent_whi@c-73-181-78-96.hsd1.co.comcast.net) (Changing host)
[08:08:03] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[08:08:11] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Ping timeout: 256 seconds)
[08:10:44] <bluebird> Why is January 31st + 1 month, March 3rd? Isn't this off? https://go.dev/play/p/JOo8Y9Uw2TD
[08:12:58] <b0nn> https://pkg.go.dev/time#Time.AddDate
[08:13:06] <b0nn> AddDate normalizes its result in the same way that Date does, so, for example, adding one month to October 31 yields December 1, the normalized form for November 31.
[08:13:54] <b0nn> bluebird: at issue is what adding one month /means/ - 28, 29, 30, or 31 days
[08:16:48] <b0nn> IIRC to decrement/increment the month you need to  split the date into its three components, then make and addition
[08:17:01] <b0nn> And handle the edges yourself
[08:18:25] <bluebird> Mm, I may try an work with the normalized dates. Seems like my test case broke because my unit test was using time.Now() and doing math off that, which happened to break on March 1st.
[08:18:57] <b0nn> heh, I fake time in my tests
[08:19:03] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Quit: brb)
[08:19:12] <bluebird> Thinking of doing the same, or at least parse a known time to work off ;p
[08:19:26] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 272 seconds)
[08:19:29] <b0nn> But if you choose to do that, time.Add and time.Subtract use time.Now in the background IIRC
[08:19:50] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:20:06] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[08:21:45] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[08:22:48] <bluebird> Thanks, it looks like there is some time.Now inside some other code, so I will have to see how that messes with everything
[08:23:26] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[08:27:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:27:30] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 260 seconds)
[08:27:41] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Ping timeout: 256 seconds)
[08:29:26] *** Joins: mitt3ns (~agent_whi@172.58.206.154)
[08:29:26] *** Quits: mitt3ns (~agent_whi@172.58.206.154) (Changing host)
[08:29:26] *** Joins: mitt3ns (~agent_whi@user/mitt3ns)
[08:31:36] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[08:31:44] *** Joins: c10l (~c10l@user/c10l)
[08:31:46] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[08:32:01] *** Joins: c10l (~c10l@user/c10l)
[08:32:01] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[08:32:09] *** Joins: c10l (~c10l@user/c10l)
[08:32:10] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[08:32:18] *** Joins: c10l (~c10l@user/c10l)
[08:32:18] *** Quits: c10l (~c10l@user/c10l) (Remote host closed the connection)
[08:32:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[08:35:35] *** Quits: nuh^ (~nuh@207.243.108.170) (Remote host closed the connection)
[08:35:40] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[08:39:33] *** Quits: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Quit: Ping timeout (120 seconds))
[08:39:56] *** Joins: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[08:40:12] *** Joins: dasrael (~rabbit@user/dasrael)
[08:41:28] *** Joins: han-solo (~hanish@user/han-solo)
[08:42:26] *** Joins: treeford (~charleste@user/treeford)
[08:42:36] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 240 seconds)
[08:46:01] *** Joins: todo75 (~todo75@user/todo75)
[08:48:05] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[09:02:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:05:09] *** Joins: irontom (~user@38.81.106.9)
[09:05:11] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[09:05:24] *** Joins: todo75 (~todo75@2601:2c7:4300:1530:d95a:16fc:8ada:1e8d)
[09:06:11] *** Quits: todo75 (~todo75@2601:2c7:4300:1530:d95a:16fc:8ada:1e8d) (Client Quit)
[09:06:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[09:09:20] *** Joins: todo75 (~todo75@user/todo75)
[09:16:02] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 260 seconds)
[09:18:32] *** Joins: han-solo_ (~hanish@178.248.114.83)
[09:18:50] *** Quits: han-solo (~hanish@user/han-solo) (Killed (NickServ (GHOST command used by han-solo_!~hanish@178.248.114.83)))
[09:19:26] *** Quits: han-solo_ (~hanish@178.248.114.83) (Changing host)
[09:19:26] *** Joins: han-solo_ (~hanish@user/han-solo)
[09:19:30] *** han-solo_ is now known as han-solo
[09:25:20] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[09:25:37] *** Joins: todo75 (~todo75@user/todo75)
[09:26:22] *** Quits: todo75 (~todo75@user/todo75) (Client Quit)
[09:29:10] *** Joins: todo75 (~todo75@user/todo75)
[09:30:21] <han-solo> Hello, i'm trying to read request body as JSON using Gin. Is there a helper for it like as for reading form body or params `c.Query`, `c.PostForm` ?
[09:30:45] <han-solo> or do one have to `json.NewDecoder(c.Request.Body).Decode(&data)` ?
[09:32:48] *** Joins: bluedust_ (~bluedust@59.89.219.123)
[09:33:17] *** Quits: bluedust (~bluedust@117.222.189.19) (Ping timeout: 240 seconds)
[09:34:35] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[09:41:14] <han-solo> `c.ShouldBindBodyWith(&data, binding.JSON)` // seems this one ?
[09:44:12] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[09:44:25] *** Joins: rvalue (~rvalue@user/rvalue)
[09:45:34] *** Quits: todo75 (~todo75@user/todo75) (Remote host closed the connection)
[09:46:00] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799) (Ping timeout: 250 seconds)
[09:51:39] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:52:33] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:53:15] *** Quits: knusbaum (~knusbaum@23.249.37.254) (Ping timeout: 256 seconds)
[09:53:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:56:10] *** Joins: knusbaum (~knusbaum@23.249.37.254)
[09:59:36] *** Joins: ghost08 (~ghost08@62.168.104.146)
[10:00:46] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[10:01:24] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[10:04:27] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[10:05:46] *** Joins: todo75 (~todo75@user/todo75)
[10:05:50] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:10:51] *** Joins: fef (~thedawn@user/thedawn)
[10:11:17] *** Quits: normen (~normen@p200300d71749cc00c035b7de523090ce.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[10:11:37] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[10:11:39] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[10:19:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:19:10] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:19:21] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:22:09] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Ping timeout: 252 seconds)
[10:22:58] *** Joins: Giovanni (~Giovanni@31.206.54.14)
[10:23:25] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[10:25:30] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:26:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[10:27:04] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799)
[10:30:53] *** Joins: treeford (~charleste@user/treeford)
[10:31:11] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:35:49] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[10:37:42] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[10:38:27] *** Joins: normen (~normen@p200300d71749cc0051a927f78ca16be9.dip0.t-ipconnect.de)
[10:41:21] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:41:49] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:45:01] *** Quits: Giovanni (~Giovanni@31.206.54.14) (Remote host closed the connection)
[10:45:10] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 260 seconds)
[10:45:44] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[10:46:44] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[10:46:56] *** Joins: mrig (~mrig@user/mrig)
[10:51:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:55:25] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[10:56:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:00:39] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[11:00:56] *** Joins: todo75 (~todo75@user/todo75)
[11:04:35] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[11:08:12] *** Quits: tripfandango (~tripfanda@5.29.15.59) (Ping timeout: 240 seconds)
[11:09:20] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:12:45] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:13:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:20:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[11:24:26] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:a073:f53b:8d4:a527)
[11:25:48] *** Joins: shka (~herr@109.231.3.55)
[11:25:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:26:51] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:28:48] *** Joins: rendar (~rendar@user/rendar)
[11:34:19] *** cold__ is now known as Lost
[11:36:22] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[11:46:13] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[11:49:12] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799) (Quit: Leaving)
[11:50:57] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[11:52:44] *** Quits: ghost08 (~ghost08@62.168.104.146) (Quit: WeeChat 3.4)
[11:53:11] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:53:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[11:56:00] *** Joins: ghost08 (~ghost08@62.168.104.146)
[11:56:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[11:57:55] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[11:58:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:00:32] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:a073:f53b:8d4:a527) (Ping timeout: 240 seconds)
[12:01:32] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Ãœberall.)
[12:01:48] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[12:02:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[12:03:37] *** Joins: Guest90_ (~textual@2403-5804-232--6849-60f9-d506-c04e.ip6.aussiebb.net)
[12:04:01] *** Joins: tripfandango (~tripfanda@77.137.68.50)
[12:09:35] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[12:12:57] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[12:14:41] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:19:01] *** Joins: treeford (~charleste@user/treeford)
[12:19:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[12:22:30] *** Joins: rcernin (~rcernin@101.189.129.123)
[12:24:34] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[12:27:09] *** Joins: absc (~absc@81.31.144.28)
[12:30:09] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: You have been kicked for being idle)
[12:35:30] *** Quits: absc (~absc@81.31.144.28) (Remote host closed the connection)
[12:35:50] *** Joins: absc (~absc@81.31.144.28)
[12:47:57] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:50:04] *** Joins: xsteadfastx (~marv@94.31.99.245)
[12:51:08] *** Joins: jespada (~jespada@185.69.145.16)
[12:52:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[12:56:06] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Read error: Connection reset by peer)
[13:00:01] *** Quits: mitt3ns (~agent_whi@user/mitt3ns) (Quit: bbl)
[13:15:24] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[13:16:14] *** Quits: jespada (~jespada@185.69.145.16) (Read error: Connection reset by peer)
[13:16:27] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[13:17:17] *** Quits: Guest90_ (~textual@2403-5804-232--6849-60f9-d506-c04e.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[13:18:16] *** Joins: jespada (~jespada@85.255.234.170)
[13:20:02] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:21:40] *** Joins: jespada_ (~jespada@85.255.234.170)
[13:22:26] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:22:36] *** Quits: jespada (~jespada@85.255.234.170) (Ping timeout: 240 seconds)
[13:22:58] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[13:25:15] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:26:17] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[13:27:14] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:37:10] *** Quits: ghost08 (~ghost08@62.168.104.146) (Quit: WeeChat 3.4)
[13:46:07] *** Quits: bluedust_ (~bluedust@59.89.219.123) (Remote host closed the connection)
[13:50:03] *** Joins: Guest90_ (~textual@2403-5804-232--6849-60f9-d506-c04e.ip6.aussiebb.net)
[13:54:36] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[13:54:43] *** Joins: et_ (~et@user/et)
[13:55:09] *** et_ is now known as et
[13:55:28] *** Joins: mei (~mei@user/mei)
[13:56:04] *** Joins: chrisvanmeer (~chrisvanm@46.243.199.66)
[13:56:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:56:19] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:56:27] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[13:59:07] *** Parts: chrisvanmeer (~chrisvanm@46.243.199.66) ()
[14:00:40] *** Joins: et (~et@user/et)
[14:01:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[14:02:33] *** Joins: chrisvanmeer (~chrisvanm@46.243.199.66)
[14:02:39] <chrisvanmeer> Hi everyone
[14:03:06] <chrisvanmeer> I have a problem within a HashiCorp Nomad template...and Nomad uses Go, I want to do some string manipulation within a range, but whatever I try, it fails me
[14:03:25] <chrisvanmeer> Anyone here familiar with Nomad templates?
[14:04:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[14:06:38] *** Joins: et_ (~et@user/et)
[14:06:56] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[14:07:12] *** Joins: treeford (~charleste@user/treeford)
[14:07:41] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[14:07:41] *** et_ is now known as et
[14:12:32] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[14:17:19] *** Parts: pyzozord (pyzozord@user/pyzozord) ()
[14:18:32] *** Joins: bluedust (~bluedust@59.89.219.123)
[14:21:19] *** Quits: bluedust (~bluedust@59.89.219.123) (Remote host closed the connection)
[14:21:34] *** Joins: bluedust (~bluedust@59.89.219.123)
[14:22:24] *** Joins: bkircher (~bkircher@2001:a61:246d:f401:4760:9a66:af72:3722)
[14:22:51] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:29:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:34:46] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[14:35:52] *** Joins: crashrep (~crashrep@user/crashrep)
[14:37:56] *** Quits: mei (~mei@user/mei) (Quit: mei)
[14:44:07] *** Quits: chrisvanmeer (~chrisvanm@46.243.199.66) (Quit: Connection closed)
[14:45:16] <aLeSD[m]> whi this is bad ?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/6e3bf77d833612f537cdddbf8be077ee7fabd484)
[14:45:36] <aLeSD[m]> I am getting can't handle non-empty unnamed struct types when I run mockgen
[14:46:15] <aLeSD[m]> I mean I won't create a type only for that
[14:46:26] <aLeSD[m]> am I wrong ?
[14:52:52] *** jpneverwas is now known as neverwas
[14:56:03] *** Joins: Guest90__ (~textual@2403-5804-232--6025-b5cb-41d6-89f7.ip6.aussiebb.net)
[14:58:12] *** Quits: Guest90_ (~textual@2403-5804-232--6849-60f9-d506-c04e.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[14:58:26] *** Quits: ryusaku (~ryu`@c6A334BC1.dhcp.as2116.net) (Ping timeout: 272 seconds)
[15:03:01] *** Joins: edd_lc (~edd_lc@85.65.219.112.dynamic.barak-online.net)
[15:04:08] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 272 seconds)
[15:05:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[15:06:35] *** Joins: theo (~theo@user/theo)
[15:08:37] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[15:09:24] *** Quits: Guest90__ (~textual@2403-5804-232--6025-b5cb-41d6-89f7.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[15:20:34] *** Joins: ekathva (~ekathva@2001:999:51:19b8:865d:874e:7a83:9797)
[15:27:44] *** Joins: Atque (~Atque@user/atque)
[15:32:24] *** Joins: dntreou (~yakiza@inet-2a02-6900-8804-e010--23.oracle-ocna.com)
[15:36:49] *** Joins: enyc (~enyc@user/enyc)
[15:37:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:47:17] *** Quits: edd_lc (~edd_lc@85.65.219.112.dynamic.barak-online.net) (Ping timeout: 240 seconds)
[15:47:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[15:51:20] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[15:55:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:55:18] *** Joins: treeford (~charleste@user/treeford)
[16:00:47] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[16:02:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[16:07:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[16:09:10] *** Joins: han-solo (~hanish@user/han-solo)
[16:12:18] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:17:20] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:19:54] <shiroyasha> aLeSD[m]: If you find it unpleasant to define types like that, definitely don't look at `net.NS`.
[16:21:07] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:23:43] *** Joins: crashrep (~crashrep@user/crashrep)
[16:28:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[16:30:46] *** Joins: crashrep (~crashrep@user/crashrep)
[16:30:53] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:32:40] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:34:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[16:35:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[16:37:43] *** Joins: crashrep (~crashrep@user/crashrep)
[16:39:19] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:40:47] *** Joins: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de)
[16:44:32] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[16:45:25] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[16:50:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:51:30] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[16:52:25] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[16:52:25] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Client Quit)
[16:56:18] *** Joins: mlaogd^ (~mlaogd@207.243.108.170)
[17:03:05] *** Joins: oc (~oc@45.89.192.237)
[17:05:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:09:47] *** Joins: alwyn (~alwyn@user/alwyn)
[17:10:14] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:10:36] <oc> How do I null-check / guard a pointer inside a struct? i have a ```type Something struct { CreatedAt  *time.Time   `json:"created_at"` }```. Because of an API error, the created_at field is returning null. In my go code I would like to guard for this, but something.CreatedAt == nil .. reflect.ValueOf(something.CreatedAt).IsNil() .. etc do not pick up the null pointer / invalid address at the correct place.
[17:10:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[17:11:16] <oc> (I still get a SIGSEGV // "panic: runtime error: invalid memory address or nil pointer dereference")
[17:11:17] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Ping timeout: 256 seconds)
[17:13:07] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:14:07] *** Joins: rcernin (~rcernin@101.189.129.123)
[17:20:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[17:20:57] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:22:46] <twaapo> i try to do along lines: if != nil then deref pointer
[17:22:59] <twaapo> forces me to explicitly state where deref is happening
[17:23:16] <twaapo> .. it may have sometimes occurred in surprising places
[17:24:27] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:28:35] *** Quits: rvt (~rvt@librecad/rvt) (Ping timeout: 256 seconds)
[17:31:38] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 268 seconds)
[17:38:12] <bpalmer> oc: can you boil it down to a test case? Just based on what you're saying, I'm wondering if you're looking at the right spot ... e.g., perhaps it's the pointer to the struct itself that's nil, not its field
[17:39:05] <oc> it fails/crashes on something.CreatedAt.Unix()
[17:39:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[17:39:25] *** Joins: crashrep (~crashrep@user/crashrep)
[17:39:36] <oc> so yeah, it might be that something.CreatedAt is some kind of valid reference with an invalid state
[17:40:17] <bpalmer> oc: what is the type of something?
[17:40:42] <bpalmer> is it a Something, or a *Something ?
[17:41:20] *** Joins: whaley (~whaley@066-026-111-078.biz.spectrum.com)
[17:43:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[17:43:37] *** Joins: treeford (~charleste@user/treeford)
[17:45:45] *** Joins: crashrep (~crashrep@user/crashrep)
[17:47:28] *** Joins: Midjak (~Midjak@82.66.147.146)
[17:48:45] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[17:49:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:49:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[17:50:56] *** Joins: kappa (~kappa@117.216.167.131)
[17:51:04] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[17:52:07] *** Parts: kappa (~kappa@117.216.167.131) ()
[17:54:14] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[17:54:18] *** Joins: mrig (~mrig@user/mrig)
[17:55:45] *** Joins: justAstache (~justache@user/justache)
[17:56:35] *** Quits: llorllale (~llorllale@198.98.119.85) (Quit: WeeChat 3.4)
[17:58:53] *** Joins: crashrep (~crashrep@user/crashrep)
[18:06:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[18:09:53] *** Joins: arkurious (~arkurious@user/arkurious)
[18:10:03] *** Joins: Fuzai (~quassel@50.54.159.160)
[18:14:45] *** Quits: ejjfunky (~ejjfunky@125.164.18.108) (Ping timeout: 256 seconds)
[18:16:49] *** Joins: rvt (~rvt@librecad/rvt)
[18:20:02] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[18:21:17] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[18:21:18] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[18:21:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[18:24:16] *** Quits: X-Scale (~ARM@83.223.232.175) (Ping timeout: 272 seconds)
[18:24:18] *** X-Scale` is now known as X-Scale
[18:24:34] *** Joins: crashrep (~crashrep@user/crashrep)
[18:26:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:27:54] *** Quits: whaley (~whaley@066-026-111-078.biz.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[18:28:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[18:28:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[18:29:56] *** Joins: crashrep (~crashrep@user/crashrep)
[18:30:24] *** Quits: rbn (~rbn@user/rbn) (Read error: Connection reset by peer)
[18:39:02] *** Joins: rostero (uid236576@id-236576.lymington.irccloud.com)
[18:48:20] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[18:53:39] *** Joins: treeford (~charleste@user/treeford)
[18:59:50] *** bkircher is now known as bkircher_afk
[19:09:21] <piwu> How can I get the line number while using bufio.Scanner? ( https://stackoverflow.com/a/16615559 )
[19:09:21] <piwu> It'd be nice to pass the exact line where an error occurred inside a multi-million line text file.
[19:09:50] <bpalmer> i := 0; for scanner.Scan() { i++ ; ... }
[19:09:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[19:10:10] <piwu> you can do it cleaner
[19:10:18] <bpalmer> oh, how?
[19:10:25] <piwu> for i := 0; scanner.Scan(); i++ {} ?
[19:10:32] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:10:40] <piwu> scanner.Scan() supposedly returns a bool
[19:10:53] <bpalmer> sure, that'd work; I don't know that it's "cleaner"
[19:10:55] <piwu> so it's just called and checked if next for statement wil lrun
[19:10:59] <piwu> well it's more readable
[19:11:00] <piwu> imo
[19:19:35] *** 076AAGVW6 is now known as avakand
[19:23:20] *** Joins: neurocyte0917090 (~neurocyte@IP-045128181095.dynamic.medianet-world.de)
[19:23:20] *** Quits: neurocyte0917090 (~neurocyte@IP-045128181095.dynamic.medianet-world.de) (Changing host)
[19:23:20] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:25:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:27:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[19:29:45] *** Joins: crashrep (~crashrep@user/crashrep)
[19:30:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:33:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:36:32] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799)
[19:37:42] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[19:41:28] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[19:42:44] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[19:48:25] *** Joins: crashrep (~crashrep@user/crashrep)
[19:52:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:55:47] *** Joins: crashrep (~crashrep@user/crashrep)
[19:58:54] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[20:00:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[20:02:49] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:05:07] *** Joins: crashrep (~crashrep@user/crashrep)
[20:10:49] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[20:14:37] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[20:15:04] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[20:16:21] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:16:42] *** Joins: beholders_eye (~weechat@2804:7f3:686:2b5e:c356:e59:11fd:363b)
[20:17:37] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[20:21:24] *** Quits: jjonah (~jjonah@p200300d5d7202600dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:22:57] *** Quits: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net) (Ping timeout: 240 seconds)
[20:23:43] *** Joins: Guest5916 (~gspbirel5@c-73-214-199-7.hsd1.pa.comcast.net)
[20:24:04] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:27:51] *** Joins: andlabs (~andlabs@2605:ef80:8055:d4:45a8:38d4:a9e:d643)
[20:31:04] *** Quits: Emet-Selch (~haise01@user/haise01) (Read error: Connection reset by peer)
[20:42:40] *** Joins: phf (~user@46.23.94.225)
[20:45:00] *** Quits: henry40408 (~henry4040@175.182.112.153) (Ping timeout: 240 seconds)
[20:46:28] *** Parts: phf (~user@46.23.94.225) (ERC (IRC client for Emacs 27.2))
[20:49:18] <han-solo> hello, what's the recommended postgres client ?
[20:55:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[20:58:48] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[20:59:42] *** Quits: antarus (~antarus@woodpecker.gentoo.org) (Changing host)
[20:59:42] *** Joins: antarus (~antarus@gentoo/developer/antarus)
[21:04:31] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[21:06:25] *** Quits: dza (~dza@user/dza) (Quit: Ping timeout (120 seconds))
[21:06:32] *** Quits: lxdr (~lxdr@user/lxdr) (Quit: Ping timeout (120 seconds))
[21:06:44] *** Joins: lxdr (~lxdr@user/lxdr)
[21:06:45] *** Joins: dza (~dza@user/dza)
[21:07:04] *** Quits: caubert (~caubert@136.244.111.235) (Read error: Connection reset by peer)
[21:07:26] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (Quit: ZNC 1.8.2 - https://znc.in)
[21:07:27] *** Joins: caubert (~caubert@136.244.111.235)
[21:07:40] *** Joins: Mathisen_ (mathisen@about/windows/staff/mathisen)
[21:08:57] *** Quits: novns (~novns@user/novns) (Ping timeout: 272 seconds)
[21:10:32] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:10:50] *** Quits: dntreou (~yakiza@inet-2a02-6900-8804-e010--23.oracle-ocna.com) (Read error: Connection reset by peer)
[21:11:59] *** Quits: sailorCat (~sailorCat@mail2.gajsin.name) (Quit: ZNC 1.8.2 - https://znc.in)
[21:12:12] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:12:26] *** Joins: crashrep (~crashrep@user/crashrep)
[21:14:13] <seebs> i don't think there's a "the" recommended postgres client.
[21:16:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:17:13] *** Quits: foobaz (~oofabz@phoenix.frammish.org) (Quit: ZNC 1.8.2 - https://znc.in)
[21:17:27] *** Joins: foobaz (~oofabz@phoenix.frammish.org)
[21:17:58] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 260 seconds)
[21:20:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[21:21:23] *** Joins: treeford (~charleste@user/treeford)
[21:26:47] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[21:31:15] *** Joins: crashrep (~crashrep@user/crashrep)
[21:32:45] *** Joins: bluedust_ (~bluedust@103.165.167.61)
[21:35:08] *** Joins: casastorta (~casastort@neo1.krivokuca.net)
[21:35:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[21:36:36] *** Quits: andlabs (~andlabs@2605:ef80:8055:d4:45a8:38d4:a9e:d643) (Ping timeout: 240 seconds)
[21:36:48] *** Quits: bluedust (~bluedust@59.89.219.123) (Ping timeout: 272 seconds)
[21:38:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:38:38] <ishan> Hello everyoneo
[21:39:15] <piwu> stdlib does have https://pkg.go.dev/database/sql, and https://pkg.go.dev/github.com/lib/pq seems to be the most popular driver
[21:39:28] <ishan> Is this an "okay" program or am I missing something related to closures and how they capture outside variables? It appears to be working as I'd expect https://go.dev/play/p/HRGonQFMOsy
[21:40:12] <piwu> han-solo: ^^ (see above)
[21:40:12] <piwu> but yeah, there is no recommendation per se.. prefer stdlib, and use something other if it works better for you
[21:44:50] *** Joins: nicks (~nds@213.205.242.174)
[21:45:55] *** Quits: bluedust_ (~bluedust@103.165.167.61) (Remote host closed the connection)
[21:48:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[21:49:32] <han-solo> piwu: Thanks
[21:49:46] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[21:51:04] *** Joins: k8yun (~k8yun@user/k8yun)
[21:52:35] *** Quits: nicks (~nds@213.205.242.174) (Quit: nds)
[21:53:25] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Ping timeout: 240 seconds)
[21:54:39] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[21:57:32] *** Quits: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[22:00:36] <bpalmer> ishan: sure. You'd have to be a little bit more careful if separate goroutines were involved, but as is, that seems fine.
[22:02:28] *** Joins: Natch (~natch@c-4db8e255.014-297-73746f25.bbcust.telenor.se)
[22:02:54] *** Joins: stealth[] (~stealth]@2001:9e8:36cd:c300:e448:14c8:edb1:79ac)
[22:03:14] *** Mathisen_ is now known as Mathisen
[22:03:24] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[22:03:33] <ishan> bpalmer: Thank you so much! There are no goroutines involved here.
[22:03:52] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[22:04:40] <piwu> What is a sane way to collect results from goroutines? I have a for statement launching a goroutine for each line scanned.
[22:04:40] <piwu> I expect to get back a struct, to combine them to parent func output []structs.
[22:04:40] <piwu> I want to exit as soon as any of the goroutine encounters an error.
[22:04:40] <piwu> ***
[22:04:40] <piwu> I can't do multiple for x := range channel; as they are blocking.
[22:04:40] <piwu> I have a separate goroutine to do wg.Wait(), and then close() all channels one by one (I couldn't find a closeall() / variadic method to do this, a bit redundant code)
[22:04:40] <piwu> https://gobyexample.com/closing-channels has go func() { for { j, more :=... but using it I got len(output) = 2 (instead of expected 3 in test), and used to get 3 90% of the time
[22:04:41] <piwu> If I debug, it always gives me 3. I'm using append() in the gobyexample variant of my code.
[22:05:10] *** Joins: bluedust (~bluedust@103.165.167.61)
[22:07:08] <bpalmer> piwu: you mean you ran the example code, and get len (output) = 2?
[22:07:22] <piwu> I integrated it in to my code.
[22:07:27] <piwu> copy-pasted and renamed variables
[22:09:56] *** Parts: stealth[] (~stealth]@2001:9e8:36cd:c300:e448:14c8:edb1:79ac) (Leaving)
[22:10:09] <piwu> I've encountered the question of handling return values of goroutines before. Parent function returns ([]structName, err), parent function launches goroutines, stop on first error, and each non-erroring goroutine is expected to emit a structName, that gets added to the mutual slice/pool of the parent return ([]structName, nil)
[22:10:18] <bpalmer> well, if there's code it's worth looking at, but one of the simpler approaches to what you wnt is this:
[22:10:59] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 268 seconds)
[22:11:11] *** Joins: novns (~novns@user/novns)
[22:11:35] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[22:11:52] <bpalmer> type MaybeStruct struct{err error; value *StructType}; func foo(ch <-chan MaybeStruct) MaybeStruct { if err != nil { return MaybeStruct{err: err} } return MaybeStruct{value: value}}
[22:12:06] <bpalmer> and then you start 5000 goroutines and then just collect 5000 MaybeStructs
[22:13:07] <bpalmer> for ms := range ch { if ms.err != nil { cancelFunc(); return ms.err } ...}
[22:13:44] <bpalmer> all of the go routines accept a cancellable context, you return early as soon as there are errors, etc.
[22:14:11] <bpalmer> rather than range ch , I guess that should be for i := 0; i < 5000; i++ { ms := <- ch; ... }
[22:15:13] <piwu> about ctx / context: can context.Context help me or not here? I still haven't found an use for it across various packages, not exactly sure where it would be useful in general (larger perspective).
[22:15:16] <han-solo> close on the channel from sender, will break the loop, no ?
[22:15:27] <piwu> would, yea
[22:15:33] <han-solo> so just close it on error ?
[22:15:43] <piwu> I want to fwd the error
[22:16:01] <piwu> but here, yes, I'd prefer the one channel approach instead (by bpalmer)
[22:16:33] <piwu> re: I want to fwd;; otherwise you say just 'error error we had some kind of error, don't know what thouhg'
[22:17:01] <piwu> I'll refactor the code bits to use one chan and see what blows up next
[22:17:24] <han-solo> i am thinking of two channels, one for data and other to signify done, and done will send a struct with err
[22:17:29] <han-solo> but yeah, that's two channels
[22:18:07] *** Joins: treeford (~charleste@user/treeford)
[22:20:17] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[22:22:52] <piwu> well, for rtrn := range returnchan {... works
[22:23:06] *** Joins: tane (~tane@user/tane)
[22:28:25] *** Quits: moto (~moto@user/moto) (Remote host closed the connection)
[22:29:29] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[22:30:33] *** Joins: crashrep (~crashrep@user/crashrep)
[22:34:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:36:26] *** Joins: crashrep (~crashrep@user/crashrep)
[22:37:16] *** Quits: bluedust (~bluedust@103.165.167.61) (Remote host closed the connection)
[22:37:20] *** Joins: neverfindme (~hayden@158.123.160.43)
[22:40:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:40:51] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[22:44:09] *** Joins: bluedust (~bluedust@103.165.167.61)
[22:51:13] *** Joins: crashrep (~crashrep@user/crashrep)
[22:51:54] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[22:55:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[22:55:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[22:56:19] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:58:27] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[22:59:29] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[23:01:28] <nuclearg1> could someone here point me to some documentation on using switch / case with multiple expressions? I have never seen this before, so I'd like to just understand the bbenefit of rolling multiple things into one case statement for example? like case "foo", "bar":  rather than case "foo": followed by case "bar". Normally i would just stack case statements together.
[23:02:48] <b0nn> nuclearg1: I don't know of any docs that might be helpful, but I use case int, int32, int64: a lot, because it groups together the cases in an easy to read manner
[23:03:26] <nuclearg1> is it just a readability thing? Is the performance the same as doing case int: case int32 case int64 (followed by new lines)
[23:03:37] <b0nn> I mean, this is a style/ readability question at the end of the day, rather than a performance
[23:03:44] <nuclearg1> ok thanks i just wanted to confirm
[23:03:56] <nuclearg1> i wasn't sure if it was faster to do it that way
[23:04:23] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[23:04:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:05:00] <b0nn> I /think/ that the compiler will convert it to the optimal arrangement (a case statement is a jump table IIRC)
[23:05:20] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[23:05:41] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:05:45] <foobaz> nuclearg1: switch statements don't fall through by default in go like they do in C, so stacking case statements may not work like you expect
[23:05:55] <foobaz> consider https://go.dev/play/p/8eADqJqAi8o
[23:06:00] <nuclearg1> ah
[23:06:01] <nuclearg1> thank you
[23:06:16] *** Joins: crashrep (~crashrep@user/crashrep)
[23:10:17] *** Quits: Fuzai (~quassel@50.54.159.160) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:10:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:13:00] *** Joins: andlabs (~andlabs@104.132.34.100)
[23:16:01] *** Joins: crashrep (~crashrep@user/crashrep)
[23:18:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[23:20:16] <nitrix> They should've named it match instead of switch to avoid that kind of surprise.
[23:21:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:21:47] <ikke> match sounds like pattern matching, which this isn't (and I hope one day would be added)
[23:23:39] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[23:25:26] <fizzie> How about "select"? Oh, wait.
[23:25:37] *** Joins: crashrep (~crashrep@user/crashrep)
[23:26:08] <fizzie> Could've been a "choose" statement, perhaps.
[23:26:08] <b0nn> Having select and switch in the language doing very similar things, just to different types, was, IMO, an error
[23:35:46] *** Joins: c10l (~c10l@user/c10l)
[23:37:31] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:37:46] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[23:40:36] <nitrix> Considering for/while got blended into one concept, switch/select would've been quite reasonable too.
[23:41:36] *** Joins: tomasfarias6 (~tomasfari@user/tomasfarias)
[23:43:43] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 256 seconds)
[23:43:43] *** tomasfarias6 is now known as tomasfarias
[23:48:56] *** Joins: jpw (~jpw@user/jpw)
