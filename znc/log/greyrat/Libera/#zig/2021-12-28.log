[00:00:02] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Client Quit)
[00:00:04] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[00:01:45] <andrewrk> bw, to be clear: making zig super easy to build *is* definitely a goal
[00:02:09] <andrewrk> the discussion was about what the definition of "a build of zig" is
[00:02:36] <bw> Fair
[00:05:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[00:05:49] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:05:51] <andrewrk> "Does Zig support cross compiling to AArch64?" -> the answer to this question is simply "Yes."
[00:06:13] <andrewrk> if you have something that does not support cross compiling to aarch64, then you have something that is not zig
[00:06:54] <andrewrk> in other words, a fork. So buck up and maintain a fork, or compile zig from source (including LLVM). There's a handy zig-bootstrap repository you can use.
[00:08:04] *** Joins: bcmyers (~textual@cpe-76-92-188-7.kc.res.rr.com)
[00:08:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[00:08:34] <bw> the person in question was trying to use zig cc. Does that still count as “zig” in this discussion? Isn’t that just a wrapper around clang with better defaults and pre-packaged headers for cross-comp?
[00:09:23] <andrewrk> no, that is not an accurate description
[00:09:32] *** Joins: bcmyers_ (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[00:09:41] <andrewrk> and yes it still counts as zig
[00:13:52] *** Quits: bcmyers (~textual@cpe-76-92-188-7.kc.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[00:14:12] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[00:14:48] *** Quits: bcmyers_ (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Quit: bcmyers_)
[00:15:32] *** Joins: bcmyers_ (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[00:16:18] *** Quits: bcmyers_ (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Client Quit)
[00:21:27] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[00:35:03] *** Joins: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044)
[00:37:51] *** Quits: xackus_ (~xackus@185.15.0.3) (Ping timeout: 245 seconds)
[00:53:12] *** Joins: raghavgururajan (ea769b8000@user/raghavgururajan)
[00:59:11] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 256 seconds)
[01:07:23] *** Joins: drewr (~drew@user/drewr)
[01:12:56] *** Joins: Arnavion (arnavion@user/arnavion)
[01:13:21] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[01:19:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[01:22:36] <Wolf480pl> Hello, I'm trying to write a tcp server in zig, and when I tried a single-threaded build with io_mode = evented, I hit a @compileError(TODO) in event.Loop.sleep, which apparently is used called from linuxWaitFd as a fallback of a fallback
[01:22:51] <Wolf480pl> this one https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L829
[01:23:41] <Wolf480pl> is this expected that evented io won't work at all in single-threaded mode?
[01:24:50] <Wolf480pl> or was that sleep in linuxWaitFD meant to be blocking? https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L538
[01:25:17] <andrewrk> Wolf480pl, evented I/O with -fsingle-threaded in the std lib is not implemented yet
[01:25:29] <Wolf480pl> kthx
[01:26:04] <andrewrk> Wolf480pl, note that this is different than evented I/O with std.event.Loop.initSingleThreaded() which is single-threaded evented I/O but uses a thread pool for I/O for some cases
[01:26:16] <andrewrk> -fsingle-threaded means, really, do not spawn more than one OS thread
[01:26:56] <Wolf480pl> I was trying single-threaded because with multi-threaded evented IO I was seeing my process use 200-300% cpu (always mutliple of full core) after there was no more requests coming
[01:27:34] <Wolf480pl> so I was trying to figure out if this is a race condition or sth, but maybe I'm just using async wrong or sth...
[01:29:48] *** Joins: livoreno (~livoreno@user/notzmv)
[01:31:25] *** Joins: drewr (~drew@user/drewr)
[01:32:13] *** Joins: jokoon (~eio@2a01:e0a:542:b20:c1b1:3552:fd0a:3a58)
[01:34:57] *** Quits: jokoon (~eio@2a01:e0a:542:b20:c1b1:3552:fd0a:3a58) (Client Quit)
[01:35:36] *** Quits: drewr (~drew@user/drewr) (Client Quit)
[01:45:12] *** Quits: rgrinberg (~textual@2806:101e:7:def:5c7c:5699:6e7:d044) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:46:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[01:49:00] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[01:53:11] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[02:14:37] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 240 seconds)
[02:21:21] *** Joins: Arnavion (arnavion@user/arnavion)
[02:51:57] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 256 seconds)
[02:56:26] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[02:59:04] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:12:01] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[03:16:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:27:16] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[03:33:13] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:34:06] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[03:35:06] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Client Quit)
[03:35:53] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[03:36:59] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Client Quit)
[03:42:49] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 250 seconds)
[03:45:13] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 256 seconds)
[03:45:21] *** Joins: spoonz (~x@user/spoonz)
[03:47:41] *** Joins: Arnavion (arnavion@user/arnavion)
[03:56:27] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[04:12:59] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[04:34:16] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[04:50:39] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:10:13] <daurnimator> earnestly: yep. though that is all through several issues filed with the zig project to make it work nicely.
[05:19:43] <daurnimator> motiejus: interesting rabbit whole there on brotli. 5% performance improvement by using unaligned memory accesses.
[05:20:41] <daurnimator> It is likely a good piece of anecdata to a conversation we had here probably a year or so ago about arrays of `u24`
[05:24:46] *** breavyn_ is now known as breavyn
[05:29:20] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[05:32:11] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:38:21] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[05:42:43] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Quit: noeontheend)
[05:43:39] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 256 seconds)
[05:44:02] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[05:48:46] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[05:49:41] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Client Quit)
[05:51:38] *** Quits: spoonz (~x@user/spoonz) (Quit: Lost terminal)
[05:54:41] *** Joins: livoreno (~livoreno@user/notzmv)
[06:00:16] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[06:04:03] *** Quits: frmdstryr (~jrm@172.58.203.104) (Ping timeout: 256 seconds)
[06:24:48] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[06:43:56] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Remote host closed the connection)
[06:45:11] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[06:49:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:32:01] <gpanders> I want to pass a function as an argument to a C function, i.e. the C function has a parameter of type void(*)(void *context, const void *src, size_t len). Zig translates this into `fn (?*anyopque, ?*const anyopaque, usize)` and if I try to pass a function with type `fn(*std.ArrayList(u8), [*]u8, usize)` as an argument, I get a mismatched type compiler error: parameter 0 '*std.ArrayList(u8)' cannot cast into '?*anyopaque'
[07:32:27] <gpanders> what is the right way to proceed in a situation like this? the language ref doesn't say much about anyopaque, so I'm not sure how to handle these
[07:33:36] <andrewrk> gpanders, that cast should be allowed. it's a compiler bug. if I remember correctly there is even an open issue for it already
[07:33:44] <andrewrk> you can work around it with @ptrCast
[07:35:30] <gpanders> thanks, that works
[07:37:11] *** Quits: moog (~moog@107.126.53.93) (Remote host closed the connection)
[07:41:10] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:46:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:51:32] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[08:01:55] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 256 seconds)
[08:05:15] *** Joins: amk (~amk@109.255.169.126)
[08:31:23] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[08:40:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[08:43:20] *** Quits: squeek502 (~squeek502@user/squeek502) (Remote host closed the connection)
[08:43:27] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Remote host closed the connection)
[08:44:07] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[08:57:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:59:20] *** Joins: drewr (~drew@user/drewr)
[09:24:35] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[09:24:57] *** Joins: bindu (~bindu@user/bindu)
[09:42:45] *** Joins: badsektor (~badsektor@user/badsektor)
[09:59:17] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[10:01:35] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Read error: Connection reset by peer)
[10:02:33] *** Joins: notzmv (~zmv@user/notzmv)
[10:03:00] *** Joins: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c)
[10:14:46] <Stalevar> bw, I'd disagree about "better defaults" though, because my program works in clang and doesn't with zig cc
[10:18:41] <ifreund> Stalevar: your program relies on undefined behavior and guessing how the compiler will lay out the stack, which afaik is not part of the C language spec
[10:20:19] <ifreund> I wonder if -fstack-protector-strong would help you reproduce with clang
[10:25:48] <Stalevar> ifreund, the program still works fine both with gcc and clang
[10:40:56] *** Joins: phaleth (~phaleth@user/phaleth)
[10:43:54] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:44:30] *** Joins: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com)
[10:50:56] <freshcoffee> longshot but since `zig cc` enables more cpu features than clang, you might try to match similar cpu features
[11:12:00] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[11:14:08] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:14:57] *** Quits: drewr (~drew@user/drewr) (Ping timeout: 240 seconds)
[11:29:31] <motiejus> Stalevar: I had the same opinion first when I was onboarding zig cc to my stack when I first stumbled on an "illegal instruction". The was directed to this explanation on this very IRC channel: https://github.com/ziglang/zig/issues/4830#issuecomment-605491606
[11:30:12] <motiejus> It was enough to convince me it's the right thing to do, and as a result I dropped the default optimizations from my toolchain
[11:37:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.3)
[11:58:40] *** Joins: Seng (~nick@hurtig.ninja)
[12:35:55] <Seng> Hey, I've got this tiny piece of code. https://0bin.net/paste/XN+aBL9n#6PhrnVSADr1KeDNMdU1CqXnyJYciBvqiT3sMOnPf4QM
[12:36:08] <Seng> When I run it I get the following; .\src\main.zig:9:20: error: expected optional type, found 'std.process.NextError!?[:0]u8'
[12:36:55] <Seng> So when I try to while over an error union with a nullable type. How would I go ahead and do that? I can find any examples I can make sense of.
[12:38:04] <Seng> https://ziglang.org/documentation/master/#while-with-Error-Unions from reading the docs I'm not entirely sure if I must add an else statement to handle the error
[12:41:49] <Seng> If I add an else, I get the optional value in the loop and can loop the args.
[12:42:14] <Seng> So I think my question is if I MUST handle the error with an else?
[12:43:41] <Seng> Okay, I had the bright idea to call args.next with a try. Now the value is neither an error nor an optional. This makes no sense!
[12:43:45] <Seng> Back to reading docs!
[12:44:03] <Seng> Also I'm getting memory leaks :') Thanks, GPA.
[12:50:56] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:01:02] *** Quits: rgrinberg (~textual@2806:265:5401:9431:c06f:a951:3576:df5c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:09:57] *** Joins: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de)
[13:13:05] <tealeg> Hello!  I am just learning my way around Zig. I'm writing a small library that wraps a C library, and whilst it builds correctly with "zig build", I get linking errors when I try to use "zig test".  Specifically "C import failed" and "libc headers not available; compilation does not link against libc", and finally "'libpq-fe.h' file not found".  Do I need to do something extra in the build.zig to have this work for testing? 
[13:14:05] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[13:18:24] <ikskuh> yeah
[13:18:37] <ikskuh> apply all changes you did to `exe` also to `test_step`
[13:18:45] <ikskuh> both support the same link options
[13:18:55] <ikskuh> if you don't link libc to your test, you cannot use libc in the test
[13:19:01] <tealeg> ah, I added them to the lib I think, Ok let's try that, thanks.
[13:22:00] <tealeg> hmm, nope still failing.  All I had in the lib was: lib.linkSystemLibrary("c"); - but adding that call to the test_step didn't seem to help :-( 
[13:26:17] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 240 seconds)
[13:28:12] <ikskuh> can you link the full build.zig?
[13:30:01] *** Quits: bcmyers (~bcmyers@cpe-76-92-188-7.kc.res.rr.com) (Ping timeout: 256 seconds)
[13:33:22] <tealeg> yeah, here you go: https://gist.github.com/tealeg/999aeb6f7b1531ee4910b85acc715c7e
[13:36:29] <Seng> Can I ask zig to increase the amount of allowed backwards branches when comptiming a loop with a known input?
[13:38:03] <Seng> I found it in the docs :) Expected it to be in the compiler help screens, but it's part of the language (:
[13:46:28] <ikskuh> @setEvalBranchQuota
[13:46:37] <ikskuh> proposal: rename to @setEvilBranchQuota
[13:46:48] *** Joins: kenpex (~kenpex@101.56.146.210)
[13:47:13] <ikskuh> tealeg: you should add main_tests.linkLibC(); instead of linkSystemLibrary("c")
[13:47:37] <ikskuh> but apart from that it looks right
[13:53:25] <tealeg> OK, looking
[13:55:01] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 240 seconds)
[13:55:20] <tealeg> hmmm nope, still fails in the same way. 
[13:55:49] <tealeg> I'll have a look again later, I'm probably missing something obvious.  
[13:56:34] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:05:35] <daurnimator> tealeg: are you running `zig build test`?
[14:08:36] *** Quits: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net) (Read error: Connection reset by peer)
[14:09:00] *** Joins: Stalevar (~stalevar@user/stalevar)
[14:09:08] <bw> Can zig tell the difference between stack overflow and some other memory access violation (in the signal handler) and report a different message?
[14:09:09] *** Joins: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net)
[14:11:23] <tealeg> daurnimator: no "zig test ./src/pq.zig"
[14:12:00] <tealeg> daurnimator: "zig build test" does indeed seem to work better
[14:12:01] <daurnimator> bw: I think so/depends on OS.
[14:12:11] *** Joins: earnestly (~earnest@user/earnestly)
[14:12:36] <daurnimator> tealeg: `zig test` is the lower level command (same level as `zig build-obj`).
[14:17:27] <tealeg> ah...
[14:17:52] <tealeg> OK, that's very helpful, between the two of you I've got past this.  Thank you very much. 
[14:25:45] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:27:27] <daurnimator> tealeg: the other way to think about it is: `zig build` is the only thing that looks at build.zig
[14:33:58] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:38:34] <Franciman> hello almighty ziggers
[14:41:25] *** Joins: jjido20 (~jjido@90.213.58.125)
[14:43:30] *** Quits: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:46:22] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[14:55:19] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:56:11] *** Joins: tealeg (~user@p5def98d8.dip0.t-ipconnect.de)
[15:00:28] <bw> i think the correct term is ziguana
[15:00:34] <bw> right?
[15:01:18] <Franciman> bw: oh ziguanas
[15:01:20] <Franciman> then
[15:01:22] <Franciman> :P
[15:01:24] <Franciman> thanks
[15:02:04] <bw> Franciman: i still think this is cool, albeit a bad idea: https://godbolt.org/z/eK34KxoWx
[15:02:43] <bw> sorta wish we could get official comptime introspection of function bodies
[15:02:52] <Franciman> that'd be super cool
[15:03:01] <Franciman> you would be able to implement continuations, probably
[15:03:11] <Franciman> wait maybe you already can
[15:03:34] <bw> you can, though you probably need architecture-specific code
[15:03:50] <daurnimator> `suspend` is *already* continuations
[15:04:03] <bw> daurnimator: well, it's a kind of continuation
[15:04:31] <jjido20> bw that's cool but don't do it at home!
[15:05:21] <daurnimator> layout is essentially undefined until late in the compilation stages. it's only guessable right now because of some unimplemented optimisations
[15:05:38] <bw> jjido20: zig emits debug info for the frame structs, which means you can see what's going on in a debugger
[15:06:22] <daurnimator> bw: what you *can* do is inspect your own debug info at runtime. that of course means you only work on non-stripped binaries.
[15:06:22] <Franciman> does anybody happen to have a libclang and libllvm with debu symbols for arch linux?
[15:06:32] <bw> daurnimator: right, i noticed zig doesn't eliminate variables that don't cross suspend points
[15:06:41] <daurnimator> Franciman: hmm. let me check if I can upload one
[15:07:01] <bw> *yet
[15:07:33] <daurnimator> bw: yep. that's just a juicy project waiting for someone to have time to work on it. 
[15:07:39] <bw> even in release-fast, zig doesn't seem to notice that it can re-use stack space 
[15:07:46] <bw> *yet
[15:09:42] <bw> daurnimator: i noticed this works too, i suppose it makes sense. i wonder if this should be allowed, or if zig should try to warn you: https://godbolt.org/z/8661KTGa7
[15:10:06] <bw> i mean, maybe there's a use-case too, but it seems super risky
[15:10:46] <Franciman> thank daurnimator 
[15:11:01] <daurnimator> bw: https://github.com/ziglang/zig/issues/7769#issue-785351958 "Frame types will also be considered pinned."
[15:11:23] <bw> daurnimator: re: juicy project, i assume that work should only happen in self-hosted, right?
[15:11:41] <daurnimator> bw: likely/yes.
[15:14:35] <daurnimator> Franciman: nevermind/sorry, the infrastructure isn't as ready yet as I thought
[15:18:02] <bw> i'm definitely looking forward to proper support for self-referential stuff (pinned structs and result location before return)
[15:18:52] <daurnimator> bw: pinned structs is just an anti-footgun rather than a new feature/ability
[15:19:16] <bw> right, as my example demonstrates
[15:22:25] <daurnimator> Franciman: which reminds me, we need to do the buildid support for zig
[15:22:46] <Franciman> np daurnimator 
[15:22:51] <Franciman> i will build one myself
[15:28:34] *** Joins: squeek502 (~squeek502@user/squeek502)
[15:41:01] <daurnimator> mischief: I finally have ~1 hour now. remind me what the issue was?
[15:42:36] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:47:38] <Wolf480pl> I looked at LLVM IR of emitted by zig when compiling an async function, and regardless of optimization level, it looks like unoptimized code - like it's storing every variable in that @Frame structure even if it's gonna need its value right away. Though I might be wrong, as the IR is hard to read. But it seems as if LLVM can't optimize across zig's @Frame? Not sure though.
[15:48:41] <daurnimator> Wolf480pl: IIRC that may be correct for @Frame; but not for just @frameSize?
[15:49:25] <daurnimator> I might be misremembering, but that was why we have both, instead of removing @frameSize and telling people to use `@sizeOf(@Frame())`
[15:49:28] <Wolf480pl> (I wasn't trying to reply to anything above)
[15:50:18] <Wolf480pl> anyway, 2 questions follow, 1. how do people read LLVM IR / assembly emitted by zig, and 2. isn't this gonna be slow?
[15:52:12] <daurnimator> Wolf480pl: TBH I only really look on godbolt
[15:53:33] <bw> has there already been a proposal for comptime-accessible annotations on struct fields?
[15:53:49] <daurnimator> Wolf480pl: only things referenced *across* suspends should end up in the frame. something never used across a suspend should be "normal"
[15:53:59] <daurnimator> bw: yes. what do you mean by "annotation"?
[15:54:37] <bw> like field tags in Go, for example, but better
[15:54:40] <daurnimator> (there are 3 different intepretations I can think of;  pretty sure all have been closed as proposals)
[15:55:33] <daurnimator> bw: for go-like tags; just... add a field, with your prefix/suffix of choice.
[15:56:34] <bw> i'm talking about extra information that can be provided in a struct definition, that can be accessed via `@typeInfo`
[15:56:52] <bw> not just strings, but actual typed metadata
[15:57:02] <bw> like a tuple, or similar
[15:57:05] <daurnimator> bw: there is no need though
[15:57:11] <bw> oh?
[15:58:15] <daurnimator> bw: what would be the practical difference from `struct { foo: u32, const foo_annotation_blah = "whatever you want"; }`
[15:58:24] <bw> let me make an example
[15:59:53] <bw> `const SomeStruct = struct { foo: i32 tag(.{ .json_name = "FOO", .proto_key = 3 }) };`
[16:01:51] <bw> don't get me wrong, there are certainly ways to implement something in userspace, but having actual syntactical support would be really nice
[16:02:47] *** Joins: neceve (~quassel@2.26.93.228)
[16:02:50] <Wolf480pl> daurnimator, doesn't look like godbolt is any better in my case :/ https://godbolt.org/z/7GbsPM9n7
[16:05:17] *** Quits: tealeg (~user@p5def98d8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[16:09:06] <daurnimator> bw: the problem with go tags is that there still is just that flat namespace. all sorts of annotations can interfere with each other
[16:09:54] <bw> good point
[16:10:02] <bw> maybe a const would be better... hmmm
[16:10:28] <bw> something like the "root module" pattern, but for arbitrary structs
[16:13:32] <bw> hmm, is `addrspace` actually usable in 0.9?
[16:19:17] <daurnimator> bw: you also have the option of `struct { foo: u32, const proto_keys = .{ .foo = 3 }}`. or `struct { foo: u32, pub usingnamespace proto_serialisation_tag("foo", 3); }` where proto_serialisation_tag is a function your protobuf library provides that returns some relevant field/function.
[16:19:33] <bw> yeah, that's what i was thinking
[16:21:01] <bw> (oh i see, `addrspace` is stage2 only)
[16:21:33] <daurnimator> though when you do so, you might find it ends up nicer to do: `struct { bar: bool, foo: u32, pub usingnamespace proto_serialisation(.{.bar = 1, .foo = 3}); }`
[16:22:13] <daurnimator> which is how I'd be solving the namespacing problem from e.g. go anyway
[16:30:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:31:44] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:40:46] *** Quits: neceve (~quassel@2.26.93.228) (Read error: Connection reset by peer)
[16:41:13] *** Joins: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de)
[16:41:49] *** Joins: frmdstryr (~jrm@172.58.203.225)
[16:44:28] *** Quits: boardwalk (~boardwalk@2605:a601:aac3:100:d79d:f26c:e1a4:eedd) (Quit: Ping timeout (120 seconds))
[16:44:43] *** Joins: boardwalk (~boardwalk@2605:a601:aac3:100:f22f:74ff:fe34:3e9b)
[16:46:21] *** Joins: notapenguin (~ryu@187.3.254.107)
[16:54:36] *** Joins: terminalpusher (~terminalp@2a01:586:911a:1:a859:fe95:d7d4:d437)
[16:56:49] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:58:07] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 268 seconds)
[17:06:01] *** Joins: pkap (~pkap@185.209.196.162)
[17:11:03] *** Quits: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:27:06] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[17:27:10] *** Quits: jjido20 (~jjido@90.213.58.125) (Quit: Connection closed)
[17:35:13] *** Joins: badsektor (~badsektor@user/badsektor)
[17:41:24] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 240 seconds)
[17:53:59] *** Joins: nurbl (~jofo@94-255-130-43.cust.bredband2.com)
[18:00:34] *** Joins: Guest7233 (~Guest72@84-112-233-185.cable.dynamic.surfer.at)
[18:07:06] *** Quits: Guest7233 (~Guest72@84-112-233-185.cable.dynamic.surfer.at) (Quit: Client closed)
[18:07:19] *** Joins: zazpro (~zazpro@84-112-233-185.cable.dynamic.surfer.at)
[18:08:02] *** Joins: arkurious (~arkurious@user/arkurious)
[18:08:42] *** Joins: nyah (~nyah@94.6.71.219)
[18:21:51] *** Quits: kenpex (~kenpex@101.56.146.210) (Ping timeout: 256 seconds)
[18:27:57] *** Quits: zazpro (~zazpro@84-112-233-185.cable.dynamic.surfer.at) (Quit: Client closed)
[18:31:03] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:35:48] *** Quits: nurbl (~jofo@94-255-130-43.cust.bredband2.com) (Ping timeout: 240 seconds)
[18:47:18] *** Joins: jokoon (~eio@2a01:e0a:542:b20:99ae:cc95:93c6:4076)
[19:05:39] *** Joins: moog (~moog@107.126.53.61)
[19:20:56] *** Joins: koakuma (~koakuma@user/koakuma)
[19:23:22] *** Joins: xackus (~xackus@185.15.0.3)
[19:30:08] *** Quits: kprotty[m] (~kprotty@2001:470:69fc:105::834) (Quit: You have been kicked for being idle)
[19:36:56] *** Joins: livoreno (~livoreno@user/notzmv)
[19:51:56] *** Joins: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de)
[20:00:37] *** Quits: Nulo (~Nulo@user/nulo) (Ping timeout: 240 seconds)
[20:06:51] *** Joins: Nulo (~Nulo@user/nulo)
[20:08:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429)
[20:11:17] *** Quits: Nulo (~Nulo@user/nulo) (Read error: Connection reset by peer)
[20:11:35] *** Joins: Nulo (~Nulo@user/nulo)
[20:15:33] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[20:19:42] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[20:23:05] *** Quits: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:23:48] *** Joins: xackus_ (~xackus@185.15.0.3)
[20:26:13] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[20:26:57] *** Joins: xackus (~xackus@185.15.0.3)
[20:30:29] *** Quits: xackus_ (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[20:53:22] *** Joins: livoreno (~livoreno@user/notzmv)
[21:01:41] *** Quits: jokoon (~eio@2a01:e0a:542:b20:99ae:cc95:93c6:4076) (Ping timeout: 268 seconds)
[21:08:25] *** Joins: rgrinberg (~textual@2806:101e:7:b2b:a996:6e46:afb:f82e)
[21:09:51] *** Quits: Arnavion (arnavion@user/arnavion) (Quit: Arnavion)
[21:10:22] *** Joins: Arnavion (arnavion@user/arnavion)
[21:21:18] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[21:27:07] *** Quits: notapenguin (~ryu@187.3.254.107) (Quit: WeeChat 3.4)
[21:30:57] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[21:31:44] *** Joins: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de)
[21:37:30] *** Joins: tsmanner (~tsmanner@096-042-172-116.res.spectrum.com)
[21:40:22] <tsmanner> Is it possible to use the std.json library to parse into recursive structs? (e.g. `struct { name: []u8, children: []*@This(), };`)
[21:42:08] <tsmanner> Currently, trying to do something like this, I'm getting a compile error `cannot infer error set: ... 'std.json.parseInternal' not fully analyzed yet`
[21:43:03] <ifreund> tsmanner: that error means that you need to explictly specifiy the error set your funcion returns in the return type instead of using an inferred error set (e.g. !void) 
[21:43:36] <ifreund> the compiler currently always requires explicit error sets on recursive functions as it is not smart enough to infer the error set in that cse
[21:44:07] <ifreund> so do e.g. `const MyErrorSet = error {FooError, BarError};` and then use `MyErrorSet!void` as the return type
[21:44:25] <tsmanner> Ah ok, that makes sense.  I'll give it a shot, thanks!
[21:44:32] <ifreund> no problem!
[21:52:32] *** Joins: xackus (~xackus@185.15.0.3)
[21:53:52] *** Joins: xackus_ (~xackus@185.15.0.3)
[21:56:02] *** Quits: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:56:57] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[21:57:33] *** Joins: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de)
[21:58:53] *** Quits: philtor (~philtom@50.53.105.83) (Ping timeout: 256 seconds)
[22:06:03] *** Joins: xackus (~xackus@185.15.0.3)
[22:08:57] *** Quits: xackus_ (~xackus@185.15.0.3) (Ping timeout: 240 seconds)
[22:09:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:18:03] *** Quits: rgrinberg (~textual@2806:101e:7:b2b:a996:6e46:afb:f82e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:06] *** Quits: tealeg (~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:29:52] *** Joins: philtom (~philtom@50.53.105.83)
[22:30:34] *** philtom is now known as philtor
[22:35:01] *** Joins: tealeg (~user@p5def98d8.dip0.t-ipconnect.de)
[22:41:00] *** Joins: tdeo (~tdeo@user/tdeo)
[22:42:25] <Stalevar> Does zig cc work on Windows XP?
[22:43:37] *** Quits: tealeg (~user@p5def98d8.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:51:01] <Franciman> Stalevar: if clang and llvm can be made to work on it, yes
[22:51:04] <Franciman> i think
[22:52:01] <Stalevar> Franciman, I'm talking about binaries downloadable from the official site
[22:52:21] <luuk> They *may* work, but official support is Windows 8.1+
[22:52:24] <andrewrk> https://ziglang.org/download/0.9.0/release-notes.html#Support-Table
[22:53:02] <andrewrk> I will consider lowering the minimum windows version during the std lib stabilization phase of the project, which we are not yet in
[22:53:14] <Franciman> people sorry
[22:53:24] <Franciman> in your experience, is it hard to compile clang/llvm with debug symbols?
[22:53:32] <Franciman> may I have better luck in changing distro ?
[22:53:36] <Stalevar> andrewrk, lowering to where?
[22:53:45] <Stalevar> like to Windows 2000 or NT4?
[22:54:19] <andrewrk> that's a question to be considered during that time. right now I am focused on other things so I cannot give a good answer
[22:54:31] <Stalevar> Franciman, your distro might already have debug symbols in separate repo
[22:54:38] <andrewrk> Franciman, https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#debug
[22:54:46] <Franciman> andrewrk: when an issue is marked as milestone for 0.11
[22:54:55] <Franciman> can I try to fix it before 0.11?
[22:54:58] <Franciman> if i am able
[22:55:03] <andrewrk> yes of course
[22:55:13] <Franciman> Stalevar: i couldn't find any :<
[22:55:17] <andrewrk> the milestone description is "Accept and resolve these issues, reject, or postpone them before releasing 0.11.0."
[22:55:50] <Franciman> thanks
[22:55:53] <Franciman> thanks for the link
[22:55:58] <Franciman> I meant is it computationally intensive?
[22:56:08] <Franciman> i vaguely remember it took around 4 hours to compile
[22:56:11] <Franciman> but i was on an old pc
[22:56:26] <Stalevar> andrewrk, but a person I was talking with said that he's using zig on windows 7 somehow
[22:57:10] <andrewrk> as luuk mentioned, we do not intentionally block earlier versions of windows from working, but we don't promise to not call system functions from newer versions
[23:00:02] <Stalevar> Is it possible to control `zig cc` options, such as make it build the same way `clang -Wall -g -o something{,.c}` would?
[23:00:11] *** Quits: terminalpusher (~terminalp@2a01:586:911a:1:a859:fe95:d7d4:d437) (Remote host closed the connection)
[23:01:03] <Stalevar> Also does it support -nostdlib?
[23:01:22] <ikskuh> i found a curious stage1 bug
[23:01:38] <Franciman> ikskuh: same ^^
[23:01:57] <ikskuh> ./call-wrap.zig:53:21: error: parameter of type '�J���' not allowed
[23:02:01] <ikskuh> beat this :D
[23:02:48] <andrewrk> Stalevar, you can set ZIG_VERBOSE_CC=1 to dump the args zig is sending to clang
[23:03:59] *** Joins: jokoon (~eio@2a01:e0a:542:b20:99ae:cc95:93c6:4076)
[23:04:14] *** Quits: pkap (~pkap@185.209.196.162) (Quit: Client closed)
[23:07:08] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:15:29] <ikskuh> i found a bug in @Type /o\
[23:16:07] <ikskuh> https://bpa.st/CDXA
[23:17:12] <marler8997_> can't be, I wrote the first iteration of it so it must be perfect
[23:17:24] <ikskuh> lol
[23:17:43] <ikskuh> i love that it just seems to free the memory for the first argument 
[23:17:47] <ikskuh> and prints out bullshit
[23:18:33] <marler8997_> lol, the funny thing is that could be legitimate right?  If the ownership was transfered to the callee
[23:18:52] <ikskuh> i have no idea what happens here
[23:18:57] *** Quits: frmdstryr (~jrm@172.58.203.225) (Ping timeout: 240 seconds)
[23:18:58] <ikskuh> it only happens when i use "*Self" and not "Self"
[23:19:04] <ikskuh> it seems like it forgets the pointer type?
[23:19:11] <Franciman> now I am frightened 
[23:19:15] <Franciman> ops wrong channel
[23:19:17] <Franciman> sorry
[23:19:21] <Franciman> lol ikskuh this is tricky indeed
[23:19:40] <marler8997_> Franciman, meant to type in #ScaryGhostStories?
[23:19:47] <ikskuh> Franciman: frightening is still valid
[23:19:51] <Franciman> ahah
[23:20:53] <marler8997_> 2 Irc channels 1 keyboard challenge
[23:24:17] *** Quits: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com) (Ping timeout: 240 seconds)
[23:24:54] *** Quits: jokoon (~eio@2a01:e0a:542:b20:99ae:cc95:93c6:4076) (Quit: Leaving)
[23:26:35] *** Joins: cheer (~cheer@cpe-76-189-213-198.neo.res.rr.com)
[23:28:14] *** Joins: frmdstryr (~jrm@172.58.203.225)
[23:29:00] *** Joins: tealeg (~user@p5def98d8.dip0.t-ipconnect.de)
[23:31:15] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[23:33:02] *** Quits: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:35:31] *** Joins: reductum (~reductum@2603-8000-b400-8764-dea6-32ff-fe16-a622.res6.spectrum.com)
[23:46:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
