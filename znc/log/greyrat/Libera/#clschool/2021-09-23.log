[00:11:53] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:12:25] <copec> I don't quite follow this section that I'm reading in the hyperspec: https://unaen.org/cl/HyperSpec/Body/03_bcaa.htm
[00:12:31] <copec> From this paragraph: "In particular, the information stored by the defining macros at compile time might or might not be available to the interpreter (either during or after compilation), or during subsequent calls to the compiler. For example, the following code is nonportable because it assumes that the compiler stores the macro definition of foo where it is available to the interpreter: "
[00:12:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:13:01] <copec> I wonder if someone could explain that to me? What information is it talking about?
[00:13:39] <copec> Like, macros that are part of a system that store and reference information?
[00:17:34] <pjb> copec: the simpliest case is when you launch your lisp, call compile-file, then quit, then launch again your lisp, and call load on the fasl file.
[00:17:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:17:59] <pjb> copec: then any side effect the macro could have had at compilation-time will be lost when you quit.
[00:18:07] <White_Flame> I've been bitten by that a lot
[00:18:24] <pjb> copec: only the code that is expanded, and compiled into the fasl file is transmitted to the new lisp image.
[00:19:00] <White_Flame> so if macros push information to a global variable while processing things, so you expect to have a table available of all your macroexpansions, that won't survive a separate compile & load step
[00:19:17] <White_Flame> across 2 executions of the image
[00:19:20] <pjb> copec: sometimes, I have macros that perform the mutation of state in the two environments (defmacro define-something (x) (setf *x* x) `(progn (setf *x* ',x) (stuff-to-do-at-runtime)))
[00:19:41] <pjb> Same with deftype (it's like defmacro).
[00:20:05] <pjb> Notably when you want to define a type that  defines a named function to be used with satisfies…
[00:20:18] <White_Flame> I believe a proper solution is (defmacro foo (x) `(progn (eval-when (:load-toplevel) ...one-time changes here...) ...))
[00:20:22] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[00:20:34] <White_Flame> but I'm not sure of that, haven't solved it too cleanly
[00:20:38] <pjb> You want to define that function in both environments, but a type specifier defined by deftype doesn't have an expansion to do it at run-time…
[00:21:08] <pjb> eval-when can indeed be part of the solution.
[00:23:09] <copec> Okay, that makes more sense. I thought it could have meant the macro's themselves weren't available, which wouldn't make sense to me
[00:23:31] <copec> thanks
[00:24:09] <White_Flame> yep, "the information stored by the macro" is easy to gloss over
[00:25:10] <copec> I'm slowly reading the spec from on end to another, but it's hard, especially with adhd
[00:25:20] <copec> probably going to take me a year, heh
[00:25:51] <White_Flame> yeah, it's reference material, and you need to understand it before you can really understand it
[00:26:54] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[00:27:31] <seok> how do I fix when quickload stops looking at projects folder ?
[00:27:35] <seok> on portacle
[00:28:07] <seok> I always made new instance of portacle when this happens feels kinda stupid
[00:28:35] <copec> That's odd, does it give a specific error output?
[00:28:46] <seok> just says project cannot be found
[00:29:00] <seok> package *
[00:29:27] *** Quits: q3cpma (~q3cpma@176-136-178-80.abo.bbox.fr) (Quit: leaving)
[00:29:27] <seok> system *
[00:30:08] <copec> I haven't encountered that problem, if you don't care about the lisp image so far I suppose you could exit lisp from the repl and meta-x slime again
[00:30:43] <seok> once this happens restarting slime doesn't fix it
[00:31:09] <copec> Try asking in #commonlisp
[00:31:11] <seok> I have a brand new portacle folder saved so I can move my projects there when this happens
[00:31:12] <copec> more eyes
[00:31:52] <seok> ok
[00:32:21] <copec> When a problem like that doesn't seem to have clear constraints you have to hope someone else has seen it and knows the answer :-/
[00:32:33] <copec> Without manually digging through it yourself
[00:33:16] <seok> There probably is a function in quickload to add package directories
[00:33:56] <mfiano> quicklisp has nothing to do with packages
[00:34:07] <seok> oh ?
[00:34:23] <mfiano> a package is a collection of symbol objects
[00:34:27] <copec> I depend on ASDF for quicklisp to find my own systems
[00:34:33] <copec> https://common-lisp.net/project/asdf/asdf.html#Configuring-ASDF-to-find-your-systems
[00:37:14] <copec> When you package, were you meaning system seok? Since the word "package" was defined in the standard to mean a collection of symbols, with the package system being a part of the language itself
[00:37:27] <seok> yeah a system
[00:37:43] <copec> and a "system" is generally what everything else calls a package
[00:37:51] <copec> most other languages
[00:38:12] <copec> well, some other popular languages
[00:38:20] <copec> I digress :-)
[00:39:09] <copec> pjb, White_Flame Do you know of an example that uses all of the five objects in a setf expansion? https://unaen.org/cl/HyperSpec/Body/05_aab.htm
[00:40:20] <White_Flame> I haven't used setf expansions much.  I tend to use macroexpansions to enable both read & setf
[00:41:00] <copec> It's not clear what they are used for...well I get that you would need some variable to temporarily hold the value in the case of psetf
[00:42:01] <copec> I suppose a setf expansion could set all the slots of an object to the values of the slots of another for instance
[00:43:16] <copec> Perhaps I'll leave the question for beach if he gets a chance
[00:49:46] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:50:24] <copec> What is the best lispy pastebin these days?
[00:51:02] <White_Flame> maybe plaster.tymoon.eu
[00:51:35] <White_Flame> it's shinmera's
[00:52:34] <copec> Anyways, it makes sense to me now: https://plaster.tymoon.eu/view/2641#2641
[00:58:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[01:01:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:01:21] <pjb> seok: you can use   (ql:register-local-projects) to make quicklisp  rescan local projects.
[01:02:21] <pjb> seok: note that quicklisp nowadays explicitely skips symbolic links in ~/quicklisp/local-projects/ So you may prefer to push the directories of your projects onto ql:*local-project-directories*
[01:02:38] <pjb> seok: reading the documentation of quicklisp might prove useful. (and of asdf too).
[01:05:00] <pjb> copec: there are (defun/defmethod (setf foo) (new-value …) …),  defsetf (two forms), and define-setf-expander. When using a macro to define a place, you need to already have a place expression. Only the previous forms let you define really new places.
[01:07:14] <mfiano> pjb: It doesn't skip them, it just has a depth limit, so the bad effect is more obvious with symlinks
[01:07:16] <pjb> copec: each let you do it in a more "powerful" way.   Well, defsetf short form let you just associate a setter function with a getter function. The defsetf long form let you define the setter as a macro.
[01:07:23] * mfiano uses symlinks in local-projects just fine
[01:07:35] <pjb> mfiano: I checked the code, it disable walking the symlinks.
[01:07:46] <pjb> This wasn't the case in older versions.
[01:08:44] <mfiano> Interesting. Latest client finds my projects in the symlink ~/quicklisp/local -> ~/Projects/Lisp/
[01:09:01] <pjb> copec: now, define-setf-expander let you define places of all kind, notably, multiple-value places (set (foo x) (values 1 2 3)) that would store things such as (foo x) --> 1; 2; 3
[01:09:27] <mfiano> err ~/quicklisp/local-projects/local -> ...
[01:09:58] <pjb> copec:  but also stranger places, where the data is not stored as-is.  Eg. you could define a place (setf (times x 2) 8) x -> 4  because (= (times 4 2) 8).
[01:10:28] <pjb> copec: but note that there's a doubt on the result of (setf (times x 2) 8); shall it return 8? or 4?
[01:10:43] <mfiano> Yeah can't reproduce. Able to load systems behind a symlink in local-projects just fine
[01:11:05] <pjb> copec: also, you can use get-setf-expansion in macros to handle places.
[01:11:32] <pjb> mfiano: it may depend on the implementation I don't remember, I verified it for ccl.
[01:11:44] * mfiano also uses ccl
[01:12:08] <pjb> Well, strange.
[01:21:48] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[01:22:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:01:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:09:13] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:09:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:13:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[02:27:43] *** Joins: selwyn (~selwyn@user/selwyn)
[02:27:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:56:35] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:03:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:07:08] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:14:50] *** Quits: random-nick (~random-ni@87.116.180.119) (Ping timeout: 252 seconds)
[03:33:29] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[03:36:49] *** Joins: selwyn (~selwyn@user/selwyn)
[03:36:50] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:38:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[04:12:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:19:57] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[04:19:59] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[04:23:02] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:23:02] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 252 seconds)
[04:23:59] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[04:50:44] *** Quits: rotateq (~user@p200300e787056600fdfeed040e17b750.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[05:06:32] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:b0cd:30f5:92cb:18b7)
[05:26:47] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:b0cd:30f5:92cb:18b7) (Ping timeout: 246 seconds)
[05:27:58] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[05:38:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[05:55:53] *** Quits: sts-q (~sts-q@212.53.219.157) (Ping timeout: 264 seconds)
[05:58:20] *** Joins: sts-q (~sts-q@91.200.108.209)
[06:21:20] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:30:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[08:21:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:26:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:33:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:13:20] *** Joins: shka (~herr@109.231.62.239)
[10:34:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[11:35:40] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:52:18] *** Joins: selwyn (~selwyn@user/selwyn)
[11:54:34] *** Quits: selwyn (~selwyn@user/selwyn) (Remote host closed the connection)
[11:54:59] *** Joins: selwyn (~selwyn@user/selwyn)
[12:35:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[13:27:09] *** Joins: random-nick (~random-ni@87.116.178.231)
[14:26:00] *** Joins: selwyn_ (~selwyn@user/selwyn)
[14:27:29] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 252 seconds)
[14:34:26] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 265 seconds)
[14:35:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:40:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[14:54:51] *** Joins: selwyn (~selwyn@user/selwyn)
[15:12:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[15:33:42] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[16:27:41] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:08:29] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:09:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:10:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:14:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:46:53] <MetaYan> SBCL, ABCL and CLISP follow symlinks in local-projects - CCL and ECL do not.
[17:49:16] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[17:49:49] *** Joins: minion (~minion@common-lisp.net)
[17:51:11] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:38:26] *** Joins: thrig (~thrig@65.113.153.50)
[19:32:12] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Write error: Connection reset by peer)
[19:34:32] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:40:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:42:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:06:42] <pjb> MetaYan: thanks for the recapitulation.
[20:47:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:53:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[20:55:37] *** Joins: aeth (~aeth@user/aeth)
[21:02:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:07:33] <lisp123> Is it good style to liberally use destructuring-bind?
[21:07:54] <lisp123> Or should one convert lists to structures / classes?
[21:08:23] <lisp123> The latter seems to make sense, but for some reason I feel naturally inclined to keep parts of my data in lists
[21:44:57] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:45:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:50:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:53:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:54:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:55:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:03:19] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:16:02] <pjb> lisp123: (defstruct (point (:type list)) x y z)  (make-point :x 1 :y 2 :z 3) #| --> (1 2 3) |#   (point-y   (make-point :x 1 :y 2 :z 3)) #| --> 2 |# 
[22:16:44] <pjb> lisp123: (with-accessors ((x point-x) (y point-y) (z point-z)) (make-point :x 1 :y 2 :z 3) (vector x y z)) #| --> #(1 2 3) |# 
[22:21:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:36:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:45:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[22:53:01] *** Quits: copec (~copec@schrodbox.unaen.org) (Read error: Connection reset by peer)
[22:53:19] *** Joins: copec (~copec@schrodbox.unaen.org)
[23:36:28] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
