[00:03:57] <genio> pretty good summation
[00:06:43] <jabberwok> Ruby would solve this with chomp() chomp?() chomp!() chomp!!!!()
[00:07:11] <jabberwok> or was it :chomp()
[00:09:18] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:12:08] * GumbyPAN CPAN Upload: Spreadsheet-XLSX-0.17 by ASB https://metacpan.org/release/ASB/Spreadsheet-XLSX-0.17
[00:13:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b)
[00:23:58] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[00:24:00] <mmlj4> I know I'm supposed to use integers when dealing with money. How do I print USD? simply divide by 100 and printf to 2 places?
[00:24:31] <mmlj4> and ditto for input... multiply by 100?
[00:24:37] <lopid> go straight to jail  →
[00:24:51] <mmlj4> itym fail
[00:33:27] <Botje> mmlj4: pretty much, yes.
[00:33:39] <ether> I would just insert a '.' in the string and avoid dealing with floating point at all
[00:34:16] <ether> substr($num, 0, -2) . '.' .substr($num, -2, 2)
[00:36:33] *** Joins: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net)
[00:37:11] <ether> making it work for values under a dollar left as an exercise for the reader
[00:38:19] *** Quits: GEttR_ (~GEttR@user/gettr) (Remote host closed the connection)
[00:38:38] *** Joins: GEttR_ (~GEttR@user/gettr)
[00:38:43] <Grinnz> you could leverage use integer to make sure you get integers from division
[00:41:00] <Grinnz> sweval: my $cents = 747; use integer; sprintf '%d.%02d', $cents / 100, $cents % 100
[00:41:02] <perlbot> Grinnz: 7.47
[00:41:06] <Grinnz> sweval: my $cents = 5; use integer; sprintf '%d.%02d', $cents / 100, $cents % 100
[00:41:07] <perlbot> Grinnz: 0.05
[00:41:45] <Grinnz> bonus, those operations are usually faster under use integer
[00:42:44] <Grinnz> sweval: my $cents = 100; use integer; sprintf '%d.%02d', $cents / 100, $cents % 100
[00:42:45] <perlbot> Grinnz: 1.00
[00:44:24] <ether> sweval: my $cents = 50; use integer; sprintf '%d.%02d', $cents / 100, $cents % 100
[00:44:26] <perlbot> ether: 0.50
[00:47:15] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:56:42] <jabberwok> sweval: my $cents = 0.9998; use integer; sprintf '%d.%02d', $cents / 100, $cents % 100
[00:56:43] <perlbot> jabberwok: 0.00
[00:56:51] <jabberwok> Caveat emptor
[00:57:07] <Grinnz> that's correct, though
[00:57:13] * GumbyPAN CPAN Upload: Test2-Plugin-Cover-0.000026 by EXODIST https://metacpan.org/release/EXODIST/Test2-Plugin-Cover-0.000026
[00:57:20] <Grinnz> if we're assuming there are no fractional cents allowed
[00:58:57] <jabberwok> *nod* If one is calculating sales tax or VAT, or interest, via multiplication, it would be prudent to explicitly round before-hand.
[00:59:33] <Grinnz> safe way to get there from the input would be to parse it as a string and be strict on the format (assuming you get it as a string)
[00:59:58] <Grinnz> sweval: my $input = '5.45'; my ($dollars, $cents) = $input =~ m/\A([0-9]+)(?:\.([0-9]{2}))?\z/; [$dollars, $cents]
[01:00:00] <perlbot> Grinnz: [5,45]
[01:00:28] <Grinnz> if you get it as a float already, all bets are off and you might as well just *100
[01:00:40] <Grinnz> and then truncate/round to integer
[01:02:38] <Grinnz> (round preferable, because floating point errors can mean truncation will give you 1 less than you expect)
[01:02:46] <jabberwok> the ghost of Grace Hopper (CODASYL, COBOL) still haunts us all
[01:03:32] *** Joins: whynot (~whynot@37.73.151.212)
[01:05:02] *** Quits: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed) (Remote host closed the connection)
[01:07:24] *** Quits: proller (~p@2a02:6b8:0:40c:8496:b686:e6ec:b8e8) (Ping timeout: 268 seconds)
[01:22:23] *** Quits: magla (~gelignite@55d4ce3b.access.ecotel.net) (Quit: Stay safe!)
[01:27:08] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[01:27:16] * GumbyPAN CPAN Upload: Valiant-0.001011 by JJNAPIORK https://metacpan.org/release/JJNAPIORK/Valiant-0.001011
[01:30:50] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[01:33:36] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[01:34:05] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:35:38] <mmlj4> thanks, guys :-)
[01:37:51] *** Quits: kensanata (~user@user/kensanata) (Remote host closed the connection)
[01:38:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:40:53] *** Quits: EGD (~egd@user/egd) ()
[01:43:47] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[01:50:55] *** Joins: deadmarshal (~deadmarsh@95.38.116.61)
[01:51:26] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[02:01:43] *** Quits: subie (~subie@2601:4c0:4080:bc0:2c34:7f43:f1d8:d170) (Remote host closed the connection)
[02:02:03] *** Joins: subie (~subie@2601:4c0:4080:bc0:41e:f220:bce8:97a1)
[02:04:02] *** Quits: KnoP (~KnoP@p57b21d87.dip0.t-ipconnect.de) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[02:10:24] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[02:10:56] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[02:10:57] *** Joins: ugjka (~ugjka@ugjka.net)
[02:11:29] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:13:08] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 260 seconds)
[02:13:15] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:14:53] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[02:16:26] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[02:23:19] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[02:31:34] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 260 seconds)
[02:33:30] *** Quits: pizdets (~pizdets@183.182.115.195) (Ping timeout: 260 seconds)
[02:33:59] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.117)
[02:35:18] *** Quits: deadmarshal (~deadmarsh@95.38.116.61) (Ping timeout: 260 seconds)
[02:38:02] *** Quits: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:42:25] *** Quits: TieUpYourCamel (~david@99-111-133-221.lightspeed.chrlnc.sbcglobal.net) (Remote host closed the connection)
[02:46:03] *** Quits: EvanCarroll (~ecarroll@198-0-91-126-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[02:50:22] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.117) (Ping timeout: 268 seconds)
[02:52:48] *** Joins: EvanCarroll (~ecarroll@50.222.187.218)
[02:55:20] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[02:57:32] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Quit: Leaving)
[03:09:26] *** Quits: Nei (~ailin@user/nemui) (Remote host closed the connection)
[03:10:38] *** Joins: Nei (~ailin@user/nemui)
[03:16:25] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[03:23:06] *** Quits: tg_ (~tg@rockylinux/infra/tg) (Quit: tg_)
[03:30:06] *** Quits: whynot (~whynot@37.73.151.212) (Quit: leaving)
[03:36:54] *** Joins: travaldo (~travaldo@159.203.88.148)
[03:38:31] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:39:57] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:42:27] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[03:42:59] *** Joins: ugjka (~ugjka@ugjka.net)
[04:18:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[04:40:23] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:40:35] *** Joins: phc (~phc@user/phc)
[04:48:47] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[04:51:34] *** Quits: EvanCarroll (~ecarroll@50.222.187.218) (Ping timeout: 260 seconds)
[04:52:17] *** Quits: Smedles (~quassel@2403:580d:1:0:aaa1:59ff:fe53:1a69) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:52:46] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[04:53:19] *** Joins: EvanCarroll (~ecarroll@50.222.187.218)
[04:58:38] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[04:59:39] *** Quits: phc (~phc@user/phc) (Read error: Connection reset by peer)
[05:00:10] <alex11> what languages are good to know before attempting to learn perl?
[05:01:41] <gchristensen> what languages do you know?
[05:05:04] <ology> alex11: You can learn perl without knowing anything too.
[05:06:43] <gchristensen> looks like alex11 knows english pretty well 
[05:10:03] <zgu> hmm, i wonder why the c++ folks in their infinite wisdom couldn't come up with some kind of operator overload to emulate $string =~ $regex
[05:10:20] *** Joins: phc (~phc@user/phc)
[05:10:55] <leont> Probably because overloading << and >> for IO proved to be controversial in the long run
[05:11:23] <leont> Newer standard libraries tend to only use operator overloading in less surprising ways
[05:11:27] <Grinnz> C and shell scripting are both useful to know as a basis for learning perl
[05:11:37] <Grinnz> but not required by any means
[05:11:43] <gchristensen> oh yeah true
[05:12:23] <zgu> either that or they just ran out of operators that didn't have special meanings yet
[05:13:31] <zgu> sometimes i like to think most of STL was written on a dare started by someone joking "you can't fix ALL of your problems with operator overloading"
[05:14:34] <zgu> c and shell are the main influences, yeah
[05:14:40] <leont> And awk, really
[05:15:02] <zgu> right but who learns awk anymore
[05:15:09] <leont> There's more awk than shell in Perl, IMO
[05:15:29] <leont> But yeah, there's little point in learning awk when you know Perl, IME
[05:15:34] <zgu> probably
[05:17:29] <zgu> BEGIN {} came from awk
[05:17:45] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:36:05] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:36:16] *** Quits: X-Scale (~ARM@46.50.0.1) (Ping timeout: 268 seconds)
[05:37:24] *** X-Scale` is now known as X-Scale
[05:39:52] <aquanight> to be fair
[05:39:56] <aquanight> I still don't know jack about awk
[05:40:07] <aquanight> (... maybe that explains a few things)
[05:40:07] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:42:21] <daemon> aquanight, no one knows anything about awk or sed or xargs, they just google what they need and paste it in then instantly forget it ;)
[05:42:36] <aquanight> xargs is not so bad
[05:42:55] <daemon> its not but I still can never remember the syntax for it
[05:43:12] <daemon> and google is faster than its mammoth man page
[05:43:15] <aquanight> hmm
[05:43:39] <daemon> there all tools that are very handy for one offs
[05:44:22] <daemon> I imagine if you use them enough you would just remember them but ... pretty much no one does use them that much
[05:44:30] <daemon> you can achieve anything they can do via perl -e for a start
[05:44:37] <daemon> and as you are likely a perl developer ... :)
[05:44:41] <gchristensen> the cool thing about awk is you can learn 95% of it from a very small easy to read book
[05:45:03] <aquanight> at it's most basic, it's basically the same as | perl -e 'my $cmd = shift @ARGV; while (<>) { system "$cmd $_"; }' whatever
[05:45:58] <daemon> funnily atleast as far as I recall perl was actually made specifically for this purpose as well
[05:46:05] <daemon> to replace all the unixy tools into one that can do it all
[05:46:08] <aquanight> though I feel like in practice if you're already using perl as an xargs sub you might be able to do it more efficiently some other way than firing off random commands
[05:46:23] <aquanight> perl really can just superbash
[05:46:31] <aquanight> except for the part where you can't set $/ to a regex
[05:46:40] <aquanight> fuck that "awk needs to be better for something" excuse
[05:47:10] <daemon> eh as I said its always a one off, whatever works the fastest - next time you have to do it you will have completly forgot what you did anyway :)
[05:47:34] <aquanight> hmm
[05:48:02] <daemon> there is an argument for sed in particualr for .sh scripts ... but once you have written that script well
[05:48:05] <daemon> you written the script
[05:48:18] <daemon> so once again, kind of does not really matter
[05:48:52] <aquanight> I wonder how useful an xargs.pl would be that just runs random perl code with @ARGV set by input
[05:49:01] <aquanight> but it would pretty much just be a fancy variant of perl -n
[05:50:23] <daemon> well if you wanted to do that, you would want App::unixtool or something, that is preloaded with a bomb load of common things - or its preloaded with nothing and you ask people to say what they needed sed/awk/xargs for; you add that as a a recipe; unixtool --cookbook replace_word --args .... just be careful to not re-invent what you are wrapping
[05:50:40] <aquanight> I suppose the point of xargs is to handle large target lists and split them not necessarily 1 command per target (since that would be horridly inefficient) but to try to make efficient use of the command line space
[05:50:41] *** Joins: arthurpbs (~arthurpbs@168.121.99.71)
[05:51:09] <aquanight> and once you've gone perl you just perl -n and do what you want within the perl process
[05:51:11] <daemon> inefficent is fine as long as its easy, remember its a one off most of the time
[05:51:14] <aquanight> and not need to fork anything
[05:51:30] <mst> aquanight: small reductions in friction matter
[05:51:33] <mst> see also: 'say'\
[05:51:41] *** Quits: EvanCarroll (~ecarroll@50.222.187.218) (Ping timeout: 268 seconds)
[05:51:48] <aquanight> mst: eh?
[05:52:49] <aquanight> oh hmm that could be an interesting variant of -n: a form that instead of one line at a time, reads multiple lines and puts them in @_
[05:53:05] <mst> 'say' is barely different than 'print' and yet it's a valuable thing to have
[05:53:20] <mst> so "it would pretty much just be a fancy variant of perl -n" is not necessarily a reason not to
[05:53:29] <aquanight> oh
[05:53:39] <aquanight> well I mean
[05:53:49] <aquanight> I suppose if you did something like
[05:53:55] <aquanight> alias xargs.pl=perl -n
[05:53:57] <aquanight> in your .bashrc
[05:54:37] <mst> alias pxargs='perl -ln -e'
[05:54:39] <mst> maybe
[05:54:40] <daemon> that sounds kinda horrible, at least call it something sane like mytool
[05:54:52] <daemon> yeah pxargs seems nice
[05:55:23] <aquanight> I had to re-lookup what -l does
[05:55:25] <aquanight> good call on that
[05:55:34] <aquanight> but I would personally leave off -e or I would forget to quote my script argument.
[05:55:45] <aquanight> Every. Single. Time.
[05:56:08] <daemon> no reason you could not tie the alias to an actual perl script that can see what your @ARGV is and quote it appropriately
[05:56:12] <daemon> then eval perl properly
[05:56:15] <aquanight> I realize it's not the point of xargs but then the point of xargs is to run a command, so xargs.pl script.pl actually makes a bit of sense
[05:56:34] <mst> daemon: forgetting the quoting will screw you as soon as you have a $ sign though
[05:57:17] <daemon> surely there is a way that could be escaped so its not interpolated
[05:58:21] <daemon> $my_cmd = join ' ',@ARGV; then just check the prefix and suffic are ' ?
[05:58:29] <aquanight> daemon: to my knowledge aliases can't rewrite the shell quoting rules
[05:58:47] <aquanight> and it's the shell quoting rules that would fuck me over and is why I would prefer to need manual -e
[05:58:51] *** Joins: EvanCarroll (~ecarroll@67-200-246-226.static.logixcom.net)
[05:58:58] <aquanight> because at least with -e I'll more easily remember
[05:59:09] <aquanight> or at least more clearly see why I fucked up when the shell butchers my script
[05:59:09] <mst> daemon: $ signs!
[05:59:16] <mst> daemon: are you not even listening? :(
[05:59:24] <mst> daemon: bash already ate it!
[05:59:32] <aquanight> also yeah bash will eat the quotes
[05:59:43] <aquanight> you can't make an alias not do these things that I know of
[05:59:47] <daemon> mst, im only half paying attention my fault, im helping some windows user understand what raid is lol
[05:59:58] <aquanight> there's no 'alias and everything after it just gets handed directly with no shell processing whatsoever'
[06:00:10] <aquanight> oh god
[06:00:11] <mst> daemon: somebashthing $_ =~ /.../ # $_ already got eaten by bash
[06:00:33] <aquanight> to say nothing about what'll happen with other shell metachars
[06:00:34] <aquanight> ;
[06:00:36] <aquanight> >
[06:00:38] <aquanight> |
[06:00:44] <aquanight> all things you'd use in a perl script
[06:01:04] <mst> ;>| <- a crying submissive smiley showing off their collar
[06:01:18] <aquanight> hmm
[06:01:34] <aquanight> I vaguely thought >| had a specific bash meaning
[06:01:37] <aquanight> but I don't think it does
[06:01:45] <daemon> mhmm that would be redirect STDOUT to pipe I think
[06:02:01] <aquanight> well doesn't just | do that
[06:02:16] <daemon> probably no reason both can't do the same thing
[06:02:53] <aquanight> mst: the other day I was looking at open for some reason. I think I was trying to figure out if open does the magic of "-" opening STDIN like for <>
[06:03:42] <aquanight> for some reason now I want to actually find where that happens
[06:03:46] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[06:04:50] <aquanight> ...
[06:05:23] <aquanight> basheval: echo Hello | perl -E 'open my $f, "-"; say scalar <$f>;'
[06:05:25] <perlbot> aquanight: Hello␤␤
[06:05:30] <aquanight> ...
[06:05:33] <aquanight> wat
[06:05:41] <aquanight> I could not find this anywhere in the open perldoc
[06:06:01] <aquanight> I'm pretty sure the point of it is that age-old unixism of "- opens stdin"
[06:07:24] <zgu> basheval: echo Hello | perl -E 'open my $f, "<", "-"; say scalar <$f>;'
[06:07:25] <perlbot> zgu: ␤
[06:07:38] <zgu> basheval: echo Hello | perl -E 'open my $f, "<-"; say scalar <$f>;'
[06:07:39] <perlbot> zgu: Hello␤␤
[06:07:50] <zgu> only works in 2-arg form
[06:08:09] <zgu> (somewhat as expected)
[06:08:38] <daemon> ah ok so >| will take STDOUT and then put it into pipe and anything following will be written to a file
[06:09:55] <aquanight> ah I see
[06:10:12] <aquanight> in bash >| will force clobbering of an existing file (the shell option 'noclobber' allows you to have > fail if the file exists)
[06:11:35] <daemon> you know though, the App::unixtool or mytool or xtool w/e you want is not a bad idea as a small side project
[06:11:49] <daemon> an easy tool for the common things people do with sed/awk/xargs and sucj
[06:12:16] <aquanight> thing is I don't even know what half of those things are
[06:12:35] <aquanight> I can't think of the last time I've personally had to figure out sed, awk, or xargs
[06:12:48] <daemon> actually the biggest most common thing I have found is find -exec + xargs for mass file renames or moves
[06:12:52] <aquanight> these days I'll just say "fuck it" and perl the damn thing
[06:13:00] <aquanight> that I get
[06:13:10] <aquanight> but fun fact
[06:13:15] <aquanight> there's a perl-based rename tool
[06:13:21] * mst generally uses 'xargs -n1 perl -e'
[06:13:34] <mst> and then operates on $ARGV[0]
[06:13:42] <aquanight> ... but why tho
[06:13:42] <mst> because life's too short
[06:13:55] <daemon> and its always a one off :)
[06:14:08] <aquanight> mst: for extra flex
[06:14:12] <aquanight> the first part of your -e is $_ = shift;
[06:14:22] <aquanight> "-ln without -l or -n"
[06:14:29] *** Quits: Su-Shee (~Susanne@p4ffc7294.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:14:57] <mst> aquanight: I mean -n is just a built in source filter anyway
[06:14:58] <aquanight> oh I suppose you have the bonus points of resetting your entire perl state and having to re-'use' everything also
[06:15:45] *** Joins: Su-Shee (~Susanne@p4ffc7d78.dip0.t-ipconnect.de)
[06:15:51] <aquanight> zgu: ah that makes sense. I think the magic behind <> is to basically send shift(@ARGV) to 2-arg open
[06:16:01] <mst> aquanight: more importantly I get -0 and -P
[06:16:21] <aquanight> gdit now I have to go remember what those do too
[06:16:37] <daemon> :)
[06:16:38] <zgu> and the point of 3-arg is to prevent any such magic from confusing you/opening security holes
[06:16:40] <aquanight> ok -0 is $/ = "\0"
[06:16:43] <Grinnz> <> actually is one-arg open on *ARGV, which has its own magic
[06:16:53] <mst> and matches find's -print0
[06:17:05] <aquanight> but what the fuck is -P
[06:17:12] <mst> for typed straight into bash, "the thing I remember how to type that requires the minimum number of characters" wins
[06:17:12] <aquanight> I can't find it in perlrun
[06:17:25] <mst> aquanight: it's an xargs option - runs that many processes at once
[06:17:58] <mst> so I can have N instances of my 'perl -e' without having to think much
[06:18:11] <daemon> hmm strange really would have expected it to be -j for that
[06:18:16] <aquanight> ah I see
[06:18:18] <aquanight> autoforking
[06:18:27] <aquanight> let xargs handle the fork bullshit instead of having to roll your own
[06:18:28] <mst> daemon: GNU args? consistency? *lol*
[06:18:34] <daemon> :)
[06:18:58] <Grinnz> recursion is always -R or -r except when it isn't
[06:19:06] <Grinnz> -v is version except when it's verbose
[06:19:52] <daemon> --should-really-have-gone-for-forcing-long-names-really
[06:19:53] <mst> aquanight: combine with new.pm
[06:20:18] <mst> | xargs -n1 perl -Mnew=My::Transformer -e '$O->transform($ARGV[0])'
[06:20:44] <aquanight> there was some option system that supported putting your command line in a file and calling it with cmd @args.lst
[06:21:03] <daemon> sounds like a batch file of sorts
[06:21:04] <aquanight> I don't think it was a generic thing, it was specific to some particular unixish
[06:21:17] <aquanight> I want to say either djgpp or maybe mingw
[06:21:21] <aquanight> or maybe cygwin
[06:21:31] <aquanight> one of those "unix on dos/windows" nonsense
[06:21:58] <daemon> hmmm
[06:22:05] <aquanight> I wonder if there's even still a point to mingw/cygwin now that WSL exists
[06:22:13] <daemon> well cmd is the windows command prompt and you can bootstrap it to read a command list I think ... let me check
[06:22:31] <aquanight> no I don't mean like a batch file
[06:22:38] <aquanight> I meant as like a #include but for @ARGV
[06:22:38] <daemon> CMD [/A | /U] [/Q] [/D] [/E:ON | /E:OFF] [/F:ON | /F:OFF] [/V:ON | /V:OFF]
[06:22:39] <daemon>     [[/S] [/C | /K] string]
[06:23:10] <aquanight> like whatever system did this would read args.lst and map it into main()'s argc/argv
[06:23:26] <daemon> interesting
[06:23:38] <mst> aquanight: some_command {*}[set fh [open $argsfile]; read $fh[close fh]] ...
[06:23:41] <aquanight> because unix commands could get some heavy commandlines
[06:23:47] <aquanight> but DOS only allowed like so many characters
[06:23:56] <aquanight> way less than is useful in unix land
[06:24:11] <aquanight> mst: the fuck is that
[06:24:26] <mst> Tcl?
[06:24:45] <aquanight> man I apparently don't remember shit about tcl anymore.
[06:24:47] <mst> (modulo at least one typo, but still)
[06:24:50] <aquanight> which is fine.
[06:25:28] <daemon> think the last time I seen tcl was on an eggdrop irc bot ... many many years ago, at least I think it was tcl
[06:25:47] <mst> aquanight: they have coroutines and a built in MOP though
[06:25:54] <aquanight> I suppose in perl the equivalent would go something like: if ($ARGV[0] =~ m/^@/) { open my $f, "<", $'; splice @ARGV, 0, 1, readline $f; close $f; }
[06:25:55] <Paladin> Eggdrop did you TCL for scripting, yes.
[06:26:01] <Paladin> s/you/use/
[06:26:07] <daemon> ah cool, cheers Paladin 
[06:27:56] <mst> aquanight: /^@/ and splice @ARGV, 0, 1, split /\s+/, do { local (@ARGV, $/) = $_; ~~<> } for $ARGV[0];
[06:28:25] <mst> aquanight: s/^@// and splice @ARGV, 0, 1, split /\s+/, do { local (@ARGV, $/) = $_; ~~<> } for $ARGV[0];
[06:28:28] <daemon> aquanight, or @ARGV = do { if ($ARGV[0] =~ m/^\@(0.*)/) { split /\s/,`cat $1` } } :) -- I think this would work right?
[06:28:28] <mst> there
[06:28:36] <Paladin> Does I suppose.. looks like it's still in active development.. wow.
[06:28:53] <aquanight> daemon: oh god. why cat
[06:29:03] <daemon> aquanight, I wanted to make it as horrible as possible because I was bored :P
[06:29:16] <mst> Paladin: #tcl still has to periodically fend off people who don't know how to get an error message out of their eggy scripts and yet think we can help so yeah
[06:29:55] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[06:30:35] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:30:37] <aquanight> mst: ... yeah. I guess.
[06:30:57] <aquanight> I suppose at least white-splitting is better.
[06:31:02] <daemon> mst, what does TCL do, I mean it can't just be made for irc bots
[06:31:15] <mst> daemon: it's a general scripting language
[06:31:20] <mst> daemon: have you never used expect?
[06:31:22] <aquanight> sometimes it's used to make half-functional telnet clients
[06:31:41] <aquanight> *graphical* telnet clients. I refuse to understand tk.
[06:31:43] <zgu> and tk guis
[06:31:44] <daemon> mst, of course I have, but I always assumed TCL was a much bigger thing than 'eggdrop' 
[06:31:56] <zgu> although tk can use other languages now
[06:32:02] <mst> daemon: so you've written tcl then
[06:32:02] <daemon> I figured it seems mature enough that it must be used in some niche but important utility
[06:32:08] <zgu> and i think most people just use gtk or qt now
[06:32:17] <mst> daemon: expect is just tcl with a few functions pre-imported
[06:32:23] <daemon> oh I see
[06:32:37] *** Quits: travaldo (~travaldo@159.203.88.148) (Quit: travaldo)
[06:33:07] <aquanight> forget tcl, forget perl, we should code all guis in postscript
[06:33:26] <daemon> haha PCL 34 or 5
[06:33:30] <daemon> 4 or 5 :)
[06:33:32] <mst> daemon: also tcl is a common way of doing on-device scripting of cisco routers
[06:33:34] <aquanight> oh god
[06:33:41] <aquanight> daemon: worse. 6
[06:33:55] <mst> daemon: and lots of hardware tooling uses it
[06:33:55] <daemon> aquanight, extra fun ok dokey, ill get the booze in
[06:34:04] <aquanight> though
[06:34:07] <Paladin> If I remember right, Tcl was chosen for the orignal Eggdrop as it was the easiest scriping language to embed in other programs at the time
[06:34:19] <aquanight> I think
[06:34:24] <mst> right, it's basically aimed at a lua-like goal
[06:34:24] <aquanight> PCL6 is like one step removed from EMF
[06:34:27] <daemon> I would think lua would have held that mantle it has for a long long long time
[06:34:36] <rbraun> i think i've only ever used tcl in the cisco context, and otherwise with "expect"
[06:34:36] <mst> but instead of 'javascript bitten by retardo the syphilitic clown' syntax wise
[06:34:43] <mst> tcl is 'bash bitten by a radioactive lisp'
[06:34:51] <rbraun> lol
[06:34:53] <aquanight> actually
[06:34:57] <mst> daemon: tcl predates lua, young man.
[06:34:59] <mst> daemon: as does expect
[06:35:03] <aquanight> I sometimes wonder if tcl was picked not just for pluggability
[06:35:09] <aquanight> but because the entire language is centric on text
[06:35:14] <aquanight> like literally everything is text
[06:35:26] <mst> everything has a canonical string representation, certainly
[06:35:32] <aquanight> like you think perl is because regexes and shit
[06:35:43] <mst> but the easy of passing around chunks of code in tcl makes adding new control constructs trivial
[06:35:43] <aquanight> but tcl the only script-facing data type is string
[06:35:53] <Paladin> Lua came out just months before Eggdrop.. wasn't nearly popular at that time (both came out in 1993)
[06:36:03] <aquanight> it's like the bastard child of a scripting language with a shell
[06:36:10] <mst> aquanight: and a lisp
[06:36:11] <aquanight> tcl is probably closer to a superbash than perl is
[06:36:18] <aquanight> well
[06:36:31] <aquanight> I should say it's more that tcl is a superbash that is still more bash than code
[06:36:52] <daemon> I do not actually know the term superbash and I can't find it on urban dictionary ... what does that mean
[06:37:03] <daemon> perlbot define superbash
[06:37:04] <mst> hence 'bash bitten by a radioactive lisp'
[06:37:06] <perlbot> daemon: Your Xpath didn't match anything
[06:37:08] <aquanight> daemon: I've only ever heard it used in this channel
[06:37:10] <mst> daemon: super-(/bin/bash)
[06:37:15] <daemon> super like sudo?
[06:37:23] * mst facepalms
[06:37:27] <aquanight> daemon: as a description of people who write perl scripts to serve a role once served by bash scripts
[06:37:34] <daemon> ah I see
[06:37:37] <daemon> ok that makes sense
[06:37:50] <mst> also tcl has a built in event loop
[06:37:50] <aquanight> and while they might do so using perl's natural functions
[06:37:57] <mst> which is why it worked so well for expect
[06:37:59] <aquanight> that it was written in a style very much like a bash script
[06:38:04] <daemon> perlbot superbash is a slang term for people who write perl scripts to serve a role once served by bash scripts
[06:38:05] <perlbot> daemon: Stored superbash is a slang term for people who write perl scripts to serve a role once served by bash scripts
[06:38:35] <aquanight> I think if you ever take a dive in openssl's source tree
[06:38:41] <aquanight> they have som examples of this kind of thing
[06:38:45] <daemon> im not the masochistic 
[06:38:57] <mst> proc unless {cond block} { if ![uplevel 1 eval $cond] { uplevel 1 eval $block } }
[06:39:06] <mst> ^^ try that in most languages :)
[06:39:06] <aquanight> there's some perl scripts that definitely look like they either used to be shell scripts or were written in a shell-centric style
[06:39:38] <aquanight> mst: sub unless :prototype(&&) { shift->() or shift->(); }
[06:39:53] <mst> aquanight: applicative, you already lost.
[06:40:19] <mst> esp. since more than one & doesn't even exist
[06:40:34] <mst> and the scoping and call stack are wrong now
[06:40:36] <aquanight> mst: the only reason 'uplevel' is even needed because tcl doesn't evaluate {stuff}
[06:40:39] <mst> and basically your attempt sucked
[06:40:47] <aquanight> mst: it wasn't supposed to not
[06:40:52] <daemon> well 3am again time for me to bugger off to bed, have a nice night you guys/gals :)
[06:41:02] <mst> ladies/gentlemen/tenors
[06:41:17] <aquanight> mst: because {stuff} is just a string, not a scope
[06:41:48] <mst> aquanight: until you treat it as a script, then it's a script
[06:42:00] <aquanight> mst: yes which is what eval is for
[06:42:11] <aquanight> and then you need uplevel to put it in the right scope
[06:42:24] <aquanight> to be fair I agree there's not a *direct* perl of that
[06:42:36] <aquanight> because I don't know shit about how to eval a string into another sub's scope
[06:42:42] <mst> finally aquanight catches up to where I was in the first place
[06:43:10] <aquanight> but if the point was being able to basically define logical flow constructs
[06:43:20] <mst> it's nicer in Tcl than it is in perl
[06:43:21] <aquanight> well :prototype(&) was pretty much the attempt to do that
[06:43:33] <aquanight> it still sucks because PP can't have nice things like keyword API
[06:43:41] <aquanight> and everyone hates prototypes these days anyway
[06:44:01] <mst> also it's interesting that where perl has an SV with multiple slots
[06:44:20] <mst> Tcl_Object just contains the last thing it was used at and shimmers between representations as needed
[06:44:51] <aquanight> that seems... potentially problematic if you alternate between usages
[06:45:14] <mst> you can make things less efficient by doing that, certainly
[06:45:33] <aquanight> it wouldn't even be hard to do by accident
[06:46:10] <mst> there's a special case where it'll cache the string representation until mutation happens that means printing a value doesn't take that hit
[06:46:19] <aquanight> consider: for (my $x = 0; $x < 20; ++$x) { say "$x"; } # quick alternation between string and numeric use.
[06:46:23] <mst> nope
[06:46:30] <mst> not a problem at all
[06:46:37] <mst> so doing it by accident is actually pretty rare in practice
[06:46:38] <aquanight> well yeah you clarify that *now*
[06:47:09] <mst> I was still typing while you were assuming, fuck your life
[06:47:45] <aquanight> IRC will be the last platform to ever adopt the "X is typing..." nonsense. And even then it will be very begrudgingly
[06:48:09] <mst> and even then I don't expect any of us to pay any attention and beclown ourselves just as often as a result anyway
[06:48:17] <aquanight> oh certainly
[06:48:58] <mst> the tcl metaclass system is well worth a look though if you're bored enough sometime
[06:50:04] <aquanight> I'm trying to think if there's anything lua has that I wish perl did.
[06:50:22] <aquanight> And the only thing I can really come up with is the fact that even though lua does have scalar/list situations, it's much more strict than perl's.
[06:51:34] <aquanight> probably because the only time lua has anything like perl's "list context" is at the end of an argument or return value list or table constructor
[06:52:23] <aquanight> the number of times someone's gotten clowned by wrong-context calls in perl and now everyone hates 'wantarray' because of it.
[06:54:34] <mst> wantarray is like watersports at an orgy
[06:54:54] <mst> no matter how good an idea it sounds like to begin with, at some point somebody's going to get splashed who didn't expect it
[06:55:53] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[06:59:09] *** Joins: gast0n (~g4570n@user/gast0n)
[07:00:08] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 268 seconds)
[07:03:35] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[07:12:17] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:12:17] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:12:17] *** finn_elija is now known as FinnElija
[07:15:40] *** Joins: deadmarshal (~deadmarsh@95.38.228.130)
[07:36:49] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (Ping timeout: 268 seconds)
[07:36:54] * GumbyPAN CPAN Upload: MojoX-DirectoryListing-0.11 by MOB https://metacpan.org/release/MOB/MojoX-DirectoryListing-0.11
[07:45:45] *** Quits: deadmarshal (~deadmarsh@95.38.228.130) (Ping timeout: 268 seconds)
[07:47:15] *** Joins: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net)
[07:49:28] *** Quits: EvanCarroll (~ecarroll@67-200-246-226.static.logixcom.net) (Ping timeout: 268 seconds)
[07:51:20] *** Joins: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[08:01:42] *** Joins: deadmarshal (~deadmarsh@95.38.228.130)
[08:07:12] *** Joins: Martchus_ (~martchus@2a01:c22:7653:a500:d250:99ff:fe49:3cce)
[08:08:30] *** Quits: Martchus (~martchus@2a01:c22:72ff:2700:d250:99ff:fe49:3cce) (Ping timeout: 260 seconds)
[08:13:30] *** Quits: deadmarshal (~deadmarsh@95.38.228.130) (Ping timeout: 268 seconds)
[08:21:44] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:25:23] *** Quits: wwalker (~wwalker@platinum.solid-constructs.com) (Quit: leaving)
[08:29:54] *** Joins: wwalker (~wwalker@platinum.solid-constructs.com)
[08:31:37] *** Joins: deadmarshal (~deadmarsh@95.38.228.130)
[08:31:50] *** Quits: v` (~v@user/ctrl) (Ping timeout: 260 seconds)
[08:54:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:59:06] *** Joins: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net)
[09:09:06] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:18:11] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[09:21:58] *** Quits: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net) (Ping timeout: 268 seconds)
[09:24:15] *** Quits: EvanCarroll (~ecarroll@c-73-32-86-244.hsd1.tx.comcast.net) (Remote host closed the connection)
[09:25:39] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 268 seconds)
[09:34:41] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:54:42] *** Joins: japh (~japh@195-198-186-122.customer.telia.com)
[09:55:58] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:56:37] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:57:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[09:57:43] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:57:55] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:59:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:59:45] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:03:39] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:04:27] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:18:22] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:33:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:33:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:35:26] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[10:52:52] *** Joins: haj1 (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[10:53:28] *** Quits: japh (~japh@195-198-186-122.customer.telia.com) (Remote host closed the connection)
[10:55:05] *** Quits: Su-Shee (~Susanne@p4ffc7d78.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[10:56:32] *** Joins: Su-Shee (~Susanne@p4ffc75c5.dip0.t-ipconnect.de)
[11:19:45] *** Quits: Su-Shee (~Susanne@p4ffc75c5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:20:58] *** Joins: Su-Shee (~Susanne@p4ffc7427.dip0.t-ipconnect.de)
[11:27:50] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[11:28:22] *** Joins: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[11:30:35] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[11:31:33] *** Joins: Manderson (manderson@gateway/vpn/protonvpn/manderson)
[11:34:33] *** Quits: Manderson_ (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 268 seconds)
[11:38:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:39:08] *** Joins: tobybl (~tobybl@213.31.135.91)
[11:41:19] * GumbyPAN welcomes XUEYAZHOU - Xueya Zhou to CPAN!
[11:41:20] * GumbyPAN welcomes AVERKIOS - Averkios Averkiadis to CPAN!
[11:51:10] *** Quits: Affliction (affliction@idlerpg/player/affliction) (Remote host closed the connection)
[11:52:03] *** Joins: Affliction (affliction@idlerpg/player/affliction)
[11:52:05] *** Joins: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net)
[12:04:28] *** Joins: Pali (~pali@user/pali)
[12:06:22] * GumbyPAN CPAN Upload: Text-Amuse-Compile-1.65 by MELMOTHX https://metacpan.org/release/MELMOTHX/Text-Amuse-Compile-1.65
[12:10:01] *** Joins: art1 (~romeyke@p200300ccdf0b1800cf16d1dae4050826.dip0.t-ipconnect.de)
[12:10:19] *** Quits: Su-Shee (~Susanne@p4ffc7427.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[12:11:48] *** Joins: Su-Shee (~Susanne@p4ffc74c8.dip0.t-ipconnect.de)
[12:21:24] * GumbyPAN welcomes MMILLER - Matthew Miller to CPAN!
[12:23:46] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 260 seconds)
[12:23:55] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[12:36:25] * GumbyPAN CPAN Upload: Search-ESsearcher-0.4.3 by VVELOX https://metacpan.org/release/VVELOX/Search-ESsearcher-0.4.3
[12:45:27] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[12:45:27] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Ping timeout: 268 seconds)
[12:48:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:59:38] *** Joins: choroba (~E.Choroba@88.146.255.106)
[13:03:57] *** Quits: deadmarshal (~deadmarsh@95.38.228.130) (Ping timeout: 268 seconds)
[13:06:59] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[13:07:45] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[13:07:55] *** Joins: deadmarshal (~deadmarsh@95.38.228.130)
[13:10:56] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:19:44] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Quit: Leaving...)
[13:21:21] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[13:22:29] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:22:32] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Client Quit)
[13:26:00] <Altreus> o/
[13:32:44] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:32:59] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[13:33:18] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[13:38:20] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[13:44:11] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:52:33] *** Martchus_ is now known as Martchus
[13:57:37] *** Joins: v` (~v@user/ctrl)
[14:08:50] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[14:10:44] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[14:13:35] *** Quits: deadmarshal (~deadmarsh@95.38.228.130) (Ping timeout: 264 seconds)
[14:14:47] *** Joins: deadmarshal (~deadmarsh@95.38.228.130)
[14:19:34] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 260 seconds)
[14:27:49] *** Quits: art1 (~romeyke@p200300ccdf0b1800cf16d1dae4050826.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:42] *** Joins: deadmarshal_ (~deadmarsh@95.38.231.12)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:31:55] *** Quits: deadmarshal (~deadmarsh@95.38.228.130) (Ping timeout: 256 seconds)
[14:36:27] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 256 seconds)
[14:38:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:43:47] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[14:44:19] *** Joins: art1 (~romeyke@p200300ccdf258f008944ccaf31d47db2.dip0.t-ipconnect.de)
[14:49:29] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[14:50:39] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[14:51:04] *** Joins: alex11 (~alex11@user/alex11)
[15:00:15] *** Quits: Su-Shee (~Susanne@p4ffc74c8.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:01:35] *** Joins: Su-Shee (~Susanne@p4ffc7011.dip0.t-ipconnect.de)
[15:06:29] *** Quits: Su-Shee (~Susanne@p4ffc7011.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:07:44] *** Joins: Su-Shee (~Susanne@p4ffc7028.dip0.t-ipconnect.de)
[15:20:05] *** Quits: deadmarshal_ (~deadmarsh@95.38.231.12) (Ping timeout: 256 seconds)
[15:22:50] *** Joins: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net)
[15:23:51] *** Joins: pucara (~i@181.92.84.206)
[15:35:45] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[15:46:13] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[15:50:58] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:09:10] *** Quits: shuvarek (~shuvarek@staticline-31-182-169-28.toya.net.pl) (Ping timeout: 260 seconds)
[16:11:59] *** Joins: jabberwok (~wlindley@75.105.20.104)
[16:15:10] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[16:18:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:24:06] *** Joins: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed)
[16:29:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[16:31:17] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[16:31:47] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Ping timeout: 268 seconds)
[16:31:50] * GumbyPAN CPAN Upload: Astro-App-Satpass2-0.049 by WYANT https://metacpan.org/release/WYANT/Astro-App-Satpass2-0.049
[16:33:49] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[16:46:05] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[16:51:19] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[16:53:09] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:53:13] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:07:28] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[17:17:04] <jabberwok> I have Tcl to thank for getting me to learn Perl. In 1994 I needed to move from Visual Basic to something that would work both on WinNT and Solaris, and Tcl/Tk led me to Perl/Tk and I have been here ever since.
[17:18:46] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Ping timeout: 260 seconds)
[17:19:28] <LeoNerd> :)
[17:19:52] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Ping timeout: 268 seconds)
[17:19:52] *** Quits: perldoc (~perldoc@24.88.49.194) (Ping timeout: 268 seconds)
[17:19:52] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Ping timeout: 268 seconds)
[17:19:53] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 268 seconds)
[17:19:53] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 268 seconds)
[17:20:27] <rindolf> jabberwok: nice
[17:21:55] * GumbyPAN CPAN Upload: Minion-Backend-MongoDB-1.11 by EBRUNI https://metacpan.org/release/EBRUNI/Minion-Backend-MongoDB-1.11
[17:23:26] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[17:25:22] *** Joins: X-Scale` (~ARM@83.223.227.196)
[17:26:04] *** X-Scale` is now known as X-Scale
[17:28:45] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:36] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:13] *** Guest4471 is now known as fatalnix
[17:32:17] *** Quits: fatalnix (~hodbogi@9600-baud.net) (Changing host)
[17:32:17] *** Joins: fatalnix (~hodbogi@user/fatalnix)
[17:34:26] <corwin> I learned what little I know of Tk from playing with Perl/Tk.
[17:34:41] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[17:35:45] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Quit: ZNC 1.8.2 - https://znc.in)
[17:36:11] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[17:41:57] * GumbyPAN CPAN Upload: FASTX-Reader-1.3.0 by PROCH https://metacpan.org/release/PROCH/FASTX-Reader-1.3.0
[17:46:10] *** Joins: xenial-user5 (~androirc@3EC97C6F.unconfigured.pool.telekom.hu)
[17:51:19] <revhippie> I think my first big project in Perl was an online pizza-ordering system in 1995 or '96.  Small-town ISP, one specific Papa John's outlet, and I don't think it ever had more than half a dozen users.
[17:51:57] *** Quits: xenial-user5 (~androirc@3EC97C6F.unconfigured.pool.telekom.hu) (Ping timeout: 268 seconds)
[17:53:09] <ilmari> my first foray into perl was a web ui for the home isdn router linux box
[17:53:47] <ilmari> my parents wanted some visibility, so I knocked up a bar chart of online time per day using GD and parsing the pppd logs
[17:54:38] <ilmari> and a table that showed the status of each line and let you manually connect and disconnect the one auto-dialing line, and connect the second line too for twice the bandwidth (and cost)
[17:55:01] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 268 seconds)
[17:56:02] <ilmari> in 1997, usig embperl
[17:57:14] *** Joins: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4)
[17:57:57] *** Joins: tcohen17 (~tcohen@192.141.149.78)
[17:58:42] <Mandevil> My first significant project in perl is still in use... started in 2004 or so
[18:00:54] <tcohen> Mandevil++
[18:00:57] <Mandevil> Started using perl when I outgrew awk :)
[18:01:29] <tcohen> rjbs have a minute for an Email::MIME/Email::Stuffer question?
[18:01:30] <ilmari> mine was only in use until my parents got ADSL in the early noughties
[18:01:47] *** Quits: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:01:59] * GumbyPAN CPAN Upload: Minion-Backend-MongoDB-1.12 by EBRUNI https://metacpan.org/release/EBRUNI/Minion-Backend-MongoDB-1.12
[18:03:52] <Grinnz> tcohen: lots of us use those modules, you could just ask the question and see if anyone can help?
[18:06:23] <jabberwok> ilmari - ah, I had an SMC Barricade unit (connected to a Hayes 33.6k Smartmodem) that autodialed the ISP on demand from four shared 10BaseT ports. Actually installed several of those for small businesses before DSL or anything else was affordable in Phoenix.
[18:07:31] <tcohen> Grinnz: good point
[18:08:20] <tcohen> so in my project we picked Email::Stuffer, and have a use case in which we are failing
[18:08:23] *** Joins: EGD (~egd@user/egd)
[18:08:38] <ilmari> jabberwok: we just had an old pc running debian with a TeleS ISA-PnP ISDN card
[18:09:01] <tcohen> Email::MIME has a way to pass it a string that gets parsed and generates an Email::MIME object
[18:09:17] <tcohen> is there a way to make something similar with Email::Stuffer?
[18:09:37] <tcohen> like parsing it with Email::MIME and passing it to Email::Stuffer?
[18:09:50] *** Joins: przemoc (~przemoc@user/przemoc)
[18:10:04] <ilmari> we had two PCs, and we wanted to be able to be online from both at the same time without hogging both ISDN lines, so the solution was obviously to get a third one and pull 10Base-2 across the three floors of the house
[18:11:07] <Grinnz> tcohen: Email::Stuffer is really just a wrapper of Email::MIME and Email::Sender - so if you already have the full constructed message, you can just use Email::MIME and then Email::Sender yourself
[18:12:15] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:12:16] <tcohen> so you suggest I parse the (string/stored on the DB) email with Email::MIME and just pass it to Email::Sender
[18:12:28] <Grinnz> ->send from Email::Stuffer is try_to_sendmail from Email::Sender::Simple, 
[18:12:43] <tcohen> and not try to make Email::Stuffer have the ->as_string counterpart
[18:12:43] <Grinnz> with transport and envelope information specified as the second arg if necessary
[18:13:03] <Grinnz> if all you need is the send method, you don't really need Stuffer
[18:13:25] <tcohen> that's correct in this particular case. 
[18:13:34] <tcohen> for the rest of the app, Email::Stuffer excells
[18:13:47] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[18:13:50] <Grinnz> https://metacpan.org/pod/Email::Sender::Manual::QuickStart is the docs for Email::Sender basically
[18:13:51] <Paperbot> Link title(s): [ Email::Sender::Manual::QuickStart - how to start using Email::Sender right now - metacpan.org ]
[18:13:57] <tcohen> thanks Grinnz 
[18:14:27] <Grinnz> (there was never an Email::Sender::Complex so the names are a bit unfortunate :)
[18:15:23] <tcohen> heh
[18:18:56] <corwin> My first perl project was a web search tool. It was a sub-contracting gig and when I turned in my solution (in C) DrForr suggested I pick-up Perl and "try again".
[18:19:18] *** Quits: Nei (~ailin@user/nemui) (Remote host closed the connection)
[18:19:39] <genio> Gotta love writers these days. `In 1999, Bill Lorance murdered his stepfather to death with a hammer`
[18:19:42] *** Joins: Nei (~ailin@user/nemui)
[18:19:43] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 256 seconds)
[18:19:50] <revhippie> Murdered to death, huh?
[18:20:54] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[18:21:14] <genio> not just a little bit of murder, no. all the way to death
[18:21:36] *** Joins: mattil (~mattil@87-92-88-105.bb.dnainternet.fi)
[18:24:01] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 268 seconds)
[18:25:54] *** Joins: furrymcgee (~devuan@cgn-213-196-210-222.nc.de)
[18:25:57] *** Quits: mattil (~mattil@87-92-88-105.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[18:26:38] <Altreus> my first view of Perl was at university, where I was led to believe you couldn't pass an array to a function because the teacher hadn't heard of references
[18:26:48] <Altreus> so I went f that and picked up PHP
[18:28:40] <Grinnz> nice, why even have arrays?
[18:30:25] <Altreus> there was extremely little knowledge between me and "Oh I get it" but that was not provided
[18:30:56] <Altreus> anyway I was rescued by Lovefilm
[18:31:10] <LeoNerd> I find even now, there's just a hell of a lot of "oh by the way X exists" about teaching perl
[18:31:17] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[18:32:11] <LeoNerd> Which I'm really bad at. I just make things and then presume that since I've made it, obviously the entire world now knows that it exists, and so why is anybody still doing it the old way..?
[18:32:16] <LeoNerd> E.g. try/catch yesterday
[18:32:17] <Altreus> I do appreciate that it's 10% "Here's how it works" and 90% "Here's a better way"
[18:35:50] <LeoNerd> For me I find it's at least 10% "oh, yeah that's the current way and it's sucky; here let me make a better way"
[18:36:00] <LeoNerd> See also: er... about half of my CPAN modules
[18:37:04] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[18:38:14] <Altreus> well I think you have a fairy unique perspective :)
[18:38:37] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[18:40:56] *** Quits: tcohen17 (~tcohen@192.141.149.78) (Quit: Client closed)
[18:42:13] <Altreus> fairly...
[18:48:12] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[18:53:00] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 268 seconds)
[18:58:10] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:59:25] *** Joins: diskin (~diskin@ec2-18-158-88-195.eu-central-1.compute.amazonaws.com)
[19:02:13] *** Quits: KnoP (~KnoP@business-176-095-149-105.static.arcor-ip.net) (Quit: ChatZilla 0.9.99 [SeaMonkey 2.53.9.1/20210921115122])
[19:10:04] *** Joins: willthechill (~willthech@107-217-160-207.lightspeed.austtx.sbcglobal.net)
[19:10:55] *** Joins: D-ion (~D-ion___@176.59.20.32)
[19:18:05] *** Quits: D-ion (~D-ion___@176.59.20.32) (Ping timeout: 256 seconds)
[19:23:50] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Ping timeout: 260 seconds)
[19:25:43] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[19:35:41] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[19:38:32] *** Joins: humky (~humky@user/humky)
[19:39:07] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:44:37] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[19:45:52] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[19:47:16] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:48:35] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:52:34] *** Joins: magla (~gelignite@55d4c66c.access.ecotel.net)
[19:55:53] *** Quits: Su-Shee (~Susanne@p4ffc7028.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:57:28] *** Joins: Su-Shee (~Susanne@p4ff49c8c.dip0.t-ipconnect.de)
[20:04:34] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:05:32] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[20:13:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Ping timeout: 256 seconds)
[20:17:13] * GumbyPAN CPAN Upload: HTTP-Tiny-0.079-TRIAL by DAGOLDEN https://metacpan.org/release/DAGOLDEN/HTTP-Tiny-0.079-TRIAL
[20:17:23] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[20:22:13] * GumbyPAN CPAN Upload: CBOR-XS-1.86 by MLEHMANN https://metacpan.org/release/MLEHMANN/CBOR-XS-1.86
[20:32:14] * GumbyPAN CPAN Upload: Test-Expander-1.0.1 by JSF https://metacpan.org/release/JSF/Test-Expander-1.0.1
[20:52:16] * GumbyPAN CPAN Upload: RT-Extension-ReplyWithMail-0.01-correctedInfo by AVERKIOS https://metacpan.org/release/AVERKIOS/RT-Extension-ReplyWithMail-0.01-correctedInfo
[20:52:29] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Remote host closed the connection)
[20:52:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[20:56:17] * GumbyPAN CPAN Upload: RT-Extension-ReplyWithMail-0.01 by AVERKIOS https://metacpan.org/release/AVERKIOS/RT-Extension-ReplyWithMail-0.01
[20:57:14] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[21:01:17] * GumbyPAN CPAN Upload: Config-Model-2.144 by DDUMONT https://metacpan.org/release/DDUMONT/Config-Model-2.144
[21:09:31] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[21:11:18] * GumbyPAN CPAN Upload: Test2-Harness-UI-0.000096 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-UI-0.000096
[21:11:19] * GumbyPAN CPAN Upload: RT-Extension-ReplyWithMail-0.011 by AVERKIOS https://metacpan.org/release/AVERKIOS/RT-Extension-ReplyWithMail-0.011
[21:12:36] *** Joins: Guest36 (~Guest36@p200300eb972c2f0080158facaf09a528.dip0.t-ipconnect.de)
[21:12:49] *** Quits: choroba (~E.Choroba@88.146.255.106) (Quit: Leaving)
[21:13:37] *** Parts: Guest36 (~Guest36@p200300eb972c2f0080158facaf09a528.dip0.t-ipconnect.de) ()
[21:20:44] *** Joins: dansan (~daniel@75.81.148.51)
[21:43:39] *** Joins: semeion (~semeion@user/semeion)
[21:49:51] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca) (Quit: clscott)
[21:51:23] * GumbyPAN CPAN Upload: Test2-Harness-1.000080 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000080
[21:57:23] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 268 seconds)
[21:58:36] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Ping timeout: 268 seconds)
[21:59:14] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 268 seconds)
[21:59:48] *** Quits: bmeneg (~bmeneg@2804:828:f233:5075:e23e:22bf:327a:21ed) (Quit: Konversation terminated!)
[22:01:23] *** Joins: deadmarshal (~deadmarsh@95.38.231.12)
[22:02:33] *** Joins: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-88.dsl.bell.ca)
[22:03:52] *** Parts: art1 (~romeyke@p200300ccdf258f008944ccaf31d47db2.dip0.t-ipconnect.de) ()
[22:04:35] *** Joins: tobybl (~tobybl@213.31.135.91)
[22:05:44] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[22:12:16] *** Joins: semeion (~semeion@user/semeion)
[22:18:21] *** Joins: pucara (~i@host194.181-14-159.telecom.net.ar)
[22:43:26] *** Quits: furrymcgee (~devuan@cgn-213-196-210-222.nc.de) (Quit: leaving)
[22:51:58] *** Joins: llh (~llh@user/llh)
[23:08:42] *** Quits: deadmarshal (~deadmarsh@95.38.231.12) (Ping timeout: 256 seconds)
[23:18:17] *** eldritch__ is now known as eldritch
[23:19:30] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:f161:c9c3:b403:49f6)
[23:20:45] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:913c:73e9:9979:f03)
[23:22:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b) (Ping timeout: 268 seconds)
[23:23:12] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:24:14] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[23:25:10] *** Quits: pucara (~i@host194.181-14-159.telecom.net.ar) (Quit: Lost terminal)
[23:25:34] *** Quits: Su-Shee (~Susanne@p4ff49c8c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[23:26:33] * GumbyPAN CPAN Upload: Net-RFC3161-Timestamp-0.010 by AKHUETTEL https://metacpan.org/release/AKHUETTEL/Net-RFC3161-Timestamp-0.010
[23:26:53] *** Joins: Su-Shee (~Susanne@p4ff49ab6.dip0.t-ipconnect.de)
[23:30:30] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 268 seconds)
[23:43:17] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[23:49:45] *** Quits: Pny (pny1312@2605:6400:c847:1985::5891) (Changing host)
[23:49:45] *** Joins: Pny (pny1312@user/pny)
[23:51:28] *** Quits: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741) (Changing host)
[23:51:28] *** Joins: PonyBlocks-_- (ponyblocks@user/ponyblocks)
