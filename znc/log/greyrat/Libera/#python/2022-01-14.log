[00:00:02] *** Joins: Macuser (~Macuser@2600:1003:b465:566a:80cf:bd25:ca3b:1788)
[00:00:30] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:02:55] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:03:05] <SnoopJ> not sure what's going on, then
[00:04:02] *** Joins: Barones (~Barones@189.50.80.77)
[00:05:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:05:39] *** Joins: marcello42 (~mp@2001:1a81:1373:1000:b615:e09c:7d18:7b3f)
[00:05:41] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[00:05:47] *** Quits: fling (~fling@user/fling) (Ping timeout: 256 seconds)
[00:07:31] *** Quits: ba (~ba@cpc1-hari17-2-0-cust27.20-2.cable.virginm.net) (Remote host closed the connection)
[00:07:40] *** Quits: hylisper2 (~yaaic@103.205.173.25) (Quit: Yaaic - Yet another Android IRC client - http://www.yaaic.org)
[00:07:53] *** Joins: Guest26 (~Guest26@78-58-232-10.static.zebra.lt)
[00:08:44] *** Joins: goldcrest (~goldcrest@212.252.82.226)
[00:09:51] *** Quits: jw_dungeon (~jw@2601:44:4380:4a10:84fa:95e:73a6:3e6d) (Quit: Konversation terminated!)
[00:09:54] <matsaman> rotherfuchs: which package is the wrong, non-2_to_3 one?
[00:10:07] <rotherfuchs> pyCLI
[00:10:31] *** Joins: fling (~fling@user/fling)
[00:11:43] <matsaman> how do you determine so?
[00:11:50] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[00:11:59] <SnoopJ> matsaman, it's exactly the same sdist for each version, their setup.py wants to run 2to3 over the source to make it 3.x friendly
[00:12:11] <SnoopJ> and this can apparently fail in really subtle ways
[00:13:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[00:13:29] <matsaman> how do you determine which pyCLI is the one you want or not, and can we see your reqs.txt?
[00:14:15] <SnoopJ> there is only one pyCLI at play
[00:14:46] <SnoopJ> `python3 -c 'import cli.app'` will fail if 2to3 wasn't run over the source during the installation, which can happen if setuptools is 'too new' and evidently in other cases too
[00:15:58] <matsaman> I could poke at it, but not without knowing what criterion is used for determining the correct pyCLI to start with, and not without the reqs.txt
[00:16:19] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[00:16:23] <SnoopJ> I don't know any other ways to tell you that exactly one version of pyCLI (2.0.3) is involved here
[00:16:42] <matsaman> okay, just need the reqs.txt then
[00:16:56] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[00:17:16] <SnoopJ> rotherfuchs, did installing pyCLI on its own not work, then?
[00:17:56] <rotherfuchs> SnoopJ stupid me, I was installing pycli outside the virtualenv.. should go to bed. Final answer: yes it worked!
[00:18:24] <SnoopJ> phew :)
[00:18:36] <rotherfuchs> Using setuptools <=59 will include the 2to3 which provides support for Python2 code, which is what I needed for pyCLI.
[00:18:39] * SnoopJ was worried there was *another* really weird subtle failure at play
[00:18:55] <rotherfuchs> haha no no all good
[00:19:21] <rotherfuchs> Thank you very much for your support, couldn't have figured out on my own!
[00:19:57] *** flooded is now known as _flood
[00:20:04] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[00:20:17] *** Quits: jmd (~user@de.cellform.com) (Ping timeout: 240 seconds)
[00:21:14] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[00:24:34] *** Joins: Betal (~Betal@user/betal)
[00:24:39] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:24:39] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Ping timeout: 256 seconds)
[00:24:40] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 250 seconds)
[00:25:26] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[00:26:20] *** Joins: walterwhip (~www@user/walterwhip)
[00:29:35] *** Quits: rotherfuchs (~rotherfuc@2a01:598:b97b:de35:1c67:6273:b56b:3564) (Ping timeout: 256 seconds)
[00:29:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[00:30:41] *** Joins: miique (~miiquemat@2001:470:69fc:105::1:6901)
[00:32:02] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[00:32:25] *** Quits: Barones (~Barones@189.50.80.77) (Quit: Leaving)
[00:32:35] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[00:32:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[00:32:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:33:00] <SnoopJ> hmm, 58.0 is when 2to3 support was dropped. I hope that doesn't cause any headaches for them.
[00:35:00] *** Joins: tomasfarias7 (~tomasfari@user/tomasfarias)
[00:36:41] *** Joins: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com)
[00:36:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[00:37:14] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[00:37:22] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 260 seconds)
[00:37:22] *** tomasfarias7 is now known as tomasfarias
[00:38:27] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[00:38:47] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[00:38:50] *** Joins: rajkohaxor (~rajkosto@178.220.243.118)
[00:39:54] *** Quits: teut (~teut@2401:4900:1c68:6b85:827:8b5f:2dc7:4cd1) (Quit: Client closed)
[00:40:31] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[00:41:07] *** lukedashjr is now known as luke-jr
[00:41:26] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:42:10] *** Joins: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net)
[00:44:36] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 250 seconds)
[00:45:39] *** Quits: voidcat (~voidcat@user/voidcat) (Ping timeout: 250 seconds)
[00:45:41] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Quit: Leaving)
[00:45:49] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:47:26] *** Joins: walterwhip (~www@user/walterwhip)
[00:48:27] *** Quits: vizi (~ketiv@92.40.195.183.threembb.co.uk) (Ping timeout: 256 seconds)
[00:48:57] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[00:49:17] *** Quits: Guest26 (~Guest26@78-58-232-10.static.zebra.lt) (Quit: Client closed)
[00:49:29] *** Joins: voidcat (~voidcat@user/voidcat)
[00:49:37] *** Parts: dulanic (~dulanic@47.187.144.163) (The Lounge - https://thelounge.chat)
[00:49:39] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[00:50:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:52:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:52:41] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:53:00] *** Joins: Joss (~joss@user/Joss)
[00:53:48] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[00:54:45] *** Parts: jcass (~cindy@50-0-146-31.dsl.dynamic.fusionbroadband.com) (Leaving)
[00:55:12] *** Joins: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net)
[00:55:48] <HiccupJul> is there some way to use tempfile to make a folder with a temporary name, but one that isn't deleted after use?
[00:56:17] <HiccupJul> its just my program can't know what the folder is to be called until the files are created in it
[00:56:49] <ChrisWarrick> HiccupJul: when would the directory be deleted then?
[00:56:49] <HiccupJul> i guess i could make a temporary folder using tempfile, create the files, then create the folder with the proper name, then move the files from the temp folder to the real folder
[00:56:58] *** kevr` is now known as kevr
[00:56:59] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[00:57:09] <HiccupJul> but that seems longwinded
[00:57:21] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[00:57:26] <HiccupJul> <hrisWarrick: it wouldn't be deleted - it would just be renamed
[00:57:31] <jinsun> tempfile has mkdtemp which doesnt auto-delete
[00:57:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[00:57:51] <HiccupJul> it says "On completion of the context or destruction of the temporary directory object, the newly created temporary directory and all its contents are removed from the filesystem."
[00:58:08] <HiccupJul> that doesn't sound very avoidable, but maybe i'm wrong
[00:58:09] <Repiphany> https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp "The user of mkdtemp() is responsible for deleting the temporary directory and its contents when done with it."
[00:58:19] *** Joins: lyodaom (~user@host86-160-97-46.range86-160.btcentralplus.com)
[00:58:41] <HiccupJul> hmm
[00:59:00] <HiccupJul> but i would have though the object would be destroyed when the python script finishes running...
[00:59:15] *** Joins: frmlof (~frmlof@70.243.238.191)
[00:59:20] <HiccupJul> and it says the directory will be removed when the object is destroyed...
[00:59:24] <HiccupJul> i guess i can just try it
[00:59:38] <jinsun> it says that for a different class
[00:59:47] <jinsun> not for mkdtemp
[00:59:52] <Repiphany> TemporaryDirectory/TemporaryFile are specifically different in that way vs mkstemp/mkdtemp
[01:00:17] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[01:00:38] *** Quits: matrixbot_bartab (~matrixbot@lfbn-idf1-1-16-71.w82-124.abo.wanadoo.fr) (Quit: Bridge terminating on SIGTERM)
[01:00:45] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[01:00:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:01:20] *** Quits: panella32 (~panella32@45.130.83.88) (Quit: Textual IRC Client: www.textualapp.com)
[01:01:56] <HiccupJul> sorry, stupid mistake on my part
[01:02:12] *** Quits: Joss (~joss@user/Joss) (Quit: Leaving.)
[01:02:12] <HiccupJul> as you say i was reading TemporaryDirectory instead of mkdtemp
[01:03:24] <HiccupJul> thanks
[01:03:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[01:05:02] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[01:05:37] *** Joins: Barones (~Barones@189.50.80.77)
[01:06:46] *** Quits: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net) (Remote host closed the connection)
[01:07:03] *** Joins: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net)
[01:08:35] *** Joins: tsu (~tsu@2E8B8C62.catv.pool.telekom.hu)
[01:08:36] *** Quits: l4yer (~l4yer@178.239.168.223) (Read error: Connection reset by peer)
[01:09:02] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:11:58] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:12:01] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[01:12:15] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[01:13:04] *** Joins: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com)
[01:13:38] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[01:14:17] *** Quits: esther (~esther@2607:fb90:5fe8:11c3:74ed:56b7:c1a4:cdeb) (Ping timeout: 240 seconds)
[01:14:17] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[01:14:46] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:17:08] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[01:17:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:17:55] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[01:18:26] *** Quits: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net) (Remote host closed the connection)
[01:19:01] *** Quits: tsu (~tsu@2E8B8C62.catv.pool.telekom.hu) (Quit: Leaving)
[01:19:16] *** Quits: marcello42 (~mp@2001:1a81:1373:1000:b615:e09c:7d18:7b3f) (Ping timeout: 250 seconds)
[01:19:45] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[01:20:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:20:19] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[01:20:45] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[01:21:12] *** Joins: jcass (~cindy@50-0-146-31.dsl.dynamic.fusionbroadband.com)
[01:21:25] *** Quits: Barones (~Barones@189.50.80.77) (Quit: Leaving)
[01:22:00] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[01:22:51] *** Quits: delvian (~delvian@41.13.204.126) (Ping timeout: 256 seconds)
[01:22:52] <jcass> Yes.  I got a ton of stuff.  I need to take a look at it.
[01:23:23] *** Joins: delvian (~delvian@41.13.204.126)
[01:23:33] *** vegii_ is now known as vegii
[01:24:20] *** Quits: hightower3 (~hightower@212.15.178.16) (Read error: Connection reset by peer)
[01:24:28] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 250 seconds)
[01:24:29] *** Quits: delvian (~delvian@41.13.204.126) (Client Quit)
[01:24:31] *** Joins: henbruas_ (~henbruas@ti0003a400-4203.bb.online.no)
[01:24:33] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[01:24:43] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Ping timeout: 256 seconds)
[01:24:57] *** Quits: dreamon (~dreamon@p57a4c526.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:25:11] *** henbruas_ is now known as henbruas
[01:25:25] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:26:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[01:27:23] *** Quits: flea (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 256 seconds)
[01:27:33] *** Quits: Macuser (~Macuser@2600:1003:b465:566a:80cf:bd25:ca3b:1788) (Quit: Textual IRC Client: www.textualapp.com)
[01:28:29] *** Joins: delvian (~delvian@41.13.204.126)
[01:28:30] *** Quits: greedom (~greedom@p200300de670b64002b53aa8fa076fded.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:28:34] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[01:28:57] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[01:30:06] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[01:30:28] *** Quits: delvian (~delvian@41.13.204.126) (Client Quit)
[01:30:51] *** Quits: walterwhip (~www@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:31:50] *** Joins: walterwhip (~www@user/walterwhip)
[01:32:45] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[01:33:27] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[01:33:31] *** Quits: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Client Quit)
[01:34:03] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - https://znc.in)
[01:34:24] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:2095:3f70:5084:b6c4)
[01:34:46] <jcass> hi
[01:35:29] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:112a:c93:46:1951)
[01:35:38] <gry> hi
[01:35:41] *** Joins: gopar (~gopar@199.36.94.212)
[01:35:53] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[01:36:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:36:21] <johnkeats6> so I have a silly question of sorts, but.. why do we want duck typing? I'm not sure how the pros outweight the cons
[01:36:33] <Yhg1s> johnkeats6: who is 'we'?
[01:36:41] <johnkeats6> us python users
[01:36:54] <Yhg1s> johnkeats6: I don't think you can make a singular claim about them all.
[01:37:12] <johnkeats6> well what are some arguments in favor of duck typing is what I'm asking
[01:37:16] <Yhg1s> johnkeats6: generally it's considered easier to work with, faster to write, easier to debug. Which 'cons' do you think outweigh those pros?
[01:37:40] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[01:38:00] *** Joins: ld_ (~a0z1@185.200.118.186)
[01:38:07] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5)
[01:38:17] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 252 seconds)
[01:38:19] <johnkeats6> I'd say it's harder to debug, with strict typing the compiler/IDE can tell you about typing mistakes and point out where they occur
[01:38:31] <johnkeats6> faster to write I agree
[01:39:07] <Yhg1s> johnkeats6: that seems to be about _dynamic_ typing, which is different from _duck_ typing. And only some typos are harder to detect automatically with dynamic typing, and also plenty of typos are difficult to detect with static typing.
[01:39:20] <bjs> johnkeats6: duck typed things are still strictly typed, if you pass an object e.g. to a function that tries to use it like a file then if it doesn't have a read method the function will fail.  Maybe you mean static typing?
[01:39:21] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[01:39:36] <Yhg1s> johnkeats6: but there are type checkers for Python that can help you with that kind of thing.
[01:39:38] <bjs> although static typing isn't at odds with duck typing either,  you can define a Protcol to say "I accept any object that has a read() method"
[01:39:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[01:39:51] <johnkeats6> bjs, it'll fail, sure, but you'll only know that when you run
[01:40:20] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[01:40:24] <bjs> johnkeats6: is this really an argument about dynamic typing not duck typing?
[01:40:28] <Yhg1s> johnkeats6: the same is true for very many things in a statically typed language.
[01:40:35] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:40:56] <johnkeats6> Yhg1s, re: typing, yeah, i see more and more people using it, which sorta raised the question to me why do we have this in the first place
[01:41:13] <johnkeats6> i'm not necessarily against it i just couldn't come up with good arguments myself
[01:41:20] <bjs> Well the static type systems for Python still support duck typing,  they are not "one or the other"
[01:41:37] *** Joins: fikran (~fikran@user/fikran)
[01:41:42] <Yhg1s> johnkeats6: I think we've covered all the arguments for dynamic typing, really. It's just a matter of how badly you weigh them, and the cons you see.
[01:42:02] <jim> hi jcass and gry
[01:42:27] <johnkeats6> Yhg1s, say, do you use abstract classes as interfaces in python? i reckon a die hard duck typer would feel no need for interfaces, right?
[01:42:38] <Yhg1s> johnkeats6: there are plenty of people who disagree with these design choices in Python, and prefer other languages. That's fine. You won't find all that many of them on #python though :)
[01:42:49] <SnoopJ> johnkeats6, one of the main advantages is that you get rich reflection pretty much for free: the language itself is doing it, after all
[01:42:50] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[01:42:59] <Yhg1s> johnkeats6: I don't know any 'die hard' anythings.
[01:43:05] <bjs> Yhg1s: #python is fairly diverse,  there are lots of people here that are pro-static types but still like Python
[01:43:17] <Yhg1s> bjs: I'm quite aware. I said "all that many".
[01:43:26] <SnoopJ> I feel like people say "static type system" when they mean "static analysis" more often than not
[01:43:45] <Yhg1s> johnkeats6: you do have to decide if you're talking about duck typing or dynamic typing, though.
[01:44:13] <Yhg1s> johnkeats6: you can write code that isn't duck typed in Python, if you insist. It's just very cumbersome and incredibly inflexible, and it doesn't gain you anything.
[01:44:18] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:45:30] <NoImNotNineVolt> i find the way python does typing to create a whole class of bugs that i was used to having my compiler catch with other languages.
[01:45:49] <johnkeats6> bjs, I must be misunderstanding something then. how does that work? if i write def f(x : int) -> int how is it duck typed?
[01:45:51] *** Quits: Narrat (~omnius@p200300df5f129c2006ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:45:52] <NoImNotNineVolt> that being said, it's not the end of the world.
[01:46:32] <Yhg1s> NoImNotNineVolt: sure. On the other hand, the vast majority of them are caught by trivial tests, and there are more classes of bugs common to both approaches that are also only caught with tests, so you need 'em anyway.
[01:46:51] <NoImNotNineVolt> Yhg1s: trivial tests don't exist until they're written.
[01:46:52] <Yhg1s> johnkeats6: I'm not sure what you mean by "how is it duck typed".
[01:47:08] <NoImNotNineVolt> and you don't "need" them in the strict sense.
[01:47:08] <Yhg1s> NoImNotNineVolt: yes, Python makes it more important that you write them.
[01:47:13] <NoImNotNineVolt> indeed.
[01:47:16] <bjs> johnkeats6: I didn't mean that *everything* you write with static types is duck typed,  only that you can (and people do) using Protocols
[01:47:26] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[01:47:41] <johnkeats6> would protocols be like interfaces?
[01:47:45] <johnkeats6> i'm not familiar
[01:47:46] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:47:54] <Yhg1s> johnkeats6: Pretty much, yes.
[01:47:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5) (Ping timeout: 240 seconds)
[01:47:58] <bjs> johnkeats6: e.g. you can say `def f(x: list) -> None`  and then sure this only accepts a list, but you can also say `def f(x: MutableSequence[int]) -> None` and now this accepts anything that "quacks like a list"
[01:48:17] *** Joins: delvian (~delvian@41.13.204.126)
[01:48:51] <johnkeats6> I see. I guess it's a matter of terminology then, I didn't think that was still considered duck typing
[01:49:05] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[01:49:07] <Yhg1s> johnkeats6: duck typing is 'the real type doesn't really matter'.
[01:49:07] <johnkeats6> I mean in this case we can do duck typing in C# etc also
[01:49:19] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[01:50:05] <bjs> johnkeats6: structural subtyping is duck typing,  i.e. "This function works with anything that has the right shape, not just the types I say here"
[01:50:13] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[01:50:48] <bjs> johnkeats6: see https://www.python.org/dev/peps/pep-0544/ .  And yes, lots of languages have things that are basically "static duck typing"
[01:51:13] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[01:51:27] *** Quits: gopar (~gopar@199.36.94.212) (Remote host closed the connection)
[01:51:32] <johnkeats6> maybe I was talking about static typing then :p
[01:52:25] <bjs> johnkeats6: take that PEP for example, it defines a SupportsClose Protocol.  If I write a function like `def f(o: SupportsClose) -> None`  then this `f` accepts any type that has a "close" method, which means that people can write types that do things, and others can write functions that accept things and you don't have to explicitly make some kind of registry of all the types various things accept
[01:52:43] <johnkeats6> right, that I understand
[01:52:49] <bjs> that is duck typing
[01:53:13] <johnkeats6> a little less radical duck typing then def f(x): x.close() but I can accept it
[01:53:26] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[01:53:29] <bjs> johnkeats6: not sure why it's less radical?
[01:53:33] <bjs> isn't it the same?
[01:54:04] *** Quits: kts (~kts@103.73.237.175) (Quit: Konversation terminated!)
[01:54:10] <johnkeats6> in the former case your ide could check compliance, at least if you declare all the types everywhere i guess
[01:54:10] <SnoopJ> I think perhaps they are confusing annotations for something that has anything to do with the type system
[01:54:42] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:68c4:8bd5:ec8a:69c5) (Quit: Client closed)
[01:54:49] <johnkeats6> bjs, I mean if it's the same why even have protocols?
[01:54:53] <bjs> johnkeats6: okay sure, but that's not really about duck typing because the actual duck typing is the same in both cases.  Your un-annotated `f` and my annotated `f` both accept the same object
[01:54:56] <bjs> objects
[01:55:01] <SnoopJ> johnkeats6, there are some static analysis tools that can work without annotations, too, but yes the typical usage is "annotate everything, then run the tool"
[01:55:07] <bjs> johnkeats6: again you're talking about static v dynamic, not about duck typing
[01:55:20] <johnkeats6> ok so let's talk about that
[01:55:32] <bjs> johnkeats6: okay, then that's why Protocols exist, so you can do this statically :)
[01:55:34] <SnoopJ> the fact that they're annotations makes "gradual typing" possible, where you can do a little at a time
[01:55:51] <johnkeats6> bjs, so what's a convincing example of a situation where you wouldn't want to do it statically?
[01:56:16] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5)
[01:56:17] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[01:56:25] <SnoopJ> Any case where you don't want to lock the user into subclassing-as-API
[01:56:39] *** Joins: hyperknot (~hyperknot@dynamic-089-204-137-200.89.204.137.pool.telefonica.de)
[01:56:51] <bjs> johnkeats6: I mean there aren't really objective situations where it's obvious one way is better, that's why languages are a mixed bag of various levels of static v dynamic
[01:56:53] *** Joins: pyeve____ (~pyeveryth@64-18-153-56.starry-inc.net)
[01:57:01] *** Quits: pyeveryt_ (~pyeveryth@64-18-153-56.starry-inc.net) (Read error: Connection reset by peer)
[01:57:35] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[01:57:39] <bjs> It's why you have TypeScript and Python typing (gradual type systems) where you can statically type *some* parts and not others, especially in a language like Python where there's a lot of meta-programming hackery you can do that is sometimes hard to write in a nice simple static check
[01:58:14] <johnkeats6> SnoopJ, yeah one thing i thought is that it might help different modules not get coupled
[01:58:38] <johnkeats6> i mean, interfaces already do that to some extent, but you could want to go further i guess
[01:58:43] <johnkeats6> but isn't it a little dangerous?
[01:58:48] <SnoopJ> protocols are basically interfaces
[01:59:09] <SnoopJ> but you defer the actual static analysis to some third-party tool
[01:59:58] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Remote host closed the connection)
[02:00:16] <SnoopJ> as far as "dangerous," I don't really know what you mean
[02:00:19] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[02:00:48] *** Quits: e-snail (~pete@user/e-snail) (Quit: Gateway shutdown)
[02:00:53] *** Quits: jfcaron (~jfcaron@192.252.229.171) (Quit: jfcaron)
[02:01:04] *** Parts: rb100 (~jeff@d27-96-151-97.nap.wideopenwest.com) ()
[02:01:09] *** Quits: Esteri (Esteri@gateway/vpn/protonvpn/esteri) (Quit: Esteri Libera)
[02:01:22] *** Joins: e-snail (~pete@user/e-snail)
[02:01:31] <johnkeats6> as far as I understood the problem is that if we're using a static typed yadda yadda language and I write a module, then you need to understand and respect the types I defined to build something off of it
[02:01:42] <johnkeats6> or was it something else
[02:02:42] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[02:02:53] <SnoopJ> Assuming the language doesn't provide interfaces proper, yes
[02:03:17] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 240 seconds)
[02:03:41] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:04:09] <johnkeats6> well so how is it an argument against static but interface-allowing typed languages (in that situation)?
[02:04:43] <SnoopJ> I don't...think it is?
[02:04:53] <SnoopJ> Python's philosophy on this is not "other languages are doing it wrong"
[02:05:49] <bjs> johnkeats6: static type systems are great,  but require you to slow down as they are overapproximate (They err on the side of caution).  It isn't that one is better than the other, it's that there are trade-offs. Dynamic typing lets you program and prototype things faster and run things even if they're not quite right, but static typing makes you slow down and explicitly say what everything could be at all points of time possibly even not letting you write
[02:05:49] <bjs> exactly what you wan
[02:05:50] <bjs> want*
[02:06:03] *** ecdhe_ is now known as ecdhe
[02:06:35] <johnkeats6> bjs, yeah I can see that
[02:06:36] *** Quits: jjasghar (~quassel@idlerpg/player/jjasghar) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:06:40] <SnoopJ> static analysis living outside of the language's type system also means it can move at whatever rate makes sense
[02:06:56] <SnoopJ> and you can also do cute tricks where annotations have nothing to do with types at all
[02:07:01] <johnkeats6> I guess I gotta live a little longer to personally experience this frustration
[02:07:05] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Quit: Leaving)
[02:07:29] <bjs> johnkeats6: well, imagine trying to statically type a printf function, for example :P
[02:08:16] <sprout_> right.  the short answer is that static guarantees are great unless they get in the way
[02:08:41] *** Joins: jjasghar (~jjasghar@idlerpg/player/jjasghar)
[02:08:43] <bjs> johnkeats6: you can write the code dynamically quite easily, check the code, check the type, do the thing.  How would you write it statically?  Well you have to either appeal to a much fancier type system than any of the usual languages have, or you have to write your code in a way you didn't want to make the type system happy
[02:09:29] <bjs> (or special-case it, which is great for exactly printf but clearly I'm trying to make a general point here)
[02:09:56] <johnkeats6> special-casing would be method overloading i guess?
[02:10:31] *** Quits: delvian (~delvian@41.13.204.126) (Quit: Leaving)
[02:10:31] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:10:36] <bjs> johnkeats6: no I mean imagine you want to write a `def printf(...)` function (in what ever language you currently prefer), unless that language is Agda you are going to find it very hard to write a type signature for it
[02:10:43] <bjs> (by very hard I mean impossible)
[02:10:48] *** Joins: jfcaron (~jfcaron@192.252.229.171)
[02:10:55] <bjs> and so the type checker itself has to go `if name == "printf": do_something_special()` ;)
[02:11:03] <sprout_> there's lots of stuff which will be hard to express in Agda too
[02:11:25] <johnkeats6> write you could define several printfs for several types, as in method overloading. or you could have a 'printable' interface with a __repr__ method or something
[02:11:33] <bjs> johnkeats6: you can't
[02:11:33] <sprout_> mapping a list of functions of diverse types over a heterogenous list.  try it
[02:11:49] <leitz>  Having played with Go before, the static typing can make simple stuff easy to read and write. It's a good language, but when int8 and int16 are different, and you have to figure out what the other methods are spitting out so you can retype them, it's a bit of a pain.
[02:11:51] <bjs> johnkeats6: the type of the second (and third etc) arguments of printf do not depend on the *type* of the first argument, but its value.
[02:12:11] <leitz> Go is great for machine performance, Python is better for developer performance.
[02:12:14] <VaniaPy> in a csv file, that the first line of the file is the heading, how can i set the reader to acoid reading that line?
[02:12:18] <bjs> johnkeats6: and its value is just a string, you can't add fancy methods or anything
[02:12:22] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5) (Read error: Connection reset by peer)
[02:12:32] *** Joins: parv (~quass@user/parv)
[02:12:45] <leitz> VaniaPy, use "startswith" to skip the line.
[02:12:49] *** Quits: jjasghar (~jjasghar@idlerpg/player/jjasghar) (Quit: The Lounge - https://thelounge.chat)
[02:13:01] <johnkeats6> bjs, oh ok i was just thinking of printing, you mean string formatting basically then
[02:13:05] *** Joins: ld__ (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[02:13:25] <leitz> Or, if you know it always has one header line, just skip it with a counter.
[02:13:25] <bjs> johnkeats6: are you familiar with printf-like functions?  printf("%d", "hello") is a type error but printf("%s", "hello") is not
[02:13:46] <bjs> johnkeats6: yes like string formatting.
[02:13:52] *** Quits: upsala (~zcb@185.209.196.169) (Quit: WeeChat 3.4)
[02:14:14] <johnkeats6> it's been too long since i learned C to remember what the %d's and %s's are
[02:14:47] *** Joins: Alina-ma- (~Alina-mal@37.252.83.224)
[02:14:57] *** Joins: Guest85 (~Guest85@165.225.226.151)
[02:14:59] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[02:15:01] *** Quits: dthpulse (~quassel@podciarou.sk) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:15:10] <johnkeats6> i see, it specifies the type basically
[02:15:36] *** Quits: ld_ (~a0z1@185.200.118.186) (Ping timeout: 250 seconds)
[02:15:37] <bjs> johnkeats6: in the end it doesn't really matter, what matters is that to *properly* type check the function you would need to say that the type of the second argument depends on the *value* of the first, which is not something type systems let you do (usually).  So this is (just) one example where a dynamic system lets you write the code you actually wanted
[02:15:49] *** Joins: dthpulse (~quassel@podciarou.sk)
[02:15:55] <bjs> whereas an imposed static type system would be an artificial limitation
[02:16:04] <johnkeats6> yeah ok I can see that
[02:16:24] <johnkeats6> feels like a fringe situation but ok :p
[02:16:30] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:16:36] <bjs> johnkeats6: printf is fringe? :P
[02:16:56] <bjs> well I mean, there's clearly many many cases where you might want to write a function that given a particular value makes some assumption about the types of something else
[02:17:19] *** Joins: delvian (~delvian@41.13.204.126)
[02:17:38] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:17:53] *** Quits: Guest85 (~Guest85@165.225.226.151) (Client Quit)
[02:17:54] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[02:18:00] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[02:18:23] <johnkeats6> bjs, well you could have the object itself decide how it wants to be printed rather than passing that to the print function
[02:18:33] <johnkeats6> but ok it's just an example
[02:18:43] <bjs> johnkeats6: yes you have to re-write the code to make the type checker happy :)
[02:18:53] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:18:57] *** hexeme is now known as ldlework
[02:19:41] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[02:19:47] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[02:19:53] *** Quits: VaniaPy (~VaniaPy@46.12.95.180.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[02:20:55] <johnkeats6> bjs, yeah I see your point. but say do you static type in all cases where it wouldn't require rewriting to do so, or do you get lazy?
[02:21:44] *** Lando-HoloNet is now known as Lando-SpacePimp
[02:21:47] *** Joins: rickybob2 (~rickybob@ip68-101-78-226.ga.at.cox.net)
[02:21:49] <bjs> johnkeats6: well, you can if you want. sometimes it's just -hard- to write down the exact type (or series of overloaded types and Protocols) to describe precisely what the functions accept
[02:21:52] *** Quits: Alina-ma- (~Alina-mal@37.252.83.224) (Quit: !be back soon)
[02:22:27] <bjs> and sometimes your code is actually type incorrect but you don't care because the type system is being over-cautious
[02:23:08] <bjs> `x = d.get("keyThatDefinitelyExists"); print(x.upper())`  for example, a type-checker will definitely complain but it might be perfectly safe
[02:23:22] *** Joins: Reign (~Username@ip98-161-226-10.ph.ph.cox.net)
[02:23:24] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[02:23:36] <bjs> (obviously in this case, like the printf one there are immediate and obvious ways to re-write it to make the checker happy... but for big programs it can be less easy)
[02:24:21] <johnkeats6> true
[02:24:31] <bjs> You can add asserts/isinstance checks in Python for example to make the static type checkers happy, or a typing.cast,  or re-write the code to be more type-safe (redundantly)
[02:25:21] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[02:25:32] <bjs> So I'd say, static types impose a burden on the programmer but it comes with some equally hefty benefits.  The heavier the burden you accept, the bigger the benefits.
[02:25:37] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Ping timeout: 240 seconds)
[02:25:55] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[02:25:58] <phy1729> I find sometimes when the type system can't properly model the data, it can be an indication that things need to be reworked because they're hard to understand for humans too
[02:26:19] <johnkeats6> do you think Python will have a built-in type checker some day?
[02:26:25] <retrosenator> lets hope not
[02:26:38] <bjs> johnkeats6: hmm, one that always runs and refuses to run type-incorrect programs? no
[02:26:46] <retrosenator> would just slow things down
[02:26:48] <bjs> johnkeats6: might there be a built-in one, behind a flag? Maybe one day, not any day soon
[02:26:58] <retrosenator> but you can implement something
[02:27:01] <retrosenator> to check your own types
[02:27:17] <johnkeats6> yeah i meant as a flag
[02:27:30] <bjs> it's not inconceivable something like mypy will get put behind a flag some day
[02:27:37] <johnkeats6> it's a little funny to have built in type hints but no built in thing that actually cares about the hints
[02:27:38] <bjs> but right now, and for the foreseeable future, it'll be a separate program
[02:27:55] <bjs> johnkeats6: the history is equally funny, we've actually had the type hints for a long time before anyone used them
[02:27:58] *** Joins: snakey_hiss (~scott@101.100.131.161)
[02:28:24] <SnoopJ> and they're getting funnier as they go :)
[02:28:38] <bjs> the third-party type checkers came in, and then used the annotations for type checking and that spurned more features for type checking and so it's kind of developed backwards from the normal type-y things in languages
[02:28:55] <bjs> but there's nothing wrong with that
[02:29:26] <SnoopJ> and some cute side effects like how FastAPI does its data modeling magic
[02:29:46] *** Quits: DaNeenjah (~jake@adsl-74-230-4-35.hsv.bellsouth.net) (Quit: WeeChat 3.4)
[02:30:33] *** Quits: rickybob2 (~rickybob@ip68-101-78-226.ga.at.cox.net) (Quit: rickybob2)
[02:33:07] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[02:33:35] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-9c5a-2241-ba3e-6a50.res6.spectrum.com) (Read error: Connection reset by peer)
[02:34:34] *** Quits: cebor (~cebor@user/cebor) (Quit: bye!)
[02:35:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:35:15] *** Joins: cebor (~cebor@user/cebor)
[02:36:24] *** Joins: hightower2 (~hightower@95.168.116.1)
[02:37:41] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:2095:3f70:5084:b6c4) (Ping timeout: 268 seconds)
[02:38:02] <catbeard> SnoopJ: so it turned out to be / vs // (py3)
[02:38:04] <nedbat> johnkeats6: python has other things like that: ...  and @
[02:38:16] <nedbat> @ as a binary operator that is
[02:38:19] <catbeard> precision/rounding error since / now returns float
[02:38:25] <catbeard> vs py2
[02:38:41] <bjs> nedbat: still sad the email module hasn't used @
[02:39:08] <nedbat> johnkeats6: i think python's static type story is the same as Java or C++: first you run a tool that checks the types. then, separately you run the program.
[02:39:48] <nedbat> johnkeats6: the difference is that with Java/C++, you *have* to run the tool first (the compiler), and it won't let you move to step 2 if the checks fail.
[02:39:52] *** Joins: gopar (~gopar@199.36.94.212)
[02:39:52] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[02:39:52] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Ping timeout: 250 seconds)
[02:42:17] <nedbat> but those are both choices you can make yourself if you like strictness
[02:42:42] <johnkeats6> nedbat, not if you're building off of the code of someone who doesn't
[02:42:45] *** Quits: ld__ (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:42:56] <nedbat> true
[02:43:20] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:43:48] *** Joins: ice9 (~ice9@user/ice9)
[02:43:54] <johnkeats6> I guess what was/is bothering me a little is that Python feels like it hasn't made up its mind about it
[02:44:18] <nedbat> johnkeats6: it's definitely adding static typing into a world which didn't have it.
[02:44:30] <nedbat> johnkeats6: but it couldn't require it, and a flag wouldn't help your situation.
[02:44:52] *** Joins: jjasghar (~jjasghar@idlerpg/player/jjasghar)
[02:44:58] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::3)
[02:45:04] *** Joins: yangby (~secret@115.199.105.217)
[02:45:23] <johnkeats6> yeah it wouldn't
[02:45:56] *** Quits: snakey_hiss (~scott@101.100.131.161) (Ping timeout: 250 seconds)
[02:46:43] <matsaman> it's optional
[02:46:49] *** Joins: thorbw (~tw@46.230.130.50)
[02:47:12] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:47:52] <nedbat> matsaman: type declarations and checking, yes.
[02:48:09] *** Joins: jcalla (~jcalla@2600:1004:b204:59f9:1339:a740:97cb:4bd8)
[02:48:32] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 250 seconds)
[02:48:37] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[02:48:45] *** Joins: esther (~esther@2607:fb90:5fe0:75b5:9ddf:7df3:f5a1:7783)
[02:48:55] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[02:49:13] *** Joins: audiobirb (~audio@user/audio)
[02:49:30] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[02:49:50] *** Quits: jcalla (~jcalla@2600:1004:b204:59f9:1339:a740:97cb:4bd8) (Read error: Connection reset by peer)
[02:50:36] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[02:51:21] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[02:54:07] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:54:46] *** Quits: withered_dragon (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: WeeChat 3.3)
[02:54:55] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[02:55:09] <oscurochu> i want to get a list of nested files at every level so i can perform an operation on a directory and all the contents inside. im looking at glob.iglob and its just not doing what i want it to do
[02:55:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[02:56:30] <nedbat> oscurochu: you want os.walk
[02:56:35] <oscurochu> awesome
[02:57:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:57:38] <nedbat> oscurochu: or, pip install wcmatch, and then you can use "**/*.txt" or whatever
[02:57:54] *** Joins: obvs (~obvs@user/PeteH)
[02:58:07] <nedbat> oscurochu: oh, though glob already does that, so maybe we need to see your code?
[02:58:55] <oscurochu> wheres the sandbox for python
[02:59:21] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[02:59:22] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[02:59:49] *** Quits: kmh (~kmh@2a00:6020:5004:6800:a7fd:cfa9:a0b2:2b1a) (Quit: Leaving)
[03:00:11] <oscurochu> os.walk does exactly what i need.
[03:02:29] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[03:02:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:02:35] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Remote host closed the connection)
[03:03:07] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Quit: Leaving)
[03:03:15] *** Quits: gopar (~gopar@199.36.94.212) ()
[03:04:08] *** Quits: cosimone (~user@93-47-228-11.ip115.fastwebnet.it) (Ping timeout: 250 seconds)
[03:04:26] <oscurochu> this is what im trying to do https://pythonsandbox.com/code/pythonsandbox_u2976_ass1nCwdl5PkCnd43RSoqgJt_v0.py
[03:04:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::3) (Ping timeout: 240 seconds)
[03:04:56] <oscurochu> i need to be able to get the path for each file
[03:05:46] <oscurochu> im taking it the best way to do that is to create a variable i, and increment it manually
[03:07:14] <nedbat> oscurochu: i don't understand what you need to increment. your code renames files.
[03:07:23] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:07:45] <nedbat> oscurochu: keep in mind, a regex like "^(.*).c" will match "word.doc"
[03:08:16] <Pilate> zero reason to involve regex there
[03:08:33] <oscurochu> true
[03:08:49] *** Quits: pabar (~pabar@2.123.105.158) (Quit: pabar)
[03:09:43] <oscurochu> ok i figured out how to get the path, i stored it in root.
[03:10:12] *** Quits: rje (~textual@65.141.156.170) (Ping timeout: 250 seconds)
[03:11:42] *** Joins: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[03:12:20] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[03:12:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:12:34] *** Joins: snakey_hiss (~scott@101.100.131.161)
[03:13:51] *** Quits: codificat (~pep@126.red-79-158-54.dynamicip.rima-tde.net) (Quit: leaving)
[03:14:22] *** Joins: kmh (~kmh@2a00:6020:5004:6800:2584:d164:c7ec:fe17)
[03:15:13] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[03:16:27] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[03:16:48] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[03:16:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:17:19] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[03:18:37] *** Quits: esther (~esther@2607:fb90:5fe0:75b5:9ddf:7df3:f5a1:7783) (Ping timeout: 240 seconds)
[03:19:34] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[03:19:45] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[03:20:14] *** Quits: kmh (~kmh@2a00:6020:5004:6800:2584:d164:c7ec:fe17) (Remote host closed the connection)
[03:20:25] *** Joins: kmh (~kmh@2a00:6020:5004:6800:2584:d164:c7ec:fe17)
[03:20:43] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 256 seconds)
[03:20:44] *** Quits: yangby (~secret@115.199.105.217) (Quit: Go out for a walk and buy a drink.)
[03:24:19] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:25:37] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 240 seconds)
[03:27:16] *** hasuTMK is now known as hasu
[03:27:37] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:27:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[03:28:07] *** Quits: lyodaom (~user@host86-160-97-46.range86-160.btcentralplus.com) (Quit: WeeChat 3.3)
[03:28:08] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:28:55] <bleb> I'm reading a json file with json.load(f).  em-dashes in the json file are showing up as â€“ in the output
[03:28:57] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-85fe-8f80-ea5f-426b.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:29:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[03:29:44] <toma> bleb: UTF-8 ?
[03:30:05] <bleb> I tried specifying utf-8 when reading the file, via with open(fname, 'r', encoding='utf-8') as f: ... but that didn't help
[03:30:11] *** Joins: leElvyn (~leElvyn@user/leelvyn)
[03:31:05] <leElvyn> Hi, i see this line in the source of Cpython : https://github.com/python/cpython/blob/d4e64cd4b0ea431d4e371f9b0a25f6b75a069dc1/Objects/longobject.c#L70
[03:31:06] <leElvyn> That says `/* For int multiplication, use the O(N**2) school algorithm`
[03:31:06] <leElvyn> Does anyone has the specs of that school algorithm N
[03:31:08] <leElvyn> Hi, i see this line in the source of Cpython : https://github.com/python/cpython/blob/d4e64cd4b0ea431d4e371f9b0a25f6b75a069dc1/Objects/longobject.c#L70
[03:31:09] <leElvyn> That says `/* For int multiplication, use the O(N**2) school algorithm`
[03:31:09] <leElvyn> Does anyone has the specs of that school algorithm ?
[03:31:10] *** litharge sets mode: +q $a:leElvyn
[03:31:41] *** litharge sets mode: -q $a:leElvyn
[03:31:55] <toma> bleb: is the original json in utf-8 too?
[03:33:05] *** Quits: mungustas (~arnas@92.61.33.111) (Read error: Connection reset by peer)
[03:33:15] <bleb> less displays the emdash as a dash
[03:33:21] <bleb> not sure if that means its utf-8
[03:33:46] <matsaman> leElvyn: Toom-Cook?
[03:34:06] <matsaman> oh quadratic
[03:34:29] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[03:36:09] <matsaman> leElvyn: https://en.wikipedia.org/wiki/Multiplication_algorithm#Long_multiplication
[03:36:28] <leElvyn> Thanks !
[03:36:37] <bleb> fixed it, I needed <meta charset="utf-8"/> in the html header
[03:36:42] <bleb> toma: thanks for the help
[03:37:12] <matsaman> better to send the charset via the server
[03:37:28] <toma> bleb: happy to be your rubber duck. back to Think Python 2e, Chapter 8: Strings for me.
[03:37:40] *** Joins: Fiji (~Fiji@user/fiji)
[03:37:52] <SnoopJ> leElvyn, it's called Karatsuba multiplication, described in the same article matsaman linked: https://en.wikipedia.org/wiki/Multiplication_algorithm#Karatsuba_multiplication
[03:38:12] <leElvyn> Which one is the easiest to implement ?
[03:38:34] *** Joins: Fiji_ (~Fiji@user/fiji)
[03:38:39] <SnoopJ> oh, sorry, that comment is saying it uses Karatsuba *above* the cutoff
[03:38:41] *** Quits: Reign (~Username@ip98-161-226-10.ph.ph.cox.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:39:32] <matsaman> speed is what at's issue in this cpython source
[03:39:53] <matsaman> 'grade school' should be "simpler"
[03:40:23] <SnoopJ> agreed
[03:40:47] <matsaman> at's? =P
[03:40:50] <matsaman> what's at*
[03:41:15] *** Joins: jcalla (~jcalla@2600:1004:b204:59f9:1339:a740:97cb:4bd8)
[03:42:16] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 250 seconds)
[03:42:31] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c9b9-54aa-6233-6d58.res6.spectrum.com)
[03:45:18] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 250 seconds)
[03:45:40] *** Quits: leElvyn (~leElvyn@user/leelvyn) (Ping timeout: 256 seconds)
[03:45:59] *** Joins: nomad1 (~nomad@user/spacenomad)
[03:46:21] *** Quits: hasu (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp) (Quit: ZNC 1.8.2 - https://znc.in)
[03:47:52] *** Quits: magla (~gelignite@55d4b5f5.access.ecotel.net) (Quit: Stay safe!)
[03:48:14] *** Joins: runciter (~runciter@user/runciter)
[03:49:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:50:29] <johnkeats6> bjs, i don't mean to be annoying but one point. you want a function f(x, y) such that the type of y depends on the value of x. in python the only way to _enforce_ this would be to manually check within the function. but in a statically typed language where all types inherit from some basic 'object' type, you could just as well do that by typing y as object
[03:50:58] *** Joins: fikran (~fikran@user/fikran)
[03:51:21] *** Quits: phylaz (~phylaz@80.203.89.4) (Remote host closed the connection)
[03:51:43] <johnkeats6> i guess typing as object defeats the point of a static type system maybe
[03:52:17] <phy1729> You can do typing.override in python and probably some sort of macros/templating/traits in other languages
[03:53:09] <sprout_> the answer still is: static guarantees are great until they get in the way
[03:55:07] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:55:29] *** Joins: rockzx (~rockzx@45.232.34.248)
[03:56:34] *** Quits: nomad1 (~nomad@user/spacenomad) (Ping timeout: 250 seconds)
[03:56:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:56:59] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:58:21] *** Parts: rockzx (~rockzx@45.232.34.248) ()
[03:58:24] *** Joins: hasu (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp)
[03:58:28] *** Joins: rje (~textual@50.35.241.164)
[03:58:34] *** Joins: Wulf (~Wulf@user/wulf)
[03:58:51] *** Quits: inomoz (~inomoz@176.59.106.192) (Ping timeout: 256 seconds)
[03:59:18] *** Quits: toma (~RubbishPu@node-1w7jr9yhpl48agh3qbz6mh8rh.ipv6.telus.net) (Quit: Leaving)
[04:00:29] *** Quits: runciter (~runciter@user/runciter) (Quit: Leaving)
[04:00:52] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:01:18] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[04:01:23] <SnoopJ> or just isinstance()
[04:02:35] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[04:03:03] *** Joins: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[04:03:04] *** Quits: leshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[04:03:29] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739) (Remote host closed the connection)
[04:03:46] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739)
[04:06:02] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[04:06:17] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[04:06:32] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:08:00] *** Quits: omegatron (~some@p5484973e.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[04:08:19] *** Quits: grimvar (~grimvar@i5C75FEDD.versanet.de) (Ping timeout: 256 seconds)
[04:09:54] *** Joins: grimvar (~grimvar@i5C75FEEC.versanet.de)
[04:12:01] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:12:04] *** Joins: Macuser (~Macuser@2600:1003:b45f:c2f0:1586:c9f5:2f0f:70dd)
[04:12:10] *** Joins: nomic2 (~nomic@185.198.243.163)
[04:13:09] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[04:14:33] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[04:14:33] *** Quits: nomic (~nomic@185.192.69.217) (Ping timeout: 256 seconds)
[04:14:50] *** Joins: nomad1 (~nomad@user/spacenomad)
[04:14:50] *** Joins: georgios (~georgios@user/georgios)
[04:15:09] *** Quits: goldcrest (~goldcrest@212.252.82.226) (Remote host closed the connection)
[04:16:09] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[04:16:15] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:16:57] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[04:17:06] *** Joins: esther (~esther@2607:fb90:5fe0:75b5:c11b:d139:bd06:dd78)
[04:17:40] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[04:19:15] *** Quits: nomad1 (~nomad@user/spacenomad) (Ping timeout: 256 seconds)
[04:20:48] *** Joins: kingofcsu (~kingofcsu@114.249.133.203)
[04:21:47] *** nomic2 is now known as nomic
[04:21:49] *** Quits: ElPresidente (~Gordon@172-125-150-28.lightspeed.tukrga.sbcglobal.net) (Remote host closed the connection)
[04:21:50] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[04:23:38] *** Joins: jazzy (~jaziz@user/jaziz)
[04:24:18] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 250 seconds)
[04:25:26] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[04:29:23] *** Quits: hasu (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:20] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[04:33:56] *** Quits: mat001_ (~mat001@c-69-181-155-247.hsd1.ca.comcast.net) ()
[04:34:26] *** Joins: bluedust (~bluedust@103.161.144.94)
[04:36:43] *** Quits: achilleas (~ach@user/achilleas) (Quit: :wq)
[04:38:55] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[04:38:57] *** Joins: achilleas (~ach@user/achilleas)
[04:40:04] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[04:40:23] *** Quits: Strom (strom@fedora/strom) ()
[04:41:56] *** Joins: Strom (strom@fedora/strom)
[04:41:56] *** Quits: hightower2 (~hightower@95.168.116.1) (Read error: Connection reset by peer)
[04:42:45] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:43:37] *** Quits: audiobirb (~audio@user/audio) (Remote host closed the connection)
[04:43:55] *** Joins: audiobirb (~audio@user/audio)
[04:44:45] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[04:50:16] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:51:55] *** Quits: rama_ (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:52:37] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[04:52:48] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[04:53:57] *** Quits: esther (~esther@2607:fb90:5fe0:75b5:c11b:d139:bd06:dd78) (Ping timeout: 240 seconds)
[04:55:44] *** Joins: Guest36 (~Guest36@24.50.238.15)
[04:55:55] *** Quits: \mSg (mSg@user/msg/x-0285936) (Ping timeout: 256 seconds)
[04:56:04] *** Quits: Guest36 (~Guest36@24.50.238.15) (Client Quit)
[04:56:11] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[04:56:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:56:25] *** Joins: nomad1 (~nomad@user/spacenomad)
[04:56:26] *** Joins: ExpiredKebab (~sgreadly@2407:7000:a239:503:1dd5:fdb3:f5cf:b928)
[04:56:27] *** Quits: thorbw (~tw@46.230.130.50) (Read error: Connection reset by peer)
[04:57:18] *** Joins: thorbw (~tw@46.230.130.50)
[04:58:36] *** Joins: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c)
[04:58:40] *** Quits: jcalla (~jcalla@2600:1004:b204:59f9:1339:a740:97cb:4bd8) (Read error: Connection reset by peer)
[05:01:22] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Ping timeout: 268 seconds)
[05:02:09] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[05:02:27] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[05:02:46] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:03:27] *** Quits: humbertowoody (~humbertow@189.132.111.57) (Ping timeout: 256 seconds)
[05:04:04] *** Quits: FakeMage (~analog_fr@c-71-238-180-183.hsd1.ar.comcast.net) (Remote host closed the connection)
[05:05:01] *** Quits: pgib (~textual@173.38.117.86) (Ping timeout: 240 seconds)
[05:05:35] *** Quits: akk (~akk@174-28-122-47.albq.qwest.net) (Quit: +++)
[05:06:17] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Ping timeout: 256 seconds)
[05:06:20] *** Quits: nomad1 (~nomad@user/spacenomad) (Ping timeout: 250 seconds)
[05:07:03] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[05:07:19] *** Joins: humbertowoody (~humbertow@189.132.111.57)
[05:09:30] *** Joins: fluiD (~fluiD@161.97.231.145)
[05:13:21] *** Joins: deadmund (~quassel@c-174-54-31-116.hsd1.pa.comcast.net)
[05:13:57] *** Quits: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c) (Ping timeout: 240 seconds)
[05:15:29] *** Joins: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c)
[05:15:54] *** Joins: frost (~frost@user/frost)
[05:15:54] *** Quits: ahammer (~ahammer@2409:8954:8cc:52c1:3534:681d:f1d0:740c) (Read error: Connection reset by peer)
[05:16:13] <nedbat> johnkeats6: i'm not a typing wiz, but you can use type names(?) to declare things like f(x: T, y: List[T])
[05:16:24] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[05:16:31] <deadmund> I installed a module using pip3 (pip3 install assignment-autograder).  When I try to run it (python3 -m autograder guide /file/path) it does not work.  Searching online it seems to be because on my system (Ubuntu 18.04) my python3  is 3.6.9.  So, I installed python3.8 (sudo apt install python3.8).  But when I try to run python3.8 -m autograder guide /file/path/ is says "/usr/bin/python3.8: No module named autograder"   What am I
[05:16:31] <deadmund> doing wrong?
[05:17:04] <deadmund> More colloquially; what the hell?!
[05:17:56] <parv> deadmund, Did you install with pip for 3.9 or 3.6.x?
[05:18:04] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:18:26] <grym> deadmund: try `sudo apt install python3.8-venv`  then `python3.8 -m venv gradervenv; gradervenv/bin/python -m pip install assignment-autograder; gradervenv/bin/python -m autograder guide /file/path`
[05:18:36] <SnoopJ> pip3 will point at 3.6.9 on 18.04 with both of those packages installed, IIRC
[05:18:36] *** Quits: ahammer (~ahammer@157.122.68.227) (Client Quit)
[05:18:42] <parv> Sorry, make that "pip for 3.8".
[05:18:49] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:19:43] <deadmund> parv: I have no idea.  I did (pip3 install assignment-autograder) so I'm assuming it was python3 3.6  especially since that was before I installed python3.8
[05:19:53] <SnoopJ> you can check with `pip3 -V`
[05:20:19] <deadmund> pip3 --version ---> pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6)
[05:20:21] <deadmund> so yeah
[05:20:22] <deadmund> 3.6
[05:20:26] <SnoopJ> but I'm pretty sure it's always gonna point to 3.6 on that version because I think I *had* this problem once and was annoyed to find that there wasn't a forward-gazing pip package to go with the 3.8 package
[05:20:28] *** Quits: delvian (~delvian@41.13.204.126) (Quit: Leaving)
[05:20:50] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:20:57] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[05:21:12] <SnoopJ> deadmund, I usually invoke pip as `python3 -m pip` (or python3.n) because of this exact headache
[05:21:43] <SnoopJ> but I also just try to forget the system Python exists on Debian/Ubuntu, and install my own
[05:21:45] <ahammer> everything went stupid when it comes to multi versions
[05:21:53] <deadmund> There appears to be only 1 ubuntu package.  python3-pip
[05:21:54] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[05:22:34] <SnoopJ> IIRC `python3.8 -m pip` might work and use the same pip (ew)
[05:22:50] <deadmund> SnoopJ: promising!  python3.8 -m pip --version
[05:22:50] <deadmund> pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.8)
[05:22:52] <SnoopJ> but the pip3 entrypoint will always be for 3.6 as I recall
[05:23:37] <SnoopJ> yea, weirdly enough it shares the pip installation between versions
[05:23:59] *** Joins: smrtz (~smrtz@user/smrtz)
[05:24:44] <parv> Or at least use the shell auto completion to choose "pip with version number" ("pip-3.8" or "pip3.8") command if that is installed
[05:24:55] <deadmund>  python3.8 -m pip install assignment-autograder   ---->   fails with "ModuleNotFoundError: No module named 'setuptools'"
[05:25:54] <SnoopJ> parv, I don't think it does pipX.Y which is unfortunate
[05:25:55] <parv> ... a missing dependency, not mentioned in its requirement?
[05:26:07] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[05:26:07] *** Quits: kingofcsu (~kingofcsu@114.249.133.203) (Quit: kingofcsu)
[05:26:27] <SnoopJ> deadmund, like I said, I usually just forget that the system Python exists. Debian does a lot of wacky stuff, and Ubuntu follows in their footsteps
[05:26:32] <deadmund> I will try using venv
[05:26:39] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[05:28:32] <SnoopJ> you should be able to install setuptools with pip for that interpreter, but my memory is hazy here
[05:29:30] *** Joins: frmlof (~frmlof@70.243.238.191)
[05:29:31] <parv> SnoopJ, I see pip{,-}3.6 in /usr/bin on CentOS 7|Rocky Linux 8. I do not have any other python verison with "pip" that is installed system wide
[05:30:21] <SnoopJ> parv, hmm, maybe the python3.8 package was smart enough to create the other one in the presence of python3-pip, or something.
[05:30:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:25] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:30:25] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994cfb11256a527c2b165.dip0.t-ipconnect.de)
[05:30:37] <deadmund> I made a venv but it still isn't working???
[05:30:37] <deadmund> python3.8 -m venv .autograder_venv
[05:30:37] <deadmund> source .autograder_venv//bin/activate
[05:30:37] <deadmund> pip 9.0.1 from /home/ed/tmp/.autograder_venv/lib/python3.8/site-packages (python 3.8)
[05:30:37] <deadmund> pip install assignment-autograder     fails with TypeError: get_cmdclass() takes 0 positional arguments but 1 was given
[05:30:50] <SnoopJ> parv, frankly, I hate reasoning about the potential that `python3` and `pip` might point somewhere else that I swore `pip` off entirely
[05:31:01] <deadmund> Maybe this "assignment-autograder" is simply broken / buggy?
[05:31:03] <SnoopJ> reasoning about that so much*
[05:31:39] *** Quits: ubert (~Thunderbi@p200300ecdf099487827ed8c05b109aa8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:31:39] *** ubert1 is now known as ubert
[05:31:53] <SnoopJ> deadmund, it installs fine for me on 3.8.10, I think you're just experiencing some of the wackiness I'm remembering
[05:32:17] *** Joins: tg (~tg@rockylinux/infra/tg)
[05:32:24] <deadmund> SnoopJ: venv isn't helping, and invoking pip using python3.8 package isn't helping.  Any other suggestions?
[05:32:32] <deadmund> Upgrade my whole OS to Ubuntu 20.04 ??
[05:32:33] <deadmund> lol
[05:32:52] <SnoopJ> that's literally what I did because intermingled versions work so poorly in that version
[05:33:29] <SnoopJ> but you could just install your own, not-run-through-the-opinion-gauntlet interpreter and use that. pyenv makes this a breeze, too
[05:33:48] <deadmund> pyenv is different from venv
[05:33:52] <SnoopJ> correct
[05:33:55] <deadmund> ?
[05:34:05] <SnoopJ> pyenv is a poorly-named tool that can install Python for you
[05:34:25] <SnoopJ> but CPython is easy to build from source, too
[05:34:34] <grym> deadmund: what the OS doesn't know, it can't screw up :)
[05:35:15] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:35:22] <SnoopJ> I wouldn't go as far as to say they've "screwed up" their Python, but boy is it not the Python you want when you are thinking about multiple versions simultaneously
[05:35:22] <parv> 😄
[05:35:41] <SnoopJ> verdict is still out on exactly how hostile Debian is going to be about pip going forward
[05:36:00] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[05:36:34] *** Joins: arjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net)
[05:37:08] *** Joins: summersault (~summersau@179.221.251.36)
[05:37:40] <deadmund> I don't know how to "install" python without the OS knowing about it.  What does it mean to install python on Ubuntu without invoking apt or dpkg or something?
[05:37:57] <grym> you build it from source
[05:38:03] <grym> usually in $HOME somewhere
[05:38:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:38:15] <grym> (which is what pyenv automates)
[05:38:20] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[05:38:25] <deadmund> oh, that's a lot of work
[05:38:26] *** arjun is now known as ccldarjun
[05:38:29] <grym> not really
[05:38:31] <deadmund> upgrading the OS might be easier haha
[05:38:32] <grym> takes about 5 minutes
[05:38:41] <deadmund> sudo apt full-upgrade
[05:38:41] <SnoopJ> deadmund, for CPython, it's as simple as `./configure --prefix=SOMETHING && make && make install`
[05:38:44] <grym> vastly less work than blood offerings and a dist-upgrade
[05:38:50] <SnoopJ> --prefix=~/.local often
[05:39:15] <deadmund> I haven't given any blood sacrafice yet.  It is not a full moon so that would be sub-optimal
[05:39:26] <SnoopJ> if you wanna do this for multiple versions and switch between them relatively often, pyenv is a helpful pile of shell script for that
[05:39:32] <grym> so the other nice thing about building your own
[05:39:46] <grym> is that if you totally hose it, you just delete the directory and it never happened
[05:40:09] <parv> Via FreeBSD Ports, I only have "ensurepip", pip bootstrappper, for python 3.{8,10}
[05:40:38] *** Quits: N3X15 (~nexis@mail.nexisonline.net) (Quit: ZNC - http://znc.in)
[05:40:41] *** Joins: califax- (~califax@user/califx)
[05:42:05] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[05:42:24] <parv> It is possible pip{,-}3.6 might have been also bootstrapped into existence when I might have tried to use pip for the first time🤷‍♂️
[05:42:33] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:42:52] <SnoopJ> the way I figure, the system Python is there for the system, not for me to muck about, and Debian does enough wacky things that I don't mind the insulation from it
[05:43:22] *** Joins: N3X15 (~nexis@mail.nexisonline.net)
[05:43:22] *** Joins: brabrax (~brabrax@user/brabrax)
[05:43:28] *** Joins: esv (~esv@74.124.178.154)
[05:43:54] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:43:55] *** califax- is now known as califax
[05:44:01] <SnoopJ> but maybe I could be swayed back. introduction of a python3-full or similar package would be nice, IIRC there was some intent to do that
[05:44:20] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:44:29] <parv> Indeed (situation, superficially, looks to be similar for Ruby:FreeBSD)
[05:44:41] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[05:44:54] *** Quits: deadmund (~quassel@c-174-54-31-116.hsd1.pa.comcast.net) (Ping timeout: 250 seconds)
[05:45:57] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[05:45:57] *** Joins: deadmund (~quassel@155.68.222.214)
[05:46:17] *** Quits: Macuser (~Macuser@2600:1003:b45f:c2f0:1586:c9f5:2f0f:70dd) (Ping timeout: 240 seconds)
[05:47:04] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[05:47:26] <deadmund> I am back.  My first born son is dead on a marble slab.  assignment-autograder still does not install.  I am praying to various gods from the prominent religions (not sure which is the one true God, so trying to cover all the bases).  I am need to sharpen my ceremonial knife.  Open to knife sharpening suggestions.  Thank you in advance.
[05:47:29] *** Joins: Macuser (~Macuser@2600:1003:b447:33b1:78b2:669b:15be:ba42)
[05:48:31] <matsaman> ...
[05:49:00] *** Joins: tWqaq (~tWqaq@240e:389:5d1c:ff00:af79:40b7:d76c:be82)
[05:49:26] <matsaman> what's the error with assignment-autograder?
[05:49:38] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[05:49:45] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Ping timeout: 256 seconds)
[05:50:06] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:50:07] <eN_Joy> i have int list [1, 12, 123, 1234], what is the most elegant way to convert them into military hour:time format [00:01, 00:12, 01:23, 12:34], right now I am padding each element with str(x).zfill(4) to make them a four-digit string, make the list [0001, 0012, 0123, 1234], thinking of going from there to subsequent conversion...
[05:50:46] <eN_Joy> i wonder if there exist a simpler approach...
[05:51:25] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:52:02] <exarkun> map(minutes_to_military_time_string, xs)
[05:53:01] <parv> eN_Joy, I would create a map for length-strptime format; based on length, convert element to datetime.time; convert that to string
[05:53:08] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[05:53:14] *** Quits: deadmund (~quassel@155.68.222.214) (Remote host closed the connection)
[05:55:44] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 250 seconds)
[05:56:19] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:56:23] <eN_Joy> so both exarkun and parv need to convert to string first?
[05:57:09] <exarkun> minutes_to_military_time_string is roughly `compose("{:02}:{:02}".format, flip(divmod)(60))` but format wants positional args, not a tuple
[05:57:10] <parv> eN_Joy, My method will first convert to datetime.time object not string.
[05:57:26] *** Joins: ahammer (~ahammer@157.122.68.227)
[05:57:37] <exarkun> ["{:02}:{:02}".format(*divmod(x, 60)) for x in xs], if you like
[05:57:43] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[05:58:16] <exarkun> sorry, 100, not 60, given your data, I guess
[05:58:25] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:58:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[05:58:44] <eN_Joy> thanks exarkun and parv , trying now
[05:59:15] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[05:59:31] *** Quits: fstd_ (~fstd@xdsl-87-78-21-185.nc.de) (Read error: Connection reset by peer)
[05:59:33] *** Quits: martti (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[05:59:38] *** Joins: fstd (~fstd@xdsl-87-78-21-185.nc.de)
[05:59:40] *** Quits: Retr0id (~Retr0id@user/retr0id) (Read error: Connection reset by peer)
[05:59:59] *** Joins: Retr0id7 (~Retr0id@user/retr0id)
[06:00:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:00:19] *** Joins: fikran (~fikran@user/fikran)
[06:01:07] <parv> eN_Joy, *Actually* to find the length, to create the map, integer would indeed need to be converted to string. Sorry.
[06:01:49] <eN_Joy> parv: come on...;-)
[06:02:50] *** Joins: Akuw (~kenny@2800:150:118:156e:87e4:fcfd:d7e5:1372)
[06:03:04] <Akuw> ^    this operator is used for?
[06:03:15] <exarkun> Akuw: Have you checked the Python docs?
[06:03:28] <eN_Joy> exarkun: code works like a charm, much more pythonic than my original approach
[06:04:14] <ahammer> Python operators are too complex to be fully defined in irc. check the doc when possible.
[06:04:21] <exarkun> eN_Joy: It was as Haskell-ish as I could make it, sorry. :)
[06:04:41] <exarkun> Akuw: They could probably have a better index.  Here's a start - https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations
[06:05:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:05:22] *** Joins: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net)
[06:05:22] *** Quits: hams (~hams@c-73-255-22-88.hsd1.tx.comcast.net) (Changing host)
[06:05:22] *** Joins: hams (~hams@user/hams)
[06:06:22] *** Joins: juliaEnv (~juliaEnv@ip-86-49-248-177.net.upcbroadband.cz)
[06:06:45] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:08:20] *** Joins: tomasfarias3 (~tomasfari@user/tomasfarias)
[06:08:27] <nedbat> Akuw: contrary to what ahammer says, we can describe that operator: it's a bitwise xor
[06:08:37] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[06:08:50] *** Quits: smrtz (~smrtz@user/smrtz) (Quit: Client closed)
[06:08:53] *** Joins: karlnashville (~karl@2601:482:4280:4cf0:384b:248:fd56:359b)
[06:09:06] *** Quits: obvs (~obvs@user/PeteH) (Remote host closed the connection)
[06:09:49] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:112a:c93:46:1951) (Ping timeout: 268 seconds)
[06:10:07] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[06:10:19] *** Quits: tomasfarias (~tomasfari@user/tomasfarias) (Ping timeout: 256 seconds)
[06:10:19] *** Quits: vfeenstr (vfeenstr@nat-pool-brq-t.redhat.com) (Ping timeout: 256 seconds)
[06:10:19] *** tomasfarias3 is now known as tomasfarias
[06:10:19] <Akuw> nedbat: thanks
[06:10:43] *** Joins: ahammer (~ahammer@157.122.68.227)
[06:10:53] *** Quits: dthpulse (~quassel@podciarou.sk) (Ping timeout: 256 seconds)
[06:10:53] *** Quits: blurry (xbaranov@lounge.fi.muni.cz) (Ping timeout: 256 seconds)
[06:11:37] *** Joins: blurry (xbaranov@lounge.fi.muni.cz)
[06:11:57] *** Joins: dthpulse (~quassel@podciarou.sk)
[06:12:05] *** Joins: vfeenstr (vfeenstr@redhat/evilissimo)
[06:12:50] *** Joins: pycurious (~Adium@user/pycurious)
[06:13:01] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[06:13:12] <pycurious> Any ideas why this pip install is failing -> https://dpaste.org/FtaA (it was working yesterday)
[06:13:26] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[06:14:57] *** Quits: ExpiredKebab (~sgreadly@2407:7000:a239:503:1dd5:fdb3:f5cf:b928) (Quit: Textual IRC Client: www.textualapp.com)
[06:15:38] *** Joins: summersault (~summersau@179.221.251.36)
[06:16:35] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[06:16:38] *** Joins: devish (~devish@54-240-196-187.amazon.com)
[06:17:16] <parv> pycurious, You might have core, if enabled, file somewhere, which could provide a clue
[06:17:17] *** Quits: Macuser (~Macuser@2600:1003:b447:33b1:78b2:669b:15be:ba42) (Ping timeout: 240 seconds)
[06:17:37] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[06:17:42] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: back later)
[06:17:47] <devish> what is the best way to read `value1` in a tuple `(b' value1\n', b'value2.\r\n')`
[06:19:08] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 250 seconds)
[06:19:15] *** Joins: smoke (~smoke@user/smoke)
[06:19:27] <grym> devish: thattuple[0].decode().strip()
[06:19:34] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[06:19:40] *** Joins: frost (~frost@user/frost)
[06:19:44] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[06:20:37] <pycurious> parv: you mean gdb the corefile?
[06:20:44] <parv> pycurious, Yes
[06:22:01] *** Parts: exarkun (~exarkun@user/exarkun) (WeeChat 3.3)
[06:22:17] *** Joins: Macuser (~Macuser@2600:1003:b451:5581:916b:66a1:5b75:14dc)
[06:22:22] <dba> I have this date strin 2017-07-04T10:00:15-07:00  not sure if this is the correct formating "%Y-%m-%dT%H:%M:%S-%f:" and I still missing the last 00
[06:23:28] <dba> what would be the last 2 digit? is the rest of my formating correct?
[06:23:29] <parv> dba: Last 6 characters is for UTC offset
[06:23:53] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[06:23:58] <parv> s/is/are/
[06:24:20] *** Quits: Akuw (~kenny@2800:150:118:156e:87e4:fcfd:d7e5:1372) (Ping timeout: 250 seconds)
[06:24:26] <RoyK> parv: what is that?
[06:24:50] *** Joins: bencd (~bencd@142.59.168.97)
[06:25:05] <parv> RoyK, How far behind or further ahead a time zone is with respect to UTC
[06:25:16] <RoyK> oh - right
[06:25:25] <devish> grym Thanks `decode()` was a new thing
[06:25:39] <RoyK> I misread - I thought you wrote UTF
[06:26:11] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 256 seconds)
[06:26:21] <RoyK> As the dyslexic said: I sold my soul to Santa!
[06:26:35] *** Quits: tkazi (~tkazi@user/tkazi) (Ping timeout: 256 seconds)
[06:26:36] <RoyK> As the dyslexic *satanist* said: I sold my soul to Santa!
[06:26:37] <dba> Thanks parv
[06:26:37] *** Quits: bencd_ (~bencd@142.59.168.97) (Read error: Connection reset by peer)
[06:27:17] *** Quits: Macuser (~Macuser@2600:1003:b451:5581:916b:66a1:5b75:14dc) (Ping timeout: 240 seconds)
[06:27:20] <parv> RoyK, All good
[06:27:23] *** Joins: tkazi (~tkazi@user/tkazi)
[06:27:50] <grym> devish: decode takes bytes and makes strings; encode takes strings and makes bytes
[06:28:28] <devish> got it
[06:32:25] *** Quits: lntl (~joey@24.136.23.254) (Ping timeout: 256 seconds)
[06:33:37] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[06:36:46] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[06:36:57] *** Quits: humbertowoody (~humbertow@189.132.111.57) (Ping timeout: 256 seconds)
[06:40:54] *** Joins: humbertowoody (~humbertow@189.132.111.57)
[06:40:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:40:57] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:40:57] *** finn_elija is now known as FinnElija
[06:41:14] <parv> RoyK, Would "... UTC time zone offset" have been clearer?
[06:44:13] *** Joins: thorbw_ (~tw@46.230.130.50)
[06:44:46] <parv> Off topic, could someone tell me please if my question ^ is grammatically correct? I am unusre about placement of "have".
[06:45:04] *** Joins: michagogo (uid14316@user/michagogo)
[06:45:07] *** Quits: thorbw (~tw@46.230.130.50) (Read error: Connection reset by peer)
[06:45:07] *** Quits: jiffe1 (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[06:45:57] <grym> parv: looks fine to me
[06:46:13] <eN_Joy> exarkun: one question: `["{:02}:{:02}".format(*divmod(t, 100)) for t in x]`, what does the `*` do before `divmod`?
[06:46:14] <parv> grym, Thanks much
[06:47:33] <Repiphany> eN_Joy: argument expansion
[06:47:33] *** Quits: sreve (~quassel@p549d7096.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:47:48] <parv> eN_Joy, '*' makes each element available like a bare variable outside of a list
[06:47:55] *** Joins: sreve (~quassel@p549d739c.dip0.t-ipconnect.de)
[06:47:56] <Repiphany> format(*[1, 2]) is the same thing as format(1, 2)
[06:49:15] *** Quits: devish (~devish@54-240-196-187.amazon.com) (Ping timeout: 256 seconds)
[06:50:15] <eN_Joy> let's say `divmod(23, 100)` returns `(0, 23)`, `format(*[0, 23])` becomes?
[06:50:57] *** Quits: voidcat (~voidcat@user/voidcat) (Ping timeout: 256 seconds)
[06:51:10] *** Joins: jiffe1 (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[06:51:13] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[06:51:54] *** Joins: summersault (~summersau@179.221.251.36)
[06:51:54] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[06:52:20] *** Joins: Atque (~Atque@user/atque)
[06:52:42] <parv> def fx( one, other ): print( f'{one} {other} ) ; fx( *[ 0, 23 ] )
[06:52:49] *** hendry1 is now known as hendry
[06:53:11] <parv> def fx( one, other ): print( f'{one} {other}' ) ; fx( *[ 0, 23 ] )  # Fix syntax error
[06:53:39] <eN_Joy> parv: ah! gotcha! thanks!
[06:53:52] *** Joins: johnjaye (~pi@154.6.152.74)
[06:53:56] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:54:31] *** Quits: Mortician (~Mortician@cpe-75-83-83-8.socal.res.rr.com) (Ping timeout: 256 seconds)
[06:54:44] *** Joins: voidcat (~voidcat@user/voidcat)
[06:56:19] *** Quits: pyeve____ (~pyeveryth@64-18-153-56.starry-inc.net) (Quit: Leaving...)
[06:56:23] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[06:56:47] *** Quits: summersault (~summersau@179.221.251.36) (Ping timeout: 256 seconds)
[06:59:56] <parv> eN_Joy, ** splats a dict
[07:00:15] *** Quits: thorbw_ (~tw@46.230.130.50) (Read error: Connection reset by peer)
[07:00:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:01:31] *** Joins: thorbw_ (~tw@46.230.130.50)
[07:05:51] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[07:06:35] *** karlnashville is now known as karl_AFK
[07:06:36] *** Quits: fluiD (~fluiD@161.97.231.145) (Quit: Leaving)
[07:07:37] *** Quits: thorbw_ (~tw@46.230.130.50) (Ping timeout: 240 seconds)
[07:09:15] <retrosenator> so i install this module thinking it will be great using pip
[07:09:17] <retrosenator> then I import it
[07:09:25] *** Quits: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 240 seconds)
[07:09:29] <retrosenator> and all of a suddent it starts compiling c source files
[07:09:45] <retrosenator> what kind of package does that after import??
[07:10:28] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[07:10:37] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[07:10:43] <SnoopJ> CFFI does that, but that's probably not the kind of package you mean
[07:10:47] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[07:11:37] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[07:12:43] <retrosenator> wmm2020
[07:13:21] <retrosenator> what a shady way to distribute a package with lazy compilation
[07:15:10] <SnoopJ> reminds me of a Python package Fermilab distributed (distributes?)
[07:15:40] <retrosenator> i booted a linux distro once that compiled the kernel on boot
[07:16:34] *** Quits: nomic (~nomic@185.198.243.163) (Quit: Leaving)
[07:16:36] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Read error: Connection reset by peer)
[07:19:07] *** Joins: adeliktas5 (~adeliktas@i59F5F0DE.versanet.de)
[07:19:34] *** karl_AFK is now known as karlnashville
[07:20:35] *** Quits: adeliktas (~adeliktas@i59F52CD4.versanet.de) (Ping timeout: 256 seconds)
[07:20:35] *** adeliktas5 is now known as adeliktas
[07:24:14] *** Joins: kaiseisei (~Thunderbi@171.116.100.151)
[07:25:17] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:26:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:28:22] *** Joins: xizhendu_ (~xizhendu@115.171.233.172)
[07:29:57] *** Quits: hyperknot (~hyperknot@dynamic-089-204-137-200.89.204.137.pool.telefonica.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:30:37] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:22a3:ecb5:b567:7739) (Ping timeout: 240 seconds)
[07:31:46] *** Quits: kurfen (~kurfen@176.119.195.10) (Ping timeout: 260 seconds)
[07:31:55] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[07:32:33] *** Quits: moog (~moog@107.126.53.167) (Remote host closed the connection)
[07:35:33] *** Parts: karlnashville (~karl@2601:482:4280:4cf0:384b:248:fd56:359b) (Konversation terminated!)
[07:35:43] *** Joins: karlnashville (~karl@2601:482:4280:4cf0:384b:248:fd56:359b)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:04] *** Joins: djapo (~archangel@user/djapo)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:34] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 250 seconds)
[07:39:44] *** Joins: frost (~frost@user/frost)
[07:40:42] *** Joins: fannagoganna (uid110488@id-110488.tinside.irccloud.com)
[07:42:52] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (Quit: Connection closed)
[07:46:40] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:47:17] *** Quits: sreve (~quassel@p549d739c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:47:36] *** Joins: sreve (~quassel@p4ff44df5.dip0.t-ipconnect.de)
[07:48:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[07:48:37] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:49:00] *** Quits: rvalue (~rvalue@user/rvalue) (Quit: ZNC - https://znc.in)
[07:49:02] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[07:49:20] *** Quits: fluter (~fluter@user/fluter) (Read error: Connection reset by peer)
[07:50:51] *** Quits: yuesbeez (uid458354@id-458354.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:51:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:51:26] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:51:27] *** Joins: fluter (~fluter@user/fluter)
[07:52:32] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[07:52:32] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[07:52:32] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[07:53:49] *** Joins: rvalue (~rvalue@user/rvalue)
[07:55:38] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:56:49] *** Joins: pycurious (~Adium@user/pycurious)
[07:58:42] *** karlnashville is now known as karl_AFK
[07:59:40] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Ping timeout: 250 seconds)
[08:01:23] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 256 seconds)
[08:03:06] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[08:04:00] *** Quits: humbertowoody (~humbertow@189.132.111.57) (Ping timeout: 250 seconds)
[08:08:12] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:08:22] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[08:08:55] *** Joins: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net)
[08:09:27] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.241) (Remote host closed the connection)
[08:09:41] <HiccupJul> if I'm using pathlib, what's the correct way to rename a directory while avoiding overwriting an existing one?
[08:11:26] *** Quits: roguelazer (~jbrown@sietchtabr.roguelazer.net) (Ping timeout: 260 seconds)
[08:11:37] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (Ping timeout: 245 seconds)
[08:11:40] *** Quits: ryan-c (ryan-c@znc.rya.nc) (Remote host closed the connection)
[08:11:56] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[08:11:56] *** Joins: ryan-c (ryan-c@znc.rya.nc)
[08:12:00] *** Quits: ttkpy (501@46-97-229-216.sr2.pon.net) (Ping timeout: 250 seconds)
[08:13:17] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[08:14:31] <mefistofeles> HiccupJul: if the dir is not empty it should return an OSError, iirc
[08:14:42] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[08:15:01] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[08:15:46] <mefistofeles> HiccupJul: but if it's a file it will be silently replaced
[08:16:01] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[08:16:17] *** Quits: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net) (Ping timeout: 240 seconds)
[08:16:24] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[08:16:27] *** Quits: rajkohaxor (~rajkosto@178.220.243.118) (Quit: Leaving)
[08:16:37] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[08:17:44] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Quit: ZZZzzz…)
[08:18:00] * SnoopJ would probably just test if the destination exists first
[08:18:13] <SnoopJ> unless there was potential for a race
[08:18:42] <mefistofeles> SnoopJ: yeah, I think that should be better
[08:18:44] <avu> there is always the potential for a race with the FS if you check, then act assuming the result of the check is still the same
[08:19:11] <mefistofeles> avu: true, but you can block the current interpreter, at least
[08:19:14] <mefistofeles> I guess
[08:19:25] <SnoopJ> I mean a race in the specific context of the application
[08:19:40] <mefistofeles> yeah exactly, you can avoid race conditions in the current context
[08:19:42] <SnoopJ> a probably race, if you like
[08:19:46] <SnoopJ> probable*
[08:21:20] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[08:23:02] *** Joins: humbertowoody (~humbertow@189.132.111.57)
[08:23:15] *** karl_AFK is now known as karlnashville
[08:24:14] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[08:24:20] *** Joins: obvs (~obvs@user/PeteH)
[08:25:15] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[08:26:47] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[08:28:01] *** Quits: humbertowoody (~humbertow@189.132.111.57) (Ping timeout: 256 seconds)
[08:28:36] *** Joins: bluedust (~bluedust@103.161.144.94)
[08:29:38] *** Joins: brentaarnold (~brentaarn@24.112.58.14)
[08:31:25] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[08:31:46] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[08:33:25] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[08:34:14] *** Joins: vanessa (~annada@103.160.128.7)
[08:35:33] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[08:35:57] *** Joins: mickey82 (~user@user/mickey)
[08:35:57] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[08:36:03] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 250 seconds)
[08:36:37] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 240 seconds)
[08:36:59] *** Joins: duds-_ (~duds-@gateway/tor-sasl/duds)
[08:37:27] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[08:37:27] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Ping timeout: 276 seconds)
[08:37:28] *** mickey82 is now known as mickey8
[08:38:06] *** Joins: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2)
[08:38:16] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[08:38:47] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 256 seconds)
[08:38:47] *** mIk3_09 is now known as mIk3_08
[08:39:49] *** duds-_ is now known as duds-
[08:39:54] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[08:39:58] *** Joins: lntl (~joey@24.136.23.254)
[08:39:58] *** Joins: bluedust_ (~bluedust@185.248.85.40)
[08:40:11] *** Quits: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr) (Read error: Connection reset by peer)
[08:40:48] *** Joins: AlanMD_ (~AlanMD@5-12-13-215.residential.rdsnet.ro)
[08:41:09] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Read error: Connection reset by peer)
[08:41:27] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[08:41:57] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:b441:7875:2785:6006)
[08:42:50] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Remote host closed the connection)
[08:42:50] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[08:42:50] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[08:43:03] *** Joins: twb (~twb@2403-5804-c6--cfeb-44f7-7895-9800.ip6.aussiebb.net)
[08:43:12] *** Joins: bindu (~bindu@user/bindu)
[08:43:23] <twb> I'm trying to do "xprop" in python3/gtk3.  I had it working in python2/gtk2.
[08:43:27] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[08:43:35] <twb> This much works: window = gi.repository.Gdk.Display().get_default().get_default_screen().get_active_window()
[08:43:37] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[08:43:38] *** Joins: shokohsc (~shokohsc@lfbn-idf2-1-431-13.w86-246.abo.wanadoo.fr)
[08:43:45] <twb> This doesn't work anymore (no such method): window.property_get('WM_CLASS')
[08:43:53] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 256 seconds)
[08:44:26] <twb> There is a .get_property(), but it says "TypeError: objcet of type `GdkX11Window' does not have property `WM_CLASS'
[08:45:50] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:444d:404c:c947:f9bc) (Ping timeout: 268 seconds)
[08:46:08] <twb> Looking at the C source of Gdk3, I can see there there is still a gdkproperty.c source object, and it still has WM_CLASS in it, and there is stlil a gdk_property_get in gdkwindow.c that it taking a GdkAtom
[08:46:25] <twb> Oh maybe I have to manually turn "WM_CLASS" into an atom and then property_get that...
[08:46:44] <twb> (I find this gi layer REALLY hard to understand what it wants me to do)
[08:47:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[08:47:24] *** Joins: han-solo (~han-solo@user/han-solo)
[08:50:20] <twb> Nope, that's not it.  "TypeError: GObject.get_property() argument 1 must be str, not Atom"
[08:52:42] *** Joins: rvalue (~rvalue@user/rvalue)
[08:53:50] *** Quits: retrosenator (~retrosena@63.sub-174-203-192.myvzw.com) (Ping timeout: 250 seconds)
[08:54:05] *** Quits: Ashburry (~Ashburry@184.69.89.188) (Ping timeout: 256 seconds)
[08:54:10] <twb> Oh and xprop confirms the window DEFINITELY does have an ICCCM WM_CLASS set
[08:54:22] *** Joins: domini_ (~domini@22.112.235.77.dyn.idknet.com)
[08:55:00] *** Quits: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be) (Read error: Connection reset by peer)
[08:55:19] *** Quits: domini_ (~domini@22.112.235.77.dyn.idknet.com) (Remote host closed the connection)
[08:55:42] *** Quits: Fossil (~Fossil@95.85.23.165) (Ping timeout: 268 seconds)
[08:55:57] *** Joins: retrosenator (~retrosena@102.sub-174-203-210.myvzw.com)
[08:57:12] *** Joins: fartyfoam (~fartyfoam@178-118-118-2.access.telenet.be)
[08:57:19] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[08:57:43] <twb> OK so widow.get_property('cursor') works so I'm like 70% convinced GdkX11Window.get_property cannot access ICCCM properties
[08:59:01] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 256 seconds)
[08:59:11] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Read error: Connection reset by peer)
[08:59:25] <twb> Aha!
[08:59:43] <twb> Thre's a gi.repository.Gdk.property_get() but it takes *6* arguments
[09:00:07] *** Joins: rvalue (~rvalue@user/rvalue)
[09:00:16] *** Quits: obvs (~obvs@user/PeteH) (Killed (NickServ (Forcing logout obvs -> PeteH)))
[09:01:04] *** Joins: swistak (~swistak@185.21.216.141)
[09:02:49] *** Joins: dvx (~dvx@5.181.92.64)
[09:02:57] *** Quits: lntl (~joey@24.136.23.254) (Ping timeout: 240 seconds)
[09:04:29] <grawity> twb: I wouldn't be surprised if GTK 3 or later just didn't make that stuff public API... last time I had to mess with X properties, I used gi.repository.Wnck instead, though IIRC at some point still had to resort to spawning `xprop`
[09:04:38] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[09:05:15] *** Joins: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[09:05:51] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[09:05:52] *** Joins: CBTEnjoyer (~CBTEnjoye@94.200.149.38)
[09:06:24] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[09:06:34] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[09:07:01] <twb> wnck is $coworker's suggestion
[09:07:19] <twb> It's frutstrating because the query is ALMOST possible
[09:07:23] <twb> This is how far I got:
[09:07:41] <twb> gi.repository.Gdk.property_get(gi.repository.Gdk.Display().get_default().get_default_screen().get_active_window(), gi.repository.Gdk.Atom.intern_static_string('WM_CLASS'), gi.repository.Gdk.Atom.intern_static_string('STRING'), 0, 64, 0)  ===> "TypeError: Could not caller allocate argument 6 of callable Gdk.property_get"
[09:08:02] <twb> Except the 6th argument is a f'king gint used as a boolean, so wtf
[09:08:15] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[09:08:34] <twb> And that's the point at which I noticed that gtk3's property_get documentation says "this is wrong.  behaviour is undefined.  do not use"
[09:08:51] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[09:08:55] <twb> So like why even have that function at all?!
[09:08:57] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 240 seconds)
[09:09:18] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[09:09:35] *** Joins: re101-sponge-58 (~re101-spo@2606:54c0:76c0:95b0::f:195)
[09:09:47] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[09:09:54] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[09:09:57] *** Quits: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Ping timeout: 256 seconds)
[09:11:18] <twb> I should XYProblem at this point.
[09:11:40] <twb> What I *actually* want to do is answer questions like "which games are users running?"
[09:11:57] <twb> and "how much time does alice spend in the browser?"
[09:12:44] *** Quits: CBTEnjoyer (~CBTEnjoye@94.200.149.38) (Quit: Client closed)
[09:12:59] *** Joins: domicron6 (~domicron@gateway/tor-sasl/domicron)
[09:13:05] *** domicron6 is now known as domicron
[09:13:26] <twb> So I've just been logging the active window, using WM_CLASS "name", "Class" to find the .desktop from "name", and then if "class" is different, just log that also
[09:13:56] <twb> (So e.g. "chromium --app=https://pornhub.com" shows up as something like "Applications > Internte > Web Browser (https://pornhub.com/)"
[09:14:45] <twb> It's gotta be the WM_CLASS rather than WM_NAME (i.e. title bar) because the latter ends up being any old random thing
[09:16:01] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[09:16:11] *** Quits: dudebbn_ (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com) (Ping timeout: 256 seconds)
[09:16:31] *** Joins: dudebbn (~dudebbn@cpe-174-97-16-77.cinci.res.rr.com)
[09:18:23] <twb> It looks like the "caller allocate" error is a bug: https://gitlab.gnome.org/GNOME/gtk/-/issues/383
[09:18:47] <twb> So yeah I *was* calling exactly the right thing, but it's just flat-out broken in Debian 11
[09:19:01] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 256 seconds)
[09:20:38] *** Joins: analoq (~yashi@user/dies)
[09:20:59] *** Joins: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:195)
[09:21:47] *** Joins: mIk3_09 (~Thunderbi@user/mik3-08/x-2852566)
[09:22:15] *** Quits: retrosenator (~retrosena@102.sub-174-203-210.myvzw.com) (Ping timeout: 256 seconds)
[09:22:55] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[09:23:18] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[09:24:06] *** Joins: retrosenator (~retrosena@81.sub-174-210-70.myvzw.com)
[09:24:10] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 250 seconds)
[09:24:11] *** mIk3_09 is now known as mIk3_08
[09:25:05] *** Quits: optimant (~asavage@user/optimant) (Quit: no reason)
[09:25:49] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[09:26:13] *** Quits: snakey_hiss (~scott@101.100.131.161) (Quit: WeeChat 1.9.1)
[09:27:05] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[09:27:50] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[09:28:54] *** Quits: retrosenator (~retrosena@81.sub-174-210-70.myvzw.com) (Read error: Connection reset by peer)
[09:28:59] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[09:29:05] *** Joins: zaquest (~notzaques@5.130.79.72)
[09:29:13] *** Joins: ephemer0l (~ephemer0l@organizedmagnetism.com)
[09:30:29] *** Joins: re101-sponge-99 (~re101-spo@2606:54c0:76c0:95b0::f:195)
[09:30:30] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[09:31:27] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:43] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[09:33:20] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[09:34:25] *** Joins: matsaman (~matsaman@user/matsaman)
[09:34:34] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Ping timeout: 250 seconds)
[09:34:48] *** Quits: michagogo (uid14316@user/michagogo) (Quit: Connection closed for inactivity)
[09:35:45] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[09:36:24] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[09:36:46] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[09:37:21] *** Quits: nepeat (~nepeat@79.110.170.60) (Read error: Connection reset by peer)
[09:37:24] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[09:38:21] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[09:38:54] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[09:39:34] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[09:40:32] *** Joins: nepeat (~nepeat@79.110.170.60)
[09:41:07] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[09:41:39] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[09:41:43] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[09:42:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:46:18] *** Joins: fef (~thedawn@user/thedawn)
[09:47:42] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[09:48:34] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:49:39] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:50:11] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:50:13] *** Quits: re101-sponge-99 (~re101-spo@2606:54c0:76c0:95b0::f:195) (Quit: Client closed)
[09:50:13] *** Quits: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:195) (Quit: Client closed)
[09:50:13] *** Quits: re101-sponge-58 (~re101-spo@2606:54c0:76c0:95b0::f:195) (Quit: Client closed)
[09:50:21] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[09:50:42] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[09:51:55] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[09:53:19] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[09:53:28] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[09:54:07] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[09:54:19] *** Joins: re101-sponge-58 (~re101-spo@2606:54c0:76c0:95b0::f:22b)
[09:54:19] *** Joins: re101-sponge-99 (~re101-spo@2606:54c0:76c0:95b0::f:22b)
[09:54:21] *** Joins: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:22b)
[09:54:35] *** Quits: dalan (~dalan@203-219-209-191.static.tpgi.com.au) (Read error: Connection reset by peer)
[09:54:56] *** Joins: lupina (~gerj79@user/gerj79)
[09:55:07] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[09:56:21] *** Joins: crashrep (~crashrep@user/crashrep)
[09:56:51] *** Joins: dalan (~dalan@203-219-209-191.static.tpgi.com.au)
[09:56:58] *** Joins: flea (nosoul@gateway/vpn/protonvpn/nosoul)
[09:57:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[09:58:28] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[09:58:43] *** Joins: oush9[m] (~oush9matr@2001:470:69fc:105::eb5)
[09:58:44] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[09:58:53] *** Parts: oush9[m] (~oush9matr@2001:470:69fc:105::eb5) ()
[09:59:33] <lupina> hello, I would like to use the "HREF=..." entries in a html file containing bookmark exports, in order to find and remove duplicate links added.
[09:59:35] *** Joins: CBTEnjoyer (~CBTEnjoye@80.227.209.90)
[09:59:57] *** Quits: re101-sponge-58 (~re101-spo@2606:54c0:76c0:95b0::f:22b) (Quit: Client closed)
[09:59:58] *** Quits: re101-sponge-99 (~re101-spo@2606:54c0:76c0:95b0::f:22b) (Quit: Client closed)
[09:59:58] *** Quits: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:22b) (Quit: Client closed)
[10:00:04] <lupina> which modules-libraries are suitable for this purpose?
[10:01:18] <phy1729> beautiful soup
[10:01:21] *** Joins: Guest8 (~Guest8@139.47.36.37)
[10:01:34] *** Guest8 is now known as __that__
[10:01:35] *** Quits: hifi (hifi@heisenbridge/hifi) (Remote host closed the connection)
[10:01:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c9b9-54aa-6233-6d58.res6.spectrum.com) (Ping timeout: 240 seconds)
[10:02:07] *** Joins: hifi (hifi@heisenbridge/hifi)
[10:03:33] <lupina> phy1729, also csv-reading modules, perhaps?
[10:04:03] <lupina> or is beautiful soup sufficient?
[10:04:05] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[10:04:28] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[10:05:01] *** Quits: jfcaron (~jfcaron@192.252.229.171) (Quit: jfcaron)
[10:05:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[10:05:17] *** Joins: delvian (~delvian@41.13.216.180)
[10:05:29] *** Joins: re101-sponge-99 (~re101-spo@2606:54c0:7680:95b0::f:15f)
[10:05:29] *** Joins: re101-sponge-58 (~re101-spo@2606:54c0:7680:95b0::f:15f)
[10:05:31] *** Joins: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:1e8)
[10:05:44] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b926-4a69-3dcb-b94a.res6.spectrum.com)
[10:06:01] <phy1729> there's a csv module in the standard library
[10:06:17] *** Quits: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[10:06:47] *** Joins: cdleonard (~cdleonard@ec2-52-70-55-94.compute-1.amazonaws.com)
[10:06:54] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[10:07:12] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[10:07:24] <lupina> right, thanks
[10:08:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:08:52] *** Joins: loki_val (~crabbedha@user/crabbedhaloablut)
[10:09:45] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 276 seconds)
[10:10:26] *** Quits: fannagoganna (uid110488@id-110488.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:12:35] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[10:13:18] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:13:20] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:13:34] *** Quits: lupina (~gerj79@user/gerj79) (Ping timeout: 250 seconds)
[10:14:17] *** Joins: re101-sponge-998 (~re101-spo@2606:54c0:76c0:95b0::f:1e8)
[10:14:18] *** Quits: re101-sponge-998 (~re101-spo@2606:54c0:76c0:95b0::f:1e8) (Client Quit)
[10:14:28] *** Joins: mat001 (~mat001@69.4.234.76)
[10:15:18] *** Quits: re101-sponge-588 (~re101-spo@2606:54c0:76c0:95b0::f:1e8) (Quit: Client closed)
[10:16:17] *** Quits: re101-sponge-99 (~re101-spo@2606:54c0:7680:95b0::f:15f) (Quit: Client closed)
[10:16:17] *** Quits: re101-sponge-58 (~re101-spo@2606:54c0:7680:95b0::f:15f) (Quit: Client closed)
[10:16:47] *** Joins: re101-sponge-99 (~re101-spo@2606:54c0:76e0:95b0::f:c3)
[10:16:50] *** Joins: re101-sponge-58 (~re101-spo@2606:54c0:76e0:95b0::f:c3)
[10:17:50] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[10:17:54] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[10:18:09] *** Joins: henbruas (~henbruas@ti0003a400-4203.bb.online.no)
[10:19:59] *** Joins: jazzy2 (~jaziz@user/jaziz)
[10:20:23] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[10:20:43] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[10:20:47] *** Joins: jazzy2 (~jaziz@user/jaziz)
[10:20:55] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[10:21:14] *** Quits: re101-sponge-58 (~re101-spo@2606:54c0:76e0:95b0::f:c3) (Client Quit)
[10:21:21] *** Joins: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a)
[10:21:22] *** Quits: molt (~molt@46.33.200.12) (Quit: Leaving)
[10:21:55] *** Quits: mat001 (~mat001@69.4.234.76) (Ping timeout: 256 seconds)
[10:21:56] *** Joins: mat001_ (~mat001@69.4.234.62)
[10:22:07] *** Joins: tobybl (~tobybl@248.195.115.87.dyn.plus.net)
[10:22:57] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[10:23:01] *** Quits: re101-sponge-99 (~re101-spo@2606:54c0:76e0:95b0::f:c3) (Quit: Client closed)
[10:23:49] <twb> grawity: FYI, wnck is working, even though it looks suuuuuper shady: https://github.com/cyberitsolutions/bootstrap2020/commit/cb3149
[10:23:56] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:31f6:768b:5d65:a6a0) (Read error: Connection reset by peer)
[10:24:01] *** Quits: ajf_ (~ajf_@user/ajf/x-9593112) (Ping timeout: 256 seconds)
[10:24:12] *** Joins: jfcaron (~jfcaron@192.252.229.171)
[10:24:22] *** Joins: LBD (LBD@gateway/vpn/protonvpn/lbd)
[10:24:27] <twb> grawity: I get the impression the GNOME devs wanted to drop some features from gdk, but there were objections, so they just carved them out into "wnck" and then quietly abandoned wnck
[10:25:26] <twb> phy1729: FYI lupina's file was probably XBEL https://en.wikipedia.org/wiki/XBEL  so don't need any HTML hacks, plain XML will do
[10:25:56] *** karlnashville is now known as karl_AFK
[10:26:09] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[10:26:38] *** Quits: CBTEnjoyer (~CBTEnjoye@80.227.209.90) (Quit: Client closed)
[10:28:09] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[10:28:51] *** Joins: Terexen (~terexen@user/terexen)
[10:29:06] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:17c8:f021:707a:32e5)
[10:29:31] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[10:29:52] *** Quits: karl_AFK (~karl@2601:482:4280:4cf0:384b:248:fd56:359b) (Remote host closed the connection)
[10:29:56] *** Joins: jazzy2 (~jaziz@user/jaziz)
[10:29:59] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:32:53] *** Quits: onichomp (~onichomp@2806:264:4408:285:353a:9ad8:29b:a31a) (Read error: Connection reset by peer)
[10:34:22] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[10:35:39] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[10:35:58] *** Joins: carl-- (~carl-@185.103.188.130)
[10:36:34] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:36:38] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[10:38:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:40:00] *** Quits: lbalhar (~lbalhar@93.185.13.26) (Ping timeout: 250 seconds)
[10:40:12] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[10:40:26] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[10:41:35] *** Joins: mrwick (~mrwick@user/mrwick)
[10:44:20] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Ping timeout: 250 seconds)
[10:44:21] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:44:24] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[10:44:30] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (Ping timeout: 260 seconds)
[10:44:45] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[10:44:51] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Read error: Connection reset by peer)
[10:45:00] *** Quits: hifi (hifi@heisenbridge/hifi) (Remote host closed the connection)
[10:45:16] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[10:45:22] *** Joins: hifi (hifi@heisenbridge/hifi)
[10:45:51] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:46:17] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[10:46:20] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:46:40] *** Joins: CBTEnjoyer (~CBTEnjoye@5.32.64.122)
[10:48:24] *** CBTEnjoyer is now known as CockAndBallTortu
[10:48:37] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[10:48:41] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[10:48:41] *** CockAndBallTortu is now known as CBTEnjoyer
[10:48:58] <vanessa> TypeError: 'int' object is not callable <- what is it mean?
[10:49:07] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (Ping timeout: 256 seconds)
[10:49:50] <twb> vanessa: it means you tried to do something like 2.get_friends()
[10:49:58] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[10:50:03] <twb> vanessa: er, not even that.  You tried to do 2()
[10:50:23] <vanessa> no.
[10:50:28] *** Joins: lupina (~gerj79@user/gerj79)
[10:51:02] <jinsun> well then maybe you did x = 2; x()
[10:51:04] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro)
[10:51:15] *** Quits: hifi (hifi@heisenbridge/hifi) (Remote host closed the connection)
[10:51:25] *** Joins: NeoCore (~neocore@37.120.204.54)
[10:51:33] <twb> And not necessarily 2 either, obviously.
[10:51:35] <vanessa> '''multiline string with format specifiers'''%values_tuple
[10:51:37] *** Joins: hifi (hifi@heisenbridge/hifi)
[10:51:49] <vanessa> I have error on this line ^
[10:52:01] <twb> pastebin the entire file
[10:52:05] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[10:52:18] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:54:37] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:54:54] <grawity> twb: they are moving GTK away from exposing backend-specific features, primarily due to Wayland – harder to accidentally make your app X11-only if there are no X11-only APIs to begin with (though it presumably also benefits Windows and Quartz backends as well)
[10:56:04] <vanessa> twb https://dpaste.com/38RLH2YQZ
[10:56:08] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:56:33] <grawity> twb: as for Wnck I think it has to do something with how in GNOME 3, I remember them saying that they explicitly didn't want the WM/compositor to be using GTK for anything (which is why gnome-shell rolls its own widget toolkit, etc)
[10:57:03] *** Quits: esv (~esv@74.124.178.154) (Ping timeout: 256 seconds)
[10:57:35] <Repiphany> vanessa: array.size is an integer
[10:57:46] <grawity> using _ for 'self' is a bit weird
[10:57:50] <Repiphany> array.size() is trying to "call" an integer
[10:58:30] <vanessa> grawity: _ is three characters less then self
[10:58:35] <parv> ++
[10:58:56] <parv> ... but it is easier to lose too
[10:58:57] *** Quits: mat001_ (~mat001@69.4.234.62) (Ping timeout: 240 seconds)
[10:58:58] <deniska> but requires holding shift
[10:59:06] <vanessa> Repiphany: that fixed it, thanks
[10:59:07] <Repiphany> Fewer characters doesn't mean better or more readable code
[10:59:12] <parv> Well there is also "it"
[10:59:17] <deniska> and `_` is common in `for _ in range(3)`
[10:59:21] <grawity> vanessa: eh, so is 'S' and that at least doesn't have the implied meaning of "don't care about this variable"
[10:59:25] <Repiphany> % string formatting is also just outdated now anyway
[10:59:55] <Repiphany> You also misspelled `Lenght`
[10:59:56] <grawity> I've done "import sqlalchemy as δ" once because it was shorter, too
[11:00:32] *** Quits: hams (~hams@user/hams) (Quit: Leaving)
[11:00:34] <grawity> (but made it even shorter by using mysqlclient instead)
[11:00:56] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:01:08] <vanessa> Repiphany: if that is outdated, how to "-20.3lf"%3.14159 ?
[11:01:47] <parv> document of str.format mentions the syntax
[11:02:06] <twb> grawity: re "no X11-only stuff" - yeah fair, although this particular query, Gtk3 implemented for MacOS also
[11:02:18] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[11:02:59] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:02:59] <vanessa> % is shorter than str.format, parv
[11:03:05] <twb> vanessa: I'm guessing your problem is .size()
[11:03:19] <grawity> but it's longer than f"Length: {S.length}"
[11:03:23] <jinsun> f-strings are the shorter version of str.format
[11:03:36] <twb> I definitely recommend f-strings in general
[11:03:41] <vanessa> twb, yes .size returns a integer and I thought it was a function
[11:04:05] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Remote host closed the connection)
[11:04:20] <deniska> import alembic as 🝪
[11:04:23] <vanessa> grawity: %-20.3lf in f-string will be like?
[11:04:29] <deniska> (sadly illegal)
[11:04:30] <parv> vanessa, I had mentioned "*documentation* of str.format" (to use in f'' if you would like)
[11:04:32] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:04:46] <grawity> though, still, there is a difference between %-formatting merely being "not the latest fashion" and _-as-self being actually contrary to readers' expectations
[11:04:48] <twb> ('Quick, Draw! dataset by Google.\n' f'Length: {_.length}\n' f'Size: {_data.size}\n'
[11:05:28] <grawity> that is, everybody will understand what the %-formatting is doing when they see it, less so _
[11:05:31] <twb> I also agree that you shoudl not use _ like that
[11:05:38] <parv> There is also f'{it.length=}'
[11:05:41] <vanessa> ok ok, I will change _ to 'it'
[11:05:42] *** Parts: Maxminlevel[m] (~maxminlev@2001:470:69fc:105::1:650d) ()
[11:05:44] <Repiphany> f"{3.14159:<20.3f}"
[11:06:00] <twb> _ is what Python calls the pronoun, so it should generally not be used except interactively
[11:06:05] <Repiphany> Just use `self`, you're writing python
[11:06:18] *** Joins: gusto (~Augustus@109.255.100.54)
[11:06:39] <twb> (Except in the specific idiom of "I don't care what this is", e.g. "_, _, fartcount = get_data()")
[11:06:40] <grawity> hmm would it be 'þis' or 'ðis' I keep mixing up the two
[11:06:50] <twb> grawity: þ
[11:07:12] <twb> grawity: the other one isn't anglic, it's icelandic or something
[11:07:15] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:08:28] *** Quits: LBD (LBD@gateway/vpn/protonvpn/lbd) (Quit: leaving)
[11:08:59] <supakeen> they both are
[11:08:59] *** Joins: bluedust (~bluedust@103.161.144.94)
[11:09:07] <supakeen> also haha funny letters
[11:09:30] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[11:09:31] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[11:09:38] <twb> Well I'm like 90% sure that the last two letters English stopped using where thorn and wynn
[11:09:56] <vanessa> Repiphany: f"{3.14159:<20.3f" behaves like "%-20.3lf"%3.14159
[11:10:09] *** Quits: Vision (~Vision@097-087-115-181.res.spectrum.com) (Read error: Connection reset by peer)
[11:10:25] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[11:10:25] <twb> vanessa: if you want math.pi, use math.pi :-)
[11:10:49] <vanessa> and there is no way to get "%20.3lf"%3.14159
[11:11:12] <vanessa> twb, that was just an example
[11:11:14] <Repiphany> You asked for -
[11:11:15] <twb> vanessa: what's lf there?  Force interpretation as a long float?
[11:11:24] <vanessa> twb yes
[11:11:29] *** Joins: wyre (~wyre@user/wyre)
[11:11:37] <twb> Why do you need to force it?
[11:11:43] <Repiphany> f"{3.14159:20.3f}" or >20.3f
[11:11:45] *** Joins: lntl (~joey@24.136.23.254)
[11:12:02] <vanessa> twb: force of habit from good ol' C
[11:12:11] <twb> "don't do that, then"
[11:12:22] <twb> You only really need the digits
[11:12:30] *** Quits: bluedust_ (~bluedust@185.248.85.40) (Ping timeout: 250 seconds)
[11:12:34] <Repiphany> Python native floats are all 64 bit
[11:12:59] <vanessa> Repiphany: so what is python standard? %g ?
[11:13:45] <vanessa> btw, I would love to see some other review of the code I pasted wrt to python coding standards
[11:14:03] *** Quits: tobybl (~tobybl@248.195.115.87.dyn.plus.net) (Remote host closed the connection)
[11:14:28] <twb> I confess I find this difference odd: f'{math.pi:-20.3}', f'{math.pi:-20.3f}'
[11:14:44] <twb> I would intuitively expect those to yield the same output
[11:15:05] *** Quits: emf (~emf@2620:10d:c090:400::5:3f1) (Ping timeout: 250 seconds)
[11:15:34] *** Quits: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052) (Quit: Leaving)
[11:15:48] *** Quits: AlanMD_ (~AlanMD@5-12-13-215.residential.rdsnet.ro) (Quit: ZZZzzz…)
[11:16:42] *** SallyAhaj_ is now known as SallyAhaj
[11:16:59] *** Joins: emf (~emf@2620:10d:c090:400::5:2d26)
[11:17:16] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[11:18:34] <Repiphany> {math.pi:.3} is the same as {math.pi:.3g} which specifies the total number of digits both before and after the decimal it seems
[11:18:35] *** Quits: lntl (~joey@24.136.23.254) (Ping timeout: 256 seconds)
[11:18:45] <Repiphany> .3f specifies the number of digits after the .
[11:19:03] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[11:19:29] <twb> Repiphany: are you saying the datatype (f) causes the 3 to mean "after the dot" instead of "including the dot" ?
[11:19:48] *** Quits: __that__ (~Guest8@139.47.36.37) (Quit: Client closed)
[11:19:52] *** Joins: manti7 (~manti7@176.10.104.94)
[11:20:39] <Repiphany> https://docs.python.org/3/library/string.html#format-specification-mini-language paragraph starting "The precision is ..."
[11:20:57] *** Quits: Barones (~Barones@2804:7f3:8989:5535:3bc4:4610:62ad:ecf2) (Ping timeout: 240 seconds)
[11:21:00] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:21:07] *** Joins: faceface (~faceface@user/faceface)
[11:21:11] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[11:21:56] <llanhmod> twb: so essentially, .2f would be same as the 20.3 with no f (precision)
[11:22:26] *** Joins: ASUS (~ASUS@user/ASUS)
[11:22:26] <twb> OK.  That's unexpected, but at least the rule is reasonably simple
[11:22:59] *** Quits: ASUS (~ASUS@user/ASUS) (Client Quit)
[11:23:12] <Repiphany> f"{math.pi*10000:.3}" # 3.14e+04
[11:23:17] <llanhmod> excuse me... format speficier
[11:23:40] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[11:23:40] <llanhmod> heh...specifier*
[11:24:30] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[11:24:49] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:25:29] *** Quits: CBTEnjoyer (~CBTEnjoye@5.32.64.122) (Quit: Client closed)
[11:26:39] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[11:26:49] <llanhmod> oh...my question. being a bit lazy here but does ipdb come seperate form iptyhon?
[11:27:58] <llanhmod> from... IPython
[11:28:13] *** Joins: palasso (~palasso@user/palasso)
[11:28:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:28:33] <llanhmod> oh wait...nevermind.
[11:29:17] <llanhmod> for some reason, when I ran the ipbd inside IPython, never notice the prompt change.
[11:29:48] *** Joins: Auron (~Auron956@user/auron)
[11:29:58] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[11:30:04] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[11:30:45] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:68c4:8bd5:ec8a:69c5)
[11:32:01] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (Ping timeout: 245 seconds)
[11:32:35] <vanessa> if a package is already imported and I try to import it again, will my namespace be poisoned? If so, what is the equivalent of #ifndef-#define-#endif?
[11:32:40] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro)
[11:32:46] *** Joins: inomoz (~inomoz@176.59.121.150)
[11:32:47] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[11:33:00] *** Joins: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[11:33:08] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:33:21] <Repiphany> Repeated import doesn't do anything, it uses the one already loaded
[11:33:23] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 252 seconds)
[11:33:25] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[11:33:42] *** Joins: widp (~user@124.123.107.87)
[11:34:27] <vanessa> file.py imports something, and I import that something and file.py, there will be no problem?
[11:34:36] *** Quits: trashbird (~trashbird@user/trashbird) (Ping timeout: 250 seconds)
[11:35:24] <Repiphany> Yes, both `something` and `file.something` will be available
[11:35:38] *** Quits: whistl (~whistl@172-125-148-108.lightspeed.tukrga.sbcglobal.net) (Quit: Leaving)
[11:36:32] <vanessa> and it is okay to do that?
[11:36:49] <Repiphany> Yes, why wouldn't it be
[11:37:19] <vanessa> Repiphany: namespace becomes big
[11:38:24] <Repiphany> Why is a big namespace a problem if you're importing things that you need
[11:38:37] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:38:51] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[11:39:11] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:68c4:8bd5:ec8a:69c5) (Quit: Client closed)
[11:40:07] <deniska> vanessa: both `something` and `file.something` refer to the same module object, so it's not big in a sense of consuming twice the memory
[11:40:44] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f)
[11:40:48] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[11:41:41] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[11:41:49] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 256 seconds)
[11:44:21] *** Joins: frost (~frost@user/frost)
[11:44:31] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 245 seconds)
[11:44:39] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:17c8:f021:707a:32e5) (Read error: Connection reset by peer)
[11:44:52] *** Joins: KvL (~KvL@user/KvL)
[11:45:39] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:17c8:f021:707a:32e5)
[11:45:45] *** Joins: gusto (~Augustus@109.255.100.54)
[11:47:21] *** Joins: trashbird (~trashbird@user/trashbird)
[11:48:02] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[11:49:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:49:16] *** Quits: gildarts (16abab341f@user/gildarts) (Read error: Connection reset by peer)
[11:49:23] *** Joins: gildarts (16abab341f@user/gildarts)
[11:49:41] <jinsun> and if you didn't want to be able to use file.something, outside of file.py, that is a job for a linter
[11:49:44] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[11:49:58] *** Joins: Karyon_ (~Karyon@user/karyon)
[11:50:26] *** Quits: introom (introom@2600:3c01::f03c:92ff:fea3:2cf) (Ping timeout: 252 seconds)
[11:50:26] *** Quits: taru9 (~realTaru9@user/taru9) (Ping timeout: 252 seconds)
[11:50:30] *** Quits: jfcaron (~jfcaron@192.252.229.171) (Quit: jfcaron)
[11:50:45] *** Joins: taru9 (~realTaru9@user/taru9)
[11:50:54] *** Joins: VaniaPy (~VaniaPy@46.12.137.214.dsl.dyn.forthnet.gr)
[11:51:00] <jinsun> like mypy complains about that unless you explicitly re-export the imported name (by doing import something as something)
[11:51:11] *** Joins: kosh (~kosh@user/kosh)
[11:51:35] *** Joins: aaguilera (~aaguilera@185.41.96.12)
[11:51:36] *** Joins: introom (introom@2600:3c01::f03c:92ff:fea3:2cf)
[11:52:17] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Ping timeout: 240 seconds)
[11:52:47] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:52:59] <aphysically> jinsun: do you think we can OOM mypy/pyright https://github.com/python/mypy/issues/11990
[11:53:10] <aphysically> I sure intend to try
[11:53:20] *** Quits: aaguilera (~aaguilera@185.41.96.12) (Client Quit)
[11:54:10] *** Joins: Payam (~Payam@138.106.57.132)
[11:54:15] *** Joins: Naan (~Naan@user/naan)
[11:54:21] <Payam> Hi
[11:54:46] <Payam> do you guys know any good library than can generate a UML diagram for a folder of python fileS?
[11:55:20] *** Joins: frost (~frost@user/frost)
[11:55:40] <jinsun> aphysically: ah more type level computation, yeah that might make it easier to oom
[11:56:04] *** Joins: aaguilera (~aaguilera@185.41.96.12)
[11:56:07] *** Joins: chele (~chele@user/chele)
[11:56:12] <aphysically> idk a literal x that's a union of the first 50 primes or something and assign x*x*x*...*x (50 x) to a variable
[11:56:22] <aphysically> then hover over the variable
[11:56:25] <aphysically> ?
[11:56:49] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[11:56:55] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[11:57:14] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[11:57:41] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[11:57:47] <aphysically> this should crash or OOM yes?
[11:57:58] *** Joins: cheater (~Username@user/cheater)
[11:58:05] <jinsun> will have to try that when it lands in pylance
[11:58:26] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Ping timeout: 250 seconds)
[11:58:32] <twb> Payam: do you have to use UML for school?
[11:58:33] <jinsun> if not oom it would at least become too slow I imagine
[11:59:15] <aphysically> I think it's too much memory to store so it should freeze up at best if it doesn't cleanly bail on a time limit
[12:00:12] <jinsun> yeah it might just get stuck on "loading..." or something
[12:00:53] <jinsun> which happens now too if it is loading type definitions from some large import
[12:02:16] *** Joins: upsala (~zcb@185.209.196.169)
[12:03:10] *** Quits: Sargento (uid523534@wikipedia/Sargento-de-Hierro) (Quit: Connection closed for inactivity)
[12:04:05] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:04:47] <jinsun> might fallback to int after time limit, which would be best I guess
[12:06:19] *** Quits: ccldarjun (~textual@c-24-130-140-187.hsd1.ca.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:06:35] *** dcaro_away is now known as dcaro
[12:07:49] *** Joins: pycode (~pycode3@2001:b07:5d28:551:315c:bebc:98b4:e90a)
[12:08:02] <aphysically> jinsun: https://bpa.st/Y5XQ
[12:08:14] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[12:09:07] *** Joins: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c)
[12:09:18] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[12:09:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:10:00] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Quit: Leaving)
[12:10:14] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[12:11:08] <energizer> n
[12:11:33] <aphysically> maybe I can just ask in the mypy issue what happens
[12:11:35] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:11:41] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[12:12:00] <energizer> Payam: pretty sure pylint can do it
[12:12:02] <energizer> there are others too
[12:12:36] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[12:12:42] *** Joins: matrixbot_bartab (~matrixbot@lfbn-idf1-1-16-71.w82-124.abo.wanadoo.fr)
[12:12:46] <energizer> twb: have you used uml much?
[12:13:28] *** Joins: tobybl (~tobybl@248.195.115.87.dyn.plus.net)
[12:13:32] <twb> energizer: the reason I asked is because don't use UML it's a heap of time-wasting junk
[12:14:14] <energizer> twb: the reason i asked is because i dont know if people are saying that on the basis of experience or hearsay
[12:14:16] <twb> It's super formal and unless you're trying to write something the size of firefox or libreoffice, with 500,000 stakeholders, you don't need it
[12:14:25] <twb> energizer: I had to learn it in school
[12:14:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:14:45] <twb> I've never ever used it in industry
[12:14:50] <jinsun> aphysically: yeah could ask there, or maybe read the pyright implementation to figure out, but it is typescrpt and a bit too much diff
[12:14:52] <energizer> twb: did you have to write it yourself or generate it from introspecting your code?
[12:15:18] <twb> energizer: mostly it was used for designing with the stakeholders, and then you had to go and write code that implemented th diagram
[12:15:36] <twb> energizer: beceause I'm a grumpy bear, I also wrote some introspection tools at the time
[12:15:53] <twb> using graphviz with "HTML" node type to do the layout
[12:15:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:16:19] <energizer> twb: i've only used entity-relationship diagrams for databases but autogenerating those from a schema i've found very valuable
[12:16:31] *** Joins: rendar (~rendar@user/rendar)
[12:16:48] <energizer> so i wouldn't be that surprised if diagrams are useful if generated from source code too
[12:16:59] <twb> energizer: it can be valuable if someone dumps 100KLOC project in your lap and says "understand this, and fix bugs, but also don't rewrite anything"
[12:17:41] <twb> Ideally though when that happens you say "no, if this is all you have, we need to do a green-field rewrite because your business logic is currently undocumented, and we don't know what is even needed"
[12:19:02] <twb> UML was pitched to me more as a way to have a huge project and divvy work up between a Kannada-speaking team and a Gujurati-speaking team and have them not talk to one another but still emit a codebase that compiles and mostly doesn't crash
[12:20:10] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[12:20:13] *** Joins: \mSg (mSg@user/msg/x-0285936)
[12:20:30] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[12:20:34] <energizer> yeah i mostly hear about it in huge projects, but sometimes even on personal projects there are too many objects for me to keep in my head and it would be nice to just have a poster on the wall
[12:21:06] *** Joins: CBTEnjoyer (~CBTEnjoye@86.99.40.152)
[12:21:30] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:21:34] <energizer> but i dont have a big printer
[12:22:09] *** Joins: crashrep (~crashrep@user/crashrep)
[12:22:42] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:17c8:f021:707a:32e5) (Quit: pvergain)
[12:23:06] *** Joins: dreamon (~dreamon@ppp-88-217-76-15.dynamic.mnet-online.de)
[12:23:19] *** Quits: crashrep (~crashrep@user/crashrep) (Client Quit)
[12:24:53] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:25:37] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 240 seconds)
[12:26:20] <jinsun> I remember visual studio had a thing to make UML diagrams from C# code, but with python I imagine it can be harder to do, specially with untyped code
[12:26:41] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:26:56] <parv> Your friendly(?) neighbourhood office supply store may have a big format printer
[12:27:16] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:27:19] <aphysically> jinsun: okay i posted my adversarial (??) type checking code to the issue
[12:27:26] <aphysically> heading to sleep now
[12:27:50] *** Joins: KvL (~KvL@user/KvL)
[12:28:04] <energizer> https://pylint.pycqa.org/en/latest/additional_commands/index.html
[12:28:10] *** Joins: crashrep (~crashrep@user/crashrep)
[12:29:25] *** Joins: betuxy (~betuxy@p579ad46c.dip0.t-ipconnect.de)
[12:29:33] *** Quits: betuxy (~betuxy@p579ad46c.dip0.t-ipconnect.de) (Client Quit)
[12:29:40] <aphysically> looks like the first mypy implementation won't support unions so we'll have to come up with a different way to OOM mypy :(
[12:29:41] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[12:30:09] *** Joins: lbalhar (~lbalhar@93.185.13.26)
[12:30:24] <jinsun> yeah just saw that reply, so you'll just get int there, no fun
[12:30:52] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[12:31:07] <jinsun> not clear yet if pyright supported unions or not
[12:31:12] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:31:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:31:41] *** Joins: Ashburry (~Ashburry@184.69.89.188)
[12:31:43] <jinsun> let's see if Eric replies or try it out if a new pyright comes soon
[12:31:48] *** Quits: matrixbot_bartab (~matrixbot@lfbn-idf1-1-16-71.w82-124.abo.wanadoo.fr) (Quit: Bridge terminating on SIGTERM)
[12:31:57] <aphysically> pyright supports unions
[12:32:05] *** Joins: matrixbot_bartab (~matrixbot@lfbn-idf1-1-16-71.w82-124.abo.wanadoo.fr)
[12:32:12] <aphysically> we can infer this from the unit tests in the commit that added support to pyright
[12:32:18] <Ashburry> pypy too 5.9 seconds to list 4033 channels and CPython took 1.9 seconds to list the same
[12:32:24] <Ashburry> too = took
[12:32:44] <Ashburry> mIRC is still listing the channels in a debug window
[12:33:26] <jinsun> aphysically: ah, so pyright case is more intersting, have to see how it handles that oom case
[12:33:28] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[12:33:58] <jinsun> energizer: cool stuff
[12:33:59] *** Joins: someuser (~user@197.54.99.203)
[12:34:57] *** Cyp_ is now known as Cyp
[12:35:40] *** Joins: adhawkins (~adhawkins@user/adhawkins)
[12:35:59] *** Joins: martti (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:36:17] <adhawkins> In a pyproject.toml file's 'requires' section, what does a line like 'more_itertools~=8.10' mean? What is the meaning of the '~'?
[12:37:09] <energizer> adhawkins: https://www.python.org/dev/peps/pep-0440/#version-specifiers
[12:37:58] <adhawkins> Great, thanks energizer. My google skills were failing at trying to find a definition.
[12:38:54] *** Quits: Payam (~Payam@138.106.57.132) (Ping timeout: 256 seconds)
[12:39:17] *** Quits: k2ro (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[12:39:22] *** Joins: k2ro_ (~k2ro@p5b175bd7.dip0.t-ipconnect.de)
[12:39:23] *** Joins: Xano (~Xano@2a00:23c4:4204:700:74e1:9d54:b7a1:b272)
[12:39:41] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:40:59] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[12:41:19] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:42:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[12:43:04] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Ping timeout: 250 seconds)
[12:43:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:43:58] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:47:09] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[12:47:17] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[12:47:39] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:48:07] *** Joins: fling (~fling@user/fling)
[12:48:26] *** Joins: shad (~shad@user/shad)
[12:49:35] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[12:49:40] *** Quits: parv (~quass@user/parv) (Quit: parv)
[12:50:37] *** Quits: widp (~user@124.123.107.87) (Ping timeout: 240 seconds)
[12:52:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c57b:af89:b9b2:8139)
[12:52:45] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:53:01] *** Joins: crashrep (~crashrep@user/crashrep)
[12:53:12] <sn_fk_n> Using dataclasses, is there any smart way to take a dictionary and 'pop' the keys that match the data class fields so you're left with a dict containing only keys that aren't fields?
[12:53:36] <sn_fk_n> The dict will have all of the fields of the dataclass in it, plus some extra
[12:53:47] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[12:53:48] *** Quits: aaguilera (~aaguilera@185.41.96.12) (Quit: Leaving)
[12:55:29] *** Joins: Guest2 (~Guest2@37-145-193-141.broadband.corbina.ru)
[12:55:32] <energizer> sn_fk_n: you will have to make an intermediate dict
[12:55:50] <han-solo> `dataclasses.asdict(x).keys() ^ d.keys()` # ?
[12:56:15] <energizer> no
[12:56:15] <han-solo> er, you need the dict
[12:56:50] *** Joins: stonkey (~stonkey@user/stonkey)
[12:56:56] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 250 seconds)
[12:57:03] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[12:57:11] *** Joins: ewwegweg (~Saulooo@user/ewwegweg)
[12:57:18] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[12:57:24] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[12:57:37] *** Quits: Guest2 (~Guest2@37-145-193-141.broadband.corbina.ru) (Quit: Client closed)
[12:57:50] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi)
[12:58:01] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[12:58:15] <ewwegweg> which place i can learn this language
[12:58:28] <ewwegweg> best
[12:58:44] <han-solo> https://j.mp/23X7emF # is fine
[12:58:48] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[12:59:03] <ewwegweg> what
[12:59:05] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:59:05] <energizer> ewwegweg: i learned here years ago, it was good
[12:59:18] <energizer> ewwegweg: han-solo is talking to sn_fk_n not you
[12:59:34] <han-solo> um...
[12:59:39] <sn_fk_n> i don't think they are!
[12:59:46] <energizer> oh sorry i didnt click
[12:59:51] <sn_fk_n> lol
[12:59:53] <han-solo> energizer: i was just giving ... ah ':)
[13:00:16] <han-solo> `{x: d[x] for x in dataclasses.asdict(x).keys() ^ d.keys()}` # but yeah, is this not right ?
[13:00:21] <han-solo> sn_fk_n: energizer: ^
[13:00:29] <han-solo> maybe there's a better way
[13:00:40] <energizer> ewwegweg: anyway, if you read that book han-solo linked and hang out here, you will learn
[13:00:51] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:01:06] *** Joins: mickey8 (~user@user/mickey)
[13:01:07] *** Quits: NoelFlantier3 (~Hubert@static.189.244.201.195.clients.your-server.de) (Remote host closed the connection)
[13:01:30] *** Joins: NoelFlantier3 (~Hubert@static.189.244.201.195.clients.your-server.de)
[13:01:34] <han-solo> i've learned most of what i know from hanging out here
[13:02:21] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[13:02:37] <ewwegweg> I have videos of tutorial in your own language. But I immediately forget all
[13:02:51] <energizer> ewwegweg: you have to practice every day
[13:02:54] <sn_fk_n> I think I could loop over the dataclass as dict keys and pop from one dict to some 'kwargs' dict then make the dataclass from there maybe
[13:03:00] *** Quits: delvian (~delvian@41.13.216.180) (Read error: Connection reset by peer)
[13:03:04] <energizer> han-solo: you mean & not ^
[13:03:44] <ewwegweg> would it be enough to practice when it comes to half the videos energizer
[13:03:46] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[13:03:52] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[13:04:07] <energizer> ewwegweg: which videos? link?
[13:04:15] <ewwegweg> ı have 18 files half is 9
[13:04:24] <han-solo> maybe i misread but "so you're left with a dict containing only keys that aren't fields"
[13:05:17] <han-solo> oh wait, i misread
[13:05:31] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[13:05:37] <sn_fk_n> yeah I maybe was a little unclear I think I need two dicts
[13:05:39] <energizer> ewwegweg: you can learn to be productive in ~2 weeks, expertise takes years
[13:05:54] <sn_fk_n> one with the fields and the rest with the remnants
[13:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:06:56] <ewwegweg> I'm doing the thing in the video I watched myself
[13:07:12] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[13:07:14] <ewwegweg> without seeing
[13:07:18] <ewwegweg> is it true?
[13:07:32] <energizer> i dont understand the question ewwegweg
[13:07:50] <han-solo> sn_fk_n: maybe a small example would be helpful
[13:08:06] <sn_fk_n> I think this is it?
[13:08:07] <sn_fk_n> https://bpa.st/LKAA
[13:08:48] <ewwegweg> without seeing energizer
[13:08:49] *** Joins: vaio (~gary@user/ghost)
[13:08:52] <ewwegweg> sorry
[13:08:55] <ewwegweg> What is the practical tactic?
[13:09:27] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[13:09:42] <ewwegweg> Should I stop each video and do the same
[13:10:09] <sn_fk_n> https://bpa.st/Y2RA
[13:10:10] <energizer> ewwegweg: sure
[13:10:11] <sn_fk_n> here's example
[13:10:20] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[13:10:24] <ewwegweg> okay thanks
[13:11:14] *** Quits: lupina (~gerj79@user/gerj79) (Ping timeout: 250 seconds)
[13:11:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[13:11:53] <flower_> @dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=True, match_args=True, kw_only=False, slots=True)
[13:12:10] <flower_> is this the way to enable slots for all variables in the dataclass?
[13:12:10] <energizer> ewwegweg: and then try to extend or change the code a little bit, to do a little extra
[13:12:43] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[13:12:54] <energizer> flower_: slots=True should be enough on its own
[13:12:57] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:12:58] <flower_> I want a simple immutable, efficient dataclass
[13:13:17] <energizer> yes that looks good. but some of those values are default
[13:13:24] <llanhmod> oh yeah, for example, if I follow a video tutorial and the author doesn't include test, then I would watch again and attempt to build in a TDD way.
[13:13:31] <flower_> energizer, ok. And it's also possible to set it True for individual variables?
[13:14:02] <llanhmod> energizer: ewwegweg: sorry to chime in randomly.
[13:14:07] <energizer> flower_: i dont think so
[13:14:35] <flower_> energizer, I thought I saw that on a presenation on youtube
[13:14:35] *** Joins: raxor2k (~raxor2k@78.158.250.147)
[13:14:43] * llanhmod realizes I haven't watched a video tutorial in a while...
[13:14:46] <raxor2k> why would someone use "normal" sqlalchemy and not async sqlalchemy?
[13:14:54] <han-solo> sn_fk_n: https://bpa.st/UM3A
[13:14:59] <energizer> flower_: https://docs.python.org/3/library/dataclasses.html#dataclasses.field
[13:15:00] <llanhmod> well, today I did...but that was for Javascript
[13:15:05] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:35] <energizer> raxor2k: if i'm not using async i wouldn't use async libraries
[13:15:52] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:16:14] *** Joins: RiFo (~RiFo@user/rifo)
[13:16:58] *** Joins: onichomp (~onichomp@2806:264:4408:285:fcd1:3cb2:16f2:78ce)
[13:17:38] <sn_fk_n> han-solo, yes but you have to initialise the dataclass first there
[13:18:08] <energizer> no you dont
[13:18:12] *** Quits: onichomp (~onichomp@2806:264:4408:285:fcd1:3cb2:16f2:78ce) (Read error: Connection reset by peer)
[13:18:23] <energizer> fields(cls) works fine
[13:18:44] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[13:18:50] *** Joins: onichomp (~onichomp@2806:264:4408:285:fcd1:3cb2:16f2:78ce)
[13:18:50] <sn_fk_n> yeah I just found that one
[13:19:44] <sn_fk_n> the word 'field' has ceased to mean anything for me
[13:19:51] *** Joins: fivegruel (~fivegruel@HSI-KBW-109-192-195-167.hsi6.kabel-badenwuerttemberg.de)
[13:20:20] <zitter> Good morning, a question: is there a tool to expose IOT signals (fingerprint, NFC, whatever) via Server Side Events?
[13:20:25] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:21:06] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[13:21:08] <zitter> i.e. put my finger on device > Python sends a SSE?
[13:21:30] *** Quits: kmh (~kmh@2a00:6020:5004:6800:2584:d164:c7ec:fe17) (Quit: Leaving)
[13:21:37] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Client Quit)
[13:21:47] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[13:22:15] <flower_> energizer, https://youtu.be/T-TwcmT6Rcw?t=2043
[13:22:41] <sn_fk_n> https://bpa.st/5GKQ
[13:22:47] <sn_fk_n> there it is
[13:22:57] <sn_fk_n> Works fine I think, thanks everyone : )
[13:23:03] <energizer> flower_: wrong timestamp?
[13:23:28] <flower_> energizer, minute 34
[13:24:14] <raxor2k> energizer: why?
[13:24:17] <energizer> flower_: if you have slots, you can't have other fields that aren't slots
[13:24:29] <han-solo> sn_fk_n: does it work ? maybe you need that list to be a `set`
[13:24:39] <flower_> energizer, ok, good to know
[13:24:44] <han-solo> `fields = {field.name for field in dataclass...}`
[13:25:00] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:25:03] <energizer> raxor2k: async libraries don't work without an event loop
[13:25:46] <han-solo> sn_fk_n: oh no, it works :O
[13:26:03] <sn_fk_n> ran in the example at least :)
[13:26:08] <flower_> energizer, bit of confusion on the internet about the speed of namedtuples vs dataclasses. Comparisons on the internet seems to hint towards dataclasses, but in this presentation it's mentioned that namedtuples are faster for immutable data etc.
[13:26:38] <energizer> flower_: he is the author of namedtuples, ignore him
[13:26:38] <han-solo> sn_fk_n: yeah, dict_keys works
[13:26:51] <han-solo> i was trying `[1,2] ^ {1}`
[13:27:03] <energizer> flower_: or i should say, he may be biased
[13:27:26] <flower_> energizer, ha, that's a bold statement. He probably knows where he is talking about...
[13:28:29] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[13:28:43] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[13:29:07] <energizer> flower_: this is micro-optimization. i wouldn't worry about it until you need to, and then you'll have to benchmark on your specific data and code paths
[13:29:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[13:29:39] <energizer> on realistic workloads, on the real hardware, etc
[13:29:44] *** Joins: crashrep (~crashrep@user/crashrep)
[13:30:10] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[13:30:16] <flower_> energizer, I see, then dataclass has a nicer syntax
[13:30:25] <energizer> yes
[13:30:53] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:31:04] *** Joins: justm33_ (~Username@82-171-85-246.fixed.kpn.net)
[13:31:38] *** Quits: KvL (~KvL@user/KvL) (Read error: Connection reset by peer)
[13:32:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:32:37] *** Quits: justm33 (~Username@82-171-85-246.fixed.kpn.net) (Ping timeout: 240 seconds)
[13:32:53] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[13:33:16] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[13:33:19] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:33:28] *** Parts: adhawkins (~adhawkins@user/adhawkins) (The Lounge - https://thelounge.chat)
[13:34:52] *** Joins: onichomp666 (~onichomp@177.231.44.9)
[13:35:33] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[13:35:35] *** Joins: betuxy75 (~betuxy@dynamic-089-204-138-254.89.204.138.pool.telefonica.de)
[13:35:50] <energizer> flower_: he's honestly being really obnoxious
[13:36:21] <energizer> https://youtu.be/T-TwcmT6Rcw?t=595 "This might be the first time all the pieces were put together"
[13:36:22] *** Quits: onichomp (~onichomp@2806:264:4408:285:fcd1:3cb2:16f2:78ce) (Ping timeout: 250 seconds)
[13:36:22] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[13:36:25] <energizer> jesus christ
[13:36:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[13:36:57] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:37:06] <flower_> he has a attitude indeed
[13:37:18] *** Joins: KvL (~KvL@user/KvL)
[13:37:31] <energizer> dataclasses is a straight-up copy of attrs with a few features removed
[13:37:36] <flower_> but that's totally beside the point
[13:37:54] <energizer> "the first time" my ass
[13:38:48] <energizer> i dont understand why he's doing hynek like that, it's really bizarre
[13:38:57] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:39:04] <han-solo> what did they say ?
[13:39:11] <energizer> i linked it
[13:39:22] <han-solo> ah, youtube
[13:39:26] <flower_> slots and default values, is that possible?
[13:39:33] <energizer> try it flower_
[13:39:49] <flower_> energizer, seems to work ok
[13:40:12] *** martti is now known as mar77i
[13:40:17] <flower_> if default values are initialized values
[13:40:22] *** Joins: george91 (~Adium@103.137.204.24)
[13:41:04] <energizer> the (true) history is https://hynek.me/articles/import-attrs/
[13:42:52] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:21] *** Joins: SGautam (uid286066@id-286066.ilkley.irccloud.com)
[13:43:36] *** Joins: Xat` (~Xat`@ns300217.ip-91-121-29.eu)
[13:44:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:44:35] *** Joins: cheater (~Username@user/cheater)
[13:47:49] *** Quits: Xat` (~Xat`@ns300217.ip-91-121-29.eu) (Client Quit)
[13:48:17] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0d8-5.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:48:26] *** Joins: Xat` (~Xat`@ns300217.ip-91-121-29.eu)
[13:48:50] <flower_> energizer, yeah open source community can be very harsh on people now and then. You make things happen, give your life for it and then you encounter a hostile fork. I've seen that happen. It can be painful.
[13:49:01] *** Quits: vaio (~gary@user/ghost) (Remote host closed the connection)
[13:49:13] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:49:25] *** Joins: vaio (~gary@user/ghost)
[13:49:42] *** Joins: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi)
[13:50:13] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[13:51:47] <flower_> energizer, but yeah, I use dataclasses cause I try to avoid using external libraries.
[13:51:48] *** Joins: iob (~iob@nat1.prg.suse.com)
[13:51:57] * flower_ quite a newbie though
[13:52:01] *** Joins: ld__ (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[13:52:13] *** Joins: hightower2 (~hightower@95.168.116.2)
[13:52:18] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:53:27] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[13:53:31] <energizer> flower_: i think there's a significant difference in complexity between 0 dependences and 1-or-more dependencies. so if you're at 0, it makes sense to use the stdlib where you can
[13:53:39] *** Quits: hightower2 (~hightower@95.168.116.2) (Read error: Connection reset by peer)
[13:53:47] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:53:51] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[13:54:39] *** Joins: hightower2 (~hightower@212.15.178.1)
[13:55:06] <energizer> once you get beyond that, use poetry for dep management and only depend on libraries that are conservative about breaking changes
[13:57:25] <vanessa> what is a hostile fork, flower_ ?
[13:57:49] *** Quits: DnzAtWrk (~DnzAtWrk@1408.pc.puv.fi) (Ping timeout: 256 seconds)
[13:58:03] <Swayze> https://www.quora.com/What-is-Pythons-biggest-disadvantage
[13:58:07] <Swayze> hectic ...
[13:58:16] *** Joins: magla (~gelignite@55d475f4.access.ecotel.net)
[13:58:41] <vanessa> flower_: if you do not want your code to be forked then don't use GNU, Apache, MIT or friends.
[13:59:17] *** Quits: esther (~esther@24-155-112-236.dyn.grandenetworks.net) (Ping timeout: 240 seconds)
[13:59:30] <energizer> in a well functioning community you don't have to rely on the law to enforce friendly behavior
[13:59:55] <Swayze> "The library hell of Perl, the cross-platform gotchas of Java, and the thread-scheduling abyss of all virtual machines everywhere, together at last."
[13:59:57] <energizer> and anyway it's not a fork
[14:00:12] *** Quits: ld__ (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Quit: Leaving)
[14:00:59] *** Quits: betuxy75 (~betuxy@dynamic-089-204-138-254.89.204.138.pool.telefonica.de) (Quit: Connection closed)
[14:01:08] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[14:01:29] <energizer> cross-platform gotchas?
[14:01:35] *** Joins: betuxy69 (~betuxy@dynamic-089-204-138-254.89.204.138.pool.telefonica.de)
[14:01:52] <vanessa> if the community can take my code, fork it and make it so good that no one is willing to use my code and use the fork instead, I think there is nothing wrong with that. it is for the community.I can keep my code and be happy with or use the community fork.
[14:02:27] *** Joins: hoijui (~hoijui@2001:16b8:5cec:8600:fa6f:ff29:3923:be2)
[14:03:03] *** Quits: bzyx_ (~quassel@89-69-20-238.dynamic.chello.pl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:03:06] <energizer> that's not what happened here. they took attrs, removed some useful features, added it into the stdlib and denied they got the idea from attrs
[14:03:42] <energizer> like, it's a strict subset of an existing library
[14:04:38] <hoijui> I have a list (parsed from a yaml file). `len(mylist)` returns 4. mylist[0] returns the first element, mylist[1] returns THE THIRD element, mylist[2] gives `IndexError: list index out of range`. what's going on here?
[14:04:51] <vanessa> energizer: the 'useful' features were probably not useful enough, otherwise who would use the less-useful fork?
[14:05:14] <energizer> it's in the standard library, so a lot of people
[14:05:51] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[14:06:04] <hoijui> print(mylist) shows 4 elements (which is correct)
[14:06:29] <energizer> hoijui: can you show that output in a pastebin
[14:06:40] <hoijui> jup...
[14:06:44] *** Quits: KvL (~KvL@user/KvL) (Quit: KvL)
[14:06:53] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 256 seconds)
[14:06:59] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Remote host closed the connection)
[14:07:00] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:07:28] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[14:07:52] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[14:08:19] <rendar> how is it called the asyncio abstraction object of a stream that abstracts sockets, pipes, stdin/stdout and so on? asyncio.StreamReader?
[14:09:08] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[14:09:20] *** Joins: ice9 (~ice9@user/ice9)
[14:11:24] <hoijui> energizer: https://termbin.com/qkld
[14:11:28] *** Quits: betuxy69 (~betuxy@dynamic-089-204-138-254.89.204.138.pool.telefonica.de) (Ping timeout: 250 seconds)
[14:11:47] *** Quits: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c) (Quit: Leaving)
[14:11:49] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:12:49] <energizer> hoijui: https://bpa.st/FUQQ looks ok to me
[14:13:37] <hoijui> yeah, same ot me, but when parsed form yaml, ....
[14:13:43] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[14:13:52] <energizer> show that output from the repl
[14:14:02] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[14:14:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[14:14:26] <hoijui> mm... output of what exactly?
[14:14:38] <george91> hoijui: might help sharing snippet of your code
[14:14:55] <energizer> hoijui: you claimed  mylist[2] gives `IndexError: list index out of range`. show that
[14:15:00] <hoijui> yeah.. I first have ot make a minimal version, and anonymize all hte data
[14:15:02] <energizer> copy from the repl
[14:15:22] <energizer> ok i'm gonna go in a sec. not sure who else is answering questions atm
[14:15:33] <hoijui> ok.. thanks anyway! :-)
[14:16:00] <hoijui> ah. chekcing if its realy a list...
[14:16:42] *** Joins: michagogo (uid14316@user/michagogo)
[14:16:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:17:02] <hoijui> yep, type(mylist) returns "<class 'list'>"
[14:17:37] *** Quits: toxictrash (~toxictras@host-91-237-158-49.anfa.net.pl) (Quit: leaving)
[14:18:10] <hoijui> when iterating over hte list, there is no error, but it iterates only over elements 0 and 2, skipping 1 and 3
[14:18:24] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[14:18:31] <bjs> rendar: yes the abstraction is called streams https://docs.python.org/3/library/asyncio-stream.html
[14:18:36] <rendar> bjs, thanks
[14:18:49] <rendar> usually i shouldn't await for writing into streams, right?
[14:18:55] <Repiphany> hoijui: You need to post actual code if you want help pinpointing any errors
[14:18:56] <rendar> i only enqueue the buffer
[14:19:08] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[14:19:10] <bjs> rendar: what do you mean?
[14:20:05] <george91> Rephiphany: I agree
[14:20:31] *** Joins: kmh (~kmh@2a00:6020:5004:6800:2087:70fd:6ded:c415)
[14:20:33] <rendar> bjs, i mean that, using epoll for instance, you can write to a socket and the operation is immediate (if the socket is non-blocking), as you're writing into socket buffer.. when the buffer is full, async libs such as libuv or similar enqueue what you want to write to a linked list buffers, which will be written to the socket buffer once the operating system says that socket is writable again (the kernel buffer has space)
[14:20:34] <hoijui> yeha, will do Repiphany.. if I got it minimized.. sorry!
[14:20:53] <rendar> bjs, in such cases writing operations are always non-blocking, so it doesn't make sense await on them
[14:21:10] <hoijui> I just saw, that when iterating, len(mylist) decreases by 1 on each iteration
[14:21:31] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[14:21:58] <bjs> hoijui: are you removing elements while iterating over the list?
[14:22:18] <hoijui> yep :D
[14:22:23] <bjs> hoijui: well, don't do that
[14:22:24] <bjs> :P
[14:22:28] <hoijui> :D
[14:22:42] <hoijui> sorry for wasting your time!
[14:23:02] <Ashburry> do functions have an type ?
[14:23:31] <grawity> yes
[14:23:31] <bjs> Ashburry: well yes, functions are objects and are instances of the "function" type.
[14:23:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:23:52] <grawity> though not all callable objects are necessarily functions
[14:24:07] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:24:31] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[14:24:55] *** Joins: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d)
[14:25:05] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[14:25:17] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[14:25:55] <george91> Any tips on how you structure your Flask projects?
[14:25:59] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[14:25:59] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[14:26:12] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[14:26:18] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:26:37] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:26:50] <Ashburry> what type is lambda ?
[14:26:59] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Remote host closed the connection)
[14:27:00] <bjs> rendar: in asyncio transports (and StreamWriter.write) are just normal defs so you don't await.  There is StreamWriter.drain which you can await to make sure the buffer is drained
[14:27:03] <bjs> Ashburry: it's a function.
[14:27:04] *** Quits: hoijui (~hoijui@2001:16b8:5cec:8600:fa6f:ff29:3923:be2) (Quit: Leaving)
[14:27:15] <rendar> bjs, what i mean is that asyncio.StramerRead has a coroutine in read() while StreamerWrite hasn't for write()
[14:27:17] <bjs> Ashburry: you can print(type(something)) to print what class something is an instance of in Python
[14:27:27] <Ashburry> oh ok
[14:27:28] <rendar> you can write() indefintedly
[14:27:33] <Ashburry> thank you very much
[14:27:39] <bjs> rendar: what do you mean "you can write() indefinitely"
[14:27:50] <rendar> bjs, what write() function will never block!
[14:27:56] <bjs> rendar: what?
[14:28:07] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[14:28:17] <rendar> bjs, if you call write(), it will return immediately, won't be a blocking function!
[14:28:23] <bjs> rendar: yes.
[14:28:27] <bjs> what is the question?
[14:28:34] <rendar> the question is:
[14:29:01] *** Joins: fef (~thedawn@user/thedawn)
[14:29:05] <han-solo> george91: https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xv-a-better-application-structure # i used to follow something like that
[14:29:11] <rendar> given this fact, i should design my app accordingly, e.g. every out() function shouldn't be async
[14:29:20] <rendar> just a normal function calling write()
[14:29:30] *** Quits: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d) (Client Quit)
[14:30:35] <bjs> rendar: I mean it's up to you,  like I said StreamWriter has two methods
[14:30:40] <bjs> one that is async and one that is not.
[14:30:51] <bjs> You really should use both in combination (but how you combine them is up to you).
[14:31:46] <rendar> bjs, yes, let's say my application receives commands (in JSON) and must replies to these commands always in JSON, once the done() callback is called, it can just write the JSON text using write(), no reason to await drain(), right?
[14:32:03] <supakeen> as bjs says, that depends on what you want to achieve
[14:32:33] <rendar> well
[14:32:48] <rendar> the application should only tell command response in JSON, why it should await drain?
[14:33:00] <george91> han-solo: thank you! this is awesome
[14:33:22] <bjs> rendar: you can write() and write() and write() forever but eventually it won't be able to immediately send it and it'll have to buffer but with no awaits anywhere nothing will happen.  Eventually you're going to want to drain().
[14:33:30] <han-solo> you could also checkout their https://github.com/miguelgrinberg/microblog-api if rest
[14:33:46] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[14:34:01] <rendar> bjs, so the write may not happen if i don't await drain() ?
[14:34:27] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[14:34:37] *** Quits: wmmh (~wh@145.255.67.147) (Ping timeout: 240 seconds)
[14:35:10] <supakeen> it might not be done
[14:35:30] <rendar> hmm
[14:36:01] <supakeen> as in when you do `write(b"foo"); somethingelse()` if buffers are full etc then the write might not be done by the time you call `somethingelse`.
[14:36:04] <rendar> so what would be a good approach? having out() as a coroutine, and do write(json)+await drain() at ever command response?
[14:36:05] <supakeen> sometimes that doesn't matter
[14:36:07] <george91> han-solo: thanks again. this is really helpful resources
[14:36:08] <supakeen> sometimes it does :)
[14:36:26] <rendar> supakeen, oh, but i don't care of that
[14:36:28] <supakeen> i tend to do that because for me it makes it easier to reason that the data has been put on the line or at least in the OS buffers
[14:36:49] <rendar> supakeen, the important thing is that "foo" is not splitted, i mean, that writing "foo" is atomic
[14:37:06] <supakeen> what do you mean with that because that's generally nor really guaranteeD? :)
[14:37:08] <rendar> so every write(json) is atomic, it's writing a piece of json and it doesn't mix them up
[14:37:18] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:37:41] <rendar> write(json1) ... write(json2) <- i don't want these 2 strings (even if very big) mixes, of course
[14:37:47] <rendar> otherwise json structure would break
[14:38:07] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:38:44] <supakeen> of course, if you are using TCP then that will be guaranteed
[14:38:50] *** Quits: onichomp666 (~onichomp@177.231.44.9) (Read error: Connection reset by peer)
[14:38:54] <Ashburry> Are these two lines correct. I have the top line in the class definition and the next in a create_data method
[14:38:55] <Ashburry> state: Dict[XsSocket, Dict[str, str | int | get_face_nicknet]] = dict()
[14:38:55] <Ashburry>     cls.state[client_socket]['face_nicknet'] = lambda: cls.get_face_nicknet(client_socket)
[14:39:11] <rendar> supakeen, i think that syscalls guarantee that, and not the underlying protocol
[14:40:05] <supakeen> rendar: it's guaranteed to go into the buffers in the order that write is called, how the receiving side sees it is guaranteed by the underlying protocol in use
[14:41:10] <supakeen> but this point isn't really relevant anymore, it's up to you if you want to await drain in your `out` function or not :)
[14:41:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646) (Read error: Connection reset by peer)
[14:42:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:42:56] *** Joins: nomic (~nomic@185.198.243.163)
[14:43:02] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646)
[14:43:17] <jinsun> Ashburry: don't mix type annotations styles, if you can use new style anntations use them always, so use dict instead of Dict
[14:44:32] <jinsun> Ashburry: and that get_face_nicknet in the annotation doesn't look right, what is it?
[14:44:40] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[14:44:54] *** Joins: wmmh (~wh@5.36.97.32)
[14:44:56] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[14:44:57] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 240 seconds)
[14:45:00] <rendar> supakeen, yes indeed
[14:45:15] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 256 seconds)
[14:46:03] <jinsun> Ashburry: also if you have a fixed set of keys and you know the exact type of each key, then a class or TypedDict will be better than dict with a Union of huge set of types
[14:46:22] <rendar> supakeen, so, if i'm writing json responses, i don't care the order of these responses for the receiver, i can call a lot of write()s without do drain() after every write(), right?
[14:46:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[14:47:53] <supakeen> if you wish, yes
[14:47:55] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[14:49:24] <rendar> supakeen, i can also never call drain()?
[14:49:35] <supakeen> sure
[14:49:52] <rendar> supakeen, are you sure?
[14:49:55] <supakeen> i am sure, yes
[14:50:40] <rendar> supakeen, so basically i call drain() if i want to ensure write() orders, like a barrier
[14:50:44] <supakeen> no
[14:50:52] <rendar> then why?
[14:50:54] <supakeen> you call drain when you want to ensure that all application data has been given to the kernel
[14:51:05] <rendar> ok, that's right
[14:51:13] <rendar> and when is that the case, for instance?
[14:51:25] <supakeen> when you are expecting to write faster than the kernel can take and send out data
[14:51:35] <supakeen> because in that case your application buffers might keep growing
[14:51:49] *** Joins: ali1234 (~al@user/ali1234)
[14:52:07] <rendar> ok, right
[14:52:14] <rendar> so basically when you wanna flush
[14:52:26] <supakeen> so generally it is smart to, at least, periodically ensure that your application buffers have been handed off
[14:52:34] <supakeen> but it's not a law
[14:52:48] <rendar> right, right
[14:53:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f) (Ping timeout: 252 seconds)
[14:53:21] <rendar> also, what i want to be sure is: never calling drain() won't starve the receiver, right? data is still sent
[14:53:56] <supakeen> data is still being sent :)
[14:54:00] <rendar> ok
[14:54:22] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 250 seconds)
[14:54:33] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f)
[14:54:41] <supakeen> tl;dr calling StreamWriter.write copies the data to some application buffer and tells the event loop to copy that data to a certain fd, the event loop on every iteration will check if that fd is ready and then call write on it as many times as it can
[14:54:45] <supakeen> without you doing anything else
[14:56:25] <rendar> yes, that's exactly what i said before
[14:56:29] <supakeen> if an error occurs on that second step then you'll (probably, not entirely familiar with asyncio) receive that error on your next call to write
[14:56:43] <supakeen> how you then handle that is up to the protocol you're implementing
[14:57:02] <rendar> yes, indeed
[14:57:39] *** Quits: deutor (~quassel@176.221.113.10) (Quit: No Ping reply in 180 seconds.)
[14:58:44] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:58:52] *** Joins: deutor (~quassel@82.177.4.226)
[14:59:11] <supakeen> like if i read this then pumping data to the other side as fast as your system can is usually a recipe for disaster if you need to backtrack
[14:59:25] <supakeen> but i don't know if you actually speak a protocol or are just sending json in a tcp stream
[15:00:21] <rendar> sending json in a tcp stream (ssh)
[15:02:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:02:44] *** Quits: Byteflux (~byte@byteflux.net) (Read error: Connection reset by peer)
[15:02:59] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:03:01] *** Joins: Byteflux (~byte@byteflux.net)
[15:03:02] *** Joins: paul424 (~tom@ip-5-172-235-55.multi.internet.cyfrowypolsat.pl)
[15:04:12] <rendar> supakeen, yes i see your point, but even having try: write(json) await drain() except: ... < this is the same, since you can't write to the socket, you can write it there was an error writing to it! :)
[15:04:35] <supakeen> this is just a general difficult thing in networking
[15:04:43] <supakeen> the write that actually fails won't tell you, it's the next one
[15:04:58] <supakeen> (depending, etc)
[15:05:26] <rendar> yes
[15:06:04] <rendar> supakeen, since my application is *very* simple, it has only to start processes in local (pipes/sockets) and in remote (ssh/tcp) and run some commands and give the result...
[15:06:21] <rendar> i think that calling drain() once in a while could be good
[15:06:23] <rendar> what you think?
[15:06:28] <supakeen> likely so, yes
[15:07:08] <supakeen> honestly if it was me i'd just do HTTP requests so all my problems are solved and there's an absolute plethora of tools to deal and debug it
[15:07:12] <supakeen> but i get the fun in building your own
[15:07:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:09:38] <rendar> http requests? but you have to implement an http server...
[15:10:21] <supakeen> luckily only a few million of those exist :)
[15:10:25] <supakeen> anyways -> lunch
[15:10:52] <rendar> lol
[15:10:53] <rendar> ok
[15:12:32] *** Joins: ggnoredo (~user@212.98.236.50)
[15:13:13] *** Quits: crashrep (~crashrep@user/crashrep) (Remote host closed the connection)
[15:13:28] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[15:13:34] *** Joins: Akuw (~kenny@2800:150:118:156e:1f71:16d7:401b:a43d)
[15:13:52] *** Joins: crashrep (~crashrep@user/crashrep)
[15:14:34] *** Joins: nyah (~nyah@94.6.71.219)
[15:16:54] *** Quits: pycode (~pycode3@2001:b07:5d28:551:315c:bebc:98b4:e90a) (Ping timeout: 250 seconds)
[15:20:50] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:21:20] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[15:22:43] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f) (Ping timeout: 250 seconds)
[15:23:32] *** Joins: fef (~thedawn@user/thedawn)
[15:26:03] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[15:26:03] *** Quits: lbalhar (~lbalhar@93.185.13.26) (Ping timeout: 256 seconds)
[15:28:13] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[15:28:54] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f)
[15:29:10] *** Joins: pvergain (~Thunderbi@2a01:e0a:223:690:51a4:6cf3:cb85:6c23)
[15:29:46] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[15:29:56] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[15:31:03] *** Quits: palasso (~palasso@user/palasso) (Read error: Connection reset by peer)
[15:31:10] *** Joins: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d)
[15:32:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:32:54] *** Joins: palasso (~palasso@user/palasso)
[15:33:00] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:33:13] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[15:33:16] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[15:33:37] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[15:33:53] <VaniaPy> I'm trying to extract some data from a cv and append them to a list and then create a function that returns a new csv with those data but i'm getting   writer.writerow(self.extract_data())
[15:33:54] <VaniaPy> _csv.Error: iterable expected, not NoneType
[15:34:03] <VaniaPy> here's the code https://bpa.st/2SCQ
[15:34:23] *** Joins: cdown (~cdown@163.114.131.1)
[15:34:27] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:34:52] <Repiphany> VaniaPy: extract_data doesn't return anything
[15:35:47] <VaniaPy> Repiphany i know,but even when it was returning i had the same issue
[15:35:55] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:21] <Repiphany> printing inside a function doesn't magically make whatever was printed available to the caller
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:37] *** Joins: unknown__ (~thedawn@user/thedawn)
[15:37:23] <Ashburry> How can I check if a string is a float? '123.001'.isdigit() does not work!
[15:37:46] <jinsun> VaniaPy: well what were you returning, you'll have the same problem if you return None
[15:37:48] <Repiphany> `try: float(your_string); except ...`
[15:37:53] <Ashburry> do I have to split it?
[15:37:57] *** Quits: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d) (Quit: WeeChat 3.4)
[15:38:00] <Ashburry> oh ok
[15:38:08] *** Joins: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d)
[15:38:28] <Ashburry> ty
[15:38:34] *** Quits: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d) (Client Quit)
[15:38:45] *** Joins: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d)
[15:38:49] <supakeen> (the except part would be a `ValueError`) :)
[15:39:23] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[15:41:12] *** Joins: Klinda (~superleag@user/klinda)
[15:44:04] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[15:44:32] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:45:24] <VaniaPy> on the other hand when i'm trying the same with islice() it iterates only over the first entry https://bpa.st/MANQ
[15:45:25] <VaniaPy> hmm
[15:45:26] *** Joins: LimeOn (~user@user/limeon)
[15:45:52] <Repiphany> A function can only return once
[15:46:09] <Repiphany> You can use `yield` instead and it will keep going through the loop
[15:47:09] <Repiphany> Then you'd change lines 20-22 to `writer = csv.writer(file); for line in self.extract_data(): writer.writerow(line)` or whatever
[15:48:24] <Repiphany> Except you're just returning the whole self.customers list every time instead of each individual entry you want to write as a row
[15:48:49] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:49:43] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:50:29] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Remote host closed the connection)
[15:51:24] *** Joins: ham5urg_ (~ham5urg@p200300d16727b7007c38da45f8691afd.dip0.t-ipconnect.de)
[15:51:42] *** ham5urg_ is now known as ham5urg
[15:51:43] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:52:17] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 256 seconds)
[15:52:26] *** Quits: sreve (~quassel@p4ff44df5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:53:17] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:53:46] *** Joins: sreve (~quassel@p4ff44df5.dip0.t-ipconnect.de)
[15:53:48] *** Quits: CBTEnjoyer (~CBTEnjoye@86.99.40.152) (Quit: CBTEnjoyer)
[15:53:49] *** Quits: shad (~shad@user/shad) (Ping timeout: 256 seconds)
[15:53:49] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:53:59] <VaniaPy> Repiphany yeah,i think it's most appropriate to return the whole self.customers since i need the first 1000 entries from the csv
[15:54:05] *** Joins: manti7 (~manti7@176.10.104.94)
[15:54:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:54:23] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[15:54:37] *** Quits: wmmh (~wh@5.36.97.32) (Ping timeout: 240 seconds)
[15:54:59] <Repiphany> Your return should be outside of the loop
[15:55:12] *** Joins: lbalhar (~lbalhar@188-175-36-239.client.rionet.cz)
[15:55:31] <ham5urg> Are people still using underscores for private vars and methods?
[15:56:16] *** Joins: Techcable (~Techcable@168.235.93.147)
[15:56:58] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[15:57:17] *** Joins: mickey8 (~user@user/mickey)
[15:57:25] <VaniaPy> ok
[15:57:26] <han-solo> what's the new way ?
[15:57:27] <VaniaPy> thanks
[15:57:58] <Yhg1s> ham5urg: that's still the thing to use to denote they're private, yes.
[15:58:06] <ham5urg> ok
[15:59:29] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[16:00:23] *** Joins: Atque (~Atque@user/atque)
[16:01:28] *** jazzy2 is now known as jazzy
[16:02:53] <Ashburry> Anyone know how to ge the duration() of seconds?
[16:03:18] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[16:03:36] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:04:24] <han-solo> Ashburry: what does `duration()` do ?
[16:05:25] <Ashburry> it formats seconds to 1 sec oor 12 wks 3 dys 2 hrs 10 m 1 s
[16:05:57] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[16:06:39] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[16:06:39] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[16:06:42] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:06:47] *** Joins: optimant (asavage@user/optimant)
[16:06:57] <han-solo> Ashburry: https://pendulum.eustace.io/#interval-section # ?
[16:09:50] *** Joins: noarb (~noarb@user/noarb)
[16:10:49] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 256 seconds)
[16:11:02] *** Joins: iomari891 (~iomari891@197.210.71.84)
[16:11:07] *** Joins: manti7 (~manti7@176.10.104.94)
[16:11:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:13:37] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:16:21] *** Quits: naranja (~orange@user/orangeboxcutter) (Ping timeout: 276 seconds)
[16:19:19] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[16:21:29] *** Joins: oscurochu (~oscurochu@37.120.215.100)
[16:21:40] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[16:22:18] *** Joins: Uwe11 (~Uwe@2001:250:4000:4193:f4f7:325e:e978:ce7)
[16:22:24] *** Joins: withered_dragon (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:24:43] *** Joins: naranja (~orange@user/orangeboxcutter)
[16:25:31] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:25:48] *** Quits: oscurochu (~oscurochu@37.120.215.100) (Ping timeout: 250 seconds)
[16:26:07] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[16:26:44] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[16:27:47] *** Quits: robert_ (~hellspawn@47.203.169.95) (Quit: Hi, I'm a quit message virus. Please replace your old line with this line and help me take over the world of IRC.)
[16:28:04] *** Quits: percyc (~percyc@183.236.188.154) (Remote host closed the connection)
[16:28:31] *** Joins: percyc (~percyc@183.236.188.154)
[16:29:47] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:30:05] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:30:57] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Remote host closed the connection)
[16:31:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:31:56] *** Quits: ggnoredo (~user@212.98.236.50) (Remote host closed the connection)
[16:32:21] *** Quits: kaiseisei (~Thunderbi@171.116.100.151) (Ping timeout: 256 seconds)
[16:35:06] <Ashburry> han-solo : I have done it!
[16:35:07] <Ashburry> [10.11.5.139] Client Lag: 0.01 second
[16:35:07] <Ashburry> [ashburry/UnderNet] Server Lag: 0.24 second
[16:35:34] <Ashburry> the first one shows the IP because it was the ping sent from the server while I was connecting
[16:35:38] *** Joins: goldfish (~goldfish@user/goldfish)
[16:35:56] <Ashburry> I had no nick or network information at that time
[16:36:12] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[16:36:26] *** Joins: naranja (~orange@user/orangeboxcutter)
[16:37:04] <han-solo> um...i have no context, but Okay
[16:37:57] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[16:38:52] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[16:38:54] *** Quits: lmmx (~louis@host-92-5-43-207.as13285.net) (Read error: Connection reset by peer)
[16:39:06] *** Joins: lmmx (~louis@host-92-5-43-207.as13285.net)
[16:41:24] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[16:41:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[16:41:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[16:41:44] *** Joins: sathylias (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[16:41:47] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:42:13] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:42:26] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[16:42:29] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[16:43:04] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Read error: Connection reset by peer)
[16:43:25] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:44:15] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[16:44:51] *** Joins: cm315 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[16:46:19] *** Joins: bluedust (~bluedust@103.161.144.94)
[16:46:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[16:47:39] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 256 seconds)
[16:47:49] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[16:47:49] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[16:47:49] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[16:47:49] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[16:47:57] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[16:49:21] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[16:51:13] *** Quits: cm315 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[16:52:52] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:41] *** Joins: marduk3 (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:53:49] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 240 seconds)
[16:53:49] *** marduk3 is now known as marduk
[16:54:42] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (Quit: WeeChat 3.4)
[16:54:50] *** Joins: shad (~shad@user/shad)
[16:54:58] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[16:56:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:56:24] *** Joins: omegatron (~some@p5484973e.dip0.t-ipconnect.de)
[16:56:37] *** Joins: Kruppt (~Kruppt@50.111.29.57)
[16:58:15] *** Joins: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de)
[16:58:15] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[16:58:15] *** Quits: menace (~someone@ppp-93-104-175-249.dynamic.mnet-online.de) (Changing host)
[16:58:15] *** Joins: menace (~someone@user/menace)
[16:58:16] *** Joins: jay-m1261 (~jay-m@41.205.30.141)
[16:58:23] *** menace is now known as Deknos
[16:59:20] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[16:59:29] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[17:00:28] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[17:01:54] <nomic> can someone pls explain this (python interqctive shell)
[17:01:55] <nomic> >>> "\\".join(["0","0"])
[17:01:55] <nomic> '0\\0'
[17:01:55] <nomic> >>> print("\\".join(["0","0"]))
[17:01:55] <nomic> 0\0
[17:01:55] <nomic> >>>
[17:01:56] *** litharge sets mode: +q $a:nomic
[17:02:12] *** Joins: Naan` (~Naan@user/naan)
[17:02:27] *** litharge sets mode: -q $a:nomic
[17:02:31] <nomic> WHY IS THAT
[17:02:56] <supakeen> One prints the 'repr', AKA something you can paste into the repl or a source file to get the same result. The other prints the string which does not have that property.
[17:03:04] *** Joins: rsx (~dummy@ppp-188-174-158-99.dynamic.mnet-online.de)
[17:03:26] <supakeen> e.g. pasting "0\0" into your repl will get you something else from "0\\0" :)
[17:03:45] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[17:03:55] *** Quits: arooni (~arooni@li1062-244.members.linode.com) (Ping timeout: 250 seconds)
[17:03:58] <nomic> 'repl'?
[17:04:09] <supakeen> The Python interactive shell, but the same goes for source files.
[17:04:24] <grym> Read Eval Print Loop
[17:04:27] <supakeen> REPL is a Read-Eval-Print-Loop and a common name for the Python shell :)
[17:04:33] <grym> does what it says on the tin ;)
[17:04:50] *** Quits: vanessa (~annada@103.160.128.7) (Quit: WeeChat 3.4)
[17:04:51] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[17:05:57] <nomic> ok
[17:06:41] <supakeen> And since I need to get rid of some more lingo, repr is an abbreviation of representation and in Python that tends to mean a literal that can be put in a file to get the same object if at all possible.
[17:06:49] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[17:07:36] *** Joins: viaSanctus (~viaSanctu@user/viasanctus)
[17:07:41] <nomic> i thought repr was some datatype or lang .. its just the shell
[17:07:42] <nomic> k
[17:07:42] *** Quits: Naan` (~Naan@user/naan) (Quit: Leaving)
[17:07:55] <xheimlich> what would be the simplest way to create a very slight superset of Python (like creating a couple of new arithmetic operators) that "compiles" to Python?
[17:08:09] <grym> nomic: repr and repl are unrelated despite sharing their first three letters
[17:08:18] *** Joins: esther (~esther@2607:fb90:5fe4:3c27:2189:9e59:d5a3:ceed)
[17:08:23] <xheimlich> Hy goes down to the AST, which seems overkill if I just want better syntax for Pipelines.
[17:08:29] *** Joins: ham5urg_ (~ham5urg@pd95eb22b.dip0.t-ipconnect.de)
[17:08:35] <grym> where else would you go
[17:08:38] *** Quits: pacbard (~pacbard@user/pacbard) (Quit: Bye)
[17:09:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:09:57] <bjs> xheimlich: it depends on which operators you want and how they fit into the current Python syntax
[17:09:59] *** Quits: ham5urg (~ham5urg@p200300d16727b7007c38da45f8691afd.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:10:02] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:10:20] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[17:10:30] <bjs> Python is not exactly the simplest language out there in terms of syntax and it's not designed to be extended like this nicely
[17:10:52] <xheimlich> grym: talking to me? I was thinking generate Python code after some mild text analysis that detects the extra keywords.
[17:10:54] *** Quits: paul424 (~tom@ip-5-172-235-55.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[17:11:07] *** Joins: pacbard (~pacbard@user/pacbard)
[17:11:11] <grym> xheimlich: yeah; that's called "manipulating the ast"
[17:11:24] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[17:11:26] <xheimlich> A singular operator may be detectable with regexes even. But I was hoping for a more extensible approaxh.
[17:11:53] <bjs> xheimlich: the extensible approach is called writing a parser and having an AST :P
[17:11:56] <xheimlich> this is a stupid example, but imagine I want to add a dataclass keyword instead of having to import a decorator etc.\
[17:12:17] *** Quits: esther (~esther@2607:fb90:5fe4:3c27:2189:9e59:d5a3:ceed) (Ping timeout: 240 seconds)
[17:12:33] <xheimlich> that's regexable I think.
[17:12:36] *** Quits: ham5urg_ (~ham5urg@pd95eb22b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:12:45] <grym> getting close to zalgo-land
[17:12:53] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[17:13:10] <bjs> xheimlich: it seems unlikely to be regexable,  you can try but if you want it to be robust and extensible the best way is to take Python's syntax and extend it
[17:13:46] <xheimlich> ok.
[17:13:53] <xheimlich> thanks everyone!
[17:14:07] <bjs> xheimlich: if this is just for your own consumption and it doesn't matter if it's perfect, then a regex might just do fine
[17:14:16] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[17:14:43] <nomic> regex aint python
[17:14:46] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[17:14:55] <sveinse> How can programmically make an instance of a frozen dataclass? part = Part(**partdata) returns TypeError: __init__() got an unexpected keyword argument 'partno', even when partno is a field of Part()
[17:15:23] <grym> sveinse: that ought to work; post code?
[17:15:32] <bjs> sveinse: why would you get an error about an unexpected keyword argument if it's a valid field
[17:15:50] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:16:08] *** Quits: xheimlich (~xheimlich@179.218.1.150) (Quit: leaving)
[17:18:25] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[17:18:48] *** Joins: arooni (~arooni@li1062-244.members.linode.com)
[17:18:49] *** Quits: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[17:18:49] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:19:07] *** Quits: george91 (~Adium@103.137.204.24) (Quit: Leaving.)
[17:19:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:20:08] *** Joins: flower_ (~debian@217-123-218-6.cable.dynamic.v4.ziggo.nl)
[17:20:31] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[17:20:41] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[17:21:35] <sveinse> grym, bjs: https://bpa.st/KEBQ
[17:22:52] <grym> sveinse: https://bpa.st/3LJA
[17:22:53] <grym> works fine
[17:22:54] <bjs> sveinse: that's not how you use dataclasses, see the examples in the docs https://docs.python.org/3/library/dataclasses.html   You need to annotate things
[17:23:07] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[17:23:08] <grym> ohh, haha forgot to actually call it
[17:23:14] <grym> where's that coffee >.>
[17:23:24] <han-solo> :D
[17:23:37] *** Joins: l4yer (~l4yer@178.239.168.223)
[17:23:50] <grym> ugrhhh why doesn't ipython have regexp-replace
[17:23:58] <sveinse> ah, ok, annotations are required. Thanks.
[17:24:10] <bjs> sveinse: "A field is defined as a class variable that has a type annotation."  without the annotation, it's not a dataclass field.
[17:24:19] <grym> so those are all just class attributes?
[17:24:24] <grym> oorgh i'd miss that bug :(
[17:24:36] <nomic> US: "record trade deficits record budget deficits"
[17:24:41] <bjs> grym: no you wouldn't, because the first time you tried to create an instance it'd go boom
[17:24:43] <grym> (because i habitually forget class attributes exist)
[17:24:45] <bjs> :P
[17:24:46] <nomic> oops wrong channel
[17:24:52] <grym> bjs: well, yeah, but i'd stare and scratch my head a bit
[17:25:01] *** Joins: rickybob (~rickybob@ip68-101-78-226.ga.at.cox.net)
[17:25:03] *** ornx is now known as ornxka
[17:25:13] *** Quits: lbalhar (~lbalhar@188-175-36-239.client.rionet.cz) (Ping timeout: 256 seconds)
[17:25:16] *** Joins: ham5urg (~ham5urg@p200300d1672f73009fb0cd90621f1f64.dip0.t-ipconnect.de)
[17:25:25] *** Joins: rickybob2 (~rickybob@gateway/vpn/pia/rickybob)
[17:26:30] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[17:27:06] *** Joins: bluedust_ (~bluedust@86.106.136.217)
[17:27:06] *** Joins: overrider (~overrider@user/overrider)
[17:27:38] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[17:28:30] <jinsun> hmm weird that even when writing field() it wants annotation
[17:29:00] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:29:03] *** Karyon_ is now known as Karyon
[17:29:30] *** Quits: rickybob (~rickybob@ip68-101-78-226.ga.at.cox.net) (Ping timeout: 250 seconds)
[17:29:35] <bjs> that's not weird, that's the entire point/design of the module. To use the annotations to discover fields for the class :P
[17:30:14] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Client Quit)
[17:30:35] <jinsun> yeah but it doesn't silently become a class attribute either, the dataclass decorator actually checks for unannotated field() and raises TypeError
[17:30:48] *** Quits: bluedust (~bluedust@103.161.144.94) (Ping timeout: 250 seconds)
[17:31:30] *** Joins: ham5urg_ (~ham5urg@pd95eb762.dip0.t-ipconnect.de)
[17:31:38] *** Joins: KvL (~KvL@user/KvL)
[17:31:47] <ham5urg_> Lost connection :/
[17:32:58] *** Quits: ham5urg (~ham5urg@p200300d1672f73009fb0cd90621f1f64.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:33:25] <sveinse> <subjective>I would wish that it would be simpler to make a field optional. `partno: str = None` makes mypy complain as the syntax is `partno: Optional[str] = None`, which is a bit too tedious for my taste.</subjective>
[17:33:56] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[17:34:15] <jinsun> partno: str = "" maybe?
[17:34:54] <sveinse> jinsun: No, the database distinguishes between None and empty '', so both are distinct and valid (in this case)
[17:35:43] <jinsun> well if both are valid then you can't just write str, str | None is the slightly better way available from 3.10
[17:35:45] <sveinse> I guess making a new typing type that is an `Optional[str]` is syntactically the simplest
[17:37:10] *** Joins: egolego (~ego@2a01:540:a3bf:9f00:4dda:3194:f1a7:1a1c)
[17:37:24] *** Joins: esv (~esv@74.124.178.154)
[17:37:40] <sveinse> jinsun: oh, indeed. That has come in 3.10. Then I'm happy and my wish has been implemented.
[17:38:23] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:39:17] *** Joins: morte_ (~user@181.209.236.50)
[17:39:45] *** Joins: bloody (~bloody@user/bloody)
[17:40:07] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[17:40:28] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[17:40:47] *** Joins: pycode (~pycode3@2001:b07:5d28:551:a34d:392f:89f5:ba2f)
[17:41:00] *** Joins: johnjaye (~pi@154.6.152.74)
[17:41:16] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[17:43:02] *** Joins: Roey (~Roey@user/Roey)
[17:43:05] *** Joins: fikran (~fikran@user/fikran)
[17:43:23] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[17:44:04] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-70-212.poda.cz) (Remote host closed the connection)
[17:44:59] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[17:45:32] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[17:46:04] <jinsun> sveinse: there is also PEP 645 which will make it even shorter if accepted, just str?
[17:47:02] <phy1729> ew no. non-None types are useful
[17:48:13] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:48:17] <phy1729> Oh I missed the ? that's reasonable
[17:48:24] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:49:44] *** Joins: kosh (~kosh@user/kosh)
[17:50:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:50:07] <jinsun> oh yeah making None valid for any type would be too bad, it will become like Java's null then
[17:50:28] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:51:36] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[17:52:06] <jinsun> https://github.com/python/typing/issues/429#issuecomment-309920425 :D
[17:52:54] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[17:53:20] *** Joins: jpic (~jpic@82.142.9.130)
[17:53:23] *** Quits: ham5urg_ (~ham5urg@pd95eb762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[17:55:09] *** Quits: Uwe11 (~Uwe@2001:250:4000:4193:f4f7:325e:e978:ce7) (Quit: Client closed)
[17:57:17] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[17:57:57] *** Quits: gusto (~Augustus@109.255.100.54) (Ping timeout: 240 seconds)
[17:58:36] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[17:58:45] *** Joins: gusto (~Augustus@109.255.100.54)
[17:59:05] *** Joins: frmlof (~frmlof@70.243.238.191)
[17:59:16] *** Parts: mefistofeles (~mefistofe@user/mefistofeles) ()
[17:59:17] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:59:46] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[18:00:24] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[18:01:37] *** Quits: vakera_pingveno (~dan@2600:1700:21f9:b150::10) (Ping timeout: 240 seconds)
[18:01:39] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:02:48] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl)
[18:04:44] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Quit: leaving)
[18:06:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[18:07:08] *** Quits: gusto (~Augustus@109.255.100.54) (Read error: Connection reset by peer)
[18:07:24] *** Joins: gusto (~Augustus@109.255.100.54)
[18:07:31] *** Joins: lbalhar (~lbalhar@93.185.13.26)
[18:07:53] *** Joins: Macuser (~Macuser@2600:1003:b441:6dd9:81c5:2141:cafb:3c57)
[18:08:39] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[18:08:41] *** Quits: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6) (Quit: Leaving)
[18:09:10] *** Joins: PCatinean (~pcatinean@188.26.231.238)
[18:10:14] *** Quits: iomari891 (~iomari891@197.210.71.84) (Ping timeout: 250 seconds)
[18:10:16] *** Joins: mickey84 (~user@user/mickey)
[18:12:17] *** Quits: Macuser (~Macuser@2600:1003:b441:6dd9:81c5:2141:cafb:3c57) (Ping timeout: 240 seconds)
[18:12:20] <han-solo> +1 for `x?: str` # :)
[18:12:42] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[18:12:43] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Remote host closed the connection)
[18:12:43] *** mickey84 is now known as mickey8
[18:12:48] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[18:15:53] *** Joins: emad (~emad@102.42.146.250)
[18:15:54] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[18:17:20] *** Joins: Macuser (~Macuser@2600:1003:b457:6a2:1561:17da:dbe4:91eb)
[18:17:51] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[18:18:19] *** Quits: esv (~esv@74.124.178.154) (Ping timeout: 256 seconds)
[18:19:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[18:19:37] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:21:15] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[18:21:55] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[18:21:56] *** Quits: KvL (~KvL@user/KvL) (Ping timeout: 250 seconds)
[18:22:01] *** Joins: darksun (~darksun@user/darksun)
[18:22:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:22:48] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Remote host closed the connection)
[18:24:58] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:25:13] *** Quits: juliaEnv (~juliaEnv@ip-86-49-248-177.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[18:25:17] *** Quits: trainsley69_ (~trainsley@c83-252-9-240.bredband.tele2.se) (Ping timeout: 256 seconds)
[18:25:42] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[18:27:07] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:28:53] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[18:29:29] *** Joins: Vision (~Vision@097-087-115-181.res.spectrum.com)
[18:29:43] *** Joins: moog (~moog@107.126.53.231)
[18:30:32] *** Joins: esv (~esv@74.124.178.154)
[18:31:41] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:31:50] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:32:41] *** Joins: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu)
[18:34:22] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Quit: Leaving)
[18:35:53] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[18:36:20] *** Joins: Guest07 (~Guest07@pool-96-253-74-73.rcmdva.fios.verizon.net)
[18:38:33] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:38:56] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-44a9-d05e-caa7-62ef.res6.spectrum.com)
[18:39:02] *** Quits: Gerula (~Gerula@user/gerula) (Remote host closed the connection)
[18:39:03] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[18:39:16] *** Quits: fivegruel (~fivegruel@HSI-KBW-109-192-195-167.hsi6.kabel-badenwuerttemberg.de) (Ping timeout: 250 seconds)
[18:39:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[18:39:52] *** Joins: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net)
[18:40:01] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[18:40:08] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 250 seconds)
[18:41:02] *** Joins: someuser (~user@197.54.99.203)
[18:41:24] *** Joins: kts (~kts@103.73.237.198)
[18:41:31] *** Quits: someuser (~user@197.54.99.203) (Read error: Connection reset by peer)
[18:41:34] *** Quits: Guest07 (~Guest07@pool-96-253-74-73.rcmdva.fios.verizon.net) (Quit: Client closed)
[18:41:48] *** Joins: someuser (~user@197.54.99.203)
[18:42:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:42:30] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:44:39] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[18:44:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce)
[18:44:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce) (Changing host)
[18:44:55] *** Joins: skapata (~Skapata@user/skapata)
[18:45:22] *** Joins: Siecje (~Siecje@108.175.228.76)
[18:45:23] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:46:49] *** Quits: Phlyniii (~alex@84-115-52-62.cable.dynamic.surfer.at) (Ping timeout: 256 seconds)
[18:46:58] *** Joins: Fiji (~Fiji@user/fiji)
[18:47:20] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:47:56] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[18:47:59] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[18:48:15] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[18:48:49] *** Joins: Guest07 (~Guest07@pool-96-253-74-73.rcmdva.fios.verizon.net)
[18:48:57] *** Joins: Vonter (~Vonter@user/vonter)
[18:49:05] *** Quits: kts (~kts@103.73.237.198) (Quit: Konversation terminated!)
[18:49:25] *** Joins: Phlyniii (~alex@84-115-52-62.cable.dynamic.surfer.at)
[18:49:53] *** Joins: retrosenator (~retrosena@48.sub-174-203-215.myvzw.com)
[18:50:38] *** Joins: Sargento (uid523534@wikipedia/Sargento-de-Hierro)
[18:50:45] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[18:51:11] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 256 seconds)
[18:51:45] *** Joins: trainsley69_ (~trainsley@c83-252-9-240.bredband.tele2.se)
[18:52:11] *** Joins: SaadKnight (~NIXKnight@198.98.57.76)
[18:53:08] <sveinse> Does py have an alternative to `{k: v for k, v in d.items() if k in g}` ? Similar to operator.itemgetter() but for dicts: `dictgetter(d, g)`
[18:53:41] *** Quits: egolego (~ego@2a01:540:a3bf:9f00:4dda:3194:f1a7:1a1c) (Remote host closed the connection)
[18:53:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:54:04] *** Joins: egolego (~ego@2a01:540:a3bf:9f00:4dda:3194:f1a7:1a1c)
[18:54:15] *** Joins: jmd (~user@de.cellform.com)
[18:57:18] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[18:57:46] *** Quits: jmd (~user@de.cellform.com) (Remote host closed the connection)
[18:57:51] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[18:58:03] <sco1> Can't you use itemgetter? What is g?
[18:58:29] *** Joins: jmd (~user@de.cellform.com)
[18:58:31] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[18:59:03] <sco1> https://bpa.st/DQRA
[18:59:17] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[18:59:58] <sco1> Though that's not really the desired output, you'd end up needing a comprehension anyway
[19:00:14] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[19:00:30] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:00:46] *** Joins: anotheruser (~user@194.132.123.4)
[19:00:56] *** Quits: esv (~esv@74.124.178.154) (Ping timeout: 250 seconds)
[19:00:57] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[19:01:06] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:01:23] *** Quits: GeorgeK (~GeorgeK@cpe-70-92-5-228.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[19:01:26] <sveinse> sco1: I want a "slice" of a dict, so g is an iterable that contains the keys from d that you'd want returned
[19:01:44] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[19:02:03] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[19:02:03] *** Quits: anotheruser (~user@194.132.123.4) (Remote host closed the connection)
[19:02:15] *** Joins: anotheruser (~user@194.132.123.4)
[19:02:26] <sveinse> There is no problem using dict comprehension for this like I showed, but I was wondering if there existed such functions
[19:03:15] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 256 seconds)
[19:03:22] *** Parts: jmd (~user@de.cellform.com) (ERC (IRC client for Emacs 27.1))
[19:03:38] *** Quits: anotheruser (~user@194.132.123.4) (Read error: Connection reset by peer)
[19:03:55] *** Joins: anotheruser (~user@194.132.123.4)
[19:04:04] *** Joins: sabry (~sabry@197.37.4.159)
[19:04:47] <jinsun> {k: d[k] for k in g} ?
[19:04:50] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[19:05:05] *** Joins: _cyclops_ (~cyclops@2001:4d48:ad5c:dd01::1000)
[19:05:52] *** Joins: beli6148 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com)
[19:06:05] *** Joins: someuser (~user@197.54.99.203)
[19:06:10] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[19:06:23] <_cyclops_> Hi all - I'm playing around with pandas and i'm doing a pandas.merge with a how='left'. But my resulting dataframe has more rows then the left dataframe had. This seems wrong to me - Would somebody be able to help explain it?
[19:06:27] *** Quits: michagogo (uid14316@user/michagogo) (Quit: Connection closed for inactivity)
[19:06:37] *** Quits: five6433 (~five6@8.40.26.50) (Ping timeout: 240 seconds)
[19:08:06] <SnoopJ> sveinse, I can't think of anything that wouldn't be itemgetter() and some truly awful abuse of map() etc.
[19:08:26] *** Joins: L0NDONER (~LLLkLLLL@host-78-149-10-182.as13285.net)
[19:08:44] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[19:08:45] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[19:08:49] *** Joins: kts (~kts@103.73.237.198)
[19:08:54] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[19:09:31] <SnoopJ> jinsun, that has slightly different semantics
[19:09:36] *** Quits: beli6147 (~Thunderbi@cpe-76-175-52-6.socal.res.rr.com) (Ping timeout: 250 seconds)
[19:09:36] *** beli6148 is now known as beli6147
[19:10:02] *** Quits: anotheruser (~user@194.132.123.4) (Ping timeout: 250 seconds)
[19:10:17] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 240 seconds)
[19:11:12] <sco1> ?
[19:12:12] *** Joins: five6433 (~five6@8.40.26.71)
[19:12:13] <SnoopJ> in the first spelling, g can have more keys than exist in d; in the second, that will produce a KeyError
[19:15:53] <aphysically> jinsun: the issue mentions supporting ** operator
[19:16:15] <aphysically> that probably makes it a lot easier to accidentally create the OOM situaiton
[19:16:42] *** Joins: humbertowoody (~humbertow@189.132.111.57)
[19:17:07] <aphysically> (if not the actual OOM, just explosive combinatorics in general)
[19:17:17] <SnoopJ> as I think about it more, it's filter() at work, not map() `dict(filter(lambda tup: tup[0] in g, d.items()))`
[19:17:26] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:18:16] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Ping timeout: 250 seconds)
[19:18:22] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:18:28] <OMGOMG> less clean than a comprehension imo
[19:18:50] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[19:18:51] *** Joins: mat001 (~mat001@69.4.234.111)
[19:18:51] <SnoopJ> very much so
[19:19:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:19:46] *** Joins: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net)
[19:19:56] *** Joins: someuser (~user@197.54.99.203)
[19:20:17] *** Quits: ponyofde1 (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Quit: WeeChat 3.3)
[19:20:27] <han-solo> `functools.reduce(lambda x, y: (x.setdefault(y, a.get(y)),) and x, b, {})` # if `None` for nonexisting values are Okayish ?
[19:20:30] <HiccupJul> Is there a way to rename a directory while avoiding clobbering other directories/files, without any race condition, using pathlib? Or do I need to use another module?
[19:20:43] <han-solo> but not for ...use
[19:20:52] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 250 seconds)
[19:20:54] <han-solo> s/values/keys/
[19:20:57] *** Joins: five64333 (~five6@8.40.26.66)
[19:21:44] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[19:21:45] *** Joins: kdc (~kdc@196.211.197.178)
[19:22:14] *** Parts: _cyclops_ (~cyclops@2001:4d48:ad5c:dd01::1000) (WeeChat 2.3)
[19:22:16] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[19:23:28] *** Quits: five6433 (~five6@8.40.26.71) (Ping timeout: 250 seconds)
[19:23:28] *** five64333 is now known as five6433
[19:23:37] *** Quits: mat001 (~mat001@69.4.234.111) (Ping timeout: 240 seconds)
[19:24:13] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Ping timeout: 256 seconds)
[19:25:14] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[19:25:15] *** Quits: five6433 (~five6@8.40.26.66) (Client Quit)
[19:25:51] *** Joins: ponyofdeath (~vladi@cpe-70-95-150-132.san.res.rr.com)
[19:25:55] *** Joins: five64333 (~five6@8.40.26.66)
[19:26:19] <hexology> HiccupJul: good question. how does the `mv` tool do it? maybe `mv` itself is subject to race conditions
[19:26:51] *** Joins: PixelRobot (~PixelRobo@212.201.11.37.dynamic.jazztel.es)
[19:26:52] <HiccupJul> yeah maybe race conditions are not really avoidable. they shouldn't be a big problem for my use case but i thought i'd ask. i'll look up about mv.
[19:26:54] <hexology> han-solo: that seems like it could be refactored to be less complicated
[19:27:04] *** Quits: five64333 (~five6@8.40.26.66) (Client Quit)
[19:27:06] *** Joins: NiD27 (~nid27@49.205.146.21)
[19:27:12] <han-solo> ...yeah, it's not for use. Just for fun
[19:27:12] <hexology> HiccupJul: could be a good question for stackoverflow or discuss.python.org too
[19:27:34] *** Joins: five64333 (~five6@8.40.26.66)
[19:28:02] <NiD27> hey I found this type of indexing a 2D array data[:,0:2] what does this mean
[19:28:03] <sveinse> HiccupJul: I'm not sure what you mean by clobber, but this might also be a file-system question as well
[19:28:06] <HiccupJul> yeah i might open a question on one of those sites, thanks
[19:28:16] <HiccupJul> by clobber, i mean "overwrite"
[19:28:29] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[19:28:44] <HiccupJul> basically if there is an already existing dir/file under the destination name, i don't want to move my directory to that name
[19:28:52] <HiccupJul> as that would overwrite it
[19:29:09] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[19:29:18] <SnoopJ> HiccupJul, are you worried about only non-empty destinations, or do you care about empty ones, too?
[19:29:43] <sveinse> HiccupJul: because e.g. under linux fs you can keep using a directory even if any of the parent path of that directory have been renamed or even deleted
[19:29:57] *** Joins: five643336 (~five6@8.40.26.70)
[19:30:27] <HiccupJul> well i'd like to avoid any kind of overwriting. ideally this should be cross platform (unix + windows)
[19:30:41] <jinsun> SnoopJ: yeah if intersection was needed then need to do d.keys() & set(g) instead of just g
[19:30:51] * SnoopJ isn't sure which of the two presented options that corresponds to
[19:31:02] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[19:31:09] <SnoopJ> jinsun, yea, and at that point you might as well just write the loop and not pay for multiple scans :)
[19:31:36] <SnoopJ> I guess the comprehension pays for scanning `g` but it could be set(g) just as well
[19:31:37] <HiccupJul> looking at stackoverflow, supposedly windows "does not guarantee atomic file meta data operations"
[19:32:08] *** Quits: five64333 (~five6@8.40.26.66) (Ping timeout: 250 seconds)
[19:32:08] *** five643336 is now known as five64333
[19:32:29] *** Joins: oscurochu (~oscurochu@37.120.215.101)
[19:32:29] <jinsun> SnoopJ: can walrus that to solve it maybe, or just have g as a set to begin with
[19:32:47] <SnoopJ> Path.rename() will already raise an OSError if the destination is a nonempty directory, but it will just clobber an existing empty directory, and I think this is the same semantics as os.rename() (which is rename(2) in disguise on Linux)
[19:33:00] <han-solo> jinsun: TIL you don't need to make it a set when being used with `dict_keys` `g && d.keys()~ likely work
[19:33:08] <han-solo> s/&&/&
[19:33:17] *** Quits: Macuser (~Macuser@2600:1003:b457:6a2:1561:17da:dbe4:91eb) (Ping timeout: 240 seconds)
[19:33:24] <SnoopJ> Not sure how it would behave on Windows but I'd expect parity of that OSError; no guesses about the empty-dir edge case
[19:33:24] *** Joins: Batzy (~quassel@user/batzy)
[19:33:27] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:33:53] <jinsun> han-solo: ah yeah & does implicit set()
[19:34:02] <HiccupJul> SnoopJ: i don't see that in the documentation for Path.rename https://docs.python.org/3/library/pathlib.html#pathlib.Path.rename
[19:34:10] <SnoopJ> HiccupJul, right, because it's not documented.
[19:34:14] <HiccupJul> ah
[19:34:30] <han-solo> jinsun: yeah, but it didn't work with `[1,2] & {3}`
[19:34:34] <SnoopJ> it's described pretty clearly in `man 2 rename` and you can also just confirm this for yourself if you doubt it
[19:35:01] <HiccupJul> well i think my main doubts are about windows behaviour
[19:35:04] *** Joins: Barones (~Barones@189.50.80.77)
[19:35:09] <SnoopJ> then you should check if the same behavior holds on Windows
[19:35:11] *** Joins: aniketgm (~aniketgm@49.36.57.63)
[19:35:11] <HiccupJul> yeah
[19:35:28] <jinsun> yeah weirdly only the dictkeys thing does it
[19:35:30] <SnoopJ> os.rename() doesn't really offer any guarantees so you're at the mercy of OS semantics here
[19:35:36] <han-solo> jinsun: yeah ':)
[19:36:01] <HiccupJul> yeah i guess i shouldn't rely on it
[19:36:07] <sveinse> I'd amend that to fs semantics really
[19:36:16] <HiccupJul> although i do need to setup a windows VM for something else soon, so i can try it out on windows
[19:36:34] *** unknown__ is now known as fef
[19:36:49] <SnoopJ> han-solo, jinsun dict_values and dict_items do it, too. Not sure if there are other views that have this property
[19:37:05] <HiccupJul> i think i'll just assume that i can't necessarily avoid a race condition, but i guess that's okay since nothing should be renaming other than my python script (which there will be only one of running at a time)
[19:37:15] <SnoopJ> sveinse, it's possible that the FS supports the notion but the OS does *not*. At any rate, Python only knows about one of those.
[19:37:21] <han-solo> SnoopJ: yeah
[19:37:46] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[19:37:49] <SnoopJ> han-solo, jinsun it's not even an implicit set() either AFAIK, it's just that it supports this operation
[19:37:50] <sveinse> SnoopJ: jep. Both ways hold
[19:37:59] <jinsun> aphysically: yeah with the ** you get shortcut to getting large numbers and slowing it down even more
[19:38:13] *** Quits: oscurochu (~oscurochu@37.120.215.101) (Ping timeout: 256 seconds)
[19:38:27] *** Joins: frmlof (~frmlof@70.243.238.191)
[19:38:34] *** Joins: fanis30 (~anon@adsl-240.37.6.1.tellas.gr)
[19:39:06] <han-solo> SnoopJ: yeah, fun thing
[19:39:10] *** dcaro is now known as dcaro_away
[19:39:30] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Ping timeout: 250 seconds)
[19:39:30] *** Quits: pvergain (~Thunderbi@2a01:e0a:223:690:51a4:6cf3:cb85:6c23) (Quit: pvergain)
[19:41:01] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[19:41:14] *** Joins: Rum (~bourbon@user/rum)
[19:43:01] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:43:32] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[19:44:00] *** Quits: BSaboia (~bsaboia@177.37.198.83) (Quit: This computer has gone to sleep)
[19:44:22] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[19:44:28] <VaniaPy> how can i split a csv file to 3 smaller?
[19:45:09] <VaniaPy> i grabbed the first 1000 entries from a large csv and i need to push them to 3 smaller csv's
[19:45:46] <SnoopJ> VaniaPy, split them how?
[19:46:33] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[19:46:53] <VaniaPy> SnoopJ not with pandas
[19:47:15] <VaniaPy> i found this one https://artwilton.medium.com/writing-a-csv-splitter-in-python-7cd1a42cb78
[19:47:24] <jinsun> you can do chunked csv reads with pandas too if you were worried about memory usage
[19:47:24] <VaniaPy> but doens't really help
[19:47:44] <CrtxReavr> Well, if you want to split on every X rows, that's easy enough.
[19:47:45] <jinsun> but you can do it without pandas with the csv module too
[19:48:09] <CrtxReavr> I fyou need to determine was X is, then, that requires a couple more steps.
[19:48:25] *** Quits: Ergo^ (~ergo@91.238.59.144) (Ping timeout: 256 seconds)
[19:49:08] <CrtxReavr> You can enumerate() on rows test for ``row % X == 0`` to identify your split point.
[19:49:13] <SnoopJ> VaniaPy, given N rows of data, I have no idea based on your description which rows should go to which files. Your problem description is not complete.
[19:49:59] *** Joins: csm3105 (~csm3105@2a02:2e02:3e4:d00:d0e5:fa85:7af4:c26a)
[19:50:02] *** Joins: Csm319_ (~csm3105@2a02:2e02:3e4:d00:d0e5:fa85:7af4:c26a)
[19:50:06] <VaniaPy> here's what i have already done https://bpa.st/4QTA
[19:50:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:50:31] <VaniaPy> i can split it for example in 3 csvs by 300 + 300 + 400
[19:50:34] <VaniaPy> rows
[19:50:43] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[19:50:48] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[19:51:15] *** Quits: rsx (~dummy@ppp-188-174-158-99.dynamic.mnet-online.de) (Quit: rsx)
[19:52:23] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[19:52:26] *** Joins: fikran (~fikran@user/fikran)
[19:52:59] *** Joins: cul8r (~cul8r@76.113.95.199)
[19:53:01] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[19:54:17] <lericson> argh can jupyter just learn to send signals
[19:54:30] <lericson> "actually kill kernel"
[19:54:31] <lericson> thank you
[19:55:06] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[19:55:13] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[19:55:28] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[19:55:30] *** Joins: mickey87 (~user@user/mickey)
[19:59:21] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 256 seconds)
[20:01:17] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 240 seconds)
[20:01:56] <han-solo> `sed -n '1,300p' > 1.csv; sed -n '301,600p' > 2.csv', ...`
[20:01:57] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 240 seconds)
[20:02:24] <johnjaye> VaniaPy: did you say "actually kill kernel" or was it someone else
[20:02:32] <johnjaye> i think my client is using a black font on black background. o_o
[20:02:34] <han-solo> lericson:
[20:02:45] <han-solo> johnjaye: it was lericson
[20:02:57] <johnjaye> i was afraid of that
[20:03:26] <han-solo> it is not that uncommon in jupyter land ?
[20:05:02] <han-solo> i had to kill it sometimes too
[20:05:13] *** Joins: Vonter (~Vonter@user/vonter)
[20:05:42] <jinsun> oh 3.10.2 is out? https://github.com/conda-forge/python-feedstock/commit/586b347c7d5a5e556b04ad6b2ebe804f48d374e8#diff-e1d8e552330911f9f779f85b6f2c00a15e790dcc3fbb3b28f5da1d660a30c5b8
[20:05:52] <SnoopJ> han-solo, I don't think it has a notion of "force kill"
[20:06:19] <jinsun> first time seeing conda-forge being faster than python.org or pyenv
[20:06:24] *** Joins: infidel (~ecrump@97-123-186-250.albq.qwest.net)
[20:06:26] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[20:06:41] <han-solo> SnoopJ: yeah, i don't remember what exactly i did when it was not responding, restart ?
[20:06:43] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[20:07:30] <SnoopJ> han-solo, I think that's generally what I used to do, but I don't really know if that left a trail of zombie kernels or not
[20:07:38] <han-solo> SnoopJ: mm
[20:07:44] *** Quits: nomic (~nomic@185.198.243.163) (Quit: Leaving)
[20:08:25] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:08:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:08:53] <Guest07> Hi I am trying to make a URL with a token in it but the token generates a - so I want to replace the - with nothing. https://dpaste.org/B9cA
[20:08:57] <Guest07> This code is not working
[20:09:11] <SnoopJ> jinsun, apparently it's even faster than python.org
[20:09:16] <SnoopJ> oh, you said that
[20:09:29] <jinsun> even github tag is not there yet, but the ftp for source code has it https://www.python.org/ftp/python/3.10.2/
[20:09:37] <SnoopJ> ...weird
[20:09:56] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:10:00] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[20:10:16] *** Quits: pycode (~pycode3@2001:b07:5d28:551:a34d:392f:89f5:ba2f) (Ping timeout: 250 seconds)
[20:10:40] *** Joins: greedom (~greedom@p200300de670671001ca662212b142704.dip0.t-ipconnect.de)
[20:10:41] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 256 seconds)
[20:10:51] <SnoopJ> jinsun, PEP 619 says the expected release date is 7 Feb o.O
[20:11:04] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[20:11:23] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[20:11:31] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[20:12:06] <CrtxReavr> '123-456'.replace('-', '') <=== that works. . . so your issue is elsewhere.
[20:12:10] <SnoopJ> I wish there was a meta-PEP that linked to all the schedule PEPs, so I could bookmark it
[20:12:50] <SnoopJ> linked *only* to them, I mean. PEP 0 does have links to them but it's slightly less convenient :)
[20:12:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 240 seconds)
[20:13:03] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0::7e04)
[20:13:13] <Guest07> I am using this tutorial https://simpleisbetterthancomplex.com/tutorial/2017/02/18/how-to-create-user-sign-up-view.html
[20:13:44] <jinsun> SnoopJ: hmm, fishy..., hopefully it is just an early upload by mistake?
[20:13:46] *** Joins: Betal (~Betal@user/betal)
[20:14:03] <Guest07> Can I do something with %s or something?
[20:15:13] <SnoopJ> jinsun, I have no idea how the pseudo-FTP gets put together to be honest.
[20:15:17] <jinsun> hopefully the conda-forge bot checks the signatures, maybe not, and we'll find out if this turns out bad
[20:15:18] <bjs> Guest07: what is wrong with the code you gave?
[20:15:23] *** Quits: tobybl (~tobybl@248.195.115.87.dyn.plus.net) (Remote host closed the connection)
[20:15:36] <Guest07> The token generates a - in it and recaptcha complains it does not like special characters
[20:15:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[20:16:01] *** Joins: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net)
[20:16:34] *** Joins: ca1f (~calf@user/ca1f)
[20:16:44] *** Joins: Guest92 (~Guest92@2a01:4c8:c2a:6192:98af:1baa:2a43:70c2)
[20:16:47] *** Joins: cosimone` (~user@93-44-186-159.ip98.fastwebnet.it)
[20:17:08] *** Quits: lbalhar (~lbalhar@93.185.13.26) (Remote host closed the connection)
[20:17:32] <Guest07> Here is the django code https://github.com/django/django/blob/stable/1.5.x/django/contrib/auth/tokens.py
[20:17:41] <bjs> Guest07: I don't think _make_hash_value is the entire token,  are there -'s elsewhere in the token too?
[20:17:41] <aphysically> jinsun: I updated it to make it more clearly an OOM even if it's smart and knows x=x https://github.com/python/mypy/issues/11990#issuecomment-1012921819
[20:17:45] <ca1f> hi, I'm trying to write typed python code using the typing.Protocol class and I would like it to be backwards compatible with python 3.7 and below. I found the typing_extensions module for this but I'm unsure how to use it. Can someone give me a quick example?
[20:18:10] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10e5:449e:d488:648c:46b0:f14f) (Read error: Connection reset by peer)
[20:18:12] *** Quits: egolego (~ego@2a01:540:a3bf:9f00:4dda:3194:f1a7:1a1c) (Quit: Leaving)
[20:18:25] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e)
[20:18:29] <Guest07> When I print the token on a template I get az9233-551f64e649658ecbba5fd01df5bdee86
[20:19:01] *** Joins: PointThink (~PointThin@acbh87.neoplus.adsl.tpnet.pl)
[20:19:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[20:19:25] <Guest07> Can I replace it with hex? like %20 does for spaces?
[20:19:34] <bjs> Guest07: what does this generated token have to do with recaptcha?
[20:20:06] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[20:20:07] <Guest07> Invalid action name, may only include "A-Za-z/_". Do not include user-specific information.
[20:20:29] *** Joins: flea- (flea@gateway/vpn/protonvpn/nosoul)
[20:20:31] <Guest07> This is my action {action: "{% url 'activate' uidb64=uid token=token %}"}
[20:20:48] <jinsun> aphysically: nice, yeah it could have optimized the x=x case, but this one has to be 50 P 9 cases
[20:20:49] <Guest07> which is the entire activation URL
[20:21:20] <aphysically> = OOM
[20:21:35] <aphysically> this is harder to create accidentally with ** though
[20:21:52] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[20:22:04] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[20:22:20] *** Joins: moto (~moto@user/moto)
[20:22:46] *** Joins: ikke (~kevin@alpine/developer/ikke)
[20:23:20] <jinsun> yeah ** will more likely just end up with super large numbers in the reveal_type and slow down
[20:24:09] <jinsun> but... pyright will calculate that in TypeScript which doesn't do arbitrary large intergers  I guess? then it can get weirder
[20:24:22] <bjs> Guest07: oh I see, so the {% url ... token=token %} is constructing a url that has a - in it, and then recaptcha does not like the url with a dash?
[20:24:30] <Guest07> Correct
[20:24:55] <bjs> Guest07: well you could take the token that was generated and replace the - with an _, and then back again when you check it
[20:24:58] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:25:23] <ikke> I'm trying to build ipython 8.0.0, but it fails with: 'AssertionError: No files match pattern ipython/core/profile/README*'. That file lives at IPython/core/profile/README_STARTUP. It seems to be defined here: https://github.com/ipython/ipython/blob/master/setup.cfg#L52. Any idea why it looks for the directory with the wrong case and/or how to fix it?
[20:25:28] <Guest07> hmm interesting approach
[20:25:55] <ikke> This happens with both invoking setup.py as using python -m build
[20:26:01] <ikke> (python 3.10)
[20:26:21] <jinsun> ca1f: you import types from typing_extensions just like you import it from typing, and if your type checker supports the typing_extensions feature it will "just work"
[20:26:31] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[20:26:58] *** Quits: greedom (~greedom@p200300de670671001ca662212b142704.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:27:05] *** Joins: gasbag (~gasbag@024-216-149-125.res.spectrum.com)
[20:27:08] <bjs> Guest07: but that - part of the whole token (separating timestamp + hash) not part of the hash itself, so you can't do the replace inside _make_hash_value (as far as I can tell)
[20:27:24] <bjs> and you almost certainly don't want to touch the code that does the generation or checking of tokens :)
[20:27:27] <ikke> It works when I create a symlink from ipython to IPython/
[20:27:33] <ca1f> uhm, I should have mentioned that I added the typing_extension as a dependency for only python versions 3.7 and below. I thought that would be a good idea since it's not necessary if the native typing module already provides the Protocol class.
[20:27:58] <jinsun> yeah that's what other projects do too
[20:28:08] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:28:10] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[20:28:16] <Guest07> yea this is a lot harder than it looks
[20:28:28] <ca1f> do you have a pointer for me to one of these projects? I just like to learn from examples
[20:28:29] <jinsun> ca1f: check the sys.version_info and decide whether to import from typing or typing_extensions based on that
[20:28:31] *** Joins: ozoned (~odoood@2601:c8:c000:c4e0::3)
[20:28:42] *** Joins: vicfred (~vicfred@user/vicfred)
[20:28:45] <bjs> Guest07: not really, at some point you call make_token() and you can just do the .replace() on that. and at some point you'll call check_token(tok) and you can just do the .replace() on the tok
[20:29:06] <Guest07> I do it here -> 'token': account_activation_token.make_token(user),
[20:29:25] <Guest07> But when I do a replace on that it works but then the entire activation URL becomes invalid
[20:29:41] <jinsun> ca1f: rich is one example where I have seen that https://github.com/Textualize/rich/search?q=typing_extensions
[20:29:50] <bjs> Guest07: yes you also need to transform it back again when you do the check :P
[20:29:51] *** Joins: panella32 (~panella32@45.130.83.59)
[20:29:56] *** dcaro_away is now known as dcaro
[20:29:57] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[20:29:59] <Guest07> ah
[20:30:03] <ca1f> cool, that helped a lot, thanks jinsun
[20:30:04] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e) (Ping timeout: 268 seconds)
[20:31:46] <Guest07> I do it in these places https://dpaste.org/zB8H#L13,32,38
[20:31:55] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[20:33:30] <Guest07> str(account_activation_token).replace('-','').check_token(user, token)   ?
[20:34:38] <bjs> Guest07: no token is the actual token
[20:34:41] <bjs> that's the string
[20:34:52] <Guest07> oh inside of check_token ?
[20:35:18] <bjs> Guest07: yes, so you could do something like ...make_token(user).replace('-','_')  then later check_token(user, token.replace('_','-'))
[20:35:22] *** ozoned is now known as odoood
[20:35:48] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-216-150.wlan.tudelft.nl) (Quit: WeeChat 3.3)
[20:35:59] <Guest07> ok let me try
[20:36:27] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:36:47] *** Joins: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net)
[20:36:57] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[20:37:19] *** Quits: Guest92 (~Guest92@2a01:4c8:c2a:6192:98af:1baa:2a43:70c2) (Quit: Client closed)
[20:37:34] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[20:37:54] <Guest07> You are a genius that worked
[20:38:14] *** Joins: frmlof (~frmlof@70.243.238.191)
[20:38:38] <Guest07> Thank you i would have never figured it out
[20:41:37] *** Quits: Kruppt (~Kruppt@50.111.29.57) (Quit: Leaving)
[20:41:54] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:43:22] *** Joins: mat001 (~mat001@76.sub-174-208-174.myvzw.com)
[20:44:06] *** Joins: Narrat (~omnius@p200300df5f129c6c06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[20:44:12] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e)
[20:45:15] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:46:01] *** Joins: someuser (~user@197.54.99.203)
[20:46:40] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[20:47:11] <ikke> Any idea why python is looking for 'ipython' here instead of IPython? https://github.com/ipython/ipython/blob/master/setup.cfg#L52-L55 https://tpaste.us/vgQL
[20:47:42] *** Joins: c4017w (~c4017@209.52.68.8)
[20:48:01] *** Joins: Mortician (~Mortician@cpe-75-83-83-8.socal.res.rr.com)
[20:48:16] <sveinse> I have a list of dicts and I need to remove all duplicates (the keys are known). I solved this by doing `[k for k, v in itertools.groupby(sorted(list_of_dicts, key=operator.itemgetter({'key1', 'key2'})))]` which is admittedly a handsful. Any suggestions on how to simplify?
[20:48:47] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[20:48:48] *** Quits: magla (~gelignite@55d475f4.access.ecotel.net) (Quit: Stay safe!)
[20:49:21] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[20:49:43] *** Joins: justm33 (~Username@82-171-85-246.fixed.kpn.net)
[20:50:25] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:51:05] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[20:51:30] *** Joins: ano (~ano@user/ano)
[20:51:32] *** Joins: Syzygy_ (~Syzygy@178-190-59-186.adsl.highway.telekom.at)
[20:52:03] *** Quits: justm33_ (~Username@82-171-85-246.fixed.kpn.net) (Ping timeout: 256 seconds)
[20:52:18] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 250 seconds)
[20:52:27] *** Quits: jay-m1261 (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:52:27] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 256 seconds)
[20:53:01] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 256 seconds)
[20:53:07] *** Quits: Syzygy__ (~Syzygy@dynamic-2l4rd2qeatx0n54f76-pd01.res.v6.highway.a1.net) (Remote host closed the connection)
[20:53:47] *** Quits: sabry (~sabry@197.37.4.159) (Quit: Client closed)
[20:53:57] *** Quits: marcello42 (~mp@2001:1a81:1389:1500:4832:8ed6:7825:272d) (Ping timeout: 240 seconds)
[20:55:20] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[20:56:03] *** Joins: marcello42 (~mp@2001:1a81:1398:8000:801:e062:2deb:7c8c)
[20:58:05] *** Quits: JavaGeek (~codegeek@about/java/CodeGeek) (Quit: Connection reset by beer)
[20:58:09] *** Quits: tWqaq (~tWqaq@240e:389:5d1c:ff00:af79:40b7:d76c:be82) (Quit: Leaving)
[20:58:24] *** Joins: goldfish (~goldfish@user/goldfish)
[20:58:32] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:58:45] *** Joins: CodeGeek (~codegeek@about/java/CodeGeek)
[20:59:32] <aphysically> jinsun: ya, and 50+9-1 C 9 results
[20:59:35] <aphysically> because primes
[20:59:53] <aphysically> i changed it to 12 instead of 9 since the number of results is then also certainly enough to OOM
[20:59:57] <aphysically> not that it matters..
[21:00:17] *** Joins: beastDiv1 (~beastDivi@user/beastdivision)
[21:00:27] <aphysically> you get 50^9 results if you do strings and addition instead of primes and multiplication though
[21:00:42] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[21:00:59] *** Quits: flea (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 252 seconds)
[21:01:10] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[21:01:33] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[21:02:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[21:02:21] *** Quits: beastDivision (~beastDivi@user/beastdivision) (Ping timeout: 276 seconds)
[21:02:45] *** Joins: plastico (~plastico@neomutt/plastico)
[21:03:06] *** Joins: paul424 (~tom@ip-5-172-234-134.multi.internet.cyfrowypolsat.pl)
[21:03:08] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[21:03:10] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[21:03:13] *** Quits: luigibu (~luigi@11.red-79-159-71.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[21:03:31] *** Quits: akmod (~akmod@c-73-228-115-212.hsd1.ut.comcast.net) (Remote host closed the connection)
[21:03:53] *** Joins: mdemo (~mdemo@user/mdemo22)
[21:04:07] <jinsun> also the TypeScript vs python calculation difference may be interesting
[21:04:59] *** Quits: twb (~twb@2403-5804-c6--cfeb-44f7-7895-9800.ip6.aussiebb.net) (Remote host closed the connection)
[21:05:18] <jinsun> can't make sense of the code unfortunately to see if there is some cap on these calculation, there should be, otherwise trouble is inevitable
[21:05:19] *** Joins: ST47 (~ST47@wikimedia/st47)
[21:05:21] <llanhmod> sveinse: did you use that solution as posted or save it to a variable?
[21:05:41] <llanhmod> looks like a throw away
[21:05:56] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Remote host closed the connection)
[21:06:10] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 250 seconds)
[21:06:15] *** Joins: bytehackr (~Sandipan@43.252.250.86)
[21:06:21] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[21:06:31] *** Quits: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net) (Quit: Leaving)
[21:06:33] <jinsun> ikke: so the problem is here https://github.com/ipython/ipython/blob/master/setupbase.py#L120, somehow the pkg_root is in lowercase, it comes from package_data which comes from build_py from setuptools, so somehow setuptools is the culprit here I guess
[21:06:48] *** Joins: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net)
[21:07:15] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[21:07:17] *** Quits: Xano (~Xano@2a00:23c4:4204:700:74e1:9d54:b7a1:b272) (Ping timeout: 240 seconds)
[21:07:25] *** Quits: mat001 (~mat001@76.sub-174-208-174.myvzw.com) (Read error: Connection reset by peer)
[21:08:03] <ikke> jinsun: hmm, ok, I'll go look into that
[21:08:29] <sveinse> llanhmod: I'm using the resulting list of dicts, yes
[21:08:45] <ikke> jinsun: thanks
[21:09:01] *** Joins: mat001 (~mat001@69.4.234.55)
[21:11:53] *** Quits: oscurochu (~oscurochu@37.120.215.102) (Ping timeout: 256 seconds)
[21:12:36] *** Joins: sidro (~sidro@86.122.231.222)
[21:13:58] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 250 seconds)
[21:14:21] *** Joins: fivegruel (~fivegruel@HSI-KBW-109-192-195-167.hsi6.kabel-badenwuerttemberg.de)
[21:14:22] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[21:15:05] *** Quits: streety_ (~streety@li761-24.members.linode.com) (Quit: ZNC 1.6.5 - http://znc.in)
[21:15:14] *** Joins: streety (~streety@li761-24.members.linode.com)
[21:15:19] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:15:51] *** Quits: dreamon (~dreamon@ppp-88-217-76-15.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[21:16:02] *** Quits: ca1f (~calf@user/ca1f) (Quit: Leaving)
[21:17:28] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[21:18:37] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[21:19:36] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[21:20:43] *** Joins: greedom (~greedom@p200300de670671001ca662212b142704.dip0.t-ipconnect.de)
[21:20:55] *** Joins: qlixed (~qlixed@181.44.129.13)
[21:21:09] *** Quits: domicron (~domicron@gateway/tor-sasl/domicron) (Remote host closed the connection)
[21:21:54] *** Joins: domicron (~domicron@gateway/tor-sasl/domicron)
[21:22:51] *** Joins: Xano (~Xano@host86-151-110-89.range86-151.btcentralplus.com)
[21:23:13] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Ping timeout: 256 seconds)
[21:23:46] <jwhisnant> sveinse: wanted=[]; for adict in biglist: if adict not in wanted: wanted.append(adict) (how big is biglist here?)
[21:24:27] *** dcaro is now known as dcaro_pot
[21:24:32] *** dcaro_pot is now known as dcaro_pto
[21:25:25] *** Joins: sandb0y (~pirate@user/sandb0y)
[21:26:17] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[21:26:24] <jiffe1> anyone know what I'm doing wrong here https://bpa.st/446A?  I'm trying to test writing text to a process via stdin, after writing the text I close stdin to EOF stdin on the process but it acts like nothing was written to stdin
[21:26:32] *** Joins: pycurious (~Adium@user/pycurious)
[21:27:06] <aphysically> jinsun: I was also wondering about python having bigint and javascript not
[21:27:11] *** Quits: rje (~textual@50.35.241.164) (Ping timeout: 256 seconds)
[21:27:14] <aphysically> not that people often have literals larger than javascript's max integer size....
[21:27:15] *** Joins: hanaan (~naan@user/naan)
[21:27:39] <aphysically> still, it might not hurt to check for overflow
[21:28:37] <jinsun> well easy to get with **, or your super repeated multiplication case
[21:29:24] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[21:29:27] *** hanaan is now known as Naan
[21:29:58] <jinsun> but ** is not supported yet and people won't normally do so many multiplications so unlikely to get issues with the current version
[21:30:13] <jinsun> but we can definitely try huge Literals
[21:30:37] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[21:31:09] *** Joins: e2m4n (~ezman@user/e2m4n)
[21:31:10] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[21:31:18] *** Quits: PCatinean (~pcatinean@188.26.231.238) (Remote host closed the connection)
[21:31:24] <phy1729> jiffe1: I'd use os.pipe not openpty
[21:31:24] *** Quits: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4) (Read error: Connection reset by peer)
[21:31:38] <phy1729> Also you aren't really going to pipe to xargs right?
[21:31:49] <ryan-c> anyone know how to make ipython not show me 'None' return values as black on black?
[21:31:58] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[21:32:31] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:34:03] <aphysically> jinsun: pyright is already broken with this
[21:34:06] <aphysically> one sec
[21:34:18] *** Quits: aniketgm (~aniketgm@49.36.57.63) (Quit: leaving)
[21:34:23] <aphysically> jinsun: https://bpa.st/ZJXA
[21:34:35] <jiffe1> phy1729: I know they used pty for a specific reason but I don't know what that is right off-hand, it works for the cases this library was written for, I'm just trying to write generalized test cases right now
[21:35:01] *** Joins: nomic (~nomic@185.198.243.163)
[21:35:08] *** Quits: panella32 (~panella32@45.130.83.59) (Quit: Textual IRC Client: www.textualapp.com)
[21:35:11] *** Joins: aniketgm (~aniketgm@49.36.57.63)
[21:35:15] <aphysically> it looks like pyright clamps instead of overflowing which is interesting
[21:35:18] *** Joins: Pddy (~Pddy@user/SmplyPddy)
[21:35:30] <aphysically> so this may be intended
[21:35:38] <jinsun> aphysically: ah yes just simple huge literal shows wrong value
[21:35:45] <jinsun> without any math
[21:36:00] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:36:07] *** Joins: mat001_ (~mat001@69.4.234.90)
[21:36:29] *** llanhmod is now known as Guest7972
[21:36:29] *** Quits: Guest7972 (~developer@user/domhnall/x-2887755) (Killed (strontium.libera.chat (Nickname regained by services)))
[21:36:33] *** Joins: llanhmod (~developer@user/domhnall/x-2887755)
[21:36:39] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 256 seconds)
[21:37:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:37:17] *** Quits: mat001 (~mat001@69.4.234.55) (Ping timeout: 240 seconds)
[21:37:30] *** Quits: beastDiv1 (~beastDivi@user/beastdivision) (Quit: beastDiv1)
[21:37:48] *** Quits: k2ro_ (~k2ro@p5b175bd7.dip0.t-ipconnect.de) (Quit: k2ro_)
[21:37:58] <jinsun> well not really "wrong" but just gets converted to 1eX
[21:38:12] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[21:39:26] *** Joins: Cyp_ (~cyp@213.237.88.120)
[21:39:55] *** Joins: mtk (~mtk@2601:185:200:70:20c:29ff:fe3e:59e4)
[21:39:58] <jinsun> aphysically: how did you get the clamping?
[21:40:13] <aphysically> err, not quite clamping
[21:40:32] <jinsun> I just get 1e30 1e31 and so on as I keep adding digits
[21:40:36] <aphysically> right
[21:40:39] <sveinse> jwhisnant: ? I don't know. But I would prefer comprehensions to these kinds of operations
[21:40:58] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:c58c:ab89:106d:1f2a)
[21:41:10] <jinsun> javascript ints are floats so it can probably handle upto 1e308 by approximating like this
[21:41:26] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[21:41:40] * llanhmod wanted to help with the ipython issue but got disconnected and forgot the nick that asked
[21:41:55] <llanhmod> but, try from commandline ``
[21:42:09] *** Joins: bluedust (~bluedust@117.207.236.117)
[21:42:13] *** Quits: Csm319_ (~csm3105@2a02:2e02:3e4:d00:d0e5:fa85:7af4:c26a) (Ping timeout: 268 seconds)
[21:42:13] *** Quits: csm3105 (~csm3105@2a02:2e02:3e4:d00:d0e5:fa85:7af4:c26a) (Ping timeout: 268 seconds)
[21:42:15] *** Joins: johnkeats7 (~johnkeats@2804:14c:32:a0cc:4551:f02c:656d:a647)
[21:42:19] <llanhmod> ipython --TerminalInteractiveShell.colors='Linux'
[21:42:24] *** Quits: retrosenator (~retrosena@48.sub-174-203-215.myvzw.com) (Read error: Connection reset by peer)
[21:42:30] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[21:42:58] <sveinse> jinsun: 1e307 + 1 wouldn't do much in fp thou
[21:43:05] *** Quits: mdemo (~mdemo@user/mdemo22) (Quit: The Lounge - https://thelounge.github.io)
[21:43:16] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c57b:af89:b9b2:8139) (Ping timeout: 245 seconds)
[21:43:33] *** Quits: flea- (flea@gateway/vpn/protonvpn/nosoul) (Remote host closed the connection)
[21:43:37] *** Quits: Cyp (~cyp@213.237.85.9) (Ping timeout: 256 seconds)
[21:43:38] <aphysically> jinsun: fwiw this *can* result in false negatives b: Literal[90000000000000000] = a
[21:43:53] <llanhmod> all options:  ['Neutral', 'NoColor', 'LightBG', 'Linux']
[21:44:53] <llanhmod> source: https://ipython.readthedocs.io/en/stable/config/intro.html#setting-configurable-options
[21:45:27] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[21:45:36] *** Quits: raxor2k (~raxor2k@78.158.250.147) (Remote host closed the connection)
[21:45:47] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[21:45:47] *** Joins: rje (~textual@65.141.156.170)
[21:45:51] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:15f6:fe0e:3dfb:7d89)
[21:45:53] *** Quits: bluedust_ (~bluedust@86.106.136.217) (Ping timeout: 256 seconds)
[21:46:02] *** Quits: johnkeats6 (~johnkeats@2804:14c:32:a0cc:c58c:ab89:106d:1f2a) (Ping timeout: 250 seconds)
[21:46:02] <jinsun> sveinse: hmm like it jumps to "inf" which also "works" I guess
[21:46:13] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.28-22.dynamic.3bb.co.th)
[21:47:05] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:47:09] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.28-22.dynamic.3bb.co.th) (Remote host closed the connection)
[21:47:46] *** Joins: p-i-_ (Ohmu@gateway/vpn/protonvpn/ohmu)
[21:47:46] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[21:47:49] <jinsun> aphysically: yeah and mypy handles that fine
[21:48:01] <aphysically> jinsun: https://github.com/microsoft/pyright/issues/2860
[21:48:09] *** Quits: sidro (~sidro@86.122.231.222) (Ping timeout: 256 seconds)
[21:48:23] <aphysically> jinsun: that makes sense given mypy is coded in python (bignum by default)
[21:48:33] <jinsun> yup
[21:48:44] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:48:47] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:50:10] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[21:50:15] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[21:50:15] *** Quits: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 256 seconds)
[21:51:42] *** Joins: slav0nic (slav0nic@python.su)
[21:52:45] *** Joins: esv (~esv@74.124.178.154)
[21:53:15] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Ping timeout: 256 seconds)
[21:53:39] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[21:54:16] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[21:54:33] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[21:54:37] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[21:54:51] *** Joins: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126)
[21:56:21] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[21:56:36] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Client Quit)
[21:57:06] *** Quits: esv (~esv@74.124.178.154) (Remote host closed the connection)
[21:57:41] *** Quits: mickey87 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[21:57:56] *** Joins: mickey8 (~user@user/mickey)
[21:58:06] *** Joins: spawnmc (~spawnmc@user/spawnmc)
[21:58:26] *** Quits: bluedust (~bluedust@117.207.236.117) (Remote host closed the connection)
[21:58:39] *** Joins: sidro (~sidro@86.122.231.222)
[21:59:10] <spawnmc> hey guys, simple question i hope... I'm trying to learn python and I wrote this little program here but the strings are not being capitalized like I expected them to.... What am i missing? https://bpa.st/RHEQ
[22:00:03] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[22:01:43] <SnoopJ> spawnmc, this program doesn't seem to run (`string` is not defined at Line 3), but if it did, it would be helpful to know some of your expected outputs for given inputs
[22:01:47] *** Joins: fikran (~fikran@user/fikran)
[22:01:51] *** Quits: cosimone` (~user@93-44-186-159.ip98.fastwebnet.it) (Remote host closed the connection)
[22:02:00] *** Joins: esv (~esv@74.124.178.154)
[22:02:11] *** Joins: george91 (~Adium@103.137.204.24)
[22:02:17] <spawnmc> oh you are right....
[22:02:53] *** Joins: cosimone (~user@93-44-186-159.ip98.fastwebnet.it)
[22:03:13] *** Quits: aniketgm (~aniketgm@49.36.57.63) (Quit: leaving)
[22:03:20] <SnoopJ> If I change `string` there to `phrase` I can run it and I get output if I type in some stuff and then enter '\end', but I still don't know what your expectation is :)
[22:03:51] *** Joins: juliaEnv (~juliaEnv@ip-86-49-248-177.net.upcbroadband.cz)
[22:04:14] *** Quits: bytehackr (~Sandipan@43.252.250.86) (Ping timeout: 250 seconds)
[22:04:25] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[22:05:05] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:05:17] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:05:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:05:38] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:05:50] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:06:11] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:06:14] <spawnmc> Yeah sorry for not elaborating more... I did figure it out though thanks to you haha. the correct version is this: https://bpa.st/EVOQ
[22:06:23] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:06:44] *** Joins: mdemo (~mdemo@user/mdemo22)
[22:06:51] <spawnmc> it just forms a little text and adds periods at the end of each string or a question mark if the strings starts with "how", "what" or "why"
[22:06:56] *** Quits: mdemo (~mdemo@user/mdemo22) (Client Quit)
[22:07:25] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 256 seconds)
[22:07:27] *** Quits: moog (~moog@107.126.53.231) (Remote host closed the connection)
[22:07:39] <SnoopJ> Yep, I was wondering if the problem was how it was capitalizing things, but I guess it was really this issue with string vs phrase :)
[22:07:50] *** Joins: jfcaron (~jfcaron@192.252.229.171)
[22:07:54] *** Joins: vit (~vit@chello085216193138.chello.sk)
[22:08:11] *** justIrresolute is now known as justJustache
[22:08:18] *** vit is now known as Guest9014
[22:08:37] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[22:08:44] *** Joins: b-rex (van@down.by.the.river.lol)
[22:09:01] <b-rex> def __init__(self, data=None, queryset=None, *, request=None, prefix=None): <-- what's the * supposed to do?
[22:09:22] <jinsun> it makes request and prefix keyword-only
[22:09:41] <b-rex> are you jinsun of achaea?
[22:09:52] *** Quits: PixelRobot (~PixelRobo@212.201.11.37.dynamic.jazztel.es) (Quit: Quit)
[22:09:52] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[22:10:25] <jinsun> maybe :D (not really)
[22:10:28] *** Joins: legola (~legola@46.235.100.54)
[22:10:44] *** Joins: george91_ (~george91@103.137.204.24)
[22:10:51] <b-rex> jinsun in achaea was an occultist in Ashtan
[22:11:02] *** Quits: fanis30 (~anon@adsl-240.37.6.1.tellas.gr) (Quit: WeeChat 3.3)
[22:11:10] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[22:11:46] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[22:11:55] *** Quits: george91 (~Adium@103.137.204.24) (Quit: Leaving.)
[22:12:49] <SnoopJ> https://docs.python.org/3/tutorial/controlflow.html#keyword-only-arguments
[22:13:34] <b-rex> jinsun: SnoopJ: thanks
[22:13:39] <b-rex> lunch time
[22:13:41] *** Parts: b-rex (van@down.by.the.river.lol) (WeeChat 3.2)
[22:14:01] *** Joins: k2ro (~k2ro@195.158.249.12)
[22:14:36] *** Joins: pyevery__ (~pyeveryth@64-18-153-56.starry-inc.net)
[22:14:54] *** Quits: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net) (Quit: Leaving)
[22:15:15] <pyevery__> hey how can I fix the code in line 3 https://paste.ofcode.org/KBqjEYLrGvwN44t8LpL687 ? I want the train_1 and train_2 ... train_5 to be produced inside the loop for my variable name train_i
[22:15:15] <jinsun> aphysically: if nothing is done, at least the docs here can be updated to mention that problem https://github.com/microsoft/pyright/blob/main/docs/type-inference.md#literals or maybe here https://github.com/microsoft/pyright#limitations
[22:15:37] *** Quits: sidro (~sidro@86.122.231.222) (Quit: Konversation terminated!)
[22:16:48] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[22:17:30] <jinsun> pyevery__: why make such variables instead of adding those things in a list or dict?
[22:17:35] *** Quits: catdog (~quassel@2001:470:50f7:cdcd::cd1) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[22:17:43] *** Joins: catdog (~quassel@2001:470:50f7:cdcd::cd1)
[22:17:58] *** Joins: magla (~gelignite@55d475f4.access.ecotel.net)
[22:18:31] <jinsun> dictionary keys can be constructed easily like that, and if you remove the train_ prefix they can be list indices too
[22:18:53] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:15f6:fe0e:3dfb:7d89) (Quit: Konversation terminated!)
[22:19:54] <pyevery__> Hey jinsun thanks for the tip. Gonna give it a try and get back to you
[22:20:33] *** Joins: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net)
[22:21:21] *** Quits: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[22:21:24] *** Joins: matsaman (~matsaman@user/matsaman)
[22:21:32] *** Joins: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[22:21:43] *** Joins: aslicedbanjo (~aslicedba@host86-160-16-104.range86-160.btcentralplus.com)
[22:23:11] *** Quits: Barones (~Barones@189.50.80.77) (Remote host closed the connection)
[22:23:56] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:24:15] *** Joins: withered1wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[22:24:28] *** Quits: withered1wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Client Quit)
[22:24:46] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:25:28] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[22:25:38] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[22:26:58] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[22:27:01] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e) (Ping timeout: 245 seconds)
[22:27:12] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[22:28:30] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[22:29:45] <pyevery__> thanks jinsun train[i+1] = [x[train_idx[i+1]], y[train_idx[i+1]]]   worked
[22:31:48] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:32:47] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[22:33:39] *** Quits: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net) (Read error: Connection reset by peer)
[22:33:42] *** Quits: someuser (~user@197.54.99.203) (Ping timeout: 250 seconds)
[22:34:08] *** Quits: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 250 seconds)
[22:35:18] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[22:35:35] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[22:35:43] *** Joins: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126)
[22:37:01] *** george91_ is now known as george91
[22:39:42] *** Joins: Barones (~Barones@189.50.80.77)
[22:39:45] *** Quits: withered_dragon (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: WeeChat 3.3)
[22:40:22] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:43:32] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[22:44:32] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:85aa:273d:57aa:813d)
[22:44:49] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[22:45:08] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[22:45:24] *** Quits: jay-m126 (~jay-m@gateway/vpn/pia/jay-m126) (Ping timeout: 250 seconds)
[22:45:51] *** Joins: Croves (~Croves@192.34.198.18)
[22:46:54] *** Joins: withered_dragon (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[22:47:39] *** Joins: Sailu44 (~Sailu44@94.85-84-245.dynamic.clientes.euskaltel.es)
[22:47:57] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:48:00] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[22:48:08] *** Quits: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi) (Read error: No route to host)
[22:48:33] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[22:49:06] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:49:37] *** Quits: llanhmod (~developer@user/domhnall/x-2887755) (Quit: leaving)
[22:49:52] <Croves> Folks, I think I'm missing something about @property. I have a base class that contains a `ticket` property, but in the child class when I try to use it I get a <property object at 0x7fd6b4a666b0>
[22:49:55] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[22:49:57] *** Joins: csm3105 (~csm3105@static-90-220-24-46.ipcom.comunitel.net)
[22:49:58] *** Joins: Csm319_ (~csm3105@static-90-220-24-46.ipcom.comunitel.net)
[22:50:24] <sco1> Do you have an example?
[22:50:24] <Croves> In this case I have the run_mode as a property. When I try to check if run_mode == 'test' I only see the <property object at 0x7fd6b4a666b0>
[22:50:37] *** Joins: MJ (~mjpieters@zopatista.plus.com)
[22:50:40] <moonmoon> can you pastebin some example code?
[22:50:51] <moonmoon> (include both the property definition as well as its use)
[22:50:57] *** Joins: bluedust (~bluedust@117.207.236.117)
[22:51:24] <bjs> Croves: can you show us what you're doing and what you see?
[22:53:41] *** Joins: ouestbillie (~gallup@142.169.82.16)
[22:54:04] <jfcaron> I have been given demo python code that uses pythonnet (Microsoft .NET).  It runs but I don't understand how the imports are syntactically correct, where does the name System come from? https://paste.debian.net/1227147/
[22:54:23] <jfcaron> Does "import clr" secretly inject names into my global namespace?
[22:54:34] *** Joins: Donitz (~Donitz@88-115-149-215.elisa-laajakaista.fi)
[22:54:53] *** Parts: ikke (~kevin@alpine/developer/ikke) (WeeChat 3.2)
[22:55:14] <sco1> Are there multiple files in the code you've been given?
[22:55:21] *** Quits: infidel (~ecrump@97-123-186-250.albq.qwest.net) (Remote host closed the connection)
[22:55:29] <sco1> Perhaps a file named "System.py" or a folder named "System"?
[22:55:56] *** Joins: ub (~Thunderbi@141.98.252.232)
[22:55:57] <jfcaron> No
[22:56:12] *** Quits: legola (~legola@46.235.100.54) (Remote host closed the connection)
[22:56:32] <johnjaye> import clr
[22:56:39] <johnjaye> that looks so bizarre to me
[22:56:40] <matsaman> jfcaron: isn't that the point of the project, pythonnet, to provide those?
[22:56:53] <sco1> Then yes, "import clr" is probably injecting them
[22:56:56] <jfcaron> matsaman: Yes but they aren't in the clr namespace.
[22:57:04] *** Joins: sidro (~sidro@86.122.231.222)
[22:57:06] <jfcaron> Well, they are also in there I guess.
[22:57:23] <matsaman> http://pythonnet.github.io/#importing-modules
[22:57:27] <jfcaron> I didn't know python let you do that.
[22:57:36] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:57:44] <matsaman> python lets you do a lot that you might not need or want to do =P
[22:57:53] <jfcaron> =\
[22:58:11] <jfcaron> ugh I hate all these "from" imports.
[22:58:22] <jfcaron> I have to scroll around to figure out where these classes are from.
[22:58:39] <jfcaron> Most of them are only used once so it's not even saving them code.
[22:59:20] <matsaman> shouldn't be hard to fix to your preference if you really wanted to
[22:59:45] *** Joins: bluedust_ (~bluedust@37.120.198.153)
[22:59:53] *** Joins: iamkarlson (~iamkarlso@80-61-94-238.fixed.kpn.net)
[22:59:59] <Repiphany> `from System.IO import *`
[23:00:03] <jfcaron> Yeah it's just annoying that they effectively obfuscated their demo code.
[23:00:10] <grym> jfcaron: pythonnet can reach out to dotnet
[23:00:10] *** Quits: sidro (~sidro@86.122.231.222) (Client Quit)
[23:00:12] <grym> afaik
[23:00:22] *** Quits: iamkarlson (~iamkarlso@80-61-94-238.fixed.kpn.net) (Read error: Connection reset by peer)
[23:00:32] *** Quits: Croves (~Croves@192.34.198.18) (Ping timeout: 256 seconds)
[23:00:41] *** Quits: mat001_ (~mat001@69.4.234.90) (Remote host closed the connection)
[23:01:04] <grym> it's a great help if you already kind of grok the CLR
[23:01:10] *** Joins: mat001 (~mat001@69.4.234.90)
[23:01:11] <Repiphany> System isn't a name, it's an available module presumably
[23:01:21] *** Quits: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[23:01:24] <grym> well, that's a name too
[23:01:32] *** Joins: lessshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[23:01:53] <jfcaron> It's not an available module until you import clr, I guess that's where I got tripped up.
[23:02:00] <grym> System is https://docs.microsoft.com/en-us/dotnet/api/system?view=net-6.0
[23:02:01] <grym> that system
[23:02:23] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:02:31] <jfcaron> I get that the clr.AddReference() could add stuff to my namespace, I didn't expect "import clr" to also do that.
[23:02:43] <grym> right, pythonnet is the glue that lets you do that
[23:02:54] <jfcaron> Oh well, design choice I guess.  I woulda left it as clr.System
[23:03:21] *** Quits: bluedust (~bluedust@117.207.236.117) (Ping timeout: 256 seconds)
[23:03:35] <bjs> jfcaron: I mean `import clr` is just running some py code somewhere, so it can do anything a function call could do
[23:03:42] <SnoopJ> which is "most things"
[23:04:02] <bjs> it's a weird design but there's nothing intrinsically special about what an "import" can do vs just a function call
[23:04:07] <jfcaron> I still feel justified in not expecting it to mess with the global namespace.
[23:04:23] <bjs> jfcaron: what you expect and what it *can* do are totally separate concerns :P
[23:04:59] *** Quits: mat001 (~mat001@69.4.234.90) (Remote host closed the connection)
[23:05:07] <Repiphany> I've never seen something "adding" a namespace that can be imported from if it couldn't already be imported from
[23:05:08] *** Joins: mat001 (~mat001@69.4.234.90)
[23:05:18] <jfcaron> My expectation is more about the social/cultural context of python and experience with other modules than the technical limitations, I guess.
[23:05:44] <Repiphany> Adding something to sys.path I guess
[23:05:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:06:09] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[23:06:26] *** Quits: ub (~Thunderbi@141.98.252.232) (Quit: ub)
[23:06:44] <grym> "Note Earlier releases of Python.NET relied on “implicit loading” to support automatic loading of assemblies whose names corresponded to an imported namespace. Implicit loading still works for backward compatibility, but will be removed in a future release so it is recommended to use the clr.AddReference method."
[23:06:55] <grym> jfcaron: you're not alone!
[23:07:46] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:08:10] *** Quits: Sailu44 (~Sailu44@94.85-84-245.dynamic.clientes.euskaltel.es) (Quit: Client closed)
[23:08:22] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 250 seconds)
[23:08:29] <george91> How can I bring my Python skills/knowledge to the next level?
[23:08:42] <aphysically> jinsun: you know, I bet it's possible to handle even the explosive cases I gave
[23:08:42] <bjs> george91: well that'll depend on what the current level is :P
[23:09:11] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 256 seconds)
[23:09:17] <SnoopJ> george91, read Python code, write Python code :)
[23:09:27] <bjs> george91: but pretty much all answers are going to be "Just use Python more, and question how things work when you see them"
[23:09:32] <aphysically> my idea is, instead of eagerly evaluating the literal math, only partially evaluate it enough for display (say, first 8 items or something), then don't evaluate anything else
[23:09:38] *** Joins: Sailuente44 (~Sailuente@94.85-84-245.dynamic.clientes.euskaltel.es)
[23:09:40] <SnoopJ> if there are particular things you want to learn more about, we might have more specific suggestions
[23:09:46] *** Quits: k2ro (~k2ro@195.158.249.12) (Quit: k2ro)
[23:09:52] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Quit: Leaving)
[23:10:01] <george91> bjs: Say I'm a backend developer with two years of work experience
[23:10:07] <aphysically> then, if you want to check if a literal is compatible, instead of determining all the valid literals, solve a constraint problem with the literal you're trying to check against as the answer
[23:10:28] *** Joins: k2ro (~k2ro@195.158.249.12)
[23:11:26] <george91> SnoopJ: thanks
[23:11:42] <aphysically> the mathematical operations are so restricted, and you can use an SMT solver to check
[23:11:43] <jinsun> jfcaron: check sys.meta_path before and after importing clr
[23:11:50] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 250 seconds)
[23:12:40] <sveinse> george91: Very open question, but one area I'd recommend my team to learn is async programming. It's somewhat a different mindset to programming, and it's extremely versatile once you get the gist of it. Especially if doing backend
[23:12:50] <aphysically> I suspect typical SMT solvers can handle the explosion trivially jinsun
[23:13:08] <SnoopJ> aphysically, that feels like the setup to a joke about Turing completeness
[23:13:42] <aphysically> :P, the context here is pretty straightforward
[23:13:43] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:13:53] <SnoopJ> granted :)
[23:13:56] <george91> sveinse: that makes sense. Do you think async with JS is better than Python, currently?
[23:14:03] <aphysically> mypy and pyright are implementing basic mathematical operations on literals in their type systems
[23:14:17] * SnoopJ only became aware of SAT/SMT in the last two years
[23:14:35] <jinsun> aphysically: yeah maybe but it can still get too slow, probably won't be for simple Unions that we'll encounter normally though
[23:14:41] <aphysically> so if you have a literal a=3 and a literal b=4, the type checker can infer c = a+b is of type Literal[7]
[23:15:28] *** Parts: Sailuente44 (~Sailuente@94.85-84-245.dynamic.clientes.euskaltel.es) ()
[23:15:41] <sveinse> george91: better is a subjective word. JS and Python have many similarities, and some differences. If you grasp the concepts in async, neither language is better than the other I'd say. Personally I prefer python, but others have other opinions.
[23:15:42] <aphysically> but you can have types that are unions of literals, like if a is 1 or 2 and b is 3 or 4, a+b is 4 or 5 or 6
[23:15:52] <jinsun> that will be useful for the shape typing stuff too
[23:15:58] <aphysically> and the current type checker implements this
[23:16:33] <aphysically> but I pointed out you can easily OOM/crash with pathological examples
[23:16:42] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[23:16:49] <SnoopJ> Python's bolting-on of asynchrony feels a little less developed than the same thing in JS, probably because it's gone through a lot of development in JS
[23:16:59] <evidlo> anyone know if there's a webtool that can load a code snippet from github and execute it via wasm?  I'd like to share a link with someone and have them immediately be able to execute it.  example: http://somewebtool.io/?url=github.com/evidlo/foobar/blob/master/snippet.py
[23:17:03] <aphysically> I gave an integer one where I did a*b*c*d*e*f*.. 12 times where each variable is an or of the first 50 primes
[23:17:11] *** Quits: cul8r (~cul8r@76.113.95.199) (Quit: Leaving)
[23:17:13] *** Joins: Macuser (~Macuser@2600:1003:b44b:8b77:119a:bf86:f49e:93cf)
[23:17:21] <aphysically> so there's C(50+12-1,12) integer literal possibilities
[23:17:53] <aphysically> or even simpler, doing strings of a union over the alphabet and adding them 9 times, so there's 26^9 possibilities
[23:17:59] <aphysically> https://github.com/python/mypy/issues/11990#issuecomment-1013328832
[23:18:30] <aphysically> so I was thinking that you can in general handle pretty large explosions by just not calculating this and instead solving the SMT problem with the literal you're trying to type check against as needed
[23:18:43] *** Quits: frmlof (~frmlof@70.243.238.191) (Quit: frmlof)
[23:18:57] *** Quits: csm3105 (~csm3105@static-90-220-24-46.ipcom.comunitel.net) (Quit: Leaving)
[23:19:03] <aphysically> then it both still works and you likely avoid slowness just for small explosions
[23:19:12] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:19:21] <aphysically> is any of this needed at all? probably not...
[23:19:29] *** Joins: FluffyMask (~masque@user/fluffymask)
[23:19:37] <sveinse> SnoopJ: yes, I'd agree to that. Python have a bigger diversity in available async libs, so the async community as a whole might seem a bit less advanced. For good and bad.
[23:19:59] *** Joins: frmlof (~frmlof@70.243.238.191)
[23:20:41] <george91> sveinse: nice. thank you for the thoughtful response
[23:20:42] *** Joins: ouestbillie (~gallup@142.169.82.16)
[23:21:50] <SnoopJ> sveinse, I would say the community/ecosystem is probably comparable, but the language itself just kinda has fewer "batteries included"
[23:22:14] <SnoopJ> I haven't written much async in either language though, so I am not really entitled to an opinion
[23:22:17] *** Quits: baltazar (~baltazar@193-226-249-203.pool.digikabel.hu) (Ping timeout: 240 seconds)
[23:22:19] *** Joins: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net)
[23:22:31] <sveinse> george91: on the more pythonic level, I'd perhaps suggest getting proficient with generators and iterators. That's a powerhouse once mastered.
[23:22:50] *** Quits: NiD27 (~nid27@49.205.146.21) (Remote host closed the connection)
[23:23:17] <jinsun> aphysically: yeah making it too general is going towards proof assistants territory
[23:23:50] *** Joins: sambauer64 (~sambauer6@86.121.131.207)
[23:24:13] <sveinse> SnoopJ: Yeah, I think you're right
[23:24:29] *** Joins: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu)
[23:24:30] <aphysically> jinsun: i mean, you can probably implement it with z3 :P
[23:24:58] <SnoopJ> sveinse, I don't necessarily think it's a bad thing for the language to "just" define coros, though.
[23:25:21] <george91> sveinse: took note of that
[23:25:37] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:26:54] <george91> In my experience, I've written a lot of JS async functions and I just find to be a lot enjoyable than in Python currently. I mean the way it works out-of-the box is just more intuitive.
[23:27:01] <SnoopJ> JS's inclusion of Promise as a primitive usually sticks out to me as something it has a leg up on, but OTOH Python has concurrent.futures ?
[23:27:34] *** Joins: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net)
[23:28:05] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[23:28:09] <energizer> the python equivalent is Coroutine
[23:28:11] <SnoopJ> or asyncio.futures, or...that kind of "where does that live, again?" question is part of my feelings on it
[23:28:18] *** Joins: dreamon (~dreamon@p57a4c526.dip0.t-ipconnect.de)
[23:28:21] *** Joins: oscurochu (~oscurochu@37.120.215.102)
[23:28:57] *** Quits: kdc (~kdc@196.211.197.178) (Quit: Leaving)
[23:29:01] <SnoopJ> energizer, do coroutines really express what Promise does? I feel like you have to wrap that stuff around them
[23:29:27] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:29:36] *** Joins: bitblit_ (~bitblit@gateway/tor-sasl/bitblit)
[23:29:59] *** Quits: ddavtian (~ddavtian@c-73-241-123-44.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[23:30:06] <energizer> i suppose js has more builtin stuff
[23:30:22] <energizer> Promise is actually twisted's Deferred
[23:30:46] <SnoopJ> yea. I think it may boil down to aesthetics, and Python errs on the side of the community leading the builtins
[23:30:59] *** Joins: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e)
[23:30:59] <sveinse> So then its more like asyncio.Future?
[23:31:01] <jinsun> aphysically: yeah, could be implemented, I have no idea how complicated that can be to maintain though, probably they'll keep it simpler and just implement fallback to int or str like Eric said in one of the comments
[23:31:01] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:31:05] <energizer> george91: my (strong) opinion is that https://trio.readthedocs.io/ is the best way to do async in python
[23:31:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:31:24] <SnoopJ> sveinse, yea Future is what I think of as an equivalent of Promise, but event loops probably have their own notion of it too
[23:31:26] *** Quits: morte_ (~user@181.209.236.50) (Remote host closed the connection)
[23:31:27] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:31:31] <SnoopJ> non-stdlib event loops, I mean
[23:31:43] <aphysically> jinsun: oh I didn't think Eric had commented on the long runtime specifically yet
[23:31:46] <SnoopJ> twisted gets bonus points for predating coros
[23:32:34] <jinsun> aphysically: he didn't say for long runtime but for the overflows and dividebyzero thing
[23:32:35] <sveinse> SnoopJ: I'm not that opinionated about having the eventloop in stdlib vs an external lib, TBH
[23:32:37] <energizer> sveinse: does asyncio.Future have .addCallbacks(okCallback, errCallback) like Deferred and Promise do?
[23:32:49] *** Quits: rickybob2 (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 256 seconds)
[23:33:01] <aphysically> oh
[23:33:08] <jarthur> You can add callbacks like that yes. It makes for a hard to follow program, just like it does in JS though.
[23:33:09] <george91> energizer: thanks for bringing up trio. This is an example of why I like async in JS more currently, in Python you would probably need to use external library to work well with async.
[23:33:09] <sveinse> energizer: similar yes. .add_done_callback()
[23:33:11] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:33:13] <jinsun> aphysically: but same could be applied to long runtimes too
[23:33:19] <SnoopJ> energizer, it has add_done_callback(), I'm not sure what the equivalent would be for errors
[23:33:40] <energizer> sveinse: it needs to handle the error case
[23:33:48] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[23:33:51] <SnoopJ> I think 'done' might capture both cases
[23:33:58] <energizer> george91: i can't think of a situation where i would use async without external libraries
[23:33:59] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[23:34:31] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[23:34:34] <SnoopJ> so maybe inside that callback you do: `def cb(fut): if fut.exception(): handle_err(fut); else: handle_ok(fut)`
[23:34:55] *** Joins: MrFantastik (~f@2607:f598:bbda:4f0:ab71:50b:1d77:f144)
[23:35:03] * SnoopJ is out on a limb as someone who doesn't write async
[23:35:25] *** Quits: Algernon91 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e) (Ping timeout: 240 seconds)
[23:35:26] <jarthur> Yes, done captures both cases. Even better pattern for that would be to wrap try/except around fut.result()
[23:35:37] <george91> energizer: I mean, in JS you don't have to install something like `trio` to use async nicely
[23:35:38] <jarthur> Either way, the low-level callbacks interface generally isn't recommended
[23:36:01] <sveinse> energizer: For me trio represents a somewhat novel approach to async, so I haven't really used it that much. But I hear very much good things about it, so when I'm spreading the news of async, its on my list :D
[23:36:06] *** Quits: Siecje (~Siecje@108.175.228.76) (Ping timeout: 250 seconds)
[23:36:11] *** Joins: arinov (~arinov@213.194.126.155)
[23:36:13] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[23:36:15] <jarthur> george91 there really isn't a a way to compare something like that with JS because you can't cancel things in JS
[23:36:38] <SnoopJ> sveinse, the docs certainly read like a novel
[23:36:41] <george91> but yeah either way, we can still make it happen. :D
[23:37:25] <sveinse> jarthur: it depends on how close to the HW you sit, so I've had to deal with CBs many times. And mostly in the context of making an interface from backend to async front-end
[23:37:29] <energizer> george91: my view is that the big difference is moving from zero to at-least-one dependency. once you have one dependency, such as a protocol implementation like asyncssh or httpx, it's not much trouble at all to add another library like trio.
[23:37:48] <george91> energizer: agree
[23:38:21] <george91> Frameworks like Kivy recommends using trio
[23:38:29] <energizer> omg really?
[23:38:34] <george91> yup
[23:38:35] <energizer> that's good news
[23:40:08] <jarthur> george91 re "in JS you don't have to install something like `trio` to use async nicely", many would disagree, and that's why there are now projects like https://frontside.com/effection
[23:40:09] <sveinse> I've written a twisted app (await mode, not callbacks) integrated in a tkinter GUI. THAT was a mess. So many crossings between sync and async methods. Then you'll need to keep your tounge straight
[23:40:18] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:41:00] <george91> what are the best practices you can recommend to make a Flask API secure?
[23:41:19] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[23:41:44] <george91> jarthur: Hey, thanks for pointing that out
[23:41:59] <sveinse> george91: secure, like in https? Install nginx as a ssl terminator in front of flash TBH
[23:42:17] *** Quits: MrFantastik (~f@2607:f598:bbda:4f0:ab71:50b:1d77:f144) (Ping timeout: 240 seconds)
[23:42:27] <SnoopJ> serious answer: minimize the number of insecure things you do
[23:42:41] <energizer> george91: not flask but good intro https://docs.djangoproject.com/en/4.0/topics/security/
[23:42:44] <george91> SnoopJ: haha
[23:43:01] *** Joins: MrFantastik (~f@2607:f598:bbda:4f0:ab71:50b:1d77:f144)
[23:43:08] <SnoopJ> george91, it helps to have a model of what "secure" means to you when going into a question like that. If you cast too broad a net, you end up at "computation cannot be trusted"
[23:43:45] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[23:43:54] *** Quits: VaniaPy (~VaniaPy@46.12.137.214.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[23:43:55] <SnoopJ> in other words, "secure" is less relevant than "secure against [specific kind of attack/failure]"
[23:44:08] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:45:02] *** Quits: Akuw (~kenny@2800:150:118:156e:1f71:16d7:401b:a43d) (Quit: Leaving)
[23:45:37] *** Quits: johnjaye (~pi@154.6.152.74) (Quit: WeeChat 3.3)
[23:45:46] <sveinse> SnoopJ: I can't agree more. I'm often met with product owners that want's security, but once prodded, no real idea on what it should achieve. It has a checklist-feel over it only. Baah.
[23:46:10] <george91> hmmm sorry for making that question a bit too broad for some. but I'm kinda looking for articles like energizer shared, that shows something like the specific things that someone can do to make the app secure in any means possible
[23:46:48] <SnoopJ> a helpful read: https://www.usenix.org/system/files/1401_08-12_mickens.pdf
[23:47:30] <SnoopJ> "Basically, you're either dealing with Mossad or not-Mossad. If your adversary is not-Mossad, then you'll probably be fine if you [take care of low-hanging fruit]"
[23:47:36] <matsaman> Mickens, what a cool name
[23:47:39] <grym> sveinse: fear sells so great, though
[23:47:58] <matsaman> "If your adversary is the Mossad, YOU’RE
[23:47:58] <matsaman> GONNA DIE AND THERE’S NOTHING THAT YOU CAN DO
[23:48:01] <matsaman> ABOUT IT." whoops
[23:48:02] *** Joins: delvian (~delvian@41.13.198.210)
[23:48:06] <matsaman> thanks PDF =P
[23:48:08] *** Quits: delvian (~delvian@41.13.198.210) (Read error: Connection reset by peer)
[23:48:27] *** Joins: delvian (~delvian@41.13.198.210)
[23:48:44] <matsaman> this is hilarious
[23:48:45] <SnoopJ> sveinse, oh believe me, I know. My latest project revolves around moving our encryption machinery onto customer sites, and the powers that be haven't really given enough thought to how that's going to work without effectively giving customers the ability to circumvent our encryption
[23:48:50] <energizer> that advice is for personal computing. if you're running a web service, the set of best practices aren't just "don't click on viagra ads"
[23:48:55] *** Quits: roxfan (~roxfan@185.206-129-109.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[23:49:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:49:08] <matsaman> so true, though, people don't know who they're protecting themselves from
[23:49:11] <SnoopJ> energizer, I think the points he's making there generalize well
[23:49:50] <matsaman> you protect yourselves from common things more than professionals. Professionals get the job done
[23:50:12] <energizer> imo that article diminishes the complexity of practical security engineering
[23:50:29] <SnoopJ> in what way?
[23:50:30] <matsaman> it could use some diminishing sometimes
[23:50:38] *** Quits: a0z1 (~a0z1@cpc158779-hari22-2-0-cust168.20-2.cable.virginm.net) (Remote host closed the connection)
[23:51:01] <matsaman> most people are protecting themselves merely from what a government can legally do, or they're protecting themselves from a drug addict who just walked off with their laptop, IMO
[23:51:19] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[23:51:27] <matsaman> Tom Cruise is always going to get your data, it's just that your data isn't important to Tom Cruise
[23:51:35] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[23:52:33] <sveinse> From (I think it is) mid 2024, it will be compulsory for ALL wireless devices to have implemented cybersecurity means and it will be tied to the regulatory radio approvals.
[23:53:07] <sveinse> They haven't debated yet what specifically that entails, but its going to be exiting to see
[23:53:20] <energizer> the article describes "security people", but he's actually talking about academic cryptographers, not industry-facing cryptographers
[23:53:21] *** Joins: roxfan (~roxfan@109.129.206.185)
[23:53:24] <SnoopJ> perhaps 🔥exciting🔥
[23:53:26] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[23:53:45] <SnoopJ> energizer, okay, and that diminishes the industry how?
[23:53:47] *** Quits: spawnmc (~spawnmc@user/spawnmc) (Ping timeout: 256 seconds)
[23:54:16] <energizer> well, "just follow the basic rules lol" is wrong advice
[23:54:55] <SnoopJ> if that were the premise, it would be the wrong advice yes
[23:55:07] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[23:55:26] <energizer> well look at the table on page 2
[23:55:29] <energizer> that's what it says
[23:56:17] <SnoopJ> energizer, do you think his intent was to generalize that one threat model to all threat models?
[23:56:37] <SnoopJ> or perhaps to illustrate that having a threat model is important to avoid spinning one's wheels on things that don't really matter
[23:56:40] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[23:56:57] <SnoopJ> (or aren't really actionable which is about the same thing)
[23:58:02] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:58:26] <energizer> i can't speak to his intent, but plenty of security engineers won't find their work covered in that article
[23:58:41] <SnoopJ> agreed, but I don't see how that diminishes the industry
[23:58:46] *** Joins: pycurious (~Adium@user/pycurious)
[23:59:36] <SnoopJ> there are probably more topical articles but that's the one that I always come back to when I need to be reminded that security without a threat model is a waste of time
[23:59:47] *** Joins: Julian (~tos9@python/site-packages/Julian)
