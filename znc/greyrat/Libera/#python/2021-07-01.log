[00:00:40] *** Quits: test9753 (~test9753@117.217.238.29) (Ping timeout: 246 seconds)
[00:00:43] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[00:01:39] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[00:03:06] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 240 seconds)
[00:05:52] *** Joins: Pickchea (~private@user/pickchea)
[00:07:19] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[00:08:07] *** Joins: derelict (~derelict@user/derelict)
[00:08:59] *** Joins: justinf210 (~justinf21@12.sub-97-44-2.myvzw.com)
[00:11:55] *** Quits: tspng (~tspng@80-218-192-223.dclient.hispeed.ch) (Remote host closed the connection)
[00:12:14] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[00:12:31] *** Joins: tspng (~tspng@80-218-192-223.dclient.hispeed.ch)
[00:12:43] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[00:13:54] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 272 seconds)
[00:14:42] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 240 seconds)
[00:14:44] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[00:15:25] *** Joins: akaWolf (~akaWolf@akawolf.org)
[00:15:59] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[00:16:28] *** Joins: tspng_ (~tspng@80-218-192-223.dclient.hispeed.ch)
[00:17:04] *** Quits: tspng (~tspng@80-218-192-223.dclient.hispeed.ch) (Ping timeout: 272 seconds)
[00:17:13] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:18:01] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[00:18:12] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[00:18:59] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[00:19:26] *** Joins: Hackerpcs (~user@user/hackerpcs)
[00:19:34] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[00:20:20] *** Quits: odrling (~odrling@korone.aidoru.agency) (Quit: see you space cowboy)
[00:20:21] *** Joins: zeden (~zeden@user/zeden)
[00:20:38] *** Joins: odrling (~odrling@korone.aidoru.agency)
[00:22:26] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[00:22:31] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[00:22:43] *** Joins: sazawal (~sazawal@106.207.226.37)
[00:22:53] <pyzozord> I forgot how to install a project with pipx for my current user
[00:22:58] <pyzozord> was it just pipx install?
[00:23:17] <grym> yes
[00:23:19] <darksun> yep
[00:23:19] *** Joins: jjasghar (~quassel@cpe-70-112-74-178.austin.res.rr.com)
[00:23:23] <grym> pipx install --help has more options, ofc
[00:23:49] <Wu> topoi: try marking the block you want to indent, then C-x > (indent more/right) C-x < (indent less/left)
[00:23:59] <Wu> that should work if you have python mode enabled
[00:24:41] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[00:24:42] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[00:24:46] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[00:24:51] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[00:25:06] *** Quits: justinf210 (~justinf21@12.sub-97-44-2.myvzw.com) (Ping timeout: 240 seconds)
[00:25:28] <neilthereildeil> is there any way for one process of a multiprocessing application to send a binary signal to another process? similar to Windows Events?
[00:25:46] *** Joins: justinf210 (~justinf21@12.sub-97-44-2.myvzw.com)
[00:25:55] <pyzozord> perfect! thanks!
[00:26:05] *** Parts: pyzozord (~pyzozord@user/pyzozord) ()
[00:27:07] *** Joins: Payam18 (~Payam@host-78-79-172-20.mobileonline.telia.com)
[00:27:19] <Payam18> Hi
[00:27:26] <Payam18> Talking feom the pub
[00:27:35] <Payam18> Oh sorry wrong channel
[00:28:33] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:30:19] *** Quits: semanticz0 (~semanticz@202.164.136.255) (Read error: Connection reset by peer)
[00:32:54] *** Quits: justinf210 (~justinf21@12.sub-97-44-2.myvzw.com) (Ping timeout: 272 seconds)
[00:33:37] *** Quits: Payam18 (~Payam@host-78-79-172-20.mobileonline.telia.com) (Quit: Client closed)
[00:33:58] <sazawal> Hi all. I have an issue with multiprocessing that I can't figure out. I get this error, "RuntimeError: Queue objects should only be shared between processes through inheritance". In my code, I have a dedicated prestarted process which launches a function when demanded by the user. The user sends the demand via mp-Queue. The function to be run is wrapped in a decorator. So far it works until I decide to have the argument of the function as a Queue
[00:33:58] <sazawal> variable. Here is the code, https://bpa.st/ULTA
[00:35:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 268 seconds)
[00:35:05] <sazawal> The function call a1 works as expected, while a2, which is a copy of a1 except having a Queue variable as an argument, fails.
[00:35:24] *** Joins: Auron (Auron956@user/auron)
[00:36:57] *** Joins: unyu (~pyon@user/pyon)
[00:37:35] <bjs> sazawal: there' a lot going on here
[00:38:44] <Payam> back home. two big beers
[00:38:47] <Payam> oh sorry
[00:38:51] <Payam> wrong channel again
[00:38:57] <sazawal> bjs, Well all this because I simply wanted the user (script writer) to call the function, making it internally run in a separate process. That's why the decorator and shit.
[00:39:08] *** Joins: cheater1__ (~Username@user/cheater)
[00:39:14] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[00:39:15] *** cheater1__ is now known as cheater
[00:39:20] <bjs> sazawal: the problem here is that you cannot "send" a mpQueue  to another process
[00:40:13] <sazawal> bjs, If you can't, then, how would you communicate with it?
[00:40:49] <sazawal> I mean thread queues work the same way. I used to send it as the argument of the target thread function.
[00:41:08] <bjs> sazawal: well that's different because in threaded world that's actually what happens
[00:41:27] <sazawal> I see
[00:41:29] <bjs> but here you're in a different process so when you send it (over the other queue) it has to package it up and unpackage it on the other end
[00:41:40] <sazawal> So, how would I do it for processes?
[00:41:45] *** __jmcantrell__ is now known as jmcantrell
[00:41:52] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[00:43:26] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[00:43:54] <bjs> sazawal: the easiest way is to use a multiprocessing.Manager object
[00:45:06] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:45:22] <sazawal> I have seen the discussions on it in forums, but never used it. So, how does it fit in my problem? Does it only manage the queue communication or also the running processes?
[00:45:59] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[00:46:04] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 265 seconds)
[00:47:20] *** Joins: Celeo (~Celeo@user/celeo)
[00:47:30] *** Joins: dcand (~dcand@user/dcand)
[00:47:31] <bjs> sazawal: https://bpa.st/J6EQ  might help explain a bit clearer what is actually causing the problem here
[00:47:40] *** Joins: twobitsprite (~twobitspr@66.115.166.148)
[00:49:17] <bjs> note that the problem is trying to put a mpQueue inside another mpQueue
[00:50:41] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:50:45] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 256 seconds)
[00:51:17] <bjs> you _could_ put a managed (manager.Manager().Queue) object inside the mpQueue though
[00:51:29] *** Quits: sazawal (~sazawal@106.207.226.37) (Remote host closed the connection)
[00:51:30] <bjs> (note that a managed Queue is much slower)
[00:51:57] *** Joins: sazawal (~sazawal@106.207.226.37)
[00:52:23] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[00:53:09] <AhmedAmerican> Payam: that's not cheers party :D
[00:54:26] *** Joins: Necoro (~Necoro@user/necoro)
[00:54:32] *** Quits: aw1 (~aw1@203.171.246.149) (Remote host closed the connection)
[00:55:42] *** Joins: jdmark2 (~jdmark@67.8.137.130)
[00:57:26] *** Quits: jdmark2 (~jdmark@67.8.137.130) (Client Quit)
[00:57:29] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[00:57:53] *** demophoon5 is now known as demophoon
[00:58:43] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[00:59:18] *** Quits: sazawal (~sazawal@106.207.226.37) (Read error: Connection reset by peer)
[01:00:22] *** Quits: CrazyEddy (~CrazyEddy@overkill.epicsol.org) (Ping timeout: 252 seconds)
[01:00:59] *** Quits: GregTheHun (~GregTheHu@2601:300:4500:3d41:9d1f:1512:c7da:4108) (Quit: GregTheHun)
[01:01:18] *** Joins: sazawal (~sazawal@27.62.170.20)
[01:01:44] *** Joins: waynew (~wayne@user/waynew)
[01:02:17] *** Joins: lazar (~lazar@user/lazar)
[01:02:56] <lazar> def f(v=1):  can you mutate v somehow just like you would be able to if v was a list?
[01:03:13] *** Quits: magla (~gelignite@55d49c7c.access.ecotel.net) (Quit: Stay safe!)
[01:03:26] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[01:03:43] <bjs> lazar: no,  it's the object itself (the list/int/etc) which is mutable or not
[01:03:47] <bjs> and ints are not mutable
[01:05:25] *** Quits: Payam (~Payam@138.106.57.132) (Ping timeout: 246 seconds)
[01:05:33] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 268 seconds)
[01:05:43] *** Joins: waynew (~wayne@user/waynew)
[01:05:52] <sazawal> bjs, Sorry I got disconnected. Let me check the link
[01:06:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:07:09] <SnoopJ> lazar, there's f.__defaults__ if you want to change the value associated with an argument, but this is a pretty magical thing to do and I would recommend strongly against doing it
[01:07:22] *** Quits: iJens (~ijens@user/ijens) (Remote host closed the connection)
[01:07:46] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-ddd7-9f7f-1975-d04b.fixed6.kpn.net)
[01:08:17] <SnoopJ> if you're writing the function: `def f(v=None):` and call another function if `v` is the default sentinel value. If it's someone else's function: `def my_f(v=newdefault): return other_f(v=v)`
[01:10:14] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[01:10:48] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Read error: Connection reset by peer)
[01:10:54] <nedbat> lazar: is this to solve a problem, or just curious?
[01:11:02] *** Joins: pnoud (~pnoud@user/pnoud)
[01:11:17] <sazawal> bjs, I understand the issue here.
[01:12:13] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[01:14:38] <bjs> sazawal: if you take my code and change it so that bq is a manager.Queue, then it would work.  You can also try re-structure your code so that you don't have queues which pass around other queues
[01:14:54] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:16:11] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[01:16:15] *** Quits: doc (~doc@user/doc) (Ping timeout: 256 seconds)
[01:16:28] <lazar> nedbat: the latter. Thanks everyone.
[01:16:31] <sazawal> bjs, Well, that is what I was thinking if I can avoid such queue transfers via a queue.
[01:17:06] <sazawal> Looking at the other thing. Say, if bq is a manager.Queue, then I can pass it via a queue?
[01:17:42] *** Quits: resmo (~resmo@2a00:d420:9:8a00:7238:fa75:f9a6:5363) (Remote host closed the connection)
[01:17:51] *** Joins: doc (~doc@user/doc)
[01:17:58] *** Joins: resmo (~resmo@2a00:d420:9:8a00:f41:8ba8:4770:4856)
[01:18:46] *** Quits: jvalleroy (~quassel@user/jvalleroy) (Remote host closed the connection)
[01:19:28] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:19:55] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[01:20:12] <wodim> hello. (datetime.datetime.now().replace(minute=59) - datetime.datetime.now()).seconds - why does the return value of this have a resolution of minutes?
[01:21:02] *** Quits: Barones (~Barones@2804:48dc:8500:0:7896:1bc4:250d:b580) (Quit: Leaving)
[01:21:23] *** Quits: pioto (~pioto@user/pioto) (Quit: leaving)
[01:22:12] *** Quits: Jmtrix (~qed@user/jmtrix) (Ping timeout: 244 seconds)
[01:23:07] <sazawal> Let me think over it more. Thanks by the way bjs. I will come back here when I have something concrete.
[01:23:14] *** Joins: se-sm-ca (~sean@user/se-sm-ca)
[01:23:22] *** Quits: sazawal (~sazawal@27.62.170.20) (Quit: Leaving)
[01:24:06] <nedbat> wodim: because the seconds always match. it's only the minutes field that will differ, so the difference will always be a whole number of minutes.
[01:24:22] *** Joins: LordKalma_ (~LordKalma@static.134.3.217.95.clients.your-server.de)
[01:24:22] *** Quits: LordKalma_ (~LordKalma@static.134.3.217.95.clients.your-server.de) (Client Quit)
[01:24:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[01:24:51] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f) (Quit: Leaving)
[01:25:30] *** Quits: drew (~drew@user/drew) (Ping timeout: 240 seconds)
[01:25:31] <wodim> nedbat: I feel really stupid now!
[01:25:37] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:25:41] *** Joins: LordKalma_ (~LordKalma@2a01:4f9:c011:203b::1)
[01:25:56] <nedbat> wodim: don't :)
[01:26:20] <wodim> I was expecting the same value as if I had done .replace(minute=59, second=0)
[01:28:10] <gimzmoe> What's a good way to make mpi4py not poll my CPU into thermal overload when it's doing nothing but .recv(), I understand that's not a very HPC way to think but I'm trying for intermittent HPC if that makes sense
[01:28:30] <lazar> are there any work being done towards making python a full fledged systems programming language? llvm stuff?
[01:29:14] *** Quits: LordKalma (~LordKalma@2a01:4f9:c010:78d8::1) (Ping timeout: 244 seconds)
[01:29:17] *** Joins: digital_carver (~DCarver@49.205.154.191)
[01:30:46] *** LordKalma_ is now known as LordKalma
[01:33:12] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Quit: Client closed)
[01:33:26] *** Joins: Barones (~Barones@2804:48dc:8500:0:7896:1bc4:250d:b580)
[01:34:04] *** Quits: dcand (~dcand@user/dcand) (Quit: dcand)
[01:35:49] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:37:06] *** Quits: Barones (~Barones@2804:48dc:8500:0:7896:1bc4:250d:b580) (Client Quit)
[01:39:18] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[01:40:43] *** Joins: azazello (~azazello@109.75.158.195)
[01:41:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:41:32] *** Joins: miktemp2 (~miktemp@user/miktemp2)
[01:41:47] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:41:48] *** Joins: v8789 (v8789@user/blobberdene)
[01:42:02] <jim> lazar, you mean a compiled language?
[01:43:08] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[01:44:57] <SnoopJ> lazar, what does "full fledged systems programming language" mean to you?
[01:45:22] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[01:46:22] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 272 seconds)
[01:46:55] *** Joins: hgg (~hgg@5.79.71.148.rev.vodafone.pt)
[01:48:21] <lazar> jim: yep.
[01:49:05] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[01:49:48] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[01:50:08] <nedbat> lazar: there are a few project that do that (Nuitka, Cython), but keep in mind the dynamic nature limits what can be done.
[01:50:26] <lazar> I see, nedbat.
[01:50:30] <nedbat> lazar: what sorts of things can't you do without a "full-fledged systems programming language"?
[01:50:57] <lazar> Optimal performance and predictability.
[01:51:08] <lazar> predictable execution*
[01:51:17] <lazar> And bare metal stuff.
[01:51:33] *** Parts: miktemp2 (~miktemp@user/miktemp2) (Bye)
[01:51:37] <lazar> i.e. write code for the hardware basically.
[01:51:50] *** mcint is now known as mci
[01:51:53] <lazar> And compile to machine code.
[01:51:54] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[01:52:03] <lazar> with the above criteria fulfilled.
[01:52:13] <grym> lazar: then probably no.
[01:52:22] <nedbat> lazar: can you say more about predictable execution?
[01:52:44] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[01:52:47] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[01:52:53] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.2)
[01:53:01] *** Joins: srilyk (~wayne@user/waynew)
[01:53:08] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[01:53:49] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[01:54:01] *** Joins: waynew (~wayne@user/waynew)
[01:54:04] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[01:54:17] <SnoopJ> Numba is also worth mentioning in that suite of projects, it's built atop LLVM
[01:54:20] <nedbat> lazar: why would you add "compile to machine code"?  Why do you care if that happens?
[01:55:31] <SnoopJ> to me a "systems" language is one you might use to write an OS. I personally doubt Python will ever be a great first choice for that, it's so abstract
[01:55:41] *** Quits: Geronimo (~Geronimo@user/geronimo) (Quit: I am away)
[01:55:51] <SnoopJ> but that's why we asked what it means to you
[01:56:16] *** Joins: Geronimo (~Geronimo@user/geronimo)
[01:56:20] <SnoopJ> note that extant systems languages (namely C/C++) are not always predictable, they admit programs containing undefined behavior
[01:56:56] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:57:11] <lazar> predicted UB :)
[01:57:26] <SnoopJ> lazar, what does that mean?
[01:57:26] *** Joins: anddt (~anddt@net-93-144-12-118.cust.dsl.teletu.it)
[01:57:36] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 265 seconds)
[01:57:36] <lazar> you know what the UB cases are
[01:57:42] <lazar> it's in the standards
[01:57:49] <SnoopJ> lazar, UB means the implementation can do literally anything it wants
[01:58:07] <graingert> it means the implementation can summon Ultra Beasts
[01:59:00] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[01:59:47] <hodapp> I'm not aware of there being any real call to use Python for system-level stuff.
[02:00:42] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Read error: Connection reset by peer)
[02:01:00] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[02:01:08] *** Joins: Gerula (~Gerula@user/gerula)
[02:01:13] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[02:01:25] <hodapp> things like syscalls and the C interoperability are already there
[02:02:08] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[02:02:46] <hodapp> but a lot of things are just too far out of bounds, like e.g. if you need hard scheduling limitations, strict constraints on memory usage, or more flexible scheduling
[02:02:53] <ssbr> lazar: the closest thing is nuitka, but really Python will never be good for what C/C++/Rust are designed for.
[02:03:06] <ssbr> I can see it eating at the edges though
[02:03:13] <ssbr> errr, not nuitka
[02:03:15] <ssbr> numba
[02:03:48] <ssbr> http://numba.pydata.org/ -- numba has legitimately taken away some cases where, previously, I would've wanted to write e.g. OpenCL C
[02:03:55] <ssbr> (not that OpenCL C is really a thing anymore)
[02:04:14] <hodapp> what is it nowadays for OpenCL
[02:04:16] <hodapp> ...?
[02:05:25] <ssbr> hodapp: you'd normally use some other language that compiles to SPIR-V, such as WGSL (that's very new) or -- there was some C++ framework for doing this, was it SYCL?
[02:05:41] *** mci is now known as ay
[02:05:48] *** ay is now known as mcint
[02:06:00] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[02:06:12] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:06:42] <ssbr> maybe I'm just biased from the people I listen to not even using OpenCL (anymore), but rather the compute APIs from DX, vulkan, or I guess now WebGPU
[02:07:30] <ssbr> the diagram here (under "SPIR-V Open Source Ecosystem") is really nice: https://www.khronos.org/spir/
[02:07:33] <tunixman> Yeah, it's SYCL.
[02:07:41] <BtbN> If you can get the job done with something entirely generic, why not?
[02:08:27] *** Quits: frostschutz (~frostschu@2a01:c23:7996:3e00:43c6:de01:9266:99ea) (Quit: Leaving)
[02:08:29] <tunixman> btw here's the original "Systems Language" working definition and context https://wiki.tcl-lang.org/page/Ousterhout%27s+Dichotomy
[02:09:02] <tunixman> It sort of gained meme status from there, sort of like "webscale" but maybe without the negative connotations...
[02:09:05] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:09:35] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:09:44] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:09:52] *** Joins: mickey (~user@user/mickey)
[02:10:09] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:10:21] *** Joins: vladoski (~vladoski@2001:b07:add:d406:2999:98c8:678:d1df)
[02:10:22] <tunixman> hodapp: pypy has a restricted subset called rpython that's a bit better defined and might be interesting https://rpython.readthedocs.io/en/latest/faq.html
[02:12:42] <ssbr> RPython is not really a general-purpose replacement, and I'm not even sure I'd write RPython in a new interpreter project (rather than using Java and Truffle/Graal)
[02:14:37] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[02:15:18] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:15:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:15:56] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Remote host closed the connection)
[02:16:20] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:17:07] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:18:29] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[02:19:31] *** Joins: NeoCore (~neocore@45.152.181.180)
[02:20:06] *** Joins: northernsage (~northerns@187.107.158.146)
[02:20:24] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[02:20:40] <tunixman> Hahah yeah, it even gives that disclaimer, but if you want guarantees on space and complexity it's probably not terrible.
[02:20:51] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 256 seconds)
[02:21:12] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[02:21:27] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[02:21:29] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[02:21:34] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:21:36] <tunixman> hodapp: if you're just looking for memory layout guarantees https://docs.python.org/3/library/struct.html is pretty reasonable.
[02:21:48] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Killed (tin.libera.chat (Nickname regained by services)))
[02:21:48] *** __jmcantrell__ is now known as jmcantrell
[02:23:18] <SnoopJ> tunixman, bytes doesn't necessarily makes guarantees about layout in memory
[02:23:23] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[02:23:23] <ssbr> tunixman: you probably want to direct that at lazar
[02:23:29] <tunixman> oh sorry.
[02:23:29] <SnoopJ> but that module is useful when (un)packing
[02:23:54] <SnoopJ> it's usually best to just forget memory exists in Python, the language doesn't really have concepts for it
[02:24:15] <SnoopJ> (memory usage of a program is an exception, of course)
[02:24:17] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:24:35] *** Joins: audiocat (~audio@2603-8081-1800-eb5b-1318-d982-9fef-6b65.res6.spectrum.com)
[02:25:24] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:25:34] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 258 seconds)
[02:25:42] <tunixman> The struct module seems to make the same guarantees the platform C compiler does, which is usually what you need.
[02:26:06] <tunixman> i.e. if the compiler would do something different on two different platforms, the struct module would too.
[02:26:08] <SnoopJ> tunixman, it makes guarantees about the resulting bytes object (which is a Sequence). The implementation is not obligated to store such an object in any particular way in memory (or indeed, in memory at all)
[02:26:09] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Client Quit)
[02:26:20] *** Quits: p-i- (~Ohmu@node-n6b.pool-118-173.dynamic.totinternet.net) (Read error: Connection reset by peer)
[02:26:35] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[02:26:39] <tunixman> Well yeah, but that's kind of across the board.
[02:26:51] <SnoopJ> right, the language doesn't really admit the existence of the concept
[02:27:08] <SnoopJ> so you don't get guarantees pretty much ever, except when you're using a library wrapped around a language that _does_
[02:27:14] <SnoopJ> guarantees about memory*
[02:28:20] <SnoopJ> you can make stronger statements about a particular implementation of Python based on whatever it does
[02:28:42] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 240 seconds)
[02:29:25] *** Joins: arcy (~arcy@ip5b43c26f.dynamic.kabel-deutschland.de)
[02:30:06] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:30:33] <SnoopJ> in CPython that's something like "if the object needs no more than 512 bytes it's located in the arena allocation system somewhere" and each builtin type is a struct with such-and-such fields
[02:30:53] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Read error: Connection reset by peer)
[02:31:09] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[02:32:36] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Remote host closed the connection)
[02:33:49] <SnoopJ> hmm, I'd never thought about it before, but I guess that means that lists larger than about 512//sizeof(PyObject*) are going to be raw malloc()'d. Neat!
[02:33:53] *** Joins: tlaxkit (~hexchat@170.253.43.19)
[02:34:33] <SnoopJ> or ah, I guess it's the ob_item member, not the object itself
[02:36:13] *** Quits: dudek (~dudek@185.150.236.112) (Quit: Leaving)
[02:37:04] <Donitz> what is the prefered method for having a multi-choice argument to a function
[02:37:10] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:d9f9:7ba2:7c1:ca06) (Read error: Connection reset by peer)
[02:37:10] <Donitz> like interpolation=MEAN
[02:37:11] <Donitz> etc.
[02:37:21] <grym> Donitz: enums, or a dict with string keys
[02:37:30] <tunixman> C makes the same "guarantees" as Python in that sense...
[02:37:35] <Donitz> python has enums?
[02:37:38] <Donitz> Why did I not know that
[02:37:48] <grym> Donitz: yes.  they're kind of clunky, but they're there
[02:37:51] <grym> since 3.4? 3.5
[02:37:57] <grym> 3.4
[02:37:59] <Donitz> ah
[02:38:01] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[02:38:04] *** Quits: torandu (~sean@90.222.17.57) (Quit: leaving)
[02:38:09] <Donitz> I guess it's because it's handled as a module, rather than part of the language
[02:38:10] <tunixman> i.e. you don't have guarantees about memory layout, sizes, etc unless you're talking about a very specific compiler, version, and platform.
[02:38:19] *** Quits: rany (~rany@user/rany) (Read error: Connection reset by peer)
[02:38:20] *** Quits: meatballs (~meatballs@2001:470:69fc:105::633) (Read error: Connection reset by peer)
[02:38:20] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (Read error: Connection reset by peer)
[02:38:22] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Read error: Connection reset by peer)
[02:38:22] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Read error: Connection reset by peer)
[02:38:22] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Read error: Connection reset by peer)
[02:38:23] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[02:38:24] *** Quits: PantelicGR2 (~pantelicg@user/pantelicgr) (Read error: Connection reset by peer)
[02:38:25] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Write error: Connection reset by peer)
[02:38:25] *** Quits: ronny (~ronny@2001:470:69fc:105::b57) (Read error: Connection reset by peer)
[02:38:25] *** Quits: archwizard (~archwizar@2001:470:69fc:105::929) (Write error: Connection reset by peer)
[02:38:25] *** Quits: penguinbrian (~penguinbr@2001:470:69fc:105::33d2) (Read error: Connection reset by peer)
[02:38:27] *** Quits: bgardner (~bgardner@2001:470:69fc:105::8a8) (Read error: Connection reset by peer)
[02:38:27] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Read error: Connection reset by peer)
[02:38:27] *** Quits: jwon (~jwon@user/jwon) (Read error: Connection reset by peer)
[02:38:32] <tunixman> But I don't think any of that was the original question, and defintiely wasn't what I had in mind when I answered.
[02:38:33] *** Quits: orbatos[m] (~orbatos@user/orbatos) (Write error: Connection reset by peer)
[02:38:34] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Write error: Connection reset by peer)
[02:38:34] *** Quits: evidlo (~evidlo@2001:470:69fc:105::7fc) (Write error: Connection reset by peer)
[02:38:34] *** Quits: BrenBarn (~brenbarn@2001:470:69fc:105::2da2) (Write error: Connection reset by peer)
[02:38:58] <nedbat> seems like the question was 30 minutes ago, and the asker is gone :)
[02:39:41] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[02:39:49] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:39:51] <tunixman> Sorry, I got sidetracked by some other answerer.
[02:40:05] *** Joins: northernsage (~northerns@187.107.158.146)
[02:40:41] <Donitz> MONDAY = auto()
[02:40:42] <Donitz> uff
[02:40:44] <Donitz> that's kinda ugly
[02:40:54] <Donitz> but also again, a limitation in that enums are clearly not defined as part of the language
[02:41:59] <Donitz> well, since python is dynamically typed, in this case an enum struct is no better than just defining a variable directly
[02:42:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:42:21] <Donitz> like INTERPOLATION_MEAN = 1 INTERPOLATION_BILINEAR = 2
[02:42:31] <grym> not quite
[02:43:10] <hodapp> tunixman: along the same lines, Python provides no guarantee that any operation will ever complete in finite time, as dynamic allocators and garbage collectors require unbounded time.
[02:43:31] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 256 seconds)
[02:44:29] <tunixman> neither do most systems languages, and when you add the way actual hardware works there's pretty much no guarantees of the kind that python also doesn't have anywhere.
[02:44:34] <hodapp> but I'm not sure how "memory layout" became the thing of relevance as I didn't exactly mention it
[02:44:41] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[02:45:08] <tunixman> It's one of the things that's included in "systems programming languages" typically.
[02:45:12] *** Joins: marmalade (~marmalade@cpe-107-184-34-78.socal.res.rr.com)
[02:45:13] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:40a4:a26a:f551:eb4f) (Ping timeout: 256 seconds)
[02:45:14] <hodapp> tunixman: er, yes, systems languages that use neither dynamic allocation nor garbage collection do in fact guarantee this.
[02:45:45] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:46:08] <tunixman> that's a very narrow subset of "systems languages", albeit important, but most systems laguages aren't those.
[02:46:12] <hodapp> not really, no
[02:46:21] <tunixman> I'm sure you're right.
[02:46:26] <tunixman> I'm just a guy who reads python.
[02:46:33] <hodapp> about the only 'systems language' that uses GC is Go.
[02:46:49] <tunixman> Ah I see.
[02:47:13] <tunixman> I'll remember that next time, thanks.
[02:47:19] *** Joins: srilyk (~wayne@user/waynew)
[02:47:31] *** Joins: dalan (~dalan@118.102.85.89)
[02:47:43] <hodapp> and this isn't some kind of "well actually, because you don't know what the hardware is doing, Python is equivalent!!!!1111" technicality: there is such as thing as guaranteeing at an algorithmic level that certain things do and do not happen
[02:47:43] *** Quits: dalan (~dalan@118.102.85.89) (Client Quit)
[02:47:49] <hodapp> and in many cases they are crucial in systems programming
[02:47:51] <marmalade> hey there, is there a way to print something from a dict that may or may not have a value? like for example i have JSON data that is organized like User > email, name, etc and so I want to print it by doing blah['user'][0] but if there's no data the entire script fails
[02:48:02] <tunixman> thanks hodapp I didn't realize that.
[02:48:20] *** Joins: dalan (~dalan@118.102.85.89)
[02:48:41] <hodapp> marmalade: you can do .get(key, default) on the dictionary, sometimes that's sufficient
[02:48:57] <marmalade> i'll try that ty
[02:49:42] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[02:49:42] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[02:49:42] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[02:49:42] *** Joins: bgardner (~bgardner@2001:470:69fc:105::8a8)
[02:49:42] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[02:49:42] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[02:49:42] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[02:49:42] *** Joins: syphar (~syphar@2001:470:69fc:105::2ad6)
[02:49:42] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[02:49:42] *** Joins: PantelicGR2 (~pantelicg@user/pantelicgr)
[02:49:42] *** Joins: ronny (~ronny@2001:470:69fc:105::b57)
[02:49:43] *** Joins: BrenBarn (~brenbarn@2001:470:69fc:105::2da2)
[02:49:43] *** Joins: penguinbrian (~penguinbr@2001:470:69fc:105::33d2)
[02:49:43] *** Joins: orbatos[m] (~orbatos@user/orbatos)
[02:49:43] *** Joins: psydroid (~psydroid@user/psydroid)
[02:49:43] *** Joins: rany (~rany@user/rany)
[02:49:43] *** Joins: meatballs (~meatballs@2001:470:69fc:105::633)
[02:49:53] *** Joins: northernsage (~northerns@187.107.158.146)
[02:49:55] *** Joins: jwon (~jwon@user/jwon)
[02:49:55] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[02:49:56] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[02:50:07] <tunixman> I didn't know that about systems programming, like I said, I only read python on occasion and don't really write code.
[02:50:10] *** Joins: thurs1 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:50:18] *** Quits: cedric (~cedric@2a01:cb11:867:c200:d81b:bf6b:b9c0:6882) (Quit: Konversation terminated!)
[02:50:18] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 240 seconds)
[02:50:19] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 256 seconds)
[02:50:20] *** thurs1 is now known as thurs
[02:50:45] *** Joins: cr0n0s (~quassel@181.67.203.101)
[02:51:01] <hodapp> it comes up more sharply in things like high-assurance programming
[02:51:03] *** Quits: vladoski (~vladoski@2001:b07:add:d406:2999:98c8:678:d1df) (Quit: Textual IRC Client: www.textualapp.com)
[02:51:14] *** Quits: se-sm-ca (~sean@user/se-sm-ca) (Quit: WeeChat 3.0.1)
[02:51:37] <marmalade> hrmm, it says 'dict has no attribute get'
[02:52:05] <hodapp> err, what? what are you actually trying?
[02:52:08] <marmalade> table.add_row(device['blueprint_name'], device['os_version'], device['user'].get("email"))
[02:52:20] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[02:52:24] <marmalade> maybe i shoudl just post the whole code
[02:52:26] <marmalade> sec
[02:52:57] *** Quits: gruuf (~gruuf@94.31.99.29) (Quit: WeeChat 3.1)
[02:53:05] <marmalade> https://bpa.st/OCEQ
[02:53:23] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:53:37] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f)
[02:54:03] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[02:54:48] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[02:55:03] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:55:18] *** Joins: thurs3 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[02:55:25] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Ping timeout: 256 seconds)
[02:55:26] *** thurs3 is now known as thurs
[02:55:44] *** Joins: wilk_ (~wilk@user/wilk)
[02:55:52] *** Quits: Akuli (~Akuli@213.216.211.200) (Quit: Leaving)
[02:56:27] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[02:56:33] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 268 seconds)
[02:57:15] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Client Quit)
[02:57:31] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[02:57:43] *** Quits: oprypin (~irc@pryp.in) (Quit: Bye)
[02:57:52] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[02:57:53] *** Joins: oprypin (~irc@pryp.in)
[02:58:17] *** Joins: taylan (~taylan@user/taylan)
[02:59:23] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 256 seconds)
[02:59:24] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[02:59:32] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 252 seconds)
[02:59:33] *** wilk_ is now known as wilk
[02:59:37] *** Joins: northernsage (~northerns@187.107.158.146)
[02:59:40] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[03:00:03] *** Joins: srilyk (~wayne@user/waynew)
[03:00:27] *** Quits: ntdll (~ntdll@user/ntdll) (Ping timeout: 258 seconds)
[03:00:40] <Donitz> is there a difference between scipy RegularGridInterpolator linear with a 2d grid and doing bilinear interpolation?
[03:00:45] *** Quits: snalty (~Shhh@user/snalty) (Quit: ZNC 1.8.2 - https://znc.in)
[03:01:03] *** Quits: tlaxkit (~hexchat@170.253.43.19) (Quit: Saliendo...)
[03:01:07] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:01:27] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:40a4:a26a:f551:eb4f)
[03:02:06] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[03:03:27] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[03:03:35] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[03:03:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[03:03:55] *** Joins: cjb (~cjb@user/cjb)
[03:03:59] *** Quits: codificat (~pep@66.red-79-154-168.dynamicip.rima-tde.net) (Quit: leaving)
[03:04:00] *** Quits: tspng_ (~tspng@80-218-192-223.dclient.hispeed.ch) (Quit: Leaving, bye!)
[03:04:11] *** Joins: zeden (~zeden@user/zeden)
[03:04:21] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[03:04:55] <ali1234> marmalade: please also show the full traceback
[03:05:05] <SnoopJ> Donitz, a (piecewise) bilinear interpolation in general does not have to be sampled regularly, but RegularGridInterpolator must be regular
[03:05:15] <Donitz> my grid is regular
[03:05:25] <Donitz> I just wonder if the algorithms are the same
[03:05:29] <Donitz> since it's called "linear"
[03:05:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 256 seconds)
[03:05:45] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[03:06:08] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[03:06:10] <SnoopJ> Donitz, RegularGridInterpolator can handle grids of arbitrary dimension
[03:06:12] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Ping timeout: 258 seconds)
[03:06:41] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[03:06:53] <SnoopJ> but on a 2D grid it should be pretty much equivalent to what you'd write to do it ad-hoc
[03:07:49] <Donitz> mmm, I need to know if it's exactly the same
[03:07:51] <SnoopJ> https://github.com/scipy/scipy/blob/v1.7.0/scipy/interpolate/interpolate.py#L2534-L2547
[03:07:54] <Donitz> otherwise I won't dare to share this script
[03:08:05] <Donitz> I'm doing some GIS math
[03:08:06] <SnoopJ> if you need to know the details of the implementation, you need to read the implementation
[03:08:21] *** Quits: luna-is-here (~quassel@ip-95-223-58-221.hsi16.unitymediagroup.de) (Remote host closed the connection)
[03:08:39] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 265 seconds)
[03:09:01] <Donitz> wow
[03:09:05] <Donitz> that got to be really really slow
[03:09:08] <Donitz> itertools
[03:09:30] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[03:09:30] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:09:51] <SnoopJ> product() is lazy
[03:09:57] *** Quits: jimklo (~jimklo@2600:6c52:6f00:ae5f:14f3:6158:a1fd:c107) (Quit: Leaving...)
[03:09:59] <Donitz> it is
[03:10:13] <Donitz> h
[03:10:14] <Donitz> ah
[03:10:19] <Donitz> you mean lazy in that way
[03:10:36] <ali1234> it generates the pairs on demand, rather than generating them all up front
[03:10:41] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:48d1:c8ce:9f36:fdd8)
[03:10:42] <Donitz> still, bilinear interpolation can be done in all vector math for a long list of points
[03:10:43] <ali1234> it doesn't really affect the speed
[03:10:44] <Donitz> using numpy
[03:10:47] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:48d1:c8ce:9f36:fdd8) (Read error: Connection reset by peer)
[03:10:57] <ali1234> or rather it doesn't affect the complexity of the operation
[03:11:02] <Donitz> well, looping over it like that will affect performance
[03:11:05] <ssbr> it's still slow (or well, grows explosively in runtime) if you loop through it all
[03:11:07] <SnoopJ> Donitz, did we answer your question?
[03:11:19] <marmalade> ali1234: How do I do that?
[03:11:21] <Donitz> yes, it's not quite bilinear interpolation by the looks of it
[03:11:25] <Donitz> well, maybe the result is the same
[03:11:43] <ali1234> marmalade: paste the full error you get when you run it into the paste bin
[03:11:45] <SnoopJ> it looks like it should be exact for 2D, to me
[03:11:47] <marmalade> ahh
[03:11:50] <marmalade> sec
[03:11:51] *** Joins: pnoud (~pnoud@user/pnoud)
[03:12:13] <SnoopJ> most of that is juggling the indices that weight the contributions of each edge
[03:12:39] <SnoopJ> but L2546 is definitely linear
[03:12:43] *** Joins: akaWolf (~akaWolf@akawolf.org)
[03:12:44] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 244 seconds)
[03:13:05] *** Quits: Chex (~Chex@user/chex) (Ping timeout: 244 seconds)
[03:13:36] <ali1234> Donitz: sometimes you find slow stuff even in numpy
[03:13:48] <SnoopJ> I would not expect product() to dominate there
[03:13:50] *** Quits: km (~km@static.55.93.181.135.clients.your-server.de) (Read error: Connection reset by peer)
[03:14:00] *** Joins: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch)
[03:14:05] <SnoopJ> or the iteration over it
[03:14:06] <Donitz> imagine you wanted to interpolate say... 20 million points
[03:14:10] *** Joins: km (~km@static.55.93.181.135.clients.your-server.de)
[03:14:11] <Donitz> that native loop in there would be rather slow
[03:14:18] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:819e:d0c4:207:bb53)
[03:14:47] <Donitz> but it is required because RegularGrid allows for variable distances
[03:14:49] <marmalade> https://bpa.st/7T5A
[03:14:50] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[03:15:03] <SnoopJ> Donitz, "variable distances?"
[03:15:19] <Karel> A numpy question: In https://bpa.st/P5SA, why does b[a] += 1 modify b? I though this was called "advanced indexing" which always returns a copy? See https://numpy.org/doc/stable/reference/arrays.indexing.html#advanced-indexing
[03:15:22] <ali1234> marmalade: okay so "device['user']" is a string, not a nested object
[03:15:24] <Donitz> yes, the cell sizes do not have to be the same
[03:15:39] * SnoopJ is confused
[03:15:45] <ali1234> marmalade: you probably need to make another API call to get the user details like email address
[03:15:46] <Donitz> "The data must be defined on a regular grid; the grid spacing however may be uneven."
[03:15:51] <Donitz> BUT, even so
[03:16:01] <Donitz> I'm fairly sure doing it as all vector operations would be trivial
[03:16:05] <Donitz> I don't understand why they don't
[03:16:09] <SnoopJ> Donitz, the spacing doesn't have to be the same between dimensions
[03:16:17] *** Joins: bsdbandit01 (~bsdbandit@172.58.187.210)
[03:16:20] *** Joins: Adoi (~Adoi@user/adoi)
[03:16:28] <SnoopJ> you can take a coarse step in one dimension and a fine one in another (I have done exactly this with this class)
[03:16:49] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[03:16:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[03:16:52] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[03:16:53] <ali1234> marmalade: or it might be elsewhere in the json you have. try printing the string so you can see everything the API gives you
[03:17:17] <ali1234> response.text that is
[03:17:20] *** Quits: mrlemke_ (~mrlemke@208.74.105.200) (Quit: Konversation terminated!)
[03:17:31] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[03:17:45] <SnoopJ> Donitz, anyway, if you want to contribute a patch to Cythonize this I bet it would be welcome
[03:18:00] *** Joins: Pixi (~Pixi@user/pixi)
[03:18:29] <marmalade> ali1234: it is in the json info, one sec i got a copy of what i'm working with: https://bpa.st/P6RA
[03:18:44] <marmalade> basically, sometimes that "user" segment may not exist because there's no user assigned
[03:18:50] <marmalade> which is why i think it fails sometimes, because sometimes there is no 'user' element
[03:18:53] <hexology> Karel: `b[a]` might return a copy, but `=` and `+=` are in-place operations no matter what indexing method is used
[03:18:55] <Donitz> no SnoopJ, regular grid interpolator accepted different step sizes fine
[03:18:57] <marmalade> but when there *is* a user element, I want to get that one
[03:19:03] <ali1234> marmalade: ah, API is inconsistent?
[03:19:04] <marmalade> and just put something blank when there isnt
[03:19:11] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[03:19:12] <marmalade> the response is yeah
[03:19:20] <SnoopJ> Donitz, yes, because as I said, you can have different step sizes in each dimension
[03:19:27] <marmalade> if there's no user it'll just be "user": ""
[03:19:28] <Donitz> I mean, within the dimensions
[03:19:45] <Donitz> as long as they're ascending it's fine
[03:19:49] *** Quits: anddt (~anddt@net-93-144-12-118.cust.dsl.teletu.it) (Read error: Connection reset by peer)
[03:19:55] <SnoopJ> hmm, maybe I'm misremembering
[03:20:02] *** Joins: rndusr (~rndusr@user/rndusr)
[03:20:04] <rndusr> hey
[03:20:17] <rndusr> is there a dunder method called when list.sort() needs a value for sorting?
[03:20:21] <Donitz> but in numpy, it's really just a matter about getting s and t a bit differently
[03:20:45] <ali1234> marmalade: you can do something like try: email = device['user']['email'] except AttributeError: email = ''
[03:21:01] <SnoopJ> rndusr, "needs a value for sorting?" Items are retrieved from a list with __getitem__()
[03:21:08] <marmalade> kk sec
[03:21:16] <ali1234> marmalade: or you can check directly with if isinstance(device['user'], dict): ...
[03:21:25] *** Joins: Lando-HoloNet (~LandoC@user/lando-spacepimp)
[03:21:35] <rndusr> I have an array of objects, and I'd like to be able to sort them based on my own values for the objects
[03:21:37] <rndusr> SnoopJ: ^^
[03:21:42] <marmalade> like this?  table.add_row(device['blueprint_name'], device['os_version'], device['user']['email'] except AttributeError: email = "")
[03:21:47] *** vinleod is now known as vdamewood
[03:21:54] <ali1234> no you can't do it all in one line like that
[03:21:57] <SnoopJ> rndusr, that's what the `key` parameter to list.sort() (and sorted(), which you should consider using if you haven't) are for
[03:22:00] <marmalade> sheit
[03:22:15] <ali1234> i mean you can do if you try hard enough but it makes the code unreadable
[03:22:23] <marmalade> what would be the right way to do it?
[03:23:05] <Karel> hexology, Yeah but once the expression b[a] is evaluated it should loose all connection to b, so how does it still modify it?
[03:23:06] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[03:23:08] <ali1234> pull out the email address on a separate line of code. save it in a variable, and then use that variable
[03:23:36] *** Joins: northernsage (~northerns@187.107.158.146)
[03:24:17] <marmalade> something like this? user_email = device['user']['email'] except AttributeError: device['user'] = ""
[03:24:26] <marmalade> sorry i'm pretty new to this
[03:24:32] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[03:24:44] <ali1234> the try: is part of the code
[03:25:27] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 256 seconds)
[03:26:02] <SnoopJ> Donitz, hmm, yea, you're right, the spacing can vary across a single dimension. Not sure what I'm thinking of, and I guess it doesn't check regularity because that's a given (i.e. it assumes the user knows that and gave it properly)
[03:26:06] <SnoopJ> my mistake
[03:26:08] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 258 seconds)
[03:26:19] <marmalade> so I did it like this https://bpa.st/UAYA
[03:26:26] <hexology> Karel: `foo[a] = bar` invokes `foo.__setitem__`, whereas just `foo[a]` invokes `foo.__getitem__` - they're different underlying methods
[03:26:32] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 265 seconds)
[03:26:36] <hexology> basically, the left side of = has different semantics from the right side
[03:26:36] <ali1234> marmalade: line 7 should be two lines
[03:26:37] <marmalade> but got this: https://bpa.st/NM6A
[03:26:43] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[03:26:43] *** Joins: Trieste (T@user/pilgrim)
[03:27:17] <ali1234> except AttributeError:<newline><indent>user_email = ""
[03:27:19] <Donitz> that's why it checks distances to corners in a for loop
[03:27:21] *** Quits: hexa- (~hexa-@juno.lossy.network) (Quit: WeeChat 3.2)
[03:27:25] *** Quits: jsdallas (~jsdallas@ec2-52-26-176-9.us-west-2.compute.amazonaws.com) (Quit: Leaving)
[03:27:39] <Donitz> but it can also be done by using np.where to get indices for each dimension
[03:27:42] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 272 seconds)
[03:27:55] *** Joins: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz)
[03:28:02] <Donitz> subtracting x from the coordinate, dividing coordinate by next x minus previous x
[03:28:06] <Karel> hexology, Ah shit you're right, that's scary, you just write a[b] once but it's "evaluated" twice.
[03:28:06] <SnoopJ> to which loop are you referring? The one in _evaluate_linear() is evaluating the linear interpolant
[03:28:13] <Donitz> and doing bilinear in... oh wait
[03:28:23] <SnoopJ> (i.e. a linear combination of values at the samples weighted by the normed distances)
[03:28:23] <Donitz> regular grid interpolator is in n dim
[03:28:26] <SnoopJ> yes
[03:28:29] <hexology> Karel: i'm not sure i'd say that either
[03:28:42] <Donitz> the math gets confusing when you want to interpolate in higher dimensions
[03:28:46] <Donitz> well, the formulas get really ugly
[03:28:49] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 258 seconds)
[03:29:00] <Karel> hexology, yeah you could argue __setitem__ doesn't really count as evaluating
[03:29:15] <SnoopJ> Donitz, ? It's an extension of exactly the same sort from 1D linear interpolation to 2D
[03:29:17] <ali1234> calling a method on an object definitely doesn't count as evaluating :)
[03:29:20] <marmalade> ali1234: so I got the same error, indices must be integers, so I tried swapping ['email'] with 0 and then 1 but that gives me the following error: https://bpa.st/LCZQ
[03:29:23] <Donitz> yes, but the formulas get really long
[03:29:31] <Donitz> so trying to hard code it based on the number of dimensions would be ugly
[03:29:31] *** Quits: bsdbandit01 (~bsdbandit@172.58.187.210) (Read error: Connection reset by peer)
[03:29:45] <SnoopJ> you can't solve the general task with hard-coding anything
[03:29:51] <SnoopJ> which is fine, the loop isn't the expensive part
[03:29:53] <Donitz> anyway, distance weighted vs bilinear
[03:29:55] <Donitz> same result?
[03:29:58] <ali1234> marmalade: ah yeah, because now you're not using get
[03:30:01] *** Joins: hexa- (~hexa-@juno.lossy.network)
[03:30:03] <SnoopJ> Donitz, bilinear *is* distance-weighted
[03:30:20] <Donitz> bilinear afaik is usually solved by doing two linear interpolations, and interpolating between those
[03:30:25] <ali1234> marmalade: so you need to catch IndexError instead of AttributeError
[03:30:34] <SnoopJ> Donitz, by the magic of linearity, these statements are equivalents
[03:30:38] <hexology> actually Karel i'm not sure exactly how `__getitem__` and `__iadd__` interact in this case
[03:30:40] <Donitz> yeah, it should be
[03:31:11] <SnoopJ> if you're worried about it, I'd set a breakpoint in that function in your local copy of scipy and work it one step at a time
[03:31:12] <hexology> i'd be surprised if it did 2 loops over `b`, but i'm not sure how that optimization is implemented
[03:31:21] <marmalade> so swapping AttributeError for IndexError I get this: https://bpa.st/TUMQ
[03:31:26] <nedbat> hexology: what code are we talking about?
[03:31:28] <Donitz> I could just validate it by manually do interpolation and comparing it
[03:31:32] <Donitz> doing*
[03:31:40] <hexology> nedbat: `b[a] += ` where `b` and `a` are numpy arrays
[03:31:42] <SnoopJ> you can validate the result that way, yes
[03:32:00] <nedbat> hexology: dis.dis can show you the bytecode
[03:32:13] <hexology> true, lets see what it does
[03:32:13] <Karel> hexology, It very strongly looks like it does have two for loops since b[1] is only incremented once.
[03:32:22] <ali1234> marmalade: why have you put [0]?
[03:32:25] *** Quits: hgg (~hgg@5.79.71.148.rev.vodafone.pt) (Ping timeout: 246 seconds)
[03:32:28] *** Joins: Wulf4 (~Wulf@user/wulf)
[03:32:34] <marmalade> i assumed that indexes iterate from 0
[03:32:38] <Karel> nedbat, specifically this paste https://bpa.st/P5SA
[03:32:47] <ali1234> dicts dont have indexes, they have keys
[03:32:48] <marmalade> and email is the first element in the list for "user"
[03:33:02] <marmalade> wouldn't the key be 'email' then?
[03:33:07] <nedbat> hexology: https://gist.github.com/nedbat/3b18ff0afdf47db9f217632e87ffc060
[03:33:09] <ali1234> yes
[03:33:22] <marmalade> but when I put that before it threw the string indices must be integers error
[03:33:22] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[03:33:31] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:33:36] <ali1234> yeah you have to catch that error
[03:33:42] <hexology> what is BINARY_SUBSCR? is that __getitem__?
[03:33:54] <nedbat> hexology: yes
[03:33:54] <marmalade> using index error?
[03:33:56] <SnoopJ> it's the instruction that handles a[b]
[03:34:02] <ali1234> yes
[03:34:09] <SnoopJ> https://docs.python.org/3/library/dis.html#opcode-BINARY_SUBSCR
[03:34:14] <nedbat> SnoopJ: a[b] when it is retrieving a value
[03:34:15] <SnoopJ> (TOS is "top of stack")
[03:34:38] <SnoopJ> nedbat, right, I guess the context matters a lot and we should be careful about that :)
[03:34:42] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:34:42] *** Wulf4 is now known as Wulf
[03:34:53] <nedbat> SnoopJ: this was a point hexology made earlier
[03:35:21] <hexology> so numpy can implement __setitem__ efficiently as in `b[a] = 1`, but can't necessarily do the same optimization for `b[a] += 1` because that is 2 separate operations: __getitem__ and __iadd_
[03:35:24] <hexology> __iadd__
[03:35:57] <SnoopJ> I wonder what catches on fire if you do that with an advanced index
[03:36:02] *** Joins: thurs8 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[03:36:13] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[03:36:13] *** thurs8 is now known as thurs
[03:36:25] <Karel> Ah now I remeber there was some complicated story here where iadd also returns the new value, and int and list use this to implement += completely differently or something like that
[03:36:43] <Karel> Since += for int is "by value" while for lists it's "by reference"
[03:36:50] <nedbat> hexology: it could be that it implements __getitem__ as just holding onto the key for later
[03:37:13] <Karel> nedbat, Yeah it doesn't, the docs say it returns a fully distinct copy.
[03:37:21] <nedbat> Karel: dang
[03:37:29] <hexology> huh, so how _does_ that work
[03:37:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:37:36] <hexology> Karel my apologies for second guessing you on this
[03:38:16] *** Quits: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net) (Client Quit)
[03:38:16] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[03:38:20] <Karel> Well __setitem__ runs the second for loop to actually set things from the copy. Seems like a huge waste, you'd expect += to not allocate a bunch of memory :(
[03:38:23] <marmalade> ali1234: still throws the string indices must be integers error
[03:38:28] *** Joins: northernsage (~northerns@187.107.158.146)
[03:38:39] <marmalade> https://bpa.st/TP2A
[03:38:48] <Karel> No worries you reminded me that that array indexing is more complex then it looks like :)
[03:38:54] <marmalade> https://bpa.st/QWOQ
[03:39:10] <ali1234> well, i guess you need to catch TypeError then :)
[03:39:16] <tunixman> t marmalade is json_rsp a string with JSON in it, or is it the decoded JSON?
[03:39:20] <SnoopJ> yea, advanced indexing can be a real mood-killer. happily, once you remember it's there lurking in the shadows, you can mostly avoid bumping your head on it
[03:39:24] <tunixman> (i.e. unpacked to a dict)
[03:39:32] *** Joins: thurs (~thurs@ip68-225-209-147.ph.ph.cox.net)
[03:39:35] <marmalade> tunixman: uhhhh i think unpacked?
[03:39:37] <SnoopJ> the behavior here is pretty dang surprising though
[03:39:39] <marmalade> i'm using json.loads
[03:39:45] <marmalade> sec i'll post the full thing
[03:40:01] *** Joins: jkl (~jkl@user/jkl)
[03:40:02] <tunixman> Oh, I see, yeah, if it's the unpacked response you might need for device in json_rsp.values():
[03:40:13] <tunixman> Otherwise you'll just be iterating the keys of the response.
[03:40:13] <marmalade> https://bpa.st/VZYQ
[03:40:37] <ali1234> oh wow, you're right
[03:40:38] <Karel> SnoopJ, Yeah I'm starting to get more and more scared of numpy haha
[03:40:40] <tunixman> You're using the unpacked response right, yeah, you just need to iterate the dict values.
[03:40:52] <ali1234> yeah, this catches me out every time
[03:40:55] <tunixman> (Instead of the keys, which are all strings.)
[03:40:58] <Karel> This originally showed up in a physics simulation of a friend where duplicate collisions were silently ignored because of this.
[03:41:12] <ali1234> whoever decided that iterating a dict should give you the keys...
[03:41:33] <marmalade> nyyeggh
[03:41:43] <marmalade> now it's givving me 'list object has no attribute values'
[03:41:44] <SnoopJ> Karel, if you know about the distinction between basic/advanced indexes, you're well ahead of the mean :)
[03:41:44] <ali1234> wait though no
[03:41:45] <tunixman> ali1234: I think we fired him or he stepped down or something a few years ago... wound up with an honorary title parachute...
[03:41:52] <marmalade> i just added.values() to for device in json_rsp
[03:41:55] <tunixman> Ah interesting.
[03:42:01] <ali1234> this isn't the problem because the top level json is a list
[03:42:09] <ali1234> otherwise every single attempt to look up a key would fail
[03:42:15] *** Joins: fuz (~fuz@user/fuz)
[03:42:16] <ali1234> but it's only when we go one level deeper that it fails
[03:42:17] <tunixman> Yeah, I think you're getting a JSON list back, so json_rsp is a list. Try adding print(json_rsp)
[03:42:25] <Karel> SnoopJ, The more obscure details I learn the more time I spent answering questions from people around me I don't know if I should just run away now :)
[03:42:26] <tunixman> oh yeah there you go.
[03:42:33] <marmalade> add it to where?
[03:42:51] <SnoopJ> Karel, I started a workgroup in my program over exactly that, just to avoid repeating the explanations :P
[03:42:54] <ali1234> tunixman: the working theory is this is a badly designed api that sometimes returns a dict of user attributes, but if there's no user, it returns a string with "none" or something
[03:43:02] <tunixman> Oh, why not do response.json?
[03:43:25] <SnoopJ> although I ended up learning a lot, too, synthesis is a great way to expand your own understanding
[03:43:28] <tunixman> Oh yeah that's considered some sort of excellent pattern in the API world.
[03:43:32] *** Quits: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net) (Ping timeout: 272 seconds)
[03:43:39] <marmalade> not sure, I'm basically just flying by the seat of my pants and using a combination of generated code from Insomnia (like Postman) and then google solutions lmao
[03:43:45] <Karel> SnoopJ, synthesis? Is that combining knowledge?
[03:43:55] <marmalade> i couldnt quite understand the json library documentation
[03:44:11] <tunixman> well, it basically does the same thing you're doing, so it's fine.
[03:44:29] <tunixman> I'd try adding print(json_rsp) immediately after line 19.
[03:44:32] <marmalade> i know the data is being transformed but I don't fully understand how it's being transformed or what wants one kind of data
[03:44:35] <tunixman> So you can see what it is.
[03:44:40] <tunixman> yeah...
[03:44:54] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 265 seconds)
[03:45:03] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[03:45:19] <marmalade> tunixman: it dumps what looks like raw json
[03:45:26] <tunixman> ok, that's good.
[03:45:26] <marmalade> (can't paste it without scrubbing details)
[03:45:33] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[03:45:34] <tunixman> is it a JSON list?
[03:45:50] <tunixman> (The Python string formats for these things are really similar to JSON)
[03:45:51] <ali1234> does it start with [ ?
[03:45:55] <marmalade> yea
[03:45:56] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[03:45:58] <SnoopJ> Karel, jargon from Bloom's taxonomy, it's taking what you've learned and creating something new (in my case it was slides/code to explain concepts) https://en.wikipedia.org/wiki/Bloom%27s_taxonomy#Synthesis
[03:46:03] <marmalade> sec I pasted an example that i scrubbed earlier
[03:46:10] <tunixman> ok, perfect. Does it start with [{ ?
[03:46:12] <marmalade> https://bpa.st/P6RA
[03:46:15] <marmalade> yeah
[03:46:16] <SnoopJ> Karel, in other words: "teaching is a fine way to learn"
[03:46:35] <tunixman> yeah, alright, perfect.
[03:47:17] <tunixman> json_rsp = json.loads(response.text)[0]
[03:47:20] *** Quits: jkl (~jkl@user/jkl) (Quit: ZNC 1.8.2 - https://znc.in)
[03:47:29] <tunixman> for device in json_rsp.values:
[03:48:05] <ali1234> no [0]
[03:48:18] <ali1234> and no iterating the values, why would you do that?
[03:48:35] <tunixman> I think that's what he's trying to do.
[03:48:37] <ali1234> the API delivers multiple devices
[03:48:43] <Karel> SnoopJ, Ah yeah very true, once you try to explain something you realize all the details you didn't actually fully understand yet.
[03:48:46] <tunixman> device['os_version'] < '10.15' and device['blueprint_name'] == 'Default':
[03:48:47] <marmalade> yeah sorry that's probably not clear from the paste
[03:48:57] <hexology> well now i don't have any idea how `b[a] += 1` works at all :)
[03:48:57] *** Joins: bigRoo (~user@131.236.54.84)
[03:48:59] <ali1234> for each device we want to print the user's email
[03:49:00] <tunixman> He's looking for a value on the device, which is a value in the list response.
[03:49:08] <tunixman> The keys won't help here.
[03:49:09] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[03:49:12] <ali1234> but sometimes 'user' is a string because of the API being bad
[03:49:13] <marmalade> there's multiple devices though
[03:49:28] <marmalade> so it's more like this
[03:49:34] <tunixman> wait yeha sorry, you're absolutely right.
[03:49:38] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[03:49:54] *** Joins: srilyk (~wayne@user/waynew)
[03:50:10] <ali1234> so 've been trying to explain for like 20 minutes, that you just need to catch whatever exception happens when 'user' isn't a dict, and substitute some sensible value for the email address
[03:50:17] <marmalade> https://bpa.st/ADIQ
[03:50:23] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[03:50:30] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 272 seconds)
[03:50:30] *** Joins: cheater1__ (~Username@user/cheater)
[03:50:36] *** cheater1__ is now known as cheater
[03:51:01] <marmalade> which would just be a blank string - but the problem is that if i do device['user]['email'] it throws an error about it needing to be indexed with integer
[03:51:04] <marmalade> s
[03:51:12] <ali1234> yes
[03:51:14] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:51:28] <ali1234> you need to catch that error (with try:/except:) and substitute your blank value
[03:51:42] <tunixman> oooh, yeah, I see, I'm not gonig deep enough.
[03:51:50] <tunixman> yes, ali1234 is right I think.
[03:51:58] *** Quits: digital_carver (~DCarver@49.205.154.191) (Ping timeout: 252 seconds)
[03:51:58] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[03:52:08] <marmalade> OMG
[03:52:08] <ali1234> i'm definitely right, i just can't remember exactly what error that throws :)
[03:52:12] <marmalade> it's because it was a TYPE error
[03:52:14] <ali1234> yes
[03:52:16] <marmalade> not an atrribute or Index erro
[03:52:20] <ali1234> yes :)
[03:52:21] <marmalade> it works now
[03:52:21] *** kostkon__ is now known as kostkon
[03:52:23] <marmalade> THANK YOU
[03:52:25] <marmalade> lamo
[03:52:27] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:52:33] <ali1234> this is why we always ask for the full error
[03:52:39] <ali1234> from the actual code you are running
[03:52:41] *** Joins: srilyk (~wayne@user/waynew)
[03:52:43] *** Joins: bsdbandit01 (~bsdbandit@2607:fb90:a946:e716:a4ca:9849:411b:8407)
[03:52:47] <marmalade> my bad
[03:52:50] <marmalade> thank you guys
[03:52:55] <marmalade> i would not have been able to figure that out on my own
[03:53:44] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::4ec1) (Quit: Konversation terminated!)
[03:55:23] <ali1234> marmalade: try/except can catch any error that happens in your code, and then the except clause says what to do instead, after which the program continues running rather than crashing
[03:55:30] *** Quits: bsdbandit01 (~bsdbandit@2607:fb90:a946:e716:a4ca:9849:411b:8407) (Read error: Connection reset by peer)
[03:56:28] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[03:57:32] *** Joins: jkl (~jkl@user/jkl)
[03:57:38] <ali1234> a lot of the exceptions are named like FooError but they are still exceptions
[03:58:01] <ali1234> you can also make your own
[03:58:44] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[03:59:29] *** Joins: p-i- (~Ohmu@node-27x.pool-118-173.dynamic.totinternet.net)
[04:01:04] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[04:01:04] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[04:01:24] *** Joins: northernsage (~northerns@187.107.158.146)
[04:04:05] *** Joins: waynew (~wayne@user/waynew)
[04:05:12] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 265 seconds)
[04:05:19] *** Joins: tims1 (~tims@123-243-10-176.static.tpgi.com.au)
[04:07:55] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 258 seconds)
[04:09:29] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[04:09:31] *** Quits: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b) (Quit: WeeChat 3.2)
[04:09:55] <SnoopJ> hexology, I think this is where the relevant dispatch happens: https://github.com/numpy/numpy/blob/main/numpy/core/src/multiarray/mapping.c#L1941-L1972
[04:10:53] *** Joins: jpic_ (~jpic@82.142.17.14)
[04:11:58] *** Joins: digitalcarver (~DCarver@49.205.154.191)
[04:12:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[04:12:11] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[04:12:32] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[04:13:07] *** Joins: ______GOD______ (~GOD@user/god/x-9778998)
[04:13:27] *** Joins: dulanic (~dulanic@47.187.147.69)
[04:13:58] *** Quits: jpic (~jpic@82.142.17.14) (Ping timeout: 246 seconds)
[04:14:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:15:04] <hexology> good find
[04:15:10] <SnoopJ> you got me curious :)
[04:15:24] <SnoopJ> it's a little hard to tell what's connected to what in there
[04:15:44] <SnoopJ> this snippet of equivalent code was helpful to see: https://github.com/numpy/numpy/blob/main/numpy/core/src/multiarray/array_assign_array.c#L277-L284
[04:17:43] <jaggz> in jupyter, any of you use one of the vim keybinding things?
[04:17:57] <jaggz> I work in vim almost exclusively
[04:18:09] <Karel> Haha why did no one question whether there are overloading the index operator a bit too much somewhere along the way to a 300 line function...
[04:18:40] <jaggz> what's the index operator?
[04:18:41] <SnoopJ> jaggz, when I used it as a daily driver I used a community extension for them
[04:18:44] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[04:19:01] <jaggz> SnoopJ, when you used what for what?
[04:19:02] <Karel> jaggz, It was a reply to SnoopJ and hexology, don't worry
[04:19:08] <SnoopJ> jaggz, when I used Jupyter daily
[04:19:23] <jaggz> (there looks like a keybinding thing, then something using vim where you edit in vim and it.. dunno.. triggers stuff in jupyter outside.. that might be a neat way to work)
[04:19:50] <SnoopJ> Karel, counterpoint: imagine writing advanced indexing equivalents in a language with exactly Fortran's NDarray :)
[04:19:54] <jaggz> I actually have my deskto split in two anyway .. browser over there ----> .. editor/terminal over there <----
[04:20:20] <jaggz> "deskto".  I like that
[04:20:39] <SnoopJ> jaggz, I usually just wrote packages when it was code not-in-a-notebook and would reload any notebooks that used that code if necessary
[04:21:10] <SnoopJ> ...and occasionally I would copy over a class/function I was editing into my working notebook for a little bit, so I didn't have to keep restarting the kernel :)
[04:21:25] <SnoopJ> (the tricky part is remembering to copy back!)
[04:21:41] <Karel> SnoopJ, Haha I think I'm too young to know anything about Fortan, what kind of arrays does it have?
[04:21:54] <jaggz> I have no clue what this workflow will be like, but I'll hate it if I have to update stuff back and forth
[04:21:59] <jaggz> https://github.com/szymonmaszke/vimpyter
[04:22:14] *** Quits: dulanic (~dulanic@47.187.147.69) (Quit: The Lounge - https://thelounge.chat)
[04:22:20] *** Quits: mexen (uid495612@user/mexen) ()
[04:22:22] <SnoopJ> Karel, there's only so many ways to implement the abstract type, but in Fortran you don't get any of the stuff with advanced indexing, basically. You don't get the slice-y parts of basic indexing, either. You just write loops :/
[04:22:26] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:22:44] <jaggz> integer, dimension (-3:2,0:4) :: matrix
[04:23:25] <jaggz> i feel a bit sick looking at fortran language docs
[04:23:39] <SnoopJ> jaggz, this was the one I used, but it looks like it hasn't been updated in a while, so there might be a better alternative now: https://github.com/lambdalisue/jupyter-vim-binding
[04:24:02] <Karel> SnoopJ, Well at least they're compiled, I'm always tempted to switch when I have some obscure indexing problem
[04:24:02] *** Joins: dulanic (~dulanic@47.187.147.69)
[04:24:18] <SnoopJ> Karel, what do you mean by "they're compiled?"
[04:24:22] <Karel> It's even worse with pytorch which has a bunch of similar but not identical indexing stuff
[04:24:35] <Karel> Well a Fortran for loop is okay, a Python for loop is a disaster
[04:24:37] <SnoopJ> there was a good talk at PyCon about that by some torch devs, but...yea.
[04:24:50] <SnoopJ> Karel, because of the performance hit?
[04:24:52] <Karel> Yeah
[04:25:26] <jaggz> i took a fortran class in college
[04:25:34] <SnoopJ> couple of ways around that: the nditer interface can sometimes get you out of hot water and still write a Python loop, you can use Cython, and then there's Numba, which just magically makes a Python loop that looks like a C-style one go vroom :)
[04:25:40] <SnoopJ> (usually)
[04:25:59] <jaggz> (I took C too.. but I'd already coded in that for many years)
[04:26:06] <SnoopJ> ideally you live in a world where you can do everything with indexing idioms, but in practice...
[04:26:27] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:26:48] <jaggz> I have a lot of ideas for our ideal world.. can we discuss them here? :)
[04:26:56] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:26:56] <SnoopJ> anyway, numpy always surprises me in its success at hiding the many dragons in its guts from the end-user
[04:27:13] <SnoopJ> but this one was a dragon previously unknown to me :D
[04:28:21] <Karel> Idk it feels like it should be simpler then it currently is but I guess that's always what it feels like from the outside;
[04:29:03] <graingert> So I'm working for a client and every single .py file ends:
[04:29:03] <graingert> if __name__ == "__main__":
[04:29:03] <graingert>     pass
[04:29:07] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:29:09] <graingert> Thousands of them
[04:29:28] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[04:29:40] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[04:30:02] *** Quits: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f) (Quit: Oops)
[04:30:24] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Read error: Connection reset by peer)
[04:30:38] <SnoopJ> Karel, the structure itself is extremely simple: https://jamesgerity.com/remembery/img/numpy_ndarray.png
[04:30:56] <SnoopJ> Performing operations efficiently over it is another thing entirely :)
[04:31:49] <SnoopJ> "advanced indexing" is basically jargon for cases where you can't do pointer arithmetic, so you're just stuck copying from `data`
[04:32:12] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[04:32:35] <SnoopJ> (okay, "extremely" might be pushing it, but it's surprisingly concise to me)
[04:32:38] <jaggz> dimensions are a list?
[04:32:45] *** Joins: srilyk (~wayne@user/waynew)
[04:32:46] <SnoopJ> jaggz, yep!
[04:32:58] <jaggz> that's in py not c yeah?
[04:33:07] <SnoopJ> the top there is describing a C struct
[04:33:19] <jaggz> so it's a uint16_t * ?
[04:33:44] <Karel> Yeah the core isn't that bad :)
[04:34:00] <SnoopJ> like all good combinatoric explosions, it starts simple and goes off the rails fast
[04:34:17] <jaggz> numpy is beautiful
[04:34:44] <Karel> jaggz, data is just char* I guess
[04:34:46] <jaggz> (i'm not referring to qualities of its implementation.. no clue about its internals)
[04:34:56] <SnoopJ> jaggz, it's npy_intp* but you have the right idea: https://github.com/numpy/numpy/blob/main/numpy/core/include/numpy/ndarraytypes.h#L1830-L1833
[04:35:06] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 240 seconds)
[04:35:23] <jaggz> hm.. signed?
[04:35:31] <jaggz> can we do negative numpy dims?
[04:35:31] *** Quits: twobitsprite (~twobitspr@66.115.166.148) (Ping timeout: 258 seconds)
[04:35:34] *** Quits: pan (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:35:47] <Karel> Interesting that they don't even special case <4 dimensions to store inline.
[04:35:59] *** Joins: pan (~quassel@pankid.club)
[04:36:26] <jaggz> that one memory reference's probably not so important?
[04:36:57] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Remote host closed the connection)
[04:37:05] <SnoopJ> jaggz, interesting question actually, I'm not sure why it's signed
[04:37:10] *** Joins: twobitsprite (~twobitspr@107.13.51.62)
[04:37:11] <jaggz> you know.. trying to figure out how to modify others code and add capabilities can be irritating.  this is why i reinvent the wheel.
[04:37:23] <SnoopJ> my favorite thing in that struct is `int two;` :)
[04:37:33] <jaggz> (thinking about this speaker identification example i've been working with)
[04:37:54] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Quit: The Lounge - https://thelounge.chat)
[04:37:54] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[04:38:01] <jaggz> I wonder why they need to check sanity..
[04:38:02] *** Quits: Necoro (~Necoro@user/necoro) (Quit: WeeChat 3.2)
[04:38:25] <jaggz> i guess just because.. C.
[04:38:43] <jaggz> somewhere you might get a screwed up pointer and it's better to have a sanity check than some difficult-to-diagnose bug
[04:39:24] <jaggz> s/diagnose/trace/
[04:39:25] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[04:39:36] *** Joins: northernsage (~northerns@187.107.158.146)
[04:39:37] <SnoopJ> Karel, I think there might be some optimizations of that sort in the rest of the codebase
[04:40:08] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[04:40:41] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[04:40:57] *** Joins: srilyk (~wayne@user/waynew)
[04:41:56] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 265 seconds)
[04:42:06] *** Joins: ionface (~ionface@user/ionface)
[04:42:42] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[04:42:53] <jaggz> eh
[04:43:20] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[04:43:34] <jaggz> doing the millions of memory references and pointer operations, that's likely not a significant optimization to bother with... ??
[04:44:34] <Karel> Yeah for large arrays it doesn't matter at all, but maybe if someone has a bunch of 1x3 arrays or something
[04:44:42] *** Joins: snalty (~Shhh@user/snalty)
[04:44:46] *** Parts: abhisek (~abhisek@129.213.50.150) (bored)
[04:44:46] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:44:46] <SnoopJ> jaggz, I did say "some" :)
[04:44:50] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 265 seconds)
[04:45:07] <jaggz> <3
[04:45:25] <SnoopJ> in an attempt to chase down my "I think" it seemed like there were more checks that dimensionality was correct, so maybe I'm wrong!
[04:47:30] *** Joins: wyclif (~wyclif@user/wyclif)
[04:48:21] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[04:49:30] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:40a4:a26a:f551:eb4f) (Ping timeout: 240 seconds)
[04:49:47] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[04:50:24] *** Quits: cr0n0s (~quassel@181.67.203.101) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:50:47] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Client Quit)
[04:50:59] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[04:51:00] *** Quits: ponadm_ (pony@gateway/vpn/protonvpn/ponadm) (Ping timeout: 252 seconds)
[04:51:36] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[04:52:07] *** Joins: cheater (~Username@user/cheater)
[04:52:14] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:52:20] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Read error: Connection reset by peer)
[04:52:42] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[04:52:53] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[04:52:58] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[04:53:55] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[04:54:26] *** Joins: northernsage (~northerns@187.107.158.146)
[04:55:18] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:55:43] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[04:56:55] *** Joins: fluter- (~fluter@user/fluter)
[04:57:11] *** Joins: demophoon5 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[04:57:30] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 240 seconds)
[04:57:58] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[04:57:58] *** demophoon5 is now known as demophoon
[04:58:16] *** Joins: gggpkm (~gggpkm@60.10.194.47)
[04:58:16] *** Quits: redgloboli (~redglobol@user/redgloboli) (Ping timeout: 272 seconds)
[04:58:43] *** Joins: gggp (~textual@60.10.194.47)
[04:58:48] *** Quits: digitalcarver (~DCarver@49.205.154.191) (Quit: Going gently into that good night)
[04:59:20] *** Quits: fluter (~fluter@user/fluter) (Ping timeout: 265 seconds)
[04:59:49] *** Quits: pagnol (~user@014198154145.ctinets.com) (Ping timeout: 265 seconds)
[05:01:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[05:02:43] *** Quits: Nact (~l@host-85-27-127-179.dynamic.voo.be) (Quit: Konversation terminated!)
[05:03:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[05:04:15] *** Joins: waynew (~wayne@user/waynew)
[05:06:45] *** Joins: ShawnB (~ShawnB@cpe-66-25-137-231.satx.res.rr.com)
[05:06:45] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[05:06:57] *** Quits: greenx (~greenx@pool-173-70-159-250.nwrknj.fios.verizon.net) (Ping timeout: 258 seconds)
[05:07:04] *** Quits: ShawnB (~ShawnB@cpe-66-25-137-231.satx.res.rr.com) (Client Quit)
[05:07:16] *** Joins: northernsage (~northerns@187.107.158.146)
[05:07:46] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 272 seconds)
[05:08:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[05:08:32] *** Joins: cman_ (~Cody@2603:9000:d104:8465:f003:c92c:dc85:513b)
[05:09:09] *** Quits: emerent (~quassel@p200300cd5703bbbcba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:09:26] *** Joins: emerent (~quassel@p200300cd5703bb15ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:11:05] *** Joins: candyman (~candyman@user/candyman)
[05:11:24] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[05:12:43] *** Joins: pnoud (~pnoud@user/pnoud)
[05:12:44] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[05:13:05] *** Joins: northernsage (~northerns@187.107.158.146)
[05:13:21] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[05:13:26] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:15:22] *** Quits: gggp (~textual@60.10.194.47) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:17:16] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:1749:70f2:c3b4:7591) (Remote host closed the connection)
[05:17:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[05:20:04] *** Joins: wyclif (~wyclif@user/wyclif)
[05:22:58] *** Quits: gggpkm (~gggpkm@60.10.194.47) (Ping timeout: 272 seconds)
[05:24:01] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Quit: WeeChat 3.1)
[05:25:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[05:25:35] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[05:26:17] *** Joins: phax (~phax@user/phax)
[05:26:45] *** Quits: theBen (~ben@2001:16b8:ad54:dd00:e199:a243:bb1:c235) (Quit: Leaving)
[05:26:52] *** Quits: ratelius (ratelius@gateway/vpn/protonvpn/ratelius) (Ping timeout: 250 seconds)
[05:28:17] *** Quits: FluffyMask (~FluffyMas@user/fluffymask) (Quit: WeeChat 2.9)
[05:28:36] *** Joins: wyclif (~wyclif@user/wyclif)
[05:28:46] *** Joins: srilyk (~wayne@user/waynew)
[05:28:55] *** Quits: akk (~akk@174-28-112-132.albq.qwest.net) (Quit: +++)
[05:29:18] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[05:29:27] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f) (Quit: Leaving)
[05:29:48] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f)
[05:29:58] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[05:30:13] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[05:30:21] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:30:27] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:31:06] *** Quits: trace987 (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[05:31:49] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 256 seconds)
[05:32:03] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[05:32:41] *** Quits: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com) (Ping timeout: 265 seconds)
[05:32:54] *** Joins: Adoi (~Adoi@user/adoi)
[05:32:55] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-74c5-95d2-5b20-b0b3.res6.spectrum.com) (Read error: Connection reset by peer)
[05:34:38] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:34:50] *** Joins: vlm (~vlm@user/vlm)
[05:35:00] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[05:35:38] *** Quits: twobitsprite (~twobitspr@107.13.51.62) (Ping timeout: 272 seconds)
[05:36:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:36:50] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[05:37:02] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[05:39:09] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 258 seconds)
[05:39:41] *** Joins: ratelius (ratelius@gateway/vpn/protonvpn/ratelius)
[05:41:20] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[05:42:21] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:44:12] *** Quits: jwhisnant_ (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[05:44:23] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[05:44:38] *** Joins: colorado (~fluiD@66.186.209.60)
[05:44:45] *** Quits: fluiD (~fluiD@66.186.209.60) (Read error: Connection reset by peer)
[05:46:10] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[05:46:53] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[05:47:15] *** Joins: northernsage (~northerns@187.107.158.146)
[05:47:24] *** Joins: cliluw (~cliluw@ec2-52-211-17-48.eu-west-1.compute.amazonaws.com)
[05:49:23] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[05:50:44] *** Joins: ioe (~is0ke3@user/is0ke3)
[05:51:40] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[05:52:51] *** Quits: lazar (~lazar@user/lazar) (K-Lined)
[05:54:28] *** Joins: i0e (~is0ke3@user/is0ke3)
[05:55:10] *** Joins: pete443 (~pete@user/pete443)
[05:55:19] *** Joins: jtck (~jtck@222.164.13.173)
[05:55:37] *** Quits: ioe (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[05:56:11] *** Quits: pete443_ (~pete@user/pete443) (Ping timeout: 256 seconds)
[05:57:18] *** Quits: cman_ (~Cody@2603:9000:d104:8465:f003:c92c:dc85:513b) (Quit: WeeChat 3.2)
[05:57:37] *** Joins: cman_ (~Cody@2603:9000:d104:8465:f003:c92c:dc85:513b)
[05:58:05] *** Quits: Karel (~Karel@232.56.198.178.dynamic.wline.res.cust.swisscom.ch) (Quit: Leaving)
[05:59:33] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[05:59:34] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[06:00:01] *** Joins: northernsage (~northerns@187.107.158.146)
[06:00:18] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:00:26] *** Joins: Nei_ (~ailin@user/nemui)
[06:00:44] *** Quits: Sasazuka (~Sasazuka@user/sasazuka) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:00:55] *** Joins: Gerula_ (~Gerula@user/gerula)
[06:00:55] *** Quits: Gerula (~Gerula@user/gerula) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[06:00:55] *** Gerula_ is now known as Gerula
[06:00:55] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:01:06] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 240 seconds)
[06:01:23] *** Quits: towel_ (~towel@user/towel) (Ping timeout: 252 seconds)
[06:01:51] *** Quits: {HD} (~{HD}@37.19.197.192) (Ping timeout: 256 seconds)
[06:01:53] *** Joins: phlixi_ (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de)
[06:01:56] *** Quits: Nei (~ailin@user/nemui) (Ping timeout: 252 seconds)
[06:02:10] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 265 seconds)
[06:02:21] *** Joins: towel (~towel@user/towel)
[06:02:27] *** Quits: carbolymer (~carbolyme@dropacid.net) (Read error: Connection reset by peer)
[06:02:29] *** Quits: m42e (~m42e@pb42.de) (Ping timeout: 252 seconds)
[06:02:47] *** Quits: phlixi (~phlixi@ppp-46-244-173-22.dynamic.mnet-online.de) (Ping timeout: 268 seconds)
[06:03:02] *** Quits: Yamakaja (~yamakaja@user/yamakaja) (Ping timeout: 252 seconds)
[06:03:08] *** Joins: m42e (~m42e@pb42.de)
[06:03:16] *** Joins: carbolymer (~carbolyme@dropacid.net)
[06:03:20] *** Nei_ is now known as Nei
[06:04:06] *** Joins: i0e (~is0ke3@user/is0ke3)
[06:05:50] *** Joins: akaWolf (~akaWolf@akawolf.org)
[06:05:53] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[06:06:47] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[06:07:49] *** Joins: qlixed (~qlixed@181.44.129.13)
[06:08:04] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:08:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:08:19] *** Joins: cdp (~chris@2601:18a:8280:d0::5bf3)
[06:09:54] *** Quits: nyah (~nyah@90.221.186.180) (Ping timeout: 265 seconds)
[06:11:41] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[06:12:03] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 256 seconds)
[06:15:18] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:15:22] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[06:16:52] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[06:17:02] *** Joins: waynew (~wayne@user/waynew)
[06:18:20] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[06:18:22] *** Quits: snalty (~Shhh@user/snalty) (Quit: ZNC 1.8.2 - https://znc.in)
[06:18:37] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[06:18:39] *** Joins: snalty (~Shhh@user/snalty)
[06:18:42] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[06:19:53] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[06:20:09] *** Joins: srilyk (~wayne@user/waynew)
[06:20:18] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[06:20:39] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:21:14] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[06:21:44] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[06:22:33] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:23:24] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 252 seconds)
[06:23:32] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[06:24:48] *** Quits: cdp (~chris@2601:18a:8280:d0::5bf3) (Quit: Konversation terminated!)
[06:25:02] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 272 seconds)
[06:25:19] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Read error: Connection reset by peer)
[06:25:40] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (Read error: Connection reset by peer)
[06:26:06] *** Joins: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net)
[06:27:13] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[06:27:21] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f) (Quit: Leaving)
[06:27:41] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f)
[06:28:43] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:819e:d0c4:207:bb53) (Read error: Connection reset by peer)
[06:30:20] *** Joins: {HD} (~{HD}@102.165.16.22)
[06:30:29] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:30:55] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:31:19] *** Quits: cjb (~cjb@user/cjb) ()
[06:31:47] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[06:33:24] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[06:33:31] <nubonix> [pyqt5] so i have two windows, when I open the first window, and click a button, it opens another window, and I have a table within the first window that I would like to update with the second window, how do i do so?
[06:33:37] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[06:34:21] <nubonix> ive called `first_window = FirstWindow()` and I can update the table, but it opens a new window if FirstWindow instead of using the one that is part of the main program
[06:35:07] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 258 seconds)
[06:35:09] <nubonix> my program is tabbed, and FirstWindow is the first tab, but when i try to add a value to the row/column value it adds it to the new window instead of the one that is tabbed
[06:35:15] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[06:35:41] *** Joins: itsmemoria (~itsmemori@user/itsmemoria)
[06:35:43] *** Joins: cheater (~Username@user/cheater)
[06:36:14] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[06:37:28] <nubonix> here are some images to try and help describe what im doing / expecting https://imgur.com/a/RzHCDwg
[06:37:36] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[06:38:05] <nubonix> `Name` should be on the first row and the first column in the first window, not the `a new window has appeared` window
[06:38:18] *** Quits: Deknos (~someone@user/menace) (Ping timeout: 240 seconds)
[06:38:20] *** Quits: ray (~ray@user/re) (Ping timeout: 272 seconds)
[06:38:41] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[06:39:03] *** Joins: ray (~ray@user/re)
[06:40:28] *** Joins: chaosite (~chaosite@user/chaosite)
[06:42:06] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[06:42:32] *** Quits: finsternis (~X@23.226.237.192) (Read error: Connection reset by peer)
[06:42:42] <nubonix> here is the code of window1.py and window2.py
[06:42:43] <nubonix> https://gist.github.com/nubonics/f871e4750716c20459a851bd80e9cd32
[06:42:51] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[06:42:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:43:12] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 252 seconds)
[06:44:09] *** Joins: waynew (~wayne@user/waynew)
[06:45:02] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[06:45:34] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[06:45:51] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 258 seconds)
[06:46:36] *** Joins: YoungPotato (~user@c-67-186-254-165.hsd1.ut.comcast.net)
[06:46:49] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[06:47:08] *** Quits: marmalade (~marmalade@cpe-107-184-34-78.socal.res.rr.com) (Quit: marmalade)
[06:47:11] *** Quits: Nalt (~Nalt|||@162-239-107-41.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 268 seconds)
[06:47:15] *** Joins: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net)
[06:47:45] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 256 seconds)
[06:49:47] *** Quits: normic (~normic@p4fc3009e.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:50:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:51:00] *** Quits: lukka5_ (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[06:51:17] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[06:52:21] <tims1> nubonix: typically you would have a model you would share between windows.
[06:52:32] *** tims1 is now known as tims
[06:52:36] <nubonix> wdym?
[06:53:00] <nubonix> the second window is kinda like a popup
[06:54:00] <nubonix> too much info is needed on the first window for my screen size so i opted for a popup like window
[06:54:20] <nubonix> well, prefer to keep the table the size it is
[06:54:36] <nubonix> if im understanding you correctly
[06:55:39] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[06:56:16] <tims> QT has the concept of a data model were you store all your data/state, the UI is just a reflection of that. So you create an object that wholes the data and share that between windows
[06:56:27] <tims> *holds the data'
[06:57:02] <tims> Datamodels generate signals on change so the UI can update.
[06:57:18] <nubonix> well, i kinda understand that b/c i can access the data, i just cant populate it correctly
[06:57:27] *** veegee_ is now known as veegee
[06:57:50] <nubonix> i can get the input from the user, and i can send it to a table, but the table is in the wrong window
[06:58:16] <nubonix> as it creates a new window & table, but this obv isnt what im trying to do
[06:58:40] <nubonix> but it shows me that i can access the data and send it, i just gotta figure out how to get a handle on the first window [i think]
[06:59:18] <nubonix> datamodels are a bit outside my scope of understanding though
[06:59:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:59:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (copper.libera.chat (Nickname regained by services)))
[06:59:36] *** finn_elija is now known as FinnElija
[06:59:43] *** Joins: heco (~redrum@user/redrum88)
[07:00:11] <nubonix> what i think your saying is this though, if i create a user input, lets say self.username in windowX.py and i import that class, i can use self.username anywhere
[07:00:19] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:01:45] <derek_v> nubonix: in window2, where you have self.sp = SchedulingPage(), I think that's maybe where the new window you don't want comes from
[07:01:59] *** Joins: gggp (~textual@60.10.23.171)
[07:02:34] *** Joins: chaosite (~chaosite@user/chaosite)
[07:03:08] *** Quits: gggp (~textual@60.10.23.171) (Client Quit)
[07:03:15] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[07:03:27] <nubonix> yeah, i removed the call `()` but i get another error doing so, so idk
[07:04:13] <nubonix> that error being `AttributeError: type object 'SchedulingPage' has no attribute 'tableWidget'`
[07:04:32] <nubonix> which doesnt make sense to me... because the SchedulingPage class defintely has that variable
[07:04:45] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[07:05:23] *** Quits: cliluw (~cliluw@ec2-52-211-17-48.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[07:06:06] <derek_v> as tims said, though, rather than trying to refer to window1 from window2, they should both have a reference to a model holding the data
[07:06:58] *** Joins: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[07:07:01] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[07:07:09] <nubonix> an example?
[07:07:25] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 265 seconds)
[07:08:18] <nubonix> i dont know how to do so
[07:08:47] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[07:10:16] <nubonix> mm, what i dont understand is what i need to do in order to accomplish that, create a new class and have Window1 and Window2 inherit it?
[07:10:30] *** Quits: itsmemoria (~itsmemori@user/itsmemoria) (Quit: WeeChat 3.2)
[07:10:34] <tims> nubonix: it can be as simple as an object with common storage of values.
[07:10:46] <nubonix> e.g.?
[07:10:56] <tims> just a normal class
[07:10:59] *** Joins: itsmemoria (~itsmemori@user/itsmemoria)
[07:11:43] *** Joins: Midnite (~human@user/midnightlantern)
[07:11:44] <tims> Qt does come with some prebuilt base classes (although that is a lot more involved)
[07:11:58] <nubonix> how many classes do i need? wdym object?
[07:12:14] <tims> Depends on your datamodel
[07:12:15] <nubonix> sorry im pretty clueless atm
[07:12:32] <nubonix> lets start with the simplest example
[07:12:40] <nubonix> i should be able to expand on my own with that
[07:12:55] <nubonix> so, lets say one object
[07:13:32] *** Joins: pnoud (~pnoud@user/pnoud)
[07:13:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[07:14:09] <nubonix> do you mean create the popup within Window1 class instead of having two classes?
[07:14:18] <nubonix> [as an alternative]
[07:14:37] <tims> No the window classes stay the same
[07:14:41] <nubonix> okay
[07:15:00] <nubonix> do you mean a pyqt object?
[07:15:05] <nubonix> like a signal
[07:15:07] <tims> But rather than storing inputs in the window, you save them to a common object
[07:15:16] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 268 seconds)
[07:15:19] <nubonix> mm
[07:15:28] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:15:31] <nubonix> is that what is stored above init?
[07:15:34] *** Joins: sgn (~sgn@user/sgn)
[07:15:41] <nubonix> sec, ill write an example
[07:15:43] <tims> Both windows have an instance of the common object
[07:15:47] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[07:15:57] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[07:16:03] <tims> (same instance)
[07:16:20] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[07:16:26] *** Joins: chaosite (~chaosite@user/chaosite)
[07:16:32] <tims> Any time you change a value in a control you update the common object
[07:16:48] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[07:16:58] <nubonix> ok heres what i think you are saying https://bpa.st/SM2A
[07:17:14] <nubonix> so i update my_object in either Window1 or Window2 and it is reflected in both classes
[07:18:24] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[07:18:24] <tims> The QT docs have some examples of this eg: https://doc.qt.io/qtforpython/tutorials/qmlapp/qmlapplication.html
[07:19:00] <tims> I'm not going to pretend, QT can get quite involved (as any UI toolkit tends to get).
[07:19:08] *** Joins: tijuco (~tijuco@user/tijuco)
[07:19:53] *** Joins: Betal (~Beta@user/betal)
[07:20:58] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[07:21:32] <nubonix> mm, isnt this a structured way of storing to a file and just reading in another class?
[07:22:12] <nubonix> mm ignore that, you said this was ui driven
[07:22:26] <nubonix> hmm
[07:22:37] <nubonix> yeah i havent used qml before
[07:22:51] <nubonix> signals can achieve the same yeah?
[07:23:29] *** Joins: const (~const@user/const)
[07:23:45] <tims> The QML bit is just for defining the UI, and yes you can use signals and bind to them
[07:23:57] <tims> But you will need to build out the support yourself
[07:24:06] <nubonix> bind, support?
[07:24:41] <tims> Signals are bound to "Slots"
[07:25:01] <tims> Is QT's term for callbacks/events
[07:25:07] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 268 seconds)
[07:25:11] <nubonix> ohhh okay
[07:25:20] <nubonix> hmm
[07:25:27] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[07:25:36] <const> Is there a concise way to have a class variable that's a list, and another class variable that is a copy of that list in a different order? (Somewhat surprisngly, list comprehensions don't work for this: https://bugs.python.org/issue3692)
[07:26:24] <tims> const: Just have two lists
[07:26:25] <FunkyBob> perhaps a property?
[07:26:51] <FunkyBob> cached property if you want the resolve to happen only once
[07:26:52] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 258 seconds)
[07:26:55] *** Quits: candyman (~candyman@user/candyman) (Quit: candyman)
[07:29:09] <tims> const: is the issue with ordering of the second list or keeping them in sync?
[07:32:13] *** Joins: Praise (~Fat@user/praise)
[07:33:08] *** Joins: chaosite (~chaosite@user/chaosite)
[07:33:20] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[07:34:41] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[07:34:58] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[07:36:03] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[07:37:50] *** Quits: Midnite (~human@user/midnightlantern) (Ping timeout: 252 seconds)
[07:38:11] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:38:21] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 265 seconds)
[07:38:24] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:39:17] *** Joins: zeden (~zeden@user/zeden)
[07:39:55] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:39:56] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[07:40:39] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[07:41:02] *** Joins: derelict (~derelict@user/derelict)
[07:41:34] *** Quits: zeden (~zeden@user/zeden) (Client Quit)
[07:41:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[07:42:41] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[07:42:56] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[07:43:35] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[07:43:52] *** Joins: justinf210 (~justinf21@145.sub-174-204-3.myvzw.com)
[07:44:36] *** Quits: justinf210 (~justinf21@145.sub-174-204-3.myvzw.com) (Read error: Connection reset by peer)
[07:44:39] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[07:44:46] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ohuwuteu)
[07:45:06] *** Joins: wyclif (~wyclif@user/wyclif)
[07:48:00] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 272 seconds)
[07:48:40] *** upekkha is now known as metta
[07:49:03] *** Joins: chaosite (~chaosite@user/chaosite)
[07:49:12] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[07:49:38] *** Joins: cheater (~Username@user/cheater)
[07:52:12] *** Joins: humanBird (~humanBird@2603-8001-7003-5966-a9ad-8f2c-60bf-ce66.res6.spectrum.com)
[07:52:22] *** Joins: djapo (~archangel@user/djapo)
[07:53:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[07:55:11] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Ping timeout: 256 seconds)
[07:56:54] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[07:59:09] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 256 seconds)
[08:00:56] *** Joins: sgn (~sgn@user/sgn)
[08:01:31] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[08:01:59] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:03:11] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[08:04:48] *** Joins: chaosite (~chaosite@user/chaosite)
[08:05:42] *** Joins: spacecadet (~fluiD@66.186.209.60)
[08:05:47] *** Joins: cman__ (~Cody@2603-9000-d104-8465-f003-c92c-dc85-513b.inf6.spectrum.com)
[08:05:49] *** Joins: taylan2 (~taylan@user/taylan)
[08:05:55] *** Joins: WarpedAI (~Warped@user/warped)
[08:06:02] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[08:06:18] *** Joins: nomic2 (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f)
[08:06:21] *** Joins: xrogaan_ (~xrogaan@user/xrogaan)
[08:06:33] *** Joins: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[08:06:40] *** Joins: jhulten_ (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[08:06:42] *** Joins: JanC_ (~janc@user/janc)
[08:07:01] *** Joins: mh3f_ (~mhowle@cpe-98-25-217-234.sc.res.rr.com)
[08:07:25] *** Joins: resmo_ (~resmo@2a00:d420:9:8a00:f41:8ba8:4770:4856)
[08:07:28] *** Quits: mathgrad (~mathgrad@2600:8806:3003:f756:f5cd:a8c9:c2ee:d59f) (Read error: Connection reset by peer)
[08:07:28] *** Quits: mh3f (~mhowle@cpe-98-25-217-234.sc.res.rr.com) (Read error: Connection reset by peer)
[08:07:28] *** Quits: colorado (~fluiD@66.186.209.60) (Read error: Connection reset by peer)
[08:07:28] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[08:07:28] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Read error: Connection reset by peer)
[08:07:28] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[08:07:28] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f) (Read error: Connection reset by peer)
[08:07:28] *** Quits: resmo (~resmo@2a00:d420:9:8a00:f41:8ba8:4770:4856) (Read error: Connection reset by peer)
[08:07:28] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Read error: Connection reset by peer)
[08:07:28] *** Quits: kostkon (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Read error: Connection reset by peer)
[08:07:29] *** Quits: justache (~justache@user/justache) (Quit: Ping timeout (120 seconds))
[08:07:29] *** Quits: mandeep (uid394387@id-394387.tooting.irccloud.com) (Ping timeout: 240 seconds)
[08:07:30] *** Quits: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be) (Ping timeout: 240 seconds)
[08:07:30] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Ping timeout: 258 seconds)
[08:07:34] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[08:07:37] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[08:07:54] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:07:54] *** Joins: mathgrad (~mathgrad@2600:8806:3003:f756:f5cd:a8c9:c2ee:d59f)
[08:08:12] *** Joins: justache (~justache@user/justache)
[08:08:18] *** Quits: cman_ (~Cody@2603:9000:d104:8465:f003:c92c:dc85:513b) (Ping timeout: 240 seconds)
[08:08:18] *** Quits: wodim (~kvirc@2001:470:26:90:f802:8ddf:a2d1:f7b5) (Ping timeout: 240 seconds)
[08:08:18] *** Quits: Warped (~Warped@user/warped) (Ping timeout: 240 seconds)
[08:08:18] *** Quits: vodkra (~vodkra@user/vodkra) (Ping timeout: 240 seconds)
[08:08:26] *** Joins: vodkra (~vodkra@user/vodkra)
[08:08:42] *** Quits: taylan (~taylan@user/taylan) (Ping timeout: 240 seconds)
[08:08:42] *** Quits: NeoCore (~neocore@45.152.181.180) (Ping timeout: 240 seconds)
[08:08:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:08:42] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[08:08:50] *** Joins: jrjsmrtn (~jrjsmrtn@ip-193-121-123-176.dsl.scarlet.be)
[08:09:22] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[08:09:22] *** Quits: mdemo5 (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[08:09:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[08:10:20] *** Joins: wyclif (~wyclif@user/wyclif)
[08:10:30] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[08:11:40] *** Quits: v8789 (v8789@user/blobberdene) (Quit: Quit)
[08:12:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[08:13:53] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:14:12] *** Joins: Vonter (~Vonter@user/vonter)
[08:15:30] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[08:15:52] *** nomic2 is now known as nomic
[08:17:48] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 252 seconds)
[08:18:32] *** Quits: node1 (~node1@user/node1) (Ping timeout: 252 seconds)
[08:19:21] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Quit: _)
[08:19:28] *** Joins: node1 (~node1@user/node1)
[08:19:33] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[08:20:54] *** Joins: chaosite (~chaosite@user/chaosite)
[08:24:06] *** Quits: anas (~anas@196.235.97.18) (Ping timeout: 272 seconds)
[08:26:00] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[08:30:23] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[08:30:55] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:30:58] <Gustavo6046> hai!
[08:31:04] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Ping timeout: 272 seconds)
[08:31:14] <Gustavo6046> let's say I wanna do a class that iterates on a string by consonant-vowel-consonant clusters
[08:31:27] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:31:28] <Gustavo6046> and calls a handler on each CVC cluster
[08:31:56] <Gustavo6046> in the type hints of this machine, do I define this handler as a typing.Protocol or is Callable fine?
[08:33:34] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 258 seconds)
[08:33:49] *** Joins: cheater (~Username@user/cheater)
[08:34:54] *** Quits: Betal (~Beta@user/betal) (Quit: WeeChat 3.2)
[08:35:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[08:35:31] *** Joins: Celeo (~Celeo@user/celeo)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:04] *** Joins: Lando-SpaceIzzle (~LandoC@user/lando-spacepimp)
[08:36:30] *** Joins: chaosite (~chaosite@user/chaosite)
[08:36:37] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:37:21] <Gustavo6046> Also, what's the closest thing to a string as a mutable container? Passing str probably involves copying all the data, and bytearray isn't encoding-agnostic like str is :(
[08:38:01] <Gustavo6046> I guess list[str]?
[08:38:42] *** Quits: jpic_ (~jpic@82.142.17.14) (Ping timeout: 252 seconds)
[08:38:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:39:04] *** Quits: Lando-HoloNet (~LandoC@user/lando-spacepimp) (Ping timeout: 252 seconds)
[08:39:05] <Henry151> in a thing like jsonify({"apple": "pie", "blueberry": "muffins", "something": json.dumps(stuff),}) does that last comma go there, trailing comma after the last pair of values in the dictionary, or not? and does it matter, or is it just style?
[08:40:05] <Henry151> pair of keys & values i guess not pair of values
[08:40:18] * Henry151 attempts to figure out how to ask his question clearly
[08:40:29] <Wulf> Henry151: is that a syntax or a style question?
[08:41:01] <Henry151> Wulf: haha i guess i am asking that very question -- is the trailing comma just a matter of style, or does it make a difference?
[08:41:16] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[08:41:31] <Gustavo6046> So a generic stream operator would have an accept: list[str] -> typing.Optional[typing.Tuple[str, str]]
[08:41:33] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) ()
[08:41:48] <Wulf> Henry151: https://bpa.st/X75Q
[08:42:11] <Tashtari> Gustavo6046: io.StringIO is a mutable container for strings, but it's not exactly like bytearray is to bytes...
[08:42:23] <Repiphany> Henry151: It's useful in multiline definitions for version control to have trailing commas on every line
[08:42:59] <Gustavo6046> Tashtari: ahh, of course! This is what io types were made for. Sorry, a bit rusty at Python (not in the more desirable way of incorporating Rust for hot code, but you know).
[08:43:04] <Gustavo6046> s/way/sense
[08:43:34] <Wulf> Henry151: it doesn't change the meaning of the program, it's only about style.
[08:43:41] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[08:45:20] *** Joins: tkazi (~tkazi@user/tkazi)
[08:46:10] <Henry151> thanks for the clarity
[08:48:53] *** Quits: purplex (~purplex@user/purplex) (Quit: bye)
[08:49:06] *** Quits: a1paca (~a1paca@user/a1paca) (Quit: ZNC 1.8.2 - https://znc.in)
[08:49:11] *** Joins: v8789 (v8789@user/blobberdene)
[08:49:25] *** Joins: a1paca (~a1paca@user/a1paca)
[08:49:36] *** Joins: purplex (~purplex@user/purplex)
[08:50:15] *** Quits: v8789 (v8789@user/blobberdene) (Client Quit)
[08:50:45] *** Joins: jpic (~jpic@82.142.17.14)
[08:52:21] *** Joins: chaosite (~chaosite@user/chaosite)
[08:53:35] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[08:56:57] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[08:58:30] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 252 seconds)
[08:58:54] *** Joins: CombatVet (~c4@user/combatvet)
[09:02:03] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 256 seconds)
[09:06:37] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[09:07:24] *** Joins: pnoud (~pnoud@user/pnoud)
[09:08:17] *** Joins: chaosite (~chaosite@user/chaosite)
[09:09:24] <Henry151> is '{:.8f}'.format((value_1 - value_2) * value_3) perfectly equivalent to f'{(value_1 - value_2) * value_3:.8f}' ?
[09:10:30] *** Quits: purplex (~purplex@user/purplex) (Quit: bye)
[09:11:12] *** Joins: purplex (~purplex@user/purplex)
[09:11:36] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[09:12:26] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 252 seconds)
[09:13:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[09:13:30] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[09:14:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:15:30] *** Quits: WarpedAI (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[09:16:33] <Wulf> no
[09:17:28] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[09:18:44] <Wulf> Henry151: try removing the last } from both. One creates a syntax error, the other won't.
[09:19:34] <KirkMcDonald> But as written they will perform the same formatting operation.
[09:19:37] *** Quits: tijuco (~tijuco@user/tijuco) (Quit: Leaving)
[09:20:45] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 256 seconds)
[09:21:00] *** Joins: sandeepk (~sandeepk@223.130.30.197)
[09:21:16] *** Joins: rememberYou (~someone@user/rememberyou)
[09:21:38] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[09:22:01] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[09:23:22] *** Joins: pnoud (~pnoud@user/pnoud)
[09:24:01] *** Joins: chaosite (~chaosite@user/chaosite)
[09:24:24] <Wulf> https://ideone.com/tovdI3  f-strings are a tad faster.
[09:24:32] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[09:28:23] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[09:28:35] *** Joins: jpodivin (~jpodivin@118.108.broadband14.iol.cz)
[09:28:56] *** Quits: itsmemoria (~itsmemori@user/itsmemoria) (Ping timeout: 252 seconds)
[09:29:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[09:29:22] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 268 seconds)
[09:29:27] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[09:29:37] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[09:29:40] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[09:30:16] *** Joins: pnoud (~pnoud@user/pnoud)
[09:30:21] *** litharge sets mode: -b $a:b0rf
[09:31:01] *** Joins: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net)
[09:31:47] *** Joins: dvx (~dvx@185.63.97.64)
[09:32:05] *** Joins: stranac (~stranac@195.29.239.126)
[09:33:20] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[09:36:42] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 240 seconds)
[09:37:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:37:58] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[09:38:31] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[09:38:37] *** Joins: ayrus (~ayrus@user/ayrus)
[09:41:42] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[09:42:57] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 258 seconds)
[09:43:32] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[09:47:15] *** Joins: rolo (~error@ip1f12fbd1.dynamic.kabel-deutschland.de)
[09:48:51] <InPhase> Wulf: This version shows f-strings are slower.  Note the change.  :)  https://ideone.com/1Te5Zk
[09:49:48] <Wulf> huh.
[09:50:17] *** Joins: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net)
[09:50:19] *** Joins: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net)
[09:50:44] <InPhase> Wulf: Sometimes the cpu just needs a little practice.
[09:51:20] <mdemo> is it a python bug if I can't trace (python -m trace --trace) code that defines a named tuple?
[09:51:26] <InPhase> Wulf: https://en.wikipedia.org/wiki/Branch_predictor
[09:51:30] *** Quits: rolo (~error@ip1f12fbd1.dynamic.kabel-deutschland.de) (Ping timeout: 240 seconds)
[09:54:50] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:dc1e:7956:c879:1b8f) (Quit: Leaving)
[09:55:43] *** Joins: chaosite (~chaosite@user/chaosite)
[09:57:13] *** Joins: tanami (~q@irc.expert)
[09:57:55] *** Parts: tanami (~q@irc.expert) ()
[10:01:00] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[10:01:01] *** Joins: Gerula_ (~Gerula@user/gerula)
[10:01:15] *** Gerula is now known as Guest2919
[10:01:15] *** Quits: Guest2919 (~Gerula@user/gerula) (Killed (cadmium.libera.chat (Nickname regained by services)))
[10:01:15] *** Gerula_ is now known as Gerula
[10:01:37] *** taylan2 is now known as taylan
[10:02:20] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[10:03:05] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[10:03:15] <no_gravity> Is there a way to set a directory where the __pycache__ files are stored?
[10:03:26] *** Joins: jdmark (~jdmark@67.8.137.130)
[10:04:50] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Quit: Leaving)
[10:05:56] *** Quits: thepacket (~bitterbal@ip50.ip-92-222-207.eu) (Read error: Connection reset by peer)
[10:06:34] *** Joins: kostkon__ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb)
[10:08:00] *** Quits: kostkon_ (~kostkon@2a02:587:a100:18e:9fe3:794:a225:7cdb) (Remote host closed the connection)
[10:08:04] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[10:09:10] <Wulf> InPhase: https://ideone.com/X5WMiJ
[10:09:12] *** Quits: resmo_ (~resmo@2a00:d420:9:8a00:f41:8ba8:4770:4856) (Remote host closed the connection)
[10:09:26] *** Joins: resmo_ (~resmo@2a00:d420:9:8a00:a4fe:4846:af6a:60de)
[10:11:51] *** Joins: chaosite (~chaosite@user/chaosite)
[10:11:53] *** Joins: itsmemoria (~itsmemori@user/itsmemoria)
[10:12:55] *** Joins: redgloboli (~redglobol@user/redgloboli)
[10:16:18] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[10:18:22] *** Joins: gggp (~textual@36.112.135.215)
[10:18:41] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[10:20:18] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[10:20:40] *** kostkon__ is now known as kostkon
[10:23:06] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[10:23:45] *** Joins: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de)
[10:24:44] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 258 seconds)
[10:24:50] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[10:25:58] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[10:26:01] *** Joins: thepacket (~bitterbal@ip50.ip-92-222-207.eu)
[10:27:08] *** JanC_ is now known as JanC
[10:27:25] *** Joins: chaosite (~chaosite@user/chaosite)
[10:27:37] *** Quits: mkellis (~Calibellu@2607:9000:0:61::a02e) (Ping timeout: 256 seconds)
[10:29:46] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[10:32:16] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 268 seconds)
[10:32:50] *** Quits: node1 (~node1@user/node1) (Ping timeout: 265 seconds)
[10:33:09] *** Joins: anandprabhu (~anandprab@94.202.243.198)
[10:33:54] *** Quits: itsmemoria (~itsmemori@user/itsmemoria) (Ping timeout: 240 seconds)
[10:34:44] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[10:35:06] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 240 seconds)
[10:36:07] *** Joins: itsmemoria (~itsmemori@user/itsmemoria)
[10:36:54] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[10:37:51] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[10:38:50] *** Quits: gggp (~textual@36.112.135.215) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:40:24] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[10:43:06] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[10:43:41] *** Joins: chaosite (~chaosite@user/chaosite)
[10:44:30] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[10:44:40] *** Quits: YoungPotato (~user@c-67-186-254-165.hsd1.ut.comcast.net) (Ping timeout: 258 seconds)
[10:44:42] *** Quits: Lando-SpaceIzzle (~LandoC@user/lando-spacepimp) (Ping timeout: 240 seconds)
[10:44:52] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[10:44:57] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[10:45:20] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 272 seconds)
[10:45:20] *** Quits: jvalleroy (~quassel@user/jvalleroy) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[10:45:53] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[10:46:46] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[10:48:18] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[10:48:58] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:49:32] *** Quits: itsmemoria (~itsmemori@user/itsmemoria) (Ping timeout: 268 seconds)
[10:50:03] *** Joins: seednode (~seednode@user/seednode)
[10:50:33] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[10:51:21] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[10:51:50] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[10:52:20] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[10:53:00] *** Joins: gusto (~Augustus@109.255.100.54)
[10:54:21] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ended)
[10:55:18] *** Joins: redgloboli (~redglobol@user/redgloboli)
[10:55:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[10:56:42] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 240 seconds)
[10:57:12] *** Joins: anas (~anas@196.235.97.18)
[10:58:12] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[10:58:15] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[10:58:33] *** Joins: manti7 (~manti7@176.10.104.94)
[10:59:10] *** Joins: chaosite (~chaosite@user/chaosite)
[10:59:17] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[11:00:04] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:00:07] *** Joins: CombatVet (~c4@user/combatvet)
[11:00:24] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[11:00:47] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[11:01:28] *** Quits: imp (~imp@186.205.11.214) (Quit: imp)
[11:01:37] *** Quits: audiocat (~audio@2603-8081-1800-eb5b-1318-d982-9fef-6b65.res6.spectrum.com) (Ping timeout: 256 seconds)
[11:02:00] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:02:26] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[11:03:30] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[11:03:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[11:06:24] *** Joins: mrwick (~mrwick@user/mrwick)
[11:08:03] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[11:08:29] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[11:09:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:11:20] *** Quits: spithash (~spithash@user/spithash) (Quit: leaving)
[11:11:35] *** Joins: rendar (~rendar@user/rendar)
[11:12:18] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[11:12:28] *** Joins: spithash (~spithash@user/spithash)
[11:12:50] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[11:12:50] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[11:13:11] *** Joins: chele (~chele@user/chele)
[11:13:38] *** Quits: spithash (~spithash@user/spithash) (Client Quit)
[11:13:48] *** Quits: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net) (Ping timeout: 252 seconds)
[11:14:19] *** Joins: sincorchetes (~sincorche@14.red-79-152-208.dynamicip.rima-tde.net)
[11:14:22] <sincorchetes> Hi
[11:14:59] *** Joins: chaosite (~chaosite@user/chaosite)
[11:15:07] <sincorchetes> I set name_db="example" variable in bash. After in Python I did -- import os -- print(os.getenv("name_db")) --> The result is None. Why?
[11:15:44] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 272 seconds)
[11:15:59] <supakeen> Did you use the same shell to do both, did you export that variable. How did you set it; etc.
[11:16:06] *** Joins: wyclif (~wyclif@user/wyclif)
[11:16:06] *** Joins: palasso (~palasso@user/palasso)
[11:16:55] <sincorchetes> yes supakeen, mm I have to export the variable
[11:17:05] <sincorchetes> export name_db="Example" to work
[11:17:07] *** Quits: bigRoo (~user@131.236.54.84) (Remote host closed the connection)
[11:17:16] <supakeen> Yes.
[11:17:19] *** Joins: spithash (~spithash@user/spithash)
[11:17:20] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[11:17:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[11:17:48] <supakeen> You have to use `export` in bash to set environment variables. Otherwise you're creating an 'internal variable', as bash calls it.
[11:18:12] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:19:45] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[11:19:58] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Client Quit)
[11:21:00] <sincorchetes> mm okay supakeen , thanks
[11:21:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[11:22:00] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:22:19] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:22:22] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:22:31] *** Quits: jhulten_ (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:22:54] *** Quits: spithash (~spithash@user/spithash) (Quit: brb)
[11:23:11] *** Joins: serafeim (serafeim@thunix.net)
[11:23:29] <serafeim> hello friends, is anybody familiar with the lark parser ?
[11:24:03] *** Joins: spithash (~spithash@user/spithash)
[11:24:11] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[11:24:26] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[11:24:38] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[11:26:25] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[11:26:46] *** Joins: maharg101 (~maharg101@savoy.force9.co.uk)
[11:28:33] *** Joins: kosh (~kosh@user/kosh)
[11:28:54] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[11:29:41] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[11:29:53] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[11:30:51] *** Joins: chaosite (~chaosite@user/chaosite)
[11:31:46] *** Quits: LiftLeft (~LiftLeft@154.21.28.239) (Ping timeout: 252 seconds)
[11:31:47] *** Joins: locsmif (~none@user/locsmif)
[11:33:46] *** Quits: spithash (~spithash@user/spithash) (Quit: leaving)
[11:34:33] *** Joins: wyclif (~wyclif@user/wyclif)
[11:35:26] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[11:39:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[11:40:30] *** Joins: spithash (~spithash@user/spithash)
[11:41:37] *** Joins: wyclif (~wyclif@user/wyclif)
[11:43:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:46:41] *** Joins: chaosite (~chaosite@user/chaosite)
[11:48:08] *** Joins: okamis (~okamis@90-229-141-188-no92.tbcn.telia.com)
[11:50:55] <Jonno_FTW> sincorchetes: if you do it on the same line as the python invocation it will also worrk
[11:51:06] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[11:51:51] <Jonno_FTW> as in name_db="example" python -c "import os;print(os.getenv('name_db'))"
[11:52:40] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 252 seconds)
[11:54:14] *** Parts: gerikson (~gerikson@user/gerikson) ()
[11:57:53] *** Quits: Geronimo (~Geronimo@user/geronimo) (Remote host closed the connection)
[11:59:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[12:00:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:00:57] *** Joins: thesemic1lons (~thesemico@user/thesemicolons)
[12:01:07] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[12:02:15] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Ping timeout: 265 seconds)
[12:02:40] *** Joins: chaosite (~chaosite@user/chaosite)
[12:02:42] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[12:03:05] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[12:03:55] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:04:49] *** Quits: mdemo (~mdemo@c-73-40-53-74.hsd1.va.comcast.net) (Quit: The Lounge - https://thelounge.github.io)
[12:05:42] *** Joins: masber (~masber@dhcp-133-203.cscs.ch)
[12:06:06] *** Joins: upsala (~zcb@185.213.155.160)
[12:06:58] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:07:00] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[12:07:25] *** Joins: securethemews (~securethe@2a00:23c4:1e98:ef00::4)
[12:07:28] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[12:08:22] *** Quits: securethemews (~securethe@2a00:23c4:1e98:ef00::4) (Remote host closed the connection)
[12:12:01] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[12:12:10] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 268 seconds)
[12:12:21] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[12:12:38] *** Joins: cedric (~cedric@2a01:cb11:867:c200:11ab:6d52:61d2:5b6e)
[12:14:47] *** Joins: Yamakaja (~yamakaja@user/yamakaja)
[12:16:52] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[12:17:10] *** Quits: TakinOver (~TakinOver@47.150.206.35) (Ping timeout: 272 seconds)
[12:18:24] *** Joins: chaosite (~chaosite@user/chaosite)
[12:19:51] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[12:20:09] *** Joins: kevr (~kevr@user/kevr)
[12:21:48] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[12:21:48] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[12:22:42] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[12:23:04] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[12:23:22] *** Joins: waynew (~wayne@user/waynew)
[12:23:30] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[12:24:50] *** Joins: TakinOver (~TakinOver@47.150.206.35)
[12:26:37] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Quit: The Lounge - https://thelounge.chat)
[12:27:25] *** Joins: marvi (~marvi@195-67-124-194.customer.telia.com)
[12:27:25] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Read error: Connection reset by peer)
[12:27:45] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[12:28:24] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[12:28:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:28:52] *** Joins: varaindemian (~varaindem@86.124.78.162)
[12:30:17] *** Joins: pnoud (~pnoud@user/pnoud)
[12:30:40] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[12:30:58] *** Joins: ponadm_ (pony@gateway/vpn/protonvpn/ponadm)
[12:31:24] <varaindemian> I have the following line: `header_script = unquote_plus(payload['request_raw'].lower().split(cmd_header_name.lower() + ":", 1)[1].split('\r\n', 1)[0])` and I started to understand it by creating a random string like `a="John has 2 apples and 3 cars"` . Can I use a.split('apples'+":",1)[1]? I ge index out of bounds
[12:31:31] *** Joins: kikijiki (~Thunderbi@user/kikijiki)
[12:31:59] <varaindemian> can someone explain this step by step?
[12:32:16] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[12:32:40] <marvi> I'm working in an air-gapped system. Anyone have tips for selectively mirroring either conda or pypi? For a list of modules, resolve all their dependencies, fetch for Windows/Linux and create a servable pypi or conda directory structure.
[12:33:11] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:33:28] *** Joins: Norore (~weechat@2a01:e0a:23a:5600:b9d3:ae19:12de:25b)
[12:33:31] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[12:34:17] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[12:34:30] *** Joins: chaosite (~chaosite@user/chaosite)
[12:34:34] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[12:35:36] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[12:35:54] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[12:35:59] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[12:36:08] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:39:05] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[12:39:31] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:59] <varaindemian> anybody?
[12:41:03] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[12:41:07] <The-Compiler> varaindemian: oof, it sounds to me like someone is implementing their own HTTP header parsing or something
[12:41:24] *** Joins: shad (~shad@user/shad)
[12:41:30] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[12:42:01] *** Joins: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com)
[12:42:32] <The-Compiler> marvi: my approach for a laptop and being without internet for some time was to set up https://www.devpi.net/ - very easy to get running, and caches anything it has downloaded, so after you pip install (or perhaps even pip download) things once, it should work without having to reach PyPI
[12:43:22] <The-Compiler> varaindemian: I'm hoping you're trying to understand some malware or whatever this is, and not trying to write some yourself ;)
[12:43:46] <varaindemian> The-Compiler trying to understand one ofcourse
[12:44:11] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[12:44:23] <The-Compiler> varaindemian: note the colon in there - you're basically doing   "John has 2 apples and 3 cars".split("apples:", 1)[1]   - so you're telling Python to split your string on "apples:" and then take the second part of it. However, there's no "apples:" in there, only "apples", hence the index out of bounds
[12:44:29] *** Joins: yte3 (~0@151.15.46.204)
[12:44:44] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[12:44:44] <varaindemian> The-Compiler Oracle-weblogic 2020-14882
[12:44:52] <varaindemian> CVE*
[12:45:49] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:46:12] *** Joins: hegstal (~hegstal@2a02:c7f:7604:8a00:8d05:aaa6:8a87:6441)
[12:46:12] <varaindemian> The-Compiler got it now!
[12:46:18] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[12:46:26] <varaindemian> The-Compiler thank you sir Compiler
[12:46:45] <The-Compiler> varaindemian: a real input string would probably look more something like  "Command-To-Run: something_evil\r\n"
[12:48:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[12:48:10] *** Lord_of_Life_ is now known as Lord_of_Life
[12:48:21] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[12:48:25] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:48:40] <yte3> I'm quite new to embedding Python in C/C++ applications: is it possible for the host C++ application to fully control the asyncio event loop, so that it can decide when to pause/resume?
[12:48:54] <varaindemian> The-Compiler I can show if you wanna join?
[12:48:55] <varaindemian> :D
[12:49:37] <yte3> Basically I want to call some Python functions from C++ (which can spawn async tasks) but I never want Python to block the application.
[12:49:42] <The-Compiler> varaindemian: thanks, but I'm busy with some pytest stuff :)
[12:50:06] *** Joins: chaosite (~chaosite@user/chaosite)
[12:50:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:50:50] <The-Compiler> yte3: not entirely sure, but maybe https://github.com/altendky/qtrio/ is a possible inspiration, integrating Qt's C++ event loop with asyncio
[12:51:34] <The-Compiler> serafeim: I've used lark once or twice before - but it's best if you just ask your question, and if someone can answer, they will :)
[12:51:43] <varaindemian> The-Compiler it's pretty short https://pastebin.com/XmwKCdj5
[12:51:44] <yte3> The-Compiler: looks rather advanced, but I'll give it a look, thanks
[12:52:22] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[12:52:31] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:52:53] <varaindemian> The-Compiler my problem is that I do not see the `getHeader('cmd'):` inside the input below.
[12:53:13] <varaindemian> not to mention the `\r\n` thing
[12:53:15] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[12:53:47] <varaindemian> The-Compiler what do you think?
[12:54:03] <The-Compiler> varaindemian: make sure your cmd_header_name is really correct
[12:55:00] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[12:55:29] <varaindemian> The-Compiler it is correct, but as you can see there is no : after `getHeader('cmd')`
[12:55:44] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[12:56:08] *** Joins: glik22 (~glik22@99-36-164-253.lightspeed.snjsca.sbcglobal.net)
[12:56:26] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[12:56:52] <The-Compiler> varaindemian: so you have this script passed via an URL, and it gets a second script from a 'cmd' header (in your example, the 'whoami & echo 1')
[12:57:08] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:57:22] <The-Compiler> so yep, cmd_header_name looks right, as there is indeed a "Cmd:" in your request data
[12:57:30] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[12:57:34] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[12:58:38] <The-Compiler> varaindemian: and if you do   request_raw.lower().split('cmd:', 1)[1].split('\r\n', 1)[0]   with the input from your paste, you indeed get ' whoami & echo 1'
[12:59:14] <varaindemian> The-Compiler totally missed the first part of the script
[12:59:16] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[12:59:22] <serafeim> i think i fixed my problem with lark... not sure of course but seems to be working
[12:59:25] <varaindemian> I waslooking only inside the body
[12:59:34] *** Joins: waynew (~wayne@user/waynew)
[13:00:20] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:01:09] *** Joins: trace987 (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[13:01:37] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-74c5-95d2-5b20-b0b3.res6.spectrum.com)
[13:03:48] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:05:55] *** Joins: chaosite (~chaosite@user/chaosite)
[13:05:59] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[13:06:04] <marvi> The-Compiler: Will only fetch for the arch I use on the laptop. I need both Win and Linux.
[13:06:51] *** Joins: itsmemoria (~itsmemori@user/itsmemoria)
[13:06:58] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[13:07:23] <The-Compiler> marvi: so where would you be running such a server? On something in the LAN? Or the laptop itself (but then it's dual-boot?)
[13:07:59] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[13:08:08] *** Joins: Trashlord (~trash@user/trashlord)
[13:08:47] *** Quits: itsmemoria (~itsmemori@user/itsmemoria) (Client Quit)
[13:10:15] *** Joins: srilyk (~wayne@user/waynew)
[13:10:15] *** fluter- is now known as fluter
[13:10:53] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 265 seconds)
[13:11:11] <marvi> The-Compiler: Inside the air-gapped network I want to have dependencies for both Windows and Linux available. On an Internet-connected device I want to fetch the dependencies and create a pypi och conda mirror that I can transfer by disk to the internal network.
[13:11:41] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:12:17] <marvi> The-Compiler: I would like to mirror selectively to keep the size down, but at the same time I want to resolve and fetch the whole dependency graph for the modules I need. For multiple archs.
[13:12:48] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[13:12:54] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 272 seconds)
[13:16:38] *** Joins: slav0nic (slav0nic@python.su)
[13:16:38] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[13:16:44] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[13:17:01] *** Joins: cheater (~Username@user/cheater)
[13:17:38] *** Joins: waynew (~wayne@user/waynew)
[13:19:51] *** Joins: varaindemian (~varaindem@86.124.78.162)
[13:21:06] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 240 seconds)
[13:21:46] *** Joins: chaosite (~chaosite@user/chaosite)
[13:26:18] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[13:28:09] <Gurkenglas> How do I get my code annotated with how much time was spent in each line?
[13:28:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:28:50] <yte3> Gurkenglas: you are looking for profilers: https://docs.python.org/3/library/profile.html
[13:29:39] <Gurkenglas> yte3, that looks like it'll say how much time was spent in each function, not in each line
[13:29:46] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[13:30:02] <kosh> you would need a lineprofiler
[13:30:37] <kosh> https://github.com/pyutils/line_profiler    something like that
[13:30:45] <Gurkenglas> thanks!
[13:31:04] *** Joins: entuland (~entuland@user/entuland)
[13:36:30] *** Quits: zerotypic (~zerotypic@66.96.192.176) (Ping timeout: 265 seconds)
[13:37:40] *** Joins: chaosite (~chaosite@user/chaosite)
[13:39:08] *** Joins: srilyk (~wayne@user/waynew)
[13:39:57] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[13:41:27] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[13:41:33] <kosh> what I would do is run a normal profiler on your code and then only use the lineprofiler on expensive functions to find out where the problems are in it
[13:41:41] <kosh> and if you functions are large break them up
[13:42:09] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 258 seconds)
[13:42:18] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[13:42:33] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[13:43:20] <bionade24> Why are python dataclasses not type safe?
[13:43:36] <bionade24> Or why do I even have to specify the type if it does nothing?
[13:43:56] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 272 seconds)
[13:44:14] *** Joins: nanoc (~nanocoast@p200300e1273bf000ccc6df24f323b7c2.dip0.t-ipconnect.de)
[13:44:37] *** Joins: venmx (~albasawa@host81-155-235-58.range81-155.btcentralplus.com)
[13:45:28] *** Quits: jvalleroy (~quassel@user/jvalleroy) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:46:03] <jinsun> I thik they are required just because it is an error if you just give the name without type hint
[13:46:24] <jinsun> if you give a default value, type hint is not required
[13:47:18] *** Joins: jvalleroy (~quassel@user/jvalleroy)
[13:47:26] <kosh> you may want to look at attrs, they are essentially much more advanced dataclasses
[13:47:30] *** Quits: grayhemp (~grayhemp@107-203-253-139.lightspeed.sntcca.sbcglobal.net) (Quit: Connection closed)
[13:48:09] <jinsun> and pydantic if you want the type hints to do something
[13:50:05] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:50:29] <bionade24> kosh: Thx will look. I just had one dumb typo, not a logical but resulting that a string was passed instead of a Callable and Dataclass went fine. That this wasn't catched made me pretty upset.
[13:51:37] <jinsun> bionade24: you have to run mypy on the code before to catch stuff like this
[13:52:02] <bionade24> But actually I probably should investigate why my unit tests for this feature run fine, probably they're all a special case where my depending resolving logic is circumvented.
[13:52:18] <jinsun> at runtime dataclass and attrs both don't check anything
[13:52:28] *** Quits: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de) (Quit: Bye!)
[13:53:00] <jinsun> by default without any explicit validation code
[13:53:03] *** Joins: a6a45081-2b83 (~aditya@223.235.222.167)
[13:53:31] *** Joins: chaosite (~chaosite@user/chaosite)
[13:53:53] <bionade24> jinsun: Thx I'll look at it. Does mypy also find when I try to catch an error type never thrown? <- That's one of python worst problems imao
[13:54:02] *** Joins: frost (~frost@59.71.241.179)
[13:54:48] *** Joins: kostkon_ (~androirc@ob21aa.static.otenet.gr)
[13:55:02] <kosh> attrs does have converters to convert the type to what you need
[13:55:07] <kosh> and you can raise an error if that fails
[13:55:39] *** Joins: amogorkon (~amogorkon@port-92-196-19-231.dynamic.as20676.net)
[13:56:06] *** Quits: venmx (~albasawa@host81-155-235-58.range81-155.btcentralplus.com) (Quit: leaving)
[13:56:14] <kosh> bionade24, how would it know that an error type could never be thrown?
[13:57:58] <bionade24> kosh: When no code between the try and the except can raise the error type.
[13:58:15] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 258 seconds)
[13:58:22] <kosh> yes but how would it know that? if you call a function you could have almost any type of error occur
[13:58:45] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:59:00] *** Joins: waynew (~wayne@user/waynew)
[13:59:09] <bionade24> kosh: Let's say we have e.g. an
[14:01:07] *** Joins: Gerula_ (~Gerula@user/gerula)
[14:01:07] *** Quits: Gerula (~Gerula@user/gerula) (Killed (copper.libera.chat (Nickname regained by services)))
[14:01:07] *** Gerula_ is now known as Gerula
[14:02:18] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 240 seconds)
[14:03:00] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[14:03:11] *** Quits: masber (~masber@dhcp-133-203.cscs.ch) (Quit: Client closed)
[14:03:35] <TheHermann> I have lists with some values. I have to pass the values of these lists to a function. I tried a for loop but I pass the whole list and then the next list. some advice?.
[14:05:54] <jinsun> bionade24: I don't think mypy can do that, seems a bit too dynamic and not a job for a static type checker, as long as the exception you are catching is a subclass of BaseException mypy will be fine
[14:05:57] *** Quits: mad_moses (~ps@2a02:810b:f3f:f0d0:d250:99ff:fe86:b052) (Ping timeout: 268 seconds)
[14:06:28] <jinsun> with it
[14:06:30] *** Quits: LuKaRo_ (~LuKaRo@p57b15697.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[14:07:13] *** Joins: hgg (~hgg@5.79.71.148.rev.vodafone.pt)
[14:07:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[14:08:38] <TheHermann> my problem is that when I call the function every time I have to pass parameters and these parameters I take them in lists
[14:09:20] *** Joins: chaosite (~chaosite@user/chaosite)
[14:09:21] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[14:10:02] *** Joins: Pickchea (~private@user/pickchea)
[14:10:45] <amogorkon> TheHermann, that doesn't sound like a problem, can you post an example on bpaste?
[14:11:46] *** Joins: mexen (uid495612@user/mexen)
[14:12:01] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:12:21] <amogorkon> bionade24, i missed part of the conversation, but i from what i gather you want to make a function aware of the exceptions that might happen around it?
[14:12:56] *** Joins: LuKaRo (~LuKaRo@p57b15697.dip0.t-ipconnect.de)
[14:13:06] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 252 seconds)
[14:13:17] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[14:13:35] *** Joins: cecep (~weechat@dynamic-077-011-144-059.77.11.pool.telefonica.de)
[14:13:35] <TheHermann> https://pastebin.com/bLvvV9uR
[14:13:50] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[14:14:09] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[14:16:39] <amogorkon> TheHermann, okay, looks simple enough, where's the problem?
[14:17:26] <TheHermann> I have to take a value from each list. for example: iteration one I get param1 from list1 and param1 from list2 and param1 from list3; iteration two I get param2 from list1 and param2 from list2 and param2 from list3 ... etc amogorkon
[14:17:40] <amogorkon> zip
[14:17:59] <bionade24> amogorkon: What I ment is if the static type checker that was suggested, mypy, also can detect if you try to catch an error that is impossible to be raised, so that'll never catching anything.
[14:18:06] <Gurkenglas> einsum("abc,abc->bc") and einsum("abc,ade->bcde") seem to take about the same time, why?
[14:18:15] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[14:18:27] <amogorkon> TheHermann, zip(buffer_size_slot, list_file_name) should do the trick
[14:18:41] <Gurkenglas> shouldnt the first one be faster by lots and lots?
[14:18:44] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[14:18:55] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[14:19:02] <Gurkenglas> opt_einsum didn't help
[14:19:11] *** Joins: wyclif (~wyclif@user/wyclif)
[14:19:31] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 265 seconds)
[14:20:23] <amogorkon> bionade24, hmm.. you might want to try hypothesis testing, that might be more what you're looking for
[14:20:34] <amogorkon> https://hypothesis.readthedocs.io/en/latest/
[14:21:09] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:21:41] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[14:22:33] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[14:22:41] *** Joins: srilyk (~wayne@user/waynew)
[14:22:46] <amogorkon> it'll try to break your code in any conceivable manner, then you'll see which exceptions may be raised
[14:23:41] <TheHermann> amogorkon, thanks :)
[14:23:48] <amogorkon> welcome
[14:25:58] *** Joins: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421)
[14:27:01] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[14:27:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[14:28:48] <amogorkon> i have a question, although i'm not sure if anyone can help me :p
[14:28:54] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[14:28:59] *** Joins: chaosite (~chaosite@user/chaosite)
[14:29:49] *** Joins: d3vyL (d3vyL@host-95-250-37-25.retail.telecomitalia.it)
[14:30:09] *** Joins: jetchisel (jetchisel@user/jetchisel)
[14:30:19] <amogorkon> a while ago i suggested that pip could implement a p2p approach to python package hosting to reduce the load from pypi
[14:31:07] <amogorkon> now, that https://pypi.org/project/justuse has a fairly stable auto-install feature, i'm considering to implement the p2p aspect myself
[14:31:08] *** Joins: pnoud (~pnoud@user/pnoud)
[14:31:22] <amogorkon> but i don't know how and where to start
[14:32:21] <amogorkon> so, is there any framework that might "just work"? i'm tempted to implement the whole thing with zmq from the ground up..
[14:32:31] *** Joins: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:32:40] <amogorkon> but that would involve a lot of research and experimentation
[14:32:51] *** Joins: derelict (~derelict@user/derelict)
[14:35:21] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[14:35:26] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[14:35:58] *** Quits: maharg101 (~maharg101@savoy.force9.co.uk) (Quit: Textual IRC Client: www.textualapp.com)
[14:36:28] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[14:37:29] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[14:39:03] *** Joins: fdgr (~fdgr@178.49.152.42)
[14:39:30] <fdgr> is there a dictionary in python with a list of keys?
[14:39:52] <The-Compiler> fdgr: what do you mean exactly?
[14:40:22] <fdgr> a dictionary that can have identic keys in a particular order
[14:41:29] <The-Compiler> not in the stdlib as far as I'm aware (though you can use lists as values, perhaps with a defaultdict)
[14:42:09] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[14:42:12] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[14:42:14] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 265 seconds)
[14:42:26] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[14:42:43] <bjs> fdgr: wait,  do you mean that values have multiple keys or do you just want like, a normal dict but where the keys are ordered?
[14:43:08] <fdgr> a normal dict which has ordered, non-unique keys
[14:43:21] <bjs> fdgr: non-unique?  oh so you can have {"a": 1, "a": 2} ?
[14:43:22] *** Joins: masber (~masber@dhcp-133-203.cscs.ch)
[14:43:26] <fdgr> yes
[14:43:33] <amogorkon> multi-bag
[14:43:54] <bjs> fdgr: there isn't one of these in the stdlib no,  mostly because you can have {"a": [1,2]}  instead
[14:44:08] <amogorkon> no, not bag.. what was it
[14:44:13] <bjs> (and you can use collections.OrderedDict if you want the keys to be ordered)
[14:44:15] <amogorkon> multiset?
[14:44:19] *** Quits: a6a45081-2b83 (~aditya@223.235.222.167) (Remote host closed the connection)
[14:44:26] <bjs> amogorkon: multiset and bag are the same thing
[14:44:53] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 256 seconds)
[14:45:00] <amogorkon> yeah, but for one thing you can search, the other you get amazon advertisements for female accessories
[14:45:39] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2)
[14:45:59] <bjs> sure
[14:46:20] <amogorkon> especially "python bag" :p
[14:46:27] <amogorkon> well..
[14:46:35] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 256 seconds)
[14:46:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:47:30] <amogorkon> but it's not really an answer to the original question, i fear
[14:48:51] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[14:51:18] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[14:51:47] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 244 seconds)
[14:54:13] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[14:56:38] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[14:58:02] <rannnn8888> Hey stupid askk :D  what the way get here yes ? https://dpaste.org/Q4cr If the exact same thing appears in one of the elements in the list
[14:58:31] <rannnn8888> but the faster way to get
[14:58:38] <bjs> rannnn8888: `if any("12" in elem for elem in list):`
[14:58:45] <bjs> is presumably what you wanted to say?
[14:59:34] *** Joins: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:00:15] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[15:00:42] <rannnn8888> bjs its the faster way ? or maybe by this ? https://dpaste.org/4VNo
[15:01:00] <bjs> rannnn8888: no that way is definitely not faster
[15:01:12] *** Quits: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[15:01:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[15:01:21] *** Quits: zmo (~guyzmo@2001:bc8:6010:211:5054:ff:fe00:e941) (Quit: WeeChat 2.3)
[15:02:27] <rendar> class A: OPT={}    class B(A): def __init__(self): self.OPT["a"]=1       class C(A): <- what self.OPT C sees?! shouldn't it see an empty dict?
[15:02:32] *** Quits: humanBird (~humanBird@2603-8001-7003-5966-a9ad-8f2c-60bf-ce66.res6.spectrum.com) (Quit: Client closed)
[15:02:41] *** Joins: ohuwuteu (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:02:52] <bjs> rendar: it depends on what C's __init__ does I guess?
[15:03:03] <bjs> but yes I'd assume so, why?
[15:03:03] <rendar> it doesn't touch self.OPT
[15:03:12] <rendar> because it doesn't
[15:03:31] <bjs> rendar: "it doesn't" ?
[15:04:01] <rendar> bjs: yep, C sees self.OPT["a"]==1
[15:04:04] <bjs> rendar: I see what you're confused by
[15:04:14] <bjs> rendar: you make a B() _then_ make  C() and see {"a": 1}  ?
[15:04:18] <marienz> rendar: OPT there is a class attribute, which is effectively a single global. There is one dict, which you can access through all subclasses.
[15:04:21] <rendar> bjs: exactly
[15:04:31] <bjs> rendar: this is correct,  there is only 1 "OPT" dict, and it exists on the A class
[15:04:40] <bjs> rendar: so if you make a B instance it'll mutate that dict.
[15:04:42] <rendar> right
[15:04:53] <bjs> rendar: if you want it per-instance you should go `self.OPT = {}` or whatever inside __init__
[15:05:00] <rendar> bjs: yes but
[15:05:00] <marienz> mutating a class attribute is typically not a good idea. Maybe you meant to do "self.OPT = {}" in A's __init__?
[15:05:05] <rendar> this confused me:
[15:05:07] <bjs> rendar: yes but what
[15:05:26] <rendar> class A: OPT=1       class B(A): OPT=3          class C(A): ... sees OPT==1
[15:05:50] <bjs> rendar: well forget the classes for a second and consider this:
[15:06:28] <bjs> "x = {};  y = x;  y["a"] = 1; print(x)`
[15:06:49] <bjs> note how accesses to y and x give the same thing because you've _mutated_ the underlying object
[15:07:09] <bjs> rendar: but here, in `class B` you're saying `OPT = 3` which is like saying `y = {"a": 1}` which _doesnt_ mutate x
[15:07:33] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[15:07:35] <bjs> rendar: in this case there are _two_ "OPT" ints, A.OPT and B.OPT and they point to different objects.
[15:07:55] <rendar> yeah
[15:08:26] <marienz> right. Instead of using classes, your first example is essentially "A_OPT = {}; B_OPT = A_OPT; B_OPT['a'] = 1; C_OPT = A_OPT" (after which all of those _OPT variables refer to the same dict, with one key/value in it)
[15:08:44] <marienz> while your second example is A_OPT = 1; B_OPT = 3; C_OPT = A_OPT"
[15:09:09] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[15:09:35] <rendar> right
[15:09:49] <rendar> classic difference between value vs. reference
[15:09:50] <rendar> ok
[15:10:24] *** Quits: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net) (Quit: The Lounge - https://thelounge.chat)
[15:10:40] <bjs> rendar: see bit.ly/pynames1
[15:10:51] <rendar> thanks
[15:11:00] <marienz> (I find it useful to think of it as "class bodies are normally evaluated once". And you have only a single dict creation ("OPT = {}") sitting in A's class body, which only runs once. So there'll only be a single dict.)
[15:11:20] *** Quits: Spawns_Carpetin- (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 272 seconds)
[15:11:26] *** Joins: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net)
[15:11:53] <Gurkenglas> Is there a way I can call torch.einsum without einsum notation? torch.tensordot comes close but doesn't include diagonalization. I ask because the torch.einsum diagonalization doesn't seem optimized in the obvious way.
[15:12:04] <rendar> bjs: great nedbat! very nice article that one
[15:12:14] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[15:13:28] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:14:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:15:16] *** Joins: gggp (~textual@60.10.194.47)
[15:15:17] *** Quits: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net) (Client Quit)
[15:15:53] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[15:16:19] *** Joins: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net)
[15:17:36] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[15:18:44] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Read error: Connection reset by peer)
[15:19:01] *** Joins: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com)
[15:19:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:19:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:20:12] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[15:20:35] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 256 seconds)
[15:21:03] *** Quits: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net) (Quit: Client closed)
[15:21:53] *** Joins: gggp (~textual@60.10.194.47)
[15:23:06] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[15:24:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:24:42] *** Joins: blpy (~blpy@2402:e280:3d22:227:29a0:cf18:4ea2:5c5e)
[15:25:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:26:34] <Henry151> in this probably-a-mistake example, what happens? "example string with {} only two of {} these little curlybrace pairs".format("one", "two", "three") ?
[15:26:48] *** Joins: Namiraja (~nami@user/namigator)
[15:26:48] *** Quits: shad (~shad@user/shad) (Ping timeout: 258 seconds)
[15:27:33] <Henry151> do we get "example string with one only two of two these little curlybrace pairs" or "example string with two only two of three these little curlybrace pairs" or some other result I hadn't considered?
[15:28:19] * Henry151 realizes he can just check this in the repl and doesn't need to be asking in here and walks off mumbling something to himself
[15:28:31] <deniska> Henry151: it will raise an exception
[15:28:49] <deniska> but yeah, you could type the line of code in the repl instead of the channel :)
[15:29:06] *** Quits: Namigator (~nami@user/namigator) (Ping timeout: 240 seconds)
[15:29:07] *** Quits: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch) (Ping timeout: 265 seconds)
[15:29:20] <Henry151> deniska: it doesn't seem to raise an exception
[15:29:27] <Henry151> "{}{}
[15:29:59] <Henry151> "{}{}".format("one","two","three") prints 'onetwo' and does not raise an exception
[15:30:13] <deniska> hm, I was mistaken
[15:30:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:30:25] <deniska> one more reason to prefer the repl :)
[15:31:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:35] <Henry151> i've encountered this pattern several times in the codebase i'm going through. I am pretty sure they were just mistakes / leftover fragments of deleted code
[15:32:37] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[15:32:43] <Henry151> though in one of them, there was something like "{}{}".format("one","two",three()) where three() was a thing that needed to be called
[15:32:58] <Henry151> which was a pretty unclear way of doing things
[15:33:49] <Henry151> in those instances i replaced with f"{one}{two}" and then on a new line, three()
[15:35:10] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[15:35:42] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:36:00] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[15:36:57] *** Joins: upsala (~zcb@185.213.155.160)
[15:37:06] *** Quits: rememberYou (~someone@user/rememberyou) (Remote host closed the connection)
[15:37:07] *** Quits: litharge (litharge@libera/bot/litharge) (Quit: upgrades)
[15:37:22] *** Joins: litharge (litharge@libera/bot/litharge)
[15:37:25] <deniska> technically it first should call three() and then perform a format operation :P
[15:37:37] <deniska> although I hope it's not important
[15:38:18] <Henry151> ah, so "{}{}".format("one","two",three()) calls three() before it formats the string?
[15:38:18] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[15:38:18] *** ChanServ sets mode: +o litharge
[15:38:22] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:38:53] <deniska> Henry151: well, first it evaluates what "one", "two", and three() are, and then performs the format
[15:38:58] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[15:39:27] <Henry151> i comprehend
[15:39:32] <Henry151> thanks
[15:40:17] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6)
[15:41:33] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[15:41:59] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[15:42:19] *** Joins: srilyk (~wayne@user/waynew)
[15:43:18] *** Quits: MrFantastik (~Thunderbi@cpe-69-204-101-67.buffalo.res.rr.com) (Ping timeout: 252 seconds)
[15:44:18] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 240 seconds)
[15:44:51] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[15:46:10] *** Quits: gggp (~textual@60.10.194.47) (Ping timeout: 272 seconds)
[15:46:57] *** Joins: gggp (~textual@36.112.128.143)
[15:47:53] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[15:48:45] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[15:50:04] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4ec1)
[15:52:13] *** Joins: dba (uid502594@id-502594.stonehaven.irccloud.com)
[15:52:45] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[15:52:49] *** Joins: thiras (~thiras@user/thiras)
[15:53:43] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[15:54:18] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:57:35] *** Joins: waynew (~wayne@user/waynew)
[15:58:57] *** Quits: gggp (~textual@36.112.128.143) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:59:00] *** Joins: dober (~dober@sourcehut/user/dober)
[15:59:03] *** Quits: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net) (Quit: The Lounge - https://thelounge.chat)
[15:59:25] *** Joins: dev4449 (~dev4449@46.246.122.46)
[15:59:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[15:59:46] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[16:00:05] *** Joins: kenoba (~kenoba@ip68-0-248-40.ri.ri.cox.net)
[16:00:11] *** Joins: srilyk (~wayne@user/waynew)
[16:01:41] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:01:53] <dev4449> hi. good day. if someone has the java2python package I'd appreciate it if he/she could translate this code snippet in java to python. code: https://paste.ubuntu.com/p/48g2vS5dTb/
[16:01:58] *** Parts: mnx (mnx@user/mnx) (Bye)
[16:01:59] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[16:03:08] <dev4449> I'm not familiar with python but I know java. this is for a friend of mine who uses python.
[16:03:30] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 240 seconds)
[16:04:53] *** Joins: palasso (~palasso@user/palasso)
[16:05:06] *** Joins: rhax (~yannick@user/rhax)
[16:06:27] *** Joins: skapata (~Skapata@user/skapata)
[16:06:29] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 256 seconds)
[16:07:21] *** Quits: ayrus (~ayrus@user/ayrus) (Quit: system has gone to sleep. ZZZzzz…)
[16:07:38] *** Parts: chronon (~chronon@user/chronon) ()
[16:08:50] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[16:09:10] *** Quits: anandprabhu (~anandprab@94.202.243.198) (Quit: Leaving)
[16:10:10] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Read error: Connection reset by peer)
[16:10:27] *** Quits: jazzy (~jaziz@2600:380:4542:186:d4b:fa38:d4e3:e7e5) (Ping timeout: 256 seconds)
[16:13:06] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[16:14:33] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[16:14:50] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 252 seconds)
[16:14:52] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[16:15:34] *** Joins: ulu (~ulu@user/ulu)
[16:17:27] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[16:19:41] *** Joins: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br)
[16:20:05] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Remote host closed the connection)
[16:21:13] <Henry151> "from wx.lib.activex import ActiveXCtrl" is giving me an error ModuleNotFoundError: No module named 'wx._msw' ... some quick googling suggested installing package python-wxtools but i am still having the same results. Any further guidance?
[16:21:41] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[16:23:22] <lericson> lord jesus whoever said vscode's jupyter stuff is good, man i feel bad for you :p
[16:23:25] <topoi> Wu: it's maybe old, but thanks for your reply regarding python+emacs! : )
[16:23:44] *** Quits: KeiraT (~unknown@lulzsec.co.uk) (Ping timeout: 265 seconds)
[16:24:24] *** Joins: KeiraT (~unknown@lulzsec.co.uk)
[16:24:29] *** Joins: nyah (~nyah@90.221.186.180)
[16:28:53] <lericson> whoa i'm actually flabbergasted, is vscode supposed to be this janky?
[16:29:05] <lericson> i know it's the wrong place
[16:29:17] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 258 seconds)
[16:29:41] *** Joins: cheater (~Username@user/cheater)
[16:31:11] <nedbat> lericson: we don't know what you are seeing, so we don't know if it's typical for other vscode users.  I have not heard people reacting as you are.
[16:31:39] <Henry151> hmmm... https://pythonhosted.org/wxPython/main.html says wx.msw
[16:31:40] <Henry151> A few classes available only on Windows
[16:31:42] *** Joins: dnns01 (~quassel@2a02:c207:3003:651::1)
[16:31:58] *** Joins: pnoud (~pnoud@user/pnoud)
[16:32:07] <Henry151> how can i work with / test code that uses wx.msw from a linux machine?
[16:32:18] *** Quits: anas (~anas@196.235.97.18) (Ping timeout: 240 seconds)
[16:33:14] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[16:33:48] <Henry151> i don't even really need to do anything with the wx.msw stuff, but i am trying to import a big class to test some of its methods, and the import is failing because of this wx.msw thing
[16:34:22] *** Joins: shad (~shad@user/shad)
[16:34:30] *** Quits: mathgrad (~mathgrad@2600:8806:3003:f756:f5cd:a8c9:c2ee:d59f) (Remote host closed the connection)
[16:35:03] <nedbat> Henry151: you can put the import into a try/except
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:36] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:16] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 265 seconds)
[16:39:11] *** Joins: rsx (~dummy@ppp-188-174-143-159.dynamic.mnet-online.de)
[16:39:52] <Henry151> hmmm... so i've got a "from wx.lib.activex import ActiveXCtrl" and then the class i'm trying to work with / test is inheriting from the ActiveXCtrl class if understand correctly, as it is defined like class TheClassIwannaTest(ActiveXCtrl): ...
[16:40:01] *** Quits: ionface (~ionface@user/ionface) (Read error: Connection reset by peer)
[16:40:32] <jinsun> Henry151: activex is windows only (maybe wine could have something)
[16:42:16] *** Joins: ionface (~ionface@user/ionface)
[16:42:35] <Henry151> hmm... yeah the device this section of the code will be interacting with in production is a windows device, but i don't currently have access to the actual device, and my development machine is running debian linux
[16:42:41] <kosh> lericson, I use vscode with jupyter notebooks almost every day and I have run into almost zero issues with that
[16:43:08] <kosh> lericson, no idea what problems you are running into
[16:43:28] <Henry151> i guess i do have a windows laptop, maybe i just use that for this part? but that will be a new adventure, having not really done anything but web browsing on that laptop in like 4 years
[16:43:42] <altendky> yte3: qtrio is built on the trio guest mode.  it provides the real structure to mix event loops.  pyqt and pyside provide the python/c++ bridge.  i can't say i know a lot about implementing the mixing of c++ with python, but if you can share some context maybe i'll have something useful to say.
[16:44:38] <kosh> isn't activex supposed to be dead now?
[16:45:00] <Henry151>  kosh: is it?
[16:45:22] <Henry151> so maybe i should be looking into how to completely redo this section of the code in a new way that completely avoids activex
[16:46:00] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[16:46:05] <Henry151> the module is for printing certain stuff on some sort of a small thermal printer
[16:46:06] <jinsun> yes activex is dead mostly, still used by some shitty websites in my company who have enabled IE mode in edge for that
[16:46:29] <kosh> https://en.wikipedia.org/wiki/ActiveX   it says there that it is deprecated
[16:46:37] *** Namiraja is now known as Namigator
[16:46:48] <Henry151> hmm ok
[16:47:07] <Henry151> i will have to speak with my boss and find out what we're going to do here i guess
[16:47:34] <Henry151> though maybe i'll spend a little more time researching it and thinking about it so that i have a suggested path to fixing it
[16:47:51] <kosh> from what I can see it still works in windows 10 but deprecated for years now
[16:48:04] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[16:48:04] <kosh> however with windows 11 it could be gone
[16:48:52] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[16:49:03] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[16:49:08] <Henry151> ok i'll have to look further into this and find out what version of windows will be running on the windows machine that executes this module
[16:49:10] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[16:49:16] <Henry151> in production
[16:49:31] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:49:33] <kosh> and also think about a longer term migration strategy
[16:49:51] <kosh> you don't want to build something now that is already deprecated without some plan to deal with it
[16:50:00] <Henry151> well yeah
[16:50:10] <kosh> sometimes the plan is just that this device needs to work for X years because that is when the hardware gets replaced
[16:53:33] *** Joins: computeiro (~Wender@189.37.68.96)
[16:53:55] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[16:55:06] *** Quits: sandeepk (~sandeepk@223.130.30.197) (Ping timeout: 240 seconds)
[16:55:51] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[16:57:41] *** Joins: gareppa (~gareppa@user/gareppa)
[16:57:57] *** Joins: darksun (~darksun@user/darksun)
[16:58:43] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:00:40] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 252 seconds)
[17:01:42] *** Quits: dld (~davidlowr@2601:197:600:1210:ecb4:116f:408c:2cf4) (Ping timeout: 268 seconds)
[17:03:06] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[17:03:06] *** Joins: dld (~davidlowr@73.61.8.116)
[17:03:34] *** Quits: shad (~shad@user/shad) (Read error: Connection reset by peer)
[17:03:35] *** Joins: Cyp (~cyp@213.237.83.38)
[17:05:02] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[17:05:53] *** Joins: shad (~shad@user/shad)
[17:06:49] *** Quits: LordKalma (~LordKalma@2a01:4f9:c011:203b::1) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[17:07:08] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Ping timeout: 256 seconds)
[17:07:15] *** Quits: phax (~phax@user/phax) (Remote host closed the connection)
[17:07:51] *** Joins: LordKalma (~LordKalma@neth.ruilvo.com)
[17:09:55] *** Joins: LucaTM (~LucaTM@user/lucatm)
[17:09:59] *** Joins: gstaniak (~gstaniak@212.187.221.38)
[17:11:09] <gstaniak> What's the best way to compare a large(ish) number of strings, ie. test for equality? Convert a list of them to a set and check if its length is > 1?
[17:11:19] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[17:11:33] *** Joins: cidtest (~cidtest@89.238.185.218)
[17:11:46] *** Quits: cidtest (~cidtest@89.238.185.218) (Client Quit)
[17:12:35] <The-Compiler> gstaniak: you want to know if all of them are equal? Yeah, that's probably what I'd do
[17:14:13] <gstaniak> The-Compiler: yeah, I'm testing for sync failures. In a given list, all strings should be equal. Thanks!
[17:14:18] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[17:19:53] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[17:19:55] *** Quits: LordKalma (~LordKalma@neth.ruilvo.com) (Read error: Connection reset by peer)
[17:20:12] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[17:20:22] <kosh> lericson, so what problems are you having?
[17:20:37] *** Joins: bsdbandit01 (~bsdbandit@2607:fb90:a948:2c38:281a:e62b:f10c:8194)
[17:20:37] *** Joins: LordKalma (~LordKalma@neth.ruilvo.com)
[17:20:47] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[17:21:10] <lericson> kosh: honestly the list is too long
[17:22:03] <kosh> considering how many people use it and how highly it is suggested I would assume most people are not running into the same problems
[17:22:17] <lericson> or their expectations are low
[17:22:24] *** Quits: bsdbandit01 (~bsdbandit@2607:fb90:a948:2c38:281a:e62b:f10c:8194) (Read error: Connection reset by peer)
[17:22:35] *** Joins: zeden (~zeden@user/zeden)
[17:24:11] <lericson> perhaps my biggest gripe was the speed, it felt like remote desktoping
[17:24:19] *** Joins: yskapell (~yskapell@77.49.136.81.dsl.dyn.forthnet.gr)
[17:24:51] <jinsun> the only problem I have with jupyter vscode is that at work it takes few minutes to open an interactive window, but that is solved by opening it in the morning and never closing it again
[17:24:54] <kosh> that is strange vscode is usually quite fast
[17:24:55] *** Quits: gareppa (~gareppa@user/gareppa) (Quit: Leaving)
[17:25:21] <lericson> compared to what, kosh?
[17:25:32] <ssbr> Eclipse lmao
[17:25:34] <lericson> intellij?
[17:25:52] <kosh> faster to start and run than pycharm, about the same as normal visual studio
[17:25:53] <ssbr> I agree though, it's surprisingly fast for an electron app
[17:26:05] <ssbr> kosh: damning with faint praise, are we
[17:26:24] <kosh> from the time I type vscode and hit enter it is about 3 seconds to open the IDE
[17:26:31] <kosh> if I open a project it takes about 2-3 additional seconds
[17:26:45] <lericson> how about holding down cursor right
[17:26:50] <lericson> how jittery is the ui
[17:27:23] <lericson> and six seconds from intention to result is a long time in my world but let's not get bogged down in numbers
[17:27:31] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:27:49] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[17:27:52] <kosh> six seconds to open an ide and open up a project seems quite fast
[17:28:31] <kosh> when I open a python file and just hold the down area it seems to scroll down fine, I don't see any lag
[17:28:38] <kosh> no idea about jittery
[17:28:49] <lericson> let me time my vs code startup and open the jupyter notebook
[17:29:06] <lericson> hot start even
[17:29:23] <kosh> for opening a jupyter notebook I find it depends on the size of the notebook
[17:29:28] <kosh> most take 1-2 seconds
[17:29:31] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[17:29:45] <lericson> about 30 seconds
[17:29:51] <leduyquang753> VSCode only takes 8" to open for me but I stick to vim whose start time is 3".
[17:29:53] <kosh> I have a few that take longer but they also have far more data in them
[17:29:54] <The-Compiler> I wish vs code didn't claim to be ready before it actually loaded its extensions (for different keybindings in my case)
[17:30:04] <kosh> vim takes 3 seconds to open?
[17:30:09] <leduyquang753> Yes.
[17:30:17] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:30:19] <lericson> vim takes ~0 seconds here
[17:30:20] <leduyquang753> Loading cold takes some time.
[17:30:28] <lericson> cold it takes maybe 2
[17:30:29] <kosh> shouldn't vim be instant on basically anything
[17:30:33] <leduyquang753> After that cold launch it takes near instant.
[17:30:45] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[17:31:00] <kosh> I don't think I can even time how long vim takes, I just type it and hit enter and it is running
[17:31:03] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6) (Quit: Leaving)
[17:31:10] *** Joins: Geronimo (~Geronimo@user/geronimo)
[17:31:21] <leduyquang753> On VSCode's part it goes down to 3" after that cold load.
[17:31:24] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Client Quit)
[17:31:54] <kosh> lericson, 30 seconds to open a notebook seems like a long time
[17:31:59] <lericson> i agree
[17:32:02] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[17:32:06] <lericson> but i don't care about that so much as responsiveness
[17:32:10] *** Quits: sn1tch3r (~sn1tch3r@201-27-147-42.dsl.telesp.net.br) (Quit: Leaving)
[17:32:16] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:32:22] <lericson> everything just takes way longer than i expect it to
[17:32:25] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[17:32:28] <kosh> I have an i7-8700K on this machine
[17:32:54] <lericson> i don't think it should matter what cpu you have
[17:32:55] *** Quits: gstaniak (~gstaniak@212.187.221.38) (Quit: This computer has gone to sleep)
[17:33:06] <lericson> if it's good enough for normal use
[17:33:22] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:33:41] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:34:19] <jinsun> it is 8 seconds for vscode, 2 seconds more for waiting the python extension to load, and 20 seconds more for jupyter interactive to load, for me at home
[17:34:24] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[17:34:26] <jinsun> at work multiply those by 5
[17:34:32] <kosh> jupyter notebook does do work when it starts up
[17:34:43] *** Joins: bungle (~bungle@77-147-16-94.dyn.cable.fcom.ch)
[17:35:01] <jinsun> but once it loads it is good, so I can live with the long load times
[17:35:25] <kosh> that really seems like a long load time, I would have expected any solid state drive and modern cpu to do better
[17:35:42] *** Quits: arcy (~arcy@ip5b43c26f.dynamic.kabel-deutschland.de) (Quit: Konversation terminated!)
[17:36:46] <The-Compiler> here VS Code takes 2-3s to show its UI, but then another 15s+ until I can actually use it (mainly because I need extensions for the keybindings I use, and there's no way to customize in what order extensions are loaded) :-/
[17:37:23] <kosh> I only have 6 extensions right now
[17:38:35] <The-Compiler> more like 40 here :-/ (and yes, I use them)
[17:38:53] *** Joins: gstaniak (~gstaniak@212.187.221.38)
[17:39:01] <The-Compiler> but I wish I could just tell VS Code to load https://marketplace.visualstudio.com/items?itemName=vscodevim.vim and https://vspacecode.github.io/ before anything else
[17:39:08] *** Quits: gstaniak (~gstaniak@212.187.221.38) (Client Quit)
[17:39:30] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[17:39:36] <kosh> I wonder what takes most of the time
[17:39:39] <jinsun> maybe the slow load is just a windows thing? I am using windows both at home and work, haven't tried it with linux
[17:39:56] <lericson> a quick responsiveness comparison of macvim and vscode https://bsg.lericson.se/jing/suQcFFZX07wB.mp4
[17:39:57] <kosh> I am using windows 10, SSD , 8700K and 64GB ram
[17:40:10] * leduyquang753 looks at that 64 GB RAM.
[17:40:17] <lericson> this is the feel that i care about, startup is amortized
[17:40:42] * leduyquang753 looks down at his miniscule 4 GB of RAM and wonders why the laptop can still survive...
[17:40:43] <The-Compiler> there's a "Developer: Startup Performance" command, though no idea how to interpret the info exactly
[17:40:53] <lericson> and yes i learned how to do side-by-side heterogenous video dimension composition using ffmpeg just to show you this
[17:41:18] *** Joins: Trashlord__ (~trash@user/trashlord)
[17:41:23] *** Joins: heco (~redrum@user/redrum88)
[17:42:06] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[17:42:12] <kosh> I have no idea how to record a slice of my screen to show the difference
[17:42:32] <lericson> if you use macOS, it's cmd+shift+5
[17:42:37] <kosh> leduyquang753, I run a lot of simulations
[17:42:40] <lericson> or just select new screen recording in quicktime
[17:42:59] <kosh> I don't have a mac
[17:43:55] *** Quits: p-i- (~Ohmu@node-27x.pool-118-173.dynamic.totinternet.net) (Remote host closed the connection)
[17:44:05] *** Joins: venmx_ (~albasawa@host81-155-235-58.range81-155.btcentralplus.com)
[17:44:25] <lericson> maybe i'm just wildly autistic but even small input response delays annoy me
[17:44:40] <lericson> in fact i even use a 144hz monitor
[17:45:06] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[17:45:11] <lericson> i wonder if that's the nit
[17:45:23] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:45:25] *** Joins: Julian (~tos9@python/site-packages/Julian)
[17:45:58] *** Joins: zodd (~zodd@84-106-80-107.cable.dynamic.v4.ziggo.nl)
[17:46:03] *** Joins: vsantana (~Thunderbi@fttx-17713614930.usr.predialnet.com.br)
[17:46:17] <zodd> I see various implementations for OpenAPI (formally known as Swagger). Is there a good documentation on differences or: what is the way to go (and why)?
[17:46:30] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Ping timeout: 252 seconds)
[17:46:47] *** Joins: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com)
[17:46:48] *** Quits: venmx (~bertie@host81-155-235-58.range81-155.btcentralplus.com) (Client Quit)
[17:46:57] <kosh> lericson, https://drive.google.com/file/d/1QJemgLZY_EUPG-EOAVVznARydkSqpEn0/view
[17:47:06] *** venmx_ is now known as venmx
[17:47:22] <kosh> lericson, I don't see a difference between 60hz and 144hz monitor
[17:47:30] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[17:47:31] *** Joins: easior (~easior@61.155.142.70)
[17:47:41] <lericson> it's stuttering :(
[17:47:51] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[17:48:15] <leduyquang753> Never seen any screen higher than 60 Hz.
[17:48:21] <lericson> to each their own, i can definitely tell when i'm using 60hz
[17:48:34] <lericson> i just feel it
[17:48:41] *** Joins: deviantfero (~deviantfe@190.150.27.58)
[17:48:55] <kosh> I suspect making it smooth the way you want is just not something that the people working on most IDE care about
[17:48:58] <lericson> the same feeling you get when the cpu is working overtime and things start stalling
[17:49:32] <lericson> i don't think the vim devs care about 144hz either :-)
[17:49:59] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[17:50:09] <leduyquang753> I think Bram can live fine with a CRT from the 80s.
[17:50:32] <lericson> you jest but crts actually have some of the lowest input response lags possible
[17:50:35] <amogorkon> anyone here knows how to report evil packages on pypi?
[17:50:55] *** Joins: easior_ (~easior@61.155.142.67)
[17:52:15] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6)
[17:53:30] *** Quits: dev4449 (~dev4449@46.246.122.46) (Quit: Client closed)
[17:53:54] *** Quits: easior (~easior@61.155.142.70) (Ping timeout: 240 seconds)
[17:54:25] <bluss> amogorkon: seems like it might be https://github.com/pypa/pypi-support
[17:54:34] <amogorkon> ty
[17:54:36] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[17:54:36] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[17:54:39] <neilthereildeil> hey all
[17:55:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[17:55:11] <neilthereildeil> im having trouble with a global variable shared across multiprocessess
[17:55:21] <bjs> neilthereildeil: what kind of trouble
[17:55:30] *** Quits: easior_ (~easior@61.155.142.67) (Ping timeout: 240 seconds)
[17:55:30] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 240 seconds)
[17:55:34] <neilthereildeil> the child process doesnt see the varaiable
[17:55:43] <Yhg1s> yes, that's what would happen.
[17:55:43] <bjs> neilthereildeil: don't "see" it?
[17:56:05] <bjs> neilthereildeil: the two processes don't share the same global variables,  they are separate.
[17:56:20] <neilthereildeil> i declare it in the global scope of the same file outside any functions, and the function in which i start the child processes tries to read that variable
[17:56:44] <bjs> neilthereildeil: that won't work for multiprocessing.  processes are separate programs with their own variables and functions and things
[17:56:50] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[17:56:59] <neilthereildeil> but they get forked and share global variables
[17:57:06] <neilthereildeil> at the time of fork
[17:57:07] <bjs> neilthereildeil: they don't share variables
[17:57:08] <bjs> fork copies them
[17:57:16] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 272 seconds)
[17:57:32] <Yhg1s> (if you use the fork model)
[17:57:45] <neilthereildeil> https://paste.ubuntu.com/p/VdGGg98kYh/
[17:57:53] <neilthereildeil> in that link, you can see my code
[17:57:55] <bjs> yeah if you're using 'spawn' you don't even get a copy
[17:57:59] <neilthereildeil> its a little test program
[17:58:12] <neilthereildeil> in main i define workQueue
[17:58:22] *** Joins: matsaman (~matsaman@user/matsaman)
[17:58:26] <neilthereildeil> and then i apply_async to multiple children
[17:59:00] <bjs> neilthereildeil: this is python2?
[17:59:01] <neilthereildeil> and these children start inside of childProcess() function, which tries toe read the global workQueue variable which was defined by the parent before the appy_asyn call
[17:59:03] <neilthereildeil> yea
[17:59:04] <neilthereildeil> 2.7
[17:59:58] <bjs> neilthereildeil: you should pass the queue to the process (the Process has args=... parameter)
[18:00:27] <bjs> neilthereildeil: see the example in the docs of how to use the Queue:  https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes
[18:00:46] *** xrogaan_ is now known as xrogaan
[18:00:53] <neilthereildeil> oh ok
[18:01:13] *** Joins: Gerula_ (~Gerula@user/gerula)
[18:01:13] *** Gerula is now known as Guest3396
[18:01:13] *** Quits: Guest3396 (~Gerula@user/gerula) (Killed (cadmium.libera.chat (Nickname regained by services)))
[18:01:13] *** Gerula_ is now known as Gerula
[18:01:22] *** Joins: bilb_ono (~alexmarsh@pool-96-250-84-46.nycmny.fios.verizon.net)
[18:01:35] <neilthereildeil> bjs: a similar design pattern to what i have pasted worked with multiprocessig.BoundedSemaphore though. why?
[18:01:59] <Yhg1s> neilthereildeil: you're creating the pool before the queue.
[18:01:59] <bjs> neilthereildeil: oh I remember you now
[18:02:25] <bjs> neilthereildeil: what you were doing was creating the Semaphore _before_ the Process in that case, so it got inherited
[18:02:25] <grym> fell words
[18:03:00] <neilthereildeil> when does the fork happen? at multiprocessing.pool() or apply_async()?
[18:03:12] <bjs> neilthereildeil: here you create the Queue _after_ you've created the Pool so it doesn't get copied over.  In both cases you're really supposed to pass them in (via the `args`). Inheriting like this doesn't even work (?) with modern versions of multiprocessing (aka with 'spawn')
[18:03:21] <bjs> neilthereildeil: I think it's not defined
[18:03:25] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:03:32] <bjs> but clearly for you it happened when you made the Pool, since it didn't get inherited (I guess)
[18:03:35] <neilthereildeil> oh crap thats not good.
[18:03:52] *** _ELFrederich is now known as ELFrederich
[18:03:58] <bjs> neilthereildeil: well it'll just work fine if you do it in the way the docs tell you to do it :)
[18:04:20] <neilthereildeil> bjs: i remember you told me that multiprocessing.BoundedSemaphore is just a n identifier to the OS that gets inherits, so child processes can reference the same Posix semaphore
[18:04:40] <bjs> neilthereildeil: didn't we have a conversation about inheritance of different objects after a fork() and we talked about when the fork() happens and the different ways Python's multiprocessing library works
[18:04:41] <bjs> neilthereildeil: yes
[18:04:54] *** Quits: matsaman (~matsaman@user/matsaman) (Read error: Connection reset by peer)
[18:05:34] <bjs> well the class stores a descriptor which is a POSIX named semaphore (iirc),  but I'd have to read the code.  also it's dependent on what OS you're on of course (Windows does everything different)
[18:05:35] *** Joins: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de)
[18:05:39] *** Joins: ice9 (~ice9@user/ice9)
[18:06:02] <ELFrederich> In Python... what would the default implementation of __repr__ be?  For example, the thing that gives you <__main__.Foo object at 0x7fc218044040>
[18:06:14] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[18:06:14] <Yhg1s> ELFrederich: that would be object.__repr__
[18:06:40] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[18:06:42] <neilthereildeil> bjs: ok, so although it seems to refer to the same POSIX semaphore object when i fork, its _NOT_ recommended to declare it globally and refer to it from the children. you are saying all objects used in the child processes should be PASSED via args= in Process(), correct?
[18:06:50] <ELFrederich> Yhg1s, I want to extend it a little.  I like the __main__.Foo object part.  Is that the self.__class__.__name__?
[18:07:01] <amogorkon> i usually try to make a test that holds true like assert eval(repr(obj)) == obj
[18:07:16] *** Joins: wyclif (~wyclif@user/wyclif)
[18:07:22] <bjs> neilthereildeil: well, especially in modern `multiprocessing`, there are multiple ways it can produce new processes
[18:07:28] <ELFrederich> amogorkon, good idea where possible
[18:07:32] <Yhg1s> ELFrederich: it's self.__class__.__qualname__ and self.__class__.__module__
[18:07:52] <amogorkon> yeah, in some cases it's not possible, but it's a good idea to aim for
[18:07:53] <bjs> neilthereildeil: the classic simple fork() allows you to inherit but some OSes (e.g. Windows and MacOS) use a different approach which cannot inherit
[18:08:08] *** Joins: varaindemian (~varaindem@86.124.78.162)
[18:08:27] <bjs> neilthereildeil: passing them with `args` is the safe way, it (A) makes sure the object exists before the process is created and (B) ensures the new process receives the object correctly.
[18:08:28] <neilthereildeil> is the global variable inheriting approach not officially supported? maybe that could be causing my semaphore leak??
[18:09:11] <ELFrederich> Yhg1s, so.... return f"<{self.__class__.__module__}.{self.__class__.__qualname__} object at 0x{id(self):x}>"
[18:10:12] <Yhg1s> neilthereildeil: it's something that doesn't work well.
[18:11:05] <bjs> neilthereildeil: it will work if you do it correctly and are on the right platform and have the right multiprocessing context (either explicitly 'fork' in Python 3, or I think that's the only option for Python 2)
[18:11:06] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[18:11:28] <bjs> neilthereildeil: I *really* recommend just passing the object using `args`.  Because all of these concerns just go away
[18:12:06] <neilthereildeil> bjs: ahhh so then i guess its not worth passing BoundedSemaphore as argument to child processes and retesting? u dont think thats the cause of the leak on Linux?
[18:12:26] <bjs> neilthereildeil: I really have no idea,  you seem to be mostly guessing at what the cause of the "leak" is
[18:12:34] *** Joins: Roey (~Roey@user/Roey)
[18:12:42] <neilthereildeil> yea this is a really hard bug. none of my tools work
[18:12:44] *** Joins: matsaman (~matsaman@user/matsaman)
[18:12:46] <neilthereildeil> you cant use a debugger for this
[18:12:58] <neilthereildeil> its basically just mindgames at this point :)
[18:13:22] *** Joins: Sheilong (uid293653@id-293653.charlton.irccloud.com)
[18:14:31] <matsaman> heisendebugger
[18:14:56] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[18:15:09] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[18:15:53] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[18:16:01] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 268 seconds)
[18:17:34] <bjs> neilthereildeil: helping people with vague problems over irc is hard enough,  but vague concurrency problems is near impossible :)
[18:18:00] <neilthereildeil> bjs: thanks so much for all your advice and patience so far1
[18:18:18] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[18:20:40] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[18:20:54] *** Quits: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com) (Client Quit)
[18:21:08] <yte3> altendky: I want to add Python scripting support to an application that already has Lua support. It works by calling specific script functions (non-blocking) in reaction to application's events. For long computations Lua code would use coroutines, and anyways the application is able to regain control after X milliseconds of Lua computation. I'm struggling to find the same facilities in Python.
[18:21:20] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 272 seconds)
[18:21:28] <merijn> I'm trying to speed up tests for a pip package by using ccache on the C parts. However, pip uses a random temp directory each time, which is messing up the caching. Anyone ever manage to get pip and ccache to play nice in that regard?
[18:21:35] <lericson> yte3: async
[18:21:42] <lericson> or generators
[18:21:52] <lericson> but really, async
[18:21:54] <yte3> lericson: how do you manage the event loop from C++?
[18:22:03] <lericson> i have little to no idea
[18:22:09] *** Joins: YoungPotato (~user@c-67-186-254-165.hsd1.ut.comcast.net)
[18:22:10] <yte3> lericson: Python code called by the application must not block
[18:22:12] *** Joins: PdimH (~pdimh@user/pdimh)
[18:22:18] <lericson> in principle it's simple though
[18:22:44] <lericson> look at how the python runtime does its event loops
[18:23:13] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[18:23:20] <altendky> 'just read the source code and implement another event loop but with nice control from c++' doesn't sound 'simple'  `:]`
[18:23:23] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[18:23:51] *** Quits: YoungPotato (~user@c-67-186-254-165.hsd1.ut.comcast.net) (Client Quit)
[18:23:52] <lericson> the principle behind an internal combustion engine is simple too, it doesn't mean there isn't work to be done to make one
[18:24:06] <altendky> ok, yes, everything is simple
[18:24:28] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[18:25:07] <altendky> yte3: if the python code isn't playing nice (is running for a long time without yielding control) do you need to be able to interrupt it?
[18:25:13] <altendky> with a timeout as you mention
[18:25:36] <yte3> besides simple or not, I was expecting some Python/C API to deal with that. If there is not, sounds a bit like reinventing the internal combustion engine ('cause everyone is able to reinvent the wheel :D)
[18:26:04] <yte3> altendky: pause and resume it I'd say
[18:26:33] <yte3> being able to run the event loop this way would be fine (i.e. runs in Python, but control returns to the application every X millisecs)
[18:26:49] <Yhg1s> yte3: yes, there's no such support in CPython (nor in any Python implementation I'm aware of)
[18:27:18] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6) (Quit: Leaving)
[18:27:35] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[18:27:38] <lericson> i think you can use asyncio.base_events.BaseEventLoop.run_forever as the basis
[18:27:47] <lericson> but anyway i guess this is not the route you want to go
[18:28:21] <yte3> lericson: correct. if I can get away with pause/resume/exec timeout I'd prefer going with that
[18:28:40] <altendky> yte3: not that it is your solution, but the trio guest mode approach is interesting at least.  they put the trio logic off in a separate thread and you tell it how to request things to run in the main thread.  so your code runs in the main thread still.  qtrio uses that to mix trio-run coroutines with the qt event loop (wrapped for python via pyside or pyqt).  but, it still depends on the code being async friendly.  but hey,
[18:28:40] <altendky> even straight qt c++ has that expectation.
[18:29:06] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[18:29:16] <lericson> it sounds like you want pre-emptive scheduling and then you need actual OS threads
[18:29:28] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[18:29:29] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:29:54] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 240 seconds)
[18:30:01] *** Joins: SilverFox (~joe@64.223.223.162)
[18:30:17] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[18:30:50] <SilverFox> Hey #python, im looking for a way to terminate a whole python program if one of my threads dies, or maybe restart the thread?
[18:30:51] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[18:31:14] <graingert> SilverFox: you can use trio.to_thread.run_sync to run your threads
[18:31:28] <nedbat> SilverFox: why is the thread dying?
[18:31:31] <graingert> then the exception will always bubble up through your callstack
[18:31:39] <graingert> SilverFox: oh yeah what sort of "die"?
[18:32:12] <graingert> SilverFox: show your code
[18:32:18] <SilverFox> it hits some exception that dies
[18:32:22] <SilverFox> its really long :/ and spaghetti
[18:32:25] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[18:32:28] <graingert> show it anyway
[18:32:43] <SilverFox> Sure, give me a sec
[18:32:44] <graingert> usually a concurrent.futures.ThreadPoolExecutor is good enough
[18:32:47] *** Joins: pnoud (~pnoud@user/pnoud)
[18:33:07] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[18:33:14] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:33:29] <graingert> also you can use https://docs.python.org/3/library/threading.html#threading.excepthook but that's a bit of a last resort
[18:33:32] <SilverFox> Ah, hm its hard to even pick out, some examples would be nice id be happy to read.
[18:33:35] <SilverFox> Oh ok cool
[18:33:53] <SilverFox> my thread runs a bit of code that uses schedule.run_pending()
[18:33:54] *** Quits: vsantana (~Thunderbi@fttx-17713614930.usr.predialnet.com.br) (Ping timeout: 240 seconds)
[18:33:57] <lericson> it would be nice if there was a decorator to turn a generator into a list
[18:34:00] <SilverFox> and does a lot of things on that schedule
[18:34:07] <SilverFox> sometimes scheduled tasks might crash or fail
[18:34:12] <SilverFox> and that bubbles up and kills the thread
[18:34:15] *** Joins: zebrag (~chris@user/zebrag)
[18:34:19] <SilverFox> maybe i can just catch errors right there
[18:34:30] <SilverFox> on next schedule they basicly restart anyway
[18:34:40] <SilverFox> that might be better way to do it now that i think about it
[18:34:47] <graingert> SilverFox: yeah sounds like trio would be excellent for your usecase
[18:35:03] <SilverFox> graingert: ill look that up, thanks :3
[18:35:29] <fdgr> are there any real scenarios for async/await in python?
[18:35:36] <amogorkon> definitely
[18:35:41] *** Joins: HaJo (~hajo@2a01:c23:8875:5f00:821f:2ff:feef:dabf)
[18:35:45] <amogorkon> jupyter for instance
[18:35:51] <grym> webserver
[18:35:53] <graingert> async with trio.open_nursery() as tg:
[18:35:53] <graingert>     tg.start_soon(trio.to_thread.run_sync, your_sync_fn) # the sync function is now running concurrently to your current async function
[18:35:53] <graingert>     await something_else()
[18:35:56] <graingert> SilverFox: ^
[18:36:17] <lericson> fdgr: i actually recently had a great usecase for async/await, i wrote a piece of network code
[18:36:17] <SilverFox> im using async/await rn
[18:36:20] <SilverFox> json chat bot
[18:36:20] <graingert> then if your_sync_fn raises an exception it will cancel your trio nursery and raise the exception out of the current function
[18:36:41] <graingert> SilverFox: oh great, then you might want `async with anyio.create_task_group() as tg:`
[18:36:54] <graingert> then `tg.start_soon(anyio.to_thread.run_sync, your_sync_fn)`
[18:37:08] <SilverFox> graingert: Oh boy, i think thats a little more than i can handle
[18:37:16] <SilverFox> im going to have to read a lot more docs
[18:37:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[18:37:37] <nedbat> SilverFox: you can definitely put a try/except in your thread's main function to deal with exceptions.
[18:37:42] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 258 seconds)
[18:37:51] <HaJo> Hi, is a marshmallow expert online? I want to validate a debitornumber. The number can be an integer but it also my be empty. debitor = fields.Integer(required=False,allow_none=True) is not working. What can i do?
[18:37:54] <SilverFox> nedbat: thats what im going to try to do rn,
[18:38:03] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[18:39:29] <HaJo> as workaround i am checking it as RE, but that is only the second best solution: fields.String(validate=validate.Regexp('^[1-4]{0,8}$'))
[18:39:30] <yte3> is it possible, with some async framework, to run the event loop only for a slice of time (instead of forever, i.e. "blocking")?  calling stop() followed by run_forever() ?
[18:39:49] <graingert> yte3: yes, but it's not recommended
[18:40:11] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[18:40:16] <graingert> SilverFox: can you show your code?
[18:40:19] <SilverFox> k cool~ yeah i can catch the exception in my thread
[18:40:22] <SilverFox> graingert: no, not really
[18:40:39] <SilverFox> graingert: its just way too difficult to pull snippits rn, and the code is private so i cant send a commit
[18:40:50] <SilverFox> graingert: sorry, plus i dont even know what to show ;c its very spaghetti
[18:41:08] <SilverFox> but my thread just runs a schedule.do_pending, i can catch errors there
[18:41:39] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[18:41:53] <graingert> SilverFox: right but you probably don't want to do that
[18:42:11] <SilverFox> graingert: what would be a better soltion?
[18:42:15] <graingert> I assume you're using asyncio - it already has a thread pool with a job queue
[18:42:33] *** Joins: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com)
[18:42:34] *** Quits: n-st (~n-st@user/n-st) (Ping timeout: 268 seconds)
[18:42:35] <nedbat> graingert: can you explain why "you don't want to do that"?
[18:42:56] <graingert> you don't need to run your own scheduler of pending jobs
[18:43:02] <graingert> asyncio already maintains one
[18:43:09] <SilverFox> graingert: oh, hm :c
[18:43:12] *** Joins: ray (~ray@user/re)
[18:43:27] <SilverFox> graingert: i dont know how to schedule with asyncio, its true i am using async elsewhere in the code though
[18:43:40] <SilverFox> graingert: but yeah, im using schedule for the on-time repition
[18:43:47] <graingert> `asyncio.to_thread(sync_fn)` will run your sync_fn in a thread in a pool
[18:44:09] <SilverFox> graingert: on a schedule right?
[18:44:16] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[18:44:39] <graingert> you just do `await asyncio.sleep(when_to_run); await asyncio.to_thread(sync_fn)`
[18:44:49] <graingert> to_thread is in 3.9+ `anyo.to_thread.run_sync` does basically the same thing but works on 3.6+
[18:45:02] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[18:45:50] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[18:45:55] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6)
[18:46:06] <SilverFox> graingert: ok, let me finish up my try/catch in thread, ill commit that and then ill try changing everything schedule, over to async
[18:46:23] <graingert> if you catch the exception what do you do with it?
[18:46:37] *** Joins: azazello (~azazello@109.75.158.195)
[18:47:24] <SilverFox> graingert: Im just going to note that it happened and move on, schedule will reschedule the method to be run again in the future, so basicly it will restart
[18:48:02] <SilverFox> graingert: if it was a one time weird input that caused a crash, it just will skip a beat, and on next schedule it will restart from a known point
[18:48:06] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca) (Ping timeout: 252 seconds)
[18:48:15] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[18:48:46] <SilverFox> I wanna try your way though
[18:49:12] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[18:49:12] *** Quits: justinf210 (~justinf21@12.sub-97-44-0.myvzw.com) (Ping timeout: 258 seconds)
[18:50:07] <Gurkenglas> https://github.com/certik/line_profiler was last commited to 11 years ago. I just got a segfault from it. Can you recommend a python line profiler?
[18:50:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:51:12] <grym> Gurkenglas: https://github.com/pyutils/line_profiler
[18:51:25] <grym> (the modern continuation, i think, of the tool you're using now)
[18:51:26] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[18:51:48] *** Joins: srilyk (~wayne@user/waynew)
[18:52:04] <SilverFox> graingert: ok, im going to try your way
[18:53:20] <SilverFox> graingert:v oh, right i cant put await into another method
[18:53:29] <SilverFox> graingert: im going to find a way to send this code, one sec
[18:53:52] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 246 seconds)
[18:53:55] *** Joins: metah4ck1 (~meta@user/metah4ck3r)
[18:54:19] <graingert> SilverFox: https://bpa.st/+python
[18:54:25] <graingert> (it's in the topic)
[18:54:32] <SilverFox> graingert: heres waht i currently have https://termbin.com/68ud
[18:54:35] <SilverFox> graingert: what is?
[18:54:47] <SilverFox> graingert: oh, i can do that too
[18:55:15] *** Joins: gstaniak (~gstaniak@212.187.221.34)
[18:55:23] *** Joins: anas (~anas@196.235.97.18)
[18:55:28] <SilverFox> https://bpa.st/SBKA
[18:56:06] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[18:56:18] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[18:56:43] <gstaniak> I'm looking for a way to canonicalise and compare config files in the ini format. Is there a module that will provide a consistent canonical version of equivalent configs even if stanzas are reordered and/or there are whitespace differences etc?
[18:57:00] <amogorkon> gstaniak, yeah, it's called a dict ;)
[18:57:14] <matsaman> $$
[18:57:32] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:57:37] <grym> gstaniak: do you care about comments?
[18:58:12] <gstaniak> grym: no, just the meat
[18:58:12] <graingert> SilverFox: you can use a startup event to start a task
[18:58:26] <grym> gstaniak: then use ConfigParser to load both and see if they're equal
[18:58:30] <SilverFox> graingert: What would that look like?
[18:58:57] <grym> https://docs.python.org/3/library/configparser.html
[18:58:59] <gstaniak> grym: thanks, that's an idea
[18:59:01] <amogorkon> grym is stealing my ideas!
[18:59:13] <grym> :D
[18:59:22] <amogorkon> boo!
[18:59:29] <amogorkon> :p
[18:59:51] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:00:18] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 240 seconds)
[19:00:21] *** Joins: welrmaron (~welrmaron@176.126.70.167)
[19:01:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[19:01:43] <graingert> SilverFox: https://docs.aiohttp.org/en/stable/web_advanced.html#background-tasks
[19:02:53] <graingert> aiohttp's lifespan protocol is a bit broken, I'd recommend Starlette
[19:03:20] <amogorkon> okay, RFC: with a functional auto-install feature in https://pypi.org/project/justuse, would you say that IPFS ( https://ipfs.io/ ) would be the way to go to integrate a P2P package distribution or is there a better way?
[19:03:34] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[19:04:07] *** Joins: Akuli (~Akuli@82-203-160-163.bb.dnainternet.fi)
[19:04:55] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[19:05:02] <amogorkon> i don't want to go ahead with something and get poked at for not having chosen Y instead later
[19:05:20] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[19:05:27] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Quit: The Lounge - https://thelounge.chat)
[19:05:28] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[19:05:38] *** Joins: MrFantastik (~Thunderbi@rrcs-184-74-43-235.nys.biz.rr.com)
[19:06:07] *** Quits: HaJo (~hajo@2a01:c23:8875:5f00:821f:2ff:feef:dabf) (Quit: Leaving)
[19:06:18] <matsaman> man I hope there's no package named Y
[19:06:23] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[19:06:43] <amogorkon> no, but https://pypi.org/project/y0/ :p
[19:07:26] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[19:07:38] *** Joins: qlixed (~qlixed@181.44.129.13)
[19:07:48] <matsaman> 'y0', that's bad, but still better than things named after plain English words
[19:07:59] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 258 seconds)
[19:08:08] <matsaman> electron, slack, apache, python
[19:08:20] <amogorkon> wow, they got DARPA funding :o
[19:08:29] *** Quits: kafka (~kafka@user/kafka) (Quit: WeeChat 3.2)
[19:08:33] <matsaman> with no strings!
[19:08:42] *** Joins: kafka (~kafka@user/kafka)
[19:08:48] <grym> amogorkon: better add quad-chart to your venv, then.
[19:09:03] <amogorkon> whazzat?
[19:09:33] *** Quits: kafka (~kafka@user/kafka) (Client Quit)
[19:09:43] <grym> DARPA loves a particular kind of reporting ppt slide known as a quad chart
[19:09:51] <amogorkon> ahh
[19:09:59] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[19:10:04] <amogorkon> well, i don't have DARPA funding, so i don't need that
[19:10:10] <amogorkon> y0 does
[19:10:31] *** Joins: p-i- (~Ohmu@node-27x.pool-118-173.dynamic.totinternet.net)
[19:11:11] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[19:11:15] <amogorkon> any comments on IPFS for PyPI-offloading?
[19:11:17] <kosh> I have a system that is using multiprocessing.pool, how can I figure out the overhead of the objects I hand back and forth? I am looking at changing the design of my system a bit and I want to figure out how much overhead I am adding but I am not sure where this transmission overhead shows up in profiling
[19:11:38] *** Joins: wyclif (~wyclif@user/wyclif)
[19:13:03] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[19:13:54] <graingert> https://www.irccloud.com/pastebin/LDZP8Ugj/SilverFox.py
[19:14:24] <graingert> SilverFox: then you can run it with `hypercorn --trio SilverFox:create_app()`
[19:16:27] *** Quits: m0nkey_ (~quassel@user/m0nkey/x-3352227) (Quit: Quit)
[19:16:27] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[19:16:33] *** Joins: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr)
[19:16:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[19:16:52] *** Joins: srilyk (~wayne@user/waynew)
[19:17:16] *** Quits: metah4ck1 (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[19:17:22] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-147.dsl.bell.ca)
[19:17:38] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:17:53] <neilthereildeil> when i call apply_async and pass the func argument in which to start the process, what happens when that function returns?
[19:17:58] <neilthereildeil> does the process die?
[19:18:05] <SilverFox> graingert: oh wow, ok thank you. Im going to try this out!
[19:18:26] <catern> would anyone take a look at an article I'm writing about a new distributed systems library? I'm just looking for some first reactions to know that it makes sense. It's still a draft, so please don't share it, but: http://catern.com/integration.html
[19:18:33] <graingert> neilthereildeil: on a multiprocessing.Pool ?
[19:18:38] <neilthereildeil> yea
[19:19:09] <neilthereildeil> my last statement in the function passed to apply_async is a print statement
[19:19:23] <neilthereildeil> i dont explicitly return, but i also dont see the child processes exiting
[19:19:23] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[19:19:40] *** Joins: srilyk (~wayne@user/waynew)
[19:20:10] *** Quits: fdgr (~fdgr@178.49.152.42) (Quit: Client closed)
[19:20:19] <amogorkon> catern, i would refrain from using "cute" names, why not full words?
[19:20:20] *** Joins: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980)
[19:20:47] <catern> amogorkon: er, sorry, I don't know what you mean
[19:20:50] *** Joins: wyclif (~wyclif@user/wyclif)
[19:20:58] <amogorkon> "orderd"
[19:21:06] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[19:21:20] <graingert> isn't that a daemon that does orders
[19:21:21] <amogorkon> positiond
[19:21:24] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[19:21:28] *** Quits: PdimH (~pdimh@user/pdimh) (Quit: May we meet again)
[19:21:30] <catern> amogorkon: ah, I see, thanks for the feedback
[19:21:34] <amogorkon> yw
[19:22:13] <graingert> like systemd
[19:22:24] <amogorkon>  orderd: an order entry daemon
[19:22:24] *** Joins: finsternis (~X@23.226.237.192)
[19:22:31] <graingert> you don't read it like systemed
[19:22:45] <amogorkon> but positiond: Positiond,
[19:22:50] <graingert> neilthereildeil: it gets returned to the pool
[19:22:56] <amogorkon> *shrug*
[19:23:10] <graingert> that's a position daemon that positions things
[19:23:33] *** Joins: magla (~gelignite@55d461f0.access.ecotel.net)
[19:23:49] <graingert> catern: you should post it in https://gitter.im/python-trio/general
[19:24:00] <graingert> catern: also port it to anyio
[19:24:01] <graingert> :D
[19:25:13] <amogorkon> but if i understood the paper correctly, i think i like it
[19:26:11] <amogorkon> i think it might integrate well with use()
[19:26:17] <neilthereildeil> graingert: it seems like my child processes are not exiting
[19:26:28] <graingert> neilthereildeil: they won't until you close the Pool
[19:26:33] <SilverFox> graingert: whats the hypercorn bit?
[19:26:36] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[19:26:56] <graingert> SilverFox: `path/to/your/venv/bin/python -m pip install hypercorn starlette`
[19:27:17] <graingert> aiohttp is a web server and web framework in one
[19:27:19] <SilverFox> graingert: no i meant like, how does it work where does it go?
[19:27:24] <neilthereildeil> graingert: i want the child process to exit after finishing the function, and another process to automatically be spawned
[19:27:28] <graingert> starlette is a web framework and hypercorn is a web server
[19:27:30] <SilverFox> graingert: is that something i would do in __init__ ?
[19:27:33] <graingert> SilverFox: you run it at the command line
[19:27:41] <SilverFox> SilverFox: Ah.. ok?
[19:27:46] <neilthereildeil> def childProcess():     myPid = str(os.getpid())    number = workQueue.get(block=True)    print "PID " + myPid + " got " + str(number)
[19:27:49] <neilthereildeil> thats all i do
[19:27:51] *** Joins: n-st (~n-st@user/n-st)
[19:27:54] <neilthereildeil> in the child process
[19:28:01] <neilthereildeil> and its printing the 3rd statement
[19:28:09] <neilthereildeil> "PID...got..."
[19:28:21] <graingert> SilverFox: you can use it like a python function: https://pgjones.gitlab.io/hypercorn/how_to_guides/api_usage.html#api-usage
[19:29:23] <neilthereildeil> graingert: im expecting the statement to print, and the function to return, and the process to die and be respawned at childProcess() again
[19:29:33] <SilverFox> Ill look through that, this seems like a lot, and im not even very sure where the new methods you gave me go. I appreciate the help a lot i just feel a tad lost, is create_app a method replacing run, scheduleBoardUpdates and messages?
[19:29:37] <graingert> neilthereildeil: show your code?
[19:29:57] <graingert> SilverFox: yes you'll need to fill in `async def messages(request):` though
[19:30:08] <neilthereildeil> graingert: https://paste.ubuntu.com/p/8BDmXZxDs8/
[19:30:12] <graingert>     @app.route("/api/messages")
[19:30:12] <graingert>     async def messages(request):
[19:30:12] <graingert>         ...
[19:30:18] <graingert> SilverFox: I just left it blank
[19:30:22] <SilverFox> graingert: thats ok, i can move all that in. But it is a method of the class i put together
[19:30:37] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 268 seconds)
[19:30:46] <SilverFox> graingert: ok, then from __main__ ill call the hypercorn call?
[19:31:34] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[19:31:42] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[19:32:04] *** Joins: doko (~doko@2a02:8106:1a:7600:c80e:4060:d7f1:c4b6)
[19:32:13] <SilverFox> heres what i have so far
[19:32:15] <SilverFox> https://bpa.st/KM3Q
[19:32:22] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (Quit: The Lounge - https://thelounge.chat)
[19:32:33] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[19:32:35] *** Joins: LiftLeft (~LiftLeft@154.21.23.33)
[19:32:42] <graingert> SilverFox: you need to dedent     def create_app(self):
[19:32:47] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[19:32:48] <graingert> it should be a top level function
[19:33:16] <SilverFox> graingert: you said it was a method in my class tho :/
[19:33:23] <graingert> did I?
[19:33:39] <catern> amogorkon: what is "use"?
[19:33:45] <graingert> ah I thought by "method" you meant "pattern"
[19:33:50] <SilverFox> graingert: Yeah, i can take it out but i may have to make two yamlDatabase instances
[19:33:52] <graingert> it's the full program
[19:34:02] <amogorkon> catern, https://pypi.org/project/justuse/
[19:34:16] <SilverFox> graingert: Mh :c, am i ditching all my class stuff then?
[19:34:39] <graingert> yeah you just put all the objects you need to make inside your `def create_app():`
[19:34:51] *** Quits: kostkon_ (~androirc@ob21aa.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:34:55] <amogorkon> catern, you can safely use() code from web-sources like github or auto-install packages
[19:35:01] <SilverFox> graingert: Im not ususally a fan of that but i guess i could try it
[19:35:05] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[19:35:16] <SilverFox> graingert: I feel like im really being led quite far off where i was previously headed :3
[19:35:22] <catern> amogorkon: oh, does it do sandboxing?
[19:35:25] <amogorkon> catern, basically the libs-side of what you're refering to
[19:35:29] <neilthereildeil> graingert: do u see anything im doing obviously wrong?
[19:35:30] <amogorkon> no sandboxing
[19:35:47] <amogorkon> catern, why would you need sandboxing?
[19:36:12] <graingert> neilthereildeil: usually assignments in `if __name__ == "__main__":` cause problems with multiprocessing
[19:36:20] <graingert> neilthereildeil: use `if __name__ == "__main__": sys.exit(main())`
[19:36:26] <graingert> and put your code in `def main(): ...`
[19:36:34] <catern> amogorkon: well, if I imported from some URL then that URL could get taken over by someone malicious, and then I'd load their malicious code
[19:36:42] <amogorkon> catern, no, it couldn't
[19:36:47] <amogorkon> all code is hash-pinned
[19:36:56] <catern> ah I see you have hashes, nice
[19:37:04] *** Quits: varaindemian (~varaindem@86.124.78.162) (Quit: Client closed)
[19:37:21] <graingert> neilthereildeil: I would expect your process to terminate
[19:37:38] <graingert> and then start a new one when you call apply_async again
[19:38:10] <SilverFox> graingert: ok, now heres what ive got https://bpa.st/47WQ
[19:38:17] <SilverFox> i still need to figure out how to launch it,
[19:38:30] *** Quits: locsmif (~none@user/locsmif) (Quit: leaving)
[19:38:48] *** Quits: ulu (~ulu@user/ulu) (Quit: Leaving)
[19:39:12] <graingert> SilverFox: if you called it the same as I did you should be able to use: `hypercorn SilverFox:create_app()`
[19:39:14] <SilverFox> also hm... now i cant call self.messages because its a async def, in my create_app def
[19:39:29] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 265 seconds)
[19:39:45] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:39:48] <SilverFox> graingert: i want to do that from the python script, id like to try and make the entrypoint just be python app.py
[19:39:51] <amogorkon> catern, i'd say it's actually safer to use() stuff now than to pip install it because insisting on the correct hash helps against typosquatting :)
[19:39:56] <bjs> neilthereildeil: you try add 100 things into a Queue which can only hold 10, and you only try .get() 5 times
[19:40:12] <bjs> neilthereildeil: so once the queue reaches size 10 the whole program will freeze from what I can tell
[19:40:16] <bjs> is that what you are observing?
[19:40:23] <amogorkon> although pip also has a safe hash mode, but nobody cares (or even knows about it)
[19:40:42] <catern> amogorkon: I agree with that; but I use Nix for Python which is equally safe
[19:40:43] *** Quits: JimMadge (~jim@host86-141-21-184.range86-141.btcentralplus.com) (Quit: WeeChat 3.2)
[19:40:43] <neilthereildeil> bjs: the child processes should be respawning 20 times each and draining the queue
[19:41:06] <bjs> neilthereildeil: respawning 20 times? I didn't see anything about that in your code,  or did I miss something?
[19:41:20] <amogorkon> catern, ah, nice. does it insist on hashes, too?
[19:41:28] *** Joins: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net)
[19:41:28] <SilverFox> graingert: Im not sure how to get everything placed in now, maybe im missing something. i cant reference async def messages anymore,
[19:41:45] <neilthereildeil> there are 5 respawning threads that handle 100 items, one on each spawn
[19:41:46] <graingert> https://www.irccloud.com/pastebin/ueFPc5oe/amain.py
[19:41:52] <graingert> SilverFox: ^
[19:41:57] <catern> amogorkon: yes, Nix requires static hashes of source code all the way down the stack
[19:42:08] <amogorkon> i like that
[19:42:13] <bjs> neilthereildeil: I am confused, I don't see anything about that in your code. Can you share your current code?
[19:42:19] *** Joins: ntdll (~ntdll@user/ntdll)
[19:42:39] *** Quits: gstaniak (~gstaniak@212.187.221.34) (Quit: This computer has gone to sleep)
[19:42:41] <SilverFox> graingert: ill give that a go, thanks. but it still dosent fix how i cant call messages, should i just make it another seperate method?
[19:42:49] <amogorkon> catern, well, use() has other nice features beside that ;)
[19:43:05] *** Joins: goldfish (~goldfish@user/goldfish)
[19:43:06] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:43:07] <amogorkon> but i don't want to spam
[19:43:18] <graingert> SilverFox: starlette calls it for you when you do `requests.post("http://localhost:8080/api/messages")`
[19:43:26] <SilverFox> graingert: also where does "scheduler" come from in line 24 here? https://www.irccloud.com/pastebin/LDZP8Ugj/SilverFox.py
[19:44:05] <SilverFox> graingert: im not sure what you mean, i dident call requests.post
[19:44:21] <neilthereildeil> https://paste.ubuntu.com/p/3MvNkbPH7T/
[19:44:24] <neilthereildeil> thats the curent code
[19:44:39] <bjs> neilthereildeil: where is this "respawning" stuff you talk of in this code?
[19:44:51] <neilthereildeil> i passed the workQueue as an argument rather than a global var as bjs suggested
[19:44:52] *** Joins: P4ddyF (~PaddyF@user/yogoyo)
[19:45:11] *** Joins: pragmaticenigma (~pragmatic@user/pragmaticenigma)
[19:45:16] *** Quits: const (~const@user/const) (Quit: WeeChat 3.3-dev)
[19:45:32] <neilthereildeil> bjs: my understanding is that after childProcess() finishes, the Pool object should automatically kill the child process, and respawn a new process at childProcess()
[19:46:04] <bjs> neilthereildeil: so a Pool has a pool of processes that it runs tasks on. Each apply_async asks the pool to run a task
[19:46:18] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Ping timeout: 240 seconds)
[19:46:38] <bjs> neilthereildeil: you ask the Pool to run 5 tasks (you call apply_async 5 times), each task gets 1 thing from the queue (that's what childProcess does), but you try put 100 things into the queue.  You try put more into the queue than you take out
[19:46:58] *** Joins: m0nkey_ (~quassel@user/m0nkey/x-3352227)
[19:47:18] *** Joins: kmh (~kmh@p200300df5f069e001103edbbdf5759c4.dip0.t-ipconnect.de)
[19:47:28] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[19:47:41] *** Joins: Guest73 (~chris@cpe-172-116-14-211.socal.res.rr.com)
[19:47:57] *** Quits: Guest73 (~chris@cpe-172-116-14-211.socal.res.rr.com) (Client Quit)
[19:48:16] <neilthereildeil> bjs: yea the parent is supposed to overload the queu and the children are supposed to drain the queue
[19:48:27] *** Quits: nanoc (~nanocoast@p200300e1273bf000ccc6df24f323b7c2.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:48:32] <graingert> SilverFox: why did you make it a aiohttp.web app if you didn't want it to be called from the web?
[19:48:33] *** Joins: mei (~mei@user/mei)
[19:48:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:49:20] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Remote host closed the connection)
[19:49:28] <SilverFox> graingert: im not sure what you mean, i do waht it to be called from the web? Maybe that line is under the interface code. Im untangling all this still, heres where im at https://bpa.st/ACRQ
[19:49:34] *** Joins: northernsage (~northerns@187.107.158.146)
[19:49:36] <SilverFox> im missing scheduler and tg, where do they come from?
[19:50:11] <graingert> SilverFox: your     app = Starlette(lifespan=lifespan_context) is to late
[19:50:13] <graingert> too*
[19:50:25] <bjs> neilthereildeil: okay but there are 5 children and each drain 1 item so you only ever take 5 items out of the queue
[19:50:26] <bjs> but you 100 in
[19:50:28] <graingert> it should replace     app = web.Application(middlewares=[aiohttp_error_middleware])
[19:50:40] *** Joins: cuz (~user@38.140.58.234)
[19:50:54] <SilverFox> graingert: oh, ok that makes more sense
[19:50:56] <neilthereildeil> bjs: ok, so i need to call apply_asyn 95 more times?
[19:51:02] <bjs> neilthereildeil: and then your program waits for the queue to empty again (incorrectly, it's not using the right Queue and doesn't call task_done in the child) and sets a limit on how many things can be in the queue at once
[19:51:06] <bjs> so it's no wonder why it never terminates
[19:51:10] <graingert> and             tg.cancel_scope.cancel() should be app.task_group.cancel_scope.cancel() worry
[19:51:11] <bjs> neilthereildeil: well... it depends what you want to do?
[19:51:12] <graingert> sorry*
[19:51:32] <bjs> neilthereildeil: maybe you just want to use the Pool's map() method?
[19:52:07] <SilverFox> graingert: no worries ill replace that, what about scheduler? and the reason i had app so low was because it uses lifespan_context and thats fdefined after on ur example
[19:52:08] *** Joins: sharksauce (sharksauce@user/sharksauce)
[19:52:12] <catern> graingert: maybe it should be based on anyio :) certainly I'd port it if you supported shift/reset https://github.com/catern/rsyscall/blob/master/python/dneio/__init__.py :) but, did you have any thoughts/feedback on the article?
[19:52:13] <SilverFox> graingert: this is why i make everything a class XD
[19:52:23] <bjs> neilthereildeil: but you also say 5 processes max 1 task per process so I can't see how this program is ever supposed to do anything useful,  I'm not really following what you _want_ it to do
[19:52:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: leaving)
[19:53:19] <graingert> catern: " any supported async runner"
[19:53:25] <graingert> that's just trio
[19:53:30] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[19:53:36] *** Quits: samuelbernardo (~samuelber@194.210.119.252) (Ping timeout: 258 seconds)
[19:54:05] *** Joins: reset (~reset@user/reset)
[19:54:28] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 265 seconds)
[19:54:36] <catern> graingert: yes, that's true (for now, since I only need/want trio)
[19:54:51] *** Quits: Hackerpcs (~user@user/hackerpcs) (Ping timeout: 256 seconds)
[19:55:14] <neilthereildeil> bjs: i want to have a small pool of workers, a slightly larger queue and the parent fills the queue while the workers keep respawning and draining the pool
[19:55:44] <graingert> catern: that's even more of a lie than anyio
[19:55:53] <graingert> anyio = asynio or trio
[19:55:59] <bjs> neilthereildeil: then maybe you want the workers to have a while loop inside them?
[19:56:02] <neilthereildeil> ok so many i should be vcalling apply_async from the loop that puts
[19:56:06] <catern> graingert: heh, true :)
[19:56:13] <neilthereildeil> no, i want 1 job per worker
[19:56:17] <neilthereildeil> and then the worker quits
[19:56:18] *** Joins: Hackerpcs (~user@user/hackerpcs)
[19:56:18] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[19:56:35] <bjs> neilthereildeil: you want it to do each job in a brand new process?
[19:56:42] <neilthereildeil> yes
[19:56:44] <bjs> take 1 thing out, do it, throw away the process and then make a new process for the next
[19:56:49] <SilverFox> graingert: wow this very nearly seems to be working :3 im just getting a `AttributeError: 'Router' object has no attribute 'add_post'` error rn
[19:56:51] <neilthereildeil> yes
[19:56:55] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:57:05] <bjs> neilthereildeil: it doesn't sound like it's a Pool that you want,  and really this sounds so hideously inefficient even multiprocessing probably won't expose an API for it
[19:57:22] <neilthereildeil> whats a better architecture?
[19:57:30] <bjs> like if i was thinking "what's the most inefficient way to use a computer?" I think I'd be hard pressed to do worse
[19:57:39] <neilthereildeil> lol
[19:57:45] <bjs> neilthereildeil: why are you wanting to delete the process each time?
[19:58:00] <neilthereildeil> because python is super inefficient and wasteful with memory
[19:58:26] <neilthereildeil> if one of these child processes takes a lot of memory, the memoery is not released back to the OS until the process dies
[19:58:26] <bjs> neilthereildeil: so your plan is to show python how to *really* waste memory by creating and deleting processes? :P
[19:58:35] <neilthereildeil> that doesnt waste memoery
[19:58:37] <bjs> "no no no python that just isn't good enough, let *me* show you how to do it"
[19:58:39] <neilthereildeil> that weastes CPOU time
[19:58:40] <graingert> SilverFox: post your updated code?
[19:58:41] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 244 seconds)
[19:58:47] *** Quits: hgg (~hgg@5.79.71.148.rev.vodafone.pt) (Quit: Client closed)
[19:59:04] <neilthereildeil> i ran into an issue where i was reusing processes and the memory consumption of the process was monotonically increasing
[19:59:07] <SilverFox> graingert: right, heres what ive got: https://bpa.st/ARUQ
[19:59:11] <neilthereildeil> even after garbage collection
[19:59:23] <neilthereildeil> so i had to spawn a new process each time to cleanup memory :(
[19:59:28] <neilthereildeil> this is not C haha
[19:59:38] <bjs> neilthereildeil: hmm,  that really shouldn't be a problem for this kind of work where everything that comes in gets cleaned away at the end of each job
[19:59:55] <neilthereildeil> it isnt anymore because maxtasksperchild=1
[19:59:57] <bjs> some programs can do that that have very fragmented allocations that hang about, but for this? I can't see why
[20:00:07] <neilthereildeil> not for this test program
[20:00:17] <neilthereildeil> im modelling changes im going to make to a larger and more complex progrma
[20:00:23] <bjs> neilthereildeil: and even if you did do that, surely the best thing is to have the task run for a while and then occasionally cleanup and restart.  Not throwing everything away every time. That's just madness
[20:00:37] <neilthereildeil> how do u know when to throw away and restart?
[20:00:43] <bjs> neilthereildeil: yeah but after each job Python can gc _all_ the objects used in the job right?
[20:01:01] <neilthereildeil> yes, and gc does, but it DOESNT give the memory back to the OS
[20:01:04] <neilthereildeil> :(  :(  :(
[20:01:11] <bjs> neilthereildeil: after 1000 iterations?  once you use more than a GB of virtual memory? every 7minutes and 4 seconds?
[20:01:20] <bjs> neilthereildeil: it does, if enough gets cleaned up
[20:01:27] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[20:01:29] <bjs> and if the jobs are similar size it'll keep using the same memory
[20:01:51] <neilthereildeil> again, this is just a test program. the larger more complex application im modelling uses much more memoruy
[20:01:53] <neilthereildeil> i cannot predict how much memory a job will use
[20:01:59] <neilthereildeil> they input is supervriable
[20:02:02] <neilthereildeil> super variable
[20:02:10] *** Parts: tunixman (~tunixman@45.32.228.130) ()
[20:02:10] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Quit: Client closed)
[20:02:11] *** Joins: upsala (~zcb@185.213.155.160)
[20:02:23] <graingert> SilverFox: `    app.router.add_post("/api/messages", messages)` is redundant the `@app.route(` does it
[20:02:23] *** Quits: cuz (~user@38.140.58.234) (Read error: Connection reset by peer)
[20:02:39] *** Joins: cuz (~user@38.140.58.234)
[20:02:42] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 268 seconds)
[20:03:00] <catern> graingert: well actually it's not just trio
[20:03:07] <SilverFox> graingert: ok! ill try and see if this works then :3
[20:03:24] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[20:03:30] <neilthereildeil> sry got disconnected
[20:03:31] <neilthereildeil> bjs
[20:04:40] <catern> graingert: it's trio or "no async runner" with reset (reset can be used for real on top of any async runner, since it doesn't rely on the async runner)
[20:04:57] <bjs> neilthereildeil: well,  I suggest just keeping the process alive handling new jobs and periodically checking (e.g. at the end of each task) if "too" much loose memory is hanging around.  But it's generally not a big issue, OSes typically hand out far more memory than they actually have and things work fine
[20:04:59] <SilverFox> graingert: i dont see it working yet, bot emulator cant connect. but on the bright side, it is running all the vboard stuff! :3
[20:05:25] <graingert> SilverFox: do you get any error messages in your console?
[20:05:34] <graingert> do you get any output in your console?
[20:05:34] <neilthereildeil> bjs: that will involve memory "tuning" ill have to figure out how much memory an "average" input takes and tune from there
[20:05:45] <neilthereildeil> and i dunno if my test set will represrent real world
[20:05:46] <SilverFox> graingert: no, but im still not seeing activty on the chatbot side
[20:05:51] <SilverFox> graingert: yes lots of expected output
[20:06:03] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Client Quit)
[20:06:07] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:06:41] <graingert> SilverFox: what happens if you make an http request?
[20:07:11] <SilverFox> graingert: seems to just hang? or maybe not respond? the bot emulator dosent give a lot of feedback when it just dosent connect.
[20:07:17] <graingert> "https://localhost:3978/api/messages"
[20:07:19] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 256 seconds)
[20:07:29] <SilverFox> graingert: if i comment out app.router.add_post... def messages never gets used
[20:07:43] <SilverFox> graingert: yeah that addr
[20:08:05] <graingert> SilverFox: you can call it "async def _"
[20:08:24] <graingert> @app.route("/foo/bar")
[20:08:24] <graingert> async def _(request: Request) -> Response: ...
[20:08:28] <SilverFox> graingert: where would i call it?
[20:08:29] <graingert> the decorator adds it
[20:08:37] <SilverFox> also i get Internal Server Error,
[20:08:52] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[20:08:57] <SilverFox> graingert: ok, that makes sense, but, nothing seems to be happening,
[20:08:58] *** Quits: okamis (~okamis@90-229-141-188-no92.tbcn.telia.com) (Ping timeout: 265 seconds)
[20:09:05] <graingert> SilverFox: https://github.com/encode/starlette/blob/03832bdf1b7e2e7459d9e38a0c11b822118fe168/starlette/applications.py#L174-L181
[20:09:07] <SilverFox> graingert: let me try inspecting the output further
[20:09:47] <SilverFox> graingert: oh cool, ok yeah so 76 really is reduntant
[20:10:37] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[20:10:56] <SilverFox> graingert: ok, now i get PLENTY of outpuit
[20:11:07] <graingert> cool....
[20:11:09] <SilverFox> graingert: let me send u what i see but im not sure all of it will make sense
[20:12:16] <SilverFox> https://bpa.st/WI7A
[20:12:16] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[20:12:22] <SilverFox> graingert: sorry :/
[20:12:29] *** Joins: northernsage (~northerns@187.107.158.146)
[20:13:28] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:14:03] <graingert> SilverFox: try req.headers.get('content-type')
[20:15:00] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[20:16:29] *** Joins: candyman (~candyman@user/candyman)
[20:16:34] <SilverFox> graingert: if i try that i get TypeError: argument of type 'NoneType' is not iterable instead from the same bit of code if i try and access the api via web browser
[20:16:37] *** Quits: candyman (~candyman@user/candyman) (Remote host closed the connection)
[20:17:00] <SilverFox> the framework emulator tho uses json, and responds `POST405directline.postActivity` either way
[20:17:12] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[20:17:14] *** Quits: tims (~tims@123-243-10-176.static.tpgi.com.au) (Ping timeout: 272 seconds)
[20:17:34] <neilthereildeil> bjs: i just tried passing the workQueue as an argument rather than a global variable and got this error "RuntimeError: Queue objects should only be shared between processes through inheritance"
[20:18:48] <bjs> neilthereildeil: what do you mean "just", didn't you do that a while ago and it ran fine then?
[20:18:48] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[20:19:06] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[20:19:06] *** Joins: northernsage (~northerns@187.107.158.146)
[20:19:08] <neilthereildeil> it hasnt been running fine at all
[20:19:11] <neilthereildeil> nothing is working
[20:19:16] <neilthereildeil> im thinking there could be 2 bugs
[20:19:27] <neilthereildeil> but i just got the exception output
[20:19:49] <neilthereildeil> i havent gotten it working with passwing workerQueue as an argument
[20:19:58] <neilthereildeil> i DID get it wokring when using global vars
[20:20:04] <bjs> neilthereildeil: can you show the code you have at the moment?
[20:20:23] *** Joins: candyman (~candyman@user/candyman)
[20:20:23] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[20:20:35] <neilthereildeil> ive been reading online and they say to solve this eorr you need to use a Manager
[20:20:49] *** Joins: srilyk (~wayne@user/waynew)
[20:20:53] <neilthereildeil> but the 3rd post here gives a pretty good counterargument: https://stackoverflow.com/questions/9908781/sharing-a-result-queue-among-several-processes
[20:20:56] <bjs> neilthereildeil: can you share the code you're doing. Obviously passing the Queue as an argument works fine
[20:21:00] <bjs> that's exactly what the docs tell you to do
[20:21:23] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Quit: szymon)
[20:21:33] <neilthereildeil> https://paste.ubuntu.com/p/gg7brHv5sw/
[20:21:49] <neilthereildeil> bjs: why cant i avoid a Manager, like the 3rd poster said?
[20:22:03] <neilthereildeil> multiprocessing.Pool already has a shared result-queue, there is no need to additionally involve a Manager.Queue.
[20:22:06] <neilthereildeil> "multiprocessing.Pool already has a shared result-queue, there is no need to additionally involve a Manager.Queue."
[20:22:12] <graingert> SilverFox: oh `req.headers.get("content-type", ())`
[20:23:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:23:22] <SilverFox> graingert: no go still, what changed? getting `TypeError: 'Response' object is not callable` and emulator still wont connect up
[20:23:37] <graingert> SilverFox: show your new code and full traceback
[20:23:44] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6) (Quit: Leaving)
[20:23:48] <SilverFox> graingert: surething, one sec
[20:24:03] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:e025:1d9a:29fa:b001)
[20:24:49] <SilverFox> https://bpa.st/BYTA
[20:25:31] <neilthereildeil> bjs: do i absoluletly need a Manager? it doesnt look like it...
[20:25:32] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[20:25:52] *** Joins: northernsage (~northerns@187.107.158.146)
[20:25:54] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 240 seconds)
[20:26:01] <bjs> neilthereildeil: so, you don't need a Manager to pass the Queue to the process directly
[20:26:11] <graingert> SilverFox: try `return JSONResponse({}, status_code=415)`
[20:26:14] <bjs> but here you're using a Pool, so the Pool has its own Queue
[20:26:19] <bjs> and you cannot put a Queue in another Queue
[20:26:23] <neilthereildeil> ohh wow
[20:26:42] <bjs> neilthereildeil: so here you can use a manager.Queue and pass that as an argument,  but it is slower
[20:26:42] <neilthereildeil> so how can i let the parent enqueue stuff and the shildren dequeue stuff?
[20:26:44] <SilverFox> graingert: line 66?
[20:27:02] <graingert> neilthereildeil: you call apply_async to enque
[20:27:08] <neilthereildeil> how can i use the Pool's queue?
[20:27:12] <bjs> neilthereildeil: this is all very odd, why not just have the childProcess have the input as an argument
[20:27:15] <bjs> and return the value
[20:27:20] <bjs> rather than making your own queue?
[20:27:25] <SilverFox> graingert: that fixed it crashing when you try and connect using a web browser
[20:27:36] <SilverFox> graingert: but it still wont respond via json using the emulatore
[20:27:48] <neilthereildeil> because theres 1 parent and many many children. the parent doesnt know whether a child is running or is ready for a work item
[20:27:57] <bjs> neilthereildeil: you're using a Pool object and ignoring all of its methods to build a kind of "pool of processes doing jobs" ontop of it, but this is very silly because that's what a Pool is
[20:28:00] <neilthereildeil> bjs: is there a better architecture you would recommend?
[20:28:10] <graingert> SilverFox: try requests.post(
[20:28:16] <bjs> neilthereildeil: the thing you're trying to build already exists, it's called a multiprocessing.Pool
[20:28:47] <bjs> neilthereildeil: it has a bunch of processes in it with a queue and each task waits for a value on the queue does the job and passes the value back via the queue and at the end it can accept a new one or delete itself etc
[20:28:54] <SilverFox> graingert: what line?
[20:29:03] <graingert> SilverFox: in a repl
[20:29:16] <neilthereildeil> bjs ohh ok
[20:29:20] <SilverFox> graingert: sorry?
[20:29:20] <graingert> SilverFox: requests.post("http://localhost:.../", json={}, headers={"Authorization": ...})
[20:29:29] <SilverFox> oh ok
[20:29:33] <graingert> SilverFox: just run `python` somewhere in another terminal
[20:29:39] <bjs> neilthereildeil: instead of put() just apply_async and instead of get() just .get() from the AsyncResult
[20:29:45] <SilverFox> yeagh
[20:29:48] <neilthereildeil> bjs: so how can i tell from the parent whether or not theres a child process ready?
[20:30:00] *** Joins: s8n (~s8n@user/s8n)
[20:30:01] *** Quits: Trashlord (~trash@user/trashlord) (Quit: "True ignorance is not the absence of knowledge, but the refusal to acquire it.")
[20:30:02] <bjs> neilthereildeil: I don't know what you mean by that?
[20:30:17] *** Trashlord__ is now known as Trashlord
[20:30:18] <neilthereildeil> i dont want to enqueue unless i KNOW theres a child that can take the job
[20:31:31] <neilthereildeil> my concern is enqueueing too many items. see my comment:  # yes, extra calls to apply_async block when all pool workers are busy, but this leads to a memory explosion if producer rate is faster than consumer rate
[20:31:36] <SilverFox> graingert: authorization?
[20:31:58] <graingert> SilverFox: "Authorization"
[20:32:12] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[20:32:14] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[20:32:21] <SilverFox> graingert: should something go there?
[20:32:29] <graingert> SilverFox: whatever value you want to show up here: auth_header = req.headers["Authorization"] if "Authorization" in req.headers else ""
[20:32:46] <neilthereildeil> bjs: the nice thing about put() is that it can block if theres no children that can take the job
[20:32:49] <SilverFox> graingert: im not sure what value that would be
[20:33:02] *** Joins: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net)
[20:33:02] *** Joins: b3z (~b3z@user/b3z)
[20:33:06] <SilverFox> graingert: if i just put a "" then i get a 405
[20:33:26] <SilverFox> graingert: just like with the emulator
[20:33:33] <graingert> ohh!
[20:33:35] <b3z> Can someone please tell me why my first assert is failing? More precise why the first regex is not matched? http://ix.io/3rEZ/py
[20:33:38] *** Joins: pnoud (~pnoud@user/pnoud)
[20:33:46] <bjs> neilthereildeil: I mean, why does the child have to tell you
[20:33:54] <bjs> neilthereildeil: once you .get() the result it's ready for the next surely?
[20:34:11] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[20:34:17] *** Joins: Barones (~Barones@2804:48dc:8500:0:55f4:87a1:2368:929d)
[20:34:28] <graingert> SilverFox: you need to pass the methods you want to @app.route(methods=["POST"])
[20:34:30] <neilthereildeil> bjs: because eqch enqueue takes memory. if the enqueue rate is faster than the dequeue rate, ill run out of memory
[20:35:00] <neilthereildeil> is there a way to be notified when ANY child process is ready for a ork item?
[20:35:00] <SilverFox> graingert: methods, what methods?
[20:35:09] <graingert> SilverFox: like GET HEAD POST
[20:35:11] <neilthereildeil> thats really why im using the blocking put() call
[20:35:23] <graingert> neilthereildeil: you want backpressure!
[20:35:33] *** Quits: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs) (Ping timeout: 265 seconds)
[20:35:35] *** Quits: kmh (~kmh@p200300df5f069e001103edbbdf5759c4.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:35:38] <neilthereildeil> graingert: yes, but limited backpressure. not infinite
[20:35:39] <bjs> b3z: there are no matches of that first regex /([a-z])[a-z]\1/gm in your string
[20:35:45] <graingert> neilthereildeil: how about a Semaphore and anyio.to_process.run_sync
[20:35:46] <pragmaticenigma> b3z: I don't believe those are valid regex pattern strings for python
[20:35:47] <neilthereildeil> infinite will run out of memory
[20:35:53] <SilverFox> graingert: oh, uh i dont know, i dident have to do that before :/
[20:35:56] <bjs> b3z: because there aren't even any slashes in the string.  Probably the /../gm isn't doing what you think it does?
[20:36:09] <graingert> SilverFox: so you see your @app.route("/api/messages") line?
[20:36:12] <neilthereildeil> graingert: im doing this whole exercise because theres a semaphore leak ive spent weeks trying to sol ve
[20:36:20] <neilthereildeil> now im reachitecting to avoid semaphores
[20:36:24] <SilverFox> graingert: yeah, i added methods to it, should i respond to all?
[20:36:32] <graingert> neilthereildeil: ah the anyio.Semaphore is safer
[20:36:43] <ApostleInTriumph> Hi. I've a dict and a float. How do i get the key in the dict whose value is closest (absolute) to the float?
[20:36:45] <grym> graingert: do you happen to know if pipdeptree can be used programmatically?
[20:36:47] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 256 seconds)
[20:36:49] <SilverFox> graingert: oh yay! it worked! it did throw an error tho hold on
[20:36:53] <neilthereildeil> im not sure if a shild process is getting killed without releaseing the semaphore ort what
[20:36:57] <SilverFox> graingert: but it replied back
[20:36:57] <neilthereildeil> im done debugging semaphores
[20:37:01] <graingert> grym: I don't - I tend to subprocess it
[20:37:04] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[20:37:09] <grym> graingert: ok.  that'll do, frankly
[20:37:12] <graingert> grym: like I only use it for one shots
[20:37:21] *** Joins: ray (~ray@user/re)
[20:37:24] <grym> graingert: yeah; upgrading an info/debug/heartbeat endpoint
[20:37:27] <graingert> grym: like I find the minimal set of deps then hand make a requirements.in
[20:37:31] <grym> "tell me what you are! no, really, all of it!"
[20:37:32] <SilverFox> graingert: ok, take a break, thank you. ill be back in a bit, ur the best graingert
[20:37:47] <neilthereildeil> so how can i build limited backpressure and get notified when something is dequeued so i can enqueue the next item?
[20:37:48] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[20:38:05] *** Joins: srilyk (~wayne@user/waynew)
[20:38:07] <neilthereildeil> or is my code alrady the best way to do this?
[20:38:19] <grym> graingert: i found someone doing stuff with pkg_resources too, but the json form would be nicer
[20:38:28] *** Quits: jpodivin (~jpodivin@118.108.broadband14.iol.cz) (Ping timeout: 268 seconds)
[20:39:05] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[20:39:05] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[20:39:21] *** Quits: ray (~ray@user/re) (Client Quit)
[20:39:23] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 2.3)
[20:39:26] <pragmaticenigma> b3z: check your regex with https://regex101.com/ ... make sure you change the option to Python (2.7 is fine) and it will tell you how your regex is being interpreted
[20:39:31] *** Joins: northernsage (~northerns@187.107.158.146)
[20:40:00] <graingert> neilthereildeil: anyio does have that information but doesn't expose it - it seems
[20:40:19] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[20:40:35] *** Joins: ray (~ray@user/re)
[20:40:38] <hexology> https://mypy-play.net/?mypy=latest&python=3.10&gist=8029a93770f0bc95d6c936f538e17699 is this a bad idea? it seems like kind of a hack. i understand why mypy wouldn't want to assume that `None` is a valid `_T`, but is this the right way to tell mypy that `None` is a valid `_T`?
[20:40:40] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 272 seconds)
[20:40:43] <graingert> neilthereildeil: but usually you just need to know how many tasks are executing concurrently
[20:40:44] <amogorkon> grym, can you elaborate on that? what would you like to see?
[20:40:53] <b3z> pragmaticenigma: like this? https://regex101.com/r/GNbg24/1
[20:41:00] <graingert> which will give you an accurate approximation of how many messages are in the queue
[20:41:15] <graingert> definitely accurate enough to apply backpressure
[20:41:21] <pragmaticenigma> b3z: you have it set to the wrong language
[20:41:31] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[20:41:36] <pragmaticenigma> b3z: Make sure the "Flavor" is set to Python
[20:41:42] <b3z> pragmaticenigma: ah I see. But is the same result though?
[20:41:56] <pragmaticenigma> b3z: No
[20:41:56] <b3z> At least it matches the same
[20:41:59] <grym> amogorkon: name and version of every package in the venv, and then info about the runtime environment i can get in other ways
[20:42:09] <neilthereildeil> graingert: i have 184 tasks in my program
[20:42:19] <pragmaticenigma> b3z: notice the grayed out prefix to the text entry field for the regex
[20:42:20] <b3z> pragmaticenigma: oh do I have to select list ?
[20:42:37] *** Quits: wyclif (~wyclif@user/wyclif) (Quit: leaving)
[20:42:38] *** Quits: ray (~ray@user/re) (Client Quit)
[20:42:49] <neilthereildeil> so maybe queue 184 tasks, and then call apply_asyn to have a 1-in-1-out policy?
[20:43:12] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[20:43:13] <b3z> pragmaticenigma: oh you mean you have to write it as r"..."gm ?!
[20:43:30] *** Joins: ray (~ray@user/re)
[20:43:32] <SilverFox> graingert: everything seems to work, except i get this: https://bpa.st/GFQQ
[20:43:35] <pragmaticenigma> not exactly... I don't know why they have that "gm" tacked onto the end
[20:44:02] <graingert> SilverFox: try JSONResponse(...)
[20:44:03] <b3z> pragmaticenigma: how would you write it correctly?
[20:44:10] *** Joins: samuelbernardo (~samuelber@nata02.lip.pt)
[20:44:18] <amogorkon> grym, i see.. i'm asking because i've got plans to build an "internal dependency graph" into justuse, but don't know yet what should be included
[20:44:33] <SilverFox> graingert: what line?
[20:44:42] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[20:44:43] <graingert> SilverFox: you have a `return Response(...` ?
[20:44:53] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[20:45:11] <SilverFox> SilverFox: yes~ i was just confused if u meant rewerite jsonresonse or turn response into a jsonresponse
[20:45:13] <graingert> SilverFox: when you make a bpaste include your code and traceback
[20:45:16] <pragmaticenigma> b3z: I run into a problem as I don't understand the purpose of \1 ... I'm not familiar with that pattern
[20:45:25] <graingert> https://bpa.st/+python+pytb
[20:46:15] <SilverFox> graingert: that seems to be working~ and sure thing
[20:46:33] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:46:36] <graingert> SilverFox: you'll want `JSONResponse(` rather than `json_response(`
[20:46:45] <graingert> I think
[20:47:02] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[20:47:16] <pragmaticenigma> b3z: Also, I don't know what you are problem you are trying to solve for
[20:47:27] <b3z> pragmaticenigma: it works like a variable/register. e.g. in the first regex you'd match "xyx" with x beeing identical and y beeing a randomo
[20:47:33] <SilverFox> graingert: yeah that seems to have fixed it!
[20:47:36] <b3z> pragmaticenigma: https://adventofcode.com/2015/day/5#part2
[20:47:44] <graingert> SilverFox: awesome
[20:47:45] *** Joins: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it)
[20:47:53] <SilverFox> graingert: thanks so much for all ur help~
[20:47:59] <SilverFox> graingert: im sure ill be back at some point
[20:48:08] <graingert> SilverFox: you might be the first person to use this in production :D
[20:48:36] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Ping timeout: 265 seconds)
[20:48:46] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:49:34] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[20:49:47] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[20:50:07] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:50:10] *** Quits: candyman (~candyman@user/candyman) (Quit: candyman)
[20:50:18] <b3z> pragmaticenigma: ah it doen't show part 2. wait a sec
[20:50:46] <b3z> pragmaticenigma: this -> http://ix.io/3rFq
[20:51:18] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:51:31] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[20:51:34] *** Quits: ApostleInTriumph (~ApostleIn@nat-clients.lix.polytechnique.fr) (Ping timeout: 246 seconds)
[20:51:46] *** Quits: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it) (Remote host closed the connection)
[20:52:18] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:52:43] <b3z> pragmaticenigma: Got it running now.
[20:53:29] *** Joins: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr)
[20:53:30] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 240 seconds)
[20:53:52] *** Joins: gmcastil (~gmcastil@50-206-38-118-static.hfc.comcastbusiness.net)
[20:54:27] *** Joins: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it)
[20:55:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:56:06] *** Quits: northernsage (~northerns@187.107.158.146) (Read error: Connection reset by peer)
[20:56:27] *** Joins: northernsage (~northerns@187.107.158.146)
[20:56:30] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[20:57:50] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:59:06] *** Quits: Lando-SpacePimp (~LandoC@user/lando-spacepimp) (Ping timeout: 240 seconds)
[21:00:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[21:00:27] *** Joins: Betal (~Beta@user/betal)
[21:01:01] *** Joins: node1 (~node1@user/node1)
[21:01:16] *** Quits: GadgetNerd (~GadgetNer@user/gadgetnerd) (Read error: Connection reset by peer)
[21:01:17] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 268 seconds)
[21:01:39] *** Joins: bsdband29 (~bsdbandit@172.58.187.118)
[21:02:12] *** Joins: chaosite (~chaosite@user/chaosite)
[21:02:59] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[21:06:19] *** Joins: GadgetNerd (~GadgetNer@user/gadgetnerd)
[21:07:22] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[21:07:27] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 268 seconds)
[21:07:36] *** Quits: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net) (Quit: Leaving)
[21:08:00] *** Joins: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net)
[21:08:41] *** Quits: s8n (~s8n@user/s8n) (Ping timeout: 268 seconds)
[21:08:43] *** Quits: redgloboli (~redglobol@user/redgloboli) (Quit: ended)
[21:08:50] *** Quits: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net) (Remote host closed the connection)
[21:09:23] *** Joins: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net)
[21:09:28] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:10:52] *** Joins: Lando-SpacePimp (~LandoC@user/lando-spacepimp)
[21:10:56] *** Joins: redgloboli (~redglobol@user/redgloboli)
[21:11:43] *** Quits: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net) (Client Quit)
[21:11:46] <NeilRG> how do I get a dtype for an arbitrary element that may be an integer, a float, a complex, or an ndarray?
[21:12:00] *** Joins: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net)
[21:12:21] <NeilRG> i.e., I need a function f(1) -> np.int64, f(1.0) -> np.float64, f(np.zeros(10)) -> np.float64
[21:12:53] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:13:09] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[21:14:19] *** dbristow is now known as dbristow_
[21:14:52] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[21:14:57] *** dbristow_ is now known as dbristow
[21:15:18] *** dbristow is now known as dbristow__
[21:15:19] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[21:15:30] *** dbristow__ is now known as dbristow
[21:16:24] *** Joins: waynew (~wayne@user/waynew)
[21:17:37] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Quit: Client closed)
[21:17:56] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[21:18:25] *** Joins: srilyk (~wayne@user/waynew)
[21:18:39] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[21:19:00] *** Joins: waynew (~wayne@user/waynew)
[21:19:03] *** Quits: bsdband29 (~bsdbandit@172.58.187.118) (Read error: Connection reset by peer)
[21:19:09] *** Quits: dbristow (~dbristow@ool-18bc40ae.dyn.optonline.net) (Changing host)
[21:19:09] *** Joins: dbristow (~dbristow@user/dbristow)
[21:19:24] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[21:19:46] *** Joins: dbristow (~dbristow@user/dbristow)
[21:19:48] *** Joins: jess (~jess@libera/staff/jess)
[21:20:26] *** Joins: rubberd0g (~kha0s@p5dc58f39.dip0.t-ipconnect.de)
[21:20:39] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:21:19] *** Quits: masber (~masber@dhcp-133-203.cscs.ch) (Ping timeout: 246 seconds)
[21:21:47] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[21:21:53] <KirkMcDonald> NeilRG: As in, the array might contain a mix of elements of different types?
[21:22:12] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[21:22:16] <NeilRG> KirkMcDonald, no, just the cases I have above for example
[21:22:54] *** Joins: srilyk (~wayne@user/waynew)
[21:23:11] *** Quits: samhain (~samhain@user/samhain) (Quit: ZNC - https://znc.in)
[21:23:22] <KirkMcDonald> NeilRG: I think you'd just need to check the type of the value against whichever types you're looking for.
[21:23:41] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 258 seconds)
[21:23:44] <NeilRG> KirkMcDonald, k, was hoping there was a numpy function I'd missed
[21:24:04] <NeilRG> I went with this:   if hasattr(value, 'dtype'):    return value.dtype  return np.array(value).dtype
[21:24:34] <NeilRG> Seems convoluted to build an array only to throw it out
[21:26:18] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 240 seconds)
[21:26:53] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[21:27:14] *** Joins: chaosite (~chaosite@user/chaosite)
[21:28:18] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 240 seconds)
[21:28:18] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[21:28:22] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:28:31] *** Joins: node1 (~node1@user/node1)
[21:28:53] *** Joins: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth)
[21:29:09] *** Quits: SilverFox (~joe@64.223.223.162) (Quit: WeeChat 2.8)
[21:29:15] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:e025:1d9a:29fa:b001) (Quit: Leaving)
[21:29:29] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 256 seconds)
[21:29:32] *** Joins: s8n (~s8n@user/s8n)
[21:29:44] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:30:24] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[21:32:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:32:19] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[21:35:02] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[21:36:03] *** Joins: kmh (~kmh@p200300df5f069e001103edbbdf5759c4.dip0.t-ipconnect.de)
[21:36:09] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[21:36:16] *** Quits: Falcon| (andreas@user/falcon/x-0540249) (Quit: Falcon|)
[21:37:26] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[21:39:03] *** Joins: odoood (~odoood@2601:c8:c003:a550::2)
[21:41:06] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[21:41:42] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 258 seconds)
[21:41:58] *** Joins: cheater (~Username@user/cheater)
[21:42:25] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[21:42:48] *** Joins: dbristow (~dbristow@user/dbristow)
[21:43:04] *** Joins: chaosite (~chaosite@user/chaosite)
[21:44:17] *** Quits: dbristow (~dbristow@user/dbristow) (Client Quit)
[21:44:34] *** Joins: dbristow (~dbristow@user/dbristow)
[21:45:40] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[21:45:58] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:46:01] *** Joins: dbristow (~dbristow@user/dbristow)
[21:46:22] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[21:46:40] *** Joins: dbristow (~dbristow@user/dbristow)
[21:46:47] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[21:47:03] *** Joins: dbristow (~dbristow@user/dbristow)
[21:47:30] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:48:03] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 265 seconds)
[21:48:50] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[21:49:09] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[21:49:34] *** Joins: gitesh (uid423739@charlton.irccloud.com)
[21:49:36] *** Joins: ringo_ (~ringo@157.230.117.128)
[21:50:08] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[21:51:09] *** Joins: Falcon| (andreas@user/falcon/x-0540249)
[21:51:33] *** Joins: jphaynes66 (~TerraFirm@91.90.126.9)
[21:52:35] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[21:54:33] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:55:48] <xheimlich> what's really best about Python's optional (not Option/Maybe) typing syntax is that it's a mighty clean notation. For domain models, API endpoints, etc.
[21:56:06] *** Joins: justinf210 (~justinf21@70.sub-174-247-112.myvzw.com)
[21:56:06] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[21:56:25] *** Joins: samhain (~samhain@user/samhain)
[21:56:30] *** Joins: srilyk (~wayne@user/waynew)
[21:56:54] <xheimlich> I love using Hy, the Lisp-ish skin over Python and find it more ergonomic for most uses. But the beauty of how a few domain models compose into API specifications using Pydantic is... well, it looks pretty on the page.
[21:57:01] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[21:57:06] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[21:57:08] <ChrisWarrick> what really sucks about it is that you can end up with an exception really easily, because the language doesn’t force you to check for missing values
[21:58:36] <pragmaticenigma> Why should have to be forced? Why should a language tell you how to do the thing you're trying to do?
[21:58:46] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[21:59:09] *** Joins: chaosite (~chaosite@user/chaosite)
[21:59:31] <ChrisWarrick> pragmaticenigma: because humans can’t be trusted to do everything right
[21:59:53] <ammar2> isn't it your type checker's job to make sure you're handling the missing case?
[21:59:56] <pragmaticenigma> computers do what humans tell them to do
[22:00:13] <ChrisWarrick> ammar2: depends on the type checker
[22:00:14] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[22:00:42] <Henry151> while trying to install a bunch of requirements with "pip3 install -r requirements.txt" it is failing while trying to install gevent, saying "config.status: error: Something went wrong bootstrapping makefile fragments for automatic dependency tracking. Try re-running configure with the '--disable-dependency-tracking' option to at least be able to build the package"
[22:00:54] *** Joins: smorgasbord (~buggy@user/smorgasbord)
[22:01:06] *** Quits: justinf210 (~justinf21@70.sub-174-247-112.myvzw.com) (Ping timeout: 272 seconds)
[22:01:11] <ammar2> ChrisWarrick: mypy does
[22:01:16] <ChrisWarrick> ammar2: if you are using type annotations (and most python code isn’t), then a type checker might be fine
[22:01:19] <Henry151> it also says "See config.log for more details" but i don't see a config.log being generated
[22:01:22] *** Joins: Gerula_ (~Gerula@user/gerula)
[22:01:22] *** Quits: Gerula (~Gerula@user/gerula) (Killed (sodium.libera.chat (Nickname regained by services)))
[22:01:22] *** Gerula_ is now known as Gerula
[22:01:25] <smorgasbord> is there any quick python way to remove all words containing characters NOT in a certain range?
[22:01:38] <smorgasbord> by certain range I mean unicode range
[22:01:55] *** Joins: brickfat (~brickfat@user/brickfat)
[22:02:22] *** Quits: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar) (Ping timeout: 272 seconds)
[22:02:25] <Henry151> i did some googlin but not much coming up that makes much sense to me. Any tips?
[22:02:30] <KirkMcDonald> smorgasbord: It depends on how you define "words," but a regular expression may be involved.
[22:02:41] <ammar2> smorgasbord: so you want the word removed if any character inside of out is a certain range of unicode points?
[22:02:52] <smorgasbord> yup
[22:02:55] *** Quits: odoood (~odoood@2601:c8:c003:a550::2) (Ping timeout: 256 seconds)
[22:03:09] <smorgasbord> if I can just remove characters instead of the whole word that'd do the job too
[22:03:16] *** Quits: rendar (~rendar@user/rendar) ()
[22:03:23] <smorgasbord> just in case it's an X Y problem
[22:03:30] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:03:34] <pragmaticenigma> smorgasbord: can you give an example?
[22:03:38] <smorgasbord>  I'm trying to clean a Nepali language corpus of all foreign words and punctuation
[22:03:47] <pragmaticenigma> smorgasbord: or rather a data sample
[22:03:49] <KirkMcDonald> If you just want to remove characters outside a given range, that's easy.
[22:03:55] <smorgasbord> "तस्बिर स्रोत, Gerald Rhemann "
[22:04:07] *** Parts: smorgasbord (~buggy@user/smorgasbord) ()
[22:04:09] <pragmaticenigma> I see tofu :-(
[22:04:16] *** Joins: Guest6157 (~bsdboy@redhat/psirt/Deesl)
[22:04:21] *** Joins: smorgasbord (~buggy@user/smorgasbord)
[22:04:35] <smorgasbord> I'll be considering the non-ascii part for later processing
[22:04:41] *** Joins: waynew (~wayne@user/waynew)
[22:04:44] *** Guest6157 is now known as Deesl
[22:04:46] <smorgasbord> so I want to remove just the english word and the punctuation
[22:04:54] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[22:05:43] <KirkMcDonald> smorgasbord: e.g. re.sub(r"[^ \u1000-\u1fff]", "", s)
[22:05:46] <KirkMcDonald> Or whatever the range is.
[22:06:03] <smorgasbord> ok so you CAN do unicode ranges in python RE
[22:06:05] <smorgasbord> thanks!
[22:06:07] *** Quits: ray (~ray@user/re) (Quit: WeeChat 3.1)
[22:06:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[22:06:38] *** Joins: justinf210 (~justinf21@253.sub-97-44-1.myvzw.com)
[22:06:54] <Henry151> https://github.com/gevent/gevent/issues/1567 this one seemed to give me the right guidance, installing make with "apt install make" and trying again, seems to have resolved the issue. Hopefully.
[22:06:58] *** Joins: rajkosto (~rajkosto@cable-178-149-127-189.dynamic.sbb.rs)
[22:07:29] *** Joins: rolo_ (~error@2a02:8108:8dc0:1cec:d8e1:d6ed:ad1e:e665)
[22:08:04] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 272 seconds)
[22:08:18] *** Quits: MikZyth (~MikZyth@188.65.242.79) (Ping timeout: 240 seconds)
[22:08:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[22:08:48] *** Joins: srilyk (~wayne@user/waynew)
[22:08:58] *** Joins: vsantana (~Thunderbi@fttx-177136148192.usr.predialnet.com.br)
[22:09:30] *** Quits: rolo (~error@2a02:8108:8dc0:1cec:b921:8d39:df06:8980) (Ping timeout: 240 seconds)
[22:09:59] *** Joins: mkellis (~Calibellu@2607:9000:0:61::a02e)
[22:10:27] <Henry151> separate question -- everytime i make a new venv and go to install a projects requirements in it, with python3 -m venv venv, then source venv/bin/activate, then pip3 install -r requirements.txt, it "fails building wheel" for everything. So every time, I start over, and instead run "pip3 install wheel" first, then "pip3 install -r requirements.txt" and it no longer says "failed building wheel." What's up
[22:10:33] <Henry151> with that? Is that normal?
[22:11:17] <ChrisWarrick> Henry151: this is normal, you should always `pip install -U pip setuptools wheel` in a new venv
[22:11:59] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 256 seconds)
[22:14:16] *** Quits: rsx (~dummy@ppp-188-174-143-159.dynamic.mnet-online.de) (Quit: rsx)
[22:15:56] <Henry151> thanks
[22:17:00] <grym> Henry151: yeah, i pretty regularly `python -m venv somevenv; somevenv/bin/pip install --upgrade pip wheel` in more or less the same breath
[22:17:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:17:38] <Henry151> roger that
[22:17:39] <graingert> Henry151: you can make the venv with the --upgrade-deps flag
[22:17:42] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[22:17:54] <graingert> python3.9 -m venv venv --upgrade-deps
[22:17:59] <grym> TIL
[22:18:02] <grym> how new is that?
[22:18:06] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:18:13] <grym> too new :(
[22:18:13] <Henry151>   *** A new enough version of pkg-config was not found.
[22:18:21] <Henry151> any hot tips on that line?
[22:18:36] <Henry151> :) since y'all are being so fast to be so helpful
[22:19:00] *** Joins: chaosite (~chaosite@user/chaosite)
[22:19:11] *** Joins: lmmx (~louis@host-92-0-187-249.as13285.net)
[22:19:26] <Henry151> sorry that was a bit of a leap to a different situation
[22:19:43] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:19:58] *** Joins: YoungPotato (~user@c-67-186-254-165.hsd1.ut.comcast.net)
[22:20:10] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[22:20:19] *** schumaml1 is now known as schumaml
[22:20:42] <Henry151> also, what about if i run a pip3 install -r requirements.txt, and while it's running, i see in the output some problem. Do I need to wait for it to finish running first, then address the problem, or can i interrupt it with a keyboard interrupt, fix the problem, and try again?
[22:21:04] <Henry151> i guess my question is "is it ok to interrupt a pip3 install command or will that leave a mess"
[22:21:34] <grym> when in doubt, nuke the venv
[22:21:37] <grym> that's what they're for
[22:22:38] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[22:22:43] *** Quits: justinf210 (~justinf21@253.sub-97-44-1.myvzw.com) (Ping timeout: 258 seconds)
[22:23:03] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[22:24:05] *** Quits: NineBAR (~NineBAR@c-68-56-180-29.hsd1.mi.comcast.net) (Remote host closed the connection)
[22:24:09] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[22:24:31] <anddam> are f-string format specifier documented in stdlib or just in PEP?
[22:24:32] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[22:24:49] <anddam> x/fier/ c/fiers/
[22:25:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[22:25:19] *** Joins: waynew (~wayne@user/waynew)
[22:25:21] <ChrisWarrick> in stdlib?
[22:25:30] *** Joins: Deneb (~johnch@58.111.189.80.dyn.plus.net)
[22:25:45] <grym> in the docs?
[22:25:52] <ChrisWarrick> anddam: if you’re asking about python docs, https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals
[22:26:04] <anddam> ChrisWarrick: I was, my bad
[22:26:10] *** Joins: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd)
[22:26:15] <anddam> I meant https://docs.python.org/3/library/index.html
[22:26:29] *** Quits: Deneb (~johnch@58.111.189.80.dyn.plus.net) (Client Quit)
[22:26:29] <anddam> grym: ^
[22:27:32] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:28:02] <KirkMcDonald> https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
[22:28:10] *** Quits: srilyk (~wayne@user/waynew) (Ping timeout: 265 seconds)
[22:28:24] <KirkMcDonald> They are syntax, so they're documented in the language reference, not the library reference.
[22:28:55] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[22:29:15] <anddam> KirkMcDonald: right, I noticed following the link in tutorial
[22:29:17] <anddam> thx
[22:29:31] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[22:29:55] <KirkMcDonald> Though the format specifier language is still documented under the 'string' module, I assume so that no one can ever find it there.
[22:30:08] *** Quits: anddt (~anddt@net-93-144-12-118.cust.vodafonedsl.it) (Quit: Leaving)
[22:30:18] *** Quits: pneff (~pneff@2a02:168:fedc:0:f811:5966:5604:65cd) (Ping timeout: 240 seconds)
[22:30:22] <anddam> oh the = syntax is nice
[22:30:22] *** Joins: greedom (~greedom@2001:16b8:2e1b:4600:bdf4:3c8b:c243:bd10)
[22:31:11] *** Quits: cheater (~Username@user/cheater) (Quit: (BitchX) I see your BitchX is as big as mine!)
[22:33:12] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:34:26] *** Joins: cheater (~Username@user/cheater)
[22:34:29] *** Joins: pnoud (~pnoud@user/pnoud)
[22:34:52] *** Joins: chaosite (~chaosite@user/chaosite)
[22:35:42] *** Joins: srilyk (~wayne@user/waynew)
[22:35:54] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[22:36:33] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[22:37:07] *** Joins: dbristow (~dbristow@user/dbristow)
[22:37:53] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:39:11] *** Quits: waynew (~wayne@user/waynew) (Ping timeout: 256 seconds)
[22:39:30] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 240 seconds)
[22:39:43] <catern> would anyone take a look at an article I'm writing about a new distributed systems library? I'm just looking for some first reactions to know that it makes sense. It's still a draft, so please don't share it, but: http://catern.com/integration.html
[22:39:52] *** Joins: Pickchea (~private@user/pickchea)
[22:39:57] *** Quits: pnoud (~pnoud@user/pnoud) (Ping timeout: 268 seconds)
[22:39:58] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[22:41:18] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 252 seconds)
[22:41:33] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Remote host closed the connection)
[22:41:50] *** Joins: cheater (~Username@user/cheater)
[22:42:25] <hodapp> uggggh... xarray.Dataset.assign docs say explicitly that it adds new *data* variables, and it keeps insisting on adding a coordinate variable instead
[22:42:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[22:43:17] *** Joins: cdown_ (~cdown@89.32.122.5)
[22:43:20] *** Quits: P4ddyF (~PaddyF@user/yogoyo) (Quit: WeeChat 3.0.1)
[22:43:41] <Henry151> ttps://termbin.com/3dz1 now this is strange.. my requirements.txt specifies requests>=2.23.0 when i try to install with pip3 install -r requirements.txt i get a warning about requests[security] 2.20.0 depends on requests 2.20.0 -- but i don't see anywhere in my requirements.txt that asks for requests[security]
[22:44:47] *** Joins: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net)
[22:45:02] *** Quits: deviantfero (~deviantfe@190.150.27.58) (Quit: WeeChat 3.2)
[22:45:28] <Henry151> other packages i do need require requests>=2.9.1
[22:45:40] *** Quits: Deesl (~bsdboy@redhat/psirt/Deesl) (Quit: My Mac Pro has gone to sleep. ZZZzzz…)
[22:45:42] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 252 seconds)
[22:45:57] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[22:48:25] <Henry151> The user requested urllib3==1.25.9, selenium 3.141.0 depends on urllib3, requests[security] 2.20.0 depends on urllib3<1.25 and >=1.21.1
[22:49:17] <ChrisWarrick> Henry151: pastebin the full pip output
[22:49:33] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[22:49:47] <Barones> Guys, I'm inspecting socket class, how can distinguish a method from an attribute within a class?
[22:50:00] *** Joins: azazello (~azazello@109.75.158.195)
[22:50:42] *** Joins: chaosite (~chaosite@user/chaosite)
[22:51:07] *** Joins: justinf210 (~justinf21@192-230-160-245.3rivers.net)
[22:51:46] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[22:51:46] <graingert> Barones: methods are a type of class attribute
[22:52:00] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[22:52:12] <graingert> Barones: what purpose do you want to distinguish them for?
[22:52:22] *** Joins: dbristow (~dbristow@user/dbristow)
[22:52:29] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:53:01] *** Joins: lukka5 (~lukka5@246-60-231-201.fibertel.com.ar)
[22:54:47] <Barones> If I can call an method or just print its attribute graingert , I mean, some are very intuitively an method, others are not
[22:54:49] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:54:56] *** Quits: azazello (~azazello@109.75.158.195) (Ping timeout: 272 seconds)
[22:55:03] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[22:55:34] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[22:55:44] <graingert> Barones: ok but what purpose
[22:56:48] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:57:01] *** Joins: lash (~nolash@static.5.28.251.148.clients.your-server.de)
[22:57:35] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[22:57:37] <Barones> study and analysis, if I can print the attribute just like <instance>.family or <instance>.getpeername()
[22:58:01] <lash> is it possible to choose which packages will be installed depending on extras? (extras as in pip install foo[something_extra])
[22:58:03] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[22:58:06] <Barones> I mean when I get a list of methos and attributes within a class through dir, there is no way to distinguish between them
[22:58:40] *** Joins: srilyk (~wayne@user/waynew)
[22:59:00] <lash> by that do not mean the packages dependencies, but the packages set in [options]/packages
[22:59:38] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[22:59:44] <Henry151> ChrisWarrick: https://termbin.com/1x5q
[23:00:09] *** Quits: justinf210 (~justinf21@192-230-160-245.3rivers.net) (Ping timeout: 256 seconds)
[23:00:40] *** Joins: pynthon (~omar@80-60-40-192.fixed.kpn.net)
[23:01:00] <ChrisWarrick> Henry151: there is something requesting requests[security]==2.20.0, perhaps a dependency
[23:01:15] *** ______GOD______ is now known as sexygirl17
[23:01:37] <ChrisWarrick> Henry151: in fact, your requirements.txt lists it
[23:02:03] *** sexygirl17 is now known as ______GOD______
[23:02:46] <pynthon> Can I ask pandas questions here as well? I have a 3K rows DF with 3 columns: name | value 1 (int) | value 2 (int). Now I want to make 2 different DFs from this DF the top 300 items based on value 1
[23:02:53] <pynthon> oops sorry
[23:03:20] <Henry151> ChrisWarrick: the only lines in my requirements.txt mentioning "requests" are requests>=2.9.1 and requests-oauthlib==1.3.0 ... that's what's puzzling me, is trying to figure out what is asking for requests[security]2.20.0
[23:03:41] <ChrisWarrick> Henry151: are you sure there is no leftover line mentioning requests[security] anywhere?
[23:04:04] *** Quits: jtck (~jtck@222.164.13.173) (Remote host closed the connection)
[23:04:59] <Henry151> ChrisWarrick: that whole pip3 output, i have looked through it three times and still, can't see any indication of what is requesting requests[security] ... searching through the requirements.txt there are only two instances of the word "requests" and 0 instances of the word "security"
[23:05:03] <pynthon> Can I ask pandas questions here as well? I have a 3K rows DF with 3 columns: name | value 1 (int) | value 2 (int). Now I want to make 2 different DFs from this DF. The first DF contains  the top 300 items based on value 1 but should not contain any rows that are also in the top 300 based on value 2 and vice versa.
[23:05:18] *** Joins: imp (~imp@186.205.11.214)
[23:05:28] <ChrisWarrick> Henry151: pastebin your requirements.txt?
[23:05:42] <Henry151> i've also nuked the venv and tried again twice
[23:05:48] <Henry151> sure, coming up
[23:06:12] *** Quits: greedom (~greedom@2001:16b8:2e1b:4600:bdf4:3c8b:c243:bd10) (Remote host closed the connection)
[23:06:23] <pynthon> So I basically do not want to include the intersection between these 2 top 300 sets
[23:06:29] <Henry151> https://termbin.com/anto
[23:06:51] *** Joins: chaosite (~chaosite@user/chaosite)
[23:07:14] *** Joins: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch)
[23:07:26] *** Joins: ray (~ray@user/re)
[23:08:21] <graingert> lash: what do you mean [options]/packages?
[23:08:26] <ChrisWarrick> Henry151: your conflict seems to be caused by selenium, which pins a different requests version
[23:08:40] *** Joins: elgraz (~elgraz@151.65.7.224)
[23:08:50] <ChrisWarrick> Henry151: I’d remove urllib3 and requests from your requirements.txt and try again
[23:09:47] <Henry151> ChrisWarrick: thanks, trying now, appreciate your time
[23:10:07] *** Quits: elgraz (~elgraz@151.65.7.224) (Client Quit)
[23:10:16] *** Joins: elgraz (~elgraz@151.65.7.224)
[23:10:17] <graingert> Henry151: do you have a requirements.in?
[23:10:28] <Henry151> graingert: no, not sure what that is
[23:10:42] <graingert> usually you build your requirements.txt from a requirements.in
[23:11:22] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 252 seconds)
[23:11:44] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:12:01] *** Quits: pneff (~pneff@46-127-136-42.dynamic.hispeed.ch) (Ping timeout: 268 seconds)
[23:12:09] <Henry151> graingert: i built this requirements.txt with a pip freeze command on my local development machine, after getting all the requirements working here
[23:12:09] *** Joins: greedom (~greedom@2001:16b8:2e1b:4600:bdf4:3c8b:c243:bd10)
[23:12:31] <Henry151> however, now i'm trying to set it up on a slightly different and remote machine (an ubuntu server instead of my debian laptop)
[23:12:33] <graingert> how did you find out what to install?
[23:12:58] <graingert> what version of python are you running?
[23:13:57] <graingert> your ansible=0.1 is very low
[23:14:01] *** Quits: elgraz (~elgraz@151.65.7.224) (Client Quit)
[23:14:11] *** Joins: elgraz (~elgraz@151.65.7.224)
[23:14:56] <Henry151> graingert: it is a bit complicated, but this was a working project in python 2.7, and i initially did a bunch of work getting it to run on python 3.7.3 on my development laptop
[23:15:15] <graingert> so the current virtual environment you're in is py3.7?
[23:15:25] <Henry151> no, now it is 3.6.9
[23:15:25] <graingert> and your target machine?
[23:15:35] <graingert> ?
[23:16:00] <Henry151> i actually didn't realize that i was trying on 3.6.9 right now until you just asked -- maybe i will upgrade to 3.7.3 to more closely match what i had working on my laptop
[23:16:31] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[23:16:35] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 256 seconds)
[23:16:44] *** Joins: waynew (~wayne@user/waynew)
[23:16:53] *** Joins: daidoji (~daidoji@104-52-250-5.lightspeed.gnvlsc.sbcglobal.net)
[23:17:12] <graingert> Henry151: what did you install on your laptop?
[23:17:21] <graingert> Henry151: how did you discover the deps originally?
[23:17:49] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[23:17:54] <lash> graingert: in setup.cfg section option key packages
[23:18:08] <graingert> lash: can you link to an example on github
[23:18:09] <lash> or corresponding in setup.py
[23:19:10] <graingert> Henry151: what's the python version of your target machine?
[23:20:05] <Henry151> graingert: python 3.7.5
[23:20:19] <graingert> so 3.6 is a red herring?
[23:20:35] <Henry151> yeah i'm upgrading to 3.7.5 now to try again
[23:20:53] *** Joins: akk (~akk@174-28-112-132.albq.qwest.net)
[23:21:03] <Henry151> discovering the deps originally was a pretty painful process, repeatedly trying to run the code and reading the tracebacks and googling and asking for help in here, i got through it
[23:23:07] <lash> graingert: is this clear enough? https://g33k.holbrook.no/21d12907
[23:23:09] *** Joins: chaosite (~chaosite@user/chaosite)
[23:23:40] <graingert> Henry151: so with pip compile I have this: https://github.com/graingert/henry/blob/default/requirements.txt
[23:24:19] *** Joins: Nact (~l@host-85-27-123-59.dynamic.voo.be)
[23:24:25] *** Quits: computeiro (~Wender@189.37.68.96) (Remote host closed the connection)
[23:25:06] <graingert> Henry151: you can see the stuff I had to remove to get pip-compile to work: https://github.com/graingert/henry/commit/2f14289cc834d58a96e16b77f3bb604e24264bb4
[23:25:30] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[23:26:04] <graingert> Henry151: you have a bad version of google-api-core too
[23:26:07] <graingert> WARNING: The candidate selected for download or install is a yanked version: 'google-api-core' candidate (version 1.20.0 at https://files.pythonhosted.org/packages/5c/ca/e172037b74fe39535731319e7c936160194204e07ba11222a5366ee0c346/google_api_core-1.20.0-py2.py3-none-any.whl#sha256=65ca5396393b3e592c49cba968380b6d2534d9c78b25fedbedea9dd1c6c50249 (from https://pypi.org/simple/google-api-core/)
[23:26:07] <graingert> (requires-python:>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*))
[23:26:07] <graingert> Reason for being yanked: Pinned protobuf version was too low. See https://github.com/googleapis/python-api-core/issues/48
[23:26:26] *** Quits: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net) (Quit: Leaving)
[23:26:28] *** Joins: computeiro (~Wender@189.37.68.96)
[23:26:35] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[23:26:57] *** Joins: waynew (~wayne@user/waynew)
[23:26:59] <Henry151> graingert: wow, thank you for your efforts.. i really would like to move everything up to "a reasonably new version" at the very least, if not getting everything to the absolute newest
[23:27:16] <Henry151> but to start i'm just trying to get it working in this new environment at least as well as i had it working on my laptop
[23:27:19] <graingert> Henry151: right but it comes back to where did you get this requirement list from?
[23:27:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:27:56] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 256 seconds)
[23:28:33] *** Joins: lack (~lack@user/lack)
[23:28:35] <Henry151> all the requirements are things that are used in the codebase. The things that were in the original python2.7 requirements.txt, that were no longer available in python3, i removed their usages in the code itself and replaced them with equivalent python3 packages (this was all months and months ago)
[23:28:42] *** Joins: justinf210 (~justinf21@219.sub-174-204-14.myvzw.com)
[23:28:51] <graingert> Henry151: how did you make the original requirements.txt?
[23:29:17] <Henry151> i copied it, from the python2.7 version of this codebase
[23:29:19] *** Quits: tdoss (~tdoss@wsip-70-166-238-194.ks.ks.cox.net) (Quit: Lost terminal)
[23:29:23] <Henry151> which i didn't write
[23:29:33] <graingert> oh someone else did a pip freeze at one point?
[23:29:52] <Henry151> so, the original developer of this codebase created it, yeah, i believe with a pip freeze
[23:30:00] <graingert> Henry151: what you should do is use pip-compile with that requirements.txt in with pip-tools in your py2.7 vitual environment
[23:31:23] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[23:31:51] *** Joins: acresearch (~acresearc@user/acresearch)
[23:32:38] *** Quits: lmmx (~louis@host-92-0-187-249.as13285.net) (Ping timeout: 252 seconds)
[23:32:42] <acresearch> people what does this mean?    io.UnsupportedOperation: not writable      i have a script that downloads files and writes them into 1 single files,,     it works perfectly except when it downloads a spesific file it craches and gives this error.... i do not understand what it means
[23:32:51] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:32:56] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 272 seconds)
[23:33:02] *** Joins: iauc (~iauc@ti0061a400-1478.bb.online.no)
[23:33:09] <graingert> acresearch: show the full traceback
[23:33:12] *** Quits: greenbagels (~gb@dirac.xen.prgmr.com) (Changing host)
[23:33:12] *** Joins: greenbagels (~gb@user/greenbagels)
[23:33:17] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Read error: Connection reset by peer)
[23:33:26] <iauc> Python really need some clear official position on using magic directly, like calling type(x) instead of x.__class__
[23:33:53] <graingert> acresearch: but it just means you wrote to a read only file
[23:34:01] <graingert> >>> open("requirements.txt", "r").write("hello")
[23:34:01] <graingert> io.UnsupportedOperation: not writable
[23:35:31] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[23:36:57] *** Quits: waynew (~wayne@user/waynew) (Read error: Connection reset by peer)
[23:37:06] *** Joins: srilyk (~wayne@user/waynew)
[23:37:18] <graingert> Henry151: like do you really need wxpython?
[23:38:19] <acresearch> graingert: hmmmm   i have a open(filename, 'a') as f:
[23:38:48] *** Joins: chaosite (~chaosite@user/chaosite)
[23:40:32] <Henry151> graingert: yeah, unfortunately
[23:40:58] <Henry151> this codebase is pretty expansive and interacts with some older hardware
[23:41:11] <Henry151> and so there is a lot of stuff "out of my control"
[23:41:27] <acresearch> graingert: you are right, i sovled it,   i accedently had 2  with open as f   statements    the second one was 'r'
[23:41:31] <acresearch> graingert: :-) thanks
[23:42:16] *** Joins: MikZyth (~MikZyth@188.65.242.79)
[23:43:17] *** Joins: lsrtl (~lsrtl@user/lsrtl)
[23:43:23] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:44:20] *** Quits: chaosite (~chaosite@user/chaosite) (Ping timeout: 272 seconds)
[23:44:33] <graingert> Henry151: I removed tertiary packages from your requirements.in https://github.com/graingert/henry/commit/8b7a5de1cc37b188082666a7127e47bbb2bea43d
[23:44:42] *** Quits: justinf210 (~justinf21@219.sub-174-204-14.myvzw.com) (Ping timeout: 240 seconds)
[23:44:55] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:46:14] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 272 seconds)
[23:46:14] <graingert> Henry151: wtf is anisble
[23:46:31] <graingert> "You meant to type ansible. You ended up here. I don't want anybody being able to use this to hack you. So I made this."
[23:47:52] <Henry151> looks like that was a typo
[23:47:53] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[23:47:59] <grym> can'tsible
[23:48:27] *** Quits: elgraz (~elgraz@151.65.7.224) (Quit: Leaving)
[23:48:48] *** Joins: clawh (~clawh@185.244.214.60)
[23:48:56] <graingert> Henry151: https://github.com/slazarov/python-bittrex-websocket/pull/90 also this package seems totally unmaintained
[23:49:12] <graingert> and is preventing you upgrading requests
[23:49:26] <graingert> Henry151: did you try my new requirements.txt yet?
[23:49:38] *** Joins: P4ddyF (~PaddyF@user/yogoyo)
[23:49:44] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 258 seconds)
[23:50:00] <Henry151> yeah i'm trying it now
[23:50:07] <Henry151> thank you a lot for all this assistance
[23:50:43] <grym> Henry151: i have this theory that graingert obtains physical sustenance by dragging py2 code into hypermodern py3.9+ code
[23:50:56] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[23:51:35] <graingert> grym: Lol
[23:52:12] <graingert> Henry151: you might like to try modernize
[23:52:15] *** Quits: smorgasbord (~buggy@user/smorgasbord) (Quit: Leaving.)
[23:52:30] <graingert> I'm going to drop maintianership of it shortly as I've stopped using it
[23:53:03] *** Quits: lsrtl (~lsrtl@user/lsrtl) (Read error: Connection reset by peer)
[23:53:14] *** Joins: justinf210 (~justinf21@253.sub-97-44-1.myvzw.com)
[23:53:31] <Henry151> graingert: i did mess with modernize for a bit but wound up passing all the code through 2to3, then manually testing and adjusting things until i could get them to run on python3 on my laptop
[23:53:56] <graingert> Henry151: Hmm modernize is strictly better than 2to3
[23:54:00] *** Quits: beshr (~beshr@user/beshr) (Read error: Connection reset by peer)
[23:54:11] <Henry151> we're going to drop support for python2 entirely, as soon as i'm able to get the different components of this system to all work on 3
[23:54:30] <Henry151> graingert: scrictly better :) i like that phrase. How so?
[23:54:31] <graingert> Henry151: Sure but it's best to go via a 2+3 intermediate stage
[23:54:46] <graingert> Henry151: it runs all the 2to3 fixers that work
[23:55:01] <graingert> And enhances the broken ones
[23:56:00] *** Joins: SilverFox (~joe@edia-64-223-223-162.myfairpoint.net)
[23:56:19] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[23:56:40] <graingert> Eg you use modernize and make sure all your py2 tests still pass
[23:56:56] <graingert> Then get your py3 tests passing without breaking your py2 tests
[23:57:25] <SilverFox> graingert: Heyo again, i was trying to turn the code we got working into a class just now, ive got most of the way there but im getting a traceback now that dosent point to my file? so im not sure where next to turn, think you could take a look? https://bpa.st/HXQQ
[23:57:27] <Henry151> i must admit i'm a bit discouraged right now, because i thought i had "a version of this code that would work in python3" and that i would be fairly easily able to just "spin it up" on this VPS instead of on my laptop, where i'd been running it previously. And now I've been spinning my wheels and bashing my head against the keyboard for 6+ hours and feel no closer to making it all work than i was before
[23:57:33] <Henry151> i got it to run on my laptop months ago.
[23:57:34] *** Quits: justinf210 (~justinf21@253.sub-97-44-1.myvzw.com) (Ping timeout: 252 seconds)
[23:57:35] *** Quits: srilyk (~wayne@user/waynew) (Read error: Connection reset by peer)
[23:57:46] <graingert> Then you have a system where you can just change  a PATH variable and switch your application
[23:57:57] *** Joins: srilyk (~wayne@user/waynew)
[23:58:15] <graingert> Henry151: well that's why you need to make small atomic commits where the project is working at every step
[23:58:26] <Henry151> i see.
[23:58:51] <graingert> SilverFox: Why a class?
[23:59:04] <Henry151> additionally, there are hardly any tests written for the codebase at all, in 2 or 3, so far
[23:59:15] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[23:59:23] <SilverFox> graingert: its how ive always done things, and it makes it a lot easier to look at and read :c sorry, all those defs nested between things was just odd
[23:59:37] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:3143:bedd:63c4:72b6)
[23:59:53] <Henry151> beyond that, i have also been only able to manually test about a third of the system, so far
