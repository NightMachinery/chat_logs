[00:08:26] *** Quits: oriba (~oriba@dynamic-078-055-079-043.78.55.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:36:29] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Quit: Leaving)
[00:37:21] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[00:38:08] *** Joins: AndreYuhai (~AndreYuha@088156136142.dynamic-2-waw-k-2-0-0.vectranet.pl)
[00:38:39] <AndreYuhai> How can I split  this "foo\n\nbar\n" so that I have ["foo", [], [], "bar"] instead of ["foo", [], "bar"]
[00:39:05] <AndreYuhai> string:split is just taking consequent chars as a whole
[00:39:10] <AndreYuhai> Couldn't find any other function
[00:39:49] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Client Quit)
[00:44:47] <Ankhers> AndreYuhai: string:split("foo\n\nbar\n", "\n", all)
[00:45:54] <AndreYuhai> Ankhers, but this gives me: https://paste.ofcode.org/c6GATrWkTnn9LYFXgxZ3qH
[00:46:40] <Ankhers> Oh sorry. I missed that.
[00:47:03] <AndreYuhai> That's what I've been using already and I didn't even realize that it doesn't work the way I was expecting :D
[00:47:14] <darkling> Umm... It's doing what you want, it's just that you've got your test sample wrong. :)
[00:47:25] <darkling> There's only one blank item between the two \ns
[00:47:46] <darkling> The sample string has three lines, and it's returning three items in the list.
[00:48:51] <darkling> (Sorry, four items, including the final empty string)
[00:49:27] <Ankhers> I'm a little surprised there is not an empty list at the end though. But yes, there should only be one empty list in the middle.
[00:49:42] <darkling> In the paste, there's an empty list at the end.
[00:50:09] <AndreYuhai> Yes there is, sorry that's my fault
[00:50:14] <AndreYuhai> I need some sleep maybe :D 
[00:50:21] <Ankhers> You are correct. I'm just reading everything wrong today... I should stop trying lol.
[00:51:06] <darkling> If it's any comfort, Ankhers, I got the count of lines wrong, too.
[00:51:09] <AndreYuhai> So how do we parse these anyway I mean I am a bit confused
[00:51:18] <AndreYuhai> So it's splitting by \n
[00:51:53] <Ankhers> Yes. So basically take everything between each new line and turn it into a string.
[00:52:12] <Ankhers> So, foo, nothing, bar, nothing. Just like your paste.
[00:52:56] <AndreYuhai> So why do we get ["foo", []] from "foo\n"
[00:52:57] <AndreYuhai> https://paste.ofcode.org/M4mG9Su9hiFLnWqN6QCNGk
[00:53:20] <darkling> Because there's an empty string following the \n
[00:53:54] <darkling> It's a fencepost thing: \n is the fenceposts (plus one at the start and end of the string), and the text is the gaps between them.
[00:54:14] <darkling> So if you have x newlines, you have x+1 items in the result.
[00:56:12] <AndreYuhai> Is it an Erlang thing or do the other languages just strip the last empty string? 
[00:56:39] <darkling> I think it's an anything thing.
[00:56:41] <AndreYuhai> I mean in ruby when I do  "fo\n".split() # => ["fo"]
[00:57:05] <darkling> >>> "AzBzCz".split("z")
[00:57:06] <darkling> ['A', 'B', 'C', '']
[00:57:11] <darkling> Python keeps it.
[00:57:56] <Ankhers> I think ruby is the strange one here. I would expect to keep it.
[00:58:00] <darkling> However, note that it drops it if you use split() rather than split("\n").
[00:58:23] <AndreYuhai> Hmm okay, I just didn't know about that. :D
[00:58:48] <AndreYuhai> Okay another question. I need to keep those consecutive "\n"s anyway,  how would I achieve that?
[00:58:49] <darkling> In Python, split() has different behaviour to split("x"). The former splits on sequences of whitespace. The latter splits precisely on the text given.
[00:59:31] <darkling> I'd say you should use string:split("\n"), and then explicitly discard/handle the trailing empty element, if it exists.
[01:00:24] <AndreYuhai> So can we say that the empty  element is always the consecutive \n
[01:00:49] <AndreYuhai> But then for example I get the empty element at the end of the string as well
[01:00:57] <AndreYuhai> Even thought there was only one \n
[01:01:00] <AndreYuhai> So I'm confused :D
[01:03:39] <Ankhers> You could always use a regex to remove that (potential) last new line character.
[01:03:59] <darkling> The elements of the result are the parts *between* the \n.
[01:04:18] <darkling> The empty element at the end of the string is the part of the string following the last \n.
[01:04:32] <darkling> Try splitting "foo\nbar\nbaz" (no \n at the end).
[01:04:45] <darkling> You'll see there's two \ns and three elements in the result, none empty.
[01:05:19] <AndreYuhai> That's right. What I Was thinking is when we split we take chars up until \n and then that's our element 
[01:05:28] <AndreYuhai> and then we skip \n  and then do the same until next \n
[01:05:49] <darkling> ... or the end of the string. That's the key point.
[01:07:19] <AndreYuhai> Now thinking about it, that's also right.
[01:07:48] <AndreYuhai> Interesting anyway, learnt something new that I had not paid attention to beforee :D
[01:08:28] <darkling> So you need to be able to handle the last element cleanly, whether it's empty or not.
[01:09:18] <Ankhers> Probably just a good idea if you were to just discard all empty strings in the list. So you can just skip it during whatever operation you do on it.
[01:09:26] <darkling> If you're actively wanting to preserve the empty newlines in the rest of the input, you probably want to preserve that last element (empty or not) as well.
[01:09:41] <AndreYuhai> With that how would I know whether I've reached the end of a string or not? Because either way I get []
[01:10:11] <Ankhers> Depends on the operation you are doing. If you built a recursive function, you would match on [[]].
[01:11:54] <darkling> I guess one question here is, why do you want to preserve the empty lines?
[01:12:22] <darkling> And what happens to your processing if you leave in the empty last element?
[01:12:38] <AndreYuhai> Basically I've got a Markdown parser
[01:12:40] <darkling> I'm guessing it's not actually a problem, if you're keeping the other empty lines
[01:12:56] <AndreYuhai> so I need to  know how many line breaks there are so that I can close some blocks and start neew ones
[01:13:06] <darkling> OK, so an empty line is a new paragraph.
[01:13:10] <AndreYuhai> So if you've got two line breaks then for example you close the ul tag
[01:14:57] <darkling> Maybe better to think of it as an empty line, rather than two line breaks?
[01:14:59] <AndreYuhai> Oh so basically a [] is a new paragraph and we close the element before
[01:15:15] <AndreYuhai> Yes, I think that's right. 
[01:15:22] <AndreYuhai> An empty line break
[01:15:26] <AndreYuhai> or line
[01:15:28] <AndreYuhai> :D  
[02:00:23] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[02:34:41] <AndreYuhai> By the way, since an empty line is going to be a new paragraph, how would I then merge two  paragraphs into one? Do we do that during rendering phase?
[02:35:51] <AndreYuhai> Related SS : https://imgur.com/a/VpS8NEX
[02:56:22] *** Quits: Corbit (~Corbit@2001:a61:2bbd:a401:4408:16f2:7b92:d24c) (Quit: WeeChat 3.1)
[03:02:34] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[03:07:30] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[03:09:12] *** Quits: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:07:56] <Ankhers> For list items, you would continue putting content into your li until you reach that empty line.
[04:11:11] <Ankhers> If you aren't, you should be coming up with some kind of data structure to hold these values. Something as simple as a tagged tuple would do. Something as simple as tagged tuples could work. e.g., {list_item, "the text for the list item"}
[04:11:12] <darkling> Actually, thinking about it, nested lists are probably going to require a push-down parser. This isn't a simple state machine, so there's probably some dragons waiting for you if you thought it was going to be simple. :)
[04:12:35] <darkling> It's not a regular language/state machine.
[04:19:16] <Ankhers> I'm not super familiar with parsing, but I think it would be simple enough to just read the next line of input to see what is needed. In the example of nested lists, it should be enough to say, "I'm currently parsing a list and the next line starts with whitespace + list indicator, so I need to parse as a nested  list". And I think markdown only allows for so many nested layers (I don't know off the top of my head).
[04:20:40] <darkling> This is one of those areas where some knowledge of the theory is actually useful, otherwise you end up trying to do something that isn't actually possible.
[04:21:14] <Ankhers> It may be worth looking at the approach other parsers are doing just as a sanity check.
[04:21:22] <darkling> I've fallen into that trap before. You end up either going round in circles trying to make it simple and getting nowhere, or you accidentally fall into the right way without realising. :)
[04:22:35] <Ankhers> I like to believe the latter happens to me more often than it actually does...
[04:23:38] <Ankhers> But yes. I am writting an RTMP implentation and I think I have restarted it 3-4 times now. I'm almost happy with the approach I am taking.
[04:25:47] <Ankhers> AndreYuhai: Since I also just saw your post in #elixir, have you taken a look at the earmark package? It does markdown to html. But if you are doing this as an exercise to learn more about markdown/parsing, keep doing what you are doing.
[04:28:13] <AndreYuhai> Sorry I just saw the message after you tagged me :)
[04:28:45] <AndreYuhai> We've actually started writing the code before really thinking about it haha. I mean I admit that it's not perfect hence we have problems now
[04:28:56] <AndreYuhai> And it was my  first time trying to write a parser
[04:29:19] <AndreYuhai> But yea lessons learned.
[04:29:50] <AndreYuhai> Before our approach was to use the atom none for an empty element  instead of creating a paragraph
[04:30:33] <AndreYuhai> We were basically trying to implement CommonMark Spec.
[04:32:15] <darkling> Definitely worth some light background reading here. The Dragon Book is probably a bit intense, but there's some good and accessible chapters in A K Dewdney's Turing Omnibus.
[04:32:39] <AndreYuhai> Right now we can parse a few different things like list, code block, quote and inline code, italic, bold etc.
[04:32:54] <AndreYuhai> Headers as well but yea that was a quite nice exercise
[04:33:02] <AndreYuhai> And I'll be reading more about parsers as well
[04:34:03] <darkling> If you're lucky, they've published an EBNF grammar and you can feed that into yecc, appropriately mangled.
[04:34:20] <Ankhers> I never even though about that.
[04:34:51] <darkling> Less easy if you have other constraints, like being able to convert a document far larger than fits into RAM, but that's another converstaion.
[04:35:14] <AndreYuhai> what's the dragon book btw
[04:35:14] <Ankhers> Streaming parses must be fun.
[04:35:27] <darkling> I wrote one for Turtle a couple of years ago.
[04:36:16] <darkling> This, in fact: https://github.com/darkling/lagra/blob/master/src/lagra_parser_turtle_parser.erl
[04:36:49] <darkling> I see that I left the source for the state graph in the comments. :)
[04:38:32] <darkling> AndreYuhai: The Dragon Book is https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools
[04:38:39] <darkling> (Or its predecessors)
[04:38:41] <Ankhers> Probably handy to have. I generally do something similar when I have some kind of state machine.
[04:38:42] <AndreYuhai> darkling, Thank you!
[04:39:04] <AndreYuhai> Gotta go to sleep now as it's 2AM, thank you for the help Ankhers , darkling ! Have a nice day.
[04:39:15] <Ankhers> AndreYuhai: Have a good one!
[04:39:21] <darkling> G'night. It's late for me, too.
[04:39:44] *** Quits: AndreYuhai (~AndreYuha@088156136142.dynamic-2-waw-k-2-0-0.vectranet.pl) (Quit: Leaving)
[05:04:18] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[05:09:03] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[05:48:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[05:53:15] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[06:54:57] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:18:54] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:52:35] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[08:15:30] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:59:58] *** Quits: sasajuric (sid29842@id-29842.ilkley.irccloud.com) (*.net *.split)
[08:59:58] *** Quits: okeuday (~okeuday@24-113-18-65.wavecable.com) (*.net *.split)
[09:00:56] *** Joins: sasajuric (sid29842@id-29842.ilkley.irccloud.com)
[09:00:58] *** Joins: okeuday (~okeuday@24-113-18-65.wavecable.com)
[09:03:22] *** Quits: Amadiro (~Amadiro@84.209.11.12) (Ping timeout: 252 seconds)
[09:04:02] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 260 seconds)
[09:04:15] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[09:11:38] *** Quits: comrad (~quassel@holarse/comrad) (*.net *.split)
[09:11:38] *** Quits: peerst__ (sid41367@id-41367.ilkley.irccloud.com) (*.net *.split)
[09:11:38] *** Quits: eproxus_ (sid39465@id-39465.ilkley.irccloud.com) (*.net *.split)
[09:11:38] *** Quits: rnewson (sid29161@couchdb/committer/rnewson) (*.net *.split)
[09:11:38] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[09:11:57] *** Joins: eproxus_ (sid39465@id-39465.ilkley.irccloud.com)
[09:12:01] *** Joins: comrad (~quassel@holarse/comrad)
[09:12:21] *** Joins: peerst__ (sid41367@2a03:5180:f:3::a197)
[09:12:40] *** Joins: rnewson (sid29161@couchdb/committer/rnewson)
[09:12:59] *** Joins: bw (sid2730@user/betawaffle)
[10:00:06] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[10:04:26] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 246 seconds)
[10:05:08] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[10:21:50] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:23:05] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[10:23:11] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:24:04] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[10:50:54] *** Quits: fancycade (~fancycade@2600:1700:eec0:8e80:8639:beff:fe6a:1bb3) (Ping timeout: 260 seconds)
[11:01:00] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[11:06:20] *** Joins: fancycade (~fancycade@2600:1700:eec0:8e80:8639:beff:fe6a:1bb3)
[11:14:14] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:16:19] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[11:21:05] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 264 seconds)
[11:47:56] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[11:52:53] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 264 seconds)
[12:35:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:12] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:39:46] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[12:51:31] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Ping timeout: 265 seconds)
[12:51:31] *** Quits: drastik_ (~drastik@user/drastik) (Ping timeout: 252 seconds)
[13:13:50] *** Joins: xek (~xek@46.204.5.95.dsl.dynamic.t-mobile.pl)
[13:34:12] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[13:38:46] *** Quits: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net) (Ping timeout: 252 seconds)
[14:12:05] *** Quits: xek (~xek@46.204.5.95.dsl.dynamic.t-mobile.pl) (Ping timeout: 264 seconds)
[14:13:14] *** Joins: xek (~xek@188.146.173.134.nat.umts.dynamic.t-mobile.pl)
[14:38:30] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[14:43:17] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[14:44:13] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[14:48:58] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Ping timeout: 265 seconds)
[15:10:30] *** Joins: jespada (~jespada@2803:9800:9842:7a62:edd5:5e74:3ec2:1b19)
[15:39:57] *** Joins: voltone (~voltone@mailgw3.be-all.com)
[15:56:23] *** Quits: voltone (~voltone@mailgw3.be-all.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:28:53] *** Quits: xek (~xek@188.146.173.134.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 264 seconds)
[16:34:48] *** Joins: voltone (~voltone@85.64.15.73.dynamic.barak-online.net)
[16:48:20] *** Joins: xek (~xek@89-72-114-215.dynamic.chello.pl)
[16:53:02] *** Quits: voltone (~voltone@85.64.15.73.dynamic.barak-online.net) (Read error: Connection reset by peer)
[18:02:49] *** Joins: phaleth (~phaleth@user/phaleth)
[18:12:37] *** Joins: hanabi (~hanabi@h155217.upc-h.chello.nl)
[18:35:04] *** Quits: xek (~xek@89-72-114-215.dynamic.chello.pl) (Quit: Leaving)
[18:35:06] *** Joins: xek_ (~xek@89-72-114-215.dynamic.chello.pl)
[18:36:05] *** Quits: hanabi (~hanabi@h155217.upc-h.chello.nl) (Ping timeout: 264 seconds)
[18:45:50] *** Joins: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net)
[18:50:08] *** Quits: yauhsien (~yauhsien@118-167-47-202.dynamic-ip.hinet.net) (Ping timeout: 246 seconds)
[19:29:51] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[19:35:06] *** Joins: BadRequest (uid3514@user/badrequest)
[19:48:50] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:48:51] *** Joins: hanabi (~hanabi@h155217.upc-h.chello.nl)
[19:49:16] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:34:57] *** Joins: james_lavin (~jameslavi@ool-457981b2.dyn.optonline.net)
[20:58:59] *** Joins: Corbit (~Corbit@2001:a61:2bbd:a401:4408:16f2:7b92:d24c)
[21:01:54] *** Joins: drastik (~drastik@user/drastik)
[22:25:44] *** Quits: xek_ (~xek@89-72-114-215.dynamic.chello.pl) (Ping timeout: 246 seconds)
[22:28:32] *** Quits: hanabi (~hanabi@h155217.upc-h.chello.nl) (Ping timeout: 246 seconds)
[22:40:39] *** Joins: hanabi (~hanabi@h155217.upc-h.chello.nl)
[22:49:49] *** Quits: cdcd (~cdcd@20.51.105.67) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:50:42] *** Joins: cdcd (~cdcd@20.51.105.67)
[23:23:51] *** Quits: phaleth (~phaleth@user/phaleth) (Quit: phaleth)
[23:31:00] *** Quits: BadRequest (uid3514@user/badrequest) (Quit: Connection closed for inactivity)
[23:55:17] *** Quits: hanabi (~hanabi@h155217.upc-h.chello.nl) (Ping timeout: 264 seconds)
