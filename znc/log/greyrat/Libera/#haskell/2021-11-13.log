[00:00:55] *** Joins: jkaye (~jkaye@2601:281:8300:7530:25cb:799d:2790:e606)
[00:02:27] *** Joins: pavonia (~user@user/siracusa)
[00:03:33] *** Joins: alx741 (~alx741@181.196.68.187)
[00:04:35] *** Joins: lortabac (~lortabac@88.125.6.227)
[00:11:23] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:14:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:15:45] *** Joins: anduril1 (~anduril1@167-248-67-166.oa01.lnk02.ne.dynamic.allophone.net)
[00:17:30] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:18:15] *** Quits: Alex_test (~al_test@178.34.163.122) (Ping timeout: 250 seconds)
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:18:31] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[00:18:31] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:18:31] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:21:16] *** Quits: phma (phma@2001:5b0:211f:3178:45a8:8496:3ea1:a73a) (Read error: Connection reset by peer)
[00:21:43] *** Quits: AlexZenon (~alzenon@178.34.163.122) (Ping timeout: 250 seconds)
[00:22:06] *** Joins: phma (phma@2001:5b0:2144:33f8:194f:6c28:dad5:4e86)
[00:23:28] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[00:24:09] *** Joins: neurocyte0132889 (~neurocyte@94.46.73.137)
[00:24:09] *** Quits: neurocyte0132889 (~neurocyte@94.46.73.137) (Changing host)
[00:24:10] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:26:16] *** Joins: Alex_test (~al_test@178.34.163.122)
[00:26:33] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[00:27:04] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:27:59] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[00:28:49] *** Joins: AlexZenon (~alzenon@178.34.163.122)
[00:28:57] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[00:30:49] *** Quits: jurjen (~jurjen@31-161-184-96.mobile.kpn.net) (Read error: Connection reset by peer)
[00:36:10] *** Joins: jurjen (~jurjen@31-161-184-96.mobile.kpn.net)
[00:37:35] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[00:37:40] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[00:42:23] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[00:42:39] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[00:45:10] *** Joins: aegon (~mike@174.127.249.180)
[00:47:39] <energizer> is there a way to pattern match a concatenation into left++right | left++mid:right ? maybe there's some package that supports this?
[00:49:43] <dsal> It's not super clear what you're trying to do.  Are you wanting a snoc list?  You can't pattern match infinite lists, but you can do some guarding.
[00:50:05] *** Joins: acidjnk (~acidjnk@p200300d0c721b72570e3bb829407e876.dip0.t-ipconnect.de)
[00:50:12] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[00:50:14] <energizer> in this case i have a finite list
[00:50:28] <dsal> Sure, but you can't tell the compiler that.
[00:51:00] <dsal> You can make specific patterns for the cardinalities you expect, but I think you're doing something else, but I don't know what it is.  :)
[00:51:10] *** Joins: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de)
[00:51:27] <energizer> i want it to work for any finite size
[00:51:53] *** Joins: deadmarshal (~deadmarsh@95.38.228.222)
[00:51:55] <dsal> Sure, just define `it` a bit better.  2^32 is a finite size, but you probably don't want to pattern match it.
[00:52:05] <energizer> why not?
[00:52:27] <energizer> i can take the left and right halves of that, no?
[00:53:31] <dsal> As long as you don't mind allocating 2^31 new elements, I guess.  But you're definitely using the wrong data structure for whatever you're trying to do.
[00:54:22] *** Quits: mimmy (~mimmy@72.142.88.18) (Ping timeout: 260 seconds)
[00:54:32] <dsal> ViewPatterns will kind of get you part of the way there, but it'd be easier if you stated your problem a bit better and used the right tools to solve it.  :)
[00:54:55] *** Quits: acidjnk (~acidjnk@p200300d0c721b72570e3bb829407e876.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[00:55:38] *** Quits: anduril1 (~anduril1@167-248-67-166.oa01.lnk02.ne.dynamic.allophone.net) (Ping timeout: 256 seconds)
[00:56:40] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[00:56:52] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (Ping timeout: 260 seconds)
[00:57:00] *** Joins: mimmy (~mimmy@72.142.88.18)
[00:57:12] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[00:57:50] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[01:00:16] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:00:34] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[01:00:52] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[01:01:25] <energizer> say i have a tuple of 1000 and i want to define leftHalfView
[01:02:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[01:04:06] <energizer> i guess it's not allowed to say (1,2)++(3,4) anyway
[01:04:16] <geekosaur> tuples are not lists
[01:04:23] *** Joins: alzgh (~alzgh@user/alzgh)
[01:04:57] *** Quits: lortabac (~lortabac@88.125.6.227) (Quit: WeeChat 2.8)
[01:04:58] <geekosaur> and the maximum number of elements in a tuple is 63, not that you can do much with such tuples
[01:05:50] *** Joins: Pickchea (~private@user/pickchea)
[01:06:08] <energizer> maybe fixed-vector is better for this conversation?
[01:06:53] <geekosaur> it's still not clear what you are actually trying to do.l or what problem you are trying to solve
[01:07:33] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[01:08:24] <dsal> I keep guessing, but if my guesses are wrong, it's just going to be more confusing.  Can you describe your goal, energizer?
[01:09:17] <energizer> pattern matching is useful for decomposing a collection of data and i want to decompose a finite-length sequence into a its left and right halves. the goal seems straightfoward, no?
[01:10:03] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[01:10:07] <geekosaur> only if it is specifically constructed as left and right halves
[01:10:09] <dsal> Screwdrivers are useful for adjusting screws.  If you clamp two of them together with vice grips, you can use them to loosen bolts.
[01:10:48] <dsal> Things like Set and Map can be chopped in ~half because that's how the data structure was defined.
[01:11:07] <dsal> If you do that with something like a list, the left half is going to be super expensive to construct, but the right half will be cheap once you get there.
[01:11:19] <energizer> [1,2]++[3]++[4] isn't constructed from left and right halves but we still know what it means to decompose it into left and right halves
[01:11:34] <geekosaur> "we" do but the compiler doesn't
[01:11:50] <geekosaur> and it's a list so it will be expensive regardless
[01:12:25] <geekosaur> lists are not *designed* to be split into halves
[01:12:35] <dsal> Data.Sequence might be a better starting point.
[01:12:59] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Remote host closed the connection)
[01:13:17] <dsal> ùëÇ(log(min(ùëñ,ùëõ‚àíùëñ))) split isn't too bad.
[01:17:05] <[exa]> energizer: a bit more generally, "half of some sequence" isn't a constant-looking pattern, right?
[01:17:39] <energizer> [exa]: constant-looking?
[01:18:49] <[exa]> like, "everytime the same"
[01:21:20] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[01:21:24] <[exa]> moreover, no matter how cool the patternmatching looks, it's basically a precise deconstruction of the constructed datastructure. If you didn't construct the sequence explicitly by joining 2 halves with a special half-and-half constructor, you can't match it because it's not going to magically appear there
[01:23:25] <[exa]> anyway -- more practically -- Vectors support creating any kind of slices (incl. halves) in O(1), so I'd advise trying these. :]
[01:24:12] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[01:25:38] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Read error: Connection reset by peer)
[01:25:44] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[01:26:49] <hololeap> data SomeX = forall t. SomeX (X t)
[01:27:02] <hololeap> data SomeY = forall t. SomeY (Y t)
[01:27:55] <hololeap> how do I write a function that will handle X and Y given any t, where it is the same t for both types
[01:28:45] <dsal> That sounds like a type class.
[01:29:08] <dsal> Otherwise, "how do I write a function that works on any type that contains an Int"
[01:30:33] <monochrom> You will never be told that you have two values of the same t type. In fact existential typing decrees that you have two different t's.
[01:32:37] <monochrom> The solution is to completely redesign your design based on to what extent you actually need this.
[01:32:53] <dsal> Good general advice.
[01:32:59] <geekosaur> I call xy problem. what problem are you actually trying to solve?
[01:33:34] <monochrom> Heh I avoided saying "xy" because this one literally has an X and a Y >:)
[01:33:41] <hololeap> ok, I think I see how I might do this
[01:33:44] <dsal> Yeah, it's got both X, Y, and SomeX, SomeY
[01:33:53] <hololeap> I can try to explain...
[01:34:41] <hololeap> problem involves a binary tree which is parsed from input, and a path (also parsed from input) which serves as a key to locate a single node
[01:36:21] <monochrom> That doesn't sound like needing any polymorphism in the first place.
[01:36:45] <hololeap> I made a skeleton tree type Tree, which just stores the shape of the tree, and I'm using DataKinds to prevent a path being constructed that would be out-of-bounds
[01:37:00] *** Quits: fvr (uid503686@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[01:37:07] <hololeap> I already wrote my entire program using this and now I hit the part where I write the parser...
[01:38:17] <hololeap> but I think I see how I can do it, still. 1) parse the tree as SomeTree 2) parse the path within the `withSomeTree` function
[01:39:15] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[01:41:20] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[01:41:50] *** Joins: seanparsons (~seanparso@cpc158525-gill21-2-0-cust151.20-1.cable.virginm.net)
[01:41:52] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:42:11] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 245 seconds)
[01:42:39] <seanparsons> Hmmm, looks like Hackage has done a dead to me...
[01:43:50] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[01:44:23] <dolio> Yeah, 503.
[01:47:18] <ddb> int-e: ok, so I have lambdabot running famously, but when I try to connect to irc I get the following error
[01:47:20] <ddb> lambdabot> irc-connect tilde club.tilde.chat 6697 lambdabot
[01:47:22] <ddb> [ERROR] : <socket: 12>: hGetLine: end of file
[01:47:54] <int-e> 6697? it doesn't do TLS
[01:48:24] <ddb> ah gotcha
[01:48:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:48:53] <int-e> I'm using this for lambdabot here:  socat TCP4-LISTEN:6667,bind=127.0.0.1,reuseaddr,fork,forever OPENSSL:irc.libera.chat:6697
[01:49:10] <int-e> (and the bot connects to 127.0.0.1:6667)
[01:50:38] <int-e> I've also heard of people using a bouncer (znc?)
[01:51:01] *** Joins: dustee (~dustee@n2-77-150.dhcp.drexel.edu)
[01:51:21] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 245 seconds)
[01:51:47] *** Quits: dustee (~dustee@n2-77-150.dhcp.drexel.edu) (Remote host closed the connection)
[01:52:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[01:53:11] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[01:54:52] <ddb> I'm not familiar with socat, but I think I can do plaintext on localhost in my situation
[01:54:59] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 264 seconds)
[01:55:23] *** Quits: jurjen (~jurjen@31-161-184-96.mobile.kpn.net) (Read error: Connection reset by peer)
[01:56:43] <statusbot> Status update: Hackage and many www services are down due to host connectivity issues. We hope this will be resolved shortly. -- http://status.haskell.org/pages/incident/537c07b0cf1fad5830000093/618eea229604e60540fd03ad
[01:58:35] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[01:59:31] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:07:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[02:09:08] <statusbot> Status update: Connectivity at our host appears to have been restored. -- http://status.haskell.org/pages/incident/537c07b0cf1fad5830000093/618eea229604e60540fd03ad
[02:09:56] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[02:12:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:14:10] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Ping timeout: 260 seconds)
[02:14:45] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:16:05] <ddb> alright, getting close now, it's connected, but how do I get it to join a room?
[02:16:24] <ddb> I tried /invite, but that did not seem to work
[02:17:06] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[02:17:19] <geekosaur> http://users.ece.cmu.edu/~allbery/lambdabot/COMMANDS.more
[02:17:37] <geekosaur> I think that's still the only reference to lambdabot admin commands
[02:17:40] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[02:18:29] <dsal> heh.  I spent a while trying to parse that as CoMonads, no wait, it's spelled wrong.  CommaNDS?  What's NDS?
[02:18:38] <geekosaur> and no, I don't think lambdabot knows how to respond to an /invite
[02:19:29] *** Joins: pwug (~pwug@user/pwug)
[02:20:06] <dsal> I'm having a bit of trouble understanding `review`.  It seems strange and unnecessary.
[02:20:13] <dsal> > review _Just 3
[02:20:14] <lambdabot>  Just 3
[02:20:38] *** Quits: deadmarshal (~deadmarsh@95.38.228.222) (Ping timeout: 268 seconds)
[02:20:41] *** Quits: mimmy (~mimmy@72.142.88.18) (Quit: WeeChat 3.3)
[02:21:02] <ddb> hmm now how to become an admin
[02:21:12] <energizer> (1+2)+(3+4) which side gets evaluated first?
[02:21:48] <geekosaur> undefined, since it's a pure expression
[02:22:04] <geekosaur> the compiler is free to pick any evaluation order
[02:22:06] <dsal> It's possible none of that gets evaluated.
[02:22:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:23:11] *** Quits: benin (~benin@183.82.176.36) (Ping timeout: 246 seconds)
[02:24:05] *** Joins: meatfeather[m] (~meatfeath@2001:470:69fc:105::1:3311)
[02:24:07] <monochrom> dsal, a long time ago when I was learning unix, the textbook explained that uucp is acronym for "Unix-to-Unix CoPy".  For a long long time I was splitting that camelcase CoPy into "co" "py" and wondering what would "py" mean such that it had a co- version called "co-py".
[02:24:48] <energizer> python
[02:24:58] <dsal> haha.  And now we have a new python derivative that does everything backwards.
[02:25:19] <geekosaur> ddb, the console and config file are always run as admin. you can use that to add users to the admin acl, which should also be documented (@admin +, iirc, but it's been a decade)
[02:26:29] <geekosaur> note that lambdabot does not check user registrations, so for safety you should only add users who are registered with nickserv and have protected their accounts
[02:27:06] *** Joins: benin (~benin@183.82.176.36)
[02:30:15] *** Joins: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net)
[02:31:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[02:35:59] *** gabiruh_ is now known as gabiruh
[02:37:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[02:41:30] <Franciman> been trying to write a sexpr parser in Zig
[02:41:36] <Franciman> it is insanely fast and small
[02:41:50] <Franciman> what are the usual techniques to improve Haskell's parsing?
[02:41:54] <Franciman> I am using attoparsec
[02:41:58] <Franciman> for example
[02:42:08] <Franciman> i give up on size, because ehe
[02:42:11] <Franciman> it's not fair
[02:42:13] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[02:42:30] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[02:42:30] <Franciman> haskell is a dinosaur if compared with zig, talking about runtimes. so it's unfair
[02:42:51] <Franciman> to improve haskell's parsing speed
[02:44:47] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[02:49:20] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:50:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314)
[02:52:00] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[02:52:35] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[02:52:40] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[02:53:22] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 260 seconds)
[02:55:31] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[02:56:57] *** Joins: stefan-_ (~cri@42dots.de)
[02:58:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d8e7:a6fa:245:fafa) (Read error: Connection reset by peer)
[02:58:51] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[02:59:47] *** Quits: jkaye (~jkaye@2601:281:8300:7530:25cb:799d:2790:e606) (Ping timeout: 264 seconds)
[03:02:43] <maerwald[m]> <Franciman> "what are the usual techniques to..." <- Streamly can be really fast, but needs a lot of library knowledge 
[03:03:07] <maerwald[m]> The fastest is an ad-hoc xeno approach, using only bytestring functions that use memchr under the hood like elemIndex
[03:03:31] <maerwald[m]> attoparsec for example is really slow compared to that
[03:03:56] *** Quits: michalz (~michalz@185.246.204.37) (Remote host closed the connection)
[03:05:33] <maerwald[m]> Simple line parsing is slow even in attoparsec
[03:05:33] <maerwald[m]> https://github.com/hasufell/parselines/blob/master/app/Main.hs
[03:05:55] <maerwald[m]> Someone tweaked the streamly code to make it almost as fast as the bytestring variant afair, but I don't have the code
[03:07:41] <maerwald[m]> streamly is lacking partial parsers where you can reset to some position in the chunked input array. That would allow to combine memchr based primitives I believe 
[03:08:24] <maerwald[m]> There are some non-idiomatic workarounds of course, but that's hairv
[03:08:47] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 264 seconds)
[03:08:55] <dsal> I find it strange that Aeson returns a `Result` type that looks just like `Either String` but doesn't offer any conversions.  I wonder how many codebases convert that to `Either String` or `Maybe`
[03:11:56] <monochrom> But I would use eitherDecode which gives an Either.
[03:12:15] <monochrom> I don't think I ever needed to touch Result.
[03:12:57] <maerwald[m]> Maybe it has interesting instances?
[03:15:37] <janus> how do i find the minimum calculated using a custom function, but with the ability to recover the original item?
[03:16:36] <janus> i was thinking to make a newtype and have one item be 'Min a' and the other be 'a' but feel like i am reinventing the wheel
[03:17:03] <monochrom> Something about ArgMin or Arg.
[03:17:43] <monochrom> in Data.Semigroup
[03:18:45] <janus> oooh perfect!
[03:18:49] <monochrom> :)
[03:23:32] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 268 seconds)
[03:23:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[03:23:43] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 250 seconds)
[03:23:49] *** Joins: zebrag (~chris@user/zebrag)
[03:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:25:57] <dsal> If you use fromJSON, you get a Result.  It just seems odd to have a custom type for that.  I don't know why it'd *need* to be less powerful.
[03:27:14] <dsal> It might have something interesting.  I'm looking at a piece of code that converts it to a `Maybe` and wonder how often that function is written.
[03:27:37] <monochrom> But I don't use fromJSON. I use eitherDecode.
[03:28:29] <monochrom> I bet the vibe is "Result is internal and/or if you bypass part of normal aeson workflow".
[03:28:39] <dsal> Sure, those just do different things.  This codebase I'm using has three different uses of fromJSON
[03:29:00] <dsal> Making it slightly more annoying, I guess...
[03:29:03] <Franciman> thanks maerwald[m] awesome
[03:30:30] *** Quits: emf (~emf@2620:10d:c090:400::5:6b1) (Quit: emf)
[03:31:14] <dsal> There's also ifromJSON that returns an IResult in case you want more letters in your code.
[03:31:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:33:00] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:34:01] *** Joins: jinsun___ (~quassel@user/jinsun)
[03:34:45] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:35:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[03:36:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:38:20] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[03:38:43] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[03:48:15] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:49:21] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[03:55:14] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:56:22] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[03:57:18] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:58:00] *** Joins: johnjay (~pi@192.142.100.50)
[03:58:47] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:28] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[04:05:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[04:07:05] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[04:08:17] *** Joins: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[04:08:29] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[04:09:06] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[04:14:06] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[04:14:07] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:15:26] *** jinsun___ is now known as jinsun
[04:18:09] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Client Quit)
[04:18:33] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:18:36] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Client Quit)
[04:18:53] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[04:19:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:19:38] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[04:19:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:20:38] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[04:20:54] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:22:11] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 245 seconds)
[04:23:56] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[04:24:12] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:25:56] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[04:26:12] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:26:43] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[04:26:59] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:30:59] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[04:31:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 245 seconds)
[04:32:00] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 268 seconds)
[04:33:22] *** Quits: falafel__ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Remote host closed the connection)
[04:33:38] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[04:33:52] *** Quits: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[04:33:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:33:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:33:59] *** Joins: wroathe (~wroathe@user/wroathe)
[04:35:00] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[04:35:16] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:35:33] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[04:35:51] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Client Quit)
[04:35:57] *** Parts: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Leaving)
[04:36:07] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[04:37:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:38:01] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 245 seconds)
[04:47:18] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[04:49:03] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[04:49:18] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[04:50:17] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:efbd:f13b:39e3:ec30)
[04:51:43] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[04:52:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:53:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:53:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[04:58:30] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[04:58:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:58:55] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[05:02:08] *** Quits: DNH (~DNH@8.44.0.72) (Quit: Textual IRC Client: www.textualapp.com)
[05:14:54] *** Joins: jbox (~atlas@2600:1700:2196:2060:2906:6b16:da43:7be2)
[05:15:01] *** Quits: jbox (~atlas@2600:1700:2196:2060:2906:6b16:da43:7be2) (Changing host)
[05:15:01] *** Joins: jbox (~atlas@user/jbox)
[05:15:42] *** Quits: jbox (~atlas@user/jbox) (Client Quit)
[05:15:59] *** Joins: jbox (~jbox@user/jbox)
[05:18:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:19:52] *** Quits: mmhat (~mmh@55d4bb38.access.ecotel.net) (Quit: WeeChat 3.3)
[05:21:14] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[05:21:34] <amesgen[m]> Franciman: Another very new lib for extremely high performance parsing is https://github.com/AndrasKovacs/flatparse
[05:21:44] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[05:25:05] *** Joins: emf (~emf@63.64.162.234)
[05:26:48] *** Joins: notzmv (~zmv@user/notzmv)
[05:27:09] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[05:29:57] *** Quits: emf (~emf@63.64.162.234) (Ping timeout: 268 seconds)
[05:31:07] *** Joins: emf (~emf@2620:10d:c090:400::5:3d2a)
[05:32:41] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:39:05] <sm> > On microbenchmarks, flatparse is around 10 times faster than attoparsec or megaparsec. On larger examples with heavier use of source positions and spans and/or indentation parsing, the performance difference grows to 20-30 times. Compile times and exectuable sizes are also significantly better with flatparse than with megaparsec or attoparsec
[05:39:07] <lambdabot>  <hint>:1:19: error: parse error on input ‚Äò,‚Äô
[05:41:19] *** Quits: emf (~emf@2620:10d:c090:400::5:3d2a) (Quit: emf)
[05:41:43] <SeungheonOh> how do they accomplish a significantly better performance?
[05:41:50] <SeungheonOh> do they use C ffi?
[05:42:08] <c_wraith> you don't need to that.
[05:42:16] <c_wraith> GHC gives you plenty of low-level tools
[05:42:27] <sm> the readme tells
[05:43:23] <SeungheonOh> ByteString?
[05:43:44] <SeungheonOh> and GHC Primops
[05:44:13] <davean> dsal: You don't even need to write it - its Foldable
[05:44:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:46:06] <jbox> I wish the haskell ecosystem was more modern
[05:46:19] <jbox> I absolutely adore Haskell as a language but that's the only good thing about it imo
[05:46:39] <SeungheonOh> why do you think haskell tooling is not modern?
[05:47:00] <jbox> it's just a mess in my experience.
[05:47:19] <jbox> for example, why does cabal need its own language? can't we just use toml or something?
[05:47:52] <sclv> toml is not expressive enough
[05:47:53] <davean> cabal is a mess, but if you tried to encode what it does in toml it would be a mess - how do you plan to condititionals for example?
[05:48:08] <sclv> also cabal format predates toml or json for that matter
[05:48:15] <SeungheonOh> stack is more refined
[05:48:20] <sclv> if it used ‚Äúthe standard‚Äù it would have been xml
[05:48:23] <davean> people do cram things into generic formats but they just never actually work
[05:48:31] * jbox hisses at xml
[05:48:43] <sclv> i just talked to cargo devs this weekend who lamented the problems with toml
[05:48:51] <jbox> you make a good point davean, I don't know.
[05:48:55] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:49:11] <jbox> sclv: can you link me the conversation? That sounds like something I'd be interested in
[05:49:20] <davean> jbox: talk to kubnernets people about the security issues and random API errors from them using yaml :)
[05:49:24] <sclv> i literally talked to them
[05:49:31] <SeungheonOh> Golang uses their own unliterate formats. Cabal formats looks modern enough
[05:49:44] *** Quits: alx741 (~alx741@181.196.68.187) (Quit: alx741)
[05:49:47] <davean> sclv: yes, but there is a proper citation format for a discusssion
[05:49:52] <sclv> like with spoken voices
[05:50:25] <davean> sclv: yes, you can cite that though :)
[05:50:29] <jbox> davean: I wholeheartedly believe yaml is the spawn of satan
[05:51:14] <davean> sclv: you give the name, list it as "Personal Interview" and give the date
[05:51:46] <sclv> a common package description format between multiple languages would be great. as is, the cabal format is better than lots of alternatives and even with others
[05:52:13] <jbox> the solution is lisp, of course
[05:52:27] <sm> for a refreshing change, I submit... https://treenotation.org & https://treebase.treenotation.org
[05:52:29] <sclv> python and npm are disasters, which require executing arbitrary code to even discover what is in a package manifest
[05:52:33] <davean> Hum, yah I'd support configuring out packages in lisp, at least it wouldn't be cabal!
[05:52:53] <davean> sclv: neither of those made me deal with cabal's format though :-p
[05:52:53] <sm> it's like s-exprs, with indentation instead of parentheses
[05:53:09] <monochrom> Unpopular opinion: cabal is not a mess.
[05:53:34] <sclv> from talking to those maintainers, arbitrary code has been a terrible choice they can‚Äôt dig themselves out of
[05:53:34] <monochrom> Unpopular opinion: s/modern/hype, fad/
[05:54:14] <sclv> this was all at packaging-con btw, if you want a cite, but it was unrecorded ‚Äúhallway track‚Äù
[05:54:45] <sclv> Xml is like s exprs but with angle brackets instead of parens :-p
[05:55:07] <davean> sclv: s-exprs are single-level, xml is trilevel
[05:55:15] <monochrom> I don't know how to map xml attributes to s-expressions, honestly.
[05:55:21] <davean> you can't
[05:55:35] <sclv> Very Carefully!!!
[05:55:37] <davean> not in general
[05:55:41] <jbox> sm: this Tree Notation thing looks too ambitious and broad in scope
[05:55:54] <monochrom> I like s-expressions, but please don't pretend every fad can be shoehorned into it.
[05:56:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:56:01] <jbox> davean: what do you mean by single- and tri-level?
[05:56:02] <davean> jbox: it also says things like "no syntax" and then discusses its syntax
[05:56:15] <sm> I agree, but I think there's something good there
[05:56:18] <davean> jbox: seperate denoted namespaces
[05:56:35] <davean> jbox: xml has different meanings for node names, attributes, etc
[05:57:11] <jbox> yeah, at first the claims with "no syntax" paired with the drawings made me think it was some kind of joke
[05:58:42] <davean> I don't trust anything that starts with outright lies
[05:59:19] <sclv> well if it starts with outright lies it has nowhere to go but up!
[05:59:40] <monochrom> @quote monochrom kripke
[05:59:41] <lambdabot> monochrom says: There are truths, damn truths, and Kripke structures.
[05:59:46] <monochrom> :)
[06:05:14] <jbox> while we're on the topic, what's the best information-rich document format?
[06:05:32] <jbox> honestly I'd say xml, as much as I hate it
[06:06:12] <jbox> I was just thinking of how nice it would be to have a repository of documentation for all sorts of things, in a standardized format, possibly as literate programming
[06:09:39] <monochrom> I don't know what "best" should mean. But lately I have switched from xhtml to pandoc's markdown and become much happier.
[06:09:51] *** Joins: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[06:13:44] *** Quits: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:18:04] <dsal> This is disappointing:
[06:18:08] <dsal> listToMaybe :: [a] -> Maybe a
[06:18:08] <dsal> listToMaybe = foldr (const . Just) Nothing
[06:20:56] *** Quits: falafel__ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 245 seconds)
[06:21:53] <monochrom> That's a bit of an overkill, using foldr for just 2 cases :)
[06:22:12] <monochrom> Someone was trying to be cute heh
[06:24:23] *** Quits: xff0x (~xff0x@2001:1a81:5251:b200:1b67:fb84:b521:2e46) (Ping timeout: 264 seconds)
[06:25:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 264 seconds)
[06:26:09] <jbox> monochrom: I love pandoc markdown!
[06:26:09] *** Joins: xff0x (~xff0x@2001:1a81:526d:df00:a345:8523:ad73:f70)
[06:26:23] <monochrom> :)
[06:26:56] <jbox> sorry, I meant to clarify and never did: by "best", I mean "stores as much data as possible and encompasses all forseeable use-cases"
[06:27:31] <jbox> e.g. with my documentation database idea above, I'd want hyperlinks and all kind of metadata. Perhaps attributes, etc. Markdown wouldn't give me anything near what I would want
[06:27:40] <jbox> I'm thinking LSP-like documentation interaction
[06:28:43] <dsal> monochrom: It'd be super great if weren't limited to list.  Or yeah, just do the two cases.
[06:29:02] <jbox> also, can someone explain `listToMaybe = foldr (const . Just) Nothing` to me? I don't understand the `(const . Just)` part :)
[06:29:26] <jbox> oh yeah and while I have everyone's attention can someone please for the love of god explain to me how a List is a monad?
[06:29:44] <jollygood2> const . Just is the same as \_ x -> Just x
[06:29:47] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 264 seconds)
[06:29:54] <dsal> Other way around.
[06:29:57] <jollygood2> yeah sorry
[06:30:00] <dsal> @pl \x _ -> pure x
[06:30:01] <lambdabot> const . pure
[06:30:48] <dsal> Short story:  If there's anything at all in the list, it returns the first element and ignores the rest.
[06:31:00] <jollygood2> I'm having a lot of fun using this image processing library in haskell https://hackage.haskell.org/package/hip-1.5.6.0/docs/Graphics-Image.html
[06:31:02] <dsal> (Because it ignores the accumulator, therefore laziness wins)
[06:31:46] <jollygood2> mergeImages images = foldl1 leftToRight (intersperse border images)  where makeImage (31, 10) (const 1)
[06:32:01] <jollygood2> this merges a list of images and adds an all-white border between each one
[06:37:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[06:39:59] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:efbd:f13b:39e3:ec30) (Quit: SeungheonOh)
[06:42:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:45:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:50:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:53:19] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[06:54:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:54:27] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[06:54:52] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:56:46] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[06:57:41] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:00:04] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[07:01:26] <jollygood2> am I finally going insane for thinking this isn't such a bad idea? :).  https://paste.tomsmeding.com/xE6Ou9fh
[07:03:27] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:03:35] <monochrom> Heh, it is worth the while if you use it like at 10 places in your code.
[07:03:37] *** Joins: deadmarshal (~deadmarsh@95.38.228.182)
[07:08:37] *** Quits: deadmarshal (~deadmarsh@95.38.228.182) (Ping timeout: 268 seconds)
[07:12:20] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:17:45] <jbox> dsal: what does the pure mean there?
[07:18:10] <dsal> jbox: It can only mean `Just` here.  `pure` is just the first thing that came to mind.
[07:18:28] <jbox> ohh, I see. Thanks :)
[07:18:29] <dsal> > pure 1 :: Maybe Int
[07:18:30] <lambdabot>  Just 1
[07:18:31] <jbox> dsal++
[07:19:01] <yin> any reason why take is not :: Foldable f => f a -> [a] ?
[07:19:08] <jbox> is there documentation for the bot somewhere? I don't want to flood the channel trying to get the usage info lol
[07:19:09] *** Joins: dajoer (~david@user/gvx)
[07:19:21] *** Joins: yauhsien (~yauhsien@49.216.238.61)
[07:19:38] <yin> take = foldl1 const
[07:20:01] <dsal> :t foldl1 const
[07:20:02] <lambdabot> Foldable t => t b -> b
[07:20:03] <yin> oops nevermind that
[07:20:24] <yin> i meant head
[07:20:26] <dsal> Deciding the result should be a list is kind of limiting.
[07:20:52] <dsal> `head` is generally a bad idea if it does anything other than `foldr (const . Just) Nothing`
[07:21:00] *** jbox is now known as reputation
[07:21:19] <yin> that's why i was confusing it with take
[07:21:24] *** reputation is now known as jbox
[07:21:30] <yin> i use (take 1) instead
[07:22:32] <yin> this was, as they call it, a brain fart
[07:22:32] *** Quits: yauhsien (~yauhsien@49.216.238.61) (Read error: Connection reset by peer)
[07:22:40] <dsal> take 1 is a different shape sort of, though it's the same cardinality as `Maybe a`
[07:22:54] <jbox> found it: https://wiki.haskell.org/Lambdabot
[07:22:57] <dsal> I mean, in that it gives you either 0 things or 1 thing.
[07:23:07] <yin> dsal: yes
[07:23:11] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[07:23:29] <dsal> > (listToMaybe [0..], listToMaybe [])
[07:23:31] <lambdabot>  (Just 0,Nothing)
[07:24:11] *** jbox is now known as repbot
[07:24:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:24:41] *** repbot is now known as jbox
[07:25:22] <jbox> darcs is dead, right?
[07:26:04] *** Joins: Guest|1 (~Guest|1@bp.ptr231.ptrcloud.net)
[07:29:59] *** Quits: td_ (~td@94.134.91.243) (Ping timeout: 256 seconds)
[07:30:46] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:31:29] *** Joins: td_ (~td@muedsl-82-207-238-039.citykom.de)
[07:35:11] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[07:37:12] *** Quits: jbox (~jbox@user/jbox) (Quit: Leaving)
[07:40:23] *** Joins: jbox (~jbox@user/jbox)
[07:41:43] *** Quits: jbox (~jbox@user/jbox) (Client Quit)
[07:41:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[07:42:13] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:43:09] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 268 seconds)
[07:46:52] *** Joins: jbox (~jbox@user/jbox)
[07:47:13] *** Quits: Guest|1 (~Guest|1@bp.ptr231.ptrcloud.net) (Quit: Connection closed)
[07:48:33] *** Joins: atlas (~jbox@user/jbox)
[07:48:56] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Read error: Connection reset by peer)
[07:49:13] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:52:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 260 seconds)
[07:53:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[07:53:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:53:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:03:22] *** Joins: jinsun__ (~quassel@user/jinsun)
[08:04:35] *** Quits: jbox (~jbox@user/jbox) (Quit: Leaving)
[08:04:44] *** Quits: atlas (~jbox@user/jbox) (Quit: Leaving)
[08:04:44] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[08:04:48] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[08:04:51] <dsal> I think I still use it now and then.
[08:04:57] *** Joins: fvr (uid503686@uxbridge.irccloud.com)
[08:05:01] *** Joins: jbox (~jbox@user/jbox)
[08:05:10] *** Quits: jbox (~jbox@user/jbox) (Remote host closed the connection)
[08:05:11] *** Joins: atlas (~jbox@user/jbox)
[08:08:20] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[08:10:11] *** Joins: img (~img@user/img)
[08:10:13] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[08:11:57] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:13:31] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:17:33] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:18:43] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:22:37] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:22:48] *** Joins: wei2912 (~wei2912@138.75.71.147)
[08:23:54] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:26:17] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:26:39] *** Joins: Guest|26 (~Guest|26@c-73-153-68-22.hsd1.co.comcast.net)
[08:27:36] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[08:28:00] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:28:06] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[08:28:12] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[08:29:05] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:29:15] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Quit: Going elsewhere)
[08:30:15] *** Quits: Guest|26 (~Guest|26@c-73-153-68-22.hsd1.co.comcast.net) (Client Quit)
[08:32:00] *** Joins: somnolent (~somnolent@c-73-153-68-22.hsd1.co.comcast.net)
[08:32:36] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[08:33:08] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:33:18] <somnolent> Hi, I'm trying to install ghcup and it fails with a cabal error
[08:33:26] <somnolent> cabal: error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory
[08:33:26] <somnolent> "cabal new-update" failed!
[08:33:35] <somnolent> Any idea how I should start debugging this?
[08:34:17] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:34:47] <sclv> what os
[08:36:26] <somnolent> pop-os
[08:36:33] <somnolent> very nearly ubuntu
[08:38:52] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:39:28] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:40:03] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:43:29] <sclv> i suspect you need to install libffi or libffi-dev?
[08:43:50] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:44:02] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[08:44:14] <sclv> the cabal binary expects some system libs to be around. ghcup tries to install them for you but only on distros it has a clue about
[08:44:39] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:45:33] <somnolent> okay, apt-cache search libffi shows libffi-dev, libffi7, and a few others
[08:45:41] <somnolent> is there any way to know which I need?
[08:45:45] <somnolent> libffi7?
[08:45:53] <sclv> i suspect that
[08:46:14] <sclv> ghcup source will list what it usually looks for if you skim it
[08:48:12] <somnolent> that fixed it, thanks!
[08:48:24] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:49:00] *** Joins: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net)
[08:49:51] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:53:18] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:55:02] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[08:55:58] *** Joins: mvk (~mvk@2607:fea8:5cc3:e900::df92)
[08:59:39] *** Joins: drdo (~drdo@roach0.drdo.eu)
[08:59:59] *** Quits: ishutin_ (~ishutin@92-249-179-61.pool.digikabel.hu) (Ping timeout: 250 seconds)
[09:00:13] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:01:50] *** Joins: ishutin (~ishutin@84-236-40-131.pool.digikabel.hu)
[09:03:59] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:05:24] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:08:21] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:10:00] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:10:36] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:14:30] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:15:47] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:19:02] *** Quits: somnolent (~somnolent@c-73-153-68-22.hsd1.co.comcast.net) (Quit: Connection closed)
[09:19:54] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:20:44] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:20:58] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:23:58] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:26:10] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:29:27] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:31:02] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (Ping timeout: 240 seconds)
[09:31:13] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[09:31:21] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:35:11] *** Quits: bgamari (~bgamari@64.223.227.106) (Ping timeout: 264 seconds)
[09:35:12] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:36:19] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 268 seconds)
[09:36:32] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:37:06] *** Joins: bgamari (~bgamari@70.16.103.161)
[09:37:15] *** Joins: deadmarshal (~deadmarsh@95.38.228.182)
[09:37:20] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:38:03] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:38:03] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:38:03] *** Joins: wroathe (~wroathe@user/wroathe)
[09:38:27] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[09:40:50] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:40:50] *** Quits: drdo (~drdo@roach0.drdo.eu) (Client Quit)
[09:41:09] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:42:15] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[09:43:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:44:16] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:45:37] *** Joins: img (~img@user/img)
[09:45:45] *** Joins: hololeap (~hololeap@user/hololeap)
[09:46:16] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:49:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[09:51:59] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[09:52:46] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[09:52:49] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[09:54:04] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[09:55:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[09:59:28] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:59:29] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:59:29] *** Joins: wroathe (~wroathe@user/wroathe)
[10:02:54] <energizer> has anybody made statistics on the most common functions used in popular packages?
[10:04:03] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[10:04:22] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Ping timeout: 268 seconds)
[10:05:25] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[10:08:35] *** Joins: mei3 (~mei@user/mei)
[10:08:42] *** mei3 is now known as mei
[10:11:51] *** Joins: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[10:15:23] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[10:17:44] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[10:17:47] *** Quits: mvk (~mvk@2607:fea8:5cc3:e900::df92) (Ping timeout: 264 seconds)
[10:19:35] *** atlas is now known as jbox
[10:26:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[10:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:36:33] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[10:37:14] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:40:57] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:45:24] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[10:45:38] *** Quits: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 260 seconds)
[10:45:54] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:45:54] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[10:45:54] *** Joins: wroathe (~wroathe@user/wroathe)
[10:46:34] *** Joins: retroid_ (~retro@176.255.22.26)
[10:49:32] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[10:50:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[10:54:23] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
[10:56:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:00:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[11:01:20] *** Joins: mbuf (~Shakthi@136.185.92.113)
[11:05:10] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:05:58] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[11:11:20] *** Joins: jmorris (uid433911@hampstead.irccloud.com)
[11:14:23] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:20:43] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[11:24:42] <sm> jbox: it's not dead. It's restin'!
[11:25:35] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[11:25:35] *** Quits: xff0x (~xff0x@2001:1a81:526d:df00:a345:8523:ad73:f70) (Ping timeout: 264 seconds)
[11:26:21] *** Joins: xff0x (~xff0x@2001:1a81:526d:df00:9ede:d6:8225:5301)
[11:33:58] <sm> what's a good way to group [(a,b)] into [(a,[b])] ?
[11:35:05] <sm> extra:groupSort
[11:37:30] <sm> extra, that's the package I forgot
[11:37:54] <sm> everything useful lives there
[11:39:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.182) (Ping timeout: 264 seconds)
[11:42:43] *** Quits: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se) (Ping timeout: 256 seconds)
[11:43:26] *** Joins: rtsn (~nstr@c-c7fe225c.07-59-7570703.bbcust.telenor.se)
[11:45:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:52:01] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:52:24] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:52:52] *** Joins: Everything (~Everythin@37.115.210.35)
[11:52:56] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[11:58:43] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[12:01:31] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[12:05:42] *** Joins: Pickchea (~private@user/pickchea)
[12:06:58] *** Joins: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de)
[12:10:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:c075:f6f7:f2c7:7314) (Remote host closed the connection)
[12:18:11] *** Quits: xff0x (~xff0x@2001:1a81:526d:df00:9ede:d6:8225:5301) (Ping timeout: 268 seconds)
[12:18:33] *** Joins: xff0x (~xff0x@2001:1a81:526d:df00:e60d:1bd2:2f9f:7e19)
[12:19:53] *** jinsun__ is now known as jinusun
[12:19:57] *** jinusun is now known as jinsun
[12:21:39] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[12:22:39] *** Joins: deadmarshal (~deadmarsh@95.38.228.182)
[12:23:23] *** Quits: forell (~forell@user/forell) (Quit: ZNC - https://znc.in)
[12:24:11] *** Joins: forell (~forell@user/forell)
[12:24:41] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[12:24:42] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[12:24:42] *** Joins: tinwood (~tinwood@canonical/tinwood)
[12:42:16] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:42:55] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[12:44:30] *** Quits: ProofTechnique (sid79547@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:44:30] *** Quits: hamishmack (sid389057@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[12:44:47] *** Quits: JSharp (sid4580@lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:45:04] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 256 seconds)
[12:45:19] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:45:52] *** Joins: JSharp (sid4580@lymington.irccloud.com)
[12:46:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[12:46:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[12:46:12] *** Joins: wroathe (~wroathe@user/wroathe)
[12:46:35] *** Quits: hendi (sid489601@lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:46:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:46:52] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:47:04] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** allbery_b is now known as geekosaur
[12:47:42] *** Joins: ProofTechnique (sid79547@ilkley.irccloud.com)
[12:48:07] *** Joins: hamishmack (sid389057@hampstead.irccloud.com)
[12:48:53] *** Joins: hendi (sid489601@lymington.irccloud.com)
[12:48:53] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[12:48:59] *** Quits: ephemient (uid407513@lymington.irccloud.com) (Ping timeout: 264 seconds)
[12:48:59] *** Quits: hongminhee (sid295@tinside.irccloud.com) (Ping timeout: 264 seconds)
[12:49:02] *** Quits: S11001001 (sid42510@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:49:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:49:32] *** Quits: jakesyl_ (sid56879@hampstead.irccloud.com) (Max SendQ exceeded)
[12:49:35] *** Quits: carter (sid14827@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:35] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:49:35] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:49:35] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: SethTisue__ (sid14912@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:49:36] *** Quits: degraafk (sid71464@lymington.irccloud.com) (Ping timeout: 256 seconds)
[12:49:46] *** Joins: SethTisue__ (sid14912@ilkley.irccloud.com)
[12:49:50] *** Joins: Pent (sid313808@lymington.irccloud.com)
[12:50:09] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[12:50:11] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:50:13] *** Joins: degraafk (sid71464@lymington.irccloud.com)
[12:50:25] *** Joins: S11001001 (sid42510@ilkley.irccloud.com)
[12:50:27] *** Joins: jakesyl_ (sid56879@hampstead.irccloud.com)
[12:50:42] *** Joins: obviyus (sid415299@user/obviyus)
[12:51:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[12:51:20] *** Joins: carter (sid14827@helmsley.irccloud.com)
[12:51:39] *** Joins: ephemient (uid407513@lymington.irccloud.com)
[12:51:52] *** Quits: amir (sid22336@user/amir) (Ping timeout: 256 seconds)
[12:52:03] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:53:29] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[12:53:47] *** Quits: parseval (sid239098@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[12:53:55] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[12:54:23] *** Quits: fvr (uid503686@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[12:54:44] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[12:55:29] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[12:55:36] *** Joins: amir (sid22336@user/amir)
[12:56:24] *** Quits: ehamberg (sid18208@hampstead.irccloud.com) (Ping timeout: 256 seconds)
[12:56:24] *** Quits: gaze___ (sid387101@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[12:56:35] *** Joins: hongminhee (sid295@tinside.irccloud.com)
[12:56:47] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 264 seconds)
[12:56:58] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[12:56:58] *** Quits: rtpg (sid443069@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[12:57:07] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[12:57:09] *** Joins: bjs (sid190364@user/bjs)
[12:57:24] *** Joins: fvr (uid503686@uxbridge.irccloud.com)
[12:57:32] *** Joins: parseval (sid239098@helmsley.irccloud.com)
[12:58:11] *** Joins: obviyus (sid415299@user/obviyus)
[12:58:32] <Franciman> amesgen[m]: thanks
[12:59:32] *** Joins: rtpg (sid443069@ilkley.irccloud.com)
[12:59:36] *** Joins: gaze___ (sid387101@helmsley.irccloud.com)
[12:59:38] *** Joins: bw (sid2730@user/betawaffle)
[13:09:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.182) (Ping timeout: 264 seconds)
[13:10:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323)
[13:15:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323) (Ping timeout: 245 seconds)
[13:21:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[13:24:25] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:25:18] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:25:27] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[13:26:29] *** Joins: aliosablack (~chomwitt@ppp-94-67-200-81.home.otenet.gr)
[13:26:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:28:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[13:32:15] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[13:32:50] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:33:28] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[13:34:17] *** Joins: mmhat (~mmh@55d46755.access.ecotel.net)
[13:34:32] *** Quits: etrepum (sid763@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:35:36] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[13:36:18] <sm> what operation transforms Just n to Just (n+1) and Nothing to Just 1 ?
[13:37:31] <sm> map (maybe 1 (+1))
[13:37:40] <sm> thank you rubber duck
[13:38:03] *** Joins: deadmarshal (~deadmarsh@95.38.228.182)
[13:38:08] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[13:38:24] <Hecate> yer welcome
[13:38:30] <Hecate> how are you doing sm btw?
[13:39:04] <sm> good thanks Hecate, other than coding a bit too late. And yourself ?
[13:39:16] <f-a> wait
[13:39:36] <f-a> maybe 1 (+1) value    works too, withoutu the map, am I wrong?
[13:40:11] <f-a> > maybe 1 (+1) Nothing
[13:40:12] <lambdabot>  1
[13:40:15] <f-a> > maybe 1 (+1) (Just 8)
[13:40:16] <lambdabot>  9
[13:40:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:41:44] <int-e> f-a: the map was just context leaking into the IRC channel I think, not part of the answer
[13:42:08] <f-a> ah of course
[13:42:29] <Hecate> sm: starting to wake up, got a little html encoding issue with lucid & servant
[13:43:19] <unit73e> f-a, you're not wrong. that's exactly what sm wants
[13:43:38] <f-a> my question: I am writing a small game library
[13:44:00] <f-a> and I would like a ¬´turn this flag on to display current fps¬ª
[13:44:22] <f-a> I know ¬´flag¬ª in cabal files
[13:44:25] <f-a> but:
[13:44:30] *** Quits: fvr (uid503686@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:44:47] <f-a> ‚Ä¢ can I conditionally compile my library based on these flags?; and
[13:44:54] <unit73e> hum... but that's for users correct? forcing users to use cabal... not a good practice
[13:45:07] <f-a> ‚Ä¢ how will the end user of the library be able pass those flags?
[13:45:13] <unit73e> he won't
[13:45:17] <f-a> yeah it is for the user unit73e 
[13:45:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[13:45:26] <unit73e> that's engine logic
[13:45:29] <f-a> I am of course open to suggestions
[13:45:31] * sm is only loosely in control of this problem. Here is more of what I needed:
[13:45:32] * sm ```haskell
[13:45:32] * sm -- Crash sites within a row, and how many times at each one.
[13:45:32] * sm type RowCrashes = M.Map CaveCol Int
[13:45:32] * sm -- Add a new crash site to a RowCrashes.
[13:45:32] * sm rowCrashesAdd col rowcrashes = M.alter (maybe (Just 1) (Just . (+1))) col rowcrashes
[13:45:32] * sm ```
[13:45:47] <unit73e> you should just use an actual flag, in code
[13:46:06] <unit73e> in engines there's usually a key for that
[13:46:12] <sm> I wouldn't use cabal flags f-a, they aren't worth the added complexity
[13:46:31] <sm> and build time
[13:47:00] <f-a> sm: you would go for  Bool -> ‚Ä¶  like unit73e then?
[13:47:16] <unit73e> users usually want to enable/disable fps while the game is running
[13:47:16] <sm> a runtime flag, certainly
[13:47:25] <unit73e> not at start
[13:47:35] <unit73e> like F12 shows fps
[13:47:37] <unit73e> something like that
[13:47:49] <unit73e> or an option in the meny
[13:47:51] <unit73e> or an option in the menu
[13:48:00] <sm> I wouldn't mind specifying it at start of game, but changing on the fly while game is running is ideal of course
[13:48:11] <f-a> mhhh I see, thanks for the feedback
[13:48:26] <sm> but why ? Isn't it something you can always provide, and game can use it or not ?
[13:48:58] <f-a> I could provide it in the `draw` function :: s -> FPS (Int) -> Plane
[13:48:59] *** Quits: stefan-_ (~cri@42dots.de) (Ping timeout: 264 seconds)
[13:49:16] <unit73e> enabling/disabling show fps in runtime is a convention. if you do that as an cmd option gamers will be confused why it's only available as an option.
[13:49:26] <unit73e> conventions are important
[13:49:48] <unit73e> yeah you should have some sort of state
[13:51:30] <f-a> https://hackage.haskell.org/package/ansi-terminal-game-1.5.0.0/docs/Terminal-Game.html#t:Game these are the current logic/draw function sigs, unit73e , I guess adding it to gDrawFunction is a possibility and then if the user does not need it, they will ignore it
[13:52:10] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[13:52:50] *** Joins: stefan-_ (~cri@42dots.de)
[13:52:55] <unit73e> you can infer the fps with ticks per second
[13:53:06] <f-a> you cannot as now
[13:53:30] <f-a> Ticks are the same even if frames (drawing frames) are dropped
[13:53:40] <unit73e> I see
[13:53:46] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:53:51] <f-a> (so the game runs at the same speed on every machine)
[13:54:14] <unit73e> you might want other options so perhaps it would be included in a record or data for all runtime options
[13:54:33] <unit73e> and your loop would cycle with those options
[13:54:52] <unit73e> one being show fps
[13:55:56] <unit73e> that would also allow you to have terminal options using the same runtime options structure
[13:56:56] <unit73e> that would be your options state
[13:57:23] *** Quits: deadmarshal (~deadmarsh@95.38.228.182) (Ping timeout: 264 seconds)
[13:58:14] <unit73e> I wouldn't do options with something generic with a Map but I bet someone would think that way :P
[13:59:37] <unit73e> speaking of game engines, I added one more example here: https://gitlab.com/unit73e/sdl2-examples
[13:59:47] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:01:22] <unit73e> it's about texture clipping, for animations, it's not exactly how I would like yet but the idea is to pack all your sprites in N^2 textures, make a JSON with the packer, and load animations with it. I need to make a better data structure though.
[14:01:36] <f-a> do they add material to lazyfoo‚Äôs ones?
[14:01:47] <f-a> if so you could see if they get merged 
[14:01:47] <unit73e> I don't think so
[14:01:58] <unit73e> lazyfoo examples are very basic
[14:02:16] <f-a> they are
[14:02:19] <unit73e> they're not fit for proper game development though the examples do help
[14:02:40] <f-a> and it is tricky to understand why they are wrong
[14:02:47] <unit73e> yeah
[14:02:52] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:04:17] <unit73e> one example is textures should always be N^2 because VRAM is in N^2 blocks so it's more efficient to have images with that size. lazyfoo uses several images instead. but the part that really bugged me was movement.
[14:04:34] <unit73e> it's not smooth at all. what lazyfoo did was press arrows and the player moves N pixels
[14:04:39] <unit73e> once per keystroke
[14:06:47] <unit73e> he does end up explaning scrolling but I was not impressed. also lazyfoo doesn't want ports in other languages and that was the deal breaker.
[14:07:42] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:09:48] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[14:10:31] *** Joins: MiguelNegrao (~MiguelNeg@194.210.216.223)
[14:11:48] <MiguelNegrao> Hi all. Is there a package providing a variable size tuple backed by a type list ? Something like (a,b,c) ~ Tuple '[a,b,c]
[14:12:13] <unit73e> is that your real name?
[14:12:23] <MiguelNegrao> yes
[14:12:33] <unit73e> lol just curious
[14:12:36] <MiguelNegrao> why ?
[14:12:44] <unit73e> well it's somewhat funny
[14:13:09] <unit73e> but don't worry mine is funny too because of tooth paste, couto is my last name
[14:13:16] <MiguelNegrao> For Brazilians I guess it would be
[14:13:25] <MiguelNegrao> In Portugal it is pretty normal
[14:13:34] <unit73e> I'm portuguese
[14:13:44] <unit73e> and yeah I guess
[14:14:05] <unit73e> just to be clear
[14:14:09] <MiguelNegrao> I think it comes from italian. https://en.wikipedia.org/wiki/Negroni_(surname)
[14:14:16] <unit73e> you want to transform a list to a tuple?
[14:14:23] <unit73e> of any size?
[14:14:57] <MiguelNegrao> Not exactly, a list would have to have all elements of same type
[14:15:07] <MiguelNegrao> kind of like an HList but using normal tuples
[14:15:15] *** Quits: aliosablack (~chomwitt@ppp-94-67-200-81.home.otenet.gr) (Quit: Leaving)
[14:15:24] <unit73e> why not just use an HList?
[14:16:36] * sm found this needful:
[14:16:36] * sm ```haskell
[14:16:36] * sm insertOrUpdate :: Ord k => v -> (v -> v) -> k -> M.Map k v -> M.Map k v
[14:16:36] * sm insertOrUpdate newval valupdatefn key = M.alter (maybe (Just newval) (Just . valupdatefn)) key
[14:16:36] * sm ```
[14:17:31] <MiguelNegrao> I guess I thought people are more familiar with tuples
[14:17:48] <MiguelNegrao> Something similar is implemented here https://hackage.haskell.org/package/vivid-0.5.1.0/docs/Vivid-SynthDef-TypesafeArgs.html
[14:17:54] <MiguelNegrao> the VarArg type
[14:18:05] <MiguelNegrao> Sorry VarList
[14:18:41] <unit73e> it's not that different. there's data.tuple.select but I would just use an HList
[14:18:58] <MiguelNegrao> Ok, thanks.
[14:19:08] <MiguelNegrao> Good to know there are other Haskelers in Portugal. :-)
[14:19:32] <unit73e> yup it's already hard enough to convince functional programming is good
[14:19:59] <MiguelNegrao> Do you use Haskell at work ?
[14:20:11] <unit73e> unfortunately no
[14:20:23] <unit73e> you probably know portugal is a java country
[14:20:25] *** Quits: mniip (mniip@libera/staff/mniip) (Quit: This page is intentionally left blank.)
[14:21:22] <unit73e> but I might take an haskell project if the opportunity arrives
[14:22:02] *** Joins: chomwitt (~chomwitt@2a02:587:dc12:3f00:12c3:7bff:fe6d:d374)
[14:24:30] *** Quits: MiguelNegrao (~MiguelNeg@194.210.216.223) (Quit: Client closed)
[14:27:45] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:27:48] *** Joins: mniip (mniip@libera/staff/mniip)
[14:30:52] *** Joins: alx741 (~alx741@181.196.68.187)
[14:38:06] *** Joins: xkuru (~xkuru@user/xkuru)
[14:43:08] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[14:45:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:47:45] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:48:22] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[14:52:58] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[14:53:55] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[14:55:44] *** Joins: FragByte (~christian@user/fragbyte)
[15:00:14] *** Joins: DNH (~DNH@8.43.122.53)
[15:00:32] *** Quits: DNH (~DNH@8.43.122.53) (Client Quit)
[15:07:54] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[15:08:43] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[15:10:07] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 256 seconds)
[15:11:55] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[15:12:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323)
[15:16:13] *** Quits: acidjnk_new (~acidjnk@p200300d0c725147020cf3de033c5d4d3.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[15:18:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323) (Ping timeout: 245 seconds)
[15:18:41] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:20:19] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:22:28] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[15:23:47] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[15:26:03] *** Joins: MiguelNegrao (~MiguelNeg@194.210.216.113)
[15:26:15] *** Quits: MiguelNegrao (~MiguelNeg@194.210.216.113) (Client Quit)
[15:32:38] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 260 seconds)
[15:36:08] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.2)
[15:37:12] *** Joins: caubert (~caubert@136.244.111.235)
[15:37:39] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[15:44:20] *** Quits: jassob1 (~jassob@h-98-128-167-112.NA.cust.bahnhof.se) (Ping timeout: 246 seconds)
[15:52:52] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[15:57:50] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[15:58:01] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[15:58:38] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Remote host closed the connection)
[15:59:14] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[16:05:57] *** Joins: __monty__ (~toonn@user/toonn)
[16:08:00] *** Joins: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de)
[16:15:37] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 268 seconds)
[16:16:02] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 260 seconds)
[16:16:15] *** Joins: _ht (~quassel@37.120.218.148)
[16:22:36] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 245 seconds)
[16:29:44] *** Joins: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de)
[16:32:37] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[16:33:13] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[16:39:03] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:39:07] *** Joins: Pickchea (~private@user/pickchea)
[16:52:00] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[16:52:20] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:53:29] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[16:53:41] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[16:55:41] *** Quits: mark___ (~a@p200300ef973db1754086f0a6a24fc4dd.dip0.t-ipconnect.de) (Quit: WeeChat 3.0.1)
[16:56:38] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[16:57:22] <Profpatsch> tryError :: forall exc a. (Exception exc) => IO a -> IO (Either Error a)
[16:57:24] <Profpatsch> tryError io = Exc.try @exc io <&> first exceptionToError
[16:57:36] <Profpatsch> GHC complains at the type application ‚Äúnot in scope: type variable exc‚Äù
[16:57:45] <Profpatsch> But I explicitely brought it into scope with the forall, no?
[16:57:55] <hpc> ScopedTypeVariables maybe?
[16:57:57] <Profpatsch> Does it need to be mentioned on the right side of => to be in scope?
[16:58:19] <Profpatsch> hpc: It asks for AllowAmbiguousTypeVAriables now
[16:58:30] <Profpatsch> Hm
[16:59:02] <Profpatsch> Ah, apparently that was a problem before TypeApplications https://stackoverflow.com/questions/45128492/what-is-allowambiguoustypes-and-why-is-it-needed-in-this-forall-example
[16:59:10] <Profpatsch> So it looks like I‚Äôm safe more or less
[16:59:20] <Profpatsch> is gonna require TypeApplications from downstream hm
[16:59:29] *** Joins: skippy (~slice@user/slice)
[16:59:30] <hpc> yeah, you just have to call tryError @Whatever do {...}
[17:01:18] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[17:02:28] <Profpatsch> that was the idea, yeah
[17:03:00] <Profpatsch> But then the code won‚Äôt compile before 8.0.1 hmm
[17:04:35] *** Quits: _ht (~quassel@37.120.218.148) (Ping timeout: 256 seconds)
[17:05:02] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[17:15:17] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323)
[17:16:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:18:27] *** Joins: jkaye (~jkaye@2601:281:8300:7530:2d7e:ffab:3b55:862f)
[17:18:29] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:18:48] <Guest42> what't the state of game developement in functional programming?
[17:19:17] <int-e> <insert state-less joke here>
[17:19:37] <jkaye> https://wiki.haskell.org/Game_Development
[17:19:41] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:d49b:b47c:7bbd:b323) (Ping timeout: 245 seconds)
[17:21:42] <f-a> Guest42: that is a large topic, any specific requirements?
[17:22:02] <f-a> gaming goes from roguelikes to VR stuff
[17:23:48] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:25:42] <f-a> also: join #haskell-game , lots of useful discussion going there
[17:27:02] *** Quits: skippy (~slice@user/slice) (Quit: cya)
[17:27:03] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:27:25] *** Joins: slice (~slice@user/slice)
[17:28:33] *** Quits: slice (~slice@user/slice) (Client Quit)
[17:39:35] <Guest42> f-a: well let's say we're talking about a 2d roguelike like Dead Cells
[17:41:09] <Guest42> how does one model the "game loop" in a pure functional way? will it perform badly compared to imperative languages?
[17:42:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:42:23] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[17:42:47] <f-a> Guest42: I would advise to start with sdl2, if you do not fancy that, shop around. A ¬´game loop¬ª can be made pure in various ways (callbacks, etc.)
[17:43:10] <f-a> for performance, use the appropriate tools (criterion, etc.) and you will be fine
[17:45:44] <f-a> game making seldom is a clean job
[17:46:09] <Franciman> it surely is not the most exciting thing around
[17:46:13] <Franciman> https://www.patreon.com/posts/58563886 it being
[17:46:56] <Franciman> as you can see this is not functional programming
[17:47:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:47:20] <Franciman> yet it seems an impacting thing
[17:47:49] *** Quits: sydddddd (~syd@cpc91646-hart11-2-0-cust432.11-3.cable.virginm.net) (Quit: Lost terminal)
[17:49:26] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 265 seconds)
[17:49:43] <Guest80> The game loop can be a function that takes the previous game-state, an event (input or timer) and creates the new state. Performance depends on the complexity of your state and the computations you do on it. Of course this can vary very much depending on your game. But for many games this shouldn't be an issue.
[17:49:58] <maerwald> Guest42: maybe check out LambdaHack
[17:50:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[17:51:09] <Guest42> Guest80: my intuition tells me that the game state will have to be copied every frame so there is the overhead of recalculating it and GC-ing it, no?
[17:51:36] <Guest42> maerwald: cool!
[17:52:43] <jkaye> Guest42, not necessarily, immutability allows for all sorts of optimizations that would not otherwise be possible
[17:53:16] <jkaye> E.g. if an immutable pure state is being replaced, the compiler can freely perform the update in place since it knows that the previous state would just be discarded anyway
[17:53:22] <Guest80> Guest42: Depends on the datastructures you use. If most of the state is static (lets say the "world") and only some dynamic objects change then the new state will refer to the same static stuff in each iteration. So static objects won't be copied/reallocated. They will reuse the same values in each iteration.
[17:53:33] <jkaye> So it's a little different than what you might expect from the imperative (C++ etc) world
[17:55:07] <Guest42> jkaye: do I have ways to explicitly make the compiler (say GHC), to "change this data structure in place" ?
[17:55:08] <Guest80> In Haskell you usually end up with a kind of "copy on write" model (if think in imperative terms).
[17:56:08] <Guest80> Guest42: You shouldn't think that way if you want to write pure functional programs.
[17:57:08] <Guest80> Of course you can... but why use Haskell when you want to mess around with mutable state? ;D
[17:59:28] <Guest42> well I imagine you can build quite nice abstractions if you get the critical parts to perform right
[17:59:49] *** Joins: max22- (~maxime@2a01cb08833598001b74a41a00edb48c.ipv6.abo.wanadoo.fr)
[18:00:00] <Guest42> LambdaHack is quite a nice place to start for me, reading their code will be a pleasure
[18:02:42] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Ping timeout))
[18:02:42] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[18:05:18] *** Quits: gawen (~gawen@user/gawen) (Quit: cya)
[18:05:31] *** Joins: zebrag (~chris@user/zebrag)
[18:05:39] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:06:39] *** Joins: gawen (~gawen@user/gawen)
[18:07:07] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:07:20] <fluxit> Guest42: If you're open to more options, I'm having a good experience writing a game using the brick library. https://samtay.github.io/posts/introduction-to-brick got me started. 
[18:07:21] <shapr> good MORNING!
[18:07:31] *** Joins: jassob1 (~jassob@h-98-128-167-112.NA.cust.bahnhof.se)
[18:07:32] *** Quits: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:09:40] *** Joins: EvanR (~evan@user/evanr)
[18:16:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830)
[18:18:22] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[18:20:06] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830) (Ping timeout: 245 seconds)
[18:21:35] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[18:22:04] *** Quits: tafa (~tafa@2a04:52c0:101:85c::1) (Quit: ZNC - https://znc.in)
[18:23:05] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[18:24:24] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[18:24:39] *** Quits: max22- (~maxime@2a01cb08833598001b74a41a00edb48c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:25:39] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[18:27:59] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Ping timeout: 264 seconds)
[18:28:58] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:35:37] *** Joins: son0p (~ff@181.136.122.143)
[18:36:59] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[18:37:52] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[18:38:28] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:39:23] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 264 seconds)
[18:40:18] *** Joins: Vajb (~Vajb@2001:999:50:707f:90e9:e423:1236:7744)
[18:41:41] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[18:42:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:42:01] *** Quits: jmorris (uid433911@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[18:44:47] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[18:49:10] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:55:03] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[18:57:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:2d7e:ffab:3b55:862f) (Ping timeout: 264 seconds)
[19:04:19] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Remote host closed the connection)
[19:08:12] *** Joins: Lycurgus (~juan@98.4.112.204)
[19:10:07] *** Quits: EvanR (~evan@user/evanr) (Ping timeout: 268 seconds)
[19:11:58] *** Quits: Vajb (~Vajb@2001:999:50:707f:90e9:e423:1236:7744) (Ping timeout: 268 seconds)
[19:12:18] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:9825:20f3:f69:55d5) (Ping timeout: 250 seconds)
[19:16:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391)
[19:17:54] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:22:51] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[19:25:56] *** Quits: xff0x (~xff0x@2001:1a81:526d:df00:e60d:1bd2:2f9f:7e19) (Ping timeout: 245 seconds)
[19:26:45] *** Joins: xff0x (~xff0x@2001:1a81:526d:df00:b864:176f:3a64:2e83)
[19:28:47] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:29:09] *** Joins: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de)
[19:30:58] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:34:57] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[19:36:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[19:39:00] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[19:42:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:43:49] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:45:43] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:45:43] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:45:43] *** Joins: wroathe (~wroathe@user/wroathe)
[19:46:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:47:50] *** Quits: jgeerds (~jgeerds@55d41b94.access.ecotel.net) (Ping timeout: 260 seconds)
[19:56:14] *** Quits: dsrt^ (~dsrt@h50.174.139.63.static.ip.windstream.net) (Remote host closed the connection)
[19:58:33] <zincy_> Is there a nice way of dealing duplicate record field names and lens?
[19:59:02] <zincy_> I have two record types that share some field names and am not sure what to do
[19:59:21] <zincy_> Prefixing would work but a bit tedious
[20:00:08] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:00:40] <Taneb> zincy_: lens has makeFieldsNoPrefix which may be useful for you
[20:01:03] <zincy_> thanks!
[20:01:11] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:01:45] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:03:06] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[20:06:29] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:07:35] *** Joins: MoC (~moc@user/moc)
[20:07:53] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[20:13:10] *** Joins: dolio (~dolio@130.44.130.54)
[20:17:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830)
[20:19:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:21:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[20:22:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-014.wadham.ox.ac.uk)
[20:22:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830) (Ping timeout: 245 seconds)
[20:23:01] *** Quits: mbuf (~Shakthi@136.185.92.113) (Quit: Leaving)
[20:23:48] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[20:24:39] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[20:24:49] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[20:28:11] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:29:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[20:32:42] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[20:34:37] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (Ping timeout: 268 seconds)
[20:36:12] *** Joins: Digit (~user@user/digit)
[20:37:25] *** Quits: dajoer (~david@user/gvx) (Quit: leaving)
[20:37:56] *** Joins: MoC (~moc@user/moc)
[20:41:52] *** Joins: timCF (~timCF@m91-129-99-212.cust.tele2.ee)
[20:44:27] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[20:50:18] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:54:23] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391) (Ping timeout: 264 seconds)
[20:55:33] *** Joins: jess (~jess@libera/staff/jess)
[20:56:01] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[21:00:42] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[21:01:22] <dsal> zincy_: There's also classy lenses, thought that may end up more confusing depending on the collisions.  If a bunch of the things have a "_name" field that's `Text` then classy lens will let you access any of them via a `name` lens.
[21:06:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391)
[21:11:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391) (Ping timeout: 268 seconds)
[21:15:18] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[21:25:20] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:31:23] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[21:31:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:34a5:6053:7bcf:2391)
[21:31:58] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[21:32:37] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[21:33:01] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:38:11] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[21:43:00] *** Joins: nehsou^ (~nehsou@h50.174.139.63.static.ip.windstream.net)
[21:44:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:48:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[21:48:59] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:51:36] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[21:52:20] *** Joins: Vajb (~Vajb@2001:999:83:e6dd:c80d:a972:83d6:40ce)
[21:52:52] *** Joins: shapr (~user@2607:fb90:18d1:24ad:cf6e:d458:40ab:e571)
[21:53:25] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[21:57:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[21:58:07] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 256 seconds)
[22:00:42] <shapr> Anyone know how to use cabal as a library to get all the dependencies from a given cabal file?
[22:01:06] <sclv> Cabal-the-library can't get anything
[22:01:26] <shapr> Fair enough, I'm happy to hand it the files as bytestring or whatever
[22:01:34] <sclv> cabal the binary can unpack all deps, but idk if it can do it recursively
[22:02:02] <sclv> oh i see, you mean just "determine"?
[22:02:04] <shapr> I'm happy to hand all the files to cabal
[22:02:10] <sclv> not like fetch
[22:02:21] <shapr> yes, I'm back on "build a graph of dependencies" from a big pile of cabal files
[22:02:36] <shapr> I could write my own parser, but would rather not.
[22:02:39] <sclv> the best way is to "cabal configure" and then read the plan.json
[22:02:40] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[22:02:44] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:02:46] <shapr> oh that sounds easy
[22:02:46] <sclv> if you want to calculate recursive deps
[22:03:01] <sclv> if you want one level deps direct from the cabal file then you just use Cabal the library to parse the file
[22:03:09] <shapr> I want a command line tool though, so using cabal as a library would be nicer.
[22:03:11] *** Joins: econo (uid147250@user/econo)
[22:03:13] *** Joins: mrmaximuzz (~mrmaximuz@178.71.193.198)
[22:03:37] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[22:04:01] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:04:41] <maerwald> dependencies depend on architecture, flags etc... it isn't that straight forward with Cabal library
[22:05:05] <maerwald> there are a couple of distro tools that do that, e.g. gentoos hackport
[22:05:09] <sclv> for just parsing a cabal file its this: https://hackage.haskell.org/package/Cabal-3.6.2.0/docs/Distribution-PackageDescription-Parsec.html
[22:05:40] <maerwald> https://github.com/gentoo-haskell/hackport/blob/master/Merge/Dependencies.hs
[22:05:41] <sclv> you can find the entry point of cabal-install into `configure` and invoke it directly instead of via the command line as well -- sec
[22:05:44] *** Quits: mrmaximuzz (~mrmaximuz@178.71.193.198) (Read error: Connection reset by peer)
[22:06:00] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[22:06:19] <sclv> actually, only unreleased cabal exposes cabal-install as a lib, so i wouldn't recommend that yet
[22:07:06] *** Quits: Vajb (~Vajb@2001:999:83:e6dd:c80d:a972:83d6:40ce) (Ping timeout: 268 seconds)
[22:08:20] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[22:09:01] <sclv> shapr: for your use case you're in a monorepo and want to calc for a set of packages, so my suggestion is make one package that depends on all the others, configure it once and forall, and read the graph right out of plan.json
[22:09:03] *** Joins: Vajb (~Vajb@2001:999:83:e6dd:c80d:a972:83d6:40ce)
[22:09:33] <sclv> (i _think_ that you'll get the full dep tree and not just a streamlined one)
[22:09:45] <shapr> sclv: hm, that may not give me the info I want
[22:09:46] <shapr> but it might
[22:10:06] <maerwald> Also  check https://hackage.haskell.org/package/cabal-plan
[22:10:35] *** Joins: Pickchea (~private@user/pickchea)
[22:10:48] <shapr> that could help
[22:13:49] *** Quits: Vajb (~Vajb@2001:999:83:e6dd:c80d:a972:83d6:40ce) (Ping timeout: 265 seconds)
[22:17:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830)
[22:17:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:17:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:24:47] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[22:24:47] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[22:24:50] *** allbery_b is now known as geekosaur
[22:25:31] *** Joins: deadmarshal (~deadmarsh@95.38.228.182)
[22:27:13] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[22:27:53] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[22:28:11] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:28:37] <ddb> int-e, geekosaur: I finally got it figured out. The last bit is that instead of @admin you do admin in the console.
[22:30:11] *** Joins: Guest15 (~Guest15@nat-users-79-98-157-003.pnet.netair.net)
[22:31:05] <geekosaur> I'd probably stick it in the config file, but whatever
[22:31:34] <geekosaur> I don't think you use @ prefixes in the console since there isn't anything else to read commands the bot doesn't understand
[22:31:47] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:32:17] <int-e> right. it's a bit confusing because the `> ` prefix is still the same
[22:32:45] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:33:06] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:33:11] *** Quits: Guest15 (~Guest15@nat-users-79-98-157-003.pnet.netair.net) (Client Quit)
[22:33:48] <ddb> so I'm just running lambdabot, is there a param to pass in the config file?
[22:35:35] <geekosaur> I don't understand the question. Param for what?
[22:35:45] <ddb> which file to use as the config file
[22:35:57] <int-e> ddb: there's a `-e` to run commands, and an `rc` command to source a file: -e 'rc online-min.rc'
[22:36:17] <ddb> ah perfect
[22:36:42] <geekosaur> oh, right, I'd forgotten that part
[22:36:52] <int-e> https://github.com/lambdabot/lambdabot/tree/master/lambdabot/scripts  should really have an example run script, tsk
[22:36:59] <geekosaur> only remembered the usual config file was online.rc, not how you used it :)
[22:37:11] <geekosaur> it's been a decade
[22:37:43] *** Quits: shapr (~user@2607:fb90:18d1:24ad:cf6e:d458:40ab:e571) (Remote host closed the connection)
[22:37:46] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 260 seconds)
[22:37:56] *** Joins: shapr (~user@2607:fb90:18d1:24ad:216e:e60a:4c82:5164)
[22:37:58] <ddb> indeed, that's ok, I've got it working well now. I'll update it to use a config file on next boot.
[22:38:17] <geekosaur> hope they fixed the bug in the version I was running where I had to hit enter every so often in the console so the IRC connect and join would actually happen in the background :)
[22:38:40] <geekosaur> was always annoying when I had to restart the bot
[22:38:45] <ddb> I did have another question though, now that it's working
[22:38:50] <ddb> sometimes mueval seems to take a long time
[22:38:55] <ddb> > product [1..5]
[22:38:56] <lambdabot>  120
[22:38:59] <ddb> I got a timeout once by doing that
[22:39:13] <geekosaur> occasionally this one times out as well
[22:39:40] <ddb> cool, all the other modules seem to run quite quickly
[22:39:48] <int-e> mueval is slow, especially when compiled statically... which it *forces* by default
[22:40:17] <hpc> mueval is also just in general a whole new process
[22:40:20] <hpc> it has to load /everything/
[22:40:23] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[22:40:24] <hpc> it's not just typing into ghci
[22:40:38] <ddb> ooh that makes sense then
[22:40:43] <hpc> even () can time out
[22:40:45] *** Joins: fendor (~fendor@178.115.56.25.wireless.dyn.drei.com)
[22:40:53] <int-e> (it does  ghc-options:   -Wall -static -threaded  in its .cabal file which is quite terrible IMHO)
[22:41:18] <int-e> It's quite a bit faster if you patch that out and build a dynamic version
[22:42:23] <johnjay> is there a deeper reason that 5*-3 makes ghci complain about a varible out of scope *-?
[22:42:39] <johnjay> i expect something more like invalid operator or something
[22:42:45] <geekosaur> johnjay, you can make new operators on the fly
[22:43:01] <geekosaur> hyow would it know when to stop doing so and treat the - as something else?
[22:43:08] <hpc> > let x *- y = "surprise!" in 5*-3
[22:43:09] <lambdabot>  "surprise!"
[22:43:10] <awpr> the way the lexical syntax is defined is that adjacent runs of symbols are single operators
[22:43:18] <hpc> > let x *- y = "surprise!" in 5 * -3
[22:43:19] <lambdabot>  error:
[22:43:19] <lambdabot>      Precedence parsing error
[22:43:19] <lambdabot>          cannot mix ‚Äò*‚Äô [infixl 7] and prefix `-' [infixl 6] in the same infi...
[22:43:23] <int-e> hpc: well, a standalong mueval command with hot cache and nothing else running in parallel takes a bit over a second on lambdabot's VPS. the timeout is 5s. it can overshoot by running several muevals in parallel and perhaps some other VM on the same server causing the shared libraries to be evicted from memory
[22:43:24] <hpc> > let x *- y = "surprise!" in 5 * (-3)
[22:43:25] <lambdabot>  -15
[22:43:29] <hpc> johnjay: ^
[22:43:35] <awpr> same reason you can get messed up comments by writing e.g. `--|`
[22:43:50] <int-e> Anyway, it works most of the time these days.
[22:43:56] <int-e> (as far as I can see)
[22:43:56] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[22:45:41] <johnjay> int-e: that latter one raises more questions lol
[22:45:44] <johnjay> but ok
[22:45:52] <int-e> the reason why the dynamic version of mueval is faster is that then it loads libraries as shared libraries with the system's dynamic linker; the static version uses ghc's own linker from the RTS which can load standard .o files... which I think has more relocations to do, and definitely has more files to load and is less optimized.
[22:46:10] <geekosaur> johnjay, consider that --> is a perfectly valid operator name
[22:46:42] <geekosaur> but | as the start of a comment is part of haddock markup. so some people initially leave off the space before the | and get an unpleasant surprise
[22:48:17] <hpc> maybe base could define (--|) and (--^) with a custom error
[22:48:38] <geekosaur> wonder how many packages that would break :)
[22:49:20] <hpc> according to hoogle, it would break https://hackage.haskell.org/package/persistent-documentation-0.1.0.4/docs/Database-Persist-Documentation.html#v:-45--45--94-
[22:49:26] <hpc> so hmm, maybe not then
[22:49:34] <geekosaur> anyway xmonad is an example of using --> as an operator. (this breaks a remarkable number of syntax coloring engines, too :)
[22:50:27] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:50:57] <geekosaur> actually, hm, that mnakes me wonder if they did the same thing
[22:51:13] <maerwald> if it's not that, then CPP or TH/QuasiQuotes will break your tools
[22:51:28] <geekosaur> nope, just borrowed the idea I guess
[22:51:45] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Remote host closed the connection)
[22:51:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[22:53:22] *** Joins: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net)
[22:53:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[22:56:07] *** Quits: shapr (~user@2607:fb90:18d1:24ad:216e:e60a:4c82:5164) (Remote host closed the connection)
[22:57:36] *** Quits: yauhsien (~yauhsien@118-167-47-187.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[22:57:58] <geekosaur> johnjay, the other half of the answer is that Haskell is functional, so an operator is just a variable whose value is *usually* a function
[22:58:17] <johnjay> ah
[22:59:28] <johnjay> just for my sanity haskell doesn't care about whitespace correct?
[22:59:37] <johnjay> so let x=5 and let x = 5 and let x    = 5 are the same?
[22:59:46] <geekosaur> the lexer uses different rules to identify infix variables vs. prefix, but they're both variables as far as haskell is concerned
[22:59:50] <geekosaur> they are the same
[23:00:03] <geekosaur> although there are a few extensions which break this
[23:00:34] <geekosaur> already BangPatterns made foo ! bar different from foo !bar a decade ago
[23:00:56] <geekosaur> and several other such things have crept in over the years
[23:02:19] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-131-104.cust.tzulo.com)
[23:03:20] <geekosaur> most recently RecordDotSyntax completely confused how dots are parsed in various contexts including spacing, so they don't break . as an operator
[23:04:07] <yin> data Nat = 1 | 2 | 3 | 4 ... ; data Int = Neg Nat | Zero | Pos Nat -- this is my fantasy
[23:04:08] * geekosaur seriously thinks we could have lived without that complication, dots are hard enough to parse as it is
[23:04:50] <geekosaur> (in fact ghc does not parse them according to the Report, which shows in obscure ways related to qualified names)
[23:04:53] <johnjay> why does it allow "let 2 = 7" in ghci?
[23:05:07] <geekosaur> because it's a patttern that can never be referenced
[23:05:23] <geekosaur> so it never finds out that the pattern fails
[23:05:36] <geekosaur> > let 2 = 7 then 5
[23:05:37] <lambdabot>  <hint>:1:11: error: parse error on input ‚Äòthen‚Äô
[23:05:43] <geekosaur> whoo[ps duh
[23:05:48] <geekosaur> > let 2 = 7 in 5
[23:05:49] <lambdabot>  5
[23:06:07] *** Quits: deadmarshal (~deadmarsh@95.38.228.182) (Ping timeout: 256 seconds)
[23:06:11] <geekosaur> one of the weird corner cases in how pattern matching works
[23:06:52] <johnjay> TIL
[23:07:03] <johnjay> i was trying to generate an error to get more familiar with the error messages
[23:09:06] <yin> > let Nothing = pure () in 1
[23:09:07] <lambdabot>  1
[23:09:09] <geekosaur> > let 2 = !7 in 5
[23:09:10] <lambdabot>  <hint>:1:9: error: parse error on input ‚Äò!‚Äô
[23:09:25] <geekosaur> right, wrong side duh
[23:09:34] <geekosaur> > let !2 = 7 in 5
[23:09:35] <lambdabot>  *Exception: <interactive>:3:5-10: Non-exhaustive patterns in 2
[23:10:09] <yin> it should be simple enough to make patterns that bind no variables illegal, no?
[23:10:21] *** Joins: Vajb (~Vajb@n1s4o3bcbx01a3mj1-2.v6.elisa-mobile.fi)
[23:10:40] <johnjay> i have main = do let result = 5 print result in file.hs
[23:10:42] <hpc> that Nothing pattern doesn't bind any variables
[23:11:00] <johnjay> how do i actually see the result of main? ghci file.hs just says it loaded the module
[23:11:10] <hpc> johnjay: you have to run main
[23:11:11] <geekosaur> do :main
[23:11:19] <johnjay> you mean in ghci?
[23:11:21] <yin> hoc: any reason not to have the cmpiler disallow it?
[23:11:21] <geekosaur> you can also pass "command line" arguments that way
[23:11:21] <hpc> ghci is strictly a repl
[23:11:30] <geekosaur> :main foo bar baz
[23:11:31] <johnjay> ah ok
[23:11:31] <hpc> it's not like running python foo.py
[23:11:38] <janus> does haskell really require a dollar before 'do' while purescript doesn't? seems like i can get away with omitting it there
[23:11:56] <yin> janus: there's an extension for that
[23:12:08] <janus> yin: BlockArguments?
[23:12:08] <yin> dont rememeber the name though
[23:12:13] <hpc> janus: it's a parsing thing, unfortunately
[23:12:20] <yin> janus: yes i think that's the one
[23:12:30] *** Joins: max22- (~maxime@2a01cb0883359800a1957cb129df87ea.ipv6.abo.wanadoo.fr)
[23:12:34] <geekosaur> yeh, BlockArguments
[23:13:09] <janus> i have heard people don't like it in haskell... wonder if the purescript version has the same problems
[23:13:17] <johnjay> oh i see i can do 'ghc asdf.hs' as long as I have llvm in path
[23:13:25] <johnjay> also i have llvm13 and 12 for some reason in /opt
[23:13:25] <geekosaur> there's also runghc
[23:13:32] *** Quits: Guest80 (~Guest80@pd95ed7c0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[23:14:16] <yin> so, is there any reason not to disallow patterns that don't bind variables?
[23:14:17] <geekosaur> (there's also ghc -e "expression")
[23:14:44] <geekosaur> technically a pattern using a wildcard doesn't bind a variable
[23:14:47] <awpr> `case x of 0 -> "zero"; _ -> "nonzero"`
[23:15:06] <yin> i mean in let expressions
[23:15:11] <awpr> does `-Wincomplete-uni-patterns` complain about this?
[23:16:38] <geekosaur> by the time the compiler can tell it has a pattern in a let vs. a case, can it still tell that there's no bindings because a wildcard was used?
[23:16:40] <yin> > let _ = 0 in 1
[23:16:42] <lambdabot>  1
[23:16:54] <yin> :/
[23:16:57] *** Quits: max22- (~maxime@2a01cb0883359800a1957cb129df87ea.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:17:03] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:17:23] <awpr> I don't see any problem with that one.  it's unnecessary, sure, but so is `id $ id id $ id 5`
[23:17:57] <geekosaur> or a lambda (including the implicit one in do's <-)?
[23:18:33] <geekosaur> basically I think it comes down to having to carry too much state around internally that would be used only to prevent a weird corner case most people don't care about
[23:18:50] *** Joins: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com)
[23:19:30] <yin> Œª let Nothing = pure 1 in ()
[23:19:31] <yin> <interactive>:1:5: warning: [-Wunused-pattern-binds] This pattern-binding binds no variables: Nothing = pure 1
[23:19:33] <yin> ()
[23:20:02] *** Quits: Vajb (~Vajb@n1s4o3bcbx01a3mj1-2.v6.elisa-mobile.fi) (Ping timeout: 265 seconds)
[23:20:09] <yin> why not make this an error instead of the warning? isn't the check there anyways?
[23:20:14] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[23:21:05] <c_wraith> the main reason I'd think of to not make it an error is to make generating code easier.
[23:21:32] <awpr> the program is still well-defined and can still be compiled in that case, so it's not really an error.  `-Werror` is meant for this kind of situation, where you want the compiler to reject weird / suspicious things that are technically okay
[23:21:34] <c_wraith> I have written template-haskell that generates a non-binding let expression before, just as an additional layer of type-checking.
[23:22:19] *** eldritch_ is now known as eldritch
[23:22:51] <yin> weirdness
[23:23:05] <johnjay> i'm amazed that Tru && False and rue && False both suggest I meant True. phenomenal!
[23:23:06] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (Quit: WeeChat 3.3)
[23:23:32] <johnjay> but ru doesn't
[23:23:55] <yin> johnjay: you should like copilot
[23:26:27] <johnjay> yin: maybe i'm missing something. it says it helps you verify c programs
[23:26:37] <johnjay> wouldn't you just verify c programs from the c programs
[23:26:40] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Remote host closed the connection)
[23:26:55] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:26:56] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Read error: Connection reset by peer)
[23:27:18] <yin> https://copilot.github.com/
[23:28:07] <yin> you look videos of people using it, it's insane
[23:28:12] <johnjay> videos huh
[23:28:23] <geekosaur> I wonder if verify means the same thing to you that it does to us
[23:29:07] <yin> narrator: "it does not"
[23:29:19] <johnjay> you probably mean something like formally verify
[23:29:32] <geekosaur> yep
[23:29:34] <johnjay> like using hoare logic to prove something always terminates
[23:30:53] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:31:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:32:36] <johnjay> amusingly ( and ) give different errors. the former says mismatched parentheses but the later says parse error
[23:33:27] <geekosaur> I sus[pect something about the brace insertion logic leads to that because it has to track opened/unclosed parens to get it right
[23:33:44] <geekosaur> (brace insertion is relevant to do/let/case blocks)
[23:34:00] <johnjay> well i should probably learn me more haskell before continuing
[23:34:11] <johnjay> all punctuation was similar except : and $
[23:34:21] <johnjay> $ said i need to use TemplateHaskell and : just said loaded empty module
[23:34:22] <geekosaur> and is something you'll rarely care about unless looking to cimplement a Haskell compiler
[23:34:40] <johnjay> i always try to learn the error messages of any software i use
[23:34:50] <johnjay> because they are bad and require lots of interpretation to use
[23:34:53] <geekosaur> right, $ at the top level (or the prompt in ghci) expects to insert a TH splice
[23:35:11] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 264 seconds)
[23:35:16] <geekosaur> : in ghci not followed by a command repeats the previous command
[23:35:20] <yin> : is the mandatory prefix to infix data constructors
[23:35:25] <johnjay> suggestin I meant 'True' instead of 'Tru' frankly shocking to me
[23:35:47] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[23:35:54] <johnjay> geekosaur: not that i can tell. it says OK, no modules loaded.
[23:36:06] <yin> the '$' operator has *some magic* going on iirc but it's otherwise not special at all
[23:36:26] <yin> mind that ghci commands start with :
[23:36:38] <geekosaur> right, and : by itself repeats the previous command
[23:37:02] <yin> ah right
[23:37:04] <geekosaur> which will be a (possibly null) load at the start of a session, if you have not typed any :-commands yet
[23:37:58] <johnjay> apparently it is the last thing
[23:38:05] *** Joins: juhp (~juhp@128.106.188.220)
[23:38:33] <dolio> ($) isn't special in 9.2 anymore, right?
[23:38:35] <johnjay> if i type 5 though then print it says in stmt of form print it
[23:38:44] <johnjay> where is "print it" coming from?
[23:39:09] <awpr> dolio: right, IIRC the only special-ness left is that it has the ImpredicativeTypes behavior even when ImpredicativeTypes is not enabled
[23:39:21] <geekosaur> dolio, pretty sure this is just typing "$" to ghci, which would try to expand a TH splice but TH was disabled
[23:39:43] <geekosaur> awpr, not even that because with QuickLook it's impredicative anyway
[23:40:11] <geekosaur> hm, maybe
[23:40:30] <awpr> my recollection is that quick look is enabled by ImpredicativeTypes, with the exception that $ always has it
[23:41:04] <geekosaur> johnjay, the way ghci works, it evaluates an expression, then binds the result to `it`, then executes `print it` or a replacement that can be specified by an option
[23:41:27] <geekosaur> except that if the expression is in IO then it assumes the output was done by the IO action
[23:42:00] <geekosaur> but see https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#using-a-custom-interactive-printing-function
[23:42:08] <geekosaur> which would then replace `print it`
[23:42:40] <johnjay> hmm good i'll use the manual as well
[23:42:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:7032:7aef:17c2:c830) (Remote host closed the connection)
[23:43:10] <yin> interesting! it = print it
[23:43:16] <johnjay> the first message it says was no instance for (Show (() -> IO ()))
[23:43:43] <johnjay> i guess they are really one statement but separated by bullet points
[23:43:45] <yin> @type print
[23:43:46] <lambdabot> Show a => a -> IO ()
[23:45:56] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[23:47:20] <yin> you can't print a function because they are opaque. the nly way to know what a function does is to run it
[23:47:36] <yin> > print id
[23:47:37] <lambdabot>  error:
[23:47:37] <lambdabot>      ‚Ä¢ No instance for (Typeable a0) arising from a use of ‚Äòprint‚Äô
[23:47:37] <lambdabot>      ‚Ä¢ In the expression: print id
[23:47:48] <yin> > print print
[23:47:50] <lambdabot>  <IO ()>
[23:47:58] <yin> wait what?
[23:48:19] <awpr> https://hackage.haskell.org/package/base-4.16.0.0/docs/Text-Show-Functions.html
[23:48:36] <awpr> er, not exactly that, but apparently a similar orphan instance
[23:49:28] <yin> > show id
[23:49:29] <lambdabot>  error:
[23:49:29] <lambdabot>      ‚Ä¢ No instance for (Typeable a0) arising from a use of ‚Äòshow‚Äô
[23:49:29] <lambdabot>      ‚Ä¢ In the expression: show id
[23:49:33] <yin> > show print
[23:49:34] <lambdabot>  "<() -> IO ()>"
[23:49:44] <awpr> uh, Typeable?
[23:49:46] <yin> when did this happen?
[23:50:05] <awpr> I would guess this is a lambdabot-specific orphan instance that's OVERLAPPABLE
[23:50:06] *** Quits: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) (Ping timeout: 245 seconds)
[23:51:02] <awpr> e.g. `instance {-# OVERLAPPABLE #-} Typeable a => Show a where showsPrec x = showChar '<' . showsPrec 0 (typeOf x) . showChar '>'`
[23:52:46] <geekosaur> yes
[23:53:26] <geekosaur> @version
[23:53:27] <lambdabot> lambdabot 5.3.0.1
[23:53:27] <lambdabot> git clone https://github.com/lambdabot/lambdabot
[23:54:20] <geekosaur> hm, not there
[23:54:23] <geekosaur> @where L.hs
[23:54:24] <lambdabot> what lambdabot has in scope is at https://silicon.int-e.eu/lambdabot/State/Pristine.hs
[23:57:13] <geekosaur> hm, can't find the ShowFun module
[23:57:24] <geekosaur> @hoogle ShowFun
[23:57:25] <lambdabot> TextShow.Generic data ShowFunsB arity a
[23:57:25] <lambdabot> TextShow.Generic data ShowFunsT arity a
[23:57:25] <lambdabot> TextShow.Generic data ShowFunsTL arity a
[23:58:35] *** Quits: falafel (~falafel@2603-8000-d800-688c-34f9-26f3-71b0-5b78.res6.spectrum.com) (Ping timeout: 264 seconds)
