[00:00:18] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:10:05] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:13:14] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[00:47:53] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:35fe:b365:87c4:d3bd)
[00:53:33] *** Joins: djuber (~user@65.79.128.64)
[01:00:34] *** Quits: wacki (~wacki@87.123.132.123) (Quit: Leaving.)
[01:08:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:09:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:09:57] <hayley> https://bugs.ruby-lang.org/issues/18481 No one thought to write the JIT in Ruby?
[01:09:58] -ixelp- Feature #18481: Porting YJIT to Rust (request for feedback) - Ruby master - Ruby Issue Tracking System
[01:10:13] <drakonis> rubinius?
[01:10:29] <moon-child> lol
[01:10:44] <moon-child> I think somebody actually did a pedagogical ruby jit in ruby
[01:10:49] <drakonis> its ruby in ruby
[01:10:51] <moon-child> but it wasn't intended to be fast
[01:11:16] <hayley> I'm not kidding though.
[01:11:17] <drakonis> it is faster than ruby apparently?
[01:11:45] <hayley> "We believe that having access to object oriented programming and a more expressive type system would help us manage growing complexity better and also improve the safety/robustness of YJIT" Rust won't give one very much OO, and I thought Ruby was supposed to be safe.
[01:11:59] <drakonis> oh its not ruby in ruby anymore
[01:13:19] <moon-child> I was thinking about bootstrapping jit again
[01:13:27] <moon-child> I think you have two versions of the compiler
[01:13:36] <moon-child> one unspecialized, which specializes the other
[01:13:47] <moon-child> s/versions/copies/
[01:13:50] <moon-child> within the image
[01:14:29] <moon-child> could have n copies, of course.  But that gets impractical
[01:14:32] <hayley> I'd presumably use satiation in Zero Feet. Else method lookup would fall into infinite regress if we try to access slots of a layout object (which is a method call).
[01:15:38] * moon-child does not have to worry about slots or methods.  Everything is an array!
[01:15:51] <hayley> ):<
[01:20:35] <hayley> So I just need to (at least) make sure all the inline caches for method lookup code are primed with the layout class. Though I don't think it'd survive someone adding a new layout class somehow (metaobject protocol when?), and I'd need to make sure the base case is always cached. Not infeasible.
[01:26:24] <hayley> ...same as predicting that + will be sent to fixnums, or ifTrue: to Booleans, etc. really. Just implement an optimistic test and inline path for it.
[01:26:47] <moon-child> seems fragile
[01:27:40] <hayley> Such is life. The other solution in AMOP is to hand-code your own "primitive" accesses to metaobjects, which means you're computing layouts and not the compiler.
[01:27:55] <hayley> *computing layouts of metaobjects, specifically
[01:30:14] <hayley> Oh, and I also better satiate the GC, too.
[01:30:31] <moon-child> yeah, that's what I would do.  Though I guess that's no less fragile wrt generating _good_ code
[01:45:43] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[01:45:59] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[01:54:14] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[01:56:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:58:59] <sm2n> moon-child: this is somewhat related, though I think guile didn't have its JIT when it was written <https://wingolog.org/archives/2016/01/11/the-half-strap-self-hosting-and-guile>
[01:58:59] -ixelp- the half strap: self-hosting and guile -- wingolog
[02:02:08] <moon-child> yeah, and I think guile does all its jit at the c level (on bytecode)
[02:03:15] <sm2n> iirc their jit is written in guile, but it does operate on bytecode. Is that undesirable?
[02:03:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:04:30] <sm2n> oh
[02:04:32] <sm2n> https://www.gnu.org/software/guile/docs/master/guile.html/Just_002dIn_002dTime-Native-Code.html
[02:04:33] -ixelp- Just-In-Time Native Code (Guile Reference Manual)
[02:04:40] <sm2n> It's not a tracing JIT, I see what you mean
[02:04:54] <sm2n> well, it is, I guess
[02:05:05] <moon-child> I see a 'jit.c'
[02:06:07] <moon-child> I don't think it's a bad idea to have bytecode.  Though it does seem sort of superfluous if you are just going to compile it once you generate it
[02:09:13] <sm2n> huh, they have ifdefs for windows in that file
[02:09:14] <random-nick> the guile 3.0 is a method jit iirc
[02:09:18] <sm2n> I thought guile didn't work on windows
[02:09:32] <random-nick> but there was a an experimental tracing jit implemented for guile 2.2
[02:09:41] <random-nick> it wasn't merged tho
[02:09:54] <random-nick> idk if it was even published as a patch
[02:10:28] <hayley> Do tracing JITs help much?
[02:11:06] <sm2n> hayley: I think luajit has demonstrated that they do
[02:11:20] <sm2n> and v8 et al I guess
[02:14:00] <random-nick> found a whitepaper on the tracing jit https://web.archive.org/web/20170306212506/http://scheme2016.snow-fort.org/static/scheme16-paper3.pdf
[02:14:46] <random-nick> I wonder if anyone ran benchmarks to compare guile 2.2 with nash and guile 3.0
[02:15:26] <hayley> Suppose I have my own stupid calling convention, but I still use a call stack in the usual registers. How much do I have to drug up GDB to get it to debug my stuff?
[02:16:10] <moon-child> go spend a year reading the dwarf spec
[02:16:13] <moon-child> cry
[02:16:25] <hayley> ):
[02:16:38] <moon-child> I don't think you even need a normal call stack, I know people have made it show tracebacks through interrupts
[02:16:46] <hayley> Better just NIH my own debugger then.
[02:17:17] <moon-child> oh, might be worth looking into stabs
[02:17:31] <moon-child> simpler debug format that's still afaik supported
[02:18:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:18:58] <hayley> Some IBM article suggested that you just say "first argument is ..., second argument is ..." in DWARF which won't help.
[02:22:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:25:12] <random-nick> hayley: found this in the gdb manual, does it help? https://sourceware.org/gdb/current/onlinedocs/gdb/Custom-Debug-Info.html#Custom-Debug-Info
[02:25:13] -ixelp- Custom Debug Info (Debugging with GDB)
[02:25:48] <hayley> It's interesting..
[02:25:48] <random-nick> apparently gdb can load an .so which contains code for reading custom debug info
[02:26:03] <hayley> "Readers need to be released under a GPL compatible license" lol no
[02:27:21] <drakonis> which license would you propose
[02:27:35] <moon-child> eh I don't think that's terrible
[02:27:40] <moon-child> as a thing specifically for itnerfacing w/gdb
[02:27:42] <hayley> I haven't decided yet.
[02:28:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:29:10] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:35fe:b365:87c4:d3bd) (Remote host closed the connection)
[02:34:01] <random-nick> also regarding guile's jit's implementation language, both nash and guile 3.0 use GNU Lighting (written in C) for codegen but implement most of the logic in guile scheme iirc (not all because the bytecode vm is written in C, and some logic has to live in the vm)
[02:34:46] <random-nick> though guile 3.0 apparently imported lightning's code into its own repo and removed the optimisation code
[02:36:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[02:38:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:43:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[02:44:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:48:41] <moon-child> 'The Common Lisp compiler uses parallelism within single files.  It does this by performing the syntax phase on each expression (which also does any needed evaluations and other sequential compile-time processing), then spawns a parallel task for the code generation, which requires no further context information.'
[02:48:44] <moon-child> can't have shit in sbcl
[02:51:06] <moon-child> (defconstant %short-float-exponent-length 7) (defconstant %short-float-mantissa-length 55)   whaaat.  Tagged inline floats?
[02:51:20] <moon-child> though I think wordsize was 32 bits on this machine.  Hmm
[03:05:41] <random-nick> moon-child: mezzano's file compiler does something similar apparently https://github.com/froggey/Mezzano/blob/master/system/file-compiler.lisp#L804
[03:05:41] -ixelp- Mezzano/file-compiler.lisp at master · froggey/Mezzano · GitHub
[03:07:42] <moon-child> gilberth: I find this: '#define void int' in some prehistoric c code
[03:07:46] <moon-child> gilberth: pls explain
[03:09:50] <djuber> did that "void is int" mechanism work because function prototypes were assumed to be int if unspecified, and an implied return of 0 if none present (or whatever garbage happened to be in the right register to satisfy the calling conventions at the time)? 
[03:11:00] <moon-child> yeah
[03:11:10] <moon-child> seems some old compiler didn't like 'void'
[03:26:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:37:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[03:38:00] <phoe> (lambda () (funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall 
[03:38:06] <phoe> #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall 
[03:38:12] <phoe> #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall #'funcall (lambda () (format t "Hello world!~%"))))
[03:38:16] <phoe> holy shit lisp is fun!
[03:39:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:42:10] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[03:45:53] <Catie> My call stack is going on strike for that
[04:02:04] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[04:03:48] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:03:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:06:11] *** Quits: sepanko (~sepanko@user/sepanko) (Ping timeout: 268 seconds)
[04:06:11] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Ping timeout: 268 seconds)
[04:06:12] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 268 seconds)
[04:07:37] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:07:53] *** Joins: trn (jhj@sourcehut/user/trn)
[04:10:33] <gilberth> moon-child: As djuber said. As I already read old sources out of curiosity, I should make a chart. "void" came late. As did "typedef". Also remember, that C compilers didn't care about types; 'int' was just 'a native machine word'. You could see e.g. struct point { int x, y }; ... foo(pt) { return pt->x * pt->y; } with 'pt' being implicitly an 'int', but applying "->" to it was fine.
[04:11:52] <gilberth> I spotted things like main (argc, argv) int argv[]; {...} This is why I want I want a K&R and pre K&R C compiler.
[04:13:17] <gilberth> For there is a zero chance you could get that through gcc. Heck, current gcc can't compile the first version of gcc anymore.
[04:14:08] <gilberth> Lisp is a much more stable language.
[04:14:57] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[04:15:43] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[04:17:16] <random-nick> reminds me of the 10-step chain for bootstrapping rust https://guix.gnu.org/blog/2018/bootstrapping-rust/
[04:17:16] -ixelp- Bootstrapping Rust â 2018 â Blog â GNUÂ Guix
[04:18:58] <semz> Rust language stability is hell
[04:20:47] <lagash> "But at least it bootstraps!"
[04:21:07] <gilberth> Yep, as I ported X11 to XENIX, I first needed to port gcc-1.something to be able to compile gcc-2.ihaveforgotten, which finally would be able to compile X11. The Microsoft (sic!) C compiler was just too olde.
[04:21:29] *** Joins: sepanko (~sepanko@user/sepanko)
[04:21:46] <moon-child> gilberth: for pre k&r c, though, things are nto really portable
[04:22:12] <moon-child> so idk how useful it would be to have a pre-k&r compiler in this day and age
[04:23:21] <gilberth> moon-child: I won't call K&R C code portable either. As prototypes are optional. And the contract that a pointer would fit an 'int' was still implicitly there and used a lot.
[04:23:40] <moon-child> I am now running into issues with the preprocessor, btw, because apparently expansion rules were different.  So this was accepted: #define FOO(bar, baz) bar; baz;  #define BAR () { int x, y; }  FOO(BAR(), BAR())
[04:23:54] <gilberth> As is happily applying "->" to a pointer without caring about the type.
[04:24:06] <moon-child> even though a modern preprocessor interprets this as an attempt to pass four arguments to FOO and so complains
[04:24:20] <hayley> https://www.youtube.com/watch?v=j2s8yGMEbSs
[04:24:21] -ixelp- Run Like Hell - YouTube
[04:24:42] <gilberth> moon-child: Oh yes. Expansion rules have changed. There are two flavors around.
[04:25:27] <moon-child> think I might just change BAR to return a statement expression :P
[04:26:00] <moon-child> ('c: 5 decades and still no standardised PROGN)
[04:26:01] <moon-child> '
[04:26:06] <hayley> Hm, though I'd still have to do some "write the equivalent slots in assembler" stuff for initializing the VM, stack and all. But I'd probaby keep VM info as "thread" local storage accessed by more primitives.
[04:26:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[04:26:53] <gilberth> moon-child: mcpp can do all flavours.
[04:27:29] <random-nick> the guix people also had some projects to bootstrap their system with only binary being a hand-written one
[04:27:53] <hayley> What's the entrypoint again? _start?
[04:28:09] <moon-child> gilberth: thanks, will take a look
[04:28:09] <random-nick> hayley: I think they assume a linux kernel?
[04:28:23] <moon-child> hayley: it's named whatever you like (or nothing at all).  Just set the pointer properly in elf
[04:28:31] <random-nick> it's about minimising guixsd's "binary seed"
[04:28:32] <gilberth> <http://termbin.com/s78t> ;mcpp usage
[04:28:38] <hayley> moon-child: Handy.
[04:28:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[04:29:10] <random-nick> which is the set of statically-linked guix packages you need in order to build everything in guix
[04:29:37] <random-nick> s/statically-linked/prebuilt statically-linked/
[04:29:43] <hayley> ld has ENTRY(bla), right?
[04:30:13] <random-nick> moon-child: I think linux still loads a.out which is even simpler than elf
[04:30:18] <moon-child> hayley: yeah
[04:30:22] <moon-child> random-nick: they got rid of it recently
[04:30:32] <moon-child> hayley: linker scripts are gnu ld-specific, though
[04:31:08] <hayley> I'll just take a RWX segment for the image, and stick an entrypoint somewhere. Should work, unless your OS is no fun.
[04:31:20] <random-nick> anyway the strategy when I was reading about that a few years ago is to have the first step be an assembler written in hex codes
[04:31:29] * moon-child looks askance at openbsd and macos
[04:32:03] <hayley> They're missing out.
[04:32:52] <random-nick> then I think they wanted to have a primitive subset of scheme interpreter in order to interpret a minimal c compiler written in such subset of scheme which would then compile a better scheme interpreter written in primitive c?
[04:32:59] <random-nick> quite weird process
[04:33:32] <random-nick> but they realised that even if they got tcc to run they wouldn't be able to compile a new-enough gcc since it was in C++
[04:34:19] <random-nick> also I think they wanted to write a bash interpreter in guile in order to kick out bash from the binary seed?
[04:34:32] <random-nick> to be honest it's a very weird project
[04:34:54] <moon-child> gilberth: alas, none of mcpp's modes is agreeable
[04:36:05] <gilberth> moon-child: Odd.
[04:37:51] <gilberth> moon-child: Curious. How old is the code you face?
[04:39:18] <random-nick> hmm, guix has apparently managed to bootstrap guixsd on gnu hurd
[04:39:26] <random-nick> that's nice I guess
[04:42:11] <moon-child> gilberth: 80s, I think
[04:42:45] <moon-child> it is a lisp implementation for the butterfly, a multiprocessor wikipedia claims is from the 80s.  Some parts of it seem to be derived from some mit project, which was probably earlier; but I assume it worked as late as the 80s
[04:46:37] <hayley> https://www.youtube.com/watch?v=v0wwwImHxVU
[04:46:38] -ixelp- Pink Floyd - Balls In Yo Jaws (1975) - YouTube
[04:46:59] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Quit: Gone.)
[04:47:28] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:48:17] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[04:49:53] <gilberth> moon-child: Exciting. Are you into archeology, too?
[04:54:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:55:14] <moon-child> I dabble
[04:55:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:56:08] <moon-child> I also rescued and rehabilitated a rogue clone a while ago.  Thought about hacking on it seriously, but I found its code was even worse than nethack's
[04:56:10] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[04:57:07] <moon-child> it uses curses.  Fine.  It also uses a feature of curses, to ask what character is at some point on the screen, to track game state
[05:14:26] *** cross_ is now known as cross
[05:16:04] <pl> moon-child: did you grab BBN Scheme for BBN Butterfly? 
[05:16:25] <moon-child> yes
[05:16:33] <pl> There was afaik also a somewhat CLish (cltl1?) language implemented on top of it 
[05:17:01] <pl> Butterfly was in that weird superposition of being useful and useless at the same time 
[05:19:02] <moon-child> yes, it has a scheme and a cl
[05:19:28] <pl> Some interesting useful work got done, but the proposed system was never universally useful as much as it seemed in theory, afaik partially thanks to Mach 
[05:19:29] <moon-child> not sure about 'on top'.  There seem to be some features of the runtime which are cl-specific
[05:19:48] <moon-child> mach?
[05:21:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[05:23:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:23:33] <pl> Mach. Of "killed microkernel hype" fame 
[05:23:43] <moon-child> oh--the very same!
[05:23:54] <moon-child> I assumed this was a different mach
[05:33:57] <pl> no, if it's multiprocessor & unix and late 1980s or early 1990s and worse, mentions threads - odds are it' Mcah
[05:33:58] <pl> *Mach
[05:37:43] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[05:38:00] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:38:22] <drakonis> they wrote a lisp in ocaml
[05:38:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[05:38:44] <drakonis> http://binaryanalysisplatform.github.io/2021/09/15/writing-lifters-using-primus-lisp/
[05:38:44] -ixelp- Writing Lifters Using Primus Lisp – The BAP Blog
[05:39:41] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[05:40:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:41:52] <drakonis> https://binaryanalysisplatform.github.io/bap/api/master/bap-primus/Bap_primus/Std/Primus/Lisp/index.html
[05:41:53] -ixelp- Lisp (bap-primus.Bap_primus.Std.Primus.Lisp)
[05:43:04] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[05:48:40] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:50:09] <hayley> Their LET is our LET*.
[05:52:29] <moon-child> who needs to shadow?
[06:01:06] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[06:02:27] *** Joins: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net)
[06:04:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:05:34] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Ping timeout: 250 seconds)
[06:05:34] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1018-static.midco.net) (Ping timeout: 250 seconds)
[06:05:56] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net)
[06:05:57] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:10:00] <sm2n> "tail call recursion is a hack to get around the shortcomings of languages that don't have iteration."
[06:10:03] <sm2n> nice
[06:10:48] <hayley> Bruh
[06:11:33] <hayley> How do you make iteration then? (First to say PROG gets one more red nightmare.)
[06:12:08] <sm2n> https://old.reddit.com/r/lisp/comments/s39cqp/sacrilege_sicp_in_javascript/hsmnxm4/
[06:12:08] -ixelp- yel50 comments on Sacrilege! SICP in JavaScript!
[06:12:23] <sm2n> Apparently the magic language design pixie gives it to you
[06:12:34] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[06:12:45] <hayley> Real :bruhcha: hours
[06:12:56] <moon-child> DO?
[06:13:05] <hayley> https://gbracha.blogspot.com/2009/12/chased-by-ones-own-tail.html
[06:13:06] -ixelp- Room 101: Chased by One’s Own Tail
[06:13:07] * moon-child names his iteration construct 'RE'
[06:13:15] <hayley> How do you get DO?
[06:13:28] <moon-child> make it a special operator
[06:14:16] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:14:25] <moon-child> hmm.  Send a 'while' message to a boolean
[06:14:52] <sm2n> hayley: that is a nice post; that gc analogy is neat
[06:15:44] <moon-child> can we do that in general?  Make X a weak pointer to Y, when Y is GC'd, change it to point to Z
[06:16:09] <moon-child> hmm I guess you can kinda do that with finalizers
[06:16:32] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[06:17:23] <hayley> moon-child: whileTrue: is literally 1984
[06:17:38] <hayley> Gilad Bracha made it way too easy by calling the language Newspeak.
[06:17:53] * moon-child vomits on hayley's camel
[06:18:29] <sm2n> is it evil to put closures as finalizers?
[06:19:14] <sm2n> That lets you essentially make reference cycles and leak memory, right?
[06:20:28] <hayley> Depends what you close over.
[06:20:42] <hayley> moon-child: #ocaml is that way --->
[06:21:18] <moon-child> hmm, I am curious why that breaks actually.  Couldn't you trace the finalizer only when you trace the object itself?  I guess there would still be complications, but it certainly seems doable
[06:22:07] <sm2n> if object X has finalizer A that closes over Y and object Y has finalizer B that closes over X, what do you do?
[06:22:30] <semz> grab your shotgun and find the guy who did that
[06:22:46] <moon-child> sm2n: add moar colours
[06:23:04] <sm2n> I don't follow
[06:24:09] <moon-child> hmm wait no there's no way to make that work
[06:24:27] <moon-child> because either way you would end up accessing an already-finalized object
[06:25:04] *** Quits: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:34:32] <moon-child> pl: btw, do you know if source is available for the version of mach that ran on the butterfly?
[06:35:00] <moon-child> getting to the vm and threading bits, and would be helpful to have a contemporary reference for what these calls are supposed to do
[06:38:48] <gilberth> May I have ANSI escape sequences support for SLIME? An wrappers for CLIM:WITH-DRAWING-OPTIONS for colour and font? On a stick? And a Porsche?
[06:39:52] <sm2n> aeth's irc bot says no
[06:41:08] <gilberth> No? Why not?
[06:41:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:41:30] <sm2n>  /dev/urandom
[06:42:01] <moon-child> why do you want it?
[06:42:18] <pl> moon-child: don't think so, but I suspect you can try finding any other Mach 2.0 system?
[06:42:28] <sm2n> that said, I think there was someone who was adding CLIM support to slime
[06:42:59] <moon-child> pl: ok
[06:43:30] <gilberth> moon-child: For colour as I "recently" acquired a colour display. And for fonts.
[06:43:43] <moon-child> but ...
[06:43:55] * moon-child really doesn't understand why anybody would want anything to do with terminals
[06:44:09] <moon-child> I mean, I live in a terminal.  But that doesn't mean I think it's a remotely good idea :P
[06:44:24] <sm2n> https://www.youtube.com/watch?v=XOaVm7EQZAM
[06:44:25] -ixelp- CLIME: McCLIM meets SLIME - YouTube
[06:44:57] <gilberth> Nah, I won't touch McCLIM.
[06:45:17] * sm2n shrugs
[06:45:33] <gilberth> What I actually rather want is kill and yank integration with CLIM as I would prefer a CLIM listener to a SLIME buffer.
[06:46:35] * moon-child shakes his fist at chrome
[06:49:57] <hayley> Second Climacs when
[06:51:56] <contrapunctus> FreeCLIM release when 😏️
[06:52:12] <hayley> After clex2.
[06:54:26] <contrapunctus> hayley: "Popular tweak known as Clex, which was previously available for iOS 7 devices only, has now been updated to support iOS 8. The latest package is dubbed as Clex2 and provides you with system-wide access to music controls from anywhere within iOS." 🤔️
[06:57:22] * hayley wonders why that of all things has a new regular expression implementation.
[06:57:46] <gilberth> Hmm, regex(3) with glibc hasn't improved a bit with 2.28 compared to 2.19, same number of fails, same hangs and memory corruption.
[06:57:54] <hayley> Lovely.
[06:58:37] * gilberth ought to check libtre for updates as his version is ancient. After all some test cases are by them.
[06:59:08] <hayley> (a|aa)+ when
[06:59:31] <moon-child> I used tre for some project because it seemed nice and embeddable
[06:59:42] <moon-child> spotted an obvious bitfield fail
[06:59:47] <moon-child> so, em, don't get your hopes up
[06:59:49] <gilberth> The memory corruption is severe, I fork(2) for each test to allow me to continue.
[07:00:05] <moon-child> https://github.com/laurikari/tre/pull/75/commits/b6d342b3b450bdca111231ea9ced7ae965a16ae3   pull this patch if you care to
[07:00:06] -ixelp- Fix bitfield use in tre-match-backtrack.c by moon-chilled · Pull Request #75 · laurikari/tre · GitHub
[07:00:12] <hayley> Can libtre do (a|aa)*?
[07:00:26] <gilberth> hayley: What's the test case?
[07:00:57] <hayley> (a|aa)* on aaaaaaaa
[07:01:03] <contrapunctus> moon-child: re: «how does one `read` -ably serialize a list containing objects?» I realized later...there's that #n syntax, right? Would that work?
[07:01:13] <hayley> You can guess what the submachine should be.
[07:01:19] <moon-child> contrapunctus: yes, that is *print-circle* which I mentioned
[07:01:27] <moon-child> contrapunctus: I still do not recommend doing that, but ¯\_(ツ)_/¯
[07:01:28] <hayley> #n= preserves identity but you need to print an object still.
[07:02:59] <hayley> "The matching algorithm used in TRE uses linear worst-case time in the length of the text being searched, and quadratic worst-case time in the length of the used regular expression" I thought it was a DFA?
[07:04:48] <hayley> Well, apparently this is an approximate grepper. Still.
[07:07:13] <hayley> https://www.youtube.com/watch?v=eUJ_ifjKopM
[07:07:14] -ixelp- Sparks - "This Town Ain't Big Enough For Both Of Us" (official video) - YouTube
[07:09:32] <contrapunctus> I see...
[07:12:18] <contrapunctus> moon-child: «I suggest doing your own (de)serialization» I'm not sure what that means 😶️
[07:14:04] <moon-child> write your own code which translates from standard objects to some portable form and back
[07:14:29] <contrapunctus> moon-child: ah...like plists/alists?
[07:14:44] <moon-child> no like, text
[07:14:47] <moon-child> or binary
[07:15:06] <sm2n> on unix, everything* is an octet-vector
[07:15:07] <gilberth> hayley: Here you go: <http://termbin.com/ir9r> Note that the BSDs get that right.
[07:16:18] <hayley> TRE done goofed
[07:16:51] <aeth> sm2n: that sounds awful
[07:16:52] <gilberth> Yeah, but to be fail, I ought to update it.
[07:17:02] <gilberth> * fair
[07:17:07] <aeth> sm2n: everyone knows that the one true data representation is a 6-length ternary, not octet
[07:17:29] <contrapunctus> moon-child: is there any downside to serializing to s-expressions? An s-expression document format sounded like a fun alternative to XML 😁️
[07:17:49] <aeth> apparently, 0 to 728 thanks to #3r222222
[07:18:05] <gilberth> And I want a script which would ssh into FreeBSD and Darwin for me to run tests.
[07:18:43] <moon-child> aeth: not (expt 3 6)?
[07:18:48] <lagash> contrapunctus: like S-XML?
[07:18:58] <moon-child> contrapunctus: none
[07:19:04] <aeth> moon-child: (expt 3 6) values, but they start at 0
[07:19:31] <aeth> moon-child: (= #3r222222 (- (expt 3 6) 1))
[07:19:44] <moon-child> sure
[07:20:14] <moon-child> that seems rather incidental, though.  And typing 6 2s in a row is not my idea of a fun time
[07:20:25] <sm2n> aeth: please no
[07:20:34] <aeth> importantly, (* (expt 2 8)) is 768, or approximately 729
[07:20:46] <aeth> sorry (* (expt 2 8) 3)
[07:21:00] <aeth> so you get about 3x as much as an octet, a bit less
[07:21:16] <contrapunctus> .o(wat)
[07:21:31] <moon-child> (log (expt 3 6) 2)
[07:21:33] <aeth> I guess you could go (expt 3 5) if you want 0 to 242, but then you get less than an octet
[07:21:36] <moon-child> ~9.5 bits
[07:21:42] <aeth> so you have to go for 6
[07:21:50] <aeth> (to be superior, anyway)
[07:22:41] <hayley> trit ~ twit
[07:23:13] <aeth> contrapunctus: ternary computers are a thing... idk what their "octet" equivalent was, though.
[07:23:37] <moon-child> here were one or two ternary computers, but didn't they fake it?  Two bits per trit?
[07:23:50] <moon-child> *there
[07:24:25] <sm2n> reminds me of that cryptocurrency that claimed to use ternary for "speed and correctness" or something
[07:24:27] <aeth> as far as electronics go, you can get 3 values natively in the hardware, in theory
[07:24:47] <moon-child> well, you can get n values in hardware.  Doesn't mean it's practical
[07:24:57] <aeth> sm2n: a cryptocurrency that only runs on real ternary hardware would easily go to the Moon
[07:25:50] <aeth> https://en.wikipedia.org/wiki/Ternary_signal
[07:26:05] <hayley> No one would fab ternary chips -> no possibility for 51% attack
[07:27:47] <sm2n> https://iota.stackexchange.com/questions/8/why-does-iota-use-a-ternary-number-system
[07:27:47] -ixelp- legacy protocol - Why does IOTA use a ternary number system? - Iota Stack Exchange
[07:27:54] <sm2n> I guess they don't use it anymore
[07:28:11] <sm2n> they also deleted all the signs they ever did off their website, as far as I can tell
[07:28:36] <hayley> "Ternary is the optimal radix, actually Base E (2.71....) is, but you can't make processors like that" How?
[07:29:02] <sm2n> don't ask me
[07:29:11] <moon-child> I read it somewhere, but I forget now
[07:29:36] <moon-child> log_e(k) is some measure of the efficiency of a base-k number system, closer to 1 the better
[07:30:11] <hayley> Still, why e?
[07:30:48] <sm2n> <https://en.wikipedia.org/wiki/Radix_economy>
[07:30:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[07:31:28] <moon-child> cuz euler gets to stick his nose anywhere he likes
[07:32:13] <hayley> https://pbs.twimg.com/media/FJSNBH4UcAAQ8vu?format=png
[07:32:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:46:16] <gilberth> hayley: Watch how {0,2} is different from {1,2}: <http://termbin.com/2pgt>
[07:46:40] <hayley> lol, what
[07:47:09] <hayley> I think haskell-tdfa had a similar bug, where changing repetition would do that too.
[07:47:23] <gilberth> You haven't seen the source, or rather the Haskell source.
[07:47:42] <hayley> Yeah, swapping a + for a * fixes the first bug in https://github.com/haskell-hvr/regex-tdfa/issues/2
[07:47:43] -ixelp- POSIX submatch semantics is broken in two (rare) cases · Issue #2 · haskell-hvr/regex-tdfa · GitHub
[07:47:47] <hayley> gilberth: Would I dislike it?
[07:48:13] <gilberth> There is no general theory on disambiguation, they rather identify loops and do guesses.
[07:48:23] <hayley> lol
[07:48:28] <moon-child> urp
[07:50:07] <gilberth> glibc is wrong, but at least consistent here.
[07:51:41] <gilberth> And BSD wins again.
[07:54:57] <hayley> https://github.com/haskell-hvr/regex-tdfa/issues/2
[07:54:58] -ixelp- POSIX submatch semantics is broken in two (rare) cases · Issue #2 · haskell-hvr/regex-tdfa · GitHub
[07:55:03] <hayley> Er, I was trying to link https://www.pro-lapse.com/
[07:55:03] -ixelp- Time-Lapse Photography, Time Lapse Video | Pro-Lapse
[08:05:18] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:06:25] <dave0> maw
[08:06:52] <hayley> maw
[08:07:39] <dave0> maw hayley, how are you?
[08:08:21] <hayley> Fine, though trying to get the right assignments out of GVN results might drive me mad. You?
[08:09:25] <dave0> i'm good, my neighbors made food so i'm getting a big dinner tonight
[08:09:47] <dave0> they're nice neighbors :-)
[08:11:29] <hayley> LMAO, this is the worst scam I've ever been given.
[08:12:05] <hayley> Someone made ceeba.info which looks like a Commonwealth Bank site. So I put in the account ID 11111111 and password 11111111, and I apparently just "verified my card details". Yeah sure.
[08:12:57] * hayley enters "Fuck Off Cunt Street" and the website takes it.
[08:13:02] <moon-child> once I got spam email with an 'unsubscribe' button
[08:13:04] <dave0> oh close the web page :-(
[08:16:38] * hayley goes to report the scam.
[08:21:16] <gilberth> Heh, that are good testcase. glibc is inconsistent at times also. <http://clim.rocks/gilbert/regex-confusion-a-aa.txt>
[08:21:28] * gilberth augments his testsuite.
[08:21:48] <hayley> Didn't you come up with that one?
[08:22:33] <hayley> Footnote 14 on page 12 of your paper, silly.
[08:24:41] <gilberth> Indeed. The proof that Laurikari's method cannot work. And why is that reference missing? Nah, work in progress.
[08:26:00] <hayley> They use "orbits" cause your sides go into orbit from laughing at it.
[08:26:24] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:28:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:28:12] <gilberth> Yep, and that is not in Laurikari's thesis. It's a fix of sorts, which as you noticed, doesn't quite work.
[08:28:31] <hayley> (all-matches "a*" "aaabaa") ⇒ (#(0 3) #(2 3) #(3 3) #(4 6) #(6 6))
[08:28:34] <hayley> Not quite there yet. Hmm.
[08:29:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:31:18] <hayley> START is being reset incorrectly. Probably because I had to compensate for the "increment too early" trick, and if I have P - x then I don't need it.
[08:36:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[08:38:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:38:35] <hayley> Seems to work now! Though somehow my modification to make the increment-early trick and P - x play nicely doesn't sit too well with me.
[08:38:48] <gilberth> Ok, so we are the only guys, who gets all iteration variants of (a|aa) correct. Fun.
[08:39:55] <hayley> And we get it correct pretty damn fast, too.
[08:41:06] <contrapunctus> hayley: "Fuck Off Cunt Street" rofl
[08:41:56] <gilberth> Well, I have a sound way to implement POSIX disambiguation rules from the very beginning. That's the difference. It looks like the other guys try fix a broken algorithm with caring for some special cases.
[08:42:09] <hayley> Right.
[08:45:43] <gilberth> Hugh?! libtre 0.8.0 seems to be the most recent version already?
[08:46:06] <hayley> I still need to make the SIMD prefix stuff generate information for GVN, because my implementation involves generating the SIMD code and a suffix RE with registers that are never written to.
[08:49:19] * hayley can't find anywhere where GVN makes things faster, still. Weird.
[08:51:36] <moon-child> oh no
[08:51:45] <moon-child> macos is rendering vectors and then resampling them
[08:51:50] <moon-child> imagine not having real-time vector rendering
[08:54:06] <pl> where is it rendering vectors?
[08:55:38] <pl> pretty sure since last decade more and more GUI code on macos simply punts bitmaps (possibly more back when it was more skeumorphic) - there are reasons why Apple's "retina support" depends on scaling 2x
[08:56:17] <moon-child> pl: there's a menu bar thingy, opposite which is a widget bar thingy; if I drag one of the widgets, it transforms, 
[08:56:29] <moon-child> :/
[08:56:41] <pl> (someone tried to trigger DPI-independence in early retina models, turned out nearly no code was still capable of running DPI independent and everything needs to simulate 72 points per inch)
[08:57:07] <moon-child> tech debt all things devours
[08:57:25] <gilberth> Yep, there is no newer version.
[08:57:51] * hayley writes her favourite boilerplate: (LOOP (WHEN (NULL WORK-LIST)) (RETURN)) ...)
[08:58:03] <hayley> Pretend I didn't mess up a paren.
[08:58:16] <gilberth> LOOP WHILE exists.
[08:58:19] <moon-child> not (loop while work-list)?
[08:58:51] <hayley> Eh, I guess.
[08:58:55] <gilberth> I'd rather have (DO () ((NULL WORK-LIST)) ...) ;-)
[08:59:01] <hayley> idk why I started writing work lists like this.
[08:59:21] <gilberth> Because you like RETURN.
[08:59:28] <hayley> Clearly.
[08:59:44] <gilberth> Too much exposure to C or Java does that.
[08:59:57] <hayley> Pardon me, who ported CLEX2 to C?
[09:00:36] <gilberth> And? I still don't use WHEN/RETURN runs instead of COND.
[09:01:54] * moon-child writes all his loops using PROG, because otherwise the program feature will feel sad and neglected
[09:02:23] <aeth> what's a loop
[09:02:28] * gilberth cares for the all too neglected &AUX.
[09:02:34] <aeth> programs are easier to write if they're turing incomplete; no loops!
[09:02:57] <gilberth> aeth: No recursion either?
[09:02:58] <hayley> ((lambda (x) (funcall x x)) (lambda (x) (funcall x x)))
[09:03:24] <aeth> gilberth: recursion? see recursion
[09:04:02] <moon-child> hayley: ENOTYPE
[09:04:11] <gilberth> Reminds me of the Turing completeness proof for the Z3, which has no jumps, working by gluing the program tape to a loop.
[09:04:24] <hayley> moon-child: What ML types do to a mf
[09:04:44] <moon-child> fun fact: printf is turing-complete.  You can use %n to trigger buffer overflow, overwrite return address causing a loop
[09:06:11] * hayley starts abbreviating TRANSITION as TRANS, waits a month to get internet points on r/transprogrammer
[09:06:30] <gilberth> Anyhow, just to make sure, I downloaded the latest version of libtre, which still announces itself as 0.8.0 and I get exactly the same failures as before.
[09:06:37] <moon-child> I have a 'trans' file in my audio library, which transcodes
[09:07:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[09:09:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:10:53] * hayley follows up with REMOVE-DEAD-WRITES, which only removes like 2 more values.
[09:11:28] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 250 seconds)
[09:14:29] <aeth> as opposed to REMOVE-DEAD-WRITERS which would remove a huge amount of good literature... never run it
[09:14:59] <moon-child> hmm?  It only removes the writers, not their work
[09:15:02] <hayley> https://www.youtube.com/watch?v=km_-18Wxxls
[09:15:03] <moon-child> unless it does so retroactively?
[09:15:03] -ixelp- Dead Finks Don't Talk (2004 Digital Remaster) - YouTube
[09:16:35] <aeth> moon-child: removes all traces of them from the historical record and makes it look like literacy was invented in the 20th century... clearly. Well, I guess it would necessarily destroy the historical record before the 20th century because that's the written part (as opposed to archeology)
[09:17:03] <moon-child> oral tradition ftw
[09:20:35] <hayley> .oO(Oh well, I have the best regular expression engine ever and my ex doesn't get to see it. checks license Ah, wait, she does.)
[09:20:48] <moon-child> lol
[09:24:47] <hayley> Probably hasn't heard of the gilberth compiler though.
[09:34:53] <hayley> https://www.reddit.com/r/programmingcirclejerk/comments/rx96ab/a_valid_test_for_a_candidate_would_be_whether/hrhd59z/?context=3 lol
[09:34:54] -ixelp- A valid test for a candidate would be whether he/she is able to google for an algo and pick the correct code form the re [...]
[09:35:46] <dave0> they should train monkeys to code
[09:35:59] <moon-child> can't jerk, I know there are people who actually think this is a good idea
[09:36:03] <dave0> they would be the better candidate
[10:09:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:42:41] <hayley> "Tail call optimization/elimination isn't a property of functional languages - there are tons of non-functional languages with it, like Lua or even C, when compiled with -O3, to name a few"
[10:43:29] * hayley imitates wrong buzzer. EEEEEEEE
[10:43:44] <hayley> Domain error - "C when compiled with -O3" isn't a language. Not that Clojure programmers get their types right.
[10:47:35] <gilberth> Yeah, "implementation" is misspelled here.
[10:47:59] <hayley> https://www.youtube.com/watch?v=V0DGjXE_BQQ
[10:48:00] -ixelp- Wrong Buzzer Sound Effect - YouTube
[10:48:12] <gilberth> ?
[10:48:33] <hayley> Not directed at you, I just wasn't sure how to describe the sound I was thinking of.
[10:48:40] <hayley> Just having the sound would suffice.
[10:49:01] <gilberth> ok, you're bored?
[10:49:28] <hayley> But I want my subject-oriented/message-passing OO language to have tail calls, so that I may write WHILE-TRUE in a (sorta) functional style.
[10:49:56] <hayley> (define (while-true action) (when value (value: action) (while-true action))) ; Beautiful.
[10:50:08] <gilberth> Yes, then just specify the exact rules about which function calls are mere GOTOs.
[10:50:19] <hayley> Well, not functional, but y'know.
[10:50:55] <gilberth> Message sends, or what ever funny you call your subroutines invokations.
[10:51:13] <hayley> In the bytecode, a tail call can only exist as the last instruction. In the language, the tail of an implicit progn. Of course, this gets hairy when you introduce e.g. dynamic variables and anything that manipulates them, as you have to know if they will tail call you.
[10:51:52] <hayley> Still, very feasible IMO. Or I just say "don't count on it" if an implementation either way is plausible.
[10:52:33] <gilberth> If I can't count on it, I can't use it.
[10:52:38] <hayley> Or just start swapping your incredibly large stack, and don't bother with tail calls. Might work.
[10:52:44] <hayley> Right, then don't.
[10:52:56] <gilberth> Where is your GOTO?
[10:53:04] <hayley> LAMBDA
[10:53:48] <gilberth> w/o tail call elimination? Hardly.
[10:54:05] <hayley> With TCE, of course.
[10:54:23] <gilberth> I thought, you wanted to punt here?
[10:54:33] <hayley> But I find it fair to say that some actions will not cause TCE, because they may or may not have cleanup work.
[10:58:22] <hayley> A first order approximation is that anything which diddles dynamic bindings won't tail-call.
[10:59:01] <moon-child> do you have unwind-protect?
[10:59:38] <hayley> Yes.
[11:00:03] <moon-child> and continuations?
[11:00:05] * moon-child hides
[11:01:38] <hayley> Nope.
[11:05:40] *** Joins: shka (~herr@109.231.0.226)
[11:24:41] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[11:58:02] <moon-child> damn
[11:58:15] <moon-child> alexandria compose does the wrong thing apparently w/ more than one arg
[12:00:06] <hayley> What's wrong?
[12:01:28] <moon-child> there are two obvious ways to compose multiple functions and apply them to multiple args
[12:01:48] <moon-child> (f (g x) (g y)) and (f (g x y))
[12:02:20] <moon-child> the former is domain-oriented, and the latter range-oriented
[12:02:44] <moon-child> and generally, I think of compose as domain-oriented
[12:03:25] *** Joins: treflip (~user@user/treflip)
[12:03:42] <hayley> Right.
[12:04:14] <gilberth> I would be surprised by (f (g x) (g y)).
[12:05:18] <gilberth> As I see the arguments as a whole.
[12:05:50] <moon-child> (so, not wrong, but not to my taste)
[12:06:08] <moon-child> this is also apl bias hitting: simpler things go to the right in higher-order context
[12:06:13] <moon-child> gilberth: what do you mean?
[12:08:32] <moon-child> gilberth: in higher-order context, args are less whole and more deliberate.  I may say (f x y z bla quux :something the-other).  But (funcall f all that junk) is much less common.  If I say (mapcar f xs ys), i have specific distinct intention for x and y
[12:08:40] <moon-child> *xs and ys
[12:09:05] <gilberth> For me a function is a mapping of an argument-tuple to another value. And (f o g) is first applying g to that argument-(tuple) and then f [or the other way around, if you are me]. Not to apply 'g' to every argument individually.
[12:10:36] <moon-child> 'or the other way around'  hahaha, I made a similar comment recently
[12:10:53] <moon-child> that the other type of compose (the one you favour) should be flipped
[12:11:01] <moon-child> iow: the root function should always be to the left
[12:11:39] <gilberth> Well, I like postfix. and there its the otherway around. xfg = x(f o g).
[12:11:55] <moon-child> I do not like postfix
[12:11:58] <moon-child> too bottom-up
[12:13:48] <gilberth> Math gets shorter by it as you could skip the argument.
[12:14:32] <moon-child> what do you mean?
[12:14:57] <moon-child> (NB. apl is just as short in prefix as in postfix)
[12:15:39] <gilberth> Anyhow, your compose is not associative. And this is what I don't like.
[12:16:06] <gilberth> moon-child: Instead of saying e.g. f(g(x)) = g(f(x)), I could state fg = gf.
[12:17:06] <gilberth> You find that in my draft. It's there because it's the notation I use. Need to translate that to prefix.
[12:17:54] <moon-child> gilberth: it is associative
[12:18:27] <gilberth> In my case: Instead of \delta(f(r,s)) = f(\delta(r),\delta(s)), I say \delta f = f \delta and am set.
[12:19:07] <gilberth> moon-child: How can that be? When I use your compose and say f o (g o h), how would (g o h) accept two arguments, when h does?
[12:19:29] <moon-child> why shouldn't it?
[12:19:30] <gilberth> Scratch that. /me thinks.
[12:20:33] <moon-child> nb. it seems your \delta f is my f o \delta, because it applies to both r and s :)
[12:22:12] *** Joins: notzmv (~zmv@user/notzmv)
[12:22:32] <gilberth> Still.
[12:24:42] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:25:15] <gilberth> Yes, you write write (f o g) = g(f(x)) ?
[12:26:35] <moon-child> well, I don't use o.  Not entirely settled on symbology yet.  But I have one o such that (f o g) = (f (g x)) = (f (g x) (g y)).  And another such that (f o g) = (g (f x)) = (g (f x) (f y))
[12:26:51] <moon-child> gahhhh
[12:26:55] <moon-child> second one is (g (f x y))
[12:27:27] <moon-child> so the root function is on the left in both cases
[12:27:55] <gilberth> How do you write your substitutions? [new/old] or [old/new]?
[12:30:07] <gilberth> Anyhow, I still find it very odd to talk about the argument[s] as something different than just an object. I prefer to see it to just have one single argument, which of course may be a tuple. You usual say e.g. f: R x R -> R, meaning mapping from the set R x R to R. /me shrugs.
[12:30:07] <moon-child> hmm, I have not had need of such things much, but I guess I would go for new/old
[12:30:13] <moon-child> also I hear some people use \
[12:30:56] <gilberth> Yep and some write the subst in front some at the end. And some do both. A mess.
[12:31:11] <moon-child> fun talk by guy steele on the topic
[12:31:18] <hayley> blah [ old := new ]
[12:31:43] <gilberth> It was fun at my uni, with one prof saying [old/new] and prefix, while the other did [new/old] and postfix.
[12:31:58] <moon-child> I would rather -> or => than :=, if I put old first
[12:33:06] <hayley> Haskell Curry seems to use [old/new]blah...I swear something on lambda calculus said blah [ old := new ].
[12:33:20] <gilberth> That would be clearer, but an assignment would be the reverse.
[12:34:29] <gilberth> Anyhow, doesn't help, you need to tell from context.
[12:35:17] * moon-child points at guy steele talk
[12:35:27] <moon-child> iirc he found one paper that used multiple notations
[12:36:19] <gilberth> Doesn't surprise me.
[12:37:35] <gilberth> What is odd though as you should have your own personal standard. I always write new/old unless I use <- or ->. There is no right or wrong.
[12:40:05] *** Joins: nwoob (~apple@103.135.38.247)
[12:41:04] <nwoob> can someone guide me on learning how to decide which Database to use NoSql or SQL 
[12:41:33] <hayley> SQL probably.
[12:42:02] <gilberth> Hayley recently found \lambda for \epsilon. I have seen that quite often. Brzozowski used it too.
[12:42:57] <nwoob> hayley: why do you say that
[12:43:18] <hayley> Cause there isn't a no-SQL Postgres.
[12:44:15] <gilberth> As hayley said, just go with Postgres and be set.
[12:44:18] <nwoob> I read that NoSQL is schema less but when I read MongoDB docs it says to create schema, which confuses me because if i'm defining schema why shouldn't I use SQL rather
[12:45:53] <gilberth> You don't want a schema?
[12:47:15] <nwoob> I am just syaing that since mongodb is supposed to be schema less then why define schema when using mongodb
[12:47:38] <gilberth> Because you want one?
[12:47:56] <nwoob> then I should use SQL instead
[12:48:09] <nwoob> why would I use nosql
[12:50:55] <nwoob> are my questions stupid?
[12:51:24] <gilberth> There is no such thing as a stupid question.
[12:52:23] <nwoob> could you tell me what things do i need to learn to answer my questions
[12:53:46] <nwoob> also I'm learning CL from david tourtesky book and I'm thinking since I'm familiar with Javascript, I will do exercise in both JS and CL. Is that approach sounds good?
[12:53:48] <gilberth> You want to learn about data bases in general?
[12:54:31] <nwoob> yes, gilberth. I want to learn how to chose which DB to use
[12:55:16] <gilberth> Do you have a specific application in mind? What are your priorities?
[12:55:49] <nwoob> I see people using Mongodb without any reason in every project but I think that's not correct. I might be wrong in thinking that
[12:56:16] <nwoob> I don't have any specific application in mind. Just want to learn in general
[12:56:42] <nwoob> I'll be becoming a software engineer so I need to know these things
[12:57:00] <hayley> It's because https://www.youtube.com/watch?v=b2F-DItXtZs
[12:57:00] -ixelp- Episode 1 - Mongo DB Is Web Scale - YouTube
[12:57:04] * hayley is kidding, that is not a good reason.
[12:57:52] <nwoob> I asked here because I think CL people are good in software engineering
[12:59:35] <gilberth> nwoob: I would just go with SQL and Postgres. It's rock-solid and SQL is a standard.
[13:00:24] <nwoob> ok, could you also give your thought on my learning approach of CL
[13:00:31] <nwoob> also I'm learning CL from david tourtesky book and I'm thinking since I'm familiar with Javascript, I will do exercise in both JS and CL. Is that approach sounds good?
[13:01:13] <gilberth> Why do in both?
[13:02:19] <gilberth> I mean, you will perhaps first do in JS and then translate that JS to Lisp, I imagine. Not a way to learn Lisp.
[13:02:22] <nwoob> i'll be able to know how difficult is to do certain thing in one language as compare to another
[13:02:56] <nwoob> no no i'll not translate JS code to lisp. In both i'll take approach as per the language
[13:06:51] <gilberth> As with natural languages, you get into trouble when you first come up with a sentence in your native language to translate it word by word into the foreign. [Like why with natural languages. When you a sentence in the mother language form and him word for word in the foreign language translate, then functions that not.] :-)
[13:07:51] <gilberth> mwoob: Still sounds like wasted time. I'll try to learn by osmosis.
[13:10:03] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:10:48] <nwoob> Understood, completely rational argument.
[13:11:15] <gilberth> Context switches are expensive :-)
[13:11:16] <nwoob> i'll just write CL when learning CL
[13:20:45] <ck_> which book is that again? "Gentle introduction to .." ?
[13:21:52] <shka> symbolic computation
[13:21:59] <shka> or computing?
[13:22:31] <ck_> the former, but I was asking if that's the book nwoob meant
[13:22:51] <nwoob> yes ck_ that's the book i meant
[13:23:45] <ck_> it's beneficial to look at more than just a single resource, especially in the beginning. That's my advice
[13:24:58] <nwoob> why is that so
[13:25:16] <nwoob> and which other resource do you have in mind
[13:29:44] <ck_> because "programming" or "programming in common lisp" is not a subject like Geometry where you can get one textbook, open page 1, and work on from there
[13:30:11] <ck_> even there you can see that some texts will be more agreeable to one person than others
[13:30:30] <ck_> one other book that is often recommended is https://gigamonkeys.com/book/
[13:30:30] -ixelp- Practical Common Lisp
[13:46:33] <selwyn> there are also not that many texts to choose from
[13:46:36] <selwyn> unlike geometry
[13:51:43] <shka> the problem partly is that PCL is actually really good
[13:51:46] *** Joins: semz_ (~semz@user/semz)
[13:51:55] <shka> hard to improve upon it 
[13:52:21] <shka> the only problem being that it is slightly old
[13:52:34] <selwyn> the examples are a bit underwhelming
[13:52:41] <selwyn> (nowadays)
[13:54:50] <ck_> I run (test-+) many times a day, just for peace of mind
[13:56:03] <pl> nwoob: NoSQL is just an umbrella term for non-relational database
[13:56:40] <hayley> CLOSOS when
[13:56:41] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[13:57:06] <selwyn> you only need a few good texts imo
[13:57:24] <selwyn> similar situation in e.g. quantum field theory
[13:57:53] <selwyn> in a way its preferable because newbies won't choose bad textbooks by mistake
[14:01:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[14:01:10] <ck_> all I wanted to say is that, in my opinion and experience, looking at A Gentle Introduction.. only is maybe not the way to go
[14:16:07] <nwoob> ck_ should i learn from two book simultaneously or finish CL then start with PCL
[14:18:23] <ck_> find which one works best for you, by skimming through for example
[14:19:09] <ck_> like I said, this isn't something you can really "learn" at one time, in the sense of "I didn't know how to differentiate functions, and now I do, my learning process is over"
[14:19:39] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:20:01] <ck_> have fun with it. good luck!
[14:21:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:22:54] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[14:23:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:25:02] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[14:43:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[14:45:24] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:47:13] <hayley> Do we need to align looping code to 16 bytes or similar these days?
[14:49:38] <dave0> hayley: i have never seen it make a difference, but OTOH i have only tried ~3 different x86's
[14:50:11] <dave0> about 3 _old_ x86's
[14:51:05] <dave0> i _have_ blown the instruction cache by unrolling my code and made it 2x slower
[14:53:57] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[14:54:39] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Read error: Connection reset by peer)
[14:59:33] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:00:46] *** Joins: waleee-cl (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[15:02:13] <shka> hayley: no, the only reason to unroll loop is to use multiple execution ports on the cpu
[15:02:22] <shka> which is in itself a can of worms 
[15:03:14] <shka> well, the only reason that i encounter on a semi regular basis 
[15:03:35] <dave0> i think i said unroll .. hayley was saying align the machine code
[15:03:45] <shka> oh, right
[15:03:48] <shka> hayley: sorry!
[15:04:26] <shka> hayley: GCC at least does that, i don't know if this is a relic of the past or it really matters 
[15:05:28] <shka> my gut feeling is that it will matter, because memory access continues to be restricted by word size, but i never was bothered by that to actually check
[15:05:46] *** Joins: kevingal (~quassel@149.157.101.196)
[15:07:00] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[15:10:16] *** Quits: kevingal (~quassel@149.157.101.196) (Ping timeout: 250 seconds)
[15:11:01] *** Joins: kevingal (~quassel@2001:770:c0:401:8517:a88f:26b9:2190)
[15:15:37] *** Quits: nwoob (~apple@103.135.38.247) (Ping timeout: 256 seconds)
[15:15:47] <hayley> https://www.raspberrypi.com/news/raspberry-pi-direct-buy-rp2040-in-bulk-from-just-0-70/
[15:15:47] -ixelp- Raspberry Pi Direct: buy RP2040 in bulk from just $0.70 - Raspberry Pi
[15:15:59] <hayley> gilberth: How many ARM chips do you need for the rest of your life?
[15:20:36] <shka> hayley: asked friend who is into low level stuff, he states that, in regards to memory alignment, you would be hard pressed to really encounter situation when it would make a difference  
[15:21:15] <shka> and it would mostly involve intentionally breaking code
[15:22:57] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[15:25:02] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 240 seconds)
[15:28:54] <phoe> I need word support
[15:29:15] <phoe> is there a term coined for when a product is so good that it's hard for the next versions to gain traction? like Windows XP versus Windows Vista
[15:29:28] <phoe> where windows XP was so good that Vista initially saw little to no adoption
[15:29:37] <shka> phoe: "venerated"
[15:29:47] <phoe> then Windows 7 versus Windows 8, Windows 8.1 versus Windows 10 and so on
[15:30:02] <contrapunctus> phoe: "eats its children"
[15:30:21] <shka> windows xp, the khronos 
[15:31:28] <phoe> contrapunctus: thanks
[15:32:03] <selwyn> um
[15:32:26] * selwyn thinks
[15:32:44] <shka> https://www.youtube.com/watch?v=RGJitqXfmhE&list=PLIty5aVTu-7HRMefkcFAjl9izTCTAxq-u
[15:32:45] -ixelp- Songs of a Distant Earth Part 1 of 7 (HQ) - Evolution - YouTube
[15:32:53] <shka> Chronos
[15:32:56] <shka> here you go
[15:33:19] <shka> phoe: i would use word "venerated"
[15:33:52] <selwyn> i don't think venerated implies that the children don't live up to the achievements of the predecessor
[15:34:28] <shka> hmmm
[15:34:53] <contrapunctus> (It's the phrase Alan Kay used for Lisp in one of his talks, IIRC.)
[15:35:09] <hayley> And Smalltalk too.
[15:35:12] <selwyn> i would say that 'windows vista, and in fact all future windows versions, lay in the shadow of windows xp'
[15:35:32] <selwyn> i am only familiar with it in the context of 'capitalism eats its children'
[15:37:16] <hayley> IIRC the context is that it is easier to bend Lisp or Smalltalk to one's liking, rather than producing a new paradigm or language. But I don't think that's a very bad thing.
[15:37:33] <shka> selwyn: revolution eats its children
[15:37:56] <shka> "having big shoes to fill" is also idiom
[15:38:24] <selwyn> there must be some terms used to describe royalty that cover this 
[15:38:52] <shka> and "windows xp shoes were a size to big for vista to fill"
[15:39:00] <selwyn> til phoe is a windows xp fan
[15:39:00] <shka> is at least playful
[15:41:14] <ck_> X-p could be an emoticon "heavy lies the crown"
[15:42:01] <hayley> Σ:]
[15:42:22] <selwyn> reminded that i gained and lost a fortnite crown yesterday
[15:42:26] <selwyn> easy come easy go
[15:42:28] <contrapunctus> phoe, shka: ah, I like "having big shoes to fill" too.
[15:42:41] <ck_> I don't know what that means so.. I'm happy for you. Or sorry that happened.
[15:42:45] <shka> selwyn: so how is your thesis going? :P
[15:42:54] <selwyn> ck: i feel both emotions
[15:43:07] <selwyn> shka: going to finish the conclusion today
[15:43:17] <selwyn> then i will have a first draft that is not too shitty
[15:43:23] <shka> ok, then i excuse you from fortnite 
[15:44:00] <contrapunctus> moon-child, selwyn: oh, on the subject of persisting ~CLOS~ objects (and the discussion of using images for that), would Clobber/cl-prevalence do something like that?
[15:44:02] <selwyn> yesterday was not the most productive tbh, i deleted some pages
[15:44:30] <selwyn> deleting pages from a thesis is not necessarily as good a feeling as deleting code
[15:45:02] <selwyn> contrapunctus: i don't have much personal experience in this
[15:45:03] <ck_> it will be outweighed by the "ship it!" feeling when you submit it
[15:47:38] <selwyn> i would look into bknr.datastore
[15:47:50] <selwyn> would you want to have one document per file?
[15:49:36] <selwyn> ck: weird thing about finishing a phd is that people seem to assume that i am already done
[15:53:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:54:31] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[15:54:54] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 250 seconds)
[15:55:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:14:53] <contrapunctus> selwyn: ah, I was reading about it yesterday...yeah, one document per file.
[16:26:16] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[16:31:55] <selwyn> well, idk how compatible that is
[16:31:59] <selwyn> sorry
[16:32:25] <selwyn> i remembered this thing called 'clef' which is like version control but for sexps iirc
[16:32:29] <selwyn> it may be relevant for your purposes
[16:32:33] <selwyn> was presented at a previous els
[16:49:16] <ck_> selwyn: I'd like to formally challenge you to a lift-off. most consecutive pull-ups, deadline mid-year, normalized by body weight, judgeless web 2.0 honor system. are you in or are you out
[16:54:07] <contrapunctus> ck_, selwyn: uh, how about the most progress towards ones body goals? I wouldn't mind participating 😅️
[16:54:18] <contrapunctus> * one's
[16:54:57] <ck_> I'll have a talk with the sponsors
[16:56:02] <shka> so i am browsing report about covid vaccination in poland
[16:56:13] <shka> and to be specific, impact on the mortality
[16:56:38] <shka> and they were kind enough to include not just covid mortality, but all causes of death
[16:57:24] <shka> vaccination reduces 4 times mortality for 61-70 year olds for all causes of death
[16:57:47] <shka> ... and people wonder why i am a little bit suspicious about the official data
[17:00:16] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[17:14:04] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:14:08] <gilberth> hayley: I could use one as a frontend processor for a B32.
[17:14:27] <contrapunctus> shka: "It was super effective!" 😏️
[17:14:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:15:24] <shka> contrapunctus: more likely either covid infections are under-reported or there is high mortality among the covid survivors because of other health problems
[17:15:25] <selwyn> ck: well i already started training this morning 8)
[17:15:30] <selwyn> yeah lets do it
[17:15:45] <selwyn> contrapunctus: lets all join in
[17:15:54] <shka> second hypothesis is consistent with what doctors have been telling me for some time actually
[17:15:57] <contrapunctus> shka: "I didn't just find the cure to El ~Cancer~ COVID. I found the cure to El Everything."
[17:16:46] <shka> contrapunctus: yeah, i will disregard this hypothesis :P
[17:16:51] <contrapunctus> xD
[17:17:53] <shka> still, there is no way that those numbers would be consistent without  those two
[17:18:37] <shka> 2 high mortality among unvaccinated  seem to paint grim picture of the REAL death toll of covid in Poland
[17:19:04] <selwyn> well, you already argued convincingly that the death toll is high
[17:19:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:19:39] <shka> selwyn: yeah, but it looks like covid may be responsible for up to 50% of deaths in Poland 
[17:19:43] <shka> which is just insane
[17:19:54] <selwyn> its hard to believe
[17:19:56] <shka> way higher then I would ever assume
[17:20:01] <selwyn> i didn't think poland was a very old country
[17:20:08] <shka> it is
[17:20:29] <shka> there was major migration wave into UK, you may have notice :P
[17:20:36] <shka> and same for Germany
[17:20:58] <ck_> yeah I see them .. in the trains .. on the plains .. with their spherical covid plushies
[17:21:41] <shka> so anyway, you may imagine what this did to the overall population structure of Poland
[17:21:44] <ck_> a menace really, and now you tell me they're even protected by a magical vaccination from *any* cause of death
[17:22:20] <selwyn> poland seemed really underpopulated when i visited (not necessarily in a bad way)
[17:23:04] <shka> ck_: i suspect that the results would be completely different in other country, our government really put a lot of effort into sweeping the problem under the rug 
[17:25:34] <selwyn> for a long time there were many fewer cases registered in northern ireland than the adjacent regions, between which there is an open border
[17:26:06] <ck_> the border is not as permeable to bureaucracy I'd assume? :)
[17:26:58] <selwyn> it apparently is, though at great cost to everything else
[17:27:36] <selwyn> to cut a long and boring story short, the effective border for many purposes is now in the irish sea instead of on land
[17:33:09] <shka> which is funny, because this will eventually lead to the reunification of ireland
[17:33:27] <shka> since north ireland is better connected to the ireland :P
[17:35:15] <selwyn> shka: probably
[17:35:24] *** Quits: kevingal (~quassel@2001:770:c0:401:8517:a88f:26b9:2190) (Quit: No Ping reply in 180 seconds.)
[17:36:14] <selwyn> and such an outcome will be achieved in large part thanks to those who wanted northern ireland to stay in britain
[17:36:34] <selwyn> who truly have galaxy brains
[17:36:41] *** Joins: kevingal (~quassel@2001:770:c0:401:896d:e00e:eb5c:d428)
[17:54:41] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 256 seconds)
[17:57:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[17:59:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:04:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:05:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:11:23] <selwyn> i wonder where the perceived toll of covid is the highest
[18:11:43] <selwyn> because it seems like lots of areas that were hit the hardest simply don't give a shit
[18:14:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[18:16:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:19:22] <phoe> I need English support
[18:19:36] <phoe> how do you refer to the period between years? like late 2020 and early 2021
[18:20:03] <phoe> so basically including the "edges" of the years
[18:23:17] * gilberth writes char *s = "abfnrtv", *p = strchr (s, c); if(p) c = "\a\b\f\n\r\t\v"[p-s]; and believes it is clever.
[18:24:17] <gilberth> Someone please rescue me!
[18:26:50] <gilberth> phoe: Sorry, I can't help you. When we say "between the years" we mean the time between Christmas and New Year. That very time, you actually get things done as a business owner. ;)
[18:28:06] <selwyn> phoe: can you be more specific?
[18:28:14] <selwyn> and does this idiom actually exist in other languages
[18:28:43] <selwyn> between christmas and new years is sometimes called 'the dead days'
[18:28:54] <selwyn> however, without context, a native speaker might not understand what they were
[18:29:02] <selwyn> it may also be an anglicism idk
[18:29:03] <contrapunctus> phoe: I'd probably write "between late 2020 and early 2021", or "between <month> 2020 and <month> 2021", or (corporate speak?) "between Q4 2020 and Q1 2021" ...
[18:29:09] <gilberth> Interesting, so you have a term for that, too?
[18:29:27] <gilberth> But phoe said "early 2021", that would be beyond New Year.
[18:29:31] <selwyn> yes
[18:30:43] <contrapunctus> phoe: "the holidays" is used in American English for the month of December to the first of January, I think
[18:30:44] <phoe> gilberth: selwyn: contrapunctus: I actually said "the 2020/2021 winter"
[18:30:46] <phoe> works well enough
[18:32:18] <edgar-rft> as a non-native englishman I know the time between late december and early januar as "turn of the year"
[18:32:56] <gilberth> edgar-rft: Jahreswechsel?
[18:33:37] <selwyn> i would prefer 'the winter of 2020-21'
[18:33:53] <selwyn> in written language
[18:34:50] <edgar-rft> I think selwyn is the ony person here who speaks english every day, I mainly speak german :-)
[18:34:52] <gilberth> phoe didn't say how long the period is. Winter to me is December to February.
[18:35:21] <selwyn> although i took literature at school and enjoyed it a lot i make an embarassing amount of mistakes
[18:35:25] <selwyn> that got worse over lockdown
[18:35:51] <gilberth> You unlearned speaking?
[18:36:09] <selwyn> i guess
[18:36:20] <gilberth> uff
[18:36:41] <selwyn> i didn't learn to speak until i was 3, at which age i learnt to speak, read and write all at pretty much the same time
[18:36:43] <edgar-rft> at least winter *feels* much longer during lockdown
[18:36:48] <selwyn> i can't remember a time when i couldn't read
[18:37:33] <selwyn> side effect of this is that much of my vocabulary i encountered while reading instead of speaking
[18:38:09] <selwyn> so i make amusing pronunciation mistakes :p in particular those of english place names
[18:38:21] <selwyn> which are often impossible to guess
[18:38:22] <gilberth> I can. :-) I remember asking about the letters, so that I could learn reading. Bothered me that I could not.
[18:38:56] <gilberth> selwyn: All of English is impossible to guess.
[18:39:02] <edgar-rft> english names have the same problem than german names, many of them are of non-native origin
[18:39:03] <selwyn> well
[18:39:33] <selwyn> some of english is more impossible to guess than other parts of it
[18:39:51] <gilberth> egdar-rft: But in general we write as pronounced. Unlike this folk on the island over there.
[18:40:47] <edgar-rft> gilberth: I know very funny examples from non-native people how wrong their names are written in german passports
[18:40:49] <selwyn> although writing things as pronounced is a great goal to have, i became convinced recently that no language actually achieves it in totality
[18:41:28] <gilberth> edgar-rft: Granted, a hard concept for where you live. This spelling = pronunciation thing.
[18:41:46] <selwyn> mesut ozil writes his name as oezil sometimes? even though ''o exists in german? idgi
[18:42:59] <edgar-rft> in germany people think that "oe" is the international version of "ö"
[18:43:06] <selwyn> oh
[18:43:37] <edgar-rft> try to write an "ö" in ASCII :-)
[18:44:15] <gilberth> selwyn: Of course not. But languages differ in that. I had no trouble with Russian pronunciation of unknown words, while I have the feeling that with English I have to memorize with every word. And my English pronunciation is pretty bad, perhaps because I speak very little. Whom should I speak to?
[18:44:36] <selwyn> reminded that i have to correct 'schrodinger' to 'schr\"{o}dinger' 800 times in my thesis
[18:44:52] <selwyn> happily find/replace exists
[18:44:59] <gilberth> There is no international version of "ö".
[18:45:13] <selwyn> you had no trouble with pronunciation of russian?
[18:45:32] <gilberth> selwyn: "Ansätze"?
[18:45:53] <gilberth> selwyn: No, I had a good teacher.
[18:46:02] <gilberth> Long ago. Don't remember much.
[18:46:16] <edgar-rft> there are many german names that write "ae", "oe", "ue" but are pronounces as "ä", "ö", "ü"
[18:46:42] <gilberth> edgar-rft: Itzehoe? ;-)
[18:47:16] <edgar-rft> yes :-)
[18:47:39] <gilberth> I see. Be lucky that I am not from there.
[18:48:31] <edgar-rft> that's what I said about names of non-german origin, some are prononced like this or otherwise :-)
[18:48:33] <selwyn> ansatze is the plural of ansatz?
[18:48:57] <gilberth> Ansätze. With umlaut, selwyn.
[18:49:01] <edgar-rft> singular = Ansatz, plural = Ansätze
[18:49:09] <selwyn> but why did you say it
[18:49:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[18:49:44] <gilberth> Didn't you ask about that recently?
[18:49:53] <selwyn> oh yeah i did
[18:51:39] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:51:56] <selwyn> russian had some reforms right that made it easier to pronounce
[18:53:38] *** Joins: treflip (~user@user/treflip)
[19:16:35] <shka> gilberth: English pronunciations is a mess 
[19:16:50] <shka> legacy of a mongrel language 
[19:17:54] *** Quits: sm2n (ae95cb1267@user/sm2n) (Remote host closed the connection)
[19:17:54] *** Quits: sirufer (68f46fc7c3@user/sirufer) (Remote host closed the connection)
[19:17:54] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (Remote host closed the connection)
[19:17:54] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (Remote host closed the connection)
[19:17:54] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (Remote host closed the connection)
[19:18:29] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[19:18:42] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[19:18:45] *** Joins: sirufer (68f46fc7c3@user/sirufer)
[19:18:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:18:49] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[19:20:05] <selwyn> i suspect that english has lots more variants of vowels and maybe consonants than other languages
[19:21:15] <ck_> hey can someone help me out real quick: what's the word for "data that has become unusable", not "invalidation"..
[19:21:43] <ck_> like after cosmic rays switch your bits, or the intern has rm -r /'d something.
[19:22:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:02] *** Quits: pjb (~pjb@user/pjb) (Read error: Connection reset by peer)
[19:23:21] <selwyn> unrecoverable?
[19:23:41] <selwyn> there is corrupted as well
[19:23:51] <selwyn> doesn't feel right to describe accidental deletion
[19:24:05] <ck_> corruption! thank you.
[19:24:29] <ck_> I know what you mean and agree, but in the context of "business", it is the word to use
[19:26:45] <selwyn> happy to help
[19:41:35] *** Joins: Catie (~user@user/catie)
[19:51:49] <ck_>   ~.
[19:52:27] <ck_> sorry, that was me trying to disconnect
[19:52:34] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:54:51] *** semz_ is now known as semz
[19:59:04] <gilberth> ck_: That worked last century.
[20:04:07] <moon-child> eh, still works for me...
[20:05:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[20:05:59] <gilberth> moon-child: No ^] close RET yet?
[20:06:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:07:43] <moon-child> haha
[20:07:57] * moon-child prefers NOT to send his messages in cleartext
[20:08:13] <moon-child> although with irc, you may not have much of a choice...
[20:09:11] <gilberth> Does it matter on a LAN? Or a VPN?
[20:12:20] <moon-child> vpn probably not--actually, I at one point point dabbled with the idea of using something like that for auth
[20:12:52] <moon-child> I don't really trust smtp/imap auth/encryption, but I kinda wanted email on my phone.  Solution: run a vpn on the server, and unauthenticated smtp/imap server listening on localhost
[20:13:10] <moon-child> lan, though: probably matters if you permit wifi
[20:17:06] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[20:17:25] *** Joins: semz (~semz@user/semz)
[20:22:21] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[20:22:41] *** Joins: semz (~semz@user/semz)
[21:03:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:04:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:10:26] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:12:18] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:28:35] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:29:05] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[21:38:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:40:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:49:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:52:31] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:16:25] <sham1> PGP, S/MIME pls
[22:19:25] <ck_> MIME .. sounds like a french silent performer.  untrustworthy if you ask me
[22:25:20] <epony> SASL, IMAP+TLS, SMTP+TLS
[22:25:43] <epony> and valid SMTP setup for TLS relay (only)
[22:26:18] <epony> then, clear text email is.. just info, encrypt your files / payload
[22:32:03] <White_Flame> S/MIME, that's the subsettit on seddit.com, right?
[22:35:38] <ck_> that's absolutely sight
[22:38:53] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:55:41] <ck_> (it's unsound though, because "MIME".  buy my mixtape)
[22:55:43] <ck_> good night
[22:59:02] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net) (Ping timeout: 240 seconds)
[22:59:02] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-101F-static.midco.net) (Ping timeout: 240 seconds)
[23:03:36] <selwyn> goodnight
[23:07:26] <shka> gosh, my thighs are aching
[23:08:10] <epony> you can sqeeze lemons with hands too
[23:08:13] <shka> try doing new type of cardio and suddenly you will find out that some muscles in your body are not as fit as you thought
[23:09:00] <epony> you know, crabs dont use two legs to do their washing either
[23:09:12] <shka> memes! https://www.youtube.com/watch?v=5tb3Olz1kd0
[23:09:12] -ixelp- REMATCH Could A-10 Warthogs Have Stopped The 1941 WWII Pearl Harbor Attack? (Vid 47b) | DCS - YouTube
[23:09:58] <epony> the millenium falcon was too late
[23:10:34] <shka> getting shot down in A10 by a Zero
[23:10:54] <shka> that's why simulators exist :P
[23:11:17] <epony> LISP is a SIM too
[23:13:27] <selwyn> simulation did not help the us navy irl
[23:14:06] <selwyn> they simulated - years before pearl harbour - the effect of a surprise attack on the base more than once
[23:14:12] <selwyn> and concluded that they would be screwed
[23:14:45] <edgar-rft> simulation helped them to get screwed, is that no help?
[23:14:51] <shka> well, it is just one base 
[23:14:53] <selwyn> well
[23:15:03] <selwyn> they proceeded to make zero adjustments
[23:15:09] <selwyn> and then they did get screwed irl
[23:15:12] <shka> don't start war with a whole continent you dummy
[23:16:00] <shka> lol, A10 kamikazes jap carrier
[23:16:04] <shka> it is just to funny
[23:16:51] *** Quits: Oddity (~Oddity@user/oddity) (Remote host closed the connection)
[23:18:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:18:14] <shka> it is so funny to see A10 doing aerial combat actually
[23:18:25] <shka> for true warriors
[23:18:30] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:18:43] <shka> you fight the enemy and your own plane at the same time :P
[23:32:19] <selwyn> only a few days until the jwst arrives at its destination
[23:32:26] <shka> cool
[23:32:45] <shka> mirror will have to be set up
[23:32:51] <shka> which will take more time 
[23:33:03] <selwyn> >  those big 12.5-millimeter moves for each segment are split up into many, many short moves that happen one actuator at a time. Scripts sent from the Mission Operations Center will direct this process
[23:33:11] <selwyn> perhaps that is what the javascript interpreter is for
[23:34:08] <sm2n> there is a javascript interpreter?
[23:34:31] <shka> "should have use lisp instead"
[23:34:51] <selwyn> https://news.ycombinator.com/item?id=19737663
[23:34:53] -ixelp- James Webb Telescope will run a proprietary JS interpreter by a bankrupt company | Hacker News
[23:35:15] <shka> god damn, beach and his "lengths people go just to avoid using CL"
[23:35:44] <selwyn> and i get mad when people use python in science lol
[23:36:30] <epony> you won't believe what CPUs they use in space
[23:36:51] <selwyn> honestly it is weird
[23:37:07] <epony> https://en.wikipedia.org/wiki/Rad_hard
[23:37:26] <epony> no space for recursion
[23:37:42] <selwyn> they use asics with milliwatt power consumption to do the data processing
[23:37:54] <selwyn> and then put js on the telescope anyway
[23:38:02] <shka> ikr
[23:38:29] <selwyn> have to concede i am jealous lisp can't be on there
[23:38:38] <shka> seriously, it would be shockingly easier if they would simply use CL
[23:40:45] <White_Flame> they could probably ask apple for a rad hardened m1 and yeah use something real
[23:41:13] <shka> White_Flame: m1 did not exist when that program started
[23:41:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:41:22] <White_Flame> I know
[23:41:51] <shka> but if you can run js interpreter you can run lisp implementation
[23:41:56] <shka> i think, at least
[23:42:04] <gilberth> Well, at least JS shares with Lisp the ability to patch a running system.
[23:42:14] <moon-child> White_Flame: why rad hardened m1?
[23:42:19] <moon-child> I mean, it still has tiny transistors...
[23:42:41] <White_Flame> just get a more normal, low-power CPU and go for it
[23:43:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:43:03] <epony> the nodes below 150-100nm are too small and susceptible
[23:43:07] <selwyn> if cosmic rays can fuck up an election in belgium
[23:43:08] <White_Flame> I mean, on a small sipping whatever they use, running JS, the total watt-hours per computation might be big
[23:43:13] <selwyn> what can they do to a macbook in space
[23:43:40] <epony> apple uses the mobile chips tooling from arm and the lowest available node size from TSMC which is 7-10nm
[23:43:48] <White_Flame> for overall energy budget, often more powerful thing running quicker is less energy overall
[23:44:01] <epony> the 5nm is not realistic in production yet
[23:44:21] <epony> that's not even RF safe
[23:46:57] <epony> mobile and embedded SoCs are fantastic but not really universal and powerful ;-) despite popular marketing
[23:47:29] <epony> and need specialised programming and changes in software
[23:47:54] <epony> then again, so do spacecraft ;-)
[23:49:16] <White_Flame> but of course, those powerful things spend a lot of resources emulating a virtual view of things for binary compatibility, instead of letting the compiler produce optimized code for a very particular individual processor
[23:49:46] <White_Flame> binary compatibility is the bane of computing.  We need to stop sending blind machine code blobs around, unless like this we know the _exact_ CPU it's going to run on
[23:49:52] <White_Flame> then things like this would have far better options
[23:50:04] <shka> White_Flame: +1
[23:50:09] <moon-child> (incf White_Flame)
[23:50:24] <shka> *standing ovation*
[23:50:29] <White_Flame> it's certainly a common complaint from me :-P
[23:52:10] <White_Flame> the only thing I've really heard of in this space is the vaporious Mill CPU
[23:52:16] <White_Flame> in recent years
[23:52:49] <White_Flame> and of course IBM's various mainframish ABIs
[23:53:06] <sm2n> death to binaries!
[23:53:15] <selwyn> now my grip strength is failing me
[23:54:16] <shka> sm2n: grab pitchfork and torches
[23:54:41] <sm2n> http://fare.tunes.org/articles/ll99/mpfas.html
[23:54:42] -ixelp- Metaprogramming and Free Availability of Sources Two Challenges for Computing Today
[23:55:05] <shka> White_Flame: i sincerely agree with you, and i hope that mill come out
[23:55:09] <shka> hopefully soon
[23:55:17] <shka> but i start to have me doubts
[23:55:30] <White_Flame> https://millcomputing.com/topic/on-the-lack-of-progress-reports-from-the-mill-project/#post-3702
[23:55:32] -ixelp- On the lack of progress reports from the Mill project – Mill Computing, Inc
[23:55:55] <White_Flame> Ivan does seem like a pretty straightforward guy
[23:56:26] <moon-child> he continues to post on comp.arch, so he is evidently not dead
[23:56:34] <White_Flame> that's good
[23:57:55] <selwyn> what is special about mill
[23:58:05] <sm2n> are newsgroups still alive?
[23:58:06] <White_Flame> it's a clean-sheet rethink
[23:58:18] <White_Flame> but it offloads the CPU details & scheduling to the compiler
[23:58:23] <moon-child> sm2n: not particularly
[23:58:33] <White_Flame> and has a software model of local compilation
[23:58:58] <White_Flame> with the compiler basically being a protected back-end thing on the machine
[23:58:59] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[23:59:38] <White_Flame> the CPU is a sea of ALUs, load/stores, etc and varyingly-wide instructions to route them all per cycle
