[00:33:07] *** Quits: RoKenn_ (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:33:10] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:37:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[00:39:27] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[00:48:31] *** Joins: bewees (~bewees@user/bewees)
[00:49:57] <bewees> Hi, is there an abbreviation for adding the parameters of a parent class to the derived class or do I have to write each base class parameter manually to the derived class constructor parameters? https://dpaste.com/5P2HMUTVA 
[00:58:04] <cbreak> bewees: call the base class constructor
[00:58:37] <cbreak> that's as short as you can get
[01:04:44] <bewees> cbreak, If I want to add additional parameters I have to manually combine them like in the paste right?
[01:07:06] <cbreak> yes
[01:07:16] <cbreak> unless you make a class for the params
[01:09:12] <bewees> Thanks
[01:19:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:19:34] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:21:34] *** Joins: JeffH (~harrisja@184-96-219-220.hlrn.qwest.net)
[01:34:22] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[01:51:49] *** Quits: JeffH (~harrisja@184-96-219-220.hlrn.qwest.net) (Ping timeout: 252 seconds)
[02:05:31] *** Quits: bobb_ (~bobb_@dslb-092-074-254-082.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:13:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[02:18:52] <bewees> I noticed people use `int m_val; MyClass(int val) : m_val(val) {}`. Why not use `int val; MyClass(int val) : val(val) {}`? Is there any advantage over the other?
[02:47:45] <lumberluch0> other than the fact that the latter can trigger shadowing warnings in some compilers, I don't think so
[02:50:43] *** Joins: ferdna (~ferdna@user/ferdna)
[02:52:46] <cbreak> bewees: it allows you to have an accessor named val
[02:53:17] <lumberluch0> oh right! int MyClass::val()
[03:00:58] *** Quits: ali1234 (~al@user/ali1234) (Ping timeout: 258 seconds)
[03:05:33] *** night_wulfe_ is now known as night_wulfe
[03:14:39] *** Joins: ali1234 (~al@user/ali1234)
[03:16:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:21:08] <bewees> Interesting, thanks. Seem it's becoming more popular to use the variable name as accessor than using get_val() or set_val(). Instead: <type> val() and void val(<type>). But I don't like using m_val for the class variable name. Hmm
[03:35:17] <lumberluch0> how about val_?
[03:36:20] <bewees> Hmm maybe better, I will look at some style guides and projects and see what the majority is using :-)
[03:47:42] <cbreak> bewees: only crazy people and the stdlib uses val(x) as setter
[03:48:02] <cbreak> having getter named after the thing is reasonable, but setters should be setThing or set_thing
[03:57:04] <bewees> Gotcha. Also I'm going to use m_, because _var can clash with _FOO (upperscore) according to https://stackoverflow.com/a/1228719
[03:57:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[04:01:45] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[04:20:19] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:20:44] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:49:30] *** Quits: DSpider (DSpider@2a02:2f00:2ff:ffff::646c:635d) (Quit: Leaving)
[04:54:26] *** Quits: bewees (~bewees@user/bewees) (Remote host closed the connection)
[05:01:09] *** Joins: The_Jag (~The_Jag@host-79-13-46-237.retail.telecomitalia.it)
[05:03:23] *** Quits: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[05:52:56] *** Quits: ethrl (uid524335@user/doforlove33) (Read error: Connection reset by peer)
[05:54:28] *** Joins: ethrl (uid524335@user/doforlove33)
[06:04:55] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:07:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[07:18:51] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[07:21:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[07:43:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:44:25] *** Quits: indy (~indy@dsl-static-104.213-160-167.telecom.sk) (Read error: Connection reset by peer)
[07:44:52] *** Quits: lumberluch0 (~lumbermb@191.114.114.152) (Ping timeout: 244 seconds)
[07:47:29] *** Joins: indy (~indy@dsl-static-104.213-160-167.telecom.sk)
[08:01:22] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:08:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:40] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:30:25] *** Quits: Armoured (~kifir@host-82-52-63-74.retail.telecomitalia.it) (*.net *.split)
[08:30:25] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[08:30:25] *** Quits: DrinkyBird (~drinkybir@sprawl.drinkybird.net) (*.net *.split)
[08:30:34] *** Joins: DrinkyBird (~drinkybir@sprawl.drinkybird.net)
[08:31:10] *** Joins: undeclared (nullx@user/undeclared)
[08:31:46] *** Joins: Armoured (~kifir@host-82-52-63-74.retail.telecomitalia.it)
[08:48:01] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:48:36] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:51:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[10:58:59] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 258 seconds)
[11:08:40] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[11:17:14] *** Joins: meator (~meator@user/meator)
[11:18:46] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:22:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:50:41] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:50:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:53:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[12:10:03] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:22:07] <louiz> I just name them “var” (no m_, no _), and use this-> all the time
[12:33:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:35:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[13:08:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:08:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:10:20] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:21:29] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:31:03] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[13:48:46] <cbreak> louiz: that won't help with having an accessor named var
[13:54:10] <louiz> indeed, but I also don’t use accessor named “var”
[13:57:26] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:59:15] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 260 seconds)
[14:02:22] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[14:12:35] *** Joins: jemius (~jemius@2a01:4f8:c0c:8564::1)
[14:14:47] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:19:06] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[14:20:03] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:24:27] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[14:31:57] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[14:34:25] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 260 seconds)
[14:39:23] *** Quits: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[14:42:22] *** Joins: meator (~meator@user/meator)
[14:43:39] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:48:23] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 264 seconds)
[15:00:19] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[15:05:05] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[15:06:22] *** Joins: Guest85 (~Guest85@wificampus-098233.grenet.fr)
[15:06:31] *** Joins: argonautx (~argonautx@i5E86728F.versanet.de)
[15:26:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:31:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[15:34:09] *** Quits: Guest85 (~Guest85@wificampus-098233.grenet.fr) (Ping timeout: 256 seconds)
[15:59:40] *** Joins: DSpider (DSpider@86.127.146.140)
[16:17:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:19:12] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:48:37] *** Joins: Guest90 (~Guest90@193.163.235.202)
[16:49:03] *** Quits: Guest90 (~Guest90@193.163.235.202) (Quit: Client closed)
[16:49:13] *** Joins: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:54:25] *** Joins: lumbermb (~lumbermb@190.13.136.234)
[16:55:30] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[17:07:14] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[17:09:23] *** Quits: X-Scale (~ARM@92.250.96.217) (Ping timeout: 264 seconds)
[17:09:23] *** X-Scale` is now known as X-Scale
[17:12:45] *** Quits: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[17:14:43] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:27:18] *** Joins: argonautx_ (~argonautx@i5e8670df.versanet.de)
[17:28:10] *** Quits: argonautx (~argonautx@i5E86728F.versanet.de) (Ping timeout: 260 seconds)
[17:30:59] *** Quits: meator (~meator@user/meator) (Ping timeout: 264 seconds)
[17:32:42] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:36:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[17:37:54] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:42:09] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[17:43:28] *** Joins: magla (~gelignite@55d4378c.access.ecotel.net)
[17:47:00] *** Quits: jemius (~jemius@2a01:4f8:c0c:8564::1) (Remote host closed the connection)
[17:56:57] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[18:01:16] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[18:03:24] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[18:13:39] *** Joins: meator (~meator@user/meator)
[18:17:40] *** Quits: Vultyre (~vultyre@user/vultyre) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:18:40] *** Joins: Vultyre (~vultyre@user/vultyre)
[19:19:30] *** Joins: kariosfox (~kariosfox@176.221.125.192)
[19:34:27] *** Joins: X-Scale` (~ARM@31.22.144.14)
[19:35:15] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:36:28] *** X-Scale` is now known as X-Scale
[19:42:49] *** Quits: argonautx_ (~argonautx@i5e8670df.versanet.de) (Quit: Leaving)
[20:36:08] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:54:09] *** Quits: kariosfox (~kariosfox@176.221.125.192) (Remote host closed the connection)
[21:11:05] *** Joins: kariosfox (~kariosfox@176.221.125.192)
[21:11:32] *** Quits: kariosfox (~kariosfox@176.221.125.192) (Remote host closed the connection)
[21:32:23] *** Joins: meator (~meator@user/meator)
[21:35:16] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[21:38:34] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[21:53:28] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:10:42] *** Joins: kariosfox (~kariosfox@176.221.124.50)
[22:14:38] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[22:56:02] *** Joins: teut (~teut@182.64.45.94)
[22:58:00] <teut> I had an interviewed for NCR corp few days back and the person asked me OOP and I sucked at it badly. 
[22:58:36] *** Quits: jeremy_k (~jeremy_k@c-65-50-184-73.hs.gigamonster.net) (Remote host closed the connection)
[22:58:43] <teut> in oop this concept of interface and the user and the interface of an API, why it is required?
[22:58:56] <teut> the user sees the docs
[22:59:05] <teut> not the interface
[22:59:53] <teut> if its polymorphism, you can always refer to the subtype to instantiate a class than use the parent type where parent is an abstract interface
[23:00:30] <teut> and they asked me abstraction vs encapsulation, this thing has weird broken answers on SO even
[23:02:48] <teut> encapsulation is preventing user to access parts of the class which u want to hide from the user, which are internal to the class, and abstraction is mechanism hiding 
[23:03:02] <teut> both are the same things in some or the other way
[23:03:34] *** Quits: kariosfox (~kariosfox@176.221.124.50) (Remote host closed the connection)
[23:03:53] *** Joins: kariosfox (~kariosfox@176.221.124.50)
[23:22:32] *** Quits: magla (~gelignite@55d4378c.access.ecotel.net) (Quit: Stay safe!)
[23:25:01] <cbreak> teut: what's NCR?
[23:25:21] <teut> https://www.ncr.com/
[23:25:37] <cbreak> when ever you design any API, you have to decide how a user interacts with something behind the API
[23:25:53] <cbreak> the application programming interface is what determines the interaction
[23:26:02] <cbreak> in OOP, interfaces are something more specific though
[23:26:12] <cbreak> they define how you interact with objects
[23:26:20] <cbreak> in c++ specifically, we do not have interfaces
[23:26:38] <cbreak> instead, we have abstract base classes, which fulfill the same purpose, via multiple-inheritance
[23:26:42] <teut> ok , let me think of this, you got an interface shape and circle , square etc , iimplement it
[23:26:44] <cbreak> (or single-inheritance)
[23:26:55] <cbreak> that is a bad interface
[23:27:24] <teut> you dont have interface?
[23:27:38] <teut> that guy just be a java programmer then
[23:27:50] <cbreak> as a programmer, the first thing I look at when learning some new library is the interface. The header files. Well, maybe the second thing, after looking at some exapmles in the docs
[23:28:47] <teut> ya , so the docs serve the purpose of knowing the interface
[23:28:52] <cbreak> abstraction: having an interface that is separate from the implementation
[23:29:35] <teut> you mean classes with empty methods?
[23:29:36] <cbreak> examples of this can range from having hardware abstractions provided by the kernel of an OS, by having wrapper classes that abstract away implementation details
[23:29:55] <cbreak> or for example having a library like Qt, which abstracts away the interaction with platform specific windowing systems / UIs
[23:30:14] <teut> and why cant I say it encapsulation?
[23:30:38] <cbreak> encapsulation: hiding implementation, and specifically, binding implementation tightly
[23:30:40] <teut> lets say there is a function of the Win32 APi   which takes 10 parameters
[23:30:52] <cbreak> for example, std::vector is a container
[23:31:14] <cbreak> it does not expose implementation details, such as its internal data / capacity pointer semantics, and so on
[23:31:20] <teut> I make a small function where I fill 8 values and take 2 from the user and call it
[23:31:22] <cbreak> so that is encapsulated well
[23:31:32] <teut> is this encapsulation or abstraction?
[23:31:44] <cbreak> but it still exposes guarantees and has requirements which break encapsulation
[23:32:10] <cbreak> I think encapsulation is more about not letting internals get out
[23:32:24] <cbreak> OOP does this by using accessors instead of direct data members
[23:32:45] <cbreak> while abstraction is more about giving a neutral interface to potentially multiple implementations
[23:32:50] <cbreak> OOP does that via interfaces
[23:33:19] <cbreak> I'm not entirely sure if my understanding is proper OOP though, it's been too long since I've studied the theory
[23:33:38] <teut> i too
[23:33:44] <teut> its vague
[23:34:03] <cbreak> https://en.wikipedia.org/wiki/Encapsulation_(computer_programming), looks good
[23:34:18] <cbreak> "In object-oriented programming (OOP), encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components.[1] Encapsulation is used to hide the values or state of a structured data object inside a class, preventing direct access to them by clients in a way that could expose hidden implementation details or violate state invariance maintained by 
[23:34:20] <cbreak> the methods. "
[23:34:24] <teut> dont worry my advanced cs frinds dont understand it either who work at big companies
[23:34:29] <teut> atleast I think so
[23:34:58] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[23:35:22] <teut> encapsulation:  hiding attributes and functions  ,   abstraction:  hiding logic
[23:36:19] <teut> also in the manager round , the guy asked me what to use between abstract class and interface?
[23:37:10] <cbreak> well... I do work at a big company
[23:37:41] <teut> yes i know
[23:37:50] <cbreak> but I don't do Java OOP
[23:37:59] <cbreak> I use C++, so ... it's a bit more flexible :)
[23:38:04] <teut> ya I knew it those shitters were java guys
[23:38:30] <cbreak> I think it's important to know the general idea behind encapsulation, and why it's good
[23:38:41] <teut> really its idiotic when someone asks oops
[23:38:43] <cbreak> because sometimes it's just not useful to encapsulate
[23:38:49] <cbreak> and sometimes it's really useful
[23:39:08] <cbreak> std::vector above for example is nice, very practical. It encapsulates some things, but not others
[23:40:02] <cbreak> encapsulation is more about binding together some algorithms and the data
[23:40:22] <cbreak> hiding the implementation, and the exact way it is stored.
[23:40:31] <teut> ya sure , encapsulation is good, but this polymorphism, this already existed in c , c with classes (old c++) just gave it a structure
[23:40:44] <cbreak> polymorphism in C is tricky
[23:40:53] <cbreak> it does exist, but is super annoying
[23:40:54] <teut> pointers to functions, c++ just made a vtable for that
[23:40:57] <cbreak> have you ever worked with ffmpeg?
[23:41:09] <teut> in c++?
[23:41:13] <cbreak> in C
[23:41:18] <teut> no
[23:41:23] <teut> used python lib
[23:41:29] <teut> '=D 
[23:41:33] <cbreak> well. Saved yourself a nightmare there.
[23:41:52] <cbreak> there are many ways to implement polymorphism in C
[23:41:57] <teut> ya , its pesky stuff I know. I used another librrary pyaudio
[23:42:05] <cbreak> structs with function pointers like ffmpeg is one
[23:42:14] <teut> this was broken and I was looking at the c code then
[23:42:19] <cbreak> functions with void* / object* parameters is an other
[23:42:34] <cbreak> (the second is what Objective-C, or apple's CoreXXX APIs do)
[23:43:38] <cbreak> I think one of the aspects of abstraction is the possibility to have multiple implementations
[23:43:40] <teut> hmmm, ya but for the c people it might be usual
[23:43:45] <cbreak> intercahngeable ones
[23:43:57] <cbreak> OOP / Inheritance is all about that
[23:44:01] <teut> no no , multiple implementations is polymorphism
[23:44:02] <cbreak> interfaces too
[23:44:39] <cbreak> an abstract "Logger" couldhave an implementation logging to files, to standard output, to some server
[23:44:50] <cbreak> but since it is an abstraction, you don't need to know that
[23:44:58] <cbreak> "abstraction" is the general concept
[23:45:07] <cbreak> polymorphism is one possible way to get "abstraction"
[23:45:38] <cbreak> an OOP way
[23:45:50] <cbreak> but there are non-OOP ways to get abstractions
[23:46:08] <cbreak> like file descriptors
[23:46:20] <teut> ya, so to  abstract something you need to encapsulate the logic ?
[23:46:22] <cbreak> or C++ concepts
[23:46:28] <cbreak> not really
[23:46:41] <teut> like use getter and setter to clean the input
[23:46:53] <cbreak> you might not have state as such
[23:47:01] <cbreak> like a logger, it wouldn't need getters / setters
[23:47:08] <cbreak> it only needs a single function: logStuff
[23:48:12] <teut> it wouldnt need, nice  , so there are cases where you dont need them
[23:48:23] <cbreak> well, that too.
[23:48:32] <teut> this java, really this is scum
[23:48:33] <cbreak> abstractions have a purpose
[23:48:49] <cbreak> the purpose is to be able to change things without affecting the rest
[23:48:54] <cbreak> it makes code more modular, more maintainable
[23:48:59] <teut> there it is all mandated
[23:49:12] <cbreak> encapsulation also has that purpose
[23:49:29] *** Quits: lumbermb (~lumbermb@190.13.136.234) (Ping timeout: 244 seconds)
[23:49:49] <cbreak> but at some point, there's no need to be able to change everything at runtime
[23:50:12] <teut> an abstraction I think is wrt to some public function
[23:50:25] <cbreak> my most recent project at work uses a lot of encapsulation, but no polymorphism
[23:50:44] <cbreak> "abstraction" is just a goal
[23:51:10] <cbreak> you can have abstractions everywhere
[23:51:22] <cbreak> not just programming
[23:51:44] <cbreak> what I mean is: It's not correct to say abstractions are only about public functions
[23:52:33] <teut> let me share some code
[23:52:58] <teut> i m writing
[23:56:03] <teut> so getter and setter do they encapsulate or abstract to be clear?
[23:58:56] <cbreak> both, potentially
[23:59:28] <teut> https://godbolt.org/z/f71Tn9xqs
[23:59:43] <cbreak> you shouldn't confuse the tools (getter, setter, inheritance, polymorphism) with the goals (abstraction, encapsulation, ...)
[23:59:48] <teut> yep thats all what confused me when I was giving the interview
[23:59:50] <cbreak> the goals are related
[23:59:59] <cbreak> the tools can be used to reach several of them, or none
