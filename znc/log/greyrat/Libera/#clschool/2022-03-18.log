[00:00:08] <Harag> I am more interested in serious attempts not homework.
[00:00:44] <Demosthenex> certainly. i'd suggest you check out libs by the dexador author
[00:00:53] <Harag> and I am not asking for a recommendation.
[00:00:55] <Demosthenex> https://github.com/fukamachi/dexador
[00:01:54] <Demosthenex> https://github.com/fukamachi/lsx  that looks interesting, he's using reader macros for templating
[00:04:46] <Harag> Now that is a good example of what is not my cup of tea. Not dissing his work just hate those types of templates. Last time I used templates like that was ASP was still in beta!
[00:04:58] <Demosthenex> ah. sorry.
[00:05:15] <Harag> Nothing to be sorry about.
[00:05:18] <Demosthenex> well, to answer your original question, i have not written an html generator.
[00:05:27] <Harag> Wow
[00:05:36] <Demosthenex> given i despise most of the web, it's unlikely i ever will
[00:05:49] <Harag> That makes sense.
[00:06:06] <Harag> Every thing i produce is for the web :()
[00:06:07] <Demosthenex> you might look at s-xml and those libs, they can convert to html
[00:06:10] <drbluefall> I can confidently say that you're not alone in that opinion
[00:06:11] <Demosthenex> i'm *so* very sorry.
[00:07:29] *** Joins: lisp123 (~lisp123@120.154.103.52)
[00:09:12] <Harag> Well I have written some where close to 10 generators and used a couple of them in production code, but never got to Nervana. Just finished the MVP for yet another one tonight. 
[00:09:20] <Demosthenex> m4.
[00:09:49] <Demosthenex> that may have been the last place i templated html.
[00:10:09] <Harag> Will put ram it into production code tomorrow to see if it makes the cut. Who knows maybe this time I will be happy and done with html generators, lol.
[00:11:34] <Demosthenex> oddly enough, sexp notation should be ideal for representing html
[00:12:16] <Demosthenex> it's basically raw AST
[00:12:55] <Demosthenex> but i'm still learning CL. many others here much wiser than i
[00:14:17] <Harag> Demosthenex: I agree, I like (:html (:body (:div "etc")))
[00:14:42] <Demosthenex> then, you can leverage the full power of CL to generate structure.
[00:14:46] <Harag> it appeals to me, maybe because I still use cl-who
[00:15:28] <Demosthenex> `(:html (:title ,(concatenate 'string "i " "have " "no " "soul."))) 
[00:15:42] <Demosthenex> and i believe s-xml can dump that out as xml (html)
[00:16:18] <Demosthenex> you'd certainly never have to worry about omitting a tag or not closing them
[00:16:56] <Harag> the moment you start using ` your in trouble, try adding a couple of layers of custom tags to that and you quickly get your head burnt out
[00:17:15] <Demosthenex> quoting is as quoting does.
[00:17:26] <Demosthenex> yet the tools exist ;]
[00:17:35] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[00:18:42] <aeth> one ` is fine
[00:19:01] <aeth> two `s is an intellectual exercise in getting ,s to work properly
[00:19:12] <aeth> three `s? good luck
[00:19:30] <drbluefall> I have yet to see ` used more than once in any serious capacity
[00:20:45] <aeth> if you're nesting `s in `s you're probably writing a macro, and your macro is probably too complicated... either use the macro to generate a macro call, or have the macro call a helper function wrapped in an EVAL-WHEN at that point imo.
[00:21:34] <aeth> You could also use LET, but then you don't get to test/debug the intermediate forms
[00:21:37] <Harag> my latest attempt would parse (:html (:title (concatenate 'string "i " "have " "no "  "soul.")))
[00:21:39] <Demosthenex> https://cliki.net/HTML%20generator big list.
[00:21:47] <Harag> no ` needed
[00:22:59] <Demosthenex> sounds very https://cliki.net/yaclml
[00:26:46] <Harag> The fun starts when you start doing (let ((x 1)) (with-html (:div :class "A" (:custom-alt :width x))))
[00:38:10] <Demosthenex> you have a unique opinion of fun.
[00:38:21] <Demosthenex> i only know these xml libs because i was using them to output graphml
[00:46:56] <kagevf> I've been using cl-who for html, it's worked fine for me ...
[00:53:25] <Demosthenex> looks fine
[00:53:33] *** Joins: lisp123 (~lisp123@120.154.103.52)
[00:54:55] <Harag> kagevf: so all the extra cl-who:str,cl-who:htm, cl-who:esc when you mix logic an the dsl does not bother you?
[00:56:19] <kagevf> Harag: hmmm, no, not really ... I don't use the context switching (?) that much because I made a DSL on top of parenscript that generates a lot of html elements for me using the DOM
[00:58:17] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[00:59:14] <kagevf> I can write something like this: (button (hidden . "t") (onclick . "(save-input-for todo)") (class . "(progn show-todo-edit-class-name)") "Save") and my parenscript macro will generate the necessary DOM calls 
[00:59:31] <Harag> kagevf: thats kewl! Its on my list of todo's emitting js that uses the js dom to add elements on ajax calls
[01:00:15] <kagevf> Harag: that exercise helped me a lot to get a good handle on macros
[01:00:43] <Harag> emitting html and pushing it into innerhtml on ajax calls leaves you with a lot of hoops to get the events working, especially on complex components
[01:01:46] <kagevf> I just incorporated "addEventListener" into my macro to set them up ... I think I just check to see if the car of a sexp starts with "on" then I assume it's an event handler
[01:06:50] <Harag> I am in two minds about how to go about the component injection, 1 send json and then let the js parse that to do stuff to the dom or 2. to just inject js that does what I need. 
[01:08:31] <kagevf> 2 I think is pretty common, but haven't heard of 1, other than for data ... but not really for actual layout (even though, of course, data can affect the layout)
[01:10:03] <kagevf> and if you do 1, you'll need to do 2 anyway to render the layout, right?
[01:11:52] <Harag> maybe I need to write a test to see how generic the js will be to parse the json to dom elements
[01:12:08] <Harag> if its generic enough the I wont need 2 as well
[01:13:04] <Harag> the other issue is I need to deal with WebComponents and the shadow dom as well, my components will be served from different micro services
[01:15:37] <kagevf> hmm I don't know much about shadow dom ... will read up on it on mdn ... 
[01:17:40] <kagevf> as for the micro service integration ... you could use something like drakma on the backend, or if it's front end if it's just a JS call (?) then cl-who and parenscript mix together pretty easily so maybe start there and then see what kinds of patterns emerge
[01:18:31] <kagevf> I think Fukamachi wrote an alternative to drakma, but either one is probably fine, at least to start with
[01:20:37] <Harag> I wrote my own microservices package with queues,monitors and events
[01:21:12] <kagevf> oh, nice ... in CL?
[01:21:37] <Harag> it uses drakma, the last ai looked at the Fukamachi laternative it was still somewhere between alpha and beta code according to his notes
[01:21:41] <Harag> yes in cl
[01:21:53] <Harag> build a whole web dev stack
[01:22:05] <kagevf> wow, nice :) 
[01:22:48] <kagevf> how did you handle async concerns?
[01:24:08] <Harag> all in cl --> webserver (uses hunchentoot or who in the back),tailwind starterkit,  microservices, document dsl to emit hmtl and other formats of the same doc, and hierarchical database with indexing etc
[01:25:42] <Harag> async as in microservice calls? In and out queues keep stuff in sync mostly
[01:25:52] <kagevf> I see
[01:26:27] <kagevf> the hierarchical db ... was that something you rolled yourself, or already existed?
[01:26:30] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[01:27:29] <Demosthenex> oh yeah, i used xml for xmpp recently too
[01:27:42] <Harag> Been working on the db for years, this latest iteration is about a year old now. Rolled a lot of it my self and begged help with the threading for the sharding of the data
[01:28:32] <kagevf> wow that's all great! :) for work, or on the side?
[01:31:31] <Harag> For work, needed a fast db for date sensitive queries about 10 years ago, sql and even the no-sql dbs did not cut it, they are dog slow for that type of queries. So wrote (with lots of help) a lisp object db that is lightning fast. 
[01:31:58] <Harag> but that object db cured me from objects for life
[01:32:09] <Harag> so the latest db uses plist
[01:32:44] <kagevf> objects as in CLOS? and now you prefer plists over those?? 
[01:32:52] <Harag> yes
[01:33:04] <kagevf> is it because plists are PRINTable?
[01:33:24] <Harag> nope, because of boiler plate code 
[01:34:06] <kagevf> hmmm .... couldn't DEFMACRO the pain away in that case?
[01:34:26] <Harag> eventually did but by then my psyche was damaged
[01:34:41] <kagevf> hehehe
[01:35:47] <Harag> also with plist I can have more flexibility, I can add and remove elements on the fly with a simple getx
[01:35:48] <kagevf> seems like it would be harder to write DEFMETHODs with plists (as in less easier to do specialization)
[01:36:22] <Harag> its data I dont want defmethods I want query, and index-lookup
[01:36:54] <kagevf> yeah, I was wondering how indexing works
[01:37:30] <kagevf> what kind of hierarchy is it? ... like a tree? or just a bunch of levels ...?
[01:37:34] <Harag> you can specify a data definition for use with input gui, with that you can do validation etc and enforce some structure
[01:38:38] <Harag> its like a document with elements and an element can contain a document.
[01:38:39] <kagevf> I see
[01:39:15] <Harag> but you can use references in stead so the inner document can be stored on its own and other documents just reference it.
[01:39:35] <Harag> that way you can still get indexing for inner docs etc
[01:39:41] <Harag> also sharding
[01:39:51] <kagevf> ohhh, right ... split it all up
[01:39:52] <Harag> it all depends on how your data looks.
[01:40:13] <kagevf> did you ever do any kind of public write up on any of the stuff you built?
[01:40:35] <Harag> nope
[01:40:41] <kagevf> ah, too bad
[01:40:47] <Harag> most of it is still to untested
[01:41:07] <Harag> the db is in quicklisp and it has decent documentation
[01:41:30] <Harag> test coverage for blobs in the db is still outstanding
[01:41:36] <kagevf> what package is it?
[01:42:27] <Harag> https://gitlab.com/Harag/cl-naive-store
[01:47:49] <Harag> by the end of the year the whole stack should be stable, doing a rewrite of our company's flag ship product and that will put it all through its paces properly
[01:48:43] <kagevf> does everyone at your company use CL?
[01:49:22] <Harag> yes, but every one is 2 full time and the rest on contract as and when needed
[01:49:36] <Harag> went full lisp in 2009
[01:50:21] <Harag> but in many ways I am still a lisp newbie, I spend more time with clients than with code :()
[01:50:53] <Harag> and its business software, not very exiting stuff
[01:51:18] <kagevf> is your company on that "awesome lisp companies" list? sounds like it qualifies
[01:51:53] <Harag> it is on some list but the description is horrible, I need to do something about that some time
[01:52:13] <Harag> when I remember where it is, lol
[01:52:30] <kagevf> haha
[01:53:45] <kagevf> sounds great ... using CL to write a DB and other web dev stuff ... plus pjb even helped you ... 
[01:54:10] <kagevf> that's a great job IMO :)
[01:59:14] <pjb> Harag: I did write my own HTML generator and even a memo explaining why. https://github.com/informatimago/lisp/blob/master/common-lisp/html-generator/html-generators-in-lisp.txt
[02:05:01] <Harag> Yes pjb I pored over the code in some detail, and need to spend more time there the understand the CData issues.
[02:06:09] <Harag> I also need to hunt down the source for your DSL, its in some other project by the looks of it.
[02:08:15] <Harag> pjb: on another subject do you specify nicknames for your packages or do you leave that up to the users?
[02:08:29] <pjb> Harag: It's rather simple: cdata escapes & and "  pcdata escapes & < and > :   <p style="foo&amp;<&quote;bar&quote;>">foo&amp;&lt;"bar"&gt;</p>
[02:09:03] <pjb> I leave nicknames to end-users indeed. 
[02:09:39] <pjb> I have a COM.INFORMATIMAGO.COMMON-LISP.CESARUM.PACKAGE:ADD-NICKNAME function.
[02:10:38] <Harag> Hehehe, and you can use that after you give that package a nick name ;)
[02:10:58] <pjb> obviously :-)
[02:14:58] <Harag> pjb: as far as the escaping goes, would supplying an esc function suffice? In theory attributes should not allow pcdata so you can auto escape that to cdata but I am hesitant to try and auto escape pcdata
[02:26:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:26:50] <Harag> pjb: as far as emitters for the docs go do you think the DSL will work for a pdf emitter?
[02:32:18] <Harag> Good night, I off to bed.
[02:42:21] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:43:56] <kagevf> Harag: gn
[02:44:02] <kagevf> thanks for the convo~
[02:46:38] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 260 seconds)
[02:47:13] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[03:08:13] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:30:40] *** Joins: lisp123 (~lisp123@120.154.103.52)
[04:35:12] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[06:18:49] *** Joins: lisp123 (~lisp123@120.154.103.52)
[06:23:30] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[07:20:04] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[07:30:35] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[07:30:36] <beach> Good morning everyone! 
[07:38:31] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[07:45:59] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[08:07:10] *** Joins: lisp123 (~lisp123@120.154.103.52)
[08:11:26] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[09:20:12] *** Joins: shka (~herr@109.231.3.55)
[09:40:23] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 252 seconds)
[09:41:01] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:55:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:00:09] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[10:33:48] *** Joins: Josh_2 (~user@197.185.99.223)
[10:52:24] *** Joins: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de)
[11:05:38] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 250 seconds)
[11:43:32] *** Joins: lisp123 (~lisp123@120.154.103.52)
[11:47:57] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[11:58:28] *** Joins: random-nick (~random-ni@87.116.167.125)
[12:13:07] *** Joins: Harag` (~user@105.243.9.173)
[12:14:32] *** Quits: Harag (~user@105.243.9.173) (Ping timeout: 240 seconds)
[12:23:12] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[13:04:21] *** Joins: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net)
[13:31:51] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:36:37] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[14:27:35] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[14:37:39] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[14:54:18] *** Joins: vats (~vats@103.16.30.139)
[15:04:26] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 260 seconds)
[15:20:06] *** Joins: lisp123 (~lisp123@120.154.103.52)
[15:24:17] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[15:37:12] *** Quits: dickbar__ (~dickbaren@86-90-132-28.fixed.kpn.net) ()
[15:43:17] *** Joins: shka (~herr@109.231.3.55)
[16:16:26] *** Joins: lisp123 (~lisp123@120.154.103.52)
[16:20:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[16:48:40] *** Joins: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net)
[16:49:52] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[16:53:42] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Quit: WeeChat 3.4)
[17:05:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:08:33] *** Quits: jmiven (~vpm@pham.algeb.re) (Quit: reboot)
[17:09:15] *** Joins: jmiven (~vpm@pham.algeb.re)
[17:52:49] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Read error: Connection reset by peer)
[17:53:51] *** Joins: vats (~vats@103.16.30.139)
[17:58:42] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:04:38] *** Joins: lisp123 (~lisp123@120.154.103.52)
[18:04:53] *** Joins: thrig (~thrig@207.108.197.156)
[18:07:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[18:07:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[18:08:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:08:46] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 260 seconds)
[18:09:11] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[18:09:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[18:16:14] *** Quits: rotateq (~user@ip-078-094-235-194.um19.pools.vodafone-ip.de) (Remote host closed the connection)
[18:48:39] *** Joins: Bike (~Glossina@71.69.170.70)
[19:01:23] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:14:03] *** Quits: Josh_2 (~user@197.185.99.223) (Read error: Connection reset by peer)
[19:14:35] *** Joins: Josh_2 (~user@197.185.99.223)
[19:38:27] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:52:47] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:57:31] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[19:59:49] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[20:01:12] *** Joins: JoshYoshi (~user@41.13.131.112)
[20:01:14] *** Quits: JoshYoshi (~user@41.13.131.112) (Remote host closed the connection)
[20:01:53] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:02:17] *** Quits: Josh_2 (~user@197.185.99.223) (Ping timeout: 240 seconds)
[20:09:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[20:11:29] *** Joins: aeth (~aeth@user/aeth)
[20:51:29] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[21:19:40] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:41:05] *** Joins: lisp123 (~lisp123@120.154.103.52)
[21:45:40] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[22:02:31] *** Joins: vats (~vats@103.16.30.139)
[22:55:24] *** Quits: vats (~vats@103.16.30.139) (Ping timeout: 240 seconds)
[22:58:46] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[23:20:02] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[23:22:08] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[23:29:25] *** Joins: lisp123 (~lisp123@120.154.103.52)
[23:29:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:33:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[23:34:04] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[23:35:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[23:37:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
