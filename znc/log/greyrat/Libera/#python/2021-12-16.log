[00:00:48] *** Quits: de-facto (~de-facto@user/de-facto) (Ping timeout: 276 seconds)
[00:02:42] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:03:01] *** Joins: de-facto (~de-facto@user/de-facto)
[00:03:21] *** Joins: Naan (~Naan@user/naan)
[00:04:01] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 252 seconds)
[00:04:15] *** Joins: theprophet (~theprophe@85.114.228.184)
[00:04:29] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Quit: No Ping reply in 180 seconds.)
[00:04:35] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Quit: No Ping reply in 180 seconds.)
[00:05:12] *** Joins: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:05:58] *** Joins: beencubed (~beencubed@209.131.238.248)
[00:06:17] *** Quits: theprophet (~theprophe@85.114.228.184) (Client Quit)
[00:07:35] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[00:08:04] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f) (Quit: Leaving)
[00:08:47] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 256 seconds)
[00:10:51] <bjs> jmcantrell: https://github.com/python/mypy/issues/11280
[00:11:02] *** Joins: ano (~ano@user/ano)
[00:11:29] <jmcantrell> bjs: thanks. looks like it's fixed on master
[00:11:40] <bjs> Looks like it was fixed in July, latest pypi release (0.910) is from June.
[00:12:14] <bjs> jmcantrell: in the meantime, you can use Union[int, float]
[00:12:17] <bjs> jmcantrell: or really, just use `float`
[00:12:39] <bjs> `def f(n: float) -> None` should already accept `int` types
[00:13:06] *** Joins: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28)
[00:13:20] <Helenah> Is there any way to dynamically SELECT a sqlite table? Lets say "SELECT variable"? Honestly my SQL code is getting chaotic, I just want to reduce everything down to a nice function.
[00:13:26] <jmcantrell> ah, that works, thanks
[00:14:06] <ChrisWarrick> Helenah: perhaps you want to use an ORM or a query builder instead of writing SQL by hand
[00:14:32] *** Joins: xsperry (~xs@user/xsperry)
[00:14:38] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:14:58] *** Joins: theprophet (~theprophe@85.114.228.184)
[00:15:22] <Helenah> Like SQLAlcemy?
[00:15:23] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[00:15:47] <Helenah> This would be much easier, at first it was nothing but I'm starting to really feel it.
[00:16:04] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[00:16:07] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[00:16:10] *** Joins: thiras_ (~thiras@user/thiras)
[00:16:12] *** Joins: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-215-253.pool.digikabel.hu)
[00:16:34] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f)
[00:17:19] *** Quits: theprophet (~theprophe@85.114.228.184) (Client Quit)
[00:18:03] *** Joins: varjack (~unknown@user/varjack)
[00:18:03] <SnoopJ> yea, SQLAlchemy would be a good place to start looking
[00:18:18] *** Quits: greknod28 (~grek@120.88.171.98) (Read error: Connection reset by peer)
[00:18:22] <varjack> i actually have a github question, but maybe someone here can help?
[00:18:27] *** Joins: greknod282 (~grek@120.88.171.98)
[00:18:32] <grym> you can bite off a little with sqla-core, or a lot with the full orm, or even more with things built on top of it
[00:18:41] <grym> varjack: the website, or its version control system
[00:18:56] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[00:19:00] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:19:04] <varjack> i guess version control system. i'm trying to change the default authentication mechanism the cli uses
[00:19:26] <varjack> right now it's using an ssh key my teammate set up, i want to change it so it's using username/token
[00:20:04] <grym> varjack: i'd ask in #git
[00:20:16] <varjack> sounds good grym
[00:21:25] *** Quits: greedom (~greedom@p200300de670a69009f89f40b8fa9f0a3.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:22:21] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[00:22:28] *** Parts: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Leaving)
[00:22:32] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Client Quit)
[00:23:16] *** Quits: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1) (Quit: Ping timeout (120 seconds))
[00:25:30] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:27:00] <velix> jaggz: You're right. It gets reloaded on every access. Thanks for the hint :-(
[00:27:13] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[00:27:36] *** Quits: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-215-253.pool.digikabel.hu) (Quit: Changing server)
[00:28:33] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[00:29:13] <Helenah> I like the look of pypika.
[00:29:19] *** Parts: varjack (~unknown@user/varjack) ()
[00:29:31] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[00:29:33] *** Joins: CombatVet (~c4@user/combatvet)
[00:30:08] <grym> Helenah: https://pugsql.org/  go whole hog
[00:30:16] *** AmyMalik is now known as Reinhilde
[00:31:00] *** Joins: theprophet (~theprophe@85.114.228.184)
[00:31:30] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:32:56] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[00:33:00] *** Joins: p-i- (~Ohmu@mx-ll-223.206.145-10.dynamic.3bb.co.th)
[00:33:32] *** Joins: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1)
[00:33:38] <p-i-> Is there some way of boosting runtime performance of python code?
[00:33:38] *** Joins: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-215-253.pool.digikabel.hu)
[00:33:46] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[00:34:03] <Helenah> p-i-, Part of it is how you write your syntax.
[00:34:03] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:619c:d1db:5920:bb54) (Ping timeout: 250 seconds)
[00:34:04] <SnoopJ> p-i-, running it in PyPy is usually the simplest way
[00:34:25] <SnoopJ> beyond that, you'll need to tell us more about what you're doing. If you haven't profile your program, now would probably be a good time to do that.
[00:34:29] <SnoopJ> profiled*
[00:34:39] <Helenah> One example is... lets say you have a dictionary "if 'foo' in dict.keys()" is slower than doing "if 'foo' in dict".
[00:35:24] <p-i-> Is it correct that the first time each codepath is traversed, it is 'compiled' into a .pch?
[00:36:11] <p-i-> I'm asking about preprocessing the whole Python codebase somehow, rather than any particular optimizations (like using a set over a list).
[00:36:39] *** Quits: ericlee (~ericlee@2601:647:4681:3420::7) (Ping timeout: 252 seconds)
[00:36:49] <SnoopJ> The CPython runtime takes care of compiling and caching the result, unless you've explicitly told it not to do that.
[00:37:05] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Ping timeout: 250 seconds)
[00:37:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:37:15] <p-i-> My code processes packets from a websocket, performs some computation and makes an HTTP call (which I'm doing using pycurl).
[00:37:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[00:37:51] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[00:38:14] <SnoopJ> if you've profiled the application, show us what that looks like; if not, you need to make that measurement to know where you're actually slow. cProfile is good, and you can get a lot done with just time.time() too
[00:38:52] <p-i-> Can I force cpython to precompile / do-it's-optimization-stuff ahead of time? My concern would be that maybe not all execution paths get hit, and the deployed code might bump into one of those...
[00:39:41] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[00:40:07] <p-i-> That said, I think I can ensure all paths get hit in a testrun, which IIUC will mean that the next time I run it, it should perform efficiently i.e. from the .pch.
[00:40:07] <SnoopJ> it does basically no optimization, just constant folding
[00:40:51] <SnoopJ> but worrying about that without actually having timing data that indicates you're slow because of compilation (this would be surprising!) seems weird to me
[00:41:32] *** Joins: ano (~ano@user/ano)
[00:41:34] <p-i-> Yes I need to time-profile.
[00:41:51] <SnoopJ> I don't think there's a way to ask the runtime to compile everything, but writing a little harness that imports all the relevant modules would probably do the trick.
[00:42:02] <p-i-> I just wanted to get an overview of what happens when you execute a python program.
[00:43:20] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[00:43:28] <SnoopJ> p-i-, to execute any module in CPython, you need bytecode; if the compiled module is cached and the cache is valid, it loads the bytecode from disk and runs that; if not, it reads in the source, compiles it, maybe saves it, and begins execution of that.
[00:44:04] <p-i-> ok so that's just a startup overhead with imports. I'm not bothered by that.
[00:44:26] <SnoopJ> https://docs.python.org/3/tutorial/modules.html#compiled-python-files
[00:44:46] <SnoopJ> yea, it's an overhead that is basically only going to happen when you begin executing a program or when that program imports something
[00:44:55] <p-i-> My concern is that while the code is running, after it is initialized, it efficiently process incoming websocket packets and makes the HTTP POST via pycurl.
[00:45:19] <SnoopJ> If you try to guess what is slow without data, you're at the mercy of your own talent at guessing
[00:45:37] *** Quits: teut (~teut@2401:4900:1c30:1de4:f19d:3f97:1aa3:ecb1) (Quit: Client closed)
[00:46:45] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[00:46:59] <p-i-> e.g. suppose I have 3 types of incoming packet. I don't want the code to be slow the first time it encounters packet-type-B. Does python convert to .pyc on-the-fly? Or will it preprocess the entire file before actually running the code?
[00:47:36] <SnoopJ> p-i-, compilation (or loading a cached compile) has to happen for a module to be executed. importing a module executes it.
[00:48:15] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[00:48:35] <p-i-> But my main.py file ... I don't think that counts as a module. What kind of compilation happens to that, if, say, I run `python3 main.py` from my CLI?
[00:48:41] <SnoopJ> every .py is a module
[00:48:59] *** Joins: ano (~ano@user/ano)
[00:49:10] <p-i-> oh. I must be confusing 'module' with 'package'.
[00:49:12] *** Quits: damxsa (~damx@2001:16a2:ce8a:800:e3e7:2a55:7b19:ad28) (Quit: Leaving)
[00:49:48] <SnoopJ> a package is a special type of module (namely it defines __path__)
[00:50:34] <p-i-> So there's basically nothing to do to improve performance of my main.py / helper.py / etc. outside of optimizing the actual code?
[00:50:45] <SnoopJ> any "organization unit of Python code" is going to be a module, though. when you run `python3 -c 'print("hello world!")'`, the program containing print() is also a module.
[00:51:02] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 240 seconds)
[00:51:36] *** Yugi is now known as Hunterkll
[00:51:37] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:51:44] <p-i-> ok, cool, thanks!
[00:51:44] <SnoopJ> p-i-, as I said right at the beginning, running your program with PyPy is likely going to give you a free speed-up, although you do have to worry about JIT warm-up with PyPy.
[00:52:03] <aphysically> do I want to use something other than heapq on tuples with (weight, pt) to implement A* (data structure wise)
[00:52:04] <SnoopJ> But if you don't have data about the performance of your program, it's hard to really know what improvements are possible.
[00:52:13] <aphysically> or does stdlib have something more appropriate
[00:52:32] *** Quits: Macuser (~Macuser@2600:1003:b443:b5e5:451b:6eac:6d38:7fec) (Ping timeout: 240 seconds)
[00:52:46] <SnoopJ> p-i-, if you're bound by network I/O for instance, there's nothing you can really change about your Python program to get around that
[00:53:04] <SnoopJ> although *knowing* that you're so bound helps you look in the right place
[00:53:26] <aphysically> oh I guess queue class has a priority queue too
[00:54:17] <aphysically> ah it's just a thread safe version
[00:54:19] <aphysically> okay then
[00:56:41] <p-i-> SnoopJ: Thanks! https://realpython.com/pypy-faster-python/ shows a great example. That's just what I was looking for.
[00:58:00] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[00:58:00] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[00:58:37] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:59:20] *** Joins: ano (~ano@user/ano)
[01:00:09] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Lost terminal)
[01:01:04] <SnoopJ> p-i-, it's worth at least trying, but be mindful of those other caveats (mostly the JIT warm-up)
[01:01:27] <SnoopJ> although there have been substantial efforts to improve the warm-up over the last couple of years AIUI
[01:03:47] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 252 seconds)
[01:05:29] *** Joins: onichomp (~onichomp@2806:264:4404:8241:2856:9f40:5f12:9565)
[01:05:54] <SnoopJ> p-i-, ahh, the `compileall` module can be used to invoke the compiler over a set of files/dirs.
[01:06:07] *** Quits: jdmark (~jdmark@user/jdmark) (Ping timeout: 250 seconds)
[01:06:31] *** Joins: jdmark (~jdmark@user/jdmark)
[01:06:40] * SnoopJ just happened to see output from that tool while building a debug runtime
[01:06:55] *** Joins: visl (visl@user/visl)
[01:07:02] *** Joins: naranja (~orange@user/orangeboxcutter)
[01:08:24] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:08:43] *** Joins: ano (~ano@user/ano)
[01:09:26] *** Quits: CorsairX (~jc157746@124-170-72-91.dyn.iinet.net.au) (Ping timeout: 260 seconds)
[01:11:51] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Read error: Connection reset by peer)
[01:12:24] *** Quits: sazawal (~sazawal@122.161.88.88) (Quit: Leaving)
[01:14:36] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[01:14:45] *** Joins: sudomann (~sudomann@131.118.76.71)
[01:15:01] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:16:42] *** Joins: c4017w (~c4017@209.52.68.8)
[01:16:52] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[01:16:57] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:17:03] <tk> so TypeVar('T', str, bytes) means T must be str OR bytes, how would I do TypeVar('T', SupportsAbs, SupportsRound) where T must support BOTH?
[01:17:43] <tk> do I create a new ABC which is a subclass of both and then use that ABC with the typevar?
[01:18:48] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:19:00] *** Joins: qwert (~qwert@208.78.214.5)
[01:19:05] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[01:19:31] <SnoopJ> tk, I think you might also be able to define a typing.Protocol that has both of those
[01:20:23] *** Joins: dirac (~dirac@91-171-103-109.subs.proxad.net)
[01:20:32] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:20:37] <SnoopJ> e.g. see `SizedAndClosable` in this part of PEP 544: https://www.python.org/dev/peps/pep-0544/#merging-and-extending-protocols
[01:21:26] <SnoopJ> this apparently only works if all the bases are protocols, but that kinda makes sense
[01:22:03] *** Joins: ano (~ano@user/ano)
[01:23:09] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:25:09] *** Joins: elias117 (~elias117@user/elias117)
[01:26:41] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[01:27:17] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:27:23] <tk> as an aside, where does a protocol such as "SupportsGreaterThan" come from? I'm using pyright and it appears that max takes parameters with this property
[01:28:05] <tk> or alternatively, is there a some superclass which covers all numeric types I can use instead of this since I don't think the thing I'm writing needs to be THIS generic
[01:28:22] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:28:50] <SnoopJ> does numbers.Number do what you want?
[01:29:12] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[01:29:13] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:29:15] <SnoopJ> or possibly one of the other ABCs in that module
[01:29:17] <Payam> how do I say `pytest tests/*Test.py or tests/*test.py"?
[01:29:20] <tk> yes! thanks SnoopJ
[01:29:24] <Payam> in shell?
[01:29:35] *** Joins: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26)
[01:29:36] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[01:29:38] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:7861:521f:5818:4d03) (Ping timeout: 252 seconds)
[01:29:54] <SnoopJ> Payam, do you want all files directly under tests/, or all files named test.py in any directory under that?
[01:30:02] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 265 seconds)
[01:30:15] <Payam> files that ends with Test .py or test.py
[01:30:26] <Payam> files that ends with Test.py or test.py
[01:30:31] <SnoopJ> directly under tests/, or in any subdirectory?
[01:30:41] <Payam> directly under tests
[01:31:08] <SnoopJ> `pytest tests/*Test.py tests/*test.py` should probably do what you want
[01:31:17] <Payam> thanks
[01:31:20] <Payam> it was so simple
[01:32:03] *** Quits: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net) (Quit: Ping timeout (120 seconds))
[01:32:20] *** Joins: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net)
[01:32:24] <SnoopJ> in bash you can also do `pytest tests/*[Tt]est.py` but that's kinda annoying :)
[01:32:35] <tk> SnoopJ: okay, unfortunately it looks like Number doesn't actually qualify as SupportsAbs or SupportsGreaterThan for some reason
[01:34:16] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:34:17] *** Quits: kek_ (~kek_@net-2001-067c-10ec-574f-8000-0000-0000-00dc.v6.ethz.ch) (Ping timeout: 250 seconds)
[01:34:26] *** Joins: devish (~devish@205.251.233.53)
[01:34:31] <rk4> anyone happen to know of a project that involves passing big pyarrow objects to python modules in rust? :) [repost from a few days ago]
[01:34:52] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[01:34:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:35:42] *** Quits: sudomann (~sudomann@131.118.76.71) (Quit: Lost terminal)
[01:36:31] *** simone is now known as katia
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:36:48] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[01:36:52] <SnoopJ> tk, to answer your other question, some of them are defined in typing, and I think other ones like SupportsGreaterThan are in typeshed (although that one was dropped and rolled up into SupportsRichComparison I think?)
[01:37:17] *** Parts: katia (~nya@user/sx) (The Lounge - https://thelounge.chat)
[01:37:27] <SnoopJ> hmm, maybe not dropped, I guess renamed to SupportsDunderGT
[01:38:00] <SnoopJ> https://github.com/python/typeshed/blob/master/stdlib/_typeshed/__init__.pyi#L43-L44
[01:39:47] <tk> thanks
[01:40:32] *** Quits: Hackerpcs (~user@user/hackerpcs) (Quit: Hackerpcs)
[01:40:43] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:41:11] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[01:41:40] <SnoopJ> tk, if it seems like this stuff is churning a lot, I think that's because it is. Protocols are new enough that people are still kinda figuring out how to organize around them
[01:42:10] *** Joins: Hackerpcs (~user@user/hackerpcs)
[01:42:10] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:843a:6e21:9631:a11f) (Quit: Leaving)
[01:42:20] *** Joins: georgios (~georgios@user/georgios)
[01:42:29] <tk> yeah
[01:42:37] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[01:43:39] *** Quits: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:44:35] *** Quits: pigweed_ (~pigweed@184.97.131.31) (Ping timeout: 268 seconds)
[01:44:49] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[01:45:04] *** Joins: sudomann (~sudomann@131.118.76.71)
[01:47:17] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 250 seconds)
[01:47:20] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:47:24] *** Joins: stdout (~stdout@216.163.21.11)
[01:47:39] *** Joins: Klinda (~superleag@user/klinda)
[01:48:03] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:48:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:48:42] *** Joins: skraito (~skraito@user/skraito)
[01:48:55] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[01:49:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[01:49:39] *** Quits: ejjfunky (~ejjfunky@125.163.60.19) (Ping timeout: 256 seconds)
[01:49:56] *** Quits: netrunner (~netrunner@user/netrunner) (Quit: Odinsleep)
[01:50:20] *** Joins: fikran (~fikran@user/fikran)
[01:50:29] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[01:50:33] <aphysically> tk: for 'comparable' you probably want to define your own protocol
[01:51:05] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[01:51:31] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[01:51:38] <qwert> There is an existing codebase that a module and folder have same name 'foo'. We cannot modify any of those names. How to achieve `from myPackage.foo.a import func1` in b.py?
[01:51:39] <qwert> ```
[01:51:39] *** Quits: dirac (~dirac@91-171-103-109.subs.proxad.net) (Quit: WeeChat 3.3)
[01:51:39] <qwert> myPackage
[01:51:40] <qwert>     __init__.py
[01:51:40] <qwert>     foo/
[01:51:41] <qwert>         - a.py
[01:51:41] *** litharge sets mode: +q $a:qwert
[01:51:55] *** Quits: remote (~self@user/hackers) (Ping timeout: 256 seconds)
[01:52:12] *** litharge sets mode: -q $a:qwert
[01:52:41] <bjs> qwert: looks like the bot quieted you because you pasted lines into the channel, you can use a pastebin to paste multiple lines at once
[01:53:34] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:53:51] <qwert> @bis sure. One sec
[01:54:00] <qwert> bjs thanks
[01:54:27] *** Quits: vsantana (~Thunderbi@fttx-177136149239.usr.predialnet.com.br) (Quit: vsantana)
[01:55:39] <qwert> There is an existing codebase that a module and folder have same name `foo`. We cannot modify any of those names. How to achieve `from myPackage.foo.a import func1` in `b.py`?  http://controlc.com/079bd516
[01:55:48] <zacts> hi #python
[01:56:03] <zacts> is it better to use python3 over python2 for new projects?
[01:56:11] <zacts> or when should I use which?
[01:56:21] <grym> zacts: you should always begin new work with 3.7 or higher
[01:56:22] <bjs> zacts: yes use python3
[01:56:22] <SnoopJ> zacts, yes, 3.x is strictly better
[01:56:23] <bjs> don't use python2
[01:56:36] *** Joins: LimeOn (~user@user/limeon)
[01:56:40] <zacts> ok, thanks
[01:56:56] <SnoopJ> when to use 2.x: when you absolutely *have* to (and for new work, this generally is not the case)
[01:57:06] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[01:57:06] <bjs> qwert: does foo have __init__.py ?
[01:57:07] <zacts> thanks
[01:57:10] <grym> when your paying client is holding a paycheck-gun to your head, you write py2
[01:57:12] <grym> otherwise
[01:57:25] <stella> lmao
[01:57:25] <zacts> how well can python interface with C or Rust?
[01:57:26] <grym> perhaps not
[01:57:36] <grym> zacts: quite well; see cffi, for example
[01:57:41] <zacts> cool
[01:57:58] <SnoopJ> many modules are written in C and there are a few tutorials on writing one in Rust by now
[01:58:14] <zacts> ok
[01:58:16] <bjs> qwert: it's a bit hard to make this work ... consistently. As far as Python is concerned foo.py and foo/ are both just the module "foo" and it's going to be very hard to get Python to treat them differently.
[01:58:21] <SnoopJ> and other languages calling into Python is well supported too, at least in CPython
[01:58:33] *** Joins: nomic (~nomic@51.52.78.152)
[01:58:44] *** Quits: onichomp (~onichomp@2806:264:4404:8241:2856:9f40:5f12:9565) (Read error: Connection reset by peer)
[01:58:50] *** Joins: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur)
[01:58:53] <bjs> qwert: I don't really understand why you can't do some renaming of the files
[01:59:23] *** Joins: onichomp (~onichomp@2806:264:4404:8241:2856:9f40:5f12:9565)
[01:59:46] <bjs> qwert: e.g. you could have foo1/ and foo2.py and then have a foo.py that imports all the things from both foo1 and foo2 (if you wanted importing `myPackage.foo` to give access to both)
[01:59:48] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:59:59] <qwert> bjs no. If I add `__init__.py` under directory `foo`, `other.py` will report error because it will search`func2` from directory `foo` rather than from module `foo`
[02:00:01] *** Joins: nomic2 (~nomic@85.203.34.145)
[02:00:02] *** Quits: nomic2 (~nomic@85.203.34.145) (Client Quit)
[02:00:15] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[02:00:40] *** Quits: qwert (~qwert@208.78.214.5) (Quit: Client closed)
[02:01:03] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[02:01:04] *** Joins: nomic2 (~nomic@85.203.46.65)
[02:01:20] *** Joins: qwert (~qwert@208.78.214.5)
[02:01:23] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 250 seconds)
[02:01:43] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 252 seconds)
[02:01:52] *** Parts: k4rt0ff31ch33t4h (~k4rt0ff3l@94-21-215-253.pool.digikabel.hu) ()
[02:02:51] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:02:53] *** Quits: magla (~gelignite@55d4970c.access.ecotel.net) (Quit: Stay safe!)
[02:03:49] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 256 seconds)
[02:04:12] *** nomic2 is now known as nomic
[02:04:43] <qwert> bjs The code and file path are shared with multiple projects. I will think your idea about creating a new file to import both. Thank you very much!
[02:05:31] *** Quits: a0z1 (~a0z1@185.254.75.32) (Ping timeout: 256 seconds)
[02:05:58] *** Joins: akahs (~Shaka@user/shaka)
[02:06:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:07:16] *** Quits: Payam (~Payam@138.106.57.132) (Quit: Client closed)
[02:08:16] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[02:08:48] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[02:09:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:10:56] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Remote host closed the connection)
[02:11:16] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:14:00] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[02:15:03] <tr4ck3ur> ^^
[02:15:21] *** Joins: Abdullah (~ak@user/abdullah)
[02:15:23] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[02:16:10] <SnoopJ> does anybody have any idea why PyOS_FSPath() is failing on a PosixPath instance here? https://bpa.st/Q2OA[
[02:16:19] *** Joins: ano (~ano@user/ano)
[02:16:21] <SnoopJ> err, without the [ https://bpa.st/Q2OA
[02:16:57] <Abdullah> I want to get remote windows host's version and build id using python...
[02:18:05] *** moose`` is now known as moose
[02:19:46] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:20:38] *** Quits: devish (~devish@205.251.233.53) (Quit: Client closed)
[02:23:36] *** Quits: akahs (~Shaka@user/shaka) (Quit: .)
[02:23:41] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[02:24:57] <remolej> is there something like java's lucene in python? or o therwise - what do u guys use for search?
[02:27:27] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[02:28:09] <tr4ck3ur> remolej, first approach, i would say as wikipedia page suggest on lucene ?
[02:28:39] *** Joins: naari (~naari@user/naari)
[02:28:49] <tr4ck3ur> -p (to joke)
[02:29:28] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[02:29:57] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[02:30:49] *** Quits: nomic (~nomic@85.203.46.65) (Quit: Leaving)
[02:31:34] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[02:31:39] *** Joins: nomic (~nomic@85.203.46.65)
[02:32:00] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[02:32:29] *** Joins: zzainoo (~zzainoo@151.236.166.213)
[02:32:42] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:34:02] *** Joins: wyre_ (~wyre@user/wyre)
[02:34:17] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:34:48] *** Quits: b3z (~b3z@user/b3z) (Ping timeout: 265 seconds)
[02:35:17] *** Quits: wyre (~wyre@user/wyre) (Ping timeout: 265 seconds)
[02:35:33] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[02:35:37] *** Quits: fling (~fling@user/fling) (Ping timeout: 250 seconds)
[02:36:04] *** Quits: lastshell (~lastshell@user/lastshell) (Quit: WeeChat 3.0)
[02:36:05] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Read error: Connection reset by peer)
[02:38:01] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 252 seconds)
[02:38:31] <aphysically> jinsun: hey, you around?
[02:38:57] *** Quits: zzainoo (~zzainoo@151.236.166.213) (Ping timeout: 256 seconds)
[02:40:05] *** Joins: Terexen (~terexen@user/terexen)
[02:40:07] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[02:40:46] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 245 seconds)
[02:43:45] *** Joins: p-i-_ (~Ohmu@223.206.145.10)
[02:43:59] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 265 seconds)
[02:45:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:26] *** Joins: DonRichie (~DonRichie@ricl.de)
[02:46:32] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[02:47:33] *** Quits: p-i- (~Ohmu@mx-ll-223.206.145-10.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[02:47:41] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[02:47:49] *** Quits: Spaceflight (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:47:53] <SnoopJ> oh, I figured out the answer to my own question: the error indicator was set and in a debug build that is a fatal error I believe. The error indicator being set is what I was debugging, but I thought I'd blundered into a different error.
[02:48:02] *** Joins: Roey (~Roey@user/Roey)
[02:48:25] <SnoopJ> I have no idea why the indicator is set when *entering* the offending SWIG typecheck though...
[02:48:37] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Ping timeout: 250 seconds)
[02:48:54] <Yhg1s> SnoopJ: it means you have a different C function that doesn't clear the error after it handled the exception, or doesn't return NULL/-1 when it should have.
[02:49:07] *** Quits: Andrynet1 (~Andrynet@190.152.206.29) (Read error: Connection reset by peer)
[02:49:20] *** Joins: nomic2 (~nomic@85.203.46.65)
[02:49:28] <Yhg1s> (this used to not be an error, but since 3.6 or so more and more places assert that no exception is set on entry, to avoid spurious errors showing up.)
[02:49:37] *** Joins: Andrynet1 (~Andrynet@190.152.206.29)
[02:50:07] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[02:50:10] <Yhg1s> Without the asserts, what would happen is that something that _might_ return an error indicator without setting an exception, like PyDict_GetItem(), would start "raising" that exception.
[02:50:12] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[02:51:02] *** Quits: NeilG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[02:51:27] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[02:51:28] <SnoopJ> Yhg1s, yea, I'm wondering if SWIG's codegen isn't cleaning up after itself somewhere. Putting a PyErr_Clear() at the top of the typecheck works, although it feels like a kludge. I should probably find out what set the indicator and never cleared it.
[02:51:29] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[02:51:30] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[02:52:12] *** Quits: nomic (~nomic@85.203.46.65) (Ping timeout: 265 seconds)
[02:52:23] <SnoopJ> I thought I was going crazy since PyOS_FSPath() was failing, but os.fspath() on exactly the same object was succeeding when I tried to reproduce it :)
[02:53:21] *** nomic2 is now known as nomic
[02:53:33] <Abdullah> I want to detect the Windows's remote host's hardware info with python. Is it possible?
[02:53:43] <aphysically> jinsun: what do you think of this? https://bpa.st/PMHQ
[02:54:02] <aphysically> I have no idea what mypy is on about
[02:54:46] *** Joins: a0z1 (~a0z1@185.209.196.149)
[02:55:26] <Abdullah> ERROR: Could not find a version that satisfies the requirement pywin32
[02:55:29] <Abdullah> ERROR: No matching distribution found for pywin32
[02:55:47] <Abdullah> I want to install pywin32 in my arch linux host
[02:56:07] <tr4ck3ur> or not
[02:56:18] <Yhg1s> SnoopJ: if you're using a recent version of SWIG, it's unlikely to be a problem in any of its templates (although, of course, SWIG is _terrible_). It's more likely to be somewhere in your own SWIG wrappers.
[02:56:26] <mefistofeles> Abdullah: what?
[02:56:37] *** Quits: ubert (~Thunderbi@p200300ecdf1abb061518ea9ba8d342d1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:56:37] *** ub is now known as ubert
[02:56:40] <grym> Abdullah: uh.  wine? i geuss
[02:56:40] <Yhg1s> Abdullah: you can't install pywin32 on linux, I'm afraid. It's only available for Windows.
[02:56:54] <mefistofeles> or wine, as grym says
[02:57:02] <Abdullah> no wine.
[02:57:24] <grym> then, no pywin32
[02:57:47] <Abdullah> I just want to create a script for *nix. This script will then fetch the windows host's info
[02:58:38] <mefistofeles> Abdullah: can you run things in the windows host?
[02:58:54] <Abdullah> yes
[02:59:04] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[02:59:15] <aphysically> jinsun: idk I think maybe both mypy and pyright can be improved here? https://bpa.st/VQGQ
[02:59:30] <mefistofeles> why not running something there that sends the info, I guess you can use some socket or some lib to make it more sophisticated when communicating the infromation
[02:59:35] <Abdullah> I just want to detect some windows host's hardware info using wmi
[03:00:00] <SnoopJ> Yhg1s, agreed, probably I'm just bailing out of a typecheck somewhere else without cleaning up
[03:00:05] <tr4ck3ur> perhaps https://docs.python.org/3/library/ctypes.html may be a workaround to pywin32 (my two cents)
[03:00:34] <SnoopJ> I know for sure I haven't been worrying about cleaning this up in %typemap(typecheck), so if it's needed _anywhere_ else, I missed it :)
[03:01:03] *** Quits: sudomann (~sudomann@131.118.76.71) (Ping timeout: 256 seconds)
[03:01:17] *** Joins: Macuser (~Macuser@2600:1003:b443:39bf:179:badd:53f3:2eea)
[03:01:46] <Abdullah> I'm using  impacket in main script which checks users credentials (if they are valid or not).
[03:02:01] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[03:02:04] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[03:02:10] <Abdullah> RDP's user credentials.
[03:02:11] *** Joins: ericlee (~ericlee@2601:647:4681:3420::7)
[03:03:26] <Yhg1s> Abdullah: you would need pywin32 installed on the windows host, not on the linux one, and a script running there to query what you need queried.
[03:03:35] *** Quits: qwert (~qwert@208.78.214.5) (Quit: Client closed)
[03:04:14] *** Quits: cosimone (~user@93-47-228-203.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:04:22] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[03:04:58] <Abdullah> Yhg1s: isn't there a way to detect windows version installed on remote host (where python isn't installed)
[03:05:08] <aphysically> yeah I'll file mypy and pyright bugs later I guess https://bpa.st/BLXQ
[03:05:21] <Yhg1s> Abdullah: not with Python, no.
[03:05:55] <Yhg1s> Abdullah: or, I should say, not with pywin32. That's not what it's for. There may be other third-party libraries that give you access to that kind of information.
[03:06:59] *** Quits: thiras_ (~thiras@user/thiras) (Ping timeout: 252 seconds)
[03:07:10] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[03:07:19] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[03:07:40] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:08:06] <Abdullah> Yhg1s: I will try nmap library
[03:09:11] *** Quits: ericlee (~ericlee@2601:647:4681:3420::7) (Ping timeout: 252 seconds)
[03:09:22] *** Quits: beencubed (~beencubed@209.131.238.248) (Quit: Leaving)
[03:09:29] <aphysically> https://bpa.st/NLAQ
[03:11:18] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:13:00] *** Quits: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Quit: water tribe)
[03:13:06] *** Quits: Zweimer (~Zweimer@2a02:908:d20:26e0:6da9:d334:4fce:a8fc) (Quit: Client closed)
[03:14:47] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[03:14:53] *** Joins: Linux77 (~LinuMage@186.233.183.58)
[03:18:11] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[03:19:40] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[03:19:48] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Client closed)
[03:20:02] *** Joins: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[03:20:13] *** Quits: theprophet (~theprophe@85.114.228.184) (Ping timeout: 256 seconds)
[03:22:16] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[03:23:01] *** Joins: Auron (~Auron956@user/auron)
[03:23:22] *** Quits: parv (~quass@user/parv) (Quit: parv)
[03:24:17] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:24:29] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[03:25:13] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:25:38] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[03:27:13] *** Joins: remote (~self@user/hackers)
[03:27:25] *** Joins: junebug (~junebug@2600:1700:3db0:2540:56bb:cb52:830f:bd30)
[03:27:44] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:28:03] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:28:07] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:29:02] *** Joins: theprophet (~theprophe@85.114.228.184)
[03:29:12] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[03:29:28] <cliluw> How do I use string indexing to remove the first char of a string and then reverse all the remaining characters?
[03:29:36] *** Joins: TML (~tml@user/tml)
[03:29:59] <cliluw> I'm trying s[1:-1:-1] but it ain't working.
[03:30:03] *** Quits: TML (~tml@user/tml) (*.net *.split)
[03:30:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[03:30:03] *** Quits: Macuser (~Macuser@2600:1003:b443:39bf:179:badd:53f3:2eea) (*.net *.split)
[03:30:03] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (*.net *.split)
[03:30:03] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (*.net *.split)
[03:30:03] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (*.net *.split)
[03:30:03] *** Quits: Abdullah (~ak@user/abdullah) (*.net *.split)
[03:30:03] *** Quits: Hackerpcs (~user@user/hackerpcs) (*.net *.split)
[03:30:03] *** Quits: BinaryWave (~binarywav@ip68-2-121-39.ph.ph.cox.net) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: grooverman_ (~grooverma@177.102.117.95) (*.net *.split)
[03:30:03] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (*.net *.split)
[03:30:03] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[03:30:03] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[03:30:03] *** Quits: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1) (*.net *.split)
[03:30:03] *** Quits: redgloboli (~redglobol@user/redgloboli) (*.net *.split)
[03:30:03] *** Quits: reset (~reset@user/reset) (*.net *.split)
[03:30:03] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (*.net *.split)
[03:30:03] *** Quits: apollo13 (apollo13@django/moderator/apollo13) (*.net *.split)
[03:30:03] *** Quits: radu2424078 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (*.net *.split)
[03:30:03] *** Quits: minto_ (~mintograd@47.201.5.61) (*.net *.split)
[03:30:03] *** Quits: h_ (~rootveget@fsf/member/hays) (*.net *.split)
[03:30:03] *** Quits: bloody (~bloody@user/bloody) (*.net *.split)
[03:30:03] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:8811:993d:f93b:cf41) (*.net *.split)
[03:30:03] *** Quits: lethu (~lethu@user/lethu) (*.net *.split)
[03:30:03] *** Quits: Jong (~Jong@2620:10d:c090:400::5:3f74) (*.net *.split)
[03:30:03] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[03:30:03] *** Quits: goutly (~gitly@85.255.233.150) (*.net *.split)
[03:30:03] *** Quits: l4yer (~l4yer@195.181.170.210) (*.net *.split)
[03:30:03] *** Quits: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: palasso (~palasso@user/palasso) (*.net *.split)
[03:30:03] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (*.net *.split)
[03:30:03] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (*.net *.split)
[03:30:03] *** Quits: anchovy (~anchovy@101.191.178.3) (*.net *.split)
[03:30:03] *** Quits: luva (~luva@37.120.197.45) (*.net *.split)
[03:30:03] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: RiFo (~RiFo@user/rifo) (*.net *.split)
[03:30:03] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[03:30:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[03:30:03] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[03:30:03] *** Quits: emf_ (~emf@2620:10d:c091:480::1:305b) (*.net *.split)
[03:30:03] *** Quits: XV8 (~XV8@2601:5cb:c001:50:29c4:77b3:3d1a:a58b) (*.net *.split)
[03:30:03] *** Quits: rya (~ry@user/rya) (*.net *.split)
[03:30:03] *** Quits: ttys000 (~ttys000@user/ttys000) (*.net *.split)
[03:30:03] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (*.net *.split)
[03:30:03] *** Quits: grandrew (~grandrew@2600:1700:42f3:9180:f22f:74ff:feac:90a3) (*.net *.split)
[03:30:03] *** Quits: twobitsprite (~twobitspr@195.181.171.237) (*.net *.split)
[03:30:03] *** Quits: pystardust (~pystardus@172-105-41-139.ip.linodeusercontent.com) (*.net *.split)
[03:30:03] *** Quits: xakan (~xakan@pnmx.zdx.fr) (*.net *.split)
[03:30:03] *** Quits: HurricaneHarry (~quassel@84-85-122-182.fixed.kpn.net) (*.net *.split)
[03:30:03] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[03:30:03] *** Quits: nexgen2 (~nexgen@li614-178.members.linode.com) (*.net *.split)
[03:30:03] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[03:30:03] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (*.net *.split)
[03:30:03] *** Quits: DesolateHypertex (~DesolateH@static.213-133-103-49.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: yourfate (~yourfate@cabal.yourfate.org) (*.net *.split)
[03:30:03] *** Quits: giusb (~giusb@user/giusb) (*.net *.split)
[03:30:03] *** Quits: ingo (~ingo@user/ingo) (*.net *.split)
[03:30:04] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: dbristow (~dbristow@user/dbristow) (*.net *.split)
[03:30:04] *** Quits: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com) (*.net *.split)
[03:30:04] *** Quits: infernix (nix@2a02:22a0:bbb1:d500::2) (*.net *.split)
[03:30:04] *** Quits: fluter- (~fluter@user/fluter) (*.net *.split)
[03:30:04] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[03:30:04] *** Quits: mud (~mud@user/kadoban) (*.net *.split)
[03:30:04] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:bdf6:8e80:3874:783f) (*.net *.split)
[03:30:04] *** Quits: greentree (~greentree@pool-74-101-99-157.nycmny.fios.verizon.net) (*.net *.split)
[03:30:04] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[03:30:04] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[03:30:04] *** Quits: capn (~capn@user/capn) (*.net *.split)
[03:30:04] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (*.net *.split)
[03:30:04] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[03:30:04] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[03:30:04] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[03:30:04] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (*.net *.split)
[03:30:04] *** Quits: lystra (~lystra@d53-64-11-169.nap.wideopenwest.com) (*.net *.split)
[03:30:04] *** Quits: tr0cse (uid531345@user/tr0cse) (*.net *.split)
[03:30:04] *** Quits: defjam (~eb0t@90.210.94.161) (*.net *.split)
[03:30:04] *** Quits: uuair (~quassel@user/uuair) (*.net *.split)
[03:30:04] *** Quits: _0az3 (~az0@user/az0) (*.net *.split)
[03:30:04] *** Quits: abelvesa (~abel@188.25.169.131) (*.net *.split)
[03:30:04] *** Quits: r3m (~launch@user/r3m) (*.net *.split)
[03:30:04] *** Quits: zware (~zach@python/psf/zware) (*.net *.split)
[03:30:04] *** Quits: lantech19446 (~lantech19@144.202.10.138) (*.net *.split)
[03:30:04] *** Quits: jab416171 (~jab416171@c-174-52-177-39.hsd1.ut.comcast.net) (*.net *.split)
[03:30:04] *** Quits: beenao (~beenao@user/beenao) (*.net *.split)
[03:30:04] *** Quits: gbear605 (~gbear605@user/gbear605) (*.net *.split)
[03:30:04] *** Quits: martums (~martums@user/martums) (*.net *.split)
[03:30:04] *** Quits: Jak_o_Shadows (~quassel@user/jak-o-shadows/x-5091859) (*.net *.split)
[03:30:04] *** Quits: haps (~haps@hyena.haps.ca) (*.net *.split)
[03:30:04] *** Quits: w\W (code@192.99.249.211) (*.net *.split)
[03:30:04] *** Quits: seanh (1a2a07ea57@2604:bf00:561:2000::201) (*.net *.split)
[03:30:04] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[03:30:04] *** Quits: Socra (~Socra@206.217.216.27) (*.net *.split)
[03:30:04] *** Quits: dale (dale@user/dale) (*.net *.split)
[03:30:04] *** Quits: flyback (~flyback@2601:540:8201:1e60::8aa3) (*.net *.split)
[03:30:04] *** Quits: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com) (*.net *.split)
[03:30:04] *** Quits: AnimalFarmPig (~quassel@user/animalfarmpig) (*.net *.split)
[03:30:04] *** Quits: nigelb_ (~nigel@zeus.nigelb.me) (*.net *.split)
[03:30:04] *** Quits: jbe (~jbe@lysator/root/jbe) (*.net *.split)
[03:30:04] *** Quits: Quaack (~Quack@185.21.216.169) (*.net *.split)
[03:30:04] *** Quits: moto (~moto@user/moto) (*.net *.split)
[03:30:04] *** Quits: dv2 (~dv2@eclipse.oxfordfun.com) (*.net *.split)
[03:30:04] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (*.net *.split)
[03:30:04] *** Quits: akelly (24aca7a63b@2604:bf00:561:2000::152) (*.net *.split)
[03:30:04] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[03:30:04] *** Quits: srstevenson (b46bf53c49@2604:bf00:561:2000::f3) (*.net *.split)
[03:30:04] *** Quits: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d) (*.net *.split)
[03:30:04] *** Quits: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5) (*.net *.split)
[03:30:04] *** Quits: Hummer12007 (061e0434dc@2604:bf00:561:2000::16) (*.net *.split)
[03:30:04] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17) (*.net *.split)
[03:30:04] *** Quits: andrea (3f138254b4@2604:bf00:561:2000::38) (*.net *.split)
[03:30:04] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[03:30:04] *** Quits: hwrd (aa272caead@2604:bf00:561:2000::137) (*.net *.split)
[03:30:04] *** Quits: viaSanctus (~viaSanctu@user/viasanctus) (*.net *.split)
[03:30:04] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[03:30:04] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (*.net *.split)
[03:30:04] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[03:30:04] *** Quits: Knyght (sid365271@id-365271.helmsley.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[03:30:04] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[03:30:04] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (*.net *.split)
[03:30:04] *** Quits: redrum88 (redrum88@user/redrum88) (*.net *.split)
[03:30:04] *** Quits: fxrs (~fxrs@192.227.212.130) (*.net *.split)
[03:30:04] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[03:30:04] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[03:30:04] *** Quits: n-st (~n-st@user/n-st) (*.net *.split)
[03:30:04] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[03:30:04] *** Quits: effprime (~effprime@user/effprime) (*.net *.split)
[03:30:04] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[03:30:04] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[03:30:04] *** Quits: haise01 (~haise01@user/haise01) (*.net *.split)
[03:30:04] *** Quits: Pici (~bnrubin@li1014-36.members.linode.com) (*.net *.split)
[03:30:04] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[03:30:04] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[03:30:04] *** Quits: zeus (~user@user/kamyl) (*.net *.split)
[03:30:04] *** Quits: gerard (~gerard@user/gerard) (*.net *.split)
[03:30:04] *** Quits: tris (emptystrin@irc1.lessbroken.org) (*.net *.split)
[03:30:04] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[03:30:05] *** Quits: arza (arza@arza.us) (*.net *.split)
[03:30:05] *** Quits: vodkra (~vodkra@user/vodkra) (*.net *.split)
[03:30:05] *** Quits: peac (sid344662@id-344662.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[03:30:05] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[03:30:05] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (*.net *.split)
[03:30:05] *** Quits: Leliana (is@the.one.and.only.revthefox.co.uk) (*.net *.split)
[03:30:05] *** Quits: lastmikoi (~lastmikoi@vm-01.lastmikoi.net) (*.net *.split)
[03:30:05] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (*.net *.split)
[03:30:05] *** Quits: death916 (~death916@user/death916) (*.net *.split)
[03:30:05] *** Quits: homura (uid398348@user/homura) (*.net *.split)
[03:30:05] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[03:30:05] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[03:30:05] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[03:30:05] *** Quits: ialokin (znc@user/ialokin) (*.net *.split)
[03:30:05] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[03:30:05] *** Quits: ryan-c (ryan-c@znc.rya.nc) (*.net *.split)
[03:30:05] *** Quits: roguelazer_ (~jbrown@sietchtabr.roguelazer.net) (*.net *.split)
[03:30:05] *** Quits: Togra (~Togra@user/togra) (*.net *.split)
[03:30:05] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[03:30:05] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[03:30:05] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[03:30:05] *** Quits: remote (~self@user/hackers) (*.net *.split)
[03:30:05] *** Quits: demophoon4 (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (*.net *.split)
[03:30:05] *** Quits: nomic (~nomic@85.203.46.65) (*.net *.split)
[03:30:05] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[03:30:05] *** Quits: onichomp (~onichomp@2806:264:4404:8241:2856:9f40:5f12:9565) (*.net *.split)
[03:30:05] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (*.net *.split)
[03:30:05] *** Quits: c4017w (~c4017@209.52.68.8) (*.net *.split)
[03:30:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[03:30:05] *** Quits: Hunterkll (~hunterkll@remote.kisaracorporation.com) (*.net *.split)
[03:30:05] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: xrogaan (~xrogaan@user/xrogaan) (*.net *.split)
[03:30:05] *** Quits: FluffyMask (~masque@user/fluffymask) (*.net *.split)
[03:30:05] *** Quits: rinzewind (~rinzewind@user/rinzewind) (*.net *.split)
[03:30:05] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (*.net *.split)
[03:30:05] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[03:30:05] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[03:30:05] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[03:30:05] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (*.net *.split)
[03:30:05] *** Quits: deutor (~quassel@82.177.4.226) (*.net *.split)
[03:30:05] *** Quits: swinnenb (~swinnenb@user/swinnenb) (*.net *.split)
[03:30:05] *** Quits: sreve (~quassel@p4ff44d3f.dip0.t-ipconnect.de) (*.net *.split)
[03:30:05] *** Quits: Balzy (~Balzy@host-87-14-134-154.retail.telecomitalia.it) (*.net *.split)
[03:30:05] *** Quits: canton7 (canton7@about/csharp/canton7) (*.net *.split)
[03:30:05] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (*.net *.split)
[03:30:05] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[03:30:05] *** Quits: CrypticSquared (~CrypticS_@user/crypticsquared) (*.net *.split)
[03:30:05] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[03:30:05] *** Quits: janemba (~janemba@94.204.254.193) (*.net *.split)
[03:30:05] *** Quits: zepolen_ (~zepolen@ppp-94-66-223-207.home.otenet.gr) (*.net *.split)
[03:30:05] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (*.net *.split)
[03:30:05] *** Quits: gr1m (~gr1m@193.138.218.215) (*.net *.split)
[03:30:05] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (*.net *.split)
[03:30:05] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[03:30:05] *** Quits: matrixbot_bartab (~matrixbot@lfbn-idf1-1-1565-7.w90-90.abo.wanadoo.fr) (*.net *.split)
[03:30:05] *** Quits: thunfisch (~thunfisch@user/thunfisch) (*.net *.split)
[03:30:05] *** Quits: trashbird (~trashbird@user/trashbird) (*.net *.split)
[03:30:05] *** Quits: cecep[m] (~cecep@2001:470:69fc:105::3994) (*.net *.split)
[03:30:05] *** Quits: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb) (*.net *.split)
[03:30:05] *** Quits: neolem (~neolem@2001:470:69fc:105::c675) (*.net *.split)
[03:30:06] *** Quits: zardian[m] (~zardi@2001:470:69fc:105::1:4444) (*.net *.split)
[03:30:06] *** Quits: Echoz (~chris@user/echoz) (*.net *.split)
[03:30:06] *** Quits: Mathisen (mathisen@about/windows/staff/mathisen) (*.net *.split)
[03:30:06] *** Quits: n0___ (~n0___@user/n0/x-7412091) (*.net *.split)
[03:30:06] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[03:30:06] *** Quits: steam (~steam@user/steam) (*.net *.split)
[03:30:06] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[03:30:06] *** Quits: mumixam (~m@user/mumixam) (*.net *.split)
[03:30:06] *** Quits: sale (~sale@ypocit.initech.link) (*.net *.split)
[03:30:06] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[03:30:06] *** Quits: BuddyTheElf (launchd@bitbot/launchd) (*.net *.split)
[03:30:06] *** Quits: Buliarous (~gypsydang@46.232.210.139) (*.net *.split)
[03:30:06] *** Quits: gry (gry@botters/gry) (*.net *.split)
[03:30:06] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[03:30:06] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[03:30:06] *** Quits: coldmountain (sid484352@id-484352.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: Robin_Jadoul (afe6b98926@2604:bf00:561:2000::18e) (*.net *.split)
[03:30:06] *** Quits: njt (~njt@zaph.org) (*.net *.split)
[03:30:06] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (*.net *.split)
[03:30:06] *** Quits: Alexer (~alexer@alexer.net) (*.net *.split)
[03:30:06] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[03:30:06] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[03:30:06] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (*.net *.split)
[03:30:06] *** Quits: amoros (~irc@user/amoros) (*.net *.split)
[03:30:06] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (*.net *.split)
[03:30:06] *** Quits: masterkorp (~masterkor@user/masterkorp) (*.net *.split)
[03:30:06] *** Quits: explodes (~explodes@user/explodes) (*.net *.split)
[03:30:06] *** Quits: Bardon (~Bardon@user/Bardon) (*.net *.split)
[03:30:06] *** Quits: bss (bss@rie.incorporeal.org) (*.net *.split)
[03:30:06] *** Quits: Armen (~Armen@armen138.com) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:06] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[03:30:13] *** Joins: deltab (~deltab@user/deltab)
[03:30:14] *** Joins: Hummer12007 (061e0434dc@2604:bf00:561:2000::16)
[03:30:16] *** Joins: jbe (~jbe@lysator/root/jbe)
[03:30:16] *** Joins: andrea (3f138254b4@2604:bf00:561:2000::38)
[03:30:16] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[03:30:16] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[03:30:18] *** Joins: vodkra (~vodkra@user/vodkra)
[03:30:22] <SnoopJ> cliluw, does this do what you want? `reversed(yourstring[1:])`
[03:30:23] *** Joins: Riviera (Riviera@user/riviera)
[03:30:25] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[03:30:29] *** Joins: tris (emptystrin@irc1.lessbroken.org)
[03:30:34] *** Joins: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net)
[03:30:39] *** Joins: matrixbot_bartab (~matrixbot@lfbn-idf1-1-1565-7.w90-90.abo.wanadoo.fr)
[03:30:45] *** Joins: masterkorp (~masterkor@user/masterkorp)
[03:30:45] *** Joins: Forsaken87 (~quassel@2a02:908:1867:7d40:93ab:b917:6d2c:4af1)
[03:30:46] *** Joins: xakan (~xakan@pnmx.zdx.fr)
[03:30:46] *** Joins: sus (zero@user/zeromomentum)
[03:30:49] <aphysically> uhhh https://bpa.st/AOCQ
[03:30:51] *** Quits: jim87 (~gfurlan@2001:b07:5d37:f91e:c08b:dbe4:b466:4b28) (Quit: Konversation terminated!)
[03:30:53] *** Joins: zware (~zach@python/psf/zware)
[03:30:54] <cliluw> Yeah, but it's a bit verbose. I'd like to use the third param in the str slice.
[03:31:26] *** Joins: mrHedgehog0 (9658dbe103@2604:bf00:561:2000::a5)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:37] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:bdf6:8e80:3874:783f)
[03:31:38] <SnoopJ> cliluw, you can do the same thing with `s[-1:0:-1]` but I find that really hard to read (and had a false start or two before I got the `end` right)
[03:31:44] *** Joins: TML (~tml@user/tml)
[03:32:07] <SnoopJ> (i.e. start at the end, stop at the 0th element, advance backwards)
[03:32:41] *** Joins: sreve (~quassel@p4ff44d3f.dip0.t-ipconnect.de)
[03:32:41] *** Joins: deutor (~quassel@176.221.113.10)
[03:32:43] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[03:32:43] *** Joins: akelly (24aca7a63b@2604:bf00:561:2000::152)
[03:32:49] <cliluw> SnoopJ: Thanks! [-1:0:1] is exactly what I want. I didn't realize I had to flip the first two indices.
[03:32:52] *** Joins: carbolymer (~carbolyme@dropacid.net)
[03:32:52] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[03:33:02] *** Joins: l4yer (~l4yer@195.181.170.210)
[03:33:02] *** Joins: flyback (~flyback@2601:540:8201:1e60::8aa3)
[03:33:11] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[03:33:12] *** Joins: roguelazer (~jbrown@sietchtabr.roguelazer.net)
[03:33:13] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Remote host closed the connection)
[03:33:15] *** Joins: nomic (~nomic@85.203.46.65)
[03:33:15] *** Joins: launchd (launchd@bitbot/launchd)
[03:33:16] *** Joins: RiFo (~RiFo@user/rifo)
[03:33:18] *** Joins: mintograde (~mintograd@47.201.5.61)
[03:33:18] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[03:33:18] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[03:33:21] <bancroft> what the heck, why did I get sent to unregistered?
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:30] *** Quits: nomic (~nomic@85.203.46.65) (Read error: Connection reset by peer)
[03:33:32] *** Joins: jcalla (~jcalla@cpe-75-189-211-206.nc.res.rr.com)
[03:33:35] *** Joins: AnimalFarmPig (~quassel@user/animalfarmpig)
[03:33:35] *** Joins: dbristow (~dbristow@user/dbristow)
[03:33:35] *** Joins: nawcom (~nawcom@bulldadachat.com)
[03:33:38] *** Joins: Bardon (~Bardon@user/Bardon)
[03:33:38] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[03:33:39] *** Quits: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com) (Remote host closed the connection)
[03:33:42] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-ddaa-6a2f-d88e-750c.fixed6.kpn.net)
[03:33:43] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[03:33:47] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[03:33:53] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[03:33:53] *** Joins: srstevenson (b46bf53c49@2604:bf00:561:2000::f3)
[03:33:57] *** Joins: Pici (bnrubin@2600:3c03::f03c:91ff:fe60:2576)
[03:33:59] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[03:33:59] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[03:34:05] *** Joins: n-st (~n-st@user/n-st)
[03:34:07] *** Joins: hays (rootvegeta@fsf/member/hays)
[03:34:09] *** Joins: tkazi (~tkazi@user/tkazi)
[03:34:10] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[03:34:10] *** Joins: dxrt (~dxrt@user/dxrt)
[03:34:13] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[03:34:13] *** Joins: lastmikoi (~lastmikoi@vm-01.lastmikoi.net)
[03:34:15] *** Joins: nomic (~nomic@85.203.46.65)
[03:34:15] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[03:34:15] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[03:34:16] *** Joins: steam (~steam@user/steam)
[03:34:17] <SnoopJ> cliluw, I find it easiest to think about it in terms of start/stop/step. Your attempt would translate as "start at element 1, go to element -1, step by -1" and so it starts at 1, sees that it's "already" past the end of -1, and stops.
[03:34:18] *** Joins: canton7 (canton7@about/csharp/canton7)
[03:34:19] *** Joins: Pixi (~Pixi@user/pixi)
[03:34:20] *** Joins: uuair (~quassel@user/uuair)
[03:34:22] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[03:34:25] *** Joins: cacheyourdreams (~cache@user/cacheyourdreams)
[03:34:25] *** Joins: fxrs (~fxrs@192.227.212.130)
[03:34:25] *** Joins: twofingersneat (~twofinger@174-080-036-228.res.spectrum.com)
[03:34:25] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[03:34:28] *** Joins: thickrocks (e46ff6ac16@2604:bf00:561:2000::13d)
[03:34:29] *** Joins: dale (dale@user/dale)
[03:34:29] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[03:34:31] *** Joins: ingo (~ingo@user/ingo)
[03:34:31] *** Joins: haasn (~nand@haasn.dev)
[03:34:31] *** Joins: CrypticSquared (~CrypticS_@user/crypticsquared)
[03:34:32] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[03:34:32] *** Joins: dbristow (~dbristow@user/dbristow)
[03:34:32] *** Joins: cecep[m] (~cecep@2001:470:69fc:105::3994)
[03:34:33] *** Joins: Telvana (~capo@user/telvana)
[03:34:33] *** Joins: pizzaiolo (~pizzaiolo@user/pizzaiolo)
[03:34:33] *** Joins: gbear605 (~gbear605@user/gbear605)
[03:34:34] *** Joins: Strom (strom@fedora/strom)
[03:34:35] *** Joins: gr1m (~gr1m@193.138.218.215)
[03:34:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[03:34:38] *** Joins: Milos (~Milos@user/milos)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:40] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[03:34:41] *** Joins: grooverman (~grooverma@177.95.12.14)
[03:34:42] *** Joins: haise01 (~haise01@user/haise01)
[03:34:43] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[03:34:44] *** Joins: ialokin (znc@user/ialokin)
[03:34:45] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[03:34:45] *** Joins: njt (~njt@zaph.org)
[03:34:46] *** Joins: kurfen (~kurfen@176.119.195.10)
[03:34:46] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[03:34:47] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[03:34:47] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:34:47] *** Joins: ryan-c (~ryanc@znc.rya.nc)
[03:34:48] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[03:34:49] *** Joins: sale (~sale@ypocit.initech.link)
[03:34:50] *** Joins: apollo13 (apollo13@django/moderator/apollo13)
[03:34:50] *** Joins: yourfate (~yourfate@cabal.yourfate.org)
[03:34:51] *** Joins: Mathisen (mathisen@about/windows/staff/mathisen)
[03:34:51] *** Joins: shan (~shan@cyblog/maintainer/shan)
[03:34:54] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[03:35:01] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[03:35:01] *** Joins: effprime (~effprime@user/effprime)
[03:35:02] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:709c:9846:1a15:3967)
[03:35:07] *** Joins: dhellmann (~dhellmann@097-081-099-073.res.spectrum.com)
[03:35:10] *** Joins: zeus (~user@user/kamyl)
[03:35:10] *** Joins: nigelb (~nigel@zeus.nigelb.me)
[03:35:11] *** Joins: Socra (~Socra@206.217.216.27)
[03:35:14] *** Joins: Togra (~Togra@user/togra)
[03:35:15] *** Joins: d3x (michal@bielaw.ski)
[03:35:16] *** Joins: Buliarous (~gypsydang@46.232.210.139)
[03:35:16] *** Joins: lethu (~lethu@user/lethu)
[03:35:17] *** Joins: mcglk (~mcglk@131.191.49.120)
[03:35:18] *** Quits: ano (~ano@user/ano) (Ping timeout: 276 seconds)
[03:35:21] *** Joins: Hawker (~pi@user/hawker)
[03:35:24] *** Joins: moto (~moto@user/moto)
[03:35:24] <jfcaron> What's the decorator for a static class member in python?
[03:35:27] *** Joins: klys (~mdasoh@show.op8.us)
[03:35:28] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[03:35:29] <jfcaron> Or do I not need one?
[03:35:30] *** Joins: n0___ (~n0___@user/n0/x-7412091)
[03:35:30] *** Quits: jamiejackson (~jamiejack@207.172.87.34) (Remote host closed the connection)
[03:35:30] *** Quits: moogs (~moogs@12.146.254.146) (Remote host closed the connection)
[03:35:31] *** Joins: haps (~haps@hyena.haps.ca)
[03:35:31] *** Joins: grnman_ (~grnman@159.89.27.73)
[03:35:32] *** Joins: twobitsprite (~twobitspr@195.181.171.237)
[03:35:34] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:35:35] *** Joins: koolazer (~koo@user/koolazer)
[03:35:38] *** Joins: DonRichie (~DonRichie@ricl.de)
[03:35:46] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[03:35:46] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[03:35:47] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[03:35:48] <jfcaron> oh right, nvm
[03:35:48] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[03:35:48] *** Joins: mdw (~root@159.65.86.163)
[03:35:55] *** Joins: redrum88 (redrum88@user/redrum88)
[03:35:55] <SnoopJ> jfcaron, there's @staticmethod if you want a function that's on the class but not bound
[03:36:06] <jfcaron> Thanks
[03:36:15] *** Joins: XV8 (~XV8@2601:5cb:c001:50:7110:14fe:9923:a896)
[03:36:22] *** Joins: mumixam (~m@user/mumixam)
[03:36:22] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[03:36:24] *** Joins: el_kevino (~mote@2604:a880:400:d1::901:5001)
[03:36:33] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[03:36:34] <jfcaron> But a static member variable, not a function?
[03:36:38] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[03:36:39] *** Joins: Abdullah (~ak@user/abdullah)
[03:36:40] *** Joins: giusb (~giusb@user/giusb)
[03:36:43] *** Joins: capn (~capn@user/capn)
[03:36:52] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Client Quit)
[03:36:57] *** Joins: rookie101 (~rookie@165.232.121.13)
[03:36:58] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[03:36:58] *** Joins: r3m (~launch@user/r3m)
[03:37:00] *** Joins: explodes (~explodes@user/explodes)
[03:37:00] *** Joins: arza (arza@arza.us)
[03:37:01] *** Joins: emf (~emf@2620:10d:c091:480::1:305b)
[03:37:02] *** Joins: goutly (~gitly@85.255.233.150)
[03:37:12] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[03:37:13] *** Joins: cheater (~Username@user/cheater)
[03:37:14] *** Joins: parv (~quass@user/parv)
[03:37:14] <Yhg1s> jfcaron: there isn't really such a thing.
[03:37:21] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 250 seconds)
[03:37:35] <SnoopJ> jfcaron, I'm not really sure what that means since "static" in other languages refers to concepts Python doesn't really have
[03:37:45] <jfcaron> I have a histogram class
[03:37:51] <Yhg1s> jfcaron: there are class attributes, but they probably don't behave as you might expect.
[03:37:51] <jfcaron> There is a hardcoded limit to the number of bins.
[03:38:04] <jfcaron> I want that limit to be accessible to the user from the class somewhere.
[03:38:06] <Yhg1s> jfcaron: sounds like a job for a module global constant instead.
[03:38:12] <jfcaron> Like Histogram.maxbins
[03:38:19] *** Joins: ano (~ano@user/ano)
[03:38:21] <Yhg1s> jfcaron: or, if it depends on the class, a class attribute would work.
[03:38:24] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[03:38:31] *** Joins: neolem (~neolem@2001:470:69fc:105::c675)
[03:38:31] *** Joins: pschmitt[m] (~pschmitt@2001:470:69fc:105::1:24cb)
[03:38:32] *** Joins: zardian[m] (~zardi@2001:470:69fc:105::1:4444)
[03:38:41] <jfcaron> I guess if the user goes and changes it it's their fault.  We're all adults here.
[03:38:59] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[03:39:00] *** Joins: ebb (ebb@user/ebb)
[03:39:01] <Yhg1s> you didn't ask for a *const* one anyway :)
[03:39:14] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:39:14] <jfcaron> ^_^
[03:39:30] <jfcaron> I guess a @staticmethod @property with no setter could do it?
[03:39:37] <aphysically> am I missing something here? https://mypy-play.net/?mypy=latest&python=3.10&gist=f48ed9aee53a548d4dd25848300103b6
[03:39:51] <Yhg1s> jfcaron: no, properties only work on instances of the class.
[03:39:58] <aphysically> why is mypy working like this?
[03:40:21] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[03:40:36] *** Joins: bss (bss@rie.incorporeal.org)
[03:40:53] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[03:42:08] *** Joins: trashbird (~trashbird@user/trashbird)
[03:42:29] <SnoopJ> jfcaron, staticmethod and property together seems like an oxymoron, properties are explicitly about instance attributes
[03:43:15] *** Joins: FluffyMask (~masque@user/fluffymask)
[03:43:34] <SnoopJ> but you can use @property with no setter to limit your public API to read-only access (but note: determined users will still be able to mess around with non-public API, so it's not a guarantee of constness)
[03:43:39] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[03:44:04] <jfcaron> I think a @staticproperty might make sense.  It's a property that belongs to the class, not to the instances.
[03:44:14] <Yhg1s> jfcaron: again, that's not how properties work.
[03:44:21] <Yhg1s> jfcaron: it'd be a property of the *metaclass*.
[03:44:30] <jfcaron> Right
[03:44:41] <jfcaron> I ain't touching that.
[03:44:41] <Yhg1s> You can write your own descriptor for it, though. There's really very little benefit over just having the class attribute.
[03:44:56] <jfcaron> Yeah, as I said, if the users want to mess with it, it's on them.
[03:45:19] <jfcaron> Like I could hack the code in glibc to make INT_MAX something else and recompile.  That's on me.
[03:45:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:45:59] *** Joins: slisnake0 (~slisnake@82.102.25.12)
[03:46:13] <Yhg1s> or '#define const'  before you include anything.
[03:46:55] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:47:07] *** Quits: slisnake0 (~slisnake@82.102.25.12) (Client Quit)
[03:47:23] *** Joins: Wulf (~Wulf@user/wulf)
[03:47:26] *** Joins: slisnake (~slisnake@82.102.25.12)
[03:47:27] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:48:11] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[03:48:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:49:08] <SnoopJ> Yhg1s, I think I found my offending typecheck, but I have a follow-up question: would it be sloppy form to always clear the error indicator in a typecheck, or should I limit that to cases where an error might truly arise?
[03:49:30] *** Quits: grimvar (~grimvar@i5C75F64D.versanet.de) (Ping timeout: 260 seconds)
[03:49:33] *** Joins: maplefinger (~maplefing@user/lindis)
[03:49:41] <Yhg1s> Yes, you should only do it when the error might truly arise, or you would be masking other cases where you forgot to check for the error.
[03:49:55] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[03:50:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:50:04] <Yhg1s> Really, only call PyErr_Clear() if you get an error return from something, and you've checked that the error is one you should ignore.
[03:50:21] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[03:50:59] *** Joins: grimvar (~grimvar@i5C75F727.versanet.de)
[03:51:03] <Yhg1s> Let me put it differently... Blindly calling PyErr_Clear() is like 'except:' :P
[03:51:29] <SnoopJ> Well, I do mean just in a typecheck, where I'm checking "does the associated typemap apply to this object?"
[03:51:47] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[03:51:50] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:d067:40e0:52e9:b231)
[03:51:56] <SnoopJ> I can't think of any cases where I'd enter a typecheck with the indicator set, *except* when I screw this up :)
[03:53:04] <Yhg1s> Yes, that's pretty much my point. If you call PyErr_Clear() pre-emptively, you would be screwing things up somewhere else without noticing, and that would still be a problem for *other* code that called it (and then not called your code to clear it). Also, it might indicate that you're _incorrectly_ ignoring the exception in the earlier code. Silently doing the equivalent of 'except:' there.
[03:53:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[03:53:24] <SnoopJ> ah, cleaning up someone else's mess
[03:55:30] <SnoopJ> Yhg1s, sorry, point of clarification in case I wasn't clear about it: I am talking about clearing the indicator only at the *end* of a typecheck, when I've decided whether or not the typemap applies.
[03:55:34] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Ping timeout: 260 seconds)
[03:56:16] <SnoopJ> but I think your point about masking failures elsewhere might still be applicable
[03:56:41] *** Joins: infernix (~nix@155.137.21.90)
[03:57:14] <Yhg1s> No, that's not very likely (if you call any Python C API functions inbetween, anyway), but it does mean you might be masking errors in your own code. You might be forgetting to check for error returns, and thus ignoring the exception.
[03:57:27] <Yhg1s> So it's back to a regular except: ;P
[03:57:52] <SnoopJ> Yhg1s, well, any exception occurring in a typecheck is basically meaningless: it's just deciding if the associated typemap should apply
[03:58:43] <SnoopJ> ...unless the error is indicating some kind of fatal failure
[03:58:52] <SnoopJ> so, yea, overall, I should just do it right :)
[03:59:14] <Yhg1s> Or a KeyboardInterrupt, or a MemoryError, or a RecursionError, ...
[03:59:34] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[04:00:16] <Yhg1s> Python used to do what you describe in, for example, __cmp__ (because for stupid reasons it couldn't raise exceptions, and it was like "well, they're not equal then") -- but it's a bad idea because it will hide bugs :)
[04:03:37] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Quit: Client closed)
[04:03:43] *** Joins: JanC (~janc@user/janc)
[04:04:07] <SnoopJ> well, if the boffins behind the language didn't get it right, that's good reason to think I won't either ;P
[04:04:16] *** Joins: delvian (~delvian@41.13.224.79)
[04:04:22] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[04:04:22] *** Joins: bsdbandit01 (~bsdbandit@172.58.191.152)
[04:04:29] *** Quits: bsdbandit01 (~bsdbandit@172.58.191.152) (Read error: Connection reset by peer)
[04:04:30] *** Quits: tr4ck3ur (~tr4ck3ur@user/tr4ck3ur) (Quit: Leaving)
[04:04:54] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[04:05:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:07:05] <SnoopJ> thanks for the sanity check
[04:07:42] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:07:55] *** Joins: bloody (~bloody@user/bloody)
[04:08:07] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[04:08:48] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:10:22] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[04:10:44] *** Quits: hook (~hook@user/silver-hook/x-9987513) (Ping timeout: 268 seconds)
[04:14:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[04:14:19] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[04:14:31] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[04:15:05] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:15:07] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[04:16:02] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:16:02] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:18:43] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:19:15] *** Quits: a0z1 (~a0z1@185.209.196.149) (Ping timeout: 256 seconds)
[04:20:23] *** Quits: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:22:01] *** Joins: alex11 (~alex11@user/alex11)
[04:22:03] *** Joins: hook (~hook@user/silver-hook/x-9987513)
[04:22:37] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[04:22:39] *** Joins: BUSY (~BUSY@user/busy)
[04:22:45] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Killed (NickServ (GHOST command used by Seto_Kaiba)))
[04:22:47] *** Seto_Kaiba is now known as Hunterkll
[04:23:17] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[04:24:05] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:d067:40e0:52e9:b231) (Quit: Client closed)
[04:24:10] *** vinleod is now known as vdamewood
[04:25:18] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[04:26:26] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:26:54] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:27:13] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Read error: Connection reset by peer)
[04:27:24] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:27:29] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[04:28:02] <ouemt> I'm doing a dumb with pandas, but I'm not sure what. The calculation works for the first row, but is NaN for all following rows...
[04:28:04] <ouemt> https://bpa.st/SUNQ
[04:28:08] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:28:08] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:28:31] <ouemt> basically, I want to assign the bar column to the value bar if it doesn't exist, or add it to the value if it does
[04:29:36] <MacGyver> My guess is it throws a key error only once, because after that the column exists.
[04:29:47] <ouemt> yup, I did a dumb
[04:29:54] <ouemt> that makes perfect sense
[04:30:08] <ouemt> so I need to actually test for a value
[04:30:37] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Read error: Connection reset by peer)
[04:31:04] <MacGyver> Or initialize the entire column to 0.
[04:31:06] *** Quits: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com) (Quit: ThePhilgrim)
[04:31:12] <MacGyver> And just always use addition after that.
[04:32:07] <jaggz> how would I receive a network video stream, like this, with python? mplayer -title t00 -nostop-xscreensaver -fps 15 -vo xv -xy 1200 -vf rotate=1,screenshot -demuxer h264es ffmpeg://tcp://<rpi-ip>:5001
[04:32:09] <ouemt> that assignment can be done outside the inner loop
[04:32:20] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:32:28] <ouemt> I'm making a temp variable =0 just before the inner, then assigning after all inner loops iterations are complete
[04:32:34] *** Joins: ano (~ano@user/ano)
[04:32:48] <ouemt> Yep, that fixed it. Thanks, MacGyver
[04:33:00] <MacGyver> Yw.
[04:33:33] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[04:34:07] <jaggz> hmm.. maybe https://video.aminyazdanpanah.com/python/start?r=hls
[04:34:20] <jaggz> Python FFmpeg Video Streaming
[04:34:20] *** Quits: vladoski (~foo@2001:b07:add:d406:acb4:f8e0:2105:26) (Quit: Textual IRC Client: www.textualapp.com)
[04:34:57] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[04:35:09] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:35:33] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[04:37:34] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:38:55] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[04:39:16] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[04:39:39] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[04:40:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:40:33] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[04:40:45] *** pizzaiolo is now known as pizza
[04:42:26] *** Joins: buzzard (~quassel@185.206.225.245)
[04:42:42] *** Joins: Themis3000 (~Thunderbi@user/themis3000)
[04:43:29] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[04:44:22] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[04:44:53] *** Quits: junebug (~junebug@2600:1700:3db0:2540:56bb:cb52:830f:bd30) (Quit: Leaving)
[04:45:52] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[04:46:28] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:46:50] <ouemt> google is failing me here, I need to make one of these plots in python, preferably with the ability to place error bars on all three endmeber directions https://www.researchgate.net/profile/Jennifer-Kharrazi/publication/261171036/figure/fig2/AS:451547143380994@1484668636086/Ternary-diagram-showing-the-geochemical-characterization-of-four-main-lithostratigraphic.png
[04:48:09] <ouemt> I see plotly (no error bars, don't like the look and feel) and python-ternary (no error bars)
[04:48:14] <ouemt> anyone happen to know other options?
[04:48:29] <KirkMcDonald> ouemt: I expect matplotlib could do it.
[04:48:50] <ouemt> KirkMcDonald: they don't have a built in for it... I've been wondering about skewing an axis
[04:50:04] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:35a6:168c:e6c2:5587)
[04:50:14] <magic_ninja> https://octave.org/doc/v4.0.0/Plotting-the-Triangulation.html
[04:50:31] *** Joins: cap0ne (cap0ne@user/cap0ne)
[04:50:31] <magic_ninja> You could look at how octave does it
[04:50:49] *** Quits: binary011 (~binary01@174.141.153.217) (Ping timeout: 268 seconds)
[04:51:02] <KirkMcDonald> That doesn't look like the same thing.
[04:51:18] <magic_ninja> it may not be. I made an assumption
[04:51:44] <ouemt> yeah, they're strange plots
[04:51:45] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[04:51:53] <ouemt> you have three labeled axes, but only 2 degrees of freedom
[04:52:00] <ouemt> they're used in geochemistry a lot
[04:52:01] <magic_ninja> that almost looks like a 3d plot, my bad
[04:52:27] *** Joins: NyaaTheKitten (~CalculusC@user/calculuscat)
[04:52:46] <KirkMcDonald> ouemt: I've seen these plots before, but I don't know if they have a particular name.
[04:53:06] <ouemt> KirkMcDonald: we just call them "ternary diagrams"
[04:53:33] *** Parts: NyaaTheKitten (~CalculusC@user/calculuscat) ()
[04:54:01] <magic_ninja> https://github.com/marcharper/python-ternary
[04:54:21] <magic_ninja> if that's a flop too, I'm retiring my google-fu for the day
[04:54:24] <KirkMcDonald> Yeah, that's one of the first things to pop up when Googling "matplotlib ternary plot".
[04:54:50] <ouemt> it's the best I've found, but still no error bar capability I think
[04:55:19] *** Joins: jonthesnow (~xizhendu@36.112.188.169)
[04:55:32] <KirkMcDonald> I'm unclear on which part are the error bars; the dotted lines?
[04:56:04] <ouemt> they're not on the example
[04:56:09] <KirkMcDonald> Ah, I see.
[04:56:14] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:dcd9:d1f0:6169:7145)
[04:56:27] <ouemt> each point could have 3 +/- error bars orthogonal to one side of the enclosing triangle
[04:56:41] <ouemt> I keep threatening to work it out in matplotlib, and this might be the time I finally do it
[04:56:54] <KirkMcDonald> Well, you can usually convince matplotlib to do most anything. It's just not always simple.
[04:57:57] <ouemt> it's basically just a normal plot with the y-axis skewed 30 degrees off vertical
[04:58:01] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:58:05] <ouemt> except for the third set of error bars
[04:58:24] *** Joins: shawwwn (uid6132@2a03:5180:f:1::17f4)
[04:58:35] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:59:18] <SnoopJ> ouemt, that doesn't look like it'd be too bad to work out if you were working directly with matplotlib's Artist objects (using the object API), but transforming between those data coordinates and the plot coordinates might be a little head-scratchy
[04:59:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[04:59:31] <SnoopJ> (presumably you're already familiar with the underlying coordinate system, though)
[04:59:54] <ouemt> SnoopJ: you mean the data coordinates in the ternary space?
[04:59:57] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 240 seconds)
[04:59:57] <SnoopJ> yea
[05:00:09] <ouemt> yeah, it's literally just x, y-skewed-30
[05:00:11] <SnoopJ> I guess the criterion is A+B+C=1?
[05:00:14] <ouemt> yep
[05:00:25] <ouemt> which means that only 2 coords define the point
[05:01:13] <SnoopJ> probably I'd make the plot_me_a_that() take the three coords as arguments and allow the user to give just 2, but require sum to 1.0 if they give all 3
[05:01:29] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[05:01:47] *** Joins: Anom (~Anom@2804:d4b:8072:100:d8:3533:2815:ac95)
[05:02:09] <SnoopJ> I can't tell just from looking at it how the location/size of those lines are defined, but actually drawing a Line is pretty straightforward if you know what coordinates in figure-space to use
[05:02:56] <ouemt> SnoopJ: this is useful for that: https://en.wikipedia.org/wiki/Ternary_plot#/media/File:Blank_ternary_plot.svg
[05:02:57] <SnoopJ> (presumably python-ternary does some/all of this)
[05:03:33] *** Joins: Fiji (~Fiji@user/fiji)
[05:03:40] <SnoopJ> ouemt, sorry I should have been more clear: I mean the dotted lines that I assume are what you mean when you say error bars
[05:03:57] <SnoopJ> oh, no, that was covered already in scrollback
[05:04:02] *** Joins: frost (~frost@user/frost)
[05:04:13] <SnoopJ> I have no idea what those are then :P
[05:04:17] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[05:04:23] *** Joins: withere__ (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[05:04:28] <ouemt> random things
[05:04:44] <ouemt> the error bars would be 3 sets of +/- bars, one for each axis
[05:04:55] <ouemt> so base->apex direction x3
[05:05:11] <ouemt> as far as I can tell, no one's done it
[05:05:57] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[05:06:01] <ouemt> bah
[05:06:06] <ouemt> I need to just write it in mpl
[05:06:18] <ouemt> which I decidedly don't know how to do a priori
[05:07:04] <ouemt> hah, found an example
[05:07:06] <ouemt> https://www.researchgate.net/profile/Igor-Ogashawara/publication/320237184/figure/fig9/AS:614256412196905@1523461549958/Ternary-plot-representing-the-mean-relative-contribution-of-optically-active-substances.png
[05:07:12] <ouemt> hopefully my error bars are smaller
[05:07:46] *** Quits: sfields (~sfields@2605:a601:adea:7a00:b908:8b7:c380:7652) (Remote host closed the connection)
[05:08:26] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[05:08:38] *** Joins: martums (~martums@user/martums)
[05:08:52] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[05:08:54] *** Joins: theprophet (~theprophe@85.114.228.184)
[05:09:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:10:51] *** Joins: Vision (~Vision@023-084-134-149.res.spectrum.com)
[05:10:56] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[05:12:05] *** Quits: Socra (~Socra@206.217.216.27) (Read error: Connection reset by peer)
[05:12:42] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[05:14:52] *** Quits: iphone (~spiderman@user/spiderman) (Ping timeout: 268 seconds)
[05:15:29] *** Joins: iphone (~spiderman@user/spiderman)
[05:16:24] *** Quits: nomic (~nomic@85.203.46.65) (Quit: Leaving)
[05:16:40] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:16:42] <SnoopJ> ouemt, it looks like matplotlib does errorbars as a collection of Line2D objects (i.e. the central line and the endcaps are separate) so you *might* be able to fudge it by drawing conventional horizontal/vertical errorbars and then changing the `transform` property on the Line2D instances.
[05:16:45] *** Joins: nomic (~nomic@85.203.46.65)
[05:17:15] <ouemt> SnoopJ: that'll get me 2 of the 3 axes, the 3rd will have to be manual I'm afraid
[05:18:06] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[05:18:32] <SnoopJ> ouemt, for a first crack at it I'd probably ignore endcaps and just focus on drawing the central Line2D, and do it working out the coordinates for all of them
[05:18:49] <SnoopJ> but I think I probably don't fully understand the task
[05:18:52] *** Quits: XV8 (~XV8@2601:5cb:c001:50:7110:14fe:9923:a896) (Quit: Textual IRC Client: www.textualapp.com)
[05:19:05] <ouemt> so I found an old wxTernary project that hasn't been touched in 9 years, I'm trolling through the code to see what they did
[05:19:06] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 260 seconds)
[05:19:16] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:20:58] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[05:21:19] *** Joins: sfields (~sfields@2605:a601:adea:7a00:2b70:ef9e:5d20:bc77)
[05:22:15] *** Joins: jazzy (~jaziz@user/jaziz)
[05:22:39] <ouemt> oof
[05:22:55] *** Joins: arinov (~arinov@213.194.126.155)
[05:24:56] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[05:25:08] *** Joins: beencubed (~beencubed@209.131.238.248)
[05:25:23] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[05:26:27] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[05:27:45] *** Quits: beencubed (~beencubed@209.131.238.248) (Client Quit)
[05:28:00] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:28:42] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[05:30:46] *** Quits: flokuehn (~flokuehn@87.123.247.56) (Ping timeout: 260 seconds)
[05:31:13] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[05:31:17] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[05:31:22] *** Joins: beencubed (~beencubed@209.131.238.248)
[05:31:47] *** Quits: buzzard (~quassel@185.206.225.245) (Ping timeout: 256 seconds)
[05:32:17] *** Joins: flokuehn (~flokuehn@87.123.247.77)
[05:32:57] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[05:33:01] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Read error: Connection reset by peer)
[05:33:55] *** Quits: withere__ (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[05:35:45] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 256 seconds)
[05:35:47] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[05:36:23] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:36:48] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:36:53] *** Quits: nomic (~nomic@85.203.46.65) (Ping timeout: 256 seconds)
[05:37:12] *** Joins: c10l (~c10l@user/c10l)
[05:38:47] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[05:40:21] *** Quits: jazzy2 (~jaziz@user/jaziz) (Read error: Connection reset by peer)
[05:40:45] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:42:55] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[05:43:39] *** Joins: Anom5 (~Anom@2804:d4b:8072:100:d8:3533:2815:ac95)
[05:43:52] *** Quits: Anom5 (~Anom@2804:d4b:8072:100:d8:3533:2815:ac95) (Client Quit)
[05:44:18] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[05:45:48] *** Joins: jazzy3 (~jaziz@user/jaziz)
[05:46:13] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[05:46:39] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[05:46:50] <MrMobius> to remove items from a list as you iterate over it, is there a quicker/smarter way than adding the items you want to keep to a new list as you loop?
[05:47:43] <Togra> I usually go backwards along the list instead of forwards
[05:48:28] *** Joins: lastshell (~lastshell@user/lastshell)
[05:49:17] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 240 seconds)
[05:50:12] <nicode> MrMobius: you can just delete the element you don't want anymore (e.g. del myList[0])
[05:51:28] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[05:52:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[05:52:53] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Quit: Leaving)
[05:54:47] <MrMobius> nicode, can i do that to the list while im iterating over it?
[05:54:54] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Client Quit)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:56:11] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[05:57:44] <nicode> MrMobius: I guess it depends on the type of iteration you're doing. I'll try it out.
[05:57:51] *** Joins: nomic (~nomic@51.52.78.152)
[05:58:03] *** Joins: audiobirb (~audio@user/audio)
[05:58:44] *** Joins: lantech19446 (~lantech19@144.202.10.138)
[06:00:45] <MrMobius> nicode, oh looks like you can
[06:00:45] <Togra> I've found you can very easily run into an out of range error
[06:00:55] <Togra> but if you're real conscientious about what you're doing you can probly do it
[06:01:08] <grym> MrMobius: a list comprehension
[06:01:20] <Togra> I've gone with iterating backwards over lists where I do that and it works great, much simpler
[06:01:43] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[06:02:21] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:35a6:168c:e6c2:5587) (Read error: Connection reset by peer)
[06:02:21] <nedbat> MrMobius: you tried `del my_list[0]` and it worked in your loop?
[06:02:43] <MrMobius> nedbat, ya. i didnt think that worked since ive gotten errors trying to modify a loop while iterating over it before
[06:02:52] <Togra> making a new list with just the ones you want to keep is another really good way to avoid getting errors
[06:02:58] *** Quits: ubert (~Thunderbi@p200300ecdf1abb06cc2914e8ae945344.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:03:10] <nedbat> MrMobius: i would think it would make your loop miss elements in the list. do you mind sharing the code?
[06:03:21] <Togra> yeah I swear I've gotten bamboozled by doing that before
[06:03:28] *** Joins: ubert (~Thunderbi@p200300ecdf1abb03cc2914e8ae945344.dip0.t-ipconnect.de)
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:03:37] <nedbat> MrMobius: you might not get an exception, but your code might have bugs
[06:03:49] *** Quits: OCode (~OAcode@user/Ocode) (Ping timeout: 250 seconds)
[06:03:53] <parv> Run time error happens when trying to modify a view; eg looping over dict.keys() instead of list( dict.keys() )
[06:04:33] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[06:04:40] *** Joins: OCode (~OCode@user/Ocode)
[06:04:52] *** Quits: joshisanonymous (~joshisano@155-186-193-040.res.spectrum.com) (Quit: Leaving)
[06:05:11] <nicode> MrMobius: I'm getting odd behaviour when I delete elements during iteration
[06:05:21] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[06:06:10] <MrMobius> nicode, nedbat, ya the index will refer to the elements in the array after it's modified
[06:06:40] <nedbat> MrMobius: you should really double-check that the code works. deleting an element while looping will cause problems.
[06:06:50] <nedbat> MrMobius: if you link us to the code, we can see what you are doing.
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:08:37] <MrMobius> https://www.toptal.com/developers/hastebin/apuranagew.apache
[06:09:07] <nicode> MrMobius: a while len(list) > 0 loop works decently
[06:09:29] *** Parts: sjk (~sjk@user/sjk) ()
[06:09:50] <nicode> you can just keep accessing list[0] and then deleting list[0] when you're done w/ it
[06:09:53] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 250 seconds)
[06:10:09] *** Joins: brabrax (~brabrax@user/brabrax)
[06:10:16] <parv> Ha! Even though del dict[ key ] raises RunTimeError, the action succeeds in deletion of the key-value: https://termbin.com/bzp8
[06:11:27] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 256 seconds)
[06:13:41] *** Quits: AlanMD_ (~AlanMD@86.121.179.183) (Remote host closed the connection)
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:14:26] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[06:14:32] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[06:14:36] <nedbat> MrMobius: is 1 3 5 the output you want? why didn't line 3 print the 2 element?
[06:15:00] <nedbat> MrMobius: why are you deleting elements in the first place?
[06:15:18] *** Joins: Enitin (~Enitin@82.102.22.85)
[06:15:23] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Quit: Client closed)
[06:15:44] <nedbat> MrMobius: if your goal is to remove odd elements, try that code with this list:  [1, 2, 2, 3, 3, 4, 4, 5]
[06:15:48] *** Joins: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514)
[06:16:32] <nedbat> nicode: why not just:  for element in the_list:
[06:16:56] <nicode> nedbat, I had odd behaviour w/ that but while loop works
[06:17:00] <nicode> https://termbin.com/bk5e
[06:17:07] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[06:17:15] <nedbat> nicode: the for loop works fine, just don't delete elements.  Why delete them?
[06:17:21] <MrMobius> nedbat, its not the output i want but it shows how it works. it looks like it starts with element 0 and deletes it then when the loop goes to element 1, that is now 3 since the list is [2,3,4,5]
[06:17:34] <nicode> nedbat: dunno, MrMobius put up the challenge I wanted to see how I'd do it.
[06:17:39] <nedbat> MrMobius: right, that's what i meant about skipping elements.
[06:17:47] <nedbat> MrMobius: do you have a real use for this kind of looping?
[06:17:51] *** Joins: reset (~reset@user/reset)
[06:17:55] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 250 seconds)
[06:18:30] <MrMobius> nedbat, the odd elements are just an example. i have a lot of patterns in a list and looping over another list trying to find places where the patterns match. the patterns are themselves lists of lists so you get a huge number of iterations
[06:18:53] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:19:06] <MrMobius> it should reduce the run time if i can remove some of the patterns once its clear they will never match
[06:19:21] <nedbat> MrMobius: make a new list with the ones you want to keep
[06:19:36] <nedbat> MrMobius: if you delete while you are looping, you will skip patterns
[06:19:42] <MrMobius> nedbat, yes that was my original suggestion if you scroll up. im asking if there's a smarter way
[06:19:55] <nedbat> MrMobius: you had the right idea. making a new list is the best wya
[06:19:57] <nedbat> way
[06:20:01] <nicode> hah
[06:21:29] <nedbat> nicode: hah?
[06:23:43] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[06:23:58] <nicode> oh, nothing, it was just funny to me that it came back 'round
[06:25:10] *** Joins: Fiji_ (~Fiji@user/fiji)
[06:25:29] <aphysically> nedbat: did you pull out a path-finding algorithm for last night?
[06:25:36] *** Joins: qpdb (~qpdb@user/qpdb)
[06:26:00] <nedbat> aphysically: i started with one, then did my own thing that didn't work, then came back to a canned algorithm
[06:26:09] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 250 seconds)
[06:26:45] *** Quits: Abdullah (~ak@user/abdullah) (Ping timeout: 256 seconds)
[06:26:56] <aphysically> I noticed that A* does worse with a heuristic, so Dijkstra is actually better
[06:27:11] <aphysically> the better the heuristic the worse it does, so there must be something pathological about random graph weights that makes A* bad
[06:27:28] <Anom> What is going on here? Can someone help me? Please. https://rebrand.ly/a0fefc
[06:27:42] <aphysically> (if you did A* try setting h=0 and timing it)
[06:28:01] <aphysically> random edge weights that is
[06:28:32] *** Joins: thiras_ (~thiras@user/thiras)
[06:28:33] <nicode> how would I figure out how expensive a call to os.get_terminal_size()  is?
[06:28:37] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[06:28:41] *** Joins: giddyup (~rc2dev@186.214.53.132)
[06:30:06] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 268 seconds)
[06:30:21] <nicode> I'm wondering whether it's even worth watching for RESIZE (CLI program) or if instead I should just use height/width directly from os.get_terminal_size()
[06:31:35] *** Joins: anchovy (~anchovy@101.191.178.3)
[06:31:36] <nedbat> aphysically: i used a*, and it was fast enough, 3s
[06:32:02] <nedbat> nicode: write the code the simple way, and see if it's too slow
[06:32:34] <anchovy> is there a way to specify that an argument for a function you're calling should take its default value? or do I need to switch to named arguments if I want to skip? (function definition provides for defaults)
[06:32:38] <nedbat> Anom: why do you have all those backslashes? Did you make that string?
[06:32:38] <SnoopJ> "Make things work. Profile. Make things fast. In this order."
[06:32:56] <nedbat> anchovy: can't you just omit the argument?
[06:33:40] <anchovy> nedbat: I need to supply an argument after it.
[06:33:44] <Anom> nedbat yes, i make, i resolve the error with r"", thank you
[06:33:57] <nedbat> anchovy: sounds like you should use named arguments I guess
[06:34:22] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[06:36:03] <anchovy> nedbat: yeah. looks like it. translating from vimscript to python so wanted to keep things as similar as possible until I can verify that the python works exactly* like the vimscript did. then I can diverge completely.
[06:36:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:39:17] *** Joins: millido (~millido@84.210.150.128)
[06:39:50] *** Joins: luva (~luva@37.120.197.45)
[06:40:37] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 240 seconds)
[06:40:49] *** Joins: Abdullah (~ak@user/abdullah)
[06:41:29] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[06:42:59] *** Joins: adeliktas51 (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[06:43:34] *** Joins: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net)
[06:45:50] *** Quits: Anom (~Anom@2804:d4b:8072:100:d8:3533:2815:ac95) (Quit: Client closed)
[06:46:29] *** Quits: adeliktas (~adeliktas@2001:16b8:2233:c000:a539:abb5:567f:4514) (Ping timeout: 256 seconds)
[06:47:55] *** Quits: cap0ne (cap0ne@user/cap0ne) (Ping timeout: 250 seconds)
[06:48:24] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[06:48:59] <audiobirb> nedbat, hey
[06:49:06] <audiobirb> what does some_list[:1] mean?
[06:50:06] <audiobirb> ok, nvm i found out and it's what i thought
[06:50:08] <SnoopJ> "give me all the elements of some_list from the start to element 1" which is the same as "give me element 0"
[06:50:17] <audiobirb> why would someone do [:1] over [0] ?
[06:50:17] <SnoopJ> uh, "give me a list containing only element 0" rather
[06:50:18] <audiobirb> SnoopJ,
[06:50:21] <audiobirb> that pisses me off
[06:50:25] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[06:50:33] *** Parts: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Leaving)
[06:50:37] <audiobirb> [:1] just confuses people
[06:50:43] <SnoopJ> audiobirb, some_list[0] produces the element, some_list[:1] produces [some_list[0]]
[06:51:06] <audiobirb> oh
[06:51:19] <SnoopJ> I'd probably still prefer the latter, myself, but it's technically doing less work to slice it that way
[06:53:09] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[06:53:10] <SamuelMarks> hi
[06:53:49] <maplefinger> us weather warning map https://twitter.com/splillo/status/1471126320553676802
[06:55:45] *** Quits: phonemic (~phonemic@104-60-219-66.lightspeed.nsvltn.sbcglobal.net) (Quit: WeeChat 3.3)
[06:55:52] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:58:06] <NoImNotNineVolt> so, i just stumbled across https://github.com/sniklaus/3d-ken-burns
[06:58:19] <NoImNotNineVolt> and i thought it was pretty awesome, figured i'd share.
[06:58:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:58:44] <NoImNotNineVolt> i had no idea that monocular depth estimation had gotten so good.
[07:01:05] <SnoopJ> NoImNotNineVolt, relatively old paper by the standards of CV, too
[07:02:27] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[07:03:02] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[07:03:29] *** Quits: greknod282 (~grek@120.88.171.98) (Ping timeout: 252 seconds)
[07:03:38] *** abc_- is now known as zwindl
[07:04:21] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[07:05:05] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[07:05:54] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[07:07:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[07:08:18] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[07:09:23] <SamuelMarks> Apart from LibCST or RedBaron, is there any parsing library that doesn't touch comments? - I've been using `import ast` but that is omitting my comments :(
[07:09:34] * SamuelMarks would prefer to keep to stdlib
[07:10:14] *** Joins: Enitin (~Enitin@82.102.22.86)
[07:10:23] <SamuelMarks> I guess I could write a custom parser and when things start with a keyword and are indented parse it with ast? - Mmm but that still would omit the comments within the body of a class/function… right?
[07:10:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:12:39] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[07:13:31] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:14:25] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[07:14:47] <theprophet> can somebody help me with django please?
[07:15:23] <SnoopJ> SamuelMarks, the tokenize module can show you what's a comment on a given line, but I don't know what it would mean for the comments themselves to be in the AST: you will never emit code for them, why are they there?
[07:15:32] <theprophet> i am getting this error
[07:15:34] <theprophet> IntegrityError at /yoururl
[07:15:34] <theprophet> duplicate key value violates unique constraint "main_short_url_short_url_1c6e5ece_uniq"
[07:15:35] <theprophet> DETAIL:  Key (short_url)=() already exists.
[07:15:54] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[07:16:53] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[07:17:02] *** nbin_ is now known as nbin
[07:18:13] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[07:18:35] *** Joins: sonny (~sonny@8.6.144.252)
[07:19:43] *** adeliktas51 is now known as adeliktas
[07:20:00] *** Parts: sonny (~sonny@8.6.144.252) ()
[07:20:38] <SamuelMarks> SnoopJ: I want to emit them
[07:21:01] <SnoopJ> SamuelMarks, emit what? A comment is by definition not semantically part of the program, they do not produce executable code.
[07:21:23] *** Joins: jamea (~jamea@177.239.81.39)
[07:22:20] <jamea> python --version
[07:22:20] <jamea> Python 2.7.13
[07:22:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[07:22:31] <SnoopJ> It sounds like you want the concrete parse tree but I don't think there's a way to get directly there.
[07:22:34] <jamea> sudo pip install pyodbc
[07:22:37] <SamuelMarks> SnoopJ - My library can be used to automatically add type annotations to every function argument, class attribute/property, and assignment in any body (e.g., global or function scope). - I don't want to apply it to a large codebase and remove all their comments in the process
[07:22:39] <jamea> -bash: pip: command not found
[07:22:42] <jamea> how to solve?
[07:22:50] <SnoopJ> SamuelMarks, then you don't want an abstract tree because it's, um, abstract.
[07:22:55] <SamuelMarks> jamea: `python -m pip`
[07:23:06] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[07:23:23] <jamea> '/usr/bin/python: No module named pip'
[07:23:24] <SamuelMarks> SnoopJ - Sure but is there an intermediate linked structure that can convert between the two?
[07:23:36] <SamuelMarks> jamea: easypip to install it then
[07:24:04] <jamea> sudo easy_install pip ?
[07:24:11] <SamuelMarks> jamea - https://pip.pypa.io/en/stable/installation/#get-pip-py
[07:24:16] <jamea> sudo: easy_install: command not found
[07:24:30] *** Parts: evidlo (~evidlo@2001:470:69fc:105::7fc) ()
[07:24:46] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[07:25:34] <SamuelMarks> SnoopJ - So I want to go from a bigger tree—CST or FST or whatever the terminology is—to an AST and then do some sort of merge operation to go back to the CST/FST before finally emitting the new replacement file
[07:25:36] <evidlo> jamea: which distro?
[07:25:42] <jamea> debian
[07:25:51] <SamuelMarks> jamea: `apt-get install python-pip`?
[07:26:06] <jamea> E: Unable to locate package python-pip
[07:26:23] *** Quits: de-facto (~de-facto@user/de-facto) (Quit: See you around. 💤)
[07:26:37] *** Quits: Abdullah (~ak@user/abdullah) (Ping timeout: 240 seconds)
[07:26:57] <SnoopJ> SamuelMarks, if you are editing concrete syntax, I don't see why you'd go away from the concrete tree. It's not an invertible transformation in general.
[07:27:01] <SamuelMarks> jamea: Hmm so there's https://packages.debian.org/bullseye/python3-pip
[07:27:03] *** Joins: de-facto (~de-facto@user/de-facto)
[07:27:13] <SamuelMarks> Maybe they removed their python 2 version?
[07:27:13] <evidlo> jamea: try python-pip-whl
[07:27:21] <evidlo> also, are you sure you want to use python2?
[07:27:43] <jamea> python2?
[07:27:52] <jamea> i want python3
[07:28:02] <SamuelMarks> SnoopJ - Darn maybe I'll need to do the rewrite
[07:28:03] <evidlo> yes, so install python3-pip
[07:28:06] <SnoopJ> hmm, even tokenize won't give you exactly the same source, as I consider it. `print   ("hello world")` and `print("hello world!")` produce the same stream of tokens
[07:28:09] <SamuelMarks> jamea: `python3 -m pip` then
[07:28:25] <jamea> '/usr/bin/python3: No module named pip
[07:28:33] <SamuelMarks> SnoopJ - Darn. Because I need to be really whitespace aware
[07:28:39] <SamuelMarks> jamea: `apt-get install python3-pip`
[07:28:41] <SnoopJ> jamea, the package is called python3-pip
[07:29:15] <jamea> E: Unable to locate package python3-pip
[07:29:22] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:29:29] <SnoopJ> jamea, what version of Ubuntu/Debian is this?
[07:29:31] <jamea> python3 --version
[07:29:31] <SamuelMarks> SnoopJ - If I'm editing tens of thousands of lines of code I don't want to multiple those numbers by extraneous whitespace changes
[07:29:35] <jamea> Python 3.5.3
[07:29:42] <SamuelMarks> jamea: that's pretty old
[07:29:43] <SnoopJ> SamuelMarks, then you extra-extra-extra do not want an abstract tree.
[07:29:49] *** Joins: hams (~hams@user/hams)
[07:29:50] <SamuelMarks> :(
[07:30:04] <jamea> Debian GNU/Linux 9
[07:30:22] <SamuelMarks> But my whole library is built around the Python ast and inspect libraries - https://github.com/SamuelMarks/cdd-python
[07:30:28] <SamuelMarks> SnoopJ =(
[07:30:49] <SnoopJ> then it is built to do a job other than the one you are describing, I think?
[07:30:49] <evidlo> have you run 'apt update' recently?
[07:30:55] *** Joins: ericlee (~ericlee@2600:1700:5450:41e0::30)
[07:31:18] <SamuelMarks> SnoopJ - Yeah the automatic type annotation was an afterthought, it wasn't the plan of this project of mine
[07:31:32] <evidlo> installing python3-pip should definitely work.  there's something wrong
[07:31:42] <jamea> ok
[07:31:44] <jamea> first
[07:31:48] <SamuelMarks> But it's grown to be a pretty large LoC project so would hate to do a hardcore rewrite before the 0.1.0 release
[07:31:52] <jamea> how to uninstall all python and reinstall?
[07:32:25] <SamuelMarks> jamea: What mirror apt are you using? - Maybe something is missing
[07:32:25] <SnoopJ> SamuelMarks, perhaps you can adjust your goals to fit the code you have written, then.
[07:33:29] <SamuelMarks> SnoopJ - Maybe I'll have to =( … Just posted on stackoverflow and comp.lang.python in case someone has a better idea. I still think it would be possible with only small edits to get it working with an FST/CST but not sure how (yet)
[07:33:42] <jamea> https://paste.debian.net/1223663/
[07:33:49] <jamea> SamuelMarks: https://paste.debian.net/1223663/
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:43] <SnoopJ> you're using buster mirrors on stretch?
[07:37:05] <SnoopJ> *only* buster mirrors, I mean
[07:37:25] <SamuelMarks> jamea - Found it in https://ftp.debian.org/debian/dists/buster/main/Contents-amd64.gz (should be other arches also)
[07:37:30] <SnoopJ> both of them should have python3-pip though
[07:37:51] <SamuelMarks> This one https://packages.debian.org/buster/python3-pip
[07:38:34] <jamea> downloaded https://ftp.debian.org/debian/dists/buster/main/Contents-amd64.gz
[07:39:49] *** Joins: jeho2 (~jehoshaph@user/jehoshaphat)
[07:40:40] <SamuelMarks> jamea - No as in you want to clear all your apt caches then try again. Maybe join #debian for more specific troubleshooting like a replacement mirror list
[07:41:18] <jamea> ok
[07:41:33] <SnoopJ> yea #debian can definitely help with this if python3-pip isn't available for some reason (which sounds like it's the case)
[07:41:51] <jamea> stetch mirrors right?
[07:42:09] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Remote host closed the connection)
[07:42:11] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 250 seconds)
[07:42:33] <SnoopJ> but when you do get it working, don't `sudo pip` or you're likely to damage your system python. Use `pip install --user` (the default behavior if you can't write the system site) or a virtual environment.
[07:43:04] <jamea> :) pip command not found
[07:43:16] <SnoopJ> "when you do get it working"
[07:43:19] <jamea> oo
[07:43:37] <SamuelMarks> SnoopJ - If you think of something here's https://mail.python.org/pipermail/python-list/2021-December/904675.html
[07:43:41] <SamuelMarks> Thanks
[07:43:42] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Quit: leaving)
[07:44:55] <evidlo> new versions of debian dont need --user anymore
[07:45:34] <SnoopJ> right, you usually don't need to say --user because it'll do that by default. not sure exactly which debian version has a recent enough pip for that
[07:47:17] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:48:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:49:19] *** Joins: skraito (~skraito@user/skraito)
[07:49:19] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:49:23] *** Parts: skraito (~skraito@user/skraito) ()
[07:49:29] *** Joins: skraito (~skraito@user/skraito)
[07:49:31] <skraito> hi guys
[07:49:35] *** Quits: skraito (~skraito@user/skraito) (K-Lined)
[07:50:06] <rustyshackleford> maybe its just me
[07:50:21] <rustyshackleford> and being used to a more functional style with javascript
[07:50:23] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[07:50:32] <rustyshackleford> man... you can write some really ugly python code
[07:51:49] *** Joins: newpy (~newpy@pool-74-101-15-126.nycmny.fios.verizon.net)
[07:53:27] <SnoopJ> rustyshackleford, I have yet to meet a language that prevents writing ugly code
[07:53:51] <rustyshackleford> In javascript I do a lot of chaining of like, filter, map, reduce, etc
[07:54:05] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[07:54:10] <rustyshackleford> I find that I need to create a lot of temporary variables in python
[07:54:22] <SnoopJ> all three of those exist in Python, though?
[07:54:38] <rustyshackleford> also, who thought it was a good idea to name a class datetime.datetime?
[07:55:02] <SnoopJ> Although there's a lot less method chaining for sure
[07:55:09] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[07:55:29] <rustyshackleford> I guess you're referring to lambdas?
[07:55:30] *** jeho2 is now known as jeho
[07:55:36] <SnoopJ> no, not really
[07:55:40] <rustyshackleford> I'm admittedly rusty with python (or not that good in the first place)
[07:55:52] <SnoopJ> I mean that map() and filter() are builtins, and reduce() is in the functools library
[07:56:24] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:879e:f4d5:1d02:d6bf:1413)
[07:56:25] <aphysically> yeah, they don't work by method chaining
[07:56:28] <SnoopJ> In Python you'd normally write a lambda where you'd write an arrow function
[07:56:35] *** Joins: minip (~minip@user/minip)
[07:57:04] <SnoopJ> but you're just kind of stuck writing a named function if your function is complicated (Python is a lot less permissive about anonymous functions)
[07:57:22] <rustyshackleford> I don't think I like it much
[07:57:29] <SnoopJ> aphysically, it encourages an even-more-functional approach because you have to put the functions first ;)
[07:57:47] <rustyshackleford> but I needed a more "real" language than bash for this task
[07:57:48] <aphysically> it definitely encourages using comprehensions instead
[07:57:52] <SnoopJ> rustyshackleford, well, it's not very nice. Comprehensions are almost always superior.
[07:58:22] <rustyshackleford> I *might* rewrite this to use node instead
[07:58:51] <SnoopJ> Although reduce() isn't something you can spell very well with a comprehension
[07:59:11] <rustyshackleford> okay, now I've gotta download 3 TB of node_modules
[07:59:23] <SnoopJ> rustyshackleford, do you have a Python question we can help you with?
[07:59:43] <aphysically> yes reduce you need
[07:59:48] <rustyshackleford> eh I'm rambling. sorry
[08:00:03] <rustyshackleford> SnoopJ: venting now that I got my script working :)
[08:00:06] <aphysically> sometimes I find map is better than a comprehension iff it can serve all my uses with an already existing function
[08:00:29] <aphysically> like I just need to convert everything to an int
[08:00:32] <aphysically> but that's probably subjective too
[08:01:10] <SnoopJ> I would still prefer `[int(val) for val in it]` because the result of the operation is something I just read off, but, yea, this is an aesthetic preference
[08:01:27] *** Joins: hemstock (~hemstock@194.59.250.234)
[08:02:23] <rustyshackleford> what's the deal with all of the different string types?
[08:02:32] <aphysically> uh?
[08:02:36] <rustyshackleford> f strings, r strings, regular strings?
[08:02:54] <SnoopJ> those are all different literal syntax for the same type
[08:03:57] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[08:04:26] <SnoopJ> f-strings are for when you want to f"interpolate a {value}", the r prefix is for (e.g.) when you want r"\t" to be two characters long instead of one. r"..." is often useful for regex so you don't have to \\ everywhere
[08:04:33] <SnoopJ> but both produce instances of str()
[08:09:08] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[08:15:47] *** Quits: Clackulator (~Clackulat@75.75.210.194) (Ping timeout: 250 seconds)
[08:18:06] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (Quit: Leaving)
[08:19:53] *** Quits: sreve (~quassel@p4ff44d3f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:20:04] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[08:20:36] *** Joins: sreve (~quassel@p4ff44859.dip0.t-ipconnect.de)
[08:25:21] *** Joins: maryo87 (~Maryo@user/maryo)
[08:31:30] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[08:31:37] *** Quits: parv (~quass@user/parv) (Quit: parv)
[08:32:50] *** Quits: EgonX_ (~EgonX@2601:2c6:47f:879e:f4d5:1d02:d6bf:1413) (Quit: Textual IRC Client: www.textualapp.com)
[08:35:04] <lantech19446> is there no such thing as a constant in python?
[08:36:08] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[08:37:53] <InPhase> lantech19446: Many objects are immutables.  Variables can always be reassigned though.
[08:37:58] <SnoopJ> lantech19446, there are immutable types, but if you're used to the way variables work in other languages (like C) you might get the wrong idea about how names work.
[08:38:24] <SnoopJ> https://bit.ly/pynames1 does a lot to clear that up
[08:38:48] <lantech19446> my only frame of reference is javascript where they have variables and constants a variable can be reassigned a constant never changes
[08:38:50] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 260 seconds)
[08:40:56] *** Joins: et_ (~et@user/et)
[08:41:37] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[08:41:37] *** et_ is now known as et
[08:44:10] <deniska> lantech19446: we just type some names in CAPS and pretend they're constants. If someone changes it, it's on them
[08:45:46] <jamea> https://paste.debian.net/1223669/
[08:45:59] <jamea> sorry
[08:48:14] *** Quits: newpy (~newpy@pool-74-101-15-126.nycmny.fios.verizon.net) (Quit: Leaving)
[08:49:13] <SnoopJ> lantech19446, assignment is basically associating a string in the local scope with an object. Some objects can be mutated, but assignment will never mutate anything, it moves names around.
[08:49:28] <SnoopJ> well, except for mutating the scope where the name is being changed :)
[08:52:56] *** Quits: jamea (~jamea@177.239.81.39) (Ping timeout: 252 seconds)
[08:53:32] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:54:00] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Read error: Connection reset by peer)
[08:54:24] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:55:34] *** Joins: Armen (~Armen@armen138.com)
[08:56:32] *** Quits: tkazi (~tkazi@user/tkazi) (Quit: Disconnected)
[08:56:43] *** Quits: pkapp (~pkapp@c-75-74-40-214.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[08:57:20] *** Quits: hams (~hams@user/hams) (Ping timeout: 252 seconds)
[08:57:22] *** Joins: tkazi (~tkazi@user/tkazi)
[08:58:26] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[08:58:45] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[08:59:50] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[09:00:11] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Ping timeout: 250 seconds)
[09:00:18] *** Quits: kantlivelong (~kantlivel@octoprint/kantlivelong) (Ping timeout: 260 seconds)
[09:00:25] *** Joins: kantlivelong (~kantlivel@octoprint/kantlivelong)
[09:00:39] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[09:00:46] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[09:01:35] *** Quits: CombatVet (~c4@user/combatvet) (Remote host closed the connection)
[09:01:53] *** Joins: CombatVet (~c4@user/combatvet)
[09:01:54] *** Joins: fling (~fling@user/fling)
[09:03:13] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Ping timeout: 250 seconds)
[09:05:30] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[09:06:22] *** Joins: KvL (~KvL@130.95.254.207)
[09:06:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:11:43] *** Quits: giddyup (~rc2dev@186.214.53.132) (Quit: Leaving)
[09:12:47] *** Quits: inomoz (~inomoz@85.26.165.145) (Ping timeout: 256 seconds)
[09:14:23] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Ping timeout: 256 seconds)
[09:16:23] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[09:17:04] <jinsun__> aphysically: hmm, strange behavior with that typevar thing, can't explain, like the type narrowing is not working on the LHS of the assignment, it narrows only on the RHS
[09:17:21] *** jinsun__ is now known as jinsun
[09:19:45] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[09:25:06] <jinsun> mypy does double pass on the code with typevar, one for each bound, so maybe that could explain it for mypy, then that if condition would confuse it entirely when it is doing the M[B] pass
[09:26:41] *** Joins: junebug (~junebug@2600:1700:3db0:2540:63ac:d802:81f5:de56)
[09:31:45] *** Joins: grooverman_ (~grooverma@177.102.119.40)
[09:32:11] *** Joins: stranac (~stranac@195.29.239.126)
[09:35:05] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 250 seconds)
[09:39:17] <aphysically> jinsun: I made a discussion about it on pyright and eric answered
[09:39:17] *** Quits: KvL (~KvL@130.95.254.207) (Ping timeout: 240 seconds)
[09:39:24] <aphysically> idk if i"m entirely convinced, but at least I know what's happening
[09:39:41] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[09:40:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:41:49] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[09:42:00] *** Joins: KvL (~KvL@130.95.254.207)
[09:43:13] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:43:35] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[09:43:42] *** Joins: shantanoo (~shantanoo@user/shantanoo)
[09:45:18] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:46:04] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:46:49] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:46:49] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Ping timeout: 268 seconds)
[09:47:18] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:47:31] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:47:37] *** Joins: gshumway (~gshumway@user/gshumway)
[09:47:53] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[09:47:58] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Max SendQ exceeded)
[09:48:10] <jinsun> aphysically: had a look and I am not convinced by func3 point either, the ininstance one kinda makes sense because it is not narrowing to a single type
[09:48:26] *** Joins: the_lanetly_052_ (~the_lanet@194.135.154.32)
[09:49:47] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[09:49:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[09:50:31] <jinsun> aphysically: hmm, https://mypy-play.net/?mypy=latest&python=3.10&gist=4c5e3f0ac0c1c3ec4b9a9cad2e9bd4bf
[09:51:03] *** Quits: junebug (~junebug@2600:1700:3db0:2540:63ac:d802:81f5:de56) (Quit: Leaving)
[09:51:29] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[09:51:54] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:51:56] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[09:52:26] *** Quits: aniketgm (~Aniket@49.36.109.33) (Client Quit)
[09:52:57] <jinsun>  can't see how allowing lines 13-15 is fine but line 16 can't be allowed
[09:53:07] *** Joins: aniketgm (~Aniket@49.36.109.33)
[09:54:05] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[09:54:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[09:56:14] *** Quits: shantanoo (~shantanoo@user/shantanoo) (Remote host closed the connection)
[09:56:42] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[10:00:23] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[10:02:03] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:02:08] *** wyre_ is now known as wyre
[10:06:57] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:07:33] *** Joins: ravan (~ravan@user/ravan)
[10:10:38] *** Joins: Nocturnalysis (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[10:10:39] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:11:35] <aphysically> jinsun: comment on the discussion :)
[10:11:47] *** Quits: ravan (~ravan@user/ravan) (Client Quit)
[10:12:04] *** Joins: ravan (~ravan@user/ravan)
[10:12:38] *** Quits: OPK (~OPK@user/opk) (Quit: Textual IRC Client: www.textualapp.com)
[10:12:43] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 268 seconds)
[10:13:02] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:14:27] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca) (Ping timeout: 256 seconds)
[10:14:56] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281)
[10:15:07] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[10:16:57] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[10:17:23] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 256 seconds)
[10:18:38] *** Quits: p-i-_ (~Ohmu@223.206.145.10) (Remote host closed the connection)
[10:19:14] *** Joins: p-i- (~Ohmu@mx-ll-223.206.145-10.dynamic.3bb.co.th)
[10:20:15] <aphysically> can you think of a more idiomatic way to pop n chars from front of string
[10:20:17] <aphysically> popped, mystring = mystring[0:n], mystring[n:]
[10:21:16] *** Joins: Enitin (~Enitin@82.102.22.85)
[10:21:51] <aphysically> jinsun: by all means if you think it can have more clarification I'd read if you replied to the discussion too :)
[10:22:29] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:23:49] *** Quits: emf (~emf@2620:10d:c091:480::1:305b) (Ping timeout: 268 seconds)
[10:24:16] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:26:17] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[10:26:18] *** Joins: Echoz (~chris@user/echoz)
[10:28:01] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:3ef5:5d49:73a3:c50b)
[10:30:26] *** Joins: mrec (~markus@user/mrec)
[10:30:48] <mrec> is there a function available that strips class objects from a dictionary/list?
[10:31:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:31:20] *** Joins: upsala (~zcb@185.213.155.232)
[10:31:28] <mrec> {'BaseSelection': <PathScripts.PathBaseSelection.BaseSelection object at 0x176c696d0>, 'extensionList': []...
[10:31:41] <mrec> I just wonder if I have to recreate that myself without those objects
[10:32:26] *** Quits: delvian (~delvian@41.13.224.79) (Read error: Connection reset by peer)
[10:33:02] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:33:26] *** Joins: chele (~chele@user/chele)
[10:33:41] <rindolf> mrec: there is __repr__
[10:34:03] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[10:34:09] *** Parts: lxwulf (~lxwulf@user/lxwulf) ()
[10:34:16] *** Joins: jancoow (~jancoow@user/jancoow)
[10:36:20] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 252 seconds)
[10:36:32] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[10:37:09] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[10:37:13] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[10:37:17] *** Quits: thiras_ (~thiras@user/thiras) (Ping timeout: 240 seconds)
[10:38:09] *** Joins: digilink (~digilink@user/digilink)
[10:39:31] *** Joins: diamondbond (~diamondbo@175.157.81.165)
[10:39:53] *** Joins: delvian (~delvian@41.13.224.79)
[10:40:34] *** Joins: teut (~teut@2401:4900:1c30:1de4:185a:1d29:34e1:c44c)
[10:40:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[10:41:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[10:41:31] <jinsun> aphysically: okay I replied there, I tried to come up with examples where it could cause problems but seems like it definitely shouldn't
[10:41:48] *** Joins: whaley (~whaley@2603-6080-a301-33d1-9e7d-d87a-69a3-c65a.res6.spectrum.com)
[10:41:51] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:42:48] *** Quits: Nocturnalysis (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Quit: leaving)
[10:43:21] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:43:48] <jinsun> aphysically: though this is again one of those things I don't come up with in actual code I write, I face known mypy bugs and problems with type stubs more
[10:44:14] *** Joins: carl- (~carl-@185.103.188.130)
[10:45:27] <aphysically> I just don't see intuitively why the typeguard case shouldn't be the same as the func1 case where the assignment is allowed
[10:46:01] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:46:20] *** Joins: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:46:40] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[10:48:27] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[10:48:51] *** Quits: maplefinger (~maplefing@user/lindis) (Ping timeout: 276 seconds)
[10:48:57] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 240 seconds)
[10:49:18] *** Joins: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net)
[10:49:40] <jinsun> yes seems more like a bug/limitation than intended behavior really
[10:54:47] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (Ping timeout: 256 seconds)
[10:55:22] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[10:56:08] *** Joins: Mechanismus (~LabMonkey@206.255.106.67)
[10:56:28] *** Joins: manti7 (~manti7@176.10.104.94)
[10:57:06] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:57:58] *** Joins: seednode (~seednode@user/seednode)
[10:58:42] *** Joins: raphan1 (~raphan1@82-45-68-178.baltnet.ru)
[10:59:47] <aphysically> jinsun: today advent of code definitely a day for match/case by the way
[10:59:49] <aphysically> https://bpa.st/XHAA
[10:59:53] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[11:00:27] *** Joins: mrwick (~mrwick@user/mrwick)
[11:00:54] *** Joins: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr)
[11:01:22] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:03:09] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[11:03:17] *** Quits: the_lanetly_052_ (~the_lanet@194.135.154.32) (Ping timeout: 252 seconds)
[11:03:29] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[11:04:50] <rindolf> aphysically: duplicate code
[11:05:12] <jinsun> yeah a lot of elifs means time to try out match case
[11:06:18] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[11:06:22] <aphysically> rindolf: this was coded under 2 minute time constraints not maintainability or reliability constraints :D
[11:06:33] <rindolf> aphysically: also https://en.wikipedia.org/wiki/Magic_number_%28programming%29#Unnamed_numerical_constants
[11:06:39] <aphysically> now we get to upgrade it to golf constraints and quick extensibility constraints
[11:07:11] <aphysically> rindolf: you clearly haven't seen my prior AoC day solution
[11:08:02] <aphysically> rindolf: this was the best one https://bpa.st/K3SQ
[11:08:40] <aphysically> this was is actual magic numbers unlike the other one
[11:08:42] <aphysically> one*
[11:09:16] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[11:09:43] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:10:09] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:11:37] <powftw> I have a string. This string may/may not be a single string without spaces or a string with space. How do I check which of the above it is? I thought I could ```count.(' ')``` but it counts the space before and after the string as well. Which is not our need.
[11:11:46] *** Joins: cdown (~cdown@188.214.11.14)
[11:11:56] <powftw> So.. what's the best way to solve this problem?
[11:12:11] *** Joins: luigibu (~luigi@80.30.201.209)
[11:12:38] <powftw> I found that: take very first index and very last starting index. Then use slice, then use .count(' ')
[11:13:15] <powftw> So, it won't have spaces before, after the string. Seems complicated, it may work
[11:14:45] <jinsun> use .strip(" ") to remove spaces from the beginning and end if you don't want to count them
[11:14:51] <rindolf> powftw: use a regex?
[11:15:29] <rindolf> aphysically: heh, nasty
[11:16:41] *** Joins: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr)
[11:17:02] *** Joins: rendar (~rendar@user/rendar)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:19:07] <powftw> jinsun: how to explicitly say "only strip (" ") from start and end" ?
[11:20:45] *** Joins: tobybl (~tobybl@213.31.132.151)
[11:20:50] <Repiphany> That's exactly what str.strip does in the first place
[11:21:24] *** Quits: quasineutral (~quaisneut@user/quasineutral) (Quit: Ping timeout (120 seconds))
[11:21:39] <Repiphany> powftw: https://docs.python.org/3/library/stdtypes.html#str.strip
[11:21:47] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Quit: Leaving)
[11:21:50] *** Joins: quasineutral (~quaisneut@user/quasineutral)
[11:22:37] *** Quits: dibas (~dibas@user/dibas) (Quit: Leaving...)
[11:22:57] *** Joins: dibas (~dibas@user/dibas)
[11:24:09] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (Ping timeout: 256 seconds)
[11:26:12] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[11:28:13] *** Quits: maryo87 (~Maryo@user/maryo) (Read error: Connection reset by peer)
[11:28:53] <jinsun> yeah doing .strip(" ") means you said that explicitly already
[11:29:04] <jinsun> can't be more explicit than that
[11:29:06] <The-Compiler> powftw: btw, use 'in' if you don't need an actual count
[11:29:36] *** Joins: pycode (~pycode3@2001:b07:5d28:551:73b4:6eca:d970:5505)
[11:29:37] <The-Compiler> powftw: i.e. something like: " " in s.strip(" ")
[11:30:54] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[11:31:59] *** Quits: teut (~teut@2401:4900:1c30:1de4:185a:1d29:34e1:c44c) (Quit: Client closed)
[11:32:21] <powftw> It doesn't return the count
[11:32:26] <powftw> The-Compiler:
[11:32:43] <The-Compiler> powftw: well yes, but you never said you needed a count
[11:32:43] *** Joins: grooverman (~grooverma@177.102.119.40)
[11:33:18] <powftw> Currently, I converting a list to str to count actual number of characters
[11:33:53] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:34:03] <The-Compiler> powftw: what's your goal?
[11:34:06] *** Joins: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84)
[11:34:29] <powftw> The-Compiler: yes, now I understand your suggestion
[11:34:31] <powftw> Thank you
[11:34:43] <powftw> jinsun: as always, thankyou
[11:34:44] *** Quits: grooverman_ (~grooverma@177.102.119.40) (Ping timeout: 268 seconds)
[11:35:17] <powftw> Repiphany: 👍
[11:35:38] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:36:24] *** Joins: node1 (~hex@user/node1)
[11:36:28] <node1> Hi
[11:36:35] *** Joins: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se)
[11:36:59] <powftw> Hi
[11:37:15] <powftw> Solved your Tree problem?
[11:37:26] <squid_game> I extract data from part of a list where the values are numbers (it also stores strings in other columns). However, I am having issue that the when I need to compare if the value is == 1 or == 0, because it is treated as a string. As an example https://pastebin.com/9qvP17FK it works with line 7, but doesn't work on line 9 because I didn't explicitly state it as int.
[11:37:26] <node1> What are object at ? can we decipher this addrress? to get to know the details?
[11:37:28] <squid_game>  my code has too many int(tagged_event[i]) now. Is it possible to avoid it at line2 or another way?
[11:37:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:37:52] <squid_game> or what is the most elegant way to tackle that issue?
[11:37:56] <node1> powftw, Yes, i'm still enjoying to solve in more way
[11:38:03] *** Joins: kosh (~kosh@user/kosh)
[11:38:46] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[11:39:01] <powftw> node1: I'm worried that your questions are not detailed and precise enough for people to answer..🤔
[11:39:39] <powftw> My moto is, "ask question to someone that they themselves don't need much time to understand it"
[11:40:11] <powftw> If question is straight, everyone can understand well, you'll solve problem in less time
[11:40:32] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 240 seconds)
[11:40:32] <powftw> You take less time to write a question, it needs more time to tackle down for others
[11:40:36] <squid_game> is my question straight? :)
[11:41:05] *** Joins: cliluw (~cliluw@47.147.73.223)
[11:41:24] <node1> powftw, I understand.
[11:41:41] <powftw> squid_game: I guess, yes. But, here are some fellas to help you.
[11:41:57] <powftw> They can give solutions better
[11:42:04] <squid_game> ok
[11:42:17] <powftw> I.e Idk your solution 🥲
[11:42:24] <powftw> Good luck 🤞
[11:43:23] <squid_game> it seems like using map might be the solution
[11:43:51] <node1>  <__main__.Tree object at 0x7fea986b5e10>
[11:43:52] <node1>  What is this address 0x7fea986b5e10 is all about? How could we decipher the content stored at this address?
[11:44:05] <squid_game> I am not that good at python, I'd appreciate to hear from someone who is more experienced in python
[11:44:24] <powftw> To compare to int, just int(str) is enough?
[11:44:28] <node1> In general it indicates that the object has been created at this place on a memory.
[11:45:15] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:45:21] <jaggz> I'm reading a network video feed, but  cv2.imshow("Frame",imagedisp) is popping up each frame and that window is closing
[11:45:25] <squid_game> powftw, then my code looks ugly with too many int(..)
[11:45:34] <powftw> ```x = "1" int(x) == 1 ```
[11:45:40] <squid_game> I guess the best way is to do tagged_event = list(map(int, data_frame[1][2:])) on line 2
[11:45:52] <powftw> squid_game: oh..
[11:47:27] <powftw> Find the root of the problem and solve it? I.e tell the returning function to return as string and then if you use str less often, then it's less str(x) everywhere
[11:47:36] *** Joins: parv (~quass@user/parv)
[11:47:43] <powftw> So, you don't have to complain it's int(x) everywhere
[11:47:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[11:48:10] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[11:48:14] <powftw> return as int*
[11:48:17] <powftw> Not str
[11:48:38] <jaggz> oh, there's a destroyAllWindows() call in the loop :}
[11:48:43] <squid_game> it seems like the best way to do is to convert the full list to map then to list again. It solved my issue
[11:48:55] *** Quits: squid_game (~squid_gam@h-98-128-168-226.NA.cust.bahnhof.se) (Remote host closed the connection)
[11:51:17] *** Quits: node1 (~hex@user/node1) (Killed (NickServ (GHOST command used by hex_!~hex@1.39.139.189)))
[11:52:16] *** Quits: Themis3000 (~Thunderbi@user/themis3000) (Quit: Themis3000)
[11:53:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:53:42] <deniska> Static site generator for non-periodic content (aka landing pages, portfolio sites etc) I've been using lately: https://bpa.st/BCYA
[11:53:53] *** Joins: rsx (~dummy@ppp-188-174-130-48.dynamic.mnet-online.de)
[11:56:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[11:58:17] *** Quits: jonthesnow (~xizhendu@36.112.188.169) (Ping timeout: 240 seconds)
[11:59:27] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[11:59:36] <rindolf> deniska: nice, there is https://github.com/staticjinja/staticjinja/ too
[11:59:56] *** Quits: kosh (~kosh@user/kosh) (Read error: Connection reset by peer)
[12:00:31] *** Joins: Enitin (~Enitin@82.102.22.85)
[12:03:03] *** Quits: greenbigfrog (~greenbigf@ip5f5ad852.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[12:03:51] *** Joins: Spaceflight (uid423739@id-423739.ilkley.irccloud.com)
[12:04:00] <deniska> rindolf: I use an util called `entr` to rerun it when a file changes
[12:04:02] *** Joins: kosh (~kosh@user/kosh)
[12:05:08] <deniska> I also have deploy.sh nearby which scp's appropriate files to /var/www on a server :)
[12:05:13] <deniska> (and no YAML file in sight)
[12:05:44] *** Spaceflight is now known as gitesh
[12:06:22] *** Joins: Naan (~Naan@user/naan)
[12:07:40] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[12:09:30] *** Joins: cba (~bch@78.47.230.132)
[12:09:45] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:10:11] *** Joins: Naan` (~Naan@user/naan)
[12:10:12] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[12:10:33] *** Quits: Naan` (~Naan@user/naan) (Remote host closed the connection)
[12:10:51] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:11:14] <cba> Hello: I am doing "import psycopg2" inside an if-statement (conditional import).  When I try to "psycopg2.connect(..)", it says the name psycopg2 is not defined.  However, it is listed in sys.modules.keys().  Any ideas why that is failing?  (I tried something similar with "import sys" and it worked there as expected)
[12:11:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:11:33] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:12:07] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:12:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[12:12:30] <deniska> cba: do you import it in the same function as you use it?
[12:12:44] <deniska> cba: or the same scope, if it's in the module
[12:12:48] <deniska> basically show the code :)
[12:12:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:13:02] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Quit: jarthur)
[12:13:21] *** Joins: alzgh (~alzgh@user/alzgh)
[12:13:25] <cba> deniska: the scope is different, yes.  I am doing the import in main() and I am using psycopg2 inside a class.
[12:13:49] <deniska> cba: `import` is more or less an assignment statement, import inside a function creates a local variable
[12:14:07] <cba> Is there a way to load it globally?
[12:14:15] <deniska> cba: import it in the module scope
[12:14:27] <deniska> cba: or import it again in the method which uses it
[12:14:38] <cba> OK, thanks :)
[12:14:53] <deniska> cba: local imports are a fairly niche and usual thing to have in code though
[12:14:53] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Read error: Connection reset by peer)
[12:14:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[12:14:58] <deniska> unusual*
[12:15:02] *** Joins: dvx (~dvx@5.181.92.64)
[12:15:04] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:15:26] <cba> deniska: I have 3 functions in the class and I don't think it its a good idea to load it there.
[12:15:49] <cba> I think I will split up the module into 2 modules and load it in the submodule globally.
[12:16:23] *** Quits: diamondbond (~diamondbo@175.157.81.165) (Ping timeout: 256 seconds)
[12:16:25] *** Quits: runelind (~runelind@user/runelind) (Quit: ZNC 1.8.2 - https://znc.in)
[12:16:27] <cba> I thought about the scope as well, but the sys.modules.keys() was listing the psycopg2 module.  Why is that?
[12:16:46] *** Joins: runelind (~runelind@user/runelind)
[12:17:02] <deniska> cba: sys.modules is a cache which keeps imported modules
[12:17:12] <deniska> cba: it doesn't relate to which names are available in the scope
[12:17:20] <cba> thanks! makes sense
[12:17:23] *** guenhael1 is now known as guenhael
[12:17:26] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:17:44] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-e0b9-1b23-8395-a665.res6.spectrum.com)
[12:17:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[12:17:47] <deniska> cba: `import` first looks in sys.modules, and if it finds it there, it just gives you an object which already exists, otherwise it loads it from disk
[12:18:28] <deniska> (it's more complex than that, but the gist is what I described)
[12:18:41] *** Joins: matsaman (~matsaman@user/matsaman)
[12:19:53] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:21:17] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-e0b9-1b23-8395-a665.res6.spectrum.com) (Client Quit)
[12:24:30] *** Joins: greenbigfrog (~greenbigf@ip5f5ad852.dynamic.kabel-deutschland.de)
[12:26:35] *** Joins: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs)
[12:26:46] *** Quits: nomic (~nomic@51.52.78.152) (Quit: Leaving)
[12:28:26] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Ping timeout: 260 seconds)
[12:28:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: Textual IRC Client: www.textualapp.com)
[12:29:41] *** Quits: kenwoodfox (~quassel@user/kenwoodfox) (Quit: No Ping reply in 180 seconds.)
[12:29:58] <Belxjander> cba: you need to at least declare the import name *regardless* of whether it is imported or not and then test the import success...
[12:30:14] *** Joins: Klinda (~superleag@user/klinda)
[12:30:17] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[12:30:37] <Belxjander> cba: "try:\n\timport blah\nexcept:\n\tblah = None\n" << the module name needs to be defined to be tested even when the import itself fails...or only occurs conditionally
[12:30:45] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:30:57] *** Joins: kenwoodfox (~quassel@user/kenwoodfox)
[12:30:57] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[12:31:28] <Belxjander> cba: that way you can "If blah is Not None: ..." use the module calls
[12:31:41] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[12:32:07] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[12:32:37] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[12:32:37] *** guenhael1 is now known as guenhael
[12:34:46] *** Joins: tejr (~tejr@user/tejr)
[12:37:07] *** Joins: inomoz (~inomoz@85.26.165.145)
[12:37:23] *** Joins: Vornotron (~Vornicus@2603-8000-5d07-7ef0-905f-a794-ab8e-4d9a.res6.spectrum.com)
[12:37:38] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[12:38:18] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[12:38:38] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:38:39] *** Joins: p-i-_ (~Ohmu@223.206.145.10)
[12:38:52] *** Quits: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053) (Ping timeout: 268 seconds)
[12:40:06] *** Quits: mat001 (~mat001@c-71-202-248-117.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[12:40:32] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-905f-a794-ab8e-4d9a.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:41:32] *** Quits: p-i- (~Ohmu@mx-ll-223.206.145-10.dynamic.3bb.co.th) (Ping timeout: 240 seconds)
[12:43:34] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[12:43:53] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:44:29] *** Quits: iomari891 (~iomari891@197.210.70.46) (Ping timeout: 252 seconds)
[12:44:48] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[12:45:02] *** Quits: jaggz (~jaggz@user/jaggz) (Ping timeout: 268 seconds)
[12:45:56] *** Joins: cliluw (~cliluw@47.147.73.223)
[12:45:57] *** Joins: iomari891 (~iomari891@197.210.70.47)
[12:47:23] *** Joins: slav0nic (slav0nic@python.su)
[12:48:57] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:49:21] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:dcd9:d1f0:6169:7145) (Ping timeout: 268 seconds)
[12:50:58] *** Joins: jaggz (~jaggz@user/jaggz)
[12:52:19] *** Quits: hemstock (~hemstock@194.59.250.234) ()
[12:52:48] *** Joins: ponyofdeath (~vladi@2606:6000:cfc0:2b:9cf9:caf8:f20d:1053)
[12:53:27] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[12:53:41] *** Parts: lxwulf (~lxwulf@user/lxwulf) ()
[12:53:43] *** Quits: ubert (~Thunderbi@p200300ecdf1abb03cc2914e8ae945344.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:54:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:55:06] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Updating details, brb)
[12:55:17] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[12:56:11] *** Quits: zmotaj (~zmotaj@user/zmotaj) (Ping timeout: 245 seconds)
[12:56:17] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[12:56:28] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:57:09] *** Quits: KvL (~KvL@130.95.254.207) (Quit: KvL)
[12:57:34] *** Joins: nomic (~nomic@51.52.78.152)
[12:57:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[12:59:15] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[12:59:27] *** Quits: goutly (~gitly@85.255.233.150) (Ping timeout: 256 seconds)
[12:59:37] *** Quits: iomari891 (~iomari891@197.210.70.47) (Ping timeout: 240 seconds)
[12:59:37] *** Quits: parv (~quass@user/parv) (Ping timeout: 240 seconds)
[13:01:06] *** Joins: luigibu (~luigi@80.30.201.209)
[13:01:31] *** Joins: goutly (~gitly@185.69.144.136)
[13:02:30] *** Joins: iomari891 (~iomari891@197.210.70.65)
[13:03:29] *** Quits: LucaTM (~LucaTM@user/lucatm) (Read error: Connection reset by peer)
[13:03:41] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 245 seconds)
[13:04:12] <lericson> how do you efficiently compute "first index that satisfies boolean condition c"
[13:04:13] <lericson> in numpy
[13:04:36] <lericson> basically next(i for i, row in enumerate(arr) if c(row))
[13:04:41] <lericson> but not slow
[13:05:19] <bjs> lericson: argmin ?
[13:05:51] <lericson> argmin over what?
[13:06:15] *** Quits: goutly (~gitly@185.69.144.136) (Ping timeout: 256 seconds)
[13:06:40] <lericson> np.argmin(np.arange(len(arr))[c(arr)]) is possible but also a bit silly
[13:07:52] *** Joins: goutly (~gitly@85.255.233.150)
[13:08:15] <bjs> lericson: np.argmax(c(arr))   (I guess max because True > False)
[13:09:17] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[13:09:19] <lericson> hah, how did i not think of that
[13:09:21] <bjs> it's not the most efficient way
[13:09:25] <bjs> I would guess
[13:09:30] <lericson> of course
[13:09:36] <lericson> but it's also pretty straight-forward
[13:09:39] *** Joins: plastico (~plastico@neomutt/plastico)
[13:10:23] <bjs> lericson: there's also argwhere() that can return all of the values, I think argmax only returns the first https://numpy.org/doc/stable/reference/generated/numpy.argwhere.html
[13:10:39] <lericson> i just really need to find the first
[13:11:11] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:11:33] <Repiphany> argmax will still check all of the array, I don't think there's any way around that for "fast" numpy operations
[13:11:46] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[13:11:59] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:12:17] <lericson> that's fine
[13:12:56] <lericson> style question
[13:13:00] <lericson> do you say max_distance or distance_max
[13:13:05] <lericson> (you have other distances)
[13:13:45] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:14:13] *** Joins: a0z1 (~a0z1@193.27.14.93)
[13:14:32] <Repiphany> (caveat, np.argmax will return the 0th index if your array is all False)
[13:14:41] <montpol> Im getting the error "ValueError: operands could not be broadcast together with shapes (180,) (160,) " with the cod here: https://bpa.st/MGZA any idea what the problem could be=
[13:14:42] <Repiphany> You can use np.nonzero instead if that could be an issue
[13:14:46] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:14:49] *** Joins: bindu_ (~bindu@user/bindu)
[13:15:11] *** Joins: tobybl_ (~tobybl@213.31.132.151)
[13:15:58] <montpol> could it be the y and x arrays dont cannot be subtracted due to different dimensions?
[13:16:04] <lericson> good catch Repiphany
[13:16:31] <rindolf> montpol: i presume so
[13:16:36] *** bindu_ is now known as bindu
[13:16:49] <lericson> montpol: how would they?
[13:17:02] *** Quits: tobybl (~tobybl@213.31.132.151) (Ping timeout: 240 seconds)
[13:18:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:18:43] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[13:19:25] <lericson> i think i found a better way
[13:19:37] <lericson> it only works in my specific circumstance htough
[13:19:53] <lericson> because i want to cut another array by the result, so i can just arr2[c[arr1]]
[13:20:06] <lericson> since c[arr1] will be True, True, True, …, False, False, …, False
[13:21:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:22:03] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[13:22:19] *** Joins: bindu (~bindu@user/bindu)
[13:23:12] *** dcaro_away is now known as dcaro
[13:24:22] *** Joins: v- (~gary@user/ghost)
[13:24:59] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:c4a4:d039:7d:7f7e)
[13:26:50] *** Quits: zakora (~zakora@2001:14ba:a0f4:3d00:21aa:b6aa:2bcc:1d84) (Ping timeout: 252 seconds)
[13:27:27] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[13:27:37] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[13:27:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:28:25] *** Quits: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[13:28:47] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[13:29:37] *** Quits: Strom (strom@fedora/strom) ()
[13:30:27] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Remote host closed the connection)
[13:30:48] <montpol> is there any easy way to, if two arrays arent the same dimensions, just delete the extra values?
[13:30:54] <montpol> numpy arrays*
[13:31:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:31:07] <lericson> which values are 'extra'?
[13:31:28] <lericson> arr2_cut = arr2[:arr1.shape[0]] is one way
[13:31:30] <montpol> the last values of the larger array
[13:31:37] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:31:37] *** Joins: legola (~legola@46.235.101.65)
[13:31:46] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[13:31:55] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:31:57] <lericson> if either can be larger, just do it both ways
[13:32:07] <montpol> (160,) and (180,)
[13:32:10] *** Joins: Strom (strom@fedora/strom)
[13:32:15] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[13:32:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:32:31] <montpol> a = (160,); b =(180,)
[13:32:53] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 256 seconds)
[13:32:54] <montpol> ok thanks
[13:34:43] *** Joins: SuperLag (~akulbe@user/superlag)
[13:35:43] *** Quits: zlg (~zlg@user/zlg) (Ping timeout: 256 seconds)
[13:36:59] *** Joins: behelit (~behelit@217.61.224.84)
[13:37:41] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[13:38:27] <behelit> hi! been away from python a while. `python -m venv env`, activate env, and `pip install [package|requirements.txt]`, is that still standard? seeing stuff like poetry, pipenv etc floating around. anything worth looking into?
[13:39:06] *** Joins: dmr (~rdumitru@user/dmr)
[13:39:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:39:40] <matsaman> behelit: that is still the most rudimentary approach, yes
[13:39:52] <matsaman> I mean, if you're curious, look into whatever
[13:40:06] <matsaman> I think pip you'll always need, and pyenv you'll need sometimes
[13:40:12] <matsaman> the rest is personal preference
[13:40:22] *** Joins: ano (~ano@user/ano)
[13:40:48] <matsaman> as far as the workplace, you're going to encounter all sorts of those preferences =P
[13:41:41] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 252 seconds)
[13:41:49] <lericson> no idea what pyenv is
[13:41:58] <lericson> should i be worried
[13:42:38] <Repiphany> pyenv lets you install and manage different python versions
[13:43:01] *** Joins: cdown_ (~cdown@163.114.131.1)
[13:43:13] *** Joins: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4)
[13:43:13] *** Joins: SuperLag (~akulbe@user/superlag)
[13:43:14] <matsaman> lericson: many people won't ever need it
[13:43:16] <Burrr> behelit: I personally give preference to pipenv
[13:44:14] <matsaman> I think if you know virtual env & pip, then you know the base system, and you can easily tell whether anything that does more than that is going to be something you'll like
[13:44:23] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[13:44:50] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:44:54] <Burrr> let me copy/paste a lil discription: "Pipenv is a packaging tool for Python that solves some common problems associated with the typical workflow using pip , virtualenv , and the good old requirements. txt . In addition to addressing some common issues, it consolidates and simplifies the development process to a single command line tool."
[13:45:17] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[13:45:17] *** Quits: cdown (~cdown@188.214.11.14) (Ping timeout: 240 seconds)
[13:45:18] <matsaman> I usually find it amusing that the whole reason pipenv exists is down to this simple process that you can accomplish with pip alone: https://kennethreitz.org/essays/2016/02/25/a-better-pip-workflow
[13:45:22] *** cdown_ is now known as cdown
[13:45:28] <matsaman> but convenience is convenience. If you like it that's great
[13:45:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:45:57] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[13:46:25] <lericson> matsaman: just me or is the text pretty mangled?
[13:46:31] <lericson> the verbatim stuff i mean
[13:46:57] *** Quits: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr) (Ping timeout: 240 seconds)
[13:47:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:47:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:47:26] <matsaman> lericson: hrmm?
[13:47:46] <lericson> safari renders the output in one long line
[13:48:29] <lericson> oh the actual html is one line
[13:48:30] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[13:48:32] <matsaman> lericson: at kennethreitz.org?
[13:48:42] <lericson> yes
[13:48:44] *** Joins: zlg (~zlg@user/zlg)
[13:48:46] <matsaman> hrmm, fine over here
[13:48:46] <lericson> nm it's not one line
[13:49:09] <lericson> https://bsg.lericson.se/jing/8DVLkQIJsrv9.png
[13:49:10] *** Joins: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr)
[13:49:20] <matsaman> tldr: he describes a simple way built in to pip to accomplish what he wanted, and says he's happy he didn't need another tool to do it
[13:49:21] <Burrr> matsaman: yeah, I feel pipenv combining pip and venv creates a lot of convenience and simplicity for most use cases.
[13:49:24] <matsaman> ...and then he made another tool anyway =P
[13:49:31] <Burrr> ll :D
[13:49:38] <matsaman> Burrr: can't argue with that
[13:49:44] *** Joins: Sadale (~Sadale@user/sadale)
[13:49:56] *** Joins: wingsorc__ (~wingsorc@user/wingsorc)
[13:50:02] <Burrr> lericson: yeah, I see the text same as you
[13:50:20] <matsaman> he's like, a photographer or something
[13:50:31] <matsaman> so his aesthetic is all bananas =)
[13:51:10] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[13:51:33] *** Joins: luigibu (~luigi@80.30.201.209)
[13:51:57] *** Joins: xcm (~xcm@user/xcm)
[13:52:41] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 252 seconds)
[13:52:50] *** Joins: molt (~molt@178-222-245-206.static.isp.telekom.rs)
[13:53:50] <lericson> fyi firefox also renders the text like that
[13:53:51] *** Quits: ttree (~ttree0@c-73-169-193-237.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:53:59] <lericson> with other issues to boot
[13:54:56] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 245 seconds)
[13:58:41] *** Quits: tanner (~tanner@tilde.town) (Ping timeout: 245 seconds)
[13:58:56] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:02:11] <matsaman> I've seen worse, heh
[14:02:16] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[14:02:17] *** Quits: rajkosto (~rajkosto@91-150-115-250.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[14:02:30] <matsaman> (don't open this:) https://webtekrocks.com/clientlist.html
[14:03:06] *** Joins: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi)
[14:03:56] <lericson> interesting
[14:05:43] *** Quits: zakora (~zakora@dzd6d6yj1bhywfzv6-bxt-3.rev.dnainternet.fi) (Client Quit)
[14:06:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:07:22] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[14:07:54] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:09:14] *** Joins: shad (~shad@user/shad)
[14:11:58] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:17:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[14:20:17] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:20:18] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[14:20:53] *** Joins: cheater (~Username@user/cheater)
[14:22:08] <cluelessperson> how do you make functools.cache ignore some arguments?
[14:22:18] <cluelessperson> rather a specific one
[14:22:26] <cluelessperson> dicts aren't hashable
[14:22:51] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[14:23:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:25:01] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[14:25:01] *** guenhael1 is now known as guenhael
[14:25:09] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:26:20] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:c4a4:d039:7d:7f7e) (Remote host closed the connection)
[14:26:32] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:9285:9698:be15:2e15)
[14:26:38] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[14:26:50] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[14:26:57] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[14:26:57] <jinsun> not possible I think, you will just have to make a hashable dict-like object instead of dict and pass that to your function
[14:27:01] <lericson> i think you're slightly going outside the intended use of lru_cache, cluelessperson
[14:27:19] <nedbat> cluelessperson: what is the dict argument that you want to ignore?
[14:28:17] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[14:29:17] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[14:29:57] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Quit: The Lounge - https://thelounge.chat)
[14:30:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[14:30:45] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[14:31:29] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[14:31:48] *** Joins: alzgh (~alzgh@user/alzgh)
[14:33:02] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[14:33:13] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[14:34:05] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[14:34:12] *** Quits: pycode (~pycode3@2001:b07:5d28:551:73b4:6eca:d970:5505) (Remote host closed the connection)
[14:36:18] *** Parts: anchovy (~anchovy@101.191.178.3) ()
[14:36:42] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[14:36:43] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:37:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[14:37:58] *** Joins: Enitin (~Enitin@82.102.22.85)
[14:38:34] *** Joins: Ilyu (~quassel@78.202.228.230)
[14:39:11] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 256 seconds)
[14:40:41] *** Joins: gidden (~gidden@adsl-dyn57.78-99-32.t-com.sk)
[14:41:27] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[14:43:25] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Quit: The Lounge - https://thelounge.chat)
[14:44:05] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[14:44:27] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[14:44:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:45:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:49:38] *** Joins: Balzy (~Balzy@host-87-14-134-154.retail.telecomitalia.it)
[14:50:36] *** Joins: KvL (KvL@gateway/vpn/protonvpn/kvl)
[14:52:06] *** Quits: RiFo (~RiFo@user/rifo) (Quit: ... and thanks for all the fish.)
[14:53:22] *** Joins: canarts (~stranac@195.29.239.126)
[14:53:24] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:53:37] *** Quits: stranac (~stranac@195.29.239.126) (Ping timeout: 240 seconds)
[14:54:48] *** Joins: lethu (~lethu@user/lethu)
[14:54:57] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:55:18] *** Joins: RiFo (~RiFo@user/rifo)
[14:56:08] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:57:00] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[14:57:59] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:00:04] *** Joins: VaniaPy (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr)
[15:00:12] *** Quits: frost (~frost@user/frost) (Remote host closed the connection)
[15:02:13] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:3ef5:5d49:73a3:c50b) (Ping timeout: 240 seconds)
[15:02:43] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[15:03:14] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:c47d:4539:15a1:ae3f)
[15:03:19] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[15:03:37] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[15:04:31] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:10:17] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[15:11:37] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[15:12:03] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 256 seconds)
[15:14:12] <gitesh> why does algorithm solve a problem?
[15:14:17] <gitesh> is that right question?
[15:15:08] <skipper> which algorithm and what problem are the follow up questions?
[15:15:25] <gitesh> skipper: any algorithm
[15:15:35] <gitesh> I am speaking in general
[15:15:56] <matsaman> it's a process that produces a desired result
[15:16:31] <gitesh> ok
[15:16:39] <skipper> gitesh: algorithm means just sequence of steps, in simple words you strategy tto solve a problem
[15:17:15] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[15:17:29] *** Quits: nomic (~nomic@51.52.78.152) (Remote host closed the connection)
[15:17:53] <matsaman> probably neither of those are what you should write on your homework, though =P
[15:18:00] <matsaman> but, then, sounds like your homework is dumb
[15:18:04] *** Quits: cheater (~Username@user/cheater) (Quit: BitchX: use it, it makes you bulletproof)
[15:18:23] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[15:18:31] <magga> anyone knows how i can run this query in sqlalchemy? SELECT * FROM countries ORDER BY RANDOM() LIMIT 10; ? :)
[15:18:43] <gitesh> so python converts source code into byte code by compile it and then byte code is interpreted by a virtual machine which then converts byte code into object code and object code is what executed?
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:22:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[15:22:57] *** Joins: Enitin (~Enitin@82.102.22.85)
[15:23:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:24:10] <nedbat> gitesh: yes, except the virtual machine doesn't convert to object code. It just does what each byte code says to do.
[15:24:26] <magga> nvm i found it out :)
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:25:05] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 256 seconds)
[15:25:53] *** Joins: cheater (~Username@user/cheater)
[15:26:04] *** Joins: AsenMx (~AsenMx@user/asenmx)
[15:27:12] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[15:27:43] *** Joins: han-solo (~hanish@user/han-solo)
[15:28:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:29:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[15:31:31] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[15:31:33] *** Joins: summersault (~summersau@179.221.251.16)
[15:31:54] *** Quits: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:32:05] *** Joins: pepper (~pepper@user/pepper)
[15:35:46] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:16] *** Joins: cosimone (~user@93-47-229-223.ip115.fastwebnet.it)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:37] *** Quits: Dotz0cat (~Dotz0cat@h222.215.213.151.dynamic.ip.windstream.net) (Ping timeout: 240 seconds)
[15:36:57] *** Joins: Dotz0cat (~Dotz0cat@h158.227.19.98.static.ip.windstream.net)
[15:39:27] *** Joins: zoraj (~zoraj@209.126.81.159)
[15:40:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:40:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:23] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[15:43:10] *** Joins: georgios (~georgios@user/georgios)
[15:44:16] *** Joins: darksun (~darksun@user/darksun)
[15:44:30] *** Quits: BlessJah (~BlessJah@user/blessjah) (Ping timeout: 268 seconds)
[15:44:36] *** Joins: frost (~frost@user/frost)
[15:44:39] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[15:44:54] *** Joins: arinov (~arinov@176.89.29.127)
[15:45:15] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[15:45:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:46:01] *** Joins: BlessJah (~BlessJah@user/blessjah)
[15:46:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:47] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[15:46:56] <bolovanos_> hithere - I have photos (tiff, lzw, 16bit/per chan). I would like to add watermarked date and than send it to photolab. Is it wise to manipulate with high colour depth pictures in opencv. I do not want to risk "degradation" of existing information
[15:47:13] *** Joins: LimeOn (~user@user/limeon)
[15:48:39] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[15:48:59] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:49:08] *** dcaro is now known as dcaro_lunch
[15:49:31] *** Quits: meti (~meti@user/meti) (Quit: ZNC - http://znc.in)
[15:50:20] *** Joins: meti (~meti@user/meti)
[15:50:48] <bjs> gitesh: here's a little toy bytecode language you can have a go at playing with https://gist.github.com/bensimner/bae76d72c2c7f8fe3c346606855f97dd
[15:50:57] <matsaman> bolovanos_: you should be able to compare an altered version with the original to know if anhy degradation has occurred
[15:51:09] *** Joins: zeden (~zeden@user/zeden)
[15:51:13] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189)
[15:52:17] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 240 seconds)
[15:52:26] <bjs> gitesh: this is basically what Python does, but Python is obviously much bigger and more complicated. But it's the same idea, string program -> compiled to bytecode program -> interpreted by some function that does what the bytecode tells it to
[15:54:58] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Remote host closed the connection)
[15:55:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:55:54] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[15:56:09] *** Quits: Terexen (~terexen@user/terexen) (Remote host closed the connection)
[15:56:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:05] <gitesh> bjs: ok
[15:57:41] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[15:58:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:00:14] *** Joins: lethu (~lethu@user/lethu)
[16:01:40] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Quit: The Lounge - https://thelounge.chat)
[16:01:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:02:21] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[16:02:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:04:06] *** Joins: gerard (~gerard@user/gerard)
[16:04:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:04:52] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[16:05:02] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:05:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:06:19] *** Joins: m1cr0xf7 (~m1cr0xf7@156.215.127.146)
[16:06:40] *** Quits: rubemlrm (~rubemlrm@user/rubemlrm) (Client Quit)
[16:06:42] <nedbat> bjs: i like that example.  any chance you can tweak it to do infix?
[16:07:22] *** Joins: rubemlrm (~rubemlrm@user/rubemlrm)
[16:07:33] *** Quits: m1cr0xf7 (~m1cr0xf7@156.215.127.146) (Read error: Connection reset by peer)
[16:07:55] <bjs> nedbat: maybe after work
[16:08:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:08:06] <bjs> as you know, infix requires a little more effort to make work :P
[16:08:43] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (Ping timeout: 256 seconds)
[16:08:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:09:34] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[16:10:00] *** Joins: m0cka (~m1cr0xf7@156.215.127.146)
[16:10:48] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:11:25] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[16:11:41] <nedbat> bjs: i know :)
[16:12:26] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[16:12:35] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[16:14:03] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[16:15:55] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:15:57] <vlt> bolovanos_: Is OpenCV the right tool for the job?
[16:16:14] *** Joins: lethu (~lethu@user/lethu)
[16:18:03] <bolovanos_> vlt, right question. Right now I am  trying pillow, but do not know - conditions (in / out) are known. I am rather in time press to check specs to say if it is right or not.
[16:18:08] <bolovanos_> vlt, what would you use?
[16:18:37] <vlt> bolovanos_: Propably Pillow, yes.
[16:19:14] <wyre> will just pip show system-wide packages installed with 'sudo pip'?
[16:19:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:20:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:21:27] <Yhg1s> wyre: yes, no, maybe, maybe it'll break your system. Really, do not use 'sudo pip'.
[16:21:55] <bolovanos_> vlt, for example pillow - after adding text, changes output file from 101MB to 23MB - reason - it changed color depth from 16bit to 8bit
[16:22:30] <wyre> Yhg1s, I'm not sure but apparently some modules have to be installed system-wide to get them working properly ... 🤔
[16:23:52] <nedbat> wyre: that is probably not true.
[16:25:07] <vlt> bolovanos_: What does your code look like?
[16:25:11] *** Joins: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca)
[16:25:24] <bolovanos_> and answer to multi channel 16-bit is  here https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes
[16:25:34] <bolovanos_> it probably does not support it
[16:26:15] <bolovanos_> just going through examples here https://www.geeksforgeeks.org/python-pil-image-save-method/
[16:26:29] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:26:29] <bolovanos_> adding text https://www.geeksforgeeks.org/python-pillow-creating-a-watermark/
[16:27:11] *** Joins: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4)
[16:27:16] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[16:27:27] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:27:30] <bolovanos_> according to this https://stackoverflow.com/questions/59836574/how-to-load-a-16-bits-channel-rgba-image-with-pil
[16:27:36] <bolovanos_> open cv should be a way to go
[16:29:14] <bolovanos_> so far - but maybe some photographer is juggling with his pixels using python, knows what is the best and is here :)
[16:29:55] <wyre> nedbat, I usually use my distro package manager to install system-wide python modules, because in my distro repos there are a lot of python-* packages
[16:30:08] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[16:30:13] *** Joins: MikZyth (~MikZyth@host-192-156-66-217.spbmts.ru)
[16:30:15] <wyre> but ... I guess there is no way to figure out if some package has been installed with pip, right?
[16:30:22] <nedbat> wyre: ok, but that's not the same as "sudo pip", right?
[16:30:39] <nedbat> wyre: "pip list" will show you the pip-installed packages, iiuc
[16:31:27] <wyre> nedbat, sure, but ... I was thinking in modules like gpiodev that needs access to things like /dev/gpiochip0
[16:32:51] *** VaniaPy is now known as poutsoulis
[16:33:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:33:33] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:34:10] <wyre> nedbat, apparently pip list is also listing python-* packages installed with pacman
[16:34:20] <nedbat> wyre: wouldn't access like that depend on who ran the main program, not how the library was installed?
[16:35:22] *** Quits: jazzy3 (~jaziz@user/jaziz) (Quit: Beddie bye-bye)
[16:35:22] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:35:37] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:36:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:37:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:38:01] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[16:38:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:38:18] *** Joins: theprophet (~theprophe@85.114.228.184)
[16:38:46] *** Joins: mat001 (~mat001@c-69-181-153-73.hsd1.ca.comcast.net)
[16:38:48] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[16:39:04] <Swayze> anyone here using tweepy
[16:39:12] <Swayze> the docs are so incoherent imho
[16:39:31] <Swayze> been struggling with oauth 1
[16:39:43] <Swayze> need a user session ..
[16:39:56] <Swayze> im starting to think i should rather go browser automation
[16:40:00] <Swayze> thoughts :-o
[16:40:10] *** Quits: KvL (KvL@gateway/vpn/protonvpn/kvl) (Quit: KvL)
[16:40:12] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[16:40:35] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:41:10] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[16:41:13] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 268 seconds)
[16:42:18] <bancroft> software packages often have bad or wrong documentation, when it doesn't work check the code
[16:42:23] * bancroft shrugs
[16:43:00] *** Joins: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:43:14] <bancroft> price of FOSS I guess, i'm sure there's an xkcd comic about this too
[16:43:15] *** Joins: lethu (~lethu@user/lethu)
[16:43:26] <NoImNotNineVolt> um
[16:43:38] <NoImNotNineVolt> proprietary software packages also often have bad or wrong documentation
[16:43:45] <bancroft> no doubt!
[16:43:52] <Bluefoxicy> if only it were latex instead
[16:43:53] <NoImNotNineVolt> but then you don't even have the option of checking the code :P
[16:44:05] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:44:06] <bancroft> lol yeah, proprietary is worst
[16:44:09] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[16:44:24] <Bluefoxicy> unbelievable how well documented latex packages are
[16:44:32] <Swayze> ...
[16:44:52] <bancroft> have you tried reportlab? I don't even read their docs at all anymore. Straight to code
[16:45:06] <Swayze> oh hell no
[16:45:07] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Quit: leaving)
[16:45:17] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[16:45:24] <marduk> cliluw: s[1:][::-1]
[16:45:44] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[16:45:44] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Remote host closed the connection)
[16:46:02] *** Joins: ExeciN (~ExeciN@user/nicexe)
[16:46:24] <bancroft> Ha! Found it: https://xkcd.com/2347/
[16:46:46] *** Quits: LuksNuke_ (~LuksNuke@gateway/tor-sasl/luksnuke) (Client Quit)
[16:46:57] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[16:47:28] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[16:48:50] *** dcaro_lunch is now known as dcaro
[16:49:24] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[16:50:54] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:51:21] *** poutsoulis is now known as BozasPanos
[16:52:55] *** Quits: iomari891 (~iomari891@197.210.70.65) (Ping timeout: 256 seconds)
[16:53:41] *** Joins: iomari891 (~iomari891@197.210.53.158)
[16:55:28] *** Joins: thiras_ (~thiras@user/thiras)
[16:55:32] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:c47d:4539:15a1:ae3f) (Ping timeout: 240 seconds)
[16:55:37] *** Quits: m0cka (~m1cr0xf7@156.215.127.146) (Quit: WeeChat 3.3)
[16:56:27] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:32ec:add1:6eff:37fa)
[16:57:58] *** Quits: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:58:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[16:58:55] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:59:49] <rindolf> bancroft: https://blog.codinghorror.com/learn-to-read-the-source-luke/
[17:00:09] *** Joins: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4)
[17:01:53] *** Quits: inomoz (~inomoz@85.26.165.145) (Quit: WeeChat 3.3)
[17:02:31] *** Joins: nicko (~iClass@222.211.31.34)
[17:04:39] *** Quits: vladoski (~foo@2001:b07:add:d406:78f9:8795:af3e:8ae4) (Ping timeout: 268 seconds)
[17:05:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[17:05:38] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:06:57] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[17:07:33] *** Joins: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de)
[17:07:55] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[17:07:56] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[17:08:06] *** Quits: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:08:29] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[17:10:38] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:10:45] *** Joins: Siecje (~Siecje@157.52.5.145)
[17:10:48] *** Joins: DaNeenjah (~jake@adsl-74-230-7-13.hsv.bellsouth.net)
[17:11:04] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[17:11:06] *** Joins: pankid (~quassel@pankid.club)
[17:11:23] *** Joins: alzgh (~alzgh@user/alzgh)
[17:12:11] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[17:12:13] *** Joins: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be)
[17:12:39] *** Joins: drogas (~drogas@jump2.jet.uk)
[17:15:52] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:18:06] *** Joins: ham5urg (~ham5urg@p200300d16716cd0054a4e809045364d2.dip0.t-ipconnect.de)
[17:19:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:22:51] *** Joins: aniketgm (~Aniket@49.36.109.33)
[17:23:19] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi)
[17:24:22] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[17:25:27] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:25:41] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:d4f0:5945:67b0:597)
[17:26:33] <userHeni> What's the difference between going through a dictionary using dict.keys() and just loop through dict?
[17:26:52] <Yhg1s> userHeni: nothing, really.
[17:27:26] <The-Compiler> I've always wondered why .keys() is even a thing
[17:27:43] *** Quits: nicko (~iClass@222.211.31.34) (Quit: Konversation terminated!)
[17:27:44] <userHeni> Cheers
[17:28:01] <marduk> .keys() existed before iter(dict) was a thing.
[17:28:05] *** Quits: grundrausch3n (~grundraus@p200300e9ef0a82009c87fcc08caac64f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:28:09] <Yhg1s> The-Compiler: because it used to give you a list of keys, and now gives you a set-like view on the dict's keys.
[17:28:12] *** Joins: henistein (~henistein@2001:8a0:fca7:4f01:5e5:357b:e46b:298b)
[17:28:17] *** Parts: Reffter (~Reffter@2001:818:dea5:2b00:d4f0:5945:67b0:597) ()
[17:28:36] *** Joins: Reffter (~Reffter@2001:818:dea5:2b00:d4f0:5945:67b0:597)
[17:28:42] <The-Compiler> hm, true
[17:29:04] *** Quits: metus (~metus@186.67.158.250) (Quit: Lost terminal)
[17:29:04] <The-Compiler> though, for the former, list(d) would've done the job as well I assume
[17:29:23] <Yhg1s> The-Compiler: not when dict.keys() was added, no. dicts weren't iterable :)
[17:29:27] <Reffter> userHeni: it's the same tbh
[17:29:45] *** Quits: canarts (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:29:57] *** Quits: Siecje (~Siecje@157.52.5.145) (Remote host closed the connection)
[17:30:39] *** Joins: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net)
[17:30:39] <The-Compiler> Yhg1s: ah!
[17:32:01] *** Quits: julia (~quassel@user/julia) (Ping timeout: 256 seconds)
[17:32:13] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:32:14] *** Joins: jpic (~jpic@82.142.28.30)
[17:32:30] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:32:43] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Read error: Connection reset by peer)
[17:32:56] *** Joins: julia (~quassel@user/julia)
[17:33:36] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:33:52] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:34:03] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:34:04] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Quit: Leaving)
[17:34:16] *** Joins: adeliktas (~adeliktas@i59F5284A.versanet.de)
[17:34:18] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:34:26] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[17:34:38] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[17:34:45] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:35:02] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:35:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:35:14] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:35:19] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:36:23] *** Joins: bloody (~bloody@user/bloody)
[17:36:41] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[17:36:48] <az> does this code to check virtual environment for variables then check values in config file is ok? https://dpaste.org/Booz
[17:37:32] <az> s/does this/is this code/
[17:39:15] <HiccupJul> it seems counter-intuitive to use "i" for more than one purpose
[17:39:54] <Yhg1s> az: os.environ doesn't have anything to do with a *virtual* environment, which usually refers to virtualenv/venv.
[17:40:30] <HiccupJul> also, would your environment variables really have the same name as the variables in your config file?
[17:40:44] <bolovanos_>  anyone using opencv with pycharm?
[17:40:50] <bolovanos_> https://youtrack.jetbrains.com/issue/PY-35691
[17:40:57] <bolovanos_> that trick "from cv2 import cv2" does not work either
[17:41:23] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-09-76-68-189-165.dsl.bell.ca) (WeeChat 3.2)
[17:41:42] *** Joins: irrgit (~irrgit@192.241.175.183)
[17:43:33] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:43:39] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 250 seconds)
[17:43:44] *** v- is now known as vaio
[17:43:49] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:44:09] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[17:44:17] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[17:44:18] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:44:28] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[17:44:29] *** Joins: ExeciN (~ExeciN@user/nicexe)
[17:44:55] *** Joins: AsenMx (~AsenMx@user/asenmx)
[17:45:35] <Ergo^> good morning, my team has just discovered that we are getting data where we expected int(123_1234567) to error our like prior to python3.6
[17:45:47] <Ergo^> any idea if there is a nice way to disable PEP 515 behavior?
[17:45:58] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:46:02] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:46:23] <Yhg1s> Ergo^: what kind of error were you expecting? That's invalid syntax before PEP 515. Are you talking about int("123_1234567") instead?
[17:46:32] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[17:46:52] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:47:32] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Remote host closed the connection)
[17:47:38] <Ergo^> Yhg1s: exactly there are places where we expect ValueError to happen
[17:47:55] <Ergo^> quite a few and hard to identify in big codebase
[17:48:36] <Yhg1s> Okay, then no, there isn't a way to disable it.
[17:48:42] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:49:20] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:50:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:50:16] *** Joins: fearnothing (~fearnothi@user/fearnothing)
[17:50:55] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:51:19] <az> Yhg1s, yeah, I mistakenly said virtual environment I mean os environment variables
[17:51:22] *** Joins: userHeni (~userHeni@37.189.249.86)
[17:51:37] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[17:51:40] <Ergo^> Yhg1s: I'm thinking if we could try to monkeypatch int() (if thats possible)
[17:51:48] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[17:51:49] <Yhg1s> Ergo^: you could write your own int, sure.
[17:51:52] *** Joins: deltab (~deltab@user/deltab)
[17:52:35] *** Joins: xsperry (~xs@user/xsperry)
[17:53:46] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[17:54:03] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[17:54:45] *** Joins: weedmic (~weedmic@5.102.235.240)
[17:56:17] *** Quits: theprophet (~theprophe@85.114.228.184) (Ping timeout: 256 seconds)
[17:56:51] *** Quits: raek (~raek@2.67.243.131.mobile.tre.se) (Ping timeout: 256 seconds)
[17:56:59] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Quit: leaving)
[17:57:22] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[17:57:46] *** Joins: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8)
[17:57:47] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[17:58:41] *** Joins: raek (~raek@2.67.169.254.mobile.tre.se)
[17:59:08] *** Joins: dvyd (~dvyd@2a0d:6fc2:47b0:1800:b5dc:6340:e41e:25a2)
[18:01:02] *** Joins: userHeni (~userHeni@37.189.249.86)
[18:02:03] <Ergo^> Yhg1s: do you know if it possible to overload int function behavior?
[18:02:07] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[18:02:16] <Ergo^> or decorate it
[18:02:24] <Yhg1s> Ergo^: Python doesn't have overloading, no. You can replace builtins.int, but it would be a _really_ bad idea.
[18:02:39] <Yhg1s> (because it would affect all callers to int(), not just the ones you're trying to fix.)
[18:02:44] *** Joins: vit (~vit@chello085216193138.chello.sk)
[18:03:08] *** vit is now known as Guest7318
[18:04:42] <az> HiccupJul, do you suggest something else to have "i" not used more than once?
[18:05:04] <Yhg1s> az: just use a different variable name for the value you take from the os.environ or config dicts.
[18:06:04] <Ergo^> yeah, I think in our case we want to ensure no ints to ever be able to accept a string with underscore
[18:06:07] *** Joins: badsektor (~badsektor@user/badsektor)
[18:06:14] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[18:06:19] *** Joins: arinov (~arinov@176.89.29.127)
[18:06:22] <Ergo^> I guess we will look for the usages and replace with own int :(
[18:06:35] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:07:09] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[18:07:33] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:07:43] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 256 seconds)
[18:07:57] *** Joins: Axy (~Axy@user/axy)
[18:09:12] *** Joins: the_lanetly_052 (~the_lanet@194.135.168.157)
[18:09:25] *** Joins: moog (~moog@107.242.124.157)
[18:10:12] <HiccupJul> i would say just don't use the same variable name for different purposes
[18:10:25] <HiccupJul> might be a good idea to avoid simple things like "i" altogether
[18:10:49] <HiccupJul> tbh, its a bit unclear what your script is meant to be doing. can you post the whole thing, az.
[18:11:03] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[18:12:29] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[18:12:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[18:13:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[18:14:15] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[18:14:56] *** Joins: ska (~ska@user/ska)
[18:15:09] <HiccupJul> maybe you want to make a list of variables that exist in config, and a list that exist in environment?
[18:15:44] <HiccupJul> or a dictionary with the same purpose
[18:15:56] <ska> For large projects with many versions of Python, is there a way to encapsulate the projects using their own build system in their own version of Python? something similar to Shiv for Python namespaces?
[18:16:52] *** Quits: dvyd (~dvyd@2a0d:6fc2:47b0:1800:b5dc:6340:e41e:25a2) (Quit: Client closed)
[18:17:09] <ska> We're now at the point where we have to use the least common version for all the projects, and that is very PITA.
[18:17:23] <hodapp> conda should let you specify which version
[18:17:29] <nedbat> bjs: now you've gotten me thinking about updating that toy to do a parse->ast phase....
[18:17:35] <hodapp> can't recall if virtualenvs do or not
[18:18:36] *** Seto_Kaiba is now known as Hunterkll
[18:19:17] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[18:19:27] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:19:33] *** Quits: weedmic (~weedmic@5.102.235.240) (Quit: Konversation terminated!)
[18:21:50] <ska> So If I have like 3 versions of Python installed and each of my 25 projects are installed in one of those 3 Python versions, will they all play nice together?
[18:21:51] <SnoopJ> ska, tox may be useful if you want automated isolation across multiple versions
[18:23:00] *** Joins: Paddy105 (~Paddy105@user/Paddy105)
[18:24:04] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:24:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:25:00] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:25:16] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[18:25:31] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[18:25:48] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[18:25:55] *** Joins: pepper (~pepper@user/pepper)
[18:26:01] <ham5urg> Has anybody used a cad module? I'm looking for something like openscad in python-only.
[18:26:17] <lericson> there's an openscad generator in python
[18:26:35] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:9285:9698:be15:2e15) (Ping timeout: 252 seconds)
[18:26:38] <dTal> You might be interested in ZenCad https://mirmik.github.io/zencad/en/index.html
[18:27:42] <lericson> just me or is that page not responding?
[18:27:49] <lericson> ah there we go
[18:28:05] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[18:28:12] *** Joins: ld (~a0z1@185.209.196.139)
[18:28:26] <az> HiccupJul, I want the script to check if there is an environment variable. if not use the one set in the config file.
[18:28:30] <bjs> nedbat: :)
[18:28:35] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[18:28:43] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:29:15] *** Joins: odoood (~odoood@2601:c8:c003:a550::5)
[18:29:44] <lericson> dTal: love how there's a random section in russian in the middle of https://mirmik.github.io/zencad/en/geomcore.html
[18:30:11] <dTal> the author is Russian, the docs were originally in Russian
[18:30:12] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:66c1:82a7:41b7:a81d)
[18:30:23] *** Quits: a0z1 (~a0z1@193.27.14.93) (Ping timeout: 256 seconds)
[18:30:44] <dTal> obviously the table got missed somehow
[18:30:48] *** Joins: akk (~akk@174-28-122-47.albq.qwest.net)
[18:31:16] <lericson> as do most code sections
[18:31:21] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[18:33:40] *** Quits: irrgit (~irrgit@192.241.175.183) (Remote host closed the connection)
[18:33:55] *** Quits: adeliktas (~adeliktas@i59F5284A.versanet.de) (Quit: Client closed)
[18:33:57] *** Quits: odoood (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[18:33:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:34:08] *** Joins: dvyd (~dvyd@2a0d:6fc2:47b0:1800:b5dc:6340:e41e:25a2)
[18:34:31] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Quit: This is the hidden truth, the world between the lines.)
[18:34:57] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Quit: guenhael)
[18:35:18] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:35:27] <ska> SnoopJ: If module A compiles with PythonA, and Module B compiles with PythonB, how do tox allow those two modules to work together?
[18:36:07] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[18:36:14] *** Quits: LimeOn (~user@user/limeon) (Quit: .)
[18:36:40] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[18:39:05] *** Quits: chowmeined (~chowmeine@user/chowmeined) (Read error: Connection reset by peer)
[18:39:31] *** Joins: weedmic (~weedmic@5.102.235.240)
[18:39:51] *** Quits: weedmic (~weedmic@5.102.235.240) (Client Quit)
[18:40:53] <nedbat> ska: you can't use those two modules together in the same program.
[18:41:41] *** Joins: magga (magga@ti0036a400-1042.bb.online.no)
[18:43:43] <az> what I was trying to do to check if  config_file = os.environ["config_file"] has value, if not use config_file = config["settings"]["config_file"] so I wrote this: https://dpaste.org/Booz#L13
[18:43:51] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:441e:c15a:a245:7337)
[18:44:22] <han-solo> https://bpa.st/+python
[18:44:51] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[18:45:18] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[18:45:23] <han-solo> `os.getenv('config_file', config['settings'].get('config_file', DEFAULT_PATH_OR_NONE))`
[18:45:30] <han-solo> ugh
[18:46:37] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[18:46:37] *** guenhael1 is now known as guenhael
[18:47:20] *** Joins: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it)
[18:49:26] <zitter> hi all, I'm finding a way to create a Docker container with a Python script that has to run in crontab. My goal is to have both .py script and crontab file (that one with * * * * * * /usr/bin/python3 script.py ) in my current directory so I dont have to create again and again the image when I change script or crontab file. TIA
[18:50:46] *** Joins: zebrag (~chris@user/zebrag)
[18:51:30] *** Quits: grooverman (~grooverma@177.102.119.40) (Remote host closed the connection)
[18:51:49] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:441e:c15a:a245:7337) (Ping timeout: 256 seconds)
[18:53:02] *** Joins: grooverman (~grooverma@177.102.117.95)
[18:53:05] *** Joins: interweb (~interweb@user/interweb)
[18:53:35] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:d5e0:f147:33e0:420f)
[18:53:35] <rindolf> zitter: hi
[18:53:40] *** Parts: Paddy105 (~Paddy105@user/Paddy105) (bye)
[18:53:56] *** Quits: interweb (~interweb@user/interweb) (Client Quit)
[18:54:02] *** Joins: sine (~sine@host109-148-243-130.range109-148.btcentralplus.com)
[18:54:17] <rindolf> zitter: what is the problem?
[18:54:53] *** Joins: tomeaton17 (~tomeaton1@51.195.150.49)
[18:54:53] <sine> hey folks, what is the pdf generator library in python that generates reports and is payware used in financial industry
[18:55:27] <zitter> rindolf, hi. I want to create a container that execute programmatic python scripts using crontab
[18:56:07] <zitter> but I want to define both crontab and scripts on-the-fly i.e. *not* in Dockerfile (when creating image)
[18:56:09] <sine> ahh its reportlab
[18:56:39] *** Quits: sine (~sine@host109-148-243-130.range109-148.btcentralplus.com) (Client Quit)
[18:56:40] <rindolf> zitter: 'man crontab' then
[18:56:50] <grym> zitter: so ADD both of them when you build the image
[18:56:57] <grym> zitter: oh.  or mount them
[18:57:02] <zitter> yep
[18:57:27] <zitter> do you mean using a VOLUME ?
[18:57:30] <grym> mounting the python file is easy; juggling crontab might be somewhat silly
[18:57:56] <zitter> yes, the problem is crontab that I want to override
[18:58:05] *** Joins: pseudonymous (~pseud0@78.143.68.142.static.fibianet.dk)
[18:58:30] <powftw> I never liked relational databases like SQL. I've came across mongodb which is a no SQL, non relational database. It seemed intuitive to me. I was wondering if I can do all the tasks with mongo that's all possible with sqldb.. so, mongo can do anything that's possibly SQL is doing?
[18:58:31] <zitter> but I dont want to override in the container, not in the image
[18:58:54] <grym> you could have an entrypoint that does crontab cron-file.txt && python myfile.py, maybe
[18:59:29] <zitter> yes, it is what I'm trying... with no success :/
[18:59:37] <grym> or just the first part actually, then make cron do its job
[18:59:38] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[18:59:48] <pseudonymous> More Cython, really, but is it really impossible to express something like `char send_buf[sizeof(struct header)+2048]` ? technically I'm trying to define a cdef extern struct which contains such a field.
[19:01:27] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:d5e0:f147:33e0:420f) (Ping timeout: 256 seconds)
[19:01:35] <zitter> All examples I've seen refer to COPY/ADD crontab and py scripts in Dockerfile, aka in image creation
[19:02:00] <grym> zitter: entrypoints can be ~arbitrary code
[19:02:23] <grym> it smells a bit jank to update crontab with a mounted text file at run time, so that we're clear
[19:02:30] <grym> but it shouldn't be impossible
[19:02:55] <zitter> maybe you're right
[19:04:03] <zitter> or maybe using something like this: https://schedule.readthedocs.io/en/stable/
[19:04:20] <grym> you can do it in-process too
[19:04:30] <az> han-solo, so that will check the env variable and get from config file if not there?
[19:05:20] *** Joins: xkuru (~xkuru@user/xkuru)
[19:06:40] <han-solo> correct, given config exists and always have a settings key, if not you can give the DEFAULT_PATH if any or None if you prefer
[19:06:49] <han-solo> not sure if i'm missing any edge cases, maybe
[19:07:02] <az> very useful method, thanks
[19:07:16] <rindolf> powftw: i doubt it can
[19:07:21] *** Joins: dez (uid92154@user/dez)
[19:07:24] *** Quits: rsx (~dummy@ppp-188-174-130-48.dynamic.mnet-online.de) (Remote host closed the connection)
[19:07:37] *** Joins: theprophet (~theprophe@85.114.228.184)
[19:07:47] *** Joins: rsx (~dummy@ppp-188-174-130-48.dynamic.mnet-online.de)
[19:08:42] *** Joins: irrgit (~irrgit@192.241.175.183)
[19:08:47] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::5)
[19:10:15] <grym> powftw: http://jepsen.io/analyses/mongodb-4.2.6
[19:10:51] <powftw> rindolf: why
[19:11:08] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[19:11:21] <han-solo> grym: i think they fixed that in the recent version ?
[19:11:27] <powftw> rindolf: why
[19:11:39] *** Joins: userHeni (~userHeni@37.189.249.86)
[19:11:42] <userHeni> sa
[19:11:58] <powftw> rindolf: why
[19:12:03] <rindolf> powftw: stop
[19:12:06] *** Joins: widp (~user@124.123.106.152)
[19:12:14] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:f0eb:8037:7cd:2630)
[19:12:22] <widp> I am trying to install 'python-lsp-server' , but a get this:
[19:12:22] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[19:12:37] <powftw> rindolf: why
[19:12:50] <widp> 'This error might have occurred since this system does not have Windows Long Path support enabled. You can find information on how to enable this at https://pip.pypa.io/warnings/enable-long-paths'
[19:12:57] *** Quits: rsx (~dummy@ppp-188-174-130-48.dynamic.mnet-online.de) (Quit: rsx)
[19:13:01] <widp> I don't have admin access on this machine, how do I fix this?
[19:13:09] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:f0eb:8037:7cd:2630) (Client Quit)
[19:13:17] <widp> If it wasn't obvious already I am on windows
[19:13:56] *** Joins: arinov (~arinov@176.89.29.127)
[19:14:07] <bjs> widp: are you installing into a virtualenv?
[19:14:08] <rindolf> powftw: 1. i'm not an expert. 2. i think their use cases are different
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:15:38] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[19:15:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:16:17] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 256 seconds)
[19:16:17] *** guenhael1 is now known as guenhael
[19:16:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:17:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:18:17] *** Quits: shad (~shad@user/shad) (Ping timeout: 240 seconds)
[19:18:36] <SnoopJ> ska, what nedbat said; for things that link against Python itself, that module is generally going to be usable only on the Python it was linked against
[19:18:59] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Client Quit)
[19:19:01] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 256 seconds)
[19:19:50] *** Joins: guenhael1 (Thunderbir@gateway/vpn/protonvpn/guenhael)
[19:20:14] <widp> bjs: no
[19:21:08] *** Joins: shad (~shad@user/shad)
[19:21:20] *** Joins: maplefinger (~maplefing@user/lindis)
[19:22:15] *** Joins: userHeni (~userHeni@37.189.249.86)
[19:22:32] *** guenhael1 is now known as guenhael
[19:23:14] *** Parts: userHeni (~userHeni@37.189.249.86) ()
[19:23:14] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:23:46] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[19:23:50] *** Quits: Barones (~Barones@2804:7f3:8988:d62d:da66:4c3c:c4b1:20e8) (Remote host closed the connection)
[19:24:38] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[19:24:50] *** Joins: userHeni (~userHeni@37.189.249.86)
[19:24:55] *** Parts: userHeni (~userHeni@37.189.249.86) ()
[19:25:03] <bjs> widp: it sounds like the final installation location for the files ended up being at a path that was too long. e.g. that len(path_to_install_into)+len(installed_file_path) > 260 (the MAX_PATH for Windows).  A quick check suggests there's no files in python-lsp-server that go over that lenght on their own, so maybe a solution is to install into a venv
[19:25:05] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (Client Quit)
[19:25:19] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[19:25:46] <bjs> because the venv can be at C:/Users/widp/lsp/ which would give more characters for the installed files
[19:25:57] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[19:26:04] <widp> makes sense
[19:26:17] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:26:23] <bjs> could be at*  you can put the venv wherever you want obviously :)
[19:26:39] <widp> I'll try that , thank you bjs
[19:27:06] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 268 seconds)
[19:27:17] *** Quits: flyback (~flyback@2601:540:8201:1e60::8aa3) (Ping timeout: 240 seconds)
[19:27:49] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[19:28:43] *** Quits: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net) (Client Quit)
[19:29:01] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[19:29:10] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:29:19] <hodapp> Are there any einsum ninjas present? Does einsum give a way to add extra dimensions in the output the same way one would use None/np.newaxis?
[19:30:15] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[19:30:31] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[19:30:45] *** Joins: atrigent (~atrigent@c-73-69-68-26.hsd1.ma.comcast.net)
[19:30:51] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[19:31:24] *** Joins: userHeni (~userHeni@37.189.249.86)
[19:31:36] *** Quits: dvyd (~dvyd@2a0d:6fc2:47b0:1800:b5dc:6340:e41e:25a2) (Quit: Client closed)
[19:31:41] <az> I came up with this after han-solo advice. hopefully is better than my previous example: https://bpa.st/H3ZQ
[19:32:03] *** Joins: bolovanos__ (~bolovanos@user/bolovanos)
[19:32:57] *** Quits: whaley (~whaley@2603-6080-a301-33d1-9e7d-d87a-69a3-c65a.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:33:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:33:24] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Ping timeout: 276 seconds)
[19:33:44] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[19:34:37] <BozasPanos> what's the best way to keep record of some values with their timestamps in a db? i tried logs but i'm not quite sure if it;s practical.
[19:34:49] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[19:35:04] <BozasPanos> i need to make a correlation of the old values with new
[19:35:16] *** Joins: knstn (~knstn@ppp-94-66-57-173.home.otenet.gr)
[19:35:21] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[19:35:26] <hodapp> BozasPanos: when you say 'db', must it explicitly be a relational database?
[19:35:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[19:35:50] <BozasPanos> nope,it's not a mandatory to be relational
[19:36:39] <aniketgm> BozasPanos: have you tried looking into MongoDB ?
[19:36:39] <hodapp> because Pandas will gladly handle tabular time-series data
[19:36:45] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:36:50] <hodapp> but it's not exactly a DB
[19:37:06] <aniketgm> it is. it's just not relational
[19:38:34] <HiccupJul> what would be the most efficient way of creating a tool that can serialise a directory structure into multiple formats (different plain text/XML formats, for compatibility with different software)? just serialise it into one "master" format (e.g. my own format using JSON) and then create converters to and from the other formats? that would require writing the output twice, taking up twice the space (albeit the JSON
[19:38:34] <HiccupJul> could be deleted afterwards)
[19:38:55] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-211.dsl.bell.ca)
[19:40:12] *** Joins: flyback (~flyback@2601:540:8201:1e60::8aa3)
[19:40:12] *** Quits: userHeni (~userHeni@37.189.249.86) (Remote host closed the connection)
[19:40:20] *** Quits: armin (~armin@unix.porn) (Remote host closed the connection)
[19:40:46] <HiccupJul> also, my suggested method would seem to require a lot of sort-of-duplicate code, as i'd need to write two converters (one "to" the format" and one "from" the format) for each "speciality" format.
[19:40:58] *** Joins: phonemic (~phonemic@2600:1700:3379:140::30)
[19:41:07] *** Joins: nyah (~nyah@94.6.71.219)
[19:41:09] *** Joins: djapo (~archangel@user/djapo)
[19:44:20] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[19:44:30] *** Joins: jfcaron (~jfcaron@192.252.229.166)
[19:45:13] *** Joins: sudomann (~sudomann@98.219.211.182)
[19:46:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[19:46:53] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 256 seconds)
[19:47:22] <sudomann> I am compiling python3 with the --enable-optimizations flag. Afaik it optimizes based on the profile on the machine its executing on. I am compiling it in a docker image (x86_64 platform) on an m1 macbook (using rosetta arm-x86_64) emulation. Can I expect roughly the same gains as a compilation done on a proper x86_64 machine
[19:47:35] <sudomann> docker container *
[19:47:54] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[19:48:41] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 245 seconds)
[19:49:04] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:671f:f146:9b7e:7b61)
[19:49:23] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[19:50:33] *** Joins: jiffe (~jiffe@mail.nsab.us)
[19:50:50] *** Joins: waynew (~wayne@user/waynew)
[19:51:31] *** Joins: Clackulator (~Clackulat@75.75.210.194)
[19:52:03] <HiccupJul> i guess a comparison for what i'm trying to do would be a converter that can convert between xml, json and yaml
[19:52:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:52:29] *** Joins: Abrax- (~Abrax@user/abrax)
[19:53:03] *** Joins: michele_ (~eraser@user/michele)
[19:53:07] *** Quits: michele (~eraser@user/michele) (Read error: Connection reset by peer)
[19:53:17] <HiccupJul> but hopefully a bit simpler than that
[19:54:15] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 256 seconds)
[19:55:32] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 240 seconds)
[19:55:42] *** Abrax- is now known as Abrax
[19:55:48] *** Joins: junebug (~junebug@2600:1700:3db0:2540:8370:a76b:ff1f:221c)
[19:56:02] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[19:57:02] *** Quits: widp (~user@124.123.106.152) (Read error: Connection reset by peer)
[19:57:03] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:57:06] <phy1729> parsing and serializing are two different tasks, so you need a method to do both
[20:00:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[20:01:47] *** Joins: mozgalom (~mozgalom@213.220.127.153)
[20:02:45] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 256 seconds)
[20:03:04] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:03:19] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 256 seconds)
[20:04:24] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[20:04:31] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[20:04:50] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[20:04:56] *** Joins: pepper (~pepper@user/pepper)
[20:05:07] <Yhg1s> sudomann: yeah, the important parts of the profile are the same on all platforms, really. As long as the compiler is similar enough, it should be fine.
[20:07:05] *** Parts: Reffter (~Reffter@2001:818:dea5:2b00:d4f0:5945:67b0:597) ()
[20:07:29] *** Joins: Archdave (~Archdave2@071-011-159-210.res.spectrum.com)
[20:08:34] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:09:12] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:09:24] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[20:10:18] <HiccupJul> btw, when i said "efficient", i really meant "easiest to maintain" or "least code"
[20:11:51] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:e1ce:d7b:6a8f:f189) (Quit: Leaving)
[20:12:25] *** Quits: jfcaron (~jfcaron@192.252.229.166) (Quit: jfcaron)
[20:12:57] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:13:48] *** Joins: bomb-on (~bomb-on@213.220.127.153)
[20:14:35] <MacGyver> These are not the same things :P
[20:14:49] <MacGyver> The clever oneliners are usually the least maintainable of all.
[20:15:09] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:15:13] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 256 seconds)
[20:15:29] *** Joins: alzgh (~alzgh@user/alzgh)
[20:16:41] *** Joins: chem (~joe@host217-45-168-22.in-addr.btopenworld.com)
[20:17:00] *** Quits: chem (~joe@host217-45-168-22.in-addr.btopenworld.com) (Quit: WeeChat 2.8)
[20:17:37] *** Quits: delvian (~delvian@41.13.224.79) (Ping timeout: 240 seconds)
[20:18:36] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[20:18:40] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb - upgrading)
[20:20:02] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:20:19] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 256 seconds)
[20:20:23] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:21:35] *** Joins: computeiro (~Wender@186.210.226.119)
[20:21:52] *** Quits: aniketgm (~Aniket@49.36.109.33) (Quit: leaving)
[20:21:57] *** Joins: tbcr (~brclark@user/tbcr)
[20:22:01] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 256 seconds)
[20:22:23] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Client Quit)
[20:22:58] *** Joins: Sario (uid356235@fosshost/cdo/Sario)
[20:23:09] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 256 seconds)
[20:24:03] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[20:25:35] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[20:28:17] *** Quits: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr) (Ping timeout: 240 seconds)
[20:29:38] <SnoopJ> "The Python developers are focused on building their own packaging infrastructure and have no interest in providing a single good workflow for distribution packagers." jeez, Michał Górny's recent complaints about Python packaging really swinging for the fences
[20:30:24] <SnoopJ> https://blogs.gentoo.org/mgorny/2021/11/07/the-future-of-python-build-systems-and-gentoo/
[20:31:26] *** Quits: phonemic (~phonemic@2600:1700:3379:140::30) (Ping timeout: 260 seconds)
[20:31:33] *** Quits: zitter (~danilodim@93-57-35-194.ip162.fastwebnet.it) (Quit: Leaving)
[20:31:55] *** Joins: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net)
[20:34:04] *** Joins: horner (~horner@host86-141-1-192.range86-141.btcentralplus.com)
[20:34:37] <SnoopJ> sudomann, you're right about what the flag does, it enables PGO. I'm not sure about the question, though, it probably depends on the quality of the x86_64 emulation you're using
[20:35:17] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Ping timeout: 240 seconds)
[20:35:34] *** Joins: kostkon_ (~androirc@2a02:1388:182:bc03:26df:639a:96e7:3641)
[20:36:25] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:36:30] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[20:37:30] *** Joins: grooverman (~grooverma@177.102.117.95)
[20:37:52] <The-Compiler> SnoopJ: lol the comments
[20:38:06] <The-Compiler> "The quick change of versions in python is a problem. [...] We changed in a year from 2.6 to 3.5,3.6,3.7,3.8,3.9,3.10, and now again to 3.12 ?"
[20:38:35] <The-Compiler> TIL 2008 == 2021
[20:38:53] <SnoopJ> Perhaps "we" means on their end?
[20:39:04] <SnoopJ> I'm just baffled by this notion that the core devs are not taking distros in mind at all, though
[20:40:43] *** Quits: RiFo (~RiFo@user/rifo) (Ping timeout: 256 seconds)
[20:42:00] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[20:42:45] <SnoopJ> The-Compiler, maybe I'm reading too much into the text of the post; I don't disagree that there is not a "single good workflow," although I do find that kind of a curious criticism, because the entire point of build system independence is...erm, build system independence :)
[20:47:33] *** Quits: Ilyu (~quassel@78.202.228.230) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:48:10] *** Quits: ld (~a0z1@185.209.196.139) (Quit: Leaving)
[20:49:34] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:49:49] *** Joins: BlueSky (~BlueSky@user/bluesky)
[20:50:08] *** Quits: kostkon_ (~androirc@2a02:1388:182:bc03:26df:639a:96e7:3641) (Ping timeout: 252 seconds)
[20:50:22] *** Joins: theprophet (~theprophe@85.114.228.184)
[20:50:26] *** Quits: MikZyth (~MikZyth@host-192-156-66-217.spbmts.ru) (Quit: WeeChat 3.3)
[20:51:03] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[20:51:21] *** Joins: holgersson (~quassel@user/holgersson)
[20:52:06] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[20:52:42] <foo> Python tests should create objects and then test that they were created... not reference pre-existing data in the database (which may or may not exist). Correct?
[20:53:31] <phy1729> I like for each test case to get it's own database. This may or may not work in your situation
[20:54:18] *** Joins: zepolen (~zepolen@ppp-94-66-223-207.home.otenet.gr)
[20:56:13] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 240 seconds)
[20:56:42] *** Parts: henistein (~henistein@2001:8a0:fca7:4f01:5e5:357b:e46b:298b) ()
[20:56:44] <SnoopJ> foo, it's hard to come up with universal "shoulds" for testing, but when it comes to data, it's usually better if the test suite doesn't have external dependencies like your pre-existing data.
[20:57:18] <SnoopJ> But OTOH, it's not like you can't shove a dummy DB into your test suite and load it, either.
[20:58:13] *** Quits: renlo (~Renlo_Ren@pool-108-14-112-182.nycmny.east.verizon.net) (Ping timeout: 240 seconds)
[21:00:15] *** Joins: fuze (uid76888@id-76888.lymington.irccloud.com)
[21:00:38] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: Textual IRC Client: www.textualapp.com)
[21:02:19] <fuze> What library should I use to create a graph where the nodes are all permutations of an object with a different weight assigned depending on which object attributes are changed  where the more the nodes are different from the original object the more costly they are to travel to
[21:03:37] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 240 seconds)
[21:04:44] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[21:04:56] <SnoopJ> fuze, NetworkX is a pretty good toolkit for graphs in general, although I'm not exactly sure how I'd represent your problem based on that description.
[21:05:25] <SnoopJ> If you can express the weight computation at node creation time, though, it should be as simple as creating a Node with the weight you computed.
[21:05:37] <grym> that weight sounds like hamming distance, too
[21:05:39] *** Quits: the_lanetly_052 (~the_lanet@194.135.168.157) (Ping timeout: 256 seconds)
[21:05:44] *** Quits: legola (~legola@46.235.101.65) (Remote host closed the connection)
[21:05:46] <grym> or something like it
[21:06:01] *** Joins: sudomann (~sudomann@98.219.211.182)
[21:06:58] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[21:06:59] *** Joins: tmm88 (~tmm88@user/tmm88)
[21:07:57] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::5) (Ping timeout: 240 seconds)
[21:09:46] *** Joins: emf (~emf@2620:10d:c091:480::1:7a0e)
[21:09:54] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:226:6685:3dd4:7093)
[21:10:49] *** Quits: tomeaton17 (~tomeaton1@51.195.150.49) (Quit: Client closed)
[21:10:57] <foo> SnoopJ: thank you.
[21:10:58] <foo> phy1729: thank you
[21:11:06] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:11:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:11:53] <yitz> I've got a parent class P that uses a @property and a @prop.setter. In the child class C, I want to add some checks on @prop.setter. Is there some way to define a C.prop.setter that calls the super().prop.setter?
[21:12:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[21:13:37] *** Quits: tbcr (~brclark@user/tbcr) (Ping timeout: 240 seconds)
[21:13:48] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:14:09] *** Quits: mozgalom (~mozgalom@213.220.127.153) (Quit: SO LONG SUCKERS!)
[21:14:41] <Swayze> https://arnoldgalovics.com/microservices-in-production/
[21:14:44] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:14:45] <Swayze> great readings
[21:15:10] *** Joins: tbcr (~brclark@user/tbcr)
[21:15:26] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[21:15:38] *** Joins: parv (~quass@user/parv)
[21:16:33] <ouestbillie> hey yall im having an issue, Im starting a process with subprocess.Popen("..",shell=True,start_new_session=True) but when I call the kill method on the returned object I still have the processes lying around
[21:16:40] <ouestbillie> any clues where to investigate?
[21:16:51] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[21:17:31] *** Joins: Atque (~Atque@user/atque)
[21:17:41] <SnoopJ> ouestbillie, processes plural? Does that mean what you're calling is spawning other processes?
[21:18:34] *** Quits: tbcr (~brclark@user/tbcr) (Client Quit)
[21:19:54] *** Joins: odoood__ (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f)
[21:19:57] *** Quits: odoood__ (~odoood@2601:c8:c003:a550:fbdc:f2fe:53fa:f37f) (Remote host closed the connection)
[21:20:15] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[21:20:50] *** Joins: reset (~reset@user/reset)
[21:21:22] <ouestbillie> SnoopJ: no sorry not plural
[21:21:28] *** Joins: grooverman (~grooverma@177.102.119.40)
[21:22:02] <ouestbillie> I used plural because I use it in a fixture for pytest and after several runs theres quite a few of them
[21:22:16] *** Joins: Betal (~Betal@user/betal)
[21:22:47] <SnoopJ> darn, I was hoping it was some kind of orphaned process thing. I'm not sure why .kill() wouldn't work, it uses SIGKILL so it should be as fatal as can be if the signal is actually being delivered.
[21:23:53] <ouestbillie> SnoopJ: me too, thats what I investigated first, but I have an intuition it has something to do with the start_new_session parameter
[21:24:25] <ouestbillie> could it be that the returned object by Popen has no handle on the process started with those options?
[21:24:32] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:24:34] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:25:16] <BozasPanos> before i create a mongo db.do i need to register a user in mlab?
[21:25:46] <SnoopJ> ouestbillie, it could be related, but I doubt starting a new session would disconnect it entirely from the Popen object, it should still know the pid I think? It's "just" calling setsid()
[21:27:34] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df047-236.dhcp.inet.fi) (Quit: Leaving)
[21:28:00] <ouestbillie> SnoopJ: yeah intuitively id say so but the doc is not great in that regards
[21:28:41] <SnoopJ> ouestbillie, well, the docs say that it calls setsid() before starting the process, and if it doesn't have an accurate PID that should be easy to check. I'm not sure if there's some POSIX nuance there that would block the SIGKILL, but it seems suspect
[21:29:46] <ouestbillie> SnoopJ: I mean im on RHEL should be as vanilla as it gets, gonna try to compare pids again, i havent looked into this issue in a while (our test discpline is not the greatest at work ¯\_(ツ)_/¯)
[21:30:52] <SnoopJ> ouestbillie, seeing a whittled-down reproduction would probably help
[21:30:59] <ouestbillie> SnoopJ: ahh from the doc: Popen.pid Note that if you set the shell argument to True, this is the process ID of the spawned shell.
[21:31:42] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:53f:e301:83a6:4761)
[21:31:44] <SnoopJ> hmm, and maybe start_new_session is effectively disowning the process?
[21:32:08] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[21:32:42] <SnoopJ> shell=True seems to mostly create headaches, I can't recall a time I've absolutely needed it
[21:33:02] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:33:17] *** Quits: pseudonymous (~pseud0@78.143.68.142.static.fibianet.dk) (Ping timeout: 240 seconds)
[21:34:33] <ouestbillie> SnoopJ: well I need it because the process its launching is gonna talk with the werkzeug test client over a named pipe, I couldn't figure out an elegant way to do this without entering deadlocks where one waits for the other
[21:34:47] <ouestbillie> SnoopJ: probably disowns gonna try to find that out
[21:35:35] *** Quits: BozasPanos (~VaniaPy@46.12.245.39.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[21:35:37] *** Quits: bolovanos__ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:35:46] *** Joins: ham5urg_ (~ham5urg@p5ddfd13d.dip0.t-ipconnect.de)
[21:36:05] *** Quits: tobybl_ (~tobybl@213.31.132.151) (Remote host closed the connection)
[21:37:34] <SnoopJ> yitz, looks like you have to go a little out of your way to do that: https://bpa.st/TYJA (I recommend looking at the linked issue on bpo, it has a good amount of discussion)
[21:38:13] *** Quits: ham5urg (~ham5urg@p200300d16716cd0054a4e809045364d2.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:40:37] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[21:40:47] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[21:40:53] *** Joins: naranja (~orange@user/orangeboxcutter)
[21:42:52] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:43:14] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[21:43:51] *** Quits: grooverman (~grooverma@177.102.119.40) (Remote host closed the connection)
[21:44:04] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[21:44:35] <ouestbillie> SnoopJ: Im not sure I understand the code in the bpo
[21:44:57] *** Joins: grooverman (~grooverma@177.102.117.95)
[21:44:59] <ouestbillie> does the child parent relationship of process match with the class one?
[21:45:33] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:47:33] *** Quits: sfields (~sfields@2605:a601:adea:7a00:2b70:ef9e:5d20:bc77) (Read error: Connection reset by peer)
[21:49:14] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[21:49:37] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:66c1:82a7:41b7:a81d) (Remote host closed the connection)
[21:49:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:51:28] <SnoopJ> ouestbillie, that paste was replying to a different question about inheritance and @property, it doesn't have anything to do with processes
[21:51:45] <yitz> SnoopJ: thank you
[21:51:48] <ouestbillie> oh woups thanks lol
[21:53:08] *** Joins: delvian (~delvian@41.13.198.193)
[21:53:34] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[21:56:48] *** Joins: Fiji_ (~Fiji@user/fiji)
[21:58:35] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[21:59:14] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[22:00:45] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:01:21] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[22:01:35] *** Quits: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[22:02:11] *** Joins: roxfan (roxfan@29.38-136-217.adsl-dyn.isp.belgacom.be)
[22:03:31] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:03:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Client Quit)
[22:04:06] *** Quits: llanhmod (~personnel@user/domhnall/x-2887755) (Ping timeout: 245 seconds)
[22:04:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[22:06:23] <HiccupJul> MacGyver: good point. easiest to maintain then.
[22:06:24] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:06:35] *** Joins: palasso (~palasso@user/palasso)
[22:07:13] <aphysically> whoa big day today
[22:07:23] <aphysically> mypy 0.920 released (has been blocked for a few months!)
[22:07:28] *** Quits: bomb-on (~bomb-on@213.220.127.153) (Read error: Connection reset by peer)
[22:07:52] <aphysically> I haven't tested how much 3.10 typing features it unbreaks
[22:08:01] *** Joins: bomb-on_ (~bomb-on@213.220.127.153)
[22:08:02] <aphysically> (not necessarily supports, just no longer syntax errors on)
[22:08:15] *** Joins: xheimlich (~xheimlich@179.218.1.150)
[22:08:48] <xheimlich> oh man. I think I have my first valid use of inheritance in like 5 or 6 years of seriously using Python.
[22:09:11] <xheimlich> (I mean inheritance between my own classes.)
[22:09:51] *** Quits: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net) (Remote host closed the connection)
[22:10:15] <xheimlich> It's like there's  this class that's already in use in many places. call it the Gardener class.
[22:10:32] <xheimlich> but now I have a Gardener that has a PhD.
[22:11:06] <xheimlich> does everything a Gardener can, but also does other stuff and combine the data to garden better.
[22:11:33] *** Joins: BlueSky_ (~BlueSky@user/bluesky)
[22:11:42] <xheimlich> now, it's kind of absurd to stuff all the phd stuff in the vanilla Gardener. The interface has to change a little even.
[22:12:39] <xheimlich> But I can, with the help of the Gods of Rain and Thunder, inherit the whole gardener, write the quantum rocket science stuff and still garden with knowledge of the outcomes.
[22:14:02] *** Quits: BlueSky (~BlueSky@user/bluesky) (Ping timeout: 240 seconds)
[22:14:10] <xheimlich> this should have a pattern name besides just "inheritance". Like "Superman".
[22:14:53] <xheimlich> Spiderman, spiderman, does whatever a spider can.
[22:15:21] *** Quits: Allegretto (~allegrett@84-236-53-184.pool.digikabel.hu) (Ping timeout: 256 seconds)
[22:15:50] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:16:27] *** Joins: ThePhilgrim (~ThePhilgr@78-69-18-227-no49.tbcn.telia.com)
[22:16:39] *** Joins: Jong (~Jong@2620:10d:c090:400::5:3f74)
[22:16:39] *** Joins: preston (~preston@2600:6c5a:473f:6494::15d3)
[22:17:22] *** Joins: dvyd (~dvyd@2a0d:6fc2:47b0:1800:b5dc:6340:e41e:25a2)
[22:17:31] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[22:17:37] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Reconnecting)
[22:17:55] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:18:02] *** Joins: llanhmod (~personnel@user/domhnall/x-2887755)
[22:18:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:19:00] *** Joins: Xano (~Xano@2a00:23c4:4204:700:686f:1d55:eb3a:17d1)
[22:19:19] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[22:19:38] *** Joins: tomeaton17 (~tomeaton1@51.195.150.49)
[22:19:47] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[22:19:59] <Xano> I'm making some existing I/O-heavy code concurrent, and am running into the dreaded OSError for too many open files. Are there any ready-made solutions or common patterns for programs to handle this gracefully, maybe wait until some files are closed?
[22:20:12] <emerent> xheimlich: >The interface has to change a little even
[22:20:13] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 240 seconds)
[22:20:16] <TML> xheimlich: Well, it's obviously difficult to provide advice in such an abstract situation, but to me that sounds more like a case for a mixin than inheritance
[22:20:49] <emerent> Is the PhdGardener still a full gardener? Does it fulfill Liskov substitution principle?
[22:20:55] <xheimlich> emerent: yes.
[22:21:16] <xheimlich> Spiderman (in this version) does whatever a spider can. Like, he can shrink and crawl etc.
[22:21:33] <xheimlich> but, also turns into a person. Person brain makes him a smarter spider.
[22:21:48] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (zirconium.libera.chat (Nickname regained by services)))
[22:21:48] *** vinleod is now known as vdamewood
[22:22:07] <han-solo> Xano: do you have a sample we could look at ?
[22:22:18] <xheimlich> Reads books on insects, then positions his webs in better places.
[22:22:20] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Quit: guenhael)
[22:22:49] <xheimlich> the opposite isn't true, though.
[22:23:51] *** Fiji_ is now known as Fiji
[22:23:56] <xheimlich> (Ok, let me put some meat on this. One class is a stock portfolio generator, itself leverages many classes as attributes -- has_a, not is_a.
[22:24:01] <Xano> han-solo, Not really. Essentially my code as well as some dependencies call open() and aiofiles.open() a lot as part of processing thousands of tasks, which works fine on most systems when run serially, but when making the tasks processed concurrently the program exceeds the OS's open file resource limit.
[22:24:23] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[22:24:34] <Xano> SO far I've been playing with the idea of catching OSError and waiting for a bit before trying again
[22:24:35] <han-solo> not closing the file handles ?
[22:24:39] <xheimlich> The second class uses macroeconomic data to improve on the stock portfolio stuff. But then it needs external datasets, uses different kinds of statistical models, etc.)
[22:24:52] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[22:24:56] <Xano> han-solo, Oh they're all closed perfectly fine, and aren't kept open for longer than necessary. There are just enormously many file reads and writes
[22:24:59] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:25:46] <han-solo> does it have to open `ulimit -n` files ?
[22:25:51] <han-solo> at the same time
[22:25:57] <xheimlich> the spider class is already really complicated. Depends on many classes across many files. But always on a "... has a X" basis.
[22:26:30] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[22:26:45] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[22:28:03] <Xano> han-solo, It doesn't have to do so at the same time which is why I'd be happy for open() and aiofiles.open() to block while waiting for a successful file descriptor acquisition
[22:28:40] *** Joins: Allegretto (~allegrett@94-21-199-65.pool.digikabel.hu)
[22:28:56] *** Joins: digicyc (aarona@user/digicyc)
[22:29:05] <xheimlich> I've heard this referred as composition not inheritance. It's always been easier to reason about for me. But now it doesn't make much sense to make a PhD Gardener that has a Gardener.
[22:30:38] <han-solo> Xano: i assume you could some form of semaphore to limit the concurrency ?
[22:31:03] *** Quits: magga (magga@ti0036a400-1042.bb.online.no) (Remote host closed the connection)
[22:31:58] *** dcaro is now known as dcaro_ooo
[22:32:34] <Xano> han-solo, Yeah I'm currently experimenting with overriding open() and aiofiles.open() with a wrapper that keeps a counter and retries opening the file until it works but for open() that won't work because I can't asynchronously sleep in a synchronous function, and sleeping synchronously blocks, so other async calls never get a chance to close their files.
[22:32:37] *** Quits: delvian (~delvian@41.13.198.193) (Ping timeout: 240 seconds)
[22:33:18] <han-solo> or i guess the quick and dirty solution would be to just update the ulimit ? but that may not be optimal, i guess
[22:33:24] <Xano> But it feels hacky I'd have to override these functions. Like the problem is common enough I'd expect I'm not the first one trying to work around it
[22:33:36] *** Joins: de-facto_ (~de-facto@user/de-facto)
[22:33:49] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[22:33:49] <Xano> ulimit is off limits because this is distributable software and I can't expect users to change their system settings
[22:33:59] *** Quits: de-facto (~de-facto@user/de-facto) (Remote host closed the connection)
[22:34:02] <han-solo> right
[22:34:12] <xheimlich> anyway, re: Liskov, I never understand what Liskov's all about.
[22:34:16] <Xano> And even if they could, the amount of tasks is theoretically infinite so the fact that there is any limit at all is theoretically problematic
[22:34:34] <han-solo> right, so best to limit the concurrency in the application
[22:34:34] <xheimlich> my PhDGardener can be deployed in lieu of any vanilla gardener to cut your lawn or whatever.
[22:34:44] <xheimlich> But, he does not do it in the same way.
[22:35:05] *** Joins: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec)
[22:35:15] *** Joins: ubert (~Thunderbi@p200300ecdf1abb0334f3944fefcb567c.dip0.t-ipconnect.de)
[22:35:30] <han-solo> Xano: though does the writes have to to a file ? can be db solve this ?
[22:36:06] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[22:36:11] <xheimlich> someone who picks a phdgardener may find the species of his lawn completely changed because weather adequacy.
[22:36:14] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[22:37:06] <Xano> han-solo, Yes, the goal of the program is to produce files, realistically tens or hundreds of thousands
[22:37:13] <parv> SnoopJ, re https://bpa.st/TYJA -- why is there a difference between lines 18 & 24 in calls to super()? Would they change if not using properties?
[22:37:21] <han-solo> Xano: Okay
[22:37:26] <Xano> han-solo, In fact it operates entirely without a database
[22:37:45] *** de-facto_ is now known as de-facto
[22:38:14] <han-solo> i'm not too sure about what the goto thing here, but i would maybe just use a semaphore to limit that
[22:38:20] *** Joins: magla (~gelignite@55d46610.access.ecotel.net)
[22:38:27] <han-solo> others may have better suggestion so hang around for a bit
[22:39:12] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[22:39:46] <xheimlich> or -- you order a band for a wedding. but you hire a berklee band instead, so when they play the songs you requested they play wacky abstract jazz covers that horrify your guests.
[22:39:52] <bjs> parv: doesn't the link above line24 in that paste not explain it?
[22:40:35] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[22:40:41] <han-solo> Xano: another thing is maybe, keep the data is some other structure and write once when it have final format ?
[22:40:51] <xheimlich> so is this Liskov? they do satisfy every item in the contract, but everything that's not in black ink is up for grabs.
[22:41:07] <SnoopJ> bjs, parv it doesn't seem to explain the 'why' particularly well, but I got the sense that dealing with descriptors like this is just not something super() knows how to do
[22:41:28] <SnoopJ> which is why you have to hand-hold it and access the descriptor on the class, passing in the instance
[22:41:37] <bjs> Well the "why" is becase,  super() objects do not support property setters.  so super().foo works but super().foo = 42 does not (if "foo" is a property)
[22:41:48] <Xano> han-solo, It's a static site generator, so that's not possible without changing the site it produces, because one web page requires one HTML file... :') (good suggestion though)
[22:41:50] <SnoopJ> bjs, I think it generalizes to descriptor setters in general, right?
[22:41:58] <bjs> SnoopJ: yes
[22:42:14] <parv> bjs: Does that mean the long version on line 24 could be used on line 18 but not necessarily needed?
[22:42:28] <SnoopJ> parv, right
[22:42:30] <bjs> parv: no
[22:43:10] <SnoopJ> bjs, hm? you could certainly do all that __class__ and instance hand-holding and call .fget() instead
[22:43:14] <bjs> parv: super() on its own is like super(ThisClassName, self),  but the second form is not like that
[22:43:16] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Remote host closed the connection)
[22:43:24] <bjs> SnoopJ: oh, yes you can do that
[22:43:30] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[22:43:36] <SnoopJ> Maybe we read that question differently, I thought that's what they were asking about
[22:44:22] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[22:44:58] <parv> I meant to address only the super() call, not getting or setting a value.
[22:45:03] <SnoopJ> parv, to expand on what bjs said: the `super(self.__class__, self.__class__)` spelling is bound to the *class* rather than to the *instance*
[22:45:34] <SnoopJ> (which is a fairly weird thing you have to do here because a super() bound to the instance just doesn't support descriptors this way, I have no idea why)
[22:45:38] <parv> SnoopJ, Ah.
[22:45:47] *** Joins: Pickchea (~private@user/pickchea)
[22:45:52] *** Joins: c4017w (~c4017@209.52.68.8)
[22:46:03] *** Quits: c4017w (~c4017@209.52.68.8) (Quit: Leaving)
[22:46:17] <SnoopJ> so that more verbose spelling is retrieving the base class, accessing the relevant descriptor, and passing in the instance in a call
[22:46:19] *** Joins: c4017w (~c4017@209.52.68.8)
[22:46:33] <parv> SnoopJ, bjs, Thanks
[22:47:07] *** Quits: preston (~preston@2600:6c5a:473f:6494::15d3) (Remote host closed the connection)
[22:47:12] <bjs> parv: the super(self.__class__, self.__class__) thing is a really weird edge case, the point is that it's it's getting the parent class *of the type of the instance*, and then re-starting the attribute lookup from there (to get the property *object*)
[22:47:26] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Remote host closed the connection)
[22:47:31] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[22:47:41] <SnoopJ> yea, to avoid the whole "you can't get there from here" problem that makes `super().foo = 42` fail there
[22:47:48] <bjs> since it might be a fancy property on the instance, but to the class it's just a normal attribute
[22:48:06] *** Quits: pepper (~pepper@user/pepper) (Remote host closed the connection)
[22:48:12] <SnoopJ> you could do `super(...).foo.fset(self, val)` if you were sure it was a property, but I thought dabeaz's suggestion was a nice one
[22:48:27] *** Joins: pepper (~pepper@user/pepper)
[22:49:01] *** Parts: llanhmod (~personnel@user/domhnall/x-2887755) ()
[22:49:03] <parv> Thanks much
[22:50:00] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[22:50:01] <c4017w> Is there something like a 'reverse semaphore' in Python? I need one thread to wait until all other threads are done using a resource
[22:50:29] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 256 seconds)
[22:51:15] *** Quits: ovnicraft (~ovnicraft@ftth-179-49-44-28.cue.celerity.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:51:52] *** Quits: garo (~garo@ptr-1pln5puxqxmejxq9kws.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[22:51:59] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[22:52:11] *** Joins: guenhael1 (~Thunderbi@2a01cb008c3d5800793a285520014903.ipv6.abo.wanadoo.fr)
[22:52:13] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 240 seconds)
[22:52:13] *** guenhael1 is now known as guenhael
[22:52:13] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[22:53:02] *** Joins: aniketgm (~Aniket@2405:201:1007:4e71:c1d:1ac6:7baf:8a43)
[22:54:10] <Dev0n> hey, if I have worker_connections set to 4096 on nginx, what would be the correct setting on uwsgi to accept this number of connections?
[22:54:17] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 240 seconds)
[22:54:35] <bjs> c4017w: maybe you want a counter (how many threads still working) and a Condition to wait_for the counter to be 0
[22:54:57] <Dev0n> it seems like the uwsgi listen option is to do with connection backlog (somaxconn) and not the active number of connections it can work with?
[22:55:54] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[22:57:06] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:57:30] <c4017w> bjs, cool I didn't know about wait_for. I'll wrap all that into a context manager class
[22:57:37] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 240 seconds)
[22:58:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:58:08] *** Joins: NovaKe1n (~novake1n@user/NovaKe1n)
[22:58:19] *** Quits: tomeaton17 (~tomeaton1@51.195.150.49) (Ping timeout: 256 seconds)
[22:58:26] <SnoopJ> c4017w, bjs Barrier might also apply if the other threads themselves are waiting, but yea Condition with a counter seems probably the most relevant
[22:58:48] *** Quits: NovaKe1n (~novake1n@user/NovaKe1n) (Client Quit)
[22:59:19] *** Joins: BobShoes (~pi@2600:1700:1d51:6680:f31b:6f5f:e67d:617b)
[22:59:25] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.26)
[23:00:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:01:10] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:01:10] *** Quits: dvx (~dvx@5.181.92.64) (Quit: dvx)
[23:02:17] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[23:02:44] *** Joins: tomeaton17 (~tomeaton1@92.234.2.175)
[23:03:00] *** Joins: nomic (~nomic@51.52.78.152)
[23:04:41] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[23:04:54] *** Joins: qlixed (~qlixed@181.44.129.13)
[23:05:40] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[23:06:19] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:06:27] *** Quits: p-i-_ (~Ohmu@223.206.145.10) (Read error: Connection reset by peer)
[23:06:56] *** Quits: BobShoes (~pi@2600:1700:1d51:6680:f31b:6f5f:e67d:617b) (Quit: WeeChat 2.8)
[23:07:01] *** Joins: p-i- (~Ohmu@223.206.145.10)
[23:07:29] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[23:07:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:08:35] *** Quits: waynew (~wayne@user/waynew) (Quit: WeeChat 3.0.1)
[23:08:43] <SnoopJ> Steering council election closed today: https://discuss.python.org/t/2022-python-steering-council-election-results/12581
[23:09:07] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[23:09:19] *** Joins: bpillman (~bpillman@ip70-179-135-215.fv.ks.cox.net)
[23:11:58] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:12:22] *** Joins: ELFrederich (~ELFrederi@siemens-industry-software-inc-216-196-155-202.static.fuse.net)
[23:13:09] *** Quits: sudomann (~sudomann@98.219.211.182) (Ping timeout: 256 seconds)
[23:13:11] <ELFrederich> I've got a zipfile in memory from a requests.get() call.  How can I use it with the zipfile library?  Seems zipfile.ZipFile wants a filelike object, but my requests's resp.content is bytes
[23:13:31] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.26) (Read error: Connection reset by peer)
[23:13:41] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:13:59] *** Joins: sudomann (~sudomann@98.219.211.182)
[23:14:14] <SnoopJ> ELFrederich, dump those bytes into an io.BytesIO, which is filelike
[23:14:50] <ELFrederich> SnoopJ, thanks... alternative would be to get requests to dump it to a file, but I think better to work in memory in this case
[23:17:29] <bpillman> Hey all, working on a project to send an email out based off of a temp probe on my r-pi. I have it working in so much as it will send the email if I don't include the temperature variable in the email. Hoping someone could take a look and see what I am missing. Here is the paste: https://bpa.st/W26A
[23:18:20] <bjs> SnoopJ: congrats to Yhg1s
[23:18:35] <SnoopJ> many congrats and thanks indeed :)
[23:19:03] <bjs> (and to the others, even if they don't happen to visit here :P)
[23:21:04] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[23:21:49] <SnoopJ> heh heh
[23:22:13] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 256 seconds)
[23:23:16] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[23:23:49] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[23:24:24] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[23:24:38] <c4017w> bpillman, line 10, readtemp does not exist. Maybe you meant read_temp(), but that returns a number, which can not be added to a string, so you should use string formatting to insert it into the string
[23:25:02] *** Quits: tmm88 (~tmm88@user/tmm88) (Ping timeout: 260 seconds)
[23:25:03] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[23:26:11] *** Joins: nomic2 (~nomic@185.192.71.70)
[23:26:37] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:cc32:6092:bdbf:ae3b)
[23:27:53] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 256 seconds)
[23:28:29] <bpillman> c4017w, Thanks. I'll check it out. Appreciate the pointer.
[23:28:53] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:53f:e301:83a6:4761) (Quit: Client closed)
[23:29:29] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[23:29:37] *** Quits: nomic (~nomic@51.52.78.152) (Ping timeout: 240 seconds)
[23:29:41] *** nomic2 is now known as nomic
[23:29:44] *** Quits: tomeaton17 (~tomeaton1@92.234.2.175) (Quit: Client closed)
[23:33:02] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e546:f9c1:f549:4c7e:0:281) (Quit: Leaving)
[23:33:08] *** Quits: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f) (Quit: Client closed)
[23:33:38] *** Joins: adeliktas (~adeliktas@2001:16b8:226f:d100:e165:6b49:a559:970f)
[23:38:40] *** Joins: Seto_Kaiba (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[23:38:47] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Killed (NickServ (GHOST command used by Seto_Kaiba)))
[23:38:49] *** Seto_Kaiba is now known as Hunterkll
[23:39:49] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:40:03] *** Joins: delvian (~delvian@41.13.220.17)
[23:41:28] *** Joins: shad (~shad@user/shad)
[23:41:40] *** Joins: teut (~teut@2401:4900:1c30:1de4:6df0:844a:8dde:d751)
[23:44:51] <Evolver> What is a good way or package for getting a lock (across multiple instances of Python on a single machine)?
[23:45:41] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[23:45:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:46:10] <teut> you want synchronization between processes Evolver?
[23:46:11] *** Joins: cognoscente (~cognoscen@75-164-195-169.ptld.qwest.net)
[23:46:23] *** Joins: thisdude (~thisdude@pool-72-65-50-80.bflony.fios.verizon.net)
[23:46:49] *** Joins: sazawal (~sazawal@122.161.88.88)
[23:46:49] <Evolver> teut: yes, just a basic lock. Not via multiprocessing because I've entirely independent instances.
[23:47:08] <teut> thats called IPC not lock
[23:47:13] <Evolver> meh
[23:47:25] <Evolver> It's not IPC if the system locks it
[23:48:14] *** Joins: gothicserpent (~gothicser@204.152.215.249)
[23:48:44] <teut> i heard locks with threads , I do not know about locks between processes , sorry
[23:49:00] <SnoopJ> one way to do it is with a file
[23:49:13] <teut> but you can signal events via IPC
[23:49:35] <Evolver> SnoopJ: yeah there are some packages that do it with a file
[23:49:44] <Evolver> building upon `fnctl` or otherwise
[23:50:02] <SnoopJ> teut, IPC means any mechanism that allows processes to communicate, it doesn't refer to any particular method.
[23:51:06] <SnoopJ> Evolver, right, it's a fairly natural solution since filesystems already have their own locking
[23:51:10] <teut> ya, I mean you can send events between multiple scripts and on receiving event can do some task
[23:52:10] <Evolver> teut: if I want to complicate it, I can make it 10x more complicated than that, but that's not the point
[23:52:18] <Evolver> The point is to simplify.
[23:52:26] <teut> whats the higher goal?
[23:52:34] <Evolver> There is this thing called the OS, it has abstractions
[23:52:35] <teut> higher level*
[23:52:37] <bjs> Evolver: are you using multiprocessing?
[23:52:40] <Evolver> bjs: no
[23:52:42] <bjs> (the library)
[23:53:02] *** Joins: buzzard (~quassel@209.58.146.149)
[23:53:17] <Evolver> bjs: For you I can take the question to the next level. I want a package to do this globally across machines
[23:53:34] <Evolver> so some people use dynamodb in AWS for it, but I don't have that
[23:53:48] <bjs> Evolver: hmm, this suddenly becomes a lot harder when you distribute the machines
[23:53:53] *** Joins: weedmic (~weedmic@109-186-195-63.bb.netvision.net.il)
[23:54:00] <bjs> well it becomes a black hole of time to add features as machines drop off and such
[23:54:22] <bjs> c.f. the consensus problem
[23:54:41] <Evolver> I think a central server would be needed to simplify it
[23:55:14] <teut> what they are saying is what happens in an event driven system
[23:55:22] *** Quits: DaNeenjah (~jake@adsl-74-230-7-13.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[23:55:27] <Evolver> teut: it's not an event driven system that i'm building
[23:55:29] <teut> microservices and they use kafka
[23:55:31] *** Quits: BlueSky_ (~BlueSky@user/bluesky) (Quit: Leaving)
[23:55:32] <Evolver> so forget events
[23:55:35] <bjs> ELFrederich: having some kind of leader is common in these solutions
[23:55:37] <bjs> Oops
[23:55:39] <bjs> Evolver: having some kind of leader is common in these solutions
[23:55:54] <Evolver> ya
[23:56:26] <Evolver> but I wish some nice person from Nebraska would host a free service for it that the world can build upon
[23:56:50] <bjs> Evolver: services aren't free to run so they never last long :(
[23:57:03] *** Joins: esther (~esther@24-155-112-236.dyn.grandenetworks.net)
[23:57:03] <phy1729> Sounds like raft or paxos
[23:57:09] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:57:13] <bjs> but a fixed leader that has a process with some database running on it, is not too onerous
[23:57:27] <Evolver> phy1729: afaik, raft and paxos and blockchain are needed if there is no leader
[23:57:28] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.145-10.dynamic.3bb.co.th)
[23:58:14] <phy1729> raft is a leder election protocol; paxos isn't just that but everyone uses it as suck; blockchains should mostly die in a fire
[23:58:15] <bjs> yeah,  they assume the leader can die but the system should continue
[23:58:24] <phy1729> as such*
[23:59:46] *** Quits: gothicserpent (~gothicser@204.152.215.249) (Quit: Leaving)
