[00:00:37] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:4ce4:2fb3:3e73:c605)
[00:00:38] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:4ce4:2fb3:3e73:c605) (Changing host)
[00:00:38] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:09:03] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[00:15:45] *** Joins: gehn (~gehn@user/gehn)
[00:21:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:24:09] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:28:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[00:38:25] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[00:38:50] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[00:40:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:46:46] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[00:48:40] *** Joins: noarb (~noarb@user/noarb)
[00:52:57] *** Joins: kn07_ (~kn07_@86.121.166.134)
[00:56:12] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:4e4b:92f9:df67:5a4d)
[00:58:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:05:01] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[01:05:14] *** Joins: gehn (~gehn@user/gehn)
[01:12:56] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:28:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:32:34] *** Joins: oknenavin (~nomo@95.87.208.95)
[01:35:23] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[01:36:02] *** Quits: paul424 (~tom@ip-5-172-234-134.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:38:14] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[01:38:27] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[01:40:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:07] *** ChanServ sets mode: +v npaperbot
[01:44:13] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[01:46:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[01:49:46] *** Joins: proller (~p@2a02:6b8:b081:8822::1:2)
[01:50:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:53:50] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[01:56:30] *** Quits: proller (~p@2a02:6b8:b081:8822::1:2) (Ping timeout: 250 seconds)
[02:02:26] *** Joins: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu)
[02:05:25] *** Quits: p-i-_ (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 256 seconds)
[02:06:33] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 256 seconds)
[02:08:45] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:09:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[02:11:51] *** Joins: markong (~kvirc@213.146.188.203)
[02:14:47] *** Quits: magla (~gelignite@55d475f4.access.ecotel.net) (Quit: Stay safe!)
[02:24:39] *** Joins: mintograde (~mintograd@47.201.5.61)
[02:31:07] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[02:34:20] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:34:37] *** Quits: etolier_ (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[02:35:20] <RandomReader> what?! rpav how dare you impugn upon the wonderfulness that is POSIX, where int is the One True Type at the root of all important concepts, and clearly all that any *reasonable* programmer shall ever need
[02:35:51] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[02:36:48] *** Quits: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011) (Ping timeout: 250 seconds)
[02:37:47] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:39:42] *** Joins: ferdna (~ferdna@user/ferdna)
[02:59:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:01:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:91a1:7dca:589a:aaae) (Ping timeout: 240 seconds)
[03:01:18] *** Quits: etolier (~somewhere@122-199-44-127.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[03:02:32] *** Joins: etolier (~somewhere@122-199-44-127.ip4.superloop.com)
[03:03:40] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 250 seconds)
[03:13:03] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[03:13:47] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[03:17:01] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[03:32:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:33:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[03:40:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[03:46:25] <thad_the_man> RandomReader: What you mean you don't need char and *?
[03:49:32] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[03:55:16] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[03:56:33] <Hello71> actually i don't think a single new posix api uses int. posix stans typedefs
[03:57:03] <PJBoy> anything that uses file descriptors?
[03:57:25] <Hello71> that's not really new
[03:57:37] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:4e4b:92f9:df67:5a4d) (Remote host closed the connection)
[03:57:38] *** Joins: EdFletcher (~PKD@user/edfletcher)
[03:58:07] <Hello71> if posix was specifying file descriptors in 2022 it would probably be written posix_file_descriptor_t
[03:59:18] <Hello71> see: posix_spawn_file_actions_t, pthread_barrierattr_t...
[03:59:45] <kalven> typedef posix_file_descriptor_t int;
[04:01:22] <Hello71> better than namespace posix { template<[... 5 lines ... ]> class open_file_descriptor { [ ... 100 lines ... ]
[04:02:24] <kalven> depends on the goal
[04:03:03] <Hello71> i don't like posix either but at least try to make accurate criticisms
[04:14:17] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[04:14:27] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:15:46] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[04:19:58] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:21:27] *** Joins: Youmu (uid129469@user/condy)
[04:22:44] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:33:43] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea)
[04:34:00] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[04:36:44] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9f5:eb51:8b61:96ab) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:47:29] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[04:47:31] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:50:21] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[04:52:28] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[04:56:57] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[04:58:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:00:24] *** Joins: greyblue9_ (sid500829@id-500829.ilkley.irccloud.com)
[05:00:28] *** Joins: psb___ (sid500598@id-500598.ilkley.irccloud.com)
[05:00:37] *** Joins: VShell (~shell@user/shell)
[05:01:15] <rpav> RandomReader: ðŸ¤”
[05:01:48] *** Joins: comrad_ (~quassel@holarse/comrad)
[05:02:01] <rpav> well i mean, that wasn't my intent, but it probably applies to whatever degree posix is still relevant
[05:02:35] <rpav> even when it was i don't recall it being thought of as the end-all, more like the common subset of things you could sortof depend on so i dunno ;)
[05:02:47] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[05:02:52] *** Joins: tbe_loki2 (~loki@loki.codes)
[05:02:53] *** Joins: nolyc_ (~nolyc@tinodidriksen.com)
[05:02:54] *** ChanServ sets mode: +v nolyc_
[05:03:21] <rpav> anyone used a decent earley-style parser generator for C++
[05:03:42] <rpav> or other things, i'm not sure what the cool kids do for parsing in 20xx
[05:04:10] <rpav> or lexing
[05:04:12] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[05:04:27] *** Joins: miklcct_ (quasselcor@vps.miklcct.com)
[05:04:52] *** Joins: Cheaterm1n (~Cheaterma@user/cheaterman)
[05:06:18] *** Joins: cncr04s_ (~cncr04s@afxr.net)
[05:08:00] <rpav> or is GLR what "fast earley" is .. geez
[05:09:04] *** Quits: comrad (~quassel@holarse/comrad) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: psb__ (sid500598@id-500598.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: fruitypunk1 (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: Shell (~shell@user/shell) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Ping timeout: 240 seconds)
[05:09:06] *** greyblue9_ is now known as greyblue9
[05:09:06] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: cncr04s (~cncr04s@afxr.net) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Nixx_ (~quassel@bulbasaur.sjorsgielen.nl) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: miklcct (~quassel@vps.miklcct.com) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: tbe_loki (~loki@loki.codes) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: nolyc (~nolyc@tinodidriksen.com) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 240 seconds)
[05:09:07] *** nolyc_ is now known as nolyc
[05:09:07] *** tbe_loki2 is now known as tbe_loki
[05:09:45] *** Joins: epony (~epony@user/epony)
[05:10:06] *** VShell is now known as Shell
[05:13:50] *** Joins: fruitypunk1 (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[05:14:03] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[05:17:04] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[05:19:28] <yolo> assuming not using exceptions, do you do: vector<int>v(1); if(v.bad()){}; for error checking in practice?
[05:19:54] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[05:20:29] <yolo> i rarely saw v.bad() in real code with/without exception, but it feels like 'malloc' without checking returning NULL
[05:20:44] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[05:25:05] <yolo> â›²
[05:30:39] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:36:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:38:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:40:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:07] *** ChanServ sets mode: +v npaperbot
[05:46:04] *** Quits: irrenhaus3 (~xenon@HSI-KBW-046-005-003-085.hsi8.kabel-badenwuerttemberg.de) (Quit: Lost terminal)
[05:49:40] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[05:51:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:55:42] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 250 seconds)
[05:58:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[06:04:54] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[06:05:48] *** Joins: johnny (~johnny@user/johnny)
[06:06:13] *** Quits: kn07_ (~kn07_@86.121.166.134) (Quit: Leaving)
[06:08:16] <kalven> yolo: from my experience, it's common to treat those types of allocation failures as fatal errors
[06:11:22] <yolo> so if I do not use exception, I have check each of them and bail out?
[06:12:20] <Hello71> c++ without exceptions is non-standard
[06:12:35] <Hello71> so there is no standard way to write it
[06:12:41] <kalven> good thing we're in #c++-general
[06:13:25] <johnny> hah
[06:14:22] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:14:28] <yolo> my point is, each c mallo you will see check return for NULL, all `vector<int>v` without exception code i saw so far(not many though) does not care if the `v` succeeds or not, which could be, fatal
[06:14:37] *** Quits: chozorho (~chozorho@2601:146:300:c30::6b8f) (Ping timeout: 240 seconds)
[06:15:11] <causative_> what's a good tool for analyzing memory usage? I have a process whose memory grows out of control, but valgrind doesn't find any leaks
[06:15:47] <causative_> like is there a way to see "85% of memory used is used by variables of such-and-such a type"?
[06:15:49] *** Joins: chozorho (~chozorho@2601:146:300:c30::a15b)
[06:15:52] <yolo> "as long as it's reproducible it's easy to fix"
[06:16:18] <kalven> if you use std::vector and -fno-exceptions (or equivalent) then I don't believe you have a meaningful way of handling errors, besides crashing
[06:16:29] <yolo> the scarest debug is those 'random death' bugs that lurks and came out like once a week or a quarter
[06:16:49] <kalven> causative_: tcmalloc has heap profiling
[06:17:24] <causative_> ok thanks
[06:18:31] <yolo> kalven: i don't use -fno-exception, just 'reguarlar' `vector<int> v` etc, but without try-catch and was thinking checking-return-value
[06:18:47] <yolo> https://isocpp.org/wiki/faq/exceptions  re-reading this now
[06:19:08] <yolo> basically, isocpp says, use exceptions!
[06:21:23] <kalven> yolo: okay, well then it's easy.. you'll get an exception if it can't allocate :P
[06:24:33] *** Joins: p-i-_ (Ohmu@gateway/vpn/protonvpn/ohmu)
[06:27:47] *** Quits: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 256 seconds)
[06:29:54] <yolo> kalven: thanks, indeed, when i run it the os throws an exception and quits, so by default if I don't have an exception handler, the c++ library code will do it
[06:33:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:35:52] *** Quits: DSpider (~DSpider@82.79.237.88) (Quit: Leaving)
[06:36:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 240 seconds)
[06:39:33] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:53:45] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:05:51] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[07:17:44] *** Joins: adeliktas5 (~adeliktas@i59F4D467.versanet.de)
[07:19:55] *** Quits: adeliktas (~adeliktas@i59F5F0DE.versanet.de) (Ping timeout: 256 seconds)
[07:19:55] *** adeliktas5 is now known as adeliktas
[07:27:16] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Read error: Connection reset by peer)
[07:29:52] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:41:17] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:43:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[07:48:07] *** Quits: jsbach (~jsbach@2a01:c22:b0ac:9600:1cd7:52ec:6b1a:4d40) (Ping timeout: 250 seconds)
[07:52:36] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[08:00:42] *** Joins: jsbach (~jsbach@2a01:c22:b026:9600:b0d4:cea7:b488:c972)
[08:08:02] <xisop> Greetings. I'd like to know of any tools/libraries/techniques that I could research to improve compile time.
[08:09:50] <very_sneaky> improve compile time? prebuild your dependencies - can use a package manager for that, i.e. conan. Could also look at tools that distribute your builds, ie incredibuild
[08:10:38] <Hello71> run less compile jobs with less code on more cpus
[08:10:40] <very_sneaky> could look at compiler caching as well, i.e. ccache
[08:10:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[08:11:24] <Hello71> ccache, distcc, icecream, iwyu, make -j
[08:11:50] <very_sneaky> get a better computer, pas -j24 (or your number of logical cores) to your build system
[08:11:58] <hnOsmium0001[m]> if you have lots of small source files, unity/jumbo builds could help a lot
[08:12:00] <xisop> nice. yeah i'm using -j for my make process.. using all cpus
[08:12:14] <hnOsmium0001[m]> or if you include a very large amount of headers/templates in each file
[08:14:24] <xisop> okay, appreciate the input. i'll research these alternatives
[08:15:07] *** Joins: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu)
[08:16:26] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[08:16:26] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[08:16:26] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[08:18:41] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Remote host closed the connection)
[08:18:42] *** Quits: p-i-_ (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 250 seconds)
[08:21:36] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:22:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[08:29:30] <kalven> what kind of project size and compile times are we talking about?
[08:31:13] <xisop> it's just a small hobby project. i don't compile things down into shared libraries which i suppose is should start doing
[08:31:28] <xisop> it's a circlemud derivative (sp?)
[08:32:29] <very_sneaky> why are compile times even a concern for a small hobby project?
[08:32:47] <very_sneaky> unless we have wildly differing definitions of small, compilation should be pretty close to instant, no?
[08:32:49] <xisop> well maybe it's not so small eh
[08:33:12] <xisop> i never did a SLoC count
[08:33:25] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea)
[08:41:05] <kalven> so how long does it take?
[08:42:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[08:44:14] *** Joins: c4017w (~c4017@209.52.68.8)
[08:44:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:44:54] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:48:32] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[08:55:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:57:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[08:58:27] *** Joins: c4017w (~c4017@209.52.68.8)
[08:58:36] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:2a76:905a:db73:1bc5:db75)
[09:01:02] *** Joins: andreasbuhr (~quassel@p548dd27a.dip0.t-ipconnect.de)
[09:02:28] *** Quits: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 250 seconds)
[09:12:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:13:42] <ville> yolo: if you're not using exceptions i'd advice write your own containers. you don't need many: dynamic array and hash table get you pretty far in practice. if you go that route also make allocators rigt away
[09:19:20] <ville> very_sneaky: just including select standard library headers adds you a second or two to the build
[09:20:38] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[09:25:02] <very_sneaky> ville: which ones?
[09:28:49] *** Quits: andreasbuhr (~quassel@p548dd27a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:31:10] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:32:56] <ville> very_sneaky: i don't have a list handy and it of course varies from implementation to implementation
[09:34:03] <ville> https://github.com/s9w/cpp-lit for example i guess
[09:35:24] <ville> https://github.com/MKlimenko/check_compile_times/wiki
[09:36:06] <kalven> a file that just includes <regex> and has int main() { std::regex r; } takes ~1s on my slow laptop.
[09:36:09] <kalven> 0.2s when using modules
[09:37:00] <ville> admittdedly things have improved since people started posting these things on reddit. it used to be worse just 5 years ago
[09:40:11] <thad_the_man> kalven: There is a compiler that supports modules?
[09:40:22] <kalven> this is with clang
[09:41:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:09] *** ChanServ sets mode: +v npaperbot
[09:41:24] <very_sneaky> i have noticed that using date/tz.h introduces like a ~2s runtime penalty on first execution
[09:41:38] <thad_the_man> I thought they had minimal suport.
[09:42:22] *** Joins: andreasbuhr (~quassel@p548dd27a.dip0.t-ipconnect.de)
[09:42:54] <kalven> if you're using a recent clang then just try -std=c++20 -fmodules
[09:42:56] <very_sneaky> runtime though, not compile time
[09:43:30] <very_sneaky> eh, chrono does have a reasonable compile time penalty
[09:43:44] <ville> what is date/tz.h?
[09:44:05] <very_sneaky> the prototype timezone capability for chrono
[09:44:08] <very_sneaky> howard hinnants library
[09:44:14] *** Quits: andreasbuhr (~quassel@p548dd27a.dip0.t-ipconnect.de) (Client Quit)
[09:44:51] <ville> can't test it then
[09:45:10] <very_sneaky> how would you test it
[09:45:28] <ville> by compiling and running a program with and with out it
[09:45:54] <very_sneaky> gotcha. it's on godbolt i'm pretty sure, if you wanted to play around with it
[09:46:27] <ville> well that's not good. it's behind a network and wildly shared
[09:49:16] <kalven> wat
[09:50:42] <johnny> i think he means that one can't prove a certain time penalty by using compiling something on godbuilt
[09:50:46] <johnny> godbolt*
[09:54:10] *** Joins: p-i- (~Ohmu@2403:6200:8978:2a76:903f:6c67:fa60:aa68)
[09:55:29] <very_sneaky> for reference: https://github.com/HowardHinnant/date
[09:56:26] <kalven> "If the minus sign was part of the input sequence, the numeric value calculated from the sequence of digits is negated as if by unary minus in the result type, which applies unsigned integer wraparound rules."
[09:56:48] <kalven> why would a function for reading an unsigned value do a bunch of fuckery with minus
[09:57:12] <very_sneaky> i think the initial runtime penalty associated with tz.h is parsing the iana database though, so it's only a penalty the first time and after that it's all much quicker
[09:57:37] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:2a76:905a:db73:1bc5:db75) (Ping timeout: 240 seconds)
[10:01:31] <ville> kalven: if i wished to see the inclusion penalty then moving to godbolt which where i expect far more variance beyond my control is probably not a good move for measuring
[10:02:23] <johnny> i wonder if you could preallocate a minimal version of the database , at least for development
[10:02:54] <kalven> ville: so test it locally?
[10:03:19] <ville> kalven: can't be bothered. if it was something "standard" already on my machine i would have
[10:04:28] <kalven> now that I can relate to
[10:06:05] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[10:18:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:19:30] *** Joins: ferdna (~ferdna@user/ferdna)
[10:22:25] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[10:39:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 240 seconds)
[10:40:23] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:51:51] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[10:53:03] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:55:08] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Ping timeout: 250 seconds)
[10:56:41] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[10:59:00] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[10:59:13] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[10:59:25] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[10:59:32] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[10:59:45] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[11:00:10] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[11:09:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[11:13:31] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca)
[11:14:13] *** Cyp_ is now known as Cyp
[11:16:50] *** Quits: johnny (~johnny@user/johnny) (Read error: Connection reset by peer)
[11:17:47] *** Joins: johnny (~johnny@user/johnny)
[11:24:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[11:36:02] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 240 seconds)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:42] *** Joins: epony (epony@user/epony)
[11:54:03] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[11:54:55] *** Joins: johnny (~johnny@user/johnny)
[11:58:20] *** Joins: r-g (~r-g@163.172.58.132)
[12:19:41] *** Quits: letto (~letto@86.120.81.105) (Ping timeout: 256 seconds)
[12:21:39] *** Quits: p-i- (~Ohmu@2403:6200:8978:2a76:903f:6c67:fa60:aa68) (Quit: Leaving...)
[12:22:22] *** Joins: robod34 (~Username@79.113.195.239)
[12:41:24] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[12:41:47] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:42:44] *** Joins: johnny (~johnny@user/johnny)
[12:45:02] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca) (Ping timeout: 240 seconds)
[12:50:11] <sven_> heya, I'm playing around with std::find_if on a map and realized I can't use auto in the lambda in C++11. I then used decltype(myMap)::value_type which worked on Coliru (http://coliru.stacked-crooked.com/a/5c010394e51d2bc7), but didn't work on my local machine. What are the exact requirements to make tihs work and - more importantly - is there a better solution to this?
[12:50:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:51:19] *** Quits: chozorho (~chozorho@2601:146:300:c30::a15b) (Quit: good night)
[12:56:31] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[12:57:06] <ville> decltype() is c++11, are you selecting new enough standard on your local machine?
[12:57:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca)
[13:02:52] <sven_> yeah, it's all done with c++11. Uhm, I maybe should check the compiler error again, sorry. It knew decltype, but complained about mismatched types for the lambda
[13:05:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca)
[13:08:56] *** Joins: DSpider (~DSpider@82.79.237.29)
[13:09:46] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[13:11:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:88f8:5844:198f:e3c2)
[13:21:16] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:23:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[13:23:25] <ville> the exact error would be a start
[13:26:11] <ville> also just to be sure did you use the exact same code on your local machine as you did in the paste? not just somewhat the same, i mean exactly the same
[13:26:48] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:29:12] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[13:29:29] *** Joins: badone (~badone@209.132.189.152)
[13:32:18] <PJBoy> random guess: add typename: `typename decltype(myMap)::value_type`
[13:33:04] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea)
[13:33:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:41:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:09] *** ChanServ sets mode: +v npaperbot
[13:43:42] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[13:49:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[13:49:49] *** Joins: proller (~p@2a02:6b8:b081:15::1:30)
[13:50:14] *** Joins: letto (~letto@86.120.81.105)
[13:58:09] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:11:07] *** Joins: Simplar (~Simplar@188.163.93.76)
[14:14:02] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:14:49] *** Joins: oknenavin (~nomo@95.87.208.95)
[14:17:27] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[14:19:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[14:21:40] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[14:25:01] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[14:26:28] *** comrad_ is now known as comrad
[14:27:27] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[14:29:58] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:34:30] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:36:03] *** LordKalma_ is now known as LordKalma
[14:42:25] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[14:42:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[14:42:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[14:49:52] <sven_> ville: well, it's not the exact code, since it's part of a larger code base, so apart from variable names the 2 differences are that the types in the map are not 2 strings, but 1 string and 1 custom enum class and that I do auto const& someMapWithData = some::long::namespace::name::DataStruct::MapWithData;
[14:50:41] <sven_> I can't access the error message right now, since it's not on a local machine I have access to at this moment. I'll check later and ask again
[14:51:12] <sven_> how would adding typename change it and why isn't it required in the coliru example?
[15:05:55] <very_sneaky> sven_: probably a good idea to use the exact code you used on coliru as a test case on your local machine to confirm it's an issue with the code
[15:06:12] <very_sneaky> and that your MWE is actually an MWE
[15:07:59] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[15:13:07] *** Quits: r-g (~r-g@163.172.58.132) (Read error: Connection reset by peer)
[15:20:05] <ville> sven_: as very_sneaky said, then try the exact code from the pastesite in the original environment
[15:21:15] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[15:25:58] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 250 seconds)
[15:27:17] <sven_> yeah, will try that next, ty
[15:29:03] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:33:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[15:35:32] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 240 seconds)
[15:42:57] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[15:43:13] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[15:43:37] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[15:47:51] *** Joins: Burgundy (~yomon@82.76.72.88)
[15:51:51] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:54:02] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[15:55:00] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-002-040.hsi8.kabel-badenwuerttemberg.de)
[15:58:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[16:01:46] *** Joins: Terminus (~null@user/terminus)
[16:07:04] *** Joins: markong (~kvirc@213.146.188.203)
[16:09:58] *** Joins: ethrl (~ethereal@user/doforlove33)
[16:16:27] *** Joins: plastico (~plastico@neomutt/plastico)
[16:38:55] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[17:04:46] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 250 seconds)
[17:23:28] <AmR> How I can get type off date format with Qt with QDate or QDateTime classes ?
[17:26:03] <TinoDidriksen> You mean detect the possible date stored in a random string?
[17:30:41] <AmR> yes
[17:32:11] <AmR> some time user change the way system display date. So I want get way to know this format ?
[17:33:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea)
[17:39:46] <antto> difficult
[17:40:08] <antto> that's basically text parsing with guessing
[17:41:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:09] *** ChanServ sets mode: +v npaperbot
[17:41:13] <antto> i'd say the best you can do is if you could get a bunch of different timestamps from the same "format" (if you can even know this), and analyze them, find the one with the biggest "numbers" and then it should be sorta easier
[17:41:30] <antto> find the year, find the month, find the day, etc..
[17:43:12] <antto> ehm, like find the biggest numbers in each position
[17:43:17] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[17:49:50] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 250 seconds)
[17:54:08] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[17:55:32] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 240 seconds)
[18:01:30] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[18:06:55] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[18:09:36] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[18:10:12] *** Joins: pulse (~pulse@user/pulse)
[18:11:44] <cbreak> how about looking the locale env vars?
[18:11:49] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[18:16:24] <lh_mouse> are there any ways to change the mangled name of a class template specialization?
[18:17:35] <lh_mouse> I've reinvented a wheel called `basic_cow_string` which has the same parameter list as `std::basic_string` but I find its mangled name (`basic_cow_string<char, std::char_traits<char>, std::allocator<char>`) super long.
[18:17:53] <lh_mouse> things get worse if i put it in a map.
[18:18:08] <barometz> string has much the same issue
[18:18:59] <lh_mouse> no there isn't. The Itanium ABI has a shortcut for `std::basic_string<char, std::char_traits<char>, std::allocator<char>`, and it has to be used where applicable.
[18:19:38] <barometz> my bad, thought two things would be the same that aren't :)
[18:21:07] <lh_mouse> this means even one requests `std::basic_string<char, std::char_traits<char>>` the shortcut still has to be picked.
[18:21:17] <lh_mouse> $ c++filt -t Ss
[18:21:17] <lh_mouse> std::basic_string<char, std::char_traits<char>, std::allocator<char> >
[18:22:00] <lh_mouse> I wish I could inform the compiler that this specialization has a dedicated name.
[18:22:43] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:23:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:31:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:34:45] <ville> people really need to stop making these things templates
[18:41:49] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[18:41:51] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[18:41:51] *** Joins: Roughy (~mdaw45ns@user/roughy)
[18:44:26] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[19:04:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c0da:ab94:f145:24f4)
[19:04:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c0da:ab94:f145:24f4) (Changing host)
[19:04:01] *** Joins: skapata (~Skapata@user/skapata)
[19:06:27] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:3eb4:914f:5060:553a)
[19:06:28] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:3eb4:914f:5060:553a) (Changing host)
[19:06:28] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:17:30] *** Joins: chris64 (~chris@user/chris64)
[19:20:27] *** Joins: oknenavin (~nomo@95.87.208.95)
[19:22:12] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[19:29:30] *** Joins: xkuru (~xkuru@user/xkuru)
[19:33:24] *** Joins: paul424 (~tom@ip-5-172-239-103.multi.internet.cyfrowypolsat.pl)
[19:36:02] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea) (Ping timeout: 240 seconds)
[19:44:14] *** sven_ is now known as noent
[19:49:19] *** Joins: Sampuka (~Mathias@5.186.126.2.cgn.fibianet.dk)
[19:55:33] *** Joins: ipe (~ipe@dy6mtbblkhhxynjjspqyy-4.rev.dnainternet.fi)
[19:58:38] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[20:04:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:88f8:5844:198f:e3c2) (Ping timeout: 240 seconds)
[20:09:27] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[20:10:36] *** Joins: seninha (~seninha@user/seninha)
[20:14:47] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8cc6:12ce:bf8a:e847)
[20:15:42] *** Joins: Kerr (~Kerr@2601:602:ce01:1f0:aaf6:d7cf:bef:465d)
[20:26:01] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[20:26:33] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:26:42] *** Quits: jsbach (~jsbach@2a01:c22:b026:9600:b0d4:cea7:b488:c972) (Ping timeout: 250 seconds)
[20:26:51] *** Joins: cpuid (~cpuid@co5.at)
[20:26:52] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[20:26:52] *** Joins: cpuid (~cpuid@user/cpuid)
[20:27:47] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[20:28:12] *** Joins: pulse (~pulse@user/pulse)
[20:29:16] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[20:35:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:43:52] *** Joins: r-g (~r-g@163.172.58.132)
[20:46:29] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[20:46:59] *** Joins: jsbach (~jsbach@2a01:c22:b026:9600:5a8b:db2:acf8:aa0f)
[20:49:42] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:50:49] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[20:52:38] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[21:08:02] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 240 seconds)
[21:08:13] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 240 seconds)
[21:15:31] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[21:16:13] *** Joins: letto (~letto@86.120.81.105)
[21:17:02] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:21:17] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[21:33:50] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e8a0:e296:b425:f7ea)
[21:39:33] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:41:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:09] *** ChanServ sets mode: +v npaperbot
[21:46:22] <jaakkos_> Are there any neat ways to get locking order validation in C++? For instance, if mutexes A and B are locked in that order at any point, locking B and A (in that order) would cause a violation to be detected.
[21:52:48] <cbreak> jaakkos_: there's std::lock, which will avoid deadlocks without obeying lock order
[21:53:00] <cbreak> maybe one of clang's thread sanitizers can detect that
[21:53:23] <cbreak> https://en.cppreference.com/w/cpp/thread/scoped_lock too
[21:55:04] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[21:57:16] *** Joins: seninha (~seninha@user/seninha)
[21:58:53] <jaakkos_> Hmm, yes, I could think about it. The biggest problem for me in this kind of interface is that you need to first collect the lockable objects, while in my case I have "complicated" handles from various subsystems, with scoped locks buried in those handles, with no means to access all low-level locks at locking time
[22:01:20] <cbreak> and you need to lock all of them at once?
[22:01:50] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[22:03:33] <jaakkos_> They can't be locked atomically at once, but there are some code paths where more than 1 lock needs to be held, and it would be nice to have assurance that when more than 1 is being held, they were always taken in same order so circular wait is impossible
[22:03:46] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[22:03:58] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[22:04:02] *** Joins: ferdna (~ferdna@user/ferdna)
[22:04:32] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[22:04:44] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[22:05:14] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[22:06:04] <jaakkos_> Linux kernel has some kind of automatic locking order detection mechanism, it looks like there are indeed some tooling for C++ as well, I'll take a look at clang as I'm already using their format and tidy tools.
[22:35:37] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:5984:7505:b3af:3ddb)
[22:39:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 250 seconds)
[22:43:02] *** Quits: ethrl (~ethereal@user/doforlove33) (Ping timeout: 240 seconds)
[22:44:08] *** Quits: paul424 (~tom@ip-5-172-239-103.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[22:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[22:46:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:52:44] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[22:54:31] *** Quits: Sampuka (~Mathias@5.186.126.2.cgn.fibianet.dk) (Read error: Connection reset by peer)
[22:54:49] *** Joins: Sampuka (~Sampuka@5.186.126.2.cgn.fibianet.dk)
[22:57:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:58:48] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[23:00:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca)
[23:11:58] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[23:23:14] *** Joins: pulse (~pulse@user/pulse)
[23:36:07] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[23:40:26] <Alipha> jaakkos_: if you're not locking all at once, then deadlocks can't be avoided. If one thread locks A and then later locks B, and another thread locks B and later locks A, you have a deadlock. It's not like thread 1 can temporarily unlock A to give it the other thread--thread 1 locked it for a reason.
[23:41:41] <LordKalma> isn't there something in the stdlib about multiple locks?
[23:42:07] <Alipha> jaakkos_: but if thread 1 and thread 2 both used std::scoped_lock or std::lock to lock A and B at the same time, then that's fine. And it doesn't matter if you do std::scoped_lock x(A, B); or std::scoped_lock x(B, A);
[23:42:13] <Shell> yeah, but you can /detect/ when locks get locked in the wrong order and complain loudly at a developer.
[23:42:45] <Alipha> scoped_lock will lock them without a deadlock no matter if you're consistent in the ordering of A and B or not
[23:42:59] <LordKalma> !std::scoped_lock
[23:43:00] <nolyc> LordKalma: Error: "std::scoped_lock" is not a valid command.
[23:43:04] <LordKalma> bah
[23:43:59] <Alipha> Hm. Is there something in std that will throw an exception if a deadlock is detected? I think not. You could write one.
[23:44:49] <Alipha> You'd need a wrapper around std::mutex to keep track of which thread holds the lock, I'd think
[23:45:24] <LordKalma> that sounds like something for a runtime analyser to do
[23:45:34] *** Joins: chris64 (~chris@user/chris64)
[23:47:13] <kalven> tsan has some deadlock detection
[23:47:20] <kalven> absl's mutex has deadlock detection
[23:48:34] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:e8cb:68ce:7100:5c3f)
[23:49:56] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[23:53:59] <h4k1m0u> Hi, suppose I have a class `Plane` and a class `Terrain` (in OpenGL). Initially I was going to make the latter inherit from the former (which makes sense), but the problem is if I call the base (Plane) class' constructor in that of the derived one (Terrain), I'll have to calculate the vertexes' positions and normals twice (once for a flat Plane
[23:53:59] <h4k1m0u> when calling the base class' constructor, and a 2nd time for a terrain with topography). Is there another way to proceed to avoid doing the latter computation twice?
[23:55:05] <kalven> planes, terrains and ...
[23:55:24] <kalven> but does it really make sense for a terrain to inherit a plane?
[23:55:29] <RandomReader> there's a errc for resource_deadlock_would_occur, but I think the required use is very narrow, it's just open to an implementation to use if it has deadlock detection
[23:55:45] <RandomReader> IIRC join requires it
[23:55:49] *** Quits: ipe (~ipe@dy6mtbblkhhxynjjspqyy-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[23:56:52] <h4k1m0u> kalven, the geometry is the same that's why I was going to go for an inheritance
[23:57:15] <RandomReader> inheritance describes a relationship, Terrain is-a Plane
[23:57:21] <Alipha> a terrain perhaps "has a" plane, not "is a"
[23:57:22] <RandomReader> I don't know why Terrain would have wings and an engine
[23:57:28] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:57:38] <kalven> I think they mean plane as a flat thing
[23:57:41] <Alipha> RandomReader: eh, different plane :-P
[23:57:42] <kalven> not fly in the air vehicle
[23:58:03] <RandomReader> that does make a little more sense
[23:58:13] <kalven> a little, but not enough!
[23:58:31] <h4k1m0u> lol I meant the one we did in geometry courses
[23:58:41] <Alipha> h4k1m0u: though you can perhaps call a function which returns a Plane that you can construct the base with. `Terrain(params) : Plane(createPlan(params)) {}`
[23:58:44] <RandomReader> I don't know why Terrain would be boundless / have infinity
[23:58:48] <Alipha> minus the typo
[23:59:11] <RandomReader> or not have some notion of height
