[00:00:15] <[exa]> why embarassing though? (it's pretty normal that several first versions of what you code may be broken AF)
[00:02:29] <iteratee> is there a canonical LTR equivalent of $ and $!    ?
[00:03:51] <[exa]> there's `&` but I've got no idea if there's `&!`
[00:04:03] <aegon> whats a 'cononical' use of lambdaCase? I keep going through a loop of using case, thinking i can clean up the syntax with lambda case, then either realizing i should be using MaybeT instead or that lambda case doesn't save much and makes things harder to read
[00:04:26] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Quit: Lost terminal)
[00:04:35] <aegon> iteratee: i also got suggested <&> by hlint a little while ago and never considered that it might exist, but its a neat control structure sometimes
[00:04:42] <geekosaur> usually when you have a single parameter function that would do a case anyway
[00:04:48] *** Quits: floridmarshmallo (~nate@pool-100-19-29-41.phlapa.fios.verizon.net) (Quit: WeeChat 3.0)
[00:05:11] <geekosaur> so instead of \x -> case x of ... do \case ...
[00:05:31] <ski> iteratee : one could possibly argue that `$!' at least, and perhaps also `$', ought to be `infixl' ..
[00:05:32] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[00:05:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:05:52] <iteratee> [exa], what library defines `&`?
[00:05:53] <aegon> geekosaur: ah, that makes a ton of sense, thanks!
[00:06:20] <InstX1> exa: accidentally deepfaking yourself
[00:06:23] <InstX1> or looking like it is
[00:06:29] <InstX1> accidentally screwing up and getting swastikas
[00:06:29] <InstX1> etc
[00:07:07] <ski> (.. i don't care much for `foo x $ bar y z $ blah'. but being able to write e.g.  foldl' f z (x:xs) = foldl' f $! f z x $ xs  could be nice)
[00:07:40] <ski> @src foldl'
[00:07:40] <lambdabot> foldl' f a []     = a
[00:07:41] <lambdabot> foldl' f a (x:xs) = let a' = f a x in a' `seq` foldl' f a' xs
[00:07:45] <[exa]> aegon: wow that's neat
[00:07:53] <[exa]> iteratee: Data.Function i hope?
[00:08:17] <ski>   foldl' f a (x:xs) = (foldl' f $! f a x) xs  -- currently, you could write it like this
[00:08:22] <[exa]> InstX1: ah I thought you're after normal filters, not neural-network madness
[00:08:33] <InstX1> i'm a non-programmer
[00:08:38] <InstX1> i just wonder about what could go wrong
[00:08:52] <InstX1> what i was thinking about was more mandelbrotting stuff
[00:08:55] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Client Quit)
[00:08:58] <InstX1> or figuring out how to do weird memes via images
[00:09:04] <InstX1> it's the stuff the kids would like
[00:09:10] <InstX1> erm, weird memes via filters
[00:09:22] <InstX1> keeping it "sane" and "professional" is an issue
[00:09:38] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5edd:2a99:160f:84d2) (Quit: WeeChat 2.8)
[00:09:43] <[exa]> the best meme filter lately is `convert_to_jpeg -quality 1`
[00:10:00] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[00:10:01] <InstX1> lol
[00:10:25] <[exa]> anyway yeah mandelbrots do work
[00:10:34] <[exa]> people love diggin in that
[00:10:36] <InstX1> on instagram a lot of people like to show off their figures, one thing that could go wrong is if the algorithm painted their clothes off, for intsance
[00:10:53] <InstX1> not that it'd reproduce anatomy, but it'd be close enough to be embarrassing
[00:13:07] <[exa]> you might be confusing programming with deep NN training now. :D
[00:15:07] <InstX1> you could have a prompt to specify an area, and accident,s whoops
[00:15:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:15:30] <InstX1> doesn't take anything special, just a region of the wrong color in the wrong place
[00:16:21] <InstX1> i mean the inevitable stuff with instagram filters is that people might want to show off the filters in class
[00:16:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:16:32] <InstX1> but to have the images curated beforehand
[00:16:36] <InstX1> is just a good idea
[00:19:39] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[00:21:00] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[00:21:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[00:23:08] *** Quits: Farzad (~FarzadBek@37.49.149.40) (Quit: Leaving)
[00:25:00] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[00:25:15] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[00:30:06] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:35:41] <monochrom> Oh BTW I don't oppose starting with main, but I would oppose starting with do-notation. Because my students and TAs oppose that, too.
[00:36:38] *** Joins: oats (~thomas@user/oats)
[00:37:02] *** Joins: xcmw (~textual@dyn-72-33-0-245.uwnet.wisc.edu)
[00:37:40] *** Joins: hyiltiz (~quassel@31.220.5.250)
[00:38:30] <[exa]> monochrom: sometimes there's the uncanny question about "can it read a number and print it back", I'm usually showing that there's `do` to do that easily but with a promise that it's not a side effect and I'm going to demystify it asap
[00:39:09] <[exa]> IO works kinda nicely there as an eDSL
[00:39:22] * ski . o O ( `interact' )
[00:39:47] <[exa]> ski: oh you!
[00:39:58] <[exa]> :]
[00:40:16] <monochrom> That's interesting. I would like to take a look at your approach.
[00:40:30] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[00:40:45] <ski> what, you don't like having to juggle around fragile irrefutable patterns / forcing with `case' at the right time ?
[00:40:46] <[exa]> the slides are in czech, not sure if it helps a lot :D
[00:40:57] <aegon> whenever i show someone io without do notation they get scared, when i show them do notation they see return and start making all sorts of bad assumptions about whats going on
[00:41:03] <adamCS> A Pipes question, if anyone is familiar: Streamly has a function IsStream t => fromEffect :: m a -> t m a.  I'd like a Pipes equivalent: pipesFromEffect :: m a -> Producer a m () (I guess?).  I see "yield :: a -> Producer a m ()" but that's not what I want... 
[00:41:12] <monochrom> At this point though it sounds like you are doing a "1st week: whirlwind tour. 2nd-nth week: properly"
[00:41:19] <aegon> its rough when the entry point to a hello world is one of the hardest things to grasp coming from imperative land
[00:41:22] <monochrom> which can work, yeah.
[00:41:58] <ski> aegon : use applicative combinators, together with `join' ?
[00:42:38] <[exa]> monochrom: I'm trying to avoid whirlwinds but well, you need to keep the fun going
[00:42:48] <awpr> adamCS: that sounds like `lift`, I think
[00:43:14] <awpr> oh, or `yield =<< lift ma`
[00:43:52] <monochrom> If you teach do-notation, you will eventually have to answer this question: "s <- x" vs "let t = y", why can't I do the other way, "let s = x", "t <- y".
[00:44:11] <adamCS> awpr: Thanks!
[00:44:23] <monochrom> And the answer really forces you to go back to >>= and "M Int" vs "Int" anyway.
[00:45:38] <[exa]> `<-` "removes the IO from the data you want and joins it with the bigger IO around" is a good temporary explanation
[00:45:48] <[exa]> I'm open to a better one honestly
[00:46:36] <aegon> ski: i like that, join might side step a lot without being as hand wavy as do notation to a new comer
[00:47:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Read error: Connection reset by peer)
[00:48:33] <monochrom> Yikes haha.
[00:49:04] <monochrom> https://www.vex.net/~trebla/photo/unorganized/IO-String.png
[00:49:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[00:49:50] <davean> [exa]: I've said things like "Pipes it throuh to the larger IO" or something - though I've only like twice taught people who found this entire thing confusing
[00:50:00] <davean> No the lack of InstanceSigs in the base language?
[00:50:04] <davean> That shows up every time
[00:50:09] <dsal> aegon: Nobody should write `return` in code anymore.  Some people disagree with me, of course, but it's confusing.
[00:50:33] <ski> aegon : i dunno how well it would work, but perhaps one could try it. also, sometimes i find `infixl <*>>; (<*>>) :: Monad m => m (a -> m b) -> (m a -> m b); mamb <*>> ma = mamb >>= (=<< ma)  {- = join (mamb <*> ma) -}' useful. to be used like `frob <$> foo <*> bar <*> baz <*>> quux'
[00:51:02] <ski> monochrom : a pushout ?
[00:51:05] <[exa]> davean: "sorry guys you just have to do that to get rid of the IO wrap" is actually a tone the students are used to from pythons, so it kindof works but it's not right for sure. :D
[00:51:50] <monochrom> Yeah a pushout.
[00:51:59] <davean> [exa]: See that wouldn't fly with the people I end up teaching. They'd be like "But the point is the IO doesn't go away" and I'd get all sorts of shit for that
[00:52:00] <ski> `InstanceSigs' is quite nice
[00:52:11] <davean> they're also not students - they're people who already create things on their own
[00:52:33] <adamCS> awpr: I always forget that underneath it's just a regular monad transformer.  
[00:52:35] <ski> dsal : there's already overloading of other terms, i suppose
[00:52:38] <ski> (e.g. "functor")
[00:52:43] <hpc> "you just have to use (.) to get rid of the function"
[00:52:59] <dsal> ski: Yeah, I was confused by "functor" from o'caml years ago.
[00:53:08] <ski> @where on-functors
[00:53:08] <lambdabot> "On Functors" (in C++,Standard ML,Haskell,Prolog) by Peteris Krumins in 2010-05-17 at <http://www.catonmat.net/blog/on-functors/>
[00:53:22] <davean> [exa]: now when I explain what a primtive type is as a basis vector in the space of Haskell types, they're really happy with it.
[00:53:26] <davean> its all the people you teach?
[00:54:10] <ski> davean : or a generator in a group presentation ?
[00:54:24] <davean> ski: Yah, think I did that one once too
[00:54:50] <davean> ski: though tehy jump to asking me about (thing that turns out to be sum and product types) when I do the vector space one
[00:55:06] <davean> They don't start asking me if "data" works the way it does when I say group things
[00:55:13] <davean> they just don't run as far with it
[00:55:30] <davean> and I'm nothing if not lazy
[00:55:41] <davean> I'd prefer they explain how data types work to me than me to them
[00:55:48] <[exa]> davean: I said it's temporary :D
[00:56:11] <davean> [exa]: Yah, but I like temporary to be longer than "until I finish saying it" :)
[00:56:14] <awpr> ski: I knew I'd seen that type signature before, apparently I defined it as `(=*<)`
[00:56:31] <[exa]> anyway yeah the ADT "algebra" is a great discovery for many people
[00:56:33] <awpr> :t (=<<)
[00:56:35] <lambdabot> Monad m => (a -> m b) -> m a -> m b
[00:56:41] <[exa]> esp. later with zippers
[00:56:54] <awpr> by analogy to that with an extra layer of `m` on the function, like the Applicative operators have
[00:57:00] *** Joins: Guest9393 (~Guest93@2800:2181:4400:27c:dd94:662c:5a7e:2a36)
[00:57:07] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[00:57:15] <[exa]> (school motto: if in doubt, differentiate it)
[00:57:58] *** Quits: Guest9393 (~Guest93@2800:2181:4400:27c:dd94:662c:5a7e:2a36) (Client Quit)
[00:59:11] * ski . o O ( "We will encourage you to develop the three great virtues of a programmer: laziness, impatience, and hubris. --Larry Wall and Randal L Schwartz" -- "The Swine Before Perl" (talk/presentation) by Shriram Krishnamurthi in 2001-11 at <https://cs.brown.edu/~sk/Publications/Talks/SwineBeforePerl/> )
[01:00:56] <ski> awpr : i came up with it years ago. i guess others have also encountered a desire for it (or maybe recalling me mentioning it previously in here) .. imho, it'd be nice to have in `Control.Monad' or something
[01:01:12] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[01:01:38] *** Quits: Pdroman_ (~Android@93.red-79-156-174.staticip.rima-tde.net) (Quit: -a- IRC for Android 2.1.39)
[01:01:38] <awpr> +1, I like that it lets monadic computations have an "applicative-style" expression form
[01:03:05] <ski> the `<*>>' is intended to look like a regular `<*>', except that the whole shebang is then wrapped in a `join', so that the initial function returns an action that'll be performed in the same go
[01:03:30] <Inst> sorry about that, this is one of the reasons i'm attracted to haskell as a future hobbyist; i get panicky and think of all sorts of terrible edge cases and ways things can go wrong, anyways, headed to sleep
[01:05:10] <awpr> yeah, I think I see the meaning behind that name.  personally I see it being more closely related to `=<<`, but I'm not strongly opinionated about it
[01:05:30] *** Quits: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[01:05:52] <ski> (for two effectful parameters, it's `frob <$> foo <**> bar'. for just one, it'll have to be `frob =<< foo' .. of course, one could also have the operation be effectfully computed, like `frob <*> foo <*>> bar' or `frob <*>> foo')
[01:06:41] <ski> (s/<**>/<*>>/)
[01:13:40] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 258 seconds)
[01:22:16] *** Joins: hyiltiz (~quassel@31.220.5.250)
[01:23:04] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[01:24:49] *** Quits: xcmw (~textual@dyn-72-33-0-245.uwnet.wisc.edu) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:26:40] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:29:41] *** Joins: zebrag (~chris@user/zebrag)
[01:31:01] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[01:31:56] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[01:35:35] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:38:38] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[01:41:31] *** Joins: sedeki (~textual@user/sedeki)
[01:50:55] *** Quits: urdh (~urdh@user/urdh) (Quit: Boom!)
[01:52:43] *** Quits: jonatan (~nate@h85-8-60-194.cust.a3fiber.se) (Ping timeout: 252 seconds)
[01:52:56] *** Joins: jonatan (~nate@h85-8-60-194.cust.a3fiber.se)
[01:53:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:53:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:53:24] *** Joins: wroathe (~wroathe@user/wroathe)
[01:54:13] *** Joins: urdh (~urdh@user/urdh)
[01:56:28] *** Quits: off^ (~off@68.101.53.15) (Remote host closed the connection)
[02:03:40] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:06:31] *** Joins: jushur (~human@user/jushur)
[02:13:14] <zzz> %s/ or just s/ ?
[02:13:40] <zzz> i mean, /g ?
[02:13:53] <awpr> I only see one match
[02:14:18] <zzz> my bad
[02:15:00] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[02:15:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[02:15:39] *** Joins: Skyfire (~pyon@user/pyon)
[02:17:14] *** Parts: meltedbrain_y2k (~tekserf@94.73.36.197) ()
[02:19:00] <ManofLetters[m]> John Ericson: hi! could you have a look at https://github.com/simonmar/happy/issues/211? Just in case it's not only my CIs that died... :)
[02:19:45] <ericson2314> Man of Letters: it's in the readme
[02:19:53] <ericson2314> you want -bootstrap propably
[02:20:03] <ericson2314> I suspect I am going to get a lot of these questions :/
[02:20:15] <ericson2314> I had mixed feelings about cutting this release
[02:20:26] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[02:20:32] <ManofLetters[m]> yeah, because it's not my direct dep; something else depends on it
[02:20:39] <ManofLetters[m]> can I still mitigate the issue?
[02:20:41] <ericson2314> deps don't specify flags
[02:20:45] <ericson2314> cabal projet files do
[02:20:48] <ericson2314> so yes you can
[02:21:00] <ericson2314> (probably also stack.yaml, but I do not know details)
[02:21:23] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[02:21:36] <ManofLetters[m]> `git grep happy` in my project turns out nothing
[02:21:49] <ericson2314> are you using cabal or stack?
[02:21:53] <ManofLetters[m]> cabal
[02:22:05] <ManofLetters[m]> tried with 3.4 and with master branch
[02:22:15] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:22:16] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[02:22:52] <ericson2314> Man of Letters: see https://github.com/simonmar/happy/issues/211
[02:22:56] <ericson2314> you want
[02:23:12] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb958d78f02b280dc416.dip0.t-ipconnect.de)
[02:23:18] <ericson2314> package: happy
[02:23:18] <ericson2314>   flags: -bootstrap
[02:23:24] <ericson2314> I will extend redame
[02:23:54] *** Quits: hiruji` (~hiruji@2606:6080:1002:8:3285:30e:de43:8809) (Quit: ZNC 1.8.2 - https://znc.in)
[02:24:10] <ManofLetters[m]> ok, I will do that, but I'm afraid you will get many of those :) take care!
[02:24:24] <ericson2314> Man of Letters: ohhhhh yes I will
[02:24:40] <ericson2314> maybe I will make issue "put all your new bootstaapping hate here"
[02:25:28] *** Joins: noidedsuper (~manjaro-u@2601:280:5a81:520::f8be)
[02:25:42] <ericson2314> Man of Letters: can you let me know if adding that to cabal project file worked?
[02:25:58] <sm> you probably know it, but FWIW "have alex and happy in PATH" has long been a requirement for building lots of haskell things. including happy I guess
[02:26:18] <ericson2314> sm: happy hacked up sdist to contain pregenerated files before
[02:26:36] <ericson2314> also did other hacks in sdist
[02:26:46] <ericson2314> we got rid of all those and boostrap with parser combinators
[02:26:53] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb959894c42690fc4f0f.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:27:03] <ericson2314> ....but you gotta actually do the bootstrap if you want attribute grammars
[02:27:09] <sm> I see. a bit unfortunate for used either way isn't it
[02:27:15] <sm> users
[02:27:26] <ericson2314> sm: I opened a cabal issue
[02:27:36] <ericson2314> it should understand bootstrapping enough to be able to do it right
[02:27:43] <ericson2314> with `build-tool-depends: happy`
[02:28:07] <ericson2314> because tool deps are "qualified goals" that allow new flag assigments
[02:28:23] <ericson2314> but it bails out with a error to pessimistically
[02:30:39] <sm> I'm happy (!) to know happy is getting some maintenance. If building requires a cabal fix, that problem is going to be with us for a long time (people use older cabals basically forever)
[02:31:11] <ManofLetters[m]> I tried this... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/60ffef66b3a76616b488f8b2e2e6c7224cad4030)
[02:31:19] <ericson2314> well, we are going to drop support for old GHCs when we do some TH stuff I htink
[02:31:33] <ericson2314> Man of Letters: is your thing open source
[02:31:41] <ManofLetters[m]> yes
[02:32:01] <ericson2314> with the old GHCs maybe old cabals will be less of an issue
[02:32:10] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[02:32:17] <ericson2314> I can bump the cabal version as a close-enough proxy for cabal-install version I guess
[02:32:25] <ericson2314> Man of Letters: url?
[02:32:29] <ManofLetters[m]> and I waited for this moment of fame all my life: https://github.com/LambdaHack/LambdaHack
[02:32:31] <noidedsuper> Hey, would it be appropriate for me to drop a link to a super-alpha library I've been working on in here? Basic idea is to use Applicative/Divisible to write JSON parsers/serializers that can also generate documentation automatically (and avoid intermediate data structures like maps)
[02:32:34] <ericson2314> I should just get it working myself to inform readme
[02:33:56] <monochrom> Yes it's OK to drop a link here.
[02:34:33] <noidedsuper> https://github.com/AnthonySuper/jordan 
[02:36:14] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[02:37:09] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:38:48] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[02:39:46] <janus> noidedsuper: but if you start replacing aeson with something that can also generate documentation, why not make sure the keys in the From and To instance correspond
[02:40:01] <janus> the instances could be derived from a Schema type 
[02:40:12] <dsal> noidedsuper: your README has an incorrect link to `divisible`
[02:41:11] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 264 seconds)
[02:41:41] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[02:41:52] <dsal> I like this part of the hlint config:
[02:41:52] <dsal> # This is up to personal preference, but 80 is the right answer.
[02:41:52] <dsal> columns: 120
[02:42:15] *** Quits: max22- (~maxime@2a01cb0883359800fe2c7b136063d78c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[02:42:23] <janus> lol, people post a new library, first thing to check is to see if they have good taste in hlint o_O :P
[02:43:13] *** Quits: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl) (Quit: getting boxed in)
[02:43:23] *** Joins: hyiltiz (~quassel@31.220.5.250)
[02:43:58] <dsal> Haha.  Yeah.  If I don't like your line length, your code can't be useful.
[02:45:10] <janus> noidedsuper: if `parseField "name"` and writeField "name"` could be derived from a Field type that also contained the documentation, fields could be reused with their docs in different objects
[02:45:45] <janus> and when you compile to OpenAPI, the naive compilation would repeat the docs string, but you could ideally compile it to a yaml $ref or something
[02:46:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:47:12] <janus> alternatively it could be typeclass based, but people use Ints for so many things. but if you feel strongly about forcing people to make newtypes ... ;)
[02:50:09] <ericson2314> Man of Letters: per https://github.com/haskell/cabal/issues/3502 I think the situation is fucked
[02:50:21] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[02:50:23] <ericson2314> I am going to pull the release
[02:50:33] <ManofLetters[m]> :<
[02:51:20] <noidedsuper> Janus: the keys for From and To are different because you could theoretically support different ways to serialize and deserialize a type 
[02:51:38] *** Joins: tafa (~tafa@2a04:52c0:101:85c::1)
[02:51:39] <noidedsuper> And I actually have such things at work 
[02:51:52] <janus> noidedsuper: but if you want to support different ways , how can it be typeclass based? shouldn't the encoder/decoder just be values then?
[02:52:18] <noidedsuper> dsal: I keep that comment in there as a cheeky joke since it's the default one. I used to be a hardcore 80 character person myself even so
[02:52:29] <janus> noidedsuper: but i'd like to point out that the common case it to have only one encoder/decoder! so if that is convenient, it would make sense.
[02:52:58] <dsal> noidedsuper: yep, right with you
[02:52:59] <janus> noidedsuper: note how quickcheck for purescript allows both the typeclass and the value-based (hedgehog) approach. you can do the same
[02:53:49] <noidedsuper> janus: the ToJSON and FromJSON typeclass are supposed to represent "canonical" ways of encoding/decoding, respectively. You can also generate JSONParser/JSONSerializer values and do stuff with them if you want.
[02:54:22] <noidedsuper> So it kinda already does the "You can use a typeclass but values are also fine" thing, just without you having to type import Jordan.ToJSON (intToJson, doubleToJson) every time you want to serialize an int and a double 
[02:54:23] <ericson2314> Man of Letters: tyr again
[02:54:27] <ericson2314> do a `cabal update`
[02:54:28] <ericson2314> and reconfigure
[02:54:32] <ericson2314> it should use cabal 1.20
[02:54:39] <ericson2314> and there should be no issue
[02:54:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[02:55:00] <Axman6> ericson2314: please refrain from using the enter key for punctuation :)
[02:55:16] <ManofLetters[m]> John Ericson: what do you mean by "reconfigure"?
[02:55:27] <janus> noidedsuper: ok, good, that is nice. i think the point about a single encoder/decoder being the common case still stands. you can still support the odd cases.
[02:55:30] <ericson2314> Axman6: sorry
[02:55:41] <ericson2314> Man of Letters: `cabal configure`
[02:56:00] <ManofLetters[m]> nope, with new cabals you don't need to do that
[02:56:06] <janus> similar to how some people will wanna use Generic, but you don't have to
[02:56:21] <ManofLetters[m]> and you probably mean happy 1.20, right?
[02:56:26] <ericson2314> yeah
[02:56:26] <Axman6> pretty sure cabal new-configure exists for a reason...
[02:56:39] <ericson2314> well you can do that and then check the plan.json
[02:56:47] <ManofLetters[m]> oh, I see
[02:56:48] <ericson2314> that is what I did, to make sure the deprecation worked
[02:56:56] <ManofLetters[m]> yes, for checking it's useful
[02:57:11] <noidedsuper> If you use the generic representations they do currently generate identical formats, so I think the separation is probably fine? Since like 90% of the time you're just gonna write `deriving anyclass (ToJSON, FromJSON)` anyway 
[02:57:30] *** Quits: guydb89 (~guy@98.198.128.24) (Ping timeout: 260 seconds)
[02:57:42] <ManofLetters[m]> Axman6: it's actually a leftover and a miunderstanding; on branch master it mostly writes to `cabal.project.local` and let's you check plan, etc.
[02:57:42] <janus> right but you can't derive docs anyway, so the FromJSON/ToJSON should be derived from the schema, which also has the docs
[02:57:56] <ManofLetters[m]> but not needed for `cabal build` or anything
[02:58:08] <ManofLetters[m]> John Ericson: it works, thank you!
[02:58:15] <ManofLetters[m]> and I'm sorry :)
[02:58:25] <janus> noidedsuper: just because you have "jsonSerializerFromSchema" doesn't mean you can't enable people to write their own JSONSerializer
[02:58:53] <noidedsuper> Actually with this library you can derive docs! Since we only use typeclasses that are "inspectable", every `JSONParser` and `JSONSerializer` can be turned into OpenAPI V3 documentation
[02:59:04] *** Joins: guydb89 (~guy@98.200.9.228)
[02:59:18] <Axman6> I should learn how to use modern cabal...
[02:59:20] <noidedsuper> I think some kinda type-level "define a more robust document type and we'll generate a serializer/deserializer for you" thing could be cool but that much type-level programming might hurt me 
[02:59:39] *** Joins: frosky (~froskyarr@59.41.160.207)
[02:59:47] <janus> noidedsuper: what makes you think it would be a lot of type-level programming?
[02:59:56] *** Quits: frosky (~froskyarr@59.41.160.207) (Client Quit)
[03:00:10] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[03:00:11] <noidedsuper> I guess you could also do something where the Schema things are just values, yeah
[03:00:13] *** Quits: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56) (Quit: Leaving)
[03:00:35] <ManofLetters[m]> Axman6: easy, `cabal build`, `cabal list-bin exe:you_exe`, that's it
[03:00:51] <janus> noidedsuper: i know that you can derive docs from the serializer/parser, but that is the problem, why do i have to choose between those? when i write a haskell record with haddocks, the docs covers both construction and deconstruction
[03:01:08] <ManofLetters[m]> or `$(cabal list-bin exe:your_exe) --your_params`
[03:01:18] <janus> noidedsuper: i am trying to convince you that the serializer/deserializer should be derived from the schema, since i don't see a schema in your library
[03:01:30] <noidedsuper> I know you could use an `Iso`  to implement mapping over fields in both directions, but I'm not sure how to put `f (a -> b) -> f a -> f b` and `a -> (b, c) -> f b -> f c -> f a` into the same type. 
[03:01:48] *** Joins: frosky (~froskyarr@59.41.160.207)
[03:01:52] <noidedsuper> janus: it might help if you provided an example of what "a schema" might look like 
[03:02:02] <noidedsuper> Because I'm a bit confused I think 
[03:02:10] *** frosky is now known as FroskyArr
[03:02:23] <ManofLetters[m]> Axman6: and no more cabal hell: all versions and flags coexist like a happy family and are re-used if possible
[03:03:05] <ManofLetters[m]> and we totally need volunteers to keep cabal this way and fix lots of technical debt
[03:03:16] <ManofLetters[m]> e.g., the one that has just bitten `happy`
[03:03:23] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:03:59] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb958d78f02b280dc416.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[03:05:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[03:05:13] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 258 seconds)
[03:07:13] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[03:07:31] <janus> noidedsuper: you know how you can define aeson Parsers using applicative style
[03:07:44] <janus> noidedsuper: here is another example with a database library: https://github.com/flipstone/orville/blob/master/orville-postgresql/sample-project/Example/Schema/Student.hs#L31
[03:07:54] <janus> (disclaimer i work for flipstone)
[03:08:28] <janus> with aeson it is `Person <$> o .: "name" <*> o .: "age"`
[03:09:04] *** Joins: MQ-17J (~MQ-17J@8.21.10.23)
[03:09:07] <noidedsuper> I think where I'm struggling is how to turn that around so you can generate a serializer as well
[03:10:46] <noidedsuper> IE, if I run `(,) <$> o .: "name" <*> o .: "age"`, the compiler only sees `f (a -> b) <*> (f b)` for the last step. It doesn't know that `(,) <$> o .: "name"` is part of a constructor with two arguments, it just becomes an opaque function - for all I know it could be `(,) . (* 10)` or whatever
[03:11:38] <noidedsuper> which is why the current library separates them - the serialization version of `Applicative` is `Divisible`, where we *do* know that we're "breaking something into parts"
[03:11:49] *** Joins: hiruji (~hiruji@user/hiruji)
[03:13:36] *** Joins: burnside_ (~burnsides@client-8-85.eduroam.oxuni.org.uk)
[03:13:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[03:15:00] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 260 seconds)
[03:15:08] <janus> noidedsuper: you can tell each combinator (e.g. like (.:)) the name of the serialized key, and you can tell it how to extract that value from your record (the record field selector)
[03:15:43] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[03:15:45] <noidedsuper> Hmmm
[03:15:47] <janus> noidedsuper: so that can be transformed into a function that adds a key to an object
[03:16:18] <janus> noidedsuper: then, if you compose all these functions, and call it on the empty json object, you have a function that generates a filled json object from a haskell record
[03:16:34] <noidedsuper> I'll play around with that idea 
[03:17:14] <janus> noidedsuper: i think you may need type-level lists if you want to do sum types, but you can just rule that out to start with
[03:17:33] <janus> noidedsuper: of course, you can still do sum types if you rely on the user to write some boilerplate...
[03:18:09] *** Joins: frosky_ (~froskyarr@59.41.160.207)
[03:19:25] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[03:19:26] <janus> noidedsuper: aeson doesn't have the "optional" key setter, i believe. but argonaut has it: https://github.com/purescript-contrib/purescript-argonaut/blob/main/examples/Examples/Data/Argonaut/Record.purs#L33
[03:20:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Ping timeout: 264 seconds)
[03:20:22] <janus> noidedsuper: you can have the same, then it is possible to leave out a json key if the value is a maybe. you can argue that that makes it harder to infer the schema by looking at the value, but some would argue that you should already know the schema when looking at a value :P
[03:20:31] <noidedsuper> Yeah
[03:20:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[03:21:04] <noidedsuper> I dunno, I'm not sure I agree that this would be super useful but I'll see if I can do it I guess
[03:21:19] *** Quits: FroskyArr (~froskyarr@59.41.160.207) (Ping timeout: 258 seconds)
[03:21:26] <janus> yeah it just saves a few bytes. just wanted to mention it
[03:23:25] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[03:26:33] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[03:29:34] <noidedsuper> So you can do this but I think it would be sorta easy to write "incorrect" stuff with it, since you'd need to remember that you can't use fmap without also applying the inverse of `f` to the key-extractor function thing
[03:30:25] <noidedsuper> https://gist.github.com/AnthonySuper/7c8fcab8f31ad3d2ab4911c323294fdf 
[03:33:48] <janus> noidedsuper: what would be an example of incorrect use?
[03:36:18] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[03:36:35] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 260 seconds)
[03:37:04] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[03:39:13] <janus> "the inverse of `f`". the f is the record field selector here? it's inverse would be the record field value, we already have the key name
[03:40:22] <janus> in my head, BothSides would contain a list of Fields. the serializer and deserializer are derivable from that list.
[03:41:02] <noidedsuper> https://gist.github.com/AnthonySuper/a51be1414a9f63305fdcc9ec334f6299 
[03:41:12] <noidedsuper> problem 1 already exists if you screw up and give it the wrong object key I suppose
[03:41:48] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[03:42:11] <janus> i don't think problem 1 is solvable... if people are worried about things like that, they must use generics and have the key names autoderived, such that they will always correspond
[03:42:18] <noidedsuper> I dunno, I might be overthinking the scope of the issue here I suppose lol 
[03:44:19] <janus> hmm well i don't think people should be fmapping into the fields. just like you can't fmap into a lens
[03:44:37] <noidedsuper> fmap is a superclass of applicative though 
[03:44:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:44:49] <noidedsuper> I guess I coudl say "don't use it pls"
[03:45:24] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:45:39] <janus> you could also just not use applicative, use some other thing. i dunno
[03:45:55] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[03:46:07] <janus> but one more thing: each combinator could reference a child schema, and there could be schemas provided for common types like strings or datetime
[03:46:09] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[03:46:55] <janus> and there could be a "schemaWithDocString :: String -> Schema -> Schema"
[03:47:44] <noidedsuper> Yeah the docs part is difficult 
[03:47:46] <noidedsuper> actually
[03:48:03] <noidedsuper> Hmmmm. Maybe it isn't.
[03:48:08] <janus> such that you can do `personGivenName = schemaWithDocString "The given name of a person, not the family name. Mentioned last in china" stringSchema`
[03:48:27] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[03:48:55] <janus> which would have type `Schema String` such that it fits with the "firstName :: String" in the record
[03:50:14] *** Joins: off^ (~off@wsip-68-227-92-38.mc.at.cox.net)
[03:54:40] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[03:55:10] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 260 seconds)
[04:00:33] *** Quits: frosky_ (~froskyarr@59.41.160.207) (Quit: Leaving)
[04:06:59] *** Quits: InstX1 (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 264 seconds)
[04:08:56] <janus> noidedsuper: if we have a sum type `data Foo = A | B` we could have `tag2 :: Schema a -> Schema b -> Key -> String -> String` where the first string is the tag for the first case, and the second string is the tag for the second case. and the Key would be the key used to store the tag in the JSON
[04:09:48] <janus> ah, it would also need the constructors for the two cases and the "reverse constructor"
[04:10:14] *** Quits: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:43] <janus> the tricky thing is the reverse constructor which must decide which serializer to use. in the case of 2, it could return an "Either a b"
[04:12:01] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:12:03] <noidedsuper> That's what `Selectable` gets ya
[04:12:05] <noidedsuper> which is nice 
[04:12:11] <janus> ah ok
[04:12:21] <janus> but it would be boiler-platey right?
[04:13:43] <janus> oops tag2 should of course return "Schema (Either a b)", i forgot that
[04:14:51] <janus> but the definition of Foo is too boring, it should be "A String | B Int"
[04:15:40] *** Quits: MQ-17J (~MQ-17J@8.21.10.23) (Ping timeout: 260 seconds)
[04:17:20] <janus> then the call would be `tag2 stringSchema intSchema "tag" "a" "b" (\case A str -> Left str; B int -> Right int) :: Schema Foo)`... but now i forgot that it would also need A and B passed to it such that it can also construct a Foo...
[04:18:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:18:24] *** Joins: MQ-17J (~MQ-17J@8.6.144.186)
[04:19:18] <janus> i wonder how it looks with selectable with more than two cases
[04:21:10] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:22:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:23:30] *** Joins: pavonia (~user@user/siracusa)
[04:28:18] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[04:30:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[04:31:26] *** Quits: aa (~douglasco@200.146.85.128.static.gvt.net.br) (Read error: Connection reset by peer)
[04:31:35] *** Joins: aa (~douglasco@200.146.85.128.static.gvt.net.br)
[04:31:54] <noidedsuper> It's basically just nesting I think
[04:32:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:36:40] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[04:37:11] *** Quits: Boarders (sid425905@id-425905.lymington.irccloud.com) (Ping timeout: 245 seconds)
[04:37:36] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[04:37:54] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[04:37:59] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 258 seconds)
[04:39:25] *** Quits: truckasaurus (sid457088@helmsley.irccloud.com) (Ping timeout: 252 seconds)
[04:39:31] *** Quits: elvishjerricco (sid237756@helmsley.irccloud.com) (Ping timeout: 258 seconds)
[04:39:46] *** Quits: gaze___ (sid387101@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[04:40:10] *** Quits: grfn (sid449115@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[04:41:53] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[04:41:57] *** Joins: truckasaurus (sid457088@helmsley.irccloud.com)
[04:41:58] *** Joins: gaze___ (sid387101@id-387101.helmsley.irccloud.com)
[04:42:04] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[04:42:06] *** Joins: Boarders (sid425905@lymington.irccloud.com)
[04:42:09] *** Joins: sclv (sid39734@haskell/developer/sclv)
[04:42:59] *** Quits: whez (sid470288@lymington.irccloud.com) (Ping timeout: 264 seconds)
[04:43:21] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[04:43:24] <janus> noidedsuper: to generalize this in an arity safe maner, the tag values and the constructors (A, B, ...) and their schemata can be combined using a combinator. and then all those combined cases could be combined with a function that extracts the value from each case, in this case "... -> (Foo -> String) -> (Foo -> Int) -> Schema Foo". with applicative style, correspondence between the extracting function 
[04:43:30] <janus> and the combined tag-cases is ensured
[04:44:17] *** Quits: burnside_ (~burnsides@client-8-85.eduroam.oxuni.org.uk) (Remote host closed the connection)
[04:46:09] *** Joins: whez (sid470288@id-470288.lymington.irccloud.com)
[04:50:48] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[04:53:30] *** Joins: emf_ (~emf@2620:10d:c090:400::5:70ff)
[04:56:46] *** Quits: emf (~emf@2620:10d:c090:400::5:7558) (Ping timeout: 245 seconds)
[04:59:34] *** Quits: guydb89 (~guy@98.200.9.228) (Ping timeout: 260 seconds)
[05:01:14] *** Joins: guydb89 (~guy@98.198.129.114)
[05:01:28] <noidedsuper> I can play around with it!
[05:01:45] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 260 seconds)
[05:01:53] <noidedsuper> Tomorrow, unfortunately. But thanks for the feedback, Janus! It really helped. 
[05:02:32] *** Quits: noidedsuper (~manjaro-u@2601:280:5a81:520::f8be) (Remote host closed the connection)
[05:02:55] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[05:02:57] <janus> good, happy to help, i should mention that i didn't invent any of this, my ideas are taken from libraries such as Orville
[05:06:21] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[05:08:47] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 264 seconds)
[05:11:53] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:15:10] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 260 seconds)
[05:15:13] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[05:16:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:17:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[05:18:58] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:20:17] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:20:29] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[05:23:22] *** Quits: xff0x (~xff0x@port-92-195-26-90.dynamic.as20676.net) (Ping timeout: 260 seconds)
[05:23:52] *** Joins: zaquest (~notzaques@5.128.210.178)
[05:24:59] *** Joins: sedeki (~textual@user/sedeki)
[05:25:10] *** Joins: xff0x (~xff0x@2001:1a81:524c:400:5205:21d5:64e1:92)
[05:26:32] *** Joins: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com)
[05:27:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com) (Remote host closed the connection)
[05:28:10] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[05:29:41] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[05:30:50] *** Quits: mmhat (~mmh@55d4469f.access.ecotel.net) (Ping timeout: 260 seconds)
[05:36:25] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[05:36:31] *** Quits: guydb89 (~guy@98.198.129.114) (Remote host closed the connection)
[05:42:35] *** Quits: MQ-17J (~MQ-17J@8.6.144.186) (Ping timeout: 260 seconds)
[05:43:17] *** Joins: mmhat (~mmh@55d45798.access.ecotel.net)
[05:46:05] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 260 seconds)
[05:49:30] *** Joins: econo (uid147250@user/econo)
[05:51:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[06:02:34] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[06:03:55] *** Quits: alx741 (~alx741@186.178.109.50) (Quit: alx741)
[06:11:00] *** Joins: wroathe (~wroathe@user/wroathe)
[06:12:23] *** Quits: td_ (~td@94.134.91.144) (Ping timeout: 264 seconds)
[06:14:06] *** Joins: td_ (~td@94.134.91.188)
[06:15:15] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:16:27] *** Quits: mmhat (~mmh@55d45798.access.ecotel.net) (Quit: WeeChat 3.3)
[06:16:30] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 258 seconds)
[06:16:48] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:17:14] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:30:02] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[06:30:33] *** Joins: favonia (~favonia@user/favonia)
[06:31:32] *** Joins: haasn (~nand@haasn.dev)
[06:33:20] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[06:38:44] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 258 seconds)
[06:43:10] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[06:43:41] *** Quits: connrs (~connrs@conners.plus.com) (Read error: Connection reset by peer)
[06:46:24] *** Joins: connrs (~connrs@conners.plus.com)
[06:53:47] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:54:26] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:57:31] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 258 seconds)
[06:58:53] *** Joins: benin0 (~benin@183.82.179.164)
[06:59:07] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 252 seconds)
[06:59:07] *** benin0 is now known as benin
[07:00:43] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:01:22] <jackdk> I'm trying to use servant-server's UVerb machinery, and am getting a strange type error: `Expected one of: '[WithStatus 200 [StoredResourceData id]], but got: WithStatus 200 [StoredResourceData id]`. I suspect that it's a type family thing: that the open union membership test fails before the type families reduce to being equal - should I be looking for ways to delay/force type family evaluation?
[07:01:52] <jackdk> `StoredResourceData :: Type -> Type` is an associated type family I've written for a `class Resource id`
[07:07:26] <jackdk> Here is a minimal example, using servant and servant-server 0.18.3 https://www.irccloud.com/pastebin/Zui39kYI/servant-generic-error.hs
[07:08:06] <jackdk> The error appears on the call to `respond`
[07:08:20] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[07:10:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:13:43] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[07:13:46] *** Joins: Everything (~Everythin@37.115.210.35)
[07:13:59] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:16:43] <jackdk> https://github.com/haskell-servant/servant/issues/1381 seems to be related but I don't completely follow the discussion.
[07:35:15] *** Joins: Stotteren (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net)
[07:35:18] *** Joins: Gestotterd (~Stotteren@pool-108-20-79-41.bstnma.fios.verizon.net)
[07:42:26] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[07:42:43] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[07:46:28] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[07:47:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:47:35] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[07:49:16] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[07:49:33] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[07:49:42] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[07:51:06] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[07:53:16] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[07:53:33] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[07:55:05] <hololeap> extendWith :: Comonad w => (w a -> b) -> w a -> w (a,b)
[07:55:13] <hololeap> extendWith f w = let a = extract w in (a,) <$> extend f w
[07:55:18] <hololeap> does this look reasonable?
[07:56:02] <hololeap> I'm just trying to use extend but keep the previous value around. is there a more idiomatic way to do this?
[07:56:56] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru)
[07:59:30] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[07:59:48] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:02:01] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:03:41] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:03:59] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:06:14] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:08:00] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:08:10] *** Joins: favonia (~favonia@user/favonia)
[08:08:18] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:09:59] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:10:17] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:10:57] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[08:12:25] *** Joins: Guest32 (~Guest32@2603-8000-3f42-d500-c5e7-f6b2-1524-e2a0.res6.spectrum.com)
[08:14:14] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:14:31] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:15:15] *** Quits: Guest32 (~Guest32@2603-8000-3f42-d500-c5e7-f6b2-1524-e2a0.res6.spectrum.com) (Client Quit)
[08:18:12] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:18:29] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:19:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:21:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[08:24:26] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:24:26] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[08:24:28] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru) (Quit: EXIT)
[08:24:44] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:26:25] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:26:42] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:28:23] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:28:41] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:29:57] *** Joins: sedeki (~textual@user/sedeki)
[08:32:22] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:32:40] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:34:21] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:34:38] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:36:19] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:36:36] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:36:45] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[08:38:26] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:38:44] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:40:25] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:40:42] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:42:23] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:42:40] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:44:21] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:44:39] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:44:47] *** Quits: off^ (~off@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 264 seconds)
[08:46:27] *** Joins: off^ (~off@wsip-68-227-92-38.mc.at.cox.net)
[08:46:27] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:46:45] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:46:47] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[08:48:27] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:48:45] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:55:02] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:55:20] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:57:52] *** Joins: ski (~ski@remote12.chalmers.se)
[08:57:55] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[08:58:12] *** Joins: kong4ndrew (~kong4ndre@199.247.111.247)
[08:59:53] *** Quits: kong4ndrew (~kong4ndre@199.247.111.247) (Remote host closed the connection)
[09:03:29] *** Joins: michalz (~michalz@185.246.204.93)
[09:09:24] *** Joins: alzgh (~alzgh@user/alzgh)
[09:11:47] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:17:17] *** Joins: InstX1 (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[09:22:14] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:23:48] *** Joins: hololeap (~hololeap@user/hololeap)
[09:24:13] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[09:33:28] <hololeap> @hoogle Comonad w => (w a -> b) -> w a -> w (a,b)
[09:33:29] <lambdabot> No results found
[09:34:29] *** Joins: ubert (~Thunderbi@77.119.208.184.wireless.dyn.drei.com)
[09:34:39] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[09:36:01] *** Joins: hololeap (~hololeap@user/hololeap)
[09:36:21] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 245 seconds)
[09:36:41] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (Quit: WeeChat 2.8)
[09:36:59] *** Joins: joeyh_ (joeyh@kitenet.net)
[09:37:08] *** Quits: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com) (Read error: Connection reset by peer)
[09:37:11] *** Joins: echoreply (~echoreply@45.32.163.16)
[09:37:19] *** Joins: statusbot (~statusbot@ec2-34-198-122-184.compute-1.amazonaws.com)
[09:37:36] *** Quits: joeyh (joeyh@kitenet.net) (Ping timeout: 245 seconds)
[09:37:36] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 245 seconds)
[09:38:24] *** Joins: remexre (~remexre@user/remexre)
[09:39:35] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[09:39:59] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:40:15] <InstX1> uouououo
[09:40:51] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[09:44:36] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:45:21] <hololeap> me too!
[09:45:46] <ski> % :type (<<=) . (extract &&&)
[09:45:46] <yahb> ski: Comonad w => (w a -> c') -> w a -> w (a, c')
[09:47:03] <hololeap> % :type (extract &&&)
[09:47:03] <yahb> hololeap: Comonad w => (w c -> c') -> w c -> (c, c')
[09:47:14] <hololeap> % :type (e&&&)
[09:47:14] <yahb> hololeap: ; <interactive>:1:2: error: Variable not in scope: e :: a b c
[09:47:16] <hololeap> % :type (&&&)
[09:47:16] <yahb> hololeap: Arrow a => a b c -> a b c' -> a b (c, c')
[09:47:18] <ski> % :type \f -> (=>> \wa -> (extract wa,f wa))
[09:47:18] <yahb> ski: Comonad w => (w a -> b) -> w a -> w (a, b)
[09:48:10] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[09:49:00] *** Joins: _xor (~xor@72.49.199.147)
[09:49:42] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[09:50:01] *** Joins: _xor (~xor@72.49.199.147)
[09:51:31] *** Quits: favonia (~favonia@user/favonia) (Remote host closed the connection)
[09:51:37] <hololeap> % :type \f w -> extend f (EnvT (extract w) w)
[09:51:37] <yahb> hololeap: ; <interactive>:1:19: error: Data constructor not in scope: EnvT :: t -> w1 t -> w a
[09:51:53] <hololeap> % import Control.Comonad.Env
[09:51:53] <yahb> hololeap: 
[09:51:57] <hololeap> % :type \f w -> extend f (EnvT (extract w) w)
[09:51:57] <yahb> hololeap: Comonad w => (EnvT a w a -> b) -> w a -> EnvT a w b
[09:52:57] <hololeap> well my first one is probably easiest to understand :D
[09:53:19] <ski> what's it supposed to do ?
[09:53:33] <hololeap> it should be pretty clear from the type signature
[09:53:43] <ski> % :i EnvT
[09:53:43] <yahb> ski: type role EnvT representational representational nominal; type EnvT :: * -> (* -> *) -> * -> *; data EnvT e w a = EnvT e (w a); -- Defined in `Control.Comonad.Trans.Env'; instance [safe] (Monoid e, Applicative m) => Applicative (EnvT e m) -- Defined in `Control.Comonad.Trans.Env'; instance [safe] Functor w => Functor (EnvT e w) -- Defined in `Control.Comonad.Trans.Env'; instance [safe] Traversable w 
[09:54:25] <hololeap> EnvT is irrelevant. I just want to use `extend` while keeping the original `a` around
[09:55:08] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[09:55:19] <hololeap> it doesn't even have to be it's own function, really... I could just extract `a` before running extend
[09:58:40] *** Joins: mbuf (~Shakthi@171.61.241.145)
[09:59:11] *** Quits: ubert (~Thunderbi@77.119.208.184.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[10:03:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) ()
[10:06:49] *** Joins: fendor (~fendor@178.115.78.81.wireless.dyn.drei.com)
[10:07:37] *** Joins: jakalx (~jakalx@base.jakalx.net)
[10:13:03] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:15:19] *** Quits: zaquest (~notzaques@5.128.210.178) (Ping timeout: 258 seconds)
[10:16:28] *** Quits: timCF_ (~timCF@m91-129-111-87.cust.tele2.ee) (Ping timeout: 258 seconds)
[10:16:52] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:17:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:18:07] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2041:32a6:242d:4938)
[10:18:11] *** Joins: zaquest (~notzaques@5.128.210.178)
[10:21:27] *** Quits: jonathanx (~jonathan@178.174.176.109) (Ping timeout: 258 seconds)
[10:22:01] *** Joins: mei (~mei@user/mei)
[10:26:19] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:28:41] *** Joins: benin1 (~benin@106.198.91.7)
[10:29:37] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[10:30:45] *** Quits: benin (~benin@183.82.179.164) (Ping timeout: 260 seconds)
[10:30:45] *** benin1 is now known as benin
[10:30:59] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 264 seconds)
[10:32:06] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[10:34:14] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:34:20] *** Joins: favonia (~favonia@user/favonia)
[10:35:00] <Inst> erm
[10:35:03] <Inst> could I have some help?
[10:35:43] <Inst> I already finished my textbook's intro information on typeclasses, but I'm still having difficulty concerning the notation used in :type
[10:35:49] *** Joins: wonko (~wjc@62.115.229.50)
[10:36:02] <Inst> type a => a -> b -> a etc...
[10:36:09] <Inst> this is an existing mathematical notation, right?
[10:36:25] <Inst> what's the name of it? I'd like to be able to look up the notation individually
[10:37:09] <dibblego> "Haskell"
[10:39:13] <c_wraith> Haskell is a lot less based on math than some would have you believe.
[10:40:13] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:44:01] <pavonia> Inst: What part of that is confusing to you?
[10:44:27] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[10:45:08] <Inst> on the left side, you have inputs, on the right side, you have outputs
[10:45:11] <Inst> that much I understand
[10:45:27] <Inst> why you have a -> a or a -> b -> a, on the other hand, I don't see the pattern
[10:45:32] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[10:45:38] <dibblego> -> is right-associative
[10:45:42] <dibblego> a -> b -> a
[10:45:44] <dibblego> a -> (b -> a)
[10:46:07] *** Joins: mei (~mei@user/mei)
[10:46:16] <dibblego> function application (space) is left-associative
[10:46:25] <dibblego> > const 7 "abc"
[10:46:25] <xsperry> a and b are type variables. names can be arbitrary, but there are some common conventions
[10:46:26] <lambdabot>  7
[10:46:30] <dibblego> > (const 7) "abc"
[10:46:31] <lambdabot>  7
[10:46:35] <Inst> i'll probably be fine on my own, reading existing texts
[10:46:51] <xsperry> :t id
[10:46:52] <lambdabot> a -> a
[10:47:04] <pavonia> Inst: x => y is not inputs and outputs, x are type constraints, y is the actual type of the function
[10:47:10] <xsperry> a in id declaration stands for any type
[10:47:30] <Inst> for x, y, then?
[10:48:47] <pavonia> I don't understand the question
[10:49:34] <Inst> read x => y as "for x, y" then?
[10:50:10] <xsperry> section left of => constrains types
[10:50:51] <yushyin> 'type y restricted by the context x'
[10:51:29] <xsperry> :t (+)
[10:51:31] <lambdabot> Num a => a -> a -> a
[10:51:37] <Inst> okay, fine
[10:51:42] <c_wraith> Haskell types do have an implicit top-level forall on all the type variables in them.
[10:51:43] <xsperry> type a has to be instance of Num typeclass
[10:51:55] <Inst> i see, thanks, still not getting it, but i have to leave soon
[10:51:55] <c_wraith> If that's a thing you're wondering about
[10:52:49] <Inst> heh
[10:52:50] <Inst> https://serokell.io/files/5x/5xzv88ej.TopReasons.png
[10:53:20] <ski> @type sort
[10:53:21] <lambdabot> Ord a => [a] -> [a]
[10:54:35] <ski> `sort' is a function taking a list of values of type `a' as input, and produces a list of values of type `a' as output, for all types `a', provided `a' is in the type class `Ord' (`Ord a' can be read as values of type `a' supporting ordering comparision)
[10:55:12] <ski> @type take
[10:55:13] <lambdabot> Int -> [a] -> [a]
[10:56:02] <ski> `take' is a function taking an `Int' as input, and producing another function as output, that in turn takes a list of `a's, producing a list of `a' -- again for all types `a' (no restriction this time)
[10:59:57] *** Joins: chele (~chele@user/chele)
[11:00:18] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[11:06:32] *** Joins: jumper149 (~jumper149@80.240.31.34)
[11:10:36] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[11:19:34] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb878d78f02b280dc416.dip0.t-ipconnect.de)
[11:22:57] *** Joins: oskar_greda (~oskar_gre@84.65.227.20)
[11:24:17] *** Quits: aegon (~mike@174.127.249.180) (Remote host closed the connection)
[11:27:14] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:30:07] *** Joins: ubert (~Thunderbi@77.119.198.223.wireless.dyn.drei.com)
[11:31:05] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[11:38:07] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:38:14] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:40:16] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:41:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:46:07] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[11:46:31] *** Quits: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[11:46:54] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[11:47:16] *** Joins: benin5 (~benin@183.82.207.116)
[11:47:26] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:47:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:49:30] *** Quits: benin (~benin@106.198.91.7) (Ping timeout: 260 seconds)
[11:49:30] *** benin5 is now known as benin
[11:49:38] *** Joins: ub (~Thunderbi@77.119.198.223.wireless.dyn.drei.com)
[11:50:04] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Ping timeout: 252 seconds)
[11:51:00] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Quit: ZNC 1.8.2 - https://znc.in)
[11:52:18] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 258 seconds)
[11:52:31] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Read error: Connection reset by peer)
[11:56:20] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb87897f933eeab9e85f.dip0.t-ipconnect.de)
[11:59:19] *** Quits: oskar_greda (~oskar_gre@84.65.227.20) (Quit: Client closed)
[11:59:58] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb878d78f02b280dc416.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:00:32] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[12:00:52] *** Joins: alzgh (~alzgh@user/alzgh)
[12:01:51] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[12:05:31] *** Quits: rune (sid21167@ilkley.irccloud.com) (Ping timeout: 245 seconds)
[12:06:27] *** Quits: hubvu (sid495858@user/hubvu) (Read error: Connection reset by peer)
[12:06:29] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Ping timeout: 258 seconds)
[12:06:36] *** Joins: hubvu (sid495858@user/hubvu)
[12:07:25] *** Joins: acidjnk_new3 (~acidjnk@pd9e0b933.dip0.t-ipconnect.de)
[12:08:01] *** Quits: teehemkay (sid14792@lymington.irccloud.com) (Ping timeout: 245 seconds)
[12:08:13] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[12:08:41] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[12:08:46] *** Quits: Adeon (sid418992@lymington.irccloud.com) (Ping timeout: 252 seconds)
[12:09:16] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (Ping timeout: 252 seconds)
[12:09:32] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[12:10:28] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[12:10:35] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[12:10:42] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb87897f933eeab9e85f.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[12:12:24] *** Quits: kristjansson_ (sid126207@tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:12:48] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[12:13:55] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 265 seconds)
[12:15:06] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 245 seconds)
[12:15:59] *** Quits: mrianbloom (sid350277@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[12:16:08] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d)
[12:17:07] *** Joins: mcfilib (sid302703@user/mcfilib)
[12:18:10] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[12:18:59] *** Quits: hook54321 (sid149355@user/hook54321) (Ping timeout: 264 seconds)
[12:19:09] *** Joins: mrianbloom (sid350277@id-350277.ilkley.irccloud.com)
[12:19:28] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:19:51] *** Joins: quintasan (~quassel@quintasan.pl)
[12:20:32] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:21:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:21:26] *** Joins: hook54321 (sid149355@user/hook54321)
[12:22:32] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[12:22:36] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Remote host closed the connection)
[12:23:30] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[12:26:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[12:29:00] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[12:29:30] *** Joins: Matheo_bis (~matheo@user/matheo-bis/x-4309430)
[12:34:32] *** Joins: cfricke (~cfricke@user/cfricke)
[12:36:05] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[12:43:32] *** Joins: mvk (~mvk@2607:fea8:5cc1:300::4b63)
[12:43:51] *** Quits: anoe (~anoe@delanoe.org) (Quit: Lost terminal)
[12:48:00] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d) (Quit: Client closed)
[12:48:26] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d)
[12:49:05] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:50:53] *** Joins: rdz1789 (~rdz1789@139.47.40.241)
[12:54:58] *** Joins: neurocyte0132889 (~neurocyte@195.80.52.7)
[12:54:58] *** Quits: neurocyte0132889 (~neurocyte@195.80.52.7) (Changing host)
[12:54:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:55:45] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:56:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:06:21] *** Quits: mvk (~mvk@2607:fea8:5cc1:300::4b63) (Ping timeout: 245 seconds)
[13:11:04] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[13:13:57] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[13:16:34] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[13:17:48] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Quit: mikoto-chan)
[13:18:54] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 260 seconds)
[13:20:30] *** Quits: ubert (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[13:20:30] *** ub is now known as ubert
[13:21:00] *** Quits: Matheo_bis (~matheo@user/matheo-bis/x-4309430) (Quit: Konversation terminated!)
[13:23:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[13:25:22] *** Joins: pavonia (~user@user/siracusa)
[13:26:02] *** Joins: pmk (~user@2a02:587:9414:7d03:fb87:7810:40ab:edc0)
[13:26:14] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:26:42] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[13:27:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Ping timeout: 264 seconds)
[13:29:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:30:09] *** Quits: tinwood (~tinwood@canonical/tinwood) (Remote host closed the connection)
[13:30:37] *** Joins: __monty__ (~toonn@user/toonn)
[13:33:09] *** Joins: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io)
[13:33:09] *** Quits: tinwood (~tinwood@general.default.akavanagh.uk0.bigv.io) (Changing host)
[13:33:09] *** Joins: tinwood (~tinwood@canonical/tinwood)
[13:36:26] *** Quits: michalz (~michalz@185.246.204.93) (Remote host closed the connection)
[13:37:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:39:49] *** Joins: michalz (~michalz@185.246.204.73)
[13:45:41] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:2fb4:6165:4fdd:161d) (Quit: Client closed)
[13:48:41] *** Joins: Farzad (~FarzadBek@178.131.30.153)
[13:52:23] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:52:40] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:58:44] *** Joins: mmhat (~mmh@55d45798.access.ecotel.net)
[14:06:00] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[14:06:35] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[14:11:24] *** Joins: ubert1 (~Thunderbi@77.119.198.223.wireless.dyn.drei.com)
[14:11:26] *** Joins: _bo (~bo@217.18.216.247)
[14:16:44] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[14:19:07] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[14:19:48] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[14:20:27] *** Joins: gensyst (gensyst@user/gensyst)
[14:20:54] <gensyst> I have a strange/noobish question about EDSLs, compiling Haskell code, and executables.
[14:20:55] <gensyst> Is it considered normal to have an EDSL in Haskell that "users" (e.g. programmers in my company) use to write their domain-specific "programs" (written in the EDSL) and run these programs by running GHC and running the binary executable over and over again?
[14:21:16] <gensyst> I think this is strange for two reasons:
[14:21:27] <gensyst> 1) You're running GHC every time for every little change in the domain-specific "program" (e.g. tweaking some parameter), so you're sort of "abusing" Haskell as a scripting language.
[14:21:29] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[14:21:45] <gensyst> 2) Isn't the whole point of Haskell to execute GHC once, get one binary executable once, and then run that executable thousands of times instead of... running GHC thousands of times and each of the thousand binary executables only once?
[14:21:51] <gensyst> Do you see what I mean? Some thoughts on this I'd appreciate a lot!
[14:23:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[14:27:04] <lortabac> gensyst: if I understand correctly, they are using a Haskell library to make programs that they compile with GHC
[14:27:15] <lortabac> I don't see anything wrong with this
[14:27:38] *** Joins: nsilv (~NSilv@host-87-15-180-17.retail.telecomitalia.it)
[14:27:43] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[14:27:57] <gensyst> lortabac, A part of me thinks it's a bit weird to be running "cabal build; cabal exec" all the time...
[14:28:03] <lortabac> except the requirement to install GHC, cabal etc.
[14:28:17] <lortabac> if these are non-tech people that's a different story
[14:28:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[14:28:47] <lortabac> in that case maybe you want to find a solution that doesn't require knowledge of Haskell compilation
[14:29:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:30:50] *** Joins: alx741 (~alx741@186.178.109.50)
[14:31:16] <gensyst> well they're technical enough to plug and play things together with haskell and run cabal.
[14:31:24] <gensyst> my question was just why this isn't strange lol
[14:31:48] <lortabac> another question is, do they already have all the cabal machinery?
[14:31:52] <gensyst> Hmm on the other hand, I am aware of e.g. the turtle library (shell scripting in Haskell), so scripting in Haskell isn't maybe all that weird
[14:32:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[14:32:48] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:32:55] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[14:34:49] <gensyst> that part's not an issue. they can set up cabal
[14:34:50] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[14:35:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[14:35:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:35:45] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 260 seconds)
[14:35:54] *** Quits: nsilv (~NSilv@host-87-15-180-17.retail.telecomitalia.it) (Quit: WeeChat 2.7.1)
[14:38:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[14:39:50] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[14:41:59] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[14:42:00] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[14:45:12] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[14:46:02] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[14:46:49] <geekosaur> gensyst, it may not even require cabal. there's runghc
[14:47:12] <gensyst> yeah, i use runghc. makes it convenient
[14:47:18] <geekosaur> especially helpful if you're constantly making small changes and testing, you can skip the compile step. of coyurse it'll be slower since it's interpreted
[14:47:23] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:47:41] <gensyst> oh sorry. i wasn't aware of runghc actually lol. (confused it with ghcup)
[14:47:44] <ggVGc> wish there was a multi-module version of runghc
[14:47:50] *** Joins: hiruji (~hiruji@user/hiruji)
[14:48:01] <ggVGc> but I guess that would become very complicated very fast
[14:48:17] <gensyst> geekosaur, but is this practice of EDSL & running ghc over and over again considered "natural"?
[14:48:35] *** Quits: off^ (~off@wsip-68-227-92-38.mc.at.cox.net) (Ping timeout: 260 seconds)
[14:48:38] <hughjfchen> gensyst: i think you can take a look at propellor
[14:49:03] <geekosaur> "natural" is in the eye of the beholder. if it works for you, that's enough
[14:49:07] <hughjfchen> it
[14:49:50] <ggVGc> is propellor like ansible?
[14:50:05] <hughjfchen> is a config management using haskell lang to write config property
[14:50:25] <ggVGc> does it serve the same use-cases one would use ansible for?\
[14:51:03] <ggVGc> seems like it
[14:51:22] <merijn> ggVGc: cabal-install supports scripting so you can use it like runghc, but with library dependencies :p
[14:51:47] <merijn> ggVGc: The documentation of this feature can be called...Spartan, though :p
[14:51:50] <ggVGc> merijn: realy? I was looking for that a while back, but couldn't find anything
[14:52:12] <merijn> Has existed for, at least, 2 years
[14:52:23] <merijn> ggVGc: But I don't think hvr ever got around to writing docs
[14:53:13] <merijn> ggVGc: https://github.com/haskell/cabal/issues/3843
[14:55:36] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[14:56:06] <ggVGc> nice, thanks! Will have to give it a go when I get back to my haskell project, after these two physics exams which I am sure to fail
[14:57:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[14:58:54] <gensyst> geekosaur, hmmmmm ok.
[15:00:04] <merijn> I mean, basically this question boils down to "what do you think of staged compilation?"
[15:00:27] <merijn> And my opinion would generally be "staged compilation is great, I wish GHC had better support!"
[15:01:04] <merijn> TH is kinda staged compilation, but with fucky interactions and lack of clear boundaries/separation
[15:01:10] <gensyst> well, doesn't EDSL sort of *imply* that's the way you're going to do things?
[15:01:19] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[15:01:47] <gensyst> it implies you're going to be doing stuff at Haskell level (to benefit from type system) instead of reusing final binary executables (or composing such binary executables)
[15:02:25] *** Quits: ubert (~Thunderbi@77.119.198.223.wireless.dyn.drei.com) (Remote host closed the connection)
[15:02:25] *** ubert1 is now known as ubert
[15:02:54] <gensyst> the question was basically, is it "ok" to compile all the time. i think you guys are saying there's nothing wrong with it, so i'll just do it i guess :D
[15:03:27] * Rembane_ shakes fist at TH 
[15:04:01] <geekosaur> gensyst, take a look at xmonad. you may be mod-q recompiling quite a  bit at first until you decide you're satisfied with the result. (of course you may then not touch it for years…)
[15:05:57] <geekosaur> (xmonad = window manager EDSL)
[15:05:58] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[15:06:09] <gensyst> ok that's cool
[15:06:17] <gensyst> gives me more confidence
[15:06:24] <gensyst> this is the way :D
[15:09:20] *** Joins: osa1 (~osa1@178.233.26.94)
[15:10:25] <gensyst> geekosaur, hmm wow. somehow xmonad will use this new .o file? allowing you to plug and play
[15:10:42] <gensyst> at run time
[15:10:48] <gensyst> how...
[15:11:02] <osa1> Does QuickCheck's shrink (https://hackage.haskell.org/package/QuickCheck-2.10/docs/Test-QuickCheck-Arbitrary.html#v:shrink) do depth-first or breadth-first search? When it finds a shrunk example that fails, does it search further (if so, for how long?), or stop and return the first one it finds?
[15:12:36] <ggVGc> merijn: maybe I misunderstood. Should this allow me to make import another file in the same directory in a Main.hs file?
[15:12:43] <ggVGc> -make
[15:13:10] <ggVGc> merijn: e.g https://gist.github.com/0792e113c9b894f854e4675b221aefc6 and then have a Test/Foo.hs file in the same directory
[15:13:49] <ggVGc> This is what I get, https://gist.github.com/c595db27571a9ac7da18d92e417b85bd
[15:14:02] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:14:36] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[15:14:59] *** Joins: neurocyte0132889 (~neurocyte@195.80.52.7)
[15:14:59] *** Quits: neurocyte0132889 (~neurocyte@195.80.52.7) (Changing host)
[15:14:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:17:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:18:51] *** Joins: Guest28 (~Guest28@2601:281:d480:2ce0:28de:914f:fac6:10b7)
[15:19:17] <geekosaur> xmonad compiles the new config and then does a Unix exec()on it, replacing itself with the new config
[15:19:34] <geekosaur> there is a way tio do binary plugins in Haskell but it's kinda painful
[15:19:50] <geekosaur> @hackage plugins
[15:19:50] <lambdabot> https://hackage.haskell.org/package/plugins
[15:19:56] <gensyst> ok great!
[15:20:08] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[15:20:10] <gensyst> thank you all for these tips and tricks!
[15:20:17] <gensyst> i can carry on now with confidence
[15:21:00] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[15:22:17] <merijn> ggVGc: Not sure about that. I meant more that you can depend on packages beyond just what's normally pre-installed
[15:24:05] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[15:25:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[15:25:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 252 seconds)
[15:27:51] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:29:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[15:29:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Ping timeout: 252 seconds)
[15:33:06] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 258 seconds)
[15:36:33] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[15:38:03] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[15:39:00] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[15:40:32] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[15:41:08] *** Joins: neurocyte0132889 (~neurocyte@195.80.52.7)
[15:41:08] *** Quits: neurocyte0132889 (~neurocyte@195.80.52.7) (Changing host)
[15:41:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[15:49:24] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[15:52:13] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[15:52:24] *** Parts: osa1 (~osa1@178.233.26.94) ()
[15:56:41] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[15:58:14] *** Joins: jespada (~jespada@2803:9800:9842:7a62:9560:3718:bb2f:f5ee)
[15:59:08] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:01:18] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:01:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:01:53] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:04:08] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:04:08] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[16:04:51] *** Joins: MQ-17J (~MQ-17J@8.21.10.17)
[16:05:24] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[16:07:38] *** Quits: favonia (~favonia@user/favonia) (Remote host closed the connection)
[16:07:59] *** Joins: favonia (~favonia@user/favonia)
[16:12:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[16:12:58] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 260 seconds)
[16:13:41] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[16:14:15] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[16:17:56] *** Quits: Guest28 (~Guest28@2601:281:d480:2ce0:28de:914f:fac6:10b7) (Quit: Client closed)
[16:19:48] *** Joins: max22- (~maxime@2a01cb0883359800acc7df5c88e6f73e.ipv6.abo.wanadoo.fr)
[16:19:58] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[16:20:25] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[16:23:37] *** Joins: zebrag (~chris@user/zebrag)
[16:24:58] <ggVGc> merijn: might still start using this for my lab reports...
[16:25:37] *** Joins: ixosa (~xaaxor@251.222.198.146.dyn.plus.net)
[16:25:48] <ggVGc> was contemplating taking my lab notes in haskell to easily have the calculated results from the same source when I write the report, but hesitated because of execution complications. So currently unhappily using python
[16:31:09] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[16:31:45] *** Quits: ixosa (~xaaxor@251.222.198.146.dyn.plus.net) (Ping timeout: 258 seconds)
[16:32:30] *** Joins: iqofi (~ixosa@217.138.222.92)
[16:35:34] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[16:37:15] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:38:16] *** Joins: floridmarshmallo (~nate@pool-100-19-29-41.phlapa.fios.verizon.net)
[16:38:41] *** Quits: floridmarshmallo (~nate@pool-100-19-29-41.phlapa.fios.verizon.net) (Client Quit)
[16:43:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:45:09] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[16:47:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[16:51:29] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[16:51:56] *** Joins: sagax (~sagax_nb@user/sagax)
[16:52:08] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[16:53:26] *** Quits: benin (~benin@183.82.207.116) (Quit: The Lounge - https://thelounge.chat)
[16:56:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[16:58:40] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 260 seconds)
[16:59:05] *** Joins: floridmarshmallo (~quickspin@pool-100-19-29-41.phlapa.fios.verizon.net)
[16:59:28] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[16:59:34] *** Quits: floridmarshmallo (~quickspin@pool-100-19-29-41.phlapa.fios.verizon.net) (Client Quit)
[17:00:41] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[17:05:05] *** Joins: xiongxin (~quassel@113.116.32.4)
[17:07:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:07:36] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[17:07:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:08:45] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 265 seconds)
[17:09:19] *** Quits: mniip (mniip@libera/staff/mniip) (Remote host closed the connection)
[17:10:11] *** Joins: favonia (~favonia@user/favonia)
[17:11:30] *** Quits: michalz (~michalz@185.246.204.73) (Ping timeout: 260 seconds)
[17:14:01] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 252 seconds)
[17:14:12] *** Joins: mniip (~mniip@libera/staff/mniip)
[17:17:22] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 260 seconds)
[17:17:36] *** Joins: hippoid (~idris@184.105.6.88)
[17:18:05] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:18:05] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:18:05] *** Joins: wroathe (~wroathe@user/wroathe)
[17:18:34] <hippoid> :t \f g x y -> f (g x y)
[17:18:35] <lambdabot> (t1 -> t2) -> (t3 -> t4 -> t1) -> t3 -> t4 -> t2
[17:19:13] <hippoid> I want to create a type alias for that function type
[17:19:33] <hippoid> (t1 -> t2) -> (t3 -> t4 -> t1) -> t3 -> t4 -> t2
[17:20:03] <hippoid> type F = (t1 -> t2) -> (t3 -> t4 -> t1) -> t3 -> t4 -> t2
[17:20:13] <hippoid> does not work
[17:20:26] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 258 seconds)
[17:21:24] <geekosaur> no, you really need to pass the types as parameters
[17:21:57] <geekosaur> since otherwise they can't unify with any other type (and how would you specify which type is which?)
[17:22:24] <geekosaur> type F t1 t2 t3 t4 = ...
[17:24:23] *** Quits: MQ-17J (~MQ-17J@8.21.10.17) (Ping timeout: 264 seconds)
[17:25:21] <hippoid> geekosaur: I don't know where to start to answer your question "how would you specify which type is which"
[17:25:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[17:26:01] <merijn> hippoid: Let's rewind, what do you think the behaviour of that alias would be?
[17:26:27] <pavonia> Perhaps they actually want type F = forall t1 t2 t3 t4. ...
[17:26:29] <merijn> geekosaur: I mean, it could be a Rank2 alias, but I find that questionable as well
[17:26:36] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[17:26:57] <merijn> pavonia: Yes, I realise that that *might* be the solution. That's why I asked why/what they want it to do
[17:27:16] <merijn> pavonia: Preemptively handing out rope like Rank2 types is generally...not helpful to beginners :p
[17:28:01] <hippoid> merijn: to rewind further, I'm trying to do Eta reduction on the function \f g x y -> f (g x y) to get it into point-free style, and I'm using QuickCheck to test my equivalances. I want to pass the function into my property test, and that's why I want an alias for that long function type
[17:28:15] <pavonia> Fair enough
[17:30:17] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:30:21] <hippoid> like this https://paste.tomsmeding.com/jFMbE1G6
[17:30:42] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[17:30:44] <lyxia> For QuickCheck you will have to choose some concrete types for t1 ... t4 anyway
[17:31:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 265 seconds)
[17:31:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Ping timeout: 264 seconds)
[17:33:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:34:38] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[17:36:11] <hippoid> ok, i got it working well enough. thanks!
[17:38:12] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:39:27] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:39:45] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[17:40:48] *** Quits: xiongxin (~quassel@113.116.32.4) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:41:08] *** Joins: favonia (~favonia@user/favonia)
[17:41:40] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[17:43:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[17:44:10] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[17:45:20] *** Quits: rdz1789 (~rdz1789@139.47.40.241) (Ping timeout: 260 seconds)
[17:47:24] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2041:32a6:242d:4938) (Quit: WeeChat 2.8)
[17:49:35] *** Quits: hippoid (~idris@184.105.6.88) (Quit: leaving)
[17:50:30] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 260 seconds)
[17:50:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:50:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:50:41] *** Joins: wroathe (~wroathe@user/wroathe)
[17:50:41] <AWizzArd> There are plenty streaming libs for GHC. Pipes. Conduit. Streams. Streamly. To name a few.
[17:51:59] <AWizzArd> Do they all offer a way to take a set of items out of the stream (i.e. a certain number of bytes, a number of lines, like `take n`) and get ([a], RestOfStream)?
[17:53:04] *** Quits: ystael (~ystael@user/ystael) (Quit: Lost terminal)
[17:53:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:54:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:54:47] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:55:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:56:47] *** Quits: acidjnk_new3 (~acidjnk@pd9e0b933.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[17:59:17] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[17:59:19] <adamCS> There's no way I can reorder type parameters via a type synonym or type family such that I can partially apply against the result, right?  I want "PipeStream m a = Pipes.Producer a m ()" where I can then use "PipeStream m" or even "PipeStream".  But there's no way, right?  I have to newtype it?
[17:59:38] <merijn> adamCS: No, because that is equivalent in power to type level lambda's
[18:00:07] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[18:00:09] <merijn> (no, as in, no that isn't possible)
[18:00:21] <adamCS> merijn: yeah.  That's what I thought...without the theoretical bit.  Thanks!
[18:02:30] <AWizzArd> adamCS: Are you currently working with the Pipes streaming library?
[18:04:28] *** cross_ is now known as cross
[18:04:34] <adamCS> AWizzArd: Yes, sort of.  I'm working on some enhancements to the "Frames" library, which uses Pipes.  Part of the work I did is to switch to using streamly where Frames used Pipes.  But now I'm trying to merge it all and thus trying to unify (a subset of) the interfaces via a record-of-functions.
[18:05:32] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d)
[18:05:44] <adamCS> But the different kind signatures of a streamly stream (t :: (Type -> Type) -> Type -> Type) and a Pipes producer (p :: Type -> (Type -> Type) -> Type -> Type)) are proving...annoying.
[18:06:24] <AWizzArd> adamCS: Interesting. You might be able to help with some insight. If I have a source of lines (i.e. lists) of Text, something such as `Stream [Text]`. Can I then use Pipes to give me 1-n of those [Text], and a stream that contains the rest (if any)?
[18:06:39] <merijn> AWizzArd: You want pipes-parse
[18:06:43] <merijn> @hackage pipes-parse
[18:06:44] <lambdabot> https://hackage.haskell.org/package/pipes-parse
[18:07:54] <AWizzArd> merijn: I want to implement functionality for reusing parsing streams of lines of Texts. It will eventually be used to validate/parse CSV files, but it could work on any source for lines of columns.
[18:08:30] <AWizzArd> merijn: but I want to decouple it from a concrete CSV lib and a concrete streaming lib. Instead my type class will offer the functionality against which a user can write an implementation.
[18:09:07] <AWizzArd> merijn: the purpose is to factor out the part where the lines are counted and good error reporting and parsing takes place, which is repetitive.
[18:09:34] <AWizzArd> merijn: on top of it I want something comparable to Json-Schema.
[18:09:46] *** Joins: TMA (tma@twin.jikos.cz)
[18:11:16] <merijn> AWizzArd: pipes-parse isn't really parsing in the sense you're thinking off
[18:11:24] <AWizzArd> Doing Abelson&Sussman’s ”Programming by wishful thinking” I would like to get a couple of rows and interate over them. `let ([row], rest) = readFromStream 1 stream`
[18:11:38] <merijn> pipes itself simply does *not* allow "take N lines and return the remainder"
[18:11:49] <merijn> You are not allowed to have a remainder with pipes
[18:11:58] <AWizzArd> merijn: okay, that info already helps
[18:12:17] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:12:34] <merijn> pipes-parse is basically a StateT with the State being a producer, allowing you to pass a producer (i.e. remaining input) to a future stage when you're done consuming
[18:13:17] <AWizzArd> merijn: essentially I just would like to work with the type [[Text]], which just may blow up memory if an input csv file is 300 GB in size. So I couldn’t use a csv lib directly but instead plug in any of the streaming libs.
[18:13:26] *** Joins: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de)
[18:13:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:14:08] <merijn> As someone who has tried wrapping several streaming libs using a single API: Just don't
[18:14:19] *** Joins: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net)
[18:14:26] <merijn> It sucks in all sorts of annoying ways
[18:15:35] <AWizzArd> merijn: I don't want to complect in a concrete implementation. To my users I want to offer something like `getNextLines` (i.e. take on any streaming lib). The user will find an already parsed row or a detailed error report and can decide what to do.
[18:16:15] <AWizzArd> merijn: when this is done I want to write an implementation for those different streaming libs, so the user will be free to choose any, and the `getNextLines` magic will just do its work.
[18:17:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[18:18:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 258 seconds)
[18:20:28] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[18:20:30] <lyxia> Is there a proof that ZipList can't be a monad?
[18:20:35] <merijn> AWizzArd: Probably wanna study how things like the attoparsec wrappers for pipes/conduit are done and adjust your API to play nicely with that
[18:20:41] <merijn> lyxia: Easy: What's return do?
[18:21:07] <AWizzArd> merijn: sounds like a starting point.
[18:22:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[18:22:16] <lyxia> merijn: return = ZipList . repeat
[18:22:35] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[18:23:32] <merijn> lyxia: Ok, so now how's >>= gonna work if I do "return x >>= f"
[18:23:44] <merijn> Supposedly "return x >>= f" = "f x"
[18:23:52] <merijn> But now I suddenly have infinite 'x's
[18:24:23] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[18:24:28] <merijn> lyxia: Applicative works because <*> sees two ZipLists and ends up truncating to the shorter one
[18:25:56] <lyxia> Well I can try to take the diagonal of repeat (f x)
[18:26:07] <lyxia> I know my attempt is gonna fail, but that's no proof that all attempts are going to fail.
[18:27:25] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:de8d:bf1f:3d7:7a94)
[18:31:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[18:31:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:35:54] <lyxia> In fact it will satisfy the identity laws, so if there is an argument to be made it must involve the associativity law.
[18:37:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[18:38:29] *** Joins: nefercheprure (tma@twin.jikos.cz)
[18:38:29] *** Quits: nefercheprure (tma@twin.jikos.cz) (Client Quit)
[18:38:51] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:41:32] *** Quits: dsrt^ (~dsrt@wsip-68-227-92-38.mc.at.cox.net) (Remote host closed the connection)
[18:44:15] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 260 seconds)
[18:54:30] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[18:56:34] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[18:57:38] <codolio> lyxia: It takes some work, but the idea is that to be associative, you'd need to figure out the diagonal of a 3-dimensional cube, but the operations can only act on squares. Collapsing squares can eliminate things that would be holes in the diagonal in 3 dimensions.
[19:00:11] *** Joins: rdz1789 (~rdz1789@139.47.40.241)
[19:01:47] <codolio> Or maybe it's the opposite in some cases, now that I think of it.
[19:02:34] <lyxia> the opposite of what?
[19:02:47] <codolio> There are squares with holes in the diagonal but those holes don't form part of the 3-dimensional diagonal, so you shouldn't artificially truncate.
[19:04:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:05:29] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[19:05:32] <codolio> Maybe it's just a matter of perspective on how you think the monad might actually work out.
[19:06:14] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 258 seconds)
[19:07:55] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:de8d:bf1f:3d7:7a94) (Quit: WeeChat 2.8)
[19:08:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[19:09:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:10:38] *** Joins: brettgilio (~brettgili@x-node.gq)
[19:12:26] *** Joins: LimeGolem (~LimeGolem@82.40.121.143)
[19:16:23] *** codolio is now known as dolio
[19:17:03] *** Joins: favonia (~favonia@user/favonia)
[19:18:42] *** Quits: Farzad (~FarzadBek@178.131.30.153) (Ping timeout: 260 seconds)
[19:19:54] *** Quits: rdz1789 (~rdz1789@139.47.40.241) (Remote host closed the connection)
[19:20:20] <LimeGolem> I have a data type with multiple constructors, some of them recursive (e.g. `data Expr = Lit Int | Add Expr Expr | Mul Expr Expr`). I want to forbid certain patterns (e.g. in `Add a b` I want to forbid `a` from being of the form `Add _ _`, which is always possible if `Add` is modelling something associative). Is there any way to do this which
[19:20:21] <LimeGolem> doesn't involve boilerplate which is quadratic in the number of constructors?
[19:22:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e)
[19:22:58] <c_wraith> depending on the use case, you might be able to do that by making it a GADT.  (Or maybe not - it depends entirely on what you're doing with them.
[19:23:09] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:23:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:24:51] <LimeGolem> The use case is that I'm building an AST, but I have various equivalences and I want to enforce some kind of normal form at the type level.
[19:24:53] <c_wraith> Hmm, actually that'd need more than just a GADT.  That would need to be mixed with rank-n types
[19:25:39] <LimeGolem> The best solution I have at the moment uses GADTs and RankNTypes, but also involves a lot of boilerplate. I'm hoping there's a simpler solution which I've missed.
[19:26:30] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 265 seconds)
[19:27:01] <c_wraith> I could construct something, but I would probably put it at the edge of being unusable in real code.
[19:27:49] <LimeGolem> If it doesn't involve an unwieldy amount of boilerplate, I'd definitely be interested in seeing it.
[19:28:00] *** Quits: mmhat (~mmh@55d45798.access.ecotel.net) (Ping timeout: 260 seconds)
[19:28:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[19:28:54] <monochrom> I think s/depends on use case/depends on actual restrictions/
[19:29:04] *** Quits: ishutin (~ishutin@84-236-97-21.pool.digikabel.hu) (Ping timeout: 265 seconds)
[19:29:05] <c_wraith> if I wanted to go with an actually-usable approach, I'd probably go with enforcing an interface consisting only of normalizing combinators
[19:29:44] *** Quits: favonia (~favonia@user/favonia) (Quit: Leaving)
[19:30:05] <LimeGolem> That is an option. But I'm trying to find a way to enforce the normalisation directly at the type level.
[19:30:33] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:30:49] *** Joins: ishutin (~ishutin@94-21-131-99.pool.digikabel.hu)
[19:30:58] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:35:17] *** Joins: Guest78 (~Guest78@178-78-205-86.customers.ownit.se)
[19:35:28] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:37:05] *** Quits: justHaunt (~justache@user/justache) (Read error: Connection reset by peer)
[19:37:39] <Guest78> Hi! I'm on p. 29 of Learn You a Haskell for Great Good, and there is this pattern of pattern matching that I can't get to work. It says that to capture the first three variables of a list and then the rest in another variable, you can use the pattern q:p:r:xs. But, ...
[19:37:59] *** Joins: justHaunt (~justache@user/justache)
[19:38:16] <geekosaur> you need to parenthesize it (and most patterns)
[19:38:25] <Guest78> ... when I try I get an infinite type error when trying this line: mytails (q:p:r:x) = [r,p,q,x]
[19:38:38] <Guest78> If someone has the time to explain, I would be very grateful!
[19:38:56] <geekosaur> because x has the type [a] whereas q, p, r have type a
[19:39:19] <geekosaur> you have to recombine them using (:) syntax, not standard list syntax
[19:39:40] <geekosaur> mytails (q:p:r:x) = (r:p:q:x)
[19:39:59] <Guest78> So how do I declare that in the declaration line? Here is what I had : mytails :: [a] -> [a]
[19:40:14] <geekosaur> you don't need to do anything in the declaration line
[19:40:21] <c_wraith> LimeGolem: https://paste.tomsmeding.com/NGZmMb1Q  I would rate the usability of this around 1/10.  But technically it does what you asked for.
[19:40:43] <geekosaur> [a,b,c] is the same as a:b:c:[]
[19:41:15] <Guest78> I think I get it now -- it is like consing in Lisp, right? Thanks a lot for your help!
[19:41:20] <geekosaur> yes
[19:41:34] <geekosaur> the [x,y,z] syntax is augar for the cons-style syntax
[19:41:39] <geekosaur> *sugar for
[19:42:02] *** Joins: mmhat (~mmh@55d45d75.access.ecotel.net)
[19:45:05] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[19:45:15] *** Joins: alzgh (~alzgh@user/alzgh)
[19:45:26] <Guest78> I think I'm still a bit confused about the parentheses -- the ( is for tuples and [ for lists, but here, I use ( to match and return a list?
[19:45:44] <LimeGolem> c_wraith: Thanks! I would give that at least a 3/10 :). Is there any way to extend that to include patterns involving multiple terms in a single constructor, e.g. `Add (Add a b) (Add c d)`?
[19:46:15] <geekosaur> Guest78, inb this case the () is just because of precedence
[19:46:41] <geekosaur> foo x:y:z is parsed (((foo x):y):z) which is not what you want
[19:46:58] <geekosaur> (even in patterns, for consistency with expressions)
[19:47:09] <geekosaur> so you have to say foo (x:y:z)
[19:47:47] <geekosaur> so the parentheses aren't really part of the syntax, they just make things associate correctly
[19:48:04] <c_wraith> LimeGolem: probably, but I can't see it right now.  and it would probably get far worse to work with
[19:49:11] <Guest78> Thanks again! I get it now! I should have re-read a few pages before jumping right back into where I was yesterday :).
[19:50:47] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[19:50:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:53:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:54:28] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[19:55:14] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[19:55:55] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:56:16] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:56:23] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[19:56:33] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[19:58:47] <LimeGolem> c_wraith: That's what I was afraid of. Is there a name for this sort of technique? Something that I can look up?
[19:59:12] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[20:00:48] <c_wraith> You know, I can't recall ever seeing a name for it.
[20:01:23] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:01:43] <dolio> lyxia: The closest natural thing I can come up with is this: imagine lists as `Σ n. Fin n -> A`. (<*>) takes the minimum of two ns. Make join use the minimum over all ns. So, if one row is empty, your whole join is empty, even if there's a non-trivial diagonal. Then maybe that operation is associative.
[20:02:25] <dolio> However, that doesn't actually work for infinite lists. You can't know how big the output should be without seeing the entire input.
[20:02:30] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:03:29] *** Joins: timCF (~timCF@m91-129-111-87.cust.tele2.ee)
[20:03:45] <LimeGolem> c_wraith: Oh well, thanks for the help!
[20:04:38] <dolio> And without infinite lists there is no unit. You could formally adjoin one, but it is not the same type.
[20:07:28] <dolio> I.E. Maybe ℕ is not the same as the possibly infinite, 'natural numbers,' they have distinct computational topologies.
[20:15:03] *** Quits: Guest78 (~Guest78@178-78-205-86.customers.ownit.se) (Ping timeout: 256 seconds)
[20:16:46] *** Quits: CiaoSen (~Jura@p5dcc1a24.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[20:18:51] <dolio> geekosaur: I think you got that slightly wrong.
[20:19:11] <dolio> (foo x):(y:z)
[20:19:18] <geekosaur> probably
[20:19:27] <geekosaur> right, (:) right-associates, sorry
[20:19:34] <dolio> I had to think about it a while with that many parens. :þ
[20:19:41] <geekosaur> but the important part was x misassociating
[20:20:17] <lyxia> dolio: you can't prove that there is no good join by showing that just one join is bad. And that one is not associative either.
[20:21:02] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:25:26] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:25:26] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[20:27:35] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:29:00] *** Joins: f-a (f2a@f2a.jujube.ircnow.org)
[20:30:17] *** Parts: f-a (f2a@f2a.jujube.ircnow.org) ()
[20:32:05] <dolio> What is a 'good' join? Is it any arbitrary function that is associative and happens to take the diagonal on squares, regardless of how unpredictable it is on non-square cases? Then I haven't seen a universal disproof of those.
[20:36:27] <dolio> If the goodness criterion includes corresponding to some simply describable operation on diagonals of ragged squares/cubes, then there are counter example cubes for the obvious ones.
[20:39:57] <awpr> FWIW infinite streams and fixed-size Vecs do have this diagonalization instance
[20:42:49] *** Quits: LimeGolem (~LimeGolem@82.40.121.143) (Ping timeout: 256 seconds)
[20:48:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:50:56] <segfaultfizzbuzz> i am now interested in what abstract "characteristics" code can have. i am not quite sure what i mean by code here, but i probably mean a function as haskellers describe it, or possibly a function or data type. for example: pure, functional, linear, total, synchronous/asynchronous, ...
[20:50:57] <lyxia> Yes to "What is a 'good' join? Is it ..."
[20:51:35] <segfaultfizzbuzz> is there a list of these abstract characteristics somewhere?
[20:53:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[20:54:51] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[20:57:51] *** Joins: Guest78 (~Guest78@178-78-205-86.customers.ownit.se)
[21:00:17] *** Joins: RoxSive (~RoxSive@95-30-22-55.broadband.corbina.ru)
[21:00:22] <Guest78> I have another question, if someone has the time. I'm now on p. 36 of Learn You a Haskell... and am practicing with case. I can do fibonacci numbers with pattern match, if-then-else and guards, but with case I get a parse error. Here is my attempt:
[21:00:42] <Guest78> myfib4 :: (Integral a) => a -> a
[21:00:42] <Guest78> myfib4 n = case n of < 2 -> n
[21:00:43] <Guest78>            case n of _ -> myfib3 (n - 1) + myfib3 (n - 2)
[21:01:08] <Guest78> The parse error is on the first case. Emacs marks it at the arrow.
[21:01:09] <geekosaur> case does pattern matches on structure; you need guards to do numeric comparisons
[21:01:45] <Guest78> Ok, so I can't use case for this at all?
[21:01:49] <geekosaur> so you can't do that check directly using case, only with a guard
[21:02:21] <Guest78> Thanks a lot :). I'll just move on then!
[21:05:52] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:06:17] *** Joins: haasn (~nand@haasn.dev)
[21:06:37] *** Quits: mbuf (~Shakthi@171.61.241.145) (Quit: Leaving)
[21:07:36] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[21:08:37] *** Joins: Guest377 (~Guest37@93-172-116-38.bb.netvision.net.il)
[21:09:24] *** Quits: Guest377 (~Guest37@93-172-116-38.bb.netvision.net.il) (Client Quit)
[21:09:40] *** Joins: Guest7483 (~Guest7483@93-172-116-38.bb.netvision.net.il)
[21:10:13] *** Quits: Guest7483 (~Guest7483@93-172-116-38.bb.netvision.net.il) (Client Quit)
[21:10:27] *** Joins: Guest28 (~Guest28@93-172-116-38.bb.netvision.net.il)
[21:16:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:18:32] <Inst> also, this is interesting
[21:19:43] <Inst> it turns out HPF1P does the Main / Do in Chapter 3
[21:21:54] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[21:22:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[21:23:17] *** Quits: RoxSive (~RoxSive@95-30-22-55.broadband.corbina.ru) (Quit: Leaving)
[21:27:01] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Ping timeout: 252 seconds)
[21:29:23] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[21:30:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:30:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[21:30:30] *** Quits: xff0x (~xff0x@2001:1a81:524c:400:5205:21d5:64e1:92) (Ping timeout: 260 seconds)
[21:30:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[21:31:20] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:31:20] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[21:32:01] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:32:10] *** Joins: k (~user@152.1.137.158)
[21:32:14] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:32:37] <k> Where is the source for the `Ord` class? I can't find it in GHC.Base.
[21:33:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:33:51] <davean> GHC.Classes perhaps
[21:33:57] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/ghc-prim-0.7.0/src/GHC-Classes.html#Ord
[21:34:02] <davean> The thing you get when you click on "Source" next to Ord in Data.Ord?
[21:34:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:34:25] <geekosaur> or in Prelude for that matter
[21:34:37] <Hecate> found it
[21:34:44] <Hecate> ah yes, thanks geekosaur 
[21:34:52] <k> geekosaur: thanks!
[21:35:03] <Hecate> davean: I had to click on the source for the Ord Bool implementation in the "Instances" dropdown
[21:35:05] <k> davean: Couldn't get to the source that way.
[21:35:06] <Hecate> to get to GHC.Classes
[21:35:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:35:26] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[21:36:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:37:21] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:38:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:39:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:40:15] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:41:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:42:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:42:48] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[21:43:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:44:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:44:29] <geekosaur> come to think of it I did the same thing, but I intended it as a shortcut. if it's not directly documented in either Data.Ord or Prelude, that's a bug imo
[21:44:49] <geekosaur> shouldn't force preople to go digging for GHC.Classes for basic stuff like Ord and Eq
[21:45:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:46:01] <k> Does `compare` imply that `Ord` defines a total order? If not, why not?
[21:46:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:46:16] <geekosaur> Ord is supposed to define a total order
[21:46:37] <geekosaur> Sadly this gets abused a bit, including by Double
[21:46:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184) (Remote host closed the connection)
[21:47:07] <Hecate> I'm waiting for the CLC to be operational to push for a PartialEq / PartialOrd
[21:47:20] <Hecate> that Eq/Ord would inherit, and as such become Laws-only typeclasses
[21:47:22] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:47:34] <k> Per the docs: 'The Haskell Report defines not laws for 'Ord'. However, '<=' is customarily expected to implement a non-strict partial order ...'
[21:48:07] <k> *no laws
[21:48:13] <Hecate> yep
[21:48:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:48:23] <davean> Thats not what the documentation says: ""
[21:48:26] <davean> Thats not what the documentation says: "<= is customarily expected to implement a non-strict partial order"
[21:49:08] <davean> The only total order class I know of in Haskell is in a library
[21:49:16] <davean> Ironicly, a partial order library
[21:49:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:50:02] <k> I guess `EQ` is not supposed to mean `equal` or `equivalent`?
[21:50:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:50:23] <k> But maybe `not comparably greater or less than`?
[21:51:12] *** Joins: xff0x (~xff0x@2001:1a81:524c:400:5205:21d5:64e1:92)
[21:51:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:51:30] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 260 seconds)
[21:52:16] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:53:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:54:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:54:59] *** Quits: iqofi (~ixosa@217.138.222.92) (Remote host closed the connection)
[21:55:22] *** Joins: Null_A (~null_a@2601:645:8700:2290:a891:322d:b92c:f184)
[21:55:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:55:29] <k> Ah, never mind. I don't really know what I'm talking about.
[21:55:57] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[21:56:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:56:59] <k> I still don't understand why all of `>`, `>=`, and `<` are defined in terms of `compare`. Or, honestly, why they're methods. Seems like a waste of code.
[21:57:04] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:57:23] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:57:38] <monochrom> Standard libraries such as Data.Map and Data.Set already treats Ord as a total order. I think it is too late to defend "but it has no laws".
[21:57:57] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[21:57:59] *** Joins: econo (uid147250@user/econo)
[21:58:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[21:58:24] <janus> k: how would they be if they were not methods and not defined in terms of `compare`?
[21:59:04] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:59:15] <k> janus: You could define them in terms of `<=` as constrained functions rather than methods.
[21:59:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[21:59:37] <monochrom> "MINIMAL compare | (<=)" allows starting with <=
[22:00:05] <k> Oh, I'm aware of that, but you still end up defining everything in terms of `compare` when you start with only `<=`.
[22:00:09] <monochrom> Though, I am surprised that you don't also raise "but (>) is better"
[22:00:12] <janus> k: but then NaN <= NaN would be unequal NaN > NaN, right?
[22:00:17] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:01:10] <monochrom> If you are referring to default implementations...
[22:01:20] <monochrom> You can always override them for your type.
[22:01:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:01:34] <davean> k: Making them members allows optimizations for their specific cases
[22:02:16] <monochrom> Default implementations are meant to "work under maximum mathematical generality" not "efficient".
[22:02:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:02:29] <k> > (0/0 :: Double) > (0/0 :: Double)
[22:02:30] <monochrom> Just look at Foldable.
[22:02:31] <lambdabot>  False
[22:02:59] <k> > (0/0 :: Double) <= (0/0 :: Double)
[22:03:01] <lambdabot>  False
[22:03:04] <monochrom> Who would code up foldl' in terms of foldr, really.  And foldr' in terms of foldl, for the LOL.
[22:03:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:03:45] <k> And foldr in terms of foldMap, for that matter...
[22:03:56] <k> Fair enough.
[22:04:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:05:07] <k> I was just thinking that if there's a default implementation that is basically always as efficient as any hand-crafted implementation, there's no need to make it a method. There was a similar discussion about `Eq` on haskell-cafe.
[22:05:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:05:36] <k> Although that had the added issue of newtype dictionaries.
[22:05:40] <monochrom> That's a big "IF".
[22:06:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:06:23] <monochrom> In practice, that statement is vacuously satisfied by all classes we hav.
[22:07:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:07:27] <davean> Thats basicly non-sensicil
[22:07:39] <davean> You've derived why they are in the class - because thats false
[22:07:44] <davean> and almost has to be
[22:08:09] <davean> I say almost because in SOME specific cases a sufficiently smart SMT solver style compiler COULD optimize
[22:08:17] <davean> But lets be real - thats horribly unrealistic
[22:08:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:09:00] <Inst> nice, just got GHCI running in visual studio code
[22:09:10] <Inst> honestly they should advertise visual studio code for haskell in windows
[22:09:24] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:10:14] <k> I'd say there's a big difference between `notElem x` = `not . elem x` and `foldl f z xs = appEndo (getDual (foldMap (Dual . Endo . flip f) xs)) z`.
[22:10:18] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:10:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:11:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:11:48] <davean> k: Thats trivially false.
[22:12:15] <k> davean: OK, please explain.
[22:12:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:12:29] <k> Sometimes 'trivial' things are hard for me to figure out.
[22:12:53] <davean> k: consider the infinite cases
[22:13:25] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:13:55] <k> OK. So elem of an infinite structure can terminate; `notElem` cannot be defined to terminate.
[22:14:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:15:06] <k> foldl of an infinite right-to-left structure can terminate; foldl of an infinite left-to-right structure cannot terminate.
[22:15:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:16:05] <k> `elem` and `notElem` have the same termination characteristics regardless of the bias of the infinite structure. What is your point?
[22:16:19] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:17:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:18:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:19:19] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[22:19:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:19:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[22:20:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:21:22] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:21:26] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:22:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:22:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:23:27] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:23:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[22:24:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:24:20] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:24:51] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[22:24:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[22:25:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:25:27] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:26:21] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:27:27] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:28:21] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:28:58] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[22:28:59] *** Joins: reumeth (~reumeth@user/reumeth)
[22:29:27] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:30:21] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:31:28] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:32:21] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:33:28] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:34:03] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[22:34:21] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:35:28] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:36:22] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:36:58] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[22:37:26] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:37:28] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:37:34] <k> I wonder what trivial thing I was missing. Happy Friday everyone.
[22:37:42] *** Quits: k (~user@152.1.137.158) (Quit: ERC (IRC client for Emacs 27.1))
[22:38:22] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:38:25] *** Quits: Guest78 (~Guest78@178-78-205-86.customers.ownit.se) (Ping timeout: 256 seconds)
[22:38:28] <koala_man> is there a class or something I can use to automatically enumerate each value in a data type, e.g. data Foo = Bar | Baz;  (something :: [Foo]) == [ Bar, Baz ]? 
[22:38:49] <geekosaur> something in Data.Generic
[22:39:00] <geekosaur> requires deriving Generic
[22:39:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk) (Remote host closed the connection)
[22:39:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-036.wadham.ox.ac.uk)
[22:39:22] <awpr> > `enumFrom minBound :: [Word8]`
[22:39:23] <lambdabot>  <hint>:1:1: error: parse error on input ‘`’
[22:39:29] <awpr> > enumFrom minBound :: [Word8]
[22:39:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:39:31] <lambdabot>  [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,2...
[22:39:50] <awpr> for simple enums with Enum and Bounded, that should do it
[22:40:22] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:40:52] <monochrom> data Foo = Bar | Baz deriving (Bounded, Enum)
[22:41:04] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:41:13] <monochrom> then you can [minBound .. maxBound]
[22:41:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:41:38] <monochrom> This doesn't work for "larger" examples.
[22:41:40] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[22:41:48] *** Joins: aegon (~mike@174.127.249.180)
[22:41:54] <koala_man> nice, thanks!
[22:42:20] <awpr> for more complicated types like tuples of enums, sum types with fields, etc. there's https://hackage.haskell.org/package/finite-table-0.1.0.1/docs/Data-Finite.html#v:enumerate
[22:42:22] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:43:21] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:43:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:44:11] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 264 seconds)
[22:44:23] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:45:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:45:33] <awpr> (note `[minBound..maxBound]` is exactly `enumFromTo minBound maxBound`, and for derived instances for finite enums, those are the same as `[minBound..]` and `enumFrom minBound`)
[22:46:23] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:46:26] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:47:29] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:47:30] *** Joins: gomma (~gomma@c-73-132-243-63.hsd1.md.comcast.net)
[22:48:14] <gomma> Is conan in here?
[22:48:23] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:48:32] <Franciman> not now, apparently
[22:48:57] <gomma> but he is sometimes here?
[22:49:16] <Franciman> conal^
[22:49:18] <Franciman> ?
[22:49:22] <Franciman> yes usually I see him online
[22:49:25] <gomma> yes that's probably it!
[22:49:29] <gomma> thank u
[22:49:30] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:49:44] <gomma> ok thanks
[22:50:22] <gomma> he helped me years ago and i wanted to discuss stuff with him since i've grown a lot since then
[22:50:23] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:50:30] <gomma> but since i have the right name now, i found his publications
[22:50:34] *** Joins: jaitoon (~Jaitoon@2a02:c7f:a5f:1d00:3901:d03b:2d77:c4b6)
[22:50:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[22:51:22] <gomma> I think I want to read through those before engaging again
[22:51:29] <gomma> Thanks so much! Goodbye y'all
[22:51:30] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:51:35] *** Quits: gomma (~gomma@c-73-132-243-63.hsd1.md.comcast.net) (Client Quit)
[22:51:43] <janus> goodbye gomma
[22:52:24] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:53:30] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:54:24] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:55:31] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:55:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[22:56:24] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:57:31] *** Joins: Guest372 (~xxx@47.245.54.240)
[22:57:36] <aegon> is there an applicative version of ^. for lens?
[22:58:25] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[22:59:31] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:00:20] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[23:00:25] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:01:31] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:01:42] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[23:02:25] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:03:32] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:04:26] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:05:32] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:06:26] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:07:32] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:08:26] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:09:33] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:09:33] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[23:09:56] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[23:10:26] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:11:33] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:12:27] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:13:33] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:14:27] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:15:11] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:15:34] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:15:38] <kronicmage> wdym by applicative?
[23:15:42] <kronicmage> aegon
[23:16:27] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:17:34] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:18:28] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:19:34] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:20:28] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:21:14] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[23:21:35] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:22:27] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d) (Quit: Client closed)
[23:22:29] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:23:35] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:24:29] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:25:36] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:26:29] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:27:36] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:28:05] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb87897f933eeab9e85f.dip0.t-ipconnect.de)
[23:28:30] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:29:36] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:30:30] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:31:37] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:32:30] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:32:58] <aegon> kronicmage: i want to apply a lens to a value within a monadic context or functor context
[23:33:25] <aegon> so instead of doing somethign like val >>= \x -> x ^. lens  i'm wondering if anyones made a applicative for m so i can do val ^. lens
[23:33:34] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[23:33:37] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:34:06] <aegon> well, binds used wrong there :\ but thats the jist
[23:34:31] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:34:44] <awpr> I'm not aware of such a thing existing.  I would just use `view l <$> val`
[23:34:58] <awpr> (since the operator form would require a kinda ugly operator section)
[23:35:06] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 245 seconds)
[23:35:37] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:35:59] <janus> i want to marry Operator Section <3
[23:36:31] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:36:53] <awpr> I do like operator sections in general, but this case I find just looks better with the alphanumeric name (compare `(^. l) <$> val`
[23:36:56] *** Joins: juhp (~juhp@128.106.188.220)
[23:37:04] <awpr> )
[23:37:06] <janus> is it ugly because it is followed by infix fmap? so `fmap (^. l) val` is ok? :P
[23:37:38] <awpr> hmm, even with fmap, I'd still probably write `fmap (view l) val`
[23:37:38] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:37:51] <geekosaur> operator glazeover :þ
[23:38:12] <aegon> awpr: didn't think of using the non operator version
[23:38:15] <aegon> :t compare
[23:38:16] <lambdabot> Ord a => a -> a -> Ordering
[23:38:18] <awpr> so I guess it's just that I prefer a partial application of a well-known alphanumeric-named function over an operator section
[23:38:31] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:38:34] <awpr> ("compare" is just prose in that message)
[23:38:50] <aegon> :)
[23:39:00] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d)
[23:39:09] <aegon> what about val <&> (^. l)
[23:39:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b5c0:69fb:2ebc:745e) (Remote host closed the connection)
[23:39:26] <janus> Mrs Perl approves :+1:
[23:39:26] <aegon> i'm just guessing at that, going to go play around in ghci
[23:39:38] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:40:02] <awpr> I think I've concluded that I'd always personally choose `view l` over `(^. l)` (when not immediately applied to another argument)
[23:40:32] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:40:58] <janus> come on, why not just use `flip (<$>) (`(^.)` l)`
[23:41:14] <geekosaur> have you tried it?
[23:41:39] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:41:58] <janus> i seems to be having some kind of problem with my diacretics, must reconfigure my keyboard configuration in nix first. i'll report back next week
[23:42:03] <geekosaur> (`` syntax is limited, you can't nest it that way)
[23:42:14] <aegon> yeah i think its clearer too, thanks for the tip, i'm still not used to thinking applicatively over monadicly
[23:42:32] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:42:46] <geekosaur> on the one hand it's probably for the best, on the other imagine being able to `(`(`(...)`)`)`
[23:43:08] <geekosaur> (then think about how you'd escape the `s)
[23:43:22] <awpr> needs guillemets
[23:43:35] *** Quits: alx741 (~alx741@186.178.109.50) (Ping timeout: 264 seconds)
[23:43:38] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:43:41] <awpr> (since they can be balanced like parentheses)
[23:44:23] *** Joins: ub (~Thunderbi@77.119.198.223.wireless.dyn.drei.com)
[23:44:32] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:44:47] *** Quits: ikex (ash@user/ikex) (Ping timeout: 264 seconds)
[23:45:17] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[23:45:26] *** Joins: ikex (ash@user/ikex)
[23:45:39] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:45:50] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[23:46:33] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:47:39] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:48:33] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:48:33] <aegon> oh man with `view l <$> var >>= \case ...`  hlint recommends a super hard to read: `var >>= (\case ...) . view Snapshot`
[23:49:08] <aegon> er view l
[23:49:24] <geekosaur> hlolint
[23:49:36] <aegon> oh man with `view l <$> var >>= \case ...`  hlint recommends a super hard to read: `var >>= (\case ...) . view l` imo hlint is wrong here, is it optimizing for some sort of perf thing?
[23:49:39] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:50:30] <geekosaur> imo if it is then it should be shot; fix the compiler instead
[23:50:33] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:50:58] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.126)
[23:51:39] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:51:51] <awpr> that's a left-associated fmap if I'm reading it correctly
[23:52:33] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:52:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:887d:efb8:1cec:d51f) (Remote host closed the connection)
[23:53:01] <aegon> it doesnt suggest any change for `var <&> (^. l) >>= \case ...` wonder whats going on here / what its trying to hint at
[23:53:07] <awpr> generally things should be right-associated to avoid re-traversing the whole left structure (same sort of reason you don't left-associate string concatenations)
[23:53:16] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:84fc:7e49:3098:491f)
[23:53:40] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:53:45] <awpr> maybe it just doesn't know about `<&>`?
[23:54:01] <aegon> sos view l <$> var is left associative but  the . view l is right? i need to churn on that
[23:54:34] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:54:50] <awpr> well, `(view l <$> var) >>= f` is left-associated, and `var >>= \x -> f (view x)` is right-associate
[23:54:52] <awpr> d
[23:55:40] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:56:34] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:56:35] <awpr> if the monad in question is a list, for example, the left version goes through the whole list to apply `view l`, then goes through that whole list to `concatMap` `f`, while the right version goes through the list just once
[23:57:24] *** Joins: alx741 (~alx741@186.178.108.23)
[23:57:40] *** Joins: Guest372 (~xxx@47.245.54.240)
[23:58:34] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[23:58:38] <aegon> interesting, ok, that makes sense, wow thats a possible perf hit thats very hard to keep in mind for me at the moment 
[23:59:13] <aegon> the monad in question here is IO but i'm glad hlint yelled at me
[23:59:23] *** Joins: __monty__ (~toonn@user/toonn)
[23:59:41] *** Joins: Guest372 (~xxx@47.245.54.240)
