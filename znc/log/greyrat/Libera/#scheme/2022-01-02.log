[00:00:07] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Read error: Connection reset by peer)
[00:00:23] *** Joins: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca)
[00:04:37] *** Quits: aportnoy (~aportnoy@bras-base-toroon0628w-grc-22-174-95-160-240.dsl.bell.ca) (Ping timeout: 240 seconds)
[00:15:16] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[00:16:19] *** Joins: manumanumanu (~mio@213-67-252-160-no79.tbcn.telia.com)
[00:22:17] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[00:28:36] <amazigh> re faux texte, the optimization I was thinking about is not possible
[00:28:42] <amazigh> I need a trie or something.
[00:33:29] *** Joins: livoreno (~livoreno@user/notzmv)
[00:34:48] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:38:17] *** Joins: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:55:58] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[01:16:39] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[01:21:38] *** Joins: klovett (~klovett@107.115.32.130)
[01:23:37] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[01:23:48] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[01:25:57] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Remote host closed the connection)
[01:26:43] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[01:33:43] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:46:13] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[01:50:25] *** Joins: livoreno (~livoreno@user/notzmv)
[02:26:56] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:28:26] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[02:28:52] *** Joins: zap1 (~zap@gateway/tor-sasl/zap)
[02:31:54] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Ping timeout: 276 seconds)
[03:40:03] *** Quits: Avichi (~Avichi@lithe.xs4all.nl) (Ping timeout: 256 seconds)
[03:42:07] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[03:59:32] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8554:afc8:ad1a:43cc) (Ping timeout: 240 seconds)
[04:03:33] *** Quits: zap1 (~zap@gateway/tor-sasl/zap) (Ping timeout: 276 seconds)
[04:07:37] *** Joins: jao (~jao@211.68.17.95.dynamic.jazztel.es)
[04:17:26] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[04:19:14] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:a017:26db:d8b0:4bb4)
[04:19:14] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:a017:26db:d8b0:4bb4) (Changing host)
[04:19:14] *** Joins: skapate (~Skapata@user/skapata)
[04:21:03] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[04:39:04] *** Joins: Everything (~Everythin@37.115.210.35)
[04:42:31] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:47:57] *** Joins: biog (~user1@159.224.42.85)
[05:08:51] *** Joins: rx80 (~quassel@user/rx80)
[05:18:20] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[05:23:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:40:05] *** Quits: zwr (~zwr@2804:d45:b966:fb00:7f50:bd17:59b3:3c7a) (Ping timeout: 250 seconds)
[05:40:58] *** Joins: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f)
[05:43:17] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:cce1:27eb:b1e6:5092) (Ping timeout: 240 seconds)
[05:47:04] *** Joins: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39)
[05:47:41] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[05:47:48] *** Joins: [deleted] (~livoreno@user/notzmv)
[05:50:12] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[05:53:31] *** Quits: eddof13 (~textual@2600:4040:4029:5000:3ca8:538a:9008:8d39) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:04:17] *** Quits: schulze (~schulze@dynamic-077-001-121-162.77.1.pool.telefonica.de) (Ping timeout: 240 seconds)
[06:04:18] *** Joins: atw (~user@2601:5c2:c500:76b0::af04)
[06:12:23] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:21] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Quit: WeeChat 3.4)
[06:16:35] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[06:26:29] *** Quits: nmeum (~nmeum@barium.8pit.net) (Remote host closed the connection)
[06:26:46] *** Joins: nmeum (~nmeum@barium.8pit.net)
[06:29:25] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 240 seconds)
[06:29:25] *** Quits: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63) (Ping timeout: 240 seconds)
[06:29:25] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (Ping timeout: 240 seconds)
[06:34:13] *** Quits: scheme-scribe (~scheme-sc@gmw.xen.prgmr.com) (Ping timeout: 240 seconds)
[06:38:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[06:42:30] *** Joins: edmrk[m] (~edmrkmatr@2001:470:69fc:105::1:5a63)
[06:42:39] *** Quits: daviid` (~user@179.210.52.91) (Ping timeout: 256 seconds)
[06:43:03] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[06:43:59] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[06:46:58] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[06:49:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:51:28] *** Joins: aeth (~aeth@user/aeth)
[07:02:17] *** Joins: daviid` (~user@177.25.188.82)
[07:07:02] *** daviid` is now known as daviid
[07:13:42] *** Quits: jao (~jao@211.68.17.95.dynamic.jazztel.es) (Ping timeout: 268 seconds)
[07:17:11] *** Quits: [deleted] (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[07:28:19] <s-liao> rudybot later tell s-liao test
[07:29:11] <s-liao> rudybot_ later tell s-liao test
[07:43:21] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094)
[07:49:11] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:50:15] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:27:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:38:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:39:57] *** Quits: atw (~user@2601:5c2:c500:76b0::af04) (Ping timeout: 240 seconds)
[08:57:49] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[09:09:57] *** Quits: daviid (~user@177.25.188.82) (Ping timeout: 240 seconds)
[09:16:24] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[09:40:22] *** Quits: nalaginrut (~nalaginru@183.11.131.186) (Ping timeout: 260 seconds)
[09:48:39] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[09:53:56] *** Joins: nalaginrut (~nalaginru@121.35.188.14)
[09:58:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:56:18] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[11:05:05] *** Joins: hexology (~hexology@user/hexology)
[11:29:39] *** Joins: frost (~frost@user/frost)
[12:12:31] *** Joins: seninha (~seninha@user/seninha)
[12:20:46] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0)
[12:21:57] *** Joins: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi)
[12:32:09] *** Joins: klovett_ (~klovett@107.115.32.130)
[12:34:33] *** Quits: klovett (~klovett@107.115.32.130) (Ping timeout: 256 seconds)
[12:57:37] *** Joins: daviid (~user@179.210.52.91)
[13:06:15] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:10:02] *** Quits: ns12 (~ns12@user/ns12) (Ping timeout: 240 seconds)
[13:37:11] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Remote host closed the connection)
[13:37:46] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[13:45:29] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[13:45:44] *** Joins: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4)
[13:55:00] *** Quits: karlosz (~karlosz@136.56.98.53) (Quit: karlosz)
[13:56:17] *** Joins: ns12 (~ns12@user/ns12)
[14:30:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[14:36:59] *** Joins: biog (~user1@159.224.42.85)
[14:38:06] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:38:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:43:20] *** Joins: schulze (~schulze@dynamic-077-001-108-147.77.1.pool.telefonica.de)
[15:13:13] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:33:12] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[15:46:47] *** Joins: biog (~user1@159.224.42.85)
[16:24:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[16:25:58] <amazigh> hello :)
[16:29:19] <tohoyn> what do you think, should a GOOPS-like object system be standardized in R7RS (a SRFI)?
[16:30:49] <amazigh> GOOPS was dubbed 'a can of worms' by some people
[16:30:58] <amazigh> I mean OOP-like machinery
[16:31:23] <amazigh> you can always create a SRFI, anybody can.
[16:31:37] <amazigh> Prolly a more interesting conversation will arise
[16:32:33] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:36:50] *** Joins: livoreno (~livoreno@user/notzmv)
[16:38:33] * edgar-rft wants a SRFI for proper tail-chasing
[16:44:23] <amazigh> A new bread of Scheme that will be known as Dog Scheme
[16:44:38] <amazigh> best friend ever
[16:47:45] <wasamasa> the name alone is reason enough to say no
[16:49:48] *** Joins: yewscion (~yewscion@72-21-196-64.amazon.com)
[16:50:59] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:52:08] <edgar-rft> Naughty Dog was programmed in Lisp -> https://en.wikipedia.org/wiki/Game_Oriented_Assembly_Lisp
[16:57:31] <wasamasa> don't forget about them using racket later
[17:07:15] <amazigh> is that evil?
[17:17:14] <wasamasa> it's a betrayal
[17:17:28] <wasamasa> not as bad as using clojure obviously, but still
[17:17:50] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:20:06] <s-liao> Why?
[17:20:28] <s-liao> What is wrong with clojure ?
[17:21:26] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[17:21:32] <amazigh> clojure use the JVM, claims to be the one true lisp, and claims that is the only successful lisp
[17:21:38] <wasamasa> it's a radical departure from several lisp ideas
[17:22:59] <wasamasa> like avoiding success at all costs
[17:23:17] <amazigh> ^^'
[17:23:32] <wasamasa> or confusing stuff such as conses and quoted symbols
[17:23:42] <wasamasa> or overly relying on lists
[17:24:18] <wasamasa> further insulting is the idea of the JVM being the one and only platform to buy into
[17:25:26] <s-liao> I was planning to try the package manager in clojure  platform for a while. Feel like it has lisp machine. why it need the java VM? Then stop.
[17:25:38] <wasamasa> it's not a lisp machine
[17:25:41] <amazigh> How avoiding success is a lisp thing?
[17:26:25] <s-liao> What is the machine? It totally is lisp stuff.
[17:26:39] <amazigh> And why would it a be good thing?
[17:26:45] <wasamasa> the lisp machine idea is that you have a fully integrated and explorable environment
[17:26:56] <wasamasa> one where no matter what you look at, it's lisp
[17:27:25] <wasamasa> no ugly implementation details implemented in C or java
[17:28:50] <amazigh> it is mostly a lisp concept, but but C succeed at it 
[17:29:12] <wasamasa> turtles all the way down
[17:29:28] <s-liao> I mean that Oracle firstly implement VM. But having the java language to implement might not be a good idea.
[17:29:49] <wasamasa> the exact language used isn't that important
[17:29:49] <amazigh> clojure has a different goal that the lisp machine
[17:29:59] <wasamasa> it's rather that you use the same language you're implementing
[17:30:05] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:30:10] <wasamasa> and consistently work towards using as much as possible of it
[17:31:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:50d8:1e8f:4c53:cf6c)
[17:31:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:50d8:1e8f:4c53:cf6c) (Changing host)
[17:31:40] *** Joins: skapata (~Skapata@user/skapata)
[17:31:46] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[17:32:51] <s-liao> Yes. it is about the coding quality and process. Looking at the code of java to implement swing and Eclipse stuff.
[17:33:12] <wasamasa> java itself isn't the best language for exploring that concept
[17:33:28] <wasamasa> but people invested a lot of engineering effort in it
[17:36:38] <s-liao> Much similar to C/C++ style. what benefit the people can get, Just the integration to different portal API and then have create its bytecode. Not too much benefit really.
[17:37:21] <s-liao> It is much engineering.
[17:39:08] <s-liao> so from this point,Clojure would get too much.
[17:40:34] <s-liao> so from this point,Clojure would not get too much.
[17:46:47] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:48:31] <amazigh> I do not understand what you mean to say s-liao 
[17:51:55] <s-liao> I mean Clojure is on JVM. But what if the JRE and JVM  get sucked.
[17:52:19] <amazigh> sucked?
[17:53:03] <s-liao> Like performance issue.
[17:54:42] <s-liao> I just saw one java project, it replace jre8 with his project and jre6.
[17:55:31] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[17:56:49] <s-liao> of course, Clojure might not consider in this term, It is based on JVM.
[17:57:16] <amazigh> Clojure pursue a different goal
[17:57:57] <amazigh> It ain't good that people reject Clojure, afterall, it did make lisp more popular
[17:58:42] <s-liao> What I understand is the Clojure make lisp rapidly work on mature java libs.
[18:00:17] <s-liao> It does integrate to Maven very well.
[18:03:13] <amazigh> yes
[18:05:48] <s-liao> I have to get sleep.
[18:06:02] <s-liao> Have a good day.
[18:06:30] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:10:06] <wasamasa> amazigh: with avoiding success at all costs, I mean how the communities turned out
[18:10:48] <wasamasa> amazigh: there's a bunch of phenomena going there, such as the smug lisp weenie meme, the overall lack of collaboration, stubbornness (worse is better) and in-fighting
[18:11:07] <wasamasa> amazigh: along with the memes that knowing lisp makes you a better programmer
[18:15:16] <amazigh> I still do not understand how lack of success is a feature
[18:17:03] <dpk> amazigh: first paragraph of https://haskell.foundation/whitepaper/
[18:20:29] <wasamasa> amazigh: it is sometimes thought in these terms because it allows on focusing on something else than winning the popularity contest
[18:20:34] <wasamasa> amazigh: like being correct
[18:20:38] <wasamasa> amazigh: technically superior
[18:20:43] <wasamasa> amazigh: intellectually satisfying
[18:20:49] <wasamasa> it's a weird ego flex
[18:23:37] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 256 seconds)
[18:23:50] *** Joins: psf (~pi@206.55.172.18)
[18:26:03] <wasamasa> now that I've looked at the haskell thing above, yes, that's pretty much it
[18:30:49] *** Joins: biog (~user1@159.224.42.85)
[18:43:01] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 240 seconds)
[18:47:04] *** Joins: xsperry (~xs@user/xsperry)
[18:49:05] *** Quits: m455 (~m455@user/m455) (Ping timeout: 252 seconds)
[18:51:05] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[18:53:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[18:57:51] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[19:01:33] *** Joins: m455 (~m455@user/m455)
[19:16:25] *** Joins: civodul (~user@guix/contributor/civodul)
[19:16:40] *** Joins: notzmv (~zmv@user/notzmv)
[19:19:38] <amazigh> tx
[19:26:17] *** Joins: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e)
[19:31:17] *** Quits: Darkcoal (~user@2001:16a2:7a92:bc00:1f6a:511c:8c43:ad3e) (Ping timeout: 240 seconds)
[19:33:38] *** Joins: Darkcoal (~user@167.86.150.114)
[19:45:11] *** Joins: livoreno (~livoreno@user/notzmv)
[19:54:41] *** Joins: atw (~user@2601:5c2:c500:76b0::f29f)
[19:57:25] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[19:58:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:02:00] *** Joins: sdu (~sidu@185.44.146.214)
[20:02:36] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[20:03:53] <amazigh> clearly I was very inspired at some point http://ix.io/3KDT
[20:06:42] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzz…)
[20:15:30] <amazigh> I figured why rust people do many small utilities
[20:15:56] <amazigh> it is easier, it helps toward bigger thing to aim for short range goals
[20:21:59] <edgar-rft> even small utilities can help to inrease corrosion
[20:22:33] <edgar-rft> *increase
[20:24:25] *** Joins: gproto23_ (~gproto23@user/gproto23)
[20:27:09] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[20:32:32] <wasamasa> wait, wait
[20:32:40] <wasamasa> is that like, a good edgar-rft joke?
[20:33:02] <wasamasa> could it be
[20:40:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[20:42:45] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[20:43:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:51:36] <edgar-rft> wasamasa: during the cold war Mathias Rust flew with a small propeller airplane from germany to moscow and landed on the Red Square on 28 May 1987 -> https://en.wikipedia.org/wiki/Mathias_Rust
[20:52:01] <edgar-rft> ...and before you ask again: that's *not* a joke
[20:52:11] <amazigh> edgar-rft's jokes are good!
[20:56:17] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 240 seconds)
[20:56:38] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[21:02:15] <sonny> I would like to scan some strings and store them in a mutable variable. My idea is to use a list of characters, but I was wondering what everyone else does
[21:04:03] <tohoyn> I would use strings instead of lists of characters
[21:05:27] *** Quits: kjak_ (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[21:06:11] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Remote host closed the connection)
[21:08:17] *** Joins: Zipheir (~wcm@98.4.178.27)
[21:08:34] <sonny> tohoyn I'm scanning by reading characters from input
[21:08:54] <sonny> Also how did one organize data in scheme before records?
[21:09:09] <sonny> (records seem to be defined in each scheme impl)
[21:09:13] <tohoyn> association lists where keys are symbols?
[21:09:43] <Zipheir> That or plists.
[21:10:05] <sonny> oh ok
[21:10:07] <tohoyn> actually I implemented records as vector myself
[21:10:18] <tohoyn> s/vector/vectors/
[21:10:36] <tohoyn> if you are interested I can paste it
[21:11:07] <sonny> sure
[21:11:34] <sonny> Zipheir not having records in a spec strikes me as odd
[21:12:00] <Zipheir> They're totally inessential.
[21:12:40] <tohoyn> here: https://paste.debian.net/1225599/
[21:12:57] <Zipheir> SML didn't have them either, originally, IIRC.  Haskell doesn't really use them.  More of a convenience hearkening back to FORTRAN than a critical language feature.
[21:13:24] <Zipheir> We make a lot of use of define-record-type, etc. because we don't have a better way to define new types.
[21:13:36] <sonny> Haskell has records via types
[21:13:45] <tohoyn> here is the support module: https://paste.debian.net/1225600/
[21:13:58] <Zipheir> Exactly.
[21:14:12] <Zipheir> Also check out the SRFI 9 sample implementation https://srfi.schemers.org/srfi-9/srfi-9.html
[21:15:08] <sonny> ok fair point, in a dynamic language it doesn't actually make sense to define them
[21:15:32] <sonny> but they are really essential to doing something useful
[21:16:02] <sonny> notable exception I think
[21:16:13] <sonny> tohoyn ty
[21:16:29] <Zipheir> I say they're inessential because they're just a bit more convenient than using a list or tuple.
[21:16:41] <Zipheir> tuple == vector in this case.
[21:17:02] <Zipheir> SICP, for instance, never uses records, just lists with named accessors.
[21:17:31] <sonny> yeah, this is really making me think
[21:18:06] <Zipheir> And, of course, define-record-type is just like tohoyn's design.  The main advantage is that you get a predicate, foo?, which is guaranteed to be true only of the new type.
[21:19:06] <Zipheir> The essential feature, IMO, is the ability to make "disjoint" new types.  Hence I like https://srfi.schemers.org/srfi-137/
[21:20:59] <sonny> I'm starting to consider dynamic language primary feature is ease of implmentation
[21:21:51] <Zipheir> Oh really :)
[21:22:24] <Zipheir> You mean a dynamically-typed language?
[21:22:41] <sonny> yes, I thought that was how the term is used
[21:23:40] <Zipheir> Well, there's also dynamic binding, so I thought it was just possible you meant that.
[21:24:01] <sonny> fair enough, oop is popular
[21:24:03] <Zipheir> But, usually, to implement a dynamically-typed language, you have to implement a statically-typed one first.
[21:24:20] *** Joins: biog (~user1@159.224.42.85)
[21:24:43] <sonny> not sure I follow
[21:25:01] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[21:25:04] <Zipheir> How many types does Scheme have?
[21:25:09] <sonny> 3
[21:25:23] <Zipheir> Three?
[21:26:04] <sonny> numbers, symbols, characters, lists, vectors
[21:26:06] <sonny> my bad
[21:26:17] <sonny> strings too right
[21:26:32] <Zipheir> Don't worry about it.  In particular, what is the type of `car`?
[21:26:42] <sonny> pair?
[21:26:49] <sonny> oh wait
[21:26:49] <Zipheir> It's a function.
[21:27:10] <sonny> yeah
[21:27:27] <Zipheir> It's going to be something of the form * -> *.
[21:27:33] <Zipheir> So what are the * types?
[21:28:06] *** Quits: Darkcoal (~user@167.86.150.114) (Quit: Darkcoal)
[21:28:16] <sonny> what I mentioned before plus functions?
[21:28:35] <sonny> well, anything that can be put in a list
[21:28:42] <Zipheir> You mean a giant sum of all the dynamic types that Scheme has?
[21:28:51] <sonny> yeah
[21:28:54] <Zipheir> Exactly.
[21:29:13] <Zipheir> You can call that type "Scheme Object" or something.
[21:29:18] <Zipheir> In essence, there is one type.
[21:29:51] <Zipheir> car : Scheme_Object -> Scheme_Object
[21:30:15] <Zipheir> cons : (Scheme_Object × Scheme_Object) -> Scheme_Object
[21:30:16] <sonny> so what's the deal with not permitting user defined types, that'd esentially just have syntax sugar
[21:30:16] <Zipheir> And so on.
[21:31:01] <Zipheir> It's a missing feature, IMHO.
[21:31:39] <Zipheir> Creating a new dynamic type (i.e. another "tag" for a Scheme_Object) is, in Scheme, a matter of defining a new predicate that partitions the set of tags.
[21:32:21] <Zipheir> That's why things like SRFI 9 and SRFI 137 exist.
[21:32:28] <sonny> ah
[21:33:23] <Zipheir> But, to return to what you were saying, implementing a dynamically-typed language means you need to implement a (very simple) statically-typed language covering Scheme_Objects, then implement the dynamic stuff "on top".
[21:34:06] <Zipheir> Usually, C implementations have a big union type for Scheme_Objects and everything gets shoved into that.
[21:34:32] <Zipheir> This is bad news for, e.g. getting maximum precision for your fixnums and floating-point values.
[21:35:07] <Zipheir> The "tyranny of tag bits" affects many Scheme implementations.
[21:35:57] <sonny> well the thing is that is at runtime, that's they key difference
[21:36:24] <Zipheir> That you get programs exploding because of a silly type mistake? :)
[21:37:01] *** Quits: tohoyn (~tohoyn@mobile-access-2e8465-250.dhcp.inet.fi) (Quit: Leaving)
[21:37:04] <sonny> well, yeah
[21:38:25] *** Quits: sdu (~sidu@185.44.146.214) (Quit: leaving)
[21:38:32] <Zipheir> I should have said that this only comes up when you implement Scheme in a statically-typed language.  You wouldn't see this using, say, Python, where everything is similarly a Python_Object.
[21:38:56] <sonny> ohhh
[21:39:01] <Zipheir> But YMMV depending on your implementation approach.
[21:39:03] <sonny> yeah
[21:39:29] <sonny> I am a bit disappointed now
[21:39:47] <Zipheir> Sorry!
[21:39:55] <sonny> hehe
[21:39:58] <Zipheir> I hope I didn't puncture your faith in Scheme.
[21:40:35] <sonny> well I wanted to use the best tool for the job, and I was writing a compiler
[21:41:14] <sonny> but this might be easier in another language
[21:41:21] <sonny> don't worry, scheme still has allure
[21:41:30] <Zipheir> Are you writing a Scheme compiler, or a compiler in Scheme?
[21:41:41] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:42:09] <sonny> I was going to write an oberon compiler in racket scheme
[21:42:37] <sonny> scheme in scheme is really simple, the scheme programming language 4 has an example that is crazy
[21:42:59] <Zipheir> Yes.
[21:43:24] <Zipheir> Well, Racket does offer static type-checking (Typed Racket).
[21:43:27] <sonny> the interesting thing was going to be altering the algorithms so they are better wrt to functions
[21:44:15] <Zipheir> Sounds like a very fun project.
[21:44:23] <Zipheir> Oberon is a nice language indeed.
[21:45:28] <sonny> yeah, the book for it is well written too
[21:46:12] <sonny> scheme has lists as a primary datatype which is what piqued my interest
[21:46:33] <sonny> that's a great fit for compiler stuff
[21:48:17] <Zipheir> How so?
[21:48:46] <sonny> it's just a data structure that comes up a lot
[21:49:26] <sonny> I'm not using an ast, but that's usually the big application
[21:52:24] <Zipheir> So, trees?
[21:52:53] <sonny> yeah
[21:53:22] <Zipheir> "There's no better structure for describing a program than a tree.  Well, the Haskellers will tell you otherwise, but don't listen to them." --Will Byrd
[21:53:58] <sonny> haha
[21:55:42] <Zipheir> It would be cool to have an Oberon compiler that used miniKanren for type checking.
[21:57:05] <sonny> yeah, let's see if I can figure it out in racket first
[21:57:43] <Zipheir> Sounds good!
[21:57:52] <sonny> cool, minikanren is in racket
[21:58:05] <sonny> that will be handy later
[22:06:15] <Zipheir> Yeah, it's a very useful tool.
[22:09:17] *** Quits: atw (~user@2601:5c2:c500:76b0::f29f) (Ping timeout: 240 seconds)
[22:15:45] *** Joins: sdu (~sidu@185.44.146.214)
[22:22:06] *** Joins: atw (~user@2601:5c2:c500:76b0::5737)
[22:24:48] *** Joins: zap1 (~zap@gateway/tor-sasl/zap)
[22:31:42] <mdhughes> As always, I note that Scheme does not have lists. It has a pair type. Lists are constructed from pairs.
[22:33:19] *** Joins: gproto23 (~gproto23@user/gproto23)
[22:35:37] *** Quits: zap1 (~zap@gateway/tor-sasl/zap) (Remote host closed the connection)
[22:36:02] *** Joins: zap1 (~zap@gateway/tor-sasl/zap)
[22:40:20] <Zipheir> Unfortunately so.
[22:40:45] <Zipheir> "As C does not have a string type, Scheme does not have a true list type." --SRFI 1
[22:41:13] <mdhughes> Right. And almost the exact same kinds of disasters follow. Null termination is stupid.
[22:43:21] <sonny> mdhughes what do you prefer?
[22:44:09] <wasamasa> what if someone terminated a list with... itself
[22:44:16] <wasamasa> terrifying thought, that
[22:45:46] <wasamasa> yeah, I just did the unthinkable
[22:45:46] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 260 seconds)
[22:45:47] <wasamasa> (let ((x (cons 1 '()))) (set-cdr! x x) x)
[22:45:59] <wasamasa> even worse: what if you start the list with itself
[22:46:12] <wasamasa> I got to admit, it looks hilarious when printed out
[22:46:49] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:47:24] <Zipheir> The usual problems are more vanilla, like the fact that you can't write a constant-time list?.
[22:47:42] <Zipheir> But those monsters could always be lurking around the next left-paren...
[22:47:48] <wasamasa> yeah
[22:47:54] <wasamasa> spooooky
[22:48:16] <wasamasa> time to hand in a CVE for that snippet
[22:48:18] <dpk> Zipheir: sure you can. (define (list? x) (or (pair? x) (null? x))) ;-)
[22:48:41] <Zipheir> Fast 'n' sleazy.
[22:49:42] <Zipheir> That's what I generally use, though.
[22:55:23] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:05:40] *** Joins: livoreno (~livoreno@user/notzmv)
[23:10:51] <Zipheir> sonny: In most functional languages, lists are strictly inductively defined: a list(T) is either nil or the cons of a T and a list(T).
[23:11:21] <Zipheir> sonny: You could "fix" Scheme by making it an error to pass anything other than a list as the second arg. of cons.
[23:11:42] <sonny> I've found sentinel termination to be useful in general, I appreciate it
[23:12:11] <sonny> Zipheir I suppose that only makes sense if you have types
[23:12:56] <Zipheir> It's easy to check whether something is a list, once you get rid of improper and circular lists.
[23:13:46] <Zipheir> But it's true that there's still no homogenous list(T) type.
[23:18:14] <Zipheir> Scheme programs constantly make use of the list "type" in the sense that they assume you can cdr down a list-thingy until you hit null.
[23:19:14] <Zipheir> Nil, (), whatever you want to call it.
[23:19:52] <Zipheir> I've argued many times that Scheme is statically-typed with full manual type checking. :)
[23:21:36] *** Joins: karlosz (~karlosz@136.56.98.53)
[23:23:25] *** Quits: atw (~user@2601:5c2:c500:76b0::5737) (Ping timeout: 240 seconds)
[23:26:01] <sonny> sure
[23:26:15] <sonny> types at runtime
[23:27:19] <Zipheir> More using your brain to do type-checking because the interpreter can't.
[23:28:13] <Zipheir> Can't very effectively.  Can't at all is when you're writing in an untyped language; then it's all on your brain.
[23:32:28] <sonny> yeah
[23:38:02] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:38:22] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[23:38:59] *** Joins: stultulo (~f8l@37.228.213.3)
[23:39:21] *** Joins: zwrr (~zwr@2804:d45:b966:fb00:1f1f:72e7:c7dc:fde0)
[23:39:29] *** Joins: Oxyd_ (~oxyd@user/oxyd)
[23:39:37] *** Joins: aoh___ (~aki@haltp.org)
[23:40:05] *** Joins: ns127 (~ns12@user/ns12)
[23:40:28] *** Joins: groomvy_ (sid62069@hampstead.irccloud.com)
[23:40:36] *** Joins: koluacik (~koluacik@165.227.171.188)
[23:40:49] *** Joins: wasa (~wasamasa@chicken/contributor/wasamasa)
[23:41:39] *** Joins: Dap (~Dap@user/dap)
[23:42:05] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[23:42:09] *** Joins: xgqtd (~xgqt@gentoo/developer/xgqt)
[23:42:15] *** Joins: light_ (~light@user/light)
[23:42:17] *** Joins: cognemo_ (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:42:20] *** Joins: gnomon_ (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[23:42:41] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[23:42:44] *** Server sets mode: +ntz 
[23:42:45] *** Quits: Zipheir (~wcm@98.4.178.27) (Killed (NickServ (GHOST command used by Zipheir_)))
[23:42:51] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[23:42:55] *** Zipheir_ is now known as Zipheir
[23:42:57] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0)
[23:42:59] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094)
[23:43:15] *** Joins: yosafbridge` (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[23:43:20] *** Joins: oldf8l (~f8l@37.228.213.3)
[23:43:29] *** Joins: phoebos_ (~phoebos@kisslinux/phoebos)
[23:43:43] *** Joins: hexology- (~hexology@user/hexology)
[23:43:53] *** Quits: karlosz (~karlosz@136.56.98.53) (*.net *.split)
[23:43:53] *** Quits: livoreno (~livoreno@user/notzmv) (*.net *.split)
[23:43:53] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (*.net *.split)
[23:43:53] *** Quits: gproto23 (~gproto23@user/gproto23) (*.net *.split)
[23:43:53] *** Quits: civodul (~user@guix/contributor/civodul) (*.net *.split)
[23:43:53] *** Quits: m455 (~m455@user/m455) (*.net *.split)
[23:43:53] *** Quits: xsperry (~xs@user/xsperry) (*.net *.split)
[23:43:53] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[23:43:53] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[23:43:54] *** Quits: zwr (~zwr@2804:d45:b966:fb00:fe5b:101b:8e76:fe8f) (*.net *.split)
[23:43:54] *** Quits: wasamasa (~wasamasa@chicken/contributor/wasamasa) (*.net *.split)
[23:43:54] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:71d0:995f:9252:5bc7) (*.net *.split)
[23:43:54] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[23:43:54] *** Quits: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (*.net *.split)
[23:43:54] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[23:43:54] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[23:43:54] *** Quits: koluacik_ (~koluacik@165.227.171.188) (*.net *.split)
[23:43:54] *** Quits: lloda (~user@11-206-127-185.static.world-connect.ch) (*.net *.split)
[23:43:54] *** Quits: aoh (~aki@haltp.org) (*.net *.split)
[23:43:55] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (*.net *.split)
[23:43:55] *** Quits: dbohdan (~dbohdan@user/dbohdan) (*.net *.split)
[23:43:55] *** Quits: topoi (~topoi@user/topoi) (*.net *.split)
[23:44:44] *** Joins: evdubs_ (~evdubs@user/evdubs)
[23:44:45] *** Joins: gproto_23 (~gproto23@user/gproto23)
[23:44:53] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[23:44:56] *** Joins: amk (~amk@109.255.169.126)
[23:44:57] *** Joins: qhong- (~qhong@rescomp-21-400677.stanford.edu)
[23:44:57] *** ns127 is now known as ns12
[23:45:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[23:45:10] *** Joins: lagash_ (lagash@lagash.shelltalk.net)
[23:45:23] *** Joins: nalaginrut_ (~nalaginru@121.35.188.14)
[23:45:26] *** Joins: robin_ (~robin@user/terpri)
[23:45:30] *** Joins: NobleNibble (~f8l@37.228.213.3)
[23:45:32] *** Joins: massimo_zaniboni (~quassel@mail.asterisell.com)
[23:45:34] *** Quits: gproto23_ (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[23:45:35] *** Quits: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: lockywolf (~lockywolf@46.23.90.177) (Ping timeout: 240 seconds)
[23:45:35] *** Joins: deltab (~deltab@user/deltab)
[23:45:35] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: jrincayc1 (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: stultulo (~f8l@37.228.213.3) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: psf (~pi@206.55.172.18) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: paul_j` (~user@67.26.169.217.in-addr.arpa) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: perro (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[23:45:35] *** Quits: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: atw (~user@2601:5c2:c500:76b0::36e1) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: nalaginrut (~nalaginru@121.35.188.14) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: snits_ (~quassel@ip98-179-76-75.ph.ph.cox.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: mzan (~quassel@mail.asterisell.com) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: evdubs (~evdubs@user/evdubs) (Ping timeout: 240 seconds)
[23:45:36] *** Quits: gwatt (~gmw@2605:2700:0:5::4713:955c) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: yewscion (~yewscion@72-21-196-64.amazon.com) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: taiju (~taiju@240b:253:ec40:2400:bd6b:dfac:c8bb:c6d4) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Read error: Connection reset by peer)
[23:45:37] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:848a:739c:db10:94b0) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:212e:fc99:e71:f094) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: elflng (~elflng@5.28.137.182) (Ping timeout: 240 seconds)
[23:45:37] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Ping timeout: 240 seconds)
[23:45:38] *** Quits: robin (~robin@user/terpri) (Ping timeout: 240 seconds)
[23:45:42] *** Joins: psf (~pi@206.55.172.18)
[23:45:48] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92) (Remote host closed the connection)
[23:45:50] *** Joins: atw` (~user@2601:5c2:c500:76b0::36e1)
[23:45:52] *** Joins: dstein64- (~dstein64@dannyadam.com)
[23:45:54] *** Quits: zap1 (~zap@gateway/tor-sasl/zap) (Ping timeout: 276 seconds)
[23:45:57] *** Quits: oldf8l (~f8l@37.228.213.3) (Read error: Connection reset by peer)
[23:46:08] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:46:14] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[23:46:20] *** Joins: gwatt (~gmw@2605:2700:0:5::4713:955c)
[23:46:23] *** Joins: leah2 (~leah@vuxu.org)
[23:46:30] *** Joins: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au)
[23:46:36] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:b0a0:2acf:d5f8:7b92)
[23:46:40] *** dstein64- is now known as dstein64
[23:46:44] *** Joins: siiky (~siiky@2001:8a0:ff52:4b00:d65f:f081:77d0:63d8)
[23:46:45] *** Joins: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com)
[23:46:55] *** Joins: elflng (~elflng@5.28.137.182)
[23:47:07] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[23:47:08] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[23:47:11] *** Quits: Oxyd_ (~oxyd@user/oxyd) (Read error: Connection reset by peer)
[23:47:14] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (*.net *.split)
[23:47:14] *** Quits: sdu (~sidu@185.44.146.214) (*.net *.split)
[23:47:14] *** Quits: schulze (~schulze@dynamic-077-001-108-147.77.1.pool.telefonica.de) (*.net *.split)
[23:47:14] *** Quits: hexology (~hexology@user/hexology) (*.net *.split)
[23:47:15] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (*.net *.split)
[23:47:15] *** Quits: mns_ (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[23:47:15] *** Quits: f8l (~f8l@37.228.213.3) (*.net *.split)
[23:47:15] *** Quits: DaPinkOne (~Dap@user/dap) (*.net *.split)
[23:47:16] *** Quits: light (~light@user/light) (*.net *.split)
[23:47:16] *** Quits: akarle (~akarle@user/akarle) (*.net *.split)
[23:47:16] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[23:50:17] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[23:52:44] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[23:53:14] *** weechat is now known as Spawns
[23:53:20] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Ping timeout: 268 seconds)
[23:53:21] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (Ping timeout: 268 seconds)
[23:53:32] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (Ping timeout: 240 seconds)
[23:53:33] *** Joins: m455 (~m455@user/m455)
[23:54:00] *** Joins: nisstyre (~wes@user/nisstyre)
[23:54:09] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[23:54:24] *** Joins: skapata (~Skapata@user/skapata)
[23:54:51] *** Joins: Zipheir (~wcm@98.4.178.27)
[23:55:48] <Zipheir> Wow, what happened?
[23:55:54] <jrincayc> That was strange.
[23:56:58] *** Server sets mode: +ntz 
[23:57:02] *** Joins: nazarii[m] (~nazariim]@2001:470:69fc:105::63a)
