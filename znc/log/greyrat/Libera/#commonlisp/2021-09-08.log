[00:05:32] *** Quits: vats (~vats@42.111.21.216) (Ping timeout: 252 seconds)
[00:11:17] *** Joins: tfeb (~tfb@88.98.95.237)
[00:15:42] <pjb> lisp123_: theorically, it's not impossible, but no known lisp debugger has implemented it.
[00:16:05] <pjb> lisp123_: you may have a look at cl-stepper.
[00:17:31] <pjb> lisp123_: note that if you want to be able to mutate the state and continue the execution from a point in the past, you'll need to implement continuations in CL.  But it is possible that delimited continuations are enough, if you just drop the alternate futures.
[00:17:48] <pjb> lisp123_: otherwise cf. time travelling debuggers.
[00:18:29] <pjb> lisp123_: (they make snapshots on syscalls, and to go back, they actually restore the previous snapshot and execute forward until the previous instruction/expression).
[00:18:36] <tfeb> I hate to say this but in desperation I have stepped back in a debugger by saving & restoring worlds.
[00:18:36] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[00:18:44] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 252 seconds)
[00:18:58] *** Quits: pve (~pve@178-55-69-143.bb.dnainternet.fi) (Quit: leaving)
[00:19:34] <tfeb> (a long time ago on a system which took many hours to get to the state before the state that killed it)
[00:21:25] <pjb> tfeb: indeed, it's a possibility in CL to save the lisp image oftenâ€¦
[00:22:03] <pjb> But in general, this doesn't save the threads.  clisp makes big efforts to restore stuff.
[00:22:49] *** Joins: akoana (~ah@user/akoana)
[00:23:37] <bhyde[m]> interlisp had deep support for undo; so you could run forward and backward.  see https://larrymasinter.net/interlisp-ieee.pdf, for example the mention of undo at the bottom of the first column
[00:23:39] <tfeb> pjb: yes, I was just about to ask if there were any systems other than dmachines which could do the 'restart the world from where it left off' thing
[00:23:43] <jcowan> Someone should port the Interlisp File Manager (or part of it) to CL
[00:24:49] <tfeb> I have turned off a d machine, carried it downstars, turned it on ... and continued a telnet session
[00:25:23] <jcowan> Well, provided you can do it within the telneted-to system's TCP timeout
[00:26:38] <tfeb> right, which must have been kong enough (also probably old-fashioned ethernet probably helped, so no switches getting in the way)
[00:31:26] *** Joins: dra (~dra@2a04:4540:640b:5900:b1fe:f2a5:2d35:e8c2)
[00:33:36] <lisp123_> pjb: Thanks
[00:34:49] *** Parts: didi (~user@user/didi) (O bella ciao bella ciao bella ciao, ciao, ciao.)
[00:35:32] <lisp123_> pjb: Do you have a channel for cl-stepper?
[00:37:36] <pjb> none.
[00:37:53] <lisp123_> Do you want to go to #cl-stepper? Had a quick qn
[00:38:00] <lisp123_> (if you have time of course)
[00:38:06] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[00:38:15] *** Joins: tfeb (~tfb@88.98.95.237)
[00:39:18] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Quit: Leaving)
[00:44:15] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Remote host closed the connection)
[00:45:43] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[00:51:12] <jcowan> bhyde[m]: Interlisp and Medley are on-topic at #lisp; it would be nice to have someone else there (who knows more than I do)
[00:51:15] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Changing host)
[00:51:15] *** Joins: saltrocklamp[m] (~elementio@user/hexology)
[00:59:44] *** Quits: tfeb (~tfb@88.98.95.237) (Remote host closed the connection)
[01:09:31] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[01:16:08] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[01:20:52] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:21:15] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Remote host closed the connection)
[01:21:44] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[01:23:47] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[01:24:09] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:24:09] *** Joins: Skyfire (~pyon@user/pyon)
[01:26:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:26:10] *** Lord_of_Life_ is now known as Lord_of_Life
[01:28:50] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[01:29:55] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:30:07] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:37:57] *** Quits: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de) (Read error: No route to host)
[01:38:22] *** Joins: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de)
[01:40:41] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[01:43:37] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:44:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:48:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[02:04:32] *** Joins: karlosz (~karlosz@12.196.174.98)
[02:07:05] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[02:07:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:09:56] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[02:15:53] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[02:18:40] *** Quits: gaqwas (~john@dynamic-077-007-136-210.77.7.pool.telefonica.de) (Ping timeout: 252 seconds)
[02:25:07] *** Quits: zagura (~zagura@user/zagura) (Ping timeout: 240 seconds)
[02:25:17] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[02:25:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:26:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:27:28] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[02:27:47] *** Joins: zagura__ (~zagura@user/zagura)
[02:30:13] *** Quits: cosimone` (~user@93-44-185-79.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[02:30:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:31:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:36:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:48:47] *** Joins: dre (~dre@2001:8003:c932:c301:5cf6:8209:dad6:8a73)
[02:52:01] *** Quits: dra (~dra@2a04:4540:640b:5900:b1fe:f2a5:2d35:e8c2) (Remote host closed the connection)
[02:54:21] *** Quits: VincentV` (~user@212.241.16.115) (Remote host closed the connection)
[03:00:56] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Quit: Leaving.)
[03:03:45] *** Joins: frgo (~frgo@p200300deef0cee00292606f165186111.dip0.t-ipconnect.de)
[03:05:22] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[03:08:10] *** Quits: frgo (~frgo@p200300deef0cee00292606f165186111.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:10:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:12:50] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[03:12:52] *** Joins: frgo (~frgo@p200300deef0cee00292606f165186111.dip0.t-ipconnect.de)
[03:17:31] *** Quits: frgo (~frgo@p200300deef0cee00292606f165186111.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:24:07] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[03:30:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:46:48] *** Parts: akoana (~ah@user/akoana) ()
[04:03:43] *** Quits: Fare (~fare@2601:184:4a7f:995c:9831:89f9:7d97:56dd) (Ping timeout: 252 seconds)
[04:16:42] *** Joins: Fare (~fare@2601:184:4a7f:995c:bfe0:9118:964c:c36e)
[04:54:00] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[04:58:35] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[05:10:47] *** Quits: random-nick (~random-ni@87.116.182.103) (Ping timeout: 252 seconds)
[05:11:22] *** Quits: Fare (~fare@2601:184:4a7f:995c:bfe0:9118:964c:c36e) (Ping timeout: 252 seconds)
[05:24:08] *** Joins: Fare (~fare@2601:184:4a7f:995c:a794:14fe:6f00:406e)
[05:50:38] *** Quits: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:58:54] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[05:59:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:59:29] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:05:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[06:14:04] *** Quits: Fare (~fare@2601:184:4a7f:995c:a794:14fe:6f00:406e) (Ping timeout: 252 seconds)
[06:47:19] *** Joins: Fare (~fare@2601:184:4a7f:995c:6ab4:ef7a:737b:604)
[06:52:03] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[06:52:52] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[06:53:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[07:16:51] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:28:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[07:30:46] *** Joins: lad (~lad@user/lad)
[07:33:57] <beach> Good morning everyone!
[07:37:54] *** Joins: griffinmb (sid410590@id-410590.helmsley.irccloud.com)
[07:48:40] *** Quits: Fare (~fare@2601:184:4a7f:995c:6ab4:ef7a:737b:604) (Ping timeout: 252 seconds)
[08:15:52] *** Quits: semz (~none@user/semz) (Ping timeout: 245 seconds)
[08:18:47] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:19:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[08:23:33] *** Joins: robin (~robin@user/terpri)
[08:31:26] *** Joins: hexology (~hexology@user/hexology)
[08:36:46] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[08:41:46] *** Joins: semz (~none@user/semz)
[08:46:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:02:45] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[09:04:09] *** Joins: amb007 (~a_bakic@206.15.23.93.rev.sfr.net)
[09:05:09] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:08:10] *** Joins: Everything (~Everythin@37.115.210.35)
[09:08:23] *** Joins: robin (~robin@user/terpri)
[09:08:33] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:19:26] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:21:24] *** Joins: robin (~robin@user/terpri)
[09:28:10] *** Quits: cyberbanjo (~malik@2607:fb90:4222:17a9:5f8a:c04b:188e:b6cb) (Ping timeout: 240 seconds)
[09:34:09] *** Joins: vats (~vats@42.111.12.107)
[09:49:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:53:05] *** Quits: amb007 (~a_bakic@206.15.23.93.rev.sfr.net) (Ping timeout: 260 seconds)
[09:53:40] *** Joins: amb007 (~a_bakic@171.133.22.93.rev.sfr.net)
[10:02:42] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[10:04:17] <ecraven> anddam: I just moved it to .quicklisp and then changed the path in .sbclrc
[10:05:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:11:48] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:14:59] *** Joins: robin (~robin@user/terpri)
[10:33:19] *** Joins: gaqwas (~john@dynamic-077-009-006-093.77.9.pool.telefonica.de)
[10:34:11] *** zagura__ is now known as zagura
[10:39:54] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:41:20] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 252 seconds)
[11:02:47] *** Quits: amb007 (~a_bakic@171.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:03:15] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:04:13] *** Joins: shka (~herr@109.231.62.239)
[11:05:32] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:05:51] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:12:24] *** Joins: pve (~pve@176-93-125-80.bb.dnainternet.fi)
[11:15:12] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[11:16:16] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:19:46] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[11:20:40] *** Joins: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7)
[11:20:48] *** Joins: sander (~sander@user/sander)
[11:28:50] *** Joins: john__ (~john@dynamic-077-009-006-093.77.9.pool.telefonica.de)
[11:28:52] *** Quits: gaqwas (~john@dynamic-077-009-006-093.77.9.pool.telefonica.de) (Read error: Connection reset by peer)
[11:30:33] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:32:31] *** Joins: robin (~robin@user/terpri)
[11:33:35] *** Joins: frgo (~frgo@p200300deef0cee004dd8a78e3cac1c81.dip0.t-ipconnect.de)
[11:38:01] *** Quits: frgo (~frgo@p200300deef0cee004dd8a78e3cac1c81.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:40:03] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[11:43:31] *** Quits: vats (~vats@42.111.12.107) (Ping timeout: 252 seconds)
[11:45:43] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:47:43] *** Joins: cjb (~cjb@user/cjb)
[11:52:32] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[12:01:32] *** Joins: Alfr (~Alfr@user/alfr)
[12:01:40] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:09:14] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:19:56] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:23:20] *** Quits: john__ (~john@dynamic-077-009-006-093.77.9.pool.telefonica.de) (Ping timeout: 265 seconds)
[12:25:39] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[12:26:10] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 240 seconds)
[12:26:56] *** Joins: khrbt (~znc@user/khrbt)
[12:30:09] *** Quits: khrbt (~znc@user/khrbt) (Client Quit)
[12:30:22] *** Joins: khrbt (~znc@user/khrbt)
[12:30:57] *** Joins: robin (~robin@user/terpri)
[12:36:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:43] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:37:54] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:39:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:57:23] *** Joins: makomo (~makomo@user/makomo)
[12:58:50] *** Quits: cjb (~cjb@user/cjb) (Quit: cjb)
[12:58:54] *** Joins: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu)
[12:59:31] *** Joins: cjb (~cjb@user/cjb)
[13:00:19] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[13:07:19] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[13:10:20] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:10:38] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[13:20:56] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[13:21:48] *** Joins: makomo (~makomo@user/makomo)
[13:22:43] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[13:22:54] *** Joins: makomo (~makomo@user/makomo)
[13:27:21] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:46:44] *** Quits: seere (~seere@user/seere) (Read error: Connection reset by peer)
[13:48:28] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[13:49:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[13:50:47] *** Quits: cjb (~cjb@user/cjb) (Quit: cjb)
[13:52:14] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[13:55:22] *** Joins: VincentVega (~user@212.241.16.115)
[14:04:01] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:08:39] *** Joins: amk (~amk@109.255.169.126)
[14:15:03] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:15:10] *** Joins: amk (~amk@109.255.169.126)
[14:15:36] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:15:45] *** Joins: amk (~amk@109.255.169.126)
[14:15:58] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[14:16:06] *** Joins: amk (~amk@109.255.169.126)
[14:16:18] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:20:27] *** Joins: treflip (~user@95.79.32.99)
[14:22:12] *** Joins: loke (~loke@junk.nocrew.org)
[14:28:58] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:29:26] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[14:30:04] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:30:12] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[14:41:09] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:41:36] *** Joins: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de)
[14:44:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[14:44:48] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[14:45:32] *** Quits: attila_lendvai_ (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 252 seconds)
[14:46:07] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[14:51:09] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[14:51:37] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 252 seconds)
[14:52:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[14:52:21] *** Joins: amb007 (~a_bakic@171.133.22.93.rev.sfr.net)
[14:53:19] *** Quits: khoa (~khoa@user/khoa) (Quit: leaving)
[15:06:13] *** Joins: random-nick (~random-ni@87.116.182.103)
[15:08:43] *** Quits: amb007 (~a_bakic@171.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:08:56] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:09:04] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:09:50] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:11:37] *** Quits: frgo (~frgo@p200300deef0cee009951ff96d746a15c.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:29:33] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:30:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:33:32] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[15:44:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:45:14] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:49:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:51:07] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:09:07] *** Joins: yitzi (~yitzi@97-64-230-163.client.mchsi.com)
[16:16:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[16:20:40] *** Quits: lad (~lad@user/lad) (Ping timeout: 265 seconds)
[16:26:10] *** Joins: Fare (~fare@2601:184:4a7f:995c:a78a:401b:39f2:857e)
[16:30:56] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[16:47:45] *** Joins: X-Scale (~ARM@128.229.28.37.rev.vodafone.pt)
[16:55:56] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[17:07:39] *** Joins: vats (~vats@103.70.83.191)
[17:09:17] *** Joins: speskk (~user@4133b417.cst.lightpath.net)
[17:13:14] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[17:15:34] *** Joins: VincentV` (~user@212.241.16.115)
[17:17:20] *** Quits: VincentVega (~user@212.241.16.115) (Ping timeout: 252 seconds)
[17:19:57] *** Joins: lisp123_ (~lisp123@45.130.83.218)
[17:22:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[17:23:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[17:30:49] *** Joins: Bike (~Glossina@71.69.170.70)
[17:30:49] *** ChanServ sets mode: +o Bike
[17:38:00] *** Quits: attila_lendvai (~alendvai@catv-176-63-71-84.catv.broadband.hu) (Ping timeout: 260 seconds)
[17:49:47] <Demosthenex> anyone have any recommended reading regarding lexers, parsers, and handling text records as opposed to languages? i'm tinkering with cl-lexer and trying to figure out if cl-yacc is needed or if i should just use trivia
[17:56:13] *** Joins: karlosz (~karlosz@12.196.174.98)
[17:56:19] <pve> Demosthenex: what does a text record look like?
[17:56:58] <pve> is it like csv or something?
[17:57:25] <jackdaniel> Demosthenex: if you look into grammars you should look into the library esrap
[18:00:53] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[18:03:21] *** Joins: karlosz (~karlosz@12.196.174.98)
[18:05:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:06:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:08:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:09:25] *** Quits: lisp123_ (~lisp123@45.130.83.218) (Ping timeout: 265 seconds)
[18:11:49] *** Quits: speskk (~user@4133b417.cst.lightpath.net) (Ping timeout: 265 seconds)
[18:18:00] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[18:18:40] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Remote host closed the connection)
[18:21:28] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[18:26:39] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:29:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:32:13] *** Joins: speskk (~user@4133b417.cst.lightpath.net)
[18:32:14] *** Parts: speskk (~user@4133b417.cst.lightpath.net) ()
[18:32:34] *** Joins: speskk (~user@4133b417.cst.lightpath.net)
[18:34:24] <Demosthenex> pve: it's output from a mainframe style report, multiline records. i'm using TXR currently to extract fields, but i'm having issues scaling and so was considering going back to CL. rather than do the whole parsing thing by hand, i was hoping to do field validation and extraction with a little more sophistication
[18:35:42] <Demosthenex> plus, using slime to test and develop would be better than launching my programs repeatedly from the cli
[18:35:49] <jcowan> Does anyone know if it's common to use keywords rather than symbols in S-expression data?
[18:36:27] <phoe> I think so, yes
[18:39:48] <bhyde[m]> Definitely
[18:40:21] <adeht> keywords are symbols
[18:40:40] <phoe> I understood that as "non-keyword symbols"
[18:41:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[18:41:38] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[18:41:59] *** adeht is now known as _death
[18:42:28] <lisp123> I am looking at some nested list data, for example (A B (C D (E F) G) H (I) J) --> I am traversing the list and doing many things to each element. Now, my question is, is it better for me to store properties of each item against a string representation of the list hierarchy. By which I mean, I can use "`1.2.3" to refer to the third element of the second element of the first element of the main list. By doing so, i can create a hash & also so
[18:42:28] <lisp123> rt the data well
[18:43:17] <lisp123> So I am thinking, to get the properties associed with C for example, I just do a hash look up against "2.1" (C is the first element of the second element of the main list)
[18:43:31] <Demosthenex> pve: https://termbin.com/ihko  that's a fictional example with the key issues. identifying a header, parsing out fields, and taking some multiline free form
[18:43:40] <lisp123> vs. storting all the properties in a nested list that has the exact same form as the original list, and then having to traverse to each element. Thoughts?
[18:43:48] <phoe> lisp123: why not use a mirror list representation?
[18:44:07] <lisp123> What is that?
[18:44:11] <phoe> in order to look up the properties of C, you take the CADDR of your property list
[18:44:25] <lisp123> Isn't that more expensive vs. a hash lookup
[18:44:27] <jcowan> Yes, that's what I meant.  It seems safe to put keywords into a data file, but other package indicators are messy, as the recipient may not have that package.  Plain symbols can be dealt with by creating a :data package and rebinding current-package to (find-package :data) around the read(s).  Does that sound sound?  :-)
[18:44:32] <phoe> the question is what do you hash
[18:44:34] <lisp123> if it is reasonably deep
[18:44:46] <Demosthenex> jackdaniel: esrap looks interesting, instead of a lexer then a parser, it's both in one?
[18:44:52] <phoe> maybe you don't need to stringify anything, just use a list of numbers as a key
[18:44:52] <lisp123> because I can store the positions as strings, e.g. "1.1.3.4.5.6"
[18:44:58] <phoe> something like (2 1)
[18:45:13] <phoe> no need to make strings out of it this way, you can feed the numbers directly into NTH or something
[18:45:37] <lisp123> strings are easier to sort no?
[18:45:53] <lisp123> and also easier to use as a key for hash table?
[18:46:11] <phoe> why do you want to sort strings though
[18:46:12] <lisp123> If I use (2 1), it would have to check for equality of the list, which I'm not sure if its more expensive?
[18:46:24] <phoe> lisp123: you need to use EQUAL for strings anyway
[18:46:26] <jcowan> lisp123: You'd need a specialized sorting routine to sort "11.1.2" after "1.1.2".  Using lists of integers doesn't have that problem.
[18:46:29] <Demosthenex> anyway, all the reading material i can find on lexer/parser is about making new languages, not applying those techniques to text record parsing/import for a db. that's why i asked for general reading material ;]
[18:46:46] <phoe> and if you sort strings in a naive way like via STRING<, then "1.11" will arrive before "1.2"
[18:46:54] <phoe> oh, what jcowan said, yes
[18:47:30] <jcowan> If you're worried about performance, use a vector of fixnums instead a list.
[18:48:11] <lisp123> Hmm ok. So a list of numbers then, each representing the position in each node (as one goes down the tree)
[18:48:26] <lisp123> And that would be equivalent vs. using strings for performance?
[18:48:35] <lisp123> I think that works
[18:49:04] <phoe> benchmark if you really have to
[18:49:17] <lisp123> I was thinking sorting (1 2 2) , (1 1 2), (0 2 3) would be slower than sorting 1.2.2, 1.1.2, 0.2.3 (as strings)
[18:49:20] *** Joins: cosimone` (~user@93-44-185-79.ip98.fastwebnet.it)
[18:49:22] <phoe> and note what jcowan said
[18:49:43] <phoe> in order to sort, you'll need a custom routine or you'll need to unparse the string
[18:49:46] <phoe> otherwise "1.11" versus "1.2"
[18:50:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[18:51:03] <lisp123> I could do 1.02 though
[18:51:17] <lisp123> Then the problem is okay as long as less than 99 nodes
[18:51:28] <lisp123> (I got 99 problems, but lisp ain't one :D)
[18:51:35] <phoe> that's working around the problem and not solving it
[18:52:31] <lisp123> I guess my initial question is (a) do you agree that either using strings or a number lookup is much better than storing the whole set of properties in a big list and having to traverse the list to get the element I want (e.g. via nth or something)
[18:52:48] <phoe> use a vector of fixnums instead of a string, that'll be the fastest
[18:53:02] <lisp123> Ok let me look that up
[18:53:22] <lisp123> And that can be used as hashkeys yes?
[18:53:37] <phoe> yes, with an EQUALP hashtable
[18:53:52] <lisp123> Thanks!
[18:54:09] <lisp123> Wish me luck, hopefully this algorithm I am doing works out
[18:54:13] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[18:57:20] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[18:57:48] *** Joins: cyberbanjo (~malik@172.58.172.8)
[19:02:04] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[19:02:30] <jcowan> Of course, you'll need a vector of integers instead of fixnums if you have more than 2^60 (or so) nodes.  But I wouldn't worry.  :-)
[19:02:57] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[19:03:16] *** Joins: robin (~robin@user/terpri)
[19:16:50] *** Joins: karlosz (~karlosz@12.196.174.98)
[19:22:28] *** Quits: yitzi (~yitzi@97-64-230-163.client.mchsi.com) (Quit: Leaving)
[19:24:01] <beach> lisp123: Your problem is not clear, because you haven't told us how your program will receive those numbers in the hierarchy.  Like, if those numbers come as variables, it would be a disaster to create a string first, and perhaps even a list of those numbers.  It would then be better to keep your data as a nested dictionary, perhaps with each node as an alist or a vector or a hash table depending on the density of your numbers.
[19:26:30] <beach> lisp123: Whenever you have a problem with a data structure like that, you must explain the protocol for accessing it.  If you don't, there is no way to figure out what the best representation is.
[19:27:39] <beach> lisp123: In other words, you first determine an "abstract data type" (or ADT) consisting of a set of protocol functions, and then you can determine one or more reasonable implementations of that ADT.
[19:35:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[19:37:00] *** Joins: robin (~robin@user/terpri)
[19:46:38] <jcowan> beach: In principle, yes.  However, Lisp is notoriously the "big ball of mud" pattern's favorite language.  You often simply don't know what the API is at first, so the most malleable implementation strategy may be better than the most performant
[19:48:34] <beach> Sure, but then the question of what the best implementation is, is not relevant.
[19:49:01] <beach> So the answer is "do what you want since we don't know how it is going to be used.
[19:49:02] <jcowan> It is, but the definition of "best" has changed.
[19:50:04] <jcowan> And we know pretty well how useful performance hacks tend to be, especially in the absence of measurements.
[19:51:00] *** Joins: makomo (~makomo@user/makomo)
[19:54:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[19:54:59] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[19:55:53] *** Joins: robin_ (~robin@user/terpri)
[19:56:09] *** Quits: robin (~robin@user/terpri) (Read error: Connection reset by peer)
[19:57:17] *** Quits: cyberbanjo (~malik@172.58.172.8) (Read error: Connection reset by peer)
[19:59:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 265 seconds)
[20:00:07] *** Joins: amb007 (~a_bakic@187.133.22.93.rev.sfr.net)
[20:01:11] *** Joins: cyberbanjo (~malik@2607:fb90:4227:48d5:f99e:7382:34fa:8a52)
[20:12:40] *** Joins: lad (~lad@user/lad)
[20:14:55] *** Joins: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100E-static.midco.net)
[20:15:15] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[20:16:59] *** Joins: robin (~robin@user/terpri)
[20:17:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[20:18:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:19:03] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[20:24:55] *** Joins: karlosz (~karlosz@12.196.174.98)
[20:30:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:39:34] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[20:42:42] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[20:48:00] *** Quits: amb007 (~a_bakic@187.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:48:16] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:54:56] *** Joins: fengshaun (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[20:59:58] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[21:02:57] *** Quits: Fare (~fare@2601:184:4a7f:995c:a78a:401b:39f2:857e) (Ping timeout: 245 seconds)
[21:04:52] *** Quits: fengshaun (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Quit: bibi!)
[21:11:37] *** Joins: robin (~robin@user/terpri)
[21:17:03] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (Remote host closed the connection)
[21:18:05] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[21:18:57] *** Joins: Alfr (~Alfr@user/alfr)
[21:23:20] *** Quits: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100E-static.midco.net) (Quit: Leaving)
[21:27:06] *** Joins: Devon (~devon@2601:184:4780:ee50::60b0)
[21:28:15] *** Joins: Fare (~fare@2601:184:4a7f:995c:3cbc:9ebf:9a28:f9b1)
[21:30:11] *** Joins: silasfox (~sbv@p200300cec702d762e9ac329684e1b885.dip0.t-ipconnect.de)
[21:32:01] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 252 seconds)
[21:33:04] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:7052:64ff:da7d:a525)
[21:39:41] *** Joins: molson (~michael@2001-48F8-704A-CA1-0-0-75F-100E-static.midco.net)
[21:48:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:55:27] *** Quits: silasfox (~sbv@p200300cec702d762e9ac329684e1b885.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[22:07:45] *** Joins: Michal (~user@5.30.23.247)
[22:07:48] <Michal> Hi
[22:08:01] <Michal> I had a quick ParEdit Question
[22:08:43] <Michal> Is there a way to take all the expressions out of a LET form (excluding the bindings) outside (group splice)?
[22:15:27] <jcowan> Is there any particular advantage to synthesizing a readtable from scratch rather than just having a big cond or case in a loop?
[22:16:43] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:16:57] *** Joins: abraham (~textual@191.96.121.144)
[22:17:09] <lisp123> jcowan: I think it comes down to personal choice IMO
[22:17:32] <jcowan> Okay, so not particularly more or less performant?
[22:17:56] <lisp123> beach: p.s. Just saw your message, I agree with you but too much complexity for me for now, so something for another day to consider
[22:17:57] *** Quits: cyberbanjo (~malik@2607:fb90:4227:48d5:f99e:7382:34fa:8a52) (Ping timeout: 245 seconds)
[22:18:37] <lisp123> jcowan: Sorry, I'm not knowledgable enough to answer on that. I personally avoid readtables since it adds complexity
[22:19:03] <jcowan> How so?
[22:19:20] <lisp123> A cond / case is relatively easily to digest
[22:19:22] <jcowan> Set up your readtable, and then you can call read and get a token of whatever language you are parsing.
[22:19:32] <jcowan> True.
[22:19:55] <lisp123> Readtable requires somebody to know what readtables are and how they work - probably okay for the lisp wizards on this channel, but I can imagine a lot of people would struggle with it
[22:22:42] *** Joins: Josh_2 (~user@37.25.47.130)
[22:24:53] <Bike> I don't understand the question. where would the big cond or case be?
[22:28:03] *** Joins: robin (~robin@user/terpri)
[22:31:47] <lisp123> Bike - I think jcowan is parsing some text. So I assume he will loop through each token, and there would be a big cond table to determine how to parse that token and then move onto the next
[22:33:03] <jcowan> Looping through characters, not tokens.  Presumably readtables have better than O(n) search time.
[22:33:27] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[22:34:29] <Bike> so the question is why use a dynamic dispatch on characters rather than having a fixed dispatch?
[22:35:13] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:40:11] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[22:40:55] *** Quits: abraham (~textual@191.96.121.144) (Quit: Textual IRC Client: www.textualapp.com)
[22:41:33] *** Joins: abraham (~abraham@191.96.121.144)
[22:41:46] *** Joins: karlosz (~karlosz@12.196.174.98)
[22:41:47] *** Joins: amb007 (~a_bakic@155.133.22.93.rev.sfr.net)
[22:41:48] *** Quits: amb007 (~a_bakic@155.133.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:41:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[22:41:59] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[22:43:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:53:55] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:55:49] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:59:53] <jcowan> I would guess that a readtable contains either a hash table or a vector or some combination of them, which means that you get better than linear behavior when dispatching with them.  Of course you can use the same data structure(s) yourself, but with the same cost to human readability due to "spooky actions at a distance" as with readtables.
[23:01:14] <Bike> is that a yes
[23:01:43] <jcowan> Perhaps some compilers can optimize case if the key form and the candidate keys are all known to be of type character (or fixnum).
[23:02:06] <jcowan> ??  You asked a why question which I tried to answer.
[23:02:29] <Bike> i was asking whether your question was "why use a dynamic dispatch on characters rather than having a fixed dispatch?"
[23:03:49] <jcowan> Both of these methods are fixed dispatch, at least if the hashtable is not changed inside the loop, and that is fine for this application
[23:04:43] <jcowan> (I think we may be at cross-purposes)
[23:04:49] *** Joins: robin (~robin@user/terpri)
[23:05:01] <Bike> i'm just trying to understand your original question
[23:06:37] *** Quits: cosimone` (~user@93-44-185-79.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:07:36] <jcowan> Rephrasing: "Is it better (in whatever sense) to use a special-purpose readtable to dispatch when parsing a stream of characters, or is it better to dispatch with cond?
[23:08:40] <lisp123> jcowan: Minor point, but I assume you mean 'case' here to avoid having to evaluate the terms in the cond
[23:08:52] <lisp123> Unless the effect is the same
[23:09:39] <jcowan> Case or cond, I don't think it matters much, though perhaps compilers can optimize case on characters better.
[23:10:26] <Bike> i don't think i understand what you mean by "special-purpose readtable" and how that would be different from cond. if you mean having READ include (cond ((char= char-i-just-read #\() ...) ...) kind of code, the advantage of the readtable over that would just be that the readtable can be altered, and that different readtables can be passed to read to control its behavior.
[23:10:55] <Bike> some implementations can do efficient multiway branching with case. pretty sure sbcl does. it definitely does on numbers and even symbols.
[23:11:17] <jcowan> I mean a readtable built from scratch and used to parse something other than S-expreassions.
[23:11:40] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 260 seconds)
[23:11:42] *** Quits: VincentV` (~user@212.241.16.115) (Ping timeout: 245 seconds)
[23:12:05] <pve> Demosthenex: I dunno, I'd probably just hand-roll a parser for that kind of input, but esrap should work too (just saw your reply)
[23:13:04] *** Joins: karlosz (~karlosz@12.196.174.98)
[23:17:31] *** Joins: amk (~amk@109.255.169.126)
[23:17:47] <Demosthenex> pve: no prob. today i'm using TXR, which does a nice job of field extraction, the issue is debugging, no live interactive debug (ie: slime), and that i'm maintaining 20 tiny little parser programs in txr, shell, and sql. with cl i could likely just have a main one with some libraries.
[23:18:17] <Demosthenex> pve: and i've handrolled them before, perl, python, cl, etc. i'm familiar there, just trying to find the "elegant" maintainable solution. that is why i asked about lexing and parsing. ;]
[23:18:47] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:7052:64ff:da7d:a525) (Remote host closed the connection)
[23:20:07] <pve> Demosthenex: is it always 2 or more spaces separating the foo:bar pairs? Is there ambiguity there?
[23:20:40] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 265 seconds)
[23:20:43] <pve> oh I get it, the fields are fixed
[23:21:49] <Bike> oh. i don't think it's a good idea to use READ for much of anything but lisp code since you can't control how tokens are read short of putting a macro on every single component character. you're like writing your own square peg of an entirely different parser and trying to fit it into the round hole of READ
[23:23:45] <Demosthenex> pve: it varies. sometimes fields overfill, often whitespace, etc. i don't control the output
[23:24:18] <Demosthenex> Bike: just the idea of lexing in the first place is rather cool, it'd help remove much ambiguity as opposed to just regexp parsing
[23:24:30] <Demosthenex> its not computer language, just text records
[23:24:49] <Demosthenex> using a lexer into trivia sounds pretty cool, just having to read more to wrap my brain around it
[23:25:30] <Demosthenex> i didn't have a code example, i was just asking for reading recommendations to self educate ;]
[23:28:54] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[23:30:11] <pve> Demosthenex: ok, I just felt like parsing "This thing: 123   That thing: 456" could become brittle, depending on the values
[23:30:15] <Bike> racket's readtables don't seem to let you change token parsing either, huh
[23:31:30] <Demosthenex> yeah i was thinking lexing to regexp the field names, and using a good regexp/length filter to validate the data, and throw the lexed list into trivia to match the parts
[23:31:36] <Demosthenex> i think tomorrow i'll code up a test ;]
[23:32:15] <Demosthenex> because i'm just doing text records (with some variability), maybe a grammar isn't really the thing.
[23:32:45] <pve> Demosthenex: I'm not sure I understand what "lexing to regexp the field names" means
[23:33:38] <Demosthenex> pve: just taking in things like "this thing" into (:field "this thing") so i can match it in trivia
[23:33:54] <Demosthenex> pve: really, this is where multi-line regexp falls apart...
[23:34:09] <Demosthenex> i've done grotesque things in perl to try and do multiple line extraction
[23:34:31] <Demosthenex> shameful things that read like line noise
[23:35:39] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[23:36:11] <Demosthenex> multiline regexp is really fragile too, one thing can knock it off and make debugging impossible. lexed values and a pattern matcher sound better
[23:36:22] *** Quits: abraham (~abraham@191.96.121.144) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:37:29] <pve> Demosthenex: Ok, I get what you mean (although I think you might mean parsing, instead of lexing)
[23:38:59] *** Joins: abraham (~abraham@191.96.121.144)
[23:39:43] *** Quits: abraham (~abraham@191.96.121.144) (Client Quit)
[23:40:06] <Demosthenex> pve: so as i understood, the lexer recognizes text by regexp and turns it into strongly typed tokens. then the parser consumes the token chain to create an internal representation.
[23:40:26] <Demosthenex> i was thinking just lex the data, and then use trivia (cl pattern matching lib) to extract matching items
[23:40:40] <Demosthenex> i'm just generating sql to make a spreadsheet
[23:41:15] *** Joins: abraham (~abraham@191.96.121.144)
[23:41:40] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[23:42:00] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[23:42:07] <Demosthenex> so "This thing: 123  That thing: 456\n" lexed becomes '( (:field "This thing") (:space 1) (:thing 123) (:space 3) (:field "That thing") (:that 456) (:nl))
[23:42:24] <Demosthenex> and trivia could do a match statement to enforce required fields, etc.
[23:42:25] *** Quits: abraham (~abraham@191.96.121.144) (Client Quit)
[23:43:24] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:44:08] *** Joins: robin (~robin@user/terpri)
[23:44:12] <pve> Demosthenex: ok, I see now
[23:47:34] *** Joins: abraham (~abraham@191.96.121.37)
[23:47:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:47:59] <Demosthenex> i think that ought to be live debuggable, and easier to read and maintain than spamming multiline regexp
[23:55:45] *** Quits: abraham (~abraham@191.96.121.37) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[23:56:29] *** Joins: abraham (~abraham@191.96.121.37)
