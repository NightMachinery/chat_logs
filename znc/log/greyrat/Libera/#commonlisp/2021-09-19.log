[00:00:12] <rotateq> maybe first (setq *print-circle* t)
[00:00:48] <Alfr> CptKirk, it doesn't. A proper list is either nil or a cons whose cdr is a proper list.
[00:01:42] <Nilby> It doesn't expand it in this case. It just creates it and the loop goes through it.
[00:01:55] <Alfr> CptKirk, you get a circular list if you modify a cdr of a cons in a list to refer to some preceding cons of that list.
[00:02:26] *** Quits: cage (~cage@dynamic-adsl-84-220-251-50.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:04:03] <Nilby> Here's without the reader trick:(let* ((l (list 0 1))) (setf (cdr (last l)) l) (loop for i in l repeat 10 collect i))
[00:05:49] *** Joins: dre (~dre@2001:8003:c932:c301:ecf5:7fa2:569b:3a9)
[00:06:40] *** Quits: lisp123__ (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:07:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:11:45] <newlispurr> How do I put imports in a file in Common Lisp? (I'm using Portacle) If I put (ql:quickload :local-time) on top of my .lisp file, and run C-c C-k (compile and load) it doesn't work, but if run (ql:quickload :local-time) in the SLIME REPL and then C-c C-k again it works.
[00:12:11] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[00:12:15] <newlispurr> What should I put in my .lisp file so I don't have to run (ql:quickload :local-time) in the REPL every time I restart Emacs?
[00:12:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[00:12:40] <rotateq> you should put it in .sbclrc
[00:13:03] *** Joins: akoana (~ah@user/akoana)
[00:13:07] <Alfr> clhs eval-when
[00:13:07] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/s_eval_w.htm
[00:13:25] <Alfr> newlispurr, ^ and you usually want all three.
[00:13:42] *** Quits: amb007 (~a_bakic@6.104.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[00:13:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:16:19] *** Joins: igemnace (~ian@user/igemnace)
[00:18:58] <newlispurr> rotateq, Alfr: ah I see, thanks, I'll read about it
[00:20:28] *** Quits: newlispurr (~newlispur@2804:14d:baa2:4491:28e2:db2d:5eb3:deb2) (Quit: Client closed)
[00:24:49] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[00:25:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:30:09] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[00:37:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[00:41:00] *** Joins: lerax (~user@177-104-241-177.gbsn.com.br)
[00:41:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:45:44] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:52:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[00:54:05] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:02:08] *** Quits: lerax (~user@177-104-241-177.gbsn.com.br) (Ping timeout: 265 seconds)
[01:13:48] *** Quits: sander (~sander@user/sander) (Remote host closed the connection)
[01:16:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:26:39] <pjb> Alfr: also, you should not put quicklisp stuff in lisp source files, but in asd files!
[01:27:22] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 252 seconds)
[01:27:30] <pjb> jcowan: why do you think I implemented pipes with gray streams?
[01:27:46] <jcowan> I don't know gray streams, so I cannot tell.
[01:27:53] <pjb> jcowan: https://github.com/informatimago/lisp/blob/master/clext/pipe-article-en.txt
[01:31:03] <Alfr> pjb, sure when I make one. Some of my stuff are just single files in PATH, that's what I assumed he wanted such behavior.
[01:31:18] *** Joins: lerax (~user@177-104-241-177.gbsn.com.br)
[01:31:28] <pjb> CptKirk: you cannot have circular structures in the source code, but you can have them in literal objects (quoted or self-evaluating).
[01:32:02] <pjb> Alfr: so you explained how to use eval-when to put quicklisp in source file.  Which is what he shouldn't be doing.
[01:32:20] <CptKirk> :C confused
[01:33:23] <pjb> CptKirk: the source code is processed by the compiler. if you use structuring sharing, including circular structures, then the compiler may not terminate, or have other bugs because of the sharing.  But this doesn't matter for data, which is data, and is not processed by the compiler.
[01:34:02] <pjb> CptKirk: the only processing of literal data the compiler performs, is possibly identifying common substructures in literals, and share them in the object file.
[01:34:21] <pjb> CptKirk: ie. explicitely dealing with structure sharing including circular structures.
[01:34:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:34:57] <Alfr> pjb, I never said it's best practice. And I usually use it with load-system only -- not ql.
[01:35:02] <pjb> CptKirk: note: I use the term structure in a general way here, because #=/## can be used across cons cells, vectors, structure objects, and other read forms.
[01:35:33] <pjb> Alfr: then you should have explained that to newlispurr…
[01:35:40] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[01:36:01] <pjb> Alfr: the penalty is that you might eventually have to maintain the bad code he writes…
[01:36:39] <Alfr> I'll fix that after I get my time machine working, pjb.
[01:37:40] *** Lord_of_Life_ is now known as Lord_of_Life
[01:41:19] <pjb> Alfr: Great! :-)
[01:41:52] <pjb> We should be prepared and have a backlog of issues for when it'll be possible.
[01:51:29] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (Remote host closed the connection)
[01:52:05] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[01:55:15] <Nilby> Too bad we would already know if time machines worked.
[01:57:50] *** Quits: cosimone` (~user@93-47-230-5.ip115.fastwebnet.it) (Ping timeout: 260 seconds)
[01:59:44] <rotateq> Alfr: what kind of time machine?
[02:02:32] *** Quits: selwyn_ (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:02:33] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[02:10:08] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[02:11:21] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[02:13:08] *** Joins: nature (~nature@mail.blazebone.com)
[02:16:24] *** Joins: Oladon (~olad@98.43.81.226)
[02:38:10] *** Joins: tfeb (~tfb@88.98.95.237)
[02:54:32] *** Joins: brettgilio (~brettgili@x-node.gq)
[02:55:14] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 265 seconds)
[02:55:40] *** Quits: tfeb (~tfb@88.98.95.237) (Quit: died)
[03:20:06] *** Joins: nature (~nature@mail.blazebone.com)
[03:24:37] *** Quits: specbot (~specbot@common-lisp.net) (Remote host closed the connection)
[03:24:38] *** Quits: minion (~minion@common-lisp.net) (Read error: Connection reset by peer)
[03:24:59] *** Joins: minion (~minion@common-lisp.net)
[03:25:38] *** Joins: specbot (~specbot@common-lisp.net)
[03:28:06] *** Quits: frgo (~frgo@p200300deef0cee00f16a3c11b9326e8f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:28:34] *** Joins: frgo (~frgo@p200300deef0cee00ac143b47d0a82e1a.dip0.t-ipconnect.de)
[03:30:13] <hendursaga> How should I go about typing a function that returns the output of an already-typed function? Just "function" and the rest is inferred or what?
[03:31:04] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[03:31:41] *** Joins: srhm (~srhm@user/srhm)
[03:32:47] <rotateq> do you mean giving the same construct a second symbol?
[03:34:59] <rotateq> then an example could be when you want to abbreviate EXPT with ^, (setf (symbol-function '^) #'expt) and that probably wrapping in an eval-when. or with FDEFINITION instead of SYMBOL-FUNCTION, maybe to that point someone can say more detailed difference
[03:36:09] <hendursaga> Like, the first function calls the second one in a specialized way and returns the result, thus the return type is the same for both.
[03:36:43] <rotateq> noticeable is when you then do (fmakunbound 'expt) or just shadowing it in your package, the ^ is still usable
[03:37:05] <rotateq> oh hm hm
[03:37:32] <hendursaga> I'll just assume it infers it. Otherwise CL's typing system would seem really weak.
[03:38:22] <rotateq> even if not, the type system is good and quite flexible
[03:38:38] <rotateq> but how the inference goes is more left to the implementation you use
[03:39:16] <rotateq> ah okay I think now I understand better for what your question goes
[03:40:11] *** Quits: VincentVega (~user@212.241.25.220) (Ping timeout: 265 seconds)
[03:40:24] <hendursaga> In other words, the input types differ, but the output types should be the same.
[03:41:05] <hendursaga> Like, say, a function that returned the area of a rectangle and one that returned the area for a square.
[03:41:17] <rotateq> and you can use THE ;) or declare the type of your result in advance
[03:41:20] <hendursaga> Could you "reference" the rectangle's type explicitly?
[03:41:59] <rotateq> sure, when you provide classes and methods for your calculations
[03:43:10] <rotateq> not really different from, say, the INTEGER, but this is a built-in class and normally the user defined ones are standard-classes
[03:43:22] <rotateq> *the INTEGER class
[03:43:35] <hendursaga> So how would I type square so that the output types part is the same as rectangle?
[03:44:44] <rotateq> please specify your question more
[03:45:24] <hendursaga> Never mind, I see "describe" shows the derived type, it works as is
[03:46:24] <rotateq> with DECLAIM you can also specify the signature for your functions and methods
[03:46:50] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[03:51:28] *** Quits: gaqwas (~john@dynamic-077-007-103-245.77.7.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:51:40] <cuz> Would anyone mind helping me understand how (defun foo ()) is different from (defparamter foo (lambda ()))
[03:52:34] <rotateq> are you coming from scheme? ^^
[03:52:48] <rotateq> and yes, but i must think about it first
[03:52:49] <cuz> no, one sec let me explain the context
[03:52:50] <Alfr> hendursaga, consider: (defun f () 'foo) (defun g () (f)) I know of no implementation which derives that g will return a symbol.
[03:52:54] <pjb> The interpretation of a type declaration is as follows: >
[03:52:54] <pjb> 1. During the execution of any reference to the declared variable within the scope of the declaration, the consequences are undefined if the value of the declared variable is not of the declared type.
[03:52:54] <pjb> 2. During the execution of any setq of the declared variable within the scope of the declaration, the consequences are undefined if the newly assigned value of the declared variable is not of the declared type.
[03:52:54] <pjb> 3. At the moment the scope of the declaration is entered, the consequences are undefined if the value of the declared variable is not of the declared type.
[03:53:24] <pjb> Therefore you really do not want to use type declarations since the only thing they do, is make your code more undefined!
[03:53:45] <Alfr> hendursaga, most likely because you could later (defun f () 42); so that'd would then have to be fixed up.
[03:54:12] <rotateq> cuz: a first thing that comes to my mind is, with DEFUN you also define a block you can explicitely return from
[03:55:12] <cuz> I'm making a package and I want to split it into different files. I have this foo thing that I want to reference in a seperate file than the one it is defined. When I try to reference it while using defun I get an undefined variable warning from slime...
[03:55:19] <pjb> The specifications of FTYPE is less precise, but I think we can safely infer the same kind of undefinedness will occur if you declare ftype of your functios.
[03:55:30] <rotateq> and as a parameter you have to use funcall
[03:56:31] <cuz> Hmmm I am using funcall... maybe thats whats bringing up the warning
[03:56:33] <pjb> hendursaga: furthermore, what is the type of the function f of Alfr? It returns 42. different implementations say 42 is of type: (INTEGER 0 2147483647) (INTEGER 0 1152921504606846975) (INTEGER 0 1099511627775) (INTEGER 42 42) (INTEGER 0 4611686018427387903)
[03:57:04] <pjb> hendursaga: If you have an implementatation for which it's (INTEGER 42 42)  and you want to say that g is of same type, then g can only return 42 !!!
[03:57:18] <pjb> But any other type is also wrong, why couldn't g return -1?
[03:57:39] <rotateq> cuz: okay but you can in the second file put atop (in-package :my-pkg) and specify in your .asd that the second depends on the first where the function foo is initially defined. or do i miss something?
[03:57:42] <pjb> hendursaga: so the answer to your original question is: yes.
[03:57:59] <rotateq> pjb: 42 is all you need :P
[03:57:59] <pjb> Anything else would be silly.
[03:58:09] <Alfr> pjb, doesn't matter for that example definitely not symbol, as f initially gave back foo.
[03:58:23] <Alfr> s/foo/'foo/
[03:58:35] <pjb> (type-of 't) #| --> boolean |# :-P
[03:59:23] <cuz> rotateq: yeah thats exactly what i'm doing but I get a warning if I use defun and no warning with defparameter. It's very odd imo, and I was begining to think there might be a different table for functions and parameters?
[04:00:58] <moon-child> cuz: yes, that is exactly right, common lisp has multiple namespaces
[04:02:10] <pjb> Type inference is not specified by the language.  It's a technique a compiler can use, just like data flow or any other technique.  I'm not sure the programmer has to make anything of it, apart from the fact that the human programmers make reason about the program in a similar way.  Ie. we can infer that g returns foo (assuming the original f definition), but the human programmer must also assume that g may return anything else, because
[04:02:10] <pjb> it can be redefined at run-time, or f can be redefined at run-time, or there may have been some non-standard reader macro on #\' or on #\f that  makes 'foo read as something entirely different.
[04:02:18] <moon-child> rather than (defun f ...), you might also say (setf (symbol-function 'f) (lambda ...))
[04:02:30] <pjb> This is why there are function such as type-of and print !!!
[04:02:59] <pjb> hendursaga: so stop thinking about types, you're programming in lisp!
[04:04:06] <cuz> Ahh I didn't reference it with a #' ... rookie mistake
[04:04:36] <pjb> It would be better to think in terms of classes.  (but the details of class hierarchies are also implementation dependent).
[04:04:46] <rotateq> or your impl compiler tells you "get of my lawn!"
[04:05:12] <rotateq> cuz: oh "rookie", i like that word :)
[04:05:31] <pjb> (class-name (class-of 42)) returns fixnum in 4 implementations, and integer in 1.  fixnum is NOT a class defined in the CL standard!
[04:05:35] <rotateq> today I learned another funny word "whippersnapper"
[04:05:57] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 252 seconds)
[04:06:10] <pjb> (but it's not against the standard to have a fixnum class as subclass of integer, so those implementation remain conforming).
[04:06:23] <rotateq> pjb: yeah or the length in bits of a fixnum. on my machine for example: SBCL -> 62, CCL -> 60
[04:06:27] * Alfr thinks that pjb should mention the merit of occasionally using check-type.
[04:06:30] <pjb> your program could become non-conforming if you depended on fixnum as a class.
[04:06:52] <pjb> hendursaga: hence again, even if classes are better than types, you should probably forget about them!
[04:07:16] <pjb> Alfr: indeed, never use declare, use check-type if you really feel like it.
[04:07:31] <pjb> Also, always use check-type in API or UI functions.
[04:08:40] <rotateq> i got the difference of both like so in my head: DECLARE if it shall stay that type till the end, and CHECK-TYPE to check if it's at that point the type which can also vary later on
[04:09:23] <pjb> rotateq: no. declare type as listed above, only gives you undefined behavior.
[04:09:27] <pjb> it's totally useless.
[04:09:44] <rotateq> right after i wrote it i had other thoughts again
[04:10:03] <rotateq> many impl-dep stuff going with (declare (type ...))
[04:10:29] <pjb> Exactly.
[04:11:27] <rotateq> after all, for prototyping things such too narrow thoughts just stand in productivity's way
[04:13:02] <rotateq> it's not the "oh now we are going to a for loop, so specify the 'int i;' before" :P
[04:14:04] *** Joins: Oddity (Oddity@user/oddity)
[04:27:05] <cuz> Is there a way to save the state of a slime repl to come back to later?
[04:29:01] *** Quits: pve (~pve@37-136-24-22.rev.dnainternet.fi) (Quit: leaving)
[04:41:12] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[04:41:32] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:42:42] *** Parts: lerax (~user@177-104-241-177.gbsn.com.br) (it is not lisp time)
[04:43:30] *** Parts: jemoka (~jemoka@user/jemoka) (ERC (IRC client for Emacs 28.0.50))
[04:44:52] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[04:44:59] <raeda> cuz: on SBCL you can sb-ext:save-lisp-and-die to save an image. You would have to configure Slime to use that image on the next startup though
[04:46:04] *** Quits: brettgilio (~brettgili@x-node.gq) (Client Quit)
[04:46:25] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:46:47] *** Quits: brettgilio (~brettgili@x-node.gq) (Client Quit)
[04:47:26] <rotateq> raeda: but iirc it's not doable from inside of slime in emacs, cause of threading issues
[04:47:36] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:47:47] *** Quits: brettgilio (~brettgili@x-node.gq) (Client Quit)
[04:49:53] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:56:22] *** Quits: brettgilio (~brettgili@x-node.gq) (Remote host closed the connection)
[04:56:49] *** Joins: brettgilio (~brettgili@x-node.gq)
[04:57:06] *** Quits: brettgilio (~brettgili@x-node.gq) (Remote host closed the connection)
[04:57:43] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:01:02] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[05:06:03] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[05:10:22] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:28:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:29:42] *** Quits: rotateq (~user@p200300e787056600859d17a8b44a5685.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:34:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[05:37:57] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[05:41:22] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 260 seconds)
[05:49:14] *** Quits: random-nick (~random-ni@87.116.180.139) (Ping timeout: 265 seconds)
[05:51:08] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:52:40] *** Quits: rgherdt (~rgherdt@95.90.244.86) (Ping timeout: 240 seconds)
[06:04:01] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 268 seconds)
[06:08:00] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:11:49] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[06:28:16] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[06:28:43] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:37:54] *** Joins: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7)
[06:42:58] *** Quits: cuz (~user@2601:182:cc02:8b0:c4d:9139:bf18:4cf7) (Ping timeout: 260 seconds)
[06:54:10] *** Joins: taiju (~taiju@61.127.163.30)
[06:57:51] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[06:58:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:58:50] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 265 seconds)
[06:59:03] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Remote host closed the connection)
[06:59:13] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[07:16:17] *** Joins: taiju (~taiju@61.127.163.30)
[07:20:53] *** Quits: taiju (~taiju@61.127.163.30) (Ping timeout: 268 seconds)
[07:22:41] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[07:31:40] <beach> Good morning everyone!
[07:32:49] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 268 seconds)
[07:50:06] *** Joins: taiju (~taiju@240b:253:ec40:2400:a8af:540:19a2:818b)
[07:53:00] *** Joins: nature (~nature@mail.blazebone.com)
[07:55:57] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[07:59:02] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 260 seconds)
[08:04:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:06:28] *** Joins: FubbiQuantz (~mrios@150.117.153.87)
[08:06:33] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[08:07:50] <FubbiQuantz> Hi, I'm trying to run a script from the command line using sbcl. When I run the script, it says that sbcl cannot find the package quicklisp. Quicklisp works fine when I'm in the repl. I've tried loading quicklisp directly in my script, but that hasn't worked. How can I modify my program or my shell command to get around this problem?
[08:08:43] <beach> I think we had a long discussion about that only a few days ago.
[08:08:47] <beach> Maybe check the logs.
[08:10:02] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[08:12:47] <FubbiQuantz> I'm not finding anything when I use search through the logs. Can you suggest some useful search terms?
[08:13:17] <beach> Let me see...
[08:13:42] <FubbiQuantz> I'm trying to set up a swank server that will keep running even after I log out.
[08:14:27] <beach> I looked for -script and found some results.  But this is not my domain of expertise, so I may be wrong.
[08:14:32] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:22:36] <saturn2> FubbiQuantz: you probably need --load ~/.sbclrc
[08:23:19] <saturn2> or some other file that will load quicklisp
[08:26:15] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 268 seconds)
[08:26:34] *** Joins: semz (~none@user/semz)
[08:28:46] <FubbiQuantz> Hello saturn2, that solved the problem. Thank you.
[08:30:58] <FubbiQuantz> The program runs successfully but I can't connect to the swank server.
[08:31:50] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:eb70:bd44:e071:d071)
[08:43:14] *** Quits: FubbiQuantz (~mrios@150.117.153.87) (Ping timeout: 265 seconds)
[08:46:46] *** Joins: Lycurgus (~juan@98.4.112.204)
[08:59:08] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b00a:4340:e28a:a5ff:203c:a479)
[09:19:08] *** Joins: Oladon (~olad@98.43.81.226)
[09:22:59] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 268 seconds)
[09:23:51] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[09:34:23] *** Quits: lad (~lad@user/lad) (Read error: Connection reset by peer)
[09:34:43] *** Joins: lad (~lad@user/lad)
[09:39:03] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[09:40:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[09:54:23] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2.1)
[09:59:59] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Connection closed)
[10:16:16] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:29:02] *** Quits: Oladon (~olad@98.43.81.226) (Read error: Connection reset by peer)
[10:30:50] *** Joins: Oladon (~olad@98.43.81.226)
[10:39:26] *** Parts: trevlif (~user@80.227.170.170) (ERC (IRC client for Emacs 26.3))
[10:59:44] *** Joins: asarch (~asarch@2806:10ae:7:34f1:7390:deaf:1a8f:32c4)
[11:30:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:31:34] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:45:39] *** Quits: asarch (~asarch@2806:10ae:7:34f1:7390:deaf:1a8f:32c4) (Quit: Leaving)
[11:59:44] *** Joins: selwyn (~selwyn@user/selwyn)
[12:04:49] *** Joins: user51 (~user51@176.228.90.248)
[12:06:30] *** Joins: pve (~pve@37-33-19-105.bb.dnainternet.fi)
[12:10:09] *** Joins: rgherdt (~rgherdt@ip5f5af456.dynamic.kabel-deutschland.de)
[12:13:14] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[12:23:13] *** Joins: gaqwas (~john@dynamic-077-009-038-109.77.9.pool.telefonica.de)
[12:24:47] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:29:25] *** Parts: akoana (~ah@user/akoana) ()
[12:35:59] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:27] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:49:45] *** Joins: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6)
[12:52:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:18:40] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[13:22:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[13:27:34] *** Quits: frgo (~frgo@p200300deef0cee00ac143b47d0a82e1a.dip0.t-ipconnect.de) (Quit: Leaving...)
[13:37:47] *** Joins: FubbiQuantz (~mrios@150.117.153.87)
[13:48:51] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:49:23] *** Joins: srhm (~srhm@user/srhm)
[13:50:06] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:50:34] *** Joins: srhm (~srhm@user/srhm)
[14:07:57] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 245 seconds)
[14:11:15] <lukego> Hey I find myself wanting versions of the standard math functions (+, -, exp, sqrt, etc) that are specialized for all values being double-floats. So that I could depend on getting machine code doing efficient non-complex double float without worrying about type declarations on variables. did someone already make a wrapper arithmetic library like that?
[14:12:19] *** Joins: amb007 (~a_bakic@38.104.204.77.rev.sfr.net)
[14:24:16] <pjb> lukego: a VOP library?
[14:29:10] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1036-static.midco.net) (Ping timeout: 260 seconds)
[14:29:45] *** Joins: cage (~cage@dynamic-adsl-94-34-15-17.clienti.tiscali.it)
[14:34:18] *** Quits: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6) (Ping timeout: 260 seconds)
[14:38:14] <lukego> pjb: I'm imagining something simpler e.g. just wrapper functions that wrap everything in COERCE or something.
[14:38:49] <lukego> (and that get inlined to propagate that type information in SBCL)
[14:40:01] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[14:41:05] *** Parts: user51 (~user51@176.228.90.248) ()
[14:42:51] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:43:44] <Nilby> lukego: I'm fond of mass function generating macros for that. I've done something like it for standard string and sequence functions. I guess the hard part is making sure they get the fast path in disassemble.
[14:46:11] <White_Flame> not sure if it's easier to just macro up your local variable declarations, instead of the functions themselves
[14:46:15] <Nilby> If I recall there are a bunch of 3d graphics-math-ish packages that do that.
[14:46:54] *** Quits: amb007 (~a_bakic@38.104.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[14:53:56] *** Quits: cage (~cage@dynamic-adsl-94-34-15-17.clienti.tiscali.it) (Remote host closed the connection)
[14:54:22] <lukego> Maybe like this? https://gist.github.com/lukego/830a787776b93d2cf9ff8fc6304598ce
[14:54:44] <lukego> needs inline declaration
[14:54:56] *** Joins: cage (~cage@dynamic-adsl-94-34-15-17.clienti.tiscali.it)
[14:56:45] <lukego> maybe better with the wrappers as macros, easier to handle &rest in that case
[14:57:43] <lukego> okay and maybe some tricks could be played with macrolet e.g. to make (. (+ (* ...) ...)) automagically coerced or something. hm.
[14:58:12] <Nilby> Yes. I love that kind of thing. And then you can even (loop for op in '(+ - * /) (def.wrapper ,s ...))
[15:02:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[15:04:01] *** Joins: tfb (~tfb@88.98.95.237)
[15:05:48] <lukego> Using MACROLET to shadow + gives a package lock error on COMMON-LISP. That seems a bit harsh?
[15:07:29] <tfb> lukego: it's what the spec says (well, not package lock, but you're not allowed to do that
[15:07:59] <hayley> Would (INCF place) expanding to (SETF place (+ place 1)) [as a not-too-close approximation] still work?
[15:09:28] <tfb> hayley: right.  or perhaps the compiler rewrites (1+ x) to (+ x 1) and now 1+ is broken
[15:09:33] *** Joins: Devon (~devon@2600:380:594f:41ea:5c53:fa64:5cb9:8adc)
[15:10:38] <lukego> ah okay probably for good reasons then
[15:10:51] <tfb> (not related to previous) if *x* is special and has a toplevel binding, what should (progn (let ((*x* 3) (makunbound '*x*))) *x*) do?
[15:11:04] <tfb> (at toplevel, so no other bindings of *x*)
[15:17:14] *** Quits: Devon (~devon@2600:380:594f:41ea:5c53:fa64:5cb9:8adc) (Ping timeout: 260 seconds)
[15:18:39] <Nilby> oooh, I nice warning I've never seen
[15:44:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:45:25] *** Quits: sm2n_ (~sm2n@user/sm2n) (Ping timeout: 252 seconds)
[15:45:48] *** Joins: sm2n (~sm2n@user/sm2n)
[15:57:18] *** Joins: random-nick (~random-ni@87.116.180.139)
[16:02:27] <Krystof> tfb: I believe it should return the toplevel binding of *x*.  I'm not 100% convinced the language about that is airtight in the spec, though
[16:02:27] <Colleen> Krystof: mfiano said at 2021.09.14 10:02:46: lp 1943559
[16:09:24] <tfb> Krystof: I think that too.  The next question is what should (let ((*x* 3)) (makunbound '*x*) *x*) do?
[16:09:37] <tfb> I think the spec is just unclear here!
[16:10:10] <tfb> because you seem to end up with a situation where a special variable is locally unbound but globally bound...
[16:17:28] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[16:25:51] <edgar-rft> in SBCL it's funny:
[16:25:51] <edgar-rft> (let ((*x* 1)) (makunbound '*x*) *x*) => 1
[16:25:51] <edgar-rft> with no (defvar *x* ...) before MAKUNBOUND seems to have no effect at all, but
[16:25:51] <edgar-rft> (defvar *x* 123) (let ((*x* 1)) (makunbound '*x*) *x*) => error: variable *x* is unbound
[16:29:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:31:39] <_death> http://cl-su-ai.lisp.se/msg03748.html
[16:35:36] <beach> edgar-rft: With no DEFVAR, *X* would be lexical, so MAKUNBOUND has no effect on that lexical variable.
[16:35:44] <edgar-rft> _death: where is that "description from? the CLHS says nothing about "dynamic (special) variable", it says "symbol" instead
[16:37:00] <edgar-rft> beach: I assumed the same, but the CLHS doesn't say that MAKUNBOUND doesn't work on lexical symbols
[16:37:23] <beach> Oh?
[16:37:27] <beach> clhs makunbound
[16:37:28] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_makunb.htm
[16:37:30] <_death> edgar-rft: this was written while the standard was written.. there is a follow-up by Moon explaining what is meant to happen
[16:37:38] <Nilby> _death: 1987. always impressed with your deep research
[16:38:26] <beach> edgar-rft: I see what you mean.  That information is presumably taken for granted, but it would be good to include it in WSCL.
[16:38:30] <Nilby> Moon's answer makes sense, but it seems like noone every really "deep-six"ed it.
[16:38:31] <_death> Nilby: it's easy to just search cl-su-ai ;)
[16:39:04] <beach> edgar-rft: It is not possible to have unbound lexical variables in Common Lisp.
[16:39:08] *** Joins: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6)
[16:39:09] <_death> Nilby: well, there is also a follow-up to Moon, where an attempt at disambiguation is mention in the context of Scheme
[16:39:21] <_death> *mentioned
[16:39:28] <beach> Also, it should not say "value cell".
[16:40:00] * edgar-rft also says thanks to _death for his archaelogical skills :-)
[16:44:21] <Nilby> still my biggest gripe with makunbound is the missing ‘e’
[16:46:49] <tfb> I assume it was abvious that MAKUNBOUND could not work on a lexical variable (it's a function for one thing!)
[16:50:17] *** Joins: attila_lendvai (~alendvai@C2267416.nat.pool.telekom.hu)
[16:50:19] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[16:51:04] <Nilby> I'm pretty sure makunbound is from before lexical scoping. "We just can't win."
[17:04:59] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:11:15] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[17:12:37] <lukego> Coded up that idea of generating typed math wrappers: https://gist.github.com/lukego/726f23d20119c37d1bbd705a29f50f76. So e.g. defining |.| prefixed double-float ops and writing (.exp (.* -0.5d0 (.expt (./ (.- x μ) σ) 2))) knowing everything will be coerced safely to double and compiled to floating point machine code.
[17:12:57] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:13:54] *** Joins: srhm (~srhm@user/srhm)
[17:14:26] <hayley> In OCaml they write *. (from memory).
[17:15:20] <lukego> Maybe it should take a format string instead of a prefix
[17:16:58] <hayley> You might also want to consider inlining, in order to avoid boxing double-floats with current compilers.
[17:17:23] <_death> a similar idea is declared numerics (which don't coerce, just declare).. https://github.com/binghe/GBBopen/blob/master/source/tools/declared-numerics.lisp
[17:31:05] <lukego> hayley: current version is defining all the operators as macros so that should take care of the inlining angle, right?
[17:31:34] <hayley> Yes, I misread. My bad.
[17:33:12] <lukego> I'd started off with functions but yeah decided to make it dumber
[17:33:43] <lukego> (the whole idea here is to be a bit dumb i.e. for times when you want to be sure of how the compiled code will be but don't want to think too hard about your type declarations)
[17:36:04] <lukego> and maybe declarations are putting you on the path of getting runtime errors - or invalid results if safety is low - when type conversions might be more appropriate, especially on these fancy-pants wide-backended branch-predicting types of computers we're using these days
[17:58:00] *** Parts: keir (~keir@user/keir) (#guile #lisp)
[17:59:05] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[17:59:38] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:02:54] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Client Quit)
[18:03:18] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[18:04:50] <lukego> _death: interesting!
[18:04:52] *** Quits: X-Scale (~ARM@83.223.227.181) (Ping timeout: 265 seconds)
[18:05:18] *** X-Scale` is now known as X-Scale
[18:05:25] *** Joins: shka (~herr@109.231.62.239)
[18:08:30] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:10:56] *** Joins: amb007 (~a_bakic@170.39.22.93.rev.sfr.net)
[18:14:46] *** Joins: X-Scale` (~ARM@46.50.5.115)
[18:16:04] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[18:16:22] *** X-Scale` is now known as X-Scale
[18:17:01] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:17:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:27:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:34:21] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 265 seconds)
[18:34:25] *** Joins: nature (~nature@mail.blazebone.com)
[18:36:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:37:48] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:57:13] <pjb> lukego: note that using SHADOW to shadow should work better.
[19:00:54] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[19:21:12] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[19:26:54] *** Quits: taiju (~taiju@240b:253:ec40:2400:a8af:540:19a2:818b) (Ping timeout: 260 seconds)
[19:27:04] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[19:28:12] *** Joins: taiju (~taiju@240b:253:ec40:2400:a8af:540:19a2:818b)
[20:11:59] *** Quits: amb007 (~a_bakic@170.39.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[20:12:54] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[20:43:02] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[20:47:41] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[20:47:57] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:eb70:bd44:e071:d071) (Quit: Konversation terminated!)
[20:48:12] *** Joins: lottaquestions (~nick@2607:fa49:503f:6400:8554:e521:ec62:7ad)
[20:49:29] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[20:49:38] *** Joins: selwyn (~selwyn@user/selwyn)
[20:59:16] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[21:03:02] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[21:03:13] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:16:36] *** Joins: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca)
[21:17:02] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:22:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:23:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:23:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[21:24:27] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:26:31] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b00a:4340:e28a:a5ff:203c:a479) (Quit: Leaving)
[21:28:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[21:30:05] *** Quits: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[21:30:10] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Quit: leaving)
[21:30:20] *** Joins: Oladon (~olad@98.43.81.226)
[21:39:54] *** Quits: lottaquestions (~nick@2607:fa49:503f:6400:8554:e521:ec62:7ad) (Ping timeout: 260 seconds)
[21:46:24] *** Quits: attila_lendvai (~alendvai@C2267416.nat.pool.telekom.hu) (Remote host closed the connection)
[21:47:47] *** Joins: attila_lendvai (~alendvai@c2267416.nat.pool.telekom.hu)
[21:47:58] *** Quits: attila_lendvai (~alendvai@c2267416.nat.pool.telekom.hu) (Client Quit)
[21:50:42] *** Joins: attila_lendvai (~alendvai@C2267416.nat.pool.telekom.hu)
[21:51:07] *** Quits: CptKirk (~CptKirk@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[21:52:48] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Quit: luna-is-here)
[21:57:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:59:15] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[22:01:57] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (Client Quit)
[22:08:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[22:22:31] *** Joins: CptKirk (~CptKirk@174-16-180-159.hlrn.qwest.net)
[22:35:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[22:46:09] *** Joins: frgo (~frgo@p200300deef0cee00f56ca7e43d8d7fca.dip0.t-ipconnect.de)
[22:46:52] *** Quits: FubbiQuantz (~mrios@150.117.153.87) (Remote host closed the connection)
[22:52:54] *** Quits: CptKirk (~CptKirk@174-16-180-159.hlrn.qwest.net) (Ping timeout: 256 seconds)
[22:54:01] *** Quits: borodust (~irc@user/borodust) (Remote host closed the connection)
[22:59:18] *** Joins: Everything (~Everythin@37.115.210.35)
[23:00:15] *** Joins: borodust (~irc@user/borodust)
[23:00:15] <pve> Is one supposed to use (the double-float ...) or (coerce ... 'double-float) to tell the compiler what to expect?
[23:00:29] <pve> or will both work?
[23:04:43] <mfiano> The former is a promise to the compiler, which is allowed to do nothing or anything.
[23:05:04] <mfiano> The latter will allocate a new object
[23:05:05] <lotuseater> hm i thought with THE it's more like a promise "this shall be that type" and with coerce an instruction "transforms this to the new type"
[23:05:21] <lotuseater> thx mfiano :)
[23:06:37] <pve> Yep, that's been my impression as well, just checking. Thank you.
[23:07:03] <aeth> (the double-float x) is very, very, very close to (prog1 x (check-type x double-float))
[23:07:09] <aeth> Some compilers might implement it that way.
[23:07:57] <lotuseater> interesting
[23:08:03] <aeth> SBCL doesn't. For DECLARE, DECLAIM, THE, etc., SBCL will use a faster CHECK-TYPE that is not recoverable.
[23:08:13] <aeth> And that doesn't run when (safety 0)
[23:08:33] <lotuseater> haha yes i had this experience at some point ^^
[23:09:31] <aeth> What I mean is, (prog1 x (check-type x double-float)) in SBCL will let you supply a new x that satisfies double-float, while (the double-float x) will fail the program if it's not a double-float
[23:09:44] <aeth> Marginally faster, I guess
[23:10:11] <aeth> However, other implementations might just have no distinction.
[23:10:57] <aeth> The lack of STORE-VALUE, at least in SBCL.
[23:13:38] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:26:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:26:56] *** Joins: srhm (~srhm@user/srhm)
[23:28:26] *** Quits: rain3 (~rain3___@2a02:2f09:d100:8700:1ae4:6be9:2a58:7de6) (Ping timeout: 268 seconds)
[23:33:39] *** Joins: tfeb (~tfb@88.98.95.237)
[23:50:37] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:56:16] *** Joins: cosimone (~user@93-47-230-131.ip115.fastwebnet.it)
[23:59:15] *** Quits: cage (~cage@dynamic-adsl-94-34-15-17.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
