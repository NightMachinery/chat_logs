[00:19:21] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:43:38] <dpk> Zipheir, mdhughes: the issue with GCs and mutation is mainly that a key assumption of generational garbage collection is that objects in older generations do not contain any pointers to objects in younger generations. mutation can break that assumption, requiring the objects in the older generation to somehow be considered younger than they actually are
[00:44:26] <dpk> there are also issues relating to multithreading and GC in the presence of mutation, i think, but of course, there always are
[01:00:29] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[01:00:54] *** Joins: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it)
[01:09:08] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Remote host closed the connection)
[01:09:32] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:15:43] *** Joins: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:19:16] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:31:15] *** Quits: catonano (~catonano@net-109-116-91-254.cust.vodafonedsl.it) (Quit: catonano)
[01:31:42] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[01:31:50] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:59:50] <xaltsc> Hey, I've got a program (in Guile) that launches some threads then shouldn't quit until SIG{INT,QUIT,etc} has been sent. What's the proper way of doing that ? Use join-thread ? This raises an error. This is the relevant part of my code: http://paste.debian.net/1232916/
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:07:41] *** Server sets mode: +ntz 
[02:18:05] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Read error: Connection reset by peer)
[02:18:57] *** Quits: tripfandango (~tripfanda@77.137.77.22) (Ping timeout: 240 seconds)
[02:22:06] *** Joins: zacque (~zacque@1.32.81.194)
[02:38:09] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[02:39:41] *** Joins: TCZ (~tcz@91.150.178.124)
[02:46:10] *** Joins: livoreno (~livoreno@user/notzmv)
[02:46:11] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[02:53:35] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[02:57:25] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:04:28] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[03:09:17] *** Quits: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:19:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[03:19:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[03:19:43] *** Joins: skapata (~Skapata@user/skapata)
[03:21:33] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[03:34:16] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:34:42] *** Joins: mange (~user@user/mange)
[03:34:50] *** Joins: badkins (~badkins@136.56.92.199)
[03:39:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[03:40:49] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[03:48:47] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[03:53:46] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 268 seconds)
[04:04:30] *** Joins: livoreno (~livoreno@user/notzmv)
[04:28:56] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:31:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:56:42] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[05:01:24] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[05:12:18] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[05:13:41] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:14:33] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:22:45] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:27:42] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:28:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:34:45] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[05:38:24] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:40:13] *** Joins: badkins (~badkins@136.56.92.199)
[05:40:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[05:44:28] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:46:01] *** Joins: badkins (~badkins@136.56.92.199)
[05:49:28] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4)
[05:50:54] *** Joins: cedb (~ced@user/ouestbillie)
[05:53:05] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:55:57] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[05:56:51] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[05:59:32] *** Joins: seninha (~chatzilla@user/seninha)
[05:59:48] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[06:00:31] *** Joins: theruran (uid11305@id-11305.hampstead.irccloud.com)
[06:05:03] *** Joins: badkins (~badkins@136.56.92.199)
[06:05:37] *** Joins: livoreno (~livoreno@user/notzmv)
[06:09:31] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[06:10:30] *** Joins: badkins (~badkins@136.56.92.199)
[06:14:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:21:23] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:34:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[06:38:44] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 250 seconds)
[06:40:23] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:46:56] *** Joins: s-liao (~s-liao@101.86.96.21)
[06:58:36] *** Quits: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[07:00:38] *** Joins: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de)
[07:01:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[07:11:11] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:26:37] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:26:54] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:27:27] *** Joins: frost (~frost@user/frost)
[08:00:03] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[08:01:03] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[08:22:39] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[08:26:57] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[08:28:18] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:33:25] *** Joins: badkins (~badkins@136.56.92.199)
[08:37:28] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:37:40] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:37:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[08:40:05] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:02:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:06:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:07:36] *** Joins: masoudd (~masoudd@user/masoudd)
[09:09:59] *** Joins: s-liao18 (~s-liao@101.86.96.21)
[09:12:00] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: Eadem mutata resurgo.)
[09:12:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:18:06] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 272 seconds)
[09:46:56] *** Joins: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[09:47:41] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:47:57] *** Quits: s-liao18 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[09:52:00] *** Joins: frost (~frost@user/frost)
[09:57:52] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:15:35] *** Joins: Zipheir (~wcm@98.4.178.27)
[10:19:47] *** Joins: frost (~frost@user/frost)
[10:24:27] *** Joins: s-liao (~s-liao@101.86.96.21)
[10:41:31] *** Quits: mange (~user@user/mange) (Ping timeout: 256 seconds)
[11:02:29] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:09:23] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5)
[11:24:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[11:34:32] *** Quits: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[11:42:25] *** Joins: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[11:45:18] *** Joins: civodul (~user@guix/contributor/civodul)
[12:32:37] *** Joins: klovett_ (~klovett@107.116.92.161)
[12:33:35] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:35:22] *** Quits: klovett (~klovett@107.116.92.161) (Ping timeout: 250 seconds)
[12:35:24] *** Joins: badkins (~badkins@136.56.92.199)
[12:37:02] *** Quits: klovett_ (~klovett@107.116.92.161) (Client Quit)
[12:39:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[12:49:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:00:38] *** Quits: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[13:00:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:10:36] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b4bf:6568:e1a6:6cf5) (Ping timeout: 240 seconds)
[13:11:46] *** Joins: TCZ (~tcz@91.150.178.124)
[13:16:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:16:35] *** Quits: lumberjack (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:25:33] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[13:31:45] *** Quits: Rue (~rue@2001-b011-1000-17ff-0191-633b-7286-36db.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[13:33:23] *** Joins: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8)
[13:53:58] *** Joins: johnjaye (~pi@173.209.64.74)
[13:57:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:06:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:10:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:13:52] *** Joins: mdhughes_ (~mdhughes@user/mdhughes)
[14:14:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[14:14:54] *** Joins: Guest2 (~Guest2@2001:ce8:131:5f61:e103:cf94:5e10:2214)
[14:15:47] *** Quits: Guest2 (~Guest2@2001:ce8:131:5f61:e103:cf94:5e10:2214) (Client Quit)
[14:17:37] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 240 seconds)
[14:40:34] *** Joins: tatsumaru (~tatsumaru@82.147.131.155)
[14:40:49] <tatsumaru> Zipheir: can you recommend more books about applied category theory please?
[15:00:56] <pinoaffe> I recently started reading https://github.com/hmemcpy/milewski-ctfp-pdf , I think it's pretty good
[15:25:53] *** mdhughes_ is now known as mdhughes
[15:41:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:59:05] <tatsumaru> pinoaffe: thanks! I will check it out.
[16:11:00] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:25:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:31:19] *** Joins: badkins (~badkins@136.56.92.199)
[16:34:11] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983)
[16:34:11] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983) (Changing host)
[16:34:11] *** Joins: skapata (~Skapata@user/skapata)
[16:34:35] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[16:35:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:38:08] *** Quits: TCZ (~tcz@91.150.178.124) (Quit: Leaving)
[16:40:59] *** Joins: badkins (~badkins@136.56.92.199)
[16:45:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:50:03] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[16:52:39] *** Joins: TCZ (~tcz@91.150.178.124)
[16:53:02] *** Quits: TCZ (~tcz@91.150.178.124) (Remote host closed the connection)
[16:54:23] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[16:55:14] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:56:30] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[17:02:07] *** Joins: badkins (~badkins@136.56.92.199)
[17:02:58] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[17:03:32] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[17:06:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:15:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:25:50] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[17:26:17] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[17:28:59] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[17:30:55] *** Quits: X-Scale (~ARM@83.223.250.236) (Ping timeout: 256 seconds)
[17:30:55] *** X-Scale` is now known as X-Scale
[17:48:26] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[17:52:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:31] *** Joins: gproto23_ (~gproto23@user/gproto23)
[17:55:37] *** Quits: tripfandango (~tripfanda@2a02:6680:2107:3cb7:24a8:e5d7:8f58:c0d8) (Ping timeout: 256 seconds)
[17:58:36] *** Joins: klovett (~klovett@107.116.92.161)
[18:04:08] *** Joins: badkins (~badkins@136.56.92.199)
[18:22:40] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:22] *** Joins: Perryman_ (~perryman@216.97.249.113)
[18:24:45] *** Joins: wingo_ (~wingo@li270-233.members.linode.com)
[18:24:57] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:24:57] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[18:24:57] *** Joins: some02 (~cat@user/sudden)
[18:25:01] *** Joins: mns_ (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[18:25:11] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[18:25:18] *** Joins: aeth_ (~aeth@user/aeth)
[18:25:22] *** Joins: m4551 (~m455@user/m455)
[18:25:46] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[18:25:50] *** Joins: ft_ (~ft@shell.chaostreff-dortmund.de)
[18:25:57] *** Joins: nckx_ (~nckx@tobias.gr)
[18:27:04] *** Server sets mode: +ntz 
[18:29:52] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (*.net *.split)
[18:29:52] *** Quits: Zipheir (~wcm@98.4.178.27) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Perryman (~perryman@216.97.249.113) (*.net *.split)
[18:29:52] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[18:29:52] *** Quits: wingo (~wingo@li270-233.members.linode.com) (*.net *.split)
[18:29:52] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[18:29:53] *** Quits: m455 (~m455@user/m455) (*.net *.split)
[18:29:53] *** Quits: even (~steve@ayerhart.party) (*.net *.split)
[18:29:53] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[18:29:53] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[18:29:53] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[18:29:53] *** Quits: Menchers (Menchers@user/menchers) (*.net *.split)
[18:29:53] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[18:29:53] *** nckx_ is now known as nckx
[18:29:53] *** X-Scale` is now known as X-Scale
[18:29:57] *** ft_ is now known as ft
[18:33:33] *** Joins: Menchers (Menchers@user/menchers)
[18:42:05] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[18:46:12] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 240 seconds)
[18:50:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:50:17] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[19:05:48] *** Quits: silasfox (~sbv@p200300cec714ca00956ec169de307dfd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:06:05] *** Joins: silasfox (~sbv@p548d1235.dip0.t-ipconnect.de)
[19:07:33] *** some02 is now known as sudden
[19:27:14] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7)
[19:33:31] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[19:48:34] <Zipheir_> tatsumaru: I'm not aware of a lot of applied cat. theory books.  It's still an "emerging field", as the buzzwordists would have it.
[19:49:16] <tatsumaru> really, it's a new thing?
[19:50:08] <Zipheir_> tatsumaru: There's _Category Theory for the Sciences_ by David Spivak, and _Algebra of Programming_ is a well-known (if obscure) book applying it extensively to programming.
[19:50:32] *** Zipheir_ is now known as Zipheir
[19:51:12] <Zipheir> tatsumaru: Yeah, definitely.  Category theory is still "abstract nonsense" to many folks.
[19:57:31] <tatsumaru> I feel like an early adopter for being interested in this
[20:12:48] *** Parts: Duns_Scrotus__ (sid262565@id-262565.tinside.irccloud.com) ()
[20:19:20] *** cross_ is now known as cross
[20:41:48] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[20:45:57] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[20:46:41] *** Joins: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net)
[20:47:53] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[20:49:10] *** Quits: klovett (~klovett@107.116.92.161) (Quit: ZZZzzzâ€¦)
[20:53:07] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:b18d:7d35:8009:5de7) (Ping timeout: 268 seconds)
[20:54:17] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[20:54:38] *** Joins: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3)
[20:55:39] <sonny> I'm stumped on how to make a Fibonacci sequence with a function that takes two arguments (the first elements), any pointers?
[20:57:54] *** Joins: [deleted] (~livoreno@user/notzmv)
[20:58:37] *** Joins: klovett (~klovett@107.116.92.161)
[20:59:20] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 250 seconds)
[21:00:12] <wasamasa> car and cdr
[21:00:20] <wasamasa> pointers to head and tail of a pair
[21:01:56] *** Joins: Azuvector (~Azuvector@69-172-150-74.cable.teksavvy.com)
[21:01:59] *** Parts: Azuvector (~Azuvector@69-172-150-74.cable.teksavvy.com) ()
[21:02:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[21:02:59] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[21:03:54] <sonny> wasamasa so I should use a pair as an argument to fib instead of parameters?
[21:04:08] <wasamasa> it was a joke about the "any pointers?" phrase
[21:04:15] <sonny> oh
[21:04:25] <wasamasa> https://xkcd.com/138/
[21:04:33] <sonny> lol
[21:13:31] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:14:53] <Zipheir> sonny: I think we're going to need more information.
[21:15:31] *** Joins: badkins (~badkins@136.56.92.199)
[21:20:05] <sonny> (fib 1 2) => 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
[21:20:46] <sonny> right now I'm going to start (list 1 2) and add the previous term to the list, it is confusing because fib has two arguments, so I am doing the loop in let instead
[21:20:57] <sonny> s/it is/it was/
[21:22:00] <sonny> actually more like (list 2 1); (cons (sum (take ls 2) ls)
[21:22:29] <Zipheir> What are the two arguments in this case?
[21:22:55] <Zipheir> Does it generate an infinite list, or?
[21:22:57] <sonny> the terms to start the fibonacci sequence with, in the example I use 1 and 2
[21:23:28] <sonny> it's a finite list, the highest value will be n (4million in my case)
[21:23:52] <Zipheir> Well, it's a simple recursive equation, in that case.
[21:24:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 250 seconds)
[21:24:14] <wasamasa> take an existing fibonacci solution and adapt it to have custom base cases
[21:24:36] <wasamasa> like, (define fib (make-fibonnacci 1 1))
[21:25:05] <Zipheir> Actually, corecursive.  You're unfolding a list.
[21:25:32] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:44c8:afd9:42bc:7b02)
[21:26:21] <Zipheir> sonny: If the current fibonacci number is greater than your limit n, what's the answer?
[21:26:55] <sonny> I'm not sure, I think the base case is the list with the initial arguments
[21:28:44] <sonny> wasamasa good point, I think I'm solving two different problems at once
[21:28:56] *** Quits: tatsumaru (~tatsumaru@82.147.131.155) (Quit: Leaving.)
[21:28:59] <Zipheir> sonny: I think it's easier to think corecursively, here.  When do you *stop*?
[21:29:27] <Zipheir> (With list corecursion, you need a stop case and and a step, basically.)
[21:29:28] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:29:37] <sonny> when the current Fibonacci > n
[21:29:46] <Zipheir> Sounds good.
[21:30:09] <Zipheir> So then, how do you generate the current fibonacci and the needed "seeds" to continue the computation?
[21:30:32] <Zipheir> You can think of those as two procedure, say val and gen.
[21:31:07] <sonny> I take the first two from the list and add them
[21:31:17] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:31:21] <Zipheir> That gives you the list element, yes.
[21:32:02] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:32:12] <Zipheir> So you just need a procedure that takes the two current values and produces the two values for the next step.
[21:32:28] *** Quits: zostj (~rue@61-231-134-218.dynamic-ip.hinet.net) (Quit: WeeChat 3.4)
[21:33:12] <lagash> Zipheir: that Algebra of Programming book, does it have any concrete programming examples, or is it just, well, algebra?
[21:34:02] *** Joins: badkins (~badkins@136.56.92.199)
[21:35:08] <Zipheir> lagash: Yes, it has plenty of concrete examples.  It's actually a pretty down-to-earth book.
[21:35:56] <Zipheir> But it requires a ton of thinking.  The exercises can be brutal, too.
[21:39:17] *** Quits: [deleted] (~livoreno@user/notzmv) (Quit: Quit)
[21:39:34] *** Joins: livoreno (~livoreno@user/notzmv)
[21:41:51] *** Joins: notzmv (~zmv@user/notzmv)
[21:42:22] <Zipheir> sonny: An example based on what I was saying http://ix.io/3RlB
[21:43:00] <Zipheir> (The multi-value unfold is not intended to be efficient, just convenient.)
[21:45:50] <sonny> what I was thinking https://bpa.st/K27Q
[21:47:36] <sonny> nice it works :D
[21:47:37] <lagash> Zipheir: I meant, what programming languages are they using in the book? I'm seeing something about Squiggol..
[21:48:42] <sonny> (fib 1 2) => '(144 89 55 34 21 13 8 5 3 2 1) just need to handle being the limit case better
[21:48:53] <lagash> https://en.wikipedia.org/wiki/Bird%E2%80%93Meertens_formalism
[21:49:08] <Zipheir> sonny: That's a weird use of take, IMO.
[21:49:18] <wasamasa> https://en.wikipedia.org/wiki/Lucas_number
[21:49:43] <Zipheir> Yeah, they're Lucas numbers, fix the name! :-)
[21:49:57] <Zipheir> lagash: It's pretty much language-independent.  There is some Squiggol, but not much.
[21:50:25] <Zipheir> Unlike some of Bird's books, the language is not necessarily assumed to have lazy semantics, either.
[21:50:39] <lagash> So, a much of math, nothing concrete? Or are you talking pseudo-code?
[21:50:50] <wasamasa> lol: https://en.wikipedia.org/wiki/Generalizations_of_Fibonacci_numbers
[21:50:54] <wasamasa> so many
[21:51:35] <Zipheir> lagash: Can you run it through a compiler and execute it?  No.  But a lot of it is easy to translate into something executable.
[21:51:53] <sonny> just need to change the case with ls to (cdr ls)
[21:52:23] <Zipheir> sonny: You should try to prove that your implementation gives the right sequence.
[21:53:24] <Zipheir> The recursion pattern is weird and could be simplified.
[21:53:35] <sonny> looks like it does when I compare with oeis
[21:53:46] <Zipheir> That's not a proof, though.
[21:54:26] <Zipheir> The reason I say that is that, you should be able to prove it works if you understand the algorithm.
[21:54:38] <sonny> how would I prove it?
[21:55:26] <Zipheir> Remove the limit and reason inductively.
[21:56:11] <Zipheir> e.g. that it produces the correct list for the first two numbers, and then that it produces the correct n+1-list from the correct n-list.
[21:56:57] <sonny> that's what my program does?
[21:57:15] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:78e4:4a4a:7713:ccc3) (Ping timeout: 268 seconds)
[21:57:16] <sonny> (proving this would be new to me)
[21:57:21] <Zipheir> That's what it seems to do.
[21:57:37] <sonny> cause that just seems like you see how similar the program is to the formulation
[21:58:25] <Zipheir> "Recursive definitions and inductive proofs are two sides of the same coin, and, to mix the metaphor, they fit like hand in glove." (Bird & Wadler)
[21:58:52] <sonny> if I do (fib x y) for any element in this sequence it will be correct
[21:59:01] *** Joins: tripfandango (~tripfanda@77.137.71.199)
[21:59:08] <sonny> ok, I will try to prove it though
[22:01:26] <Zipheir> A vastly simpler infinite version: (define (lucas x y) (cons (+ x y) (lucas y (+ x y))))
[22:03:45] <Zipheir> Using SRFI 41 streams: (define lucas (stream-lambda (x y) (stream-cons (+ x y) (lucas y (+ x y)))))
[22:04:00] <Zipheir> (stream->list 10 (lucas 1 2)) ; => (3 5 8 13 21 34 55 89 144 233)
[22:04:06] <sonny> where's the base case?
[22:04:14] <Zipheir> There isn't one.
[22:04:36] <Zipheir> It's an infinite list.
[22:04:58] <Zipheir> These are often easier to prove things about, since there's no arbitrary limit.
[22:06:08] <Zipheir> Err, that's slightly incorrect.  It should cons the two arguments on to the head of the list/stream, obviously.
[22:07:14] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:07:23] <Zipheir> Oh, and those are still the Fibonaccis, so ignore the name. *facepalm*
[22:07:38] <gwatt> does stream-lambda wrap the body in (delay ...) or similar?
[22:08:41] <Zipheir> gwatt: "Stream-lambda creates a procedure that returns a promise to evaluate the body of the procedure."  So yes, probably.
[22:09:26] <gwatt> hmm, wouldn't stream-cons also do that? or does it eagerly evaluate the car?
[22:09:38] <gwatt> I guess I'll just read the srfi
[22:12:42] <Zipheir> I suspect that doing that would cause a stack overflow; the pairs would be delayed, but the procedure calls wouldn't be.
[22:13:55] <Zipheir> No, it works.  Hmm.  I suppose this version is an "odd" as opposed to "even" stream.
[22:33:58] <sonny> Zipheir your stream also missed the initial arguments
[22:42:49] <Zipheir> I mentioned that it should cons on the initial arguments.
[22:43:36] <Zipheir> More accurately, it should begin with the sequence (0 1 1 2)
[22:43:45] <Zipheir> I'm kind of sleepy today, sorry.
[22:43:51] <sonny> no worries
[22:44:41] <sonny> I wanted to use arguments so the sequence can start from anywhere
[22:51:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[23:14:37] *** Quits: aeth_ (~aeth@user/aeth) (Ping timeout: 240 seconds)
[23:16:29] *** Joins: aeth (~aeth@user/aeth)
[23:21:41] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[23:27:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[23:35:39] *** Joins: casmajavi (~casmajavi@user/casmajavi)
[23:37:07] *** Joins: civodul (~user@guix/contributor/civodul)
[23:46:56] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[23:54:38] *** Joins: devmsv (~devmsv@2a0c:5a80:7001:f900:b996:6cb2:8c94:291c)
