[18:00:03] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[18:00:04] *** Server sets mode: +Ccnrtf #python-unregistered
[18:00:05] *** Joins: Naan (~Naan@user/naan)
[18:01:39] *** Quits: diogenese (~diogenese@diogenese.velotech.net) (Quit: Has anybody seen the bridge?)
[18:02:00] *** Joins: diogenese (~diogenese@diogenese.velotech.net)
[18:02:23] <loskutak> webknjaz: ok, module level getattr is probably not what I am looking for.  Here is an illustration of what I am looking for: https://dpaste.com/7JAQHVFF5
[18:03:38] *** Quits: RockyBoulder (~RockyBoul@b2b-78-94-33-34.unitymedia.biz) (Ping timeout: 272 seconds)
[18:04:13] <Yhg1s> loskutak: the only way to do that is to use module-level __getattr__, or by replacing the sys.modules entry for something that has a __getattr__ or property.
[18:04:17] <webknjaz> @loskutak: are you looking for `functools.partial`?
[18:05:35] <loskutak> webknjaz: no
[18:06:01] <loskutak> Yhg1s: ok, so it is a bit too crazy to do that, right?
[18:06:35] *** Joins: fofoni (~fofoni@user/fofoni)
[18:06:50] <Yhg1s> loskutak: the thing you want can't be done without crazy things.
[18:07:36] <loskutak> webknjaz: I essentially want a = b to secretly result in a = load_b() if b is of some FooBar type
[18:07:57] <webknjaz> that's impossible
[18:07:57] *** Joins: vsantana (~vsantana@fttx-17713614855.usr.predialnet.com.br)
[18:08:31] <webknjaz> not without a dot to access an attr that would trigger a corresponding hook
[18:08:41] *** Joins: moog (~moog@107.126.48.102)
[18:08:52] <webknjaz> just `=` will just add another label (var name) pointing to the existing object that `b` points at
[18:09:48] <loskutak> ok, the loading doesn't have to happen on the `=`, but lets say when I pass the variable to some function.
[18:10:04] <habnabit_> loskutak, python doesn't have this
[18:10:17] <habnabit_> loskutak, there's ways you can approximate it, but they depend on how the data is used
[18:10:26] *** Joins: dme86 (~dan@user/dan86)
[18:10:44] <habnabit_> loskutak, you can also change the interface
[18:11:44] <loskutak> ok, thanks everybody, I am giving up this idea. Will change interface
[18:14:24] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:16:23] *** Quits: biozz (~biozz@static.211.203.216.95.clients.your-server.de) (Read error: Connection reset by peer)
[18:16:58] *** Joins: biozz (~biozz@178.57.22.163)
[18:19:13] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:19:53] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[18:20:35] *** Joins: Payam (~Payam@138.106.57.131)
[18:20:36] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-fd88-45a9-a5fb-8740.res6.spectrum.com) (Quit: jarthur_)
[18:20:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:51] <Payam> hi, If my class inherits from two  super classes do I need to call __init__ on both?
[18:21:19] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:21:36] *** Joins: jphaynes66 (~TerraFirm@70.39.116.218)
[18:23:18] <bjs> Payam: I'm a little unsure what _you_ mean by "on both"
[18:23:37] <bjs> Payam: but you must call super().__init__(...) once for every __init__
[18:23:43] <bjs> if you want multiple-inheritance to work properly
[18:23:55] <nedbat> Payam: each __init__ should have one super().__init__() in it.
[18:24:27] <Payam> bjs lets say you have a class named A and in its init you have (self, arg1) and a class B with init you have (self, arg2) and you have a class C that inherit from A and B.
[18:24:45] <Meteorhead> is there a way to decompile a python exe constructed with cx_freeze (in order to retrieve sources)?
[18:24:53] <bjs> Payam: then A, B and C each must have a super().__init__()  in their __init__ functions.
[18:25:00] <nedbat> Payam: differing arguments in base class init's are really difficult to deal with.
[18:25:03] <bjs> Payam: (plus any arguments __init__ takes)
[18:25:11] <nedbat> Payam: perhaps you want to use composition instead of inheritance?
[18:25:14] <Payam> even A and B? why? they do not have any super class
[18:25:16] <bjs> Yeah,  it's very easy to end up with inconsistent arguments.
[18:25:28] <Payam> nedbat what is composition?
[18:25:34] <bjs> Payam: the super class is not a property of the class, but of the instance.
[18:26:09] <bjs> Payam: an A object might not have a superclass,  but a C object executing the code that happens to be in A does.
[18:26:33] <bjs> Payam: super() just takes care of all of this.  What nedbat means is maybe you don't want to have C inherit A and B,  but rather maybe C should have an A and a B object as attributes?
[18:26:43] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:a95a:ecd2:e57a:3130) (Ping timeout: 244 seconds)
[18:27:06] *** Joins: death916 (~death916@user/death916)
[18:27:10] <no_gravity> Hello! What is the Python equivalent of this? "text".match(regex) ? "a" : "b"
[18:27:29] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-1509-6b3d-343f-7851.res6.spectrum.com)
[18:27:34] <bjs> no_gravity: "a" if re.search(regex, "text") is not None else "b"     or something along those lines
[18:27:36] <Payam> https://bpa.st/VCPQ
[18:28:07] *** Joins: n00b101 (uid448161@id-448161.tooting.irccloud.com)
[18:28:10] <bjs> Payam: no no,  you should not call super().__init__ twice in the same __init__.  Each class should call it once.
[18:28:25] <nedbat> Payam: definitely if you can, you should avoid inheritance in this case.  What are the actual classes you are dealing with?
[18:28:27] <Payam> then what super() will it be? A or B
[18:28:41] <fofoni> no need to test match "is not None"
[18:28:43] <no_gravity> bjs: I see. Too bad there is no more elegant way to put it in Python.
[18:28:47] <Payam> I need functions from both. C is part of both
[18:28:51] <Payam> actually
[18:29:20] <bjs> Payam: the usual way to make the arguments work is to make __init__'s like `def __init__(self, firstname, **kws): super().__init__(**kws)`
[18:29:23] <Payam> nedbat so your and bjs suggestion is to use an object of A and B
[18:29:28] <nedbat> Payam: if you can, yes.
[18:29:39] <bjs> Payam: so that each class can "pass on" the arguments to the next
[18:29:56] <bjs> no_gravity: well `c ? a : b` is just `a if c else b`
[18:30:04] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6d92-43bf-24a8-06bd.res6.spectrum.com)
[18:30:23] <kek_> I want to set env vars s.t. numpy uses fixed amount of cores. I want to change those env vars in a for loop. Now I read that I need to set the env vars before numpy runs. Is that really true? Would it be enough to just set the env var before an mpi/mkl/blas call?
[18:30:26] <Payam> bjs can you explain what you just did? What class is the __init__ from?
[18:30:44] <bjs> Payam: the one that accepts firstname :)
[18:30:56] *** Joins: szymon_ (~ugh@staticline-31-183-131-3.toya.net.pl)
[18:31:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:31:08] <Payam> bjs but how would python know whick argument should go to which class in **kwarg?
[18:31:11] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[18:31:19] *** Quits: szymon (~ugh@staticline-31-183-131-3.toya.net.pl) (Ping timeout: 245 seconds)
[18:31:25] <bjs> Payam: what do you mean?  **kwargs is all of the arguments
[18:31:26] <no_gravity> bjs: Yeah. I find it pretty confusing to have one possible outcome on the left of the line and the other on the right.
[18:31:45] *** Joins: Naan (~Naan@user/naan)
[18:31:50] <Payam> bjs yes. but name should go to A and lastname should go to B
[18:31:52] <bjs> no_gravity: I prefer Python's syntax to the C-style `a ? b : c` syntax
[18:32:02] <Payam> aaaah you mean that I should change the init even in A and V
[18:32:02] <Payam> B
[18:32:06] <bjs> Payam: yes so A should have name, and B should have lastname
[18:32:49] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[18:33:30] <bjs> Payam: https://bpa.st/UTOA
[18:34:48] *** Quits: vsantana (~vsantana@fttx-17713614855.usr.predialnet.com.br) (Quit: Leaving)
[18:34:59] *** Joins: qlixed (~qlixed@2800:810:471:2f8::1b7)
[18:36:39] *** Quits: mikkel (~mike@208.110.120.167) (Remote host closed the connection)
[18:37:04] *** Joins: mikkel (~mike@208.110.120.167)
[18:40:29] *** Joins: metanode (~metanode@user/metanode)
[18:40:44] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: nyaa~)
[18:40:48] <jor> ugh, would need to explicilty call the correct inits without super... :/
[18:41:01] <jor> Really sounds like class NewFruit(Apple, Orange), just doesn't make much sense... ;p Agree with nedbat that this should be avoided, don't use inheritance here.
[18:41:05] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[18:45:57] <marduk> How to you use factory boy when your model has an attribute called "build"?
[18:46:10] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:47:23] <marduk> Oh, maybe _adjust_kwargs will do what I want.
[18:47:28] *** Quits: puadxtub (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 252 seconds)
[18:48:59] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:49:59] <jor> marduk: Meta has a rename property if I remember correctly
[18:50:48] <marduk> jor: oh that might work too.  Thanks.
[18:50:57] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 252 seconds)
[18:51:37] <Payam> is it better to user super() or self when trying to reach the functions in super class?
[19:15:29] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[19:15:50] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 272 seconds)
[19:16:15] *** Server sets mode: +Ccnrtf #python-unregistered
[19:16:26] *** Quits: lucerne- (~lucerne@ip202.ip-51-178-215.eu) (Client Quit)
[19:18:14] *** Joins: hiptobecubic (~john@c-73-55-99-95.hsd1.fl.comcast.net)
[19:18:29] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[19:19:20] *** Quits: Achylles (~Achylles_@2804:431:d724:b4cd:8910:86e1:5096:db86) (Quit: Leaving)
[19:19:33] *** Joins: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net)
[19:24:10] *** Quits: foobaz212 (~foobaz212@cpc84737-aztw28-2-0-cust8.18-1.cable.virginm.net) (Quit: Client closed)
[19:24:32] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Remote host closed the connection)
[19:25:29] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:27:55] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 264 seconds)
[19:31:23] <jabberwock> Does self.foo() make it a static method?
[19:31:31] <jabberwock> (like java and ruby)
[19:31:42] <jabberwock> er, ruby anyway
[19:31:45] *** Joins: nattiestnate (~nate@180.242.128.159)
[19:32:03] *** Quits: nka (~nka@39.68.15.109.rev.sfr.net) (Quit: nka)
[19:32:06] *** Quits: nichlas (nichlas@gateway/vpn/protonvpn/nichlas) (Quit: WeeChat 3.1)
[19:32:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:32:45] *** Quits: loskutak (~loskutak@gw.mecom.cz) (Ping timeout: 252 seconds)
[19:32:51] <bjs> jabberwock: I'm not sure what you mean
[19:33:20] <puadxtub> jabberwock: yes
[19:34:09] *** Joins: trampel (~trampel@2601:602:9c01:22b8:8da2:4741:7389:5660)
[19:34:36] <Yhg1s> jabberwock: no.
[19:34:45] <jabberwock> bjs: being able to call ClassName.method() instead of from an instance of ClassName
[19:35:10] <bjs> jabberwock: but your question was specifically about calling from an instance (self)
[19:35:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0a1-135.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:35:42] <puadxtub> ah indeed, kinda confusing
[19:35:44] <bjs> jabberwock: Class.foo()  you can call a "static method" if you want.
[19:36:00] <jabberwock> ah okay. So it's not explicit in python like other lingos
[19:36:01] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:36:02] <jabberwock> ty
[19:36:04] <bjs> jabberwock: self.foo() is just the standard way you call methods.  Static or otherwise.
[19:36:10] <bjs> jabberwock: well there is @staticmethod
[19:36:14] <bjs> (and @classmethod)
[19:36:18] <bjs> but the call looks the same.
[19:36:20] <Yhg1s> you could call it a static method, but it doesn't behave like one :P
[19:36:22] * jabberwock nods nods
[19:36:38] <jabberwock> 👍
[19:37:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:37:34] *** Quits: argento (~argent0@168-227-96-51.ptr.westnet.com.ar) (Ping timeout: 245 seconds)
[19:37:46] <bjs> Yhg1s: I'm not sure there's a consistent argument as to how a static method should "behave"
[19:37:53] <bjs> Each language seems to do things slightly differently
[19:38:01] <Yhg1s> sure.
[19:39:31] <jabberwock> also design arguments to be made I guess.
[19:40:58] *** Quits: leduyquang753 (~leduyquan@171.224.30.78) (Quit: leaving)
[19:41:33] *** Quits: boB_K7IQ (~boB_K7IQ@c-73-254-117-91.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[19:41:47] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[19:42:09] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 245 seconds)
[19:42:46] *** Joins: blizzard (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[19:43:36] *** Joins: evidlo (~evidlo@2001:470:69fc:105::7fc)
[19:43:40] *** Joins: alexbk (~alexbk@c-73-157-41-15.hsd1.wa.comcast.net)
[19:44:46] *** Joins: ali1234[m] (~ali1234@user/ali1234)
[19:44:46] *** Joins: ubh (~ubh@2001:470:69fc:105::852)
[19:44:46] *** Joins: bgardner (~bgardner@2001:470:69fc:105::8a8)
[19:44:46] *** Joins: artemon (~artemon@2001:470:69fc:105::87c)
[19:44:46] *** Joins: codemouse92__ (~codemouse@user/codemouse92)
[19:44:46] *** Joins: archwizard (~archwizar@2001:470:69fc:105::929)
[19:44:46] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[19:44:46] *** Joins: diegov (~diegov@2001:470:69fc:105::103f)
[19:44:46] *** Joins: novasharper (~novasharp@2001:470:69fc:105::b4a)
[19:45:00] *** Joins: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27)
[19:45:05] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[19:45:25] *** Joins: slavfox (~slavfox@93.158.232.111)
[19:46:03] *** Quits: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de) (Quit: oh no they're here)
[19:46:46] *** Parts: nova (novasenco@user/nova) (♥☺)
[19:48:18] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[19:48:56] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:50:23] *** Quits: Payam (~Payam@138.106.57.131) (Quit: Client closed)
[19:50:38] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[19:51:06] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[19:53:06] *** Joins: rjwiii (~mr-rich@072-187-028-004.res.spectrum.com)
[19:53:57] *** Quits: thiras (~thiras@user/thiras) (Quit: Leaving)
[19:54:14] *** Joins: thiras (~thiras@user/thiras)
[19:55:04] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[19:58:01] *** Joins: jamea77 (~jamea77@10.189-202-213.bestelclientes.com.mx)
[19:58:09] <jamea77> hi all: data=[dic['text'] for dic in grabar_list]  when print data: print(str(data))   display in console: ['123123132131', '121212121212', '124545454545']  how to loop? and extract every item?
[19:58:54] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[19:58:55] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[20:00:28] *** Joins: argento (~argent0@168-227-96-51.ptr.westnet.com.ar)
[20:00:34] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[20:01:40] *** herme5 is now known as el_kevino
[20:02:31] <mdk> jamea77: you can use a `for` instruction, like `for d in data:` see https://docs.python.org/3/tutorial/controlflow.html#for-statements
[20:03:13] *** Joins: seachdamh (~seachdamh@user/seachdamh)
[20:03:59] *** Quits: larkfisherman (~larkfishe@217.75.204.126) (Remote host closed the connection)
[20:06:19] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[20:07:59] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 244 seconds)
[20:07:59] *** slavfox_ is now known as slavfox
[20:08:01] *** Joins: ksynwa (~ksynwa@v2202009129512127397.nicesrv.de)
[20:08:20] *** Quits: EthanxBear (~Guest1@122-62-232-187-adsl.sparkbb.co.nz) (Quit: Client closed)
[20:08:22] *** Joins: rbdr (~rbdr@37.120.25.13)
[20:08:49] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:09:28] *** Quits: rbdr (~rbdr@37.120.25.13) (Client Quit)
[20:09:31] *** Quits: n0cto (~n0cto@154.21.28.130) (Remote host closed the connection)
[20:12:12] *** Quits: metanode (~metanode@user/metanode) (Ping timeout: 272 seconds)
[20:13:27] *** Quits: argento (~argent0@168-227-96-51.ptr.westnet.com.ar) (Ping timeout: 252 seconds)
[20:14:26] *** Quits: jphaynes66 (~TerraFirm@70.39.116.218) (Quit: Bye y'all.)
[20:15:29] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[20:15:40] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[20:16:06] *** Joins: Jigsy (~Jigsy@user/jigsy)
[20:16:46] *** Quits: xsperry (~as@user/xsperry) (Ping timeout: 244 seconds)
[20:17:12] *** Joins: rbdr (~rbdr@37.120.25.13)
[20:17:29] *** Joins: nova (novasenco@user/nova)
[20:19:38] <nova> I closed this issue, but I am unsure if I should reopen it. I don't want to waste Mr Traut's time. https://github.com/microsoft/pyright/issues/1952 tl;dr pyright complains about attaching a member to a function after `if isinstance(obj, FunctionType)`. Clearly, if it is a function, then it has a __dict__. If it has a __dict__, you can attach things to it with __setattr__ unless something modifies
[20:19:39] <nova> obj.__class__.__setattr__ or whatever. So, is it an issue still? Reopen?
[20:20:52] <nova> or should I, indeed, just do `obj.__dict__["foo"] = ..` instead of `obj.foo = ..`?
[20:21:05] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[20:21:06] <jamea77> mdk: thanks
[20:21:19] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:ea6f:38ff:fed4:3289) (Quit: WeeChat 2.8)
[20:21:30] *** emerent_ is now known as emerent
[20:22:01] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[20:22:16] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:24:27] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 252 seconds)
[20:24:27] *** slavfox_ is now known as slavfox
[20:24:32] *** Quits: fred909 (~fred909@user/fred909) (Quit: Client closed)
[20:24:33] <bjs> nova: yes Python is ok with your assigning to a function object.  But as the comment from the author points out, the type checker is designed to reject some programs that Python allows. See the example they gave
[20:25:25] <nova> I was confused by that. I am not trying to assign an attribute to `pass`. I am trying to assign an attribute to a function. `def foo():pass ; foo.bar = "BAR"` .. not `foo().bar = "BAR"` ...
[20:25:33] <bjs> nova: confused by what?
[20:25:54] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[20:26:20] *** Quits: rbdr (~rbdr@37.120.25.13) (Quit: :()
[20:26:30] <nova> `if isinstance(obj, FunctionType): print("obj IS A FUNCTION; so, it's an OBJECT with __dict__; so, we can assign arbitrary attributes to its __dict__ like any other object without a modified __setattr__")`
[20:26:50] <bjs> nova: yes, nobody has disputed that Python allows it
[20:26:52] <nova> I don't get why the type checker would be "confused" is what I am saying
[20:26:58] <bjs> nova: it's not confused.
[20:26:59] <nova> It knows that obj is a FunctionType
[20:27:17] <bjs> nova: yes it's not confused. It can see exactly what you are doing, it knows that it's a function type, it knows that Python is fine with it
[20:27:25] <bjs> and then it makes the calculated and designed decision to say no
[20:27:34] <nova> okay, so what is the typechecker's qualm?
[20:28:12] <jinsun> nova: doing what you are doing is considered too dynamic by static type checkers, just don't use static type checkers if you want to do dynamic stuff like that (or cast it as Any at that line or something)
[20:28:28] <bjs> nova: so, when designing a typechecker you have to draw a line on what you accept or reject.  It's necessary that a typechecker will reject some programs that Python allows.
[20:28:48] *** Joins: Elodin (~weechat@user/elodin)
[20:29:05] <bjs> nova: I guess here,  pyright doesn't know _statically_ the set of attributes the function would have, and so it has to reject the assignment you make
[20:29:22] <bjs> (that is, it "has" to because that's the rules that pyright has invented for itself)
[20:29:23] <nova> okay. I just wanted to insure that I am not crazy. Because, for example, if I do not have the `if isinstance(...` and merely do `obj.foo = True`, it works.
[20:29:35] <nova> s/works/doesn't complain/
[20:29:57] *** Quits: Xano (~Xano@2a00:23c4:420c:d700:3308:3833:500c:5353) (Remote host closed the connection)
[20:30:02] <bjs> nova: yes but the function of a typechecker is to take programs and say "no" for some of them
[20:30:03] <nova> ensure even
[20:30:11] *** Joins: nathanjell (~Nathan@d162-157-36-152.abhsia.telus.net)
[20:30:15] *** Joins: Xano (~Xano@2a00:23c4:420c:d700:86cc:abd5:a3fb:834a)
[20:30:16] <jinsun> nova: eveen if it allowed the assinment here, you will not be able to use it later, because it will not run you code to figure out if .foo is present in the object or not
[20:30:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:30:33] <jinsun> it has to do it statically
[20:31:02] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:31:06] <nova> well, will I see any problems with static type checking if I use obj.__dict__["foo"] = "joe mama"
[20:31:11] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[20:31:15] *** Joins: Baumfaust (~Guest1@2a02:8071:2d6:6b00:6ce3:d89:181a:a1f2)
[20:31:17] <Baumfaust> hi
[20:31:42] *** Quits: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca) (Quit: Client closed)
[20:31:50] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[20:31:50] <Baumfaust> ca you help me to parse this response:
[20:31:53] <Baumfaust> https://api.dex.guru/v1/tokens/?sort_by=id&amm=pancakeswap&network=bsc&sort_by2=address&asc=false&from_num=0&size=15
[20:31:54] <bjs> nova: well,  that depends on what you mean by "problems".  As far as the static type checker is concerned the __dict__ attribute is just a dictionary, and so it'll just treat it like that
[20:31:57] <bjs> (presumably)
[20:32:34] <Baumfaust> I tried it this way: https://bpa.st/O23A
[20:32:59] *** Joins: dme86 (~dan@user/dan86)
[20:33:07] * nova eyes pyright suspiciously but pushes forward cautiously. I really only use pyright because it integrates easily with neovim-lspconfig, and it's a nice sanity check (and a good way to learn about stupid stuff =])
[20:33:17] <jinsun> nova: I guess if you access it from the __dict__ later you will not get any problems, but if you try to do func.foo I expect pyright will compalin again
[20:33:41] <bjs> nova: the point of a static type checker is to use information it knows by just reading the code.  If you're dynamically setting an attribute it does not know in other parts of the code whether the function has the attribute or not
[20:33:54] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 264 seconds)
[20:34:01] <bjs> nova: so this might be a reason why pyright decides to not allow it. It can't tell, so it just gives up and says no.
[20:35:29] *** Quits: lukka5 (~lucas@246-60-231-201.fibertel.com.ar) (Ping timeout: 245 seconds)
[20:35:32] <nova> nuuuu. I could just add like # pyright: reportGeneralTypeIssue=false maybe -_- pyright will still probably complain later
[20:36:11] <bjs> nova: pyright will presumably complain any time you try to read the attribute too
[20:36:19] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[20:36:42] <bjs> because, as I said earlier,  it probably has no way to figure out whether or not the attribute even exists at that point. So it probably just will give up and say "no"
[20:36:50] *** Joins: lukka5 (~lucas@246-60-231-201.fibertel.com.ar)
[20:37:34] <bjs> I don't know pyright very well. Different type checkers try a different amount to make sense of the code before giving up.
[20:37:37] *** Quits: n00b101 (uid448161@id-448161.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[20:37:57] *** Joins: Crassus (~Crassus@user/crassus)
[20:38:26] <nova> bjs, I think, though, if I am vague enough, it gives up :3
[20:38:48] <nova> for example, if I don't specify types to functions when I am passing these .. functions with bound attributes ^_^
[20:39:06] <nova> it is just like "oh. okay. it's an object. I concede. You win."
[20:39:08] *** Joins: cedric (~cedric@2a01:cb11:867:c200:15fb:f6d:8d36:8b03)
[20:39:11] <bjs> nova: lots of type checkers don't type check functions that have no arguments.
[20:39:23] <nova> but then I fear adding type hints, which I feel may be a good practice >_>
[20:41:31] <nova> bjs, to be more specific. I have these decorators that attach attributes to functions. Same page so far? Then (stay with me) importlib imports the functions in this module (a plugin, if you will) where inspect.signature shows that there are 2 positional arguments. These functions are then used as callbacks in an event handler. The attributes attached to the functions determine when they should be
[20:41:33] <nova> called. Sensible, or am I totally bat**** crazy and need to rewrite?
[20:42:11] <bjs> nova: I understand your use-case. It's not _uncommon_ to attach extra data to function objects. (infact, as I said before, the stdlib does it in a few places too)
[20:42:34] <bjs> just because the type-checker doesn't like it doesn't mean it's "bad" :)
[20:42:35] <nova> (I think I am generally the latter, but you may decide my fate on this fine day.) Ah. Well, I stand to live another day, unless there is a big fat "but" following
[20:42:42] *** Joins: solarjoe4_ (~solarjoe4@p50873b1f.dip0.t-ipconnect.de)
[20:43:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 272 seconds)
[20:43:17] *** Joins: Betal (~Beta@user/betal)
[20:43:20] <bjs> nova: there is always other approaches,  you could have a EventScheduler object or something (or a dictionary) that held the information about *when* callbacks should happen
[20:43:28] <bjs> rather than storing it directly on the function objects.
[20:43:42] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 252 seconds)
[20:44:09] <bjs> (I _generally_ prefer storing things away from the object,  because then there's a single place all the data is rather than scattered on random functions everywhere,  but there are benefits to your way too, esp. for cleanup)
[20:44:53] <nova> bjs, perhaps. For additional clarity, this is what a plugin would look like. http://ix.io/3p3l/python So, perhaps there could be some EventScheduler and these decorators could tie into EventScheduler maybe?
[20:45:04] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 245 seconds)
[20:45:28] <bjs> nova: yes, they could be @scheduler.cmd  for example
[20:45:55] *** Joins: srhm (~ascii@user/srhm)
[20:46:26] <nova> holy macaroni. And because it's a decorator, you can pass a reference to the function that it's decorating to the dang old scheduler and associate it with some event
[20:46:39] <bjs> nova: yes
[20:46:44] *** Quits: janemba (~janemba@185.107.80.152) (Read error: Connection reset by peer)
[20:46:49] <nova> <insert meme with guy tapping temple while smiling knowingly>
[20:47:13] <bjs> I'm not saying this is the "best" or "right" way,  just pointing out that Python makes other options just as easy :)
[20:47:32] *** Joins: dtux (~dtux@2600:1700:22f0:37bf:eaf3:b54e:2804:fa95)
[20:47:51] *** Joins: janemba (~janemba@185.107.80.152)
[20:49:09] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Remote host closed the connection)
[20:49:25] *** Joins: rwbrambler (~Thunderbi@65.183.138.202)
[20:50:36] *** Quits: dkmueller (~dkmueller@2a01:c23:b820:e600:8940:de15:343:1a97) (Quit: WeeChat 3.1)
[20:50:55] *** Joins: DaNeenjah (~jake@adsl-74-230-10-210.hsv.bellsouth.net)
[20:51:15] *** Joins: Akuli (~Akuli@82-203-160-217.bb.dnainternet.fi)
[20:51:28] *** Joins: d0htem (uid502043@user/d0htem)
[20:51:36] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[20:51:57] <solarjoe4_> for nested packages how do I install some of the nested modules as a top level module? https://bpa.st/BGOQ   I played with multiple entries in package_dir but could not figure out a solution. Can someone point me in the right direction?
[20:52:35] <solarjoe4_> (using setup.py)
[20:52:51] *** Quits: Meteorhead (~Meteorhea@165.225.205.20) (Quit: Client closed)
[20:53:24] <nova> bjs, you ever written dynamic plugins in python? got any hot tips out of the oven?
[20:53:34] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[20:53:47] <nova> I did it once, and I was kind of reimplementing it the same way, but always open to explore
[20:54:07] <CrtxReavr> Tapping temple?
[20:54:42] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:54:57] <nova> I tried that, but my code didn't write itself. M-x butterfly only goes so far, you know
[20:55:28] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:55:54] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Ping timeout: 272 seconds)
[20:55:54] *** slavfox_ is now known as slavfox
[20:55:58] <graingert> solarjoe4_: make a new module at the top that imports from the other packages
[20:56:04] *** Joins: dme86 (~dan@user/dan86)
[20:56:13] *** Joins: ffledgling (~textual@2620:10d:c090:500::4:28c8)
[20:56:21] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[20:57:01] <solarjoe4_> graingert, so that's not possible at all?
[20:57:26] <graingert> You could move the files where you want them to be
[20:57:27] <solarjoe4_> graingert, I mean using the setup.py
[20:57:45] <graingert> Don't use setup.py - use setup.cfg
[20:57:57] <solarjoe4_> graingert, hm, that's not possible, I inherited that stuff...
[20:58:14] <graingert> You can use `pipx run setup-py-upgrade .`
[20:58:33] <solarjoe4_> graingert, is setup.py outdated?
[20:58:40] *** Quits: Elodin (~weechat@user/elodin) (Read error: Connection reset by peer)
[20:58:55] <graingert> It's documented as "legacy" by the pypa
[20:59:03] *** Joins: Elodin (~weechat@user/elodin)
[20:59:35] <solarjoe4_> graingert, I completely missed that...thanks for the hin
[20:59:36] <solarjoe4_> t
[20:59:44] <graingert> You can do codegen in your setup.py, but it's frowned upon
[21:00:02] <graingert> You can also have multiple top level packages per dist, but that's also frowned upon
[21:00:05] <solarjoe4_> what do you mean by codegen?
[21:00:46] <graingert> Like generate a module that contains "from ham.spam import *"
[21:01:16] <graingert> But it would violate the principal of least surprise
[21:01:22] <solarjoe4_> ah, ok, get it now. I think pick the first option you mentioned
[21:01:29] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[21:01:33] <graingert> I think don't do any of those!
[21:01:53] <graingert> Multiple top level modules is confusing for dist consumers
[21:01:54] <bancroft_> if I want to have a different package for python2, can I do package; python_version < "3.0"  ?
[21:02:03] <solarjoe4_> not even the one with the new module at the top that imports?
[21:02:17] <graingert> solarjoe4_: ?
[21:02:35] *** Joins: akk (~akk@75-161-39-50.albq.qwest.net)
[21:02:36] *** Parts: acresearch (~acresearc@user/acresearch) (WeeChat 2.8)
[21:02:36] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:02:37] <solarjoe4_> graingert, yes?
[21:02:42] <graingert> dist consumers expect your dist to contain one package with the same name as your dist
[21:03:59] <solarjoe4_> graingert, yes, thats also very true. ok, then I will have to rearrange it. thanks for the input!
[21:04:12] <graingert> There's some exceptions, eg pillow-pil
[21:05:09] <graingert> solarjoe4_: Like this project does what you're describing I think https://github.com/yinpeng/pillow-pil/blob/master/PillowPIL/ArgImagePlugin.py
[21:05:31] <graingert> Eg pil was first released as a collection of top level modules
[21:06:04] <graingert> Then pillow was released as a dist called pillow with a package called PIL (confusion abounds)
[21:06:26] <Baumfaust> with urllib.request.urlopen(Request(url, headers={'User-Agent': 'Mozilla'})) as response:   html = response.read()
[21:06:32] <Baumfaust> why is html binary?
[21:06:53] <graingert> And people using pil had to uninstall pil and install pillow-pil
[21:07:34] <graingert> solarjoe4_: notice how neither dist nor package matched? It caused confusion for quite a few years
[21:08:03] <solarjoe4_> graingert, ok, I get that point.
[21:08:05] <graingert> Baumfaust: because that's what urlopen does, it's not reading the content type
[21:08:16] <graingert> Baumfaust: use httpx.get instead
[21:09:21] *** Joins: goldfish (~goldfish@user/goldfish)
[21:10:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[21:10:51] *** Quits: insidesources (~insidesou@user/insidesources) (Quit: leaving)
[21:10:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:10:56] *** Joins: vicfred (~vicfred@user/vicfred)
[21:11:23] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[21:12:13] <emerent> graingert: it doesn't cause confusion anymore?
[21:13:04] <graingert> emerent: Well django switched to only support pillow
[21:13:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:13:27] *** Quits: rwbrambler (~Thunderbi@65.183.138.202) (Remote host closed the connection)
[21:13:27] <graingert> But pillow the dist Vs pil the package Vs pil the dist is still confusing
[21:13:43] *** Joins: rwbrambler (~Thunderbi@65.183.138.202)
[21:13:53] *** Joins: Rum (~bourbon@user/rum)
[21:15:06] <emerent> right, haha, I just installed it in a venv to check if anything changed
[21:15:20] *** Quits: Rum (~bourbon@user/rum) (Client Quit)
[21:16:09] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[21:18:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[21:18:26] <Baumfaust> graingert, thanks that worked
[21:18:56] <Baumfaust> any recommend what i can use to parse re the result?
[21:19:00] <Baumfaust> {"total":10000,"took":0.25005172472447157,"data":[{"id":"0xfce146bf3146100cfe5db4129cf6c82b0ef4ad8c-bsc","symbol":"RENBTC","name":"RenBTC Token","description":"renBTC\/renBTC","txns24h":0,"txns24hChange":0.0,"verified":true,"decimals":8,"volume24h":0.0,"volume24hUSD":0.0,"volume24hETH":0.0,"volumeChange24h":0.0,"liquidityUSD":0.0,"liquidityETH":0.0
[21:19:01] <Baumfaust> ,"liquidityChange24h":0.0,"priceUSD":29965.865234375,"priceETH":534.1679077148438,"priceChange24h":0.0,"timestamp":1623080515,"blockNumber":8093155,"AMM":"pancakeswap","network":"bsc"}]}
[21:19:55] <jamea77> how to convert resultset (select * from mytable) into json?
[21:20:07] *** Quits: markcerv (~markcerv3@52-119-125-204.PUBLIC.monkeybrains.net) (Ping timeout: 264 seconds)
[21:22:12] <ChrisWarrick> jamea77: how are you accessing your database? what output do you want?
[21:23:24] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 245 seconds)
[21:23:56] <graingert> jamea77: What packages do you already have installed?
[21:24:14] <graingert> Are you building a web app or doing data analysis or something else?
[21:25:46] <jamea77> import sqlite3
[21:25:56] <jamea77> i usd sqllite3, the table definition is:
[21:26:16] <jamea77> create table IF NOT EXISTS TLECTURA (ID INTEGER PRIMARY KEY, LECTURA TEXT, DFECHA TEXT, IDMASTER INT) with 300 records.
[21:26:32] <jamea77> i want take the resultset and convert to j son, for send via a request.
[21:27:14] *** docx is now known as doc
[21:28:39] *** Joins: galen (~gaken@user/galen)
[21:31:09] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[21:32:04] *** Joins: binarymutt (~binarymut@c-98-194-153-108.hsd1.tx.comcast.net)
[21:35:54] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[21:36:01] *** Quits: nattiestnate (~nate@180.242.128.159) (Quit: WeeChat 3.1)
[21:36:19] *** Joins: viktorivan (~ivan@187.223.103.108)
[21:38:26] *** Joins: p-i- (~Ohmu@node-2ug.pool-118-173.dynamic.totinternet.net)
[21:39:02] *** Joins: Auron (~Auron956@user/auron)
[21:43:34] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[21:44:34] *** Quits: SyntheticClamor (~Synthetic@2a01cb04008a92007da59076e1b0ce8b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:44:52] *** Joins: reset (~reset@user/reset)
[21:45:44] *** Quits: shabius (~shabius@2a0e:1c80:2:1022::1004) (Quit: Leaving)
[21:46:07] *** Quits: solarjoe4_ (~solarjoe4@p50873b1f.dip0.t-ipconnect.de) (Quit: Leaving)
[21:46:08] *** Quits: dvx (~dvx@185.63.97.64) (Quit: dvx)
[21:46:29] <Evolver> Don't use Replit for anything: https://intuitiveexplanations.com/tech/replit/
[21:47:17] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:47:41] <altendky> sounds like #python-offtopic
[21:48:19] *** Quits: jheblu (~user@116.68.98.40) (Quit: ERC (IRC client for Emacs 27.2))
[21:48:35] <ChrisWarrick> jamea77: for very simple things, you can just use sqlite3’s built-in features, such as https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory
[21:48:44] *** Joins: Sasazuka (~Sasazuka@user/sasazuka)
[21:50:40] *** Joins: nomic (~nomic@2a00:23c6:9910:1201:91cc:2528:4817:d496)
[21:50:55] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[21:52:26] <jamea77> thanks ChrisWarrick
[21:52:28] *** BlessJah is now known as BlessJah-
[21:52:52] <ChrisWarrick> jamea77: for something larger, I’d use an ORM and some serializationt hing
[21:53:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:53:43] *** Joins: baldr333 (~baldr333@modemcable034.69-70-69.static.videotron.ca)
[21:54:17] <altendky> just trying to get started looking at mypy plugins.  i've got preliminary code with `if`s based on 'configuration'.  https://github.com/python-qt-tools/qts/blob/731ed37b64e3a70a3a463e4250a457ba3119ae75/src/qts/QtCore.py  i would like to help mypy track which branch it should use.  maybe i'm just not getting it yet but https://mypy.readthedocs.io/en/stable/extending_mypy.html#extending-mypy-using-plugins seems massively too
[21:54:17] <altendky> simple to actually develop from.  is there something else i should be reading?
[21:55:29] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[21:55:44] <Akuli> afaik you can use pretty much anything from mypy plugins, but no api stability is guaranteed for internal mypy stuff
[21:56:15] <Akuli> i haven't really developed mypy though, besides adding a faster special case to a shitty O(n^2) algorithm :)
[21:56:30] <altendky> am i just supposed to read the source to figure out plugins?
[21:56:31] <Akuli> n = number of elements in literal in aws stubs = 150
[21:56:59] <Akuli> like i said, not a mypy dev and there's no guarantees about stability, but that's one way :)
[21:57:13] <Akuli> i have also found mypy source code incredibly difficult to read
[21:57:19] *** Joins: siege (~obriencj@bouncer.preoccupied.net)
[21:57:29] <altendky> yes, i understand the lack of stability.  though the linked issue for warnings hasn't been commented on since 2019 so...
[21:58:05] <altendky> and you do get the mypy version so you can support as much as you want
[21:58:25] *** Joins: cliluw (~cliluw@47.147.80.149)
[21:58:36] *** Quits: CombatVet (~c4@user/combatvet) (Quit: suck it)
[21:59:39] *** Joins: hanaan (~naan@user/naan)
[22:00:00] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[22:00:26] *** Quits: benjaminab (uid502385@id-502385.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[22:00:34] *** Joins: CombatVet (~c4@user/combatvet)
[22:01:09] *** Joins: FluffyMask (~FluffyMas@user/fluffymask)
[22:02:23] *** Quits: jcarl43 (~jcarl@node-1w7jr9qxb23qwk5inqhfljuks.ipv6.telus.net) (Quit: WeeChat 3.1)
[22:06:12] *** Joins: darksun (~darksun@user/darksun)
[22:06:12] *** Quits: Xano (~Xano@2a00:23c4:420c:d700:86cc:abd5:a3fb:834a) (Ping timeout: 272 seconds)
[22:09:08] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[22:10:31] *** Quits: seachdamh (~seachdamh@user/seachdamh) (Remote host closed the connection)
[22:10:41] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[22:11:09] *** Joins: seachdamh (~seachdamh@user/seachdamh)
[22:11:41] *** Quits: rendar (~rendar@user/rendar) ()
[22:12:43] *** Joins: Deesl (~bsdboy@redhat/psirt/Deesl)
[22:14:31] <jamea77> error: Module 'datetime' has no attribute 'today'      when i try: DFECHA=str(datetime.today().strftime('%Y/%m/%d')) any advice?
[22:15:22] <altendky> jamea77: datetime is confusing.  it is datetime.date.today
[22:15:32] <akk> jamea77: datetime has now(), datetime.date() has today
[22:15:33] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[22:15:36] <altendky> or datetime.datetime.today
[22:16:09] <jamea77> ok thx
[22:16:35] <altendky> lots of places will `from datetime import datetime` and then stuff like `datetime.today()` work and lend to the confusion.
[22:18:29] *** BlessJah- is now known as BlessJah
[22:20:04] *** Joins: Linux77 (~kvirc@186.235.105.225)
[22:20:40] <p-i-> Is it good practice to create a fresh asyncio runloop in a new thread, use asyncio from that thread?
[22:21:12] <ChrisWarrick> p-i-: probably not
[22:21:14] <altendky> mostly threads with async are for handling blocking activities.
[22:21:33] <ChrisWarrick> p-i-: why do you want to mix ugly threads with nice async code?
[22:21:34] <altendky> to make them 'async' so you can interact with them from the main thread
[22:22:23] <p-i-> I'm working on a WebSocket listener class https://stackoverflow.com/questions/67860442/correct-destruction-process-for-async-code-running-in-a-thread
[22:22:41] <p-i-> I struggled to get it working with asyncio only (no threads)
[22:22:44] <ChrisWarrick> p-i-: okay, don’t use threads in there
[22:22:53] <p-i-> I will try again now.
[22:23:00] <ChrisWarrick> p-i-: one asyncio loop is enough to handle multiple websocket clients
[22:23:13] <anddam> how do I tell setuptools/distutils to keep temp directory? I am getting an exception in postinstall and I'd like to inspect the directory tree
[22:23:21] <anddam> also what does this even mean? https://docs.python.org/3.8/distutils/apiref.html?highlight=distutils%20extension#module-distutils.debug
[22:23:23] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[22:23:57] *** Joins: Guddu (~Guddu@59.95.232.23)
[22:23:58] <anddam> where should I get info about the DEBUG flag? All it says is "This module provides the DEBUG flag."
[22:24:19] <p-i-> Suppose I have several components. One is an aiohttp class for POST/GET, one monitors Telegram, etc. At least 3 separate ones use asyncio. Is it ok for them to share the main runloop?
[22:24:27] <p-i-> Or is there some potential problem?
[22:24:40] <p-i-> like, one might be blocking somehow
[22:24:44] <ChrisWarrick> p-i-: yes, you’re expected to use one asyncio loop in your asyncio program
[22:24:50] <ChrisWarrick> p-i-: how would one be “blocking”?
[22:25:06] <p-i-> dunno, I'm still getting my head around it
[22:25:07] <graingert> p-i-: aiohttp comes with a websocket client and server
[22:25:30] *** Joins: andydude_ (~arobbins@149.sub-174-192-202.myvzw.com)
[22:25:43] <p-i-> Sorry, I'm already using aiohttp for this component.
[22:25:57] <graingert> p-i-: `async def amain(): return await asyncio.gather(run_aiohttp_server(), run_telegram_bot(), etc())`
[22:26:05] <ChrisWarrick> p-i-: Your code in one of the three components might be performing blocking operations. And that should be fixed, by running your blocking operation with run_in_executor.
[22:26:05] *** Quits: andydude (~arobbins@c-76-111-99-194.hsd1.md.comcast.net) (Ping timeout: 272 seconds)
[22:26:06] *** andydude_ is now known as andydude
[22:26:21] *** Joins: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne)
[22:26:48] <graingert> aiohttp and telgram both provide wrappers around `asyncio.run(` and you should avoid those wrappers
[22:27:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[22:30:26] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[22:32:43] *** Joins: loskutak (~loskutak@gw.mecom.cz)
[22:33:11] *** Quits: codemouse92__ (~codemouse@user/codemouse92) (Ping timeout: 244 seconds)
[22:33:30] *** Quits: dontwannatell[m] (~dontwanna@2001:470:69fc:105::c27) (Ping timeout: 272 seconds)
[22:33:30] *** Quits: ubh (~ubh@2001:470:69fc:105::852) (Ping timeout: 272 seconds)
[22:33:30] *** Quits: ali1234[m] (~ali1234@user/ali1234) (Ping timeout: 272 seconds)
[22:33:41] *** Quits: novasharper (~novasharp@2001:470:69fc:105::b4a) (Ping timeout: 244 seconds)
[22:33:41] *** Quits: artemon (~artemon@2001:470:69fc:105::87c) (Ping timeout: 244 seconds)
[22:34:07] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Ping timeout: 272 seconds)
[22:34:07] *** Quits: diegov (~diegov@2001:470:69fc:105::103f) (Ping timeout: 272 seconds)
[22:34:44] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[22:35:21] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[22:39:35] <jinsun> if I ran a code with python -m pdb and somehow managed to delete the original file while the debugger was running, can I recover the file back (with hopefully not much work)?
[22:41:57] *** Quits: vbgunz (~vbgunz@35.141.71.47) (Remote host closed the connection)
[22:42:32] *** Joins: argento (~argent0@168-227-96-51.ptr.westnet.com.ar)
[22:42:38] *** Joins: francis_ (francis@user/francis)
[22:42:50] <adder`> this is why you use a version control system
[22:43:09] <emerent> jinsun: under what OS?
[22:43:18] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[22:43:29] <jinsun> emerent: windows
[22:45:20] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[22:45:38] <emerent> no idea if you can do anything with pdb, but you may try an undeleter
[22:46:06] <emerent> under linux the file would have still existed so long as the other python held an open handle to it and you could have simply relinked it
[22:46:40] <altendky> check the recycle bin?
[22:47:04] <altendky> use undo if you deleted it in file manager
[22:47:05] <NeilRG> what do people think about the PEP 661: Sentinel Values?
[22:50:11] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[22:52:02] *** Quits: andydude (~arobbins@149.sub-174-192-202.myvzw.com) (Quit: andydude)
[22:52:06] *** Joins: drincruz (~drincruz@ool-44c748be.dyn.optonline.net)
[22:52:26] *** Quits: qlixed (~qlixed@2800:810:471:2f8::1b7) (Ping timeout: 272 seconds)
[22:52:32] *** Joins: HaMsTeRs (~HaMsTeRs@210.3.201.132)
[22:53:35] <bjs> NeilRG: seems reasonable
[22:53:51] *** Quits: francis (francis@user/francis) (Quit: leaving)
[22:53:51] *** francis_ is now known as francis
[22:55:09] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 252 seconds)
[22:55:21] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[22:58:00] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[23:00:30] *** sco1_ is now known as sco1
[23:01:22] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[23:01:37] <neilthereildeil> hey all
[23:02:37] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 272 seconds)
[23:03:59] <jinsun> emerent: well it is on my coworker's computer and he doesn't have admin rights there, and all undeleters I know require that, he can call IT but that goes into "too much work" territory
[23:06:12] *** Joins: sunyibo (~alex@78.61.107.92.dynamic.wline.res.cust.swisscom.ch)
[23:07:05] *** Joins: Ivyy (~Ivyy@2001:a61:13f0:c401:aaad:8747:f950:e29)
[23:07:34] <foo> I'd love to be able to pull airtag lat/long via a python library./w 2
[23:09:45] *** Joins: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net)
[23:09:57] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[23:10:18] *** Quits: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne) (Quit: koka1ne)
[23:11:36] *** Parts: Luyin (~daisy@user/luyin) (bye bye)
[23:12:19] <JayDoubleu> whats the most performant and shortest way to generate random numbers in 10char length
[23:12:42] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[23:13:05] <NeilRG> JayDoubleu, how many?
[23:13:30] <JayDoubleu> 10 digits/characters. Actually its a string so 0123456789
[23:13:52] <p-i-> Suppose my main loop is: while True: await asyncio.sleep(3)... I put a `try: ... except KeyboardInterrupt: pass` around that. But when I CTCL+c, it still throws some exception from within asyncio
[23:13:54] <JayDoubleu> was thinking of just trimming random.uniform(0,10)
[23:14:26] *** Joins: dkmueller (~dkmueller@dynamic-095-114-018-228.95.114.pool.telefonica.de)
[23:14:39] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[23:14:40] <p-i-> So my async code is failing to propagate the exception...
[23:14:44] *** Joins: gvsa123 (~gvsa123@d23-17-234-3.abhsia.telus.net)
[23:14:51] <chilversc> JayDoubleu: can the number be padded with leading zeros? such as 0000000009
[23:15:08] <JayDoubleu> yeah as long as they dont collide often
[23:15:10] <p-i-> Not sure how to fix this...
[23:15:23] <chilversc> JayDoubleu: and how random do you need it? pesudo-random or secure?
[23:15:37] <JayDoubleu> just pseudo random as long as its fast
[23:15:39] *** Joins: Vonter (~Vonter@user/vonter)
[23:15:56] <chilversc> JayDoubleu: define fast
[23:15:57] <Baumfaust> my program runs for like 30 seconds because it uses a lot of http requests of api calls, is there to chain these calls?
[23:16:30] <JayDoubleu> its to generate locust stress test and one of json fields is 10 char number
[23:16:59] <ffledgling> If I'm trying to ensure that two objects are of the same type when writing a custom __lt__ operator, is `isinstance(other, type(self))` more pythonic than `type(other) == type(self)` ?
[23:17:31] <chilversc> JayDoubleu: then I suspect that random.randrange is probably decent enough and then format it with string padding
[23:17:31] <nedbat> ffledgling: there are differences: the first will be true if other is a subclass, the second won't be true
[23:18:20] <p-i-> Here's the fail point: https://bpa.st/BCMA#1L133 ... how to catch CTRL+c correctly?
[23:18:39] <chilversc> Baumfaust: depends, are there any dependencies between the http calls? Such as you need the results from a call for the next call?
[23:19:15] <Baumfaust> chilversc no there no dependencies
[23:19:16] <JayDoubleu> So something like this yeah `str(random.uniform(0,10))[2:12]` ?
[23:19:52] *** Joins: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net)
[23:20:01] *** Joins: dme86 (~dan@user/dan86)
[23:20:18] <chilversc> Baumfaust: then maybe use some kind of async task queue, the only thing you want to do is ensure that you limit the requests so that you do not send all 30 requests at once
[23:20:21] *** Quits: death916 (~death916@user/death916) (Ping timeout: 272 seconds)
[23:20:43] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 264 seconds)
[23:20:48] <ffledgling> nedbat: fair point, for an exact comparison then I should use type(x) == type(y)? Any reason why it would not be recommended?
[23:20:48] <chilversc> Baumfaust: the idea is you queue up all 30 requests, then wait until the queue is empty. The wait should be asynchronous, you don't want a busy loop eating all the CPU
[23:22:02] <Baumfaust> ok that sounds fair, when its takes 30 seconds for 30 calls, how much time will it safe?
[23:22:34] <chilversc> Baumfaust: what you want is an async queue that supports waiting until the work is done (i.e. the queue is empty)
[23:23:26] <chilversc> Baumfaust: here's an example https://docs.python.org/3/library/asyncio-queue.html
[23:23:42] <nedbat> ffledgling: isinstance is preferred, specifically so that subclasses will be accounted for.
[23:24:22] <voldial> Is there some way to use context managers for temp var's? I just wanted to "with path.as_posix() as _path:" but of course, str does not implement __enter__ and __exit__
[23:24:33] <Baumfaust> ok thank you, i will check this
[23:24:44] <foo> Trying to send an image (qr code) via flask. This example I'm seeing uses img_buf = cStringIO.StringIO() ... but I can't find the cStringIO package. I wonder if this was a python2 thing.
[23:24:51] *** Quits: dme86 (~dan@user/dan86) (Ping timeout: 252 seconds)
[23:25:02] * foo tries to find an alternative
[23:25:23] <graingert> foo: use io.StringIO or io.BytesIO
[23:25:32] <nedbat> voldial: how about:  _path = path.as_posix()
[23:25:41] <foo> graingert: thank you
[23:25:53] <nedbat> voldial: with-statements don't delete the variable at the end anyway
[23:26:11] <ffledgling> nedbat: I suspected as much, but in this case, my objects inherit from a common parent class. (Op -> SpecialOp1, SpecialOp2). So I would not like there to be a case where someone accidentally passes (SpecialOp1, Op) instead of SpecialOp1, SpecialOp2. Is doing isinstance(other, type(self)) a good enough hedge in that case?
[23:26:19] *** Quits: schu (~schu@c-24-98-88-246.hsd1.ga.comcast.net) (Ping timeout: 245 seconds)
[23:26:37] <voldial> nedbat: aaah. that was my mistake. for some reason I thought they got deleted. ok, one more think to add to my explicit code rules ;) thanks
[23:27:07] <neilthereildeil> is there an easy one-line way to disable logging for the whole program (not just 1 module) when using the logging library in python 2.7?
[23:27:15] <chilversc> voldial: I would say that having a "temp" variable isn't required anyway so long as your functions are well defined
[23:28:07] <voldial> chilversc: agree, except this was a human corner case, the icecream library prints the name of a var, and then it's value, and I wanted to save some debugging screen space
[23:29:15] *** Joins: Zajt (~Zajt@84-55-91-237.customers.ownit.se)
[23:29:30] <Zajt> How can I submit a POST request with the requests library if I wanna submit multiple values for input fields which look like this on the page? https://imgur.com/Q0okSAe
[23:29:34] <Zajt> I have extracted these input fields with BeautifulSoup but how do I include them in my POST request?
[23:31:25] *** Joins: a6a45081-2b83 (~aditya@223.235.239.159)
[23:32:27] *** Joins: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it)
[23:34:40] *** Quits: hlz (~rue@1-162-41-228.dynamic-ip.hinet.net) (Quit: WeeChat 3.1)
[23:35:02] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Quit: leaving)
[23:35:24] <jamea77> how to export a resultset with headers? here my code: https://bpa.st/YBTQ  thanks
[23:36:03] *** Quits: biozz (~biozz@178.57.22.163) (Quit: Leaving...)
[23:36:12] *** Joins: Quaking (~Quaking@167.89.254.27)
[23:36:12] *** Quits: nomic (~nomic@2a00:23c6:9910:1201:91cc:2528:4817:d496) (Quit: Leaving)
[23:37:36] *** Joins: sunarch (~x@user/sunarch)
[23:38:18] *** Joins: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne)
[23:39:08] <graingert> foo: modernize can help autofix a lot of those things
[23:39:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:39:31] <p-i-> How to catch ctrl+C when running asyncio code? Here's a minimal example: https://bpa.st/OAWA
[23:40:58] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[23:41:25] <ffledgling> Another, slightly weird question - I have a dataclass that I'm defining a custom __lt__ operator on so that I can have custom sorting logic. The datalcass obviously definies its own __eq__, however __lt__ only looks at one field based on some logic while comparing, whereas I need __eq__ to look at all fields to ensure the objects are truly equal. Is there a great risk if I add a @total_ordering decorator to the class?
[23:41:42] <The-Compiler> Zajt: https://docs.python-requests.org/en/master/user/quickstart/#more-complicated-post-requests
[23:41:45] <graingert> p-i-: with anyio.open_signal_receiver():
[23:41:55] <graingert> works for sigint
[23:42:23] <graingert> p-i-: What's your Python version?
[23:42:39] <graingert> p-i-: by default asyncio cancels all tasks on ctrl+c
[23:43:27] *** Joins: plasticuproject (~plasticup@user/plasticuproject)
[23:43:33] <Zajt> The-Compiler thanks, what should the key be though?
[23:44:03] <The-Compiler> neilthereildeil: there's logging.disable: https://docs.python.org/2.7/library/logging.html#logging.disable - but why Python 2.7 :(
[23:44:38] *** Quits: neilthereildeil (~neilthere@204.115.183.4) (Quit: Client closed)
[23:44:39] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 252 seconds)
[23:44:53] *** Joins: neilthereildeil (~neilthere@204.115.183.4)
[23:44:59] <neilthereildeil> The-Compiler: i have to call logging.disable in EACH module though
[23:45:01] <neilthereildeil> i wanna do it once globally
[23:45:35] <The-Compiler> Zajt: the name attribute, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname
[23:45:41] <The-Compiler> neilthereildeil: why would you need to call it once per module?
[23:45:57] *** Joins: maxtim (~maxtim@c-71-228-128-153.hsd1.ga.comcast.net)
[23:46:00] *** Quits: HaMsTeRs (~HaMsTeRs@210.3.201.132) (Quit: Leaving)
[23:46:11] <p-i-> graingert: I can use latest Python no problem
[23:46:40] <graingert> p-i-: Are you on windows?
[23:46:50] <p-i-> Never! <shudder>
[23:46:52] <p-i-> macOS
[23:47:42] <maxtim> So I have a tkinter project that is designed to snap to the bottom left corner of the active screen. The annoying bit is that it starts in the center of the screen first. Is there a way to make that default to that corner of the screen? (I will write up a demo and paste it real quick)
[23:48:39] *** Quits: Baumfaust (~Guest1@2a02:8071:2d6:6b00:6ce3:d89:181a:a1f2) (Quit: Client closed)
[23:49:19] *** Joins: eyepeetee (~aa@096-032-003-075.res.spectrum.com)
[23:49:30] <eyepeetee> hi, how can i vertically align two graphs? one of them i'm generating using matplotlib directly, and the other one i'm generating using pandas.plot, both using datetime for x axis...
[23:50:30] <p-i-> graingert: I'm looking at https://anyio.readthedocs.io/en/stable/signals.html ... where do I place the actual async_main() code I want to run?
[23:51:40] *** Quits: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne) (Quit: koka1ne)
[23:52:10] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:52:11] *** Joins: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne)
[23:52:29] *** Quits: koka1ne (~koka1ne@gateway/tor-sasl/koka1ne) (Client Quit)
[23:52:54] *** Joins: drincruz_ (~drincruz@ec2-18-235-23-153.compute-1.amazonaws.com)
[23:53:33] <graingert> p-i-: I put it at the bottom of my file
[23:53:57] *** Joins: f33f046c-a02e (~aditya@223.178.225.24)
[23:54:39] *** Quits: a6a45081-2b83 (~aditya@223.235.239.159) (Ping timeout: 245 seconds)
[23:54:48] *** Quits: drincruz (~drincruz@ool-44c748be.dyn.optonline.net) (Ping timeout: 244 seconds)
[23:54:57] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:55:13] *** Joins: srhm (~ascii@user/srhm)
[23:55:22] *** Joins: cliluw (~cliluw@47.147.80.149)
[23:55:41] *** Quits: dkmueller (~dkmueller@dynamic-095-114-018-228.95.114.pool.telefonica.de) (Quit: WeeChat 3.1)
[23:55:46] *** Quits: Rue (~rue@2001-b011-1000-1453-c59a-99fb-4748-3035.dynamic-ip6.hinet.net) (Ping timeout: 272 seconds)
[23:55:55] *** Parts: blackout69 (~blackout6@net-109-117-245-193.cust.vodafonedsl.it) ()
[23:57:06] *** milosz_ is now known as milosz
[23:57:25] *** Joins: Rue (~rue@2001-b011-1000-1fa7-9875-5f57-4775-5f01.dynamic-ip6.hinet.net)
[23:57:53] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[23:58:29] *** Joins: SuperL4g (~akulbe@user/superlag)
[23:59:11] *** Joins: xsperry (~as@user/xsperry)
[23:59:43] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 264 seconds)
