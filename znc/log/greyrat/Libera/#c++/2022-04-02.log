[00:01:52] *** Joins: Xardas (~Xardas@149.233.51.127)
[00:05:51] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[00:06:24] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:10:36] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[00:11:09] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b13c:cfe9:4c84:105a)
[00:11:11] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:90d4:1750:f22d:5ef2) (Ping timeout: 250 seconds)
[00:12:32] *** Joins: ordos (~ordos@user/ordos)
[00:13:27] *** Quits: Optimus (~risto@87.227.227.147) ()
[00:13:54] *** Parts: ordos (~ordos@user/ordos) (Leaving)
[00:14:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:14:41] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc22:e76d:3ca0:c786)
[00:15:12] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:15:15] *** Joins: hvitol (~hvitol@218-145-17-89.fiber.hringdu.is)
[00:16:11] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[00:16:23] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b13c:cfe9:4c84:105a) (Ping timeout: 250 seconds)
[00:16:31] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66009cff3197013560fb.ipv6.abo.wanadoo.fr)
[00:18:14] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:342c:4ea2:4826:ecb)
[00:18:21] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a66008de0dcfe6b15ec0f.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[00:18:31] *** Joins: magla (~gelignite@55d450ea.access.ecotel.net)
[00:19:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dc22:e76d:3ca0:c786) (Ping timeout: 240 seconds)
[00:19:21] *** Joins: seninha (~seninha@user/seninha)
[00:19:25] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[00:19:33] *** Joins: zmt00 (~zmt00@user/zmt00)
[00:21:36] *** Quits: notevil (~notevil@user/notevil) (Quit: ZNC 1.8.2 - https://znc.in)
[00:21:38] *** Joins: quartz (~quartz@user/quartz)
[00:21:57] *** Joins: notevil (~notevil@user/notevil)
[00:24:37] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:342c:4ea2:4826:ecb) (Ping timeout: 240 seconds)
[00:26:48] *** Joins: svm_invictvs (~svm_invic@user/svm-invictvs/x-6696469)
[00:28:13] *** Quits: PlasmaHH_ (~PlasamaHH@user/plasmahh) (Ping timeout: 240 seconds)
[00:28:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:f81b:729b:7ef0:993) (Ping timeout: 260 seconds)
[00:30:13] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[00:32:13] *** Quits: hvitol (~hvitol@218-145-17-89.fiber.hringdu.is) (Quit: WeeChat 3.4)
[00:33:23] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[00:33:40] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1c12:bb21:1c32:53b8)
[00:33:54] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[00:34:01] *** Quits: cosimone (~user@93-47-230-184.ip115.fastwebnet.it) (Remote host closed the connection)
[00:35:57] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:89f3:aed9:3683:7eb2)
[00:38:35] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:1c12:bb21:1c32:53b8) (Ping timeout: 260 seconds)
[00:39:15] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[00:39:48] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:514b:b491:478b:bf51)
[00:40:29] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 252 seconds)
[00:40:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:40:41] *** Joins: ivii (~ivan@user/ivii)
[00:41:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:89f3:aed9:3683:7eb2) (Ping timeout: 260 seconds)
[00:43:49] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:43:52] *** Joins: karakedi (~eAC53C340@user/karakedi)
[00:46:27] *** Joins: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5)
[00:48:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:51:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[00:57:01] *** Quits: magla (~gelignite@55d450ea.access.ecotel.net) (Quit: Stay safe!)
[00:58:37] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:00:23] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:18ec:9063:4133:b132)
[01:02:45] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[01:05:07] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 256 seconds)
[01:07:28] *** Joins: rgrinberg (~textual@177.248.156.216)
[01:08:28] *** PJBoy is now known as Guest1669
[01:08:28] *** Quits: Guest1669 (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[01:08:29] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:10:30] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[01:11:41] *** Quits: letto (~letto@188.27.114.171) (Ping timeout: 246 seconds)
[01:14:03] *** Quits: proller (~p@2a02:6b8:b081:b587::1:26) (Ping timeout: 260 seconds)
[01:21:49] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66009cff3197013560fb.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[01:22:55] *** Joins: h4k1m0u (~h4k1m0u@2001:861:3146:5890:bc7f:6642:9a60:db60)
[01:24:24] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[01:25:17] <h4k1m0u> Hi, a question came to my mind regarding inheritance. When a derived class inherits from a derived class, does the derived class end up with a copy of the field members (not talking about methods) of the base class (those that are protected/public ofc)?
[01:27:02] <Oxyd> Yes, of course. If you have struct base { int member; }; struct d1 : base { }; struct d2 : d1 { };, then d2 contains d1 as a subobject, and d1 contains base as a subobject, so in this way d2 also contains base.
[01:29:25] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:30:54] *** Quits: Minvera (~Minvera@user/Minvera) (Remote host closed the connection)
[01:31:27] <h4k1m0u> how about the `int member`? if I modify it in d1 or d2, am I modifying a copy of `base::member`?
[01:32:30] *** Joins: makeyavelly (~Thunderbi@2a00:1fa0:ae9:f7e9:f4a3:5f52:fe5e:b17b)
[01:32:48] *** Tobbi__ is now known as Tobbi
[01:33:00] *** Quits: makeyavelly (~Thunderbi@2a00:1fa0:ae9:f7e9:f4a3:5f52:fe5e:b17b) (Client Quit)
[01:41:50] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:42:43] *** Joins: rgrinberg (~textual@177.248.156.216)
[01:43:57] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[01:44:56] <Oxyd> No, you're modifying the `member` in `base`.
[01:46:45] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 250 seconds)
[01:46:54] <Oxyd> You can imagine that struct d1 : base { }; becomes struct d1 { base __base; }; and struct d2 : d1 { }; becomes struct d2 { d1 __d1; };. So if you add d2::f() { member = 2; }, it gets rewritten to __d1.__base.member = 2;. In reality, the bases don't have any name you can access yourself, though.
[01:48:52] *** Joins: Tangent-Man (~Tang3nt-M@77.14.200.146.dyn.plus.net)
[01:50:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 246 seconds)
[01:50:14] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[01:50:31] *** Joins: rvalue (~rvalue@user/rvalue)
[01:50:40] *** Quits: Tangent-Man (~Tang3nt-M@77.14.200.146.dyn.plus.net) (Remote host closed the connection)
[01:50:49] *** lkor is now known as lionkor
[01:51:05] *** Joins: Tangent-Man (~Tang3nt-M@77.14.200.146.dyn.plus.net)
[01:51:25] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[01:52:20] *** Quits: andreasbuhr (~quassel@p549dbbe6.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:53:13] *** Quits: duds- (~duds-@user/duds) (Max SendQ exceeded)
[01:54:38] <h4k1m0u> thanks a lot, it confirms why after modifying in a method defined in the derived class (your d2::f()) a member variable  declared in the base class (your Base::member) , I get the modified value into the member variable by calling from the derived class another getter defined in the Base class
[01:54:39] *** Joins: duds- (~duds-@user/duds)
[01:54:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 245 seconds)
[01:56:13] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[01:59:10] *** Quits: rvalue (~rvalue@user/rvalue) (Excess Flood)
[01:59:24] *** Joins: rvalue (~rvalue@user/rvalue)
[02:01:58] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[02:05:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:09:12] *** Quits: h4k1m0u (~h4k1m0u@2001:861:3146:5890:bc7f:6642:9a60:db60) (Quit: Client closed)
[02:09:45] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[02:10:55] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:12:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:13:06] *** Joins: Viewday115 (~Viewday@user/viewday)
[02:14:12] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 240 seconds)
[02:15:30] *** Joins: cube2 (~cube1@89-160-183-39.du.xdsl.is)
[02:16:28] *** Joins: nq (~nq@82.79.141.40)
[02:16:41] <cube2> Here libc++ people arguing that debug performance doesn't matter because they want their ugly code base to not get uglier: https://github.com/llvm/llvm-project/issues/53689
[02:17:19] <cube2> I'm linking this because the other day I was arguing on here about the ridiculousness of everything being a function that needs to get inlined
[02:17:35] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a871)
[02:17:38] <cube2> I don't know why C++ people just accept the current approach to everything as gospel. It's like anybody with a bullshit meter auto filters himself out
[02:18:02] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:18ec:9063:4133:b132) (Read error: Connection reset by peer)
[02:18:11] <enterprisey> evaporative cooling
[02:18:15] <enterprisey> they all write rust now
[02:19:26] *** Joins: Viewday1157 (~Viewday@user/viewday)
[02:20:58] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[02:20:59] *** Viewday1157 is now known as Viewday115
[02:25:31] *** Quits: jfsimon1981 (~jfsimon19@148.96.128.77.rev.sfr.net) (Read error: Connection reset by peer)
[02:25:38] *** Joins: jfsimon1981 (~jfsimon19@148.96.128.77.rev.sfr.net)
[02:26:16] <cube2> Imagine wanting to see a benchmark to justify replacing a template instantiation with a cast! And it's not just a template instantiation, it's the backend having to run a heuristic based algorithm to find the bloody call to it and inline it back into a cast!
[02:26:50] <Oxyd> Imagine having nothing better to do than to troll an IRC channel for several days.
[02:26:57] *** Joins: Tang3nt-Man (~Tang3nt-M@81.174.132.104)
[02:27:03] *** Quits: Tangent-Man (~Tang3nt-M@77.14.200.146.dyn.plus.net) (Ping timeout: 260 seconds)
[02:27:11] <cube2> Oxyd whoah tough guy. My second time on here. Providing a link because I had been asked to give one.
[02:31:59] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[02:36:03] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:38:18] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[02:40:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:514b:b491:478b:bf51) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:40:50] *** Joins: AmR (~AmREiSa@156.207.152.245)
[02:41:06] *** Quits: cube2 (~cube1@89-160-183-39.du.xdsl.is) (Quit: Leaving)
[02:44:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:59] *** ChanServ sets mode: +v npaperbot
[02:51:28] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:08] *** Quits: ollien (~ollien@ollien.com) (Remote host closed the connection)
[02:58:44] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48)
[03:04:51] <Guest54> is there a decent readable way to figure out if two doubles are approximately equal based on a precision? Looking at this answer https://stackoverflow.com/a/253874 but it seems so unreadable
[03:07:37] <danieldg> Guest54: it's easier if you have an actual value for "within x" and not just "within some multiple of the floating point precision"
[03:08:16] <Alipha> just copy approximatelyEqual and be done with it ;-) (though change float to double?)
[03:08:55] <danieldg> what more do you want, really?
[03:09:14] <danieldg> if you want "within 0.000001" then write it that way :)
[03:09:53] <danieldg> that's normally what you actually want unless you're writing floating point test functions
[03:10:41] <Guest54> hmm fair enough, I should give more context :)
[03:11:13] <Alipha> indeed, it could be simply `return fabs(a - b) <= epsilon;` if you know what scale of numbers you're comparing
[03:11:42] <danieldg> if you don't know the scale, you're likely to have unknown rounding errors *anyway*
[03:11:42] <Guest54> so we use a 3rd party api that, sometimes instead of gives the value 0, gives us weird values like -8.668312521342e-22
[03:12:08] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[03:12:23] <danieldg> sure, that's pretty common
[03:12:31] <Alipha> what are the other values (which are supposed to be non-zero) like?
[03:12:36] <Guest54> if the user specify a lower bound of 0, and the value from the api is that weird thing^, then the check is not going to pass (when really i should)
[03:13:03] <Alipha> 5.3? 498129.1? 0.0034? 9.1e15?
[03:13:19] <Alipha> comparing against zero is especially difficult
[03:13:29] <Guest54> this is more weird edge case so far, there could be more, but I'm just looking for a sensisble impl that will work for most cases
[03:13:54] <Alipha> because you have to use the scale of the numbers that were used to produce what was supposed to have a value of 0
[03:14:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:94fe:3c2b:a7d3:5d92) (Ping timeout: 240 seconds)
[03:14:21] <Guest54> yes that makes sense
[03:14:22] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:6d4c:38a4:18b7:4b48) (Quit: WeeChat 3.4)
[03:14:23] <danieldg> Guest54: that algorithm won't work well near zero anyway
[03:14:27] <danieldg> (the one in SO)
[03:15:05] <Guest54> I'm wondering if there is any concept of a "relative epsilon"
[03:15:09] <danieldg> just define things as 'within x' where x is a useful error bound
[03:15:42] <danieldg> sure: take expected_output * DOUBLE_EPSILON (or whatever that constant is named)
[03:15:43] <Guest54> yep but the x depends on the values we're comparing right? I'm not sure if it's a value that can work for *all* cases
[03:16:24] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[03:16:26] <Guest54> for eg, if we're comparing 2 digits numbers, then maybe it makes for epilson to be 0.001. So 99 vs 99.001 are approximately equal.
[03:16:28] <Alipha> Guest54: that approximatelyEqual uses a "relative epsilon". but again, that function doesn't work if you pass in 0 for a or b
[03:16:56] *** Quits: AmR (~AmREiSa@156.207.152.245) (Quit: Konversation terminated!)
[03:17:06] <Guest54> but if we're comparing values like 0.00005 andÂ  0.00006, then that epislon is going to work.
[03:17:09] <danieldg> Guest54: that's why you need a nonzero "expected" value to use
[03:17:10] <Guest54> not*
[03:17:52] <danieldg> if you're measuring distances walked in light-years, your negative number is kinda significant
[03:18:02] <danieldg> (maybe. I didn't do math)
[03:19:01] <Guest54> I'm reading this article https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
[03:19:05] <Guest54> the part about relative epsilons
[03:19:42] <danieldg> there isn't a generic solution to this
[03:20:02] <danieldg> it's much better to know your domain and expected error size
[03:20:36] <danieldg> after all, if you don't know that, how do you know double is enough precision?
[03:20:50] <Alipha> Guest54: https://godbolt.org/z/4nYsen19r ... which again, it sounds like you want to compare against 0, which won't work with approximatelyEqual
[03:21:19] *** Joins: Evrixol (~Vlad2580@user/vlad2580)
[03:21:43] *** Joins: hiroshi_ (~freedom@151.35.53.241)
[03:22:33] <Guest54> Alipha but it makes sense though, right? I wouldn't `0.00005` to be equal to `0.00006`, with epsilon being tiny
[03:22:40] <Guest54> wouldn't expect&
[03:22:56] <danieldg> Guest54: I would want those to be equal in some cases
[03:24:23] <Alipha> Guest54: right. i was illustrating that this approximatelyEqual uses a "relative epsilon" and does indeed treat 99 == 99.001 and 0.00005 != 0.00006 as desired
[03:24:52] <Guest54> hmm. Basically, I know I should probably maybe look more into my use case values ...but I feel like the problem is general enough. I want to compare two doubles, with a relatively "tiny" epsilon that dynamic changes based on the magnitude of the datapoints
[03:25:05] <Guest54> dynamically*
[03:25:20] <danieldg> Guest54: then you need a magnitude on your zero
[03:25:51] <danieldg> Guest54: 0.0Â±0.1 or 0.0Â±1e-10
[03:26:21] <danieldg> just like 0 has a sign, in this case zero needs a magnitude
[03:26:25] <Guest54> hmm
[03:27:09] <danieldg> sadly the spec writers for floating point didn't define that :)
[03:27:25] <danieldg> (I think signed zero causes enough confusion already)
[03:27:26] <Guest54> `approximatelyEqual(0.00005, -8.668312521342e-22, 0.0001)` fails which I guess makes sense
[03:27:38] <Guest54> https://fburl.com/901w6gbz
[03:28:00] <Guest54> but I don't want it to fail...
[03:28:16] <Guest54> this is a lot harder thanI thought
[03:28:45] *** Quits: Tang3nt-Man (~Tang3nt-M@81.174.132.104) (Remote host closed the connection)
[03:28:46] <Alipha> Guest54: so how small of a number should be equal to 0 then? apparently for this example, 0.00005 is supposed to be equal to 0
[03:30:42] <Alipha> for `approximatelyEqual(0.00005, x, 0.0001)`, only values of x between 0.000049999 and 0.000050001 will be considered equal to 0.00005
[03:30:47] <Guest54> yep let's say that anything with a prefix like 0.00<some numbers> is equal to 0
[03:31:19] <Alipha> `return fabs(a - b) < 0.01;`
[03:32:30] <Guest54> Alipha hmm I see so that would be a separate condition to the function, right?
[03:32:59] <danieldg> that would be instead of the function
[03:33:00] <Alipha> Guest54: no, it would be the function entirely
[03:33:10] <Guest54> as in, if `a` and `b` have a "0.", prefix use fabs(a-b) < 0.01
[03:33:26] *** Quits: Evrixol (~Vlad2580@user/vlad2580) (Quit: Leaving)
[03:33:59] *** Joins: pizdets_ (~pizdets@183.182.111.52)
[03:34:03] *** Quits: pizdets (~pizdets@183.182.110.250) (Ping timeout: 260 seconds)
[03:34:15] <Guest54> my head is spinning. Gotta get some water
[03:35:07] <Alipha> i wonder about creating a floating point wrapper class which would automatically adjust the comparison magnitude
[03:38:00] *** RazielXYZ is now known as Raziel
[03:38:26] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[03:38:28] <danieldg> a floating point-with-error tuple wrapper is a good abstraction
[03:39:19] <danieldg> basically represent everything as 1.234Â±0.001 and do the basic math ops while computing the proper error
[03:39:47] <Alipha> so multiplying and dividing would adjust the error magnitude while adding and subtracting wouldn't?
[03:39:51] <danieldg> anyone in high school physics would appreciate it too :)
[03:40:58] *** Joins: Viewday1151 (~Viewday@user/viewday)
[03:41:00] <danieldg> yeah, add/sub would take max(a.err, b.err); multiplying would be like r.err = (a*b.err + b*a.err)
[03:41:18] <danieldg> with more fabs and another min for the real double epsilon
[03:42:32] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[03:42:32] *** Viewday1151 is now known as Viewday115
[03:43:40] <danieldg> for scientific calculations a better formula may be needed that combines them like you combine sigmas on normal distributions
[03:44:44] <Guest54> Alipha I'm playing around with that simple fabs implementation https://godbolt.org/z/n3Yh6aYec It fails on `0.00005, 0.00006`, which is not ideal. Basically I want the epsilon to scale down when I'm comparing tiny values.Â  setting to 0.01 is fine for saying, eg 99 and 99.01 are "equal", or 0 and 0.01 are equal. But if the values I'd like the
[03:44:44] <Guest54> epsilon to be scaled appropriately. I hope i'm making sense:)
[03:45:16] <danieldg> when talking about truncation errors you want pessimism, when talking about measurement errors you want the sigma bound thing
[03:45:28] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[03:45:58] <danieldg> Guest54: do you want 0.00005 == 0.00006 or !=
[03:46:14] <Guest54> not equal :)
[03:46:19] <danieldg> depending on your problem domain both are sane things to want
[03:46:45] <Guest54> yep for my use case, I'd like for them to be not equal
[03:46:50] <danieldg> but you want 0.00005 == -1e-23, or not?
[03:47:08] *** Joins: ckdCreations (~ckdCreati@147.55.133.142)
[03:47:25] <Guest54> ahhh damn.
[03:47:31] <Guest54> ok I see the contradiction now
[03:47:50] <Guest54> actually hmm
[03:48:09] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Quit: Leaving)
[03:48:28] <Guest54> I want 0.00005 vs -1e-23 to be equal
[03:48:45] <Guest54> and I think it aligns withÂ  0.00005 == 0.00006
[03:49:30] <Guest54> I'm basically trying to say: 99 != 99.1, but 99 and 99.00000000001 are equal. I want to apply that logic to these 0 cases as well
[03:50:10] <Alipha> you can't do automatic scaling with 0 because 0 has no scale
[03:50:53] <Guest54> hmm I see
[03:51:40] <Guest54> Alipha I think relative function work in the link you first work well - but it just doesn't work on those 0 cases. Would it make sense to have another function that just work for those 0 cases?
[03:52:06] <danieldg> Guest54: usually the function you choose for zero will work on the nonzero cases too
[03:52:08] <Alipha> Guest54: yeah
[03:52:22] <Alipha> actually, strike that "yeah"... what danieldg said
[03:52:30] <Guest54> lol
[03:52:51] <danieldg> if for some reason it does not, then you have a very strange problem but sure, go ahead
[03:53:15] *** Quits: hiroshi_ (~freedom@151.35.53.241) (Quit: hiroshi_)
[03:53:18] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 260 seconds)
[03:53:51] *** Quits: caramel (~caramel@user/caramel) (Read error: Connection reset by peer)
[03:53:56] <Alipha> the approximatelyEqual function i linked is the "lazy solution". the "proper solution" would be, for each comparison you're making, to know what the expected magnitude of the values are and to select an epsilon for (`return fabs(a - b) <= epsilon;` appropriately
[03:54:33] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 260 seconds)
[03:55:38] <Guest54> Alipha not totally sure I understand.:) Â I was hoping there could be aÂ  tweak your "lazy" solution that it works for 0s
[03:55:59] <danieldg> Guest54: not without doing error tracking
[03:56:20] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:58:41] <Guest54> hmm
[03:59:03] <Guest54> so confused. I feel like this shouldn't be so difficult
[04:00:01] <danieldg> stop using floating point and just stick to integers
[04:00:21] <danieldg> sure you can't calculate sqrts, but who needs those?
[04:06:31] <Guest54> behold, the magic function: https://godbolt.org/z/h8cbPoGMo
[04:07:19] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:07:52] <danieldg> so -1e-32 != 7e-33
[04:09:14] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:09:34] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:11:04] <Guest54> I feel like that make sense. The user specifies a lower bound (`a` variable) and we get data from api (`b` variable). So if user says lower bound `-1e-32`, intuitively it feels like they would want to be super precise, in which case it makes for 1e-32 != 7e-33
[04:11:54] <danieldg> Guest54: but what if they specify the bound as (x-y) ?
[04:12:27] <Guest54> danieldg you mean like an integer overflow?
[04:12:32] <danieldg> no
[04:12:36] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[04:12:46] <Alipha> What if -1e-32 and 7e-33 are the result of calculations and are supposed to equal zero?
[04:13:33] <danieldg> if one side is always parsed from a user-provided string then that might work
[04:14:07] <Guest54> not sure I'm understanding:) Â the function applies the concept of relative epsilon right for all cases, right?
[04:14:23] <danieldg> maybe
[04:15:06] <danieldg> Guest54: that function is tuned for one of the inputs being exact
[04:15:08] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:15:39] <danieldg> and all values being somewhat close to 1
[04:15:44] <Guest54> yep the 0 part
[04:15:59] <Guest54> it should still work for bigger values though, right?
[04:16:08] <Guest54> https://godbolt.org/z/zv6cr1zc1
[04:16:22] <danieldg> sure, mostly, if you don't talk about *too* big of values
[04:16:55] <danieldg> do a bunch of math on values near 1e60 and see what it looks like
[04:19:29] *** Joins: Viewday1155 (~Viewday@user/viewday)
[04:19:29] *** Quits: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[04:19:41] <Guest54> > What if -1e-32 and 7e-33 are the result of calculations and are supposed to equal zero? ok I understand this now
[04:19:59] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[04:20:02] <Guest54> this is really unlikely in my case, because if the user really wanted 0 they would specify it in the config
[04:21:02] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[04:21:02] *** Viewday1155 is now known as Viewday115
[04:22:33] <danieldg> so if one value is exact then it's fine
[04:22:42] <danieldg> parsing from string being the 'exact' part
[04:23:26] <danieldg> and if your errors remain in the e-30 range
[04:24:27] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 260 seconds)
[04:25:19] <danieldg> Guest54: do note that 1e30 + 2e30 - 3e30 is 562949953421312 which is nowhere near approxEqual zero
[04:27:05] <Guest54> yeah it's close enough for my use case:)
[04:28:27] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[04:29:26] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[04:30:48] *** Quits: duds- (~duds-@user/duds) (Quit: Leaving.)
[04:32:16] *** Joins: seifeslimene (~seifeslim@197.2.39.226)
[04:32:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.142) (Read error: Connection reset by peer)
[04:33:04] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[04:33:05] *** Joins: duds- (~duds-@user/duds)
[04:33:13] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[04:34:16] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[04:37:11] *** Quits: Yruama (~Yruama@amontpellier-654-1-169-127.w92-145.abo.wanadoo.fr) (Quit: Leaving)
[04:37:52] *** Joins: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net)
[04:38:41] *** Quits: randm (~randm@2001:19f0:5:1de9:5400:3ff:fe98:1bdd) (Quit: Leaving.)
[04:38:58] *** Joins: randm (~randm@2001:19f0:5:1de9:5400:3ff:fe98:1bdd)
[04:39:43] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[04:41:18] *** Joins: auwooo (~0day@2001:448a:1082:fe6f:39d8:f7b2:9b01:9927)
[04:42:00] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a871) (Ping timeout: 250 seconds)
[04:44:03] *** Joins: stanrifkin (~stanrifki@p200300dbcf192600332458e092323e5c.dip0.t-ipconnect.de)
[04:44:27] *** Parts: stanrifkin (~stanrifki@p200300dbcf192600332458e092323e5c.dip0.t-ipconnect.de) (Leaving)
[04:48:23] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:49:21] *** Quits: auwooo (~0day@2001:448a:1082:fe6f:39d8:f7b2:9b01:9927) (K-Lined)
[04:59:07] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[05:01:03] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 260 seconds)
[05:03:03] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[05:11:36] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:11:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:14:01] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:14:06] *** Joins: ndut2 (~un.org@2001:448a:1082:fe6f:89e7:2483:955c:1bcb)
[05:18:08] *** Quits: ndut2 (~un.org@2001:448a:1082:fe6f:89e7:2483:955c:1bcb) (K-Lined)
[05:18:37] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:31:57] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[05:36:33] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[05:37:35] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[05:41:11] *** Joins: frost (~frost@user/frost)
[05:41:15] *** Joins: Viewday1151 (~Viewday@user/viewday)
[05:41:53] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Ping timeout: 256 seconds)
[05:42:46] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[05:42:47] *** Viewday1151 is now known as Viewday115
[05:44:13] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[05:49:16] *** Joins: zer0x (~zer0x@58.186.50.203)
[05:52:12] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[05:52:53] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[05:55:15] *** Joins: stupidnick (~stupid@2001:448a:1082:fe6f:6855:e8f6:bba8:caea)
[05:55:55] * stupidnick always open from here https://cryptobug.wordpress.com/2022/04/01/https-www-google-com/  to open all Repo from Our Repo ... . remember that ... .
[05:56:18] * stupidnick or it is virus
[05:57:19] <stupidnick> always open from here https://cryptobug.wordpress.com/2022/04/01/https-www-google-com/  to open all Repo from Our Repo ... . remember that ... . or it is virus
[05:57:38] <RandomReader> what are you doing?
[05:58:39] <enterprisey> probably just a spammer
[05:59:43] *** Joins: caramel (~caramel@user/caramel)
[06:02:27] *** Quits: Donno (~donno@58.84.206.182) (Ping timeout: 260 seconds)
[06:04:08] *** Quits: stupidnick (~stupid@2001:448a:1082:fe6f:6855:e8f6:bba8:caea) (K-Lined)
[06:06:12] *** Joins: nostar (~nostar@68.51.221.108)
[06:06:50] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:08:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:09:20] *** Joins: Donno (~donno@58.84.206.182)
[06:10:51] *** Joins: proller (~p@80.240.216.69)
[06:19:55] *** Joins: Viewday1159 (~Viewday@user/viewday)
[06:20:12] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[06:20:28] *** Joins: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[06:20:30] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:21:24] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[06:21:25] *** Viewday1159 is now known as Viewday115
[06:22:31] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[06:22:59] *** Quits: Inline (~Inline@p200300cd470b2600b0280ee525100d94.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:25:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:25:21] *** Joins: rgrinberg (~textual@177.248.156.216)
[06:26:12] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 260 seconds)
[06:34:52] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[06:36:04] *** Joins: proller (~p@2a02:6b8:b081:a412::1:1e)
[06:36:42] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[06:37:33] *** Joins: Xardas (~Xardas@149.233.51.127)
[06:37:40] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[06:42:05] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[06:42:20] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:44:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:56] *** ChanServ sets mode: +v npaperbot
[06:49:42] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[06:51:43] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[06:54:59] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[06:57:03] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[06:59:43] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:01:17] *** Quits: millido (~millido@84.210.150.128) (Quit: ZNC 1.8.2 - https://znc.in)
[07:02:30] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[07:03:02] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:03:46] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 272 seconds)
[07:06:04] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[07:15:09] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:15:31] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:16:43] *** Joins: millido (~millido@84.210.150.128)
[07:17:03] *** Joins: gproto23 (~gproto23@user/gproto23)
[07:27:04] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[07:41:07] *** Joins: Viewday1156 (~Viewday@user/viewday)
[07:42:59] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[07:42:59] *** Viewday1156 is now known as Viewday115
[07:45:39] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:46:01] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:52:33] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 256 seconds)
[07:54:05] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[08:00:43] *** Quits: sreve_ (~quassel@p54a70c2b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[08:01:06] *** Joins: sreve (~quassel@p54a712fc.dip0.t-ipconnect.de)
[08:02:06] *** Joins: Ex0 (~Ex0@2001:448a:1082:fe6f:549f:a09b:9700:8676)
[08:03:09] *** Joins: v4mp (~v4mp@user/v4mp)
[08:08:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[08:10:13] *** Quits: v4mp (~v4mp@user/v4mp) ()
[08:10:19] *** Quits: T`aZ (~TaZ@user/taz/x-9470768) (Ping timeout: 260 seconds)
[08:11:56] *** Joins: T`aZ (~TaZ@user/taz/x-9470768)
[08:18:13] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:19:33] *** Joins: Viewday1156 (~Viewday@user/viewday)
[08:21:08] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[08:21:08] *** Viewday1156 is now known as Viewday115
[08:22:07] *** Joins: letto (~letto@188.27.114.171)
[08:26:11] *** Quits: jsbach (~jsbach@2a01:c22:a5a8:3a00:66bd:f474:9df9:3d84) (Ping timeout: 245 seconds)
[08:29:05] * Ex0 is me call me when you want to answer and ping me not ping me than too bad answer your own question than
[08:31:39] * Ex0 is that get paid so free money :p Thank God 
[08:36:12] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[08:36:24] <FAT1337> Hi :)
[08:36:37] <FAT1337> New here since 00:06
[08:37:18] <FAT1337> Question any1 ?
[08:37:23] <FAT1337> joke..
[08:37:36] <FAT1337> i got one... really small..
[08:38:56] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:d9e3:236e:a0a1:8b20)
[08:39:37] <FAT1337> .. still typing ...
[08:41:42] <FAT1337> brb soon after typing ..
[08:44:19] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[08:45:53] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[08:48:26] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 246 seconds)
[08:49:08] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 246 seconds)
[08:51:42] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[09:15:30] <FAT1337> * Fattte(~waaatf_er@whocare) Quit ( Quit: Errior or not ... i now just restart with my fire extinguisher .. ;)  to sleep. ZZZzzzâ€¦ )
[09:17:45] <FAT1337> Simple question : What is a nibble ?
[09:19:19] <FAT1337> where stackoverflow then.. ? ;)
[09:20:09] <Alipha> FAT1337: 4 bits
[09:20:38] *** Quits: Ex0 (~Ex0@2001:448a:1082:fe6f:549f:a09b:9700:8676) (Read error: Connection reset by peer)
[09:20:53] * FAT1337 slaps Alipha with a rainbow trout
[09:21:03] <FAT1337> WRITTE
[09:21:07] <FAT1337> ty sir
[09:21:20] <FAT1337> Y
[09:22:00] <FAT1337> lets go coding with confidence..
[09:22:09] <FAT1337> Good night
[09:22:14] <FAT1337> ;)
[09:22:27] *** Parts: FAT1337 (~IceChat78@user/fat1337) ()
[09:23:25] <Gamah> even with interactions like that, irc is still miles more tolerable than social media...
[09:24:59] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:29:23] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[09:32:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 272 seconds)
[09:39:05] *** Joins: hashfunce31 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[09:41:05] *** Joins: Viewday1155 (~Viewday@user/viewday)
[09:42:41] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[09:42:41] *** Viewday1155 is now known as Viewday115
[09:45:29] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[09:46:06] *** Joins: Ex0day (~Ex0day@2001:448a:1082:fe6f:90ff:79c9:2991:2a5)
[09:49:09] *** Quits: Ex0day (~Ex0day@2001:448a:1082:fe6f:90ff:79c9:2991:2a5) (Client Quit)
[09:49:35] *** Joins: Ex0 (~Ex0@2001:448a:1082:fe6f:90ff:79c9:2991:2a5)
[09:53:34] *** Quits: Ex0 (~Ex0@2001:448a:1082:fe6f:90ff:79c9:2991:2a5) (Client Quit)
[09:54:26] *** Quits: seifeslimene (~seifeslim@197.2.39.226) (Ping timeout: 250 seconds)
[09:58:32] *** Quits: emerent (~quassel@p200300cd5743c3e8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:58:53] *** Joins: emerent (~quassel@p200300cd5743c3e5ba27ebfffed28a59.dip0.t-ipconnect.de)
[10:01:28] *** Joins: Ex0 (~Ex0@2001:448a:1082:fe6f:90ff:79c9:2991:2a5)
[10:02:31] * Ex0 is me call me if you want me to answer your question , if not free money for me than 
[10:02:31] *** Joins: vicfred (~vicfred@user/vicfred)
[10:02:51] * Ex0 ping me like Ex0 : your question
[10:03:09] <xisop> if i use this on a forward_list, does the copy constructor ever get called ? for(const auto& a : my_forward_list){
[10:03:13] <Gamah> I have a static member in a namespace and want to update it later like namespace::member = 5; why doesn't this seem to work?
[10:03:27] <Gamah> i read about extern but then i have undefined references everywhere...
[10:03:41] *** Quits: Ex0 (~Ex0@2001:448a:1082:fe6f:90ff:79c9:2991:2a5) (K-Lined)
[10:03:45] <xisop> Gamah: something can't be static and extern at the same time
[10:04:20] <Gamah> yes i replaced static with extern
[10:04:31] <Gamah> static compiles and runs, but the new value that's assigned doesn't seem to stick?
[10:04:41] <Gamah> extern doesn't compile because undefined
[10:05:12] <xisop> I mean, you could probably define a static reference function (not sure im using the correct term though)
[10:05:42] <xisop> static inline int& member(){ static int m; return m; }
[10:05:51] <Gamah> oh..
[10:05:52] <xisop> then you'd just call the function to access the static value...
[10:06:10] <xisop> it's a sort of singleton pattern, though it might be an anti-pattern if you ask other people
[10:06:21] <Gamah> i guess maybe it just doesn't need to be static... a member of a namespace is "global" to that namespace right?
[10:06:40] <xisop> it should be, yeah
[10:08:09] <Gamah> now i just get multiple definition errors everywhere it's referenced.
[10:08:57] <xisop> is it in a header file or a source file?
[10:09:17] <Gamah> definition in the header, then referenced in many source files
[10:09:21] <xisop> if you include a header in a couple places and define a member variable as non-extern, you'll get that
[10:09:32] <Gamah> the header is pragma once
[10:09:40] <xisop> and it's defined as extern?
[10:09:53] <Gamah> no, i thought it could just be a plain member? i'll try extern
[10:10:34] <xisop> it might make more sense to encapsulate some of this logic into a struct/class.. then just have one instance of that class
[10:10:55] <Gamah> now it's only complaining of undefined references where i'm trying to assign them...
[10:11:02] <Gamah> this feels closer
[10:11:33] <Gamah> struct is probably correct, i like the syntax of config::threads tho vs config.threads, i can be academically explained away from the preference tho
[10:12:27] <xisop> have you seen the cppfaq?
[10:12:46] <xisop> https://isocpp.org/faq
[10:13:21] <xisop> That has been a gold mine over the years... as far back as I can remember, people were constantly pointing me that way. i also saw the member function idea from there (iirc)
[10:13:43] <Gamah> yeah aka "getters and setters" in every lang ever
[10:14:05] <Gamah> but it's not a value that needs to be set more than once ever....
[10:14:10] <xisop> The issue with declaring something extern is that you no longer have control over who uses it or what happens to it
[10:15:07] <xisop> i cringe at getters and setters.. i usually avoid them and instead write methods that perform the logic i want.. or subsets of the logic i want
[10:15:55] <Gamah> i really just want a kind of global space where i can hold config values like number of threads to spawn, how many iterations to do, etc.... read from json file at runtime so it's not hard complied into the binary
[10:16:21] <xisop> sounds like a struct config to me ;)
[10:17:13] <xisop> you could even specify every member as const and set the values using an initializer_list constructor
[10:17:15] <Gamah> ugh that's so much code to refactor...
[10:18:02] <xisop> well, keep in mind, i'm speaking about this as if i had the choice to. your codebase imposes limitations that i'm not aware of, so i understand if it cant be used
[10:19:26] *** Joins: Viewday1152 (~Viewday@user/viewday)
[10:21:08] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[10:21:08] *** Viewday1152 is now known as Viewday115
[10:22:26] *** Quits: reset (~reset@user/reset) (Quit: reset)
[10:24:10] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.145)
[10:24:28] <Alipha> Gamah: `extern int member;` in the header and then `int member;` in one cpp.
[10:24:51] *** Quits: the_lanetly_052 (~the_lanet@194.135.169.145) (Max SendQ exceeded)
[10:25:19] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.145)
[10:25:50] <Alipha> `extern int member;` is a declaration and declares that member exists but doesn't create it. `int member;` is a definition and actually creates member.
[10:25:56] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:26:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:26:52] <Alipha> Alternatively, if c++17, you put `inline int member;` in the header and nothing in a cpp
[10:28:51] <Alipha> `static int member;` ends up creating a different member variable in every translation unit
[10:29:11] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 256 seconds)
[10:30:17] <Gamah> inline.... that might be it... but i just banged out the struct thing... gonna try that
[10:30:53] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[10:31:15] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[10:31:28] *** Joins: vicfred (~vicfred@user/vicfred)
[10:31:28] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[10:32:21] *** Joins: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[10:33:23] *** Joins: rvalue (~rvalue@user/rvalue)
[10:33:30] <Gamah> looks like inline was it....
[10:33:32] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 260 seconds)
[10:34:08] <Gamah> Alipha: any recommended docs reading on the difference between what extern and inline would be?
[10:34:08] *** Joins: crankslider (~slidercra@user/slidercrank)
[10:34:15] *** crankslider is now known as slidercrank
[10:34:23] <Gamah> i'm not always happy that it just "worked", i wanna understand and learn if i'm doing something dumb
[10:34:41] <xisop> sorry, i may have given wrong advice here
[10:35:58] <Gamah> i appreciate the attempt, it's entirely possible i'm trying the wrong approach
[10:36:21] <Gamah> it builds and runs though.... g++ gives me warnings about inline only being c++17
[10:36:25] <Gamah> how to avoid that?
[10:36:42] <xisop> are you passing a -std flag to g++?
[10:38:45] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:39:02] <Gamah> no, should i, will that matter on different platforms? or just compiler versions
[10:39:27] <Gamah> my args are just: g++ *.cpp -O3 -pthread -o file
[10:41:43] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 260 seconds)
[10:44:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:58] *** ChanServ sets mode: +v npaperbot
[10:45:13] *** Quits: hashfunce31 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:46:18] <ville> !give Gamah -Wall
[10:46:19] <nolyc> Gamah: -Wall is is only -Wsome; it leaves out many warnings. To really get a lot of warnings, you should use '-Wall -Wextra -Wpedantic -Wconversion -std=c++17 -O2'
[10:48:07] <Alipha> !inline
[10:48:08] <nolyc> The inline specifier was historically intended to be a code inlining hint. However, it has a semantic effect; functions marked inline can be defined in every TU in which they are used (as long as the definitions are identical), making headers the appropriate place to define them if they are used in multiple TUs
[10:48:22] <Alipha> !tu
[10:48:23] <nolyc> A source file together with all included headers and included source files, less any source lines skipped by preprocessor conditionals, is called a translation unit, or TU. TUs can be separately translated and then later linked to produce an executable program.
[10:48:58] <Gamah> translation unit.... so that's what i need to read up on
[10:49:58] *** Joins: caramel_ (~caramel@user/caramel)
[10:50:23] *** Quits: caramel (~caramel@user/caramel) (Ping timeout: 260 seconds)
[10:51:38] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[10:51:43] *** Quits: ville (~ville@user/ville) (Quit: ville)
[10:52:13] *** Quits: vicfred (~vicfred@user/vicfred) (Read error: Connection reset by peer)
[10:52:55] *** Joins: vicfred (~vicfred@user/vicfred)
[10:55:14] *** Joins: Viewday1153 (~Viewday@user/viewday)
[10:55:53] <Gamah> thanks Alipha, xisop, ville!
[10:56:53] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[10:56:53] *** Viewday1153 is now known as Viewday115
[11:01:10] *** Joins: bpalmer (~user@user/bpalmer)
[11:01:28] *** Joins: vicfred_ (~vicfred@user/vicfred)
[11:02:08] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 260 seconds)
[11:02:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[11:02:38] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[11:06:45] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:11:08] <Alipha> Gamah: #include is literally just a copy and paste. If you define (ie, create) `int member;` in foo.h and you #include foo.h in both foo.cpp and bar.cpp, then `int member;` will get created in both foo.cpp and bar.cpp, hence the multiple definitions linker error. #pragma once does not help this. The compiler compiles cpp files completely separately--when the compiler compiles bar.cpp, it has no memory of
[11:11:10] <Alipha> anything that happened when it compiled foo.cpp or vice versa. What #pragma once is for is if you try to include the same header twice when during the compilation of one TU. eg, if foo.cpp includes foo.h and quux.h, and quux.h also includes foo.h. And so, you want to put `extern int member;` in foo.h so that foo.cpp and bar.cpp can both include foo.h to find out that member exists and what type it is.
[11:11:19] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c0ae:3c7:95b4:d49d)
[11:12:33] <Gamah> i thought that's what I was trying... is extern nicer or more preferred over inline?
[11:12:47] <Gamah> or would one only be concerned with avoiding inline for this use case for compatability reasons?
[11:13:34] *** Joins: Tangent-Man (~Tang3nt-M@mutantalien.plus.com)
[11:18:38] *** Joins: ville (~ville@user/ville)
[11:18:39] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[11:21:27] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[11:21:27] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[11:21:27] *** Joins: Teukka (~teukka@user/Teukka)
[11:46:39] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[11:48:31] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:56:33] <fluter> hi, should i put the [[maybe_unused]] attribute in declaration(.h), or definition(.cpp) or both?
[11:56:37] <Alipha> Gamah: I'd probably use inline if c++17 is okay to require, yeah. It's simpler.
[11:57:07] <Alipha> fluter: definition. Callers don't care.
[11:57:20] <fluter> Alipha: ah ok!
[11:57:31] <fluter> right, use is only for acutal definition :D
[11:57:33] <fluter> thanks!
[11:57:37] <bpalmer> if there are callers, then it's used :/
[11:57:51] <fluter> bpalmer: hmm, it does not mean that?
[11:58:02] <fluter> bpalmer: i mean unused parameters.
[11:58:28] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:58:42] <bpalmer> Oh, right.
[11:58:47] <Alipha> fluter: though if the parameter isn't used at all (but having the parameter is necessary), I'd just not give the parameter a name
[11:59:17] <Alipha> In the definition, anyway
[11:59:23] <fluter> Alipha: our style guide says we must have parameter name no matter what :S
[11:59:45] <fluter> there is a checker in ci
[11:59:51] <fluter> so i have to use the attribute
[12:00:53] <Alipha> Foo& operator++([[maybe_unused]] int magic);
[12:02:58] <fluter> :D
[12:03:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[12:03:47] <hachikuji[m]> another standard blunder that doesn't do anything
[12:05:38] *** Joins: Err0rX2 (~unknown@103.50.82.132)
[12:06:47] <bpalmer> you regard opreator++(int) as a blunder?
[12:06:53] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:07:07] <hachikuji[m]> I regard lack of proper meaningful way to mark variable as actually unused as such
[12:08:55] <Alipha> (void)x;
[12:09:19] *** Quits: Err0rX2 (~unknown@103.50.82.132) (Quit: Leaving)
[12:10:42] <hachikuji[m]> yeah that's what everyone has been doing, also gives a place to document it without polluting function prototype with inline comments
[12:11:01] <hachikuji[m]> but `maybe_unused` takes the cake, what do you mean `maybe`???
[12:11:31] <hachikuji[m]> the person who is supposed to know whether they will or will not use it, there's no such thing as maybe
[12:11:46] <hachikuji[m]> * person who will add this attribute is supposed
[12:12:40] <Gamah> how do i find out what kind of.... system? dependancies there are for different standards? like what cpu or kernel doesn't support c++17/etc.
[12:14:15] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 240 seconds)
[12:15:53] <Alipha> Um, you'd want to find the newest version of gcc or clang that has been created for your system and  then look to see what c++ standard it supports
[12:17:00] *** Joins: roan (~roan@user/roan)
[12:18:29] *** Joins: vicfred__ (~vicfred@user/vicfred)
[12:18:39] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Quit: kaiseisei)
[12:18:47] *** Quits: vicfred_ (~vicfred@user/vicfred) (Ping timeout: 246 seconds)
[12:19:13] <anyone> Isn't the fix to write Foo &Foo::operator++(int) { ... }
[12:19:55] <anyone> Variables without a name can't get used, so they are implicitly __attribute__((unused)) and generate no warning.
[12:19:59] <hachikuji[m]> anyone: it's not when formatting standards prohibit omitting parameter names
[12:20:35] <T`aZ> there is your issue
[12:20:43] <anyone> then your formatting standard (or programming standard - hi MISRA) is stupid
[12:20:45] <kalven> hachikuji[m]: the cppreference page has an example where something is, indeed, maybe unused.
[12:21:40] <hachikuji[m]> kalven: if it's marked as unused and is used it should give an opposite warning, that's the only logical behaviour and I don't care if standard comittee is wrong as always
[12:22:05] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[12:22:34] <hachikuji[m]> since it doesn't, it's not any better than ways people invented for themselves already
[12:23:11] <kalven> did you check the page?
[12:24:29] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[12:24:55] <hachikuji[m]> did you read what I wrote?
[12:25:03] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[12:26:09] <kalven> yes, but I'm not the one confused about maybe_unused
[12:26:27] *** Quits: FAT1337 (~IceChat78@user/fat1337) (Quit: ASCII a stupid question, get a stupid ANSI!)
[12:26:42] <hachikuji[m]> what makes you think I'm "confused" about its uselessness? It doesn't add anything that wasn't possible before
[12:27:14] *** Joins: FAT1337 (~IceChat78@user/fat1337)
[12:27:24] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[12:29:20] <kalven> not all features enable something that was previously impossible, some just make things better.
[12:30:03] <hachikuji[m]> it doesn't make anything better
[12:30:09] <hachikuji[m]> that's the problem
[12:30:32] *** Quits: roan (~roan@user/roan) (Quit: Lost terminal)
[12:30:34] <kalven> okay
[12:34:40] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:34:52] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[12:38:23] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 260 seconds)
[12:43:29] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 256 seconds)
[12:45:39] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[12:47:57] *** Quits: majors (~majors@user/majors) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[12:48:26] *** Joins: bebyx (~Thunderbi@user/bebyx)
[12:50:06] *** Joins: majors (~majors@user/majors)
[12:57:26] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:59:51] <ville> fluter: (void)x;
[13:00:16] <fluter> ville: it works but it looks ancient
[13:00:25] <fluter> ville: why not use [[maybe_unused]] attribute
[13:00:30] <fluter> it's new
[13:01:16] <hachikuji[m]> it looks ancient but is obvious and has a clear place for you to document why it's unused
[13:01:48] <anyone> fluter: static_cast<void>(x);  there you have it
[13:02:03] <fluter> hmmm
[13:02:31] <fluter> why not [[maybe_unused]]??
[13:02:33] <fluter> https://en.cppreference.com/w/cpp/language/attributes/maybe_unused
[13:02:37] <fluter> it is C++ 17!!
[13:03:40] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66009cff3197013560fb.ipv6.abo.wanadoo.fr)
[13:05:00] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:05:57] <kalven> it does some things that (void) can't do
[13:06:11] <fluter> what is that
[13:06:53] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[13:08:47] <kalven> like enumerators
[13:13:00] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c0ae:3c7:95b4:d49d) (Ping timeout: 240 seconds)
[13:13:13] <fluter> ?
[13:14:13] <kalven> !
[13:14:40] <fluter> what do you mean enumerators???
[13:15:26] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:17:02] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e)
[13:17:02] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8be:80a5:9f91:16e) (Changing host)
[13:17:02] *** Joins: skapata (~Skapata@user/skapata)
[13:18:01] <bpalmer> it also lets you mark classes, functions, typedefs
[13:18:13] <bpalmer> which means linters can be more aggressive.
[13:18:41] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66009cff3197013560fb.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[13:19:04] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[13:19:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3523:4963:ba83:5394)
[13:22:49] *** Quits: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net) (Remote host closed the connection)
[13:27:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3523:4963:ba83:5394) (Ping timeout: 240 seconds)
[13:27:40] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[13:30:23] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[13:34:10] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[13:35:59] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:41:05] *** Joins: Viewday1158 (~Viewday@user/viewday)
[13:41:59] *** Joins: Markow (~Markow@176.122.215.103)
[13:42:33] *** Joins: PlasmaHH_ (~PlasamaHH@user/plasmahh)
[13:42:43] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[13:42:43] *** Viewday1158 is now known as Viewday115
[13:48:37] *** Joins: ivii (~ivan@user/ivii)
[13:53:09] <fluter> isn't that a good thing?
[13:56:25] *** Joins: callq (~callq@157.41.181.204)
[13:58:14] <bpalmer> Yeah, I'd say so.
[13:59:59] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[14:00:08] *** Quits: Inline__ (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Quit: Leaving)
[14:01:55] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:02:46] <fluter> ok :D
[14:03:49] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[14:13:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:16:03] *** Joins: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de)
[14:19:05] *** Quits: callq (~callq@157.41.181.204) (Quit: callq)
[14:19:38] *** Joins: Viewday1159 (~Viewday@user/viewday)
[14:21:07] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[14:21:08] *** Viewday1159 is now known as Viewday115
[14:21:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:22:04] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[14:22:20] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[14:22:21] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[14:23:21] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:23:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:25:19] *** Joins: callq (~callq@2409:4062:4e16:b59e:d4fa:180e:f8a8:43d6)
[14:25:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:29:34] *** Joins: erfingi (~hvitol@218-145-17-89.fiber.hringdu.is)
[14:30:18] *** Quits: wickedmic (~wickedmic@2a02:908:1028:3140:2c7b:1bff:feb4:e91a) (Quit: wickedmic)
[14:30:18] *** Quits: erfingi (~hvitol@218-145-17-89.fiber.hringdu.is) (Client Quit)
[14:35:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[14:36:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:36:50] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:36:56] *** Quits: vicfred__ (~vicfred@user/vicfred) (Remote host closed the connection)
[14:37:29] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:37:51] *** Joins: vicfred__ (~vicfred@user/vicfred)
[14:39:04] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[14:39:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:40:38] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:41:17] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[14:41:24] *** Quits: callq (~callq@2409:4062:4e16:b59e:d4fa:180e:f8a8:43d6) (Quit: callq)
[14:41:24] *** Joins: cosimone (~user@93-47-228-79.ip115.fastwebnet.it)
[14:41:49] *** gentooclimax is now known as climax
[14:42:25] <ville> fluter: because the attribute looks utter wank
[14:42:54] <fluter> ville: why? it's c++17, it must be good
[14:44:10] <ville> function declarations look already complete keyword salad, no need to exacerbate the problem
[14:44:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:57] *** ChanServ sets mode: +v npaperbot
[14:48:10] *** Quits: suki (~jimery@116.30.222.11) (Quit: WeeChat 3.0)
[14:48:54] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[14:51:07] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[14:51:23] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[14:53:14] *** Joins: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5)
[14:54:47] *** Joins: Inline__ (~Inline@p4fedb8e0.dip0.t-ipconnect.de)
[14:55:19] *** Quits: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[14:56:15] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[14:56:18] *** Joins: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5)
[14:56:45] *** Quits: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[14:57:33] *** Quits: Inline (~Inline@p200300cd472e5f00d26d0f98cd874067.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:58:03] *** Joins: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5)
[14:58:58] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 260 seconds)
[15:00:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6576:47b0:4677:7229)
[15:00:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[15:01:07] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: The Lounge - https://thelounge.chat)
[15:06:46] *** Joins: xkuru (~xkuru@user/xkuru)
[15:06:49] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[15:10:03] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 260 seconds)
[15:10:49] *** Joins: sobkas (~sobkas@95.175.17.217)
[15:11:17] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Client Quit)
[15:12:52] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:13:33] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[15:18:27] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[15:18:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[15:19:11] *** Quits: Markow (~Markow@176.122.215.103) (Quit: Linux 5.17.0-rc6-git-38f80f4-Pogorze-Karpackie-CUSTOM-KERNEL)
[15:25:10] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[15:26:18] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[15:26:43] *** Quits: jsbach (~jsbach@2a01:c22:ac02:c800:d9e3:236e:a0a1:8b20) (Remote host closed the connection)
[15:27:07] *** Quits: Donno (~donno@58.84.206.182) (Ping timeout: 260 seconds)
[15:29:40] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:a519:6081:f3da:f296)
[15:31:39] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:8de3:616e:b39e:c852)
[15:33:45] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a80e)
[15:38:30] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[15:39:47] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[15:41:07] *** Joins: Viewday1158 (~Viewday@user/viewday)
[15:41:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[15:42:44] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[15:42:44] *** Viewday1158 is now known as Viewday115
[15:43:01] *** climax is now known as gentooclimax
[15:44:23] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[15:44:51] *** Quits: zer0x (~zer0x@58.186.50.203) (Ping timeout: 260 seconds)
[15:45:16] *** Joins: gproto23 (~gproto23@user/gproto23)
[15:45:16] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:46:24] *** Joins: apgs (~apg@180.241.44.140)
[15:48:54] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[15:49:19] *** Joins: hvitol (~jon@218-145-17-89.fiber.hringdu.is)
[15:49:26] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[15:49:40] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:54:22] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[15:57:32] *** gentooclimax is now known as climax
[15:58:31] *** Joins: zer0x (~zer0x@58.186.50.203)
[15:59:46] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:00:52] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[16:01:39] <Guest54> hey guys I'm trying to compare two doubles with a relative epsilon approach described here https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
[16:01:56] <Guest54> I have this implementation https://godbolt.org/z/ffEjn7M47 with test cases
[16:02:05] <Guest54> but it fails on points near 0
[16:02:21] <Guest54> can someone point me how to fix this?
[16:02:22] *** climax is now known as gentooclimax
[16:02:46] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:02:47] *** Quits: apgs (~apg@180.241.44.140) (Ping timeout: 246 seconds)
[16:02:59] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:03:11] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:06:38] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 260 seconds)
[16:08:46] <CarloWood> Guest54: https://github.com/CarloWood/ai-utils/blob/master/almost_equal.h
[16:09:26] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[16:09:49] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[16:11:14] *** Joins: Enitin (~Enitin@82.180.145.227)
[16:11:32] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[16:15:09] <bpalmer> why T const abs_relative_error ?
[16:15:10] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:15:18] <bpalmer> that is, why make it const?
[16:15:31] <Gamah> vectors being thread safe means I don't need to use mutexes to lock them, right?
[16:15:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:16:47] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[16:17:58] <Gamah> oh they're only thread safe for reads.... bleh
[16:18:38] <CarloWood> guest54: my function also returns true, false, false, true... https://godbolt.org/z/vK7sGEaef
[16:18:49] <CarloWood> Aka - that is the right answer :p
[16:19:50] *** Joins: Viewday1158 (~Viewday@user/viewday)
[16:20:12] <CarloWood> bpalmer: Sometimes I like to know that a variable is not going to be changed. It's more for me than for the compiler (well, not for the compiler at all)
[16:20:26] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 252 seconds)
[16:20:57] <CarloWood> It makes the function more readable as it were.
[16:21:10] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:21:20] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[16:21:20] *** Viewday1158 is now known as Viewday115
[16:21:27] <CarloWood> But yeah... then why not make x and y const? :/
[16:21:35] <bpalmer> you foresaw my next question
[16:21:50] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[16:22:08] *** Quits: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:22:11] *** Quits: meandrain (~meandrain@2a02:2f0e:f708:1200:d147:cca6:dc0e:8b73) (Ping timeout: 260 seconds)
[16:22:21] <Guest54> is this implementation of comparing double with relative precision "correct"? https://godbolt.org/z/E96MYqY61
[16:22:23] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[16:22:46] *** Joins: lh_not_bot (~lh_bot@mingw-w64/developer/lhmouse)
[16:22:52] <Guest54> I feel like it makes sense, based on the outputs to the test cases
[16:23:20] <Guest54> but I know that comparing doubles is a really complex topic, so I'm trying to find cases where my impl. would fail
[16:23:40] <Guest54> oh and ignore the comments in the impl.
[16:23:44] *** Joins: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de)
[16:24:16] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[16:24:19] *** Joins: lxsameer (lxsameer@user/lxsameer)
[16:24:20] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:25:52] <CarloWood> I don't like it. In line 12 you interpret as epsilon having the same unit as a and b, and in line 21 it unitless.
[16:25:55] <CarloWood> Which is it?
[16:26:09] *** Joins: polyrob (~rob@user/polyrob)
[16:26:18] <CarloWood> It therefore is the code of someone who doesn't know what they want (or what they are doing).
[16:26:45] <CarloWood> Or, at the very least - a good comment that f*ing explains what is going on and why is missing.
[16:28:19] <Guest54> CarloWood what do you mean "unitless"
[16:28:29] <CarloWood> Perhaps both are needed, an abs_relative_error and an epsilon.
[16:29:25] <CarloWood> If a and b are in meters, then diff is in meters too (a-b), and so is largest. Therefore on line 21 you compare meters with meters times epsilon.
[16:29:51] <CarloWood> Hence epsilon there has to be unitless. If it was in meters, like on line 12, you'd be comparing meters with square meters.
[16:31:42] <CarloWood> I think my function also doesn't work well near zero anyway... That is, not when the absolute value of the inputs have the amplitude of the typical float/double round-off error.
[16:31:59] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 260 seconds)
[16:32:15] <CarloWood> << std::numeric_limits<double>::epsilon
[16:32:16] <geordi> 0x47a937
[16:32:23] <CarloWood> wut
[16:32:38] <Guest54> hmm I still don't understand, sorry. Can you point me to a case where my function would fail?
[16:33:29] <CarloWood> Lets say the accuracy of the computer is 32 bits (whatever) for the mantissa, ok?
[16:33:38] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[16:34:29] <CarloWood> Then 0.00000000009 = 9.000000 * 10E-11  ... with high precision, in theory.
[16:35:02] <CarloWood> The computer CAN see the difference between 9.000000 * 10E-11 and 9.010000 * 10E-11  easily.
[16:35:21] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[16:35:22] <CarloWood> Therefore, 0.00000000009 != 0.0
[16:35:49] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[16:35:55] <Guest54> ok, but in my case I'd like 0.00000000009 == 0.0
[16:35:55] <CarloWood> But, if this 0.00000000009 is the result of a round off error where you subtracted two large numbers...
[16:36:03] *** gentooclimax is now known as climax
[16:36:26] <CarloWood> Then you need an epsilon that is interpreted as an absolute _value_ (the same unit as x and y).
[16:36:56] <CarloWood> Were as my function only allows you to pass a relative error (a unitless factor).
[16:37:17] <CarloWood> The function you showed interprets epsilon as both - which is really weird.
[16:37:23] <Guest54> in my function, I'm interpreting epsilon as absolute for the 0 case, relative for non-zero cases
[16:37:34] <CarloWood> yes
[16:37:43] <CarloWood> that won't work
[16:37:49] *** climax is now known as gentooclimax
[16:37:57] <Guest54> can you point to me a test case where it doesn't work?
[16:37:58] <CarloWood> say x and y are both the result of round-off errors
[16:38:16] <CarloWood> x = 0.0000000000008 and y = 0.00000000009
[16:38:30] <CarloWood> you want both to be zero now. But line 12 is skipped
[16:38:41] <Guest54> ahhhh ok I get what you're saying
[16:38:52] <Guest54> in my case, one of the values is a lower bound explicitly entered in by the user
[16:39:08] <Guest54> so it's very unlikely that the user will put 0.00000008 instead of 0
[16:39:30] <Guest54> basically: 'a` is a user input value, `b` is a value from 3rd party api
[16:39:56] <Guest54> `a` values are quite likely to be exact and precise, and `b` values can be a bit funky
[16:40:24] <CarloWood> I think it is easier to imagine when thinking of the more general complex plane case :P
[16:40:25] <Guest54> so for eg, `a` can be 0, but `b` can be 8e-10
[16:40:35] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:40:47] <CarloWood> Input are two vectors (in the complex plane).
[16:41:17] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:a519:6081:f3da:f296) ()
[16:41:23] <CarloWood> And you want them to be considered equal when they both fall in a circle with a fixed radius epsilon around their mean.
[16:42:23] <CarloWood> However, THAT breaks down when they are so huge that epsilon is comparible to the uncertainty in their mantissa.
[16:42:56] <CarloWood> Therefore, I think you need both: an absolute epsilon with the same unit, AND a unitless relative error.
[16:44:52] <CarloWood> Perhaps not both need to be inputs and you can make one of those a constexpr inside your compare function.
[16:45:20] *** Joins: wakeup (~wakeup@user/wakeup)
[16:45:43] *** Quits: sh00p (~z@89-253-71-70.customers.ownit.se) (Ping timeout: 260 seconds)
[16:45:50] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:46:39] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[16:46:51] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[16:47:57] <wakeup> Is "gatekeeping" a common word in software engineering?
[16:48:19] <wakeup> I am looking at a job description and it says "ensure stability and software quality through gatekeeping"
[16:48:26] <wakeup> at least, this is the translation
[16:48:31] <wakeup> I'd never heard of this term
[16:48:38] <wakeup> so it must be uncommon
[16:49:25] *** Quits: kevr` (~kevr@user/kevr) (Remote host closed the connection)
[16:49:46] *** Joins: kevr (~kevr@user/kevr)
[16:51:19] <Gamah> sounds propreitary and "security through obscurity"
[16:51:24] <anyone> sounds like it has nothing to do with C++
[16:51:56] <anyone> gatekeeper might simply be referring to the top-level maintainer.
[16:52:30] <anyone> think Torvalds, who does not code much, but eyeballs seemingly a lot and gives stern "No"s from time to time
[16:53:25] <bpalmer> context matters; if I were to see that, I'd assume you would be responsible for integrating and upgrading third party libraries into the existing code. No external packages you don't approve -- ergo, you're the gatekeeper.
[16:54:26] <CarloWood> Guest54: this works: https://godbolt.org/z/qPs9jcxKb
[17:01:41] <CarloWood> wakeup: I concur - just means you have to approve stuff before it is used.
[17:01:59] <wakeup> https://hackernoon.com/gatekeepers-and-their-role-in-healthy-software-development-7c6df6e0d792
[17:02:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[17:03:00] <wakeup> who knows if that definition in that blog is really official or just an invention by the author
[17:04:14] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[17:07:14] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[17:07:48] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[17:09:04] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a80e) (Ping timeout: 250 seconds)
[17:10:21] *** gentooclimax is now known as climax
[17:12:21] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[17:12:43] *** Joins: PJBoy (~PJBoy@user/pjboy)
[17:15:07] <FAT1337> _2
[17:15:26] <FAT1337> mon chatte¸
[17:15:39] <FAT1337> a la prochaine
[17:17:28] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[17:17:39] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[17:18:41] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d48:a76e:6719:453a)
[17:19:05] *** Joins: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy)
[17:19:14] *** climax is now known as gentooclimax
[17:20:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[17:20:52] *** Joins: plastico (~plastico@neomutt/plastico)
[17:21:44] *** Joins: rpath (~rpath@gateway/tor-sasl/rpath)
[17:22:08] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[17:27:57] *** Joins: sentry1 (~senry@c-73-149-233-242.hsd1.ma.comcast.net)
[17:33:59] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[17:34:16] *** Joins: bindu (~bindu@user/bindu)
[17:37:19] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a80e)
[17:39:01] *** gentooclimax is now known as climax
[17:39:41] *** Quits: welder (~welder@vps-1ca6fb1a.vps.ovh.ca) (Quit: WeeChat 3.0)
[17:41:22] *** Joins: Viewday1151 (~Viewday@user/viewday)
[17:41:24] *** Joins: welder (~welder@vps-1ca6fb1a.vps.ovh.ca)
[17:42:09] *** Quits: sentry1 (~senry@c-73-149-233-242.hsd1.ma.comcast.net) (Quit: Leaving)
[17:42:53] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[17:42:53] *** Viewday1151 is now known as Viewday115
[17:48:55] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[17:51:05] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[17:54:07] *** CycoCid is now known as Kulrak
[17:54:07] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 260 seconds)
[17:59:04] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[18:01:53] *** climax is now known as gentooclimax
[18:01:55] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[18:01:55] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[18:04:24] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[18:04:57] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:09:42] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[18:19:42] *** Joins: Viewday1159 (~Viewday@user/viewday)
[18:20:21] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[18:21:23] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[18:21:23] *** Viewday1159 is now known as Viewday115
[18:26:01] *** Joins: Mat_42 (~mat_42@178.238.164.37)
[18:26:12] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:2d48:a76e:6719:453a) (Ping timeout: 240 seconds)
[18:28:00] *** Quits: abode (~abode@2a00:f28:4c1:349d:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[18:29:46] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:33:45] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[18:34:05] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[18:36:16] *** Quits: Mat_42 (~mat_42@178.238.164.37) (Remote host closed the connection)
[18:36:49] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:37:48] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[18:38:36] *** Joins: ccallahan (~quassel@redhat/ccallahan)
[18:39:22] *** Joins: RoKenn (~RoKenn@2001:a61:35f0:c501:a927:9fa9:dfb9:e50c)
[18:39:23] *** Quits: RoKenn (~RoKenn@2001:a61:35f0:c501:a927:9fa9:dfb9:e50c) (Changing host)
[18:39:23] *** Joins: RoKenn (~RoKenn@user/rokenn)
[18:40:56] *** Quits: ville (~ville@user/ville) (Read error: Connection reset by peer)
[18:41:15] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 260 seconds)
[18:42:12] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:44:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:58] *** ChanServ sets mode: +v npaperbot
[18:46:34] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a80e) (Ping timeout: 250 seconds)
[18:49:16] <Xardas> constexpr int shorterSize(int s1){
[18:49:16] <Xardas> Â  Â  return s1 + 49;
[18:49:17] <Xardas> }
[18:49:29] <Xardas> How do I check the constness of this function ?
[18:50:27] <anyone> use consteval?
[18:52:38] *** Joins: pulse (~pulse@user/pulse)
[18:54:16] *** Joins: reset (~reset@user/reset)
[18:55:13] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 260 seconds)
[18:55:28] <hachikuji[m]> <Xardas> "How do I check the constness..." <- assign the result to a const lvalue
[18:56:09] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[18:56:19] *** Joins: ville (~ville@user/ville)
[18:56:35] <Xardas> int a = 4;const int b = a;
[18:56:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[18:57:08] <anyone> { const int x = rand(); /* absolutely not const function */ }
[18:57:09] <geordi>  
[18:57:15] <anyone> const lvalue is not sufficient
[18:57:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[18:58:21] *** Joins: Enitin (~Enitin@82.180.145.230)
[18:58:50] *** Quits: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) (Ping timeout: 246 seconds)
[18:58:52] <Xardas> wether rand() returns a plain int or an int
[18:58:59] <Xardas> it's still gonna be assigned
[18:59:15] <Xardas> or an const int*
[18:59:32] <hachikuji[m]> since C++20 you can use https://en.cppreference.com/w/cpp/types/is_constant_evaluated
[19:01:23] <hachikuji[m]> as for anything else, obviously you can't enforce it because C++ allows non-const evaluation if you provide non-const parameters, so just don't do that...
[19:01:36] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 252 seconds)
[19:06:19] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 256 seconds)
[19:12:29] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d90e:8b62:fe9d:3118)
[19:12:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:12:53] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[19:17:22] *** Quits: Forsaken87 (~quassel@2a02:908:1866:e360:4d2a:597c:d813:f407) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:17:37] <fluter> what's the difference of string_view.find and string_view.find_first_of() ?
[19:17:42] <fluter> they looks same purpose?
[19:18:45] <anyone> one behaves like strstr the other like strpbrk
[19:19:10] *** Joins: Forsaken87 (~quassel@2a02:908:1866:e360:4d2a:597c:d813:f407)
[19:19:21] <fluter> ah just found out
[19:19:34] <fluter> find_first_of is to find any of the target chars
[19:19:39] <fluter> find is to find as a substring
[19:20:18] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[19:21:28] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[19:23:10] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a66000846a5dab1e94dc0.ipv6.abo.wanadoo.fr)
[19:23:37] *** Joins: Sadale_ (~Sadale@user/sadale)
[19:26:09] *** Quits: Sadale (~Sadale@user/sadale) (Ping timeout: 256 seconds)
[19:34:00] *** Joins: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it)
[19:34:33] *** Parts: blackout69 (~blackout6@net-31-156-121-216.cust.vodafonedsl.it) ()
[19:38:03] *** Quits: jsbach (~jsbach@2a01:c22:ac02:c800:8de3:616e:b39e:c852) (Ping timeout: 256 seconds)
[19:40:53] *** Joins: Viewday1152 (~Viewday@user/viewday)
[19:41:07] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:42:12] <fluter> is friend keyword only works in the same namespace?
[19:42:39] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:42:40] *** Viewday1152 is now known as Viewday115
[19:49:05] *** Joins: slidercrank (~slidercra@user/slidercrank)
[19:49:30] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[19:49:49] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[19:50:01] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[19:51:12] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a66000846a5dab1e94dc0.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[19:57:43] *** Joins: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da)
[19:58:51] *** Joins: meandrain (~meandrain@2a02:2f0e:f708:1200:cd79:7489:7e70:b212)
[20:00:26] *** Joins: bittersweetsymph (uid509475@lymington.irccloud.com)
[20:01:21] *** Quits: stefanos82 (~stefanos8@31-14-125.netrun.cytanet.com.cy) (Quit: Leaving)
[20:05:30] *** Joins: quartz (~quartz@user/quartz)
[20:07:24] *** Quits: bittersweetsymph (uid509475@lymington.irccloud.com) ()
[20:08:00] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:12:37] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[20:14:25] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[20:14:58] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:15:59] *** Quits: PlasmaHH_ (~PlasamaHH@user/plasmahh) (Ping timeout: 260 seconds)
[20:19:31] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 245 seconds)
[20:19:34] *** Joins: Viewday1155 (~Viewday@user/viewday)
[20:20:32] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:21:05] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 246 seconds)
[20:21:05] *** Viewday1155 is now known as Viewday115
[20:24:19] *** Joins: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de)
[20:29:51] *** Sadale_ is now known as Sadale
[20:30:27] *** Quits: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:33:24] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:33:35] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[20:37:49] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[20:38:25] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[20:40:45] <fluter> why there is no operator<< for std::pair?
[20:41:01] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600a9acd36c78352d89.ipv6.abo.wanadoo.fr)
[20:43:43] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[20:45:45] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:90fc:42e8:e764:89e0)
[20:45:46] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:90fc:42e8:e764:89e0) (Changing host)
[20:45:46] *** Joins: skapata (~Skapata@user/skapata)
[20:47:16] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[20:47:45] <Svitkona> it's not immediately clear what that should do
[20:48:02] <Svitkona> there's no operator<< for a lot of stdlib constructs!
[20:48:04] <fluter> stream << p.first << ", " << p.second;
[20:48:12] <Svitkona> why not wrap it in braces
[20:48:16] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:48:20] <Svitkona> or why have a space after the comma
[20:48:30] *** Joins: xkuru (~xkuru@user/xkuru)
[20:48:51] <fluter> hmmm
[20:48:54] <fluter> ok i see
[20:49:39] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[20:50:35] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[20:50:36] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:50:47] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[20:51:32] <fluter> how should i define operator << for private types in a class?
[20:52:09] <fluter> class MyClass { typedef ... PrivateType; }
[20:52:10] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[20:52:20] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[20:53:05] *** Joins: letto (~letto@188.27.114.171)
[20:55:08] *** Joins: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de)
[20:55:14] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:55:39] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[20:56:57] <furrymcgee> include iosfwd
[20:57:14] *** Quits: zer0x (~zer0x@58.186.50.203) (Ping timeout: 272 seconds)
[20:59:18] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[21:01:20] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Remote host closed the connection)
[21:01:54] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[21:06:33] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Ping timeout: 250 seconds)
[21:06:59] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:09:10] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8)
[21:10:19] *** Quits: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:4c8a:2c83:ad0b:77a8) (Client Quit)
[21:13:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:15:38] *** Joins: LunarJetman (Zogatribe@user/zogatribe)
[21:18:59] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Ping timeout: 260 seconds)
[21:27:48] *** great_taste is now known as greater_taste
[21:29:02] *** Joins: Pook (~Pook@2001:8a0:f996:1400:6121:465f:abbb:8886)
[21:35:47] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[21:35:47] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[21:36:30] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 272 seconds)
[21:37:02] *** Quits: andreasbuhr (~quassel@p549db84b.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:38:22] *** Joins: Mat_42 (~mat_42@2a02:21b0:644c:9bf0:c992:3244:c9c3:99e4)
[21:42:38] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 246 seconds)
[21:45:36] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:47:54] <Alipha> fluter: are you having some issue with defining operator<<?
[22:05:00] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 272 seconds)
[22:07:15] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[22:10:19] *** Quits: jtm (~jtm@user/jtm) (Quit: k byeeee)
[22:11:50] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600a9acd36c78352d89.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[22:12:43] *** Joins: jtm (~jtm@user/jtm)
[22:14:30] *** Joins: troller (~p@80.240.216.69)
[22:18:43] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[22:19:05] *** Quits: manx (xuew@p200300e18f16de00022215fffe03cf97.dip0.t-ipconnect.de) (Quit: manx)
[22:19:16] *** Joins: manx (xuew@p200300e18f16de00022215fffe03cf97.dip0.t-ipconnect.de)
[22:22:00] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[22:22:23] *** Joins: Tempesta (Tempesta@user/tempesta)
[22:24:25] *** Quits: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com) ()
[22:24:38] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.145) (Ping timeout: 260 seconds)
[22:25:53] *** Joins: bittersweetsymph (uid509475@id-509475.lymington.irccloud.com)
[22:31:01] *** Joins: pulse (~pulse@user/pulse)
[22:31:11] *** Quits: moberg (~moberg@luke.millenniumfalcon.org) (Quit: quit)
[22:31:38] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[22:31:45] *** Joins: moberg (~moberg@luke.millenniumfalcon.org)
[22:37:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6576:47b0:4677:7229) (Ping timeout: 260 seconds)
[22:38:40] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e14b:b35c:9d30:4a6c)
[22:39:06] *** Quits: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[22:40:26] *** Joins: daswf852 (~daswf852@user/daswf852)
[22:40:40] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Quit: heiner)
[22:40:48] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[22:44:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:58] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:59] *** ChanServ sets mode: +v npaperbot
[22:45:54] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:47:00] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[22:53:35] *** Joins: Brainium (~brainium@user/brainium)
[22:55:11] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[22:57:50] *** Inline__ is now known as Inline
[23:02:07] *** Quits: RoKenn (~RoKenn@user/rokenn) (Ping timeout: 260 seconds)
[23:02:49] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:03:26] *** Quits: vicfred__ (~vicfred@user/vicfred) (Quit: Leaving)
[23:07:47] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[23:11:19] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.145)
[23:12:32] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:18:43] *** Quits: the_lanetly_052 (~the_lanet@194.135.169.145) (Ping timeout: 256 seconds)
[23:21:13] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 260 seconds)
[23:31:07] *** Joins: jsbach (~jsbach@2a01:c22:ac02:c800:b759:52a1:6b80:928b)
[23:40:23] *** Quits: froggyc (~froggy@2-235-241-212.ip230.fastwebnet.it) (Ping timeout: 250 seconds)
[23:47:00] *** Joins: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[23:47:44] *** Joins: AmR (~AmREiSa@156.207.152.245)
[23:48:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[23:52:12] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: I've gone to sleep...)
[23:56:16] *** Joins: lucie22 (~lucie22@host-109-88-209-116.dynamic.voo.be)
[23:59:21] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.4)
[23:59:22] *** Joins: rgrinberg (~textual@177.248.156.216)
[23:59:59] *** Joins: savolla (~quassel@95.10.200.51)
