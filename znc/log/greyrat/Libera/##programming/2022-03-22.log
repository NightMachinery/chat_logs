[01:00:19] <juliaEnv> kee if you haven't extensively researched around each topic, you'll hit one unknown term/concept after another and you are also likely to miss the big picture and the foundations. However, let's try: http://swebokwiki.org (click anything in the table of contents). Then, if you are serious, never only read. When you read, download modern tools that are relevant for the chapture. For example, if you decide to read 1 - 
[01:00:19] <juliaEnv> Software Requirements, seriously consider registering at Atlassian to get a free JIRA account and then try Kanban or Scrum incl. requirements traceability, domain modeling in Confluence, etc. https://www.atlassian.com/software/jira  Each concept is only learned when you put your hands on a widely used tool in the industry (stay away from academic / open source tools that you won't be using on the job).
[01:01:10] <kee> ‚Ä¶ Jira.
[01:01:33] <juliaEnv> of course it's a problem to do requirements engineering in practice when you have to deal with JIRA
[01:01:38] <kee> I'm going to hear you out, because you sound like you know what you're talking about, but I never want to use Jira again.
[01:01:41] <kee> Why's it useful for learning?
[01:02:00] <juliaEnv> you'll most likely have to use it at work on a daily basis
[01:02:19] <juliaEnv> it's a task management system
[01:02:36] <kee> Ah, I'm planning on running an exam board for a Computer Science course, not a Software Engineering course. I get to avoid all that. :-)
[01:02:46] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:02:57] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:03:05] <kee> Chapter 13 is pretty good.
[01:03:35] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[01:04:13] <kee> juliaEnv: Yup, I'm definitely using this site. Thanks for making my thing 10% more useful!
[01:05:12] *** Joins: bayaz (~bayaz@user/jeaye/bot/bayaz)
[01:05:12] *** ChanServ sets mode: +o bayaz
[01:05:17] *** Parts: bolodgad (~bolodgad@user/bolodgad) (Leaving)
[01:05:33] <bnchs__> "(stay away from academic / open source tools that you won't be using on the job)"
[01:05:36] <bnchs__> why?
[01:05:49] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:34] <kee> bnchs__: Because you might like them. Then you'll spend your whole career crying in the corner.
[01:06:47] <bnchs__> yeah
[01:06:59] <kee> Though academic tools are often rubbish, too.
[01:07:03] <psydroid> job security (but for who?)
[01:07:09] <kee> Job security for Confluence.
[01:07:22] <kee> Er, Atlassian.
[01:07:39] *** Joins: wyre (~wyre@user/wyre)
[01:08:32] *** Quits: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net) (Ping timeout: 252 seconds)
[01:08:37] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[01:08:39] <kee> I recommend familiarising yourself with as many tools as possible. Knowledge is power.
[01:08:54] <juliaEnv> the thing is to be more strategic
[01:09:06] <kee> And that means familiarising yourself. Java sucks: become knowledgeable in it anyway.
[01:09:13] <bnchs__> juliaEnv, why discriminate against open-source tools
[01:09:18] <lf94> what do you guys think about protecting secrets in memory - futile?
[01:09:28] <kee> lf94: Depends on your threat mode.
[01:09:29] <juliaEnv> ignore as many tools as possible, and only familiarize yourself with those ones that are most widely used/needed to get a better return on investment
[01:09:33] <kee> *threat model.
[01:09:39] <lf94> kee: exactly.
[01:09:40] <kee> juliaEnv: That is a terrible strategy.
[01:09:45] <kee> Jack of all trades beats master of one.
[01:09:48] <bnchs__> so basically
[01:09:49] <lf94> kee: we want to protect against private keys being stolen
[01:09:54] <juliaEnv> within 5 to 10 years you'll forget most of the stuff from your degree that you learned, passed, and didn't use at work
[01:09:56] <bnchs__> the lock-in stratgery
[01:09:59] <kee> lf94: Stolen by whom?
[01:10:04] <bnchs__> strategy*
[01:10:07] <kee> juliaEnv: That's because your degree is useless.
[01:10:09] <lf94> kee: bad entity
[01:10:14] <juliaEnv> kee my degree is useful
[01:10:14] <bnchs__> get yourself locked-in into a tool
[01:10:16] <lf94> kee: physical access
[01:10:20] <InPhase> juliaEnv: Not true!  I still remember linked lists 20 years later.
[01:10:21] <kee> lf94: Futile.
[01:10:27] <lf94> kee: what about malicious software
[01:10:28] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[01:10:32] <kee> lf94: Don't get malware.
[01:10:37] <lf94> l
[01:10:39] <kee> Don't let malware have physical access.
[01:10:40] <juliaEnv> InPhase because you come across and use linked lists. They are a fundamental data structure.
[01:10:43] <kee> Keep things sandboxed.
[01:11:11] <InPhase> juliaEnv: But it is the canonical example of unused material from the CS curriculum.
[01:11:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:11:32] <kee> InPhase: Java is the canonical example of unused material from the CS curriculum.
[01:11:38] <juliaEnv> InPhase let's say if you learned about Software Product Lines, never used them at work, you wouldn't really know how to use them now
[01:11:39] <bnchs__> linked lists won't be useful
[01:11:51] <bnchs__> because they'll be abstracted away by baby langs
[01:11:53] *** Quits: password2 (~password8@user/password2) (Ping timeout: 256 seconds)
[01:12:01] *** Quits: newpy (~newpy@2601:280:4381:1390:c31c:7c32:bc2a:a52e) (Ping timeout: 245 seconds)
[01:12:11] <edgar-rft> I have 36 degrees, in celsius!
[01:12:23] <InPhase> kee: I used Java for work after graduating.  I just make an effort to avoid it, which is getting progressively more successful.
[01:12:37] <juliaEnv> InPhase I've used and implemented Linked Lists many teims. Not sure where they are unused.
[01:12:44] <oldlaptop> It'll COBOLize in time.
[01:12:48] <kee> juliaEnv: ‚Ä¶ Do you do low-end stuff?
[01:13:03] <kee> You really shouldn't be implementing linked lists.
[01:13:14] <juliaEnv> kee low-level stuff?
[01:13:34] <kee> Low end: Low-level, bare-metal stuff.
[01:13:45] <InPhase> juliaEnv: The notion of the disuse of linked lists has arisen because they are a heavily emphasized data structure which is very lightly used in most code, because they are in fact pretty terrible for almost all real world use cases where performance matters.
[01:14:26] <kee> But XOR linked lists are so cool‚Ä¶
[01:14:34] <kee> How can they possibly be terrible for cache locality?
[01:14:59] <InPhase> juliaEnv: Obviously I've used them.  The common joke about linked lists is somewhat facetious because the ratio of emphasis and utility is so different, as the real world pretty much never hits the asymptotic limit of their theoretical value.
[01:15:22] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Remote host closed the connection)
[01:15:45] <InPhase> juliaEnv: They are primarily useful as the simplest pedagogical structure of what they provide.
[01:15:46] <juliaEnv> kee linked lists are an abstract data type. There are cases where I'm parsing languages, traversing expression trees, evaluating expressions using stacks, executing state machines based on directed acyclic graphs, etc.  It is the last one of those examples where I used linked lists. A DAG-based workflow engine is where your tasks can be nodes of a linked list. And you can use your own linked list that is extended with 
[01:15:46] <juliaEnv> features you need...
[01:15:58] <kee> ‚Ä¶?
[01:15:58] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[01:16:12] <kee> "Abstract data type" in this sense is something I've only ever heard in university.
[01:16:14] <jeaye> InPhase: I missed the conversation about clojure the other day, where you pinged me. You said you had looked into it and the perf characteristics didn't meet your needs. I'm wondering, does the JVM meet your perf needs at all?
[01:16:39] <kee> That's not really what anyone else uses "abstract data type" to mean.
[01:16:48] <juliaEnv> kee that's because you haven't read around the topic
[01:16:55] *** Quits: alycidyne (~kova@91-160-172-214.subs.proxad.net) (Quit: leaving)
[01:16:56] <kee> No, it's because I have.
[01:17:01] <kee> Python's `abc` is not that.
[01:17:04] *** Joins: wildo (~lain6141@202.180.111.143)
[01:18:00] <juliaEnv> kee I see you kind of consider yourself to know more than you actually truly know. This kind of self-deception is what I know from the first several years of researching.
[01:18:01] <InPhase> jeaye: This part:  http://clojure-goes-fast.com/blog/clojures-slow-start/
[01:18:02] <bayaz> Title: Clojure's slow start ? what's inside? - Clojure Goes Fast 
[01:18:12] <kee> juliaEnv: "Abstract data type" is about what the thing logically is.
[01:18:30] <kee> It doesn't mean ‚ÄúI'm using pointers to make a list‚Äù.
[01:18:40] <jeaye> InPhase: So you need fast starting programs more so than fast running programs?
[01:18:52] <kee> It's about having the linked list interface being logically implementable (even if not actually implemented) on the thing.
[01:19:01] <InPhase> jeaye: Some of A, some of B.
[01:19:02] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[01:19:23] <InPhase> jeaye: But clojure seems like it could be useful for the things that I would want to start fast.
[01:19:23] <kee> ‚ÄúLinked list‚Äù as an ‚Äúabstract data type‚Äù is not something you can put in a program.
[01:19:32] <kee> It's something you use for algorithm analysis.
[01:19:35] <juliaEnv> kee ADT is not something you should only hear at university. ADT is a data type that is composed of other data types.
[01:19:38] <kee> So, a compiler might have the concept of an abstract data type.
[01:19:40] <kee> ‚Ä¶
[01:19:43] <kee> juliaEnv: That's algebraic data type.
[01:19:54] <lf94> "ADT is something you should only hear in uni"
[01:19:56] <lf94> no
[01:20:09] <lf94> ADT is very used term in the open software world at least, particularly FP
[01:20:10] <juliaEnv> kee there are primitive (atomic) data types and abstract data types.
[01:20:32] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:20:35] <jeaye> InPhase: For those cases, you still have a few options. GraalVM, babashka, and ClojureScript (with node) are common.
[01:20:37] <kee> lf94: I didn't say you should only hear it in uni. I mean you only really ever hear people using it that way in uni, because that's not really what it means.
[01:20:45] *** Joins: pavonia (~user@user/siracusa)
[01:20:56] <InPhase> jeaye: To be fair, I get similar sorts of lags if I import a ton of stuff in Python, but I don't typically need to import a ton of stuff in Python for things that I need to go fast.
[01:20:57] <lf94> ah whoops, didnt catch the context, my bad!
[01:21:03] <kee> juliaEnv: I guess you can think of things that way? But that's high-level stuff, and we have better ways of talking about that.
[01:21:06] <jeaye> InPhase: I've used Graal for some projects to turn CLJ command-line apps into something which starts up instantly.
[01:21:08] <juliaEnv> kee primitive data types are like int, byte, etc. and abstract data types are like class LinkedList, class String, class ArrayBlockingQueue
[01:21:18] <kee> juliaEnv: That's completely wrong.
[01:21:24] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[01:21:25] <InPhase> jeaye: Ok.  I wasn't aware of a "Graal".
[01:21:25] <davve> if theres one tool you should learn other than your text editor/IDE its git
[01:21:30] <davve> oh sorry, was scrolled upo
[01:21:32] *** Quits: gambl0re (~gambl0re@45.72.228.31) (Ping timeout: 240 seconds)
[01:21:39] <lf94> jeaye: I recently got to poke a bit at clojure - it's pretty dang nice. Was contributing to the "netrunner" game
[01:21:59] <juliaEnv> kee what makes you think the division of data types into primitive and abstract is "completely wrong"? Ask your professor about that.
[01:22:00] <kee> davve: Sadly, I would recommend git above better version control systems like Pijul. This is, I believe, juliaEnv's point.
[01:22:05] <jeaye> InPhase: GraalVM is a standalone project on its own, but it comes with a native-image module which compiles JVM apps into native binaries.
[01:22:06] <kee> juliaEnv: I have.
[01:22:19] <jeaye> lf94: Sweet!
[01:22:20] <kee> It's correct for algorithmic analysis.
[01:22:31] <kee> ‚ÄúArrayBlockingQueue‚Äù is not used in algorithmic analysis.
[01:22:35] <kee> That's a concrete, not an abstract, type.
[01:22:50] <lf94> jeaye I feel clojure is probably the closest thing mainstream FP will ever be
[01:22:53] *** Joins: flaqoniun (~F@32.211.211.39)
[01:22:56] <InPhase> jeaye: And I do generally find the JVM a bit laggy as well for small things, but for Java, only a fool is writing small things in Java anyway, because it is just terrible for this.  :)
[01:23:08] <InPhase> jeaye: One does not need 90% boilerplate.
[01:23:19] <lf94> hence: clojure
[01:23:22] <jeaye> True. Fortuantely, none of that applies to Clojure.
[01:23:40] <InPhase> Right, hence why the startup time matters more.
[01:23:40] <jeaye> InPhase: Some light info on Graal usage: https://kiramclean.com/blog/building-a-fast-command-line-app-with-clojure/
[01:23:41] <davve> kee: cool, hadnt heard of pijul before
[01:23:41] <bayaz> Title: Building A Fast Command Line App With Clojure 
[01:23:54] <davve> but yeah i agree, git isnt perfect but its the standard
[01:24:10] <juliaEnv> kee you still haven't clarified what makes you think the division of data types into primitive and abstract is "completely wrong", so shall I take it as an argument from ignorance?
[01:24:13] <InPhase> jeaye: I need to head out, but I'll drop a note to myself to read that later.
[01:24:15] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:24:21] <kee> juliaEnv: That division isn't completely wrong.
[01:24:29] <jeaye> In short, same program, written in clj, turned from 4.3s to 0.05s startup time.
[01:24:30] <kee> You listed completely wrong examples, though.
[01:25:02] <kee> juliaEnv: An abstract data type is basically a Java interface, except with defined time complexity for the methods.
[01:25:06] <juliaEnv> kee I've listed Java examples and what makes you think they are "completely wrong" examples of primitive data types and abstract data types?
[01:25:13] <kee> Because they're concrete data types.
[01:25:17] <kee> Not abstract data types.
[01:25:43] <kee> The concept you have in your head is called algebraic data types.
[01:25:57] <kee> Both of them have the acronym ADT; it's easy to get them confused.
[01:27:29] <juliaEnv> kee you don't know Java, then. I have listed correctly a few examples of primitive data types and abstract data types in Java. An ADT is not necessarily an interface. An ADT is a data type that is composed of other data types.
[01:27:59] <juliaEnv> in Java, a String is a class composed of other data data types.
[01:28:20] <juliaEnv> what you're referring to as concrete data types is what I refer to as primitive data types
[01:28:23] <kee> You don't know what ‚Äúabstract data type‚Äù means.
[01:28:24] <juliaEnv> they are also called atomic 
[01:28:31] <juliaEnv> no, you don't know that, kee
[01:28:45] <juliaEnv> an ADT is a DT composed of other data types
[01:29:07] <kee> Please look it up on Wikipedia.
[01:29:07] <kee> https://en.wikipedia.org/wiki/Abstract_data_type
[01:29:07] <kee> https://en.wikipedia.org/wiki/Algebraic_data_type
[01:29:07] <kee> juliaEnv: That is the definition of algebraic data type.
[01:29:08] <bayaz> Title: Abstract data type - Wikipedia 
[01:29:08] <bayaz> Title: Algebraic data type - Wikipedia 
[01:29:33] <kee> Btw, they didn't teach this to me at uni. :-)
[01:29:34] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[01:30:06] <juliaEnv> yes, kee, please look it up
[01:30:22] <juliaEnv> you seem to be reading about it without understanding it
[01:30:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:31:15] <kee> > In computer science, an abstract data type (ADT) is a mathematical model for data types. An abstract data type is defined by its behavior (semantics) from the point of view of a user, of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations.
[01:31:36] <kee> > In computer programming, especially functional programming and type theory, an algebraic data type is a kind of composite type, i.e., a type formed by combining other types.
[01:31:44] <kee> juliaEnv: What do I misunderstand?
[01:32:28] *** Quits: Guest46 (~Guest46@97-113-107-150.tukw.qwest.net) (Quit: Client closed)
[01:32:59] *** Joins: trevors (~trevors@user/trevors)
[01:33:14] *** Joins: swp (~Thunderbi@143.176.249.0)
[01:33:39] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[01:33:39] *** Quits: trevors (~trevors@user/trevors) (Client Quit)
[01:34:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[01:34:58] *** Quits: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net) (Quit: Leaving)
[01:35:02] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:35:03] *** Quits: jeaye (~jeaye@user/jeaye) (Quit: WeeChat 3.3)
[01:35:25] <juliaEnv> kee you seem to have misunderstood that abstract data types really are always composed of primitive data types
[01:36:05] <bjs> juliaEnv: I've never heard the definition that an abstract datatype is a datatype 'composed of other datatypes'
[01:36:18] <kee> juliaEnv: > This mathematical model contrasts with data structures, which are concrete representations of data, and are the point of view of an implementer, not a user
[01:36:30] <kee> Guess which Wikipedia article this is! Abstract or algebraic.
[01:36:32] <juliaEnv> kee while ADTs can be seen as theoretical modelsm they can be seen also as implementations. A queue is an ADT as well as ArrayBlockingQueue.
[01:36:38] <kee> They can't be seen as implementations.
[01:36:47] <bjs> kee: the wikipedia definition seems correct to me
[01:36:55] <kee> juliaEnv: You‚Ä¶ don't understand what other people mean by that word.
[01:36:55] <juliaEnv> https://www.baeldung.com/cs/adt
[01:37:03] <bjs> It's in-line with the definition Liskov and Zilles gave when they introduced the phrase
[01:37:11] <juliaEnv> You don't accept that an implementation of ADT is still an ADT?
[01:37:19] <kee> Yes.
[01:37:20] *** Joins: dakudos (~dakudos@172.58.62.218)
[01:37:30] <kee> It's not abstract.
[01:37:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[01:37:36] <juliaEnv> it is abstract 
[01:37:42] *** Joins: gambl0re (~gambl0re@45.72.228.31)
[01:37:46] <kee> It's a concrete implementation of the "interface".
[01:37:58] <juliaEnv> there doesn't have to be any interface
[01:38:01] <juliaEnv> look at String in java
[01:38:04] <bjs> juliaEnv: that is correct, an implementation of an ADT is not an ADT anymore since it's not "abstract"
[01:38:07] <juliaEnv> String in Java is an ADT and it has no interface
[01:38:10] <bjs> juliaEnv: I think you are misunderstanding what ADT means
[01:38:17] <kee> juliaEnv: It's not an abstract data type.
[01:38:24] <kee> Also, it has an interface.
[01:38:29] <juliaEnv> I think you are disagreeing with interface vs. implementation both being ADTs
[01:38:51] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[01:38:59] <kee> Your idea of "abstract data type" as being composed of one or more primitives / ADTs?
[01:39:03] <juliaEnv> when I want to implement an ADT like LinkedList, for example, I don't have to necessarily implement an Interface. I can if I want to, but I don't have to. Is my LinkedList not an ADT? Of course it is, it has operations and values.
[01:39:04] <kee> That's ‚Äúalgebraic data type‚Äù.
[01:39:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[01:39:31] <kee> Java's ‚ÄúInterface‚Äù is not the same thing as what everybody else in the world means by ‚Äúinterface‚Äù.
[01:40:04] <kee> Or, rather, Java's meaning is a specialised meaning.
[01:40:13] <kee> The concept of an interface is more general than that.
[01:40:15] *** Joins: lilo_booter (~charlie@ptr-1dvvljng943fgk02l8m.18120a2.ip6.access.telenet.be)
[01:40:23] <bjs> ADT is essentially just the interface, a characterisation of the operations available on the datastructure without the irrelevant details (of how it's implemented)
[01:41:11] <juliaEnv> https://examples.javacodegeeks.com/adt-java-tutorial/
[01:41:11] <bayaz> Title: ADT Java Tutorial 
[01:41:35] <flaqoniun> is this low-key geurilla marketting for android developer tools?
[01:41:38] <juliaEnv> they name the dichotomy as abstract data types and simple data types (also known as atomic data types, concrete data types)
[01:41:51] <juliaEnv> there are many synonyms :) But I'm right about that.
[01:42:16] <kee> juliaEnv: No, they have a pentachotomy.
[01:42:24] <kee> Simple type (primitive)
[01:42:30] <kee> Aggregate type (abstract data type)
[01:42:32] <kee> Array
[01:42:34] <kee> List
[01:42:37] <kee> Abstract data type
[01:42:41] <bjs> juliaEnv: that website is not using "simple type" and "abstract data type" as synonymns 
[01:42:58] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[01:43:01] <juliaEnv> no, you seem to focus on something else than primitive vs. abstract data types when you look at 5 categories instead of the 2 of interest
[01:43:10] <kee> SOrry, "aggregate type" is an algebraic data type", that was a typo.
[01:43:37] <juliaEnv> I did not say bjs that simple type and abstract data type are synonyms! I said simple data types are also called atomic, concrete, primitive.
[01:43:47] <kee> Technically, Java only has product types, not sum types.
[01:44:02] <kee> juliaEnv: This is true.
[01:44:13] *** Joins: trevors (~trevors@user/trevors)
[01:45:01] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[01:45:13] <bjs> juliaEnv: sure but they are not abstract. An abstract datatype is a specification/interface that describes the set of operations that can be performed on a data structure. E.g. the "queue" ADT would talk about enqueue() and dequeue(). Once you actually implement it, you're not dealing with ADT anymore but a concrete data structure
[01:45:41] *** Quits: trevors (~trevors@user/trevors) (Client Quit)
[01:45:48] <bjs> The spec/interface is "the ADT",  but ADTs aren't tangible things
[01:46:13] <kee> Unlike a Java interface, an abstract data type specifies the asymptotic time complexity of the operations. (It also specifies the set of possible values, but that's a bit more nebulous.)
[01:46:16] *** Joins: trevors (~trevors@user/trevors)
[01:46:30] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:46:58] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[01:47:13] <kee> Hang on, that was inaccurate.
[01:47:42] <kee> That's only accurate for a given abstract machine.
[01:48:02] <kee> Oh, wrong again. I'll just copy Wikipedia.
[01:48:06] *** Joins: jeaye (~jeaye@user/jeaye)
[01:48:24] <juliaEnv> forget wikipedia, it's not a good source
[01:48:27] *** Quits: jeaye (~jeaye@user/jeaye) (Client Quit)
[01:48:31] <kee> > What is meant by "behaviour" varies by author, with the two main types of formal specifications for behaviour being axiomic (algebraic) specification and an abstract model
[01:48:45] <kee> juliaEnv: For computer science? It's pretty good.
[01:48:54] <juliaEnv> it's terribly awful
[01:48:57] <kee> Far better than Java Code Geeks (which isn't actually that bad, tbh).
[01:49:01] *** Quits: ghost64 (~ghost64@user/ghost64) (Quit: See you!)
[01:49:10] <bjs> It can be hit and miss for CS,  but the definition for ADT looks fine.
[01:49:18] <juliaEnv> when I was doing my Master's, my professor used to tell us very often not to use wikipedia
[01:49:32] <kee> Wikipedia's CS articles are either good, or you can tell their bad at a glance.
[01:49:38] <juliaEnv> I only understand after having done many years of research how and why wikipedia is inadequate
[01:49:39] <kee> s/their/they're/
[01:50:14] <juliaEnv> well, ask your professor who has done many years of research if you should be learning CS from wikipedia
[01:50:21] *** Quits: gambl0re (~gambl0re@45.72.228.31) (Ping timeout: 252 seconds)
[01:50:21] <kee> I'm not learning CS from Wikipedia.
[01:50:27] <juliaEnv> a university library will be better
[01:50:33] <kee> I'm referencing it to try to show you that you're not right about how most people use the term.
[01:50:52] <juliaEnv> definitions from books, esp. from practically oriented books, will be better
[01:50:58] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 268 seconds)
[01:50:58] <kee> You're thinking of the concrete / composite data type distinction.
[01:51:08] <farn> every page that's just been linked lists integers as an example of abstract data types. here's another one that mentions Java's int specifically: http://web.mit.edu/6.005/www/fa14/classes/08-abstract-data-types/
[01:51:08] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Ping timeout (120 seconds))
[01:51:09] <bayaz> Title: Reading 8: Abstract Data Types 
[01:51:09] <juliaEnv> your point is an ADT is an abstract specification for a data type
[01:51:14] <farn> integers seem fairly primitive to me
[01:51:26] <kee> juliaEnv: Yes!
[01:51:27] <farn> and MIT seems to be an okay school
[01:51:33] <juliaEnv> my point is a data type can be implemented without having a separate specification
[01:51:33] <kee> farn: Integers aren't primitive.
[01:51:35] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[01:51:38] <kee> Integers modulo some power of 2 are primitive.
[01:51:38] *** Joins: kleiner (uid540109@id-540109.uxbridge.irccloud.com)
[01:51:44] <kee> juliaEnv: This is also true.
[01:51:50] <kee> But that doesn't make those data types an abstract data type.
[01:51:52] *** Joins: jeaye (~jeaye@user/jeaye)
[01:51:53] <bjs> juliaEnv: well all datatypes have a spec/interface implicitly,  but sure you don't have to write it down
[01:52:00] *** Quits: dakudos (~dakudos@172.58.62.218) (Ping timeout: 252 seconds)
[01:52:01] <bjs> juliaEnv: if you do write down the spec/interface, then what you have written down is "the ADT".
[01:52:02] <farn> interesting. now I need to learn the definition of a primitive type
[01:52:13] <kee> farn: A primitive type is just one that's small.
[01:52:14] <juliaEnv> see, I know your point the whole time and this is my point. ADTs aren't necessarily only abstract interfaces. ADTs are also the (hidden) implementations (hidden from the user).
[01:52:27] <bjs> juliaEnv: no the implementations are very precisely *not* part of the ADT
[01:52:27] <kee> farn: Depending on the programming language, different things are primitives.
[01:52:37] <flaqoniun> octet is a primitive  as far as i'm concerned integer is too ambiguous
[01:52:38] <kee> juliaEnv: ADTs don't have users.
[01:52:46] <kee> ADTs are a mathematical model used for algorithmic analysis.
[01:52:50] <juliaEnv> no, ADTs have to be implemented in some way and their implementations are still called ADTs.
[01:52:50] <kee> They're nothing to do with software engineering.
[01:52:57] <bjs> juliaEnv: they are not called ADTs no
[01:52:59] <kee> You do not understand how other people use this word.
[01:53:06] <juliaEnv> an implementation of a tree is still a tree
[01:53:14] <juliaEnv> bjs yes, they are. Read this: https://examples.javacodegeeks.com/adt-java-tutorial/
[01:53:15] <bayaz> Title: ADT Java Tutorial 
[01:53:20] <kee> That's a set membership "is a" relationship.
[01:53:26] <kee> juliaEnv: You're equivocating. (logical fallacy)
[01:53:32] <juliaEnv> no, I'm not.
[01:53:54] <juliaEnv> Both A specification of X and 
[01:53:55] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[01:54:02] <kee> Suppose Tree is a Java interface.
[01:54:06] <juliaEnv> both a specification of X and an implementation of X can be considered X.
[01:54:08] <kee> MyTree is an implementation of that interface.
[01:54:12] <kee> MyTree is a Tree.
[01:54:15] <kee> Tree is not a MyTree.
[01:54:18] <juliaEnv> your tree doesn't have to have any interface
[01:54:30] <kee> Suppose MyTree is an implementation of the Tree interface, though.
[01:54:37] <juliaEnv> suppose Tree is an implementation
[01:54:40] <kee> Also, this is Java's definition of "interface".
[01:54:49] <kee> That's not the normal definition of "interface"; it's much narrower.
[01:54:50] <juliaEnv> in Java, the String ADT doesn't use any interface
[01:54:57] <bjs> juliaEnv: I mean (a) it's laughable you brush off wikipedia and its definition (which is essentially copy/pasted from the original definition by Liskov) only to use this random java website as your source, and (b) this website is playing very fast and loose with terminology,  Java has an "interface" construct which is supposed to capture a specification (an ADT)
[01:55:00] <kee> Just like my hand is not a Java Object, but it's an object.
[01:55:04] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Client Quit)
[01:55:11] <juliaEnv> it's an ADT when it's composed of other data types. Period
[01:55:21] <kee> juliaEnv: That's "algebraic data type". Period.
[01:55:22] <bjs> juliaEnv: data structures implement ADTs, but those data structures themselves aren't also the ADT.
[01:55:34] <juliaEnv> it's not the only way to recognize ADTs, but it's a sure way
[01:55:37] <bjs> juliaEnv: no you're confusing things, "composed of other data types" has nothing to od with abstraction
[01:55:40] <kee> A type that is composed of other data types in the Java way is a product type, or a composite type.
[01:55:51] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 252 seconds)
[01:55:54] <kee> Java doesn't have sum types, which something like Rust or Haskell does.
[01:56:02] <kee> That's also called a struct.
[01:56:06] *** Quits: jeaye (~jeaye@user/jeaye) (Client Quit)
[01:56:08] <beaky> nice i like rust lately my favorite programming language
[01:56:10] <bjs> kee: it has enums :)
[01:56:18] <bjs> which is a really terrible kind of sum type
[01:56:18] <kee> bjs: Java's enums aren't sum types.
[01:56:20] <juliaEnv> in Java, these ADTs like String are called ATS as you can see at https://examples.javacodegeeks.com/adt-java-tutorial/ Period
[01:56:20] <bayaz> Title: ADT Java Tutorial 
[01:56:24] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[01:56:28] *** Joins: jeaye (~jeaye@user/jeaye)
[01:56:32] <juliaEnv> ADTs (I didn't make up the naming)
[01:56:50] <juliaEnv> if that's algebraic data types then why are they called ADTs in Java?
[01:56:58] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[01:57:02] <kee> juliaEnv: They're not.
[01:57:02] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[01:57:10] <bjs> juliaEnv: Java doesn't call them ADTs, it calls them interfaces.
[01:57:10] <kee> Well, they are sometimes.
[01:57:19] <kee> Because ADT is also the acronym for algebraic data type.
[01:57:25] <kee> But nobody in Java calls them that.
[01:57:29] <juliaEnv> they are ADT implementations
[01:57:40] <jeaye> Java also calls member functions "methods", but that doesn't mean every language does. i.e. in C++, they're member functions, not methods.
[01:57:48] <juliaEnv> "nobody" - have you asked every Java developer on earth?
[01:57:58] <jeaye> ADTs transcened languages, so what one lang calls them doesn't matter.
[01:57:59] <kee> juliaEnv: Well, you do.
[01:58:00] <juliaEnv> Implementing an ADT means providing one procedure or function for each abstract operation
[01:58:07] <kee> Correct.
[01:58:13] <kee> (Ish.)
[01:58:14] <deniska> fun fact: there're more devices running java than there're java developers
[01:58:25] <bjs> juliaEnv: when people say "ADT" they mean "abstract datatype" along the lines of kee's wikipedia article (which is basically how Liskov defined it).  I'm sure some people are using the term in a way inconsistent with the way the term has been consistently used throughout CS over the last 50 years
[01:58:36] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[01:58:37] <bjs> deniska: that's not fun, think about our poor planet :(
[01:58:45] <jeaye> deniska: Same could be said for several languages.
[01:58:55] <sonny> can I get a tldr on c++ allocators concept?
[01:58:57] <juliaEnv> bjs in practice, such as in software engineering, people can implement ADTs as well as instantiate ADTs and use ADTs to get things done. 
[01:59:11] <kee> sonny: They give you memory when you ask for it, until they don't.
[01:59:19] <pyzozord> I imagine developers in sweatshops each one programming just one simcard
[01:59:31] <juliaEnv> don't think of ADTs as something you can't implement, something you can't instantiate, or something you can't get things done with
[01:59:36] <bjs> juliaEnv: yes, an implementation of an ADT is called a data structure. Languages also provide ways to describe an ADT, e.g. Java's "interface" so it can automatically check whether a given data structure implements a given ADT
[01:59:56] <kee> juliaEnv: Think of ADT as a synonym for ‚Äúinterface‚Äù.
[02:00:10] <kee> It's not, but you're being too Java for something more nuanced.
[02:00:13] *** Joins: ghost64 (~ghost64@user/ghost64)
[02:00:19] <juliaEnv> ADT is not only an interface. The point is the implementation of that interface is an ADT (implementation).
[02:00:23] *** Quits: user51 (~user51@77.124.35.94) (Remote host closed the connection)
[02:00:23] <jeaye> sonny: Containers can often be parameterized on an allocator type which provides an API for allocating memory instead of using `new`. This allows for custom allocators which do custom logic, pull memory from certain places, track usage, debug leaks, etc.
[02:00:24] <kee> It's not.
[02:00:36] <kee> juliaEnv: That's not how anyone else uses the expression.
[02:00:44] <kee> Why would a concrete implementation be called ‚Äúabstract‚Äù?
[02:00:45] <bjs> juliaEnv: implementing is not the same as identifying as.  A implements B does not mean A is a B,  it means A does everything required by B.
[02:00:58] <kee> juliaEnv: There is an "abstract" keyword in Java.
[02:00:59] <sonny> jeaye: that's amazing
[02:01:13] <kee> juliaEnv: No conrete implementation can use the "abstract" keyword.
[02:01:19] <kee> Do you yet believe you might be mistaken?
[02:01:20] <sonny> it's like a really simple gc interface
[02:01:28] <juliaEnv> kee have you spoken to everybody in the world to ask them if they reduce "ADT implementation" to "ADT"? I bet my life some people do.
[02:01:33] <jeaye> sonny: Allocators don't perform GC. They just allocate.
[02:01:37] <kee> juliaEnv: You're one of them.
[02:01:38] <jeaye> C++ doesn't have GC.
[02:01:43] <kee> juliaEnv: Clearly I'm not being literal.
[02:02:12] <kee> juliaEnv: But probably nobody else you'll talk to, except people you've taught your definition, will use the word the same way you do.
[02:02:25] <kee> Unless, for some bizarre reason, somebody decided to teach you this.
[02:02:31] <sonny> you mentioned 'track usage'
[02:02:40] <juliaEnv> kee bingo! And when you implement a LinkedList, Queue, Stack, or other ADT you might as well call your ADT implementation using a shorter name just ADT. 
[02:02:48] <kee> ‚Ä¶
[02:02:58] <juliaEnv> but you can't implement an int, byte, short
[02:03:02] <kee> You might as well call your interface implementation an interface!
[02:03:08] <jeaye> sonny: Right. Allocators don't get to choose when something is cleaned up, unlike a GC. They're just custom implementations of `new` and `delete` which can be provided.
[02:03:11] <sonny> linkedlist is not an ADT
[02:03:13] <bjs> juliaEnv: you wouldn't call the implementation an ADT though, that would be confusing.
[02:03:17] <sonny> it would be List
[02:03:26] <juliaEnv> that's because int, byte, short are primitive types while Lists, Queues, Stacks, Vectors are ADTs
[02:03:33] <jeaye> sonny: It's still up to that program's code to use new/delete correctly.
[02:03:36] <kee> juliaEnv: This is very wrong.
[02:03:51] <kee> You're arguing that your definition means something.
[02:03:56] <kee> We all agree it means something.
[02:03:56] *** Joins: dakudos (~dakudos@c-73-229-175-50.hsd1.co.comcast.net)
[02:04:00] <sonny> jeaye I see
[02:04:00] <juliaEnv> kee it's very right. I've read it like that over and over from different practitioner-oriented sources
[02:04:01] <bjs> juliaEnv: so Java has a "List" interface, which is supposed to capture "the list ADT",  and there are concrete classes which are compatible with the List interface and so implement "the list ADT"
[02:04:07] <bjs> juliaEnv: the concrete implementation is not an ADT
[02:04:09] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[02:04:11] <kee> juliaEnv: Have you? None of the sources you cited say that.
[02:04:15] <juliaEnv> bjs Java has a String ADT without an interface
[02:04:20] <kee> It has an interface.
[02:04:22] * sonny ponders gc interfaces
[02:04:24] <kee> Just not a Java interface.
[02:04:28] <juliaEnv> String is an implementation, not an interface
[02:04:32] <kee> This is true.
[02:04:39] <kee> It's not a Java interface.
[02:04:47] <kee> But it has an interface, in the colloquial sense.
[02:04:47] <jeaye> Everything is an interface. :O
[02:04:50] <juliaEnv> String is an ADT at the same time because it's composed of other data types
[02:04:52] * jeaye interfaces with everything.
[02:04:56] <kee> jeaye: Everything has an interface.
[02:04:57] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Client Quit)
[02:05:22] <juliaEnv> An ADT implementation is also called a data structure
[02:05:22] <kee> juliaEnv: In Java, String actually isn't composed of other data types, I don't think.
[02:05:28] *** Quits: cfjk (~cfjk@user/cfjk) (Quit: The Lounge - https://thelounge.chat)
[02:05:31] <juliaEnv> kee no, it is
[02:05:39] <bjs> juliaEnv: sure Java has a String class, which does not implement any Java interface. The concrete class is not an ADT,  but the interface it implements is the "string ADT" (if such a thing means anything).  We call these concrete implementations "data structures" not "abstract datatypes"
[02:05:48] <kee> juliaEnv: An ADT implementation is called a data structure yeah.
[02:06:03] <kee> Data structures are not ADTs.
[02:06:05] <juliaEnv> kee in IntellJ, you can decomile String to see how it's implemented
[02:06:18] <juliaEnv> ADT implementations are data structures
[02:06:31] <kee> juliaEnv: Oh, so it is. You're right.
[02:06:35] <kee> It's array-backed, like Rust.
[02:06:36] *** Quits: flaqoniun (~F@32.211.211.39) (Ping timeout: 240 seconds)
[02:06:41] <kee> I assumed it would be implemented like in JavaScript.
[02:06:45] *** Joins: cfjk (~cfjk@user/cfjk)
[02:06:50] * sonny is almost ready for osdev
[02:07:01] <kee> sonny: Don't osdev in C++.
[02:07:08] <kee> Well, you could. It'll certainly be an experience.
[02:07:12] <sonny> just need to read another amd64 summary
[02:07:20] <kee> But only hobbyist OSs, not real ones, please.
[02:07:21] <sonny> or figure out this arm device
[02:07:45] <juliaEnv> An ADT implementation is not necessarily always called a data structure. In some cases, it's called ADT, for example in the case of String in Java.
[02:07:51] <kee> juliaEnv: An ADT implementation is called a data structure.
[02:07:53] <kee> Full stop.
[02:07:56] <kee> You were right the first time.
[02:07:57] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[02:08:01] <bjs> juliaEnv: ADTs, data types, and data structures are terminology that have been around a long time now (nearly 50 years now) and using that definition (the one introduced by Liskov and the one that CS textbooks use to this day) then the implementation is the data structure and the 'abstract' specification/interface is the ADT.  To call the implementation "an ADT" would be very confusing, even if meant "the ADT induced from this concrete implementation"
[02:08:08] <juliaEnv> kee it's not always called a data structure
[02:08:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[02:08:15] <kee> No, clearly. You're not calling it that.
[02:08:22] <kee> But by people who use the words normally, yes it is.
[02:08:28] <kee> Sometimes string is a primitive, of course.
[02:08:32] <pyzozord> bjs: what's a "data structure"
[02:08:55] <kee> pyzozord: A complex way of storing data.
[02:09:10] <kee> Everything more complicated than the primitive types.
[02:09:28] <pyzozord> do you mean like "scalar" types
[02:09:38] <kee> Those are primitives, I think.
[02:09:52] <pyzozord> yes, I mean data structures would be "non-scalar"
[02:09:55] <kee> Yup!
[02:09:55] <juliaEnv> scalar is another synonym for atomic/primitive/simple types
[02:10:17] <kee> Careful, though: "atomic" also has another meaning (talking about data accesses), so "atomic type" might mean that.
[02:10:33] *** Joins: newpy (~newpy@2601:280:4381:1390:2ddc:61c2:abe8:a959)
[02:10:58] <kee> juliaEnv: I am curious. Why are you sticking to your guns about this Abstract Data Type terminology thing when you're right about so much else?
[02:11:32] <pyzozord> it's very hard to change your mind, especially after some emotional investment
[02:11:47] <kee> I don't really understand that.
[02:11:55] <pyzozord> the more you push the more person will stand on guard
[02:11:55] <kee> When you publicly change your mind, everyone cheers.
[02:12:09] <kee> And then you get a party thrown in your honour and everyone talks about how clever you are.
[02:12:17] <pyzozord> in many cultures changing mind is considered as sign of weakness or even heresy
[02:12:21] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 252 seconds)
[02:12:21] <kee> ‚ÄΩ‚ÄΩ‚ÄΩ
[02:12:25] <kee> Well that explains a lot.
[02:12:37] <kee> I think I probably live in one of those cultures‚Ä¶
[02:13:14] <pyzozord> https://freakonomics.com/podcast/how-to-change-your-mind/
[02:13:15] <bayaz> Title: How to Change Your Mind - Freakonomics 
[02:13:18] <kee> That makes zero sense, though. Nobody starts off knowing everything, so how can you learn without changing your mind?
[02:13:31] <kee> If you know a lot, that means you've changed your mind a lot.
[02:13:45] <kee> So being seen to be good at changing your mind is being seen to be intelligent.
[02:14:00] <Hash> hello 
[02:14:06] <Hash> I am not feeling well.
[02:14:24] <pyzozord> quite native and simplistic point of view, humans are not reasonable
[02:14:25] <Hash> So I need a distraction
[02:14:34] <bjs> pyzozord: all these terms have a long history. The idea is that you have high-level abstractions like data structures which let you operate over multiple bits of data at once.  You can arrange data structures into data types (which is exactly what you think, if 11 and 17 and 42 are data structures [albeit very boring ones]) then `int` is the datatype.  Then ADTs are the logical interface that one (or many) data structures may implement.
[02:14:38] <Hash> Anyone want to help me figure out what I did in php?
[02:14:46] <kee> No. Please no. Never again.
[02:14:47] <Hash> https://gitlab.com/hashborgir/d2tools/-/blob/master/genDocs.php <- cluster fuck of garbage code
[02:14:48] <bayaz> Title: genDocs.php ? master ? Hash Borgir / d2tools 
[02:14:53] <kee> Why do you do this?
[02:15:07] <Hash> I can't remember I how I generated the gems. I think I kind of figured out uniqueitems
[02:15:13] <Hash> I'ts been a year sinceI looked t my code so I forgot a lot
[02:15:22] <Hash> I want to refactor it properly, but I need to remebmer things.
[02:15:26] <kee> https://gitlab.com/hashborgir/d2tools/-/raw/master/genDocs.php for us filthy non-JS users.
[02:15:27] <bayaz> Type: text/plain; charset=utf-8 
[02:15:28] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:15:36] <Hash> Oh right
[02:15:38] <Hash> sorry
[02:15:49] <Hash> Man, just get a browser man.
[02:15:55] <pyzozord> bjs: yep knew all about those, but didn't hear about "data structures" in formal context before so I was curious if my intuitive understanding was working for the formal context too
[02:15:59] <Hash> Seriously, hard to pinpoint line numbers and such on plaintext
[02:16:08] <bjs> pyzozord: the terms go back to at least the 1970s (at least for ADT),  but I've seen even earlier references to datatypes/data structures consistent with the 1970s-onwards definitions we use today. As languages have evolved we've obviously gained actual high-level language features to try capture these
[02:16:10] <kee> Hash: Oh, it's no problem to get a GitLab link now I know the trick! I was just sharing that for people who didn't.
[02:16:16] <juliaEnv> kee things aren't only black and white. You still don't get an implementation of ADT is not necessarily called a data structure by the author who is writing. In many sources, it's refered to as ADT throughout, for many reasons. So, an ADT is not only a model for a data type, an ADT is any data type that is not primitive.
[02:16:31] <juliaEnv> in Java, a String doesn't have an interface, yet it's an ADT
[02:16:34] <kee> juliaEnv: Those authors are silly.
[02:16:37] <Hash> $item = $idata->uniqueItems($u['index'], true);
[02:16:38] <Hash> See
[02:16:47] <Hash> This goes into idata object from D2ItemData class
[02:16:53] <kee> Wittgeist (or something) wrote about a beetle in a box.
[02:17:05] <Hash> Then uniqueitems() generates the strigns and gives them back to you for each of the 7 props
[02:17:10] <kee> Wittgenstein.
[02:17:28] <pyzozord> Hash: yeah it's quite messy ngl
[02:17:50] <Hash> I know.
[02:17:52] <Hash> I know.
[02:18:01] <bjs> pyzozord: so formally if you had a language like Rust, then a struct is a datatype, the actual memory that contains a struct is the data structure (or close enough :P) and a trait tries to capture an ADT.
[02:18:06] <Hash> I'm cleaning up slowly
[02:18:23] <juliaEnv> kee no, they are simply working in some context and staying consistent. Things really aren't only black and white. It's not called "Design of abstract data types and implementation of data structures". It's usually called Design and implementation of abstract data types. Hence, it makes sense to refer to ADT implementation in such design and implement materials. Example: http://faculty.juniata.edu/rhodes/cs2/ch09a.htm
[02:18:24] <bayaz> Title: Design and Implementation of Abstract Data Types 
[02:18:25] <bjs> pyzozord: at least, that's roughly what the relationship between those words meant.
[02:18:48] <pyzozord> bjs: btw does rust have objects and classes?
[02:19:30] <deniska> kinda/not really
[02:19:31] <juliaEnv> but let's keep it like that. There are different contexts, different synonyms, and different definitions made from different point of views
[02:19:32] <pyzozord> Hash: if you have a specific problem with specific line I could take a look, otherwise I'm way too tired to read through all that
[02:19:39] <bjs> pyzozord: not really,  it has structs but you can attach functions to the structs
[02:19:51] <pyzozord> oh ok that excuses existance of traits
[02:20:17] <bjs> pyzozord: traits are like interfaces, or typeclasses
[02:20:21] <pyzozord> traits and classes together seem utterly excessive to me, and for the most part redundant
[02:20:31] <kee> juliaEnv: That's a different sense of the word ‚Äúimplementation‚Äù.
[02:20:34] <kee> You implement an interface.
[02:20:41] <kee> That means creating a concrete type that implements the interface.
[02:20:49] <juliaEnv> In the source I link, btw. it says: An ADT is a programmer defined type with: 1. A set of data values called the domain 2. A collection of allowable operations on those values. This defines the design.
[02:21:00] <kee> This is true!
[02:21:06] <kee> That's the classic definition of an ADT.
[02:21:21] <juliaEnv> it's one of the classic definitions, kee
[02:21:30] <kee> Fair enough.
[02:21:36] <kee> But it's the classicist definition.
[02:21:41] <juliaEnv> and it doesn't say the programmer defined type must be an interface, or else it is no longer an ADT
[02:21:49] <kee> Ah, I think you misunderstand.
[02:21:53] <kee> It's using type in the type theory sense.
[02:22:06] <kee> See it's "called the domain"? That's mathematical language.
[02:22:23] <kee> This is a pure maths (CS) thing, not a software-engineering thing.
[02:22:38] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[02:22:40] <bjs> pyzozord: well Java has both classes and interfaces, and it can be useful. For example you might want to write a function that works on a Queue. So `void doStuff(MyQueue q)` but now if I write my own Queue I can't use this function on it. But if I define an interface ("Queue") and then write my function like `void doStuff(Queue<int> q)` and then I can use this doStuff on any class that implements the Queue interface
[02:22:52] <kee> The set of values is stuff like zero, one etc..
[02:23:03] <juliaEnv> yes, it is, but I don't think your claim is right. You claim that ADTs must be interfaces or else if they are implementations they are data structures. This definition doesn't claim that. It merely needs programmer-defined types.
[02:23:05] <kee> Not "the bit pattern 00000000 stored in a byte in RAM".
[02:23:14] <kee> ADTs aren't Java interfaces.
[02:23:19] <juliaEnv> kee types are of course from the type theory
[02:23:19] <kee> ADTs do not exist in Java.
[02:23:27] <bjs> pyzozord: and in general it can be a nice engineering thing to be able to specify the interface something expects exactly, rather than saying "kinda looks like a file" (e.g. like what Python does)
[02:23:28] <kee> juliaEnv: Java types are not type theory types.
[02:23:33] <juliaEnv> that's a specific point of view, kee
[02:23:38] <kee> Computer Science is not Software Engineering.
[02:23:46] <kee> Java types do not work like type theory types.
[02:23:52] <pyzozord> bjs: as far as I can tell, traits include actual implementations of methods
[02:23:58] <pyzozord> at least they did in php
[02:24:00] <kee> Type theory does not have mutation. Java has mutation.
[02:24:06] <kee> You cannot mutate a mathematical object.
[02:24:20] <kee> Java is not a good way of thinking about computer science.
[02:24:28] <juliaEnv> software engineering is the use of systematic, quantifiable, disciplined approach...
[02:24:34] <kee> Computer science is not about computers.
[02:24:43] <juliaEnv> I'm afraid ADTs are CS
[02:24:46] <kee> They are!
[02:25:01] <bjs> pyzozord: so Rust traits (and Haskell typeclasses) etc can have both concrete implementations but also just abstract signatures in there which classes that implement the trait/typeclass must implement themselves
[02:25:46] <pyzozord> bjs: I think having actual implementation makes a big difference there. Golang has interfaces but they do not have implementations
[02:25:48] <bjs> pyzozord: the including of the concrete functions is there just to make peoples lives easier. E.g. a "Ordered" trait/typeclass could require the programmer to define just < and == and then > and >= and <= can be "derived" automatically
[02:25:52] <juliaEnv> IMO, kee, your argument that ADTs are only the interfaces, not the implementations is an oversimplification because it doesn't consider non-wiki definitions of ADTs 
[02:26:06] <kee> My argument is that ADTs are not what you think as "interface".
[02:26:12] <kee> ADTs do not exist in Java.
[02:26:21] <juliaEnv> I never said ADTs were Java interfaces
[02:26:32] <kee> Java String has a (non-Java) interface.
[02:26:35] <pyzozord> Having Classes and Traits with implementations seems kind strange to me, and not very good
[02:26:59] <kee> pyzozord: They're implementations in terms of other trait methods.
[02:27:06] <bjs> pyzozord: it is good, it means your class can implement just 1 or 2 core methods and then the others come free.
[02:27:09] *** Joins: maxzor (~maxzor@2a01cb04054faa00996bd0b5db51ef1b.ipv6.abo.wanadoo.fr)
[02:27:15] <kee> Think of them as definitions, but you can implement them more efficiently if you like.
[02:27:36] <kee> So long as your code is equivalent to the definition (but Rust doesn't enforce that).
[02:28:04] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[02:28:06] <juliaEnv> anyway, let's drop this discussion as they are programmed defined types, not only definitions of types
[02:28:29] <juliaEnv> it's more than you say it is, but never minds
[02:28:36] <pyzozord> it's quite bad in my opinon, I never found any use of it, and between inheritance and composition I already have more than enough tools, all these "frined classes", "traits" and stuff like this.. I don't like it very much
[02:28:43] <bjs> pyzozord: as another example, Python has collections.abc.MutableMapping for "dict-like classes", which is the Python equivalent (an ABC). If you inherit this, you have to implement a few key methods (like getitem and setitem) but then the ABC has concrete implementation for .keys() and .values() and .items() and .get() and all the other "helper" methods that can be derived automatically
[02:28:48] <kee> I'll let you have the last word, other than saying I non-specifically disagree with your last word.
[02:28:54] <pyzozord> it multiplicates the design space needlessly
[02:29:01] <kee> juliaEnv: Anyway‚Ä¶ I believe before all that, you were teaching me lots of cool stuff?
[02:29:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[02:29:14] <pyzozord> growing the complexity of the problem and the solution exponentially
[02:29:17] <bjs> pyzozord: if you didn't have "interfaces with concrete implementations" if you wanted to make a class that "looked like a dict" (i.e. implemented Python's dictionary ADT) then you'd have to implement it all yourself manually.
[02:29:34] <bjs> so while it makes the whole ecosystem a little more complex and big,  it makes the programmers life much easier
[02:29:41] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:29:50] <kee> Python's ABCs are annoying.
[02:29:52] <bjs> (can *you* remember all the methods you need to implement to get something that behaves like a Python dict? :P)
[02:29:55] <kee> Because they give you a metaclass.
[02:30:07] <kee> bjs: dir(dict)
[02:30:09] <bjs> kee: sure, they are a funky implementation of interfaces
[02:30:40] <kee> I think it would've been more Pythonic to have abcs implemented as just a regular class, with maybe a decorator.
[02:30:55] <pyzozord> traits are just class "mix ins"
[02:31:06] <kee> The abc implements everything, so long as you have the required basic methods defined, but you can inherit from them.
[02:31:22] <kee> And there's a decorator that raises an exception if you didn't implement the required methods.
[02:31:23] <pyzozord> or "partial classes"
[02:31:30] <kee> pyzozord: Traits are interfaces. :-)
[02:31:31] <pyzozord> and it just doesn't feel good to me
[02:31:32] <bjs> okay but I think we're getting a bit distracted, I wasn't trying to debate the concrete way these languages implement interfaces/traits/typeclasses/ABCs but rather to try give some concrete examples that provide benefit
[02:31:47] <pyzozord> kee: no, interfaces do not have implementation
[02:31:55] <apotheon> I wonder if there's a Rust equivalent to Eloquent Ruby.
[02:31:58] <juliaEnv> kee we're probably both right since one viewpoint is the definition of ADT and another viewpoint is a concrete implementation of ADT and the concept exists both as a definition and as an implementation
[02:32:02] *** Quits: LuckyFire (~LuckyFire@79.125.173.139) (Ping timeout: 260 seconds)
[02:32:04] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[02:32:07] <kee> juliaEnv: Conceptually, we don't disagree.
[02:32:13] <kee> Literally all we disagree on is the name we give to a thing.
[02:32:19] <pyzozord> bjs: right, sorry for the tangent, carry on
[02:32:23] <bjs> pyzozord: i mean yes,  they are "mix ins" and they add to the complexity but they make the life of the programmer easier.  Really traits are "interfaces + some default implementations"
[02:32:27] <juliaEnv> kee it has more than one name because it has more than one forms. 
[02:32:40] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Client Quit)
[02:32:43] <kee> Okay‚Ä¶ All we disagree on is the thing we give to a name.
[02:33:00] <pyzozord> bjs: my point is I think they make my life more difficult not easier. I don't object to things that make my life easier as a principle :P
[02:33:04] <kee> You give the name an extra thing I don't give it.
[02:33:21] <kee> And neither does my lecturer. :-p
[02:33:42] <juliaEnv> kee there is a distinction between a specification and a concrete implementation (your point), and it is a specification of ADT and implementation of ADT, hence ADT (my point)
[02:33:55] <kee> Ah, that's not my point.
[02:34:10] <kee> ADTs aren't a specification: they're‚Ä¶ sort of‚Ä¶
[02:34:14] <kee> Like a family of functions.
[02:34:23] *** Quits: JanC (~janc@user/janc) (Read error: Connection reset by peer)
[02:34:23] *** Quits: mspe (~user@tilde.team/user/mspe) (Quit: WeeChat 2.8)
[02:34:27] <kee> ADT is to data structure as a family of functions is to a function.
[02:34:33] <bjs> pyzozord: well say I'm in Rust and I call .iter() to get an Iterator thingy. I know (by looking at the Iterator trait) what the interface of this thingy is. I can .next() and I can .map() and I can .chain() etc
[02:34:41] *** Joins: JanC (~janc@user/janc)
[02:34:42] <juliaEnv> kee by specification, I mean a definition
[02:34:54] *** Joins: mspe (~user@tilde.team/user/mspe)
[02:34:54] <juliaEnv> kee definition of operations and values
[02:35:16] <pyzozord> bjs: I don't know rust, in that particular language they might make things easier, especially that rust doesn't have classes, traits make much more sense
[02:35:30] <kee> juliaEnv: It's definition in the mathematical sense.
[02:35:34] <bjs> pyzozord: it's useful to me (as the end programmer) to have all these helper methods available to do things.
[02:35:39] <kee> ‚ÄúThere exists some object that behaves like zero‚Äù and so on.
[02:35:51] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[02:35:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[02:35:58] <bjs> pyzozord: well even if it were classes, it would have to be some kind of base class which would essentially act as the interface
[02:36:02] <kee> An abstract type is some constraints that concrete types can satisfy.
[02:36:03] <juliaEnv> kee math translates to practical languages too. In OOP, a class is data and operations on that data.
[02:36:19] <kee> It doesn't translate. Some languages can be described by the mathematics.
[02:36:23] <kee> But Java can't.
[02:36:27] <nomagno> Anyone noticed some projects use so many light/good patterns it has recently started to become a multiple-month endeavor to understand their code?
[02:36:29] <kee> Well, Java can be described by the mathematics.
[02:36:30] <nomagno> I see this with Rust, mostly
[02:36:34] <kee> But different mathematical concepts.
[02:36:38] <juliaEnv> kee a specification/definition in OOP is typically an interface (without values/data, only operations).
[02:36:42] <kee> This is true.
[02:36:43] <nomagno> I understand Rust, I can read it
[02:36:46] <pyzozord> bjs: for me classes come with abstract classes (aka interfaces)
[02:36:46] *** Joins: noteness (~noteness@user/noteness)
[02:36:46] <kee> Well, in Java-style OOP.
[02:36:48] <bjs> pyzozord: but traits/interfaces also help me as the author of a library, if I want to produce an iterator thing, the interface part lets the language check I've implemented all the right methods  and the default implementations mean I have to do less work
[02:37:07] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[02:37:07] <juliaEnv> kee Java uses class-based programming https://en.wikipedia.org/wiki/Class-based_programming
[02:37:07] <bayaz> Title: Class-based programming - Wikipedia 
[02:37:15] <nomagno> But the patterns are everywhere and I feel like I need to get a CS degree to figure out how to navigate the data structures
[02:37:19] <bjs> pyzozord: okay but classes don't have the interface part of the interface/trait/whatever which does the actual checking that you've implemented the interface
[02:37:27] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:37:28] <nomagno> The mix of functional and imperative practices in recent code doesn't help
[02:37:43] <kee> juliaEnv: Thank you so much.
[02:37:47] <nomagno> I just get scared reading the code.
[02:37:51] <kee> That's‚Ä¶ a name for it.
[02:38:00] *** Quits: tj123_ (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Read error: Connection reset by peer)
[02:38:09] *** Joins: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com)
[02:38:26] <kee> nomagno: Do you have an example?
[02:38:57] <pyzozord> nomagno: I actually find mixing some procedural, some object oriented and some functional styles pretty useful
[02:39:08] <kee> The way you say ‚Äúthe mix of functional and imperative practices‚Äù suggests you haven't reached the ‚Äúthere is no functional, there is no imperative‚Äù enlightenment yet.
[02:39:12] <juliaEnv> kee by math translating to real languages, I didn't mean it's exactly 1:1 translation, but it translates into Java
[02:39:20] <kee> There are analogies you can draw.
[02:39:23] <bjs> pyzozord: I mean you could take a language and add a `required` keyword to some methods that says that classes that inherit this class *must* override that method or something,  but then you've just re-invented ABCs
[02:39:28] <juliaEnv> translations from English to German also aren't exactly 1:1, yet the language translates
[02:39:29] <pyzozord> some things are way easier with just passing a lambda than creating these ugly classes interfaces methods whatever
[02:39:31] <kee> juliaEnv: Abstract Data Types are not useful for programming.
[02:39:33] <nomagno> kee: Yes, I've been maintaining peripheral projects for a specific FLOSS Rust videogame for months and I still can't navigate the project's code without handholding
[02:39:39] <nomagno> https://veloren.net
[02:39:40] <bayaz> Title: Veloren 
[02:39:47] <juliaEnv> kee no, I use them all the time
[02:39:52] <kee> You use interfaces.
[02:39:56] *** Joins: cliluw (~cliluw@47.147.77.43)
[02:40:00] <kee> You just call them abstract data types.
[02:40:03] <juliaEnv> kee no, I use implementations as well
[02:40:06] <nomagno> BTW this is the best game I've played in the last forever years ^
[02:40:10] <juliaEnv> kee I don't need interfaces
[02:40:16] <kee> Okay, sure.
[02:40:33] <nomagno> Thoroughly recommend it it's literally more technically interesting than all of the web browser's stack
[02:40:33] <kee> So you've got ad-hoc interfaces (not Java interfaces) going on.
[02:40:37] <juliaEnv> otherwise, if I didn't use ADTs, I'd be stuck with primitive types only
[02:40:37] <nomagno> To give an example
[02:40:42] <kee> ‚Ä¶
[02:40:43] <nomagno> It's impressive.
[02:40:47] <kee> Composite types aren't abstract data types!
[02:40:51] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[02:40:53] <kee> Abstract data types are about the interface.
[02:40:55] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[02:41:03] <kee> struct Hi { int x; int y; }
[02:41:04] <juliaEnv> composite types are ADTs
[02:41:06] <kee> This is not an abstract data type.
[02:41:14] <juliaEnv> only if you define operations there
[02:41:25] *** Quits: pmercado (~pmercado@186.107.36.107) (Ping timeout: 240 seconds)
[02:41:29] <kee> In which case, the interface you end up with is an ADT.
[02:41:32] <juliaEnv> struct Hi { int x; int y; } this is not a primitive data type
[02:41:35] <kee> You can then use that to perform algorithmic analysis.
[02:41:40] <kee> It's not a primitive data type, no.
[02:41:43] <kee> It's a composite data type.
[02:42:00] <kee> There are three types of type, to paint with a broad brush:
[02:42:02] <kee> ‚Ä¢ Primitive
[02:42:07] <kee> ‚Ä¢ Composite
[02:42:11] <kee> ‚Ä¢ Tagged union (not implemented in Java)
[02:42:13] <nomagno> 'Primitive' is meaningless in this mathy context
[02:42:18] *** Quits: maxzor (~maxzor@2a01cb04054faa00996bd0b5db51ef1b.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:42:25] <kee> nomagno: We're mixing mathy context and Java, for some reason.
[02:42:38] <nomagno> Weird but I'll follow along
[02:42:58] <bjs> pyzozord: I think generally over time languages have tried to cut down the amount of superflous syntactic constructs they have
[02:43:07] <bjs> pyzozord: like Java has interfaces *and* abstract classes, and that's just a bit over the top
[02:43:13] <nomagno> In a C context, all primitives are the same just with different sizes and some have more UB/IB than others :)
[02:43:21] <juliaEnv> struct Hi { int x; int y; int add() { return x + y; } is an ADT
[02:43:37] <kee> juliaEnv: No, the ADT from there is (give me a sec)
[02:43:59] <juliaEnv> wrong answer. The right answer is it depends on the definition, kee
[02:44:07] <kee> add : () ‚Üí ‚Ñ§
[02:44:08] <nomagno> I really am impressed by how C manages to let you build these complex aggregate types then literally gives you 5000 tools to manage them as raw bits
[02:44:08] <juliaEnv> so, according to this definition it's an ADT http://faculty.juniata.edu/rhodes/cs2/ch09a.htm
[02:44:09] <bayaz> Title: Design and Implementation of Abstract Data Types 
[02:44:24] <kee> juliaEnv: Oops, misread; that's not the ADT.
[02:44:27] <nomagno> It's like it throws aways the type system in the name of practixality
[02:44:40] <kee> The ADT is: `add : Hi ‚Üí ‚Ñ§`
[02:44:46] <juliaEnv> 1. A set of data values called the domain (the domain is x, y) and a collection of allowable operations on those values (there is an add operation).
[02:44:51] <kee> The domain is Hi.
[02:45:11] <kee> There are 1<<64 possible values in Hi.
[02:45:22] <juliaEnv> why are you mixing math with C?
[02:45:27] <nomagno> What size ints?
[02:45:36] <kee> There is an homomorphism between (Hi, add) and (‚Ñ§, +).
[02:45:45] <juliaEnv> instead of a Math expression it's possible to express the same in C as a struct
[02:45:47] <nomagno> WTF are we even doing here
[02:45:49] <kee> ADT is a mathematical concept.
[02:45:56] <kee> It is only loosely approximated by Java interfaces.
[02:46:14] <juliaEnv> ADT is also a computer science concept, something you code in C or Java or other language
[02:46:17] <nomagno> What is ADT BTW? I know what it stands for, but I joined the convo too late
[02:46:18] <kee> Or, if you want to think of it another way, Java interfaces are only loosly approximated by Java interfaces.
[02:46:24] <kee> nomagno: See Wikipedia.
[02:46:35] <kee> The conversation is about arguing what it really means.
[02:46:44] <juliaEnv> this is weird
[02:47:08] <bjs> nomagno: "abstract datatype"
[02:47:34] <kee> juliaEnv: The abstract data type is the set of all types that could be a drop-in replacement for your type.
[02:47:48] <kee> Does that make sense?
[02:48:16] <kee> (Technically, the abstract data type is probably better thought of as the constraints on the type.
[02:48:26] <kee> Or, as the set of possible values, and the operations.)
[02:49:21] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[02:49:56] <juliaEnv> well, I see what you mean from the math point of view, kee
[02:50:05] <kee> ADT is a Computer Science concept.
[02:50:10] <nomagno> I think in C I'd define an abstract data type as a bunch of operations, the composite type with the daya wrapped in a bigger composite type with function pointers for operations, and a macro that initializes the composite wrapper with the relevant functions
[02:50:10] *** Quits: optic__ (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[02:50:33] <nomagno> composite.compare(&self, other_composite)
[02:50:36] <kee> nomagno: That's what Python calls an abstract base class.
[02:50:41] <kee> And what Java calls an abstract class.
[02:50:58] <juliaEnv> ADTs emerged from the work of Liskov and her students on the CLU programming language between 1974 and 1975. They contributed significantly to the state of the art of software module specification ‚Äî the language we use to describe the interfaces that allow software modules to interact.
[02:50:58] <kee> Oh, no, actually that's what Rust calls a dynamic trait object.
[02:51:03] *** Joins: Atque (~Atque@user/atque)
[02:51:06] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[02:51:10] <kee> juliaEnv: Yeah!
[02:51:31] <kee> nomagno: That's what C calls a‚Ä¶ dynamic dispatch?
[02:51:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:51:55] <nomagno> C has no name for this.
[02:52:00] <nomagno> C programmers... No idea at all
[02:52:09] <nomagno> I just modelled it after Python
[02:52:17] <pyzozord> nomagno: simply an idea that describes how some data type behaves
[02:52:18] <bjs> it's just function pointer hackery,  aka "An everyday C program" :P
[02:52:19] <juliaEnv> ADTs in C are implemented using struct
[02:52:24] <kee> Well, technically ‚Äúdynamic trait object‚Äù appears nowhere in Rust, only in the documentation. :-p
[02:52:42] <kee> juliaEnv: You make a concrete type that satisfies the ADT.
[02:52:42] <juliaEnv> any programmer defined structure with data and operations on the data is an ADT
[02:53:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:53:03] <juliaEnv> for kee, * is a concrete ADT implementation
[02:53:19] <kee> Any programmer-defined structure with data and operations on the data is a [name of the ADT it implements].
[02:53:22] <kee> That doesn't make it an ADT.
[02:53:37] <bjs> I mean "is an ADT" is just wrong.  You could say "induces an ADT, which is the interface of this concrete implementation" which might be what you are meaning
[02:53:50] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[02:53:54] <kee> It's not an ADT, any more than `new Hi(2, 3)` is a Class.
[02:53:56] <pyzozord> "list" is an ADT, "array" is a concrete type of list adt
[02:53:58] <juliaEnv> it implements an ADT, hence it's also an ADT implementation
[02:54:06] <kee> It is an ADT implementation, yeah.
[02:54:24] <bjs> juliaEnv: yes,  but because it implements an ADT it doesn't make it the ADT,  nor does it make it some other ADT.
[02:54:25] <kee> If "ADT" is short for "ADT implementation", that's just confusing language, but not incorrect.
[02:54:30] <pyzozord> I think of ADT like POSIX of datatypes :P
[02:54:31] <kee> You have a right to name things however you like.
[02:54:35] <bjs> pyzozord: pretty much :P
[02:54:36] <kee> pyzozord: That is a good analogy.
[02:55:04] <nomagno> ... I hate that, but I understood what you meant
[02:55:10] <juliaEnv> so this is incorrect, in your opinion? http://faculty.juniata.edu/rhodes/cs2/ch09a.htm
[02:55:11] <bayaz> Title: Design and Implementation of Abstract Data Types 
[02:55:18] <kee> If you think ADT implementations are ADTs, then you're not right (or you're still using ‚ÄúADT‚Äù to refer to a different concept to us).
[02:55:25] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[02:55:28] <juliaEnv> finding: we really need a better definition of ADT, one that is clear and unambiguous
[02:55:35] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 256 seconds)
[02:55:46] <kee> juliaEnv: I've just skimmed that, and it looks right.
[02:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[02:55:56] <kee> > A thermostat as an ADT
[02:56:02] <kee> Note, not is an ADT.
[02:56:15] <juliaEnv> http://cv.znu.ac.ir/afsharchim/lectures/p50-liskov.pdf
[02:56:17] <bayaz> Type: application/pdf Size: 964.3 kB 
[02:56:25] <kee> It'll take me a while to open a PDF.
[02:56:49] <nomagno> juliaEnv: That's pigeon holing the definition into a bad OOP light pattern
[02:56:53] <nomagno> Too many constraints
[02:56:54] <bjs> pyzozord: ^ that pdf might be of interest to you,  it's the original source of the phrase "abstract datatype" and gives some nice context
[02:56:59] <arahael> kee: that pdf is far smaller than the typical website these days.
[02:57:00] <epony> from a country with restricted address space
[02:57:09] <epony> might take you longer than you expect
[02:57:12] <kee> arahael: It's not the download size that's the problem.
[02:57:15] <bjs> it's been a while since I read that one,  but it's a nice bit of history
[02:57:31] <nomagno> I agree up until the 'characteristics of an adt'
[02:57:38] <nomagno> That section is wrong
[02:58:01] *** Joins: trevors (~trevors@user/trevors)
[02:58:01] <kee> Oh, yeah, that's wrong.
[02:58:06] <kee> I skimmed past that bit.
[02:58:11] <arahael> kee: the printing time, then?
[02:58:16] <kee> Same with the "abstraction barrier".
[02:58:26] <kee> arahael: This PDF is a lot better than most.
[02:58:55] <arahael> :)  to be honest i didnt read it.
[02:59:03] <kee> The reading order of the text inside the PDF is the same as the intended reading order.
[03:00:35] <kee> > The first step is to write a program which solves the problem but which runs on an abstract machine, one which provides just those data objects and operations which are ideally suited to solving the problem.
[03:00:46] <kee> juliaEnv: This is CS, not software engineering.
[03:01:11] <kee> It's the same skills, but in a completely different framework and way of thinking about what you're doing.
[03:01:52] <kee> > In this analysis he is concerned with the way his program makes use of the abstractions, but not with any details of how those abstractions may be realized.
[03:01:59] <kee> Once it's realised, it's no longer abstract.
[03:02:27] <nomagno> Speaking of CS, dumb question: is there a name for a LBA which has output greater than its input?
[03:02:55] <kee> nomagno: Linear bounded automaton?
[03:03:10] <pyzozord> bjs: I missed that pdf, would you mind reposting it?
[03:03:10] <nomagno> kee: yes
[03:03:23] <kee> pyzozord: http://cv.znu.ac.ir/afsharchim/lectures/p50-liskov.pdf
[03:03:24] <bayaz> Type: application/pdf Size: 964.3 kB 
[03:03:30] <nomagno> But if the output size ISN'T the same as the input size it's not an LBA
[03:03:31] <pyzozord> kee: thanks
[03:03:37] <kee> nomagno: I don't think there's a name for that.
[03:03:41] <kee> Also, no, that's not true.
[03:03:49] <kee> It's still bounded. You were just wrong about the bounds.
[03:04:03] <bjs> nomagno: no linear bounded means the maximum size is bounded by the input size linearly,  not that it is exactly the same
[03:04:23] <pyzozord> did Liskov invent adt?
[03:04:28] <bjs> pyzozord: yes
[03:04:30] <kee> bjs: Actually, it means that the maximum size is bounded.
[03:04:30] <nomagno> bjs: Then what if it isn't bounded linearly, but rather is completely random?
[03:04:50] <kee> nomagno: Is there a maximum possible size it could ever use?
[03:05:00] <bjs> nomagno: then you just have a turing machine?
[03:05:10] <sonny> what is the question?
[03:05:15] <nomagno> Is completely random BUT is always bounded
[03:05:15] <kee> bjs: The "linear" refers to the automaton, not the bound.
[03:05:17] *** Joins: Enitin (~Enitin@82.180.145.230)
[03:05:30] <kee> nomagno: That's just an LBA with chaotic behaviour.
[03:05:52] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Quit: Going offline, see ya! (www.adiirc.com))
[03:05:56] <nomagno> Chaotic != random
[03:06:02] <bjs> kee: what do you mean
[03:06:19] <nomagno> I guess it'd be a probabilistic LBA
[03:06:27] <kee> bjs: Never mind; they're equivalent.
[03:06:29] <bjs> linear bounded automata have some bound on how much of the tape can be accessed, as a linear function of the length of the input
[03:06:47] <nomagno> On every step it risks trying to overstep the input and the logical framework it's running in collapsing slash it forcefully halting
[03:06:58] *** Quits: suss` (~user@user/suss) (Remote host closed the connection)
[03:07:17] *** Joins: suss` (~user@user/suss)
[03:07:17] <nomagno> bjs: Well the function in this case isnt linear
[03:07:20] <nomagno> It's random
[03:07:26] <bjs> so if you have an LBA and give it an input that's twice as long,  you can use twice as much tape
[03:07:32] <bjs> nomagno: well then it's not a linear bounded automata :P
[03:07:35] <juliaEnv> "An abstract data type was defined to be a class of objects which is completely characterized by the operations which may be performed on those objects." Programming with Abstract Data Types by Liskov, ref: http://cv.znu.ac.ir/afsharchim/lectures/p50-liskov.pdf
[03:07:37] <bayaz> Type: application/pdf Size: 964.3 kB 
[03:07:42] <nomagno> bjs: then what is it!?
[03:07:43] *** Joins: Pickchea (~private@user/pickchea)
[03:07:49] <kee> bjs: That's just giving it more tape.
[03:07:50] <bjs> nomagno: well a not-linear bounded automata :P
[03:07:56] <nomagno> Is it a properly definable mathematical structure?
[03:08:15] <nomagno> Is there any research on randomly bounded automatons?
[03:08:15] <kee> You can alternatively think of it as padding the input with however much extra space you want to give it, and it can never leave its input.
[03:08:35] <bjs> nomagno: well you haven't really properly defined what you mean, you mean like you're given an input and then after some random point the rest of the tape is snipped off or something?
[03:08:51] <juliaEnv> kee Liskov is the inventor of abstract data types. Don't be ridiculous. Plus, I've already pointed out SW engineering is the use of systematic, disciplined, quantifiable approach. So don't confuse computer science with engineering approaches.
[03:08:51] <kee> That seems not to be mathematically interesting.
[03:08:56] <kee> Except from a game theory perspective.
[03:08:58] <nomagno> bjs: Yes
[03:09:00] <bjs> nomagno: I mean ti doesn't feel well-defined, and computationally they're just turing machines
[03:09:07] <juliaEnv> kee "An abstract data type was defined to be a class of objects which is completely characterized by the operations which may be performed on those objects." Programming with Abstract Data Types by Liskov, ref: http://cv.znu.ac.ir/afsharchim/lectures/p50-liskov.pdf
[03:09:08] <bayaz> Type: application/pdf Size: 964.3 kB 
[03:09:19] <kee> juliaEnv: Yes! A class of objects.
[03:09:26] <kee> That's mathematical terminology.
[03:09:28] <juliaEnv> kee a class is not an interface, get it
[03:09:36] <kee> No, "class" has a different mathematical term.
[03:09:37] <juliaEnv> kee no, that's an object-oriented terminology
[03:09:42] <juliaEnv> oh, OK
[03:09:43] <kee> It's not. It uses the same words, but it's not.
[03:09:48] <nomagno> :P
[03:09:49] <nomagno> Are Turing machines considered turing tarpits?
[03:09:55] <kee> You don't say "a class of objects" in OO terminology, do you?
[03:10:00] <juliaEnv> kee so he's writing about programming there and you believe he's using mathematical terms
[03:10:02] <nomagno> As in, marhematical 7-tuple turing machines
[03:10:06] <kee> juliaEnv: ‚Ä¶ Yes?
[03:10:09] <juliaEnv> kee he also gives code examples
[03:10:12] <kee> Yes.
[03:10:27] <bjs> juliaEnv: Liskov's work predates what we call "interface" and "class" by decades,  so please don't get too confused by the phrasing of that paper. There is more context as you read on and see how she uses "abstract" and "abstract type" that gives more insight into what she was doing
[03:10:32] <kee> juliaEnv: That's normal for CS papers.
[03:10:32] <bjs> and what she meant by ADT
[03:10:37] <juliaEnv> kee an OOP class has data and methods, so it's an OOP class too
[03:10:48] <bjs> juliaEnv: she*
[03:11:23] <kee> juliaEnv: That's not correct.
[03:11:32] <kee> Behold, a man!
[03:11:38] * kee presents a plucked chicken
[03:11:50] * kee gets attacked by chicken
[03:12:08] <sonny> liskov the compiler optimizations person?
[03:12:16] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[03:12:24] *** Joins: duuude (~user@user/duuude)
[03:12:41] <kee> juliaEnv: This is what she meant by class: https://en.wikipedia.org/wiki/Class_(set_theory)
[03:12:41] <bayaz> Title: Class (set theory) - Wikipedia 
[03:12:43] <bjs> sonny: Liskov is a computer scientist, she has done many things
[03:14:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:15:16] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[03:15:42] * kee apologises to the chicken
[03:16:03] *** Joins: moose (~moose@user/moose)
[03:16:50] <apotheon> think of the adults
[03:17:30] <juliaEnv> kee Liskov clearly makes a contrast between primitive types built into a programming language and abstract data types that are abstractions defined by a developer that can be characterized by data objects and operations on those data objects. Even if ADTs predate interfaces, bear in mind an interface in OOP cannot define data values, so you actually need a class instead and that class might as well be abstract class.
[03:17:55] <juliaEnv> but it doesn't necessarily have to be an abstract class, it can also be a concrete class, as long as it's easy to use.
[03:17:58] <bjs> juliaEnv: kee: back in the 70s the first "object orientated" languages were just being developed, like smalltalk and simula. I forgot actually, but that paper does infact contrast the simula classes with her concept of representing the ADTs and the difference between them
[03:18:22] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[03:19:01] <kee> juliaEnv: That's a limitation of Java, not of OOP.
[03:19:08] <kee> Not even of class-based OOP.
[03:19:15] <kee> Rust traits can represent that.
[03:19:42] <juliaEnv> it's not a limitation, it's a design of OOP
[03:19:54] <kee> Then how come Rust can do it?
[03:19:54] <juliaEnv> traits are an extension of OOP
[03:20:02] <kee> Java didn't invent OOP.
[03:20:09] <juliaEnv> neither did Rust
[03:20:14] <kee> This is true.
[03:20:23] <ProfSimm> What's another name for a value "literal"
[03:20:35] <kee> ProfSimm: repr?
[03:20:37] <juliaEnv> Simula was the first known OOP language it was already used in the late 60's
[03:21:00] *** Quits: CockEye (~CockEye@2600:1700:6f73:a490:baca:3aff:fe81:61fa) (Quit: zzz)
[03:21:06] <ProfSimm> Dunno
[03:21:51] <kee> juliaEnv: Just because Java can't represent ADTs, that doesn't mean the closest thing Java has is an ADT.
[03:22:27] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[03:22:44] <juliaEnv> Java can both define and implement ADTs.
[03:23:05] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[03:23:06] <kee> It can define (limited) interfaces.
[03:23:21] <kee> It can define concrete types, with methods.
[03:23:30] <kee> Can't do ADTs, not as they are in that paper.
[03:23:35] <juliaEnv> going back to their definition by Liskov, in Java ADTs are basically corresponding to the concept of a class with some properties and some methods that operate on those properties. 
[03:23:42] <kee> No.
[03:23:48] <juliaEnv> yes
[03:23:48] <kee> ADTs are that, but abstract.
[03:23:52] <juliaEnv> no
[03:23:57] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb) (Ping timeout: 240 seconds)
[03:24:06] <juliaEnv> ADTs represent abstractions but they are classes
[03:24:14] <kee> They aren't Java-style classes.
[03:24:23] <kee> They're a description of the interface that a class provides.
[03:24:27] <kee> They're how the class behaves.
[03:24:33] <kee> They're not anything concrete about it.
[03:24:34] <juliaEnv> you can of course define your classes with interfaces, but you can as well define your classes as abstract classes, for example
[03:24:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:24:48] <kee> Neither a Java interface nor a Java abstract class is an ADT.
[03:24:54] <kee> Java does not contain the concept of an ADT>
[03:24:54] <juliaEnv> ever heard of an abstract class?
[03:24:56] <kee> Yup!
[03:25:06] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[03:25:11] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[03:25:12] <kee> Abstract classes in Java are classes that don't necessarily have implementations for all their methods, and you can't instantiate them.
[03:25:14] <kee> That's not an ADT.
[03:25:17] <juliaEnv> an abstract class can have values and operations to operate on those values
[03:25:32] <kee> A dead parrot nailed to a perch also has those.
[03:25:37] <kee> Doesn't make it an ADT.
[03:26:08] <juliaEnv> kee it does make an abstract class an ADT by Liskov's definition
[03:26:33] <kee> bjs: Can I get a second opinion?
[03:27:00] *** Joins: HP55555 (~HP51248@49.205.103.133)
[03:27:30] <juliaEnv> kee and based on modern versions of Java, interfaces can have values as well as defalt implementations (a concept similar to traits) http://www.btechsmartclass.com/java/java-variables-in-interfaces.html https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html so it's possible to design and implement ADTs also using Java interfaces
[03:27:31] <bayaz> Title: Java Tutorials - Varaibles in Interfaces in java 
[03:27:31] <bayaz> Title: Default Methods (The Java? Tutorials > Learning the Java Language > Interfaces and Inheritance) 
[03:27:54] <juliaEnv> it's kinda obscure though to use Java Interfaces for both the definition and the default implementation. It's however valid.
[03:28:03] <kee> juliaEnv: Java interfaces can't have associated constants.
[03:28:12] <juliaEnv> but they can have variables
[03:28:46] <juliaEnv> https://www.studytonight.com/java/java-interface.php
[03:28:48] <bayaz> Title: Java Interfaces | Studytonight 
[03:28:50] <kee> They can have static fields, but those are just fields of the interface.
[03:28:58] <kee> Look, this isn't about Java.
[03:29:02] <kee> ADTs are nothing to do with Java.
[03:29:06] <kee> They don't exist in Java.
[03:29:14] <kee> They are used for algorithmic analysis.
[03:29:15] *** Quits: Akuli (~Akuli@213.216.208.2) (Quit: Akuli)
[03:30:16] <bjs> Liskov is very careful with her wording here.  She carefully avoids saying that any of the concrete programming constructs are/is an ADT,  but rather than they define objects which implement that abstract type.  In the world she defines here, the abstract type is implemented by other (what we would call "concrete") types
[03:30:28] <juliaEnv> Liskov writes she invented them as means of creating abstractions that programmers can use, so that they are not stuck only with primitive types.
[03:30:43] <kee> juliaEnv: That doesn't mean they're the same as everything else invented for that purpose.
[03:32:05] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb) (Ping timeout: 252 seconds)
[03:32:33] <bjs> The point of the work here was to try come up with a system to allow the programmer to define the abstract type separately from the concrete type that implements it,  so that the end user can write code with respect to the abstract type which has no information about the implementation.
[03:32:38] *** Quits: pizdets_ (~pizdets@183.182.114.133) (Ping timeout: 252 seconds)
[03:32:55] <juliaEnv> kee that means when a developer needs a new abstraction for some purpose, for example for calculating his salary after tax, he can design and implement an abstraction for it and then others can keep using too without worrying about how it is implemented because it is fully defined by the value and operations.
[03:33:13] <bjs> Re-reading it, she defines these clusters which let you make new types (with `rep`) which implement some abstract type implemented by `cluster`s
[03:33:58] *** Joins: pizdets (~pizdets@183.182.115.102)
[03:34:14] <kee> juliaEnv: Value, here, means ‚Äúwhatever represents ‚Ç¨15.80 weekly salary‚Äù, not Salary { frequency: Frequency.WEEKLY, eurocents: 1580 }.
[03:34:28] <juliaEnv> Liskov's point was programming with these reusable abstractions suitable for a developer's problem area
[03:34:47] <juliaEnv> as opposed to programming with primitive types
[03:34:50] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[03:34:50] <kee> I think so, though I've only skimmed the thing.
[03:34:55] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[03:34:55] <kee> But‚Ä¶ not to your second thing.
[03:35:40] <kee> You can perfectly well have a primitive as the implementation for an ADT.
[03:35:48] <juliaEnv> anyway, so I was right that it's not only an interface. It is fully defined by an interface. But it's an abstraction that needs to be coded.
[03:35:58] <kee> It needs to be coded, yeah.
[03:36:02] <kee> But the ADT isn't what's coded.
[03:36:06] <juliaEnv> And it's coded as a class with values and operations, so an OOP class.
[03:36:09] <kee> The ADT describes what could be coded.
[03:36:19] <bjs> The way she words the sentence explaining this is insightful,  calling the first part of that cluster the "interface" and saying that implementations of the cluster implements "the abstract type" again re-inforcing the idea that there are 2 types here: an abstract one (without implementation, just an interface) and a concrete one (as defined by `rep`)
[03:36:20] <juliaEnv> no, that's an ADT definition, kee
[03:36:29] <juliaEnv> an ADT definition describes what could be coded
[03:36:32] <juliaEnv> read Liskov
[03:37:02] <kee> juliaEnv: ‚ÄúADT definition‚Äú appears nowhere in the paper.
[03:37:34] <kee> But what you think of as ‚ÄúADT definition‚Äù is what everyone else is calling ‚ÄúADT‚Äù.
[03:37:41] <kee> (For some value of ‚Äúeveryone else‚Äù.)
[03:37:43] <juliaEnv> search for "defining abstract data types"
[03:38:15] <juliaEnv> then also search for "definition" in the paper
[03:38:31] <kee> > In this section we outline the areas of work that are most closely related to clusters in that they provide some tools for defining abstract data types, and we discuss how the cluster approach differs from that work.
[03:38:41] <kee> That doesn't say what you're saying.
[03:39:04] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[03:39:37] *** Quits: Iolo (~iolo@user/Iolo) (Quit: Leaving)
[03:39:44] <KillerWasp> I hope you enjoyed my 15 hours of streaming.
[03:39:57] <kee> Aw, I missed it. :-(
[03:40:10] <KillerWasp> kee: still are active.
[03:40:28] <KillerWasp> maybe give some hours more.
[03:40:31] <juliaEnv> kee you haven't searched for all occurences then
[03:40:41] <kee> KillerWasp: Sadly, I have to acquire foodstuffs in order to not starve. Internet arguments distract from the bare necessities. Don't wait up for me.
[03:40:53] <KillerWasp> ok
[03:41:04] <kee> juliaEnv: Can you point at the section you mean, instead of just saying ‚Äúsearch for it‚Äù?
[03:41:04] <bjs> juliaEnv: kee: i recommend against reading papers by searching for keywords, just read it from the start.  You'll get a much better idea of what she was doing and trying to achieve here
[03:41:18] <kee> bjs: I've been trying to, but I haven't got past the second page yet.
[03:41:45] <KillerWasp> kee: To solve those problems I have created automated programs, so I don't have to waste time.
[03:43:13] <bjs> kee: the rough top-level sketch is that she defines abstraction as hiding irrelevant details, then defines abstract datatype as a class/type/collection of 'abstract' objects,  which contain only information about their operations.  She then defines a new PASCAL-like programming language with new constructs that let you define and use abstract data types. 
[03:43:33] <juliaEnv> bjs I've read the actual paper. I also recommend against keyword searching, but hopefully kee will read it from the beginning to get the intended context
[03:43:46] <kee> bjs: Oh, hey. I did that, briefly, in my One Programming Language to Rule Them All.
[03:43:55] <kee> Of course it had already been done in the 1980s.
[03:44:28] <farn> This conversation seems to have started a little over 2 hours ago. I do wonder what new information everyone involved has learned so far
[03:44:31] <[itchyjunk]> ;_;
[03:44:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:44:36] <juliaEnv> kee read the paper, or at least the first few pages. I've already pointed out what to search for, but it seems like you didn't have enough context (that's contained in the previous pages) to interpret it as intended.
[03:44:42] *** Joins: trevors (~trevors@user/trevors)
[03:44:43] <kee> farn: Well, I got linked an awesome paper, but apart from that, nothing.
[03:44:47] <bjs> kee: this language contains a `cluster` construct,  which produces an "abstract type" with information only about the set of operations available.  Inside a cluster definition you can create a type that implements the abstract type, using the create and `rep` keywords.
[03:45:20] <kee> Corollary to ‚Äúit was done in the 80s‚Äù: the gal from the 1980s did it better than you.
[03:47:03] <bjs> kee: the idea being that the two types are separate,  you use the abstract type (in the example `stack`) in your code which represents the ADT and has information about the operations available and nothing else. Then inside the `cluster` you have a new type (called `s`) which is the actual concrete data structure
[03:47:56] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[03:47:59] <kee> Hmm. That's interesting. Sounds different to the Wikipedia definition.
[03:48:29] <kee> Oh, never mind, it is the same.
[03:48:34] <bjs> kee: not really?
[03:48:48] <kee> The abstract data type isn't the `s`.
[03:48:49] *** Joins: Visne (~Visne@dhcp-077-248-174-092.chello.nl)
[03:49:06] *** Quits: hexnewbie (~hexnewbie@user/hexnewbie) (Ping timeout: 245 seconds)
[03:49:34] <juliaEnv> "The result of this research is the programming language CLU, a predecessor of many modern OOP languages. You could define abstract types with it, and then create instances of those objects" so ADTs are classes and you can create instances. That's what I'm saying.
[03:49:54] <bjs> yes it's the same, `stack` is your abstract type which tells you what operations you have but `s` is the concrete data structure (I should say, `s : rep(element_type);` then `rep(element_type)` is the new concrete type and s is the concrete data structure, if we want to be very precise)
[03:50:21] <juliaEnv> s is a primitive data type
[03:50:24] <kee> juliaEnv: Depends what ‚Äúthose objects‚Äù is.
[03:50:29] <kee> juliaEnv: No, s is not a primitive data type.
[03:50:35] <juliaEnv> is a char
[03:50:36] <kee> Well, it might be, but not really.
[03:50:47] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 256 seconds)
[03:50:50] <juliaEnv> if s is a char then s is a primitive data type
[03:51:02] <kee> No, s is a new data type.
[03:51:08] <kee> That just happens to be a char underneath.
[03:51:10] <juliaEnv> if fooInstance is a Stack then fooInstance is an ADT
[03:51:18] <kee> No, Stack is an ADT.
[03:51:21] <bjs> juliaEnv: no no, in the stack cluster `s` is a data structure (an instance) of the `rep(element_type)` type, which is a new type
[03:51:30] <juliaEnv> fooInstance is an instance of an ADT
[03:51:37] <juliaEnv> an ADT can be instantiated and used
[03:51:45] <juliaEnv> an ADT is a class
[03:51:54] <kee> That's not right.
[03:51:58] <juliaEnv> The result of this research is the programming language CLU, a predecessor of many modern OOP languages. You could define abstract types with it, and then create instances of those objects
[03:52:03] <juliaEnv> this is why it's right
[03:52:05] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:52:17] <kee> You keep quoting that. It depends what ‚Äúthose objects‚Äù means; I haven't got far enough to correct you.
[03:52:17] <juliaEnv> source: https://medium.com/a-computer-of-ones-own/barbara-liskov-inventor-of-abstract-data-types-9f8908fdcf86
[03:52:18] <bayaz> Title: Barbara Liskov???Inventor of Abstract Data Types 
[03:53:04] <juliaEnv> those objects means instances of ADTs
[03:53:09] <bjs> juliaEnv: if you look at the stack cluster, you get two different types. You get the abstract type the cluster implements (called "stack") and you get the internal type that is the implementation itself, in this case that type is an anonymous record type created by `rep(element_type)` and the data structure is called `s`
[03:53:25] <bjs> this is the core point of the paper here, to split these two things up
[03:53:53] <juliaEnv> that paper however also mentions abstract data objects and their use by programmers who only have to know the operations, not the implementation details
[03:54:09] <kee> juliaEnv: That's analogous to interface objects in Java.
[03:54:16] <juliaEnv> not at all
[03:54:16] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[03:54:21] <juliaEnv> you can't instantiate an interface
[03:54:36] <juliaEnv> an ADT can be instantiated and used as you can find out
[03:54:51] <juliaEnv> so it's analogous to a class
[03:54:54] <kee> You can't instantiate an interface because Java's type system is rubbish.
[03:54:56] <bjs> juliaEnv: to get an "abstract" type, with no implementation details and only the "interface" (name, constructor parameters, and operations) and a type that is a concrete implementation which contains all the information.
[03:55:06] *** Joins: Tazmainian (~Tazmainia@83.80.169.186)
[03:55:14] <juliaEnv> you can't instantiate an interface because an interface isn't a class
[03:55:18] <kee> juliaEnv: If you could have static methods on interfaces and have them work, it would be fine.
[03:55:20] <bjs> juliaEnv: it's similar to a class, much like how interfaces are similar to classes, and the presentation by Liskov here sort of merges both classes and interfaces into one
[03:55:24] <kee> juliaEnv: Think generics.
[03:55:37] <juliaEnv> the point is it has implementation details, but you don't have to know them to instantiate it
[03:55:41] <bjs> juliaEnv: can you see that Liskov's setup here gives you two types? one "abstract" and one internal?
[03:55:52] <juliaEnv> further, you don't have to know these implementation details to use it
[03:56:09] <juliaEnv> so, ADT is a class that you can use without knowing its internals
[03:56:12] <kee> juliaEnv: You're paying attention to all the similarities. None of the differences.
[03:56:20] *** Joins: hexnewbie (~hexnewbie@user/hexnewbie)
[03:56:30] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[03:56:34] <juliaEnv> I don't think you have read the paper, kee
[03:56:41] <kee> You're right. But bjs has.
[03:56:51] <kee> I'm only on page 3, because I keep stopping to say stuff to you. :-p
[03:56:52] <juliaEnv> not sure how extensively, if in full
[03:56:59] <kee> And you have?
[03:57:04] <juliaEnv> OK, I've read the paper and https://medium.com/a-computer-of-ones-own/barbara-liskov-inventor-of-abstract-data-types-9f8908fdcf86 also
[03:57:05] <bayaz> Title: Barbara Liskov???Inventor of Abstract Data Types 
[03:57:16] <juliaEnv> gtg, gn
[03:57:25] *** Quits: juliaEnv (~juliaEnv@h-37-123-164-79.A137.corp.bahnhof.se) (Quit: Going offline, see ya! (www.adiirc.com))
[03:57:31] <bjs> kee: just read it, it's not a very hard paper to follow (sometimes old papers can be incomprehensible but this one is fine)
[03:57:55] <ProfSimm> She invented abstract types?
[03:58:09] <kee> bjs: I know; but it's hard to follow when somebody else is saying different meanings of the terminology every 20 seconds.
[03:58:10] <bjs> I've had a head start because I first read it like 6 years ago,  so I already knew what it said roughly. Although I forgot it explicitly contrasted with simula classes
[03:58:16] <bjs> ProfSimm: yes
[03:58:24] <bjs> or at least, coined the term
[03:58:30] *** Quits: Tazy (~Tazmainia@83.80.169.186) (Ping timeout: 252 seconds)
[03:58:39] <ProfSimm> bjs: sounds wrong to call it invented indeed, ADT is way older than 1974
[03:58:54] <ProfSimm> OK, so called it
[03:58:56] <bjs> Sure people have been using abstractions since before someone said "look, an abstraction!"
[03:58:57] <bjs> :)
[03:59:00] *** Quits: inky_ (~inky@5.77.192.158) (Remote host closed the connection)
[03:59:10] <ProfSimm> "The idea that software programming was an intellectual activity that required a great deal of thought was kind of controversial ‚Äì Barbara Liskov"
[03:59:16] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:59:17] <ProfSimm> It's becoming controversial again
[03:59:25] <ProfSimm> If I judge by most code I see
[04:00:28] *** Joins: c7s (~c7s@user/c7s)
[04:01:14] *** Quits: HP55555 (~HP51248@49.205.103.133) (Ping timeout: 252 seconds)
[04:02:04] *** Quits: Tazmainian (~Tazmainia@83.80.169.186) (Read error: Connection reset by peer)
[04:02:16] *** Joins: junebug (~junebug@2600:1700:3db0:2540:481:39cc:c7b4:e39c)
[04:02:32] <zzz> replace "software programming" for "playing the piano" and you'll see how little sense thinking about it this way makes
[04:05:45] <apotheon> zzz: I'm not sure what you're saying.
[04:06:26] <zzz> you can't judge how much of an intelectual activity something is by the ammount of poor performers there are
[04:06:30] *** Quits: bnchs__ (~bnchs@41.251.58.72) (Remote host closed the connection)
[04:06:39] <zzz> you can actually make the opposite argument
[04:07:12] <nomagno> Programming is unambiguously becoming more unspecialized
[04:07:17] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb) (Ping timeout: 252 seconds)
[04:07:38] <nomagno> Which is counterintuitive considering society as whole holds specialization in thr highest possible regard
[04:07:45] <zzz> i disagree
[04:07:54] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[04:07:55] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[04:08:00] <zzz> fullstack is no longer as achievable as it used to be
[04:08:33] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[04:08:40] *** Joins: noteness (~noteness@user/noteness)
[04:08:57] <nomagno> zzz: Well, look at the ratio of people getting their first programming job as a webdev based on portfolio alone and compare it to all others combined.
[04:09:30] <zzz> because there are more programming roles to fill
[04:10:04] *** Joins: trevors (~trevors@user/trevors)
[04:10:17] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[04:10:31] <zzz> that's a result of informatizating everything, not an argument for the lessen on specialization
[04:10:43] <zzz> "programmer" is hardly a job description anymore
[04:10:49] <nomagno> Well that's definitely a decrease in specialization isn't it. Companies don't see any short-term effects of lowering their standards in this specific way, so they roll with it
[04:10:53] *** Quits: junebug (~junebug@2600:1700:3db0:2540:481:39cc:c7b4:e39c) (Quit: Leaving)
[04:11:15] *** Quits: TastyWiener95 (~uhhh3@user/tastywiener95) (Client Quit)
[04:11:33] <zzz> nomagno: i think your mistake is treating "programming" as one job
[04:11:59] <zzz> it's the same as saying "artist"
[04:12:18] <nomagno> zzz: Well if you divide it into several jobs you have webdev 99% then everyone else, I guess
[04:12:32] <apotheon> zzz: Thanks for explaining.
[04:12:40] <nomagno> But yeah I agree
[04:12:50] <nomagno> Very reasonable distinction nowadays
[04:13:24] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:13:34] <apotheon> I think you're talking about different things.
[04:13:46] <apotheon> zzz: I think you're talking about how programming needs specialization.
[04:13:57] <apotheon> nomagno: I think you're talking about how hiring managers aren't hiring as much for specialization.
[04:14:27] <apotheon> or something like that
[04:14:39] *** Joins: herjazz (~herjazz@p10295192-ipngn22201marunouchi.tokyo.ocn.ne.jp)
[04:16:06] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[04:16:14] <zzz> that-s a comment on the poor performance of hiring managers more than anything
[04:16:36] <kee> I don't know. A good programmer can do anything.
[04:16:40] <sonny> I doubt either side can tell
[04:16:56] <sonny> are hiring managers bad, or programmers bad etc
[04:16:57] <kee> Just like a good mathematician can do anything, or a good writer can do anything.
[04:17:08] *** Joins: flaqoniun (~F@32.211.211.39)
[04:17:12] <zzz> kee: i don't think that's true
[04:17:23] <kee> Now, hiring manager requires specialisation.
[04:17:32] <kee> ‚ÄúHiring manager‚Äù isn't a job.
[04:17:43] <sonny> lol
[04:17:48] <kee> You need to learn enough about the field you're hiring for to be able to hire well.
[04:18:00] <kee> That usually involves becoming at least an amateur.
[04:18:24] <kee> (Though really, it's job training, you should be getting paid for it.)
[04:18:53] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb) (Ping timeout: 256 seconds)
[04:19:06] <kee> All programming I've come across is the same thing.
[04:19:15] <kee> OS dev, web dev‚Ä¶ not that different.
[04:19:54] *** Joins: gambl0re (~gambl0re@cpe688f2e1852a3-cm688f2e1852a0.cpe.net.cable.rogers.com)
[04:20:37] <kee> Oh, actually, there's one exception: drivers.
[04:20:44] <kee> Writing drivers is a very different thing.
[04:20:49] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[04:21:48] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[04:22:05] *** Joins: flaqoniun (~F@32.211.211.39)
[04:24:47] <kee> I guess drivers aren't really all that different to event loops. They're just a bit more complicated.
[04:25:41] *** Quits: gambl0re (~gambl0re@cpe688f2e1852a3-cm688f2e1852a0.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[04:27:30] *** Joins: juliaEnv (~juliaEnv@h-37-123-164-79.A137.corp.bahnhof.se)
[04:29:54] *** Joins: cincoswim (~cincoswim@cm-72-241-33-17.buckeyecom.net)
[04:30:27] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[04:32:36] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[04:34:04] *** Joins: CockEye (~CockEye@2600:1700:6f73:a490:baca:3aff:fe81:61fa)
[04:34:23] *** Quits: el_kevino (~mote@2604:a880:400:d1::901:5001) (Quit: WeeChat 3.4.1)
[04:35:57] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[04:36:34] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:37:42] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:38:00] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[04:38:12] *** Quits: flaqoniun (~F@32.211.211.39) (Ping timeout: 240 seconds)
[04:38:26] <juliaEnv> kee I've looked up what the usual, easy to understand sources on ADTs say and they really say the same as you do, i.e. that an ADT is a contract and a data structure is one of its possible implementations.
[04:39:15] *** phaisedArray is now known as phaise
[04:39:56] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[04:40:09] <kee> juliaEnv: Aw‚Ä¶ now I don't know something you don't.
[04:40:49] <kee> Thanks for saying so, though! :-)
[04:40:58] *** Quits: newwebdev13 (~newwebdev@78.135.91.191) (Read error: Connection reset by peer)
[04:41:53] <kee> Contract is perhaps a better way to describe it than interface.
[04:42:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[04:43:38] *** Quits: CockEye (~CockEye@2600:1700:6f73:a490:baca:3aff:fe81:61fa) (Quit: CockEye)
[04:43:57] <nomagno> What do these "400 million years of computing time" ballpark metrics used for cryptography mean?
[04:44:05] <nomagno> CPUs have different speeds.
[04:44:15] <kee> nomagno: It means if you have 400 million computers, it won't take all that long.
[04:44:46] <kee> People just pick some arbitrary CPU. CPUs aren't millions of times faster than other CPUs, so it gets you in the right ballpark.
[04:44:49] <nomagno> kee: Depends on their speed.
[04:45:07] <vdamewood> nomagno: Well, they are ballparks, after all.
[04:45:09] <kee> nomagno: If the computers are slower, the cryptography gets easier.
[04:45:16] <kee> QED.
[04:45:27] *** Joins: CockEye (~CockEye@2600:1700:6f73:a490:baca:3aff:fe81:61fa)
[04:45:54] <nomagno> I can definitely make a CPU that calcilatest crap 400 million times slower than my current CPU
[04:46:06] <vdamewood> And yeah, these days, every CP is at least the same order of magnitude in terms of clock speed. Single-digit HGz.
[04:46:09] <vdamewood> CPU
[04:46:11] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:46:14] <nomagno> One such CPU is me manually using pen-and-paper to run through a program
[04:46:14] <kee> Just simulate a large number of Bombas at realtime speed.
[04:46:22] <beaky> what about fpga they can run screaming-fast
[04:46:23] <kee> Simulate a few trillion of them.
[04:46:30] <kee> Then you can break all cryptography instantly.
[04:47:03] <kee> beaky: FPGAs running screaming-fast is why you have RAM-heavy cryptography algorithms.
[04:47:22] <vdamewood> nomagno: How is it even relevant that you can? People care about practical systems with mass-produced CPUs. Not some edge case that someone came up with in their workshop.
[04:47:23] *** Quits: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[04:47:28] <nomagno> What does screaming-fast mean?
[04:47:40] <Decker> :)
[04:47:40] <beaky> like sick speeds
[04:47:43] <kee> nomagno: It means don't put your hand on it.
[04:47:49] <Decker> it means you go so fast you scream - think roller coaster
[04:47:54] <kee> Don't put your hand on a screaming-fast car.
[04:47:56] <Decker> think roocket pack to the moon
[04:48:25] <KillerWasp> Once you learn a language, you are already a professional and are hired as a well-paid employee. Experience doesn't matter at all here (the time you spend working doesn't count as programming experience). The artistic talent that is needed does not matter.
[04:48:25] <Decker> so fast you really feel you shouldn't be going so fast
[04:48:39] *** Joins: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[04:48:47] <nomagno> FPGAs are slower than CPUs last time I checked
[04:48:49] <nomagno> Relatively speaking
[04:48:53] <kee> KillerWasp: That's not true. Programming requires a lot of artistic talent.
[04:49:01] <Decker> psh at input clock maybe
[04:49:01] <kee> nomagno: In general, yeah.
[04:49:05] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:49:06] <kee> At specific problems, no way.
[04:49:16] <Decker> but fpga are more parallel than cpy  - so you multiply clock by N gates
[04:49:21] <kee> A CPU emulated on a FPGA is slower than the bare-metal CPU, I can believe.
[04:49:33] <kee> But it's usually faster than a CPU emulated on a CPU.
[04:50:05] <Decker> 1M gates and you're like 1Exa ticks
[04:50:17] <kee> FPGAs make good analogue radios.
[04:52:05] <kee> Decker: Are FPGAs more parallel than GPUs?
[04:52:16] <ProfSimm> kee: yes
[04:52:36] <Decker> kee yup
[04:52:47] <Decker> that's why asic miners > gpu miners (for fixed algorithms)
[04:52:51] <ProfSimm> kee: but if you see a FPGA as a configurable CPU core, then it's not parallel at all :P
[04:52:53] <nomagno> Speaking of analog radio, is there any radio transmitter+receiver that uses a single pin for input and another for output?
[04:53:05] <kee> nomagno: Yes.
[04:53:15] <nomagno> Mainly so I can toy around with semi-realistic comms
[04:53:24] <kee> Do you want analogue output?
[04:53:36] <Decker> an arduino would probably do it
[04:53:51] <ProfSimm> Having both analog and digital is the way to do
[04:53:52] <nomagno> Well, as simple as they can be found.
[04:53:53] <ProfSimm> go*
[04:53:59] <Decker> with just toggling gpio pins ; but maybe not - the carrier is pretty high rate
[04:54:35] <nomagno> I don't know, I suck at radio stuff. Just give me keywords
[04:54:48] <Decker> 4?
[04:54:57] <nomagno> What
[04:55:12] <Decker> pretty much all of them use 1 input and 1 output; and a interlock so the input doesn't hear the output
[04:55:15] <kee> An FPGA could toggle them fast enough.
[04:55:18] <Decker> and power and ground
[04:55:35] <kee> Decker: You don't need power if you can exploit the input enough.
[04:55:48] <kee> Who needs signal quality?
[04:55:58] <Decker> kee maybe - but then you can only transmit as far as you can hear (less)
[04:56:17] <Decker> except like in a burst or something
[04:57:12] <Decker> like there's these single chop bluetooth-fmtransmitters
[04:59:23] <Decker> nomagno https://www.digikey.com/en/products/result?s=N4IgTCBcDaIE4DMAEAXOBDAdgZwMYEsBTAN0LiRAF0BfIA ?  
[04:59:24] <bayaz> Title: Electronic Components and Parts Search | DigiKey Electronics 
[04:59:39] *** Quits: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[05:00:06] <kee> https://example.org/steal-bayaz's-ip-address/
[05:00:23] *** Joins: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[05:00:29] <Decker> want mine?
[05:00:36] <Decker> I'll give you mine if you give me yours :p
[05:01:06] *** Joins: flaqoniun (~F@32.211.211.39)
[05:01:19] <kee> Decker: 127.0.0.1
[05:01:24] <Decker> ::0
[05:01:51] <kee> 127.0.0.2
[05:02:02] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[05:02:17] <kee> The real reason we need multiple loopback addresses? Webdev.
[05:02:27] <kee> Browsers cache unpredictably.
[05:03:00] <ProfSimm> kee: I use different ports
[05:03:10] <kee> I ran out.
[05:03:20] <amigojapan> Good morning
[05:03:20] <Decker> 10.
[05:03:28] <ProfSimm> You... ran out of 65k ports/
[05:03:30] <Decker> 172.16-31.
[05:03:42] <kee> ProfSimm: Well, I was only using 1024 and above.
[05:03:52] <kee> 64.5k ports.
[05:03:58] *** Quits: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[05:04:10] <Decker> there's only 1 wire
[05:04:12] <kee> And a few others were also in use, for some reason or other.
[05:04:41] <Decker> having more sockets is just a longer list to search to match hardware to socket
[05:04:46] <kee> It's surprising how many services on a Debian machine are listening on localhost.
[05:05:04] <Decker> ::1
[05:05:13] <Decker> (was a typo before sorry)
[05:05:19] *** Joins: entropygain (levitate@user/entropygain)
[05:05:24] <Raziel> 65k ports is really limiting, when are we getting the opportunity to unleash 2^32 ports instead?
[05:05:28] <kee> Decker: Ah, that resolves!
[05:05:33] <kee> I'm gonna pwn ur system so bad.
[05:05:35] <Raziel> or, hell, at this point, just do 2^64 already
[05:05:48] <Decker> well I already have yours :)
[05:05:55] *** Parts: kee (~wizzwizz4@user/wizzwizz4) ("Flood detected on ::1.")
[05:05:58] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:05:59] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[05:06:03] *** Joins: Akiva (~Akiva@user/Akiva)
[05:06:42] <ProfSimm> wait, how do ports work in IPv6
[05:06:56] <kee> ProfSimm: Same as in IPv4.
[05:06:58] <Decker> kee pro move :) alt-f4 much?
[05:07:00] <ProfSimm> hm
[05:07:10] <Decker> same
[05:07:17] <Decker> [::1]:1234
[05:08:15] <flaqoniun> Raziel at this pace, never
[05:08:31] *** Joins: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[05:08:46] <ProfSimm> Kinda weird we call it ports. The size of a "port" doesn't suggest the small devices we use. They should've been called either something generic like 'orifices' or maybe 'pores'.
[05:08:51] <ProfSimm> HTTP pore 80
[05:09:01] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:09:25] <Decker> well blame EE students at berkley?
[05:09:33] <Decker> all we have is berkley sockets
[05:09:43] <kee> ProfSimm: Back when it was designed, computers were that big.
[05:09:51] <ProfSimm> kee: jeez
[05:09:51] <kee> As big as container ships!
[05:09:59] <kee> Made of cogs, and powered by coal.
[05:10:12] <InPhase> Just wait until ProfSimm learns about the network bus driving down the street.
[05:10:43] <kee> InPhase: Is that the one that transported packets for you?
[05:10:58] <kee> In the Local Area Network?
[05:11:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:11:10] <kee> I know there was another version that used some other technology, can't remember what it was.
[05:11:10] <Raziel> kee, I wish I could power my computer by coal, it'd be cheaper
[05:11:12] <Raziel> >_>
[05:11:18] <kee> Raziel: Well, you can!
[05:11:27] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:11:32] <kee> Simply purchase a decommissioned coal plant and set up a Bitcoin mining rig.
[05:11:37] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[05:11:57] <Raziel> kee, I think I'm too late for that, they want to re-commission them already
[05:12:07] <InPhase> Before TCP, UDP, and IP, there was UPS.
[05:12:33] *** Joins: jazzy2 (~jaziz@user/jaziz)
[05:12:47] <ProfSimm> It's sad that most routers no longer give direct access to IP
[05:12:50] <ProfSimm> All we need is IP
[05:12:52] <kee> InPhase: That's a Wide Area Network.
[05:12:58] <ProfSimm> But the closest we have us UDP
[05:13:08] *** Joins: duuude (~user@user/duuude)
[05:13:16] <kee> No matter how close the destination and the source, UPS will send it half-way across the country.
[05:13:52] <ProfSimm> kee: is this like how I type 2^7 in Google instead of using my calculator, or, you know, thinking.
[05:14:16] <InPhase> kee: Well it doesn't look that far when they lay out the national map on the routing table.
[05:14:21] <pikapika> The most annoying tasks are those that are neither so small they are trivially accomplished manually, nor so large that writing a script would provide obvious benefit.
[05:14:27] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[05:14:31] <kee> ProfSimm: UDPLite is closer.
[05:14:39] <ProfSimm> kee: I didn't know this is a thing
[05:14:46] <kee> pikapika: Learn you a Python for great good.
[05:14:47] <pikapika> It is too big and annoying to do manually yet also barely worth the effort to automate
[05:15:09] <pikapika> I know and use some bash and python
[05:15:31] <pikapika> What I was saying is that its those not-small sizes where writing the program would only marginally save effort
[05:15:44] <ProfSimm> kee isn't it interesting how much we rely on and praise abstraction, but on the internet we've been regressing 
[05:16:30] <ProfSimm> kee: "screw TCP connections, we'll emulate many of them in one TCP connection" (http/2) "screw TCP we'll emulate it in UDP" (http/3) and now apparently integrity checks are next (udp lite)
[05:16:59] *** Quits: herjazz (~herjazz@p10295192-ipngn22201marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[05:17:01] <pikapika> ProfSimm, I am afraid some of the changes might impose heavier resources on the clients
[05:17:14] <ProfSimm> pikapika: like what
[05:17:25] <kee> pikapika: Marginally is enough.
[05:17:39] <kee> Because next time you have to do something, you can copy-pasta some code from last time.
[05:17:46] <pikapika> I haven't read the specs, but these days the trend is to offload tasks to the clients as much as possible
[05:17:50] <kee> Before you know it, you have a full tkinter program.
[05:18:02] <InPhase> ProfSimm: I don't think that's quite accurate.  We have now dns over https.
[05:18:06] *** Joins: XV9 (~XV8@2601:5cb:c001:50::94d3)
[05:18:29] <kee> The trend is to move everything into HTTPS.
[05:18:32] <InPhase> ProfSimm: What we see is just a splattered mess of people coming up with new reuse methods to solve specific problems.
[05:18:45] <kee> TCP has been moved into HTTPS.
[05:18:53] <kee> DNS has been moved into HTTPS.
[05:18:57] <kee> Email has been HTTPS for a long time.
[05:18:58] <pikapika> kee, gaining more and more dexterity with the language and some common "patterns" also helps
[05:19:13] <pikapika> That way it becomes easier to solve the same/related problem the next time it appears
[05:19:24] *** Quits: XV8 (~XV8@2601:5cb:c001:50:f138:1e1a:7095:9508) (Ping timeout: 240 seconds)
[05:22:04] *** Joins: wauterboi (~wauterboi@185.65.135.248)
[05:22:55] *** Joins: HP55555 (~HP51248@49.205.103.133)
[05:24:51] <ProfSimm> InPhase: which part is not accurate I'mnot sure what you refer to
[05:25:12] <kee> ProfSimm: Regressing abstractions.
[05:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[05:25:56] <ProfSimm> kee: my point is we don't abstract and forget. We abstacted, but came back and hacked it to pieces and flattered the abstraction layers 
[05:26:00] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f)
[05:26:01] <ProfSimm> flattened*
[05:26:10] <kee> And then, DNS over HTTPS.
[05:26:29] <kee> Where before it wasn't over HTTPS.
[05:26:37] *** Joins: zmotaj (~zmotaj@user/zmotaj)
[05:26:40] <ProfSimm> Well, what is that telling us
[05:26:46] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[05:26:53] <ProfSimm> Everything over https, and https over ip
[05:27:01] <kee> IP?
[05:27:03] <ProfSimm> ip
[05:27:06] *** Quits: juliaEnv (~juliaEnv@h-37-123-164-79.A137.corp.bahnhof.se) (Quit: Going offline, see ya! (www.adiirc.com))
[05:27:09] <ProfSimm> Well udp for now
[05:27:10] <kee> You think we won't replace IP?
[05:27:24] <ProfSimm> ip over https?
[05:27:28] <kee> Yes.
[05:27:33] <ProfSimm> OK
[05:27:38] <kee> HTTPS over Ethernet (or whatever other link layer).
[05:27:58] <ProfSimm> We still need some protocol to talk between machines
[05:28:26] <kee> Hmm.
[05:28:38] <kee> HTTPS over the wire directly
[05:28:52] <kee> HTTPS over HTTPS.
[05:29:00] <kee> HTTPS is the link layer.
[05:29:08] <ProfSimm> Screw it, no wire. Just HTTPs as a material the wire is made of
[05:29:35] <kee> HTTPS over quantum foam
[05:29:46] <ProfSimm> Quantum mechanics over HTTPS
[05:29:50] <ProfSimm> We are https
[05:29:59] <kee> Events over HTTPS
[05:30:03] <kee> Causality over HTTPS
[05:30:16] <kee> Mathematics over HTTPS
[05:30:17] <ProfSimm> I think I'm starting to understand why the big bang happened now
[05:30:19] <flaqoniun> https over https, isnt that the new thing,  the qwik protocol or somethin
[05:30:39] <ProfSimm> flaqoniun: it's over udp
[05:30:42] <kee> flaqoniun: QUIC, and that's a TCP replacement iirc
[05:30:59] <kee> Why isn't TCP over UDP?
[05:31:08] <ProfSimm> kee: it's over ip
[05:31:52] <kee> Yeah, but‚Ä¶ TCP is just UDP with some extra fields, basically.
[05:33:23] <ProfSimm> kee: PseudoTCP
[05:34:17] *** Joins: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net)
[05:34:35] *** Joins: herme5 (~mote@2604:a880:400:d1::901:5001)
[05:34:55] *** herme5 is now known as el_kevino
[05:37:25] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f) (Quit: Client closed)
[05:37:50] *** Joins: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f)
[05:38:44] <flaqoniun> yeah that one https://datatracker.ietf.org/doc/html/draft-ietf-quic-http-34
[05:39:11] <ProfSimm> Turns out parsers are super easy.
[05:39:20] <ProfSimm> So why do we use parser generators
[05:39:48] <flaqoniun> lol parsers are super easy?
[05:40:05] *** Joins: name100 (~user@188.124.155.190)
[05:40:28] <kee> ProfSimm: Because parser generators are easier.
[05:40:48] <kee> flaqoniun: Parsers are easy if you can keep track of what you're doing.
[05:40:59] <kee> I cannot, but I have been able to in the past.
[05:41:13] <flaqoniun> also if you write no warning/error messages
[05:41:21] <flaqoniun> super easy, wild west language
[05:41:26] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[05:41:28] <kee> Nah, I wrote those.
[05:41:39] <kee> In fact, it's easier with a manual parser than with most parser generators.
[05:43:48] <kee> Hmm. Maybe parser generators aren't easier?
[05:45:21] <ProfSimm> flaqoniun: you need to know how to think about it and organize your code 
[05:45:24] <ProfSimm> flaqoniun: but yes
[05:45:42] <flaqoniun> it's as easy as the simplicity of the language
[05:46:38] <ProfSimm> flaqoniun: probably. But also languages that are hard to parse may not be good languages
[05:46:51] *** Joins: kaichiuchi (uid547644@id-547644.uxbridge.irccloud.com)
[05:47:43] <kee> I'm trying to work out a way for my programming language to have dynamic (definable in the source code) syntax, without leaking implementation details about how I'm parsing the syntax.
[05:47:45] *** Joins: Tech_8 (~Tech_8@24.51.61.131)
[05:48:17] <flaqoniun> true, depends on the goals  of the language. if you want something extremely cryptic and intentionally hard to parse maybe a parser generator is just the solution you need
[05:48:17] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Quit: Leaving)
[05:48:28] <ProfSimm> kee: I propose you define flexible primitives that can be interpreted contextually and then work at the AST level. Don't define syntax
[05:48:50] <kee> ProfSimm: What would that look like?
[05:49:03] <kee> I'm trying to make it possible for people to define their own ternary operator (a?b:c) or something.
[05:49:11] <ProfSimm> kee: long story
[05:49:21] <ProfSimm> kee: well why would people define their own ternary
[05:49:22] *** Joins: cho14 (~USSR@41.107.167.41)
[05:49:27] <kee> I don't know.
[05:49:36] <kee> One of the goals is to be a better FORTRAN than FORTRAN.
[05:49:57] <kee> People should be able to somehow specify ‚ÄúI'm using the syntax conventions of XYZ mathematical field‚Äù and then just write.
[05:49:58] <ProfSimm> kee: I think a future proof language doesn't work at the syntax level
[05:49:58] *** Quits: kaichiuchi (uid547644@id-547644.uxbridge.irccloud.com) (Changing host)
[05:49:58] *** Joins: kaichiuchi (uid547644@user/kaichiuchi)
[05:50:09] <kee> ProfSimm: I'm thinking that as well‚Ä¶
[05:50:14] <ProfSimm> kee: but AST, this way this AST can be shown in many ways
[05:50:25] <kee> Yeah, I get that.
[05:51:34] <kee> Perhaps a ‚Äúparse this file using this parser‚Äù directive.
[05:51:44] <kee> I was thinking of using the shebang line for that, anyway.
[05:52:03] *** Quits: jaysicks (~jaysicks@212-40-76-98.pool.digikabel.hu) (Remote host closed the connection)
[05:52:09] <kee> So writing `#!/usr/bin/python3.7` at the top would interpret it as Python code.
[05:52:22] <ProfSimm> Well
[05:52:34] <ProfSimm> I don't think reimplementing current languages is a good goal to have
[05:52:39] <kee> Whyever not?
[05:52:52] <kee> Imagine: you can import Rust code from Python!
[05:52:53] *** Parts: cho14 (~USSR@41.107.167.41) ()
[05:53:22] <ProfSimm> I seriously doubt you can just casually implement accurately all semantics so that their libraries work
[05:53:33] <kee> It's not that hard to implement Python semantics.
[05:53:38] <ProfSimm> OK.
[05:53:40] <ProfSimm> Well.
[05:53:44] <ProfSimm> Good luck
[05:54:09] <ProfSimm> kee: it was not even possible for Python itself to do it in all cases when moving from v2 to v3
[05:54:12] <kee> There are only 119 bytecode instructions in Python.
[05:54:21] <kee> ProfSimm: That's because the syntax changed. Deliberately.
[05:54:23] <ProfSimm> You want to somehow do it for all languages
[05:54:32] <kee> Not all languages!
[05:54:38] <ProfSimm> Not only the syntax.
[05:54:40] <kee> I just want it to be possible to do all languages.
[05:54:41] <ProfSimm> But the semantics too
[05:54:47] <kee> Semantics is easier than syntax.
[05:54:49] <ProfSimm> Sure but...
[05:54:54] <ProfSimm> Easier/
[05:54:56] <kee> The semantics is 119 bytecode instructions.
[05:55:02] <ProfSimm> That's not semantics.
[05:55:04] <flaqoniun> iirc python has some weird scoping quirks, not sure how much it would matter to correctly implement  it or not
[05:55:19] <kee> flaqoniun: Those aren't quirks; they're logical consequences of the rules.
[05:55:25] <kee> It's not Stockholm Syndrome.
[05:55:51] <kee> I just need to tell my Sufficiently Intelligent Compiler‚Ñ¢ how each bytecode instruction is defined, and then away it'll go.
[05:55:58] <ProfSimm> kee: semantics is not matching 119 opcodes, but matching also what these opcodes do, which can be infinitely complex. You can implement anything with probably 3 opcodes
[05:56:01] <kee> TODO: write a sufficiently intelligent compiler.
[05:56:12] <kee> ProfSimm: The opcodes are actually quite simple.
[05:56:28] <ProfSimm> Well OK
[05:56:29] <kee> The import opcode just calls `__import__`.
[05:56:31] <kee> etc.
[05:56:37] <ProfSimm> Yea etc.
[05:56:53] <ProfSimm> Well I'm sure I'm wrong, and I'll hear about the language that does all languages soon
[05:56:59] <kee> The only vaguely tricky ones are the ones to do with exception stacks.
[05:57:14] <kee> ProfSimm: It's taken me two years so far and it's still in the design stage. I doubt you'll hear about it ever.
[05:57:17] *** Quits: HP55555 (~HP51248@49.205.103.133) (Ping timeout: 252 seconds)
[05:57:27] <ProfSimm> kee: this is why reducing scope helps
[05:57:32] <kee> NEVAH!
[05:57:48] * kee tries to build a skyscraper out of sand
[05:57:58] <kee> I just need more sand.
[05:58:00] <ProfSimm> But, many skyscrapers are built out of sand
[05:58:22] <kee> See! It's plausible!
[05:58:36] * kee runs back to refill the bucket in the ocean
[05:59:30] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[06:01:29] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:06:54] <Hash> https://www.youtube.com/watch?v=A2kAfJjObik
[06:06:55] <bayaz> Title: Advanced Sci-fi Civilisations Too Stupid To Really Exist Ep.16 - Panem 
[06:06:58] <Hash> LOL
[06:07:43] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[06:08:50] *** Quits: duuude (~user@user/duuude) (Ping timeout: 252 seconds)
[06:08:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 250 seconds)
[06:09:14] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[06:09:22] *** Joins: Satin (uid193953@user/Seten)
[06:11:46] <KillerWasp> This doesn't seem like a suitable channel. Where can I go to unload all my long sorrows and frustrations? I need to throw too much tantrum. I have to go to #libera ?
[06:12:17] <KillerWasp> #libera like "liberar estres!"
[06:12:39] *** Joins: duuude (~user@user/duuude)
[06:12:48] <oldlaptop> I think they'd tell you to go to ##chat, or something.
[06:12:56] <kee> #libera is a bad place to have a tantrum.
[06:13:29] <oldlaptop> Excellent place to go to expedite your k-line
[06:14:06] *** Quits: bkool (~bkool@c-73-8-91-229.hsd1.il.comcast.net) (Quit: Leaving)
[06:14:09] <Hash> so much liberty on libera
[06:14:11] <Hash> HAHAHA
[06:14:22] <KillerWasp> oldlaptop: That was the idea for the joke. :P
[06:14:53] * vdamewood slurps his ice cream.
[06:15:02] <kee> Isn't liberty about being able to do what you want?
[06:15:08] <kee> It doesn't mean it's always a good idea.
[06:15:16] <flaqoniun> oh cool, vdamewood are you trying out the new melted ice cream diet?
[06:15:20] <oldlaptop> (The most recent obvious, ridiculous troll in there only got a +q, though.)
[06:15:33] <kee> oldlaptop: If the troll doesn't notice the +q‚Ä¶
[06:15:46] <Hash> they klined me for saying stuff against feminism
[06:15:58] <kee> Tbf, feminism is pretty great.
[06:16:04] <vdamewood> Hash: Cool.
[06:16:04] <Hash> Oh gawd.
[06:16:14] <kee> Unless it was a pretty nuanced take ‚Äì
[06:16:19] <kee> Oh, wait, ##libera is no politics, isn't it?
[06:16:19] <KillerWasp> You win a gold ticket: [Great offer: Drop all the complaints you want in 'libera estres' and receive a free k-line!]
[06:16:30] <kee> Er, 
[06:16:32] <kee> #libera
[06:16:38] <flaqoniun> they ban you just for chatting
[06:16:46] <Hash> They also klined me for 2nd time, what for? I think I doxed myself.
[06:16:46] <kee> I can ne'er remember how many #####s a channel has.
[06:16:51] <Hash> they were too st upid to realize I waslinking my own shit
[06:16:59] <flaqoniun> kwasp might get in a few good lines though
[06:17:08] <kee> Hash: You can appeal I think.
[06:17:20] <oldlaptop> It's for network-related support, they don't much appreciate having it filled with nonsense instead
[06:17:26] <Hash> I mean trolls are a thing I get 
[06:17:40] <KillerWasp> kee: the mas is 16, because the name of channel is max to 16.
[06:17:40] <kee> oldlaptop: It's always filled with nonsense, though?
[06:17:56] <Hash> But people like me, debian dev, maint, on freenode since 2001 and people know me... to kline a known dude for opinions that have nothing to do with anything
[06:17:58] <oldlaptop> It's mostly fairly quiet.
[06:18:07] <Hash> I mean. Feminism is cancer. That's my opinion. 
[06:18:09] <Hash> Sorry.
[06:18:09] <flaqoniun> only certain ppl are allowed to chat in ##libera
[06:18:13] <Hash> No amount of klines will change my mind.
[06:18:16] <vdamewood> !q Hash 
[06:18:17] *** bayaz sets mode: +q $a:Hash
[06:18:21] <kline> hmm
[06:18:22] <KillerWasp> ah, no, the max is 50.
[06:18:27] <kee> vdamewood: :-p
[06:18:28] <KillerWasp> * CHANLIMIT=#:250 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=Libera.Chat STATUSMSG=@+ CASEMAPPING=rfc1459 NICKLEN=16 MAXNICKLEN=16 CHANNELLEN=50
[06:19:26] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[06:19:28] *** Quits: sgen (~sgen@2607:fea8:7ce1:c8e0:a992:a734:d5e:8b54) (Remote host closed the connection)
[06:19:32] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[06:19:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:20:11] <kee> Out of interest, how long does a quieting normally last?
[06:20:21] <KillerWasp> like you can use # 50 times.
[06:20:54] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[06:21:00] *** Joins: flaqoniun (~F@32.211.211.39)
[06:21:57] *** Hash was kicked by bayaz (Hash)
[06:21:58] *** bayaz sets mode: +b $a:Hash
[06:23:07] <oldlaptop> kee: Normally +q is treated as a fairly temporary thing.
[06:25:10] <KillerWasp> mmmm... I have so much garbage in my head that I can't program.
[06:25:11] <vdamewood> FWIW, my typical time is 10 minutes ¬± Human error
[06:26:35] <KillerWasp> I need to focus on what I want and stop worrying about other people, what they want, or what they are able to pay or join your community, or know what attracts them the most.
[06:26:47] *** bayaz sets mode: -q $a:Hash
[06:29:21] *** Quits: kee (~wizzwizz4@user/wizzwizz4) (Read error: Connection reset by peer)
[06:30:08] *** Joins: kee (~wizzwizz4@user/wizzwizz4)
[06:32:47] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 268 seconds)
[06:35:01] *** Joins: vysn (~vysn@user/vysn)
[06:36:56] *** Joins: Matt|home (~matt@adsl-74-233-58-210.mia.bellsouth.net)
[06:39:40] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[06:41:45] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[06:43:57] *** Quits: name100 (~user@188.124.155.190) (Ping timeout: 250 seconds)
[06:45:57] *** Quits: jubale (~jubale@2600:6c54:7b00:0:b829:f248:2ff5:7d2c) (Quit: Leaving)
[06:46:02] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 240 seconds)
[06:46:15] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 252 seconds)
[06:49:34] <Tech_8> KillerWasp: what are you coding?
[06:49:59] <KillerWasp> Tech_8: still nothing.
[06:50:12] <Tech_8> what do you want to code
[06:50:32] <Tech_8> KillerWasp: what do you want to code?
[06:51:25] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:e0d9:96aa:840c:1d25)
[06:51:53] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[06:53:57] <KillerWasp> Tech_8: I want to create an RPG or Visual Novel game. But since I can't do it for lack of money, I'm looking to waste my time with some nonsense that can make me money.
[06:54:29] <Tech_8> you would need like a 10 person team for that
[06:54:30] *** Quits: cincoswim (~cincoswim@cm-72-241-33-17.buckeyecom.net) (Ping timeout: 252 seconds)
[06:54:43] <Tech_8> KillerWasp: take forever with one person
[06:56:32] *** Quits: stagas (~stagas@2a02:587:c49d:51df:78d2:3d53:cd56:88d5) (Remote host closed the connection)
[06:56:36] *** Quits: Visne (~Visne@dhcp-077-248-174-092.chello.nl) (Quit: Goodbye)
[06:58:16] *** Quits: urnebes (~smrt@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[06:58:22] *** Joins: stagas (~stagas@2a02:587:c49d:51df:b922:95c8:daac:f78b)
[06:59:45] *** Quits: tj123 (~tjh123@cpe-75-185-104-199.cinci.res.rr.com) (Quit: Leaving)
[07:00:43] <oldlaptop> Tech_8: Consider (say) Dwarf Fortress, which simultaneously confirms and obliterates that position
[07:02:04] <oldlaptop> (a mostly solo project, capable of financially supporting its author, that will probably take another decade or three to reach feature-completion)
[07:05:36] <kee> KillerWasp: A visual novel is fairly easy.
[07:05:42] <kee> Instead of drawing all the pictures, storyboard it.
[07:05:49] <kee> Instead of writing a good plot, right the sketch of a plot.
[07:06:01] <kee> Write the bare-bones code, don't animate anything.
[07:06:20] <kee> Then you have the hard work done, and you can iteratively improve it.
[07:10:46] *** Joins: Visne (~Visne@dhcp-077-248-174-092.chello.nl)
[07:10:56] *** Quits: Tech_8 (~Tech_8@24.51.61.131) (Quit: Client closed)
[07:11:29] <KillerWasp> kee: If you want to give 'good' advice, say this: Instead of drawing all images, instead of digitizing images, instead of painting images, instead of animating, instead of dithering, instead of storyboarding , instead of writing and drawing dialogs, instead of sketching, instead of sketching, just write everything in a TXT and fuck it. Post on any pornga site where nobody sees you like itch.io or deviantart.
[07:12:26] <kee> KillerWasp: The important thing is to get something done.
[07:12:34] <kee> Perfectionism gets you 1% of something.
[07:12:50] <KillerWasp> Then when that's done, in 2 weeks you can come cry on this channel or any other network by posting the link to itch.io or deviantart.
[07:13:09] <KillerWasp> s/link/SPAM/
[07:14:06] *** Quits: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb) (Ping timeout: 268 seconds)
[07:15:06] <KillerWasp> kee: Sorry, I wasn't being annoying with these comments, just a bit sarcastic.
[07:15:24] *** Quits: flaqoniun (~F@32.211.211.39) (Ping timeout: 240 seconds)
[07:15:51] <KillerWasp> What bothers me is that you still have a habit of spouting redundant advice as if you don't know anything about art or programming.
[07:16:15] <kee> I know about getting stuff done.
[07:16:24] <kee> Also, itch.io is a decent place to put games.
[07:16:27] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[07:16:31] <kee> Better than making your own marketplace, at least.
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:17:57] <KillerWasp> I really have thought of everything. I know how to do things, but as long as I have limitations I can't do anything. At this moment I think that the best thing is to make an online image viewer for my server. But the problem would still be there, that nobody is going to come, therefore nobody is going to pay me or give support to my projects. So nothing, I'm still stuck.
[07:19:32] *** Quits: monr0e (~monr0e@host-81-179-96-15.static.as13285.net) (Ping timeout: 240 seconds)
[07:19:35] *** suss` is now known as suss
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:20:00] <KillerWasp> kee: what you just said is just a placebo effect.
[07:20:37] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[07:20:57] *** Quits: wildo (~lain6141@202.180.111.143) (Quit: leaving)
[07:21:00] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[07:21:02] <c7s> the placebo effect works
[07:21:24] <c7s> it even works when you know it's a placebo
[07:22:13] <KillerWasp> printf("On our site we have %d registered users!! Join also in or site!!\n",rand()%1000000+1000000);
[07:23:07] <KillerWasp> s/or/our/
[07:24:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:26:02] *** Quits: cronos (~cronos@user/cronos) (Quit: ZNC - https://znc.in)
[07:26:16] <kee> KillerWasp: The way you get people to your site is to go to where the people are.
[07:26:19] <kee> You need hyperlinks.
[07:26:38] *** Joins: cronos (~cronos@user/cronos)
[07:26:40] *** Joins: nshire (~nshire@user/nshire)
[07:27:07] <KillerWasp> i already have my hyperlink/link: http://blackrook.xyz/
[07:27:07] <bayaz> Title: BLACK ROOK! 
[07:27:43] *** Joins: pmercado (~pmercado@186.107.36.107)
[07:27:49] <kee> KillerWasp: No, I mean you need people to go to it.
[07:27:56] <kee> How much graph theory do you know?
[07:28:38] <KillerWasp> kee: I don't know if you noticed that I just posted a link full of people. They can see and enter.
[07:28:45] <kee> And then what?
[07:28:50] <kee> There's nothing downloadable on that page.
[07:29:07] <KillerWasp> yes.
[07:29:12] <KillerWasp> i know.
[07:29:41] *** Joins: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com)
[07:29:46] <kee> Nobody's going to give support to your projects, probably, until something exists.
[07:29:57] <kee> At least make and release a small game.
[07:30:24] <KillerWasp> I already mentioned that I need money. Everything is under maintenance, stagnant, all I can do is offer information on the web. You can't just come in and demand something that works because there isn't. If you want something you have to pay, even to see some progress.
[07:31:03] <oldlaptop> That isn't generally going to be a winning sales pitch.
[07:31:10] *** Quits: wauterboi (~wauterboi@185.65.135.248) (Ping timeout: 260 seconds)
[07:31:22] <kee> KillerWasp: Generally, releasing an old version and having people pay to see a newer version works.
[07:31:28] <vdamewood> I think my favorite sales pitch is "Buy it or the bunny gets it."
[07:31:37] <kee> As much as I dislike the services, things like Patreon work.
[07:31:52] <kee> I think there was one that didn't take a cut, free software etc. but I don't remember what it was called.
[07:32:08] <oldlaptop> vdamewood: https://www.youtube.com/watch?v=063wANsIjmE
[07:32:09] <bayaz> Title: Club that baby seal 
[07:32:39] <oldlaptop> Aw, it cuts the end off.
[07:33:16] <oldlaptop> https://www.youtube.com/watch?v=1g2AU3HiM5A That's better.
[07:33:17] <bayaz> Title: Crazy Ernie 
[07:35:35] <KillerWasp> i got tired. gn.
[07:36:30] *** Joins: password2 (~password8@user/password2)
[07:37:44] *** Joins: flaqoniun (~F@32.211.211.39)
[07:39:20] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[07:39:20] <vdamewood> oldlaptop: Excellent pitch. I have to go buy a car now.
[07:40:23] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[07:40:49] *** Joins: Norkle_ (~norkle@admin.nasa-g0v.com)
[07:40:49] *** Joins: Djoobstil_ (~djoobstil@djoobstil.online)
[07:40:53] *** Joins: Valware (~val@51.195.213.25)
[07:40:57] *** Joins: H4Z3_ (~H4ZE@user/H4Z3)
[07:41:00] *** Joins: bloodElk_ (~bloodElk@user/bloodelk)
[07:41:02] *** Joins: Whippersnapper_ (~whprsnpr@user/whippersnapper)
[07:41:03] *** Joins: paulo_ (paulo@user/paulo/x-9032687)
[07:41:04] *** Joins: [ins4ne]_ (~ins4ne]@user/ins4ne/x-5207303)
[07:41:04] *** Joins: light_ (~light@user/light)
[07:41:05] *** Joins: smlckz (smlckz@envs.net)
[07:41:05] *** Joins: scjosh9 (~scjosh@206.189.79.69)
[07:41:06] *** Quits: smlckz (smlckz@envs.net) (Changing host)
[07:41:06] *** Joins: smlckz (smlckz@user/smlckz)
[07:41:07] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[07:41:08] *** Joins: RedNifre2 (~RedNifre@dslb-002-206-059-093.002.206.pools.vodafone-ip.de)
[07:41:09] *** Joins: reynir1 (root@user/reynir)
[07:41:12] *** Joins: ra4king1 (~ra4king@roiatalla.com)
[07:41:12] *** Joins: tangy (~tangy@user/tangy)
[07:41:15] *** Joins: burakcan- (~burakcank@has.arrived.and.is.ready-to.party)
[07:41:19] *** Joins: kzootick (~contact@kzoo.tech)
[07:41:21] *** Joins: vin1 (~vin@user/crash)
[07:41:21] *** Joins: dante4431 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[07:41:29] *** Quits: ivanf (~ivan@user/ivanf) (*.net *.split)
[07:41:29] *** Quits: Whippersnapper (~whprsnpr@user/whippersnapper) (*.net *.split)
[07:41:29] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[07:41:29] *** Quits: tangyQED (~tangy@user/tangy) (*.net *.split)
[07:41:29] *** Quits: light (~light@user/light) (*.net *.split)
[07:41:29] *** Quits: vin (~vin@user/crash) (*.net *.split)
[07:41:29] *** Quits: scjosh (~scjosh@206.189.79.69) (*.net *.split)
[07:41:29] *** Quits: RedNifre (~RedNifre@dslb-002-206-059-093.002.206.pools.vodafone-ip.de) (*.net *.split)
[07:41:29] *** Quits: DrMax_ (~DrMax@132.215.96.30) (*.net *.split)
[07:41:29] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[07:41:29] *** Quits: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (*.net *.split)
[07:41:29] *** Quits: |smlckz| (smlckz@user/smlckz) (*.net *.split)
[07:41:29] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (*.net *.split)
[07:41:29] *** Quits: Dalek (~val@Valeyard/Developer/Valware) (*.net *.split)
[07:41:29] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[07:41:29] *** Quits: kzootech (~contact@kzoo.tech) (*.net *.split)
[07:41:29] *** Quits: bloodElk (~bloodElk@user/bloodelk) (*.net *.split)
[07:41:29] *** Quits: [ins4ne] (~ins4ne]@user/ins4ne/x-5207303) (*.net *.split)
[07:41:29] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[07:41:29] *** Quits: reynir (root@user/reynir) (*.net *.split)
[07:41:29] *** Quits: H4Z3 (~H4ZE@user/H4Z3) (*.net *.split)
[07:41:29] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[07:41:29] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (*.net *.split)
[07:41:29] *** scjosh9 is now known as scjosh
[07:41:29] *** Joins: lawt2 (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[07:41:36] *** ra4king1 is now known as ra4king
[07:42:24] *** burakcan- is now known as burakcank
[07:42:44] *** bloodElk_ is now known as bloodElk
[07:43:43] *** Norkle_ is now known as Norkle
[07:43:58] *** Quits: Visne (~Visne@dhcp-077-248-174-092.chello.nl) (Quit: Goodbye)
[07:44:03] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[07:48:20] <flaqoniun> that guy in the hungry games has unix-92 mousepad / carharrt spiral logo on his face
[07:48:41] *** kzootick is now known as kzootech
[07:54:59] *** Quits: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[07:57:00] *** Joins: fe23 (~fe23@2409:8a34:466:6010:a963:e1e:5c0e:2b7a)
[07:57:01] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvxfpostq09fkj.ipv6.telus.net) (Ping timeout: 245 seconds)
[07:57:16] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[07:57:34] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvxfpostq09fkj.ipv6.telus.net)
[08:00:50] *** Joins: Cashlin (~hp@user/cashlin)
[08:00:57] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[08:02:51] *** Joins: raym (~raym@user/raym)
[08:04:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[08:06:33] *** Joins: Akiva (~Akiva@user/Akiva)
[08:07:25] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326) (Ping timeout: 240 seconds)
[08:09:11] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[08:11:47] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[08:15:34] *** Parts: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) ()
[08:17:24] *** Quits: Cashlin (~hp@user/cashlin) (Quit: Konversation terminated!)
[08:20:02] *** Quits: derpy (~quassel@2a02:810d:800:10f8:981f:e570:c8d1:5aae) (Quit: No Ping reply in 180 seconds.)
[08:21:15] *** Joins: derpy (~quassel@2a02:810d:800:10f8:981f:e570:c8d1:5aae)
[08:21:31] *** Joins: wauterboi (~wauterboi@185.65.135.252)
[08:22:21] <smlckz> test
[08:23:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:24:01] <zzz> 3test passed!
[08:24:17] <InPhase> jeaye: So I got a chance to read the GraalVM page you linked earlier (when I had to go).  That is indeed the level of performance that could salvage some potential for it.  I guess my first question is does GraalVM have full compatibility, or does swapping to that as an alternative come with some downsides such as pieces of more complex Clojure software that do not function correctly after the 
[08:24:21] <pulse> test failed successfully
[08:24:23] <InPhase> switch?
[08:26:13] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[08:27:35] *** Joins: newpy_ (~newpy@c-73-229-15-176.hsd1.co.comcast.net)
[08:29:06] <Raziel> pulse, I should have my sanity checks output that if they... succeed in failing
[08:29:48] *** Quits: newpy (~newpy@2601:280:4381:1390:2ddc:61c2:abe8:a959) (Ping timeout: 240 seconds)
[08:29:51] <jeaye> InPhase: The source code stays the same.
[08:30:06] <jeaye> InPhase: Graal is for JVM jars; nothing specific to Clojure.
[08:30:26] <InPhase> And a fully compliant JVM?
[08:31:11] *** Joins: raym (~raym@user/raym)
[08:32:05] <InPhase> I'm just trying to make sure this isn't like a pypy situation where "everything is much faster" except you can't use the standard libraries that you'd use in order to actually make things fast.  :)
[08:32:09] *** light_ is now known as light
[08:32:31] <InPhase> (Because of library native binding issues.)
[08:33:18] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[08:37:17] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[08:38:13] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[08:38:32] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[08:39:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:40:29] *** Joins: raym (~raym@user/raym)
[08:41:49] *** Quits: freakazoid12345 (~matt@2603-9000-cf03-86c3-8902-68c6-ecc8-5f4e.inf6.spectrum.com) (Ping timeout: 256 seconds)
[08:45:56] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[08:52:11] *** Quits: pmercado (~pmercado@186.107.36.107) (Ping timeout: 252 seconds)
[08:55:48] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[08:59:06] *** Joins: k8yun (~k8yun@user/k8yun)
[09:01:11] *** Joins: nicbk (~nicbk@user/nicbk)
[09:02:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 256 seconds)
[09:03:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:05:37] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Remote host closed the connection)
[09:06:16] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[09:10:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:14:55] *** Quits: YHVH (~yhvh@c-98-235-30-231.hsd1.pa.comcast.net) (Ping timeout: 256 seconds)
[09:20:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[09:20:57] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[09:21:28] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[09:22:27] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[09:24:17] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:24:34] *** Quits: password2 (~password8@user/password2) (Ping timeout: 260 seconds)
[09:25:17] *** Quits: dirigible (~dirigible@c-66-41-40-51.hsd1.mn.comcast.net) (Quit: Leaving)
[09:25:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:25:38] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[09:27:09] *** Joins: password2 (~password8@user/password2)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:31:16] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:34:50] *** Quits: Donitz (~Donitz4@88-115-149-215.elisa-laajakaista.fi) (Ping timeout: 260 seconds)
[09:37:08] *** Quits: Crocodillian (~Crocodill@comply.posixsh.org) (Quit: WeeChat 3.3)
[09:38:17] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[09:39:16] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[09:40:56] <wutno> is it worth going back over my project and const'ing a bunch of stuff?
[09:41:10] <vin1> Why does this happen https://imgur.com/a/0cOdx2L ? I am trying to access an index in the vector but get the following error. "Attempt to take address of value not located in memory." This is in gdb 
[09:42:18] <flaqoniun> vin1 i s it a register?
[09:42:59] <flaqoniun> wutno, maybe if it is something important that ought to be const
[09:43:24] <vin1> flaqoniun: it is a map 
[09:43:32] <flaqoniun> but some random variable? probably not
[09:44:18] <flaqoniun> it might help some compilers optimize though
[09:45:11] <vin1> What do you mean? I am compiling with  -g3 -O0 
[09:45:58] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[09:46:10] *** Joins: flaqoniun (~F@32.211.211.39)
[09:48:13] *** Quits: wauterboi (~wauterboi@185.65.135.252) (Ping timeout: 240 seconds)
[09:49:02] <wutno> mm that's why i ask if it's worth
[09:49:13] <flaqoniun> const might be used to put your variable into a readonly memory mapping too
[09:49:14] <wutno> im sure there's /some/ implication in certain cases
[09:50:03] *** Quits: geonic (~geonic@user/geonic) (Quit: The Lounge - https://thelounge.chat)
[09:50:36] *** Joins: geonic (~geonic@144.202.104.101)
[09:50:36] *** Quits: geonic (~geonic@144.202.104.101) (Changing host)
[09:50:36] *** Joins: geonic (~geonic@user/geonic)
[09:54:24] *** Quits: geonic (~geonic@user/geonic) (Client Quit)
[09:54:56] *** Joins: geonic (~geonic@144.202.104.101)
[09:54:56] *** Quits: geonic (~geonic@144.202.104.101) (Changing host)
[09:54:56] *** Joins: geonic (~geonic@user/geonic)
[09:54:57] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[09:57:11] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[09:58:07] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[09:58:20] *** Joins: flaqoniun (~F@32.211.211.39)
[09:58:21] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:01:48] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 240 seconds)
[10:03:57] *** Joins: analoq (~yashi@user/dies)
[10:05:55] *** Joins: password (~password@user/password2)
[10:06:52] *** Quits: geonic (~geonic@user/geonic) (Quit: The Lounge - https://thelounge.chat)
[10:07:26] *** Joins: geonic (~geonic@144.202.104.101)
[10:07:26] *** Quits: geonic (~geonic@144.202.104.101) (Changing host)
[10:07:26] *** Joins: geonic (~geonic@user/geonic)
[10:13:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 256 seconds)
[10:14:10] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[10:14:14] *** Joins: toulene (~toulene@user/toulene)
[10:14:41] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[10:17:09] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[10:20:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[10:21:36] *** Quits: geonic (~geonic@user/geonic) (Quit: The Lounge - https://thelounge.chat)
[10:22:08] *** Joins: geonic (~geonic@144.202.104.101)
[10:22:08] *** Quits: geonic (~geonic@144.202.104.101) (Changing host)
[10:22:08] *** Joins: geonic (~geonic@user/geonic)
[10:23:16] *** Joins: austincheney_ (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9)
[10:26:12] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:b50c:c86:da8c:8311) (Ping timeout: 240 seconds)
[10:28:51] *** Joins: austincheney (~austinche@104-54-57-132.lightspeed.rcsntx.sbcglobal.net)
[10:28:59] *** Quits: austincheney_ (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9) (Ping timeout: 252 seconds)
[10:33:27] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[10:34:51] *** Quits: geonic (~geonic@user/geonic) (Quit: The Lounge - https://thelounge.chat)
[10:37:59] *** Joins: Jaami (~Jaami@182.185.175.131)
[10:39:55] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[10:43:18] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[10:45:25] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[10:47:42] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 252 seconds)
[10:51:13] *** Joins: wrongt (~Thunderbi@mx2.accent.md)
[10:51:51] *** Quits: wrongt (~Thunderbi@mx2.accent.md) (Quit: wrongt)
[10:52:25] *** Joins: wrongt (~Thunderbi@mx2.accent.md)
[10:54:11] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Quit: Leaving)
[10:54:29] *** Quits: wrongt (~Thunderbi@mx2.accent.md) (Client Quit)
[10:55:49] *** Joins: wrongt (~Thunderbi@mx2.accent.md)
[10:56:30] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[10:57:15] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[11:01:37] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:04:38] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:05:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:06:25] *** Joins: Donitz (~Donitz4@88-115-149-215.elisa-laajakaista.fi)
[11:08:15] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:08:34] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[11:11:06] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-9cc7-b2df-6523-fde2.res6.spectrum.com) (Quit: jarthur_)
[11:11:38] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:12:04] *** Joins: Jaami2 (~Jaami@182.185.149.132)
[11:13:00] *** Quits: Jaami (~Jaami@182.185.175.131) (Ping timeout: 252 seconds)
[11:13:02] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[11:13:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2034:c204:70d1:cb4e) (Ping timeout: 256 seconds)
[11:14:29] *** Quits: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net) (Ping timeout: 256 seconds)
[11:15:11] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 252 seconds)
[11:17:09] *** Quits: ishan (~ishan@2400:8904::f03c:91ff:fe9e:a26f) (Quit: Peace.)
[11:17:25] *** Joins: ishan (~ishan@2400:8904::f03c:91ff:fe9e:a26f)
[11:18:38] *** Joins: ravan (~ravan@user/ravan)
[11:19:01] *** Joins: pulse (~pulse@user/pulse)
[11:21:42] *** Joins: Enitin (~Enitin@82.180.145.223)
[11:23:28] *** jazzy2 is now known as jazzy
[11:24:09] *** Joins: img (~img@user/img)
[11:25:28] *** Joins: zaher (~zaher@37.48.158.104)
[11:28:09] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[11:28:24] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 252 seconds)
[11:28:32] *** Joins: Enitin (~Enitin@82.180.145.230)
[11:28:58] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[11:29:51] *** Joins: zaher_ (~zaher@37.48.179.33)
[11:30:11] *** Quits: newpy_ (~newpy@c-73-229-15-176.hsd1.co.comcast.net) (Quit: Leaving)
[11:32:01] *** Quits: zaher (~zaher@37.48.158.104) (Ping timeout: 245 seconds)
[11:34:35] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[11:35:33] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[11:37:25] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[11:39:05] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[11:39:35] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:40:21] *** Joins: ravan (~ravan@user/ravan)
[11:40:45] *** Joins: user51 (~user51@77.124.35.94)
[11:40:49] <pulse> i don't understand the appeal of poached eggs
[11:41:42] *** Joins: nicbk (~nicbk@user/nicbk)
[11:42:07] <KillerWasp> pulse: you must get chickens before of eggs
[11:42:58] <pulse> i could see myself with a pet chicken
[11:43:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:44:33] *** Joins: edun (~qbt@user/edun)
[11:44:37] *** edun is now known as qbt
[11:46:14] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[11:54:32] *** Quits: ttree (~ttree0@c-24-17-16-242.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[11:58:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[11:58:59] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[11:59:52] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:01:35] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[12:08:42] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:08:44] <KillerWasp> Legendary Item: OMELETTE: The power of eggs allows you to upgrade to a super chicken. [ A) x5 to your strength and defense B) x10 to your cowardice C) x5 to your ability to run away in terror D) You lay eggs 3 times a day for 1 week E) You gain the ability to cluck ]
[12:09:36] <davros> is it possible in JS/browser to programatically open a native file browser dialog box?
[12:10:02] <KillerWasp> emmm, It looks more like a cursed item full of debuff. Who would eat it? :/
[12:10:09] <davros> every google hit i'm getting on the subject involves setting up a button inside the page (i've got a wasm/emscripten/opengl application)
[12:10:23] *** Quits: wrongt (~Thunderbi@mx2.accent.md) (Quit: wrongt)
[12:10:58] *** Joins: wrongt (~Thunderbi@mx2.accent.md)
[12:11:58] *** Joins: xaltsc (~xaltsc@user/xaltsc)
[12:13:26] *** Joins: loganlee[gnu] (~Thunderbi@user/loganlee)
[12:15:51] <KillerWasp> davros: what button?
[12:16:05] *** Joins: Crocodillian (~Crocodill@comply.posixsh.org)
[12:17:42] <pyzozord> davros: yes, the one that lets you select a file
[12:18:28] <davros> what i'm ideally after is a call like allert()  or messagebox() from js that will create such a dialog box and return a filename.  Everythnig i've found when I google this question shows you how to set up a button in the document .. i dont have that , i'm doing a fullscreen emscripten application using SDL2, GL
[12:18:40] <davros> but i can stil call JS  with EM_ASM() or whatever
[12:19:18] <davros> yeah i dont want a button - i want a means inside my own application (ie a GL game) of firing up that dialogue
[12:19:29] <davros> (eg. to allow uploading user content)
[12:19:49] <pyzozord> davros: https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#using_hidden_file_input_elements_using_the_click_method
[12:19:50] <bayaz> Title: Using files from web applications - Web APIs | MDN 
[12:19:57] <davros> intercepting drag drop from the desktop would be handy aswell
[12:20:11] <pyzozord> that's the state of the art, there is also some experimental api I haven't tried that one https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open
[12:20:12] <bayaz> Title: HTMLDialogElement.open - Web APIs | MDN 
[12:21:08] <davros> hmm i wonder if i can add the "drop zone"handlers to my main canvas ..
[12:21:18] *** Joins: duuude (~user@user/duuude)
[12:22:18] *** Joins: audiobirb (~audio@user/audio)
[12:22:36] <Trashlord> function name problem: I have a function which accepts a boolean parameter. Its sole purpose is to mark some feature as enabled or disabled, based on the boolean value supplied
[12:22:53] <Trashlord> I called the function enableGhost(), but in reality it can either enable, or disable it
[12:23:03] <Trashlord> so calling it "enable" is misleading. What would you call it instead?
[12:23:25] <Trashlord> setGhost?
[12:23:26] *** Joins: palasso (~palasso@user/palasso)
[12:23:33] <vdamewood> Enable seems fine to me in that case.
[12:23:49] <vdamewood> setGostEnabled?
[12:23:57] <vdamewood> s/G/Gh/
[12:24:22] *** Joins: jdmark2 (~jdmark@user/jdmark)
[12:24:25] *** Joins: freakazoid12345 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com)
[12:25:37] *** Joins: shkurata (~shkurata@ptr-8riebugy003l5s1zlrj.18120a2.ip6.access.telenet.be)
[12:27:02] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-0155-fcd0-86f6-6019.inf6.spectrum.com) (Ping timeout: 240 seconds)
[12:27:19] <Trashlord> vdamewood: hmm, yeah, maybe that
[12:27:42] <Trashlord> it also sets a property in a class called "ghostEnabled"
[12:27:54] *** Quits: wrongt (~Thunderbi@mx2.accent.md) (Changing host)
[12:27:54] *** Joins: wrongt (~Thunderbi@user/wrongt)
[12:27:59] *** Quits: jdmark (~jdmark@user/jdmark) (Ping timeout: 268 seconds)
[12:29:17] *** Quits: qbt (~qbt@user/edun) (Ping timeout: 240 seconds)
[12:29:32] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[12:30:33] *** Joins: aradesh (~aradesh@user/aradesh)
[12:32:20] *** Quits: les (znc@user/les) (Quit: Adios)
[12:32:27] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[12:33:34] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Quit: Leaving)
[12:33:47] <pulse> davros, to the best of my knowledge, no. but you can do it with Electron
[12:34:14] *** Joins: les (znc@user/les)
[12:34:49] <user51> does anyone have a truth table of operator associativity? i made my own and it looks like NAND, at least for left/right
[12:35:51] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[12:36:14] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[12:36:31] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Client Quit)
[12:36:47] *** Quits: jnnnnnnnnn (~jnnnnnnnn@c-2172524e.016-77-73746f43.bbcust.telenor.se) (Remote host closed the connection)
[12:37:28] *** Joins: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178)
[12:37:34] *** Joins: joeyzheng5403_ (~kerwin@124.126.18.162)
[12:38:38] *** Joins: name100 (~user@188.124.155.190)
[12:39:01] <arahael> user51: Everything can be made from NAND gates.
[12:39:23] <pulse> can NAND gates be made from NAND gates
[12:39:30] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[12:39:52] * pulse walks away slowly
[12:40:12] <c7s> no, it's impossible
[12:41:52] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[12:43:26] *** Joins: rtypo (~alex@user/rtypo)
[12:44:06] *** Joins: amigojapan (uid86330@id-86330.helmsley.irccloud.com)
[12:44:07] <arahael> pulse: Yes, they can.
[12:44:22] <pulse> well. i prefer XOR anyway
[12:44:26] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[12:44:36] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 240 seconds)
[12:44:44] <pulse> that's also nand isn't it
[12:44:44] <pulse> damn it
[12:44:45] <arahael> Build an XOR gate from NAND gates, and then you can build your NAND gate.
[12:44:57] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[12:45:08] <pulse> NOR is the other universal one
[12:45:22] *** Joins: Jonopoly (~Jonopoly@user/jonopoly)
[12:46:36] *** Quits: fe23 (~fe23@2409:8a34:466:6010:a963:e1e:5c0e:2b7a) (Ping timeout: 245 seconds)
[12:47:24] <edgar-rft> can applejuice be made from NAND gates?
[12:48:06] <pulse> probably not, but a Seinfeld episode can
[12:51:00] *** Quits: loganlee[gnu] (~Thunderbi@user/loganlee) (Quit: loganlee[gnu])
[12:51:25] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 268 seconds)
[12:54:53] *** Quits: wrongt (~Thunderbi@user/wrongt) (Quit: wrongt)
[12:55:35] <vdamewood> You're such What's the truth table for applejuice?
[12:55:50] <vdamewood> s/You're such//
[12:56:08] <vdamewood> Stupid chat client using the same text entry buffer for every channel.
[12:57:47] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[13:01:17] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (Ping timeout: 240 seconds)
[13:04:54] <CuriousErnestBro> bro why do i need imagemagick, a photoshop clone, to compile programs?
[13:05:52] <pyzozord> I like that idea ProfSimm came up with making true from "false false", After you have "true" and "false", the only thing you need is "and". That's why nands are the basic building block, they have both "false" and "and" built in
[13:06:07] <c7s> imagemagick predates photoshop
[13:06:11] <c7s> so really photoshop is an imagemagick clone
[13:06:26] *** Quits: duuude (~user@user/duuude) (Remote host closed the connection)
[13:07:34] *** Joins: enyc (~enyc@user/enyc)
[13:07:53] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[13:08:12] *** Joins: Guest75 (~Guest75@mx2.accent.md)
[13:08:28] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[13:08:30] *** Joins: wrongt (~wrongt@user/wrongt)
[13:12:46] <deniska> pyzozord: sounds like lambada calculus
[13:12:52] <amigojapan> I dont agree with Danniel Dennett that "the brain is an illusion created by our brain" that is not an illusion, you need a self to experience an illusio or anything at all
[13:13:28] *** Joins: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd)
[13:13:29] <amigojapan> but I do agree that the brain probably creates the self. it is still not an illusion
[13:13:49] *** Joins: raj_ (uid72176@user/raj)
[13:13:49] *** Quits: Guest75 (~Guest75@mx2.accent.md) (Quit: Client closed)
[13:13:53] *** Joins: jaysicks (~jaysicks@212-40-76-98.pool.digikabel.hu)
[13:14:21] <pyzozord> deniska: yeah, sounds similar to me too
[13:15:52] <amigojapan> pyzozord: the reason NAND are basic building blocks is cause combining dirrenrent arrangements, you can make any kind of gate using them
[13:16:38] <amigojapan> false false sounds like C !(0) which iss just 1
[13:16:59] <vdamewood> CuriousErnestBro: To build graphics files.
[13:17:42] *** Quits: name100 (~user@188.124.155.190) (Remote host closed the connection)
[13:18:48] *** Joins: Pickchea (~private@user/pickchea)
[13:19:38] <CuriousErnestBro> what are graphics files?
[13:19:41] <amigojapan> pyzozord: there are also other gates that can be used as basic gates, but I forget what they are, I only remember they require more gates than NAND gates to get to the every gate possible solution
[13:19:43] <CuriousErnestBro> logo's?
[13:19:58] *** raj_ is now known as raj
[13:20:09] <vdamewood> CuriousErnestBro: Logos, Icons, pictures, whatever the program needs.
[13:20:22] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[13:20:36] *** Joins: aradesh (~aradesh@user/aradesh)
[13:20:41] *** Joins: edun (~qbt@user/edun)
[13:20:47] <CuriousErnestBro> why not render them once and include them with the build files?
[13:21:22] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[13:23:00] <KillerWasp> it's about of electronic? NAND and NOR only exist in electronic chips.
[13:23:24] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[13:23:49] <vdamewood> CuriousErnestBro: There could be any number of reasons for that. Maybe different platforms render different formats. Maybe the original version is considered the 'source' and the GPL requires its inclusion. Maybe pre-rendered copies are included in the source release archive, but not the source control.
[13:24:10] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[13:24:16] <amigojapan> ok KillerWasp, maybe it was NOR, I cant remember clearly
[13:25:44] <KillerWasp> amigojapan: only exist in chips, especially chips dedicated to operations with bits.
[13:25:55] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Quit: Leaving)
[13:26:39] <KillerWasp> Although I make a lot of reference to the old chips, now I don't think it is used as much with so many microprocessors and microcontrollers.
[13:26:46] <amigojapan> KillerWasp: there are chips that have other gates, maybe you mean in certian CPUs. but there are indicidual chips that can contain like say a bunch of implies gates
[13:27:24] *** Quits: edun (~qbt@user/edun) (Ping timeout: 240 seconds)
[13:28:17] <vdamewood> amigojapan: There are two universals, NAND and NOR. They both require the same number of gates to implement all but two of the other gates (and each other), and where they differ, NAND requires one more on one gate, and OR requires one more on the other.
[13:28:41] *** Joins: Kake (~Kake_Fisk@62.73.202.194)
[13:28:41] *** Joins: cockatoodude (~cockatood@bras-base-tnhlon4048w-grc-64-67-70-23-54.dsl.bell.ca)
[13:28:59] <Kake> Would you say pull requests are a part of issue tracking or source control?
[13:29:31] <pyzozord> I need to make something that can parse "variable < 10" and similar "matching" expressions, any suggestions? I need the simplest thing possible (preferably in golang)
[13:29:41] <amigojapan> vdamewood: alright, but there are chips that contain discrete versions of other gates other than NAND and NOR which is what KillerWasp seems to be saying
[13:29:46] <BASHitup> Yeah, I don't know about all of this, but I do know that Windows 11 and it's TPM requirements are a bitch when dealing with virtual machines. 
[13:29:57] <vdamewood> amigojapan: The 7400 series?
[13:30:16] <BASHitup> If you want to shrink or eliminate a hard drive, you have to decrypt the machine, remove the TPM, then do the reverse before restarting it after elminating the drive. 
[13:30:30] <amigojapan> vdamewood: for example there are packets with 4 AND gates in them, let me find a  part number for it
[13:31:28] *** Joins: edun (~qbt@user/edun)
[13:31:38] <user51> pyzozord: shunting yard?
[13:32:10] <KillerWasp> amigojapan: yes, i only remember NAND and NOR, but have more, even with more inputs that two, Although inside it is a series of logical combinations to give one or more results.
[13:32:11] <user51> do you need to handle precedence and/or associativity?
[13:32:18] *** edun is now known as qbt
[13:32:20] <vdamewood> amigojapan: https://en.wikipedia.org/wiki/List_of_7400-series_integrated_circuits#Logic_gates
[13:32:20] <bayaz> Title: List of 7400-series integrated circuits - Wikipedia 
[13:32:40] <user51> https://en.wikipedia.org/wiki/Shunting-yard_algorithm
[13:32:53] <pyzozord> I feel like implementing a parser and interpreter yourself would be too much work, however I don't know, maybe it can be done in <100 loc
[13:33:02] <user51> pyzozord: there's also this, but python only https://github.com/bourguet/operator_precedence_parsing
[13:33:14] <amigojapan> KillerWasp: vdamewood; like this is a chip with several AND gates on it https://www.digikey.jp/ja/products/detail/texas-instruments/CD74HC11E/1692224?utm_adgroup=General&utm_source=google&utm_medium=cpc&utm_campaign=Smart%20Shopping_Product_Zombie%20SKUs&utm_term=&productid=1692224&gclid=Cj0KCQjw5-WRBhCKARIsAAId9FmiEBq-A_uoUVB9VFQ-o11aj_xEulUxUfhAcwa3pX4CM_SA8tRQuNsaApXHEALw_wcB
[13:33:16] <bayaz> Title: CD74HC11E Texas Instruments | ?????IC? | DigiKey 
[13:33:32] <user51> pyzozord: or you could look at go's own lexer/parser :)
[13:33:47] <vdamewood> amigojapan: Yeah, that's a 7400 series chip.
[13:34:26] <KillerWasp> vdamewood: interesting.
[13:34:37] <amigojapan> ah ok vdamewood
[13:35:17] <pyzozord> user51: hmmm sneaky :D that's very clever
[13:35:20] <amigojapan> Ben Eater used several discrete logic gate chips making his breadboard computer
[13:36:15] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[13:36:38] <pyzozord> user51: still, i'd need to write interpreter and figuring out how to bend go's parser to my will might take some time
[13:36:48] <vdamewood> Yep, and sometimes he cheats and uses a NAND gate on a chip he's already using for something else anyway rather than the'correct' gate.
[13:37:08] <vdamewood> For example, a NAND gate makes an excelent substitute for an inverter.
[13:37:43] *** Joins: herjazz (~herjazz@p10295192-ipngn22201marunouchi.tokyo.ocn.ne.jp)
[13:38:13] <amigojapan> vdamewood: ah yes, I remember that. it may be cheaper or easier to stock up in many NAND gates than to buy several  kinds of discrete logic chips I guess
[13:38:29] <pyzozord> I need to write few parsers because I see it's still scary for me
[13:39:09] <vdamewood> amigojapan: In the long, maybe not. But in one or to cases here or there such shortcuts can save a few bucks
[13:39:14] <vdamewood> long run*
[13:39:15] <pyzozord> if I can figure out how to write small dsl parsers in < ~30loc that would be great, then that would for sure be better than using any library
[13:39:27] <pyzozord> but that's not for now
[13:39:38] <user51> pyzozord: whats your metric for LOC?
[13:39:43] *** Quits: c7s (~c7s@user/c7s) (Ping timeout: 250 seconds)
[13:39:47] <pyzozord> "more or less" :P
[13:40:05] <pyzozord> and "whatever editor shows"
[13:40:22] <amigojapan> vdamewood: but in an FPGA I thikn it is all really NAND gates inside
[13:40:26] <user51> i send you my latest awk calculator but i think i've inflicted enough awk upon you :P
[13:40:46] <vdamewood> amigojapan: Sounds plausible.
[13:41:06] <vdamewood> user51: how awkward
[13:41:06] <pyzozord> user51: I will be happy to check it out after work
[13:42:13] <user51> vdamewood: it very quickly reaches a point where you feel like features are missing
[13:42:21] <vdamewood> They are
[13:42:22] *** Joins: Akiva (~Akiva@user/Akiva)
[13:43:00] <amigojapan> any idea where I can send a feature request to  Firefox? their mobile browser does nto have any keyboard bindings for most normal things like alt+left for going back a page, so it is hard to use using a keyboard, while the chrome for mobile has it
[13:43:11] <user51> eventually i wanted to write the rules as a list of arguments, but there's no variadic functions in awk
[13:43:35] <merijn> amigojapan: Not even NAND gates
[13:43:46] <merijn> amigojapan: They're more programmable look up tables
[13:44:00] <user51> basically, each argument would be either a lexical token or a nonterminal, and the rest is simple
[13:44:01] <amigojapan> I see merijn
[13:44:11] <merijn> So you have N wires (bits) coming in and just have a lookup table with the outputs for all 2^N combinations
[13:44:35] <merijn> Which means they can represent more complex logic than a single transistor
[13:44:45] *** reynir1 is now known as reynir
[13:44:46] <user51> http://0x0.st/oNtb.awk
[13:44:49] <vdamewood> merƒ≥n: Like when ben eater used an EEPROM for his micro code implementation?
[13:45:10] <amigojapan> I find it weird, but someone told me that FPGA's HDL can be coded in C nowdays
[13:45:17] <user51> another issue is that despite awk having regexes and the input field, you still need to sort of drop into character-level scanning
[13:45:25] <vdamewood> instruction and decode stage in, enable bits on various parts of the system out.
[13:45:41] <amigojapan> merijn: I see
[13:45:47] *** Joins: duuude (~user@user/duuude)
[13:46:13] <merijn> amigojapan: It can be coded in "C"
[13:46:16] <user51> fwiw, the expr function is a manual transpilation of http://0x0.st/oNtc.y
[13:47:05] <merijn> High-Level Synthesis (aka compiling "high" level languages to FPGA) is often done from completely ill-suited languages like "C" and "Java" (between quotes, because valid HLS C/Java looks *nothing* like normal C/Java)
[13:47:05] <amigojapan> nice merijn, then Idont need to learn verilog or VHDL
[13:47:26] <vdamewood> FWIW, 'FWIW' is an AFWL.
[13:47:33] <vdamewood> AWFL*
[13:47:47] *** Joins: maxzor (~maxzor@2a01cb04054faa007972c534aff021b8.ipv6.abo.wanadoo.fr)
[13:47:49] <user51> also, i believe that my program taks a different approach: parser first, which then calls the lexer
[13:47:59] <merijn> C especially is a terrible choice, imo. The two main things C are good at are pointers and memory mutation. Guess which 2 things FPGAs are terrible at
[13:48:01] <amigojapan> I see merijn
[13:48:35] <vdamewood> merƒ≥n: Taking out the garbage, and running ot the store for milk?
[13:48:50] <merijn> A colleague from mine is doing HLS from Haskell, which honestly, is much better suited to it (transistor circuits being purely functional :p)
[13:48:50] *** Joins: CyberTailor (~cyber@gateway/tor-sasl/cybertailor)
[13:48:51] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[13:49:10] <merijn> amigojapan: https://clash-lang.org/
[13:49:11] <bayaz> Title: Home 
[13:49:26] <amigojapan> merijn: I imagine you cant just make any program you would on a PC and use it on an FPGA, it needs to be a stream of logic I woudl imagine
[13:49:33] <vdamewood> Clash would have made a good name for a shell.
[13:49:57] <merijn> amigojapan: You treat them more like accelerators (like GPUs) or embedded platforms, yeah
[13:50:56] <amigojapan> right merijn, I have heard of "softcores" which as far as I understand are like processors coded in an HDL which can be flashed onto an FPGA
[13:51:31] <vdamewood> What do you call gratuitous images of softcores?
[13:51:39] *** Quits: qbt (~qbt@user/edun) (Ping timeout: 250 seconds)
[13:51:46] <amigojapan> lol vdamewood
[13:51:49] *** Joins: rsx (~dummy@ppp-188-174-131-150.dynamic.mnet-online.de)
[13:52:16] <amigojapan> vdamewood: are you familliar with the shop called "hard off" in Japan?
[13:52:30] <vdamewood> Nope.
[13:52:45] <amigojapan> vdamewood: it is a kind of hardware thrift shop
[13:52:58] <amigojapan> vdamewood: from the same company as book off
[13:53:26] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[13:55:39] <pyzozord> I have a routing system with "matchers" that match path and headers and query and stuff. I need to add to that system extra layer that rejects route if the expression returns false. So like an extra filter after the route was matched. Can you suggest other words similar to "matcher, evaluator, filter, validator, accepting, rejecting" etc? I'm tryin to decide how to name that thing.
[13:56:26] <pyzozord> I'll start: "qualifier?"
[13:56:56] <pyzozord> and "Rejector" I like this one
[13:57:36] *** Joins: gitgoood (~gitgood@cpc104690-belf11-2-0-cust365.2-1.cable.virginm.net)
[13:58:01] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:58:35] <vdamewood> pyzozord: filter?
[13:59:05] <pyzozord> yes I was thinking of filter to to be honest, but I'm not sure maybe there is a better name
[13:59:29] <pyzozord> can be two words or even three
[13:59:59] <pyzozord> are there things in real life that behave like this?
[14:00:13] <vdamewood> They're called filters.
[14:00:50] <vdamewood> "We use HR to filter unqualified candidates from our hiring pool."
[14:01:35] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpvxfpostq09fkj.ipv6.telus.net) (Remote host closed the connection)
[14:01:39] <amigojapan> HR are horrible in most companies
[14:01:54] <pyzozord> hmm yes I think I will go with filter, unless someone comes up with some cool alternative
[14:03:03] <user51> pyzozord: what resource are you using to learn go?
[14:03:22] <pyzozord> GOPL book
[14:03:41] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:03:56] <user51> kernighan and donovan?
[14:04:00] <pyzozord> yeah
[14:04:11] <pyzozord> I also wen through the https://go.dev/tour about three times in total
[14:04:12] <bayaz> Title: A Tour of Go 
[14:04:13] *** Quits: mspe (~user@tilde.team/user/mspe) (Quit: WeeChat 2.8)
[14:04:20] <user51> hope they won't torment you with getchar() :)
[14:04:35] <pyzozord> heheh
[14:05:33] <pyzozord> oh no I just did "go clone" instead of "git clone"...
[14:05:48] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[14:06:33] <user51> i just made clone function. but sometimes i wonder if command sub-command is going to end up a vim simulator real fast.
[14:07:55] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Quit: WeeChat 2.8)
[14:09:35] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[14:11:45] *** Quits: stagas (~stagas@2a02:587:c49d:51df:b922:95c8:daac:f78b) (Ping timeout: 252 seconds)
[14:12:15] *** Joins: fe23 (~fe23@2409:8a34:466:6010:a963:e1e:5c0e:2b7a)
[14:13:03] *** Joins: plastico (~plastico@neomutt/plastico)
[14:13:12] *** Joins: newwebdev13 (~newwebdev@78.135.91.191)
[14:17:15] *** Quits: swp (~Thunderbi@143.176.249.0) (Remote host closed the connection)
[14:19:09] *** Joins: swp (~Thunderbi@143.176.249.0)
[14:19:27] <pyzozord> what http code would you select for response "i can't do this, my route filter said no, but maybe next guy can": 204 No Content, 404 Not Found, 406 Not Acceptable, 412 Precondition Failed, 417 Expectation Faild, 501 Not Implemented
[14:20:02] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:21:53] *** Joins: abrowne (~AB@159.196.168.233)
[14:21:57] <amigojapan> pyzozord: none of hte above
[14:24:10] <pyzozord> amigojapan: which one would you choose?
[14:24:48] <pyzozord> oh wait there is missing context, this is not going to be sent to the client, this is not going to leave the process
[14:25:03] <amigojapan> pyzozord: I dont think any of those errors reflect the state you want to show
[14:25:10] <pyzozord> it's just a way for a handler function to respond to the http server function "i cannot handle this"
[14:25:28] <pyzozord> hmm maybe I can just use error / exception instead
[14:25:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:26:01] <amigojapan> pyzozord: ok, mmaybe expecation failed seems to be the closest one
[14:26:35] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[14:27:22] *** Joins: Enitin (~Enitin@82.180.145.230)
[14:28:30] <vdamewood> pyzozord: 418
[14:29:46] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[14:29:50] <PlanckWalk> Haha
[14:30:31] *** Joins: edun (~qbt@user/edun)
[14:30:39] <PlanckWalk> More seriously, 400 Bad Request if you're asking the server for something it can't do.
[14:30:46] <Bou> 503 Service unavailable
[14:30:48] <PlanckWalk> (and the client should know that)
[14:31:13] <PlanckWalk> Yes, 503 if the protocol is such that the client might not know that
[14:31:27] *** Quits: password2 (~password8@user/password2) (Ping timeout: 256 seconds)
[14:31:46] <Bou> What is "maybe the next guy can", do you have a "next guy" to redirect to?
[14:32:40] *** Joins: Mangy_Dog (Mange@user/mangy-dog/x-7397214)
[14:33:26] <PlanckWalk> You can't really go with error codes like 417 since they're intended only for specific situations and there may be network infrastructure that depends upon that.
[14:33:31] *** Quits: edun (~qbt@user/edun) (Read error: Connection reset by peer)
[14:34:17] <PlanckWalk> (If you can be sure there will never be, then go wild)
[14:34:22] *** Joins: ravan_ (~ravan@user/ravan)
[14:34:28] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[14:36:07] *** Joins: Numocha (~anonkitty@user/anonkitty)
[14:36:46] <vdamewood> pyzozord: Also, one thing to keep in mind, http error codes also imply whose fault the error is. 4xx codes are the client's fault. 5xx are the server's fault.
[14:37:01] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[14:37:16] <vdamewood> Error 404: You idiot. That file isn' there.
[14:37:30] <vdamewood> Error 503: I'm such an idiot. I fscked something up.
[14:38:11] <vdamewood> Error 418: You idiot. I'm a teapot.
[14:42:08] *** Joins: monr0e (~monr0e@host-81-179-96-15.static.as13285.net)
[14:45:20] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[14:45:51] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[14:45:51] <cockatoodude> I'm an idiot because I spend a day trying to figure out why my blog and IRC network and XMPP servers weren't working, and it was because I enabled UFW after resetting the ruleset to allow only SSH
[14:45:54] *** Joins: toulene (~toulene@user/toulene)
[14:46:01] <cockatoodude> Lol
[14:48:54] <pyzozord> vdamewood: right good point
[14:49:14] *** Joins: Enitin (~Enitin@82.180.145.230)
[14:49:20] <pyzozord> anyway i realized I can just do it via the go error syntax and not pretend it's a http response at all, it was fake response anyway
[14:49:38] *** Quits: Numocha (~anonkitty@user/anonkitty) (Quit: WeeChat 3.4.1)
[14:49:49] *** Joins: Tazy (~Tazmainia@2001:1c02:170b:3d00::1009)
[14:50:53] *** Quits: chir4gm (~chir4gm@user/chir4gm) (Quit: The Lounge - https://thelounge.chat)
[14:51:16] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[14:51:23] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:55:37] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[14:59:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[15:02:08] *** Joins: Pickchea (~private@user/pickchea)
[15:03:58] *** Quits: chir4gm (~chir4gm@user/chir4gm) (Quit: The Lounge - https://thelounge.chat)
[15:04:19] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[15:04:55] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[15:05:24] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 240 seconds)
[15:05:25] *** Joins: noteness_ (~noteness@user/noteness)
[15:05:26] <Jck_true> I'm but a humble man... Slowly changing the world... Converting 4 spaces to a tab... One at a time...
[15:05:31] *** Joins: toulene (~toulene@user/toulene)
[15:06:07] *** Joins: Enitin (~Enitin@82.180.145.223)
[15:06:15] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[15:06:17] <deniska> Ancient evil is lurking among us, bringing tabs into places
[15:06:58] <beaky> nice i use 1 space as a compromise
[15:07:10] <duuude> https://en.uncyclopedia.co/wiki/C%2B%2B
[15:07:13] <bayaz> Title: C++ - Uncyclopedia, the content-free encyclopedia 
[15:07:23] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[15:07:23] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[15:07:23] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[15:07:34] <duuude> "A unique characteristic of C=C+1 is that it lets your friends handle your private parts. With the std or sexually transmitted disease namespace now in the language, it is essential to have your private parts protected during public orgies."
[15:07:34] <deniska> beaky: not even zero width space
[15:07:49] *** Joins: Dr_Tea (~Dr_Tea@2a02:587:4f13:e100:947e:2575:3e59:c13b)
[15:08:37] *** Joins: Klinda (~superleag@user/klinda)
[15:11:53] <beaky> what is the most optimal data structure to search in the middle of strings
[15:12:05] *** Quits: Dr_Tea (~Dr_Tea@2a02:587:4f13:e100:947e:2575:3e59:c13b) (Quit: Leaving)
[15:12:15] <beaky> since tries are only optimal for searching the beginning of strings
[15:12:21] <Jck_true> Our codestandard also choose the compromise allowing both tabs and spaces. Plenty of files have both... Sometimes even on the same line... 
[15:13:24] <GeDaMo> https://www.youtube.com/watch?v=A4JWkW0oROg
[15:13:25] <bayaz> Title: I Got The... (2006 Remaster) 
[15:13:45] <GeDaMo> beaky: do you break your strings into words?
[15:14:37] <beaky> no
[15:15:00] <beaky> maybe i should break them up by space so that i can then index each as its own prefix
[15:15:21] <beaky> but wont that write amplify the data
[15:15:32] <beaky> (thus making my tea database not fit in cache on top of more io)
[15:16:50] *** Joins: tolot (~tolot@dynamic-002-244-155-162.2.244.pool.telefonica.de)
[15:17:10] <pyzozord> GeDaMo: damn that's a cool song
[15:17:16] <GeDaMo> Maybe you need a bigger cache :P https://www.guru3d.com/news-story/3rd-gen-amd-epyc-processors-with-amd-3d-v-cache-technology-expand-high-performance-cpu-portfolio.html
[15:17:18] <bayaz> Title: 3rd Gen AMD EPYC processors with AMD 3D V-Cache technology Released at 4200 to 8800 USD 
[15:17:37] <GeDaMo> pyzozord: if you're a rap fan, you may recognise the section starting about two and a half minutes in :P
[15:18:29] <GeDaMo> "Level 3 cache: 768MB"
[15:20:43] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:21:33] *** Quits: Kake (~Kake_Fisk@62.73.202.194) (Ping timeout: 256 seconds)
[15:22:21] <beaky> nice that is ample room for my tea database to scale
[15:22:23] <GeDaMo> pyzozord: some more trivia: a couple of the session musicians who played on that later went on to make this https://www.youtube.com/watch?v=rs8xE0jLen8
[15:22:24] <bayaz> Title: Rabbit 
[15:22:26] <pyzozord> GeDaMo: it sounded offly familiar :D
[15:23:11] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[15:23:45] <pyzozord> GeDaMo: yeah this one is cool too, I remember you shared it the other day
[15:24:30] <GeDaMo> Ah, did I? Sometimes I lose track :P
[15:24:43] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[15:26:32] *** Joins: Kake (~Kake_Fisk@62.73.202.194)
[15:27:12] <user51> GeDaMo: damn, my l4 cache is only 128mb.
[15:28:22] <user51> what benefits from having such a large cache?
[15:28:53] <GeDaMo> Computational Fluid Dynamics, apparently
[15:30:22] <user51> thanks, now i have an excuse :D
[15:32:06] *** Joins: o|||||o (~ol_greg@50-24-3-187.chstcmta05.res.dyn.suddenlink.net)
[15:39:28] *** Quits: rustyshackleford (uid236774@id-236774.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:39:29] *** Joins: Joanna (uid57472@id-57472.lymington.irccloud.com)
[15:41:38] *** Joins: Tabmow (~tabmow@user/tabmow)
[15:44:24] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.45)
[15:46:15] *** Quits: Valware (~val@51.195.213.25) (Changing host)
[15:46:15] *** Joins: Valware (~val@Valeyard/Developer/Valware)
[15:47:56] *** Quits: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[15:48:05] *** Joins: urnebes (~urnebes@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[15:56:33] *** Joins: name100 (~user@188.124.155.190)
[15:58:21] <arahael> Woah, caches are 128 mb these days? I still remember the days when they were in KB's
[15:58:27] *** Quits: Tabmow (~tabmow@user/tabmow) (Ping timeout: 252 seconds)
[15:59:41] <deniska> Why do we even need RAM in our computers at this point?
[15:59:54] <deniska> 128mb can fit a usable windows xp setup :D
[16:00:26] <GeDaMo> My L3 is only 6MB but my CPU is about 12 years old
[16:01:11] <GeDaMo> You can check you cache sizes with this: for c in /sys/devices/system/cpu/cpu0/cache/index?; do cat $c/{level,type,size,coherency_line_size} | xargs; done
[16:02:37] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 240 seconds)
[16:02:50] *** Joins: terminalpusher (~terminalp@2a01:586:9174:1:55ec:e603:11b7:f9e4)
[16:02:52] <Decker> arahael they still are - make sure to divide by cores
[16:03:31] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[16:04:31] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 245 seconds)
[16:04:35] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:04:55] <arahael> I've got 32K data cache, by the looks of it.
[16:05:05] <psydroid> how much of a performance uplift do you get from these giant caches for workloads that they make a difference for?
[16:05:06] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[16:05:10] <arahael> And L3 is 9216K
[16:05:32] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:05:59] <GeDaMo> http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/  https://blog.codinghorror.com/the-infinite-space-between-words/
[16:06:00] <bayaz> Title: Infographics: Operation Costs in CPU Clock Cycles - IT Hare on Soft.ware 
[16:06:00] <bayaz> Title: The Infinite Space Between Words 
[16:06:41] <Decker> psydroid if you code to work within a few pages of memory ; cache doesn't cache bytes it caches pages; which are 4096 bytes... anyway if you stay working within a few blocks and don't go out of bounds you can be wicked fast...
[16:07:04] <Decker> but mostly it just gets you whatever current performance you have, and it's not a benefit, just the way things are (?)
[16:07:28] <GeDaMo> Cache caches cache lines which are usually 64 bytes nowadays
[16:07:31] *** Quits: duuude (~user@user/duuude) (Ping timeout: 268 seconds)
[16:08:06] *** Joins: Tabmow (~tabmow@user/tabmow)
[16:10:45] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:11:23] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:11:29] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[16:11:33] *** Quits: cockatoodude (~cockatood@bras-base-tnhlon4048w-grc-64-67-70-23-54.dsl.bell.ca) (Quit: Leaving)
[16:11:41] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[16:12:31] <psydroid> Decker, if you know more about the actual impact of these giant caches, please let me know, because it feels a bit like a "power move" to me
[16:12:43] <psydroid> Who is to say that a better performing microarchitecture (like maybe Neoverse N2 or Sapphire Rapids) couldn't get the same performance without using the "hammer" of huge caches
[16:12:43] <jelly> IME almost all workloads benefit from more L2, L3 cache because RAM is so comparatively more latent
[16:12:59] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:13:17] <jelly> also, decent coders are more expensive than Xeon chips
[16:13:54] <psydroid> I haven't worked with these processors and only have client processors with much smaller caches, so that's why I'm asking
[16:14:37] <jelly> it's like magic, getting a new generation of server cpu with more cache is like instant 20-30% gain
[16:14:45] <psydroid> so it's basically like throwing more hardware at the problem, as long as it makes things go faster?
[16:14:50] <Decker> psydroid with the rate that cache is (not) growing; the gains made have a quick falloff; https://www.blackvoxel.com/  this is really fast; but they do a few tricks to only work with a few pages at a time while meshing 32x32x32 blocks
[16:14:52] <bayaz> Title: Blackvoxel, a libre game... 
[16:15:20] <jelly> psydroid, yes, esp. with mixed workloads (VM hosts)
[16:15:21] <psydroid> and we don't care if that is the best use of transistors
[16:16:13] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[16:18:10] *** Joins: pmercado (~pmercado@186.107.36.107)
[16:20:37] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:e0d9:96aa:840c:1d25) (Quit: Textual IRC Client: www.textualapp.com)
[16:24:25] *** Quits: jdmark2 (~jdmark@user/jdmark) (Quit: Leaving)
[16:25:11] *** Quits: joeyzheng5403_ (~kerwin@124.126.18.162) (Remote host closed the connection)
[16:25:44] *** Joins: DevAntoi_ (~DevAntoin@2a01:e34:ec18:50c0:a509:c488:a716:5b9e)
[16:25:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[16:25:47] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:26:38] *** Joins: yewscion (~yewscion@52.94.133.128)
[16:26:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[16:26:57] *** Quits: DevAntoine (~DevAntoin@2a01:e34:ec18:50c0:615d:fc8f:ab6f:d0cd) (Ping timeout: 240 seconds)
[16:28:21] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:31:18] *** Joins: toulene3 (~toulene@user/toulene)
[16:31:18] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:31:19] *** toulene3 is now known as toulene
[16:34:41] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:35:35] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[16:35:42] *** audiobirb is now known as audio
[16:46:14] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:46:50] *** Quits: maxzor (~maxzor@2a01cb04054faa007972c534aff021b8.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:49:50] *** Joins: Twipply (~Twipply@user/twipply)
[16:50:24] *** Joins: stagas (~stagas@2a02:587:c49d:51df:d1fb:e56e:9d27:952b)
[16:51:15] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:52:16] <user51> deniska: intel had a lineup with l4 cache, i believe it was for the gpu
[16:53:10] <user51> https://www.intel.com/content/www/us/en/products/sku/135935/intel-core-i58259u-processor-6m-cache-up-to-3-80-ghz/specifications.html
[16:54:08] <epony> some joker was claiming you can't control your caches and CPU operation, don't listen to that, it's false claims, you can program everything you have access to
[16:55:22] *** Joins: DrAnything (uid538291@id-538291.lymington.irccloud.com)
[16:55:46] <epony> kee, that must be you ;-)
[16:55:58] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[16:59:35] <epony> https://en.wikipedia.org/wiki/X86_instruction_listings#Added_with_80486
[16:59:35] <bayaz> Title: x86 instruction listings - Wikipedia 
[16:59:40] <epony> "INVD 0F 08 Invalidate Internal Caches Flush internal caches. Modified data present in the cache are not written back to memory, potentially causing data loss."
[17:00:09] <epony> "WBINVD 0F 09 Write Back and Invalidate Cache Writes back all modified cache lines in the processor's internal cache to main memory and invalidates the internal caches."
[17:00:15] *** Quits: terminalpusher (~terminalp@2a01:586:9174:1:55ec:e603:11b7:f9e4) (Remote host closed the connection)
[17:00:35] *** Joins: gas51627 (uid91066@id-91066.helmsley.irccloud.com)
[17:01:51] <epony> there are moreso additions with 3DNOW! and SSE and SSE2 and VT-x
[17:02:12] <epony> cache whining is not sensible
[17:03:16] <epony> there are also combinations of instructions that result in flushes and lookaside buffers and tables cleanups
[17:03:38] *** Joins: zaher (~zaher@37.48.178.94)
[17:03:43] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[17:03:48] <epony> you can also pull and store (prefetch) instructions and data into caches
[17:05:04] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[17:06:13] *** Quits: zaher_ (~zaher@37.48.179.33) (Ping timeout: 240 seconds)
[17:07:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:09:26] *** Quits: DrAnything (uid538291@id-538291.lymington.irccloud.com) ()
[17:11:29] *** Joins: trevors (~trevors@user/trevors)
[17:13:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:14:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[17:16:47] *** Joins: duuude (~user@user/duuude)
[17:20:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:77fe:55bd:621e:2223)
[17:20:36] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[17:21:07] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:21:11] <beaky> i think ocaml uses software prefetch for the garbage collector
[17:22:31] <beaky> software prefetch mentioned in this interview for sick performance boosts https://signalsandthreads.com/memory-management/
[17:22:32] <bayaz> Title: Signals and Threads | Memory Management 
[17:24:13] <edgar-rft> prefetch means that it collects the garbage before it gets created?
[17:24:15] <beaky> since the garbage collection is order invariant on the marking the software prefetching helps improve gc throughput by letting the gc queue up data to be marked 
[17:25:18] <pyzozord> oh interesting, I thogh cache was completly hidden
[17:26:06] <beaky> yes prefetch means instead of collecting in the order it gets the garbage it prefetches all the garbage it can handle before beginning to observe the fields of the garbage
[17:27:42] <PlanckWalk> Yep, if you actually try to look at the data then it stalls anything that depends upon that data.
[17:28:01] <PlanckWalk> If you prefetch first then you can do other stuff while it crawls out from RAM
[17:28:56] <beaky> yes cache is indeed completely 'hidden' in the sense that it is transparent to programs, despite there being cache control instructions there are no instructions that go 'is $x in cache or in dram or somewhere else' 
[17:29:31] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[17:29:40] <edgar-rft> let's create a programming language that produces nothing but garbage to emphasize the importance of a garbage collector
[17:29:44] <pyzozord> ooh right no control != transparent
[17:30:39] *** Joins: norayr (376bc34bfc@37.252.78.253)
[17:31:23] <PlanckWalk> You can indirectly infer whether something was in the cache after it's too late :-p
[17:31:34] <PlanckWalk> "That took a long time, must have not been in cache"
[17:31:39] *** Joins: wedr (~tom_mai78@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:31:50] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[17:32:15] <InPhase> edgar-rft: RAIG, where every class has a garbage constructor.
[17:32:22] <PlanckWalk> (Or there was a context switch or something, who knows)
[17:32:27] *** Quits: raj (uid72176@user/raj) (Quit: Connection closed for inactivity)
[17:32:47] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:32:59] *** Joins: inky_ (~inky@5.77.205.35)
[17:33:34] <user51> d
[17:33:45] <user51> orry, wrong terminal :|
[17:36:11] *** Quits: inky (~inky@46.36.114.138) (Ping timeout: 245 seconds)
[17:36:50] <edgar-rft> InPhase: you're totally right, a garbage-collected language is ueless without a garbage constructor!
[17:37:21] <edgar-rft> thank you, I'll instantly ask on the related channels :-)
[17:37:57] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:d5c4:f026:e451:bdeb)
[17:38:59] *** Joins: lispy (~lispy@user/lispy)
[17:40:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[17:41:30] <merijn> edgar-rft: You mean Haskell? :D
[17:41:40] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[17:41:51] <merijn> (referring to "producing nothing but garbage")
[17:42:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[17:43:40] *** Joins: toulene (~toulene@user/toulene)
[17:44:53] <merijn> GHC manages some truly *impressive* allocation rates :p
[17:44:54] *** Quits: Jonopoly (~Jonopoly@user/jonopoly) (Quit: WeeChat 3.0)
[17:47:14] <duuude> we should apply prefetching in real-life garbage collection
[17:47:16] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[17:51:54] <Decker> it' called putting the cans by the cub :)
[17:51:56] <Decker> curb
[17:53:28] *** Joins: dan (~dan@177-185-249-194.goxinternet.com.br)
[17:53:42] *** dan is now known as EuSouODan
[17:54:45] *** Quits: name100 (~user@188.124.155.190) (Ping timeout: 250 seconds)
[17:55:54] *** Quits: EuSouODan (~dan@177-185-249-194.goxinternet.com.br) (Client Quit)
[17:58:19] <duuude> third of the food produced is wasted, so we should pre-emptively waste it on site to save time and energy
[17:59:01] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[17:59:25] *** XV9 is now known as XV8
[17:59:28] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[17:59:43] <Decker> https://www.youtube.com/watch?v=F6Nh3bH79xs 
[17:59:44] <bayaz> Title: Playing Darts 
[17:59:49] <Decker> (buttered side down)
[17:59:51] <kee> epony: Aren't those privileged instructions? But https://stackoverflow.com/questions/41775371/what-use-is-the-invd-instruction says my whining was for almost nothing (the top answer is one of the primary use-cases I had in mind, though I imagined loading stuff in from the RAM as well), so I guess I must concede.
[17:59:52] <bayaz> Title: What use is the INVD instruction? 
[18:00:14] *** Joins: hololeap (~hololeap@user/hololeap)
[18:00:32] <Decker> prevents flush of partial data back to memory - probably process termination?
[18:00:50] *** Joins: snake (~snake@user/snake)
[18:06:49] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[18:08:12] *** Quits: yewscion (~yewscion@52.94.133.128) (Ping timeout: 240 seconds)
[18:09:16] *** Quits: widp (~widp@124.123.106.12) (Remote host closed the connection)
[18:13:28] <epony> from that thread, quoted requote "12.2 OPERATION OF THE INTERNAL CACHE  Software controls the operating mode of the cache. Caching can be enabled (its state following reset initialization), caching can be disabled while valid cache lines exist (a mode in which the cache acts like a fast, internal RAM), or caching can be fully disabled."
[18:15:31] *** Quits: zaher (~zaher@37.48.178.94) (Ping timeout: 256 seconds)
[18:16:37] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[18:16:42] *** Quits: herjazz (~herjazz@p10295192-ipngn22201marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:17:21] *** Joins: widp (~widp@124.123.106.12)
[18:17:23] <Decker> There's a flag on CreateFileMapping https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-createfilemappingw    'SEC_NOCACHE' if you want your application to be about 50% slower you can work with memory with that flag :)  Sort of though NOCACHE was more like a file cache between the file and memory; but it's actually the CPU side cache
[18:17:24] <bayaz> Title: CreateFileMappingW function (memoryapi.h) - Win32 apps 
[18:18:48] <kee> epony: That's more turning the cache off and on, though; it's not choosing what to load into it.
[18:18:56] <kee> Still powerful, but not exactly a preload instruction.
[18:19:30] <kee> Er‚Ä¶ ignore me.
[18:20:42] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[18:22:24] <kee> I am now retreating to a weaker position: the additional complexity caused by automatic population of the cache reduces processor yields.
[18:23:41] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:23:42] *** Quits: Elzington_ (~Elzington@87.249.134.24) (Quit: Leaving)
[18:24:48] *** Joins: gambl0re (~gambl0re@2607:fea8:a59f:c360::81cb)
[18:25:22] *** Joins: Elzington (~Elzington@87.249.134.24)
[18:35:15] <merijn> edgar-rft: I just checked, my Haskell data analysis code profiles as: Alloc rate    374,311,893 bytes per MUT second 
[18:35:24] <merijn> So a mere 300 MB per second allocation rate :p
[18:35:31] <nomagno> How are monads actually useful for modelling side-effects?
[18:35:31] <duuude> how much can one step up the linux performance if one doesn't care about security?
[18:35:34] <merijn> I think I've topped 2GB per second, though
[18:35:43] <nomagno> I need an example to understand it, I guess
[18:35:50] <nisstyre> nomagno: because you can use them as sequencers
[18:35:50] <duuude> could userland be run at ring-0?
[18:35:56] <nomagno> It just seems like they're pure functions with extra wrapping capabilities
[18:36:19] <kee> nomagno: The thing they wrap doesn't have to exist within Haskell.
[18:36:37] <nomagno> I wasn't asking about Haskell
[18:36:38] <oldlaptop> duuude: Consider that you're also potentially sacrificing reliability if you let userland stomp all over everything.
[18:36:41] <nomagno> But about CS in general
[18:36:58] <oldlaptop> Lots of security bugs are also just plain bugs.
[18:37:00] <kee> Substitute "Haskell" for "whatever programming language".
[18:37:05] <nisstyre> nomagno: your answer is that they are convenient for modeling something happening after another thing
[18:37:08] <kee> Monads to model side-effects is, in the code, a hack (as you can see with the Haskell IO implementation), but it's mathematically correct.
[18:37:10] <nisstyre> i.e. sequencing
[18:37:35] <merijn> nomagno: Because the abstract pattern happens to match tons of practical applications, including "enforcing an order on side-effects"
[18:37:43] <nisstyre> side effects are just things that have to happen in a certain order to work
[18:37:59] <kee> There is some additional state passed around, and that state effectively gets mutated, then the mutated version is passed around instead.
[18:38:11] <nomagno> But isn't just a 'pure' (not really) function that returns a non-constant value also a valid implementation?
[18:38:22] <kee> Yeah, but then it's not really pure.
[18:38:24] <merijn> kee: Not really how it's implemented (or works conceptually)
[18:38:52] <merijn> nomagno: A valid implementation of what?
[18:38:55] <kee> merijn: I know it's not how it's implemented (you can't pass around the entire state of the universe) but how isn't it how it works conceptually?
[18:39:00] <nisstyre> it depends if the underlying thing copies values or references
[18:39:07] <nisstyre> which doesn't really matter for this discussion...
[18:39:17] <merijn> kee: that view breaks down horribly in the context of, for example, multi-threading
[18:39:25] <nomagno> merijn: of side-effects
[18:39:42] <merijn> I'm not sure what "a valid implementation of side-effects" means
[18:40:05] <kee> There are two ways to implement side-effects: you model them, so they're not side-effects any more; or you don't model them.
[18:40:13] <nomagno> I mean, what stops you from having a function that takes multiple arguments trough currying then evaluates them in succession? Oh right, declarativeness...
[18:40:20] <nomagno> It all evaluates in one step
[18:40:27] <nisstyre> nomagno: there just isn't such a thing
[18:40:31] <nomagno> No matter what you do
[18:40:31] <nisstyre> in Scheme you have (begin ...)
[18:40:33] <nisstyre> that does that
[18:40:42] <nisstyre> in C you have statements or the comma operator
[18:40:48] <merijn> nomagno: That requires specifying an evaluation order, which in turn ruins laziness
[18:40:54] <nisstyre> they're not "mathematically pure" enough for some people
[18:40:59] <nisstyre> that's just how it is
[18:41:02] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Quit: Leaving)
[18:41:05] <merijn> nomagno: Evaluation order is explicitly *not* specified for Haskell because lazy
[18:41:13] <oldlaptop> nisstyre: even C doesn't guarantee an order of evaluation for function arguments
[18:41:22] <nisstyre> oldlaptop: comma operator does though
[18:41:30] <kee> merijn: I didn't think the IO monad was safe against multi-threading.
[18:41:37] <oldlaptop> (the , in foo(a,b) is not the comma operator)
[18:41:43] <nisstyre> yeah I know
[18:41:59] <nisstyre> I rarely use it anyway
[18:42:06] <nisstyre> usually no reason except to reduce line count
[18:42:11] <oldlaptop> It's not all that useful
[18:42:15] <nomagno> So, a monad is just a mathematically valid magic wrapper that can call extra magic?
[18:42:32] <nisstyre> that's not what a monad is
[18:42:37] <kee> A monad is a monoid in the category of endofunctors.
[18:42:59] <nomagno> That doesn't clear it up
[18:43:08] <nomagno> Wikipedia does a bad job at explaining
[18:43:12] <merijn> nomagno: So, if you want an actually semi-useful description, you should read the Wadler paper. It basically starts with "here's 4 code patterns" "here's a new abstraction, the monad" "here's how you can use it to redo the previous examples"
[18:43:23] <nomagno> Which paper?
[18:43:26] <merijn> nomagno: Wikipedia is always terrible at math. And that stupid endofunctor joke is dumb too
[18:43:30] <nomagno> I'll look it up I guess
[18:43:40] <merijn> nomagno: https://caiorss.github.io/Functional-Programming/papers/Monads_for_functional_programming-Phillip_Walder.pdf
[18:43:40] <bayaz> Type: application/pdf Size: 216.0 kB 
[18:43:49] <oldlaptop> isn't the stupid endofunctor joke an actual quotation? :(
[18:44:05] <merijn> nomagno: Requires a bit of Haskell syntax, like pattern matching
[18:44:19] <merijn> oldlaptop: It's a quote of a joke, yes. No one ever said that as serious explanation
[18:44:25] <oldlaptop> ah.
[18:44:49] <merijn> It's a true statement, but also completely useless to anyone not into some super niche math that's barely relevant in Haskell programming
[18:45:26] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[18:45:54] <merijn> nomagno: tbh, that paper is super accessible (well, assuming you know basic Haskell syntax :p), but everyone seems to avoid it like the plague, because "paper" and PDF file format are scary
[18:46:11] *** Quits: Twipply (~Twipply@user/twipply) (Remote host closed the connection)
[18:46:17] <oldlaptop> PDF is pretty scary, to be fair
[18:46:30] *** Joins: Twipply (~Twipply@user/twipply)
[18:46:45] <merijn> There's also the "Lazy Functional State Threads" paper, which describes how you can use monads as abstraction for state and IO (but that's quite a bit more advanced)
[18:47:16] <kee> I don't get it. If monads are an abstraction of doing stuff, then how are they functional?
[18:47:17] <nisstyre> nomagno: btw your idea of currying would be really hard to compile into something reasonable I think
[18:47:23] *** Quits: newwebdev13 (~newwebdev@78.135.91.191) (Read error: Connection reset by peer)
[18:47:28] <nisstyre> like you'd have a bunch of useless closures
[18:47:34] *** Joins: newwebdev13 (~newwebdev@78.135.91.191)
[18:47:47] <nisstyre> but it could be done I guess idk
[18:48:06] <merijn> kee: They are an abstraction in the purest algebraic/math sense of the word. Not the programmer notion of "abstraction". So think things like "rings", "groups", and "monoids"
[18:48:33] <oldlaptop> kee: Ultimately you need some way to admit that reality isn't purely functional.
[18:48:42] <merijn> Which is also why people struggle with them. They wanna know "but really, what *is* a monad besides the laws?" and the answer is "the laws *are* the thing"
[18:48:54] <nisstyre> I guess continuation passing style is already used in compilers
[18:48:59] <merijn> Anything that obeys those laws *is* a monad, regardless of what you want
[18:49:35] <oldlaptop> Ideally you do that in such a way as to maximize the amount of code that can ignore the messy parts of reality
[18:49:42] <merijn> nisstyre: Yes. CPS style is heavily used in functional languages. Imperative languages tend to use Static Single Assignment (SSA) in their optimisers. But if you squint a bit SSA and CPS are "basically" the same
[18:50:09] <knusbaum> Not all monads are not functional, just ones with side-effects like the IO monad.
[18:51:01] <knusbaum> and there the monads are used to provide strict rules about where/how you can cause side effects to prevent it "spreading" to the rest of the code.
[18:51:09] <merijn> Pedantic sidenote: IO doesn't have side-effects
[18:51:41] <merijn> Like, I get that many people like to use "side-effects" to talk about mutability, etc. But the entire point of *having* IO in haskell is to *not* have side-effects, but just "effects"
[18:52:02] <knusbaum> Ahh. IO doesn't have "side-effects" just "effects". Fair enough.
[18:52:06] <merijn> side-effect implies something unobservable, but the IO type is all about making effects observable
[18:52:18] <knusbaum> I like that. I'll be sure to say that from now on.
[18:52:28] <merijn> Although, admittedly Haskell has a whole bunch of *wildly* unsafe functions introducing side-effects :p
[18:52:37] <Decker> merijn ya that always bothered me about the terminaology
[18:53:09] <nisstyre> it is impossible to do certain things in Haskell like if you wanted to write a digital to analog converter then you need to be extremely precise about when things happen
[18:53:12] <merijn> Like the (in)famous accursedUnutterablePerformIO :)
[18:53:27] <nisstyre> that's just a fact of the language though and you'd call into a library in C for that
[18:53:47] <nisstyre> I'm not sure if it's theoretically possible to do, maybe with some mode to turn off garbage collection and setup interrupts?
[18:53:50] <nisstyre> idk
[18:54:59] <knusbaum> nisstyre, is that a problem with Haskell being functional though, or a problem with it having a significant runtime and not being geared towards real-time applications?
[18:55:13] <nisstyre> knusbaum: I think it's a problem of the laziness
[18:55:13] <merijn> knusbaum: Mostly the 2nd
[18:55:25] <oldlaptop> nisstyre: You can't necessarily even "do that in C", without additional guarantees from the implementation
[18:55:25] <nisstyre> but yeah you could somehow shoehorn it in if you wanted maybe
[18:55:41] <nisstyre> oldlaptop: yeah you need special sauce for timers and stuff
[18:56:20] <merijn> knusbaum: You could design a pure functional language for that and I'd actually think it'd work better than C, but Haskell is not that language :)
[18:56:28] <kee> merijn: I see. So the monad with optional state is a monad, but not the only monad?
[18:56:37] <knusbaum> merijn, right.
[18:56:43] *** Joins: yewscion (~yewscion@52.94.133.128)
[18:56:46] <merijn> There are (probably?) infinitely many monads :p
[18:57:00] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[18:57:11] <knusbaum> kee: Maybe is a monad
[18:57:12] <merijn> knusbaum: Somewhat relatedly, see something like Clash https://clash-lang.org/ which uses Haskell for HLS to FPGAs
[18:57:13] <bayaz> Title: Home 
[18:57:21] <kee> No, there are definitely infinitely many monads. There are at least as many monads as reals.
[18:57:38] <merijn> kee: Are there? That's not obvious to me :)
[18:57:40] <beaky> free monads for all
[18:57:49] <kee> merijn: Consider some monad.
[18:58:00] <beaky> i wish rust had monads
[18:58:01] <kee> Now construct a monad that's identical, except it's related to the number 0.3.
[18:58:03] <merijn> Oh, actually, I take it back, there are at least countably infinite monads
[18:58:05] <kee> beaky: It has some monads.
[18:58:10] <kee> And you can make as many more as you like.
[18:58:25] <merijn> Since every tuple has a monad instance and there are countably infinite tuple sizes
[18:58:35] <knusbaum> merijn, Countably infinite I can see, I'm not sure how we get to uncountably infinite, which would be the real numbers.
[18:58:36] <kee> merijn: Oh, are you limiting yourself to the monads that fit in memory‚ÄΩ
[18:58:49] <kee> I thought we were talking about mathematics. :-p
[18:58:53] <merijn> kee: That statement doesn't really make sense a monad is not a thing
[18:59:16] <kee> Monads are mathematical objects, aren't they?
[18:59:25] <nomagno> merijn: I know enough Haskell to understand that
[18:59:27] <nomagno> Very informative!
[18:59:27] *** Quits: amigojapan (uid86330@id-86330.helmsley.irccloud.com) ()
[18:59:38] <merijn> "being a Monad" is a property of things and whether the set of things is infinite is not obvious (well, it is now with my tuple example)
[18:59:53] <nomagno> I can conclude that yes, as I thought, it's kinda cheating with the pureness claims
[19:00:06] <nisstyre> somehow Scheme ended up being a lot more suitable for running on microcontrollers than other functional languages
[19:00:07] *** Quits: widp (~widp@124.123.106.12) (Read error: Connection reset by peer)
[19:00:08] <merijn> nomagno: It's an underrated introduction, imo. I like the "here's the same thing 4 times but different, now lemme show you how they're the same" approach
[19:00:16] <nisstyre> maybe because it's super small
[19:00:24] <nisstyre> and you can tweak it and it still seems like Scheme
[19:00:37] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Ping timeout: 256 seconds)
[19:00:37] <merijn> nomagno: wrt pureness it's not cheating, but many programmers conflating meta levels
[19:00:58] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:01:44] <knusbaum> nisstyre, Haven't written scheme for microcontrollers, but lisps in general lend themselves well to domain-specific problems because the syntax is so flexible.
[19:01:50] <merijn> nomagno: The definition of Haskell (and level at which purity is judged) is at the level of "language semantics" i.e. what does a program mean. You can (in fact, pretty much have to!) an implementation that is "internally" not pure, while preserving pure semantics
[19:02:10] <merijn> nomagno: i.e. it's all about "can a lack of purity be *observed* from within the language?"
[19:02:18] <kee> What's the difference between -> and => in Haskell?
[19:02:36] <nisstyre> kee: functions vs type classes
[19:02:46] <nisstyre> => is for type class variables
[19:02:48] *** Quits: Jaami2 (~Jaami@182.185.149.132) (Quit: Nettalk6 - www.ntalk.de)
[19:03:09] <nisstyre> like (Eq a) => a
[19:03:15] <nisstyre> says a is in type class Eq
[19:03:19] <nisstyre> https://www.haskell.org/tutorial/classes.html
[19:03:20] <bayaz> Title: A Gentle Introduction to Haskell: Classes 
[19:03:20] <nomagno> merijn: I think I get it
[19:03:38] <merijn> nomagno: I think this blog gives a good explanation of the *conceptual* separation that IO enforces (while keeping in mind that that *conceptual* split is not a reality implemented by compilers) https://blog.jle.im/entry/the-compromiseless-reconciliation-of-i-o-and-purity.html
[19:03:38] <bayaz> Title: The Compromiseless Reconciliation of I/O and Purity 
[19:04:11] <merijn> nomagno: The compiler can use all the dirty, non-pure tricks it wants if-and-only-if you can never find out/prove it did so
[19:04:24] <merijn> And somewhat related to the discussion on explanations: https://blog.jle.im/entry/io-monad-considered-harmful.html
[19:04:25] <bayaz> Title: IO Monad Considered Harmful 
[19:05:14] <ProfSimm> merijn: I swear if this article is ironic, I'll start hating FP.
[19:05:44] <merijn> (i.e. note that you could use IO to implement pure FP without having a Monad interface at all, it's just that the Monad interface is a great fit for the IO type)
[19:05:47] <nisstyre> the proliferation of pointless debates is why I kind of hate it
[19:05:53] <nisstyre> or at least keep it at arm's length now
[19:06:06] <nisstyre> would rather solve interesting problems than have pointless arguments about purity
[19:06:17] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[19:06:24] <merijn> nisstyre: Ah, but purity gives you a whole bunch of interesting new solutions to work with!
[19:06:37] <kee> merijn: Thanks to that article, I think I understand.
[19:06:41] *** Joins: widp (~widp@124.123.106.12)
[19:06:49] <nisstyre> merijn: which is why I still think it's a valid model of programming
[19:07:04] <merijn> nisstyre: Haskell's STM is, as far as I can tell, still essentially the only usable STM implementation and it's just straight magic
[19:07:08] <nisstyre> just that some of the things people do with it give me a headache
[19:07:22] <merijn> nisstyre: There was a nice talk at C++now about those kinda things
[19:07:31] <nisstyre> is that a conference?
[19:07:42] <merijn> nisstyre: https://www.youtube.com/watch?v=lC5UWG5N8oY
[19:07:43] <bayaz> Title: C++Now 2017: Ryan Newton "Haskell taketh away: limiting side effects for parallel programming" 
[19:07:56] <pyzozord> ProfSimm: it's not ironic, it says "Saying that the answer is the ‚ÄúIO monad‚Äù implies that the monad part is something important. It‚Äôs not."
[19:08:17] <nisstyre> merijn: yeah that's a thing with data parallelism, you don't want any side effects because it introduces too much dependencies
[19:08:23] <pyzozord> seems like this post is more "please don't scare newbies with monads"
[19:08:39] <nisstyre> it's nice that the C++ people are realizing that
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:08:50] <merijn> nisstyre: It also has some interesting things about separating the computer representation of datatypes from the interface you program against
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:09:25] <merijn> nisstyre: i.e. "what if our pattern matching looks like a recursive ADT, but the implementation is flattened array to get the best of both worlds?"
[19:09:26] <nisstyre> yeah I suppose that would help too
[19:09:35] <nisstyre> like not caring about struct padding nonsense
[19:10:26] <merijn> pyzozord: conflating the "magic" of IO as part of "monads" (rather than inherent to IO itself) is where a lot of the confusion comes from. Which is also why I like that first blog post to distinguish those things
[19:10:33] <nisstyre> merijn: well for example heaps, you can have it be an array under the hood that's all 1 dimensional
[19:10:37] <nisstyre> but it's conceptually a tree
[19:10:49] <pyzozord> the author has a point, I think it's a bit like explaining to a newbie that puts() is actually a wrapper for a write syscall. Newbie has other things to worry about
[19:11:00] *** Quits: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se) (Ping timeout: 240 seconds)
[19:11:10] <nisstyre> there's not much difference except you save on having to jump around in memory with pointers
[19:11:46] <nisstyre> I don't know how you could automagically transform them into each other though
[19:11:50] <nomagno> ... I don't really think it's relevant pyzozord, because I have yet to find a practical application for that one piece of trivia :P
[19:12:07] <nomagno> Syscall is just another name for 'OS goes brrrr'
[19:12:40] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[19:12:45] <merijn> nomagno: Separating "semantics" from "implementation" and having a "semantics preserving mapping to an implementation" are three concept I've noticed lots of programmers struggle with
[19:13:06] <pyzozord> yeah it's a bit of "deep lore" for passionates
[19:13:43] <pyzozord> i personally don't like black boxes so I always like to pop the hood and see what's inside
[19:14:19] <nomagno> Unless you are using an open spec RISC-V CPU you're probably stuck with black boxes
[19:14:20] <merijn> pyzozord: Sure, but it's important to know which layer you're talking on, because the fact that the blackbox *internally* doesn't follow the external semantics is not a problem
[19:14:37] <nisstyre> yeah a lot of hardware is pretty closed
[19:14:39] <nomagno> ... I really want an open spec RISC-V CPU but they're expensive!!!,
[19:14:42] <nisstyre> even though it markets itself as "open"
[19:14:50] <nisstyre> e.g. raspberry pi relies on closed source binary blobs to even boot up
[19:14:59] <nomagno> ^
[19:15:28] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[19:15:56] <nomagno> People are perfectly comfortable with the idea of using hardware that just works:tm:. So they don't possibly think that can be a point of closeness
[19:16:01] <nomagno> When it very much is
[19:16:26] <pyzozord> Yeah I guess I'm less itchy (no pun intended) when I have at least an idea of how something could be done
[19:16:45] <nisstyre> microcontrollers like the atmega32 and esp8266 are ok, and the datasheets and docs and stuff are pretty open
[19:16:46] <pyzozord> how it's actually done it's less critical, at least for the things I'm less interested in
[19:16:54] <nisstyre> but you can't go look at all the design files they used to make it
[19:16:59] <nisstyre> at least not as far as I know
[19:17:17] <nomagno> I get scared whenever I take a proper look at x86/amd64
[19:17:27] <nomagno> Those CPUs are hell on earth
[19:17:40] <pyzozord> but then there are also some things I won't rest until I dig through them all the way down to electrons :P
[19:17:41] <nisstyre> nomagno: I've been thinking of learning the xtensa instruction set
[19:17:47] <nisstyre> just so I can try and do something fun with it
[19:17:56] <nisstyre> like maybe write a Forth or something for it
[19:18:21] <nisstyre> and I have so many of these cheap boards to run it on
[19:18:43] <nomagno> Forth is elegant but it is like the most tedious thing ever to write a compiler/interpreter for
[19:18:47] <nomagno> So many default tokens!
[19:19:07] <nisstyre> yeah I would probably do lisp instead
[19:19:30] <nisstyre> I guess both of them have been done to death for these already
[19:20:20] <nomagno> I'd just write a VM/transpiler for my instruction set as a warmup, then probably do a super-small lisp
[19:21:00] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[19:21:23] <nomagno> BTW day 5 million of figuring out which compiler to port to my VM!
[19:21:38] <nomagno> The architecture is just too weird! None of them like it
[19:22:46] *** Joins: testanon (~bnchs@105.157.31.79)
[19:23:49] *** Joins: andypandy (~andypandy@h-178-174-148-234.A163.priv.bahnhof.se)
[19:26:41] *** Joins: pmercado_ (~pmercado@186.107.58.34)
[19:27:02] *** Quits: pmercado (~pmercado@186.107.36.107) (Ping timeout: 260 seconds)
[19:27:02] <beaky> port forth of course
[19:27:09] *** Joins: inky (~inky@78.109.66.134)
[19:27:24] *** Quits: inky_ (~inky@5.77.205.35) (Ping timeout: 240 seconds)
[19:27:25] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[19:27:47] *** Joins: xkuru (~xkuru@user/xkuru)
[19:28:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[19:28:38] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[19:28:51] *** Joins: norayr (376bc34bfc@37.252.78.253)
[19:29:35] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[19:29:59] *** DevAntoi_ is now known as DevAntoine
[19:30:20] *** Quits: gas51627 (uid91066@id-91066.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:32:28] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:35:15] *** Joins: Buartawe (~AnCELASTR@216.243.47.158)
[19:36:48] *** Quits: duckgoose (~BurdIRC@user/duckgoose) (Ping timeout: 252 seconds)
[19:38:38] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[19:38:57] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:39:02] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[19:44:17] *** Joins: pulse (~pulse@user/pulse)
[19:47:34] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) ()
[19:48:58] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[19:51:16] <Sqaure>  Damn, hotsauce is great with lots of food. I wonder if one can get addicted to it, to the point food wo tastes bland.
[19:52:41] *** Quits: Kake (~Kake_Fisk@62.73.202.194) (Quit: Leaving)
[19:53:19] *** Joins: name100 (~user@188.124.155.190)
[19:53:23] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[19:53:23] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[19:53:23] *** Joins: tane (~tane@user/tane)
[19:53:34] *** Joins: Pickchea (~private@user/pickchea)
[19:54:59] *** Joins: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f)
[19:57:54] <user51> hot sauce with hotter saue :P
[19:58:58] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[19:59:15] *** Quits: Joanna (uid57472@id-57472.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:00:35] <edgar-rft> Sqaure: how long do you think will it take until hotsauce without moar hotsauce tastes bland?
[20:00:55] *** Quits: testanon (~bnchs@105.157.31.79) (Ping timeout: 256 seconds)
[20:01:01] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[20:02:01] <Sqaure> edgar-rft, idk to be honest. I know hot sauce is a thing in US. Here we've only had "Tabasco" until recently.
[20:02:36] *** Quits: abrowne (~AB@159.196.168.233) (Remote host closed the connection)
[20:02:51] *** Joins: inky_ (~inky@5.77.176.214)
[20:03:55] <[itchyjunk]> Tabasco is a brand name.
[20:04:32] <[itchyjunk]> There is also tabasco peppers.
[20:05:01] *** Quits: inky (~inky@78.109.66.134) (Ping timeout: 240 seconds)
[20:05:09] *** Joins: ivanf (~ivan@user/ivanf)
[20:05:48] <[itchyjunk]> Any product, condiment or otherwise made from peppers is considered hot sauce really.
[20:06:03] <[itchyjunk]> Like sriracha.
[20:06:09] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[20:06:13] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Ping timeout: 240 seconds)
[20:07:42] <Sqaure> Yeah, i know. I just mean we haven't had the wide offering I gathered is available in the US
[20:07:45] *** Joins: norayr (376bc34bfc@37.252.78.253)
[20:08:43] *** Quits: CyberTailor (~cyber@gateway/tor-sasl/cybertailor) (Remote host closed the connection)
[20:09:45] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[20:10:30] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Read error: Connection reset by peer)
[20:10:36] *** Joins: martums597 (~martums@user/martums)
[20:10:37] *** Quits: kmh (~kmh@2a00:6020:5004:6800:d56f:5ec4:ddd1:e31d) (Read error: Connection reset by peer)
[20:10:38] *** Quits: kittyn (~kittyn@096-039-144-255.res.spectrum.com) (Read error: Connection reset by peer)
[20:10:39] *** Joins: spynx (~spynxic@spynxic.powered.by.lunarbnc.net)
[20:10:45] <edgar-rft> at least now we can complain when our hotsauce is too cold
[20:10:45] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Client Quit)
[20:10:46] *** Joins: austincheney_ (~austinche@104-54-57-132.lightspeed.rcsntx.sbcglobal.net)
[20:10:54] *** Joins: kmh (~kmh@2a00:6020:5004:6800:5555:27f0:7629:76f0)
[20:11:01] *** Joins: kittyn (~kittyn@096-039-144-255.res.spectrum.com)
[20:11:02] *** Joins: Compy (~compy@user/compy)
[20:11:06] *** Joins: dsrt^ (~dsrt@96-67-120-105-static.hfc.comcastbusiness.net)
[20:11:11] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[20:11:45] <audio> can someone tell me what's wrong with my code? it's not pickling all the data: https://bpa.st/GO7Q
[20:11:46] <bayaz> Title: View paste GO7Q 
[20:12:31] <[itchyjunk]> I think I've seem more hot sauce (or chilli sauce) in China than USA.
[20:13:05] <[itchyjunk]> Is it a logical error, audio ?
[20:13:14] <kee> audio: Your for loop is throwing away everything but the last element.
[20:13:16] <[itchyjunk]> You'll probably want a ML channel if so.
[20:13:22] <[itchyjunk]> oh :x
[20:13:34] <[itchyjunk]> oh right
[20:13:35] <audio> kee, oh. i thought numpy would do some magic
[20:13:42] <audio> i guess it doesn't work like that
[20:13:45] <kee> Numpy isn't quite magic enough to do that, no.
[20:13:56] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:14:01] <kee> Numpy redefines operators, but it can't redefine variable assignment. (Nor should it.)
[20:14:12] *** Quits: austincheney (~austinche@104-54-57-132.lightspeed.rcsntx.sbcglobal.net) (Ping timeout: 252 seconds)
[20:14:12] *** Quits: martums59 (~martums@user/martums) (Ping timeout: 252 seconds)
[20:14:12] *** martums597 is now known as martums59
[20:15:25] <kee> audio: Perhaps `images, labels = zip(*data)`, then `images = np.array(images); labels = np.array(labels)` would work.
[20:15:37] <kee> Though that isn't very kind to your RAM.
[20:16:14] <audio> kee, yea this may freeze my computer haha. worth a shot though
[20:16:39] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[20:16:46] <Sqaure> nice ?
[20:16:47] <audio> why the args asterisk before data?
[20:17:07] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[20:18:06] <BASHitup> Is anyone feeling confident about permission issues on Nix? 
[20:18:11] <kee> audio: `zip([1, 2, 3], [4, 5, 6])` yields `(1, 2)`, `(3, 4)`, `(5, 6)`.
[20:18:22] <kee> BASHitup: Depends on the issue.
[20:18:35] <kee> audio: That was wrong.
[20:18:43] <kee> audio: `zip([1, 2, 3], [4, 5, 6])` yields `(1, 4)`, `(2, 5)`, `(3, 6)`.
[20:19:00] <Sqaure> BASHitup, Permission issue?
[20:19:16] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Remote host closed the connection)
[20:19:31] <BASHitup> K ... so on Ubuntu, I can't go full root. So I couldn't get to pure root to escape my problem. I still don't know what happened. 
[20:19:32] <Sqaure> im not great with nix but used it plenty
[20:19:37] <kee> audio: print(*[1, 2, 3]) means print(1, 2, 3); Python unpacks the iterable into arguments.
[20:19:52] <kee> BASHitup: Are you in a chroot?
[20:19:55] <BASHitup> At some point, I tried to move an old .weechat config to my regular sudo user - which on Ubuntu isn't full root. 
[20:20:00] <BASHitup> Ubuntu disables full root 
[20:20:15] <BASHitup> At some point in the process, I ran chown -R <user> <file> 
[20:20:33] *** Joins: Iolo (~iolo@user/Iolo)
[20:20:34] <BASHitup> I think that messed up the entire OS. I wound up having to restore using Clonezilla. 
[20:20:37] <Sqaure> okey, thats above my level. Whenever i have issues with nix i use the matrix-chat room
[20:20:50] <kee> BASHitup: Back up a sec. You have a sudo user, and "Ubuntu disables full root"?
[20:20:53] <kee> Are you talking SELinux?
[20:21:03] <kee> Or are you just saying Ubuntu doesn't let you log in as root using a password?
[20:21:04] <Sqaure> https://matrix.to/#/#nix:nixos.org
[20:21:38] <kee> Sqaure: This doesn't sound like an issue with the nix package manager, to me.
[20:21:55] <Sqaure> Maybe not. 
[20:22:32] <audio> kee, yea my computer doesn't even try to process the script haha
[20:22:43] <audio> it stops the process without an error message
[20:22:52] <Sqaure> thats the best
[20:23:30] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Ping timeout: 260 seconds)
[20:25:44] <kee> audio: In which case, just loop through as normal, but append to existing images and labels lists.
[20:25:57] <kee> Or imageses and labelses lists. I'm not quite sure which would be appropriate.
[20:26:35] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Quit: rickybob)
[20:27:08] <audio> kee, wouldn't i extend rather then append?
[20:27:22] <kee> If that's what you're trying to do, then yeah.
[20:27:41] <kee> Make sure you use a different variable name in your for loop to the variables that reference the lists you're building.
[20:28:06] <audio> yea 
[20:30:52] <BASHitup> K, so the root on Ubuntu helps explain it. I just got my ass handed out to me for pasting some text from a website ... too many lines on another channel.
[20:31:09] <BASHitup> Where should I paste text on here, concerning the Ubuntu topic of root vs sudo, which isn't full root 
[20:31:13] <kee> BASHitup: Paste it into a pasting website, and provide the link.
[20:31:15] <BASHitup> Sudo is super user does ... or super user as 
[20:31:19] <kee> Also, sudo is full root.
[20:31:22] <BASHitup> It is the regular user with root access 
[20:31:26] <kee> What do you mean by "full root"?
[20:31:27] <BASHitup> It is not the same as su 
[20:31:34] <kee> sudo sh
[20:31:39] <kee> That's the same as su (almost)
[20:31:51] <kee> But don't use that.
[20:31:59] *** Joins: node1 (~hex@user/node1)
[20:32:04] <kee> It makes it too easy to accidentally run commands as root when you shouldn't.
[20:32:13] <BASHitup> If you run su without an argument on Ubuntu and put in your user password, even if the user has the highest priviledge, access will be denied because there is no "root" account so to speak. You have to create one. 
[20:32:25] <kee> No, that's not why it happens.
[20:32:33] <BASHitup> So, there's sudo -i, sudo -s(which I prefer) ... and probably the strongest would be sudo - su 
[20:32:36] *** Quits: name100 (~user@188.124.155.190) (Ping timeout: 240 seconds)
[20:32:36] <kee> Access will be denied because you're meant to enter the root password, and no root password is set.
[20:32:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:32:58] <kee> That just means you can't log in as root; you can still run anything you like as root, including a login shell.
[20:32:59] <BASHitup> Not wanting to spam here, but for the sake of everyone easily following this ... 
[20:33:02] <BASHitup> su is an older but more fully-featured command included in all Linux distributions. It is the traditional way to switch to the root account.
[20:33:04] <BASHitup> Linux discourages working as root as it may cause unwanted system-wide changes and suggests using sudo instead. For this reason, all Ubuntu-based releases are sudo-only, meaning the root account is not active by default.
[20:33:23] <BASHitup> https://phoenixnap.com/kb/sudo-vs-su-differences
[20:33:24] <bayaz> Title: Sudo Vs Su: The Difference Between sudo and su Explained 
[20:33:28] <kee> "not active" just means it doesn't have a password set and you can't log in.
[20:33:37] <BASHitup> The morons in the Ubuntu channel wanted to argue with me on this. But it's real simple 
[20:33:47] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[20:33:59] <kee> This is unrelated to your problem, btw. Also, your explanation of it is weird.
[20:36:36] *** Joins: Visne (~Visne@dhcp-077-248-174-092.chello.nl)
[20:36:57] <user51> i'm starting to like go's switch.
[20:37:30] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Quit: WeeChat 2.8)
[20:38:16] *** HB[m] was kicked by bayaz (HB[m])
[20:38:48] <kee> user51: My condolences.
[20:39:19] <user51> kee: well, i'm coming from a c switch :P
[20:39:20] <BASHitup> I don't undestand why this is the only channel where people can have level-headed conversations 
[20:39:20] <merijn> user51: Wait until you discover case-of and pattern matching in languages with ADTs :D
[20:39:22] <BASHitup> If someone disagrees on here, they're at least bright enough to listen to the argument or perspective. 
[20:39:29] <BASHitup> On the support channel it's just someone insisting they're right, despite technical documentation etc 
[20:39:55] <kee> user51: The only benefit that Go's switch has over C's is that fallthrough is explicit, rather than implicit.
[20:40:00] <oldlaptop> A small part of it is probably discouraging people from casually throwing terms like "morons" around.
[20:40:02] <kee> For some reason, they also added if-else chains in.
[20:40:05] <oldlaptop> (Yes, that is a hint.)
[20:40:29] <user51> merijn: got a link to a good explanation?
[20:40:33] <pulse> BASHitup, please be respectful. calling an entire channel of people "morons" is not it
[20:40:36] *** Joins: Akiva (~Akiva@user/Akiva)
[20:40:44] <kee> BASHitup: The problem you described, as you described it, is impossible.
[20:40:51] <kee> You must've done something you aren't telling us.
[20:40:57] *** Joins: Fauto_ (~dante@gateway/tor-sasl/filohuhum)
[20:41:04] <merijn> user51: hmm...not of the top of my head, lemme see if I can find one
[20:41:23] <kee> chown -R user file cannot mess up your entire OS.
[20:41:39] <kee> Because -R does nothing special on a file.
[20:42:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[20:43:15] <kee> merijn: Do you mean like Rust?
[20:43:27] *** Joins: Atque (~Atque@user/atque)
[20:43:48] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[20:43:52] <GeDaMo> Like Haskell
[20:44:06] <kee> Obviously like Haskell. :-)
[20:44:08] <merijn> kee: Rust's enums are basically ADTs, yeah
[20:44:15] <kee> ‚Ä¶ Traits, surely?
[20:44:16] <merijn> (afaik)
[20:44:21] <kee> Unless you mean algebraic data type.
[20:44:26] <merijn> Traits are like typeclasses
[20:44:38] <kee> You mean ADT = algebraic data type, don't you?
[20:44:41] <merijn> yeah
[20:45:15] <kee> Rust enums are technically just sum types (structs and tuples are product types; together they can make algebraic data types).
[20:45:28] *** Joins: morte_ (~user@190.104.116.153)
[20:45:28] <merijn> bah, all Haskell examples use the syntax for function definitions, I think the case-of is much more intuitive for people coming from switch
[20:45:30] <BASHitup> Might be on to something, pulse 
[20:45:44] <BASHitup> I try. I just get tempermental because the mods over-police. 
[20:45:53] <BASHitup> But you are on the mark about having respect etc. 
[20:46:19] *** Joins: torstenvl (~torstenvl@2600:1003:b125:d78:340f:baad:fba1:4966)
[20:46:22] *** Parts: nulleip (~luiz@user/nulleip) ()
[20:46:57] *** Quits: torstenvl (~torstenvl@2600:1003:b125:d78:340f:baad:fba1:4966) (Client Quit)
[20:47:06] <merijn> user51: I mean, the simplest example I can write down really quickly is something like "data Maybe a = Nothing | Just a" this derives a generic type Maybe with 2 possible constructors "Nothing :: Maybe a" (i.e. it can be a value of type 'Maybe a' for any possible choice of 'a', so "Nothing :: Maybe Int", "Nothing :: Maybe Bool", etc. are all valid)
[20:47:48] <merijn> user51: The second constructor is "Just :: a -> Maybe a", i.e. given any argument of type 'a', produce 'Maybe a'. Such as "Just True :: Maybe Bool", "Just 5 :: Maybe Int", etc.
[20:48:15] *** Quits: Fauto_ (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[20:48:37] <merijn> user51: Pattern matching lets us write something like: case foo of { Nothing -> "got Nothing!"; Just n -> "got: " ++ show n; }
[20:48:37] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 240 seconds)
[20:49:20] *** Quits: widp (~widp@124.123.106.12) (Remote host closed the connection)
[20:49:24] <merijn> user51: I think Rust and C++ tend to call it "destructuring". So you get to match on the constructor used to create something and the fields of that constructor are *only* in scope for that specific branch
[20:50:13] *** Joins: nulleip (~luiz@user/nulleip)
[20:50:28] <user51> merijn: when is it useful?
[20:52:09] *** Joins: baracurda (~baracurda@user/parserblabla)
[20:52:12] <phogg> looks like functional programming style "match" logic to me
[20:52:19] <merijn> user51: The most trivial case is for "C-like" enums where you basically get the same power as C++11's enum types. But the ability to have fields conditionally available is super useful
[20:52:28] *** baracurda is now known as bababb
[20:52:42] <merijn> phogg: Ocaml and other ML dialects use "match" instead of "case", yeah
[20:53:16] <antranigv> Hey all. Anyone here knows about the Twitter API? for the love of god, I'm just trying to send a tweet from my command line, it's been a PITA.
[20:54:20] *** Joins: Fausto (~dante@gateway/tor-sasl/filohuhum)
[20:54:27] <kee> antranigv: The Twitter API has been made progressively harder, because they want you to use their UI and nothing else.
[20:54:48] *** Joins: Cashlin (~hp@user/cashlin)
[20:54:52] <kee> I've given up following it. But good luck!
[20:54:59] <kee> Maybe you could look at the source code for some Twitter bridges.
[20:55:45] <merijn> user51: Lots of tiny ways. A quick grep of my own code I think the simplest/clearest case is something like this: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/Query.hs#L54-L56 where I support converters with 2 different types, so I have an ADT to distinguish and wrap them in a compatible type
[20:55:46] <bayaz> Title: Belewitte/Query.hs at master ? merijn/Belewitte 
[20:55:49] <GeDaMo> https://github.com/zedeus/nitter
[20:55:50] <bayaz> Title: GitHub - zedeus/nitter: Alternative Twitter front-end 
[20:55:50] <antranigv> kee I wonder what's their thought about people just wanting to do RSS->Twitter. I swear I finished setting up Telegram, XMPP/Jabber, Mastodon, Slack and Mattermost bridges, but Twitter? nooo that's gonna be my pain
[20:55:58] <kee> GeDaMo: That's read-only; it's not useful.
[20:56:02] <phogg> merijn: I learned it first from raku where it's 'given' https://docs.raku.org/syntax/given
[20:56:02] <GeDaMo> Ah
[20:56:08] <merijn> user51: And then use case-of to use different logic for each: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/Query.hs#L207-L210
[20:56:09] <bayaz> Title: Belewitte/Query.hs at master ? merijn/Belewitte 
[20:56:10] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[20:56:29] <user51> merijn: i should have been clearer. maybe this is a better question: what type of programs benefit from case-of and pattern matching? to be more specific, do they add ease of writing, or ease of reading? if i break them down, how many components do they have?
[20:56:34] <kee> antranigv: Just don't use Twitter, if you can avoid it. Reading can be done with Nitter, and writing just shouldn't be done.
[20:57:02] <kee> If you want to make something available to people who like Twitter, use ActivityPub instead.
[20:57:05] <phogg> user51: it makes both reading and writing easier, and pretty much any kind of program can benefit
[20:57:19] <antranigv> kee for my personal blog I just skipped it, it's a pain. But my company will want for corporate blog posts.
[20:57:21] <merijn> user51: It's a thing that makes lot of tiny different things easier
[20:57:34] <kee> antranigv: You need to hire somebody to manually copy-paste into Twitter.
[20:57:36] <antranigv> kee AP is nice, I just don't like that most AP developers forgot to support RSS as well :-)))
[20:57:57] <kee> RSS isn't Social‚Ñ¢ enough for them.
[20:58:04] <antranigv> hehe
[20:58:15] <merijn> user51: Consider my Converter type. If you implemented something like that in python, you'd probably have a class with a boolean field that was true or false whether you got the first or second type of converter. But then someone forgets to code the if that checks which one it is and whoopsie
[20:58:17] <antranigv> kee Job Posting: Copy Paster
[20:58:25] <kee> Btw, if you implement ActivityPub, it's really good to make your blog's comments show up properly, both ends.
[20:58:32] <kee> Hardly anyone does that, and it's the best feature.
[20:58:38] <phogg> user51: it allows you to express some things simply which are much more complicated if done in the form of e.g. if/else if/else chains, it covers more scenarios than you get with a dispatch table type of arrangement, and your compiler can report correctness issues
[20:58:46] <merijn> user51: The power comes from the fact that the only way to "get" the conversion function out is by checking which of two options it is
[20:58:58] <merijn> You can't accidentally assume the wrong one
[20:59:04] * phogg is a big fan of this style
[20:59:40] <merijn> user51: Consider my earlier "data Maybe a = Nothing | Just a" it's kinda like a nullable value, but to get anything you are *forced* to check which of two options you have
[20:59:41] <kee> user51: https://docs.rs/winit/0.26.1/winit/event/index.html
[20:59:41] <bayaz> Title: winit::event - Rust 
[20:59:46] <merijn> And thus handle the possible error
[21:00:08] <antranigv> kee haha! I've been working on that for a while. Basically I'm trying to convert isso (a commenting software) to be AP-aware.
[21:00:13] <kee> user51: Compare that to the match-based approach: https://docs.rs/winit/0.26.1/winit/index.html
[21:00:14] <bayaz> Title: winit - Rust 
[21:00:58] <kee> antranigv: You know there's #isso on Libera?
[21:01:01] <phogg> kee: nice examples, thanks
[21:01:13] <antranigv> kee asking or stating? I'm not there, lemme check
[21:02:05] *** Joins: Wh0 (~V@43.242.116.64)
[21:03:20] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[21:03:43] <user51> merijn: i think i just don't have enough experience to see it.
[21:04:17] <sonny> what is this image? <https://ibb.co/ctvq7SD>
[21:05:08] <epony> kee, since you're a fan of SE  https://stackoverflow.com/questions/8126311/what-every-programmer-should-know-about-memory
[21:05:09] <bayaz> Title: What Every Programmer Should Know About Memory? 
[21:06:54] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[21:06:56] <epony> slides and paper details, 2006  https://www.akkadia.org/drepper/cpucache-slides.pdf ; https://www.akkadia.org/drepper/cpumemory.pdf
[21:06:58] <bayaz> Type: application/pdf Size: 927.9 kB 
[21:06:58] <bayaz> Type: application/pdf Size: 934.1 kB 
[21:07:22] <kee> epony: Yeah, I know most of that, including that software prefetching isn't very good.
[21:07:36] <kee> You can't manually manage the cache like you can manually manage memory.
[21:07:53] <kee> And you can't end up manually managing cache without slowing everything down, unless you redesign from the ground up.
[21:08:07] *** Quits: fe23 (~fe23@2409:8a34:466:6010:a963:e1e:5c0e:2b7a) (Ping timeout: 256 seconds)
[21:08:12] <kee> And I'm not confident you'd end up with something better, but I don't know you won't therefore I will continue to be a zealot. :-p
[21:08:21] *** Joins: fe23 (~fe23@2409:8a34:466:6010:d056:f79a:d2b2:fdd2)
[21:08:53] <merijn> user51: Yeah, the answer "where is it useful" is basically "everywhere", I have over 200 uses of it in medium size codebases. Far more than you'd use, say, switch in any C++ codebase :p
[21:09:36] <merijn> user51: Part of the usefulness is how lightweight defining new datatypes for tiny problems is in most functional languages. Like, you can define new "one-of" datatypes in 1-2 lines most of the times
[21:09:56] <user51> maybe one day i'll see it with enough experience.
[21:10:10] <epony> kee, you missed the prefetch instructions in the SIMD extensions in the x86 opcodes article
[21:10:44] <epony> also you control which memory is read and what instructions are loaded, so that ends up cached
[21:11:17] <epony> you know what is in the cache since you put it there, and can expect it will be in cache if it fits after you've started loading it clean
[21:11:20] <merijn> user51: Simple example, this type is basically just a boolean: https://github.com/merijn/Belewitte/blob/master/benchmark-analysis/src/Query.hs#L46
[21:11:21] <bayaz> Title: Belewitte/Query.hs at master ? merijn/Belewitte 
[21:11:40] <merijn> user51: But 3 years from now what's gonna be easier "runQuery True" or "runQuery Explain" :)
[21:12:05] <epony> therefore you can get extremely good cache saturation and important points clears of caches for predictable cache details
[21:12:18] <epony> you can also toggle on and off the cache at runtime
[21:12:28] *** Joins: widp (~widp@124.123.106.12)
[21:12:32] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpwqael9u79tikm.ipv6.telus.net)
[21:12:55] <epony> there are prefetch and clear / invalidate cache instructions for L1, L2 and even L3
[21:14:01] <epony> it gives you no advantage to deny these exist and to refuse to use them, hiding behind application indirection and runlevels, it's all in CPU programming reach
[21:14:39] <merijn> user51: See also the notion of "boolean blindness"
[21:14:58] <epony> the point of "caches" are not controlled is invalidated ;-) (pun intended)
[21:15:33] <epony> expect more instructions when the caches increase and the layers add up
[21:18:18] <epony> page 47 in the article quoted is "what programmers can do" and lists these techniques
[21:19:25] <epony> section 6, subsections: bypassing the cache, optimising L1 data and instructions cache access, L2 and higher cache access and the tlb usage (optimisation)
[21:19:35] *** Joins: Enitin (~Enitin@82.180.145.230)
[21:19:58] <epony> section 6.3 is about prefetching, hardware, software, special kinds and speculation, helper threads and direct cache access
[21:21:15] <epony> sections 6.4 cover multi-threaded optimisations and 6.5 NUMA programming (CPU memory / cache locality)
[21:21:18] *** Quits: Wh0 (~V@43.242.116.64) (Quit: Leaving)
[21:21:57] <kee> epony: Yeah, but the CPU can evict stuff from the cache if you try to cram too much into cache.
[21:22:05] <kee> The cache is, logically, treated like cache.
[21:22:36] <kee> If you need any sort of arbitrary code execution, then that's strictly superior to the approach I'm espousing.
[21:23:16] <kee> But if you are, say, hyper-optimising a video game, you might want more control over the cache than the cache gives you.
[21:23:23] <epony> at any rate, you have tools and instructions and methodologies and those are used in high performance programming
[21:23:36] <kee> And if you try to give yourself that control (e.g. putting stuff into L1 without putting it in L2), then everything goes horribly horribly wrong.
[21:24:03] <epony> the most important domain of application of these is SMP/SMT threading and databases and file systems and kernel facilities
[21:25:03] *** Quits: shkurata (~shkurata@ptr-8riebugy003l5s1zlrj.18120a2.ip6.access.telenet.be) (Quit: Leaving...)
[21:26:04] <epony> also, even non cache optimised processing benefits from caches, and the above outlined techniques are used not only in games but in all HPC and virtualisation approaches
[21:26:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:27:58] <kee> epony: If you want to read through a large section of RAM exactly once, doing something to windows of size 8 or something, and then go back to whatever you were doing before without needing to re-populate your L2 cache, you can't really do that.
[21:28:16] <epony> yes you can
[21:28:18] <kee> Oh?
[21:28:21] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:30:54] <kee> I wasn't aware that was a thing. Maybe it was just the CPU used on the Xbox that couldn't do it.
[21:30:55] <GeDaMo> https://www.felixcloutier.com/x86/movnti "Using this protocol, the processor does not write the data into the  cache hierarchy, nor does it fetch the corresponding cache line from  memory into the cache hierarchy."
[21:30:55] <bayaz> Title: MOVNTI ? Store Doubleword Using Non-Temporal Hint 
[21:31:13] *** Quits: fe23 (~fe23@2409:8a34:466:6010:d056:f79a:d2b2:fdd2) (Quit: fe23)
[21:31:24] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[21:31:44] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:31:59] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[21:32:02] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:32:09] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:32:11] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[21:32:24] <kee> GeDaMo: That's memory writing. I'm talking about pre-fetched sequential access that doesn't blitz the L2 cache.
[21:32:42] <sonny> Why are trees the popular data structure to implement namespaces instead of something like hashtables?
[21:33:09] *** Quits: eddof13 (~eddof13@2806:102e:12:64:f838:6484:5e24:bd9f) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[21:33:42] <kee> sonny: I'd need more context for that one.
[21:33:54] <kee> Everything I can think of uses hash tables.
[21:34:31] <sonny> dns, filesystems, etc ...
[21:34:44] *** Joins: vitali64 (~vitali64@user/vitali64)
[21:34:56] <kee> Oh. It's because there's no benefit to using hashtables, and trees make more sense.
[21:35:06] <GeDaMo> Well, there's www.felixcloutier.com/x86/PREFETCHh.html "prefetch data into non-temporal cache structure and into a location close to the processor, minimizing cache pollution."
[21:35:34] <kee> DNS, you don't want everything stored on one server. So . tells you where com. is, and com. tells you where example.com. is, and example.com. tells you where www.example.com. is.
[21:35:50] <kee> Filesystems, you don't want to search through your entire drive to find a file if you're already in the folder.
[21:36:31] <sonny> just cache the results, it's done anyways
[21:36:32] <apotheon> sonny: Namespaces are hierarchical.  How does a hash table make sense for namespaces instead of something hierarchical like trees?
[21:36:42] <kee> sonny: DNS does cache the results.
[21:37:03] *** Quits: node1 (~hex@user/node1) (Remote host closed the connection)
[21:37:04] <kee> But you'd hope you were in charge of your own DNS records.
[21:37:08] <apotheon> Maybe I missed something about previous discussion that would explain that.
[21:37:16] <sonny> apotheon: I thought a namespace was for separation, I'm not sure were the heirachy fits in
[21:37:18] <kee> It would be problematic if everyone had to talk to ICANN when they wanted to update their A records.
[21:37:28] <kee> apotheon: hierarchical namespaces. :-)
[21:37:46] *** nf is now known as ju
[21:37:59] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Quit: Client closed)
[21:38:11] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:38:12] *** Joins: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[21:38:14] <kee> GeDaMo: That seems like the opposite of what I want.
[21:38:15] <epony> kee, that's buffer cache, which is in software caching (of file system blocks in virtual memory), which has the word cache in it, but is not CPU cache related, just in memory caching
[21:38:16] *** ju is now known as Guest3578
[21:38:24] *** Guest3578 is now known as nf
[21:38:30] <apotheon> What kinda namespaces are we talking about that wouldn't be hierarchical?  I don't know why a programming language's namespaces wouldn't be hierarchical, given the needs of programmers.
[21:38:40] <kee> epony: No, it's not. The technique I'm describing is incompatible with how (I understand) CPU caches work.
[21:39:08] <apotheon> kee: excellent use of parentheses
[21:39:17] <kee> They tried it on one of the Xbox CPUs and the mere existence of the instruction infamously corrupted everything.
[21:39:24] <sonny> apotheon: If the hierarchy is part of the design then it makes sense
[21:39:57] *** Joins: Akuli (~Akuli@213.216.208.39)
[21:40:11] <sonny> apotheon the hierarchy still has a problem when you want to share packages
[21:40:31] <sonny> but yeah, in a language it makes sense
[21:40:43] <kee> GeDaMo: Data can't be in L2 cache without being in L3 cache, etc.. That instruction lets you put stuff in L2 and L3 withouth putting it in L1, etc., but I want to put stuff in L1 without putting it in L2.
[21:40:46] *** Quits: jnnnnnnnnn (~jnnnnnnnn@65.99.151.178) (Remote host closed the connection)
[21:40:56] <kee> But that breaks the invariants, and then the cache stops being coherent.
[21:41:05] <kee> Also, it's incompatible with speculative caching.
[21:41:36] <GeDaMo> kee: PREFETCHNTA might, I'#d have to look up the details in the manual
[21:42:04] *** Joins: jnnnnnnnnn (~jnnnnnnnn@c-2172524e.016-77-73746f43.bbcust.telenor.se)
[21:42:34] <epony> kee, read page 49 of that article
[21:43:19] <epony> it explains about SSE4.1 streaming load buffers used as cache
[21:43:35] <epony> that use case is about loading large amounts of memory not polluting your caches
[21:43:48] <GeDaMo> PREFETCHNTA fills L1 cache but not L2 although it may or may not fill L3
[21:44:53] <epony> note, Uli (Ulrich Drepper) is the 90ies decade libc maintainer at Redhat
[21:45:52] *** Quits: vin1 (~vin@user/crash) (Quit: WeeChat 2.8)
[21:46:02] <epony> mendioned here https://en.wikipedia.org/wiki/Glibc#History
[21:46:02] <bayaz> Title: glibc - Wikipedia 
[21:46:44] <epony> you "can" read the article with some general confidence you could try and use these suggestions
[21:47:33] *** Joins: Zeturic (~Orimendix@50.26.218.162)
[21:47:37] <kee> epony: I don't understand how page 49 is remotely relevant. If it is relevant, then this is an incredibly powerful article and I will read it multiple times from cover to cover and learn its secrets.
[21:47:56] <kee> To confirm, you meant https://www.akkadia.org/drepper/cpumemory.pdf, right?
[21:48:08] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[21:48:20] <epony> yes, and go on to check it out  Mar22 1857<kee> epony: If you want to read through a large section of RAM exactly once, doing something to windows of size 8 or something, and then go back to whatever you were doing before without needing to re-populate your L2 cache, you can't really do that.
[21:49:13] <epony> it's in section 6.1 bypassing the cache
[21:49:16] <ProfSimm> Should lists be 0 indexed or 1 indexed
[21:49:34] *** Joins: palasso (~palasso@user/palasso)
[21:49:36] <kee> epony: Oh, that's page 47 for me. :-)
[21:49:38] <epony> ProfSimm, the trick question is about endianness
[21:49:53] <epony> kee, yeah, the nugget pasted is 2 pages down
[21:50:14] <kee> This is definitely relevant, and I am sorry for questioning your wisdom.
[21:50:31] <kee> This is enough knowledge for me to write a performant x86 compiler!
[21:50:38] <ProfSimm> OK, what's the index of your first line of code? 1 or 0?
[21:51:08] <epony> ProfSimm, Knuth wants -0 too
[21:51:14] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[21:51:35] <epony> then even if you started from +0 you'd be really at 1
[21:51:52] <epony> but there is no two zeroes ;-)
[21:51:57] <kee> epony: Oh, it's generic wrt CPU architecture! You are really not discouraging me from announcing wrong hot-takes in this channel. Thanks.
[21:52:24] <ProfSimm> epony: well floats have it
[21:52:42] <ProfSimm> Honestly though why are our code lines 1-based
[21:52:53] <ProfSimm> Aren't line numbers... purely programming concept
[21:53:02] <kee> Line 0 is the filename,
[21:53:03] <epony> which of your 10 digits is sub-Zero?
[21:53:08] <ProfSimm> kee: lolwut
[21:53:13] <kee> The negative line numbers are emacs-specific.
[21:53:40] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[21:53:48] <epony> kee, by all means we must have a laugh at regular intervals ;-)
[21:54:55] *** Joins: Epithium (~Epithium@2603-6080-3203-8d68-b162-a173-f12a-3a04.res6.spectrum.com)
[21:56:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:56:14] <beaky> nice i like emacs my favorite program lately
[21:57:27] <kee> Now I want to know about category theory, so I'm going to start claiming that the Curry-Howard-Lambek correspondence is a type of fish, and wait for somebody to provide a detailed and seminal PDF on the subject to refute my claims. You have only encouraged me, epony.
[21:57:36] *** Quits: Duchess (~Duchess@2604:3d08:1:1b:c189:b6ab:68c1:858f) (Quit: Client closed)
[21:58:17] <kee> beaky: Emacs gets very buggy if you write buggy macros. Clearly, emacs is at fault for this.
[22:00:14] <GeDaMo> https://github.com/hmemcpy/milewski-ctfp-pdf/releases/download/v1.3.0/category-theory-for-programmers.pdf
[22:00:15] <bayaz> Domain: objects.githubusercontent.com Type: application/octet-stream Size: 16.5 MB 
[22:02:38] <apotheon> Emacs is only at fault for all the things for which emacs is at fault.
[22:02:44] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:02:45] *** Quits: trevors (~trevors@user/trevors) (Quit: trevors)
[22:04:15] <kee> Do you like my new one-liner?
[22:04:23] <kee> (lambda f: f(f))(lambda f: lambda *a: f(f)(*a[1:]))(*range(1000000))
[22:05:38] *** Joins: Wh0 (~V@43.242.116.64)
[22:05:58] <kee> I've been trying to get rid of that second f(f), because it's efficient, but I can't work out how.
[22:06:31] *** Joins: ttree (~ttree0@c-24-17-16-242.hsd1.wa.comcast.net)
[22:06:38] <pulse> there's this thing called vim, i hear it's better than emacs
[22:08:10] <novns> vim is good when you need to type strings like "^h^h^h^h^h^h" a lot
[22:08:17] *** Quits: Elzington (~Elzington@87.249.134.24) (Ping timeout: 240 seconds)
[22:08:23] <kee> Vim is a text editor. Emacs is an OS.
[22:08:48] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[22:09:02] <novns> emacs is good when you have 10 fingers on each hand
[22:09:16] <kee> I've known people play Minecraft inside Emacs. (That must give Richard Stallman an aneurysm.)
[22:09:27] *** Joins: Elzington (~Elzington@68.235.43.14)
[22:09:36] <novns> real programmers use notepad.exe
[22:10:06] <kee> Somewhere here, I've got a program that injects data into notepad.exe's memory in order to use it as a logger.
[22:11:03] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[22:12:53] *** Joins: flaqoniun (~F@32.211.211.39)
[22:13:14] <BASHitup> HOw many of you have seen the following warning: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager.
[22:13:27] <BASHitup> ... And that happens after the command has already made the sys call. So no turning back. 
[22:13:35] <BASHitup> This is on Ubuntu as always 
[22:13:46] <epony> it's about Python's packages getting mixed with your OS base installation of Python
[22:13:53] <novns> BASHitup, why would you run it as root?
[22:13:59] <flaqoniun> YOLO!
[22:14:02] <kee> You should use the --user flag, and in a venv.
[22:14:06] <epony> RH-derivatives have py in base too
[22:14:10] *** Quits: scjosh (~scjosh@206.189.79.69) (Quit: The Lounge - https://thelounge.chat)
[22:14:36] <BASHitup> Because the default command for an apt update is sudo apt update 
[22:14:39] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:14:49] <BASHitup> I get in the habit of running that, so whenever I update, I go sudo. 
[22:14:51] <kee> BASHitup: Which has nothing to do with pip.
[22:14:59] <BASHitup> You tell me all the scary stuff, kee and novns 
[22:15:05] <novns> apt update has no business with pip
[22:15:08] <BASHitup> Break it down: why is shit gonna hit the fan over that? 
[22:15:18] <novns> pip is for you, user
[22:15:19] <BASHitup> Ok, I know it's a Python manager 
[22:15:23] <BASHitup> I'm fully aware of this 
[22:15:25] <kee> Because your package manager has installed a certain version of some packages.
[22:15:27] <BASHitup> But that's not answering the question 
[22:15:28] <kee> Pip updates them.
[22:15:32] <epony> BASHitup, I told you the really scary detail first.
[22:15:37] *** Joins: moniker-- (~mon@dh207-123-65.xnet.hr)
[22:15:42] <kee> Now the package manager thinks you have one version installed and pip thinks you have another.
[22:15:45] <BASHitup> Is this going to break my system 
[22:15:47] <BASHitup> OH! 
[22:15:49] <kee> Possibly.
[22:15:49] <BASHitup> I see 
[22:15:58] <kee> I'd uninstall every package with pip, then reinstall every package with apt.
[22:15:59] <BASHitup> So we're talking about a program issue which is isolated ... 
[22:16:07] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[22:16:08] <BASHitup> Yet, that's not going to impact the overall OS configs 
[22:16:16] <BASHitup> It will just break the program?
[22:16:17] <kee> BASHitup: Isolated to potentially every Python program that depends on those Python packages, yes.
[22:16:19] <BASHitup> Yet it has not 
[22:16:19] <novns> BASHitup, just use venv for your pip things
[22:16:27] <epony> have a second root console and pray it does not die if you mess things up
[22:16:53] <BASHitup> And I don't know how ... Because I'm just a few rungs above script kiddie. The name says it all: simple bash scripts without using object oreinted methods. 
[22:16:53] <kee> A lot of stuff is written in Python.
[22:17:06] <kee> Please never write a bash script using object oriented methods.
[22:17:29] *** Quits: moniker- (~mon@dh207-123-65.xnet.hr) (Ping timeout: 256 seconds)
[22:17:48] <BASHitup> https://uoa-eresearch.github.io/eresearch-cookbook/recipe/2014/11/26/python-virtual-env/
[22:17:49] <bayaz> Title: Python Virtual Environments 
[22:17:58] <novns> kee, https://github.com/niieani/bash-oo-framework
[22:17:59] <BASHitup> So I do that. And that documentation doesn't tell me how to enter the venv 
[22:17:59] <bayaz> Title: GitHub - niieani/bash-oo-framework: Bash Infinity is a modern standard library / framework / boilerplate for Bash 
[22:18:05] <BASHitup> But I can find it or you all can just tell me 
[22:18:13] *** Joins: scjosh (~scjosh@206.189.79.69)
[22:18:16] <novns> kee, you can use OOP with bash, if you are mad enough
[22:18:44] <kee> novns: You can do OOP in Brainfuck.
[22:18:52] <BASHitup> I don't even know how to use object oriented methods, LOL. So I think we're good there, kee 
[22:19:00] <kee> BASHitup: source path/to/venv/bin/activate
[22:19:11] <BASHitup> I am learning how to use brackets and end segments of code with stuff like "fi" or "done" 
[22:19:15] <BASHitup> Not impressive! 
[22:19:21] *** Joins: xbkkd (~F0@user/xbkkd)
[22:19:28] <BASHitup> My bash scripts are literally just a series of commands, some of which have something like wait ... 
[22:19:31] <kee> Bash has many pitfalls.
[22:19:47] <kee> Always write "$
[22:19:53] <BASHitup> Maybe it does, but if you don't know bash on linux, you will suffer at your own peril 
[22:19:57] <kee> Always write "$@", never $@ without quotes.
[22:19:57] *** Quits: Wh0 (~V@43.242.116.64) (Quit: Leaving)
[22:20:09] <novns> BASHitup, the proper way is to use POSIX shell, and not that weird and ugly thing called "bash"
[22:20:21] <BASHitup> OK, so POSIX in my mind is just MacOS 
[22:20:25] <kee> Put -- before "$@" if you can.
[22:20:31] <kee> BASHitup: You're thinking of BSD.
[22:20:34] <BASHitup> Linux is not a POSIX ... it's a UNIX-like or a clone more accurately 
[22:20:52] <kee> Linux is a kernel.
[22:21:01] <novns> POSIX is a standard, and Linux is a kernel
[22:21:23] <kee> POSIX is an overrated standard IMO.
[22:21:27] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:21:32] <kee> But you don't need a POSIX-compliant OS to have POSIX shell.
[22:21:32] <BASHitup> Before we go into the POSIX, can I not worry about the pip business if or when the program executes OK. Or is there a chance my system may break this week over that? 
[22:21:32] <novns> kee, it's just portable
[22:21:44] *** Joins: jotoho (~jotoho@user/jotoho)
[22:21:49] <kee> BASHitup: Your system may break this week, yeah.
[22:21:56] <kee> It might already be broken. It might never break.
[22:21:59] <BASHitup> Shit 
[22:22:06] <kee> Depends which packages you messed with.
[22:22:12] <BASHitup> Over that one pip issue or are you all messing with me? 
[22:22:21] <kee> But iirc, pip installs things into a separate directory, so it should be recoverable
[22:22:43] <BASHitup> sudo pip3 install youtube-dl
[22:22:46] <BASHitup> That's what I ran 
[22:22:47] <kee> No don't do that.
[22:22:58] <oldlaptop> kee: For a product of a standards committee, I'd call POSIX downright miraculous.
[22:23:05] <novns> BASHitup, we don't know what you did to your system before
[22:23:14] <oldlaptop> It actually fails to be unambiguously, clearly worthless.
[22:23:16] <novns> BASHitup, it's not clear what's wrong
[22:23:22] <kee> oldlaptop: It's a miracle of birth, but it's not actually good.
[22:23:23] *** Joins: zaher (~zaher@37.48.178.94)
[22:23:45] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[22:24:00] <novns> kee, what would make it better?
[22:24:03] <BASHitup> K, so how dangerous is that command I ran? 
[22:24:21] *** Joins: moniker- (~mon@dh207-123-65.xnet.hr)
[22:24:41] <BASHitup> I'm trying to anticipate what could happen and is there a way to fix it? 
[22:24:44] <kee> novns: For starters, if it was accurate to current practices.
[22:24:48] <BASHitup> ... Before shit hits the fan 
[22:25:00] <kee> Pretty much nothing expects a POSIX environment these days, and it hasn't for‚Ä¶ well, as long as I've been programming.
[22:25:06] <oldlaptop> Whoever maintains the PyPi package named 'youtube-dl', and whoever maintains each of its direct transitive dependencies, got to run code on your machine as root; that's potentially dangerous by itself.
[22:25:10] <novns> kee, portability has nothing with "current practices"
[22:25:21] <kee> novns: POSIX-compliant code isn't portable.
[22:25:25] <oldlaptop> Particularly when they're going to tend to expect their packages installed in a "virtualenv", and test them in a "virtualenv".
[22:25:27] <kee> POSIX shell is.
[22:25:46] <kee> But POSIX expectations about the filesystem, for instance‚Ä¶
[22:25:55] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[22:25:56] <oldlaptop> POSIX doesn't have very many of those.
[22:26:16] <novns> kee, my C programs compile and run everywhere, except some windows issues
[22:26:24] <novns> thanks to POSIX
[22:26:50] <novns> I just ignore any non-standard extensions as possible
[22:27:07] *** Quits: moniker-- (~mon@dh207-123-65.xnet.hr) (Ping timeout: 256 seconds)
[22:27:20] <kee> You can't make an OS without non-standard extensions.
[22:27:33] <novns> I don't need to make an OS
[22:27:38] <kee> If you stick strictly to POSIX, your C programs won't run on it.
[22:27:56] <novns> I see you don't know what you are talking about
[22:27:59] <novns> I'm off
[22:28:01] <kee> Windows used to be POSIX-compliant.
[22:28:16] <jan6> when was that ever the case?
[22:28:20] <kee> Windows 10 isn't, of course, but a few earlier versions (don't quite remember which) were.
[22:28:23] <novns> there was additional POSIX subsystem for NT
[22:28:27] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[22:28:34] <novns> but you had to buy it
[22:28:39] *** Joins: flaqoniun (~F@32.211.211.39)
[22:29:02] <novns> and there were emulators like cygwin or mys
[22:29:04] <novns> *msys
[22:29:04] <kee> You had to buy it early on. Iirc I installed it without buying it separately on one of the last OSs it was supported on.
[22:29:05] <BASHitup> K .. so you all are scaring me, right? I just restored an image using Clonezilla and you're telling me I may have wrecked my sys 
[22:29:19] *** Quits: moniker- (~mon@dh207-123-65.xnet.hr) (Remote host closed the connection)
[22:29:37] <kee> BASHitup: Not wrecked. Broken.
[22:29:53] <kee> You can fix it, it's just perhaps not working right at the moment.
[22:30:01] *** Joins: inky (~inky@46.36.114.138)
[22:30:07] <kee> Unlike Windows, generally most stuff you do on Linux is recoverable.
[22:30:07] <BASHitup> K, so why not tell me  how to fix it, boss? 
[22:30:13] <kee> We don't have enough information.
[22:30:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:30:36] *** Quits: inky_ (~inky@5.77.176.214) (Ping timeout: 240 seconds)
[22:30:41] <oldlaptop> "Windows" itself as a whole has never been POSIX conformant; microsoft did once make available a POSIX-ish environment it called "Services For Unix" or something to that effect; how conformant it was I don't know offhand, but I don't believe they ever got it UNIX(TM) certified.
[22:30:44] <BASHitup> K, what info do you need
[22:30:55] <BASHitup> I don't want to have to reinstall dudes
[22:30:56] <kee> oldlaptop: UNIX is a different (and more useful imo) standard to POSIX.
[22:31:15] <kee> BASHitup: If you have a backup, why not sudo pip uninstall everything in sight, then use apt to fix it.
[22:31:15] <oldlaptop> The UNIX(TM) conformance suite is, essentially, POSIX.
[22:31:24] <kee> No, UNIX has more requirements.
[22:31:27] <BASHitup> K, I'll do that 
[22:31:46] <kee> BASHitup: apt --reinstall or something, but only do that to the Python packages.
[22:31:49] <oldlaptop> Which ones are so important that UNIX(TM) is useful, and POSIX is not?
[22:31:57] *** Joins: Tazmainian (~Tazmainia@2001:1c02:170b:3d00::1009)
[22:32:02] <kee> /usr/bin/env comes to mind.
[22:32:15] <novns> oldlaptop, before "Windows Services for UNIX" there was "Microsoft POSIX subsystem"
[22:32:26] *** Quits: Tazy (~Tazmainia@2001:1c02:170b:3d00::1009) (Ping timeout: 245 seconds)
[22:32:30] *** Parts: norayr (376bc34bfc@37.252.78.253) (Error from remote client)
[22:32:32] <oldlaptop> Does anything in the UNIX suite specify #! at all?
[22:32:37] <novns> oldlaptop, and it was filly POSIX-compliant
[22:32:40] <oldlaptop> (That *is* something that POSIX notably does *not* do.)
[22:32:48] <novns> *fully
[22:32:52] <kee> Pretty sure the shebang is specified by something; if it's not POSIX then it's UNIX.
[22:33:27] <oldlaptop> POSIX carefully ensures that it's permitted as an extension.
[22:33:38] *** Quits: jotoho (~jotoho@user/jotoho) (Quit: Closing client)
[22:33:39] <novns> oldlaptop, so they could use NT on US federal government computers
[22:33:55] <kee> I'm not saying POSIX is problematic; just that it's not terribly useful.
[22:34:00] <novns> POSIX was required there
[22:34:30] <kee> POSIX hardly says anything about the environment you're running on.
[22:34:43] <novns> kee, it's very useful, for portability of your code
[22:34:51] <kee> Most software written for a "POSIX-compliant system" wouldn't run on Microsoft's POSIX implementation.
[22:34:55] <kee> Even though it was to-spec.
[22:34:56] *** Joins: trevors (~trevors@user/trevors)
[22:34:59] <novns> so you don't have to bother about syscalls missing here and there
[22:35:01] <kee> Btw, it would work on Xenix.
[22:35:21] <novns> or about missing libc functions
[22:35:51] <kee> novns: That just means your code will compile.
[22:35:56] <novns> and run
[22:36:02] <kee> And do something, yes.
[22:36:43] <novns> you have more power when you stick to one OS like Linux/glibc
[22:36:46] <kee> But if it expects a single thing in the environment that isn't specified in POSIX (which it will), and it doesn't find it‚Ä¶
[22:36:53] <novns> but you cannot run away then
[22:37:09] *** Quits: widp (~widp@124.123.106.12) (Remote host closed the connection)
[22:37:16] <novns> because non-standard things are not standard
[22:37:21] <kee> POSIX is not useless. It's just not terribly useful.
[22:37:30] <novns> it's ok
[22:37:37] <kee> It's adequate.
[22:37:40] <flaqoniun> if the program relies on undefined behavior, what do you expect to happen when porting it?
[22:37:41] <novns> it makes its job
[22:37:50] <kee> It serves a purpose.
[22:38:00] <novns> flaqoniun, expect the undefined behavior
[22:38:09] <oldlaptop> kee: Some quick searching does suggest that UNIX(TM)s exist or have existed without /usr/bin/env. (That is, it's at a different path.)
[22:38:31] <BASHitup> It told me to run this: sudo apt install python3-virtualenv
[22:38:31] <oldlaptop> Presumably they have /bin/sh, but that is what your script will run in without any #!.
[22:38:38] <BASHitup> Should be fine since that's using the apt package manager. 
[22:38:41] <BASHitup> That's not a pip install 
[22:38:48] <oldlaptop> BASHitup: Correct.
[22:38:49] <BASHitup> It's related to pip but it's not using the pip package manager 
[22:38:56] <kee> oldlaptop: At /bin/env ?
[22:39:00] *** Joins: norayr (376bc34bfc@37.252.78.253)
[22:39:17] <oldlaptop> You would then use the virtualenv module to set up what the python world calls a "virtual environment" in which to work.
[22:39:22] <oldlaptop> kee: Yes
[22:39:25] <BASHitup> Yeah, I don't know ... The update hasn't finished. I can tell you all though. I uninstalled it with pip uinstall youtube-dl
[22:39:32] <novns> flaqoniun, nobody expects the Spanish Inquisition
[22:39:44] <BASHitup> Then, if I'm really worried, I think I can do sudo apt auto-remove youtube-dl 
[22:39:52] <kee> BASHitup: No, that won't do anything.
[22:39:56] <BASHitup> But it's too late for that as I'm now setting up pip and doing it again 
[22:40:08] <BASHitup> sudo apt --purge youtube-dl
[22:40:10] <kee> Removing youtube-dl with apt won't affect your venv.
[22:40:13] <BASHitup> K 
[22:40:18] <BASHitup> Yes, you guys are smart here 
[22:40:21] <BASHitup> I don't know 
[22:40:25] <oldlaptop> And if you pipped it, APT won't know about it.
[22:40:35] <BASHitup> I know how to make stuff work but I dont know what it's doing in the background, alas
[22:40:38] <kee> You should re-install all currently-installed python* packages, imo, just to be on the safe side.
[22:40:50] <kee> BASHitup: apt uses dpkg underneath.
[22:40:51] <BASHitup> Seriously, dude? 
[22:40:52] <novns> BASHitup, youtube-dl is obsolete, it was replaced with yt-dlp
[22:41:00] <BASHitup> Is there just a few commands for that? 
[22:41:03] <kee> novns: youtube-dl is un-obsolete.
[22:41:24] <BASHitup> K, and if I were going to do the reinstall on python, since pip is a python manager, I should have done that prior to this pip business 
[22:41:26] <kee> But it isn't as current as yt-dlp, to be sure.
[22:41:30] <BASHitup> if I do that, I'll have to start all over again 
[22:41:33] <kee> BASHitup: No, that's fine.
[22:41:40] <kee> You won't have to start all over again.
[22:41:43] <kee> It's not Windows!
[22:41:55] <kee> We don't need to worry about installing and re-installing mucking up registry state.
[22:41:59] <oldlaptop> Whether it's faster and easier to start over again is a different question.
[22:42:01] <flaqoniun> i think POSIX went a step too far defining the 'block size' as 512 bytes for files. why couldn't it be an even 1024
[22:42:23] <kee> flaqoniun: Floppy disks.
[22:42:41] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Quit: The Game)
[22:42:43] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[22:42:43] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[22:42:43] *** Joins: tane (~tane@user/tane)
[22:42:53] <flaqoniun> 512 byte loppies?
[22:43:00] <kee> 512-byte floppy sectors.
[22:43:03] <kee> Iirc.
[22:43:21] <kee> It was just a convention; no reason you couldn't have 1024-byte sectors.
[22:43:22] <BASHitup> This looks like a terrible idea: cd ~
[22:43:24] <BASHitup> mkdir initramfs
[22:43:26] <BASHitup> cd initramfs
[22:43:28] <BASHitup> cp -r /boot .
[22:43:30] <kee> Yes it is.
[22:43:30] <BASHitup> cd boot
[22:43:32] <BASHitup> sudo update-initramfs -ut -b .
[22:43:33] <kee> Why would you do that?
[22:43:34] <BASHitup> sudo cp -r * /boot
[22:43:36] <BASHitup> sudo apt-get autoremove
[22:43:42] <BASHitup> Well, the forum people are doing this sort of thing 
[22:43:49] <kee> Because they know what they're doing.
[22:43:51] <oldlaptop> Please don't copy/paste that much text into the channel at once.
[22:43:53] <BASHitup> The YouTube forums. They don't know what the commands do 
[22:43:59] <oldlaptop> kee: (Or, worse, because they don't.)
[22:44:02] <BASHitup> But I know initramfs affects the boot 
[22:44:04] <kee> BASHitup: ‚Ä¶‚Ä¶‚Ä¶ Stay away from whatever that is.
[22:44:06] <BASHitup> ... And the kernel 
[22:44:16] <BASHitup> And I know that running kernel commands in general is a bad idea 
[22:44:24] <kee> Yeah, it's what's loaded into memory at the very beginning, and the package manager should be responsible for it.
[22:44:47] <kee> So that installing and uninstalling various kernel versions doesn't, I don't know, break your entire setup.
[22:44:54] <novns> BASHitup, hire a freelancer on upwork or somewhere, they will install things for you properly
[22:45:23] <BASHitup> The whole thing with Ubuntu is a mess anything. Giving Nix to entry-level non-power users without power-user tools to fix stuff if or when the sys gets corrupt, isn't the brightest 
[22:45:36] *** Joins: vicfred (~vicfred@user/vicfred)
[22:45:53] <BASHitup> There's no straight up root account so you can't fix certain things easily. If the permission bits are offset, it's a blackhole 
[22:46:18] *** Quits: Chanakan5591 (~Chanakan5@user/chanakan5591) (Ping timeout: 260 seconds)
[22:46:36] <BASHitup> I'm going with this: sudo apt -f install
[22:46:46] <BASHitup> That doesn't affect the kernel boot setup 
[22:47:14] <kee> There is a root account that you can log into.
[22:47:21] <kee> You just can't log into it.
[22:47:38] <kee> If you really want to enable root password (bad idea), you can.
[22:47:40] <BASHitup> OK, so I have spent alot of time going over this today 
[22:47:52] <BASHitup> There is sudo which is user acting as super user 
[22:47:56] <kee> No, it isn't.
[22:48:04] <BASHitup> But having a straight-up root account is NOT the same thing 
[22:48:05] <kee> sudo is a program owned by root, with the setuid bit.
[22:48:12] <kee> Meaning when you run the program, it runs as root.
[22:48:22] <BASHitup> Right, sudo -i is a high root permission 
[22:48:24] <kee> sudo then makes you type in your password to make sure you're actually at the computer.
[22:48:30] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[22:48:37] <BASHitup> But if you destroy all of the file configs or structure, you can't fix it with sudo -i 
[22:48:40] <BASHitup> or sudo - su 
[22:48:49] <BASHitup> The only way to fix it is if you have a root user ... 
[22:48:51] <flaqoniun> not all sector-sizes on floppy disk formats are divisible by 512
[22:48:53] <oldlaptop> BASHitup: You do not understand this correctly. The only "special" thing is that Ubuntu does not set a password for the root account, meaning that you can't log into it normally: you must use sudo, or something similar.
[22:49:01] <BASHitup> Ubuntu is the only OS like that that I know of 
[22:49:03] <kee> If you delete sudo, or stop it being setuid root, then sure.
[22:49:10] <BASHitup> The other distros set you up with a root account during the install 
[22:49:11] <oldlaptop> The root account still exists, and it's not limited in any particular way.
[22:49:14] <kee> You do have a root user.
[22:49:19] <kee> You just can't log in because it has no password set.
[22:49:23] <BASHitup> When I say root, I mean, the user is called "root' 
[22:49:25] <kee> Yup!
[22:49:30] <BASHitup> so that's a symantic argument 
[22:49:31] <kee> `cat /etc/passwd`
[22:49:35] <kee> root is in there.
[22:49:45] <flaqoniun> so i don't buy the floppy reasoning
[22:49:51] <BASHitup> Obviously, if you have only one Ubuntu user, that's also a "root" user but that's not the same as something like Administrator on Windows
[22:50:03] <BASHitup> Being able to run admin commands is not the same as being the admin 
[22:50:05] <kee> BASHitup: No, one Ubuntu user isn't a "root" user.
[22:50:13] <kee> It's a user in the `sudo` group.
[22:50:19] <BASHitup> If that user is the only user, dude, how not? 
[22:50:20] <kee> There is an Administrator user: `root`.
[22:50:24] <kee> It's not the only user.
[22:50:33] <BASHitup> If you set up Ubuntu with one user ... just one. That user is going to have sudo rights 
[22:50:37] *** Joins: wauterboi (~wauterboi@185.65.135.254)
[22:50:40] <kee> The Administrator user, just like on Windows XP, is disabled by default so you can't log in.
[22:50:49] <kee> But you can run programs as administrator anyway.
[22:50:52] <BASHitup> The primary user account can run sudo -i, sudo -s sudo - su etc 
[22:51:01] <kee> No, there's no such thing as "primary user account".
[22:51:10] <kee> There are accounts in the `sudo` group, or in the sudoers file.
[22:51:12] <BASHitup> But <su> will not work ... Because su asks for a root account and when one isn't set up it will fail the authentication 
[22:51:13] <oldlaptop> I agree with the pragmatic argument that a user with permissions to run any command with sudo is, for practical purposes, tantamount to root. But it's *not the same thing*.
[22:51:23] *** Joins: vysn (~vysn@user/vysn)
[22:51:27] <BASHitup> Symantics yet again 
[22:51:30] <kee> BASHitup: `su` asks for the root password.
[22:51:35] <flaqoniun> looks like IBM might be to blame for PC using 512 byte sectors
[22:51:38] <BASHitup> By primary, you mean what, "oldlaptop"? 
[22:51:50] <BASHitup> This is getting into some abstract linguistics argument 
[22:51:52] <oldlaptop> You're talking about computers. Semantics are *very important*.
[22:52:01] <kee> It's not a linguistic argument.
[22:52:03] <BASHitup> Semantics ... I mean non-computer semantics 
[22:52:07] <kee> BASHitup: run `sudo whoami`.
[22:52:08] <BASHitup> Like arguing for the same of arguing 
[22:52:13] <BASHitup> or arguing without logical bASIS 
[22:52:19] <BASHitup> Equivocation talk etc 
[22:52:31] <kee> Run the command `whoami`, then run `sudo whoami`.
[22:52:35] *** Quits: Zeturic (~Orimendix@50.26.218.162) (Ping timeout: 252 seconds)
[22:52:50] <BASHitup> Yes, it returned <root>
[22:52:57] <BASHitup> But if you run whoami, it won't 
[22:53:01] <kee> Unlike Windows, Linux doesn't have the same concept of "logged in".
[22:53:02] <BASHitup> So you're not making a strong point there
[22:53:06] <oldlaptop> This is not "non-computer semantics". Precisely how sudo works has important practical implications, and misunderstanding it causes real problems.
[22:53:10] <kee> You aren't "logged in" as a user.
[22:53:10] <BASHitup> You ran whoami as root with super user as 
[22:53:23] <BASHitup> So you told the system you're acting as root and it returned that 
[22:53:25] <kee> You are running a login shell, or an X session, as a user.
[22:53:32] *** Quits: NeoFAT32_ (~NeoFAT32_@118.179.224.74) (Remote host closed the connection)
[22:53:34] <kee> You didn't "tell the system you're acting as root".
[22:53:50] <kee> You ran sudo. Sudo runs as root, but only does what you tell it to if you can prove you're who you say you are.
[22:53:51] <BASHitup> https://phoenixnap.com/kb/sudo-vs-su-differences
[22:53:51] <bayaz> Title: Sudo Vs Su: The Difference Between sudo and su Explained 
[22:53:58] <kee> That article is probably not useful.
[22:54:04] <kee> Not unless you understand the basics.
[22:54:07] <BASHitup> I"m making a YouTube about this, hopefully 
[22:54:11] <BASHitup> You all can attack my channel 
[22:54:14] <BASHitup> I think I'm right 
[22:54:24] <kee> Instead of us attacking your channel, can you let us critique your script?
[22:54:36] <kee> That way, you can produce a more useful video, and we'll all be happy.
[22:54:40] <BASHitup> sudo vs su
[22:54:41] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[22:54:42] <BASHitup> Both su and sudo elevate privileges assigned to the current user.
[22:54:43] <kee> There are not enough educational YouTube videos.
[22:54:44] <BASHitup> The main difference between the two is that su requires the password of the target account, while sudo requires the password of the current user. Therefore, it is much safer to use sudo since it doesn‚Äôt include exchanging sensitive information.
[22:54:46] <BASHitup> And that's not spam 
[22:54:51] <BASHitup> I don't know what the paste URL is 
[22:54:58] <BASHitup> If you want me to paste stuff, inform me on that. 
[22:55:04] <kee> BASHitup: //topici
[22:55:06] <kee> BASHitup: //topic
[22:55:25] <BASHitup> Additionally, it is advisable to stick to sudo when performing tasks that require root privileges. By doing so, the current user is only granted privileged for the specified command. On the other hand, su switches to the root user completely, exposing the entire system to potential accidental modification.
[22:55:34] <BASHitup> So, again, su won't work on Ubuntu 
[22:55:39] <apotheon> BASHitup: sudo doesn't require the current user password if it's not configured that way
[22:55:39] <oldlaptop> BASHitup: Unfortunately, that article dumbs things down enough to be unclear.
[22:55:45] <piou> sudo should always be used instead of su really, but that more because sudo is much more suitable for privilege management in a multi-user setting
[22:55:47] <BASHitup> It will work on CentOS or OpenSUSE 
[22:55:53] <BASHitup> This isn't a Linux argument - it's about Ubuntu 
[22:55:58] <kee> BASHitup: What password do you type in to make it work?
[22:56:05] <apotheon> BASHitup: and sudo is not just "safer" than su
[22:56:06] <BASHitup> If you don't run Ubuntu, you're right. If you run Ubuntu, you're wrong and I'm right 
[22:56:11] <kee> BASHitup: No, you're not.
[22:56:17] <kee> On CentOS, I can remove the root password.
[22:56:21] <kee> Then it behaves like Ubuntu.
[22:56:24] <BASHitup> If you use visudo then ... 
[22:56:30] <BASHitup> So you add yourself to the sudo wheel, eh? 
[22:56:32] <BASHitup> You did that, right? 
[22:56:36] <BASHitup> The sys doesn't come that way 
[22:56:40] <kee> Er‚Ä¶
[22:56:43] <oldlaptop> kee: (Assuming you then configure sudo in a similarly goofy way to ubuntu's default.)
[22:56:43] <BASHitup> Yeah 
[22:56:50] <apotheon> 18:25 < piou> sudo should always be used instead of su really, but that more because sudo is much more suitable for privilege management in a multi-user setting
[22:56:51] *** Joins: lispy (~lispy@user/lispy)
[22:56:54] <apotheon> only in multi-user settings
[22:57:04] <kee> oldlaptop: I meant it'll stop su working, not that it'll make sudo work.
[22:57:05] <apotheon> on single-user systems that doesn't apply the same way
[22:57:12] <oldlaptop> (Fair enough.)
[22:57:33] <piou> apotheon: I can see any benefit to using su, so might as well keep the right habit
[22:57:38] <kee> BASHitup: There's no such thing as a "sudo wheel".
[22:57:40] <piou> s/can/can't
[22:57:43] *** Quits: flaqoniun (~F@32.211.211.39) (Remote host closed the connection)
[22:57:56] *** Joins: flaqoniun (~F@32.211.211.39)
[22:58:05] <apotheon> piou: Your lack of imagination is not my problem.
[22:58:05] <piou> apotheon: but I'm not going to police people that do things on their own computer
[22:58:15] <piou> apotheon: why the aggressivity?
[22:58:21] <apotheon> What's aggressive?
[22:58:26] <apotheon> I just disagree with you.
[22:58:33] <piou> apotheon: nothing here's your problem
[22:58:42] <piou> yet you attack my "lack of imagination"
[22:58:43] <apotheon> For one thing, sudo is a huge pile of extra attack surface, relatively speaking.
[22:58:45] <kee> apotheon: ‚ÄúYour [vague insult] is not my problem.‚Äù is rather aggressive when nobody suggested it was.
[22:58:52] <BASHitup> Even if i am right, I just messed up with a purge that's removing my backup kernels 
[22:58:57] <lispy> i run everything as root
[22:59:00] *** Joins: NeoFAT32_ (~NeoFAT32_@118.179.224.74)
[22:59:01] <BASHitup> They won't work on GRUB likely 
[22:59:06] <apotheon> piou: How would you characterize someone's inability to imagine something?
[22:59:10] <kee> BASHitup: What command did you run?
[22:59:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:59:25] <kee> apotheon: Replace sudo with doas, then.
[22:59:30] <BASHitup> If you run everything at root, I'd call you a subperb power user who knows it all. They removed that feature from Kali for a reason. 
[22:59:35] <apotheon> kee: I do use doas, in very limited ways.
[22:59:38] <BASHitup> sudo apt autoremove --purge
[22:59:41] <BASHitup> I shouldn't have run that 
[22:59:42] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[22:59:48] <kee> BASHitup: No, you shouldn't've.
[23:00:00] <kee> But we live and learn.
[23:00:09] <kee> The more you break the system, the better you'll understand it.
[23:00:15] <oldlaptop> (This broader conversation is really a useful demonstrations of the limitations of sudo as a "safety" feature.)
[23:00:16] *** Joins: rvalue (~rvalue@user/rvalue)
[23:00:18] <kee> So long as you don't get attached to your first guess about how something works.
[23:00:20] <BASHitup> I have to see if it'll boot. 
[23:00:23] <oldlaptop> Or rather a useful demonstration.
[23:00:25] <kee> And so long as you don't trust people on the internet too much.
[23:00:28] <BASHitup> If I'm not back in 5 minutes, you all know why 
[23:00:30] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Quit: WeeChat 2.8)
[23:00:47] <lispy> gulp
[23:00:53] <apotheon> The only reason sudo is a net benefit pretty much across the board as an su replacement on most Linux systems is GNU su.
[23:01:09] <pulse> windows doesnt' have this problem :)
[23:01:10] <flaqoniun> /etc/shadow is bloatware
[23:01:17] <apotheon> Otherwise, its utility for protecting the system is largely a matter of use case.
[23:01:21] <lispy> kernel is bloatware
[23:01:22] <kee> pulse: Windows NT's permissions model is the best part about Windows.
[23:01:25] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:01:27] <pulse> kee, i agree
[23:01:33] * pulse hugs windows
[23:01:46] <kee> I'm glad you can still bring yourself to appreciate it.
[23:01:48] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[23:01:54] <kee> I can't. :-(
[23:02:01] <beaky> nice i like windows too
[23:02:03] <pulse> it's a perfect desktop OS
[23:02:12] <beaky> especially windows 2000 i like the classic timeless look
[23:02:13] *** Joins: sonny6 (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca)
[23:02:23] <kee> Windows 98 SE was peak UI.
[23:02:23] <pulse> yes win2000 was comfy
[23:02:28] <apotheon> It'd be nice if Windows had more privilege separation.
[23:02:28] <phogg> too bad NTFS permissions are so horrible
[23:02:34] <kee> Windows 7 was peak behaviour.
[23:02:34] <phogg> should have copied Netware some more
[23:02:39] <oldlaptop> At least nobody will confuse "foo is perfect" with a reasoned, reasonable opinion.
[23:02:39] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[23:02:41] <kee> phogg: NTFS permissions are the best part.
[23:02:42] <lispy> Trying to install Windows 11 and I get "A media driver your computer needs is missing"
[23:02:43] <BASHitup> Still here! 
[23:02:48] *** Parts: Klinda (~superleag@user/klinda) (Konversation terminated!)
[23:02:54] <BASHitup> Windows 11 can suck it on the TPM requirement 
[23:02:58] <apotheon> . . . but yeah, WinNT was peak Windows for system design principles (not even talking about UI).
[23:03:01] <phogg> kee: the permission model is okay, the implementation is junk. Inherted rights filtering is much, much nicer.
[23:03:03] <pulse> i'm fairly sure windows 11 isn't good. i'm waiting for windows 12
[23:03:06] <apotheon> err, Win2K
[23:03:07] <lispy> Same problem for Windows 10, but I should have no issue with that
[23:03:09] <apotheon> sorry
[23:03:11] <kee> phogg: Oh, yeah, complete junk.
[23:03:11] <BASHitup> I have an M.S. in cybersecurity so I get why the TPM is important but it makes fiddling with VMs super annoying. 
[23:03:22] <BASHitup> I like Win11 bit ot
[23:03:28] <phogg> kee: it's no wonder that NFSv4 basically copied the Windows permission model.
[23:03:34] * kee points at BASHitup
[23:03:37] <BASHitup> *Win 11 but it's bizarre on how much it resembles Linux 
[23:03:40] <kee> Heretic!
[23:03:44] <BASHitup> The lock screen totally ripped off Ubuntu 
[23:03:49] <kee> KDE, too.
[23:03:52] <oldlaptop> phogg: "nfs does the same thing!" is not exactly a glowing endorsement...
[23:03:54] <BASHitup> They're taking cheap shortcuts, ripping off open source guis 
[23:03:54] <kee> They even nicked the motto.
[23:03:59] *** Quits: BASHitup (~richard@user/yippeekaiyay) (Client Quit)
[23:04:22] <kee> Good for us; we don't need to put in much effort to get people to migrate.
[23:04:29] <kee> Just give them the thing Microsoft (badly) copied
[23:04:31] *** Quits: sonny (~sonny@bras-base-london1483w-grc-39-65-95-42-231.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:05:06] <kee> I like how we had Debian 11, macOS 11 and Windows 11 at almost the same time.
[23:05:11] <lispy> it should be a federal crime to make drivers closed-source 
[23:05:49] <apotheon> I'm torn on that statement.
[23:06:01] <flaqoniun> i don't know about all that, but it should be illegal to make a non-programmable computer
[23:06:13] <kee> I'm torn on that statement.
[23:06:15] <apotheon> I'm torn on that statement, too.
[23:06:19] <lispy> same
[23:06:25] <pulse> i'm torn on being torn
[23:06:34] * pulse 's stack overflows
[23:06:36] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[23:06:38] <apotheon> I . . . shit, I think I am, too.
[23:06:41] <flaqoniun> and sell it with  the intention to run any source code from random websites
[23:06:43] <flaqoniun> *
[23:06:46] <kee> It should be illegal to sell a non-programmable programmable computer to more than 1000 people.
[23:06:53] <flaqoniun> *COUGH* GPU *COUGH*
[23:06:53] <oldlaptop> Consider the means ultimately necessary to enforce "there oughta be a law! *takes swig*"
[23:07:05] <apotheon> yeah
[23:07:07] *** Joins: jazzy (~jaziz@user/jaziz)
[23:07:10] <apotheon> That's a big part of why I'm torn.
[23:07:11] *** Joins: programmar (~whatever@118.69.128.37)
[23:07:12] <kee> oldlaptop: Regulation.
[23:07:23] <apotheon> Would you kill your grandmother if necessary to enforce it?
[23:07:27] <lispy> yes
[23:07:30] <pulse> i wonder what computers would be like today if nazis won ww2
[23:07:31] <apotheon> (assuming you like your grandmother, and she was alive)
[23:07:32] <kee> We just need to put this requirement in GPLv4.
[23:07:34] <pulse> probably a lot more expensive
[23:07:41] <pulse> and not open at all
[23:07:42] <oldlaptop> Consider the means ultimately necessary to enforce "Regulation is necessary. *straightens tie*"
[23:07:48] <apotheon> ugh
[23:07:58] <apotheon> Let's just put GPLv4 in a furnace.
[23:08:10] <no-n> hi software
[23:08:26] <beaky> hi im beaky
[23:08:32] <no-n> hey programming
[23:08:36] <no-n> hi beaky
[23:08:38] <lispy> hi beaky good name
[23:09:12] <apotheon> I'm a little torn on whether to use doas for my network scripting, too.
[23:09:15] *** Quits: Fausto (~dante@gateway/tor-sasl/filohuhum) (Ping timeout: 240 seconds)
[23:09:19] <kee> Regulation is great and has no problems.
[23:09:22] <kee> (It's technically against certain regulations for me to exist‚Ä¶)
[23:09:33] <apotheon> Are you AI?
[23:09:45] <kee> No, I just have to lie on government forms that are illegal to lie on.
[23:09:51] <apotheon> how fun
[23:09:51] <phogg> oldlaptop: NFSv3 and NFSv4 are wildly different
[23:10:00] <apotheon> I'm curious about the details.
[23:10:16] <oldlaptop> phogg: yes, and in an incredible feat of engineering, nfs4 is even more terrifying!
[23:10:25] <oldlaptop> Nobody thought this possible
[23:10:45] <kee> apotheon: United Kingdom. In a fabulous plot twist, the House of Lords is the one trying to fix the problem and the House of Commons is the one trying to make more of it.
[23:11:08] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[23:11:09] <oldlaptop> apotheon: Reflex: if you trust a mindless script to do it, why would you not trust a mindless script to use a (suitably strict) doas configuration to do it?
[23:11:18] *** Quits: grogu (~quassel@user/grogu) (Ping timeout: 252 seconds)
[23:11:25] <kee> Why not use udev rules?
[23:11:27] * kee ducks
[23:12:04] *** Joins: Auron (Auron956@user/auron)
[23:12:22] <oldlaptop> "doas" and "udev" go together about like /etc/passwd and HKEY_SUMMON_CTHULU
[23:12:38] <apotheon> oldlaptop: Yeah, I don't actually have a good reason for my hesitation.
[23:14:55] *** Quits: bababb (~baracurda@user/parserblabla) (Ping timeout: 240 seconds)
[23:15:46] <apotheon> I finally gave the last message from oldlaptop the attention it deserves, and it's magnificent.
[23:16:26] *** Tazmainian is now known as Tazy
[23:16:35] <oldlaptop> (It really just says the longest prefix of any registry key I can remember is HKEY_)
[23:16:38] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[23:17:00] <kee> That reminds me: the easiest way to fix a Windows registry issue is to boot into recovery mode, then load the registry files in ad-hoc places in the recovery OS's registry.
[23:17:30] <kee> If you don't do that, you end up with permission issues everywhere.
[23:17:50] *** Joins: BASHitup (~richard@user/yippeekaiyay)
[23:18:02] <BASHitup> Yeeeah - BOIZ ... I did it 
[23:18:15] <oldlaptop> I'm pretty sure the easiest way to fix a windows registry issue starts with erasing the volume containing the windows installation
[23:18:16] <BASHitup> So I ran python3 -m venv env 
[23:18:23] <BASHitup> ... Per the Python manual on the official website 
[23:18:29] <kee> oldlaptop: No: Windows comes with a buggy registry by default.
[23:18:29] <oldlaptop> That sounds like a reasonably good idea.
[23:18:34] <BASHitup> Then I went to pip install youtube-dl once I was in my venv 
[23:18:40] <BASHitup> No sudo warning! 
[23:18:43] <BASHitup> So I think I'm good 
[23:18:49] <kee> BASHitup: You did enter the venv, right?
[23:18:56] <kee> Creating it isn't enough.
[23:18:59] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.45) (Ping timeout: 252 seconds)
[23:19:07] <BASHitup> source env/bin/activate
[23:19:10] <kee> Yup! Well done.
[23:19:14] <BASHitup> That should activate the ven
[23:19:16] <oldlaptop> (Not that installing stuff under your $HOME is all that big a disaster.)
[23:19:17] <BASHitup> !!!!!
[23:19:18] <BASHitup> I rule
[23:19:35] <kee> `source` works basically by copy-pasting the concents of the file as commnads in the current shell.
[23:19:47] <oldlaptop> although you'd probably need to configure your environment appropriately (setting PATH and PYTHONPATH and probably other things)
[23:19:51] <kee> *contents *commands
[23:19:56] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:20:01] <BASHitup> I put all kinds of stuff at home. But, for my programs, I try to stay with the UNIX philosophy of modularity. Even though I'm essentially admin and this isn't a multi-user machine, I keep everything in /usr/local/bin
[23:20:02] <KillerWasp> BASHitup: your nick seem like "shit up"
[23:20:06] <BASHitup> EVERYTHING 
[23:20:08] <kee> oldlaptop: The source thing does all that, iirc.
[23:20:18] <oldlaptop> It does that for the virtualenv, yes
[23:20:32] *** Joins: justOkay (~justache@user/justache)
[23:20:40] <BASHitup> I think Ubuntu is not good for someone who wants to achieve power user God status. For that, my next distro will be openSUSE 
[23:20:42] <oldlaptop> I was remarking that it wouldn't be all that big a disaster if you were to neglect to activate the venv, because then it would all get installed under $HOME/something
[23:20:44] <BASHitup> *Tumbleweed
[23:20:47] <oldlaptop> ($HOME/.local?)
[23:20:56] <BASHitup> Ubuntu won't make a man outta ya. It'll keep you a boy in a man's world. 
[23:21:04] <BASHitup> Though it's not a *ussy distro like Windows 
[23:21:12] <BASHitup> ... Umm, but I like Win 11. I really do 
[23:21:20] <BASHitup> *ussy OS
[23:21:27] <BASHitup> NOt a distro as it's not nix 
[23:21:31] <kee> BASHitup: Enough with the pointless gender stereotypes, please?
[23:21:39] <oldlaptop> bowlderization is of... limited value.
[23:21:45] <BASHitup> Yeah, OK 
[23:21:48] <oldlaptop> kee: I suppose it could be a pointless species stereotype.
[23:21:57] <BASHitup> The legal intake lady asked me if I'm non-binary and I said, "yes" 
[23:22:03] <BASHitup> If that makes you feel any better. 
[23:22:17] <oldlaptop> (That's a weird set of meanings for one word to have.)
[23:22:25] <kee> oldlaptop: Would that be worse? In theory, it feels like it should be, but our society doesn't place as much value on cats.
[23:22:38] <kee> Also, "man" as gender-neutral is old English, and I don't think "boy" has ever been gender-neutral.
[23:22:43] *** Parts: KillerWasp (~KillerWas@user/killerwasp) (YOU KIDDING ME?? YOU KIDDING MEEE???? (PC drinking beer) *kernel panic!*)
[23:23:08] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[23:23:19] <oldlaptop> grammatical gender as the subject of any kind of controversy is a pretty recent development, AIUI :|
[23:23:34] <kee> Yeah, only in the past 300 years.
[23:23:37] <jelly> dude is the best gender neutral term, dude
[23:24:00] <oldlaptop> That's another word with a weird set of meanings.
[23:24:13] <kee> lead is another one.
[23:24:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:24:30] <oldlaptop> either homophone thereof, even
[23:25:18] <kee> fish, fuck, run, be
[23:25:24] <kee> "be" is possibly the worst offender.
[23:25:42] <kee> It has over a page to itself even in concise dictionaries.
[23:26:37] <kee> BASHitup: You usually need a separate venv for each program, since sometimes they randomly conflict with each other.
[23:27:00] <oldlaptop> How well this reflects on the python packaging ecosystem is left as an exercise for the reader.
[23:27:22] <kee> It does mean the Debian packaging team is never out of work.
[23:27:46] <oldlaptop> How the reproduction do they do that anyway?
[23:27:58] <dan01[m]> How do you prove a negative?
[23:28:05] <oldlaptop> Without even putting a noticeable strain on straitjacket production?
[23:28:52] <kee> oldlaptop: Debian is famous for its un-upstreamed patches.
[23:28:59] <kee> There's a reason they have so many.
[23:29:13] <kee> And why all most of the Python packages are old.
[23:29:31] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[23:30:12] <oldlaptop> :(
[23:30:35] <kee> The version of youtube-dl in Debian predates the YouTube weird block thingy, so you only get a few kB/s.
[23:32:38] <oldlaptop> I suppose I have one nice thing to say about it all: it's not npm
[23:32:46] <BASHitup> i don't know, but if none of you owns an enterprise, I wish for the best on entrepreneurship. And I really mean that. There's very little if any arrogance on here. Most of the folks on here are smart, down-to-eartch and knowledgeable 
[23:32:52] <oldlaptop> (debian eventually gave up on packaging npm stuff, IIRC.)
[23:33:02] <BASHitup> Those are all vital personality traits to make it in the dog-eat-dog world without being a dick 
[23:33:07] *** Joins: Jong (~Jong@2620:10d:c090:400::5:7a46)
[23:34:13] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:35:09] <BASHitup> I'm nicer than usually today as my self-esteem has been restored ... Defended my tech honor with a first FDE clone then restore using Clonezilla 
[23:35:14] <BASHitup> All command line and all done proper 
[23:37:01] *** Joins: widp (~widp@124.123.106.12)
[23:37:19] <BASHitup> You all would be interesting to talk to when considering such conversations as shell vs terminal. The word shell is often used interchangeably with terminal but that's incorrect. The shell isn't technically visible. The command line sends calls to the shell but the shell is beneath it 
[23:37:34] <pyzozord> is this correct english "The type rune is an synonym?" I thought it should say "a synonym" article, not "an synonym"
[23:37:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:37:40] <BASHitup> Not interesting to my wife or most of my non-programmer colleagues in the past but it's something to thnk about 
[23:37:50] <GeDaMo> pyzozord: I would say "a synonym"
[23:38:14] <kee> What about ‚Äúan hsynonym‚Äù? That's the real question.
[23:38:29] <pyzozord> hah, I think I found an ort error in a book
[23:39:02] <oldlaptop> pyzozord: The thing to remember is that "an" only exists because it's difficult to say "a" in front of a vowel sound
[23:39:08] *** Joins: c7s (~c7s@user/c7s)
[23:39:17] <kee> BASHitup: I don't think you're quite making the right distinction.
[23:39:26] <kee> Terminal v.s. shell, yeah, that's fine.
[23:39:26] <oldlaptop> so it's "a synonym", but "an S.Q.L. database" (if you pronounce SQL as an initialism like that)
[23:39:40] <kee> But ‚Äúcommand line‚Äù‚Ä¶ Isn't really a well-defined term.
[23:39:44] <kee> It doesn't mean terminal.
[23:39:50] <oldlaptop> because "S.Q.L." as an initialism sounds something like "Ess Cue Ell"
[23:39:59] <kee> It sort of means shell-in-a-terminal I think.
[23:40:11] <pyzozord> oh right, I wouldn't realize that with SQL
[23:40:13] <BASHitup> No, the shell is the closest programming interface to the OS. 
[23:40:20] <kee> No, that's wrong.
[23:40:23] <BASHitup> But the terminal isn't the shell. That's dead wrong 
[23:40:26] <oldlaptop> "terminal" almost always means "terminal emulator" nowadays.
[23:40:27] <BASHitup> The terminal interacts with the shell 
[23:40:30] <kee> The terminal is the program that draws stuff on the screen.
[23:40:31] <BASHitup> Yes, that's also true 
[23:40:35] <kee> The shell is the program that runs your commands.
[23:40:41] <BASHitup> A true ttyl is basically, if you use the f-keys 
[23:40:47] *** Joins: anovick (~anovick@2a0d:6fc0:1e7b:a300:a01c:58e1:73c6:13dd)
[23:40:51] <kee> No, that's still a virtual terminal.
[23:40:55] <kee> A true tty is a piece of hardware.
[23:40:59] <oldlaptop> and accordingly is an almost exclusively a unix thing - you won't hear windows people calling cmd.exe a "terminal"
[23:41:03] <BASHitup> Right ... but those don't exist anymore 
[23:41:04] <oldlaptop> A true tty has paper.
[23:41:13] <BASHitup> That's like saying pwd doesn't exist because it doesn't print on paper 
[23:41:16] <BASHitup> When it once did 
[23:41:20] <kee> oldlaptop: You don't even count glass terminals?
[23:41:21] <BASHitup> The real terminals printed out the code 
[23:41:28] <pyzozord> oldlaptop: what do they call it?
[23:41:31] <oldlaptop> kee: Well, that's hardly a teletype anymore.
[23:41:47] <BASHitup> Yeah, if any of you remembers the teletypes, you're all much older than I. 
[23:41:48] <kee> oldlaptop: A teletype can have a screen, so long as it also prints on paper.
[23:41:53] <BASHitup> I was born after all of that 
[23:42:01] <pyzozord> I think apple calls it's program "Term" or "Terminal", I don't remember
[23:42:03] <oldlaptop> (Of course they were called "glass teletypes" at the time. Contrary to popular belief, humor *had* been discovered back then.)
[23:42:03] *** Quits: vitali64 (~vitali64@user/vitali64) (Ping timeout: 250 seconds)
[23:42:36] <BASHitup> I've never much cared for Apple's OS. Except for iOS. I like the iPHone software 
[23:42:40] <BASHitup> I'm not a fan of MacOS
[23:42:46] <oldlaptop> pyzozord: Presumably "the command prompt". It's not really a terminal emulator, in the sense that the environment it's emulating isn't really a dedicated terminal.
[23:43:00] <kee> Windows people call it the command line because back in the day, they were the same program.
[23:43:14] <oldlaptop> (Apple's is a terminal emulator, and I'm told not a very good one.)
[23:43:23] <kee> COMMAND.COM was the shell and the terminal.
[23:43:23] <BASHitup> Yeah, I don't know ... but in a cybersecurity interview, the interviewer looked at me like I'm a total dufus when he expected me to view the shell solely in terms of a reverse shell. 
[23:43:35] <BASHitup> So, he asks me what a shell is and I start talking about Korn and BASH 
[23:43:36] <ProfSimm> oldmagic: what makes it a "not very good one"
[23:43:43] <BASHitup> I'd say he's myopic in his perspective 
[23:43:45] <ProfSimm> oldmagic: it's a terminal like any
[23:43:51] <kee> BASHitup: You may have dodged a bullet, or misunderstood a question.
[23:43:59] <BASHitup> No, I blocked him on LinkedIn 
[23:44:02] <kee> Was "secure shell" in the question?
[23:44:04] <pyzozord> BASHitup: "in terms of a reverse shell"?
[23:44:08] <kee> Oh, LinkedIn? Yeah, makes sense.
[23:44:20] <kee> Everyone around me irl has such a high opinion of LinkedIn for some reason.
[23:44:37] <BASHitup> I wanted a job ... not a tech screening. It wasn't an official interview so I found his demeanor and approach unwarranted. He's busting my **** yet I have my M.S. 
[23:44:40] <GeDaMo> What's a "reverse shell"?
[23:44:44] <BASHitup> And education is severely overrated in tech 
[23:44:45] <epony> they think it's a Lincoln
[23:44:55] <kee> BASHitup: No, education is just bad in tech.
[23:45:00] <kee> Education is vital, it just doesn't exist.
[23:45:01] <BASHitup> But he's asking me dumbass questions like "What happens when you type Google into a search box?
[23:45:06] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[23:45:09] <ProfSimm> GeDaMo: it's a clam that has its meat on the outside
[23:45:09] <BASHitup> I should have straight up left the convo then 
[23:45:18] <BASHitup> asking me help desk questions for cyber oles 
[23:45:21] <BASHitup> *roles
[23:45:30] <kee> BASHitup: Those interviews are fun.
[23:45:35] <pyzozord> https://en.wikipedia.org/wiki/Shell_shoveling
[23:45:36] <bayaz> Title: Shell shoveling - Wikipedia 
[23:45:45] <pyzozord> "reverse shell" redirects there
[23:45:48] <kee> They either go nowhere, or you end up with a cushy part-time job that pays orders of magnitude more than it shuld.
[23:46:28] <kee> GeDaMo: A reverse shell is a program that connects to a server, then lets the server send it shell commands.
[23:46:36] *** Joins: Numocha (~anonkitty@user/anonkitty)
[23:46:37] <GeDaMo> Ah
[23:46:37] <kee> Like backwards SSH (but often without the "secure" part).
[23:46:43] <kee> Commonly used by rootkits.
[23:46:47] *** Joins: Gallomimia- (~Gallomimi@node-1w7jra2a2gqpwrhvdahgyn6lz.ipv6.telus.net)
[23:46:55] <kee> Rootkits and other viruses.
[23:47:04] <kee> Like malicious trojanware.
[23:47:14] <pyzozord> I think it just means "ssh"
[23:47:23] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[23:47:26] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpwqael9u79tikm.ipv6.telus.net) (Ping timeout: 260 seconds)
[23:47:30] <Numocha> If I wanted to get into software development, but not web development, then which language should I learn now?
[23:47:30] <kee> pyzozord: SSH can run as a reverse shell iirc.
[23:47:36] <kee> Numocha: Python, Rust.
[23:47:41] <kee> Whichever you find most interesting.
[23:47:43] <kee> Avoid Jasva.
[23:47:49] <Numocha> I recently have learned quite a bit of ruby as my first lang
[23:47:58] *** Gallomimia- is now known as Gallomimia
[23:47:59] <kee> In which case, learn Ruby, unless you're bored.
[23:48:03] <pyzozord> ooh so not exactly like normal ssh
[23:48:13] <kee> It's just how it makes the initial connection that's different.
[23:48:22] <kee> Instead of waiting for someone to connect to it, it connects to someone else.
[23:48:22] <Numocha> I do feel bad about skipping an entire section on APIs though, that thing is a head scratcher
[23:48:24] <pyzozord> it differs because the host intitaties the connection to the client
[23:48:39] <nomagno> kee: avoud java is too strong a word. And hard disagree on Rust for beginners
[23:48:42] <GeDaMo> Sounds like those botnets that listen on IRC channels
[23:48:44] <nomagno> It's extremely strict
[23:49:03] <kee> nomagno: Rust isn't a hard language.
[23:49:03] <kee> Strictness is what you want.
[23:49:03] <kee> I recommend learning programming languages to learn their way of thinking.
[23:49:07] <oldlaptop> I wouldn't /start/ with Java, and would "avoid" it as a first language for that reason.
[23:49:09] <kee> Every language's way of thinking has merit, except Java's.
[23:49:19] <oldlaptop> It wouldn't unalterably corrupt the mind to be exposed to it early.
[23:49:22] <kee> You should learn Java eventually ‚Äì the JVM is awesome.
[23:49:38] <Numocha> also I feel like I need to look up simple coding challenges to hone my scripting skills 
[23:49:38] <nomagno> Honestly my adaptation process to Rust is bring pretty... shit
[23:49:41] <kee> oldlaptop: If you're aware that it's got a very confused idea of what ‚Äúobject oriented‚Äù is, then sure.
[23:49:43] <nomagno> Like, I'm trying
[23:49:52] <kee> nomagno: Have you read the Rust book?
[23:49:53] <oldlaptop> kee: That's the real problem, yes.
[23:49:53] <Sqaure> kee, is it? 
[23:49:54] <Numocha> I can barely put together elegant codes. Mine looks so all over the place lol
[23:49:55] <nomagno> But I just can't understand the light patterns used by most projects
[23:49:59] <Sqaure> i hate java
[23:50:03] <nomagno> kee: Yes
[23:50:05] <oldlaptop> It definitely shouldn't be the introduction to what objects are, and that's deeply unfortunate.
[23:50:14] *** Joins: maxzor (~maxzor@2a01cb04054faa0067e968e95df8d6eb.ipv6.abo.wanadoo.fr)
[23:50:19] <kee> Numocha: Ruby is kinda like that.
[23:50:27] <kee> I recommend learning‚Ä¶ maybe JavaScript, actually.
[23:50:30] <oldlaptop> In its defense, neither should the most likely alternatives. (Maaaaybe not even python/ruby.)
[23:50:34] <Sqaure> sure, it has its pro's but java as a language and java bytecode seems limited.
[23:50:38] <kee> Knowing about JavaScript's futures might help you with your Ruby.
[23:50:44] <nomagno> It just seems like I'm reading some alien software engineering structure for every big project
[23:50:51] <Numocha> kee: Aye. The fact that there are more than one way to do things make it really hard to come up with what I should do
[23:50:57] <oldlaptop> Dammit all, I think javascript actually *would* be less harmful a first language than java.
[23:50:59] <oldlaptop> That's scary.
[23:51:00] <pyzozord> the big problem with rust is the zeltos :P if not for them I'd be probably more interested inchecking out that language
[23:51:02] <nomagno> I understand what da lines do, but when understanding chunks of code I feel like it just needs more documentation
[23:51:03] <kee> Numocha: The solution is to learn more ways of doing things.
[23:51:07] <kee> Eventually you'll start inventing your own.
[23:51:19] <kee> Don't feel too impressed, though, because somebody else has already invented it before.
[23:51:32] <kee> Maybe better than you, maybe worse.
[23:51:49] <nomagno> pyzozord: Same honestly. I've gotten weird 'looks' for talking about my C project on a Rust project's offtopic
[23:51:50] <kee> Though ‚Äúbetter‚Äù depends on your requirements.
[23:52:03] <kee> nomagno: Example?
[23:52:21] <kee> Well-written Rust is ridiculously easy to understand, but Rust isn't always well-written.
[23:52:22] <InPhase> oldlaptop: I think actually that Python introduces you to OOP in a low-burden sort of way.  It's sort of a gentle introduction to objects and classes as a concept that doesn't muddle that with architectural rules or heavy idioms about their rigidity.
[23:52:43] <Numocha> What did you guys learn first and what did you guys do with your first language, something you are proud of?
[23:52:45] <kee> In Rust, you can get away with worse code than you can in C; in C, bad enough code is just completely wrong, but in Rust the compiler shouts at you until you fix most errors.
[23:52:46] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[23:52:48] <nomagno> kee: You asked the same question the other day and I linked a specific open source Rust game. I'm trying to hack away at this codebase maybe it's just not the best example
[23:52:49] <InPhase> oldlaptop: Then LATER you can learn about good architectural use of OOP, perhaps while learning a language more suitable for larger programs.
[23:52:50] <oldlaptop> I'd agree that it's at the very least a close call. It *definitely* doesn't rub your face in the object model the way Java does.
[23:52:51] *** Quits: rsx (~dummy@ppp-188-174-131-150.dynamic.mnet-online.de) (Quit: rsx)
[23:52:51] <nomagno> veloren.net
[23:53:01] <kee> nomagno: MS DOS Batch, and I made a program that showed a wordsearch full-screen.
[23:53:08] <kee> Numocha: ^ sorry
[23:53:08] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[23:53:09] <Numocha> I am curious since I would love to know what I should do first to gain familiarity with writing code
[23:53:20] <kee> Numocha: What we did first, and what we recommend doing first, are different.
[23:53:42] *** Joins: Satin (uid193953@user/Seten)
[23:53:42] <InPhase> oldlaptop: I have come to believe there is good pedagogical value in separating that out.  When you learn objects in OOP, they're just this sort of natural thing in the background of your thinking.
[23:53:46] <kee> Numocha: Just do whatever seems interesting to you.
[23:53:51] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[23:53:55] <InPhase> s/objects in OOP/objects in Python/
[23:54:03] <kee> I recommend Rust. If you don't like the look of it, do what somebody else suggests.
[23:54:27] <kee> nomagno: Oh, that. I've got that tab open still.
[23:54:46] <InPhase> Numocha: If you want to learn general programming, Python is the best language to start off with right now.
[23:54:47] <Numocha> Yeah I want to ask because I have been hearing people say that RoR is nosediving in popularity, and even then I am slightly more interested in software dev than web dev
[23:54:57] <oldlaptop> I'd like to see how well teaching OOP in tcl/snit would go. I doubt anyone's seriously done that, at least formally.
[23:55:13] <kee> nomagno: That code isn't terribly good btw.
[23:55:19] <Numocha> so I am somewhat afraid that me learning Ruby first might not pay off as well
[23:55:24] <oldlaptop> Numocha: Popularity and quality have *very* little connection.
[23:55:31] <Numocha> still, I do get attached to it. It is a very elegant language
[23:55:44] <kee> Ruby has its elegant parts.
[23:55:52] <kee> It also has its ridiculous parts.
[23:56:02] <InPhase> Numocha: If you want to be serious about programming, you switch to another language after you get comfortable with Python in 6-12 months.  First languages are tricky, second languages are easier, third languages easier than second, and so on.  To ease that initial burden, you should pick an easier first language to pick up, but one which is pretty flexible and touches on modern language concepts, 
[23:56:08] <InPhase> while still having a ton of support material and libraries.  That makes Python the optimal choice right now.
[23:56:10] <kee> Numocha: You will probably find Python annoying for the same reasons I find Ruby annoying, but they're similar-ish languages.
[23:56:16] <oldlaptop> And you shouldn't worry that much about whether some specific language "pays off". Once you've learned *programming*, learning more languages is not that hard.
[23:56:36] <piou> +1 for InPhase 
[23:56:41] <kee> Numocha: For an off-the-wall idea, APL.
[23:56:43] <Numocha> oldlaptop: Aye that does make sense
[23:56:45] * InPhase takes his +1 and holds it up with pride.
[23:56:57] *** Joins: grogu (~quassel@45-26-125-25.lightspeed.tukrga.sbcglobal.net)
[23:56:57] *** Quits: grogu (~quassel@45-26-125-25.lightspeed.tukrga.sbcglobal.net) (Changing host)
[23:56:57] *** Joins: grogu (~quassel@user/grogu)
[23:57:05] <oldlaptop> (Especially within the vaguely-imperative curly-brace tribe - and python is firmly a member of the curly-brace tribe, it just doesn't have literal curly braces.)
[23:57:23] <oldlaptop> (I'd assume ruby is as well?)
[23:57:27] <kee> APL is arcane, but if you can learn it (which will be hard) it widens your easy-language-to-pick-up base.
[23:57:29] <Numocha> Another question: For my second language, is it a good idea to switch to a compiled language to gain experience, or should I just try out another interpreted/OOP language first?
[23:57:33] *** Quits: maxzor (~maxzor@2a01cb04054faa0067e968e95df8d6eb.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[23:57:37] <kee> FORTH is less arcane, but perhaps interesting for the same reason.
[23:57:44] <nomagno> The first little program I was proud of would be a little arcade 1v1 point catching game made with plain GameMaker 1
[23:57:49] <kee> Numocha: I recommend Rust, but the arguments for Python are good.
[23:57:52] *** Joins: maxzor (~maxzor@2a01cb04054faa00ed919463e5f3a61d.ipv6.abo.wanadoo.fr)
[23:57:57] <oldlaptop> "Compiled" versus "interpreted" languages is not a very coherent distinction.
[23:58:12] <nomagno> GML is probably the best introduction to C you can ask for.
[23:58:12] <kee> I think the question is really about the strength of the type system.
[23:58:20] <oldlaptop> "Dynamic" versus non-dynamic is a bit more meaningful.
[23:58:29] <pyzozord> Numocha: another two that are definitely good to pick up is lisp/clojure and haskell. I haven't learned them myself, but I'm planning to
[23:58:34] <novns> INTERCAL is the best language forever
[23:58:37] <kee> C makes some vague gestures towards the concept of having a type system.
[23:58:43] <kee> novns: PLEASE no.
[23:58:44] <apotheon> oldlaptop: Yeah, Ruby is a close enough fit.
[23:58:47] <piou> Numocha: a really important question to choose languages is what you want to program
[23:58:52] <oldlaptop> kee: I think there's something categorically different between (say) python's and java's approaches to type that is not described by "strength".
[23:58:52] <pyzozord> Numocha: I personally feel that python is a great first language to learn
[23:59:18] <piou> Numocha: when the time comes to learn a second language, if you know what you want to do with it, then that will influence your choice heavily
[23:59:19] <oldlaptop> "dynamicity" is a much more apt descriptor of what's really going on, I think
[23:59:20] <kee> oldlaptop: Java's type system is bascially just checked Python's with single inheritance and explicit ducktyping.
[23:59:42] <piou> Numocha: but that's harder to identify before you're reasonnably comfortable with a general purpose langguage
[23:59:54] <apotheon> oldlaptop: It's got a bit more SmallTalk in it, but it still shares enough with the "vaguely-imperative curly-brace tribe" to work.
[23:59:58] <kee> Java doesn't have interface-scoped methods, which is weird coming from Rust (and expected coming from Python and Ruby).
