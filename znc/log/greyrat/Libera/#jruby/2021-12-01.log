[00:13:20] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[03:30:03] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[03:30:03] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[03:31:51] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[05:27:38] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 252 seconds)
[05:44:00] *** Joins: subbu (~subbu@user/subbu)
[06:25:24] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[07:21:07] <MattWelke[m]> API docs https://javadoc.io/doc/org.jruby/jruby-core/9.3.0.0/index.html and https://javadoc.io/doc/org.jruby/jruby-core/latest/index.html appear to be empty. Earlier versions look fine.
[07:57:16] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[08:06:10] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[16:41:49] <headius> Matt Welke: it might be in jruby-base now
[16:42:34] <headius> we restructured release artifacts so that jruby-base is just JRuby itself, jruby-core is a shaded version of jruby-base with all Java dependencies, and jruby-complete is jruby-core plus the Ruby libraries
[16:43:23] <headius> I just triggered it to process jruby-base so it should show up there soon
[17:06:06] *** Joins: sagax (~sagax_nb@user/sagax)
[17:26:38] <MattWelke[m]> nice, ty. I'll be looking at the Java docs this weekend if I play around with the Java extension stuff we talked about earlier this week.
[17:27:06] <MattWelke[m]> I see base, but not core or complete yet. Looks like it's working in the background.
[17:27:23] <headius> yeah those other two probably won't have any docs
[17:27:42] <headius> core just adds third-party libs to the jar and complete adds Ruby libraries that we don't generate docs for
[17:28:02] <MattWelke[m]> oh true
[17:28:06] <MattWelke[m]> then I'm all set
[17:28:35] <MattWelke[m]> When I click the link from the website, it brings me to https://javadoc.io/doc/org.jruby/jruby which you're saying, will no longer show anything, right?
[17:28:55] <MattWelke[m]> I have to be aware that the docs are in jruby-base and change the dropdown to that to see the docs.
[17:29:28] <headius> from our website?
[17:29:36] <MattWelke[m]> Yep
[17:29:43] <MattWelke[m]> How I find it last night was I started from jruby.org -> https://www.jruby.org/documentation
[17:29:43] <headius> I'll fix that
[17:29:50] <MattWelke[m]> And clicked "Browse JRuby API Javadocs online"
[17:30:05] <MattWelke[m]> I saw an empty page, but I noticed if I went back two versions, I saw docs.
[17:30:08] <MattWelke[m]> So I posted here.
[17:30:38] <MattWelke[m]> Oh hold on, I'm wrong. The link brings you to core.
[17:31:08] <MattWelke[m]> But, same idea. The link brings you to something that will as of now, never show anything.
[17:31:26] <MattWelke[m]> So it's probably a better experience if the link is changed to jruby-base.
[17:32:38] <headius> fixed, site should update shortly
[17:33:06] <MattWelke[m]> tyvm
[18:01:33] <headius> time for more tea
[18:23:09] <headius> enebo: I will update jnr from 9.2 on down since 9.2.1.1 is already spun
[18:24:01] <enebo[m]> sure and it was branched before the last jnr update anyways
[18:24:13] <headius> that will mean merging 9.2.1.1 into 9.2 branch and from there to 9.3 etc so I will make sure the date fix is not clobbered in some weird way
[18:29:34] *** Joins: subbu (~subbu@user/subbu)
[18:48:12] <headius> enebo: https://github.com/flori/json/pull/488
[18:48:21] <headius> jnr releases are out, I'm going to start merging things around
[18:49:08] <enebo[m]> ok
[18:55:21] <enebo[m]> I can see where we go off the rails on prepend+include example
[18:55:42] <headius> so to speak
[18:55:49] <enebo[m]> we gather modules to include and when it gets to the prepended Enumerable it will say nah give me the real one
[18:56:01] <enebo[m]> the real one has no methods in it 
[18:56:23] <enebo[m]> so this should not have anything to do with JI yet I have not done the proper magic yet to repro outside of it
[18:57:23] <enebo[m]> gatherModule intentially skips prepended modules to get the real one
[18:57:48] <enebo[m]> So I will quickly look but it is possible we are just not setting the included wrapper to get the proper method table
[18:58:00] <headius> that would be a nice simple fix
[18:58:10] <enebo[m]> Ah maybeing it should be getMethodLocation().getMethodForWrite!
[18:58:45] <headius> ah yeah probably, since pre-3 we just want the module'
[18:58:53] <enebo[m]> That will be funny if so since I have been literalling getMethodLocation everywhere
[18:58:53] <headius> module's own method table
[18:59:08] <headius> we don't care about other things in its hierarchy because we gather those separately
[18:59:34] <enebo[m]> I think for 3 this is largely recording each of these wrappers updating them if anythign changes but those wrappers will get recorded in real module
[18:59:51] <enebo[m]> which may be what you are saying
[19:00:55] <headius> I was under the impression that they only have one wrapper but search the other hierarch when they get to it
[19:01:08] <headius> rather than copying everything and trying to keep them in sync
[19:01:14] <enebo[m]> I saw something which looked like it maintained a list
[19:01:19] <enebo[m]> It has been a while
[19:01:58] <enebo[m]> methods = origin.getOrigin().getMethodLocation().getMethodsForWrite();
[19:02:01] <enebo[m]> SHIP IT :)
[19:02:14] <enebo[m]> so methodlocation did not fix it directly
[19:02:34] <enebo[m]> I should see what else happens now
[19:02:34] <headius> if they are just tracking the original module better now then it will be a simpler change for us
[19:03:00] <headius> yeah that seems like too many things ðŸ˜€
[19:03:56] <enebo[m]> I am just happy I made some progress
[19:04:32] <enebo[m]> It is becoming clearer we are saying "include the real thing" but the real thing has gotten its methods replace with no methods because the prepended shim has them
[19:05:08] <headius> right
[19:05:25] <headius> usually that is the problem... still have code around not aware of prepend and not going to the new location for method table
[19:05:47] <enebo[m]> Seems like real thing getMethodLocation should point to that so that is the confusion
[19:05:58] <enebo[m]> yeah we still have a number of places but some are pretty primal where we are setting up the type
[19:06:26] <enebo[m]> In my mind the optimization of not doing getMethodLocation in those cases are not worth it because this is too fragile
[19:16:27] <enebo[m]> This fix breaks a single refinement spec which has a prepent
[19:17:27] <enebo[m]> but I will restep through this.  One thing I am starting to remember is one thing I "fixed" which did fix things was we were unconditionally passing realMod.getOrigin() into the wrapper instance
[19:17:36] <enebo[m]> I can still see it in deprecated cases
[19:18:00] <enebo[m]> we now pass in realMod.getDelegate() and that method is pretty unclear to me
[19:18:25] <enebo[m]> Seemingly we only call it for included modules wrappers to get the proper module
[19:18:46] <enebo[m]> So it is possible for prepends we maybe do something with getDelegate there as well
[19:19:10] <enebo[m]> One more time through the debugger....
[19:27:43] <enebo[m]> I was wrong.  getOrigin wasn't needed there at all
[19:28:04] <enebo[m]> Not sure what happened.  Maybe the debugger did not pick up the change when I restarted
[19:28:58] <enebo[m]> The fix actually makes sense but now I have to hope that refinment error dropped by removing the getOrigin
[19:29:46] <headius> yeah I didn't think getOrigin was needed either
[19:30:06] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Quit: You have been kicked for being idle)
[19:30:20] <enebo[m]> It can only make sense if the included wrapper receives an origin that is not the actual module
[19:30:47] <enebo[m]> but we call realModule.getDelegate() which seems to only be different is we are including a module wrapper
[19:31:02] <enebo[m]> So I am wondering if getDelegate actually does anything for this
[19:31:42] <headius> these names are so confusing
[19:31:58] <enebo[m]> yeah
[19:32:57] <enebo[m]> I did add a nice comment for getOrigin
[19:33:33] <enebo[m]> I believe I also removed all usages of getNonIncludedClass too
[19:33:40] <enebo[m]> but getDelegate :)
[19:38:10] <enebo[m]> This fix is obvious after the fact but it might make us realize a deficiency in our refinement impl
[19:39:50] <headius> git st
[19:40:05] <headius> blah
[19:40:12] <enebo[m]> <some git output>
[19:40:21] <headius> I am using an external monitor lately so I keep getting confused
[19:40:32] <enebo[m]> That was my 'b' to you yesterday...I did C-X b
[19:40:51] <enebo[m]> Luckily pidgin has no binding for control-x
[19:40:51] <headius> oh hah
[19:41:47] <enebo[m]> So this fixes the problem but introduces another where a refined method is called instead of a prepended one
[19:42:01] <headius> hmm
[19:42:20] <headius> pull one thread and another comes unraveled
[19:42:20] <enebo[m]> which I guess would mean getOrigin on something refined maybe is not getting the prepended stuff but the refined stuff
[19:42:33] <enebo[m]> err sorry not origin
[19:42:38] <enebo[m]> getMethodLocation
[19:43:21] <enebo[m]> I am going to start a branch on this since this is the right fix as it stands
[19:43:53] <enebo[m]> We 100% were just looking at the prepend removed methods version of the module
[19:44:29] <headius> jnr is in the pipeline now: https://github.com/jruby/jruby/pull/6953
[19:44:43] <headius> 9.2.20.1 is merged to jruby-9.2 also
[19:46:16] <enebo[m]> let's finish that now
[19:46:26] <enebo[m]> I need to update the dates on the website before I push
[19:46:32] <headius> its merged and I will merge 9.2 to 9.3 etc now
[19:46:41] <headius> and make sure 9.2 java changes for interruptibility don't land on 9.3
[19:50:07] <enebo[m]> I am going to push site
[19:50:08] <headius> I had to do a squashed merge to avoid the java changes, but there's very few commits merging over
[19:50:19] <headius> for 9.2.20.1 yeah?
[19:50:32] <headius> and we still need to figure out refinement thing for 9.3.2?
[19:50:40] <enebo[m]> yeah it was pushed yesterday except announcements
[19:50:57] <enebo[m]> yeah 9.3.2 should have this fixed
[19:51:10] <enebo[m]> And it would be nice if we didn't fix one thing to regress another
[19:51:25] <headius> ok everything is merged and pushed up to 9.3
[19:51:25] <enebo[m]> so I am hoping to figure this out today and we can talk tomorrow on how we feel 
[19:51:40] <headius> I will wait on merging to master until we have 9.3.2 ready
[19:51:56] <enebo[m]> The regression fixed feels worse than what broke (refinements with a prepend in it)
[19:52:17] <headius> should I not be worried that we'll have the date fix out for 9.2 but not 9.3?
[19:52:31] <enebo[m]> err that was ambiguous...what I just fixed is more important than what it just broke
[19:52:39] <headius> I just keep feeling like it is saying we patched this security issue in 9.2.x but you have to wait until tomorrow for the 9.3.x fix
[19:52:42] <enebo[m]> nope
[19:52:43] <headius> I agree with that
[19:53:01] <enebo[m]> We will fix it soon but people already can know about the CVE
[19:53:05] <headius> the prepend enumerable thing has broken a lot of people
[19:53:24] <enebo[m]> so they are no worse off but if we release tomorrow it will be fine
[19:53:36] <enebo[m]> I think most people are able to judge how important the date thing is too
[19:54:11] <enebo[m]> but my position is we are already vuln in both so fixing one is better than holding off to get both out at same time
[19:54:58] <enebo[m]> If we cannot figure out this regression by tomorrow we can also just put out a security fix too but I think this regression will affect more people than the CVE
[19:55:20] <headius> yeah
[19:56:32] <enebo[m]> HAHA I was like wtf...how could our site have changed since I pulled it yesterday but I see you fixed the javadocs
[19:56:47] <enebo[m]> My first reaction was who the hell is hacking our site
[19:57:47] <headius> oh heh yeah that was just me
[19:57:50] <enebo[m]> headius: will you tweet + socials + docker + rbenv
[19:58:09] <enebo[m]> I am emailing and will github release and notify release people
[19:58:11] <headius> yeah you have my notes on the security release?
[19:58:17] <enebo[m]> Site is live
[19:58:35] <enebo[m]> https://www.jruby.org/2021/12/01/jruby-9-2-20-1
[19:58:49] <headius> ok I am prepping the socials
[20:04:00] <enebo[m]> interesting no failures in test:mri with that patch just a single one in ruby/spec
[20:07:12] <headius> https://www.reddit.com/r/ruby/comments/r6iwjt/jruby_92201_released_to_fix_redos_date_parsing/
[20:07:19] <headius> https://twitter.com/jruby/status/1466082470806396935
[20:07:51] <headius> https://www.linkedin.com/feed/update/urn:li:activity:6871849362465546241
[20:08:10] <headius> https://www.facebook.com/JRubyFans/posts/10166006161055578
[20:08:13] <headius> like and subscribe
[20:09:26] <enebo[m]> smack and favorite that shit
[20:09:27] <enebo[m]> release out
[20:09:29] <enebo[m]> on github
[20:11:42] <headius> https://github.com/docker-library/official-images/pull/11424
[20:14:02] <headius> enebo: have you been updating rvm?
[20:14:14] <headius> I don't remember doing that last release but maybe we added this task since then
[20:15:53] <enebo[m]> no
[20:16:43] <enebo[m]> ahorek[m]:  https://github.com/rvm/rvm/pull/5145
[20:16:48] <enebo[m]> HEH 
[20:21:15] <headius> aha
[20:22:27] <headius> well I can add that to my list since I'm updating all the other crap
[20:23:53] <headius> bleh of course rvm has no automated way to add a version
[20:27:17] <headius> and it wants sha512 we don't publish
[20:30:38] <headius> ok I think that's everything
[20:31:20] <enebo[m]> yay
[20:31:28] <headius> ok 9.3.2 next
[20:32:07] <enebo[m]> yeah
[20:32:19] <enebo[m]> I will make a branch and push my lone fix
[20:33:30] <headius> ok
[20:33:46] <headius> I'm not sure how critical this refinement regression is but we should try
[20:37:30] <enebo[m]> https://github.com/jruby/jruby/pull/6954
[20:37:49] <enebo[m]> yeah I am ok I think with switching the regressions but I would like to spend a few hours looking at it
[20:38:02] <enebo[m]> well hopefully less but that is my time box
[20:38:17] <headius> it's possible the failed spec was fixed by the broken change
[20:38:18] <enebo[m]> I think prepending in an refinement must be uncommon?
[20:38:30] <headius> well I sure hope so
[20:38:46] <headius> your PR is not based on 9l3
[20:38:48] <headius> 9.3
[20:38:49] <enebo[m]> so yeah I am not concerned about shipping it but it would be nice to figure out why
[20:39:01] <enebo[m]> ah yeah I did not toggle that
[20:39:04] <enebo[m]> I will change it
[20:40:11] <headius> huh how did you create this PR? It has your commit text indented like a quote
[20:40:44] <headius> docker PR failed and doesn't look like my fault
[20:40:48] <headius> error fetching some busybox image
[20:40:51] <enebo[m]> I opened it using the URL github provides in the response
[20:41:11] <enebo[m]> then I copy/pasted my commit message but I realize what happened
[20:41:17] <enebo[m]> it is indented
[20:41:21] <headius> yeah
[20:41:22] <enebo[m]> I was doing this quickly
[20:41:29] <headius> ok just was curious
[20:41:38] <headius> I make PRs the same way
[20:42:31] <enebo[m]> I must usually copy the comment from the PR itself?  I am a little confused because I do this same pattern quite a bit
[20:42:47] <enebo[m]> Maybe I manually correct the indentation but I don't recall ever doing that
[20:42:53] <headius> what is the spec that fails?
[20:43:13] <enebo[m]> /home/enebo/work/jruby/spec/ruby/core/module/refine_spec.rb:319:in `block in <main>'
[20:43:32] <enebo[m]> as far as descriptions goes this is extremely straight-forward
[20:43:44] <enebo[m]> the prepend overrides the refined version of a method
[20:44:31] <enebo[m]> We are just one getMethodLocation away
[20:44:47] <headius> ok nothing has changed in these tags recently
[20:46:46] <enebo[m]> using seemingly copies that refinement blobber and we end up ignoring the prepend so getMethodLocation is now not finding the prependedmodule first
[20:46:51] <enebo[m]> or ever
[20:47:08] <headius> yeah I am looking into Module#using
[20:47:27] <enebo[m]> another extra early lunch(tm)
[20:47:31] <enebo[m]> should be pretty quick though
[20:51:53] <headius> I have your branch and will try some things
[20:52:09] <headius> the refinement logic uses getOrigin where it might want to be using getDelegate, unsure if that's it though
[21:06:42] <headius> ah I see why it breaks and it conflicts with the fix
[21:06:58] <headius> by getting the method location in the IncludeModule constructor, we walk away from the prepended bottom class
[21:07:05] <headius> so the fix is the break
[21:07:44] <headius> er, I mean in IncludedModuleWrapper constructor
[21:08:36] <headius> hmmm
[21:08:46] <headius> but this should be getting the module that was prepended, not the prepend wrapper
[21:13:20] <headius> enebo: they do not appear to dig out method location in rb_include_class_new so maybe we do need to move it outside of the IncludedModuleWrapper constructor
[21:22:58] <headius> I have an alternative fix
[21:23:40] <headius> eh you did not link bug in your commit message
[21:26:18] <headius> I'm not sure which example to use to retest this but here's the diff
[21:26:27] <enebo[m]> I am back now
[21:26:35] <headius> https://gist.github.com/headius/75b8f3cc4f0efdf7aff7a5e09481be81
[21:26:57] <headius> I moved the method location call out to the place where we finally do the include/prepend of the module, rather than in the constructor for the wrapper
[21:27:05] <headius> I think it should still fix original issue without breaking the refinement
[21:28:58] <enebo[m]> hmm
[21:29:50] <enebo[m]> This ends up changing origin in the wrappen and adds this wrapper to the methodlocation and not the original  module
[21:31:35] <enebo[m]> https://gist.github.com/enebo/4e327a1d041ac80b32536798a635c625
[21:31:43] <enebo[m]> This is the script I was using to test
[21:32:08] <headius> what is the expected output
[21:32:16] <enebo[m]> I guess [""]
[21:32:31] <enebo[m]> I took this from the issue report but it was nomethoderror
[21:32:58] <headius> $ jruby blah.rb... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/3c3b2ffbc1126e1be663cc2a0020b3b5527dc24a)
[21:33:56] *** Joins: BrianHoffman[m] (~isthisnam@2001:470:69fc:105::1:4351)
[21:33:57] <headius> I see what you are saying about origin but wondering if maybe this is actually correct
[21:34:17] <headius> with your original change it was wrapping the origin but holding a reference to the method location
[21:34:41] <headius> so invalidating the origin would invalidate this wrapper even though it is not where we got the methods from
[21:34:47] <enebo[m]> the question is when you call getOrigin what should it give you
[21:34:59] <enebo[m]> with my previous work and that fix it would be Enumerable
[21:35:13] <enebo[m]> I am not sure what else actually expects that
[21:35:30] <enebo[m]> That is not to say it is not the right fix I just don't know
[21:35:31] <headius> all module specs pass with my change but I don't know if that gives us confidence
[21:35:45] <headius> I can push mine as a competing PR and see how CI looks
[21:36:23] <enebo[m]> yeah why don't you.  Let's make sure it passes everything
[21:36:29] <headius> ok
[21:38:17] <enebo[m]> hmm how do you restart once you changed branch it is based on?
[21:38:18] <enebo[m]> for actions?
[21:38:28] <headius> not sure you can
[21:38:41] <headius> it is a glitch and annoying
[21:39:46] <headius> you could git commit --amend and then git push -f to get a new hash
[21:40:04] <headius> https://github.com/jruby/jruby/pull/6955
[21:40:35] <enebo[m]> perfect...restarted
[21:48:46] <enebo[m]> https://gist.github.com/enebo/ade39f1dbad8c8d30a56522519d9afd6
[21:48:54] <enebo[m]> I extracted the spec
[21:54:06] <headius> yeah wfm
[21:54:09] <enebo[m]> yeah
[21:56:19] <enebo[m]> I half wonder if we are trying to do two things here is includedModuleWrapper
[21:57:33] <headius> yeah that's why it seemed more right to move it out of there
[21:57:42] <enebo[m]> with your patch in the include we will get getMethodLocation and use it as the origin which will be a non-origin wrapper but in the proceedWithInclude it is still passing in the origin
[21:58:17] <headius> hm
[21:58:20] <enebo[m]> So I think passing in a non-origin here is wrong but only because it means we are not dealing with the actual module with this change and that is more confusing to me
[21:58:25] <headius> we could pass both in
[21:58:38] <headius> but I am throwing darts here
[21:58:53] <enebo[m]> yeah but if we setOrigin to be the real module will your patch continue to work?
[21:59:59] <enebo[m]> err wait...I need to actually apply this.
[22:00:08] <headius> setOrigin where?
[22:00:15] <enebo[m]> I thought I knew the two places but I realize now the usage of this wrapper is wider
[22:00:26] <enebo[m]> it is in the superclass of IncludeModuleWrapper
[22:00:43] <enebo[m]> we pass origin down from its constructor
[22:00:57] <headius> hmm yeah I am not sure what origin is used for from the wrapper
[22:01:53] <headius> only failure on my PR looks like a flaky spec
[22:01:55] <headius> signal-related
[22:04:17] <enebo[m]> You fix only works I think because you change origin
[22:05:07] <enebo[m]> Or actually the second one is that all the refinement code also uses this and getMethodLocation in those places might get screwed up
[22:05:38] <enebo[m]> I would be curious if we ever see origin not be the real module without the patch
[22:06:11] <enebo[m]> I think my fear is this breaks the mental model I have for what origin is.
[22:06:25] <headius> my fix works because it does not get the method location from the prepended refinement
[22:07:05] <enebo[m]> If so then we could pass origin and get method location it needs to go right before we make the wrapper?
[22:07:08] <headius> when we pass in a refinement module that has a prepend to this wrapper it needs to use literally that refinement module or we get that failure
[22:07:20] <headius> so I figured the include wrapper should not be doing the digging itself, it should just wrap what is is given
[22:07:38] <headius> include should dig because it needs to just get the original method table for the module since we gather the prepends and includes separately
[22:07:42] <headius> so I moved it out to there
[22:07:55] <headius> but I have no explanation for how origin should work
[22:08:12] <headius> what about MRI?
[22:08:25] <enebo[m]> yeah origin is my hangup because whatever calls getOrigin will get a wrapper instead of the real thing
[22:08:34] <headius> when they include, do they use the actual module object or the prepend redirect module as the origin?
[22:08:41] <enebo[m]> we could pass in them separate and see if anything breaks
[22:08:46] <headius> not a wrapper
[22:09:00] <headius> oh well yeah a wrapper
[22:09:08] <headius> but it is the wrapper used to house the relocated method table
[22:09:14] <enebo[m]> include will skip prepend roots and use the real thing.  include itself starts with the real thing
[22:09:34] <enebo[m]> So origin seems like it is the real module 
[22:09:38] <headius> so yeah I am leaning toward agreeing that the origin should remain the module object and not the relocated wrapper but I am guessing
[22:09:54] <enebo[m]> but your suggestion to pass in the methods works for me if things pass
[22:10:09] <enebo[m]> That is the essence of the original fix
[22:10:31] <enebo[m]> and it is done in the constructor with my fix but if it is passed in nothing changes except that...just where it calls it changes
[22:10:57] <enebo[m]> I am very confident about getMethodLocation fixing the prepend issue
[22:11:18] <enebo[m]> So I will just add a parameter for methods to constructor but still pass in origin
[22:11:45] <headius> getMethodLocation does fix prepend issue in both patches
[22:12:23] <enebo[m]> yeah
[22:12:29] <enebo[m]> so you have a second fix here
[22:12:44] <enebo[m]> the raw getMethods for adding the refinements
[22:13:03] <headius> yeah it seems like it was using the wrong table
[22:13:29] <enebo[m]> That will literally be wrapper.getMethods()
[22:13:34] <enebo[m]> Or it could be right?
[22:13:47] <enebo[m]> since we are passing that in
[22:13:58] <headius> what do you mean
[22:14:33] <enebo[m]> the pr is methodLocation.getMethods() but we pass methodLocation in so the included wrappers methods is the same thing
[22:15:03] <enebo[m]> then the ifRefinement() block is two statements looking at or modifying the wrapper
[22:15:05] <headius> so you think we should pass the original origin but add the methods when calling IncludedModuleWrapper constructor>
[22:15:31] <enebo[m]> I think so.
[22:15:44] <headius> hehe
[22:15:53] <enebo[m]> Here is one fear I have with my original PR and also with this second one
[22:16:21] <enebo[m]> We have refinments using this modulewrapper all over and it is likely passing the real origin in
[22:16:41] <enebo[m]> I think just from a delta of changed behavior keep origin be the same as it was is a good idea
[22:16:55] <headius> I'm looking at the CRuby include logic for a sec
[22:16:59] <enebo[m]> It also has the benefit that it always seems to really be the origin (or original module)
[22:17:46] <enebo[m]> Adding a second constructor for origin + methodLocation and only using it in this one place is maybe more of a bandaid than a proper fix (who knows?) but it does limit our risk
[22:20:25] <headius> hmm
[22:20:57] <enebo[m]> I will commit to my branch what I mean
[22:21:00] <headius> yeah ok
[22:21:06] <enebo[m]> but look at constructors to includedmodulewrapper
[22:21:09] <headius> the C code is not helping me
[22:21:15] <headius> yeah I know what you mean to do
[22:21:18] <enebo[m]> we use is a number of places for refinements
[22:21:21] <enebo[m]> ok
[22:21:30] <enebo[m]> who knwos this may break something?
[22:21:33] <headius> I am just trying to suss out what MRI does
[22:22:07] <headius> they get origin of the module passed into include
[22:22:27] <enebo[m]> yeah and my belief is that means Enumerable 
[22:22:38] <headius> that goes into include_modules_at and then they get the methods directly from it
[22:22:40] <enebo[m]> but maybe that is why we have problems :)
[22:22:47] <headius> which would not be the methodLocation
[22:22:59] <enebo[m]> nope
[22:24:20] <headius>     RCLASS_M_TBL(OBJ_WB_UNPROTECT(klass)) =
[22:24:20] <headius>       RCLASS_M_TBL(OBJ_WB_UNPROTECT(RCLASS_ORIGIN(module))); /* TODO: unprotected? */
[22:24:36] <headius> that's where they set the method table of the wrapper
[22:24:50] <headius> I don't think our origin means the same as theirs
[22:25:38] <headius> I think their origin is our methodLocation
[22:25:49] <headius> that would make this make sense
[22:26:12] <enebo[m]> heh
[22:26:36] <enebo[m]> yeah I feel like we diverged at some level but I am not sure it is bad or not
[22:26:45] <headius> otherwise I do not see how they are getting the relocated methods
[22:26:47] <enebo[m]> I would like our definitions to be consistent
[22:26:54] <headius> if e.g. you have prepended something into Enumerable
[22:27:02] <enebo[m]> maybe with them but definitely in how we use them
[22:27:16] <enebo[m]> you looking at what version of MRI?
[22:27:24] <headius> 2.6
[22:28:08] <headius> hell
[22:28:14] <headius> yes our origin is not the same
[22:28:32] <enebo[m]> https://github.com/jruby/jruby/pull/6954/files
[22:28:57] <headius> our "origin" name goes back to 2014 or earlier and refers to the module a wrapper points at
[22:29:08] <headius> IncludedModuleWrapper.getDelegate returns origin
[22:30:59] <enebo[m]> getOrigin also returns origin but I am wondering if they are both always the same
[22:31:23] <enebo[m]> in my last fixes for prepend I removed getNonIncludedClass for getOrigin since they were 100% always the same value
[22:32:18] <enebo[m]> but things went from getDelegate().getNonIncludedCModule -> getDelegate().getOrigin()
[22:32:19] <enebo[m]> I would have killed origin or delegate had they always agreed...or at least I feel I would have
[22:32:35] <headius> there is also this in the MRI loop walking all modules to include:
[22:32:36] <headius> if (RCLASS_ORIGIN(module) != module)
[22:32:36] <headius>     goto skip;
[22:33:00] <headius> I believe this will skip when it sees include wrappers so it ends up walking up to the method location as a result
[22:33:15] <headius> because that one has the right method table
[22:33:20] <enebo[m]> yeah we do have something like that almost...we only skip if it is a prepend root (e.g. prependedmodule)
[22:33:23] <headius> using the definition I think MRI uses
[22:33:45] <headius> try pushing your fix?
[22:33:59] <enebo[m]> I submitted the link above
[22:34:10] <headius> digging out the methods in the constructor just breaks the refinement thing because it doesn't see prepends then
[22:34:28] <headius> so I think moving it out is better and we can debate origin without changing it in this release
[22:34:43] <headius> we will probably find some tagged specs that break because of origin
[22:34:47] <headius> ok
[22:34:53] <enebo[m]> we do have delegate checks and not origin checks in our doIncludeModule logic which does the skip
[22:36:43] <enebo[m]> I would not be surprised if our logic was approximately the same as their in 2014
[22:37:16] <headius> I'm fine going with your patch if it passes everything , since it reduces the risk changing origin
[22:37:29] <enebo[m]> Am I crazy or is the GHA UI links into and out of actions stuff impossible to find
[22:38:01] <headius> You mean the details link in the list of jobs?
[22:38:17] <enebo[m]> I keep searchign around with my mouse trying to find where I can see the whole list of items vs just one
[22:38:26] <enebo[m]> if I go up to Actions it is easy to get to that point
[22:38:41] <enebo[m]> if I am in actions and I want to go to the commit which kicked this off where is that?
[22:38:47] <enebo[m]> Or the PR maybe
[22:38:49] <headius> Oh yeah I'm not sure if there's a way to navigate from the pull request to the overall workflow
[22:39:09] <headius> Not sure about the other way around either
[22:39:24] <headius> It is not as obvious as with Travis
[22:39:35] <enebo[m]> I think CI will be like buld tools...always maligned
[22:40:09] <headius> So I think we agreed that we will not be releasing 9.3.2 today, right ?
[22:40:29] <enebo[m]> Well I am happy to do it in the morning but it looks like this is green
[22:40:43] <enebo[m]> waiting on spec:ruby:slow
[22:40:57] <headius> Have you run your verifications on this yet?
[22:41:20] <headius> I'm fine releasing either day but it's already after 1:00
[22:41:33] <enebo[m]> I put a FIXME in that commit saynig we should evaluate the original constructors that refinments uses to make sure we could maybe always just do the same thing
[22:41:48] <headius> Ok
[22:42:03] <enebo[m]> yeah I will spin bits this afternoon and kick the tires
[22:42:03] <headius> I am remembering adding a comment saying that origin is not the same as in c Ruby but I can't find it now
[22:42:04] <enebo[m]> If this breaks Rails we will have some time to figure that out
[22:42:17] <headius> It may have just been in a commit that fixed something related but I know our names are not referring to the same thing somewhere in here
[22:42:24] <enebo[m]> tbh I don't feel great about any changes to refinements
[22:42:47] <enebo[m]> I do think prepend fix is correct though.
[22:42:48] <headius> Yeah this doesn't change anything in refinements, it just relocates your fix so that it doesn't interfere with the refinement seeing the pre-pended layer
[22:43:13] <headius> So it localizes your fix to just the include
[22:43:15] <enebo[m]> you will see I do wrapper.getMethods there since it will be same value
[22:43:33] <headius> I did notice that
[22:43:46] <headius> Hopefully that will always be the case ðŸ˜€
[22:44:12] <enebo[m]> well it is an object we just made but I suppose in 3-4 years we may add another one in between those two points :)
[22:44:27] <enebo[m]> or maybe do serious magic in the constructor
[22:44:38] <headius> I blame Ruby for having an overcomplicated class system
[22:44:49] <enebo[m]> I do hope the 3.0 work clarifies this a bit more in my mind
[22:45:19] <enebo[m]> having to update existing uses to remove the temporal nature will probably require staring at this crud more
[22:45:20] <headius> Yeah we still need to get on that.  I don't think our timeline will be too far behind but 9.4 is not going to be ready by the end of the year
[22:45:41] <enebo[m]> no.  and I am planning on next week off still
[22:45:47] <enebo[m]> winter break will happen as well
[22:45:47] <headius> Core classes and standard library should be solid but we have a number of language things to iron out
[22:46:05] <enebo[m]> with that said we are ~200 F/E on each suite and that is mostly overlap
[22:46:12] <headius> And we can't really finish greening up to suites until we fix the language stuff
[22:46:21] <enebo[m]> 40 of those are Time#{ceil,floor} not existing
[22:46:30] <headius> Yeah that's a weird one
[22:46:45] <enebo[m]> like 75% are not much more than labor...like the new warning subsystem needs to switch on category
[22:47:01] <enebo[m]> StrScanner needs to work with strings/regexps
[22:47:26] <headius> I still have a few extensions that need to move into MRI gems
[22:47:33] <headius> But we are getting there
[22:47:38] <enebo[m]> which is probably more work than the other two but you see what I mean.  We have a lot less work other than fixing kwarg arg bindings AND this prepend/include stuff
[22:47:52] <enebo[m]> Once those two things are done we really will be just about there
[22:48:06] <headius> I will try to revisit my keyword argument stuff the rest of this week so it stays fresh in my head but I think it's on the right track
[22:48:32] <enebo[m]> yeah once that is working I think we will see the weird binding bugs disappear
[22:48:33] <headius> The way we mark that a hash is from keywords might be a little cumbersome right now
[22:49:13] <enebo[m]> I tried a stab at Fiber#raise and that got rid of 15 or 18 or so fails but I have no confidence because after the raise the fiber was still usable :)
[22:50:04] <enebo[m]> That literally took about 5 minutes but I am pretty sure it is partially wrong because I just called Thread#raise internally :)
[22:50:08] <headius> They are moving more and more towards a fiber behaving like a thread
[22:50:42] <headius> Okay I need to step away for a while
[22:50:50] <enebo[m]> ok
[22:50:59] <headius> Was plan on release tomorrow and you can do whatever verification you need
[22:51:12] <headius> Let's plan
[22:51:39] <headius> jnr update and everything else is merged into 9.3 9.3
[22:53:08] <enebo[m]> yeah
[22:53:27] <enebo[m]> if things look good this afternoon let's plan on releasing morningish
[22:58:15] <enebo[m]> headius: when you are next on perhaps look at reducing the targetted 9.3 issues.  We can punt for 9.3.3 but we seem to punt a lot without fixing them
