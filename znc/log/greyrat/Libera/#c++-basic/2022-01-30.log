[00:19:12] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:00] *** Quits: magla (~gelignite@55d45b98.access.ecotel.net) (Read error: Connection reset by peer)
[00:33:02] *** Joins: geli (~gelignite@55d45b98.access.ecotel.net)
[01:09:06] *** Joins: seninha (~seninha@user/seninha)
[01:09:11] *** Joins: markong (~kvirc@213.146.188.203)
[01:25:02] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:25:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[01:25:39] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:29:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:40:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:45:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[02:02:24] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:40f4:5e94:181e:e4a)
[02:02:24] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:40f4:5e94:181e:e4a) (Changing host)
[02:02:24] *** Joins: RoKenn (~RoKenn@user/rokenn)
[02:05:56] *** Joins: leonarth (~leonarth@user/leonarth)
[02:09:48] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:12:25] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[02:17:06] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:17:30] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:17:45] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[03:23:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:44:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[03:45:43] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:47:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[03:51:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:52:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:57:25] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[03:58:38] *** Quits: sigma_ (~sigma@164.215.248.82) (Ping timeout: 250 seconds)
[04:20:22] *** Quits: geli (~gelignite@55d45b98.access.ecotel.net) (Read error: Connection reset by peer)
[04:20:36] *** Joins: magla (~gelignite@55d45b98.access.ecotel.net)
[04:21:08] *** Quits: magla (~gelignite@55d45b98.access.ecotel.net) (Remote host closed the connection)
[04:24:07] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[04:27:26] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 245 seconds)
[04:36:41] *** Quits: DSpider (~DSpider@82.79.237.30) (Quit: Leaving)
[05:11:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[05:32:49] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[05:36:37] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[05:52:54] *** Quits: therufuser (~therufuse@p5b000a17.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:54:27] *** Joins: therufuser (~therufuse@p5b02e60a.dip0.t-ipconnect.de)
[06:03:39] *** Joins: Xardas (~Xardas@149.233.51.127)
[06:15:33] *** Joins: epony (epony@user/epony)
[06:42:06] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[06:42:52] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:45:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[07:09:18] *** Quits: therufuser (~therufuse@p5b02e60a.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:24:42] *** Joins: ferdna (~ferdna@user/ferdna)
[07:27:13] *** Quits: AmR (~AmREiSa@156.207.146.251) (Quit: Konversation terminated!)
[07:43:42] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[07:57:43] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[07:57:43] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[08:03:59] *** Quits: MetaNova (zero-one@znc/supporter/metanova) (Quit: quit)
[08:06:47] *** Joins: MetaNova (zero-one@znc/supporter/metanova)
[08:20:35] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Client limit exceeded: 20000)
[08:22:55] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[08:27:24] *** Joins: stanrifkin (~stanrifki@p200300dbcf45290054d64dd43fecc45e.dip0.t-ipconnect.de)
[08:28:10] *** Quits: jsbach_ (~jsbach@2a01:c22:3497:1a00:a44e:623a:c259:ecb7) (Ping timeout: 250 seconds)
[08:29:18] <stanrifkin> When i introduce a class with a parameterized constructor. Exactly why is then there no default constructor made? Has it to do with default argument values? Like MyClass(int a = 8) {} ?
[08:41:39] *** Joins: jsbach_ (~jsbach@2a01:c23:6421:f700:6d73:7db3:c97a:9054)
[08:55:38] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:24:45] <Alipha> stanrifkin: if you define any constructor, then it's assumed that your class construction needs are not simple and the default ctor default behavior won't suffice. However, note that if you define a default value for all your parameters, then `MyClass(int a = 8) {}` is actually a default constructor
[09:24:50] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[09:31:19] <stanrifkin> Alipha: thank you. I thought there is more into it.
[10:13:08] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 252 seconds)
[10:23:04] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:31:43] *** Quits: stanrifkin (~stanrifki@p200300dbcf45290054d64dd43fecc45e.dip0.t-ipconnect.de) (Quit: Leaving)
[11:11:28] *** Joins: sigma_ (~sigma@86.57.90.221)
[11:38:03] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[12:05:12] *** Joins: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[12:07:25] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Ping timeout: 250 seconds)
[12:32:34] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 250 seconds)
[12:34:08] *** Joins: bebyx (~Thunderbi@user/bebyx)
[12:45:56] *** Quits: joilerv_ (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:52:15] *** Quits: sigma_ (~sigma@86.57.90.221) (Quit: Konversation terminated!)
[13:21:46] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:65d6)
[14:21:38] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[14:29:28] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:49:37] *** Joins: magla (~gelignite@55d4f325.access.ecotel.net)
[15:00:14] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[15:08:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:09:28] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[15:14:16] *** Joins: therufuser (~therufuse@p5b02e60a.dip0.t-ipconnect.de)
[15:17:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[15:39:20] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Quit: Leaving)
[15:40:23] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[15:42:24] *** Joins: lsdage (~lsdage@185.16.81.135)
[16:12:34] *** Joins: markong (~kvirc@213.146.188.203)
[16:19:42] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:28:10] *** Joins: joilerv (~joilerv@135.129.250.144)
[16:31:49] *** Joins: cytokine_storm (~user@user/cytokine-storm/x-1083107)
[16:55:04] *** Quits: joilerv (~joilerv@135.129.250.144) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:21:00] *** Joins: AmR (~AmREiSa@156.207.146.251)
[17:47:06] *** Quits: lsdage (~lsdage@185.16.81.135) (Ping timeout: 260 seconds)
[17:47:20] *** Joins: lsdage (~lsdage@185.16.81.135)
[18:50:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[18:52:39] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Client Quit)
[19:05:45] *** Quits: lsdage (~lsdage@185.16.81.135) (Quit: leaving)
[19:52:42] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[20:01:33] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:c1ca:91df:a271:86c)
[20:01:33] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:c1ca:91df:a271:86c) (Changing host)
[20:01:33] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:06:23] *** Quits: jbalint (~jbalint@097-090-242-068.res.spectrum.com) (Quit: Bye!)
[20:06:34] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[20:15:27] *** Quits: magla (~gelignite@55d4f325.access.ecotel.net) (Quit: Stay safe!)
[20:43:12] *** Joins: argonautx (~argonautx@i5E867211.versanet.de)
[20:57:00] *** Joins: dgcampea (~dgc@user/dgcampea)
[20:59:38] <dgcampea> is 'if ( somefunc(&someint) && someint > 0 )' valid code? somefunc() changes the value of someint here.
[20:59:55] *** Quits: FuzzyBottom (~FuzzyBott@207.6.38.95) (Remote host closed the connection)
[21:01:33] <dgcampea> the line above assumes that somefuc() gets evaluated first and only after the evaluation completes will it do an 'and' check
[21:02:52] <dgcampea> though I'm not sure if that's actually the case in general
[21:10:11] *** Joins: Uswald (~leandre@2a01cb040075f900998baf519a3fa6fa.ipv6.abo.wanadoo.fr)
[21:10:11] *** Quits: Uswald (~leandre@2a01cb040075f900998baf519a3fa6fa.ipv6.abo.wanadoo.fr) (Changing host)
[21:10:11] *** Joins: Uswald (~leandre@user/Uswald)
[21:10:40] *** Quits: Uswald (~leandre@user/Uswald) (Client Quit)
[21:14:27] *** Joins: magla (~gelignite@55d4f325.access.ecotel.net)
[21:22:24] <Alipha> dgcampea: yes, && and || are "short-circuit operators", so everything on the left is evaluated before anything on the right. or the right is not evaluated all if not needed, hence the term "short-circuit".
[21:23:52] <Alipha> If the left of && is false, then there's no reason to evaluate the right--and the right will not be evaluated. Likewise if the left of || is true.
[21:24:41] <Alipha> *is not evaluated AT all if not needed--forgot a word there.
[21:34:37] <dgcampea> thanks
[22:00:12] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[22:20:54] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[22:24:21] *** Quits: therufuser (~therufuse@p5b02e60a.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:24:23] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: foo)
[22:27:43] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[22:27:43] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[22:27:43] *** Joins: merit (~merit@2001:470:69fc:105::5ae)
[22:28:28] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[22:46:59] *** Quits: merit (~merit@2001:470:69fc:105::5ae) (Quit: Client limit exceeded: 20000)
[22:47:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[22:56:34] *** Quits: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8) (Quit: Client limit exceeded: 20000)
[22:59:17] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (Remote host closed the connection)
[22:59:43] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Quit: Client limit exceeded: 20000)
[23:01:33] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[23:02:31] *** Joins: jbis (~jbis@pool-108-6-219-196.nycmny.fios.verizon.net)
[23:03:22] <jbis> Can anyone give me a single good reason why enums don't work like namespaced consts and take the type you give them?
[23:03:25] *** Joins: andrea[m] (~andreanit@2001:470:69fc:105::1:28a8)
[23:03:25] *** Joins: merit (~merit@2001:470:69fc:105::5ae)
[23:03:25] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[23:23:47] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[23:28:58] <cbreak> jbis: because enums have their own type
[23:29:15] <cbreak> the enum values in an enum belong together
[23:29:39] <cbreak> c++ will do type checking, and it will use the information in some situations, like warning about not having handled all enum values in a switch statement
[23:29:47] <jbis> Not once compiled.
[23:30:31] <jbis> What I mean is, if I set the enum values to chars, why doesn't it make the enum values a char at compile time 
[23:30:33] <cbreak> type checking obviously only happens at compile time
[23:30:58] <cbreak> because an enum definition defines a type
[23:31:03] <cbreak> this allows type checking
[23:31:10] <cbreak> it prevents mistakes
[23:31:19] <cbreak> enum class gives even more strict type checking
[23:31:31] <jbis> https://en.cppreference.com/w/cpp/language/enum
[23:32:04] <jbis> > int, unsigned int, long, unsigned long, long long, or unsigned long long
[23:32:07] <cbreak> all values in an enum have the type of the enum itself
[23:32:10] <jbis> What if I want to use a char?
[23:32:18] <jbis> or uint8 etc.
[23:32:29] <cbreak> enums always have the type of the enum, you can't change that
[23:32:36] <cbreak> you can chose the underlying type if you want
[23:32:47] <jbis> Yes. I want to choose the underlying type
[23:32:48] <cbreak> but you can't change the fact that enums create a new type
[23:32:59] <Alipha> << sizeof(MyEnum); enum MyEnum : char { FOO };
[23:33:00] <geordi> 1
[23:33:01] <cbreak> enum foo : uint8_t { blah }
[23:33:02] <cbreak> easy
[23:33:10] <Alipha> << sizeof(MyEnum); enum MyEnum : int { FOO };
[23:33:11] <geordi> 4
[23:33:33] <jbis> cbreak I believe that is a compiler feature
[23:33:38] <Alipha> Does the underlying type have any affect other than the sizeof the type?
[23:33:46] <cbreak> jbis: it's a feature of c++
[23:33:54] <cbreak> compilers that support c++11 support this.
[23:33:59] <jbis> ok then im mistaken
[23:34:00] <jbis> thank you
[23:34:22] <cbreak> Alipha: the signedness of it I'd say
[23:34:30] <cbreak> alignment requirements probably too
[23:34:57] <cbreak> << TYPE(x); enum X : char { x };
[23:34:57] <geordi> prvalue X
[23:35:32] <cbreak> << std::is_signed<X>::value; enum X : char { x };
[23:35:33] <geordi> false
[23:35:46] <cbreak> doesn't seem like it...
[23:54:23] <PJBoy> << +X::x, +Y::y; enum X : signed char { x = -1 }; enum Y : unsigned char { y = 255 };
[23:54:24] <geordi> -1, 255
[23:54:53] <PJBoy> it affects the values the enumerators can have
[23:58:52] *** Quits: argonautx (~argonautx@i5E867211.versanet.de) (Quit: Leaving)
