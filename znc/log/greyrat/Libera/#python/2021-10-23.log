[00:00:11] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[00:01:55] <Roey> horseface: he's a rather lame boss actually: https://www.youtube.com/watch?v=khCPWRz9x4Q
[00:02:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[00:03:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:03:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:05:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[00:06:08] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[00:06:28] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:07:05] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[00:07:10] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 265 seconds)
[00:08:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[00:09:27] *** Joins: ghost43_ (~ghost43@gateway/tor-sasl/ghost43)
[00:10:04] *** Joins: avikalp (~avikalp@223.184.20.242)
[00:10:15] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[00:11:03] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Ping timeout: 276 seconds)
[00:11:06] *** Joins: et_ (~et@user/et)
[00:11:11] *** AOEI is now known as aoei
[00:11:42] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Remote host closed the connection)
[00:12:23] *** Quits: et (~et@user/et) (Ping timeout: 264 seconds)
[00:12:23] *** et_ is now known as et
[00:12:53] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[00:14:11] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[00:16:15] *** Joins: et_ (~et@user/et)
[00:16:46] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[00:16:46] *** et_ is now known as et
[00:18:26] *** Quits: avikalp (~avikalp@223.184.20.242) (Ping timeout: 260 seconds)
[00:20:41] *** Joins: mat001 (~mat001@244.sub-174-194-198.myvzw.com)
[00:21:51] *** holgersson is now known as notsowisefriday
[00:24:01] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[00:24:22] *** Joins: mickey8 (~user@user/mickey)
[00:24:31] *** notsowisefriday is now known as holgersson
[00:24:40] *** Joins: et_ (~et@user/et)
[00:24:55] *** Quits: rendar (~rendar@user/rendar) (Quit: twomoon for d4h w1n.)
[00:25:17] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[00:25:45] *** Quits: et (~et@user/et) (Ping timeout: 260 seconds)
[00:28:04] *** Joins: imrehg (~imrehg@85.210.212.52)
[00:28:07] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:28:19] *** Joins: et (~et@user/et)
[00:29:38] *** Quits: et_ (~et@user/et) (Ping timeout: 260 seconds)
[00:29:47] *** Quits: imrehg (~imrehg@85.210.212.52) (Quit: Connection closed)
[00:29:58] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:29:59] *** Joins: imrehg (~imrehg@85.210.212.52)
[00:30:12] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[00:31:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[00:31:53] *** Quits: km (~km@user/km) (Quit: Leaving)
[00:32:04] *** Joins: km (~km@user/km)
[00:33:39] *** Quits: ali1234 (~al@user/ali1234) (Remote host closed the connection)
[00:33:41] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[00:33:46] *** Joins: qlixed (~qlixed@152.170.36.244)
[00:33:50] *** Quits: nomic (~nomic@185.198.243.184) (Ping timeout: 260 seconds)
[00:34:10] *** Joins: ali1234 (~al@user/ali1234)
[00:34:30] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[00:35:06] *** Quits: grooverman (~grooverma@177.102.119.49) (Remote host closed the connection)
[00:36:23] *** Quits: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[00:37:08] *** Quits: imrehg (~imrehg@85.210.212.52) (Quit: Connection closed)
[00:37:43] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:37:47] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:38:03] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[00:39:12] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[00:40:13] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[00:40:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[00:40:44] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[00:41:11] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[00:42:03] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[00:42:05] *** Joins: Nact (~l@host-85-27-120-251.dynamic.voo.be)
[00:42:30] *** Quits: Ilyu (~quassel@gateway/vpn/pia/ilyu) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:44:10] *** Quits: Tas-sos (~Tas-sos@46-219-149.adsl.cyta.gr) (Quit: leaving)
[00:44:53] *** Joins: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com)
[00:46:46] *** Quits: mat001 (~mat001@244.sub-174-194-198.myvzw.com) (Ping timeout: 245 seconds)
[00:46:55] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:d0b2:4012:3b33:93d5) (Quit: Textual IRC Client: www.textualapp.com)
[00:49:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[00:50:45] *** Quits: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com) (Quit: WeeChat 3.0)
[00:51:08] *** Joins: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com)
[00:51:10] *** Joins: fikran (~fikran@user/fikran)
[00:51:23] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[00:51:38] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[00:52:35] *** Joins: wizard1 (~warrior@5.238.148.109)
[00:52:40] <wizard1> hi
[00:52:43] *** Quits: km (~km@user/km) (Quit: Leaving)
[00:52:58] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 260 seconds)
[00:52:59] *** Quits: magla (~gelignite@55d4ee8d.access.ecotel.net) (Quit: Stay safe!)
[00:53:24] *** Parts: wizard1 (~warrior@5.238.148.109) (WeeChat 2.8)
[00:53:36] *** Joins: korg815 (~korg815@user/korg815)
[00:53:48] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:54:10] *** Joins: mat001 (~mat001@195.sub-174-194-130.myvzw.com)
[00:54:39] *** Quits: ApostleInTriumph (~ApostleIn@vpn2.lix.polytechnique.fr) (Quit: Client closed)
[00:55:02] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[00:55:13] *** Joins: km (~km@user/km)
[00:55:46] *** Quits: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com) (Client Quit)
[00:56:05] *** Joins: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com)
[00:56:31] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:57:16] *** Quits: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com) (Remote host closed the connection)
[00:57:36] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[00:59:05] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 258 seconds)
[00:59:51] *** Joins: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com)
[01:00:01] *** Quits: upsala (~zcb@185.254.75.29) (Quit: WeeChat 3.3)
[01:01:25] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[01:01:25] *** Quits: mattf (~mattf@li908-138.members.linode.com) (*.net *.split)
[01:01:25] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[01:01:25] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[01:01:25] *** Quits: eichin (sid27120@tinside.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: ericoc (sid179921@uxbridge.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: Knyght (sid365271@helmsley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[01:01:25] *** Quits: crazysim (sid86009@hampstead.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: Sario (sid356235@miraheze/Sario528) (*.net *.split)
[01:01:25] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[01:01:25] *** Quits: lk (sid504574@ilkley.irccloud.com) (*.net *.split)
[01:01:25] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: han-` (sid293063@helmsley.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: EWDurbin (sid38710@tinside.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: nem (sid113421@user/nem) (*.net *.split)
[01:01:26] *** Quits: dhill (~dhill@modemcable103.217-80-70.mc.videotron.ca) (*.net *.split)
[01:01:26] *** Quits: abyss (~robbins@user/robbins) (*.net *.split)
[01:01:26] *** Quits: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC) (*.net *.split)
[01:01:26] *** Quits: jinsun (~quassel@user/jinsun) (*.net *.split)
[01:01:26] *** Quits: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net) (*.net *.split)
[01:01:26] *** Quits: erica (~erica@user/erica) (*.net *.split)
[01:01:26] *** Quits: asix (~Anders@user/asix) (*.net *.split)
[01:01:26] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (*.net *.split)
[01:01:26] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[01:01:26] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[01:01:26] *** Quits: gerty (~gerty@user/gerty) (*.net *.split)
[01:01:26] *** Quits: martums (~martums@user/martums) (*.net *.split)
[01:01:26] *** Quits: anarcat (~anarcat@user/anarcat) (*.net *.split)
[01:01:26] *** Quits: zerotypic (~zerotypic@66.96.192.176) (*.net *.split)
[01:01:26] *** Quits: argoneus (~argoneus@argoneus.com) (*.net *.split)
[01:01:26] *** Quits: bionade24 (~bionade24@server2.oscloud.info) (*.net *.split)
[01:01:26] *** Quits: DerpGusta (~quassel@user/derpgusta) (*.net *.split)
[01:01:26] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (*.net *.split)
[01:01:26] *** Quits: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (*.net *.split)
[01:01:26] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[01:01:26] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[01:01:26] *** Quits: ksynwa (~ksynwa@5.45.111.57) (*.net *.split)
[01:01:26] *** Quits: iwkse (~iwkse@iurit.com) (*.net *.split)
[01:01:26] *** Quits: {4144} (~{4144}@46.56.64.37) (*.net *.split)
[01:01:26] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[01:01:26] *** Quits: pr3d4t0r (~zhenya01@user/pr3d4t0r) (*.net *.split)
[01:01:26] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (*.net *.split)
[01:01:26] *** Quits: alissa (ryan@hashbang/bdfl) (*.net *.split)
[01:01:26] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:01:26] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[01:01:26] *** Quits: _janus (~janus@blotter.ld-linux.so) (*.net *.split)
[01:01:26] *** Quits: notEVIL (~notevil@user/notevil) (*.net *.split)
[01:01:26] *** Quits: starship (~kkh@user/duracrisis) (*.net *.split)
[01:01:26] *** Quits: ATAD (~ATAD@user/atad) (*.net *.split)
[01:01:26] *** Quits: amosbird (~amosbird@13.75.119.182) (*.net *.split)
[01:01:26] *** Quits: dangrenier83 (~pi@user/dangrenier83) (*.net *.split)
[01:01:26] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (*.net *.split)
[01:01:26] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (*.net *.split)
[01:01:26] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[01:01:26] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[01:01:26] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (*.net *.split)
[01:01:26] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (*.net *.split)
[01:01:26] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[01:01:26] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[01:01:26] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[01:01:26] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (*.net *.split)
[01:01:26] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[01:01:26] *** Quits: acegallagher (~Ace@71-211-255-47.hlrn.qwest.net) (*.net *.split)
[01:01:26] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (*.net *.split)
[01:01:26] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[01:01:26] *** Quits: poorboy (~poorboy@159.89.189.144) (*.net *.split)
[01:01:26] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[01:01:26] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[01:01:26] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[01:01:26] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[01:01:26] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[01:01:26] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[01:01:26] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[01:01:26] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[01:01:26] *** Quits: vince (~vince@75.127.14.76) (*.net *.split)
[01:01:26] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[01:01:26] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[01:01:26] *** Quits: lack (~lack@user/lack) (*.net *.split)
[01:01:26] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[01:01:26] *** Quits: ulif (~nick@user/ulif) (*.net *.split)
[01:01:26] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[01:01:26] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[01:01:26] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[01:01:26] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[01:01:26] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[01:01:26] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[01:01:26] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[01:01:26] *** Quits: randall (~randall@user/randall) (*.net *.split)
[01:01:26] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[01:01:26] *** Quits: sunyibo (~dorsch@5.2.75.229) (*.net *.split)
[01:01:26] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[01:01:26] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[01:01:26] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[01:01:26] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[01:01:26] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[01:01:26] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[01:01:26] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[01:01:26] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[01:01:33] *** Joins: anarcat (~anarcat@user/anarcat)
[01:01:34] *** Joins: zerotypic (~zerotypic@66.96.192.176)
[01:01:38] *** Joins: lack (~lack@user/lack)
[01:01:38] *** Joins: nvz (~user@nvz.farted.online)
[01:01:41] *** Joins: Knyght (sid365271@id-365271.helmsley.irccloud.com)
[01:01:41] *** Joins: ericoc (sid179921@id-179921.uxbridge.irccloud.com)
[01:01:41] *** Joins: crazysim (sid86009@id-86009.hampstead.irccloud.com)
[01:01:45] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[01:01:53] *** Joins: han-` (sid293063@id-293063.helmsley.irccloud.com)
[01:01:54] *** Joins: notevil (~notevil@user/notevil)
[01:01:56] *** Joins: lk (sid504574@id-504574.ilkley.irccloud.com)
[01:01:59] *** Joins: eichin (sid27120@id-27120.tinside.irccloud.com)
[01:02:03] *** Joins: Evolver (sid32215@user/evolver)
[01:02:12] *** Joins: bionade24 (~bionade24@server2.oscloud.info)
[01:02:16] *** Joins: shodan45 (~quassel@107.161.22.155)
[01:02:16] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[01:02:16] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[01:02:32] *** Joins: Sario (sid356235@miraheze/Sario528)
[01:03:06] *** Joins: Byteflux (~byte@byteflux.net)
[01:03:09] *** Joins: DerpGusta (~quassel@user/derpgusta)
[01:03:13] *** Joins: ATAD (~ATAD@user/atad)
[01:03:21] *** Joins: dgw (dgw@sopel/admin/dgw)
[01:03:22] *** Joins: duracrisis (~kkh@user/duracrisis)
[01:03:26] *** Joins: themill (~stuart@debian/stuart)
[01:03:27] *** Joins: jinsun (~quassel@user/jinsun)
[01:03:27] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:03:27] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[01:03:27] *** Joins: suffer (znc@mutant.penguin.fyi)
[01:03:28] *** Joins: poorboy (~poorboy@159.89.189.144)
[01:03:29] *** Joins: sunyibo (~dorsch@2a04:52c0:101:443::)
[01:03:29] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[01:03:30] *** Joins: mrkajetanp (~mrkajetan@2a01:4b00:ea36:6c00:7994:941c:3f5d:2b88)
[01:03:30] *** Joins: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net)
[01:03:30] *** Joins: {4144} (~{4144}@46.56.64.37)
[01:03:31] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[01:03:32] *** Joins: Cyp (~cyp@213.237.87.7)
[01:03:32] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[01:03:32] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[01:03:33] *** Joins: Trashlord (~trash@user/trashlord)
[01:03:36] *** Joins: Forkk (~forkk@li926-228.members.linode.com)
[01:03:37] *** Joins: operational (~operation@imgonnaf.art)
[01:03:37] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[01:03:38] *** Joins: mdw (~root@159.65.86.163)
[01:03:38] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:03:43] *** Joins: roppert (~roppert@inb4.se)
[01:03:44] *** Joins: amosbird (~amosbird@13.75.119.182)
[01:03:45] *** Joins: shan (shan@cyblog/maintainer/shan)
[01:03:52] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[01:03:54] *** Joins: ksynwa (~ksynwa@5.45.111.57)
[01:04:00] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[01:04:05] *** Joins: Koffa (jkohvakk@user/koffa)
[01:04:10] *** Quits: computeiro (~Wender@189.37.67.210) (Ping timeout: 260 seconds)
[01:04:18] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[01:04:42] *** Joins: zoid (~zoid@user/taxationistheft)
[01:05:44] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[01:05:44] *** Joins: _janus (~janus@blotter.ld-linux.so)
[01:06:37] *** Joins: deniska (~denis@user/deniska)
[01:06:44] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[01:06:44] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[01:06:46] *** Joins: yitz (~yitz@exercism/yitz)
[01:06:46] *** Joins: grnman_ (~grnman@159.89.27.73)
[01:06:54] *** Joins: asix (~Anders@user/asix)
[01:11:03] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:12:43] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Quit: WeeChat 3.3)
[01:13:33] *** Quits: fannagoganna (uid110488@tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:13:51] *** Quits: mat001 (~mat001@195.sub-174-194-130.myvzw.com) (Ping timeout: 245 seconds)
[01:14:24] *** Quits: stdout (~stdout@216.163.21.11) (Quit: Leaving)
[01:17:14] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 260 seconds)
[01:17:27] *** Joins: jazzy (~jaziz@user/jaziz)
[01:17:40] *** Quits: parv (~quass@user/parv) (Ping timeout: 260 seconds)
[01:18:18] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:18:58] *** jazzy is now known as jazz-o-lantern
[01:21:16] *** Joins: mat001 (~mat001@193.sub-174-194-128.myvzw.com)
[01:21:54] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 276 seconds)
[01:22:05] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 258 seconds)
[01:22:07] *** Joins: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net)
[01:22:20] *** Quits: junktext_ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 260 seconds)
[01:22:36] <aphysically> jinsun: another thing is to just do Iterable[object] instead of Iterable[Union[object,Tupple[object],Tuple[.etc
[01:22:44] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[01:23:30] <aphysically> while "Any | Tuple | etc" has value in general because it signals to the type checker that everything in this path must at least be able to handle the tuple and such as well, there is no such value for object because it's already as narrow as it gets
[01:23:38] *** Joins: NoImNotNineVolt (~fdsa@c-73-248-207-98.hsd1.nj.comcast.net)
[01:24:20] <aphysically> so it's safe to just do Iterable[object] - EXCEPT for that this has the somewhat interesting side-effect: if object gets narrowed *specifically* to a tuple (like through isinstance), type checkers won't throw an unpacking error based on the size
[01:24:53] <aphysically> whereas if you explicitly declared Tuple[object] as a possibility, it will throw a type error for you if you try to do something like a, b = (something of type Tuple[object])
[01:25:38] *** Quits: akk (~akk@75.161.146.115) (Ping timeout: 260 seconds)
[01:25:39] <jinsun> yeah that makes things simpler, the insinstace check just narrows to a tuple of arbitrary length
[01:26:02] <aphysically> nedbat: another ergonomic thing I hope can happen at some point in the (far..) future is the elimination of stringized annotations so that the notation is freed up for other things such that maybe Literal[] isn't even needed anymore
[01:26:28] <aphysically> changes like this necessarily have to be in the far future cause it would have to be after 3.10 is deprecated, and probably farther than that
[01:27:28] *** Joins: zebrag (~chris@user/zebrag)
[01:27:48] <jinsun> Literal is not so common, and I don't see how strings can be used for that nicely
[01:28:26] <jinsun> and you would lose the easy "backport" of newer type annotation behavior
[01:30:11] *** Quits: src (~src@user/src) (Quit: Leaving)
[01:30:36] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[01:30:46] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[01:31:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:32:48] *** Joins: iflema (~ian@user/iflema)
[01:32:51] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[01:33:45] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[01:33:45] <jinsun> ah okay I think I see now when I think about it, so "str" will be Literal["str"]
[01:33:47] <jinsun> so any object will be allowed as annotation and if it is not a type, it will be assumed Literal
[01:34:00] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:63c8:f04e:ea2f:5050) (Ping timeout: 260 seconds)
[01:35:37] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 265 seconds)
[01:37:09] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[01:37:42] *** Quits: mat001 (~mat001@193.sub-174-194-128.myvzw.com) (Remote host closed the connection)
[01:40:06] *** Quits: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com) (Quit: WeeChat 3.0)
[01:40:06] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[01:40:08] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[01:41:10] *** Joins: mortn (~weechat@81-234-122-230-no158.tbcn.telia.com)
[01:41:51] <aphysically> it's much nicer yeah
[01:41:55] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Quit: Client closed)
[01:42:46] *** Joins: StormDancer (~stormdanc@185.245.86.123)
[01:43:33] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:44:28] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: Textual IRC Client: www.textualapp.com)
[01:44:46] *** Quits: Thanatos (~Thanatos@197.210.44.192) (Ping timeout: 260 seconds)
[01:44:47] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[01:45:03] *** Quits: fofoni_ (~fofoni@user/fofoni) (Quit: Leaving)
[01:46:23] *** Joins: nomic (~nomic@185.198.243.184)
[01:48:58] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 260 seconds)
[01:49:17] *** Quits: LuKaRo (~LuKaRo@p4fc32951.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[01:50:23] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[01:50:38] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[01:53:04] *** Quits: Akuli (~Akuli@87-94-110-25.bb.dnainternet.fi) (Quit: Leaving)
[01:53:46] *** Joins: jazzy (~jaziz@user/jaziz)
[01:55:19] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[01:55:31] <AhmedAmerican> is there an async selenium ?
[01:58:30] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 260 seconds)
[01:58:49] *** Quits: jonaskabrink (~jonaskabr@et1-vpn-143-40.ieet.tu-harburg.de) (Ping timeout: 265 seconds)
[01:58:52] *** Joins: extropiator (~admin@user/extropiator)
[02:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:04:12] *** vinleod is now known as vdamewood
[02:04:13] <foo> Trying to get magic links working. Here's some code: https://bpa.st/PRHQ (31 lines): Tried using itsdangerous library to generate and determine if a magic link is expired or not. Any thoughts/opinions on this?
[02:04:18] *** Joins: bjs (sid190364@user/bjs)
[02:05:14] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[02:07:16] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:07:57] <axisys> still looking for a suggestion on how to read a xlsx file that reports 0 worksheets with pd.ExcelFile or pd.read_excel
[02:08:10] <axisys> using pandas 1.2.3 on macos big sur
[02:08:46] <axisys> It has 4 worksheets and I have it open with Excel
[02:09:29] *** Joins: zeden (~zeden@user/zeden)
[02:09:59] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 264 seconds)
[02:10:10] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 260 seconds)
[02:12:16] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[02:14:11] *** Joins: pycurious (~Adium@user/pycurious)
[02:16:35] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 264 seconds)
[02:16:35] *** Quits: daoudr (~daoudr@161.12.105.92.dynamic.wline.res.cust.swisscom.ch) (Ping timeout: 260 seconds)
[02:18:03] <AhmedAmerican> axisys: you might be dealing with hidden sheets?
[02:18:28] *** Joins: jazzy (~jaziz@user/jaziz)
[02:18:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:19:08] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[02:19:48] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[02:20:03] <axisys> AhmedAmerican: hmm.. interesting.. any idea how to unhide it then?
[02:20:27] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-6189-ef5f-444a-ddff.res6.spectrum.com)
[02:21:06] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:21:28] *** Joins: neotod (~manjaro-u@151.246.202.203)
[02:22:25] *** Quits: neotod (~manjaro-u@151.246.202.203) (Quit: Konversation terminated!)
[02:24:30] *** Joins: emerent_ (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de)
[02:24:30] *** emerent is now known as Guest7256
[02:24:30] *** emerent_ is now known as emerent
[02:24:34] *** Quits: Guest7256 (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[02:24:53] <jinsun> axisys: if you have it open in Excel, then just do that from Excel, though pd.ExcelFile will show hidden sheets too I think
[02:25:01] *** Joins: jcass (~jcass@50-0-146-31.dsl.dynamic.fusionbroadband.com)
[02:25:56] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 245 seconds)
[02:26:03] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[02:26:34] <jinsun> axisys: you said you got warnings?
[02:27:59] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[02:28:30] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:28:42] <jcass> Are python books from No Starch Press any good?
[02:29:50] <grym> jcass: they're a well-regarded/reputable publisher
[02:30:14] <axisys> jinsun: I do not have it open .. I should have said when I had it open..
[02:30:38] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:30:51] *** Joins: horseface (~horseface@user/horseface)
[02:31:17] *** Joins: djhankb (~djhankb@208.113.164.68)
[02:31:21] <axisys> right now I am only trying to open it with jupyter notebook and ipython with same result
[02:31:27] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[02:31:42] <whatsupdoc> Can you have interfaces implement other interfaces?
[02:32:16] <grym> whatsupdoc: sure
[02:32:25] <grym> whatsupdoc: insamuch as python has them at all
[02:32:27] <nedbat> whatsupdoc: what is an interface?
[02:32:39] <jinsun> what is interface? abc or Protocol?
[02:32:42] <whatsupdoc> function scaffolds
[02:33:23] <jinsun> what is function scaffolds?
[02:33:29] <axisys> jinsun: I did xls = pd.ExcelFile('myfile.xlsx') and then xls.sheet_names outputs to [] empty list
[02:34:22] <nedbat> whatsupdoc: can you show us an example?
[02:34:24] <jinsun> axisys: and you got warnings?
[02:34:30] *** Joins: iflema (~ian@user/iflema)
[02:34:40] <whatsupdoc> I'm learning about the adapter design pattern right now and in the example, the instructor is trying to print out lines using an API that prints out points.
[02:34:57] <axisys> if I do pd.read_excel('myfile.xlsx') .. I get this
[02:34:59] <axisys> ValueError: Worksheet index 0 is invalid, 0 worksheets found
[02:35:31] *** Quits: qlixed (~qlixed@152.170.36.244) (Ping timeout: 245 seconds)
[02:35:32] <jinsun> yeah that is because you have no sheets
[02:35:38] *** Quits: mumixam (james@user/mumixam) (Remote host closed the connection)
[02:35:46] <whatsupdoc> I understand the implementation, he basically has a class that inherits from 'list' and then stores all the points in that class.
[02:36:10] <jinsun> axisys: what does pd.ExcelFile give? no warnings or errors?
[02:36:18] <axisys> https://dpaste.org/FzRf
[02:36:25] <whatsupdoc> And then he iterates through the points and prints them out using the print() function the the API that can print Points
[02:36:30] <axisys> jinsun: ^
[02:36:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:36:42] <axisys> jinsun: thats from pd.ExcelFile
[02:37:14] <nedbat> whatsupdoc: inheriting from list is usually a bad idea
[02:37:22] <nedbat> whatsupdoc: do you have a link?
[02:37:25] <whatsupdoc> https://dpaste.org/ZuKp
[02:37:57] <whatsupdoc> My question is why didn't he just define an API on top of the point API and use that instead?
[02:37:58] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 260 seconds)
[02:38:18] <whatsupdoc> Is that generally a bad idea?
[02:38:21] <nedbat> whatsupdoc: i don;t like a lot of this, so don't ask me :)
[02:38:38] <nedbat> for example, LineToPointAdapter should just be a function that returns a list.
[02:38:38] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:39:23] <nedbat> whatsupdoc: this looks like a Java refugee
[02:39:32] <whatsupdoc> lol
[02:39:58] <whatsupdoc> Idk I think I learned a lot by following his tutorial
[02:40:23] <whatsupdoc> Like for example, I never knew that classes could inherit from list like that...
[02:40:26] <nedbat> whatsupdoc: i'm sure that's true.  but not everything he did was good.
[02:40:33] <nedbat> whatsupdoc: never inherit from list, it's a bad idea
[02:40:40] *** Quits: horseface (~horseface@user/horseface) (Ping timeout: 244 seconds)
[02:40:59] <whatsupdoc> Yeah, I was like thinking why didn't he just create a list intead
[02:41:16] <nedbat> right
[02:41:27] <nedbat> or make a Rectangle class that has a list instead
[02:41:46] <whatsupdoc> Rectangle is a list of lines
[02:41:48] <nedbat> do you want your Rectangle to have an .extend() method? Does it make sense to slice your Rectangle?
[02:41:58] <nedbat> whatsupdoc: a Rectangle *has* a list of lines
[02:42:09] <whatsupdoc> Yea, whatever lol
[02:42:10] <nedbat> Rectangle shouldn't do everything a list does
[02:42:20] <nedbat> whatsupdoc: this is an important distinction.
[02:42:44] <whatsupdoc> Yeah, I understand the difference
[02:42:56] <whatsupdoc> Anyway, anyone wanna answer my question lol?
[02:43:04] *** Joins: pr3d4t0r (~zhenya01@user/pr3d4t0r)
[02:43:12] <whatsupdoc> Is it a bad idea to write another API that redirects the API that you were given?
[02:43:41] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:43:50] <nedbat> whatsupdoc: i'm not sure what that means
[02:43:56] *** Joins: hanaan (~naan@user/naan)
[02:44:20] <jinsun> axisys: so that didn't really "work" it just removed all sheets, might be this openpyxl bug https://foss.heptapod.net/openpyxl/openpyxl/-/issues/1498
[02:44:24] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[02:44:27] <whatsupdoc> Make an API that has something like draw_line() that relies on draw_point() and use that instead
[02:44:40] *** hanaan is now known as Naan
[02:45:11] <whatsupdoc> If "Point" is supposedly your API that you were given
[02:45:41] *** Joins: horseface (~horseface@user/horseface)
[02:45:42] <whatsupdoc> I mean not the Point class, but you get what I mean
[02:47:12] <jinsun> axisys: the workaround seems to be, open the file in Excel and save as xlsx (new file)
[02:47:33] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[02:48:07] *** Joins: mickey8 (~user@user/mickey)
[02:48:16] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[02:48:35] *** Joins: ravan (~ravan@user/ravan)
[02:48:53] <whatsupdoc> I mean write something like this instead
[02:48:53] <whatsupdoc> https://dpaste.org/Neb7
[02:48:54] *** Joins: mumixam (~m@user/mumixam)
[02:49:47] <jim> nedbat, I think he means that his api is a collection of functions that forward to another api
[02:51:12] <whatsupdoc> yes
[02:51:28] *** Quits: isomorpheus (~isomorphe@c-73-53-247-25.hsd1.fl.comcast.net) (Quit: Leaving)
[02:51:43] <jim> whatsupdoc, and, I'd say, why not, if it's useful to you
[02:52:00] <whatsupdoc> Coupling? Or doesn't matter?
[02:52:26] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 260 seconds)
[02:52:34] <jim> sorry, I don't understand that question
[02:52:46] *** Roadrunn- is now known as RoadrunnerWMC
[02:53:42] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:4def:4e95:4385:6486) (Quit: Leaving)
[02:54:30] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[02:54:56] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[02:55:27] <whatsupdoc> Actually, nvm, I guess it should be fine. Coupling is the degree of interdependence between two software modules.
[02:55:57] *** Joins: Wulf (~Wulf@user/wulf)
[02:56:47] <jim> my friend jcass is here, he's looking to pick up python again, after using an earlier version (he says that might have been pre-2)... right now, he's using https://nostarch.com/pythoncrashcourse2e to come back up to speed
[02:57:01] *** Quits: goldfish (~goldfish@user/goldfish) (Quit: Leaving)
[02:57:03] <whatsupdoc> You should strive to minimizing the amount of coupling when you write programs I guess.....idk I never wrote a program bigger than 'hello world' lol
[02:57:46] *** Quits: ethrl (~morty@user/doforlove33) (Quit: WeeChat 3.0)
[02:58:15] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-6189-ef5f-444a-ddff.res6.spectrum.com) (Quit: Leaving.)
[02:58:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[02:58:36] <whatsupdoc> I say skip the books and read ned's stuff and then jump to docs lol
[02:58:42] <jim> whatsupdoc, if you're writing api forwarders, I'm guessing that if you're using the api you wrote, you can write bigger programs
[02:59:24] *** Quits: mumixam (~m@user/mumixam) (Remote host closed the connection)
[02:59:39] *** Quits: horseface (~horseface@user/horseface) (Quit: STOP, DROP, AND ROLL. IT IS HAMMER TIME!!!)
[02:59:53] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[03:00:32] *** Joins: fikran (~fikran@user/fikran)
[03:00:33] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[03:00:34] <jim> I'll give nim ned's video on iteration when he's done with that book... he likes to stick with what he has until he's done, that way he doesn't get bogged down by multiple sources of info
[03:00:48] <jim> hey jcass, you still here?
[03:01:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:02:17] <jim> so I told him about the python.org site, and that the docs are there
[03:02:32] <whatsupdoc> Is it normal in python to have functions outside of classes? I still don't fully understand what is standard practice and what is not. Python seems to allow you to basically do anything and everything you want.
[03:02:47] <jim> sure
[03:02:51] <nedbat> whatsupdoc: the more functions outside classes, the better
[03:03:25] <jim> nedbat, what reason for that?
[03:03:28] <axisys> jinsun: let me try that
[03:03:38] <whatsupdoc> hmm...interesting.....I heard my entire life that global functions are bad
[03:03:54] <nedbat> jinsun: because functions are simpler than methods, and if you can make it a function, it will be simpler and easier to test and understand
[03:04:24] <jinsun> whatsupdoc: ^ I think
[03:04:32] <nedbat> whatsupdoc: what languages have you been working in?
[03:05:10] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[03:05:13] <jinsun> whatsupdoc: it is the 90s OOP thinking, not pythonic
[03:05:15] <whatsupdoc> Why does Python source code use classes?
[03:05:30] <nedbat> whatsupdoc: it uses both
[03:05:37] <whatsupdoc> We used C/C++ at my school
[03:06:04] <whatsupdoc> I'm used to writing everything in a class in C++
[03:06:08] <jinsun> C++ courses also have the bad habit of teaching that
[03:06:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:06:34] <whatsupdoc> Object oriented programming is bad lol?
[03:07:05] <nedbat> whatsupdoc: no, just overused
[03:07:16] <axisys> jinsun: I will try it again tomorrow and let you know how it goes
[03:07:36] <jinsun> making class for everything is bad, not oop in general
[03:08:01] <whatsupdoc> interesting
[03:08:36] <anarcat> sartan: nice, thanks
[03:11:07] <bpalmer> Surprised that people would rail against global functions, but in a sense, python functions are always module-level, if that makes you feel better.
[03:11:45] <bpalmer> sorry, that should be "global" python functions are actually module-level.
[03:11:46] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[03:11:57] <bpalmer> With a certain caveat about the __builtin__ module.
[03:12:03] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[03:12:13] <whatsupdoc> What is __builtin__?
[03:12:39] <bpalmer> sorry, __builtins__ ; I swear I mix that up the other way every other day.
[03:13:11] <whatsupdoc> still don't know what __builtins__ are lol
[03:13:12] <bpalmer> whatsupdoc: __builtins__ is a module in which its functions are always available. This is where print() lives, for example.
[03:13:27] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[03:13:27] *** Joins: nomic (~nomic@185.198.243.184)
[03:13:48] *** Joins: mumixam (~m@user/mumixam)
[03:13:51] <whatsupdoc> Can you add your own builtins?
[03:13:55] <bpalmer> everything else, you have to import to make available.
[03:14:32] <bpalmer> whatsupdoc: to adapt a saying, a gentleman/lady/elevated nonbinary person wouldn't.
[03:14:59] <nedbat> whatsupdoc: please don;t :)
[03:15:10] <whatsupdoc> smh
[03:15:25] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:15:31] <nedbat> whatsupdoc: why are you syh?
[03:15:49] <whatsupdoc> just because i wanna learn how to do it doesn't it mean it'll become my goto
[03:15:58] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[03:16:04] <nedbat> whatsupdoc: __builtins__ is a dict. you can put things in it
[03:16:19] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[03:16:24] <nedbat> sorry, a module
[03:16:35] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 264 seconds)
[03:16:38] <whatsupdoc> a dictionary of functions?
[03:16:53] <jinsun> it is a module in `__main__` but a dict in other modules I think
[03:16:55] <whatsupdoc> what's the key?
[03:17:01] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[03:17:04] <whatsupdoc> function name I assume?
[03:17:06] <jim> whatsupdoc, python is pretty much wide open, you can pretty much create new -anythings-... sometimes, it's better not to, for your own sense of sanity and smooth operating in the world
[03:17:09] <bpalmer> whatsupdoc: a module is very similar to a dictionary; most things in python end up being similar to a dictionary.
[03:17:17] <nedbat> whatsupdoc: do this:  __builtins__.foo = "hello"
[03:17:22] <nedbat> whatsupdoc: then:  print(foo)
[03:17:30] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:18:32] *** Joins: plastico (~plastico@neomutt/plastico)
[03:18:36] <bpalmer> It's almost always going to be clearer to have your own module like 'bigfoot.py' so that people do 'import bigfoot; print(bigfoot.foo)'
[03:18:59] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 264 seconds)
[03:19:17] <bpalmer> that's why I was making the joke about what a gentleman(etc) would do, as opposed to what *could* be done.
[03:19:56] *** Joins: extropiator (~admin@user/extropiator)
[03:20:11] <jim> when I do that in xonsh (a shell that incorporates all of python), it says: AttributeError: 'dict' object has no attribute 'foo'
[03:20:59] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[03:21:09] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[03:21:14] <jim> does that mean that __builtins__.foo is not the same as __builtins__["foo"]?
[03:21:32] <whatsupdoc> https://dpaste.org/ojhP
[03:21:33] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:22:08] <whatsupdoc> ignore semicolons lol
[03:22:11] <jinsun> jim: yes, you can't use dot operator on a dict
[03:22:14] <bpalmer> jim: testing, it appears that __builtins__ in __main__ is different than in other packages.
[03:22:22] <bpalmer> jim: as jinsun wrote above.
[03:22:52] <jinsun> I mean you can't use dot to access the values
[03:22:52] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Remote host closed the connection)
[03:23:28] <bpalmer> in __main__, __builtins__.foo = "hello" would work; in other packages (and so presumably xonsh), __builtins__["foo"] = "hello" would do the same thing.
[03:23:33] <jinsun> it is a module only in `__main__` and that too is an implementation detail it seems https://docs.python.org/3/library/builtins.html
[03:23:37] <jim> whatsupdoc, I'd say, be careful with indentations
[03:24:22] *** Quits: extropiator (~admin@user/extropiator) (Ping timeout: 265 seconds)
[03:24:31] <whatsupdoc> I know it's all messed up cuz I tried to do everything on one line and failed lol
[03:25:00] <whatsupdoc> How do you define a function on one line?
[03:25:08] <jim> it looks like the def is indented by one space
[03:25:13] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[03:25:17] <whatsupdoc> (type(__builtins__) == dict) == False # True
[03:26:24] <jim> well maybe take a look at type(__builtins__) by itself
[03:26:30] <jinsun> whatsupdoc: `import othermodule; print(type(__builtins__)); print(type(othermodule.__builtins__))`
[03:27:39] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:29:12] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 265 seconds)
[03:29:40] <jim> does importing a module "put you into" that module to serve as a context?
[03:30:15] <bpalmer> No. It just makes that module available in your current one.
[03:30:36] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Read error: Connection reset by peer)
[03:30:57] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[03:31:02] <jim> so it inserts the name of the imported module, into the module you're currently in?
[03:31:28] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[03:31:31] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:34] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[03:31:40] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[03:31:43] <jim> if you're outside of any module, then you're in __main__?
[03:31:44] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:f927:f04f:f46f:9b21) (Quit: Leaving)
[03:32:20] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[03:32:20] <grym> you can't be outside of any module
[03:32:20] <bpalmer> jim: boiling down some complexity, yes.
[03:32:25] *** Joins: brabrax (~brabrax@user/brabrax)
[03:32:42] <bpalmer> I mean, whether __main__ is "outside" or its own thing, I wouldn't argue either interpretation, I suppose.
[03:33:06] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:def0:6996:2bb9:77)
[03:34:05] <jim> and I think the tutorial said, a module is a file ending with .py, and when you import it, it executes whatever is in there, which should all be definitions?
[03:35:02] <jinsun> no that is the common case
[03:35:25] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[03:35:27] <bpalmer> definitions and other imports, with emphasis on "should"
[03:35:35] <jinsun> but module can be imported from anywhere (.so files is the second common case)
[03:36:03] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[03:36:16] <jim> so when you import a .py file, it creates a module object that it puts all the defs, vars and classes in?
[03:37:19] *** Joins: chenqisu12 (~peiycae@183.217.203.91)
[03:37:22] <bpalmer> yep.
[03:37:31] *** Quits: AnselmoCampanas (~AnselmoCa@190.99.69.41) (Ping timeout: 256 seconds)
[03:38:31] <bpalmer> jim: note that the import machinery only does this once.  If you have file1.py which does 'import file2; import file3;' and in file2.py you have 'import file3;' , the module for file3 will only be created and file3.py executed once.
[03:39:01] <bpalmer> after the module has been created, it will be cached so future imports just refer to it.
[03:41:39] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[03:44:06] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:45:29] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:45:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:46:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:46:48] *** Joins: amo (~amogorkon@port-92-196-112-50.dynamic.as20676.net)
[03:46:49] *** Lord_of_Life_ is now known as Lord_of_Life
[03:47:41] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[03:48:08] *** Joins: mickey8 (~user@user/mickey)
[03:50:11] *** Quits: amogorkon (~amogorkon@port-92-196-6-35.dynamic.as20676.net) (Ping timeout: 264 seconds)
[03:50:33] *** Joins: akk (~akk@75.161.146.115)
[03:52:48] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[03:54:33] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[03:55:49] <whatsupdoc> Is OOP outdated and old tech? Is that why Python doesn't encourage it?
[03:56:18] <nedbat> whatsupdoc: everything is more subtle than you seem to think
[03:56:27] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:56:37] <grym> whatsupdoc: hey guess what everything in python is an instance of :)
[03:56:49] <whatsupdoc> objects lol
[03:56:55] <whatsupdoc> classes
[03:57:44] <bpalmer> OOP isn't a tech, it's a design approach. Is art deco outdated?
[03:58:12] <grym> i mean kinda
[03:58:15] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[03:58:25] <grym> 'first to rococo and then to rubble' :)
[03:58:44] <grym> (but your point is correct)
[04:00:12] <whatsupdoc> programmers are so technical lol
[04:00:24] *** Quits: audiobirb (~audio@2603-8081-1800-1546-0d8f-fc32-e8a3-87bf.res6.spectrum.com) (Ping timeout: 258 seconds)
[04:01:05] <grym> yes?
[04:01:14] <grym> occupational hazard
[04:02:11] *** Joins: jazzy2 (~jaziz@user/jaziz)
[04:02:35] <bpalmer> this would never happen if art deco still ruled the world. Modernists coming in with their technical elements.
[04:03:11] <whatsupdoc> Me: A tomato is a vegetable Programmers: Technically, a tomato is a fruit because it has seeds
[04:03:17] *** Quits: jazzy2 (~jaziz@user/jaziz) (Max SendQ exceeded)
[04:03:29] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:04:07] <grym> arts and crafts for programmers is something people have tried a few times
[04:04:22] <grym> we got some nice editors out of things close to that sort of desire, anyway...
[04:04:34] <grym> whatsupdoc: "found the bard"
[04:04:36] *** Joins: jazzy2 (~jaziz@user/jaziz)
[04:05:40] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 252 seconds)
[04:06:04] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:06:16] <nedbat> whatsupdoc: how you classify a tomato depends on your domain: culinary, it's a vegetable.  botany: it's a fruit.
[04:06:21] *** Quits: Player001 (~Player001@user/player001) (Quit: Quitting)
[04:06:30] <whatsupdoc> lmao
[04:06:43] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:08:54] <bpalmer> "Knowledge is knowing that a tomato is a fruit. Wisdom is knowing not to put it in a fruit salad."
[04:09:03] <whatsupdoc> Yep, nedbat is a programmer for sure lol
[04:10:29] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: what if I am turning narcissist? pretentious, asocial, inpromptu squabbles, easily become childishness from the slightest emotional distress.. i feel like I've only truly grown up on the outside, and it's painful to remain this way, but it's far from the)
[04:10:42] <InPhase> bpalmer: And software engineering is knowing that fruit salad does not obey the Liskov substitution principle.
[04:11:35] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 244 seconds)
[04:12:05] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[04:12:40] <InPhase> *crickets*  Tough crowd...
[04:14:42] <nedbat> InPhase: :)
[04:15:54] <whatsupdoc> I don't get the analogy.....then again I just learned about Liskov's substitution principle last week.
[04:16:20] <InPhase> whatsupdoc: Learn about it again next week, and maybe it will eventually be funny.  :)
[04:16:44] <whatsupdoc> What is the derived class? And what is the base class?
[04:17:15] <InPhase> As every CS101 student knows, Fruit is always the base class.
[04:17:54] <nedbat> Object > RoughlyHandSized > EdibleMixin > Fruit    :)
[04:19:19] *** Joins: \mSg (mSg@user/msg/x-0285936)
[04:19:20] *** Quits: JacobFrost (sid494713@tinside.irccloud.com) ()
[04:19:25] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[04:19:48] *** Joins: JacobFrost (sid494713@id-494713.tinside.irccloud.com)
[04:21:29] <sartan> Where does Tomato fit in?
[04:22:39] <whatsupdoc> InPhase has god-like analogy skills
[04:23:21] <sartan> oh the tomato joke was already made
[04:23:22] <sartan> i'm not original
[04:23:36] <sartan> I need to read scrollback more
[04:23:56] *** Joins: jazzy (~jaziz@user/jaziz)
[04:24:45] *** Joins: extropiator (~admin@user/extropiator)
[04:25:04] *** Parts: JacobFrost (sid494713@id-494713.tinside.irccloud.com) ()
[04:26:20] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:26:49] *** Joins: korg815 (~korg815@user/korg815)
[04:27:40] *** Joins: prs (~Priyanshu@47.247.193.197)
[04:27:41] *** Quits: flokuehn (~flokuehn@mue-88-130-54-225.dsl.tropolys.de) (Ping timeout: 265 seconds)
[04:28:00] *** Quits: prs (~Priyanshu@47.247.193.197) (Remote host closed the connection)
[04:28:06] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:28:13] *** Quits: extropiator (~admin@user/extropiator) (Client Quit)
[04:28:17] <kevr> How can I find out which exact stack trace generated a warning in pytest?
[04:29:21] *** Joins: flokuehn (~flokuehn@i5e86b381.versanet.de)
[04:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[04:30:36] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:12] *** Joins: djhankb (~djhankb@208.113.164.68)
[04:32:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:33:02] *** Joins: Player001 (~Player001@user/player001)
[04:34:38] *** Quits: sharperguy (~sharpergu@88.130.222.95) (Ping timeout: 260 seconds)
[04:34:44] *** Joins: vlm (~vlm@user/vlm)
[04:36:23] *** Joins: sharperguy (~sharpergu@88.130.218.231)
[04:42:19] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[04:45:49] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 252 seconds)
[04:46:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[04:53:27] *** Quits: Gaming4LifeDE (~Gaming4Li@a89-182-119-188.net-htp.de) (Ping timeout: 256 seconds)
[04:54:56] *** Joins: brabrax_ (~brabrax@user/brabrax)
[04:55:03] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:3503:f389:7cfa:e4dc)
[04:55:36] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 258 seconds)
[04:55:36] *** brabrax_ is now known as brabrax
[04:55:52] *** Joins: daddy (ryan@hashbang/bdfl)
[04:57:25] *** Joins: gableroux (~gableroux@bras-base-jnqrpq0202w-grc-22-76-65-187-26.dsl.bell.ca)
[04:57:59] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 264 seconds)
[04:59:20] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[05:00:19] *** Quits: gableroux (~gableroux@bras-base-jnqrpq0202w-grc-22-76-65-187-26.dsl.bell.ca) (Quit: Leaving)
[05:01:05] <aphysically> jinsun: is there some reason tuple[T, V, ...] is invalid anyway?
[05:01:13] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[05:01:14] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 260 seconds)
[05:01:38] <aphysically> = tuple[T,V] | tuple[T,V,V] | tuple[T,V,V,V] | ...
[05:02:27] <aphysically> maybe cause it's not intuitive? if that was valid it would have been possible to make a TypeGuard for the situation earlier
[05:02:48] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[05:02:58] *** Joins: The_Jag (~The_Jag@host-87-17-20-218.retail.telecomitalia.it)
[05:03:32] <nedbat> aphysically: tuples shouldn't be variable-length
[05:03:45] *** Joins: newpy (~newpy@206.168.231.90)
[05:03:55] *** Joins: Elodin (~weechat@user/elodin)
[05:04:18] <aphysically> well, the concern here isn't actually a tuple of variable length, but rules for type narrowing generic tuples
[05:05:10] *** Quits: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:22] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[05:06:45] *** Joins: Pandadub (~Barones@2804:7f3:8988:2195:2bd1:4996:c8e1:f6a7)
[05:06:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[05:07:52] <aphysically> nedbat: in particular, what we were *actually* trying to do is express that a tuple is not length 1
[05:07:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[05:08:19] <aphysically> (to a type checker)
[05:08:42] <nedbat> aphysically: there will always be things the type system can't express
[05:08:46] <aphysically> yes :D
[05:09:10] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:09:33] <KirkMcDonald> Well clearly that just means we need the type system to be Turing-complete.
[05:09:41] <aphysically> mypy has a PR that adds support for len() as a type narrowing pattern
[05:09:52] *** Joins: fikran (~fikran@user/fikran)
[05:09:57] <aphysically> (which would also be useful for literals, I guess)
[05:11:52] <aphysically> nedbat: to be fair I'm already pushing the limits here - I'm annotating a part of the rich codebase that does hot patching of repr methods to arbitrary types
[05:12:14] *** Joins: gableroux (~gableroux@bras-base-jnqrpq0202w-grc-22-76-65-187-26.dsl.bell.ca)
[05:12:46] <aphysically> It's probably not even reasonable to expect the type system to capture everything going on there (actually, it basically could except for a weird quirk of mypy that it always errors if you access the __init__ method - in this case it was accessed to inspect it)
[05:12:46] *** Quits: Pandadub (~Barones@2804:7f3:8988:2195:2bd1:4996:c8e1:f6a7) (Ping timeout: 252 seconds)
[05:14:31] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[05:15:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[05:17:15] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[05:18:30] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[05:21:51] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 244 seconds)
[05:21:58] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-f4ff-b696-f747-db95.res6.spectrum.com)
[05:22:32] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[05:22:48] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[05:23:10] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[05:23:30] *** Joins: nicode (~nic@2607:f2c0:93cf:4700:226:2dff:fe39:28ac)
[05:23:32] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[05:30:43] *** Joins: RiFo (~RiFo@user/rifo)
[05:30:54] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[05:31:29] *** Joins: djhankb (~djhankb@208.113.164.68)
[05:31:42] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[05:31:46] *** Quits: soc (~daedw@cpe-172-113-121-232.socal.res.rr.com) (Ping timeout: 245 seconds)
[05:32:09] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[05:32:42] *** Quits: sharperguy (~sharpergu@88.130.218.231) (Ping timeout: 244 seconds)
[05:33:11] *** Joins: KevinX (~KevinX@94.140.8.84)
[05:34:45] *** Joins: sharperguy (~sharpergu@88.130.219.95)
[05:35:38] <aphysically> jinsun: wait eric's code doesn't even work as-is
[05:36:52] *** Joins: BUSY (~BUSY@user/busy)
[05:36:53] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:37:53] *** Quits: KevinX (~KevinX@94.140.8.84) (Ping timeout: 244 seconds)
[05:40:11] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Ping timeout: 265 seconds)
[05:40:52] *** Joins: jonthesnow (~xizhendu@240e:305:7380:4300:d47:48bf:97c5:2de9)
[05:41:22] *** Quits: mawk (~mawk@wireguard/contributor/mawk) (Ping timeout: 252 seconds)
[05:41:38] *** Quits: Rikem (~mike@user/rikem) (Ping timeout: 265 seconds)
[05:41:59] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 246 seconds)
[05:42:03] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[05:42:17] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[05:43:11] <aphysically> "User-defined type guards apply narrowing only in the positive case (the if clause). The type is not narrowed in the negative case."
[05:43:24] <aphysically> this explains a lot
[05:43:53] *** Quits: enrh (~enrh@user/enrh) (Ping timeout: 264 seconds)
[05:44:19] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[05:44:39] *** Joins: enrh (~enrh@user/enrh)
[05:44:57] *** Joins: KevinX (~KevinX@94.140.8.81)
[05:45:14] *** Quits: redrum88 (~redrum88@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[05:45:47] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[05:47:24] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[05:47:37] *** Joins: pycurious (~Adium@user/pycurious)
[05:49:16] *** Quits: han-` (sid293063@id-293063.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[05:49:30] *** Quits: dOhtem (uid524096@user/dohtem) (Ping timeout: 260 seconds)
[05:49:36] *** Quits: eichin (sid27120@id-27120.tinside.irccloud.com) (Read error: Connection reset by peer)
[05:49:39] *** Joins: lk_ (sid504574@id-504574.ilkley.irccloud.com)
[05:49:39] *** Quits: bjs (sid190364@user/bjs) (Read error: Connection reset by peer)
[05:49:41] *** Quits: Knyght (sid365271@id-365271.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[05:49:41] *** Quits: ericoc (sid179921@id-179921.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[05:50:06] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[05:50:10] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 252 seconds)
[05:50:11] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[05:50:18] *** Joins: han-` (sid293063@helmsley.irccloud.com)
[05:50:25] *** Quits: lk (sid504574@id-504574.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[05:50:39] *** Joins: Evolver_ (sid32215@user/evolver)
[05:50:40] *** Quits: Yhg1s (sid387777@python/psf/thomas) (Ping timeout: 260 seconds)
[05:50:40] *** Quits: Evolver (sid32215@user/evolver) (Ping timeout: 260 seconds)
[05:50:41] *** Evolver_ is now known as Evolver
[05:50:47] *** Quits: Gaurhoth (sid75085@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[05:50:48] *** Quits: mustache_ride (sid451683@user/mustache-ride/x-6533344) (Ping timeout: 258 seconds)
[05:50:49] *** Quits: Tips|Cloud (sid62231@ilkley.irccloud.com) (Ping timeout: 265 seconds)
[05:51:04] *** Quits: debnet (sid330295@python/afpy/debnet) (Read error: Connection reset by peer)
[05:51:04] *** Quits: AhmedAmerican (sid470527@ilkley.irccloud.com) (Read error: Connection reset by peer)
[05:51:06] *** Joins: eichin (sid27120@tinside.irccloud.com)
[05:51:13] *** Joins: bjs (sid190364@user/bjs)
[05:51:21] *** Quits: crazysim (sid86009@id-86009.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[05:51:34] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (Ping timeout: 258 seconds)
[05:51:49] *** Quits: dez (uid92154@user/dez) (Ping timeout: 252 seconds)
[05:51:50] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 244 seconds)
[05:51:51] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[05:52:20] *** Joins: pycurious (~Adium@user/pycurious)
[05:52:24] *** Joins: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com)
[05:52:30] *** lk_ is now known as lk
[05:52:32] *** Joins: Knyght (sid365271@helmsley.irccloud.com)
[05:52:34] *** Joins: crazysim (sid86009@id-86009.hampstead.irccloud.com)
[05:52:36] *** Joins: dez (uid92154@user/dez)
[05:53:00] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[05:53:14] *** Joins: debnet (sid330295@python/afpy/debnet)
[05:53:15] *** Joins: Tips|Cloud (sid62231@id-62231.ilkley.irccloud.com)
[05:53:17] *** Joins: AhmedAmerican (sid470527@id-470527.ilkley.irccloud.com)
[05:53:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[05:54:09] *** Joins: EWDurbin (sid38710@id-38710.tinside.irccloud.com)
[05:54:15] *** Joins: Gaurhoth (sid75085@id-75085.ilkley.irccloud.com)
[05:54:16] *** Joins: mustache_ride (sid451683@user/mustache-ride/x-6533344)
[05:55:43] *** Quits: StormDancer (~stormdanc@185.245.86.123) (Remote host closed the connection)
[05:56:54] *** Joins: dohtem (uid524096@user/dohtem)
[05:57:43] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[05:58:20] *** Joins: srhm (~srhm@user/srhm)
[05:58:38] *** Joins: Fiji (~Fiji@user/fiji)
[05:59:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[05:59:38] *** Quits: grys (~quassel@botters/gry) (Quit: .)
[06:00:37] *** Quits: AhmedAmerican (sid470527@id-470527.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:00:46] *** Quits: crazysim (sid86009@id-86009.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:00:59] *** Quits: EWDurbin (sid38710@id-38710.tinside.irccloud.com) (Ping timeout: 264 seconds)
[06:01:10] *** Quits: Gaurhoth (sid75085@id-75085.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:10] *** Quits: lk (sid504574@id-504574.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[06:01:27] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[06:01:35] *** Quits: mustache_ride (sid451683@user/mustache-ride/x-6533344) (Ping timeout: 264 seconds)
[06:01:35] *** Quits: cuppajoeman (sid521943@id-521943.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[06:02:11] *** Quits: debnet (sid330295@python/afpy/debnet) (Ping timeout: 264 seconds)
[06:02:11] *** Quits: Tips|Cloud (sid62231@id-62231.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[06:02:16] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[06:02:18] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 258 seconds)
[06:02:20] *** Quits: Sario (sid356235@miraheze/Sario528) (Ping timeout: 260 seconds)
[06:02:41] *** Quits: dohtem (uid524096@user/dohtem) (Ping timeout: 258 seconds)
[06:02:43] *** Joins: shawwwn (uid6132@helmsley.irccloud.com)
[06:02:47] *** Quits: dez (uid92154@user/dez) (Ping timeout: 264 seconds)
[06:02:47] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 264 seconds)
[06:03:00] *** Joins: EWDurbin (sid38710@tinside.irccloud.com)
[06:03:02] *** Joins: AhmedAmerican (sid470527@ilkley.irccloud.com)
[06:03:03] *** Joins: cuppajoeman (sid521943@hampstead.irccloud.com)
[06:03:04] *** Joins: dohtem (uid524096@user/dohtem)
[06:03:09] *** Joins: whatsupdoc (uid509081@hampstead.irccloud.com)
[06:03:09] *** Joins: Sario (sid356235@miraheze/Sario528)
[06:03:10] *** Joins: crazysim (sid86009@hampstead.irccloud.com)
[06:03:54] *** Joins: dez (uid92154@user/dez)
[06:04:06] *** Joins: debnet (sid330295@python/afpy/debnet)
[06:04:11] *** Joins: lk (sid504574@ilkley.irccloud.com)
[06:04:11] *** Joins: mustache_ride (sid451683@user/mustache-ride/x-6533344)
[06:04:13] *** Joins: Gaurhoth (sid75085@ilkley.irccloud.com)
[06:05:34] *** Joins: ericoc (sid179921@uxbridge.irccloud.com)
[06:05:46] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[06:06:58] *** Quits: ubsyyz (~ubstoront@172-97-184-5.cpe.distributel.net) (Quit: Leaving)
[06:10:30] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[06:11:23] *** Joins: sydbarret (~anton@static-186-121-195-245.acelerate.net)
[06:11:45] *** Joins: tg (~tg@rockylinux/infra/tg)
[06:13:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:14:51] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:16:23] *** Joins: Tips|Cloud (sid62231@ilkley.irccloud.com)
[06:16:57] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[06:20:02] *** Quits: sydbarret (~anton@static-186-121-195-245.acelerate.net) (Remote host closed the connection)
[06:21:57] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[06:22:26] *** Quits: rany (~rany@user/rany) (Ping timeout: 260 seconds)
[06:23:36] *** Joins: voldial (~user@user/voldial)
[06:25:10] <voldial> is there a way to write a function to guard against "if not root_user:" when you really wanted "if not root_user():"? If that's possible... it's gotta be a class attribute of that function instance right? I dont know how to do that with something made with "def" and not "class"
[06:26:23] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[06:27:09] <KirkMcDonald> voldial: It'd be a property of the function type itself, which is defined in C and cannot be modified from Python code.
[06:27:52] <KirkMcDonald> But basically it's a result of the function type inheriting object's __bool__ method.
[06:28:01] <KirkMcDonald> Which always returns True.
[06:30:39] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[06:31:14] *** Joins: djhankb (~djhankb@208.113.164.68)
[06:31:42] <voldial> KirkMcDonald: aaah. ok. hm. (just thinking outloud) mmmaybe something like "python -O", at the very least it would be nice to use in testing
[06:34:10] <voldial> not sure how that would work... maybe a ReferencedFunctionInstanceError that only happens with the theoritical -OO flag
[06:34:31] <voldial> kinda the opposite of -O I realize..
[06:34:49] * voldial goes back to work
[06:35:32] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[06:37:09] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[06:38:11] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 264 seconds)
[06:38:54] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[06:46:47] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:54:12] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:55:31] *** Joins: martums (~martums@user/martums)
[06:55:39] *** Joins: Elodin (~weechat@user/elodin)
[06:58:04] *** Quits: whatsupdoc (uid509081@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:01:08] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:03:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:08:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[07:12:20] *** Joins: jetchisel (jetchisel@user/jetchisel)
[07:13:10] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[07:13:19] *** Joins: anonymeowo (~anonymeow@5.34.180.230)
[07:15:21] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[07:15:46] *** Joins: dbristow (~dbristow@user/dbristow)
[07:16:00] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[07:17:26] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[07:19:14] *** Joins: fikran (~fikran@user/fikran)
[07:19:23] *** Joins: mexen_ (uid495612@user/mexen)
[07:20:12] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:21:10] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:21:47] *** Joins: aac (~AAC@2001:8a0:6cc5:7e01:31cf:508f:5c15:dadc)
[07:22:11] <aac> hey. I have a string "01010110" ,how do i convert it to a ascii char?
[07:23:34] *** mexen_ is now known as mexen-kun
[07:23:35] <leduyquang753> Turn to int, then pass to chr.
[07:24:48] <aac> ValueError: chr() arg not in range(0x110000)
[07:24:58] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[07:25:52] *** Quits: alkino (~quassel@user/alkino) (Ping timeout: 258 seconds)
[07:26:18] *** Joins: alkino (~quassel@user/alkino)
[07:27:01] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:27:36] <aac> i miss two leading zeros :/
[07:27:47] *** Quits: snalty (~Shhh@user/snalty) (Ping timeout: 258 seconds)
[07:28:15] *** Joins: llh (~llh@user/llh)
[07:28:15] *** Joins: snalty (~Shhh@user/snalty)
[07:28:41] <Repiphany> 0x is hex, not binary
[07:29:11] <Repiphany> chr(0b01010110)
[07:29:35] <aac> no no...i have a string not a binary number
[07:29:45] <aac> i have a string of type "01011011..."
[07:29:57] <aac> oh ok
[07:29:58] <aac> lol
[07:30:07] <aac> so i need to convert to binary
[07:30:07] <aac> how
[07:30:16] <Repiphany> int("01010110", base = 2)
[07:30:20] <aac> ah ok thks
[07:30:21] <aac> :)
[07:30:29] <aac> that simple hey :..:)
[07:31:30] <nicode> 86?
[07:32:41] *** Joins: ishigoya (~ishigoya@user/ishigoya)
[07:33:19] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-793f-39d2-9560-b7d9.res6.spectrum.com) (Read error: Connection reset by peer)
[07:34:44] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[07:35:21] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Remote host closed the connection)
[07:35:45] *** Joins: anonymeowo (~anonymeow@5.34.180.230)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:37:03] *** Roey is now known as ArtilleryChef
[07:37:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[07:39:48] *** Joins: Dunce (~Nick@51.158.144.32)
[07:40:32] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 265 seconds)
[07:41:15] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[07:42:40] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 260 seconds)
[07:44:06] *** Joins: analoq (~yashi@user/dies)
[07:47:40] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[07:49:05] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 260 seconds)
[07:51:28] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Quit: hyskaru)
[07:52:21] *** Quits: Dunce (~Nick@51.158.144.32) (Quit: Leaving)
[07:56:15] *** Joins: ofou (~ofou@181.160.162.161)
[07:57:15] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[07:59:14] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[08:00:23] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 264 seconds)
[08:02:39] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[08:04:07] *** Joins: djapo (~archangel@user/djapo)
[08:06:35] *** Joins: Maikel (~Maikel@130.61.63.136)
[08:10:49] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.0.1)
[08:12:21] *** Joins: Echoz (~chris@user/echoz)
[08:12:50] <jinsun> aphysically: yeah the typeguard works for if only, the else doesn't' narrow
[08:12:59] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 264 seconds)
[08:13:15] *** Quits: aac (~AAC@2001:8a0:6cc5:7e01:31cf:508f:5c15:dadc) (Remote host closed the connection)
[08:13:18] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:14:06] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:14:32] *** Quits: Sadale (~Sadale@user/sadale) (Quit: tawa pona!)
[08:15:41] *** Joins: Sadale (~Sadale@user/sadale)
[08:16:24] *** Joins: yeirr (~yeirr@user/yeirr)
[08:18:36] <jinsun> aphysically: and tuple should be homogeneous if arbitrary length, can have it both ways (heterogeneous and arbitrary length), I guess because it would be too much work for the type checkers for a rare use case
[08:18:54] <jinsun> s/can/can't
[08:20:41] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[08:21:23] *** Joins: elkclone (~elkclone@user/elkclone)
[08:23:13] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 244 seconds)
[08:24:22] *** ArtilleryChef is now known as Roey
[08:24:26] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[08:25:42] *** Joins: ericlee (~ericlee@2601:647:4681:3420::2)
[08:25:57] *** Joins: parv (~quass@user/parv)
[08:26:06] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[08:27:34] <ericlee> Hi, I have dumb q here. If list comprehension exists, why we need map() function? Is there benefit to use map() ?
[08:28:35] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[08:29:40] *** Joins: node1 (~node1@user/node1)
[08:30:35] *** Joins: carl-- (~carl-@185.103.188.130)
[08:31:27] *** Quits: ofou (~ofou@181.160.162.161) (Quit: WeeChat 3.3)
[08:32:07] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:3503:f389:7cfa:e4dc) (Read error: Connection reset by peer)
[08:33:25] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[08:33:32] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 244 seconds)
[08:35:53] <node1> Hi
[08:36:06] <node1> Please find my problem here https://bpa.st/ONHQ
[08:37:28] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Read error: Connection reset by peer)
[08:42:01] <aphysically> jinsun: I'll ping the pyright issue if mypy ever implements to watch it
[08:42:30] <elkclone> ericlee: The map function executes a specified function for each item in an iterable. The item is mashed into the  function just a a paramter a bunch of times. :D
[08:42:33] <aphysically> I mean it's not a common thing in public type checked code right now but that's obviously a self-fulfilling prophecy so you really have to wait to see if it becomes a common thing after a major type checker implements it
[08:42:59] <elkclone> *as a parameter
[08:44:43] <ericlee> node1, https://pastebin.com/HGU8rUxs
[08:44:48] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[08:45:05] <ericlee> elkclone, so it yields results, I see
[08:45:18] <elkclone> I think list comprehension is cool just a different thing
[08:47:14] <ericlee> yeah, seems map is faster. :-)
[08:47:29] <elkclone> list comprehension to me is just a short form of an itterative proceedure and a function that can select specific subsets from a given list based on paramters given in the new form of the list created by the comprehension.
[08:48:15] *** Joins: jazzy (~jaziz@user/jaziz)
[08:49:07] <ericlee> elkclone, but to compare w/ map(), list comp is more memory consuming right? because the return of map() is iter
[08:50:34] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[08:51:20] *** Quits: carl-- (~carl-@185.103.188.130) (Remote host closed the connection)
[08:51:36] *** Joins: carl-- (~carl-@185.103.188.130)
[08:52:21] <elkclone> map() seems to imply that you could grind any variable or parameter into a very complex map() function in the mathematical sense.
[08:52:54] <elkclone> not selectiing specific variables in a list.
[08:53:05] <elkclone> just different things.
[08:53:22] <ericlee> in that case i would say perl's map is more useful and reasonable because perl does not have list comp ;-P
[08:54:28] <elkclone> again they are not the same thing. they are used differently so for me the comparison is not mutually exclusive.
[08:55:28] *** Joins: Dunce (~Dunce@51.158.144.32)
[08:57:19] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 244 seconds)
[08:58:33] <ericlee> +1
[08:59:48] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[09:05:20] *** Quits: bn_work (uid268505@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[09:06:00] <jinsun_> ericlee: you can get the lazy map like behaviour with a generator expression too
[09:06:05] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Ping timeout: 260 seconds)
[09:06:34] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 265 seconds)
[09:06:51] <jinsun_> map can be replaced entirely by those really, map just looks need neater in some cases
[09:08:11] *** Quits: Alleria (~textual@user/alleria) (Ping timeout: 264 seconds)
[09:11:55] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 260 seconds)
[09:13:49] *** Quits: Dunce (~Dunce@51.158.144.32) (Quit: Leaving)
[09:18:59] *** Joins: Dunce (~Dunce@gateway/tor-sasl/dunce)
[09:21:33] *** Quits: newpy (~newpy@206.168.231.90) (Quit: Leaving)
[09:23:13] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[09:24:10] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[09:24:34] *** Quits: ckdCreations (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[09:26:34] *** Joins: ckdCreations (~ckdCreati@147.55.133.134)
[09:26:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[09:28:36] *** Joins: fikran (~fikran@user/fikran)
[09:31:56] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[09:34:01] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 252 seconds)
[09:34:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:34:26] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-f4ff-b696-f747-db95.res6.spectrum.com) (Quit: Leaving.)
[09:35:19] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[09:35:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:36:02] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-60aa-0f20-5949-7c58.res6.spectrum.com)
[09:38:13] *** Quits: km (~km@user/km) (Quit: Leaving)
[09:40:09] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[09:40:41] *** Quits: nomic (~nomic@185.198.243.184) (Quit: Leaving)
[09:40:49] *** Joins: km (~km@user/km)
[09:41:04] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a)
[09:43:08] *** Joins: rendar (~rendar@user/rendar)
[09:47:14] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:48:03] *** Joins: seednode4 (~seednode@user/seednode)
[09:48:16] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[09:48:51] *** Quits: km (~km@user/km) (Ping timeout: 258 seconds)
[09:50:01] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:d34f:4c5c:62a0:145a)
[09:50:49] *** Joins: km (~km@user/km)
[09:52:05] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[09:54:12] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:54:40] *** Quits: carl-- (~carl-@185.103.188.130) (Ping timeout: 244 seconds)
[09:55:27] *** Quits: km (~km@user/km) (Client Quit)
[09:55:42] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[09:55:56] *** Joins: yeirr (~yeirr@user/yeirr)
[09:58:35] *** Quits: jonthesnow (~xizhendu@240e:305:7380:4300:d47:48bf:97c5:2de9) (Ping timeout: 264 seconds)
[09:59:19] *** Quits: Nact (~l@host-85-27-120-251.dynamic.voo.be) (Quit: Konversation terminated!)
[10:00:19] *** Joins: km (~km@user/km)
[10:02:07] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[10:04:15] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[10:04:32] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[10:06:30] *** Quits: emf (~emf@2620:10d:c090:400::5:bb17) (Quit: emf)
[10:07:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[10:09:05] *** Quits: shan (shan@cyblog/maintainer/shan) (Ping timeout: 260 seconds)
[10:14:22] *** Joins: upsala (~zcb@185.254.75.51)
[10:17:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:19:22] *** Joins: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar)
[10:19:48] *** Joins: shan (shan@cyblog/maintainer/shan)
[10:20:10] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[10:20:32] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:21:32] *** Quits: upsala (~zcb@185.254.75.51) (Ping timeout: 244 seconds)
[10:22:03] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[10:23:25] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[10:23:41] *** Joins: upsala (~zcb@185.213.155.160)
[10:23:43] *** Quits: Dunce (~Dunce@gateway/tor-sasl/dunce) (Remote host closed the connection)
[10:23:52] *** Joins: manti7 (~manti7@176.10.104.94)
[10:24:40] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[10:25:22] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:26:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:27:50] *** Joins: hoodwinked (~hoodwinke@user/hoodwinked)
[10:28:29] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[10:30:05] *** Joins: Akawama[m] (~akawama@user/akawama)
[10:31:47] *** Joins: toverna (~uni@95-30-2-84.broadband.corbina.ru)
[10:32:04] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:32:57] *** Parts: Akawama[m] (~akawama@user/akawama) ()
[10:34:55] *** Joins: maum (~maum@1.245.147.30)
[10:34:58] <maum> hello
[10:35:44] <maum> Is there a way to hide specific menu in jupyter?
[10:36:04] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[10:36:17] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-60aa-0f20-5949-7c58.res6.spectrum.com) (Quit: Leaving.)
[10:36:23] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:36:24] *** Quits: resmo_ (~resmo@2a00:d420:9:8a00:eabc:61f1:885a:511e) (Remote host closed the connection)
[10:37:07] *** Joins: tobybl (~tobybl@213.31.135.91)
[10:39:46] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.3)
[10:39:51] *** Quits: toverna (~uni@95-30-2-84.broadband.corbina.ru) (Quit: Konversation terminated!)
[10:40:40] *** Joins: palasso (~palasso@user/palasso)
[10:42:48] *** Quits: maum (~maum@1.245.147.30) (Quit: Client closed)
[10:47:16] *** Joins: duoi (~duoi@user/duoi)
[10:49:53] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[10:54:52] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Quit: Client closed)
[10:56:22] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[10:58:11] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[10:59:15] *** Joins: alzgh (~alzgh@user/alzgh)
[11:01:34] *** Joins: slav0nic (slav0nic@python.su)
[11:02:11] *** Joins: jug (~jug@user/jug)
[11:04:06] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:04:18] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[11:09:56] *** Joins: src (~src@user/src)
[11:10:49] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[11:11:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[11:13:49] *** Joins: Keira (~k@lulzsec.co.uk)
[11:15:35] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[11:19:09] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[11:23:28] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Read error: Connection reset by peer)
[11:23:50] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 265 seconds)
[11:23:53] *** Joins: control (~v1@user/control)
[11:24:53] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[11:25:44] *** Joins: Coldblackice (~c@user/coldblackice)
[11:25:47] <control> hello, im having this code: https://bpa.st/VL6A . i want to get the same random 12 words in every process. currently im having all randowm words in every process. what im doing wrong?
[11:29:13] <parv> control, if you want same pseudorandomness, seed it (consult the doc)
[11:29:43] <control> i just want to get same random words in every process
[11:29:52] <parv> seed!
[11:30:45] *** Quits: iflema (~ian@user/iflema) (Ping timeout: 244 seconds)
[11:31:15] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:33:05] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[11:33:08] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:33:08] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:33:12] *** Joins: roro (roro@user/roro)
[11:33:55] <control> unhashable type: 'list'
[11:34:34] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Remote host closed the connection)
[11:35:38] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:40] <parv> random.seed: https://docs.python.org/3.9/library/random.html?highlight=random%20seed#random.seed
[11:35:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[11:36:37] *** Joins: kosh (~kosh@user/kosh)
[11:36:51] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[11:37:57] *** Joins: fikran (~fikran@user/fikran)
[11:38:07] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:38:26] <control> got that mf working, thans parv!
[11:38:39] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:38:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:54] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[11:40:22] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:40:43] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[11:41:38] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[11:41:41] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[11:41:43] <control> parv, so now im getting same words in all processes, great. but how can i randomize those 12 words in every process?
[11:42:05] *** Joins: r3m (~launch@user/r3m)
[11:42:15] <tsujp> can I use a list comprehension to perform a calculation over all children of the list at once? e.g. `for child in node.children:` and do the calculation except all in a list comprehension?
[11:42:32] *** Quits: hoodwinked (~hoodwinke@user/hoodwinked) (Quit: Going offline, see ya! (www.adiirc.com))
[11:42:38] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Ping timeout: 244 seconds)
[11:42:52] <parv> control, see random.shuffle
[11:43:20] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:43:47] *** Joins: Disposeable-Nick (~Ident@user/disposeable-nick)
[11:44:14] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 258 seconds)
[11:44:16] <parv> tsujp, what would be the end result: a list or a single variable?
[11:45:49] <tsujp> parv the end result is an ordered list, so for each `child` a method is called `calculate_score(child)` and the resulting list is the list of `child`s ordered highest to lowest
[11:45:55] <control> parv: im getting None value
[11:46:00] *** Joins: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr)
[11:46:01] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 252 seconds)
[11:46:01] <parv> control, code?
[11:46:31] <control> https://bpa.st/RWHA
[11:46:55] <parv> tsujp, tried [ f(x) for y.x ]?
[11:46:56] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[11:48:08] <parv> control, Please see the doc of random.shuffle at https://docs.python.org/3.9/library/random.html
[11:51:12] *** Quits: Appli000 (~Thunderbi@176-161-23-89.abo.bbox.fr) (Quit: Appli000)
[11:52:22] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[11:52:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[11:53:55] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:54:16] <control> https://bpa.st/LXOQ - still getting none value
[11:56:10] <control> seems seed has locked the suffle
[11:57:25] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Remote host closed the connection)
[11:57:32] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[11:57:47] *** Joins: ionface (~ionface@user/ionface)
[11:57:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:58:34] <tsujp> parv if I do `[self.compute_ucb1(n) for n in node.children]` I get a list of their scores but I want a list of the nodes ordered by their scores
[11:58:46] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[12:00:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:01:37] <parv> tsujp, Sorry I missed the part of sorting by score.
[12:03:00] <Disposeable-Nick> Hi, could someone help me with this: https://dpaste.com/2KJEDSGKJ | all the help I'm asking for is included in the paste.
[12:04:09] <parv> control, random.shuffle() does not return a new list; list is shuffled in situ
[12:04:32] <Disposeable-Nick> grawity, if you're here, I know you could solve it in 5 second xD
[12:04:36] <parv> tsujp, Yeah, setting a seed causes the same outcome from shuffle
[12:05:09] <parv> tsujp, Sorry about last reply, meant for control
[12:06:05] <parv> control, Only way I see is to not set a seed & just use randint
[12:06:22] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[12:06:40] <parv> control, Alternatively forget seed & randint; just use shuffle
[12:07:18] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:07:20] <control> then it gets random words in every process
[12:07:32] <control> i want only randomise 12 words in every process
[12:07:53] <control> https://bpa.st/O6OA
[12:08:17] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:08:23] <control> get 12 words from big list, randomise it in every process. thats it
[12:09:15] <parv> tsujp, You should be able to sort via sorted() or in situ via list.sort() with key in a lambda function; or custom __eq__ etc for the object
[12:09:51] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[12:10:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:11:04] <parv> tsujp, try this : sorted( y, key = lambda x : f(x) )
[12:11:37] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[12:12:00] <parv> tsujp, no that won't work ...
[12:12:15] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[12:12:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[12:12:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 252 seconds)
[12:12:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[12:13:00] *** Joins: tobybl_ (~tobybl@213.31.135.91)
[12:14:05] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[12:14:07] *** Joins: orangeextract (~orangeext@user/orangeextract)
[12:14:09] *** Quits: tobybl_ (~tobybl@213.31.135.91) (Remote host closed the connection)
[12:14:24] *** Joins: iflema (~ian@user/iflema)
[12:14:26] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:14:36] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:15:12] *** Quits: tobybl (~tobybl@213.31.135.91) (Ping timeout: 244 seconds)
[12:17:02] <parv> tsujp, sorted( [ x for y.x ], key = lambda r: f( r ) )
[12:17:05] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:17:06] *** Quits: greknod28 (~grek@120.88.171.98) (Ping timeout: 260 seconds)
[12:17:46] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[12:18:31] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Remote host closed the connection)
[12:18:48] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:19:34] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[12:19:59] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[12:21:18] *** Joins: rany (~rany@user/rany)
[12:21:21] <control> parv: can we try to figure it out?
[12:21:41] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:21:42] <parv> control, So extract how many words you want outside of worker(); shuffle that in worker()
[12:22:12] *** Joins: tobybl (~tobybl@213.31.135.91)
[12:22:15] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[12:22:19] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[12:22:26] <control> only 12 words ouyt of 2048, then randomize it and use that 12 words in every process
[12:22:53] <control> https://bpa.st/O67A
[12:22:57] *** Quits: nfc_ (nfc@tilde.institute) (Ping timeout: 258 seconds)
[12:23:00] <parv> control, Your requirement is either not clear or keep changing
[12:24:17] <parv> control, With latest change in mind, extract & shuffle outside of worker(); pass the shuffled list to it
[12:24:59] <control> and it gives me None
[12:25:04] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Remote host closed the connection)
[12:25:15] <control> https://bpa.st/YXRA
[12:26:33] *** Joins: sarna (~sarna@c40-227.icpnet.pl)
[12:27:30] *** Quits: sarna (~sarna@c40-227.icpnet.pl) (Remote host closed the connection)
[12:27:31] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:28:27] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[12:28:29] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[12:29:19] <parv> control, You had already shuffled via sample() which returns a list; no need to use shuffle() again which does not return a value as mentioned earlier. Also: https://termbin.com/jvga0
[12:30:03] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:31:01] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:31:12] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[12:31:27] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[12:33:38] *** Joins: ambasta (~ambasta@89.46.62.147)
[12:34:08] <ambasta> Can shutil.move cause corruption in a file if its being written to when shutil.move is invoked?
[12:34:44] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[12:35:05] <ambasta> Specifically, I am trying to move rotated logfile which are gzipped and subsequently extracting them for processing
[12:35:27] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[12:35:42] <ambasta> However, arbitrary gzip extractions fail due to EOFError and I suspect it us due to python moving the files before they've been written to/rotated completely
[12:36:59] *** Joins: p-i- (~Ohmu@mx-ll-223.206.147-206.dynamic.3bb.co.th)
[12:37:07] <parv> There be race conditions!
[12:37:30] <ambasta> I think so.. but not sure if shutil moves safely or not
[12:37:32] <parv> ambasta, shutil or os.rename do not promise atomic operation
[12:37:41] <p-i-> https://bpa.st/ROKA <-- Why does `python -VV` show Clang 12.0.5 but `clang --version` shows 13.0.0 ?  (macOS)
[12:38:07] <ambasta> p-i-, python was compiled w/ an older version of clang
[12:38:27] <ambasta> parv, how does one implement atomic moves
[12:38:38] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:38:41] <p-i-> I see
[12:39:05] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Remote host closed the connection)
[12:39:06] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:07] <p-i-> Is there a recommended way to get an up-to-date Python .venv on macOS?
[12:39:29] <parv> ambasta, Best one could do is use file locking with opening a file with exclusive lock. Still locks would work if everyone cooperates.
[12:39:53] <ambasta> p-i- wdym up to date venv, do you mean up to date python?
[12:40:07] <parv> ambasta, I do not know; largely depends on file system too
[12:41:45] <ChrisWarrick> p-i-: python 3.9 is a reasonable version
[12:42:04] <ChrisWarrick> p-i-: if you really want 3.10, then you can install with homebrew or pyenv
[12:42:22] *** Joins: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar)
[12:43:01] <p-i-> On my linux box I'm doing this to use Python 3.10: https://bpa.st/6KNQ
[12:43:26] <p-i-> Can I improve on this process? deadsnakes/ppa fails on ubuntu > 20.04
[12:43:29] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:43:42] <p-i-> tx ChrisWarrick
[12:43:48] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[12:43:57] <ambasta> parv, on linux, shouldn't move not affect the file itself since the writer should still have the fd
[12:44:07] <Repiphany> Use pyenv to build and use separate python versions
[12:44:07] *** Joins: r3m (~launch@user/r3m)
[12:44:08] <ChrisWarrick> p-i-: you could use pyenv on linux
[12:44:24] <ambasta> ah nm, cross fs move
[12:44:31] <p-i-> I'm not too fussed about 3.9/10. But I'm hitting https://github.com/Lnk2past/copperhead/issues/12 (hello world fail) on this repo (C++ inlined into Python code)
[12:44:39] *** Quits: elkalamar__ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[12:45:04] <p-i-> And the fact that `python -VV` reports an old Clang version makes me think to upgrade my Python.
[12:45:39] <ambasta> Upgrading python doesn't neccessarily change the version used to build python
[12:45:45] <ambasta> Unless you're building python yourself
[12:46:12] <Disposeable-Nick> Hi, been about 30 mins, could anyone possibly help me out with this? https://dpaste.com/2KJEDSGKJ | all help I'm asking for is in the paste.
[12:47:16] <ChrisWarrick> Disposeable-Nick: your indentation looks wrong
[12:47:31] <ChrisWarrick> Disposeable-Nick: also, `elif:` must have a condition afterwards (did you mean `else`?)
[12:47:50] *** Joins: rk04 (~rk04@user/rajk)
[12:48:39] <Disposeable-Nick> ChrisWarrick, the issue is if not master, I don't know what to change that to, and of course the elif as well, also don't know what to adjust it to, "else" failed to work too.
[12:49:05] <ChrisWarrick> Disposeable-Nick: well, this is a pretty bad way to write an IRC bot
[12:49:20] <Disposeable-Nick> ChrisWarrick, my bot works fine
[12:49:24] <ChrisWarrick> Disposeable-Nick: no, it does not.
[12:49:27] <Repiphany> `if not master:` just checks if the string `master` is empty or not
[12:49:50] <Disposeable-Nick> I just wanted an additional if statement to respond if the person isn't me using the command
[12:49:57] <ChrisWarrick> Disposeable-Nick: you’re doing very low-level stuff with IRC. Also, IRC is a line-oriented protocol, and you’re thinking of it as one blob.
[12:49:57] <p-i-> Disposeable-Nick: Do you understand scope-via-indenting?
[12:50:01] <Disposeable-Nick> The command by itself works
[12:50:01] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:50:02] *** Joins: nfc_ (nfc@tilde.institute)
[12:50:08] <ambasta> Disposeable-Nick, could you pastebin the indented code?
[12:50:39] <parv> Disposeable-Nick, Care to wrap up long lines & make them (Python) comment as the syntax highlight makes your request rather hard to read.
[12:50:57] <Disposeable-Nick> parv, yeah, I noticed that too, my bad
[12:51:24] <parv> Disposeable-Nick, There is always next time
[12:51:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:52:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[12:52:23] <ChrisWarrick> Nick!~Ident@Host PRIVMSG #Python :!Mquit
[12:52:29] <ChrisWarrick> there, I just killed the bot
[12:52:51] <p-i-> Disposeable-Nick: If your code really is mis-indented like this, you may to address a fundamental lack of understanding. How to get anything done if you don't grok the control-flow through your code?
[12:53:13] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[12:53:15] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:54:31] *** Joins: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk)
[12:54:42] <lesshaste> how do you pick a random number from -10 to 10 but excluding 0?
[12:55:11] <Disposeable-Nick> p-i-, no, the actual code has no indentation issues, I'm pasting the entire code to dpaste in a moment.
[12:55:28] <KirkMcDonald> lesshaste: Pick a number from -9 to 10 and subtract 1 if it's <= 0.
[12:55:32] <ChrisWarrick> lesshaste: you pick a number between -10 and 9 and add 1 if it’s >= 0
[12:55:49] <supakeen> :D
[12:55:49] <KirkMcDonald> It's war, then.
[12:55:52] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[12:55:58] <p-i-> ;)
[12:56:01] <ambasta> Pick a random(0, 1) * -1 * random(1, 9)
[12:56:15] <deniska> lesshaste: random.choice([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
[12:56:41] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[12:56:48] <KirkMcDonald> random.randrange(1, 11) * random.choice([1, -1])
[12:56:59] <ambasta> ^
[12:57:12] <lesshaste> KirkMcDonald, much nicer!
[12:57:15] <lesshaste> KirkMcDonald, thanks
[12:57:27] <supakeen> list(range(-10, 11))[random.randint(0, 20)]?
[12:57:36] <p-i-> yes symmetry ftw
[12:57:39] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:58:13] <supakeen> Oh the excluding 0.
[12:58:16] <supakeen> Nevermind.
[12:58:18] <lesshaste> supakeen, yep
[12:58:19] * supakeen scurries away.
[12:58:58] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[12:59:24] <supakeen> `while not (number := random.randint(-10, 10)): pass; number`?
[12:59:59] <lesshaste> supakeen, that's cute
[13:00:02] <supakeen> It only gets worse from here.
[13:00:04] <lesshaste> and horrible :)
[13:00:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:00:49] <p-i-> There might be another horrible way using `next`.
[13:01:13] <supakeen> itertools.takewhile as well :)
[13:02:07] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:05:35] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:05:38] <ambasta> How to detect if a file is being written to?
[13:08:21] <Disposeable-Nick> https://dpaste.com/5HSZ3A6D7 | full code, bot working, only need help with one command only
[13:08:50] <Disposeable-Nick> Just need proper adjustments for one command, that's all.
[13:08:55] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[13:09:20] <ambasta> Disposeable-Nick, that code is definitely wrong .. elif is in a dangling block without a condition
[13:09:48] <Disposeable-Nick> mboehn, I know the specific command is wrong, I just need help to make it right
[13:09:51] <Disposeable-Nick> er
[13:09:51] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:10:00] <Disposeable-Nick> ambasta,
[13:10:03] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[13:10:30] <Disposeable-Nick> Sorry for TAB fail there.
[13:11:55] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:12:09] <ambasta> additionally, master is never modified, so why would it be empty?
[13:12:46] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[13:13:35] *** Quits: p-i- (~Ohmu@mx-ll-223.206.147-206.dynamic.3bb.co.th) (Ping timeout: 264 seconds)
[13:13:55] <Disposeable-Nick> ambasta, the incorrect code serves as an example of me attemting to make it, I just need help to finish it correctly
[13:14:06] <Disposeable-Nick> attempting *
[13:14:17] <ambasta> What is that section trying to do?
[13:14:45] <Disposeable-Nick> if the issuer Nickname of the command, is not the bot's master, I.E doesn't match the identifier string of the master, then | :You do NOT match master string! \r\n") | gets posted to channel and the bot does not quit, but if master is a match, then it will QUIT.  I hope you understand what I'm trying to do.
[13:18:14] <ambasta> Disposeable-Nick https://dpaste.com/8Z8455EFJ ?
[13:19:09] *** Joins: rk04 (~rk04@user/rajk)
[13:19:22] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:20:01] <Disposeable-Nick> ambasta, you're kind of where I'm at with it, just isn't quite there yet.
[13:20:14] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[13:20:29] *** Joins: Dcode200 (~pede@87-63-32-71-dynamic.dk.customer.tdc.net)
[13:20:40] <ambasta> Remove the %master in the first line there
[13:22:36] <Disposeable-Nick> ambasta, and that'll work?
[13:23:51] <ambasta> Disposeable-Nick: https://code.labstack.com/yFXw2DTg
[13:24:40] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 258 seconds)
[13:25:09] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[13:25:14] <Disposeable-Nick> I'll give it a shot
[13:25:54] *** Joins: srhm (~srhm@user/srhm)
[13:26:10] <parv> Disposeable-Nick, ambasta First test for '!Mquit' is a subset of the second set, so why is there a need for the first test?
[13:26:21] <parv> s/set/test/
[13:26:50] <ambasta> parv, well he should be using regex to find username and matching it to master
[13:27:10] <ambasta> But since he wants to explicitly match username by specifying it as part of the matching string, left it that way
[13:27:37] <ambasta> Also, that code is subject to abuse by someone pasting the command prefixed by w/e the master username is to the bot
[13:27:44] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[13:27:48] <Disposeable-Nick> master = ambasta!~ambasta@89.46.62.147 | as an example
[13:28:19] <Disposeable-Nick> Not just username, entire nick ident host
[13:28:26] <Disposeable-Nick> You understand?
[13:29:15] <Disposeable-Nick> There is no way it can be trigger by anyone else that way
[13:29:18] <ambasta> That's irrelevant
[13:29:22] <Disposeable-Nick> triggered *
[13:29:23] <ambasta> I don't see how you set master
[13:29:34] <ambasta> As far as the code is concerned, master is just a string there
[13:29:46] *** Joins: StormDancer (~stormdanc@185.245.86.123)
[13:31:12] <Disposeable-Nick> Anyway, as long as the updated pasted code works, it's all good, I'll test it now
[13:31:28] <parv> ambasta, OK. I also realized later that first test controls output of admonishment (else that would be printed for any non "Mquit" string.
[13:31:39] <parv> )
[13:31:57] <ambasta> Its just bad code
[13:37:01] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:41:08] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[13:41:14] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:41:33] <Disposeable-Nick> ambasta, it doesn't appear to work
[13:41:42] *** Joins: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il)
[13:41:45] <Disposeable-Nick> Any suggestion?
[13:42:16] <ChrisWarrick> Disposeable-Nick: don’t write an IRC bot with simple string manipulation and `import socket`
[13:42:23] *** Quits: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 264 seconds)
[13:44:03] <Disposeable-Nick> ChrisWarrick, that ship has sailed, it exists already.
[13:44:22] <ChrisWarrick> I mean, I don’t really care
[13:44:37] <ChrisWarrick> but your bot is pretty broken as it is
[13:44:46] <Disposeable-Nick> It isn't borken
[13:44:54] <Disposeable-Nick> One specific command I got wrong
[13:45:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[13:45:33] <Disposeable-Nick> broken *
[13:45:43] <ChrisWarrick> how do the other commands work?
[13:45:49] <Disposeable-Nick> Perfectly
[13:45:56] <ChrisWarrick> code-wise?
[13:46:03] <Disposeable-Nick> Correct
[13:46:19] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[13:47:17] *** Joins: fikran (~fikran@user/fikran)
[13:47:27] <ChrisWarrick> can you show the code of other working commands?
[13:47:32] <Disposeable-Nick> I did
[13:47:36] <Disposeable-Nick> I posted entire bot
[13:48:14] <bjs> well you're using recv() so it's definitely wrong because irc connections are over TCP,  but tbh you're never gonna write socket code correctly like this so we may as well just move on and help with the more obvious logic
[13:48:32] <Disposeable-Nick> It is using TCP and IPv4
[13:49:01] *** Quits: Pi-sistance (~kvirc@cpc94050-newt37-2-0-cust176.19-3.cable.virginm.net) (Quit: happy math or coding)
[13:49:10] <ChrisWarrick> PING :!q :!part :!join :!date :!time
[13:49:13] <bjs> send* I mean
[13:49:24] <bjs> Disposeable-Nick: which command is wrong?
[13:50:22] <ChrisWarrick> Disposeable-Nick: try sending the above line to your bot and see what it does
[13:50:39] <Disposeable-Nick> ChrisWarrick, they all work
[13:50:46] <Disposeable-Nick> I have a working bot
[13:50:48] <ChrisWarrick> Disposeable-Nick: send the entire line
[13:50:52] <Disposeable-Nick> I had a working bot all along
[13:51:55] <Disposeable-Nick> ChrisWarrick, " PING : " is the only command that triggers in channel, I alreayd know this
[13:52:01] <Disposeable-Nick> The rest don't
[13:52:46] <Disposeable-Nick> they are under svttext which is text.split(), so they do not trigger if someone says them phrases in a channel
[13:52:52] <Disposeable-Nick> ChrisWarrick,
[13:53:01] <Disposeable-Nick> svrtext*
[13:53:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[13:53:18] <Disposeable-Nick> those phrases*
[13:53:38] <bjs> Disposeable-Nick: are you trying to argue your code is actually correct?  I'm a little lost what the conversation is here
[13:53:50] <ambasta> Disposeable-Nick, why do you think the updated code doesn't work? How did you test it? What was the response? What was the expected response?
[13:54:17] <Disposeable-Nick> ambasta, it says I don't match when I do, looking into it
[13:54:50] <ambasta> Okay, can you print "text" and "master" before the if condition?
[13:54:57] <ambasta> And tell me what the output is?
[13:55:06] <Disposeable-Nick> Sure, give me a moment
[13:55:26] <bjs> Disposeable-Nick: looking at your code, the `if not master:` probably isn't doing what you want.  But I don't know if I'm looking at the most up-to-date version
[13:56:11] *** Quits: FireFish5000 (~FireFish5@user/firefish5000) (Ping timeout: 264 seconds)
[13:56:32] <Disposeable-Nick> bjs, no worries, I will fill you in, after my checks.
[13:57:02] <ambasta> bjs, asked him to updat his if block to this https://code.labstack.com/yFXw2DTg
[13:57:08] <ambasta> But apprently, that doesn't work either
[13:57:11] *** Joins: FireFish5000 (~FireFish5@user/firefish5000)
[13:57:50] *** Joins: mactron (~mactron@apn-123-214-101-gprs.simobil.net)
[13:58:36] <supakeen> Are we doing sockets today?
[13:59:11] <parv> ... earlier was some random'ness ...
[13:59:41] <bjs> supakeen: I know, just take a deep breath and let it be :P
[13:59:50] *** Joins: PJBoy (~PJBoy@user/pjboy)
[14:00:14] <bjs> the temptation to try "fix" everyone's socket code is hard to overcome
[14:00:16] <bjs> :D
[14:01:01] <supakeen> I'd say I'm one of the few in this channel that isn't super against writing code with BSD sockets as long as it's done well :)
[14:01:02] <Disposeable-Nick> ambasta, so after setting master to the most basic thing it can be, which is just: master = "MyNick", I still apparently don't match.
[14:01:27] <ambasta> Yes, but can you tell me the output of "text" as well?
[14:01:31] <supakeen> (narrator: it never is)
[14:02:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[14:02:41] <hexnewbie> sock = socket.socket(socket.AF_POWER, socket.SOCK_240V); sock.bind(south_wall); sock.listen()
[14:02:42] *** Joins: cadmio (~cadmio@151.25.149.251)
[14:02:44] <Disposeable-Nick> ambasta, doesn't appear to be an output, it just posts that I don't match, and that's all it does.
[14:03:00] <cadmio> is there anyone familiar with gtk?
[14:03:07] *** Quits: Bryce (~bryce@ool-457dd6ac.dyn.optonline.net) (Ping timeout: 240 seconds)
[14:03:29] <cadmio> I've to understand how tags are removed after a search the same should apply in python https://github.com/stevenhoneyman/l3afpad/blob/master/src/search.c
[14:03:29] <ambasta> Disposeable-Nick, print("Text: <{}>:<{}>".format(text, master)) before the if condition
[14:03:33] <bjs> supakeen: I'm also not against it, and there are lots of good reasons for people to fight with sockets (especially as beginners) even if they do get it wrong.  It's hard to balance these things, and the socket library doesn't exactly help make it easy
[14:03:35] <ambasta> And tell me the output of that line Disposeable-Nick
[14:04:13] <bjs> hexnewbie: you kid but one of the biggest confusions people have over sockets when they start is trying to piece together what part is software and what part is hardware and how they interact
[14:05:21] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[14:06:03] <amo> nedbat, btw, i just found another legit use for mock: avoid calling webbrowser.open when running code via pytest
[14:06:59] <hexnewbie> bjs: Networking is complicated, but I guess I've been too deep in either the software or hardware side to notice. I should be careful if I do a Python implementation of RFC 3251, someone might think it ought to work. ;)
[14:08:47] <Disposeable-Nick> ambasta, was it supposed to output my full nick ident host? As that is what it did
[14:09:22] *** Parts: cadmio (~cadmio@151.25.149.251) (WeeChat 3.0)
[14:09:46] *** Joins: rk04 (~rk04@user/rajk)
[14:10:52] <ambasta> Yes it was
[14:11:09] <ambasta> But I'd need to see the full output to debug what could have gone wrong
[14:11:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[14:11:54] *** Joins: p-i- (~Ohmu@223.206.147.206)
[14:12:24] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[14:13:53] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[14:17:04] <Disposeable-Nick> ambasta, the output, it's basically Nick!~Ident@Host for the original master, and when I simplify it to just master = "MyNick", the output is just the nick.  Nothing else realy going on in output.
[14:17:46] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:17:56] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[14:21:28] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[14:21:34] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[14:21:52] *** Joins: yeirr (~yeirr@user/yeirr)
[14:22:02] <Disposeable-Nick> bjs, the trouble is with this: https://dpaste.com/CKA6W26PP
[14:22:16] <ambasta> Please just paste the entire line Disposeable-Nick
[14:22:17] <Disposeable-Nick> Yes, it is indented correctly in the actual file
[14:22:24] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[14:23:17] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[14:23:18] *** Joins: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[14:23:26] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[14:23:55] <bjs> Disposeable-Nick: what is the trouble
[14:24:17] *** Quits: StormDancer (~stormdanc@185.245.86.123) (Remote host closed the connection)
[14:25:19] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:25:20] *** Quits: chenqisu12 (~peiycae@183.217.203.91) (Quit: Leaving)
[14:26:12] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269)
[14:26:22] <Disposeable-Nick> bjs, long form, master = "Nick!~ident@host", short form, master = "MyNick" | either way, I get the "You do NOT match master string!" posted, when I do match.
[14:26:42] <bjs> Disposeable-Nick: what is "text"  (exactly?)
[14:27:26] <bjs> if you're not sure, you can print(f"{text!r=}")  to get Python to show you.  (or just print(repr(text)) if you're using a dinosaur version of the language)
[14:27:28] <Disposeable-Nick> irc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
[14:27:28] <Disposeable-Nick>  | text = irc.recv(2048).decode('utf-8') | bjs
[14:27:58] <bjs> Disposeable-Nick: but what did recv actually return :)
[14:28:09] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:28:43] *** Joins: StormDancer (~stormdanc@185.245.86.121)
[14:29:23] <bjs> Disposeable-Nick: I assume, given your comments to ChrisWarrick, you're not too interested in correcting the socket code right now(?)
[14:29:50] *** Quits: StormDancer (~stormdanc@185.245.86.121) (Client Quit)
[14:30:45] <Disposeable-Nick> bjs, my bot workks, and the command to quit if it detects me as master works, also, what does not work is, adding in a second if statement if someone does not match, then they get told this, bjs
[14:31:24] *** Joins: plastico (~plastico@neomutt/plastico)
[14:31:32] <bjs> Disposeable-Nick: so I assume that means you don't want to fix the socket code right now because it seems to be working?  That's okay (so long as you're aware you've been told it's fragile and not written correctly)
[14:31:52] <bjs> Disposeable-Nick: but my real question is, what actually did recv return.  try print(repr(text)) and show me the result so I can understand what the if statement did
[14:32:24] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[14:33:07] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:34:26] <ambasta> Disposeable-Nick, dude, just paste the line verbatim, I am trying to find out what you exactly received vs master
[14:36:02] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[14:36:03] *** Joins: jirido (mistress@gateway02.insomnia247.nl)
[14:37:20] *** Joins: Vonter (~Vonter@user/vonter)
[14:37:40] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[14:37:41] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[14:37:50] <nedbat> amo: that is a classic mock use, though again, a verified fake might be better
[14:38:03] *** Joins: kosh (~kosh@user/kosh)
[14:39:23] <p-i-> Confused. `python -VV` printed 3.9.6/Clang12.0.5. I just did `brew install pyenv` and now it's printing 3.9.7/Clang13.0.0. What just happened?
[14:39:30] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.3)
[14:39:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[14:39:39] <p-i-> I thought pyenv was an env-manager, and I would have to create a venv using it...
[14:39:45] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[14:39:54] <bjs> p-i-: pyenv does not manage venvs, it manages Python version
[14:40:05] *** Joins: ExeciN (~ExeciN@user/nicexe)
[14:40:25] <p-i-> So pyenv is pre-empting with the new Python it just installed every time I type `python` into my shell...
[14:40:50] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[14:40:55] <bjs> p-i-: well just installing pyenv on its own probably shouldn't do anything, did you `pyenv install ...` something?
[14:41:11] <p-i-> but `which python` still shows my .venv/bin/python
[14:41:21] <p-i-> No! Only that one `brew install pyenv`
[14:42:07] <bjs> p-i-: so you ran `python -VV` then ran `brew install pyenv` then ran `python -VV` again and no other commands in between?  No venv stuff?
[14:42:15] <p-i-> Exactly
[14:43:18] *** Joins: SteveR (~SteveR@103.215.168.1)
[14:43:57] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:44:15] <bjs> p-i-: did this machine have a pyenv installed before or something? did you have two different versions of Python installed before you installed pyenv?
[14:44:52] <jwhisnant_> p-i-: you can also (in the repl) $python >>> import sys >>> print (sys.executable)
[14:45:05] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[14:45:07] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:45:07] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:45:21] <p-i-> ah yes. "==> Upgrading pyenv 2.0.1 -> 2.1.0"
[14:45:23] <bjs> p-i-: if `which python` shows your venv's python then python -VV will be the version of Python in the venv
[14:45:27] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[14:45:36] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[14:47:11] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[14:47:20] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[14:48:24] <bjs> Disposeable-Nick: in your code you have `master = "Nick!~Ident@Host"` but is your Nick really literally "Nick" ?  your code is looking for that *exact* nick/host
[14:49:00] *** Joins: tobybl (~tobybl@213.31.135.91)
[14:49:08] <Disposeable-Nick> No, bjs.  So, short form master = "Disposable-Nick"
[14:49:26] <bjs> Disposeable-Nick: that's not what your code says?
[14:50:20] <Disposeable-Nick> Long version is master = "Disposeable-Nick!~D@HOST" HOST being the actual host and not HOST, bjs
[14:51:07] <bjs> Disposeable-Nick: your code contained neither of these lines.  Can you pastebin the actual code you're running and the actual output of that print(repr(text)) line
[14:51:29] <bjs> Disposeable-Nick: if the issue is that the master/nick and actual line don't match up then the confusion over what exactly each thing is doesn't help
[14:51:51] <p-i-> https://bpa.st/I6UA <-- This is my console output. I can't grok why `brew install pyenv` upgraded my .venv python.
[14:54:49] <rindolf> p-i-: is python a hard/symbolic link?
[14:54:52] <bjs> p-i-: it'll be hard to tell without knowing where the venv's python came from,  maybe it was symlinked to some old shim
[14:55:01] *** Joins: greknod28 (~grek@120.88.171.98)
[14:55:02] <p-i-> ok I see it. my .venv python is a deeply nested symlink https://bpa.st/VZVA
[14:56:40] <p-i-> I have no idea why it's so nested. Seems like I did have pyenv installed previously, but I wasn't aware I was using it.
[14:58:43] *** Joins: mengu (~mengu@c188-150-15-33.bredband.tele2.se)
[15:01:20] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[15:03:11] *** Quits: yeirr (~yeirr@user/yeirr) (Ping timeout: 258 seconds)
[15:04:08] *** Quits: mengu (~mengu@c188-150-15-33.bredband.tele2.se) (Quit: Leaving...)
[15:05:03] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[15:06:43] <gitesh> I have this code here -----> https://bpa.st/NWFA
[15:07:01] <gitesh> what does mean `if not qs:` ? or
[15:07:16] <gitesh> `if cookies.....`
[15:07:34] <gitesh> how is that evaluated to boolean value?
[15:08:10] <p-i-> gitesh: https://stackoverflow.com/questions/39983695/what-is-truthy-and-falsy-how-is-it-different-from-true-and-false
[15:08:16] *** Parts: ambasta (~ambasta@89.46.62.147) (Leave.)
[15:08:16] *** Quits: mactron (~mactron@apn-123-214-101-gprs.simobil.net) (Read error: Connection reset by peer)
[15:08:49] *** Joins: mactron (~mactron@APN-123-214-101-gprs.simobil.net)
[15:08:51] *** Quits: Aminda (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[15:09:04] *** Joins: han-solo (~han-solo@user/han-solo)
[15:09:16] *** Joins: Aminda (~sid12355@Feneas/Mikaela)
[15:09:17] <gitesh> p-i-: thanks nice
[15:09:21] *** Joins: jay-m1262 (~jay-m@129.0.204.216)
[15:10:30] <control> theres any way i could shuffle the print? couse currently all of the 6 processes words are in the same order: https://bpa.st/XXMA
[15:11:34] <nedbat> control: why did you use seed(1) ?
[15:11:52] <nedbat> control: try removing it
[15:12:53] <control> i want to gety ONLY 12 words, and shuffle them in all of the processes
[15:13:22] <Swayze> trying to hack some btc wallets are we
[15:13:25] <Swayze> :-p
[15:13:39] <Repiphany> Processes will get the same random seed when they're forked
[15:14:16] <Repiphany> (even if the seed wasn't always being set to 1)
[15:14:17] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[15:14:38] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:14:41] <control> Repiphany: how can i parse the list to 12 words? and use that 12 words list to all processes?
[15:15:03] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:15:53] *** Parts: jirido (mistress@gateway02.insomnia247.nl) ()
[15:17:13] <ChrisWarrick> parse the list to 12 words?
[15:17:35] <control> get 12 words out of the list, and use them in processes, randomly
[15:18:20] <p-i-> `pyenv virtualenv 3.10.0 .venv` ... this completes, but no .venv was created in my pwd.  And `pyenv virtualenvs` (from https://github.com/pyenv/pyenv-virtualenv#list-existing-virtualenvs) reports nothing. I find myself yet again thrashing around with Python environments.
[15:19:05] <ChrisWarrick> p-i-: pyenv virtualenv is a thing for centralized venv storage
[15:19:09] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269) (Quit: Leaving)
[15:20:01] <ChrisWarrick> p-i-: you can cut out all the middle-men and just run python -m venv with the appropriate interpreter (and if you cut out the `pyenv` middle-man, that involves ~/.pyenv/versions/3.10/bin/python)
[15:20:07] <ChrisWarrick> 3.10.0*
[15:20:09] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[15:20:42] <tmart> ^ this is what I do too. And I have a user .gitignore to always ignore them.
[15:21:00] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[15:22:24] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[15:22:44] *** Joins: ExeciN (~ExeciN@user/nicexe)
[15:24:45] *** Quits: control (~v1@user/control) (Quit: leaving)
[15:25:35] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 264 seconds)
[15:26:07] <ChrisWarrick> (and as for `pyenv virtualenvs` returning nothing… pyenv is a messy pile of shell scripts, which means it does `for path in "$versions_dir"/*` to figure out your venvs, which means your .venv is not picked up)
[15:26:07] *** Joins: Klinda (~superleag@user/klinda)
[15:27:41] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:28:35] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[15:29:12] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[15:31:15] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:48] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:23] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:39] <p-i-> `brew install pyenv` recommended I add `if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi` to my .bash_profile (actually to .bashrc but I seem to have .bash_profile instead).
[15:37:41] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 258 seconds)
[15:37:46] <p-i-> But it doesn't seem to do anything.
[15:38:20] <Repiphany> Oh huh, I guess multiprocessing was changed to initialize random with new seeds on spawning processes in 3.6/3.7
[15:39:23] <p-i-> I see `printenv` shows PATH=/usr/local/Cellar/pyenv-virtualenv/1.1.5/shims:... now. And there is PYENV_VIRTUALENV_INIT=1
[15:39:40] <deniska> multiprocessing doesn't "initialize random", but it can launch processes using different strategies
[15:39:56] <deniska> and one of them is fork without exec, which would keep random generator state intact
[15:41:01] <p-i-> So when I did `pyenv virtualenv 3.10.0 .venv` it probably created a .venv somewhere on my filesystem. But I can't find it!
[15:42:45] <p-i-> ok if I `pyenv virtualenv-delete .venv`, it now shows me the .venv full path
[15:42:49] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[15:43:04] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[15:43:49] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (Quit: Leaving)
[15:43:58] <p-i-> I'm not sure I needed pyenv in the first place. All I wanted to do was upgrade my macOS python. So that all my projects, I create a fresh .venv and get a recent/latest python version to work with.
[15:44:12] *** Joins: rk04 (~rk04@user/rajk)
[15:44:26] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 244 seconds)
[15:46:15] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[15:47:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[15:47:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[15:48:46] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:48:48] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[15:51:58] <p-i-> ChrisWarrick: Thanks! It works now.
[15:53:10] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[15:53:35] <p-i-> I suppose my remaining question is: was `pyenv` a good way to get Python on my system? I won't be using most of the functionality it exposes. Every new project I'll be using the /Users/pi/Desktop/test_ch/.venv/bin/python it gave me to create a fresh .venv.
[15:53:36] *** Joins: death916 (~death916@user/death916)
[15:53:48] <p-i-> And it was a oneliner.
[15:54:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 264 seconds)
[15:55:17] *** Quits: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se) (Client Quit)
[15:55:21] <p-i-> And I can just `pyenv install 3.10.1` when it comes out, etc.
[15:55:21] *** Joins: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net)
[15:55:44] *** Joins: kungp (~kungp@h-46-59-2-200.A230.priv.bahnhof.se)
[15:56:07] <p-i-> That's great!
[15:56:37] *** Joins: fikran (~fikran@user/fikran)
[15:56:55] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[15:57:49] *** Quits: mactron (~mactron@APN-123-214-101-gprs.simobil.net) (Read error: Connection reset by peer)
[15:58:30] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 260 seconds)
[15:58:30] <leduyquang753> I just discovered that Python's indentation rules don't match what described in the documentation, or at least the documentation does not fully document them.
[15:58:54] *** Joins: yeirr (~yeirr@user/yeirr)
[15:59:49] <deniska> leduyquang753: that would be strange, any example?
[15:59:51] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[16:00:56] <leduyquang753> It's possible that a line has 1 tab of indentation and the line below it indents in using 16 spaces.
[16:00:56] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[16:01:13] <leduyquang753> But not the other way around of a line has 8 spaces and the line below it uses 2 tabs.
[16:01:55] <deniska> leduyquang753: can you share an example file? In older versions of python (2.x) 1 tab meant
[16:02:13] <deniska> leduyquang753: can you share an example file? In older versions of python (2.x) 1 tab meant "the amount of whitespace needed to get to the next multuple of 8"
[16:02:36] <deniska> in newer pythons tabs don't get automatic whitespace conversion
[16:02:45] <leduyquang753> It still is in Python 3, but there are additional undocumented rules.
[16:03:09] <leduyquang753> Or at least the documentation claims so.
[16:03:20] <deniska> leduyquang753: there're places in which python ignores indentation, when ( or { or [ are open for example
[16:03:47] *** Quits: tudor (~tudor@tomka.hu) (Ping timeout: 240 seconds)
[16:04:39] <leduyquang753> There is no () in play.
[16:04:43] <leduyquang753> Example here: https://bpa.st/DP7Q
[16:04:50] *** Joins: tudor (~tudor@tomka.hu)
[16:04:53] *** Joins: pro_z_ (~pro_z@37.214.46.4)
[16:05:18] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[16:06:05] <p-i-> I would welcome a ban on tabs for indents. It's an opportunity for confusion with no benefit I can see.
[16:06:09] *** Quits: RougeR (~rougex250@user/rouger) (Quit: Leaving)
[16:06:11] <leduyquang753> The latest docs still has the mention of tabs bringing the amount to the next multiple of 8: https://docs.python.org/3/reference/lexical_analysis.html#indentation
[16:06:28] <leduyquang753> p-i- I use only tabs in my code.
[16:06:53] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[16:06:57] <Phase> the simplest solution is to have your editor convert it to spaces
[16:07:24] <leduyquang753> And then I decided to actually dig into the source: https://github.com/python/cpython/blob/main/Parser/tokenizer.c#L1364
[16:07:49] *** Joins: georgios (~georgios@user/georgios)
[16:08:10] *** Joins: pycurious (~Adium@user/pycurious)
[16:08:14] <leduyquang753> From which I derive these actual rules: 1) Tab makes the indentation amount the next multiple of 8. 2) Among lines with the same indentation amount in the same parent line, the total number of tabs and spaces must match, in other words, the tabs' total padded width must be equal. 3) If it's an indent, the total number of spaces and tabs must exceed that of the parent line.
[16:08:46] <pycurious> (pytest finds and run tests but …) Any ideas on how to fix this -> Coverage.py warning: Module /home/uname/proj/proj/ was never imported. (module-not-imported)
[16:08:48] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269)
[16:09:33] <pycurious> This is how i am running it -> python3.8 -m coverage run --source=/home/uname/proj/proj -m pytest -s rest/*
[16:11:07] <nedbat> pycurious: do you think that directory was executed?  you can add --debug=trace to the run options to see what coverage.py saw
[16:11:21] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Ping timeout: 245 seconds)
[16:11:49] <nedbat> leduyquang753: they might like a patch to the docs, though tbh, the rule should just be, "You can't have both"
[16:11:54] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[16:13:00] *** Joins: iflema (~ian@user/iflema)
[16:13:20] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[16:13:26] *** Quits: tobybl (~tobybl@213.31.135.91) (Remote host closed the connection)
[16:13:58] <pycurious> nedbat: The code that tests is inside that directory and i manually give the tests to pytest. Running again -> coverage run --debug=trace --source=…
[16:16:08] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[16:18:46] <pycurious> nedbat: Found the problem! The directory path was wrong. Thanks!
[16:19:08] <leduyquang753> Huh it seems like I'm not the first to discover the abnormal there: https://bugs.python.org/issue35957
[16:19:17] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:20:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:21:34] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 252 seconds)
[16:27:10] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[16:30:56] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[16:31:00] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:31:26] *** Quits: jay-m1262 (~jay-m@129.0.204.216) (Ping timeout: 260 seconds)
[16:32:48] *** Joins: ano (~ano@user/ano)
[16:32:59] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[16:33:56] *** Joins: michelem (~Adium@51.154.167.11)
[16:34:05] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Ping timeout: 260 seconds)
[16:34:43] <michelem> Hello folks! I am looking for some guidance on how to handle logging when encapsulating some logic in own modules.
[16:35:57] <michelem> I have logging throughout, and would ideally pass a "logger" object to the whole module, so it logs consistently with the rest of the application. Looks like a common problem to me. What's a pythonic way to handle that?
[16:36:23] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:37:14] *** Joins: lovelace (~paul@2.24.23.175)
[16:37:25] *** Joins: greknod286 (~grek@120.88.171.98)
[16:38:12] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:38:33] *** Quits: lovelace (~paul@2.24.23.175) (Client Quit)
[16:39:10] *** Joins: lovelace (~paul@2.24.23.175)
[16:39:16] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Ping timeout: 245 seconds)
[16:39:24] *** Quits: greknod28 (~grek@120.88.171.98) (Ping timeout: 258 seconds)
[16:39:24] *** greknod286 is now known as greknod28
[16:41:48] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[16:42:17] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[16:43:30] *** Joins: Atque (~Atque@user/atque)
[16:45:18] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[16:45:44] *** Quits: anonymeowo (~anonymeow@5.34.180.230) (Ping timeout: 265 seconds)
[16:47:00] *** Quits: montybanksnyc (~montybank@pool-108-5-238-57.nwrknj.fios.verizon.net) (Quit: Leaving)
[16:48:01] *** Joins: redrum88 (~redrum88@user/redrum88)
[16:49:15] <grym> logger = logging.get_logger(__name__)
[16:49:28] *** Joins: orangeextract (~orangeext@user/orangeextract)
[16:51:22] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:51:42] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[16:51:45] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[16:53:04] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:53:48] *** Joins: DPA (~DPA@2a05:41c0:e:a704::a3c:10d)
[16:53:50] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:54:19] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[16:55:17] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[16:57:33] <michelem> I solved the problem by adding a function set_logger() to the module. If it's not set, it'll default to the usual log initialization. Otherwise, the caller can pass its own logger.
[16:57:43] *** Joins: maryo (~Maryo@user/maryo)
[16:59:04] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Client Quit)
[17:00:02] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269) (Quit: Leaving)
[17:02:58] *** Joins: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de)
[17:03:37] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:07:26] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[17:08:43] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[17:09:43] *** Quits: marcello42 (~mp@p5dedb36a.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:10:05] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[17:11:10] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[17:13:27] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:17:58] *** Joins: damonlynch (~ngaio@68.235.43.172)
[17:18:37] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[17:19:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:19:14] <ChrisWarrick> p-i-: regarding the pyenv question: it’s good for installing python with reasonable and known-good configuration options. The part where it messes with your shell and makes magic shims that change version is fully optional (and I dislike that part of pyenv).
[17:19:28] *** Joins: alex11 (~alex11@user/alex11)
[17:19:30] <ChrisWarrick> pycurious: That said, I’m not sure if using a venv python to create another venv is correct
[17:20:02] *** Quits: jbe (~jbe@lysator/root/jbe) (Ping timeout: 258 seconds)
[17:20:48] <ChrisWarrick> p-i-: ↑
[17:21:12] *** Joins: Naan (~naan@user/naan)
[17:21:51] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[17:26:26] <pycurious> how does one test a asyncio loop running a tornado server? Does one just test the application object?
[17:26:30] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 260 seconds)
[17:26:59] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:28:50] *** Quits: michelem (~Adium@51.154.167.11) (Quit: Leaving.)
[17:29:33] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[17:29:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:29:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[17:30:53] *** Quits: maryo (~Maryo@user/maryo) (Ping timeout: 244 seconds)
[17:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:03] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[17:34:58] *** Joins: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de)
[17:35:02] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 265 seconds)
[17:35:05] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[17:35:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:35:49] *** Quits: yeirr (~yeirr@user/yeirr) (Quit: yeirr)
[17:39:57] *** Joins: avikalp (~avikalp@49.36.99.188)
[17:40:00] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[17:40:14] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[17:40:43] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[17:42:43] *** Joins: Atque (~Atque@user/atque)
[17:43:24] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-4c3f-03f6-4a4f-4ab9.res6.spectrum.com)
[17:44:34] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 258 seconds)
[17:45:46] *** Joins: mactron (~mactron@APN-123-254-51-gprs.simobil.net)
[17:46:27] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-b1bf-d5d1-5dbe-b2b8.fixed6.kpn.net) (Quit: No Ping reply in 180 seconds.)
[17:47:43] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-cd4-c07d-d850-8a02.fixed6.kpn.net)
[17:48:16] *** Joins: audiobirb (~audio@2603-8081-1800-1546-2a4e-13bb-e70f-f3f7.res6.spectrum.com)
[17:50:44] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[17:51:11] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[17:54:23] *** Joins: superboot (~agentgasm@user/superboot)
[17:56:04] *** Joins: rk04 (~rk04@user/rajk)
[17:58:30] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:59:15] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[18:01:22] *** Quits: carl--- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 244 seconds)
[18:03:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[18:04:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:05:47] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[18:05:59] *** Joins: fikran (~fikran@user/fikran)
[18:06:50] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[18:07:41] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[18:12:07] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[18:13:23] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[18:15:37] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 258 seconds)
[18:18:28] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:18:29] *** Joins: sedeki (~textual@user/sedeki)
[18:18:58] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[18:19:07] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[18:20:21] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[18:21:51] *** Joins: NiKaN (sid385034@helmsley.irccloud.com)
[18:22:45] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[18:24:07] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[18:24:29] *** Joins: Ergo^ (~ergo@91.238.59.144)
[18:24:37] *** Quits: p-i- (~Ohmu@223.206.147.206) (Ping timeout: 244 seconds)
[18:26:50] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:26:51] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[18:27:16] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:39] *** Quits: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[18:28:32] *** Joins: msfninja (~kali@user/msfninja)
[18:29:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:33:46] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:34:00] *** Joins: LuKaRo (~LuKaRo@p5deda401.dip0.t-ipconnect.de)
[18:34:50] *** Joins: src_ (~src@user/src)
[18:36:25] *** Joins: anonymeowo (~anonymeow@185.213.154.243)
[18:38:26] *** Quits: DPA (~DPA@2a05:41c0:e:a704::a3c:10d) (Ping timeout: 245 seconds)
[18:38:55] *** Quits: src (~src@user/src) (Ping timeout: 260 seconds)
[18:41:13] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (Quit: Changing server)
[18:41:21] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[18:42:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:42:54] *** Quits: fstd (~fstd@xdsl-81-173-175-11.nc.de) (Read error: Connection reset by peer)
[18:42:56] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:43:28] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Remote host closed the connection)
[18:43:39] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[18:43:53] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961)
[18:43:58] *** Joins: src (~src@user/src)
[18:44:02] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[18:44:32] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:44:33] *** Joins: LenarHoyt (~LenarHoyt@p2e5cf715.dip0.t-ipconnect.de)
[18:45:42] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[18:46:17] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[18:46:31] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[18:48:41] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:49:01] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[18:49:18] *** Quits: neil (~kneel@rockylinux/infra/neil) (Quit: When life gives you lemons, make orange juice and then sit back as people wonder how you did it.)
[18:49:18] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:50:25] *** Quits: LenarHoyt (~LenarHoyt@p2e5cf715.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:51:04] *** Joins: maryo (~Maryo@user/maryo)
[18:51:53] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[18:51:55] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:a8c2:4429:98dd:c961) (Remote host closed the connection)
[18:52:02] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[18:52:25] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:3280:1a2d:f367:f8f0)
[18:59:34] *** Joins: jay-m1262 (~jay-m@129.0.204.216)
[19:00:59] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:01:47] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[19:02:10] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 260 seconds)
[19:02:13] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Quit: Leaving)
[19:02:44] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[19:03:43] *** Joins: jonaskabrink (~jonaskabr@ip1f128470.dynamic.kabel-deutschland.de)
[19:04:08] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[19:04:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[19:04:51] *** Quits: mactron (~mactron@APN-123-254-51-gprs.simobil.net) (Read error: Connection reset by peer)
[19:04:56] *** Joins: rhax (~yannick@user/rhax)
[19:05:19] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:08:09] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[19:09:36] *** Quits: complexnumber (~brett@194-223-26-191.tpgi.com.au) (Quit: So long, and thanks for all the fish!)
[19:09:43] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[19:10:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[19:12:33] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[19:13:48] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[19:15:21] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[19:15:50] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[19:15:52] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Client Quit)
[19:16:12] *** Joins: rk04 (~rk04@user/rajk)
[19:16:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[19:16:17] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[19:18:19] *** Quits: fstd (~fstd@xdsl-89-0-79-89.nc.de) (Read error: Connection reset by peer)
[19:18:42] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[19:19:25] *** Joins: fstd (~fstd@xdsl-89-0-79-89.nc.de)
[19:20:54] *** Quits: Klinda (~superleag@user/klinda) (Read error: Connection reset by peer)
[19:20:56] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[19:22:09] *** Joins: Klinda (~superleag@user/klinda)
[19:24:57] *** Joins: imakestuff (~imakestuf@197.156.77.148)
[19:25:20] <imakestuff> json.loads automatically converts date string to date object. can i disable that?
[19:25:28] *** Joins: mawk (mawk@wireguard/contributor/mawk)
[19:26:01] <bjs> imakestuff: it does?
[19:27:26] *** Joins: iomari891 (~iomari891@105.112.138.38)
[19:27:28] *** Quits: jay-m1262 (~jay-m@129.0.204.216) (Ping timeout: 252 seconds)
[19:27:56] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[19:27:59] <bjs> imakestuff: are you sure you're not using some other library that's doing the conversion,  I don't think the json library is going to do that on its own
[19:28:04] <imakestuff> bjs: my bad... just checked and it's actually react-datepicker in my front-end that 's doing that!
[19:28:22] <imakestuff> didn't suspect b/c i set the format and was not support to have time component
[19:29:23] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Read error: Connection reset by peer)
[19:29:35] *** Quits: avikalp (~avikalp@49.36.99.188) (Ping timeout: 265 seconds)
[19:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[19:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[19:31:18] *** Quits: wolfgang (~wolfgang@101.174.167.116) (Remote host closed the connection)
[19:31:47] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:33:40] *** Joins: JacobFrost (sid494713@tinside.irccloud.com)
[19:33:46] *** Parts: JacobFrost (sid494713@tinside.irccloud.com) ()
[19:34:29] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[19:34:40] *** Joins: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e)
[19:34:51] *** Quits: bauripalash (~bauripala@2401:4900:382b:3c56:1:1:ae8a:67e) (Client Quit)
[19:35:54] *** Joins: hrob (~hrob@31-209-221-88.dsl.dynamic.simnet.is)
[19:36:08] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[19:36:39] <rapha> hi all
[19:37:24] <rapha> does python have something like Ruby's <<~ HEREDOC syntax where the indent can be kept as-is and all leading whitespace is removed from the resulting string?
[19:37:27] <hrob> there seem to be two styles of declaring tables and orms in sqlalchemy -- i.e. imperative vs declarative - almost all examples in docs use declarative approach.
[19:37:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:38:19] <hrob> for some reason the code Im working on uses imperative... meaning I need declare all the tables, and register a custom model to map to the table
[19:38:53] <hrob> I'm tempted to throw away all imperative stuff and replace with declarative approach -- but is there anything to be lost?
[19:39:08] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[19:40:02] *** Quits: lastshell (~lastshell@user/lastshell) (Remote host closed the connection)
[19:41:22] *** Joins: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl)
[19:41:46] *** Quits: zepolen (~zepolen@2a02:587:862e:2f17:3280:1a2d:f367:f8f0) (Ping timeout: 245 seconds)
[19:42:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[19:44:57] *** Joins: mfe_ (~default@84-113-156-178.cable.dynamic.surfer.at)
[19:45:04] *** Joins: jay-m1262 (~jay-m@129.0.204.216)
[19:45:59] <mfe_> hi, I'm not sure if I interpret this line of code correctly: img[markers == -1] = [0,0,255] set in array where markers is -1 the value [0,0,255] is this correct?
[19:46:01] *** Joins: monkey_ (~user@190.104.116.134)
[19:46:02] *** Quits: Allegretto (~allegrett@84-236-85-171.pool.digikabel.hu) (Ping timeout: 260 seconds)
[19:46:42] *** Parts: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl) ()
[19:46:45] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Remote host closed the connection)
[19:46:55] <bjs> rapha: no special syntax, but maybe you want textwrap.dedent call?
[19:47:04] <bjs> it takes a string and strips common leading whitespace
[19:47:13] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[19:48:06] <rapha> hmm, better than nothing. thx bjs :)
[19:48:45] *** Quits: Awoobis (A_D@libera/staff/dragon) (Killed (Awoobis (Botnets are not permitted on libera.chat)))
[19:48:57] *** Joins: A_Dragon (A_D@libera/staff/dragon)
[19:50:23] *** Quits: jay-m1262 (~jay-m@129.0.204.216) (Ping timeout: 244 seconds)
[19:50:28] *** A_Dragon is now known as Awoobis
[19:51:24] *** Joins: jay-m1262 (~jay-m@154.72.162.132)
[19:52:57] *** Joins: adder (~adder@user/adder)
[19:52:57] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[19:53:52] <Ninpo> Given a list of strings like this https://bpa.st/UVCQ can anyone suggest how in Python I'd approach identifying "GIN GLIDERS" "DEWERSTONE" and "BLACK DIAMOND" as the repeated substrings (and are thus brand names)?
[19:54:49] <Ninpo> I'm having a tough time googling for inspiration as I get a lot of duplicate word answers and I'm more looking for duplicate chains of words
[19:55:12] *** Joins: curious_user (~curious_u@89-83-27-172.abo.bbox.fr)
[19:56:05] *** Joins: zepolen (~zepolen@2a02:587:862e:2f17:3280:1a2d:f367:f8f0)
[19:56:55] <Ninpo> I wonder if levenshtein distance is what I'm after...
[19:56:58] <hrob> mfe_  this is numpy / ndarray syntax,   markers == -1   is a selector there... it produces an array of True/False
[19:57:27] <curious_user> Hey! i need help using threading python
[19:57:31] <hrob> mfe_  where true, sets only those array items to the assignment
[19:57:35] <curious_user> my programm is slower if i group part of the tests into threads
[19:57:40] <hrob> mfe_ you understood correctly
[19:57:40] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 260 seconds)
[19:57:44] <curious_user> slower than if i run them one after the other
[19:57:52] <mfe_> great thanks hrob
[19:57:56] <curious_user> here is the full code: https://pastebin.com/agcegKmd
[19:58:02] *** Joins: Allegretto (~allegrett@84-236-53-165.pool.digikabel.hu)
[19:58:09] <curious_user> the threading part is at the end of the file
[19:59:38] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Quit: RabidToaster)
[19:59:57] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:00:30] *** Joins: kristine86 (~kristine8@2603-7080-af03-588a-11f2-cbd9-8c31-4d89.res6.spectrum.com)
[20:00:31] *** Joins: Auron (~Auron956@user/auron)
[20:00:59] *** Joins: akk (~akk@75.161.146.115)
[20:02:20] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (Ping timeout: 260 seconds)
[20:03:43] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[20:04:37] *** Joins: dbristow (~dbristow@user/dbristow)
[20:07:29] *** Quits: curious_user (~curious_u@89-83-27-172.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:07:52] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[20:12:28] <bjs> curious_user: the commented out part?
[20:12:30] <bjs> oh they left
[20:12:38] *** Joins: newpy (~newpy@206.168.231.90)
[20:13:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 244 seconds)
[20:15:19] *** Joins: fikran (~fikran@user/fikran)
[20:15:51] <newpy> this isn't exactly python-related (except that I'm coding it in python), but I don't see how williams percent range, calculated as (high-current)/(high-low), can be a negative number (though that is what it purports to return)
[20:16:25] <newpy> seems to me that it would return a value between 0 and +1
[20:16:50] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 260 seconds)
[20:18:02] *** nuala2 is now known as nuala
[20:18:17] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:20:24] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[20:21:30] <pycurious> I've a click function main(…) - how can i call it from a unit test? The normal arguments don't work
[20:21:47] *** Joins: dez (uid92154@user/dez)
[20:22:01] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:22:03] <pycurious> https://click.palletsprojects.com/en/8.0.x/ - how do i call hello(x,y) from another function in this example?
[20:22:24] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[20:22:51] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:23:40] *** Quits: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a) (Quit: Leaving)
[20:24:13] *** Joins: han-solo (~han-solo@user/han-solo)
[20:24:59] *** Joins: ionface_ (~ionface@user/ionface)
[20:24:59] *** Quits: ionface (~ionface@user/ionface) (Ping timeout: 264 seconds)
[20:25:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:27:13] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:27:25] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[20:27:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:28:52] <ali1234> pycurious: you can call it with an array of strings instead of individual arguments
[20:29:01] *** Quits: emerent (~quassel@p200300cd574855daba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[20:29:40] *** Joins: emerent (~quassel@p200300cd5748559eba27ebfffed28a59.dip0.t-ipconnect.de)
[20:29:46] <ali1234> pycurious: eg hello(['--count', '3', '--name', 'Blah'])
[20:30:14] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:30:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:30:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[20:30:45] <aphysically> so I guess one of the major reasons pyright was in typescript is they were planning browser support for a long time?
[20:30:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:32:12] *** Joins: jazzy (~jaziz@user/jaziz)
[20:32:51] *** Joins: jazzy2 (~jaziz@user/jaziz)
[20:33:30] <jinsun_> it was vscode support from the beginning I thought, vscode extensions are typescript
[20:33:44] *** Joins: jbe (~jbe@lysator/root/jbe)
[20:33:52] <jinsun_> does it run online too?
[20:35:12] <aphysically> I don't know that it runs online, but I've read commits in pyright and pylance that reference browser support
[20:36:03] <aphysically> so whether or not it does they clearly did some sort of work on it at least
[20:36:39] <jinsun_> hmm, maybe they plan to make it available on github.dev
[20:37:10] <aphysically> for all I know it already works on the website version of vs code; I've never used it (and I've never used vs code for that matter)
[20:37:15] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[20:37:20] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[20:39:07] *** Joins: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net)
[20:39:33] *** Joins: hyskaru (~hyskaru@user/hyskaru)
[20:39:35] *** jazzy2 is now known as jazzy
[20:39:52] *** Quits: hyskaru (~hyskaru@user/hyskaru) (Client Quit)
[20:39:55] <aphysically> right now I use vim and I just haven't really moved out from that, but I need to rethink my workflow for projects with a lot of files
[20:40:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:40:52] *** Quits: dbristow (~dbristow@user/dbristow) (Remote host closed the connection)
[20:41:08] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:41:11] *** Joins: dbristow (~dbristow@user/dbristow)
[20:41:32] *** Joins: pro_z__ (~pro_z@37.214.55.89)
[20:41:58] <aphysically> did I ever show you the descriptor PR I made after rich maintainer indicated it's what he wanted?
[20:42:36] <aphysically> even though it's an ugly workaround I think I managed to find the best middleground approach with private getter/setters that mean the descriptor method can be easily changed back to properties if anyone ever wants to in the future https://github.com/willmcgugan/rich/pull/1612/files
[20:43:02] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[20:44:12] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[20:44:22] *** Joins: dbristow (~dbristow@user/dbristow)
[20:44:38] *** Quits: pro_z_ (~pro_z@37.214.46.4) (Ping timeout: 244 seconds)
[20:46:40] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 260 seconds)
[20:47:49] *** Joins: rk04 (~rk04@user/rajk)
[20:48:34] <aphysically> oh I just remembered I forgot to report the mypyc AnyStr bug
[20:48:46] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[20:49:50] <jinsun> oh pylace can be installed on github.dev but not pyright, weird
[20:50:29] *** Joins: Zweimer (~Zweimer@2a02:908:d20:26e0:55d9:90d5:9c29:ab46)
[20:51:00] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[20:51:14] <jinsun> though I don't like to edit online so I don't want to try either
[20:51:37] *** Joins: dbristow (~dbristow@user/dbristow)
[20:52:02] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[20:52:54] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[20:53:02] *** Joins: stoneware (~stoneware@user/stoneware)
[20:53:05] <Zweimer> Hey. As some people might know: A windows service cannot contain a graphical user interface. I think it would not even start. What *exactly* prevent it from starting? I would like to keep my code, that is using a few pyqt5 functionalities but just drop the gui.
[20:54:22] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[20:54:31] <ChrisWarrick> Zweimer: what non-gui qt functionalities are you using?
[20:54:38] *** Quits: jay-m1262 (~jay-m@154.72.162.132) (Ping timeout: 260 seconds)
[20:55:08] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 265 seconds)
[20:55:10] <Zweimer> Signals and slots, QThreads
[20:56:03] <ChrisWarrick> I think there exist some command-line C++ apps that use parts of Qt
[20:56:13] *** Joins: bloody (~bloody@user/bloody)
[20:56:26] *** Quits: imakestuff (~imakestuf@197.156.77.148) (Remote host closed the connection)
[20:56:45] *** Joins: haniaF (~haniaF@79.191.104.229.ipv4.supernova.orange.pl)
[20:58:32] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[20:58:33] *** Joins: simplicity (~yti@user/simplicity)
[20:59:06] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 244 seconds)
[20:59:38] <Ninpo> Given a list of strings like this https://bpa.st/UVCQ can anyone suggest how in Python I'd approach identifying "GIN GLIDERS" "DEWERSTONE" and "BLACK DIAMOND" as the repeated substrings (and are thus brand names)?
[20:59:40] <Zweimer> ChrisWarrick: Thanks for the information. I was just wondering how much of the QT-framework is useable. I guess I will have to try.
[21:00:22] <ChrisWarrick> Zweimer: I’d expect all the non-QtGui/QtWidgets parts to work
[21:00:37] *** Joins: jay-m1262 (~jay-m@129.0.204.216)
[21:00:55] <Zweimer> Yeah that sounds plausible.
[21:01:54] *** Quits: Keira (~k@lulzsec.co.uk) (Ping timeout: 265 seconds)
[21:03:53] *** Joins: mbarkhau (~mbarkhau@84.38.67.145)
[21:04:43] *** Joins: Keira (~k@lulzsec.co.uk)
[21:04:51] *** Joins: plastico (~plastico@neomutt/plastico)
[21:05:21] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[21:06:04] *** Joins: wolfgang (~wolfgang@101.174.167.116)
[21:06:05] *** Quits: jamwil (~jamwil@user/jamwil) (Quit: leaving)
[21:06:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:07:21] *** Quits: jay-m1262 (~jay-m@129.0.204.216) (Ping timeout: 258 seconds)
[21:07:45] *** Joins: rk04 (~rk04@user/rajk)
[21:08:15] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[21:08:43] *** Joins: lokesh1197 (~lokesh@2401:4900:313e:76ae:35fd:9d43:fbd2:739)
[21:09:26] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:10:44] *** Joins: Akuli (~Akuli@87-94-109-157.bb.dnainternet.fi)
[21:11:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[21:13:03] *** Quits: maryo (~Maryo@user/maryo) (Read error: Connection reset by peer)
[21:13:06] *** Quits: lokesh1197 (~lokesh@2401:4900:313e:76ae:35fd:9d43:fbd2:739) (Quit: bye)
[21:13:11] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:15:29] <Jong> Hello. I'm looking at code that uses argparse.  It's a typical single file script that has if __name__ == "__main__": run().  But Right at the start of run() there's the line: parser = init_argparse(). Inside init_argparse is where the arguments are defined, like parser.add_argument("--some-argument", type=str, default=None)..   My question is, would you have created init_argparse?  Why not just put the code in run?
[21:16:57] <Jong> needless code routing is more time consuming to follow. Even if it's a little extra step costing a half second. Those half seconds add up
[21:17:15] *** Quits: jonaskabrink (~jonaskabr@ip1f128470.dynamic.kabel-deutschland.de) (Quit: jonaskabrink)
[21:17:42] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 244 seconds)
[21:18:45] *** Quits: anonymeowo (~anonymeow@185.213.154.243) (Quit: Konversation terminated!)
[21:19:19] <The-Compiler> Jong: trying to understand a lot of code in a single function usually takes more effort than understanding code split into well named functions
[21:19:45] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 244 seconds)
[21:20:51] <Jong> That would make sense here if there were over 15 cli arguments. But in the code I'm looking at there are only 4.
[21:21:24] <yolo_> trying to play with tkinter+pyinstaller, a simple one is 200MB with upx, looks like python indeed is not good for one-executable style distribution, not alone cross-platform dist(e.g. electron)
[21:22:15] <Jong> The-Compiler  would you have created init_argparse here? https://imgur.com/a/CzTICec
[21:22:17] <yolo_> just like nodejs, python is designed to run from its own envionment with multiple packages
[21:22:42] <Jong> yolo_  what's upx?
[21:23:00] <yolo_> Jong: one option for pyinstaller, to comopress the output img, popluarized by golang
[21:23:01] *** Quits: Klinda (~superleag@user/klinda) (Read error: Connection reset by peer)
[21:23:20] <Jong> yolo_  have you thought about PyQt ?
[21:23:26] *** Joins: Klinda (~superleag@user/klinda)
[21:23:51] <The-Compiler> Jong: probably, I don't see why not
[21:23:54] <yolo_> Jong: that won't help, it will need wrap all those PyQt libraries just like what tkinter does
[21:24:20] <yolo_> anyways electron for this kind of GUI that is
[21:24:25] *** Joins: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se)
[21:24:35] <The-Compiler> yolo_: Is an Electron app really smaller?
[21:24:47] *** Quits: ckdCreations (~ckdCreati@147.55.133.134) (Read error: Connection reset by peer)
[21:25:03] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[21:25:06] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 245 seconds)
[21:25:22] <Jong> ahh you said single executable.  Even PyQt can't do that. It compiles different executables per platform.
[21:26:05] <yolo_> The-Compiler: seems not bigger, plus, better at cross-platform
[21:26:35] <yolo_> each language has its use, hard to bend out of the comfort zone
[21:26:57] <Jong> The-Compiler  reviewing code has that fine line between reasonable recommendation versus enforcing subjective taste. It's hard to know when I'm overstepping!
[21:26:58] <yolo_> sadly for developers i have to learn many tools, while, time is limited
[21:27:16] *** Quits: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[21:27:18] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[21:27:29] *** Joins: Pandadub (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[21:27:52] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:27:52] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[21:29:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 244 seconds)
[21:29:07] *** Joins: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net)
[21:29:59] *** Joins: ckdCreations (~ckdCreati@147.55.133.138)
[21:32:41] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[21:33:25] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 252 seconds)
[21:33:43] *** Quits: stats4647 (~stats4647@ip174-67-220-13.oc.oc.cox.net) (Ping timeout: 244 seconds)
[21:33:59] *** Joins: DPA (~DPA@2a05:41c0:b:db04::a3c:10d)
[21:34:41] *** Quits: dbristow (~dbristow@user/dbristow) (Read error: Connection reset by peer)
[21:37:11] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[21:37:28] *** Quits: cerill (~cerill@h-155-4-198-153.A785.priv.bahnhof.se) (Quit: Client closed)
[21:38:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:38:34] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[21:39:10] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Ping timeout: 260 seconds)
[21:39:25] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Client Quit)
[21:40:44] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[21:42:15] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Client Quit)
[21:42:23] <Jong> You know how you can open and write to a file using? open(file_path, 'w') and with open(log_file_path, 'a') as f:   and so forth?
[21:43:04] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[21:43:09] <Jong> Is there a way to create a "virtual" file? By that I mean lets say you don't really want to write to a file, but you don't want to rewrite the code. It would be awesome if I could write to a virtual file object, and later decide whether to save the virtual file object to disk or not
[21:43:52] <han-solo> io.StringIO ?
[21:44:02] <mbarkhau> JONG: import io; io.BytesIO
[21:44:09] <han-solo> or that
[21:44:16] <Jong> nice! thanks!
[21:44:55] *** Joins: kristine8650 (~kristine8@2603-7080-af03-588a-11f2-cbd9-8c31-4d89.res6.spectrum.com)
[21:44:58] <Jong> I was about to say, in c you can easily replace fopen pointer with a const char * pointer. Glad I can do similar in python!
[21:47:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[21:47:48] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[21:48:21] *** Quits: kristine86 (~kristine8@2603-7080-af03-588a-11f2-cbd9-8c31-4d89.res6.spectrum.com) (Ping timeout: 256 seconds)
[21:49:14] *** Joins: jay-m1262 (~jay-m@129.0.204.216)
[21:51:56] *** Joins: laman1 (~laman@rego.ai)
[21:52:58] *** Joins: candyman (~candyman@user/candyman)
[21:53:56] *** Quits: candyman (~candyman@user/candyman) (Client Quit)
[21:54:37] <laman1> I want to create a server/client application that runs on the same computer, where server is a tkinter gui dialog. Wondering what I should use to send info between the client and server. it would just be a little bit of a text, but I'd want the server to get these messages almost instantly and I want it to work on linux/mac/win. file socket? I don't know if that requires polling or what for the
[21:54:39] <laman1> server to get a new message. basically the server will display a window when it gets a message from client and this needs to happen less than 50ms.
[21:55:01] <laman1> never done anything like this, so would love to hear how this is typically done
[21:57:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:57:17] *** Joins: rk04 (~rk04@user/rajk)
[21:57:34] <Ninpo> Given a list of strings like this https://bpa.st/UVCQ can anyone suggest how in Python I'd approach identifying "GIN GLIDERS" "DEWERSTONE" and "BLACK DIAMOND" as the repeated substrings (and are thus brand names)?
[21:58:06] *** Quits: damonlynch (~ngaio@68.235.43.172) (Quit: Leaving)
[21:58:14] *** Joins: bitblit (~bitblit@gateway/tor-sasl/bitblit)
[21:58:36] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[22:00:21] <Ninpo> https://bpa.st/VEGA this sort of works but gives a lot of duplicates and partial guesses like ADIDAS T for two items like ADIDAS TRACK and ADIDAS TENT
[22:00:43] <KirkMcDonald> Ninpo: The repeated string "GIN GLIDERS SPRINT 3" is longer and also occurs exactly as often as "GIN GLIDERS" in that list.
[22:00:50] <tmart> Ninpo, finding this top N most repeated substrings is possible. But, how would the algorithm know that "SPRINT 3" or "L" is not a brand name too? There's some complex natural language processing there
[22:00:54] *** Joins: patchie (sid504252@ilkley.irccloud.com)
[22:00:55] *** Joins: inomoz (~inomoz@176.59.118.101)
[22:00:55] <haniaF> hi, I want to write a db transaction manager using context manager. how could i possibly intercept specific package function calls in the context manager scope to build a query in a global state object and then run it on __exit__()?
[22:01:17] <Ninpo> KirkMcDonald: yeah I know, what I can't figure out is how to say that in Python
[22:01:28] <bjs> haniaF: the easiest way is to make the calls be methods on the object the context manager returns
[22:01:53] <bjs> haniaF: like `with transaction() as t: t.do(1); t.do(2); t.do(3)` then `t` can keep track itself and on __exit__ decide to do the thing or not
[22:02:11] *** Quits: rk04 (~rk04@user/rajk) (Ping timeout: 264 seconds)
[22:02:15] <Ninpo> tmart: oops I've cleaned the data up a bit from that list, there's no attributes anymore like L or colour.
[22:02:17] <bjs> (although usually for transactions it's more of a rollback-on-error than to delay the actions)
[22:02:24] *** Joins: thiras (~thiras@user/thiras)
[22:02:27] <KirkMcDonald> Ninpo: My first thought is to use a trie of the words in each string.
[22:02:41] <Jong> hmm Is there no way to use io.BytesIO in a way that I don't need to change this line? with open(self.file_path, 'a') as f:  ? In c, I could do a track where because self.file_path is a pointer, I can have it point to my own const char buffer instead of the pointer give by fopen.   Perhaps I do handle = open(self.file_path, 'a') in my classs's __init__.  and in in my _write function have: with handle as f:.  That way  I can swap file handle or
[22:02:41] <Jong>  memory buffer in as the handle. But that requires keeping the file open for the duration of the class object.  with open(self.file_path, 'a') as f writes and closes.
[22:02:45] <Payam> hi, is it possible to say `def fun(name:str, type:(int, str, list)): pass`
[22:02:57] <Payam> to indicate that the second argument could be one of these types?
[22:03:27] *** Joins: curious_user (~curious_u@88.120.114.223)
[22:03:34] <hexnewbie> Payam: Payam def f(argname: int | str | list): pass
[22:03:35] <haniaF> bjs: yeah, I'm aware it can be done in this way, but I'm wondering if I could it make it work a little bit like @Transactional in Java Hibernate, w/o altering actual insert/update calls
[22:03:36] <KirkMcDonald> Payam: typing.Union
[22:03:44] <tmart> In Python 3.10, you can say "type: int | str | list", or in lower versions, typing.Union[int, str, list]
[22:03:49] <curious_user> please i need help with the end of this code
[22:03:50] <curious_user> https://pastebin.com/agcegKmd
[22:03:52] <Ninpo> KirkMcDonald: sorry, are you able to elaborate?
[22:03:52] <curious_user> please
[22:03:55] <curious_user> help me
[22:03:55] <KirkMcDonald> Oh, yes, they added that | thing.
[22:04:01] <patchie> If i want to google (ML / AI)text clasification, with more than 2 outputs, what do i call that? Most text clasification examples seems to only have 2 options, like positive/negative or spam/not-spam...etc   I want to have hundreds of predefined outputs.
[22:04:04] <bjs> curious_user: what about the end of this code?
[22:04:11] <Payam> so that | is 3.10 is python 3.10 specific?
[22:04:40] <tmart> (And ideally, Payam, the elements of the list should be typed too, like "list[int]")
[22:04:43] <hexnewbie> Payam: Yeah, sorry. I thought it was older. (Since I'm stuck on even older versions)
[22:05:00] <Ninpo> KirkMcDonald: something like this? https://github.com/pytries/marisa-trie
[22:05:49] <KirkMcDonald> Ninpo: A trie is a prefix tree. So you'd split each thing into a list of words, and build this structure with the result. https://en.wikipedia.org/wiki/Trie
[22:05:52] <haniaF> bjs: is using a mock.patch outside of tests code a good solution?
[22:05:55] <curious_user> bjs the thing is that it runs faster without the threads
[22:06:05] <curious_user> and i want my code to run the faster as possible
[22:06:06] <bjs> curious_user: you mean the commented out code is slower?
[22:06:23] <tmart> (And finally, Payam, "type" is a builtin function. Is not ideal to use that name if you can avoid it because it overwrites the builtin in your block.)
[22:06:29] <KirkMcDonald> Ninpo: This would let you answer questions like... "For each unique starting word, what is the longest common prefix involving that word?"
[22:06:40] <curious_user> the commented code is faster
[22:06:43] <Payam> yes it does
[22:06:43] <curious_user> bjs
[22:06:44] <KirkMcDonald> Ninpo: I am unfamiliar with that specific library.
[22:06:59] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[22:07:19] <bjs> curious_user: isn't the commented code also using threads? the executors
[22:07:38] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 265 seconds)
[22:08:00] <Ninpo> KirkMcDonald: wouldn't the longest common prefix give me repeated things like in my list? the longest one would come out
[22:08:15] <curious_user> no bjs
[22:08:36] <Ninpo> I had no idea that something I can do so easily with my eyes would be so complex to try and do in python
[22:08:44] <bjs> curious_user: your code contains lots of commented out code, some of the commented out code uses threads, so i'm just a little confused
[22:08:54] <curious_user> oh, yes, sorry
[22:08:58] <KirkMcDonald> How do you distinguish the brand names from the rest of the string? What's the determining factor there?
[22:09:20] <bjs> curious_user: which bits am I supposed to look at and which am I not supposed to look at? :)
[22:09:22] <KirkMcDonald> Ninpo: If it isn't merely "this part of the string is shared in common with other strings," then there has to be something else.
[22:09:31] <curious_user> i'll show you
[22:09:49] *** Joins: orangeextract (~orangeext@user/orangeextract)
[22:10:00] <curious_user> here : https://pastebin.com/dBFAf7ZT
[22:10:36] <bjs> curious_user: where did the while loop go?
[22:10:41] <curious_user> i want to make tests run with threads, that is why i wrote suitei() fonctions
[22:10:48] <Ninpo> KirkMcDonald: so for GIN GLIDERS, the two words "GIN GLIDERS" appears in all these items. I run into problems when different brands end up in the data set
[22:11:01] <curious_user> which loop bjs ?
[22:11:03] <Ninpo> I can pull GIN GLIDERS out no problem if I only have GIN GLIDERS things. Throw in a few other not GIN GLIDERS and I get a mess
[22:11:22] *** Quits: roro (roro@user/roro) (Ping timeout: 258 seconds)
[22:11:25] <Ninpo> even if I feed all the products into a set first so SPRINT 3 etc aren't repeated
[22:12:21] <bjs> curious_user: I'd write this like `with concurrent.futures.ThreadPoolExecutor() as executor: executor.submit(suite); executor.submit(suite1); ...` etc
[22:12:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 244 seconds)
[22:12:31] *** Quits: DPA (~DPA@2a05:41c0:b:db04::a3c:10d) (Ping timeout: 258 seconds)
[22:12:35] <curious_user> cool, gonna try that
[22:12:45] <KirkMcDonald> Ninpo: Are there any brands that have the same first word in common?
[22:12:54] <Ninpo> umm let me check
[22:13:03] *** Joins: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d)
[22:14:04] *** Joins: han-solo (~han-solo@user/han-solo)
[22:14:07] <curious_user> bjs, it doesnt make the test run
[22:14:12] *** Joins: ubert (~Thunderbi@77.119.175.138.wireless.dyn.drei.com)
[22:14:27] *** Quits: bitblit (~bitblit@gateway/tor-sasl/bitblit) (Ping timeout: 276 seconds)
[22:14:45] <hexnewbie> Unless the GIL is released during some string operations that I'm unaware of, running multiple threads isn't going to optimize Python string processing
[22:16:26] *** Quits: ionface_ (~ionface@user/ionface) (Read error: Connection reset by peer)
[22:16:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[22:17:08] *** Joins: ionface (~ionface@user/ionface)
[22:17:22] *** Joins: hendursaga (~weechat@user/hendursaga)
[22:17:30] <Ninpo> KirkMcDonald: it doesn't look like it. I've some oddities with some items that are prefixed CLIMBING (there's a brand and just some odd stand alone items that start with CLIMBING) but I there's few enough I can deal with those by hand somehow
[22:18:14] *** Quits: Dcode200 (~pede@87-63-32-71-dynamic.dk.customer.tdc.net) (Quit: Leaving.)
[22:18:24] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[22:18:24] <KirkMcDonald> Ninpo: So, yeah, a trie would probably do it.
[22:18:44] <Ninpo> are you able to guide me with implementing one? This is incredibly new concept to me
[22:19:01] <Ninpo> No worries if not I can always fall back on sticking hyphens in as a separator if need be heh
[22:19:14] *** Quits: DPA- (~DPA@2a05:41c0:b:db04::a3c:10d) (Quit: ZNC 1.8.2+deb2~bpo10+1 - https://znc.in)
[22:19:37] <KirkMcDonald> Ninpo: I can't really walk you through it right now, but the Wikipedia page does communicate the basic idea.
[22:20:03] <Ninpo> yeah I never took CS or anything like it, I'm hitting a self taught wall
[22:20:10] <Ninpo> OK I'll keep trying to grok it, thanks
[22:20:26] <KirkMcDonald> Ninpo: But my thinking is, once you have a trie, you'd iterate through the children of the root node (the unique first words), and then descend through children as long as there is only one child (the unique prefixes).
[22:20:30] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[22:20:46] <KirkMcDonald> As soon as there are multiple children of a node, that's where the unique prefix ends.
[22:21:11] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[22:21:59] <bjs> curious_user: oh right,  executor.submit(runner.run, suite1) or something.  -- there is a big difference between your codes though because one creates many unittest runners and the other only creates one.  It might be that having many runners run 1 test is slower than having 1 runner run all the tests
[22:22:14] *** Quits: rhax (~yannick@user/rhax) (Remote host closed the connection)
[22:22:33] <KirkMcDonald> Ninpo: And I should maybe stress that while the diagram on the Wikipedia page is a trie of the letters in a series of words, you'd be making a trie of the words in your series of strings.
[22:22:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[22:22:55] <Ninpo> so I need to split my strings on a space
[22:23:00] <KirkMcDonald> Yeah.
[22:23:01] <Ninpo> then make a trie with them?
[22:23:06] <KirkMcDonald> That's what I'm thinking.
[22:23:14] <Ninpo> and I can do that with multiple strings?
[22:23:35] <KirkMcDonald> You'd have one trie, and you'd stuff each string's list-of-words into it.
[22:23:45] <bjs> curious_user: looking at your code, unless the `grep` is taking a lot of time you might not get much benefit from threads at all
[22:23:57] *** Joins: node1 (~node1@user/node1)
[22:24:10] <curious_user> good
[22:24:14] <curious_user> okay bjs
[22:24:20] <curious_user> thank you
[22:24:40] *** Joins: fikran (~fikran@user/fikran)
[22:24:45] <boris[m]> how can I change all instances of `test-one.service` to `prefix-test-one.service`. At the moment I am using this regex: "test-[a-zA-Z]+\.service" but I am stuck :)
[22:25:14] <boris[m]> *all instances in a file
[22:27:05] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (Ping timeout: 258 seconds)
[22:28:00] <node1> What is `codepoint ` ? Does it mean `Code Point Representation of Written Symbols`
[22:28:19] <bjs> node1: is there... some context?  Usually when people say "codepoint" they're referring to unicode
[22:28:35] <node1> Ok
[22:28:48] <bjs> node1: are you talking about unicode, or about something else?
[22:29:21] <node1> control chatracter is also another name for unicode character representation.
[22:29:27] <bjs> node1: no
[22:30:03] <node1> then?
[22:30:24] <bjs> node1: the idea of unicode is roughly to give every letter/symbol/character a unique number (which unicode calls a "codepoint").  Because languages are complicated codepoints are a bit weird.
[22:30:58] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:24] <node1> ok
[22:31:27] <bjs> node1: control characters are that, they are characters that control things.  Like a group of special characters that mean something but aren't really "symbols"
[22:31:35] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[22:31:50] <bjs> node1: e.g. "\n" aka NEWLINE aka LF (line-feed) aka Codepoint 10 is a "control" character
[22:32:20] <node1> \ <-- reverse solidus ?
[22:32:41] <bjs> node1: I'm not sure what you're asking
[22:32:55] *** Joins: ElPresidente (~ElPreside@2600:1700:3d10:4870:5f5:9b58:962f:5742)
[22:33:10] <newpy> with pandas.DataFrame.plot(subplots=True) how would I get rid of the gap between the vertically stacked graphs?
[22:33:37] <node1> One of  "control character" example is reverse solidus    https://en.wikipedia.org/wiki/Backslash
[22:33:52] <bjs> node1: unicode gave \ the codepoint 92 (aka 0x5C in hex) and there are websites that tell you information about each codepoint (such as their name, what category [e.g. if they're a control character]) https://www.fileformat.info/info/unicode/char/5c/index.htm
[22:33:56] <node1> reverse solidus = backslash
[22:34:03] <bjs> node1: unicode does not call \ a control character
[22:34:35] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[22:35:23] *** Quits: kristine8650 (~kristine8@2603-7080-af03-588a-11f2-cbd9-8c31-4d89.res6.spectrum.com) (Ping timeout: 256 seconds)
[22:35:25] <node1> can you please show me the link where line-feed is called control character.
[22:35:42] <bjs> node1: I just gave you a link that lets you look up *any* character
[22:36:00] <node1> ok
[22:36:54] <bjs> node1: so look up line-feed there and it'll show you it's classified as a control character. Which makes sense. Control characters aren't really letters/symbols/anything from human languages, they're just there to control the way the text is printed on a computer
[22:37:04] <node1> ok
[22:37:05] *** Joins: Pickchea (~private@user/pickchea)
[22:37:36] <node1> now it's clear :)  thank you
[22:39:08] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[22:42:42] <Gustavo6046> What would be a state-oriented programming language?
[22:43:15] <bjs> Gustavo6046: Python? idk, what is state-orientated programming?
[22:43:38] <Gustavo6046> Where you have entities and each entity is a state machine with defined interactions between states and between different entities.
[22:43:43] <Gustavo6046> Not OOP, though
[22:44:11] <Gustavo6046> States aren't exactly the same as data values. The latter can represent the former.
[22:44:21] *** Quits: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072) (Ping timeout: 276 seconds)
[22:44:24] <Gustavo6046> Oh, maybe this is actor-oriented programming but with first-class state machines?
[22:45:32] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 244 seconds)
[22:45:59] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:46:47] *** Quits: Myst (~Myst@user/myst) (Quit: Bye!)
[22:47:11] *** Quits: pro_z__ (~pro_z@37.214.55.89) (Ping timeout: 245 seconds)
[22:47:58] <tmart> sounds like you're coming straight from wikipedia. those categories are blurred in real-life
[22:49:49] *** Joins: Myst (~Myst@user/myst)
[22:51:29] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[22:51:44] *** Quits: elkalamar_ (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 244 seconds)
[22:51:51] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[22:53:04] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[22:53:27] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[22:53:51] <Gustavo6046> True
[22:53:58] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[22:54:03] *** Parts: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Leaving)
[22:54:33] *** Joins: jazzy (~jaziz@user/jaziz)
[22:54:42] <Gustavo6046> tmart: Take Doom for instance, Each mobj_t, or game object, has its behaviour defined primarily by its states. A state defines which sprite and frame it should display, for how long to stay in it, and, if applicable, a 'function' to call when that state begins.
[22:54:47] *** Joins: bob_x1 (~bob_x@gateway/tor-sasl/bobx1/x-26457072)
[22:54:49] *** Joins: junktext_ (~junktext@gateway/vpn/pia/junktext)
[22:54:57] *** Quits: orangeextract (~orangeext@user/orangeextract) (Quit: Leaving)
[22:55:16] <Gustavo6046> For instance, in one of the frames of its attack animation, the Imp plays its attack sound, and in another frame/state, it calls the function to shoot a projectile.
[22:55:23] <Gustavo6046> Er, the attack sound is also a function :p
[22:55:29] *** Quits: eN_Joy (~eN_Joy@wsip-72-213-93-155.ok.ok.cox.net) (Ping timeout: 265 seconds)
[22:55:58] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[22:56:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:56:09] <hrob> Gustavo6046  object typically have states, a mix, I think state machine is maybe a term somewhat a little before oop style - then again framworks like React.js  keep a state for widgets in a .state var , but feels like oop
[22:56:46] <Gustavo6046> I want a general-purpose programming language that is more flexible and lets you run more arbitrary code (which could be compiled down? kinda JIT? but generally interpreted), whilst still regarding said states as fundamental, and providing a clean, succinct, and flexible way to define states and their transitions, with good defaults.
[22:57:11] <Gustavo6046> hrob: yeah, in OOP states are preresented by variables, or some variables, but that feels like a bit of extra heft.
[22:57:17] <Gustavo6046> I don't reeeally want OOP.
[22:57:33] <Gustavo6046> At least not the way it's usually done.
[22:57:41] <Gustavo6046> The actor model is scalable and simpler.
[22:57:48] <Gustavo6046> And more CPU-cache friendly I think :P
[22:57:53] <hrob> Gustavo6046  hm... typical style of programming is with objects... and duck-typing  too in python
[22:58:46] <moonmoon> I think what you're asking about is orthoganal to the main style of programming language. You can have stateful things in any language for the most part, just how that is represented varies based on the language (oop would wrap the state in objects, procedural would keep track of it a different way, functional a different way still, etc.)
[22:58:52] <hrob> Gustavo6046  perhaps Golang is better fit for you... strongly typed, rather functional, but can do OOP too, has cool features for OOP but not anything like classes
[23:00:12] <hrob> Gustavo6046  Golang is statically compiled, but compiles super fast compared to C, a necessity for static types mostly I think.
[23:00:34] <Gustavo6046> Hmm
[23:00:42] *** Joins: yotsuba420 (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:00:44] <Gustavo6046> but how embeddable is Golang?
[23:00:48] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[23:01:05] <hrob> Gustavo6046  embeddable?   not sure what you mean... but easy to embed C/C++ code
[23:01:27] *** Quits: masta`` (~oyster@user/masta/x-2645138) (Remote host closed the connection)
[23:01:28] <hrob> Gustavo6046 that code will not be handled by the runtime garbage collector though, but really useful
[23:01:44] *** Joins: c10l (~c10l@user/c10l)
[23:01:46] <Gustavo6046> As in, let's say I want to produce a binary of code from Golang, and put it inside an archive with a bunch of other files and assets, and a Doom source port loads it in and takes this binary and uses it to define the behaviour of some user-defined game object types.
[23:02:49] *** Joins: jonaskabrink (~jonaskabr@ip1f128470.dynamic.kabel-deutschland.de)
[23:02:52] *** Joins: masta`` (~oyster@user/masta/x-2645138)
[23:02:54] *** Quits: yotsuba420 (~yotsuba@93-172-241-53.bb.netvision.net.il) (Client Quit)
[23:03:06] *** Quits: yotsuba-chan (~yotsuba@93-172-241-53.bb.netvision.net.il) (Ping timeout: 244 seconds)
[23:03:16] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:04:10] <hrob> Doom source port as in Doom the computer-game?
[23:04:19] <Gustavo6046> Yup.
[23:04:21] <hrob> lol
[23:04:24] <Gustavo6046> lol
[23:05:18] <hrob> Gustavo6046 I haven't done that, I suppose Doom source is in C or C++ and probably compilable with gcc/g++ ?
[23:05:27] <Gustavo6046> It's in C, yes
[23:05:30] *** Joins: yotsuba (~yotsuba@93-172-241-53.bb.netvision.net.il)
[23:05:36] <Gustavo6046> Though actor behaviour is defined in a list of states
[23:05:39] <Gustavo6046> (in C)
[23:05:50] <Gustavo6046> "Source ports" are basically free software forks of the Doom engine, which was GPL'd
[23:06:00] <Gustavo6046> Well
[23:06:02] <Gustavo6046> Forks in general
[23:06:10] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:07:10] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.4-dev)
[23:07:34] *** Joins: r3m (~launch@user/r3m)
[23:07:46] <hrob> I believe go compiler can produce  libs for C/C++  functional with gcc or at very least googl clang compiler of C/C++
[23:08:04] <hrob> there is also a gccgo project... dont know how well it has developed yet.
[23:08:26] *** Joins: daoudr (~daoudr@2a02:1205:c690:ca10:1f8f:22dc:9967:691a)
[23:08:26] <hrob> but I have normally worked other way, importin C libs into golang
[23:09:00] <hrob> we are way off topic now, can take it to the golang channel
[23:09:19] *** Quits: white5moke (~white5mok@ip72-219-109-30.oc.oc.cox.net) (Quit: Leaving...)
[23:09:58] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Ping timeout: 260 seconds)
[23:10:00] <Gustavo6046> I think gccgo didn't fly
[23:10:10] <Gustavo6046> GNU has stagnated and I don't think they're all that worthwhile nowadays
[23:10:24] <Gustavo6046> but yeah sorry
[23:10:40] <hrob> gcc/g++ not stagnated, but yeah take it golang
[23:10:51] <hrob> I'll check on the discussion, interesting questoin
[23:11:06] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[23:13:03] <Gustavo6046> GCC is ehhh
[23:13:04] <Gustavo6046> I prefer clang
[23:13:27] <hrob> Gustavo6046  but then again there are compilers that take pure python and compile with gcc or clang, like nuitka
[23:13:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[23:15:37] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269)
[23:15:59] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 264 seconds)
[23:16:13] *** Joins: SuperLag (~akulbe@user/superlag)
[23:16:15] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Quit: ZNC 1.8.2 - https://znc.in)
[23:16:26] *** Quits: kindablue (znc@2001:19f0:6001:175a:5400:3ff:fe51:d77f) (Quit: System Rebooting..)
[23:16:41] *** Joins: kindablue (kindablue@irc.tpurist.com)
[23:17:10] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[23:17:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:19:29] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[23:19:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:e4b2:f645:3584:d269) (Client Quit)
[23:20:19] *** Quits: BlessJah (~BlessJah@user/blessjah) (Remote host closed the connection)
[23:21:12] *** Joins: nomic (~nomic@85.203.36.101)
[23:21:36] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[23:22:13] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 244 seconds)
[23:22:19] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[23:22:53] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[23:22:54] <hrob> Gustavo6046_  channel seems called go-nuts
[23:24:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:24:41] *** Gustavo6046_ is now known as Gustavo6046
[23:24:46] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[23:24:55] <Gustavo6046> yeah I joined it
[23:24:57] <Gustavo6046> And yeah I've heard of Nuitka
[23:25:00] <Gustavo6046> but Python isn't very flexible in terms of syntax
[23:25:02] <Gustavo6046> Maybe metaprogramming
[23:25:08] <Gustavo6046> I could have Python code that takes other Python code and compiles it by its own means into something else, like Lua.
[23:25:20] *** Quits: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com) (Ping timeout: 260 seconds)
[23:26:22] *** Quits: doc (~doc@user/doc) (Quit: Things to do)
[23:29:47] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:30:06] <hrob> Gustavo6046  very often Python is used to expose functionality in C-code... like say the Blender project has a python interface
[23:30:23] <hrob> Gustavo6046 its probably not a good idea to go the other way around
[23:30:23] <Gustavo6046> Yeah
[23:30:41] <Gustavo6046> I was meaning to use Python to compile stuff written in Python (but not *run* in Python) into lower-level code.
[23:30:48] <Gustavo6046> Not compiling Python itself
[23:30:51] <Gustavo6046> It'd be declarative
[23:31:31] *** Joins: Vonter (~Vonter@user/vonter)
[23:32:13] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[23:33:18] *** Quits: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de) (Ping timeout: 260 seconds)
[23:33:48] <Gustavo6046> What is the usual way to use Python to generally write code when its purpose is not to be run as Python?  Hy?
[23:36:37] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:db7:a2d6:e7e0:dacc)
[23:37:55] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[23:38:26] *** Joins: derek_v (~derek_v@cpe-70-95-160-136.san.res.rr.com)
[23:38:34] <hrob> cython probably doesnt do it,  but it seems like you can, with some effort do it with the CPython headers files and link against libpython3.x version,
[23:38:35] <hrob> https://stackoverflow.com/questions/3286448/calling-a-python-method-from-c-c-and-extracting-its-return-value
[23:38:57] <hrob> doesnt look fun to me though
[23:39:26] *** Joins: magla (~gelignite@55d43ee1.access.ecotel.net)
[23:39:59] *** Quits: curious_user (~curious_u@88.120.114.223) (Ping timeout: 256 seconds)
[23:40:53] <Gustavo6046> Yeahh
[23:41:00] <Gustavo6046> I don't want to compile Python to C though
[23:41:04] <Gustavo6046> Or really compile Python at all
[23:41:49] <Yhg1s> Gustavo6046: you literally just said "compile stuff written in Python (...) into lower-level code."
[23:41:51] <Gustavo6046> I just want to compile something that can be subroutines or state machine states, with some sort of hierarchy inbetween (maybe Python class objects with references inbetween?), that isn't Python, but is defined within Python.
[23:41:54] <Gustavo6046> yeah
[23:42:00] <Gustavo6046> Sorry I should've been clearer
[23:42:00] <Yhg1s> but it sounds like you don't want Python at all then.
[23:42:02] *** Joins: mcon (~Thunderbi@host-79-55-229-50.retail.telecomitalia.it)
[23:42:03] *** Joins: vimart (~vimart@85.255.235.142)
[23:42:04] <Gustavo6046> I do want Python
[23:42:07] <Gustavo6046> or well
[23:42:23] <Gustavo6046> it might not be the tool for the job, Nim has more flexible metaprogramming, but I'm most familiar with it and I just want a prototype first and foremost.
[23:43:25] <mcon> can someone help me fixing a distutils -> setuptools apparentlu not working?
[23:43:29] <hrob> I think the answers below the accepted answer https://stackoverflow.com/questions/3286448/calling-a-python-method-from-c-c-and-extracting-its-return-value  do not compile the python code
[23:43:34] <hrob> as far as I understand
[23:45:09] <hrob> I would guess they run the .py code using the CPython interpreter, but havent tried this before afraid
[23:45:16] *** Quits: Metalsutton (~Metalsutt@101.100.152.253) (Remote host closed the connection)
[23:45:50] <Gustavo6046> hrob: it's not about calling a Python method from C, though. It's about defining something in Python. I could just have people instantiate classes by using them as decorators where the function defines stuff, and then to compile the class object it just lists the stuff you wrote in the function and compiles it recursively. But that sounds like a pain for the end programmer.
[23:46:04] *** Joins: Metalsutton (~Metalsutt@101.100.152.253)
[23:46:24] <mcon> the two projects are on github: https://github.com/skylarkdrones/pyqtlet (old but working using distutils) https://github.com/JaWeilBaum/pyqtlet2 (newer but install broken using setuptools)
[23:46:36] <Gustavo6046> @ecomp.State(MyProject)
[23:46:53] <Gustavo6046> def my_state(state, project, ...):
[23:47:15] <mcon> Problem is I know nothing about distutils/setuptools :(
[23:47:24] <Gustavo6046>     state.def_method('check attack', state_check_attack) # state_check_attack would also be a ecomp.Method or something?
[23:47:34] <Yhg1s> mcon: what is the actual problem?
[23:47:38] <Gustavo6046>     # etc, etc
[23:47:45] <Gustavo6046> Something like that, but cleaner to write.
[23:47:51] <Gustavo6046> Anyone knows of a library like that? Any ideas?
[23:47:59] <Gustavo6046> Oh, could also use yield
[23:48:05] <Yhg1s> Gustavo6046: I have no idea what you expect that to do, so, no.
[23:48:20] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-bd47-4550-fa06-7a02.res6.spectrum.com)
[23:48:50] <Gustavo6046> Yhg1s: ecomp.State would turn that function into an object that implements ecomp.Instance (probably called StateInstance or something), and Instances would compile hierarchically into a target language, or could be interpreted.
[23:48:51] <mcon> Yhg1s: "pip install pyqtlet2" simply doesn't install the stuff.
[23:49:14] <Gustavo6046> The idea is using Python to help write stuff in a lower-level language.
[23:49:27] <Gustavo6046> Stuff that is a bit domain-specific, hence the emphasis on states.
[23:49:50] <Gustavo6046> The prime use case would be Doom sourceports, although my idea would probably be more general than that.
[23:49:59] <Gustavo6046> (also 'ecomp' is a name I just came up for the example)
[23:50:06] <mcon> Yhg1s: I tried cloning it and running "python3 setyp.py install" manually with "interesting" results.
[23:50:40] <Gustavo6046> Brb, shower
[23:50:48] <Yhg1s> mcon: okay, well, that's not a difference between distutils and setuptools. There are very many differences between the two setup.py files, including the important bits that tell Python what to install. The 'packages' directive.
[23:50:58] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[23:51:10] <Yhg1s> mcon: simply switching from distutils to setuptools is a lot simpler. Change 'from distutils.core import setup' to 'from setuptools import setup'
[23:51:37] <mcon> Yhg1s: yesss. I do understand this, but myy knowledge on the matter is really minimal.
[23:51:43] <Yhg1s> Gustavo6046: that vaguely sounds like something you might build with, say, LLVM.
[23:52:21] <Yhg1s> mcon: okay, so why is the pyqtlet2 setup.py file missing necessary things?
[23:53:17] <Gustavo6046> Yhg1s: I don't know if it'd compile down into machine code. That would happen *after* the part where it compiles down to a low-level language. It'd be stored as that low-level language. So the end application can *then* decide whether to interprete it or AOT or JIT it or what
[23:53:34] <Gustavo6046> And the bathroom is busy, so I'm waiting before shower.
[23:53:43] <mcon> Yhg1s: Apparently they moved a whole subdir (pyqtlet2/web) out (they are now sibling)
[23:53:51] <Yhg1s> Gustavo6046: that really doesn't change my answer. Guess what practically all compilation does as its first step?
[23:53:58] <Gustavo6046> Parse?
[23:54:05] <Gustavo6046> Abstract?
[23:54:12] <Yhg1s> Gustavo6046: compile down to a lower level language.
[23:54:24] <Gustavo6046> Er, isn't that compilation itself?
[23:54:37] <Gustavo6046> That's not a step, that is the end goal.
[23:54:44] <Gustavo6046> Compilation can involve subcompilation
[23:54:48] <Yhg1s> Gustavo6046: you _just said_ you wanted it to be the fist step.
[23:54:52] <Gustavo6046> But this is mostly semantical squabbling
[23:55:17] *** Quits: sharperguy (~sharpergu@88.130.219.95) (Ping timeout: 244 seconds)
[23:55:26] <Yhg1s> Gustavo6046: you asked for a thing. I told you about something that does the thing. You said that wasnt what you meant, and asked for what you think was a different thing. I told you the original thing was the same thing.
[23:55:30] <Gustavo6046> Yhg1s: yeah, but the circumstances in which it goes down to machine code (if at all) are different than the ones pertinent to the first step, which is getting it down from an original, higher-level language.
[23:55:34] <mcon> Yhg1s: general error is "setup.py build" essentially does nothing and "setuo.py install" complains because "warning: install_lib: 'build/lib' does not exist -- no Python modules to install"
[23:55:43] <Gustavo6046> Ah, well
[23:55:47] <Yhg1s> mcon: yes, because of the missing 'packages' directive to setup.
[23:55:52] <Gustavo6046> LLVM IR is veeery general purpose and it's pretty lovely, if that's what you mean
[23:56:15] *** Joins: kakashiAL (~kakashi@ip-37-201-199-21.hsi13.unitymediagroup.de)
[23:56:15] <Gustavo6046> But I was thinking more like, I dunno, maybe compile down to Lua, or something that interfaces more seamlessly with C or something I dunno
[23:56:34] *** Quits: marcello42 (~mp@p200300dfaf07ff01fa2e52f98b4dfc80.dip0.t-ipconnect.de) (Quit: Konversation terminated!)
[23:57:04] <mcon> Yhg1s: can you suggest how to fix this? I know what you are talking about, but I never actuelly used neither setuptools nor distutils.
[23:57:36] <Gustavo6046> But also that is embeddable / easier to compile, unlike C.
[23:57:39] <Yhg1s> mcon: okay, I recommend that, if you want to fix the setup.py file, you should learn about the setup.py file. But again, what's missing is the 'packages' directive. Compare the two setup.py files and notice what 'packages' contains in the working one.
[23:57:44] <Gustavo6046> And not necessarily human friendly
[23:57:46] <Gustavo6046> WASM?
[23:58:26] *** Joins: Ard1t (~ard1t@user/ard1t)
