[00:00:01] *** Joins: Akiva (~Akiva@user/Akiva)
[00:00:07] <geekosaur> github.com/kindelia/hvm I believe
[00:00:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[00:01:25] *** Joins: fendor (~fendor@77.119.206.49.wireless.dyn.drei.com)
[00:02:13] <SrPx> yep, just PM'ed them
[00:02:24] <SrPx> just asked here to check if this is a common issue
[00:03:12] <geekosaur> I have no clue; I rarely visit reddit
[00:03:23] <yushyin> shadow banning and filtering of posts is a very common reddit issue
[00:03:48] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[00:04:58] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0)
[00:04:59] <yushyin> SrPx: https://www.reddit.com/r/ShadowBan/comments/8a2gpk/an_unofficial_guide_on_how_to_avoid_being/
[00:05:07] <segfaultfizzbuzz> this was pretty interesting: https://github.com/Kindelia/HVM
[00:05:58] <SrPx> I see, where you get FP news?
[00:06:08] <SrPx> would appreciate ideas about where else I can post HVM
[00:06:18] <SrPx> segfaultfizzbuzz: hm thanks :)
[00:06:48] <yushyin> HN ofc
[00:12:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:8844:e45a:1aab:92c2) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:12:51] *** Joins: mindwarp (~mindwarp@sdf.org)
[00:14:15] <segfaultfizzbuzz> SrPx sent me a dm asking if i was "someone they know" ... i have no prior knowledge of SrPx... is SrPx a spammer...?
[00:14:25] *** Quits: mindwarp (~mindwarp@sdf.org) (Client Quit)
[00:14:53] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:15:02] <geekosaur> no, or at least not previously
[00:15:18] <maerwald> well, that's one way to decline a friendship :D
[00:15:23] <[exa]> what trickery happens here btw? https://github.com/Kindelia/HVM#composition-optimal
[00:16:16] <segfaultfizzbuzz> i have no knowledge of the HVM repo or the person who posted it btw, i am just kinda trying to learn bits and bobs where i can ;-)
[00:16:37] <[exa]> I guess someone forgot a ! somewhere to really measure the same bits
[00:16:40] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[00:17:00] <segfaultfizzbuzz> lol yeah it's just a strictness annotation issue looks like?
[00:17:50] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[00:18:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[00:19:10] <maerwald> huh?
[00:19:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[00:20:11] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[00:21:09] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Client Quit)
[00:22:54] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[00:25:17] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 240 seconds)
[00:31:06] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[00:37:52] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[00:38:41] *** Joins: cynomys (~cynomys@user/cynomys)
[00:39:39] *** Joins: pavonia (~user@user/siracusa)
[00:40:25] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:40:27] <wavemode> it's not strictness per se, it's the fact that it's doing millions of function compositions
[00:41:10] *** Joins: cjb (~cjb@user/cjb)
[00:41:39] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[00:44:00] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[00:44:10] <carbolymer> % du -h -s .stack 
[00:44:10] <carbolymer> 38G	.stack
[00:44:10] <carbolymer> ah yes, node_modules successor
[00:44:10] <yahb> carbolymer: ; <interactive>:18:1: error:; * Variable not in scope: du :: a -> c; * Perhaps you meant `au' (imported from Control.Lens); <interactive>:18:5: error: Variable not in scope: h :: a -> c; <interactive>:18:8: error: Variable not in scope: s :: b0 -> c; <interactive>:18:11: error: Variable not in scope: stack :: a -> b0
[00:44:16] <carbolymer> :S
[00:45:11] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[00:45:39] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[00:46:42] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[00:47:16] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[00:48:10] *** Quits: matijja (~matijja@193.77.181.201) (Quit: ZNC 1.8.1 - https://znc.in)
[00:48:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[00:49:47] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[00:51:00] *** Joins: matijja (~matijja@193.77.181.201)
[00:52:35] *** Quits: zebrag (~chris@user/zebrag) (Ping timeout: 268 seconds)
[00:53:23] *** Parts: timmot (~timmot@207.148.85.201) ()
[00:53:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:55:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[00:56:13] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[00:58:46] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[00:59:59] <maerwald> carbolymer: everything assumes infinite storage these days: docker, nix, stack, ...
[01:00:02] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0) (Quit: Leaving)
[01:00:52] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[01:02:19] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[01:02:27] <carbolymer> maerwald: it's the age of the cloud! we need cloud-scale storage for those, like pingfs https://github.com/yarrick/pingfs
[01:02:56] <maerwald> carbolymer: you mean https://github.com/fpco/cache-s3
[01:07:36] <carbolymer> maerwald: if you mean plain old boring build caching, then probably yes
[01:08:04] *** Joins: y04nn (~y04nn@92.223.89.196)
[01:08:50] <maerwald> and has the benefit that you can pay amazon a lot of money for it
[01:10:16] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:11:31] *** Quits: texasmynsted_ (~texasmyns@99.96.221.112) (Quit: ZNC - http://znc.in)
[01:14:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[01:14:50] *** Joins: nineonine (~nineonine@2604:3d08:7780:cd00:1deb:a18f:f447:b812)
[01:15:00] <nineonine> hey all, question about exception
[01:15:16] <nineonine> I want to write a function that logs exceptions in my app
[01:15:34] <nineonine> should the type of the parameter by SomeException or Exception e => e ?
[01:15:39] <nineonine> be*
[01:15:47] <nineonine> and what would be the difference\
[01:16:03] <EvanR> what would it do, print out the exception?
[01:16:09] <nineonine> yes, just printing
[01:16:21] <EvanR> then String works
[01:16:55] <nineonine> the function is intended to be called from `catch` and friends
[01:16:58] *** Joins: stef204 (~stef204@user/stef204)
[01:17:20] <EvanR> well if you don't want to call show there, you can use Show a => a xD
[01:17:34] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[01:17:42] <nineonine> ok, I will ask question differently
[01:17:55] <nineonine> what is the difference between SomeException and Exception e => e
[01:18:33] <EvanR> because any exception type e can be converted to SomeException, and converted back (if it makes sense), very little
[01:19:05] <nineonine> got it, thanks
[01:19:34] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:20:20] <awpr> `catch` cares what exception type you instantiate it with (by virtue of using the `fromException` method of `Exception`)
[01:21:18] <geekosaur> the constraint version lets you do a little more but is more annoying to work with, whereas SomeException lets you avoid it but only allows a few operations (like you can't ask for more detail that many exceptions provide)
[01:21:22] <geekosaur> iirc
[01:21:30] <awpr> from the perspective of the handler function itself `SomeException -> IO ()` and `Exception e => e -> IO ()` are equivalent, because the latter is just a "curried" form of the latter
[01:21:37] <geekosaur> if all you're doing is "show" then SomeException is easier
[01:21:53] <awpr> er, former
[01:22:01] <EvanR> SomeException would also require you to manually convert, or else catch SomeException
[01:22:44] <nineonine> how can I "ask for more detail"? 
[01:22:49] <nineonine> which function should I use?
[01:24:19] <awpr> but, from the perspective of passing it to `catch`, the `SomeException` version specifies `SomeException` is the type that will be caught, i.e. will catch all exceptions; while the `e` version will require you to use TypeApplications or something to specify yourself what to catch, and if you choose something more specific than `SomeException`, then fewer exceptions will be handled by that `catch`
[01:26:17] <awpr> "ask for more detail" is probably `displayException`.  you can do that with both forms equally, because `data SomeException = Exception e => SomeException e`.  there is no difference in the capabilities of the two, only in how they interact with type inference
[01:26:36] <geekosaur> nineonine, some exceptions have multiple constructors and some of those constructors have parameters, so you pattern match on the specific exception type with a type application
[01:27:07] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[01:27:26] <nineonine> thanks everyone!
[01:28:07] <geekosaur> you can extract most of it from the "show" output but it's pretty unstructured
[01:28:12] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[01:28:48] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[01:28:52] <awpr> this is still not a difference between `SomeException -> ...` and `Exception e => e -> ...`.  this is a difference between either of those two and e.g. `IOException -> ...`
[01:30:13] <awpr> (and with either of the former two, you can still `case fromException x of Just (x' :: IO Exception) -> ...; Nothing -> "Not an IOException"`)
[01:31:35] <EvanR> so I'm writing a "foldr" function for some type. The type is recursive. Up to this point I half thought that folding a list took a "state" that could be used by the visiting function. But in my fold I didn't think of that and just map each constructor with some callback. Am I tripping and you don't have a state even with lists?
[01:32:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:32:49] <monochrom> I don't think of []'s foldr having state either.
[01:32:57] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[01:33:18] <Morrow> I think of foldl as having a state, but not foldr (for lists, at least).
[01:33:18] <awpr> is it a "foldr" in the sense of "visit elements sequentially right-to-left" or in the sense of "collapse the structure from the bottom up" (i.e. catamorphism)?
[01:33:37] *** Joins: jinsun__ (~quassel@user/jinsun)
[01:33:56] <awpr> looking at foldr, the catamorphism for lists, the thing that looks like "state" is actually the 0-ary "callback" for the 0-ary constructor `[]`
[01:34:33] <awpr> er, the "initial state" is that and the "ongoing state" is the result for each sub-structure
[01:34:51] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[01:35:01] <EvanR> it's like foldr
[01:35:41] <EvanR> so now I'm wondering how to do a traversal with state, is that not a thing xD
[01:35:44] <awpr> so if your type doesn't have any empty constructors, then its catamorphism wouldn't have any 0-ary "callbacks", i.e. nothing that looks like an "initial state"
[01:35:59] <EvanR> the leaves can be interpreted by one of the callbacks
[01:36:13] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[01:36:15] <EvanR> no 0-ary though
[01:36:25] <tomsmeding> EvanR: does it make sense to define your function as 'myfoldr f z thing = foldr f z (toList thing)'
[01:36:37] <EvanR> no it's a tree
[01:36:46] <tomsmeding> still
[01:37:09] <monochrom> Both foldlM and foldrM exist, and you can set the monad to a state monad.
[01:37:28] <EvanR> foldrM...
[01:38:16] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[01:38:53] <EvanR> "do you guys just put 'monadic' in front of everything" --antman
[01:39:20] <monochrom> Nah but "traversal with state" was brought up.
[01:39:29] <EvanR> just kidding
[01:39:31] <EvanR> looking that up
[01:39:44] <tomsmeding> EvanR: data Tree a = Node (Tree a) (Tree a) | Leaf a; treefoldr :: (s -> Either (b, b) a -> (s, b)) -> s -> Tree a -> (s, b); treefoldr f s (Node a b) = let (s1, a') = treefoldr f s a; (s2, b') = treefoldr f s1 b in f s2 (Left (a', b')); treefoldr f s (Leaf x) = f s (Right x)
[01:39:51] <tomsmeding> is that kind of what you were looking for?
[01:40:12] <tomsmeding> also it's a foldl not a foldr
[01:40:17] <tomsmeding> but never mind that
[01:40:28] *** Joins: modnar (~modnar@shell.sonic.net)
[01:40:41] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 268 seconds)
[01:40:49] <tomsmeding> this is a post-order traversal, but can be easily rewritten to do whatever order you like
[01:41:01] <tomsmeding> note that the only reason you have to choose an order is because it's threading state through
[01:41:28] <EvanR> so you write a tree fold (l) with an explicit state... ok
[01:41:52] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[01:41:56] <tomsmeding> the standard no-state fold (nostatefold f1 f2 (Node a b) = f1 (nostatefold f1 f2 a) (nostatefold f1 f2 b2); nostatefold f1 f2 (Leaf x) = f2 x) is order-agnostic
[01:42:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:43:40] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[01:44:09] <EvanR> in Data.Foldable foldrM's default implementation uses foldl, so I'm thinking if I'm thinking "foldr" I'm not thinking state or effects
[01:45:02] <tomsmeding> well Data.Foldable's foldr is basically foldr over toList, except that the instance can choose traversal order to a limited extent
[01:45:29] <EvanR> it's funny I'm not seeing how List is relevant
[01:45:33] <tomsmeding> my nostatefold is the standard catamorphism for the Tree type, also known as its church envoding, also known as "the" fold
[01:45:53] <tomsmeding> and my treefoldr is an odd thing
[01:46:05] <EvanR> yeah
[01:46:05] <tomsmeding> EvanR: it's just how the Foldable class is set up
[01:46:12] <tomsmeding> it treats everything as a list, basically
[01:46:14] <EvanR> I like "the" fold
[01:46:37] <EvanR> https://paste.tomsmeding.com/RfJueAQF
[01:47:19] <EvanR> how do you comprehend this one as a list xD
[01:48:46] <tomsmeding> EvanR: ok that's not a parameterised datatype so doesn't fit Foldable in the first place
[01:48:54] <EvanR> yeah, working on it
[01:49:01] <tomsmeding> but I have absolutely no idea what your foldULC is supposed to do
[01:49:09] <tomsmeding> when do you call the (a -> a) -> a argument???
[01:49:15] <EvanR> on Lam
[01:49:38] <EvanR> after interpreting the body as a function
[01:49:38] <tomsmeding> and how do you interpret a Bar, and why is the argument order Far, App, ???, and what is Far even anyway :p
[01:49:41] * tomsmeding is confused
[01:50:08] <EvanR> sorry, bound variable, free variable
[01:50:15] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Quit: WeeChat 2.2-dev)
[01:50:35] <EvanR> so it's not a pure foldr, it's interpreting a lambda term as a thing with functions and scope
[01:50:48] <tomsmeding> Bound vARiable?
[01:50:53] <tomsmeding> right
[01:52:24] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[01:52:56] <EvanR> and I guess it's not enough to write a thing that "numbers" nodes or names variables
[01:53:14] <EvanR> (renames)
[01:54:49] <tomsmeding> EvanR: those Ints are De Bruijn indices?
[01:55:07] <tomsmeding> was this the intent https://paste.tomsmeding.com/q64QaWM9
[01:56:26] <EvanR> yes precisely
[01:56:44] <EvanR> you improved my code xD
[01:57:00] <tomsmeding> interesting, basically conversion to a church-encoded HOAS representation of the untyped lambda calculus with free variables
[01:57:53] *** Quits: MatthiasG2 (~matthias@i6DFA01BB.versanet.de) (Ping timeout: 256 seconds)
[01:58:14] <EvanR> ikr
[01:58:29] <tomsmeding> B)
[01:58:55] <tomsmeding> needs more GADT tho
[01:59:24] <EvanR> is your environment being built backward though
[01:59:43] <tomsmeding> the variables with the smallest scope are closest to the head of the list
[01:59:47] <tomsmeding> i.e. have smallest indices
[01:59:54] <tomsmeding> which is precisely De Bruijn indices in standard use
[02:00:05] <EvanR> hmm
[02:00:12] <tomsmeding> you also have the reverse variant, where variables are numbered from the top, which is perhaps what you had in mind
[02:00:45] <tomsmeding> EvanR: https://tomsmeding.com/ss/get/tomsmeding/7N8lJI
[02:00:57] <tomsmeding> ignore the odd syntax if possible
[02:01:07] <EvanR> yes to construct a Lam from a ULC I was thinking increment all the bound variables and replace some free variable with a 0
[02:01:18] <tomsmeding> right, that's de bruijn levels
[02:02:02] <tomsmeding> downside of de bruijn levels is that you need to traverse the whole tree in order to put it under a binder
[02:02:54] <tomsmeding> both indices and levels have the downside that substitution of the topmost binder requires renumbering all indices
[02:03:13] <tomsmeding> so if I'm not mistaken (may well be), indices are usually better because they require less renumbering
[02:03:13] <EvanR> unless we use this fold here
[02:03:20] <tomsmeding> well you can also use HOAS :p
[02:03:22] <EvanR> which doesn't renumber anything
[02:03:32] <tomsmeding> which is representing a lambda with a function precisely like you did
[02:04:39] <EvanR> you mentioned GADTs, in the case of ULC where would it benefit
[02:04:50] <tomsmeding> EvanR: https://paste.tomsmeding.com/kuTS60x4 that's HOAS
[02:05:55] <EvanR> ah you convert made a new structure that did away with bound vars
[02:06:03] <tomsmeding> kind of yes
[02:06:35] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[02:08:36] <EvanR> ULC can be saved and restored from text
[02:08:48] <EvanR> so can we get it back from HAOS
[02:09:59] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:10:54] <EvanR> I mean the name hints are gone but
[02:17:08] <EvanR> ah
[02:17:29] *** Joins: zebrag (~chris@user/zebrag)
[02:19:03] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:22:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:24:17] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[02:28:29] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[02:29:21] <EvanR> https://paste.tomsmeding.com/f3XaHI1U
[02:29:49] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:bc3f:ae22:7b02:63e) (Quit: Leaving)
[02:29:50] <tomsmeding> EvanR: higher-order abstract syntax
[02:29:54] <tomsmeding> not haos :p
[02:30:16] <EvanR> not hateoas?
[02:31:17] <tomsmeding> EvanR: that i parameter to UBar on the last line looks suspicious to the point of being wrong
[02:31:42] <EvanR> yep totally is wrong
[02:32:23] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:32:29] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:32:35] <EvanR> anyway roundabout but explains how a stateful traversal can ... do
[02:33:05] <EvanR> with basically just folds
[02:33:06] *** Quits: nineonine (~nineonine@2604:3d08:7780:cd00:1deb:a18f:f447:b812) (Ping timeout: 268 seconds)
[02:35:04] *** Quits: fendor (~fendor@77.119.206.49.wireless.dyn.drei.com) (Read error: Connection reset by peer)
[02:35:10] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[02:35:22] *** Quits: emf_ (~emf@163.114.132.4) (Ping timeout: 250 seconds)
[02:35:35] <tomsmeding> EvanR: https://paste.tomsmeding.com/bjp337Bt
[02:36:08] <tomsmeding> a ULC -> ULC' function would basically be a scope checker
[02:36:28] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:37:01] <tomsmeding> but this is beside the point for what you're doing I think :p
[02:37:43] <tomsmeding> if you want moar types and encode the simply-typed lambda calculus instead, you get something like this https://github.com/VMatthijs/CHAD/blob/755fc47e1f8d1c3d91455f123338f44a353fc265/src/Concrete.hs#L32-L36
[02:38:02] <tomsmeding> https://github.com/VMatthijs/CHAD/blob/755fc47e1f8d1c3d91455f123338f44a353fc265/src/Env.hs
[02:39:13] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:ac63:f3f7:89ad:2997) (Quit: Leaving)
[02:39:28] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[02:40:50] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[02:40:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[02:43:16] *** Joins: emf (~emf@2620:10d:c090:400::5:7499)
[02:43:34] *** Lord_of_Life_ is now known as Lord_of_Life
[02:45:26] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[02:45:51] <EvanR> go env (UBar' i) = UBar (idx2int i) (prj env i), the 2nd arg to UBar was supposed to be a string which is optional remnant hint of what the name of the var was
[02:46:14] <EvanR> prj is getting the value from an environment
[02:46:28] <EvanR> oh type String... ok
[02:47:00] <EvanR> and comes from the lambda... cool
[02:47:01] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Ping timeout: 240 seconds)
[02:48:00] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[02:48:19] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[02:48:46] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:49:18] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[02:51:43] <EvanR> in subst1 :: (Idx d -> Either String (Idx d')) -> ULC' d -> ULC' d', d and d' represent max depth of the bindings, so if the callback returns d' < d, the expression shrank?
[02:52:01] <EvanR> or we just became more ignorant of the true depth
[02:52:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[02:52:30] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[02:52:51] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:55:20] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:57:14] <carbolymer> is there any trick to lift lenses? i.e. I'm quite often using:
[02:57:14] <carbolymer> memory' <- use memory
[02:57:14] <carbolymer> memory' ^. at varName
[02:57:19] <carbolymer> can I join those together?
[02:57:22] *** Joins: notzmv (~zmv@user/notzmv)
[02:57:23] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[02:57:40] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[02:58:54] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[03:01:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:02:11] *** Joins: AlexNoo_ (~AlexNoo@178.34.151.37)
[03:03:50] *** Quits: AlexZenon (~alzenon@94.233.241.141) (Ping timeout: 256 seconds)
[03:04:53] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[03:05:24] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[03:05:37] *** Quits: Alex_test (~al_test@94.233.241.141) (Ping timeout: 240 seconds)
[03:06:06] *** Quits: AlexNoo (~AlexNoo@94.233.241.141) (Ping timeout: 256 seconds)
[03:07:40] *** Joins: AlexZenon (~alzenon@178.34.151.37)
[03:09:46] *** Joins: Alex_test (~al_test@178.34.151.37)
[03:09:51] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[03:14:23] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[03:14:36] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:15:06] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:15:12] *** Joins: cjb` (~cjb@user/cjb)
[03:15:28] *** Quits: cjb (~cjb@user/cjb) (Ping timeout: 260 seconds)
[03:16:06] *** cjb` is now known as cjb
[03:16:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[03:16:37] <Axman6> what are the types?
[03:16:42] <Axman6> is memory a lens?
[03:16:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:17:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:20:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Client Quit)
[03:21:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[03:21:23] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:21:25] <Axman6> looks so, so I guess that at varName will return an action - so looks like join $ use (memory . at varName)
[03:21:37] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[03:21:57] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[03:22:19] <Axman6> defininf something like run = join  . use might be useful
[03:22:21] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[03:22:29] *** Quits: mmhat (~mmh@55d4f68d.access.ecotel.net) (Quit: WeeChat 3.4)
[03:25:22] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[03:25:37] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[03:25:54] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[03:26:13] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:30:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[03:30:27] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[03:31:35] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[03:32:05] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[03:38:28] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 268 seconds)
[03:39:52] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:40:27] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:42:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:42:30] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[03:44:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:44:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:44:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:49:55] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:50:31] *** Joins: deadmarshal (~deadmarsh@95.38.231.118)
[03:54:03] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 256 seconds)
[03:54:30] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[03:55:11] *** Quits: deadmarshal (~deadmarsh@95.38.231.118) (Ping timeout: 256 seconds)
[03:58:37] *** Joins: alx741 (~alx741@157.100.197.240)
[03:58:45] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[03:59:35] <carbolymer> hmm
[03:59:42] <carbolymer> Axman6: memory' is a Map
[03:59:57] <carbolymer> Axman6: varName is a key in this map
[04:00:31] <geekosaur> at varName <$> use memory -- ?
[04:00:51] <Axman6> the way you'e written it, it looks like you're executing the value returned from the map
[04:01:13] <jackdk> `use memory >>= at varName`?
[04:01:15] <Axman6> sounds like you just want uses (memory . at varName)
[04:01:46] <Axman6> but the most concise answer will depend on what you're doing with the result
[04:01:52] <glguy> s/uses/use/
[04:02:04] <Axman6> sorry, yes
[04:02:16] <glguy> clarifying because there's also a "uses"
[04:03:47] <Axman6> jackdk, geekosaur: at is also an optic
[04:04:20] <carbolymer> Axman6: yes, `use (memory' . at varName)` is what I was looking for, thanks
[04:04:32] * carbolymer needs to stare into lenses longer
[04:05:14] *** Quits: lep (~lep@94.31.89.203) (Read error: Connection reset by peer)
[04:05:46] <Axman6> if l1 takes an a and focuses  on a b, and l2 takes a b and focuses on a c then l1 . l2 takes an a and focuses on a c
[04:06:52] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[04:07:02] *** Joins: lep (~lep@94.31.89.203)
[04:07:35] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: leaving)
[04:07:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:10:38] *** Quits: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) (Quit: Reconnecting)
[04:10:51] *** Joins: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d)
[04:16:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:16:56] *** Quits: forell (~forell@user/forell) (Ping timeout: 256 seconds)
[04:18:08] *** Joins: hueso (~root@user/hueso)
[04:21:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[04:23:08] *** Parts: noiobeforebed (~noiobefor@2001:470:69fc:105::1:3c2d) ()
[04:28:16] <oscurochu> whats wrong here? https://dpaste.com/7Z2N27RT3
[04:29:37] <Axman6> which version of GHC are you using?
[04:29:54] <oscurochu> The Glorious Glasgow Haskell Compilation System, version 8.10.7
[04:30:37] *** Quits: emf (~emf@2620:10d:c090:400::5:7499) (Ping timeout: 240 seconds)
[04:31:40] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:32:50] <geekosaur> base-4.11.1.0 is ghc 8.4.4
[04:33:47] <geekosaur> it would be nice if cabal were smart enough to tell you this; but I had to go dig through https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history to determine it
[04:34:06] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:34:22] <oscurochu> so what should i do? i just installed haskell last night
[04:34:39] <glguy> geekosaur: in the future "ghcup tui" is a really easy to find base versions
[04:34:59] <glguy> easy way to*
[04:35:06] *** Joins: califax (~califax@user/califx)
[04:36:02] <monochrom> No no no. I would blame it on lambdacube-gl wanting an old version of vector-algorithms. That started the snowball of wanting everything else old.
[04:36:02] <oscurochu> so i should downgrade to 8.4.4?
[04:36:07] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[04:36:22] <geekosaur> oscurochu, if you used ghcup as we recommend then you can use that to install 8.4.4 and set it active for this package.
[04:36:43] <geekosaur> that said, I looked it up and it's a library. you don't install libraries directly any more, you let cabal manage them for you
[04:37:03] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[04:37:21] <oscurochu> im new to haskell and i wanted to learn 3D. idc how ambitious that sounds. i need a challenge. lol
[04:37:43] <oscurochu> so how do i install 8.4.4 and set it active for that package?
[04:37:45] <geekosaur> this thing wants old everything
[04:38:05] <geekosaur> and hasn't been updated since 2017. it's probably not the way you want to go
[04:38:24] <glguy> Using an unmaintained library to learn Haskell and 3D rendering at the same time certainly sounds like a path to a challenge
[04:39:01] <oscurochu> well yeah i dont want that kind of challenge, but challenge within reason
[04:39:25] <monochrom> I might try "--allow-newer". If it works it works. If it fails it fails.
[04:39:55] <wavemode> lovely tautology
[04:40:31] <Axman6> I'm unsure whether to recommend Ed's gl library... it implements _all_ of OpenGL, but whether that's a good place to start when learning 3D graphics I have no idea
[04:40:55] <oscurochu> yeah i dont think this is happening https://dpaste.com/938SLX7FS
[04:41:35] <jackdk> Axman6: it is an up-to-date set of generated bindings, so it shouldn't be too bad to work to an existing tutorial
[04:41:39] <Axman6> al mentioned elsewhere, running cabal install lambdacube-gl is probably something you don't want to do
[04:41:45] <Axman6> as*
[04:42:02] <oscurochu> is haskell for 3d a bad choice?
[04:42:04] <Axman6> you can make a new cabal projest and add it as a dependency and see if that helps
[04:42:48] <monochrom> That said, using an old GHC is not bad at the beginning.
[04:43:01] <oscurochu> im just following what is written here. http://lambdacube3d.com/getting-started
[04:43:18] <oscurochu> and it has examples i can run
[04:43:39] <Axman6> I think had is probably a more accurate way to say that, the project is quite old and bitrotted
[04:43:49] <geekosaur> niot updated since 2017, still using cabal v1, probably not a good way to go
[04:45:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:45:36] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[04:46:03] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Remote host closed the connection)
[04:46:14] *** Joins: forell (~forell@user/forell)
[04:46:16] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[04:46:21] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:46:44] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[04:47:02] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Read error: Connection reset by peer)
[04:47:03] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[04:47:10] *** Joins: shapr` (~user@pool-173-73-44-80.washdc.fios.verizon.net)
[04:47:21] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[04:47:26] *** Quits: deni (~deni@user/deni) (Quit: bye...)
[04:47:46] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (Quit: Gone.)
[04:48:03] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[04:48:30] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[04:48:37] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 240 seconds)
[04:48:53] *** Joins: zebrag (~chris@user/zebrag)
[04:49:07] *** Quits: mncheckm (~mncheck@193.224.205.254) (Remote host closed the connection)
[04:49:18] *** Joins: mncheckm (~mncheck@193.224.205.254)
[04:49:37] *** Joins: micro (~micro@user/micro)
[04:49:50] <oscurochu> I'm not sure that lib is going to help me with my goals anyways. I want to try making my own 3d rasturizer. where should i begin?
[04:50:00] *** Quits: jjhoo (~jahakala@user/jjhoo) (Ping timeout: 268 seconds)
[04:50:40] *** Joins: jjhoo (~jahakala@user/jjhoo)
[04:51:07] *** Joins: ncopa1 (~ncopa@gbr2-dev1.alpinelinux.org)
[04:52:04] *** Quits: ncopa (~ncopa@alpine/developer/ncopa) (Ping timeout: 256 seconds)
[04:52:04] *** ncopa1 is now known as ncopa
[04:53:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:53:37] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:53:37] *** Joins: wroathe (~wroathe@user/wroathe)
[04:54:54] *** Quits: shapr` (~user@pool-173-73-44-80.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[04:56:21] <perro_> a raytracer?
[04:56:26] <perro_> depends on what you want to do
[04:56:49] <perro_> you want to do realtime 3d graphics, don't use haskell to elarn
[04:57:04] <perro_> you want to learn basic rendering like raycasting, you can do that in any language becuase it's jsut writing to a bitmap
[04:58:22] <perro_> https://raytracing.github.io/books/RayTracingInOneWeekend.html
[04:58:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[04:58:45] <Axman6> I don't see why HAskell wouldn't be ok for real time 3d graphics, it's definitely been done before
[04:58:59] <perro_> it's beend one but the person learning doesn't need that overhead
[04:59:53] <perro_> even just js and webgl is a much quicker way to learn that
[05:00:12] <perro_> it's then much easier to move to haskell with those concepts...just my take
[05:00:13] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[05:00:15] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[05:03:31] *** Joins: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu)
[05:04:10] <wavemode> Maybe if you followed a C opengl tutorial but used the gl/glfw packages in haskell? the functions would have the same names
[05:04:16] <wavemode> would be challenging though
[05:07:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[05:08:51] <perro_> that's prob the easieast way to jump between languages since everything has to map down to that
[05:10:02] <oscurochu> perro_ which way?
[05:10:17] <Axman6> I made the mistake of looking at the course for gl in my browser... it is chonky
[05:10:22] <perro_> by grokking and  using the opengl api
[05:10:24] <Axman6> my browser is not happy
[05:11:31] <perro_> webgl maps very closely to it, also
[05:12:28] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:13:26] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[05:14:47] *** Joins: vysn (~vysn@user/vysn)
[05:15:04] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[05:21:45] *** Quits: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu) (Quit: Client closed)
[05:23:13] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-250.ewe-ip-backbone.de)
[05:24:09] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[05:26:23] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[05:26:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:29:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[05:30:13] *** Joins: burnsidesLlama (~burnsides@client-8-90.eduroam.oxuni.org.uk)
[05:34:34] *** Quits: burnsidesLlama (~burnsides@client-8-90.eduroam.oxuni.org.uk) (Ping timeout: 256 seconds)
[05:37:07] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[05:40:03] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:40:24] <oscurochu> i've cloned the raytracing repo, and i cant figure out how to compile it. this stuff makes me feel so dumb lol
[05:42:38] *** Quits: V (~v@anomalous.eu) (Remote host closed the connection)
[05:43:23] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[05:43:23] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[05:43:26] *** allbery_b is now known as geekosaur
[05:44:36] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[05:47:07] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[05:47:58] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[05:49:18] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[05:53:36] *** Joins: califax- (~califax@user/califx)
[05:53:39] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[05:56:18] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:56:18] *** califax- is now known as califax
[05:58:11] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[05:58:55] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[05:58:55] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[05:59:29] *** Joins: Sgeo__ (~Sgeo@user/sgeo)
[05:59:56] <oscurochu> i've finally figured it out. i had to make a build directory... lol
[06:00:21] *** Quits: xff0x (~xff0x@2001:1a81:5330:2600:3a82:23bb:1178:cc83) (Ping timeout: 245 seconds)
[06:02:26] *** Joins: xff0x (~xff0x@2001:1a81:536e:b500:97e8:b6a:74e2:dc96)
[06:02:54] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[06:12:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:15:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:15:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:15:59] *** Joins: wroathe (~wroathe@user/wroathe)
[06:17:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:19:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[06:20:42] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[06:22:07] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[06:27:22] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[06:28:04] *** Joins: acidsys (~LSD@2.lsd.systems)
[06:30:03] *** Joins: V (~v@anomalous.eu)
[06:33:13] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:35:29] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:38:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[06:39:10] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:40:16] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:40:16] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:40:16] *** finn_elija is now known as FinnElija
[06:44:55] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[06:49:41] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:50:14] *** Joins: cynomys (~cynomys@user/cynomys)
[06:52:48] *** Joins: fef (~thedawn@user/thedawn)
[06:53:52] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:54:11] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:55:22] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[06:57:57] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (Quit: quit)
[06:57:57] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Quit: The Lounge - https://thelounge.chat)
[06:58:40] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[06:59:00] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[06:59:03] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[07:00:02] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: leaving)
[07:00:07] *** Joins: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[07:01:38] *** Joins: raym (~raym@user/raym)
[07:04:40] *** Quits: yauhsien (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:07:31] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[07:12:08] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:23] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:26] *** Quits: td_ (~td@muedsl-82-207-238-222.citykom.de) (Ping timeout: 256 seconds)
[07:17:02] *** Joins: td_ (~td@94.134.91.76)
[07:21:28] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[07:27:52] *** Quits: vglfr (~vglfr@46.96.158.194) (Ping timeout: 268 seconds)
[07:34:43] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:35:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[07:38:46] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[07:48:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[07:48:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[07:53:09] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[07:56:01] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-250.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[07:56:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:56:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:56:26] *** Joins: wroathe (~wroathe@user/wroathe)
[08:00:39] *** Joins: fef (~thedawn@user/thedawn)
[08:00:44] *** Joins: mbuf (~Shakthi@171.61.172.103)
[08:01:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:02:04] *** Joins: dut (~dut@user/dut)
[08:08:35] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:18:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:18:26] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[08:20:32] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[08:20:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:22:45] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[08:23:51] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[08:29:59] *** [_] is now known as [itchyjunk]
[08:30:46] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 268 seconds)
[08:38:28] *** Quits: jao (~jao@static-68-235-44-23.cust.tzulo.com) (Remote host closed the connection)
[08:38:32] *** Quits: phma (phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f) (Read error: Connection reset by peer)
[08:38:52] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:39:55] *** Joins: phma (phma@2001:5b0:211c:a988:8f1d:f7a6:3d8d:dc0c)
[08:44:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[08:45:00] *** Quits: hyiltiz_ (~quassel@31.220.5.250) (Quit: hyiltiz_)
[08:45:16] *** Joins: hyiltiz (~quassel@31.220.5.250)
[08:45:37] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[08:46:17] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[08:46:27] *** RMSBach is now known as RSBach
[08:46:44] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[08:50:13] *** Joins: ardell (~ardell@user/ardell)
[08:50:25] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:50:59] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[08:53:07] *** Joins: hyiltiz (~quassel@31.220.5.250)
[08:57:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[09:01:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.118)
[09:02:18] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[09:03:51] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:10:21] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:15:10] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:29:35] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:30:18] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[09:30:33] *** Joins: y04nn (~y04nn@92.223.89.196)
[09:33:57] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[09:35:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[09:35:28] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[09:35:45] *** Joins: cheater (~Username@user/cheater)
[09:37:40] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:41:34] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 260 seconds)
[09:43:02] *** Joins: arjun (~arjun@user/arjun)
[09:44:45] *** Joins: myme (~myme@2a01:799:d5a:cd00:fb5a:85b7:3647:e056)
[09:49:42] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[09:55:52] *** Quits: Ekho (~Ekho@user/ekho) (Quit: CORE ERROR, SYSTEM HALTED.)
[09:56:09] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 256 seconds)
[09:56:42] *** Joins: kadobanana (~mud@user/kadoban)
[09:56:43] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 256 seconds)
[09:57:27] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[09:58:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[09:59:23] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[09:59:36] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:1164:2854:8a6e:b4e3)
[10:01:45] *** Quits: modnar (~modnar@shell.sonic.net) (Quit: farewell)
[10:04:00] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[10:04:09] *** Joins: Ekho (~Ekho@user/ekho)
[10:07:35] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:11:17] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[10:34:09] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Changing host)
[10:34:09] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[10:35:07] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:36:40] *** Quits: califax (~califax@user/califx) (Quit: ZNC 1.8.2 - https://znc.in)
[10:36:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:36:53] *** Joins: califax (~califax@user/califx)
[10:41:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[10:41:42] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[10:41:45] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:47:25] *** Joins: thevishy (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64)
[10:50:30] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[10:50:34] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[10:50:56] *** Joins: kaph (~kaph@an-19-174-100.service.infuturo.it)
[10:52:21] <energizer> i'm doing some code gen. what's a good type for representing these type declaration things from C-like languages? `int y[N];`
[10:52:50] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 250 seconds)
[10:53:35] *** Joins: coot (~coot@213.134.190.95)
[10:53:49] *** Joins: michalz (~michalz@185.246.204.75)
[10:54:40] *** Quits: y04nn (~y04nn@92.223.89.196) (Read error: Connection reset by peer)
[10:55:28] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:00:57] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[11:02:55] *** Joins: notzmv (~zmv@user/notzmv)
[11:03:13] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:03:52] <dsal> It depends on what all you're trying to encode.  That's a fixed size array of int, so you'd need to encode that it's an array, of what, and how big.
[11:04:11] *** Joins: quintasan (~quassel@quintasan.pl)
[11:06:23] *** Joins: fendor (~fendor@77.119.206.49.wireless.dyn.drei.com)
[11:06:31] <dsal> You have to kind of look at all of them, though. The answer changes if you just have that, or also scalars or different types of arrays, or more dimensions, etc...
[11:06:47] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[11:09:44] <energizer> let's say i want to support all of those things
[11:09:58] <energizer> no pointers tho
[11:11:00] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[11:11:10] *** Joins: kaph_ (~kaph@151.57.50.182)
[11:11:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:11:21] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[11:11:33] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[11:11:55] *** Quits: kaph (~kaph@an-19-174-100.service.infuturo.it) (Read error: Connection reset by peer)
[11:12:51] <dsal> Well, a sum type with different constructors would be straightforward.  I suppose an array might be a recursion.  I'm afk, though, so I don't know for sure.  I'd just start typing up what I see and then look for patterns to remove things.
[11:16:28] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5ffd:7ea2:ced5:7680)
[11:20:18] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:21:22] *** Quits: arjun (~arjun@user/arjun) (Ping timeout: 256 seconds)
[11:22:00] *** Joins: briandaed (~jaroslawj@185.234.208.208.r.toneticgroup.pl)
[11:23:57] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Ping timeout: 240 seconds)
[11:25:13] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[11:25:30] *** Joins: cfricke (~cfricke@user/cfricke)
[11:28:20] *** Quits: kaph_ (~kaph@151.57.50.182) (Remote host closed the connection)
[11:34:26] *** Joins: kaph (~kaph@151.57.50.182)
[11:34:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:35:00] *** Quits: kaph (~kaph@151.57.50.182) (Remote host closed the connection)
[11:36:35] *** Joins: neurocyte0917090 (~neurocyte@IP-094046082248.dynamic.medianet-world.de)
[11:36:35] *** Quits: neurocyte0917090 (~neurocyte@IP-094046082248.dynamic.medianet-world.de) (Changing host)
[11:36:35] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[11:37:19] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:37:31] *** Joins: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[11:39:54] *** Joins: kaph (~kaph@151.57.50.182)
[11:40:06] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[11:41:19] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 268 seconds)
[11:41:40] *** Joins: alp (~alp@user/alp)
[11:41:46] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 256 seconds)
[11:41:47] *** Quits: Sgeo__ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:55:54] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[11:57:25] *** Quits: kaph (~kaph@151.57.50.182) (Ping timeout: 256 seconds)
[11:58:05] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[11:58:47] *** Joins: chele (~chele@user/chele)
[12:01:11] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Remote host closed the connection)
[12:01:23] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[12:06:15] <tomsmeding> EvanR: indeed if d' < d, then the number of externally bound variables decreased, probably because some variables were inlined
[12:06:59] <tomsmeding> or perhaps two variables x and y were now expressed as 'fst z' and 'snd z', for z a new bound variable -- I know the language doesn't have fst and snd, but then Church-encoded variants of them :D
[12:08:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[12:09:18] *** Joins: whatif (~user@123.180.40.237)
[12:10:07] <whatif> runghc test.hs, it tells me that utf8-string is hidden package, I run `ghc-pkg export utf8-string', still the same, why?
[12:10:28] <whatif> those expose/hidden package is really anonying
[12:10:51] <whatif> no cabal in current path, just a test file
[12:19:31] *** Joins: quintasan (~quassel@quintasan.pl)
[12:20:04] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:20:20] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:22:03] <kuribas> going to be downvoted to hell for this, but just having fun: https://www.reddit.com/r/programming/comments/sh9uif/software_development_languages_haskell/
[12:27:09] <lortabac> kuribas: :)
[12:29:04] *** Joins: mikoto-chan (~mikoto-ch@84.199.144.235)
[12:30:06] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (Quit: You have been kicked for being idle)
[12:32:29] <whatif> https://hackage.haskell.org/package/scotty-0.9.0/docs/Web-Scotty-Trans.html#v:scottyT
[12:32:57] <yushyin> kuribas: sure i can give you my downvote ;)
[12:33:01] <whatif> what is this (m Response -> IO Response)
[12:33:16] <kuribas> yushyin: do what you want :)
[12:33:37] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Ping timeout: 240 seconds)
[12:33:53] <whatif> or how to construct (m Response -> IO Response)?
[12:34:16] <yushyin> tl;dr but if you want some by all means
[12:34:37] <whatif> @hoogle Response
[12:34:37] <lambdabot> Network.HTTP.Client data Response body
[12:34:37] <lambdabot> Network.HTTP.Client.Internal data Response body
[12:34:37] <lambdabot> Network.HTTP.Client.Internal Response :: Status -> HttpVersion -> ResponseHeaders -> body -> CookieJar -> ResponseClose -> Response body
[12:35:33] <kuribas> whatif: by "running" your monad.
[12:35:58] <whatif> kuribas: what does that mean?...
[12:36:10] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[12:36:23] *** Joins: vysn (~vysn@user/vysn)
[12:36:27] <kuribas> whatif: If you have a ReaderT, you can use runReaderT...
[12:36:31] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[12:36:44] <whatif> kuribas: StateT
[12:36:52] <whatif> evalStateT
[12:37:26] <kuribas> whatif: yes.  But that could give problems with concurrency.
[12:37:41] <whatif> scottyT 3000 $ flip evalStateT "msg" $ get "/" $ test "hello"
[12:37:42] <kuribas> whatif: put an IORef in a ReaderT
[12:38:13] <kuribas> ReaderT MyState (IO a)
[12:38:25] <whatif> Couldn't match expected type `StateT [Char] ((->) (m Response)) (IO Response)' with actual type `ScottyT e1 m1 ()'
[12:38:59] <kuribas> type MyState = IORef AppState
[12:39:54] <kuribas> whatif: does your state need to persist?
[12:40:05] <whatif> kuribas: put and get with StateT could not do the same like IORef?
[12:40:35] <kuribas> I don't think the pure state will persist between requests.
[12:40:36] <whatif> kuribas: yes
[12:41:23] <kuribas> So you'll need a IORef, or MVar, TVar, ...
[12:41:29] <whatif> kuribas: because requests are?
[12:41:36] <kuribas> requests are in IO.
[12:42:12] <whatif> kuribas: StateT could work on IO?
[12:42:17] <whatif> couldn't?
[12:43:08] <kuribas> no, StateT encapsulates IO.
[12:43:12] <kuribas> Not the other way around.
[12:44:14] <kuribas> and a Wai Application is basically "Request -> IO Response"
[12:44:49] <kuribas> whatif: you could keep your StateT and wrap it in a ReaderT with IORef.
[12:45:06] <kuribas> whatif: but that's probably not easier that simply using an IORef.
[12:46:25] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:48:58] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:48:58] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:49:01] *** allbery_b is now known as geekosaur
[12:49:02] <kuribas> whatif: note that a toplevel "ReaderT IO a" is a common pattern for a toplevel application monad.
[12:49:19] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:50:06] *** Joins: akegalj (~akegalj@185.230.83.17)
[12:50:08] <whatif> kuribas: what I'm confused is why not use StateT s IO a
[12:50:32] <kuribas> because the "s" doesn't persist.
[12:50:37] <kuribas> between requests.
[12:51:06] <whatif> kuribas: why "s" dones't persist between requests?
[12:51:14] <kuribas> In other words, the s is "readonly", so you can use ReaderT isntead.
[12:51:14] <whatif> just because of IO?
[12:51:17] <kuribas> yes.
[12:51:44] <kuribas> whatif: look at the Application type above, and tell me how you could persist state.
[12:51:50] <ephemient> you provide s to every evalStateT
[12:52:10] <kuribas> ephemient: yes, so you get a ReaderT disguised as a StateT.
[12:52:39] <ephemient> in theory you could runStateT, pull it out, stuff it in an IORef, read it back the next request and put it into state again, but…
[12:52:47] <ephemient> why would you do that instead of just using IORef?
[12:53:11] <whatif> just using IORef would be easier than StateT or ReaderT?
[12:53:34] <whatif> could we have global variable in Haskell?
[12:53:46] <whatif> that would be so easy with global variable to do this
[12:53:47] <kuribas> whatif: not without unsafePerformIO.
[12:54:06] <whatif> kuribas: but IORef is safe?
[12:54:24] <kuribas> Putting an IORef in a ReaderT isn't hard.
[12:54:26] <ephemient> in the ReaderT IO pattern, you'd put references to your "global" variables in the "reader" environment
[12:54:41] <kuribas> You can write a helper to extract or update this state from your app monad.
[12:55:04] *** Quits: Major_Biscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[12:55:11] <kuribas> whatif: also, "ReaderT AppState IO a " is the idiomatic way to do this.
[12:55:19] <whatif> ephemient: what if I have two threads want to share the same variable?
[12:55:19] <ephemient> they're not *global* global, just hoisted outside to outside of the app loop
[12:55:28] <ephemient> they are shared this way
[12:57:16] <kuribas> whatif: this is also better than global state, because you could for example run two servers with different state.
[12:57:31] *** Joins: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl)
[12:58:11] <whatif> kuribas: that better question is how to save inner value within a function out of it?
[12:58:45] <kuribas> whatif: modifyIORef
[13:00:50] *** Joins: sterni (~lukas@user/sterni)
[13:04:49] <whatif> g x = do {o <- get; let {n=o+1}; put n; return (n+x);}
[13:04:59] <whatif> runState (traverse g [1,1,1]) 0 == ([2,3,4],3)
[13:05:06] <whatif> this s persist?
[13:06:27] <kuribas> no?
[13:07:55] <kuribas> whatif: the question doesn't make sense without context.
[13:13:16] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (Ping timeout: 245 seconds)
[13:13:43] *** Joins: arjun (~arjun@103.57.87.139)
[13:14:19] <ephemient> if you have main = do varRef <- newIORef ...; let env = Env { varRef = varRef }; loop $ evalStateT foo env or whatever. then foo gets the same varRef across all invocations of foo from the same main. foo can gets varRef >>= liftM modifyIORef' (+ 1) or whatever it wants with that
[13:22:31] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[13:26:56] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[13:27:34] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[13:29:00] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[13:31:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[13:32:45] *** Joins: Pickchea (~private@user/pickchea)
[13:33:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[13:37:56] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[13:39:47] *** Joins: yhsiveht (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64)
[13:40:35] *** Joins: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:693a:de00:38ae:dac2)
[13:40:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:40:37] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[13:40:37] *** Quits: Adran (adran@botters/adran) (Ping timeout: 240 seconds)
[13:40:53] *** Joins: aplainze1akind (~johndoe@captainludd.powered.by.lunarbnc.net)
[13:40:57] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[13:40:57] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: joeyh (joeyh@kitenet.net) (Ping timeout: 240 seconds)
[13:40:57] *** Quits: tito (tito@tilde.team) (Ping timeout: 240 seconds)
[13:41:04] *** Joins: Jing_ (~hedgehog@125.105.15.211)
[13:41:06] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[13:41:08] *** Joins: lightandlight_ (sid135476@id-135476.helmsley.irccloud.com)
[13:41:08] *** Joins: asivitz_ (uid178348@id-178348.tinside.irccloud.com)
[13:41:10] *** Joins: tritlo_ (sid58727@user/tritlo)
[13:41:17] *** Joins: bbhoss_ (sid18216@id-18216.tinside.irccloud.com)
[13:41:17] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: img (~img@user/img) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: asivitz (uid178348@id-178348.tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (Ping timeout: 240 seconds)
[13:41:17] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (Ping timeout: 240 seconds)
[13:41:17] *** lightandlight_ is now known as lightandlight
[13:41:17] *** asivitz_ is now known as asivitz
[13:41:17] *** bbhoss_ is now known as bbhoss
[13:41:20] *** Joins: joeyh (~joeyh@kitenet.net)
[13:41:29] *** Joins: newhoggy_ (sid198874@id-198874.helmsley.irccloud.com)
[13:41:30] *** Joins: aristid_ (sid1599@uxbridge.irccloud.com)
[13:41:32] *** Joins: caasih_ (sid13241@id-13241.ilkley.irccloud.com)
[13:41:37] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-9258-c9a6-2983-1208.res6.spectrum.com) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: Ram-Z (Ram-Z@2a01:7e01::f03c:91ff:fe57:d2df) (Ping timeout: 240 seconds)
[13:41:37] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[13:41:37] *** caasih_ is now known as caasih
[13:41:38] *** Joins: feliix42_ (~felix@gibbs.uberspace.de)
[13:41:43] *** Joins: conjunctive_ (sid433686@id-433686.helmsley.irccloud.com)
[13:41:48] *** Joins: Ram-Z_ (~Ram-Z@li1814-254.members.linode.com)
[13:41:48] *** Joins: ehamberg_ (sid18208@id-18208.hampstead.irccloud.com)
[13:41:49] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[13:41:49] *** Joins: obviyus_ (sid415299@user/obviyus)
[13:41:52] *** Joins: truckasaurus_ (sid457088@id-457088.helmsley.irccloud.com)
[13:41:55] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-8c82-3804-1c4b-e932.res6.spectrum.com)
[13:41:57] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:1164:2854:8a6e:b4e3) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Ping timeout: 240 seconds)
[13:41:57] *** Quits: noddy (~user@user/noddy) (Ping timeout: 240 seconds)
[13:41:57] *** aristid_ is now known as aristid
[13:42:00] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[13:42:17] *** Quits: thevishy (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: Hafydd (~Hafydd@user/hafydd) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: hays (rootvegeta@fsf/member/hays) (Ping timeout: 240 seconds)
[13:42:17] *** Quits: landonf (landonf@mac68k.info) (Ping timeout: 240 seconds)
[13:42:18] *** obviyus_ is now known as obviyus
[13:42:18] *** conjunctive_ is now known as conjunctive
[13:42:18] *** tritlo_ is now known as tritlo
[13:42:37] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: newhoggy (sid198874@id-198874.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (Ping timeout: 240 seconds)
[13:42:37] *** Quits: remexre (~remexre@user/remexre) (Ping timeout: 240 seconds)
[13:42:37] *** newhoggy_ is now known as newhoggy
[13:42:37] *** ehamberg_ is now known as ehamberg
[13:42:37] *** truckasaurus_ is now known as truckasaurus
[13:42:47] *** Joins: dut_ (~dut@user/dut)
[13:43:00] *** Joins: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[13:43:00] *** Joins: hays (rootvegeta@fsf/member/hays)
[13:43:16] *** Joins: remexre (~remexre@user/remexre)
[13:43:59] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[13:44:07] *** Joins: Jing (~hedgehog@125.105.15.211)
[13:44:08] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[13:44:14] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[13:44:15] *** Joins: noddy (~user@user/noddy)
[13:44:21] *** Joins: Adran (adran@botters/adran)
[13:44:31] *** Quits: Alex_test (~al_test@178.34.151.37) (Ping timeout: 256 seconds)
[13:44:31] *** Quits: matijja (~matijja@193.77.181.201) (Ping timeout: 256 seconds)
[13:44:31] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[13:44:41] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[13:44:48] *** Joins: joeyh_ (joeyh@kitenet.net)
[13:45:05] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[13:45:05] *** Quits: michalz (~michalz@185.246.204.75) (Ping timeout: 256 seconds)
[13:45:24] *** Joins: matijja (~matijja@193.77.181.201)
[13:45:39] *** Quits: Jing_ (~hedgehog@125.105.15.211) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Ping timeout: 256 seconds)
[13:45:39] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[13:45:53] *** Joins: img (~img@user/img)
[13:45:58] *** Joins: cheater (~Username@user/cheater)
[13:46:10] *** Joins: quintasan (~quassel@quintasan.pl)
[13:46:13] *** Quits: joeyh (~joeyh@kitenet.net) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: dut (~dut@user/dut) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (Ping timeout: 256 seconds)
[13:46:13] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[13:47:22] *** Joins: jespada (~jespada@87.74.36.188)
[13:47:41] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[13:47:41] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[13:48:42] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:48:59] *** Quits: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:693a:de00:38ae:dac2) (Remote host closed the connection)
[13:49:50] *** Joins: __monty__ (~toonn@user/toonn)
[13:50:09] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[13:50:21] *** Joins: Alex_test (~al_test@178.34.151.37)
[13:51:02] *** Quits: yhsiveht (~Nishant@2405:201:f005:c007:f4c6:4183:fabe:3b64) (Quit: Leaving)
[13:52:58] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[13:56:01] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[13:56:35] *** Joins: Hafydd (~Hafydd@user/hafydd)
[13:56:44] *** Joins: Flow (~none@gentoo/developer/flow)
[13:57:32] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:57:59] *** Joins: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e)
[13:58:34] *** Joins: Pickchea (~private@user/pickchea)
[14:00:06] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:00:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:01:47] *** Joins: ubert1 (~Thunderbi@p200300ecdf09945c0ca179bca462169c.dip0.t-ipconnect.de)
[14:03:04] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[14:03:41] *** Quits: Hafydd (~Hafydd@user/hafydd) (Ping timeout: 250 seconds)
[14:04:00] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[14:04:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[14:06:39] <polezaivsani> Hello!  What'd be a good way to get a copy of haddoc for a package from hackage?  I kind of got it via `cabal install --enable-documentation`, though it ends up in store and i wonder if there is an easier way to do it?
[14:12:21] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is) (Ping timeout: 250 seconds)
[14:12:39] *** Quits: Jing (~hedgehog@125.105.15.211) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:14:03] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:14:25] *** Joins: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[14:15:11] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[14:15:11] *** Quits: megaTherion (~therion@unix.io) (Ping timeout: 250 seconds)
[14:15:11] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (Ping timeout: 250 seconds)
[14:15:11] *** Quits: AndreasK (sid320732@2a03:5180:f:5::4:e4dc) (Ping timeout: 250 seconds)
[14:15:23] *** Joins: kuribas` (~user@ptr-25vy0i9didaz6k0kzeu.18120a2.ip6.access.telenet.be)
[14:15:37] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 250 seconds)
[14:15:37] *** Quits: aria (sid380617@2a03:5180:f:2::5:cec9) (Ping timeout: 250 seconds)
[14:15:37] *** Quits: jonrh (sid5185@2a03:5180:f:3::1441) (Ping timeout: 250 seconds)
[14:15:55] *** Joins: jonrh (sid5185@id-5185.ilkley.irccloud.com)
[14:15:58] *** Joins: taktoa[c]_ (sid282096@id-282096.tinside.irccloud.com)
[14:15:59] *** Joins: AndreasK (sid320732@id-320732.uxbridge.irccloud.com)
[14:16:05] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[14:16:07] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[14:16:11] *** Joins: oats_ (~thomas@user/oats)
[14:16:18] *** Joins: aria (sid380617@lymington.irccloud.com)
[14:16:26] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[14:16:29] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 250 seconds)
[14:16:29] *** Quits: flupe (~baboum@radon.sbi.re) (Ping timeout: 250 seconds)
[14:16:35] *** Joins: megaTherion (~therion@unix.io)
[14:16:44] *** Joins: sajith_ (~sajith@user/sajith)
[14:16:46] *** Joins: fef (~thedawn@user/thedawn)
[14:16:55] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: sajith (~sajith@user/sajith) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: taktoa[c] (sid282096@2a03:5180:f::4:4df0) (Ping timeout: 250 seconds)
[14:16:55] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (Ping timeout: 250 seconds)
[14:16:56] *** taktoa[c]_ is now known as taktoa[c]
[14:17:00] *** Joins: cosimone` (~user@93-47-231-100.ip115.fastwebnet.it)
[14:17:21] *** Quits: kuribas (~user@ptr-25vy0i9mijo6rhu39yx.18120a2.ip6.access.telenet.be) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: tom_ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0) (Ping timeout: 250 seconds)
[14:17:21] *** Quits: oats (~thomas@user/oats) (Ping timeout: 250 seconds)
[14:17:25] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:17:31] *** Joins: Hafydd (~Hafydd@user/hafydd)
[14:17:33] *** Joins: flupe (~baboum@radon.sbi.re)
[14:17:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[14:18:26] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[14:18:51] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[14:19:00] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[14:19:39] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[14:19:39] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (Ping timeout: 256 seconds)
[14:20:04] *** Joins: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp)
[14:21:21] *** Quits: __monty__ (~toonn@user/toonn) (Ping timeout: 256 seconds)
[14:21:34] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:22:37] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:22:49] *** Joins: __monty__ (~toonn@user/toonn)
[14:24:03] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:24:44] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[14:25:16] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[14:25:26] *** Joins: michalz (~michalz@185.246.204.89)
[14:29:22] *** Joins: earthy (~arthurvl@2001:984:275b:1:ba27:ebff:fea0:40b0)
[14:29:44] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[14:30:04] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[14:30:24] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[14:30:34] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[14:31:11] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[14:31:24] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[14:31:40] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[14:32:31] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[14:32:35] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[14:32:40] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[14:34:01] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[14:34:35] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[14:34:36] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 268 seconds)
[14:35:07] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[14:35:37] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[14:36:01] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[14:37:19] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[14:37:26] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:38:21] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[14:38:26] *** Joins: landonf (landonf@mac68k.info)
[14:38:51] *** Joins: nshepperd2 (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[14:39:56] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[14:40:05] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:4458:b22e:b9a7:2cea)
[14:43:12] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[14:48:05] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[14:49:59] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[14:50:28] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[14:54:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Ping timeout: 240 seconds)
[14:57:22] *** Joins: quintasan (~quassel@quintasan.pl)
[14:58:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[14:58:55] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Read error: Connection reset by peer)
[15:01:51] *** Joins: nunggu (~q@user/nunggu)
[15:02:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:03:35] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[15:03:35] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[15:03:35] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Quit: Bridge terminating on SIGTERM)
[15:03:36] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Quit: Bridge terminating on SIGTERM)
[15:03:37] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[15:03:38] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Bridge terminating on SIGTERM)
[15:03:39] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: sm1 (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: alex[m]1234567 (~alexchete@2001:470:69fc:105::1:1001) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: Bridge terminating on SIGTERM)
[15:03:40] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Bridge terminating on SIGTERM)
[15:03:41] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Quit: Bridge terminating on SIGTERM)
[15:05:07] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[15:05:53] *** Quits: dut_ (~dut@user/dut) (Quit: Leaving)
[15:06:41] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Ping timeout: 256 seconds)
[15:08:35] *** Joins: mestre (~mestre@191.177.181.194)
[15:09:05] <mestre>  /clear
[15:09:08] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[15:10:18] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[15:10:41] <mestre> hello, I was wondering if there was an automated way to check unused libraries in the package.yaml.
[15:10:54] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[15:10:54] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[15:10:54] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[15:10:54] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:11:06] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[15:11:10] <mestre> Does anyone knows of something or can point me in the right direction?
[15:11:20] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[15:11:20] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[15:11:32] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[15:11:44] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[15:11:44] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[15:11:58] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[15:11:58] *** Joins: kadoban (~kadoban@user/kadoban)
[15:11:58] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[15:11:58] *** Joins: moats (~oats@user/oats)
[15:11:58] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[15:11:58] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[15:11:58] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[15:12:10] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[15:12:10] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[15:12:22] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[15:12:22] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[15:12:35] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[15:12:49] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[15:12:49] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[15:13:03] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[15:13:16] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[15:13:16] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[15:13:30] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[15:13:42] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[15:13:42] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[15:13:42] *** Joins: sm (~sm@plaintextaccounting/sm)
[15:13:42] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[15:13:55] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[15:13:55] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:13:56] *** Joins: Deide (~deide@user/deide)
[15:14:11] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[15:14:12] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[15:14:12] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[15:14:13] *** Joins: psydroid (~psydroid@user/psydroid)
[15:14:25] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[15:14:26] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[15:14:53] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[15:15:02] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[15:15:03] *** Joins: siraben (~siraben@user/siraben)
[15:15:06] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[15:15:06] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[15:15:30] *** Joins: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001)
[15:15:39] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[15:15:41] *** Joins: Tisoxin (~ikosit@user/ikosit)
[15:15:44] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[15:15:48] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[15:16:09] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[15:16:23] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[15:16:24] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[15:16:31] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[15:16:32] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[15:16:53] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[15:17:38] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[15:17:41] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Remote host closed the connection)
[15:17:42] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Remote host closed the connection)
[15:17:42] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Remote host closed the connection)
[15:17:42] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Remote host closed the connection)
[15:17:42] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Remote host closed the connection)
[15:17:42] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Remote host closed the connection)
[15:17:42] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Remote host closed the connection)
[15:17:42] *** Quits: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001) (Remote host closed the connection)
[15:17:42] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Remote host closed the connection)
[15:17:42] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Read error: Connection reset by peer)
[15:17:42] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Read error: Connection reset by peer)
[15:17:42] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Read error: Connection reset by peer)
[15:17:42] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Read error: Connection reset by peer)
[15:17:42] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Read error: Connection reset by peer)
[15:17:42] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Read error: Connection reset by peer)
[15:17:42] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Write error: Connection reset by peer)
[15:17:42] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Write error: Connection reset by peer)
[15:17:42] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Write error: Connection reset by peer)
[15:17:42] *** Quits: Deide (~deide@user/deide) (Remote host closed the connection)
[15:17:42] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Read error: Connection reset by peer)
[15:17:42] *** Quits: kadoban (~kadoban@user/kadoban) (Read error: Connection reset by peer)
[15:17:42] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Remote host closed the connection)
[15:17:42] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Read error: Connection reset by peer)
[15:17:42] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Remote host closed the connection)
[15:17:42] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Remote host closed the connection)
[15:17:42] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Read error: Connection reset by peer)
[15:17:42] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Read error: Connection reset by peer)
[15:17:42] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Write error: Connection reset by peer)
[15:17:42] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Remote host closed the connection)
[15:17:42] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Remote host closed the connection)
[15:17:42] *** Quits: moats (~oats@user/oats) (Remote host closed the connection)
[15:17:42] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Remote host closed the connection)
[15:17:42] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Write error: Connection reset by peer)
[15:17:42] *** Quits: Tisoxin (~ikosit@user/ikosit) (Read error: Connection reset by peer)
[15:17:42] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Remote host closed the connection)
[15:17:42] *** Quits: siraben (~siraben@user/siraben) (Write error: Connection reset by peer)
[15:17:42] *** Quits: sm (~sm@plaintextaccounting/sm) (Read error: Connection reset by peer)
[15:17:43] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Remote host closed the connection)
[15:17:43] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Remote host closed the connection)
[15:17:43] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Remote host closed the connection)
[15:17:43] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Remote host closed the connection)
[15:17:43] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Remote host closed the connection)
[15:17:43] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Remote host closed the connection)
[15:17:43] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Remote host closed the connection)
[15:17:43] *** Quits: psydroid (~psydroid@user/psydroid) (Remote host closed the connection)
[15:17:43] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Read error: Connection reset by peer)
[15:17:43] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Read error: Connection reset by peer)
[15:17:43] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Read error: Connection reset by peer)
[15:17:43] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Read error: Connection reset by peer)
[15:17:43] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Write error: Broken pipe)
[15:17:43] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Write error: Connection reset by peer)
[15:17:43] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Read error: Connection reset by peer)
[15:17:45] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Remote host closed the connection)
[15:17:45] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Read error: Connection reset by peer)
[15:17:45] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Read error: Connection reset by peer)
[15:17:45] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Read error: Connection reset by peer)
[15:17:45] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Read error: Connection reset by peer)
[15:17:45] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Read error: Connection reset by peer)
[15:17:48] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[15:18:06] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:21:49] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[15:22:11] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[15:22:12] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[15:24:10] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[15:25:21] <fendor> mestre, I think recent ghc version can report unused dependencies
[15:25:56] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:26:16] <mestre> oh really? Gonna look for it, thanks!
[15:27:03] <Unhammer> hm, just realised, I've done 7 years of haskell at work and I have never made a typeclass (for work)
[15:29:56] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[15:30:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[15:31:03] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:31:21] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[15:32:43] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Remote host closed the connection)
[15:33:06] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:35:58] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[15:35:59] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:36:11] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 245 seconds)
[15:37:18] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[15:38:35] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:38:43] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[15:40:27] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:46:42] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[15:46:42] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[15:46:42] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[15:46:42] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[15:46:42] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[15:46:42] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[15:46:42] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[15:46:42] *** Joins: kadoban (~kadoban@user/kadoban)
[15:46:42] *** Joins: moats (~oats@user/oats)
[15:46:42] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[15:46:42] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[15:46:42] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[15:46:42] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[15:46:42] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[15:46:43] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[15:46:44] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[15:46:45] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[15:46:46] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[15:46:46] *** Joins: sm (~sm@plaintextaccounting/sm)
[15:46:46] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[15:46:46] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[15:46:46] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[15:46:46] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[15:46:46] *** Joins: Deide (~deide@user/deide)
[15:46:46] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[15:46:46] *** Joins: psydroid (~psydroid@user/psydroid)
[15:46:46] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[15:46:46] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[15:46:46] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[15:46:46] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[15:46:46] *** Joins: siraben (~siraben@user/siraben)
[15:46:46] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[15:46:46] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[15:46:46] *** Joins: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001)
[15:46:46] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[15:46:46] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[15:46:46] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[15:46:46] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[15:46:46] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[15:46:46] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[15:46:46] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[15:46:46] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[15:46:46] *** Joins: Tisoxin (~ikosit@user/ikosit)
[15:46:46] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[15:46:47] *** Joins: jinsun_ (~jinsun@user/jinsun)
[15:46:47] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[15:46:47] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[15:46:47] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[15:46:47] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[15:46:47] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[15:46:47] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[15:46:47] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[15:46:47] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[15:46:47] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[15:46:47] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[15:46:47] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[15:46:47] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[15:46:47] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[15:46:47] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[15:46:47] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[15:46:47] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[15:46:48] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[15:46:48] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[15:46:54] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[15:46:54] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[15:46:54] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[15:46:55] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[15:46:56] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[15:46:56] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[15:46:56] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[15:46:58] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[15:46:59] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[15:46:59] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[15:46:59] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[15:46:59] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[15:46:59] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[15:46:59] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[15:46:59] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[15:46:59] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[15:46:59] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[15:46:59] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[15:46:59] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[15:46:59] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[15:46:59] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[15:46:59] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[15:47:00] *** Joins: james[m]12 (~jamesnina@2001:470:69fc:105::1:4203)
[15:47:00] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[15:47:00] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[15:47:00] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[15:47:00] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[15:47:00] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[15:47:00] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[15:47:00] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[15:47:01] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[15:47:01] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[15:47:01] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[15:47:01] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[15:47:01] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[15:47:02] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[15:48:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:50:37] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:51:52] <geekosaur> actually making your own typeclass is fairly unusual, yes
[15:54:29] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 252 seconds)
[15:54:30] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[15:54:46] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[15:55:03] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[15:57:39] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[15:59:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:00:39] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: You% have% been% kicked% for% being% idle)
[16:00:39] *** Quits: Vajb (~Vajb@2001:999:274:c862:3b86:e1e1:5bff:355e) (Read error: Connection reset by peer)
[16:00:57] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:02:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:02:26] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:02:46] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[16:02:51] *** Quits: siraben (~siraben@user/siraben) (Quit: Client limit exceeded: 20000)
[16:03:15] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Quit: Client limit exceeded: 20000)
[16:03:15] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[16:03:18] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Quit: Client limit exceeded: 20000)
[16:03:19] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Client limit exceeded: 20000)
[16:03:19] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[16:03:34] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Client limit exceeded: 20000)
[16:03:35] *** Quits: moats (~oats@user/oats) (Quit: Client limit exceeded: 20000)
[16:03:36] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Client limit exceeded: 20000)
[16:03:41] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Client limit exceeded: 20000)
[16:03:43] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Client limit exceeded: 20000)
[16:03:43] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Client limit exceeded: 20000)
[16:03:44] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Client limit exceeded: 20000)
[16:03:45] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[16:04:14] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Client limit exceeded: 20000)
[16:04:16] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Client limit exceeded: 20000)
[16:04:20] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Client limit exceeded: 20000)
[16:04:21] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[16:04:21] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Client limit exceeded: 20000)
[16:04:25] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Client limit exceeded: 20000)
[16:04:56] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Client limit exceeded: 20000)
[16:05:24] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Client limit exceeded: 20000)
[16:05:35] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Client limit exceeded: 20000)
[16:05:35] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Client limit exceeded: 20000)
[16:05:48] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Client limit exceeded: 20000)
[16:06:03] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[16:06:17] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Client limit exceeded: 20000)
[16:06:23] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Client limit exceeded: 20000)
[16:06:30] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Client limit exceeded: 20000)
[16:06:31] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Client limit exceeded: 20000)
[16:06:33] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Client limit exceeded: 20000)
[16:06:34] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[16:06:36] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Client limit exceeded: 20000)
[16:06:40] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Quit: Client limit exceeded: 20000)
[16:06:44] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Client limit exceeded: 20000)
[16:06:45] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Client limit exceeded: 20000)
[16:06:55] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Client limit exceeded: 20000)
[16:07:09] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Client limit exceeded: 20000)
[16:07:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[16:09:17] *** Quits: mestre (~mestre@191.177.181.194) (Quit: Lost terminal)
[16:09:18] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Client limit exceeded: 20000)
[16:09:35] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: Client limit exceeded: 20000)
[16:09:36] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Client limit exceeded: 20000)
[16:09:39] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Quit: Client limit exceeded: 20000)
[16:09:40] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Client limit exceeded: 20000)
[16:09:41] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Client limit exceeded: 20000)
[16:10:03] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Client limit exceeded: 20000)
[16:10:15] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Client limit exceeded: 20000)
[16:10:28] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Client limit exceeded: 20000)
[16:10:30] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Client limit exceeded: 20000)
[16:10:32] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Client limit exceeded: 20000)
[16:10:32] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Client limit exceeded: 20000)
[16:10:51] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Client limit exceeded: 20000)
[16:11:45] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Client limit exceeded: 20000)
[16:12:32] <maerwald> some people use it as a design pattern
[16:12:47] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[16:12:47] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[16:13:01] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[16:13:15] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[16:13:30] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[16:13:47] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[16:13:47] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[16:13:47] *** Joins: kadoban (~kadoban@user/kadoban)
[16:13:48] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[16:13:48] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[16:13:48] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[16:13:48] *** Joins: moats (~oats@user/oats)
[16:13:48] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[16:14:02] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[16:14:02] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[16:14:17] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[16:14:33] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[16:14:33] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[16:14:49] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[16:14:49] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[16:14:49] *** Joins: sm (~sm@plaintextaccounting/sm)
[16:14:53] *** Quits: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001) (Quit: Client limit exceeded: 20000)
[16:15:02] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[16:15:02] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[16:15:02] *** Joins: Deide (~deide@user/deide)
[16:15:07] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[16:15:07] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[16:15:20] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[16:15:20] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[16:15:20] *** Joins: siraben (~siraben@user/siraben)
[16:15:20] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[16:15:21] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[16:15:34] *** Joins: alex[m]12 (~alexchete@2001:470:69fc:105::1:1001)
[16:15:34] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[16:15:34] *** Joins: Tisoxin (~ikosit@user/ikosit)
[16:15:35] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[16:15:35] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[16:15:35] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[16:15:35] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[16:15:35] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[16:15:35] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[16:15:35] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[16:15:36] *** Joins: jinsun_ (~jinsun@user/jinsun)
[16:15:36] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[16:15:50] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[16:15:50] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[16:15:50] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[16:15:50] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[16:16:02] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[16:16:16] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[16:16:28] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[16:16:40] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[16:16:42] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[16:16:55] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[16:17:09] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[16:17:09] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[16:17:15] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Client limit exceeded: 20000)
[16:17:18] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Client limit exceeded: 20000)
[16:17:18] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Quit: Client limit exceeded: 20000)
[16:17:18] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Client limit exceeded: 20000)
[16:17:18] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Client limit exceeded: 20000)
[16:17:18] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Quit: Client limit exceeded: 20000)
[16:17:31] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Quit: Client limit exceeded: 20000)
[16:19:47] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:23:06] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Quit: Client closed)
[16:25:49] *** Joins: Pickchea (~private@user/pickchea)
[16:27:51] <qrpnxz> is cabal parallel at all?
[16:28:03] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[16:28:15] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[16:28:29] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[16:28:31] <tomsmeding> qrpnxz: it builds multiple packages in parallel
[16:28:33] *** Joins: doyougnu (~doyougnu@cpe-67-241-69-171.twcny.res.rr.com)
[16:28:42] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[16:28:54] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[16:29:08] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[16:29:21] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[16:29:43] <qrpnxz> hm, alright thanks
[16:29:48] <tomsmeding> within one package the inter-module caching that ghc does is usually more effective than parallelism would be
[16:33:04] *** Joins: jgeerds (~jgeerds@55d4a547.access.ecotel.net)
[16:34:51] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:35:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:37:08] *** Joins: striven (~striven@user/striven)
[16:39:00] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:39:19] *** Joins: andreabedini (~andreabed@8s8kj6nkjylj6ljnv6zz.ip6.superloop.com)
[16:41:05] *** Joins: fendor_ (~fendor@91.141.70.82.wireless.dyn.drei.com)
[16:41:32] *** Quits: striven (~striven@user/striven) (Ping timeout: 256 seconds)
[16:42:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[16:42:53] *** Quits: APic (apic@apic.name) (Ping timeout: 252 seconds)
[16:43:43] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:43:44] *** Joins: Guest52 (~Guest52@89.205.135.101)
[16:44:06] *** Quits: fendor (~fendor@77.119.206.49.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[16:44:24] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[16:45:17] *** Quits: andreabedini (~andreabed@8s8kj6nkjylj6ljnv6zz.ip6.superloop.com) (Quit: WeeChat 3.3)
[16:45:25] *** Joins: kaph (~kaph@151.37.72.8)
[16:46:06] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:46:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:46:59] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[16:47:57] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:50:35] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[16:50:51] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[16:51:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[16:52:59] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[16:54:27] *** Joins: cfricke (~cfricke@user/cfricke)
[17:01:25] *** Joins: kaph_ (~kaph@151.35.35.178)
[17:01:34] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Remote host closed the connection)
[17:01:39] *** Quits: kaph (~kaph@151.37.72.8) (Read error: Connection reset by peer)
[17:03:50] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[17:04:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[17:06:41] <maerwald> qrpnxz: unfortunately yes
[17:06:50] <maerwald> it should be -j1 by default
[17:07:19] <qrpnxz> funny, i was installing some gtk libs and it was working really hard on what thread one at a time it looked like. Annoying wait
[17:08:32] <maerwald> if you catch the wrong libs at the same time, it can just OOM your 16GB ram machine
[17:08:37] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:08:44] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[17:09:02] <maerwald> because number of jobs = number of cpus is nonsense in GHC
[17:09:10] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:09:33] *** Quits: arjun (~arjun@103.57.87.139) (Quit: Leaving)
[17:09:49] *** Quits: kaph_ (~kaph@151.35.35.178) (Remote host closed the connection)
[17:10:05] *** Joins: kaph (~kaph@151.35.35.178)
[17:10:13] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 256 seconds)
[17:13:40] *** Joins: nehsou^ (~nehsou@128-092-164-034.biz.spectrum.com)
[17:14:24] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[17:16:02] *** Quits: kaph (~kaph@151.35.35.178) (Read error: Connection reset by peer)
[17:18:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:18:17] *** Quits: cosimone` (~user@93-47-231-100.ip115.fastwebnet.it) (Ping timeout: 240 seconds)
[17:19:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[17:19:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:25:45] *** Joins: slack1256 (~slack1256@191.125.99.75)
[17:25:46] *** Quits: jgeerds (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 245 seconds)
[17:26:44] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[17:27:37] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[17:29:01] *** Joins: arjun (~arjun@user/arjun)
[17:29:32] *** fendor_ is now known as fendor
[17:30:53] *** Joins: {-d0t-} (~q_q@user/-d0t-/x-7915216)
[17:31:09] <{-d0t-}> ohai! What is the best tool to remove redundant imports in my project?
[17:32:22] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[17:33:05] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[17:34:08] <fendor> {-d0t-}, probably ghc? You can run ghc with `-ddump-minimal-imports` and it should remove all redundant imports
[17:34:16] <fendor> HLS has a code-action for it, too
[17:34:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:34:24] <{-d0t-}> fendor: is it possible to do this in place?
[17:34:32] <{-d0t-}> I really want a bulk option for the entire project.
[17:35:56] <tiferrei> hi folks, does anyone know what's the state of stack on apple M1? GHC itself seems fine, but when stack gets involved I get all sorts of platform errors 
[17:37:33] <fendor> {-d0t-}, uff, I am not sure... I don't think GHC does that at the moment... Maybe you can monkey-patch a small script?
[17:37:58] <{-d0t-}> fendor: I thought about this. There is also importify from Serokell, but it doesn't build with the later GHC versions :(
[17:37:59] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:38:50] <fendor> you could probably extract such a tool from HLS...
[17:39:07] <fendor> anyway, I am not aware of any tool that can do that at the moment
[17:39:26] <{-d0t-}> thanks anyway (:
[17:40:36] *** Quits: xff0x (~xff0x@2001:1a81:536e:b500:97e8:b6a:74e2:dc96) (Ping timeout: 250 seconds)
[17:41:53] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:42:57] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[17:44:20] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[17:47:23] *** Joins: zallocate (~zallocate@pool-72-83-246-129.washdc.east.verizon.net)
[17:47:37] *** Quits: zallocate (~zallocate@pool-72-83-246-129.washdc.east.verizon.net) (Quit: Client closed)
[17:49:37] *** Quits: mikoto-chan (~mikoto-ch@84.199.144.235) (Ping timeout: 240 seconds)
[17:50:42] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[17:52:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:53:29] *** Joins: max22- (~maxime@2a01cb0883359800f6095299facac4b2.ipv6.abo.wanadoo.fr)
[17:54:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:54:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:54:28] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:55:01] *** Quits: deadmarshal (~deadmarsh@95.38.231.118) (Ping timeout: 268 seconds)
[17:56:12] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:57:41] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[17:58:17] *** Joins: alp (~alp@user/alp)
[17:59:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[17:59:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk)
[18:00:29] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:00:32] *** Quits: enikar (~enikar@user/enikar) (Quit: WeeChat 3.0)
[18:02:05] *** Joins: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[18:02:07] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:02:21] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[18:03:10] *** Joins: xff0x (~xff0x@2001:1a81:536e:b500:97e8:b6a:74e2:dc96)
[18:06:34] *** Joins: futty14 (~futty14@c90-143-137-255.bredband.tele2.se)
[18:08:59] *** Quits: whatif (~user@123.180.40.237) (Quit: ERC (IRC client for Emacs 26.3))
[18:09:47] *** Quits: akegalj (~akegalj@185.230.83.17) (Quit: leaving)
[18:11:11] *** Joins: cigsender (~cigsender@74.124.58.162)
[18:13:08] *** Quits: arjun (~arjun@user/arjun) (Quit: Leaving)
[18:14:41] *** Quits: Guest52 (~Guest52@89.205.135.101) (Quit: Connection closed)
[18:15:32] *** Joins: stef204 (~stef204@user/stef204)
[18:17:35] *** Joins: Guest58 (~Guest58@119-18-0-232.771200.syd.nbn.aussiebb.net)
[18:20:39] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Ping timeout: 250 seconds)
[18:23:47] *** sajith_ is now known as sajith
[18:27:34] *** Joins: APic (~apic@apic.name)
[18:33:27] *** Joins: slac16914 (~slack1256@186.11.80.172)
[18:33:57] *** Joins: arr (~arr@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[18:34:05] <arr> why is Data.Map so large?
[18:34:28] <arr> i saved it using its Binary instance, and its about 100x larger than the raw data
[18:35:04] <merijn> arr: That sounds like the question is really "why is the Binary instance for Data.Map so large"
[18:35:15] <merijn> tbh, I would rarely trust Binary instances
[18:35:31] <merijn> Typeclass based (de)serialisation is a mistake
[18:36:00] *** Quits: slack1256 (~slack1256@191.125.99.75) (Ping timeout: 256 seconds)
[18:36:01] <c_wraith> nothing looks wrong with the instance for Map
[18:36:10] *** Quits: Guest58 (~Guest58@119-18-0-232.771200.syd.nbn.aussiebb.net) (Quit: Client closed)
[18:36:10] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[18:36:22] <int-e> how do you measure the size of the raw data?
[18:37:19] <c_wraith> but it puts all the work on the instances for the key and value types
[18:37:56] <int-e> serialization as binary does it will lose sharing, so it's possible for serialized data to be muc bigger than the in memory structure.
[18:38:25] <arr> the raw data is an image
[18:38:39] <arr> actually i think its larger because i converted from Int8 to Double
[18:38:44] <int-e> shouldn't you store that in an array then?
[18:38:46] <arr> probably thats about 100x
[18:39:04] <arr> erp, yes i meant Data.Array
[18:39:39] <arr> i thought maybe it was storing some kind of program that could convert from the (Int,Int) indicies to the memory addresses
[18:39:55] <arr> and that each time you added another index it would inflate the size of this program somehow
[18:39:57] *** Quits: rembo10 (~rembo10@remulis.com) (Quit: ZNC 1.8.2 - https://znc.in)
[18:40:08] <arr> which i guess is a good, but completely wrong idea
[18:40:37] <c_wraith> err.  I'm lost.  How does one get confused whether they're using Map or Array?
[18:40:38] *** Joins: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl)
[18:40:38] <int-e> Int8 to double is a factor of 8... oh but the Binary instance for Double is awful
[18:40:53] <arr> probably just that then
[18:40:55] *** Joins: rembo10 (~rembo10@remulis.com)
[18:41:13] <arr> c_wraith: idk, which is better?
[18:41:21] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:41:22] *** Joins: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[18:41:50] <c_wraith> which is better, green or blue?
[18:42:02] <arr> well, in terms of storage size, or lookup speed
[18:42:08] <merijn> c_wraith: WoW has taught me the answer is blue :p
[18:42:33] <merijn> int-e: what's the Binary instance for Double then?
[18:42:45] <arr> depends if its some cryptic way of refering to whats on your weed. if its green then its pure, if its blue, thats probably a bad sign
[18:42:53] <int-e> merijn: It's built around decodeFloat
[18:42:59] <int-e> > decodeFloat 42.0
[18:43:01] <lambdabot>  (5910974510923776,-47)
[18:43:58] <int-e> So now you have an Integer and an Int to encode. So that's... 1 byte tag, 1 byte sign, ~8 bytes mantissa, and 8 bytes for the exponent?
[18:44:00] <arr> i couldnt figure out how you would create a program that would return storage addresses
[18:44:18] * int-e should try out the actual instance
[18:44:18] <arr> let alone how it could be smaller if it had to encode fewer addresses
[18:45:25] *** Quits: haskellberryfinn (~nut@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[18:46:39] <int-e> It comes out as 25 bytes for 42.0, so I'm missing some overhead.
[18:48:27] *** Quits: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net) (Quit: Client closed)
[18:49:08] *** Quits: futty14 (~futty14@c90-143-137-255.bredband.tele2.se) (Quit: Client closed)
[18:49:30] <arr> no ideas?
[18:49:48] <int-e> Ah I'm missing the 8 bytes length field for the Integer's data. And the ~8 bytes turn out to be 7 in this case.
[18:49:55] <arr> i mean, im not even sure how Map or Array stores the lookup
[18:50:10] <merijn> arr: Map is a binary tree
[18:50:11] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[18:50:19] <merijn> arr: Array is, well, an array
[18:50:20] <int-e> Anyway, there's another factor of ~3; 25x in total
[18:50:22] *** Joins: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net)
[18:50:28] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[18:50:37] <int-e> (compared to storing Int8 as bytes)
[18:51:07] <merijn> I reiterate my previous point of "typeclass based (de)serialisation is a massive mistake and you should never use it" :)
[18:51:29] *** Joins: deadmarshal (~deadmarsh@95.38.231.118)
[18:51:45] <arr> well, its x200 larger to store the decoded png with tripples of Double instead of Int8 pixels
[18:51:52] <arr> in an Array
[18:52:07] <arr> so there must be some crazyness with the lookups
[18:52:12] <arr> the indicies or something
[18:52:35] <merijn> arr: You mean when serialised, yeah?
[18:52:39] <int-e> Here's pi :: Double: [{- mantissa as Integer, 4 fields -} {- tag -} 1, {- sign -} 1, {- length -} 0,0,0,0,0,0,0,7, {- data -} 24,45,68,84,251,33,25, {- exponent as 64 bit integer -} 255,255,255,255,255,255,255,205]
[18:52:40] <arr> yes
[18:52:50] <arr> using its binary instance
[18:52:57] <merijn> arr: Binary has it's own serialisation protocol why inserts meta data and what not
[18:53:05] <arr> its huge though
[18:53:07] <arr> v slow
[18:53:18] <merijn> If you want actual control over serialisation, I would just roll my own, tbh
[18:53:21] <int-e> merijn: I'm not sure the type class approach is to be blamed for this poor choice for serialization floating point numbers :P
[18:53:26] <arr> wondering if i should just use the read show instance...
[18:53:37] <merijn> int-e: The poor float encoding is a separate bad issue, sure
[18:53:51] *** oats_ is now known as oats
[18:54:02] <arr> anyway never mind the int vs double encoding
[18:54:05] <arr> its about the grid
[18:54:11] <arr> and the memory addresses
[18:54:12] <merijn> int-e: But pointing out someone is using bad technique for amputating their arm should, probably, take a backseat to the advice to "maybe not amputate your arm" :)
[18:54:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:54:34] <arr> easier said than done...
[18:54:38] <int-e> merijn: Well I don't share your absolute dismissal of the typeclass based serialization.
[18:55:06] <int-e> Yes, you give up control for convenience. And you can take it back whenever you want.
[18:55:13] <merijn> arr: Which memory addresses?
[18:55:29] <merijn> int-e: Except that Binary uses it's own protocol which is *not* stable across binary and GHC versions
[18:55:51] <merijn> int-e: So if you plan to serialise stuff that you need to read in, in the future with a different binary/ghc version, you are hosed
[18:56:02] <int-e> I can find many issues with binary, yes.
[18:56:24] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Quit: No Ping reply in 180 seconds.)
[18:56:50] <int-e> But again, the issues aren't due to the type class approach.
[18:57:39] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[18:59:39] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Remote host closed the connection)
[18:59:58] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[19:02:06] <int-e> https://hackage.haskell.org/package/cereal-0.5.8.2/docs/Data-Serialize-IEEE754.html looks like a saner foundation for platforms that natively use IEEE-754.
[19:03:27] <int-e> There's an entirely different can of worms connected to deriving serialization class instances automatically. I suppose you could blame the type class approach for enabling that kind of thing.
[19:03:45] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:04:41] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428) (Ping timeout: 256 seconds)
[19:04:57] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:5ffd:7ea2:ced5:7680) (Quit: WeeChat 2.8)
[19:05:45] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:4458:b22e:b9a7:2cea) (Quit: Textual IRC Client: www.textualapp.com)
[19:07:07] <merijn> Just using explicit Get/Put is much more elegant, tbh
[19:07:24] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:b018:fec8:a7e4:5428)
[19:07:42] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[19:07:44] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Ping timeout: 256 seconds)
[19:08:07] *** Quits: arr (~arr@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[19:10:21] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[19:12:41] *** Joins: arr (~arr@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[19:12:57] <arr> merijn: wherever its stored in ram or ssd
[19:13:09] <arr> like, how its looked up
[19:17:22] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:17:39] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[19:17:54] <merijn> arr: Array is just an array as you're used to in C/Java/languages like that. Only difference is that there's an extra indirection if you're not using unboxed arrays
[19:18:33] <merijn> arr: You can make your own (efficient) serialisation fairly easily using binary, though
[19:20:16] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:20:27] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:24:11] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[19:24:31] *** Quits: d0ku (~d0ku@178.43.19.180.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[19:24:31] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[19:25:49] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[19:28:04] *** Quits: whound (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[19:29:07] *** Joins: Akiva (~Akiva@user/Akiva)
[19:30:11] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[19:30:25] *** Quits: nunggu (~q@user/nunggu) (Remote host closed the connection)
[19:30:47] *** Joins: fef (~thedawn@user/thedawn)
[19:31:17] *** Joins: nunggu (~q@user/nunggu)
[19:33:08] *** Joins: slack1256 (~slack1256@191.125.99.75)
[19:33:37] *** Quits: remedan (~remedan@octo.cafe) (Ping timeout: 240 seconds)
[19:34:40] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[19:35:17] *** Quits: slac16914 (~slack1256@186.11.80.172) (Ping timeout: 256 seconds)
[19:36:53] *** Joins: remedan (~remedan@octo.cafe)
[19:37:19] <arr> thats not really saying much. i have no idea how C does anything
[19:37:52] <arr> i thought the idea of an effecient serialization was to do with the encoding of memory addresses
[19:38:19] <arr> thats why i thought it could be making a program to cast from the (Int,Int) Array lookups to memory addresses
[19:38:59] *** Joins: alp (~alp@user/alp)
[19:39:28] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:39:30] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[19:40:19] <arr> but i have no clue how that would work
[19:40:46] <arr> like, if you took the hash of the (Int,Int) serielzation, you would still need to store a bunch of associations
[19:41:15] <arr> so then is it in some kind of partition tree lookup where it can go charwise through the hash "word"
[19:42:01] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 245 seconds)
[19:43:37] <merijn> I think you need to rollback a whole lot and explain what you actually wanna do
[19:44:01] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:47:54] <arr> understand how Array works, and use it as a model for an implementation of a "program" based encoding
[19:48:32] <arr> i give it (Int,Int), it does something, and it finds the value
[19:48:50] <arr> im assuming it does something like calculating a C stle memory address
[19:49:04] <arr> that is, that some kind of bytecode is generated to access over the SSD or RAM
[19:49:26] <arr> like a bunch of logic gate flips to get to where the data is stored on the chip
[19:49:48] <c_wraith> but...  why?  what are you doing?
[19:49:49] <arr> (this is how i understand what a "memory address" is)
[19:49:58] <arr> c_wraith: why do you ask?
[19:50:19] <arr> i mean, i dont actually want to know, im just wondering why not just answer the question
[19:50:21] <c_wraith> because you're describing your expected solution space
[19:50:33] <arr> and thats bad?
[19:50:38] <c_wraith> And it's much more useful to describe your problem space and ask what good solutions are
[19:50:57] <c_wraith> because good solutions might not intersect with your expected solution space at all
[19:51:03] <arr> the problem is effecient encoding of a 2d array
[19:51:16] <c_wraith> for what purpose?
[19:51:21] <arr> i understand this to be the specification of a program that calculates memory addresses
[19:51:27] <c_wraith> there isn't one efficient encoding
[19:51:29] <arr> what do you mean for what purpose!?!?
[19:51:41] <arr> its lie the most generally useful thing there is!
[19:51:48] *** Joins: slac82791 (~slack1256@186.11.80.172)
[19:51:56] <c_wraith> efficient encoding of large sparse matrix is entirely different from efficient encoding of a photograph, yet both are large 2d arrays conceptually
[19:51:57] <arr> oh ok, you mean that it might be usecase specific
[19:52:13] <arr> well, the usecase could be considered to be a covnet
[19:52:23] <arr> or a fluid simulation, both are similar
[19:52:34] <arr> in that they use convolutions
[19:53:07] <arr> c_wraith: the important point is that we can expect every piece of data to be accessed exactly once all at the same time
[19:53:17] <arr> eg, viewing an image
[19:53:25] <arr> no sparse access
[19:53:41] *** Quits: slack1256 (~slack1256@191.125.99.75) (Ping timeout: 245 seconds)
[19:54:12] <arr> actually, we expect that for the convolutions, that every piece of data will be accessed several times, evenly
[19:54:31] <arr> i think repa uses something like zip with tail but in a 2d setting
[19:54:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:54:52] <arr> but really it should be nd, and for arbitrary stencils, that might not be shaped in a square
[19:55:09] <arr> like, this zip with tail in many dimensions idea should not be considered
[19:55:23] <arr> and instead an API should be provided for "navigation"
[19:55:45] <arr> where then you argue that nd-zippers are slow compared to just using an Array
[19:55:49] <arr> ...
[19:56:08] <c_wraith> zippers are almost completely useless for 2-dimensional data
[19:56:26] <c_wraith> they don't really work when paths aren't unique
[19:57:39] *** Quits: sus (zero@user/zeromomentum) (Quit: the lounge - https://webirc.envs.net)
[19:57:41] <c_wraith> anyway, if you want to be efficient reading dense data fitting within rectangular bounds, a single chunk of memory is ideal
[19:58:11] *** Joins: sus (zero@user/zeromomentum)
[19:58:26] <c_wraith> Though if you want to be doing stencil convolutions, you don't really want a row-major representation. You want something with better data locality
[19:59:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[20:01:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[20:03:50] <arr> some kind of partition tree?
[20:03:56] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[20:04:12] <merijn> Depends on how you intend to parallelise/SIMD
[20:04:13] <arr> i dont get how that works though, dont we just use the (Int,Int) to give some memory address?
[20:04:23] <arr> what does it matter how thats laid out in memory?
[20:04:48] <c_wraith> memory access isn't constant-time in the real world
[20:05:04] <arr> merijn: sure, if there was a different hardware available, but for now we can assume its all on one stick of ram or one harddrive
[20:05:13] <c_wraith> and no, not a partition tree.  No pointers at all
[20:05:25] <c_wraith> just one block of memory
[20:05:34] <arr> c_wraith: just some kind of, less logic gate flips to get there or something? idk what you mean
[20:05:45] <merijn> Arrays are the universal HPC data structure
[20:05:46] <arr> how does row major play into this!?
[20:05:52] <merijn> arr: Because your CPU has caches
[20:06:02] <merijn> And those caches assume certain access patterns
[20:06:08] <arr> oh
[20:06:15] <arr> how does that work, this sounds important
[20:06:15] <merijn> And violating those can slow accesses down by orders of magnitude
[20:06:23] <arr> hmmmm
[20:06:39] <arr> so say i want the nearest neighbours, for a gradient calculation
[20:06:41] <arr> in 2d
[20:06:43] <arr> on nd
[20:06:46] <arr> or*
[20:07:11] <merijn> arr: tbh, it sounds like you're a bit out of your depth :) I wish I had a good resource for the basics on high performance code/optimisation, but I learned most of what I know the hard way :\
[20:07:13] <arr> then your saying if it doesnt all fit on the cpu, that something could be improved
[20:07:34] <arr> merijn: no need to be disparaging
[20:08:14] <arr> its likely i can understand the issues you describe adequately
[20:08:16] <merijn> arr: I didn't mean that disparaging, just an observation. Some relevant things to look into are cache hierarchies, memory access patterns, false sharing
[20:08:57] <merijn> arr: I just meant that your questions require a bit of diving into modern CPU architectures to really answer/make sensible trade-offs
[20:08:59] <arr> ok, so issue is with cache hierarchies?
[20:09:46] <arr> i dont see how the flippy gates on the ram, get data into the cpu's local memory, and then, how are you supposed to have an effecient datatype for convolutions?
[20:10:44] <arr> like, at what point are you saying that an (Int,Int) -> memory address, is going to be suboptimal
[20:10:51] <arr> i cant see how it could be improved over
[20:11:09] <arr> i guess your suggesting you would want to no reaccess data that could be stored
[20:11:13] <merijn> arr: There's 3 layers of cache in modern CPUs. So when you access "one byte" in reality what happens is that your caches will read entire cache lines (64 bytes or more) at once (since memory buses can transfer a lot of data at once)
[20:11:28] <arr> but in the high dimensional limit, this is pointless
[20:11:46] <merijn> arr: This means that sequential access of memory only hits main memory once every 64 bytes (or 128 or whatever your cache line size is)
[20:11:57] <arr> i guess we never get there though, so there would always be saving from storing instead of reaccessing
[20:11:59] <merijn> arr: So you want to layout your data such that you end up doing mostly sequential accesses
[20:13:16] *** Joins: son0p (~ff@181.136.122.143)
[20:14:11] <arr> so im going to be going to each piece of data in the nd-array, and updating it according to its surrounding neigbours
[20:14:28] <arr> depending on what order of gradient the pde uses, or how wide the convolutions are in the covnet
[20:14:51] <arr> im going to need to navigate further away from the datapoint being updated to get the data needed for the update
[20:15:22] <arr> fortunately this does not change (the stencil width) during the computation
[20:15:38] <arr> so i can arrainge the bytes of the data however is best according to the stencil width
[20:16:22] <merijn> tbh, you probably don't wanna go for in-place update but have an input array and output array and compute output cells from the immutable input array
[20:16:34] <merijn> That'd allow you to vectorise/parallelise much easier
[20:16:45] <arr> sure
[20:16:53] <arr> but notionally its the same
[20:17:19] <arr> we have immutable containers so produce a new piece of data in our pure language, this is fine
[20:17:23] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:17:54] <arr> the question is if there is anything faster than just converting the (Int,Int) to a memory address
[20:17:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:18:16] <arr> regardless or reuse of foraged data, which would be basically impossible in the high dimensional limit
[20:18:21] <arr> of*
[20:18:32] <arr> s/or/of
[20:19:08] *** Joins: cfricke (~cfricke@user/cfricke)
[20:19:14] <arr> since the surface are of the surroundings increases as compared to the contact surface
[20:19:18] <arr> area*
[20:20:11] <arr> i guess the reason that the zipwith tail approach in repa is effecient is that it is in a low dimensional setting
[20:20:30] <arr> and that it probably handles this cpu storage nicely
[20:20:50] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[20:20:57] <arr> but then i guess i partition tree would also
[20:21:28] <arr> i guess there *are* arguments against fast random containers for structured access patterns even on serial hardware
[20:21:46] <arr> based on this cpu storage argument
[20:21:57] <arr> since it gives some ad-hoc parallelism
[20:22:21] <arr> idk how that would work with a tree zipper though
[20:22:44] <arr> i guess it wouldnt go to the memory unless you navigate up too far
[20:22:53] <arr> i g2g anyway
[20:22:54] *** Quits: arr (~arr@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Connection closed)
[20:28:30] *** Joins: quintasan (~quassel@quintasan.pl)
[20:28:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:29:41] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:29:55] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:33:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:33:17] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:34:08] *** Joins: cfricke (~cfricke@user/cfricke)
[20:36:24] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[20:37:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:38:18] *** polyphem_ is now known as polyphem
[20:39:01] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[20:39:01] *** Joins: Gurkenglas_ (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[20:40:40] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:40:45] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:41:19] *** ChanServ sets mode: +o geekosaur
[20:41:43] *** geekosaur sets mode: +b *!*@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net
[20:42:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:42:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[20:44:15] <geekosaur> that, by host, appears to have been our buddy fog
[20:45:15] *** geekosaur sets mode: -o geekosaur
[20:45:41] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[20:45:46] <monochrom> onoes :)
[20:45:58] *** Quits: Gurkenglas_ (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Quit: Leaving)
[20:47:06] <Profpatsch> Either I’m blind or there is no function  Integral a => a -> Maybe Natural
[20:47:47] <monochrom> I think the standard library doesn't have it.
[20:48:13] <monochrom> https://hackage.haskell.org/package/int-cast may have something along that line.
[20:48:16] *** Quits: mbuf (~Shakthi@171.61.172.103) (Quit: Leaving)
[20:48:55] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[20:49:10] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[20:50:41] <Profpatsch> okay lol huh
[20:50:52] <Profpatsch> Maybe Natural shouldn’t depend on Maybe
[20:50:52] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:51:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:51:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:51:44] *** Joins: wroathe (~wroathe@user/wroathe)
[20:53:49] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[20:54:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[20:57:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[20:57:08] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:57:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:57:29] <geekosaur> hm, spelunking my logs, fog appears to *not* nbe this person. they are however leibniz and froduck among several others
[20:57:33] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 268 seconds)
[20:59:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:59:15] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49) (Ping timeout: 250 seconds)
[21:00:15] *** Joins: hyiltiz (~quassel@31.220.5.250)
[21:02:38] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:03:07] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:05:05] *** Quits: ubert1 (~Thunderbi@p200300ecdf09945c0ca179bca462169c.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:05:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:05:41] *** Joins: modnar (~modnar@shell.sonic.net)
[21:05:48] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[21:07:18] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[21:09:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:11:13] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:11:30] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[21:11:49] <maerwald> tasty seems to print errors in annoying red... I can't find where it's setting the color =o
[21:12:09] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:12:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:13:32] <[exa]> maerwald: (non-fix: ) try overriding TERM to something monochromatic and if it doesn't stop, fill a bug report :]
[21:14:07] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:14:15] <maerwald> no, I want to use my own colors, so I want to disable it
[21:14:29] <[exa]> well there is `useColor`
[21:14:45] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:14:52] <maerwald> I know how to do terminal colors
[21:15:01] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[21:15:14] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:15:24] <[exa]> ah so you want to customize colors not turn them off
[21:15:28] <maerwald> but that might not work or mix well with tasty, because it can just revert everything
[21:15:37] <maerwald> so I want to know where tasty sets the colors
[21:16:16] <[exa]> looks around here https://hackage.haskell.org/package/tasty-1.4.2.1/docs/src/Test.Tasty.Ingredients.ConsoleReporter.html#consoleTestReporterWithHook
[21:16:19] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:16:45] <maerwald> aha... it looks like it might be configurable
[21:17:22] <[exa]> they are passing `colors` around as implicit bool
[21:17:35] <[exa]> like, turning it off is probably okay, other colors no idea
[21:17:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:18:35] <[exa]> ah, here https://hackage.haskell.org/package/tasty-1.4.2.1/docs/src/Test.Tasty.Providers.ConsoleFormat.html#failFormat
[21:19:37] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:20:19] *** Joins: chomwitt (~chomwitt@athedsl-02411.home.otenet.gr)
[21:22:18] *** Joins: nunggu (~q@user/nunggu)
[21:23:21] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:25:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:26:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:26:11] *** Joins: fef (~thedawn@user/thedawn)
[21:26:26] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:27:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:28:44] *** Joins: RFV (~Thunderbi@118.red-88-13-184.dynamicip.rima-tde.net)
[21:28:45] <kaol> Is there a type class that has just extract? It'd be pretty simple to make just one for my program but if there's something obvious I'm missing then I could go with it.
[21:29:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-020-005.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:30:23] <maerwald> [exa]: what an unintuitive API
[21:30:44] <EvanR> just extract sounds as silly as the Default class
[21:31:13] <EvanR> Comonad is almost silly in it's full glory
[21:32:08] <kaol> I guess I'll just make my own type a comonad, its duplicate is going to be silly but valid.
[21:32:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:32:23] <EvanR> oh if it's actually a Comonad that's better
[21:32:56] <monochrom> A lot of great things started as silly but valid things. :)
[21:32:59] <kaol> Still going to only call extract on it.
[21:33:17] <EvanR> I also saw this, class Eval f where eval :: f a -> a
[21:34:28] <EvanR> actually, Functor prereq on that
[21:34:41] <EvanR> from datatypes a la carte
[21:35:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:35:35] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:36:14] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[21:36:39] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:37:58] <kaol> Even better, I'll just use Env. Since that's what it really is.
[21:38:09] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:39:33] <kaol> They'll love me in the code review. I just recently gave them some code with fmap . fmap . fmap . fmap . fmap.
[21:39:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:39:57] <monochrom> Recognize that (.) is also fmap. >:)
[21:40:15] <kaol> I'm not that evil.
[21:40:46] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[21:41:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:41:45] *** Joins: emf (~emf@162.218.217.186)
[21:43:34] *** Quits: doyougnu (~doyougnu@cpe-67-241-69-171.twcny.res.rr.com) (Ping timeout: 256 seconds)
[21:44:29] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[21:45:13] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[21:46:24] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 256 seconds)
[21:46:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:47:04] *** Joins: emf (~emf@2620:10d:c090:400::5:b471)
[21:47:19] <EvanR> can you form any program from the proper tree of just fmaps and proper Functor instances
[21:47:59] <EvanR> should be no because it "can't do anything"
[21:48:04] *** Joins: econo (uid147250@user/econo)
[21:49:42] <DigitalKiwi> sir this is #haskell none of our programs do anything
[21:49:55] * geekosaur hides his programs
[21:50:00] <kaol> unsafeMakeCPUHot
[21:50:10] *** Joins: califax- (~califax@user/califx)
[21:50:30] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[21:50:33] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:50:46] <DigitalKiwi> unsafePerformCocoa
[21:50:54] <monochrom> My program calls itself. Is that OK?
[21:51:05] <DigitalKiwi> is your program lonely
[21:51:13] <monochrom> Yes. Very.
[21:51:14] *** califax- is now known as califax
[21:51:26] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[21:51:44] <DigitalKiwi> only after 9 pm and on weekends
[21:51:51] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:52:30] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[21:53:21] *** AlexNoo_ is now known as AlexNoo
[21:53:31] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:53:40] *** Quits: ubert (~Thunderbi@141.98.252.232) (Ping timeout: 250 seconds)
[21:53:40] *** Joins: ub (~Thunderbi@141.98.252.252)
[21:53:57] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:55:59] *** ub is now known as ubert
[21:56:53] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:57:10] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[21:58:13] *** Quits: polezaivsani (~polezaivs@orangeshoelaces.net) (Remote host closed the connection)
[21:58:31] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[21:59:34] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:03:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:04:06] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 245 seconds)
[22:04:14] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:09:04] <EvanR> is there a functional pearl level technique to write a serializer and parser at the same time
[22:09:59] <EvanR> reversible parser? reversible pretty printer?
[22:10:10] <EvanR> some kind of unifying theory
[22:10:19] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[22:10:29] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0)
[22:11:10] <segfaultfizzbuzz> so what is the state of the art if i want a language for "heterogeneous" computing
[22:11:33] <segfaultfizzbuzz> for example i would like to write a program and then be able to do things like:
[22:12:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:12:15] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[22:12:27] <segfaultfizzbuzz> have parts of the program compile to fpga/gpu code if it presents an advantage
[22:13:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:13:11] <segfaultfizzbuzz> have the program compile to a distributed system
[22:13:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:13:49] <EvanR> check out cloud haskell
[22:14:11] <DigitalKiwi>  and then get sad
[22:14:14] <kaol> EvanR: I guess something like this would come closest to it https://kowainik.github.io/posts/2019-01-14-tomland
[22:14:16] <EvanR> probably
[22:14:28] <segfaultfizzbuzz> most recent activity 2016...?
[22:14:38] *** Quits: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz) (Quit: Leaving)
[22:15:02] <DigitalKiwi> sad isn't it :(
[22:15:46] <kaol> segfaultfizzbuzz: https://github.com/Kindelia/HVM if you want something cutting edge, though I'd expect it to take quite some time to mature
[22:15:58] <segfaultfizzbuzz> the third out of four examples is map reduce which is very trivial
[22:16:15] <segfaultfizzbuzz> k means i am looking at but expect this to also be fairly trivial
[22:16:34] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:17:32] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:17:44] <monochrom> EvanR: https://hackage.haskell.org/package/roundtrip and the paper it cites are good starting points.
[22:18:05] <EvanR> HVM...
[22:18:40] <EvanR> the executive reports to code ratio is pretty crazy there
[22:19:09] <EvanR> it supports 2 data types
[22:19:17] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[22:19:48] <EvanR> it's also like a week old
[22:20:33] *** Joins: neurocyte0917090 (~neurocyte@IP-094046082248.dynamic.medianet-world.de)
[22:20:33] *** Quits: neurocyte0917090 (~neurocyte@IP-094046082248.dynamic.medianet-world.de) (Changing host)
[22:20:33] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[22:22:45] <EvanR> k I remember this paper, time to do a deep dive
[22:23:53] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 252 seconds)
[22:25:52] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[22:26:22] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:28:37] *** Joins: Guest|7 (~Guest|7@185.136.116.179)
[22:29:04] *** Quits: Guest|7 (~Guest|7@185.136.116.179) (Client Quit)
[22:29:49] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[22:30:59] *** Joins: alp (~alp@user/alp)
[22:31:24] <EvanR> "pretty printers are usually structured around a proper type Doc", where is this Doc type normally
[22:31:30] <EvanR> :t Doc
[22:31:31] <lambdabot> error: Data constructor not in scope: Doc
[22:31:37] <EvanR> :k Doc
[22:31:38] <[exa]> in `pretty`
[22:31:38] <lambdabot> *
[22:31:42] <EvanR> ah
[22:31:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:31:55] <[exa]> https://hackage.haskell.org/package/pretty
[22:32:01] <kaol> I haven't really felt the need for having bidirectionaly encode and decode myself. I have a web site and all the interesting queries are going to be complex joins to a relational DB with all sorts of aggregates and stuff. I have seldom any use for deserializing something I've inserted or updated to it.
[22:32:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:32:13] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[22:33:45] <[exa]> segfaultfizzbuzz: accelerate can compile to many targets quite efficiently
[22:33:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:34:15] <EvanR> kaol so you only do read only or write only, never both at the same time xD
[22:34:17] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:34:32] <EvanR> like Eiffel
[22:35:31] <kaol> insert returning is a thing. And others.
[22:35:46] <[exa]> segfaultfizzbuzz: the heterogeneous computing problem is that the platforms are so diverse that it's pretty hard to have a single central code that is transformed to all (you'd implicitly encode 4 different implementations there anyway)
[22:35:56] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[22:36:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:36:53] <kaol> hasql is my go to library for DB stuff. The way it does it that every statement comes with an encoder (contrafunctor) and a decoder (functor).
[22:37:09] *** Quits: {-d0t-} (~q_q@user/-d0t-/x-7915216) (Quit: Konversation terminated!)
[22:37:41] <EvanR> serialize deserialize seems to not really apply to an SQL backed website
[22:38:03] <EvanR> where you think of your data as either being in haskell or in a database, not serialized
[22:38:32] <EvanR> or in haskell or in javascript
[22:40:33] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:41:44] <segfaultfizzbuzz> [exa]: i mean doesn't this seem like a very high value problem to solve...?
[22:42:14] <[exa]> "very high value"?
[22:42:23] <segfaultfizzbuzz> yes, for multiple reasons
[22:43:08] <segfaultfizzbuzz> i think firstly it isn't clear what the "best" method for specifying programs is, and so having a good answer for this problem would shine a lot of light on that
[22:43:50] <[exa]> programmers have been constantly failing for like 70+ years now to find a "best" method for specifying programs :]
[22:43:52] <segfaultfizzbuzz> second, it might be that my problem could be solved by running across 100 computers for 1 second instead of running 1 or 2 computers for days. but i don't have time to figure that out myself
[22:44:23] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:44:24] <segfaultfizzbuzz> with modern cloud access, there's a large financial incentive to discover that it's worthwhile to perform the distributed compute
[22:44:30] <[exa]> you don't need heterogeneous computing for that
[22:44:42] <segfaultfizzbuzz> and furthermore i could temporarily borrow some fpgas or whatever i need for the task at hand, since those are in the cloud too
[22:44:58] *** Joins: Pickchea (~private@user/pickchea)
[22:45:14] <segfaultfizzbuzz> so, approximately speaking, the sky is the limit in terms of available hardware
[22:45:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:45:36] <[exa]> anyway this is pretty common today, you just don't tell your programmers to code it in 1 supergeneric language, but in 2 specific languages
[22:46:02] <[exa]> because 2 is literally the practical number of really different platforms we have now for common computing tasks
[22:47:12] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:47:15] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:47:17] <segfaultfizzbuzz> 2 is the number of really different platforms?
[22:47:24] <segfaultfizzbuzz> what, CPU and GPU...?
[22:47:36] <segfaultfizzbuzz> meaning branching and non-branching...?
[22:47:46] * geekosaur trying to figure that too, having 3 candidates come to mind
[22:48:00] <geekosaur> (linux/windows, x86/arm, cpu/gpu)
[22:48:30] <geekosaur> (android/iphone)
[22:48:35] <segfaultfizzbuzz> i think only cpu and gpu there are different
[22:48:38] <[exa]> yeah, literally, if I have a ton of $data (say genomes in my case) and I want to do this the easy way, I can basically choose just between "I'm going to run this paralelly on huge lots of CPUs" or "I'm going to code for GPU(s)"
[22:48:44] <kaol> browser/backend
[22:48:51] <DigitalKiwi> blockchain/not blockchain
[22:49:03] <segfaultfizzbuzz> DigitalKiwi: lol
[22:49:26] <[exa]> FPGAs are nice but not generally available (making my stuff nonreproducible)
[22:49:34] <monochrom> currency/nft >:)
[22:49:52] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[22:49:53] <monochrom> bosons/fermions >:) >:)
[22:50:11] <[exa]> I'm never going to put a practical generalization again to #haskell
[22:50:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:50:57] <segfaultfizzbuzz> maybe all of this just comes down to programmability, and CPUs win because they are the most programmable
[22:51:43] <segfaultfizzbuzz> and so you can allocate effort to special programming tasks like what i am describing, but unless you are focusing on doing your work on CPUs, and especially on CPUs on a single machine with fairly trivial sharding/parallelism, you are pretty much hosed...
[22:51:53] <monochrom> I feel that you were morally right. 2 is the upper limit of how many platforms a code monkey can deal with. :)
[22:51:53] <EvanR> is most programmable similar to most excellent
[22:51:55] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 256 seconds)
[22:52:03] *** Joins: zebrag (~chris@user/zebrag)
[22:52:10] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:52:12] <DigitalKiwi> most unique
[22:52:51] <[exa]> re platforms, anyone here remembers xeon phi btw? :D
[22:53:30] <[exa]> segfaultfizzbuzz: why hosed?
[22:53:35] <EvanR> segfaultfizzbuzz, unfortunately most programs are hopelessly not parallizable
[22:53:40] <monochrom> I remember Xenix, BeOS, Palm OS, OS/2.
[22:54:02] <EvanR> and if they are, not in a way that a distributed system would benefit
[22:54:03] <monochrom> For hardware, I remember 6502 and Z80.
[22:54:16] * [exa] pushes back a zilog tear
[22:54:30] <monochrom> And the CPU that Sharp PC-1500 used.
[22:54:38] <segfaultfizzbuzz> [exa]: yes i recall xeon phi. arguably nvidia won there because "cuda" won the "programmability" view of things
[22:54:54] <[exa]> monochrom: oh wow I was playing stuff on mz-800 :D
[22:55:32] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[22:56:42] * geekosaur remembers being pissed that the z8000 was not to the 8086 what the z80 was to the 8080
[22:56:55] <[exa]> wow wait that's the pockety one, cool
[22:57:17] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[22:58:10] <monochrom> :)
[22:58:28] <monochrom> The inverted pissing game of "mine is smaller than yours!"
[22:58:56] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[22:59:02] <segfaultfizzbuzz> EvanR: distributed systems can't be used for most computations?
[22:59:18] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[22:59:19] <EvanR> not what I said
[22:59:42] <segfaultfizzbuzz> part of what i am wondering is why my ram isn't starting to have more compute onboard
[22:59:48] <segfaultfizzbuzz> so my machine behaves more like a distributed compute
[22:59:53] <segfaultfizzbuzz> *distributed computer
[23:00:02] <monochrom> Look for "transputer".
[23:00:29] <EvanR> distributing the parts of your computer across the planet sounds pretty bad for performance
[23:00:53] <segfaultfizzbuzz> because i am being told that fetching data from ram is very slow, so why not tell ram what to do instead
[23:01:11] <geekosaur> memristors are a thing but not ready for general purpose use
[23:01:13] <EvanR> that is what your OS does
[23:01:42] *** Quits: emf (~emf@2620:10d:c090:400::5:b471) (Ping timeout: 250 seconds)
[23:02:28] *** Joins: vicfred (~vicfred@user/vicfred)
[23:02:34] <EvanR> ram+ram controller is specialized to have huge memory, cpu is specialized to have huge computeness
[23:02:52] <EvanR> basically you want them to both be both 
[23:03:06] <EvanR> and then awkwardly communicate
[23:04:06] <segfaultfizzbuzz> are computer architecture decisions made quantitatively or by theorizing, speculating, shouting, and enduring market failures?
[23:04:21] <EvanR> yes
[23:04:35] <segfaultfizzbuzz> like, i should be able to simulate different computer architecture decisions (like putting more compute in ram)
[23:04:38] <monochrom> shouting and marketting, yes.
[23:04:43] *** Joins: emf (~emf@2620:10d:c090:400::5:b471)
[23:04:45] <[exa]> also by publishing benchmarks that are 0.5% better than $othercompany
[23:04:55] <monochrom> So, not even theorizing. Theorizing would be a good start.
[23:05:03] <segfaultfizzbuzz> and then determine, for perhaps a particular market segment that
[23:05:19] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:05:23] <segfaultfizzbuzz> genomics favors ram with these special instructions
[23:05:25] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:05:45] <segfaultfizzbuzz> or that i could specialize a cpu with some instructions, or make use of an integrated fpga-cpu in a certain way
[23:06:07] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:06:15] <monochrom> Humans want small block diagrams. Block diagrams that have, say, at most 5 vertices, and each vertice having at most degree 3.
[23:06:21] <geekosaur> thi sall has a nasty failure mode
[23:06:38] <segfaultfizzbuzz> what is a block diagram
[23:06:48] <monochrom> This immediately advantages centralized models such as the von Neumann model. Even politicians understand the von Neumann model.
[23:06:51] <segfaultfizzbuzz> i'm not sure whether humans will be relevant to engineering for much longer
[23:07:07] <geekosaur> pretty soon someone comes up with a computer virus that reconfigures your cpu / fpga / ram / etc.
[23:07:19] <segfaultfizzbuzz> haha
[23:07:20] *** Joins: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net)
[23:07:23] <segfaultfizzbuzz> a benevolent virus?
[23:07:52] * geekosaur sighs
[23:07:58] <monochrom> Decentralized computing would mean if you had 1000 units of memory and correspondingly 1000 units of computing spread out, the block diagram would be like 1000 nodes and god knows how many edges per node.
[23:08:04] <geekosaur> where in that did I say "benevolent"?
[23:08:18] <monochrom> Both voters and politicians hate such a humongous graph.
[23:08:24] <dolio> If hardware is being tailored to certain domains, why was the previous assumption that a single programming language would be optimally applicable to every domain?
[23:08:33] <DigitalKiwi> geekosaur: reconfigures it to mine *coin
[23:08:37] <segfaultfizzbuzz> monochrom: i mean, if it provides a significant advantage in latency or power consumption or whatever, who cares...?
[23:08:53] <[exa]> dolio: because programmers are the laziest part there
[23:08:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:09:07] <segfaultfizzbuzz> dolio: because programmers won't be smarter than computers for much longer
[23:09:14] <monochrom> No no. Human nature goes "if it makes me feel better, who cares"
[23:09:19] * geekosaur disbelieves
[23:09:35] <segfaultfizzbuzz> lol
[23:09:45] <[exa]> I'd love to share the optimism here tho
[23:09:48] <EvanR> only in futuristic soviet russia code programs you
[23:09:49] <geekosaur> AI, like fusion, has been just over the horizon for how long now?
[23:09:51] <dolio> You're in complete fantasy land.
[23:09:53] <DigitalKiwi> stop stop i'm not even in psychosis right now
[23:09:58] <monochrom> I have social empirical evidence for my theory, you know.
[23:10:15] <DigitalKiwi> ...or am i :(
[23:10:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:11:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:11:08] <EvanR> if AI can correctly recognize a zamboni 95% of the time, surely that means it's ready to write our software
[23:11:14] <monochrom> Transputer failed. Reduceron failed. Functional programming almost failed. Everything against the von Neumann model fails or is marginalized.
[23:11:16] <DigitalKiwi> i haven't payed my phone bill in months but it's still on so i'm pretty sure the cia is after me ;D
[23:12:29] * EvanR wears I'm not with DigitalKiwi shirt
[23:12:42] <DigitalKiwi> EvanR: for funsies i do mturk and i'm pretty sure the AI is me
[23:13:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:13:58] <DigitalKiwi> pretty sure most advanced AI are really a bunch of people making $0.05 a hit
[23:14:22] *** Joins: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:15:05] *** Quits: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[23:15:43] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[23:15:45] *** Joins: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:15:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:16:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:16:21] <EvanR> in Invertible Syntax Descriptions: Unifying Parsing and Pretty Printing, they have a symmetric type for "partial isomorphisms", like data Iso a b = Iso (a -> Maybe b) (b -> Maybe a), the two directions are for parsing and pretty printing
[23:16:33] *** Joins: oldsk00l (~znc@ec2-13-40-107-163.eu-west-2.compute.amazonaws.com)
[23:16:34] <EvanR> but I don't really understand why there is partiality for pretty printing
[23:16:34] <monochrom> dolio: I prefer going along with that fantasy. If human programmers will be taken out of the equation, why need one or multiple languages, one or multiple compilers with one or multiple backends in the first place? >:)
[23:16:49] <segfaultfizzbuzz> monochrom: is marginalized?
[23:17:37] <DigitalKiwi> do the project managers get replaced too
[23:18:06] <DigitalKiwi> can we replace the users too
[23:18:12] <DigitalKiwi> they seem to be the most problematic
[23:18:53] <EvanR> It says on this, "We are dealing with partial functions because a Printer α should represent a pretty printer for a subset of the extension of α." what do you think this means
[23:19:02] <segfaultfizzbuzz> geekosaur: i mean, we are starting to see "ai" based methods being used in circuit design, synopsys is starting to use it for layout and machines are starting to beat people
[23:19:07] <monochrom> EvanR: I haven't read it yet. But maybe play along and later there may be a use case.
[23:19:12] *** Joins: mickaelviey__ (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:19:29] <geekosaur> segfaultfizzbuzz, for some things
[23:19:34] <segfaultfizzbuzz> i don't drink any "ai koolaid" here, i just think that programming is more like chess or go than people think
[23:19:40] *** Quits: mickaelviey__ (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[23:19:57] <segfaultfizzbuzz> so at some point we will focus more on program specification than computer instruction
[23:20:02] <segfaultfizzbuzz> probably sooner rather than later
[23:20:11] <EvanR> yes many languages have the programmer mindlessly typing the same nonsense over and over
[23:20:34] <EvanR> which obviously makes those kind of programming jobs more plentiful
[23:20:39] <segfaultfizzbuzz> and even if you have a temporary advantage being able to exploit some knowledge of an architecture to achieve a performance benefit
[23:20:51] <segfaultfizzbuzz> something will happen which will make your knowledge obsolete, suboptimal, no longer work, etc
[23:21:15] *** Joins: mickaelviey__ (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:21:15] <geekosaur> tbh if there's a place that would really benefit it's proigram specification. people are *terrible* at it
[23:21:23] *** Quits: Midjak2 (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[23:21:28] <segfaultfizzbuzz> so really knowledge of what the program runs on is the concern of the compiler or the runtime etc, rather than the concern of the programmer
[23:21:32] <EvanR> program specification: super addictive, borderline abusive massively multiplayer online RPG
[23:21:55] <EvanR> profitable should be a checkbox
[23:22:04] <segfaultfizzbuzz> geekosaur: wait "ai" techniques would benefit program specification you are saying...?
[23:22:06] *** Quits: mickaelviey__ (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Remote host closed the connection)
[23:22:12] <EvanR> ok make RPG a checkbox and jam "profitable" to yes
[23:22:23] <sm> do you want to be profitable: [ ] YES  [ ] NO
[23:22:25] <segfaultfizzbuzz> lol
[23:23:05] <EvanR> that question does come up when filing for your business license (non-profit)
[23:23:10] *** Joins: kli (~kli@ip-89-177-122-45.net.upcbroadband.cz)
[23:23:27] *** Joins: simendsjo (~user@84.211.91.241)
[23:23:36] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:23:39] *** Quits: deadmarshal (~deadmarsh@95.38.231.118) (Ping timeout: 256 seconds)
[23:23:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:25:02] *** Quits: simendsjo (~user@84.211.91.241) (Remote host closed the connection)
[23:26:50] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[23:26:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:27:15] <DigitalKiwi> https://mostlyabsurd.com/files/2022-02-01-173824_722x209_scrot.png
[23:27:15] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:27:21] *** Joins: simendsjo (~user@84.211.91.241)
[23:27:48] <DigitalKiwi> they used to just make games!
[23:28:00] <monochrom> Oh hahaha
[23:28:53] <EvanR> today's date is one of few remaining trinary dates
[23:28:59] <EvanR> until 2100
[23:29:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:29:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:30:06] *** Quits: oldsk00l (~znc@ec2-13-40-107-163.eu-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[23:30:18] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 250 seconds)
[23:30:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:31:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:31:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:32:41] <segfaultfizzbuzz> haha
[23:32:43] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Ping timeout: 256 seconds)
[23:34:51] <EvanR> I see, they don't pattern match to do pretty printing, but use <|>
[23:35:33] <EvanR> try the pretty printer for each ctor until one works
[23:36:26] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:36:29] <monochrom> Ahhhh interesting decomposition.
[23:38:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:39:08] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:39:39] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:40:07] <EvanR> because clearly you can't use pattern matching to go the other way
[23:40:12] <EvanR> *or can you*
[23:40:32] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:40:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:42:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:43:22] *** Joins: meltedbrain_y2k (~tekserf@87.125.156.8)
[23:43:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:48:46] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[23:48:51] <theseb> At the risk of stating the obvious i had an epiphany yesterday that "variable" = "key value pair" !!! if you think about it a variable actually represents TWO things....its name (the key) and what it is = to (the value) !!! they are the same thing! surprising?
[23:48:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:49:26] *** Joins: x_kuru (~xkuru@user/xkuru)
[23:50:22] <monochrom> That would be extremely insightful in ##c where "lvalue" is a central idea.
[23:50:34] <monochrom> Over here it is false.
[23:50:58] <Rembane> Is lvalue false? 
[23:51:05] <monochrom> Well, perhaps until we get down to efficiency questions such as re-compute vs re-use.
[23:51:25] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[23:51:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:54:04] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:55:36] <monochrom> But tomorrow you can have the related epiphany that a field of a record is a key-value pair, and the whole record a dictionary. That would be insighful in ##perl (in which they really do that) and in a depenently typed language, but still not here.
[23:56:19] *** Quits: kuribas` (~user@ptr-25vy0i9didaz6k0kzeu.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[23:57:03] <tomsmeding> though in an interpreter, variables are generally stored as key-value pairs in a map :)
[23:57:55] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:58:11] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[23:58:28] *** Quits: myShoggoth (~myShoggot@97-120-67-120.ptld.qwest.net) (Ping timeout: 250 seconds)
[23:58:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2975:6931:ecb6:7a49)
[23:59:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[23:59:54] <Rembane> It's quite neat imho
