[00:10:06] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:14:48] *** Joins: greaser|q (greaser@antihype.space)
[00:15:50] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[00:15:50] *** Joins: greaser|q (greaser@user/greasemonkey)
[00:15:54] *** greaser|q is now known as GreaseMonkey
[00:21:51] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[00:58:25] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:15:09] *** Quits: pjb (~pjb@user/pjb) (Quit: restart for macOS upgrade)
[01:22:27] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Ping timeout: 265 seconds)
[01:27:46] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[01:49:41] *** Quits: jeffrey (~jeffrey@80-115-60-193.cable.dynamic.v4.ziggo.nl) (Quit: Client quit)
[02:04:50] *** Joins: pjb (~pjb@user/pjb)
[02:20:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[02:48:32] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:59:46] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[03:27:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:31:24] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[03:31:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[03:54:50] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:ff84:8eee:bb8e:a6cd)
[04:11:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[04:13:05] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[04:17:11] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:ff84:8eee:bb8e:a6cd) (Ping timeout: 245 seconds)
[04:41:46] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 245 seconds)
[04:48:49] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[06:04:01] *** Quits: sts-q (~sts-q@91.200.108.176) (Ping timeout: 252 seconds)
[06:04:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:06:40] *** Joins: sts-q (~sts-q@212.53.219.169)
[06:07:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:36:16] *** Joins: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net)
[09:09:24] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:03:52] <CodeBitCookie[m]> Good Morning Everyone!
[10:04:39] <CodeBitCookie[m]> I am at the 6th chapter of the book "Practical Common Lisp", apparently, I just can't wrap my head around "bindings" of variables
[10:05:00] <CodeBitCookie[m]> Is it like Variables holding Variables?
[10:07:41] <CodeBitCookie[m]> Since a binding is a "runtime manifestation of a variable", do different function calls have seperate parameters, or seperate bindings? If it is the latter, how is this true: "A single variable can even have multiple bindings at the same time; ..."
[10:08:12] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:08:25] <CodeBitCookie[m]> it explains with recursive calls but aren't the variables seperate from each other in different calls?
[10:17:31] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:18:33] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[10:21:10] *** Quits: donovanquixote (~Donovan@c-98-246-129-179.hsd1.or.comcast.net) (Quit: Leaving)
[10:47:29] <beach> CodeBitCookie[m]: A variable binding is just the combination of a variable and its value in a particular context.
[10:48:42] <beach> Of course, the value of a variable can be a symbol that is the name of a variable, but that's not the usual situation. 
[10:49:08] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[10:50:11] <beach> CodeBitCookie[m]: If you have a special variable, as in (defparameter *v* 10), then if you do (let ((*v* 20)) ...) then *v* has two bindings.  You can access only the innermost one, but when the LET gets out of scope, the old one becomes the innermost one.  
[10:51:42] <beach> Lexical variables can have multiple bindings as well.  Consider (say) the factorial function: (defun fact (n) (if (zerop n) 1 (* n (fact (1- n)))))
[10:52:10] <beach> Then there is a single variable N which is the parameter of FACT, but in each recursive call, it has a different binding.
[10:53:02] <beach> That said, in cases like (let ((x 20)) (let ((x 30)) ...)) the symbol X is the name of two different lexical variables. 
[10:53:18] <beach> The terminology is not entirely clear, but I think you get the idea.
[10:54:20] *** Joins: makomo_ (~makomo@user/makomo)
[10:54:44] <beach> CodeBitCookie[m]: Whether you call the N a different variable or the same variable with different bindings is a matter of taste.
[10:54:48] <mfiano> or simply, special variable bindings have stack semantics. lexical variable bindings have semantics like traditional block-level symbol table compilers.
[10:55:40] <beach> CodeBitCookie[m]: But definitely for special variables, it is multiple bindings of the same variable.
[10:58:07] *** Joins: random-nick (~random-ni@87.116.183.117)
[11:00:51] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[11:01:58] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[11:04:27] <beach> CodeBitCookie[m]: I designed a small example to show it....
[11:07:35] <beach> Let's say we have (defparameter *v* 10) and (defun g () (f (lambda (y) (+ y *v*))))
[11:07:46] <beach> I haven't defined F yet, of course.
[11:08:08] <beach> But I think we agree that there is a single variable *V* in the function F.
[11:08:38] <beach> Now let's do (defun f (function) (funcall function 5)) and then call (g).
[11:08:54] <beach> Then (G) returns 15.
[11:09:37] <beach> But if we redefine F like this (defun f (function) (let ((*v* 20)) (funcall function 5))) and then (g),
[11:09:51] <beach> Then (G) returns 25.
[11:10:42] <beach> Maybe not a great example after all.  Oh well. :(
[11:15:01] *** Joins: makomo_ (~makomo@user/makomo)
[11:35:23] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:39:09] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:41:40] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[12:02:44] *** Joins: makomo_ (~makomo@user/makomo)
[12:41:25] <pjb> CodeBitCookie[m]: the thing is that in lisp, the objects (the "values") are not stored "inside" a variable, like in languages like C.  Instead, there is a link between a variable and an object, implemented with a "reference".  This is this link that is called the binding.
[12:41:37] *** Joins: selwyn (~selwyn@user/selwyn)
[12:42:00] <pjb> CodeBitCookie[m]: some variables and slots may be unbound! Without having any reference (compare that with NULL pointers in other languages!)
[12:42:51] <pjb> (defvar *foo* 42) (list (boundp '*foo*) *foo* (makunbound '*foo*) (boundp '*foo*)) #| --> (t 42 *foo* nil) |# 
[12:44:32] <CodeBitCookie[m]> Ahhhhhh
[12:44:41] <CodeBitCookie[m]> thanks, beach and pjb
[12:44:43] <CodeBitCookie[m]> I mostly understand
[12:44:45] <pjb> CodeBitCookie[m]: this is also related to "typing".  In lisp, it's the objects (the values) that have types.  Variables don't have types, since they are only names used for their binding.
[12:45:12] <CodeBitCookie[m]> oh, so that means the objects are stored in raw memory?
[12:45:17] <pjb> When we declare the type of a variable, what we're declaring is a promise the programmers makes to the compiler that all the bindings will always be to objects of the given type.
[12:45:35] <pjb> Definitely objects are stored on the heap (or on the stack for dynamic-extent objects).
[12:45:43] <pjb> But in general on the heap.
[12:48:40] <beach> CodeBitCookie[m]: Semantically speaking, every Common Lisp value is a reference to a chunk of memory.  I call this idea "uniform reference semantics".  It means that variable values are all of the same size, namely the size of a pointer.
[12:52:55] <mfiano> reference: http://metamodular.com/Software-engineering/uniform-reference-semantics.html
[12:53:12] <beach> Ah, forgot about that one.  Thanks mfiano.
[12:55:28] <beach> Also: http://metamodular.com/common-lisp-semantics.html
[13:29:50] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[13:36:07] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[13:58:07] *** Joins: makomo_ (~makomo@user/makomo)
[14:06:15] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[14:06:23] *** Joins: makomo (~makomo@user/makomo)
[14:31:44] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 265 seconds)
[14:40:51] *** madnificent_ is now known as madnificent
[14:59:41] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[15:11:53] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:15:14] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[15:26:59] *** Joins: random-nick (~random-ni@87.116.165.220)
[16:11:01] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[16:25:27] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Ping timeout: 268 seconds)
[17:03:00] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:608c:efd9:6c56:8079)
[17:11:32] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[17:24:39] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Quit: Konversation terminated!)
[18:03:25] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 252 seconds)
[18:17:43] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[18:25:24] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[18:37:05] *** Joins: thrig (~thrig@65.113.153.50)
[18:38:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:39:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:40:11] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Client Quit)
[19:03:22] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:05:06] *** Joins: aeth (~aeth@user/aeth)
[19:09:55] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[19:11:22] *** Joins: aeth (~aeth@user/aeth)
[19:18:12] *** Joins: makomo (~makomo@user/makomo)
[19:19:12] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:30:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:45:06] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:608c:efd9:6c56:8079) (Ping timeout: 245 seconds)
[19:49:19] *** Joins: unthrig (~thrig@65.113.153.50)
[19:52:52] *** Quits: thrig (~thrig@65.113.153.50) (Ping timeout: 252 seconds)
[19:54:01] *** unthrig is now known as thrig
[20:12:07] *** Joins: makomo_ (~makomo@user/makomo)
[20:20:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:21:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:24:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:24:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:56:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[20:58:12] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:01:55] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 265 seconds)
[21:06:10] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:37:29] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[21:47:39] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:54:43] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[22:05:17] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[22:11:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:12:00] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:17:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[22:24:55] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 265 seconds)
[22:25:34] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:2706:5b4f:f250:cfad)
[22:26:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:29:23] *** Quits: makomo_ (~makomo@user/makomo) (Quit: WeeChat 3.2)
[22:31:29] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[22:36:48] <White_Flame> CodeBitCookie[m]: where would objects be stored other than plain, raw memory? ;)
[22:45:19] <copec> They could be in swap, but to you they look like memory, also, mmap'd files
[22:48:53] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 250 seconds)
[22:49:12] <copec> nvm, ignore me
[22:49:41] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:2706:5b4f:f250:cfad) (Ping timeout: 245 seconds)
[22:49:49] <White_Flame> non-volatile memory?  ignoring ;)
[22:50:59] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[22:53:49] <pjb> registers.
[22:54:36] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:04:18] <White_Flame> pjb: usually difficult to store entire objects in those
[23:04:33] <White_Flame> assuming non-fixnums etc
[23:08:51] <pjb> indeed.
[23:32:04] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:dae8:1099:d49d:bb8c)
[23:59:21] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
