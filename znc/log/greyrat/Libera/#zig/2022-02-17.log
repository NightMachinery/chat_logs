[00:01:13] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:01:49] *** Joins: gpanders_ (be60a9b05a@user/gpanders)
[00:09:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[00:11:16] *** Joins: ur5us_ (~ur5us@203.86.198.200)
[00:14:11] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[00:15:08] *** Quits: ur5us_ (~ur5us@203.86.198.200) (Read error: Connection reset by peer)
[00:18:36] *** Quits: elves-upstate (~elves-ups@129-2-180-38.wireless.umd.edu) (Quit: Client closed)
[00:18:46] *** Joins: finsternis (~X@23.226.237.192)
[00:20:34] *** Quits: nemith (~bbennett@coachz.brbe.net) (Quit: WeeChat 3.0.1)
[00:37:24] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:37:35] *** Joins: amk (~amk@109.255.169.126)
[00:38:43] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:53] *** Joins: amk (~amk@109.255.169.126)
[00:39:37] *** Joins: rgrinberg (~textual@187.194.14.9)
[00:42:41] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:43:48] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[00:45:44] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[00:47:05] *** Joins: shodan45 (~quassel@107.161.22.155)
[00:52:46] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[00:52:55] *** Joins: amk (~amk@109.255.169.126)
[00:55:21] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:55:31] *** Joins: amk (~amk@109.255.169.126)
[01:01:35] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[01:05:48] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[01:05:53] *** Joins: frmdstryr (~jrm@172.58.203.78)
[01:07:59] *** Joins: amk (~amk@109.255.169.126)
[01:14:00] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[01:14:19] *** Joins: masoudd_ (~masoudd@user/masoudd)
[01:17:24] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 240 seconds)
[01:42:29] *** Quits: jemius (~imperator@200116b82d780d00bb2e5c601b6f980b.dip.versatel-1u1.de) (Quit: Leaving)
[01:45:30] <andrewrk> ifreund, related to your question about shifting with vectors: I would be interested to hear your opinion on this proposal: https://github.com/ziglang/zig/issues/7605
[01:48:08] <andrewrk> LemonBoy's comment is interesting, because although my proposal is entirely safe, and in fact makes it impossible to invoke UB by doing shifting, which is not true in status quo, he points out that the existence of possible UB actually catches bugs, and is therefore more safe
[01:48:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[01:54:58] *** Joins: terminalpusher (~terminalp@2a01:586:9b7e:1:7b2f:6557:bb5b:d32)
[02:00:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:03:24] *** Quits: rgrinberg (~textual@187.194.14.9) (Read error: Connection reset by peer)
[02:04:34] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[02:22:03] *** Quits: terminalpusher (~terminalp@2a01:586:9b7e:1:7b2f:6557:bb5b:d32) (Remote host closed the connection)
[02:28:32] *** cr1901_ is now known as cr1901
[02:29:54] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:34:01] *** Joins: ofh (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[02:34:17] *** Quits: yelnah (~felix@2001:44b8:3084:172:6f0:21ff:fe3c:d4d7) (Ping timeout: 240 seconds)
[02:40:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[02:45:01] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 240 seconds)
[02:57:20] *** Joins: leah2 (~leah@vuxu.org)
[03:05:25] *** Quits: nrr___ (sid20938@id-20938.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:38] *** Quits: euantorano (sid180289@id-180289.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:40] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:41] *** Quits: ysh (sid6017@id-6017.ilkley.irccloud.com) (Read error: Connection reset by peer)
[03:05:46] *** Quits: nikki93 (sid200244@id-200244.tinside.irccloud.com) (Ping timeout: 245 seconds)
[03:05:47] *** Quits: dch (sid1310@couchdb/committer/dch) (Ping timeout: 250 seconds)
[03:05:47] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[03:05:49] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 240 seconds)
[03:05:51] *** Quits: lqd (uid15826@id-15826.helmsley.irccloud.com) (Read error: Connection reset by peer)
[03:05:53] *** Joins: ysh (sid6017@id-6017.ilkley.irccloud.com)
[03:05:53] *** Quits: pusewic|away__ (sid2036@id-2036.lymington.irccloud.com) (Read error: Connection reset by peer)
[03:05:54] *** Quits: ovf (sid19068@id-19068.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:05:56] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[03:05:58] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Read error: Connection reset by peer)
[03:05:59] *** Quits: glowcoil_ (sid3405@id-3405.tinside.irccloud.com) (Read error: Connection reset by peer)
[03:06:00] *** Quits: bw (sid2730@user/betawaffle) (Read error: Connection reset by peer)
[03:06:04] *** Joins: lqd (uid15826@id-15826.helmsley.irccloud.com)
[03:06:18] *** Joins: nrr___ (sid20938@id-20938.lymington.irccloud.com)
[03:06:32] *** Joins: glowcoil_ (sid3405@2a03:5180:f::d4d)
[03:06:32] *** Joins: shurane (sid132556@2a03:5180:f:1::2:5cc)
[03:06:35] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[03:06:41] *** Joins: PotatoGim (sid99505@id-99505.lymington.irccloud.com)
[03:06:42] *** Joins: nikki93 (sid200244@id-200244.tinside.irccloud.com)
[03:06:46] *** Joins: ovf (sid19068@2a03:5180:f:4::4a7c)
[03:06:47] *** Joins: euantorano (sid180289@id-180289.helmsley.irccloud.com)
[03:06:55] *** Joins: bw (sid2730@user/betawaffle)
[03:07:04] *** Joins: dch (sid1310@couchdb/committer/dch)
[03:07:09] *** Joins: pusewic|away__ (sid2036@id-2036.lymington.irccloud.com)
[03:11:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:14:30] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[03:17:48] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Client Quit)
[03:17:48] *** Quits: finsternis (~X@23.226.237.192) (Ping timeout: 240 seconds)
[03:18:43] *** Quits: shodan45 (~quassel@107.161.22.155) (Ping timeout: 256 seconds)
[03:40:33] *** Quits: simontime (~simontime@irc.simonti.me) (Ping timeout: 256 seconds)
[03:40:42] *** Joins: simontime (~simontime@irc.simonti.me)
[03:40:52] *** Joins: phroa` (~phroa@user/phroa)
[03:41:07] *** Quits: phroa (~phroa@user/phroa) (Ping timeout: 256 seconds)
[03:41:09] *** Quits: masoudd_ (~masoudd@user/masoudd) (Read error: Connection reset by peer)
[03:49:24] *** Quits: bozo_ (~bozo@188.252.191.180) (Ping timeout: 240 seconds)
[03:52:57] *** Quits: Snetry (~snetry@dslb-188-101-117-082.188.101.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:54:36] *** Joins: Snetry (~snetry@dslb-178-006-042-208.178.006.pools.vodafone-ip.de)
[03:55:35] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[03:55:44] *** Joins: bindu_ (~bindu@user/bindu)
[03:57:42] *** bindu_ is now known as bindu
[03:57:53] *** Joins: marler8997_ (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[03:57:53] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (Read error: Connection reset by peer)
[04:03:46] *** Joins: bozo (~bozo@188.252.184.56)
[04:10:12] *** Quits: bozo (~bozo@188.252.184.56) (Ping timeout: 240 seconds)
[04:18:24] *** Quits: yeti (~username@user/yeti) (Ping timeout: 250 seconds)
[04:24:17] *** Joins: bozo (~bozo@188.252.186.73)
[04:48:35] *** Joins: Rokkuman (~mega4453@201.248.146.63)
[04:50:37] *** Joins: yeti (~username@user/yeti)
[04:54:20] *** Quits: moog (~moog@107.77.244.68) (Remote host closed the connection)
[04:56:49] *** Joins: moog (~moog@107.77.244.68)
[05:03:40] *** Quits: cabal704 (~cabal704@user/cabal704) (Quit: WeeChat 3.4)
[05:06:29] *** Joins: ltriant (~ltriant@118.102.122.246)
[05:14:36] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 240 seconds)
[05:27:06] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:30:54] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3)
[06:01:48] *** Quits: Nulo (~Nulo@user/nulo) (Ping timeout: 240 seconds)
[06:33:36] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 272 seconds)
[06:53:15] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:00:44] *** Joins: shodan45 (~quassel@107.161.22.155)
[07:05:09] <andrewrk> check it out: as of 02902cc099d, our Windows CI depends on neither MSVC, nor cmake, nor MSYS
[07:05:15] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 240 seconds)
[07:05:53] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[07:06:13] <andrewrk> it's just some powershell and `zig build`
[07:08:49] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Read error: Connection reset by peer)
[07:09:19] *** Joins: keyehzh (~keyehzh@user/keyehzh)
[07:11:55] *** Joins: cr1901_ (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[07:12:03] *** Quits: keyehzh (~keyehzh@user/keyehzh) (Remote host closed the connection)
[07:12:31] *** Quits: cr1901_ (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c) (Remote host closed the connection)
[07:13:00] *** Quits: frmdstryr (~jrm@172.58.203.78) (Ping timeout: 240 seconds)
[07:22:14] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:11fa:8388:fcba:4178) (Quit: Leaving)
[07:22:34] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[07:33:02] *** Joins: masoudd (~masoudd@user/masoudd)
[07:41:22] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 272 seconds)
[07:48:27] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[08:13:17] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:d08e:72ac:8747:41f3) (Ping timeout: 240 seconds)
[08:16:12] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 272 seconds)
[08:26:32] *** Quits: dmh (~dmh@user/dmh) (Quit: ZNC - https://znc.in)
[08:32:36] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[08:35:14] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[08:37:44] *** Quits: Arnavion (arnavion@user/arnavion) (Ping timeout: 272 seconds)
[08:38:41] *** Joins: Arnavion (arnavion@user/arnavion)
[08:41:47] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[09:24:35] *** Quits: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles) (Ping timeout: 240 seconds)
[09:37:30] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:52:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[10:25:05] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9plitnrwpps33pp7an4l.ipv6.telus.net)
[10:25:21] *** Quits: breavyn (~breavyn@user/breavyn) (Ping timeout: 245 seconds)
[10:25:54] *** Joins: breavyn (~breavyn@user/breavyn)
[10:27:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:40:15] *** Joins: ehammarstrom_ (~ehammarst@62-20-203-39-no182.tbcn.telia.com)
[10:43:46] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[10:50:35] *** Joins: lehmrob (~Thunderbi@business-176-095-223-081.static.arcor-ip.net)
[10:51:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[10:55:33] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Client Quit)
[11:01:36] *** Parts: glowcoil_ (sid3405@2a03:5180:f::d4d) ()
[11:11:28] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[11:13:18] *** Joins: finsternis (~X@23.226.237.192)
[11:24:39] <motiejus> how do I cast `[]const u8` to `[]const KV`, when KV is a simple 2-byte struct (I am reading and writing to/from a file)?
[11:25:01] <ikskuh> is KV extern?
[11:25:09] <motiejus> no
[11:25:12] <ikskuh> andrewrk: sweet
[11:25:18] <motiejus> it's a packed struct
[11:25:28] <ikskuh> ah, why that?
[11:26:28] <motiejus> actually, I will need to convert `[*c]` (plus I know the length) to `[]const KV`
[11:26:42] <motiejus> but I am not there yet -- I am currently writing unit tests that just have a `[]const u8`
[11:26:59] <motiejus> i.e. I will need to interpret a C pointer and a length to a zig's packed struct
[11:27:51] <ikskuh> motiejus: still the question: why using packed struct instead of extern struct?
[11:28:02] <ikskuh> extern is typically the right thing when interfacing C
[11:28:15] <ikskuh> especially when you have two byte-sized elements
[11:28:56] <motiejus> hm. C will never see that struct
[11:29:11] <motiejus> C will provide me with a piece of memory, and zig needs to interpret it
[11:30:47] <motiejus> and this is how I interpret the docs: if I don't need to pass the struct to C, I shouldn't use `extern struct`
[11:32:03] *** Joins: MajorBiscuit (~MajorBisc@c-001-018-023.client.tudelft.eduvpn.nl)
[11:33:03] <motiejus> looks like I needed `@bitCast`
[11:35:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[11:41:00] *** Quits: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22) (Ping timeout: 240 seconds)
[11:42:44] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:44:34] <ikskuh> nah, this isn't a goo interpretation imho
[11:44:56] <ikskuh> if C never sees the memory, you neither need extern nor packked
[11:45:01] <ikskuh> *packed
[11:46:32] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[11:48:48] *** Joins: dmh (~dmh@pclmulqdq.dev)
[11:48:48] *** Quits: dmh (~dmh@pclmulqdq.dev) (Changing host)
[11:48:48] *** Joins: dmh (~dmh@user/dmh)
[11:53:25] *** Joins: tomku (~tomku@user/tomku)
[11:53:41] <motiejus> the struct is `const ShellIndex = packed struct { offset: u10, len: u6 }` ; since the members are not byte-aligned, I think I need a guaranteed memory layout?
[11:53:57] *** Quits: dmh (~dmh@user/dmh) (Quit: rip)
[11:54:14] <motiejus> though by simply removing `packed` keeps the unit tests passing. That's strange, given my interpretation of the docs
[11:57:27] <ikskuh> if you remove packed, the struct will be 32 bit large instead of 16
[11:58:51] *** Joins: dmh (~dmh@user/dmh)
[12:00:34] <motiejus> so I do need packed then to keep it's size under control. Thanks.
[12:04:19] *** Quits: dmh (~dmh@user/dmh) (Quit: rip)
[12:07:48] <ikskuh> ah, yeah. i thought you have two byte sized items
[12:07:49] *** Joins: dmh (~dmh@user/dmh)
[12:08:38] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[12:13:24] *** Quits: dmh (~dmh@user/dmh) (Quit: rip)
[12:14:13] *** Joins: dmh (~dmh@user/dmh)
[12:19:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:19:26] <motiejus> ack. And the unit tests worked, because I used the same struct for both reading and writing it.
[12:29:00] *** Joins: bindu (~bindu@user/bindu)
[12:31:11] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[12:31:36] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[12:32:19] *** Joins: bindu (~bindu@user/bindu)
[12:39:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[12:40:53] *** Quits: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03) (Remote host closed the connection)
[12:42:04] *** Joins: wallacer (~quassel@2001:bc8:1824:9a:cafe:babe:b00b:aa03)
[12:50:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[12:53:10] *** Joins: rv1sr (~rv1sr@user/rv1sr)
[13:14:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:21:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[13:32:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[13:34:37] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[13:38:30] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[13:48:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[13:56:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:57:11] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c) (Quit: Leaving)
[13:57:22] *** Joins: Guest84 (~Guest84@64.225.106.237)
[13:57:28] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[13:58:05] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c) (Client Quit)
[13:58:30] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[13:59:28] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c) (Remote host closed the connection)
[13:59:49] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[14:02:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[14:04:05] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c) (Client Quit)
[14:04:18] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:f117:a7a8:6345:d55c)
[14:05:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Client Quit)
[14:10:42] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:11:54] *** Joins: megaman1237 (~mega4453@201.248.146.63)
[14:11:58] *** Quits: Rokkuman (~mega4453@201.248.146.63) (Read error: Connection reset by peer)
[14:13:00] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[14:19:55] <ifreund> andrewrk: I managed to match the generated instructions for the C code I was porting exactly (aside from irrelevant ordering) so the generated code for @intCast() on vectors seems fine :)
[14:25:05] *** Quits: Guest84 (~Guest84@64.225.106.237) (Quit: Client closed)
[14:27:55] <ifreund> andrewrk: with regards to #7605 I agree with LemonBoy, I like having the assertion and it's caught bugs in my code before
[14:28:48] <ifreund> I wouldn't mind making the @intCast(std.math.Log2Int, foo) implicit to the shift operation
[14:28:57] <plumeus> idk if it caught bugs in mine, but it bettered my understanding of the code and hasn't felt annoying to me yet.
[14:30:27] <ifreund> alternatively https://github.com/ziglang/zig/issues/509 would also help avoid the need to @intCast() in many cases I've seen depending on how smart the compiler gets with it
[14:31:18] <plumeus> Wouldn't log2 be unoptimal if you can assert that it can even be lower?
[14:32:22] <ifreund> the log2 of the lhs's int size is just what's always safe for the rhs of shift operations
[14:32:41] <ifreund> I'd say if you wanted to do further assertions you should just add those manually
[14:34:02] <plumeus> A person on Matrix wanted me to say this on the person's behalf:
[14:34:05] <plumeus> "the current behaviour enforces safe usage and an implicit @intCast is likely to increase unexpected bugs"
[14:36:48] <plumeus> Also, I feel like people might take the lazy path (or new users might not notice at all) for even smaller sizes.
[14:37:12] <plumeus> In the scenarios in which it matters, not explicitly casting it is a design flaw.
[14:38:12] <ifreund> even if shift operators preformed the @intCast implicitly it would still be safety checked
[14:38:36] <ifreund> but I agree that forcing the programmer to write it themselves forces them to think better about if it's actually correct or not
[14:41:57] <plumeus> If you want to do `@as(u32, 1) << @as(x, u32_value)` where `x` is meant to be , say, `u3`. If they take the implicit path and there's an error in their code that lets the value of x be above 8 but less than 32, they will essentially have faced a design flaw that would probably have been more preventable if done explicitly.
[14:42:07] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 256 seconds)
[14:42:11] <plumeus> But yeah, there's at least nothing inherently incorrect about that.
[14:44:59] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[14:55:45] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[15:06:14] <plumeus> Also, maybe somebody really wants `@truncate` and wouldn't notice until their first runtime error encounter.
[15:08:18] <ifreund> Yeah, I think making it implicit doesn't really fit with Zig's philosophy
[15:14:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[15:18:43] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[15:27:36] *** Quits: MajorBiscuit (~MajorBisc@c-001-018-023.client.tudelft.eduvpn.nl) (Ping timeout: 252 seconds)
[15:45:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[15:48:05] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-023.client.tudelft.eduvpn.nl)
[15:51:59] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9plitnrwpps33pp7an4l.ipv6.telus.net) ()
[16:00:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:00:58] *** Joins: frmdstryr (~jrm@172.58.203.78)
[16:05:24] *** Quits: frmdstryr (~jrm@172.58.203.78) (Ping timeout: 240 seconds)
[16:10:13] *** Joins: bindu (~bindu@user/bindu)
[16:28:23] *** Joins: cabal704 (~cabal704@user/cabal704)
[16:33:49] *** Joins: Nulo (~Nulo@user/nulo)
[16:40:41] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[17:01:17] *** Quits: masoudd (~masoudd@user/masoudd) (Quit: Leaving)
[17:15:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[17:28:02] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[17:34:42] *** Joins: terminalpusher (~terminalp@2a01:586:17b8:1:818f:ce01:8c61:94dd)
[17:36:12] *** Quits: megaman1237 (~mega4453@201.248.146.63) (Ping timeout: 240 seconds)
[17:36:35] *** Joins: arkurious (~arkurious@user/arkurious)
[17:41:03] *** Joins: WardBrian (~WardBrian@207.251.102.115)
[17:49:19] <WardBrian> Hi all, I'm testing out using zig cc and zig c++ as drop in compilers for a large C++ project (CmdStan). A lot of the build proceeds fine with only some warnings, but at the end when compiling the example model I get a strange error - https://gist.github.com/WardBrian/56d6715247cfcee6634fd102b54cb7e2
[17:59:19] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-023.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[18:02:03] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:03:26] <plumeus> https://github.com/stan-dev/cmdstan This project?
[18:03:39] <WardBrian> Yes
[18:03:54] <plumeus> Can't you just do `CXX="zig c++"` and then try running `make`?
[18:04:20] <plumeus> You did make sure the command you tried at least works for Clang, right?
[18:04:43] <WardBrian> Yes, clang and gcc are the officially supported compilers, and clang is used in the CI for the project
[18:05:06] <WardBrian> CXX=zig c++
[18:05:06] <WardBrian> CC=zig cc
[18:05:07] <WardBrian> TBB_CXX_TYPE=clang
[18:05:07] <WardBrian> PRECOMPILED_HEADERS=false
[18:05:08] <WardBrian> TBB_CC=zig cc
[18:05:08] <WardBrian> These are the variables I set in `make/local` after some testing
[18:06:09] <WardBrian> `make build` (which essentially just precompiles libraries) works fine, but building a model like the one in the examples folder (which is when linking etc really kick off) fails with the error in that gist
[18:09:49] <plumeus> Still cloning submodules, fun
[18:10:06] *** Joins: masoudd (~masoudd@user/masoudd)
[18:10:45] <WardBrian> The 'releases' pages have tarballs which avoid the entire history of the project getting cloned, otherwise it can be a big one
[18:13:56] <plumeus> Weird, running `make build` doesn't work for me because the header file names are off, seems like... I guess I need to try the release tarballs.
[18:14:16] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[18:14:32] *** Joins: keyehzh (~keyehzh@user/keyehzh)
[18:18:54] <plumeus> I got some linking error for `make build` with the release tarball too. Didn't set `TBB_CC`, maybe I needed to.
[18:21:18] <WardBrian> I think so, TBB_CXX_TYPE is used to set flags for IntelTBB, but it is also used to derive TBB_CC if it is not explicitly set
[18:21:45] <plumeus> Clang also gave me an error for me with that `bernoulli` example, weird.
[18:22:06] <plumeus> With `CC="clang" CXX="clang++"` on NixOS, which defaults to GCC.
[18:22:49] <plumeus> Well, Clang isn't (normally) installed on my system. So I wonder if it just used GCC then.
[18:23:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:24:05] <WardBrian> I've used both GCC and Clang to compile before, on Ubuntu 20.04
[18:25:56] <plumeus> Welp, I get like dozens of "undefined reference to `typeinfo for std::__1::<whatever>" with the tarball from released 3 days ago. Might be NixOS.
[18:26:17] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:27:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:27:27] <WardBrian> Thanks for trying. Have you ever seen an error like `ld.lld: error: examples/bernoulli/bernoulli.hpp:2: unknown directive: //`? I can't figure out why it's choking on a line comment like that
[18:28:15] <plumeus> I've not, with Clang. Just figured out I need to do `make clean-all` instead of `clean`, so I decided to try Zig again with `TBB_CC` set.
[18:28:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[18:28:47] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[18:29:50] <plumeus> Welp, it seems like I do need `PRECOMPILED_HEADERS=false`, but I did at least get it to build.
[18:30:43] <plumeus> yep, got the same error as you
[18:31:50] *** Joins: phaleth (~user@user/phaleth)
[18:32:16] <WardBrian> That's great, 'misery loves company' and all
[18:33:14] <plumeus> Tried removing the comment, and then it trips of `unknown directive: namespace`, fun
[18:33:16] *** Quits: terminalpusher (~terminalp@2a01:586:17b8:1:818f:ce01:8c61:94dd) (Remote host closed the connection)
[18:37:17] <WardBrian> I hadn't tried that yet, but good thought
[18:37:44] <plumeus> Can reproduce the error on Zig 0.9.0 and Zig master.
[18:37:47] <jcmoyer_> It seems zig c++ can't handle source files with a .hpp extension, it simply writes the contents of the header file to the output file. Then the linker uses that plaintext as input and fails.
[18:38:43] <plumeus> hahaha
[18:39:08] <WardBrian> Would that be considered a bug?
[18:39:40] <plumeus> Yeah, being able to compile C++ code is one of Zig's use-cases.
[18:39:53] <plumeus> If it's not a bug, it's definitely a well deserved "enhancement"
[18:40:15] <jcmoyer_> I'm not sure, it's not typical to compile headers, usually you compile source code that includes them
[18:41:12] <plumeus> Oh, yeah.
[18:41:40] <plumeus> But I presume GCC and Clang supports it?
[18:42:00] <plumeus> Unless cmdstan is doing something weird
[18:42:01] <jcmoyer_> Yeah, extensions don't really have any meaning
[18:45:18] <plumeus> lol, tried renaming the file to `.cpp` and got a different error about argument lists being too long
[18:45:19] <jcmoyer_> from a quick look it doesn't seem like zig handles .hpp, but it does handle .h, so I guess it's a bug
[18:47:45] <plumeus> https://github.com/ziglang/zig/blob/master/src/Compilation.zig#L4277
[18:47:46] <plumeus> yeah
[18:50:04] <dutchie> i like the punning of the enum literals for file extensions
[18:51:03] <plumeus> I wonder how hard it would be to just add `.hpp` support? Seems like this could fall under "contributor friendly"? idk
[18:51:56] <WardBrian> https://github.com/ziglang/zig/blob/baead472d7641bdd96130354bafadc1fb1ed223b/src/Compilation.zig#L4215 could be added here maybe?
[18:53:27] <plumeus> hmm, `.h` isn't a part of `hasCExt`
[18:53:39] <plumeus> I wonder if Zig actually can compile `.h`
[18:54:02] <jcmoyer_> it's handled here https://github.com/ziglang/zig/blob/baead472d7641bdd96130354bafadc1fb1ed223b/src/Compilation.zig#L4277-L4278 and https://github.com/ziglang/zig/blob/baead472d7641bdd96130354bafadc1fb1ed223b/src/Compilation.zig#L3874
[18:54:18] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[18:55:28] <plumeus> It's funny how `.hpp` outright aren't mentioned anywhere on this file.
[18:57:10] <WardBrian> It seems to me like adding .hpp as a valid option on that same dispatch would likely be 'obvious' fix (assuming it doesn't run into more problems after that)
[18:57:41] <WardBrian> I'm very new to zig so I'm not sure how difficult it would be for me to try it and bootstrap the compiler
[18:59:00] <ikskuh> i don't think we should allow compilation of header files
[18:59:13] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[18:59:46] <plumeus> Shouldn't Zig at least have parity between `.h` and `.hpp` treatment? I know very little about C, mind you.
[18:59:50] <ikskuh> at least not in the regular frontend (build-exe, build-lib, build-obj)
[19:00:09] <ikskuh> plumeus: h and hpp are both non-source files 
[19:00:36] <plumeus> Then why is `.h` mentioned? Does it need to be removed? `.hpp` isn't even mentioned at all.
[19:00:39] <ikskuh> even though they *usually* contain at least some code, most headers don't have anything to compile to
[19:00:59] *** Quits: lehmrob (~Thunderbi@business-176-095-223-081.static.arcor-ip.net) (Quit: lehmrob)
[19:01:02] <WardBrian> I'm not really a domain expert on either C or C++, I was just excited about the idea of a drop-in substitute for clang/gcc, which both do allow this
[19:01:26] <plumeus> Yeah, it's fine for `zig cc` or `c++` to have.
[19:01:39] <plumeus> `build-exe` are not "drop-ins"
[19:02:06] <ikskuh> WardBrian: oh
[19:02:18] <ikskuh> they do something very different from what the zig toolchain would do
[19:02:19] <WardBrian> yes, sorry for not being clear - I'm specifically concerned with `zig c++` here
[19:02:48] <ikskuh> what happens if you pass header files to clang/gcc is compiling a precompiled header
[19:03:00] <ikskuh> which is something i haven't seen in the zig world yet
[19:03:19] <ikskuh> to support this properly, i think we have to establish a whole bunch of rules and logic
[19:03:36] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[19:04:06] <ikskuh> because the output of "compiling" a header isn't a object file
[19:04:10] <ikskuh> or a executable
[19:04:13] <WardBrian> I think that `-x c++` is supposed to cause it to compile like a .cpp file, no?
[19:04:23] <WardBrian> E.g. to a normal object file
[19:04:50] <ikskuh> WardBrian: yes, but you can pass "-x c++ foo.lolcat" as well
[19:05:06] <ikskuh> if you pass with without -x, you precompile the header to a GCH file
[19:05:10] <WardBrian> The final portion of the command that is failing is `-c  -x c++ -o examples/bernoulli/bernoulli.o examples/bernoulli/bernoulli.hpp`
[19:05:45] <ikskuh> hm
[19:05:54] <ikskuh> that might be a problem in the -x handling then
[19:06:49] <WardBrian> MRE:
[19:06:49] <WardBrian> file: test.hpp
[19:06:50] <WardBrian> / test
[19:06:50] <WardBrian> int main(void){
[19:06:51] <WardBrian>   return 1;
[19:06:51] <WardBrian> }
[19:06:52] <WardBrian> $ zig c++ -x c++ test.hpp
[19:06:52] <WardBrian> ld.lld: error: test.hpp:1: unknown directive: //
[19:06:53] <WardBrian> >>> // test
[19:06:53] <WardBrian> >>> ^
[19:07:08] <WardBrian> supposed to be // test not / test, copy/paste error on my part
[19:08:00] <WardBrian> No matter what the name is, test.foo, etc, same failure
[19:08:12] <jcmoyer_> https://github.com/ziglang/zig/blob/baead472d7641bdd96130354bafadc1fb1ed223b/src/main.zig#L1325-L1335 this is probably where it's actually failing
[19:08:13] <WardBrian> Renaming to cc, cpp, or one of the 'official' endings works as expected
[19:08:15] *** jcmoyer_ is now known as jcmoyer
[19:09:21] <WardBrian> Should I open an issue then? It seems like the -x flag does almost nothing in practice?
[19:10:17] <ikskuh> jcmoyer: that's the build-exe front if i'm not mistaken and not the cc/c++ frontned
[19:10:36] <ikskuh> WardBrian: yeah, i think you should open an issue on this, related to zig cc
[19:11:43] <jcmoyer> this function looks like it's responsible for both build-exe and cc/c++
[19:12:03] <plumeus> The logic should be separated then, I guess
[19:12:27] <plumeus> btw, what would happen if somebody attempted to pass `-x` or similar to `build-exe`?
[19:12:42] <plumeus> Just be rejected?
[19:13:18] <jcmoyer> It's already separated, just in different branches
[19:15:02] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Remote host closed the connection)
[19:15:42] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[19:16:47] <WardBrian> https://github.com/ziglang/zig/issues/10915 issue here
[19:17:15] <WardBrian> Thanks for all the help finding the problem
[19:18:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[19:35:27] *** Joins: mikezackles (~mikezackl@gateway/tor-sasl/mikezackles)
[19:38:29] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Quit: leaving)
[19:42:11] *** Quits: WardBrian (~WardBrian@207.251.102.115) (Ping timeout: 256 seconds)
[19:42:28] *** Joins: lehmrob1 (~Thunderbi@business-176-095-223-081.static.arcor-ip.net)
[19:42:50] *** Parts: lehmrob1 (~Thunderbi@business-176-095-223-081.static.arcor-ip.net) ()
[19:51:04] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: WeeChat 3.4)
[19:58:56] *** Joins: notzmv (~zmv@user/notzmv)
[20:00:28] *** Quits: ehammarstrom_ (~ehammarst@62-20-203-39-no182.tbcn.telia.com) (Ping timeout: 272 seconds)
[20:05:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[20:10:14] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[20:10:31] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[20:16:26] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:29:03] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[20:32:07] *** Quits: skipwich (~skipwich@user/skipwich) (Remote host closed the connection)
[20:32:37] *** Joins: skipwich (~skipwich@user/skipwich)
[20:42:17] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[20:45:21] *** Quits: skipwich (~skipwich@user/skipwich) (Ping timeout: 256 seconds)
[20:55:47] *** Joins: skipwich (~skipwich@user/skipwich)
[20:58:02] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[21:05:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[21:07:56] *** Joins: WardBrian (~WardBrian@207.251.102.115)
[21:08:16] *** Quits: WardBrian (~WardBrian@207.251.102.115) (Client Quit)
[21:09:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:09:25] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:09:40] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:10:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[21:10:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:11:17] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[21:14:44] *** Joins: xackus (~xackus@185.15.0.3)
[21:27:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:28:26] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:34:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[21:37:06] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:43:01] *** Joins: jemius (~imperator@200116b82de5ec001b733599ae75569c.dip.versatel-1u1.de)
[21:47:55] *** Joins: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d)
[21:55:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:02:06] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[22:02:23] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[22:02:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[22:12:08] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:14:13] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2155:642c:a2e:a545)
[22:21:05] *** Quits: ofelas_ (~ofelas@ti0071a400-5198.bb.online.no) (Remote host closed the connection)
[22:23:15] *** Joins: ofelas (~ofelas@ti0071a400-5198.bb.online.no)
[22:26:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 252 seconds)
[23:16:24] *** Joins: frmdstryr (~jrm@172.58.203.78)
[23:34:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:47:48] *** Quits: rgrinberg (~textual@2806:101e:7:5da4:fd01:1255:92ec:7d9d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:48:15] *** Quits: phaleth (~user@user/phaleth) (Quit: WeeChat 2.8)
[23:50:51] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[23:52:37] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:55:50] <frmdstryr> Is there a way to get typeInfo of a struct field by its name? I tried std.meta.fieldInfo(MyStruct, "name") but that expects an enum
[23:56:45] *** Joins: ur5us (~ur5us@2406:e002:6804:8a01:fe29:d3cc:a0c3:c22)
[23:57:24] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 240 seconds)
[23:57:39] <luuk> You'll have to create your own wrapper function that loops over all fields and then returns the typeInfo of said field when it matches the given name. std.meta doesn't currently provide this.
[23:59:30] <frmdstryr> Ah, ok thanks!
[23:59:38] <luuk> No problem :)
