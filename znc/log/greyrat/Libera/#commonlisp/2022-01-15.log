[00:03:24] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[00:04:40] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:07:08] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[00:09:34] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:12:30] <mfiano> Josh_2: That's more than an off by one error.
[00:14:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[00:16:50] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[00:20:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[00:31:39] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[00:32:43] *** Joins: karlosz (~karlosz@47.151.136.69)
[00:33:51] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[00:37:15] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:38:23] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[00:38:41] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[00:42:52] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[00:44:23] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[00:44:36] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[00:47:13] *** Joins: thomp (~thomp@162.212.34.219)
[00:47:50] *** Quits: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233) (Quit: Leaving)
[00:48:25] *** Quits: varjag (~user@188.95.247.248) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[00:52:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a) (Ping timeout: 250 seconds)
[00:52:47] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[00:53:11] *** Joins: shka (~herr@109.231.0.226)
[00:56:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:02:43] <Josh_2> Rip
[01:03:34] *** Joins: IPmonger (~IPmonger@palo-guest-nat-1.uphs.upenn.edu)
[01:04:34] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[01:04:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[01:04:47] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[01:05:12] *** Joins: Alfr (~Alfr@user/alfr)
[01:05:16] *** Quits: IPmonger (~IPmonger@palo-guest-nat-1.uphs.upenn.edu) (Remote host closed the connection)
[01:05:17] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:09:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[01:09:19] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:09:55] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[01:10:09] *** Joins: IPmonger (~IPmonger@palo-guest-nat-1.uphs.upenn.edu)
[01:11:20] *** Quits: IPmonger (~IPmonger@palo-guest-nat-1.uphs.upenn.edu) (Remote host closed the connection)
[01:17:15] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[01:20:39] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[01:21:57] *** Quits: dra (~dra@2a04:4540:6409:9600:3465:7864:114:561c) (Quit: Leaving)
[01:29:15] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[01:29:28] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[01:30:11] *** Joins: morganw (~user@80.225.24.132)
[01:32:40] *** Quits: thomp (~thomp@162.212.34.219) (Ping timeout: 250 seconds)
[01:39:26] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[01:39:30] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:39:39] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[01:40:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b)
[01:44:49] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[01:48:57] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[01:49:57] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[01:52:30] *** Joins: wataru (~wataru@p257011-mobac01.tokyo.ocn.ne.jp)
[01:52:30] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[01:53:07] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[01:57:37] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[01:57:50] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[02:01:35] *** Quits: wataru (~wataru@p257011-mobac01.tokyo.ocn.ne.jp) (Quit: -a- IRC for Android 2.1.59)
[02:02:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:09:38] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[02:09:55] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[02:11:30] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[02:11:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:13:05] *** Quits: pve (~pve@188-67-147-47.bb.dnainternet.fi) (Quit: leaving)
[02:16:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[02:18:10] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:c53f:d83a:dd8d:27ab) (Ping timeout: 250 seconds)
[02:19:18] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[02:19:31] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[02:31:48] *** Joins: karlosz (~karlosz@47.151.136.69)
[02:44:06] *** anticomputer_ is now known as anticomputer
[02:45:52] *** Joins: semz_ (~semz@2001:9e8:4bc3:b800:ad17:5967:d69a:4e63)
[02:45:52] *** Quits: semz_ (~semz@2001:9e8:4bc3:b800:ad17:5967:d69a:4e63) (Changing host)
[02:45:52] *** Joins: semz_ (~semz@user/semz)
[02:48:30] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[02:51:54] *** Joins: kevingal (~quassel@37.228.202.92)
[02:54:16] *** Joins: gaqwas (~john@dynamic-095-114-023-134.95.114.pool.telefonica.de)
[02:56:04] *** Quits: cosimone (~user@93-44-186-159.ip98.fastwebnet.it) (Remote host closed the connection)
[03:05:54] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Remote host closed the connection)
[03:08:56] *** Joins: jmes (~james@node-1w7jra26acy6dd0v7okm8us5g.ipv6.telus.net)
[03:13:43] <jmes> When I use the executable of my program (built with asdf:make & sbcl), my (format t "...") output only gets displayed in a terminal after I exit the program. In SLIME it's fine. I'm pretty clueless so any ideas would be appreciated.
[03:15:54] <jmes> for example I have a prompt like (format t "Enter something:") and then a read-line. Even though I can enter something to be read and everything else works as intended I won't see the prompt text until I SIGINT the program
[03:15:59] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[03:16:13] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[03:17:42] <Alfr> jmes, force-output
[03:18:16] <Alfr> jmes, or even finish-output, since you're querying.
[03:24:29] <pjb> jmes: -1 consider using *query-io* instead of *standard-input*/*standard-output*
[03:24:42] <pjb> jmes: always use finish-output (or force-output).
[03:24:48] <pjb> 2- ^
[03:29:11] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[03:29:24] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[03:30:25] <jmes> Thanks pjb & Alfr, I was not aware of these functions and I'm looking into them now :)
[03:37:28] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[03:40:50] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e)
[03:44:59] *** Quits: _ante_ (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[03:45:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b) (Ping timeout: 240 seconds)
[03:48:22] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[03:50:03] *** Joins: akoana (~ah@user/akoana)
[03:53:39] *** Quits: gaqwas (~john@dynamic-095-114-023-134.95.114.pool.telefonica.de) (Ping timeout: 256 seconds)
[03:59:17] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzzâ€¦)
[03:59:51] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:03:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[04:13:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:17:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[04:19:14] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[04:30:24] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[04:31:27] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[04:32:03] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[04:34:06] *** Joins: notzmv (~zmv@user/notzmv)
[04:38:26] *** Joins: alvaro121 (~aa@201.230.126.66)
[04:42:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3)
[04:43:37] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[04:46:13] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:edf5:da40:98ab:ea5e) (Ping timeout: 240 seconds)
[04:59:22] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[04:59:35] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[05:00:10] *** Joins: copec_ (~copec@schrodbox.unaen.org)
[05:00:15] *** Joins: antoszka_ (sid528518@id-528518.uxbridge.irccloud.com)
[05:00:18] *** Joins: jsatk__ (sid304796@id-304796.helmsley.irccloud.com)
[05:00:26] *** Joins: mgxm (~mgxm@user/mgxm)
[05:00:31] *** Joins: hirez (~hirez@104.128.237.40)
[05:02:09] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[05:02:13] *** Joins: |3b|` (bbb@user/3b/x-2324788)
[05:03:10] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[05:03:15] *** Joins: gin (~gin@user/gin)
[05:03:35] *** Joins: dale_ (dale@user/dale)
[05:03:53] *** Joins: greaser|q (greaser@antihype.space)
[05:04:21] *** Joins: White__Flame (~quassel@user/white-flame/x-6930243)
[05:04:53] *** Joins: Guest4269 (~mal@ns2.wyrd.be)
[05:05:24] *** Joins: antoni (~antoni@rozalia.antoszka.pl)
[05:05:29] *** Joins: drakonis1 (drakonis@user/drakonis)
[05:09:05] *** Quits: jsatk_ (sid304796@id-304796.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: gin_ (~gin@2400:8904::f03c:92ff:fe28:e8a7) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: dale (dale@user/dale) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: epony (~epony@user/epony) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 240 seconds)
[05:09:06] *** copec_ is now known as copec
[05:09:06] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b) (Ping timeout: 240 seconds)
[05:09:06] *** antoszka_ is now known as antoszka
[05:09:06] *** dale_ is now known as dale
[05:09:06] *** Quits: Arcsech (~arcsechma@2001:470:69fc:105::1:797) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: ogamita` (~t@hubble.informatimago.com) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: mgxm_ (~mgxm@user/mgxm) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: |3b| (bbb@user/3b/x-2324788) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: hirez- (~hirez@2602:ffc5:20::1:512e) (Ping timeout: 240 seconds)
[05:10:00] *** Quits: jmes (~james@node-1w7jra26acy6dd0v7okm8us5g.ipv6.telus.net) (Remote host closed the connection)
[05:10:06] *** Joins: epony (~epony@user/epony)
[05:12:15] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[05:15:05] *** drakonis1 is now known as drakonis
[05:16:04] *** Joins: empwilli (~empwilli@faui48e.informatik.uni-erlangen.de)
[05:16:16] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[05:19:31] *** Joins: Jing (~hedgehog@115.207.57.60)
[05:20:07] *** Quits: Jing (~hedgehog@115.207.57.60) (Client Quit)
[05:20:16] *** Joins: Spawns_Carpet[m] (~inceptor-@2001:470:69fc:105::1:298b)
[05:20:20] *** Joins: Arcsech (~arcsechma@2001:470:69fc:105::1:797)
[05:20:46] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[05:29:33] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[05:29:46] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[05:33:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3) (Ping timeout: 240 seconds)
[05:34:55] *** Quits: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net) (Quit: Leaving)
[05:36:34] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1015-static.midco.net)
[05:45:08] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[05:47:32] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[05:48:04] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77)
[05:49:14] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[05:49:27] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[05:50:11] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[06:08:42] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[06:14:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:15:55] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[06:15:55] *** Joins: greaser|q (greaser@user/greasemonkey)
[06:16:58] *** greaser|q is now known as GreaseMonkey
[06:18:25] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[06:18:38] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[06:19:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[06:21:06] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzzâ€¦)
[06:23:07] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[06:27:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Ping timeout: 240 seconds)
[06:27:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:38:34] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[06:49:18] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:51:55] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[06:54:17] *** Joins: pillton (~user@58-6-240-187.tpgi.com.au)
[06:55:49] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[06:58:23] *** Quits: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113) (Ping timeout: 256 seconds)
[07:08:03] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[07:09:14] <Josh_2> I am getting odd behaviour with a macro
[07:10:41] <Josh_2> Ofcourse now I cannot replicate it :facepalm:
[07:10:44] <pillton> Bike: I was referring to operations involving AREF like (dotimes (i (length array)) (incf (aref array i))) where there is nothing you can do to hint that the index given to AREF and (SETF AREF) is always valid for ARRAY (well, something more sensible than (declare (optimize (speed 3) (safety 0)))). A "sufficiently smart" compiler could possibly derive that example, but what about more operations for more complex data structures e.g. a
[07:10:45] <pillton> heap? One could argue that the cost of the index check is negligble compared to some of the heap operations and thus not worth exploring.
[07:10:45] <Colleen> pillton: Bike said 13 hours, 36 minutes ago: "I think there should be another operator or operators introduced which either avoid using AREF or ensure that every call to AREF does not require checking its arguments." what do you mean?
[07:11:39] <pillton> Bike: Perhaps a better example is (dotimes (i (length array2)) (incf (aref array1 (aref array2 i)))).
[07:12:27] <Josh_2> Well idk, seems to be working now
[07:13:05] <Bike> pillton: ahh. i understand. that gets tricky if you contemplate concurrency though
[07:13:14] <Bike> clearly we just need to extend the language with dependent types
[07:13:48] <pillton> Bike: I get the concurrency argument, but I think there is something more fundamental that needs to be addressed.
[07:15:51] <pillton> Maybe the problem goes away if you define operations which operate on "blocks" with a fixed length i.e. simd operations?
[07:16:09] *** Joins: |smlckz| (smlckz@user/smlckz)
[07:17:02] <pillton> But there has to be a safer way to implement optimize operations like matrix multiplication, SVD, proximity operators, heaps without resorting to (declare (optimize (speed 3) (safety 0))).
[07:17:09] <|smlckz|> hi, how can i enable syntax highlighting in the slime repl?
[07:17:54] *** Quits: Catie (~user@user/catie) (Quit: wrong client)
[07:17:58] <yottabyte> how do you all feel about this? https://github.com/cl-boost/threading. I found such macros useful in clojure
[07:18:18] *** Joins: Catie (~user@user/catie)
[07:24:06] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 250 seconds)
[07:31:12] <beach> Good morning everyone!
[07:35:53] <ns12> Good morning beach.
[07:37:09] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[07:40:52] <Bike> pillton: like actually dependent types though? maybe?
[07:42:52] <pillton> Bike: I'd have to look up what that means exactly.
[07:43:39] <Bike> pillton: short version would be like, the ability to declare that an array's length is some other variable.
[07:44:17] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:44:37] <Bike> types that depend on variables.
[07:48:03] <Spawns> lisp macros can call any functions eval'd before the macro definition yeah? how does that work?
[07:48:12] <pillton> Bike: Ok. Right.
[07:48:53] <Spawns> i am at the point where the next thing i need to implement in my lisp is macros, but I'm not sure how to deal with generating bytecode and expanding macros that depend on programs, which are bytecode
[07:49:43] <Spawns> i am thinking to compile and interpreter a single expression at a time, and the compiler is going to have to be able to pass in data to be expanded while compiling
[07:50:06] <pillton> Bike: It sounds complicated.
[07:50:14] <pillton> looks*
[07:50:29] <Bike> Spawns: generally, the lisp compiler has access to a lisp interpreter or other way to evaluate lisp code. it then just calls the macro function on the code.
[07:50:41] <Bike> pillton: it is. makes your type system uncomputable and stuff. but lisp's already is, so hey
[07:51:03] <Bike> and i think it's fairly easy in particular cases, like this array thing
[07:51:24] <Bike> "this array is x long, so if (0 <= y < x), (aref array y) doesn't have to bounds check"
[07:51:32] <moon-child> Bike: why would you need an interpreter?  Aside maybe from bootstrapping, I see no reason why you could not compile the macro body
[07:51:49] <Bike> moon-child: "or other way"
[07:52:30] <moon-child> sure.  But given you have a compiler anyway, it seems strange not to use it
[07:53:14] <Bike> i didn't mean to say you couldn't use it. i am trying to explain this to someone who is perhaps not familiar with the internals of lisp implementations.
[07:54:14] <Spawns> that makes sense Bike !
[07:54:26] <Spawns> doesn't sound so bad
[07:55:17] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[07:56:29] <beach> Spawns: It shouldn't matter whether your Lisp functions are implemented as bytecodes, primitive functions in assembly, interpreted functions, native code, or anything else.  A macro is expanded by a call to the macro function which is given an S-expression (and an environment in Common Lisp), and which returns another S-expression.
[08:00:09] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 256 seconds)
[08:00:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:08:25] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[08:13:01] <Spawns> if it was a treewalk interpreter it would be a little easier i think
[08:13:03] *** Joins: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233)
[08:13:36] <beach> No, calling a macro function would involve the exact same work then.
[08:13:53] <beach> Some other part of the system may be simplified, but not that one.
[08:20:30] <beach> Spawns: It is very hard to help you with this thing, because you are implementing a language for which we have no specification.  So we have no way of knowing what kind of restrictions or generalizations your language has compared to Common Lisp.  The best thing we can do is to let you know how things would be done in a typical Common Lisp implementation.
[08:21:39] <Spawns> thats actually very helpful beach
[08:21:59] <Spawns> i have so far been following the scheme spec fairly loosely
[08:22:14] <Bike> scheme macros are pretty different from common lisp ones.
[08:22:19] <moon-child> _the_ scheme spec? :)
[08:22:24] <Spawns> but i think hygienic macros will be too difficult for me to implement
[08:22:29] <beach> moon-child: Heh!
[08:22:41] <Spawns> the most recent version r7rs
[08:22:48] <Spawns> the "small" subset
[08:22:50] <moon-child> _the_ r7rs? :)
[08:22:55] <beach> Spawns: So with that in mind, in Common Lisp, a macro function is just an ordinary function that takes two arguments, a form and an environment object.  The function builds a new form and returns it.  It doesn't matter, then, whether the macro function is coded in assembly or something else.
[08:23:14] <Spawns> that makes a lot of sense!
[08:23:30] <Spawns> for some reason I was thinking it was going to be a lot more difficult
[08:24:25] <Spawns> once I have macros implemented and working I will have an actually capable lisp!
[08:25:04] <Spawns> the amount of work that goes into making a cl implementation must be intense
[08:25:23] <beach> Spawns: You can check this for yourself in a Common Lisp implementation: (funcall (macro-function 'when) '(when foo bar baz) nil)
[08:25:37] <Josh_2> Okay I have found that annoying bug again, ofcourse it occurred when I deployed my application to my VPS
[08:25:55] <beach> Spawns: Yes, I am well aware of the amount of work required. :)
[08:27:27] <Josh_2> Okay https://plaster.tymoon.eu/view/2871#2871 here I have at the top my macro, then in the middle the function using the macro and then at the bottom a condition that is signalled when evaluating a function (in a different package) that is using the function in the middle
[08:27:39] *** Joins: semz (~semz@2001:9e8:4bc5:b000:eb51:9f2e:6e0b:33f)
[08:27:39] *** Quits: semz (~semz@2001:9e8:4bc5:b000:eb51:9f2e:6e0b:33f) (Changing host)
[08:27:39] *** Joins: semz (~semz@user/semz)
[08:28:29] <Josh_2> Not sure why I am getting this error, the reason I had to use keys is an attempt to make conversion from destructuring-bind to with-hash-keys easier
[08:29:17] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 250 seconds)
[08:30:26] <Josh_2> It was working earlier (ofcourse :( )
[08:31:58] <Josh_2> if I invoke rooms-in-a-space directly I get the same condition
[08:33:36] <Josh_2> hmmm I wonder if its because of what I think
[08:35:12] <Josh_2> and it was.... I was using the macro before it was defined :facepalm:
[08:38:10] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[08:38:32] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[08:40:28] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[08:44:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:45:23] <asarch> If I have: '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")), how could I remove (:id 2 :name "pizza")?
[08:46:15] <asarch> Well, actually, how could I remove '((:id 2 :name "pizza") (:id 1 :name "taco"))?
[08:50:06] <Josh_2> You can use remove with key?
[08:51:36] <moon-child> (remove-if (lambda (x) (and (= 2 (getf x :id)) (equal "pizza" (getf x :name)))))
[08:51:59] <moon-child> obviously could simplify if you only care about id or name matching, not both
[08:52:33] <moon-child> to remove multiple, probably transpose and then use MEMBER
[08:53:21] <moon-child> could use EQ if you guarantee structure-sharing ahead-of-time.  Or use a hash table if you have a bunch of elements to remove
[08:53:55] <asarch> Then I could have  '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")) and then a list of ids '(1 2)
[08:54:23] <asarch> (loop for element in '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")) do (remove-if ... <- ?
[08:54:28] <moon-child> sure.  Then I would say (remove-if (lambda (x) (member x ids)))
[08:54:38] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[08:54:42] <Josh_2> Instead of getf you can use (destructuring-bind ..) it'll look nicer
[08:54:55] <moon-child> err (member (getf x :id) ids)...
[08:55:12] <Josh_2> asarch: you would be better off using when .. collect
[08:55:13] <moon-child> I am not sure why you have a loop there
[08:55:38] <asarch> How would you do it?
[08:56:02] <moon-child> (loop for x in ... unless (member (getf x :id) ids) collect x)
[08:56:07] <moon-child> another way, using loop
[08:56:08] <Josh_2> yeh
[08:56:39] <moon-child> but I prefer remove-if in this case.  Imo loop is better for complex things
[08:57:09] <moon-child> remove-if says exactly what it does: you're removing some elements from a list.  It is more specific
[08:58:53] *** Joins: triffid (~triffid@gateway/tor-sasl/triffid)
[08:58:59] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[09:02:52] <asarch> But how can I pass the list of the elements I want to delete?: (remove-if (lambda (x) (member x '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")))))
[09:04:01] <moon-child> (remove-if (lambda ...) '((:id ...)...))
[09:04:02] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 240 seconds)
[09:05:30] <moon-child> oh, sorry, list of items youw ant to delete
[09:05:42] <moon-child> presumably you would close over it
[09:05:51] <asarch> ?
[09:06:45] <moon-child> (let ((ids-to-delete ...)) (remove-if (lambda (x) (member (getf x :id) ids-to-delete)) list))
[09:07:31] <moon-child> ids-to-delete is available to the function you create, so we say that the function closes over ids-to-delete
[09:08:39] <akoana> just for fun, what about (set-difference '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")) '((x 1) (x 2)) :key #'second :test #'equal)
[09:09:46] <asarch> (remove-if (lambda (x) (member (getf x :id) '(1 3))) '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")))
[09:10:00] <asarch> Bingo!
[09:10:10] <moon-child> akoana: cute
[09:10:27] <asarch> Thank you guys! Thank you very much! :-)
[09:10:39] <moon-child> akoana: nb. Don't need equal; the default (eql) will serve just fine
[09:10:56] <akoana> ah, right
[09:11:05] <akoana> thanks :)
[09:12:14] * moon-child considers pointing out that j's 'hook' combinator obviates the misdirection, decides against it
[09:12:39] <asarch> (set-difference '((:id 1 :name "taco") (:id 2 :name "pizza") (:id 3 :name "beer")) '((:id 1 :name "taco")) :key #'second)
[09:13:42] <moon-child> asarch: nb. assuming the layout of a plist will get you into trouble
[09:13:52] <moon-child> what if somebody says (:name "taco" :id 1) instead?
[09:14:10] <asarch> Good point
[09:18:06] *** Joins: z3t0 (~z3t0@146.71.14.98)
[09:20:46] *** Quits: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22) (Quit: ERC (IRC client for Emacs 27.1))
[09:22:29] <Spawns> is it possible to have my interpreter's implementation of conses as an immutable data structure but provide a mutable api to the lisp itself? do any cl implementations do something like that?
[09:23:22] <Spawns> i am sort of confused how you could implement that, since lists don't store pointers going backwards
[09:24:39] <Spawns> appending and pushing is easy, but doing set-car or whatever to an element in the middle is tricky
[09:27:13] <beach> Spawns: I have no idea what that means.  Mutability doesn't seem to have anything to do with back pointers.
[09:28:05] <Spawns> how can you create a new list when doing "set-car" in the middle of a list, if you can't copy the list from front to back with just that part of it changed
[09:28:13] <beach> And I don't see the difficulty of doing a RPLACA "in the middle" whatever that might mean.
[09:28:28] <beach> Spawns: Common Lisp doesn't have an operator named SET-CAR.
[09:29:15] <beach> Also, Common Lisp does not have immutable lists.
[09:29:18] <Spawns> like with appending, you just make a brand new list with an extra element tacked on the end, pushing you do the same but with the front. setting a car however, just gives you a single cons cell from the list, so you don't know how to return an entirely new list with just that part changed
[09:29:59] <Spawns> immutable in the sense of python strings being immutable
[09:30:00] <beach> Right, RPLACA is an operator that mutates the CONS cell.
[09:30:30] <Spawns> that requires the underlying repr to be mutable i guess
[09:30:37] <Spawns> i don't think there is an easy way around it
[09:31:18] <Spawns> can't you do like (setf (cddr list) nil)
[09:31:31] <beach> Sure you can.
[09:31:44] <moon-child> Spawns: obviously, immutable languages are turing-complete, so you _can_ implement a mutable language in terms of immutable semantics
[09:31:50] <beach> But that's an unrelated question.
[09:31:57] <moon-child> however, it will be very difficult to implement, and perform poorly
[09:32:19] <Spawns> beach: setf only knows about the specific cons cell that cddr returns
[09:32:20] <moon-child> beach: 'Common Lisp does not have immutable lists'  literals? scnr
[09:32:58] <moon-child> Spawns: setf is a macro.  In the case of CDDR, that will expand to something like (rplacd (cdr list) nil)
[09:33:01] <beach> I would appreciate not being corrected when I attempt a pedagogical approximation to a newbie.
[09:33:23] <Spawns> i think you are right about performance moon-child, that will be a lot of allocations and general churn
[09:34:16] <Spawns> the main reason I am asking is because doing mutable link lists in rust is a massive annoyance
[09:34:21] <beach> Spawns:  More generally, this is a channel for Common Lisp.  You are attempting the implementation of a different language for which we have no specification, so it is nearly impossible to give you advice.
[09:34:46] <beach> Spawns: I think you need to phrase your questions in terms of how Common Lisp is or can be implemented.
[09:34:47] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 256 seconds)
[09:34:53] <moon-child> Spawns: I think I told you before that trying to implement lisp in rust was not going to work out
[09:35:14] <Spawns> i was curious if you are familiar with how cl implementations implement their lists beach
[09:35:27] <Spawns> moon-child: yeah heh
[09:35:28] <beach> Spawns: Yes, I am.
[09:35:44] <beach> minion: Please tell Spawns about SICL.
[09:35:45] <minion> Spawns: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[09:36:36] <Spawns> how does bootstrapping that work beach ?
[09:36:40] <beach> Spawns: Usually, a CONS cell consists of two consecutive words in memory, and a list is just a sequence of CONS cells, linked by their CDR.
[09:37:16] <beach> Spawns: SICL bootstrapping?  The compiler is written in Common Lisp and generates native code.  Or will, when we are done.
[09:37:40] <Spawns> oh yeah that makes sense, very cool
[09:37:57] <beach> It's pretty standard practice to implement a language in itself.
[09:38:33] <beach> Spawns: You might want to read the paper by Krystof, entitled "SBCL, a Sanely Bootstrappable Common Lisp".  SBCL is mostly written in Common Lisp as well.
[09:38:53] <Spawns> I did not realize that about SBCL, that's very interesting
[09:39:08] <Spawns> sure i'll look for it if its online
[09:39:55] <beach> Spawns: You might also watch my videos for the online Lisp meeting, entitled "Creating a Common Lisp implementation".
[09:40:34] <Spawns> is that from a channel "Online Lisp Meetings"?
[09:40:49] <beach> I think that's what I said, yes.
[09:41:07] <beach> Well, I don't know that there is a channel for it.
[09:41:20] <Spawns> that's the first result that showed up on google, a youtube channel
[09:41:27] <beach> Then that's it.
[09:41:27] <moon-child> all youtube videos are associated with a 'channel', afaik
[09:41:59] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 256 seconds)
[09:45:31] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[09:46:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:47:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[09:49:06] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[09:50:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:04:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:17:51] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 256 seconds)
[10:19:56] *** Quits: asarch (~asarch@2806:10ae:7:9368:d6a5:a45a:93c6:c233) (Quit: Leaving)
[10:25:23] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:26:26] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:29:29] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[10:33:12] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[10:34:07] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[10:34:46] *** Quits: waku (~user@catv87040.tac-net.ne.jp) (Ping timeout: 250 seconds)
[10:38:12] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[10:45:37] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Read error: Connection reset by peer)
[10:45:46] *** Quits: bollu (~bollu@159.65.151.13) (Quit: Ping timeout (120 seconds))
[10:45:59] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[10:46:05] *** Joins: bollu (~bollu@159.65.151.13)
[10:51:07] <ns12> Hello, in "EVAL-WHEN considered harmful to your mental health" (https://fare.livejournal.com/146698.html), I see "The Lisp processor reads a stream of text (an unfortunate choice of specification, INTERLISP and Smalltalk fans may tell you) ...".
[10:51:37] <ns12> What is the meaning of that? What do Interlisp and Smalltalk have?
[10:56:50] *** Joins: Oddity (~Oddity@user/oddity)
[10:57:51] <beach> ns12: I am just guessing, but I think it means that Common Lisp is based on keeping source code in files, and those other systems are more "image based".
[10:58:24] <ns12> That makes sense. Thank you.
[10:58:37] <beach> Sure.
[10:59:25] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[11:07:50] *** Joins: waku (~user@catv87040.tac-net.ne.jp)
[11:09:35] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[11:09:49] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[11:13:31] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca)
[11:13:44] *** Joins: pve (~pve@37-136-244-191.rev.dnainternet.fi)
[11:17:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[11:26:43] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[11:31:58] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[11:36:43] *** Quits: epony (~epony@user/epony) (Quit: QUIT)
[11:38:16] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:38:21] *** Joins: epony (epony@user/epony)
[11:56:07] *** Joins: rgherdt (~rgherdt@ip5f5af1b0.dynamic.kabel-deutschland.de)
[11:57:01] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 256 seconds)
[11:59:40] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[12:02:48] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Remote host closed the connection)
[12:03:40] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[12:03:57] <pjb> ns12: nothing prevents to to adopt an image based development model with CL implementations (that have images, ie. all but ecl). Have a look at: Image Based Development http://www.informatimago.com/develop/lisp/com/informatimago/small-cl-pgms/ibcl/index.html
[12:04:32] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[12:04:32] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (Ping timeout: 240 seconds)
[12:05:10] <pjb> ns12: it's just the matter of developping a few tools, including a nice editor. there's CL:ED but most implementations defer to an external program or don't implement it.
[12:08:14] <phoe> and there's the problem where images accumulate cruft over time - and Smalltalk and Interlisp images are no exception
[12:09:53] <moon-child> ource code accumulates cruft over time too :)
[12:10:37] <phoe> sure, but textual source code is inspectable easier than images which are composed of many things that are impossible to show as text
[12:11:03] <phoe> while text as a representation of source code has many downsides, this one is a clear upside
[12:12:04] <moon-child> I may ask my image (or, at least, ought to be able to ask my image) not only 'show me all the objects', but also 'show me all the relationships between the objects'
[12:12:15] <akater[m]> I've seen a tool that converts textual image diffs into visual image diffs
[12:12:39] <moon-child> which would seem to make it much more amenable to introspection
[12:13:13] <akater[m]> oh it's about Lisp image?  sorry
[12:17:20] <akater[m]> How expensive would it be to keep a registry of all objects, or at least of objects of all interesting classes to make cruft more manageable?  (Maybe commercial Lisps do this already, I don't know)
[12:17:24] *** Joins: notzmv (~zmv@user/notzmv)
[12:18:12] <phoe> maybe you don't need to do that - you should be able to walk the whole image in order to find interesting objects
[12:18:19] <phoe> SBCL's maproot functionality allows you to do that
[12:20:46] <moon-child> hmm, it looks like that requires you to supply a root
[12:20:54] *** Joins: shka (~herr@109.231.0.226)
[12:21:18] <phoe> er, one second, might have misremembered the name
[12:21:19] <moon-child> so you can't so easily say 'trace _all_ the objects in the image' (as a gc would, say).  (I assume that it still is possible, though)
[12:21:23] <moon-child> map-root
[12:21:25] <moon-child> missed a -
[12:22:17] <akater[m]> I didn't know about map-root, thank you.
[12:22:58] <phoe> aha! I misremembered
[12:23:14] <phoe> https://github.com/sbcl/sbcl/blob/a45f58f7b5e10666cd80bcba9bd90a84b3d49c53/src/code/traceroot.lisp#L171-L282
[12:23:32] <phoe> ...although that isn't it either
[12:25:09] <phoe> OK, it's MAP-ALLOCATED-OBJECTS
[12:25:09] <phoe> https://github.com/sbcl/sbcl/blob/f16d44366365a9529b78b05d6787be8b5e9ac084/src/code/room.lisp#L343-L393
[12:25:40] <moon-child> cool
[12:29:04] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[12:30:14] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:36:49] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[12:40:46] *** Parts: waku (~user@catv87040.tac-net.ne.jp) (ERC (IRC client for Emacs 26.3))
[12:42:53] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[12:45:02] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca) (Ping timeout: 240 seconds)
[12:55:09] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[12:56:53] *** White__Flame is now known as White_Flame
[12:57:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca)
[13:05:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca)
[13:25:58] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[13:26:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 240 seconds)
[13:26:48] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:30:42] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc)
[13:31:16] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:32:02] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Ping timeout: 240 seconds)
[13:37:38] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 250 seconds)
[13:45:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[13:50:38] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[13:55:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[13:55:39] *** Joins: Krystof (~user@81.174.155.115)
[13:56:09] *** Joins: paul0 (~paul0@user/paul0)
[13:57:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[13:57:58] *** Joins: paul0 (~paul0@user/paul0)
[13:58:02] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[14:08:30] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:09:42] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[14:10:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:10:33] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[14:10:47] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[14:11:01] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[14:11:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:16:22] *** Joins: karlosz (~karlosz@47.151.136.69)
[14:19:05] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:22:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:24:18] *** Quits: semz (~semz@user/semz) (Quit: Leaving)
[14:24:26] *** Joins: semz (~semz@2001:9e8:4bc5:b000:eb51:9f2e:6e0b:33f)
[14:24:26] *** Quits: semz (~semz@2001:9e8:4bc5:b000:eb51:9f2e:6e0b:33f) (Changing host)
[14:24:27] *** Joins: semz (~semz@user/semz)
[14:27:08] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[14:27:49] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[14:31:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:36:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[14:38:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:38:33] *** Joins: paul0 (~paul0@user/paul0)
[14:39:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:40:03] *** Joins: paul0 (~paul0@user/paul0)
[14:40:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[14:41:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:41:02] *** Joins: cosimone (~user@93-44-186-112.ip98.fastwebnet.it)
[14:41:25] *** Joins: paul0 (~paul0@user/paul0)
[14:45:31] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:46:46] *** Joins: paul0 (~paul0@user/paul0)
[14:54:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:55:21] *** Joins: paul0 (~paul0@user/paul0)
[14:55:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:56:01] *** Joins: paul0 (~paul0@user/paul0)
[14:57:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:57:38] *** Joins: paul0 (~paul0@user/paul0)
[14:58:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[14:59:15] *** Joins: paul0 (~paul0@user/paul0)
[15:02:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[15:02:58] *** Joins: paul0 (~paul0@user/paul0)
[15:04:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[15:04:17] *** Joins: paul0 (~paul0@user/paul0)
[15:05:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[15:05:37] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[15:06:18] *** Joins: paul0 (~paul0@user/paul0)
[15:09:24] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[15:30:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[15:38:19] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[15:39:05] *** Joins: VincentVega (~user@212.97.1.105)
[15:39:10] *** Quits: VincentVega (~user@212.97.1.105) (Remote host closed the connection)
[15:39:37] *** Joins: VincentVega (~user@212.97.1.105)
[15:44:44] *** Joins: random-nick (~random-ni@87.116.181.150)
[15:46:55] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[15:47:28] *** Joins: domovod (~domovod@176.196.122.197)
[15:53:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:55:44] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[15:55:44] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:59:25] <VincentVega> How do I tell asdf to rescan a directory for new/renamed .asd definitions?
[16:02:45] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net)
[16:05:24] <cage> hi! Can be assumed that (string= nil nil) ; => t ? I checked the hyperspec but i was not able to answer my question.
[16:06:00] <beach> clhs string=
[16:06:01] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_stgeq_.htm
[16:06:39] <beach> cage: Look in the glossary for "string designator"
[16:06:57] <rotateq> cage: by logic it should really just work on objects of class STRING
[16:07:04] <rotateq> OK, also symbols!
[16:07:20] <rotateq> beach: I had luck you mentioned the designators.
[16:08:20] <beach> cage: Do you see the definition?
[16:08:57] <cage> beach: yes, string= works for string designator
[16:09:12] <beach> cage: I mean, do you see the definition of "string designator"?
[16:09:20] <beach> rotateq: You need to make sure you know the definition before attempting to help.
[16:09:30] <cage> a symbol is a string designator and 'nil' is a symbol
[16:09:43] <beach> Right, and then it designates what?
[16:09:44] <cage> so string= works for nil
[16:09:47] <rotateq> Yes, I apologize.
[16:09:54] <cage> beach: "NIL" ?
[16:10:09] <beach> cage: So string= is really called with "NIL" and "NIL".
[16:10:15] <cage> so it works :)
[16:10:29] <beach> See, you figured it out almost all by yourself.
[16:11:00] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[16:11:02] <cage> beach: thanks for helping me to figure out it! :D
[16:11:08] *** Guest4269 is now known as mal
[16:11:08] <beach> Pleasure.
[16:11:11] <cage> :)
[16:11:13] *** mal is now known as Guest2660
[16:11:53] *** Joins: paul0 (~paul0@user/paul0)
[16:12:46] <mcoll> Thoughts on the commercial lisp offerings? Allegro and LispWorks, anyone using them?
[16:13:26] <phoe> both of them finally have package-local nicknames now that LW8 is released!
[16:13:28] * phoe is happy
[16:14:04] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 250 seconds)
[16:14:30] *** Quits: paul0 (~paul0@user/paul0) (Remote host closed the connection)
[16:14:40] <rotateq> nice
[16:14:49] *** Joins: paul0 (~paul0@user/paul0)
[16:15:18] *** Guest2660 is now known as lieven
[16:16:34] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf)
[16:16:54] *** Joins: kevingal_ (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf)
[16:23:52] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[16:25:04] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[16:26:12] <cage> phoe: great!
[16:27:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:29:56] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:30:46] <mcoll> phoe: do you use LW?
[16:31:09] <nij-> Isn't SBCL good enough @@? I'm curious.
[16:31:15] <phoe> mcoll: nope, SBCL herwe
[16:31:18] <phoe> here*
[16:32:20] <mcoll> yeah, probably, CAPI is the main attraction to me I guess
[16:36:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc)
[16:40:22] <Shinmera> mcoll: You won't find many people using them on "freenode". If you want better insights, throw a mail to their mailing lists, or look at their appraisals that they list on their websites.
[16:41:05] <rotateq> or using CCL, ECL, ...
[16:41:27] <rotateq> but surely, LW and ACL come with many things on top too
[16:42:08] <mcoll> yeah, fair enough
[16:45:48] <beach> My paper on debugging rates Allegro the best: http://metamodular.com/SICL/sicl-debugging.pdf
[16:46:13] <lisp123> beach: Thanks for the link
[16:46:22] <beach> Not that I used it myself, but it actually has a real debugger which none of the others I investigated does.
[16:46:33] <rotateq> Someday beaten by SICL. :)
[16:47:37] <phoe> freenode, or so it used to be
[16:47:49] <phoe> before rasengan decided to flip the network upside down and forced everyone to migrate here
[16:47:54] <phoe> but, sigh, that's offtopic
[16:56:12] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[16:57:51] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:59:19] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[17:00:37] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 250 seconds)
[17:16:41] <|smlckz|> :repeat how can i enable syntax highlighting in the slime repl?
[17:22:24] <edgar-rft> sorry, I don't know because I never needed it :(
[17:30:47] <lisp123> |smlckz|: You will need to play around with font locks
[17:31:58] <|smlckz|> before playing around, i need to learn about those..
[17:32:30] <lisp123> https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html
[17:33:17] <lisp123> You will have to figure out a way of copying the faces from lisp major mode to slime repl (C-h m should tell you what the exact major mode of the slime repl is called)
[17:34:35] <lisp123> Something like this may help https://protesilaos.com/codelog/2022-01-08-emacs-face-remap-add-relative/
[17:35:03] <lisp123> THere's different ways to do it, and its a bit complicated (I don't know exactly how just yet and won't have time to look into it)
[17:36:50] <lisp123> Ask on #emacs actually, somebody might be able to help, its not that obscure of a question
[17:39:46] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[17:43:29] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[17:43:42] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[17:43:52] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[17:44:12] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 250 seconds)
[17:44:31] *** Joins: raeda_ (~raeda@72.49.214.135)
[17:44:56] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[17:47:50] *** Joins: VincentV` (~user@212.97.1.105)
[17:48:31] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[17:48:45] *** Quits: raeda (~raeda@72.49.214.135) (Ping timeout: 256 seconds)
[17:49:29] *** Quits: VincentVega (~user@212.97.1.105) (Ping timeout: 256 seconds)
[17:49:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc) (Ping timeout: 240 seconds)
[17:51:09] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-619B-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[17:52:51] *** Joins: taiju (~taiju@240b:253:ec40:2400:5cec:b035:3bed:59cc)
[17:54:56] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[17:55:00] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:57:01] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:59:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:02:39] *** Joins: morganw (~user@80.225.24.132)
[18:04:44] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[18:05:07] *** Joins: Bike (~Bike@71.69.170.70)
[18:05:07] *** ChanServ sets mode: +o Bike
[18:08:02] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[18:09:02] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 240 seconds)
[18:12:32] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 240 seconds)
[18:13:16] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[18:24:54] <mgl> I don't seem to receive the two-factor authentication code from https://gitlab.common-lisp.net/. Is this a known issue?
[18:26:20] <mgl> minion: registration, please?
[18:26:20] <minion> The URL https://gitlab.common-lisp.net/users/sign_up?secret=b491250b will be valid until 15:00 UTC.
[18:28:43] <mgl> ah, I can't read. Solved.
[18:29:42] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 250 seconds)
[18:31:52] *** Joins: alvaro121 (~aa@201.230.126.66)
[18:33:08] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[18:43:53] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[18:45:21] *** Joins: iamFIREcracker (~iamFIREcr@user/iamfirecracker)
[18:45:32] *** Quits: cosimone (~user@93-44-186-112.ip98.fastwebnet.it) (Remote host closed the connection)
[18:48:56] *** Joins: marcoxa (~user@77-57-64-215.dclient.hispeed.ch)
[18:49:33] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:52:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:53:05] <Josh_2> Hello
[19:07:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:11:18] *** Quits: VincentV` (~user@212.97.1.105) (Ping timeout: 250 seconds)
[19:12:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:13:21] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[19:17:01] <kevingal_> What I want to know is how to stop everything in the REPL being coloured a string after there's an error message with a newline in it.
[19:17:19] <kevingal_> (At least, I think that's what causes it).
[19:18:45] <kevingal_> YES, confirmed.
[19:19:03] <kevingal_> (error (format nil "well heck~%"))
[19:21:33] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:22:21] <edgar-rft> kevingal_: what REPL are you talking about? Emacs/Slime or some CL implementation running in a terminal emulator?
[19:23:23] <kevingal_> Emacs/SLIME.
[19:23:45] * semz can't reproduce this in Emacs/SLIME 27.2/2.26.1
[19:24:28] * edgar-rft can't reproduce this either
[19:24:29] <kevingal_> Oh, I'm on Emacs 26.3 and SLIME 2.26.1.
[19:25:35] <kevingal_> I'm afraid to upgrade Emacs in case something else breaks.
[19:25:38] *** Joins: thomp (~thomp@99-100-118-16.lightspeed.frsnca.sbcglobal.net)
[19:30:09] *** Quits: Bi[m] (~bimatrixo@2001:470:69fc:105::109a) (Quit: You have been kicked for being idle)
[19:37:57] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[19:38:34] *** Joins: jealousmonk (~user@2804:431:e7c5:b880:889f:205:ed34:5b22)
[19:39:48] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[19:40:24] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[19:41:26] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[19:41:45] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[19:43:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:43:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:44:22] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[19:48:28] *** Quits: kevingal_ (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf) (Remote host closed the connection)
[19:48:28] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:31f8:fc53:f944:73bf) (Read error: Connection reset by peer)
[19:59:07] *** Joins: iamFIREc1 (~iamFIREcr@user/iamfirecracker)
[19:59:50] *** Quits: thomp (~thomp@99-100-118-16.lightspeed.frsnca.sbcglobal.net) (Ping timeout: 250 seconds)
[20:00:57] *** Quits: iamFIREcracker (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[20:08:16] *** Joins: cosimone` (~user@93-44-186-112.ip98.fastwebnet.it)
[20:09:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[20:15:12] *** Quits: pillton (~user@58-6-240-187.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[20:25:30] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[20:25:31] *** Joins: frgo_ (~frgo@dynamic-046-114-151-106.46.114.pool.telefonica.de)
[20:25:32] *** Quits: frgo_ (~frgo@dynamic-046-114-151-106.46.114.pool.telefonica.de) (Read error: Connection reset by peer)
[20:26:08] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[20:28:43] *** Quits: phantomics (~phantomic@71-218-243-149.hlrn.qwest.net) (Ping timeout: 256 seconds)
[20:31:28] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:38:21] *** Quits: iamFIREc1 (~iamFIREcr@user/iamfirecracker) (Ping timeout: 256 seconds)
[20:40:26] *** Joins: Guest7498 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:52:52] *** Joins: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net)
[21:01:06] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:02:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:03:25] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:03:26] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Quit: triffid)
[21:03:32] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 250 seconds)
[21:03:57] *** Joins: amb007 (~a_bakic@204.37.22.93.rev.sfr.net)
[21:04:00] *** Quits: amb007 (~a_bakic@204.37.22.93.rev.sfr.net) (Remote host closed the connection)
[21:04:40] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:04:53] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:06:14] *** Joins: amb007 (~a_bakic@23.198.204.77.rev.sfr.net)
[21:10:45] *** Joins: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea)
[21:13:48] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[21:14:04] *** Parts: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) ()
[21:14:41] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[21:17:13] *** Quits: jstoddard (~Jeremiah@2600:8801:a400:5a00::1dea) (Remote host closed the connection)
[21:17:14] *** Joins: jstoddard_ (~Jeremiah@2600:8801:a400:5a00::1dea)
[21:20:11] *** jstoddard_ is now known as jstoddard
[21:20:32] *** Quits: amb007 (~a_bakic@23.198.204.77.rev.sfr.net) (Ping timeout: 240 seconds)
[21:20:51] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[21:25:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:25:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:26:54] *** Joins: amb007 (~a_bakic@53.145.204.77.rev.sfr.net)
[21:27:20] <sveit_> if i'm using symbols as flags inside of a function, is there a reason to prefer keyword, uninterned, or "normal" symbols?
[21:27:43] <White_Flame> depends on how broadly they're passed around
[21:28:22] <White_Flame> also, even if they're purely internally used within your function, keywords can higlight in your source code and have a good visual distinction from your local var names
[21:28:24] <sveit_> say that they are meant to be used exactly in the scope of the function body (otherwise I guess uninterned would not work)
[21:28:26] *** Joins: treflip (~user@user/treflip)
[21:29:49] <sveit_> something like (lambda (x) (let ((size (cond ((> x 7) 'big) ((< x 3) 'small) (t 'unknown)))) (when (eql x 'big) "wow")))
[21:29:55] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Ping timeout: 256 seconds)
[21:30:16] <sveit_> whoops, should be (eql size 'big')
[21:30:26] <White_Flame> 'big
[21:30:35] <White_Flame> but yeah, it really doesn't matter
[21:30:42] <White_Flame> just stylistically
[21:31:21] <White_Flame> for simple cases like that, local vars used as flags can be simpler & faster
[21:31:34] <White_Flame> but I could sort of see if you have a ton of potential symbols that you're using to organize it
[21:36:29] <sveit_> in reality, i have a slightly more non-trivial usecase: i have a relatively small (5) number of numbers in some numerical algorithm, a b c d e, and want to know their relative ordering to decide on the order other parts of the algorithm will run. the most reasonable thing seemed to be to do something like (sort (list (cons 'a a) (cons 'b b) ...) #'< :key #'cdr), which inspired this question
[21:37:15] <sveit_> i could write some forest of conditionals, but this seemed like a more reasonable approach. if you have a better solution actually i'd really like to see it
[21:40:20] *** Joins: sloanr (~user@97-127-122-25.mpls.qwest.net)
[21:40:36] *** Quits: sloanr (~user@97-127-122-25.mpls.qwest.net) (Remote host closed the connection)
[21:41:14] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[21:41:57] *** Quits: thomp (~thomp@c-98-239-97-121.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[21:43:08] *** Joins: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:52:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:53:19] <White_Flame> sveit_: makes sense to me
[21:53:46] <White_Flame> the symbols allow you to convert it all to runtime data & manipulate it with SORT, which is reasonable
[21:57:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:57:59] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[21:58:08] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77) (Ping timeout: 250 seconds)
[21:58:29] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:02:54] *** Quits: marcoxa (~user@77-57-64-215.dclient.hispeed.ch) (Ping timeout: 250 seconds)
[22:07:22] *** Joins: IPmonger (~IPmonger@static-98-114-67-98.phlapa.fios.verizon.net)
[22:07:43] *** Quits: IPmonger (~IPmonger@static-98-114-67-98.phlapa.fios.verizon.net) (Remote host closed the connection)
[22:14:03] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[22:19:14] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[22:19:52] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[22:23:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:25:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:27:32] <sveit_> is there a way to put multiple loop statements under a conditional clause? I mean something like (loop for j from 0 below 10 when (evenp j) { collect j into numbers collect (floor j 2) into halves } finally (return (values numbers halves)))
[22:27:58] <sveit_> where the braces are of course a fake syntax, but indicate when I would like the collections to run
[22:28:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:28:16] <semz> collect j into numbers and collect (floor j 2) into halves
[22:28:58] <random-nick> and being a piece of syntax valid in conditional clauses
[22:29:12] <sveit_> ah, thanks!
[22:29:27] <random-nick> http://www.lispworks.com/documentation/HyperSpec/Body/06_af.htm
[22:30:34] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[22:52:32] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 240 seconds)
[22:52:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:53:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[22:55:39] <phoe> https://plaster.tymoon.eu/view/2872#2872
[22:55:55] <phoe> I expected second and third return values from COMPILE to be T
[22:56:41] <phoe> oh wait, I know why
[22:56:48] <phoe> should have quoted the lambda :D
[23:00:41] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca)
[23:01:13] *** Joins: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de)
[23:01:54] *** Quits: Guest7498 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[23:02:00] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Ping timeout (120 seconds))
[23:07:57] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[23:09:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:09:39] *** Quits: gaqwas (~john@dynamic-095-118-150-147.95.118.pool.telefonica.de) (Remote host closed the connection)
[23:10:16] <lisp123> Has anyone got an error with SLY-COMPLETE-SYMBOL?
[23:11:18] <rotateq> maybe it could complete me instead
[23:13:16] <lisp123> heh
[23:13:24] <lisp123> ignore me, think I found the issue
[23:13:47] <rotateq> so i give my wish to the universe :)
[23:14:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731)
[23:21:11] <phoe> clhs compile
[23:21:12] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_cmp.htm
[23:21:20] <phoe> "The consequences are undefined if the lexical environment surrounding the function to be compiled contains any bindings other than those for macros, symbol macros, or declarations."
[23:21:55] <phoe> what does this part mean? that COMPILE cannot produce closures?
[23:22:49] <mfiano> That's how I parsed it.
[23:24:17] <phoe> like, (let ((x 42)) (compile nil (lambda () x))) is UB?
[23:28:30] <mfiano> I say yes. A captured lexivar is a runtime construct anyway.
[23:30:57] <rotateq> oh phoe wants to compile the clhs :)
[23:31:42] <rotateq> i had a read on STRING= after it came up some hours ago and "equal call string= if both args are of type string"
[23:34:01] *** Quits: amb007 (~a_bakic@53.145.204.77.rev.sfr.net) (Ping timeout: 256 seconds)
[23:34:17] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:34:31] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:37:18] *** Joins: EdLangley[m] (~edwlanmed@2001:470:69fc:105::7a0b)
[23:37:26] *** Joins: Bike (~Bike@71.69.170.70)
[23:37:26] *** ChanServ sets mode: +o Bike
[23:38:11] <Bike> phoe: correct. compile cannot make closures (except, you know, internally)
[23:38:14] <_death> phoe: correct.. I wonder why it's not implementation defined
[23:38:22] <phoe> _death: Bike: OK - understood
[23:38:33] <Bike> phoe: similar to the restriction on macrolet bodies referring to outside bindings
[23:39:32] <phoe> Bike: what's a good way around that? is (let* ((x 42) (closure (lambda () x))) (compile nil closure)) any more non-UB?
[23:40:05] <Bike> (funcall (compile nil '(lambda (x) (lambda () x))) 42)
[23:40:49] <Bike> or (lambda () (let ((x 42)) ...)) etc
[23:40:58] <phoe> hmm
[23:41:16] <phoe> that's one part of UB that I wasn't really aware of
[23:41:30] <phoe> and I wonder which commonly used implementations don't do the "right" thing in this case
[23:41:54] <_death> in cl-su-ai spice lisp was mentioned in this context
[23:42:46] <phoe> cl-su-ai? you mean the mailgroup?
[23:43:02] <_death> yes
[23:43:50] <_death> there's also the issue relevant to it: COMPILE-ARGUMENT-PROBLEMS-AGAIN.. and COMPILE-ARGUMENT-PROBLEMS before that (mentioned in https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node224.html )
[23:44:49] <Bike> "The consequences of calling compile on a function that is already compiled are unspecified." yeesh, that's perverse
[23:45:45] *** Joins: frgo_ (~frgo@2a02:3038:401:f00f:4c94:f370:ca36:9178)
[23:45:57] <phoe> hey wait a second, that isn't CLHS
[23:46:09] <phoe> "If the definition is already a compiled function, compile either produces that function itself (i.e., is an identity operation) or an equivalent function."
[23:46:12] <phoe> thank goodness
[23:46:13] <Bike> yeah it's in the page death linked.
[23:46:17] <Bike> from cltl
[23:46:17] <phoe> yes
[23:46:35] *** Joins: amb007 (~a_bakic@139.146.204.77.rev.sfr.net)
[23:46:50] <_death> http://cl-su-ai.lisp.se/msg02041.html
[23:48:36] *** Joins: thomp (~thomp@2601:201:8200:69e0::3b6b)
[23:49:30] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[23:50:27] <Bike> there's also ENCLOSE in cltl2, which lets you explicitly provide the (still macro stuff only) environment to evaluate a lambda expression in
[23:52:57] *** Quits: thomp (~thomp@2601:201:8200:69e0::3b6b) (Ping timeout: 240 seconds)
[23:57:44] *** Quits: monaaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:59:24] *** Joins: ad-absurdum (~ad-absurd@23-126-79-16.lightspeed.spfdmo.sbcglobal.net)
[23:59:28] *** Quits: amb007 (~a_bakic@139.146.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:59:43] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
