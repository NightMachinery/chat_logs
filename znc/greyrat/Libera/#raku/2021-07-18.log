[00:02:25] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:02:58] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[00:09:20] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Ping timeout: 255 seconds)
[00:29:39] <MasterDuke> El_Che, leont: any idea if lizmat's house is underwater
[00:48:27] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[00:54:58] *** Quits: MasterDuke (~MasterDuk@2601:14c:4201:5a20:f015:ff42:f95:521b) (Ping timeout: 246 seconds)
[01:07:41] <leont> They're fine. They live near the river, but on higher ground
[01:08:50] <leont> Some villages near them were evacuated, but I think everyone is back now
[01:37:22] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[02:17:34] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 268 seconds)
[02:57:58] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[03:02:08] *** Joins: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net)
[03:12:23] *** Joins: monkey_ (~user@190.104.116.134)
[03:12:31] *** Quits: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net) (Ping timeout: 246 seconds)
[03:16:40] *** Joins: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net)
[03:33:45] <lizmat> yeah, all fine here...  :-)
[03:34:10] <lizmat> all of the extensive water works of the past 25 years or so, worked out in our area of the river
[03:34:40] <lizmat> the river grew from 50m wide to 1.5km wide, but it's all within expected parameters, more or less  :-)
[03:35:02] <lizmat> MasterDuke: thanks for the worries, though  :-)
[03:35:04] <tellable6> lizmat, I'll pass your message to MasterDuke
[03:45:55] <raydiak> \o/
[03:47:42] *** Joins: jgaz (~jgaz@2600:8805:d800:b3e::2a2)
[04:15:57] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[04:32:56] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[04:34:28] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:54:14] *** Quits: jgaz (~jgaz@2600:8805:d800:b3e::2a2) (Quit: Leaving)
[04:59:03] *** Quits: bdju (~bard@user/bdju) (Ping timeout: 276 seconds)
[04:59:35] *** Joins: bdju (~bard@user/bdju)
[05:42:47] *** Quits: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net) (Quit: guifa)
[05:49:15] *** Joins: xinming_ (~xinming@115.219.33.53)
[05:51:13] <japhb> Is there any way to speed up parsing of code (test files, in this case) that use custom circumfix operators?
[05:51:54] <japhb> If it was library code, I'd probably not worry too much -- that's what precomp is for -- but for tests it slows down the edit-test cycle
[05:52:22] *** Quits: xinming (~xinming@115.219.36.56) (Ping timeout: 252 seconds)
[05:56:14] *** Joins: MasterDuke (~MasterDuk@2601:14c:4201:5a20:f6c5:5d83:de1e:a94c)
[05:58:20] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 268 seconds)
[06:35:24] *** Quits: Manifest0 (~Manifest0@49-nat1-1.centrio.cz) (Remote host closed the connection)
[06:35:46] *** Joins: Manifest0 (~Manifest0@49-nat1-1.centrio.cz)
[06:44:48] <Xliff> Is there a way alias class attributes?
[06:45:10] <Xliff> Something like "has $.a is rw is also<able>"
[06:46:17] <Xliff> Currently, I'm going with a raw method like "method able is rw { Proxy.new: FETCH => -> $ { $!a }, STORE => -> $, \v { $!a = v }; }"
[07:35:46] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:35:46] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:36:43] *** Joins: evalable6 (~eva-able@ns306169.ip-94-23-219.eu)
[07:37:40] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[07:39:14] *** Joins: keutoi (~keutoi@157.47.111.203)
[07:42:39] <keutoi> Are channel logs available somewhere?
[07:49:19] *** Joins: monkey_ (~user@190.104.116.134)
[08:04:18] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:23:00] <raydiak> Xliff: you could bind it
[08:23:04] <raydiak> m: class C { has $.a is rw; has $.b is rw; submethod TWEAK () { $!a := $!b; } }; my $o = C.new; $o.b = 1; say $o.a; $o.a = 42; say $o.b;
[08:23:05] <camelia> rakudo-moar d668d9929: OUTPUT: «1␤42␤»
[08:23:49] <raydiak> you'd have to do a little more to support either name in the constructor I think
[08:25:13] <raydiak> keutoi: we're kinda in a transitional period between logging solutions, but a temporary interface exists at https://logs.liz.nl/
[08:30:46] <Xliff> radiak: Hi! Nice thought, but this is for repr<CStruct> where you can't have extraneous members. Hence the method.
[08:31:30] <raydiak> hi :) and I see...
[08:31:43] <raydiak> maybe a FALLBACK?
[08:32:07] <raydiak> m: class C { has $.a; method FALLBACK ($m) is raw { $!a if $m eq "b" } }; my $o = C.new; $o.b = 42; say $o.a
[08:32:07] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[08:32:35] <Xliff> keutoi: https://colabti.org/irclogger/irclogger_logs/perl6
[08:32:56] <raydiak> not sure if that's any better than your proxy tbh, or if it works on a CStruct, but just another thought
[08:32:57] <Xliff> ^^ Historical
[08:33:15] <Xliff> keutoi: Current - https://colabti.org/irclogger/irclogger_logs/raku
[08:33:53] <Xliff> rakiak: LOL. I prefer the procy. I am very FALLBACK() adverse.
[08:35:17] <raydiak> yeah, you mnight be stuck with the proxy. I'm out of tricks off the top of my head, unless you want to wrap the whole CStruct within something else
[08:36:55] <raydiak> and just returning the attribute doesn't work with a CStruct? like the fallback example but with a normal method...
[08:36:58] <Xliff> Hmmm... that's an option, but an expensive one and would require delegation.
[08:36:58] <raydiak> m: class C { has $.a; method b is raw { $!a } }; my $o = C.new; $o.b = 42; say $o.a
[08:36:58] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[08:37:25] <Xliff> Huh! Oh, I like that.
[08:37:42] <raydiak> never tried it with a CStruct though
[08:37:43] <Xliff> Should also be less expensive than the Proxy.
[08:37:54] <Xliff> It should be fine, since it's a method.
[08:39:08] <raydiak> note that perticular implementation doesn't enforce read-only, it makes the private attribute directly accessible from outside, for better or for worse
[08:40:08] <raydiak> that's why $.a isn't rw in that example, but I could assign a value to .b anyway and it still ends up in .a
[08:41:30] <raydiak> iow, this would actually be more correct:
[08:41:34] <raydiak> m: class C { has $.a is rw; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a
[08:41:34] <camelia> rakudo-moar d668d9929: OUTPUT: «42␤»
[08:41:38] <keutoi> raydiak: Xliff: thank you for the links
[08:42:00] <raydiak> m: class C { has $.a; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a # fails as it should without `is rw`
[08:42:01] <camelia> rakudo-moar d668d9929: OUTPUT: «(Any)␤»
[08:43:23] <raydiak> uh, hmmm...that throws under 2021.06, but fails silently on master
[08:43:51] <Xliff> radiak: That's a regression. Bug it.
[08:44:12] <Xliff> bisectable: class C { has $.a; method b is raw { $.a } }; my $o = C.new; $o.b = 42; say $o.a
[08:44:13] <bisectable6> Xliff, Will bisect the whole range automagically because no endpoints were provided, hang tight
[08:44:15] <keutoi> mykhal: So that was a bug? I came across it when using emacs to load a buffer line by line.
[08:44:34] <bisectable6> Xliff, Output on all releases: https://gist.github.com/d6a3e683e6672427a120eead28da9e2f
[08:44:36] <bisectable6> Xliff, Bisecting by exit code (old=2021.06 new=d668d99). Old exit code: 1
[08:44:40] <bisectable6> Xliff, bisect log: https://gist.github.com/490302694a875b1fb3e489b3d7ce7a4e
[08:44:40] <bisectable6> Xliff, (2021-06-26) https://github.com/rakudo/rakudo/commit/dba9f56afa95ef078a5d0eb1cadd516e098d3987
[08:44:42] <bisectable6> Xliff, Bisecting by output (old=2018.10 new=2018.11) because on both starting points the exit code is 1
[08:45:08] <bisectable6> Xliff, bisect log: https://gist.github.com/fb02d9e1c78ea418c30943d0d1b54eae
[08:45:09] <bisectable6> Xliff, (2018-11-06) https://github.com/rakudo/rakudo/commit/e67584929f4ff2d753d9aa1603ad66962b3f0e96
[08:45:10] <bisectable6> Xliff, Bisecting by output (old=2017.05 new=2017.06) because on both starting points the exit code is 1
[08:45:31] <bisectable6> Xliff, bisect log: https://gist.github.com/74385d0d350a27a262c20a8a97f63eb0
[08:45:31] <bisectable6> Xliff, (2017-05-26) https://github.com/rakudo/rakudo/commit/0c16bb2b017d311a342bb22e2a67b2f1a759afee
[08:45:42] <bisectable6> Xliff, Output on all releases and bisected commits: https://gist.github.com/0662a4b7e37afa6e5a14269a69255e25
[08:45:52] <raydiak> Xliff: agreed
[08:46:26] <Xliff> Funny, bisectable can't find it working on any of its tests
[08:47:20] <Xliff> Out for a nap !!!
[08:47:35] <raydiak> rest well o/
[08:47:51] <raydiak> or do you mean bisectable?
[08:49:09] <raydiak> it shows the lack of error in some of its output, but doesn't seem to be doing a good job of actually noticing it and bisecting
[08:51:15] <raydiak> looks like probably https://github.com/rakudo/rakudo/commit/dba9f56afa95ef078a5d0e
[09:04:18] *** Quits: evalable6 (~eva-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[09:04:18] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[09:04:40] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[09:04:47] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[09:10:16] *** gordonfish- is now known as gordonfish
[10:08:17] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[10:14:01] <mykhal> keutoi: really not sure what causes that misleading claim "Package 'B' already has a method 'b'" in your raku repl screenshot imgur.com/a/Pi17pLg 
[10:18:57] <mykhal> keutoi: at least i verified it does not depend on chosen names, happens for A, a; B, b; but also for ABC, def, GHI, jkl. :)
[10:22:52] <moon-child> oh, wow, that is bizarre
[10:32:55] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:33:06] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[11:01:23] <moon-child> m: say 1 ** i
[11:01:23] <camelia> rakudo-moar d668d9929: OUTPUT: «1+0i␤»
[11:01:30] <moon-child> m: say 1ⁱ
[11:01:30] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3say 17⏏5ⁱ␤»
[11:01:33] <moon-child> LITERALLY unusable
[11:04:17] <moon-child> amazingly this works
[11:04:23] <moon-child> m: say 2²⁺²
[11:04:23] <camelia> rakudo-moar d668d9929: OUTPUT: «16␤»
[11:04:40] <moon-child> m: say 2⁸¯⁴
[11:04:40] <camelia> rakudo-moar d668d9929: OUTPUT: «0.00000000023␤»
[11:04:55] <pony> I don't have those little numbers on my keyboard ;o
[11:05:43] <moon-child> hmm, I don't think that's right
[11:05:55] <moon-child> I guess it's interpreted as (2 ** 8) ** -4 ?
[11:06:04] <pony> 2 ** 8 ** -4
[11:06:09] <pony> m: 2 ** 8 ** -4
[11:06:09] <camelia> rakudo-moar d668d9929: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "**" in expression "2 ** 8 **" in sink context (line 1)␤»
[11:06:19] <moon-child> but ⁺ seemed to do the right thing...
[11:07:00] <moon-child> another thing that would be cool:
[11:07:12] <moon-child> m: my \n = 4; say 2ⁿ
[11:07:12] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my \n = 4; say 27⏏5ⁿ␤»
[11:21:48] <mykhal> m: say <¯> eq <⁻>
[11:21:48] <camelia> rakudo-moar d668d9929: OUTPUT: «False␤»
[11:33:06] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[11:34:21] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[12:15:00] *** Quits: Eddward_ (~Eddward@207.138.204.132) (Ping timeout: 255 seconds)
[12:35:04] <Xliff> m: my \ⁿ = 4; say 2ⁿ
[12:35:04] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3my \ⁿ = 4; say 27⏏5ⁿ␤»
[12:35:12] <Xliff> Huh
[12:36:33] <moon-child> well, that part actually makes sense, because
[12:36:47] <moon-child> m: my \ⁿ = 4; say 2**ⁿ
[12:36:48] <camelia> rakudo-moar d668d9929: OUTPUT: «16␤»
[12:37:02] <moon-child> so it's just two consecutive tokens
[12:37:54] <moon-child> I mean, I think it would be cool if it were supported, but it's technically a compat break
[13:15:00] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:15:00] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:16:09] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:18:07] *** Joins: linkable6 (~lin-able@ns306169.ip-94-23-219.eu)
[13:20:32] <raydiak> and for whatever reason, this doesn't work either
[13:20:36] <raydiak> m: my \n = 4; sub postfix:<ⁿ> ($base) { $base ** n }; say 2ⁿ
[13:20:37] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3ostfix:<ⁿ> ($base) { $base ** n }; say 27⏏5ⁿ␤»
[13:20:56] <raydiak> even though this works:
[13:21:04] <raydiak> my \n = 4; sub postfix:<n> ($base) { $base ** n }; say 2n
[13:21:05] <evalable6> raydiak, rakudo-moar d668d9929: OUTPUT: «16␤»
[13:36:36] <Xliff> radiak: I think that endpoint needs to be hardcoded into Raku as a proper identifier.
[14:09:17] *** Joins: Guest77 (~Guest77@2402:e280:2117:297:ecf8:f374:8704:f843)
[14:26:21] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:29:49] <raydiak> maybe you know something I don't, but as I understand it that definitely should not be the case. ⁿ counts as a word character, and works as a term or a sub name. all kinds of other characters work with postfix:<>, including other word characters. this one behaves differently for whatever reason. I just don't honestly care enough to investigate further, was just something I happened to notice
[14:30:24] *** Quits: squashable6 (~squ-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[14:33:24] *** Joins: squashable6 (~squ-able@ns306169.ip-94-23-219.eu)
[14:37:38] <raydiak> my guess would be there's probably something about the unicode category or other properties which causes it to fall through in the grammar
[14:46:05] <raydiak> it even works as a prefix (if you add a space to prevent it from being parsed all as one identifier). just not postfix (whether with a space or without)
[14:46:17] <raydiak> m: sub prefix:<ⁿ> ($a) { say "works" }; ⁿ 2
[14:46:18] <camelia> rakudo-moar d668d9929: OUTPUT: «works␤»
[14:46:59] <raydiak> m: sub infix:<ⁿ> ($a, $b) { say "works" }; 1 ⁿ 2
[14:47:00] <camelia> rakudo-moar d668d9929: OUTPUT: «works␤»
[14:47:18] <raydiak> m: sub postfix:<ⁿ> ($a) { say "works" }; 1 ⁿ
[14:47:18] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub postfix:<ⁿ> ($a) { say "works" }; 17⏏5 ⁿ␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statem…»
[14:47:20] <raydiak> m: sub postfix:<ⁿ> ($a) { say "works" }; 1ⁿ
[14:47:21] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3sub postfix:<ⁿ> ($a) { say "works" }; 17⏏5ⁿ␤    expecting any of:␤        whitespace␤»
[14:49:46] <raydiak> and again if you use n instead of ⁿ, then postfix does work (without a space)
[14:49:50] <raydiak> sub postfix:<n> ($a) { say "works" }; 1n
[14:49:51] <evalable6> raydiak, rakudo-moar d668d9929: OUTPUT: «works␤»
[14:49:58] <raydiak> m: sub postfix:<n> ($a) { say "works" }; 1 n
[14:49:59] <camelia> rakudo-moar d668d9929: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3sub postfix:<n> ($a) { say "works" }; 17⏏5 n␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement …»
[14:52:25] <raydiak> m: say uniprop "n"; say uniprop "ⁿ";
[14:52:25] <camelia> rakudo-moar d668d9929: OUTPUT: «Ll␤Lm␤»
[14:53:00] <raydiak> something about that difference is likely the cause
[14:55:07] <raydiak> anyway, it doesn't bother me if someone has to write a slang to do that :) just a curiosity
[15:33:24] *** Quits: linkable6 (~lin-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[15:35:47] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[15:52:00] <mykhal> m: say "{ (2**1000).log2 }, { (2**1024).log2 }"
[15:52:00] <camelia> rakudo-moar d668d9929: OUTPUT: «1000.0000000000001, Inf␤»
[15:53:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[15:55:04] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:56:34] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[15:57:04] *** Server sets mode: +nt 
[15:58:28] <pony> m: say (2**1024).Str.chars
[15:58:28] <camelia> rakudo-moar d668d9929: OUTPUT: «309␤»
[15:59:05] <pony> nite
[16:18:37] *** Joins: holyghost (~goon@2a02:a03f:64c8:9200:6d38:10eb:c49a:e445)
[16:32:39] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[16:35:18] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[16:50:35] *** Joins: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[16:51:43] *** Joins: cognominal_ (~cognomina@lfbn-idf1-1-760-229.w86-245.abo.wanadoo.fr)
[16:52:00] *** Quits: TempIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[16:53:52] *** Quits: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 268 seconds)
[16:55:05] *** Quits: cognominal (~cognomina@lfbn-idf1-1-760-229.w86-245.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:57:47] *** Quits: lizmat_ (~textual@ipv4-wenzperl.connected.by.freedominter.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:57:59] *** Joins: lizmat (~textual@ipv4-wenzperl.connected.by.freedominter.net)
[16:59:05] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[17:45:08] *** Joins: monkey_ (~user@190.104.116.134)
[17:53:23] *** Joins: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net)
[18:37:03] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 255 seconds)
[18:39:58] *** Quits: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net) (Quit: guifa)
[18:47:51] *** Quits: keutoi (~keutoi@157.47.111.203) (Ping timeout: 255 seconds)
[18:49:47] *** Joins: keutoi (~keutoi@106.208.22.182)
[19:07:34] *** Joins: abraxxa-home (~alex@2a01:100:2000:2500::22)
[19:14:42] *** Quits: keutoi (~keutoi@106.208.22.182) (Ping timeout: 265 seconds)
[19:28:38] *** Quits: dg (dgl@dg.wtf) (Ping timeout: 268 seconds)
[19:30:28] *** Joins: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net)
[19:32:42] *** Joins: monkey_ (~user@190.104.116.134)
[20:11:31] *** Joins: keutoi (~keutoi@223.237.21.130)
[20:15:16] *** Joins: Eddward_ (~Eddward@207.138.204.132)
[20:23:28] *** Quits: keutoi (~keutoi@223.237.21.130) (Quit: leaving)
[20:35:50] *** Joins: algorev (~algorev@182.87.5.85.dynamic.wline.res.cust.swisscom.ch)
[20:36:03] <algorev> hello
[20:36:28] <algorev> weird question but
[20:37:15] <algorev> is there any chance raku _parses_ the received text when you use Socket::INET.recv?
[20:37:55] <algorev> i have this code:
[20:38:32] <algorev> my $sock = IO::Socket::INET.new(:host<google.com>, :port(80));
[20:38:32] <algorev> $sock.print("GET" ~ " / HTTP/1.1\r\n\r\n");
[20:38:33] <algorev> .say for $sock.lines;
[20:38:40] <algorev> .
[20:38:45] <algorev> it fails the following way
[20:39:43] <algorev> <response from google> malformed utf-8 near bytes 67 65 f6
[20:39:57] <algorev> in block <unit> at .\gutenberg.raku line 3
[20:40:09] <algorev> so is it caused by the length of google's response?
[20:40:23] <algorev> or just an invalid character that's being printed?
[20:40:41] <algorev> what confuses me is that the error makes it sound like it's my code that doesn't parse
[20:40:50] <algorev> so i don't know
[20:41:26] <guifa> malformed utf-8 means something was off in the byte stream  as it tried to convert to a Str
[20:42:16] <algorev> i see
[20:42:38] <algorev> so it's the conversion to Str in '.say'?
[20:43:28] <algorev> so the malformed character would be in the server's response?
[20:44:05] <guifa> Likely.  You might try reading it in binary mode and manually decoded as UTF-8, and then you can set a replacement character
[20:44:19] <algorev> i see. thanks a lot!
[20:44:34] *** Parts: algorev (~algorev@182.87.5.85.dynamic.wline.res.cust.swisscom.ch) ()
[20:44:48] <ugexe> well at the very least thats going to forward you to https and you'll need IO::Socket::SSL for that
[20:45:50] <ugexe> (not that that would cause your issue)
[20:53:27] <ugexe> while (my $output = $sock.get) { say $output } # this works instead of $sock.lines although i would expect them to both work similarly
[20:54:53] <ugexe> ah no it doesnt
[20:56:20] <ugexe> my $sock = IO::Socket::INET.new(:encoding<utf8-c8>, :host<google.com>, :port(80)); $sock.print("GET" ~ " / HTTP/1.0\r\n\r\n"); say $_ for $sock.lines
[20:56:21] <evalable6> ugexe, rakudo-moar b0caab5bf: OUTPUT: «HTTP/1.0 200 OK␤Date: Sun, 18 Jul 2021 16:26:21…»
[20:56:22] <evalable6> ugexe, Full output: https://gist.github.com/c51abccd0f91269990fcf4ecd7d7627f
[20:57:07] <ugexe> adding the :encoding that won't crap out on invalid utf8 allows it to run. note though that i also switched your example to http 1.0 since 1.1 will have chunked transfer encoding which you may not be expecting
[21:23:38] *** Quits: abraxxa-home (~alex@2a01:100:2000:2500::22) (Remote host closed the connection)
[21:30:58] *** Quits: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net) (Quit: guifa)
[21:47:35] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[22:25:10] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:33:01] *** Quits: reportable6 (~rep-able@ns306169.ip-94-23-219.eu) (Remote host closed the connection)
[22:33:16] *** Joins: reportable6 (~rep-able@ns306169.ip-94-23-219.eu)
[22:36:22] *** Quits: Guest77 (~Guest77@2402:e280:2117:297:ecf8:f374:8704:f843) (Quit: Client closed)
[22:47:00] *** Quits: RakuIRCLogger (~RakuIRC@ipv4-wenzperl.connected.by.freedominter.net) (Ping timeout: 276 seconds)
[22:48:28] *** Joins: jgaz (~jgaz@2600:8805:d800:b3e::2a2)
[23:06:40] *** Quits: jgaz (~jgaz@2600:8805:d800:b3e::2a2) (Quit: Leaving)
[23:29:51] *** Joins: monkey_ (~user@190.104.116.134)
[23:46:59] *** Joins: guifa (~guifa@static-168-71-26-46.ipcom.comunitel.net)
[23:59:42] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 255 seconds)
