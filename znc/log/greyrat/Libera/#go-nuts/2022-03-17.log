[00:00:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:01:17] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:01:55] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:01:56] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:07:35] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[00:10:14] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:10:14] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:10:25] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:10:28] *** Joins: foobaz21248467 (~foobaz212@152.37.103.80)
[00:14:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:16:44] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:18:50] *** Joins: independent_ (~independe@2.26.38.133)
[00:18:52] *** Quits: independent56 (~independe@2.26.38.133) (Read error: Connection reset by peer)
[00:22:00] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[00:22:00] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[00:22:00] *** Joins: tane (~tane@user/tane)
[00:24:01] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[00:28:58] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[00:38:12] <MrElendig> fix the certificate?
[00:39:43] *** Joins: rawrrr (uid540880@id-540880.lymington.irccloud.com)
[00:41:04] <albertito> sleepingforest: I don't think you can skip certificate parsing entirely. You can skip validation like that, but IIRC, not the parsing
[00:43:35] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[00:44:47] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:45:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1)
[00:46:43] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:46:43] *** Quits: foobaz21248467 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:46:56] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:46:57] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[00:47:05] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[00:47:06] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:47:38] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[00:47:58] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[00:54:42] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[00:56:54] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[01:01:04] *** Joins: cation21 (cation@user/cation)
[01:01:48] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:02:16] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[01:04:26] *** cation21 is now known as cation
[01:07:57] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[01:08:09] *** Joins: moog_ (~moog@98.97.86.136)
[01:10:06] *** Joins: foobaz21266 (~foobaz212@109.249.187.65)
[01:10:06] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:10:17] *** Parts: dminuoso (~dminuoso@user/dminuoso) (WeeChat 3.3)
[01:10:39] *** Quits: moog (~moog@107.126.53.19) (Ping timeout: 252 seconds)
[01:11:10] *** Joins: cation21 (cation@user/cation)
[01:11:32] *** Quits: cation (cation@user/cation) (Ping timeout: 240 seconds)
[01:13:54] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[01:14:12] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[01:14:13] *** Quits: foobaz21266 (~foobaz212@109.249.187.65) (Client Quit)
[01:14:29] *** cation21 is now known as cation
[01:15:55] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[01:16:02] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[01:18:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[01:20:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:24:01] *** Quits: bradp- (~bradp@cpe-70-92-7-182.wi.res.rr.com) (Ping timeout: 256 seconds)
[01:24:06] <sleepingforest> MrElendig: no. its not mine
[01:25:03] <sleepingforest> in any case, crypto/tls client does not raise the ssl alert code with the error, only the string associated with it, which is silly
[01:27:07] <sleepingforest> the error message is confusing, like what is wrong with what certificate? in my case the server raises alert 42, which means it expects a client certificate.
[01:29:07] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[01:36:33] *** Joins: rcernin (~rcernin@101.189.129.123)
[01:37:07] <b0nn> sleepingforest: Sorry, what exactly are you trying to do, and what is the problem?
[01:37:33] <b0nn> It looks like you are trying to create a client that is having trouble with the tls cert being delivered by the server?
[01:37:40] <b0nn> or is it mTLS?
[01:39:39] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:41:12] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Quit: Client closed)
[01:41:39] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:43:36] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:44:00] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:44:25] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:44:45] *** Quits: naquad (~naquad@79.135.214.17) (Ping timeout: 252 seconds)
[01:45:26] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:45:53] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:46:02] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:46:21] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[01:46:22] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:47:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[01:48:03] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:48:36] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:49:41] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:49:50] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Client Quit)
[01:49:59] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[01:51:39] *** Joins: foobaz21248467 (~foobaz212@109.249.187.65)
[01:51:41] *** Quits: foobaz21248467 (~foobaz212@109.249.187.65) (Write error: Broken pipe)
[01:52:38] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[01:55:12] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[01:57:31] *** Joins: naquad (~naquad@79.135.214.17)
[02:03:34] *** Quits: normen_ (~normen@p200300d71749cc0059fc20da35d9f3a8.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:04:05] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:04:53] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[02:07:14] *** Quits: khyr0n (~khyr0n@2806:2f0:9261:d45c:79c7:f693:7506:6abf) (Ping timeout: 268 seconds)
[02:11:21] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:16:32] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[02:16:47] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[02:18:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[02:26:20] *** Joins: khyr0n (~khyr0n@200.68.129.137)
[02:27:11] *** Quits: khyr0n (~khyr0n@200.68.129.137) (Client Quit)
[02:27:30] *** Joins: khyr0n (~khyr0n@200.68.129.137)
[02:29:33] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-5562-7079-f686-c708.ip6.gigabit.dk)
[02:29:59] *** Joins: blacked (~blacked@user/blacked)
[02:30:18] *** Joins: normen_ (~normen@p200300d71749cc00b8df09a13b5e2678.dip0.t-ipconnect.de)
[02:31:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:33:30] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:36:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[02:38:21] *** Joins: Torr (~Torr@user/torr)
[02:41:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[02:47:33] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:8174:f154:7a1f:b012) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:48:14] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:fc89:7b4:4bec:8700)
[02:50:09] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[02:50:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:54:41] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:55:04] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[03:00:58] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[03:02:56] <blacked> When i run net.Dial
[03:03:00] <blacked> for finding open port
[03:03:45] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[03:05:53] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:2994:1fbd:6642:1fc1) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:18:15] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[03:18:32] *** Quits: normen_ (~normen@p200300d71749cc00b8df09a13b5e2678.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:18:40] *** Quits: blacked (~blacked@user/blacked) (Quit: Client closed)
[03:28:20] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[03:28:36] *** Quits: independent_ (~independe@2.26.38.133) (Ping timeout: 240 seconds)
[03:30:17] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[03:31:02] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0) (Ping timeout: 240 seconds)
[03:40:43] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[03:41:08] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[03:45:07] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[03:52:09] <b0nn> oh they left, I /so/ wanted to say "blacked: words, use your words"
[03:53:05] <rewt> as in int64s?
[04:03:51] *** Joins: roshanavand (~roshanava@185.213.155.232)
[04:05:07] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Leaving)
[04:07:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:13:40] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[04:14:55] <senoraraton> I'm building a fullstack app with go as my backend.  I want to init go in ./serve so that my backend code is isolate from my front end in ./client  Can I do that?
[04:15:31] <b0nn> uhhh, sure
[04:16:01] <b0nn> but, only question, how does your client /get/ the client code
[04:16:37] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 240 seconds)
[04:16:48] <senoraraton> My client fetches data from the remote source, and then passes that data though a websocket request to my backend.  Then my backend does things, and returns a response through the socket.
[04:17:17] <senoraraton> My client code is in Java, and is built seperately from the go backend.
[04:18:06] <b0nn> I mean, there's no reason that your front end and backend are coupled, as long as they speak a common language (usually JSON, but, anything's possible)
[04:19:00] <senoraraton> I'm more trying to understand how to structure the project. Like I said I want to isolate the code bases in seperate folderes within the root repo.
[04:19:13] <senoraraton> So I run go mod init in root?  Or can I just run go mod init in the serve dir?
[04:19:24] <b0nn> yeah - there's no reason that they need to be on the same computer
[04:19:53] <senoraraton> They won't be.  The Java side is running client side on Android, and the backend is running on my server.
[04:19:54] <bpalmer> senoraraton: oh, your question is about go mod init, not the initialization of go code?
[04:20:00] <b0nn> go tools are only going to run on go code/modules
[04:20:39] <b0nn> I have bash, perl, and markdown in one repo
[04:20:43] <senoraraton> bpalmer More that, I want to init the go project and have all of those contained files and references be to ./serve not the root of the repo.  I want go to think that ./serve IS the head of the go repo.
[04:24:37] <fizzie> In that case perhaps see https://go.dev/doc/modules/managing-source#multiple-module-source for the short version of including multiple Go modules in a single repository. But it's perhaps not the most common thing to do. It's not like you would *have* to have dependencies between packages in ./serve and ./client just because they're part of the same module.
[04:25:02] *** Quits: khyr0n (~khyr0n@200.68.129.137) (Ping timeout: 240 seconds)
[04:25:52] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[04:27:32] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[04:30:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:31:21] <senoraraton> I think I'm just gonna init in root, and write a compile script that just compiles ./serve/src/main.go
[04:31:24] *** Joins: xavie (~xavie@176-139-252-198.abo.bbox.fr)
[04:32:12] <b0nn> heh, "compile script" is now called "CI/CD action" :-)
[04:33:01] <senoraraton> Noted.
[04:33:20] *** Joins: xavie1 (~xavie@176-139-252-198.abo.bbox.fr)
[04:33:51] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 256 seconds)
[04:34:33] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:34:50] <senoraraton> Actually, I'm going to make main.go in the root, use that as my entrypoint, and import my submodule in /serve.
[04:36:06] *** Quits: xavie (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 250 seconds)
[04:37:05] *** Joins: Batzy (~quassel@user/batzy)
[04:38:33] *** Quits: anessen97 (~Anessen97@host-87-0-228-157.retail.telecomitalia.it) (Ping timeout: 252 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:52:31] *** Joins: anessen97 (~Anessen97@host-87-0-226-185.retail.telecomitalia.it)
[04:54:00] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[04:56:31] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[05:07:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:07:59] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:fc89:7b4:4bec:8700) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:12:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[05:12:39] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 252 seconds)
[05:13:42] *** Joins: cstls (~ruiner@2603-7081-0800-4824-7164-00c9-e652-b0d7.res6.spectrum.com)
[05:13:48] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:19:52] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 250 seconds)
[05:21:51] *** Joins: roshanavand (~roshanava@185.213.155.232)
[05:23:33] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:24:15] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:55c1:8dae:a73a:de83)
[05:26:22] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[05:28:36] *** Quits: BUSY (~BUSY@user/busy) (Read error: Connection reset by peer)
[05:29:54] *** Quits: fmartingr (~fmartingr@user/fmartingr) (Quit: Ping timeout (120 seconds))
[05:30:02] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:55c1:8dae:a73a:de83) (Ping timeout: 240 seconds)
[05:30:15] *** Joins: fmartingr (~fmartingr@user/fmartingr)
[05:30:47] *** Joins: hanzo (uid532183@user/hanzo)
[05:33:46] *** Joins: andlabs (~andlabs@2605:ef80:8095:31c:60ce:d946:30f3:8d04)
[05:35:02] *** Joins: bindu_ (~bindu@user/bindu)
[05:35:15] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[05:36:48] *** bindu_ is now known as bindu
[05:38:30] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[05:40:17] *** Quits: andlabs (~andlabs@2605:ef80:8095:31c:60ce:d946:30f3:8d04) (Ping timeout: 240 seconds)
[05:42:16] *** Joins: andlabs (~andlabs@2605:ef80:8094:5324:8494:f8de:9774:f186)
[05:43:18] *** Joins: BUSY (~BUSY@user/busy)
[05:47:02] *** Quits: shtirlic_ (~shtirlic@184.22.158.189) (Ping timeout: 240 seconds)
[05:50:03] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[05:50:52] *** Joins: shtirlic (~shtirlic@184.22.158.189)
[05:52:18] *** Quits: cstls (~ruiner@2603-7081-0800-4824-7164-00c9-e652-b0d7.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:52:54] *** Joins: cstls (~ruiner@2603-7081-0800-4824-7164-00c9-e652-b0d7.res6.spectrum.com)
[05:55:48] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 240 seconds)
[05:56:27] *** Joins: dsrt^ (~dsrt@65.240.140.18)
[06:05:08] *** Joins: crashrep (~crashrep@user/crashrep)
[06:05:42] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:16:04] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[06:30:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:33:05] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[06:40:36] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 240 seconds)
[06:41:07] *** Joins: rickybob (~rickybob@35.143.255.39)
[06:44:27] *** Joins: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b)
[06:44:33] *** Parts: Guest3302 (~arc@2601:586:8100:bc30:f0b5:6a0f:f4ae:e63b) ()
[06:44:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[06:48:29] *** Quits: andlabs (~andlabs@2605:ef80:8094:5324:8494:f8de:9774:f186) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:52:17] *** Quits: LiftLeft (~LiftLeft@airstream-nelson-fiber-dhcp-007-17.dsl.airstreamcomm.net) (Ping timeout: 240 seconds)
[06:54:15] *** Quits: cstls (~ruiner@2603-7081-0800-4824-7164-00c9-e652-b0d7.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:02:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[07:07:00] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 240 seconds)
[07:10:35] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[07:16:13] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 240 seconds)
[07:16:22] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[07:19:40] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:19:53] *** Joins: crashrep (~crashrep@user/crashrep)
[07:22:11] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[07:27:16] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:30:06] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[07:31:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:33:39] *** Joins: mooff (mooff@awful.cooking)
[07:36:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[07:39:32] *** Joins: rvrb (~rvrb@71-34-72-73.ptld.qwest.net)
[07:43:18] *** Quits: stuart (~stuart@55d4abae.access.ecotel.net) (Ping timeout: 250 seconds)
[07:44:58] *** Joins: stuart (~stuart@55d4ae90.access.ecotel.net)
[07:45:37] *** Quits: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[07:54:44] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[07:59:48] *** Joins: k8yun (~k8yun@user/k8yun)
[08:00:09] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[08:00:47] *** Quits: jackneillll (~jackneill@20014C4E180A7400029B2DD175701BDE.dsl.pool.telekom.hu) (Remote host closed the connection)
[08:01:04] *** Joins: jackneillll (~jackneill@20014C4E180A7400710745A438DDC949.dsl.pool.telekom.hu)
[08:06:10] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:10:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:12:41] *** Joins: Compy_ (~compy@user/compy)
[08:15:57] *** Quits: Compy (~compy@user/compy) (Ping timeout: 240 seconds)
[08:15:58] *** Compy_ is now known as Compy
[08:20:23] *** Joins: adip (~adip@aeiv69.neoplus.adsl.tpnet.pl)
[08:24:15] *** Joins: CCCG2022 (~dell@120.245.30.75)
[08:25:46] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 250 seconds)
[08:27:34] *** Joins: ejjfunky (~ejjfunky@125.164.23.99)
[08:31:55] *** Parts: CCCG2022 (~dell@120.245.30.75) ()
[08:36:37] *** Quits: rvrb (~rvrb@71-34-72-73.ptld.qwest.net) (Ping timeout: 240 seconds)
[08:39:10] *** Quits: Compy (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[08:42:44] *** Joins: hackers (~self@user/hackers)
[08:48:52] *** Joins: rvrb (~rvrb@71-34-72-73.ptld.qwest.net)
[08:49:15] *** Quits: rvrb (~rvrb@71-34-72-73.ptld.qwest.net) (Client Quit)
[08:53:14] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[08:58:19] *** Joins: jpw (~jpw@user/jpw)
[09:02:49] *** Joins: shtirlic_ (~shtirlic@182.232.138.145)
[09:05:50] *** Quits: shtirlic (~shtirlic@184.22.158.189) (Ping timeout: 252 seconds)
[09:08:03] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 252 seconds)
[09:09:18] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Read error: Connection reset by peer)
[09:09:36] *** Joins: han-solo (~hanish@user/han-solo)
[09:10:15] *** Quits: pjs (~pjs@user/pjs) (Ping timeout: 252 seconds)
[09:16:25] *** Quits: shtirlic_ (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[09:17:27] *** Quits: rickybob (~rickybob@35.143.255.39) (Quit: rickybob)
[09:19:58] *** Joins: shtirlic (~shtirlic@184.22.158.189)
[09:25:00] *** Joins: shtirlic_ (~shtirlic@182.232.138.145)
[09:27:22] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[09:28:18] *** Quits: shtirlic (~shtirlic@184.22.158.189) (Ping timeout: 260 seconds)
[09:32:39] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[09:35:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[09:37:17] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 240 seconds)
[09:58:36] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Ping timeout: 240 seconds)
[09:59:38] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[10:05:47] *** Joins: k8yun (~k8yun@user/k8yun)
[10:09:02] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.4)
[10:13:06] *** Joins: independent_ (~independe@2.26.38.133)
[10:19:44] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 250 seconds)
[10:20:06] *** Joins: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk)
[10:22:10] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:22:32] *** Joins: mohan43u (~mohan@user/mohan43u)
[10:25:37] <lilgopher> I'm trying to make tracing work with Go and Jaeger. I try to inject required context here: https://github.com/dmartzol/goapi/blob/tracing/internal/handler/handler.go#L65 and then I try to fetch it from here https://github.com/dmartzol/goapi/blob/tracing/internal/handler/version.go#L16 but I cannot get any tracing visible and the logs are confusing and show a spanId of all zeroes
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:29:59] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:31:47] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[10:46:14] *** Joins: Atque (~Atque@user/atque)
[10:50:35] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:51:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:51:22] *** Quits: shtirlic_ (~shtirlic@182.232.138.145) (Ping timeout: 260 seconds)
[10:55:51] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[10:56:29] *** Joins: roshanavand (~roshanava@185.213.155.232)
[10:58:49] *** Quits: roshanavand (~roshanava@185.213.155.232) (Remote host closed the connection)
[10:59:28] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[11:07:57] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:14:57] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:17:48] *** Joins: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net)
[11:18:56] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[11:23:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:24:07] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[11:29:01] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[11:35:18] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:35:25] *** Joins: shka (~herr@109.231.3.55)
[11:35:48] *** Quits: faceonkeyboard (~faceonkey@anquietas.itsh.dev) (Quit: Bridge terminating on SIGTERM)
[11:36:55] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[11:38:20] *** Joins: faceonkeyboard (~faceonkey@anquietas.itsh.dev)
[11:38:52] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:40:22] *** Joins: absc (~absc@81.31.144.28)
[11:40:55] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Read error: Connection reset by peer)
[11:43:55] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[11:44:48] *** Joins: epony (epony@user/epony)
[11:48:29] *** Quits: independent_ (~independe@2.26.38.133) (Ping timeout: 256 seconds)
[11:55:18] *** Joins: et_ (~et@user/et)
[11:56:11] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[11:59:57] *** Quits: et_ (~et@user/et) (Ping timeout: 240 seconds)
[12:02:35] *** Joins: arinov (~arinov@213.194.126.155)
[12:06:38] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[12:07:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 250 seconds)
[12:08:02] *** Joins: allana (~user@user/allana)
[12:09:48] *** Joins: aLeSD (~aLeSD@91.126.33.194)
[12:09:50] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Quit: WeeChat 3.4)
[12:14:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:18:57] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[12:23:15] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:26:30] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:40] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[12:31:17] *** Parts: xavie1 (~xavie@176-139-252-198.abo.bbox.fr) ()
[12:31:43] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[12:33:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:33:43] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:35:22] *** Quits: han-solo (~hanish@user/han-solo) (Ping timeout: 250 seconds)
[12:38:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[12:39:09] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[12:40:47] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[12:47:30] *** Quits: nakedeyes (~nathan@user/nandormagyar) (Quit: WeeChat 1.9.1)
[12:48:42] *** Joins: han-solo (~hanish@user/han-solo)
[12:49:01] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[12:49:19] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:56:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Ping timeout: 250 seconds)
[13:02:25] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:06:22] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[13:08:09] *** Quits: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com) (Ping timeout: 256 seconds)
[13:08:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:10:35] *** Joins: LordDoskias (~lorddoski@nborisov.ddns.nbis.net)
[13:11:06] <LordDoskias> if my module depends on aanother module that has cgo parts, then when i rebuild my module would it also be rebuilding the dependency if it hasn't changed?
[13:11:49] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[13:14:19] *** Joins: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0)
[13:15:14] *** Quits: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:20:36] *** Joins: lord4163 (~lord4163@81-233-183-142-no86.tbcn.telia.com)
[13:21:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:23:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[13:26:30] *** Quits: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net) (Ping timeout: 250 seconds)
[13:26:45] *** Joins: anticw (~anticw@157-131-153-146.fiber.dynamic.sonic.net)
[13:26:57] *** Quits: willow (~willow@user/willow) (Ping timeout: 240 seconds)
[13:27:20] *** Joins: willow (~willow@bay.systems)
[13:27:20] *** Quits: willow (~willow@bay.systems) (Changing host)
[13:27:20] *** Joins: willow (~willow@user/willow)
[13:29:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:35:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:39:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:41:10] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[14:00:59] *** Joins: shtirlic_ (~shtirlic@182.232.138.145)
[14:01:00] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 240 seconds)
[14:03:55] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Ping timeout: 256 seconds)
[14:05:17] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[14:06:46] <fizzie> LordDoskias: If it hasn't changed, cached build outputs should get used instead of rebuilding even for packages that use cgo. In fact, it may cache *too* much, since it doesn't detect changes to C libraries. There's some documentation at https://pkg.go.dev/cmd/go#hdr-Build_and_test_caching
[14:06:55] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[14:10:17] <LordDoskias> the reason i'm asking is if i run 'go build' with appropriate flags inside this packages' directory
[14:10:32] <LordDoskias> and subsequently i want to build my own module that depends on already-built module
[14:10:43] <LordDoskias> do i need to pass in any specific CGO _CFLAGS (my testing shows yes)
[14:11:06] <LordDoskias> that is i have module A (mine) which depends on module B, but module B depends on being statically linked against some library
[14:11:23] <LordDoskias> so when building A, do i need to pass CGO_LDFLAG="-lfoo"
[14:11:30] <LordDoskias> where foo is a library required by module B ?
[14:14:11] <fizzie> If it *always* requires the `-lfoo`, you'd hope that some file in module B would include an `// #cgo LDFLAGS: -lfoo` directive, so that it would get automatically added every time you build an executable that depends on it.
[14:14:51] <fizzie> But if you do need to add it explicitly, it's a *linking* flag, so yes, you need to build it when building the actual executable. It doesn't get used when just compiling the package.
[14:15:56] <LordDoskias> ok
[14:16:09] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:16:23] <LordDoskias> but by the same token i also need to add CGO_CFLAGS="-Ipath" because module B in its cgo preamble includes a header from path
[14:16:56] <LordDoskias> the reason i'm asking is if module B is a library, which has been built once, then why do i need to pass flags pertaining to its build when i'm building a project which depends on it
[14:17:49] <fizzie> I would imagine CGO_CFLAGS="..." would only be strictly "needed" when actually compiling the package, but maybe it's also used as part of the cache key? Given that it may arbitrarily change what the package does.
[14:20:42] <LordDoskias> https://pastebin.com/bwYTU2pq
[14:21:07] <LordDoskias> this is my build output so running make first goes into third_party/libbpfgo and executes make in there which correctly builds module B as evident from the CC=... line
[14:21:37] <LordDoskias> then it goes back to build my actual project and as a result of that it has to build one of the dependencies: # github.com/aquasecurity/libbpfgo
[14:21:37] <LordDoskias>  
[14:21:50] <LordDoskias> which is module b, that has CGO and i Have this in my go.mod: replace github.com/aquasecurity/libbpfgo => ./third_party/libbpfgo
[14:21:54] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[14:22:17] <LordDoskias> so by the time # github.com/aquasecurity/libbpfgo has to be built everything under ./third_party/libbfpgo should have already been done
[14:22:51] <LordDoskias> here is what the make linux recipe does: $(GOFLAGS) go run make.go -v linux
[14:22:52] *** Joins: ekathva_ (~ekathva@mobile-access-5d6abb-218.dhcp.inet.fi)
[14:23:19] <LordDoskias> so if the GOFLAGS don't contain flags necessary to build module B _after_ it was supposed to be build my project build fails
[14:23:36] <fizzie> Yeah, and my pure guess was that changing CGO_CFLAGS could make it not consider the cached build output, because a package built with one set of flags might do something completely different than without.
[14:23:42] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 250 seconds)
[14:24:28] <LordDoskias> but if module B was build even outside of the builid process for module A (mine)
[14:24:48] <LordDoskias> shouldn't module B not be considered for compilation but included directly?
[14:24:54] <LordDoskias> i guess i don't know how the cache is keyed
[14:25:17] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 240 seconds)
[14:25:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[14:26:13] <fizzie> The cache is just an optimization. Conceptually, anything you pass as CGO_CFLAGS should get used to all packages depended on by the thing you're building. So it would make sense for it to be part of the cache key.
[14:26:38] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:27:43] <LordDoskias> hm i tried running:     $(GOFLAGS) GODEBUG=gocachetest=1 go run make.go -v linux
[14:27:49] *** Joins: Midjak (~Midjak@82.66.147.146)
[14:27:49] <LordDoskias> to see what happens but i don't get any extra output
[14:27:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:30:00] *** Joins: aLeSD_ (~aLeSD@91.126.33.194)
[14:30:12] *** Quits: aLeSD (~aLeSD@91.126.33.194) (Ping timeout: 240 seconds)
[14:32:22] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[14:38:51] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[14:39:02] *** Quits: shtirlic_ (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[14:39:20] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[14:42:45] *** Joins: fef (~thedawn@user/thedawn)
[14:44:22] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:45:17] *** Quits: ekathva_ (~ekathva@mobile-access-5d6abb-218.dhcp.inet.fi) (Ping timeout: 256 seconds)
[14:49:13] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[14:49:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:50:50] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:56:45] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[14:57:56] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[14:58:21] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[14:58:48] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[15:00:27] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Client Quit)
[15:01:15] *** Joins: xsteadfastx (~marv@94.31.99.245)
[15:01:29] <LordDoskias> well adding -x -work doesn't seem to indicate anything is built at all..
[15:04:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:06:24] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:08:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[15:15:11] *** Joins: et (~et@user/et)
[15:18:30] *** Quits: et (~et@user/et) (Read error: Connection reset by peer)
[15:18:34] *** Joins: et_ (~et@user/et)
[15:21:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:21:27] *** et_ is now known as et
[15:21:31] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 250 seconds)
[15:22:08] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[15:22:20] *** Joins: habamax (~habamax@user/habamax)
[15:22:59] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[15:25:32] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[15:26:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[15:28:51] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Remote host closed the connection)
[15:31:08] *** Joins: mud (~mud@user/kadoban)
[15:41:20] *** Quits: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[15:41:57] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[15:43:48] *** Quits: LordDoskias (~lorddoski@nborisov.ddns.nbis.net) (Quit: Leaving)
[15:47:37] *** Joins: et (~et@user/et)
[15:52:02] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[15:53:15] *** Joins: et (~et@user/et)
[15:54:57] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[15:54:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:57:34] *** Joins: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr)
[15:59:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:00:32] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[16:03:30] *** Quits: agrosant (~agrosant@79.103.7.27.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[16:10:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[16:17:56] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:18:50] *** Joins: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr)
[16:19:14] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:21:41] *** Quits: lidless (lidless@user/lidless) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[16:21:51] *** Joins: lidless (lidless@2600:3c02::f03c:93ff:fe98:5c43)
[16:22:45] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[16:23:23] *** Quits: agrosant (~agrosant@79.103.143.96.dsl.dyn.forthnet.gr) (Max SendQ exceeded)
[16:24:07] *** Quits: lidless (lidless@2600:3c02::f03c:93ff:fe98:5c43) (Changing host)
[16:24:07] *** Joins: lidless (lidless@user/lidless)
[16:27:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:27:54] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[16:32:03] *** Joins: cstls (~ruiner@2603-7081-0800-4824-74ba-6cb4-3c1f-2baf.res6.spectrum.com)
[16:32:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:35:12] *** Joins: arkurious (~arkurious@user/arkurious)
[16:40:25] *** Joins: aog_ (~aog@user/aog)
[16:40:36] *** Quits: aog (~aog@user/aog) (Quit: "flying away...")
[16:40:55] *** aog_ is now known as aog
[16:47:07] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[17:12:08] *** Joins: et (~et@user/et)
[17:14:04] *** Joins: shtirlic_ (~shtirlic@182.232.138.145)
[17:14:10] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[17:14:45] *** Quits: allana (~user@user/allana) (Remote host closed the connection)
[17:19:45] *** Quits: et (~et@user/et) (Ping timeout: 252 seconds)
[17:20:09] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[17:20:52] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[17:22:34] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Read error: Connection reset by peer)
[17:22:59] *** Quits: shtirlic_ (~shtirlic@182.232.138.145) (Ping timeout: 268 seconds)
[17:29:39] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:32:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:33:00] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:34:56] *** Quits: jimeh (jimeh@matrix.bah.io) (Remote host closed the connection)
[17:36:11] *** Joins: jimeh (jimeh@matrix.bah.io)
[17:36:28] *** Quits: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk) (Quit: WeeChat 3.4.1)
[17:51:48] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:55:44] *** Joins: andlabs (~andlabs@2605:ef80:8083:12ec:24c8:fdbd:d718:8685)
[17:56:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[17:59:20] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Read error: Connection reset by peer)
[17:59:30] *** Joins: shtirlic (~shtirlic@182.232.138.145)
[18:03:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:05:20] *** Joins: et (~et@user/et)
[18:11:47] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[18:12:27] <synthmeat> how do you go about testing (a lot, hundreds) of 3rd party apis? just integration?
[18:13:23] <synthmeat> or not even that, just continuously monitoring that it works?
[18:14:53] <jimeh> depends on what the APIs do I guess... terraform providers for example, which use cloud provider APIs to create virtual machines and whatnot, typically do what they call "acceptance testing", which involves running the provider with real stuff against the real API and verifying resources do get created as expected...
[18:15:31] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[18:15:45] *** Joins: rvalue (~rvalue@user/rvalue)
[18:16:44] <jimeh> however, that's an impractical type of test suite to run for PRs and such, so you'd generally use a vcr-like request recording/playback package for most tests, including in PRs and such... only annoyance there is when you're changing stuff so new requests are made, at which point locally you'll need to run it against real APIs to record and commit the requests so PR tests can pass...
[18:17:09] <synthmeat> jimeh: and in the case they're pretty simple rest/graphql req/res apis? that's my use case.
[18:17:29] <synthmeat> (oh, sorry, didn't notice ellipsis on the 2nd msg :))
[18:19:23] <jimeh> well, depends... do you want to test that the API still works, or that your code is making the correct requests against the API? for the later you could use a custom http transport that fakes all the requests... for the former though, a separate test suite could be argued, or potentially just run your code and assert it does what it should and classify the API as working in that case...
[18:20:57] <siXy> What sort of API they are makes almost no difference. It's what calling the API actually _does_ that's important, and without thinking that through it's not possible to figure out how to test correctly.
[18:23:40] <synthmeat> right. so, if i had to figure out requirements they'd be 1) make sure horde of cowboys doing the implementations for each API are doing it correctly, and 2) that it works. i guess for #2 we're talking more instrumentation than strictly testing
[18:23:46] <jimeh> I mean, ideally if you're not responsible for maintaining the API, you should assume it just works as documented and focus your testing on your own code... however, there are definitely times when external APIs have proven themselves to be unstable/broken, at which writing bespoke integration-style test suites against them is probably the only option you have if you don't have access to code/deployment of the API in question... lol
[18:24:50] <jimeh> yeah, if you want to verify an external API actually behaves as documented, some form of integration style test is the best approach I'd say...
[18:25:23] <synthmeat> ok, 3rd requirement would be 3) structure it up right (in aspect of testing for the purposes of this conversation), whatever it is. since i could have a tough time refactoring that later on, it's a lot of LOC
[18:25:43] <jimeh> even with internal APIs, I've had times where bugs were discovered thanks by another project that ran nightly integration tests via Terraform that under the hood talked to some API... lol
[18:26:19] <synthmeat> yeah, i saw that hashicorp talk(s), that's some nice robust stuff they have there
[18:27:20] *** Joins: Tasi (~Tasi@20014C4C220C8F009D313B49672700E8.catv.pool.telekom.hu)
[18:27:37] <jimeh> I'd say, if you care about your software working correctly more than some API behaving the way it should, write an integration test suite for your software...
[18:28:20] <jimeh> but if there's value is the abstract knowledge of API Foo working correctly, maybe because you have lots of different things that depend on it working correctly, then some of of abstract integration test specifically for the API makes sense...
[18:28:43] <jimeh> *then some form of abstract
[18:31:41] <synthmeat> thank you, this helped elucidate a bit. new to structured testing and there's a lot of kinda conflicting advice there
[18:32:54] *** Quits: shtirlic (~shtirlic@182.232.138.145) (Ping timeout: 260 seconds)
[18:33:34] <jimeh> no worries, testing is a weird a mysterious dark art, there's generally never a "correct" way that works all the time, but some high level conceptual abstractions with a focus on what the goal is, can help illuminate a path that's hopefully not super painful 😀
[18:38:36] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0) (Ping timeout: 240 seconds)
[18:39:45] *** Joins: shtirlic (~shtirlic@184.22.158.189)
[18:41:33] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:43:17] <synthmeat> this "vcr-like" approach could be nice as well IFF i wrote code to only update the fixtures (is that the right term) if the changed shape, not content (as not to pollute the repo)
[18:43:42] <synthmeat> *if they changed
[18:51:07] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[18:53:29] *** Quits: X-Scale (~ARM@89.214.146.27) (Ping timeout: 256 seconds)
[18:53:29] *** X-Scale` is now known as X-Scale
[18:53:52] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[18:54:06] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:54:41] <jimeh> I’ve use this vcr package before: https://github.com/dnaeon/go-vcr
[18:55:36] <jimeh> Basically set it up so auth tokens are stripped out, and requests are recorded into a "testdata" directory…
[18:58:54] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:05:32] *** Quits: andlabs (~andlabs@2605:ef80:8083:12ec:24c8:fdbd:d718:8685) (Ping timeout: 240 seconds)
[19:07:52] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:07:56] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:08:20] *** Joins: X-Scale` (~ARM@89.214.146.79)
[19:08:36] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:09:02] *** Joins: independent_ (~independe@2.26.38.133)
[19:09:15] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:09:42] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[19:09:43] *** X-Scale` is now known as X-Scale
[19:09:54] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[19:10:09] <synthmeat> oh, "testdata" is special, i didn't know that
[19:13:29] *** Quits: cstls (~ruiner@2603-7081-0800-4824-74ba-6cb4-3c1f-2baf.res6.spectrum.com) (Quit: out)
[19:14:53] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[19:15:03] *** Joins: xsteadfastx (~marv@94.31.99.245)
[19:19:00] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:19:38] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 252 seconds)
[19:22:35] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:22:55] *** Joins: bindu (~bindu@user/bindu)
[19:24:01] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:26:29] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:31:01] *** Joins: aman (~aman@user/aman)
[19:32:51] *** Quits: aman (~aman@user/aman) (Client Quit)
[19:33:40] <jimeh> a "testdata" directory is often used for "golden" files among other things 🙂
[19:34:56] *** Quits: lehmrob (~rd7@business-176-095-223-081.static.arcor-ip.net) (Quit: Konversation terminated!)
[19:37:20] *** Parts: particleflux (~particlef@ircb.hackthe.codes) (418 I'm a teapot)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:42:12] *** Quits: purpleidea (~james@user/purpleidea) (Ping timeout: 252 seconds)
[19:44:16] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[19:49:52] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:50:03] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:52:30] *** Joins: khyr0n (~khyr0n@2806:2f0:9261:d45c:79c7:f693:7506:6abf)
[19:52:46] *** Quits: khyr0n (~khyr0n@2806:2f0:9261:d45c:79c7:f693:7506:6abf) (Remote host closed the connection)
[19:53:01] *** Joins: khyr0n (~khyr0n@2806:2f0:9261:d45c:79c7:f693:7506:6abf)
[19:59:57] *** Quits: dsrt^ (~dsrt@65.240.140.18) (Remote host closed the connection)
[20:02:42] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Quit: Textual IRC Client: www.textualapp.com)
[20:06:57] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:09:37] <lungaro> what's the go.blah file called that allows local overrides of packages? ie where to put the replace lines
[20:13:03] <ikke> go.mod?
[20:13:50] <lungaro> i swear i read about a local version of go.mod where you could put replace statements w/o checking them into revision control
[20:13:56] <lungaro> like a go.mod.localoverride
[20:14:13] <lungaro> was I dreaming?
[20:15:10] *** Quits: iryith (~iryith3@user/iryith) (Remote host closed the connection)
[20:15:32] <seebs> i don't know of one anyway
[20:15:38] *** Joins: iryith (~iryith3@207.81-166-89.customer.lyse.net)
[20:15:39] *** Quits: iryith (~iryith3@207.81-166-89.customer.lyse.net) (Changing host)
[20:15:39] *** Joins: iryith (~iryith3@user/iryith)
[20:15:39] <jimeh> lungaro: maybe you're thinking of the new "go.work" file in 1.18?
[20:15:48] <lungaro> oh man, i bet that's it
[20:15:57] <lungaro> Yep, thanks
[20:20:09] <lungaro> anyone know where a practical explanation or demo of go.work is? I can't really tell how to best use it
[20:20:59] <lungaro> i dont get why this isn't enabled by default and i need to invoke the behavior. seems silly
[20:22:18] *** Joins: purpleidea (~james@user/purpleidea)
[20:22:57] <synthmeat> lungaro: https://go.dev/doc/tutorial/workspaces
[20:26:41] <lungaro> ah, thanks
[20:29:30] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 252 seconds)
[20:30:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:34:56] *** Joins: habamax (~habamax@user/habamax)
[20:41:00] *** Quits: independent_ (~independe@2.26.38.133) (Quit: Leaving)
[20:46:08] *** Joins: xsteadfastx (~marv@94.31.99.245)
[20:46:24] <fizzie> There was a _proposal_ for a `go.mod.local` file for that purpose -- https://github.com/golang/go/issues/26640 -- but I think go.work pretty much pre-empted it.
[20:47:47] *** Joins: pjs (~pjs@user/pjs)
[20:48:29] *** Quits: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7) (Quit: ZNC 1.8.2 - https://znc.in)
[20:48:39] *** Joins: yelnah (~felix@2001:44b8:30c9:336:6f0:21ff:fe3c:d4d7)
[20:49:31] <lungaro> except I can't get it working, lol. I dont get why this stuff is so cryptic to use
[20:49:44] <lungaro> go install ./cmd/...
[20:49:44] <lungaro> pattern ./cmd/...: directory prefix cmd does not contain modules listed in go.work or their selected dependencies
[20:49:57] <lungaro> i have no clue what i did wrong, i have a very basic go.work file
[20:57:54] *** Quits: aLeSD_ (~aLeSD@91.126.33.194) (Remote host closed the connection)
[21:00:41] <fizzie> Judging from the regression test with that message in it, that should happen if you're trying to refer some code inside a module that's not mentioned in a `use` directive in the go.work file.
[21:02:22] <lungaro> yeah, i had to add 'use .' to it which seemed odd at first, but i guess ti makes sense
[21:14:32] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 240 seconds)
[21:21:23] *** Quits: ejjfunky (~ejjfunky@125.164.23.99) (Ping timeout: 256 seconds)
[21:27:41] *** Joins: rogersm (~rogersm@90.166.180.250)
[21:32:23] *** Quits: treeford (~charleste@user/treeford) (Quit: WeeChat 3.3)
[21:33:59] *** Quits: zerok (~zerok@user/zerok) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:43:47] *** Joins: pepee (~pepee@user/pepee)
[21:44:12] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 240 seconds)
[21:50:06] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[21:52:04] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[21:53:01] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[21:54:49] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:56:09] *** Joins: trillp (~trillp@137.220.51.190)
[22:01:06] *** Joins: Compy (~compy@user/compy)
[22:02:26] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:17:18] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[22:18:52] *** Joins: justAstache (~justache@user/justache)
[22:18:53] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Quit: ZNC - http://znc.in)
[22:28:26] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[22:31:34] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:1971:b69a:3f2f:7c6d)
[22:32:23] *** Joins: jrmu (jrmu@jrmu.lemon.ircnow.org)
[22:32:54] <jrmu> is there a quick overview behind golang by the language authors? similar to the papers for limbo http://doc.cat-v.org/inferno/4th_edition/limbo_language/limbo
[22:33:10] *** Joins: crashrep (~crashrep@user/crashrep)
[22:34:20] <KirkMcDonald> jrmu: There's the spec, the Tour, and the book.
[22:37:45] <jrmu> Go Programming Language, The (Addison-Wesley Professional Computing Series) <-- this book right?
[22:38:15] <jrmu> i was hoping to find something that would explain the differences between limbo and golang
[22:39:46] <jrmu> this is roughly what i was looking for https://talks.golang.org/2012/splash.article
[22:39:50] <jrmu> thanks KirkMcDonald
[22:40:58] *** Joins: treeford (~charleste@user/treeford)
[22:44:28] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:1971:b69a:3f2f:7c6d) (Read error: Connection reset by peer)
[22:46:54] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:47:05] *** Quits: shtirlic (~shtirlic@184.22.158.189) (Remote host closed the connection)
[22:50:34] *** Quits: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:50:52] *** Joins: krux02 (~krux02@p200300e817167300a7fae666126e61b1.dip0.t-ipconnect.de)
[22:52:37] *** Joins: shtirlic (~shtirlic@184.22.158.189)
[23:05:23] *** Quits: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[23:06:44] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[23:09:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[23:16:55] <lazyreader> jrmu you might find https://golang.design/history/ interesting
[23:18:17] <jrmu> thanks lazyreader
[23:18:45] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:22:05] *** Quits: treeford (~charleste@user/treeford) (Quit: WeeChat 3.3)
[23:25:11] <pyzozord> hey I am doing import "tempconv" and I'm getting "package tempconv is not in GOROOT". There is conv.go file locally defined with "package tempconv", I don't have go.mod in this directory
[23:28:35] <pyzozord> actually I added go.mod and I still have the same problem
[23:28:48] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:30:15] <fizzie> The `package tempconv` declaration in the .go file doesn't really have anything to do with the path you use to import that package. The import path just depends on which directory that conv.go file is in. And should start with the module name, usually.
[23:32:33] <pyzozord> ok so made go.mod to be module "example", conv.go is in root project dir declared with package "tempconv". main.go has package "main" and import "example/tempconv". I'm still getting that error
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:35:31] <fizzie> Are main.go and conv.go in the same directory? You can't really have two different packages in the same directory (with the standard `go build` build system).
[23:36:19] <pyzozord> here is the full project http://bpa.st/QNXA
[23:36:40] <pyzozord> yes they are in the same directory
[23:37:29] <fizzie> Well, don't do that. Conventionally (if you want to separate the packages) you'd put the main.go with its `package main` declaration in a subdirectory called ./cmd/foo, where `foo` is the name you want the executable to have.
[23:37:56] <fizzie> And in that file, you'd do `import "example"` to import the package that lives in the root of the repository.
[23:38:09] <fizzie> (And those files would say `package example` to match that import path.)
[23:38:31] <fizzie> Alternatively, if you want to keep it all in one directory (but still split it to several files), just use `package main` in all of them.
[23:39:14] <fizzie> Just don't try to put more than one package in a single directory.
[23:39:54] <pyzozord> ok
[23:40:21] <pyzozord> you said that package in the file has nothing to do with path
[23:41:31] <fizzie> The `package foo` declaration in the .go files just gives the default name exported symbols from that package are referred with from other packages importing it. It's almost always equal to the last component of the import path, because it's very confusing when it's not.
[23:44:00] <fizzie> For example if you had `module example` in the go.mod, and `package tempconv` in conv.go in the same directory as the go.mod file, then other packages would *import* it with `import "example"` (since that's the name for the go.mod directory), but use `tempconv.CToF(123)` to call the function, which just looks odd.
[23:45:01] <pyzozord> I see
[23:46:49] <fizzie> One semi-exception is that sometimes people want to put a "go-" prefix in their repository name, but drop that from the package declaration, where you can't have a dash in anyway. So https://pkg.go.dev/github.com/hashicorp/go-multierror for example is imported as "github.com/hashicorp/go-multierror" but symbols from it are referred to with `multierror.Foo`, because the files say `package
[23:46:51] <fizzie> multierror` in them.
[23:49:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:52:05] <pyzozord> thanks good to know that
[23:52:25] *** Joins: Tasi_ (~Tasi@20014C4C220C8F001C97B9F5875CB211.catv.pool.telekom.hu)
[23:52:32] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[23:52:54] <pyzozord> so now I'm getting undefined symbols http://bpa.st/Q3WQ
[23:53:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:53:34] <foobaz> have you tried defining the symbols
[23:53:41] <pyzozord> ./cmd/tempconv.go has package main and import "example". ./go.mod has module example
[23:54:10] *** Joins: Tasi__ (~Tasi@20014C4C220C8F004572D1A8662DFA50.catv.pool.telekom.hu)
[23:54:45] <pyzozord> ./tempconv.go has package example and these symbols that are undefined
[23:55:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[23:56:02] *** Quits: Tasi (~Tasi@20014C4C220C8F009D313B49672700E8.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[23:56:19] <foobaz> where are the symbols defined, if anywhere?
[23:57:02] *** Quits: Tasi_ (~Tasi@20014C4C220C8F001C97B9F5875CB211.catv.pool.telekom.hu) (Ping timeout: 240 seconds)
[23:57:16] <pyzozord> like I just said in ./tempconv.go
[23:57:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:57:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[23:58:15] <foobaz> maybe they're not defined in the same scope you're using them in
[23:58:30] <foobaz> like if they are local variables and you're trying to use them in a global scope
[23:59:00] <pyzozord> here is tar of the project http://bpa.st/DQYQ
