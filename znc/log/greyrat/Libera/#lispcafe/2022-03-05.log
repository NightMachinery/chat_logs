[00:13:18] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[00:26:15] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:35:00] *** Quits: Brucio-61 (~Brucio-19@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[00:35:21] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[00:42:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:46:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[01:18:47] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:18:49] <hayley> Good morning everyone!
[01:37:45] <shka> hayley: good morning and good night
[02:20:41] <neominimum> morning!
[02:22:46] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[02:38:37] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:01:28] *** Joins: Lycurgus (~juan@98.4.112.204)
[03:11:30] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[03:13:53] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[03:14:55] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:19:37] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[04:03:00] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[04:20:21] <kakuhen> dang, the ancient webkit version on the ps vita does not properly support -webkit-writing-mode
[04:20:33] <kakuhen> text renders vertically but the glyphs are sideways
[05:12:20] <contrapunctus> gilberth: no exercise? wat
[05:17:33] <gilberth> Nope. It would be counter-productive because of exhaustion.
[05:25:05] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:29:45] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[05:40:42] <neominimum> when declaring type fixnum sbcl does `MOV RAX, RSI` followed by `SAR RAX, 1` Where as declaring type (signed-byte 31) will just use the number that was loaded into RSI at the begining of the operation. Can someone eli5 the reason for this. Apparently the instruction is dividing the number by 2 but I can't think of a reason why it would want to do this despite the code working as intended. Is this a two's-compliment thing again?
[05:55:11] *** Quits: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net) (Remote host closed the connection)
[06:02:23] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[06:11:15] <White_Flame> neominimum: the low bit is the tag bit.  If it's 0 it's a fixnum
[06:12:01] <White_Flame> if it can specialize the register's value, then it might be able to unbox that
[06:21:29] <neominimum> Oh okay so IIRC the low bit gets carried to a flag register or something, that would explain why there is often a  TEST <reg> <reg> close by that is the fixnum test right?
[06:21:29] *** Quits: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:22:32] <neominimum> or part of it at least
[06:23:42] <neominimum> actually I think I have that wrong nvm
[06:26:14] <neominimum> I'm trying to learn assembly by staring at the assembly code haha
[06:30:34] <neominimum> Is it just me or is there a real lack of resources for learning assembly. Besides some dense books and a hundred and one 'hello world' assembly program blog posts, there doesn't seem to be anything that talks about the most common patterns one will encounter or want to use when coding assembly.
[06:31:06] <waleee> this is supposed to be an ok "stare at assembly and learn" & forth tutorial, https://github.com/nornagon/jonesforth/blob/master/jonesforth.S
[06:31:06] -ixelp- jonesforth/jonesforth.S at master · nornagon/jonesforth · GitHub
[06:31:24] <Catie> Programming from the Ground Up shows some C idioms translated to assembly, but I don't know about anything else super in-depth like that
[06:40:35] <White_Flame> I learned asm on 8-bits, did a bit of fiddling with 386, and it's enough context to be able to read modern asm.  but man, wouldn't want to try to learn it from scratch now, sorry :-P
[06:41:58] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[06:53:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[06:54:08] <neominimum> I found an assembly book that I bought in 2010 in the bookcase! it teaches x86_32 but the instructions have similar semantics I imagine, it's helping somewhat. 
[06:55:40] <neominimum> Thanks for tge suggestions
[06:56:32] <Catie> Good luck!
[07:02:49] *** Quits: Catie (~user@user/catie) (Quit: headed home)
[07:10:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[07:11:03] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[07:25:00] *** Quits: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com) (Ping timeout: 240 seconds)
[07:35:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[07:36:08] *** Joins: aeth (~aeth@user/aeth)
[07:52:03] *** Joins: semz_ (~semz@user/semz)
[07:54:32] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:00:13] *** semz_ is now known as semz
[08:33:37] *** Quits: notzmv (~zmv@user/notzmv) (Remote host closed the connection)
[08:40:59] *** Joins: notzmv (~zmv@user/notzmv)
[09:00:10] <moon-child> neominimum: imo programming from the ground up and reverse engineering for beginners are pretty good
[09:00:40] <moon-child> neominimum: https://files.catbox.moe/9ag6iv.pdf for the latter
[09:01:02] <moon-child> (that said I didn't read very much of either, and I ... still seem to have gotten somewhere)
[09:14:45] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:23:38] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[09:24:02] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[09:52:46] <kakuhen> oo the text has a japanese version it seems
[09:53:14] <kakuhen> so i can send it off to a certain friend of mine who seems to really like foss and RE stuff (but often finds himself hitting documentation he cant read)
[09:53:36] <kakuhen> copy-pasting into deepl only gets you so far
[09:54:34] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:58:04] <neominimum> moon-child: hey thanks!
[10:11:46] * moon-child wonders why, in firefox, the search bar gets a blue outline when you select it but the url bar does not
[10:50:30] <hayley> https://www.reddit.com/r/lisp/comments/t5d3y8/trying_to_find_a_startup_that_uses_cl_and/hz7qegn/ lol
[10:50:32] -ixelp- Reddit - Dive into anything
[10:58:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[11:14:49] <dave0> hi hayley 
[11:15:01] <dave0> hayley: it's saturday night!
[11:15:02] <hayley> hi dave0
[11:15:07] <dave0> party
[11:15:09] <hayley> It is.
[11:15:14] * hayley spent it moving shit.
[11:15:39] <dave0> moving house?
[11:15:49] <hayley> My dad is.
[11:15:59] <dave0> ah
[11:16:08] <hayley> Moved clothes, desks, and bought a TV that seems to have got smashed in the warehouse. 
[11:16:58] <dave0> i hope you got a good deal on it
[11:17:37] <dave0> oh wow harrison ford on tv tonight
[11:24:22] <moon-child> https://imgur.com/gallery/dTv6b
[11:24:23] -ixelp- Tales of IT guy - Complete edition - Album on Imgur
[11:24:46] <dave0> did anyone already post this from hackernews? https://news.ycombinator.com/item?id=30564287
[11:24:47] -ixelp- A regular expression to check for prime numbers | Hacker News
[11:25:17] <dave0> for hayley :-)
[11:25:39] <hayley> Foo, that is not a regular expression.
[11:26:17] <dave0> you're being "that guy" :-p
[11:26:54] * hayley sends dave0 to android hell
[11:27:21] <moon-child> 2|3|5|7|11|13|...
[11:28:13] <hayley> moon-child: Given that there are infinite primes, there would be infinite derivatives of that expression. Thus it is not regular. QED
[11:30:00] <moon-child> ? no, the derivative is |1|3|..
[11:30:30] <hayley> Keep taking derivatives, and you will not find a loop. Thus no DFA.
[11:30:53] <moon-child> second derivative is |.
[11:31:00] <moon-child> third derivative is null
[11:31:06] <moon-child> done
[11:31:08] <moon-child> :)
[11:31:14] <hayley> Oh, it's literally "..." and not "keep going with primes"?
[11:31:37] <moon-child> I figure one digit ought to be enough for anybody
[11:31:50] <moon-child> if you try to test 3-digit primes, you get what you deserve
[11:32:04] <dave0> now make a regex that generates the digits of pi!
[12:11:58] <selwyn> good morning everyone
[12:12:36] <selwyn> hm. can regexen actually do arithmetic
[12:12:47] <hayley> Nope.
[12:13:20] <selwyn> are you sure
[12:13:40] <selwyn> what if you do unary encoding of numbers in strings
[12:14:37] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:14:46] <lisp123> hayley: lol @ unwind-protect
[12:16:16] <hayley> https://www.youtube.com/watch?v=sXJg9J81acY
[12:16:17] -ixelp- Making a Tesla Coil Magic Wand, to Celebrate 5 MILLION SUBS! - YouTube
[12:16:21] <hayley> selwyn: Still.
[12:16:31] <hayley> There would need to be an infinite number of derivatives.
[12:16:32] <selwyn> well then
[12:27:55] * moon-child ponders the issue of footnotes/endnotes/etc. in digital content
[12:28:19] <moon-child> in print, my preference is numbered endnotes for citations, and asterisk/dagger/etc. footnotes for out-of-line comments
[12:28:27] <moon-child> but for e.g. html, that doesn't work
[12:29:04] <moon-child> some people freely mix citations and out-of-line comments, which I think is _okay_, but only if using footnotes, not endnotes
[12:29:35] <moon-child> (I know that style is not the fashion, but I like it)
[12:30:53] <moon-child> could do numbered endnotes for comments, and bracketed AuthorDate style for citations.  But I really do not like bracketed AuthorDate
[12:33:48] <hayley> [moon-child 2022]
[12:37:23] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:47:30] <semz> Why not?
[12:51:11] <moon-child> I want to minimize the role of citations in the main text; it should stand on its own
[12:51:48] <moon-child> compare: [Bob 2011] says that octopuses are mammals; octopuses are mammals [Bob 2011]; Bob says^7 that octopuses are mammals; octopuses are mammals^7
[12:53:06] <moon-child> the first form is clearly an atrocity (and unfortunately all too common).  The second form is just kind of ugly; if I wanted to emphasize that it's Bob who says this, I would use something like 1 or 3; if I don't, I'll use form 4
[12:54:02] * hayley uses gdb as an ad-hoc statistical profiler
[12:54:23] * hayley watches a moderately complex molecular simulation run.
[12:54:47] <hayley> 3/3 traces have landed in the "enforce periodic bounds condition" function. Interesting.
[12:56:30] <moon-child> s/if I wanted/and if I wanted/
[12:57:07] * hayley now wonders how MOD over the position vector is that slow.
[12:57:28] <moon-child> division is pretty slow
[12:57:37] <moon-child> libdivide time?
[12:57:47] <hayley> Floating point division too?
[12:57:57] <semz> yes
[12:58:15] <moon-child> yeah
[12:58:19] <moon-child> probably faster though
[12:58:45] <moon-child> (partly cuz they worked harder on it cuz people care more about fp division; partly cuz the mantissa is smaller)
[12:59:38] <hayley> This code uses a while loop to avoid the modulo.
[12:59:56] <semz> moon-child: I'd argue it's a feature that outsourced arguments are clearly marked, but I see where you're coming from.
[13:00:02] <hayley> while (universe->atom[atom_id].pos.x >= 0.5*(universe->size)) { universe->atom[atom_id].pos.x -= universe->size; } // It's not volatile, so I guess GCC should only bother to store the last version. Hm.
[13:00:18] <semz> Then again mathematics may cite a little differently.
[13:00:55] <moon-child> semz: is bracketed text less clear than a superscript number?
[13:01:13] <moon-child> I mean, in either case if you want to see what the referred-to argument actually is, you will need to look up the relevant citation in the bibliography
[13:02:43] * hayley looks in Intel intrinsics guide and Agner's instruction tables, finds VDIVPS isn't so bad.
[13:02:48] <semz> You immediately get a rough idea what is being referred to. Useful if you're already familiar with the reference or if it's referenced multiple times.
[13:03:43] <hayley> No modulo instruction though? I guess I can work out how to simulate it...somehow.
[13:04:02] <moon-child> multiply by the div result and then take the difference
[13:04:13] <hayley> Right.
[13:04:19] <moon-child> err have to truncate first
[13:04:25] * hayley nods
[13:04:28] <moon-child> wait no you can just take the fractional part
[13:04:34] <moon-child> and multiply by that
[13:05:00] <hayley> Ah yeah.
[13:06:16] <hayley> Pity that atoms are in an array of structs, rather than struct of arrays. The PBC computation could be completely oblivious to shape, and blast over the position array.
[13:06:50] <hayley> Of course, pity for them, good news for I (and anyone else stupid enough to contemplate RIIJing (Rewrite It In J))
[13:08:00] <moon-child> damn 1970s technology.  Too good for modern, refined tastes!
[13:09:21] * hayley reads the J source code
[13:10:17] <hayley> I think that was a small mistake.
[13:12:29] *** Joins: shka (~herr@109.231.3.55)
[13:12:42] <moon-child> https://code.jsoftware.com/wiki/Essays/Incunabulum  it's whitney's fault
[13:12:43] -ixelp- Essays/Incunabulum - J Wiki
[13:14:08] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[13:14:38] <shka> https://www.grammarly.com/stand-with-ukraine?utm_medium=social
[13:14:39] -ixelp- Grammarly stands with Ukraine
[13:14:48] <shka> TIL grammarly is from ukraine
[13:14:53] <shka> so there are lispers in there 
[13:17:48] * hayley is just amazed at how so little code can run so slowly.
[13:18:20] <hayley> I really do have to assume it's PBC, because the first two thirds of the simulation is fine. Maybe the velocities explode somehow later, idk.
[13:19:40] <selwyn> whats pbc
[13:19:57] <hayley> "pos = {x = 5.6874458757011871e-10, y = -2.1518975285578221e-10, z = -2.2709287918177972}, vel = {x = 634170131801940.88, y = -1158712415484110, z = -2270928792091866}" Well, the velocity is divided by delta-time twice, in order to get a change to position, but this seems...large. idk
[13:20:01] <hayley> selwyn: "periodic boundary condition"
[13:26:29] <hayley> TL/DR the simulation makes the 3D world wrap around, and apparently the implementation of it is painfully slow somehow.
[13:26:44] <selwyn> periodic boundary conditions are the best kind of boundary condition
[13:28:44] <hayley> I'm convinced it should just be a few SIMD instructions to work out the modulo and wrap from there.
[13:28:59] *** Joins: Inline (~Inline@p200300cd472f640099b8655dd3230f42.dip0.t-ipconnect.de)
[13:32:46] <hayley> If the world is in [0, 1) then I suppose x should be transformed to x - floor(x).
[13:33:05] * selwyn maths noises
[13:34:48] <hayley> But the world in that simulator is usually in [-n, n) for some "size" n.
[13:35:06] <selwyn> it is in the circle, not [0,1)
[13:35:43] <moon-child> normalised coordinate spaces ftw
[13:35:54] <selwyn> what are you simulating
[13:36:05] <moon-child> I still hold a grudge against opengl for using -1 1 for ndc but 0 1 for texture coordinates
[13:36:25] <moon-child> it's hard enough keeping (semi-)normalised coords and screenspace coordinates straight as is
[13:36:28] <hayley> Right, I could probably scale force constants to work in our [0,1) space rather than [-n,n) space.
[13:36:30] <hayley> selwyn: Molecules.
[13:36:40] <hayley> But: that involves maths.
[13:36:42] <selwyn> hf
[13:37:39] <moon-child> oh, no, not maths!
[13:37:42] <selwyn> but yes, it should be transformed to x - floor(x)
[13:38:34] <hayley> The transformation to get to [0,1) is something like f(x) = x/n + 1/2, and f¯¹(x) = (x - 1/2) * n.
[13:39:30] <hayley> i.e. staying in [0,1) space is more appealing than doing the transformation...probably.
[13:39:33] <moon-child> hm, I was going to say I would rather add first then divide, but I guess you get better numerical stability that way since you have more precision at small ranges
[13:39:34] <selwyn> f(x)=x/(2n) + 1/2
[13:40:01] <hayley> Good point.
[13:40:44] <moon-child> https://i.redd.it/3lbri3u7rfg81.jpg
[13:41:48] <hayley> A diplomatic compromise might be to have [0,n) for which PBC(x) = x - n * floor(x / n)
[13:42:23] <hayley> Also: n is constant, so we could replace the division with a multiplication, if that's faster.
[13:42:55] <moon-child> that doesn't seem better than the solution for [-n,n) space
[13:43:04] <moon-child> and yeah *1/n better than /n
[13:43:29] <hayley> Yes, it just saves one addition for either conversion.
[13:44:39] <hayley> VMULPS has 3\tau latency on Zen 1, and VDIVPS has 10\tau. Much better.
[13:45:42] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[13:47:16] * hayley quotes Fare, self-proclaimed libertarian (in the American sense), on r/socialistprogrammers
[13:47:20] <hayley> No one knows cause it's a good quote.
[13:47:56] <hayley> "A bad workman blames his tool. Indeed a good workman can recognize the bad tools and won't be caught dead using them. Or will charge the customer ten times the price for the privilege of telling the workman how to do his job."
[14:00:02] <hayley> "Remember, if your language uses tracing garbage collection that basically makes you a communist" wtf based GC
[14:15:21] <moon-child> indeed lol
[14:15:23] <moon-child> share the loved
[14:15:27] <moon-child> *love
[14:17:17] <hayley> As Max Stirner once said, "I don't shyly step back from your objects, but see them always as my objects in which I need to 'respect' nothing. Just do the same with what you call my objects!"
[14:22:09] <hayley> https://code.jsoftware.com/wiki/NYCJUG/2020-08-11
[14:22:10] -ixelp- NYCJUG/2020-08-11 - J Wiki
[14:22:15] <hayley> "Date: Tue, 28 Jul 2020 13:42:10 -0700 From: Henry Baker <hbaker1@pipeline.com>" Ehm.
[14:22:42] <selwyn> great stalking
[14:22:53] <moon-child> o.o
[14:23:06] <selwyn> or you just happened to find it?
[14:23:26] <hayley> A bit of both.
[14:23:33] <hayley> I remembered Baker wrote on APL and also on diddling bit arrays.
[14:23:48] <moon-child> https://catless.ncl.ac.uk/Risks/33/1#subj26.1 random finding, even newer
[14:23:49] -ixelp- The RISKS Digest Volume 33 Issue 1
[14:26:17] <hayley> https://lwn.net/ml/cryptography/E1gtxZt-000FCn-Bx@elasmtp-mealy.atl.sa.earthlink.net/
[14:26:19] -ixelp- [Cryptography] Practical Enclave Malware with Intel SGX [LWN.net]
[14:27:31] <moon-child> '*transactional memory*, introduced as a *security feature* (among other virtues), can be used to engage in and hide mischief: Oops!!'
[14:27:33] <moon-child> :/
[14:28:34] <selwyn> https://www.youtube.com/watch?v=zvqV7tO2rC8
[14:28:34] -ixelp- Walter White in Half-Life 2 - YouTube
[14:33:24] <moon-child> https://www.metzdowd.com/pipermail/cryptography/2016-March/028449.html
[14:33:25] -ixelp- [Cryptography] LibreSSL unaffected by DROWN
[14:33:45] <moon-child> 'I just love the phrase "bug compatibility" !  I'll put that right up there with "God could create the world in 7 days because he didn't have an installed base".'
[14:34:16] <shka> selwyn: this is my favorite https://youtu.be/lKKwxDjfS0s
[14:34:17] -ixelp- I've got a peer reviewed study - YouTube
[14:34:27] <dave0> i wonder if god used non-free closed-source blobs
[14:34:41] <selwyn> hahaha
[14:35:20] <shka> selwyn: gordon tries to stop alien invasion, world is enslaved
[14:35:33] <selwyn> https://www.youtube.com/watch?v=AYXHgaoodu0
[14:35:34] -ixelp- there goes our grant money - YouTube
[14:35:37] <selwyn> my favourite line from the original
[14:36:05] <shka> Duke tries to stop alien invasion, blows off head of the leader, shits down the neck, also has time for strippers in the meantime, still wins
[14:36:28] <hayley> "Some historians attribute the rise of kings & nation-states as a way for the ordinary citizens to rid themselves of their hated local lords. But this strategy may have achieved escaping the frying pan by going directly into the fire."
[14:36:31] <hayley> https://www.metzdowd.com/pipermail/cryptography/2016-March/028560.html
[14:36:31] -ixelp- [Cryptography] is this feudalism?
[14:37:42] <selwyn> one day i need to sit down and learn about feudalism
[14:37:55] <selwyn> because it actually sounds very chill
[14:38:34] <selwyn> i think that capitalists and early socialists had a common interest in portraying it badly
[14:39:34] <shka> selwyn: it is a failed system that lead to stagnation 
[14:40:01] <hayley> https://www.metzdowd.com/pipermail/cryptography/2016-March/028684.html
[14:40:02] -ixelp- [Cryptography] DoJ/FBI's "nuclear"/Lavabit option
[14:40:20] <hayley> "I suspect that if Apple printed out its source code in 4-point type, it would be considerably larger than 11 pages. When IBM was faced with anti-trust litigation from the U.S. Govt in the late 1960's, it famously delivered the subpoena'd discovery documents in a number of moving-van-type semi-trailer-truck-fulls of boxes.  I think it took years for the govt to wade through the documents."
[14:40:23] <selwyn> 1/3 of the year as feast days
[14:40:49] <moon-child>  https://www.metzdowd.com/pipermail/cryptography/2016-March/028724.html
[14:40:50] -ixelp- [Cryptography] "Tea Consent" video for DoJ/FBI
[14:41:18] <shka> selwyn: medieval fasting is not something you would like
[14:41:49] <hayley> "Apple: please reference this public email in your patent applications.  Thx! -- Henry Baker"
[14:41:52] <selwyn> fasting or feasting?
[14:41:59] <shka> selwyn: fasting
[14:42:00] <shka> https://taylormarshall.com/2018/02/medieval-lent-harder-islamic-ramadan.html
[14:42:01] -ixelp- Medieval Lent was Harder than Islamic Ramadan - Taylor Marshall
[14:42:22] <shka> and there was a lot of this during the medieval period
[14:42:25] * hayley wonders if Bakerposting is shitposting about Henry Baker, or Henry Baker shitposting. He is much better at it than her.
[14:43:03] <selwyn> shka: how interesting
[14:43:40] <shka> selwyn: so yeah, you had 1/3 of the year for feast days, you also had a lot of fasting in the calendar
[14:43:44] <shka> you can look i up
[14:43:45] <selwyn> though i would point out that a lot of religious people simply break the rules
[14:43:47] <shka> *it up
[14:43:50] <hayley> https://www.metzdowd.com/pipermail/cryptography/2016-March/028713.html
[14:43:51] -ixelp- [Cryptography] Formal Verification (was Re: Trust & randomness in computer systems)
[14:44:00] <hayley> "ASSERT's should always be sprinkled *extremely liberally* all over your code. The job of a theorem prover is merely to remove ASSERT's that it can prove are *always satisfied.*  I.e., a "theorem prover" is just a really good compiler optimizer for dead code elimination."
[14:45:18] <selwyn> ramadan is not followed stringently at all, and it would surprise me if medieval people didn't chafe at the rules
[14:45:34] <selwyn> no fats and meat while alcohol is allowed sounds rough
[14:45:55] <selwyn> its like a recipe for a 40 day hangover
[14:46:22] <shka> selwyn: well, you assume a lot :P
[14:46:40] <selwyn> well
[14:46:47] <selwyn> as i say i need to learn about it sometime
[14:46:51] <hayley> "To underline what Perry just said, the WWII Germans didn't think that weather reports "needed" or "wanted" the highest levels of security.  Oops!"
[14:46:58] <shka> i remember how you were trying to assume that Russia won't invade because it is unreasonable :P
[14:47:14] <shka> but humans are not rational creatures, at all
[14:52:41] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[14:58:17] <hayley> "There's not much difference between this scheme and "paging out" your data base onto really slow tape drives and storing the tapes in some salt mine that could take weeks to sort through (assuming that you can still find an operable tape drive to play it back).  Oh wait!  That's NASA's backup strategy!"
[15:06:55] * moon-child uses mmap for his next dbms
[15:09:10] <hayley> "Methinks he might not fare so well in a Nuremburg-type trial, but perhaps those ethics are sooo last century."
[15:09:14] * hayley wants Baker out of context bot
[15:19:00] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[15:47:03] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:57:27] *** Joins: notzmv (~zmv@user/notzmv)
[16:40:33] <gilberth> Good morning #lispcafe!
[16:41:56] <ck_> hello
[16:42:46] <ck_> moon-child: in-memory dbs are all the rage. put in some triples, maybe "columnar", you'll be nasdaq-traded by tuesday
[16:51:00] <shka> manardb
[16:51:03] <shka> it is ok
[16:53:08] <contrapunctus> moon-child: there are LMDB bindings 🤔
[16:54:47] <pl> ck_: do quads with in-line storage (for extended RDF with property graphs) and the nasdaq position might be warranted 
[16:56:01] <shka> manardb is actually hilariously simple 
[17:03:26] <gilberth> I wonder if the common subject-verb grammar could be integrated into CLIM. I mean, with normie applications you first select an object or a set of objects and then say what operation to apply, not the other way around.
[17:04:47] <gilberth> So instead of a hilit presentation you would have a selected presentation. Could also be a set.
[17:06:14] <gilberth> I believe it is this mismatch in grammar, which makes CLIM somewhat alien.
[17:07:21] <SAL9000> normie applications these days: 1) start a web browser 2) OOM killer trips 3) crying ensues
[17:09:00] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:09:31] <gilberth> Yes, but these also adhere to a subject-verb grammar than to a verb-subject grammar.
[17:12:52] <gilberth> I mean a common dialog with normie applications would show you a list of foos. You can select some foos and chose an action on those foos from a menu or a toolbar. I believe we could have a CLIM command processor offering this style of interaction.
[17:13:57] <gilberth> Menu items or toolbar items could enable/disable themself based on the current selection. And then there also is drag-and-drop, when one subject is not enough.
[17:18:27] <gilberth> Anyhow, this is two steps ahead. But I believe it could be done.
[17:18:50] <SAL9000> Yeah, I get the idea.
[17:18:59] <SAL9000> Jokes aside, CLIM doesn't work on Windows, right?
[17:19:32] <gilberth> Real CLIM does. And the CLX backend ought to work with Windows, too :-)
[17:22:33] <gilberth> In general with my CLIM to come, it should be rather straight forward to have a Windows backend. It's only that I don't use Windows at all. But from what I gathered the Windows API didn't really change since Win3.1.
[17:23:01] <gilberth> Straight forward because I assume that I could talk to the native GUI library from within the event loop only.
[17:31:04] *** Joins: lisp123 (~lisp123@120.154.103.52)
[17:37:51] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 245 seconds)
[18:09:52] <pl> Windows message queue seems very different from X11 or OSX one 
[18:10:23] <pl> At least X11 one doesn't care about threads, it's just single threaded choke point 
[18:11:02] <gilberth> Well, it's still a message queue and the expectation that I do work in what in callbacks. In particular repaint in the repaint handler only.
[18:17:22] <scymtym> i have a GDI-based win32 backend. message queuing and device context management are tricky. but i guess both can be more complex or less complex depending on the backend architecture
[18:21:29] <gilberth> There is nothing tricky. Just abstain from doing graphics outside the redisplay handler/callback.
[18:22:13] <gilberth> I face the same issue with Cocoa. It doesn't like it at all, if you do anything outside the main event loop.
[18:23:26] <gilberth> And it gets pickier with time.
[18:27:18] *** Joins: lisp123 (~lisp123@120.154.103.52)
[18:32:01] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[19:10:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:18:20] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[19:34:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[19:37:59] <clothespin> morning
[19:43:31] <selwyn> good morning
[19:50:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[20:13:46] <clothespin> coffee
[20:15:22] *** Joins: lisp123 (~lisp123@120.154.103.52)
[20:19:42] <ck_> good drink
[20:20:02] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 260 seconds)
[20:21:46] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:45:09] <gilberth> I could need some coffee, too. CLIM talks about input event queues and that makes perfect sense, but it doesn't talk about how to create one and how to setup one. Hmm.
[20:45:12] <clothespin> gilberth, have you ever thought how clim would work with a render loop?
[20:45:35] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[20:45:51] <gilberth> clothespin: Define render loop.
[20:46:28] <clothespin> obtain framebuffer, write to framebuffer, present framebuffer, repeat
[20:48:21] <gilberth> What frame buffer? I have a display server. And if you ask: Free-CLIM works by having a loop picking up dirty regions, draws them to the back buffer, flips, waits for vsync, if possible, and repeats.
[20:48:42] <clothespin> how _would_ it work
[20:49:05] <gilberth> I figured out how. I keep dirty regions.
[20:52:18] <gilberth> And two copies of the sheet hierarchy. The current one the application sees, the other that ought to be on the screen, and the one that is on the screen.
[20:52:50] <gilberth> That is not new. I had that for McCLIM in around 2001 or so.
[20:55:13] <clothespin> what if you want animation going on behind a sheet with alpha
[20:56:49] <gilberth> Sheets in CLIM are always fully opaque. You would need to fix CLIM first.
[20:59:37] <clothespin> i suddenly feel like eating huevos rancheros
[21:03:37] <ck_> claro que si
[21:09:38] <gilberth> However, with X11 I can't lock to vsync. But, Cocoa locks you to vsync by itself, which works out nicely.
[21:22:55] <gilberth> And wrt to sheets with an alpha channel. That could be done too. You just have to resort to a painter model and paint all sheets in order. For efficiency you probably want a way to indicate that a sheet is opaque though. But I guess pane-background could do that, but that's not part of the sheet protocol, but the pane protocol.
[21:27:40] *** Joins: lagash (lagash@lagash.shelltalk.net)
[22:11:02] * gilberth calls it a day.
[22:23:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:c19d:39a5:11c7:fcb0) (Ping timeout: 240 seconds)
[22:25:32] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:8e3b:ccf1:d93a:5b17)
[22:27:11] <gilberth> Also the whole cursor protocol is too simplistic. It reads like this blinker concept. However to display a cursor just a mere coordinate pair is not enough as a cursor does not refer to a point in the pane but to some input position, like "over this exact 'a'" here. And for cut and paste you want something similar. I am not yet at cut and paste, but would implement it the same as I did for McCLIM.
[22:28:39] <gilberth> Namely, for selected text essentially an extent is kept and to display it the text output records modify there rendering.
[22:30:09] <gilberth> I never got around to write it down, but I believe it would be good to have a protocol to add any number of "blinker" output records to a stream pane, which are rendered on top, but are otherwise not part of the output history proper.
[22:30:47] <gilberth> A cross hair cursor e.g. would be an application.
[22:33:00] <gilberth> Or a dragged output record, e.g.
[22:37:45] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8e3b:ccf1:d93a:5b17) (Ping timeout: 252 seconds)
[22:39:51] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:18d4:9beb:f7a2:366e)
[22:43:48] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:18d4:9beb:f7a2:366e) (Ping timeout: 240 seconds)
[22:57:14] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Remote host closed the connection)
[23:15:29] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:16:32] *** Joins: lisp123 (~lisp123@120.154.103.52)
[23:21:11] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[23:36:30] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cfdc:46b6:d3d6:d388)
[23:40:44] <selwyn> https://www.youtube.com/watch?v=DbUrjDDgv1g
[23:40:45] -ixelp- Columbo Star Wars - YouTube
