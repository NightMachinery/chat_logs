[00:00:06] <CptKirk16> is there a scheme/common lisp library that allows the direct communcation between them?
[00:05:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:06:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:1feb:c0cd:e428:d19f)
[00:07:05] <dieggsy> CptKirk16: someone here was building airship-scheme
[00:07:16] <lisp123> CptKirk16: Funny, I saw something just on reddit today: https://www.reddit.com/r/lisp/comments/pz1296/is_there_a_full_blown_scheme_mit_interpreter/
[00:07:54] <lisp123> https://gitlab.com/mbabich/airship-scheme
[00:08:04] <dieggsy> https://gitlab.com/mbabich/airship-scheme
[00:08:06] <dieggsy> though i'm not sure what the progress there looks like
[00:09:08] <CptKirk16> I am in #airship and haven't seen any movement
[00:09:21] <lisp123> In Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp by Peter Norvig, there is an implementation of a Scheme interpreter in Chapter 22 Scheme: An Uncommon Lisp. The implementation is tail-recursive and has call/cc. However, it doesn't implement the syntax-rules macro system (which was not required prior to R5RS [1998]).
[00:18:08] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[00:23:22] *** Quits: lotuseater (~user@p200300e78715be00e2e5898694cab6cd.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:24:04] *** Joins: bwestbro (~user@quantum2.chem.olemiss.edu)
[00:32:29] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Remote host closed the connection)
[00:32:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:38:00] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[00:38:38] *** Joins: srhm (~srhm@user/srhm)
[00:44:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:45:59] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[00:46:12] *** Lord_of_Life_ is now known as Lord_of_Life
[00:54:06] *** andreyorst_ is now known as andreyorst
[00:54:41] *** Joins: Lycurgus (~juan@98.4.112.204)
[01:03:35] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[01:04:28] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:06:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:11:10] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 252 seconds)
[01:23:26] *** Quits: shka (~herr@109.231.6.176) (Ping timeout: 252 seconds)
[01:30:48] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[01:32:49] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[01:34:09] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[01:38:22] *** Quits: jkordani (~jkordani@c-69-255-2-251.hsd1.md.comcast.net) (Ping timeout: 256 seconds)
[01:38:28] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Quit: WeeChat 2.8)
[01:52:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[01:52:47] <edgar-rft> the great thing with Scheme is that there are so many mutually-incomatible implementations to choose from
[01:53:06] <kagevf> Rainer Joswig left an answer on stack overflow on how to do the sicp exercises in CL ... so who needs scheme? j/k
[01:53:14] <kagevf> https://stackoverflow.com/questions/1159208/can-i-use-common-lisp-for-sicp-or-is-scheme-the-only-option
[01:54:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:54:44] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[02:05:11] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:05:11] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:05:13] *** greaser|q is now known as GreaseMonkey
[02:10:31] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[02:12:16] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[02:12:22] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[02:14:38] *** Quits: CptKirk16 (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[02:15:34] *** Joins: zazzerino (~user@2600:1700:6004:8470::13)
[02:17:06] *** Quits: frgo (~frgo@p200300deef0cee001559b738248b8bd9.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:17:33] *** Joins: frgo (~frgo@p200300deef0cee001559b738248b8bd9.dip0.t-ipconnect.de)
[02:20:08] *** Quits: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828) (Ping timeout: 250 seconds)
[02:24:54] *** skyl4rk` is now known as skyl4rk
[02:45:54] *** Quits: zazzerino (~user@2600:1700:6004:8470::13) (Remote host closed the connection)
[02:54:08] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[02:55:49] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[02:55:50] *** Joins: X-Scale` (~ARM@83.223.242.77)
[02:55:57] *** Quits: pve (~pve@188-67-254-14.bb.dnainternet.fi) (Quit: leaving)
[02:57:30] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[02:57:54] *** X-Scale` is now known as X-Scale
[03:05:43] *** Quits: yewscion_ (~yewscion@2604:ca00:148:422a::1060:2552) (Ping timeout: 252 seconds)
[03:06:43] *** Quits: gaqwas (~john@dynamic-095-115-042-095.95.115.pool.telefonica.de) (Ping timeout: 252 seconds)
[03:08:02] *** Quits: rdrg109_ (~rdrg109@51.195.232.80) (Changing host)
[03:08:02] *** Joins: rdrg109_ (~rdrg109@user/rdrg109)
[03:30:52] *** Joins: karlosz (~karlosz@47.180.55.252)
[03:32:26] *** Joins: igemnace (~ian@user/igemnace)
[03:37:24] *** Joins: robin_ (~robin@user/terpri)
[03:38:01] *** Joins: zazzerino (~user@2600:1700:6004:8470::13)
[03:39:40] *** Quits: karlosz (~karlosz@47.180.55.252) (Ping timeout: 252 seconds)
[03:39:41] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[03:47:54] *** Joins: notzmv (~zmv@user/notzmv)
[03:48:30] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[03:48:58] *** Joins: hendursaga (~weechat@user/hendursaga)
[03:49:19] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:54:22] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[04:03:17] *** Quits: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c) (Ping timeout: 246 seconds)
[04:10:41] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[04:13:11] *** Quits: robin_ (~robin@user/terpri) (Remote host closed the connection)
[04:16:09] *** Joins: robin (~robin@user/terpri)
[04:19:21] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:20:02] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[04:20:42] *** Joins: srhm (~srhm@user/srhm)
[04:24:16] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[04:34:14] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 260 seconds)
[04:46:17] *** Joins: robin (~robin@user/terpri)
[04:51:58] *** Joins: akoana (~ah@user/akoana)
[04:54:31] *** Quits: robin (~robin@user/terpri) (Ping timeout: 252 seconds)
[04:59:42] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[05:00:00] *** Joins: robin (~robin@user/terpri)
[05:00:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:08:35] *** Joins: cyberbanjo (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23)
[05:17:50] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[05:18:11] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[05:26:00] *** Quits: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:44:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:48:37] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[05:51:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 252 seconds)
[06:00:36] *** Parts: akoana (~ah@user/akoana) ()
[06:06:07] *** Quits: prxq (~quassel@x4dbd87f5.dyn.telefonica.de) (Ping timeout: 252 seconds)
[06:06:24] *** Joins: prxq (~quassel@dynamic-077-012-066-004.77.12.pool.telefonica.de)
[06:07:47] *** Joins: karlosz (~karlosz@12.196.174.98)
[06:12:18] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Read error: Connection reset by peer)
[06:13:50] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:15:16] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:15:38] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[06:25:44] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:27:58] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[06:31:23] <beach> Good morning everyone!
[06:41:10] <semz> good morning
[06:42:34] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[06:42:42] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[07:04:52] *** Quits: zazzerino (~user@2600:1700:6004:8470::13) (Ping timeout: 252 seconds)
[07:15:47] *** Quits: semz (~none@user/semz) (Ping timeout: 246 seconds)
[07:15:57] *** Joins: semz (~none@user/semz)
[07:32:29] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Quit: Leaving)
[07:37:52] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[07:38:18] *** Joins: karlosz (~karlosz@12.196.174.98)
[07:52:04] *** Quits: jealousmonk (~user@2804:431:e7c4:cbd0:1924:309c:6eaf:8e1b) (Quit: ERC (IRC client for Emacs 27.1))
[07:53:18] <dieggsy> mernin
[07:53:51] <dieggsy> beach: you almost always say good morning exactly as I'm off to bed. fun how uh, timezones exist or something I guess lol
[07:54:18] <dieggsy> or well, an hour or two before
[08:13:00] <beach> Right, time zones do exist, or so I hear.
[08:15:59] <White_Flame> also circadian rhythms, for some
[08:27:13] <hayley> "Time zones? You mean the musique concrete piece arranged by that British synth band?"
[08:27:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:28:15] <hayley> A few years ago, one of my friends in Europe would go to bed about an hour before beach greeted everyone.
[08:50:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:50:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:55:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[09:20:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:21:54] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[09:33:27] *** Joins: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp)
[09:51:33] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:53:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[09:57:57] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[10:04:28] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Quit: Leaving)
[10:17:26] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[10:27:14] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:28:13] *** Joins: shka (~herr@109.231.6.176)
[10:38:13] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Ping timeout: 252 seconds)
[10:48:15] *** Joins: asarch (~asarch@2806:10ae:7:ebe7:a74d:7c25:b79e:678c)
[10:50:16] <asarch> What would be the reason for the evaluator so you could use a variable *without* actually not declared it before?
[10:50:20] <asarch> Too much macros?
[10:51:22] <beach> asarch: Er, hold on a sec...
[10:51:30] <mfiano>  That is undefined behavior
[10:51:42] <beach> Do you mean the fact that you need DEFPARAMETER or DEFVAR first?
[10:51:49] * moon-child is unable to parse the question
[10:52:07] <beach> asarch: Those are not "declarations".  They are "definitions".
[10:52:51] <asarch> I mean, I have a piece of code where you can actually do directly (setf tacos 10) without (let (tacos) …) before
[10:52:53] <beach> asarch: And the reason is to make life easier for the programmer.  If you didn't require those definitions, a simply typo would give some errors that can be very hard to find.
[10:53:13] <beach> asarch: Then that variable refers to a global one.
[10:53:24] <mfiano> Actually it is UB
[10:53:27] <beach> asarch: The system can't guess that you meant to introduce a lexical variable.
[10:53:38] <asarch> There is no (defparameter …) or any other before
[10:53:48] <beach> asarch: Exactly.
[10:54:06] <beach> asarch: So the variable doesn't exist.  And if it doesn't, what should the compiler guess that you want?
[10:55:17] <asarch> This is the code (sorry, México's Interne' is very slow): https://pastebin.com/izrAQ2Hm
[10:55:27] <beach> asarch: So like I said, if you have (let (lskdjfskdjflskdfj) (setf lskdjfskdjflsfdfj 234)...) you would get no warning or error message.
[10:55:40] *** Joins: pve (~pve@176-93-111-128.bb.dnainternet.fi)
[10:55:46] <beach> asarch: Please answer the questions and recognize that you understood the arguments.
[10:56:54] <asarch> There is no other taco before in the code: https://pastebin.com/LByzAhEa
[10:57:01] <beach> asarch: Please answer the questions and recognize that you understood the arguments.
[10:57:08] <asarch> What questions?
[10:57:54] <beach> You need to read what was directed to you and that ended with `?'.  I am not going to repeat.
[10:57:57] <asarch> I mean, as far I know, you can't directly do (setf tacos 10), right?
[10:58:06] <beach> asarch: Please answer the questions and recognize that you understood the arguments.
[10:58:32] <asarch> "Do you mean the fact that you need DEFPARAMETER or DEFVAR first?" <- No, I don't
[10:58:34] <beach> asarch: If you are not listening, how do you expect to get help?
[10:58:36] *** Joins: cosimone (~user@93-44-187-131.ip98.fastwebnet.it)
[10:59:08] <asarch> "what should the compiler guess that you want?" <- Does it guess your code?
[10:59:20] <mfiano> Sigh
[10:59:41] <beach> asarch: Should the compiler guess that you want a lexical variable or a special variable?
[11:00:16] <asarch> Should it guess it?
[11:00:25] <moon-child> asarch: it was a rhetorical question.  Beach was saying that the compiler should not guess what you want; or that if the compiler has to guess, it could very easily guess incorrectly, and so you should not force it to
[11:01:04] <beach> asarch: It has to generate code, so what code do you think it should generate?  A reference to a lexical variable (which would be in a register) or a reference to a special variable (which would be an entry in the dynamic environment)?
[11:02:31] <beach> asarch: And if the answer is "a lexical variable" what scope should it guess?  The entire function?  Just the SETF form?  Something in between, and if so which scope?
[11:02:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[11:03:04] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[11:03:49] <beach> asarch: If I have (let ((a 10)) (let ((b 20)) (setf x 2)) (setf x 3)) do I have two variables X, i.e. one for each LET?
[11:04:05] <asarch> Ok
[11:04:37] <beach> asarch: And there is still the argument of typos, that you probably didn't read.
[11:04:39] <asarch> But, if you have: (let ((beers 10)) (setf tacos 10) …), is this ok?
[11:05:19] <beach> asarch: If I have (let (lskjfskdjflskjdfl) (setf lskjfskdjflsjdfl 10)), should the compiler silently create the second variable even though I made a typo?
[11:05:42] <asarch> Will it?
[11:05:54] <beach> I am asking what you would prefer.
[11:06:10] <beach> asarch: Every variable must be defined before it is used, or else you have undefined behavior, and that is for very good reasons.
[11:06:15] <pjb> asarch: A better question would be: what should the compiler do if you write: (let ((legs 4)) (setq leqs 6) (let ((a (make-animal legs))) (dotimes (i leqs) (attach-foot a i)))) ?
[11:07:03] <pjb> asarch: legs is defined; leqs is not.  If the compiler assume it's a variable, and assigns it, and then use it, attach-foot will be called with an invalid pre-condition!
[11:07:05] <beach> asarch: The very good reason is that it helps the programmer avoid many hours of debugging for simple typos.
[11:07:09] <asarch> What should it do with something like?: (let ((beers 10)) (setf tacos 10) …)
[11:07:27] <beach> asarch: Preferably an error message, or at least a warning.
[11:07:27] <mfiano> asarch: A compiler never guesses anything. If it did, much time would be wasted of the user's.
[11:07:47] <mfiano> It's job is to generate reliable machine code.
[11:07:53] <mfiano> Its*
[11:08:25] <pjb> asarch: of course, it is obvious that there's a typo there.  If you let the compiler assume undefined variables, it won't be able to catch typoes.
[11:08:28] *** Quits: taiju (~taiju@p236053-ipngn200203fukui.fukui.ocn.ne.jp) (Ping timeout: 252 seconds)
[11:09:12] <mfiano> asarch: That form you pasted is undefined behavior. As for what it should do, is absolutely anything, from nothing at all, to launching nethack.
[11:09:33] <mfiano> Undefined is undefined.
[11:09:38] <moon-child> the classic example is nasal demons
[11:09:45] <asarch> So, I could do something like (let ((beers 10)) (setf tacos 10) (format t "Yesterday, I ate ~d tacos~%" tacos) …) and then eventually work?
[11:09:56] <mfiano> No
[11:10:03] <asarch> No?
[11:10:04] <mfiano> TACOS was never defined
[11:10:18] <asarch> But in my code it works
[11:10:26] <asarch> Even in my SBCL
[11:10:27] <mfiano> Because undefined behavior made your code lucky
[11:10:34] <mfiano> Undefined can do ANYTHING
[11:10:53] <asarch> https://pastebin.com/1yQaJ1YM
[11:11:25] <mfiano> It is undefined whether that warning is even emitted, or what happens at all.
[11:11:35] *** Parts: moon-child (~moon-chil@cardinal.elronnd.net) (too much straw)
[11:12:44] <asarch> As you can see in the last paste, I never declared taco and eventually I could use it later
[11:13:17] <asarch> Is this normal?
[11:13:25] <mfiano> asarch: This channel is about Common Lisp code. If you want to know what any old implementation will do, and to get guarantees about the future behavior, you must be BDFL of that implementation.
[11:14:06] <asarch> ?
[11:14:36] <beach> asarch: You can't determine what the language allows by testing a particular implementation.  You must read the standard, or believe people who read it already.
[11:14:48] <beach> asarch: The fact that it works in one implementation means nothing.
[11:15:06] <asarch> Did you see the paste? It is SBCL 2.1.8
[11:15:15] <beach> asarch: You can't determine what the language allows by testing a particular implementation.  You must read the standard, or believe people who read it already.
[11:15:16] <beach> asarch: The fact that it works in one implementation means nothing.
[11:15:17] <mfiano> Of course we did
[11:15:26] <mfiano> Do you not understand what we are telling you?
[11:15:42] <mfiano> Do you know the difference between a standard and an implementation?
[11:16:42] <asarch> Are you telling that SBCL actually permits to use variables without actually not declared them before?
[11:17:08] <asarch> The standard would be a piece of paper
[11:17:32] <mfiano> No. I'm telling you that SBCL can do anything, including rolling a die and deciding based on that, because the standard it implements allows for anything.
[11:18:10] <beach> asarch: For all practical purposes, the Common Lisp HyperSpec is the standard.
[11:18:13] <mfiano> If you want to code in SBCL, then you are ignoring one of the major benefits of Common Lisp.
[11:18:40] <asarch> I didn't know that
[11:18:56] <asarch> What should I use then?
[11:19:27] <asarch> I didn't know that SBCL was the Evil
[11:19:41] <mfiano> Either defvar of defparameter, depending on the semantics you require. Note that Common Lisp has no global variables. They are special and should be annotated as such by using the earmuff convention.
[11:19:48] <asarch> I thought it was the perfect representation of Common Lisp
[11:19:56] <mfiano> You are completely missing the point. SBCL is a very fine implementation.
[11:20:30] <asarch> Akuma no SBCL
[11:20:45] <beach> asarch: Every language standard contains situations that are undefined.  Often because it is too costly or even impossible to check the situation.  Then an implementation is free to define that behavior.
[11:21:08] <beach> asarch: Surely, this can't be the first time you encounter this idea.
[11:21:51] <asarch> Does your implementation support QuickLisp?
[11:22:09] <beach> Me?  I don't have an implementation.
[11:22:23] <mfiano> asarch: What I meant about SBCL, was that one should not code for SBCL behavior, that is subject to change at any time, but for Common Lisp the ANSI standard, which all implementations are bound by.
[11:22:44] * asarch feels like if he was in a middle of a Mandela Effect…
[11:22:55] *** Joins: gaqwas (~john@dynamic-095-117-116-025.95.117.pool.telefonica.de)
[11:22:57] <beach> asarch: For example, in C it is undefined behavior to have a pointer that points beyond the end of the array in memory.  But checking for that is undecidable.
[11:23:37] <asarch> But… you can't actually use a variable without actually not declared it before, right?
[11:24:15] <mfiano> You might be able to. The standard doesn't specify. Why subject your beautiful code to luck?
[11:24:29] <beach> asarch: Do you actually read what I wrote?  You need to DEFINE the variable.  Nothing to do with DECLARING it.
[11:25:18] <asarch> Yeah, yeah. I mean, defined before
[11:25:20] <beach> asarch: A lexical variable is DEFINED using LET or something similar.  A special variable is DEFINED using DEFVAR or DEFPARAMETER.
[11:25:34] <beach> asarch: Please make sure you use correct terminology.
[11:26:05] <asarch> But you get the idea, right?
[11:26:20] <asarch> Can I use a variable without actually not defined before?
[11:26:39] <beach> asarch: Are you listening at all?
[11:27:24] <beach> asarch: Using a variable before defining it is UNDEFINED BEHAVIOR.  If you want your program to conform to the STANDARD, then you must DEFINE your variables before you refer to them.
[11:28:13] <beach> asarch: If you don't care whether your program is conforming, you can do whatever the implementation allows you to do, but then it is no longer #commonlisp material, but #sbcl or #ccl, or...
[11:28:47] <asarch> Just to finish this: so, you could eventually use a undefined variable but you should not do that, right?
[11:29:10] <mfiano> YOU CANNOT
[11:29:15] <mfiano> NOT IN COMMON LISP
[11:29:49] * beach gives up.
[11:29:58] <saturn2> in SBCL you can, but it will print a warning. if you rely on this your code may not work in other implementations.
[11:30:06] <asarch> Bingo!
[11:30:12] <asarch> Thank you!
[11:30:38] <asarch> Domo arigatou saturn2 Sensei!
[11:31:11] <saturn2> just the facts, ma'am
[11:31:43] <asarch> Ok, next question: is there a way to make SBCL more restricted about this?
[11:32:10] <asarch> Ma'am? Whose ma'am is this?
[11:32:38] <jackdaniel> implicit variable definition is a common behavior among implementations, so discussing it here is no less outrageous than discussing behavior of dynamic bindings in multi threaded implementations
[11:33:06] <asarch> I see
[11:33:34] <jackdaniel> either way people will scoff at you if you don't declare the variable beforehand
[11:33:45] <jackdaniel> because it is a clear sign of a bad style
[11:34:14] <mfiano> I disagree with that wording, but whatever drives the answer home.
[11:35:04] <saturn2> asarch: you can do (setf *break-on-signals* 'warning)
[11:35:28] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:46] <asarch> Thank you!
[11:36:07] <asarch> BTW, are there any other implementations? Most of them are dead and the rest are not even finished yet :-(
[11:36:41] <jackdaniel> I don't think that it is a good idea to _brag_ about ones ignorance
[11:38:03] <pjb> beach: even the fact that all implementations return the same thing.  For example, what do you think of this: https://termbin.com/1azd8
[11:38:14] <saturn2> i believe clozure and ECL are uncontroversially alive and finished
[11:38:23] <mfiano> LispWorks, Allegro, ABCL, Clasp, Clozure, CMUCL, SBCL, CLISP, ECL, to name a few
[11:38:25] *** Joins: karlosz (~karlosz@12.196.174.98)
[11:38:48] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:08] <jackdaniel> asarch: here https://common-lisp.net/implementations from complete and not dead
[11:39:54] <jackdaniel> and there are arguably more complete and maintained (depends on what criteria you put behind these words)
[11:40:01] <beach> pjb: Sure.
[11:40:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[11:40:23] *** Joins: taiju (~taiju@m014013236064.v4.enabler.ne.jp)
[11:40:49] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[11:40:59] <mfiano> Wonder why CMUCL is not listen
[11:41:01] <mfiano> listed*
[11:41:06] <asarch> Anyone here uses LispWorks at home?
[11:41:37] <jackdaniel> mfiano: good point, I'm positive that it is continously maintained
[11:41:44] <mfiano> It very much is
[11:43:26] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:e473:ba5e:85e3:6828)
[11:47:05] *** Quits: cognemo (~cognemo@cpe-46-164-17-185.dynamic.amis.net) (Ping timeout: 252 seconds)
[11:51:29] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 252 seconds)
[11:51:39] <asarch> I activated (setf *break-on-signals* 'warning) and now the code is a mess: no way to determine the lambda list for #<STANDARD-GENERIC-FUNCTION ELEMENTOS:RENDEREAR (0)>
[11:52:58] <asarch> That's great, isn't it?
[11:58:35] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[12:06:57] *** Joins: karlosz (~karlosz@12.196.174.98)
[12:11:17] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[12:16:30] <pve> I've now written a number of fun and adventurous reader hacks with Eclector, and it's been very exciting. But I'm concerned that they don't integrate well with editors. Would it be possible (in the future) to let something like Second Climacs know how to handle any reader modifications the user chooses to load? (i.e. tell it "please use this client when parsing this buffer")
[12:16:52] <pve> or is it designed to only ever parse standard Common Lisp?
[12:17:06] <beach> That is definitely the plan.
[12:17:23] <beach> The buffer parser uses Eclector.
[12:17:35] <pve> beach: yes, that was my understanding
[12:17:40] <pve> which made me hopeful
[12:18:09] <beach> The exact way we communicate the readtable to Eclector has not been determined, but I am sure we will find a reasonable way.
[12:18:18] <pve> and it's good to hear that it's most likely going to work
[12:18:22] <pve> sure
[12:19:13] <pve> for instance, I implemented SBCL's extended package prefix syntax, and that isn't legal CL as far as I know
[12:19:23] <beach> This is what makes Second Climacs stand apart from all other Common Lisp editors.
[12:19:28] <pve> so parser would choke on that
[12:20:10] <beach> I believe it's the only editor that uses a conforming Common Lisp reader to parse the contents of a Common Lisp buffer.
[12:20:44] <beach> We will also use this parsing technique to compute indentation, but the exact mechanism to be used is still not fixed.
[12:21:44] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[12:21:57] <beach> So I am hoping that this superior Common Lisp support will make it irresistible to Common Lisp programmers, at least for Common Lisp programming tasks.  But, then, people seem happy with Emacs and SLIME, so who knows.
[12:22:26] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:23:05] <pve> beach: the part about using a conforming CL reader to parse the contents is really exciting
[12:23:06] *** Joins: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no)
[12:23:34] <pve> especially because it's extensible
[12:23:43] <beach> I agree.
[12:24:40] <mfiano> I will say that I use Emacs and Sly and don't see that changing any time soon, because I don't always have a graphical environment (X11).
[12:26:34] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[12:27:07] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[12:44:43] *** Quits: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no) (Read error: Connection reset by peer)
[12:48:59] <loke> Test
[12:49:08] <loke[m]> Test
[12:49:15] *** Parts: loke[m] (~loke@2001:470:69fc:105::237) ()
[12:50:09] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[12:50:27] <contrapunctus> Test
[12:51:01] <loke> contrapunctus: Thanks.
[12:51:23] <loke> It appears my matrix federation stopped working after I messed up the configuration a bit.
[12:52:08] <loke> Very annoying.
[12:52:38] <loke[m]> Test again
[12:52:48] <loke> Oh wait, now it showed up. Test.
[12:52:54] <loke[m]> And a test reply.
[12:57:17] <contrapunctus> loke[m]: come to the dark side^W^W^WBiboumi, we have cookies^Wlower resource usage 😏
[12:57:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[12:57:36] <loke> bibomi?
[12:58:04] <contrapunctus> XMPP-IRC bridge
[12:58:26] <loke> I see.
[12:58:38] <loke> Well, I am on far too many Matrix channels already.
[12:58:42] *** Quits: karlosz (~karlosz@12.196.174.98) (Ping timeout: 260 seconds)
[12:58:56] <loke> And if I want to use regular IRC (like right now) I just use hexchat.
[12:59:58] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:02:21] *** Joins: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa)
[13:04:14] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[13:04:21] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[13:05:33] <asarch> Alexa: log out
[13:05:46] *** Quits: asarch (~asarch@2806:10ae:7:ebe7:a74d:7c25:b79e:678c) (Quit: Leaving)
[13:06:02] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[13:10:45] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:17:36] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:19:34] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:25:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:25:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:43:09] *** Joins: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no)
[13:45:21] *** Quits: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no) (Read error: Connection reset by peer)
[13:52:58] *** Joins: random-nick (~random-ni@87.116.183.117)
[13:53:09] *** Joins: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no)
[14:08:52] *** Quits: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no) (Read error: Connection reset by peer)
[14:11:03] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Remote host closed the connection)
[14:11:18] *** Joins: taiju (~taiju@240b:253:ec40:2400:e069:cea0:b66b:350c)
[14:12:36] *** Joins: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no)
[14:16:03] *** Quits: frgo (~frgo@p200300deef0cee001559b738248b8bd9.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:16:30] *** Joins: frgo (~frgo@p200300deef0cee00f4a0cd8da82a201b.dip0.t-ipconnect.de)
[14:24:07] *** Quits: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no) (Read error: Connection reset by peer)
[14:25:31] <mfiano> I haven't really coded in a couple weeks, and something is not what I expect with regard to method dispatch.
[14:26:38] <mfiano> I would like some help understanding what is going on. Let me see if I can gist a smaller example.
[14:29:24] <mfiano> https://gist.github.com/mfiano/4afabe0c89794eb2cdc3d2207cc1acbf
[14:30:39] <mfiano> If I invoke this GF with those particular specialized arguments, I get no output printed by the FORMAT call. If I remove the default method in the DEFGENERIC form, I do get the output with the same arguments supplied. Why is class T more specific than a EQL symbol instance?
[14:34:23] <Alfr> mfiano, is the context class from the right package in the defmethod?
[14:34:47] <hayley> I can't reproduce that behaviour here.
[14:35:26] <mfiano> If it wasn't then why would I get output when removing the default method definition?
[14:35:32] <hayley> What does (compute-applicable-methods #'entity-attach-hook (list (make-instance 'context) (make-instance 'entity) 'blah)) [or thereabouts] return?
[14:36:02] <hayley> Here the method specialized on (EQL 'RENDER) comes first, and then the method specialized on T comes second.
[14:36:15] <mfiano> One minute. Let me put my code back in order.
[14:40:44] <mfiano> (#<STANDARD-METHOD PROTO::ENTITY-ATTACH-HOOK (PROTO:CONTEXT PROTO:ENTITY T) {10025B75F3}>)
[14:41:31] <hayley> Hm. Is the RENDER symbol in the right package?
[14:43:32] <mfiano> Seems to be
[14:44:54] <hayley> (Oh, I changed the symbol name to BLAH for some reason. I trust you spotted that.)
[14:45:01] <White_Flame> My stack is being blown in printing a return value, even though *print-circle* is T.  I don't have any print-object methods defined.  Any other ideas?
[14:45:22] <White_Flame> it is a large, circular mash of data
[14:45:41] <White_Flame> but it shouldn't be going for tens of thousands of elements before looping
[14:45:57] <mfiano> hayley: Yes, let me post a more complete code fragment
[14:51:11] <mfiano> hayley: https://gist.github.com/mfiano/e4a7665ab1589277ee4bfdd47d9f0d4f
[14:51:39] <mfiano> That is closer to what I have. This project is private and covers a lot of files. I included as much relevance as I could.
[14:53:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[14:56:22] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[14:57:11] *** Joins: srhm (~srhm@user/srhm)
[14:58:47] *** Joins: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no)
[15:00:52] <mfiano> Okay, something is really messed up, and the answer cannot be gotten from that gist.
[15:00:52] *** Quits: mingus (~jan-magnu@77.18.59.89.tmi.telenormobil.no) (Read error: Connection reset by peer)
[15:01:28] <mfiano> Changing the ENTITY parameter of my default method to specialize on class T fixes it.
[15:01:28] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[15:01:36] <mfiano> Need to investigate further
[15:02:24] *** Joins: srhm (~srhm@user/srhm)
[15:03:54] <mfiano> Thanks for taking a look anyway. I don't know the answer but I think it will have to wait until tomorrow as it is very late here.
[15:04:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[15:06:32] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[15:07:25] *** Joins: srhm (~srhm@user/srhm)
[15:08:01] <mfiano> It appears that only works because the left to right specificity is greater in the external method before it gets to the EQL parameter
[15:08:19] <mfiano> I am baffled how it is using T as more specific
[15:11:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:15:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[15:29:14] <mfiano> It seems like I might be running into undefined behavior territory
[15:30:01] <beach> Method specificity is determined left to right first, unless you change the argument precedence order.
[15:30:06] <mfiano> It _might_ be doing a #'change-class in the middle of dispatch. I need to trace my code carefully tomorrow.
[15:30:51] <mfiano> Yes, I know. Currently the behavior I see is that T is more specific than (EQL :FOO), when called with :FOO
[15:45:16] <mfiano> Ok I finally figured out the problem
[15:45:43] <Shinmera> etimmons: More progress, the Lisp module seems to be working. https://twitter.com/Shinmera/status/1444274353231831040
[15:46:12] <mfiano> It seems I might need to write my own method combinator for the first time. I need most-specific-last ordering with standard combination
[15:46:35] <mfiano> That or I have to really mess with my mixin precedence for non progn methods
[15:46:56] <mfiano> The latter seems difficult given the protocol I have already
[15:48:04] <mfiano> I am not even sure if it makes sense for something resembling standard combination to have a reversed ordering
[15:48:42] <mfiano> before/after methods would be weird for sure with regard to subclasses
[15:51:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:54:03] <mfiano> Does anyone know of any libraries that provide similar method combinations, or something close enough to start building upon? I am now going to sleep so I will read tomorrow. Thanks.
[15:56:47] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[15:58:27] *** Joins: selwyn (~selwyn@user/selwyn)
[15:58:47] *** Joins: mingus (~jan-magnu@ti0135a400-1977.bb.online.no)
[16:00:19] <akater[m]> mfiano: I always started with hyperspec-lookup define-method-combination.  There's an implementation of standard one there.
[16:04:53] *** Joins: Debate2021 (~Debate202@103.134.42.228)
[16:05:35] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 252 seconds)
[16:06:34] *** Quits: mingus (~jan-magnu@ti0135a400-1977.bb.online.no) (Ping timeout: 252 seconds)
[16:06:44] *** Parts: Debate2021 (~Debate202@103.134.42.228) ()
[16:08:48] *** Joins: mingus (~jan-magnu@ti0135a400-1977.bb.online.no)
[16:17:05] <pve> I've made an overview of the reader experiments I've made so far with Eclector. I'd be curious to hear what the general opinion is on things like this. Is there a place for them, or are they completely evil, and only result in stylistically diverging code bases?
[16:17:15] <pve> https://github.com/pve1/eclector-access/blob/master/examples/overview.org
[16:18:09] <Shinmera> the package prefix thing sbcl has is pretty cool for repl stuff, though I wouldn't want to see it in a code base.
[16:19:00] <Shinmera> hierarchical packages are also interesting, though I'm a bit wary of them myself, given the existing ecosystem.
[16:19:07] <Shinmera> the rest makes me uncomfortable :)
[16:19:14] <pve> Shinmera: haha
[16:19:21] <pve> thanks!
[16:21:43] <Shinmera> one thing I always wanted to look at is conditional execution stuff
[16:22:02] <Shinmera> meaning you can write a form as if its package existed, but it'll only be executed if that package actually exists.
[16:22:14] <pve> Shinmera: hmm
[16:22:28] <Shinmera> would need some more convoluted hackery to get that working though.
[16:22:52] <Shinmera> eg (when-packages (:foo) (foo:bar))
[16:23:22] <pve> could it be modeled after the "Extended Package Prefix Syntax" maybe?
[16:23:34] <pve> but that's a pretty good idea, either way
[16:23:52] <Shinmera> bonus points if it "late binds" meaning you don't have to recompile after the package in question is actually present.
[16:24:57] <pve> My feeling is that it would be doable
[16:25:05] <Shinmera> I agree :)
[16:26:09] <Shinmera> switch the reader to a special mode when it encounters a when-packages form, then emit a when check and turn each foo:bar function call symbol into something like (lambda (&rest args) (apply (find-symbol ..) args))
[16:26:48] <pve> because eclector let's you choose not to intern, so at the very least, you expand into a bunch of (read-from-string "mystery-package::hello")
[16:26:59] <pve> Shinmera: yes, exactly
[16:30:52] <pve> and come to think of it, I've had to wrestle with that same problem on occasion, especially in scripts IIRC
[16:32:42] <hayley> #+(#.(cl:if (cl:find-package 'blah) :and :or) (blah:bar) ; truly awful WHEN-PACKAGE
[16:33:10] <hayley> I missed a right paren there. Oops.
[16:35:49] <pve> huh, well that was easy
[16:36:58] <pve> oh, but it misses out on the bonus points :)
[16:47:46] <beach> pve: Thanks for putting all that together.
[16:53:29] <pve> beach: No problem, it's been very educational.
[16:54:12] <beach> I can imagine.  But it is also great publicity for Eclector, which I think is a great program.
[16:54:14] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:00:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:06:18] <pve> beach: Well that's great too, if it helps. To my amateur eyes, it deserves publicity.
[17:12:02] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[17:12:29] *** Joins: makomo (~makomo@user/makomo)
[17:14:56] *** Quits: lottaquestions (~nick@2607:fa49:503e:3000:4dca:d3cb:8926:bf89) (Ping timeout: 252 seconds)
[17:15:12] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:15:33] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[17:19:07] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[17:19:34] *** Joins: makomo (~makomo@user/makomo)
[17:24:15] <beach> I agree.
[17:32:02] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[17:32:04] *** Joins: random-nick (~random-ni@87.116.165.220)
[17:40:59] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[17:42:09] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[18:08:04] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:09:06] *** Quits: cyberbanjo (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23) (Remote host closed the connection)
[18:21:12] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:25:12] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net)
[18:25:15] *** Joins: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net)
[18:25:43] *** Quits: molson (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net) (Remote host closed the connection)
[18:27:26] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[18:29:23] *** Joins: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net)
[18:31:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[18:38:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:40:04] *** Quits: CptKirk (~CptKirk@70-57-27-195.hlrn.qwest.net) (Ping timeout: 256 seconds)
[18:42:45] *** Joins: selwyn (~selwyn@user/selwyn)
[18:51:26] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[18:57:50] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:12:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:12:42] *** Joins: jealousmonk (~user@2804:431:e7c4:cbd0:1924:309c:6eaf:8e1b)
[19:24:31] <etimmons> Shinmera: very nice! I also see a detail I missed earlier. Seems like the plan is sent to the client a step at a time instead of all at once.
[19:24:54] <Shinmera> right.
[19:29:31] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[19:40:38] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 252 seconds)
[19:41:20] *** Joins: amb007 (~a_bakic@214.132.22.93.rev.sfr.net)
[20:16:16] *** Quits: amb007 (~a_bakic@214.132.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[20:33:59] *** Joins: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23)
[20:33:59] *** Quits: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23) (Remote host closed the connection)
[20:36:01] *** Joins: igemnace (~ian@user/igemnace)
[20:37:53] *** Joins: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23)
[20:38:48] *** Quits: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23) (Remote host closed the connection)
[20:39:21] *** Joins: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23)
[20:39:37] *** Quits: malik (~user@2607:fb90:4251:52c1:bd1:ab41:5705:7c23) (Remote host closed the connection)
[20:54:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:59:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[20:59:47] *** Joins: amb007 (~a_bakic@215.144.204.77.rev.sfr.net)
[21:21:26] *** Quits: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[21:21:27] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[21:22:10] *** Joins: defaultxr (~defaultxr@99-138-110-241.lightspeed.cicril.sbcglobal.net)
[21:23:04] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[21:24:20] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[21:24:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:25:01] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 265 seconds)
[21:47:08] *** Quits: cosimone (~user@93-44-187-131.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[21:51:32] *** morte is now known as mortemeur
[21:53:15] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:55:13] *** Joins: thmprover (~user@047-042-215-236.res.spectrum.com)
[22:04:07] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1061-static.midco.net) (Ping timeout: 252 seconds)
[22:05:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:14:05] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[22:15:04] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[22:20:03] *** Joins: karlosz (~karlosz@12.196.174.98)
[22:31:53] *** Joins: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de)
[22:38:50] *** Quits: amb007 (~a_bakic@215.144.204.77.rev.sfr.net) (Ping timeout: 252 seconds)
[22:43:29] *** Quits: Josh_2 (~user@37.25.47.130) (Quit: ERC (IRC client for Emacs 27.1))
[22:49:13] *** Joins: amb007 (~a_bakic@131.247.204.77.rev.sfr.net)
[22:51:01] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[23:00:11] *** Quits: amb007 (~a_bakic@131.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:01:13] *** Joins: amb007 (~a_bakic@131.247.204.77.rev.sfr.net)
[23:01:14] *** Quits: amb007 (~a_bakic@131.247.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[23:02:15] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:02:36] *** Joins: asarch (~asarch@2806:10ae:7:ebe7:a74d:7c25:b79e:678c)
[23:11:31] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[23:15:20] *** Joins: lotuseater (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[23:32:29] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9472:a2eb:3822:1241)
[23:37:20] *** Joins: charles__ (~charles@cpe-76-186-124-165.tx.res.rr.com)
[23:38:59] *** Quits: asarch (~asarch@2806:10ae:7:ebe7:a74d:7c25:b79e:678c) (Quit: Leaving)
[23:39:54] *** Quits: charles_ (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 260 seconds)
[23:42:56] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) ()
[23:43:32] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
