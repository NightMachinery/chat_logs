[00:11:00] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[00:23:41] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[00:31:28] <FromDiscord> <Isofruit> In reply to @Yardanico "https://github.com/cheatfate/nimcrypto can do both": I'm trying to comprehend how hashing in nimcrypto works but I can't really say I'm succeeding.↵So I set up a context object (with a count (?) a state (?) and a buffer (?)),  sth sth. digest (?), more unknown steps,  out comes the string?↵I don't think I comprehend the documentation or the given examples in there
[00:31:51] <FromDiscord> <Isofruit> (edit) "string?↵I" => "string in bytes that I can base64-encode myself?↵I"
[00:36:23] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[00:36:57] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[00:48:13] <FromDiscord> <kaddkaka> If anyone would like it give some feedback on my newbie Nim code I would be very thankful: https://github.com/kaddkaka/adventofcode2021/blob/main/day04.nim↵(It's a solution for https://adventofcode.com/2021/day/4)
[00:48:32] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:48:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 260 seconds)
[00:58:57] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[00:59:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:05:09] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[01:06:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:11:25] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:18:54] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (Remote host closed the connection)
[01:18:54] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (Remote host closed the connection)
[01:18:56] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Remote host closed the connection)
[01:18:57] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Write error: Connection reset by peer)
[01:21:50] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[01:23:52] *** Joins: drewr (~drew@user/drewr)
[01:46:50] *** Quits: cheer[m] (~cheertchn@2001:470:69fc:105::39de) (Quit: Client limit exceeded: 20000)
[01:47:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:b9ca:7580:971f:87f4) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:47:19] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[01:47:19] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[01:47:19] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[01:47:19] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[01:47:30] *** Quits: xiamx (~xiamx@2001:470:69fc:105::1:5692) (Quit: Client limit exceeded: 20000)
[01:48:18] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (Quit: Client limit exceeded: 20000)
[01:49:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[01:49:48] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3KIU
[01:50:02] *** Joins: cheer[m] (~cheertchn@2001:470:69fc:105::39de)
[01:50:21] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[01:50:22] *** Joins: xiamx (~xiamx@2001:470:69fc:105::1:5692)
[02:19:03] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3KIZ
[02:19:52] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3KJ0
[02:34:05] <FromDiscord> <hotdog> In reply to @krisppurg "Hiya, Whenever I try": In your json, sticker_items is an array
[02:34:20] <FromDiscord> <hotdog> So presumably the type needs to model it as a sew
[02:34:27] <FromDiscord> <hotdog> Seq
[02:37:39] <FromDiscord> <hotdog> In reply to @Casey.McMahon "is there a way": Haven’t used this command before but you can probably splice the html together if there’s no inbuilt way
[02:38:48] <FromDiscord> <Casey.McMahon> I was just going through how the nim compiler builds it's manual and tutorial files, which originates as an `.rst` file
[02:39:03] <FromDiscord> <Casey.McMahon> In reply to @hotdog "Haven’t used this command": .
[02:39:56] <FromDiscord> <Casey.McMahon> a little confusing, obviously, as it does a whole bunch of other stuff, and isn't documented well
[02:40:55] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:53:25] <FromDiscord> <Casey.McMahon> I think I'll just use nimibook
[02:53:25] <FromDiscord> <Casey.McMahon> https://github.com/pietroppeter/nimibook
[02:55:44] <FromDiscord> <geekrelief> I'm using `std/unittest`, and I have a test that wants to check if some code raises an `AssertionDefect` via  `raiseAssert`.  I realize defects can't be caught, so is there another way to test for failure scenarios?
[02:56:32] <FromDiscord> <geekrelief> I guess I could raise an exception instead.
[02:59:47] <FromDiscord> <geekrelief> Is it possible to catch an exception coming from a macro?
[03:02:39] <FromDiscord> <Isofruit> A macro is merely rendered into your source code at compile time, methinks.↵I'd assume so, since your tests are running after compile time (I think? I'd assume that at least).↵Shouldn't it be possible to just jot down what the fully rendered source code will be and write tests that cover that?
[03:02:40] <FromDiscord> <Elegantbeef> No there is not
[03:02:44] <FromDiscord> <geekrelief> sent a code paste, see https://paste.rs/iC5
[03:03:00] <FromDiscord> <geekrelief> In reply to @Elegantbeef "No there is not": darn thx
[03:03:10] <FromDiscord> <Elegantbeef> You should be able to see the defects though with the `expect`
[03:03:17] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/assertions.html#doAssertRaises.t%2Ctypedesc%2Cuntyped
[03:03:28] <FromDiscord> <Elegantbeef> You can test with assertions on
[03:03:43] <FromDiscord> <Elegantbeef> In some dialects defects are not catchable
[03:03:49] <FromDiscord> <geekrelief> ooh thanks for the tip
[03:04:13] <FromDiscord> <Elegantbeef> So you can force defects to be catchable i think
[03:04:24] <FromDiscord> <Elegantbeef> Not that you should ever do that in real code
[03:04:31] <FromDiscord> <Elegantbeef> If you do that in real code i'll find you and break your legs
[03:04:35] <FromDiscord> <geekrelief> Right, I'm only doing this for tests
[03:04:59] <FromDiscord> <Elegantbeef> That's how it starts!
[03:05:20] <FromDiscord> <Elegantbeef> Tests are a gateway drug!
[03:05:24] <FromDiscord> <geekrelief> Well you planted the idea in my head, so you started it.
[03:06:03] <FromDiscord> <geekrelief> It starts with ideas, turned into words, into actions.  It's all your fault!
[03:06:33] <FromDiscord> <Elegantbeef> Well it's your knees
[03:10:37] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3KJq
[03:10:54] <FromDiscord> <Elegantbeef> Wait is this at CT or RT?
[03:11:00] <FromDiscord> <geekrelief> at compile time
[03:11:19] <FromDiscord> <geekrelief> I want error reporting for my macro
[03:12:02] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[03:13:23] <FromDiscord> <Elegantbeef> I think the best thing to do is compile files and check the output
[03:13:33] <FromDiscord> <Elegantbeef> Like how the Nim stdlib checks for errors
[03:13:51] <FromDiscord> <Elegantbeef> `nim check --hints:off yourFile.nim`
[03:14:40] <FromDiscord> <Elegantbeef> On a side note, why are you raising errors in a macro
[03:14:50] <FromDiscord> <geekrelief> huh ok, not the end of the world, but I'll keep that in mind.  Would be nice to have a test tool that handles that.
[03:15:08] <FromDiscord> <geekrelief> I want to give better error reporting.
[03:15:20] <FromDiscord> <Elegantbeef> So then use `macros.error`
[03:15:33] <FromDiscord> <Elegantbeef> raising errors in macros is terrible
[03:16:01] <FromDiscord> <geekrelief> ah, thanks. 🙂 it did feel wrong
[03:16:22] <FromDiscord> <Elegantbeef> https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L206-L211 for an example
[03:17:15] <FromDiscord> <geekrelief> gotcha, thx
[03:29:24] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3KJA
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:33:37] <FromDiscord> <Elegantbeef> I'd say so
[03:33:48] <FromDiscord> <Elegantbeef> error doesnt break compilation, so you can bubble more errors
[03:33:57] <FromDiscord> <Elegantbeef> So you need to handle what happens if it errors
[03:36:39] <FromDiscord> <TryAngle> where was the compile cache directory again?
[03:36:56] <FromDiscord> <Elegantbeef> `~/.cache/nim` on \nix
[03:37:49] <FromDiscord> <TryAngle> thanks
[03:41:02] <arkanoid> how do you handle errors with nim?
[03:41:23] <FromDiscord> <Elegantbeef> try except
[03:41:37] <arkanoid> I mean, do you use return codes, or just exceptions, or other patterns?
[03:42:00] <FromDiscord> <Elegantbeef> You can use any, Nim has exceptions though so it's more idiomatic
[03:42:11] <FromDiscord> <Elegantbeef> There are libraries which give you Rust style result
[03:42:25] <FromDiscord> <Elegantbeef> https://github.com/arnetheduck/nim-result
[03:42:36] <arkanoid> I've never used Result object pattern before, but I was thinking about it
[03:42:40] <FromDiscord> <Elegantbeef> I'd say whatever works for you
[03:43:04] <FromDiscord> <Elegantbeef> You can do the Go pattern of a tuple, the C pattern of a global error value, Rust's or exception handling
[03:43:22] <FromDiscord> <Elegantbeef> Though the first 2 suuuuuck
[03:44:09] <arkanoid> it seems to me that the best option would be using exceptions for exceptional (unrecoverable or unknown errors) and result object for all the others
[03:44:46] <arkanoid> but actually unsure, I come from try/except world for everything (java like)
[03:45:00] <arkanoid> of just mess around (python like)
[03:45:39] <arkanoid> the point agains result object in Nim is that you're not forced to handle both happy and bad result paths
[03:46:11] <arkanoid> while Rust with pattern matching makes this seamless
[03:48:08] <FromDiscord> <Elegantbeef> something something Hax's pattern matching 😀
[03:48:48] <arkanoid> yes but still you're not forced. I want nim compiler to raise error if path is not handled properly
[03:49:45] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KJQ
[03:49:47] <FromDiscord> <kaddkaka> sent a code paste, see https://paste.rs/uMn
[03:50:13] <FromDiscord> <Elegantbeef> https://github.com/beef331/aoc2021/blob/master/day5/day5.nim 😀
[03:50:28] <FromDiscord> <kaddkaka> (edit) "https://play.nim-lang.org/#ix=3KJS" => "https://play.nim-lang.org/#ix=3KJR"
[03:51:38] <FromDiscord> <kaddkaka> 1. oh, `scantuple`!
[03:51:57] <FromDiscord> <Elegantbeef> 2. you can make a constructor
[03:52:03] <FromDiscord> <Elegantbeef> 3 no
[03:52:29] <FromDiscord> <Elegantbeef> 4 in nim user types start with capitals
[03:53:38] <FromDiscord> <kaddkaka> 4. not mine, yet 😛
[03:54:18] <FromDiscord> <Elegantbeef> My solution was relatively performant if you like racing time
[03:54:19] <FromDiscord> <kaddkaka> Also, how come my `var line` doesn't shadow the `lines` used in `for line in lines "day05.input":   `
[03:54:21] <FromDiscord> <kaddkaka> (edit) "`" => "`>"
[03:54:35] <FromDiscord> <kaddkaka> (edit) ""day05.input":   `>" => ""day05.input":`?"
[03:55:13] <FromDiscord> <kaddkaka> @ElegantBeef That's also interesting, was not really going for that here/yet
[03:55:35] <FromDiscord> <Elegantbeef> Are you talking about `var lines` and `for x in lines "path"`?
[03:55:47] <FromDiscord> <kaddkaka> @ElegantBeef how did you emasure? just time?
[03:55:49] <FromDiscord> <kaddkaka> In reply to @Elegantbeef "Are you talking about": yes
[03:55:50] <FromDiscord> <Elegantbeef> if so the reason is `iterator`s are preferred inside for loops
[03:55:59] <FromDiscord> <kaddkaka> ah ok
[03:56:09] <FromDiscord> <Elegantbeef> I used flywind's timeit package
[03:56:16] <FromDiscord> <kaddkaka> feels a bit scary to overload the name though
[03:56:22] <FromDiscord> <Elegantbeef> Eh
[03:56:27] <FromDiscord> <Elegantbeef> Overloading makes sense for iterators
[03:56:28] <FromDiscord> <kaddkaka> at least iffy
[03:56:32] <FromDiscord> <Elegantbeef> take `[]` for slices
[03:56:44] <FromDiscord> <Elegantbeef> `for x in a[1..^1]` without overloading is a copy
[03:56:52] <FromDiscord> <Elegantbeef> With overloading it's a 0cost iteration
[03:57:28] <FromDiscord> <Elegantbeef> You arent overloading in this case imo
[03:57:31] <FromDiscord> <kaddkaka> ok, good reason 👍
[03:57:52] <FromDiscord> <kaddkaka> well the name/identifier is overloaded, no?
[03:58:05] <FromDiscord> <Elegantbeef> Not ambiguous
[03:58:07] <FromDiscord> <Elegantbeef> So i'd say no
[03:58:33] <FromDiscord> <kaddkaka> overloads are usually not ambiguous, right? If they were, they would not eb usable?
[03:58:37] <FromDiscord> <kaddkaka> (edit) "eb" => "be"
[03:58:37] <FromDiscord> <Elegantbeef> I guess technically it's an overloaded symbol, but it's not ambiguous so there is no issue
[03:58:42] <FromDiscord> <kaddkaka> sure
[03:58:48] <FromDiscord> <kaddkaka> Agreed
[03:58:55] <FromDiscord> <Elegantbeef> `lines x` is a command call, so it's not that iffy
[03:59:07] <FromDiscord> <Elegantbeef> Atleast to me
[04:00:44] <FromDiscord> <kaddkaka> sNo I guess not. It's just uncommon (to me) wiht things other than functions that are overloaded. So it's unfamiliar I guess 🙂
[04:00:51] <FromDiscord> <kaddkaka> (edit) "sNo" => "No"
[04:00:57] <FromDiscord> <kaddkaka> (edit) "wiht" => "with"
[04:01:22] <FromDiscord> <Elegantbeef> Now shadowing variables is an iffy territory
[04:01:53] <FromDiscord> <kaddkaka> I was thinking if I was going to add the last point after the `while` loop, like you did, or mixture with the end condition (as I ended up doing).
[04:13:35] <FromDiscord> <kaddkaka> Is it ok to use `_` to discard a value in a tuple assignment?↵`let (_, x1, y1, x2, y2) = line.scanTuple("$i,$i$s->$s$i,$i")`
[04:13:56] <FromDiscord> <kaddkaka> The code passes, but I couldn't find anything in the manual.
[04:14:29] <FromDiscord> <geekrelief> That's valid.
[04:17:16] <FromDiscord> <kaddkaka> Yes I noticed. first I tried `let (discard, x1, y1, x2, y2) = line.scanTuple("$i,$i$s->$s$i,$i")` which was not valid. Is `_` mentioned in the manual somwhere?
[04:17:29] <FromDiscord> <geekrelief> It's under tuple unpacking in the manual
[04:17:47] <FromDiscord> <kaddkaka> I must be blind, thanks
[04:18:05] <FromDiscord> <geekrelief> no worries, I was searching for it for a few minutes
[04:18:13] <FromDiscord> <geekrelief> I swore I read it in the manual
[04:18:23] <FromDiscord> <geekrelief> https://nim-lang.github.io/Nim/manual.html#statements-and-expressions-tuple-unpacking
[04:19:09] <FromDiscord> <Elegantbeef> `_` is just a unaccessible identifier in Nim
[04:20:18] <FromDiscord> <Elegantbeef> You can also use it in a proc def for instance `proc init(_: typedesc[Point])`
[04:21:40] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KK8
[04:26:02] <FromDiscord> <kaddkaka> Getting similar redefinition error if I user `iterator`, so I was probably to hasty in my previous conclusion.
[05:08:18] *** Quits: drewr (~drew@user/drewr) (Quit: ERC (IRC client for Emacs 27.2))
[05:21:00] <FromDiscord> <Elegantbeef> They come from the same module so in this case it's ambiguous
[05:21:10] <FromDiscord> <Elegantbeef> You cannot do `myModule.line` to diferentiate
[05:35:14] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:04:33] *** Joins: neurocyte6 (~neurocyte@user/neurocyte)
[06:06:46] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[06:06:46] *** neurocyte6 is now known as neurocyte
[06:20:38] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:29:02] <FromDiscord> <evoalg> I would argue that even though `var line` and `for line in` works, it's not as clear as using a different variable name, and even if the coder is comfortable with it, others may not be, so it's good practice to be as clear as possible (just my opinion)
[06:29:35] <FromDiscord> <Elegantbeef> Yea shadowing should only be used where it makes sense
[06:30:15] <FromDiscord> <Elegantbeef> For example
[06:30:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://paste.rs/2Gl
[06:30:47] <FromDiscord> <evoalg> what is Option?
[06:31:18] <FromDiscord> <Elegantbeef> `std/options` it adds a boolean flag to whether the value is "set"
[06:31:20] <FromDiscord> <Rika> Simulates None in Python (kinda)
[06:31:35] <FromDiscord> <evoalg> ohhhh ok
[06:33:35] <FromDiscord> <sOkam!> what's the consensus of when to use func instead of proc? (aka having side-effects or not by default)↵Is there a general rule of what's expected from Nim by standard?
[06:33:37] <FromDiscord> <huantian> more like the `Optional[T]` type hint which is `T | None`
[06:35:30] <FromDiscord> <Rika> In reply to @sOkam! "what's the consensus of": No
[06:35:38] <FromDiscord> <Rika> Use it as much as you want
[06:36:11] <FromDiscord> <evoalg> I thought it was generally nim's best practice to use the most restrictive way if you can?
[06:36:17] <FromDiscord> <Elegantbeef> Indeed
[06:36:20] <FromDiscord> <Rika> …. If you want
[06:36:23] <FromDiscord> <Elegantbeef> func -\> proc
[06:38:14] <FromDiscord> <Elegantbeef> Though i'm generally daft and go for proc
[06:39:51] <FromDiscord> <Rika> I personally literally don’t care
[06:40:34] <FromDiscord> <evoalg> so if I use a func and then if the compiler complains then I might say "oh that shouldn't have had a side-effect, let me see, oh it's because I was unintentionally accessing a global var which I didn't mean to do - nice one nim, you spotted a bug for me" ... same with `let` vs `var` right?
[06:40:38] <FromDiscord> <Rika> I’d rather a system that warns me of side effects (off by default)
[06:41:16] <FromDiscord> <Rika> In reply to @evoalg "so if I use": Much rarer than the “dammit Nim I’m debugging stfu”
[06:41:34] <FromDiscord> <evoalg> true
[06:41:51] <FromDiscord> <Elegantbeef> Yea my biggest nuisance with `func` is i write "echo" and get told to fuck off
[06:42:01] <FromDiscord> <Rika> In reply to @Rika "I’d rather a system": That’s why I say this
[06:42:27] <FromDiscord> <evoalg> but you both think `let` is better over `var`?
[06:42:39] <FromDiscord> <evoalg> I mean you both use let where you can?
[06:43:31] <FromDiscord> <evoalg> ...come on, fess up 😉
[06:43:34] <FromDiscord> <Elegantbeef> Indeed
[06:43:46] <FromDiscord> <Elegantbeef> I default to `const` then move to `let` then finally use `var`
[06:44:15] <FromDiscord> <sOkam!> In reply to @Elegantbeef "I default to `const`": this is what I understood to be preferred in the language
[06:44:31] <FromDiscord> <Rika> I default to let
[06:44:49] <FromDiscord> <Rika> I don’t go to const unless it is global
[06:44:58] <FromDiscord> <Rika> And that I explicitly want it to be const
[06:46:26] <FromDiscord> <evoalg> both `const`'s and `let`'s have to be known at compile time right? ... what's the difference then?
[06:46:31] <FromDiscord> <Rika> Nope
[06:46:36] <FromDiscord> <Rika> Let is runtime
[06:46:43] <FromDiscord> <evoalg> ohhhh ok!
[06:46:52] <FromDiscord> <sOkam!> im learning cpp, after practicing nim for a few weeks, and im already missing nim man. so many nice things 😦
[06:47:15] <FromDiscord> <Rika> What are you missing? From my usage of C++ I didn’t really miss much from Nim
[06:47:28] <FromDiscord> <sOkam!> uhh, cleaness?
[06:47:36] <FromDiscord> <Elegantbeef> Shun rilka!
[06:47:37] <FromDiscord> <huantian> In reply to @Elegantbeef "Yea my biggest nuisance": I usually write echo, scroll somewhere when running my program and have to scroll back to change it to debugEcho
[06:47:38] <FromDiscord> <Rika> Ah that
[06:47:41] <FromDiscord> <Rika> Eh
[06:48:10] <FromDiscord> <Rika> In reply to @huantian "I usually write echo,": “Debug echo” is awful I would say
[06:48:22] <FromDiscord> <sOkam!> In reply to @huantian "I usually write echo,": debugEcho works inside func?
[06:48:26] <FromDiscord> <Rika> Yes
[06:48:34] <FromDiscord> <Elegantbeef> just give me `-d:nimPureEcho` and call it a day 😛
[06:48:36] <FromDiscord> <sOkam!> whats diff about them?
[06:48:52] <FromDiscord> <huantian> it's echo but you lie to the compiler and say it's pure
[06:48:54] <FromDiscord> <Rika> One is “lying about being pure”
[06:48:57] <FromDiscord> <Elegantbeef> debug echo is an explicitly pure procedure
[06:49:00] <FromDiscord> <Elegantbeef> Meant only for debugging
[06:49:22] <FromDiscord> <sOkam!> how is echo not pure? 🤔
[06:49:34] <FromDiscord> <Rika> You write to a global called stdout
[06:49:37] <FromDiscord> <Elegantbeef> It writes to stdout
[06:49:40] <FromDiscord> <Elegantbeef> Changing global state
[06:49:40] <FromDiscord> <sOkam!> ohh
[06:50:11] <FromDiscord> <huantian> really doing anything should be an effect↵since you increase the temperature of the room of the user
[06:50:21] <FromDiscord> <Elegantbeef> lol
[06:50:24] <FromDiscord> <sOkam!> :Kappa:
[06:50:53] <FromDiscord> <Elegantbeef> I mean you can have a pure function that relies on the cpu temperature assuming it's a parameter
[06:50:55] <FromDiscord> <Rika> Why don’t you write APL if you need absolute cleanliness in code xd
[06:51:33] <FromDiscord> <sOkam!> In reply to @Rika "“Debug echo” is awful": why? 🤔
[06:51:40] <FromDiscord> <Rika> It is a joke
[06:52:03] <FromDiscord> <sOkam!> ah k, me dummy. nvm me :_)
[06:52:03] <FromDiscord> <Rika> Oh
[06:52:08] <FromDiscord> <Rika> You replied to the other message
[06:52:12] <FromDiscord> <Rika> I didn’t see
[06:52:13] <FromDiscord> <sOkam!> ye
[06:52:26] <FromDiscord> <Rika> I just think it looks like a jack
[06:52:33] <FromDiscord> <Rika> Hack
[06:52:37] <FromDiscord> <sOkam!> like the word?
[06:52:38] <FromDiscord> <Rika> I hit j instead
[06:53:09] <FromDiscord> <Elegantbeef> jackerman
[06:53:35] <FromDiscord> <Rika> Whatever, I just think it’s a hack
[06:54:00] <FromDiscord> <Rika> Why introduce a keyword to check for side effects when it could have just been a warning or so I don’t know
[06:54:57] <FromDiscord> <dizzyliam> what's the best way to include resources (e.g. text files) in a nimble package so that they can be read by the library?
[07:59:15] <NimEventer> New Nimble package! windy - Windowing library for Nim using OS native APIs., see https://github.com/treeform/windy
[08:23:35] *** Joins: nac5 (~nac@user/nac)
[08:25:50] *** Quits: nac (~nac@user/nac) (Ping timeout: 260 seconds)
[08:25:50] *** nac5 is now known as nac
[08:25:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[09:13:46] <FromDiscord> <creikey> In reply to @NimEventer "New Nimble package! windy": awesome
[09:58:54] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:01:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[10:21:57] <FromDiscord> <Zonifer> can I dm someone about using the asynchttpserver and how to post form data?
[10:23:15] <FromDiscord> <Elegantbeef> You can ask your questions and someone will probably help
[10:26:33] <FromDiscord> <Zonifer> sent a code paste, see https://play.nim-lang.org/#ix=3KNc
[10:28:14] <FromDiscord> <Yardanico> @Zonifer no need to delete messages as they're bridged to IRC anyway
[10:28:32] <FromDiscord> <Zonifer> @Yardanico  Ok cool good to know
[10:30:54] <FromDiscord> <Yardanico> basically you just find the file in the `body` of the request and parse it
[10:31:18] <FromDiscord> <Yardanico> asynchttpserver is quite limited, maybe you should consider prologue or jester as they offer more abstractions
[10:31:27] <FromDiscord> <Yardanico> for example in prologue - https://planety.github.io/prologue/uploadfile/
[10:32:03] <FromDiscord> <Yardanico> be aware that currently all of those http servers will read the whole file into memory, so it's not good to use it for big files
[10:32:14] <FromDiscord> <Yardanico> https://github.com/planety/prologue/blob/devel/tests/local/uploadFile/local_uploadFile_test.nim
[10:32:33] *** Joins: Vladar (~Vladar@46.162.2.53)
[10:32:35] <FromDiscord> <Yardanico> (this is a prologue test, so you need to change the imports to just be prologue, and modify to your liking)
[10:32:50] <FromDiscord> <Shiba> Where did nim get echo?  Bash?
[10:33:03] <FromDiscord> <Shiba> (edit) "echo?" => "echo?from"
[10:33:09] <FromDiscord> <Elegantbeef> Perhaps
[10:33:28] <FromDiscord> <Shiba> (edit) "echo?from" => "echo? from"
[10:33:53] <FromDiscord> <Zonifer> sent a code paste, see https://play.nim-lang.org/#ix=3KNj
[10:34:05] <FromDiscord> <Yardanico> req.body is the body
[10:34:17] <FromDiscord> <Yardanico> also why are you doing http manually?
[10:34:30] <FromDiscord> <Yardanico> i mean if you want, sure, but there's https://nim-lang.org/docs/httpclient.html in stdlib
[10:36:34] <FromDiscord> <Zonifer> Well my project started small but ended up getting bigger hahaha I wanted to add more features to this app and learn more under the hood
[10:57:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:29:27] *** Joins: PMunch (~PMunch@user/pmunch)
[11:34:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[12:21:13] <NimEventer> New post on r/nim by TheDarkMode: Current Goals for Nim?, see https://reddit.com/r/nim/comments/rux893/current_goals_for_nim/
[12:37:22] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[12:42:21] <FromDiscord> <smartlyweird> hi guys
[12:42:52] <FromDiscord> <evoalg> hiya
[12:43:50] <FromDiscord> <smartlyweird> how are you?
[12:44:28] <FromDiscord> <evoalg> as I normally am, how are you?
[12:46:56] <FromDiscord> <smartlyweird> ahh it was normal until i struck with a problem lol
[12:48:01] <FromDiscord> <evoalg> what problem?
[12:48:33] <FromDiscord> <smartlyweird> i've been trying to make a utility with nim to read evtx files and there's this API EvtNext
[12:48:52] <FromDiscord> <smartlyweird> there's its 3rd param PEVT_HANDLE
[12:49:11] <FromDiscord> <smartlyweird> according to documentation `A pointer to an array of handles that will be set to the handles to the events from the result set.`
[12:49:27] <FromDiscord> <smartlyweird> but idk how to implement it in nim
[12:50:31] <FromDiscord> <smartlyweird> sorry im new to nim. i've done this in cpp before but in nim its becoming a bit tricky for me
[12:52:03] <FromDiscord> <evoalg> wow ok, then hopefully one of the guru's will answer, as I'm also new to nim. There are some people who used to (or still do) program ing cpp etc, and from what I've seen here they think nim is easier (unless I've misunderstood)
[12:52:33] <FromDiscord> <Elegantbeef> What's the proc?
[12:56:07] <FromDiscord> <smartlyweird> sent a code paste, see https://play.nim-lang.org/#ix=3KNV
[12:56:37] <FromDiscord> <smartlyweird> i've ported almost all required enums from winevt.h
[12:56:56] <FromDiscord> <smartlyweird> its just that this PEVT_HANDLE im dealing with
[12:59:03] <FromDiscord> <smartlyweird> sent a code paste, see https://paste.rs/tXx
[12:59:11] <FromDiscord> <Elegantbeef> It's just a pointer to event handle so does it expect a nil terminated array?
[12:59:34] <FromDiscord> <Rika> Or a pointer to memory then a length integer?
[12:59:52] <FromDiscord> <Elegantbeef> There is no length integer as a parameter that i can tell
[13:00:30] <FromDiscord> <Rika> Do you have the definition in C(++)
[13:00:35] <FromDiscord> <smartlyweird> i've no clue tbh
[13:00:47] <FromDiscord> <smartlyweird> In reply to @Rika "Do you have the": yes msdn provided a example
[13:00:49] <FromDiscord> <Elegantbeef> I mean do you have the C++ code you're attempting to rewrite?
[13:00:51] <FromDiscord> <smartlyweird> wait lemme share
[13:01:34] <FromDiscord> <smartlyweird> In reply to @Elegantbeef "I mean do you": yes. i cannot share that since guy im working for as a freelancer doesn't allow me to do that
[13:01:41] <FromDiscord> <smartlyweird> but i can share msdn link
[13:01:54] <FromDiscord> <Elegantbeef> What do you pass in C++ land?
[13:02:31] <FromDiscord> <smartlyweird> https://gist.github.com/Mandar-Shinde/6468275f9cbaecf61807a8ca3ad78c10
[13:02:45] <FromDiscord> <smartlyweird> its not msdn but i too this reference to make the cpp build
[13:03:35] <FromDiscord> <smartlyweird> (edit) "too" => "used"
[13:05:02] <FromDiscord> <krisppurg> Found an issue related to my problem, guess I'll have to just wait until treeform merges the pr https://github.com/treeform/jsony/pull/40↵https://discord.com/channels/371759389889003530/371759389889003532/927325295642546246
[13:11:23] <FromDiscord> <smartlyweird> In reply to @Elegantbeef "What do you pass": trying to dm you
[13:11:39] <FromDiscord> <smartlyweird> i can share my cpp code in dm
[13:12:01] <FromDiscord> <Rika> He is not on discord
[13:12:05] <FromDiscord> <smartlyweird> oh
[13:12:06] <FromDiscord> <Rika> Technically he is
[13:12:10] <FromDiscord> <Rika> But not right now
[13:12:16] <FromDiscord> <smartlyweird> okay
[13:12:23] <FromDiscord> <smartlyweird> can i dm you?
[13:12:39] <FromDiscord> <Rika> DM is generally not accepted as well, it would be difficult for everyone to help if only one of us have info
[13:13:38] <FromDiscord> <smartlyweird> okay
[13:13:53] <FromDiscord> <smartlyweird> sent a code paste, see https://play.nim-lang.org/#ix=3KNY
[13:13:54] <FromDiscord> <Rika> I think it would be better if you could tell us the type definition (in C++?) of handle
[13:13:56] <FromDiscord> <smartlyweird> this was my cpp implementation
[13:14:20] <FromDiscord> <Elegantbeef> It's a pointer handle
[13:14:20] <FromDiscord> <smartlyweird> (edit) "cpp" => "c"
[13:14:23] <FromDiscord> <Elegantbeef> So seems you just use a nill
[13:14:24] <FromDiscord> <smartlyweird> yes
[13:14:33] <FromDiscord> <smartlyweird> i did that
[13:14:34] <FromDiscord> <smartlyweird> wait
[13:14:37] <FromDiscord> <Rika> The PEVT_HANDLE definition, do you know exactly what it is
[13:14:43] <FromDiscord> <Elegantbeef> Well i mean↵`var a: PevtHandle = nil`
[13:14:58] <FromDiscord> <smartlyweird> ohh
[13:15:29] <FromDiscord> <smartlyweird> In reply to @Rika "The PEVT_HANDLE definition, do": yes, according to msdn `A pointer to an array of handles that will be set to the handles to the events from the result set.`
[13:15:39] <FromDiscord> <smartlyweird> In reply to @Elegantbeef "Well i mean `var": lemme try that
[13:16:00] <FromDiscord> <Rika> As you described it seems like it is a ptr UncheckedArray[whatever should be in here, the array value type]
[13:16:00] <FromDiscord> <Rika> Nice timing for the train I’m on to go into a tunnel
[13:16:23] <FromDiscord> <Rika> Okay so I’m having trouble understanding where you’re having trouble lol
[13:21:50] <NimEventer> New thread by Severak: Good real life apps, see https://forum.nim-lang.org/t/8764
[13:34:59] <FromDiscord> <smartlyweird> In reply to @Rika "Okay so I’m having": i just want to know how to make array of handles
[13:35:06] <FromDiscord> <smartlyweird> because im following msdn
[13:36:04] <FromDiscord> <smartlyweird> In reply to @Elegantbeef "Well i mean `var": i dont suppose it could be implemented since i cannot see any nim support for winevt.h yet
[13:36:12] <FromDiscord> <smartlyweird> but ill check that too
[13:36:14] <FromDiscord> <Rika> https://nim-lang.org/docs/system.html#create%2Ctypedesc
[13:36:27] <FromDiscord> <Rika> Close to “calloc”
[13:37:03] <FromDiscord> <Rika> Then you have to convert to “ptr UncheckedArray[T]”
[13:37:08] <FromDiscord> <Elegantbeef> I mean i dont see how it knows where the last element is so i really dont know how
[13:37:10] <FromDiscord> <Rika> Where T is the type of the value
[13:37:22] <FromDiscord> <Rika> In reply to @Elegantbeef "I mean i dont": I don’t either really
[13:37:59] <FromDiscord> <Rika> I guess it might be null terminating, so your size should be 1 more than the amount of items you want to place into the array
[13:39:54] <FromDiscord> <Elegantbeef> You'd think the docs would mention that
[13:40:06] <FromDiscord> <Elegantbeef> But no we're supposed to intuit the way the array is
[13:40:22] <FromDiscord> <Rika> Lol
[13:46:11] <FromDiscord> <smartlyweird> Ikr msdn sometimes misguide lol
[13:49:53] <NimEventer> New thread by Axben: Status - how would I program a GUI-based Nim-application on Windows?, see https://forum.nim-lang.org/t/8765
[14:03:55] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:05:17] *** Joins: flynn (~mcbloch@user/flynn)
[14:16:32] <FromDiscord> <kaddkaka> In reply to @Rika "Much rarer than the": There is `debugEcho` if that's the kind of side-effect you want in a `func`
[14:17:02] <FromDiscord> <kaddkaka> In reply to @Elegantbeef "Yea my biggest nuisance": I guess you know about it, ^
[14:18:37] <FromDiscord> <kaddkaka> Ok I shouldn't answer 8h old posts -.-
[14:19:25] <FromDiscord> <smartlyweird> In reply to @Rika "https://nim-lang.org/docs/system.html#create%2Ctype": so this one should behave as typedef right?
[14:22:16] <FromDiscord> <smartlyweird> In reply to @Rika "https://nim-lang.org/docs/system.html#create%2Ctype": any example you have? would be easier for me to understand the implementation
[14:30:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[14:30:46] <FromDiscord> <Rika> Sorry, not now
[14:48:22] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[15:06:05] <FromDiscord> <Clonkk> Is there a way to construct a `seq[string]` at compile (through `{.compileTime.}` proc) and use the result at run-time without using macros ?
[15:07:02] <PMunch> Should be
[15:08:02] <FromDiscord> <Hamid_Bluri> yes
[15:08:14] <FromDiscord> <Hamid_Bluri> hey pmuch
[15:08:46] <PMunch> @Clonkk: https://play.nim-lang.org/#ix=3KOy
[15:08:49] <PMunch> @Hamid_Bluri, hello
[15:09:28] <Amun-Ra> Clonkk: https://play.nim-lang.org/#ix=3KOz
[15:09:36] <Amun-Ra> ah, you beat me up to it
[15:11:27] <FromDiscord> <Clonkk> Will take a look at it when my internet connection decides to stop suckling thanks
[15:18:28] <FromDiscord> <Yardanico> if nim playground is a bit too heavy for you, you can just go to the ix.io direct link
[15:18:46] <FromDiscord> <Yardanico> since playground uses it for hosting code - http://ix.io/3KOy  and http://ix.io/3KOz
[15:19:19] <FromDiscord> <Yardanico> there's also some syntax highlighting support on ix.io - http://ix.io/3KOz/nim
[15:20:05] <FromDiscord> <Clonkk> Ah yeah okay I should have specified.What I'm trying to do is static Read a list of file that the user provide through "static string" at compile Time and use the result at run time.↵(<@709044657232936960_=50=4dunch=5b=49=52=43=5d>)
[15:22:51] <FromDiscord> <Yardanico> yes that's easily possible
[15:23:17] <FromDiscord> <Yardanico> if you just want lines in a seq, you can quite literally just do `const myseq = staticRead("file.txt").splitLines()` assuming you imported std/sequtils
[15:23:37] <FromDiscord> <Yardanico> how does the user provide the file name to you code though?
[15:25:35] <FromDiscord> <evoalg> Yards you know that collection scope issue you fixed, would it already be in dev release or something?
[15:25:50] <FromDiscord> <evoalg> (I just don't know the process)
[15:26:46] <FromDiscord> <Yardanico> it's not merged as it might be intended behaviour
[15:26:49] <FromDiscord> <Yardanico> there was some discussion in the PR
[15:27:00] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/pull/19288
[15:27:42] <FromDiscord> <evoalg> oh ok thx you!
[15:53:54] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KOT
[15:59:27] <FromDiscord> <Yardanico> newSeq can also create a new seq as you have in your first example
[16:06:18] <FromDiscord> <kaddkaka> right, so `newseq` has (at least) 2 variants, and 1 of them is analogue to the `newSeqWith`. Thanks
[16:12:23] <NimEventer> New thread by Clavismax:  nimsuggest Issue processing ``runnableExamples``, see https://forum.nim-lang.org/t/8766
[16:31:39] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KP4
[16:33:04] <FromDiscord> <kaddkaka> I guess https://nim-lang.org/docs/sequtils.html#countIt.t%2Cuntyped%2Cuntyped would be nice
[16:34:13] <FromDiscord> <Solitude> ||for loops are more readable than fold||
[16:34:15] <FromDiscord> <kaddkaka> (I'm starting to like the ability to write an expression directly as an argument to a template!) 🙂
[16:35:00] <FromDiscord> <kaddkaka> @Solitude In this case `let total = countIt(grid, it>1)` is very readable if I could flatten the `grid` in a simple way.
[16:35:55] <FromDiscord> <kaddkaka> In reply to @Solitude "||for loops are more": I'm not sure haskeller would agree 😛
[16:35:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:36:07] <FromDiscord> <Solitude> im not sure i would listen to a haskeller
[16:36:20] <FromDiscord> <Rika> im not sure if you should argue about somehting thats highly subjective
[16:36:43] <FromDiscord> <Solitude> cope
[16:36:50] <FromDiscord> <Rika> good to know
[16:37:34] <FromDiscord> <kaddkaka> ?_?
[16:37:39] <FromDiscord> <Rika> nothing
[16:38:07] <FromDiscord> <Rika> sorry, i mean nothing of importance
[16:39:26] <FromDiscord> <kaddkaka> Anyway, my current question is how to transform a "2d sequence" to supply it to [countIt](https://nim-lang.org/docs/sequtils.html#countIt.t%2Cuntyped%2Cuntyped). Should I be looking for iterators?
[16:40:58] <FromDiscord> <Solitude> that means you would be back to for-loops
[16:41:54] <FromDiscord> <Solitude> either write your countIt for seqs of seqs, or write the procedure that does what you need here. not everything should be solved by means of stdlib or fancy oneliner.
[16:42:00] <PMunch> @kaddkaka, you can pass a 2D sequence to countIt just fine
[16:42:47] <FromDiscord> <Solitude> that would do completely different thing
[16:43:37] <FromDiscord> <kaddkaka> In reply to @Solitude "either write your countIt": Of course not, I'm not looking for fancy, I'm looking for readable.
[16:43:51] <PMunch> I guess something like foldl(countIt(my2Dseq, it > 100)) should do what you need
[16:44:39] <PMunch> Well, not quite, but you get the point
[16:44:57] <FromDiscord> <kaddkaka> yeah, not sure I want to mix `foldl` and `countIt` though
[16:45:01] <FromDiscord> <kaddkaka> thanks
[16:45:06] <PMunch> Why not?
[16:45:23] <FromDiscord> <kaddkaka> it's 2 concepts to think about
[16:46:30] <PMunch> Well they're both functional in nature
[16:48:42] <PMunch> First the countIt counts every element that fulfils the predicate by x or y, and then add them all together
[16:49:05] <FromDiscord> <Rika> doesnt foldl take two argd
[16:49:07] <FromDiscord> <Rika> argsd
[16:49:08] <FromDiscord> <Rika> (edit) "argsd" => "args"
[16:49:20] <PMunch> Yeah I messed it up a bit
[16:49:49] <PMunch> I guess it should be mapIt(my2Dseq, it.countIt(it > 42)).foldl(a + b) or something like that
[16:51:03] <FromDiscord> <kaddkaka> `grid.foldl(a + b.countIt(it>1), 0)` works fine too
[16:53:15] <PMunch> Oh yeah, that should also work fine
[16:55:06] <FromDiscord> <kaddkaka> `grid.countIt(it>1)` would of course be even more to the point (count all elements in this container that are `>1`), like @Solitude said. I have to read about iterators.
[16:56:15] <FromDiscord> <kaddkaka> although, that form would be ambiguous I guess
[16:57:14] <FromDiscord> <kaddkaka> I think `let s = grid.flatten.countIt(it>1)` shows intent in a better way.
[16:57:17] <PMunch> I meant you could do `template countIt[T](s: seq[seq[T], x: untyped): int = foldl(s, let it = b; a + x, 0)` or something like that
[16:57:25] <FromDiscord> <kaddkaka> (edit) "`let s = grid.flatten.countIt(it>1)`" => "`grid.flatten.countIt(it>1)`"
[16:57:40] <PMunch> Flatten is probably more expensive than foldl though
[16:57:54] <PMunch> Because you then need to allocate a 1D seq that contains your 2D seq
[16:58:16] <FromDiscord> <kaddkaka> Really? can't flatten be implemented as an iterator that doesn't allocate anything?
[16:59:09] <FromDiscord> <Solitude> it can, but then you need a for loop or another countIt that works on iterators
[16:59:28] <FromDiscord> <kaddkaka> In reply to @PMunch "I meant you could": The problem is that this hides the original meaning of `countIt` in this case.
[17:00:40] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KPh
[17:01:11] <FromDiscord> <Solitude> s: iterable[T] or something
[17:01:49] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KPi
[17:02:18] <FromDiscord> <kaddkaka> (edit) "https://play.nim-lang.org/#ix=3KPi" => "https://play.nim-lang.org/#ix=3KPj"
[17:05:01] <FromDiscord> <kaddkaka> sent a code paste, see https://play.nim-lang.org/#ix=3KPk
[17:05:07] <FromDiscord> <kaddkaka> 😄
[17:06:07] <FromDiscord> <Solitude> zamn
[17:07:18] <FromDiscord> <kaddkaka> So `countIt` just works 👍
[17:23:18] <FromDiscord> <valerga> gotta like the It functions
[17:25:48] <FromDiscord> <kaddkaka> Are there other languages that allows the expression syntax like Nim does for? (`foreach` in systemverilog is similar, with the exception that it's more of a super ugly hack, https://www.chipverify.com/systemverilog/systemverilog-foreach-loop)
[17:26:35] <FromDiscord> <Rika> Which syntax are we talking about
[17:26:54] <FromDiscord> <Rika> Parentheses omission?
[17:27:30] <FromDiscord> <kaddkaka> The `it>1` part in `s.countIt(it>1)`
[17:28:09] <FromDiscord> <Rika> Lisp
[17:28:17] <FromDiscord> <Rika> Probably rust
[17:28:24] <FromDiscord> <Rika> Anything with macros (probably)
[17:28:28] <FromDiscord> <Rika> Yes that includes C
[17:29:46] <FromDiscord> <kaddkaka> Is it called anything specific? Or is it just too ordinary to merit it's own name
[17:32:04] <FromDiscord> <kaddkaka> (seen as just a (trivial) cosequence of macros)
[17:33:20] *** Joins: sagax (~sagax_nb@user/sagax)
[17:35:21] *** Joins: rockcavera (~rc@192.12.112.239)
[17:35:21] *** Quits: rockcavera (~rc@192.12.112.239) (Changing host)
[17:35:21] *** Joins: rockcavera (~rc@user/rockcavera)
[17:37:02] <FromDiscord> <Rika> untyped macros?
[17:37:03] <FromDiscord> <Rika> idk
[17:37:09] <FromDiscord> <Rika> theres prolly no single name for it
[17:40:09] *** Joins: arkurious (~arkurious@user/arkurious)
[17:40:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[17:50:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:00:06] *** Joins: lumo_e (~enrico@151.29.48.90)
[18:29:11] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[18:39:37] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[18:41:33] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[18:56:08] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:56:16] *** Quits: Vladar (~Vladar@46.162.2.53) (Client Quit)
[19:07:38] <FromDiscord> <Clonkk> is there a compile time equivalenty of `walkPattern` or do I have to call bash through `staticExec` ?
[19:08:15] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3KRF
[19:09:18] <FromDiscord> <Rika> w-what
[19:09:19] <FromDiscord> <Rika> no
[19:09:25] <FromDiscord> <Rika> you want goto?
[19:09:49] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[19:09:49] <FromDiscord> <Rika> split the proc into two and run only the first half
[19:09:59] <FromDiscord> <el__maco> in the intercal language you could specify a probability for each instruction to execute. You could sometimes print "b" depending on luck
[19:10:06] <FromDiscord> <Rika> thats terrifying
[19:10:14] <FromDiscord> <hmmm> lol
[19:11:52] <FromDiscord> <el__maco> they also had a way better mechanism since gotos are bad, they had "come from" instead. You could split a block by specifying a come from instruction somewhere else
[19:12:43] <FromDiscord> <Rika> thats incrementally less terrifying
[19:12:58] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3KRL
[19:13:23] <FromDiscord> <hmmm> like some sort of switch lol
[19:13:44] <FromDiscord> <Solitude> how do you affect the switch
[19:14:01] <FromDiscord> <hmmm> I have no idea lol
[19:14:05] <FromDiscord> <Solitude> ?????
[19:14:08] <FromDiscord> <Solitude> what are you doing?
[19:14:12] <FromDiscord> <el__maco> its not clear to me in which situation the second statement should run and not run
[19:15:08] <FromDiscord> <hmmm> nah what I wanted to do is already solved now changing the proc and using an if, but still I had the curiousity it could be done without changing the proc if I set the machinery beforehand
[19:15:22] <FromDiscord> <Rika> no
[19:15:28] <FromDiscord> <el__maco> maybe a "when" statement?
[19:15:41] <FromDiscord> <Rika> he said "without changing the proc"
[19:15:49] <FromDiscord> <Rika> so no code can be added to the proc
[19:15:55] <FromDiscord> <Rika> is what i assume
[19:16:00] <FromDiscord> <Rika> so goto
[19:16:11] <FromDiscord> <Rika> (?)
[19:16:31] <FromDiscord> <Rika> i cant see too well how a goto would help
[19:16:42] <FromDiscord> <Rika> el maco is right, the come from thing would work best
[19:16:45] <FromDiscord> <hmmm> yea, I wanted some way that detected that the statement was in some way special and used {magic} machinery to decide to run or not lol
[19:16:46] <FromDiscord> <Rika> 👀
[19:16:51] <FromDiscord> <el__maco> but adding a goto also would change the proc. I see Intercal has the superiority here, because "come from" would solve this
[19:16:57] <FromDiscord> <Rika> In reply to @hmmm "yea, I wanted some": that is legitimately scary
[19:17:18] <FromDiscord> <Rika> In reply to @el__maco "but adding a goto": its not a good problem-solution pair
[19:17:30] <FromDiscord> <Rika> need to reframe the issue in a better problem
[19:18:01] <FromDiscord> <el__maco> I feel like its perfect problem-solution pair, but maybe I don't understand the motivation deeply enough
[19:18:32] <FromDiscord> <Rika> ah
[19:18:43] <FromDiscord> <Rika> you could probably abuse term rewriting macros in a way
[19:18:59] <FromDiscord> <hmmm> well the motivation was kind of A E S T H E T I C since I felt the proc was perfect and special casing the if was ugly lol
[19:19:01] <FromDiscord> <Rika> good luck figuring that out
[19:19:28] <FromDiscord> <Rika> In reply to @hmmm "well the motivation was": if you think its ugly, find another way that isnt the if and isnt the "do some fuckery without changing the code"
[19:19:34] <FromDiscord> <hmmm> especially introducing a parameter just to check the if felt very ugly
[19:19:35] <FromDiscord> <Rika> like maybe refactor the function
[19:19:39] <FromDiscord> <Rika> it might be doing too much
[19:20:02] <FromDiscord> <Rika> if you have too many parameters then you might want to reconsider what they do
[19:20:13] <FromDiscord> <Rika> and again your function might be doing too much if so
[19:21:17] <FromDiscord> <Solitude> write another function
[19:21:17] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 240 seconds)
[19:21:29] <FromDiscord> <Rika> sent a long message, see http://ix.io/3KRO
[19:21:43] <FromDiscord> <hmmm> like the if checking was done just to check an edge case and I wanted my pretty pure proc to stay pretty
[19:21:44] <FromDiscord> <Clonkk> So basically you want to use a very complex solution to a very simple problem because "it looks good" ?↵(@hmmm)
[19:21:56] <FromDiscord> <Rika> i generally think around six is too many parameters
[19:22:12] <FromDiscord> <hmmm> In reply to @Clonkk "So basically you want": exactly! the question is dumb lol, but I thought maybe nim had machinery I didn't know of
[19:22:32] <FromDiscord> <el__maco> you can join the anti if movement if you haven't already <https://francescocirillo.com/pages/anti-if-campaign>
[19:22:42] <FromDiscord> <Solitude> In reply to @hmmm "exactly! the question is": write a macro that gets procedure implementation and modifies its body
[19:23:51] <FromDiscord> <Clonkk> It's called "if statement" lol↵(@hmmm)
[19:25:28] <FromDiscord> <hmmm> In reply to @Clonkk "It's called "if statement"": haha ok ok, I got the message lol, it was just curiosity. Now I'll just lurk in the shadows waiting for ElegantBeef to produce a 20 lines monstrosity to elegantly solve my problem with macros or other weird constructs just for kicks 😃
[19:25:32] <FromDiscord> <Clonkk> Design your own iinterpreted language so you can change code executed at run-time and re-implement your application with the interpreted language.↵(@Solitude)
[19:25:46] <FromDiscord> <0000> In reply to @hmmm "like the if checking": use haskell
[19:26:59] <FromDiscord> <0000> sent a code paste, see https://play.nim-lang.org/#ix=3KRS
[19:27:23] <FromDiscord> <0000> is there some magic macro on nimble that enables pattern matching over procedure parameters?
[19:27:25] <FromDiscord> <0000> that could be fun
[19:27:47] <FromDiscord> <Solitude> there was one for object variants
[19:28:01] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[19:28:11] <FromDiscord> <0000> neat
[19:31:49] <FromDiscord> <Rika> In reply to @hmmm "haha ok ok, I": it wont be elegant i can tell
[19:32:32] <FromDiscord> <Rika> In reply to @Clonkk "Design your own iinterpreted": i feel like such a thing exists already
[19:38:12] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[19:46:00] <FromDiscord> <zetashift> @treeform\: heyho, treeform, I'm working on my Pixie backend for ginger again, and I'm getting an error, using `context.strokeCircle` \: https://nimdocs.com/treeform/pixie/pixie/context.html#strokeCircle%2CContext%2CVec2%2Cfloat32 I also can't find it in the source anymore? Am I doing something wrong?
[19:47:05] <FromDiscord> <zetashift> it seems the only proc it can find is the one where a `Circle` is given but not a `center: Vec2, radius: Float`
[19:49:06] <FromDiscord> <Forest> Nim is mentioned quite often in the Python Discord 👀
[19:51:32] <FromDiscord> <Recruit_main707> nice
[19:52:10] <FromDiscord> <hmmm> the question is what took them so long 😃
[20:13:34] <PMunch> Hmm, maybe I should join the Python Discord and set up keyword notifications on the word Nim
[20:13:45] <PMunch> Would be interesting to see what they say about us :)
[20:40:00] *** Joins: lumo_e (~enrico@151.29.78.238)
[20:47:12] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:47:25] <FromDiscord> <Rika> keyword notifications do not exist on discord unless you use client modifications or a 3rd party client
[20:47:54] <FromDiscord> <kevin> Is there a recommended way to list out processes from Nim? C# has `Process.GetProcesses()` but i couldn't find something like that in Nim.
[20:49:08] <FromDiscord> <TryAngle> In reply to @Rika "keyword notifications do not": I mean self bots are a thing and using them like this surely won't be against the TOS no?
[20:49:14] <FromDiscord> <kevin> closest I could find is `GetCurrentProcessId()` : https://nim-lang.org/docs/os.html#getCurrentProcessId which only shows the current process, not all
[20:49:24] <FromDiscord> <Rika> In reply to @TryAngle "I mean self bots": guess
[20:51:44] <FromDiscord> <treeform> In reply to @zetashift "<@107140179025735680>\: heyho, treeform, I'm": We changed the API a bit. Just create a circle and pass that in?
[20:52:44] <FromDiscord> <zetashift> Ah I see, I will, thank you! \:D
[20:53:26] <FromDiscord> <IsaacPaul> In reply to @kevin "closest I could find": Searching `[Process]` in the nim repo doesn't reveal much. I'm assuming you might have to implement that functionality yourself.
[20:54:01] <FromDiscord> <kevin> darn i was hoping that wasn;t gonna be the answer 😦
[20:56:24] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:57:08] *** Quits: oprypin (~irc@pryp.in) (Ping timeout: 252 seconds)
[20:58:46] *** Joins: oprypin (~irc@pryp.in)
[21:05:58] <FromDiscord> <eyecon> In reply to @kevin "Is there a recommended": Should be this: https://github.com/khchen/winim/search?q=EnumProcessModulesEx
[21:06:58] <FromDiscord> <eyecon> https://docs.microsoft.com/en-us/windows/win32/api/psapi/nf-psapi-enumprocessmodulesex
[21:08:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:10:01] <FromDiscord> <treeform> In reply to @zetashift "Ah I see, I": strokeCirlce is not part of the Canvas context spec so we are free to do what we want. We initially had the strokeCirlce(vec2, float) and strokeCirlce(cirlce) but decided it was redundant. Its so easy to create a circle obj)
[21:18:17] *** Quits: lumo_e (~enrico@151.29.78.238) (Ping timeout: 240 seconds)
[21:18:42] *** Joins: lumo_e (~enrico@151.29.77.175)
[21:28:33] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[21:34:02] *** Quits: kayabaNerve_ (~kayabaNer@user/kayabanerve) (Ping timeout: 260 seconds)
[21:46:28] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:51:21] *** Joins: rockcavera (~rc@192.12.112.239)
[21:51:21] *** Quits: rockcavera (~rc@192.12.112.239) (Changing host)
[21:51:21] *** Joins: rockcavera (~rc@user/rockcavera)
[21:54:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[21:56:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:01:06] <PMunch> @kevin, this is really not something that's easy to do from a program. C# is only able to do it because it does a lot of stuff behind the scenes, including keeping track of the processes it starts
[22:03:57] *** Quits: lumo_e (~enrico@151.29.77.175) (Ping timeout: 240 seconds)
[22:09:08] <FromDiscord> <kevin> Every OS has it's own version of ps/tasklist so it should be doable. From a little reading it looks like every OS enumerates currently running processes differently.
[22:09:35] <PMunch> Oh it's definitely possible, but it's an OS dependent thing
[22:09:42] <PMunch> Probably easier to just keep track yourself
[22:09:47] <FromDiscord> <kevin> It's definitely over my head to write that kind of code, but would be cool in the future to have a library function in `os` to get all processes
[22:10:11] <PMunch> Not sure what you'd use it for
[22:10:26] <FromDiscord> <kevin> listing processes of course! 😄
[22:10:44] <FromDiscord> <kevin> same reason windows has tasklist and linux has ps
[22:11:22] <FromDiscord> <IsaacPaul> https://github.com/warmchang/procps/blob/master/proc/readproc.c↵seems like a pain, but this code fetches everything it seems.
[22:11:39] <FromDiscord> <IsaacPaul> It's probably a good reference
[22:17:06] <FromDiscord> <zetashift> I get it, I was just confused because I still saw it in the docs haha, I've changed it to making a circle first!↵(@treeform)
[22:21:17] <FromDiscord> <ache of head> In reply to @el__maco "you can join the": wait, is this fr or a joke?
[22:21:19] <FromDiscord> <ache of head> i can't tell
[22:26:06] <FromDiscord> <IsaacPaul> Seems like a joke since they only provide a bad example instead of both a good and bad. Though the example code is _bad_. Horizontal complexity (early exit) costs less mentally than vertical (depth; nested).
[22:28:06] <FromDiscord> <IsaacPaul> Most of the time you're always just rearranging things rather than removing ifs unless you have duplicate code/behavior.
[22:30:39] *** Joins: lumo_e (~enrico@151.29.77.175)
[22:36:34] <FromDiscord> <creikey> In reply to @IsaacPaul "Seems like a joke": ever indentation I see while reading a program raises my blood pressure a little bi
[22:36:37] <FromDiscord> <creikey> (edit) "ever" => "every"
[22:36:40] <FromDiscord> <creikey> (edit) "bi" => "bit"
[22:38:24] <FromDiscord> <zetashift> @treeform\: context.font is a string now, what is the way to change the size of fonts being drawn onto the context now?
[22:40:01] <FromDiscord> <treeform> In reply to @zetashift "<@107140179025735680>\: context.font is a": yes `ctx.fontSize`
[22:40:32] <FromDiscord> <treeform> https://github.com/treeform/pixie/blob/master/src/pixie/contexts.nim#L19
[22:40:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[22:41:43] <FromDiscord> <zetashift> ah I missed that, thank you!
[22:42:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:51:32] *** Joins: Guest8731 (~Guest87@c-73-212-207-38.hsd1.md.comcast.net)
[23:08:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:11:23] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cd30:5759:3f90:149b)
[23:20:50] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3KTy
[23:24:13] <FromDiscord> <Solitude> `type t = typeof(0)`
[23:24:20] <FromDiscord> <geekrelief> Also, I'm trying to pass a type to a macro and call `getTypeImpl` on it, but it doesn't return anything like `getImpl` which is what I want after it's been transformed.
[23:24:40] <FromDiscord> <geekrelief> In reply to @Solitude "`type t = typeof(0)`": thanx! I was trying `var t:type ...`
[23:24:44] <FromDiscord> <geekrelief> (edit) "thanx!" => "thanks!"
[23:26:08] <FromDiscord> <geekrelief> In reply to @Solitude "`type t = typeof(0)`": if I `echo t.repr` that doens't compile
[23:26:14] <FromDiscord> <geekrelief> (edit) "doens't" => "doesn't"
[23:27:09] <FromDiscord> <Solitude> !eval type t = typeof 0; echo t
[23:27:12] <NimBot> t
[23:27:23] <FromDiscord> <geekrelief> yeah it gives t
[23:27:50] <FromDiscord> <geekrelief> it should be int right?
[23:28:02] <FromDiscord> <Solitude> no?
[23:28:27] <FromDiscord> <geekrelief> ok that's not what I want.. I don't want to define a new type t of int
[23:28:51] <FromDiscord> <geekrelief> I want to store the typedesc
[23:29:18] <FromDiscord> <Solitude> thats how you "store" typedesc
[23:29:46] <FromDiscord> <Solitude> in macro you can extract whatever info you need
[23:30:27] <FromDiscord> <geekrelief> yeah that's ultimately what I'm working with.  Inside a macro I'm trying to call `getTypeImpl`, but it's not returning the transformed type.
[23:34:47] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3KTH
[23:34:49] <FromDiscord> <Solitude> kinda cringe
[23:34:54] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3KTI
[23:35:58] <FromDiscord> <geekrelief> Is there a way for me to pass in the type `Vec4f` and get transformed into `object...`?
[23:36:45] <FromDiscord> <Solitude> yes
[23:36:49] <FromDiscord> <Solitude> snippet i posted
[23:36:57] <FromDiscord> <Solitude> gets you resolved type
[23:37:06] <FromDiscord> <Solitude> you call getImpl on that and do whatever
[23:37:40] <FromDiscord> <geekrelief> In your sample `t` has to be `typedesc` and not typed?
[23:37:56] <FromDiscord> <Solitude> it doesnt matter
[23:39:37] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:39:39] <FromDiscord> <geekrelief> In reply to @Solitude "it doesnt matter": hmm doesn't work for me
[23:40:10] <FromDiscord> <geekrelief> https://play.nim-lang.org/#ix=3KTL
[23:40:37] <FromDiscord> <Solitude> man, i just posted the code
[23:40:56] <FromDiscord> <Solitude> https://play.nim-lang.org/#ix=3KTM
[23:41:00] <FromDiscord> <geekrelief> yeah I just put it in playground, it's not giving me what I need
[23:42:36] <FromDiscord> <geekrelief> In reply to @Solitude "https://play.nim-lang.org/#ix=3KTM": Thanks for the clarification.  Sorry to bother.
[23:42:56] <FromDiscord> <michaelb> nim does some auto-magic where if e.g. you have an array of `cchar` and you print it, then a member with value equiv to `27.cchar` is printed as `'\e'` (and similar for tab char etc.)↵↵is there a way to do that manually, e.g. a proc I can call with a `string` and it would replace control characters with the `\` equiv?
[23:42:58] <FromDiscord> <yallxe> hi, is there something like args or kwargs from python in nim?
[23:43:41] <FromDiscord> <Solitude> In reply to @yallxe "hi, is there something": varargs. no substitute for kwargs.
[23:44:28] <FromDiscord> <yallxe> In reply to @Solitude "varargs. no substitute for": thanks
[23:44:56] <FromDiscord> <Solitude> In reply to @brainproxy "nim does some auto-magic": https://nim-lang.org/docs/strutils.html#escape%2Cstring%2Cstring%2Cstring but it does more than that, so you might need to steal part of it
