[00:01:44] <vague> mst, like I said, maybe I missed something in the documentation, not like I read it all in that short while. I would've hoped it was clearly documented, like a System class that lets you access printing and exiting functions, if it's implicitly supported, fine, I'll have to read the API documentation more closely
[00:04:17] <mst> vague: I read the documentation for freebsd and postgresql. everything else, I tend to read the code and test suites. so "no idea"
[00:04:29] *** Quits: ritsch_master (~user@77.119.174.53.wireless.dyn.drei.com) (Remote host closed the connection)
[00:09:50] <vague> Only reason I'm looking for a replacement for phantomjs is that I need to monitor a website that's generated via DOM manipulation in javascript, which results in horrible HTML, like tens of nested tables
[00:10:42] <vague> and I forgot to wwrite the reason :P phantomjs isn't developed anymore is the reason, would be great to have something that's still under development
[00:14:41] <unixcat647> I think it would be amusing if Perl had gtfo as an alias for the die function. e.g., (condition is true) or gtfo "$?"
[00:16:21] <ehuelsmann[m]> vague: we only recently switched away from PhantomJS to headless Firefox and Chrome
[00:16:43] <ehuelsmann[m]> vague: we do that using the selenium Hub functionality and Docker container.
[00:17:01] <ehuelsmann[m]> oh. I see it's called selenium grid.
[00:32:11] * GumbyPAN CPAN Upload: Game-FaceGenerator-1.01_01 by SCHROEDER https://metacpan.org/release/SCHROEDER/Game-FaceGenerator-1.01_01
[00:32:49] <vague> Selenium grid might be overkill for what I'm trying to do but thanks for the idea, I'll have to spend some time thinking about possible options
[00:34:23] <greyrat> Does anyone know what kind of encoding is this, and how I should get to UTF-8?
[00:35:16] <greyrat> http://ix.io/3A53
[00:36:55] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[00:38:58] <aquanight> are you referring to the \303 stuff?
[00:39:31] <aquanight> perlbot: sweval "\303\203\202\302\200\302\203\274"
[00:39:33] <perlbot> aquanight: ÃÂÂ¼
[00:39:44] <aquanight> perlbot: sweval unpack "C*", "\303\203\202\302\200\302\203\274"
[00:39:45] <perlbot> aquanight: 195
[00:39:59] <aquanight> perlbot: sweval join " ", map { sprintf "%02X", $_ } unpack "C*", "\303\203\202\302\200\302\203\274"
[00:40:01] <perlbot> aquanight: C3 83 82 C2 80 C2 83 BC
[00:40:11] <aquanight> ok that looks like it might be UTF8
[00:41:16] <aquanight> I'm not so certain of the last character
[00:43:23] *** Quits: ZZzz (~ZZzz@213.57.70.82) (Quit: ZZzz)
[00:44:45] <aquanight> I don't know what's going on with those \### sequences
[00:45:28] <aquanight> greyrat: but if those are supposed to be octal-encoded bytes you can translate them with: s/\\(\d{1,3}/chr oct $_/g;
[00:45:32] <aquanight> er
[00:45:34] <aquanight> greyrat: but if those are supposed to be octal-encoded bytes you can translate them with: s/\\(\d{1,3}/chr oct $1/g;
[00:45:38] <aquanight> dammit
[00:45:42] <aquanight> /ge*
[00:46:10] <aquanight> and if it really is utf8, send it to utf8::decode
[00:50:49] *** Quits: proller (~p@2002:50f0:d845:10:41a5:ca2e:e623:f4b4) (Ping timeout: 252 seconds)
[00:50:50] *** Linux77__ is now known as Linux77
[00:52:13] <greyrat> aquanight: I have uploaded the file: https://files.lilf.ir/tmp/tmp.uBJpDbk9eL
[00:52:34] <greyrat> It's not UTF-8, obviously.
[00:52:50] <greyrat> But I am not familiar with debugging this stuff.
[00:53:39] <tirnanog> alas, it's invalid utf-8 at the point that 0x82 is encountered, though it definitely contains valid UTF-8 sequences. so, it's probably a mixed mess. also, utf8::decode shouldn't really be used to decode utf-8 ("utf8" isn't quite the same thing).
[00:55:26] <tirnanog> if you don't mind filling in for the sequences that don't constitue valid utf-8, you could certainly have perl deode it in a lax fashion, though it's obviously not ideal for the input to be invalid.
[00:56:26] <greyrat> tirnanog: Can you give me a one-liner that does this lax encoding and outputs valid UTF-8?
[00:56:45] <greyrat> I tried `recode ascii..` in the meantime, and it seems to work.
[00:56:58] <tirnanog> greyrat: yeah, one moment. being distracted by something.
[00:57:07] <greyrat> thanks
[00:58:56] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 265 seconds)
[01:02:04] <tirnanog> so, if you can, consider using decode_utf8_lax from Encode::Simple, because it's nice and easy to use. otherwise ...
[01:02:31] <tirnanog> sweval: use Encode qw(decode FB_DEFAULT LEAVE_SRC); my $bytes = "\303\203\202\302\200\302\203\274"; my $str = decode("UTF-8", $bytes); [ sprintf "%vX", $str ]
[01:02:33] <perlbot> tirnanog: ["C3.FFFD.80.83.FFFD"]
[01:03:26] <tirnanog> what's happening there is that it decodes that which it can, and substitutes what it cannot with U+FFDD (the so-called "REPLACEMENT CHARACTER").
[01:03:29] <zln> how do I build a list of unicode chars with a range of code poinst? 2800 .. 28FF
[01:04:39] *** Joins: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30)
[01:05:50] <tirnanog> greyrat: if you'd rather substitute the invalid sequences with something else, you could simply replace the replacement character after decoding. alternatively, you could use Unicode::UTF8 from CPAN which gives you more flexibility as to what to do in such a case.
[01:07:13] <tirnanog> greyrat: sorry, I forgot to include the intended flas. ergo: decode("UTF-8", $bytes, FB_DEFAULT | LEAVE_SRC). that stops it from corrupting the value of $bytes itself (the Encode API is a bit weird).
[01:07:16] <tirnanog> flags*
[01:09:23] <greyrat> Thanks again
[01:10:25] <aquanight> you mentioned this is emacs related? I'm wondering if the bytes aren't meant to be characters at all but are something specific to emacs
[01:11:29] <tirnanog> well, I suppose it would be interesting to know where this input came from to begin with. to me, it just looks like some random sentence that could be from anywhere.
[01:12:14] <tirnanog> actually, I just found it in a ycombinator comment, of all places.
[01:12:21] <tirnanog> hacker news, rather.
[01:12:38] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[01:12:52] <tirnanog> https://news.ycombinator.com/item?id=28100700
[01:12:53] <Paperbot> Link title(s): [ This is the notation that emacs has been using forever, and also displays to the... | Hacker News ]
[01:14:46] <aquanight> okay so the funny character sequences are ... supposed to be the angled quote characters?
[01:15:12] <tirnanog> I'm not quite sure. maybe it's a second-hand source.
[01:15:28] <tirnanog> greyrat: can you clarify how you extracted the octets that you have?
[01:15:45] *** Joins: jabberwok (~wlindley@75.105.20.104)
[01:16:55] <greyrat> tirnanog: I am forking this script: https://gist.github.com/agumonkey/d3eee79840206c28ee9e50d8354a3fad
[01:16:56] <Paperbot> Link title(s): [ porting hackernews -> org-mode from js to elisp https://gist.github.com/dharmatech/2ef271907cb732... ]
[01:17:31] <tirnanog> aha.
[01:17:54] <greyrat> And my current guess is that the source of the corruption is in my own Python library brish that acts as a bridge between zsh and python
[01:18:05] <tirnanog> that script is broken then. because it's 100% valid UTF-8 in the response body from ycombinator.com.
[01:18:34] <greyrat> I am now using temp files to send the HTML over instead of using brish's quoting feature, and it seems the corruption is gone.
[01:18:35] <tirnanog> it ought not to be corrupted, in which case you wouldn't have to 'laxly' decode.
[01:18:47] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[01:19:25] <tirnanog> ok, cool.
[01:19:50] <tirnanog> aquanight: yeah, I suppose it was making a meal of the angled quotes, for whatever reason.
[01:20:14] <greyrat> But it's still weird, as brish should also only "corrupt" text that is corrupt to begin with; It uses Python's Popen with `                errors=self.DECODING_ERRORS`.
[01:20:14] <aquanight> I wonder if it was trying to utf8-encode utf8-encoded bytes
[01:20:39] <aquanight> that doesn't make sense but nothing about this makes sense soooo
[01:22:37] <greyrat> BTW, that script is slow as hell. I wonder if it's elisp or the HN API itself?
[01:22:43] <tirnanog> greyrat: to know where it's going wrong, you'll have to identify and consider every encoding boundary, beginning with the response body (which we expect to be valid UTF-8 from the outset but is it). that which processes the response body should decode it. if it is then required to convey the content to something else that expects an encoding, you have to consider what encoding it wants and encode
[01:22:45] <tirnanog> accordingly ... and so on.
[01:23:03] <tirnanog> in any case, start at the beginning and make sure that your response body was decoded properly.
[01:23:50] <tirnanog> and not all languages have sane string handling. python >=3 is good, as I understand it.
[01:24:03] <aquanight> can I make a crazy suggestion? If you're going to pass the response body to another component, why not just pass it in pre-decoded form?
[01:25:18] <greyrat> aquanight: Um, isn't all text encoded in the end? I always thought langs decode to UTF-8 and keep that in the memory
[01:25:34] <aquanight> I meant
[01:25:35] <tirnanog> you're not supposed to care about how the strings are internally encoded in a sane language.
[01:25:40] <aquanight> if you receive something like say an HTTP body
[01:25:43] <tirnanog> that's an abstraction.
[01:25:47] <aquanight> and you're going to pass some part of that to another tool
[01:25:54] <aquanight> pass the bytes that you got in the response body
[01:26:00] <tirnanog> what he's saying (if you'll pardon me for paraphrasing) is to convey the raw octets from the response body, if possible.
[01:26:00] <aquanight> that way you don't have decode/encode errors
[01:26:12] <tirnanog> and given perl is the apparent consumer in this case.
[01:26:45] <aquanight> it's probably tricky with some types of text encoding
[01:26:53] <tirnanog> to be clear, if something needs decoding to be stored as a string, you must know the encoding and decode, yes.
[01:26:56] <aquanight> but modern HTML I believe is 100% UTF-8 these days
[01:27:09] <tirnanog> but if you start worrying about how the runtime encodes strings internally, something is wrong.
[01:27:20] <tirnanog> or you're using a really bad language (python 2.x, php ...)
[01:27:34] <aquanight> you should only decode text when you need to act on the text and not on the bytes
[01:27:54] <greyrat> Anyhow, the flow is like this: HN API -> elisp -> shell out to script -> encode as JSON and send HTTP req to BrishGarden -> decode the req and feed it to brish -> brish feeds the req to zsh which runs some code and returns stdout and stderr -> return these stuff 
[01:28:18] <aquanight> that is so many layers
[01:28:19] <tirnanog> welp, lots of potential boundaries there.
[01:29:31] <aquanight> how many of these layers need to actually act on the content of the HTTP body?
[01:29:57] <tirnanog> I don't the slightest thing abut elisp but if the "script" you mention is perl, try to do what aquanight suggests and just convey the raw octets without any mangling.
[01:31:13] <greyrat> aquanight: the layers are basically all there so that I can easily run my zsh functions from any language. The main heavy lifter is pandoc, which I could hardcode in elisp from the start, but then I would need to repeat some code and will lose future updates (i.e., in the future I might no longer use pandoc to convert between HTML and org-mode files.)
[01:31:17] * GumbyPAN CPAN Upload: Proc-ProcessTable-0.631 by JWB https://metacpan.org/release/JWB/Proc-ProcessTable-0.631
[01:32:11] <greyrat> The problem seems solved anyhow after I used temp files to move the HTML files between the layers.
[01:32:37] <greyrat> (So now the filenames go through the layers, and they survive just fine.)
[01:32:48] <tirnanog> what were you doing beforehand? holding the content in variables?
[01:32:49] <greyrat> (So basically what you guys suggested.)
[01:33:11] <greyrat> tirnanog: I sent the whole HTML text in the JSON request.
[01:36:42] *** Joins: holyghost (~holyghost@109.136.39.83)
[01:37:50] <greyrat> I did not get any errors this time, but the output is still corrupted; I suspect pandoc did this, as I have seen this happen when I use pandoc normally (and without all these layers) as well:
[01:37:54] <greyrat> `It even says â€œPress C-x C-c to exit emacsâ€?`
[01:39:13] <tirnanog> you'll have to try to find the first boundary at which it goes off the rails. everything in the chain needs to know - and deal with - the encoding, unless its only purpose is to convey the octet stream unaltered.
[01:39:36] <tirnanog> for example, pandoc would need to know that it's receiving utf-8 (not saying pandoc is the problem, just an example).
[01:40:04] <tirnanog> and, similarly, it would need to re-encode and output as utf-8 once it's done with its munging.
[01:40:29] <greyrat> Indeed :( It's not worth the effort though. I can live with the corrupted strings for now. One day I'll debug it thoroughly ...
[01:40:35] <tirnanog> ok.
[01:40:37] *** Joins: ntz (~dpecka@static-84-42-228-122.net.upcbroadband.cz)
[01:40:39] <ntz> hello
[01:41:08] <ntz> sorry for stupid Q: but how can I write some wild on-da-fly $#foo like this
[01:41:10] <ntz> echo 2 3 6 1 | perl -nE 'say $#( split(q/\s+/) )'
[01:41:14] <ntz> which doesn't work
[01:41:30] <ntz> this is one liner example
[01:42:16] <ntz> I know I can do it like this ``scalar(split(q/\s+/))'' but just for sport if I'd like to use $#foo
[01:42:54] <tirnanog> zln: my @chars = map { chr } 0x2800..0x28FF
[01:43:53] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (Quit: ZNC 1.6.6+deb1ubuntu0.2 - http://znc.in)
[01:44:53] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[01:45:54] <greyrat> tirnanog: I went and debugged the first step at least, and lo and behold, the very first JSON downloader seems to be the culprit: 
[01:46:12] <greyrat> "28100700")((by . "anyfoo") (id . 28100700) (kids . [28100868]) (parent . 28097225) (text . "This is the notation that emacs has been using forever, and also displays to the user, so every user should be well comfortable with it. It even says âPress C-x C-c to exit emacsâ at startup.") (time . 1628360486) (type . "comment"))
[01:55:19] <simcop2387> that doesn't look like json at all
[01:56:18] *** Joins: X-Scale` (~ARM@31.22.162.96)
[01:57:25] *** Quits: X-Scale (~ARM@92.250.96.13) (Ping timeout: 265 seconds)
[01:57:35] *** X-Scale` is now known as X-Scale
[02:05:15] *** Joins: bfr (~yaaic@ip-109-43-114-142.web.vodafone.de)
[02:06:21] * GumbyPAN CPAN Upload: Proc-ProcessTable-0.632 by JWB https://metacpan.org/release/JWB/Proc-ProcessTable-0.632
[02:07:56] *** Quits: holyghost (~holyghost@109.136.39.83) (Quit:  bbl)
[02:15:35] *** Quits: Pali (~pali@user/pali) (Ping timeout: 252 seconds)
[02:16:55] <greyrat>  simcop2387: It's JSON parsed by elisp. I solved the issue after asking about on #emacs; It needed some arcane magic, after all.
[02:17:34] <simcop2387> classic "Eight Megs And Constantly Swapping" :)
[02:19:39] *** Quits: slu (uid501941@id-501941.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[02:27:25] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[02:27:44] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[02:33:55] *** Joins: pizdets_ (~pizdets@183.182.111.91)
[02:34:26] *** Quits: pizdets (~pizdets@183.182.111.82) (Ping timeout: 250 seconds)
[02:35:00] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[02:36:24] * GumbyPAN CPAN Upload: Proc-ProcessTable-0.633 by JWB https://metacpan.org/release/JWB/Proc-ProcessTable-0.633
[02:36:25] * GumbyPAN CPAN Upload: Proc-ProcessTable-0.634 by JWB https://metacpan.org/release/JWB/Proc-ProcessTable-0.634
[02:54:44] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[03:21:30] * GumbyPAN CPAN Upload: Dist-Zilla-MintingProfile-AlienBuild-0.03 by PLICEASE https://metacpan.org/release/PLICEASE/Dist-Zilla-MintingProfile-AlienBuild-0.03
[03:21:46] <mst> simcop2387: *eighty
[03:22:17] <mst> greyrat: I'm currently learning SLIME and it's quite fascinating
[03:23:32] <mst> ntz: 'scalar @{[ split /\s+/ ]}' should give you the count, then you can -1 it as required
[03:30:29] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:34:10] *** Quits: proller (~p@2002:50f0:d845:10:4a51:b7ff:fe43:6e30) (Ping timeout: 252 seconds)
[03:43:10] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[03:47:22] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[03:52:03] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Ping timeout: 276 seconds)
[03:52:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[03:53:28] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[03:54:05] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[04:02:27] *** Joins: whynot (~whynot@88.155.42.109)
[04:11:35] * GumbyPAN CPAN Upload: Mail-DMARC-1.20210927 by MBRADSHAW https://metacpan.org/release/MBRADSHAW/Mail-DMARC-1.20210927
[04:19:02] <mason> mst: Does it make you want to create SPIME?
[04:19:45] <mst> mason: I'm learning first
[04:24:11] *** Joins: aspic (~shifty~~~@ppp121-44-106-173.syd-gls-har-bras38.tpg.internode.on.net)
[04:40:10] *** Quits: Su-Shee (~Susanne@p50894f9d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:41:42] *** Joins: Su-Shee (~Susanne@p50894cf4.dip0.t-ipconnect.de)
[04:41:56] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[04:50:07] *** Joins: krismatrix (~krismatri@38.80.149.51)
[05:09:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[05:11:42] * GumbyPAN CPAN Upload: App-perlimports-0.000022 by OALDERS https://metacpan.org/release/OALDERS/App-perlimports-0.000022
[05:17:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[05:18:47] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:23:35] <aquanight> mst: what about () = split /\s+/
[05:23:39] <aquanight> rather than @{[ ]}
[05:24:03] <aquanight> or does this not work with split?
[05:25:14] <aquanight> sweval: () = split /\s+/, "2 3 6 1"
[05:25:16] <perlbot> aquanight: 1
[05:25:25] <aquanight> sweval: () = split /\s+/, "2 3 6 1", -1
[05:25:26] <perlbot> aquanight: 4
[05:25:34] <aquanight> that's better
[05:25:54] <mst> aquanight: old perl would react to scalar split by splitting into @ARGV
[05:26:06] <mst> aquanight: I am still traumatised
[05:26:09] <aquanight> mst: that's not scalar split
[05:26:10] <Grinnz> ()= makes it list split
[05:26:20] <aquanight> that's half a goatse operator
[05:26:25] <mst> aquanight: lol
[05:26:30] <aquanight> or one-handed goatse I guess
[05:26:33] <mst> aquanight: it's so sweet you think that would help
[05:26:39] <aquanight> mst: wut
[05:27:10] <mst> aquanight: I thoought that wasn't scalar split
[05:27:15] <mst> aquanight: but it really was
[05:27:18] <aquanight> mst: to be fair, he's using -nE and 'say'
[05:27:42] <aquanight> so you can assume 5.10
[05:27:45] <aquanight> at minimum
[05:28:12] <mst> aquanight: to be fair, I did this for production code in Catalyst::DispatchType::Chained and you can assume whatever you'd like but you'll still be wrong
[05:28:16] <aquanight> mst: when would ()  = split ever not be list split?
[05:28:20] <Grinnz> mst: you might be thinking of void split? which was pretty horrid
[05:28:36] <aquanight> I'm very confused as to how this could happen.
[05:28:59] <mst> the 5.8 peephole optimiser hated us all?
[05:29:17] <aquanight> I suppose if you're that paranoid and this is for perl -e
[05:29:24] <Grinnz> oh god, it was scalarnot void
[05:29:26] <Grinnz> "Use of split in scalar context is deprecated, however, because it clobbers your subroutine arguments."
[05:29:29] <Grinnz> (lol)
[05:29:38] <mst> aquanight: I'm not paranoid, they -were- out to get me.
[05:29:52] <aquanight> you could go: perl -e 'print( (@discard) = split /\s+/ ); print "\n";'
[05:30:10] <mst> Grinnz: this was the original version of what became mojo's ->under
[05:30:32] <Grinnz> i wouldn't be totally surprised if on some old perl ()= didn't successfully make it list context, but i'd still be pretty surprised
[05:30:49] <aquanight> Grinnz: it was both
[05:30:50] <aquanight>  (Prior to Perl 5.11, it also overwrote @_ with the list in void and scalar context. If you target old perls, beware.)
[05:30:56] <aquanight> in perldoc -f split
[05:31:04] <Grinnz> yeah, it would be void too
[05:31:22] <aquanight> I could see a peephole seeing () = split in void context and peepholing out the () = leaving split in void context
[05:31:25] <Grinnz> great, it affects 5.10 so i have to care
[05:31:42] <aquanight> but can I ask a crazy question
[05:31:46] <mst> Grinnz: look, I was doing stupid shit -and- keeping with rules as set by sebastian
[05:31:50] <aquanight> why would you ever split outside list context?
[05:31:56] *** Quits: miojo (~mns@191.253.157.192) (Ping timeout: 252 seconds)
[05:32:02] <Grinnz> because people are bad at stuff
[05:32:06] <mst> aquanight: read Chained.pm
[05:32:10] <mst> Grinnz: fuck you
[05:32:25] <mst> this was about ordering routes
[05:32:37] <mst> it was horrible but it worked
[05:32:51] <aquanight> https://metacpan.org/dist/Catalyst-Runtime/source/lib/Catalyst/DispatchType/Chained.pm#L258
[05:32:51] <Paperbot> Link title(s): [ lib/Catalyst/DispatchType/Chained.pm - metacpan.org ]
[05:32:54] <aquanight> is this the offending?
[05:33:17] <Grinnz> intentionally horrible code would be a different problem
[05:33:26] <Grinnz> but i'm talking about how it would happen accidentally
[05:33:42] <aquanight> if so
[05:34:03] <aquanight> could you have fixed it with 1+(()=$try_part =~ m(/)g) ?
[05:34:22] <Grinnz> oh yeah thats just using the count return value
[05:34:50] <Grinnz> well, using the array to emulate it so it doesn't trip the crap we just talked about
[05:35:14] <mst> exactly
[05:35:20] <mst> I tried the sensible way
[05:35:39] <mst> it didn't work
[05:35:40] <aquanight> I'm very confused as to why neither of the options would have worked.
[05:35:56] <mst> aquanight: so was I1
[05:36:00] <mst> aquanight: so was I!
[05:36:23] <aquanight> there's no way on gods green earth you couldn't do 1 + (() = $try_part =~ m(/)g)
[05:36:31] <aquanight> you wouldn't even be creating an assload of substrings just to toss them
[05:36:35] <aquanight> (pre-COW perls)
[05:36:48] <aquanight> (also not assuming modern split will set up COW)
[05:37:07] <mst> aquanight: you realise you're trying to judge my code from 2006 or so right?
[05:37:23] <Grinnz> i mean, i would only know to try ()= as of like a few months ago
[05:37:24] <mst> maybe you're right
[05:37:31] <aquanight> I'm not so much trying to judge as to understand why it had to be what it is
[05:37:34] <mst> 15 years ago I made it work
[05:37:51] <aquanight> Grinnz: fair point, I'm pretty sure I realized () = from this channel too.
[05:37:54] <mst> you might be right here, mate
[05:38:05] <aquanight> and I haven't been here that long even though
[05:38:06] <mst> but 15 years ago, I made it fucking work
[05:38:24] <aquanight> mst: I mean, fair enough.
[05:38:40] <aquanight> perlsecret should just become a proper perldoc
[05:40:44] <aquanight> mst: I guess to be fair you did still use a perlsecret operator, just babycart instead of one-handed goatse
[05:41:19] <mst> I was hitting everything with a hammer
[05:41:40] <mst> Chained.pm was written in a single 48 hour fit of rage
[05:42:15] <haarg> 1 + $try_part =~ tr{/}{}
[05:42:35] <haarg> not going to give the same result for trailing slashes though
[05:43:25] <aquanight> mst: also fun fact: perlsecret ends up talking about basically this scenario (trying to use list split to count splits)
[05:43:40] <haarg> i have no idea if that's a problem for the code in question though
[05:44:17] <mst> aquanight: I know the author but I've never cared to read
[05:45:21] <mst> haarg: no idea, 15 years ago it worked, for everybody, in production - I'm better at perl these days and might be nicer ;)
[05:48:08] <haarg> book is a fan of ( ... ) x !! ... which does annoy me occasionally
[05:50:35] <aquanight> <=><=><=> is one that seems like it'd work on paper but I think in practice it's a bit silly and technically unreliable
[05:50:50] <aquanight> (you're dependant on the behavior of glob() in that scenario)
[05:50:59] <aquanight> scalar glob, specifically
[05:52:33] <haarg> most of them are a pretty silly
[05:55:55] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9971-ce5a-c805-3e08.res6.spectrum.com) (Quit: Leaving)
[05:56:31] <aquanight> speaking of scalar glob, wasn't there like some package that does it "better" or something?
[05:56:58] <aquanight> like obviously you could just list-glob if you really wanted, but who actually likes to slerp file lists like that?
[06:01:04] *** Joins: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be)
[06:01:23] *** Quits: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be) (Client Quit)
[06:02:26] <mst> aquanight: I'd note that Chained was a thing where we'd been getting requests for years
[06:02:28] *** Joins: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be)
[06:03:11] <mst> aquanight: so I specified it, acquired an extra perl nutter, and then we raced
[06:03:38] <mst> 36 hours of "they wrote tests and I wrote the code and we fucking raced each other"
[06:05:02] <mst> note that MooseX:;Types and namespace::clean which then inspired things like Type::Tiny were written by him
[06:05:22] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[06:05:23] <mst> also he's been a shadowcat kid for a decade plus now
[06:05:37] <mst> stupid crazy bastard
[06:05:53] * mst happy with this sort of stupid crazy bastard, but still
[06:10:19] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 252 seconds)
[06:11:55] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:16:58] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 265 seconds)
[06:22:30] *** Quits: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:24:53] *** Joins: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be)
[06:30:13] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[06:35:31] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[06:47:41] *** Quits: whynot (~whynot@88.155.42.109) (Quit: leaving)
[07:00:23] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[07:00:35] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[07:14:06] *** Quits: Martchus (~martchus@2a01:c22:7236:d500:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[07:14:18] *** Joins: Martchus_ (~martchus@dynamic-077-004-072-071.77.4.pool.telefonica.de)
[07:38:46] *** Joins: AI4AI (~subie@2601:4c0:4080:bc0:8940:6a74:7877:9c04)
[07:40:53] *** Quits: subie (~subie@2601:4c0:4080:bc0:61fe:845d:d42b:712a) (Ping timeout: 264 seconds)
[07:46:58] * GumbyPAN CPAN Upload: HTML-Escape-1.11 by TOKUHIROM https://metacpan.org/release/TOKUHIROM/HTML-Escape-1.11
[07:51:33] *** Quits: XV8 (~XV8@2601:5cb:c001:50:b1fc:daf5:89c3:87be) (Quit: Textual IRC Client: www.textualapp.com)
[08:02:00] * GumbyPAN CPAN Upload: Test-Prereq-Meta-0.003 by WYANT https://metacpan.org/release/WYANT/Test-Prereq-Meta-0.003
[08:06:06] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:07:17] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:36:20] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[08:45:23] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[08:48:55] *** Joins: diskin (~diskin@46.41.124.220)
[08:51:30] *** Joins: jaggz (~jaggz@user/jaggz)
[08:51:57] <jaggz> is there a qw() that makes an array but also expands $vars?
[08:53:10] <jaggz> I'm doing stuff like system("command a b c $var d e f"); and would like to put them on multiple lines without adding quotes and appending strings and stuff
[08:53:39] <jaggz> so, like: system(qw(command a b c $var d e f));  # but the arguments sometimes split onto multiple lines, cuz there's a lot
[08:54:54] *** Joins: Lynx_ (~x@fuchshai.geomar.de)
[08:57:53] <quesker> hmm can't you just   system "command a b c $var d e f"
[09:02:46] <jaggz> quesker, split onto multiple lines
[09:03:56] *** Joins: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi)
[09:06:52] *** Quits: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:10:09] *** Joins: mattil (~mattil@airio.portalify.com)
[09:16:04] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[09:16:31] *** Joins: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi)
[09:16:42] *** Quits: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:16:52] *** Joins: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi)
[09:17:14] <quesker> system split / /, "command a b c
[09:17:16] <quesker> $var d e f"
[09:17:27] *** Shells is now known as Michelle
[09:18:19] *** Quits: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:18:34] *** Quits: toddr (sid457681@id-457681.tinside.irccloud.com) (*.net *.split)
[09:18:34] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[09:18:34] *** Quits: davebaker_ (sid143727@id-143727.lymington.irccloud.com) (*.net *.split)
[09:18:34] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[09:18:34] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[09:18:34] *** Quits: esh (~quassel@minnesota.heebs.ch) (*.net *.split)
[09:18:42] *** Joins: esh (~quassel@minnesota.heebs.ch)
[09:18:42] *** Joins: toddr (sid457681@id-457681.tinside.irccloud.com)
[09:18:42] *** Joins: rfi (~rfi@216.70.102.172)
[09:18:49] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[09:18:58] *** Joins: davebaker_ (sid143727@id-143727.lymington.irccloud.com)
[09:19:23] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[09:19:35] *** Joins: mattil (~mattil@airio.portalify.com)
[09:22:26] *** Quits: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com) (Ping timeout: 260 seconds)
[09:23:27] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[09:24:41] *** Quits: pekster (~rewt@user/pekster) (*.net *.split)
[09:24:42] *** Quits: tnez (~el@user/tnez) (*.net *.split)
[09:24:42] *** Quits: sgrs (~sgrs@185.112.146.78) (*.net *.split)
[09:24:42] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (*.net *.split)
[09:24:42] *** Quits: rbraun (Sbw7KeoN@user/rbraun) (*.net *.split)
[09:24:42] *** Quits: edf0 (edef@panther.nathan7.eu) (*.net *.split)
[09:24:42] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[09:24:42] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[09:24:42] *** Quits: dwxreaper (~quinn@192.155.91.76) (*.net *.split)
[09:24:42] *** Quits: TBSliver (sid321952@id-321952.hampstead.irccloud.com) (*.net *.split)
[09:24:42] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[09:24:42] *** Quits: haircode1 (~haircode@134.122.105.156) (*.net *.split)
[09:24:42] *** Quits: przemoc (~przemoc@user/przemoc) (*.net *.split)
[09:24:42] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (*.net *.split)
[09:24:42] *** Quits: iob (~iob@nat1.prg.suse.com) (*.net *.split)
[09:24:42] *** Quits: Stealth (stealth@sourcemage/archon/stealth) (*.net *.split)
[09:24:42] *** Quits: ology (~gene@user/ology) (*.net *.split)
[09:24:42] *** Quits: VectorX (~VectorX@user/vectorx) (*.net *.split)
[09:24:43] *** Quits: u4ia (~u4ia@2a02:a462:49df:1:7928:4441:95ef:79a4) (*.net *.split)
[09:24:43] *** Quits: polettix (~polettixx@linode.polettix.it) (*.net *.split)
[09:24:43] *** Quits: Zubin (rubin@2600:3c02::f03c:91ff:fe70:4a45) (*.net *.split)
[09:24:43] *** Quits: ingy (~ingy@104.236.228.44) (*.net *.split)
[09:24:43] *** Quits: mruszczyk (sid160336@id-160336.tinside.irccloud.com) (*.net *.split)
[09:24:43] *** Quits: Juerd (juerd@computervrede.nl) (*.net *.split)
[09:24:43] *** Quits: tyldis (~vidar@2a03:b0c0:2:d0::80c:c001) (*.net *.split)
[09:24:43] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[09:24:43] *** Quits: bocaneri (~bismilah@about/linux/staff/sauvin) (*.net *.split)
[09:24:43] *** Quits: gugod (gugod@li7-202.members.linode.com) (*.net *.split)
[09:24:43] *** Quits: dngor (abuse@104-136-128-018.biz.spectrum.com) (*.net *.split)
[09:24:43] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:24:43] *** Quits: megaTherion (~therion@coruscant.unix.io) (*.net *.split)
[09:24:43] *** Quits: pervaya (~pervaya@2001:41d0:602:3007::641b:b74c) (*.net *.split)
[09:24:43] *** Quits: Champi (Champi@damn.e-leet.be) (*.net *.split)
[09:24:43] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[09:24:48] *** Joins: bocaneri (~bismilah@li889-61.members.linode.com)
[09:24:49] *** Joins: dwxreaper (~quinn@192.155.91.76)
[09:24:50] *** Joins: edf0 (edef@panther.nathan7.eu)
[09:24:52] *** Joins: dngor (abuse@104-136-128-018.biz.spectrum.com)
[09:24:52] *** Joins: pekster (~rewt@user/pekster)
[09:24:52] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[09:24:52] *** Joins: patterner_ (sid212303@id-212303.ilkley.irccloud.com)
[09:24:53] *** Joins: Zubin (~rubin@ender.afternet.org)
[09:24:54] *** Joins: mason (~mason@tigris.blisses.org)
[09:24:54] *** Joins: przemoc (~przemoc@89-72-24-4.dynamic.chello.pl)
[09:24:55] *** Joins: polettix (~polettixx@linode.polettix.it)
[09:24:55] *** Joins: sgrs (~sgrs@185.112.146.78)
[09:24:59] *** Quits: mason (~mason@tigris.blisses.org) (Changing host)
[09:24:59] *** Joins: mason (~mason@redhat/mason)
[09:25:03] *** Joins: u4ia (~u4ia@2a02:a462:49df:1:7928:4441:95ef:79a4)
[09:25:04] *** Joins: dansan (~daniel@75.81.148.51)
[09:25:06] *** Joins: iob (~iob@nat1.prg.suse.com)
[09:25:14] *** Quits: przemoc (~przemoc@89-72-24-4.dynamic.chello.pl) (Changing host)
[09:25:14] *** Joins: przemoc (~przemoc@user/przemoc)
[09:25:14] *** Joins: tyldis (~vidar@2a03:b0c0:2:d0::80c:c001)
[09:25:21] *** Joins: Juerd (juerd@computervrede.nl)
[09:25:27] *** Joins: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1)
[09:25:27] *** Joins: TBSliver (sid321952@id-321952.hampstead.irccloud.com)
[09:25:31] *** Joins: tnez (~el@179.50.90.141)
[09:25:48] *** Joins: mruszczyk (sid160336@id-160336.tinside.irccloud.com)
[09:25:51] *** Quits: tnez (~el@179.50.90.141) (Changing host)
[09:25:51] *** Joins: tnez (~el@user/tnez)
[09:26:06] *** Joins: gugod (gugod@li7-202.members.linode.com)
[09:26:10] *** Joins: vanfanel64 (~vanfanel6@user/vanfanel64)
[09:26:11] *** Joins: Champi (Champi@damn.e-leet.be)
[09:26:25] *** Joins: pervaya (~pervaya@ip250.ip-51-83-183.eu)
[09:26:36] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[09:26:38] *** Joins: ingy (~ingy@104.236.228.44)
[09:26:47] *** Joins: haircode1 (~haircode@134.122.105.156)
[09:27:14] *** Joins: Stealth (stealth@sourcemage/archon/stealth)
[09:27:53] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[09:29:59] *** Joins: ology (~gene@user/ology)
[09:30:01] *** Joins: rbraun (Mowq6evT@user/rbraun)
[09:30:20] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:32:09] * GumbyPAN CPAN Upload: JSON-Schema-Modern-0.520 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-0.520
[09:32:30] *** Joins: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi)
[09:32:39] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[09:33:27] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[09:35:00] *** Joins: megaTherion (~therion@coruscant.unix.io)
[09:37:10] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:37:12] *** Quits: mattil (~mattil@d19y2qrg62ssf3hzbly-4.rev.dnainternet.fi) (Ping timeout: 265 seconds)
[09:52:42] *** Joins: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com)
[09:54:08] *** Quits: normskal (~normskal@101.175.64.73) (Ping timeout: 256 seconds)
[09:55:08] *** Joins: mattil (~mattil@helsinki.portalify.com)
[09:56:28] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[09:57:02] *** Joins: mattil (~mattil@airio.portalify.com)
[10:11:40] *** Joins: ircuser (~ircuser@89.111.36.243)
[10:16:56] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Remote host closed the connection)
[10:17:02] *** Joins: tobybl (~tobybl@31.111.35.255)
[10:35:38] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[10:37:16] * GumbyPAN CPAN Upload: Getopt-EX-Hashed-0.9920 by UTASHIRO https://metacpan.org/release/UTASHIRO/Getopt-EX-Hashed-0.9920
[10:48:17] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 250 seconds)
[10:50:08] *** Joins: WinterStar (~IceLight@user/icelight)
[10:54:01] *** Joins: art1 (~romeyke@p200300ccdf077f003d06710751f15b57.dip0.t-ipconnect.de)
[10:55:28] *** Quits: przemoc (~przemoc@user/przemoc) (Ping timeout: 268 seconds)
[10:59:52] *** Quits: aspic (~shifty~~~@ppp121-44-106-173.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[11:00:53] *** Joins: aspic (~shifty~~~@ppp121-44-99-7.syd-gls-har-bras38.tpg.internode.on.net)
[11:13:32] *** Quits: ozy (~ozy@libre.theyareafter.us) (Ping timeout: 252 seconds)
[11:14:26] <jaggz> quesker, thanks for trying so hard. :)  it doesn't olve my problem though.
[11:14:32] <jaggz> I just ended up using string concatenation
[11:15:13] *** Joins: Kate[m]123 (~katewecab@2001:470:69fc:105::1:2b2)
[11:21:17] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 246 seconds)
[11:22:25] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[11:22:25] *** Quits: diskin (~diskin@46.41.124.220) (Killed (copper.libera.chat (Nickname regained by services)))
[11:22:25] *** diskin_ is now known as diskin
[11:23:24] *** Joins: WinterStar (~IceLight@user/icelight)
[11:28:06] <ircuser> poor man's shell: perl -E 'eval $_ while <>'
[11:28:45] *** Joins: ozy (~ozy@libre.theyareafter.us)
[11:29:29] *** Quits: Guest3120 (ponyblocks@2605:6400:c847:1478::8741) (Changing host)
[11:29:29] *** Joins: Guest3120 (ponyblocks@user/ponyblocks)
[11:29:41] *** Guest3120 is now known as PonyBlocks
[11:37:00] *** Quits: aspic (~shifty~~~@ppp121-44-99-7.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[11:37:26] *** Parts: bfr (~yaaic@ip-109-43-114-142.web.vodafone.de) ()
[11:37:45] *** Joins: aspic (~shifty~~~@ppp121-44-113-30.syd-gls-har-bras39.tpg.internode.on.net)
[11:41:23] * GumbyPAN CPAN Upload: App-Greple-subst-2.2903 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-subst-2.2903
[11:44:07] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:48:08] *** Joins: gggpkm (~gggpkm@li2010-23.members.linode.com)
[12:20:35] <zln> How do I express 'substitute \S to this and \s to that' in same s///? I know I can use char classes for what but don't know how to assign \S=this \s=that
[12:22:53] <zln> s/(?:$esc|\G(?!^))(?(?=$esc)|.)\K\s/\0x2591/ge <-I heav this that I'll use to substitute some stuff positioned between ansii color codes
[12:23:52] <zln> and it's sometimes several spaces and/or some digit(s) or dot(s) 
[12:24:52] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 252 seconds)
[12:24:54] *** Joins: Shells (~michelle@2407:8800:bc20:200a:fd2e:f8a8:d9ac:3314)
[12:28:56] <haarg> it's not really clear what you are trying to do with that regex, or if it's a typo
[12:29:36] <haarg> that would end up replacing characters with SCALAR(0x12341234)
[12:30:07] <zln> hm you mean the \0x2591 ?
[12:30:10] <haarg> because you are using /e, so \0x2591 is a reference to a number
[12:30:14] *** Shells is now known as Michelle
[12:30:15] <zln> ah
[12:30:20] <zln> thanks
[12:30:35] <haarg> but /e can be an answer to your original question
[12:30:36] <zln> I wanted to repalace to unicode 2591
[12:31:07] <zln> what should I use instead of \0x2591
[12:31:35] <zln> I thought /e was for the regex part
[12:31:44] <zln> not the replace part :)
[12:31:48] <haarg> \x{2591}
[12:31:55] <zln> nice thanks
[12:32:34] <haarg> using /e makes the replacement part a perl expression
[12:32:39] <zln> but if I would like to replace \K\s to \x{2591} and \K\S to \x{2751} 
[12:32:54] <zln> should I run two different s/// or is it possible to make it in one?
[12:33:49] <haarg> s/...\K(?:(\s)|(\S))/defined $1 ? "\x{2591}" : \x{2751}/ge
[12:33:56] <haarg> possibly
[12:34:16] <haarg> err, i missed quotes around the "\x{2751}"
[12:34:42] <zln> alright, I'll give it a try, thanks for the lesson :)
[12:35:44] <haarg> if it matches the \s, then the first match will be defined. otherwise the second match will be defined. and since with /e you can use an arbitrary expression, you can have a condition on that to choose the replacement.
[12:36:32] <zln> yes, it's so easy to understand when I see it. Just couldn't come up with it on my self :D
[12:38:36] <zln> what's the regulars of #perl up to? They do something behind closed doors or is there a YAPC going on :D
[12:38:57] <zln> unusually quite here 
[12:39:49] <LeoNerd> It's also 10am Monday morning, UK time. Probably not many awake yet
[12:41:16] <El_Che> their generators ran out of petrol
[12:41:23] <zln> LeoNerd: mst should be awake, or his cat. xenu is always lurking. Grinnz usually jump on someone from behind
[12:41:39] <zln> lol
[12:43:02] <zln> I know rindolf(s) is here under multiple pseudonames
[12:43:43] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 252 seconds)
[12:43:57] <zln> LeoNerd: is this you: https://thehftguy.com/2019/10/07/perl-is-dying-quick-could-be-extinct-by-2023/ ? :p
[12:43:58] <Paperbot> Link title(s): [ Perl is dying quick. Could be extinct by 2023. – The HFT Guy ]
[12:45:43] *** Joins: WinterStar (~IceLight@user/icelight)
[12:47:17] *** Joins: Shells (~michelle@203.206.128.220)
[12:48:57] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 265 seconds)
[12:50:10] <haarg> it's monday morning for europe, and middle of the night for america. a pretty quiet time usually.
[12:50:30] <zln> haarg: still sunday there?
[12:51:01] *** Quits: Michelle (~michelle@2407:8800:bc20:200a:fd2e:f8a8:d9ac:3314) (Ping timeout: 265 seconds)
[12:51:30] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:52:00] <zln> that's why Lenovo has not responded to me yet :)
[12:52:17] <haarg> 2:20am on the west coast
[12:52:48] <zln> It is a sunny day here in the North
[12:52:57] <zln> but the winter is coming
[12:54:07] <haarg> it's overcast here, like usual. still too bright. should have gotten some sleep last night.
[12:55:02] <Altreus> poetry
[12:57:02] *** Shells is now known as Michelle
[13:01:03] *** Joins: anthk_ (~anthk_@92.176.105.30)
[13:03:23] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[13:05:02] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 260 seconds)
[13:05:35] *** Joins: pj (~pj@ghettoforge/pj)
[13:19:55] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[13:20:22] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 265 seconds)
[13:23:26] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 245 seconds)
[13:24:55] *** Quits: randir (~randir@95-25-59-33.broadband.corbina.ru) (Remote host closed the connection)
[13:26:07] *** Joins: troydm1 (~troydm@host-176-37-124-197.b025.la.net.ua)
[13:27:08] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 252 seconds)
[13:28:43] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 265 seconds)
[13:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:30:50] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[13:31:01] *** Joins: csrf (~csrf@user/csrf)
[13:39:39] *** Joins: mattil (~mattil@airio.portalify.com)
[13:47:44] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[13:58:48] *** Joins: tobybl_ (~tobybl@31.111.35.255)
[14:00:44] <LeoNerd> zln: I wouldn't pay much attention to that article. The main text says that perl "doesn't support functions with arguments" and then after some back-and-forth in the comments it turns out the author means that perl doesn't do static type-checking of arguments. Well,.. no. It's a dynamic language. But then neither does Python or Scheme or JavaScript or ...
[14:01:07] *** Quits: tobybl (~tobybl@31.111.35.255) (Ping timeout: 240 seconds)
[14:01:39] * GumbyPAN CPAN Upload: DBIx-Connector-0.57 by ARISTOTLE https://metacpan.org/release/ARISTOTLE/DBIx-Connector-0.57
[14:05:42] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[14:09:43] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[14:26:19] <Altreus> that article reminds me of that no bad publicity thing from TPF
[14:26:37] <Altreus> Someone wrote an article about perl, perhaps advertising that perl still exists
[14:36:09] <daxim> perl-foundation opens dialogue: https://old.reddit.com/r/perl/comments/pwd61l/cat_open_session_your_thoughts_and_ideas/
[14:36:09] <Paperbot> Link title(s): [ CAT open session – your thoughts and ideas : perl ]
[14:36:10] <daxim> they did not document their misdoing, but I did: https://old.reddit.com/r/perl/comments/ozs40x/the_cat_saga_rumbles_on/h9ee4i4/
[14:36:11] <Paperbot> Link title(s): [ The CAT saga rumbles on : perl ]
[14:37:20] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[14:40:54] *** Joins: randir (~randir@93.159.239.42)
[14:53:01] <andrzejku> hello, how can I create an object private variable
[14:53:33] <andrzejku> I mean attributes
[14:54:27] <haarg> depends on how you are constructing your objects
[14:54:58] <LeoNerd> and depends what you mean "private"
[14:56:00] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:57:08] <andrzejku> well according to my book, there is the method to create instead of blessed hash ref a blessed subroutine ref and put my $data from new constructor in there
[14:57:22] <andrzejku> but I don't want to make any acess check
[14:57:28] <andrzejku> for this particular variable
[14:57:56] <andrzejku> so if I create in sub my $data it has a lexical scope lifetime
[14:58:11] <andrzejku> so how can I extend this lifetime and keep it private forever
[14:58:19] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[14:59:16] <LeoNerd> start further back, what is the actual problem here?
[15:00:31] *** Quits: anthk_ (~anthk_@92.176.105.30) (Read error: Connection reset by peer)
[15:00:37] <andrzejku> so I want to create a private object attribute
[15:02:02] <LeoNerd> define "private"
[15:02:13] <LeoNerd> what are you trying to prevent?
[15:02:45] <haarg> using a blessed subref for an object is possible but will be painful. any data access will have to go through the subref.
[15:03:22] <andrzejku> hmm
[15:03:27] <haarg> almost certainly not worth the pain - there are other options.
[15:03:38] <LeoNerd> they're also basically impossible to subclass
[15:04:05] <haarg> usually the answer for private attributes is "don't access other's data except through their methods"
[15:04:37] <andrzejku> haarg, ah yes I read about that in book
[15:04:52] <LeoNerd> I'd suggest looking at Object::Pad because instance data is already scoped to just the class that defined it, unless you provide an accessor
[15:05:05] <LeoNerd> But perhaps I am biased since I wrote it :)
[15:05:11] <andrzejku> so it means that usually when creating an API I don't need to afraid of encapsulation
[15:05:19] <andrzejku> because perl devs are smart
[15:07:11] <LeoNerd> ?
[15:09:15] <haarg> fieldhashes are another option if you are really insistent on private attributes but not sold on a larger object system.
[15:09:26] <haarg> but usually not recommended
[15:09:47] <LeoNerd> Really, 99 times in a hundred that's just an overcomplication
[15:10:14] <LeoNerd> just stick it in the hash with an unlikely key name
[15:10:32] <LeoNerd> prepending the package name often helps that
[15:10:51] <LeoNerd> $self->{My_Weird_Subclass__field} = 123;
[15:11:10] <haarg> one of these days i'll convince you to add a mode to Object::Pad that does that
[15:11:12] <LeoNerd> highly unlikely any other code will interfere
[15:11:34] <LeoNerd> oh, a per-field repr thing? hmmm... could work
[15:11:53] <LeoNerd> :repr(keys)  or somesuch
[15:12:41] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:12:43] <haarg> essentially i want to play with Object::Pad in the context on another object system - the only thing i really want is the lexical slot vars, and do everything else myself.
[15:13:35] <LeoNerd> hrm, but you'd need a key per slot to do that?
[15:14:50] <daxim> andrzejku, http://p3rl.org/Moops#Classes & ctrl+f   private
[15:14:57] <Paperbot> Link title(s): [ Moops - Moops Object-Oriented Programming Sugar - metacpan.org <https://metacpan.org/pod/Moops> ]
[15:15:15] <haarg> i want to generate methods that access the attributes
[15:15:25] <haarg> the mechanism to do that via the mop is not really viable
[15:15:39] <LeoNerd> Ah, so you need a predictable way to get them
[15:15:42] <haarg> yes
[15:15:47] <LeoNerd> I see
[15:16:16] <zln> any reason l.perl.bot dies at IRC line 11?
[15:16:19] <zln> when pasting
[15:17:19] <LeoNerd> maybe it is superstitious and doesn't like repunit primes
[15:17:27] <zln> haarg: https://l.perl.bot/p/hwy2ht This doesn't convert regular characters to the unicode in replace 
[15:17:28] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[15:17:43] <zln> any idea?
[15:18:15] <zln> LeoNerd: 
[15:18:18] <zln> sorry
[15:18:21] <zln> >D
[15:19:59] <haarg> have you checked what your regex is actually matching?
[15:20:00] <zln> https://l.perl.bot/edit/hwy2ht? maybe this is better
[15:20:01] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[15:20:47] <haarg> that isn't a new paste
[15:20:49] <zln> haarg: I tried, should I use \^\[\[ instead of \e\[ ?
[15:21:09] <zln> https://l.perl.bot/p/jhf94t ah sorry, too much 
[15:21:09] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[15:21:10] <zln> :D
[15:22:21] <zln> \^\[\[ works better but fails when m is followed by something
[15:23:37] <zln> https://l.perl.bot/p/x8fbui or I mean, it works on some places but not all
[15:23:38] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[15:26:04] <zln> I'm trying to keep the ansi color codes but replace the printed characters, space to \x{2591} and nonspace to \x{2751} 
[15:26:48] * GumbyPAN CPAN Upload: Perl-Critic-Policy-Variables-ProhibitUnusedVarsStricter-0.111_01 by WYANT https://metacpan.org/release/WYANT/Perl-Critic-Policy-Variables-ProhibitUnusedVarsStricter-0.111_01
[15:27:11] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[15:31:19] <haarg> https://perlbot.pl/p/9cjedu maybe?
[15:31:19] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[15:31:21] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 265 seconds)
[15:32:27] <zln> looks good, let me check in the terminal
[15:34:49] *** Joins: proller (~p@2a02:6b8:0:40c:237b:7116:c10:af9b)
[15:36:23] <LeoNerd> zln: String::Tagged::Terminal
[15:37:16] <zln> nah, didn't work. no colors or structure http://imgur.com/AH66hNd
[15:37:17] <Paperbot> Link title(s): [ OnPaste.20210927-140650 - Imgur ]
[15:39:34] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[15:40:55] <LeoNerd> ?
[15:41:22] <zln> missed your line, will check the link
[15:41:24] <rindolf> hi all! is https://rt.cpan.org/Dist/Display.html?Name=HTML-T5 slow for everyone else now?
[15:41:24] <Paperbot> Link title(s): [ Active bugs for HTML-T5 <https://rt.cpan.org/Public/Dist/Display.html?Name=HTML-T5> ]
[15:41:27] <zln> i mean module
[15:41:29] <zln> >D
[15:42:39] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[15:45:22] *** Joins: jabberwok (~wlindley@75.105.20.104)
[15:45:23] <haarg> zln: $esc is matching the literal ^[ characters
[15:45:49] <haarg> possibly you want qr/\e\[(?:\d(?:;?))+m/;
[15:46:05] <zln> I know, but \e didn't work out either, or maybe it was in the my version, lemme check with your
[15:46:29] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 265 seconds)
[15:46:41] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[15:48:53] <rindolf> hi all! is https://rt.cpan.org/Dist/Display.html?Name=HTML-T5 slow for everyone else now?
[15:48:54] <Paperbot> Link title(s): [ Active bugs for HTML-T5 <https://rt.cpan.org/Public/Dist/Display.html?Name=HTML-T5> ]
[15:49:02] <zln> haarg: ah yes, that worked out. I had to change it to literals in the webpage http://imgur.com/W3JPkhI
[15:49:02] <Paperbot> Link title(s): [ OnPaste.20210927-141741 - Imgur ]
[15:49:34] <zln> some squares that not seem the be correct but I may have written the code point wrong
[15:50:23] <zln> by 'webpage' I mean l.perl.bot to be able to eval the changes
[15:51:14] <zln> now I need to check the difference btw orig s/// and your version :p
[16:00:47] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[16:03:51] *** Quits: proller (~p@2a02:6b8:0:40c:237b:7116:c10:af9b) (Ping timeout: 245 seconds)
[16:04:19] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[16:08:11] <Altreus> fuck I hate strftime
[16:08:15] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[16:08:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:08:37] <Altreus> can someone make a new ISO for the subset of ISO8601 that is actually complete and useful?
[16:08:58] *** Joins: mattil (~mattil@airio.portalify.com)
[16:09:05] <Altreus> not using it is like not using UTF-8
[16:10:56] *** Quits: aspic (~shifty~~~@ppp121-44-113-30.syd-gls-har-bras39.tpg.internode.on.net) (Ping timeout: 260 seconds)
[16:11:25] <LeoNerd> %Y-%m-%dT%H:%M:%S  is all you need :)
[16:11:41] *** Joins: aspic (~shifty~~~@ppp121-44-96-73.syd-gls-har-bras38.tpg.internode.on.net)
[16:11:42] <Altreus> ±z
[16:12:11] <Altreus> hrm well
[16:12:15] <Altreus> or just Z
[16:12:26] <Altreus> I'd rather be explicit that no, America, I don't mean you-time
[16:12:41] <LeoNerd> Fair
[16:12:55] <Altreus> anyway, yes, that subset
[16:14:01] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[16:14:30] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 265 seconds)
[16:15:40] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:17:24] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[16:17:32] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[16:18:58] <ilmari> Altreus: RFC 3339 defines a more restricted profile of ISO 8601
[16:19:26] <TitanOfOld|work> And, DateTime 1.53 introduced rfc3339 as a method.
[16:21:29] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 252 seconds)
[16:25:06] *** Joins: WinterStar (~IceLight@user/icelight)
[16:26:26] <Altreus> It demands ±HH:MM but I'll survive
[16:26:57] <Altreus> It does mean adapting it for all the countless places that don't do that
[16:28:18] <LeoNerd> 3339 also accepts a simple Z
[16:28:37] <rindolf> Altreus: hi! how quickly does https://rt.cpan.org/ load for you?
[16:28:56] <Paperbot> Link title(s): [ Public Bug Tracker <https://rt.cpan.org/Public/> ]
[16:29:03] *** Joins: mattil (~mattil@airio.portalify.com)
[16:29:04] <Altreus> rindolf: more than acceptably fast
[16:29:08] <Altreus> but not for paperbot apparently
[16:29:22] <rindolf> Altreus: ah
[16:32:30] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[16:33:32] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 250 seconds)
[16:34:19] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 265 seconds)
[16:35:14] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 252 seconds)
[16:35:22] *** Joins: WinterStar (~IceLight@user/icelight)
[16:36:48] <rindolf> maybe it is a pre-holiday rush: https://en.wikipedia.org/wiki/Sukkot
[16:36:48] <Paperbot> Link title(s): [ Sukkot - Wikipedia ]
[16:37:53] *** Quits: jmcgnh (~jmcgnh@wikipedia/jmcgnh) (Ping timeout: 264 seconds)
[16:40:56] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 245 seconds)
[16:44:38] <jabberwok> clearly we need emojis in our timestamps
[16:46:03] <LeoNerd> \n{COMBINING DAYLIGHT SAVINGS}
[16:46:08] <LeoNerd> \N  also
[16:46:28] *** Joins: proller (~p@2a02:6b8:0:40c:237b:7116:c10:af9b)
[16:46:54] <Altreus> just because it's in Unicode doesn't make it an emoji :p
[16:48:20] <jabberwok> One more-or-less useful thing in ISO 8601 is durations; in cataloging historic documents at the Phoenix trolley museum I frequently come across things that are "About 1901" or "Sometime between 1893 [when electric trolleys began] and 1906 [when the building in background was demolished]" and '8601 handles that
[16:49:47] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 265 seconds)
[16:50:22] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[16:53:07] *** Joins: mattil (~mattil@airio.portalify.com)
[16:56:37] *** Joins: ztx (~ztx@user/ztx)
[16:57:56] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[16:59:13] *** Joins: Ovid_ (~Ovid@2a01:cb16:7a:d58e:3172:3b84:329e:7f08)
[16:59:43] <Altreus> hmm, it is useful to encode in data the fact that the value is approximate
[16:59:44] *** Quits: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[16:59:58] <Altreus> But I feel like durations is just two values
[17:00:17] <Altreus> Plus there's a lot here that's basically the "view" of the data
[17:00:38] <Altreus> I guess something has to know that this should be just the year, or the years
[17:01:02] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[17:02:43] <jabberwok> Time is rather Heisenbergian, the closer you look the fuzzier it gets
[17:06:45] *** Joins: krismatrix (~krismatri@38.80.149.51)
[17:07:24] *** Quits: aspic (~shifty~~~@ppp121-44-96-73.syd-gls-har-bras38.tpg.internode.on.net) (Ping timeout: 260 seconds)
[17:08:38] *** Joins: Ovid (~Ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[17:11:21] *** Quits: Ovid_ (~Ovid@2a01:cb16:7a:d58e:3172:3b84:329e:7f08) (Ping timeout: 245 seconds)
[17:20:13] *** Quits: gggpkm (~gggpkm@li2010-23.members.linode.com) (Ping timeout: 252 seconds)
[17:24:35] *** Quits: proller (~p@2a02:6b8:0:40c:237b:7116:c10:af9b) (Ping timeout: 265 seconds)
[17:29:43] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[17:29:59] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (Ping timeout: 250 seconds)
[17:35:03] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[17:37:05] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[17:37:50] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[17:41:01] *** Quits: WinterStar (~IceLight@user/icelight) (Ping timeout: 265 seconds)
[17:42:39] *** Joins: WinterStar (~IceLight@user/icelight)
[17:51:46] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (Ping timeout: 245 seconds)
[17:52:05] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[17:54:43] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[17:57:03] * GumbyPAN CPAN Upload: Nasm-X86-20210928 by PRBRENAN https://metacpan.org/release/PRBRENAN/Nasm-X86-20210928
[17:57:03] * GumbyPAN CPAN Upload: Unisyn-Parse-20210927 by PRBRENAN https://metacpan.org/release/PRBRENAN/Unisyn-Parse-20210927
[17:57:23] *** Joins: bmeneg (~bmeneg@2001:1284:f016:7ee9:637d:e1b2:ef01:a3c0)
[17:58:35] *** Joins: randir (~randir@95-25-59-33.broadband.corbina.ru)
[17:59:34] *** Joins: gryphn (~gryphn@156.146.48.210)
[18:04:29] *** Joins: mattil (~mattil@87-92-29-237.bb.dnainternet.fi)
[18:08:01] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[18:08:44] *** Quits: mattil (~mattil@87-92-29-237.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[18:12:05] * GumbyPAN CPAN Upload: Term-Choose-1.740 by KUERBIS https://metacpan.org/release/KUERBIS/Term-Choose-1.740
[18:14:58] <v`> https://twitter.com/jbtuason/status/1440377649658949635
[18:14:59] <Paperbot> J 🌿 (@jbtuason) 5d21h ago: was rereading the little prince last night and i forgot how good this part was at explaining NFTs
[18:18:25] *** Joins: krismatrix (~krismatri@38.80.149.51)
[18:20:42] *** Parts: art1 (~romeyke@p200300ccdf077f003d06710751f15b57.dip0.t-ipconnect.de) ()
[18:20:54] *** Joins: gast0n (~g4570n@user/gast0n)
[18:23:28] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[18:34:42] <LeoNerd> I need a name for a flag that would be on an infix operator, to say "I promise not to mutate any arguments, just look at them"
[18:35:09] <LeoNerd> I don't really want to call it CONST or READONLY or such, because... I don't care if the args themselves are mutable, it just that *I* won't be modifying them
[18:35:38] <LeoNerd> The presence of this flag permits certain optimisations that wouldn't otherwise be safe if the operator didn't promise not to mutate things
[18:36:12] <Altreus> passive?
[18:36:20] <ilmari> LeoNerd: pure? immutable?
[18:37:02] <genio> WONTMUTATE   NOCHANGE    NOTOUCHJUSTLOOK
[18:37:09] <Altreus> aloof :D
[18:37:11] <genio> heh. I like the last one
[18:37:16] <shaldannon> ++
[18:37:19] <LeoNerd> Hah.. An "aloof" operator
[18:37:56] <jabberwok> is the opposite of "aloof" ... "loof" ?
[18:38:12] <Altreus> the opposite is a fool
[18:38:57] <LeoNerd> It's slightly more than that. It's also about not letting an aliased copy of any of the args leak out into the return value.. e.g. as I accidentally did with zip/mesh first time
[18:39:25] <shaldannon> so, HERMETICALLY_SEALED ?
[18:39:27] <LeoNerd> NOMUTATE NOALIAS  is a bit long
[18:39:44] <LeoNerd> Hrm.. although I suppose I could have two flags
[18:40:14] <Altreus> discreet?
[18:40:31] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[18:40:38] <shaldannon> PROTECTED?
[18:40:41] <Altreus> safe?
[18:41:03] <shaldannon> NOTAINT?
[18:41:17] * genio stabs
[18:41:50] <genio> "safe" reminds me of the module Safe and makes me shudder. taint... ugh
[18:42:15] <LeoNerd> A key safe is where you keep your keys. A taint safe is,.. er...
[18:42:44] *** Joins: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de)
[18:42:50] <shaldannon> o/~ tainted love o/~
[18:43:50] <gordonfish> daamp daamp
[18:43:57] <Altreus> NOTAINT # YESTIS
[18:44:20] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 265 seconds)
[18:46:12] *** Joins: anthk_ (~anthk_@92.176.105.30)
[18:46:16] *** Joins: thrig (~thrig@65.113.153.50)
[18:47:09] * GumbyPAN CPAN Upload: Redis-OpenTracing-v0.2.0 by VANHOESEL https://metacpan.org/release/VANHOESEL/Redis-OpenTracing-v0.2.0
[18:49:57] <jaytee80> I think java would require you to take const args, and then you'd just cast to const while calling it.
[18:50:05] <jaytee80> But java is dumb
[18:50:30] <jaytee80> if my memory is even correct in the first place. 
[18:50:44] <jaytee80> I do remember that java is dumb quite clearly, though. No question about that.
[18:51:15] <thrig> "dumb" is less accurate than "kingdom of nouns"
[18:53:53] <jaytee80> it can be both
[18:55:03] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Remote host closed the connection)
[18:57:47] *** Joins: magla (~gelignite@55d4442a.access.ecotel.net)
[18:57:52] <shaldannon> Java is stupid in the "you have to reach your arm over your shoulder and down your back to scratch your butt" sort of way
[18:59:40] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:02:54] <gordonfish> shaldannon: Sounds like stretch armstrong in a robot chicken sketch
[19:02:56] <aquanight> LeoNerd: can you really promise such things in the face of tie/bless/overloads?
[19:04:06] *** Quits: seoul_man (~meh@097-080-088-148.res.spectrum.com) (Changing host)
[19:04:06] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[19:04:40] <aquanight> jaytee80: I didn't think java even had a const thing. C++ approach is that you could have your argument be 'const Thing &' and you're allowed to pass both modifiable and non-modifiable to it
[19:06:16] <choroba> java has final, right?
[19:06:47] <choroba> it's almost like const, except for the cases where it isn't
[19:09:42] <choroba> https://www.javamex.com/java_equivalents/const_java.shtml
[19:09:42] <Paperbot> Link title(s): [ The Java equivalent of 'const': Java code ]
[19:11:28] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:11:33] *** Joins: YaoNai (~YaoNai@user/yaonai)
[19:11:57] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[19:15:07] <gordonfish> class The { final int countDown = 10; }
[19:16:43] <thrig> if it's the final countdown then why does it keep repeating
[19:17:07] <LeoNerd> I've asked that about the Final Fantasy game series
[19:17:16] <LeoNerd> What are we up to now, 17?
[19:17:51] <thrig> slaughter not the cash cow
[19:21:33] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Remote host closed the connection)
[19:22:12] * GumbyPAN CPAN Upload: Net-Silverpeak-Orchestrator-0.002000 by ABRAXXA https://metacpan.org/release/ABRAXXA/Net-Silverpeak-Orchestrator-0.002000
[19:22:27] *** Joins: rindolf (~shlomif@87.68.240.138.adsl.012.net.il)
[19:28:59] *** Joins: diskin (~diskin@46.41.124.220)
[19:29:08] *** Joins: touraine (~igloo@109.131.229.44)
[19:32:24] *** Quits: touraine (~igloo@109.131.229.44) (Remote host closed the connection)
[19:33:51] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Ping timeout: 245 seconds)
[19:34:58] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[19:37:07] *** Quits: krismatrix (~krismatri@38.80.149.51) (Remote host closed the connection)
[19:37:30] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:44:55] *** Joins: sasho (~sasho@80.72.92.226.coresnet.bg)
[19:45:29] *** Joins: diskin_ (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[19:45:29] *** Quits: diskin (~diskin@46.41.124.220) (Killed (erbium.libera.chat (Nickname regained by services)))
[19:45:29] *** diskin_ is now known as diskin
[19:56:16] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[19:56:34] *** Joins: tejr (~tejr@user/tejr)
[19:57:57] *** Quits: Maff (maff@user/maff) (Quit: dubsteppin' my ass outta here.)
[19:58:19] *** Joins: Maff (maff@user/maff)
[20:06:14] *** Joins: Pali (~pali@user/pali)
[20:09:24] *** Quits: krismatrix (~krismatri@38.80.149.51) (Ping timeout: 265 seconds)
[20:12:59] <v`> https://twitter.com/IanColdwater/status/1442165398799929349
[20:13:00] <Paperbot> Ian Coldwater 📦💥 (@IanColdwater) 1d10m ago in reply to @SwiftOnSecurity #1442164814705401866: This is the most depressing thing I've ever seen  https://www.fisher-price.com/en-us/product/my-home-office-gmn43 https://t.co/Jcn
[20:13:02] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[20:14:30] *** Quits: tobybl_ (~tobybl@31.111.35.255) (Remote host closed the connection)
[20:14:31] *** choroba is now known as choroba_
[20:15:23] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[20:15:54] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[20:16:31] *** Quits: bmeneg (~bmeneg@2001:1284:f016:7ee9:637d:e1b2:ef01:a3c0) (Remote host closed the connection)
[20:19:23] <sasho> Hello - sorry to bother again with my regexes but does anyone knows a way to store/load a compiled regex to a file in perl since every-time I want to test changes I need to wait about 2 mins to compile
[20:20:16] <Altreus> what the hell are you doing with regexes that takes 2 minutes to compile
[20:20:25] <rewt> that doesn't sound right
[20:20:44] <Altreus> I would suggest that it is not the regex that is the issue
[20:20:52] <rewt> sasho, are you using perl?
[20:21:02] <rewt> or pcre in another language?
[20:21:12] <sasho> rewt: Indeed - I'm using perl
[20:21:17] <sasho> not pcre2
[20:21:33] <sasho> pcre2 compile my regex faster but it's not so accurate
[20:22:18] <rewt> what's your regex?  it shouldn't take 2 minutes to "compile" any regex
[20:22:35] <sasho> rewt: My regex matches the C programming language
[20:23:10] <huf> then it definitely shouldnt take that long 
[20:23:19] <rewt> using a single regex to parse all of C syntax?
[20:23:24] <huf> the regexes that match perl are way faster
[20:23:24] <Altreus> That doesn't even sound plausible
[20:23:44] <rewt> maybe use something like https://metacpan.org/pod/Parser::MGC
[20:23:44] <Paperbot> Link title(s): [ Parser::MGC - build simple recursive-descent parsers - metacpan.org ]
[20:24:08] <sasho> I can actually paste it here on pastebin if you are curios - but yeah it takes 2 mins and parser the all of C syntax
[20:24:14] <alh> Yes
[20:24:42] <LeoNerd> A regexp is not a parser
[20:24:51] <LeoNerd> A regexp primarily answers a yes/no question... Does this input string match this patternm?
[20:25:01] <LeoNerd> It isn't good for anything much more complicated than that
[20:25:03] <rewt> when you said "compile the regex", did you mean "parse some C code with the regex"?
[20:25:14] <LeoNerd> It *especially* is not good for recursively cutting up a string into an entire AST of pieces
[20:25:17] <huf> LeoNerd: what's PPR then?
[20:25:18] <LeoNerd> For that you want a parser
[20:25:23] <LeoNerd> huf: A FUCKING STUPID IDEA
[20:25:30] <alh> Regexp::Grammars :D
[20:25:32] <huf> it's still a parser 
[20:25:52] <huf> ONLY A FLESH WOUND
[20:27:38] <Altreus> a PPR cut, if you will
[20:28:14] * LeoNerd shows Altreus the door
[20:28:26] <huf> haha, peepee
[20:29:03] <LeoNerd> Ugh... after that three-hour distraction I'm back again trying to think of a name for this flag
[20:29:16] <Altreus> nice door
[20:29:30] <thrig> --sidequest
[20:29:32] <huf> LeoNerd: the union jack not good enough for you, eh
[20:29:38] <Altreus> So anyway, can anyone explain any reason why this line might be calling the stringification overload? https://github.com/Perl5/DBIx-Class/blob/maint/0.0828xx/lib/DBIx/Class/Row.pm#L1544
[20:29:39] <Paperbot> Link title(s): [ DBIx-Class/Row.pm at maint/0.0828xx · Perl5/DBIx-Class · GitHub ]
[20:29:46] <Altreus> on $self
[20:29:55] <Altreus> I am thoroughly perplexed
[20:30:32] <Altreus> This is the line Carp::cluck reports, not a line in get_from_storage or anything
[20:31:04] <Altreus> I can't see a single rational reason Perl is calling this operator
[20:31:04] *** Joins: krismatrix (~krismatri@38.80.149.51)
[20:31:08] <alh> And you're 100% sure the line number in the error matches up with that line on disk? 
[20:31:39] <Altreus> yes, I asked vim to open it directly
[20:31:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[20:31:50] <Altreus> I have an older version of dbic but this method is identical
[20:33:09] <Altreus> I'm fairly sure we have no source code filters, but I can't run it in debug mode to find out
[20:33:36] <Altreus> (Because Params::Validate is broken under perl -d)
[20:33:38] <rindolf> Altreus: https://rt.cpan.org/Dist/Display.html?Name=HTML-T5 loads quickly here now; thanks
[20:33:39] <Paperbot> Link title(s): [ Active bugs for HTML-T5 <https://rt.cpan.org/Public/Dist/Display.html?Name=HTML-T5> ]
[20:33:47] <Altreus> rindolf: I didn't do it :)
[20:34:21] <sasho> Here is the 2mins regex: https://l.perl.bot/p/s1cvmz
[20:34:22] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[20:35:07] <Altreus> sasho: don't do that, it'll take forever to compile
[20:35:23] <Altreus> and it probably won't be very performant when it does
[20:35:30] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:35:37] <huf> that's also doing a match tho
[20:35:39] <alh> Altreus: Can you reproduce quickly/easily? perl -d:Trace output could show something maybe
[20:35:54] <huf> but it's still absurdly slow
[20:35:57] <Altreus> alh: hmm, didn't try that, hold on
[20:36:19] <alh> It'll be very verbose
[20:36:32] <Altreus> holy shit I didn't even scroll that regex
[20:36:50] <huf> it's also buggy
[20:36:53] <Altreus> This is incomprehensible
[20:36:54] <huf> doesnt compile with strict
[20:36:55] <sasho> It's automatically generated though
[20:37:06] <sasho> I have source files
[20:37:11] <sasho> for the regex
[20:37:26] <Altreus> oh huf says it doesn't compile at all so 2 minutes is not an issue
[20:37:40] <sasho> and yeah my perl is what I'm trying to fix
[20:37:43] <huf> it does something without strict
[20:37:45] <huf> but who knows what
[20:37:49] <Altreus> alh: oh right, probably should pipe the output then
[20:38:05] <Altreus> sasho: use Parser::MGC; and then write a parser
[20:38:08] <huf> yeah
[20:38:17] <Altreus> there might even be one
[20:38:24] <Altreus> besides gcc I suppose
[20:38:55] <genio> Perlfoundation.org still mentions perl 6
[20:40:29] <LeoNerd> In fact, Parser::MGC even comes with a small example script of a tiny bit of C, and a few various hints in the docs to how to glue it together into a C parser...
[20:40:38] <LeoNerd> So that's probably about the easiest thing to do :)
[20:42:13] <sasho> you can make it strict if you wish - just comment out the data dumper
[20:42:32] <huf> that wont fix the scope variable problems
[20:43:39] <choroba> for me, it dies after 41 seconds, even without strict
[20:43:51] *** Joins: semeion (~semeion@user/semeion)
[20:44:07] <sasho> well I got an i3
[20:47:06] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 265 seconds)
[20:50:10] <ilmari> a wm, bmw, aws, or intel?
[20:50:35] <sasho> intel 
[20:51:04] <sasho> now ask me the model number
[21:02:15] *** Joins: mattil (~mattil@87-92-29-237.bb.dnainternet.fi)
[21:05:17] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[21:05:43] *** Joins: EGD (~egd@user/egd)
[21:06:21] *** Quits: mattil (~mattil@87-92-29-237.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[21:07:23] *** Joins: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff)
[21:11:52] <alh> Altreus: Any luck?
[21:17:41] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[21:18:20] *** Quits: furrymcgee (~devuan@cgn-89-1-211-204.nc.de) (Remote host closed the connection)
[21:18:27] *** Joins: semeion (~semeion@user/semeion)
[21:26:24] *** Joins: horsepatat (~horsepata@212.3.197.67)
[21:29:01] *** Joins: proller (~p@2a02:6b8:0:40c:eabe:e0b1:4f17:1603)
[21:30:18] *** Quits: horsepatat (~horsepata@212.3.197.67) (Read error: Connection reset by peer)
[21:32:04] *** Quits: jaytee80 (~jaytee80@fw.bmd.cpii.com) (Quit: Client closed)
[21:32:47] <gordonfish> Re: <Altreus> So anyway, can anyone explain any reason why this line might be calling the stringification overload? https://github.com/Perl5/DBIx-Class/blob/maint/0.0828xx/lib/DBIx/Class/Row.pm#L1544
[21:32:49] <Paperbot> Link title(s): [ DBIx-Class/Row.pm at maint/0.0828xx · Perl5/DBIx-Class · GitHub ]
[21:33:18] <gordonfish> What are you seeing exactly?
[21:34:19] <gordonfish> Looking at sub get_from_storage {...}, the return value is the result of $resultset->find(...), maybe that is contributing?
[21:34:55] <gordonfish> It would help to know what you are seeing and what was expected.
[21:39:33] <gordonfish> Depending on what is getting stringified, it could be happening sooner than that. It's kind of hard to say without some sample input and output got/expected comparison.
[21:40:30] <gordonfish> I haven't used DBIx::Class so I am getting up to speed on it
[21:41:17] *** Joins: YaoNai (~YaoNai@user/yaonai)
[21:42:48] <gordonfish> If you are printing it, that would tend to invoke stringification overloads.
[21:43:00] <LeoNerd> I for one welcome our new stringification overlords
[21:43:35] <gordonfish> LeoNerd: Damn you, made me think I mistyped it ;po
[21:44:01] <gordonfish> s/o$//
[21:45:06] *** Quits: proller (~p@2a02:6b8:0:40c:eabe:e0b1:4f17:1603) (Ping timeout: 245 seconds)
[21:45:51] <LeoNerd> Ahhh.. A typo in a comment about typos
[21:45:53] <LeoNerd> My work here is done
[21:46:44] <gordonfish> h'od
[21:48:25] *** Quits: peder (4822@nidur.ifi.uio.no) (Ping timeout: 260 seconds)
[21:51:54] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.2.1)
[21:53:53] <rindolf> gordonfish: what is "h'od"?
[21:54:30] *** Quits: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no) (Quit: Leaving)
[21:54:52] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[21:55:12] *** Joins: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no)
[21:55:27] <gordonfish> rindolf: An intentional error
[21:55:46] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 252 seconds)
[21:55:52] <thrig> or an alien spieces that will manage to kill at least one red shirt
[21:57:11] *** Quits: jdltouraine_ (~jdltourai@2a02:a03f:847b:b800:b163:93c1:699b:16ff) (Ping timeout: 245 seconds)
[21:57:58] <rindolf> valid spelling: https://en.wiktionary.org/wiki/spicy
[21:57:59] <Paperbot> Link title(s): [ spicy - Wiktionary ]
[21:59:06] *** Quits: sasho (~sasho@80.72.92.226.coresnet.bg) (Remote host closed the connection)
[21:59:27] *** Joins: sasho (~sasho@80.72.92.226.coresnet.bg)
[22:00:06] <genio> "can you give me a full request/response dump?"   ... "here's the error message yet again"  ugh. *sigh*  I guess I'm supposed to magically help people
[22:01:45] <LeoNerd> Hey genio my code doesn't work. Fix it pls?
[22:02:28] <TitanOfOld|work> genio: Oh, I didn't know you could magically fix things. I have some report scripts that need to be better.
[22:02:59] <gordonfish> Also this TPS report
[22:04:50] <genio> LeoNerd: heh. you're not far off at all.  "This worked last week but something changed today and it's not working. I haven't made any changes that should bother that process. It gets to the second auth step and tells me it's a bad request."   ... "OK, can you send a full dump of the request and response? I'm not seeing any logs available to us from that service, but if there's something not quite right with a header or whatnot it can be 
[22:04:50] <genio> problematic"   ... responds with a screenshot of the error message
[22:05:15] <LeoNerd> Ahyes, sounds like someone not understanding your request
[22:05:17] <genio> I then ask yet again for the full request and response. replies again with a new screenshot of the same thing
[22:05:18] <LeoNerd> Your request-request
[22:06:01] <genio> Senior Software Engineer for web based software.
[22:06:01] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[22:06:39] <thrig> "what's your workflow for this process?" -> screenshot of WS_FTP
[22:06:51] *** Quits: rindolf (~shlomif@87.68.240.138.adsl.012.net.il) (Ping timeout: 265 seconds)
[22:07:15] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[22:07:54] * gordonfish has been in that same sort of situation several times and knows that pain well
[22:08:29] <revhippie> genio: do the new screenshots at least have different filters, like sepia, or maybe a funky angle?
[22:09:13] <genio> No such luck. Though I guess I shouldn't complain about the screenshot of text given that they didn't put it in a word doc and zip that and send it to me
[22:09:37] <thrig> or the "I can't download the file!" support requests and eventually you get to their desktop where there is file.zip file (1).zip file (2).zip file (3).zip ...
[22:09:39] <revhippie> a pdf of a print of a cellphone pic
[22:09:57] <gordonfish> genio: Once has someone send me a PDF with a mspaint screenshot
[22:10:13] <genio> all the facepalms. 
[22:11:23] <gryphn> PDF containing a screenshot of a PowerPoint slide that contained a screenshot of a web site containing a screenshot of a page of a PDF. True story.
[22:13:53] <gordonfish> printed and photo taken on a wooden table
[22:14:42] *** Joins: peder (4822@nidur.ifi.uio.no)
[22:15:41] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 264 seconds)
[22:17:56] <mst> haarg: also, a day late and a dollar short, but you're not wrong at all about tr I don't think, it's just I basically never think to use tr to this day so it didn't occur to me at the time
[22:19:01] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[22:21:24] <thrig> y/// not?
[22:21:26] *** Joins: Moonlight (~Moonlight@64.253.17.182)
[22:22:13] <mst> thrig: trout.me.uk/noxface.jpg
[22:22:51] *** Joins: jaytee80 (~jaytee80@fw.bmd.cpii.com)
[22:23:58] <haarg> I so rarely have use for tr for its intended function that it's easy to forget the counting function
[22:27:15] <choroba> based on how often I've used it for either function it should be named count///
[22:27:50] <thrig> c is used for something else in ed, though
[22:29:04] *** Quits: jabberwok (~wlindley@75.105.20.104) (Remote host closed the connection)
[22:29:22] <thrig> one could claim that most vim users are ex ed users
[22:29:52] *** Quits: Su-Shee (~Susanne@p50894cf4.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:31:11] <EvanCarroll> IT IS I, EVAN THE GREAT
[22:31:20] *** Joins: Su-Shee (~Susanne@p4ffc7513.dip0.t-ipconnect.de)
[22:31:39] <tirnanog> your internets are forfeit.
[22:31:47] <EvanCarroll> LeoNerd: in your patch on Perl bools, how will that work in practice.
[22:31:55] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[22:32:01] <EvanCarroll> I can kind of see a practical outcome I just want to be sure I wrapped my head around it.
[22:33:13] <EvanCarroll> We'll put a variable in a sepcific boolean mode using some really weird syntax like !!0 or !!1, and then we'll be able to write libraries around an API provided by Scalar::Util which will tell us if the scalar is a boolean or number?
[22:33:45] <EvanCarroll> And so long as you only assign to booleans, or negate them you'll be able to tell it's still a boolean.
[22:33:49] <ilmari> EvanCarroll: the values returned by all the built-in boolean operators retain their booleanness across copying and assignment
[22:34:11] <xenu> yeah, !!0 and !!1 always have been real boolean, but the problem was their booleanity was lost when you assigned them to a variable
[22:34:36] <mst> my \$foo = \!!0;
[22:34:45] <ilmari> that's aliasing, not assignment
[22:35:00] <mst> yes, and it's also cursed because I was shitposting
[22:35:05] <EvanCarroll> Right, but now if you have a variable and it's SV_IsBool or whatever and you assign to a 0 or a 1, you're not going to know the internal state has changed and that you meant to do !!0 or !!1, or will there be a warning for that?
[22:35:40] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[22:35:49] <ilmari> no, just like there's no warning if you assign a string to a variable that used to hold a number
[22:36:16] <EvanCarroll> But I know that the operater determines the variable's context in Perl.
[22:36:33] <ilmari> in normal perl usage none of this really matters, it only matters when serialising to formats that do care
[22:36:34] <EvanCarroll> There isn't "boolean" operators, there is an internal boolean type that we're exposing to the API.
[22:37:04] <xenu> well, ! is a boolean operator
[22:37:41] <EvanCarroll> ilmari: granted, that's why I want to understand how that works. It makes more sense from my perspective to issue a warning. Because typically "don't worry about how it's stored" is true, and now that we're worried about how it's stored as a my $foo = 0; and my $foo = !!0; may behave differently it's going to be werid and confusing to have to learn about that in runtime without warnings.
[22:37:49] <xenu> it's true there's no boolean equality, but who cares
[22:38:29] <ilmari> EvanCarroll: they don't behave any differently in any perl-visibile way (other than Scalar::Util::isbool())
[22:38:46] <ilmari> they still numify to 0/1 and stringify to '1'/'' just like before
[22:38:49] <EvanCarroll> ilmari: and every serialization library that will make use of it.
[22:38:52] <thrig> no true boolean would be caught in scotland
[22:39:10] <ilmari> EvanCarroll: if the serialisation format has booleans, they may want to do that
[22:39:17] <EvanCarroll> that would be insane.
[22:39:44] <xenu> what? it's DWIM, !!0 is obviously a boolean
[22:39:44] <EvanCarroll> Why would you want to allow people to change the type of a variable from a bool to a number.
[22:39:54] <ilmari> but that's no different from having to do 0+$foo or "$foo" to make sure things are serialised as numbers or strings
[22:39:55] <EvanCarroll> xenu: that's not the question.
[22:40:36] <ilmari> EvanCarroll: would you disallow += on a variable that happens to contain a string (that looks like a number)?
[22:41:48] <ilmari> currently to serialise to booleans you need to do insane things like \1 or bless to some magic class specific to that serialiser
[22:42:46] <ilmari> the great advantage of stable core bools is that they behave right both in perl and externally
[22:42:58] <xenu> the most interesting thing about bools, btw, is that it's a clever hack, there's no bool type. basically a new type of cow was introduced and now all "booleans" point to the same string buffer
[22:43:02] <xenu> and that's how XS code is able to tell that's a variable is boolean
[22:43:08] <aquanight> if you're worried about $x = !!0; and then later $x "accidentally" becomes a number this is nothing new to perl
[22:43:14] <EvanCarroll> would I, yes! =) but that's also not the same because += operates on a string or a number regardless of the internal state: $foo = '7'; $foo = 7; the user should not be concered how the 7 is stored. The boolean functionality breaks that expectation, it makes the user concerned about the internal perl representation because libraries *will* act differently.
[22:43:21] <aquanight> you've already had to make that decision when you dealt with string vs. number to begin with
[22:43:38] <ilmari> EvanCarroll: libraries already act differently on $foo = 7 and $foo = '7'
[22:43:56] <mst> thrig: are you also getting shimmering flashbacks?
[22:44:14] <aquanight> only libraries that have had to geniuinely care what "type" a given value is will have this problem
[22:44:16] <EvanCarroll> ilmari: in what sense?
[22:44:17] <ilmari> sweval: use JSON::MaybeXS; my $foo = 42; my $bar = "42"; encode_json([$foo, $bar])
[22:44:19] <perlbot> ilmari: [42,"42"]
[22:44:24] <aquanight> and they've already had to guard against stringification of a number, or numification of a string
[22:44:56] <aquanight> sweval: use JSON::MaybeXS; my $foo = "42"; my $bar = 0+$foo; encode_json([$foo, $bar]);
[22:44:57] <perlbot> aquanight: [42,42]
[22:45:07] <EvanCarroll> this langauge is insane.
[22:45:10] <aquanight> sweval: use JSON::MaybeXS; my $foo = 42; my $bar = "$foo"; encode_json([$foo, $bar]);
[22:45:11] <perlbot> aquanight: [42,"42"]
[22:45:16] <xenu> btw Cpanel::JSON::XS and JSON::XS use different heuristics to tell a string from a number
[22:45:25] <ilmari> EvanCarroll: you must be new here
[22:45:25] <EvanCarroll> xenu: charming, I know.
[22:45:27] <mst> EvanCarroll: I mean ... yes?
[22:45:43] <ilmari> EvanCarroll: we are trying to make it less so
[22:45:48] <EvanCarroll> xenu: Even better, at Cpanl we don't use Cpanel::JSON::XS
[22:45:56] <EvanCarroll> spoiler alert!
[22:46:15] <aquanight> this is not like COM/OLE VARIANT which only has one type at a time. it's always been possible for a string to be "dual-typed" internally.
[22:46:24] <xenu> that module name is unfortunate but all the good ones are already taken
[22:46:34] <aquanight> for a value* to be "dual-typed"
[22:46:51] <thrig> JSON::And::The::Argonauts is available
[22:46:57] <xenu> JSON? taken. JSON::XS? taken JSON::Parser? not available either
[22:47:05] <aquanight> hell go play with Scalar::Util::dualvar or whatever it's called and you can have a variable whose string and number values are different (hint: shit like this is how $! works)
[22:47:12] <mst> aquanight: right, "one type at a time" is Tcl :)
[22:47:24] <xenu> mst: only if you pretend that arrays don't exist
[22:47:28] <xenu> :P
[22:47:36] <EvanCarroll> Rust needs to hurry up and take over the world.
[22:47:36] <aquanight> mst: eh... no. Tcl just only has one type.
[22:47:41] <EvanCarroll> END THIS MADNESS
[22:47:46] <mst> aquanight: not true.
[22:47:58] <haarg> perl decided that types don't exist
[22:47:59] <aquanight> mst: {everything is [string]}
[22:48:07] <mst> aquanight: no.
[22:48:07] <haarg> History has proven it wrong
[22:48:10] <thrig> TCL moved away from everythingstring a while ago
[22:48:25] <mst> any tcl value has a *canonical* string representation but internally the Tcl_Object has a type, which is the type that the value was last used as
[22:48:29] <haarg> types exist even if you don't want them to
[22:48:31] <v`> https://markets.businessinsider.com/news/currencies/hamster-trading-cryptocurrencies-rigged-cage-goxx-bitcoin-price-ether-doge-2021-9
[22:48:31] <Paperbot> Link title(s): [ A hamster has been trading cryptocurrencies in a cage rigged to automatically buy and sell tokens... ]
[22:48:33] <mst> the changing of said type is called shimmering
[22:48:35] <aquanight> to be fair I've not done anything with TCL in forever times 1.2
[22:48:36] <mst> hence my mentioning it before
[22:48:50] <xenu> any tcl value other than array*
[22:48:53] <v`> "and it's currently outperforming the S&P 500"
[22:48:57] <thrig> itym [expr {$forever * 1.2}]
[22:49:14] <haarg> the new trackable bools are the first step towards recognizing types in core
[22:49:21] <aquanight> I think the last I ever did anything serious with tcl was messing with eggdrop
[22:49:28] <aquanight> like at least a decade ago
[22:49:34] <xenu> haarg: i don't see it that way, an actual type system should be completely separate from that
[22:49:35] <mst> xenu: arrays are weird but we were only talking about perl scalars here, not arrays or hashes, so not relevant
[22:49:39] <haarg> it will most likely be followed by the ability to distinguish strings from numbers
[22:49:54] <mst> in fact, I have seen people use the type of the Tcl_Object for e.g. JSON serialisation and it has basically all the same problems our heuristics do
[22:50:02] <haarg> xenu: there are many types of type systems
[22:50:07] <ilmari> haarg: didn't nick propose a chane to the behaviour of the flags to fix that?
[22:50:34] <haarg> perl is heading towards having value types, or something approximating that
[22:50:34] <mst> Everything Is A Scalar
[22:50:42] <xenu> i sort of agree with EvanCarroll that variables having hidden properties suck. that is why i'm opposed to that "preserve the original flag" proposal
[22:51:00] <haarg> ilmari: roughly, yes
[22:51:13] <xenu> the only reason why i'm not opposed to bools is because 1) it was already a thing but more hidden 2) it solves a historically important problem
[22:51:20] <mst> agreeing with Evan is dangerous and may result in phone calls from Jeff Atwood
[22:51:27] <ilmari> haarg: at least the first step torwards it
[22:51:37] <haarg> well, second
[22:51:40] <xenu> i really don't see what that flag proposal solves
[22:51:43] <mst> xenu: perl has always been about pragmatism over purity
[22:51:48] <haarg> since bools already were merged
[22:51:52] <xenu> it just trades one insanity for another
[22:52:07] <ilmari> sweval: use JSON::MaybeXS; my $foo = "42"; my $bar = 0+$foo; encode_json([$foo, $bar]);
[22:52:09] <perlbot> ilmari: [42,42]
[22:52:10] <ilmari> xenu: it fixes that ^^
[22:52:11] *** Quits: Moonlight (~Moonlight@64.253.17.182) (Ping timeout: 245 seconds)
[22:52:12] <haarg> the insanity it tries to mitigate already exists
[22:52:15] <choroba> which is easy with insanitycoin(TM)
[22:52:18] <mst> xenu: the story of our lives
[22:52:24] <haarg> the types are already there
[22:52:27] <aquanight> you know what else fixes that
[22:52:29] <ilmari> xenu: merely _using_ a value as a number changes its visible "type"
[22:52:38] <aquanight> maybe don't encode your variables directly if you care what type they encode as
[22:52:41] <haarg> the attempts to hide them failed
[22:52:59] <xenu> ilmari: and instead we will have a new hidden *immutable* type
[22:53:02] <xenu> which is even worse
[22:53:10] <ilmari> xenu: no, += 0 will still make it a number
[22:53:21] <xenu> because it makes a new value, at least conceptually
[22:53:22] <haarg> it is only as immutable as any variable is
[22:53:26] <EvanCarroll> xenu: to be absolutely clear, that's not my position. I'm actually saying preserving the original property makes sense, so do the hidden flags, but then violations of the original property and changing the type should result in a runtime warning. Because otherwise users will accidently change types or libraries will change types and they likely won't have the skill to even trouble shoot the issue.
[22:53:56] <EvanCarroll> For example, the moment anyone tells a new user to trouble shoot booleans with Devel::Peek this language will be 20 times less approachable then it's ever been.
[22:54:09] <EvanCarroll> That's the worst world possible.
[22:54:12] <mst> but that's already what you have to do
[22:54:20] <mst> this is still a net improvement
[22:54:21] <haarg> adding a warning is a compatibility break too large
[22:54:26] <EvanCarroll> Track a value through mutation across your code base, and see when it changed internal state.
[22:54:27] <ilmari> xenu: also, it's not a new type, it's just better distinguishing about which of the internal value slots are valid, and which was last assigned to
[22:54:46] <mst> EvanCarroll: ech, just cast Variable::Magic on it if you want that
[22:55:03] <EvanCarroll> Well I've never had to track a vale to see when it's changed internal state. I'm not saying that's it's never been neccessary but i've never had to do it. The boolean thing makes it seem like it'll be a basic-user skill.
[22:55:13] <haarg> all perl programs would become 90% warnings, 10% useful functionality
[22:55:14] <EvanCarroll> variable*
[22:55:44] <ilmari> EvanCarroll: it's no different than the current string vs number problem, only less so, because we haven't fixed the 0+$string problem yet
[22:56:03] <mst> haarg: admittedly, 90% of perl code in the wild probably deserves that
[22:56:06] <EvanCarroll> haarg: how many programs even use true bools and not numbers, and how many of them change types?
[22:56:14] <ilmari> this makes it _easier_ to round-trip values from serialisation formats that do distinguish
[22:56:22] <xenu> i guess maybe i was doing too much XS, it's true than in practice pretty much every perl operation creates a new value
[22:56:37] <haarg> how many programs use numbers and strings interchangeably?
[22:56:41] <EvanCarroll> ilmari: You make a storng argument there. I've just never had that problem. I suppose I just coerce the numbers inside the serialization format in the last step rather than rely on them being numbers to begin with.
[22:56:44] <haarg> all of them
[22:56:49] <aquanight> ok I must be missing something. Because I've just figured bool would just be another S_BVOK flag or something indicating the value has a valid boolean state?
[22:57:05] <ilmari> EvanCarroll: if you are serialising to a known schema with known types, you can do that, yes
[22:57:06] <haarg> we don't have space for more flags
[22:57:19] <haarg> so bool didn't use a flag, it used a hack
[22:57:37] <xenu> i still much rather would have explicit types, but at that point it's pretty much the same as asking for a new language
[22:57:38] <aquanight> known SVs?
[22:57:53] <aquanight> I think we've had SV_yes/SV_no forever
[22:58:02] <ilmari> known PVs (and a new combination of existing flags)
[22:58:05] *** Quits: jbarton (~tmtowtdi@pool-108-48-30-133.washdc.fios.verizon.net) (Quit: Leaving)
[22:58:10] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[22:58:19] <ilmari> yes, but the problem is that assigning creates a new SV, which loses the identity
[22:58:37] <haarg> the pointer to the string buffer is used to identify the bools
[22:58:40] <xenu> aquanight: it's called "static cow", SVs can now share string buffers that point to C string literals
[22:58:49] <xenu> C string literals live forever
[22:59:02] <aquanight> right I know about that
[22:59:02] <haarg> this is very much a hack
[22:59:11] <haarg> but who cares
[22:59:19] <aquanight> but why would creating a new SV lose the identity if it can still have the same PV?
[22:59:25] <LeoNerd> Oh absolutely it's a hack. :) It's all internal implementation details though
[22:59:42] <LeoNerd> If someone makes a better way to track bools so it doesn't need static cows, that might be good. Though static cows are useful -anyway- for other reasons
[22:59:50] <aquanight> I'd imagine you only lose the identity once numification/stringification happens but I think that happens with bools before anyway
[22:59:53] <haarg> the new sv can carry the bool identity
[22:59:59] <LeoNerd> aquanight: I couldn't add a new SV flag because there's no space
[23:00:05] <haarg> that's what the new cow form does
[23:00:05] <xenu> LeoNerd: speaking of static cow, LeoNerd have you looked into making newSVpvs or whatever it's called, the one that takes a literal, to make use of the new cow?
[23:00:06] <LeoNerd> SV flags are *reeeeeeally* rare expensive
[23:00:16] <aquanight> wait
[23:00:20] <LeoNerd> xenu: Oddly, leont was looking at that very thing at the same time as me for unrelated reasons
[23:00:38] <aquanight> LeoNerd: as in we're literally out of bits?
[23:00:38] <LeoNerd> There are a *few* annoying parts of perl core that call newSVpvs with a static value and expect a mutable buffer afterwards :/
[23:00:42] <LeoNerd> They're kinda buggy
[23:00:54] <LeoNerd> aquanight: Yes. All 32 bits are assigned for some purpose or other
[23:00:54] <thrig> sheep are more static than cows ever would be
[23:00:57] <LeoNerd> Every single one
[23:01:05] <aquanight> damn
[23:01:18] <LeoNerd> I am 99% convinced that *some* purposes overlap, but I haven't looked into much detail yet
[23:01:22] <LeoNerd> It *may* be possible to recover a bit
[23:01:28] <leont> Making newSVpvs us it is trivial, but it will break a bunch of code that doesn't SV_CHECK_THINKFIRST before poking into SvPVX
[23:01:34] <LeoNerd> ^-- that
[23:01:34] <leont> *use
[23:02:17] <leont> One of them is in the parser, you aren't even getting to a working miniperl without fixing that first
[23:03:15] <aquanight> LeoNerd: #define SVp_SCREAM      0x00008000  /* currently unused on plain scalars */
[23:03:20] <LeoNerd> Sure
[23:03:26] <aquanight> I just thought it was funny
[23:03:31] <LeoNerd> There are many bits that are only used by *some* SV types but not others
[23:03:36] <LeoNerd> Which is why I think they can be compressed
[23:03:54] <LeoNerd> But yes, SCREAM is a funny name
[23:04:14] <aquanight> I feel like "realbool" could be NOK + !ROK + SCREAM or something like that
[23:04:22] *** Quits: fuzzix (~fuzzix@46.7.53.110) (Ping timeout: 268 seconds)
[23:04:51] *** Quits: sasho (~sasho@80.72.92.226.coresnet.bg) (Quit: Leaving)
[23:05:11] <aquanight> but hmm
[23:05:20] <aquanight> wait then
[23:05:26] <aquanight> what is in SvFLAGS at 0x000000FF
[23:05:35] <aquanight> I'm not seeing any SVf with those bits
[23:05:43] <aquanight> oh
[23:05:46] <aquanight> SvTYPE
[23:05:59] <aquanight> it was right bloody there
[23:06:30] <aquanight> but for some reason whatever waffle wrote that definition decided to define it in terms of (sv)->sv_flags so me looking for SvFLAGS wasn't finding it
[23:06:50] <xenu> hopefully one day computers that can handle 64-bit values will be invented
[23:07:19] <aquanight> wait
[23:07:31] <aquanight> LeoNerd: we're nowhere near saturation of SvTYPE
[23:07:33] <LeoNerd> Making the SV head bigger will eat a /lot/ more memory
[23:07:42] <xenu> just buy more ram
[23:07:47] <LeoNerd> aquanight: right but that's not really doable here
[23:08:01] <LeoNerd> xenu: but people like Reini might complain :P
[23:08:08] <aquanight> LeoNerd: eh?
[23:08:42] <haarg> aquanight: almost nothing can be made conditional on ROK
[23:09:18] *** Joins: fuzzix (~fuzzix@46.7.53.110)
[23:09:45] <haarg> overloading, magic, and the way macros chain together mostly makes it impossible
[23:10:08] *** Joins: aspic (~shifty~~~@ppp121-44-114-56.syd-gls-har-bras39.tpg.internode.on.net)
[23:11:12] <aquanight> LeoNerd: why is SvTYPE not doable?
[23:11:41] <LeoNerd> relying on SvTYPE to convey this information
[23:11:54] <LeoNerd> See my discussion with nwclarke before
[23:12:52] *** Joins: miojo (~mns@191.253.157.192)
[23:12:53] <LeoNerd> (p5p@)
[23:18:46] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[23:19:50] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 265 seconds)
[23:20:15] <mst> LeoNerd: good. him whining always cheers me up.
[23:24:54] <vanfanel64> Has anyone else been receiving random invites for a #bnc4you channel? I keep getting them
[23:25:11] <vanfanel64> In private messages
[23:25:19] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[23:26:59] *** Joins: diskin (~diskin@46.41.124.220)
[23:27:14] *** Joins: bmeneg (~bmeneg@2001:1284:f016:7ee9:637d:e1b2:ef01:a3c0)
[23:27:52] <LeoNerd> vanfanel64: yes
[23:32:23] <vanfanel64> I have not looked in that channel yet, but I only know bnc as a cable connector (thinnet, old video and camera connections, that sort of thing)
[23:32:32] <vanfanel64> But it might not have anything to do with that
[23:33:57] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:37:00] <vanfanel64> sweval: use JSON::MaybeXS; my $foo = "42"; my $bar = 0+$foo; encode_json([$foo, $bar]); # From above, aquanight
[23:37:02] <perlbot> vanfanel64: [42,42]
[23:37:23] <vanfanel64> Why is $foo being changed from string to number when it is only used in an expression?
[23:37:36] <vanfanel64> And not assigned to
[23:37:48] <vanfanel64> (after = "42" I mean)
[23:38:10] <aquanight> sweval: use Devel::Peek; my $foo = "42"; Dump($foo);
[23:38:11] <perlbot> aquanight: SV = PV(0x56439b788a38) at 0x56439b9be620   REFCNT = 1   FLAGS = (POK,IsCOW,pPOK)   PV = 0x56439ba45870 "42"\0   CUR = 2   LEN = 10   COW_REFCNT = 1 
[23:38:20] <aquanight> sweval: use Devel::Peek; my $foo = "42"; my $bar = 0+$foo; Dump($foo);
[23:38:21] <perlbot> aquanight: SV = PVIV(0x562ac24884a8) at 0x562ac274a680   REFCNT = 1   FLAGS = (IOK,POK,IsCOW,pIOK,pPOK)   IV = 42   PV = 0x562ac274d870 "42"\0   CUR = 2   LEN = 10   COW_REFCNT = 1 
[23:38:54] <vanfanel64> Why does that happen?
[23:39:15] <aquanight> semantically, the value of $foo has never changed, but because perl doesn't want to re-convert "42" every time $foo is used as a number
[23:39:24] <aquanight> it puts 42 in IV and sets IVOK
[23:39:50] <aquanight> effectively mutating $foo from 'has only ever been "42" as a string' to 'is "42" as a string and 42 as a number'
[23:39:53] <vanfanel64> I see it is for optimazation
[23:40:46] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Quit: Leaving)
[23:40:57] <vanfanel64> I cannot remember what IsCOW but remember vague 0xBEEF jokes
[23:41:02] <aquanight> copy on write
[23:41:10] <vanfanel64> Oh, thank you
[23:41:22] <aquanight> it allows strings that were once the same string to share the memory space until there's need to write into the buffer
[23:41:35] <aquanight> thereby avoiding expensive copies
[23:41:46] <vanfanel64> Sounds like good optimizing
[23:41:48] <haarg> perl optimizes to reduce memory allocations
[23:41:55] <aquanight> if you do anything like s/// or substr() = it will trigger the copy in full
[23:42:16] <haarg> It does this by not giving up on allocations it already did
[23:42:49] <aquanight> of course with COW_REFCNT = 1 it STILL might not trigger a full copy, knowing that currently no one else is using that buffer
[23:42:53] <haarg> so it stores a string version of a number once it calculated it
[23:43:13] <haarg> an optimization designed for a different era
[23:43:36] <aquanight> haarg: this is the other way around (numification of a string) but yes
[23:43:51] <haarg> it was an example
[23:44:38] <haarg> the stringification part has changed over time even because it has caused problems
[23:45:25] *** Quits: magla (~gelignite@55d4442a.access.ecotel.net) (Quit: Stay safe!)
[23:45:28] <haarg> it's almost like implicit type conversions are a bad idea
[23:46:54] <LeoNerd> `no stringification;`  :)
[23:47:11] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[23:48:06] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[23:49:43] *** Joins: Linux77 (~Linux7_7@186.233.182.243)
[23:51:51] *** Quits: Linux77 (~Linux7_7@186.233.182.243) (Client Quit)
[23:53:05] *** Quits: e1f (~user@141.117.1.130) (Ping timeout: 246 seconds)
[23:53:23] *** Joins: Linux77 (~Linux7_7@187-126-71-30.user3p.veloxzone.com.br)
[23:54:27] <haarg> LeoNerd: let me know when you create 'no typification'
[23:56:00] <EvanCarroll> i wonder if it's worth saving the rendering of a number to ascii
[23:56:09] <LeoNerd> Hah :)
[23:56:34] <LeoNerd> How about a pragma named simply with a unicode zero-width empty space, so you can write `no ;`
[23:56:40] <LeoNerd> to forbid *everything*
[23:57:12] <EvanCarroll> Really the more you work with perl, the higher the ratio of insane to sane.
[23:58:37] <LeoNerd> :)
[23:59:26] <EvanCarroll> javascript isn't far behind.
