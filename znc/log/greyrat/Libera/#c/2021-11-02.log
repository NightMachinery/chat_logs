[00:02:28] *** Joins: Klinda (~superleag@user/klinda)
[00:02:53] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[00:02:58] *** Quits: cartman (~i.am@191.32.92.1) (Quit: I come down here for a fat woman and that's what I'm havin.)
[00:03:50] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[00:05:17] *** Joins: supernova (~quassel@2405:9800:ba11:6207:7276:94b6:5aa6:ed76)
[00:13:30] *** Quits: tech_exorcist_ (txrcst@user/tech-exorcist/x-0447479) (Quit: see you tomorrow)
[00:13:37] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[00:17:16] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:17:36] *** Quits: supernova (~quassel@2405:9800:ba11:6207:7276:94b6:5aa6:ed76) (Ping timeout: 268 seconds)
[00:20:42] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.118) (Ping timeout: 268 seconds)
[00:22:03] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.115)
[00:23:09] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.115) (Client Quit)
[00:23:40] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[00:24:22] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[00:24:28] *** Quits: Akuli (~Akuli@82-203-161-164.bb.dnainternet.fi) (Quit: Leaving)
[00:24:29] *** Joins: Nselm (~Nselm@p200300d56f1ca8e8405dc66eb7cff6d9.dip0.t-ipconnect.de)
[00:26:35] <LeoNerd> fizzie: Great, thanks :)
[00:27:17] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[00:34:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:38:59] *** Quits: fputs (~thelounge@67.59.83.166) (Quit: The Lounge - https://thelounge.chat)
[00:39:16] *** Joins: fputs (~fputs@67.59.83.166)
[00:43:42] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[00:44:48] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[00:45:39] *** Quits: Ioupek (~mlin@ip-37-248-155-146.multi.internet.cyfrowypolsat.pl) (Quit: Konversation terminated!)
[00:46:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:49:25] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[00:50:55] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[00:51:30] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[00:52:25] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:52:36] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[00:55:27] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:55:42] *** Joins: quartz (~quartz@user/quartz)
[00:55:42] *** Quits: |darc|- (darc@darcserv.net) (Quit: later)
[00:55:54] *** Joins: |darc| (darc@darcserv.net)
[00:56:03] *** Joins: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de)
[00:56:41] *** Quits: rsjw (~quassel@pool-173-66-166-55.washdc.fios.verizon.net) (Quit: rsjw)
[00:57:15] *** Quits: pucara (~i@181.92.84.206) (Quit: Lost terminal)
[01:01:19] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:02:03] *** Joins: msk (~msk@185.124.240.174)
[01:05:13] *** Joins: Macuser (~Macuser@216.30.159.201)
[01:05:50] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:06:01] *** Quits: magla (~gelignite@55d4d950.access.ecotel.net) (Quit: Stay safe!)
[01:06:26] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 260 seconds)
[01:06:31] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[01:14:44] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[01:14:51] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:15:51] *** Joins: tejr (~tejr@user/tejr)
[01:16:12] *** Quits: Arthuria (~Arthuria@user/arthuria) (Ping timeout: 268 seconds)
[01:18:16] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:21:03] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:24:42] *** Quits: Nselm (~Nselm@p200300d56f1ca8e8405dc66eb7cff6d9.dip0.t-ipconnect.de) (Quit: Client closed)
[01:25:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:28:28] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[01:29:25] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[01:31:18] *** Joins: rgrinberg (~textual@190.113.111.74)
[01:32:24] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[01:35:16] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:36:04] *** Joins: Famine- (~Famine@user/famine)
[01:36:57] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Remote host closed the connection)
[01:38:06] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:39:17] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Remote host closed the connection)
[01:39:38] *** Quits: Famine (~Famine@user/famine) (Ping timeout: 268 seconds)
[01:41:50] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[01:42:38] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[01:43:19] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[01:44:53] *** Joins: Crescendo (~Crescendo@user/crescendo)
[01:46:08] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[01:46:24] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[01:46:45] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:47:31] <cart_man> template functions do not exist in C right?
[01:47:56] *** Joins: Jong (~Jong@2620:10d:c091:480::1:fe60)
[01:48:10] <fizzie> Right.
[01:54:11] <sham1> Nothing a bit of M4 can't fix, but yeah. Outside of stuff like that, there are no templates
[01:56:35] *** Joins: nostar (~nostar@68.51.221.108)
[01:56:39] *** Quits: lovelace (~Elspeth@2.24.23.175) (Quit: Konversation terminated!)
[01:57:19] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[02:00:13] *** Joins: shivesh (~shivesh@user/shivesh)
[02:00:45] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[02:04:41] <quartz> I'm trying to read the lines of a binary file and store them into a string pointer. Each record in the binary file is exactly 40 bytes each. It contains the name of a person and a short message. I wrote this code https://bpa.st/4GFA to see how the contents of str would look, but I only get the names "BobSallyJim" but no message.
[02:05:35] <quartz> Sorry it's kinda specific to this assignment. I'm assuming the output would look like "BobHello World" if Bob said Hello World or something like that.
[02:06:32] <Bou> I'm guessing your "binary data" has 0-terminated strings so printf only prints the first part
[02:06:39] <dave0> quartz: you create space for 1 record on line 21, but during the fread loop you reuse that buffer
[02:07:10] <dave0> quartz: allocate a fresh copy of each record through the fread loop
[02:07:19] <Twix> cart_man, there are macros. For smaller things, you could use a macro.
[02:08:24] <Bou> dave0: how do you know addAfter doesn't copy the given data into its own allocated data structure?
[02:08:48] <dave0> Bou: aha it might
[02:08:58] *** Quits: alch (~alch@151.46.63.148) (Ping timeout: 260 seconds)
[02:09:06] <dave0> quartz: does addAfter() make a copy of data ?
[02:09:27] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:09:34] <Bou> I think I've seen this code though, and it only stores the pointer, so you're probably right
[02:09:42] <quartz> dave0: No, it looks like this: https://bpa.st/MTGQ
[02:10:12] *** Quits: Tenn0 (~Tenn0@88.97.110.231) (Quit: WeeChat 3.3)
[02:10:16] <dave0> quartz: okay, you have to make a copy of data for it
[02:10:36] *** Joins: alch (~alch@151.44.86.119)
[02:10:43] <dave0> quartz: change line 28 to    char *copy = malloc(40); memcpy(copy, data, 40); node = addAfter(&list, node, copy);
[02:11:29] <fizzie> That's just an extra copy. ;)
[02:11:41] <fizzie> You can certainly fread into the copy that goes to the list directly.
[02:12:05] <quartz> Uhhh
[02:12:52] <fizzie> Anyway, that all is unrelated to your initial question -- what you're printing right there in the fread loop isn't affected by the fact that you only have that one data buffer.
[02:13:36] <fizzie> (I'm guessing the same about the structure format, though -- that it's going to be something like "Name\0Message\0", of which printf "%s" will print only up to the first '\0'.)
[02:13:37] <Bou> these records are probably fixed width strings like a struct { char name[20]; char message[20]; } kind of thing?
[02:13:39] <dave0> oh oops i fixed the wrong bug :-p
[02:13:50] <quartz> Bou: Yes, you're correct.
[02:13:53] <quartz> So basically
[02:14:04] <dave0> quartz: change  printf("%s", str);    to   fwrite(str, 40, 1, stdout);
[02:15:39] <Bou> but... that will write binary data (probably strings with lots of NULs at the end) to stdout
[02:16:05] <quartz> I have a linked list as listed here: https://bpa.st/MTGQ   Each entry is exactly 40 bytes, so char name[16] char msg [24]. I want to divide the string into 16 bytes for name and 24 bytes for msg, and create a struct MdbRec *entry pointer.
[02:16:30] <quartz> Than point that pointer into the void *data; section of a node.
[02:16:53] <quartz> Problem is 1. Getting the string from the binary file, 2. Dividing it up into name and msg
[02:17:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:86ce:9852:a68c:aeee) (Ping timeout: 268 seconds)
[02:17:51] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[02:17:57] <quartz> Anyway, I will take these suggestions and try to make it work
[02:18:02] <quartz> dave0: Thanks for your help
[02:18:07] <dave0> quartz: no worries
[02:18:15] <Bou> so data[0] up to and including data[15] will be your name, which puts msg at &data[16]
[02:18:57] <quartz> Bou: Right.
[02:19:03] <quartz> I should have known that
[02:20:27] <dave0> you can memcpy to make them strings
[02:21:02] <quartz> One moment, BRB
[02:21:08] <dave0> char name[16+1] = {0}, msg[24+1] = {0}; memcpy(name, &data[0], 16); memcpy(msg, &data[16], 24);
[02:21:55] <dave0> you could even use strncpy in place of memcpy
[02:21:56] <Bou> or don't, if your binary format specifies that the strings are already 0-terminated
[02:22:59] <quartz> Sorry, BRB
[02:23:26] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[02:25:48] <floatcomplex> &data[16] can also be written as data + 16
[02:25:59] <floatcomplex> i prefer it, couldn't really say why
[02:26:14] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[02:27:45] <Bou> personally I prefer &16[data]
[02:28:08] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:30:27] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[02:30:54] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[02:31:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Client Quit)
[02:33:14] *** Joins: Atque (~Atque@user/atque)
[02:33:24] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[02:33:28] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[02:33:38] *** Quits: pizdets (~pizdets@183.182.111.19) (Ping timeout: 260 seconds)
[02:34:03] *** Joins: _nightw0lf (~nightw0lf@77.125.126.63)
[02:34:12] *** Joins: pizdets_ (~pizdets@183.182.110.102)
[02:35:35] *** Joins: quartz (~quartz@user/quartz)
[02:37:22] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[02:37:54] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[02:42:06] *** Joins: kanton (kanton@gateway/vpn/airvpn/kanton)
[02:42:34] *** Quits: kanton (kanton@gateway/vpn/airvpn/kanton) (Client Quit)
[02:42:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[02:47:35] <quartz> dave0: Sorry weechat didn't save what you wrote before I left earlier. Can you paste it again?
[02:48:27] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[02:49:16] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:49:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:51:20] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[02:52:42] *** Quits: nullptr| (~nullptr@user/nullptr/x-2182142) (Ping timeout: 268 seconds)
[02:53:09] <quartz> dave0: Oddly enough, it works if I change the printf statement at line 27 to fwrite(str, 1, 40, stdout);  I don't make any changes to the buffer, but I can't understand why.
[02:53:15] *** Quits: cart_man (~rynot@host-78-144-120-137.as13285.net) (Quit: Konversation terminated!)
[02:53:31] <nomagno> quartz: Matriz to the rescue. NOMAGNO REPASTE
[02:53:31] <nomagno> dave0: you can memcpy to make them strings
[02:53:31] <nomagno> dave0: char name[16+1] = {0}, msg[24+1] = {0}; memcpy(name, &data[0], 16); memcpy(msg, &data[16], 24);
[02:53:31] <nomagno> dave0: you could even use strncpy in place of memcpy
[02:53:58] <quartz> nomagno: Oh thanks, but it was before that :)
[02:54:30] <nomagno> change  printf("%s", str);    to   fwrite(str, 40, 1, stdout);
[02:54:31] <nomagno> ?
[02:54:42] <floatcomplex> why would you write &data[0] when you can just write data
[02:55:11] <quartz> nomagno: Uhm, before that, something about allocating a fresh buffer in the fread loop
[02:55:18] <quartz> I didn't quite understand it
[02:55:38] <quartz> Not sure why weechat does not save like a day's worth of chat history
[02:55:41] *** Joins: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:56:43] *** Quits: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[02:57:11] <fizzie> quartz: Re why fwrite works, that's probably just because most terminals do not show '\0' bytes as anything, so printing a buffer that contains "Foo\0\0\0\0\0Bar\0\0\0\0\0" and so on will just look like "FooBar", unless you deliberately redirect the output to `hexdump -C` or something.
[02:57:20] *** Joins: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[02:57:44] *** Quits: varioust_ (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Remote host closed the connection)
[02:57:48] <quartz> fizzie: Ahhhh I see
[02:57:51] <dave0> quartz: ah yes making a new copy of data for each line
[02:58:09] <dave0> quartz: change line 28 to    char *copy = malloc(40); memcpy(copy, data, 40); node = addAfter(&list, node, copy);
[02:58:12] <fizzie> And the comment about allocating a fresh buffer was on how you just do `void *data = malloc(40);` outside the loop, and after that just use that one buffer, so what you add to the list is just that same buffer over and over again, and its contents will be whatever the last iteration of the loop left there.
[02:58:12] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[02:59:20] <fizzie> And my comment on *that* was to complain about there being an extra copy involved, but that's just because I'm irritated by extra copies.
[03:01:24] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[03:01:26] <quartz> Sorry I'm a bit confused. If I change line 27 to fwrite(str, 1, 40, stdout); it seems to work, in that I get a name immediately followed by a message. I'm not sure why I need a fresh copy of the buffer.
[03:01:28] *** Joins: cflip (~cflip@69.168.162.147)
[03:02:24] <fizzie> Because you presumably want your list to contain more than one thing, eventually.
[03:02:46] <fizzie> If you just want to print them while you're reading them, then no, you don't. But I imagine there's a reason those things are being added to the list.
[03:03:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:03:12] <quartz> Yes, each "entry" should be contained in a stuct MdbRec { char name; char msg}
[03:03:15] <quartz> Ohh
[03:03:16] <dave0> quartz: fwrite doesn't stop at NUL bytes, it just blindly prints everything
[03:03:30] <fizzie> And as mentioned, it's the same pointer value (the one returned by the malloc(40) outside the loop) that's being repeatedly to the list.
[03:04:04] <quartz> Ahh
[03:04:06] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[03:04:07] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[03:04:08] <quartz> YEs OK
[03:04:25] *** Joins: nullptr| (~nullptr@user/nullptr/x-2182142)
[03:04:43] <fizzie> We're just trying to save you time from coming back and asking "I was expecting my list to contain Bob, Sally and Jim but it just has Jim three times".
[03:06:11] <quartz> Yeah I see
[03:06:45] <quartz> A new buffer is needed each time becuase I must store these 40 byte strings into a struct , which than goes into a linked list
[03:07:24] *** Quits: dutch (~DutchIngr@user/dutch) (Quit: WeeChat 3.3)
[03:08:11] <fizzie> Well, depending... if you were planning to make your struct type contain fixed-length strings as well, then instead of a new buffer, you might use that one buffer for fread, allocate a new instance of your struct, copy the relevant contents over to it, and put *that* to the list.
[03:08:49] *** Joins: dutch (~DutchIngr@user/dutch)
[03:10:01] <jnip> Hey guys I'm having some trouble trying to make UDP (Datagram) posix sockets for the first time. I can't ever get recvfrom() to actually return, it just stalls.
[03:10:25] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[03:10:34] <floatcomplex> jnip: show us your code?
[03:10:36] <quartz> fizzie: So with that approach, I wouldn't need memcpy?
[03:10:43] <jnip> for sure, one moment
[03:11:07] <quartz> fizzie: Oh sorry dumb question, yeah that makes sense.
[03:11:14] <quartz> OK let me try to implement this
[03:11:42] <jnip> server.c: https://paste.debian.net/1217704/
[03:12:03] <fizzie> quartz: You'd still need memcpy (or strncpy, or some other function, or a loop) to copy the contents of data[0] .. data[15] into newStruct->name[0] .. newStruct->name[15], and the contents of data[16] .. data[39] to newStruct->msg[0] ... newStruct->msg[23].
[03:12:19] <jnip> client.c: https://paste.debian.net/1217705/
[03:12:33] *** Quits: rcm888 (~u1@95.54.114.13) (Quit: Leaving)
[03:12:48] <floatcomplex> jnip: well it's not gonna work without bind()
[03:13:01] <jnip> floatcomplex: you mean on the client?
[03:13:21] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[03:13:22] <floatcomplex> on the server
[03:13:35] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:14:19] <floatcomplex> don't test the server and client together, just use nc to test the server
[03:14:25] <quartz> fizzie: Ok let me try to write this to see if I actually understand ;)
[03:14:33] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:14:37] <quartz> It's still kinda unclear to me, not sure why
[03:15:40] <fizzie> jnip: FTR, the reason why the commented code would say "bind: Address family not supported by protocol" is probably because `&cur->ai_addr` on line 57 has an extra & in it.
[03:16:14] <fizzie> jnip: The `ai_addr` member of a `struct addrinfo` is *already* of type `struct sockaddr *`, there's no need to take its address (or cast it to one either).
[03:16:20] <floatcomplex> i don't understand what you're looping over in that commented out code though
[03:16:33] <fizzie> The potentially multiple addresses returned by getaddrinfo? 
[03:17:58] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: Lost terminal)
[03:18:11] <jnip> floatcomplex: it works now that i have bind() in the server. i can't believe i missed that, hah
[03:18:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:18:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:18:48] *** Joins: wroathe (~wroathe@user/wroathe)
[03:18:56] <floatcomplex> :)
[03:18:58] <jnip> fizzie: that makes a lot of sense, let me fix it up real quick
[03:19:31] <floatcomplex> you can also replace recvfrom() with recv() or even read() in this case
[03:20:13] <jnip> fizzie: yep, you were right, it works perfect now
[03:20:18] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[03:20:24] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[03:20:52] <fizzie> By the way, `getaddrinfo` doesn't (annoyingly but maybe understandably) actually use errno to communicate its errors, it returns an error code that you can translate to a human-readable message with `gai_strerror`.
[03:21:16] <fizzie> (Re `perror("getaddrinfo");` not being as useful as you might hope.)
[03:22:20] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:22:39] <jnip> fizzie: ah yeah lol its in the getaddrinfo manpage. i'm sorry, i was writing the code really hastily, hence why it's such a mess
[03:23:11] <floatcomplex> fizzie: i confess i have never used getaddrinfo in that context
[03:23:13] <jnip> floatcomplex: the only difference would be that recv() or read() would not have the option to return the peer's address, right?
[03:23:18] *** Joins: X-Scale` (~ARM@46.50.2.72)
[03:23:30] <floatcomplex> jnip: correxr
[03:23:31] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 252 seconds)
[03:23:32] <floatcomplex> correct
[03:24:12] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[03:24:34] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[03:24:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:24:52] *** Joins: Crescendo (~Crescendo@user/crescendo)
[03:25:42] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[03:26:22] *** Quits: X-Scale (~ARM@92.250.98.212) (Ping timeout: 260 seconds)
[03:26:47] *** X-Scale` is now known as X-Scale
[03:26:59] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[03:27:31] *** Joins: Khoyo (~khoyo@user/khoyo)
[03:30:19] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[03:31:37] *** Quits: cflip (~cflip@69.168.162.147) (Quit: WeeChat 3.0)
[03:31:53] <fizzie> I don't know if it's still the case, but the whole process of binding to a local port with a wildcard address that would support both v6 and (mapped) v4 connections at least used to be pretty system-specific. And a "portable" option was to live with two separate sockets, with the IPV6_V6ONLY socket option explicitly set to 1 on the other.
[03:32:48] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:35:54] *** Joins: loganlee (~Thunderbi@user/loganlee)
[03:36:21] *** Quits: martti (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 245 seconds)
[03:37:24] *** Joins: martti (~martti@46-126-48-136.dynamic.hispeed.ch)
[03:41:07] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[03:42:40] <rcf> fizzie: it is specified in both the RFC and POSIX, but FreeBSD at the least refuse to implement it while documenting it as a bug. 
[03:43:03] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Ping timeout: 276 seconds)
[03:44:21] <rcf> ...or maybe not, I think they actually do support it now that I check my 13.0 box 
[03:45:12] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[03:47:46] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[03:49:31] <rcf> Though the more ridiculous people will note that this isn't future-proof should IPv8 come along, and instead use multiple sockets to bind to every transport protocol a given registered service supports by using AF_UNSPEC 
[03:49:44] *** Joins: ferdna (~ferdna@user/ferdna)
[03:51:05] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[03:51:10] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[03:51:12] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:51:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:52:12] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[03:52:29] *** Lord_of_Life_ is now known as Lord_of_Life
[03:52:49] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 268 seconds)
[03:54:05] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[03:55:18] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[03:56:09] *** Joins: BUSY (~BUSY@user/busy)
[03:56:12] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[03:57:19] <quartz> fizzie: Sorry to bother you again, but is this what you were hinting towards? https://bpa.st/64QA
[03:57:57] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:58:35] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 264 seconds)
[03:59:06] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[04:00:01] *** Joins: Wulf (~Wulf@user/wulf)
[04:04:57] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:08:44] <fizzie> quartz: Yeah, exactly. Except that msg field looks like it might be too long.
[04:09:43] <quartz> fizzie: Oh right, thanks again for your help :)
[04:09:44] <fizzie> `strncpy(entry->msg, str + 16, 39);` -- if your `str` points at only 40 bytes, and you start from str+16, there aren't 39 bytes to copy from it.
[04:10:58] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:12:44] *** Quits: oriba (~oriba@dynamic-089-012-132-051.89.12.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:12:46] <fizzie> And both '\0's might be off by one. For name, if you use strncpy(..., 15) to copy up to 15 bytes, those will fill name[0] through to name[14], so the string terminator probably should go to name[15] rather than name[16].
[04:14:01] *** Joins: monkey_ (~user@2803:d100:e440:314:e2f7:7ee8:f319:f707)
[04:14:48] <fizzie> (Or if that's deliberate and your struct type contains a char[17], then the strncpy should be up to 16 rather than up to 15.)
[04:14:53] *** Quits: mhi (~mhi@46.23.94.209) (Changing host)
[04:14:53] *** Joins: mhi (~mhi@user/mhi)
[04:16:22] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:16:44] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:18:42] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[04:21:13] <quartz> fizzie: No it's name[16], msg[24]
[04:21:23] <quartz> But yeah it makes sense now, thanks.
[04:23:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[04:28:42] *** Joins: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net)
[04:29:45] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[04:31:03] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[04:37:31] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[04:40:04] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:44:16] *** Joins: ferdna (~ferdna@user/ferdna)
[04:49:10] *** Joins: kst (~user@cpe-70-95-182-43.san.res.rr.com)
[04:53:16] *** Quits: ARoxdale (~ARoxdale@84.203.31.229) (Ping timeout: 268 seconds)
[04:55:06] *** Quits: MrC (Ben@mrbenc.net) (Ping timeout: 260 seconds)
[04:57:01] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[04:57:48] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[04:59:36] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[05:01:35] *** Quits: oldlaptop (~quassel@45.63.78.126) (Ping timeout: 264 seconds)
[05:04:05] *** Joins: oldlaptop (~quassel@45.63.78.126)
[05:10:48] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 265 seconds)
[05:10:54] *** Joins: kurahaupo_ (~kurahaupo@pa49-195-81-12.pa.nsw.optusnet.com.au)
[05:11:11] *** Joins: Praise (~Fat@user/praise)
[05:12:40] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Read error: Connection reset by peer)
[05:13:56] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[05:14:12] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:15:27] *** Quits: kurahaupo_ (~kurahaupo@pa49-195-81-12.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[05:15:59] *** Joins: pi0 (~default@23.95.234.10)
[05:16:31] <pi0> https://dpaste.org/9tfi
[05:17:14] *** Joins: seninha (~seninha@user/seninha)
[05:17:24] <fizzie> The `swap` function won't actually do any swapping, because the values of the parameters `int a` and `int b` are entirely local to the function.
[05:17:49] <oldlaptop> It swaps its own two variables, and then throws them away.
[05:18:31] <pi0> For each of the following parameter-passing methods, what are all of the values of the variables value and list
[05:18:34] <pi0> after each of the three calls to swap? (reinitialized each time)
[05:18:42] <pi0> going  over a lab
[05:18:50] <pi0> hey oldlaptop !
[05:18:57] <pi0> fizzie: 
[05:18:59] <pi0> hi!!!
[05:18:59] <candide> pi0: Please stop abusing the enter key. Feel free to type longer messages and to take a moment to think of anything else to say before you hit that enter key.
[05:19:09] <pi0> the openbsd crew is here :)
[05:19:42] <oldlaptop> They presumably want you to understand why things happen as fizzie says, and how to make them happen in a different way.
[05:20:10] <oldlaptop> (you can't, really, but you can achieve the desired result)
[05:20:27] *** Joins: rgrinberg (~textual@190.113.111.74)
[05:21:01] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 268 seconds)
[05:21:27] <fizzie> If it says "for the following parameter-passing methods", perhaps it isn't talking about C at all, but programming in general. Which is fair enough, but.. well, not C, then.
[05:21:44] *** Joins: karakedi (~eAC53C340@user/karakedi)
[05:22:36] <pi0> correct i need to understand 
[05:23:12] <pi0> what the possible outcomes could be 
[05:26:18] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 260 seconds)
[05:26:40] <pi0> what exactly is list[value]
[05:27:14] <pi0> i mean line 7 has value assign to 2, but value is not in the list array, or is it?
[05:27:47] *** Quits: kajiryoji (~kajiryoji@180.160.56.140) (Quit: ZNC 1.8.2 - https://znc.in)
[05:29:06] *** Joins: kajiryoji (~kajiryoji@180.160.56.140)
[05:29:10] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[05:29:34] <pi0> because the first swap i assume the result would be 2,1 then next swap 3,1 but the third swap i am not sure
[05:29:56] <fizzie> Well, for the only C parameter passing convention (pass by value), `value` has never been modified so is still 2, and list[value] is just list[2]. But for pass-by-value, that's kind of irrelevant -- if the question is just "what are the values of the variables value and list", the answer is they've got the values they were initialized with.
[05:32:10] <pi0> just to understand this 
[05:32:29] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[05:32:37] <pi0> would the answer be for #1 pass by value 1,2 3,1  5,2?
[05:32:40] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: The Lounge - https://thelounge.chat)
[05:33:34] <pi0> or is that the answer for pass by reference?
[05:34:49] *** Joins: navidr (uid112413@id-112413.uxbridge.irccloud.com)
[05:34:55] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[05:35:29] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 264 seconds)
[05:35:48] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:d29:7f9f:ec16:1313) (Ping timeout: 268 seconds)
[05:35:54] <pi0> fizzie, oldlaptop can one of you please confirm
[05:36:09] <fizzie> For pass by value, the answer is "2 and {1, 3, 5, 7, 9}", "2 and {1, 3, 5, 7, 9}" and "2 and {1, 3, 5, 7, 9}", because the swap function doesn't change anything in `main`.
[05:36:29] <pi0> oh!
[05:37:39] <oldlaptop> C has no such thing as "pass by reference", but it is idiomatic to pass values that are references - pointers.
[05:38:16] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[05:38:25] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:d29:7f9f:ec16:1313)
[05:40:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[05:40:44] *** Joins: quartz (~quartz@user/quartz)
[05:43:55] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[05:44:18] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[05:45:27] *** Joins: frost (~frost@user/frost)
[05:47:14] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[05:48:31] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[05:55:32] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 268 seconds)
[06:00:02] *** Parts: masterbuilder (~user@89.17.155.85) (ERC (IRC client for Emacs 29.0.50))
[06:01:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:02:11] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:02:15] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[06:03:06] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[06:03:30] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:06:01] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[06:06:38] *** Joins: jancoow (~jancoow@user/jancoow)
[06:07:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[06:08:29] *** Quits: alch (~alch@151.44.86.119) (Ping timeout: 268 seconds)
[06:08:38] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:09:58] *** Joins: alch (~alch@151.44.83.160)
[06:10:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:12:07] *** Quits: monkey_ (~user@2803:d100:e440:314:e2f7:7ee8:f319:f707) (Remote host closed the connection)
[06:12:11] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[06:15:54] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:16:18] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 260 seconds)
[06:19:51] *** Joins: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it)
[06:22:21] *** Joins: jrqc (rofl@2603:3016:1e01:b960:20b3:fc15:12c5:30d8)
[06:22:35] *** Quits: The_Jag_ (~The_Jag@host-87-16-87-93.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[06:22:46] *** Quits: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca) (Remote host closed the connection)
[06:24:34] *** Joins: Khoyo (~khoyo@user/khoyo)
[06:24:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:25:47] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[06:29:55] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[06:36:18] *** Joins: vin (~vin@user/crash)
[06:37:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:39:37] <vin> Can a child thread access parent thread stack? https://godbolt.org/z/MMYnf5jK3 looks like it can
[06:40:32] <vin> Here the char c is on parent stack being passed by reference to child, since child shared the same address space as parent the child can access it. Correct?
[06:40:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[06:41:30] <fizzie> It's all just memory. If you provide a pointer, it can be *accessed*. The challenges come in making sure the lifetime of the object covers when the access is made, which I don't think it's true in your example.
[06:42:39] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:42:50] <vin> What do you mean by lifetime of object? The value as seen by different threads right?
[06:42:56] <fizzie> The lifetime of the object `c` ends when execution of the block it is associated with terminates, which *includes* looping to the next iteration.
[06:43:40] <fizzie> And there's no synchronization in place to guarantee dereferencing the pointer in the other thread happens-before that happens in the main function's thread.
[06:43:41] <vin> Ah which is why the program prints 5 e 
[06:44:17] <vin> but why 5 e when there could be threads printing before c was set to e?
[06:44:53] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 268 seconds)
[06:45:00] <fizzie> Well, it might also do anything else; a pointer's value becomes indeterminate when the object it points to reaches the end of it's lifetime.
[06:45:18] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[06:46:27] <fizzie> In practice what you describe is probably the most likely outcome. Thread switches don't happen *that* often on most implementations, so probably almost always you have time to start all five threads before any of them has a chance to start running.
[06:47:01] <vin> Ah I see
[06:48:48] <vin> Thanks fizzie 
[06:48:58] <fizzie> If you made a `char c[5]` up top in main, and gave each thread a pointer to a separate element, it would be fully defined, because the pthread_joins ensure all the accesses have happened before main returns.
[06:49:24] <vin> Cool!
[06:51:13] <pi0> thank you guys for the help!
[06:52:06] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:52:16] *** Quits: sicelo (~sicelo@user/sicelo) (Ping timeout: 268 seconds)
[07:02:13] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[07:02:46] *** Quits: Khoyo (~khoyo@user/khoyo) (Ping timeout: 268 seconds)
[07:11:46] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[07:11:52] *** Joins: zmt01 (~zmt00@user/zmt00)
[07:12:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:13:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:14:05] *** Joins: sicelo (~sicelo@vm8.ganeti.dyne.org)
[07:14:05] *** Quits: sicelo (~sicelo@vm8.ganeti.dyne.org) (Changing host)
[07:14:05] *** Joins: sicelo (~sicelo@user/sicelo)
[07:18:17] *** Joins: essial (~lunaticed@2600:1700:960:32d0:d5f1:3d42:2e8e:5083)
[07:22:21] *** Joins: kts (~kts@103.73.237.62)
[07:23:20] *** Quits: essial (~lunaticed@2600:1700:960:32d0:d5f1:3d42:2e8e:5083) (Quit: WeeChat 3.3)
[07:30:59] *** Quits: ckdCreations (~ckdCreati@147.55.133.137) (Read error: Connection reset by peer)
[07:31:16] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[07:35:46] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:29] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[07:39:47] *** Joins: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca)
[07:39:59] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 264 seconds)
[07:40:07] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:44:34] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[07:45:50] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[07:45:56] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 245 seconds)
[07:46:19] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:46:20] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:e045:ea2a:5d61:7a2b)
[07:47:05] *** Joins: machinehum (~machinehu@45.131.194.114)
[07:49:16] *** Joins: hinata (~hinata@2402:8100:2333:fed5:cd16:5122:899f:edcc)
[07:54:36] *** Quits: navidr (uid112413@id-112413.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[07:55:05] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:56:24] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[07:58:26] *** Joins: kurahaupo (~kurahaupo@pa49-181-178-41.pa.nsw.optusnet.com.au)
[07:58:32] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:58:55] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:00:52] *** Joins: smeso (~smeso@user/smeso)
[08:05:54] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 260 seconds)
[08:08:46] *** Quits: soapsudsxx (~soapsudsx@209.221.40.155) (Remote host closed the connection)
[08:09:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:09:58] *** Quits: mahmutov (~mahmutov@176.30.172.0) (Ping timeout: 268 seconds)
[08:11:46] *** Quits: haniaF (~haniaF@83.24.45.145.ipv4.supernova.orange.pl) (Ping timeout: 245 seconds)
[08:12:50] *** Joins: haniaF (~haniaF@83.24.45.145.ipv4.supernova.orange.pl)
[08:19:58] *** Quits: reset (~reset@user/reset) (Quit: reset)
[08:21:41] *** Joins: Khoyo (~khoyo@user/khoyo)
[08:21:59] *** Quits: msfninja (~kali@user/msfninja) (Ping timeout: 264 seconds)
[08:24:04] *** Quits: Guest80 (~Guest80@S01069050ca4e3573.cg.shawcable.net) (Quit: Connection closed)
[08:26:47] *** Joins: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net)
[08:29:14] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.2.1)
[08:32:36] *** Joins: enyc (~enyc@user/enyc)
[08:32:44] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 260 seconds)
[08:33:24] *** Joins: m4v (~znc@ubuntu/member/m4v)
[08:34:38] *** Quits: hinata (~hinata@2402:8100:2333:fed5:cd16:5122:899f:edcc) (Ping timeout: 268 seconds)
[08:38:58] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[08:40:06] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:40:54] *** Quits: engest (~engest@50.126.100.152) (Ping timeout: 260 seconds)
[08:43:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:47:05] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:52:11] *** Joins: hinata (~hinata@2402:8100:2333:fed5:cd16:5122:899f:edcc)
[08:54:21] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:55:24] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[08:56:14] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[08:58:10] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:59:12] *** Joins: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[09:00:27] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:00:27] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:00:27] *** Joins: wroathe (~wroathe@user/wroathe)
[09:02:24] *** Quits: kurahaupo (~kurahaupo@pa49-181-178-41.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[09:03:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:04:39] *** Joins: zmt01 (~zmt00@user/zmt00)
[09:05:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[09:09:10] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:10:41] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:13:14] *** Joins: dmaroo (~dhruv@2409:4070:2e06:4854:5d99:c555:b8ae:f231)
[09:17:21] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[09:17:40] *** Joins: tejr (~tejr@user/tejr)
[09:20:17] *** Quits: enyc (~enyc@user/enyc) (Ping timeout: 268 seconds)
[09:21:20] *** Joins: msfninja (~kali@user/msfninja)
[09:22:54] *** Quits: hinata (~hinata@2402:8100:2333:fed5:cd16:5122:899f:edcc) (Ping timeout: 260 seconds)
[09:23:28] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:24:48] *** Joins: zmt00 (~zmt00@user/zmt00)
[09:25:34] *** Quits: zmt00 (~zmt00@user/zmt00) (Remote host closed the connection)
[09:28:17] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 268 seconds)
[09:28:25] *** Quits: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca) (Quit: quit)
[09:33:27] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Remote host closed the connection)
[09:33:49] *** Joins: supernova (~quassel@2405:9800:ba11:6207:b10c:4f23:669a:48d7)
[09:33:52] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[09:33:58] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:35:00] *** Joins: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:37:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[09:38:50] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[09:44:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:45:59] *** Joins: hinata (~hinata@106.79.212.161)
[09:47:11] *** Quits: dmaroo (~dhruv@2409:4070:2e06:4854:5d99:c555:b8ae:f231) (Quit: Konversation terminated!)
[09:48:10] *** Quits: night_wulfe__ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[09:57:52] *** Quits: supernova (~quassel@2405:9800:ba11:6207:b10c:4f23:669a:48d7) (Quit: No Ping reply in 180 seconds.)
[09:58:59] *** Joins: supernova (~quassel@2405:9800:ba11:6207:2a16:5128:d43a:902f)
[10:02:00] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[10:04:15] *** Quits: jnip (~jnip@node-1w7jr9yfylvne4my6nh25vn80.ipv6.telus.net) (Quit: WeeChat 3.3)
[10:05:06] *** Joins: ericlee (~ericlee@2601:647:4681:3420::2)
[10:05:19] <ericlee> Hi, I have a dumb question here. What's the proper way to avoid a single program run multiple times? I know some are using pidfile or lock, anyone can give me some suggestions or examples? thanks. 
[10:06:00] *** Quits: alch (~alch@151.44.83.160) (Read error: Connection reset by peer)
[10:06:31] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (Ping timeout: 268 seconds)
[10:07:30] *** Quits: blinky42 (~quassel@user/blinky42) (Ping timeout: 260 seconds)
[10:08:22] *** Quits: hinata (~hinata@106.79.212.161) (Ping timeout: 268 seconds)
[10:08:48] <Wulf> ericlee: start it through systemd
[10:08:59] <bparker> ericlee: there is no one universally 'right' way
[10:09:11] <bparker> personally I like to use a network listening socket on a specific high port
[10:09:12] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[10:09:39] <Wulf> ericlee: if the user is supposed to start it manually, use a lock file
[10:09:46] <bparker> assuming my app is already using network resources that is
[10:09:50] <Wulf> bparker: that may conflict with other users on the system
[10:10:06] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[10:10:07] <bparker> Wulf: theoretically... then again so would a lockfile
[10:10:28] *** Joins: alch (~alch@151.46.23.26)
[10:10:38] <bparker> having a file named the same would be no different than two apps using the same port
[10:10:46] <bparker> the chances of either are pretty low IMO
[10:11:04] <ericlee> thanks, is there any example I can check for the lock file method? 
[10:11:33] <bparker> search for "fcntl lock file C"
[10:11:37] <bparker> or similar
[10:11:48] <ericlee> roger
[10:12:00] <Wulf> bparker: The lock file should go into the user's own directory.
[10:12:17] <bparker> there's also flock()
[10:12:29] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:12:35] <bparker> Wulf: ok?
[10:14:55] *** Joins: dohtem (uid524096@user/dohtem)
[10:18:05] *** Quits: supernova (~quassel@2405:9800:ba11:6207:2a16:5128:d43a:902f) (Quit: No Ping reply in 180 seconds.)
[10:19:12] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a331:56fb:bbe1:7809)
[10:21:08] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[10:21:09] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[10:21:09] *** Joins: blinky42 (~quassel@user/blinky42)
[10:24:13] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[10:24:40] *** Joins: loganlee (~Thunderbi@user/loganlee)
[10:25:20] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:29:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[10:35:47] *** Quits: eblip (~eb0t@90.196.142.2) (Ping timeout: 264 seconds)
[10:36:10] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:e045:ea2a:5d61:7a2b) (Quit: Leaving)
[10:36:28] *** Joins: mrig (~AdiIRC@user/mrig)
[10:37:23] *** Joins: eblip (~eb0t@90.194.37.155)
[10:38:18] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a331:56fb:bbe1:7809) (Quit: No Ping reply in 180 seconds.)
[10:39:26] *** Joins: supernova (~quassel@2405:9800:ba11:6207:ad02:7c0d:2e23:aa4a)
[10:43:12] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:44:46] *** Quits: derjanni (~textual@ip-88-153-100-48.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[10:47:34] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:47:49] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:49:58] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[10:50:34] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[10:57:46] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[10:57:49] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[10:58:02] *** Quits: supernova (~quassel@2405:9800:ba11:6207:ad02:7c0d:2e23:aa4a) (Quit: No Ping reply in 180 seconds.)
[10:58:28] *** Quits: kts (~kts@103.73.237.62) (Quit: Konversation terminated!)
[10:59:09] *** Joins: supernova (~quassel@2405:9800:ba11:6207:ca12:e636:39b7:263d)
[10:59:45] *** Joins: kts (~kts@103.73.237.62)
[11:02:01] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[11:04:12] *** Quits: kts (~kts@103.73.237.62) (Client Quit)
[11:05:32] *** Joins: kts (~kts@103.73.237.62)
[11:07:54] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b015:1279:adad:eb0:540e)
[11:08:01] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[11:09:38] *** Quits: kts (~kts@103.73.237.62) (Client Quit)
[11:10:26] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[11:11:02] *** Joins: MrC (Ben@mrbenc.net)
[11:11:27] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[11:12:06] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[11:12:37] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[11:12:50] *** Joins: mrig (~AdiIRC@user/mrig)
[11:12:59] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:16:55] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[11:18:03] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 268 seconds)
[11:18:15] *** Quits: supernova (~quassel@2405:9800:ba11:6207:ca12:e636:39b7:263d) (Quit: No Ping reply in 180 seconds.)
[11:18:25] *** Joins: machinehum (~machinehu@45.131.194.114)
[11:19:10] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[11:19:23] *** Joins: supernova (~quassel@2405:9800:ba11:6207:6b2:ce78:ec60:7d2f)
[11:21:17] *** Quits: mrig (~AdiIRC@user/mrig) (Read error: Connection reset by peer)
[11:21:30] *** Joins: mrig (~AdiIRC@user/mrig)
[11:24:33] *** Joins: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca)
[11:25:32] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:25:51] *** Quits: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca) (Client Quit)
[11:26:06] *** Quits: rahl (~rahl@102.114.57.215) (Ping timeout: 260 seconds)
[11:26:15] *** Joins: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca)
[11:27:07] *** Quits: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca) (Client Quit)
[11:27:58] *** Joins: rahl (~rahl@102.114.83.255)
[11:31:39] *** Joins: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca)
[11:32:18] *** Joins: kts (~kts@103.73.237.62)
[11:36:18] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[11:38:22] *** Quits: kts (~kts@103.73.237.62) (Ping timeout: 250 seconds)
[11:38:29] *** Quits: supernova (~quassel@2405:9800:ba11:6207:6b2:ce78:ec60:7d2f) (Quit: No Ping reply in 180 seconds.)
[11:39:37] *** Joins: supernova (~quassel@2405:9800:ba11:6207:b965:6cf7:6edb:5676)
[11:41:54] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[11:45:21] *** lkor is now known as lionkor
[11:45:26] *** Joins: Rounin (~david@84.212.130.215)
[11:46:11] *** Quits: j-james (~apropos@dhcp-206-87-159-50.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[11:46:48] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:59] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 264 seconds)
[11:49:44] *** Joins: mven (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:51:21] *** Quits: machinehum (~machinehu@45.131.194.114) (Ping timeout: 268 seconds)
[11:52:46] *** Joins: machinehum (~machinehu@45.131.194.55)
[11:53:21] *** Joins: mven` (~mven@ip68-104-39-54.lv.lv.cox.net)
[11:55:03] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 268 seconds)
[11:55:29] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[11:55:47] *** Joins: tejr (~tejr@user/tejr)
[11:58:43] *** Quits: supernova (~quassel@2405:9800:ba11:6207:b965:6cf7:6edb:5676) (Quit: No Ping reply in 180 seconds.)
[11:59:51] *** Joins: supernova (~quassel@2405:9800:ba11:6207:12e1:b5fe:5438:3d8f)
[12:03:30] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Quit: awwww)
[12:03:43] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[12:04:41] *** Quits: pony (uid524992@smol/hors) ()
[12:04:52] *** Joins: pony (sid524992@smol/hors)
[12:04:56] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Ping timeout: 268 seconds)
[12:06:06] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[12:06:41] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:07:50] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[12:15:29] *** Joins: hexteetx (~hexteex@gateway/tor-sasl/hexteex)
[12:18:27] *** Quits: supernova (~quassel@2405:9800:ba11:6207:12e1:b5fe:5438:3d8f) (Quit: No Ping reply in 180 seconds.)
[12:18:30] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Ping timeout: 276 seconds)
[12:19:34] *** Joins: supernova (~quassel@2405:9800:ba11:6207:5e7d:8e8c:ce8d:c574)
[12:20:51] *** Quits: hexteetx (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[12:23:49] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:26:45] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:27:49] *** Joins: hexteex (~hexteex@gateway/tor-sasl/hexteex)
[12:28:31] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.3)
[12:29:25] *** Joins: kts (~kts@103.73.237.28)
[12:34:22] *** Joins: enyc (~enyc@user/enyc)
[12:36:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:38:40] *** Quits: supernova (~quassel@2405:9800:ba11:6207:5e7d:8e8c:ce8d:c574) (Quit: No Ping reply in 180 seconds.)
[12:39:48] *** Joins: supernova (~quassel@2405:9800:ba11:6207:a491:8363:3cab:ea0a)
[12:49:51] *** Joins: bokfink (~user@122x214x111x75.ap122.ftth.ucom.ne.jp)
[12:51:40] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[12:53:39] *** Quits: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[12:55:30] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[13:00:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:01:07] *** Quits: ormaaj2 (~ormaaj2@user/ormaaj) (Quit: Client closed)
[13:01:43] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[13:01:46] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[13:05:13] *** Joins: plastico (~plastico@neomutt/plastico)
[13:06:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[13:15:46] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Ping timeout: 260 seconds)
[13:16:35] *** Joins: soul-d (~uknown@user/soul-d)
[13:18:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:19:08] *** Joins: wwilly (~wwilly@217.140.99.251)
[13:21:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:21:47] *** Joins: ormaaj2 (~ormaaj2@user/ormaaj)
[13:22:18] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[13:22:55] *** Parts: ormaaj2 (~ormaaj2@user/ormaaj) ()
[13:24:28] *** Quits: supernova (~quassel@2405:9800:ba11:6207:a491:8363:3cab:ea0a) (Ping timeout: 268 seconds)
[13:28:53] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[13:32:47] *** Joins: supernova (~quassel@2405:9800:ba11:6207:360b:958:40f6:a5cf)
[13:32:49] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[13:36:10] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:36:22] *** Joins: random-nick (~random-ni@87.116.177.136)
[13:42:26] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[13:45:59] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:518d:440f:db4:b27f)
[13:50:59] *** Quits: kurahaupo_ (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 268 seconds)
[13:53:15] *** Joins: karakedi (~eAC53C340@user/karakedi)
[13:53:42] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[13:55:52] *** Joins: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri)
[13:56:32] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Ping timeout: 268 seconds)
[13:57:11] <fizzie> There's also a D-Bus mechanism for "only one instance of a progra at a time", and for programs with a GUI, some toolkits (GTK+ definitely) offer their own ways.
[13:58:11] *** Joins: derjanni (~textual@p508ee299.dip0.t-ipconnect.de)
[14:00:27] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[14:02:12] *** Quits: clamiax (~clamiax@net-93-149-158-199.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[14:05:48] *** Quits: alch (~alch@151.46.23.26) (Read error: Connection reset by peer)
[14:05:57] *** Quits: derjanni (~textual@p508ee299.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[14:07:26] *** Joins: cartman (~i.am@191.32.92.1)
[14:09:51] *** Joins: alch (~alch@151.44.29.6)
[14:16:56] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:518d:440f:db4:b27f) (Quit: This computer has gone to sleep)
[14:26:17] *** Quits: johnnyreb (~tth@user/johnnyreb) (Quit: WeeChat 3.1)
[14:27:07] *** Quits: loganlee (~Thunderbi@user/loganlee) (Remote host closed the connection)
[14:30:19] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:53] *** Joins: Tordek (tordek@triton.blinkenshell.org)
[14:31:03] *** Joins: csrf (~csrf@user/csrf)
[14:33:08] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0)
[14:34:43] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[14:34:46] *** Joins: tinyweasel (~weasel@vps-947c96bd.vps.ovh.ca)
[14:45:33] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0) (Remote host closed the connection)
[14:45:46] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[14:47:47] *** Joins: Arthuria (~Arthuria@user/arthuria)
[14:48:41] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Client Quit)
[14:48:49] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[14:49:11] *** Joins: Klinda (~superleag@user/klinda)
[14:55:45] *** Quits: random-nick (~random-ni@87.116.177.136) (Ping timeout: 268 seconds)
[15:00:00] *** Joins: johnnyreb (~tth@user/johnnyreb)
[15:00:17] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[15:08:14] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Quit: Leaving)
[15:10:25] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[15:10:41] *** Joins: shivesh (~shivesh@user/shivesh)
[15:17:30] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Quit: Leaving)
[15:19:32] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[15:20:24] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:21:58] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Client Quit)
[15:22:08] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[15:23:30] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 268 seconds)
[15:23:49] *** Joins: wehttam (~Android@159.196.24.74)
[15:24:59] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Client Quit)
[15:25:15] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[15:25:41] *** Joins: puke (~puke@user/puke)
[15:29:02] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[15:29:37] *** Joins: Crescendo (~Crescendo@user/crescendo)
[15:30:36] *** Joins: bzng (~bzng4@2a02:60a0:102:4302:9567:856e:20e9:92af)
[15:33:13] *** Joins: mikoto-chan (~mikoto-ch@185.25.79.186)
[15:33:15] *** Quits: kts (~kts@103.73.237.28) (Quit: Konversation terminated!)
[15:34:22] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Ping timeout: 260 seconds)
[15:35:28] *** Quits: mikoto-chan (~mikoto-ch@185.25.79.186) (Client Quit)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:44] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[15:36:54] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:58] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[15:38:42] *** Joins: wehttam (~Android@159.196.24.74)
[15:41:20] *** Quits: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:3d65:8833:4853:5bbe) (Read error: Connection reset by peer)
[15:41:39] *** Quits: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173) (Read error: Connection reset by peer)
[15:41:56] *** Joins: Thedarkb-Desktop (~Thedarkb@2001:bb6:b403:e042:8561:d34f:d94b:2b07)
[15:41:57] *** Joins: Thedarkb (~Thedarkb@2001:bb6:b403:e042:b812:bb3f:25c8:9173)
[15:47:22] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[15:48:59] *** Quits: sicelo (~sicelo@user/sicelo) (Quit: Bye!)
[15:49:47] *** Joins: wehttam (~Android@159.196.24.74)
[15:51:25] *** Joins: sicelo (~sicelo@vm8.ganeti.dyne.org)
[15:51:26] *** Quits: sicelo (~sicelo@vm8.ganeti.dyne.org) (Changing host)
[15:51:26] *** Joins: sicelo (~sicelo@user/sicelo)
[15:51:51] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 268 seconds)
[15:55:58] *** Joins: brad_mssw (~bhouse@2600:1700:1600:30df:101a:2d77:5e08:2969)
[15:57:18] *** Joins: jonathanclarke (~jonathanc@110.44.127.167)
[15:59:33] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[16:02:58] *** Quits: jonathanclarke (~jonathanc@110.44.127.167) (Ping timeout: 268 seconds)
[16:03:22] *** Joins: wovixo (~wovixo@128.104.205.49)
[16:06:18] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[16:06:31] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b015:1279:adad:eb0:540e) (Quit: Leaving)
[16:12:55] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[16:13:00] *** Joins: wehttam (~Android@159.196.24.74)
[16:13:51] *** Joins: kts (~kts@103.73.237.180)
[16:14:35] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[16:15:04] *** Quits: kts (~kts@103.73.237.180) (Client Quit)
[16:15:04] *** Joins: hinata (~hinata@2409:4042:d16:b2fa:cd16:5122:899f:edcc)
[16:15:48] *** Joins: kts (~kts@103.73.237.180)
[16:16:21] *** Quits: hinata (~hinata@2409:4042:d16:b2fa:cd16:5122:899f:edcc) (Client Quit)
[16:16:38] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[16:16:58] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[16:18:56] *** Joins: serbest (~serbest@user/serbest)
[16:20:38] *** Quits: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au) (Ping timeout: 260 seconds)
[16:23:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:24:14] *** Joins: wehttam (~Android@159.196.24.74)
[16:25:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[16:25:26] *** Quits: wehttam (~Android@159.196.24.74) (Read error: Connection reset by peer)
[16:25:29] *** Joins: soapsudsxx (~soapsudsx@209.221.40.144)
[16:27:28] *** Quits: kts (~kts@103.73.237.180) (Quit: Konversation terminated!)
[16:29:53] *** Joins: kts (~kts@103.73.237.180)
[16:30:51] *** Joins: gv_ (~gv@157.41.173.174)
[16:31:03] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[16:31:03] *** Joins: wehttam (~Android@159.196.24.74)
[16:31:07] *** Joins: kurahaupo (~kurahaupo@220-245-23-126.static.tpgi.com.au)
[16:35:02] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[16:35:18] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[16:39:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:41:39] *** Quits: rahl (~rahl@102.114.83.255) (Quit: leaving)
[16:42:24] <ozzz> Hi! How you deal with cleanup after gettin interrupt signal?
[16:43:51] *** Quits: shivesh (~shivesh@user/shivesh) (Read error: Connection reset by peer)
[16:43:57] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[16:45:29] *** Joins: ornxka (~ornxka@user/ornxka)
[16:46:31] *** Joins: seninha (~seninha@user/seninha)
[16:47:09] *** Joins: serbest (~serbest@user/serbest)
[16:47:24] *** Quits: supernova (~quassel@2405:9800:ba11:6207:360b:958:40f6:a5cf) (Quit: No Ping reply in 180 seconds.)
[16:47:58] *** Joins: shivesh (~shivesh@user/shivesh)
[16:48:32] *** Joins: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2)
[16:50:48] *** Quits: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com) (Read error: Connection reset by peer)
[16:50:57] *** Quits: soapsudsxx (~soapsudsx@209.221.40.144) (Remote host closed the connection)
[16:51:32] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:51:54] *** Quits: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2) (Client Quit)
[16:52:42] *** Parts: gv_ (~gv@157.41.173.174) (Leaving)
[16:53:13] *** Joins: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2)
[16:54:57] *** Quits: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b) (Remote host closed the connection)
[16:55:04] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[16:55:19] *** Joins: smlavine (~smlavine@sourcehut/user/smlavine)
[16:57:23] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 264 seconds)
[16:58:12] <Wulf> ozzz: Hello. Usually not at all.
[16:58:35] <Wulf> ozzz: otherwise set some flag inside the signal handler and later check if the flag was set.
[16:59:00] <Wulf> ozzz: or use a signalfd and use epoll or whatever to wait for the signal.
[17:00:25] *** Quits: kts (~kts@103.73.237.180) (Quit: Konversation terminated!)
[17:03:22] *** Joins: kts (~kts@103.73.237.180)
[17:03:29] <floatcomplex> ozzz: either not at all, or by treating it the same as having reached eof on whatever input
[17:04:29] *** Quits: kts (~kts@103.73.237.180) (Client Quit)
[17:04:52] *** Quits: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it) (Read error: Connection reset by peer)
[17:04:55] <floatcomplex> in a pipeline of processes which all get the signal at once, only the one furthest upstream should react
[17:05:08] *** Joins: kts (~kts@103.73.237.180)
[17:05:15] *** Quits: kts (~kts@103.73.237.180) (Client Quit)
[17:05:24] *** Joins: The_Jag (~The_Jag@host-79-52-47-230.retail.telecomitalia.it)
[17:06:32] *** Joins: engest (~engest@50.126.101.161)
[17:07:52] *** cartman is now known as OO7
[17:07:53] *** Quits: OO7 (~i.am@191.32.92.1) (Changing host)
[17:07:53] *** Joins: OO7 (~i.am@user/marlboro)
[17:07:57] <ozzz> Wulf: floatcomplex I have now trouble with interrupt placement (registering signal) 
[17:08:06] *** Joins: reset (~reset@user/reset)
[17:08:24] <ozzz> to be more precise I have while(run) run = true
[17:08:37] *** Joins: acerbic (~acerbic@cs-xdata-50-86-50-181.cspire.com)
[17:09:04] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[17:09:07] *** Joins: node1 (~node1@user/node1)
[17:09:11] <ozzz> after program receives interrupt, I assign run = false , in handler, to finish iteration, and graceful exit
[17:09:31] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:09:40] <ozzz> but valgrind, and asan reports me leaks, one from valgrind points to fopen()
[17:10:16] <ozzz> I understand that planner will destroy all objects after exit, but anyway
[17:10:49] *** Joins: jonathanclarke (~jonathanc@36.252.181.57)
[17:12:19] *** Quits: serbest (~serbest@user/serbest) (Quit: leaving)
[17:12:43] *** Joins: pulse (~pulse@user/pulse)
[17:15:26] *** Joins: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com)
[17:20:22] *** Joins: kts (~kts@103.73.237.54)
[17:23:41] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:23:41] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:23:41] *** Joins: wroathe (~wroathe@user/wroathe)
[17:27:02] <katnis> im so stupid
[17:27:08] <katnis> cant even take care of a function call
[17:29:05] *** Joins: subdelusional (~user@188.249.169.186)
[17:32:53] *** Quits: brad_mssw (~bhouse@2600:1700:1600:30df:101a:2d77:5e08:2969) (Quit: This computer has gone to sleep)
[17:33:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:34:46] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[17:37:45] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Remote host closed the connection)
[17:38:05] <floatcomplex> planner?
[17:38:05] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[17:39:33] *** topside_ is now known as topside
[17:40:33] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:47:16] *** Joins: rahl (~rahl@102.114.83.255)
[17:47:17] *** Quits: karakedi (~eAC53C340@user/karakedi) (Read error: Connection reset by peer)
[17:49:11] *** Joins: constxd (~brad@192.75.101.164)
[17:49:56] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:49:56] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:49:56] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:58:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:59:39] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[18:01:22] *** Quits: jonathanclarke (~jonathanc@36.252.181.57) (Ping timeout: 260 seconds)
[18:01:54] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[18:03:14] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 260 seconds)
[18:03:28] *** Joins: halabund (~halabund@192.55.244.3)
[18:03:49] <halabund> I am wondering if anyone has an insight about why this change uses ssize_t instead of ptrdiff_t --> https://cgit.freebsd.org/src/commit/lib/libc/stdlib/qsort.c?id=7f8f79a5c444a565a32b0c6578b07f8d496f6c49
[18:03:50] <candide> Title of halabund's link: src - FreeBSD source tree
[18:04:26] *** Joins: rgrinberg (~textual@190.113.111.74)
[18:06:18] *** Quits: alch (~alch@151.44.29.6) (Read error: Connection reset by peer)
[18:08:31] <sham1> Because ssize_t matches size_t in size guaranteed. I'm not sure if there is a similar guarantee for ptrdiff_t
[18:08:46] <floatcomplex> does that change make any assumptions about SSIZE_MIN?
[18:09:10] *** Joins: badsektor (~badsektor@user/badsektor)
[18:09:33] <halabund> I am wondering if ptrdiff_t can be smaller in size than (s)size_t
[18:09:50] <halabund> If not, is there a reason to still use ssize_t, sham1?
[18:10:11] *** Joins: alch (~alch@151.34.25.68)
[18:10:17] <halabund> On StackOverflow there's an example when ptrdiff_t is larger (not smaller) than ssize_t https://stackoverflow.com/a/8649077/695132
[18:10:57] <floatcomplex> halabund: my greater concern is whether it assumes that ssize_t can hold any value more negative than -1. although since this is inside a libc, they are allowed to assume more than end user code should
[18:11:47] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[18:12:28] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e8c0:35dd:3893:129a)
[18:12:28] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e8c0:35dd:3893:129a) (Changing host)
[18:12:28] *** Joins: skapata (~Skapata@user/skapata)
[18:13:10] *** Joins: brad_mssw (~bhouse@2600:1700:1600:30df:101a:2d77:5e08:2969)
[18:14:46] <fizzie> I don't think there's any guarantee that `ssize_t` "matches" `size_t`.
[18:15:58] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:17:09] <sham1> Hm, that is true
[18:18:07] <fizzie> (Although it'd be weird if it wasn't the corresponding signed type.)
[18:18:11] <sham1> Yeah
[18:18:29] *** Quits: bzng (~bzng4@2a02:60a0:102:4302:9567:856e:20e9:92af) (Read error: Connection reset by peer)
[18:18:39] <floatcomplex> ptrdiff_t can be larger than size_t too, right
[18:19:11] <fizzie> Judging from the commit message, the assumption is that the value is between 0 and SSIZE_MAX because "Sorting elements of size greater than SSIZE_MAX is nonsensical", which (if true!) makes the conversion fair enough.
[18:20:58] *** Quits: brad_mssw (~bhouse@2600:1700:1600:30df:101a:2d77:5e08:2969) (Ping timeout: 260 seconds)
[18:21:00] *** Quits: eau (~chat@user/eau) (Quit: bleh!)
[18:21:34] <nomagno> How would I go about emulating the functionality of private members in a C struct?
[18:21:41] *** Joins: brad_mssw (~bhouse@2600:1700:1600:30df:dd1f:f522:24a0:ee53)
[18:21:53] <fizzie> (And I guess is also a sort of an argument for choosing ssize_t for that conversion over ptrdiff_t for it, since then the usual arithmetic conversions will promote the whole expression to ptrdiff_t or ssize_t, whichever's larger. If you take "`es` is representable as `ssize_t`" as an axiom.)
[18:24:15] <floatcomplex> nomagno: what specific functionality are you looking for
[18:24:29] *** Joins: makersmasher (~makersmas@2600:6c40:5b00:158d::f8b)
[18:24:31] <floatcomplex> you can have opaque struct pointers from the persective of other TUs
[18:24:52] <floatcomplex> it gets a bit messy if they need to know the size of the struct being pointed to, but not unworkable
[18:25:20] <sham1> Could always do some kind of a convention
[18:25:29] <sham1> Like priv__fieldname
[18:27:34] <floatcomplex> nomagno: but there is great risk of overcomplicating the actual code in pursuit of some nebulous ideal of encapsulation that doesn't in any way offset the risk inherent in the extra complexity
[18:28:04] *** Joins: eau (~chat@user/eau)
[18:29:04] *** Quits: cpuid (~cpuid@2a01:4f8:c0c:9ffd:cafe:cafe:cafe:dead) (Quit: ZNC 1.8.2 - https://znc.in)
[18:29:46] *** Quits: hexteex (~hexteex@gateway/tor-sasl/hexteex) (Quit: Leaving)
[18:29:55] *** Joins: cpuid (~cpuid@2a01:4f8:c0c:9ffd:cafe:cafe:cafe:dead)
[18:30:32] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:30:58] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[18:31:21] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[18:33:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[18:34:34] <nomagno> You know what... Yes, I'll do that.
[18:34:42] <nomagno> As in, I can definitely just use a prefix
[18:36:09] *** Quits: sandman13 (sandman13@sandman13.jujube.ircnow.org) (Quit: Leaving)
[18:36:09] *** Quits: paulo (paulo@user/paulo/x-9032687) (Quit: ZNC 1.8.2 - https://znc.in)
[18:36:18] <nomagno> I am making an OOP macro header that is meant to be less than 500 lines, and it is simply so I can get a more intuitive way of handling stuff in my game. A prefix is exactly the kind of thing a macro does well. You specify the prefix in the object's declaration, and done, you just need to remember it
[18:36:32] <nomagno> It'll all be FOSS anyway, so it's not like I want actual obfuscation
[18:37:42] *** Quits: bokfink (~user@122x214x111x75.ap122.ftth.ucom.ne.jp) (Remote host closed the connection)
[18:39:58] <floatcomplex> as long as it doesn't come at the expense of nobody else being able to debug your code because it doesn't look like c anymore
[18:40:35] *** Joins: meator (~meator@user/meator)
[18:41:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[18:41:15] <nomagno> (Well admittedly the macros generate some weird warnings if you use them wrong, but I try to make sure the actual error at the end of the chain is clear, trough various menas)
[18:45:06] *** Joins: quartz (~quartz@user/quartz)
[18:45:26] *** Joins: cart_man (~rynot@host-78-144-127-199.as13285.net)
[18:45:56] <cart_man> How much faster is it to instantiate a variable outside a while loop as opposed to inside the while loop on every iteration ?
[18:46:12] <pragma-> use a profiler to find out.
[18:46:24] <pragma-> it depends on whether the compiler optimizes it.
[18:47:00] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[18:48:07] <floatcomplex> cart_man: i'd go one step further say look at whether the generated instructions differ at all
[18:48:14] <floatcomplex> if so, then profile i
[18:49:24] <cart_man> Ok but assuming the optimizer didn't optimize it out. Lets say I don't want a app to hold my hand
[18:49:39] <cart_man> Profiler like Valgrand? 
[18:50:19] <pragma-> like gprof
[18:50:57] <floatcomplex> cart_man: you don't want to not use the optimizer. it's not "holding your hand"
[18:51:43] <floatcomplex> cart_man: your job as a human is NOT to try to beat a C compiler at its job
[18:52:06] <floatcomplex> your job is to write code that other humans can debug, and which the compiler can optimize
[18:52:16] <pragma-> an optimizing compiler allows you to write clear, concise AND *fast* code without having to resort to writing ugly hard-to-read code to make it fast.
[18:53:57] <cart_man> makes sense. Thanks
[18:55:00] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Ping timeout: 268 seconds)
[18:55:28] *** Joins: dohtem (uid524096@user/dohtem)
[18:55:56] *** Quits: brad_mssw (~bhouse@2600:1700:1600:30df:dd1f:f522:24a0:ee53) (Quit: Leaving)
[18:56:19] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0)
[18:56:34] <floatcomplex> even if you absolutely do not care about efficiency in some use case, think of the different optimizer levels as different compilers that are fuzzing your source code to make sure it behaves sensibly
[18:57:16] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[18:57:51] *** Joins: pretty_dumm_guy (~trottel@eduroam-134-96-204-83.uni-saarland.de)
[18:57:59] <floatcomplex> where "sensibly" includes other metrics besides "correct according to the c standard"
[18:58:32] *** Joins: paulo (paulo@user/paulo/x-9032687)
[18:58:46] *** Joins: sandman13 (sandman13@jujube.ircnow.org)
[18:58:57] <floatcomplex> if your code uses o(n) stack space without the optimizer and o(1) with it, that's not sensible
[18:59:19] <Budd> What's the nice, readable way to convert a 2-byte signed (two's-complement) big-endian integer into a host-endian signed integer?
[19:00:00] *** Quits: smlavine (~smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[19:00:37] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[19:01:14] <Budd> I can treat it as unsigned bytes and shift them, but then casting to a (bit-identical) signed number is ugly.
[19:02:25] <Budd> Or I could just read the bytes into the correct halves of an int16_t in the first place.
[19:02:56] *** Joins: kuber (~kuber@97-126-3-32.tukw.qwest.net)
[19:03:42] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:04:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:06:04] <floatcomplex> just discard the 8 least significant bits lol, nobody is gonna miss em :)
[19:06:34] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[19:07:01] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[19:07:35] <Budd> Who am I to say that some bits are less significant than others?
[19:08:11] <Budd> (a message from the International Association of Bit Equality)
[19:08:25] <floatcomplex> just mix em up randomly then
[19:09:27] <Budd> I guess I can just type-pun, though I don't like it.
[19:10:06] *** Quits: rgrinberg (~textual@190.113.111.74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:10:07] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Remote host closed the connection)
[19:10:16] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:152d:b032:78f3:27f0) (Remote host closed the connection)
[19:10:29] *** Joins: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606)
[19:10:38] *** Joins: admal (~admal@gateway/tor-sasl/admal)
[19:10:43] *** Joins: santiago (~santiago@200.82.204.142)
[19:10:53] *** Quits: santiago (~santiago@200.82.204.142) (Remote host closed the connection)
[19:14:40] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 260 seconds)
[19:15:16] *** Joins: useretail (~useretail@185.132.19.151)
[19:15:37] *** Quits: halabund (~halabund@192.55.244.3) (Quit: Leaving...)
[19:17:02] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Ping timeout: 260 seconds)
[19:20:17] *** Joins: jonathanclarke (~jonathanc@202.51.76.91)
[19:21:06] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[19:21:49] *** Joins: derjanni (~textual@p4ff8078b.dip0.t-ipconnect.de)
[19:24:00] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[19:24:15] *** Joins: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526)
[19:25:01] *** Quits: kts (~kts@103.73.237.54) (Quit: Konversation terminated!)
[19:25:14] *** Joins: mahmutov (~mahmutov@176.30.172.0)
[19:26:12] *** Joins: kts (~kts@103.73.237.54)
[19:27:57] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[19:28:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:30:01] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Remote host closed the connection)
[19:30:39] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[19:31:10] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[19:31:22] *** Quits: sipu (~sipu@2001:da8:a800:7807:917a:e8c4:fb39:e526) (Remote host closed the connection)
[19:32:38] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[19:42:17] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[19:45:16] *** Quits: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: All for nothing)
[19:45:55] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[19:48:58] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[19:49:13] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[19:51:33] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Quit: Leaving)
[19:52:06] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[19:56:41] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:58:43] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[19:58:43] *** Joins: neightchan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[19:59:01] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Read error: No route to host)
[20:00:51] *** Quits: _nightw0lf (~nightw0lf@77.125.126.63) (Quit: leaving)
[20:01:21] *** Quits: begriffs_ (~begriffs@user/begriffs) (Quit: Leaving)
[20:03:35] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:04:06] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[20:10:58] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[20:17:59] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[20:18:03] <subdelusional> how do stacks work?
[20:18:16] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[20:18:28] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:18:36] <subdelusional> like what is a notion of a "stack"?
[20:18:39] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[20:18:50] <supakeen> have you ever seen a stack of paper?
[20:19:06] <subdelusional> yes
[20:19:13] <supakeen> they work like that
[20:19:22] <supakeen> much like a stack of paper you can only really remove and add stuff at the top of it
[20:19:31] <supakeen> tada, stack
[20:19:36] <subdelusional> what if I slide something from the middle?
[20:20:02] *** Quits: pretty_dumm_guy (~trottel@eduroam-134-96-204-83.uni-saarland.de) (Quit: WeeChat 3.3)
[20:20:32] <floatcomplex> you wouldn't
[20:20:37] <nitrix> The stack falls over.
[20:20:48] <supakeen> this is why analogies never work :(
[20:21:04] <floatcomplex> lol
[20:21:09] <supakeen> anyways that's what the abstract thing is based on a pile of things that you can only put stuff on top of or take off the top
[20:21:23] <subdelusional> well I get that
[20:21:36] <subdelusional> but how would I implement a pushing and popping function in C?
[20:21:41] <subdelusional> or do you call them subroutines?
[20:21:48] <floatcomplex> we don't
[20:21:50] <nitrix> Function is fine.
[20:22:01] *** Joins: kurfen_ (~kurfen@45.152.181.22)
[20:22:02] <supakeen> well what have you tried and what part is giving you a hard time?
[20:22:28] <floatcomplex> subdelusional: if you implement a stack as a singly linked list, then pushing and popping are each just two pointer-assignment operations
[20:22:33] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[20:22:50] <subdelusional> are linked lists the same as arrays?
[20:22:54] <floatcomplex> no
[20:22:55] *** Quits: kurfen (~kurfen@45.152.181.20) (Ping timeout: 260 seconds)
[20:23:06] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9e2e:d238:6ddc:c88f)
[20:23:11] <nitrix> You normally have a region of storage and a pointer pointing at a location in that storage. When items need to be added, you append your data at the location of the pointer and move the pointer forward, preparing for the next pushes.
[20:23:24] <nitrix> Reads work in the same manner, except the opposite order.
[20:23:28] <subdelusional> I wanted to do an RPN calculator where my idea was to push things to an array then apply arithmetic on each element of the array
[20:23:38] <floatcomplex> subdelusional: yes you should do that
[20:24:15] <floatcomplex> subdelusional: for an RPN calculator you can make a reasonable assumption the stack will never have more than, say, 32 items in it, and just use a fixed-size array, with a cursor that points at the top of the "stack" within that array
[20:24:21] <floatcomplex> and you just move that cursor up or down
[20:24:37] <floatcomplex> you definitely do not need to write explicit push or pop functions, you're just moving a cursor
[20:24:43] <subdelusional> nitrix: so what is that "storage"? is it just a structure?
[20:25:24] <supakeen> they said 'fixed-size array'
[20:25:28] <pragma-> "just" a structure
[20:25:42] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:25:46] <subdelusional> I'm very confused sorry :(
[20:26:59] <nitrix> C has 4 storage durations, automatic, allocated, static and thread. You want an array that has one of those four storages to implement your stack.
[20:27:40] *** Quits: kts (~kts@103.73.237.54) (Quit: Konversation terminated!)
[20:28:09] <nitrix> Conceptually, it amounts to arr[i++] on pushes and arr[i--] on pops, plus maybe bound checks for safety.
[20:28:49] <nitrix> Depending on the properties that you want to give to your stack, your options might narrow down. For example, an "infinite stack" that is resizable would force you to use allocated storage.
[20:29:29] <nitrix> If the stack exists for the entire duration of the program, then maybe static storage is more suitable.
[20:29:47] <nitrix> (and fixed sized)
[20:29:48] <subdelusional> alright, now how would I get user input?
[20:29:53] <constxd> lmao
[20:29:56] <pragma-> poor lad. he doesn't know what a stack is yet and now you're throwing storage durations at him.
[20:30:09] <pragma-> he's obviously coming from reddit or facebook and not a c book or a university
[20:30:18] <subdelusional> uh
[20:30:28] <subdelusional> I'm reading k&r, I don't use either
[20:30:38] <floatcomplex> pragma-: i didn't come from a c book or university, for the record
[20:30:45] <pragma-> yes.
[20:30:48] <floatcomplex> i learned c in spite of my university classes, not because of them
[20:30:53] <pragma-> yes. we can tell.
[20:31:12] <supakeen> subdelusional: you'll just have to deal with things in C having specific meaning, if you misuse things people will correct you by explaining what they mean
[20:31:15] <nitrix> You probably want to know about storage BEFORE you get to write your own data structures.
[20:31:18] <supakeen> until you find the right incantation to use :)
[20:31:20] <nitrix> I see nothing wrong with my answer.
[20:31:22] <floatcomplex> they don't teach c properly in university, which is driven home every single day in this channel
[20:31:26] <supakeen> which is fine!
[20:31:32] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:32:08] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:33:03] *** Joins: bogdomania (bogdomania@user/bogdomania)
[20:33:15] <subdelusional> well I'm not writing my own data structure, the idea is simple 3 8 + 2 5 + *, you just append 3 and 8 to the stack, you add them and push them to the stack again, then you take 2 and 5, add them, then push the result to the stack, then multiply all the elements in the stack recursively 
[20:33:22] <subdelusional> that's what I want to do
[20:33:25] <floatcomplex> yes
[20:33:28] <subdelusional> it's just strings and characters
[20:33:29] <floatcomplex> and that is a reasonable thing to do
[20:33:47] <subdelusional> I still haven't learned data structures (yet)
[20:33:53] <supakeen> however 'the stack' is not a datatype in C so you'll have to use something else and use that as if it were a stack
[20:34:01] <supakeen> for example, an array
[20:34:09] <floatcomplex> so you just loop over each token, if it's an operator you do the operation, otherwise assume it's an operand and increment the stack pointer and put it at that location
[20:34:09] <subdelusional> yeah that's what I'm taking about
[20:34:15] <subdelusional> talking*
[20:34:22] *** Joins: kish` (~aqua@user/aqua)
[20:34:34] <floatcomplex> subdelusional: there are no "data strutures" to invent here, it's just an array with an index into that array
[20:34:43] <floatcomplex> that moves up and down
[20:34:55] *** Quits: kuber (~kuber@97-126-3-32.tukw.qwest.net) (Quit: leaving)
[20:35:53] *** Quits: derjanni (~textual@p4ff8078b.dip0.t-ipconnect.de) (Quit: Textual IRC Client: www.textualapp.com)
[20:36:06] *** Quits: crm (~crm@70.120.0.94) (Quit: Leaving)
[20:37:36] *** Quits: zhiayang (~zhiayang@user/zhiayang) (Ping timeout: 245 seconds)
[20:38:00] *** Quits: cart_man (~rynot@host-78-144-127-199.as13285.net) (Ping timeout: 268 seconds)
[20:38:45] <nitrix> A stack very much is a data structure. It's a LIFO queue, there's other types of queues, queues are well known data structures.
[20:38:54] *** Joins: Akuli (~Akuli@82-203-161-162.bb.dnainternet.fi)
[20:38:59] <nitrix> You could implement it with a list as well and many other ways.
[20:40:06] <nitrix> The push and pop operation aren't going to magically come out of having an array and an index.
[20:43:33] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[20:43:57] <nitrix> It's trivial to implement only if you have trivial requirements for the stack. Growing, bound checks, generic, sharing, ref counting, memory fences, thread-safe, the list goes on.
[20:44:50] <apotheon> "list"
[20:44:55] <apotheon> pun probably not intended
[20:47:44] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:49:45] *** Quits: Trashlord (~trash@user/trashlord) (Ping timeout: 260 seconds)
[20:50:14] <floatcomplex> subdelusional: https://godbolt.org/z/Tr9csffz8
[20:50:35] *** Joins: gv (~kvirc@157.41.173.174)
[20:52:26] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[20:52:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[20:53:47] <floatcomplex> nitrix: all of that is true but it also makes the barrier to entry seem artificially high given the intended use case
[20:53:53] *** Parts: gv (~kvirc@157.41.173.174) (No boundaries on the net!)
[20:53:54] *** Joins: gv (~kvirc@157.41.173.174)
[20:54:39] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[20:55:20] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[20:55:28] *** Parts: gv (~kvirc@157.41.173.174) (No boundaries on the net!)
[20:55:47] *** Joins: zhiayang (~zhiayang@user/zhiayang)
[20:56:30] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[20:56:31] <nitrix> I don't think classifying stacks as data structures changes anything about their complexity. The complexity stays the same no matter what you call them.
[20:57:54] <nitrix> For what it's worth, I think the naive stack is simpler to implement for a C beginner than the naive linked list.
[20:57:55] *** Joins: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net)
[20:58:04] <floatcomplex> of course
[20:58:21] <floatcomplex> anyway, the original incorrect assumption was that a data structure with generic push and pop functions/subroutines was a necessity for implementing an rpn calculator. it's actually easier if you inline that stuff
[20:59:19] <nitrix> I imagine the primitive types are all known. Maybe a union type?
[20:59:20] <floatcomplex> you can describe the operation of such a calculator in that language, but it doesn't have to be a blueprint for how to implement it
[20:59:51] <floatcomplex> tagged union...if it comes to that
[21:00:04] *** Joins: Trashlord (~trash@user/trashlord)
[21:00:32] <floatcomplex> if it's a calculator you just want an appropriate "number" type of some sort depending on the application
[21:00:36] <sham1> One reason I'd use a separate push or pop instead of just inlining for a lot of things is because one needs to consider the error conditions. Inlining the whole mantra of "if this stack has nothing, report that you're trying to pop from a stack" could get tiring even if it gets macro'd
[21:01:00] <damxsa> have anyone used __128int?
[21:01:06] <sham1> Small functions like that are likely to get inlined anyhow
[21:01:25] <floatcomplex> sham1: leading to https://gist.github.com/rlcamp/0b18060fc5d521ac54f460ba9f5e75ef#file-qrpn-c-L364-L370
[21:01:27] <candide> Title of floatcomplex's link: qrpn.c · GitHub
[21:01:37] <damxsa> has*
[21:01:52] <sham1> Mmhm
[21:02:41] <floatcomplex> even in that situation i think the appropriate level of abstraction lies further out in the call tree than just push/pop
[21:03:21] <nitrix> They'll be implementing their own operations too most likely. Swap, dig, rotate, dup, so there's that to consider too.
[21:03:57] <floatcomplex> right, and "pick" breaks the stack metaphor entirely
[21:04:50] <doppel> floatcomplex: what is that, some kind of unit conversion tool?
[21:05:01] <floatcomplex> doppel: yeah
[21:05:10] <floatcomplex> ,qrpn 2 joule 3 second div
[21:05:11] <candide> floatcomplex: 0.666667 watt
[21:05:18] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[21:05:55] <floatcomplex> unlike ,qcalc it's opinionated about what operations with what units are legal
[21:06:18] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:06:29] <nitrix> So it refuses imperial units, right?
[21:06:33] <floatcomplex> lol
[21:06:41] <floatcomplex> imperal is fine, just don't try to take the cosine of 2 feet
[21:06:51] <floatcomplex> which qalc will happily let you do
[21:07:13] *** topside_ is now known as topside
[21:07:23] <pragma-> i think i enabled the option that makes qalc more strict about units
[21:07:32] <floatcomplex> ,qalc sin(2 foot)
[21:07:33] <candide> floatcomplex: sin(2 foot) = sin(2 feet)
[21:07:45] <floatcomplex> lol no it's just more pedantic about english
[21:08:02] <floatcomplex> ,qrpn 2 foot sin
[21:08:02] <candide> floatcomplex: error: arg must be unitless
[21:08:10] <pragma-> it won't break up the units until adjacent multiples any longer
[21:08:28] <floatcomplex> ah
[21:09:20] <nitrix> ,qalc cos(2 feet) - sin(1 foot)
[21:09:20] <candide> nitrix: cos(2 feet) - sin(1 foot) = cos(2 feet) − sin(1 foot)
[21:09:33] <nitrix> I was hoping for a rotation angle in radian.
[21:09:54] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[21:09:56] <floatcomplex> i imagine that qalc is just symbolically carrying through things that don't make sense assuming they might make sense later?
[21:10:02] <floatcomplex> ,qalc asin(sin(2 feet))
[21:10:02] <candide> floatcomplex: asin(sin(2 feet)) = arcsin(sin(2 feet))
[21:10:04] <floatcomplex> nope
[21:10:26] *** Joins: useretail_ (~useretail@185.132.19.151)
[21:10:31] *** Joins: kts (~kts@103.73.237.54)
[21:10:34] <floatcomplex> ,qalc log(exp(2 feet))
[21:10:34] <candide> floatcomplex: log(exp(2 feet)) = ln(e^(2 foot)) ≈ ln(7.389056099^foot)
[21:10:41] *** Joins: mrig_ (~AdiIRC@2a01:cb1c:abc:de00:fc08:1a1e:4b2c:e50)
[21:10:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[21:10:41] *** Quits: useretail (~useretail@185.132.19.151) (Remote host closed the connection)
[21:10:42] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[21:10:46] <floatcomplex> O_o
[21:10:59] *** Quits: coc0nut (~coc0nut@user/coc0nut) (Excess Flood)
[21:10:59] <floatcomplex> ^foot
[21:11:38] *** Quits: doppel (~chatzilla@ip70-170-24-52.lv.lv.cox.net) (Quit: ChatZilla 0.9.93 [Firefox 56.0.2/20171024165158])
[21:13:09] *** Quits: mrig (~AdiIRC@user/mrig) (Ping timeout: 268 seconds)
[21:13:46] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[21:14:18] <sham1> Well yeah, since you're multiplying 2 by the foot, and e^{ab} = e^{a^b}
[21:14:20] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[21:14:34] *** Quits: TommyC (~TommyC@user/tommyc) (Ping timeout: 260 seconds)
[21:15:23] <floatcomplex> assuming foot was a placeholder for a unitless quantity
[21:15:27] <floatcomplex> which, in context, it is not
[21:16:24] *** Joins: BlueShark (sid10311@user/blueshark)
[21:16:26] <floatcomplex> anyway we've been down this road
[21:16:33] <sham1> Well qalc clearly doesn't know rhat
[21:17:10] <pragma-> ,qalc 1 flooty + 2 pooties - 3 snooties
[21:17:10] <candide> pragma-: 1 flooty + 2 pooties - 3 snooties = "flooty" + 2 "pooties" − 3 "snooties"
[21:17:21] <pragma-> it puts unknown things in double quotes apparently
[21:17:40] <floatcomplex> then it should put feet in double quotes, in ln(7.389056099^foot)
[21:17:57] <floatcomplex> foots whatever
[21:19:27] <floatcomplex> the graphical version of qrpn goes so far as to gray out the buttons for log, sin, cos &c. if the operand at the top of the stack isn't unitless, so you would never even see that error
[21:19:47] *** Joins: topside (~topside@ip68-226-238-34.lf.br.cox.net)
[21:21:37] <floatcomplex> wtb an hp-48 with physical buttons that you physically cannot push if there would immediately be an error. it's not like it doesn't have the compute power to speculatively evaluate each button
[21:23:49] <nomagno> I'm actually finding this little 200-line framework very comfy and useful! I will definitely not publish it individually, but the file with the macros is under the BSD-3-Clause
[21:24:01] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:24:14] *** Quits: topside_ (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[21:25:02] *** Joins: TommyC (~TommyC@user/tommyc)
[21:25:48] <nomagno> Just 'a bit' (A LOT) of syntantic sugar for nested structs trough macros gets rid of most boilerplate
[21:27:24] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[21:29:49] <sham1> BSD-3 is a nice license
[21:30:01] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[21:30:07] <sham1> I feel that maybe MIT or ICS might be better but at least it's very permissive anyhow
[21:30:35] *** Joins: V-T60 (~v@91.203.24.166)
[21:30:36] <pragma-> licenses are more of a suggestion anyway
[21:32:03] *** Joins: TommyC7 (~TommyC@45.92.124.114)
[21:32:11] *** Quits: TommyC (~TommyC@user/tommyc) (Ping timeout: 264 seconds)
[21:32:53] *** Joins: vicfred (~vicfred@user/vicfred)
[21:33:14] <sham1> I don't know if I'd go that far. The licenses have their uses. For example using GPLv3+ can drive away corporate people which may be both good and bad
[21:33:50] *** Quits: TommyC7 (~TommyC@45.92.124.114) (Client Quit)
[21:34:26] <pragma-> On the other hand, plenty of corporations steal GPL code all the time.
[21:34:49] <sham1> I mean that's true
[21:36:38] <floatcomplex> gplv3+ is reasonable if you are making a tool that is meant to be used as-is and not incorporated into a larger thing
[21:36:51] <floatcomplex> like gcc
[21:37:41] <floatcomplex> but the "gcc is meant to be used as-is and we don't want corporations building it into a larger thing" stance is what directly led to clang getting a ton of funding and becoming a viable alternative
[21:37:53] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[21:38:02] <floatcomplex> so...everybody wins, but perhaps not in the way they expected
[21:39:21] <fizzie> sham1: "e^{ab} = e^{a^b}" isn't true at all. I mean, just consider a = 1, b = 2: e^{ab} = e^{1*2} = e^2; e^{a^b} = e^{1^2} = e^1 = e. I think you must have meant e^{ab} = (e^a)^b instead.
[21:39:34] <sham1> Yeah
[21:39:52] <sham1> I made a mistake with my maths
[21:39:53] <floatcomplex> fizzie: it's "undefined behaviour" if a or b is feet though so it's not even wrong
[21:39:59] <sham1> That's also true
[21:42:24] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:42:34] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 260 seconds)
[21:42:37] <quartz> Hello. I'm using this API: https://bpa.st/ET4Q   to build this program: https://bpa.st/QURQ  At line 42, I pass into addAfter the pointer entry which is of type struct MdbRec. addAfter will assign entry to the data field of struct Node, which is a void pointer. I'm wondering why the data field does not get converted from void to struct MdbRec during the addAfter call.
[21:43:14] <quartz> Because on line 63-67 of my program, gcc tells me "trying to dereferece a null pointer"
[21:43:24] *** Joins: yangby (~secret@125.120.162.167)
[21:43:30] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[21:43:50] <floatcomplex> quartz: i think you're misinterpreting that error message?
[21:44:11] <quartz> Uhhh let me try to compile it again...
[21:44:16] *** Quits: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32) (Ping timeout: 245 seconds)
[21:44:17] *** Joins: phao (~phao@2804:d45:8e7a:de00:51ff:6512:6ae:9faa)
[21:44:18] <floatcomplex> or did it say trying to dereference a void pointer
[21:44:30] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[21:45:06] *** Quits: V-T60 (~v@91.203.24.166) (Remote host closed the connection)
[21:45:16] <quartz> warning: dereferencing ‘void *’ pointer
[21:45:33] <floatcomplex> right. different than a null pointer
[21:45:34] <quartz> At line 63, 64, etc... 
[21:45:40] <quartz> Oh! Sorry lol my bad
[21:45:46] <quartz> Yes that's what I meant
[21:46:02] <quartz> Than at line 63, it also says: error: request for member ‘name’ in something not a structure or union
[21:46:29] <quartz> So again, I'm not sure what's going on because the data field should point to a struct MdbRec pointer.
[21:46:46] <quartz> and that struct has fields char name, char msg
[21:46:52] <floatcomplex> this is a simple code omission but also one of the fundamental problems with implementing linked lists using a generic one-size-fits-all linked list implementation
[21:47:03] *** Quits: yangby (~secret@125.120.162.167) (Client Quit)
[21:47:04] <floatcomplex> you have to explicitly cast the void pointer back to the type you expect it to be
[21:47:24] <floatcomplex> so main() has no way of knowing that curr->data is a struct MbdRec *
[21:47:26] <floatcomplex> until you tell it
[21:47:45] <quartz> floatcomplex: I thought so, but why dosent' the void pointer become a struct MdbRec pointer during assignment?
[21:48:03] <floatcomplex> you're not assigning it anywhere
[21:48:08] <floatcomplex> if you were, it would work
[21:48:33] *** Joins: strajder (~strajder@user/strajder)
[21:48:55] <quartz> floatcomplex: I should be, during addAfter, I pass in entry which is a pointer to struct MdbRec line 42
[21:49:13] *** Joins: kadavul (~vazha@103.165.20.164)
[21:49:21] <floatcomplex> quartz: i'm looking specifically where you're getting the errors, in the loop body from line 49-72
[21:49:39] <floatcomplex> the type "struct MbdRec *" appears nowhere in that loop body
[21:49:41] *** Quits: kts (~kts@103.73.237.54) (Quit: Konversation terminated!)
[21:50:08] <floatcomplex> there is only an assignment to "struct Node * curr" for the container type, meaning curr->data is still a void pointer
[21:51:08] <quartz> floatcomplex: That's the block of code that searches for the user generated string in the linked list. But if you'll notice at the other while loop above it, I create the linked list structure, and use struct MdbRec *entry
[21:51:25] <quartz> And I pass that into addAfter, which should assign entry to data field
[21:51:35] <floatcomplex> quartz: yes, and none of the type information from that place in the code is carried to the later place where the errors are
[21:51:48] <floatcomplex> because you're passing it through a void pointer
[21:52:00] <floatcomplex> which you're doing because you were told to make a generic linked list implementation
[21:52:06] <floatcomplex> this right here is why those are a bad idea
[21:53:45] <floatcomplex> if you changed "void * data" to "struct MbdRec * data" in the .h file, then your errors would go away, and your linked list would no longer be generic
[21:53:54] <floatcomplex> and your professor would whine about it
[21:54:16] <quartz> floatcomplex: So, addAfter's prototype expects a void *data pointer, but shouldn't passing a struct MdbRec *entry into addAfter change the data type of data?
[21:54:21] <quartz> Errr, does that make sense? sorry
[21:54:27] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[21:54:59] <quartz> like addafter is saying: OK I'll take ANY pointer becuase I expect a void pointer. I pass in a char pointer and the void pointer should convert to char pointer right?
[21:55:08] <floatcomplex> no
[21:55:12] <floatcomplex> none of that happens
[21:55:42] <floatcomplex> think more primitively
[21:55:46] <pragma-> you must explicitly convert from pointers to void.
[21:55:57] <floatcomplex> other way around
[21:56:25] *** Quits: rsarson (~rsarson@2607:fea8:29e1:b000::b67c) (Quit: Leaving.)
[21:56:32] <fizzie> Types in C are static. With a definition like `struct Node { void *data; ... }`, the type of the expression `curr->data` is `void *`, no matter where that `void *` value came from when the program was actually executed.
[21:56:39] <floatcomplex> quartz: assigning the value of "entry" to "data" is correct, but none of the type information of waht "entry" was goes along with the value
[21:57:08] <floatcomplex> quartz: so you have to know, later, to assign it back to a "struct MbdRec *" before you can dereference it
[21:57:21] <floatcomplex> and the compiler cannot, at compile time or runtime, do that for you or check that you've done it correctly
[21:57:33] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[21:58:30] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[21:58:35] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[21:59:13] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Client Quit)
[21:59:38] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[21:59:49] *** Joins: rsarson (~rsarson@2607:fea8:29e1:b000::b67c)
[22:00:17] *** Quits: phao (~phao@2804:d45:8e7a:de00:51ff:6512:6ae:9faa) (Quit: Leaving)
[22:00:55] <quartz> floatcomplex: OK thanks so much
[22:01:01] <quartz> I'll try to fix it now
[22:01:47] <floatcomplex> quartz: yeah all you need to do is add something like "struct MbdRec * curr_data = curr->data" inside the inner while loop 
[22:02:01] <floatcomplex> and then dereference curr_data->name instead of curr->data->name
[22:02:59] <quartz> floatcomplex: OK I'll try that, thanks.
[22:03:01] *** Joins: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374)
[22:05:15] *** Joins: darkstardevx (~darkstard@50.39.114.152)
[22:05:46] *** Quits: alch (~alch@151.34.25.68) (Read error: Connection reset by peer)
[22:06:51] <floatcomplex> you can also do ((struct MbdRec *)curr->data)->name if you want to get fucked up about it. it's not any more or less dangerous, it's just ugly
[22:09:35] <Thedarkb-Desktop> I used to do that before I knew about ->
[22:09:54] <Thedarkb-Desktop> err
[22:09:59] <Thedarkb-Desktop> wait, no, I misread that.
[22:10:27] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:10:35] *** Joins: alch (~alch@151.68.40.215)
[22:10:38] *** Joins: magla (~gelignite@55d4b8af.access.ecotel.net)
[22:11:17] <quartz> floatcomplex: Well your suggestion works, and it compiles, but when I try to run it, I get this very weird message https://bpa.st/VQOA
[22:11:28] <quartz> Something to do with malloc
[22:11:48] <quartz> Oh the debugger, I should have tried that
[22:11:56] <quartz> Sorry
[22:11:59] <floatcomplex> quartz: go to asan first
[22:13:37] <constxd> bro
[22:14:14] <constxd> fgets(input, 1000, stdin) ... if (strlen(input) > 1000)
[22:14:23] <constxd> just casually throwing in a unit test for your libc?
[22:15:25] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[22:15:58] <quartz> constxd: If the input string is greater than 1000 characters, than the program should prompt the user again for input, as the string length should not exceed 1000
[22:16:06] <floatcomplex> for whom doth the bro bro
[22:16:29] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[22:16:52] <quartz> But yeah something about those lines is not right...
[22:16:57] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[22:18:02] <constxd> if you ask fgets to only read 1000 characters into the buffer, how could there ever be more than 1000 characters in the buffer?
[22:18:35] <constxd> that test is unnecessary unless you suspect your C library's implementation of fgets() is broken
[22:19:15] <constxd> actually you only allocated 1000 bytes anyway so if strlen() returns 1000+ you've got UB
[22:19:23] <quartz> constxd: UB?
[22:19:33] <constxd> undefined behavior
[22:19:49] *** Joins: Darkcoal (~user@2001:16a2:77f2:b600:40ab:61ff:fec1:1782)
[22:20:41] <quartz> constxd: Yes, that's what I was trying to detect. I don't want the program to hang or have some memory leak issues. If the user enters a string over some specified length, I want the program to prompt the user again for another string.
[22:21:01] <quartz> Anyway, that's what I was thinking behind that if statement, but obviously it's wrong.
[22:21:42] <constxd> Right
[22:22:19] <constxd> You're reading at most 1000 bytes, so if they enter a line longer than 1000 bytes, the way you would detect that is checking to see if there's no \n in the buffer
[22:24:59] <quartz> constxd: \n meaning they pressed the enter key right?
[22:25:41] <constxd> More or less, yeah
[22:27:52] *** Joins: random-nick (~random-ni@87.116.177.136)
[22:28:03] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[22:28:16] <quartz> So I'd so something like if( strstr(input, "\n") != NULL)
[22:30:48] *** Joins: ARoxdale (~ARoxdale@84.203.31.229)
[22:31:06] <fizzie> That'd *work*, but if you're just looking for one character, `strchr` is more common, and for the special case of checking whether fgets returned a complete line, people often check only the last byte (with `size_t len = strlen(str); if (len > 0 && str[len-1] == '\n') ...`).
[22:32:11] <quartz> OK I'll do that.
[22:32:16] <quartz> Thanks everyone.
[22:33:27] <fizzie> (As a rare case, you might also get a line shorter than 1000 bytes with no '\n' in it if fgets hits EOF after reading *some* bytes but before seeing a newline, which you might want to decide how to interpret.)
[22:33:30] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[22:33:59] *** Quits: Darkcoal (~user@2001:16a2:77f2:b600:40ab:61ff:fec1:1782) (Ping timeout: 264 seconds)
[22:34:34] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:34:55] *** Joins: Darkcoal (~user@2001:16a2:77f2:b600:40ab:61ff:fec1:1782)
[22:35:42] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:35:46] *** Quits: Famine- (~Famine@user/famine) (Ping timeout: 268 seconds)
[22:36:43] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[22:37:17] <constxd> Yeah I was going to mention that. If you want to treat that as a valid input you can handle it nicely like this
[22:40:02] *** Joins: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net)
[22:40:44] <constxd> ,cc char b[8]; fgets(b, sizeof b, stdin); if (strcspn(b, "\n") < sizeof b - 1) puts("Good."); else puts("Too long."); -input=12345
[22:40:45] <candide> constxd: error: 'input' undeclared
[22:41:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:42:10] <constxd> ,cc -stdin "12345" char b[8]; fgets(b, sizeof b, stdin); if (strcspn(b, "\n") < sizeof b - 1) puts("Good."); else puts("Too long.");
[22:42:13] <candide> constxd: Success (no output).
[22:42:39] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:43:02] <constxd> huh.
[22:43:37] <quartz> BRB
[22:45:04] *** Quits: Haxxa (~Haxxa@122.199.46.64) (Quit: Haxxa flies away.)
[22:45:12] <fizzie> I think that just made everything part of the standard input. That's why I always put the -stdin flag at the end.
[22:45:25] <fizzie> (Cf. https://0x0.st/-n0Q.txt -- the pasted output of that.)
[22:46:15] <fizzie> ,cc char b[8]; fgets(b, sizeof b, stdin); if (strcspn(b, "\n") < sizeof b - 1) puts("Good."); else puts("Too long."); -stdin 12345
[22:46:18] <candide> fizzie: Good.
[22:46:19] <fizzie> ,cc char b[8]; fgets(b, sizeof b, stdin); if (strcspn(b, "\n") < sizeof b - 1) puts("Good."); else puts("Too long."); -stdin 12345678
[22:46:21] <candide> fizzie: Too long.
[22:46:50] <constxd> ah, good catch
[22:47:31] <constxd> was it called -input at some point or is my memory failing me
[22:49:07] *** Joins: webmariner (~james@cpc95914-rdng25-2-0-cust148.15-3.cable.virginm.net)
[22:49:08] *** Joins: Haxxa (~Haxxa@122.199.46.64)
[22:49:17] *** Quits: rkta (~kt@62.113.246.111) (Read error: Connection reset by peer)
[22:49:26] *** Joins: rkta (~kt@62.113.246.111)
[22:56:57] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[22:58:11] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[22:58:31] *** Joins: Crescendo (~Crescendo@user/crescendo)
[22:59:34] *** Quits: supernova (~quassel@2405:9800:ba11:6207:8f43:bde3:a0a9:65e2) (Ping timeout: 260 seconds)
[23:03:14] *** Joins: darklands (~darklands@gateway/vpn/pia/darklands)
[23:07:50] *** Joins: Tenn0 (~Tenn0@88.97.110.231)
[23:09:51] *** Joins: k4davul (~vazha@103.165.20.164)
[23:11:35] *** Joins: TommyC (~TommyC@user/tommyc)
[23:12:14] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-b125-ee43-8416-dc8d.res6.spectrum.com)
[23:14:02] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:14:46] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[23:17:24] *** Quits: riksu-raksu (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksu-raksu)
[23:17:25] *** Quits: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[23:17:52] *** Joins: tech_exorcist (~tech_exor@user/tech-exorcist/x-0447479)
[23:19:13] *** Quits: darklands (~darklands@gateway/vpn/pia/darklands) (Quit: Leaving)
[23:19:56] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:21:15] *** Quits: mrig_ (~AdiIRC@2a01:cb1c:abc:de00:fc08:1a1e:4b2c:e50) (Quit: Going offline, see ya! (www.adiirc.com))
[23:22:09] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[23:25:31] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Quit: leaving)
[23:28:38] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:29:05] *** Joins: kish` (~aqua@user/aqua)
[23:30:07] *** Joins: mrig (~mrig@user/mrig)
[23:31:35] *** Quits: chomwitt (~chomwitt@2a02:587:dc02:9f00:12c3:7bff:fe6d:d374) (Ping timeout: 264 seconds)
[23:34:47] *** Quits: OO7 (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:35:36] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:37:02] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:37:32] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:38:13] *** Joins: topside_ (~topside@ip68-226-238-34.lf.br.cox.net)
[23:38:59] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:31] *** Joins: pulse (~pulse@user/pulse)
[23:39:54] *** Quits: quartz (~quartz@user/quartz) (Quit: WeeChat 3.3)
[23:42:22] *** Quits: topside (~topside@ip68-226-238-34.lf.br.cox.net) (Ping timeout: 268 seconds)
[23:45:51] *** Joins: extern (~archer@141.226.62.146)
[23:46:50] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:48:32] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[23:51:37] *** Joins: serbest (~serbest@user/serbest)
[23:55:13] *** Joins: jess (~jess@libera/staff/jess)
[23:56:14] *** Joins: quartz (~quartz@user/quartz)
[23:56:46] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[23:56:55] *** Quits: damxsa (~damx@2001:16a2:ce33:4e00:3604:f881:a16d:7606) (Quit: Leaving)
