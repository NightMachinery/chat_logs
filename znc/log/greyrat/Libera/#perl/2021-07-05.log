[00:02:03] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[00:06:55] <ehuelsmann[m]> LeoNerd: maybe it's too complex to implement. Having custom slot classes allows one one to do things like override the way slot accessors are being generated, which - in common lisp - allows you to even change the way slots are laid out in memory. However, most implementations have optimizations for the non-customized versions for performance reasons.
[00:09:22] <ehuelsmann[m]> The method modifiers are much more desirable. In 20+ years of common lisp, I used custom slot classes once and custom metaclasses only on a few occasions. I used method modifiers on many occasions though. When I started using Moose, the method modifiers in Moose didn't do what I had come to expect from Common Lisp though. I hope your method modifiers come closer.
[00:11:29] <ology> http://ology.net/tmp/audio-player-phone.png sporting basic Bootstrap. Woo
[00:16:46] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[00:20:20] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 265 seconds)
[00:20:20] *** aquanite is now known as aquanight
[00:23:22] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[00:24:37] *** Joins: Judabuda (~ok@user/judabuda)
[00:27:00] * GumbyPAN CPAN Upload: File-XDG-0.07 by PLICEASE https://metacpan.org/release/PLICEASE/File-XDG-0.07
[00:30:01] *** Quits: ex (~ex@user/ctrl) (Remote host closed the connection)
[00:30:32] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[00:31:20] *** Joins: v` (~v@user/ctrl)
[00:35:36] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[00:35:51] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[00:47:02] * GumbyPAN CPAN Upload: App-Licensecheck-v3.2.2 by JONASS https://metacpan.org/release/JONASS/App-Licensecheck-v3.2.2
[00:55:26] *** Quits: magla (~gelignite@55d4825a.access.ecotel.net) (Quit: Stay safe!)
[01:00:44] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (Quit: leaving)
[01:05:00] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[01:10:27] *** Joins: Manderson (~manderson@27.sub-174-208-225.myvzw.com)
[01:11:22] *** Joins: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[01:12:03] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 265 seconds)
[01:23:31] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[01:24:07] *** Joins: Judabuda (~ok@user/judabuda)
[01:29:06] *** Joins: curdlesnoot (~curdlesno@2a03:1b20:1:e011::a21d)
[01:54:48] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[01:55:33] *** Quits: Dorward_ (~dorward@daviddorward.plus.com) (Ping timeout: 265 seconds)
[02:01:11] *** Joins: whynot (~whynot@37.73.58.222)
[02:02:05] *** Joins: monkey_ (~user@190.104.116.134)
[02:03:54] *** Quits: jjhoo (jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi) (Remote host closed the connection)
[02:04:08] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[02:04:24] *** Joins: yzhernand (~yzhernand@2607:fb90:54d9:4106:448f:d6ff:fe0f:14c8)
[02:06:49] *** Joins: jjhoo (~jahakala@dsl-trebng21-58c18f-56.dhcp.inet.fi)
[02:07:39] *** Joins: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net)
[02:09:05] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[02:09:20] *** Quits: Manderson (~manderson@27.sub-174-208-225.myvzw.com) (Ping timeout: 272 seconds)
[02:17:11] * GumbyPAN CPAN Upload: Finance-Quote-1.51 by BPSCHUCK https://metacpan.org/release/BPSCHUCK/Finance-Quote-1.51
[02:17:12] * GumbyPAN CPAN Upload: Apache-OneTimeURL-1.35 by JANITOR https://metacpan.org/release/JANITOR/Apache-OneTimeURL-1.35
[02:19:55] *** Quits: Judabuda (~ok@user/judabuda) (Quit: Gone.)
[02:22:12] * GumbyPAN CPAN Upload: Data-Formula-0.02 by JKUTEJ https://metacpan.org/release/JKUTEJ/Data-Formula-0.02
[02:24:37] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[02:25:46] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 252 seconds)
[02:28:50] <LeoNerd> ehuelsmann[m]: Well rather than mere hoping for what I choose to implement, why not add a comment on the modifiers issue to explain what it is you actually want, thus helping me set the direction towards it
[02:30:47] <ehuelsmann[m]> LeoNerd: in the cor repo? Sure.
[02:32:56] <LeoNerd> or Object::Pad
[02:33:48] *** Joins: whynot_ (~whynot@37.73.42.10)
[02:34:01] *** Quits: whynot (~whynot@37.73.58.222) (Killed (NickServ (GHOST command used by whynot_!~whynot@37.73.42.10)))
[02:34:11] *** whynot_ is now known as whynot
[02:34:44] <nirnam> what perl.vim syntax do vim user used here?
[02:35:45] <nirnam> both vim-perl and vim default syntax script are really acting up, not important stuff but anoyying
[02:36:15] <simcop2387> nirnam: this is mine but it's not all that customized really for perl syntax hilighting.  https://www.simcop2387.info/vimrc
[02:36:32] <simcop2387> i'm using vim-perl
[02:36:53] <simcop2387> got an example of it messing up?
[02:37:49] <nirnam> yes anon sub inside a sub didn't indent closing bracket
[02:38:30] <nirnam> it just put them at the begining of the line and I have to go down and tab it back
[02:39:35] <nirnam> for vim default syntax, it just didn't recognized experimental signatures at all
[02:40:16] *** Joins: jpmh (uid445439@id-445439.stonehaven.irccloud.com)
[02:41:11] <jpmh> can someone remind me please why any use #!/usr/bin/env perl rather than #!/usr/bin/perl as the shebang line?
[02:41:43] <nirnam> because my perl is in the local, I guess?
[02:41:44] <Adura> perlbrew likes that.
[02:41:57] <Grinnz> jpmh: to use the perl preferred by the user's PATH
[02:42:10] <Grinnz> for cpan modules though, don't use /usr/bin/env perl because it won't be rewritten on install
[02:42:23] <Grinnz> but for non-cpan distribution it's ideal
[02:43:08] *** Quits: yzhernand (~yzhernand@2607:fb90:54d9:4106:448f:d6ff:fe0f:14c8) (Ping timeout: 256 seconds)
[02:43:19] <Grinnz> the other time you don't want to use /usr/bin/env perl is when deploying a script to be used with a specific perl. then just make the shebang that specific perl
[02:43:52] <jpmh> Grinnz: why is it ideal other than that it does use the path for perl?  Adura, I get it for perlbrew, that makes sense now, nirnam what do you mean?
[02:44:15] <Grinnz> jpmh: do you need another reason? it uses the perl that user would get by writing 'perl'
[02:44:22] <Grinnz> thus generally the preferred one
[02:44:36] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[02:45:01] <nirnam> jpmh: I just mean my perl is in different path as your, or who ever might write the scirpt, and for my users as well
[02:45:41] <jpmh> Grinnz: YEP - ty
[02:45:46] <jpmh> nirnam: TY
[02:45:56] <Adura> You'd think #!perl would suffice, but guess it's more complicated than that.
[02:46:11] <Grinnz> that doesn't work directly
[02:46:17] <Grinnz> (though it does get rewritten for cpan distributions)
[02:46:39] <Grinnz> env is essentially the way to get that to work as a shebang
[02:46:55] <Grinnz> the kernel needs an actual program to run, it won't use PATH
[02:47:55] <nirnam> if you used sh as shell, #!perl will deffinitely throw an bad interpretor
[02:55:06] *** Quits: KnoP (~KnoP@p57b1920f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:56:27] <curdlesnoot> not necessarily. for example, bash will indicate a "bad interpreter" but various sh implementations won't (dash and busybox ash off the top of my head).
[02:57:47] <curdlesnoot> they'll handle the error, of course, but the exact nature of the error message varies.
[03:00:11] <nirnam> bash is the only thing I know that throw that error, I'm actually using zsh, but when I do write shellscript I gotta write it in bash, since you know, everybody have bash
[03:00:41] <curdlesnoot> <nod> I only piped up because you said "sh" and "definitely". I realise it's not particularly important.
[03:01:33] <nirnam> understandable, I'm sorry my english isn't industrail grade, I only ever used it in irc actually
[03:02:18] <curdlesnoot> oh. well, given that, you seem to be doing fine.
[03:03:54] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 252 seconds)
[03:07:30] <nirnam> I know some distro that sh symlink to bash by default, so when peoples write #!/bin/sh what they mean is default shell which is likely to bash
[03:07:36] <curdlesnoot> yeah
[03:07:47] <Grinnz> jpmh: thanks for the inspiration https://dev.to/grinnz/the-perl-shebang-1ojg
[03:07:48] <Paperbot> Link title(s): [ The Perl Shebang - DEV Community ]
[03:07:58] <curdlesnoot> nirnam: so does the bot here, for that matter.
[03:09:25] <jpmh> Grinnz: NO - Thank you!  That is great.
[03:14:51] <Grinnz> perlbot: shebang
[03:14:52] <perlbot> Grinnz: the #! in #!/usr/bin/perl - might also be /usr/bin/env perl and then #!perl -Corwhatevs to set flags on subsequent lines (but not -T) - see also http://www.in-ulm.de/~mascheck/various/shebang/
[03:15:05] <Grinnz> perlbot: shebang is also https://dev.to/grinnz/the-perl-shebang-1ojg
[03:15:05] <perlbot> Grinnz: Stored shebang is the #! in #!/usr/bin/perl - might also be /usr/bin/env perl and then #!perl -Corwhatevs to set flags on subsequent lines (but not -T) - see also http://www.in-ulm.de/~mascheck/various/shebang/ | https://dev.to/grinnz/the-perl-shebang-1ojg
[03:15:05] <Paperbot> Link title(s): [ The Perl Shebang - DEV Community ]
[03:18:32] <haarg> Grinnz: might be worth including that additional flags can be specified on the shebang, but not when using env
[03:18:45] <Grinnz> literally just adding that :D
[03:19:34] <curdlesnoot> although, this is not true of GNU env
[03:26:42] *** Joins: jabberwok (~wlindley@75.105.20.104)
[03:34:09] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 258 seconds)
[03:37:52] <haarg> "#!/usr/bin/env perl -w" does not work with GNU env for me
[03:38:09] <curdlesnoot> basheval: echo test
[03:38:11] <perlbot> curdlesnoot: test␤ 🇺🇸
[03:38:13] <curdlesnoot> ok
[03:38:41] <curdlesnoot> basheval: printf '%s\n' '#!/usr/bin/env -S perl -T' 'exec "true"' > exe; chmod +x exe; ./exe
[03:38:42] <perlbot> curdlesnoot: Insecure $ENV{PATH} while running with -T switch at ./exe line 2.␤[Exited 255] 🇺🇸
[03:38:48] <curdlesnoot> freebsd can do this also, I believe.
[03:39:14] *** Joins: whynot_ (~whynot@37.73.102.205)
[03:39:26] *** Quits: whynot (~whynot@37.73.42.10) (Killed (NickServ (GHOST command used by whynot_!~whynot@37.73.102.205)))
[03:39:27] <haarg> must be recent
[03:39:35] *** whynot_ is now known as whynot
[03:39:36] <Grinnz> it is
[03:40:01] <haarg> macos uses freebsd's env and it supports -S
[03:40:15] <curdlesnoot> nice. I was just wondering about that.
[03:42:11] <curdlesnoot> hmm. what do you know. freebsd had it first: https://github.com/coreutils/coreutils/commit/668306e
[03:42:12] <Paperbot> Link title(s): [ env: add -S/--split-string option · coreutils/coreutils@668306e · GitHub ]
[03:42:14] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[03:49:03] *** Joins: YaoNai (~YaoNai@user/yaonai)
[03:50:35] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 265 seconds)
[03:56:00] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 258 seconds)
[03:57:58] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[03:58:16] *** Quits: brtastic (~bartosz@185.24.91.138) (Ping timeout: 272 seconds)
[04:01:22] <nirnam> I think I fixed vim-perl anon sub not indent problem
[04:01:51] <nirnam> switch perlSubName regex with the vim depault perl.vim one
[04:06:55] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:22:55] *** Parts: YaoNai (~YaoNai@user/yaonai) ()
[04:36:11] *** Joins: silverwhitefish (~hidden@47.202.102.10)
[04:42:43] *** Joins: willthechill (~willthech@c-98-195-95-27.hsd1.tx.comcast.net)
[04:44:04] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[04:50:57] *** Quits: johnjay (~pi@38.120.10.99) (Ping timeout: 268 seconds)
[04:50:57] *** Quits: whynot (~whynot@37.73.102.205) (Quit: leaving)
[05:09:03] *** Joins: Dorward_ (~dorward@daviddorward.plus.com)
[05:09:36] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 258 seconds)
[05:37:32] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[05:39:27] *** Joins: Martchus_ (~martchus@2a01:c23:b9f4:2d00:d250:99ff:fe49:3cce)
[05:40:06] <haarg> i'm using this https://github.com/vim-perl/vim-perl/pull/282 to fix indentation after a sub
[05:40:07] <Paperbot> Link title(s): [ Add an indent when synid is perlSubDeclaration by egawata · Pull Request #282 · vim-perl/vim-perl... ]
[05:40:47] *** Quits: Martchus (~martchus@dynamic-077-007-035-118.77.7.pool.telefonica.de) (Ping timeout: 265 seconds)
[05:41:50] <haarg> also this patch https://github.com/vim-perl/vim-perl/issues/259#issuecomment-617048620 to fix some performance issues
[05:41:52] <Paperbot> Link title(s): [ Syntax slow, esp perlFormat and perlString · Issue #259 · vim-perl/vim-perl · GitHub ]
[05:55:42] <nirnam> haarg: amazing, I just removed perlSubDeclaration entirely, and moved it container into perlSubName
[05:57:33] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[06:06:14] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Quit: Paperbot)
[06:06:17] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Quit: Repaster)
[06:09:49] *** Joins: Repaster (~Repaster@ool-2f148218.dyn.optonline.net)
[06:09:49] *** Quits: Repaster (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[06:09:49] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[06:09:52] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[06:09:52] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[06:09:52] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[06:24:28] *** Joins: Su-Shee_ (~Susanne@p4ff49c5f.dip0.t-ipconnect.de)
[06:28:09] *** Quits: Su-Shee (~Susanne@p4ffc732c.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[06:30:54] *** Quits: nirnam (~nirnam@1.47.142.234) (Ping timeout: 272 seconds)
[06:31:39] * GumbyPAN CPAN Upload: Tree-Term-20210703 by PRBRENAN https://metacpan.org/release/PRBRENAN/Tree-Term-20210703
[06:37:04] *** Joins: nirnam (~nirnam@1.47.142.234)
[06:55:51] *** Joins: Martchus (~martchus@2a01:c22:6e55:1600:d250:99ff:fe49:3cce)
[06:56:42] *** Quits: Martchus_ (~martchus@2a01:c23:b9f4:2d00:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[06:59:13] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[07:00:58] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:04:40] *** Quits: Pali (~pali@user/pali) (Remote host closed the connection)
[07:14:49] *** Quits: jabberwok (~wlindley@75.105.20.104) (Quit: Leaving.)
[07:18:01] <genio> simcop2387: This gets a few things started/installed: https://github.com/genio/strawberry_builds/blob/main/setup_env.ps1
[07:18:02] <Paperbot> Link title(s): [ strawberry_builds/setup_env.ps1 at main · genio/strawberry_builds · GitHub ]
[07:19:22] <genio> There is a lot more going on over here, but that part is at least a start. I'll update that repo as I get a few more things figured out and in place
[07:24:37] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (Quit: Coyote finally caught me)
[07:27:09] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[07:27:32] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[07:28:22] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[07:29:08] *** Joins: johnjay (~pi@38.120.10.99)
[07:29:26] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (Client Quit)
[07:33:28] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[07:35:58] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 252 seconds)
[07:44:25] *** Joins: Martchus_ (~martchus@dynamic-095-117-139-211.95.117.pool.telefonica.de)
[07:44:42] *** Quits: Martchus (~martchus@2a01:c22:6e55:1600:d250:99ff:fe49:3cce) (Ping timeout: 240 seconds)
[07:56:48] * GumbyPAN CPAN Upload: Date-ManipX-Almanac-0.000_904 by WYANT https://metacpan.org/release/WYANT/Date-ManipX-Almanac-0.000_904
[08:04:00] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 272 seconds)
[08:08:21] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:26:48] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[08:29:42] *** Quits: Dorward_ (~dorward@daviddorward.plus.com) (Ping timeout: 258 seconds)
[08:32:41] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[08:32:56] *** Joins: tejr (~tejr@user/tejr)
[08:36:53] *** Joins: SincereFox (uid337158@user/sincerefox)
[08:42:17] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[08:43:55] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:46:54] * GumbyPAN CPAN Upload: Perl-Lexer-0.35 by ISHIGAKI https://metacpan.org/release/ISHIGAKI/Perl-Lexer-0.35
[09:11:34] *** Joins: rindolf (~rindolf@87.68.241.247.adsl.012.net.il)
[09:13:06] *** Quits: curdlesnoot (~curdlesno@2a03:1b20:1:e011::a21d) (Ping timeout: 240 seconds)
[09:24:38] <rindolf> hi all, sup?
[09:25:36] *** Quits: digitalbot (~bot@user/digitalbot) (Ping timeout: 252 seconds)
[09:31:55] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[09:31:55] *** Quits: darxun (sid504814@id-504814.tinside.irccloud.com) (*.net *.split)
[09:31:55] *** Quits: Zubin (rubin@2600:3c02::f03c:91ff:fe70:4a45) (*.net *.split)
[09:31:55] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[09:31:55] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (*.net *.split)
[09:31:55] *** Quits: neilb__ (sid492745@id-492745.charlton.irccloud.com) (*.net *.split)
[09:31:55] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[09:31:55] *** Quits: Champi (Champi@damn.e-leet.be) (*.net *.split)
[09:31:55] *** Quits: timlegge (~quassel@142.167.255.204) (*.net *.split)
[09:31:55] *** Quits: daxim (~daxim@095129203238.i3.akis.net) (*.net *.split)
[09:31:55] *** Quits: Sophira (~sophie@matrix.theblob.org) (*.net *.split)
[09:32:02] *** Joins: neilb___ (sid492745@id-492745.charlton.irccloud.com)
[09:32:03] *** Joins: Zubi[n] (rubin@2600:3c02::f03c:91ff:fe70:4a45)
[09:32:04] *** Joins: bleb_ (~cm@user/bleb)
[09:32:05] *** Joins: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr)
[09:32:05] *** Joins: Sophira_ (~sophie@matrix.theblob.org)
[09:32:06] *** Quits: NODE (~NODE@2a03:4000:1a:7aa::2) (Excess Flood)
[09:32:10] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[09:32:23] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[09:32:24] *** Joins: daxim (~daxim@2a02:b18:c13b:28:42b0:76ff:fe7b:7663)
[09:32:30] *** Joins: Xe (~cadey@lufta.cetacean.club)
[09:33:22] *** Quits: randir (~randir@95-25-192-120.broadband.corbina.ru) (Remote host closed the connection)
[09:33:58] *** Quits: Bossi (~quassel@p4fc22308.dip0.t-ipconnect.de) (*.net *.split)
[09:33:58] *** Quits: adhoc (adhoc@spot.ubermonkey.net) (*.net *.split)
[09:33:58] *** Quits: SysPete (~SysPete@fin.sysnix.com) (*.net *.split)
[09:33:58] *** Quits: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com) (*.net *.split)
[09:33:58] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:33:58] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (*.net *.split)
[09:33:58] *** Quits: Yaakov (sid19863@user/Yaakov) (*.net *.split)
[09:33:58] *** Quits: usr1 (select@fosshost/director/corwin) (*.net *.split)
[09:33:58] *** Quits: corwin (someone@fosshost/director/corwin) (*.net *.split)
[09:33:58] *** Quits: schelcj (~schelcj@096-035-119-047.res.spectrum.com) (*.net *.split)
[09:33:58] *** Quits: edr (~edr@user/edr) (*.net *.split)
[09:33:58] *** Quits: ingy (~ingy@104.236.228.44) (*.net *.split)
[09:33:58] *** Quits: veesh (~veesh@89.237.118.45) (*.net *.split)
[09:33:58] *** Quits: dngor (abuse@104-136-128-018.biz.spectrum.com) (*.net *.split)
[09:33:58] *** Quits: APic (apic@apic.name) (*.net *.split)
[09:33:58] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[09:33:58] *** Quits: rjbs (sid498898@id-498898.highgate.irccloud.com) (*.net *.split)
[09:33:58] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[09:33:58] *** Quits: esm2 (~esm@esm.me.uk) (*.net *.split)
[09:33:59] *** Quits: odc (sid197788@id-197788.brockwell.irccloud.com) (*.net *.split)
[09:34:05] *** Joins: esm2_ (~esm@esm.me.uk)
[09:34:08] *** Joins: edr (~edr@enlo.co)
[09:34:09] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[09:34:11] *** Joins: EPic_ (apic@apic.name)
[09:34:12] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[09:34:13] *** Joins: Yaakov (sid19863@id-19863.tinside.irccloud.com)
[09:34:18] *** Joins: rjbs (sid498898@id-498898.highgate.irccloud.com)
[09:34:25] *** Joins: odc_ (sid197788@id-197788.brockwell.irccloud.com)
[09:34:26] *** Joins: schelcj (~schelcj@096-035-119-047.res.spectrum.com)
[09:34:33] *** Joins: wlsn (~wlsn@79-75-247-141.dynamic.dsl.as9105.com)
[09:34:36] *** Joins: usr1 (~select@ghostwheel.bru.st)
[09:35:16] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[09:35:16] *** Quits: ongolaboy (~willy@2a0a:e5c0:2:12:0:f0ff:fea9:c45c) (*.net *.split)
[09:35:16] *** Quits: davebaker (sid143727@id-143727.tooting.irccloud.com) (*.net *.split)
[09:35:16] *** Quits: madduck (~madduck@user/madduck) (*.net *.split)
[09:35:16] *** Quits: rndusr (~rndusr@user/rndusr) (*.net *.split)
[09:35:16] *** Quits: tyldis (~vidar@2a03:b0c0:2:d0::80c:c001) (*.net *.split)
[09:35:16] *** Quits: leont (sid489095@highgate.irccloud.com) (*.net *.split)
[09:35:16] *** Quits: jelly (jelly@user/jelly) (*.net *.split)
[09:35:16] *** Quits: samcv (~samcv@194.233.102.77) (*.net *.split)
[09:35:16] *** Quits: eldritch__ (~eldritch@134.209.221.71) (*.net *.split)
[09:35:16] *** Quits: a6502 (~wieger@stofzuiger.a6502.net) (*.net *.split)
[09:35:16] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[09:35:16] *** Quits: romel (~romel@romel.org.ua) (*.net *.split)
[09:35:16] *** Quits: rfi (~rfi@user/rfi) (*.net *.split)
[09:35:17] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[09:35:17] *** Quits: Somni (insomnia@193-227-58-66.gci.net) (*.net *.split)
[09:35:17] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[09:35:17] *** Quits: Pny (pny1312@user/pny) (*.net *.split)
[09:35:17] *** Quits: Spiney (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[09:35:17] *** Quits: mjgardner (sid182628@id-182628.charlton.irccloud.com) (*.net *.split)
[09:35:17] *** Quits: megaTherion (~therion@unix.io) (*.net *.split)
[09:35:17] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (*.net *.split)
[09:35:17] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[09:35:17] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (*.net *.split)
[09:35:17] *** Quits: Botje- (~Botje@mang.sgaap.be) (*.net *.split)
[09:35:17] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[09:35:17] *** Quits: Russell (russell@bnc4free/staff/russell) (*.net *.split)
[09:35:17] *** Quits: Juerd (juerd@computervrede.nl) (*.net *.split)
[09:35:22] *** Joins: Somni_ (insomnia@193-227-58-66.gci.net)
[09:35:24] *** Joins: madduck (~madduck@matilda.madduck.net)
[09:35:24] *** Joins: perlmaros (~perlmaros@master.k-1.com)
[09:35:24] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[09:35:24] *** Joins: rfi (~rfi@216.70.102.172)
[09:35:26] *** Joins: Botje- (~Botje@mang.sgaap.be)
[09:35:26] *** Joins: a6502 (~wieger@stofzuiger.a6502.net)
[09:35:27] *** Joins: romel (~romel@romel.org.ua)
[09:35:27] *** Joins: sjn (sjn@sprocket.nvg.ntnu.no)
[09:35:38] *** Joins: mjgardner (sid182628@id-182628.charlton.irccloud.com)
[09:35:39] *** Joins: leont (sid489095@id-489095.highgate.irccloud.com)
[09:35:41] *** Joins: davebaker (sid143727@id-143727.tooting.irccloud.com)
[09:35:47] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[09:35:56] *** Joins: Juerd (juerd@computervrede.nl)
[09:36:03] *** Joins: kraih (sid17075@id-17075.tinside.irccloud.com)
[09:36:17] *** Quits: k-man (~jason@user/k-man) (*.net *.split)
[09:36:17] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (*.net *.split)
[09:36:17] *** Quits: vrurg (~vrurg@45.74.95.181) (*.net *.split)
[09:36:17] *** Quits: NeatNit (NeatNit@powered.by.jay2k1.com) (*.net *.split)
[09:36:17] *** Quits: daemon (znc@about/web/TheBeardedBSDer) (*.net *.split)
[09:36:17] *** Quits: berndj (~berndj@ns1.linksynergy.co.za) (*.net *.split)
[09:36:17] *** Quits: anomander (~anomander@vps-e9abfd3d.vps.ovh.net) (*.net *.split)
[09:36:17] *** Quits: mykhal (~m@user/mykhal) (*.net *.split)
[09:36:17] *** Quits: averell (~averell@user/averell) (*.net *.split)
[09:36:17] *** Quits: ew73_ (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com) (*.net *.split)
[09:36:18] *** Quits: krychu_ (~krychu@2a01:4f8:210:50c5::2) (*.net *.split)
[09:36:18] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[09:36:18] *** Quits: ggherdov (sid11402@id-11402.brockwell.irccloud.com) (*.net *.split)
[09:36:18] *** Quits: Frosku (~frosku@user/frosku) (*.net *.split)
[09:36:18] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[09:36:18] *** Quits: waitman_ (znc@irc.y0m4m4.com) (*.net *.split)
[09:36:18] *** Quits: oskie (usel@195-252-43-180-no254.tbcn.telia.com) (*.net *.split)
[09:36:18] *** Quits: haarg (haarg@haarg.org) (*.net *.split)
[09:36:18] *** Quits: p71 (~p71@097-083-185-160.res.spectrum.com) (*.net *.split)
[09:36:18] *** Quits: gugod (gugod@li7-202.members.linode.com) (*.net *.split)
[09:36:18] *** Quits: gchristensen (~grahamc@user/gchristensen) (*.net *.split)
[09:36:18] *** Quits: BinGOs (bitbucket@user/bingos) (*.net *.split)
[09:36:18] *** Quits: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[09:36:18] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[09:36:18] *** Quits: kirch (~kirch@tilde.town) (*.net *.split)
[09:36:22] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[09:36:23] *** Joins: oskie_ (usel@195-252-43-180-no254.tbcn.telia.com)
[09:36:24] *** Joins: tharkun_ (tharkun@kvm6.telegraphics.com.au)
[09:36:25] *** Joins: waitman (znc@irc.y0m4m4.com)
[09:36:26] *** Joins: rake (~anomander@vps-e9abfd3d.vps.ovh.net)
[09:36:26] *** Joins: krychu (~krychu@static.152.151.251.148.clients.your-server.de)
[09:36:27] *** Joins: MeatNit (NeatNit@powered.by.jay2k1.com)
[09:36:28] *** Joins: bingos_ (~bitbucket@cabbage.bingosnet.co.uk)
[09:36:35] *** Joins: averell (~averell@irc.nf3.eu)
[09:36:41] *** Joins: gchristensen (~grahamc@flexo.gsc.io)
[09:36:47] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[09:36:48] *** Joins: vrurg (~vrurg@45.74.95.181)
[09:36:57] *** Joins: k-man (~jason@debian.organictrader.com.au)
[09:37:17] *** Joins: ggherdov (sid11402@id-11402.brockwell.irccloud.com)
[09:37:28] *** Joins: megaTherion (~therion@coruscant.unix.io)
[09:37:58] *** Joins: Pny (~Pny@2605:6400:c847:1985::5891)
[09:38:01] *** Joins: p71 (~p71@097-083-185-160.res.spectrum.com)
[09:40:35] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[09:40:44] *** Joins: timlegge (~quassel@142.167.255.204)
[09:40:49] *** Joins: daemon (znc@paulwebster.org)
[09:40:50] *** Joins: Bossi (~quassel@p4fc22308.dip0.t-ipconnect.de)
[09:40:58] *** Quits: Xe (~cadey@lufta.cetacean.club) (Changing host)
[09:40:58] *** Joins: Xe (~cadey@tailscale/xe)
[09:41:00] *** Quits: k-man (~jason@debian.organictrader.com.au) (Changing host)
[09:41:00] *** Joins: k-man (~jason@user/k-man)
[09:41:18] *** Joins: ChanServ (ChanServ@services.libera.chat)
[09:41:18] *** tin.libera.chat sets mode: +o ChanServ
[09:41:26] *** Quits: Yaakov (sid19863@id-19863.tinside.irccloud.com) (Changing host)
[09:41:26] *** Joins: Yaakov (sid19863@user/Yaakov)
[09:41:27] *** Quits: kraih (sid17075@id-17075.tinside.irccloud.com) (Changing host)
[09:41:27] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[09:41:36] *** daemon is now known as Guest7838
[09:41:44] *** Joins: veesh (~veesh@89.237.118.45)
[09:41:50] *** Quits: madduck (~madduck@matilda.madduck.net) (Changing host)
[09:41:50] *** Joins: madduck (~madduck@user/madduck)
[09:41:56] *** Quits: edr (~edr@enlo.co) (Changing host)
[09:41:56] *** Joins: edr (~edr@user/edr)
[09:42:31] *** Joins: tyldis (~vidar@tyldum.com)
[09:42:31] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[09:42:34] *** Joins: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1)
[09:42:45] *** Joins: summerisle (~eof@tty3.dev)
[09:43:20] *** Joins: Russell (russell@bnc4free/staff/russell)
[09:43:30] *** Joins: Frosku (~frosku@user/frosku)
[09:43:30] *** Joins: samcv (~samcv@194.233.102.77)
[09:43:34] *** Joins: gugod (gugod@li7-202.members.linode.com)
[09:43:46] *** Joins: corwin (someone@ghostwheel.bru.st)
[09:43:46] *** Quits: corwin (someone@ghostwheel.bru.st) (Changing host)
[09:43:46] *** Joins: corwin (someone@fosshost/director/corwin)
[09:43:51] *** Joins: eldritch_ (~eldritch@134.209.221.71)
[09:43:56] *** Joins: berndj (~berndj@ns2.linksynergy.co.za)
[09:43:56] *** Joins: bkhl (~bkhl@user/bkhl)
[09:44:03] *** Joins: Champi (Champi@damn.e-leet.be)
[09:44:10] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[09:44:10] *** Joins: dngor (abuse@104-136-128-018.biz.spectrum.com)
[09:44:11] *** Joins: adhoc (adhoc@spot.ubermonkey.net)
[09:45:23] *** Joins: randir (~randir@93.159.239.42)
[09:45:24] *** Joins: ongolaboy (~willy@2a0a:e5c0:2:12:0:f0ff:fea9:c45c)
[09:45:34] *** Joins: vinnix (~vinnix@user/vinnix)
[09:45:40] *** Joins: ingy (~ingy@104.236.228.44)
[09:46:30] *** Joins: mykhal (~m@user/mykhal)
[09:46:33] *** Joins: ew73 (~ew73@ec2-3-92-179-243.compute-1.amazonaws.com)
[09:48:32] *** Joins: jelly (jelly@user/jelly)
[09:48:51] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[09:49:31] *** Joins: haarg (haarg@haarg.org)
[10:08:57] *** Quits: jpmh (uid445439@id-445439.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[10:15:54] *** Quits: pabogr (uid27497@id-27497.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:25:56] *** Joins: diskin (~diskin@87.117.57.125)
[10:30:28] *** Quits: diskin (~diskin@87.117.57.125) (Killed (NickServ (GHOST command used by diskin_!~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)))
[10:30:28] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[10:40:00] *** bingos_ is now known as BinGOs
[10:40:34] *** Quits: BinGOs (~bitbucket@cabbage.bingosnet.co.uk) (Changing host)
[10:40:34] *** Joins: BinGOs (~bitbucket@user/bingos)
[10:41:17] *** Joins: habamax (~habamax@user/habamax)
[10:52:08] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[10:54:42] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 252 seconds)
[18:14:02] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[18:14:36] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[18:15:50] *** Server sets mode: +nt 
[18:16:53] * GumbyPAN CPAN Upload: App-Greple-8.4601 by UTASHIRO https://metacpan.org/release/UTASHIRO/App-Greple-8.4601
[18:16:54] * GumbyPAN CPAN Upload: Google-Ads-GoogleAds-Client-8.0.1 by WFANSH https://metacpan.org/release/WFANSH/Google-Ads-GoogleAds-Client-8.0.1
[18:18:10] *** Quits: horsepatat (~horsepata@212.3.192.148) (Ping timeout: 240 seconds)
[18:22:00] *** Quits: Guest25 (~Guest25@host-79-25-230-78.retail.telecomitalia.it) (Quit: Connection closed)
[18:23:41] *** Joins: Guest25 (~Guest25@host-79-25-230-78.retail.telecomitalia.it)
[18:28:17] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 252 seconds)
[18:28:30] *** Sophira_ is now known as Sophira
[18:29:53] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:39:55] *** Quits: pookie (~pookie@snf-137798.vm.okeanos.grnet.gr) (Quit: All for nothing)
[18:40:55] *** Joins: hurl (~hurl@62.42.32.166.dyn.user.ono.com)
[18:41:36] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[18:43:56] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[18:50:31] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 246 seconds)
[18:50:57] *** Joins: yzhernand (~yzhernand@2607:fb90:54d1:784:b072:b6ff:fe9f:9b18)
[18:54:46] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[18:57:26] *** Quits: yzhernand (~yzhernand@2607:fb90:54d1:784:b072:b6ff:fe9f:9b18) (Ping timeout: 252 seconds)
[18:57:48] *** Joins: yzhernand (~yzhernand@2607:fb90:54d1:784:fc5e:4dff:fe4f:a3e4)
[19:02:28] *** Joins: gast0n (~g4570n@user/gast0n)
[19:03:07] *** Joins: magla (~gelignite@55d431c4.access.ecotel.net)
[19:04:27] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[19:04:49] *** Joins: Judabuda (~ok@user/judabuda)
[19:07:25] *** Quits: Guest25 (~Guest25@host-79-25-230-78.retail.telecomitalia.it) (Quit: Connection closed)
[19:13:20] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[19:13:48] *** Quits: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au) (Read error: Connection reset by peer)
[19:13:49] *** Joins: Judabuda (~ok@user/judabuda)
[19:13:55] *** Joins: thrig (~thrig@70.97.65.230)
[19:14:02] *** Joins: Dreadnaught (Kulrak@n122-109-33-182.rdl1.qld.optusnet.com.au)
[19:16:25] *** Quits: argento (~argent0@168-227-96-53.ptr.westnet.com.ar) (Ping timeout: 246 seconds)
[19:18:40] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:23:04] *** Quits: yzhernand (~yzhernand@2607:fb90:54d1:784:fc5e:4dff:fe4f:a3e4) (Ping timeout: 246 seconds)
[19:23:25] *** Joins: yzhernand (~yzhernand@2607:fb90:e8a4:5683:c844:c4ff:fee2:c8eb)
[19:27:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:28:16] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 258 seconds)
[19:29:45] *** Quits: thrig (~thrig@70.97.65.230) (Remote host closed the connection)
[19:35:56] *** Joins: randir (~randir@95-25-192-120.broadband.corbina.ru)
[19:36:04] *** Joins: thrig (~thrig@65.113.153.50)
[19:37:02] * GumbyPAN CPAN Upload: Date-ManipX-Almanac-0.000_905 by WYANT https://metacpan.org/release/WYANT/Date-ManipX-Almanac-0.000_905
[19:37:03] *** Joins: akaWolf (~akaWolf@akawolf.org)
[19:38:34] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[19:52:28] *** Quits: johnjay (~pi@38.120.10.99) (Ping timeout: 246 seconds)
[19:52:34] *** Joins: digitalbot (~bot@user/digitalbot)
[19:53:20] *** Joins: LuksNuke (~LuksNuke@94.242.245.63)
[19:53:44] *** Quits: hurl (~hurl@62.42.32.166.dyn.user.ono.com) (Quit: Leaving...)
[20:00:52] *** Quits: digitalbot (~bot@user/digitalbot) (Ping timeout: 246 seconds)
[20:03:22] <simcop2387> genio: bought an 8gb rpi 4.  gonna get windows 10 or 11 running on it when it arrives so i can try to setup a build system for strawberry perl
[20:04:18] *** Joins: diophantoz (~dz@user/diophantoz)
[20:04:40] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:12:51] <genio> 👍
[20:13:30] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[20:13:49] *** Joins: Judabuda (~ok@user/judabuda)
[20:13:52] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[20:16:15] <thrig> but does it have rounded corners?
[20:21:07] *** Quits: superkuh (~superkuh@user/superkuh) (Excess Flood)
[20:21:22] <simcop2387> so i've got github copilot now, haven't coerced it into writing any obviously copied perl code yet.  anyone have a good suggeestion for it?
[20:21:51] <thrig> interesting how Clippy is accepted this time around
[20:22:28] *** Quits: Frosku (~frosku@user/frosku) (Ping timeout: 272 seconds)
[20:22:35] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 252 seconds)
[20:22:47] *** Joins: Frosku (~frosku@user/frosku)
[20:23:44] *** Quits: bleb_ (~cm@user/bleb) (Ping timeout: 272 seconds)
[20:23:44] *** Quits: arthurpbs_ (~arthurpbs@168.121.99.67) (Ping timeout: 272 seconds)
[20:23:44] *** Quits: kogyaru (~kogyaru@hosting.peaksislandconsulting.com) (Ping timeout: 272 seconds)
[20:23:46] <simcop2387> thrig: oh i don't exactly accept it, i'm just trying to figure out how bad it is this time
[20:23:55] *** Joins: superkuh (~superkuh@user/superkuh)
[20:24:55] *** Joins: bleb (~cm@user/bleb)
[20:29:15] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[20:36:55] *** tharkun_ is now known as tharkun
[20:37:38] *** Joins: arthurpbs (~arthurpbs@168.121.99.67)
[20:38:21] *** Joins: AnK63 (~AnK@pool-173-72-4-103.cmdnnj.fios.verizon.net)
[20:38:42] *** Quits: AnK63 (~AnK@pool-173-72-4-103.cmdnnj.fios.verizon.net) (Client Quit)
[20:38:58] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[20:43:28] <nirnam> I really have genuine fair of AI that write code, how long would you think until AI start training more AI?
[20:43:46] <nirnam> s/fair/fear/
[20:43:58] <thrig> is it okay for the answer to be negative years?
[20:44:30] <nirnam> follow up question, how much time are we have left?
[20:50:09] *** Joins: The_Blode (~Blode@92.40.181.36.threembb.co.uk)
[20:50:18] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[20:50:42] *** Quits: The_Blode (~Blode@92.40.181.36.threembb.co.uk) (Changing host)
[20:50:42] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[20:50:51] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:53:46] *** Quits: yzhernand (~yzhernand@2607:fb90:e8a4:5683:c844:c4ff:fee2:c8eb) (Ping timeout: 240 seconds)
[20:54:05] *** Joins: yzhernand (~yzhernand@2607:fb90:e8a2:4803:f429:54ff:febf:8a1b)
[20:55:08] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 252 seconds)
[20:55:40] *** Joins: zakame (~zakame@user/zakame)
[20:55:47] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:58:10] *** Quits: yzhernand (~yzhernand@2607:fb90:e8a2:4803:f429:54ff:febf:8a1b) (Ping timeout: 240 seconds)
[20:58:49] *** Joins: yzhernand (~yzhernand@2607:fb90:e8a2:4803:9021:48ff:fe03:9e4a)
[21:00:03] <xenu> exactly 3 months
[21:04:58] *** Joins: e1f (~user@141.117.1.144)
[21:09:28] *** Quits: yzhernand (~yzhernand@2607:fb90:e8a2:4803:9021:48ff:fe03:9e4a) (Ping timeout: 246 seconds)
[21:11:07] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[21:13:46] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[21:14:19] *** Joins: Judabuda (~ok@user/judabuda)
[21:14:41] <leitz> I'm still working on my module building skills, and could use some help. File book_collate.pl lives in ~/bin, and is being run in a different directory.
[21:14:49] <The_Blode> Hey perlites. So I recently read a website that was declaring "top 5 dead languages of 2021" and Perl was right there at the top of the list. It made me pretty sad as I've been using Perl at work and it's a great scripting language. What would you recommend as a scripting language other than Perl?
[21:15:25] <nirnam> perl6
[21:15:29] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[21:15:42] <leitz> The module tree is listed here, as is the error.   What am I missing?   https://gist.github.com/LeamHall/d912380bac7c5b9f770b72f7e40f4e7c
[21:15:43] <Paperbot> Link title(s): [ Collate.pm · GitHub ]
[21:16:03] <leitz> The_Blode, , just because someone says something doesn't mean you have to believe it.
[21:16:31] <thrig> LISP is also dead and I use LISP too
[21:16:39] <The_Blode> I mean, I know it's not dead as I know I still use it in my company.
[21:17:04] <The_Blode> But wondering if I should learn a new language to help myself really. I don't know if I can market my Perl skills to new employers.
[21:17:22] <The_Blode> Was wondering if there's maybe a similar language that is more popular that has a small curve.
[21:17:27] <nirnam> everybody Love the snake language
[21:17:46] <thrig> nope.
[21:17:49] <The_Blode> Where do Perl programmers go when Perl dies?
[21:17:51] <leitz> I jokingly tell potential employers that if I can learn Perl, I can learn anything.
[21:17:59] <gryphn> I find it curious the fascination so many seem to me to have with proclaiming Perl dead. What's to be gained by the effort?
[21:18:25] <The_Blode> Perl can never really die. But it will lose popularity.
[21:18:28] *** Joins: kensanata (~user@user/kensanata)
[21:18:35] <The_Blode> BASIC probably is still alive in some fashion somewhere in business.
[21:18:48] <leitz> If you want market share, go Python. Lots of jobs for it. Of course, there are lots of Java jobs, too...
[21:19:03] <Altreus> We go to the places still using Perl and desperate to maintain their systems at any cost
[21:19:03] <nirnam> I cry infront of legacy frotran
[21:19:11] <The_Blode> Thank you leitz. Is the transition from Perl -> Python or Perl -> Java quite steep?
[21:19:27] <The_Blode> COBOL and Pascal were also on the top 5 dead list for 2021.
[21:19:27] <gryphn> The_Blode: If you're looking for a language to learn to increase your hiring potential, go with Python.
[21:19:35] <The_Blode> gryphn: thank you.
[21:19:42] <leitz> The_Blode, the Java comment was a joke, go Python.
[21:19:47] <The_Blode> Apologies I'm talking about none-Perl languages in #perl
[21:20:14] <leitz> Very easy to read and learn, and what you know of Perl will translate over easily, after a few hours on syntax.
[21:20:23] <The_Blode> I really want to continue using Perl. I wish there were some web frameworks for Perl.
[21:20:33] <nirnam> The_Blode: there is
[21:20:34] <gryphn> Like Mojolicious?
[21:20:36] <nirnam> alot actually
[21:20:44] <gryphn> Perl has MANY web frameworks.
[21:21:08] <leitz> I have a very finite number of brain cells, and can focus on one language at a time. I choose Perl because I use it at work and it does what I want for personal projects.
[21:21:17] *** Joins: johnjay (~pi@38.120.10.99)
[21:21:22] <The_Blode> There were some quirky differences I found in Python which are different from Perl...namely the structure of the code itself. No curly braces, no line terminators..no brackets...things I've become accustomed to in Perl and other languages.
[21:21:34] <leitz> That is, if someone ever helps me figure out the module thing.
[21:21:53] <The_Blode> Mojolicious lol nice name
[21:22:13] * GumbyPAN CPAN Upload: Release-Checklist-0.14 by HMBRAND https://metacpan.org/release/HMBRAND/Release-Checklist-0.14
[21:22:32] *** Joins: vanfanel640 (~vanfanel6@user/vanfanel64)
[21:23:01] <gryphn> Nice name; great framework.
[21:23:53] <The_Blode> I'm mostly using Perl for backend scripting and automation.
[21:24:11] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[21:24:34] <gryphn> You may want to look at Minion.
[21:24:53] *** Joins: yzhernand (~yzhernand@2607:fb90:54d3:b6:7030:29ff:fe28:7f73)
[21:25:11] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (Ping timeout: 258 seconds)
[21:25:19] *** vanfanel640 is now known as vanfanel64
[21:25:30] <The_Blode> Also, do you guys know of any well known applications written in Perl?
[21:25:40] <The_Blode> Thanks let me check them out
[21:26:06] <curdlesnoot> leitz: if you use lib '/full/path/of/book_collate/lib' then make a point of employing use in a fashion that properly reflects your namespace - use Book::Collate(::whatever) - it should work out. don't throw directories into @INC that go deeper into your directory namespace; it'll just be a headache.
[21:26:14] <The_Blode> I'm very impressed by the Mojo project page
[21:27:02] <curdlesnoot> leitz: you'd end up having to fix it, anyway, if you elected to publish the module.
[21:27:18] <The_Blode> Any of you guys have experience with Mojolicious?
[21:27:28] <The_Blode> Is it quite easy to build sites with?
[21:28:12] <The_Blode> They have an IRC channel. Going to sign up.
[21:28:14] <nirnam> The_Blode: that one terminal youtube client is written in perl
[21:28:28] <The_Blode> Thanks for the great suggestion though guys this has intrigued me
[21:28:38] <nirnam> fitting really, web automation is my favorite use of perl
[21:28:40] <The_Blode> There's a YouTube terminal client what
[21:28:45] <rindolf> The_Blode: https://perl-begin.org/learn/who-is-using/
[21:28:46] <Paperbot> Link title(s): [ Testimonials and Companies and People Using Perl - The Perl Beginners’ Site ]
[21:28:47] <The_Blode> How does it render the video? ASCII?
[21:29:01] <nirnam> piped into mpv probably?
[21:29:04] <The_Blode> If so, my mind is kinda blown
[21:29:27] <The_Blode> I'm intrigued what's the application called?
[21:29:49] <nirnam> this one https://github.com/trizen/youtube-viewer
[21:29:50] <Paperbot> Link title(s): [ GitHub - trizen/youtube-viewer: Lightweight YouTube client for Linux ]
[21:29:55] <The_Blode> I've been impressed by a few terminal web browsers...Links, Elinks
[21:30:09] <The_Blode> nirnam: Thanks let me take a look
[21:31:23] <rindolf> The_Blode: some of my apps are in perl too: https://www.shlomifish.org/open-source/projects/
[21:31:24] <Paperbot> Link title(s): [ Shlomi Fish’s Open Source Projects - Shlomi Fish’s Homesite ]
[21:31:43] <The_Blode> rindolf: Thankie I'll check those out
[21:32:10] <The_Blode> Ok so the YouTube viewer is more of a search browsers which pipes videos out but nonetheless still impressive
[21:32:34] <The_Blode> Going to build it and see how it works
[21:32:55] <The_Blode> No API key which is nice
[21:33:14] <nirnam> if you want, somebody have written ascii video render in awk
[21:33:31] <The_Blode> rindolf: kudos on the cool site!
[21:33:45] <nirnam> I wonder 10 years ago, ever been an article saying awk is dead!?
[21:33:46] *** Quits: yzhernand (~yzhernand@2607:fb90:54d3:b6:7030:29ff:fe28:7f73) (Ping timeout: 240 seconds)
[21:33:58] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[21:34:02] <Altreus> were people writing applications in awk?
[21:34:09] <curdlesnoot> leitz: also, you may "use lib" in your script but remove it from the .pm files. as long as @INC covers the proper path by the time your module(s) are imported, that's what matters.
[21:34:14] <nirnam> Altreus: just head over to #awk
[21:34:33] <nirnam> I remeber written mawk back in the day just to screw with my cowork
[21:34:57] <The_Blode> rindolf: you wrote a tonne of Perl modules kudos
[21:35:22] <Altreus> you probably should not 'use lib' in a .pm
[21:35:31] <Altreus> I would suggest this counts as Too Late
[21:35:50] <leitz> curdlesnoot, does it make sense that the calling script has:  use lib '/full/path/of/book_collate/lib/Book'; and use lib '/full/path/of/book_collate/lib/Book/Collate';
[21:35:57] *** Joins: gast0n (~g4570n@user/gast0n)
[21:36:00] <curdlesnoot> no, it does not.
[21:36:20] <leitz> curdlesnoot, it doesn't work unless I have both.
[21:36:37] <Altreus> One could argue that you should never 'use lib' because it is up to the person using the script, not the script itself, as to where the modules are installed
[21:36:45] <Altreus> however, in self-contained situations, it is helpful
[21:36:50] <rindolf> The_Blode: thanks!
[21:37:13] <leitz> curdlesnoot, I have not tried removing the use lib from the pm files and see what happens.
[21:37:16] <Altreus> an absolute path to a lib definitely falls into the category of environmental considerations, not self-contained script considerations
[21:37:51] <leitz> Altreus, I'm trying to test the code before installing it as a module. Hence the "use lib".
[21:38:16] <curdlesnoot> leitz: in short, you have a root in which your modules reside. 1) declare "use lib" once in your script up front (for the "lib" dir). 2) qualify your namespaces for all other declarations of "use" (use Book:: ... because Book is the first namespace component). once you attend to both of those things, it should be fine.
[21:38:35] <Altreus> leitz: use perl -I /path/to/lib script
[21:38:44] <ehuelsmann[m]> leitz: use an environment variable or 'perl' parameter? (-I [capital i])
[21:39:00] <curdlesnoot> leitz: for example, "use Section" would become "use Book::Collate::Section".
[21:39:05] <Altreus> Or, turn it into a test script and use lib in there
[21:39:10] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[21:39:32] <Altreus> t/test.t is a reasonable excuse to use lib '../lib'
[21:40:07] <Altreus> cos the test only makes sense when unpacked next to the installation candidate, and not after installation
[21:40:58] <xq> prove will do that for you
[21:41:00] <The_Blode> I'm actually getting an error trying to install that YouTube viewer
[21:41:05] <xq> see -l flag
[21:41:15] <The_Blode> Can't locate Module/Build.pm in @INC (you may need to install the Module::Build
[21:41:22] <The_Blode> I'm going to try installing that module
[21:41:39] <curdlesnoot> leitz: "use lib" is not one way of mangling @INC, but it's very important that your regular use statements are proper (point #2).
[21:41:51] <curdlesnoot> is just*
[21:43:13] <Altreus> xq: yeah but you have to remember to
[21:43:28] <Altreus> use lib encodes in the script that it *does not make sense* to do otherwise
[21:43:37] <Altreus> Maybe this should be a blog post
[21:43:50] <thrig> libs and things made from libs
[21:44:15] <Altreus> hrm
[21:44:19] <Altreus> nah
[21:44:31] <The_Blode> I installed cpanminus and the install is now building
[21:44:52] <curdlesnoot> leitz: does that make it sufficiently clear as to how to proceed?
[21:46:06] <perlbot> Bossi pasted a new file at https://l.perl.bot/p/eiq2eo - the more threads the slower it gets
[21:46:17] <leitz> curdlesnoot, there's a lot of stuff, and I'm trying to sort through all of it. Not making sense yet, but I'm still working on it.
[21:46:58] <Altreus> The_Blode: don't forget to make sure that where it is installed to is in @INC
[21:47:08] <Altreus> hey look, the two conversations met
[21:47:55] <curdlesnoot> leitz: to begin with, remove all instances of "use lib" other than in the .pl script, then review all other uses of use to make sure they are fully qualified. Book -> Book::Collate::Book, Rerpot -> Book::Collate::Report and so on.
[21:48:16] <The_Blode> Is there a way to include modules from CPAN without installing them?
[21:48:23] <The_Blode> I don't have sudo access at work.
[21:48:44] <gryphn> Depends on the module. But you can install them locally (as you, not root).
[21:48:45] <Altreus> see local::lib
[21:48:45] <The_Blode> I noticed I can download the source code from the CPAN page
[21:49:11] <The_Blode> Thanks
[21:49:18] <Altreus> cpanm is set up to use local::lib so you need to install that and set up your shell's RC to set up the environment
[21:49:32] <gryphn> Check out local::lib and/or Perlbrew.
[21:49:47] <Altreus> What I said is all in its doc
[21:50:19] <gryphn> https://perlbrew.pl
[21:50:19] <Paperbot> Link title(s): [ Perlbrew ]
[21:50:39] <The_Blode> Thanks guys
[21:50:44] <Bossi> anyone here who has experience with "threads"? and dont just reply "dont use it"
[21:50:45] <The_Blode> Perlbrew looks awesome
[21:51:27] <thrig> why are you trying to use threads even if you know there will be pushback?
[21:51:34] <gryphn> I confess: I used threads about 10 years ago. Everything was great until production... I still have nightmares...
[21:53:17] <The_Blode> youtube-viewer requires an API key to use.
[21:53:24] <leitz> curdlesnoot, I have to step away for a few minutes, but I'll be back to this shortly. It's starting to sink in...
[21:53:36] <curdlesnoot> leitz: ok
[21:53:50] <Bossi> i just want to understand what is going terribly wrong, while without threads the task takes less than a second, while with a single thread it increases this to more than 3 seconds, and the more threads i use the more real time and CPU gets consumed
[21:55:18] <The_Blode> What would you recommend for event driven programs in Perl? For example, I want to do event a. which I don't know how long will take and do event b again which I don't know how long will take.
[21:55:36] <thrig> perlbot: async
[21:55:36] <perlbot> thrig: Asynchronous event-driven IO is awesome in Perl with POE, IO::Async, IO::Lambda, Mojo::IOLoop, Reflex among others; made nicer using Future, Mojo::Promise, or Promises
[21:55:49] <gryphn> Parallelism is a good thing. Perl threads are just one (dangerous) way of parallelism.
[21:56:20] <The_Blode> Thanks for the info guys
[21:56:29] <ether> The_Blode: https://metacpan.org/pod/Task::Kensho::Async
[21:56:30] <Paperbot> Link title(s): [ Task::Kensho::Async - A Glimpse at an Enlightened Perl: Async Programming - metacpan.org ]
[21:56:33] <Bossi> at the moment it doesnt seem to scale at all, only when the threads sleep
[21:57:03] <Altreus> "Don't use it" *is* my experience with threads
[21:57:10] <The_Blode> I thought Perl was only capable of sequential code execution but I'm clearly wrong. It can do asynchronous execution
[21:57:10] <gryphn> Bossi: Do you have some example code?
[21:57:23] <thrig> they posted something a few pages up
[21:57:30] <Bossi> i pasted the example a few minutes ago
[21:57:44] <Altreus> The_Blode: it has fork so yes, it can (make the kernel) do parallel execution :)
[21:57:45] <ehuelsmann[m]> Bossi: what is it that you are expecting from threads?
[21:57:58] <ehuelsmann[m]> Bossi: it may be that threads are actually not what you *think* they are.
[21:58:13] <Altreus> threads are there so you can use fork on Windows
[21:58:22] <Altreus> not so you can avoid using fork
[22:01:02] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 252 seconds)
[22:01:36] <Bossi> ok, the task is to analyse data entries with quite a lot of searchpatterns and qualify them, so the input is splitted into data blocks, which then are put in a in-queue, workers take a block from the in-queue and compute them, this takes more or less time depending on matched searchpatterns, and then the workers put their results into the out-queue
[22:02:06] <The_Blode> I'm not gonna lie, my mind is blown by this async stuff with Perl
[22:05:27] <Altreus> Bossi: ok, this sounds like Parallel::ForkManager or IO::Async::Process might be what you want, depending on how complex you want to be
[22:05:45] <Altreus> Again, threads are there so you can use fork. fork is how you parallelise.
[22:06:00] * Altreus &
[22:08:16] <Bossi> the worker gets also a nested hash structure of rules/config how to proceed, it is sort of a config/interpreter
[22:08:58] *** Quits: argento (~argent0@168-227-97-29.ptr.westnet.com.ar) (Ping timeout: 246 seconds)
[22:10:06] <ehuelsmann[m]> Bossi: what's your platform? I'm especially thinking of the last line of https://perldoc.perl.org/perlthrtut#What-kind-of-threads-are-Perl-threads?
[22:10:07] <Paperbot> Link title(s): [ perlthrtut - Tutorial on threads in Perl - Perldoc Browser ]
[22:10:10] *** Joins: independent56 (~independe@95.148.245.87)
[22:10:15] <ehuelsmann[m]> Bossi: which documents exactly what you do.
[22:10:36] <ehuelsmann[m]> "So if your system blocks the entire process on sleep(), Perl usually will, as well."
[22:10:40] <Bossi> platform is linux
[22:12:38] <Bossi> getting data into the forked process would be no problem, but i need to get the data-block back with all modifications done to it
[22:13:48] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[22:13:58] <ehuelsmann[m]> Bossi: another question: do you load all the data before you create the threads?
[22:14:18] *** Joins: Judabuda (~ok@user/judabuda)
[22:14:20] <ehuelsmann[m]> or do you load the data after creating the threads and pass it in the queue to the threads?
[22:14:33] <Bossi> nope, the data is read by the input-thread, since it would not really fit into memory
[22:14:55] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 246 seconds)
[22:14:58] <ehuelsmann[m]> ok. that saves a lot of thread-creation overhead.
[22:16:04] <gryphn> Maybe IO::Pipe to send data from children back to the parent?
[22:16:23] <Bossi> so the input-thread opens and reads the input and separates it into blocks/chunks of data, and throws it into a in-queue created with "Thread::Queue"
[22:16:26] *** Quits: ufobat (~martin@dynamic-095-114-094-192.95.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[22:17:22] <Bossi> a second queue Out-queue is then used by the workers to return the blocks/chunk after they got processed
[22:19:25] <Bossi> therefore workers have no fixed round-robin scheduling, since some blocks take longer than others to process, and while i prefer to have the output in the same order as the input, placing results into the Out-Queue is coordinated by a shared counter, the only variable which is really shared between the threads
[22:20:56] <Bossi> so sometimes the n-1 workers need to wait for the slowest to finish before they can deliver their result into the queue, but this is not the problem here, even without coordinated output the performance is getting bad with each thread in use
[22:22:19] *** Joins: brtastic (~bartosz@185.24.91.138)
[22:22:37] <Bossi> the example i pasted dont even use any file io beside printing to the console for giving status
[22:24:46] <Bossi> ehuelsmann: this is also why i use a thread-pool since creation and joining of threads consumes a lot of time
[22:25:44] *** Joins: ufobat (~martin@dynamic-095-114-094-192.95.114.pool.telefonica.de)
[22:28:08] <ehuelsmann[m]> what happens when you have your threads count to 1 million instead of having them sleep really shortly?
[22:28:46] <ehuelsmann[m]> (in the real case you'll have them run really complex data analysis, so this should be a more truthful simulation anyway)
[22:29:25] <Bossi> sure, but atm i dont see any change
[22:29:44] <Bossi> i added more searchpatterns, but no change in behaviour
[22:30:10] <Bossi> while you quoted something from perlthrtut, there is also a statement "However, after a thread has been created, its performance and extra memory usage should be little different than ordinary code"
[22:32:54] <Bossi> the example code run times for 0 threads is: real    0m0.540s  1 thread: real    0m8.778s   2 threads: real    0m32.918s  3 threads: real    1m10.365s
[22:34:49] *** Quits: subie (~subie@2601:4c0:4080:bc0:a12f:862c:f411:5d94) (Ping timeout: 256 seconds)
[22:37:06] <Bossi> ehuelsmann in the example i compute some value in the compute subroutine instead of sleeping, so it really consumes CPU
[22:37:28] *** Joins: subie (~subie@2601:4c0:4080:bc0:a447:d59e:a7ed:74b4)
[22:39:43] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[22:42:56] *** Quits: brtastic (~bartosz@185.24.91.138) (Ping timeout: 252 seconds)
[22:43:56] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 252 seconds)
[22:45:04] <leitz> curdlesnoot, I have it sort of working, but have another question. The base code:   https://github.com/LeamHall/book_collate/blob/first_build/demo/test_book_collate.pl
[22:47:23] <leitz> curdlesnoot, line 6 is how I'm calling the script, and line 18 is the "use Book::Collate" bit. However, on line 108 I have to use the fully qualified name, instead of Book->new().
[22:48:13] <leitz> curdlesnoot, that was what I was hoping to avoid with lines 29-31 of   https://github.com/LeamHall/book_collate/blob/first_build/lib/Book/Collate.pm
[22:48:29] <leitz> Make sense?
[22:48:56] <ehuelsmann[m]> Bossi: htop tells me that the threads are sleeping a lot.
[22:53:03] <zgu> microsoft's garbage excuse for a virtual network switch is such a joke
[22:53:44] <Paperbot> Link title(s): [ book_collate/test_book_collate.pl at first_build · LeamHall/book_collate · GitHub ]
[22:55:18] <Bossi> ehuelsmann, there is just one sleep statement in the scripts while waiting for the output queue order, even when disabling this, threads are "sleeping" a lot
[22:55:26] *** Joins: rndusr (~rndusr@user/rndusr)
[22:56:48] <curdlesnoot> leitz: you could make a sub that wraps the given new method, if it bothers you - either in your script or as importable from the module. however, skimming over it, there are independent opportunities to simplify your module's interface.
[22:57:28] <ehuelsmann[m]> Bossi: I'm alarmed by the threads=1 case. it takes up to the 94th output for the input thread to complete: all it does is add 100 items to the queue. That should be done before even the first output gets generated.
[22:57:54] <leitz> curdlesnoot, there are a lot of ways to improve the module, I'm just working on getting it to work as a module right now.  ;)
[22:57:58] <curdlesnoot> leitz: yeah
[22:58:56] <ehuelsmann[m]> Bossi: do you have an explanation for that?
[22:59:49] <Bossi> ehuelsmann: in line 42 i limit the input queue size to 3 times of threadcount, when there is no limit, you see the input thread is finished before the first thread returns something
[23:00:07] <Bossi> aeh 5 times of threadcount
[23:00:41] <Bossi> this prevents from slurping all data in as fast as possible, but it doesnt change much how long the workers need to finish
[23:01:02] <ehuelsmann[m]> well, I set my thread count to 10
[23:01:05] <Bossi> the input thread here is not the bottleneck
[23:01:12] <ehuelsmann[m]> so it should be done before the 91st then, right?
[23:01:20] <Bossi> then the input queue limit will be 50
[23:01:20] <curdlesnoot> leitz: for example, add_section could be made to take an ordinary hash and internally take care of instantiating the new section object. you wouldn't have to type out Book::Collate::Section->new. is that the kind of API you want? I don't know, but it's an example of cutting down on the keystrokes.
[23:01:27] <leitz> curdlesnoot, having to call the full name of the Package->method() is normal?
[23:01:50] <curdlesnoot> leitz: for new, often, yes.
[23:01:53] <ehuelsmann[m]> Bossi: if the limit is 50, then it should be done pushing to the queue before the 51st.
[23:02:20] <leitz> curdlesnoot, okay, I can deal with that. Thank you.
[23:02:21] <curdlesnoot> leitz: because everyone and their dog has a "new" and it needs to be qualified to get your OOP ball rolling.
[23:03:18] <leitz> curdlesnoot, I had assume "Book->new()" would be unique enough, once the "use Book::Collate::Book" statement went through.
[23:03:44] <leitz> curdlesnoot, but yeah, I can see "new" needing more detail.
[23:04:09] <curdlesnoot> leitz: you can probably simplify other cases by thinking about your interface.
[23:05:36] *** Quits: jabberwok (~wlindley@75.105.20.104) (*.net *.split)
[23:05:36] *** Quits: megaTherion (~therion@coruscant.unix.io) (*.net *.split)
[23:05:36] *** Quits: vrurg (~vrurg@45.74.95.181) (*.net *.split)
[23:05:36] *** Quits: oskie_ (usel@195-252-43-180-no254.tbcn.telia.com) (*.net *.split)
[23:05:36] *** Quits: romel (~romel@romel.org.ua) (*.net *.split)
[23:05:36] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (*.net *.split)
[23:05:36] *** Quits: Somni_ (insomnia@193-227-58-66.gci.net) (*.net *.split)
[23:05:36] *** Quits: SysPete (~SysPete@fin.sysnix.com) (*.net *.split)
[23:05:36] *** Quits: edr (~edr@user/edr) (*.net *.split)
[23:05:36] *** Quits: rindolf (~rindolf@87.68.241.247.adsl.012.net.il) (*.net *.split)
[23:05:36] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (*.net *.split)
[23:05:36] *** Quits: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr) (*.net *.split)
[23:05:37] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (*.net *.split)
[23:05:37] *** Quits: quesker (~idnet@mail.89vx.net) (*.net *.split)
[23:05:37] *** Quits: scotticles (~TheScotti@h96-60-200-110.cdcyut.broadband.dynamic.tds.net) (*.net *.split)
[23:05:37] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[23:05:37] *** Quits: peder (4822@nidur.ifi.uio.no) (*.net *.split)
[23:05:37] *** Quits: kolcon (~kolcon@v.kolouch.org) (*.net *.split)
[23:05:37] *** Quits: bocaneri (~bismilah@about/linux/staff/sauvin) (*.net *.split)
[23:05:37] *** Quits: splatt990 (4b25e29db1@198.108.76.81) (*.net *.split)
[23:05:37] *** Quits: lopid (~lopid@user/lopid) (*.net *.split)
[23:05:37] *** Quits: riceandbeans (~zach@user/riceandbeans) (*.net *.split)
[23:05:37] *** Quits: dwxreaper (~quinn@192.155.91.76) (*.net *.split)
[23:05:37] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[23:05:37] *** Quits: rbraun (2wwwxlhK@user/rbraun) (*.net *.split)
[23:05:37] *** Quits: LogicAside (~LogicAsid@user/logicaside) (*.net *.split)
[23:05:37] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[23:05:37] *** Quits: marcus (~marcus@mojo/viking/marcus) (*.net *.split)
[23:05:37] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[23:05:37] *** Quits: batman (~batman@50.31.137.146) (*.net *.split)
[23:05:37] *** Quits: gloin (~gloin@user/gloin) (*.net *.split)
[23:05:37] *** Quits: tabris (~northman@c-107-4-92-118.hsd1.mi.comcast.net) (*.net *.split)
[23:05:37] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[23:05:37] *** Quits: raydiak (~raydiak@cyberuniverses.com) (*.net *.split)
[23:05:37] *** Quits: i7c (~i7c@user/i7c) (*.net *.split)
[23:05:37] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (*.net *.split)
[23:05:37] *** Quits: ology (~gene@user/ology) (*.net *.split)
[23:05:37] *** Quits: ethoxy (~exit-host@slave.sapi01.de) (*.net *.split)
[23:05:37] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (*.net *.split)
[23:05:37] *** Quits: BinGOs (~bitbucket@user/bingos) (*.net *.split)
[23:05:37] *** Quits: tharkun (tharkun@kvm6.telegraphics.com.au) (*.net *.split)
[23:05:37] *** Quits: digdilem (~digdilem@rolf.yuss.org) (*.net *.split)
[23:05:37] *** Quits: perlmaros (~perlmaros@master.k-1.com) (*.net *.split)
[23:05:37] *** Quits: mst (~matthewt@vps-6c71e929.vps.ovh.net) (*.net *.split)
[23:05:37] *** Quits: rfi (~rfi@216.70.102.172) (*.net *.split)
[23:05:37] *** Quits: usr1 (~select@ghostwheel.bru.st) (*.net *.split)
[23:05:37] *** Quits: schelcj (~schelcj@096-035-119-047.res.spectrum.com) (*.net *.split)
[23:05:37] *** Quits: esm2_ (~esm@esm.me.uk) (*.net *.split)
[23:05:37] *** Quits: revhippie (~jdavis@047-013-092-010.res.spectrum.com) (*.net *.split)
[23:05:37] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (*.net *.split)
[23:05:37] *** Quits: a153 (~a153@user/a153) (*.net *.split)
[23:05:37] *** Quits: japh (~scp1@user/japh) (*.net *.split)
[23:05:37] *** Quits: WinterStar (~IceLight@user/icelight) (*.net *.split)
[23:05:37] *** Quits: perldoc (~perldoc@71.76.76.1) (*.net *.split)
[23:05:37] *** Quits: radu2424 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (*.net *.split)
[23:05:37] *** Quits: sdk_ (~x@shell.codevoid.de) (*.net *.split)
[23:05:37] *** Quits: kst (~user@cpe-70-95-182-43.san.res.rr.com) (*.net *.split)
[23:05:37] *** Quits: u4ia (~u4ia@86-80-55-199.fixed.kpn.net) (*.net *.split)
[23:05:37] *** Quits: rswarts (~rswarts@ip-213-127-126-95.ip.prioritytelecom.net) (*.net *.split)
[23:05:37] *** Quits: Walex_away (~Walex@SMTP.sabi.co.UK) (*.net *.split)
[23:05:37] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[23:05:37] *** Quits: surrounder (~surrounde@user/surrounder) (*.net *.split)
[23:05:37] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[23:05:37] *** Quits: ramix (root@82-65-77-141.subs.proxad.net) (*.net *.split)
[23:05:37] *** Quits: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be) (*.net *.split)
[23:05:37] *** Quits: ilmari (~ilmari@user/ilmari) (*.net *.split)
[23:05:37] *** Quits: nshp (~hi@my.domain.is.better.thanyours.com) (*.net *.split)
[23:05:37] *** Quits: sevvie (~sevvie@vps-6df5f188.vps.ovh.net) (*.net *.split)
[23:05:37] *** Quits: seoul_man (~meh@user/seoul-man/x-5066766) (*.net *.split)
[23:05:37] *** Quits: DaTa (~DaTa@user/data) (*.net *.split)
[23:05:37] *** Quits: mteo (francis@user/francis) (*.net *.split)
[23:05:37] *** Quits: francis (francis@user/francis) (*.net *.split)
[23:05:37] *** Quits: shorne_ (~shorne@g164.115-65-218.ppp.wakwak.ne.jp) (*.net *.split)
[23:05:37] *** Quits: rewt (~default@user/rewt) (*.net *.split)
[23:05:37] *** Quits: castawaycloud (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net) (*.net *.split)
[23:07:16] <curdlesnoot> leitz: also, you can designate arbitrary subs for being exportable into the program's namespace. let's take Path::Tiny as an example. you don't write Path::Tiny->new(...) each time but path(...), which yields a new object. that's because using Path::Tiny results in the path sub being automatically imported.
[23:07:23] <curdlesnoot> leitz: in fact, it's definition of new is literally: sub new { shift; path(@_) }
[23:08:12] <curdlesnoot> I would only personally take that approach in situations where object creation is expected to be very frequent and where the convenience becomes obvious.
[23:09:33] <leitz> curdlesnoot, thank you very much. I need to think through a lot of this, but I'm really happy things are working. For a loose defiition of "working"...
[23:09:40] <curdlesnoot> or, rather, where the need to write out the object's invocant method tends to be frequent (not the mere act of creation itself).
[23:10:01] *** Joins: jabberwok (~wlindley@75.105.20.104)
[23:10:01] *** Joins: megaTherion (~therion@coruscant.unix.io)
[23:10:01] *** Joins: vrurg (~vrurg@45.74.95.181)
[23:10:01] *** Joins: BinGOs (~bitbucket@user/bingos)
[23:10:01] *** Joins: tharkun (tharkun@kvm6.telegraphics.com.au)
[23:10:01] *** Joins: oskie_ (usel@195-252-43-180-no254.tbcn.telia.com)
[23:10:01] *** Joins: digdilem (~digdilem@rolf.yuss.org)
[23:10:01] *** Joins: sjn (sjn@sprocket.nvg.ntnu.no)
[23:10:01] *** Joins: romel (~romel@romel.org.ua)
[23:10:01] *** Joins: rfi (~rfi@216.70.102.172)
[23:10:01] *** Joins: mst (~matthewt@vps-6c71e929.vps.ovh.net)
[23:10:01] *** Joins: perlmaros (~perlmaros@master.k-1.com)
[23:10:01] *** Joins: Somni_ (insomnia@193-227-58-66.gci.net)
[23:10:01] *** Joins: usr1 (~select@ghostwheel.bru.st)
[23:10:01] *** Joins: schelcj (~schelcj@096-035-119-047.res.spectrum.com)
[23:10:01] *** Joins: SysPete (~SysPete@fin.sysnix.com)
[23:10:01] *** Joins: edr (~edr@user/edr)
[23:10:01] *** Joins: esm2_ (~esm@esm.me.uk)
[23:10:01] *** Joins: rindolf (~rindolf@87.68.241.247.adsl.012.net.il)
[23:10:01] *** Joins: revhippie (~jdavis@047-013-092-010.res.spectrum.com)
[23:10:01] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[23:10:01] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[23:10:01] *** Joins: eseyman (~manu@lfbn-idf1-1-2267-180.w92-151.abo.wanadoo.fr)
[23:10:01] *** Joins: a153 (~a153@user/a153)
[23:10:01] *** Joins: japh (~scp1@user/japh)
[23:10:01] *** Joins: WinterStar (~IceLight@user/icelight)
[23:10:01] *** Joins: perldoc (~perldoc@71.76.76.1)
[23:10:01] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[23:10:01] *** Joins: quesker (~idnet@mail.89vx.net)
[23:10:01] *** Joins: radu2424 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[23:10:01] *** Joins: scotticles (~TheScotti@h96-60-200-110.cdcyut.broadband.dynamic.tds.net)
[23:10:01] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[23:10:01] *** Joins: sdk_ (~x@shell.codevoid.de)
[23:10:01] *** Joins: kst (~user@cpe-70-95-182-43.san.res.rr.com)
[23:10:01] *** Joins: u4ia (~u4ia@86-80-55-199.fixed.kpn.net)
[23:10:01] *** Joins: peder (4822@nidur.ifi.uio.no)
[23:10:01] *** Joins: rswarts (~rswarts@ip-213-127-126-95.ip.prioritytelecom.net)
[23:10:01] *** Joins: kolcon (~kolcon@v.kolouch.org)
[23:10:01] *** Joins: Walex_away (~Walex@SMTP.sabi.co.UK)
[23:10:01] *** Joins: tobs (~tobs@taboege.de)
[23:10:01] *** Joins: bocaneri (~bismilah@about/linux/staff/sauvin)
[23:10:01] *** Joins: splatt990 (4b25e29db1@198.108.76.81)
[23:10:01] *** Joins: lopid (~lopid@user/lopid)
[23:10:01] *** Joins: surrounder (~surrounde@user/surrounder)
[23:10:01] *** Joins: riceandbeans (~zach@user/riceandbeans)
[23:10:01] *** Joins: dwxreaper (~quinn@192.155.91.76)
[23:10:01] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[23:10:01] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[23:10:01] *** Joins: rbraun (2wwwxlhK@user/rbraun)
[23:10:01] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[23:10:01] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[23:10:01] *** Joins: marcus (~marcus@mojo/viking/marcus)
[23:10:01] *** Joins: batman (~batman@50.31.137.146)
[23:10:01] *** Joins: ramix (root@82-65-77-141.subs.proxad.net)
[23:10:01] *** Joins: mweckbecker (~matthias@weckbecker.name)
[23:10:01] *** Joins: El_Che (~nxadm@ssh2.ulyssis.student.kuleuven.be)
[23:10:01] *** Joins: ilmari (~ilmari@user/ilmari)
[23:10:01] *** Joins: nshp (~hi@my.domain.is.better.thanyours.com)
[23:10:01] *** Joins: sevvie (~sevvie@vps-6df5f188.vps.ovh.net)
[23:10:01] *** Joins: seoul_man (~meh@user/seoul-man/x-5066766)
[23:10:01] *** Joins: gloin (~gloin@user/gloin)
[23:10:01] *** Joins: DaTa (~DaTa@user/data)
[23:10:01] *** Joins: mteo (francis@user/francis)
[23:10:01] *** Joins: tabris (~northman@c-107-4-92-118.hsd1.mi.comcast.net)
[23:10:01] *** Joins: francis (francis@user/francis)
[23:10:01] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[23:10:01] *** Joins: raydiak (~raydiak@cyberuniverses.com)
[23:10:01] *** Joins: i7c (~i7c@user/i7c)
[23:10:01] *** Joins: shorne_ (~shorne@g164.115-65-218.ppp.wakwak.ne.jp)
[23:10:01] *** Joins: castawaycloud (~castaway@cpc81822-swin19-2-0-cust3.3-1.cable.virginm.net)
[23:10:01] *** Joins: rewt (~default@user/rewt)
[23:10:01] *** Joins: silug (~silug@068-188-018-154.biz.spectrum.com)
[23:10:01] *** Joins: ology (~gene@user/ology)
[23:10:01] *** Joins: ethoxy (~exit-host@slave.sapi01.de)
[23:10:01] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[23:10:02] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Excess Flood)
[23:10:04] *** Joins: Repaster_ (~Repaster@ool-2f148218.dyn.optonline.net)
[23:10:33] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (Max SendQ exceeded)
[23:10:33] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Excess Flood)
[23:10:45] *** Joins: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net)
[23:10:45] *** Quits: Paperbot (~Paperbot@ool-2f148218.dyn.optonline.net) (Changing host)
[23:10:45] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[23:10:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[23:10:58] *** Quits: Repaster_ (~Repaster@ool-2f148218.dyn.optonline.net) (Changing host)
[23:10:58] *** Joins: Repaster_ (~Repaster@perlbot/bot/grinnz/repaster)
[23:11:23] * GumbyPAN CPAN Upload: Google-RestApi-0.5 by MVSJES https://metacpan.org/release/MVSJES/Google-RestApi-0.5
[23:12:39] <ehuelsmann[m]> Bossi: if I create 100 threads, my input thread finishes immediately. however, I have a *long* time with all threads idling at around 5% cpu each. the load over all cores is ~25%.
[23:12:56] <LeoNerd> Why are people using the "t" word?
[23:12:56] <ehuelsmann[m]> Bossi: it takes litterally minutes to start processing the data.
[23:13:18] <ehuelsmann[m]> LeoNerd: we're not allowed to tell Bossi not to use them.
[23:13:46] <ehuelsmann[m]> Bossi: I guess this demonstration with the 100 threads is the point where you get pointed out -- even by me : that's why you were advised not to use them.\
[23:13:58] *** Quits: Judabuda (~ok@user/judabuda) (Read error: Connection reset by peer)
[23:14:19] *** Joins: Judabuda (~ok@user/judabuda)
[23:14:38] <ehuelsmann[m]> Bossi: in other words, I didn't have any experience. Helping you just over the past hour got me enough experience to tell you "my experience was terrible".
[23:15:17] <Bossi> i still appreciate your help
[23:15:49] <Bossi> but it is very disappointing that threads do this bad
[23:15:58] <ehuelsmann[m]> you're most welcome.
[23:16:28] <ehuelsmann[m]> I totally agree with you there. However, it is what it is....
[23:16:29] <Grinnz> Bossi: and I appreciate you being polite about people not necessarily enjoying discussing threads :)
[23:16:53] <Bossi> Grinnz: i am far from blaming ppl for those
[23:17:13] <LeoNerd> Perl's "threads" only exist to emulate the lack of fork() on Windows
[23:17:14] <Grinnz> we've had certain people be quite obnoxious about it in the past
[23:17:19] <LeoNerd> If you're on a real OS that has fork, use that
[23:17:42] <curdlesnoot> leitz: coming back to the example, consider being able to write $book->add_section(number => ...), where the newly created Section object is returned by the method in the event that you need to assign it and manipulate it later. that might work well for you.
[23:17:46] <Bossi> sure LeoNerd i got this meanwhile, while it is hard to accept
[23:17:52] <Grinnz> and then get banned, for being obnoxious, and complain they were banned for asking about threads (which is not accurate)
[23:18:04] <nirnam> what about coro and mce?
[23:18:09] <nirnam> those are threads right
[23:18:13] <Grinnz> nirnam: nope
[23:18:22] <Grinnz> Coro is green-threads (not parallel), and MCE is forks
[23:18:25] <ehuelsmann[m]> I think that for your type of problem, you'd have to come up with a different setup, e.g. based on the proposed solution through IO::Async::Process
[23:18:48] <Grinnz> MCE is rather similar to IO::Async::Function
[23:18:55] <curdlesnoot> leitz: you'd be cutting out the boilerplate, in effect.
[23:19:14] <Bossi> i already read a lot this days about IO::Async but i am kind of lost in there
[23:19:18] <nirnam> are there any interpreted language that get thread right? I want to see it
[23:19:32] <Grinnz> Bossi: well we can help a lot more with specific questions about IO::Async, for what it's worth
[23:19:42] <Grinnz> nirnam: raku, i would say
[23:20:09] <nirnam> yeah, that's vm
[23:20:14] <Grinnz> well yeah
[23:20:16] <Bossi> Grinnz: u am sure, since also LeoNerd is around, the creator of all this if i am right
[23:20:21] <Grinnz> perl also has a vm. definitions are hard
[23:20:31] <nirnam> technically interpreted, just in bytecode
[23:20:46] <Grinnz> anyway the point is more, raku was designed from the ground up to work with parallel threading
[23:20:53] <ehuelsmann[m]> Bossi: well, many of us work with IO::Async or other, similar systems.
[23:20:53] <Grinnz> perl and many other languages were not
[23:21:20] *** Quits: RandalSchwartz (~Adium@c-73-221-215-233.hsd1.wa.comcast.net) (Quit: Leaving.)
[23:21:28] <Grinnz> parallel threading requires cooperation from *everything* in the language to work sanely
[23:21:47] <LeoNerd> Also, threads are a very 1990s solution to the problem. They only work if you presume at most dozens of CPUs sharing memory across electrically-connected circuitry at most tens of cm apart
[23:21:52] <Grinnz> this is a particular problem for perl, which has a plethora of extensions on CPAN which amount to hacky use of core internals
[23:22:10] <LeoNerd> coroutines and isolates (of the kind that Go and IO::Async::Routine use) are just as good across /millions/ of CPU cores distributed about an entire data centre
[23:22:14] <LeoNerd> They are verymuch the way forward
[23:22:45] <LeoNerd> Do you want to scale to "a few" CPUs in one machine, or do you want to scale to potetntally thousands of machines across entire data centres?
[23:22:48] <Grinnz> sure, but at less scale "easy threading" is nicer for some cases - it's just not really possible unless you're raku
[23:22:49] <LeoNerd> If the latter - you wanted coroutines
[23:23:39] <Bossi> for the current problem i just want to use all CPU and Cores in the same box
[23:23:52] <ehuelsmann[m]> I'm not sure about the scale of the input that Bossi was thinking of, yet. I think so far, this was just an experiment.
[23:23:57] <Grinnz> forking can achieve that
[23:23:58] <nirnam> use xsub, and let C do it
[23:24:06] <nirnam> you can use all the cores you want
[23:24:20] <Grinnz> nirnam: that's not exactly trivial unless you're a C programmer :P
[23:24:36] <Grinnz> or even if you are...
[23:24:49] <nirnam> I was writting buttload of C before coming to perl, and I don't even understand XS
[23:24:55] <LeoNerd> I very often write Perl code using all the CPU cores. I use IO::Async::Routine or ::Function
[23:24:57] <ehuelsmann[m]> Bossi: what Grinnz says; or you could create a queueing system with IO::Async.
[23:25:01] <LeoNerd> Or probably some new code I keep meaning to write
[23:25:04] <LeoNerd> that someone is paying me for
[23:25:07] <Bossi> no this is part of a real project, depending on the data source there are tenths of thousands, millions or billions of data blocks
[23:25:08] <LeoNerd> honestly, you should just be using this
[23:25:18] <LeoNerd> Yes you want to be using my Async::Workflow
[23:25:25] <Grinnz> Parallel::Map also wraps IO::Async::Function with Future::Utils
[23:26:08] <ehuelsmann[m]> billions of datablocks sounds very much like "multiple CPUs  across the datacenter"
[23:26:20] <Bossi> just takes some time
[23:26:56] <LeoNerd> But yes that sort of thing is trivial with theabove
[23:27:00] <LeoNerd> or Async::Workflow.
[23:27:10] <Bossi> you know what "Certificate Transparency" is about?
[23:27:27] <Grinnz> LeoNerd: is that "thing you haven't written yet"? it doesn't seem to be on cpan
[23:27:58] <LeoNerd> Grinnz: yes.. basically just a tidying up of the same idea.. parallel map and a helper for IaFunction wrapping
[23:28:03] <LeoNerd> and turning things into a pipeline of stages
[23:28:24] <LeoNerd> and better managmenet of queeing and concucrency bounding and a bunch of other boring crap
[23:28:36] <Grinnz> neat
[23:29:50] <ehuelsmann[m]> Bossi: not yet. I'm reading the wikipedia article now.
[23:31:09] <Bossi> this is just one of the potential data sources to use for searching the needles in the haystack
[23:32:02] <ehuelsmann[m]> I think that LeoNerd is right about scaling when you want to find needles.
[23:32:17] <ehuelsmann[m]> you should not want to be bound by a single machine's limits.
[23:32:49] <LeoNerd> ... not that I didn't work on large systems scaling at Google for two years or .. anything like that >.>
[23:32:59] *** Quits: yzhernand (~yzhernand@38-73-255-174.starry-inc.net) (Ping timeout: 252 seconds)
[23:33:13] *** Joins: yzhernand (~yzhernand@64-18-144-8.starry-inc.net)
[23:33:35] *** Joins: brtastic (~bartosz@185.24.91.138)
[23:33:45] <Bossi> i already do some prefiltering of the CT-data, because i am not interested in the pre-certs, this reduces the data a lot, but still need to download everything, because you dont know what is in a specific entry before you dont look at it
[23:34:30] <LeoNerd> Large amounts of concurrent HTTP downloads? that sounds like a trivially async problem
[23:35:57] <ehuelsmann[m]> Bossi: I think chunking that should also be rather easy: simply hand out several downloads to remote machines/processes which have cycles for the download *and* the analysis to spare.
[23:36:18] <LeoNerd> That definitely sounds like a usecase for Async::Workflow
[23:36:43] <LeoNerd> Add an `async` stage for HTTP fetch (using Net::Async::HTTP) then a `detached` stage for the CPU-intensive computation parts
[23:36:54] <LeoNerd> That's about 10 lines of code if you do it right
[23:37:16] *** Joins: SincereFox (uid337158@user/sincerefox)
[23:39:33] *** Joins: habamax (~habamax@user/habamax)
[23:39:33] *** Joins: argento (~argent0@168-227-97-29.ptr.westnet.com.ar)
[23:39:42] <Bossi> atm i am bound to the scenario shown in the threads-example, i have some input i want to analyse, splitting it, and analyse it in parallel to aggregate the datablocks which made it through the analyse-process
[23:39:53] <LeoNerd> BAH can someone please fix l.perl.bot's web frontend so I can middleclick paste?
[23:40:07] <LeoNerd> Bossi: yes this is a trivial ~10line script
[23:40:40] <perlbot> LeoNerd pasted a new file at https://l.perl.bot/p/6q3qc4 - Async::Pipeline initial doc
[23:40:42] <Bossi> how may it fit in my current solution?
[23:41:24] <LeoNerd> I've no idea what your "current solution" is. But often people start from the wrong place and try to jam in something better and it is almost universally terrible
[23:41:48] <LeoNerd> If you're starting from the wrong place it may be harder to get to the right place, than if you'd started better to begin with
[23:42:52] <Grinnz> Bossi: at a basic level, IO::Async::Function does this
[23:43:32] <Grinnz> LeoNerd: this looks really cool, but it might be worth talking about solutions Bossi can actually use right now :P
[23:44:16] <LeoNerd> OK, so that's IaFunction
[23:44:21] <Grinnz> right
[23:44:26] <LeoNerd> Honestly - theabove module is simply a small wrapper around that, with some queueing
[23:44:30] <LeoNerd> It's nothing fancy
[23:44:39] <LeoNerd> I've just got bored of having to explain the same thing over and over
[23:44:43] <LeoNerd> It's in effect a protest module
[23:44:51] <ology> heh
[23:44:51] <Grinnz> or Parallel::Map to get fmap wrapping of that (but still missing documentation)
[23:45:34] <Grinnz> fmap gets you basic queueing
[23:45:47] <LeoNerd> Yah..
[23:46:09] <LeoNerd> This adds a bit more fancy, so e.g. you can set the entire pipeline to only allowing a concurrency of 10, ... and if a late stage is causing a holdup it won't let you put more things in the beginning of it
[23:46:29] <Grinnz> yeah, some things need that consistency
[23:46:37] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 246 seconds)
[23:46:38] <LeoNerd> No point accepting any more URLs to download if the processing stage is all busy, even if there is spare HTTP fetching capacity
[23:46:47] <LeoNerd> The point of the "pipeline" is it applies that backpressure
[23:46:54] <ehuelsmann[m]> Bossi: Did you have a look at IO::Async::Function? Is there anything we can help you with that you're running into which prevents you from using it at this moment?
[23:47:53] <Bossi> looked at it several times these days, but as i already said, still got lost somehow
[23:48:41] <ehuelsmann[m]> ok. maybe you can explain us: is there a point where you loose it? Or is it just totally incomprehensible from the start?
[23:50:47] <Bossi> i try to figure https://metacpan.org/pod/IO::Async::Function  Synopsis, so create function object, providing a code reference to my "worker"
[23:50:48] <Paperbot> Link title(s): [ IO::Async::Function - call a function asynchronously - metacpan.org ]
[23:51:15] <Grinnz> the code reference is a job, not a worker
[23:51:30] <Grinnz> the workers are created by IO::Async::Function itself, according to the options you set
[23:51:46] *** Quits: yzhernand (~yzhernand@64-18-144-8.starry-inc.net) (Ping timeout: 240 seconds)
[23:51:47] <Bossi> ok, say i have a function "handle_block" which is called once per datablock
[23:52:02] *** Joins: yzhernand (~yzhernand@38-73-255-174.starry-inc.net)
[23:53:21] <Bossi> so i create a function with the reference to the handle_block-routine, which accepts a data block, currently i inherit also some configuration to process, but that can be given as a hash reference as well
[23:54:34] <Grinnz> sure, those would be passed in ->call
[23:55:41] <Bossi> so, where does my "input" data comes from? currently i have this "splitter" thread placing datablocks in the in-queue
[23:56:13] <Grinnz> ->call will serialize it to the worker, have the worker run the function, and serialize the results back
[23:56:23] <Grinnz> results == return value
[23:57:19] <Grinnz> my $f = $function->call(args => [$data, $config]);
[23:57:21] *** Parts: diophantoz (~dz@user/diophantoz) ()
[23:57:55] <ehuelsmann[m]> you may still want a splitter; depending on how much work it is to do the splitting, you may want to put that in IO::Async::Functions too.
[23:58:33] <Grinnz> $f in that example is a Future, which is not the results but an object which represents the eventual results
[23:58:34] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Ping timeout: 240 seconds)
[23:59:40] <Grinnz> with a process like you're running, you would want to use something like fmap_concat from Future::Utils to iterate through the futures and return a single future representing the whole process; then you do $f->get on that combined future to block until the whole setup is done
