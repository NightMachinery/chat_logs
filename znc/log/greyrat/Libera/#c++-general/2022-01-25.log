[00:02:55] *** Joins: paul424 (~tom@ip-5-172-236-45.multi.internet.cyfrowypolsat.pl)
[00:03:03] *** Joins: HvszrStykp (~X@81.171.62.81)
[00:03:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 268 seconds)
[00:06:14] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Read error: Connection reset by peer)
[00:11:45] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[00:15:44] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[00:27:07] *** Quits: Crowley99 (~Crowley99@208.59.191.14) (Quit: Connection closed)
[00:28:52] *** Joins: klimnbrk (~barakvoid@2.55.3.120)
[00:30:28] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[00:34:16] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:34:34] *** Joins: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b)
[00:36:06] *** Quits: magla (~gelignite@55d4d2c6.access.ecotel.net) (Quit: Stay safe!)
[00:51:42] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[00:53:34] *** Joins: voidbrkd (~barakvoid@2.55.134.52)
[00:53:51] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[00:55:53] *** Quits: klimnbrk (~barakvoid@2.55.3.120) (Ping timeout: 256 seconds)
[00:57:38] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[00:58:36] <LordKalma> so doctest got a maintainer?
[00:59:39] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 256 seconds)
[01:00:58] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:03:49] <very_sneaky> yeah, looks like it's seeing some activity
[01:03:56] <very_sneaky> LordKalma: have you used doctest before?
[01:04:42] <very_sneaky> announcement: https://github.com/doctest/doctest/issues/554#issuecomment-1009162545
[01:07:11] *** Quits: paul424 (~tom@ip-5-172-236-45.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[01:07:21] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[01:17:26] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Read error: Connection reset by peer)
[01:17:43] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:10] *** Quits: voidbrkd (~barakvoid@2.55.134.52) (Remote host closed the connection)
[01:27:51] *** Joins: Simplar (~Simplar@188.163.93.76)
[01:29:05] <rpav> hum, if you had to build a common library of type names across (programming-)languages/machines/networks .. what would be some interesting/useful thoughts
[01:29:27] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[01:29:33] *** Quits: proller (~p@2a02:6b8:b081:a415::1:10) (Ping timeout: 268 seconds)
[01:29:50] <rpav> you get type parameters to map as languages see fit, so e.g. you could have vector<int> if you had some `Array(element-type: Integer)` or something
[01:29:57] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:30:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:31:52] <rpav> but presumably some kind of namespacing for some "common, shared" types .. but, how, and maybe there are other considerations
[01:32:17] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:33:43] <Simplar> What will dividing a complex number by a rational number result in?
[01:34:00] <Simplar> Another complex number?
[01:36:07] <rpav> yes, though you can try this and see
[01:37:30] <rpav> not counting the whole "any real/rational is also complex," and assuming thus you have a complex with a nonzero imaginary component
[01:37:53] <rpav> i actually don't remember how complex/complex division works ðŸ¤”
[01:38:26] *** Quits: malloy (~jimery@116.30.223.163) (Ping timeout: 250 seconds)
[01:40:03] *** Joins: markong (~kvirc@213.146.188.203)
[01:40:18] *** Joins: malloy (~jimery@116.30.220.175)
[01:41:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:36] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:36] *** ChanServ sets mode: +v npaperbot
[01:45:17] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[01:49:06] *** Joins: proller (~p@2a02:6b8:b081:8813::1:22)
[01:49:56] *** Shell is now known as Shyll
[01:51:51] *** Shyll is now known as Shell
[01:53:10] *** Quits: RazielZ (~Raziel@user/raziel) (Read error: Connection reset by peer)
[01:53:24] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[02:06:30] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: Lost terminal)
[02:07:39] *** Quits: bobb_ (~bobb_@dslb-092-075-150-143.092.075.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:11:32] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[02:13:15] <ville> apparently facebook as been and will be gobbling up all the gpus. they plan to have 16k gpu super computer by the summer
[02:14:32] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:14:50] *** Quits: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b) (Quit: Leaving)
[02:18:31] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:25:49] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[02:28:18] <rpav> god damn facebook
[02:28:37] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 256 seconds)
[02:30:48] <Simplar> One thing I want to clarify
[02:31:07] <Simplar> Can squares of non-integer numbers be integers?
[02:32:11] <kalven> is this a math or c++ question?
[02:32:18] <Simplar> Ah, soz
[02:32:57] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[02:34:35] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:35:23] <Hello71> but, like... this is a trivial question to answer? sqrt(2) is not an integer but its square is. most numbers are not square numbers
[02:41:19] <Friithian> oh fun, for my systems programming class I get to write a rudimentary arg parse
[02:47:32] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[02:47:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:52:59] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[03:00:29] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[03:01:59] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[03:02:14] *** Joins: seninha (~seninha@user/seninha)
[03:05:35] *** Joins: HvszrStykp (~X@81.171.62.81)
[03:22:22] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[03:22:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[03:24:46] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:34:02] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:7dea:a064:ef4b:9600) (Ping timeout: 240 seconds)
[03:35:08] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[03:38:32] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:48:00] *** Joins: Fairy (~Fairy@ti0004a400-0210.bb.online.no)
[03:52:18] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 250 seconds)
[03:54:13] *** Joins: KombuchaKip (~kip@192.252.230.5)
[04:01:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2040:9516:dc69:4989) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:05:36] *** Quits: DSpider (~DSpider@82.79.237.78) (Quit: Leaving)
[04:07:55] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:08:21] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 256 seconds)
[04:11:35] *** Joins: ferdna (~ferdna@user/ferdna)
[04:12:18] *** Joins: hexingb (~hexingb@36.155.28.143)
[04:18:22] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[04:23:02] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[04:25:14] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:26:37] *** Joins: hexingb (~hexingb@111.32.64.41)
[04:32:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[04:40:01] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:44:22] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:44:31] *** Quits: DrMax (~DrMax@node-1w7jra94757g1hh07e47brsa5.ipv6.telus.net) (Remote host closed the connection)
[04:45:41] *** Joins: DrMax (~DrMax@node-1w7jra94757g0j6h7g0ijns3x.ipv6.telus.net)
[04:48:32] *** Joins: luizfrds (~Luiz@152.250.243.147)
[04:49:37] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[04:50:00] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[04:58:32] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 240 seconds)
[04:58:37] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[05:02:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:03:48] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[05:22:20] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:25:02] *** Quits: emerent (~quassel@p200300cd57044325ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:25:32] *** Joins: emerent (~quassel@p200300cd57044376ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:27:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:33:32] *** Quits: proller (~p@2a02:6b8:b081:8813::1:22) (Ping timeout: 240 seconds)
[05:34:02] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca)
[05:37:20] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca)
[05:38:28] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca) (Ping timeout: 250 seconds)
[05:41:28] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:37] *** ChanServ sets mode: +v npaperbot
[05:46:22] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[05:47:02] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[05:49:25] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[06:01:53] *** Quits: KombuchaKip (~kip@192.252.230.5) (Ping timeout: 256 seconds)
[06:01:53] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:05:10] *** Joins: artok_ (~azo@mobile-access-bcee35-8.dhcp.inet.fi)
[06:08:17] *** Quits: artok (~azo@mobile-access-b0486a-186.dhcp.inet.fi) (Ping timeout: 268 seconds)
[06:10:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[06:13:34] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[06:16:19] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:16:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:35:46] *** Joins: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46)
[06:38:18] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:48:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:00:49] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:04:49] *** Joins: HvszrStykp (~X@81.171.62.81)
[07:10:04] *** Joins: adeliktas4 (~adeliktas@i59F4D5EA.versanet.de)
[07:12:09] *** Quits: adeliktas (~adeliktas@i59F5FF62.versanet.de) (Ping timeout: 256 seconds)
[07:12:09] *** adeliktas4 is now known as adeliktas
[07:36:32] *** Quits: jsbach (~jsbach@2a01:c22:a90b:a500:ea94:d29d:c08b:3a52) (Ping timeout: 240 seconds)
[07:44:34] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:46:16] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:49:09] *** Joins: jsbach (~jsbach@2a01:c22:3536:1400:650b:7ba5:f922:811c)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:00:53] *** Joins: smeso (~smeso@user/smeso)
[08:01:02] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 250 seconds)
[08:03:37] *** Joins: hexingb (~hexingb@180.212.208.172)
[08:04:26] *** Joins: ferdna (~ferdna@user/ferdna)
[08:15:03] *** Quits: hexingb (~hexingb@180.212.208.172) (Ping timeout: 256 seconds)
[08:21:44] *** Joins: hexingb (~hexingb@180.212.208.172)
[08:22:31] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[08:25:19] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:43:23] *** Quits: hexingb (~hexingb@180.212.208.172) (Ping timeout: 256 seconds)
[08:44:10] *** Joins: hexingb (~hexingb@2409:8902:7bc3:dc2d:f40a:e1d7:f7f8:c1bc)
[08:47:47] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:50:37] *** Quits: hexingb (~hexingb@2409:8902:7bc3:dc2d:f40a:e1d7:f7f8:c1bc) (Ping timeout: 240 seconds)
[08:50:49] *** Joins: hexingb (~hexingb@111.32.64.41)
[09:18:33] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[09:27:11] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[09:41:29] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:37] *** ChanServ sets mode: +v npaperbot
[09:49:37] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[09:50:37] *** Quits: Garbanzo_ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:03:34] *** Joins: skapata (~Skapata@user/skapata)
[10:06:58] *** Joins: gehn (~gehn@user/gehn)
[10:08:11] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:10:05] *** Quits: ville (~ville@user/ville) (Ping timeout: 256 seconds)
[10:13:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:24:29] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[10:24:37] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[10:25:30] *** Quits: nelubit (~nelubit@user/nelubit) (Read error: Connection reset by peer)
[10:25:47] *** Joins: nelubit (~nelubit@user/nelubit)
[10:41:17] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[10:45:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:46:07] *** Joins: Burgundy (~NA@86.121.143.206)
[10:55:04] *** Joins: ville (~ville@user/ville)
[11:08:02] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:8d7f:6814:43c8:106a)
[11:18:47] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Quit: Goodbye)
[11:18:56] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[11:19:21] *** Quits: Svitkona (~Svitkona@157.245.38.135) (Quit: Ping timeout (120 seconds))
[11:19:34] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[11:20:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:8d7f:6814:43c8:106a) (Ping timeout: 268 seconds)
[11:28:17] *** Quits: MatSharrow (~matthew@169.99.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[11:30:49] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:42:50] *** Joins: Raziel (~Raziel@user/raziel)
[11:45:54] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:50:48] *** Joins: MatSharrow (~matthew@169.99.9.51.dyn.plus.net)
[11:58:06] *** Quits: chozorho (~chozorho@2601:146:300:c30::aec1) (Quit: WeeChat 3.0)
[12:10:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[12:15:38] <LordKalma> very_sneaky, yes, i have. it's easy and nice
[12:17:10] <LordKalma> rpav, what you said sounds like SWIG
[12:23:43] *** Joins: robod34 (~Username@79.113.195.239)
[12:27:51] <urdh> ugh, this codebase is too clever for its own good
[12:27:52] <urdh> https://godbolt.org/z/P8W9ac58h
[12:29:03] <urdh> ignoring the used-to-be-and-maybe-still-is undefined behavior trap, I can't tell whether these two functions really behave the same for some subset of values, and if so what that subset is
[12:29:59] *** Joins: DSpider (~DSpider@82.79.237.97)
[12:34:15] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[12:34:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[12:35:27] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[12:42:12] *** Joins: paul424 (~tom@ip-5-172-234-238.multi.internet.cyfrowypolsat.pl)
[12:43:02] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:46:36] *** Quits: paul424 (~tom@ip-5-172-234-238.multi.internet.cyfrowypolsat.pl) (Client Quit)
[12:49:12] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:49:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 268 seconds)
[12:50:03] <ville> urdh: if you stick: 0b0'11111111111'1111111111111111111111111111111111111111111111111111ul or so in as u64 then compare as f64 hilarity will ensue
[12:50:42] <ville> urdh: (anything with somethig non-0 in the low bits is inf)
[12:50:49] <ville> err nan
[12:51:22] <MaddHatter> https://en.wikipedia.org/wiki/IEEE_754
[12:51:56] <MaddHatter> the immediate case that comes to mind is (as a double) -0
[12:51:59] <ville> f64 inf would be: 0b0'11111111111'0000000000000000000000000000000000000000000000000000ul so that would be another where the comparisons would break down
[12:52:30] <ville> and -inf
[12:54:57] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 240 seconds)
[12:55:17] *** Joins: plastico (~plastico@neomutt/plastico)
[12:58:34] <urdh> wikipedia seems to indicate that negative numbers won't work either
[12:59:28] <urdh> presumably this optimization """works""" for whatever inputs are expected
[13:00:45] <urdh> but guess what the test strategy is to test a few common cases  manually at a system level
[13:01:33] <MaddHatter> I don't know what "work" means here. As long as the exponent of lhs and rhs are the same, and setting aside -0 for the moment, lhs.d < rhs.d should be the same as lhs.i < rhs.i
[13:01:53] <MaddHatter> setting aside -0, inf, and NaN, I should say
[13:08:46] <LordKalma> Ariane V joins the chat
[13:09:02] <LordKalma> oh wait, it exploded because some numbers went out of range unexpectedly
[13:10:58] *** Joins: proller (~p@2a02:6b8:b081:7216::1:25)
[13:12:17] *** Quits: adeliktas (~adeliktas@i59F4D5EA.versanet.de) (Ping timeout: 240 seconds)
[13:15:47] <Haohmaru> !fact
[13:15:49] <nolyc> Haohmaru: class bad_any_cast : public bad_cast public: const char* what() const noexcept override; ;
[13:16:27] *** Joins: seninha (~seninha@user/seninha)
[13:16:52] *** Quits: proller (~p@2a02:6b8:b081:7216::1:25) (Ping timeout: 268 seconds)
[13:19:05] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:23:49] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:29:12] <RandomReader> truth
[13:31:27] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:30] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[13:39:12] *** Joins: Uswald (~leandre@37.35.6.200)
[13:39:47] <Uswald> When is it best to use a factory method or a factory class?
[13:40:17] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[13:41:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:37] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:37] *** ChanServ sets mode: +v npaperbot
[13:42:54] *** Joins: seninha (~seninha@user/seninha)
[13:43:07] <TinoDidriksen> I would default to a factory function.
[13:49:57] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[13:50:43] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:51:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[13:52:22] *** Joins: seninha (~seninha@user/seninha)
[13:54:57] *** Quits: mitch0 (~mitch@84-236-26-21.pool.digikabel.hu) (Ping timeout: 240 seconds)
[13:55:02] *** Quits: baltazar (~baltazar@84-236-26-21.pool.digikabel.hu) (Ping timeout: 240 seconds)
[13:56:04] <LordKalma> I have used a factory class in a situation I had some plugins at runtime, and so the specific factor took in some plugin loader output and kept that state around
[13:56:19] <LordKalma> for a stateless approach, I guess function would be fine
[13:56:54] *** Joins: baltazar (~baltazar@84-236-21-114.pool.digikabel.hu)
[13:57:07] *** Joins: mitch0 (~mitch@84-236-21-114.pool.digikabel.hu)
[13:58:10] <Uswald> So if I well understood, in most cases the function factory suffices.
[13:58:41] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[14:00:43] *** Joins: markand_ (~markand@markand.fr)
[14:00:43] *** Quits: markand (~markand@markand.fr) (Read error: Connection reset by peer)
[14:01:39] <MaddHatter> as always, it depends on what you're doing. A system that needs factories is already going to be complex.
[14:01:48] *** markand_ is now known as markand
[14:04:24] <MaddHatter> The factory must have some state or knowledge that you want to shield from the client, otherwise the client could just directly instantiate the object instead of asking a third party to do it. That suggests to be that the factory is an object, so it has a natural place to hold the shielded state.
[14:05:19] <Uswald> In fact I have several class which inherit from an abstract class, but which one will be instatiate will be know at run time.
[14:06:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[14:07:44] *** Quits: artok_ (~azo@mobile-access-bcee35-8.dhcp.inet.fi) (Quit: boot)
[14:09:13] <PJBoy> would default to a function here too
[14:09:17] <MaddHatter> Who's responsible for knowing what concrete class to instantiate? If there's not already an answer to that, then maybe it makes sense for the factory to take on that responsibility. If something else is already responsible, then can clients ask the something else?
[14:10:23] <MaddHatter> if yes, I'd say just make a static constructor function on the interface. If no, then it'll depend on how access to something_else is mediated.
[14:13:05] <MaddHatter> My usual advice is: come up with (at least) two completely different ways to do what you want. Then contrast them for their strengths and weaknesses. You'll either be confident in your design choice or more likely you'll discover a mixed approach that really gets to the heart of what you need better.
[14:13:42] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Ping timeout: 250 seconds)
[14:14:04] <PJBoy> a static constructor function on the interface?
[14:14:22] <PJBoy> you mean a static factory function in the base class?
[14:14:32] <Uswald> MaddHatter: Thx I'll try that.
[14:14:46] <MaddHatter> PJBoy: yeah, basically
[14:14:48] <PJBoy> I figure the function should know about its derived classes if it's going to deal them out
[14:15:05] <PJBoy> there's no way that construct could work
[14:23:26] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:25:37] <MaddHatter> PJBoy: crude, but for example: https://ideone.com/ALBiCz
[14:26:02] *** Quits: hexingb (~hexingb@111.32.64.41) (Read error: Connection reset by peer)
[14:26:19] *** Joins: hexingb (~hexingb@111.32.64.41)
[14:32:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:32:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[14:32:54] *** Joins: artok (~azo@mobile-access-bcee35-8.dhcp.inet.fi)
[14:33:01] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[14:33:59] *** Joins: hexingb (~hexingb@180.212.208.172)
[14:36:32] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Ping timeout: 240 seconds)
[14:39:14] <whupdup> Here's something interesting I encountered, apparently on average across multiple runs, a wrapper where I specify an empty destructor is actually slightly faster than one where I don't: http://paste.awesom.eu/Pyjk&ln https://z.zz.fo/ARiWV.png
[14:39:31] <whupdup> Windows 10 x64, MinGW-w64 GCC 8.1.0, i7-4790K
[14:40:06] <whupdup> it's usually nearly the same or faster with the average runs always leaning in the OpaqueHandle's favor
[14:41:16] <whupdup> pretty surprising since I assumed making more info about the type available where you're using it, and making your destructor implicit, would actually assist with optimization
[14:45:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[14:45:52] <Haohmaru> !fact
[14:45:53] <nolyc> Haohmaru: Specific filenames may have special meanings for a particular operating system.
[14:46:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:46:13] <Haohmaru> /dev/sda
[14:49:23] <MaddHatter> probably what they mean is more like "CON"
[14:50:18] <PJBoy> MaddHatter, that's not so bad actually
[14:50:32] <PJBoy> but you'd end up having to define that factory function somewhere awkward
[14:51:08] <PJBoy> which you'd have to do anyway if it weren't a member function
[14:51:14] <PJBoy> hm
[14:51:39] <PJBoy> I haven't seen this approach before
[14:51:46] *** Joins: adeliktas (~adeliktas@i59F4D5EA.versanet.de)
[14:53:11] <whupdup> I ran the benchmark a few more times, all on windows with MinGW-w64 GCC 8.1.0 and clang 13.0.0, in debug mode and release mode. It appears at least with my setup that the opaque handle is consistently equal or faster in all cases except the clang release, where it seems to have a high two-ended variance i.e. depending on your run they're either faster, equal, or slower, so inconclusive.
[14:53:13] <whupdup> Super interesting
[14:53:38] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[14:54:10] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Client Quit)
[14:54:26] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[14:55:02] <very_sneaky> I've also implemented a factory function with crtp before
[14:55:38] <very_sneaky> er, actually that was less about abstracting away from the concrete implementation though
[14:57:03] <very_sneaky> not a factory at all
[15:00:04] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[15:01:16] *** Joins: HvszrStykp (~X@81.171.62.81)
[15:05:12] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[15:05:16] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Ping timeout: 250 seconds)
[15:08:09] *** Joins: proller (~p@2a02:6b8:0:40c:e5d9:635e:8cd6:853e)
[15:08:43] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:10:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[15:19:29] *** Quits: hexingb (~hexingb@180.212.208.172) (Ping timeout: 256 seconds)
[15:19:36] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[15:19:44] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Client Quit)
[15:19:49] *** Joins: hexingb (~hexingb@36.155.28.143)
[15:20:00] *** Joins: sbrothy (~sbrothy@192038134036.mbb.telenor.dk)
[15:24:05] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:25:08] *** Quits: sbrothy (~sbrothy@192038134036.mbb.telenor.dk) (Ping timeout: 268 seconds)
[15:27:19] *** Joins: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b)
[15:29:10] <jokoon> Anyone knows a good enough, light json library I can drop in my C++ project?
[15:32:55] <jokoon>  nlohmann /
[15:32:55] <jokoon> json
[15:32:55] <jokoon>  ?
[15:33:02] <jokoon> Oops sorry for bad paste
[15:33:18] <PJBoy> it's a common choice
[15:33:26] <PJBoy> quite possibly the most common
[15:35:09] *** Joins: pulse (~pulse@user/pulse)
[15:36:45] <jokoon> Found this one: https://github.com/gregjesl/simpleson
[15:37:06] <jokoon> I guess the problem is correctness, performance and lightnessm can't have all of them
[15:37:09] <PJBoy> dang C++98 compatible
[15:37:11] <jokoon> also safety...
[15:37:26] <PJBoy> usually you can't have C++98 compatibility with any of the aforementioned
[15:37:42] <jokoon> nlohmann is 98 compatible?
[15:38:01] <pulse> nlohmann is a piece of doodoo
[15:38:05] <PJBoy> is it?
[15:38:13] <PJBoy> its tag line is "JSON for Modern C++"
[15:38:16] <pulse> yes. you run a debug build and it slows down by 5000%
[15:38:20] <markand> nlohmann is the eclipse of JSON parsing
[15:38:30] <pulse> yes well if modern C++ involves waiting for a 10kb JSON to parse for 5 seconds, then i don't want modern C++
[15:38:31] <jokoon> any other suggestion then?
[15:38:52] <PJBoy> wouldn't dismiss the one you linked just because it's C++98 copatible
[15:39:09] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:39:11] <PJBoy> I just like to make fun of C++98
[15:39:18] <markand> what I want from a json library: parsing. what nlohmann's one does: json patch, cbor, bson, msgpack, ubjson, ...
[15:39:25] <markand> it is the definition of overengineering
[15:39:47] <PJBoy> that's what happens when you're paid to develop software
[15:39:53] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[15:39:57] <PJBoy> you do the engineering, and then it's like "what now?"
[15:40:16] <PJBoy> like with google maps
[15:40:22] <jokoon2> (sorry got disconnected just after asking :"<jokoon> any other suggestion then?", did somebody answer me?)
[15:40:49] <PJBoy> https://tinodidriksen.com/pisg/libera/logs/%23c++-general/today.log
[15:42:37] *** Quits: jokoon (~eio@2a01:e0a:542:e160:201e:f962:e5c9:9a3b) (Ping timeout: 240 seconds)
[15:42:46] <markand> https://github.com/fffaraz/awesome-cpp#json
[15:43:53] <jokoon2> hard to choose
[15:44:35] *** Joins: markong (~kvirc@213.146.188.203)
[15:44:36] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[15:45:15] *** Joins: seninha_ (~seninha@user/seninha)
[15:46:43] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[15:50:41] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[15:51:19] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[15:51:24] <libh> I require a bit of assistance. I'm trying to follow this example to print the version numbering for qt5, it compiles without error, but I just get a blank line instead. https://zetcode.com/gui/qt5/introduction/ Any ideas or suggestions?
[15:51:52] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[15:54:33] *** Quits: letto (~letto@86.120.81.105) (Read error: Connection reset by peer)
[15:56:21] *** Joins: letto (~letto@86.120.81.105)
[15:58:39] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:01:28] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[16:02:48] *** Joins: bobb_ (~bobb_@dslb-088-066-140-135.088.066.pools.vodafone-ip.de)
[16:04:44] <LordKalma> libh, std::cout doesn't work inside qt applications
[16:05:59] <libh> Then I don't know why zetcode was getting a different result than I was.
[16:06:20] <LordKalma> ah in that example with the cout it should work
[16:06:33] <LordKalma> it just doen't work after initializing a QApplication
[16:06:49] <LordKalma> what OS are you on?
[16:07:06] <libh> I used qmake to generate the makefiles rather than use a lengthy command line command. I'm on windows and get qt5 from msys2.
[16:07:30] <libh> Because msys2 is a little funky if you're not using a makefile.
[16:07:33] <LordKalma> can you dump the project on a git repo or something?
[16:07:46] <libh> Give me a second.
[16:09:17] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[16:11:01] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[16:11:13] <libh> Here you go. You can test it yourself using qmake -project, qmake, and then make. https://paste.debian.net/hidden/0ee260e6/
[16:11:50] <TinoDidriksen> If you're using qmake then you need CONFIG += console
[16:11:51] <LordKalma> np need
[16:11:58] <LordKalma> the problem is `TEMPLATE = app`
[16:12:08] <LordKalma> https://doc.qt.io/archives/qt-4.8/qmake-common-projects.html#the-app-template
[16:12:54] <LordKalma> you have to add CONFIG=console
[16:13:11] <LordKalma> ah TinoDidriksen picked it up first
[16:15:31] <libh> Thank you so much. I figured that I was missing something in my qmake file, and now the correct behavior I expected works now.
[16:15:54] <LordKalma> += indeed, not =
[16:16:24] <libh> The = stuff with TEMPLATE and TARGET was done automatically by qmake fi that's what you're referring to.
[16:16:47] <LordKalma> I meant in CONFIG
[16:17:09] <libh> Oh. Right right, I got all that sorted out. Thank you again.
[16:17:30] *** Joins: seninha (~seninha@user/seninha)
[16:26:32] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 240 seconds)
[16:26:56] <markand> qmake is deprecated in favor of CMake
[16:27:02] <LordKalma> no it's not
[16:27:50] <LordKalma> cmake is favored but qmake is definitely not deprecated
[16:28:06] <markand> https://www.qt.io/blog/2019/08/07/technical-vision-qt-6
[16:28:15] <markand> We will continue to support our users on QMake, but not develop it further or use it to build the Qt framework itself.
[16:28:24] <markand> "not develop it further"
[16:28:41] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[16:29:44] *** Joins: AmR (~AmREiSa@156.199.9.4)
[16:30:01] <LordKalma> https://codereview.qt-project.org/c/qt/qtbase/+/391503 // doesn't mean it's not being bug-fixed
[16:32:38] *** Joins: andreasbuhr (~quassel@p549db640.dip0.t-ipconnect.de)
[16:32:38] *** Quits: andreasbuhr (~quassel@p549db640.dip0.t-ipconnect.de) (Client Quit)
[16:33:02] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[16:34:40] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:34:49] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[16:35:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:42:22] *** Joins: letto (~letto@86.120.81.105)
[16:44:30] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[16:47:09] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[16:55:47] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[16:58:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[16:58:32] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 240 seconds)
[17:00:22] *** Joins: lxsameer (lxsameer@user/lxsameer)
[17:08:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Ping timeout: 240 seconds)
[17:11:56] <rpav> or maybe even "cmake is begrudgingly supported"
[17:12:21] <rpav> though they do a decent job i guess, the support isn't bad
[17:16:23] <LordKalma> their cmake stuff is actually pretty decent
[17:16:35] <LordKalma> the APIs introduced in 6.2, improving in 6.3 are quite good
[17:16:46] <LordKalma> https://www.qt.io/blog/introduction-to-the-qml-cmake-api
[17:16:57] <rpav> huh, i've been using the 5.x stuff and it seems pretty good
[17:17:02] <rpav> ah qml
[17:17:16] <LordKalma> even apart from qml
[17:17:25] <LordKalma> you can now just not use RCC files:
[17:17:25] <LordKalma> https://bugreports.qt.io/browse/QTBUG-87643
[17:17:46] <rpav> ok the one thing i don't like are "make my target" macros ;/
[17:18:03] <LordKalma> you don't necessarely need those
[17:18:11] <rpav> (undoubtedly you dn't have to use them if you don't want, as nothing can be that magical)
[17:18:14] <LordKalma> they only do something interesting  if you do android stuff
[17:18:22] <rpav> ah
[17:18:54] <LordKalma> on desktop they pretty much do add_executable(target WIN32) as usual
[17:19:02] <LordKalma> and MACOS_BUNDLE or whatever it is
[17:19:11] <rpav> yeah they're definitely a convenience, but i wish people would primarily phrase things in terms of like `target_qml_module(target QML_FLAGS...)` or whatever
[17:19:16] <rpav> since the other way isn't composable
[17:19:26] <LordKalma> on adroid it automatically changes to add_library
[17:19:47] <rpav> ah interesting
[17:19:48] <LordKalma> you can do `qt6_add_qml_module` to an existing target
[17:19:59] <LordKalma> (iirc)
[17:20:23] <LordKalma> but yeah, for widgets users, maybe the fact you don't need to think about rcc files anymore helps
[17:23:03] <LordKalma> https://bugreports.qt.io/browse/QTBUG-100100
[17:26:28] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:27:27] *** Joins: hexingb (~hexingb@111.32.64.41)
[17:27:55] *** Quits: Guest19 (~Guest19@2601:647:5280:2a50:6902:1585:61e9:45ff) (Ping timeout: 256 seconds)
[17:39:15] <TinoDidriksen> geordi --version
[17:39:16] <geordi> GCC 12.0.0 20220110 (experimental)
[17:41:29] <TinoDidriksen> geordi --version
[17:41:30] <geordi> GCC 12.0.1 20220125 (experimental)
[17:41:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:39] *** ChanServ sets mode: +v npaperbot
[17:43:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:47:37] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[17:53:25] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[17:55:42] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[17:55:57] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[17:56:50] *** Quits: proller (~p@2a02:6b8:0:40c:e5d9:635e:8cd6:853e) (Ping timeout: 268 seconds)
[17:59:13] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[18:06:23] *** Joins: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036)
[18:09:56] <CarloWood> #define â€¦ ...
[18:11:44] <rpav> heh
[18:12:54] *** Quits: HvszrStykp (~X@81.171.62.81) (Ping timeout: 250 seconds)
[18:13:05] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:17:16] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:25:15] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[18:25:55] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Read error: Connection reset by peer)
[18:26:34] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:30:47] <ac_slater> hey guys, is it weird to start a thread in a class ctor?
[18:31:00] <ac_slater> (like a worker, or something)
[18:31:20] <ac_slater> I personally think it is as you can't use enable_shared_from_this while in the ctor
[18:32:16] <rpav> seems like it depends on details .. like, if the object _has_ threads, or spins off threads and waits for them, then probably it's fine?
[18:32:21] <CarloWood> At the very least it is extremely user unfriendly.
[18:32:55] <rpav> if it's a RAII object for a thread, it also seems to make sense and/or be the point, and you probably don't need enable_shared_from_this there either
[18:33:10] <CarloWood> Nothing should start threads without being very explicit about it. Starting one from a constructor might be "hiding" it a bit too much.
[18:34:40] <rpav> e.g. std::thread clearly starts a thread in its ctor
[18:35:26] *** Joins: proller (~p@2a02:6b8:0:40c:12be:2798:a194:636d)
[18:36:04] <rpav> plus even then the idiom for ESFT seems to be "have a static method which returns instances" so whether the thread is created in the ctor seems orthogonal
[18:37:00] <CarloWood> ac_slater: that being said... I do it (start all working threads from the constructor): https://github.com/CarloWood/threadpool/blob/master/AIThreadPool.cxx#L428
[18:37:25] <CarloWood> But well - that is called a ThreadPool :P. You construct it to get a pool of threads.
[18:37:37] <ac_slater> interesting
[18:40:31] *** Quits: arch-angel (~arch-ange@2001:e68:5400:5e71:980d:735:378a:6036) (Remote host closed the connection)
[18:41:06] <ac_slater> rpav: CarloWood, in my case the class owns an external resource and needs to queue data and commit it out
[18:41:18] <ac_slater> so the threads lifetime is within the class.
[18:41:21] <ac_slater> instance*
[18:41:29] <rpav> that sounds like has-a
[18:41:45] <ac_slater> yea
[18:41:45] <rpav> which shouldn't depend on whether the class's instance is shared or not
[18:41:57] <ac_slater> yea good point
[18:46:42] <ville> ac_slater: in general i just can't find usage for shared_ptr
[18:52:33] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[18:52:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:56:15] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5)
[18:56:19] <ac_slater> yea good point
[18:56:21] <ac_slater> thanks guys
[18:57:29] *** Quits: emerent (~quassel@p200300cd57044376ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[18:58:43] *** Joins: emerent (~quassel@p200300cd57044376ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:59:07] <jokoon> anybody using picojs? I'm having trouble using get<int>(), I'm getting linking errors...
[18:59:22] <jokoon> I meant picojson
[19:03:13] <artok> was there someone working on embedded stl more into c++17 era ?
[19:05:00] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:08:04] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:09:37] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[19:09:45] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:12:12] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Quit: Leaving)
[19:14:05] *** Quits: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b) (Quit: Client limit exceeded: 20000)
[19:16:36] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[19:27:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:29:45] <lxsameer> hey folks, how can I point to a target file within an ExternalProject?
[19:29:46] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[19:29:54] <lxsameer> in cmake ofcourse
[19:30:46] *** Quits: Uswald (~leandre@37.35.6.200) (Quit: WeeChat 2.8)
[19:30:56] <urdh> ask in #cmake?
[19:33:27] <Friithian> in the last year no one's come up with a tool for locating potential problem transitive includes, right? That'd be nice but it seems not a solvable problem in such an easy way
[19:33:57] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[19:35:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:37:39] <urdh> define "potential problem"
[19:38:25] <Friithian> clang and gcc have different includes in their headers so you may have everything you need included with 1 compiler but with the other you're missing one
[19:39:48] <Friithian> (I know the real answer is to just keep track of what you need for everything better)
[19:40:04] <urdh> clangd has a flag for inserting missing includes, but i don't know whether that is based on what the standard says or what the actual stdlib implementation happens to do
[19:40:28] <urdh> IWYU might do something clever as well but i doubt it
[19:44:46] <whupdup> I think the 'clean' answer would be to just explicitly include the header for everything you're using... but rip your compile times
[19:45:02] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:49:33] <PJBoy> if a header would be included transitively anyway, then including the header directly won't cost any extra
[19:49:35] <ville> Friithian: how is it not a solvable problem?
[19:49:46] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:53:32] <whupdup> are compliers smart enough not to even bother reading the file again these days?
[19:53:59] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:55:00] <ac_slater> << std::variant<int, int> v{123};
[19:55:00] <geordi> error: expected primary-expression before 'v'
[19:55:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:56:42] <Friithian> you ever remember reading something and it made sense but ya can't find it?
[19:57:07] <ac_slater> ok not sure why geordi doesnt know about variant... anyway, is it possible to list the same type in std::variant? Like `std::variant<int, int, int, int>`?
[19:59:01] <Friithian> HAH https://softwareengineering.stackexchange.com/a/379430
[19:59:05] <Friithian> that took WAY too long to find
[20:01:25] *** Joins: seninha (~seninha@user/seninha)
[20:02:57] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:fcf8:6040:f413:fda1)
[20:02:57] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:fcf8:6040:f413:fda1) (Changing host)
[20:02:57] *** Joins: skapata (~Skapata@user/skapata)
[20:03:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:05:10] <rpav> there are tools to fix headers
[20:06:03] <rpav> i think using clang, because clang can determine where the "actual" declaration of some thing is, and if it's not in a header you included
[20:06:50] <rpav> this could be slightly complicated but with some rules and a few heuristics nothing that won't help in most cases
[20:07:27] <Friithian> got anything specific I can look up and read more into?
[20:07:29] <rpav> https://github.com/include-what-you-use/include-what-you-use
[20:07:45] <imMute> ac_slater: I believe it is, but stuff like std::visit probably won't work quite right.
[20:08:10] <imMute> ac_slater: same with the type-based std::get()
[20:08:21] <ac_slater> imMute: wouldn't it just aggregate <int, int> into <int>
[20:08:23] <ac_slater> ?
[20:08:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:10:21] <imMute> ac_slater: doesn't seem to.  I'm not sure how you'd distinguish between the two.  probably best to avoid doing that
[20:10:32] <ac_slater> yea thanks imMute
[20:10:36] <ac_slater> it does make sense
[20:13:56] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[20:16:11] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[20:16:45] *** Joins: Dweezahr (~Dweezahr@109-175-210-87.ftth.glasoperator.nl)
[20:18:01] <Dweezahr> I'm writing a trading algorithm and need to distinguish between buy and sell types, changing the behaviour. As the type is determined during runtime, are templates a good fit for this problem?
[20:18:40] <rpav> how is "buy" different from "sell"
[20:18:48] *** Joins: HvszrStykp (~X@81.171.62.81)
[20:18:53] <LordKalma> runtime + templates? no
[20:19:00] <rpav> trade(a,b) vs trade(b,a)
[20:19:00] *** Quits: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[20:19:20] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:954f:f10a:7686:472a)
[20:19:20] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:954f:f10a:7686:472a) (Changing host)
[20:19:20] *** Joins: RoKenn (~RoKenn@user/rokenn)
[20:19:22] *** Joins: seninha (~seninha@user/seninha)
[20:19:41] <Dweezahr> buy is different from sell with respect to the order in which the next price is determined, decrementing with bids as first the highest bidder, incrementing with asks as first the lowest seller
[20:19:46] <rpav> if behavior changes at runtime, the answer is always "use runtime configuration"
[20:19:56] <Friithian> sounds very much like a homework problem
[20:20:04] <Dweezahr> so just a switch statement, could I make that constexpr?
[20:20:12] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:20:15] <rpav> Dweezahr: trade(a,b,settings_a_b) vs trade(b,a,settings_b_a)
[20:20:23] <Dweezahr> okay, just overloading then
[20:20:36] <Dweezahr> actually it is for work, but I wanted to use templates more
[20:20:42] <rpav> if this is for a game, then your settings_a_b could be "vendor to player markup" etc (not to mention the ability to configure a host of things)
[20:20:52] <rpav> don't use a tool that is not appropriate to the job
[20:21:01] <rpav> templates are very much not useful here
[20:21:16] <rpav> well
[20:21:16] <Dweezahr> okay, I did not know that as I have been avoiding templates
[20:21:36] *** Quits: RoKenn (~RoKenn@user/rokenn) (Client Quit)
[20:22:17] <rpav> is this high-frequency trading and you need nanosecond precision, because if so you should probably be learning/mentored more from your colleagues :P
[20:22:41] <Dweezahr> actually my current implementation is at 340 nanoseconds
[20:22:49] <Dweezahr> but I'm looking at improving the design
[20:22:53] <rpav> hypothetically in that case you would want to constexpr and template as much as possible, but if this is for something that you want runtime configuration of, then no
[20:23:21] <PJBoy> s/constexpr and template/profile/
[20:24:02] <rpav> PJBoy: well, right, hypothesizing that one profiled and found that one could have a reasonable design and reduce some overhead by more compile-time generated routines ;)
[20:24:15] <PJBoy> that's what I like to hear
[20:24:25] <Friithian> !rule 1
[20:24:27] <nolyc> Make things work. Profile. Make things fast. In this order.
[20:24:30] <rpav> if they have to ask, then this isn't the case, and/or they should really not be doing this alone
[20:25:20] <rpav> but like for a game or anything with a bunch of stuff you want to write configured/loaded data for, an overload with settings and some nice class/function to say "how do we price item X" is maximum flexibility, and the computational cost is trivial
[20:25:44] <rpav> err, not even overload, simply "a function that takes configuration"
[20:27:41] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:9727:5b6b:24bc:71d7) (Remote host closed the connection)
[20:27:53] <BurumaSerafuku> make it fast first! we are strong coderz
[20:28:26] *** Joins: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:a1cd:88ef:b20f:80c5)
[20:34:28] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[20:35:41] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:37:46] <rpav> i'm finding an array whose coordinates simply wrap around (and negatives work as well) incredibly handy
[20:38:04] <rpav> actually, wrap or clamp i think, but
[20:38:25] <Friithian> so like, if it's 10 long and you subscript 10 it'll give you 0?
[20:38:36] <rpav> rather than always having to write special checks for v[x+1], it's always valid
[20:38:43] <rpav> basically yeah
[20:38:54] <Friithian> feels pythonic :P
[20:39:07] <rpav> though this is for something that _can_ loop, and if it doesn't, v[10] would give you 9 iirc
[20:39:17] <rpav> that behavior being correct is a little specific to this, but
[20:39:47] <Friithian> I can see how that'd be useful
[20:40:12] <rpav> i dunno .. it's like, if you don't have to waste a lot of lines in every instance _always_ handling edge cases, then your code is easier/cleaner, and i guess safer
[20:40:41] <rpav> actually this may just always wrap, i need to check if _that's_ right i guess heh
[20:41:17] *** Joins: Inline (~Inline@ip-037-201-240-204.um10.pools.vodafone-ip.de)
[20:46:39] *** Joins: sbrothy (~sbrothy@192038134048.mbb.telenor.dk)
[20:51:59] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[20:54:48] *** Joins: magla (~gelignite@55d4ee32.access.ecotel.net)
[21:00:17] <epiktitos[m]> question regarding the use of cmake: is there a point in using it if a project is only meant to target a single platform ?
[21:02:23] <rpav> yes
[21:03:09] <comrad> i agree
[21:04:23] *** Quits: bobb_ (~bobb_@dslb-088-066-140-135.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:10:43] <pulse> epiktitos[m], no
[21:10:59] <pulse> cmake is horrible
[21:12:31] <rpav> can you not sfinae on e.g. operator<< being implemented for some A,B
[21:16:42] <BurumaSerafuku> cmake works great, but it's horrible
[21:16:45] <BurumaSerafuku> use bazel
[21:17:12] <rpav> such opinions
[21:17:14] <BurumaSerafuku> I really tried to learn, use and love cmake because CLion was forcing me to do it
[21:17:22] <BurumaSerafuku> it's a giant bucket of shit
[21:17:26] <rpav> i.e. you failed to learn
[21:17:34] <BurumaSerafuku> no. I can do everything with it
[21:17:42] <BurumaSerafuku> it's just a huge mess
[21:17:42] <rpav> seems dubious
[21:18:17] <BurumaSerafuku> files too complex to maintain. obscure shit from external libraries and on
[21:18:27] <pulse> <BurumaSerafuku> it's a giant bucket of shit
[21:18:41] <pulse> never have i seen something described so poetically yet so truthfully
[21:18:43] <rpav> and yet despite your failure, very large projects somehow manage to use it successfully
[21:18:46] <BurumaSerafuku> I had to learn how to DEBUG it to make sure I was not doing wrong stuff
[21:19:00] <BurumaSerafuku> rpav: yes! lost of things run on bad wheels
[21:19:04] <BurumaSerafuku> and they will keep running
[21:19:16] <BurumaSerafuku> because they started bad and the cost to migrate out becomes expensive
[21:19:17] <Friithian> I see nothing better than cmake *runs*
[21:19:28] <pulse> make is way better
[21:19:33] <BurumaSerafuku> nah
[21:19:40] <kalven> epiktitos[m]: what are you planning on using instead of cmake?
[21:19:40] <Friithian> >make is better than cmake
[21:19:41] <Friithian> HAH
[21:19:42] <BurumaSerafuku> rpaav: that's the same argument as why the BIG BALL OF MUD antipattern still survives
[21:19:50] <BurumaSerafuku> pulse: I have to disagree. make is really bad
[21:20:01] <BurumaSerafuku> make is necessary for the LIFE, but that doesn't mean I have to handcode on it
[21:20:01] <rpav> BurumaSerafuku: but you claimed "files too complex to maintain," which would be clearly wrong if anything maintained them
[21:20:11] <BurumaSerafuku> rpav: still too complex
[21:20:29] <rpav> but if they're _not_ too complex to maintain, then probably your problem is more between keyboard and chair
[21:20:33] * BurumaSerafuku is paid to maintain unmaintainable code
[21:20:49] <BurumaSerafuku> rpav: you are trivializing a very common problem
[21:21:12] <pulse> meson, bazel, scons, ninja. take your pick
[21:21:19] <BurumaSerafuku> bazel is the best so far
[21:21:20] <BurumaSerafuku> :)
[21:21:24] <pulse> and of course my favorite ... .vsproj :p
[21:21:37] <PJBoy> ninja is the opposite of a build system
[21:21:39] <BurumaSerafuku> vsproj is not that bad, but it lack features, ofc
[21:21:43] <Friithian> destroy system
[21:21:44] <BurumaSerafuku> never tried ninja
[21:21:58] <kalven> ninja isn't mean to be hand written
[21:22:13] <PJBoy> it's the asm.js of build systems
[21:22:18] <rpav> suggesting ninja in that list makes the rest of the suggestions suspect
[21:22:47] <pulse> i've heard good things
[21:22:48] <epiktitos[m]> kalven say I was solely targeting windows and their compiler suite why would I want to use cmake instead of just msbuild
[21:23:00] <pulse> epiktitos[m], you wouldn't. just build with VS and forget about it
[21:23:05] <pulse> unless you literally desire headaches
[21:23:07] <pulse> in which case go for it
[21:23:11] <rpav> is there a simple std:: type trait for "this is sfinae'd out"
[21:23:25] <rpav> want a constexpr bool
[21:23:39] <kalven> epiktitos[m]: that's why I asked what your alternative is. msbuild is fine.
[21:24:13] <rpav> i feel like std::conjunction might but i'm probably not writing the "does `std::ostream << T` exist" right
[21:25:02] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:25:13] <PJBoy> I don't think it does
[21:27:02] <rpav> yeah
[21:27:18] <rpav> i feel like there ought to be like std::exists_v<...>
[21:28:01] <rpav> cppreference actually has an implementation in passing heh
[21:28:49] <PJBoy> nowadays I'd use a requires expression for whatever you're doing
[21:28:59] <rpav> i want an either/or thing
[21:29:08] <rpav> and we're not on 20 sadly
[21:29:37] <rpav> actually can you even if-constexpr if there's not a valid implementation .. probably not
[21:30:56] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:31:23] <epiktitos[m]> kalven what would you use if you were only targeting linux and gcc ?
[21:31:41] <kalven> epiktitos[m]: cmake
[21:32:35] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:33:14] <pulse> i would just use make
[21:33:27] <kalven> no one is perfect
[21:33:33] <epiktitos[m]> why would you choose to use a build generator versus a plain build tool ?
[21:35:18] <PJBoy> handles the shit that I don't wanna handle
[21:35:40] <rpav> epiktitos[m]: this is only really a question if you've only had to manage trivially small projects
[21:35:41] <kalven> epiktitos[m]: because I would have to spend a lot more time writing a Makefile compared to the equivalent CMakeLists.txt
[21:35:42] <PJBoy> linking dependencies, creating project files, generating compile_commands.json
[21:36:08] <PJBoy> doesn't require hard tabs
[21:36:15] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[21:36:47] <PJBoy> (seriously, who does that)
[21:37:10] <pulse> alternative: generate the makefile once using cmake, then delete everything related to cmake :D
[21:37:26] <PJBoy> >:(
[21:37:27] <rpav> yes, you CAN write a cute few lines of make that builds your project; congrats (but it's still probably broken) .. once you're really focused on trying to manage a not-insignificant project integrating multiple subprojects and multiple targets and build/deploy configurations etc you will really not want to be manually trying to figure out what all the proper flags to MSVC are or how to properly make gcc build a shared library or rpath a
[21:37:28] <rpav> dep or whatever
[21:37:36] <PJBoy> IDEs like CMake
[21:38:06] <rpav> ever written PCH configuration? set up unity builds?
[21:38:16] <pulse> i've literally heard someone say they dropped C++ entirely because they encountered cmake and it was too ugly for them
[21:38:28] <kalven> epiktitos[m]: my current personal project is tiny.. maybe 30 files in total, no external libs and I *still* prefer cmake because it's easier to write and maintain.
[21:38:34] <PJBoy> they would have hated makefiles then :/
[21:39:08] <PJBoy> I do agree with vccproject files though
[21:39:08] <rpav> pulse: fire separates the slag from the metal
[21:39:32] <pulse> part of the reason why i like windows c++ dev is because i get to ignore cmake 100% entirely
[21:39:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[21:39:38] <pulse> i can forget it even exists. what a paradise
[21:39:52] * pulse is not a fan of cmake
[21:39:58] <imMute> pulse: until you gotta port said software to Linux  (seen it happen, wasn't pretty)
[21:39:59] <epiktitos[m]> has anyone given build2 a go ? it aims to be to c++ what cargo is to rust
[21:40:10] <pulse> i get why it's used but it's just so gut wrenchingly ugly that i can't even
[21:40:20] <pulse> imMute, yeah i don't like the idea of cross platform all that much, either
[21:41:10] <PJBoy> oh wow build2 has C++20 modules support apparently
[21:41:13] <PJBoy> for GCC
[21:41:27] <PJBoy> but not MSVC
[21:41:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:31] <PJBoy> which makes it less impressive
[21:41:38] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:38] *** ChanServ sets mode: +v npaperbot
[21:41:45] <imMute> pulse: me either.  thats why I stick to Linux.
[21:42:38] <pulse> if you think about it, cross platform is just a very miserable idea
[21:42:46] <pulse> it is what it is though
[21:43:13] <pulse> but it really makes everything about the project uglier
[21:43:21] <pulse> not to mention way more complex
[21:43:48] <rpav> and yet i have little issue supporting cross platform projects heh
[21:43:49] <pulse> i respect projects like notepad++ that just say, you know what, run it through wine and stop bothering the devs :P
[21:43:51] *** Joins: Kerr25 (~Kerr@2601:602:ce01:1f0:b2e1:d9dd:d9c3:4489)
[21:44:00] <pulse> rpav, yeah, maybe now. after you've already gone partially mad
[21:44:02] <pulse> :p
[21:44:29] <rpav> meh, it was hardly a bump in the road
[21:44:47] <pulse> just because you avoided the dragon's den doesn't mean others will too though
[21:44:57] <PJBoy> notepad++ is starting to show its age though
[21:45:09] <pulse> meh, still better than gedit and other 30 alternatives on linux
[21:45:13] <PJBoy> and writing extensions for it is pretty miserable
[21:45:20] <pulse> apart from vim/emacs which are in a whole different category anyway
[21:45:20] <rpav> i think the biggest annoyance i had was making sure to use /GL because CL.exe had an issue with static inline data members
[21:45:37] *** Quits: Kerr25 (~Kerr@2601:602:ce01:1f0:b2e1:d9dd:d9c3:4489) (Client Quit)
[21:45:44] <PJBoy> it is better than every linux text editor though, yeah
[21:45:46] <pulse> rpav, cross platform code will always be more bug prone. it's unpredictable
[21:45:52] <rpav> no one seriously uses gedit or the 30 others either heh
[21:45:52] <pulse> if you want stability you design for 1 platform, typically
[21:45:57] <rpav> pulse: wrong!
[21:46:05] <pulse> right, that's why people just run notepad++ through wine :p
[21:46:10] *** Joins: Kerr17 (~Kerr@2601:602:ce01:1f0:b2e1:d9dd:d9c3:4489)
[21:46:20] <pulse> rpav, well i don't see NASA making cross-platform satellite programs
[21:46:23] <rpav> cross platform code is actually _more_ reliable, because having built and debugged with multiple compilers/platforms, you tend to work out the bugs that are subtle and don't present on merely 1
[21:46:24] <PJBoy> there's sublime and VS code that are both cross platform and both looking to replace notepad++
[21:46:35] <pulse> ehhh, idk if that's true
[21:46:44] <pulse> it sounds like it should be, but i know in practice it's just not... usually
[21:46:53] <pulse> PJBoy, vs code is literally chrome
[21:46:53] <rpav> i have witnessed this in multiple languages that have multiple compiler/platform impls .. cross-platform and multi-compiler builds are the best thing you can do if you want solid/conformant code
[21:47:02] <PJBoy> I'm aware
[21:47:15] <PJBoy> but it's the classic thing of like
[21:47:22] <PJBoy> our computers are supposed to be fast now
[21:47:26] <PJBoy> and we want features
[21:47:27] <pulse> yeah, sometimes cross platform code will make bugs easier to spot, that's treue
[21:47:33] <PJBoy> and VS code has more features
[21:47:41] <pulse> but in some other instances it will actively bog down dev's time because of some stupid triviality
[21:47:51] <pulse> can't really generalize either way i feel
[21:48:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[21:48:45] <PJBoy> we certainly have a tonne of linux and windows specific hacks over at $work
[21:49:15] <jokoon> Could anybody provide a working example for picojson? I'm having trouble using it, I have linking errors...
[21:49:24] <pulse> the main issue is code just gets uglier. code is already ugly as is, but then you add a ton of platform specific and it's just even uglier, and probably buggier
[21:49:28] <jokoon> The examples provided don't deal with data
[21:50:18] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (Quit: Quitting)
[21:51:13] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[21:51:54] <jokoon> https://github.com/nlohmann/json seems like it's fine...
[21:52:05] <jokoon> Don't understand it's criticism
[21:52:20] <pulse> i'm actively moving all my projects away from it
[21:52:31] <PJBoy> criticism I've seen is just that it does a lot
[21:52:40] <jokoon> what are you moving to?
[21:52:59] <pulse> i wrote a parser
[21:53:23] <pulse> it's not very good though, i'm still looking for a perfect lib
[21:53:41] <pulse> my main criticism of nlohmann is that in a debug build, it will literally slow down by an insane amount
[21:54:08] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Remote host closed the connection)
[21:54:17] <pulse> maybe if it wasn't so heavily templated it wouldn't be a problem
[21:54:42] <pulse> so every time i run a debug build, i have to wait literal seconds for a trivially tiny json file to parse
[21:54:47] <pulse> it's just moronic
[21:54:54] <pulse> release builds work fine though
[21:55:25] <jokoon> Have you submitted an issue?
[21:55:44] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d599:1356:ccf8:7653)
[21:55:56] <rpav> oh lame, you can't have `void foo(); foo(foo());`
[21:56:08] <pulse> jokoon, nah, and it's unfixable
[21:56:25] <InPhase> nlohmann worked very well for me.  Although I certainly don't use debug builds to run anything in C++, as it's pretty incompatible with the language structure.
[21:56:38] <rpav> if only you were using cmake, you could build with RelWithDebInfo and it wouldn't be slow for debug builds ;)
[21:56:46] <pulse> then how do you debug?
[21:56:52] <rpav> by using the debugger
[21:56:55] <pulse> rpav, meh :p
[21:57:04] <InPhase> Why would one need a special build to debug code?
[21:57:13] <pulse> to get way more debug info
[21:57:17] <rpav> (generally unless you're having a very specific issue, build debug with -Og)
[21:57:30] <pulse> in VS, release builds are borderline undebuggable
[21:57:42] <rpav> if you think this issue is specific to nlohmann::json, you haven't used very much C++
[21:57:43] <InPhase> You can do release builds with debug info if you want, but I only fire up a debugger about once every year or two.
[21:57:56] <rpav> pulse: in VS, debug builds are often unrunnable
[21:57:58] <InPhase> If even that.
[21:58:11] <pulse> rpav, it's not, but it's obviously not very good design when a debug build will slow down the process by an enormous amount
[21:58:18] <pulse> i wrote a json parser - works great in any build
[21:58:20] <pulse> fast as crap
[21:58:35] <pulse> but it has very few features
[21:58:41] <rpav> pulse: you haven't used very much C++ if you think that; most of C++'s performance is highly dependent on the optimizers actually optimizing
[21:58:51] <kalven> ugh
[21:58:55] <InPhase> I specifically advocate (and was just making that argument elsewhere yesterday) never making any design decisions based on debug build performance.
[21:59:08] <rpav> MSVC's iterator stuff is exceptionally bad though, you should afaict always have /D_ITERATOR_DEBUG_LEVEL=0 or whatever
[21:59:09] <kalven> always with the "lacking experience"
[21:59:11] <pulse> funny you say that, yet i run a full SDL2 based game on a debug build with 0 hiccups. it's only nlohmann that i have to wait for for literal seconds
[21:59:19] <rpav> SDL2 is C
[21:59:51] <pulse> still, according to your logic i should be waiting for redraws
[22:00:03] <rpav> although, i've often build nlohmann::json without thought for whether it's in debug or not, and not had any issues with json parsing speed, so
[22:00:10] <pulse> yet it works perfectly fine. can't even see the diff between release and debug builds
[22:00:19] <pulse> but nlohmann i can shave 5 seconds off by running in release
[22:00:25] <pulse> that's unacceptable, regardless of the underlying cause
[22:00:28] <rpav> i would suspect your codebase
[22:00:37] *** Quits: proller (~p@2a02:6b8:0:40c:12be:2798:a194:636d) (Ping timeout: 240 seconds)
[22:00:40] <InPhase> Debug builds should be for exceptional cases where you need to track some weird crash or something in a debugger where you can't understand what the code is doing.  But if you can't understand the code, it's better to refactor it until you can understand it, and debug the source code based on its behavio instead of the executable.
[22:00:49] <InPhase> s/behavio/behavior/
[22:01:01] <kalven> this is such stockholm syndrome
[22:01:06] <pulse> i disagree InPhase
[22:01:11] <pulse> i was taught to build debug to debug
[22:01:13] <pulse> and that's what i do
[22:01:14] <InPhase> And if the code crashes a lot, refactor it until it does not crash.
[22:01:57] <InPhase> pulse: Well, okay.  But there are definitely other ways to program, if you engineer projects around a good maintainable structure.
[22:02:10] <pulse> well, i'm not denying that
[22:02:15] <pulse> it's just... you have this wonderful feature, why not use it
[22:02:25] <PJBoy> jokoon, https://gcc.godbolt.org/z/hnn7TdxM8
[22:03:10] <InPhase> pulse: Well clearly it's not wonderful when you're throwing out good libraries because of it.  :)
[22:03:31] <InPhase> Optimizers are central to the C++ language design philosophy.
[22:03:44] <pulse> well, i disagree that it's a good library
[22:03:52] <pulse> i haven't had this kind of issue with any other library
[22:03:58] <pulse> only nlohmann
[22:04:50] <PJBoy> I advocate for only building debug builds
[22:04:53] <pulse> even python outperforms it https://stackoverflow.com/questions/61047302/python-faster-than-c-in-deserializing-json-why-is-the-json-library-in-python
[22:04:58] <ville> InPhase: perhaps not debug performance, but certainly debug experience
[22:05:00] <PJBoy> and building release only for releases
[22:05:09] <InPhase> I use nlohmann in a program that has high performance requirements and never noticed any performance issues with it at all.
[22:05:51] <InPhase> PJBoy: You should do testing in the condition you are going to release.  Optimizers have a way of raising bugs to the forefront from bad code that don't appear in debug builds.
[22:06:13] *** Quits: geordi (~geordi@tinodidriksen.com) (Quit: https://github.com/eelis/geordi)
[22:06:14] <InPhase> PJBoy: Therefore a build with full optimization should be what developers do all of their early testing on.
[22:06:18] <PJBoy> prior to releasing the release, yeah
[22:06:19] *** Quits: Spydar007 (~spydar007@user/spydar007) (Quit: Quit)
[22:06:28] <PJBoy> but debug will generally catch more bugs
[22:06:32] *** Joins: geordi (~geordi@tinodidriksen.com)
[22:06:32] *** ChanServ sets mode: +v geordi
[22:06:39] <kalven> and asan
[22:06:42] <ville> i build sanitizer builds by default
[22:06:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:06:53] <pulse> i think i'll go with https://rapidjson.org/
[22:06:59] <pulse> i've heard good things about it
[22:07:02] <PJBoy> I'm hoping to move towards only building sanitizer builds too
[22:07:29] <PJBoy> not asan though
[22:08:03] *** Parts: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Leaving)
[22:08:05] <rpav> i build with sanitizers often, but it takes a long time and can slow things down if you're not debugging something
[22:08:05] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 252 seconds)
[22:08:24] <rpav> debugger is often faster for getting a simple backtrace if you have a reliable crash
[22:08:30] <InPhase> I don't use sanitizer builds, but I typically program in such a way that those error categories are architecturally forbidden.
[22:08:30] <pulse> https://github.com/miloyip/nativejson-benchmark
[22:08:36] *** Joins: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[22:08:52] <pulse> looks like rapidjson wins across the board
[22:08:55] <ville> hah
[22:09:07] <jokoon> https://gcc.godbolt.org/z/fc6ojbrcT PJBoy this fails to link in visual
[22:09:08] <rpav> if you don't check sanitizer builds, you likely have issues you don't know about
[22:09:17] <PJBoy> if I can reliably get a coredump (which I can't), then I'd not end up using the debugger too much
[22:09:37] <kalven> pulse: where's simdjson?
[22:09:53] <InPhase> rpav: I have an exception type that gives me stack traces.  I have code in production where I then get error logs from users which give me release build stack traces corresponding to errors that need to be addressed.
[22:10:00] <PJBoy> jokoon, works on godbolt
[22:10:08] <jokoon> sure I know
[22:10:11] <PJBoy> and it's a header only library
[22:10:25] <PJBoy> shouldn't be possible to have link errors
[22:10:38] <pulse> kalven, hmm
[22:10:38] *** Joins: Spydar007 (~spydar007@user/spydar007)
[22:11:02] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:e90c:8a2e:7515:668a)
[22:11:05] <ville> PJBoy: of course you can. hide your definitions behind a define
[22:11:08] <rpav> InPhase: but none of those find silent bugs, UB, thread issues (if relevant), etc
[22:11:10] <InPhase> pulse: So debug builds might let you get a stack trace if you can reproduce an error, but if that feature is built into the program, then you get them even if you can't reproduce them.
[22:11:20] <jokoon> https://bpa.st/KYSA
[22:11:30] <InPhase> pulse: And immediate at the bug report is faster.  :)
[22:11:39] <PJBoy> ville, oh yeah, that thing
[22:12:16] <InPhase> Thread issues are an architectural issue, and not something you want to be trying to find in a debugger.
[22:12:21] <pulse> https://github.com/miloyip/nativejson-benchmark/blob/master/sample/performance_Corei7-4980HQ@2.80GHz_mac64_clang7.0_1._Parse_Time_(ms).png
[22:12:39] <pulse> lol @ CAJUN being so far behind the image needs a horizontal scrollbar
[22:12:41] <InPhase> A debug build won't even reproduce race conditions from a release build.  Such conflicts need to be architecturally forbidden.
[22:12:46] <PJBoy> jokoon, is that from the code you posted??
[22:12:54] <jokoon> yes
[22:12:59] <PJBoy> alright I'll try it out locally
[22:13:00] <jokoon> In my code, though
[22:13:15] <PJBoy> which header did you download?
[22:13:19] <pulse> InPhase, in VS at least, you can't even step through the program without a debug build
[22:13:22] <jokoon> with precompiled headers
[22:13:31] <kalven> so to summarize, if you think the "debug build" that basically all compilers support actually is useful for anything, you're doing it wrong.. - modern c++ or something
[22:13:31] <PJBoy> oh PCH?
[22:13:33] <pulse> not to mention actually investigating memory
[22:13:38] <PJBoy> pfft, I dunno then
[22:13:50] <PJBoy> can't reason about PCH
[22:14:07] <jokoon> you might get the same error without PCH though
[22:14:08] *** Joins: xcm (~xcm@user/xcm)
[22:14:15] <pulse> it's true that sometimes turning off the optimizer will produce weird behavior though
[22:14:26] <pulse> you can't just willy nilly run stuff in debug mode and expect it to behave the same as in release
[22:14:52] <pulse> i remember one particular issue i had was where a release build would produce a bug and debug wouldn't. frustrating
[22:15:33] <pulse> so how come simdjson isn't on that benchmark
[22:15:59] <PJBoy> jokoon, ok I reproduced the error
[22:16:09] <kalven> pulse: it looks quite old
[22:16:29] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:16:36] <jokoon> I just want to parse a bit of JSON and access an int, a dict etc
[22:16:52] <jokoon> since the repo doesn't really have relevant example for this
[22:16:53] *** Quits: xcm_ (~xcm@user/xcm) (Read error: Connection reset by peer)
[22:16:53] <InPhase> pulse: Ok.  I don't use VS whenever I can avoid it, but it seems from what I read that you can also debug release with debug info and step through in VS.  https://docs.microsoft.com/en-us/cpp/build/how-to-debug-a-release-build?view=msvc-170
[22:16:57] <pulse> simdjson claims higher throughtput, can't really see any parsing benchmarks though
[22:17:04] <pulse> i'm not parsing 6 gb of json
[22:17:34] <InPhase> pulse: I haven't launched the VS debugger in 15 years, so I don't remember if I tried this.
[22:17:53] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[22:18:10] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[22:18:19] <pulse> yeah that should probably work InPhase
[22:18:28] <pulse> but you're basically converting a release build into a debug
[22:19:07] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:19:41] <InPhase> pulse: That's enabling the optimizer but still keeping debug info, which is perfectly reasonable.  It's the optimizer which is important to always keep on unless you have some exceptional case requiring disabling it, such as you're doing some debugging, you are at a section of code that you cannot understand for some reason, you are choosing to not refactor it, and some critical information ends up
[22:19:47] <InPhase> invisible.
[22:20:25] <pulse> yeah but optimizer itself is what obscures a ton of debug data
[22:20:27] <pulse> from what i understand, anyway
[22:21:01] <pulse> "In a debug build, you must explicitly specify /OPT:ICF to enable COMDAT folding. However, because /OPT:ICF can merge identical data or functions, it can change the function names that appear in stack traces. It can also make it impossible to set breakpoints in certain functions or to examine some data in the debugger, and can take you into unexpected functions when you single-step through your code. The behavior of the code is identical, but the debugger
[22:21:01] <pulse> presentation can be very confusing"
[22:21:19] <pulse> proper debug builds will have more debug data to extrapolate
[22:22:00] <pulse> i mean i've debugged in release before, i know it's miserable and confusing
[22:22:36] <pulse> sometimes it will just jump around in a confusing manner, or refuse to stop at a breakpoint, or refuse to show you contents of some variable
[22:22:54] <pulse> that's why i always debug in debug mode. you get the full picture there
[22:25:55] <InPhase> I prefer using print outs or logging systems if I need to track the flow of variable state across some sort of problem.
[22:26:37] <InPhase> Then I can see many cases at a glance and rewind time by scrolling up instead of the tunnel vision of a debugger.
[22:27:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:28:13] <jokoon> PJBoy, have you given up?
[22:28:30] <PJBoy> not yet
[22:28:36] <PJBoy> but this makes no sense to me
[22:28:41] <jokoon> I know
[22:29:10] <jokoon> since it involves templates, it makes it a bit difficult to understand what is going on
[22:30:48] <PJBoy> I can get it to work if I `#define PICOJSON_USE_INT64` and use int64_t instead of int in that get<int>() call
[22:30:53] <PJBoy> so that's a clue
[22:31:14] <jokoon> oh
[22:31:31] <jokoon> yeah he says it's a recent update in the readme
[22:31:41] <jokoon> maybe he has not tested it yet
[22:31:49] <jokoon> I'll try with string instead
[22:32:06] <PJBoy> does this thing not support other int types??
[22:32:10] <jokoon> yeah that's probably that
[22:32:13] <PJBoy> but then it worked on godbolt???
[22:32:46] <jokoon> well, unless it has been tested on msbuild, I'm not confident it's supposed to work
[22:33:02] <jokoon> compilers always have their differences
[22:33:12] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:33:46] <jokoon> microsoft usually keeps a lot of backward compatibility, which explains a lot of its gimmicks
[22:34:02] <jokoon> Im not willing to investigate this, I'll just submit an issue
[22:34:16] <PJBoy> fair
[22:34:27] <PJBoy> though that github has been gathering dust for coming up to 7 years
[22:34:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:34:53] <pulse> InPhase, in VS you can go into a deeply nested data structure and extract any data imaginable
[22:35:02] <pulse> why do you think i can't use anything other than VS :P
[22:35:07] <pulse> it's too good
[22:35:19] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:36:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:37:23] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[22:37:49] <PJBoy> VS is great and all
[22:37:57] <PJBoy> but it optimises pretty badly
[22:38:06] *** Joins: xcm (~xcm@user/xcm)
[22:38:10] <PJBoy> and its standard conformance is still a bit questionable
[22:38:28] <PJBoy> also no UB or thread sanitizer
[22:39:12] <PJBoy> on the plus side, it's easy to report bugs to them
[22:39:21] *** Joins: Simplar (~Simplar@188.163.93.241)
[22:39:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d599:1356:ccf8:7653) (Ping timeout: 240 seconds)
[22:39:44] <Alipha> rpav: https://github.com/alipha/cpp/blob/master/compiles/example.cpp#L49
[22:39:46] <PJBoy> and they have the full C++20 standard library
[22:40:01] <PJBoy> except for the stuff that was DR'd into the C++20 standard library last year
[22:40:21] <pulse> it's a supremely comfortable dev env. i'll gladly take any shortcomings :p
[22:40:55] <PJBoy> it has great vcpkg integration
[22:40:56] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[22:41:13] <PJBoy> except for when the package is incompatible with msbuild
[22:41:31] <PJBoy> which the vcpkg folk are too cowardly to admit
[22:41:32] *** Joins: CalamityBlue (~CalamityB@2603-8000-d907-cec8-c0c1-3f9b-2cdb-8c05.res6.spectrum.com)
[22:42:53] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (Read error: Connection reset by peer)
[22:43:28] <jokoon> PJBoy, did it work with just #define PICOJSON_USE_INT64
[22:43:29] <jokoon>  ?
[22:43:32] <InPhase> pulse: Well it must be hard to do cross-platform development if you're stuck only using VS.  I primarily develop C++ with vim and using cmake for building.
[22:43:39] <jokoon> Doesn't work for me
[22:43:42] <PJBoy> jokoon, with that before the header #include
[22:43:49] <PJBoy> and with changing the int to int64_t
[22:44:03] <PJBoy> and PCH disabled of course
[22:44:18] <InPhase> pulse: I keep a copy of Qt Creator around in case I need to run a debugger once in a long while.
[22:45:03] <jokoon> works with PCH enabled
[22:45:08] <pulse> i'll admit bias. i can't stand qt creator
[22:45:17] <PJBoy> it works? \o/
[22:45:22] <pulse> InPhase, yeah for cross platform i justs use vs code, lol
[22:45:30] <jokoon> yes, but with int64_t
[22:45:38] <jokoon> doesn't with int
[22:45:41] <PJBoy> yeah, same here
[22:45:47] <kevr> Hmm.
[22:45:51] <jokoon> so it's worthy of a new issue to me
[22:46:00] <PJBoy> I've more or less accepted int isn't provided
[22:46:00] <jokoon> I'll use the infamous nolmhan
[22:46:31] <PJBoy> which that guy changed his name
[22:46:34] <PJBoy> (wish
[22:46:36] <PJBoy> **
[22:47:17] <pulse> one thing about nlohmann that is better than all the rest is it has a comfy syntax
[22:47:53] <jokoon> whose guy?
[22:47:58] <jokoon> oh yes
[22:47:58] <kevr> Doxygen is giving me the following warning: `warning: argument 'id' of command @param is not found in the argument list of taskpp::Color::get_color(TermColor)`. The signature, however, is: http://sprunge.us/HsBYSv?cpp
[22:48:05] <kevr> what be happenin'? :'(
[22:48:16] <jokoon> well yeah, syntax is king
[22:48:58] <kevr> oh, i see what's happening.
[22:49:03] <kevr> it's talking about the friend i made.
[22:49:29] <kevr> k.
[22:51:22] *** Joins: obiwahn (~heini@user/obiwahn)
[22:55:39] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[22:58:51] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[23:03:09] <rpav> gcc 10 accepts `if constexpr(false) ostream << v;` with no implementation of operator<< for decltype(v)
[23:03:24] <rpav> not sure if that's legit or not but
[23:04:14] <rpav> er maybe not directly
[23:07:37] <rpav> wtf
[23:08:13] <rpav> is `if constexpr` more permissive in a template?
[23:10:13] <rpav> { f(S()); } template<typename T> void f(const T& v) { if constexpr(false) cout << v; } struct S {};
[23:10:14] <geordi>  
[23:10:29] <rpav> { f(S()); } struct S {}; void f(const C& v) { if constexpr(false) cout << v; }
[23:10:29] <geordi> error: 'C' does not name a type
[23:10:34] <rpav> er
[23:10:38] <rpav> { f(S()); } struct S {}; void f(const S& v) { if constexpr(false) cout << v; }
[23:10:38] <geordi> error: no match for 'operator<<' in 'cout << v' (operand types are 'ostream' {aka 'ostream'} and 'const S')
[23:10:39] <kalven> yes, if constexpr is more permissive in a template
[23:12:14] <rpav> also does not work when S is explicit and not part of the template
[23:12:51] <RandomReader> cppreference has a whole section dedicated to it: https://en.cppreference.com/w/cpp/language/if#Constexpr_if
[23:13:43] <PJBoy> it's a bit questionable though
[23:14:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4cc5:9f8f:f25b:50c6)
[23:14:12] <rpav> none of those explain if constexpr(false) as it's not value-dependent on the template
[23:14:13] <PJBoy> is says the false-branch statement is discarded, but I dunno about that
[23:14:34] <PJBoy> it still finds errors in them
[23:14:35] <LordKalma> is discarded, but has to be valid c++
[23:14:46] <PJBoy> and it finds static_assert(false)
[23:15:12] <RandomReader> how so? it behaves as a static expression outside a template, and behaves like any other part of template code generation when inside a template
[23:15:28] <RandomReader> these aren't exactly unique or new to constexpr-if, it's how the rest of the language behaves
[23:15:47] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[23:15:50] <rpav> RandomReader: this seems to apply when the _body_ is dependent on the template
[23:15:50] <PJBoy> { f(S()); } template<typename T> void f(const T& v) { if constexpr (false) static_assert(false); } struct S {};
[23:15:50] <geordi> error: static assertion failed
[23:15:53] <LordKalma> https://twitter.com/blelbach/status/1486039686690836483
[23:15:54] <PJBoy> like in that example
[23:15:56] <LordKalma> who wants a job?
[23:16:01] <PJBoy> that static assert clearly wasn't discarded
[23:16:16] <LordKalma> it is on the codegen
[23:16:25] <PJBoy> unless discarded means something specific that doesn't correspond with the human interpretation
[23:16:32] <rpav> { f<int>(S()); } struct S {}; template<typename T> void f(const S& v) { if constexpr(false) cout << v; }
[23:16:32] <geordi> error: no match for 'operator<<' in 'cout << v' (operand types are 'ostream' {aka 'ostream'} and 'const S')
[23:16:53] <PJBoy> point is the cppreference explanation is questionable
[23:16:55] <RandomReader> PJBoy - "discarded" does not mean "ignored", it means "not used"
[23:17:07] *** Joins: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025)
[23:17:18] <RandomReader> function_returning_value();  // discarded-value expression
[23:17:31] <PJBoy> I have a vague idea of what happens to the false branch of constexpr if, and it's not thanks to that site
[23:18:04] <PJBoy> I'm not sure that that is a discarded value expression
[23:18:10] <PJBoy> I thought they had to be specifically cast to void
[23:18:30] <rpav> but this seems to involve further mechanics, where "not used" implies a "template statement" (is there a better term?) both exists and is "not used" before it is instantiated, which i suppose would explain this
[23:18:30] <PJBoy> and even then, I'm not sure what the semantics of discarding a value explicitly are
[23:19:17] <rpav> e.g. given `<T> f(T v) { g(v); }` .. `g(v)` would be an "uninstantiated statement" so to speak
[23:19:58] *** Quits: jokoon (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Ping timeout: 268 seconds)
[23:20:11] <LordKalma> what's that website with the open c++ standard?
[23:20:12] <PJBoy> LordKalma, it has to be somewhat valid
[23:20:25] <PJBoy> but I couldn't tell you the definition of valid
[23:20:29] <RandomReader> I'm a bit lost as to what train of thought either of you are following
[23:20:52] <RandomReader> even ignoring C++ specifics, I don't follow the logic
[23:20:56] <PJBoy> like the example rpav had earlier put `cout << v;` into the false branch of constexpr, which is invalid
[23:21:00] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[23:21:03] <PJBoy> and that's fine
[23:21:15] <LordKalma> PJBoy, syntatically valid I think
[23:21:23] <LordKalma> if has to be "paseable"
[23:21:24] <PJBoy> static_assert(false) is syntactically valid
[23:21:26] <PJBoy> but it always fails
[23:21:36] <RandomReader> LordKalma you're looking for https://eel.is/c++draft/ ?   or https://github.com/timsong-cpp/cppwp ?
[23:21:38] <rpav> >:D
[23:21:43] <PJBoy> so the definition of "valid" is somewhere in between
[23:21:43] *** Quits: jokoon2 (~eio@2a01:e0a:542:e160:a4f1:bf33:7883:5025) (Client Quit)
[23:21:48] <RandomReader> PJBoy - but that's always true for static_assert
[23:21:53] <RandomReader> period, everywhere
[23:22:25] <PJBoy> static_assert(sizeof(T) == 0) is also false everywhere
[23:22:27] <PJBoy> but it works
[23:22:36] <rpav> this is incredibly inconsistent actually
[23:22:41] <RandomReader> no, that's dependent on T
[23:22:42] <RandomReader> I'm talking about static_assert(false)
[23:22:56] <PJBoy> it's dependent on T, but it's still equivalent
[23:23:04] <RandomReader> it's not equivalent, and you know that
[23:23:06] <rpav> { f(S()); } struct S {}; template<typename T = int> void f(const S& v) { if constexpr(false) cout << (T(),v); }
[23:23:07] <geordi>  
[23:23:18] <PJBoy> my point is how constexpr-if works requires many many more words than what cppreference tells me
[23:23:22] <RandomReader> trying to make this *more* complicated is silly
[23:23:29] <PJBoy> and I don't even know what those words are
[23:23:32] <rpav> { f(); } struct S {}; template<typename T = int> void f() { if constexpr(false) (T(),static_assert(false)); }
[23:23:33] <geordi> error: expected primary-expression before 'static_assert'
[23:23:37] <rpav> er
[23:23:43] <cbreak> asserting false makes no sense
[23:23:46] <PJBoy> my constexpr-ifs always end up requiring some trial and error
[23:23:48] <RandomReader> why? because you took a specific case of static_assert and tried to generalize it? :P
[23:24:03] <PJBoy> nah like I can't explain constexpr-if to someone else
[23:24:52] <PJBoy> "the false branch of the constexpr if is checked for validity, to a point... it depends on the expressions in the branch depending on template parameters, I think"
[23:24:57] *** Joins: c4017w (~c4017@199-7-158-225.eng.wind.ca)
[23:26:10] <rpav> ah static_assert being a statement means you can't hack it with comma
[23:26:32] <PJBoy> could use a lambda to convert it to an expression
[23:27:49] <PJBoy> { f(); } struct S {}; template<typename T = int> void f() { if constexpr(false) (T(), [] { static_assert(false); }()); }
[23:27:49] <geordi> error: static assertion failed
[23:27:54] <rpav> i think you can't
[23:28:20] <rpav> you can pass T() but i'm not sure that's helpful
[23:28:28] <PJBoy> I don't really understand the motivation for constexpr-if to be so specific either
[23:28:30] <RandomReader> this is specifically what that one is about: http://eel.is/c++draft/temp.res.general#6.1
[23:29:10] <RandomReader> it's part of a general rule for templates that they must be theoretically valid, but it'd be the Halting Problem to definitively prove that in all cases
[23:29:15] <RandomReader> static_assert(false) however is trivial
[23:29:17] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:29:31] <PJBoy> static_assert(sizeof(T) == 0) is pretty trivial too :/
[23:29:43] <RandomReader> only if you make it more complicated
[23:29:49] <RandomReader> see Halting Problem
[23:30:03] <PJBoy> nah it's simply never true
[23:30:08] <PJBoy> sizeof(T) >= 1 is an axiom
[23:30:55] *** Quits: Tokamak (~Tokamak@172.58.188.93) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[23:30:58] <RandomReader> again, only if you make the analysis more complicated
[23:31:34] <RandomReader> you certainly *could* make that a formal axiom in a compiler and run with it, but why? it's more complicated, and static_assert(false) is already a well known shortcut
[23:32:24] <RandomReader> and none of this is necessary to understand constexpr-if
[23:32:39] <PJBoy> I mean it just seems only very slightly less trivial than `static_assert(false)`
[23:32:47] <PJBoy> the optimiser probably *is* aware of this fact
[23:33:03] <RandomReader> ok, sure, we can go with that .. but why does it matter?
[23:33:11] <RandomReader> it doesn't change anything about the reasoning here
[23:33:35] <PJBoy> I just think it sucks that static_assert(false) is an error when in the false branch of a constexpr-if :(
[23:33:59] <RandomReader> you think it sucks that you can't put landmines in your code generation? :P
[23:34:14] <RandomReader> or I should say, that it's ill-defined NDR when you do?
[23:34:17] <PJBoy> my code gen doesn't particularly care about static_assert
[23:34:35] <RandomReader> I mean, I get it from the sense of "I want this to always fail", but that's a *template* thing, it's not new to constexpr-if
[23:34:36] <PJBoy> well I do use static_assert(sizeof(T) == 0) a lot
[23:35:05] <PJBoy> sometimes you just want to fail compilation with a useful message
[23:36:07] <PJBoy> usually as the else branch of a chain of `if constexpr else if constexpr`
[23:36:11] *** Joins: proller (~p@2a02:6b8:b081:7202::1:19)
[23:37:01] <RandomReader> so you want to write code in a way that isn't supported by the template system, and you've managed to associate it as a problem with constexpr-if
[23:37:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca)
[23:37:30] <PJBoy> these constexpr-ifs aren't necessarily in templates
[23:37:38] <PJBoy> or wait I guess they are
[23:37:41] <Alipha> so, the "first pass" through the code (before templates are instantiated), the compiler tries to evaluate everything that it can (looking inside if constexpr branches even if they're false) and produce compile errors. but then during the "second pass", when the compiler knows what the template arguments are, it doesn't look at if constexpr branches which are false
[23:37:49] <RandomReader> (considering how nuts constexpr in C++ is in general, that's understandable)
[23:38:08] <PJBoy> I do think it's a constexpr-if problem though, yeah
[23:38:14] <RandomReader> it's not though
[23:38:16] <PJBoy> the false branch should be actually discarded
[23:38:22] <PJBoy> as opposed to pseudo-discarded
[23:38:27] <RandomReader> it *is* discarded
[23:38:36] <PJBoy> it's discarded in a non-human sense
[23:38:40] <RandomReader> Alipha describes the evaluation, but the core problem is you created an incorrect template
[23:38:56] <RandomReader> it's not the branch, it's the entire template you broke
[23:39:06] <PJBoy> like do you know what discarded means here?
[23:39:07] <Alipha> the same happens with `template<typename T> struct foo { static_assert(false); };` or `template<typename T> void bar() { static_assert(false); }`
[23:39:08] <RandomReader> it has nothing to do with constexpr-if
[23:39:22] <rpav> PJBoy: https://godbolt.org/z/qGvWME617
[23:39:41] <rpav> if constexpr(...) branch_fail(msg)
[23:40:01] <Alipha> rpav: did you look at https://github.com/alipha/cpp/blob/master/compiles/example.cpp#L49 btw?
[23:40:16] <PJBoy> that presumably runs into the same IFNDR issue as `static_assert(sizeof(T) == 0);`
[23:40:38] <PJBoy> we should note that MSVC does constexpr-if the way I'd like it
[23:40:45] *** Joins: Tokamak (~Tokamak@172.58.188.93)
[23:40:47] <PJBoy> and I submitted a bug report about it >_>
[23:40:55] <rpav> dunno, all three major compilers accept it but
[23:41:09] <rpav> PJBoy: yeah and sometimes it does't ;/
[23:41:24] <rpav> Alipha: is that for checking if << works? i used a namespace hack etc for that, but cool
[23:42:32] <PJBoy> ( https://godbolt.org/z/hb1T1djqj )
[23:42:49] <Alipha> rpav: "namespace hack"?
[23:43:34] <rpav> Alipha: you make an overriding `struct no {}; no operator<<(implicit,implicit);` where implicit converts from anything, and see if the decltype for `cout << T()` is `no`
[23:43:41] <PJBoy> and you can see it's a constexpr-if problem, because changing it to `if constexpr(true)` makes the code correctly fail to compile
[23:43:51] <rpav> but it should be in a namespace so nothing else sees it, but it sees everything
[23:44:14] <rpav> PJBoy: yeah that also looks inconsistent
[23:44:28] <PJBoy> it's non-conforming
[23:44:31] <PJBoy> but I like it
[23:44:39] <rpav> like if i had my choice, `if constexpr(false)` would delete the code as long as it unambiguously parsed
[23:44:47] <PJBoy> yeah exactly
[23:45:13] <rpav> instead we resort to iffy and unclear hacks to get it to do that anyway ;)
[23:45:28] <LordKalma> the true c++ (TM) way
[23:45:30] <PJBoy> exactly
[23:45:34] <rpav> hehe
[23:47:17] *** Quits: MatSharrow (~matthew@169.99.9.51.dyn.plus.net) (Ping timeout: 240 seconds)
[23:47:51] <InPhase> Alipha: I am stealing your MIT-licensed compiles.hpp/cpp code...  That looks potentially useful.
[23:47:56] <PJBoy> so my understanding of how it really works
[23:48:22] <PJBoy> the compiler will do its best to make whatever can fail to compile do so, constexpr-if notwithstanding
[23:48:33] <InPhase> Alipha: I often avoid writing such checks just because they are too code heavy to be worth it most of the time.  But that's the most elegant syntax I've seen for it so far.
[23:49:05] <PJBoy> and when the template comes to be instantiated, the compiler will at that point ignore the false branch of the constexpr-if
[23:49:17] <Simplar> I got owned by a simple math problem that even a high schooler can solve. I feel odd.
[23:49:32] <PJBoy> and then you're either good or you're IFNDR
[23:49:36] <Alipha> InPhase: go ahead :-) though you may regret it when it fails for an unknown reason and you're now in macro hell ;-)
[23:49:58] <InPhase> Alipha: Correction, apparently I downloaded your library 9 months ago and forgot I did so.
[23:49:59] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:487f:1da5:d721:b5d5) (Quit: Quit)
[23:50:04] <Alipha> Lol
[23:50:31] <InPhase> The trick will be to remember it is there the next time I need it.  :)
[23:50:40] <PJBoy> to be fair, complex division was brought up here, and it took me like 15 minutes to recalculate how those are done
[23:51:30] <PJBoy> then it turned out I forgot about the trick where you multiply the numerator and denominator by the conjugate of the denominator, which would have saved me like 10 of those minutes
[23:52:01] <PJBoy> that's what happens when you experience too much UB
[23:53:14] <rpav> total protonic reversal?
[23:54:44] <PJBoy>  !fact
[23:54:44] <Alipha> rpav: that implicit hack is interesting. the traditional way is to create a "trait struct" (has_ostream_operator here) and use that: https://wandbox.org/permlink/GLvgK0FjsZnPFbNT ... a lot of boilerplate though. which is why i wrote LIPH_COMPILES
[23:54:49] <PJBoy> <nolyc> crossing the streams is undefined behaviour
[23:56:14] <rpav> Alipha: wtf i was trying something simpler like that with no luck .. though i wasn't using cout directly at that point
[23:56:53] <rpav> Alipha: going to change to that impl because the other feels a lot more barely-C++11 and that's nicer :p
[23:57:18] <Alipha> rpav: you'd use std::declval<std::ostream&>() if you didn't want to specifically use std::cout
[23:57:19] <PJBoy> it's the redundant template type parameter in the base template that usually gets people
[23:57:30] <rpav> Alipha: i tried that and it seemed to have issues ;/
[23:57:40] <rpav> not sure what but
[23:57:44] <rpav> let's do this again right
[23:58:08] <Alipha> rpav: I think you need the &. Did you have a & in your declval?
[23:58:39] <rpav> ah maybe not
[23:59:06] <PJBoy> can do without the structs https://wandbox.org/permlink/Pm2AiAY3qXytaHNR
[23:59:57] <rpav> that's 17-permissible?
