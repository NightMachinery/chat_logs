[00:03:32] <electricityZZZZ> yeah i also don't understand instruction sets but that's an entirely different can of worms :)
[00:04:04] <geekosaur> instruction sets make sense to CPU designers
[00:04:09] <electricityZZZZ> jim keller said that there were just a few instructions which comprised nearly everything that a CPU executes, something like 85% or 95% of instructions were one of like six or eight things
[00:04:13] <electricityZZZZ> for me that was rather clarifying
[00:04:30] <geekosaur> there are some *oodd* instruction sets out there. various RISC designs, VLIW, etc
[00:04:53] <geekosaur> someday you should look up the RCA COSMAC 1802, that was a *weird* instruction set
[00:06:24] <electricityZZZZ> one thing i was curious to understand about ISAs is that
[00:06:31] <electricityZZZZ> some folks made this reduceron thing
[00:07:00] <electricityZZZZ> and i never understood whether that meant that the reduceron could execute a functional/haskell-species language with greater memory safety
[00:07:06] <electricityZZZZ> as compared to x86 etc
[00:07:57] *** Joins: vicfred (~vicfred@user/vicfred)
[00:08:21] <geekosaur> probably not. ultimately it has to execute "normal" code when it enters a thunk/primop/FFI call/etc. and will have potential memory safety issues
[00:08:34] <geekosaur> the reduceron is just faster at graph reduction, not safer
[00:09:06] <electricityZZZZ> as a separate matter ...there probably would be some way to bound the maximum performance impact of switching ISAs... it's like any instruction you create can be emulated by at most N instructions from another turing-complete (or sufficiently complex/reasonable) instruction set... i would guess that N is like 5 to 10,...
[00:10:01] <electricityZZZZ> ah, FFI is a great thing to bring up here--
[00:10:16] <electricityZZZZ> if we talk about a sort of "minimum surface area" for interacting with something like a haskell program
[00:10:52] <geekosaur> you may be interested in some of the research in emulating x86 (see for example Transmeta)
[00:10:53] <electricityZZZZ> for example the haskell program could be running on a device with "merely" an ethernet port or "merely" a single pcie connector and no other io
[00:12:00] <geekosaur> look at some of the rpi's little cousins
[00:12:15] <electricityZZZZ> so if you have whatever maximally simple reasonable io assumption you like
[00:12:30] <geekosaur> haskell is a bit difficult to get running on many of them because they're also xmall memory, but limited I/O is certainly a thing too
[00:12:44] <electricityZZZZ> can the haskell program still have nice memory safety guarantees or can the io flood the program and cause bad things to happen
[00:13:01] <geekosaur> generally when you reach that point you are programming it with something like ladder logic though
[00:14:07] <electricityZZZZ> i guess you would need to check (e.g. bounds check, parse, etc) all the io which flows in?
[00:14:14] <geekosaur> hm? I/O ports don't cause bad things to happen. I/O handling might, but that's down to things like poorly written buffering or interrupt routines
[00:14:23] <geekosaur> which you don't generally write in haskell
[00:14:33] <electricityZZZZ> i have io which flows into a haskell program
[00:14:50] <geekosaur> (you can't safely allocat ein an interrupt time routine, although there are ways around it)
[00:14:56] <electricityZZZZ> the io can be restricted, if you like, to any reasonable single method of io
[00:15:20] <electricityZZZZ> and the question is, can my haskell program violate memory safety assumptions if i don't check the io myself
[00:15:26] <electricityZZZZ> don't check dynamically
[00:15:31] <electricityZZZZ> like at execution time
[00:16:09] <geekosaur> I don't understand "don't check the IO myself", if my earlier response didn;t answer it
[00:16:56] <electricityZZZZ> well so let's say that there is some memory range which haskell reads directly
[00:17:04] <electricityZZZZ> and my haskell program does nothing else unsafe
[00:18:06] <electricityZZZZ> the question is, is it possible or impossible to have unsafe memory access
[00:18:29] <electricityZZZZ> especially if i don't check the io after reading it
[00:19:04] <geekosaur> IO does not magically land in memory
[00:19:06] <sshine> electricityZZZZ, you can always run out of memory
[00:19:40] <geekosaur> you have a (usually memory mapped) IO port which something (typically an interrupt routine) reads and sequences into a buffer somewhere
[00:20:01] <electricityZZZZ> and the buffer cannot be overflowed?
[00:20:09] <geekosaur> just throwing data at an IO port without this will lead to the data being completely ignored, not just written to memory randomly
[00:20:37] <geekosaur> the buffer could be but this is not a haskell level probloem. this is an OS services problem
[00:20:56] <geekosaur> or at worst a runtime problem, for the most minimalist implementation
[00:21:20] <electricityZZZZ> and then if i read data from the buffer, can that be directly transformed into a memory address or otherwise lead to unsafe behavior?
[00:21:32] <geekosaur> that's up to the program
[00:21:56] <geekosaur> again there is no magic involved; if it treats the data as a memory address it's engaging in unsafe behavior
[00:22:16] <geekosaur> (note that haskell will not do this without specific code that coerces the data into a Ptr)
[00:23:29] <electricityZZZZ> ok so i can reasonably infer that "using io cannot result in unsafe behavior"
[00:23:37] <geekosaur> you can do this with the FFI, but the FFI basically exists to do this because it esxchanges data between Haskell and C and pretty much by definition C is unsafe
[00:23:50] <electricityZZZZ> or i should say "using io cannot *cause* unsafe behavior" i mean
[00:24:04] <electricityZZZZ> FFI makes me nervous
[00:24:19] <geekosaur> but IO itself is not unsafe
[00:24:26] <geekosaur> FFI should make you nervous
[00:25:11] <electricityZZZZ> cognitive load is too high
[00:25:42] <geekosaur> it's no worse than the cognitive load of safely programming in C. most people just ignore that part
[00:26:11] <electricityZZZZ> okay, another question: can haskell be re-engineered to not have exceptions (ala rust) or have a very limited and comprehensible set of panic/exception type scenarios?
[00:26:50] <geekosaur> not only could it, but I'm generally on the side of "it should". I dislike exceptions used as control flow
[00:27:42] <geekosaur> sadly there are few people who agree with me that exceptions should be reserved for actual exceptional conditions, not e.g. "permission denied opening file" or "hit EOF"
[00:28:54] <geekosaur> this said, exceptions are I think part of the libraries, not core Haskell; someone could design a different core library which didn't use exceptions that way
[00:30:46] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:9996:52da:e8ad:1d27)
[00:30:48] *** Quits: polyphem (~rod@2a02:810d:840:8754:a778:fc55:137:3e0) (Ping timeout: 250 seconds)
[00:31:00] *** polyphem_ is now known as polyphem
[00:31:44] <electricityZZZZ> and is creating efficient equivalences between lazy and strict definitions of things an ai-hard problem or a simple problem?
[00:31:53] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[00:33:44] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[00:50:28] <electricityZZZZ> wow lol there is an ieee spectrum article from just a few years ago which linked to a dtic pdf article describing the 1802... but now it looks like the article is no longer accessible to the public
[00:51:10] <electricityZZZZ> the world's most dangerous severely obsolete video game computer lol ;-)
[00:52:13] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:52:23] <geekosaur> hm, don't think it got used much for video games. its biggest use was in satellites (hence COSMAC) because it was at the time the most radiation-hardened CPU in existence
[00:52:53] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (Ping timeout: 250 seconds)
[00:53:47] *** Quits: joes (~joes@hardfought/member/joes) (Ping timeout: 268 seconds)
[00:58:55] <electricityZZZZ> right
[01:05:35] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[01:06:58] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:18:48] *** Joins: Pickchea (~private@user/pickchea)
[01:27:03] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 256 seconds)
[01:27:23] *** Joins: iteratee (~kyle@162.218.222.107)
[01:34:29] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 268 seconds)
[01:36:14] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[01:37:41] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:40:35] *** Joins: iteratee (~kyle@162.218.222.107)
[01:41:30] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:12:44] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:21:32] *** Quits: iteratee (~kyle@162.218.222.107) (Ping timeout: 240 seconds)
[02:33:18] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:36:37] *** Quits: electricityZZZZ (~rustisafu@2602:306:cd3c:9350:922:bfb8:8a58:eb15) (Ping timeout: 240 seconds)
[02:44:14] *** Joins: hololeap (~hololeap@user/hololeap)
[02:50:32] *** Joins: iteratee (~kyle@162.218.222.107)
[03:16:02] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[03:37:56] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:05:49] *** Joins: electricityZZZZ (~rustisafu@2602:306:cd3c:9350:922:bfb8:8a58:eb15)
[04:06:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[04:10:05] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[04:11:37] *** Quits: electricityZZZZ (~rustisafu@2602:306:cd3c:9350:922:bfb8:8a58:eb15) (Ping timeout: 240 seconds)
[04:31:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[04:34:25] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[04:38:04] *** Joins: jespada (~jespada@87.74.36.188)
[04:47:21] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[04:52:47] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[05:23:11] *** Quits: xsperry (~xs@user/xsperry) (Killed (NickServ (GHOST command used by asdfasf!~xs@cpe-188-129-71-242.dynamic.amis.hr)))
[05:29:43] *** Joins: jackson98 (~bc8147f2@cerf.good1.com)
[05:30:59] *** Joins: xsperry (~xs@user/xsperry)
[05:59:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[06:02:17] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[06:03:36] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:04:37] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[06:06:41] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[06:31:37] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[06:38:09] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[06:39:27] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:09:53] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[07:26:23] *** Quits: jackson98 (~bc8147f2@cerf.good1.com) (Quit: quit)
[07:26:28] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: quit)
[07:30:24] *** Quits: xsperry (~xs@user/xsperry) ()
[08:03:33] *** Joins: xsperry (~xs@user/xsperry)
[08:34:17] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:08:58] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[09:32:13] *** Joins: electricityZZZZ (~rustisafu@2602:306:cd3c:9350:922:bfb8:8a58:eb15)
[09:32:19] *** Quits: electricityZZZZ (~rustisafu@2602:306:cd3c:9350:922:bfb8:8a58:eb15) (Remote host closed the connection)
[10:17:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[10:21:25] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[10:28:54] *** Joins: dobblego (~dibblego@122-199-1-30.ip4.superloop.com)
[10:28:54] *** Quits: dobblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[10:28:54] *** Joins: dobblego (~dibblego@haskell/developer/dibblego)
[10:32:33] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 256 seconds)
[10:32:33] *** dobblego is now known as dibblego
[11:09:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:19:25] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (Quit: Ping timeout (120 seconds))
[11:19:44] *** Joins: Goodbye_Vincent (~Goodbye_V@freakshells.net)
[11:20:11] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[11:20:21] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (Ping timeout: 245 seconds)
[11:21:18] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[11:22:01] *** Joins: edmundnoble (sid229620@id-229620.helmsley.irccloud.com)
[11:39:26] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[11:47:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:47:44] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:44] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:47] *** allbery_b is now known as geekosaur
[12:50:28] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[13:14:17] *** Joins: amoe (~amoe@visarend.solasistim.net)
[13:15:45] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[13:44:32] *** Joins: joes (~joes@hardfought/member/joes)
[13:49:00] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[14:02:29] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:03:08] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:23:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[14:25:20] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:03:57] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[15:05:24] *** Joins: hololeap (~hololeap@user/hololeap)
[15:41:31] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[15:43:02] *** Joins: zaquest (~notzaques@5.130.79.72)
[15:45:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:19:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[16:23:35] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[16:49:47] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[17:15:21] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:27:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[17:54:42] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:17:11] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[18:22:57] *** Quits: polyphem (~rod@2a02:810d:840:8754:9996:52da:e8ad:1d27) (Ping timeout: 240 seconds)
[18:24:03] *** Joins: polyphem (~rod@2a02:810d:840:8754:f5a2:d787:2125:a747)
[18:28:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[18:30:59] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:31:57] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[18:41:51] *** Quits: polyphem (~rod@2a02:810d:840:8754:f5a2:d787:2125:a747) (Ping timeout: 268 seconds)
[18:50:46] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:02:28] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[19:03:23] *** Joins: polyphem (~rod@2a02:810d:840:8754:ab25:19d5:5fa5:69d5)
[19:07:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:20:13] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[19:20:49] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[19:21:27] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[19:26:53] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[19:35:18] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:47:17] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (Ping timeout: 240 seconds)
[19:52:10] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[19:52:10] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[19:52:10] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[19:55:05] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:07:49] *** Quits: qwd- (~qwd@185.203.114.234) (Ping timeout: 240 seconds)
[20:09:14] *** Joins: qwd (~qwd@185.203.114.234)
[20:24:16] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:27:02] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:53:25] *** Joins: vicfred (~vicfred@user/vicfred)
[20:57:40] *** Quits: vicfred (~vicfred@user/vicfred) (Client Quit)
[21:48:05] *** Quits: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[21:59:24] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[22:16:49] *** Joins: dminuoso_ (~dminuoso@static.88-198-218-68.clients.your-server.de)
[22:17:29] *** Quits: dminuoso (~dminuoso@user/dminuoso) (Ping timeout: 256 seconds)
[22:28:59] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[22:52:04] *** Joins: soxen (~bob@pool-173-54-217-168.nwrknj.fios.verizon.net)
[22:58:23] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 268 seconds)
[23:47:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:47:34] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:51:49] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Ping timeout: 240 seconds)
[23:57:20] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
