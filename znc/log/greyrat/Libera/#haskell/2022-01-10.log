[00:01:14] *** Joins: Guest80 (~Guest80@p200300d5572443000b6ab41968a4cb33.dip0.t-ipconnect.de)
[00:01:31] <[itchyjunk]> when i implement myFoldFilter using foldr, myFoldFilter :: (a -> Bool) -> [a] -> [a] right?
[00:01:50] <[itchyjunk]> the signature my the filter function made with foldr would be the same?
[00:03:44] <polyphem> [itchyjunk]: yes
[00:04:19] <EvanR> same store front, different back office
[00:04:27] *** Joins: ouestbil1ie (~gallup@142.169.33.81)
[00:04:36] <[itchyjunk]> lol
[00:04:55] <ephemient> > let f a k (b:bs) = (a, b) : k bs; f _ _ _ = [] in foldr f (const []) ['a'..] [1..] -- just experimenting out of curiosity. if there's a way to define `f` in terms of `foldr` it's not obvious to me
[00:04:56] <lambdabot>  [('a',1),('b',2),('c',3),('d',4),('e',5),('f',6),('g',7),('h',8),('i',9),('j...
[00:05:03] <[itchyjunk]> i need to massage the (a -> Bool) to soemthing that works with (a -> b -> b)
[00:05:39] *** Quits: s2k (~textual@122.172.234.134) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:05:49] <EvanR> or just us the (a -> Bool) in the lambda
[00:05:53] <EvanR> use
[00:06:09] *** Joins: jakalx (~jakalx@base.jakalx.net)
[00:06:40] *** Quits: Guest80 (~Guest80@p200300d5572443000b6ab41968a4cb33.dip0.t-ipconnect.de) (Quit: Client closed)
[00:09:10] <EvanR> style question
[00:09:38] *** Quits: ouestbillie (~gallup@modemcable053.204-20-96.mc.videotron.ca) (Quit: Lost terminal)
[00:09:45] <EvanR> according to my flawless proof and understand of this algorithm, the list returned by my IO action will be empty. If it isn't, something is very wrong. So
[00:09:55] <EvanR> also there's a warning for ignoring the result in do notation
[00:10:30] <EvanR> do { [] <- myAction; ... carry on } -- if I do this, I appease the warning and dare my proof and understanding to be right. Good idea?
[00:10:50] <geekosaur> probably a good idea to test that understanding, yes
[00:10:52] <EvanR> or what's another way to deal with it
[00:11:08] <geekosaur> although I might prefer to capture the output and print what I got if it wasn't empty
[00:11:12] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[00:11:25] <geekosaur> help me figure out what I got wrong
[00:11:28] <EvanR> ah
[00:12:15] <int-e> > let f a k = fst . foldr (\b ~(_, bs) -> ((a, b) : k bs, b : bs)) ([],[]) in foldr f (const []) ['a'..] [1..] -- ephemient
[00:12:17] <lambdabot>  [('a',1),('b',2),('c',3),('d',4),('e',5),('f',6),('g',7),('h',8),('i',9),('j...
[00:12:28] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[00:12:31] <int-e> ephemient: it's quite awkward though
[00:12:46] <EvanR> I've had advice in the past to not do something like this, so the program has a chance of continuing on despite some horrible error having happened (in writing the code)
[00:13:10] <geekosaur> nowhere in there did I hear "is a good idea" with respect to writing everything with foldr :)
[00:13:29] *** Joins: koalillo (~koalillo@2a0c:5a81:b804:9900:6f90:e8ce:c737:204c)
[00:13:45] <ephemient> ah, the fst lets you select between the cases
[00:13:49] <int-e> ephemient: and if you add a few more tweaks the code is likely to explode
[00:13:50] <ephemient> that is pretty awkward
[00:13:53] <geekosaur> EvanR, maybe. but too often ime that kind of logic is the logic of dynamic languages that silently deliver garbage
[00:14:16] *** Quits: ouestbil1ie (~gallup@142.169.33.81) (Ping timeout: 256 seconds)
[00:15:10] <int-e> ephemient: note also the loss of sharing on `bs` (which becomes relevant if k actually uses it)
[00:15:22] <EvanR> also, I wonder where "let it crash" fits into this
[00:15:48] <c_wraith> "let it crash" is "we won't prevent garbage, but at least we won't propagate it"
[00:16:30] <EvanR> this is kind of like, "not only let it crash, cause it to crash more"
[00:17:54] <hpc> sometimes the most correct thing to do is be as wrong as possible
[00:17:58] <EvanR> lol
[00:18:01] *** Joins: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46)
[00:18:06] *** Joins: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[00:18:06] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[00:18:58] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Quit: leaving)
[00:19:11] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[00:19:15] <[exa]> ah the good old full-scale crashes, absolute units of crashage.
[00:20:12] <hololeap> [itchyjunk]: you'll need to use an if-then-else statement using your (a -> Bool) and the given a to get a -> [a] -> [a]
[00:20:29] <Hecate> I deeply dislike MonadFail
[00:21:12] <EvanR> oh ... this is MonadFail territory now, I forgot
[00:21:19] <c_wraith> I'm happy with MonadFail as much better solution to pattern-match failures than putting "fail" in monad was
[00:21:49] <Hecate> c_wraith: which instance of MonadFail do you use?
[00:21:55] <Hecate> (I also deeply dislike fail)
[00:22:22] <c_wraith> Mostly IO's, but I get some value out of []'s
[00:25:11] <Hecate> c_wraith: any reason why you don't directly raise exceptions or empty lists?
[00:25:41] <c_wraith> because the whole point of using a library is to not rewrite its code
[00:29:04] <ephemient> myIOActionReturningHopefullyNullList >>= unless <$> null <*> fail . show -- ugly but it'll show the list in the IO exception…
[00:29:11] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[00:29:24] <int-e> > let foo :: (a -> b) -> [a] -> [b]; foo f [] = []; foo f (a:as) = f a : (foo (\a -> (f a, f a)) as >>= \(a,b) -> [a,b])
[00:29:25] <lambdabot>  <no location info>: error:
[00:29:25] <lambdabot>      not an expression: ‘let foo :: (a -> b) -> [a] -> [b]; foo f [] = []; fo...
[00:29:32] <int-e> > let foo :: (a -> b) -> [a] -> [b]; foo f [] = []; foo f (a:as) = f a : (foo (\a -> (f a, f a)) as >>= \(a,b) -> [a,b]) in foo id [1..4]
[00:29:34] <lambdabot>  [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4]
[00:30:22] <int-e> ephemient: ^^ another thing that will be awkward with foldr (because the type of f changes in the recursive calls)
[00:30:55] <int-e> though one can probably make it work with an existential
[00:31:52] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:32:33] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:34:12] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:34:33] *** hololeap_ is now known as hololeap
[00:34:40] <hololeap> it looks like my earlier question is a subset of how you can run multiple computations in parallel and only return the first one that completes. does anyone know? I'm skimming Marlow's book and I don't see it
[00:35:23] <Rembane> hololeap: Doesn't the async library have a function for that? I might be misremembering.
[00:35:32] <c_wraith> race handles two computations
[00:35:51] <c_wraith> to handle multiples, you'd need to fold it
[00:35:53] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:36:23] <hololeap> uh, yeah but can I run each computation using race on multiple cores?
[00:36:49] <c_wraith> if you're using the threaded RTS with an approprate -N command line argument
[00:36:53] <EvanR> if all the computations racing should agree in the sense of definedness there's lub
[00:36:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[00:37:23] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:39:27] <[itchyjunk]> wait i think the solution just came to me 
[00:39:39] *** Parts: koalillo (~koalillo@2a0c:5a81:b804:9900:6f90:e8ce:c737:204c) ()
[00:39:47] <[itchyjunk]> is this a solution to implementing filter with foldr ? https://bpa.st/CPTA
[00:39:55] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:40:00] <hololeap> EvanR: this is what I'm finding. is this it? https://hackage.haskell.org/package/ghc-8.10.2/docs/Demand.html#v:lubDmd
[00:41:51] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[00:42:01] <hololeap> [itchyjunk]: sort of, but you're missing whatever comes after "else" in the go function
[00:42:13] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:42:33] <EvanR> https://hackage.haskell.org/package/lub
[00:42:44] <[itchyjunk]> oh wtf 
[00:42:48] <[itchyjunk]> it was supposed to be else xs
[00:42:50] <[itchyjunk]> :<
[00:42:57] <hololeap> then yes, that is correct
[00:43:41] <[itchyjunk]> https://bpa.st/HDDQ
[00:43:44] <[itchyjunk]> ah okay
[00:44:09] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[00:44:34] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:48:01] <hololeap> EvanR: that looks interesting, although I'm not sure how to use it. (fib 10) `lub` (fib 999999999) -- I would want both computations to run in parallel and hopefully return (fib 10)
[00:48:17] <EvanR> yeah no, lub is for when the values agree
[00:48:48] <EvanR> rather, having a common "definedness upper bound", those two don't
[00:49:32] <EvanR> in Async there are combinators for racing many threads
[00:49:36] <hololeap> ok, so something using race from async then
[00:52:01] <hololeap> but that introduces the IO monad. no way to do this on pure computations without IO coming in??
[00:52:28] <int-e> @let data T a b = T { unT :: forall b'. (a -> b') -> ([b'] -> [b]) -> [b] }
[00:52:29] <lambdabot>  Defined.
[00:52:36] <int-e> > let aux a (T as) = T (\f r -> as (\a -> (f a, f a)) (r . (f a :) . (>>= \(a,b) -> [a,b]))) in unT (foldr aux (T (\_ r -> r [])) [1..4]) id id
[00:52:37] <lambdabot>  [1,2,2,3,3,3,3,4,4,4,4,4,4,4,4]
[00:53:00] <int-e> (tricky)
[00:53:14] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:54:03] <hololeap> is there an ST version of race?
[00:54:58] <EvanR> you can use unsafePerformIO to do the race of threads doing a pure computation
[00:54:59] <int-e> there's unsafeIOToST... and it is unsafe
[00:55:34] <EvanR> though
[00:55:38] <EvanR> the whole thing is not pure is it
[00:55:43] * geekosaur is wondering if that even makes sense
[00:55:51] <EvanR> you "hope" fib 10 comes back, but there's no guaratantee
[00:55:56] <EvanR> guarantee
[00:56:17] <EvanR> it depends on real world circumstances
[00:57:44] *** Quits: roboguy (~roboguy@user/roboguy) ()
[00:58:17] <hololeap> yeah I suppose it's getting into nondeterminism since it's unclear which one will come back first
[00:59:40] <hololeap> so I guess IO actually makes sense here
[00:59:44] <EvanR> that's why lub is cool because you can explain why it's still valid to race the threads xD
[00:59:50] <EvanR> purely
[01:00:55] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:01:11] <hololeap> the idea was to parallelize the branches of LogicT, where all successes from any branch are considered equal, and it just returns the first one it finds
[01:02:01] <EvanR> if you can arrange for all results to be equal, then the referential transparency cops won't notice you
[01:02:24] <EvanR> doing unsafePerformIO
[01:02:25] <EvanR> hopefully
[01:03:12] <hololeap> I think in this case any successes will actually be identical
[01:03:46] <hololeap> I'm actually just playing around with this using 2021's AoC day 8 problem for practice
[01:05:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:05:19] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[01:06:44] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[01:08:02] <hololeap> for instance if I get the input "ag" then I know this corresponds to the digit 1, but I don't know if 'a' corresponds to the 'c' segment and 'g' corresponds to the 'f' segment, or vice versa. since both have equal weight, why not run both in parallel and see which one finds an answer first
[01:08:08] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[01:09:01] <sonny> how do you use a parameter in a function defintion inside a lambda definition? foo bar = foldl \(bar x y z -> ...) ...
[01:09:54] *** Joins: Pickchea (~private@user/pickchea)
[01:10:02] *** Quits: Pickchea (~private@user/pickchea) (Remote host closed the connection)
[01:10:18] <jackson99> just use it, without putting it in the argument list
[01:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[01:12:33] <hololeap> EvanR: now if my two branches are guaranteed to find the same value, but one may find it faster than the other, is that a good time to use lub?
[01:13:24] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[01:14:04] <jackson99> > let mymap f xs = foldr (\x acc -> f x : acc) [] xs in mymap (*10) [1..5]    -- sonny
[01:14:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:14:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:14:06] *** Joins: wroathe (~wroathe@user/wroathe)
[01:14:06] <lambdabot>  [10,20,30,40,50]
[01:14:29] <sonny> thanks
[01:14:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[01:15:17] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[01:15:57] *** Quits: shapr (~user@2601:7c0:c202:5190:232c:3331:7d0c:8370) (Ping timeout: 240 seconds)
[01:17:43] <hololeap> @hoogle unamb -- ok this explains it a little better
[01:17:44] <lambdabot> Prelude undefined :: forall (r :: RuntimeRep) . forall (a :: TYPE r) . HasCallStack => a
[01:17:45] <lambdabot> Control.Exception.Base absentSumFieldError :: a
[01:17:45] <lambdabot> Text.Printf errorShortFormat :: a
[01:18:03] <hololeap> s/hoogle/hackage
[01:18:11] <hololeap> @hackage unamb
[01:18:11] <lambdabot> https://hackage.haskell.org/package/unamb
[01:18:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:22:59] <sonny> is it actually possible to implement filter with fold?
[01:23:47] <jackson99> sure
[01:24:06] <sonny> I'm stumped because I can't think of some identity elment with :
[01:24:42] <dolio> Identity element?
[01:24:51] <geekosaur> you're just passing on xs instead of prepending an element to it (bool, or if-then-else)
[01:24:55] <sonny> well some zero operation
[01:25:09] <jackson99> it is a small change to the mymap I pasted above
[01:25:20] <geekosaur> and no, (:) doesn;t have a left identity
[01:25:45] <geekosaur> it's a constructor, it always constructs a value
[01:25:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Ping timeout: 240 seconds)
[01:26:08] <sonny> so it's not possible with foldl, but with foldr
[01:26:21] <sonny> I was trying with foldl
[01:26:24] *** Joins: modnar (~quassel@162.195.88.254)
[01:26:48] <geekosaur> note thatyou can build foldl with foldr but not the reverse
[01:28:23] <hololeap> % :t \f -> foldl (\s c -> if f c then s ++ [c] else s) []
[01:28:23] <yahb> hololeap: Foldable t => (a -> Bool) -> t a -> [a]
[01:29:04] <hololeap> it's possible but probably not as efficient
[01:30:39] <sonny> ok, I really need to figure out cons and lists
[01:30:41] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::45db)
[01:31:14] <sonny> I think I sorta get fold
[01:32:02] <hololeap> foldr is a natural outgrowth of how lists are constructed. foldr (:) [] == id
[01:33:00] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Remote host closed the connection)
[01:33:13] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[01:34:01] <hololeap> :t toList -- which is why you can convert any Foldable to a list
[01:34:02] <lambdabot> Foldable t => t a -> [a]
[01:36:53] <sonny> hololeap: [] is the second argument right?
[01:37:43] *** Quits: machinedgod (~machinedg@24.105.81.50) (Quit: Lost terminal)
[01:37:44] <sonny> yes very useful observation `foldr (:) [] == id`
[01:38:08] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:40:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:40:36] <sonny> filter p = foldr (\x acc -> if p x then x:acc else acc) []
[01:41:00] <sonny> I never get this much confidence elsewhere :D
[01:41:46] <hololeap> well, technically, foldr (:) [] == toList
[01:42:06] <geekosaur> these days :)
[01:42:08] <sonny> I just read id as identity
[01:42:33] <geekosaur> sometimes I wonder if Foldable is all it's cracked up to be, and not just because of that tuple instance
[01:42:42] <ephemient> could also be foldr (\x -> if p x then (x:) else id) []
[01:42:51] <hololeap> and toList == id, if we're specializing the Foldable to be []
[01:43:06] *** Quits: xff0x (~xff0x@2001:1a81:52d4:9900:4d46:915d:4480:7a51) (Remote host closed the connection)
[01:43:23] *** Joins: xff0x (~xff0x@2001:1a81:52d4:9900:5627:62b8:c837:dd4a)
[01:43:30] <sonny> ephemient: where's id from?
[01:43:39] <geekosaur> @index id
[01:43:39] <lambdabot> Control.Category, Data.Function, Prelude
[01:43:40] <ephemient> :t id
[01:43:41] <lambdabot> a -> a
[01:43:47] <sonny> oh
[01:44:23] <sonny> is that typical haskell code?
[01:44:26] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:44:26] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[01:44:37] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[01:44:37] <jackson99> @src id
[01:44:37] <lambdabot> id x = x
[01:44:51] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:44:58] <sonny> it's kinda magic when defined with the section :P
[01:45:56] <timCF> Hello! Want to ask a question, which haskell build infrastructure is better - provided in nixpkgs or haskell.nix by IOHK and why?
[01:46:57] <geekosaur> how about oen that doesn't involve nix at all?
[01:48:23] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[01:48:42] <timCF> I've used stack for a long time, but nix is kinda cool to manage external binary deps for building and testing
[01:51:02] <geekosaur> "cool" for a thing with nightmarish tentacles…
[01:51:35] <geekosaur> sorry, that thing just has too many moving pieces and sharp edges
[01:51:42] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[01:53:03] <timCF> No worries) If it was perfect, i've not asked which one of two is better
[01:53:28] <sm> there was a recent discussion of this on reddit. IIRC nixpkgs was easier for just installing haskell things, haskell.nix is more powerful for fine grained haskell project building
[01:54:53] <geekosaur> I also don't like something that will silently consume gigabytes of space unless I remember to gc it every so often — but not too often as I may need to roll back an update
[01:59:12] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:c0bf:721a:fdec:b791)
[01:59:33] <sonny> reverse = foldl (flip (:)) [] -- why does it have to be flipped?
[02:00:11] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[02:00:27] <hololeap> because foldl takes (b -> a -> b) as opposed to (a -> b -> b)
[02:00:37] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[02:01:26] <geekosaur> > foldl f z [a,b,c]
[02:01:27] <lambdabot>  f (f (f z a) b) c
[02:01:28] * sonny tries to parse the signature
[02:01:40] <geekosaur> > foldr f z [a,b,c]
[02:01:41] <lambdabot>  f a (f b (f c z))
[02:01:52] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[02:02:24] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:02:42] *** Joins: shapr (~user@2601:7c0:c202:5190:ed4f:33d2:c7d1:3eb)
[02:02:56] <jackson99> position of the current element and accumulator arguments are flipped in function accepted by foldr vs foldl
[02:03:45] <sonny> ok, I'm just gonna guess it's defined differently in scheme. I'm comparing them and I got lost
[02:04:24] <geekosaur> yes, many languages make different decisions. look at the unrolling of the folds I asked the bot for to see why haskell defines it the way it does
[02:04:43] <geekosaur> (it's basically a matter of associativity)
[02:05:55] <sonny> associativity is order? don't remember
[02:06:17] <BrokenClutch> Is it? I think it's the same definition
[02:06:28] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[02:06:57] <geekosaur> associativity is left vs. right, is a * b * c the same as (a * b) * c or is it a * (b * c)
[02:07:03] <geekosaur> for some operator *
[02:08:04] <geekosaur> so foldl is a left-associative fold, foldr a right-associative fold
[02:08:23] <geekosaur> lists are right-associative, which is why foldr is effectively an identity for lists
[02:08:37] <sonny> BrokenClutch: you can check here https://srfi.schemers.org/srfi-1/srfi-1.html#FoldUnfoldMap
[02:09:33] <ephemient> it's clearer to see with an infix function: foldr (+) z [a, b, c] = a + (b + (c + z)), foldl (+) z [a, b, c] = ((z + a) + b) + c
[02:11:31] <sonny> ok, I'll come back later. My brain is fried
[02:11:35] <jackson99> and even clearer if the function is -, because then you will get different result
[02:13:15] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[02:13:34] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:18:13] <sonny> geekosaur: so they wanted to avoid (f (f (f z a) b) c)?
[02:20:31] <geekosaur> I don't quite understand the question
[02:20:35] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:20:59] <geekosaur> My point is that (:) right-associates and doesn't take its parameters in the left-associative order
[02:21:02] <sonny> just thinking about the order
[02:21:25] <geekosaur> some things are naturally left-associative, some aren't
[02:22:18] <geekosaur> so Foldable gives us foldr and foldl, but also foldMap which is allowed to associate naturally for the Foldable in question iirc
[02:22:55] <geekosaur> (:) is also asymmetric, which is another part of the problem
[02:23:15] <geekosaur> it doesn't take the same type on both sides, so it doesn't "re-associate" cleanly
[02:23:32] <geekosaur> something like (+) can associate either way
[02:24:22] <sonny> yeah
[02:30:40] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Remote host closed the connection)
[02:30:59] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[02:32:27] *** Quits: danso (~danso@d67-193-121-2.home3.cgocable.net) (Ping timeout: 268 seconds)
[02:32:51] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[02:33:30] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 260 seconds)
[02:34:37] <BrokenClutch> I must be dumb, they look the same to me
[02:36:18] <dibblego> > ((10 - 9) - 21)
[02:36:19] <lambdabot>  -20
[02:36:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[02:36:25] <dibblego> > (10 - (9 - 21))
[02:36:27] <lambdabot>  22
[02:36:32] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:37:01] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[02:37:16] <geekosaur> you won't be able to tell with (+) because it does the same thing with either associativity
[02:37:32] <geekosaur> (-) shows it better, as dibblego demonstrated
[02:38:11] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:38:13] <BrokenClutch> No, this part and actually knows
[02:38:24] <BrokenClutch> I was talking about the scheme definition
[02:38:28] <BrokenClutch> looks the same to me
[02:38:45] <geekosaur> scheme defines them all taking the same parameters the same way, for consistency
[02:38:52] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e) (Remote host closed the connection)
[02:39:09] <geekosaur> haskell flips things for mathematical consistency instead of programmatic
[02:39:40] <geekosaur> it's harder to demonstrate the things I showed earlier with the scheme definitions of fold and fold-right, vs. Haskell foldl/foldr
[02:40:54] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[02:42:48] <Axman6> foldr is "Replace all :'s with f, and any []  with z". Foldl is "given a starting value, pass in each element of the list to f to use as the starting value, until you find a []"
[02:43:18] <BrokenClutch> but like, the scheme one looks the same as the haskell one
[02:43:27] <BrokenClutch> I'm trying to see the difference, but i don't got it
[02:43:35] <Axman6> link to the scheme one?
[02:43:45] <BrokenClutch> https://srfi.schemers.org/srfi-1/srfi-1.html#FoldUnfoldMap
[02:44:16] <BrokenClutch> Is it after the compilation? Like, how scheme changes foldr to a c-loop on most compilers/transpillers?
[02:44:22] <geekosaur> is there supposed to be one, aside from parameter order (the "z" coming first instead of second)
[02:44:24] <geekosaur> ?
[02:45:03] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[02:45:37] <Axman6> (fold kons (kons (car lis) knil) (cdr lis)) clearly isn't the same as (kons (car lis) (fold-right kons knil (cdr lis)))
[02:45:46] *** Quits: notzmv (~zmv@user/notzmv) (Read error: Connection reset by peer)
[02:46:33] <BrokenClutch> I'm not comparing foldl to foldr
[02:46:43] <Axman6> ok
[02:46:48] <BrokenClutch> I'm comparing scheme's foldl to haskell's foldl
[02:47:53] *** Joins: notzmv (~zmv@user/notzmv)
[02:47:56] <Axman6> they are identical, apart from the order of the arguments to f/kons
[02:49:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:49:38] <Axman6> myFoldl :: (b -> a -> b) -> b -> [a] -> b; myFoldl kons knil (car:cdr) = myFoldl kons (kons car knil) cdr; myFoldl kons knil [] = knil
[02:49:54] <BrokenClutch> the problem is with the order
[02:50:07] <BrokenClutch> scheme is eager, so it solves the last part first
[02:50:29] <BrokenClutch> while haskell will do a more "accumulative" approach, because it's lazy
[02:52:16] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:52:34] <BrokenClutch> like, do the foldl expansion with scheme and evaluate it. It works diffently with haskell, you gonna be evaluating the thunks
[02:53:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:53:32] <Axman6> > foldl f z [1,2,3] :: Expr -- This is exactly what foldl evaluates. the compiler may notice this should be strict depending on what f is
[02:53:33] <lambdabot>  f (f (f z 1) 2) 3
[02:53:38] <EvanR> sonny, the foldl argument order seems more familiar, and makes sense since this is usually how you fold in other languages. given your accum, smush the next thing in the list into it
[02:53:50] <EvanR> foldr is backwards
[02:53:57] <EvanR> but it also makes sense
[02:54:04] <Axman6> foldr is constructor replacement, foldl is a loop
[02:54:26] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[02:54:49] <EvanR> in foldr, you have the list element itself, not the accum, and the rest of the fold is on the right (all of the above assuming we work left to right)
[02:54:49] <BrokenClutch> Oh, i was wrong
[02:54:52] <BrokenClutch> I got it now
[02:55:17] <Axman6> there is no difference betqeen scheme's fold and haskell's foldl. there is a big difference between foldr and fold-right though
[02:55:39] <EvanR> only recently I realized how "normal" foldl is xD
[02:55:46] <EvanR> just haskell does it weird
[02:56:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[02:56:43] <hpc> funny, foldr feels more natural to me
[02:56:54] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[02:56:55] <EvanR> stockholm syndrome
[02:57:07] <hpc> glasgow syndrom?
[02:57:10] <BrokenClutch> like, I think the order of the arguments of the last f is flipped
[02:57:18] <EvanR> by normal I mean relative to normal programming outside haskell land
[02:57:19] <BrokenClutch> with scheme's foldl
[02:57:26] <Axman6> yes, but that's not really important, they're isomorphic
[02:58:31] <BrokenClutch> actually, i don't think they are flipped at all
[02:58:46] <BrokenClutch> man, i got confused
[02:58:47] <Axman6> :t foldl
[02:58:48] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[02:59:03] <Axman6> they are flipped
[02:59:17] <Axman6> scheme's fold is (a -> b -> b) -> b -> [a] -> b
[02:59:29] <Axman6> because the accumulator is passed as the second argument
[03:00:10] <BrokenClutch> you are right
[03:00:11] <BrokenClutch> thanks
[03:00:18] <BrokenClutch> man, never noticed that
[03:00:24] <EvanR> you can't use "frequency analysis" to decide which order to use since... both arguments change every step
[03:00:31] *** ChanServ sets mode: +o Axman6
[03:00:36] <Axman6> D:B 
[03:00:43] * shapr grins evilly
[03:00:52] <EvanR> so gotta dig deeper in the metaphor drawer
[03:01:00] <Axman6> I have been given great power!
[03:01:01] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:01:09] <Axman6> I am not ready for this responsibility!
[03:01:24] <shapr> you can handle the power!
[03:02:04] <EvanR> BrokenClutch, also the expansions lambdabot spits out skips over any operational issues so, looking at those doesn't make performance clear
[03:03:03] <EvanR> an infinitely nested application of f could work fine in haskell, but foldl on list doesn't give you that immediately, unfortunately
[03:03:18] <ephemient> beyond the argument order, fold in Scheme is also closer to foldl' in Haskell in terms of how it's evaluated, since it's strict in the accumulator
[03:04:05] <BrokenClutch> :t foldl'
[03:04:06] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[03:04:31] <BrokenClutch> ?????
[03:04:37] <EvanR> evaluates the b eagerly, as you go
[03:06:06] <BrokenClutch> ok, I will put this on my list of things I have to study
[03:06:16] <BrokenClutch> or I'm going to break
[03:07:00] <geekosaur> % :t foldl' @[]
[03:07:00] <yahb> geekosaur: (b -> a -> b) -> b -> [a] -> b
[03:07:40] <EvanR> oh right... I'm starting to not be annoyed by all the Foldable stuff and just see "list, tree, sequence" matrix style
[03:10:26] <Axman6> BrokenClutch: you can probably ignore Foldable for now, but it just means "the class of things which you can write foldl and foldr for", turns out it's useful for more than lists
[03:10:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[03:13:31] <ephemient> you can think of foldr on a foldable as equivalent to foldr on the toList of the foldable, can't you?
[03:13:38] *** Joins: hololeap (~hololeap@user/hololeap)
[03:13:49] <monochrom> Yes.
[03:13:50] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[03:14:01] <EvanR> that's how it should be implemented
[03:15:40] <geekosaur> that's the default if an instance doesn't define its own
[03:17:45] <monochrom> I explain Foldable by putting foldMap at the spot light, not foldl or foldr. It formalizes "aggregate queries" (if you have heard of that wording from SQL) and is why sum, product, maximum, minimum, length are all in the same type class.
[03:17:50] *** Quits: max22- (~maxime@2a01cb0883359800fc4f47b740d6e929.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:18:07] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[03:18:18] <monochrom> And yes monoids strike again.
[03:18:57] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:19:00] <EvanR> :t foldMap
[03:19:02] <lambdabot> (Foldable t, Monoid m) => (a -> m) -> t a -> m
[03:19:05] <geekosaur> monoids are the secret master sof the universe
[03:19:24] <c_wraith> I'm really unhappy with how Foldable is documented
[03:19:36] <c_wraith> I tried to argue against it when they were designing it
[03:19:47] <c_wraith> and was told that convenient lies are better than complicated truth
[03:20:01] <c_wraith> (when they were designing the new documentation, that is)
[03:20:11] <Axman6> what would you want it to say?
[03:20:29] <c_wraith> foldMap' is described as a left fold, which is entirely wrong
[03:20:44] <Axman6> Surely we can have "Intuitive understanding" and "How it actually works" sections in the docs
[03:20:52] <c_wraith> it should be whatever fold gives it the strictness properties that are desired
[03:21:11] <c_wraith> a right fold, a left fold, a tree fold.  whatever.
[03:21:31] <c_wraith> The important part is that it doesn't accumulate thunks
[03:21:44] <monochrom> In this case the "complicated" truth is not harder than the convenient lie.
[03:22:02] <dolio> Presumably it seqs a bunch of children when combining them or something?
[03:22:42] <EvanR> more like what are foldMap amd foldMap' supposed to be
[03:22:46] <geekosaur> uh. "convenient lies are better than the complicated truth?" that's pretty much the last thing I want in API docs
[03:23:00] <monochrom> Especially if I troll with "data SnocList a = Nil | Snoc (SnocList a) a" then it is right-fold that can be made efficient.
[03:23:04] <c_wraith> This is why I argued the new docs are really bad
[03:23:54] <monochrom> Well yeah there are a lot of people, mostly millenials, who mistake API docs for free tutorials.
[03:24:15] <monochrom> Because millenials are used to free tutorials.
[03:24:17] <dolio> I can buy that sometimes not being absolutely precise can be more useful for developing an understanding. But it's hard to see why saying it's like foldl is helpful.
[03:24:24] <c_wraith> why blame millenials?  I assure you, I see that problem very broadly. :P
[03:25:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:25:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:25:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:25:21] *** Joins: wroathe (~wroathe@user/wroathe)
[03:25:34] <dolio> It doesn't actually seem like a convenient lie.
[03:26:18] <c_wraith> the people I was complaining to thought it was basically always true and I was just being contrarian by pointing out all the cases where it wasn't
[03:26:59] <geekosaur> *headwall*
[03:27:21] <dolio> What cases is it true for?
[03:27:34] <c_wraith> things shaped like []
[03:28:20] <c_wraith> including the same implied ordering
[03:28:52] <dibblego> yu
[03:29:49] <dolio> What does it mean for `null` to be left associative?
[03:29:56] <dibblego> sorry ^
[03:31:10] <dolio> Also what is the accumulator for `null`?
[03:31:45] <dolio> Was that language just copied from foldl or something?
[03:32:44] <EvanR> at one point Foldable had laws and that was the first thing in the docs, iirc
[03:33:16] <geekosaur> they got moved to the bottom of the docs supposedly
[03:33:30] <geekosaur> too confusing for newcomers or something like that
[03:33:30] <EvanR> now I'm don't know what's going on, and I implemented foldl strict for my structure xD
[03:33:36] <Axman6> what should foldl for snoclist actually do...
[03:34:13] *** Quits: vglfr (~vglfr@88.155.96.35) (Ping timeout: 240 seconds)
[03:34:14] <c_wraith> I'd say foldl should be the catamorphism for a snoclist
[03:34:28] <monochrom> Yeah :)
[03:34:39] <EvanR> no, I hate this
[03:34:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[03:35:12] <EvanR> it's a damn list and the fact that we write things left to right has no bearing on the theory
[03:35:41] <Axman6> but the order matters
[03:36:35] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:36:54] <c_wraith> more precisely, the 'l' and 'r' in the names of foldl and foldr mean something
[03:37:10] <c_wraith> they tell you what side the base case goes on
[03:37:37] <c_wraith> when you reverse what side is the end, you reverse what side the base case goes on
[03:38:08] <EvanR> what
[03:38:17] <EvanR> side of what
[03:38:36] <EvanR> I took the 'r' to mean catamorphism
[03:38:58] <dolio> r means 'right'.
[03:39:03] <c_wraith> fold left = put the base case on the left (the start).  fold right = put the base case on the right (the end)
[03:39:16] *** Joins: vglfr (~vglfr@88.155.96.35)
[03:39:28] <EvanR> the left = the start?
[03:39:37] <c_wraith> for english speakers, yes
[03:39:39] <dolio> Left means left.
[03:39:39] <EvanR> not in arabic
[03:40:14] <EvanR> what if I'm communicating about this with someone who is in australia and it looks backwards from down there
[03:40:19] <EvanR> (in english)
[03:40:45] <c_wraith> then they should turn their monitor off of reverse.  (australia is upside down, not backwards. get your memes organized!)
[03:40:46] <BrokenClutch> It will be russian, I think
[03:40:53] <EvanR> left and right are symmetric where as foldl and foldr are not
[03:40:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[03:40:59] <BrokenClutch> like, in australia, english is russian and russian is english
[03:41:20] <EvanR> so literal meaning of l and r are bad
[03:41:34] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:42:33] <EvanR> if your point is the Foldable docs are bad, you made it
[03:42:57] *** Joins: notzmv (~zmv@user/notzmv)
[03:43:12] <Inst> do you know
[03:43:19] <sonny> someone mentioned the difference is the argument order?
[03:43:20] <Inst> if it's possible to code in Cmm within a .hs file?
[03:43:27] <dolio> It doesn't seem like your problem is that the Foldable docs are bad.
[03:43:29] <EvanR> it's not about argument order
[03:44:16] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[03:44:19] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:c0bf:721a:fdec:b791) (Quit: Textual IRC Client: www.textualapp.com)
[03:44:40] <sonny> this is not allowed in Haskell right []:foo
[03:44:55] <EvanR> > let foo = [] in []:foo
[03:44:57] <lambdabot>  [[]]
[03:45:13] <EvanR> i.e. []:[]
[03:45:16] <sonny> brb
[03:45:46] <geekosaur> Inst, you can create and use .cmm files, but it's not really recommended unless you really know what you are doing
[03:46:05] <Inst> is .cmm incredibly hard to use?
[03:46:15] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e)
[03:46:16] <geekosaur> it's very low level
[03:46:35] <Inst> i mean, i'm a proponent of functional / imperative synthesis, both have their strengths
[03:46:40] <geekosaur> be very careful with what registers you use because it won't protect you from overwriting important ones
[03:47:08] <geekosaur> you can see some cmm files here https://gitlab.haskell.org/ghc/ghc/-/tree/master/rts
[03:47:42] <Inst> looks just like normal C
[03:47:50] <geekosaur> looks like it but is not
[03:48:30] <Inst> so, in theory, i could easily build a transpiler to cmm
[03:49:06] <Inst> so i could get Haskell-type syntax alongside features to make it more easily integrated into Haskell
[03:49:23] <EvanR> wait... that sounds like Haskell 
[03:49:42] <geekosaur> I was thinking STG
[03:49:45] <EvanR> it has Haskell-like syntax and transpiles (compiles) to Cmm
[03:49:55] <geekosaur> which is fairly close to Core and compiles to Cmm
[03:51:48] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi) (Quit: Leaving.)
[03:53:26] <Inst> erm, the way I had it explained to me is that .cmm is faster than C
[03:54:09] <Inst> but Haskell doesn't transpile fluently into .cmm because .cmm is imperative, while Haskell is imperative
[03:54:13] <Inst> erm, functional
[03:54:25] <c_wraith> I think you've misunderstood a few steps along the way
[03:54:28] *** Quits: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:54:28] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:54:29] <Inst> probably
[03:54:33] <Inst> sorry for wasting your time
[03:54:43] <c_wraith> It's not a waste of time if you learn stuff
[03:54:58] <Inst> what did I misunderstand?
[03:56:21] <c_wraith> Well, "cmm is faster than c" is not a statement that is true or false.
[03:56:37] <c_wraith> cmm is *more predictable* than c
[03:57:15] <c_wraith> (it also has fewer constructs, which is helpful for a language that's really only intended as an intermediate compilation target)
[03:59:05] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:01:00] <geekosaur> if you really want to be able to mix imperative and functional code, you may be interested in
[04:01:05] <geekosaur> @hackage inline-c
[04:01:05] <lambdabot> https://hackage.haskell.org/package/inline-c
[04:02:37] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[04:03:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::45db) (Ping timeout: 240 seconds)
[04:03:51] <Inst> c_wraith: what I've read is that Cmm is designed for GHC's specialized Cmm compiler, which, because Cmm is more predictable, can do optimizations gcc or clang can't
[04:04:16] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[04:04:34] <c_wraith> yes, but it also can't do some optimizations gcc or clang do, because they take advantage of that imprecision to interpret things in the way that gives the fastest code
[04:04:38] <sonny> EvanR: what about []:1 ?
[04:04:41] <geekosaur> but it also does less, which makes those optimizations easier
[04:05:17] <geekosaur> > []:1
[04:05:18] <lambdabot>  error:
[04:05:18] <lambdabot>      • No instance for (Num [[()]]) arising from a use of ‘e_11’
[04:05:18] <lambdabot>      • In the expression: e_11
[04:05:34] <sonny> yes, so the second elem would have to be a list if the first is []
[04:05:46] <geekosaur> oh, my, lambdabot, you're being particularly obtuse today
[04:05:57] <EvanR> the second argument to : must be a list no matter what
[04:06:07] <EvanR> that's just how it's defined
[04:06:14] <pfurla-matrix> > flip (:) [] 1
[04:06:14] <geekosaur> :t (:)
[04:06:15] <lambdabot> a -> [a] -> [a]
[04:06:15] <lambdabot>  [1]
[04:06:21] <sonny> oh
[04:06:25] *** Joins: alkjdflkjs (~alkjdflkj@187.173.201.254)
[04:06:46] <EvanR> you always cons onto a list
[04:06:47] <Inst> : I believe, is a type constructor, right?
[04:06:52] <Inst> erm, data constructor
[04:06:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[04:06:57] <Axman6> data constreuctor, yes
[04:07:01] <Axman6> -e
[04:07:08] <pfurla-matrix> data, yeah
[04:08:12] <Inst> c_wraith: has anyone ever tested it, like, attempted to outperform gcc etc using just .cmm?
[04:08:34] <alkjdflkjs> s
[04:08:51] <Axman6> well over a decade ago people were writing faster haskell than equivalent C - see Don Stewart's work
[04:09:00] <c_wraith> I doubt it.  cmm is not really intended to be a user interface.  It's only very recently that ghc added support for using it in libraries other than the RTS at all
[04:09:29] <geekosaur> .cmm is not really suitable for writing production code; it's intended to be a compiler intermediate language, which is a rather different use case
[04:09:31] <c_wraith> ...  Ok, my age might be getting to me.  "very recently" might be as much as like 8 years ago. :)
[04:09:39] <Inst> Axman6: iirc, GHC compares favorably to Clang in benchmarks
[04:10:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:10:01] <geekosaur> I think the old C-- (standalone cmm) sitew got archived a couple years back
[04:10:05] <Inst> it's that gcc is just so superior (i.e, has been able to get high-quality talent and labor) to Clang that makes Haskell work hard to compete in performance
[04:10:11] <geekosaur> it might have had some useful comparisons
[04:10:11] <pfurla-matrix> c_wraith: shut up, Sinclair Spectrum is still very recent
[04:10:23] <Inst> lol
[04:10:36] <Axman6> https://donsbot.com/2008/06/04/haskell-as-fast-as-c-working-at-a-high-altitude-for-low-level-performance/ is an example from 2008
[04:10:49] <sonny> EvanR: (cons 3 (cons 2 (cons 1 []))) = [3, 2, 1]. I'm going to guess this is not in the right order, what should it be?
[04:11:06] <EvanR> that looks right
[04:11:14] <Axman6> why would that not be the right order?
[04:11:16] <monochrom> \∩/ Sinclair Spectrum :)
[04:11:31] <geekosaur> > let cons = (:) in (cons 3 (cons 2 (cons 1 [])))
[04:11:32] <lambdabot>  [3,2,1]
[04:11:34] <sonny> Axman6: well if it is, I'm not sure where flip happens
[04:11:38] <pfurla-matrix> > let cons = (:) in (cons 3 (cons 2 (cons 1 [])))
[04:11:39] <lambdabot>  [3,2,1]
[04:11:44] <Axman6> what flip?
[04:11:45] <monochrom> I have a retired prof who owns a PDP-11.
[04:12:06] <sonny> Axman6: when you define reverse with foldl, it requires flip
[04:12:08] <Inst> https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/haskell-beats-C.pdf?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Fndp%2Fhaskell-beats-c.pdf
[04:12:13] <Axman6> monochrom: pretty sure there's one or two at my uni's CS department too
[04:12:30] <Axman6> sonny: do you understand what flip does?
[04:12:39] <Axman6> > flip f x y :: Expr
[04:12:40] <Inst> is sonny new to Haskell?
[04:12:40] <pfurla-matrix> monochrom: I was dying to play with one of these when I learned they existed (back in the '90s)
[04:12:40] <lambdabot>  f y x
[04:12:59] <sonny> yeah
[04:13:15] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:13:17] <sonny> Inst: yes
[04:13:20] <EvanR> ah a good use of Expr xD
[04:13:25] <Axman6> and did you follow the whole conversation we've been havving about the order of arguments for the function passed to foldl?
[04:13:41] <Inst> do you know what a data declaration looks like?
[04:13:43] <Axman6> :t foldl
[04:13:44] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[04:13:46] <Axman6> :t (:)
[04:13:47] <lambdabot> a -> [a] -> [a]
[04:13:56] <Inst> in Haskell, of course
[04:13:58] <sonny> yeah, but I thought the problem wasn't the order?
[04:14:08] <pfurla-matrix> :t foldr -- compare with foldr
[04:14:09] <lambdabot> Foldable t => (a -> b -> b) -> b -> t a -> b
[04:14:32] <pfurla-matrix> > foldr (:) [] [1,2,3]
[04:14:33] <lambdabot>  [1,2,3]
[04:14:33] <Axman6> we need the b's to be [a], so we need a function with type ([a] -> a -> [a]). (:) has type a -> [a] -> [a], so if we apply flip, we get [a] -> a -> [a]
[04:14:37] <sonny> Inst: data foo = bar ?
[04:14:40] <alkjdflkjs> Hi, I've been trying to install GHCup but when I run the command of the page  (curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh) I get the next error, what's the problem?
[04:14:41] <alkjdflkjs> Warning: ~/.ghcup/cache/ghcup-0.0.6.yaml.tmp: Permission denied
[04:14:41] <alkjdflkjs>   0  139k    0   909    0     0   4024      0  0:00:35 --:--:--  0:00:35  4040
[04:14:42] <alkjdflkjs> curl: (23) Failure writing output to destination
[04:14:42] <alkjdflkjs> [ Warn  ] Could not get download info, trying cached version (this may not be r>
[04:14:43] <alkjdflkjs> [ ...   ] If this problem persists, consider switching downloader via:
[04:14:43] <alkjdflkjs> [ ...   ]     ghcup config set downloader Wget
[04:14:44] <alkjdflkjs> [ Error ] JSON decoding failed with: YAML exception:
[04:14:44] <alkjdflkjs> [ ...   ] Yaml file not found: ~/.ghcup/cache/ghcup-0.0.6.yaml
[04:14:45] <alkjdflkjs> [ ...   ] Consider removing ~/.ghcup/cache/ghcup-0.0.6.yaml manually.
[04:14:45] <alkjdflkjs> [ ...   ]
[04:14:46] <alkjdflkjs> "_eghcup upgrade" failed!
[04:14:46] <Axman6> alkjdflkjs: stop
[04:14:56] <Axman6> @where paste
[04:14:56] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[04:15:02] <monochrom> . o O ( good timing )
[04:15:02] <Inst> sonny: more like data [] a = [] | a | [a] iirc
[04:15:10] <Inst> erm, not that
[04:15:13] <geekosaur> you have a permission problem somewhere
[04:15:23] <Inst> data [] a = [] | a : [a]
[04:15:54] <geekosaur> alkjdflkjs, you have a permission problem somewhere. perhaps at some point you tried to run ghcup as root?
[04:16:12] <Inst> there
[04:16:13] <Inst> data [] a = [] | a : [a]
[04:16:17] <geekosaur> ls -ld ~/.ghcup
[04:16:26] <Inst> the version you get if you do :i []
[04:16:35] <Inst> do you know how to read this, sonny?
[04:16:50] <sonny> Axman6: (b -> {a -> b}) right?
[04:17:20] <Axman6> the definition of list in Haskell is quite magical and not really a good example of defining data types, because _you_ are not allowed to write that definition
[04:17:32] <Inst> yeah, iirc, it's a primitive
[04:17:33] <Axman6> sonny: I don't understand what the question is
[04:17:43] <Axman6> b -> a -> b is the same as b -> (a -> b)
[04:17:44] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:17:44] <Inst> i'd have to drag out a custom implementation of list
[04:17:44] <sonny> the order to read the signature
[04:18:28] <Inst> and tbh, that's why I think it might be worthwhile to set up own pedagogy, i.e, people don't spend enough time being taught how type signatures work, how to read it, took me weeks before I had a sufficient understanding of it
[04:18:29] <geekosaur> alkjdflkjs, can you join #haskell-beginners instead? it's a bit noisy in here currently, as you've probably noticed
[04:18:56] <ephemient> % :i ->
[04:18:56] <yahb> ephemient: type (->) :: * -> * -> *; type (->) = FUN 'Many :: * -> * -> *; -- Defined in `GHC.Types'; infixr -1 ->; instance Applicative ((->) r) -- Defined in `GHC.Base'; instance Functor ((->) r) -- Defined in `GHC.Base'; instance Monad ((->) r) -- Defined in `GHC.Base'; instance Monoid b => Monoid (a -> b) -- Defined in `GHC.Base'; instance Semigroup b => Semigroup (a -> b) -- Defined in `GHC.Base'; instance [s
[04:18:59] <alkjdflkjs> ok, thanks
[04:18:59] <Inst> i'll read up
[04:19:03] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:19:17] <ephemient> oh I was hoping that would print out "infixr -1 ->"
[04:19:23] <sonny> haskell uses * and letters?
[04:19:35] <EvanR> Inst, all that is really not helping the original problem of why flip is required
[04:19:40] <Axman6> c_wraith: I've spent too much time reading low level haskell and my brain keeps trying to figure out what the "wraith" function in C would be for
[04:19:51] <c_wraith> it makes your data vanish
[04:19:57] <Axman6> D:
[04:20:01] <Axman6> likeMongoDB?
[04:20:05] *** Joins: xkuru (~xkuru@user/xkuru)
[04:20:08] <c_wraith> like /dev/null
[04:20:09] <pfurla-matrix> > data List a = EmptyList | a :. (List a) deriving Show; infixr 5 :.
[04:20:11] <lambdabot>  <hint>:1:1: error: parse error on input ‘data’
[04:20:15] <Axman6> yeah, so like MongoDB
[04:20:23] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:20:33] <Axman6> pfurla-matrix: use % for yahb, it'll remember
[04:20:37] <geekosaur> pfurla-matrix, use @let for definitions
[04:20:43] <Axman6> or that
[04:20:43] <geekosaur> or yahb, yeh
[04:21:16] <pfurla-matrix> @let data List a = EmptyList | a :. (List a) deriving Show; infixr 5 :.
[04:21:17] <lambdabot>  Defined.
[04:21:25] <sonny> so in this case b is the list and a is the numbers?
[04:21:29] <pfurla-matrix> > 1 :. 2 :. 3 :. EmptyList
[04:21:30] <lambdabot>  1 :. (2 :. (3 :. EmptyList))
[04:21:50] <pfurla-matrix> sonny: y
[04:22:23] <pfurla-matrix> :t foldr (.:) EmptyList [1,2,3]
[04:22:24] <lambdabot> error:
[04:22:24] <lambdabot>     • Variable not in scope: (.:) :: a0 -> List a -> List a
[04:22:24] <lambdabot>     • Perhaps you meant one of these:
[04:22:41] <EvanR> oof
[04:22:46] <Axman6> :.
[04:22:53] <pfurla-matrix> s/.:/:./
[04:22:54] <Axman6> constructors start with :
[04:23:01] <Axman6> small oof
[04:23:10] <sonny> pfurla-matrix: I'm talking about Foldable t => (b -> a -> b) -> b -> t a -> b and foldl (flip(:)) []
[04:23:12] <pfurla-matrix> :t foldr (:.) EmptyList [1,2,3]
[04:23:13] <lambdabot> Num a => List a
[04:23:28] <EvanR> sonny, yeah, b = [Int], a = Int, in your examples
[04:23:50] <EvanR> and t = [], if you are looking at that Foldable version
[04:23:57] <Axman6> :t foldl -- here, all the b's are the type we want to return
[04:23:58] <lambdabot> Foldable t => (b -> a -> b) -> b -> t a -> b
[04:24:15] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[04:24:16] <Axman6> % :t foldl @[]
[04:24:16] <yahb> Axman6: (b -> a -> b) -> b -> [a] -> b
[04:25:00] <sonny> EvanR: ok, so is the scheme version (a->a->b) ?
[04:25:09] <EvanR> no...
[04:25:17] *** Joins: juri_ (~juri@178.63.35.222)
[04:25:22] <Axman6> it's (a -> b -> b)
[04:25:33] <sonny> one sec
[04:25:35] <Axman6> ... I think, I've already forgotten!
[04:25:53] <Inst> wait, does sonny understand operators and operator sections?
[04:25:56] <sonny> ok ok ok
[04:26:06] <sonny> someone do the lambda bot on :
[04:26:07] <ephemient> the accumulator has to be an input to the function being used to fold; whether it's the first argument or the second varies by language
[04:26:15] <EvanR> :t (:)
[04:26:16] <lambdabot> a -> [a] -> [a]
[04:26:20] <sonny> ohhhh
[04:26:25] <sonny> hmm
[04:27:05] <EvanR> if you rename the variables, foldl is
[04:27:14] <Inst> so what i'm assuming is happening with foldl is that (:) can't get its arguments in the right order, so flip is being used to reverse the order (:) is taking its arguments in
[04:27:52] <Axman6> exactly
[04:27:55] <pfurla-matrix> This is eye-opener https://wiki.haskell.org/Fold#List_folds_as_structural_transformations
[04:27:57] <Axman6> nothing more, nothing less
[04:27:59] *** Quits: wagle (~wagle@quassel.wagle.io) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[04:28:08] <Inst> user-defined list: members of the type UDF can either be of value (nil), which is a root that starts the list
[04:28:14] <EvanR> belaying that
[04:28:14] <Inst> UDF -> user-defined list
[04:28:17] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e) (Ping timeout: 240 seconds)
[04:28:30] *** Joins: wagle (~wagle@quassel.wagle.io)
[04:28:42] <Inst> or, a construction of some value (of the same type as existing values in the list) appended to an existing list type
[04:29:17] <Inst> you can't just have the second, because then there's no existing list value to append to
[04:29:23] <pfurla-matrix> I'd rather talk about PDP-11 than Scheme (although Scheme is awesome too)
[04:30:00] <Inst> but when you have the second, the list is composed out of stuff of type a being appended to existing values of type list a
[04:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:30:13] <ephemient> or you could have a list type that can only represent infinite lists :)
[04:30:23] <Inst> i've never seen that
[04:30:24] <c_wraith> we usually call that Stream
[04:30:24] <sonny> Axman6: do you say (a -> b -> b) because of how cons in scheme is defined?
[04:30:49] <sonny> iirc it is not as strict as haskell
[04:31:21] <Inst> why i'm full of shit / utterly nuts: want students to define a custom list type (while being hand-held) on the first problem set
[04:31:41] <pfurla-matrix> @let ListInf a = a ::. ListInf a
[04:31:42] <lambdabot>  /sandbox/tmp/.L.hs:170:1: error:
[04:31:42] <lambdabot>      Not in scope: data constructor ‘ListInf’
[04:31:42] <lambdabot>      |
[04:31:43] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:31:55] <pfurla-matrix> @let data ListInf a = a ::. ListInf a
[04:31:57] <lambdabot>  Defined.
[04:32:16] <Inst> ah, and how does that work?
[04:32:25] <Inst> will that toss out an infinite type error any time you try to use it?
[04:32:31] <c_wraith> sonny: (a -> b -> b) is closely related to lists.  In particular, it's closely related to the church encoding of the (:) constructor
[04:32:43] <ephemient> > fix (1 ::.)
[04:32:44] <lambdabot>  error:
[04:32:44] <lambdabot>      • No instance for (Show (ListInf Integer))
[04:32:44] <lambdabot>          arising from a use of ‘show_M85587785111551100718’
[04:32:49] <Inst> whoops
[04:32:49] *** Joins: califax (~califax@user/califx)
[04:32:52] <Inst> forgot to derive show
[04:33:11] <pfurla-matrix> that was on purpose :P
[04:33:32] <ephemient> it's fine to derive Show, lambdabot will truncate
[04:33:50] <pfurla-matrix> @def infconst a = a ::. (infconst a)
[04:33:51] <lambdabot>  Defined.
[04:34:04] <sonny> pfurla-matrix: the mystery lies here "Note that the parameters to cons must be flipped, because the element to add is now the right hand parameter of the combining function."
[04:34:43] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:34:46] <Inst> a : b = (:) a b
[04:34:50] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[04:34:58] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[04:35:06] <Inst> b has to be an existing list type
[04:35:15] <geekosaur> value
[04:35:19] <Inst> list value, sorry
[04:35:20] <Inst> ;_;
[04:36:15] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:38:05] <sonny> so what I don't get is that it's like if the param list is x y, the zero value get's sent to x first in haskell and y first in scheme
[04:38:30] <geekosaur> I told you that earlier, it's just an arbitrary choice each language made
[04:38:42] <sonny> from there, I need to get to (a -> b -> b)
[04:38:45] <geekosaur> scheme went for programmer convenience by having them match
[04:39:01] <sonny> geekosaur: I understand but I don't understand
[04:39:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:39:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:39:06] *** Joins: wroathe (~wroathe@user/wroathe)
[04:39:09] <geekosaur> haskell went for mathematical convenience with how the functions naturally associate
[04:39:21] <sonny> ok
[04:39:24] <geekosaur> each has arguments for and against
[04:39:47] <sonny> so what haskell does, is that it allows for left association to work properly right?
[04:39:52] <geekosaur> you'd have to hunt down the scheme and haskell language designers to find out why they made those choices
[04:40:20] <geekosaur> it just makes left associativity match up with a natural left-associative function
[04:40:31] <sonny> so fold can be universal, and when you use - it will keep the properties
[04:40:38] <geekosaur> > foldr (*) z [a,b,c]
[04:40:39] <lambdabot>  a * (b * (c * z))
[04:40:45] <geekosaur> > foldl (*) z [a,b,c]
[04:40:46] <lambdabot>  z * a * b * c
[04:41:02] <Axman6> > foldl (\accumlatingList headValue -> headValue : accumulatingList) [] [1,2,3]
[04:41:03] <lambdabot>  error:
[04:41:03] <lambdabot>      • Variable not in scope: accumulatingList :: [a]
[04:41:03] <lambdabot>      • Perhaps you meant ‘accumlatingList’ (line 1)
[04:41:06] <sonny> err I don't actually remember - associativity 
[04:41:25] <Axman6> > foldl (\accumulatingList headValue -> headValue : accumulatingList) [] [1,2,3]
[04:41:26] <lambdabot>  [3,2,1]
[04:41:27] <sonny> + is left but it doesn't matter
[04:41:31] <geekosaur> see how nicely those both come out in Haskell? in Scheme the corresponding expansions are uglier because fold flips the argument order
[04:41:49] <geekosaur> but it's more convenient for most programmers to remember
[04:41:56] <sonny> ok
[04:42:08] <sonny> much thanks
[04:42:18] *** Joins: hololeap_ (~hololeap@user/hololeap)
[04:42:45] <dolio> I don't see how these conveniences are more or less 'programmer' oriented.
[04:42:59] <Inst> also, a question, is it useful to speak of FAM instead of Monad?
[04:43:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:43:34] <dolio> It's convenient to be able to remember that the argument types are the same order in both, and it's convenient to remember a simple rule for what the result of the function will actually be.
[04:43:34] <pfurla-matrix> you guys are almost going bananas and barbed wire 
[04:43:47] <dolio> Those are both convenient when programming.
[04:44:12] <pfurla-matrix> what is FAM?
[04:44:17] <sonny> dolio: (a->b->b) is probably what'd you do if you defined it though
[04:44:21] <Inst> functor - applicative - monad
[04:44:24] <pfurla-matrix> Functor-Applicative-Monad?
[04:44:34] <Inst> then again, for a lot of types you might end up with FAMTSM or something like that
[04:44:56] <Inst> just a way to avoid saying the M word, as well as making it clear you're talking about typeclasses
[04:45:17] <geekosaur> Inst, to most of us FAM refers to the proposal to make Applicative (and thereby Functor) a "superclass" of Monad
[04:45:22] <Inst> i see
[04:45:27] <Inst> which went through
[04:45:27] <geekosaur> because Applicative didn't exist when Monad was invented
[04:45:39] <geekosaur> yes, some years back
[04:45:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[04:45:46] <Inst> so functor only became a superclass of monad when applicative became a superclass of monad?
[04:46:13] <dolio> sonny: I would probably do what is done in Haskell, because I'm used to it, and have no problems remembering how it is.
[04:46:24] <geekosaur> yes
[04:46:55] <geekosaur> there's even an old holdover, liftM should be fmap but because Functor was not a superclass of Monad it had to be "rebuilt" from >>=
[04:48:24] <Inst> yeah i thought monads became a subclass of functor before then
[04:48:42] <geekosaur> it really needs Applicative in between
[04:48:53] <pfurla-matrix> does "being lazy with class" cover these?
[04:49:04] <Inst> i actually don't see how monads are a subclass of applicative, tbh
[04:49:15] <Inst> return = pure is natural
[04:49:24] <geekosaur> because Monad claims to have two methods, return and (>>=) — but "return" is actually "pure" from Applicative, in the same way "liftM" is really "fmap"
[04:49:40] *** Joins: alekhine (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net)
[04:49:44] <Inst> but why monads need <*> is more questionable
[04:49:52] <geekosaur> they have it
[04:49:57] <c_wraith> It's not so much that they need it as they have it
[04:49:59] <c_wraith> :t ap
[04:50:00] <lambdabot> Monad m => m (a -> b) -> m a -> m b
[04:50:01] <geekosaur> we called it "ap" before Applicative
[04:50:06] <c_wraith> :t (<*>)
[04:50:07] <lambdabot> Applicative f => f (a -> b) -> f a -> f b
[04:51:10] *** Quits: alekhine (~alekhine@c-73-38-152-33.hsd1.ma.comcast.net) (Client Quit)
[04:51:24] <EvanR> sonny, I recently defined something with argument order like (b -> a -> b) instead of (a -> b -> b) because I forsaw myself wanting to partial the b alot, and so tried to avoid a lot of flips
[04:51:36] <EvanR> still questioning my sanity
[04:52:47] <Inst> i'm wondering, why can't monads and applicatives both have pure and return as separate methods?
[04:52:53] <Inst> or is this something with the instance system?
[04:53:43] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[04:53:46] <Inst> i.e, have them both be subclasses of fmap, but not subclasses of each other
[04:53:48] <sonny> EvanR: I don't know what partial means there :(
[04:53:54] <Inst> partial application
[04:53:59] <Inst> did you learn about currying yet?
[04:54:08] <Inst> (also planning to put that on first problem set)
[04:54:09] <sonny> yeah, but I don't think about it
[04:54:18] <Axman6> Inst: I use <*> _all_ the time, probably more often than I use anything from Monad
[04:54:22] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[04:54:27] <pfurla-matrix> :t (1 :)
[04:54:28] <lambdabot> Num a => [a] -> [a]
[04:54:31] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[04:54:46] <Axman6> "the function which adds 1 to the front of any lists of numbers"
[04:54:47] <lyxia> It would subvert established expectations and you would have to have two parallel sets of combinators for Monad and Applicative
[04:55:13] <Inst> i see
[04:55:16] <sonny> EvanR: that is a dilema then :/
[04:55:18] <jackdk> every monad is an applicative, so there's no point having `return` (apart from historical baggage)
[04:55:26] <pfurla-matrix> would the laws hold for anything but return = pure?
[04:55:42] <lyxia> Requiring that the Applicative instance agree with the Monad instance means you can freely use applicative combinators for monads.
[04:55:52] <Axman6> Inst: all Monads are Applicatives, which implies Monad is a subclass of Applicative. it is a monad law that <*> and ap behave the same
[04:56:03] <Inst> i know
[04:56:09] <Inst> or wait, is ap defined in monad?
[04:56:13] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[04:56:14] <Axman6> no
[04:56:43] <pfurla-matrix> :i ap
[04:56:43] <Axman6> but it is defined for all monads as: ap mf ma = mf >>= \f -> f <$> ma
[04:57:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:57:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:57:00] *** Joins: wroathe (~wroathe@user/wroathe)
[04:57:17] <Inst> tbh i sort of hate the applicative class, courtesy Hutton, I know what it's for
[04:57:34] <Inst> *typeclass
[04:57:36] <geekosaur> pfurla-matrix, :i doesn't work in lambdabot. it does in yahb but you probably want to use %% :i <whatever> so it'll pastebin the response
[04:57:51] <Inst> but I can't figure out how to work with dissimilar nested monads in applicative
[04:58:10] <pfurla-matrix> geekosaur: thanks
[04:58:22] <Inst> yes yes, go learn monad transformers and i won't have this problem
[04:58:27] <EvanR> sonny, not really
[04:58:48] <sonny> what is the solution then?
[04:58:54] <pfurla-matrix> Inst: keep doing what you are doing and you probably going to invent transformers yourself
[04:59:11] <EvanR> sonny, pick argument order that makes usage most convenient
[04:59:21] <Inst> i'm not that comfortable with the type system
[04:59:39] <Inst> i.e, taking a function type as an argument in data / newtype? That's wild.
[04:59:45] <sonny> good point
[05:00:04] <Inst> with hutton, i think it's the first time anyone teaches you you can put in a function type as an argument in data /newtype
[05:00:23] <Axman6> Inst: Applicative is probably one of the most useful type classes we have in Haskell, it is difficult to describe just how useful it is, and how pleasant it is to use once you know the pattern
[05:00:50] <Inst> as far as i understand it, it's only useful with single layer applicative types
[05:00:53] <Axman6> and it's one of the reasons why Facebook's Sigma spam filtering system can run as fast as it does
[05:01:15] <Axman6> Inst: then I guess you don't understand it :)
[05:01:23] <Inst> ;___;
[05:01:31] <Inst> (emoticon denotes tears)
[05:01:54] *** Joins: Guest2113 (~Guest21@2a00:23c8:1510:8b01:f5c5:cd35:22b1:ed5c)
[05:02:23] <pfurla-matrix> Axman6: very true... parsec *sigh*
[05:02:37] <Inst> i can't figure out what it should look like, say, <*> <*> if I have two layers
[05:02:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:03:04] <Inst> and iirc operators (or functions) can't take operators as arguments
[05:03:06] <c_wraith> if you have two layers and want to stay sane, use Compose
[05:03:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:03:14] <Inst> i don't want to stay sane!
[05:03:28] <c_wraith> and you can pass an operator as an argument by putting it in parens
[05:03:37] <Inst> which converts it to a function
[05:03:42] <Inst> so <*> (<*>)?
[05:03:43] <Axman6> % getCompose $ (+) <$> Compose [Just 1, Just 2, Nothing] <*> Compose [Just 10, Nothing, Just 30]
[05:03:43] <yahb> Axman6: [Just 11,Nothing,Just 31,Just 12,Nothing,Just 32,Nothing,Nothing,Nothing]
[05:03:45] <c_wraith> what's the difference?
[05:04:00] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:04:16] <Inst> the exact reason ($) is useful?
[05:04:25] <Inst> I never learned evaluation order properly
[05:04:27] <Axman6> :t liftA2 (<*>)
[05:04:28] <Inst> need exercises for that
[05:04:28] <lambdabot> (Applicative f1, Applicative f2) => f1 (f2 (a -> b)) -> f1 (f2 a) -> f1 (f2 b)
[05:04:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[05:04:41] <c_wraith> ($) isn't about evaluation order, it's about parsing
[05:04:47] <Inst> the way I understand it is that functions of infix need to be ( ... )
[05:04:49] <geekosaur> ($) can reduce the number of parentheses you need
[05:04:49] <Inst> parsing, I guess
[05:04:50] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:04:58] <Inst> $ works because the function can't take $ as an argument
[05:05:03] *** Joins: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk)
[05:05:17] <Inst> and $ has infix (l or r? I forget) of 0
[05:05:20] <Inst> so it gets parsed last
[05:05:35] <Inst> parsing is a better term than evaluation, since trying to use evaluation gets confused with lazy evaluation, which is a whole another beast
[05:05:53] <geekosaur> it's about associativity
[05:06:06] <geekosaur> normal function application is left-associative and highest precedence
[05:06:15] <geekosaur> \($) is right-associative and lowest precedence
[05:06:26] <geekosaur> so it kinda acts like inside-out parentheses
[05:06:38] <Inst> which is why you see it everywhere in Haskell code and people get confused
[05:06:48] *** Joins: vysn (~vysn@user/vysn)
[05:07:00] <Inst> iirc infixl / infixr only throws errors if they have the same precedence, right?
[05:07:06] *** Quits: Guest2113 (~Guest21@2a00:23c8:1510:8b01:f5c5:cd35:22b1:ed5c) (Ping timeout: 256 seconds)
[05:07:21] <ephemient> also infix (without infixl/infixr)
[05:08:00] <Inst> a ^^l b ^^r c, assuming ^^r and l are user-defined operators
[05:08:05] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[05:08:14] <Inst> that only blows up if they have the same precedence level?
[05:08:52] <Axman6> I;d love to have an infixb for balanced, so a * b * b * d = (a * b) * (c * d), but that would be a very weird feature
[05:09:01] *** Quits: burnsidesLlama (~burnsides@client-8-64.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[05:09:16] <c_wraith> that would confuse the heck out of people
[05:09:32] <Axman6> the fixity number would be "n" where only * has n, you can't mix with other operators
[05:09:35] <Inst> only if anyone actually uses it
[05:09:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:09:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:09:48] *** Joins: wroathe (~wroathe@user/wroathe)
[05:10:39] <lyxia> Have you heard about our lord and savior Agda
[05:11:02] <Axman6> "If a shitty feature exists and no one uses it, is it really a problem?"
[05:11:03] <Inst> parsing still has a problem, tbh, as a term
[05:11:07] <Inst> since you'll confuse it with parsers
[05:11:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:11:22] <Axman6> mixfix+-_+
[05:11:34] <lyxia> <3
[05:12:23] <Inst> so, i'll treat it as a homework assignment from you, axman6
[05:12:50] <Inst> the reason i had that openfiledialog crap was because i was trying to set up an environment where learning haskell would be "user friendly", for some definition of user and friendly
[05:12:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6) (Ping timeout: 240 seconds)
[05:13:11] <Inst> learning IO, the biggest thing that pops to mind is "why do I have to specify the filepath in code?"
[05:13:24] <Inst> "if i specify it with a user prompt, why does it have to be command line?"
[05:13:31] <Axman6> I believe several people have encouraged to learn haskell first, then you can try and make it easier, once you know why things are the way they are
[05:13:45] <Inst> yeah, i'm learning haskell right now
[05:13:57] <Inst> my time for deployment is delayed to late march at the earliest, but i wouldn't be surprised if it were june
[05:14:05] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[05:14:24] <Inst> but sorry, i guess i'm using you guys as a public journal of "why the hell is this so hard?"
[05:14:31] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:14:36] <Inst> the homework assignment is:
[05:14:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:14:36] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[05:14:56] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e)
[05:15:18] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:15:21] <Inst> I've figured out how to use >>= \foo -> ... as a way to feed openFile a type of IO Maybe [Text]
[05:15:27] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[05:15:34] <Inst> I've figured out how to use fmap to do so
[05:15:40] <Inst> now I need to figure out how to use pure / <*>
[05:15:45] <Inst> I was thinking it wasn't possible
[05:15:52] <Inst> openFile, in this context, requires String
[05:16:03] <Axman6> you need to stop forgetting the parens :)
[05:16:09] <Inst> ;___;
[05:16:24] <Inst> why do the parens matter?
[05:16:48] <Axman6> because what you wrote is ((IO Maybe) [Text]), which is a kind error
[05:17:02] <Inst> why do we default to this?
[05:17:06] <Axman6> :kind IO
[05:17:14] <Axman6> % :kind IO
[05:17:14] <yahb> Axman6: * -> *
[05:17:20] <Axman6> % :kind Maybe
[05:17:20] <yahb> Axman6: * -> *
[05:17:27] <Axman6> * /= * -> *
[05:17:31] <Inst> other than perhaps laziness (type-level function application follows the same rules as function application)
[05:17:52] <Inst> Is there actually a context where (TC1 TC2) TC3 is useful as a series of type constructors?
[05:17:57] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[05:18:13] <Axman6> it's for exactly the same reason as we do the same thing for function, " " is function and type application, so it associates to the left
[05:18:14] <dolio> It works exactly like `f x y z` at the term level.
[05:18:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[05:18:28] <Inst> i mean why does it need to left associate as opposed to right associate?
[05:18:32] <Axman6> % :kind Either
[05:18:32] <yahb> Axman6: * -> * -> *
[05:18:46] <Axman6> which is * -> (* -> *)
[05:19:11] <Axman6> that means we can talk about Either Int, which is something of kind * -> *, we have partially applied the Either constructor
[05:19:15] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[05:19:35] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:19:36] <Axman6> :t fmap @(Either Int)
[05:19:37] <lambdabot> error:
[05:19:37] <lambdabot>     Pattern syntax in expression context: fmap@(Either Int)
[05:19:37] <lambdabot>     Did you mean to enable TypeApplications?
[05:19:38] <Inst> (Either Int) String
[05:19:41] <Axman6> % :t fmap @(Either Int)
[05:19:41] <yahb> Axman6: (a -> b) -> Either Int a -> Either Int b
[05:19:59] <Axman6> so, we can talk about Either where f = Either Int
[05:20:22] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[05:20:40] <Inst> hence why I suspect it's reasonable to introduce early "Haskell has a powerful type system", except I don't know what a type system is and why it's powerful
[05:21:33] <Inst> but w/e, that's my problem, at this point, I've already found Haskell in Depth and they discuss (in something I can almost understand) the type system
[05:22:39] <Inst> thanks for humoring me, have a good night
[05:23:29] <Axman6> o/
[05:25:03] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:25:44] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:26:04] *** Quits: alkjdflkjs (~alkjdflkj@187.173.201.254) (Quit: Connection closed)
[05:30:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:30:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:30:00] *** Joins: wroathe (~wroathe@user/wroathe)
[05:31:20] *** Joins: boletales (~boletales@p98076-ipoefx.ipoe.ocn.ne.jp)
[05:35:33] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:36:12] <monochrom> "powerful" is a very vague and much abused word.
[05:36:24] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:36:30] <monochrom> "expressive" is how I would describe Haskell's type system.
[05:37:27] <qrpnxz> it's also powerful
[05:39:01] <EvanR> C++ is powerful
[05:39:09] <EvanR> in the shoot yourself in the foot sense
[05:39:18] <EvanR> i.e. high voltage
[05:39:59] <jackson99> not sure I'd associate power of the type system with its unsoundness 
[05:40:44] <EvanR> wouldn't an unsound logic be the strongest of all? xD
[05:41:19] <jackson99> that being said C++ has a pretty expressive type system as well, most of the unsafety was inherited from C
[05:41:57] <geekosaur> .oO { Paul Lynde singing "I'm my own grandmother" }
[05:43:23] *** Joins: califax- (~califax@user/califx)
[05:44:01] <sonny> it's a type system that meets the programmers expectations
[05:44:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[05:46:06] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:46:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:46:13] *** califax- is now known as califax
[05:46:56] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:47:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:49:36] <sonny> are n+k patterns gone?
[05:51:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[05:54:37] *** Joins: mbuf (~Shakthi@182.77.103.82)
[05:55:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[05:56:22] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[05:56:39] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:57:20] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[05:59:05] *** Joins: neurocyte09172 (~neurocyte@IP-094046066140.dynamic.medianet-world.de)
[05:59:05] *** Quits: neurocyte09172 (~neurocyte@IP-094046066140.dynamic.medianet-world.de) (Changing host)
[05:59:05] *** Joins: neurocyte09172 (~neurocyte@user/neurocyte)
[06:00:37] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:00:37] *** neurocyte09172 is now known as neurocyte0917
[06:01:30] *** Joins: emf (~emf@2620:10d:c090:400::5:b9c2)
[06:01:37] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:01:37] *** Quits: xff0x (~xff0x@2001:1a81:52d4:9900:5627:62b8:c837:dd4a) (Ping timeout: 240 seconds)
[06:01:48] *** Joins: sunarch (uid526836@user/sunarch)
[06:03:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:03:45] *** Joins: xff0x (~xff0x@2001:1a81:5310:700:7a4c:f58f:8e12:e28b)
[06:07:09] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:08:00] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:08:52] <Inst> https://stackoverflow.com/questions/3748592/what-are-nk-patterns-and-why-are-they-banned-from-haskell-2010 sonny
[06:09:08] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:09:26] <EvanR> banned patterns
[06:09:46] <sonny> was super easy to define stirling numbers with them
[06:12:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[06:12:59] <Inst> you can still do n+k
[06:13:02] <Inst> just have to be a bit creative
[06:13:11] <Inst> *Main> factorial (n) =( \k -> ((*) (k+1) (factorial k))) (n+1)
[06:13:21] <Inst> inner parens are not needed
[06:13:45] <Inst> at least, in the lambda, other than to specify arguments for (*) and to sectionize *
[06:14:03] <Inst> oh derp, that code doesn't work
[06:15:12] <EvanR> I saw a proposal to remove numeric literals from patterns
[06:15:40] <sonny> sometimes you just want to copy the formula into Haskell you know? ;)
[06:16:29] <Inst> factorial 0 = 1
[06:16:29] <Inst> factorial (n) = (\n -> (*) (n+1) (factorial n)) (n-1)
[06:17:16] <EvanR> factorial n = product [1..n] -- xD
[06:17:41] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:18:19] *** Joins: jakalx (~jakalx@base.jakalx.net)
[06:18:31] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:18:49] <Inst> but that's equivalent to an n+k pattern, except without the wonkiness
[06:19:08] <sonny> EvanR: lol
[06:19:30] <sonny> afk
[06:19:37] *** Quits: sabx (~sabbas@user/sabbas) (Ping timeout: 256 seconds)
[06:20:08] *** Quits: stef204 (~stef204@user/stef204) (Quit: WeeChat 3.4)
[06:21:13] <Inst> sonny: even if it worked, if you check the link
[06:21:39] <Inst> it'd probably end up bugging out, and tbh i don't get why ghc isn't smart enough to avoid bugging out
[06:22:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[06:27:34] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:28:14] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:28:55] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:30:04] <Inst> apparently n+k was defined to bug out
[06:30:06] <Inst> https://sites.google.com/site/haskell/notes/nkpatterns
[06:30:38] <Inst> sort of wish haskell was smart enough that n+k or, for that matter, an arbitrary expression in pattern matching, would be processed correctly
[06:30:57] *** Joins: sabx (~sabbas@user/sabbas)
[06:31:16] <jackson99> I thought n+k pattern is no longer supported?
[06:31:33] <Inst> it's gone
[06:31:43] <EvanR> pattern matching isn't some AI thing, it's part of a carefully defined calculus related to ADTs
[06:32:25] <EvanR> there are cool new kind of patterns out there but it's not a thing to understand arbitrary expressions
[06:33:00] <EvanR> e.g. patterns for list could be converted to a fold
[06:33:34] <EvanR> for any Num, that's not the case for +
[06:34:44] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:36:08] <Inst> + on fixed precision integral messes up once you get close enough to overflow
[06:36:49] <Inst> besides, i've shown the workaround to produce something roughly equivalent to n+k
[06:36:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[06:36:55] <EvanR> does Int mess up or does the programmer xD
[06:37:02] <Inst> without the wonkiness
[06:37:12] <Inst> is the self-other dichotomy real or fictive? :)
[06:37:45] <EvanR> true the user and the computer probably have irreversible entanglement
[06:38:45] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:39:36] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:41:17] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[06:42:41] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:44:16] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:44:16] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:44:16] *** finn_elija is now known as FinnElija
[06:47:54] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[06:48:21] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:48:31] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:49:15] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:49:56] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[06:49:59] <Inst> erm, could someone explain Type to me?
[06:50:33] <Inst> the problem is, my orientation is, well, "you don't understand anything unless you can derive it yourself" -> comp sci version: "you don't understand anything unless you can implement it yourself"
[06:50:43] <Inst> erm, not Type
[06:50:45] <Inst> Text
[06:50:54] <Inst> String is bad because it's linked lists and thus not performant
[06:51:02] <Inst> but then what is Text? Is it some hack to produce arrays?
[06:51:43] <EvanR> lists are bad if they are big and stick around
[06:51:53] <EvanR> which is not necessarily the case
[06:52:15] <EvanR> Text is implemented as an array
[06:52:42] <EvanR> you could make it yourself if you really wanted, it's just a library
[06:55:36] <EvanR> one issue with String is, a lot of processing goes into each Char when they go through Handles. If you use packed encoded text it is faster
[06:57:57] <Inst> i guess it's my problem, i.e, how do you implement arrays in haskell
[06:59:15] <EvanR> for performance there are GHC primitives
[06:59:37] <EvanR> but several libraries exist which put a nice API on top
[06:59:46] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:00:25] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[07:00:43] <EvanR> and set you up for fusion
[07:01:06] <EvanR> see `vector'
[07:05:49] *** Quits: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) (Read error: Connection reset by peer)
[07:11:35] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[07:11:45] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[07:14:10] *** Quits: td_ (~td@muedsl-82-207-238-021.citykom.de) (Ping timeout: 256 seconds)
[07:14:29] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:15:49] *** Joins: td_ (~td@94.134.91.23)
[07:16:20] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[07:16:42] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:18:00] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:19:16] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e) (Remote host closed the connection)
[07:20:11] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e)
[07:30:00] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (Quit: I seem to have stopped.)
[07:31:07] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[07:34:59] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[07:35:06] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[07:35:12] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[07:35:13] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[07:38:02] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[07:40:03] <albet70> how to construct ExceptT e IO a? IO isn't a constructor
[07:40:42] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[07:40:54] <dibblego> given which?
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:43:57] <albet70> any
[07:46:00] <albet70> :t ExceptT $ print $ Left 3
[07:46:02] <lambdabot> error:
[07:46:02] <lambdabot>     • Couldn't match type ‘()’ with ‘Either e a’
[07:46:02] <lambdabot>       Expected type: IO (Either e a)
[07:46:42] *** Quits: ensyde (~ensyde@99-185-235-117.lightspeed.chrlnc.sbcglobal.net) (Quit: Leaving)
[07:46:57] <Axman6> :t ExceptT $ print (Left 3 :: Either String Int)
[07:46:58] <lambdabot> error:
[07:46:58] <lambdabot>     • Couldn't match type ‘()’ with ‘Either e a’
[07:46:58] <lambdabot>       Expected type: IO (Either e a)
[07:47:05] <Axman6> :t ExceptT
[07:47:06] <lambdabot> m (Either e a) -> ExceptT e m a
[07:47:11] <Axman6> uh, of course
[07:47:35] <Axman6> :t ExceptT $ fmap Left $ print "foo"
[07:47:37] <lambdabot> ExceptT () IO a
[07:47:43] <Axman6> :t print
[07:47:45] <lambdabot> Show a => a -> IO ()
[07:48:30] <EvanR> :t throw
[07:48:31] <lambdabot> Exception e => e -> a
[07:48:52] <EvanR> :t throwError
[07:48:53] <lambdabot> MonadError e m => e -> m a
[07:49:01] <EvanR> ExceptT is a MonadError
[07:49:32] <EvanR> a non-error result of ExceptT can be created with pure / return
[07:50:02] <EvanR> so basically, pure/return or throwError are two good ways to construct an ExceptT
[07:50:55] <EvanR> albet70, to print from ExceptT e IO... use liftIO
[07:52:21] <EvanR> :t liftIO
[07:52:22] <lambdabot> MonadIO m => IO a -> m a
[07:52:33] <albet70> "🟢 EvanR :albet70, to print from ExceptT e IO... use liftIO", but I want to construct with Left way
[07:52:52] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[07:53:31] <EvanR> well, then you have use Axman6's :t ExceptT directly
[07:53:38] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[07:53:56] <EvanR> irl you probably want to stick to the API though
[07:56:13] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[07:57:39] <EvanR> :t ExceptT (return (Left (userError "I'm out")))
[07:57:41] <lambdabot> Monad m => ExceptT IOError m a
[07:58:03] <EvanR> :t runExceptT $ ExceptT (return (Left (userError "I'm out")))
[07:58:04] <lambdabot> Monad m => m (Either IOError a)
[07:58:45] <EvanR> e.g. m=IO
[07:58:46] *** Joins: notzmv (~zmv@user/notzmv)
[08:01:13] <EvanR> :t ExceptT (throwError (userError "I'm out"))
[08:01:15] <lambdabot> MonadError IOError m => ExceptT e m a
[08:01:38] <EvanR> :t throwError (userError "I'm out")
[08:01:39] <lambdabot> MonadError IOError m => m a
[08:01:49] <EvanR> ignore second to last one
[08:06:53] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:09:17] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:10:16] *** Joins: razetime (~quassel@49.207.213.63)
[08:12:00] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:12:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:13:44] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:13:58] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:16:11] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[08:17:18] <Axman6> albet70: are you sure that's the beaviour you want?That would ve a very unusual thing to do
[08:17:22] <Axman6> be*
[08:18:27] <hololeap_> albet70: normally you use throwError to get a Left value, regardless of what your MonadExcept is
[08:18:38] *** Quits: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) (Ping timeout: 256 seconds)
[08:18:59] *** hololeap_ is now known as hololeap
[08:19:15] <Axman6> liftIO (print Something) >> throwError SomethingWentWrong feels mor elike maybe what you want?
[08:19:36] <Inst> also lol
[08:19:39] <Inst> this is an absolute treasure
[08:19:48] <Axman6> I thought you were going to sleep :P
[08:19:49] <Inst> "that feel when you know what monads are but not what objects are"
[08:19:59] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:20:00] <Inst> have a fwb i'm helping with her python
[08:20:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:20:20] <Inst> they're literally teaching "stack four if statements" in her python class, but we're paranoid she'll have objects dumped on her lap
[08:20:24] <hololeap> :t liftEither -- albet70: you can also use this
[08:20:25] <lambdabot> MonadError e m => Either e a -> m a
[08:20:29] <Axman6> Not sure your sexual history was necessary there
[08:20:47] <Inst> sorry!
[08:20:59] <Axman6> also, the hoist-errors package is fantastic for working with ExceptT
[08:21:15] <EvanR> Inst, since this is haskell and not python... I think of this picture from the cover of Theory of Objects http://lucacardelli.name/Topics/TheoryOfObjects/ObjectSubject.html
[08:21:48] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[08:22:40] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:22:54] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:23:00] <Inst> well, tbh, it's just funny when you know what monads are and you're trying to understand objects in the context of monads
[08:23:59] <Inst> at some point someone is going to write a coherent comparison between monads and objects as concepts
[08:24:05] <hololeap> aren't objects just data with extra steps?
[08:24:07] <EvanR> no, please don'
[08:24:11] <Inst> okay, i'll stop
[08:25:08] <EvanR> unlike objects, monads have a very precise description with very little in the way of "remixing" of interpretation xD
[08:25:36] <EvanR> leibniz notwithstanding
[08:26:05] <Inst> i'd see them both as ways of data encapsulation. in certain areas, monads are more flexible, in others, less flexible
[08:26:12] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:26:13] *** Joins: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca)
[08:26:14] <EvanR> no monads aren't about data encapsulation
[08:26:26] <Inst> a type constructor is about data encapsulation
[08:27:01] <EvanR> your data encapsulation scheme may be described with types, but not nearly all types are about data encapsulation
[08:27:18] <dibblego> I thought they were about constructing types
[08:27:36] <EvanR> actually, most basic types in haskell intentionally tell you everything that is going on, (), Bool, Either, Maybe, etc
[08:27:47] <EvanR> cards on the table
[08:28:03] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[08:28:12] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:28:25] <hololeap> monads need a join function. can you do that with any object?
[08:28:29] <EvanR> and the monad instance for the basic types just formalize certain operations
[08:28:34] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:29:48] <EvanR> (that already existed and didn't need monads to do)
[08:30:09] <hololeap> if I have a car in my car, so I can drive while I drive... can that be joined into a single car?
[08:30:31] <Inst> hololeap: i mean that's where i see monads as more flexible if you see them as a set of methods for dealing with types that have been placed into a monadic type, but the monad typeclass is useful for more than just containerizing types
[08:30:52] <Inst> hololeap: the real reason people love Haskell xD
[08:31:27] <hololeap> it's a very limited set of methods, namely return and join/bind
[08:31:40] <EvanR> class Circle a => Ellipse a
[08:31:44] <EvanR> class Ellipse a => Circle a
[08:32:10] <Inst> and it's actually possible to instance into that!
[08:32:41] <EvanR> in before the "monads are just spreadsheets" blog post
[08:33:00] <hololeap> but ultimately monads are about composition of functions with extra "stuff"
[08:33:14] <hololeap> monads are much closer to functions than they are to objects
[08:33:18] <Inst> i don't think it's possible to create a monads are just (monads are just (monads are just...) blog posts
[08:33:36] <Inst> but given the recursion, it'd be very haskell
[08:35:33] <EvanR> monad is an algebraic structure, like monoid or semigroup. It doesn't make sense to talk about containerization in general. But the other way around, many containers can be flattened and this is monadic. Also many other phenomena fit the same shape
[08:35:45] <Inst> sorry, i'll run off, i do need to get objects though, although, it gets me wondering, since monads are implementable in languages with interfaces and algebraic data types
[08:36:00] <Inst> what would a monadic structure over an object look like?
[08:36:09] <Inst> OCaml / C++ / Java etc
[08:36:25] <EvanR> monadic structure pertains to a Functor, not an object
[08:37:38] <EvanR> but there have been monad interfaces in those languages
[08:37:59] <EvanR> without syntax sugar it's a bit annoying
[08:38:03] <hololeap> if you're thinking of generic "objects" in other langauges, the monad interface is how to string them together, not how to construct them in general
[08:38:38] <Inst> >>= is about composability of functions that are a -> m a, the join cancels out of the m
[08:38:45] <EvanR> no join doesn't
[08:38:57] <EvanR> you stay in the m
[08:39:02] <Inst> it cancels out m (m a) into (m a)
[08:39:07] <Inst> otherwise you'd end up with monadic stacking
[08:39:11] <EvanR> monad's don't let you leave, unlike comonads
[08:39:26] <EvanR> which don't let you enter
[08:39:34] <hololeap> and the basic monads in haskell are very close to the complete set of all possible monads available in any language. Maybe, State, Reader, Writer, Cont... it's very difficult to find a monad that isn't expressible as (a combination of) any of these
[08:40:08] <Inst> EvanR: yeah, I'm aware, and that's been annoying at times
[08:40:13] <Inst> would be nice to just kill the monad sometimes
[08:41:13] <Inst> except, of course :)
[08:41:24] <EvanR> maybe you'd like comonads then, you can leave any time
[08:41:25] <Inst> what happens if it's a maybe type with a value constructor of Nothing?
[08:41:43] <Inst> how could you intelligibly define a extract against Nothing?
[08:41:51] <EvanR> Maybe isn't a Comonad
[08:41:55] <hololeap> you can't because Maybe is not a comonad
[08:41:58] <Inst> because of that reason
[08:41:58] <Axman6> > join Nothing
[08:42:00] <lambdabot>  Nothing
[08:42:00] <dibblego> it's a semi-comonad though
[08:42:11] <Axman6> > join (Just Nothing)
[08:42:12] <lambdabot>  Nothing
[08:42:17] <dibblego> @type fmap Just
[08:42:18] <hololeap> a properly defined comonad always needs a value to extract
[08:42:18] <lambdabot> Functor f => f a -> f (Maybe a)
[08:43:26] <dibblego> we gettin' the annual monad anti-tutorial outta the way early? :)
[08:43:48] <EvanR> at some point was there comonadic IO called OI floating around?
[08:44:13] *** Parts: sonny (~sonny@bras-base-london1483w-grc-32-70-52-175-166.dsl.bell.ca) ()
[08:44:22] <hololeap> no, because a comonad needs a natural transformation back to Identity, and IO doesn't have that
[08:44:36] <dolio> People floated the idea, but it doesn't make a lot of sense.
[08:44:48] <dibblego> OI was discussed a while back
[08:44:59] <hololeap> unsafePerformIO?
[08:45:07] <EvanR> oh
[08:45:39] <Inst> also, just to make it simple, Identity monad: just a type constructor that does nothing but block a -> a functions?
[08:45:47] <Inst> without fmap / bind, of course
[08:46:26] <hololeap> it doesn't do anything but wrap any value in the Identity constructor
[08:47:09] <hololeap> it's supposed to be a way of describing pure values in the context of something that needs a functor/monad
[08:47:39] <hololeap> like how id doesn't do anything but return the value you give it
[08:48:17] *** Quits: xff0x (~xff0x@2001:1a81:5310:700:7a4c:f58f:8e12:e28b) (Ping timeout: 240 seconds)
[08:48:29] *** Joins: jakalx (~jakalx@base.jakalx.net)
[08:48:58] <hololeap> which seems useless until you need something that takes an (a -> a) function and you need the most basic case
[08:49:35] *** Joins: xff0x (~xff0x@port-92-193-159-86.dynamic.as20676.net)
[08:52:50] <EvanR> you need something takes a resistor, so you give it a zero ohm link in a resistor package xD
[08:53:00] <hololeap> this is why State = StateT s Identity -- `StateT s` takes a type constructor as an argument, so if you don't need one, you pass it Identity
[08:53:02] <EvanR> you have something that takes a resistor
[08:53:26] <hololeap> *State s = StateT s Identity
[08:56:54] <hololeap> the zero ohm link is the zero element in the monoid of resistor arrays
[09:02:30] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[09:02:52] *** Joins: sagax (~sagax_nb@user/sagax)
[09:03:00] *** Joins: s2k (~textual@122.172.234.134)
[09:05:03] <Axman6> EvanR: OI is what we call ExceptT in Australia, OI YouFuckedUpMate IO a
[09:05:25] <EvanR> oof
[09:06:36] <Axman6> OI YouFuckedUpMate IO eh* which when runs gives you back IO (Either YouFuckedUpMate eh)
[09:09:17] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:15fa:c22e:b1fb:575a)
[09:17:33] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[09:18:57] *** Joins: arahael (~arahael@203.158.51.1)
[09:19:29] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[09:24:44] *** Joins: ymirhotfoot55 (~ymirhotfo@user/ymirhotfoot)
[09:26:34] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:54ff:c767:ef1d:433e) (Remote host closed the connection)
[09:27:27] <albet70> "🟢 Axman6 :albet70: are you sure that's the beaviour you want?That would ve a very unusual thing to do", yes
[09:28:04] <Axman6> so, you specifically want to print the result, and then produce something of type ExceptT () IO a?
[09:28:28] <Axman6> far out, what's going on with my typing today
[09:29:02] <Axman6> "So you specifically want to print the result, and produce something of type ExceptT () IO a?"
[09:30:44] <albet70> "Axman6 :so, you specifically want to print the result, and then produce something of type ExceptT () IO a?", paste.tomsmeding.com/DQWLn8rX
[09:31:47] <ymirhotfoot55> Dear Haskellers, the picture is wonderful:
[09:31:49] <albet70> short circuit a IO action list
[09:31:53] <ymirhotfoot55> http://lucacardelli.name/Topics/TheoryOfObjects/ObjectSubject.html
[09:32:47] <ymirhotfoot55> I am glad to see that John Stewart Bell's is finally making it through to
[09:33:10] *** Joins: nhatanh02 (~satori@123.24.172.30)
[09:33:34] <ymirhotfoot55> the great Tribe of Objectivists!
[09:34:05] <ymirhotfoot55> Jogn Stewart Bell's Second Theorem.
[09:34:14] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:35:00] <ymirhotfoot55> Naturally, a beginner in Haskell will ask:
[09:35:04] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[09:35:24] <ymirhotfoot55> Can all the three views be consistent?
[09:35:44] <ymirhotfoot55> John, not Jogn.
[09:37:03] <Axman6> albet70: personally, I would use liftIO $ do print "greater ..." >> print x; throwE (). reusing the () from the print feels awkward to me
[09:40:22] <Axman6> ymirhotfoot55: What does this have to do with HAskell?
[09:41:25] <ymirhotfoot55> Well, I think Chris Penners inytoduction to a planned, ah,
[09:42:14] <ymirhotfoot55> I will not say, a Lisp, but a more flexiible Haskell, as proposed in
[09:42:21] <ymirhotfoot55> https://www.youtube.com/watch?v=xZmPuz9m2t0
[09:43:17] *** Quits: shapr (~user@2601:7c0:c202:5190:ed4f:33d2:c7d1:3eb) (Ping timeout: 240 seconds)
[09:43:48] <ymirhotfoot55> One famous case of the General Problem of Consistency
[09:44:15] <ymirhotfoot55> is Bell's Second Theorem.
[09:44:45] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:45:03] <ymirhotfoot55> I do not know haskell, I have actually written 'hello world',
[09:45:25] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[09:45:33] <ymirhotfoot55> well, no, but I once wrote 'hello Penrose Inverse' in Haskell.
[09:46:59] <ymirhotfoot55> 'hello world' was a mite offputting, with the giant builtin Monad
[09:47:09] <ymirhotfoot55> IO beging required.
[09:48:04] <Axman6> "giant"
[09:48:06] <Axman6> @src IO
[09:48:06] <lambdabot> Source not found. There are some things that I just don't know.
[09:48:08] <Axman6> :(
[09:48:33] <Axman6> @hoogle IO
[09:48:34] <lambdabot> Prelude data IO a
[09:48:34] <lambdabot> module System.IO
[09:48:34] <lambdabot> System.IO data IO a
[09:48:49] <ymirhotfoot55> Conjecture: the type guessing and type checking of Haskell uses something like\
[09:48:49] <ymirhotfoot55> a (very special) SAT solver.
[09:49:14] <c_wraith> nah.  It's way simpler than that
[09:49:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:49:43] <Axman6> just plain old hindley-milner
[09:50:01] <Axman6> https://en.wikipedia.org/wiki/Hindley–Milner_type_system
[09:50:34] <ymirhotfoot55> Yes, I supected it to be special, and in many cases, quick and easy.
[09:50:55] <Axman6> it's about as simple as a useful type system can get
[09:51:06] <Axman6> not always quick though
[09:52:08] *** Quits: modnar (~quassel@162.195.88.254) (Remote host closed the connection)
[09:52:12] <ymirhotfoot55> O was impressed with Loader's result that the for real simply typed lambda calculus
[09:52:29] *** Joins: modnar (~modnar@shell.sonic.net)
[09:52:48] <ymirhotfoot55> with some specal concret types added, also with actual elements of the rtpes specified,
[09:53:25] <ymirhotfoot55> gets you  to Turing Machines Unlimited.
[09:53:47] <razetime> anyone program haskell on vim?
[09:53:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:54:26] <razetime> i've been trying to use vim with vim-haskell plugin lately and it often flubs on indentation.
[09:54:34] <ymirhotfoot55> I have heard that when K. Goedel was presented with
[09:56:28] <ymirhotfoot55> Alonzo Church's proof that Herbrand-Goedel style "recursive function computer systems"
[09:57:33] <ymirhotfoot55> compited the same set of functions as Church's "lambda calculus" machine,
[09:57:52] *** Quits: s2k (~textual@122.172.234.134) (Quit: Textual IRC Client: www.textualapp.com)
[09:58:25] <ymirhotfoot55> Goedel saw that Church's machine was
[09:58:39] <ymirhotfoot55> a weird machine.
[09:59:12] <ymirhotfoot55> loke unto the dirty page macgine on x86 computer chips.
[09:59:28] <ymirhotfoot55> Phil Wadler tells the story.
[10:00:26] <ymirhotfoot55> Goedel no doubted that Herbrand-Foeded could be right, as an
[10:01:06] <ymirhotfoot55> analysis of compiyability.
[10:01:20] <ymirhotfoot55> No compuled, computed.
[10:02:00] <ymirhotfoot55> Not "compiled", "computed".
[10:02:57] <ymirhotfoot55> now doubted
[10:03:56] <ymirhotfoot55> Oi, I must be more careful with this hard to use keyboard.
[10:05:53] <ymirhotfoot55> @Axman6 thank you for reference!
[10:05:54] <lambdabot> Unknown command, try @list
[10:08:46] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:11:22] <ymirhotfoot55> '@Axman6' conceptually giant.
[10:11:56] <ymirhotfoot55> The dread Input-Output!
[10:12:45] <Axman6> I have absolutely no idea what you're on about ymirhotfoot55
[10:13:14] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[10:14:15] <ymirhotfoot55> Dear '@Axman6', I am just happy to be in IRC again, so
[10:14:19] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[10:15:00] <Axman6> ok, well you're not making much sense. Do you have any questions about Haskell?
[10:15:43] <ymirhotfoot55> perhaps I am a mite loose in my associations and a mite obscure in my speech.
[10:16:13] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:16:40] <ymirhotfoot55> Well, I suspect that a "type class", when, as happens sometimes,
[10:17:13] <ymirhotfoot55> "automayically" hands you an instance, that we are close to the
[10:17:45] <ymirhotfoot55> universal algebra mecganism of giving
[10:17:57] <ymirhotfoot55> an algebra by giving
[10:18:05] <ymirhotfoot55> generators and relations.
[10:18:06] <Axman6> Are you a markov chain trained on #haskell and Elizabethan English?
[10:18:12] <ymirhotfoot55> Is this so?
[10:18:45] <Axman6> I genuinely have no idea what you're trying to ask
[10:18:47] <ymirhotfoot55> No.  Or if I am I am iperate with unkimited k-feams, and
[10:19:11] <ymirhotfoot55> I have enough dinebstions that I am not boind by by Earth's
[10:19:20] <Axman6> I'm getting pretty close to using my new found OP powers to kick you ymirhotfoot55
[10:19:41] <ymirhotfoot55> speed of signal 3+1 dimension limitations.
[10:19:47] <hololeap> I'm getting some new vocab here... "dinebstions" "boind"
[10:20:17] <ymirhotfoot55> as pelling: Please accept apologies!
[10:21:08] <ymirhotfoot55> as spelling, that is better.
[10:21:55] <ymirhotfoot55> '@Axman6' serious question, why no mention of
[10:22:30] <ymirhotfoot55> Galois correpondeces in the beginnersl literature on type classes?
[10:23:21] <Axman6> I've been programming in Haskell for over a decade and never heard of "Galois correpondeces", so I suspect because no one needs to know what they are to use Haskell
[10:23:29] <hololeap> because deep theory is irrelevant to most newcomers looking to learn a language?
[10:23:46] <ymirhotfoot55> '@Axman5' I will ask ny type class question again.
[10:24:00] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[10:24:06] <hololeap> just write it yourself if you think it needs to exist so badly
[10:25:04] <ymirhotfoot55> Hololeap, thank you for suggestion!
[10:25:09] <ymirhotfoot55> No josh.
[10:25:31] <hololeap> there are tutorials on category theory for haskell programmers that exist because someone decided to make them
[10:25:59] <ymirhotfoot55> Rtpe class question: Sometimes, a declaration of a type class results is a sibfle
[10:26:12] <ymirhotfoot55> most geberal instance being defined.
[10:26:22] <ymirhotfoot55> Defined automatically.
[10:26:22] <Axman6> "rtpe"? "sibfle"?
[10:26:30] <ymirhotfoot55> Wgeb does this happen?
[10:26:36] <ymirhotfoot55> Thanks.
[10:27:13] <ymirhotfoot55> When, not Wgeb.
[10:27:17] *** Joins: michalz (~michalz@185.246.204.126)
[10:27:53] <Axman6> rtpe = type? sibfle = ?
[10:28:04] <ymirhotfoot55> single most general
[10:28:45] <ymirhotfoot55> Yes, Type class question
[10:29:09] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[10:30:07] <hololeap> can you give an example that illustrates your question?
[10:30:18] <Axman6> ok, so we've got to a point where that sentense's words are understandable, now to try and decipher what you're actually trying to say
[10:31:17] *** Quits: Garbanzo (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:33:25] <ymirhotfoot55> Consider giving a group by giving
[10:34:04] <ymirhotfoot55> three generators a, b, c; then giving some relations, say
[10:34:33] <Axman6> please stop using the return key as punctuation, if you look at the lasy hour's history of this channel, it's almost all you saying half sentenses with typos. at least make typos on one line
[10:34:41] <ymirhotfoot55> a^-1 * b * a = c^17
[10:34:57] <ymirhotfoot55> Thanks, '@Axman6'.
[10:36:08] <ymirhotfoot55> Though are many froups geberated by am bm c, which satisft the relation, there is one that is special, namely the least constrained sych group.
[10:36:48] <ymirhotfoot55> Does an analogue if this happen with type classes?
[10:37:04] <ymirhotfoot55> groups, not froups.
[10:37:40] *** Quits: boletales (~boletales@p98076-ipoefx.ipoe.ocn.ne.jp) (Quit: Leaving)
[10:38:06] <hololeap> I'm not sure how type classes relate to groups. for instance, there is no notion of an inverse for type classes
[10:39:23] <ymirhotfoot55> hololeap, here is the sort of onkects that I think may come in here:
[10:39:34] <ymirhotfoot55> https://en.wikipedia.org/wiki/Horn_clause
[10:40:04] <ymirhotfoot55> Oi, Sorry for linefeed!
[10:42:12] <hololeap> there is also no disjunction for typeclasses, unfortunately. you can't specify that a type is either a member of Show _or_ Eq in practice
[10:42:25] <ymirhotfoot55> Here is a pdf on the sort of thating that reading about type classes suggested to me; https://core.ac.uk/download/pdf/82190596.pdf  I wish there were ab arXive version, and I will look now.
[10:42:34] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:44:58] *** Quits: razetime (~quassel@49.207.213.63) (Read error: Connection reset by peer)
[10:45:45] *** Joins: cheater (~Username@user/cheater)
[10:46:21] <ymirhotfoot55> hololeap, yes, that meta-constraint on the allowable constraints of a type class definition is in part what makes me suspect that often one does get a "most free" instance.
[10:52:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:53:34] <ymirhotfoot55> hololeap and '@Axman6' I began to write out a note for this IRC session, but I realized 1. that note would be a bit long, and 2. I should look at some published stuff.
[10:54:44] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:00:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:00:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:00:29] *** Joins: wroathe (~wroathe@user/wroathe)
[11:05:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:05:57] <ymirhotfoot55> The paper by Makowski looks very good, and seems to have most of what led me to think about "automatic instances" if type classes.  IWJKNAL OF COMPUTER AND SYSTEM SCIENCES 34,  266-292 (1987)
[11:05:57] <ymirhotfoot55> Why Horn Formulas Matter in Computer Science:
[11:05:58] <ymirhotfoot55> Initial Structures and Generic Examples
[11:05:58] <ymirhotfoot55> J.  A. MAKOWSKY
[11:05:59] <ymirhotfoot55> The Encyclopedia of Mathematics article looks useful too: https://encyclopediaofmath.org/wiki/Horn_clauses,_theory_of
[11:06:34] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[11:07:18] <ymirhotfoot55> Dear Haskell folk, thank you!  and Heaven forwarding, I will be back before the snows melt.
[11:07:22] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[11:07:41] <hololeap> speaking independently, there are a _lot_ of references in that paper you linked that I would have to read through to get an understanding sufficient to even attempt to answer your question
[11:10:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:10:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:10:54] *** Joins: wroathe (~wroathe@user/wroathe)
[11:11:41] <ymirhotfoot55> hololeap, I am not joking when I say that I  think, for some folk, starting with the sort of stuff in that paper is the right way to learn Haskell.  Basic, which I like has, or had wgeb I was in grade school in the middle of the last century, one big advantage: most people already, if they got to high school, already had a command of the
[11:11:42] <ymirhotfoot55> presenting ideas.
[11:13:37] <hololeap> it seems like something that is worth looking into, but I can't give you any answers with my current knowledge. maybe someone else can, but you'll have better luck formulating your question with specific examples most haskellers will understand
[11:14:26] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Ping timeout: 256 seconds)
[11:14:40] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:15:25] <ymirhotfoot55> But for Haskell I might start with the elementary theory of Galois connections, then do the Conpleteness Theorem for the lower predicate calculus, then, ah, well then set them down at the repl.  Of course, talking to people who know, and practice, are the most important things.
[11:16:05] <ymirhotfoot55> hololeap, I am actually leaving now.  Good night!
[11:16:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:16:23] *** Parts: ymirhotfoot55 (~ymirhotfo@user/ymirhotfoot) ()
[11:16:46] *** Joins: razetime (~quassel@49.207.213.63)
[11:23:32] *** Joins: cfricke (~cfricke@user/cfricke)
[11:27:14] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:31:41] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c274:f734:3361:cf1c)
[11:34:01] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:39:30] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[11:39:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (*.net *.split)
[11:39:30] *** Quits: cfricke (~cfricke@user/cfricke) (*.net *.split)
[11:39:30] *** Quits: razetime (~quassel@49.207.213.63) (*.net *.split)
[11:39:30] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[11:39:31] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (*.net *.split)
[11:39:31] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (*.net *.split)
[11:39:31] *** Quits: Taneb (~Taneb@runciman.hacksoc.org) (*.net *.split)
[11:39:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (*.net *.split)
[11:39:31] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[11:39:31] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[11:39:31] *** Quits: juri_ (~juri@178.63.35.222) (*.net *.split)
[11:39:31] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (*.net *.split)
[11:39:31] *** Quits: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (*.net *.split)
[11:39:31] *** Quits: qrpnxz (abc4f95c31@user/qrpnxz) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (*.net *.split)
[11:39:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[11:39:31] *** Quits: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se) (*.net *.split)
[11:39:31] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[11:39:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[11:39:31] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[11:39:31] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[11:39:31] *** Quits: kitzman (~kitzman@user/dekenevs) (*.net *.split)
[11:39:31] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[11:39:32] *** Quits: Square (~a@user/square) (*.net *.split)
[11:39:32] *** Quits: anderson (~ande@user/anderson) (*.net *.split)
[11:39:32] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[11:39:32] *** Quits: zero (~z@user/zero) (*.net *.split)
[11:39:32] *** Quits: haritz (~hrtz@user/haritz) (*.net *.split)
[11:39:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[11:39:32] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (*.net *.split)
[11:39:32] *** Quits: xerox (~edi@user/edi) (*.net *.split)
[11:39:32] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[11:39:32] *** Quits: Philonous (~Philonous@user/philonous) (*.net *.split)
[11:39:32] *** Quits: clever (~clever@99.192.114.98) (*.net *.split)
[11:39:32] *** Quits: c_wraith (~c_wraith@adjoint.us) (*.net *.split)
[11:39:32] *** Quits: nerdypepper (~nerdypepp@user/nerdypepper) (*.net *.split)
[11:39:32] *** Quits: nek0 (~nek0@nek0.eu) (*.net *.split)
[11:39:32] *** Quits: img (~img@user/img) (*.net *.split)
[11:39:32] *** Quits: arahael (~arahael@203.158.51.1) (*.net *.split)
[11:39:32] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[11:39:32] *** Quits: jiribenes (~jiribenes@rosa.jiribenes.com) (*.net *.split)
[11:39:32] *** Quits: tinwood (~tinwood@canonical/tinwood) (*.net *.split)
[11:39:32] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[11:39:32] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[11:39:32] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[11:39:32] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[11:39:32] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[11:39:32] *** Quits: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net) (*.net *.split)
[11:39:32] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[11:39:32] *** Quits: duckonomy (~duckonomy@177.ip-144-217-84.net) (*.net *.split)
[11:39:32] *** Quits: drdo (~drdo@144.172.69.89) (*.net *.split)
[11:39:32] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (*.net *.split)
[11:39:32] *** Quits: matijja (~matijja@193.77.181.201) (*.net *.split)
[11:39:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[11:39:32] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[11:39:32] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[11:39:32] *** Quits: bsima (~bsima@2604:a880:400:d0::19f1:7001) (*.net *.split)
[11:39:32] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[11:39:32] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[11:39:32] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[11:39:32] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[11:39:32] *** Quits: tolt (~weechat-h@li219-154.members.linode.com) (*.net *.split)
[11:39:32] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[11:39:32] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[11:39:32] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[11:39:32] *** Quits: res0nat0r0 (~Fletch@dia.whatbox.ca) (*.net *.split)
[11:39:32] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (*.net *.split)
[11:39:32] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[11:39:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (*.net *.split)
[11:39:32] *** Quits: califax (~califax@user/califx) (*.net *.split)
[11:39:32] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[11:39:32] *** Quits: hololeap (~hololeap@user/hololeap) (*.net *.split)
[11:39:32] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (*.net *.split)
[11:39:32] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (*.net *.split)
[11:39:32] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (*.net *.split)
[11:39:33] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (*.net *.split)
[11:39:33] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (*.net *.split)
[11:39:33] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[11:39:33] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[11:39:33] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (*.net *.split)
[11:39:33] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (*.net *.split)
[11:39:33] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (*.net *.split)
[11:39:33] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (*.net *.split)
[11:39:33] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (*.net *.split)
[11:39:33] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (*.net *.split)
[11:39:33] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (*.net *.split)
[11:39:33] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (*.net *.split)
[11:39:33] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (*.net *.split)
[11:39:33] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (*.net *.split)
[11:39:33] *** Quits: quantum (~quantum@user/quantum/x-8556232) (*.net *.split)
[11:39:33] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[11:39:33] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[11:39:33] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (*.net *.split)
[11:39:33] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (*.net *.split)
[11:39:33] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (*.net *.split)
[11:39:33] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (*.net *.split)
[11:39:33] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (*.net *.split)
[11:39:33] *** Quits: soft (~soft@2001:470:69fc:105::c75) (*.net *.split)
[11:39:33] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (*.net *.split)
[11:39:33] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (*.net *.split)
[11:39:33] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[11:39:33] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: Unode (~Unode@194.94.44.220) (*.net *.split)
[11:39:33] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[11:39:33] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[11:39:33] *** Quits: samhh (7569f027cf@2604:bf00:561:2000::e4) (*.net *.split)
[11:39:33] *** Quits: thebnq (~bnq@herrokitty.com) (*.net *.split)
[11:39:33] *** Quits: Noinia (~Frank@77-162-168-71.fixed.kpn.net) (*.net *.split)
[11:39:33] *** Quits: gawen_ (~gawen@user/gawen) (*.net *.split)
[11:39:33] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[11:39:33] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (*.net *.split)
[11:39:33] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[11:39:33] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[11:39:33] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (*.net *.split)
[11:39:33] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[11:39:33] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[11:39:33] *** Quits: m4lvin (~m4lvin@w4eg.de) (*.net *.split)
[11:39:33] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[11:39:33] *** Quits: acro (~acro@user/acro) (*.net *.split)
[11:39:33] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[11:39:33] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[11:39:33] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[11:39:33] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[11:39:33] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[11:39:34] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[11:39:34] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[11:39:34] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[11:39:34] *** Quits: lyxia (~lyxia@poisson.chat) (*.net *.split)
[11:39:34] *** Quits: Athas (athas@sigkill.dk) (*.net *.split)
[11:39:34] *** Quits: SIben (~SIben@ns3106586.ip-5-135-191.eu) (*.net *.split)
[11:39:34] *** Quits: gabiruh (~gabiruh@vps19177.publiccloud.com.br) (*.net *.split)
[11:39:34] *** Quits: ggVGc (~ggVGc@a.lowtech.earth) (*.net *.split)
[11:39:34] *** Quits: ptrcmd (~ptrcmd@user/ptrcmd) (*.net *.split)
[11:39:34] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[11:39:34] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: dpratt__ (sid193493@id-193493.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: vito (sid1962@user/vito) (*.net *.split)
[11:39:34] *** Quits: pierrot (~pi@user/pierrot) (*.net *.split)
[11:39:34] *** Quits: bonz060 (~quassel@2001:bc8:47a4:a23::1) (*.net *.split)
[11:39:34] *** Quits: Jon (jon@dow.land) (*.net *.split)
[11:39:34] *** Quits: smorgasbord (buggy@user/smorgasbord) (*.net *.split)
[11:39:34] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[11:39:34] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (*.net *.split)
[11:39:34] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[11:39:34] *** Quits: Tisoxin (~ikosit@user/ikosit) (*.net *.split)
[11:39:34] *** Quits: jkachmar (~jkachmar@2001:470:69fc:105::c72d) (*.net *.split)
[11:39:34] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (*.net *.split)
[11:39:34] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (*.net *.split)
[11:39:34] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (*.net *.split)
[11:39:34] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (*.net *.split)
[11:39:34] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (*.net *.split)
[11:39:34] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (*.net *.split)
[11:39:34] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (*.net *.split)
[11:39:34] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (*.net *.split)
[11:39:34] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (*.net *.split)
[11:39:34] *** Quits: sweater (~sweater@206.81.18.26) (*.net *.split)
[11:39:34] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (*.net *.split)
[11:39:34] *** Quits: obviyus (sid415299@user/obviyus) (*.net *.split)
[11:39:34] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (*.net *.split)
[11:39:34] *** Quits: davean (~davean@davean.sciesnet.net) (*.net *.split)
[11:39:34] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: tritlo (sid58727@user/tritlo) (*.net *.split)
[11:39:35] *** Quits: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net) (*.net *.split)
[11:39:35] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[11:39:35] *** Quits: shane (~shane@ana.rch.ist) (*.net *.split)
[11:39:35] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (*.net *.split)
[11:39:35] *** Quits: edwardk (sid47016@haskell/developer/edwardk) (*.net *.split)
[11:39:35] *** Quits: idnar (sid12240@debian/mithrandi) (*.net *.split)
[11:39:35] *** Quits: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: sa1_ (sid7690@id-7690.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: jackdk (sid373013@cssa/jackdk) (*.net *.split)
[11:39:35] *** Quits: gnyeki (~gnyeki@user/gnyeki) (*.net *.split)
[11:39:35] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[11:39:35] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (*.net *.split)
[11:39:35] *** Quits: spider__ (~spider@vps-951ce37a.vps.ovh.ca) (*.net *.split)
[11:39:35] *** Quits: drlkf (~drlkf@2001:41d0:a:62bb::1) (*.net *.split)
[11:39:35] *** Quits: bwe (~bwe@2a01:4f8:1c1c:4878::2) (*.net *.split)
[11:39:35] *** Quits: mc47 (~mc47@xmonad/TheMC47) (*.net *.split)
[11:39:35] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (*.net *.split)
[11:39:35] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (*.net *.split)
[11:39:35] *** Quits: xff0x (~xff0x@port-92-193-159-86.dynamic.as20676.net) (*.net *.split)
[11:39:35] *** Quits: neurocyte0917 (~neurocyte@user/neurocyte) (*.net *.split)
[11:39:35] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (*.net *.split)
[11:39:35] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[11:39:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (*.net *.split)
[11:39:35] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (*.net *.split)
[11:39:35] *** Quits: Sgeo (~Sgeo@user/sgeo) (*.net *.split)
[11:39:35] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[11:39:35] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (*.net *.split)
[11:39:35] *** Quits: stvc (~stvc@192.241.166.39) (*.net *.split)
[11:39:35] *** Quits: dminuoso (~dminuoso@user/dminuoso) (*.net *.split)
[11:39:35] *** Quits: haskl (~haskl@user/haskl) (*.net *.split)
[11:39:35] *** Quits: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org) (*.net *.split)
[11:39:35] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[11:39:35] *** Quits: fluxit (~fluxit@techsmix.net) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (*.net *.split)
[11:39:35] *** Quits: phma (~phma@host-67-44-208-201.hnremote.net) (*.net *.split)
[11:39:35] *** Quits: AlexZenon (~alzenon@178.34.162.219) (*.net *.split)
[11:39:35] *** Quits: dka (~code-is-a@193.70.33.83) (*.net *.split)
[11:39:35] *** Quits: raym (~raym@user/raym) (*.net *.split)
[11:39:35] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (*.net *.split)
[11:39:35] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (*.net *.split)
[11:39:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[11:39:35] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[11:39:36] *** Quits: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl) (*.net *.split)
[11:39:36] *** Quits: hughjfchen (~hughjfche@vmi556545.contaboserver.net) (*.net *.split)
[11:39:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[11:39:36] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[11:39:36] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[11:39:36] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (*.net *.split)
[11:39:36] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[11:39:36] *** Quits: monochrom (trebla@216.138.220.146) (*.net *.split)
[11:39:36] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[11:39:36] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[11:39:36] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (*.net *.split)
[11:39:36] *** Quits: eL_Bart0 (eL_Bart0@dietunichtguten.org) (*.net *.split)
[11:39:36] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (*.net *.split)
[11:39:36] *** Quits: bollu (~bollu@159.65.151.13) (*.net *.split)
[11:39:36] *** Quits: canta (~canta@user/canta) (*.net *.split)
[11:39:36] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[11:39:36] *** Quits: nhs (~nhs@136.49.226.20) (*.net *.split)
[11:39:36] *** Quits: jjhoo (~jahakala@user/jjhoo) (*.net *.split)
[11:39:36] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[11:39:36] *** Quits: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net) (*.net *.split)
[11:39:36] *** Quits: oo_migue1 (~pi@77.252.47.226) (*.net *.split)
[11:39:36] *** Quits: df (~ben@justworks.xyz) (*.net *.split)
[11:39:36] *** Quits: douglaswinship (~douglaswi@78.40.148.180) (*.net *.split)
[11:39:36] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[11:39:36] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[11:39:36] *** Quits: tv (~tv@user/tv) (*.net *.split)
[11:39:36] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[11:39:36] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (*.net *.split)
[11:39:37] *** Quits: jeffz (~user@lambda.xen.prgmr.com) (*.net *.split)
[11:39:37] *** Quits: hltk (~hltk@hltk.fi) (*.net *.split)
[11:39:37] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (*.net *.split)
[11:39:37] *** Quits: joeyh_ (~joeyh@kitenet.net) (*.net *.split)
[11:39:37] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[11:39:37] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[11:39:37] *** Quits: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com) (*.net *.split)
[11:39:37] *** Quits: barrucadu (~barrucadu@carcosa.barrucadu.co.uk) (*.net *.split)
[11:39:37] *** Quits: heath (~heath@user/heath) (*.net *.split)
[11:39:37] *** Quits: shanemikel (~shanemike@desk.roadwar.net) (*.net *.split)
[11:39:37] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[11:39:37] *** Quits: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de) (*.net *.split)
[11:39:37] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (*.net *.split)
[11:39:37] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (*.net *.split)
[11:39:37] *** Quits: spoonm (spoonm@inaba.spoonm.org) (*.net *.split)
[11:39:37] *** Quits: Ram-Z (~Ram-Z@li1814-254.members.linode.com) (*.net *.split)
[11:39:37] *** Quits: sajith (~sajith@user/sajith) (*.net *.split)
[11:39:37] *** Quits: meejah (~meejah@rutas.meejah.ca) (*.net *.split)
[11:39:37] *** Quits: michalz (~michalz@185.246.204.126) (*.net *.split)
[11:39:37] *** Quits: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net) (*.net *.split)
[11:39:37] *** Quits: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3) (*.net *.split)
[11:39:37] *** Quits: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9) (*.net *.split)
[11:39:37] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[11:39:38] *** Quits: nf (~n@monade.li) (*.net *.split)
[11:39:38] *** Quits: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9) (*.net *.split)
[11:39:38] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (*.net *.split)
[11:39:38] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (*.net *.split)
[11:39:38] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (*.net *.split)
[11:39:38] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (*.net *.split)
[11:39:38] *** Quits: moats (~oats@user/oats) (*.net *.split)
[11:39:38] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (*.net *.split)
[11:39:38] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[11:39:38] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (*.net *.split)
[11:39:38] *** Quits: bbhoss (sid18216@id-18216.tinside.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[11:39:38] *** Quits: feliix42 (~felix@gibbs.uberspace.de) (*.net *.split)
[11:39:38] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: bgamari_ (~bgamari@2001:470:e438::1) (*.net *.split)
[11:39:38] *** Quits: slowtyper (~slowtyper@user/slowtyper) (*.net *.split)
[11:39:38] *** Quits: averell (~averell@user/averell) (*.net *.split)
[11:39:38] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[11:39:38] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[11:39:38] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (*.net *.split)
[11:39:38] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[11:39:38] *** Quits: Unhammer (~Unhammer@user/unhammer) (*.net *.split)
[11:39:39] *** Quits: relrod (~relrod@redhat/ansible.staff.relrod) (*.net *.split)
[11:39:39] *** Quits: platz_ (~platz@40.122.118.113) (*.net *.split)
[11:39:39] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (*.net *.split)
[11:39:39] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[11:39:39] *** Quits: glider (~glider@user/glider) (*.net *.split)
[11:39:39] *** Quits: quintasan (~quassel@quintasan.pl) (*.net *.split)
[11:39:39] *** Quits: orcus (~orcus@user/brprice) (*.net *.split)
[11:39:39] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (*.net *.split)
[11:39:39] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (*.net *.split)
[11:39:39] *** Quits: dyniec (~dyniec@mail.dybiec.info) (*.net *.split)
[11:39:39] *** Quits: hiredman (~hiredman@frontier1.downey.family) (*.net *.split)
[11:39:39] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (*.net *.split)
[11:39:39] *** Quits: OscarH_ (~OscarH@90.201.86.195) (*.net *.split)
[11:39:39] *** Quits: arkeet (~arkeet@moriya.ca) (*.net *.split)
[11:39:39] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (*.net *.split)
[11:39:39] *** Quits: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8) (*.net *.split)
[11:39:39] *** Quits: sm (~sm@plaintextaccounting/sm) (*.net *.split)
[11:39:39] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (*.net *.split)
[11:39:39] *** Quits: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5) (*.net *.split)
[11:39:39] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (*.net *.split)
[11:39:39] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (*.net *.split)
[11:39:39] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (*.net *.split)
[11:39:39] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (*.net *.split)
[11:39:40] *** Quits: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0) (*.net *.split)
[11:39:40] *** Quits: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489) (*.net *.split)
[11:39:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[11:39:40] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (*.net *.split)
[11:39:40] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (*.net *.split)
[11:39:40] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[11:39:40] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (*.net *.split)
[11:39:40] *** Quits: AkechiShiro (~licht@user/akechishiro) (*.net *.split)
[11:39:40] *** Quits: noctuks (7vrDyCK6LH@user/noctux) (*.net *.split)
[11:39:40] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[11:39:40] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[11:39:40] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[11:39:40] *** Quits: tired (~tired@user/tired) (*.net *.split)
[11:39:40] *** Quits: aria (sid380617@2a03:5180:f:2::5:cec9) (*.net *.split)
[11:39:40] *** Quits: jonrh (sid5185@2a03:5180:f:3::1441) (*.net *.split)
[11:39:40] *** Quits: taktoa[c] (sid282096@2a03:5180:f::4:4df0) (*.net *.split)
[11:39:40] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (*.net *.split)
[11:39:40] *** Quits: AndreasK (sid320732@2a03:5180:f:5::4:e4dc) (*.net *.split)
[11:39:40] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[11:39:40] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[11:39:40] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[11:39:40] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[11:39:40] *** Quits: jackhill (~jackhill@kalessin.dragonsnail.net) (*.net *.split)
[11:39:41] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[11:39:41] *** Quits: flupe (~baboum@radon.sbi.re) (*.net *.split)
[11:39:41] *** Quits: cjay- (cjay@nerdbox.nerd2nerd.org) (*.net *.split)
[11:39:41] *** Quits: notabled1 (~notabledu@ares.dbalan.in) (*.net *.split)
[11:39:41] *** Quits: sshine (~simon@hubris.eta.solutions) (*.net *.split)
[11:39:41] *** Quits: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com) (*.net *.split)
[11:39:41] *** Quits: p3n (~p3n@217.198.124.246) (*.net *.split)
[11:39:41] *** Quits: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at) (*.net *.split)
[11:39:41] *** Quits: ellie (~ellie@user/ellie) (*.net *.split)
[11:39:41] *** Quits: blades (~blades@204.48.29.163) (*.net *.split)
[11:39:41] *** Quits: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0) (*.net *.split)
[11:39:41] *** Quits: kosmikus (~kosmikus@nullzig.kosmikus.org) (*.net *.split)
[11:39:41] *** Quits: robertm (robertm@lattice.rojoma.com) (*.net *.split)
[11:39:41] *** Quits: _________ (~nobody@user/noodly) (*.net *.split)
[11:39:41] *** Quits: Trattue (~Trattue@152.70.182.158) (*.net *.split)
[11:39:41] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (*.net *.split)
[11:39:41] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (*.net *.split)
[11:39:41] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[11:39:41] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (*.net *.split)
[11:39:41] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (*.net *.split)
[11:39:41] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (*.net *.split)
[11:39:41] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (*.net *.split)
[11:39:41] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (*.net *.split)
[11:39:42] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (*.net *.split)
[11:39:42] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (*.net *.split)
[11:39:42] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[11:39:42] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (*.net *.split)
[11:39:42] *** Quits: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1) (*.net *.split)
[11:39:42] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (*.net *.split)
[11:39:42] *** Quits: haask (~harry@user/haask) (*.net *.split)
[11:39:42] *** Quits: Flow (~none@gentoo/developer/flow) (*.net *.split)
[11:39:42] *** Quits: mncheck (~mncheck@193.224.205.254) (*.net *.split)
[11:39:42] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[11:39:42] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[11:39:42] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (*.net *.split)
[11:39:42] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (*.net *.split)
[11:39:42] *** Quits: APic (apic@apic.name) (*.net *.split)
[11:39:42] *** Quits: ouroboros (~ouroboros@user/ouroboros) (*.net *.split)
[11:39:42] *** Quits: raoul (~raoul@95.179.203.88) (*.net *.split)
[11:39:42] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: PHO` (~pho@akari.cielonegro.org) (*.net *.split)
[11:39:42] *** Quits: nonzen (~nonzen@user/nonzen) (*.net *.split)
[11:39:42] *** Quits: lieven (~mal@ns2.wyrd.be) (*.net *.split)
[11:39:42] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (*.net *.split)
[11:39:42] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[11:39:42] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: mcfilib (sid302703@user/mcfilib) (*.net *.split)
[11:39:42] *** Quits: tureba (~tureba@tureba.org) (*.net *.split)
[11:39:42] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (*.net *.split)
[11:39:42] *** Quits: jakalx (~jakalx@base.jakalx.net) (*.net *.split)
[11:39:42] *** Quits: bah (~bah@l1.tel) (*.net *.split)
[11:39:42] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (*.net *.split)
[11:39:42] *** Quits: alp (~alp@mail.fmap.fr) (*.net *.split)
[11:39:42] *** Quits: guibou (~guibou@mail.fmap.fr) (*.net *.split)
[11:39:42] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (*.net *.split)
[11:39:42] *** Quits: _\_ (~o@user/ding) (*.net *.split)
[11:39:42] *** Quits: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host) (*.net *.split)
[11:39:42] *** Quits: adium (adium@user/adium) (*.net *.split)
[11:39:42] *** Quits: nckx (~nckx@tobias.gr) (*.net *.split)
[11:39:43] *** Quits: edwtjo (~edwtjo@user/edwtjo) (*.net *.split)
[11:39:43] *** Quits: Aleksejs (~Aleksejs@haskell.lv) (*.net *.split)
[11:39:43] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[11:39:43] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (*.net *.split)
[11:39:43] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (*.net *.split)
[11:39:43] *** Quits: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d) (*.net *.split)
[11:39:43] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (*.net *.split)
[11:39:43] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (*.net *.split)
[11:39:43] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (*.net *.split)
[11:39:43] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (*.net *.split)
[11:39:43] *** Quits: boxscape (~boxscape@user/boxscape) (*.net *.split)
[11:39:43] *** Quits: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57) (*.net *.split)
[11:39:43] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[11:39:43] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (*.net *.split)
[11:39:43] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[11:39:43] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (*.net *.split)
[11:39:43] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (*.net *.split)
[11:39:43] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (*.net *.split)
[11:39:43] *** Quits: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9) (*.net *.split)
[11:39:43] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (*.net *.split)
[11:39:43] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[11:39:43] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[11:39:43] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[11:39:43] *** Quits: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[11:39:43] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[11:39:43] *** Quits: samebchase (~samebchas@51.15.68.182) (*.net *.split)
[11:39:43] *** Quits: peutri (~peutri@ns317027.ip-94-23-46.eu) (*.net *.split)
[11:39:43] *** Quits: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp) (*.net *.split)
[11:39:43] *** Quits: bens (~bens@www.typius.com) (*.net *.split)
[11:39:43] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[11:39:43] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (*.net *.split)
[11:39:43] *** Quits: auri (~quassel@fsf/member/auri) (*.net *.split)
[11:39:43] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[11:39:44] *** Quits: Moyst_ (~moyst@user/moyst) (*.net *.split)
[11:39:44] *** Quits: dsal (sid13060@id-13060.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: jmct_ (sid160793@id-160793.tinside.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: amir (sid22336@user/amir) (*.net *.split)
[11:39:44] *** Quits: astra (sid289983@user/amish) (*.net *.split)
[11:39:44] *** Quits: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: parseval (sid239098@id-239098.helmsley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: bsdbandit (~bwell@users.757.org) (*.net *.split)
[11:39:44] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (*.net *.split)
[11:39:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:39:44] *** Quits: ringo__ (~ringo@157.230.117.128) (*.net *.split)
[11:39:44] *** Quits: oxytocat (~alloca@user/suppi) (*.net *.split)
[11:39:44] *** Quits: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34) (*.net *.split)
[11:39:44] *** Quits: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2) (*.net *.split)
[11:39:44] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[11:39:44] *** Quits: nshepperd2 (~nshepperd@li364-218.members.linode.com) (*.net *.split)
[11:39:44] *** Quits: deni (~deni@user/deni) (*.net *.split)
[11:39:44] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[11:39:44] *** Quits: jocke-l (jocke-l@a.x0.is) (*.net *.split)
[11:39:44] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[11:39:44] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (*.net *.split)
[11:39:44] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (*.net *.split)
[11:39:44] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (*.net *.split)
[11:39:44] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (*.net *.split)
[11:39:44] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (*.net *.split)
[11:39:44] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[11:39:44] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (*.net *.split)
[11:39:44] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (*.net *.split)
[11:39:44] *** Quits: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22) (*.net *.split)
[11:39:44] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (*.net *.split)
[11:39:44] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (*.net *.split)
[11:39:44] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (*.net *.split)
[11:39:44] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (*.net *.split)
[11:39:44] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (*.net *.split)
[11:39:44] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: hays (rootvegeta@fsf/member/hays) (*.net *.split)
[11:39:44] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[11:39:44] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[11:39:44] *** Quits: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001) (*.net *.split)
[11:39:44] *** Quits: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is) (*.net *.split)
[11:39:44] *** Quits: alanz (sid110616@uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[11:39:44] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[11:39:44] *** Quits: alinab (sid468903@helmsley.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[11:39:44] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[11:39:45] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: bjobjo (~bjobjo@user/bjobjo) (*.net *.split)
[11:39:45] *** Quits: Hecate (~mariposa@user/hecate) (*.net *.split)
[11:39:45] *** Quits: aarchi (sid486183@id-486183.uxbridge.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: Igloo (~ian@matrix.chaos.earth.li) (*.net *.split)
[11:39:45] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: T_S_ (sid501726@id-501726.uxbridge.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c) (*.net *.split)
[11:39:45] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[11:39:45] *** Quits: dy (~dy@user/dy) (*.net *.split)
[11:39:45] *** Quits: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca) (*.net *.split)
[11:39:45] *** Quits: statusfailed (~statusfai@statusfailed.com) (*.net *.split)
[11:39:45] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[11:39:45] *** Quits: hud (~hud@uwyo-129-72-161-67.uwyo.edu) (*.net *.split)
[11:39:45] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[11:39:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[11:41:38] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[11:45:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[11:52:01] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[11:52:01] *** Joins: litharge (litharge@libera/bot/litharge)
[11:52:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[11:52:01] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[11:52:01] *** Joins: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[11:52:01] *** Joins: biberu (~biberu@user/biberu)
[11:52:01] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:52:01] *** Joins: cfricke (~cfricke@user/cfricke)
[11:52:01] *** Joins: razetime (~quassel@49.207.213.63)
[11:52:01] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[11:52:01] *** Joins: cheater (~Username@user/cheater)
[11:52:01] *** Joins: michalz (~michalz@185.246.204.126)
[11:52:01] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[11:52:01] *** Joins: arahael (~arahael@203.158.51.1)
[11:52:01] *** Joins: sagax (~sagax_nb@user/sagax)
[11:52:01] *** Joins: xff0x (~xff0x@port-92-193-159-86.dynamic.as20676.net)
[11:52:01] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:52:01] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[11:52:01] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[11:52:02] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[11:52:02] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[11:52:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[11:52:02] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[11:52:02] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[11:52:02] *** Joins: mbuf (~Shakthi@182.77.103.82)
[11:52:02] *** Joins: califax (~califax@user/califx)
[11:52:02] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:52:02] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:52:02] *** Joins: hololeap (~hololeap@user/hololeap)
[11:52:02] *** Joins: wagle (~wagle@quassel.wagle.io)
[11:52:02] *** Joins: juri_ (~juri@178.63.35.222)
[11:52:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[11:52:02] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[11:52:02] *** Joins: danso (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009)
[11:52:02] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[11:52:02] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[11:52:02] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[11:52:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:52:02] *** Joins: aplainzetakind (~johndoe@captainludd.powered.by.lunarbnc.net)
[11:52:02] *** Joins: Sgeo (~Sgeo@user/sgeo)
[11:52:02] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:52:02] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[11:52:02] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:52:02] *** Joins: YoungFrog (~youngfrog@2a02:a03f:c21b:f900:f89b:2c73:97b1:7ba3)
[11:52:02] *** Joins: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71)
[11:52:02] *** Joins: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5)
[11:52:02] *** Joins: hud (~hud@uwyo-129-72-161-67.uwyo.edu)
[11:52:02] *** Joins: jassob (~jassob@h-155-4-71-72.A785.priv.bahnhof.se)
[11:52:02] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:52:02] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[11:52:02] *** Joins: srk (~sorki@user/srk)
[11:52:02] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:52:02] *** Joins: justIrresolute (~justache@user/justache)
[11:52:02] *** Joins: kitzman (~kitzman@user/dekenevs)
[11:52:02] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[11:52:02] *** Joins: pavonia (~user@user/siracusa)
[11:52:02] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[11:52:02] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:52:02] *** Joins: stvc (~stvc@192.241.166.39)
[11:52:02] *** Joins: dminuoso (~dminuoso@user/dminuoso)
[11:52:02] *** Joins: Square (~a@user/square)
[11:52:02] *** Joins: nshepperd (nshepperd@2600:3c03::f03c:92ff:fe28:92c9)
[11:52:02] *** Joins: haskl (~haskl@user/haskl)
[11:52:02] *** Joins: ncopa3 (~ncopa@gbr2-dev1.alpinelinux.org)
[11:52:02] *** Joins: anderson (~ande@user/anderson)
[11:52:02] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[11:52:02] *** Joins: zero (~z@user/zero)
[11:52:02] *** Joins: haritz (~hrtz@user/haritz)
[11:52:02] *** Joins: raym (~raym@user/raym)
[11:52:02] *** Joins: a1paca (~a1paca@user/a1paca)
[11:52:02] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[11:52:02] *** Joins: fluxit (~fluxit@techsmix.net)
[11:52:02] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[11:52:02] *** Joins: xerox (~edi@user/edi)
[11:52:02] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[11:52:02] *** Joins: AWizzArd (~code@gehrels.uberspace.de)
[11:52:02] *** Joins: Philonous (~Philonous@user/philonous)
[11:52:02] *** Joins: clever (~clever@99.192.114.98)
[11:52:02] *** Joins: c_wraith (~c_wraith@adjoint.us)
[11:52:02] *** Joins: nerdypepper (~nerdypepp@user/nerdypepper)
[11:52:02] *** Joins: edr (~edr@user/edr)
[11:52:02] *** Joins: nek0 (~nek0@nek0.eu)
[11:52:02] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[11:52:02] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[11:52:02] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[11:52:02] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[11:52:02] *** Joins: img (~img@user/img)
[11:52:02] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[11:52:02] *** Joins: phma (~phma@host-67-44-208-201.hnremote.net)
[11:52:02] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[11:52:02] *** Joins: Deide (~deide@user/deide)
[11:52:02] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[11:52:02] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[11:52:02] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[11:52:02] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[11:52:02] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[11:52:02] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[11:52:02] *** Joins: AlexZenon (~alzenon@178.34.162.219)
[11:52:02] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[11:52:02] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[11:52:02] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[11:52:02] *** Joins: jinsun_ (~jinsun@user/jinsun)
[11:52:02] *** Joins: sm (~sm@plaintextaccounting/sm)
[11:52:02] *** Joins: flupe (~baboum@radon.sbi.re)
[11:52:02] *** Joins: dka (~code-is-a@193.70.33.83)
[11:52:02] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[11:52:02] *** Joins: nf (~n@monade.li)
[11:52:02] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[11:52:02] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[11:52:02] *** Joins: cyphase (~cyphase@user/cyphase)
[11:52:02] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[11:52:02] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[11:52:02] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[11:52:02] *** Joins: widelec-BB (~widelec@cpe-109-207-144-181.docsis.tczew.net.pl)
[11:52:02] *** Joins: douglaswinship (~douglaswi@78.40.148.180)
[11:52:02] *** Joins: hughjfchen (~hughjfche@vmi556545.contaboserver.net)
[11:52:02] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[11:52:02] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[11:52:02] *** Joins: tinwood (~tinwood@canonical/tinwood)
[11:52:02] *** Joins: tomku (~tomku@user/tomku)
[11:52:02] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[11:52:02] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[11:52:02] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[11:52:02] *** Joins: psydroid (~psydroid@user/psydroid)
[11:52:02] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[11:52:02] *** Joins: hughjfchen[m] (~hughjfche@2001:470:69fc:105::c29d)
[11:52:02] *** Joins: aveltras[m] (~aveltrasm@2001:470:69fc:105::3ef9)
[11:52:02] *** Joins: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a)
[11:52:02] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[11:52:02] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[11:52:02] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:52:02] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[11:52:02] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[11:52:02] *** Joins: InternetManaging (~imjmatrix@2001:470:69fc:105::1:2ea5)
[11:52:02] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[11:52:02] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[11:52:02] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[11:52:02] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[11:52:02] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[11:52:02] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[11:52:02] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[11:52:02] *** Joins: boxscape (~boxscape@user/boxscape)
[11:52:02] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[11:52:02] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[11:52:02] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[11:52:02] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[11:52:02] *** Joins: the_last_immorta (~thelastim@2001:470:69fc:105::1:4d57)
[11:52:02] *** Joins: Tisoxin (~ikosit@user/ikosit)
[11:52:02] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[11:52:02] *** Joins: jkachmar (~jkachmar@2001:470:69fc:105::c72d)
[11:52:02] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[11:52:02] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[11:52:02] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[11:52:02] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[11:52:02] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[11:52:02] *** Joins: kadoban (~kadoban@user/kadoban)
[11:52:02] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[11:52:02] *** Joins: MatrixTravelerbo (~voyagert2@2001:470:69fc:105::22)
[11:52:02] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[11:52:02] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[11:52:02] *** Joins: siraben (~siraben@user/siraben)
[11:52:02] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[11:52:02] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[11:52:02] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[11:52:02] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[11:52:02] *** Joins: denbrahe[m] (~denbrahem@2001:470:69fc:105::19c0)
[11:52:02] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[11:52:02] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[11:52:02] *** Joins: grabb0id[m] (~alangmatr@2001:470:69fc:105::b489)
[11:52:02] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[11:52:02] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[11:52:02] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[11:52:02] *** Joins: moats (~oats@user/oats)
[11:52:02] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[11:52:02] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[11:52:02] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[11:52:02] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[11:52:02] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[11:52:02] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[11:52:02] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[11:52:02] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[11:52:02] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[11:52:02] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[11:52:02] *** Joins: alex[m] (~alexchete@2001:470:69fc:105::1:1001)
[11:52:02] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[11:52:02] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[11:52:02] *** Joins: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f)
[11:52:02] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[11:52:02] *** Joins: IgnatInsarov[m] (~kindaroma@2001:470:69fc:105::f5d9)
[11:52:02] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[11:52:02] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[11:52:02] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[11:52:02] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[11:52:02] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[11:52:02] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[11:52:02] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[11:52:02] *** Joins: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da)
[11:52:02] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[11:52:02] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[11:52:02] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[11:52:02] *** Joins: acidsys (~LSD@2.lsd.systems)
[11:52:02] *** Joins: hook54321 (sid149355@user/hook54321)
[11:52:02] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[11:52:02] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[11:52:02] *** Joins: wolfshappen (~waff@irc.furworks.de)
[11:52:02] *** Joins: meejah (~meejah@rutas.meejah.ca)
[11:52:02] *** Joins: sajith (~sajith@user/sajith)
[11:52:02] *** Joins: Ram-Z (~Ram-Z@li1814-254.members.linode.com)
[11:52:02] *** Joins: spoonm (spoonm@inaba.spoonm.org)
[11:52:02] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[11:52:02] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[11:52:02] *** Joins: madnight_ (~madnight@static.59.103.201.195.clients.your-server.de)
[11:52:02] *** Joins: Teacup (~teacup@user/teacup)
[11:52:02] *** Joins: shanemikel (~shanemike@desk.roadwar.net)
[11:52:02] *** Joins: heath (~heath@user/heath)
[11:52:02] *** Joins: barrucadu (~barrucadu@carcosa.barrucadu.co.uk)
[11:52:02] *** Joins: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com)
[11:52:02] *** Joins: drewolson (~drewolson@user/drewolson)
[11:52:02] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[11:52:02] *** Joins: joeyh_ (~joeyh@kitenet.net)
[11:52:02] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[11:52:02] *** Joins: hltk (~hltk@hltk.fi)
[11:52:02] *** Joins: jeffz (~user@lambda.xen.prgmr.com)
[11:52:02] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[11:52:02] *** Joins: maerwald (~maerwald@user/maerwald)
[11:52:02] *** Joins: tv (~tv@user/tv)
[11:52:02] *** Joins: exarkun (~exarkun@user/exarkun)
[11:52:02] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[11:52:02] *** Joins: df (~ben@justworks.xyz)
[11:52:02] *** Joins: oo_migue1 (~pi@77.252.47.226)
[11:52:02] *** Joins: mjrosenb (~mjrosenb@pool-108-54-97-96.nycmny.fios.verizon.net)
[11:52:02] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[11:52:02] *** Joins: jjhoo (~jahakala@user/jjhoo)
[11:52:02] *** Joins: nhs (~nhs@136.49.226.20)
[11:52:02] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:52:02] *** Joins: canta (~canta@user/canta)
[11:52:02] *** Joins: bollu (~bollu@159.65.151.13)
[11:52:02] *** Joins: kritzefitz (~kritzefit@debian/kritzefitz)
[11:52:02] *** Joins: eL_Bart0 (eL_Bart0@dietunichtguten.org)
[11:52:02] *** Joins: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com)
[11:52:02] *** Joins: m1dnight (~christoph@christophe.dev)
[11:52:02] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[11:52:02] *** Joins: monochrom (trebla@216.138.220.146)
[11:52:02] *** Joins: mcglk (~mcglk@131.191.49.120)
[11:52:02] *** Joins: mniip (mniip@libera/staff/mniip)
[11:52:02] *** Joins: enyc (~enyc@user/enyc)
[11:52:02] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[11:52:02] *** Joins: Jon (jon@dow.land)
[11:52:02] *** Joins: pierrot (~pi@user/pierrot)
[11:52:02] *** Joins: vito (sid1962@user/vito)
[11:52:02] *** Joins: smorgasbord (buggy@user/smorgasbord)
[11:52:02] *** Joins: grfn (sid449115@id-449115.helmsley.irccloud.com)
[11:52:02] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[11:52:02] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[11:52:02] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[11:52:02] *** Joins: dpratt__ (sid193493@id-193493.helmsley.irccloud.com)
[11:52:02] *** Joins: Xe (~cadey@tailscale/xe)
[11:52:02] *** Joins: bonz060 (~quassel@2001:bc8:47a4:a23::1)
[11:52:02] *** Joins: ptrcmd (~ptrcmd@user/ptrcmd)
[11:52:02] *** Joins: ggVGc (~ggVGc@a.lowtech.earth)
[11:52:02] *** Joins: gabiruh (~gabiruh@vps19177.publiccloud.com.br)
[11:52:02] *** Joins: SIben (~SIben@ns3106586.ip-5-135-191.eu)
[11:52:02] *** Joins: Athas (athas@sigkill.dk)
[11:52:02] *** Joins: lyxia (~lyxia@poisson.chat)
[11:52:02] *** Joins: xstill- (xstill@fimu/xstill)
[11:52:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[11:52:02] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[11:52:02] *** Joins: davl (~davl@207.154.228.18)
[11:52:02] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[11:52:02] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[11:52:02] *** Joins: xacktm (xacktm@user/xacktm)
[11:52:02] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[11:52:02] *** Joins: acro (~acro@user/acro)
[11:52:02] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[11:52:02] *** Joins: m4lvin (~m4lvin@w4eg.de)
[11:52:02] *** Joins: urdh (~urdh@user/urdh)
[11:52:02] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[11:52:02] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[11:52:02] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[11:52:02] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[11:52:02] *** Joins: amk (~amk@109.255.169.126)
[11:52:02] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[11:52:02] *** Joins: gawen_ (~gawen@user/gawen)
[11:52:02] *** Joins: Noinia (~Frank@77-162-168-71.fixed.kpn.net)
[11:52:02] *** Joins: thebnq (~bnq@herrokitty.com)
[11:52:02] *** Joins: samhh (7569f027cf@2604:bf00:561:2000::e4)
[11:52:02] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[11:52:02] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[11:52:02] *** Joins: Unode (~Unode@194.94.44.220)
[11:52:02] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:52:02] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[11:52:02] *** Joins: int-e (~noone@int-e.eu)
[11:52:02] *** Joins: bwe (~bwe@2a01:4f8:1c1c:4878::2)
[11:52:02] *** Joins: drlkf (~drlkf@2001:41d0:a:62bb::1)
[11:52:02] *** Joins: spider__ (~spider@vps-951ce37a.vps.ovh.ca)
[11:52:02] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[11:52:02] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[11:52:02] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[11:52:02] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[11:52:02] *** Joins: gnyeki (~gnyeki@user/gnyeki)
[11:52:02] *** Joins: jackdk (sid373013@cssa/jackdk)
[11:52:02] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[11:52:02] *** Joins: sa1_ (sid7690@id-7690.ilkley.irccloud.com)
[11:52:02] *** Joins: lexi-lambda (sid92601@id-92601.hampstead.irccloud.com)
[11:52:02] *** Joins: idnar (sid12240@debian/mithrandi)
[11:52:02] *** Joins: edwardk (sid47016@haskell/developer/edwardk)
[11:52:02] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[11:52:02] *** Joins: shane (~shane@ana.rch.ist)
[11:52:02] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[11:52:02] *** Joins: abrar_ (~abrar@static-108-2-152-54.phlapa.fios.verizon.net)
[11:52:02] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[11:52:02] *** Joins: tritlo (sid58727@user/tritlo)
[11:52:02] *** Joins: davean (~davean@davean.sciesnet.net)
[11:52:02] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[11:52:02] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[11:52:02] *** Joins: obviyus (sid415299@user/obviyus)
[11:52:02] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[11:52:02] *** Joins: sweater (~sweater@206.81.18.26)
[11:52:02] *** Joins: arkeet (~arkeet@moriya.ca)
[11:52:02] *** Joins: OscarH_ (~OscarH@90.201.86.195)
[11:52:02] *** Joins: piele (~piele@tbonesteak.creativeserver.net)
[11:52:02] *** Joins: hiredman (~hiredman@frontier1.downey.family)
[11:52:02] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[11:52:02] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[11:52:02] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[11:52:02] *** Joins: orcus (~orcus@user/brprice)
[11:52:02] *** Joins: quintasan (~quassel@quintasan.pl)
[11:52:02] *** Joins: glider (~glider@user/glider)
[11:52:02] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[11:52:02] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[11:52:02] *** Joins: platz_ (~platz@40.122.118.113)
[11:52:02] *** Joins: relrod (~relrod@redhat/ansible.staff.relrod)
[11:52:02] *** Joins: Unhammer (~Unhammer@user/unhammer)
[11:52:02] *** Joins: dfg (dfg@user/dfg)
[11:52:02] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[11:52:02] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[11:52:02] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[11:52:02] *** Joins: averell (~averell@user/averell)
[11:52:02] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[11:52:02] *** Joins: bgamari_ (~bgamari@2001:470:e438::1)
[11:52:02] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[11:52:02] *** Joins: feliix42 (~felix@gibbs.uberspace.de)
[11:52:02] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[11:52:02] *** Joins: bw (sid2730@user/betawaffle)
[11:52:02] *** Joins: bbhoss (sid18216@id-18216.tinside.irccloud.com)
[11:52:02] *** Joins: Trattue (~Trattue@152.70.182.158)
[11:52:02] *** Joins: _________ (~nobody@user/noodly)
[11:52:02] *** Joins: robertm (robertm@lattice.rojoma.com)
[11:52:02] *** Joins: kosmikus (~kosmikus@nullzig.kosmikus.org)
[11:52:02] *** Joins: greenbourne277 (~greenbour@2001:4b98:dc2:45:216:3eff:fe8a:bbf0)
[11:52:02] *** Joins: blades (~blades@204.48.29.163)
[11:52:02] *** Joins: ellie (~ellie@user/ellie)
[11:52:02] *** Joins: sqrt2_ (~ben@80-108-18-7.cable.dynamic.surfer.at)
[11:52:02] *** Joins: dumptruckman (~dumptruck@45-79-173-88.ip.linodeusercontent.com)
[11:52:02] *** Joins: p3n (~p3n@217.198.124.246)
[11:52:02] *** Joins: sshine (~simon@hubris.eta.solutions)
[11:52:02] *** Joins: cjay- (cjay@nerdbox.nerd2nerd.org)
[11:52:02] *** Joins: oats (~thomas@user/oats)
[11:52:02] *** Joins: notabled1 (~notabledu@ares.dbalan.in)
[11:52:02] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[11:52:02] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[11:52:02] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[11:52:02] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[11:52:02] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[11:52:02] *** Joins: AndreasK (sid320732@2a03:5180:f:5::4:e4dc)
[11:52:02] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[11:52:02] *** Joins: jonrh (sid5185@2a03:5180:f:3::1441)
[11:52:02] *** Joins: taktoa[c] (sid282096@2a03:5180:f::4:4df0)
[11:52:02] *** Joins: aria (sid380617@2a03:5180:f:2::5:cec9)
[11:52:02] *** Joins: tired (~tired@user/tired)
[11:52:02] *** Joins: noctux (~noctux@user/noctux)
[11:52:02] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[11:52:02] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:52:02] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[11:52:02] *** Joins: gdd (~gdd@129.199.146.230)
[11:52:02] *** Joins: noctuks (7vrDyCK6LH@user/noctux)
[11:52:02] *** Joins: AkechiShiro (~licht@user/akechishiro)
[11:52:02] *** Joins: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1)
[11:52:02] *** Joins: tafa (~tafa@user/tafa)
[11:52:02] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[11:52:02] *** Joins: jocke-l (jocke-l@a.x0.is)
[11:52:02] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[11:52:02] *** Joins: deni (~deni@user/deni)
[11:52:02] *** Joins: nshepperd2 (~nshepperd@li364-218.members.linode.com)
[11:52:02] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[11:52:02] *** Joins: hexagoxel (~hexagoxel@2a01:4f8:c0c:e::2)
[11:52:02] *** Joins: kawzeg (kawzeg@2a01:7e01::f03c:92ff:fee2:ec34)
[11:52:02] *** Joins: oxytocat (~alloca@user/suppi)
[11:52:02] *** Joins: ringo__ (~ringo@157.230.117.128)
[11:52:02] *** Joins: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec)
[11:52:02] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:52:02] *** Joins: bsdbandit (~bwell@users.757.org)
[11:52:02] *** Joins: parseval (sid239098@id-239098.helmsley.irccloud.com)
[11:52:02] *** Joins: hamishmack_ (sid389057@id-389057.hampstead.irccloud.com)
[11:52:02] *** Joins: amir (sid22336@user/amir)
[11:52:02] *** Joins: astra (sid289983@user/amish)
[11:52:02] *** Joins: jmct_ (sid160793@id-160793.tinside.irccloud.com)
[11:52:02] *** Joins: dsal (sid13060@id-13060.lymington.irccloud.com)
[11:52:02] *** Joins: Moyst_ (~moyst@user/moyst)
[11:52:02] *** Joins: chronon (~chronon@user/chronon)
[11:52:02] *** Joins: auri (~quassel@fsf/member/auri)
[11:52:02] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[11:52:02] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[11:52:02] *** Joins: bens (~bens@www.typius.com)
[11:52:02] *** Joins: dfordvm (~dfordivam@tk2-219-19469.vs.sakura.ne.jp)
[11:52:02] *** Joins: peutri (~peutri@ns317027.ip-94-23-46.eu)
[11:52:02] *** Joins: samebchase (~samebchas@51.15.68.182)
[11:52:02] *** Joins: finsternis (~X@23.226.237.192)
[11:52:02] *** Joins: rookie101 (~rookie@165.232.121.13)
[11:52:02] *** Joins: ProofTechnique (sid79547@id-79547.ilkley.irccloud.com)
[11:52:02] *** Joins: niko (~niko@libera/staff/niko)
[11:52:02] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[11:52:02] *** Joins: PigDude (~PigDude@159.203.16.199)
[11:52:02] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[11:52:02] *** Joins: guibou (~guibou@mail.fmap.fr)
[11:52:02] *** Joins: alp (~alp@mail.fmap.fr)
[11:52:02] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[11:52:02] *** Joins: bah (~bah@l1.tel)
[11:52:02] *** Joins: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg)
[11:52:02] *** Joins: tureba (~tureba@tureba.org)
[11:52:02] *** Joins: mcfilib (sid302703@user/mcfilib)
[11:52:02] *** Joins: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com)
[11:52:02] *** Joins: sudden (~cat@user/sudden)
[11:52:02] *** Joins: smunix (~smunix@static.26.70.12.49.clients.your-server.de)
[11:52:02] *** Joins: lieven (~mal@ns2.wyrd.be)
[11:52:02] *** Joins: nonzen (~nonzen@user/nonzen)
[11:52:02] *** Joins: PHO` (~pho@akari.cielonegro.org)
[11:52:02] *** Joins: teehemkay (sid14792@id-14792.lymington.irccloud.com)
[11:52:02] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[11:52:02] *** Joins: raoul (~raoul@95.179.203.88)
[11:52:02] *** Joins: ouroboros (~ouroboros@user/ouroboros)
[11:52:02] *** Joins: APic (apic@apic.name)
[11:52:02] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[11:52:02] *** Joins: |beowulf| (1000@sourcemage/mage/beowulf)
[11:52:02] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[11:52:02] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[11:52:02] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:52:02] *** Joins: Flow (~none@gentoo/developer/flow)
[11:52:02] *** Joins: haask (~harry@user/haask)
[11:52:02] *** Joins: ajb_ (~ajb@cupid.whatbox.ca)
[11:52:02] *** Joins: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com)
[11:52:02] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[11:52:02] *** Joins: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1)
[11:52:02] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[11:52:02] *** Joins: lisq (~quassel@lis.moe)
[11:52:02] *** Joins: Aleksejs (~Aleksejs@haskell.lv)
[11:52:02] *** Joins: edwtjo (~edwtjo@user/edwtjo)
[11:52:02] *** Joins: nckx (~nckx@tobias.gr)
[11:52:02] *** Joins: adium (adium@user/adium)
[11:52:02] *** Joins: kaol (~kaol@94-237-42-30.nl-ams1.upcloud.host)
[11:52:02] *** Joins: Rembane (~Rembane@li346-36.members.linode.com)
[11:52:02] *** Joins: _\_ (~o@user/ding)
[11:52:02] *** Joins: shachaf (~shachaf@user/shachaf)
[11:52:02] *** Joins: statusfailed (~statusfai@statusfailed.com)
[11:52:02] *** Joins: djanatyn (~djanatyn@vps-7f49a6b0.vps.ovh.ca)
[11:52:02] *** Joins: dy (~dy@user/dy)
[11:52:02] *** Joins: reda_ (~reda@user/reda)
[11:52:02] *** Joins: skn (~znc@2001:19f0:5:701:5400:ff:fe7c:4e5c)
[11:52:02] *** Joins: T_S_ (sid501726@id-501726.uxbridge.irccloud.com)
[11:52:02] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[11:52:02] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[11:52:02] *** Joins: Igloo (~ian@matrix.chaos.earth.li)
[11:52:02] *** Joins: aarchi (sid486183@id-486183.uxbridge.irccloud.com)
[11:52:02] *** Joins: Hecate (~mariposa@user/hecate)
[11:52:02] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[11:52:02] *** Joins: asm (~alexander@user/asm)
[11:52:02] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[11:52:02] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[11:52:02] *** Joins: FragByte (~christian@user/fragbyte)
[11:52:02] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[11:52:02] *** Joins: jakzale (6291399afa@user/jakzale)
[11:52:02] *** Joins: ikke (~kevin@alpine/developer/ikke)
[11:52:02] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[11:52:02] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[11:52:02] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is)
[11:52:02] *** Joins: DigitalKiwi (~kiwi@2604:a880:400:d0::12fc:5001)
[11:52:02] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[11:52:02] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:52:02] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[11:52:02] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[11:52:02] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[11:52:02] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[11:52:02] *** Joins: hays (rootvegeta@fsf/member/hays)
[11:52:02] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[11:52:02] *** Joins: yushyin (UhIHx5Z1ii@mail.karif.server-speed.net)
[11:52:02] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[11:52:02] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[11:52:02] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[11:52:02] *** Joins: leah2 (~leah@vuxu.org)
[11:52:02] *** Joins: tolt (~weechat-h@li219-154.members.linode.com)
[11:52:02] *** Joins: rembo10 (~rembo10@remulis.com)
[11:52:02] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[11:52:02] *** Joins: lechner (~lechner@debian/lechner)
[11:52:02] *** Joins: unyu (~pyon@user/pyon)
[11:52:02] *** Joins: bsima (~bsima@2604:a880:400:d0::19f1:7001)
[11:52:02] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[11:52:02] *** Joins: kmein (~weechat@user/kmein)
[11:52:02] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:52:02] *** Joins: matijja (~matijja@193.77.181.201)
[11:52:02] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[11:52:02] *** Joins: drdo (~drdo@144.172.69.89)
[11:52:02] *** Joins: duckonomy (~duckonomy@177.ip-144-217-84.net)
[11:52:02] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[11:52:02] *** Joins: ChanServ (ChanServ@services.libera.chat)
[11:52:02] *** molybdenum.libera.chat sets mode: +o ChanServ
[11:52:09] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:52:53] *** Quits: litharge (litharge@libera/bot/litharge) (Remote host closed the connection)
[11:52:55] *** Joins: litharge (litharge@libera/bot/litharge)
[11:54:55] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:55:53] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:58:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:58:12] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:00:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:03:10] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[12:03:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:09:47] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[12:10:16] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[12:11:31] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[12:14:47] *** Joins: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl)
[12:16:55] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[12:22:34] *** Joins: nhatanh02 (~satori@123.24.172.30)
[12:24:00] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[12:24:11] *** Joins: Topsi (~Tobias@dyndsl-095-033-093-212.ewe-ip-backbone.de)
[12:24:43] *** Joins: chele (~chele@user/chele)
[12:24:53] *** Joins: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[12:24:53] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[12:25:18] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[12:26:22] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:31:30] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[12:37:50] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:38:09] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:39:06] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[12:39:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:41:08] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl)
[12:43:25] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[12:47:36] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:39] *** allbery_b is now known as geekosaur
[12:51:52] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:15fa:c22e:b1fb:575a) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:02:25] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:03:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:04:45] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Quit: Leaving)
[13:06:32] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:14:41] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:19:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[13:24:00] *** Joins: __monty__ (~toonn@user/toonn)
[13:25:30] *** Quits: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:25:30] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:29:24] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[13:32:07] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:ede2:45ee:21e7:7941)
[13:33:55] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[13:36:40] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[13:38:18] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[13:42:11] *** Quits: xff0x (~xff0x@port-92-193-159-86.dynamic.as20676.net) (Ping timeout: 256 seconds)
[13:42:16] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[13:44:22] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[13:47:31] *** Joins: xff0x (~xff0x@2001:1a81:5310:700:f0a4:a961:9964:1b51)
[13:48:39] *** Quits: dyniec (~dyniec@mail.dybiec.info) (Quit: WeeChat 3.0)
[13:51:11] *** Joins: dyniec (~dyniec@mail.dybiec.info)
[13:58:56] *** Joins: juhp (~juhp@128.106.188.82)
[14:00:06] *** Quits: yauhsien_ (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:00:46] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[14:03:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:06:42] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:22] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:08:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:08:35] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[14:08:44] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[14:08:45] *** Joins: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de)
[14:22:20] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:24:57] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[14:25:26] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[14:36:21] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:37:01] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[14:41:36] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d)
[14:43:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:46:51] *** Quits: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:47:38] *** Joins: yauhsien (~yauhsien@118-167-43-90.dynamic-ip.hinet.net)
[14:50:26] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[14:55:22] *** Joins: max22- (~maxime@2a01cb088335980038ab69ec4eae31f4.ipv6.abo.wanadoo.fr)
[15:06:29] *** Joins: ubert (~Thunderbi@p200300ecdf0994f82db7d35c756e5286.dip0.t-ipconnect.de)
[15:09:25] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:11:42] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[15:14:45] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[15:18:09] *** Quits: max22- (~maxime@2a01cb088335980038ab69ec4eae31f4.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[15:26:02] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[15:30:17] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[15:32:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[15:37:16] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994f8385203c98e392e3c.dip0.t-ipconnect.de)
[15:41:32] <Benzi-Junior> hey, I'm having trouble with stack, and I think the documentation is out of date
[15:42:11] <Benzi-Junior> I have a file Foo.hs in src and stack finds it but doesn't expose the module 
[15:42:38] <Benzi-Junior> i.e. it puts it under "other modules" 
[15:43:00] <Benzi-Junior> the documentation says I should edit the .cabal file 
[15:43:02] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[15:43:13] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[15:43:34] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:43:45] <polyphem> stack uses <project>.cabal to build, you have to add Foo.hs in .cabal under executable/library stanza under exposed modules
[15:43:53] <Benzi-Junior> but as far as I can tell, stack nowadays writes the .cabal file before doing anything with it
[15:46:19] <polyphem> stack generates a <project>.cabal file with only standard Main.hs and MyLib.hs files, you have to add your files manually
[15:47:14] <Benzi-Junior> polyphem, I tried editing the .cabal file but when I run "stack build" it stack writes over it 
[15:47:15] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[15:47:39] <polyphem> what ?
[15:48:10] <yushyin> do you maybe have a package.yaml hpack file?
[15:48:26] <polyphem> haven't seen this behavior of stack
[15:49:03] <Benzi-Junior> yushyin, yes,
[15:49:21] <Benzi-Junior> polyphem, it's something that changed a while back
[15:49:31] <Benzi-Junior> polyphem, it's been bothering me ever since
[15:49:55] <yushyin> yeah, i guess stack uses hpack to generate your cabal file from the package.yaml
[15:50:22] <polyphem> yushyin, Benzi-Junior : this has to to with hpack , right , stack alone wouldnt overwrite its .cabal file
[15:50:37] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[15:51:01] *** Quits: acidjnk (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:51:01] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e945c697a298a149d84.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:51:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[15:52:31] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 256 seconds)
[15:53:50] <polyphem> Benzi-Junior: when you stack init , do you give a project template ?
[15:54:11] <Benzi-Junior> polyphem, no
[15:55:30] <yushyin> edit package.yaml to your needs
[15:56:13] <polyphem> how , yushyin  said  if you have package.yaml from hpack it will generate your .cabal from it, why you have hpack in the first place ? Do you need it ? 
[15:56:36] <Benzi-Junior> yushyin, "rm package.yaml" 
[15:56:37] <polyphem> yushyin: is hpack standard with stack now ?
[15:57:22] <yushyin> dunno, i don't use stack
[15:59:28] <polyphem> i have latest stack : Version 2.7.3, Git revision 7927a3aec32e2b2e5e4fb5be76d0d50eddcc197f x86_64 hpack-0.34.4 on debian, and it does not create package.yaml/uses hpack for my projects !?
[16:02:41] <yushyin> polyphem: 'Since Stack 1.6.1, the package.yaml is the preferred package format that is provided built-in by stack through the hpack tool. The default behaviour is to generate the .cabal file from this package.yaml, and accordingly you should not modify the .cabal file.' -- https://docs.haskellstack.org/en/stable/GUIDE/#stacks-functions
[16:06:04] <polyphem> i have never seen an hpack/package.yaml in one of my projects !?
[16:08:31] <polyphem> what are you using yushyin ? plain cabal ? or nix ?
[16:09:07] <yushyin> ghcup+cabal
[16:09:40] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[16:11:04] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:11:10] *** Joins: alx741 (~alx741@157.100.93.160)
[16:11:16] <polyphem> usually, i start with cabal init -i , then later i switch to stack with stack new , maybe stack sees my .cabal and in order to not overwrite it , doesnt generate package.yaml/juses hpack ... , maybe
[16:11:49] <yushyin> maybe
[16:11:54] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:254c:b3ad:2ae7:82d7)
[16:13:19] <maerwald> trash package.yaml
[16:13:39] <polyphem> Benzi-Junior: if your project is relativly fresh , only that foo.hs , try to rm all stack artifacts , then do cabal init -i (interactive) to generate your initial cabal file and then run stack new  , that might work out not having to deal with hpack/package.yaml
[16:13:42] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[16:13:57] *** Quits: vglfr (~vglfr@88.155.96.35) (Read error: Connection reset by peer)
[16:14:37] <polyphem> i like stacks support for different resolvers/ghc versions , and externel packages and git source packages
[16:15:00] *** Joins: vglfr (~vglfr@88.155.96.35)
[16:16:11] <polyphem> havent had the need to tryout ghcup 
[16:16:37] <yushyin> https://cabal.readthedocs.io/en/3.6/cabal-project.html#specifying-the-local-packages
[16:16:46] <yushyin> https://cabal.readthedocs.io/en/3.6/cabal-project.html#specifying-packages-from-remote-version-control-locations
[16:17:17] <maerwald> stack doesn't have any significant feature that you can't have in cabal... it's just a different usability approach
[16:17:45] <polyphem> yushyin: i erelativly often end up in a cabal state where it cant resolve dependencies , then i switch to stack
[16:19:18] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:19:59] <polyphem> maerwald: yeah , i know cabal stepped up quite a bit , still i sometimes use stack sometimes only cabal , but cabal uses systeminstallation of ghc, and debian usually is not uptodate
[16:20:09] <yushyin> if you really wanted to, you could use the constraints file from stackage e.g. https://www.stackage.org/lts-18.21/cabal.config
[16:20:21] <maerwald> polyphem: then use ghcup to install a recent GHC
[16:20:29] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:20:29] <yushyin> cabal can use any ghc you like
[16:20:49] <yushyin> and ghcup makes it easy to install many ghcs
[16:21:03] <polyphem> when i need some new ghc feature that debian doesnt have yet , i switch to stack and an different resolver
[16:21:13] <maerwald> sound complicated
[16:22:25] <polyphem> hmm , at least i do not have to learn yeat another tool, no offence against ghcup , havent used it once  
[16:23:19] <maerwald> there's no learning curve
[16:23:28] <polyphem> but fp is flatly focusing more and more towards rust, dont they? wonder how long they will continue  stack anyway
[16:23:39] <maerwald> stack is already abandoned by fp
[16:24:02] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[16:24:12] <maerwald> https://www.snoyman.com/blog/babies-oss-maintenance/
[16:24:20] <polyphem> maerwald: oh, is it ?
[16:24:55] <yushyin> polyphem: in my experience haskell package from linux distributions are not for development, thus i use ghcup. i usually end up with many ghcs anyway so why bother with the ghc from the distribution
[16:25:22] <yushyin> IMO ;)
[16:25:24] *** Joins: alx741 (~alx741@157.100.93.160)
[16:27:47] <polyphem> maerwald: i see
[16:29:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:29:33] <polyphem> so ghcup installs different ghc versions per user or system wide , do i have to bend my links aka update-aletrnatives on debian ? ist it also managing cabal versions ?
[16:30:01] <maerwald> polyphem: ghcup installs into ~/.ghcup only and requires that you add ~/.ghcup/bin to PATH
[16:30:14] <maerwald> so you just prepend it to your path
[16:30:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:31:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687)
[16:31:40] <polyphem> maerwald: and ghc is to be fully quallified then like ghc-9.xy right or has ghcup like a subcomand to specifie wich ghc version ghc points to ?
[16:32:29] *** Joins: alx741 (~alx741@157.100.93.160)
[16:32:33] <maerwald> polyphem: yes, it allows to set the default ghc symlinks
[16:32:58] <polyphem> oh cool , what about cabal versions, same there ?
[16:33:25] <maerwald> https://www.haskell.org/ghcup/about/#how
[16:33:31] <maerwald> it's all in the documentation
[16:34:16] <polyphem> sure , will have a look then to check it out , youre the author right ?
[16:36:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[16:39:02] <maerwald> yes
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:39:45] <polyphem> maerwald: thank you
[16:40:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:40:48] *** Joins: alx741 (~alx741@157.100.93.160)
[16:42:18] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:42:41] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[16:43:05] *** Joins: Guest17 (~Guest17@wificampus-097061.grenet.fr)
[16:43:49] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[16:44:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:45:47] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (Ping timeout: 256 seconds)
[16:46:34] *** Joins: alx741 (~alx741@157.100.93.160)
[16:47:25] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Ping timeout: 240 seconds)
[16:47:28] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[16:47:58] *** Joins: slack1256 (~slack1256@191.125.99.214)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:50:37] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:51:07] *** Joins: alx741 (~alx741@157.100.93.160)
[16:51:59] <janus> does anyone use tzdata? i want to make a game plan to make sure it is updated (maybe taken over) before daylight saving is due
[16:52:42] <janus> because the trustee guidelines say there must be a waiting period of 6 weeks, and daylight savings is due in ~24 weeks we may as well start planning now
[16:52:58] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:53:34] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:55:52] <polyphem> SPJ said in a talk , they released a ghc version wich wen you had a type error would delete your source file , who got hit by that ?
[16:56:42] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:254c:b3ad:2ae7:82d7) (Remote host closed the connection)
[16:58:02] <fizbin> Hey, when doing advent-of-code last month, on one of the days I came up with this: https://paste.tomsmeding.com/DuK1vFhS -- I know I've seen something like it somewhere before, but can't remember the name. Anyone else know the thing I'm thinking of?
[16:59:17] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:59:43] *** Joins: max22- (~maxime@2a01cb0883359800f3dd99e96a376ecf.ipv6.abo.wanadoo.fr)
[17:00:11] <[exa]> fizbin: looks bifunctorish or arrowish
[17:00:36] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:01:53] *** Joins: alx741 (~alx741@157.100.93.160)
[17:02:01] <[exa]> and the actual type Both might be defined somewhere, perhaps in the vicinity of `Solo`
[17:02:08] <geekosaur> polyphem, https://gitlab.haskell.org/ghc/ghc/-/issues/163
[17:02:26] *** Quits: Guest17 (~Guest17@wificampus-097061.grenet.fr) (Quit: Client closed)
[17:03:32] <polyphem> geekosaur: hahaha
[17:04:56] <polyphem> when creating a library , is it idiomatic to start with typeclasses that cork together and have differerent implementations  for different backends ?
[17:05:08] <polyphem> s/cork/work/
[17:05:08] *** Quits: alx741 (~alx741@157.100.93.160) (Client Quit)
[17:05:52] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl)
[17:06:58] <fizbin> [exa], The only pre-existing thing I can find called Both is in the both library, where it's just Maybe with a different Semigroup instance.
[17:07:19] <polyphem> or does it scare users away if they have to write instances for their type to use that library ?
[17:09:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Remote host closed the connection)
[17:09:32] <[exa]> fizbin: perhaps https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Functor-Product.html#t:Product ?
[17:09:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[17:09:57] <[exa]> (tried an oldschool search for 'pair' :D )
[17:12:37] <fizbin> [exa], Yeah, that looks like it. I suspect that before I had seen this as :*: in GHC.Generics or the functor-combinators library.
[17:12:50] <polyphem> fizbin: i was latly thinking about parallel composition as contrasted to Compose serial functor composition
[17:14:05] <fizbin> polyphem, you mean like the difference between (&&&) and (>>>) ?
[17:14:16] *** Quits: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[17:14:49] <polyphem> yeah , but (&&&) works on functions , or does it work also for functors
[17:14:55] <fizbin> I mean, in advent-of-code I just used Both for Both Min Max on day 24.
[17:15:15] <fizbin> polyphem: functions only. It's the wrong kind to work on functors.
[17:15:59] <polyphem> what about n-ary parallel composition , instead of pairing , like mappending multiple functors parallelly so noth Both but Many
[17:16:29] <polyphem> i like your Both class
[17:16:59] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:17:27] <fizbin> Well, as [exa] found it's just a restatement of Data.Functor.Product.Product
[17:19:58] <geekosaur> 162 was also some poor soul who discovered it in ghci
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:22:46] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[17:24:33] <polyphem> geekosaur: its not funny when it hapens to you, afterall
[17:25:02] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:29:12] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:29:16] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[17:30:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:32:28] <Benzi-Junior> I have a type "Foo b a" and have been asked to provide an instance for "Applicative (Foo b)" and quite frankly I'm at a loss, there is no restriction on the type b
[17:34:20] *** Joins: cfricke (~cfricke@user/cfricke)
[17:36:18] <geekosaur> there's no restriction on ExceptT e, either
[17:38:16] *** Quits: slack1256 (~slack1256@191.125.99.214) (Remote host closed the connection)
[17:39:29] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:40:08] <geekosaur> start by writing a Functor instance, then write `pure` for it
[17:40:43] *** Joins: matrox (~bc8147f2@cerf.good1.com)
[17:40:46] <geekosaur> this should give you enough of a feel for it that you can write <*>
[17:42:53] <hud> Hi trying to turn a function that takes two arguments and returns some operation into a bytecode stack, I understand from sample-code how to generate bytecode for mathematical ops, but what about defining variables and returning values? https://paste.tomsmeding.com/RNK6Qv6Q
[17:43:16] <Benzi-Junior> geekosaur, I have the functor instance, and actually  <*> as well, the issue I'm having is how to write pure
[17:44:23] *** Joins: notzmv (~zmv@user/notzmv)
[17:46:51] <polyphem> installed ghcup and latest ghc , now warp doesnt compile anymore with this error , any suggestions : https://paste.tomsmeding.com/CBI6zmW6
[17:48:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[17:48:43] *** Joins: shapr (~user@2601:7c0:c202:5190:b29e:1cbf:e21f:c653)
[17:48:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:48:56] <jneira[m]> maybe the package does not support ghc-9.2.1 yet
[17:49:17] <jneira[m]> did you get to build it with ghc-9.2.1 at some point?
[17:50:09] <geekosaur> try head.hackage? that looks consistent with the changes in 9.2.1
[17:50:20] <polyphem> jneira[m]: yea, but this error is about primitive types , that would affect a lot of packages , right , is there such a big breaking api change
[17:50:32] <geekosaur> yes, because of Apple
[17:50:38] <polyphem> geekosaur: how so ?
[17:50:59] <polyphem> as a version constraint in cabal file ?
[17:51:00] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[17:51:09] <geekosaur> ghc used to treat all sized types internally as full CPU words. but the M1 requires all types to be their correct native sizes
[17:51:10] *** Joins: cfricke (~cfricke@user/cfricke)
[17:51:15] <geekosaur> in its ABI
[17:51:38] <geekosaur> so Woord8# is actually 8 bits, and ghc can't get away with tossing around Word#s for them any more
[17:51:39] <Benzi-Junior> I feel like I'm missing some key insight, there is no way to default on the type "b" but I need to have "pure :: a -> Foo b a"
[17:51:49] <jneira[m]> the error looks similar to https://github.com/yesodweb/wai/issues/867
[17:52:11] <jneira[m]> oops already linked
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:08] <geekosaur> and yes, it causes a fair amount of breakage, but not as much as you might think because it's transparent if you're not actually operating on MagicHash-ed types
[17:53:29] *** Joins: xsperry (~xs@user/xsperry)
[17:53:39] <polyphem> geekosaur: how do i use the head.hackage , what do y you mean by that ?
[17:53:51] <lortabac> Benzi-Junior: can you share the definition of Foo?
[17:54:06] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:54:07] <geekosaur> http://head.hackage.haskell.org/
[17:54:21] <geekosaur> has a snippet for adding the repository to a cabal file
[17:54:36] <geekosaur> this repo is just patches to hackage packages to support 9.2.1 and HEAD
[17:54:39] <jneira[m]> yeah only a relative small number of packages deal directly with primitive types (and some of them are boot libs)
[17:55:14] <polyphem> .cabal or cabal.project ?
[17:55:27] <geekosaur> I think either
[17:55:38] <polyphem> geekosaur: will try
[17:56:26] <geekosaur> Benzi-Junior, there's an obvious way to deal if it's an Either-like type. if it's not, you need to state the problem (I presume this is homework and/or an exercise from the web) in more detail
[17:59:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:59:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:59:50] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:18] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[18:01:33] <geekosaur> also I think a lot of package maintainers are waiting for 9.2.2 to drop later this month before adding support for it
[18:01:42] <geekosaur> especially so soon after 9.0.2
[18:02:34] <geekosaur> (and even more espeically since that dropped on Christmas so I bet a lot of maintainers didn't even get to look at it until January 3 or so)
[18:03:35] <Benzi-Junior> geekosaur, "Foo b a" should be a messaging agent that sends and receives messages of type "b" and at the end of communications should return a type "a" 
[18:04:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:04:10] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[18:04:48] <polyphem> warp works now , but now ther is this error https://paste.tomsmeding.com/k5mVUVO8 ; guess if have to stap back from latest and go to 9.0.2 with older base , no problem thanks to ghcup :)
[18:05:49] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[18:06:19] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[18:06:24] <yushyin> i guess 8.10.7 is still the recommended ghc for a reason ^^
[18:07:50] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:08:56] <Hecate> yes it is
[18:09:07] <Hecate> 9.0 should be more advertised as a dev preview imo
[18:09:59] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[18:10:15] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[18:16:35] <jneira[m]> and 9.2 to live in the bleeding edge 😜
[18:16:50] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:17:54] <geekosaur> 9.0.2 seems fine. 9.2.1 seems the dev preview
[18:17:54] *** Quits: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506) (Read error: Connection reset by peer)
[18:18:22] <geekosaur> (arguably all x.y.1 releases are dev previews, but that's more or less true of every piece of software :)
[18:22:04] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[18:24:06] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:24:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[18:28:50] <janus> the next stackage nightly will have 9.0.2! yaay
[18:32:07] <matrox> 9.0.2, not 9.2.1?
[18:33:29] <geekosaur> still too early for 9.2.1
[18:33:48] <geekosaur> and it's been stuck on 9.0.1 for a couple months now, waiting for 9.0.2 to drop
[18:34:30] <geekosaur> hopefully this means we will rapidly progress to having a useful 9.0.2 ecosystem
[18:34:55] *** Joins: xkuru (~xkuru@user/xkuru)
[18:35:08] <geekosaur> the earliest 9.2.x I would expect them to support is 9.2.2, scheduled for later this month
[18:35:31] *** Quits: max22- (~maxime@2a01cb0883359800f3dd99e96a376ecf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:35:40] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d171:6c14:e395:f91b)
[18:35:41] <geekosaur> but various maintainers are moving slowly enough that I thing even 9.0.2 will be pushing things a bit
[18:35:42] *** Joins: max22- (~maxime@2a01cb0883359800f3dd99e96a376ecf.ipv6.abo.wanadoo.fr)
[18:35:46] <geekosaur> *think
[18:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:37:01] <yushyin> ghc9.2.1 is no fun without hls :/
[18:37:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[18:39:07] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[18:41:45] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 250 seconds)
[18:44:54] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[18:46:21] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[18:48:04] <jneira[m]> we are on it 😅
[18:54:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[18:56:37] *** Quits: razetime (~quassel@49.207.213.63) (Ping timeout: 240 seconds)
[19:01:31] *** Joins: nhatanh02 (~satori@123.24.172.30)
[19:02:12] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[19:05:42] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[19:06:16] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[19:06:20] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[19:10:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:11:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:11:00] *** Joins: wroathe (~wroathe@user/wroathe)
[19:16:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:19:41] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[19:26:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:33:42] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:34:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:34:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:34:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:34:58] *** Joins: wroathe (~wroathe@user/wroathe)
[19:39:15] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[19:39:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:40:09] <polyphem> geekosaur: stack is discontinued but stackage is still maintained ?
[19:40:19] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:40:38] <geekosaur> stack is not discontinued, it is community-maintained instead of being an fpco "product"
[19:40:53] <polyphem> ah ,ok
[19:44:14] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[19:47:28] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:48:32] *** Joins: a6a45081-2b83 (~aditya@pal-210-106-57.itap.purdue.edu)
[19:55:59] <tomsmeding> my mind made a little jump at reading "stack is discontinued", half the haskell community would be in a frenzy
[19:56:29] <tomsmeding> never mind half, the whole haskell community -- the other half would just be gleeful instead of panicking
[19:57:39] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb)
[19:58:00] <Taneb> I'm sure there's a handful of people out there who think "cabal? stack? Why would I need something like that, when there's wget and make"
[19:59:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:59:48] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[19:59:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:00:01] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c274:f734:3361:cf1c) (Quit: WeeChat 2.8)
[20:01:31] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:02:44] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:03:07] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:03:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:06:31] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Quit: Leaving)
[20:10:30] <tomsmeding> I mean, I made do with just make (without wget) for AOC, but that's hardly a production codebase
[20:10:31] *** Joins: Everything (~Everythin@37.115.210.35)
[20:10:49] <polyphem> tomsmeding: sorry for the shocks
[20:13:56] <mjrosenb> I've yet to understand stack, and in general hate the idea of languages having their own package managers, so am 100% fine with this.
[20:15:03] <geekosaur> even C sort-of has one these days (pkgconfig)
[20:15:33] <geekosaur> libraries get ever more complex and just chucking a -lfoo on the end of a link command increasingly doesn't work
[20:15:44] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:18:50] <dolio> Stack and cabal aren't package managers.
[20:19:08] <mjrosenb> pkgconfig is just a database that your one true package manager should be calling to update, like ghc-pkg
[20:19:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[20:21:48] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:24:00] <mjrosenb> dolio: it may not be a package manager, but I'm pretty sure a package manager should be able to do everything that stack does, so whether it is or it sin't becomes a moot point.
[20:25:53] <geekosaur> package managers should be able to do more than stack or cabal do
[20:26:01] <geekosaur> try removing a package with either
[20:26:11] <geekosaur> they're build managers
[20:26:30] *** Quits: a6a45081-2b83 (~aditya@pal-210-106-57.itap.purdue.edu) (Remote host closed the connection)
[20:26:53] <dolio> Well, that seems like an odd expectation to me. Package managers are built as infrastructure for (un)installing pre-built software for users. They're not build tools for programmers.
[20:27:30] <janus> can you remove a nix package? you just remove your dependency on it. with cabal it works the same way, no? so if cabal isn't a package manager, isn't nix one either?
[20:28:19] <geekosaur> many people use nix as a build manager instead of a package manager, yes. one could even argue that nixos is taking the path of abusing a build manager as a package manager\
[20:28:34] <geekosaur> how often do you have to "gc" your package manager?
[20:28:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:29:03] <mjrosenb> dunno, apt tells me there are lots of pacakges that it can uninstall pretty frequently.
[20:29:45] <mjrosenb> there's even a flag that collects garbage, but they call it 'autoremove' or some such.
[20:29:46] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[20:30:39] <mjrosenb> but in order to be able to build C programs, you normally need the -dev version of a library to be installed via apt
[20:30:57] <mjrosenb> or in gentoo, you just need the library present in order to get the necessary header files.
[20:32:04] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:90ce:993d:d223:5eab)
[20:33:32] <janus> another gc for dpkg is called deborphan. there is also debfoster which is semi-automatic, asks you for every 'root' whether the whole tree can be uninstalled or pruned
[20:34:10] <mjrosenb> portage also has a GC built in, and recommends that you run it semi-frequently.
[20:34:27] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:34:29] <janus> i run deborphan typically after each OS version upgrade since you'll have libraries laying around that autoremove somehow didn't pick up on
[20:34:36] *** Joins: k`` (~user@152.1.137.158)
[20:35:46] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[20:36:52] <sclv> i think if cabal-install ever gets the proper gc feature that mirrors that in nix, tracking roots, etc, then it'll be fair to call it a package manager
[20:36:59] <sclv> until then its a build system, which is fine
[20:37:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:37:04] <sclv> that's what developers need :-P
[20:38:05] <k``> Is there a way to dispatch on whether there's an in-scope constraint? Like `case ifConstraint (Proxy (Show a)) of{ True -> show ; False -> \_-> "unshowable" }` ?
[20:38:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:38:57] <geekosaur> there are ways but they're ugly and not something you should rely upon
[20:39:01] <k``> or like `case maybeContext (Proxy (Show a)) of { Just Dict -> show ; Nothing -> "unshowable" }` ?
[20:40:17] <k``> That's a shame.
[20:40:57] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:41:38] <k``> I understand that you can't get proof that you don't have an instance globally, but it would be nice to determine whether there's one in scope
[20:41:55] <mjrosenb> would `class MaybeShow a where mshow :: Maybe (a -> String); instance Show a => MaybeShow where mshow = Just show; instance MaybeShow a where mshow = Nothing` work
[20:42:03] <mjrosenb> with some level of undecidable instances?
[20:42:24] <mjrosenb> like it would be perfectly reasonable for ghc to always choose the Nothing instance, but *shrug*
[20:42:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:42:41] <k``> mjrosenb: When I've tried to create instances like that, GHC has complained that they are not just overlapping but identical, and refused to allow them.
[20:42:49] <mjrosenb> hah.
[20:43:00] <k``> Which, fair enough.
[20:43:02] <geekosaur> right, constraints don't take part in instance selection
[20:43:10] <mjrosenb> makes sense, since they're both more or less global.
[20:44:17] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[20:46:46] <geekosaur> https://hackage.haskell.org/package/ifcxt
[20:47:09] <geekosaur> whether it works with recent ghc is a question, since this seems like it's skating on very thin ice
[20:47:28] <polyphem> do you have to Data.Typable.cast to a concrete type or can you cast to an constrained polymorphic type ? 
[20:47:34] <k``> Yeah, from the one issue it seems abandoned.
[20:48:08] <geekosaur> I thought there was anothjer one but I can't find it :(
[20:48:50] <mjrosenb> https://i.imgur.com/9f8x6MF.mp4 
[20:49:29] <geekosaur> polyphem, pretty sure Typeable only does concrete types
[20:49:50] <geekosaur> but these days it is based on something that can do indexed types, I think?
[20:50:16] <polyphem> latest ghc has support for impredicativity , does that change somthing
[20:50:52] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/libraries/base-4.16.0.0/Type-Reflection.html
[20:51:51] <geekosaur> no, impredicativity doesn't change anything, Typeable is just too simple to handle anything but concrete types. see the module I just pointed to for the indexed version, it might do what you want
[20:53:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[20:55:57] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:90ce:993d:d223:5eab) (Remote host closed the connection)
[20:56:52] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5507:3283:c612:c744)
[20:57:25] *** Joins: pgib (~textual@173.38.117.74)
[20:59:57] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[21:01:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:02:15] *** Joins: sander (~sander@user/sander)
[21:05:33] *** Joins: husixu (~husixu@137.132.119.2)
[21:10:17] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[21:12:31] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[21:14:56] <k``> It is possible to do something like `foo :: proxy c -> Maybe (Dict c) ; foo = Nothing ; {-# RULES "c" forall (p :: c => proxy c). foo p = Just Dict #-}` -- but as far as I can tell, the rule never fires...
[21:14:57] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:16:20] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:18:56] <[itchyjunk]> Are list comprehensions always a syntactic sugar for some other thing?
[21:19:31] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[21:20:34] <geekosaur> yes
[21:20:36] <[exa]> [itchyjunk]: they can be translated to list monads and `guard` and AFAIK there's even extension to allow the same for anything that allows these two
[21:21:02] <tomsmeding> % :set -XMonadComprehensions
[21:21:03] <yahb> tomsmeding: 
[21:21:07] <[itchyjunk]> ah
[21:21:10] <geekosaur> they also can be translated to map and filter, although I think modern ghc always uses the list (or other) monad
[21:21:40] <geekosaur> @undo [ f x | x <- xs, bar x ]
[21:21:40] <lambdabot> concatMap (\ x -> if bar x then [f x] else []) xs
[21:21:40] <tomsmeding> running `ghc -ddump-simpl` without optimisations on a file containing a list comprehension just gives me a plain-old recursive function
[21:22:11] <tomsmeding> so I guess you could say they just desugar to a normal recursive implementation?
[21:22:45] <[itchyjunk]> I think there is a very minor error here : https://wiki.haskell.org/List_comprehension
[21:22:49] <[itchyjunk]> "In the #haskell channel, or in a private message, say @undo and then your list comprehension, it will should you how it expands:"
[21:23:00] <[itchyjunk]> it will show you or it should show you, right?
[21:23:14] <geekosaur> I did that just above
[21:23:33] <tomsmeding> it will should be incorrect English indeed
[21:23:43] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:23:43] <bjs> I recall from my old supervisor hearing of discussions early on about making comprehensions be generic over Monad
[21:23:45] <geekosaur> will show, I think
[21:24:01] <[itchyjunk]> so s/should/show/
[21:24:13] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:24:45] <tomsmeding> % [x | x <- Just 42, y <- Nothing]
[21:24:46] <yahb> tomsmeding: Nothing
[21:24:49] <tomsmeding> % [x | x <- Just 42]
[21:24:49] <yahb> tomsmeding: Just 42
[21:24:56] <[itchyjunk]> Needs verified account so some of you should fix it? :x
[21:26:13] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:26:14] <geekosaur> done
[21:26:26] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Ping timeout: 256 seconds)
[21:26:41] <[itchyjunk]> \o/
[21:29:27] *** Joins: benin (~benin@183.82.176.241)
[21:30:25] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:30:37] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Ping timeout: 240 seconds)
[21:30:42] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[21:30:45] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:80ee:56b1:c7cc:d16d)
[21:30:46] *** infinity0_ is now known as infinity0
[21:31:32] *** Quits: raoul (~raoul@95.179.203.88) (Ping timeout: 240 seconds)
[21:32:22] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:ede2:45ee:21e7:7941) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:32:39] *** Quits: max22- (~maxime@2a01cb0883359800f3dd99e96a376ecf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[21:33:33] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[21:35:58] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:36:56] *** Joins: mbuf (~Shakthi@182.77.103.82)
[21:38:14] *** Quits: xff0x (~xff0x@2001:1a81:5310:700:f0a4:a961:9964:1b51) (Ping timeout: 252 seconds)
[21:40:19] <[itchyjunk]> So it says some consider list comphrension unnecessary now because of "list monad" and it gives examples
[21:40:29] <[itchyjunk]> but what part of that code is the "list monad" ?
[21:40:46] <[itchyjunk]> Example : do c <- s return (toUpper c)
[21:40:50] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[21:40:52] <[itchyjunk]> the whole thing is a monad?
[21:41:22] <[itchyjunk]> https://wiki.haskell.org/List_comprehension#List_monad
[21:41:26] <[itchyjunk]> first example there
[21:43:29] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:43:58] <polyphem> [] a is a monad ; the effect is nondeterminism;
[21:44:21] <[itchyjunk]> hmmmmm
[21:44:22] *** Joins: vysn (~vysn@user/vysn)
[21:45:29] <polyphem> do c::Char <- s::[Char] ; return (toUpper c) == map toUpper s
[21:46:20] <polyphem> for each c in s do an operation on c and assamble a list of all transformed cs
[21:47:48] <polyphem> [c' | c <- s , let c' = toUpper c]
[21:48:16] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Read error: Connection reset by peer)
[21:49:48] <polyphem> you perform operations on a single element and the (nondeterminism effective) list monad gives you all possible solutions for all combinations
[21:51:21] <polyphem> > let go = do x <- [1..5] ; y <- [6..10] ; return (x,y) in go
[21:51:22] <lambdabot>  [(1,6),(1,7),(1,8),(1,9),(1,10),(2,6),(2,7),(2,8),(2,9),(2,10),(3,6),(3,7),(...
[21:51:25] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:51:28] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[21:51:29] <[itchyjunk]> So monads map one type to another type
[21:51:49] <[itchyjunk]> and whenever you do such things, you have to list all possible resulting types?
[21:52:07] <polyphem> you lift a type in a monad (context/effectfull computation)
[21:52:28] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d43:554e:d62c:915d)
[21:52:44] <polyphem> list monad -> nondeterminism  ==> a "lifted to" [a]
[21:52:55] <[itchyjunk]> in that go example, we go from type Int to type (Int,Int) ?
[21:53:13] <polyphem> maybe monad -> failure ==> a "lifted to" Maybe a
[21:53:15] <polyphem> ...
[21:53:21] <k``> Int to [Int].
[21:53:36] <[itchyjunk]> ahh "lift", this is category theory lingo?
[21:53:47] <xerox> gym rat lingo
[21:53:48] <polyphem> go :: [(Int,Int)]
[21:53:51] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:54:05] <[itchyjunk]> Hmm, why is it Int to [Int] and not Int to [(Int,Int)] ?
[21:54:24] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:54:53] <polyphem> [itchyjunk]: map for example "lifts" a function a -> b to a context [a] -> [b]
[21:55:19] <polyphem> go ist just [(Int,Int)]
[21:55:29] <[itchyjunk]> oh i think i kinda understand that last example
[21:55:29] <polyphem> go doesnt take a parameter
[21:55:49] <[itchyjunk]> you have a `a -> b` but after application of map, we have a `[a] -> [b]`
[21:55:55] <[itchyjunk]> so map is some type of a monad
[21:56:10] <polyphem> fmap in general "lifts" a function a->b to a functorial context f like f a -> f b
[21:56:19] <EvanR> hey, [itchyjunk] have you heard of Functors
[21:56:35] <[itchyjunk]> I've heard of them but nothing more, they are maps between categories right?
[21:56:36] <polyphem> it transforms te function to work in a enriched setting
[21:56:38] <EvanR> like, list is a functor, Maybe is a functor
[21:56:54] <geekosaur> don't worry about categories for now
[21:58:02] <EvanR> probably better to sort out the ontological status of how a type (constructor) can be a Functor, before moving to monads
[21:58:35] <EvanR> for reasons
[21:58:54] <[itchyjunk]> Hmm, and to understand how type constructors can be Functors, i need to understand why there are categories in a programming language :s
[21:59:00] <EvanR> no not really
[21:59:05] <[itchyjunk]> I can imagine all the possible types forming a category
[21:59:07] <EvanR> in haskell Functor has a more limited scope
[21:59:13] <[itchyjunk]> oh i see
[21:59:26] <monochrom> I happen to be not convinced that you should care about the "list monad" part now.
[21:59:28] <polyphem> a haskell functor is a type that has a type variable, eg. [a] (List of a) and it exists a way to modifay the inner type via fmap , eg. for list: map toUpper ['h','i'] === "HI"
[21:59:28] <k``> I may be wrong about this, but I think when folks talk about 'lifting' they usually mean types. So when you apply `[]` to `Int` you get `[Int]` -- you've 'lifted' `Int` into `[]` (which is a Monad).
[21:59:48] <[itchyjunk]> lol haskell wiki defines it as
[21:59:50] <[itchyjunk]> "The Functor typeclass represents the mathematical functor: a mapping between categories in the context of category theory."
[22:00:00] <geekosaur> there is only one category here, so all Functors are endofunctors on that category. which is why I said don't worry about categories for now
[22:00:03] <EvanR> at the same time you lift your type using F, you lift functions with fmap
[22:00:05] <monochrom> And list comprehension is hear to stay. You are not learning an obsolete construct if you learn list comprehension.
[22:00:11] <monochrom> s/hear/here/
[22:00:12] <[itchyjunk]> geekosaur, ah okay
[22:00:27] <geekosaur> (the category is Hask, the category of Haskell types ignoring bottoms)
[22:00:40] <[itchyjunk]> well, i am looking at random list comprehension articles and they all bring up list monad :x
[22:00:40] *** Joins: econo (uid147250@user/econo)
[22:00:54] <geekosaur> right, but Monad is just as limited as Functor is
[22:01:12] <monochrom> So this is the difference between educational material and everything else.
[22:01:23] <k``> #HaskIsn'tACategory
[22:01:23] <geekosaur> the concept is from CT, but you can ignore that for all practical purposes. it's just a convenient pattern
[22:01:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:01:31] <monochrom> Educational material does not sidetrack you.
[22:01:53] <monochrom> Encyclopedic material and blogs are all about sidetracking.
[22:02:04] <[itchyjunk]> lifting  reminds me of yoenda theorem or somesuch that i can't remember anymore
[22:02:23] <EvanR> really? I barely understand, mainly don't understand yoneda xD
[22:02:48] <monochrom> Clearly, the web is full of the non-educational kind.  The "clearly" can be seen once you consider the incentives for why people write and post on the Internet.
[22:02:50] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5507:3283:c612:c744) (Remote host closed the connection)
[22:02:56] <[itchyjunk]> monochrom, oh so learning list comprehension is good. got it. the "some think its irrelevent and can be replaced" part made me question it all
[22:03:05] <[itchyjunk]> EvanR, well we had to learn that theorem in algebra
[22:03:21] <EvanR> dang... your algebra class beats mine
[22:03:22] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5507:3283:c612:c744)
[22:04:06] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[22:04:21] <[itchyjunk]> I think you could figure out all mappings between rings by knowing some limited information or somesuch.. man i can't remember anything
[22:04:44] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:5507:3283:c612:c744) (Remote host closed the connection)
[22:04:45] <geekosaur> [itchyjunk], in the end I'd say list comprehensions are convenient, so there's no reason for them to go away
[22:04:55] <geekosaur> half of Haskell is such conveniences
[22:05:15] <EvanR> my score on advent of code would have been much worse without them
[22:05:15] <[itchyjunk]> true, the set builder notation is what made me think of haskell being cool at some point
[22:05:20] <shapr> has anyone used the morpheus graphql library with the github API?
[22:05:23] <geekosaur> you could write something very close to what ghc calls Core, it'd just be fairly annoying.
[22:05:34] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:5835:5767:1aa7:b5ec)
[22:05:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[22:06:02] <[itchyjunk]> yeah i saw the syntax for core.. i should really learn to read the notation for simply typed lambda calculus. last time i tried, i failed
[22:06:16] <[itchyjunk]> https://aosabook.org/en/ghc.html#s:core
[22:06:28] <[itchyjunk]> looks like hieroglyph to me
[22:07:04] <geekosaur> it's not as bad as it seems, mostly it's all the compiler-generated symbols that make it look like Greek
[22:07:16] *** Quits: mbuf (~Shakthi@182.77.103.82) (Quit: Leaving)
[22:07:16] <monochrom> I don't have data, but if you collected data, you would find that no production code actually uses the list monad way where list comprehension could be used.
[22:07:52] <monochrom> Perhaps I should go ahead and delete that false sentence on the haskell wiki.
[22:08:12] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:08:12] <geekosaur> go for it
[22:08:29] <k``> Core's prefix use of operators always gives me pause.
[22:08:45] <[itchyjunk]> well the statement says some people think that :P
[22:08:59] <[itchyjunk]> guess the "some people" is more rare than i though
[22:09:06] <monochrom> It probably was true like 20 years ago.
[22:09:29] <[itchyjunk]> Oh, the use of list comprehension grew rather than shrunk?
[22:09:34] <EvanR> back when IO was implemented as two sticks rubbing together
[22:09:36] <geekosaur> 20 years ago they thought Num was a good idea. they tought Monad not having Functor as a superclass was a good idea
[22:10:05] <monochrom> I can't say it grew. But it is the alternative that died.
[22:10:10] <k``> Firsh it shrunk, then it grew.
[22:10:16] <k``> *first
[22:11:21] <k``> Since we have MonadComprehensions again?
[22:11:44] <int-e> EvanR: [Reply] -> [Request]  is rubbing two sticks together?
[22:11:49] <monochrom> I think people don't use MonadComprehension that much either.
[22:12:00] <EvanR> yeah
[22:12:14] <polyphem> syntax got even extended some years ago , not ?, by groupings and such
[22:12:48] *** Joins: xff0x (~xff0x@2001:1a81:5310:700:f0a4:a961:9964:1b51)
[22:12:55] <int-e> I don't even use the parallel list comprehension thing, much less the weird sql-like stuff.
[22:13:22] <int-e> and I merrily mix list comprehensions and do notation when working with list
[22:13:37] *** Quits: pgib (~textual@173.38.117.74) (Ping timeout: 240 seconds)
[22:13:39] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:13:50] <int-e> (do notation looks nicer when it's several lines... oh and having the end result, you know, at the end, is a benefit too)
[22:14:53] *** Joins: pgib (~textual@173.38.117.77)
[22:16:28] <polyphem> int-e: comprehensions have a rather declarative feel as contrasted bey do's imperative feel , not ?
[22:16:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:16:49] *** Joins: jakalx (~jakalx@base.jakalx.net)
[22:16:52] <polyphem> *by*
[22:17:08] <int-e> polyphem: there is that, yeah
[22:17:24] <[itchyjunk]> I was told "imperative" language is when you tell a language what to do and so haskell is "declarative". now we have a literal "do" :D
[22:17:49] *** Quits: xff0x (~xff0x@2001:1a81:5310:700:f0a4:a961:9964:1b51) (Ping timeout: 240 seconds)
[22:18:03] <EvanR> we also have don't
[22:18:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[22:18:20] <EvanR> so that's about as anti-imperative as possible
[22:18:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:19:00] *** Joins: xff0x (~xff0x@2001:1a81:5310:700:c5b4:7757:92cc:e34)
[22:19:06] <monochrom> Haskell is somewhat declarative but not very.
[22:19:19] <polyphem> haskell is the best imprative language thanks to do notation
[22:19:47] <EvanR> haskell should decline that award
[22:20:02] <polyphem> EvanR: hehe
[22:20:21] <int-e> Ah are we making bold declarations now?
[22:20:31] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:20:56] <monochrom> Declarative is when you just say "in this graph find a node that stores an odd number" and you don't even say whether it's BFS or DFS.
[22:21:52] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:21:52] <EvanR> sqrt x = the (\y -> y * y == x)
[22:22:00] <monochrom> Yeah, like that.
[22:22:29] <monochrom> To be fair, Haskell is a bit closer to that than most languages.
[22:22:42] <dolio> So you need to move to abstract stone duality.
[22:22:49] <[itchyjunk]> Oh, i thought declarative was when you say this is a graph and this has a node that stores an odd number
[22:22:54] <[itchyjunk]> Like you declare things to be so
[22:23:11] <ephemient> https://hackage.haskell.org/package/acme-dont
[22:23:35] <int-e> . o O ( PLEASE DONT MENTION INTERCAL )
[22:23:56] <polyphem> [itchyjunk]: a list comprehension declares what the list is , wheras in de list monad yout tell how to construct the list
[22:24:24] <[itchyjunk]> hmm
[22:26:05] <int-e> polyphem: but if it were properly declaritive, the order of the items (constraints) in the list comprehension wouldn't matter...
[22:26:09] <ephemient> https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/generalised_list_comprehensions.html are not trivial to translate into list monad. not sure how often that is used though
[22:26:37] <polyphem> [itchyjunk]: the  <- in the do notation feels  more like an := in imperative languages, the <- in list comprehension resembles ∈ from math notation
[22:27:04] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[22:27:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:23] <[itchyjunk]> yes the ∈ is really nice for set builder
[22:27:25] <int-e> "declaritive" is a burned term anyway... hmm. "constraint programming" exists as an umbrella term, apparently?
[22:27:53] <[itchyjunk]> Tied to a chair while programming?
[22:28:13] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 240 seconds)
[22:28:13] <int-e> no, that would be restrained.
[22:28:13] <monochrom> you're thinking "constrained" :)
[22:28:20] <[itchyjunk]> ah
[22:29:03] <int-e> also bad for circulation
[22:29:10] <monochrom> Pleasing a static type system can also be described as "constrained".
[22:31:01] <k``> Please a dynamic type system can be described as "constrained and blindfolded".
[22:32:20] <polyphem> int-e: order matters because they are list comprehensions wich have a notion of order instead of unorderd sets
[22:32:56] <polyphem> int-e: but you are right they are not 100% declarative
[22:33:43] *** Quits: xff0x (~xff0x@2001:1a81:5310:700:c5b4:7757:92cc:e34) (Ping timeout: 268 seconds)
[22:34:03] <polyphem> int-e: but they feel more declarative then the "do list monad"
[22:34:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:34:23] *** Joins: xff0x (~xff0x@2001:1a81:5310:700:28af:ed1a:1e0a:acc)
[22:38:18] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[22:43:07] <k``> Wait, is there any point at which do notation and monad comprehension notation aren't equivalent?
[22:43:41] <dolio> Comprehensions have a built-in notation for `guard`.
[22:44:18] <geekosaur> the fancy version of comprehensions ephemient pointed out above don't translate well
[22:49:23] <monochrom> You can and need to go up to MonadPlus to match guards in list comprehension.
[22:51:20] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[22:51:45] <glguy> It's a shame guards aren't translated to fail, instead
[22:52:20] <janus> how can comprehensions translate stuff to guard if they don't require Alternative?
[22:52:32] <monochrom> Hrm, maybe fail and MonadFail suffices.
[22:53:02] <geekosaur> should be, the [] translation is just fail
[22:53:25] <glguy> (\m -> [x | x <- m, x])  :: (Monad m, GHC.Base.Alternative m) => m Bool -> m Bool
[22:53:40] <monochrom> But MonadComprehension chose MonadPlus, yeah.
[22:53:49] <glguy> So at least on ghc 9.0.1, they switched to Alternative
[22:53:54] <monochrom> Some kind of overkill.
[22:54:45] <monochrom> I guess I am not innocent in this, I used to tell people "use MonadPlus's guard" too, perhaps that seeded this.
[22:54:58] <glguy> janus: both do-notation and monad comprehensions only require the constraints for things you actually use in the translation
[22:55:15] <glguy> do-notation doesn't even require Monad in the trivial case
[22:55:26] <glguy> :t \m -> do m
[22:55:27] <janus> right ok. and guard can only be used with MonadComprehensions surely
[22:55:27] <lambdabot> p -> p
[22:55:45] <glguy> (\m -> [x | x <- m]) :: Monad m => m b -> m b
[22:55:52] <janus> so if i don't use that (don't think i am convinced of its utility yet), guards only appear when written
[22:56:08] <mjrosenb> ahh, monad comprehension guards, not pattern guards.  I was trying to figure out how pattern guards would translate to fail.
[22:56:09] <monochrom> Right.
[22:56:38] <glguy> (\m -> [x | Just x <- m]) :: MonadFail m => m (Maybe b) -> m b
[22:59:11] <glguy> we can recover the MonadFail translation with some extra mess <_< (\m -> [x | x <- m, True <- pure x]) :: MonadFail m => m Bool -> m Bool
[22:59:26] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: The Lounge - https://thelounge.chat)
[22:59:44] <janus> why does the monad comprehension users guide claim that 'guard' requires MonadPlus? https://downloads.haskell.org/ghc/8.10.7/docs/html/users_guide/glasgow_exts.html#monad-comprehensions
[22:59:59] <janus> we just saw above that Alternative is sufficeint
[23:00:00] <glguy> janus: because it used ot
[23:00:06] <glguy> to*
[23:00:08] <janus> so the docs are just outdated?
[23:00:25] <glguy> Applicative and Alternative were late additions
[23:01:02] <janus> i am a late addition :O
[23:02:22] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[23:02:22] <monochrom> You are looking at the doc for 8.10.7.
[23:02:44] <monochrom> The doc for 8.10.7 is, clearly, not outdated wrt 8.10.7 itself.
[23:02:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:02:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:02:52] *** Joins: wroathe (~wroathe@user/wroathe)
[23:03:26] <janus> Alternative existed in 8.10's base. and even in ghc master this is the wording
[23:03:52] <monochrom> Oh oops the doc is outdated wrt the actual compiler.
[23:04:17] <janus> i dunno when exactly it could type as Alternative instead of MonadPlus or if it just looks at the signature of 'guard'. either way seems like a bug
[23:05:07] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:05:39] <monochrom> The type of guard also says Alternative.
[23:06:11] <monochrom> Oh well social constructs need social maintenance.
[23:06:44] <janus> seems like Alternative was added in base 4.4 (ghc 7.2.1, released in aug 2011)
[23:07:16] <EvanR> the coffee must be weak today because I can't figure out how the function passed to 2nd extend in the definition of extend for StoreT here takes 2 arguments... https://paste.tomsmeding.com/v6ZZeIid
[23:07:23] <janus> oh no, it is also in base 4.3 (ghc 7.0 from nov 2010)
[23:07:41] <EvanR> where the heck is s' coming from
[23:08:02] <EvanR> oh... b is a function type...
[23:08:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:08:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:08:35] <EvanR> 🦆
[23:08:55] <int-e> quack
[23:10:47] <janus> 'guard' was only changed to use the Alternative class in base 4.8 (ghc 7.10 from apr 2015)
[23:13:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[23:15:21] <janus> ok i made an issue it is ghc issue 20928
[23:16:26] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:19:17] *** Quits: husixu (~husixu@137.132.119.2) (Remote host closed the connection)
[23:19:46] *** Quits: d0ku (~d0ku@178.43.3.56.ipv4.supernova.orange.pl) (Ping timeout: 256 seconds)
[23:32:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:32:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:32:05] *** Joins: wroathe (~wroathe@user/wroathe)
[23:34:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:35:29] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:50] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:23] *** Quits: matrox (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[23:38:29] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-16.elisa-laajakaista.fi)
[23:38:29] *** Quits: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[23:40:17] *** Quits: shapr (~user@2601:7c0:c202:5190:b29e:1cbf:e21f:c653) (Ping timeout: 240 seconds)
[23:40:29] *** Joins: aforemny (~aforemny@static.248.158.34.188.clients.your-server.de)
[23:40:35] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[23:42:24] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[23:43:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:43:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:43:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:43:55] *** Joins: wroathe (~wroathe@user/wroathe)
[23:44:18] <maerwald> I'm trying to debug a program time execution with '+RTS -p -l-au', but the callstack depth is main -> somefunc and it stops after that
[23:46:49] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[23:47:32] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[23:48:22] <maerwald> I guess excessive inlining can do that?
[23:48:57] *** Joins: vysn (~vysn@user/vysn)
[23:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:55:17] <byorgey> anyone aware of algorithms for solving sets inequalities over a free idempotent commutative monoid?  i.e. imagine you have a bunch of constraints, where each constraint is of the form U1 \subseteq U2, and the U's are arbitrary finite unions of variables and constants
[23:56:17] <byorgey> so e.g. you might have  x `union` C `union` D \subseteq y `union` z `union` F  and so on.  And you want to find some solution for the variables, ideally some kind of 'least' solution, identifying each variable with a set of constants
[23:56:47] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:56:52] <byorgey> I guess I can probably work it out but just thought I'd ask in case anyone has seen anything like this before.
