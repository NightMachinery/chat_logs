[00:00:53] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[00:01:42] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[00:01:42] *** Joins: menace (~someone@user/menace)
[00:01:53] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[00:05:15] *** Quits: st3fan (sid43079@lymington.irccloud.com) (Ping timeout: 268 seconds)
[00:06:19] *** Joins: st3fan (sid43079@lymington.irccloud.com)
[00:06:52] <neiluj> yeah, let's think in interfaces!
[00:06:56] <neiluj> thansk
[00:13:49] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[00:13:50] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[00:15:49] *** Joins: rockyh (~rockyh@user/rockyh)
[00:19:18] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[00:19:35] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 264 seconds)
[00:20:04] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[00:20:58] *** Joins: Scarecr0w (~Scarecr0w@user/scarecr0w)
[00:21:46] *** Quits: boingolov (~nastynate@99.26.180.217) (Ping timeout: 256 seconds)
[00:24:13] *** Joins: airmailsteam (~airmailst@user/airmailsteam)
[00:24:42] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[00:26:35] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[00:29:30] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Ping timeout: 276 seconds)
[00:31:04] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[00:31:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[00:32:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:33:59] *** Joins: sheldon (~sheldon@user/sheldon)
[00:35:48] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[00:36:34] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[00:37:38] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[00:37:38] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 256 seconds)
[00:37:56] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[00:38:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:38:32] *** Joins: obviyus (sid415299@user/obviyus)
[00:38:40] *** Joins: boingolov (~nastynate@99.26.180.217)
[00:38:47] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[00:38:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:40:06] <b0nn> https://docs.aws.amazon.com/sdk-for-go/api/service/s3/ <<-- the second link in the overview is to.... this page
[00:41:32] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:43:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[00:44:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:46:16] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:48:50] *** Quits: carlavilla (~carlavill@188.26.219.172) (Ping timeout: 265 seconds)
[00:49:00] *** Joins: TDT (~TDT@20.118.225.139)
[00:49:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[00:50:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[00:50:38] *** Quits: quippy (~quippy@47-220-146-143.gtwncmkt04.res.dyn.suddenlink.net) (Quit: Leaving)
[00:50:56] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 245 seconds)
[00:51:00] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[00:51:37] *** Joins: arcanez (~arcanez@warpedreality.org)
[00:55:04] *** Joins: Atque (~Atque@user/atque)
[00:55:42] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[00:55:55] *** Joins: arcanez (~arcanez@warpedreality.org)
[00:55:56] *** Quits: arcanez (~arcanez@warpedreality.org) (Remote host closed the connection)
[00:56:10] *** Joins: arcanez (~arcanez@warpedreality.org)
[01:04:04] *** Joins: ztx (~ztx@user/ztx)
[01:13:26] *** Quits: airmailsteam (~airmailst@user/airmailsteam) (Quit: Konversation terminated!)
[01:15:36] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[01:17:00] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[01:21:30] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[01:30:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:31:14] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[01:32:11] *** Quits: Liexei (~Liexei@user/liexei) (Ping timeout: 245 seconds)
[01:36:45] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:41:40] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[01:44:21] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:48:28] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[01:49:27] *** Joins: koo5_ (~quassel@51.140.155.227)
[01:50:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[01:51:53] *** Joins: Liexei (~Liexei@user/liexei)
[01:51:55] *** Joins: fikran (~fikran@user/fikran)
[01:54:10] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (Ping timeout: 260 seconds)
[01:56:12] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[01:59:26] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[02:00:06] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:03:51] *** Quits: welt (~welt@willow.spiderden.net) (Ping timeout: 245 seconds)
[02:08:54] *** Quits: alzgh (alzgh@user/alzgh) (Remote host closed the connection)
[02:09:15] *** Joins: alzgh (alzgh@user/alzgh)
[02:11:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[02:13:27] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[02:16:16] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[02:16:19] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 265 seconds)
[02:18:34] *** Quits: rustyboy (~rustyboy@82.77.237.221) (Remote host closed the connection)
[02:19:56] *** Joins: rcernin (~rcernin@124.190.139.235)
[02:20:23] *** Joins: alzgh (~alzgh@user/alzgh)
[02:22:59] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[02:25:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[02:25:44] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:31:06] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[02:31:57] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[02:33:16] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:36:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:38:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:42:44] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:57] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[02:44:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:45:08] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[02:49:38] *** Quits: rcernin (~rcernin@124.190.139.235) (Quit: WeeChat 3.3)
[02:50:15] *** Joins: rcernin (~rcernin@124.190.139.235)
[02:52:22] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 268 seconds)
[02:52:53] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[02:52:57] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[02:56:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[02:58:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[03:00:16] *** Joins: fikran (~fikran@user/fikran)
[03:01:49] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:06:42] *** Joins: rae_ (~rae@eduroam-out-b.ucmerced.edu)
[03:09:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Read error: Connection timed out)
[03:09:39] *** Quits: rae_ (~rae@eduroam-out-b.ucmerced.edu) (Read error: Connection reset by peer)
[03:12:10] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:14:42] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:16:15] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 265 seconds)
[03:16:19] *** Joins: Guest5 (~Guest5@207.251.78.34)
[03:17:36] *** Parts: Guest5 (~Guest5@207.251.78.34) ()
[03:18:48] *** Joins: sillyboots (~Guest5@207.251.78.34)
[03:19:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[03:20:33] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:20:39] <sillyboots> Hi! Does anyone know if it's possible to take an already computed SHA256 checksum from an external program as a string and marshal it into the stdlib's crypto/sha256 digest struct?
[03:22:07] <sillyboots> I need to do this because another library requires passing in a hash.Hash that gets a suffix appended to its state before computing the sum again
[03:22:24] <rewt> does the doc say anything about it?
[03:23:55] <sillyboots> No -- there's an UnmarshalBinary method but it looks like expects just the Go struct's state, not an already computed sum
[03:24:15] *** Quits: adip (~adip@aejc92.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[03:24:17] <rewt> func Sum256(data []byte) [Size]byte
[03:24:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:24:35] <rewt> returns an array of bytes; just dump the bytes in there and done
[03:24:43] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:25:47] <rewt> hash.Hash is an interface
[03:26:07] *** Joins: adip (~adip@aeja206.neoplus.adsl.tpnet.pl)
[03:27:08] <fizzie> That wouldn't work for the "gets a suffix appended to its state before computing the sum again" bit.
[03:27:43] <fizzie> But I don't think that's even possible in theory. Part of the SHA-256 algorithm involves padding the message with a thing that includes the message length.
[03:28:02] <fizzie> Once you've got a "finalized" SHA-256 checksum, you can't just go ahead and continue appending data onto it.
[03:28:13] <rewt> what does "gets a suffix appended to its state before computing the sum again" mean?
[03:28:30] *** Quits: rcernin (~rcernin@124.190.139.235) (Quit: WeeChat 3.3)
[03:28:39] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:1103:b620:e77c:d1a2) (Quit: WeeChat 3.1)
[03:28:43] *** Joins: rcernin (~rcernin@124.190.139.235)
[03:29:39] <fizzie> As I interpreted it, the ask here is to come up with a hash.Hash instance that acts as if it had data D written to it, that can be given to a library that will write data S to it and then use it to extract SHA256(D || S), except only based on SHA256(D) gotten from an external program.
[03:30:04] <sillyboots> Yeah, Fizzie that is exactly my situation
[03:30:40] <fizzie> Yeah, pretty sure you can't do that in theory. Given SHA256(D), you can't "unroll" it back to a state that you could append more data to it.
[03:31:18] <fizzie> Because SHA256(D) is "actually" a function of the input D || some padding || len(D).
[03:31:19] <sillyboots> What you say makes sense. For reference, I am trying to work with PGP and avoid having to read the entirety of the message I want to sign in my Go process.
[03:31:19] *** Joins: hedon (~hedon@user/hedon)
[03:31:56] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[03:33:51] <sillyboots> It seems like what I could do is read my file into the SHA256 digest in the stdlib, then marshal its state over the network to my Go process, unmarshal it, and then the suffix will get added.
[03:34:39] <sillyboots> So I won't be passing a checksum around, just some internal Go bytes
[03:35:02] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:36:34] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:37:07] <fizzie> Sounds plausible.
[03:38:52] <fizzie> (I was thinking the external SHA256 checksum was coming from some other, non-Go program, in which case getting the intermediate state into Go would have been... challenging.)
[03:40:17] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[03:41:48] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:42:01] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Ping timeout: 250 seconds)
[03:42:04] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[03:43:09] <sillyboots> Yeah, I had started with sha256sum hoping that it'd work but given what you said I think it'll be easier to force the use of a Go client for computing the initial state of the SHA
[03:45:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:45:44] *** Quits: adip (~adip@aeja206.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[03:46:22] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[03:49:59] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:50:19] *** Joins: alzgh (~alzgh@user/alzgh)
[03:52:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:53:03] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-100d.inf6.spectrum.com)
[03:53:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:57:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[03:59:11] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Quit: So long and thanks for all the fish)
[03:59:14] *** Joins: arcatech (~arcatech@user/arcatech)
[04:04:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:06:01] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[04:06:23] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2)
[04:11:14] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[04:12:33] *** Quits: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Quit: Leaving)
[04:13:00] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:15:23] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[04:16:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[04:25:47] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2) (Ping timeout: 250 seconds)
[04:26:57] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:27:57] *** Quits: normen (~normen@p200300d71723fa00d95c547067958535.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:28:25] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2)
[04:31:52] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[04:33:24] *** Joins: welt (~welt@willow.spiderden.net)
[04:35:48] *** Joins: Tamas (~nobody@141.0.151.178)
[04:39:12] *** Quits: Tamas (~nobody@141.0.151.178) (Remote host closed the connection)
[04:45:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:47:52] *** Joins: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de)
[04:52:26] *** Quits: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[05:01:31] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:07:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[05:07:58] *** Quits: sillyboots (~Guest5@207.251.78.34) (Quit: Client closed)
[05:08:53] *** Quits: chemsmith (~chemsmith@user/chemsmith) (Ping timeout: 250 seconds)
[05:09:22] *** Joins: chemsmith (~chemsmith@user/chemsmith)
[05:09:37] *** Joins: fikran (~fikran@user/fikran)
[05:10:05] *** Joins: vptr (~vptr@user/vptr)
[05:10:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[05:13:00] *** Joins: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de)
[05:13:26] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 260 seconds)
[05:14:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:14:50] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 260 seconds)
[05:16:21] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[05:16:46] *** Joins: hendry (~hendry@210.23.22.8)
[05:19:01] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:301e:cfcd:47ee:8af2) (Ping timeout: 265 seconds)
[05:25:18] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 265 seconds)
[05:31:23] *** Joins: shtirlic_ (~shtirlic@pppoe.178-66-64-49.dynamic.avangarddsl.ru)
[05:32:26] *** Joins: rcernin (~rcernin@124.190.139.235)
[05:34:15] *** Quits: shtirlic (~shtirlic@178.71.173.137) (Ping timeout: 250 seconds)
[05:36:03] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-100d.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:37:16] *** Quits: monoxane (~monoxane@user/monoxane) (Read error: Connection reset by peer)
[05:38:52] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[05:41:24] *** Joins: monoxane (~monoxane@user/monoxane)
[05:41:37] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 250 seconds)
[05:52:01] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[05:54:20] *** Joins: alzgh (~alzgh@user/alzgh)
[06:01:48] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:04:56] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[06:06:19] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[06:07:43] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:14:01] *** Quits: SDr (~SDr@user/sdr) (Quit: Ping timeout (120 seconds))
[06:14:18] *** Joins: SDr (~SDr@li1189-192.members.linode.com)
[06:14:26] *** Quits: rcernin (~rcernin@124.190.139.235) (Quit: WeeChat 3.3)
[06:14:40] *** Joins: rcernin (~rcernin@124.190.139.235)
[06:19:37] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[06:21:44] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[06:21:52] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[06:33:23] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:33:40] <b0nn>  // nolint: directives depend on the specified linter being installed an run - otherwise they cause a linting error :"-)
[06:33:42] *** Joins: mickey8 (~user@user/mickey)
[06:34:15] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:34:38] <b0nn> I mean, I am using // nolint:revive locally, because revive is the "replacement" for golint, but on another machine I haven't got revive installed, whic, you guessed it, means the linter chokes
[06:35:04] <b0nn> on the //nolint directive, not the thinkg it was stopping from being linted
[06:35:34] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 260 seconds)
[06:43:25] <seebs> ... i'm not sure i believe in the "replacement for golint", if you want a linter, use staticcheck. :P
[06:43:40] <A_Dragon> staticcheck in gopls <3
[06:43:42] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:44:48] <A_Dragon> seebs: revive runs reimplementations of some golint checks and uses the analyzer backend for some more
[06:49:59] *** Quits: SDr (~SDr@li1189-192.members.linode.com) (Changing host)
[06:49:59] *** Joins: SDr (~SDr@user/sdr)
[06:53:33] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[06:55:29] <seebs> staticcheck is great.
[06:55:37] <A_Dragon> it is
[06:59:07] <b0nn> staticcheck is a meta-linter though, isn't it
[06:59:16] <b0nn> not unlike golangci-lint
[07:00:25] <b0nn> revive on my local system is being run by golangci-lint, but on my remote system I haven't configured it yet
[07:16:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:17:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:18:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:18:58] *** Joins: fikran (~fikran@user/fikran)
[07:20:25] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[07:23:14] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[07:25:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[07:25:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Client Quit)
[07:31:18] *** Joins: lilgopher (~textual@2601:241:8000:38f0:d57d:ecca:5e52:8ff5)
[07:32:19] <lilgopher> if I do a progress log goroutine like this, does the goroutine finish when the main function ends or it keeps working in the backgroun forever? https://play.golang.org/p/eLocAmDb0Y9
[07:33:58] <lilgopher> I expected I would need a channel for that but it apparently works
[07:35:52] <bpalmer> when the main function ends, the program will end.
[07:36:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:36:23] <bpalmer> if you want to wait for all the started goroutines to finish, you need to add a wait group and wait on it towards the end of your program (or some similar strategy)
[07:36:45] <lilgopher> oh
[07:37:14] <bpalmer> (technically, when the goroutine the main function is on finishes; it should be fine to recursively call main())
[07:37:58] <lilgopher> so if I ever launch a goroutine that has to perform a task and dont wait for it and the main function ends before the goroutine finish the task, the goroutine is stopped half way throu the task
[07:38:40] <bpalmer> yes, basically. (although "before" gets complicated in the world of concurrency)
[07:38:55] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[07:39:41] <lilgopher> thank you
[07:40:01] <lilgopher> then... I love this way of logging the progress
[07:40:52] <bpalmer> This way is somewhat dangerous, though, because there are no memory barriers to ensure main()'s change to counter is visible in the logging goroutine
[07:41:33] <lilgopher> yeah I was surprissed it works, honestly
[07:41:53] <lilgopher> I guess I should use a channel, technically
[07:44:42] <b0nn> hmm, am a bit confused by the memory barriers comment, it's a closure, so the counter variable is shared with the goroutine, right?
[07:46:21] <bpalmer> b0nn: yes. The go memory model specifies the conditions under which reads of a variable in one goroutine can be guaranteed to observe values produced by writes to the same variable in a different goroutine
[07:46:30] <bpalmer> to quote from https://golang.org/ref/mem
[07:47:24] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[07:47:27] <bpalmer> so if you have two goroutines sharing a variable, you have to think about what guarantees the memory model provides; if you don't use some form of synchronization primitive, it's fully legal for, e.g., the logging goroutine to always see the value 0
[07:48:37] <bpalmer> if you have shared state that is always in the same goroutine, you don't have to worry about that. This is the case for lots of closures.
[07:49:37] <b0nn>  think that the amount of time that the example code takes is what obscures that problem
[07:49:40] <b0nn>  Because of this reordering, the execution order observed by one goroutine may differ from the order perceived by another. For example, if one goroutine executes a = 1; b = 2;, another might observe the updated value of b before the updated value of a.
[07:50:25] <b0nn> So, the reordering will only take fractions of a second, but because the code was working every 1000ms +/- that would not be observed at all
[07:50:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:51:06] <b0nn> But I understand what yiou mean now :)
[07:51:39] <bpalmer> It's kind of scary how easy it is to produce dangerous concurrent code.
[07:52:08] <lilgopher> tell me about it
[07:54:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:55:35] *** Quits: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[07:57:33] <bpalmer> b0nn: but it's also that the writes might not be published. Eg, suppose that your two goroutines are on separate cores or cpus; each may have their own cache of memory. The logging goroutine never has to invalidate its cache -- nothing is writing to it, after all...
[07:58:08] <b0nn> yeah -it's racy, just the way you put it I didn't have a clear view on
[08:00:00] <bpalmer> ah, sorry
[08:00:23] <b0nn> all good - I'm now in posession of a new way to communicate the issue
[08:00:34] <b0nn> er, new to me*
[08:06:13] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:10:58] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[08:11:19] <lilgopher> is this better? https://play.golang.org/p/nqbuVn_obOa
[08:16:46] *** Quits: rudi_s (~simon@user/rudi-s/x-7673890) (Remote host closed the connection)
[08:17:01] *** Joins: rudi_s (~simon@user/rudi-s/x-7673890)
[08:24:27] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:42:45] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[08:51:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:53:39] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[08:55:24] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:07:27] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[09:08:36] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 265 seconds)
[09:10:03] *** Joins: analoq (~yashi@user/dies)
[09:19:14] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 265 seconds)
[09:20:15] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[09:25:43] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[09:26:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[09:28:19] *** Joins: fikran (~fikran@user/fikran)
[09:30:45] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:32:36] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[09:33:33] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[09:34:24] <acagastya> Hi, is `fmt.Fprintf(os.Stderr, "%s", err); os.Exit(1)` equivalent to `log.Fatal(err)`?
[09:36:07] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[09:36:48] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:37:09] <A_Dragon> roughly
[09:37:16] <A_Dragon> log will do other stuff, but close enough
[09:37:37] <A_Dragon> std.Output(2, fmt.Sprintf(format, v...))
[09:37:37] <A_Dragon>  os.Exit(1)
[09:37:41] <A_Dragon> is exactly what it does
[09:40:13] <acagastya> Okay.
[09:41:19] <acagastya> Few days back, I looked up "how to print to stderr in golang" and went with the first one.  For that purpose, the second method should be just fine, right, A_Dragon?
[09:41:24] *** Joins: frost (~frost@user/frost)
[09:41:59] <acagastya> Currently my source code is littered with `os.Exit(1)` at so many places.
[09:42:03] <A_Dragon> log likely prints to stdout, or whatever other io.Writer its configured to use
[09:42:26] <A_Dragon> actually it might be err for the default one
[09:42:42] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[09:42:45] *** Quits: frost (~frost@user/frost) (Client Quit)
[09:43:41] <acagastya> All right.  I will change to log.Fatal, then.  Thank, A_Dragon!
[09:43:52] <A_Dragon> no problem!
[09:56:01] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[09:57:58] <A_Dragon> mmm Im starting to miss overloading on this one
[09:58:09] <A_Dragon> I could do it with interface{} I *GUESS* but bleh
[10:00:48] *** Joins: frost (~frost@user/frost)
[10:03:47] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:07:24] *** Joins: sagax (~sagax_nb@user/sagax)
[10:08:42] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Remote host closed the connection)
[10:09:15] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:11:09] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[10:18:49] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Quit: Leaving)
[10:23:18] *** Joins: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de)
[10:25:11] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:25:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:28:29] *** Quits: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:30:06] *** Quits: mikey__ (~mikey__@user/mikey/x-6463285) (Ping timeout: 276 seconds)
[10:34:26] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:35:25] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:36:20] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[10:36:21] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:37:44] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[10:39:41] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[10:40:53] *** Quits: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4) (Remote host closed the connection)
[10:42:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[10:45:26] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[10:47:12] *** Joins: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de)
[10:50:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:51:50] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[10:54:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:54:56] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 265 seconds)
[10:55:10] *** Quits: jinks (~jinks@104.161.79.77) (Read error: Connection reset by peer)
[10:55:23] *** Joins: jinks (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac)
[10:56:05] *** Parts: mikey__ (~mikey__@user/mikey/x-6463285) ()
[10:57:33] *** Joins: Xjs (~jannis@user/xjs)
[10:59:17] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[10:59:22] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[11:02:00] *** Joins: mrig (~AdiIRC@user/mrig)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[11:09:39] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[11:09:39] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:13:26] *** Quits: entropyg1 (levitate@2600:3c01::f03c:91ff:fecc:c443) (Quit: Bye)
[11:19:26] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[11:19:52] *** Joins: bindu (~bindu@user/bindu)
[11:21:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:23:26] *** Joins: sheldon (~sheldon@user/sheldon)
[11:25:05] *** Joins: fef (~thedawn@user/thedawn)
[11:25:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:26:35] *** Joins: jla (~jordi@64.225.79.195)
[11:26:46] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[11:27:06] *** Joins: alzgh (~alzgh@user/alzgh)
[11:27:52] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[11:29:16] *** Joins: cation (cation@user/cation)
[11:30:40] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:32:02] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[11:32:19] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[11:35:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:37:40] *** Joins: fikran (~fikran@user/fikran)
[11:41:47] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[11:43:50] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:44:04] *** Joins: EdFletcher (~PKD@user/edfletcher)
[11:44:37] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[11:45:47] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[11:45:51] *** Quits: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[11:46:01] *** Joins: _nuke (~nuke@50-193-103-211-static.hfc.comcastbusiness.net)
[11:47:36] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:49:22] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[11:50:18] *** Joins: adip (~adip@aeja206.neoplus.adsl.tpnet.pl)
[11:51:59] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:52:32] *** Quits: amolith (~amolith@nixnet/founder/amolith) (Ping timeout: 256 seconds)
[11:53:04] *** Joins: amolith (~amolith@nixnet/founder/amolith)
[11:56:11] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d57d:ecca:5e52:8ff5) (Ping timeout: 264 seconds)
[11:58:15] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:59:03] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 250 seconds)
[12:03:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:11:51] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:20:19] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:22:31] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[12:28:47] *** Joins: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de)
[12:30:22] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:30:36] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[12:42:47] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[12:45:15] <bloony> My bitshift skills are rusty.. how do I shift it back to integer again to get it right in the String method? https://play.golang.org/p/-R_0_SyTy2o
[12:48:56] * A_Dragon click
[12:49:00] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:49:32] <A_Dragon> bloony: what are you trying to do?
[12:49:50] <A_Dragon> oh I see
[12:49:58] <A_Dragon> I wouldnt do a bitshift for that
[12:49:59] <bloony> :)
[12:50:03] <A_Dragon> just use iota directly?
[12:50:11] <A_Dragon> or do you NEED a bitfield?
[12:50:19] <bloony> I need bitfield
[12:50:31] <bloony> using it as a filter in my program
[12:50:33] *** Quits: g4wjs (~quassel@mail.classdesign.com) (Ping timeout: 268 seconds)
[12:50:38] <A_Dragon> then you neeeeed
[12:50:42] <A_Dragon> theres a way to do this
[12:50:45] <A_Dragon> and I cant remember what it is
[12:50:46] <riv> oh you want to compute log_2 basically
[12:50:48] <A_Dragon> its not a shift
[12:50:49] <A_Dragon> yeah
[12:50:55] <A_Dragon> or alternatively
[12:50:57] <A_Dragon> if you uh
[12:50:58] <bloony> I have done it in c++, but its some years ago
[12:51:00] <A_Dragon> dont mind a big array
[12:51:08] <A_Dragon> (hint; global)
[12:51:39] <A_Dragon> https://play.golang.org/p/ML5MgvaRkIe
[12:51:51] <A_Dragon> also that is one of my favourite "wait, that works?" in go
[12:51:58] <A_Dragon> you could also use a global map
[12:52:07] <A_Dragon> which would likely be smaller than the array
[12:52:36] <A_Dragon> also
[12:52:47] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 250 seconds)
[12:52:56] <riv> nice :)
[12:53:22] <bloony> hum
[12:53:25] <bloony> whats going on there?
[12:53:33] <A_Dragon> hmm?
[12:53:44] <A_Dragon> https://play.golang.org/p/uBlJoSQMdRQ also <-- you can give consts types
[12:53:59] <bloony> oh
[12:54:09] <A_Dragon> whats going on there in the return is that I set the indexes to the strings
[12:54:19] <bloony> yeah I got it :)
[12:54:29] <A_Dragon> so index ONE (1) is "one", four (8) is, yeah
[12:54:37] <bloony> had to compute for a while :p
[12:54:40] <A_Dragon> but that will make the array larger
[12:54:46] <bloony> yeah
[12:54:52] <A_Dragon> a map would be better
[12:55:03] <A_Dragon> perferably one thats global (so string() doesnt create a new one every time)
[12:55:04] <bloony> mm
[12:55:09] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[12:57:16] <bloony> yes
[12:57:23] <bloony> true
[12:58:50] <bloony> actually.. there wont be that many types so could just use a switch
[13:01:10] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:05:55] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[13:11:12] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:11:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:19:47] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[13:21:53] *** Quits: amolith (~amolith@nixnet/founder/amolith) (Read error: Connection reset by peer)
[13:28:59] *** Joins: amolith (~amolith@nixnet/founder/amolith)
[13:33:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:41:22] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:44:38] <A_Dragon> mhmm
[13:44:44] <A_Dragon> would be the most efficient
[13:44:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[13:44:49] <A_Dragon> and you could have a default
[13:45:03] <A_Dragon> rather than just going bang
[13:47:01] *** Joins: fikran (~fikran@user/fikran)
[13:48:08] *** Quits: qaisjp (sid26374@user/qaisjp) (Ping timeout: 256 seconds)
[13:48:08] *** Quits: Balooga (sid407689@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: Pent (sid313808@lymington.irccloud.com) (Ping timeout: 256 seconds)
[13:48:42] *** Quits: avery (sid501608@uxbridge.irccloud.com) (Ping timeout: 256 seconds)
[13:49:34] *** Joins: avery (sid501608@uxbridge.irccloud.com)
[13:49:37] *** Joins: Balooga (sid407689@lymington.irccloud.com)
[13:49:38] *** Joins: qaisjp (sid26374@user/qaisjp)
[13:49:42] *** Joins: Pent (sid313808@lymington.irccloud.com)
[13:50:56] *** Joins: fef (~thedawn@user/thedawn)
[13:51:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:51:34] <fizzie> bloony: A_Dragon: "math/bits".TrailingZeros. https://play.golang.org/p/Mw_BPK2oS38
[13:52:30] <A_Dragon> lol
[13:55:09] *** Joins: alzgh (alzgh@user/alzgh)
[13:59:30] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[13:59:56] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:03:25] *** Joins: alzgh (~alzgh@user/alzgh)
[14:05:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:08:58] *** Joins: rvalue (~rvalue@user/rvalue)
[14:09:40] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:09:53] <rvalue> how does one do in place value change of a variable during debugging like one can in say java or python. Delve complains it cant do this but i dont quite understand why
[14:11:21] <rvalue> I am trying to learn go
[14:11:52] <bloony> fizzie: ah :) Used a switch for it
[14:12:01] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[14:21:15] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[14:23:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:25:45] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Client Quit)
[14:26:55] <A_Dragon> rvalue: delve can do that IIRC
[14:29:06] <rvalue> Ok i will try again today. Is there anyone in the go community like Jon Gjengset for Rust Lang?
[14:41:37] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[14:48:03] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 250 seconds)
[14:48:29] *** Quits: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de) (Ping timeout: 250 seconds)
[14:54:56] *** Joins: __alex (~alex@2a01:598:9907:3916:e7a5:ca82:5031:1211)
[14:55:00] *** Quits: vds_ (sid12483@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[14:55:34] *** Quits: pombreda (sid227801@tinside.irccloud.com) (Ping timeout: 256 seconds)
[14:55:34] *** Quits: theckman (sid295081@user/theckman) (Ping timeout: 256 seconds)
[14:55:43] *** Quits: fdv (sid27570@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[14:56:08] *** Quits: dch (sid1310@couchdb/committer/dch) (Ping timeout: 256 seconds)
[14:56:20] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 268 seconds)
[14:56:20] *** Quits: chimeracoder_ (sid230642@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[14:56:42] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 256 seconds)
[14:56:42] *** Quits: nikki93 (sid200244@tinside.irccloud.com) (Ping timeout: 256 seconds)
[14:56:57] *** Quits: avery (sid501608@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[14:56:57] *** Quits: jsvcycling (sid369784@uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[14:56:57] *** Quits: jzelinskie (sid17772@user/jzelinskie) (Ping timeout: 268 seconds)
[14:57:34] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 268 seconds)
[14:57:34] *** Quits: chromis (sid150893@tinside.irccloud.com) (Ping timeout: 268 seconds)
[14:57:47] *** Joins: bw (sid2730@user/betawaffle)
[14:57:51] *** Joins: r0bby (r0bby@user/r0bby)
[14:57:55] *** Joins: theckman (sid295081@user/theckman)
[14:57:56] *** Joins: nikki93 (sid200244@tinside.irccloud.com)
[14:58:02] *** Joins: dch (sid1310@couchdb/committer/dch)
[14:58:04] *** Joins: jsvcycling (sid369784@uxbridge.irccloud.com)
[14:58:09] *** Joins: vds_ (sid12483@helmsley.irccloud.com)
[14:58:24] *** Parts: dch (sid1310@couchdb/committer/dch) ()
[14:58:31] *** Joins: fdv (sid27570@helmsley.irccloud.com)
[14:58:56] *** Joins: chimeracoder_ (sid230642@helmsley.irccloud.com)
[14:59:17] *** Joins: avery (sid501608@uxbridge.irccloud.com)
[14:59:27] *** Joins: jzelinskie (sid17772@user/jzelinskie)
[14:59:41] *** Joins: pombreda (sid227801@tinside.irccloud.com)
[14:59:47] *** Joins: chromis (sid150893@tinside.irccloud.com)
[14:59:59] *** Quits: __alex (~alex@2a01:598:9907:3916:e7a5:ca82:5031:1211) (Ping timeout: 265 seconds)
[15:00:04] *** Joins: pl (sid98063@helmsley.irccloud.com)
[15:00:38] <lofiguy> rvalue, yes and no
[15:01:18] <lofiguy> There are few good youtube channels about Go. But many of them are not that fresh as you expect.
[15:02:22] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:02:50] <lofiguy> You cant try these: justforfunc: Programming in Go, Learn To Code from Todd McLeod this guy is awesome! I learned in 2017 a lot about Golang from him
[15:03:28] <lofiguy> And the freshiest of all Golang Dojo
[15:04:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[15:05:10] *** Joins: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de)
[15:05:15] <lofiguy> Junmin Lee has closest youtube channel about Go, to Jon Gjengset from Rust world.
[15:06:22] <lofiguy> But let's be honest. No one doesn't do it how's Jon do.
[15:06:30] *** Quits: trollixx (sid289131@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[15:06:39] *** Joins: trollixx (sid289131@uxbridge.irccloud.com)
[15:07:19] <lofiguy> So if you're new these channels are great. But if you're experienced let's say a mid level - you need something different which I didn't found.
[15:08:16] <demsh> reading documentation and code of others is usually a way to go at this point
[15:09:09] *** Quits: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[15:09:20] <lofiguy> demsh, yes and no. If you're experienced in any other language and know proof of concepts about programming - documentation is great place to start.
[15:10:19] <lofiguy> I know people who started they journey in programming from Go and people who switched from ex. JS. These two kinds of people are not the same people ;-)
[15:10:21] *** Joins: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de)
[15:11:54] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:13:46] *** Joins: bindu (~bindu@user/bindu)
[15:16:32] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:23:29] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[15:24:12] *** Joins: Atque (~Atque@user/atque)
[15:27:19] <rvalue> lofiguy yeah i am very new to Golang but have experience in software development. Thanks for all those, i will check them out
[15:28:34] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:31:58] <rvalue> demsh: what i have found best personally is to understand a project thats been set up to be easily compile, debug and run so i can learn by stepping through stuff, learn the standard library if the language has it etc. than actually books. videos help a lot. books are great if i want to go back to something complicated which someone has solved. i use documentation but its not helpful when learning something new
[15:38:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c972:cfd6:54b3:c83e) (Ping timeout: 268 seconds)
[15:38:39] *** Joins: zwr (~zwr@2804:d45:b966:fb00:f0c0:f746:9f80:b26b)
[15:39:06] *** Joins: jla (~jordi@64.225.79.195)
[15:46:59] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[15:54:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[15:56:22] *** Joins: fikran (~fikran@user/fikran)
[15:57:25] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[16:01:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:03:40] *** Joins: noord (~noord@user/noord)
[16:10:31] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:13:12] *** Quits: X-Scale (~ARM@46.50.0.92) (Ping timeout: 256 seconds)
[16:13:20] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:14:45] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:14:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:16:33] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[16:18:11] *** Quits: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[16:18:41] *** Joins: X-Scale (~ARM@83.223.235.65)
[16:19:07] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:19:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:22:50] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 256 seconds)
[16:24:42] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[16:24:58] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 260 seconds)
[16:26:23] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[16:31:27] *** Joins: fef (~thedawn@user/thedawn)
[16:31:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:33:05] *** Joins: eron (~eron@177.106.178.236)
[16:35:33] *** Joins: frost (~frost@user/frost)
[16:38:38] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[16:38:56] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:40:51] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:43:08] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[16:46:40] *** Quits: eron (~eron@177.106.178.236) (Quit: Ping timeout (120 seconds))
[16:54:35] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[16:57:11] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[16:59:42] *** Joins: Compy_ (~compy@user/compy)
[17:03:39] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:04:36] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 268 seconds)
[17:05:10] *** Quits: lack (~lack@user/lack) (Ping timeout: 265 seconds)
[17:05:43] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:804c:4db1:6f75:4745)
[17:07:03] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[17:07:35] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Ping timeout: 265 seconds)
[17:07:49] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[17:16:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:21:48] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[17:22:04] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[17:22:04] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[17:22:04] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[17:22:32] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Ping timeout: 260 seconds)
[17:24:12] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[17:26:07] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:26:45] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[17:30:55] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:32:41] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Quit: Leaving)
[17:33:03] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:33:14] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:40:57] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[17:43:54] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:44:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[17:46:35] *** Joins: mrig (~AdiIRC@user/mrig)
[17:46:49] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100d)
[17:48:12] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[17:50:26] *** Joins: krux02_ (~krux02@194.8.199.29)
[17:50:32] *** Quits: krux02_ (~krux02@194.8.199.29) (Client Quit)
[17:54:56] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:804c:4db1:6f75:4745) (Quit: WeeChat 3.3)
[17:58:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[18:00:15] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5)
[18:00:57] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:01:19] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[18:03:42] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[18:04:07] *** Joins: Teckla (~Teckla@user/teckla)
[18:04:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:05:43] *** Joins: fikran (~fikran@user/fikran)
[18:07:23] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:38b1:6c00:ef77:bdd5) (Ping timeout: 250 seconds)
[18:08:37] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:10:33] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[18:17:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[18:18:39] *** Joins: X-Scale (~ARM@83.223.235.65)
[18:22:05] *** Joins: tyson2 (~user@cpe003044346b11-cm688f2ec139b0.sdns.net.rogers.com)
[18:36:40] *** Joins: lilgopher (~textual@2601:241:8000:38f0:d57d:ecca:5e52:8ff5)
[18:52:35] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[19:06:28] *** Quits: tyson2 (~user@cpe003044346b11-cm688f2ec139b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:12:22] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:13:07] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[19:13:27] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:26:50] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Quit: WeeChat 3.2)
[19:31:38] *** Quits: chripell (~chripell@147.80.76.34.bc.googleusercontent.com) (Quit: Leaving)
[19:33:41] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[19:34:46] *** Joins: pepee (~pepee@user/pepee)
[19:35:24] *** Quits: avemestr (~avemestr@2a01:4f8:212:2719::2) (Quit: WeeChat 1.9.1)
[19:36:00] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:41:32] *** Quits: OMGOMG (~bobrobert@sandy.ifi.uio.no) (Read error: Connection reset by peer)
[19:45:39] *** Joins: pmcnabb (~pmcnabb@user/pmcnabb)
[19:50:16] *** Quits: fmac (bf93f83905@2604:bf00:710:0:5054:ff:feea:5006) (Remote host closed the connection)
[19:50:16] *** Quits: sharktamer (9bafe1e1bb@2604:bf00:710:0:5054:ff:feea:5006) (Remote host closed the connection)
[19:50:17] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (Remote host closed the connection)
[19:52:44] *** Joins: sharktamer (9bafe1e1bb@2604:bf00:561:2000::17)
[19:52:45] *** Joins: fmac (bf93f83905@2604:bf00:561:2000::26)
[19:57:56] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[20:04:10] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:05:42] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[20:05:54] *** Quits: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[20:09:01] *** Joins: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de)
[20:10:19] *** Joins: mrig (~mrig@user/mrig)
[20:12:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:14:10] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[20:15:04] *** Joins: fikran (~fikran@user/fikran)
[20:18:02] *** Quits: stmuk_ (~steve@15.43.187.81.in-addr.arpa) (Ping timeout: 240 seconds)
[20:18:25] *** Joins: stmuk_ (~steve@15.43.187.81.in-addr.arpa)
[20:24:04] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:5131:3f99:4933:dffc)
[20:27:38] *** Quits: krux02 (~krux02@194.8.199.29) (Remote host closed the connection)
[20:33:19] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:52:22] *** Joins: tyson2 (~user@24.114.64.185)
[20:52:44] *** Joins: amodo (~derf@naeon.org)
[20:52:49] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[20:53:07] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[20:56:12] *** Joins: andlabs_ (~andlabs@2604:ca00:179:3da7:1d92:59a7:6865:73f)
[20:58:59] <amodo> hey. i am tempted to return an interface ;) the struct that would be returned otherwise only exports one method. all the fields on the struct should be unexported, so exporting the struct itslf seems silly to me. that's why i am tempted to return the interface. is this totally wrong or maybe a legitimate case of returning an interface?
[20:59:47] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:5131:3f99:4933:dffc) (Ping timeout: 264 seconds)
[20:59:51] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Ping timeout: 250 seconds)
[21:00:24] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:03:04] <foobaz> export the struct, it's simpler than casting to/from interface{}
[21:05:24] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:06:04] <amodo> ok cool thanks!
[21:07:17] <amodo> oh, but i meant an interface type, not interface{}
[21:07:48] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:08:09] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:c81b:3ed:4113:d721)
[21:08:11] *** Quits: andlabs_ (~andlabs@2604:ca00:179:3da7:1d92:59a7:6865:73f) (Ping timeout: 264 seconds)
[21:08:37] <foobaz> ah ok, that's a much better idea
[21:08:55] <foobaz> although i would still export the struct type because it's the simpler solution
[21:10:02] <amodo> it got awkward when i wanted to write the comment for the exported struct: "XYZ only exists to provide the metod Blah(), there are no fields for you here"
[21:11:00] <amodo> of course that wouldnt be what i'd write, but that's the idea
[21:11:38] <ikke> I'd say it's not abnormal to only have methods public and not fields
[21:11:52] <ikke> So it's not something you'd have to explain
[21:11:59] <foobaz> there are struct types in the standard library with no exported fields, like http.ServeMux
[21:12:33] <ikke> https://pkg.go.dev/net/http#ServeMux
[21:12:39] <ikke> / contains filtered or unexported fields
[21:13:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:13:33] <amodo> oh ok, wonderful. that helps a lot!
[21:14:15] <amodo> thank you again!
[21:18:38] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:18:52] <amodo> i think why i was tempted to go the interface was: the interface seemed like a better location to document the method, somehow.
[21:19:51] <amodo> but i guess the correct usage for this interface would be if that new functionality would be passed on to other functions
[21:20:11] *** Joins: andlabs_ (~andlabs@2604:ca00:179:3da7:8c11:7a27:f950:d76c)
[21:20:11] <amodo> i mean, the correct time to define an use that interface type
[21:20:57] <lilgopher> I brought up yesterday this example https://play.golang.org/p/eLocAmDb0Y9 and we commented that it might not be safe since it is not guaranteed that the log goroutine will see the changes done to the counter variable. I tried then this: https://play.golang.org/p/nqbuVn_obOa but I think I'm not fixing the problem there either and I dont think I need a lock since I only update the counter from one goroutine. What is the change
[21:20:57] <lilgopher>  I would have to do to the first example to make it safer?
[21:21:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[21:22:18] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:23:46] *** Joins: andlabs__ (~andlabs@64.9.251.139)
[21:23:47] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:c81b:3ed:4113:d721) (Ping timeout: 264 seconds)
[21:25:12] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[21:25:33] <amodo> I think you'd want to use a channel to catch all communication between your goroutine and the other code.
[21:26:10] *** Quits: adip (~adip@aeja206.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[21:26:27] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:26:43] *** Quits: andlabs_ (~andlabs@2604:ca00:179:3da7:8c11:7a27:f950:d76c) (Ping timeout: 250 seconds)
[21:26:51] *** Quits: andlabs__ (~andlabs@64.9.251.139) (Read error: Connection reset by peer)
[21:27:08] *** Joins: andlabs (~andlabs@2604:ca00:179:3da7:643d:73c7:91c0:d8f6)
[21:27:32] <lilgopher> if I use one channel with only one int inside, it will block when I put an integer inside it, right?
[21:27:49] *** Joins: adip (~adip@aedz57.neoplus.adsl.tpnet.pl)
[21:28:47] <lilgopher> one channel with one int capacity*
[21:32:20] <amodo> the send will block when the channel is full. the received will block when the channel is empty. but you don't have to use a buffered channel, i guess it depends on what you want to do
[21:32:25] <amodo> receive*
[21:33:57] *** Joins: alzgh (~alzgh@user/alzgh)
[21:34:10] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[21:34:30] <lofiguy> lilgopher, https://play.golang.org/p/lPXoY_vmRjZ
[21:35:26] <lilgopher> so apparently this works but I dont understand why https://play.golang.org/p/lg3aGYxCF3w
[21:35:38] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 256 seconds)
[21:35:44] <lilgopher> wait no it does not work
[21:36:45] <lilgopher> it does what I expected
[21:37:03] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:37:10] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[21:37:22] <lilgopher> I just want to log the progress every x seconds instead of logging the progress based on the counter
[21:37:44] <lilgopher> because I dont know how long all the 10,000 tasks will take
[21:38:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:38:37] *** Joins: sheldon (~sheldon@user/sheldon)
[21:39:31] <lilgopher> lofiguy yeah that example seems to show that the send goroutine blocks when the channel is full
[21:39:43] *** Quits: andlabs (~andlabs@2604:ca00:179:3da7:643d:73c7:91c0:d8f6) (Ping timeout: 250 seconds)
[21:39:56] <lilgopher> but then how do I do it non blocking while keeping the channel with capacity 1?
[21:41:11] <lofiguy> lilgopher, read about select statement
[21:41:18] <lofiguy> https://gobyexample.com/non-blocking-channel-operations
[21:41:20] <lilgopher> ok, will do
[21:41:22] <lilgopher> thanks
[21:44:24] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:44:32] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 265 seconds)
[21:44:44] *** Joins: alzgh (~alzgh@user/alzgh)
[21:46:25] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[21:47:34] *** Joins: rusty (~rustyboy@82.77.237.221)
[21:48:25] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[21:52:07] *** Quits: dhruvasagar (~dhruvasag@49.207.218.36) (Quit: WeeChat 3.3)
[21:55:35] *** Quits: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de) (Ping timeout: 264 seconds)
[21:56:24] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:58:33] <lilgopher> hmm, so apparently this is it https://play.golang.org/p/w_wp73oXj0v ? lofiguy
[21:59:04] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Quit: The Lounge - https://thelounge.chat)
[21:59:14] <lilgopher> if there is an element it drop it and input a new one, if there is no element(default case) i just input
[21:59:40] *** Joins: tebruno99 (~tebruno99@user/tebruno99)
[21:59:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:00:16] *** Joins: alzgh (~alzgh@user/alzgh)
[22:00:32] *** Joins: dalan623670 (~dalan@14-202-182-202.tpgi.com.au)
[22:01:13] *** Quits: dalan62367 (~dalan@203.214.91.172) (Ping timeout: 268 seconds)
[22:01:14] *** dalan623670 is now known as dalan62367
[22:02:09] *** Joins: jespada (~jespada@252-155-231-201.fibertel.com.ar)
[22:03:00] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:15:28] *** Quits: tyson2 (~user@24.114.64.185) (Remote host closed the connection)
[22:16:01] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 268 seconds)
[22:17:13] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:17:53] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 265 seconds)
[22:22:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[22:22:17] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:22:29] *** Joins: alzgh (~alzgh@user/alzgh)
[22:22:38] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:22:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[22:24:28] *** Joins: fikran (~fikran@user/fikran)
[22:24:51] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:31:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:35:41] *** Joins: darkapex_ (~darkapex@user/darkapex)
[22:35:53] *** Joins: carlavilla (~carlavill@2a0c:5a84:3607:2f00:221:6bff:fe3b:cee4)
[22:36:21] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[22:38:10] *** Joins: sav_ (~sav@177.12.48.155)
[22:41:05] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:7508:dcfe:4adb:8444)
[22:42:03] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[22:42:04] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a0a:70f3:6ecf:3a5b:5cea)
[22:45:55] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:7508:dcfe:4adb:8444) (Ping timeout: 265 seconds)
[22:53:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[22:53:53] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[22:55:00] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[22:56:04] *** Joins: rendar (~rendar@user/rendar)
[22:56:26] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 260 seconds)
[22:57:36] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[22:59:27] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[23:00:12] *** Joins: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net)
[23:04:50] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[23:09:15] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[23:10:18] *** Joins: mooff (mooff@awful.cooking)
[23:20:22] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[23:20:56] *** Joins: kn1001 (~kn100@wireguard/tunneler/kn100)
[23:21:27] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:22:02] <evocatus> hi
[23:22:35] <evocatus> I'm ashamed to admit that I, being a full-time Go developer, failed miserably to create a new library
[23:22:54] <evocatus> I forgot completely all this stuff about GOPATH, where to store code, etc.
[23:23:03] <evocatus> what did they change recently?
[23:23:16] *** Joins: sheldon (~sheldon@user/sheldon)
[23:23:16] <evocatus> looks like I can't even write tests without go.mod file
[23:23:31] <riv> yeah it all changed
[23:23:36] <evocatus> am I supposed to do `go mod init` for EVERY small library I create?
[23:24:09] <evocatus> I read some docs and they say module is a collection of packages
[23:25:10] <b0nn> it's every project (minimum)
[23:25:16] <evocatus> must I store all my code inside GOPATH ?
[23:25:26] <b0nn> you can do it per service, though, but that gets painful
[23:25:35] <b0nn> no more $GOPATH
[23:25:52] <b0nn> although I'm still a $GOPATH guy, because ineertia
[23:27:50] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[23:28:53] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a0a:70f3:6ecf:3a5b:5cea) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:32:48] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 265 seconds)
[23:33:27] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:8428:2080:2f50:cb9f)
[23:33:37] *** Quits: dlbh^ (~dlbh@h178.173.139.63.static.ip.windstream.net) (Remote host closed the connection)
[23:34:31] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a12:1013:3dc0:4107:7f11)
[23:34:33] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[23:37:35] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[23:38:03] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:38:07] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:8428:2080:2f50:cb9f) (Ping timeout: 265 seconds)
[23:38:44] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[23:39:05] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a12:1013:3dc0:4107:7f11) (Ping timeout: 265 seconds)
[23:39:16] *** Joins: andlabs (~andlabs@104.132.34.111)
[23:41:47] <evocatus> ok, now I have some understanding
[23:42:02] <evocatus> but I still can't get how to organize my code now
[23:42:30] <evocatus> what if I have a folder somewhere on my disk with a bunch of folders with pet projects?
[23:42:47] <evocatus> Do I need to make go.mod only for the top level folder?
[23:43:16] <b0nn> do you distribute them as a single project?
[23:43:34] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[23:44:36] <b0nn> I mean, you're effectivley saying "I host all my projects at github.com/user, so I only make a go.mod for github/user, not github/user/project1, github/user/project2..."
[23:45:13] <evocatus> I do not distribute them at all
[23:45:19] <evocatus> well, most of them
[23:46:40] <b0nn> it's your tyre fire, you do what's most appropriate in your opinion
[23:47:11] <evocatus> does `go mod` command add any info to any global registry?
[23:47:23] <evocatus> by global I mean machine-wide
[23:48:16] <b0nn> I don't think so
[23:49:06] <evocatus> I now created a dummy package (or should I call it a module?) and did `go mod init` in it
[23:49:07] <b0nn> go.mod tracks dependencies for the project it's related to, and go.sum tracks the last version of those deps that was used to build
[23:49:42] <b0nn> note: there is no concept of "pinning" deps in go modules (it's possible via workarounds though)
[23:49:52] <evocatus> and I created a program (package main and stuff) at the same level as this module folder and it imports this module
[23:49:55] <evocatus> even this doesn't work
[23:50:17] <evocatus> looks like I don't know now import's work either
[23:50:55] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[23:50:55] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[23:50:55] *** Joins: tane (~tane@user/tane)
[23:50:57] <b0nn> Maybe have a read of https://go.dev/blog/using-go-modules
[23:55:53] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[23:56:48] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@45.136.170.104)
[23:56:58] *** Quits: neurocyte0132889 (~neurocyte@45.136.170.104) (Changing host)
[23:56:58] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:57:29] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[23:57:58] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
