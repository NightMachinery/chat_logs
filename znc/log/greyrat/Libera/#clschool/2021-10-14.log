[00:13:02] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[00:34:46] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:43] *** Joins: aeth (~aeth@user/aeth)
[00:48:57] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:54:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[00:55:25] *** Quits: dre (~dre@2001:8003:c932:c301:e309:8ed:b76f:cbc5) (Remote host closed the connection)
[00:57:41] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[00:57:41] *** Joins: greaser|q (greaser@user/greasemonkey)
[00:57:43] *** greaser|q is now known as GreaseMonkey
[01:26:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 252 seconds)
[01:28:08] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:30:52] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[01:47:28] *** Quits: random-nick (~random-ni@87.116.183.117) (Ping timeout: 268 seconds)
[01:56:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:58:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:05:19] *** Joins: paule32 (~paule32@user/paule32)
[02:17:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:20:11] *** Joins: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net)
[02:57:13] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:03:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[03:05:33] *** Joins: johnjay (~pi@192.142.100.50)
[03:52:23] *** Quits: Psybur (~Psybur@mobile-166-170-32-197.mycingular.net) (Remote host closed the connection)
[04:50:56] *** Joins: lisp123 (~lisp123@5.30.23.247)
[04:55:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:57:14] *** Joins: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4)
[05:42:11] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[05:45:19] <winning-luser> whats the #u before the strings in the channel topic?
[05:51:47] <edgar-rft> good question - but no idea :-(
[05:52:19] <cyberbanjo> assume its a kind of readermacro dunno what specificly
[05:52:23] <mfiano> A read macro that expands to html
[05:53:13] <edgar-rft> hmm, is it a really good idea to confuse beginners with such a nonsense?
[05:53:55] <edgar-rft> I'm doing CL snce approx. 20 years but I never heard of such a thing.
[05:54:47] <paule32> unicode
[05:56:43] <edgar-rft> CLtL2 says #u means "undefined" :-)  see here -> https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node191.html
[05:58:10] <winning-luser> i ran it through my repl first because i was wondering if it did anything haha
[05:58:52] *** Joins: paule32_ (~paule32@user/paule32)
[05:59:05] <cyberbanjo> how is the CL spec? Is it kinda like C where "undefined" means "at compiler discretion"?
[06:00:20] *** Joins: paule32__ (~paule32@user/paule32)
[06:00:49] <kagevf> cyberbanjo: yes, except in the Common Lisp world we say "implementation" not "compiler"
[06:00:58] *** Quits: sts-q (~sts-q@91.200.108.228) (Ping timeout: 252 seconds)
[06:02:01] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:02:07] <cyberbanjo> ahh thanks kagevf
[06:03:46] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:04:05] <edgar-rft> ...took a while to find it but #u is undefined in the CLHS, too -> http://www.lispworks.com/documentation/HyperSpec/Body/02_dh.htm 
[06:04:16] *** Joins: paule32 (~paule32@user/paule32)
[06:05:17] <cyberbanjo> I struggle to understand the intention of it in the message, I am not super familiar with CL though. It just does an expected undefined type error if I run it (in sbcl (in slime))
[06:05:47] <cyberbanjo> no dispatch function defined for #\U
[06:05:48] <cyberbanjo>  
[06:06:40] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[06:07:36] <edgar-rft> to me it looks as if some particularly clever person had the idea to prefix all html-links with some custom syntax nobody else uses
[06:09:03] <winning-luser> well, let us not be too harsh to the clever person, whomever they are :)
[06:09:48] *** Joins: sts-q (~sts-q@212.53.219.225)
[06:10:12] <cyberbanjo> no ill intent just curiosity
[06:11:28] <edgar-rft> "... topic was set by phoe" - hmm, phoe *is* a particularly clever person but I have no idea why he does such a nonsense :-)
[06:15:47] <edgar-rft> maybe copy+paste was intellectually not challenging enough :-)
[06:15:49] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:77ec:1bae:cf66:681) (Ping timeout: 252 seconds)
[06:17:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:19:21] <edgar-rft> jokes aside, I'm just trying to find out if hunchentoot, drakma, or any of the other CL web candidates uses a #u read-macro for urls - anyone an idea?
[06:47:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:34:45] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[07:39:41] *** Quits: sts-q (~sts-q@212.53.219.225) (Ping timeout: 245 seconds)
[07:40:40] *** Joins: sts-q (~sts-q@212.53.219.225)
[07:45:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[07:46:04] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:04:11] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[08:07:25] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[08:59:03] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[09:00:09] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[09:01:13] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[09:01:47] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[09:48:28] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[09:50:40] <st_iron> good morning
[09:52:22] <beach> Hello st_iron.
[10:44:25] <kagevf> edgar-rft: I just did fgrep -irn '#u' --include='*.lisp' in hunchentoot and got no hits ... maybe one of the other libs uses it ...
[10:58:11] *** Joins: random-nick (~random-ni@87.116.183.117)
[11:00:59] *** Joins: makomo_ (~makomo@user/makomo)
[11:01:46] *** Quits: malaclyps (~mala@user/malaclyps) (Ping timeout: 245 seconds)
[11:39:48] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:40:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:02:16] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[12:49:41] *** Joins: makomo_ (~makomo@user/makomo)
[12:58:20] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 260 seconds)
[12:58:49] *** Joins: makomo_ (~makomo@user/makomo)
[13:11:34] <edgar-rft> cl-http (old HTTP server from the CMU AI archives) uses a #u read-macro for urls, but that's the only thing I found so far
[13:13:59] <edgar-rft> if you want to see modern web design look here -> http://www.ai.mit.edu/projects/iiip/doc/cl-http/cl-http.html
[13:15:08] *** Joins: cranium (~cranium@user/cranium)
[13:22:00] <edgar-rft> an example what the cl-http #u read-macro does can be found in the section "Specifying domain names portably" here -> http://clhttp.plasticki.com/show?7C9
[13:24:01] <edgar-rft> ...but we still need to ask phoe if that's what he wanted to tell us :-)
[13:26:27] *** Quits: cyberbanjo (~user@2607:fb90:42a5:932d:729f:7d3b:9271:89d4) (Remote host closed the connection)
[14:48:55] *** Quits: cranium (~cranium@user/cranium) (Ping timeout: 252 seconds)
[15:02:31] *** Joins: rotateq (~user@b2b-78-94-235-194.unitymedia.biz)
[15:40:23] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[15:43:31] *** Joins: makomo_ (~makomo@user/makomo)
[16:15:31] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:18:14] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:25:29] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[16:40:39] *** Quits: hendursa1 (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[16:51:24] *** Joins: cranium (~cranium@user/cranium)
[17:08:51] *** Joins: hendursa1 (~weechat@user/hendursaga)
[17:16:21] *** Quits: plexi (~orcabot@digital.sanctuary.org) (Quit: Don't panic!)
[17:16:52] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[17:24:39] *** Quits: rotateq (~user@b2b-78-94-235-194.unitymedia.biz) (Remote host closed the connection)
[17:30:06] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[17:31:12] *** Joins: makomo_ (~makomo@user/makomo)
[17:47:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:22:33] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[18:36:15] *** Joins: thrig (~thrig@65.113.153.50)
[18:54:52] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:55:31] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:58:33] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[18:58:51] <kagevf> I hadn't heard of CL-HTTP .... doesn't look like it's on quicklisp? I don't see it here: https://sabracrolleton.github.io/short-descriptions
[18:59:20] <kagevf> but it looks like it has a great history of non-trivial usage ... 
[18:59:56] *** Joins: aeth (~aeth@user/aeth)
[19:05:55] <kagevf> edgar-rft: do you know if the source for it is hosted anywhere?
[19:08:47] <edgar-rft> I think cl-http is obsolete because it can't handle https or something, gimme some seconds to search for the sources...
[19:13:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:14:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:15:19] <edgar-rft> kagevf: the only thing I found so far is this -> http://www.ai.mit.edu/projects/iiip/doc/cl-http/cl-http.html#distributions
[19:15:53] <edgar-rft> but you need pgp keys and I don't know if the ftp address is still valid
[19:16:10] <edgar-rft> need to run now but will try again later :-)
[19:19:42] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[19:19:54] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:20:19] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:21:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[19:36:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:38:51] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Quit: Bridge terminating on SIGTERM)
[19:38:51] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (Quit: Bridge terminating on SIGTERM)
[19:38:53] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Quit: Bridge terminating on SIGTERM)
[19:42:55] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[19:46:11] <kagevf> alright, thank you :)
[19:46:17] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:46:33] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[19:46:33] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[19:46:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:47:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:48:46] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:59:21] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:03:44] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:06:52] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[20:11:21] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 245 seconds)
[20:26:13] *** Joins: mala (~mala@user/malaclyps)
[20:29:23] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (Changing host)
[20:29:23] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[20:45:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:46:08] <CodeBitCookie[m]> Hello Everyone!
[20:46:29] <CodeBitCookie[m]> Just a few days ago, I asked about bindings
[20:47:13] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:47:14] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:47:55] <CodeBitCookie[m]> Just as a recall, my understanding is that "variables" are the data stored in memory and "bindings" are references (almost like pointers) to the "variables". Am I correct in this? Thanks in advance
[20:47:59] *** Quits: selwyn_ (~selwyn@user/selwyn) (Client Quit)
[20:49:06] <CodeBitCookie[m]> <pjb> "CodeBitCookie: the thing is that..." <- actually then according to this ^, it means that "variables" are references to "objects" and the "reference/link" is the binding?
[20:49:44] <CodeBitCookie[m]> or maybe I just can't put an oblique in between "reference" and "link"
[20:50:49] <CodeBitCookie[m]> so every "value" IS an "object" but NOT EVERY "object" is a "value"
[20:52:13] <CodeBitCookie[m]> should probably look at this link better: http://metamodular.com/common-lisp-semantics.html
[20:52:25] <kagevf> CodeBitCookie[m]: have you read this? I think it might cover a lot of what you're asking about: https://gigamonkeys.com/book/variables.html
[20:56:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:59:23] <CodeBitCookie[m]> I am currently reading that and that is where I got confused and started asking questions
[20:59:34] <CodeBitCookie[m]> ..here
[21:01:56] <CodeBitCookie[m]> I guess taking from the link about semantics, I got this: "The objects themselves live in memory somewhere (called the "heap"), but what is passed around to functions, and what is assigned to variables are always references."
[21:02:27] <CodeBitCookie[m]> Nothing about bindings, but ? I am actually very confused for a few days
[21:05:11] <lisp123> CodeBitCookie[m]: I was similarly confused for a long time
[21:05:32] <lisp123> I will let others reply, but two readings I found useful were in Common Lisp Recipes by Edi Weitz and SICP
[21:06:34] <kagevf> hmmm insteresting ... I was wondering how SICP could improve understanding of CL so that could be one way
[21:06:38] <lisp123> https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-21.html#%_sec_3.2
[21:07:00] *** Joins: makomo_ (~makomo@user/makomo)
[21:07:04] <lisp123> A very nice exposition on environments and bindings
[21:07:37] <thrig> one ring to rule them all, and in the darkness binding
[21:08:14] <kagevf> btw, lisp123 .... I read that link you pasted on indentation ... https://dept-info.labri.fr/~strandh/Teaching/PFS/Common/Strandh-Tutorial/indentation.html
[21:09:13] <kagevf> my emacs seems to support those rules without the suggestions for .emacs in that post ... the only 1 I have is this:
[21:09:20] <lisp123> kagevf: Scheme popularised lexical scope, and SICP is considered one of the classics by both PG and PN, who wrote some of leading books on CL. I don't want to get into any arguments, but IMO learning multiple lisps is a great way to understand your primary lisp language better. 
[21:09:36] <kagevf> (setq-default indent-tabs-mode nil)
[21:10:26] <kagevf> alright ... maybe I'll read sicp first and work on it with both scheme and CL
[21:10:46] <lisp123> kagevf: Emacs changes a lot and there are various different configurations, that link (written by our very own beach) has some of the clearest explanation on indentation
[21:11:38] <thrig> meanwhile Go has a gofmt cli tool anything can use
[21:12:18] <lisp123> This one is really good: https://mumble.net/~campbell/scheme/style.txt
[21:12:23] <lisp123> too*
[21:12:35] <lisp123> Written by the very own writer of ParEdit
[21:13:24] <kagevf> btw: for working through sicp with CL I'm banking on this being helpful: https://stackoverflow.com/questions/1159208/can-i-use-common-lisp-for-sicp-or-is-scheme-the-only-option
[21:13:28] <lisp123> kagevf: Let me know how you go. I read through it once, will do the questions this time around
[21:13:43] <lisp123> IIRC that link suggets to do SICP in scheme no?
[21:14:00] <thrig> porting between languages is probably a good skill to have
[21:14:08] <lisp123> thrig: 100% agree
[21:14:14] <kagevf> lisp123: oh, does it? I think I'll try to do it in both ... 
[21:15:22] <kagevf> lisp123: one thing I've noticed is that when reading books like On Lisp I need to stop and try things out in emacs/slime to make sure I understand what I'm looking at ... it has really paid off
[21:15:52] <kagevf> so I'll definitely do the questions ... and hopefully not take like 5 years to complete haha
[21:16:53] <lisp123> kagevf: Agree! Me too haha, but I think we will get faster as we get better
[21:18:01] <thrig> OTOH it could slow you down if you're trying to learn both a scheme and a LISP and SICP
[21:18:52] <kagevf> in my case, it *will* slow me down ... but I'm thinking the time investment will be worth it ... I don't want to breeze through the books ... I won't retain enough
[21:19:30] <lisp123> thrig: True, I guess it depends on ones goals. To get a production app up and running fast? Perhaps skip SICP
[21:19:50] <kagevf> lisp123: true! :) I'm also wondering how much I would pick up on a re-read of some of these ... some things take a while to stick (for me)
[21:20:01] <lisp123> To learn Common Lisp better? IMO a good idea to do SICP earlier on
[21:20:09] <thrig> the web guy would kill me if I put any lisp into production
[21:20:35] <lisp123> And also Sonja Keene's book on CLOS - that one is a classic too, kagevf add to your list :)
[21:20:50] <lisp123> thrig: Perhaps do it without him knowing ? :)
[21:21:08] <kagevf> it seems like most Lisp jobs are "rocket surgery using quantum formulas" so might as well take my time to learn right :)
[21:21:35] <lisp123> It does seem that way
[21:21:44] <kagevf> lisp123: already purchased along with amop and definitely on the list ... I'm thinking after sicp and paip
[21:22:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Network is unreachable)
[21:22:44] <kagevf> even if I'm not qualified for any of the Lisp jobs I see, I still enjoy writing applications with it because of the interactivity aspect ... so nice!
[21:22:45] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:23:12] <lisp123> I better get back to my interview prep :( Have to get Lisp out of mind and focus on business for a day
[21:24:03] <kagevf> yeah ... back to boring "algol" code reviews for me ....
[21:24:39] <thrig> if they ask you to reverse a binary tree ask them first if it's okay to remount the whiteboard
[21:25:12] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[21:25:13] <lisp123> thrig: lol
[21:25:21] <lisp123> kagevf: enjoy
[21:29:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:33:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:34:25] <kagevf> thrig: haha nice :)
[21:45:41] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[21:53:15] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[21:58:22] <pjb> CodeBitCookie[m]: I think the best model is a diagram such as:    var: [*]-->42    The name of the variable is the symbol VAR  the variable is the box [ ]   the binding is the arrow *-->  and the value is 42.
[21:58:35] <pjb> CodeBitCookie[m]: the rest is just implementations trying to implement this model.
[22:01:29] <kagevf> yet another pjb comment I'm copying to my notes ...
[22:02:26] <pjb> CodeBitCookie[m]: object and value are synonym in Common Lisp.
[22:02:51] <pjb> Notably, all CL values have a class, and generic function methods can dispatch on those classes.
[22:04:32] *** Joins: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com)
[22:21:18] <White_Flame> CodeBitCookie[m]: certain small values, such as integers, characters, single-floats, etc might not be literal references, but the values are immediately represented in a machine word
[22:22:05] <White_Flame> s/integers/fixnums/
[22:24:55] <White_Flame> also, I think this might just have been a mental typo on your part, but "values" exist, and bindings are places to hold/refer to values.  "variables" are just names for some particular bindings that can happen
[22:26:16] <pjb> Notably: a variable name may reference different variables (boxes) at the same time, depending on the lexical scope.
[22:26:39] <pjb> or a variable (a box) can have no name (eg. after compilation).
[22:27:03] <White_Flame> right, a variable is a name to look up in some environment and find the binding.  This process now happens fully at compile-time
[22:27:30] <White_Flame> with dynamic bindings being pretty directly findable now, given a symbol
[22:43:09] <winning-luser> Is there a simple Lisp implementation to look at its code to see how it implements this value binding model?
[22:53:00] <White_Flame> if it's too simple, then it doesn't really represent what's going on in real systems
[22:53:08] <White_Flame> the simplest is that the environment is simly an a-list
[22:53:48] <White_Flame> (defvar *foo* 1) (defun bar (x) (let ((*foo* 2)) ...)), if you call (bar 3), then the environment could be
[22:54:03] <White_Flame> ((*foo* . 2) (x . 3) (*foo* . 1))
[22:54:51] <White_Flame> (setf *foo* 4) would mutate the first ASSOC-found entry for *foo* in the environment, and leave the earlier one (later on the list) alone
[23:02:54] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:13:39] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[23:19:44] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[23:29:37] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Quit: ERC (IRC client for Emacs 27.2))
[23:52:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
