[00:02:41] *** Quits: zwr (~zwr@2804:d45:b966:fb00:f0c0:f746:9f80:b26b) (Ping timeout: 250 seconds)
[00:03:25] *** Joins: zwr (~zwr@2804:d45:b966:fb00:44a0:dd67:7917:26dc)
[00:07:02] *** Quits: torbjornsd (~torbjorns@213.158.42.177) (Ping timeout: 240 seconds)
[00:18:38] *** Joins: klovett (~klovett@166.205.90.177)
[00:20:41] *** Joins: torbjornsd (~torbjorns@213.158.42.177)
[00:22:30] *** Quits: klovett__ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[00:28:15] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:bf27:e932:4f40:78cd)
[00:44:35] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:57:57] *** Quits: torbjornsd (~torbjorns@213.158.42.177) (Quit: Leaving)
[01:21:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[01:29:17] *** Joins: badkins (~badkins@136.56.92.199)
[01:31:31] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6adf:f25e:1e5f:74e1) (Ping timeout: 250 seconds)
[01:33:54] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[01:48:10] *** Quits: wnklmnn (~wnklmnn@2a02:908:4e2:9740:bf27:e932:4f40:78cd) (Quit: Leaving)
[01:56:10] *** Joins: daviid (~user@179.210.52.91)
[02:07:35] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 264 seconds)
[02:10:13] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[02:28:04] *** Joins: abralek_ (~abralek@j74182.upc-j.chello.nl)
[02:28:05] *** Quits: abralek (~abralek@109.38.157.180) (Read error: Connection reset by peer)
[02:31:17] *** Joins: badkins (~badkins@136.56.92.199)
[02:47:26] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[02:51:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca)
[02:52:12] <sonny> a tail call has to be the last expression in a function right?
[02:54:38] <sonny> just wondering if I really am using mutal tail calls https://bpa.st/36SQ
[02:55:17] <Zipheir> Crudely, yes.  It's a bit more subtle; the R7RS standard has a deeper definition of "tail position" (Section 3.5)
[02:55:38] <Zipheir> Er, "tail context".
[02:56:09] <fizzie> But the last expression of both `and` and `or`, and both branches of `if` do qualify (I was looking at the R5RS version, but I doubt that's changed), so that should be fine w.r.t. I and T.
[02:56:36] <Zipheir> Yes, last expression of and and or are in tail context.
[02:57:05] <sonny> ok, great
[02:59:37] <sonny> also from this exercise I realize you can make a compiler that emits a recursive descent parser, but I'm not sure if that's useful
[03:00:26] <Zipheir> It's convenient.
[03:01:03] <Zipheir> Plenty of languages implementations use recursive descent parsers.
[03:01:12] <Zipheir> *language
[03:01:21] <sonny> yeah, but they all do it manually
[03:01:44] <Zipheir> I suppose that's because if they were to use parser generators, they'd use YACC.
[03:01:48] <sonny> it does seem easier when it comes to error handling, e.g. skipping input
[03:01:54] <Zipheir> (or some other LALR parser generator)
[03:03:04] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:05:06] <Zipheir> The big problem with recursive descent is that many languages aren't LL(k), and it's not easy to confirm that a RD parser will run with a certain time/space complexity.
[03:05:09] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[03:10:42] <sonny> which is kinda weird
[03:11:18] <sonny> it seems like they were not aware of this ...
[03:11:49] <sonny> fortunatley we have more powerfull parsers
[03:12:26] <Zipheir> Parsing is (a) tricky and (b) boring, so a lot of people just kludge it.
[03:13:51] <sonny> good point
[03:14:43] <Zipheir> Some currently-popular parsing techniques (e.g. "packrat" parsing, Parsec-style monadic parsing) are also LL(k), so the profusion of weak parsing techniques continues, I guess.
[03:15:07] <sonny> PEG is popular now
[03:15:24] <Zipheir> PEG, that's the one I was forgetting.  Also LL(k)!
[03:15:25] <sonny> no LL(k) limit iirc
[03:16:28] <Zipheir> Well, the k limit is what keeps parsers running in reasonable time.  Most of these techniques include an LL(∞) option, which has to be used a lot for parsing most languages.
[03:16:47] <Zipheir> But that sucks, because using infinite lookahead means throwing out running time guarantees.
[03:17:16] <sonny> yeah, I'm pretty sure that's what PEG does
[03:17:19] <Zipheir> This is why LALR(1) parsers are a great invention, IMHO.
[03:18:19] <sonny> yep
[03:19:29] <sonny> so, I'm curious why r6rs seems too large, but (a lot of?) scheme compilers use a smaller variant but extend it?
[03:20:43] <Zipheir> Many Scheme implementors didn't adopt R6RS, for various reasons, so there are a lot of "R5RS+" Schemes, as you say.
[03:20:48] <sonny> I really like scheme, it's just kinda weird to have so many compilers but you can't exactly compile other code, it seem like the standard only exists for someone to port code
[03:25:09] <Zipheir> Portability is indeed a challenge.
[03:25:40] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[03:26:36] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:26:47] <Zipheir> Hence the attempt of R7RS to provide both a small core à la R5 and a full set of standard libraries.
[03:28:04] <sonny> r7rs also seems small enough for a course
[03:30:01] <Zipheir> I found that writing portable-ish Scheme got vastly easier after I discovered the SRFIs.
[03:31:08] <sonny> ah
[03:33:58] <Zipheir> SRFI 1 alone can save you a lot of reinventing the wheel when working with lists.
[03:45:01] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[03:45:55] *** Joins: hiruji (~hiruji@user/hiruji)
[03:51:59] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 264 seconds)
[03:56:17] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:25:07] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a) (Remote host closed the connection)
[04:25:25] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a)
[04:27:42] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[04:31:59] *** Joins: klovett_ (~klovett@166.205.90.177)
[04:34:34] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[04:40:44] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 268 seconds)
[04:56:30] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[05:38:49] *** Quits: sonny (~sonny@bras-base-london1483w-grc-27-70-51-121-200.dsl.bell.ca) (Quit: Going offline, see ya! (www.adiirc.com))
[05:42:53] *** Joins: pull (~tcz@91.150.165.88)
[05:43:38] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[05:43:56] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:46:32] *** Joins: badkins (~badkins@136.56.92.199)
[05:51:23] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[05:58:11] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[06:00:54] *** Joins: TCZ (~tcz@91.150.165.88)
[06:19:08] *** Quits: klovett_ (~klovett@166.205.90.177) (Quit: ZZZzzz…)
[06:19:43] *** Joins: klovett (~klovett@166.205.90.177)
[06:31:11] *** Quits: TCZ (~tcz@91.150.165.88) (Quit: Leaving)
[06:38:24] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[06:42:14] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[06:48:22] *** Joins: mononote (~mononote@user/mononote)
[07:16:08] *** Joins: theruran (uid11305@hampstead.irccloud.com)
[07:18:15] *** Joins: badkins (~badkins@136.56.92.199)
[07:22:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:56:36] *** Joins: klovett_ (~klovett@166.205.90.177)
[07:59:26] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[08:04:14] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[08:07:01] *** Joins: klovett (~klovett@166.205.90.177)
[08:10:12] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:13:23] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:24:20] *** Quits: hiruji (~hiruji@user/hiruji) (Read error: Connection reset by peer)
[08:26:40] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:52:59] *** Joins: klovett_ (~klovett@166.205.90.177)
[08:53:48] *** Joins: klovett__ (~klovett@166.205.90.177)
[08:56:02] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[08:56:25] *** Joins: hiruji (~hiruji@user/hiruji)
[08:57:42] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[09:19:21] *** Joins: badkins (~badkins@136.56.92.199)
[09:24:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[09:24:31] *** Joins: klovett (~klovett@166.205.90.177)
[09:27:50] *** Quits: klovett__ (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[09:28:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:29:02] *** Joins: seninha (~seninha@user/seninha)
[09:49:22] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:07:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[10:08:37] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[10:09:08] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[10:11:04] *** Joins: abralek (~abralek@109.38.156.176)
[10:11:11] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:13:41] *** Quits: abralek_ (~abralek@j74182.upc-j.chello.nl) (Read error: Connection reset by peer)
[10:13:41] *** Quits: abralek (~abralek@109.38.156.176) (Read error: Connection reset by peer)
[10:13:50] *** Joins: abralek (~abralek@j74182.upc-j.chello.nl)
[10:26:19] *** Joins: klovett_ (~klovett@166.205.90.177)
[10:29:38] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[10:30:15] *** Joins: klovett (~klovett@166.205.90.177)
[10:30:56] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[10:33:22] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 260 seconds)
[10:36:51] <amazigh> heyo
[10:36:57] <amazigh> wasamasa: re the comparator at https://etherpad.wikimedia.org/p/scheme-comparator
[10:37:05] <amazigh> why "hosted runtime" is part of OS?
[10:37:42] <amazigh> what is special architecture? things like microcontrollers?
[10:38:56] <amazigh> In the documentation bullet, What does UTSL mean?
[10:39:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[10:40:12] *** Joins: klovett_ (~klovett@166.205.90.177)
[10:41:26] *** Joins: klovett__ (~klovett@166.205.90.177)
[10:42:23] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 264 seconds)
[10:42:47] <amazigh> I removed the SICP bullet since it is covered by SRFI..
[10:43:29] <sjamaan> amazigh: Use the source, Luke
[10:45:11] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[10:46:53] *** Joins: klovett (~klovett@166.205.90.177)
[10:47:15] <sham1> Sauce
[10:50:35] <amazigh> ahah
[10:50:41] <amazigh> great, I will add that.
[10:50:44] *** Quits: klovett__ (~klovett@166.205.90.177) (Ping timeout: 268 seconds)
[11:11:16] <amazigh> re nixos, there is yet-another nixos-like package manager this time coded with go
[11:11:18] <amazigh> https://lobste.rs/s/g1tqfe/bramble_purely_functional_build_system
[11:13:13] <amazigh> that seems also like nixos but with python code
[11:13:14] <amazigh> https://spack.readthedocs.io/en/latest/
[11:19:15] *** Quits: klovett (~klovett@166.205.90.177) (Quit: ZZZzzz…)
[11:20:17] *** Joins: badkins (~badkins@136.56.92.199)
[11:24:42] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[11:27:31] <amazigh> re comparator, while I like the rework of the comparator;
[11:27:39] <amazigh> it seems to me it is more complex
[11:27:57] <sham1> Well the complexity is due to the complexity of the subject matter
[11:28:11] <amazigh> I am wondering how to the manage the data(base)
[11:28:52] <amazigh> sham1: yes, previously they were only 10 boolean flags, it was both easier to implement in terms of code and gui
[11:29:17] <amazigh> I also understand that a half-backed comparator will not play its role
[11:29:30] <amazigh> but now, I am won
[11:30:17] <amazigh> now, I am wondering whether I should have http server code to help with managing the data
[11:30:37] <amazigh> so far scheme.rs is only based on static assets
[11:31:27] <amazigh> encoding everything I want to encode in .scm files seems, if not a waste a time, at least it will not be manageable.
[11:31:56] <amazigh> but at the same time having a gui to edit the data, will also add complexity
[11:32:03] <amazigh> a dedicated gui
[11:35:46] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:49:59] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:50:21] <amazigh> featurectomy vs. yak shaving, that is the question.
[11:57:28] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[12:19:32] *** Quits: abralek (~abralek@j74182.upc-j.chello.nl) (Ping timeout: 268 seconds)
[12:20:32] *** Quits: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f) (Remote host closed the connection)
[12:20:54] *** Joins: kopiyka (~user@2001:983:fe8b:1:b26e:bfff:fe2b:503f)
[12:31:57] *** Joins: civodul (~user@guix/contributor/civodul)
[12:41:04] <sham1> Often they aren't as separate as one might hope
[12:47:44] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Read error: Connection reset by peer)
[12:48:22] <dTal> removing the hair feature from the yak
[12:57:17] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[13:02:41] *** Joins: gproto10 (~gproto23@user/gproto23)
[13:06:18] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:18:03] *** Joins: seninha (~seninha@user/seninha)
[13:21:17] *** Joins: badkins (~badkins@136.56.92.199)
[13:25:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[13:32:15] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:35d:b82a:c3c5:fc30)
[13:37:36] <amazigh> on unrelated note, that is great html ouput https://kgbook.org/#sec-preface (kg = knowledge graph)
[13:39:15] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[13:45:42] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[13:48:15] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:53:27] <rgherdt> why does SRFI-1 mention lset-adjoin! , but the implementation doesn't define it?
[14:26:56] *** Joins: Everything (~Everythin@37.115.210.35)
[14:30:50] <amazigh> re kgbook and latex: there is php code at https://github.com/Knowledge-Graphs-Book/HTML-Book/
[14:36:41] <amazigh> nvm, the code does not take latex as input, in the repo, the book is already in html markup inside php code..
[15:02:57] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 268 seconds)
[15:13:51] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[15:14:08] *** Joins: madage (~madage@user/madage)
[15:27:56] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[15:45:24] *** Joins: TCZ (~tcz@91.150.165.88)
[15:51:28] *** Quits: gproto10 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[16:00:01] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[16:12:26] *** Quits: f8l (~f8l@37.228.213.3) (Remote host closed the connection)
[16:14:38] <wasamasa> amazigh: hosted runtimes abstract the underlying OS away
[16:14:51] <wasamasa> amazigh: like, think of browsers
[16:15:10] <wasamasa> amazigh: special architectures are anything not amd64
[16:15:42] <wasamasa> amazigh: you get a lot less schemes to play with once you use a raspberry pi and there's even differences between the hardware revisions because they switch architecture midway
[16:18:41] *** Joins: gproto10 (~gproto23@user/gproto23)
[16:20:56] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 256 seconds)
[16:37:56] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[17:01:52] <sham1> Special architectures also seems to include x86 as well. Because of course, why would people target a 32-bit ISA when AMD64 is a thing
[17:03:36] *** Quits: TCZ (~tcz@91.150.165.88) (Quit: Leaving)
[17:05:46] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[17:08:05] *** Joins: badkins (~badkins@136.56.92.199)
[17:09:38] *** Quits: gproto10 (~gproto23@user/gproto23) (Quit: Leaving)
[17:09:56] *** Joins: gproto10 (~gproto23@user/gproto23)
[17:12:50] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[17:14:24] *** Joins: livoreno (~livoreno@user/notzmv)
[17:23:07] *** Joins: badkins (~badkins@136.56.92.199)
[17:36:20] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:35d:b82a:c3c5:fc30) (Ping timeout: 256 seconds)
[17:42:59] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 264 seconds)
[17:43:54] *** Joins: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b)
[17:48:46] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[17:58:36] *** Joins: klovett (~klovett@166.205.90.177)
[18:07:04] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[18:08:04] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[18:10:46] <zwr> I don't understand what the later half of the little schemer's 9th chapter is even about
[18:10:59] *** Joins: seninha (~seninha@user/seninha)
[18:11:14] <zwr> is there a write up somewhere that explains it better?
[18:16:10] *** Joins: klovett_ (~klovett@166.205.90.177)
[18:18:47] *** Joins: klovett__ (~klovett@166.205.90.177)
[18:18:48] *** Quits: klovett (~klovett@166.205.90.177) (Ping timeout: 256 seconds)
[18:20:47] *** Quits: klovett_ (~klovett@166.205.90.177) (Ping timeout: 264 seconds)
[18:20:55] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 268 seconds)
[18:22:24] *** Joins: s-liao (~s-liao@101.86.101.64)
[18:23:59] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 268 seconds)
[18:29:57] *** Joins: hiruji (~hiruji@user/hiruji)
[18:32:34] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[18:44:43] *** Joins: mononote (~mononote@user/mononote)
[18:46:14] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[18:52:26] *** Joins: xsperry (~xs@cpe-188-129-101-182.dynamic.amis.hr)
[19:37:26] <Zipheir> zwr: Oh, the Y combinator?
[19:39:53] <Zipheir> zwr: There is definitely a difficulty jump, and I had to read it a few times.  The same material is covered in other books on lambda calculus.  In particular, you might read the chapter "Recursion" from Michaelson's _Intro to FP Through Lambda Calculus_https://www.macs.hw.ac.uk/~greg/books/gjm.lambook88.pdf
[19:46:01] <Zipheir> Y can be used to implement general recursion, since it can create an unbounded number of copies of a function. (Y f => f (Y f))
[19:51:39] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[19:52:05] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:54:20] <zwr> yes, it seems to be called "Y combinator" from what I've googled about the chapter. I'll check that stuff out, thanks
[19:55:54] <Franciman> a nice POV on the Y combinator, imho is the following
[19:56:01] <Franciman> we want to have self-referential definitions
[19:56:03] <Franciman> for example
[19:56:44] <zwr> yeah that seems to be what the little schemer suggests
[19:56:45] <Franciman> f = \x. if x < 1 then x else f (x - 1) + 1
[19:56:53] <Franciman> you are defining something in terms of itself
[19:57:01] <Franciman> so let's do this for the sake of doing it
[19:57:07] <Franciman> we take the RHS and abstract over f
[19:57:10] <Franciman> it becomes
[19:57:20] <Franciman> \f. \x. if x < 1 then x else f (x-1) + 1
[19:57:25] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[19:57:31] <Franciman> now this is a well defined function
[19:57:38] <Franciman> it makes sense
[19:57:43] <Franciman> you just have tu give it the right f
[19:58:01] <Franciman> let's call this function g = \f. \x. if x < 1 then x else f(x-1) + 1
[19:58:09] <Franciman> so what you are trying to define is
[19:58:11] <Franciman> f = g f
[19:58:19] <Franciman> i.e. you want to find a fixed point of g
[19:58:25] <Franciman> that would be the definition of f
[19:58:50] <Franciman> Y does exactly this
[19:59:00] <Franciman> finds the least fixed point of a function
[19:59:02] <Franciman> so saying
[19:59:04] <Franciman> f = Y g
[19:59:09] <Franciman> is basically saying
[19:59:11] <Franciman> f is such that
[19:59:13] <Franciman> f = g f
[19:59:37] <Franciman> so you gave meaning to a self referential definition (watchout that this meaning could be an infinite loop!!!!)
[20:00:00] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[20:00:17] <Zipheir> It's also why having general recursion means no guarantee of termination.
[20:01:11] <Zipheir> Franciman: Thanks.  That's a compressed version of how Michaelson explains Y in the book I mentioned.
[20:02:05] <Franciman> I read it in Landin's paper on SECD machines
[20:02:11] <Franciman> he is much better at explaining it
[20:02:18] <Franciman> thank me
[20:02:24] <Franciman> thank*
[20:02:27] <Franciman> hol
[20:02:30] <Franciman> than*
[20:02:31] <Zipheir> Heh.
[20:03:07] <sham1> To typo is human
[20:04:56] <Zipheir> Ugh, and I was just reading about the nominalization fad in advertizing.
[20:06:03] <Zipheir> "Let's recursive together!"
[20:06:24] <Franciman> lol
[20:10:38] *** Quits: Inline (~Inline@2a02:908:1252:7a80:9b56:dca:ba79:dc9b) (Ping timeout: 265 seconds)
[20:21:47] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:22:34] *** Joins: badkins (~badkins@136.56.92.199)
[20:32:01] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Remote host closed the connection)
[20:32:14] *** Joins: xgqt (~user@static62133140007.ostnet.pl)
[20:35:11] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 264 seconds)
[20:36:01] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:36:32] *** Joins: badkins (~badkins@136.56.92.199)
[20:36:50] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:37:01] *** Joins: badkins (~badkins@136.56.92.199)
[20:44:22] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[20:46:40] *** Joins: badkins (~badkins@136.56.92.199)
[20:51:20] <sham1> Everyone is recursive
[20:51:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[20:52:32] <Zipheir> As the original title of the book has it, "I" Is a Strange Loop.
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:52:59] *** Joins: apg (~apg@71-34-106-187.ptld.qwest.net)
[20:54:01] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:54:37] *** X-Scale` is now known as X-Scale
[20:55:05] *** Joins: badkins (~badkins@136.56.92.199)
[21:00:41] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:00:50] *** Joins: badkins (~badkins@136.56.92.199)
[21:12:02] *** Quits: apg (~apg@71-34-106-187.ptld.qwest.net) (Ping timeout: 240 seconds)
[21:15:59] <amazigh> especially meta interpreter towers in the head of one's mind
[21:16:58] <amazigh> I figured an alternative plan to keep scheme.rs static based, while still easy, or at least possible to edit the database.
[21:17:46] <amazigh> so far, what i have a list of list of three elements, but that is difficult to edit. A nested datastructure is easier to the mind in that case.
[21:19:09] <amazigh> To implement the nested datastrustructe, I think I will use sxml.
[21:19:41] <amazigh> it will need a processor to properly render to html (et al.)
[21:20:01] <amazigh> which revived the idea of skribe syntax :D
[21:23:26] <amazigh> On a unrelated note there is still seven wip srfi https://srfi.schemers.org/?sort=status-asc
[21:24:31] <amazigh> rudybot: skribe syntax is great.
[21:24:43] <rudybot> amazigh: ,skribe is http://www-sop.inria.fr/mimosa/fp/Skribe/
[21:30:14] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:49:05] <jcowan> Y depends on normal-order eval, which programmers are not used to.  Z is I think clearer even though it's longer.
[21:49:17] <jcowan> https://stackoverflow.com/questions/37469378/y-combinator-implementation-scheme
[21:50:19] <sham1> Well I'll expose myself as one of those kinds of programmers. What is a normal-order eval
[21:52:18] <dpk> lazy evaluation in maths speak
[21:52:22] <sham1> Ah
[21:52:35] <jcowan> one in which arguments to a function are not evaluated untii their values are required.  It's called "normal" because it terminates without error whenever any other evaluation order terminates without error.
[21:53:00] <Zipheir> jcowan: Yeah, yeah, AKA "the applicative order Y combinator".
[21:53:20] <Zipheir> Which is what The Little Schemer presents.
[21:53:41] <Zipheir> i.e. not the normal-order combinator.
[21:54:47] <jcowan> Good
[21:56:07] <jcowan> dpk, sham1:  Not quite.  Lazy evaluates arguments at most once; normal eval can do so more than once.
[21:57:12] <jcowan> Given (define (f x) (+ x x) and some g, than (f (g 0)) will evaluate (g 0) twice under normal eval, once under lazy eval.
[21:57:47] <jcowan> Put otherwise: lazy = normal + memoization
[21:59:38] <sham1> I need to read about this then, because I don't understand the rationale of it evaluating it more than once
[22:01:35] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:02:45] *** Joins: badkins (~badkins@136.56.92.199)
[22:06:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:09:02] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:11:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a) (Remote host closed the connection)
[22:12:43] <jcowan> In practice there isn't any, but memoization is an effect and mathematicians, they hates those effects.
[22:13:20] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:14:22] <sham1> Fair enough
[22:15:13] <Zipheir> Indeed, for performance reasons you might not always want memoization.
[22:15:48] *** Quits: klovett__ (~klovett@166.205.90.177) (Quit: Textual IRC Client: www.textualapp.com)
[22:16:57] *** Joins: badkins (~badkins@136.56.92.199)
[22:24:23] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:25:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4744:6074:ea58:ae8a)
[22:27:30] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[22:28:06] *** Quits: sm2n_ (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[22:28:10] *** Joins: sm2n (~sm2n@user/sm2n)
[22:32:05] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:7883:4458:4520:f986)
[22:32:06] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:7883:4458:4520:f986) (Changing host)
[22:32:06] *** Joins: skapata (~Skapata@user/skapata)
[22:33:24] *** Quits: h_m (~h_m@186-149-117-154.bitcointernet.co.za) (Remote host closed the connection)
[22:36:49] *** Joins: h_m (~h_m@186-149-117-154.bitcointernet.co.za)
[22:40:03] *** Joins: abralek (~user@j74182.upc-j.chello.nl)
[22:54:30] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Read error: Connection reset by peer)
[22:54:47] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[22:57:00] *** Joins: poselyqualityles (~poselyqua@user/poselyqualityles)
[23:16:03] *** Joins: civodul (~user@guix/contributor/civodul)
[23:18:56] *** Joins: klovett (~klovett@166.205.90.177)
[23:21:14] *** Quits: gproto10 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:27:11] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Remote host closed the connection)
[23:28:13] *** Joins: xgqtd (~user@static62133140007.ostnet.pl)
[23:38:03] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85::bde6)
[23:38:16] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85::bde6) (Remote host closed the connection)
[23:42:07] *** Joins: f8l (~f8l@37.228.213.3)
[23:45:43] *** xgqtd is now known as xgqt
[23:53:47] *** Quits: poselyqualityles (~poselyqua@user/poselyqualityles) (Ping timeout: 264 seconds)
